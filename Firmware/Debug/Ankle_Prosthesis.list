
Ankle_Prosthesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c540  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  0800c6d0  0800c6d0  0001c6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ccd8  0800ccd8  0001ccd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cce0  0800cce0  0001cce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cce4  0800cce4  0001cce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000004e8  20000000  0800cce8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  000204e8  2**0
                  CONTENTS
  8 .bss          0000a920  200004e8  200004e8  000204e8  2**3
                  ALLOC
  9 ._user_heap_stack 00003000  2000ae08  2000ae08  000204e8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000204e8  2**0
                  CONTENTS, READONLY
 11 .debug_info   00052ed2  00000000  00000000  00020518  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008df9  00000000  00000000  000733ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001a54b  00000000  00000000  0007c1e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d98  00000000  00000000  00096730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003918  00000000  00000000  000984c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001858a  00000000  00000000  0009bde0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000ae6e  00000000  00000000  000b436a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000bf1d8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006224  00000000  00000000  000bf254  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000df  00000000  00000000  000c5478  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004e8 	.word	0x200004e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c6b8 	.word	0x0800c6b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004ec 	.word	0x200004ec
 80001cc:	0800c6b8 	.word	0x0800c6b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_d2iz>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b4c:	d215      	bcs.n	8000b7a <__aeabi_d2iz+0x36>
 8000b4e:	d511      	bpl.n	8000b74 <__aeabi_d2iz+0x30>
 8000b50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b58:	d912      	bls.n	8000b80 <__aeabi_d2iz+0x3c>
 8000b5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d105      	bne.n	8000b8c <__aeabi_d2iz+0x48>
 8000b80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	bf08      	it	eq
 8000b86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <__aeabi_d2uiz>:
 8000b94:	004a      	lsls	r2, r1, #1
 8000b96:	d211      	bcs.n	8000bbc <__aeabi_d2uiz+0x28>
 8000b98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b9c:	d211      	bcs.n	8000bc2 <__aeabi_d2uiz+0x2e>
 8000b9e:	d50d      	bpl.n	8000bbc <__aeabi_d2uiz+0x28>
 8000ba0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba8:	d40e      	bmi.n	8000bc8 <__aeabi_d2uiz+0x34>
 8000baa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d102      	bne.n	8000bce <__aeabi_d2uiz+0x3a>
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	4770      	bx	lr
 8000bce:	f04f 0000 	mov.w	r0, #0
 8000bd2:	4770      	bx	lr

08000bd4 <__aeabi_d2f>:
 8000bd4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bdc:	bf24      	itt	cs
 8000bde:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000be6:	d90d      	bls.n	8000c04 <__aeabi_d2f+0x30>
 8000be8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bfc:	bf08      	it	eq
 8000bfe:	f020 0001 	biceq.w	r0, r0, #1
 8000c02:	4770      	bx	lr
 8000c04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c08:	d121      	bne.n	8000c4e <__aeabi_d2f+0x7a>
 8000c0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c0e:	bfbc      	itt	lt
 8000c10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c14:	4770      	bxlt	lr
 8000c16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c1e:	f1c2 0218 	rsb	r2, r2, #24
 8000c22:	f1c2 0c20 	rsb	ip, r2, #32
 8000c26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c2e:	bf18      	it	ne
 8000c30:	f040 0001 	orrne.w	r0, r0, #1
 8000c34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c40:	ea40 000c 	orr.w	r0, r0, ip
 8000c44:	fa23 f302 	lsr.w	r3, r3, r2
 8000c48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c4c:	e7cc      	b.n	8000be8 <__aeabi_d2f+0x14>
 8000c4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c52:	d107      	bne.n	8000c64 <__aeabi_d2f+0x90>
 8000c54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c58:	bf1e      	ittt	ne
 8000c5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c62:	4770      	bxne	lr
 8000c64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <__aeabi_uldivmod>:
 8000c74:	b953      	cbnz	r3, 8000c8c <__aeabi_uldivmod+0x18>
 8000c76:	b94a      	cbnz	r2, 8000c8c <__aeabi_uldivmod+0x18>
 8000c78:	2900      	cmp	r1, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	2800      	cmpeq	r0, #0
 8000c7e:	bf1c      	itt	ne
 8000c80:	f04f 31ff 	movne.w	r1, #4294967295
 8000c84:	f04f 30ff 	movne.w	r0, #4294967295
 8000c88:	f000 b97a 	b.w	8000f80 <__aeabi_idiv0>
 8000c8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c94:	f000 f806 	bl	8000ca4 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4770      	bx	lr

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	468c      	mov	ip, r1
 8000caa:	460d      	mov	r5, r1
 8000cac:	4604      	mov	r4, r0
 8000cae:	9e08      	ldr	r6, [sp, #32]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d151      	bne.n	8000d58 <__udivmoddi4+0xb4>
 8000cb4:	428a      	cmp	r2, r1
 8000cb6:	4617      	mov	r7, r2
 8000cb8:	d96d      	bls.n	8000d96 <__udivmoddi4+0xf2>
 8000cba:	fab2 fe82 	clz	lr, r2
 8000cbe:	f1be 0f00 	cmp.w	lr, #0
 8000cc2:	d00b      	beq.n	8000cdc <__udivmoddi4+0x38>
 8000cc4:	f1ce 0c20 	rsb	ip, lr, #32
 8000cc8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000ccc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cd0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cd4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cd8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cdc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ce0:	0c25      	lsrs	r5, r4, #16
 8000ce2:	fbbc f8fa 	udiv	r8, ip, sl
 8000ce6:	fa1f f987 	uxth.w	r9, r7
 8000cea:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cee:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cf2:	fb08 f309 	mul.w	r3, r8, r9
 8000cf6:	42ab      	cmp	r3, r5
 8000cf8:	d90a      	bls.n	8000d10 <__udivmoddi4+0x6c>
 8000cfa:	19ed      	adds	r5, r5, r7
 8000cfc:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d00:	f080 8123 	bcs.w	8000f4a <__udivmoddi4+0x2a6>
 8000d04:	42ab      	cmp	r3, r5
 8000d06:	f240 8120 	bls.w	8000f4a <__udivmoddi4+0x2a6>
 8000d0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d0e:	443d      	add	r5, r7
 8000d10:	1aed      	subs	r5, r5, r3
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d18:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d20:	fb00 f909 	mul.w	r9, r0, r9
 8000d24:	45a1      	cmp	r9, r4
 8000d26:	d909      	bls.n	8000d3c <__udivmoddi4+0x98>
 8000d28:	19e4      	adds	r4, r4, r7
 8000d2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2e:	f080 810a 	bcs.w	8000f46 <__udivmoddi4+0x2a2>
 8000d32:	45a1      	cmp	r9, r4
 8000d34:	f240 8107 	bls.w	8000f46 <__udivmoddi4+0x2a2>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	443c      	add	r4, r7
 8000d3c:	eba4 0409 	sub.w	r4, r4, r9
 8000d40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d44:	2100      	movs	r1, #0
 8000d46:	2e00      	cmp	r6, #0
 8000d48:	d061      	beq.n	8000e0e <__udivmoddi4+0x16a>
 8000d4a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d4e:	2300      	movs	r3, #0
 8000d50:	6034      	str	r4, [r6, #0]
 8000d52:	6073      	str	r3, [r6, #4]
 8000d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xc8>
 8000d5c:	2e00      	cmp	r6, #0
 8000d5e:	d054      	beq.n	8000e0a <__udivmoddi4+0x166>
 8000d60:	2100      	movs	r1, #0
 8000d62:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d66:	4608      	mov	r0, r1
 8000d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6c:	fab3 f183 	clz	r1, r3
 8000d70:	2900      	cmp	r1, #0
 8000d72:	f040 808e 	bne.w	8000e92 <__udivmoddi4+0x1ee>
 8000d76:	42ab      	cmp	r3, r5
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xdc>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 80fa 	bhi.w	8000f74 <__udivmoddi4+0x2d0>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb65 0503 	sbc.w	r5, r5, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	46ac      	mov	ip, r5
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d03f      	beq.n	8000e0e <__udivmoddi4+0x16a>
 8000d8e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	b912      	cbnz	r2, 8000d9e <__udivmoddi4+0xfa>
 8000d98:	2701      	movs	r7, #1
 8000d9a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d9e:	fab7 fe87 	clz	lr, r7
 8000da2:	f1be 0f00 	cmp.w	lr, #0
 8000da6:	d134      	bne.n	8000e12 <__udivmoddi4+0x16e>
 8000da8:	1beb      	subs	r3, r5, r7
 8000daa:	0c3a      	lsrs	r2, r7, #16
 8000dac:	fa1f fc87 	uxth.w	ip, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000db6:	0c25      	lsrs	r5, r4, #16
 8000db8:	fb02 3318 	mls	r3, r2, r8, r3
 8000dbc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dc0:	fb0c f308 	mul.w	r3, ip, r8
 8000dc4:	42ab      	cmp	r3, r5
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0x134>
 8000dc8:	19ed      	adds	r5, r5, r7
 8000dca:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x132>
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	f200 80d1 	bhi.w	8000f78 <__udivmoddi4+0x2d4>
 8000dd6:	4680      	mov	r8, r0
 8000dd8:	1aed      	subs	r5, r5, r3
 8000dda:	b2a3      	uxth	r3, r4
 8000ddc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000de0:	fb02 5510 	mls	r5, r2, r0, r5
 8000de4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000de8:	fb0c fc00 	mul.w	ip, ip, r0
 8000dec:	45a4      	cmp	ip, r4
 8000dee:	d907      	bls.n	8000e00 <__udivmoddi4+0x15c>
 8000df0:	19e4      	adds	r4, r4, r7
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x15a>
 8000df8:	45a4      	cmp	ip, r4
 8000dfa:	f200 80b8 	bhi.w	8000f6e <__udivmoddi4+0x2ca>
 8000dfe:	4618      	mov	r0, r3
 8000e00:	eba4 040c 	sub.w	r4, r4, ip
 8000e04:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e08:	e79d      	b.n	8000d46 <__udivmoddi4+0xa2>
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1ce 0420 	rsb	r4, lr, #32
 8000e16:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e1a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e1e:	fa20 f804 	lsr.w	r8, r0, r4
 8000e22:	0c3a      	lsrs	r2, r7, #16
 8000e24:	fa25 f404 	lsr.w	r4, r5, r4
 8000e28:	ea48 0803 	orr.w	r8, r8, r3
 8000e2c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e30:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e34:	fb02 4411 	mls	r4, r2, r1, r4
 8000e38:	fa1f fc87 	uxth.w	ip, r7
 8000e3c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e40:	fb01 f30c 	mul.w	r3, r1, ip
 8000e44:	42ab      	cmp	r3, r5
 8000e46:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e4a:	d909      	bls.n	8000e60 <__udivmoddi4+0x1bc>
 8000e4c:	19ed      	adds	r5, r5, r7
 8000e4e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e52:	f080 808a 	bcs.w	8000f6a <__udivmoddi4+0x2c6>
 8000e56:	42ab      	cmp	r3, r5
 8000e58:	f240 8087 	bls.w	8000f6a <__udivmoddi4+0x2c6>
 8000e5c:	3902      	subs	r1, #2
 8000e5e:	443d      	add	r5, r7
 8000e60:	1aeb      	subs	r3, r5, r3
 8000e62:	fa1f f588 	uxth.w	r5, r8
 8000e66:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e6a:	fb02 3310 	mls	r3, r2, r0, r3
 8000e6e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e72:	fb00 f30c 	mul.w	r3, r0, ip
 8000e76:	42ab      	cmp	r3, r5
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1e6>
 8000e7a:	19ed      	adds	r5, r5, r7
 8000e7c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e80:	d26f      	bcs.n	8000f62 <__udivmoddi4+0x2be>
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	d96d      	bls.n	8000f62 <__udivmoddi4+0x2be>
 8000e86:	3802      	subs	r0, #2
 8000e88:	443d      	add	r5, r7
 8000e8a:	1aeb      	subs	r3, r5, r3
 8000e8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e90:	e78f      	b.n	8000db2 <__udivmoddi4+0x10e>
 8000e92:	f1c1 0720 	rsb	r7, r1, #32
 8000e96:	fa22 f807 	lsr.w	r8, r2, r7
 8000e9a:	408b      	lsls	r3, r1
 8000e9c:	fa05 f401 	lsl.w	r4, r5, r1
 8000ea0:	ea48 0303 	orr.w	r3, r8, r3
 8000ea4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ea8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000eac:	40fd      	lsrs	r5, r7
 8000eae:	ea4e 0e04 	orr.w	lr, lr, r4
 8000eb2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000eb6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000eba:	fb0c 5519 	mls	r5, ip, r9, r5
 8000ebe:	fa1f f883 	uxth.w	r8, r3
 8000ec2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ec6:	fb09 f408 	mul.w	r4, r9, r8
 8000eca:	42ac      	cmp	r4, r5
 8000ecc:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x244>
 8000ed6:	18ed      	adds	r5, r5, r3
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d243      	bcs.n	8000f66 <__udivmoddi4+0x2c2>
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	d941      	bls.n	8000f66 <__udivmoddi4+0x2c2>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	441d      	add	r5, r3
 8000ee8:	1b2d      	subs	r5, r5, r4
 8000eea:	fa1f fe8e 	uxth.w	lr, lr
 8000eee:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ef2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ef6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45a0      	cmp	r8, r4
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x26e>
 8000f02:	18e4      	adds	r4, r4, r3
 8000f04:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f08:	d229      	bcs.n	8000f5e <__udivmoddi4+0x2ba>
 8000f0a:	45a0      	cmp	r8, r4
 8000f0c:	d927      	bls.n	8000f5e <__udivmoddi4+0x2ba>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	441c      	add	r4, r3
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba4 0408 	sub.w	r4, r4, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454c      	cmp	r4, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	464d      	mov	r5, r9
 8000f24:	d315      	bcc.n	8000f52 <__udivmoddi4+0x2ae>
 8000f26:	d012      	beq.n	8000f4e <__udivmoddi4+0x2aa>
 8000f28:	b156      	cbz	r6, 8000f40 <__udivmoddi4+0x29c>
 8000f2a:	ebba 030e 	subs.w	r3, sl, lr
 8000f2e:	eb64 0405 	sbc.w	r4, r4, r5
 8000f32:	fa04 f707 	lsl.w	r7, r4, r7
 8000f36:	40cb      	lsrs	r3, r1
 8000f38:	431f      	orrs	r7, r3
 8000f3a:	40cc      	lsrs	r4, r1
 8000f3c:	6037      	str	r7, [r6, #0]
 8000f3e:	6074      	str	r4, [r6, #4]
 8000f40:	2100      	movs	r1, #0
 8000f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f46:	4618      	mov	r0, r3
 8000f48:	e6f8      	b.n	8000d3c <__udivmoddi4+0x98>
 8000f4a:	4690      	mov	r8, r2
 8000f4c:	e6e0      	b.n	8000d10 <__udivmoddi4+0x6c>
 8000f4e:	45c2      	cmp	sl, r8
 8000f50:	d2ea      	bcs.n	8000f28 <__udivmoddi4+0x284>
 8000f52:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f56:	eb69 0503 	sbc.w	r5, r9, r3
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7e4      	b.n	8000f28 <__udivmoddi4+0x284>
 8000f5e:	4628      	mov	r0, r5
 8000f60:	e7d7      	b.n	8000f12 <__udivmoddi4+0x26e>
 8000f62:	4640      	mov	r0, r8
 8000f64:	e791      	b.n	8000e8a <__udivmoddi4+0x1e6>
 8000f66:	4681      	mov	r9, r0
 8000f68:	e7be      	b.n	8000ee8 <__udivmoddi4+0x244>
 8000f6a:	4601      	mov	r1, r0
 8000f6c:	e778      	b.n	8000e60 <__udivmoddi4+0x1bc>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	443c      	add	r4, r7
 8000f72:	e745      	b.n	8000e00 <__udivmoddi4+0x15c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e708      	b.n	8000d8a <__udivmoddi4+0xe6>
 8000f78:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7c:	443d      	add	r5, r7
 8000f7e:	e72b      	b.n	8000dd8 <__udivmoddi4+0x134>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <Impedance>:
    //3rd polynomial fit
    double poly_coefficient[4] = {2.22320112553112e-08,-9.47330958490815e-06,0.000674466762924094,0.0316020276371335}; //3rd order to 0 order
    return poly_coefficient[0]*pow(KneeAngle,3.0)+poly_coefficient[1]*pow(KneeAngle,2.0)+poly_coefficient[2]*KneeAngle+poly_coefficient[3];
}

double Impedance(double KneeAngle, double Knee_Velocity, double K1, double B, double Theta_E){
 8000f84:	b530      	push	{r4, r5, lr}
    
    return -1*(K1*(KneeAngle-Theta_E)+B*Knee_Velocity);
 8000f86:	ec53 2b14 	vmov	r2, r3, d4
double Impedance(double KneeAngle, double Knee_Velocity, double K1, double B, double Theta_E){
 8000f8a:	b087      	sub	sp, #28
    return -1*(K1*(KneeAngle-Theta_E)+B*Knee_Velocity);
 8000f8c:	ec51 0b10 	vmov	r0, r1, d0
double Impedance(double KneeAngle, double Knee_Velocity, double K1, double B, double Theta_E){
 8000f90:	ed8d 1b04 	vstr	d1, [sp, #16]
 8000f94:	ed8d 3b00 	vstr	d3, [sp]
 8000f98:	ed8d 2b02 	vstr	d2, [sp, #8]
    return -1*(K1*(KneeAngle-Theta_E)+B*Knee_Velocity);
 8000f9c:	f7ff f984 	bl	80002a8 <__aeabi_dsub>
 8000fa0:	ed9d 2b02 	vldr	d2, [sp, #8]
 8000fa4:	ec53 2b12 	vmov	r2, r3, d2
 8000fa8:	f7ff fb32 	bl	8000610 <__aeabi_dmul>
 8000fac:	ed9d 1b04 	vldr	d1, [sp, #16]
 8000fb0:	ed9d 3b00 	vldr	d3, [sp]
 8000fb4:	ec53 2b11 	vmov	r2, r3, d1
 8000fb8:	4604      	mov	r4, r0
 8000fba:	460d      	mov	r5, r1
 8000fbc:	ec51 0b13 	vmov	r0, r1, d3
 8000fc0:	f7ff fb26 	bl	8000610 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4620      	mov	r0, r4
 8000fca:	4629      	mov	r1, r5
 8000fcc:	f7ff f96e 	bl	80002ac <__adddf3>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
}
 8000fd6:	ec43 2b10 	vmov	d0, r2, r3
 8000fda:	b007      	add	sp, #28
 8000fdc:	bd30      	pop	{r4, r5, pc}
	...

08000fe0 <RateLimiter>:
            control_command = 0;
    return control_command;
}

float RateLimiter(float percent_old,float percent)
{
 8000fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    
    float percent_new = percent;
    float rate;

    rate = (percent_new-percent_old)/loop_time;
 8000fe4:	4b24      	ldr	r3, [pc, #144]	; (8001078 <RateLimiter+0x98>)
 8000fe6:	ee70 7ac0 	vsub.f32	s15, s1, s0
 8000fea:	e9d3 4500 	ldrd	r4, r5, [r3]
{
 8000fee:	ed2d 8b02 	vpush	{d8}
    rate = (percent_new-percent_old)/loop_time;
 8000ff2:	ee17 0a90 	vmov	r0, s15
{
 8000ff6:	eef0 8a40 	vmov.f32	s17, s0
 8000ffa:	eeb0 8a60 	vmov.f32	s16, s1
    rate = (percent_new-percent_old)/loop_time;
 8000ffe:	f7ff fab3 	bl	8000568 <__aeabi_f2d>
 8001002:	4622      	mov	r2, r4
 8001004:	462b      	mov	r3, r5
 8001006:	f7ff fc2d 	bl	8000864 <__aeabi_ddiv>
 800100a:	f7ff fde3 	bl	8000bd4 <__aeabi_d2f>
    if (rate > rising_slew_rate)
 800100e:	f7ff faab 	bl	8000568 <__aeabi_f2d>
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <RateLimiter+0x9c>)
 8001014:	e9d3 6700 	ldrd	r6, r7, [r3]
 8001018:	4632      	mov	r2, r6
 800101a:	463b      	mov	r3, r7
 800101c:	4680      	mov	r8, r0
 800101e:	4689      	mov	r9, r1
 8001020:	f7ff fd86 	bl	8000b30 <__aeabi_dcmpgt>
 8001024:	b1b0      	cbz	r0, 8001054 <RateLimiter+0x74>
        percent_new = loop_time*rising_slew_rate + percent_old;
    else if (rate < falling_slew_rate)
        percent_new = loop_time*falling_slew_rate + percent_old;
 8001026:	4632      	mov	r2, r6
 8001028:	463b      	mov	r3, r7
 800102a:	4620      	mov	r0, r4
 800102c:	4629      	mov	r1, r5
 800102e:	f7ff faef 	bl	8000610 <__aeabi_dmul>
 8001032:	4604      	mov	r4, r0
 8001034:	ee18 0a90 	vmov	r0, s17
 8001038:	460d      	mov	r5, r1
 800103a:	f7ff fa95 	bl	8000568 <__aeabi_f2d>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4620      	mov	r0, r4
 8001044:	4629      	mov	r1, r5
 8001046:	f7ff f931 	bl	80002ac <__adddf3>
 800104a:	f7ff fdc3 	bl	8000bd4 <__aeabi_d2f>
 800104e:	ee08 0a10 	vmov	s16, r0
 8001052:	e00a      	b.n	800106a <RateLimiter+0x8a>
    else if (rate < falling_slew_rate)
 8001054:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <RateLimiter+0xa0>)
 8001056:	e9d3 6700 	ldrd	r6, r7, [r3]
 800105a:	4640      	mov	r0, r8
 800105c:	4632      	mov	r2, r6
 800105e:	463b      	mov	r3, r7
 8001060:	4649      	mov	r1, r9
 8001062:	f7ff fd47 	bl	8000af4 <__aeabi_dcmplt>
 8001066:	2800      	cmp	r0, #0
 8001068:	d1dd      	bne.n	8001026 <RateLimiter+0x46>
    return percent_new;
    
}
 800106a:	eeb0 0a48 	vmov.f32	s0, s16
 800106e:	ecbd 8b02 	vpop	{d8}
 8001072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001076:	bf00      	nop
 8001078:	20000008 	.word	0x20000008
 800107c:	20000010 	.word	0x20000010
 8001080:	20000000 	.word	0x20000000

08001084 <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8001084:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 8001086:	2301      	movs	r3, #1
  
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8001088:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __IO uint8_t status = SD_PRESENT;
 8001090:	f88d 3007 	strb.w	r3, [sp, #7]
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8001094:	f003 fe36 	bl	8004d04 <HAL_GPIO_ReadPin>
 8001098:	b110      	cbz	r0, 80010a0 <BSP_SD_IsDetected+0x1c>
  {
   status = SD_NOT_PRESENT;
 800109a:	2300      	movs	r3, #0
 800109c:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  return status;
 80010a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80010a4:	b003      	add	sp, #12
 80010a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080010ac <BSP_SD_IRQHandler>:
  * @brief  Handles SD card interrupt request.
  * @retval None
  */
void BSP_SD_IRQHandler(void)
{
  HAL_SD_IRQHandler(&uSdHandle);
 80010ac:	4801      	ldr	r0, [pc, #4]	; (80010b4 <BSP_SD_IRQHandler+0x8>)
 80010ae:	f005 b8c1 	b.w	8006234 <HAL_SD_IRQHandler>
 80010b2:	bf00      	nop
 80010b4:	200086d0 	.word	0x200086d0

080010b8 <BSP_SD_DMA_Tx_IRQHandler>:
  * @brief  Handles SD DMA Tx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Tx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmatx);
 80010b8:	4b01      	ldr	r3, [pc, #4]	; (80010c0 <BSP_SD_DMA_Tx_IRQHandler+0x8>)
 80010ba:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80010bc:	f003 bcfe 	b.w	8004abc <HAL_DMA_IRQHandler>
 80010c0:	200086d0 	.word	0x200086d0

080010c4 <BSP_SD_DMA_Rx_IRQHandler>:
  * @brief  Handles SD DMA Rx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Rx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 80010c4:	4b01      	ldr	r3, [pc, #4]	; (80010cc <BSP_SD_DMA_Rx_IRQHandler+0x8>)
 80010c6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80010c8:	f003 bcf8 	b.w	8004abc <HAL_DMA_IRQHandler>
 80010cc:	200086d0 	.word	0x200086d0

080010d0 <BSP_SD_GetStatus>:
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  *            @arg  SD_TRANSFER_ERROR: Data transfer error 
  */
HAL_SD_TransferStateTypedef BSP_SD_GetStatus(void)
{
  return(HAL_SD_GetStatus(&uSdHandle));
 80010d0:	4801      	ldr	r0, [pc, #4]	; (80010d8 <BSP_SD_GetStatus+0x8>)
 80010d2:	f005 bcfd 	b.w	8006ad0 <HAL_SD_GetStatus>
 80010d6:	bf00      	nop
 80010d8:	200086d0 	.word	0x200086d0

080010dc <BSP_SD_GetCardInfo>:
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypedef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_Get_CardInfo(&uSdHandle, CardInfo);
 80010dc:	4601      	mov	r1, r0
 80010de:	4801      	ldr	r0, [pc, #4]	; (80010e4 <BSP_SD_GetCardInfo+0x8>)
 80010e0:	f005 b908 	b.w	80062f4 <HAL_SD_Get_CardInfo>
 80010e4:	200086d0 	.word	0x200086d0

080010e8 <SD_DMAConfigRx>:
  * @brief Configure the DMA to receive data from the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 80010e8:	b510      	push	{r4, lr}
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Configure DMA Rx parameters */
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80010ea:	4c15      	ldr	r4, [pc, #84]	; (8001140 <SD_DMAConfigRx+0x58>)
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_rx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 80010ec:	6584      	str	r4, [r0, #88]	; 0x58
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80010ee:	2307      	movs	r3, #7
 80010f0:	6063      	str	r3, [r4, #4]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60a3      	str	r3, [r4, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80010f6:	60e3      	str	r3, [r4, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	6123      	str	r3, [r4, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001100:	6163      	str	r3, [r4, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001102:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001106:	61a3      	str	r3, [r4, #24]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8001108:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800110c:	6223      	str	r3, [r4, #32]
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 800110e:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_rx.Instance = DMA2_Channel4;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <SD_DMAConfigRx+0x5c>)
 8001112:	6023      	str	r3, [r4, #0]

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_rx);
 8001114:	4620      	mov	r0, r4
 8001116:	f003 fcb3 	bl	8004a80 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_rx);
 800111a:	4620      	mov	r0, r4
 800111c:	f003 fc2a 	bl	8004974 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_rx);
 8001120:	4620      	mov	r0, r4
 8001122:	f003 fbb7 	bl	8004894 <HAL_DMA_Init>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <SD_DMAConfigRx+0x60>)
 8001128:	2230      	movs	r2, #48	; 0x30
 800112a:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);

  return (status != HAL_OK? SD_ERROR : SD_OK);
 800112e:	2800      	cmp	r0, #0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001130:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001134:	605a      	str	r2, [r3, #4]
}
 8001136:	bf14      	ite	ne
 8001138:	2029      	movne	r0, #41	; 0x29
 800113a:	2000      	moveq	r0, #0
 800113c:	bd10      	pop	{r4, pc}
 800113e:	bf00      	nop
 8001140:	20000504 	.word	0x20000504
 8001144:	40020444 	.word	0x40020444
 8001148:	e000e100 	.word	0xe000e100

0800114c <BSP_SD_ReadBlocks_DMA>:
{
 800114c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uSdHandle.hdmatx = NULL;
 800114e:	4c10      	ldr	r4, [pc, #64]	; (8001190 <BSP_SD_ReadBlocks_DMA+0x44>)
{
 8001150:	4605      	mov	r5, r0
 8001152:	461f      	mov	r7, r3
  state = ((SD_DMAConfigRx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001154:	4620      	mov	r0, r4
  uSdHandle.hdmatx = NULL;
 8001156:	2300      	movs	r3, #0
{
 8001158:	4616      	mov	r6, r2
  uSdHandle.hdmatx = NULL;
 800115a:	65e3      	str	r3, [r4, #92]	; 0x5c
  state = ((SD_DMAConfigRx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 800115c:	f7ff ffc4 	bl	80010e8 <SD_DMAConfigRx>
  if(state == MSD_OK)
 8001160:	b998      	cbnz	r0, 800118a <BSP_SD_ReadBlocks_DMA+0x3e>
    state = ((HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	9b08      	ldr	r3, [sp, #32]
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	4632      	mov	r2, r6
 800116c:	463b      	mov	r3, r7
 800116e:	4629      	mov	r1, r5
 8001170:	4620      	mov	r0, r4
 8001172:	f004 ff65 	bl	8006040 <HAL_SD_ReadBlocks_DMA>
    if(state == MSD_OK)
 8001176:	b940      	cbnz	r0, 800118a <BSP_SD_ReadBlocks_DMA+0x3e>
      state = ((HAL_SD_CheckReadOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001178:	4906      	ldr	r1, [pc, #24]	; (8001194 <BSP_SD_ReadBlocks_DMA+0x48>)
 800117a:	4620      	mov	r0, r4
 800117c:	f005 fc77 	bl	8006a6e <HAL_SD_CheckReadOperation>
 8001180:	3000      	adds	r0, #0
 8001182:	bf18      	it	ne
 8001184:	2001      	movne	r0, #1
}
 8001186:	b003      	add	sp, #12
 8001188:	bdf0      	pop	{r4, r5, r6, r7, pc}
    state = ((HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 800118a:	2001      	movs	r0, #1
 800118c:	e7fb      	b.n	8001186 <BSP_SD_ReadBlocks_DMA+0x3a>
 800118e:	bf00      	nop
 8001190:	200086d0 	.word	0x200086d0
 8001194:	00989680 	.word	0x00989680

08001198 <SD_DMAConfigTx>:
  * @brief Configure the DMA to transmit data to the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 8001198:	b510      	push	{r4, lr}
  static DMA_HandleTypeDef hdma_tx;
  HAL_StatusTypeDef status;

  /* Configure DMA Tx parameters */
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 800119a:	4c15      	ldr	r4, [pc, #84]	; (80011f0 <SD_DMAConfigTx+0x58>)
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_tx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 800119c:	65c4      	str	r4, [r0, #92]	; 0x5c
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 800119e:	2307      	movs	r3, #7
 80011a0:	6063      	str	r3, [r4, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80011a2:	2310      	movs	r3, #16
 80011a4:	60a3      	str	r3, [r4, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60e3      	str	r3, [r4, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	6123      	str	r3, [r4, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b2:	6163      	str	r3, [r4, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80011b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011b8:	61a3      	str	r3, [r4, #24]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80011ba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011be:	6223      	str	r3, [r4, #32]
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 80011c0:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_tx.Instance = DMA2_Channel4;
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <SD_DMAConfigTx+0x5c>)
 80011c4:	6023      	str	r3, [r4, #0]

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_tx);
 80011c6:	4620      	mov	r0, r4
 80011c8:	f003 fc5a 	bl	8004a80 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_tx);
 80011cc:	4620      	mov	r0, r4
 80011ce:	f003 fbd1 	bl	8004974 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_tx);
 80011d2:	4620      	mov	r0, r4
 80011d4:	f003 fb5e 	bl	8004894 <HAL_DMA_Init>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <SD_DMAConfigTx+0x60>)
 80011da:	2230      	movs	r2, #48	; 0x30
 80011dc:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);

  return (status != HAL_OK? SD_ERROR : SD_OK);
 80011e0:	2800      	cmp	r0, #0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011e6:	605a      	str	r2, [r3, #4]
}
 80011e8:	bf14      	ite	ne
 80011ea:	2029      	movne	r0, #41	; 0x29
 80011ec:	2000      	moveq	r0, #0
 80011ee:	bd10      	pop	{r4, pc}
 80011f0:	2000054c 	.word	0x2000054c
 80011f4:	40020444 	.word	0x40020444
 80011f8:	e000e100 	.word	0xe000e100

080011fc <BSP_SD_Init>:
{
 80011fc:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef gpioinitstruct = {0};
 80011fe:	2214      	movs	r2, #20
{
 8001200:	b08a      	sub	sp, #40	; 0x28
  uSdHandle.Instance = SDMMC1;
 8001202:	4c37      	ldr	r4, [pc, #220]	; (80012e0 <BSP_SD_Init+0xe4>)
 8001204:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <BSP_SD_Init+0xe8>)
 8001206:	6023      	str	r3, [r4, #0]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8001208:	2100      	movs	r1, #0
  uSdHandle.Init.ClockDiv            = 1;    // Checked by Masudul,
 800120a:	2501      	movs	r5, #1
  GPIO_InitTypeDef gpioinitstruct = {0};
 800120c:	eb0d 0002 	add.w	r0, sp, r2
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8001210:	6061      	str	r1, [r4, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8001212:	60a1      	str	r1, [r4, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001214:	60e1      	str	r1, [r4, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8001216:	6121      	str	r1, [r4, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001218:	6161      	str	r1, [r4, #20]
  uSdHandle.Init.ClockDiv            = 1;    // Checked by Masudul,
 800121a:	61a5      	str	r5, [r4, #24]
  GPIO_InitTypeDef gpioinitstruct = {0};
 800121c:	f009 fc15 	bl	800aa4a <memset>
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001220:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <BSP_SD_Init+0xec>)
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8001222:	4832      	ldr	r0, [pc, #200]	; (80012ec <BSP_SD_Init+0xf0>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001224:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001226:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800122a:	661a      	str	r2, [r3, #96]	; 0x60
 800122c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800122e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001232:	9200      	str	r2, [sp, #0]
 8001234:	9a00      	ldr	r2, [sp, #0]
  __DMAx_TxRx_CLK_ENABLE();
 8001236:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001238:	f042 0202 	orr.w	r2, r2, #2
 800123c:	649a      	str	r2, [r3, #72]	; 0x48
 800123e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001240:	f002 0202 	and.w	r2, r2, #2
 8001244:	9201      	str	r2, [sp, #4]
 8001246:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001248:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800124a:	f042 0204 	orr.w	r2, r2, #4
 800124e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001250:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001252:	f002 0204 	and.w	r2, r2, #4
 8001256:	9202      	str	r2, [sp, #8]
 8001258:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800125a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800125c:	f042 0208 	orr.w	r2, r2, #8
 8001260:	64da      	str	r2, [r3, #76]	; 0x4c
 8001262:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001264:	f002 0208 	and.w	r2, r2, #8
 8001268:	9203      	str	r2, [sp, #12]
 800126a:	9a03      	ldr	r2, [sp, #12]
  __SD_DETECT_GPIO_CLK_ENABLE();
 800126c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800126e:	432a      	orrs	r2, r5
 8001270:	64da      	str	r2, [r3, #76]	; 0x4c
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  gpioinitstruct.Pull      = GPIO_PULLUP;
 8001274:	9507      	str	r5, [sp, #28]
  __SD_DETECT_GPIO_CLK_ENABLE();
 8001276:	402b      	ands	r3, r5
 8001278:	9304      	str	r3, [sp, #16]
 800127a:	9b04      	ldr	r3, [sp, #16]
 800127c:	4d1c      	ldr	r5, [pc, #112]	; (80012f0 <BSP_SD_Init+0xf4>)
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	9308      	str	r3, [sp, #32]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 8001286:	230c      	movs	r3, #12
 8001288:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 800128a:	a905      	add	r1, sp, #20
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800128c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001290:	9305      	str	r3, [sp, #20]
 8001292:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8001296:	f003 fc59 	bl	8004b4c <HAL_GPIO_Init>
  gpioinitstruct.Pin = GPIO_PIN_2;
 800129a:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 800129c:	4815      	ldr	r0, [pc, #84]	; (80012f4 <BSP_SD_Init+0xf8>)
  gpioinitstruct.Pin = GPIO_PIN_2;
 800129e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80012a0:	a905      	add	r1, sp, #20
 80012a2:	f003 fc53 	bl	8004b4c <HAL_GPIO_Init>
 80012a6:	606e      	str	r6, [r5, #4]
  if((SD_DMAConfigTx(&uSdHandle) == SD_OK) )
 80012a8:	4620      	mov	r0, r4
 80012aa:	f7ff ff75 	bl	8001198 <SD_DMAConfigTx>
 80012ae:	b900      	cbnz	r0, 80012b2 <BSP_SD_Init+0xb6>
 80012b0:	606e      	str	r6, [r5, #4]
  if(BSP_SD_IsDetected() != SD_PRESENT)
 80012b2:	f7ff fee7 	bl	8001084 <BSP_SD_IsDetected>
 80012b6:	2801      	cmp	r0, #1
 80012b8:	d002      	beq.n	80012c0 <BSP_SD_Init+0xc4>
    return MSD_ERROR;
 80012ba:	2001      	movs	r0, #1
}
 80012bc:	b00a      	add	sp, #40	; 0x28
 80012be:	bd70      	pop	{r4, r5, r6, pc}
  if(HAL_SD_Init(&uSdHandle, &uSdCardInfo) != SD_OK)
 80012c0:	490d      	ldr	r1, [pc, #52]	; (80012f8 <BSP_SD_Init+0xfc>)
 80012c2:	4807      	ldr	r0, [pc, #28]	; (80012e0 <BSP_SD_Init+0xe4>)
 80012c4:	f005 f950 	bl	8006568 <HAL_SD_Init>
 80012c8:	2800      	cmp	r0, #0
 80012ca:	d1f6      	bne.n	80012ba <BSP_SD_Init+0xbe>
    if(HAL_SD_WideBusOperation_Config(&uSdHandle, SDMMC_BUS_WIDE_4B) != SD_OK)
 80012cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <BSP_SD_Init+0xe4>)
 80012d2:	f005 fb21 	bl	8006918 <HAL_SD_WideBusOperation_Config>
    return MSD_ERROR;
 80012d6:	3000      	adds	r0, #0
 80012d8:	bf18      	it	ne
 80012da:	2001      	movne	r0, #1
 80012dc:	e7ee      	b.n	80012bc <BSP_SD_Init+0xc0>
 80012de:	bf00      	nop
 80012e0:	200086d0 	.word	0x200086d0
 80012e4:	40012800 	.word	0x40012800
 80012e8:	40021000 	.word	0x40021000
 80012ec:	48000800 	.word	0x48000800
 80012f0:	e000e100 	.word	0xe000e100
 80012f4:	48000c00 	.word	0x48000c00
 80012f8:	20000598 	.word	0x20000598

080012fc <BSP_SD_WriteBlocks_DMA>:
{
 80012fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uSdHandle.hdmarx = NULL;
 80012fe:	4c10      	ldr	r4, [pc, #64]	; (8001340 <BSP_SD_WriteBlocks_DMA+0x44>)
{
 8001300:	4605      	mov	r5, r0
 8001302:	461f      	mov	r7, r3
  state = ((SD_DMAConfigTx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001304:	4620      	mov	r0, r4
  uSdHandle.hdmarx = NULL;
 8001306:	2300      	movs	r3, #0
{
 8001308:	4616      	mov	r6, r2
  uSdHandle.hdmarx = NULL;
 800130a:	65a3      	str	r3, [r4, #88]	; 0x58
  state = ((SD_DMAConfigTx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 800130c:	f7ff ff44 	bl	8001198 <SD_DMAConfigTx>
  if(state == MSD_OK)
 8001310:	b998      	cbnz	r0, 800133a <BSP_SD_WriteBlocks_DMA+0x3e>
    state = ((HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	9b08      	ldr	r3, [sp, #32]
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	4632      	mov	r2, r6
 800131c:	463b      	mov	r3, r7
 800131e:	4629      	mov	r1, r5
 8001320:	4620      	mov	r0, r4
 8001322:	f004 ff07 	bl	8006134 <HAL_SD_WriteBlocks_DMA>
    if(state == MSD_OK)
 8001326:	b940      	cbnz	r0, 800133a <BSP_SD_WriteBlocks_DMA+0x3e>
      state = ((HAL_SD_CheckWriteOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001328:	4906      	ldr	r1, [pc, #24]	; (8001344 <BSP_SD_WriteBlocks_DMA+0x48>)
 800132a:	4620      	mov	r0, r4
 800132c:	f005 fbf5 	bl	8006b1a <HAL_SD_CheckWriteOperation>
 8001330:	3000      	adds	r0, #0
 8001332:	bf18      	it	ne
 8001334:	2001      	movne	r0, #1
}
 8001336:	b003      	add	sp, #12
 8001338:	bdf0      	pop	{r4, r5, r6, r7, pc}
    state = ((HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 800133a:	2001      	movs	r0, #1
 800133c:	e7fb      	b.n	8001336 <BSP_SD_WriteBlocks_DMA+0x3a>
 800133e:	bf00      	nop
 8001340:	200086d0 	.word	0x200086d0
 8001344:	00989680 	.word	0x00989680

08001348 <controller_impedance>:


//struct st_impedance controller_impedance(float angle, float ankle_velocity,int ac_x, float current)

struct st_impedance controller_impedance(float angle, float ankle_velocity,float Heel_pressure, float Toe_pressure)
{
 8001348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    switch (state)
 800134c:	4cca      	ldr	r4, [pc, #808]	; (8001678 <controller_impedance+0x330>)
 800134e:	4ecb      	ldr	r6, [pc, #812]	; (800167c <controller_impedance+0x334>)
 8001350:	7823      	ldrb	r3, [r4, #0]
 8001352:	4dcb      	ldr	r5, [pc, #812]	; (8001680 <controller_impedance+0x338>)
{
 8001354:	ed2d 8b02 	vpush	{d8}
 8001358:	4607      	mov	r7, r0
 800135a:	b082      	sub	sp, #8
 800135c:	eeb0 8a40 	vmov.f32	s16, s0
 8001360:	ee10 0a90 	vmov	r0, s1
    switch (state)
 8001364:	2b04      	cmp	r3, #4
 8001366:	d85d      	bhi.n	8001424 <controller_impedance+0xdc>
 8001368:	e8df f013 	tbh	[pc, r3, lsl #1]
 800136c:	007c0005 	.word	0x007c0005
 8001370:	00f800d9 	.word	0x00f800d9
 8001374:	0110      	.short	0x0110
    // state 0
    case ST_EARLY_STANCE:

//            if (angle > MS_LS_switching_angle && ankle_velocity>=40)

        if (angle > ES_LS_switching_angle && Toe_pressure>=Loadcell_Toe_pressure)
 8001376:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 800137a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	dd09      	ble.n	8001398 <controller_impedance+0x50>
 8001384:	eddf 7abf 	vldr	s15, [pc, #764]	; 8001684 <controller_impedance+0x33c>
 8001388:	eef4 1ae7 	vcmpe.f32	s3, s15
 800138c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001390:	db02      	blt.n	8001398 <controller_impedance+0x50>
        {
           state = ST_LATE_STANCE;
 8001392:	2302      	movs	r3, #2
      case ST_LATE_SWING:

          //if (fabsf(ac_x)>= 32000)  // 32767 is 2g
       if (Heel_pressure>= Loadcell_Heel_Strike)
      {
              state = ST_EARLY_STANCE;
 8001394:	7023      	strb	r3, [r4, #0]
              
              break;
 8001396:	e045      	b.n	8001424 <controller_impedance+0xdc>
        d_torque = Impedance(angle, ankle_velocity, ES_stiffness, ES_damping, ES_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 8001398:	f7ff f8e6 	bl	8000568 <__aeabi_f2d>
 800139c:	e9cd 0100 	strd	r0, r1, [sp]
 80013a0:	ee18 0a10 	vmov	r0, s16
 80013a4:	f7ff f8e0 	bl	8000568 <__aeabi_f2d>
 80013a8:	ed9f 4b9b 	vldr	d4, [pc, #620]	; 8001618 <controller_impedance+0x2d0>
 80013ac:	ed9f 3b9c 	vldr	d3, [pc, #624]	; 8001620 <controller_impedance+0x2d8>
 80013b0:	ed9f 2b9d 	vldr	d2, [pc, #628]	; 8001628 <controller_impedance+0x2e0>
          }
        d_torque = Impedance(angle, ankle_velocity, LSW_stiffness, LSW_damping, LSW_equilibrium); //Impedance(Angle,Velocity,K1,B,Theta_E)//1.7, 0.001 //previous equi angle=-10
 80013b4:	ed9d 1b00 	vldr	d1, [sp]
 80013b8:	ec41 0b10 	vmov	d0, r0, r1
 80013bc:	f7ff fde2 	bl	8000f84 <Impedance>
 80013c0:	ec59 8b10 	vmov	r8, r9, d0
 80013c4:	ed86 0b00 	vstr	d0, [r6]
            
        percent=10+(fabsf(d_torque)*80)/(torque_const_EC60*gear_ratio_CSD_ankle*peak_current);
 80013c8:	ee10 0a10 	vmov	r0, s0
 80013cc:	4649      	mov	r1, r9
 80013ce:	f7ff fc01 	bl	8000bd4 <__aeabi_d2f>
 80013d2:	ee07 0a90 	vmov	s15, r0
 80013d6:	eeb0 7ae7 	vabs.f32	s14, s15
 80013da:	eddf 7aab 	vldr	s15, [pc, #684]	; 8001688 <controller_impedance+0x340>
 80013de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e2:	ee17 0a90 	vmov	r0, s15
 80013e6:	f7ff f8bf 	bl	8000568 <__aeabi_f2d>
 80013ea:	a391      	add	r3, pc, #580	; (adr r3, 8001630 <controller_impedance+0x2e8>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7ff fa38 	bl	8000864 <__aeabi_ddiv>
 80013f4:	2200      	movs	r2, #0
 80013f6:	4ba5      	ldr	r3, [pc, #660]	; (800168c <controller_impedance+0x344>)
 80013f8:	f7fe ff58 	bl	80002ac <__adddf3>
 80013fc:	f7ff fbea 	bl	8000bd4 <__aeabi_d2f>



             if (percent >= max_duty_cycle)
 8001400:	4aa3      	ldr	r2, [pc, #652]	; (8001690 <controller_impedance+0x348>)
        percent=10+(fabsf(d_torque)*80)/(torque_const_EC60*gear_ratio_CSD_ankle*peak_current);
 8001402:	4ba4      	ldr	r3, [pc, #656]	; (8001694 <controller_impedance+0x34c>)
             if (percent >= max_duty_cycle)
 8001404:	edd2 7a00 	vldr	s15, [r2]
        percent=10+(fabsf(d_torque)*80)/(torque_const_EC60*gear_ratio_CSD_ankle*peak_current);
 8001408:	6018      	str	r0, [r3, #0]
 800140a:	ee07 0a10 	vmov	s14, r0
             if (percent >= max_duty_cycle)
 800140e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001416:	f2c0 80d1 	blt.w	80015bc <controller_impedance+0x274>
                 percent = max_duty_cycle;
             else if (percent <= - max_duty_cycle)
                 percent = - max_duty_cycle;
 800141a:	edc3 7a00 	vstr	s15, [r3]
 800141e:	e0d5      	b.n	80015cc <controller_impedance+0x284>
            	Stop_motor();
 8001420:	f000 fcd2 	bl	8001dc8 <Stop_motor>
        break;


    }

    my_st_impedance.st = state;
 8001424:	7823      	ldrb	r3, [r4, #0]
 8001426:	4c9c      	ldr	r4, [pc, #624]	; (8001698 <controller_impedance+0x350>)
    my_st_impedance.impedance = d_torque;
 8001428:	e9d6 0100 	ldrd	r0, r1, [r6]
    my_st_impedance.st = state;
 800142c:	6023      	str	r3, [r4, #0]
    my_st_impedance.impedance = d_torque;
 800142e:	f7ff fbd1 	bl	8000bd4 <__aeabi_d2f>
    my_st_impedance.torque_now = n_torque;
 8001432:	4b9a      	ldr	r3, [pc, #616]	; (800169c <controller_impedance+0x354>)
    my_st_impedance.impedance = d_torque;
 8001434:	6060      	str	r0, [r4, #4]
    my_st_impedance.torque_now = n_torque;
 8001436:	e9d3 0100 	ldrd	r0, r1, [r3]
 800143a:	f7ff fbcb 	bl	8000bd4 <__aeabi_d2f>
 800143e:	60a0      	str	r0, [r4, #8]
    my_st_impedance.pwm_percent = percent_new;
 8001440:	6828      	ldr	r0, [r5, #0]
 8001442:	f7ff f891 	bl	8000568 <__aeabi_f2d>
 8001446:	e9c4 0104 	strd	r0, r1, [r4, #16]
    return my_st_impedance;
 800144a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800144c:	463d      	mov	r5, r7
 800144e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001450:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001454:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001458:	4638      	mov	r0, r7
 800145a:	b002      	add	sp, #8
 800145c:	ecbd 8b02 	vpop	{d8}
 8001460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (angle > MS_LS_switching_angle)
 8001464:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8001468:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800146c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001470:	dc8f      	bgt.n	8001392 <controller_impedance+0x4a>
        d_torque = Impedance(angle, ankle_velocity, MS_stiffness, MS_damping, MS_equilibrium); //Impedance(Angle,Velocity,K1,B,Theta_E)//0.4, 0.001 //previous equi angle=-10
 8001472:	f7ff f879 	bl	8000568 <__aeabi_f2d>
 8001476:	e9cd 0100 	strd	r0, r1, [sp]
 800147a:	ee18 0a10 	vmov	r0, s16
 800147e:	f7ff f873 	bl	8000568 <__aeabi_f2d>
 8001482:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8001638 <controller_impedance+0x2f0>
 8001486:	ed9f 2b6e 	vldr	d2, [pc, #440]	; 8001640 <controller_impedance+0x2f8>
 800148a:	eeb0 3a44 	vmov.f32	s6, s8
 800148e:	eef0 3a64 	vmov.f32	s7, s9
 8001492:	ed9d 1b00 	vldr	d1, [sp]
 8001496:	ec41 0b10 	vmov	d0, r0, r1
 800149a:	f7ff fd73 	bl	8000f84 <Impedance>
 800149e:	ec51 0b10 	vmov	r0, r1, d0
 80014a2:	ed86 0b00 	vstr	d0, [r6]
        percent=10+(fabsf(d_torque)*80)/(torque_const_EC60*gear_ratio_CSD_ankle*peak_current);
 80014a6:	f7ff fb95 	bl	8000bd4 <__aeabi_d2f>
 80014aa:	ee07 0a90 	vmov	s15, r0
 80014ae:	eeb0 7ae7 	vabs.f32	s14, s15
 80014b2:	eddf 7a75 	vldr	s15, [pc, #468]	; 8001688 <controller_impedance+0x340>
 80014b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ba:	ee17 0a90 	vmov	r0, s15
 80014be:	f7ff f853 	bl	8000568 <__aeabi_f2d>
 80014c2:	a35b      	add	r3, pc, #364	; (adr r3, 8001630 <controller_impedance+0x2e8>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7ff f9cc 	bl	8000864 <__aeabi_ddiv>
 80014cc:	2200      	movs	r2, #0
 80014ce:	4b6f      	ldr	r3, [pc, #444]	; (800168c <controller_impedance+0x344>)
 80014d0:	f7fe feec 	bl	80002ac <__adddf3>
 80014d4:	f7ff fb7e 	bl	8000bd4 <__aeabi_d2f>
            if (percent >= max_duty_cycle)
 80014d8:	4a6d      	ldr	r2, [pc, #436]	; (8001690 <controller_impedance+0x348>)
        percent=10+(fabsf(d_torque)*80)/(torque_const_EC60*gear_ratio_CSD_ankle*peak_current);
 80014da:	4b6e      	ldr	r3, [pc, #440]	; (8001694 <controller_impedance+0x34c>)
            if (percent >= max_duty_cycle)
 80014dc:	edd2 7a00 	vldr	s15, [r2]
        percent=10+(fabsf(d_torque)*80)/(torque_const_EC60*gear_ratio_CSD_ankle*peak_current);
 80014e0:	6018      	str	r0, [r3, #0]
 80014e2:	ee07 0a10 	vmov	s14, r0
            if (percent >= max_duty_cycle)
 80014e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ee:	db02      	blt.n	80014f6 <controller_impedance+0x1ae>
                percent = - max_duty_cycle;
 80014f0:	edc3 7a00 	vstr	s15, [r3]
 80014f4:	e006      	b.n	8001504 <controller_impedance+0x1bc>
            else if (percent <= - max_duty_cycle)
 80014f6:	eef1 7a67 	vneg.f32	s15, s15
 80014fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001502:	d9f5      	bls.n	80014f0 <controller_impedance+0x1a8>
            percent_new = RateLimiter(percent_old,percent);                 
 8001504:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80016a4 <controller_impedance+0x35c>
 8001508:	edd3 0a00 	vldr	s1, [r3]
 800150c:	ed98 0a00 	vldr	s0, [r8]
 8001510:	f7ff fd66 	bl	8000fe0 <RateLimiter>
 8001514:	ed85 0a00 	vstr	s0, [r5]
            percent_old = percent_new;
 8001518:	ed88 0a00 	vstr	s0, [r8]
        break;
 800151c:	e782      	b.n	8001424 <controller_impedance+0xdc>
        if (angle < LS_ESW_switching_angle && Toe_pressure<=LS_ESW_Toe_pressure) // earlier angle <-18
 800151e:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
 8001522:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	d508      	bpl.n	800153e <controller_impedance+0x1f6>
 800152c:	eddf 7a5c 	vldr	s15, [pc, #368]	; 80016a0 <controller_impedance+0x358>
 8001530:	eef4 1ae7 	vcmpe.f32	s3, s15
 8001534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001538:	d801      	bhi.n	800153e <controller_impedance+0x1f6>
            state = ST_EARLY_SWING;
 800153a:	2303      	movs	r3, #3
 800153c:	e72a      	b.n	8001394 <controller_impedance+0x4c>
        d_torque = Impedance(angle, ankle_velocity, LS_stiffness, LS_damping, LS_equilibrium); //Impedance(Angle,Velocity,K1,B,Theta_E)//1.7, 0.001 //previous equi angle=-18
 800153e:	f7ff f813 	bl	8000568 <__aeabi_f2d>
 8001542:	e9cd 0100 	strd	r0, r1, [sp]
 8001546:	ee18 0a10 	vmov	r0, s16
 800154a:	f7ff f80d 	bl	8000568 <__aeabi_f2d>
 800154e:	ed9f 4b3e 	vldr	d4, [pc, #248]	; 8001648 <controller_impedance+0x300>
 8001552:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8001638 <controller_impedance+0x2f0>
 8001556:	ed9f 2b3e 	vldr	d2, [pc, #248]	; 8001650 <controller_impedance+0x308>
 800155a:	e72b      	b.n	80013b4 <controller_impedance+0x6c>
        if (angle>=ESW_LSW_switching_angle)  // ankle_velocity < -5: did not transit, ankle_velocity < -3: transit
 800155c:	eef9 7a0c 	vmov.f32	s15, #156	; 0xc0e00000 -7.0
 8001560:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001568:	db01      	blt.n	800156e <controller_impedance+0x226>
           state = ST_LATE_SWING;
 800156a:	2304      	movs	r3, #4
 800156c:	e712      	b.n	8001394 <controller_impedance+0x4c>
        d_torque = Impedance(angle, ankle_velocity, ESW_stiffness, ESW_damping, ESW_equilibrium); //earlier equilibrium angle 10 //stiffness 1.4
 800156e:	f7fe fffb 	bl	8000568 <__aeabi_f2d>
 8001572:	e9cd 0100 	strd	r0, r1, [sp]
 8001576:	ee18 0a10 	vmov	r0, s16
 800157a:	f7fe fff5 	bl	8000568 <__aeabi_f2d>
 800157e:	ed9f 4b26 	vldr	d4, [pc, #152]	; 8001618 <controller_impedance+0x2d0>
 8001582:	ed9f 3b27 	vldr	d3, [pc, #156]	; 8001620 <controller_impedance+0x2d8>
 8001586:	ed9f 2b34 	vldr	d2, [pc, #208]	; 8001658 <controller_impedance+0x310>
 800158a:	e713      	b.n	80013b4 <controller_impedance+0x6c>
       if (Heel_pressure>= Loadcell_Heel_Strike)
 800158c:	eddf 7a44 	vldr	s15, [pc, #272]	; 80016a0 <controller_impedance+0x358>
 8001590:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8001594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001598:	db01      	blt.n	800159e <controller_impedance+0x256>
              state = ST_EARLY_STANCE;
 800159a:	2300      	movs	r3, #0
 800159c:	e6fa      	b.n	8001394 <controller_impedance+0x4c>
        d_torque = Impedance(angle, ankle_velocity, LSW_stiffness, LSW_damping, LSW_equilibrium); //Impedance(Angle,Velocity,K1,B,Theta_E)//1.7, 0.001 //previous equi angle=-10
 800159e:	f7fe ffe3 	bl	8000568 <__aeabi_f2d>
 80015a2:	e9cd 0100 	strd	r0, r1, [sp]
 80015a6:	ee18 0a10 	vmov	r0, s16
 80015aa:	f7fe ffdd 	bl	8000568 <__aeabi_f2d>
 80015ae:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8001660 <controller_impedance+0x318>
 80015b2:	ed9f 3b2d 	vldr	d3, [pc, #180]	; 8001668 <controller_impedance+0x320>
 80015b6:	ed9f 2b2e 	vldr	d2, [pc, #184]	; 8001670 <controller_impedance+0x328>
 80015ba:	e6fb      	b.n	80013b4 <controller_impedance+0x6c>
             else if (percent <= - max_duty_cycle)
 80015bc:	eef1 7a67 	vneg.f32	s15, s15
 80015c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c8:	f67f af27 	bls.w	800141a <controller_impedance+0xd2>
             percent_new=percent;
 80015cc:	f8d3 a000 	ldr.w	sl, [r3]
 80015d0:	f8c5 a000 	str.w	sl, [r5]
             if (d_torque < 0)
 80015d4:	2200      	movs	r2, #0
 80015d6:	2300      	movs	r3, #0
 80015d8:	4640      	mov	r0, r8
 80015da:	4649      	mov	r1, r9
 80015dc:	f7ff fa8a 	bl	8000af4 <__aeabi_dcmplt>
 80015e0:	b138      	cbz	r0, 80015f2 <controller_impedance+0x2aa>
                 PF(percent_new);
 80015e2:	4650      	mov	r0, sl
 80015e4:	f7fe ffc0 	bl	8000568 <__aeabi_f2d>
 80015e8:	ec41 0b10 	vmov	d0, r0, r1
 80015ec:	f000 fbb0 	bl	8001d50 <PF>
 80015f0:	e718      	b.n	8001424 <controller_impedance+0xdc>
             else if (d_torque > 0)
 80015f2:	2200      	movs	r2, #0
 80015f4:	2300      	movs	r3, #0
 80015f6:	4640      	mov	r0, r8
 80015f8:	4649      	mov	r1, r9
 80015fa:	f7ff fa99 	bl	8000b30 <__aeabi_dcmpgt>
 80015fe:	2800      	cmp	r0, #0
 8001600:	f43f af0e 	beq.w	8001420 <controller_impedance+0xd8>
                 DF(percent_new);
 8001604:	4650      	mov	r0, sl
 8001606:	f7fe ffaf 	bl	8000568 <__aeabi_f2d>
 800160a:	ec41 0b10 	vmov	d0, r0, r1
 800160e:	f000 fbbd 	bl	8001d8c <DF>
 8001612:	e707      	b.n	8001424 <controller_impedance+0xdc>
 8001614:	f3af 8000 	nop.w
 8001618:	00000000 	.word	0x00000000
 800161c:	c0140000 	.word	0xc0140000
 8001620:	47ae147b 	.word	0x47ae147b
 8001624:	3f947ae1 	.word	0x3f947ae1
 8001628:	00000000 	.word	0x00000000
 800162c:	3ff80000 	.word	0x3ff80000
 8001630:	5953586d 	.word	0x5953586d
 8001634:	40512214 	.word	0x40512214
	...
 8001644:	40000000 	.word	0x40000000
 8001648:	00000000 	.word	0x00000000
 800164c:	c0340000 	.word	0xc0340000
 8001650:	66666666 	.word	0x66666666
 8001654:	3ffa6666 	.word	0x3ffa6666
 8001658:	66666666 	.word	0x66666666
 800165c:	3fe66666 	.word	0x3fe66666
 8001660:	00000000 	.word	0x00000000
 8001664:	c0000000 	.word	0xc0000000
 8001668:	eb851eb8 	.word	0xeb851eb8
 800166c:	3f9eb851 	.word	0x3f9eb851
 8001670:	33333333 	.word	0x33333333
 8001674:	3fd33333 	.word	0x3fd33333
 8001678:	2000001c 	.word	0x2000001c
 800167c:	200005f0 	.word	0x200005f0
 8001680:	20000604 	.word	0x20000604
 8001684:	45174000 	.word	0x45174000
 8001688:	42a00000 	.word	0x42a00000
 800168c:	40240000 	.word	0x40240000
 8001690:	20000018 	.word	0x20000018
 8001694:	20000600 	.word	0x20000600
 8001698:	20008738 	.word	0x20008738
 800169c:	200005f8 	.word	0x200005f8
 80016a0:	450fc000 	.word	0x450fc000
 80016a4:	20000608 	.word	0x20000608

080016a8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 80016a8:	2000      	movs	r0, #0
 80016aa:	4770      	bx	lr

080016ac <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <LL_AHB2_GRP1_EnableClock+0x18>)
 80016ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016b0:	4302      	orrs	r2, r0
 80016b2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 80016b6:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016b8:	4018      	ands	r0, r3
 80016ba:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80016bc:	9b01      	ldr	r3, [sp, #4]
}
 80016be:	b002      	add	sp, #8
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000

080016c8 <LED_Nucelo>:
     PA8   ------> RCC_MCO
*/

void LED_Nucelo(void)
{
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80016c8:	4906      	ldr	r1, [pc, #24]	; (80016e4 <LED_Nucelo+0x1c>)
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016ca:	2320      	movs	r3, #32
 80016cc:	f04f 0c01 	mov.w	ip, #1
 80016d0:	e881 1008 	stmia.w	r1, {r3, ip}
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	608b      	str	r3, [r1, #8]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016dc:	60cb      	str	r3, [r1, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016de:	610b      	str	r3, [r1, #16]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f005 bd36 	b.w	8007150 <LL_GPIO_Init>
 80016e4:	20008750 	.word	0x20008750

080016e8 <LED_SPI_Mode>:
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80016e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
}

void LED_SPI_Mode(void)
{
 80016ec:	b570      	push	{r4, r5, r6, lr}
 80016ee:	6818      	ldr	r0, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f0:	2220      	movs	r2, #32
 80016f2:	fa92 f1a2 	rbit	r1, r2
 80016f6:	fab1 f181 	clz	r1, r1
 80016fa:	fa92 f5a2 	rbit	r5, r2
 80016fe:	2403      	movs	r4, #3
 8001700:	0049      	lsls	r1, r1, #1
 8001702:	fab5 f585 	clz	r5, r5
 8001706:	fa04 f101 	lsl.w	r1, r4, r1
 800170a:	ea20 0101 	bic.w	r1, r0, r1
 800170e:	0068      	lsls	r0, r5, #1
 8001710:	2502      	movs	r5, #2
 8001712:	fa05 f000 	lsl.w	r0, r5, r0
 8001716:	4301      	orrs	r1, r0
 8001718:	6019      	str	r1, [r3, #0]
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800171a:	6a19      	ldr	r1, [r3, #32]
 800171c:	fa92 f5a2 	rbit	r5, r2
 8001720:	fab5 f585 	clz	r5, r5
 8001724:	fa92 f0a2 	rbit	r0, r2
 8001728:	260f      	movs	r6, #15
 800172a:	00ad      	lsls	r5, r5, #2
 800172c:	fa06 f505 	lsl.w	r5, r6, r5
 8001730:	fab0 f080 	clz	r0, r0
 8001734:	ea21 0105 	bic.w	r1, r1, r5
 8001738:	0080      	lsls	r0, r0, #2
 800173a:	2505      	movs	r5, #5
 800173c:	fa05 f000 	lsl.w	r0, r5, r0
 8001740:	4301      	orrs	r1, r0
 8001742:	6219      	str	r1, [r3, #32]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001744:	689d      	ldr	r5, [r3, #8]
 8001746:	fa92 f0a2 	rbit	r0, r2
 800174a:	fab0 f080 	clz	r0, r0
 800174e:	fa92 f1a2 	rbit	r1, r2
 8001752:	fab1 f181 	clz	r1, r1
 8001756:	0040      	lsls	r0, r0, #1
 8001758:	fa04 f000 	lsl.w	r0, r4, r0
 800175c:	0049      	lsls	r1, r1, #1
 800175e:	ea25 0000 	bic.w	r0, r5, r0
 8001762:	fa04 f101 	lsl.w	r1, r4, r1
 8001766:	4301      	orrs	r1, r0
 8001768:	6099      	str	r1, [r3, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800176a:	6859      	ldr	r1, [r3, #4]
 800176c:	f021 0120 	bic.w	r1, r1, #32
 8001770:	6059      	str	r1, [r3, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001772:	68d8      	ldr	r0, [r3, #12]
 8001774:	fa92 f1a2 	rbit	r1, r2
 8001778:	fab1 f181 	clz	r1, r1
 800177c:	0049      	lsls	r1, r1, #1
 800177e:	408c      	lsls	r4, r1
 8001780:	ea20 0404 	bic.w	r4, r0, r4
 8001784:	fa92 f2a2 	rbit	r2, r2
 8001788:	60dc      	str	r4, [r3, #12]
 800178a:	bd70      	pop	{r4, r5, r6, pc}

0800178c <MX_GPIO_Init>:

}


void MX_GPIO_Init(void)
{
 800178c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}



  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001790:	2004      	movs	r0, #4
 8001792:	f7ff ff8b 	bl	80016ac <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8001796:	2080      	movs	r0, #128	; 0x80
 8001798:	f7ff ff88 	bl	80016ac <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800179c:	2001      	movs	r0, #1
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);

  /**/
  GPIO_InitStruct.Pin = SDCARD_PWR_EN_PIN;
 800179e:	4c3c      	ldr	r4, [pc, #240]	; (8001890 <MX_GPIO_Init+0x104>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017a0:	4f3c      	ldr	r7, [pc, #240]	; (8001894 <MX_GPIO_Init+0x108>)
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80017a2:	f7ff ff83 	bl	80016ac <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80017a6:	2002      	movs	r0, #2
 80017a8:	f7ff ff80 	bl	80016ac <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80017ac:	2008      	movs	r0, #8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017ae:	2500      	movs	r5, #0
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80017b0:	f7ff ff7c 	bl	80016ac <LL_AHB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = SDCARD_PWR_EN_PIN;
 80017b4:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80017b6:	f04f 0802 	mov.w	r8, #2
  LL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017ba:	4621      	mov	r1, r4
 80017bc:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = SDCARD_PWR_EN_PIN;
 80017be:	6026      	str	r6, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80017c0:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80017c2:	f8c4 8008 	str.w	r8, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017c6:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017c8:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017ca:	f005 fcc1 	bl	8007150 <LL_GPIO_Init>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80017ce:	62be      	str	r6, [r7, #40]	; 0x28
  LL_GPIO_ResetOutputPin(GPIOH, SDCARD_PWR_EN_PIN);

  /**/

  /**/
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
 80017d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 80017d4:	4621      	mov	r1, r4
 80017d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ENC2_CS_PIN | ENC2_SCLK_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017da:	f5a7 57c0 	sub.w	r7, r7, #6144	; 0x1800
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80017de:	e884 0028 	stmia.w	r4, {r3, r5}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80017e2:	f8c4 8010 	str.w	r8, [r4, #16]
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 80017e6:	f005 fcb3 	bl	8007150 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_CONNECTIVITY;
 80017ea:	f44f 7300 	mov.w	r3, #512	; 0x200
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 80017ee:	4621      	mov	r1, r4
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017f4:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80017f8:	e884 0028 	stmia.w	r4, {r3, r5}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80017fc:	f8c4 8010 	str.w	r8, [r4, #16]
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 8001800:	f005 fca6 	bl	8007150 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = ENC2_CS_PIN | ENC2_SCLK_PIN;
 8001804:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001808:	4621      	mov	r1, r4
 800180a:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800180c:	e884 0048 	stmia.w	r4, {r3, r6}

  GPIO_InitStruct.Pin = MOTOR_OUTPUT1_PIN;
 8001810:	f04f 0910 	mov.w	r9, #16
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	f8c4 a008 	str.w	sl, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001818:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800181a:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181c:	f005 fc98 	bl	8007150 <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(MOTOR_OUTPUT1_GPIO_PORT, &GPIO_InitStruct);
 8001820:	4621      	mov	r1, r4
 8001822:	4638      	mov	r0, r7
  MOTOR_OUT1_LOW();

  GPIO_InitStruct.Pin = MOTOR_EN1_PIN;
 8001824:	f04f 0b08 	mov.w	fp, #8
  GPIO_InitStruct.Pin = MOTOR_OUTPUT1_PIN;
 8001828:	f8c4 9000 	str.w	r9, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800182c:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	f8c4 a008 	str.w	sl, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001832:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001834:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(MOTOR_OUTPUT1_GPIO_PORT, &GPIO_InitStruct);
 8001836:	f005 fc8b 	bl	8007150 <LL_GPIO_Init>
 800183a:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(MOTOR_EN1_GPIO_PORT, &GPIO_InitStruct);
 800183e:	4621      	mov	r1, r4
 8001840:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = MOTOR_EN1_PIN;
 8001842:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001846:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	f8c4 a008 	str.w	sl, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800184c:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800184e:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(MOTOR_EN1_GPIO_PORT, &GPIO_InitStruct);
 8001850:	f005 fc7e 	bl	8007150 <LL_GPIO_Init>
 8001854:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
  GPIO_InitStruct.Pin = MOTOR_OUTPUT2_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(MOTOR_OUTPUT2_GPIO_PORT, &GPIO_InitStruct);
 8001858:	4621      	mov	r1, r4
 800185a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = MOTOR_OUTPUT2_PIN;
 800185e:	f8c4 9000 	str.w	r9, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001862:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	f8c4 a008 	str.w	sl, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001868:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800186a:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(MOTOR_OUTPUT2_GPIO_PORT, &GPIO_InitStruct);
 800186c:	f005 fc70 	bl	8007150 <LL_GPIO_Init>
 8001870:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
  MOTOR_OUT2_LOW();

  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001874:	4621      	mov	r1, r4
 8001876:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28
  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
 800187a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800187e:	e884 0028 	stmia.w	r4, {r3, r5}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001882:	f8c4 8010 	str.w	r8, [r4, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	4638      	mov	r0, r7

}
 8001888:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f005 bc60 	b.w	8007150 <LL_GPIO_Init>
 8001890:	20008750 	.word	0x20008750
 8001894:	48001c00 	.word	0x48001c00

08001898 <RED_LED_OFF>:
 8001898:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800189c:	2202      	movs	r2, #2
 800189e:	619a      	str	r2, [r3, #24]
 80018a0:	4770      	bx	lr
	...

080018a4 <MOTOR_OUT1_HIGH>:
  WRITE_REG(GPIOx->BSRR, PinMask);
 80018a4:	4b01      	ldr	r3, [pc, #4]	; (80018ac <MOTOR_OUT1_HIGH+0x8>)
 80018a6:	2210      	movs	r2, #16
 80018a8:	619a      	str	r2, [r3, #24]
 80018aa:	4770      	bx	lr
 80018ac:	48000400 	.word	0x48000400

080018b0 <MOTOR_OUT1_LOW>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80018b0:	4b01      	ldr	r3, [pc, #4]	; (80018b8 <MOTOR_OUT1_LOW+0x8>)
 80018b2:	2210      	movs	r2, #16
 80018b4:	629a      	str	r2, [r3, #40]	; 0x28
 80018b6:	4770      	bx	lr
 80018b8:	48000400 	.word	0x48000400

080018bc <MOTOR_EN1_HIGH>:
  WRITE_REG(GPIOx->BSRR, PinMask);
 80018bc:	4b01      	ldr	r3, [pc, #4]	; (80018c4 <MOTOR_EN1_HIGH+0x8>)
 80018be:	2208      	movs	r2, #8
 80018c0:	619a      	str	r2, [r3, #24]
 80018c2:	4770      	bx	lr
 80018c4:	48000400 	.word	0x48000400

080018c8 <MOTOR_EN1_LOW>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80018c8:	4b01      	ldr	r3, [pc, #4]	; (80018d0 <MOTOR_EN1_LOW+0x8>)
 80018ca:	2208      	movs	r2, #8
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
 80018ce:	4770      	bx	lr
 80018d0:	48000400 	.word	0x48000400

080018d4 <GREEN_LED_OFF>:
  WRITE_REG(GPIOx->BSRR, PinMask);
 80018d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018d8:	2202      	movs	r2, #2
 80018da:	619a      	str	r2, [r3, #24]
 80018dc:	4770      	bx	lr
	...

080018e0 <BLUE_LED_OFF>:
 80018e0:	4b01      	ldr	r3, [pc, #4]	; (80018e8 <BLUE_LED_OFF+0x8>)
 80018e2:	2280      	movs	r2, #128	; 0x80
 80018e4:	619a      	str	r2, [r3, #24]
 80018e6:	4770      	bx	lr
 80018e8:	48000400 	.word	0x48000400

080018ec <ALL_LED_OFF>:
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <ALL_LED_OFF+0x14>)
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	619a      	str	r2, [r3, #24]
 80018f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018f6:	2202      	movs	r2, #2
 80018f8:	619a      	str	r2, [r3, #24]
 80018fa:	619a      	str	r2, [r3, #24]
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	48000400 	.word	0x48000400

08001904 <ALL_LED_ON>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <ALL_LED_ON+0x14>)
 8001906:	2280      	movs	r2, #128	; 0x80
 8001908:	629a      	str	r2, [r3, #40]	; 0x28
 800190a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800190e:	2202      	movs	r2, #2
 8001910:	629a      	str	r2, [r3, #40]	; 0x28
 8001912:	629a      	str	r2, [r3, #40]	; 0x28
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	48000400 	.word	0x48000400

0800191c <RED_LED_ONLY>:
 800191c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001920:	4903      	ldr	r1, [pc, #12]	; (8001930 <RED_LED_ONLY+0x14>)
  WRITE_REG(GPIOx->BRR, PinMask);
 8001922:	2202      	movs	r2, #2
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001924:	2080      	movs	r0, #128	; 0x80
  WRITE_REG(GPIOx->BRR, PinMask);
 8001926:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001928:	6188      	str	r0, [r1, #24]
 800192a:	619a      	str	r2, [r3, #24]
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	48000400 	.word	0x48000400

08001934 <GREEN_LED_ONLY>:
 8001934:	f7ff bff2 	b.w	800191c <RED_LED_ONLY>

08001938 <BLUE_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <BLUE_LED_ONLY+0x14>)
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 800193e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001942:	2202      	movs	r2, #2
 8001944:	619a      	str	r2, [r3, #24]
 8001946:	619a      	str	r2, [r3, #24]
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	48000400 	.word	0x48000400

08001950 <SD_POWER_ON>:
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <SD_POWER_ON+0x18>)
 8001952:	691a      	ldr	r2, [r3, #16]

/* SD CARD power pin */
void SD_POWER_ON(void)
{

	if(!LL_GPIO_IsInputPinSet(GPIOH, SDCARD_PWR_EN_PIN))
 8001954:	07d2      	lsls	r2, r2, #31
 8001956:	d405      	bmi.n	8001964 <SD_POWER_ON+0x14>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001958:	2201      	movs	r2, #1
 800195a:	619a      	str	r2, [r3, #24]
	{
LL_GPIO_SetOutputPin(GPIOH, SDCARD_PWR_EN_PIN);
delay_us(1000); // 1ms startup
 800195c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001960:	f001 bf10 	b.w	8003784 <delay_us>
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	48001c00 	.word	0x48001c00

0800196c <SD_POWER_OFF>:
  WRITE_REG(GPIOx->BRR, PinMask);
 800196c:	4b01      	ldr	r3, [pc, #4]	; (8001974 <SD_POWER_OFF+0x8>)
 800196e:	2201      	movs	r2, #1
 8001970:	629a      	str	r2, [r3, #40]	; 0x28
 8001972:	4770      	bx	lr
 8001974:	48001c00 	.word	0x48001c00

08001978 <LED_Nucleo_ON>:
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001978:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800197c:	2220      	movs	r2, #32
 800197e:	619a      	str	r2, [r3, #24]
 8001980:	4770      	bx	lr

08001982 <LED_Nucleo_OFF>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001982:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001986:	2220      	movs	r2, #32
 8001988:	629a      	str	r2, [r3, #40]	; 0x28
 800198a:	4770      	bx	lr

0800198c <LED_Nulceo_Blinking_2s>:
  }
#endif
}

void LED_Nulceo_Blinking_2s(void)  // Calculate Delay On-Demand
{
 800198c:	b538      	push	{r3, r4, r5, lr}
 800198e:	240a      	movs	r4, #10
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 8001990:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 8001994:	696b      	ldr	r3, [r5, #20]
 8001996:	f083 0320 	eor.w	r3, r3, #32
 800199a:	616b      	str	r3, [r5, #20]
#ifdef LED_Signal_En
  uint32_t i=0;
  for(i =0; i<10; i++)
  {
    LL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    LL_mDelay(400);
 800199c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80019a0:	f006 fc5c 	bl	800825c <LL_mDelay>
  for(i =0; i<10; i++)
 80019a4:	3c01      	subs	r4, #1
 80019a6:	d1f5      	bne.n	8001994 <LED_Nulceo_Blinking_2s+0x8>
  }
#endif
}
 80019a8:	bd38      	pop	{r3, r4, r5, pc}

080019aa <LED_Nulceo_Blinking_1s>:

void LED_Nulceo_Blinking_1s(void)  // Calculate Delay On-Demand
{
 80019aa:	b538      	push	{r3, r4, r5, lr}
 80019ac:	240a      	movs	r4, #10
 80019ae:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
 80019b2:	696b      	ldr	r3, [r5, #20]
 80019b4:	f083 0320 	eor.w	r3, r3, #32
 80019b8:	616b      	str	r3, [r5, #20]
#ifdef LED_Signal_En
  uint32_t i=0;
  for(i =0; i<10; i++)
  {
    LL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    LL_mDelay(100);
 80019ba:	2064      	movs	r0, #100	; 0x64
 80019bc:	f006 fc4e 	bl	800825c <LL_mDelay>
  for(i =0; i<10; i++)
 80019c0:	3c01      	subs	r4, #1
 80019c2:	d1f6      	bne.n	80019b2 <LED_Nulceo_Blinking_1s+0x8>
  }
#endif
}
 80019c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080019c8 <EXTI9_5_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine));
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <EXTI9_5_IRQHandler+0x18>)
 80019ca:	695a      	ldr	r2, [r3, #20]

}

void EXTI9_5_IRQHandler(void)       // Interrupt from USB connectivity PIN PA9
{
if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 80019cc:	0592      	lsls	r2, r2, #22
 80019ce:	d505      	bpl.n	80019dc <EXTI9_5_IRQHandler+0x14>
{
USB_Present_=1;         // USB present
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <EXTI9_5_IRQHandler+0x1c>)
 80019d2:	2101      	movs	r1, #1
 80019d4:	7011      	strb	r1, [r2, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 80019d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019da:	615a      	str	r2, [r3, #20]
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40010400 	.word	0x40010400
 80019e4:	20000614 	.word	0x20000614

080019e8 <EXTI0_IRQHandler>:
  return (READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine));
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <EXTI0_IRQHandler+0x14>)
 80019ea:	695a      	ldr	r2, [r3, #20]
}
}

void EXTI0_IRQHandler(void)       // Interrupt from USB connectivity PIN PA9
{
if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80019ec:	07d2      	lsls	r2, r2, #31
{
	DataLog_Pause_=1;         // USB present
 80019ee:	bf41      	itttt	mi
 80019f0:	4903      	ldrmi	r1, [pc, #12]	; (8001a00 <EXTI0_IRQHandler+0x18>)
 80019f2:	2201      	movmi	r2, #1
 80019f4:	700a      	strbmi	r2, [r1, #0]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80019f6:	615a      	strmi	r2, [r3, #20]
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40010400 	.word	0x40010400
 8001a00:	2000060c 	.word	0x2000060c

08001a04 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <USART2_IRQHandler+0x28>)
 8001a06:	69da      	ldr	r2, [r3, #28]


void USART2_IRQHandler(void)
{
  /* Check RXNE flag value in ISR register */
  if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8001a08:	0691      	lsls	r1, r2, #26
 8001a0a:	d50d      	bpl.n	8001a28 <USART2_IRQHandler+0x24>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	0692      	lsls	r2, r2, #26
 8001a10:	d50a      	bpl.n	8001a28 <USART2_IRQHandler+0x24>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8001a12:	8c99      	ldrh	r1, [r3, #36]	; 0x24
  {
	  received_char= LL_USART_ReceiveData8(USART2);
 8001a14:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <USART2_IRQHandler+0x2c>)
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8001a16:	4807      	ldr	r0, [pc, #28]	; (8001a34 <USART2_IRQHandler+0x30>)
 8001a18:	b2c9      	uxtb	r1, r1
 8001a1a:	6011      	str	r1, [r2, #0]
	      LL_USART_TransmitData8(USART3, received_char); // internally
 8001a1c:	6811      	ldr	r1, [r2, #0]
 8001a1e:	b2c9      	uxtb	r1, r1
 8001a20:	8501      	strh	r1, [r0, #40]	; 0x28
	      LL_USART_TransmitData8(USART2, received_char); // to PC
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	851a      	strh	r2, [r3, #40]	; 0x28
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40004400 	.word	0x40004400
 8001a30:	20008a00 	.word	0x20008a00
 8001a34:	40004800 	.word	0x40004800

08001a38 <USART3_IRQHandler>:
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 8001a38:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <USART3_IRQHandler+0x20>)
 8001a3a:	69da      	ldr	r2, [r3, #28]


void USART3_IRQHandler(void)
{
  /* Check RXNE flag value in ISR register */
  if(LL_USART_IsActiveFlag_RXNE(USART3) && LL_USART_IsEnabledIT_RXNE(USART3))
 8001a3c:	0691      	lsls	r1, r2, #26
 8001a3e:	d50a      	bpl.n	8001a56 <USART3_IRQHandler+0x1e>
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	0692      	lsls	r2, r2, #26
 8001a44:	d507      	bpl.n	8001a56 <USART3_IRQHandler+0x1e>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8001a46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  {
	  received_char3= LL_USART_ReceiveData8(USART3);   // internally
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <USART3_IRQHandler+0x24>)
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	6013      	str	r3, [r2, #0]
	//  LL_USART_TransmitData8(USART3, received_char3);  //physical wire 3 to 2
	  LL_USART_TransmitData8(USART2, received_char3); // Plt
 8001a4e:	6813      	ldr	r3, [r2, #0]
  USARTx->TDR = Value;
 8001a50:	4a03      	ldr	r2, [pc, #12]	; (8001a60 <USART3_IRQHandler+0x28>)
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	8513      	strh	r3, [r2, #40]	; 0x28
 8001a56:	4770      	bx	lr
 8001a58:	40004800 	.word	0x40004800
 8001a5c:	200089dc 	.word	0x200089dc
 8001a60:	40004400 	.word	0x40004400

08001a64 <USART2_wr_print>:
//void USART2_wr_print(uint8_t *buffer, uint32_t nBytes)
void USART2_wr_print(uint8_t *buffer, uint32_t nBytes)
{
for (int i=0;i<nBytes;i++)
{
while(!(USART2->ISR & USART_ISR_TXE));
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <USART2_wr_print+0x28>)
 8001a66:	4401      	add	r1, r0
for (int i=0;i<nBytes;i++)
 8001a68:	4288      	cmp	r0, r1
 8001a6a:	d100      	bne.n	8001a6e <USART2_wr_print+0xa>
USART2->TDR= buffer[i]& 0xFF;

while(!(USART2->ISR & USART_ISR_TC));
USART2->ISR &= ~USART_ISR_TC;
}
}
 8001a6c:	4770      	bx	lr
while(!(USART2->ISR & USART_ISR_TXE));
 8001a6e:	69da      	ldr	r2, [r3, #28]
 8001a70:	0612      	lsls	r2, r2, #24
 8001a72:	d5fc      	bpl.n	8001a6e <USART2_wr_print+0xa>
USART2->TDR= buffer[i]& 0xFF;
 8001a74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a78:	851a      	strh	r2, [r3, #40]	; 0x28
while(!(USART2->ISR & USART_ISR_TC));
 8001a7a:	69da      	ldr	r2, [r3, #28]
 8001a7c:	0652      	lsls	r2, r2, #25
 8001a7e:	d5fc      	bpl.n	8001a7a <USART2_wr_print+0x16>
USART2->ISR &= ~USART_ISR_TC;
 8001a80:	69da      	ldr	r2, [r3, #28]
 8001a82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a86:	61da      	str	r2, [r3, #28]
 8001a88:	e7ee      	b.n	8001a68 <USART2_wr_print+0x4>
 8001a8a:	bf00      	nop
 8001a8c:	40004400 	.word	0x40004400

08001a90 <main>:
int main(void){
 8001a90:	b5f0      	push	{r4, r5, r6, r7, lr}
	Pros_state =  LP_STOP;                                  // Default state after power ON reset
 8001a92:	4ea2      	ldr	r6, [pc, #648]	; (8001d1c <main+0x28c>)
int main(void){
 8001a94:	b091      	sub	sp, #68	; 0x44
	Pros_state =  LP_STOP;                                  // Default state after power ON reset
 8001a96:	2401      	movs	r4, #1
 8001a98:	7034      	strb	r4, [r6, #0]
	SystemClock_Config_MSI_80MHz();	                        // Configure the system clock to 80 MHz from MSI driven PLL
 8001a9a:	f001 fe9f 	bl	80037dc <SystemClock_Config_MSI_80MHz>
 if (RTC_BAK_GetRegister(RTC, 0x01) != RTC_BKP_DATE_TIME_UPDTATED) //    0x01 value was arbitrarily set from previous Configure_RTC_Calendar()
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	489f      	ldr	r0, [pc, #636]	; (8001d20 <main+0x290>)
 8001aa2:	f000 ffc9 	bl	8002a38 <RTC_BAK_GetRegister>
 8001aa6:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8001aaa:	4298      	cmp	r0, r3
 8001aac:	d001      	beq.n	8001ab2 <main+0x22>
			MX_RTC_Init();   // Set RTC clock source and parameters
 8001aae:	f000 ff31 	bl	8002914 <MX_RTC_Init>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ab2:	4c9c      	ldr	r4, [pc, #624]	; (8001d24 <main+0x294>)
  MX_GPIO_Init();              // Enc2, Motor GPIO configured.
 8001ab4:	f7ff fe6a 	bl	800178c <MX_GPIO_Init>
  HAL_Init();                 // Reset of all peripherals, Initializes the Flash interface and the Systick.
 8001ab8:	f002 fe50 	bl	800475c <HAL_Init>
  LED_Nucelo();
 8001abc:	f7ff fe04 	bl	80016c8 <LED_Nucelo>
  LED_Nucleo_ON();
 8001ac0:	f7ff ff5a 	bl	8001978 <LED_Nucleo_ON>
  LED_Nucleo_OFF();
 8001ac4:	f7ff ff5d 	bl	8001982 <LED_Nucleo_OFF>
 8001ac8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ad0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001ad2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001adc:	9b01      	ldr	r3, [sp, #4]
 8001ade:	6815      	ldr	r5, [r2, #0]
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	fa93 f0a3 	rbit	r0, r3
 8001ae6:	fab0 f080 	clz	r0, r0
 8001aea:	fa93 f1a3 	rbit	r1, r3
 8001aee:	2703      	movs	r7, #3
 8001af0:	4098      	lsls	r0, r3
 8001af2:	fa07 f000 	lsl.w	r0, r7, r0
 8001af6:	fab1 f181 	clz	r1, r1
 8001afa:	ea25 0000 	bic.w	r0, r5, r0
 8001afe:	4099      	lsls	r1, r3
 8001b00:	2502      	movs	r5, #2
 8001b02:	fa05 f101 	lsl.w	r1, r5, r1
 8001b06:	4301      	orrs	r1, r0
 8001b08:	6011      	str	r1, [r2, #0]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001b0a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8001b0e:	fa93 f0a3 	rbit	r0, r3
 8001b12:	fab0 f080 	clz	r0, r0
 8001b16:	fa93 f1a3 	rbit	r1, r3
 8001b1a:	4098      	lsls	r0, r3
 8001b1c:	fab1 f181 	clz	r1, r1
 8001b20:	fa07 f000 	lsl.w	r0, r7, r0
 8001b24:	4099      	lsls	r1, r3
 8001b26:	ea2e 0000 	bic.w	r0, lr, r0
 8001b2a:	fa05 f101 	lsl.w	r1, r5, r1
 8001b2e:	4301      	orrs	r1, r0
 8001b30:	60d1      	str	r1, [r2, #12]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001b32:	6891      	ldr	r1, [r2, #8]
 8001b34:	fa93 fea3 	rbit	lr, r3
 8001b38:	fabe fe8e 	clz	lr, lr
 8001b3c:	fa93 f0a3 	rbit	r0, r3
 8001b40:	fa0e fe03 	lsl.w	lr, lr, r3
 8001b44:	fab0 f080 	clz	r0, r0
 8001b48:	fa07 f70e 	lsl.w	r7, r7, lr
 8001b4c:	ea21 0707 	bic.w	r7, r1, r7
 8001b50:	fa00 f103 	lsl.w	r1, r0, r3
 8001b54:	408d      	lsls	r5, r1
 8001b56:	433d      	orrs	r5, r7
 8001b58:	6095      	str	r5, [r2, #8]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001b5a:	6a11      	ldr	r1, [r2, #32]
 8001b5c:	fa93 f5a3 	rbit	r5, r3
 8001b60:	fab5 f585 	clz	r5, r5
 8001b64:	fa93 f0a3 	rbit	r0, r3
 8001b68:	270f      	movs	r7, #15
 8001b6a:	fab0 f080 	clz	r0, r0
 8001b6e:	00ad      	lsls	r5, r5, #2
 8001b70:	fa07 f505 	lsl.w	r5, r7, r5
 8001b74:	0080      	lsls	r0, r0, #2
 8001b76:	ea21 0105 	bic.w	r1, r1, r5
 8001b7a:	4083      	lsls	r3, r0
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	6213      	str	r3, [r2, #32]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b80:	4b69      	ldr	r3, [pc, #420]	; (8001d28 <main+0x298>)
						 else if (SD_write_Flag == 1)                    // When BUffer full to store in SD card
 8001b82:	4f6a      	ldr	r7, [pc, #424]	; (8001d2c <main+0x29c>)
 8001b84:	2200      	movs	r2, #0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001b86:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001b8e:	6019      	str	r1, [r3, #0]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b90:	6da3      	ldr	r3, [r4, #88]	; 0x58
  /* Set counter mode */
  /* Reset value is LL_TIM_COUNTERMODE_UP */
  //LL_TIM_SetCounterMode(TIM2, LL_TIM_COUNTERMODE_UP);

  /* Set the pre-scaler value to have TIM2 counter clock equal to 100 kHz */
  LL_TIM_SetPrescaler(TIM2, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000));
 8001b92:	4967      	ldr	r1, [pc, #412]	; (8001d30 <main+0x2a0>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	65a3      	str	r3, [r4, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001ba2:	9b00      	ldr	r3, [sp, #0]
 8001ba4:	4b63      	ldr	r3, [pc, #396]	; (8001d34 <main+0x2a4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	428b      	cmp	r3, r1
 8001baa:	bf84      	itt	hi
 8001bac:	4a62      	ldrhi	r2, [pc, #392]	; (8001d38 <main+0x2a8>)
 8001bae:	fbb3 f2f2 	udivhi	r2, r3, r2
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
  WRITE_REG(TIMx->PSC, Prescaler);
 8001bb2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001bb6:	bf88      	it	hi
 8001bb8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8001bbc:	628a      	str	r2, [r1, #40]	; 0x28
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001bbe:	680a      	ldr	r2, [r1, #0]
 8001bc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bc4:	600a      	str	r2, [r1, #0]
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
{
  return (uint32_t)(READ_REG(TIMx->PSC));
 8001bc6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  /* preload register are transferred into the shadow register at each update */
  /* event (UEV).                                                             */
  LL_TIM_EnableARRPreload(TIM2);

  /* Set the auto-reload value to have a counter frequency of PWM_Freq_Motor Hz */
  LL_TIM_SetAutoReload(TIM2, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIM2), PWM_Freq_Motor));
 8001bc8:	f640 30b7 	movw	r0, #2999	; 0xbb7
 8001bcc:	3201      	adds	r2, #1
 8001bce:	fbb3 f2f2 	udiv	r2, r3, r2
 8001bd2:	4282      	cmp	r2, r0
 8001bd4:	bf81      	itttt	hi
 8001bd6:	6a89      	ldrhi	r1, [r1, #40]	; 0x28
 8001bd8:	f640 32b8 	movwhi	r2, #3000	; 0xbb8
 8001bdc:	fb01 2202 	mlahi	r2, r1, r2, r2
 8001be0:	fbb3 f3f2 	udivhi	r3, r3, r2
 8001be4:	bf88      	it	hi
 8001be6:	f103 32ff 	addhi.w	r2, r3, #4294967295
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
  WRITE_REG(TIMx->ARR, AutoReload);
 8001bea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bee:	bf98      	it	ls
 8001bf0:	2200      	movls	r2, #0
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8001bf2:	6999      	ldr	r1, [r3, #24]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  return (uint32_t)(READ_REG(TIMx->ARR));
 8001bf6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8001bf8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  /* Set output channel polarity */
  /* Reset value is LL_TIM_OCPOLARITY_HIGH */
  //LL_TIM_OC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);

  /* Set compare value to Duty cycle ) */
  LL_TIM_OC_SetCompareCH1(TIM2, ((LL_TIM_GetAutoReload(TIM2)*Duty_cycle_motor)/100));
 8001bfc:	220a      	movs	r2, #10
 8001bfe:	f021 0173 	bic.w	r1, r1, #115	; 0x73
 8001c02:	2564      	movs	r5, #100	; 0x64
 8001c04:	4350      	muls	r0, r2
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001c06:	f041 0168 	orr.w	r1, r1, #104	; 0x68
 8001c0a:	fbb0 f0f5 	udiv	r0, r0, r5
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001c0e:	6358      	str	r0, [r3, #52]	; 0x34
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001c10:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8001c12:	6a19      	ldr	r1, [r3, #32]
 8001c14:	f041 0101 	orr.w	r1, r1, #1
 8001c18:	6219      	str	r1, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001c1a:	6819      	ldr	r1, [r3, #0]
 8001c1c:	f041 0101 	orr.w	r1, r1, #1
 8001c20:	6019      	str	r1, [r3, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001c22:	6959      	ldr	r1, [r3, #20]
 8001c24:	f041 0101 	orr.w	r1, r1, #1
 8001c28:	6159      	str	r1, [r3, #20]
  DutyCyclePrt=10;            // 20 meaning 20%
 8001c2a:	4944      	ldr	r1, [pc, #272]	; (8001d3c <main+0x2ac>)
 8001c2c:	800a      	strh	r2, [r1, #0]
  return (uint32_t)(READ_REG(TIMx->ARR));
 8001c2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  /* PWM signal period is determined by the value of the auto-reload register */
  T = LL_TIM_GetAutoReload(TIM2);

  /* Pulse duration is determined by the value of the compare register.       */
  /* Its value is calculated in order to match the requested duty cycle.      */
  P = (D*T)/100;
 8001c30:	434a      	muls	r2, r1
 8001c32:	fbb2 f2f5 	udiv	r2, r2, r5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001c36:	635a      	str	r2, [r3, #52]	; 0x34
    DFU_Bypass();         // Do not change this part
 8001c38:	f000 fbcc 	bl	80023d4 <DFU_Bypass>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c42:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001c4c:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c4e:	2302      	movs	r3, #2
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001c50:	250c      	movs	r5, #12
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c52:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c56:	2400      	movs	r4, #0
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c58:	eb0d 0105 	add.w	r1, sp, r5
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5c:	9305      	str	r3, [sp, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001c62:	2307      	movs	r3, #7
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001c64:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001c66:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c68:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c6a:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6c:	f005 fa70 	bl	8007150 <LL_GPIO_Init>
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001c70:	950d      	str	r5, [sp, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001c72:	4d33      	ldr	r5, [pc, #204]	; (8001d40 <main+0x2b0>)
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001c74:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.BaudRate = 115200;
 8001c76:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  LL_USART_Init(USART2, &USART_InitStruct);
 8001c7a:	a909      	add	r1, sp, #36	; 0x24
 8001c7c:	4628      	mov	r0, r5
  USART_InitStruct.BaudRate = 115200;
 8001c7e:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001c80:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001c82:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001c84:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001c86:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 8001c88:	f005 fecc 	bl	8007a24 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c8c:	686b      	ldr	r3, [r5, #4]
    sprintf(PrintBuf,"Hello");
 8001c8e:	492d      	ldr	r1, [pc, #180]	; (8001d44 <main+0x2b4>)
 8001c90:	482d      	ldr	r0, [pc, #180]	; (8001d48 <main+0x2b8>)
 8001c92:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001c96:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001c98:	68ab      	ldr	r3, [r5, #8]
 8001c9a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001c9e:	60ab      	str	r3, [r5, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001ca0:	682b      	ldr	r3, [r5, #0]
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	602b      	str	r3, [r5, #0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca8:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <main+0x298>)
 8001caa:	2210      	movs	r2, #16
 8001cac:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001cb0:	2240      	movs	r2, #64	; 0x40
 8001cb2:	605a      	str	r2, [r3, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001cb4:	682b      	ldr	r3, [r5, #0]
 8001cb6:	f043 0320 	orr.w	r3, r3, #32
 8001cba:	602b      	str	r3, [r5, #0]
 8001cbc:	f009 fa36 	bl	800b12c <strcpy>
    USART2_wr_print(PrintBuf,sizeof(PrintBuf));
 8001cc0:	2114      	movs	r1, #20
 8001cc2:	4821      	ldr	r0, [pc, #132]	; (8001d48 <main+0x2b8>)
						if (USB_Present_ == 1)                     // After detecting USB attachment via EXTI_5 int
 8001cc4:	4d21      	ldr	r5, [pc, #132]	; (8001d4c <main+0x2bc>)
    USART2_wr_print(PrintBuf,sizeof(PrintBuf));
 8001cc6:	f7ff fecd 	bl	8001a64 <USART2_wr_print>
  P_ADC_Sensor_GPIO_Init();    // Two ADC configuration   // LOADCELL1=PA0=Ch5  // LOADCELL2=PC3=Ch4
 8001cca:	f001 f843 	bl	8002d54 <P_ADC_Sensor_GPIO_Init>
  USB_PA9_EXTI_conf();         // USB connectivity pin detect Interrupt
 8001cce:	f000 feb7 	bl	8002a40 <USB_PA9_EXTI_conf>
  Configure_LPTIM2_Int(); // Configured LPTIM2 but not started. To be started before going to Loop
 8001cd2:	f001 fdf3 	bl	80038bc <Configure_LPTIM2_Int>
  Configure_Interrupt();       // Re-arrange NVIC interrupt priority
 8001cd6:	f000 fb2b 	bl	8002330 <Configure_Interrupt>
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 8001cda:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001cde:	6953      	ldr	r3, [r2, #20]
 8001ce0:	f083 0320 	eor.w	r3, r3, #32
 8001ce4:	6153      	str	r3, [r2, #20]
  LED_Nucleo_ON();
 8001ce6:	f7ff fe47 	bl	8001978 <LED_Nucleo_ON>
  AIM_DataStart_at_Reset();
 8001cea:	f001 fc09 	bl	8003500 <AIM_DataStart_at_Reset>
				  switch(Pros_state) {
 8001cee:	7833      	ldrb	r3, [r6, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d004      	beq.n	8001cfe <main+0x26e>
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d1fb      	bne.n	8001cf0 <main+0x260>
						USB_Init_Start();            // Initialize USB and Stay USB mode as long as USB cable connected
 8001cf8:	f001 fb8e 	bl	8003418 <USB_Init_Start>
  					    break;
 8001cfc:	e7f7      	b.n	8001cee <main+0x25e>
						if (USB_Present_ == 1)                     // After detecting USB attachment via EXTI_5 int
 8001cfe:	782b      	ldrb	r3, [r5, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d103      	bne.n	8001d0c <main+0x27c>
						 Pros_state = USB_MSC_VCP_Mode;               // Next State USB_MSC_Mode Mode
 8001d04:	2304      	movs	r3, #4
 8001d06:	7033      	strb	r3, [r6, #0]
						 USB_Present_ = 0;                           // Reset Flag to avoid looping
 8001d08:	702c      	strb	r4, [r5, #0]
 8001d0a:	e7f0      	b.n	8001cee <main+0x25e>
						 else if (SD_write_Flag == 1)                    // When BUffer full to store in SD card
 8001d0c:	783b      	ldrb	r3, [r7, #0]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d1ed      	bne.n	8001cee <main+0x25e>
							 SD_Sensor_write();
 8001d12:	f000 fc3f 	bl	8002594 <SD_Sensor_write>
							SD_write_Flag = 0;                           // Reset Flag to avoid looping
 8001d16:	703c      	strb	r4, [r7, #0]
 8001d18:	e7e9      	b.n	8001cee <main+0x25e>
 8001d1a:	bf00      	nop
 8001d1c:	20008730 	.word	0x20008730
 8001d20:	40002800 	.word	0x40002800
 8001d24:	40021000 	.word	0x40021000
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	2000877c 	.word	0x2000877c
 8001d30:	000f423f 	.word	0x000f423f
 8001d34:	20000034 	.word	0x20000034
 8001d38:	000f4240 	.word	0x000f4240
 8001d3c:	200089d8 	.word	0x200089d8
 8001d40:	40004400 	.word	0x40004400
 8001d44:	0800c6dc 	.word	0x0800c6dc
 8001d48:	200089ec 	.word	0x200089ec
 8001d4c:	20000614 	.word	0x20000614

08001d50 <PF>:
{	MOTOR_OUT1_HIGH();
 8001d50:	b513      	push	{r0, r1, r4, lr}
 8001d52:	ec53 2b10 	vmov	r2, r3, d0
  return (uint32_t)(READ_REG(TIMx->ARR));
 8001d56:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001d5a:	e9cd 2300 	strd	r2, r3, [sp]
 8001d5e:	f7ff fda1 	bl	80018a4 <MOTOR_OUT1_HIGH>
	MOTOR_EN1_HIGH();
 8001d62:	f7ff fdab 	bl	80018bc <MOTOR_EN1_HIGH>
 8001d66:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  T = LL_TIM_GetAutoReload(TIM2);
 8001d68:	f7fe fbdc 	bl	8000524 <__aeabi_ui2d>
  P = (D*T)/100;
 8001d6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001d70:	f7fe fc4e 	bl	8000610 <__aeabi_dmul>
 8001d74:	2200      	movs	r2, #0
 8001d76:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <PF+0x38>)
 8001d78:	f7fe fd74 	bl	8000864 <__aeabi_ddiv>
  LL_TIM_OC_SetCompareCH1(TIM2, P);
 8001d7c:	f7fe ff0a 	bl	8000b94 <__aeabi_d2uiz>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001d80:	6360      	str	r0, [r4, #52]	; 0x34
}
 8001d82:	b002      	add	sp, #8
 8001d84:	bd10      	pop	{r4, pc}
 8001d86:	bf00      	nop
 8001d88:	40590000 	.word	0x40590000

08001d8c <DF>:
{
 8001d8c:	b513      	push	{r0, r1, r4, lr}
 8001d8e:	ec53 2b10 	vmov	r2, r3, d0
  return (uint32_t)(READ_REG(TIMx->ARR));
 8001d92:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001d96:	e9cd 2300 	strd	r2, r3, [sp]
	MOTOR_OUT1_LOW();
 8001d9a:	f7ff fd89 	bl	80018b0 <MOTOR_OUT1_LOW>
	MOTOR_EN1_HIGH();
 8001d9e:	f7ff fd8d 	bl	80018bc <MOTOR_EN1_HIGH>
 8001da2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  T = LL_TIM_GetAutoReload(TIM2);
 8001da4:	f7fe fbbe 	bl	8000524 <__aeabi_ui2d>
  P = (D*T)/100;
 8001da8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001dac:	f7fe fc30 	bl	8000610 <__aeabi_dmul>
 8001db0:	2200      	movs	r2, #0
 8001db2:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <DF+0x38>)
 8001db4:	f7fe fd56 	bl	8000864 <__aeabi_ddiv>
  LL_TIM_OC_SetCompareCH1(TIM2, P);
 8001db8:	f7fe feec 	bl	8000b94 <__aeabi_d2uiz>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001dbc:	6360      	str	r0, [r4, #52]	; 0x34
}
 8001dbe:	b002      	add	sp, #8
 8001dc0:	bd10      	pop	{r4, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40590000 	.word	0x40590000

08001dc8 <Stop_motor>:
{
 8001dc8:	b508      	push	{r3, lr}
  MOTOR_EN1_LOW();
 8001dca:	f7ff fd7d 	bl	80018c8 <MOTOR_EN1_LOW>
  return (uint32_t)(READ_REG(TIMx->ARR));
 8001dce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  P = (10*T)/100;
 8001dd2:	230a      	movs	r3, #10
 8001dd4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dd6:	434b      	muls	r3, r1
 8001dd8:	2164      	movs	r1, #100	; 0x64
 8001dda:	fbb3 f3f1 	udiv	r3, r3, r1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001dde:	6353      	str	r3, [r2, #52]	; 0x34
 8001de0:	bd08      	pop	{r3, pc}
 8001de2:	0000      	movs	r0, r0
 8001de4:	0000      	movs	r0, r0
	...

08001de8 <LPTIM2_IRQHandler>:
{
 8001de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  * @param  LPTIMx Low-Power Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPTIM_IsActiveFlag_ARRM(LPTIM_TypeDef *LPTIMx)
{
  return (READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == (LPTIM_ISR_ARRM));
 8001dec:	4baa      	ldr	r3, [pc, #680]	; (8002098 <LPTIM2_IRQHandler+0x2b0>)
 8001dee:	ed2d 8b04 	vpush	{d8-d9}
 8001df2:	681b      	ldr	r3, [r3, #0]
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)	// auto reload match interrupt has occured
 8001df4:	079b      	lsls	r3, r3, #30
{
 8001df6:	b08a      	sub	sp, #40	; 0x28
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)	// auto reload match interrupt has occured
 8001df8:	f140 8116 	bpl.w	8002028 <LPTIM2_IRQHandler+0x240>
			 all_ADC_read_test();
 8001dfc:	f001 f84e 	bl	8002e9c <all_ADC_read_test>
			 angle = (Enc2_GetPosition()-3326)*0.088+220;
 8001e00:	f001 fbac 	bl	800355c <Enc2_GetPosition>
 8001e04:	f6a0 40fe 	subw	r0, r0, #3326	; 0xcfe
 8001e08:	f7fe fb9c 	bl	8000544 <__aeabi_i2d>
 8001e0c:	a3a0      	add	r3, pc, #640	; (adr r3, 8002090 <LPTIM2_IRQHandler+0x2a8>)
 8001e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e12:	f7fe fbfd 	bl	8000610 <__aeabi_dmul>
 8001e16:	2200      	movs	r2, #0
 8001e18:	4ba0      	ldr	r3, [pc, #640]	; (800209c <LPTIM2_IRQHandler+0x2b4>)
 8001e1a:	4ca1      	ldr	r4, [pc, #644]	; (80020a0 <LPTIM2_IRQHandler+0x2b8>)
			       angular_velocity = (2*(angle - angle_old)+(2*tau -T)*old_angular_velocity) / (T+2*tau);
 8001e1c:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 80020dc <LPTIM2_IRQHandler+0x2f4>
 8001e20:	4da0      	ldr	r5, [pc, #640]	; (80020a4 <LPTIM2_IRQHandler+0x2bc>)
			 angle = (Enc2_GetPosition()-3326)*0.088+220;
 8001e22:	f7fe fa43 	bl	80002ac <__adddf3>
 8001e26:	f7fe fed5 	bl	8000bd4 <__aeabi_d2f>
			       angular_velocity = (2*(angle - angle_old)+(2*tau -T)*old_angular_velocity) / (T+2*tau);
 8001e2a:	4a9f      	ldr	r2, [pc, #636]	; (80020a8 <LPTIM2_IRQHandler+0x2c0>)
 8001e2c:	4b9f      	ldr	r3, [pc, #636]	; (80020ac <LPTIM2_IRQHandler+0x2c4>)
			 angle = (Enc2_GetPosition()-3326)*0.088+220;
 8001e2e:	6020      	str	r0, [r4, #0]
			       angular_velocity = (2*(angle - angle_old)+(2*tau -T)*old_angular_velocity) / (T+2*tau);
 8001e30:	ed94 8a00 	vldr	s16, [r4]
 8001e34:	edd5 8a00 	vldr	s17, [r5]
 8001e38:	e9d2 0100 	ldrd	r0, r1, [r2]
 8001e3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001e40:	e9da 6700 	ldrd	r6, r7, [sl]
 8001e44:	ed92 7b00 	vldr	d7, [r2]
 8001e48:	ed8d 7b00 	vstr	d7, [sp]
 8001e4c:	ed93 7b00 	vldr	d7, [r3]
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001e58:	f7fe fa28 	bl	80002ac <__adddf3>
 8001e5c:	4642      	mov	r2, r8
 8001e5e:	464b      	mov	r3, r9
 8001e60:	f7fe fa22 	bl	80002a8 <__aeabi_dsub>
 8001e64:	4632      	mov	r2, r6
 8001e66:	463b      	mov	r3, r7
 8001e68:	f7fe fbd2 	bl	8000610 <__aeabi_dmul>
 8001e6c:	ee78 7a68 	vsub.f32	s15, s16, s17
 8001e70:	4606      	mov	r6, r0
 8001e72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e76:	460f      	mov	r7, r1
 8001e78:	ee17 0a90 	vmov	r0, s15
 8001e7c:	f7fe fb74 	bl	8000568 <__aeabi_f2d>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4630      	mov	r0, r6
 8001e86:	4639      	mov	r1, r7
 8001e88:	f7fe fa10 	bl	80002ac <__adddf3>
 8001e8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001e90:	460f      	mov	r7, r1
 8001e92:	4606      	mov	r6, r0
 8001e94:	4619      	mov	r1, r3
 8001e96:	4610      	mov	r0, r2
 8001e98:	f7fe fa08 	bl	80002ac <__adddf3>
 8001e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001ea0:	f7fe fa04 	bl	80002ac <__adddf3>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4630      	mov	r0, r6
 8001eaa:	4639      	mov	r1, r7
 8001eac:	f7fe fcda 	bl	8000864 <__aeabi_ddiv>
 8001eb0:	4f7f      	ldr	r7, [pc, #508]	; (80020b0 <LPTIM2_IRQHandler+0x2c8>)
 8001eb2:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80020e0 <LPTIM2_IRQHandler+0x2f8>
 8001eb6:	f8df 822c 	ldr.w	r8, [pc, #556]	; 80020e4 <LPTIM2_IRQHandler+0x2fc>
 8001eba:	e9c7 0100 	strd	r0, r1, [r7]
			       old_angular_velocity = angular_velocity;
 8001ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ec2:	e9ca 2300 	strd	r2, r3, [sl]
			       angle_old = angle;
 8001ec6:	6823      	ldr	r3, [r4, #0]
 8001ec8:	602b      	str	r3, [r5, #0]
			        if((angle>=20)||(angle<=-35)){
 8001eca:	ed94 7a00 	vldr	s14, [r4]
 8001ece:	f8df a218 	ldr.w	sl, [pc, #536]	; 80020e8 <LPTIM2_IRQHandler+0x300>
 8001ed2:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8001ed6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ede:	da09      	bge.n	8001ef4 <LPTIM2_IRQHandler+0x10c>
 8001ee0:	ed94 7a00 	vldr	s14, [r4]
 8001ee4:	eddf 7a73 	vldr	s15, [pc, #460]	; 80020b4 <LPTIM2_IRQHandler+0x2cc>
 8001ee8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef0:	f200 809f 	bhi.w	8002032 <LPTIM2_IRQHandler+0x24a>
			      	  Stop_motor();
 8001ef4:	f7ff ff68 	bl	8001dc8 <Stop_motor>
				BSbuffer[s_flag].LoadCell1[Sub_cnt]= Test1_mV;
 8001ef8:	4c6f      	ldr	r4, [pc, #444]	; (80020b8 <LPTIM2_IRQHandler+0x2d0>)
 8001efa:	4d70      	ldr	r5, [pc, #448]	; (80020bc <LPTIM2_IRQHandler+0x2d4>)
 8001efc:	4e70      	ldr	r6, [pc, #448]	; (80020c0 <LPTIM2_IRQHandler+0x2d8>)
 8001efe:	782a      	ldrb	r2, [r5, #0]
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8001f06:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8001f0a:	f8ba 2000 	ldrh.w	r2, [sl]
 8001f0e:	815a      	strh	r2, [r3, #10]
				BSbuffer[s_flag].LoadCell2[Sub_cnt]= Test2_mV;
 8001f10:	782a      	ldrb	r2, [r5, #0]
 8001f12:	6823      	ldr	r3, [r4, #0]
				BSbuffer[s_flag].Enc2[Sub_cnt]=Enc_raw;
 8001f14:	7829      	ldrb	r1, [r5, #0]
				BSbuffer[s_flag].LoadCell2[Sub_cnt]= Test2_mV;
 8001f16:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8001f1a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8001f1e:	f8b9 2000 	ldrh.w	r2, [r9]
 8001f22:	f8a3 292c 	strh.w	r2, [r3, #2348]	; 0x92c
				BSbuffer[s_flag].Enc2[Sub_cnt]=Enc_raw;
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	4a66      	ldr	r2, [pc, #408]	; (80020c4 <LPTIM2_IRQHandler+0x2dc>)
 8001f2a:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 8001f2e:	f603 1324 	addw	r3, r3, #2340	; 0x924
 8001f32:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8001f36:	8812      	ldrh	r2, [r2, #0]
 8001f38:	80da      	strh	r2, [r3, #6]
				BSbuffer[s_flag].angular_velocity_100[Sub_cnt]=angular_velocity*100;
 8001f3a:	f895 9000 	ldrb.w	r9, [r5]
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	2200      	movs	r2, #0
 8001f42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f46:	eb03 3949 	add.w	r9, r3, r9, lsl #13
 8001f4a:	4b5f      	ldr	r3, [pc, #380]	; (80020c8 <LPTIM2_IRQHandler+0x2e0>)
 8001f4c:	f7fe fb60 	bl	8000610 <__aeabi_dmul>
 8001f50:	f7fe fdf8 	bl	8000b44 <__aeabi_d2iz>
				BSbuffer[s_flag].st_100[Sub_cnt]=my_st_impedance.st*100;
 8001f54:	7829      	ldrb	r1, [r5, #0]
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	f8d8 2000 	ldr.w	r2, [r8]
				BSbuffer[s_flag].torque_desired_100[Sub_cnt]= my_st_impedance.impedance*100;
 8001f5c:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80020cc <LPTIM2_IRQHandler+0x2e4>
				BSbuffer[s_flag].st_100[Sub_cnt]=my_st_impedance.st*100;
 8001f60:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 8001f64:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 8001f68:	3308      	adds	r3, #8
 8001f6a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001f6e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8001f72:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001f76:	0092      	lsls	r2, r2, #2
 8001f78:	805a      	strh	r2, [r3, #2]
				BSbuffer[s_flag].torque_desired_100[Sub_cnt]= my_st_impedance.impedance*100;
 8001f7a:	782a      	ldrb	r2, [r5, #0]
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	edd8 7a01 	vldr	s15, [r8, #4]
 8001f82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f86:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8001f8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f8e:	f503 53b6 	add.w	r3, r3, #5824	; 0x16c0
 8001f92:	3318      	adds	r3, #24
 8001f94:	ee17 2a90 	vmov	r2, s15
 8001f98:	eb06 0343 	add.w	r3, r6, r3, lsl #1
				BSbuffer[s_flag].angular_velocity_100[Sub_cnt]=angular_velocity*100;
 8001f9c:	f609 59b8 	addw	r9, r9, #3512	; 0xdb8
				BSbuffer[s_flag].torque_desired_100[Sub_cnt]= my_st_impedance.impedance*100;
 8001fa0:	809a      	strh	r2, [r3, #4]
				BSbuffer[s_flag].pwm_percent_100[Sub_cnt]=my_st_impedance.pwm_percent*100;
 8001fa2:	782a      	ldrb	r2, [r5, #0]
 8001fa4:	6823      	ldr	r3, [r4, #0]
				BSbuffer[s_flag].angular_velocity_100[Sub_cnt]=angular_velocity*100;
 8001fa6:	f826 0019 	strh.w	r0, [r6, r9, lsl #1]
				BSbuffer[s_flag].pwm_percent_100[Sub_cnt]=my_st_impedance.pwm_percent*100;
 8001faa:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8001fae:	f503 53db 	add.w	r3, r3, #7008	; 0x1b60
 8001fb2:	3308      	adds	r3, #8
 8001fb4:	eb06 0743 	add.w	r7, r6, r3, lsl #1
 8001fb8:	2200      	movs	r2, #0
 8001fba:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <LPTIM2_IRQHandler+0x2e0>)
 8001fbc:	e9d8 0104 	ldrd	r0, r1, [r8, #16]
 8001fc0:	f7fe fb26 	bl	8000610 <__aeabi_dmul>
 8001fc4:	f7fe fdbe 	bl	8000b44 <__aeabi_d2iz>
				if (Sub_cnt == 5)
 8001fc8:	6823      	ldr	r3, [r4, #0]
				BSbuffer[s_flag].pwm_percent_100[Sub_cnt]=my_st_impedance.pwm_percent*100;
 8001fca:	80f8      	strh	r0, [r7, #6]
				if (Sub_cnt == 5)
 8001fcc:	2b05      	cmp	r3, #5
 8001fce:	d116      	bne.n	8001ffe <LPTIM2_IRQHandler+0x216>
					BSbuffer[s_flag].RTC_Time = (uint32_t)(RTC->TR & 0x007F7F7F);
 8001fd0:	493f      	ldr	r1, [pc, #252]	; (80020d0 <LPTIM2_IRQHandler+0x2e8>)
 8001fd2:	782a      	ldrb	r2, [r5, #0]
 8001fd4:	680b      	ldr	r3, [r1, #0]
 8001fd6:	eb06 3282 	add.w	r2, r6, r2, lsl #14
 8001fda:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001fde:	f643 70f8 	movw	r0, #16376	; 0x3ff8
 8001fe2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001fe6:	5013      	str	r3, [r2, r0]
					BSbuffer[s_flag].RTC_Date= (uint32_t)(RTC->DR & 0x00FFFF3F);
 8001fe8:	782a      	ldrb	r2, [r5, #0]
 8001fea:	684b      	ldr	r3, [r1, #4]
 8001fec:	eb06 3682 	add.w	r6, r6, r2, lsl #14
 8001ff0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ff4:	f643 72fc 	movw	r2, #16380	; 0x3ffc
 8001ff8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001ffc:	50b3      	str	r3, [r6, r2]
				if(Sub_cnt==Highest_sensor_count)   // Total samples to be stored in a 16KB buffer
 8001ffe:	6823      	ldr	r3, [r4, #0]
 8002000:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8002004:	d13e      	bne.n	8002084 <LPTIM2_IRQHandler+0x29c>
								SD_write_Flag = 1;   // Flag set to write filled buffer content
 8002006:	4933      	ldr	r1, [pc, #204]	; (80020d4 <LPTIM2_IRQHandler+0x2ec>)
								Sub_cnt=0;           // Reset Counter of sensor element
 8002008:	2200      	movs	r2, #0
								SD_write_Flag = 1;   // Flag set to write filled buffer content
 800200a:	2301      	movs	r3, #1
								Sub_cnt=0;           // Reset Counter of sensor element
 800200c:	6022      	str	r2, [r4, #0]
								SD_write_Flag = 1;   // Flag set to write filled buffer content
 800200e:	700b      	strb	r3, [r1, #0]
								if (s_flag==0)       // if current storgae_buffer was 0
 8002010:	7828      	ldrb	r0, [r5, #0]
 8002012:	4931      	ldr	r1, [pc, #196]	; (80020d8 <LPTIM2_IRQHandler+0x2f0>)
 8002014:	f000 04ff 	and.w	r4, r0, #255	; 0xff
 8002018:	bb88      	cbnz	r0, 800207e <LPTIM2_IRQHandler+0x296>
									w_flag=0;            // write_buffer to be saved in SD card = 0
 800201a:	700c      	strb	r4, [r1, #0]
									s_flag=1;            // current storgae_buffer is set 1
 800201c:	702b      	strb	r3, [r5, #0]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 800201e:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <LPTIM2_IRQHandler+0x2b0>)
 8002020:	6853      	ldr	r3, [r2, #4]
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	6053      	str	r3, [r2, #4]
}
 8002028:	b00a      	add	sp, #40	; 0x28
 800202a:	ecbd 8b04 	vpop	{d8-d9}
 800202e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			         my_st_impedance = controller_impedance(angle,angular_velocity,Test2_mV,Test1_mV);
 8002032:	f8ba 3000 	ldrh.w	r3, [sl]
 8002036:	ed94 9a00 	vldr	s18, [r4]
 800203a:	ee08 3a90 	vmov	s17, r3
 800203e:	f8b9 3000 	ldrh.w	r3, [r9]
 8002042:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002046:	ee08 3a10 	vmov	s16, r3
 800204a:	f7fe fdc3 	bl	8000bd4 <__aeabi_d2f>
 800204e:	eef8 8a68 	vcvt.f32.u32	s17, s17
 8002052:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8002056:	ee00 0a90 	vmov	s1, r0
 800205a:	eef0 1a68 	vmov.f32	s3, s17
 800205e:	a804      	add	r0, sp, #16
 8002060:	eeb0 1a48 	vmov.f32	s2, s16
 8002064:	eeb0 0a49 	vmov.f32	s0, s18
 8002068:	ac04      	add	r4, sp, #16
 800206a:	f7ff f96d 	bl	8001348 <controller_impedance>
 800206e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002070:	4645      	mov	r5, r8
 8002072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002074:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002078:	e885 0003 	stmia.w	r5, {r0, r1}
 800207c:	e73c      	b.n	8001ef8 <LPTIM2_IRQHandler+0x110>
									w_flag=1;           // write_buffer to be saved in SD card = 1
 800207e:	700b      	strb	r3, [r1, #0]
									s_flag=0;           // current storgae_buffer is set 0
 8002080:	702a      	strb	r2, [r5, #0]
 8002082:	e7cc      	b.n	800201e <LPTIM2_IRQHandler+0x236>
								Sub_cnt++;              // Increment Counter of sensor element
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	3301      	adds	r3, #1
 8002088:	6023      	str	r3, [r4, #0]
 800208a:	e7c8      	b.n	800201e <LPTIM2_IRQHandler+0x236>
 800208c:	f3af 8000 	nop.w
 8002090:	020c49ba 	.word	0x020c49ba
 8002094:	3fb6872b 	.word	0x3fb6872b
 8002098:	40009400 	.word	0x40009400
 800209c:	406b8000 	.word	0x406b8000
 80020a0:	20000618 	.word	0x20000618
 80020a4:	2000061c 	.word	0x2000061c
 80020a8:	20000028 	.word	0x20000028
 80020ac:	20000020 	.word	0x20000020
 80020b0:	20000620 	.word	0x20000620
 80020b4:	c20c0000 	.word	0xc20c0000
 80020b8:	20000610 	.word	0x20000610
 80020bc:	20000630 	.word	0x20000630
 80020c0:	2000069c 	.word	0x2000069c
 80020c4:	200089e2 	.word	0x200089e2
 80020c8:	40590000 	.word	0x40590000
 80020cc:	42c80000 	.word	0x42c80000
 80020d0:	40002800 	.word	0x40002800
 80020d4:	2000877c 	.word	0x2000877c
 80020d8:	20000030 	.word	0x20000030
 80020dc:	20000628 	.word	0x20000628
 80020e0:	20008a12 	.word	0x20008a12
 80020e4:	20008738 	.word	0x20008738
 80020e8:	20008ab0 	.word	0x20008ab0

080020ec <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80020ec:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80020f0:	4905      	ldr	r1, [pc, #20]	; (8002108 <NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80020f4:	68ca      	ldr	r2, [r1, #12]
 80020f6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60cb      	str	r3, [r1, #12]
 80020fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8002102:	bf00      	nop
 8002104:	e7fd      	b.n	8002102 <NVIC_SystemReset+0x16>
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00
 800210c:	05fa0004 	.word	0x05fa0004

08002110 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <LL_AHB2_GRP1_EnableClock+0x18>)
 8002112:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002114:	4302      	orrs	r2, r0
 8002116:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 800211a:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800211c:	4018      	ands	r0, r3
 800211e:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8002120:	9b01      	ldr	r3, [sp, #4]
}
 8002122:	b002      	add	sp, #8
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000

0800212c <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <LL_APB2_GRP1_EnableClock+0x18>)
 800212e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002130:	4302      	orrs	r2, r0
 8002132:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 8002136:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002138:	4018      	ands	r0, r3
 800213a:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800213c:	9b01      	ldr	r3, [sp, #4]
}
 800213e:	b002      	add	sp, #8
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000

08002148 <LL_GPIO_SetPinMode>:
{
 8002148:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800214a:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	fa91 f4a1 	rbit	r4, r1
 8002150:	fab4 f484 	clz	r4, r4
 8002154:	fa91 f1a1 	rbit	r1, r1
 8002158:	2503      	movs	r5, #3
 800215a:	fab1 f181 	clz	r1, r1
 800215e:	0064      	lsls	r4, r4, #1
 8002160:	fa05 f404 	lsl.w	r4, r5, r4
 8002164:	0049      	lsls	r1, r1, #1
 8002166:	ea23 0304 	bic.w	r3, r3, r4
 800216a:	fa02 f101 	lsl.w	r1, r2, r1
 800216e:	4319      	orrs	r1, r3
 8002170:	6001      	str	r1, [r0, #0]
 8002172:	bd30      	pop	{r4, r5, pc}

08002174 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002174:	b530      	push	{r4, r5, lr}
 8002176:	f44f 7340 	mov.w	r3, #768	; 0x300
 800217a:	fa93 f3a3 	rbit	r3, r3
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	f401 7440 	and.w	r4, r1, #768	; 0x300
 8002186:	40dc      	lsrs	r4, r3
 8002188:	3030      	adds	r0, #48	; 0x30
  
  MODIFY_REG(*preg,
 800218a:	f001 011f 	and.w	r1, r1, #31
 800218e:	231f      	movs	r3, #31
 8002190:	fa03 f501 	lsl.w	r5, r3, r1
 8002194:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8002198:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800219c:	f1c1 011a 	rsb	r1, r1, #26
 80021a0:	ea23 0305 	bic.w	r3, r3, r5
 80021a4:	fa22 f101 	lsr.w	r1, r2, r1
 80021a8:	4319      	orrs	r1, r3
 80021aa:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 80021ae:	bd30      	pop	{r4, r5, pc}

080021b0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021b0:	b570      	push	{r4, r5, r6, lr}
 80021b2:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80021b6:	fa96 f6a6 	rbit	r6, r6
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80021ba:	fab6 f386 	clz	r3, r6
 80021be:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 80021c2:	40de      	lsrs	r6, r3
 80021c4:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 80021c6:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 80021ca:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 80021ce:	fa93 f5a3 	rbit	r5, r3
 80021d2:	fab5 f585 	clz	r5, r5
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	2407      	movs	r4, #7
 80021dc:	fa21 f505 	lsr.w	r5, r1, r5
 80021e0:	fa04 f505 	lsl.w	r5, r4, r5
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 80021ec:	40d9      	lsrs	r1, r3
 80021ee:	ea24 0405 	bic.w	r4, r4, r5
 80021f2:	fa02 f101 	lsl.w	r1, r2, r1
 80021f6:	4321      	orrs	r1, r4
 80021f8:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 80021fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002200 <LL_RTC_DATE_GetDay.constprop.8>:
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetDay(RTC_TypeDef *RTCx)
{
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 8002200:	4b0a      	ldr	r3, [pc, #40]	; (800222c <LL_RTC_DATE_GetDay.constprop.8+0x2c>)
 8002202:	2030      	movs	r0, #48	; 0x30
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	fa90 f0a0 	rbit	r0, r0
 800220a:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 800220c:	fab0 f080 	clz	r0, r0
 8002210:	fa92 f2a2 	rbit	r2, r2
 8002214:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8002218:	fab2 f282 	clz	r2, r2
 800221c:	f003 030f 	and.w	r3, r3, #15
 8002220:	fa21 f000 	lsr.w	r0, r1, r0
 8002224:	40d3      	lsrs	r3, r2
}
 8002226:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800222a:	4770      	bx	lr
 800222c:	40002800 	.word	0x40002800

08002230 <LL_RTC_DATE_GetMonth.constprop.9>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <LL_RTC_DATE_GetMonth.constprop.9+0x30>)
 8002232:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	fa90 f0a0 	rbit	r0, r0
 800223c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 8002240:	fab0 f080 	clz	r0, r0
 8002244:	fa92 f2a2 	rbit	r2, r2
 8002248:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 800224c:	fab2 f282 	clz	r2, r2
 8002250:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002254:	fa21 f000 	lsr.w	r0, r1, r0
 8002258:	40d3      	lsrs	r3, r2
}
 800225a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800225e:	4770      	bx	lr
 8002260:	40002800 	.word	0x40002800

08002264 <LL_RTC_DATE_GetYear.constprop.10>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <LL_RTC_DATE_GetYear.constprop.10+0x30>)
 8002266:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	fa90 f0a0 	rbit	r0, r0
 8002270:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 8002274:	fab0 f080 	clz	r0, r0
 8002278:	fa92 f2a2 	rbit	r2, r2
 800227c:	f403 0170 	and.w	r1, r3, #15728640	; 0xf00000
 8002280:	fab2 f282 	clz	r2, r2
 8002284:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002288:	fa21 f000 	lsr.w	r0, r1, r0
 800228c:	40d3      	lsrs	r3, r2
}
 800228e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8002292:	4770      	bx	lr
 8002294:	40002800 	.word	0x40002800

08002298 <LL_RTC_TIME_GetSecond.constprop.11>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 8002298:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <LL_RTC_TIME_GetSecond.constprop.11+0x2c>)
 800229a:	2070      	movs	r0, #112	; 0x70
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	fa90 f0a0 	rbit	r0, r0
 80022a2:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 80022a4:	fab0 f080 	clz	r0, r0
 80022a8:	fa92 f2a2 	rbit	r2, r2
 80022ac:	f003 0170 	and.w	r1, r3, #112	; 0x70
 80022b0:	fab2 f282 	clz	r2, r2
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	fa21 f000 	lsr.w	r0, r1, r0
 80022bc:	40d3      	lsrs	r3, r2
}
 80022be:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 80022c2:	4770      	bx	lr
 80022c4:	40002800 	.word	0x40002800

080022c8 <LL_RTC_TIME_GetMinute.constprop.12>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <LL_RTC_TIME_GetMinute.constprop.12+0x30>)
 80022ca:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	fa90 f0a0 	rbit	r0, r0
 80022d4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 80022d8:	fab0 f080 	clz	r0, r0
 80022dc:	fa92 f2a2 	rbit	r2, r2
 80022e0:	f403 41e0 	and.w	r1, r3, #28672	; 0x7000
 80022e4:	fab2 f282 	clz	r2, r2
 80022e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80022ec:	fa21 f000 	lsr.w	r0, r1, r0
 80022f0:	40d3      	lsrs	r3, r2
}
 80022f2:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 80022f6:	4770      	bx	lr
 80022f8:	40002800 	.word	0x40002800

080022fc <LL_RTC_TIME_GetHour.constprop.13>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <LL_RTC_TIME_GetHour.constprop.13+0x30>)
 80022fe:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	fa90 f0a0 	rbit	r0, r0
 8002308:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 800230c:	fab0 f080 	clz	r0, r0
 8002310:	fa92 f2a2 	rbit	r2, r2
 8002314:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
 8002318:	fab2 f282 	clz	r2, r2
 800231c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002320:	fa21 f000 	lsr.w	r0, r1, r0
 8002324:	40d3      	lsrs	r3, r2
}
 8002326:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800232a:	4770      	bx	lr
 800232c:	40002800 	.word	0x40002800

08002330 <Configure_Interrupt>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002330:	4a0a      	ldr	r2, [pc, #40]	; (800235c <Configure_Interrupt+0x2c>)
 8002332:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002334:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002338:	041b      	lsls	r3, r3, #16
 800233a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
 800233c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002344:	60d3      	str	r3, [r2, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <Configure_Interrupt+0x30>)
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
 800234e:	2220      	movs	r2, #32
 8002350:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
 8002354:	2210      	movs	r2, #16
 8002356:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00
 8002360:	e000e100 	.word	0xe000e100

08002364 <Shut_Down_USB>:
  * @rmtoll CR2          USV           LL_PWR_DisableVddUSB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableVddUSB(void)
{
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 8002364:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <Shut_Down_USB+0x2c>)
 8002366:	6853      	ldr	r3, [r2, #4]
		f_mount(0, "", 0); 		                //  unmount FATFS file (of running sensor storage file)
		FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
}

void Shut_Down_USB(void)
{
 8002368:	b510      	push	{r4, lr}
 800236a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

	LL_PWR_DisableVddUSB();                               // Disable VDDUSB supply for USB
	USB_Present_=0;                                      // reset the USB present flag to be set by EXTI interrupt

	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 800236e:	4c09      	ldr	r4, [pc, #36]	; (8002394 <Shut_Down_USB+0x30>)
 8002370:	6053      	str	r3, [r2, #4]
	USB_Present_=0;                                      // reset the USB present flag to be set by EXTI interrupt
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <Shut_Down_USB+0x34>)
 8002374:	2200      	movs	r2, #0
	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 8002376:	4620      	mov	r0, r4
	USB_Present_=0;                                      // reset the USB present flag to be set by EXTI interrupt
 8002378:	701a      	strb	r2, [r3, #0]
	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 800237a:	f006 fc2e 	bl	8008bda <USBD_Stop>
	USBD_DeInit(&USBD_Device);               // De-Initialize the device library
 800237e:	4620      	mov	r0, r4
 8002380:	f006 fc0d 	bl	8008b9e <USBD_DeInit>
	__HAL_RCC_USB_OTG_FS_CLK_DISABLE();      // Disable USB Clock
 8002384:	4a05      	ldr	r2, [pc, #20]	; (800239c <Shut_Down_USB+0x38>)
 8002386:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002388:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800238c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800238e:	bd10      	pop	{r4, pc}
 8002390:	40007000 	.word	0x40007000
 8002394:	20008794 	.word	0x20008794
 8002398:	20000614 	.word	0x20000614
 800239c:	40021000 	.word	0x40021000

080023a0 <USB_Clock_Ready>:
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80023a0:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <USB_Clock_Ready+0x2c>)
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
}


void USB_Clock_Ready(void)
{
 80023a8:	b082      	sub	sp, #8
 80023aa:	605a      	str	r2, [r3, #4]
  * @rmtoll CR2          USV           LL_PWR_IsEnabledVddUSB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledVddUSB(void)
{
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 80023ac:	685a      	ldr	r2, [r3, #4]
	LL_PWR_EnableVddUSB();                                  // Enable VDDUSB supply for USB
		while(!LL_PWR_IsEnabledVddUSB());                       // Wait for VDDUSB supply to activate
 80023ae:	0552      	lsls	r2, r2, #21
 80023b0:	d5fc      	bpl.n	80023ac <USB_Clock_Ready+0xc>
		__HAL_RCC_USB_OTG_FS_CLK_ENABLE();     // Enable USB Clock
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <USB_Clock_Ready+0x30>)
 80023b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80023bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	9b01      	ldr	r3, [sp, #4]
}
 80023c6:	b002      	add	sp, #8
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40007000 	.word	0x40007000
 80023d0:	40021000 	.word	0x40021000

080023d4 <DFU_Bypass>:
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80023d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
void DFU_Bypass(void)
{

	uint32_t i=0;

    check=LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY);
 80023d8:	4810      	ldr	r0, [pc, #64]	; (800241c <DFU_Bypass+0x48>)
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	f402 7100 	and.w	r1, r2, #512	; 0x200
 80023e0:	f3c2 2240 	ubfx	r2, r2, #9, #1
{
 80023e4:	b570      	push	{r4, r5, r6, lr}
    check=LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY);
 80023e6:	6002      	str	r2, [r0, #0]
 80023e8:	691a      	ldr	r2, [r3, #16]
   // if(check == 1)
    //	 CYAN_LED_ONLY();
    while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));  // Wait until USB cable disconnect from Charger
 80023ea:	0592      	lsls	r2, r2, #22
 80023ec:	d4fc      	bmi.n	80023e8 <DFU_Bypass+0x14>
	  if (*LP_Ram_Key_Address != Reset_Key_Value)
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <DFU_Bypass+0x4c>)
 80023f0:	4c0c      	ldr	r4, [pc, #48]	; (8002424 <DFU_Bypass+0x50>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	42a2      	cmp	r2, r4
 80023f6:	d010      	beq.n	800241a <DFU_Bypass+0x46>
	  {
	      *LP_Ram_Key_Address = Reset_Key_Value;
 80023f8:	601c      	str	r4, [r3, #0]
    if(check == 1)
 80023fa:	b171      	cbz	r1, 800241a <DFU_Bypass+0x46>
 80023fc:	2505      	movs	r5, #5
 80023fe:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
    {
	  /* Toggle IO in during 2s (10*200ms) */
	  for(i =0; i<5; i++)
	  {
	 //   LL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
	    LL_mDelay(200);
 8002402:	20c8      	movs	r0, #200	; 0xc8
 8002404:	f005 ff2a 	bl	800825c <LL_mDelay>
 8002408:	6933      	ldr	r3, [r6, #16]
	    if (LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY))
 800240a:	059b      	lsls	r3, r3, #22
 800240c:	d503      	bpl.n	8002416 <DFU_Bypass+0x42>
	    {
	    	 *Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <DFU_Bypass+0x54>)
 8002410:	601c      	str	r4, [r3, #0]
	    	  NVIC_SystemReset();        // System reset
 8002412:	f7ff fe6b 	bl	80020ec <NVIC_SystemReset>
	  for(i =0; i<5; i++)
 8002416:	3d01      	subs	r5, #1
 8002418:	d1f3      	bne.n	8002402 <DFU_Bypass+0x2e>
 800241a:	bd70      	pop	{r4, r5, r6, pc}
 800241c:	20008ae4 	.word	0x20008ae4
 8002420:	20017cf0 	.word	0x20017cf0
 8002424:	deadbeef 	.word	0xdeadbeef
 8002428:	20017ff0 	.word	0x20017ff0

0800242c <Try_FATFS_Mount>:
	return 0;
}

void Try_FATFS_Mount(void)
{
	  if (Fat_mnt_fail == 1)
 800242c:	4b10      	ldr	r3, [pc, #64]	; (8002470 <Try_FATFS_Mount+0x44>)
{
 800242e:	b510      	push	{r4, lr}
	  if (Fat_mnt_fail == 1)
 8002430:	681c      	ldr	r4, [r3, #0]
 8002432:	2c01      	cmp	r4, #1
 8002434:	d11a      	bne.n	800246c <Try_FATFS_Mount+0x40>
	  {
		  Fat_mnt_fail=0;
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
		  SD_POWER_OFF();
 800243a:	f7ff fa97 	bl	800196c <SD_POWER_OFF>
		  delay_us(10000); // wait 10 msec
 800243e:	f242 7010 	movw	r0, #10000	; 0x2710
 8002442:	f001 f99f 	bl	8003784 <delay_us>
		  SD_POWER_ON();
 8002446:	f7ff fa83 	bl	8001950 <SD_POWER_ON>
		  delay_us(1000000); // wait 1 sec
 800244a:	480a      	ldr	r0, [pc, #40]	; (8002474 <Try_FATFS_Mount+0x48>)
 800244c:	f001 f99a 	bl	8003784 <delay_us>
		  //Retry FATFS link

		  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8002450:	4909      	ldr	r1, [pc, #36]	; (8002478 <Try_FATFS_Mount+0x4c>)
 8002452:	480a      	ldr	r0, [pc, #40]	; (800247c <Try_FATFS_Mount+0x50>)
 8002454:	f008 fa9a 	bl	800a98c <FATFS_LinkDriver>
 8002458:	b928      	cbnz	r0, 8002466 <Try_FATFS_Mount+0x3a>
		 		{
		 			 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 800245a:	4622      	mov	r2, r4
 800245c:	4906      	ldr	r1, [pc, #24]	; (8002478 <Try_FATFS_Mount+0x4c>)
 800245e:	4808      	ldr	r0, [pc, #32]	; (8002480 <Try_FATFS_Mount+0x54>)
 8002460:	f007 fe3a 	bl	800a0d8 <f_mount>
 8002464:	b110      	cbz	r0, 800246c <Try_FATFS_Mount+0x40>
		 			 {
		 				Skip_FATFS=1;
 8002466:	4b07      	ldr	r3, [pc, #28]	; (8002484 <Try_FATFS_Mount+0x58>)
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
 800246c:	bd10      	pop	{r4, pc}
 800246e:	bf00      	nop
 8002470:	20008a04 	.word	0x20008a04
 8002474:	000f4240 	.word	0x000f4240
 8002478:	20008af4 	.word	0x20008af4
 800247c:	0800c97c 	.word	0x0800c97c
 8002480:	20008b00 	.word	0x20008b00
 8002484:	20008d59 	.word	0x20008d59

08002488 <file_reopen_sync>:
	  }

}

void file_reopen_sync(void)
{
 8002488:	b508      	push	{r3, lr}
	f_close(&MyFile);
 800248a:	4807      	ldr	r0, [pc, #28]	; (80024a8 <file_reopen_sync+0x20>)
 800248c:	f008 f881 	bl	800a592 <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8002490:	2212      	movs	r2, #18
 8002492:	4906      	ldr	r1, [pc, #24]	; (80024ac <file_reopen_sync+0x24>)
 8002494:	4804      	ldr	r0, [pc, #16]	; (80024a8 <file_reopen_sync+0x20>)
 8002496:	f007 fe55 	bl	800a144 <f_open>
	if(res != FR_OK)
 800249a:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <file_reopen_sync+0x28>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	b113      	cbz	r3, 80024a6 <file_reopen_sync+0x1e>
						{
							Fat_sync_read_fail=1;
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <file_reopen_sync+0x2c>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	bd08      	pop	{r3, pc}
 80024a8:	20008d64 	.word	0x20008d64
 80024ac:	20008a4c 	.word	0x20008a4c
 80024b0:	20008fe6 	.word	0x20008fe6
 80024b4:	20008a0c 	.word	0x20008a0c

080024b8 <file_reopen>:
						}
}

void file_reopen(void)
{
 80024b8:	b508      	push	{r3, lr}
	f_close(&MyFile);
 80024ba:	4807      	ldr	r0, [pc, #28]	; (80024d8 <file_reopen+0x20>)
 80024bc:	f008 f869 	bl	800a592 <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 80024c0:	2212      	movs	r2, #18
 80024c2:	4906      	ldr	r1, [pc, #24]	; (80024dc <file_reopen+0x24>)
 80024c4:	4804      	ldr	r0, [pc, #16]	; (80024d8 <file_reopen+0x20>)
 80024c6:	f007 fe3d 	bl	800a144 <f_open>
	if(res != FR_OK)
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <file_reopen+0x28>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b113      	cbz	r3, 80024d6 <file_reopen+0x1e>
						{
							Fat_write_read_fail=1;
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <file_reopen+0x2c>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	bd08      	pop	{r3, pc}
 80024d8:	20008d64 	.word	0x20008d64
 80024dc:	20008a4c 	.word	0x20008a4c
 80024e0:	20008fe6 	.word	0x20008fe6
 80024e4:	20008a08 	.word	0x20008a08

080024e8 <file_mnt_reopen>:
						}
}

void file_mnt_reopen(void)
{
 80024e8:	b508      	push	{r3, lr}
	  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 80024ea:	490c      	ldr	r1, [pc, #48]	; (800251c <file_mnt_reopen+0x34>)
 80024ec:	480c      	ldr	r0, [pc, #48]	; (8002520 <file_mnt_reopen+0x38>)
 80024ee:	f008 fa4d 	bl	800a98c <FATFS_LinkDriver>
 80024f2:	b928      	cbnz	r0, 8002500 <file_mnt_reopen+0x18>
		{
			 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 80024f4:	2201      	movs	r2, #1
 80024f6:	4909      	ldr	r1, [pc, #36]	; (800251c <file_mnt_reopen+0x34>)
 80024f8:	480a      	ldr	r0, [pc, #40]	; (8002524 <file_mnt_reopen+0x3c>)
 80024fa:	f007 fded 	bl	800a0d8 <f_mount>
 80024fe:	b118      	cbz	r0, 8002508 <file_mnt_reopen+0x20>
			 {
				 Fat_read_mnt_fail=1;
 8002500:	4b09      	ldr	r3, [pc, #36]	; (8002528 <file_mnt_reopen+0x40>)
 8002502:	2201      	movs	r2, #1
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	bd08      	pop	{r3, pc}
			 }
			 else  // Good to Go
			 {
				 res= f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8002508:	2212      	movs	r2, #18
 800250a:	4908      	ldr	r1, [pc, #32]	; (800252c <file_mnt_reopen+0x44>)
 800250c:	4808      	ldr	r0, [pc, #32]	; (8002530 <file_mnt_reopen+0x48>)
 800250e:	f007 fe19 	bl	800a144 <f_open>
 8002512:	4b08      	ldr	r3, [pc, #32]	; (8002534 <file_mnt_reopen+0x4c>)
 8002514:	7018      	strb	r0, [r3, #0]
					if(res != FR_OK)
 8002516:	2800      	cmp	r0, #0
 8002518:	d1f2      	bne.n	8002500 <file_mnt_reopen+0x18>
 800251a:	bd08      	pop	{r3, pc}
 800251c:	20008af4 	.word	0x20008af4
 8002520:	0800c97c 	.word	0x0800c97c
 8002524:	20008b00 	.word	0x20008b00
 8002528:	20008aac 	.word	0x20008aac
 800252c:	20008a4c 	.word	0x20008a4c
 8002530:	20008d64 	.word	0x20008d64
 8002534:	20008fe6 	.word	0x20008fe6

08002538 <FATFS_Logstart_Ready>:
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
}

void FATFS_Logstart_Ready(void)
{
 8002538:	b508      	push	{r3, lr}

  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 800253a:	4910      	ldr	r1, [pc, #64]	; (800257c <FATFS_Logstart_Ready+0x44>)
 800253c:	4810      	ldr	r0, [pc, #64]	; (8002580 <FATFS_Logstart_Ready+0x48>)
 800253e:	f008 fa25 	bl	800a98c <FATFS_LinkDriver>
 8002542:	b988      	cbnz	r0, 8002568 <FATFS_Logstart_Ready+0x30>
	{
		 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 8002544:	2201      	movs	r2, #1
 8002546:	490d      	ldr	r1, [pc, #52]	; (800257c <FATFS_Logstart_Ready+0x44>)
 8002548:	480e      	ldr	r0, [pc, #56]	; (8002584 <FATFS_Logstart_Ready+0x4c>)
 800254a:	f007 fdc5 	bl	800a0d8 <f_mount>
 800254e:	b940      	cbnz	r0, 8002562 <FATFS_Logstart_Ready+0x2a>

		 }

    	 else
			 {
			 if(f_open(&MyFile, "LogStart.txt", FA_OPEN_ALWAYS | FA_WRITE) != FR_OK) // Create and Open a new text file object with write access
 8002550:	2212      	movs	r2, #18
 8002552:	490d      	ldr	r1, [pc, #52]	; (8002588 <FATFS_Logstart_Ready+0x50>)
 8002554:	480d      	ldr	r0, [pc, #52]	; (800258c <FATFS_Logstart_Ready+0x54>)
 8002556:	f007 fdf5 	bl	800a144 <f_open>
 800255a:	b910      	cbnz	r0, 8002562 <FATFS_Logstart_Ready+0x2a>

				 }
				 else
				 {

					f_close(&MyFile);
 800255c:	480b      	ldr	r0, [pc, #44]	; (800258c <FATFS_Logstart_Ready+0x54>)
 800255e:	f008 f818 	bl	800a592 <f_close>
				 }
			 }
		 delay_us(100);
 8002562:	2064      	movs	r0, #100	; 0x64
 8002564:	f001 f90e 	bl	8003784 <delay_us>
			 }
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 8002568:	2200      	movs	r2, #0
 800256a:	4909      	ldr	r1, [pc, #36]	; (8002590 <FATFS_Logstart_Ready+0x58>)
 800256c:	4610      	mov	r0, r2
 800256e:	f007 fdb3 	bl	800a0d8 <f_mount>
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 8002572:	4802      	ldr	r0, [pc, #8]	; (800257c <FATFS_Logstart_Ready+0x44>)
}
 8002574:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 8002578:	f008 ba24 	b.w	800a9c4 <FATFS_UnLinkDriver>
 800257c:	20008af4 	.word	0x20008af4
 8002580:	0800c97c 	.word	0x0800c97c
 8002584:	20008b00 	.word	0x20008b00
 8002588:	0800c704 	.word	0x0800c704
 800258c:	20008d64 	.word	0x20008d64
 8002590:	0800c89f 	.word	0x0800c89f

08002594 <SD_Sensor_write>:
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 8002594:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
	f_utime(FILE_NAME_STRING, &fno);                        // Update RTC time on FATFS file header
}


void SD_Sensor_write(void)                                  // Storing Sensor Buffer values on FATFS file
{
 8002598:	b570      	push	{r4, r5, r6, lr}
 800259a:	6953      	ldr	r3, [r2, #20]
#ifdef Bottle_Device
  //ALL_LED_OFF();
#else
#endif
	  LL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	 res= f_write(&MyFile, &BSbuffer[w_flag], (8192*2), &BytesWritten2);
 800259c:	4911      	ldr	r1, [pc, #68]	; (80025e4 <SD_Sensor_write+0x50>)
 800259e:	4e12      	ldr	r6, [pc, #72]	; (80025e8 <SD_Sensor_write+0x54>)
 80025a0:	f083 0320 	eor.w	r3, r3, #32
 80025a4:	6153      	str	r3, [r2, #20]
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <SD_Sensor_write+0x58>)
 80025a8:	7818      	ldrb	r0, [r3, #0]
 80025aa:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <SD_Sensor_write+0x5c>)
 80025ac:	eb01 3180 	add.w	r1, r1, r0, lsl #14
 80025b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025b4:	480f      	ldr	r0, [pc, #60]	; (80025f4 <SD_Sensor_write+0x60>)
 80025b6:	f007 fe9d 	bl	800a2f4 <f_write>
	 }
#ifdef Bottle_Device
	 f_sync(&MyFile);
#else

	 if (File_Sensor_write_issue==0)
 80025ba:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <SD_Sensor_write+0x64>)
	 res= f_write(&MyFile, &BSbuffer[w_flag], (8192*2), &BytesWritten2);
 80025bc:	7030      	strb	r0, [r6, #0]
	 if (File_Sensor_write_issue==0)
 80025be:	781d      	ldrb	r5, [r3, #0]
 80025c0:	b97d      	cbnz	r5, 80025e2 <SD_Sensor_write+0x4e>
	 {

	 if(SD_Write_Count ==SD_cnt_limit)                                          // After 50 SD card write, File Sync (176 write*20.45 sec = 60 minute
 80025c2:	4c0e      	ldr	r4, [pc, #56]	; (80025fc <SD_Sensor_write+0x68>)
 80025c4:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <SD_Sensor_write+0x6c>)
 80025c6:	7822      	ldrb	r2, [r4, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d105      	bne.n	80025da <SD_Sensor_write+0x46>
			{
		 res= f_sync(&MyFile);
 80025ce:	4809      	ldr	r0, [pc, #36]	; (80025f4 <SD_Sensor_write+0x60>)
 80025d0:	f007 ff7f 	bl	800a4d2 <f_sync>
		 if(res != FR_OK)
		 {
	//		 AIM_Error_Handler(f_sync_E);
		 }
				                                        // Sync file without closing
				SD_Write_Count = 0;                                        // Reset SD write counters
 80025d4:	7025      	strb	r5, [r4, #0]
		 res= f_sync(&MyFile);
 80025d6:	7030      	strb	r0, [r6, #0]
 80025d8:	bd70      	pop	{r4, r5, r6, pc}
		    }
			else
			{
				SD_Write_Count++;                                          // Increment SD write counter
 80025da:	7823      	ldrb	r3, [r4, #0]
 80025dc:	3301      	adds	r3, #1
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	7023      	strb	r3, [r4, #0]
 80025e2:	bd70      	pop	{r4, r5, r6, pc}
 80025e4:	2000069c 	.word	0x2000069c
 80025e8:	20008fe6 	.word	0x20008fe6
 80025ec:	20000030 	.word	0x20000030
 80025f0:	20008a60 	.word	0x20008a60
 80025f4:	20008d64 	.word	0x20008d64
 80025f8:	20008a28 	.word	0x20008a28
 80025fc:	2000060d 	.word	0x2000060d
 8002600:	200089da 	.word	0x200089da

08002604 <USB_MSC_Init_Start>:
	 }
#endif
}

void USB_MSC_Init_Start(void)                                 // Initialize USB MSC mode
{
 8002604:	b510      	push	{r4, lr}
	USBD_Init(&USBD_Device, &MSC_Desc, 0);                   // USB MSC initialization
 8002606:	4c0b      	ldr	r4, [pc, #44]	; (8002634 <USB_MSC_Init_Start+0x30>)
 8002608:	490b      	ldr	r1, [pc, #44]	; (8002638 <USB_MSC_Init_Start+0x34>)
 800260a:	2200      	movs	r2, #0
 800260c:	4620      	mov	r0, r4
 800260e:	f006 faaa 	bl	8008b66 <USBD_Init>
	USBD_RegisterClass(&USBD_Device, USBD_MSC_CLASS);        // USB class registration
 8002612:	490a      	ldr	r1, [pc, #40]	; (800263c <USB_MSC_Init_Start+0x38>)
 8002614:	4620      	mov	r0, r4
 8002616:	f006 fad4 	bl	8008bc2 <USBD_RegisterClass>
	USBD_MSC_RegisterStorage(&USBD_Device, &USBD_DISK_fops); // Storage call backs
 800261a:	4909      	ldr	r1, [pc, #36]	; (8002640 <USB_MSC_Init_Start+0x3c>)
 800261c:	4620      	mov	r0, r4
 800261e:	f005 fefa 	bl	8008416 <USBD_MSC_RegisterStorage>
	USBD_Start(&USBD_Device);                                // Start USB MSC
 8002622:	4620      	mov	r0, r4
 8002624:	f006 fad4 	bl	8008bd0 <USBD_Start>

	delay_us(1000000);
 8002628:	4806      	ldr	r0, [pc, #24]	; (8002644 <USB_MSC_Init_Start+0x40>)


}
 800262a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(1000000);
 800262e:	f001 b8a9 	b.w	8003784 <delay_us>
 8002632:	bf00      	nop
 8002634:	20008794 	.word	0x20008794
 8002638:	20000038 	.word	0x20000038
 800263c:	20000224 	.word	0x20000224
 8002640:	20000204 	.word	0x20000204
 8002644:	000f4240 	.word	0x000f4240

08002648 <USB_VCP_Init_Start>:

void USB_VCP_Init_Start(void)
{
 8002648:	b510      	push	{r4, lr}
	   USBD_Init(&USBD_Device, &VCP_Desc, 0);                   // USB VCP initialization
 800264a:	4c0b      	ldr	r4, [pc, #44]	; (8002678 <USB_VCP_Init_Start+0x30>)
 800264c:	490b      	ldr	r1, [pc, #44]	; (800267c <USB_VCP_Init_Start+0x34>)
 800264e:	2200      	movs	r2, #0
 8002650:	4620      	mov	r0, r4
 8002652:	f006 fa88 	bl	8008b66 <USBD_Init>
	   USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);        // USB class registration
 8002656:	490a      	ldr	r1, [pc, #40]	; (8002680 <USB_VCP_Init_Start+0x38>)
 8002658:	4620      	mov	r0, r4
 800265a:	f006 fab2 	bl	8008bc2 <USBD_RegisterClass>
	   USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops); // VCP CDC call backs
 800265e:	4909      	ldr	r1, [pc, #36]	; (8002684 <USB_VCP_Init_Start+0x3c>)
 8002660:	4620      	mov	r0, r4
 8002662:	f001 fdd3 	bl	800420c <USBD_CDC_RegisterInterface>
	   USBD_Start(&USBD_Device);                                 // Start USB VCP
 8002666:	4620      	mov	r0, r4
 8002668:	f006 fab2 	bl	8008bd0 <USBD_Start>
	   delay_us(1000000);
 800266c:	4806      	ldr	r0, [pc, #24]	; (8002688 <USB_VCP_Init_Start+0x40>)
}
 800266e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	   delay_us(1000000);
 8002672:	f001 b887 	b.w	8003784 <delay_us>
 8002676:	bf00      	nop
 8002678:	20008794 	.word	0x20008794
 800267c:	2000009c 	.word	0x2000009c
 8002680:	200000e4 	.word	0x200000e4
 8002684:	200001f4 	.word	0x200001f4
 8002688:	000f4240 	.word	0x000f4240

0800268c <Convert_SD_FileName_Unix_Time>:

void Convert_SD_FileName_Unix_Time(void)              // Update file name with RTC timestamp
{
 800268c:	b510      	push	{r4, lr}
 800268e:	b08a      	sub	sp, #40	; 0x28
	struct tm t;                                                            // Time structure to convert UNIX time
	t.tm_year = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC))+100;       // To make it 20xx say 2017
 8002690:	f7ff fde8 	bl	8002264 <LL_RTC_DATE_GetYear.constprop.10>
 8002694:	4604      	mov	r4, r0
 8002696:	f7ff fde5 	bl	8002264 <LL_RTC_DATE_GetYear.constprop.10>
 800269a:	f3c4 1303 	ubfx	r3, r4, #4, #4
 800269e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026a2:	f000 000f 	and.w	r0, r0, #15
 80026a6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80026aa:	b2c0      	uxtb	r0, r0
 80026ac:	3064      	adds	r0, #100	; 0x64
 80026ae:	9006      	str	r0, [sp, #24]
	t.tm_mon = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC))-1;         // Month, 0 - jan in time structure
 80026b0:	f7ff fdbe 	bl	8002230 <LL_RTC_DATE_GetMonth.constprop.9>
 80026b4:	4604      	mov	r4, r0
 80026b6:	f7ff fdbb 	bl	8002230 <LL_RTC_DATE_GetMonth.constprop.9>
 80026ba:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80026be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026c2:	f000 000f 	and.w	r0, r0, #15
 80026c6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80026ca:	b2c0      	uxtb	r0, r0
 80026cc:	3801      	subs	r0, #1
 80026ce:	9005      	str	r0, [sp, #20]
	t.tm_mday = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));            // Day of the month
 80026d0:	f7ff fd96 	bl	8002200 <LL_RTC_DATE_GetDay.constprop.8>
 80026d4:	4604      	mov	r4, r0
 80026d6:	f7ff fd93 	bl	8002200 <LL_RTC_DATE_GetDay.constprop.8>
 80026da:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80026de:	f000 000f 	and.w	r0, r0, #15
 80026e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026e6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	9304      	str	r3, [sp, #16]
	t.tm_hour = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 80026ee:	f7ff fe05 	bl	80022fc <LL_RTC_TIME_GetHour.constprop.13>
 80026f2:	4604      	mov	r4, r0
 80026f4:	f7ff fe02 	bl	80022fc <LL_RTC_TIME_GetHour.constprop.13>
 80026f8:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80026fc:	f000 000f 	and.w	r0, r0, #15
 8002700:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002704:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002708:	b2db      	uxtb	r3, r3
 800270a:	9303      	str	r3, [sp, #12]
	t.tm_min = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 800270c:	f7ff fddc 	bl	80022c8 <LL_RTC_TIME_GetMinute.constprop.12>
 8002710:	4604      	mov	r4, r0
 8002712:	f7ff fdd9 	bl	80022c8 <LL_RTC_TIME_GetMinute.constprop.12>
 8002716:	f3c4 1303 	ubfx	r3, r4, #4, #4
 800271a:	f000 000f 	and.w	r0, r0, #15
 800271e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002722:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002726:	b2db      	uxtb	r3, r3
 8002728:	9302      	str	r3, [sp, #8]
	t.tm_sec = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800272a:	f7ff fdb5 	bl	8002298 <LL_RTC_TIME_GetSecond.constprop.11>
 800272e:	4604      	mov	r4, r0
 8002730:	f7ff fdb2 	bl	8002298 <LL_RTC_TIME_GetSecond.constprop.11>
 8002734:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8002738:	f000 000f 	and.w	r0, r0, #15
 800273c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002740:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	9301      	str	r3, [sp, #4]
	t.tm_isdst = -1;                                                       // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8002748:	f04f 33ff 	mov.w	r3, #4294967295
 800274c:	9309      	str	r3, [sp, #36]	; 0x24

	// Releasing RTC registers; necessary for RTC read/write operation
	(void)RTC->DR;
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <Convert_SD_FileName_Unix_Time+0xdc>)
	(void)RTC->TR;

	sprintf(FILE_NAME_STRING, "%lx.BIN",mktime(&t));        // Update File name as Hex Unix Value, Change file format when necessary
 8002750:	a801      	add	r0, sp, #4
	(void)RTC->DR;
 8002752:	685a      	ldr	r2, [r3, #4]
	(void)RTC->TR;
 8002754:	681b      	ldr	r3, [r3, #0]
	sprintf(FILE_NAME_STRING, "%lx.BIN",mktime(&t));        // Update File name as Hex Unix Value, Change file format when necessary
 8002756:	f008 fa61 	bl	800ac1c <mktime>
 800275a:	4904      	ldr	r1, [pc, #16]	; (800276c <Convert_SD_FileName_Unix_Time+0xe0>)
 800275c:	4602      	mov	r2, r0
 800275e:	4804      	ldr	r0, [pc, #16]	; (8002770 <Convert_SD_FileName_Unix_Time+0xe4>)
 8002760:	f008 fc94 	bl	800b08c <siprintf>

}
 8002764:	b00a      	add	sp, #40	; 0x28
 8002766:	bd10      	pop	{r4, pc}
 8002768:	40002800 	.word	0x40002800
 800276c:	0800c6fc 	.word	0x0800c6fc
 8002770:	20008a4c 	.word	0x20008a4c

08002774 <Read_RTC_Timestamp>:
          2000 + __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC)));
}


void Read_RTC_Timestamp(void)               // Read RTC timestamp and store in variables
{
 8002774:	b510      	push	{r4, lr}
// read RTC time in BCD format from registers and save in .BIN/.DEC format

Hour = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8002776:	f7ff fdc1 	bl	80022fc <LL_RTC_TIME_GetHour.constprop.13>
 800277a:	4604      	mov	r4, r0
 800277c:	f7ff fdbe 	bl	80022fc <LL_RTC_TIME_GetHour.constprop.13>
 8002780:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8002784:	4a2b      	ldr	r2, [pc, #172]	; (8002834 <Read_RTC_Timestamp+0xc0>)
 8002786:	f000 000f 	and.w	r0, r0, #15
 800278a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800278e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002792:	7013      	strb	r3, [r2, #0]
Min = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8002794:	f7ff fd98 	bl	80022c8 <LL_RTC_TIME_GetMinute.constprop.12>
 8002798:	4604      	mov	r4, r0
 800279a:	f7ff fd95 	bl	80022c8 <LL_RTC_TIME_GetMinute.constprop.12>
 800279e:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80027a2:	4a25      	ldr	r2, [pc, #148]	; (8002838 <Read_RTC_Timestamp+0xc4>)
 80027a4:	f000 000f 	and.w	r0, r0, #15
 80027a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027ac:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80027b0:	7013      	strb	r3, [r2, #0]
Sec =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80027b2:	f7ff fd71 	bl	8002298 <LL_RTC_TIME_GetSecond.constprop.11>
 80027b6:	4604      	mov	r4, r0
 80027b8:	f7ff fd6e 	bl	8002298 <LL_RTC_TIME_GetSecond.constprop.11>
 80027bc:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80027c0:	4a1e      	ldr	r2, [pc, #120]	; (800283c <Read_RTC_Timestamp+0xc8>)
 80027c2:	f000 000f 	and.w	r0, r0, #15
 80027c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027ca:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80027ce:	7013      	strb	r3, [r2, #0]

Mon =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 80027d0:	f7ff fd2e 	bl	8002230 <LL_RTC_DATE_GetMonth.constprop.9>
 80027d4:	4604      	mov	r4, r0
 80027d6:	f7ff fd2b 	bl	8002230 <LL_RTC_DATE_GetMonth.constprop.9>
 80027da:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80027de:	4a18      	ldr	r2, [pc, #96]	; (8002840 <Read_RTC_Timestamp+0xcc>)
 80027e0:	f000 000f 	and.w	r0, r0, #15
 80027e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027e8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80027ec:	7013      	strb	r3, [r2, #0]
Day = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 80027ee:	f7ff fd07 	bl	8002200 <LL_RTC_DATE_GetDay.constprop.8>
 80027f2:	4604      	mov	r4, r0
 80027f4:	f7ff fd04 	bl	8002200 <LL_RTC_DATE_GetDay.constprop.8>
 80027f8:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80027fc:	4a11      	ldr	r2, [pc, #68]	; (8002844 <Read_RTC_Timestamp+0xd0>)
 80027fe:	f000 000f 	and.w	r0, r0, #15
 8002802:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002806:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800280a:	7013      	strb	r3, [r2, #0]
Year =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 800280c:	f7ff fd2a 	bl	8002264 <LL_RTC_DATE_GetYear.constprop.10>
 8002810:	4604      	mov	r4, r0
 8002812:	f7ff fd27 	bl	8002264 <LL_RTC_DATE_GetYear.constprop.10>
 8002816:	f3c4 1303 	ubfx	r3, r4, #4, #4
 800281a:	4a0b      	ldr	r2, [pc, #44]	; (8002848 <Read_RTC_Timestamp+0xd4>)
 800281c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002820:	f000 000f 	and.w	r0, r0, #15
 8002824:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002828:	7013      	strb	r3, [r2, #0]

// Releasing RTC registers (Time and Date registers); necessary for RTC read/write operation
(void)RTC->DR;
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <Read_RTC_Timestamp+0xd8>)
 800282c:	685a      	ldr	r2, [r3, #4]
(void)RTC->TR;
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	bd10      	pop	{r4, pc}
 8002832:	bf00      	nop
 8002834:	20008a5e 	.word	0x20008a5e
 8002838:	20008a1c 	.word	0x20008a1c
 800283c:	20008a64 	.word	0x20008a64
 8002840:	20008d48 	.word	0x20008d48
 8002844:	20008d32 	.word	0x20008d32
 8002848:	20008d61 	.word	0x20008d61
 800284c:	40002800 	.word	0x40002800

08002850 <update_FATFS_time>:
{
 8002850:	b508      	push	{r3, lr}
	Read_RTC_Timestamp();                                   // Read RTC time-stamps and store in variables
 8002852:	f7ff ff8f 	bl	8002774 <Read_RTC_Timestamp>
	fno.fdate = (WORD)(((Year+20) << 9) | Mon << 5 | Day);  // Update File time with the data log starting time
 8002856:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <update_FATFS_time+0x44>)
 8002858:	490f      	ldr	r1, [pc, #60]	; (8002898 <update_FATFS_time+0x48>)
 800285a:	781a      	ldrb	r2, [r3, #0]
 800285c:	4b0f      	ldr	r3, [pc, #60]	; (800289c <update_FATFS_time+0x4c>)
	f_utime(FILE_NAME_STRING, &fno);                        // Update RTC time on FATFS file header
 800285e:	4810      	ldr	r0, [pc, #64]	; (80028a0 <update_FATFS_time+0x50>)
	fno.fdate = (WORD)(((Year+20) << 9) | Mon << 5 | Day);  // Update File time with the data log starting time
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8002866:	4a0f      	ldr	r2, [pc, #60]	; (80028a4 <update_FATFS_time+0x54>)
 8002868:	7812      	ldrb	r2, [r2, #0]
 800286a:	3214      	adds	r2, #20
 800286c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8002870:	808b      	strh	r3, [r1, #4]
    fno.ftime = (WORD)(Hour <<11 |  Min<<5 | Sec/2 );       // Extracting values from RTC registers
 8002872:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <update_FATFS_time+0x58>)
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <update_FATFS_time+0x5c>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	015b      	lsls	r3, r3, #5
 800287c:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 8002880:	4a0b      	ldr	r2, [pc, #44]	; (80028b0 <update_FATFS_time+0x60>)
 8002882:	7812      	ldrb	r2, [r2, #0]
 8002884:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8002888:	80cb      	strh	r3, [r1, #6]
}
 800288a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	f_utime(FILE_NAME_STRING, &fno);                        // Update RTC time on FATFS file header
 800288e:	f008 b831 	b.w	800a8f4 <f_utime>
 8002892:	bf00      	nop
 8002894:	20008d48 	.word	0x20008d48
 8002898:	20008a30 	.word	0x20008a30
 800289c:	20008d32 	.word	0x20008d32
 80028a0:	20008a4c 	.word	0x20008a4c
 80028a4:	20008d61 	.word	0x20008d61
 80028a8:	20008a5e 	.word	0x20008a5e
 80028ac:	20008a1c 	.word	0x20008a1c
 80028b0:	20008a64 	.word	0x20008a64

080028b4 <File_Close_Update_Unlink>:
{
 80028b4:	b508      	push	{r3, lr}
	f_close(&MyFile);                       // Close previous running file
 80028b6:	4807      	ldr	r0, [pc, #28]	; (80028d4 <File_Close_Update_Unlink+0x20>)
 80028b8:	f007 fe6b 	bl	800a592 <f_close>
	update_FATFS_time();                    // Write RTC time-stamp on File header/properties of last FATFS file to visualize in PC
 80028bc:	f7ff ffc8 	bl	8002850 <update_FATFS_time>
	f_mount(0, "", 0); 		                //  unmount FATFS file (of running sensor storage file)
 80028c0:	2200      	movs	r2, #0
 80028c2:	4905      	ldr	r1, [pc, #20]	; (80028d8 <File_Close_Update_Unlink+0x24>)
 80028c4:	4610      	mov	r0, r2
 80028c6:	f007 fc07 	bl	800a0d8 <f_mount>
	FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
 80028ca:	4804      	ldr	r0, [pc, #16]	; (80028dc <File_Close_Update_Unlink+0x28>)
}
 80028cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
 80028d0:	f008 b878 	b.w	800a9c4 <FATFS_UnLinkDriver>
 80028d4:	20008d64 	.word	0x20008d64
 80028d8:	0800c89f 	.word	0x0800c89f
 80028dc:	20008af4 	.word	0x20008af4

080028e0 <Enter_RTC_InitMode>:
}

void Enter_RTC_InitMode(void)      // Function needed before writing on RTC registers
{
  RTC->ISR = RTC_INIT_MASK;                                // Enter Init Mode
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <Enter_RTC_InitMode+0x10>)
 80028e2:	f04f 32ff 	mov.w	r2, #4294967295
 80028e6:	60da      	str	r2, [r3, #12]
  while(((RTC->ISR) & RTC_ISR_INITF) != (RTC_ISR_INITF)); // Wait to enter Init mode
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	0652      	lsls	r2, r2, #25
 80028ec:	d5fc      	bpl.n	80028e8 <Enter_RTC_InitMode+0x8>
}
 80028ee:	4770      	bx	lr
 80028f0:	40002800 	.word	0x40002800

080028f4 <Exit_RTC_InitMode>:

void Exit_RTC_InitMode(void)      // Function needed after writing on RTC registers
{
  RTC->ISR = (uint32_t)~RTC_ISR_INIT; // Disable RTC init mode
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <Exit_RTC_InitMode+0x1c>)
 80028f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028fa:	60da      	str	r2, [r3, #12]

	// Wait for synchro. Needed only if Shadow registers is enabled
	WRITE_REG(RTC->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTC->ISR & RTC_ISR_INIT))); // Clear RTC sync flag
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002902:	f062 02a0 	orn	r2, r2, #160	; 0xa0
 8002906:	60da      	str	r2, [r3, #12]
	while(((RTC->ISR) & RTC_ISR_RSF) != (RTC_ISR_RSF));  // Wait the registers to be synchronised
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	0692      	lsls	r2, r2, #26
 800290c:	d5fc      	bpl.n	8002908 <Exit_RTC_InitMode+0x14>
}
 800290e:	4770      	bx	lr
 8002910:	40002800 	.word	0x40002800

08002914 <MX_RTC_Init>:

void MX_RTC_Init(void)                           // RTC initialization after Power on reset
{
 8002914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002916:	4b29      	ldr	r3, [pc, #164]	; (80029bc <MX_RTC_Init+0xa8>)
 8002918:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800291c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002920:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002924:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002928:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800292c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002930:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800293c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  LL_RTC_InitTypeDef RTC_InitStruct;

  LL_RCC_ForceBackupDomainReset();               // Reset Backup domain registers
  LL_RCC_ReleaseBackupDomainReset();
  LL_RCC_LSE_Enable();                          // Configure LSE as RTC source clock
  while (LL_RCC_LSE_IsReady() != 1);
 8002940:	0792      	lsls	r2, r2, #30
 8002942:	d5fb      	bpl.n	800293c <MX_RTC_Init+0x28>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002944:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
  LL_RCC_EnableRTC();                           // RTC clock

  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
  LL_RTC_Init(RTC, &RTC_InitStruct);           // Initialize RTC with default configurations
 8002948:	4c1d      	ldr	r4, [pc, #116]	; (80029c0 <MX_RTC_Init+0xac>)
 800294a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800294e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002952:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002956:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 800295a:	a904      	add	r1, sp, #16
 800295c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002960:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002964:	2300      	movs	r3, #0
 8002966:	f841 3d0c 	str.w	r3, [r1, #-12]!
  LL_RTC_Init(RTC, &RTC_InitStruct);           // Initialize RTC with default configurations
 800296a:	4620      	mov	r0, r4
 800296c:	f004 ff06 	bl	800777c <LL_RTC_Init>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8002970:	23ca      	movs	r3, #202	; 0xca
 8002972:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002974:	2353      	movs	r3, #83	; 0x53
 8002976:	6263      	str	r3, [r4, #36]	; 0x24


    LL_RTC_DisableWriteProtection(RTC);
    Enter_RTC_InitMode();                         // Enter RTC initialization mode to set parameters
 8002978:	f7ff ffb2 	bl	80028e0 <Enter_RTC_InitMode>

    // Calender set up
    MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_A, 0x7F << RTC_POSITION_PRER_PREDIV_A);  // ASYNC prediv= 0x7F
 800297c:	6923      	ldr	r3, [r4, #16]
 800297e:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002982:	fa92 f2a2 	rbit	r2, r2
 8002986:	217f      	movs	r1, #127	; 0x7f
 8002988:	fab2 f282 	clz	r2, r2
 800298c:	fa01 f202 	lsl.w	r2, r1, r2
 8002990:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002994:	4313      	orrs	r3, r2
 8002996:	6123      	str	r3, [r4, #16]
  	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_S, 0xFF);                                // SYNC prediv= 0xFF
 8002998:	6923      	ldr	r3, [r4, #16]
 800299a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800299e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80029a2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80029a6:	6123      	str	r3, [r4, #16]

  	Exit_RTC_InitMode();
 80029a8:	f7ff ffa4 	bl	80028f4 <Exit_RTC_InitMode>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80029ac:	23ff      	movs	r3, #255	; 0xff
 80029ae:	6263      	str	r3, [r4, #36]	; 0x24

  tmp = (uint32_t)(&(RTCx->BKP0R));
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <MX_RTC_Init+0xb0>)
 80029b2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80029b6:	605a      	str	r2, [r3, #4]
}
 80029b8:	b004      	add	sp, #16
 80029ba:	bd10      	pop	{r4, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40002800 	.word	0x40002800
 80029c4:	40002850 	.word	0x40002850

080029c8 <Set_RTC_Calendar>:
{
 80029c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80029ca:	4c19      	ldr	r4, [pc, #100]	; (8002a30 <Set_RTC_Calendar+0x68>)
 80029cc:	460f      	mov	r7, r1
 80029ce:	4619      	mov	r1, r3
 80029d0:	23ca      	movs	r3, #202	; 0xca
 80029d2:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80029d4:	2353      	movs	r3, #83	; 0x53
 80029d6:	b085      	sub	sp, #20
 80029d8:	6263      	str	r3, [r4, #36]	; 0x24
 80029da:	4606      	mov	r6, r0
 80029dc:	4615      	mov	r5, r2
  Enter_RTC_InitMode();
 80029de:	f7ff ff7f 	bl	80028e0 <Enter_RTC_InitMode>
  RTC_TimeStruct.Minutes = Min;
 80029e2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  RTC_TimeStruct.Hours = Hour;
 80029e6:	f88d 100c 	strb.w	r1, [sp, #12]
  RTC_TimeStruct.Minutes = Min;
 80029ea:	f88d 300d 	strb.w	r3, [sp, #13]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 80029ee:	aa02      	add	r2, sp, #8
  RTC_TimeStruct.Seconds = Sec;
 80029f0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80029f4:	f88d 300e 	strb.w	r3, [sp, #14]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 80029f8:	2100      	movs	r1, #0
 80029fa:	4620      	mov	r0, r4
 80029fc:	f004 ff2e 	bl	800785c <LL_RTC_TIME_Init>
  RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;          // Default value
 8002a00:	2301      	movs	r3, #1
  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8002a02:	aa01      	add	r2, sp, #4
 8002a04:	2100      	movs	r1, #0
 8002a06:	4620      	mov	r0, r4
  RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;          // Default value
 8002a08:	f88d 3004 	strb.w	r3, [sp, #4]
  RTC_DateStruct.Month = Month;
 8002a0c:	f88d 7005 	strb.w	r7, [sp, #5]
  RTC_DateStruct.Year = Year;
 8002a10:	f88d 6007 	strb.w	r6, [sp, #7]
  RTC_DateStruct.Day = Day;
 8002a14:	f88d 5006 	strb.w	r5, [sp, #6]
  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8002a18:	f004 ff64 	bl	80078e4 <LL_RTC_DATE_Init>
  Exit_RTC_InitMode();
 8002a1c:	f7ff ff6a 	bl	80028f4 <Exit_RTC_InitMode>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002a20:	23ff      	movs	r3, #255	; 0xff
 8002a22:	6263      	str	r3, [r4, #36]	; 0x24
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <Set_RTC_Calendar+0x6c>)
 8002a26:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002a2a:	605a      	str	r2, [r3, #4]
}
 8002a2c:	b005      	add	sp, #20
 8002a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a30:	40002800 	.word	0x40002800
 8002a34:	40002850 	.word	0x40002850

08002a38 <RTC_BAK_GetRegister>:
// Valid register value indicates RTC is enabled and running
uint32_t RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
  register uint32_t tmp = 0U;

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8002a38:	3050      	adds	r0, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002a3a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
}
 8002a3e:	4770      	bx	lr

08002a40 <USB_PA9_EXTI_conf>:
  LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_10);                        // Interrupt configured for falling edge
}


void USB_PA9_EXTI_conf(void)                                              // PA9 EXTI pin interrupt configuration for USB connectivity Sense
{
 8002a40:	b508      	push	{r3, lr}
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002a42:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <USB_PA9_EXTI_conf+0x34>)
 8002a44:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a48:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(EXTI9_5_IRQn);                                           // Enabling External GPIO pin interrupt (EXTI9-5) for USB connectivity PA10 Pin
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);                   // Enable Sysconfig clock to enable EXTI pin interrupts
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	f7ff fb6e 	bl	800212c <LL_APB2_GRP1_EnableClock>
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8002a50:	4a09      	ldr	r2, [pc, #36]	; (8002a78 <USB_PA9_EXTI_conf+0x38>)
 8002a52:	6913      	ldr	r3, [r2, #16]
 8002a54:	21f0      	movs	r1, #240	; 0xf0
 8002a56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a5a:	fa91 f1a1 	rbit	r1, r1
 8002a5e:	6113      	str	r3, [r2, #16]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <USB_PA9_EXTI_conf+0x3c>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a68:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a70:	609a      	str	r2, [r3, #8]
 8002a72:	bd08      	pop	{r3, pc}
 8002a74:	e000e100 	.word	0xe000e100
 8002a78:	40010000 	.word	0x40010000
 8002a7c:	40010400 	.word	0x40010400

08002a80 <Wait_for_ADC_timeout_While_Datalog>:
	         }
}

void Wait_for_ADC_timeout_While_Datalog(void)   // During Timer_Interrupt for Data logging, Involved Volatile variables
{
	ADC_TimeOut_Count_Buf++;
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <Wait_for_ADC_timeout_While_Datalog+0x1c>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	3201      	adds	r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
	if( ADC_TimeOut_Count_Buf > ADC_TimeOut_Limit_Buf) // 100ms= 48000*ADC_TimeOut_MS_value)
 8002a88:	6819      	ldr	r1, [r3, #0]
 8002a8a:	4a05      	ldr	r2, [pc, #20]	; (8002aa0 <Wait_for_ADC_timeout_While_Datalog+0x20>)
 8002a8c:	4291      	cmp	r1, r2
 8002a8e:	d904      	bls.n	8002a9a <Wait_for_ADC_timeout_While_Datalog+0x1a>
	         {
		ADC_TimeOut_Count_Buf=0;
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
		ADC_Error_Buf=1;
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <Wait_for_ADC_timeout_While_Datalog+0x24>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	4770      	bx	lr
 8002a9c:	20008a2c 	.word	0x20008a2c
 8002aa0:	00493e00 	.word	0x00493e00
 8002aa4:	20008fe7 	.word	0x20008fe7

08002aa8 <Wait_for_ADC_TimeOut_>:
	         }
}

void Wait_for_ADC_TimeOut_ (void)
{
	ADC_TimeOut_Count++;
 8002aa8:	4a06      	ldr	r2, [pc, #24]	; (8002ac4 <Wait_for_ADC_TimeOut_+0x1c>)
	if( ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 8002aaa:	4907      	ldr	r1, [pc, #28]	; (8002ac8 <Wait_for_ADC_TimeOut_+0x20>)
	ADC_TimeOut_Count++;
 8002aac:	6813      	ldr	r3, [r2, #0]
 8002aae:	3301      	adds	r3, #1
	if( ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 8002ab0:	428b      	cmp	r3, r1
	         {
		ADC_TimeOut_Count=0;
 8002ab2:	bf83      	ittte	hi
 8002ab4:	2300      	movhi	r3, #0
 8002ab6:	6013      	strhi	r3, [r2, #0]
		ADC_Error=1;
 8002ab8:	4b04      	ldrhi	r3, [pc, #16]	; (8002acc <Wait_for_ADC_TimeOut_+0x24>)
	ADC_TimeOut_Count++;
 8002aba:	6013      	strls	r3, [r2, #0]
		ADC_Error=1;
 8002abc:	bf84      	itt	hi
 8002abe:	2201      	movhi	r2, #1
 8002ac0:	701a      	strbhi	r2, [r3, #0]
 8002ac2:	4770      	bx	lr
 8002ac4:	20008fe8 	.word	0x20008fe8
 8002ac8:	00493e00 	.word	0x00493e00
 8002acc:	20008fde 	.word	0x20008fde

08002ad0 <P_Activate_ADC2>:
{
 8002ad0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8002ad2:	2300      	movs	r3, #0
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ad4:	482c      	ldr	r0, [pc, #176]	; (8002b88 <P_Activate_ADC2+0xb8>)
 8002ad6:	9301      	str	r3, [sp, #4]
 8002ad8:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / 100000) /10);
 8002ada:	4a2c      	ldr	r2, [pc, #176]	; (8002b8c <P_Activate_ADC2+0xbc>)
 8002adc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ae0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ae4:	6083      	str	r3, [r0, #8]
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ae6:	6883      	ldr	r3, [r0, #8]
 8002ae8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002aec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af4:	6083      	str	r3, [r0, #8]
 8002af6:	4b26      	ldr	r3, [pc, #152]	; (8002b90 <P_Activate_ADC2+0xc0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	fbb3 f3f2 	udiv	r3, r3, r2
 8002afe:	220a      	movs	r2, #10
 8002b00:	4353      	muls	r3, r2
 8002b02:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8002b06:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8002b08:	9a01      	ldr	r2, [sp, #4]
 8002b0a:	2a00      	cmp	r2, #0
 8002b0c:	d12f      	bne.n	8002b6e <P_Activate_ADC2+0x9e>
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b0e:	6883      	ldr	r3, [r0, #8]
    ADC_TimeOut_Count=0;
 8002b10:	4d20      	ldr	r5, [pc, #128]	; (8002b94 <P_Activate_ADC2+0xc4>)
    ADC_Error=0;
 8002b12:	4c21      	ldr	r4, [pc, #132]	; (8002b98 <P_Activate_ADC2+0xc8>)
 8002b14:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002b18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b20:	6083      	str	r3, [r0, #8]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002b22:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
    ADC_TimeOut_Count=0;
 8002b26:	602a      	str	r2, [r5, #0]
    ADC_Error=0;
 8002b28:	7022      	strb	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002b2a:	6883      	ldr	r3, [r0, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC2) == 0) && !Error_preceding&& (ADC_Error==0))
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	db04      	blt.n	8002b3a <P_Activate_ADC2+0x6a>
 8002b30:	6933      	ldr	r3, [r6, #16]
 8002b32:	0599      	lsls	r1, r3, #22
 8002b34:	d401      	bmi.n	8002b3a <P_Activate_ADC2+0x6a>
 8002b36:	7823      	ldrb	r3, [r4, #0]
 8002b38:	b1e3      	cbz	r3, 8002b74 <P_Activate_ADC2+0xa4>
    wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES;   // ADC Delay calculations
 8002b3a:	2380      	movs	r3, #128	; 0x80
      wait_loop_index--;
 8002b3c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8002b3e:	9a01      	ldr	r2, [sp, #4]
 8002b40:	b9da      	cbnz	r2, 8002b7a <P_Activate_ADC2+0xaa>
  MODIFY_REG(ADCx->CR,
 8002b42:	6883      	ldr	r3, [r0, #8]
 8002b44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6083      	str	r3, [r0, #8]
    ADC_TimeOut_Count=0;
 8002b52:	602a      	str	r2, [r5, #0]
    ADC_Error=0;
 8002b54:	7022      	strb	r2, [r4, #0]
 8002b56:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8002b5a:	6803      	ldr	r3, [r0, #0]
    while ((LL_ADC_IsActiveFlag_ADRDY(ADC2) == 0)&& !Error_preceding&& (ADC_Error==0))
 8002b5c:	07da      	lsls	r2, r3, #31
 8002b5e:	d404      	bmi.n	8002b6a <P_Activate_ADC2+0x9a>
 8002b60:	692b      	ldr	r3, [r5, #16]
 8002b62:	059b      	lsls	r3, r3, #22
 8002b64:	d401      	bmi.n	8002b6a <P_Activate_ADC2+0x9a>
 8002b66:	7823      	ldrb	r3, [r4, #0]
 8002b68:	b153      	cbz	r3, 8002b80 <P_Activate_ADC2+0xb0>
}
 8002b6a:	b002      	add	sp, #8
 8002b6c:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 8002b6e:	9b01      	ldr	r3, [sp, #4]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	e7c8      	b.n	8002b06 <P_Activate_ADC2+0x36>
  	  Wait_for_ADC_TimeOut_();
 8002b74:	f7ff ff98 	bl	8002aa8 <Wait_for_ADC_TimeOut_>
 8002b78:	e7d7      	b.n	8002b2a <P_Activate_ADC2+0x5a>
      wait_loop_index--;
 8002b7a:	9b01      	ldr	r3, [sp, #4]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	e7dd      	b.n	8002b3c <P_Activate_ADC2+0x6c>
  	  Wait_for_ADC_TimeOut_();
 8002b80:	f7ff ff92 	bl	8002aa8 <Wait_for_ADC_TimeOut_>
 8002b84:	e7e9      	b.n	8002b5a <P_Activate_ADC2+0x8a>
 8002b86:	bf00      	nop
 8002b88:	50040100 	.word	0x50040100
 8002b8c:	000186a0 	.word	0x000186a0
 8002b90:	20000034 	.word	0x20000034
 8002b94:	20008fe8 	.word	0x20008fe8
 8002b98:	20008fde 	.word	0x20008fde

08002b9c <P_ADC2_conf_strain>:
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b9c:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <P_ADC2_conf_strain+0x58>)
{
 8002b9e:	b538      	push	{r3, r4, r5, lr}
 8002ba0:	6893      	ldr	r3, [r2, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002ba2:	4c15      	ldr	r4, [pc, #84]	; (8002bf8 <P_ADC2_conf_strain+0x5c>)
    LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8002ba4:	4d15      	ldr	r5, [pc, #84]	; (8002bfc <P_ADC2_conf_strain+0x60>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ba6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bae:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002bb0:	68e3      	ldr	r3, [r4, #12]
 8002bb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb6:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 8002bb8:	68e3      	ldr	r3, [r4, #12]
 8002bba:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8002bbe:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 8002bc0:	68e3      	ldr	r3, [r4, #12]
 8002bc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bc6:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 8002bc8:	68e3      	ldr	r3, [r4, #12]
 8002bca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bce:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002bd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bd2:	f023 030f 	bic.w	r3, r3, #15
 8002bd6:	6323      	str	r3, [r4, #48]	; 0x30
 8002bd8:	462a      	mov	r2, r5
 8002bda:	4620      	mov	r0, r4
 8002bdc:	2106      	movs	r1, #6
 8002bde:	f7ff fac9 	bl	8002174 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_247CYCLES_5); // FSR2=PC3=Ch4
 8002be2:	4629      	mov	r1, r5
 8002be4:	4620      	mov	r0, r4
 8002be6:	2206      	movs	r2, #6
 8002be8:	f7ff fae2 	bl	80021b0 <LL_ADC_SetChannelSamplingTime>
}
 8002bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    P_Activate_ADC2();
 8002bf0:	f7ff bf6e 	b.w	8002ad0 <P_Activate_ADC2>
 8002bf4:	50040300 	.word	0x50040300
 8002bf8:	50040100 	.word	0x50040100
 8002bfc:	10c00010 	.word	0x10c00010

08002c00 <P_Activate_ADC1>:
{
 8002c00:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c06:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <P_Activate_ADC1+0xbc>)
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / 100000) /10);
 8002c08:	492d      	ldr	r1, [pc, #180]	; (8002cc0 <P_Activate_ADC1+0xc0>)
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8002c10:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002c14:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8002c1c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002c20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c24:	609a      	str	r2, [r3, #8]
 8002c26:	4a27      	ldr	r2, [pc, #156]	; (8002cc4 <P_Activate_ADC1+0xc4>)
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	fbb2 f2f1 	udiv	r2, r2, r1
 8002c2e:	210a      	movs	r1, #10
 8002c30:	434a      	muls	r2, r1
 8002c32:	fbb2 f2f1 	udiv	r2, r2, r1
      wait_loop_index--;
 8002c36:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 8002c38:	9901      	ldr	r1, [sp, #4]
 8002c3a:	2900      	cmp	r1, #0
 8002c3c:	d132      	bne.n	8002ca4 <P_Activate_ADC1+0xa4>
  MODIFY_REG(ADCx->CR,
 8002c3e:	689a      	ldr	r2, [r3, #8]
    ADC_TimeOut_Count=0;
 8002c40:	4c21      	ldr	r4, [pc, #132]	; (8002cc8 <P_Activate_ADC1+0xc8>)
    ADC_Error=0;
 8002c42:	4822      	ldr	r0, [pc, #136]	; (8002ccc <P_Activate_ADC1+0xcc>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002c44:	4d1d      	ldr	r5, [pc, #116]	; (8002cbc <P_Activate_ADC1+0xbc>)
  MODIFY_REG(ADCx->CR,
 8002c46:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002c4a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002c4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
    ADC_TimeOut_Count=0;
 8002c58:	6021      	str	r1, [r4, #0]
    ADC_Error=0;
 8002c5a:	7001      	strb	r1, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002c5c:	68ab      	ldr	r3, [r5, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC1) == 0) && !Error_preceding&& (ADC_Error==0))
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	db04      	blt.n	8002c6c <P_Activate_ADC1+0x6c>
 8002c62:	6933      	ldr	r3, [r6, #16]
 8002c64:	0599      	lsls	r1, r3, #22
 8002c66:	d401      	bmi.n	8002c6c <P_Activate_ADC1+0x6c>
 8002c68:	7803      	ldrb	r3, [r0, #0]
 8002c6a:	b1f3      	cbz	r3, 8002caa <P_Activate_ADC1+0xaa>
    wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES;   // ADC Delay calculations
 8002c6c:	2380      	movs	r3, #128	; 0x80
      wait_loop_index--;
 8002c6e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8002c70:	9901      	ldr	r1, [sp, #4]
 8002c72:	b9e9      	cbnz	r1, 8002cb0 <P_Activate_ADC1+0xb0>
  MODIFY_REG(ADCx->CR,
 8002c74:	4a11      	ldr	r2, [pc, #68]	; (8002cbc <P_Activate_ADC1+0xbc>)
 8002c76:	6893      	ldr	r3, [r2, #8]
 8002c78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6093      	str	r3, [r2, #8]
 8002c86:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
    ADC_TimeOut_Count=0;
 8002c8a:	6021      	str	r1, [r4, #0]
    ADC_Error=0;
 8002c8c:	7001      	strb	r1, [r0, #0]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8002c8e:	4614      	mov	r4, r2
 8002c90:	6823      	ldr	r3, [r4, #0]
    while ((LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)&& !Error_preceding&& (ADC_Error==0))
 8002c92:	07da      	lsls	r2, r3, #31
 8002c94:	d404      	bmi.n	8002ca0 <P_Activate_ADC1+0xa0>
 8002c96:	692b      	ldr	r3, [r5, #16]
 8002c98:	059b      	lsls	r3, r3, #22
 8002c9a:	d401      	bmi.n	8002ca0 <P_Activate_ADC1+0xa0>
 8002c9c:	7803      	ldrb	r3, [r0, #0]
 8002c9e:	b153      	cbz	r3, 8002cb6 <P_Activate_ADC1+0xb6>
}
 8002ca0:	b002      	add	sp, #8
 8002ca2:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 8002ca4:	9a01      	ldr	r2, [sp, #4]
 8002ca6:	3a01      	subs	r2, #1
 8002ca8:	e7c5      	b.n	8002c36 <P_Activate_ADC1+0x36>
  	  Wait_for_ADC_TimeOut_();
 8002caa:	f7ff fefd 	bl	8002aa8 <Wait_for_ADC_TimeOut_>
 8002cae:	e7d5      	b.n	8002c5c <P_Activate_ADC1+0x5c>
      wait_loop_index--;
 8002cb0:	9b01      	ldr	r3, [sp, #4]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	e7db      	b.n	8002c6e <P_Activate_ADC1+0x6e>
  	  Wait_for_ADC_TimeOut_();
 8002cb6:	f7ff fef7 	bl	8002aa8 <Wait_for_ADC_TimeOut_>
 8002cba:	e7e9      	b.n	8002c90 <P_Activate_ADC1+0x90>
 8002cbc:	50040000 	.word	0x50040000
 8002cc0:	000186a0 	.word	0x000186a0
 8002cc4:	20000034 	.word	0x20000034
 8002cc8:	20008fe8 	.word	0x20008fe8
 8002ccc:	20008fde 	.word	0x20008fde

08002cd0 <P_ADC1_conf_strain>:
{
 8002cd0:	b538      	push	{r3, r4, r5, lr}
  SET_BIT(RCC->AHB2RSTR, Periphs);
 8002cd2:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <P_ADC1_conf_strain+0x74>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002cd4:	4c1c      	ldr	r4, [pc, #112]	; (8002d48 <P_ADC1_conf_strain+0x78>)
 8002cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);    // FSR1=PA0=Ch5
 8002cd8:	4d1c      	ldr	r5, [pc, #112]	; (8002d4c <P_ADC1_conf_strain+0x7c>)
 8002cda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cde:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 8002ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ce6:	62da      	str	r2, [r3, #44]	; 0x2c
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8002ce8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002cec:	f7ff fa10 	bl	8002110 <LL_AHB2_GRP1_EnableClock>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002cf0:	4a17      	ldr	r2, [pc, #92]	; (8002d50 <P_ADC1_conf_strain+0x80>)
 8002cf2:	6893      	ldr	r3, [r2, #8]
 8002cf4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfc:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002cfe:	68e3      	ldr	r3, [r4, #12]
 8002d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d04:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 8002d06:	68e3      	ldr	r3, [r4, #12]
 8002d08:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8002d0c:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 8002d0e:	68e3      	ldr	r3, [r4, #12]
 8002d10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d14:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 8002d16:	68e3      	ldr	r3, [r4, #12]
 8002d18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d1c:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002d1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d20:	f023 030f 	bic.w	r3, r3, #15
 8002d24:	6323      	str	r3, [r4, #48]	; 0x30
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);    // FSR1=PA0=Ch5
 8002d26:	462a      	mov	r2, r5
 8002d28:	4620      	mov	r0, r4
 8002d2a:	2106      	movs	r1, #6
 8002d2c:	f7ff fa22 	bl	8002174 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8002d30:	4629      	mov	r1, r5
 8002d32:	4620      	mov	r0, r4
 8002d34:	2206      	movs	r2, #6
 8002d36:	f7ff fa3b 	bl	80021b0 <LL_ADC_SetChannelSamplingTime>
}
 8002d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    P_Activate_ADC1();
 8002d3e:	f7ff bf5f 	b.w	8002c00 <P_Activate_ADC1>
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000
 8002d48:	50040000 	.word	0x50040000
 8002d4c:	19200040 	.word	0x19200040
 8002d50:	50040300 	.word	0x50040300

08002d54 <P_ADC_Sensor_GPIO_Init>:
{
 8002d54:	b510      	push	{r4, lr}
	  P_ADC1_conf_strain();
 8002d56:	f7ff ffbb 	bl	8002cd0 <P_ADC1_conf_strain>
	  P_ADC2_conf_strain();
 8002d5a:	f7ff ff1f 	bl	8002b9c <P_ADC2_conf_strain>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002d5e:	2001      	movs	r0, #1
 8002d60:	f7ff f9d6 	bl	8002110 <LL_AHB2_GRP1_EnableClock>
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_1, LL_GPIO_MODE_ANALOG);
 8002d64:	2102      	movs	r1, #2
 8002d66:	2203      	movs	r2, #3
 8002d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d6c:	f7ff f9ec 	bl	8002148 <LL_GPIO_SetPinMode>
  SET_BIT(GPIOx->ASCR, PinMask);
 8002d70:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_3, LL_GPIO_MODE_ANALOG);
 8002d74:	4c08      	ldr	r4, [pc, #32]	; (8002d98 <P_ADC_Sensor_GPIO_Init+0x44>)
 8002d76:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002d78:	f043 0302 	orr.w	r3, r3, #2
 8002d7c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002d7e:	2004      	movs	r0, #4
 8002d80:	f7ff f9c6 	bl	8002110 <LL_AHB2_GRP1_EnableClock>
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_3, LL_GPIO_MODE_ANALOG);
 8002d84:	2203      	movs	r2, #3
 8002d86:	2108      	movs	r1, #8
 8002d88:	4620      	mov	r0, r4
 8002d8a:	f7ff f9dd 	bl	8002148 <LL_GPIO_SetPinMode>
 8002d8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d90:	f043 0308 	orr.w	r3, r3, #8
 8002d94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d96:	bd10      	pop	{r4, pc}
 8002d98:	48000800 	.word	0x48000800

08002d9c <ADC_conf_battery>:
{
 8002d9c:	b538      	push	{r3, r4, r5, lr}
  SET_BIT(RCC->AHB2RSTR, Periphs);
 8002d9e:	4b21      	ldr	r3, [pc, #132]	; (8002e24 <ADC_conf_battery+0x88>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002da0:	4c21      	ldr	r4, [pc, #132]	; (8002e28 <ADC_conf_battery+0x8c>)
 8002da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 8002da4:	4d21      	ldr	r5, [pc, #132]	; (8002e2c <ADC_conf_battery+0x90>)
 8002da6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002daa:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 8002dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_BIT(GPIOx->ASCR, PinMask);
 8002db4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8002db8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  SET_BIT(GPIOx->ASCR, PinMask);
 8002dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc6:	f042 0202 	orr.w	r2, r2, #2
 8002dca:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dcc:	f7ff f9a0 	bl	8002110 <LL_AHB2_GRP1_EnableClock>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002dd0:	4a17      	ldr	r2, [pc, #92]	; (8002e30 <ADC_conf_battery+0x94>)
 8002dd2:	6893      	ldr	r3, [r2, #8]
 8002dd4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ddc:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002dde:	68e3      	ldr	r3, [r4, #12]
 8002de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de4:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 8002de6:	68e3      	ldr	r3, [r4, #12]
 8002de8:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8002dec:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 8002dee:	68e3      	ldr	r3, [r4, #12]
 8002df0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002df4:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 8002df6:	68e3      	ldr	r3, [r4, #12]
 8002df8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dfc:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002dfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e00:	f023 030f 	bic.w	r3, r3, #15
 8002e04:	6323      	str	r3, [r4, #48]	; 0x30
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_6);
 8002e06:	462a      	mov	r2, r5
 8002e08:	4620      	mov	r0, r4
 8002e0a:	2106      	movs	r1, #6
 8002e0c:	f7ff f9b2 	bl	8002174 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8002e10:	4629      	mov	r1, r5
 8002e12:	4620      	mov	r0, r4
 8002e14:	2206      	movs	r2, #6
 8002e16:	f7ff f9cb 	bl	80021b0 <LL_ADC_SetChannelSamplingTime>
}
 8002e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Activate_ADC();
 8002e1e:	f7ff beef 	b.w	8002c00 <P_Activate_ADC1>
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	50040000 	.word	0x50040000
 8002e2c:	19200040 	.word	0x19200040
 8002e30:	50040300 	.word	0x50040300

08002e34 <ConversionStartPoll_ADC_GrpRegular>:
  MODIFY_REG(ADCx->CR,
 8002e34:	4a14      	ldr	r2, [pc, #80]	; (8002e88 <ConversionStartPoll_ADC_GrpRegular+0x54>)
  ADC_Error=0;
 8002e36:	4815      	ldr	r0, [pc, #84]	; (8002e8c <ConversionStartPoll_ADC_GrpRegular+0x58>)
 8002e38:	6893      	ldr	r3, [r2, #8]
 8002e3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e3e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e42:	f043 0304 	orr.w	r3, r3, #4
{
 8002e46:	b570      	push	{r4, r5, r6, lr}
 8002e48:	6093      	str	r3, [r2, #8]
  ADC_TimeOut_Count=0;
 8002e4a:	4a11      	ldr	r2, [pc, #68]	; (8002e90 <ConversionStartPoll_ADC_GrpRegular+0x5c>)
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	6013      	str	r3, [r2, #0]
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
 8002e50:	4a10      	ldr	r2, [pc, #64]	; (8002e94 <ConversionStartPoll_ADC_GrpRegular+0x60>)
  ADC_Error=0;
 8002e52:	7003      	strb	r3, [r0, #0]
 8002e54:	6813      	ldr	r3, [r2, #0]
  while(!LL_DMA_IsActiveFlag_TC1(DMA1));
 8002e56:	0799      	lsls	r1, r3, #30
 8002e58:	d5fc      	bpl.n	8002e54 <ConversionStartPoll_ADC_GrpRegular+0x20>
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002e5a:	4c0b      	ldr	r4, [pc, #44]	; (8002e88 <ConversionStartPoll_ADC_GrpRegular+0x54>)
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002e5c:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
 8002e60:	4625      	mov	r5, r4
 8002e62:	6823      	ldr	r3, [r4, #0]
  while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0) && !Error_preceding && (ADC_Error==0))
 8002e64:	075a      	lsls	r2, r3, #29
 8002e66:	d404      	bmi.n	8002e72 <ConversionStartPoll_ADC_GrpRegular+0x3e>
 8002e68:	6933      	ldr	r3, [r6, #16]
 8002e6a:	059b      	lsls	r3, r3, #22
 8002e6c:	d401      	bmi.n	8002e72 <ConversionStartPoll_ADC_GrpRegular+0x3e>
 8002e6e:	7803      	ldrb	r3, [r0, #0]
 8002e70:	b13b      	cbz	r3, 8002e82 <ConversionStartPoll_ADC_GrpRegular+0x4e>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002e72:	2304      	movs	r3, #4
 8002e74:	602b      	str	r3, [r5, #0]
	if (ADC_Error==1)
 8002e76:	7803      	ldrb	r3, [r0, #0]
 8002e78:	2b01      	cmp	r3, #1
		NonCritical_Sensor_Error=1;
 8002e7a:	bf04      	itt	eq
 8002e7c:	4a06      	ldreq	r2, [pc, #24]	; (8002e98 <ConversionStartPoll_ADC_GrpRegular+0x64>)
 8002e7e:	7013      	strbeq	r3, [r2, #0]
 8002e80:	bd70      	pop	{r4, r5, r6, pc}
	  Wait_for_ADC_TimeOut_();
 8002e82:	f7ff fe11 	bl	8002aa8 <Wait_for_ADC_TimeOut_>
 8002e86:	e7ec      	b.n	8002e62 <ConversionStartPoll_ADC_GrpRegular+0x2e>
 8002e88:	50040000 	.word	0x50040000
 8002e8c:	20008fde 	.word	0x20008fde
 8002e90:	20008fe8 	.word	0x20008fe8
 8002e94:	40020000 	.word	0x40020000
 8002e98:	20008a48 	.word	0x20008a48

08002e9c <all_ADC_read_test>:
  MODIFY_REG(ADCx->CR,
 8002e9c:	4825      	ldr	r0, [pc, #148]	; (8002f34 <all_ADC_read_test+0x98>)
	  BSbuffer[s_flag].LoadCell2[Sub_cnt]= LL_ADC_REG_ReadConversionData12(ADC2);

}

void all_ADC_read_test(void)
{
 8002e9e:	b538      	push	{r3, r4, r5, lr}
 8002ea0:	6883      	ldr	r3, [r0, #8]
//ADC1
	  LL_ADC_REG_StartConversion(ADC1);
	  ADC_TimeOut_Count_Buf=0;
 8002ea2:	4d25      	ldr	r5, [pc, #148]	; (8002f38 <all_ADC_read_test+0x9c>)
	  ADC_Error_Buf=0;
 8002ea4:	4c25      	ldr	r4, [pc, #148]	; (8002f3c <all_ADC_read_test+0xa0>)
 8002ea6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002eaa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002eae:	f043 0304 	orr.w	r3, r3, #4
 8002eb2:	6083      	str	r3, [r0, #8]
	  ADC_TimeOut_Count_Buf=0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	602b      	str	r3, [r5, #0]
	  ADC_Error_Buf=0;
 8002eb8:	7023      	strb	r3, [r4, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002eba:	6803      	ldr	r3, [r0, #0]
	  while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0))
 8002ebc:	075a      	lsls	r2, r3, #29
 8002ebe:	d533      	bpl.n	8002f28 <all_ADC_read_test+0x8c>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	6003      	str	r3, [r0, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002ec4:	6c03      	ldr	r3, [r0, #64]	; 0x40
	  {
		  Wait_for_ADC_timeout_While_Datalog();
	  }
	  LL_ADC_ClearFlag_EOC(ADC1);
	  Test1 = LL_ADC_REG_ReadConversionData12(ADC1);
 8002ec6:	4a1e      	ldr	r2, [pc, #120]	; (8002f40 <all_ADC_read_test+0xa4>)
  MODIFY_REG(ADCx->CR,
 8002ec8:	481e      	ldr	r0, [pc, #120]	; (8002f44 <all_ADC_read_test+0xa8>)
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	8013      	strh	r3, [r2, #0]

	  Test1_mV = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, Test1, LL_ADC_RESOLUTION_12B);
 8002ece:	8813      	ldrh	r3, [r2, #0]
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	f640 43e4 	movw	r3, #3300	; 0xce4
 8002ed6:	4353      	muls	r3, r2
 8002ed8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002edc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ee0:	4a19      	ldr	r2, [pc, #100]	; (8002f48 <all_ADC_read_test+0xac>)
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	8013      	strh	r3, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8002ee6:	6883      	ldr	r3, [r0, #8]
 8002ee8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002eec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ef0:	f043 0304 	orr.w	r3, r3, #4
 8002ef4:	6083      	str	r3, [r0, #8]
//	  loadcell_1= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, Test1, LL_ADC_RESOLUTION_12B);

	  //ADC2
	  LL_ADC_REG_StartConversion(ADC2);
	  ADC_TimeOut_Count_Buf=0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	602b      	str	r3, [r5, #0]
	  ADC_Error_Buf=0;
 8002efa:	7023      	strb	r3, [r4, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002efc:	6803      	ldr	r3, [r0, #0]
	  while ((LL_ADC_IsActiveFlag_EOC(ADC2) == 0))
 8002efe:	075b      	lsls	r3, r3, #29
 8002f00:	d515      	bpl.n	8002f2e <all_ADC_read_test+0x92>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002f02:	2304      	movs	r3, #4
 8002f04:	6003      	str	r3, [r0, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002f06:	6c03      	ldr	r3, [r0, #64]	; 0x40
	  {
		  Wait_for_ADC_timeout_While_Datalog();
	  }
	  LL_ADC_ClearFlag_EOC(ADC2);
	  Test2 = LL_ADC_REG_ReadConversionData12(ADC2);
 8002f08:	4a10      	ldr	r2, [pc, #64]	; (8002f4c <all_ADC_read_test+0xb0>)
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	8013      	strh	r3, [r2, #0]
	  Test2_mV = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, Test2, LL_ADC_RESOLUTION_12B);
 8002f0e:	8813      	ldrh	r3, [r2, #0]
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	f640 43e4 	movw	r3, #3300	; 0xce4
 8002f16:	4353      	muls	r3, r2
 8002f18:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f20:	4a0b      	ldr	r2, [pc, #44]	; (8002f50 <all_ADC_read_test+0xb4>)
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	8013      	strh	r3, [r2, #0]
 8002f26:	bd38      	pop	{r3, r4, r5, pc}
		  Wait_for_ADC_timeout_While_Datalog();
 8002f28:	f7ff fdaa 	bl	8002a80 <Wait_for_ADC_timeout_While_Datalog>
 8002f2c:	e7c5      	b.n	8002eba <all_ADC_read_test+0x1e>
		  Wait_for_ADC_timeout_While_Datalog();
 8002f2e:	f7ff fda7 	bl	8002a80 <Wait_for_ADC_timeout_While_Datalog>
 8002f32:	e7e3      	b.n	8002efc <all_ADC_read_test+0x60>
 8002f34:	50040000 	.word	0x50040000
 8002f38:	20008a2c 	.word	0x20008a2c
 8002f3c:	20008fe7 	.word	0x20008fe7
 8002f40:	20008a1e 	.word	0x20008a1e
 8002f44:	50040100 	.word	0x50040100
 8002f48:	20008ab0 	.word	0x20008ab0
 8002f4c:	20008a14 	.word	0x20008a14
 8002f50:	20008a12 	.word	0x20008a12

08002f54 <Battery_Monitor_Voltage_check>:
	                       LL_DMA_CHANNEL_1);

}

void Battery_Monitor_Voltage_check(void)
{
 8002f54:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(GPIOx->BRR, PinMask);
 8002f56:	4c0d      	ldr	r4, [pc, #52]	; (8002f8c <Battery_Monitor_Voltage_check+0x38>)
 8002f58:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8002f5c:	62a5      	str	r5, [r4, #40]	; 0x28
	ConversionStartPoll_ADC_GrpRegular();                          // Start a Single conversion
	Battery_ADC_Value = LL_ADC_REG_ReadConversionData12(ADC1);     // Battery 12 bit ADC Value
	ADC_conf_strain();
	ADC_Busy_with_Battery_Monitor = 0;
#else
	ADC_conf_battery();
 8002f5e:	f7ff ff1d 	bl	8002d9c <ADC_conf_battery>
	ConversionStartPoll_ADC_GrpRegular();                          // Start a Single conversion
 8002f62:	f7ff ff67 	bl	8002e34 <ConversionStartPoll_ADC_GrpRegular>
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <Battery_Monitor_Voltage_check+0x3c>)
 8002f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	Battery_ADC_Value = LL_ADC_REG_ReadConversionData12(ADC1);     // Battery 12 bit ADC Value
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <Battery_Monitor_Voltage_check+0x40>)
 8002f6c:	801a      	strh	r2, [r3, #0]
  SET_BIT(RCC->AHB2RSTR, Periphs);
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <Battery_Monitor_Voltage_check+0x44>)
 8002f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f72:	432a      	orrs	r2, r5
 8002f74:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 8002f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8002f7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f84:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002f86:	61a5      	str	r5, [r4, #24]
 8002f88:	bd38      	pop	{r3, r4, r5, pc}
 8002f8a:	bf00      	nop
 8002f8c:	48000800 	.word	0x48000800
 8002f90:	50040000 	.word	0x50040000
 8002f94:	20008d30 	.word	0x20008d30
 8002f98:	40021000 	.word	0x40021000

08002f9c <Clear_ErrorTimestamp_Buffer>:

int FPGA_Loop_Error_cnt;

void Clear_ErrorTimestamp_Buffer(void)
{
	ErrorCodeBuf=0;
 8002f9c:	4a02      	ldr	r2, [pc, #8]	; (8002fa8 <Clear_ErrorTimestamp_Buffer+0xc>)
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	7013      	strb	r3, [r2, #0]
	ErrorTimeStampBuf=0;
 8002fa2:	4a02      	ldr	r2, [pc, #8]	; (8002fac <Clear_ErrorTimestamp_Buffer+0x10>)
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	4770      	bx	lr
 8002fa8:	20008788 	.word	0x20008788
 8002fac:	2000878c 	.word	0x2000878c

08002fb0 <Reset_All>:
{
 8002fb0:	b508      	push	{r3, lr}
	last_file=0;
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <Reset_All+0x38>)
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	6019      	str	r1, [r3, #0]
	Sub_cnt=0;                // Array Index count in a single buffer to store values
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <Reset_All+0x3c>)
 8002fba:	6019      	str	r1, [r3, #0]
	w_flag=1;                 // Buffer write flag to be written in FATFS file (1=Buffer1, 0=Buffer0)
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <Reset_All+0x40>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	701a      	strb	r2, [r3, #0]
	s_flag=0;                 // Buffer Store flag to be stored/filled by sensor values in interrupt (1=Buffer1, 0=Buffer0)
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <Reset_All+0x44>)
 8002fc4:	7019      	strb	r1, [r3, #0]
	SD_write_Flag = 0;        // Flag to indicates whether a buffer a full and ready to write in SD card
 8002fc6:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <Reset_All+0x48>)
 8002fc8:	7019      	strb	r1, [r3, #0]
	SD_Write_Count = 0;       // Number of SD write. If reach a predefined value, f_sync() operation will update FATFS files.
 8002fca:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <Reset_All+0x4c>)
 8002fcc:	7019      	strb	r1, [r3, #0]
	Clear_ErrorTimestamp_Buffer();
 8002fce:	f7ff ffe5 	bl	8002f9c <Clear_ErrorTimestamp_Buffer>
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <Reset_All+0x50>)
	Error_reg_log.Error[indxE]=0;
 8002fd4:	460a      	mov	r2, r1
 8002fd6:	f1a3 0008 	sub.w	r0, r3, #8
 8002fda:	540a      	strb	r2, [r1, r0]
	for(int indxE=0;indxE<10;indxE++)
 8002fdc:	3101      	adds	r1, #1
 8002fde:	290a      	cmp	r1, #10
	Error_reg_log.ErrorTime[indxE]=0;
 8002fe0:	f843 2f04 	str.w	r2, [r3, #4]!
	for(int indxE=0;indxE<10;indxE++)
 8002fe4:	d1f9      	bne.n	8002fda <Reset_All+0x2a>
}
 8002fe6:	bd08      	pop	{r3, pc}
 8002fe8:	20008d5c 	.word	0x20008d5c
 8002fec:	20000610 	.word	0x20000610
 8002ff0:	20000030 	.word	0x20000030
 8002ff4:	20000630 	.word	0x20000630
 8002ff8:	2000877c 	.word	0x2000877c
 8002ffc:	2000060d 	.word	0x2000060d
 8003000:	200086a4 	.word	0x200086a4

08003004 <Save_ErrorTimestamp_Buffer>:
}

void Save_ErrorTimestamp_Buffer(uint8_t ErrorCode)
{
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ErrorCodeBuf=ErrorCode;
 8003006:	4b21      	ldr	r3, [pc, #132]	; (800308c <Save_ErrorTimestamp_Buffer+0x88>)
{
 8003008:	4606      	mov	r6, r0
	ErrorCodeBuf=ErrorCode;
 800300a:	7018      	strb	r0, [r3, #0]
	ErrorTimeStampBuf=__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))*10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800300c:	f7ff f976 	bl	80022fc <LL_RTC_TIME_GetHour.constprop.13>
 8003010:	4604      	mov	r4, r0
 8003012:	f7ff f973 	bl	80022fc <LL_RTC_TIME_GetHour.constprop.13>
 8003016:	4605      	mov	r5, r0
 8003018:	f7ff f956 	bl	80022c8 <LL_RTC_TIME_GetMinute.constprop.12>
 800301c:	f3c4 1403 	ubfx	r4, r4, #4, #4
 8003020:	4607      	mov	r7, r0
 8003022:	f7ff f951 	bl	80022c8 <LL_RTC_TIME_GetMinute.constprop.12>
 8003026:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800302a:	f005 040f 	and.w	r4, r5, #15
 800302e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8003032:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8003036:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800303a:	f000 000f 	and.w	r0, r0, #15
 800303e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8003042:	b2c0      	uxtb	r0, r0
 8003044:	2364      	movs	r3, #100	; 0x64
 8003046:	fb10 f003 	smulbb	r0, r0, r3
 800304a:	b2e4      	uxtb	r4, r4
 800304c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003050:	fb03 0404 	mla	r4, r3, r4, r0
 8003054:	f7ff f920 	bl	8002298 <LL_RTC_TIME_GetSecond.constprop.11>
 8003058:	4605      	mov	r5, r0
 800305a:	f7ff f91d 	bl	8002298 <LL_RTC_TIME_GetSecond.constprop.11>
 800305e:	f3c5 1303 	ubfx	r3, r5, #4, #4
 8003062:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003066:	f000 000f 	and.w	r0, r0, #15
 800306a:	eb00 0043 	add.w	r0, r0, r3, lsl #1

	Error_reg_log.Error[Error_indx]=ErrorCode;
 800306e:	4908      	ldr	r1, [pc, #32]	; (8003090 <Save_ErrorTimestamp_Buffer+0x8c>)
	ErrorTimeStampBuf=__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))*10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8003070:	4b08      	ldr	r3, [pc, #32]	; (8003094 <Save_ErrorTimestamp_Buffer+0x90>)
	Error_reg_log.Error[Error_indx]=ErrorCode;
 8003072:	4a09      	ldr	r2, [pc, #36]	; (8003098 <Save_ErrorTimestamp_Buffer+0x94>)
	ErrorTimeStampBuf=__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))*10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8003074:	fa54 f480 	uxtab	r4, r4, r0
 8003078:	601c      	str	r4, [r3, #0]
	Error_reg_log.Error[Error_indx]=ErrorCode;
 800307a:	780b      	ldrb	r3, [r1, #0]
 800307c:	54d6      	strb	r6, [r2, r3]
	Error_reg_log.ErrorTime[Error_indx]=ErrorTimeStampBuf;
 800307e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Error_indx++;
 8003082:	3301      	adds	r3, #1
 8003084:	700b      	strb	r3, [r1, #0]
	Error_reg_log.ErrorTime[Error_indx]=ErrorTimeStampBuf;
 8003086:	60d4      	str	r4, [r2, #12]
	Error_indx++;
 8003088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800308a:	bf00      	nop
 800308c:	20008788 	.word	0x20008788
 8003090:	20008a5f 	.word	0x20008a5f
 8003094:	2000878c 	.word	0x2000878c
 8003098:	2000869c 	.word	0x2000869c

0800309c <AIM_Error_Handler>:
}

void AIM_Error_Handler(int AIM_Error_Code)
{
    switch(AIM_Error_Code) {
 800309c:	3801      	subs	r0, #1
{
 800309e:	b510      	push	{r4, lr}
    switch(AIM_Error_Code) {
 80030a0:	280f      	cmp	r0, #15
 80030a2:	d864      	bhi.n	800316e <AIM_Error_Handler+0xd2>
 80030a4:	e8df f000 	tbb	[pc, r0]
 80030a8:	392e631e 	.word	0x392e631e
 80030ac:	4663630f 	.word	0x4663630f
 80030b0:	54636363 	.word	0x54636363
 80030b4:	08636363 	.word	0x08636363

	case FPGA_SPI_R_Error:
		Save_ErrorTimestamp_Buffer(FPGA_SPI_R_Error);
 80030b8:	2010      	movs	r0, #16
 80030ba:	f7ff ffa3 	bl	8003004 <Save_ErrorTimestamp_Buffer>
		FATAL_Error = 1;
 80030be:	4b2c      	ldr	r3, [pc, #176]	; (8003170 <AIM_Error_Handler+0xd4>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	701a      	strb	r2, [r3, #0]

	break;
 80030c4:	bd10      	pop	{r4, pc}

			case f_write_E:
				file_reopen();
 80030c6:	f7ff f9f7 	bl	80024b8 <file_reopen>
				if (Fat_write_read_fail==1) // Could not solve write issue by reopening file
 80030ca:	4b2a      	ldr	r3, [pc, #168]	; (8003174 <AIM_Error_Handler+0xd8>)
 80030cc:	681c      	ldr	r4, [r3, #0]
 80030ce:	2c01      	cmp	r4, #1
 80030d0:	d14d      	bne.n	800316e <AIM_Error_Handler+0xd2>
								  {
									   Fat_read_mnt_fail=0;
 80030d2:	4b29      	ldr	r3, [pc, #164]	; (8003178 <AIM_Error_Handler+0xdc>)
 80030d4:	2200      	movs	r2, #0
										Save_ErrorTimestamp_Buffer(f_write_E);
 80030d6:	2005      	movs	r0, #5
									   Fat_read_mnt_fail=0;
 80030d8:	601a      	str	r2, [r3, #0]
										Save_ErrorTimestamp_Buffer(f_write_E);
 80030da:	f7ff ff93 	bl	8003004 <Save_ErrorTimestamp_Buffer>
										File_Sensor_write_issue=1;
 80030de:	4b27      	ldr	r3, [pc, #156]	; (800317c <AIM_Error_Handler+0xe0>)
				file_reopen_sync();
				if (Fat_sync_read_fail==1) // Could not solve write issue by reopening file
								  {
										Fat_sync_read_fail=0;
										Save_ErrorTimestamp_Buffer(f_sync_E);
										File_Sensor_close_issue=1;
 80030e0:	701c      	strb	r4, [r3, #0]
 80030e2:	e018      	b.n	8003116 <AIM_Error_Handler+0x7a>
				file_mnt_reopen();
 80030e4:	f7ff fa00 	bl	80024e8 <file_mnt_reopen>
				  if (Fat_read_mnt_fail==1) // Could not solve read issue by FATFS mount
 80030e8:	4b23      	ldr	r3, [pc, #140]	; (8003178 <AIM_Error_Handler+0xdc>)
 80030ea:	681c      	ldr	r4, [r3, #0]
 80030ec:	2c01      	cmp	r4, #1
 80030ee:	d13e      	bne.n	800316e <AIM_Error_Handler+0xd2>
					  Fat_read_mnt_fail=0;
 80030f0:	2200      	movs	r2, #0
						Save_ErrorTimestamp_Buffer(f_open_E);
 80030f2:	4620      	mov	r0, r4
					  Fat_read_mnt_fail=0;
 80030f4:	601a      	str	r2, [r3, #0]
						Save_ErrorTimestamp_Buffer(f_open_E);
 80030f6:	f7ff ff85 	bl	8003004 <Save_ErrorTimestamp_Buffer>
						FATAL_Error = 1;
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <AIM_Error_Handler+0xd4>)
 80030fc:	701c      	strb	r4, [r3, #0]
						Skip_FATFS =1;
 80030fe:	4b20      	ldr	r3, [pc, #128]	; (8003180 <AIM_Error_Handler+0xe4>)
										FATAL_Error = 1;
 8003100:	701c      	strb	r4, [r3, #0]
 8003102:	bd10      	pop	{r4, pc}
				Try_FATFS_Mount();
 8003104:	f7ff f992 	bl	800242c <Try_FATFS_Mount>
				if (Skip_FATFS==1)  // Could not solve FATFS mount
 8003108:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <AIM_Error_Handler+0xe4>)
 800310a:	781c      	ldrb	r4, [r3, #0]
 800310c:	2c01      	cmp	r4, #1
 800310e:	d12e      	bne.n	800316e <AIM_Error_Handler+0xd2>
				Save_ErrorTimestamp_Buffer(f_mount_E);
 8003110:	2003      	movs	r0, #3
 8003112:	f7ff ff77 	bl	8003004 <Save_ErrorTimestamp_Buffer>
										FATAL_Error = 1;
 8003116:	4b16      	ldr	r3, [pc, #88]	; (8003170 <AIM_Error_Handler+0xd4>)
 8003118:	e7f2      	b.n	8003100 <AIM_Error_Handler+0x64>
				file_reopen_sync();
 800311a:	f7ff f9b5 	bl	8002488 <file_reopen_sync>
				if (Fat_sync_read_fail==1) // Could not solve write issue by reopening file
 800311e:	4b19      	ldr	r3, [pc, #100]	; (8003184 <AIM_Error_Handler+0xe8>)
 8003120:	681c      	ldr	r4, [r3, #0]
 8003122:	2c01      	cmp	r4, #1
 8003124:	d123      	bne.n	800316e <AIM_Error_Handler+0xd2>
										Fat_sync_read_fail=0;
 8003126:	2200      	movs	r2, #0
										Save_ErrorTimestamp_Buffer(f_sync_E);
 8003128:	2004      	movs	r0, #4
										Fat_sync_read_fail=0;
 800312a:	601a      	str	r2, [r3, #0]
										Save_ErrorTimestamp_Buffer(f_sync_E);
 800312c:	f7ff ff6a 	bl	8003004 <Save_ErrorTimestamp_Buffer>
										File_Sensor_close_issue=1;
 8003130:	4b15      	ldr	r3, [pc, #84]	; (8003188 <AIM_Error_Handler+0xec>)
 8003132:	e7d5      	b.n	80030e0 <AIM_Error_Handler+0x44>

			break;

			case SPI_Acc_Error :

				if (SPI_ErrorCnt>3)
 8003134:	4a15      	ldr	r2, [pc, #84]	; (800318c <AIM_Error_Handler+0xf0>)
 8003136:	7813      	ldrb	r3, [r2, #0]
 8003138:	2b03      	cmp	r3, #3
 800313a:	d916      	bls.n	800316a <AIM_Error_Handler+0xce>
				{
				SPI_ErrorCnt=0;
 800313c:	2300      	movs	r3, #0
 800313e:	7013      	strb	r3, [r2, #0]
				FATAL_Error = 1;
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <AIM_Error_Handler+0xd4>)
 8003142:	2201      	movs	r2, #1
 8003144:	701a      	strb	r2, [r3, #0]
				Save_ErrorTimestamp_Buffer(SPI_Acc_Error);
 8003146:	2008      	movs	r0, #8
		    default :

		    break;

    }
}
 8003148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				Save_ErrorTimestamp_Buffer(ADC_R_Error);
 800314c:	f7ff bf5a 	b.w	8003004 <Save_ErrorTimestamp_Buffer>
	Battery_Monitor_Voltage_check();
 8003150:	f7ff ff00 	bl	8002f54 <Battery_Monitor_Voltage_check>
				if (ADC_ErrorCnt>3)
 8003154:	4a0e      	ldr	r2, [pc, #56]	; (8003190 <AIM_Error_Handler+0xf4>)
 8003156:	7813      	ldrb	r3, [r2, #0]
 8003158:	2b03      	cmp	r3, #3
 800315a:	d906      	bls.n	800316a <AIM_Error_Handler+0xce>
				ADC_ErrorCnt=0;
 800315c:	2300      	movs	r3, #0
 800315e:	7013      	strb	r3, [r2, #0]
				FATAL_Error = 1;
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <AIM_Error_Handler+0xd4>)
 8003162:	2201      	movs	r2, #1
 8003164:	701a      	strb	r2, [r3, #0]
				Save_ErrorTimestamp_Buffer(ADC_R_Error);
 8003166:	200c      	movs	r0, #12
 8003168:	e7ee      	b.n	8003148 <AIM_Error_Handler+0xac>
				ADC_ErrorCnt++;
 800316a:	3301      	adds	r3, #1
 800316c:	7013      	strb	r3, [r2, #0]
 800316e:	bd10      	pop	{r4, pc}
 8003170:	20008d58 	.word	0x20008d58
 8003174:	20008a08 	.word	0x20008a08
 8003178:	20008aac 	.word	0x20008aac
 800317c:	20008a28 	.word	0x20008a28
 8003180:	20008d59 	.word	0x20008d59
 8003184:	20008a0c 	.word	0x20008a0c
 8003188:	20008ae8 	.word	0x20008ae8
 800318c:	20008fec 	.word	0x20008fec
 8003190:	20008d60 	.word	0x20008d60

08003194 <FATFS_Init>:
{
 8003194:	b510      	push	{r4, lr}
	  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8003196:	490b      	ldr	r1, [pc, #44]	; (80031c4 <FATFS_Init+0x30>)
 8003198:	480b      	ldr	r0, [pc, #44]	; (80031c8 <FATFS_Init+0x34>)
 800319a:	4c0c      	ldr	r4, [pc, #48]	; (80031cc <FATFS_Init+0x38>)
 800319c:	f007 fbf6 	bl	800a98c <FATFS_LinkDriver>
 80031a0:	b928      	cbnz	r0, 80031ae <FATFS_Init+0x1a>
			 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 80031a2:	2201      	movs	r2, #1
 80031a4:	4907      	ldr	r1, [pc, #28]	; (80031c4 <FATFS_Init+0x30>)
 80031a6:	480a      	ldr	r0, [pc, #40]	; (80031d0 <FATFS_Init+0x3c>)
 80031a8:	f006 ff96 	bl	800a0d8 <f_mount>
 80031ac:	b108      	cbz	r0, 80031b2 <FATFS_Init+0x1e>
				 Fat_mnt_fail=1;
 80031ae:	2301      	movs	r3, #1
 80031b0:	6023      	str	r3, [r4, #0]
	  if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d104      	bne.n	80031c2 <FATFS_Init+0x2e>
		  AIM_Error_Handler(f_mount_E);
 80031b8:	2003      	movs	r0, #3
}
 80031ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		  AIM_Error_Handler(f_mount_E);
 80031be:	f7ff bf6d 	b.w	800309c <AIM_Error_Handler>
 80031c2:	bd10      	pop	{r4, pc}
 80031c4:	20008af4 	.word	0x20008af4
 80031c8:	0800c97c 	.word	0x0800c97c
 80031cc:	20008a04 	.word	0x20008a04
 80031d0:	20008b00 	.word	0x20008b00

080031d4 <Check_SD_Command_File>:
{
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  Data_log_Start_Resume = 0;
 80031d6:	4c31      	ldr	r4, [pc, #196]	; (800329c <Check_SD_Command_File+0xc8>)
	 if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 80031d8:	4931      	ldr	r1, [pc, #196]	; (80032a0 <Check_SD_Command_File+0xcc>)
 80031da:	4832      	ldr	r0, [pc, #200]	; (80032a4 <Check_SD_Command_File+0xd0>)
 80031dc:	4e32      	ldr	r6, [pc, #200]	; (80032a8 <Check_SD_Command_File+0xd4>)
	  Data_log_Start_Resume = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	7023      	strb	r3, [r4, #0]
	 if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 80031e2:	f007 fbd3 	bl	800a98c <FATFS_LinkDriver>
 80031e6:	b930      	cbnz	r0, 80031f6 <Check_SD_Command_File+0x22>
	 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 80031e8:	2201      	movs	r2, #1
 80031ea:	492d      	ldr	r1, [pc, #180]	; (80032a0 <Check_SD_Command_File+0xcc>)
 80031ec:	482f      	ldr	r0, [pc, #188]	; (80032ac <Check_SD_Command_File+0xd8>)
 80031ee:	f006 ff73 	bl	800a0d8 <f_mount>
 80031f2:	4605      	mov	r5, r0
 80031f4:	b148      	cbz	r0, 800320a <Check_SD_Command_File+0x36>
		 Fat_mnt_fail=1;
 80031f6:	2301      	movs	r3, #1
 80031f8:	6033      	str	r3, [r6, #0]
	  if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 80031fa:	6833      	ldr	r3, [r6, #0]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d14c      	bne.n	800329a <Check_SD_Command_File+0xc6>
		  AIM_Error_Handler(f_mount_E);
 8003200:	2003      	movs	r0, #3
}
 8003202:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		  AIM_Error_Handler(f_mount_E);
 8003206:	f7ff bf49 	b.w	800309c <AIM_Error_Handler>
		 if(f_open(&MyFile, "EnterDFU.txt", FA_READ) != FR_OK) // Check the presence of EnterDFU.txt file
 800320a:	2201      	movs	r2, #1
 800320c:	4928      	ldr	r1, [pc, #160]	; (80032b0 <Check_SD_Command_File+0xdc>)
 800320e:	4829      	ldr	r0, [pc, #164]	; (80032b4 <Check_SD_Command_File+0xe0>)
 8003210:	f006 ff98 	bl	800a144 <f_open>
 8003214:	4607      	mov	r7, r0
 8003216:	b368      	cbz	r0, 8003274 <Check_SD_Command_File+0xa0>
			   if(f_open(&MyFile, "EnterVCP.txt", FA_READ) != FR_OK) // Check the presence of EnterVCP.txt file
 8003218:	2201      	movs	r2, #1
 800321a:	4927      	ldr	r1, [pc, #156]	; (80032b8 <Check_SD_Command_File+0xe4>)
 800321c:	4825      	ldr	r0, [pc, #148]	; (80032b4 <Check_SD_Command_File+0xe0>)
 800321e:	f006 ff91 	bl	800a144 <f_open>
 8003222:	b1f0      	cbz	r0, 8003262 <Check_SD_Command_File+0x8e>
					 if (Logstart_Delete ==1)
 8003224:	4b25      	ldr	r3, [pc, #148]	; (80032bc <Check_SD_Command_File+0xe8>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	2a01      	cmp	r2, #1
 800322a:	d104      	bne.n	8003236 <Check_SD_Command_File+0x62>
								  if (f_unlink ("LogStart.txt") == FR_OK) {    // If LogStart.txt file present, delete the file
 800322c:	4824      	ldr	r0, [pc, #144]	; (80032c0 <Check_SD_Command_File+0xec>)
						 Logstart_Delete=0;
 800322e:	601d      	str	r5, [r3, #0]
					  if (f_unlink ("EnterVCP.txt") == FR_OK) {    // If EnterVCP.txt file present, delete the file
 8003230:	f007 fb0f 	bl	800a852 <f_unlink>
 8003234:	e006      	b.n	8003244 <Check_SD_Command_File+0x70>
				   if(f_open(&MyFile, "LogStart.txt", FA_READ) != FR_OK) // Check the presence of LogStart.txt file
 8003236:	2201      	movs	r2, #1
 8003238:	4921      	ldr	r1, [pc, #132]	; (80032c0 <Check_SD_Command_File+0xec>)
 800323a:	481e      	ldr	r0, [pc, #120]	; (80032b4 <Check_SD_Command_File+0xe0>)
 800323c:	f006 ff82 	bl	800a144 <f_open>
 8003240:	b148      	cbz	r0, 8003256 <Check_SD_Command_File+0x82>
					   Data_log_Start_Resume = 0;          // Data Log Stops
 8003242:	7025      	strb	r5, [r4, #0]
			f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 8003244:	2200      	movs	r2, #0
 8003246:	491f      	ldr	r1, [pc, #124]	; (80032c4 <Check_SD_Command_File+0xf0>)
 8003248:	4610      	mov	r0, r2
 800324a:	f006 ff45 	bl	800a0d8 <f_mount>
			FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 800324e:	4814      	ldr	r0, [pc, #80]	; (80032a0 <Check_SD_Command_File+0xcc>)
 8003250:	f007 fbb8 	bl	800a9c4 <FATFS_UnLinkDriver>
 8003254:	e7d1      	b.n	80031fa <Check_SD_Command_File+0x26>
					   Data_log_Start_Resume = 1;          // Data Log Starts/Resume
 8003256:	2301      	movs	r3, #1
					   f_close(&MyFile);
 8003258:	4816      	ldr	r0, [pc, #88]	; (80032b4 <Check_SD_Command_File+0xe0>)
					   Data_log_Start_Resume = 1;          // Data Log Starts/Resume
 800325a:	7023      	strb	r3, [r4, #0]
					   f_close(&MyFile);
 800325c:	f007 f999 	bl	800a592 <f_close>
 8003260:	e7f0      	b.n	8003244 <Check_SD_Command_File+0x70>
				     USB_Mode = 1;                       // USB VCP mode in Next USB Connectivity
 8003262:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <Check_SD_Command_File+0xf4>)
				     Data_log_Start_Resume = 0;          // Data Log Stops
 8003264:	7020      	strb	r0, [r4, #0]
				     USB_Mode = 1;                       // USB VCP mode in Next USB Connectivity
 8003266:	2201      	movs	r2, #1
					 f_close(&MyFile);
 8003268:	4812      	ldr	r0, [pc, #72]	; (80032b4 <Check_SD_Command_File+0xe0>)
				     USB_Mode = 1;                       // USB VCP mode in Next USB Connectivity
 800326a:	701a      	strb	r2, [r3, #0]
					 f_close(&MyFile);
 800326c:	f007 f991 	bl	800a592 <f_close>
					  if (f_unlink ("EnterVCP.txt") == FR_OK) {    // If EnterVCP.txt file present, delete the file
 8003270:	4811      	ldr	r0, [pc, #68]	; (80032b8 <Check_SD_Command_File+0xe4>)
 8003272:	e7dd      	b.n	8003230 <Check_SD_Command_File+0x5c>
			 f_close(&MyFile);
 8003274:	480f      	ldr	r0, [pc, #60]	; (80032b4 <Check_SD_Command_File+0xe0>)
 8003276:	f007 f98c 	bl	800a592 <f_close>
			  if (f_unlink ("EnterDFU.txt") == FR_OK) {    // If EnterDFU.txt file present, delete the file
 800327a:	480d      	ldr	r0, [pc, #52]	; (80032b0 <Check_SD_Command_File+0xdc>)
 800327c:	f007 fae9 	bl	800a852 <f_unlink>
				f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 8003280:	463a      	mov	r2, r7
 8003282:	4910      	ldr	r1, [pc, #64]	; (80032c4 <Check_SD_Command_File+0xf0>)
 8003284:	4638      	mov	r0, r7
 8003286:	f006 ff27 	bl	800a0d8 <f_mount>
				FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 800328a:	4805      	ldr	r0, [pc, #20]	; (80032a0 <Check_SD_Command_File+0xcc>)
 800328c:	f007 fb9a 	bl	800a9c4 <FATFS_UnLinkDriver>
			*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 8003290:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <Check_SD_Command_File+0xf8>)
 8003292:	4a0f      	ldr	r2, [pc, #60]	; (80032d0 <Check_SD_Command_File+0xfc>)
 8003294:	601a      	str	r2, [r3, #0]
			 NVIC_SystemReset();        // System reset
 8003296:	f7fe ff29 	bl	80020ec <NVIC_SystemReset>
 800329a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800329c:	20008773 	.word	0x20008773
 80032a0:	20008af4 	.word	0x20008af4
 80032a4:	0800c97c 	.word	0x0800c97c
 80032a8:	20008a04 	.word	0x20008a04
 80032ac:	20008b00 	.word	0x20008b00
 80032b0:	0800c6e2 	.word	0x0800c6e2
 80032b4:	20008d64 	.word	0x20008d64
 80032b8:	0800c6ef 	.word	0x0800c6ef
 80032bc:	200094f4 	.word	0x200094f4
 80032c0:	0800c704 	.word	0x0800c704
 80032c4:	0800c89f 	.word	0x0800c89f
 80032c8:	20009022 	.word	0x20009022
 80032cc:	20017ff0 	.word	0x20017ff0
 80032d0:	deadbeef 	.word	0xdeadbeef

080032d4 <Execute_VCP_Command>:
	 if (EnterReset_Create ==1)
 80032d4:	4a10      	ldr	r2, [pc, #64]	; (8003318 <Execute_VCP_Command+0x44>)
 80032d6:	6811      	ldr	r1, [r2, #0]
{
 80032d8:	b538      	push	{r3, r4, r5, lr}
	  Data_log_Start_Resume = 0;
 80032da:	4c10      	ldr	r4, [pc, #64]	; (800331c <Execute_VCP_Command+0x48>)
 80032dc:	2300      	movs	r3, #0
	 if (EnterReset_Create ==1)
 80032de:	2901      	cmp	r1, #1
	  Data_log_Start_Resume = 0;
 80032e0:	7023      	strb	r3, [r4, #0]
	 if (EnterReset_Create ==1)
 80032e2:	d102      	bne.n	80032ea <Execute_VCP_Command+0x16>
		 EnterReset_Create =0;
 80032e4:	6013      	str	r3, [r2, #0]
			NVIC_SystemReset();    // System reset
 80032e6:	f7fe ff01 	bl	80020ec <NVIC_SystemReset>
	 if (EnterDFU_Create ==1)
 80032ea:	4a0d      	ldr	r2, [pc, #52]	; (8003320 <Execute_VCP_Command+0x4c>)
 80032ec:	6811      	ldr	r1, [r2, #0]
 80032ee:	2901      	cmp	r1, #1
 80032f0:	d104      	bne.n	80032fc <Execute_VCP_Command+0x28>
		    EnterDFU_Create =0;
 80032f2:	6013      	str	r3, [r2, #0]
			*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <Execute_VCP_Command+0x50>)
 80032f6:	4a0c      	ldr	r2, [pc, #48]	; (8003328 <Execute_VCP_Command+0x54>)
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	e7f4      	b.n	80032e6 <Execute_VCP_Command+0x12>
	 if (Logstart_Create ==1)
 80032fc:	4a0b      	ldr	r2, [pc, #44]	; (800332c <Execute_VCP_Command+0x58>)
 80032fe:	6815      	ldr	r5, [r2, #0]
 8003300:	2d01      	cmp	r5, #1
 8003302:	d107      	bne.n	8003314 <Execute_VCP_Command+0x40>
		 Logstart_Create=0;
 8003304:	6013      	str	r3, [r2, #0]
		 FATFS_Logstart_Ready();
 8003306:	f7ff f917 	bl	8002538 <FATFS_Logstart_Ready>
		 Data_log_Start_Resume = 1;
 800330a:	7025      	strb	r5, [r4, #0]
}
 800330c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		 Check_SD_Command_File();
 8003310:	f7ff bf60 	b.w	80031d4 <Check_SD_Command_File>
 8003314:	bd38      	pop	{r3, r4, r5, pc}
 8003316:	bf00      	nop
 8003318:	20009de0 	.word	0x20009de0
 800331c:	20008773 	.word	0x20008773
 8003320:	2000a9d0 	.word	0x2000a9d0
 8003324:	20017ff0 	.word	0x20017ff0
 8003328:	deadbeef 	.word	0xdeadbeef
 800332c:	20009570 	.word	0x20009570

08003330 <Open_File_For_Sensor_Write>:
{
 8003330:	b538      	push	{r3, r4, r5, lr}
	if (Skip_FATFS==0)
 8003332:	4b11      	ldr	r3, [pc, #68]	; (8003378 <Open_File_For_Sensor_Write+0x48>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	b9eb      	cbnz	r3, 8003374 <Open_File_For_Sensor_Write+0x44>
		res= f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8003338:	4c10      	ldr	r4, [pc, #64]	; (800337c <Open_File_For_Sensor_Write+0x4c>)
 800333a:	4d11      	ldr	r5, [pc, #68]	; (8003380 <Open_File_For_Sensor_Write+0x50>)
	Convert_SD_FileName_Unix_Time();               // Read RTC time and store in Sensor Filename (UNIX format)
 800333c:	f7ff f9a6 	bl	800268c <Convert_SD_FileName_Unix_Time>
		res= f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8003340:	2212      	movs	r2, #18
 8003342:	4910      	ldr	r1, [pc, #64]	; (8003384 <Open_File_For_Sensor_Write+0x54>)
 8003344:	4620      	mov	r0, r4
 8003346:	f006 fefd 	bl	800a144 <f_open>
 800334a:	7028      	strb	r0, [r5, #0]
		if(res != FR_OK) // Create and Open a new text file object with write access
 800334c:	b140      	cbz	r0, 8003360 <Open_File_For_Sensor_Write+0x30>
			        AIM_Error_Handler(f_open_E);
 800334e:	2001      	movs	r0, #1
 8003350:	f7ff fea4 	bl	800309c <AIM_Error_Handler>
				 delay_us(1000);  // Arbitrary delay to complete FATFS SD write
 8003354:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 8003358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				 delay_us(1000);  // Arbitrary delay to complete FATFS SD write
 800335c:	f000 ba12 	b.w	8003784 <delay_us>
							f_lseek(&MyFile, MyFile.fsize);   // Increase File Size when big file to write
 8003360:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 8003364:	4620      	mov	r0, r4
 8003366:	f007 f925 	bl	800a5b4 <f_lseek>
							 res= f_sync(&MyFile);
 800336a:	4620      	mov	r0, r4
 800336c:	f007 f8b1 	bl	800a4d2 <f_sync>
 8003370:	7028      	strb	r0, [r5, #0]
 8003372:	e7ef      	b.n	8003354 <Open_File_For_Sensor_Write+0x24>
 8003374:	bd38      	pop	{r3, r4, r5, pc}
 8003376:	bf00      	nop
 8003378:	20008d59 	.word	0x20008d59
 800337c:	20008d64 	.word	0x20008d64
 8003380:	20008fe6 	.word	0x20008fe6
 8003384:	20008a4c 	.word	0x20008a4c

08003388 <Datalog_Sensor_Initialization>:
{
 8003388:	b508      	push	{r3, lr}
		 FATFS_Init();
 800338a:	f7ff ff03 	bl	8003194 <FATFS_Init>
		Open_File_For_Sensor_Write();
 800338e:	f7ff ffcf 	bl	8003330 <Open_File_For_Sensor_Write>
		if (Skip_FATFS==0)
 8003392:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <Datalog_Sensor_Initialization+0x1c>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	b91b      	cbnz	r3, 80033a0 <Datalog_Sensor_Initialization+0x18>
}
 8003398:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Reset_All();                       // Reset All Buffer parameters for FATFS SDIO write
 800339c:	f7ff be08 	b.w	8002fb0 <Reset_All>
 80033a0:	bd08      	pop	{r3, pc}
 80033a2:	bf00      	nop
 80033a4:	20008d59 	.word	0x20008d59

080033a8 <Prepare_Data_Log_State>:
{
 80033a8:	b510      	push	{r4, lr}
	   if (Skip_FATFS==0)   // If there's no FATFS SD error
 80033aa:	4c14      	ldr	r4, [pc, #80]	; (80033fc <Prepare_Data_Log_State+0x54>)
 80033ac:	7821      	ldrb	r1, [r4, #0]
 80033ae:	bb21      	cbnz	r1, 80033fa <Prepare_Data_Log_State+0x52>
		   Battery_ADC_Value=2500;
 80033b0:	4b13      	ldr	r3, [pc, #76]	; (8003400 <Prepare_Data_Log_State+0x58>)
 80033b2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80033b6:	801a      	strh	r2, [r3, #0]
 if (Data_log_Start_Resume == 1)       // Continue Data Log after USB disconnect
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <Prepare_Data_Log_State+0x5c>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d112      	bne.n	80033e6 <Prepare_Data_Log_State+0x3e>
	 LED_Nulceo_Blinking_1s();
 80033c0:	f7fe faf3 	bl	80019aa <LED_Nulceo_Blinking_1s>
	 LED_Nucleo_OFF();
 80033c4:	f7fe fadd 	bl	8001982 <LED_Nucleo_OFF>
	 LED_SPI_Mode();
 80033c8:	f7fe f98e 	bl	80016e8 <LED_SPI_Mode>
	 Datalog_Sensor_Initialization();
 80033cc:	f7ff ffdc 	bl	8003388 <Datalog_Sensor_Initialization>
   if (Skip_FATFS==0)   // If there's no FATFS SD error
 80033d0:	7823      	ldrb	r3, [r4, #0]
 80033d2:	b993      	cbnz	r3, 80033fa <Prepare_Data_Log_State+0x52>
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 80033d4:	4a0c      	ldr	r2, [pc, #48]	; (8003408 <Prepare_Data_Log_State+0x60>)
 80033d6:	6893      	ldr	r3, [r2, #8]
 80033d8:	f043 0302 	orr.w	r3, r3, #2
 80033dc:	6093      	str	r3, [r2, #8]
 80033de:	4b0b      	ldr	r3, [pc, #44]	; (800340c <Prepare_Data_Log_State+0x64>)
 80033e0:	2204      	movs	r2, #4
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	bd10      	pop	{r4, pc}
	else if (VCP_Bypass==1)
 80033e6:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <Prepare_Data_Log_State+0x68>)
 80033e8:	7813      	ldrb	r3, [r2, #0]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d103      	bne.n	80033f6 <Prepare_Data_Log_State+0x4e>
		VCP_Bypass= 0;
 80033ee:	7011      	strb	r1, [r2, #0]
		Pros_state = LP_STOP;
 80033f0:	4a08      	ldr	r2, [pc, #32]	; (8003414 <Prepare_Data_Log_State+0x6c>)
 80033f2:	7013      	strb	r3, [r2, #0]
 80033f4:	bd10      	pop	{r4, pc}
  NVIC_SystemReset();
 80033f6:	f7fe fe79 	bl	80020ec <NVIC_SystemReset>
 80033fa:	bd10      	pop	{r4, pc}
 80033fc:	20008d59 	.word	0x20008d59
 8003400:	20008d30 	.word	0x20008d30
 8003404:	20008773 	.word	0x20008773
 8003408:	40009400 	.word	0x40009400
 800340c:	e000e100 	.word	0xe000e100
 8003410:	20008afd 	.word	0x20008afd
 8003414:	20008730 	.word	0x20008730

08003418 <USB_Init_Start>:
{
 8003418:	b538      	push	{r3, r4, r5, lr}
	SD_POWER_ON();
 800341a:	f7fe fa99 	bl	8001950 <SD_POWER_ON>
	 Pros_state = LP_STOP;                  // Next state
 800341e:	4b2e      	ldr	r3, [pc, #184]	; (80034d8 <USB_Init_Start+0xc0>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003420:	492e      	ldr	r1, [pc, #184]	; (80034dc <USB_Init_Start+0xc4>)
	if (Data_log_Start_Resume == 1 )    // If Data log was in operation
 8003422:	4c2f      	ldr	r4, [pc, #188]	; (80034e0 <USB_Init_Start+0xc8>)
	 Pros_state = LP_STOP;                  // Next state
 8003424:	2201      	movs	r2, #1
 8003426:	701a      	strb	r2, [r3, #0]
 8003428:	2304      	movs	r3, #4
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	 USB_Clock_Ready();
 800342e:	f7fe ffb7 	bl	80023a0 <USB_Clock_Ready>
 8003432:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003436:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if (Data_log_Start_Resume == 1 )    // If Data log was in operation
 800343a:	7822      	ldrb	r2, [r4, #0]
 800343c:	2a01      	cmp	r2, #1
 800343e:	d101      	bne.n	8003444 <USB_Init_Start+0x2c>
		File_Close_Update_Unlink();
 8003440:	f7ff fa38 	bl	80028b4 <File_Close_Update_Unlink>
	Data_log_Start_Resume = 0;
 8003444:	2500      	movs	r5, #0
 8003446:	7025      	strb	r5, [r4, #0]
    HAL_ResumeTick();                                       // Before entering USB mode, SYS_tick needs to enable
 8003448:	f001 f9ae 	bl	80047a8 <HAL_ResumeTick>
	if (USB_Mode == 1)               // USB MSC Mode  // Default: USB VCP mode (0), MSC (1)
 800344c:	4b25      	ldr	r3, [pc, #148]	; (80034e4 <USB_Init_Start+0xcc>)
 800344e:	4c26      	ldr	r4, [pc, #152]	; (80034e8 <USB_Init_Start+0xd0>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d115      	bne.n	8003482 <USB_Init_Start+0x6a>
		USB_MSC_Init_Start();
 8003456:	f7ff f8d5 	bl	8002604 <USB_MSC_Init_Start>
		 FATAL_Error = 0;
 800345a:	7025      	strb	r5, [r4, #0]
		 LED_Nucelo();
 800345c:	f7fe f934 	bl	80016c8 <LED_Nucelo>
		 LED_Nucleo_OFF();
 8003460:	f7fe fa8f 	bl	8001982 <LED_Nucleo_OFF>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8003464:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003468:	6914      	ldr	r4, [r2, #16]
		while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));       // Stay USB mode until USB connectivity available PA9
 800346a:	f414 7400 	ands.w	r4, r4, #512	; 0x200
 800346e:	d1fb      	bne.n	8003468 <USB_Init_Start+0x50>
		Shut_Down_USB();
 8003470:	f7fe ff78 	bl	8002364 <Shut_Down_USB>
					Enter_Into_DFU=0;
 8003474:	4b1d      	ldr	r3, [pc, #116]	; (80034ec <USB_Init_Start+0xd4>)
				  	  *Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 8003476:	4a1e      	ldr	r2, [pc, #120]	; (80034f0 <USB_Init_Start+0xd8>)
					Enter_Into_DFU=0;
 8003478:	701c      	strb	r4, [r3, #0]
				  	  *Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 800347a:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <USB_Init_Start+0xdc>)
 800347c:	601a      	str	r2, [r3, #0]
							 NVIC_SystemReset();        // System reset
 800347e:	f7fe fe35 	bl	80020ec <NVIC_SystemReset>
  USB_VCP_Init_Start();
 8003482:	f7ff f8e1 	bl	8002648 <USB_VCP_Init_Start>
		if (Battey_Charge_Mode(&USBD_Device) == USBD_OK)   // USB Battery charging mode
 8003486:	481c      	ldr	r0, [pc, #112]	; (80034f8 <USB_Init_Start+0xe0>)
 8003488:	f005 fb82 	bl	8008b90 <Battey_Charge_Mode>
 800348c:	b980      	cbnz	r0, 80034b0 <USB_Init_Start+0x98>
			    FATAL_Error = 0;
 800348e:	7020      	strb	r0, [r4, #0]
 8003490:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003494:	6913      	ldr	r3, [r2, #16]
				while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));
 8003496:	059b      	lsls	r3, r3, #22
 8003498:	d4fc      	bmi.n	8003494 <USB_Init_Start+0x7c>
				Shut_Down_USB();
 800349a:	f7fe ff63 	bl	8002364 <Shut_Down_USB>
				Check_SD_Command_File();
 800349e:	f7ff fe99 	bl	80031d4 <Check_SD_Command_File>
		 Prepare_Data_Log_State();           // Prepare for Data collection
 80034a2:	f7ff ff81 	bl	80033a8 <Prepare_Data_Log_State>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80034a6:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <USB_Init_Start+0xc4>)
 80034a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	bd38      	pop	{r3, r4, r5, pc}
			     LED_Nucelo();
 80034b0:	f7fe f90a 	bl	80016c8 <LED_Nucelo>
				 LED_Nulceo_Blinking_2s();
 80034b4:	f7fe fa6a 	bl	800198c <LED_Nulceo_Blinking_2s>
				 LED_Nucleo_OFF();
 80034b8:	f7fe fa63 	bl	8001982 <LED_Nucleo_OFF>
			 FATAL_Error = 0;
 80034bc:	7025      	strb	r5, [r4, #0]
 80034be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80034c2:	6914      	ldr	r4, [r2, #16]
		while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));       // Stay USB mode until USB connectivity available PA9
 80034c4:	f414 7400 	ands.w	r4, r4, #512	; 0x200
 80034c8:	d1fb      	bne.n	80034c2 <USB_Init_Start+0xaa>
		Shut_Down_USB();
 80034ca:	f7fe ff4b 	bl	8002364 <Shut_Down_USB>
		VCP_continue = 0;                     // Variable reset, aviod looping
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <USB_Init_Start+0xe4>)
 80034d0:	701c      	strb	r4, [r3, #0]
		Execute_VCP_Command();
 80034d2:	f7ff feff 	bl	80032d4 <Execute_VCP_Command>
 80034d6:	e7e4      	b.n	80034a2 <USB_Init_Start+0x8a>
 80034d8:	20008730 	.word	0x20008730
 80034dc:	e000e100 	.word	0xe000e100
 80034e0:	20008773 	.word	0x20008773
 80034e4:	20009022 	.word	0x20009022
 80034e8:	20008d58 	.word	0x20008d58
 80034ec:	20008afe 	.word	0x20008afe
 80034f0:	deadbeef 	.word	0xdeadbeef
 80034f4:	20017ff0 	.word	0x20017ff0
 80034f8:	20008794 	.word	0x20008794
 80034fc:	20008a8e 	.word	0x20008a8e

08003500 <AIM_DataStart_at_Reset>:



void AIM_DataStart_at_Reset(void)
{
 8003500:	b510      	push	{r4, lr}
	SD_POWER_ON();
 8003502:	f7fe fa25 	bl	8001950 <SD_POWER_ON>
	SD_cnt_limit=3;
 8003506:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <AIM_DataStart_at_Reset+0x44>)
 8003508:	2203      	movs	r2, #3
 800350a:	601a      	str	r2, [r3, #0]
	 Data_log_Start_Resume = 1;
 800350c:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <AIM_DataStart_at_Reset+0x48>)
 800350e:	2401      	movs	r4, #1
 8003510:	701c      	strb	r4, [r3, #0]
		FATFS_Init();
 8003512:	f7ff fe3f 	bl	8003194 <FATFS_Init>
		Open_File_For_Sensor_Write();
 8003516:	f7ff ff0b 	bl	8003330 <Open_File_For_Sensor_Write>
	Reset_All();
 800351a:	f7ff fd49 	bl	8002fb0 <Reset_All>
	  Start_LPTIMCounter2(0xFF);
 800351e:	20ff      	movs	r0, #255	; 0xff
 8003520:	f000 f93a 	bl	8003798 <Start_LPTIMCounter2>
 8003524:	4a09      	ldr	r2, [pc, #36]	; (800354c <AIM_DataStart_at_Reset+0x4c>)
 8003526:	6893      	ldr	r3, [r2, #8]
 8003528:	f043 0302 	orr.w	r3, r3, #2
 800352c:	6093      	str	r3, [r2, #8]
 800352e:	4b08      	ldr	r3, [pc, #32]	; (8003550 <AIM_DataStart_at_Reset+0x50>)
 8003530:	2204      	movs	r2, #4
 8003532:	609a      	str	r2, [r3, #8]
		LL_LPTIM_EnableIT_ARRM(LPTIM2);
		NVIC_EnableIRQ(LPTIM2_IRQn);
	Pros_state = LP_STOP;
 8003534:	4a07      	ldr	r2, [pc, #28]	; (8003554 <AIM_DataStart_at_Reset+0x54>)
 8003536:	7014      	strb	r4, [r2, #0]
	USB_Mode = 1;
 8003538:	4a07      	ldr	r2, [pc, #28]	; (8003558 <AIM_DataStart_at_Reset+0x58>)
 800353a:	7014      	strb	r4, [r2, #0]
 800353c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	bd10      	pop	{r4, pc}
 8003544:	200089da 	.word	0x200089da
 8003548:	20008773 	.word	0x20008773
 800354c:	40009400 	.word	0x40009400
 8003550:	e000e100 	.word	0xe000e100
 8003554:	20008730 	.word	0x20008730
 8003558:	20009022 	.word	0x20009022

0800355c <Enc2_GetPosition>:

	BSbuffer[s_flag].Enc2[Sub_cnt]=tempPosition;
}

int Enc2_GetPosition(void)
{
 800355c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  WRITE_REG(GPIOx->BRR, PinMask);
 8003560:	4c1a      	ldr	r4, [pc, #104]	; (80035cc <Enc2_GetPosition+0x70>)
 8003562:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003566:	62a3      	str	r3, [r4, #40]	; 0x28
	int i = 0;
	uint8_t tempRead = 0;
	uint8_t Flags[6];

	LL_GPIO_ResetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);
	delay_us(5);
 8003568:	2005      	movs	r0, #5
 800356a:	f000 f90b 	bl	8003784 <delay_us>
 800356e:	f44f 6780 	mov.w	r7, #1024	; 0x400
	// Sensor feeds out position MSB first
	for(i = DataPrecision-1; i >= 0; i--)
 8003572:	250b      	movs	r5, #11
	int tempPosition = 0;
 8003574:	2600      	movs	r6, #0
 8003576:	46b8      	mov	r8, r7
	{
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(5);
 8003578:	2005      	movs	r0, #5
 800357a:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 800357e:	f000 f901 	bl	8003784 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003582:	61a7      	str	r7, [r4, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(5);
 8003584:	2005      	movs	r0, #5
 8003586:	f000 f8fd 	bl	8003784 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800358a:	6923      	ldr	r3, [r4, #16]
 800358c:	f3c3 3380 	ubfx	r3, r3, #14, #1

		tempRead = LL_GPIO_IsInputPinSet(GPIOB,ENC2_DATA_PIN) &0x01;
		tempPosition |= (tempRead)<<i;
 8003590:	40ab      	lsls	r3, r5
	for(i = DataPrecision-1; i >= 0; i--)
 8003592:	f115 35ff 	adds.w	r5, r5, #4294967295
		tempPosition |= (tempRead)<<i;
 8003596:	ea46 0603 	orr.w	r6, r6, r3
	for(i = DataPrecision-1; i >= 0; i--)
 800359a:	d2ed      	bcs.n	8003578 <Enc2_GetPosition+0x1c>
  WRITE_REG(GPIOx->BRR, PinMask);
 800359c:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80035a0:	4c0a      	ldr	r4, [pc, #40]	; (80035cc <Enc2_GetPosition+0x70>)
 80035a2:	2506      	movs	r5, #6
 80035a4:	46b8      	mov	r8, r7
	}

	for(i = 0; i < 6; i++)
	{
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(5);
 80035a6:	2005      	movs	r0, #5
 80035a8:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 80035ac:	f000 f8ea 	bl	8003784 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80035b0:	61a7      	str	r7, [r4, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(5);
 80035b2:	2005      	movs	r0, #5
 80035b4:	f000 f8e6 	bl	8003784 <delay_us>
	for(i = 0; i < 6; i++)
 80035b8:	3d01      	subs	r5, #1
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80035ba:	6923      	ldr	r3, [r4, #16]
 80035bc:	d1f3      	bne.n	80035a6 <Enc2_GetPosition+0x4a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80035be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035c2:	61a3      	str	r3, [r4, #24]
	}

	LL_GPIO_SetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	return tempPosition;
}
 80035c4:	4630      	mov	r0, r6
 80035c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035ca:	bf00      	nop
 80035cc:	48000400 	.word	0x48000400

080035d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035d0:	4b21      	ldr	r3, [pc, #132]	; (8003658 <HAL_MspInit+0x88>)
{
 80035d2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	661a      	str	r2, [r3, #96]	; 0x60
 80035dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035de:	f002 0201 	and.w	r2, r2, #1
 80035e2:	9200      	str	r2, [sp, #0]
 80035e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035ec:	659a      	str	r2, [r3, #88]	; 0x58
 80035ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f4:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035f6:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80035f8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035fa:	f001 f8dd 	bl	80047b8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80035fe:	2200      	movs	r2, #0
 8003600:	4611      	mov	r1, r2
 8003602:	f06f 000b 	mvn.w	r0, #11
 8003606:	f001 f8e9 	bl	80047dc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800360a:	2200      	movs	r2, #0
 800360c:	4611      	mov	r1, r2
 800360e:	f06f 000a 	mvn.w	r0, #10
 8003612:	f001 f8e3 	bl	80047dc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003616:	2200      	movs	r2, #0
 8003618:	4611      	mov	r1, r2
 800361a:	f06f 0009 	mvn.w	r0, #9
 800361e:	f001 f8dd 	bl	80047dc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003622:	2200      	movs	r2, #0
 8003624:	4611      	mov	r1, r2
 8003626:	f06f 0004 	mvn.w	r0, #4
 800362a:	f001 f8d7 	bl	80047dc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800362e:	2200      	movs	r2, #0
 8003630:	4611      	mov	r1, r2
 8003632:	f06f 0003 	mvn.w	r0, #3
 8003636:	f001 f8d1 	bl	80047dc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800363a:	2200      	movs	r2, #0
 800363c:	4611      	mov	r1, r2
 800363e:	f06f 0001 	mvn.w	r0, #1
 8003642:	f001 f8cb 	bl	80047dc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003646:	2200      	movs	r2, #0
 8003648:	4611      	mov	r1, r2
 800364a:	f04f 30ff 	mov.w	r0, #4294967295
 800364e:	f001 f8c5 	bl	80047dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003652:	b003      	add	sp, #12
 8003654:	f85d fb04 	ldr.w	pc, [sp], #4
 8003658:	40021000 	.word	0x40021000

0800365c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800365c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 800365e:	6802      	ldr	r2, [r0, #0]
 8003660:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <HAL_SD_MspInit+0x5c>)
 8003662:	429a      	cmp	r2, r3
{
 8003664:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 8003666:	d124      	bne.n	80036b2 <HAL_SD_MspInit+0x56>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003668:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366c:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800366e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003670:	4812      	ldr	r0, [pc, #72]	; (80036bc <HAL_SD_MspInit+0x60>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003672:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003676:	661a      	str	r2, [r3, #96]	; 0x60
 8003678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367a:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003684:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8003686:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800368a:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800368c:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800368e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8003690:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003694:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003696:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003698:	f001 fa58 	bl	8004b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800369c:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800369e:	eb0d 0103 	add.w	r1, sp, r3
 80036a2:	4807      	ldr	r0, [pc, #28]	; (80036c0 <HAL_SD_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036aa:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80036ac:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036ae:	f001 fa4d 	bl	8004b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80036b2:	b007      	add	sp, #28
 80036b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40012800 	.word	0x40012800
 80036bc:	48000800 	.word	0x48000800
 80036c0:	48000c00 	.word	0x48000c00

080036c4 <NMI_Handler>:
 80036c4:	4770      	bx	lr

080036c6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80036c6:	e7fe      	b.n	80036c6 <HardFault_Handler>

080036c8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80036c8:	e7fe      	b.n	80036c8 <MemManage_Handler>

080036ca <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80036ca:	e7fe      	b.n	80036ca <BusFault_Handler>

080036cc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80036cc:	e7fe      	b.n	80036cc <UsageFault_Handler>

080036ce <SVC_Handler>:
 80036ce:	4770      	bx	lr

080036d0 <DebugMon_Handler>:
 80036d0:	4770      	bx	lr

080036d2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80036d2:	4770      	bx	lr

080036d4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80036d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036d6:	f001 f84d 	bl	8004774 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80036de:	f001 b8d4 	b.w	800488a <HAL_SYSTICK_IRQHandler>
	...

080036e4 <OTG_FS_IRQHandler>:
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  // ES HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
	HAL_PCD_IRQHandler(&hpcd);
 80036e4:	4801      	ldr	r0, [pc, #4]	; (80036ec <OTG_FS_IRQHandler+0x8>)
 80036e6:	f001 bbd7 	b.w	8004e98 <HAL_PCD_IRQHandler>
 80036ea:	bf00      	nop
 80036ec:	20009024 	.word	0x20009024

080036f0 <DMA2_Channel4_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Channel4_IRQHandler(void)
{
  if((uSdHandle.SdOperation == SD_READ_MULTIPLE_BLOCK) || (uSdHandle.SdOperation == SD_READ_SINGLE_BLOCK))
 80036f0:	4b04      	ldr	r3, [pc, #16]	; (8003704 <DMA2_Channel4_IRQHandler+0x14>)
 80036f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036f4:	2a01      	cmp	r2, #1
 80036f6:	d001      	beq.n	80036fc <DMA2_Channel4_IRQHandler+0xc>
 80036f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fa:	b90b      	cbnz	r3, 8003700 <DMA2_Channel4_IRQHandler+0x10>
  {
    BSP_SD_DMA_Rx_IRQHandler();
 80036fc:	f7fd bce2 	b.w	80010c4 <BSP_SD_DMA_Rx_IRQHandler>
  }
  else
  {
    BSP_SD_DMA_Tx_IRQHandler();
 8003700:	f7fd bcda 	b.w	80010b8 <BSP_SD_DMA_Tx_IRQHandler>
 8003704:	200086d0 	.word	0x200086d0

08003708 <SDMMC1_IRQHandler>:
  * @param  None
  * @retval None
  */
void SDMMC1_IRQHandler(void)
{
  BSP_SD_IRQHandler();
 8003708:	f7fd bcd0 	b.w	80010ac <BSP_SD_IRQHandler>

0800370c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800370c:	490f      	ldr	r1, [pc, #60]	; (800374c <SystemInit+0x40>)
 800370e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003712:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800371a:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <SystemInit+0x44>)
 800371c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800371e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003720:	f042 0201 	orr.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003726:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800372e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003732:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8003734:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003738:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003740:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003742:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003744:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003748:	608b      	str	r3, [r1, #8]
 800374a:	4770      	bx	lr
 800374c:	e000ed00 	.word	0xe000ed00
 8003750:	40021000 	.word	0x40021000

08003754 <LL_APB1_GRP1_EnableClock>:
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <LL_APB1_GRP1_EnableClock+0x18>)
 8003756:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003758:	4302      	orrs	r2, r0
 800375a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800375c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 800375e:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003760:	4018      	ands	r0, r3
 8003762:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8003764:	9b01      	ldr	r3, [sp, #4]
}
 8003766:	b002      	add	sp, #8
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40021000 	.word	0x40021000

08003770 <LL_RCC_SetUSBClockSource.constprop.3>:
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, USBxSource);
 8003770:	4a03      	ldr	r2, [pc, #12]	; (8003780 <LL_RCC_SetUSBClockSource.constprop.3+0x10>)
 8003772:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003776:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 800377a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800377e:	4770      	bx	lr
 8003780:	40021000 	.word	0x40021000

08003784 <delay_us>:
extern uint8_t USB_Mode;
extern uint8_t Enter_Into_DFU,MSC_continue,VCP_continue;

void delay_us(uint32_t us){
    uint32_t i,k;
    for(k=0;k<us;k++)
 8003784:	2300      	movs	r3, #0
 8003786:	4283      	cmp	r3, r0
 8003788:	d100      	bne.n	800378c <delay_us+0x8>
    {
    	for(i=0;i<11;i++)
         __NOP();  // Timed at 48 MHz clock
    }
}
 800378a:	4770      	bx	lr
 800378c:	220b      	movs	r2, #11
  __ASM volatile ("nop");
 800378e:	bf00      	nop
    	for(i=0;i<11;i++)
 8003790:	3a01      	subs	r2, #1
 8003792:	d1fc      	bne.n	800378e <delay_us+0xa>
    for(k=0;k<us;k++)
 8003794:	3301      	adds	r3, #1
 8003796:	e7f6      	b.n	8003786 <delay_us+0x2>

08003798 <Start_LPTIMCounter2>:
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8003798:	4a08      	ldr	r2, [pc, #32]	; (80037bc <Start_LPTIMCounter2+0x24>)
 800379a:	6913      	ldr	r3, [r2, #16]
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6113      	str	r3, [r2, #16]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 80037a2:	6993      	ldr	r3, [r2, #24]
 80037a4:	0c1b      	lsrs	r3, r3, #16
 80037a6:	041b      	lsls	r3, r3, #16
 80037a8:	4318      	orrs	r0, r3
 80037aa:	6190      	str	r0, [r2, #24]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 80037ac:	6913      	ldr	r3, [r2, #16]
 80037ae:	f023 0306 	bic.w	r3, r3, #6
 80037b2:	f043 0304 	orr.w	r3, r3, #4
 80037b6:	6113      	str	r3, [r2, #16]
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40009400 	.word	0x40009400

080037c0 <LSE_ON>:
	/* Following 2lines are necessary before LSE
	RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN; // PWR clock is necessary for LSE
	PWR->CR1 |= PWR_CR1_DBP;  // Enable Backup access
	*/

	RCC->BDCR |= RCC_BDCR_LSEON;  // LSE ON
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <LSE_ON+0x18>)
 80037c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	while(((RCC->BDCR) & RCC_BDCR_LSERDY) != (RCC_BDCR_LSERDY)); // wait for LSE to get ready
 80037ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80037d2:	0792      	lsls	r2, r2, #30
 80037d4:	d5fb      	bpl.n	80037ce <LSE_ON+0xe>

}
 80037d6:	4770      	bx	lr
 80037d8:	40021000 	.word	0x40021000

080037dc <SystemClock_Config_MSI_80MHz>:
*            PLL_R                          = 4
*            Flash Latency(WS)              = 4
*/

void SystemClock_Config_MSI_80MHz(void)
{
 80037dc:	b510      	push	{r4, lr}
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 80037de:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
{
 80037e2:	b092      	sub	sp, #72	; 0x48
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 80037e4:	f7ff ffb6 	bl	8003754 <LL_APB1_GRP1_EnableClock>
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037e8:	4b31      	ldr	r3, [pc, #196]	; (80038b0 <SystemClock_Config_MSI_80MHz+0xd4>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f0:	601a      	str	r2, [r3, #0]
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037f8:	605a      	str	r2, [r3, #4]
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 80037fa:	685a      	ldr	r2, [r3, #4]
	  LL_PWR_EnableBkUpAccess();                              // Enable Backup access (needed for LSE clock)
	  LL_PWR_EnableVddUSB();                                  // Enable VDDUSB supply for USB
	  while(!LL_PWR_IsEnabledVddUSB());                       // Wait for VDDUSB supply to activate
 80037fc:	0552      	lsls	r2, r2, #21
 80037fe:	d5fc      	bpl.n	80037fa <SystemClock_Config_MSI_80MHz+0x1e>

	  /* Enable MSI Oscillator and activate PLL with MSI as source */
	  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8003800:	2310      	movs	r3, #16
 8003802:	9301      	str	r3, [sp, #4]
	  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8003804:	2301      	movs	r3, #1
 8003806:	9307      	str	r3, [sp, #28]
	//  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
	  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 8003808:	930c      	str	r3, [sp, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLM            = 6;
 800380a:	2306      	movs	r3, #6
 800380c:	930d      	str	r3, [sp, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLN            = 40;
 800380e:	2328      	movs	r3, #40	; 0x28
 8003810:	930e      	str	r3, [sp, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 8003812:	2307      	movs	r3, #7
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
	  RCC_OscInitStruct.PLL.PLLR            = 4;

	  HAL_RCC_OscConfig(&RCC_OscInitStruct);

	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8003814:	4c27      	ldr	r4, [pc, #156]	; (80038b4 <SystemClock_Config_MSI_80MHz+0xd8>)
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 8003816:	930f      	str	r3, [sp, #60]	; 0x3c
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8003818:	22b0      	movs	r2, #176	; 0xb0
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 800381a:	2304      	movs	r3, #4
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 800381c:	9209      	str	r2, [sp, #36]	; 0x24
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800381e:	eb0d 0003 	add.w	r0, sp, r3
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8003822:	2202      	movs	r2, #2
 8003824:	920b      	str	r2, [sp, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8003826:	9310      	str	r3, [sp, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLR            = 4;
 8003828:	9311      	str	r3, [sp, #68]	; 0x44
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800382a:	f002 f889 	bl	8005940 <HAL_RCC_OscConfig>
	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800382e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003832:	f023 0320 	bic.w	r3, r3, #32
 8003836:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	  CLEAR_BIT(RCC->CIER, (RCC_IT_LSECSS));
 800383a:	69a3      	ldr	r3, [r4, #24]
 800383c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003840:	61a3      	str	r3, [r4, #24]

	  LSE_ON();                                                     //Start LSE for RTC and LPTIM timer
 8003842:	f7ff ffbd 	bl	80037c0 <LSE_ON>
	  HAL_RCCEx_EnableMSIPLLMode();
 8003846:	f002 faef 	bl	8005e28 <HAL_RCCEx_EnableMSIPLLMode>


	  LL_RCC_SetSDMMCClockSource(LL_RCC_SDMMC1_CLKSOURCE_MSI);
 800384a:	f7ff ff91 	bl	8003770 <LL_RCC_SetUSBClockSource.constprop.3>
	  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_MSI);
 800384e:	f7ff ff8f 	bl	8003770 <LL_RCC_SetUSBClockSource.constprop.3>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003852:	68a3      	ldr	r3, [r4, #8]
 8003854:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003858:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800385a:	68a3      	ldr	r3, [r4, #8]
 800385c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003860:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003864:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003866:	68a3      	ldr	r3, [r4, #8]
 8003868:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800386c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003870:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003872:	68a3      	ldr	r3, [r4, #8]
 8003874:	f023 0303 	bic.w	r3, r3, #3
 8003878:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_FLASH_LATENCY_4
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800387a:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <SystemClock_Config_MSI_80MHz+0xdc>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	f022 0207 	bic.w	r2, r2, #7
 8003882:	f042 0204 	orr.w	r2, r2, #4
 8003886:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_3
  *         @arg @ref LL_FLASH_LATENCY_4
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	f002 0207 	and.w	r2, r2, #7
	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2); //1
	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);

	  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
	  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4);
 800388e:	2a04      	cmp	r2, #4
 8003890:	d1fa      	bne.n	8003888 <SystemClock_Config_MSI_80MHz+0xac>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8003892:	68a3      	ldr	r3, [r4, #8]
 8003894:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003898:	60a3      	str	r3, [r4, #8]

	  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_MSI);  // MSI clock is set as default clock after wake up from Stop
	  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800389a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800389c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038a0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80038a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80038a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	9b00      	ldr	r3, [sp, #0]

		}
 80038ac:	b012      	add	sp, #72	; 0x48
 80038ae:	bd10      	pop	{r4, pc}
 80038b0:	40007000 	.word	0x40007000
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40022000 	.word	0x40022000

080038bc <Configure_LPTIM2_Int>:
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80038bc:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <Configure_LPTIM2_Int+0x40>)
 80038be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80038c2:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 80038c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SET_BIT(RCC->APB1ENR2, Periphs);
 80038ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038cc:	f042 0220 	orr.w	r2, r2, #32
 80038d0:	65da      	str	r2, [r3, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80038d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c

		}

//Configure LPTIM2 to generate the XX Hz interrupt
void Configure_LPTIM2_Int(void)
{
 80038d4:	b082      	sub	sp, #8
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80038dc:	9b01      	ldr	r3, [sp, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80038de:	4b08      	ldr	r3, [pc, #32]	; (8003900 <Configure_LPTIM2_Int+0x44>)
 80038e0:	2204      	movs	r2, #4
 80038e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_DisableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <Configure_LPTIM2_Int+0x48>)
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	f022 0202 	bic.w	r2, r2, #2
 80038ee:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	611a      	str	r2, [r3, #16]
	LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);     // Enable LPTIM2 Clock
	NVIC_DisableIRQ(LPTIM2_IRQn);
	LL_LPTIM_DisableIT_ARRM(LPTIM2);                           // Enable auto reload match interrupt (ARRMIE).
	LL_LPTIM_Disable(LPTIM2);                                // LPTIM2 disable if needed

}
 80038f8:	b002      	add	sp, #8
 80038fa:	4770      	bx	lr
 80038fc:	40021000 	.word	0x40021000
 8003900:	e000e100 	.word	0xe000e100
 8003904:	40009400 	.word	0x40009400

08003908 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8003908:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800390a:	4c1d      	ldr	r4, [pc, #116]	; (8003980 <HAL_PCD_MspInit+0x78>)
 800390c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003914:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 8003916:	b088      	sub	sp, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	9301      	str	r3, [sp, #4]
 800391e:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8003920:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003924:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003926:	2302      	movs	r3, #2
 8003928:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392a:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392c:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800392e:	260a      	movs	r6, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8003930:	a903      	add	r1, sp, #12
 8003932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003936:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003938:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800393a:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800393c:	f001 f906 	bl	8004b4c <HAL_GPIO_Init>
  
  /* Configure VBUS Pin */

  
  /* Configure ID pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003944:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003946:	2312      	movs	r3, #18
 8003948:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800394c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003952:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003954:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003956:	f001 f8f9 	bl	8004b4c <HAL_GPIO_Init>
  
  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800395a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800395c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003960:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003962:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003968:	9302      	str	r3, [sp, #8]
  
  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 800396a:	462a      	mov	r2, r5
 800396c:	2107      	movs	r1, #7
 800396e:	2043      	movs	r0, #67	; 0x43
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003970:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 8003972:	f000 ff33 	bl	80047dc <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003976:	2043      	movs	r0, #67	; 0x43
 8003978:	f000 ff64 	bl	8004844 <HAL_NVIC_EnableIRQ>
    
}
 800397c:	b008      	add	sp, #32
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	40021000 	.word	0x40021000

08003984 <HAL_PCD_MspDeInit>:
  * @retval None
  */
void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)
{  
  /* Disable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 8003984:	4b04      	ldr	r3, [pc, #16]	; (8003998 <HAL_PCD_MspDeInit+0x14>)
 8003986:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003988:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800398c:	64da      	str	r2, [r3, #76]	; 0x4c
  __HAL_RCC_SYSCFG_CLK_DISABLE(); 
 800398e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	661a      	str	r2, [r3, #96]	; 0x60
 8003996:	4770      	bx	lr
 8003998:	40021000 	.word	0x40021000

0800399c <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800399c:	f500 7162 	add.w	r1, r0, #904	; 0x388
 80039a0:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80039a4:	f005 b937 	b.w	8008c16 <USBD_LL_SetupStage>

080039a8 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80039a8:	231c      	movs	r3, #28
 80039aa:	fb03 0301 	mla	r3, r3, r1, r0
 80039ae:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80039b2:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 80039b6:	f005 b95b 	b.w	8008c70 <USBD_LL_DataOutStage>

080039ba <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80039ba:	231c      	movs	r3, #28
 80039bc:	fb03 0301 	mla	r3, r3, r1, r0
 80039c0:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80039c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039c6:	f005 b985 	b.w	8008cd4 <USBD_LL_DataInStage>

080039ca <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 80039ca:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80039ce:	f005 ba01 	b.w	8008dd4 <USBD_LL_SOF>

080039d2 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 80039d2:	b510      	push	{r4, lr}
 80039d4:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 80039d6:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80039da:	f005 f9ca 	bl	8008d72 <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 80039de:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 80039e2:	2101      	movs	r1, #1
}
 80039e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 80039e8:	f005 b9e2 	b.w	8008db0 <USBD_LL_SetSpeed>

080039ec <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
  USBD_LL_Suspend(hpcd->pData);
 80039ec:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80039f0:	f005 b9e1 	b.w	8008db6 <USBD_LL_Suspend>

080039f4 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 80039f4:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80039f8:	f005 b9e6 	b.w	8008dc8 <USBD_LL_Resume>

080039fc <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 80039fc:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003a00:	f005 b9f6 	b.w	8008df0 <USBD_LL_IsoOUTIncomplete>

08003a04 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8003a04:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003a08:	f005 b9f0 	b.w	8008dec <USBD_LL_IsoINIncomplete>

08003a0c <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 8003a0c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003a10:	f005 b9f0 	b.w	8008df4 <USBD_LL_DevConnected>

08003a14 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 8003a14:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003a18:	f005 b9ee 	b.w	8008df8 <USBD_LL_DevDisconnected>

08003a1c <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 8003a1e:	4c15      	ldr	r4, [pc, #84]	; (8003a74 <USBD_LL_Init+0x58>)
  hpcd.Init.dev_endpoints = 5;
  hpcd.Init.use_dedicated_ep1 = 0;
 8003a20:	2500      	movs	r5, #0
  hpcd.Init.dev_endpoints = 5;
 8003a22:	2305      	movs	r3, #5
 8003a24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hpcd.Init.ep0_mps = 0x40;
  hpcd.Init.dma_enable = 0;
  hpcd.Init.low_power_enable = 0;
  hpcd.Init.lpm_enable = 0;
  hpcd.Init.battery_charging_enable = 0;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003a28:	2601      	movs	r6, #1
  hpcd.Init.Sof_enable = 0;
  hpcd.Init.speed = PCD_SPEED_FULL;
  hpcd.Init.vbus_sensing_enable = 0;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8003a2a:	f8c4 03c8 	str.w	r0, [r4, #968]	; 0x3c8
  hpcd.Init.ep0_mps = 0x40;
 8003a2e:	2740      	movs	r7, #64	; 0x40
  pdev->pData = &hpcd;
 8003a30:	f8c0 4220 	str.w	r4, [r0, #544]	; 0x220
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 8003a34:	4620      	mov	r0, r4
  hpcd.Init.dev_endpoints = 5;
 8003a36:	e884 000c 	stmia.w	r4, {r2, r3}
  hpcd.Init.use_dedicated_ep1 = 0;
 8003a3a:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;
 8003a3c:	6167      	str	r7, [r4, #20]
  hpcd.Init.dma_enable = 0;
 8003a3e:	6125      	str	r5, [r4, #16]
  hpcd.Init.low_power_enable = 0;
 8003a40:	6225      	str	r5, [r4, #32]
  hpcd.Init.lpm_enable = 0;
 8003a42:	6265      	str	r5, [r4, #36]	; 0x24
  hpcd.Init.battery_charging_enable = 0;
 8003a44:	62a5      	str	r5, [r4, #40]	; 0x28
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003a46:	61a6      	str	r6, [r4, #24]
  hpcd.Init.Sof_enable = 0;
 8003a48:	61e5      	str	r5, [r4, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 8003a4a:	60e6      	str	r6, [r4, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 8003a4c:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_PCD_Init(&hpcd);
 8003a4e:	f001 f95f 	bl	8004d10 <HAL_PCD_Init>
  
  /* Configure EPs FIFOs */
  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 8003a52:	2180      	movs	r1, #128	; 0x80
 8003a54:	4620      	mov	r0, r4
 8003a56:	f001 fe70 	bl	800573a <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 8003a5a:	463a      	mov	r2, r7
 8003a5c:	4629      	mov	r1, r5
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f001 fe4a 	bl	80056f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x80);
 8003a64:	2280      	movs	r2, #128	; 0x80
 8003a66:	4631      	mov	r1, r6
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f001 fe45 	bl	80056f8 <HAL_PCDEx_SetTxFiFo>

  return USBD_OK;
}
 8003a6e:	4628      	mov	r0, r5
 8003a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20009024 	.word	0x20009024

08003a78 <USBD_LL_DeInit>:
  * @brief  De-Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 8003a78:	b508      	push	{r3, lr}
  HAL_PCD_DeInit(pdev->pData);
 8003a7a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003a7e:	f001 f9f9 	bl	8004e74 <HAL_PCD_DeInit>
  return USBD_OK;
}
 8003a82:	2000      	movs	r0, #0
 8003a84:	bd08      	pop	{r3, pc}

08003a86 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003a86:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8003a88:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003a8c:	f001 f9c5 	bl	8004e1a <HAL_PCD_Start>
  return USBD_OK;
}
 8003a90:	2000      	movs	r0, #0
 8003a92:	bd08      	pop	{r3, pc}

08003a94 <USBD_LL_Stop>:
  * @brief  Stops the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8003a94:	b508      	push	{r3, lr}
  HAL_PCD_Stop(pdev->pData);
 8003a96:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003a9a:	f001 f9d3 	bl	8004e44 <HAL_PCD_Stop>
  return USBD_OK;
}
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	bd08      	pop	{r3, pc}

08003aa2 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8003aa2:	b510      	push	{r4, lr}
 8003aa4:	461c      	mov	r4, r3
  HAL_PCD_EP_Open(pdev->pData,
 8003aa6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003aaa:	4613      	mov	r3, r2
 8003aac:	4622      	mov	r2, r4
 8003aae:	f001 fd17 	bl	80054e0 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	bd10      	pop	{r4, pc}

08003ab6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003ab6:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003ab8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003abc:	f001 fd35 	bl	800552a <HAL_PCD_EP_Close>
  return USBD_OK;
}
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	bd08      	pop	{r3, pc}

08003ac4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003ac4:	b508      	push	{r3, lr}
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8003ac6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003aca:	f001 fdfb 	bl	80056c4 <HAL_PCD_EP_Flush>
  return USBD_OK;
}
 8003ace:	2000      	movs	r0, #0
 8003ad0:	bd08      	pop	{r3, pc}

08003ad2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003ad2:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003ad4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003ad8:	f001 fda3 	bl	8005622 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8003adc:	2000      	movs	r0, #0
 8003ade:	bd08      	pop	{r3, pc}

08003ae0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003ae0:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003ae2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003ae6:	f001 fdc8 	bl	800567a <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8003aea:	2000      	movs	r0, #0
 8003aec:	bd08      	pop	{r3, pc}

08003aee <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003aee:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003af2:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8003af6:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003afa:	bf1b      	ittet	ne
 8003afc:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8003b00:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003b04:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003b08:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003b0c:	bf08      	it	eq
 8003b0e:	f891 01e2 	ldrbeq.w	r0, [r1, #482]	; 0x1e2
  }
}
 8003b12:	4770      	bx	lr

08003b14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8003b14:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003b16:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003b1a:	f001 fccd 	bl	80054b8 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8003b1e:	2000      	movs	r0, #0
 8003b20:	bd08      	pop	{r3, pc}

08003b22 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8003b22:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003b24:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003b28:	f001 fd54 	bl	80055d4 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	bd08      	pop	{r3, pc}

08003b30 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8003b30:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003b32:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003b36:	f001 fd1b 	bl	8005570 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	bd08      	pop	{r3, pc}

08003b3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003b3e:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8003b40:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003b44:	f001 fd3e 	bl	80055c4 <HAL_PCD_EP_GetRxCount>
}
 8003b48:	bd08      	pop	{r3, pc}
	...

08003b4c <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc_VCP);
 8003b4c:	2312      	movs	r3, #18
 8003b4e:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc_VCP;
}
 8003b50:	4800      	ldr	r0, [pc, #0]	; (8003b54 <USBD_VCP_DeviceDescriptor+0x8>)
 8003b52:	4770      	bx	lr
 8003b54:	20000068 	.word	0x20000068

08003b58 <USBD_MSC_DeviceDescriptor>:

uint8_t *USBD_MSC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 8003b58:	2312      	movs	r3, #18
 8003b5a:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc;
}
 8003b5c:	4800      	ldr	r0, [pc, #0]	; (8003b60 <USBD_MSC_DeviceDescriptor+0x8>)
 8003b5e:	4770      	bx	lr
 8003b60:	20000054 	.word	0x20000054

08003b64 <USBD_MSC_LangIDStrDescriptor>:
  return (uint8_t*)USBD_LangIDDesc;
}

uint8_t *USBD_MSC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 8003b64:	2304      	movs	r3, #4
 8003b66:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 8003b68:	4800      	ldr	r0, [pc, #0]	; (8003b6c <USBD_MSC_LangIDStrDescriptor+0x8>)
 8003b6a:	4770      	bx	lr
 8003b6c:	2000007c 	.word	0x2000007c

08003b70 <IntToUnicode>:
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8003b70:	2300      	movs	r3, #0
{
 8003b72:	b530      	push	{r4, r5, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8003b74:	461d      	mov	r5, r3
  for( idx = 0 ; idx < len ; idx ++)
 8003b76:	b2dc      	uxtb	r4, r3
 8003b78:	42a2      	cmp	r2, r4
 8003b7a:	d800      	bhi.n	8003b7e <IntToUnicode+0xe>
  }
}
 8003b7c:	bd30      	pop	{r4, r5, pc}
    if( ((value >> 28)) < 0xA )
 8003b7e:	0f04      	lsrs	r4, r0, #28
 8003b80:	2c09      	cmp	r4, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 8003b82:	bf94      	ite	ls
 8003b84:	3430      	addls	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8003b86:	3437      	addhi	r4, #55	; 0x37
 8003b88:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 8003b8c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8003b90:	0100      	lsls	r0, r0, #4
    pbuf[ 2* idx + 1] = 0;
 8003b92:	7065      	strb	r5, [r4, #1]
 8003b94:	3301      	adds	r3, #1
 8003b96:	e7ee      	b.n	8003b76 <IntToUnicode+0x6>

08003b98 <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003b98:	231a      	movs	r3, #26
{
 8003b9a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003b9c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)VCP_DEVICE_ID1;
 8003b9e:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <USBD_VCP_SerialStrDescriptor+0x2c>)
 8003ba0:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)VCP_DEVICE_ID3;
 8003ba2:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8003ba4:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8003ba6:	18c0      	adds	r0, r0, r3
 8003ba8:	d00a      	beq.n	8003bc0 <USBD_VCP_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)VCP_DEVICE_ID2;
 8003baa:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <USBD_VCP_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8003bac:	4907      	ldr	r1, [pc, #28]	; (8003bcc <USBD_VCP_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)VCP_DEVICE_ID2;
 8003bae:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	f7ff ffdd 	bl	8003b70 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	4905      	ldr	r1, [pc, #20]	; (8003bd0 <USBD_VCP_SerialStrDescriptor+0x38>)
 8003bba:	4620      	mov	r0, r4
 8003bbc:	f7ff ffd8 	bl	8003b70 <IntToUnicode>
}
 8003bc0:	4804      	ldr	r0, [pc, #16]	; (8003bd4 <USBD_VCP_SerialStrDescriptor+0x3c>)
 8003bc2:	bd10      	pop	{r4, pc}
 8003bc4:	1fff7a30 	.word	0x1fff7a30
 8003bc8:	1fff7a34 	.word	0x1fff7a34
 8003bcc:	20000082 	.word	0x20000082
 8003bd0:	20000092 	.word	0x20000092
 8003bd4:	20000080 	.word	0x20000080

08003bd8 <USBD_MSC_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003bd8:	231a      	movs	r3, #26
{
 8003bda:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003bdc:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8003bde:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <USBD_MSC_SerialStrDescriptor+0x2c>)
 8003be0:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 8003be2:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8003be4:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8003be6:	18c0      	adds	r0, r0, r3
 8003be8:	d00a      	beq.n	8003c00 <USBD_MSC_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8003bea:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <USBD_MSC_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8003bec:	4907      	ldr	r1, [pc, #28]	; (8003c0c <USBD_MSC_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8003bee:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8003bf0:	2208      	movs	r2, #8
 8003bf2:	f7ff ffbd 	bl	8003b70 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	4905      	ldr	r1, [pc, #20]	; (8003c10 <USBD_MSC_SerialStrDescriptor+0x38>)
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f7ff ffb8 	bl	8003b70 <IntToUnicode>
}
 8003c00:	4804      	ldr	r0, [pc, #16]	; (8003c14 <USBD_MSC_SerialStrDescriptor+0x3c>)
 8003c02:	bd10      	pop	{r4, pc}
 8003c04:	1fff7a10 	.word	0x1fff7a10
 8003c08:	1fff7a14 	.word	0x1fff7a14
 8003c0c:	20000082 	.word	0x20000082
 8003c10:	20000092 	.word	0x20000092
 8003c14:	20000080 	.word	0x20000080

08003c18 <USBD_VCP_ProductStrDescriptor>:
{
 8003c18:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING_VCP, USBD_StrDesc, length);
 8003c1a:	4c04      	ldr	r4, [pc, #16]	; (8003c2c <USBD_VCP_ProductStrDescriptor+0x14>)
 8003c1c:	4804      	ldr	r0, [pc, #16]	; (8003c30 <USBD_VCP_ProductStrDescriptor+0x18>)
 8003c1e:	460a      	mov	r2, r1
 8003c20:	4621      	mov	r1, r4
 8003c22:	f005 fa93 	bl	800914c <USBD_GetString>
}
 8003c26:	4620      	mov	r0, r4
 8003c28:	bd10      	pop	{r4, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200093f0 	.word	0x200093f0
 8003c30:	0800c7b9 	.word	0x0800c7b9

08003c34 <USBD_MSC_ProductStrDescriptor>:
{
 8003c34:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8003c36:	4c04      	ldr	r4, [pc, #16]	; (8003c48 <USBD_MSC_ProductStrDescriptor+0x14>)
 8003c38:	4804      	ldr	r0, [pc, #16]	; (8003c4c <USBD_MSC_ProductStrDescriptor+0x18>)
 8003c3a:	460a      	mov	r2, r1
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	f005 fa85 	bl	800914c <USBD_GetString>
}
 8003c42:	4620      	mov	r0, r4
 8003c44:	bd10      	pop	{r4, pc}
 8003c46:	bf00      	nop
 8003c48:	200093f0 	.word	0x200093f0
 8003c4c:	0800c788 	.word	0x0800c788

08003c50 <USBD_MSC_ManufacturerStrDescriptor>:
{
 8003c50:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003c52:	4c04      	ldr	r4, [pc, #16]	; (8003c64 <USBD_MSC_ManufacturerStrDescriptor+0x14>)
 8003c54:	4804      	ldr	r0, [pc, #16]	; (8003c68 <USBD_MSC_ManufacturerStrDescriptor+0x18>)
 8003c56:	460a      	mov	r2, r1
 8003c58:	4621      	mov	r1, r4
 8003c5a:	f005 fa77 	bl	800914c <USBD_GetString>
}
 8003c5e:	4620      	mov	r0, r4
 8003c60:	bd10      	pop	{r4, pc}
 8003c62:	bf00      	nop
 8003c64:	200093f0 	.word	0x200093f0
 8003c68:	0800c775 	.word	0x0800c775

08003c6c <USBD_VCP_ConfigStrDescriptor>:
{
 8003c6c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING_VCP, USBD_StrDesc, length);
 8003c6e:	4c04      	ldr	r4, [pc, #16]	; (8003c80 <USBD_VCP_ConfigStrDescriptor+0x14>)
 8003c70:	4804      	ldr	r0, [pc, #16]	; (8003c84 <USBD_VCP_ConfigStrDescriptor+0x18>)
 8003c72:	460a      	mov	r2, r1
 8003c74:	4621      	mov	r1, r4
 8003c76:	f005 fa69 	bl	800914c <USBD_GetString>
}
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	bd10      	pop	{r4, pc}
 8003c7e:	bf00      	nop
 8003c80:	200093f0 	.word	0x200093f0
 8003c84:	0800c7a0 	.word	0x0800c7a0

08003c88 <USBD_MSC_ConfigStrDescriptor>:
{
 8003c88:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 8003c8a:	4c04      	ldr	r4, [pc, #16]	; (8003c9c <USBD_MSC_ConfigStrDescriptor+0x14>)
 8003c8c:	4804      	ldr	r0, [pc, #16]	; (8003ca0 <USBD_MSC_ConfigStrDescriptor+0x18>)
 8003c8e:	460a      	mov	r2, r1
 8003c90:	4621      	mov	r1, r4
 8003c92:	f005 fa5b 	bl	800914c <USBD_GetString>
}
 8003c96:	4620      	mov	r0, r4
 8003c98:	bd10      	pop	{r4, pc}
 8003c9a:	bf00      	nop
 8003c9c:	200093f0 	.word	0x200093f0
 8003ca0:	0800c75c 	.word	0x0800c75c

08003ca4 <USBD_VCP_InterfaceStrDescriptor>:
{
 8003ca4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING_VCP, USBD_StrDesc, length);
 8003ca6:	4c04      	ldr	r4, [pc, #16]	; (8003cb8 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 8003ca8:	4804      	ldr	r0, [pc, #16]	; (8003cbc <USBD_VCP_InterfaceStrDescriptor+0x18>)
 8003caa:	460a      	mov	r2, r1
 8003cac:	4621      	mov	r1, r4
 8003cae:	f005 fa4d 	bl	800914c <USBD_GetString>
}
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	bd10      	pop	{r4, pc}
 8003cb6:	bf00      	nop
 8003cb8:	200093f0 	.word	0x200093f0
 8003cbc:	0800c7ab 	.word	0x0800c7ab

08003cc0 <USBD_MSC_InterfaceStrDescriptor>:
{
 8003cc0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8003cc2:	4c04      	ldr	r4, [pc, #16]	; (8003cd4 <USBD_MSC_InterfaceStrDescriptor+0x14>)
 8003cc4:	4804      	ldr	r0, [pc, #16]	; (8003cd8 <USBD_MSC_InterfaceStrDescriptor+0x18>)
 8003cc6:	460a      	mov	r2, r1
 8003cc8:	4621      	mov	r1, r4
 8003cca:	f005 fa3f 	bl	800914c <USBD_GetString>
}
 8003cce:	4620      	mov	r0, r4
 8003cd0:	bd10      	pop	{r4, pc}
 8003cd2:	bf00      	nop
 8003cd4:	200093f0 	.word	0x200093f0
 8003cd8:	0800c767 	.word	0x0800c767

08003cdc <USBD_VCP_LangIDStrDescriptor>:
 8003cdc:	2304      	movs	r3, #4
 8003cde:	800b      	strh	r3, [r1, #0]
 8003ce0:	4800      	ldr	r0, [pc, #0]	; (8003ce4 <USBD_VCP_LangIDStrDescriptor+0x8>)
 8003ce2:	4770      	bx	lr
 8003ce4:	2000007c 	.word	0x2000007c

08003ce8 <USBD_VCP_ManufacturerStrDescriptor>:
 8003ce8:	b510      	push	{r4, lr}
 8003cea:	4c04      	ldr	r4, [pc, #16]	; (8003cfc <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8003cec:	4804      	ldr	r0, [pc, #16]	; (8003d00 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
 8003cee:	460a      	mov	r2, r1
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	f005 fa2b 	bl	800914c <USBD_GetString>
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	bd10      	pop	{r4, pc}
 8003cfa:	bf00      	nop
 8003cfc:	200093f0 	.word	0x200093f0
 8003d00:	0800c775 	.word	0x0800c775

08003d04 <STORAGE_IsWriteProtected>:
  * @retval Status (0: write enabled / -1: otherwise)
  */
int8_t STORAGE_IsWriteProtected(uint8_t lun)
{
  return 0;
}
 8003d04:	2000      	movs	r0, #0
 8003d06:	4770      	bx	lr

08003d08 <STORAGE_GetMaxLun>:
  * @retval Lun(s) number
  */
int8_t STORAGE_GetMaxLun(void)
{
  return(STORAGE_LUN_NBR - 1);
}
 8003d08:	2000      	movs	r0, #0
 8003d0a:	4770      	bx	lr

08003d0c <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003d0c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

  if(pdev->pClassData != NULL)
 8003d10:	b11b      	cbz	r3, 8003d1a <USBD_CDC_DataIn+0xe>
  {

    hcdc->TxState = 0;
 8003d12:	2000      	movs	r0, #0
 8003d14:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8003d18:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8003d1a:	2002      	movs	r0, #2
  }
}
 8003d1c:	4770      	bx	lr

08003d1e <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003d1e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{
 8003d22:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003d24:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003d28:	b15b      	cbz	r3, 8003d42 <USBD_CDC_EP0_RxReady+0x24>
 8003d2a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003d2e:	28ff      	cmp	r0, #255	; 0xff
 8003d30:	d007      	beq.n	8003d42 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003d38:	4621      	mov	r1, r4
 8003d3a:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF;
 8003d3c:	23ff      	movs	r3, #255	; 0xff
 8003d3e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003d42:	2000      	movs	r0, #0
 8003d44:	bd10      	pop	{r4, pc}
	...

08003d48 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8003d48:	2343      	movs	r3, #67	; 0x43
 8003d4a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003d4c:	4800      	ldr	r0, [pc, #0]	; (8003d50 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003d4e:	4770      	bx	lr
 8003d50:	2000011c 	.word	0x2000011c

08003d54 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8003d54:	2343      	movs	r3, #67	; 0x43
 8003d56:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003d58:	4800      	ldr	r0, [pc, #0]	; (8003d5c <USBD_CDC_GetHSCfgDesc+0x8>)
 8003d5a:	4770      	bx	lr
 8003d5c:	20000160 	.word	0x20000160

08003d60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8003d60:	2343      	movs	r3, #67	; 0x43
 8003d62:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003d64:	4800      	ldr	r0, [pc, #0]	; (8003d68 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003d66:	4770      	bx	lr
 8003d68:	200001b0 	.word	0x200001b0

08003d6c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8003d6c:	230a      	movs	r3, #10
 8003d6e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003d70:	4800      	ldr	r0, [pc, #0]	; (8003d74 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003d72:	4770      	bx	lr
 8003d74:	200001a4 	.word	0x200001a4

08003d78 <STORAGE_Init>:
{
 8003d78:	b508      	push	{r3, lr}
  BSP_SD_Init();
 8003d7a:	f7fd fa3f 	bl	80011fc <BSP_SD_Init>
}
 8003d7e:	2000      	movs	r0, #0
 8003d80:	bd08      	pop	{r3, pc}

08003d82 <STORAGE_GetCapacity>:
{
 8003d82:	b530      	push	{r4, r5, lr}
 8003d84:	b097      	sub	sp, #92	; 0x5c
 8003d86:	460d      	mov	r5, r1
 8003d88:	4614      	mov	r4, r2
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8003d8a:	f7fd f97b 	bl	8001084 <BSP_SD_IsDetected>
 8003d8e:	b178      	cbz	r0, 8003db0 <STORAGE_GetCapacity+0x2e>
    BSP_SD_GetCardInfo(&info);
 8003d90:	4668      	mov	r0, sp
 8003d92:	f7fd f9a3 	bl	80010dc <BSP_SD_GetCardInfo>
    *block_num = (info.CardCapacity)/STORAGE_BLK_SIZ  - 1;
 8003d96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003d98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003d9a:	0a5b      	lsrs	r3, r3, #9
 8003d9c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8003da0:	3b01      	subs	r3, #1
 8003da2:	602b      	str	r3, [r5, #0]
    *block_size = STORAGE_BLK_SIZ;
 8003da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003da8:	8023      	strh	r3, [r4, #0]
    ret = 0;
 8003daa:	2000      	movs	r0, #0
}
 8003dac:	b017      	add	sp, #92	; 0x5c
 8003dae:	bd30      	pop	{r4, r5, pc}
  int8_t ret = -1;  
 8003db0:	f04f 30ff 	mov.w	r0, #4294967295
 8003db4:	e7fa      	b.n	8003dac <STORAGE_GetCapacity+0x2a>

08003db6 <STORAGE_Read>:
{
 8003db6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003db8:	460c      	mov	r4, r1
 8003dba:	4615      	mov	r5, r2
 8003dbc:	461e      	mov	r6, r3
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8003dbe:	f7fd f961 	bl	8001084 <BSP_SD_IsDetected>
 8003dc2:	b158      	cbz	r0, 8003ddc <STORAGE_Read+0x26>
    BSP_SD_ReadBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 8003dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	9601      	str	r6, [sp, #4]
 8003dcc:	026a      	lsls	r2, r5, #9
 8003dce:	2300      	movs	r3, #0
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	f7fd f9bb 	bl	800114c <BSP_SD_ReadBlocks_DMA>
    ret = 0;
 8003dd6:	2000      	movs	r0, #0
}
 8003dd8:	b002      	add	sp, #8
 8003dda:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;  
 8003ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8003de0:	e7fa      	b.n	8003dd8 <STORAGE_Read+0x22>

08003de2 <STORAGE_Write>:
{
 8003de2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003de4:	460c      	mov	r4, r1
 8003de6:	4615      	mov	r5, r2
 8003de8:	461e      	mov	r6, r3
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8003dea:	f7fd f94b 	bl	8001084 <BSP_SD_IsDetected>
 8003dee:	b158      	cbz	r0, 8003e08 <STORAGE_Write+0x26>
    BSP_SD_WriteBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 8003df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	9601      	str	r6, [sp, #4]
 8003df8:	026a      	lsls	r2, r5, #9
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f7fd fa7d 	bl	80012fc <BSP_SD_WriteBlocks_DMA>
    ret = 0;
 8003e02:	2000      	movs	r0, #0
}
 8003e04:	b002      	add	sp, #8
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;  
 8003e08:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0c:	e7fa      	b.n	8003e04 <STORAGE_Write+0x22>

08003e0e <USBD_CDC_DataOut>:
{
 8003e0e:	b538      	push	{r3, r4, r5, lr}
 8003e10:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003e12:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003e16:	f7ff fe92 	bl	8003b3e <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8003e1a:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003e1e:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8003e22:	b14b      	cbz	r3, 8003e38 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003e24:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8003e28:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8003e32:	4798      	blx	r3
    return USBD_OK;
 8003e34:	2000      	movs	r0, #0
 8003e36:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003e38:	2002      	movs	r0, #2
}
 8003e3a:	bd38      	pop	{r3, r4, r5, pc}

08003e3c <USBD_CDC_Setup>:
{
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003e3e:	780f      	ldrb	r7, [r1, #0]
 8003e40:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8003e44:	4606      	mov	r6, r0
 8003e46:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003e48:	d023      	beq.n	8003e92 <USBD_CDC_Setup+0x56>
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d119      	bne.n	8003e82 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8003e4e:	88ca      	ldrh	r2, [r1, #6]
 8003e50:	784b      	ldrb	r3, [r1, #1]
 8003e52:	b1c2      	cbz	r2, 8003e86 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8003e54:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003e56:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8003e5a:	d50b      	bpl.n	8003e74 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003e5c:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8003e60:	4618      	mov	r0, r3
 8003e62:	688f      	ldr	r7, [r1, #8]
 8003e64:	4629      	mov	r1, r5
 8003e66:	47b8      	blx	r7
          USBD_CtlSendData (pdev,
 8003e68:	88e2      	ldrh	r2, [r4, #6]
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8003e6e:	f005 f989 	bl	8009184 <USBD_CtlSendData>
      break;
 8003e72:	e006      	b.n	8003e82 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8003e74:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8003e78:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev,
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	f005 f996 	bl	80091ae <USBD_CtlPrepareRx>
}
 8003e82:	2000      	movs	r0, #0
 8003e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003e86:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8003e8a:	6884      	ldr	r4, [r0, #8]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	47a0      	blx	r4
 8003e90:	e7f7      	b.n	8003e82 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8003e92:	784b      	ldrb	r3, [r1, #1]
 8003e94:	2b0a      	cmp	r3, #10
 8003e96:	d1f4      	bne.n	8003e82 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8003e98:	2201      	movs	r2, #1
 8003e9a:	4901      	ldr	r1, [pc, #4]	; (8003ea0 <USBD_CDC_Setup+0x64>)
 8003e9c:	e7e7      	b.n	8003e6e <USBD_CDC_Setup+0x32>
 8003e9e:	bf00      	nop
 8003ea0:	20000638 	.word	0x20000638

08003ea4 <USBD_CDC_DeInit>:
{
 8003ea4:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8003ea6:	2183      	movs	r1, #131	; 0x83
{
 8003ea8:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8003eaa:	f7ff fe04 	bl	8003ab6 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8003eae:	2103      	movs	r1, #3
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	f7ff fe00 	bl	8003ab6 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8003eb6:	2182      	movs	r1, #130	; 0x82
 8003eb8:	4620      	mov	r0, r4
 8003eba:	f7ff fdfc 	bl	8003ab6 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8003ebe:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8003ec2:	b153      	cbz	r3, 8003eda <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003ec4:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003ecc:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8003ed0:	f006 fda8 	bl	800aa24 <free>
    pdev->pClassData = NULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8003eda:	2000      	movs	r0, #0
 8003edc:	bd10      	pop	{r4, pc}

08003ede <USBD_CDC_Init>:
{
 8003ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003ee0:	7c03      	ldrb	r3, [r0, #16]
{
 8003ee2:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003ee4:	bb7b      	cbnz	r3, 8003f46 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8003ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003eea:	2202      	movs	r2, #2
 8003eec:	2183      	movs	r1, #131	; 0x83
 8003eee:	f7ff fdd8 	bl	8003aa2 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8003ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	2103      	movs	r1, #3
 8003efa:	4620      	mov	r0, r4
 8003efc:	f7ff fdd1 	bl	8003aa2 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8003f00:	2308      	movs	r3, #8
 8003f02:	2203      	movs	r2, #3
 8003f04:	2182      	movs	r1, #130	; 0x82
 8003f06:	4620      	mov	r0, r4
 8003f08:	f7ff fdcb 	bl	8003aa2 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003f0c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003f10:	f006 fd80 	bl	800aa14 <malloc>
 8003f14:	4606      	mov	r6, r0
 8003f16:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8003f1a:	b320      	cbz	r0, 8003f66 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003f1c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003f24:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8003f26:	2500      	movs	r5, #0
 8003f28:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8003f2c:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003f30:	b987      	cbnz	r7, 8003f54 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8003f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f36:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003f3a:	2103      	movs	r1, #3
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f7ff fdf7 	bl	8003b30 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8003f42:	4638      	mov	r0, r7
 8003f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8003f46:	2340      	movs	r3, #64	; 0x40
 8003f48:	2202      	movs	r2, #2
 8003f4a:	2183      	movs	r1, #131	; 0x83
 8003f4c:	f7ff fda9 	bl	8003aa2 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8003f50:	2340      	movs	r3, #64	; 0x40
 8003f52:	e7d0      	b.n	8003ef6 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8003f54:	2340      	movs	r3, #64	; 0x40
 8003f56:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003f5a:	2103      	movs	r1, #3
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f7ff fde7 	bl	8003b30 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8003f62:	4628      	mov	r0, r5
 8003f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1;
 8003f66:	2001      	movs	r0, #1
}
 8003f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f6c <CDC_Itf_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
 8003f6c:	b508      	push	{r3, lr}
  /* DeInitialize the UART peripheral */
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8003f6e:	4802      	ldr	r0, [pc, #8]	; (8003f78 <CDC_Itf_DeInit+0xc>)
 8003f70:	f002 fe0d 	bl	8006b8e <HAL_UART_DeInit>
  {
    /* Initialization Error */
 //   Error_Handler();
 }
  return (USBD_OK);
}
 8003f74:	2000      	movs	r0, #0
 8003f76:	bd08      	pop	{r3, pc}
 8003f78:	20009500 	.word	0x20009500

08003f7c <CDC_Itf_Init>:
{
 8003f7c:	b570      	push	{r4, r5, r6, lr}
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8003f7e:	4a10      	ldr	r2, [pc, #64]	; (8003fc0 <CDC_Itf_Init+0x44>)
  UartHandle.Instance          = USARTx;
 8003f80:	4c10      	ldr	r4, [pc, #64]	; (8003fc4 <CDC_Itf_Init+0x48>)
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 8003f82:	4e11      	ldr	r6, [pc, #68]	; (8003fc8 <CDC_Itf_Init+0x4c>)
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8003f84:	2500      	movs	r5, #0
 8003f86:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003f8a:	e884 002c 	stmia.w	r4, {r2, r3, r5}
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8003f8e:	4620      	mov	r0, r4
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8003f90:	230c      	movs	r3, #12
 8003f92:	6163      	str	r3, [r4, #20]
  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 8003f94:	60e5      	str	r5, [r4, #12]
  UartHandle.Init.Parity       = UART_PARITY_NONE;
 8003f96:	6125      	str	r5, [r4, #16]
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8003f98:	61a5      	str	r5, [r4, #24]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8003f9a:	f003 f8a7 	bl	80070ec <HAL_UART_Init>
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	4631      	mov	r1, r6
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	f002 fe0d 	bl	8006bc2 <HAL_UART_Receive_IT>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003fa8:	4b08      	ldr	r3, [pc, #32]	; (8003fcc <CDC_Itf_Init+0x50>)
  hcdc->RxBuffer = pbuff;
 8003faa:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <CDC_Itf_Init+0x54>)
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003fac:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
}
 8003fb0:	4628      	mov	r0, r5
  hcdc->TxBuffer = pbuff;
 8003fb2:	f8c3 6208 	str.w	r6, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003fb6:	f8c3 5210 	str.w	r5, [r3, #528]	; 0x210
  hcdc->RxBuffer = pbuff;
 8003fba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8003fbe:	bd70      	pop	{r4, r5, r6, pc}
 8003fc0:	40013800 	.word	0x40013800
 8003fc4:	20009500 	.word	0x20009500
 8003fc8:	200095d9 	.word	0x200095d9
 8003fcc:	20008794 	.word	0x20008794
 8003fd0:	2000a1cc 	.word	0x2000a1cc

08003fd4 <STORAGE_IsReady>:
{
 8003fd4:	b510      	push	{r4, lr}
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8003fd6:	f7fd f855 	bl	8001084 <BSP_SD_IsDetected>
 8003fda:	4c0b      	ldr	r4, [pc, #44]	; (8004008 <STORAGE_IsReady+0x34>)
    if(prev_status < 0)
 8003fdc:	f994 3000 	ldrsb.w	r3, [r4]
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8003fe0:	b160      	cbz	r0, 8003ffc <STORAGE_IsReady+0x28>
    if(prev_status < 0)
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	da03      	bge.n	8003fee <STORAGE_IsReady+0x1a>
      BSP_SD_Init();
 8003fe6:	f7fd f909 	bl	80011fc <BSP_SD_Init>
      prev_status = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	7023      	strb	r3, [r4, #0]
    if(BSP_SD_GetStatus() == SD_TRANSFER_OK)
 8003fee:	f7fd f86f 	bl	80010d0 <BSP_SD_GetStatus>
 8003ff2:	3000      	adds	r0, #0
 8003ff4:	bf18      	it	ne
 8003ff6:	2001      	movne	r0, #1
 8003ff8:	4240      	negs	r0, r0
 8003ffa:	bd10      	pop	{r4, pc}
  else if(prev_status == 0)
 8003ffc:	b90b      	cbnz	r3, 8004002 <STORAGE_IsReady+0x2e>
    prev_status = -1;
 8003ffe:	23ff      	movs	r3, #255	; 0xff
 8004000:	7023      	strb	r3, [r4, #0]
  int8_t ret = -1;
 8004002:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004006:	bd10      	pop	{r4, pc}
 8004008:	20000639 	.word	0x20000639

0800400c <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
  switch (cmd)
 800400c:	2820      	cmp	r0, #32
{
 800400e:	b538      	push	{r3, r4, r5, lr}
  switch (cmd)
 8004010:	d003      	beq.n	800401a <CDC_Itf_Control+0xe>
 8004012:	2821      	cmp	r0, #33	; 0x21
 8004014:	d048      	beq.n	80040a8 <CDC_Itf_Control+0x9c>
  default:
    break;
  }

  return (USBD_OK);
}
 8004016:	2000      	movs	r0, #0
 8004018:	bd38      	pop	{r3, r4, r5, pc}
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800401a:	4c2c      	ldr	r4, [pc, #176]	; (80040cc <CDC_Itf_Control+0xc0>)
 800401c:	680b      	ldr	r3, [r1, #0]
 800401e:	6023      	str	r3, [r4, #0]
  * @retval None.
  * @note   When a configuration is not supported, a default value is used.
  */
static void ComPort_Config(void)
{
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8004020:	4d2b      	ldr	r5, [pc, #172]	; (80040d0 <CDC_Itf_Control+0xc4>)
    LineCoding.format     = pbuf[4];
 8004022:	790b      	ldrb	r3, [r1, #4]
 8004024:	7123      	strb	r3, [r4, #4]
    LineCoding.paritytype = pbuf[5];
 8004026:	794b      	ldrb	r3, [r1, #5]
 8004028:	7163      	strb	r3, [r4, #5]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 800402a:	4628      	mov	r0, r5
    LineCoding.datatype   = pbuf[6];
 800402c:	798b      	ldrb	r3, [r1, #6]
 800402e:	71a3      	strb	r3, [r4, #6]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8004030:	f002 fdad 	bl	8006b8e <HAL_UART_DeInit>
  {

  }

  /* set the Stop bit */
  switch (LineCoding.format)
 8004034:	7923      	ldrb	r3, [r4, #4]
 8004036:	4628      	mov	r0, r5
 8004038:	b12b      	cbz	r3, 8004046 <CDC_Itf_Control+0x3a>
 800403a:	2b02      	cmp	r3, #2
 800403c:	d001      	beq.n	8004042 <CDC_Itf_Control+0x36>
    break;
  case 2:
    UartHandle.Init.StopBits = UART_STOPBITS_2;
    break;
  default :
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 800403e:	2300      	movs	r3, #0
 8004040:	e001      	b.n	8004046 <CDC_Itf_Control+0x3a>
    UartHandle.Init.StopBits = UART_STOPBITS_2;
 8004042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    break;
  }

  /* set the parity bit*/
  switch (LineCoding.paritytype)
 8004046:	7962      	ldrb	r2, [r4, #5]
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 8004048:	60c3      	str	r3, [r0, #12]
  switch (LineCoding.paritytype)
 800404a:	2a01      	cmp	r2, #1
 800404c:	d020      	beq.n	8004090 <CDC_Itf_Control+0x84>
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	d301      	bcc.n	8004058 <CDC_Itf_Control+0x4c>
 8004054:	2a02      	cmp	r2, #2
 8004056:	d01e      	beq.n	8004096 <CDC_Itf_Control+0x8a>
    UartHandle.Init.Parity = UART_PARITY_NONE;
    break;
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (LineCoding.datatype)
 8004058:	79a2      	ldrb	r2, [r4, #6]
    UartHandle.Init.Parity = UART_PARITY_NONE;
 800405a:	6103      	str	r3, [r0, #16]
  switch (LineCoding.datatype)
 800405c:	2a07      	cmp	r2, #7
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	d001      	beq.n	8004068 <CDC_Itf_Control+0x5c>
 8004064:	2a08      	cmp	r2, #8
 8004066:	d019      	beq.n	800409c <CDC_Itf_Control+0x90>
      UartHandle.Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
  default :
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8004068:	6083      	str	r3, [r0, #8]
    break;
  }

  UartHandle.Init.BaudRate     = LineCoding.bitrate;
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	6043      	str	r3, [r0, #4]
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 800406e:	220c      	movs	r2, #12
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8004070:	2300      	movs	r3, #0
 8004072:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8004074:	6142      	str	r2, [r0, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8004076:	61c3      	str	r3, [r0, #28]

  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8004078:	4815      	ldr	r0, [pc, #84]	; (80040d0 <CDC_Itf_Control+0xc4>)
 800407a:	f003 f837 	bl	80070ec <HAL_UART_Init>
  {

 }

  /* Start reception: provide the buffer pointer with offset and the buffer size */
 HAL_UART_Receive_IT(&UartHandle, (uint8_t *)(UserTxBuffer + UserTxBufPtrIn), 1);
 800407e:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <CDC_Itf_Control+0xc8>)
 8004080:	4915      	ldr	r1, [pc, #84]	; (80040d8 <CDC_Itf_Control+0xcc>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4812      	ldr	r0, [pc, #72]	; (80040d0 <CDC_Itf_Control+0xc4>)
 8004086:	2201      	movs	r2, #1
 8004088:	4419      	add	r1, r3
 800408a:	f002 fd9a 	bl	8006bc2 <HAL_UART_Receive_IT>
 800408e:	e7c2      	b.n	8004016 <CDC_Itf_Control+0xa>
    UartHandle.Init.Parity = UART_PARITY_ODD;
 8004090:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004094:	e7e0      	b.n	8004058 <CDC_Itf_Control+0x4c>
    UartHandle.Init.Parity = UART_PARITY_EVEN;
 8004096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800409a:	e7dd      	b.n	8004058 <CDC_Itf_Control+0x4c>
    if(UartHandle.Init.Parity == UART_PARITY_NONE)
 800409c:	6903      	ldr	r3, [r0, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0e2      	beq.n	8004068 <CDC_Itf_Control+0x5c>
      UartHandle.Init.WordLength = UART_WORDLENGTH_9B;
 80040a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040a6:	e7df      	b.n	8004068 <CDC_Itf_Control+0x5c>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80040a8:	4b08      	ldr	r3, [pc, #32]	; (80040cc <CDC_Itf_Control+0xc0>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	0a12      	lsrs	r2, r2, #8
 80040b2:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 80040b4:	885a      	ldrh	r2, [r3, #2]
 80040b6:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 80040b8:	78da      	ldrb	r2, [r3, #3]
 80040ba:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 80040bc:	791a      	ldrb	r2, [r3, #4]
 80040be:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 80040c0:	795a      	ldrb	r2, [r3, #5]
 80040c2:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;
 80040c4:	799b      	ldrb	r3, [r3, #6]
 80040c6:	718b      	strb	r3, [r1, #6]
    break;
 80040c8:	e7a5      	b.n	8004016 <CDC_Itf_Control+0xa>
 80040ca:	bf00      	nop
 80040cc:	200000b8 	.word	0x200000b8
 80040d0:	20009500 	.word	0x20009500
 80040d4:	20000634 	.word	0x20000634
 80040d8:	200095d9 	.word	0x200095d9

080040dc <LL_RTC_DATE_GetDay.constprop.2>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <LL_RTC_DATE_GetDay.constprop.2+0x2c>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040de:	2030      	movs	r0, #48	; 0x30
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	fa90 f0a0 	rbit	r0, r0
 80040e6:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 80040e8:	fab0 f080 	clz	r0, r0
 80040ec:	fa92 f2a2 	rbit	r2, r2
 80040f0:	f003 0130 	and.w	r1, r3, #48	; 0x30
 80040f4:	fab2 f282 	clz	r2, r2
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	fa21 f000 	lsr.w	r0, r1, r0
 8004100:	40d3      	lsrs	r3, r2
}
 8004102:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004106:	4770      	bx	lr
 8004108:	40002800 	.word	0x40002800

0800410c <LL_RTC_DATE_GetMonth.constprop.3>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 800410c:	4b0b      	ldr	r3, [pc, #44]	; (800413c <LL_RTC_DATE_GetMonth.constprop.3+0x30>)
 800410e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	fa90 f0a0 	rbit	r0, r0
 8004118:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 800411c:	fab0 f080 	clz	r0, r0
 8004120:	fa92 f2a2 	rbit	r2, r2
 8004124:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 8004128:	fab2 f282 	clz	r2, r2
 800412c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004130:	fa21 f000 	lsr.w	r0, r1, r0
 8004134:	40d3      	lsrs	r3, r2
}
 8004136:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800413a:	4770      	bx	lr
 800413c:	40002800 	.word	0x40002800

08004140 <LL_RTC_DATE_GetYear.constprop.4>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <LL_RTC_DATE_GetYear.constprop.4+0x30>)
 8004142:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	fa90 f0a0 	rbit	r0, r0
 800414c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 8004150:	fab0 f080 	clz	r0, r0
 8004154:	fa92 f2a2 	rbit	r2, r2
 8004158:	f403 0170 	and.w	r1, r3, #15728640	; 0xf00000
 800415c:	fab2 f282 	clz	r2, r2
 8004160:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004164:	fa21 f000 	lsr.w	r0, r1, r0
 8004168:	40d3      	lsrs	r3, r2
}
 800416a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800416e:	4770      	bx	lr
 8004170:	40002800 	.word	0x40002800

08004174 <LL_RTC_TIME_GetSecond.constprop.5>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 8004174:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <LL_RTC_TIME_GetSecond.constprop.5+0x2c>)
 8004176:	2070      	movs	r0, #112	; 0x70
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	fa90 f0a0 	rbit	r0, r0
 800417e:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 8004180:	fab0 f080 	clz	r0, r0
 8004184:	fa92 f2a2 	rbit	r2, r2
 8004188:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800418c:	fab2 f282 	clz	r2, r2
 8004190:	f003 030f 	and.w	r3, r3, #15
 8004194:	fa21 f000 	lsr.w	r0, r1, r0
 8004198:	40d3      	lsrs	r3, r2
}
 800419a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800419e:	4770      	bx	lr
 80041a0:	40002800 	.word	0x40002800

080041a4 <LL_RTC_TIME_GetMinute.constprop.6>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 80041a4:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <LL_RTC_TIME_GetMinute.constprop.6+0x30>)
 80041a6:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	fa90 f0a0 	rbit	r0, r0
 80041b0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 80041b4:	fab0 f080 	clz	r0, r0
 80041b8:	fa92 f2a2 	rbit	r2, r2
 80041bc:	f403 41e0 	and.w	r1, r3, #28672	; 0x7000
 80041c0:	fab2 f282 	clz	r2, r2
 80041c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80041c8:	fa21 f000 	lsr.w	r0, r1, r0
 80041cc:	40d3      	lsrs	r3, r2
}
 80041ce:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 80041d2:	4770      	bx	lr
 80041d4:	40002800 	.word	0x40002800

080041d8 <LL_RTC_TIME_GetHour.constprop.7>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <LL_RTC_TIME_GetHour.constprop.7+0x30>)
 80041da:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	fa90 f0a0 	rbit	r0, r0
 80041e4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 80041e8:	fab0 f080 	clz	r0, r0
 80041ec:	fa92 f2a2 	rbit	r2, r2
 80041f0:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
 80041f4:	fab2 f282 	clz	r2, r2
 80041f8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80041fc:	fa21 f000 	lsr.w	r0, r1, r0
 8004200:	40d3      	lsrs	r3, r2
}
 8004202:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004206:	4770      	bx	lr
 8004208:	40002800 	.word	0x40002800

0800420c <USBD_CDC_RegisterInterface>:
  if(fops != NULL)
 800420c:	b119      	cbz	r1, 8004216 <USBD_CDC_RegisterInterface+0xa>
    pdev->pUserData= fops;
 800420e:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;
 8004212:	2000      	movs	r0, #0
 8004214:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8004216:	2002      	movs	r0, #2
}
 8004218:	4770      	bx	lr

0800421a <USBD_CDC_TransmitPacket>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800421a:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 800421e:	b510      	push	{r4, lr}
  if(pdev->pClassData != NULL)
 8004220:	b172      	cbz	r2, 8004240 <USBD_CDC_TransmitPacket+0x26>
    if(hcdc->TxState == 0)
 8004222:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8004226:	2301      	movs	r3, #1
 8004228:	b964      	cbnz	r4, 8004244 <USBD_CDC_TransmitPacket+0x2a>
      hcdc->TxState = 1;
 800422a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      USBD_LL_Transmit(pdev,
 800422e:	2183      	movs	r1, #131	; 0x83
 8004230:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8004234:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8004238:	f7ff fc73 	bl	8003b22 <USBD_LL_Transmit>
      return USBD_OK;
 800423c:	4620      	mov	r0, r4
 800423e:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8004240:	2002      	movs	r0, #2
 8004242:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8004244:	4618      	mov	r0, r3
}
 8004246:	bd10      	pop	{r4, pc}

08004248 <USBD_CDC_ReceivePacket>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004248:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 800424c:	b510      	push	{r4, lr}
  if(pdev->pClassData != NULL)
 800424e:	b162      	cbz	r2, 800426a <USBD_CDC_ReceivePacket+0x22>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004250:	7c04      	ldrb	r4, [r0, #16]
 8004252:	b944      	cbnz	r4, 8004266 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8004254:	f44f 7300 	mov.w	r3, #512	; 0x200
      USBD_LL_PrepareReceive(pdev,
 8004258:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800425c:	2103      	movs	r1, #3
 800425e:	f7ff fc67 	bl	8003b30 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8004262:	2000      	movs	r0, #0
 8004264:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8004266:	2340      	movs	r3, #64	; 0x40
 8004268:	e7f6      	b.n	8004258 <USBD_CDC_ReceivePacket+0x10>
    return USBD_FAIL;
 800426a:	2002      	movs	r0, #2
}
 800426c:	bd10      	pop	{r4, pc}
	...

08004270 <CDC_Itf_Receive>:
{
 8004270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
BuffLength=0;
 8004274:	4dc1      	ldr	r5, [pc, #772]	; (800457c <CDC_Itf_Receive+0x30c>)
 8004276:	4cc2      	ldr	r4, [pc, #776]	; (8004580 <CDC_Itf_Receive+0x310>)
 8004278:	2300      	movs	r3, #0
{
 800427a:	b087      	sub	sp, #28
BuffLength=0;
 800427c:	602b      	str	r3, [r5, #0]
for (i = 0; i < *Len; i++)
 800427e:	4602      	mov	r2, r0
 8004280:	680e      	ldr	r6, [r1, #0]
 8004282:	1a13      	subs	r3, r2, r0
 8004284:	429e      	cmp	r6, r3
 8004286:	f200 8089 	bhi.w	800439c <CDC_Itf_Receive+0x12c>
if (TempUserBuffer[0] == 'g')
 800428a:	7823      	ldrb	r3, [r4, #0]
 800428c:	2b67      	cmp	r3, #103	; 0x67
 800428e:	f040 808c 	bne.w	80043aa <CDC_Itf_Receive+0x13a>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8004292:	f894 c002 	ldrb.w	ip, [r4, #2]
 8004296:	78e3      	ldrb	r3, [r4, #3]
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8004298:	f894 e006 	ldrb.w	lr, [r4, #6]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 800429c:	7ae2      	ldrb	r2, [r4, #11]
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 800429e:	7be1      	ldrb	r1, [r4, #15]
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 80042a0:	7ce0      	ldrb	r0, [r4, #19]
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 80042a2:	f894 a016 	ldrb.w	sl, [r4, #22]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 80042a6:	f8df b324 	ldr.w	fp, [pc, #804]	; 80045cc <CDC_Itf_Receive+0x35c>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 80042aa:	4fb6      	ldr	r7, [pc, #728]	; (8004584 <CDC_Itf_Receive+0x314>)
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 80042ac:	4eb6      	ldr	r6, [pc, #728]	; (8004588 <CDC_Itf_Receive+0x318>)
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 80042ae:	f8df 9320 	ldr.w	r9, [pc, #800]	; 80045d0 <CDC_Itf_Receive+0x360>
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 80042b2:	f8df 8320 	ldr.w	r8, [pc, #800]	; 80045d4 <CDC_Itf_Receive+0x364>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 80042b6:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80042ba:	3b30      	subs	r3, #48	; 0x30
 80042bc:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80042c0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 80042c4:	79e3      	ldrb	r3, [r4, #7]
 80042c6:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80042ca:	3b30      	subs	r3, #48	; 0x30
 80042cc:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 80042d0:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 80042d4:	7aa3      	ldrb	r3, [r4, #10]
 80042d6:	3b30      	subs	r3, #48	; 0x30
 80042d8:	3a30      	subs	r2, #48	; 0x30
 80042da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80042de:	eb02 0343 	add.w	r3, r2, r3, lsl #1
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 80042e2:	7ba2      	ldrb	r2, [r4, #14]
 80042e4:	3a30      	subs	r2, #48	; 0x30
 80042e6:	3930      	subs	r1, #48	; 0x30
 80042e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80042ec:	eb01 0242 	add.w	r2, r1, r2, lsl #1
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 80042f0:	7ca1      	ldrb	r1, [r4, #18]
 80042f2:	3930      	subs	r1, #48	; 0x30
 80042f4:	3830      	subs	r0, #48	; 0x30
 80042f6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80042fa:	eb00 0141 	add.w	r1, r0, r1, lsl #1
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 80042fe:	7de0      	ldrb	r0, [r4, #23]
 8004300:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 8004304:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8004308:	3830      	subs	r0, #48	; 0x30
 800430a:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 800430e:	f8df a294 	ldr.w	sl, [pc, #660]	; 80045a4 <CDC_Itf_Receive+0x334>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8004312:	fa5f fc8c 	uxtb.w	ip, ip
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8004316:	fa5f fe8e 	uxtb.w	lr, lr
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 800431a:	b2db      	uxtb	r3, r3
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 800431c:	b2d2      	uxtb	r2, r2
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 800431e:	b2c9      	uxtb	r1, r1
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8004320:	b2c0      	uxtb	r0, r0
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8004322:	f887 c000 	strb.w	ip, [r7]
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8004326:	f886 e000 	strb.w	lr, [r6]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 800432a:	f88b 3000 	strb.w	r3, [fp]
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 800432e:	f889 2000 	strb.w	r2, [r9]
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8004332:	f888 1000 	strb.w	r1, [r8]
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8004336:	f88a 0000 	strb.w	r0, [sl]
Set_RTC_Calendar(RTC_Y, RTC_Mo , RTC_D, RTC_H, RTC_Mi, RTC_S);  // Set Device RTC with received Values
 800433a:	f8cd c004 	str.w	ip, [sp, #4]
 800433e:	f8cd e000 	str.w	lr, [sp]
 8004342:	f7fe fb41 	bl	80029c8 <Set_RTC_Calendar>
UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Timestamp Received :%d:%d:%d_%d/%d/%d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);//
 8004346:	f89a 2000 	ldrb.w	r2, [sl]
 800434a:	f89b 3000 	ldrb.w	r3, [fp]
 800434e:	9204      	str	r2, [sp, #16]
 8004350:	f899 2000 	ldrb.w	r2, [r9]
 8004354:	9203      	str	r2, [sp, #12]
 8004356:	f898 2000 	ldrb.w	r2, [r8]
 800435a:	9202      	str	r2, [sp, #8]
 800435c:	783a      	ldrb	r2, [r7, #0]
 800435e:	f8df b250 	ldr.w	fp, [pc, #592]	; 80045b0 <CDC_Itf_Receive+0x340>
 8004362:	9201      	str	r2, [sp, #4]
 8004364:	7832      	ldrb	r2, [r6, #0]
 8004366:	9200      	str	r2, [sp, #0]
 8004368:	4988      	ldr	r1, [pc, #544]	; (800458c <CDC_Itf_Receive+0x31c>)
 800436a:	4a89      	ldr	r2, [pc, #548]	; (8004590 <CDC_Itf_Receive+0x320>)
 800436c:	4658      	mov	r0, fp
 800436e:	f006 fe8d 	bl	800b08c <siprintf>
 8004372:	4a88      	ldr	r2, [pc, #544]	; (8004594 <CDC_Itf_Receive+0x324>)
 8004374:	4603      	mov	r3, r0
 8004376:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004378:	4887      	ldr	r0, [pc, #540]	; (8004598 <CDC_Itf_Receive+0x328>)
 800437a:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800437e:	b2db      	uxtb	r3, r3
 8004380:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8004384:	f8c2 b208 	str.w	fp, [r2, #520]	; 0x208
USBD_CDC_TransmitPacket(&USBD_Device);//
 8004388:	f7ff ff47 	bl	800421a <USBD_CDC_TransmitPacket>
TempUserBuffer[0] = 0;        // Clear 1st Character to avoid code conflict
 800438c:	2300      	movs	r3, #0
USB_Mode = 1;                 // USB VCP Mode in next USB connectivity
 800438e:	4a83      	ldr	r2, [pc, #524]	; (800459c <CDC_Itf_Receive+0x32c>)
TempUserBuffer[0] = 0;        // Clear 1st Character to avoid code conflict
 8004390:	7023      	strb	r3, [r4, #0]
USB_Mode = 1;                 // USB VCP Mode in next USB connectivity
 8004392:	2301      	movs	r3, #1
 8004394:	7013      	strb	r3, [r2, #0]
Logstart_Create=1;
 8004396:	4a82      	ldr	r2, [pc, #520]	; (80045a0 <CDC_Itf_Receive+0x330>)
	*LP_Ram_Key_Address = 0;
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	e011      	b.n	80043c0 <CDC_Itf_Receive+0x150>
TempUserBuffer[BuffLength] = Buf[i];
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	f812 6b01 	ldrb.w	r6, [r2], #1
 80043a2:	54e6      	strb	r6, [r4, r3]
BuffLength++;
 80043a4:	3301      	adds	r3, #1
 80043a6:	602b      	str	r3, [r5, #0]
 80043a8:	e76a      	b.n	8004280 <CDC_Itf_Receive+0x10>
else if (TempUserBuffer[0] == 'o')   // Turn off All LED
 80043aa:	2b6f      	cmp	r3, #111	; 0x6f
 80043ac:	f04f 0600 	mov.w	r6, #0
 80043b0:	d114      	bne.n	80043dc <CDC_Itf_Receive+0x16c>
RED_LED_OFF();
 80043b2:	f7fd fa71 	bl	8001898 <RED_LED_OFF>
GREEN_LED_OFF();
 80043b6:	f7fd fa8d 	bl	80018d4 <GREEN_LED_OFF>
BLUE_LED_OFF();
 80043ba:	f7fd fa91 	bl	80018e0 <BLUE_LED_OFF>
TempUserBuffer[0] = 0;         // Clear 1st Character to avoid code conflict
 80043be:	7026      	strb	r6, [r4, #0]
for (i = 0; i < BuffLength; i++) // Buffer Empty
 80043c0:	2300      	movs	r3, #0
 80043c2:	682a      	ldr	r2, [r5, #0]
TempUserBuffer[i] = 0;//
 80043c4:	496e      	ldr	r1, [pc, #440]	; (8004580 <CDC_Itf_Receive+0x310>)
 80043c6:	4618      	mov	r0, r3
for (i = 0; i < BuffLength; i++) // Buffer Empty
 80043c8:	4293      	cmp	r3, r2
 80043ca:	f040 8154 	bne.w	8004676 <CDC_Itf_Receive+0x406>
USBD_CDC_ReceivePacket(&USBD_Device);   // Ready for Next packet receive
 80043ce:	4872      	ldr	r0, [pc, #456]	; (8004598 <CDC_Itf_Receive+0x328>)
 80043d0:	f7ff ff3a 	bl	8004248 <USBD_CDC_ReceivePacket>
}
 80043d4:	2000      	movs	r0, #0
 80043d6:	b007      	add	sp, #28
 80043d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
else if (TempUserBuffer[0] == 'B')   // Turn on BLUE LED
 80043dc:	2b42      	cmp	r3, #66	; 0x42
 80043de:	d102      	bne.n	80043e6 <CDC_Itf_Receive+0x176>
BLUE_LED_ONLY();
 80043e0:	f7fd faaa 	bl	8001938 <BLUE_LED_ONLY>
 80043e4:	e7eb      	b.n	80043be <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'b')  // Turn off BLUE LED
 80043e6:	2b62      	cmp	r3, #98	; 0x62
 80043e8:	d104      	bne.n	80043f4 <CDC_Itf_Receive+0x184>
ALL_LED_OFF();
 80043ea:	f7fd fa7f 	bl	80018ec <ALL_LED_OFF>
	TempUserBuffer[0] = 0;       // Clear 1st Character to avoid code conflict
 80043ee:	2300      	movs	r3, #0
 80043f0:	7023      	strb	r3, [r4, #0]
 80043f2:	e7e5      	b.n	80043c0 <CDC_Itf_Receive+0x150>
else if (TempUserBuffer[0] == 'E')  // Turn on Green LED
 80043f4:	2b45      	cmp	r3, #69	; 0x45
 80043f6:	d102      	bne.n	80043fe <CDC_Itf_Receive+0x18e>
GREEN_LED_ONLY();
 80043f8:	f7fd fa9c 	bl	8001934 <GREEN_LED_ONLY>
 80043fc:	e7df      	b.n	80043be <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'e')  // Turn off Green LED
 80043fe:	2b65      	cmp	r3, #101	; 0x65
 8004400:	d0f3      	beq.n	80043ea <CDC_Itf_Receive+0x17a>
else if (TempUserBuffer[0] == 'F')  // Turn on RED LED
 8004402:	2b46      	cmp	r3, #70	; 0x46
 8004404:	d102      	bne.n	800440c <CDC_Itf_Receive+0x19c>
RED_LED_ONLY();
 8004406:	f7fd fa89 	bl	800191c <RED_LED_ONLY>
 800440a:	e7d8      	b.n	80043be <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'f')  // Turn off RED LED
 800440c:	2b66      	cmp	r3, #102	; 0x66
 800440e:	d0ec      	beq.n	80043ea <CDC_Itf_Receive+0x17a>
else if (TempUserBuffer[0] == 'l')  // Turn on White LED
 8004410:	2b6c      	cmp	r3, #108	; 0x6c
 8004412:	d102      	bne.n	800441a <CDC_Itf_Receive+0x1aa>
ALL_LED_ON();
 8004414:	f7fd fa76 	bl	8001904 <ALL_LED_ON>
 8004418:	e7e9      	b.n	80043ee <CDC_Itf_Receive+0x17e>
else if (TempUserBuffer[0] == 'r')   // Read Device RTC Timestamp
 800441a:	2b72      	cmp	r3, #114	; 0x72
 800441c:	f040 8086 	bne.w	800452c <CDC_Itf_Receive+0x2bc>
	RTC_H = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8004420:	f7ff feda 	bl	80041d8 <LL_RTC_TIME_GetHour.constprop.7>
 8004424:	4606      	mov	r6, r0
 8004426:	f7ff fed7 	bl	80041d8 <LL_RTC_TIME_GetHour.constprop.7>
 800442a:	f3c6 1303 	ubfx	r3, r6, #4, #4
 800442e:	f8df a19c 	ldr.w	sl, [pc, #412]	; 80045cc <CDC_Itf_Receive+0x35c>
	RTC_Mi = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8004432:	4e55      	ldr	r6, [pc, #340]	; (8004588 <CDC_Itf_Receive+0x318>)
	RTC_H = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8004434:	f000 000f 	and.w	r0, r0, #15
 8004438:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800443c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004440:	f88a 3000 	strb.w	r3, [sl]
	RTC_Mi = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8004444:	f7ff feae 	bl	80041a4 <LL_RTC_TIME_GetMinute.constprop.6>
 8004448:	4607      	mov	r7, r0
 800444a:	f7ff feab 	bl	80041a4 <LL_RTC_TIME_GetMinute.constprop.6>
 800444e:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8004452:	f000 000f 	and.w	r0, r0, #15
 8004456:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800445a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800445e:	7033      	strb	r3, [r6, #0]
	RTC_S =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8004460:	f7ff fe88 	bl	8004174 <LL_RTC_TIME_GetSecond.constprop.5>
 8004464:	4680      	mov	r8, r0
 8004466:	f7ff fe85 	bl	8004174 <LL_RTC_TIME_GetSecond.constprop.5>
 800446a:	f3c8 1303 	ubfx	r3, r8, #4, #4
 800446e:	4f45      	ldr	r7, [pc, #276]	; (8004584 <CDC_Itf_Receive+0x314>)
	RTC_Mo =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 8004470:	f8df 8160 	ldr.w	r8, [pc, #352]	; 80045d4 <CDC_Itf_Receive+0x364>
	RTC_S =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8004474:	f000 000f 	and.w	r0, r0, #15
 8004478:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800447c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004480:	703b      	strb	r3, [r7, #0]
	RTC_Mo =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 8004482:	f7ff fe43 	bl	800410c <LL_RTC_DATE_GetMonth.constprop.3>
 8004486:	4681      	mov	r9, r0
 8004488:	f7ff fe40 	bl	800410c <LL_RTC_DATE_GetMonth.constprop.3>
 800448c:	f3c9 1303 	ubfx	r3, r9, #4, #4
 8004490:	f000 000f 	and.w	r0, r0, #15
 8004494:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004498:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800449c:	f888 3000 	strb.w	r3, [r8]
	RTC_D = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 80044a0:	f7ff fe1c 	bl	80040dc <LL_RTC_DATE_GetDay.constprop.2>
 80044a4:	4683      	mov	fp, r0
 80044a6:	f7ff fe19 	bl	80040dc <LL_RTC_DATE_GetDay.constprop.2>
 80044aa:	f3cb 1303 	ubfx	r3, fp, #4, #4
 80044ae:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80045d0 <CDC_Itf_Receive+0x360>
 80044b2:	f000 000f 	and.w	r0, r0, #15
 80044b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80044ba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80044be:	f889 3000 	strb.w	r3, [r9]
	RTC_Y =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 80044c2:	f7ff fe3d 	bl	8004140 <LL_RTC_DATE_GetYear.constprop.4>
 80044c6:	4683      	mov	fp, r0
 80044c8:	f7ff fe3a 	bl	8004140 <LL_RTC_DATE_GetYear.constprop.4>
 80044cc:	f3cb 1303 	ubfx	r3, fp, #4, #4
 80044d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80044d4:	f000 000f 	and.w	r0, r0, #15
 80044d8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80044dc:	4b31      	ldr	r3, [pc, #196]	; (80045a4 <CDC_Itf_Receive+0x334>)
		UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\nCurrent Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);
 80044de:	4932      	ldr	r1, [pc, #200]	; (80045a8 <CDC_Itf_Receive+0x338>)
	RTC_Y =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 80044e0:	b2c0      	uxtb	r0, r0
 80044e2:	7018      	strb	r0, [r3, #0]
	(void)RTC->DR;
 80044e4:	4b31      	ldr	r3, [pc, #196]	; (80045ac <CDC_Itf_Receive+0x33c>)
 80044e6:	685a      	ldr	r2, [r3, #4]
	(void)RTC->TR;
 80044e8:	681b      	ldr	r3, [r3, #0]
		UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\nCurrent Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);
 80044ea:	f89a 3000 	ldrb.w	r3, [sl]
 80044ee:	9004      	str	r0, [sp, #16]
 80044f0:	f899 2000 	ldrb.w	r2, [r9]
 80044f4:	9203      	str	r2, [sp, #12]
 80044f6:	f898 2000 	ldrb.w	r2, [r8]
 80044fa:	9202      	str	r2, [sp, #8]
 80044fc:	783a      	ldrb	r2, [r7, #0]
 80044fe:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80045b0 <CDC_Itf_Receive+0x340>
 8004502:	9201      	str	r2, [sp, #4]
 8004504:	7832      	ldrb	r2, [r6, #0]
 8004506:	9200      	str	r2, [sp, #0]
 8004508:	4650      	mov	r0, sl
 800450a:	4a21      	ldr	r2, [pc, #132]	; (8004590 <CDC_Itf_Receive+0x320>)
 800450c:	f006 fdbe 	bl	800b08c <siprintf>
 8004510:	4a20      	ldr	r2, [pc, #128]	; (8004594 <CDC_Itf_Receive+0x324>)
 8004512:	4603      	mov	r3, r0
 8004514:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004516:	4820      	ldr	r0, [pc, #128]	; (8004598 <CDC_Itf_Receive+0x328>)
 8004518:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800451c:	b2db      	uxtb	r3, r3
  hcdc->TxBuffer = pbuff;
 800451e:	f8c2 a208 	str.w	sl, [r2, #520]	; 0x208
  hcdc->TxLength = length;
 8004522:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
	USBD_CDC_TransmitPacket(&USBD_Device);//
 8004526:	f7ff fe78 	bl	800421a <USBD_CDC_TransmitPacket>
 800452a:	e760      	b.n	80043ee <CDC_Itf_Receive+0x17e>
else if (TempUserBuffer[0] == 'U')    // USB MSC in next USB connectivity
 800452c:	2b55      	cmp	r3, #85	; 0x55
 800452e:	d153      	bne.n	80045d8 <CDC_Itf_Receive+0x368>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n Return to USB MSC Mode after USB reconnect..\r\n\r\n",software_vr);
 8004530:	4e1f      	ldr	r6, [pc, #124]	; (80045b0 <CDC_Itf_Receive+0x340>)
 8004532:	4920      	ldr	r1, [pc, #128]	; (80045b4 <CDC_Itf_Receive+0x344>)
 8004534:	4a16      	ldr	r2, [pc, #88]	; (8004590 <CDC_Itf_Receive+0x320>)
 8004536:	4630      	mov	r0, r6
 8004538:	f006 fda8 	bl	800b08c <siprintf>
 800453c:	4a15      	ldr	r2, [pc, #84]	; (8004594 <CDC_Itf_Receive+0x324>)
 800453e:	4603      	mov	r3, r0
 8004540:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004542:	4815      	ldr	r0, [pc, #84]	; (8004598 <CDC_Itf_Receive+0x328>)
 8004544:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 800454e:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);//
 8004552:	f7ff fe62 	bl	800421a <USBD_CDC_TransmitPacket>
	USB_Mode = 1;                    // USB MSC Mode
 8004556:	4911      	ldr	r1, [pc, #68]	; (800459c <CDC_Itf_Receive+0x32c>)
 8004558:	2201      	movs	r2, #1
 800455a:	700a      	strb	r2, [r1, #0]
	Logstart_Delete=1;
 800455c:	4916      	ldr	r1, [pc, #88]	; (80045b8 <CDC_Itf_Receive+0x348>)
 800455e:	600a      	str	r2, [r1, #0]
	EnterReset_Create=0;
 8004560:	4916      	ldr	r1, [pc, #88]	; (80045bc <CDC_Itf_Receive+0x34c>)
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 8004562:	2300      	movs	r3, #0
	EnterReset_Create=0;
 8004564:	600b      	str	r3, [r1, #0]
	EnterDFU_Create=0;
 8004566:	4916      	ldr	r1, [pc, #88]	; (80045c0 <CDC_Itf_Receive+0x350>)
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 8004568:	7023      	strb	r3, [r4, #0]
	EnterDFU_Create=0;
 800456a:	600b      	str	r3, [r1, #0]
	Logstart_Create=1;
 800456c:	490c      	ldr	r1, [pc, #48]	; (80045a0 <CDC_Itf_Receive+0x330>)
 800456e:	600a      	str	r2, [r1, #0]
	 VCP_Bypass=1;
 8004570:	4914      	ldr	r1, [pc, #80]	; (80045c4 <CDC_Itf_Receive+0x354>)
 8004572:	700a      	strb	r2, [r1, #0]
	 Data_log_Start_Resume = 0;
 8004574:	4a14      	ldr	r2, [pc, #80]	; (80045c8 <CDC_Itf_Receive+0x358>)
 8004576:	7013      	strb	r3, [r2, #0]
 8004578:	e722      	b.n	80043c0 <CDC_Itf_Receive+0x150>
 800457a:	bf00      	nop
 800457c:	200094fc 	.word	0x200094fc
 8004580:	2000aa18 	.word	0x2000aa18
 8004584:	2000a9cc 	.word	0x2000a9cc
 8004588:	2000a9cd 	.word	0x2000a9cd
 800458c:	0800c7da 	.word	0x0800c7da
 8004590:	0002e7c3 	.word	0x0002e7c3
 8004594:	2000a9ce 	.word	0x2000a9ce
 8004598:	20008794 	.word	0x20008794
 800459c:	20009022 	.word	0x20009022
 80045a0:	20009570 	.word	0x20009570
 80045a4:	200095d8 	.word	0x200095d8
 80045a8:	0800c816 	.word	0x0800c816
 80045ac:	40002800 	.word	0x40002800
 80045b0:	20009de4 	.word	0x20009de4
 80045b4:	0800c85b 	.word	0x0800c85b
 80045b8:	200094f4 	.word	0x200094f4
 80045bc:	20009de0 	.word	0x20009de0
 80045c0:	2000a9d0 	.word	0x2000a9d0
 80045c4:	20008afd 	.word	0x20008afd
 80045c8:	20008773 	.word	0x20008773
 80045cc:	200094f8 	.word	0x200094f8
 80045d0:	2000a9d4 	.word	0x2000a9d4
 80045d4:	200094f0 	.word	0x200094f0
else if (TempUserBuffer[0] == 'Z')    // Reset Device
 80045d8:	2b5a      	cmp	r3, #90	; 0x5a
 80045da:	d118      	bne.n	800460e <CDC_Itf_Receive+0x39e>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to reset AIM device..\r\n",software_vr);
 80045dc:	4e27      	ldr	r6, [pc, #156]	; (800467c <CDC_Itf_Receive+0x40c>)
 80045de:	4a28      	ldr	r2, [pc, #160]	; (8004680 <CDC_Itf_Receive+0x410>)
 80045e0:	4928      	ldr	r1, [pc, #160]	; (8004684 <CDC_Itf_Receive+0x414>)
 80045e2:	4630      	mov	r0, r6
 80045e4:	f006 fd52 	bl	800b08c <siprintf>
 80045e8:	4a27      	ldr	r2, [pc, #156]	; (8004688 <CDC_Itf_Receive+0x418>)
 80045ea:	4603      	mov	r3, r0
 80045ec:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80045ee:	4827      	ldr	r0, [pc, #156]	; (800468c <CDC_Itf_Receive+0x41c>)
 80045f0:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 80045fa:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 80045fe:	f7ff fe0c 	bl	800421a <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 8004602:	2300      	movs	r3, #0
 8004604:	7023      	strb	r3, [r4, #0]
	EnterReset_Create=1;
 8004606:	4b22      	ldr	r3, [pc, #136]	; (8004690 <CDC_Itf_Receive+0x420>)
 8004608:	2201      	movs	r2, #1
	EnterDFU_Create=1;
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	e6d8      	b.n	80043c0 <CDC_Itf_Receive+0x150>
else if (TempUserBuffer[0] == 'X')     // Enter DFU mode for firmware Update
 800460e:	2b58      	cmp	r3, #88	; 0x58
 8004610:	d117      	bne.n	8004642 <CDC_Itf_Receive+0x3d2>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to enter Firmware update Mode..\r\n",software_vr);
 8004612:	4e1a      	ldr	r6, [pc, #104]	; (800467c <CDC_Itf_Receive+0x40c>)
 8004614:	4a1a      	ldr	r2, [pc, #104]	; (8004680 <CDC_Itf_Receive+0x410>)
 8004616:	491f      	ldr	r1, [pc, #124]	; (8004694 <CDC_Itf_Receive+0x424>)
 8004618:	4630      	mov	r0, r6
 800461a:	f006 fd37 	bl	800b08c <siprintf>
 800461e:	4a1a      	ldr	r2, [pc, #104]	; (8004688 <CDC_Itf_Receive+0x418>)
 8004620:	4603      	mov	r3, r0
 8004622:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004624:	4819      	ldr	r0, [pc, #100]	; (800468c <CDC_Itf_Receive+0x41c>)
 8004626:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8004630:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 8004634:	f7ff fdf1 	bl	800421a <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 8004638:	2300      	movs	r3, #0
 800463a:	7023      	strb	r3, [r4, #0]
	EnterDFU_Create=1;
 800463c:	2201      	movs	r2, #1
 800463e:	4b16      	ldr	r3, [pc, #88]	; (8004698 <CDC_Itf_Receive+0x428>)
 8004640:	e7e3      	b.n	800460a <CDC_Itf_Receive+0x39a>
else if (TempUserBuffer[0] == 'Y')     // Enter DFU mode for firmware Update
 8004642:	2b59      	cmp	r3, #89	; 0x59
 8004644:	f47f aebc 	bne.w	80043c0 <CDC_Itf_Receive+0x150>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n LP_RAM reset..\r\n",software_vr);
 8004648:	4e0c      	ldr	r6, [pc, #48]	; (800467c <CDC_Itf_Receive+0x40c>)
 800464a:	4a0d      	ldr	r2, [pc, #52]	; (8004680 <CDC_Itf_Receive+0x410>)
 800464c:	4913      	ldr	r1, [pc, #76]	; (800469c <CDC_Itf_Receive+0x42c>)
 800464e:	4630      	mov	r0, r6
 8004650:	f006 fd1c 	bl	800b08c <siprintf>
 8004654:	4a0c      	ldr	r2, [pc, #48]	; (8004688 <CDC_Itf_Receive+0x418>)
 8004656:	4603      	mov	r3, r0
 8004658:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800465a:	480c      	ldr	r0, [pc, #48]	; (800468c <CDC_Itf_Receive+0x41c>)
 800465c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8004660:	b2db      	uxtb	r3, r3
 8004662:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8004666:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 800466a:	f7ff fdd6 	bl	800421a <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 800466e:	2300      	movs	r3, #0
 8004670:	7023      	strb	r3, [r4, #0]
	*LP_Ram_Key_Address = 0;
 8004672:	4a0b      	ldr	r2, [pc, #44]	; (80046a0 <CDC_Itf_Receive+0x430>)
 8004674:	e690      	b.n	8004398 <CDC_Itf_Receive+0x128>
TempUserBuffer[i] = 0;//
 8004676:	5458      	strb	r0, [r3, r1]
for (i = 0; i < BuffLength; i++) // Buffer Empty
 8004678:	3301      	adds	r3, #1
 800467a:	e6a5      	b.n	80043c8 <CDC_Itf_Receive+0x158>
 800467c:	20009de4 	.word	0x20009de4
 8004680:	0002e7c3 	.word	0x0002e7c3
 8004684:	0800c8a0 	.word	0x0800c8a0
 8004688:	2000a9ce 	.word	0x2000a9ce
 800468c:	20008794 	.word	0x20008794
 8004690:	20009de0 	.word	0x20009de0
 8004694:	0800c8de 	.word	0x0800c8de
 8004698:	2000a9d0 	.word	0x2000a9d0
 800469c:	0800c926 	.word	0x0800c926
 80046a0:	20017cf0 	.word	0x20017cf0

080046a4 <Reboot_Handler>:
    .section	.text.Reboot_Handler
	//.weak	Reboot_Handler
	.type	Reboot_Handler, %function
Reboot_Handler:

               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 80046a4:	4805      	ldr	r0, [pc, #20]	; (80046bc <Reboot_Handler+0x18>)
                LDR     R1, =0x00000001 // ENABLE SYSCFG CLOCK
 80046a6:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 80046a8:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 80046aa:	4805      	ldr	r0, [pc, #20]	; (80046c0 <Reboot_Handler+0x1c>)
                LDR     R1, =0x00000001 // MAP ROM AT ZERO
 80046ac:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 80046ae:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 80046b0:	4804      	ldr	r0, [pc, #16]	; (80046c4 <Reboot_Handler+0x20>)
                LDR     SP,[R0, #0]     // SP @ +0
 80046b2:	f8d0 d000 	ldr.w	sp, [r0]
                LDR     R0,[R0, #4]    //  PC @ +4
 80046b6:	6840      	ldr	r0, [r0, #4]
                BX      R0
 80046b8:	4700      	bx	r0
 80046ba:	0000      	.short	0x0000
               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 80046bc:	40021060 	.word	0x40021060
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 80046c0:	40010000 	.word	0x40010000
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 80046c4:	1fff0000 	.word	0x1fff0000

080046c8 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 80046c8:	4811      	ldr	r0, [pc, #68]	; (8004710 <LoopForever+0x4>)
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 80046ca:	4912      	ldr	r1, [pc, #72]	; (8004714 <LoopForever+0x8>)
                LDR     R2, [R0, #0]
 80046cc:	6802      	ldr	r2, [r0, #0]
                STR     R0, [R0, #0]     // Invalidate Bootloader_Key_Value
 80046ce:	6000      	str	r0, [r0, #0]
                // zero data at Bootloader_Ram_Key_Address to avoid looping in DFU Mode

                CMP     R2, R1
 80046d0:	428a      	cmp	r2, r1
                BEQ     Reboot_Handler    // Jump to DfuModeEntry Lable if Bootloader_Key_Value matches
 80046d2:	f43f afe7 	beq.w	80046a4 <Reboot_Handler>

                // Conitnue without entering DFU Mode


  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80046d6:	f8df d040 	ldr.w	sp, [pc, #64]	; 8004718 <LoopForever+0xc>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80046da:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80046dc:	e003      	b.n	80046e6 <LoopCopyDataInit>

080046de <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80046de:	4b0f      	ldr	r3, [pc, #60]	; (800471c <LoopForever+0x10>)
	ldr	r3, [r3, r1]
 80046e0:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80046e2:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80046e4:	3104      	adds	r1, #4

080046e6 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80046e6:	480e      	ldr	r0, [pc, #56]	; (8004720 <LoopForever+0x14>)
	ldr	r3, =_edata
 80046e8:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <LoopForever+0x18>)
	adds	r2, r0, r1
 80046ea:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80046ec:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80046ee:	d3f6      	bcc.n	80046de <CopyDataInit>
	ldr	r2, =_sbss
 80046f0:	4a0d      	ldr	r2, [pc, #52]	; (8004728 <LoopForever+0x1c>)
	b	LoopFillZerobss
 80046f2:	e002      	b.n	80046fa <LoopFillZerobss>

080046f4 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80046f4:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80046f6:	f842 3b04 	str.w	r3, [r2], #4

080046fa <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80046fa:	4b0c      	ldr	r3, [pc, #48]	; (800472c <LoopForever+0x20>)
	cmp	r2, r3
 80046fc:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80046fe:	d3f9      	bcc.n	80046f4 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004700:	f7ff f804 	bl	800370c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004704:	f006 f962 	bl	800a9cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004708:	f7fd f9c2 	bl	8001a90 <main>

0800470c <LoopForever>:

LoopForever:
    b LoopForever
 800470c:	e7fe      	b.n	800470c <LoopForever>
 800470e:	0000      	.short	0x0000
                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 8004710:	20017ff0 	.word	0x20017ff0
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 8004714:	deadbeef 	.word	0xdeadbeef
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004718:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800471c:	0800cce8 	.word	0x0800cce8
	ldr	r0, =_sdata
 8004720:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004724:	200004e8 	.word	0x200004e8
	ldr	r2, =_sbss
 8004728:	200004e8 	.word	0x200004e8
	ldr	r3, = _ebss
 800472c:	2000ae08 	.word	0x2000ae08

08004730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004730:	e7fe      	b.n	8004730 <ADC1_2_IRQHandler>
	...

08004734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004734:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8004736:	4b08      	ldr	r3, [pc, #32]	; (8004758 <HAL_InitTick+0x24>)
{
 8004738:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800473a:	6818      	ldr	r0, [r3, #0]
 800473c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004740:	fbb0 f0f3 	udiv	r0, r0, r3
 8004744:	f000 f88a 	bl	800485c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8004748:	2200      	movs	r2, #0
 800474a:	4621      	mov	r1, r4
 800474c:	f04f 30ff 	mov.w	r0, #4294967295
 8004750:	f000 f844 	bl	80047dc <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8004754:	2000      	movs	r0, #0
 8004756:	bd10      	pop	{r4, pc}
 8004758:	20000034 	.word	0x20000034

0800475c <HAL_Init>:
{
 800475c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800475e:	2003      	movs	r0, #3
 8004760:	f000 f82a 	bl	80047b8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004764:	2000      	movs	r0, #0
 8004766:	f7ff ffe5 	bl	8004734 <HAL_InitTick>
  HAL_MspInit();
 800476a:	f7fe ff31 	bl	80035d0 <HAL_MspInit>
}
 800476e:	2000      	movs	r0, #0
 8004770:	bd08      	pop	{r3, pc}
	...

08004774 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8004774:	4a02      	ldr	r2, [pc, #8]	; (8004780 <HAL_IncTick+0xc>)
 8004776:	6813      	ldr	r3, [r2, #0]
 8004778:	3301      	adds	r3, #1
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	2000ae00 	.word	0x2000ae00

08004784 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004784:	4b01      	ldr	r3, [pc, #4]	; (800478c <HAL_GetTick+0x8>)
 8004786:	6818      	ldr	r0, [r3, #0]
}
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	2000ae00 	.word	0x2000ae00

08004790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8004794:	f7ff fff6 	bl	8004784 <HAL_GetTick>
 8004798:	4605      	mov	r5, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800479a:	f7ff fff3 	bl	8004784 <HAL_GetTick>
 800479e:	1b40      	subs	r0, r0, r5
 80047a0:	42a0      	cmp	r0, r4
 80047a2:	d3fa      	bcc.n	800479a <HAL_Delay+0xa>
  {
  }
}
 80047a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080047a8 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80047a8:	4a02      	ldr	r2, [pc, #8]	; (80047b4 <HAL_ResumeTick+0xc>)
 80047aa:	6813      	ldr	r3, [r2, #0]
 80047ac:	f043 0302 	orr.w	r3, r3, #2
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	4770      	bx	lr
 80047b4:	e000e010 	.word	0xe000e010

080047b8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047b8:	4a07      	ldr	r2, [pc, #28]	; (80047d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80047ba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80047c0:	041b      	lsls	r3, r3, #16
 80047c2:	0c1b      	lsrs	r3, r3, #16
 80047c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80047c8:	0200      	lsls	r0, r0, #8
 80047ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80047d2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80047d4:	60d3      	str	r3, [r2, #12]
 80047d6:	4770      	bx	lr
 80047d8:	e000ed00 	.word	0xe000ed00

080047dc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047dc:	4b17      	ldr	r3, [pc, #92]	; (800483c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047de:	b530      	push	{r4, r5, lr}
 80047e0:	68dc      	ldr	r4, [r3, #12]
 80047e2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047e6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047ea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	bf28      	it	cs
 80047f0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047f2:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047f4:	f04f 0501 	mov.w	r5, #1
 80047f8:	fa05 f303 	lsl.w	r3, r5, r3
 80047fc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004800:	bf8c      	ite	hi
 8004802:	3c03      	subhi	r4, #3
 8004804:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004806:	4019      	ands	r1, r3
 8004808:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800480a:	fa05 f404 	lsl.w	r4, r5, r4
 800480e:	3c01      	subs	r4, #1
 8004810:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8004812:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004814:	ea42 0201 	orr.w	r2, r2, r1
 8004818:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800481c:	bfaf      	iteee	ge
 800481e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004822:	f000 000f 	andlt.w	r0, r0, #15
 8004826:	4b06      	ldrlt	r3, [pc, #24]	; (8004840 <HAL_NVIC_SetPriority+0x64>)
 8004828:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482a:	bfa5      	ittet	ge
 800482c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8004830:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004832:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004834:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8004838:	bd30      	pop	{r4, r5, pc}
 800483a:	bf00      	nop
 800483c:	e000ed00 	.word	0xe000ed00
 8004840:	e000ed14 	.word	0xe000ed14

08004844 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004844:	0942      	lsrs	r2, r0, #5
 8004846:	2301      	movs	r3, #1
 8004848:	f000 001f 	and.w	r0, r0, #31
 800484c:	fa03 f000 	lsl.w	r0, r3, r0
 8004850:	4b01      	ldr	r3, [pc, #4]	; (8004858 <HAL_NVIC_EnableIRQ+0x14>)
 8004852:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004856:	4770      	bx	lr
 8004858:	e000e100 	.word	0xe000e100

0800485c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800485c:	3801      	subs	r0, #1
 800485e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004862:	d20a      	bcs.n	800487a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004864:	4b06      	ldr	r3, [pc, #24]	; (8004880 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004866:	4a07      	ldr	r2, [pc, #28]	; (8004884 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004868:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800486a:	21f0      	movs	r1, #240	; 0xf0
 800486c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004870:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004872:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004874:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800487a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	e000e010 	.word	0xe000e010
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8004888:	4770      	bx	lr

0800488a <HAL_SYSTICK_IRQHandler>:
{
 800488a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800488c:	f7ff fffc 	bl	8004888 <HAL_SYSTICK_Callback>
 8004890:	bd08      	pop	{r3, pc}
	...

08004894 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004894:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004896:	2800      	cmp	r0, #0
 8004898:	d05b      	beq.n	8004952 <HAL_DMA_Init+0xbe>
  {
    assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
  }
  
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800489a:	6801      	ldr	r1, [r0, #0]
 800489c:	4b2e      	ldr	r3, [pc, #184]	; (8004958 <HAL_DMA_Init+0xc4>)
 800489e:	4299      	cmp	r1, r3
 80048a0:	f04f 0414 	mov.w	r4, #20
 80048a4:	d841      	bhi.n	800492a <HAL_DMA_Init+0x96>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80048a6:	4a2d      	ldr	r2, [pc, #180]	; (800495c <HAL_DMA_Init+0xc8>)
 80048a8:	440a      	add	r2, r1
 80048aa:	fbb2 f2f4 	udiv	r2, r2, r4
 80048ae:	0092      	lsls	r2, r2, #2
 80048b0:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80048b2:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 80048b6:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048b8:	2302      	movs	r3, #2
 80048ba:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80048be:	6884      	ldr	r4, [r0, #8]
 80048c0:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048c2:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 80048c4:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80048c6:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048c8:	432b      	orrs	r3, r5
 80048ca:	6945      	ldr	r5, [r0, #20]
 80048cc:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ce:	6985      	ldr	r5, [r0, #24]
 80048d0:	432b      	orrs	r3, r5
 80048d2:	69c5      	ldr	r5, [r0, #28]
 80048d4:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80048d6:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80048d8:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80048dc:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 80048e0:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80048e2:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80048e4:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 80048e8:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80048ea:	d011      	beq.n	8004910 <HAL_DMA_Init+0x7c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80048ec:	4b1c      	ldr	r3, [pc, #112]	; (8004960 <HAL_DMA_Init+0xcc>)
 80048ee:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80048f0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80048f2:	429a      	cmp	r2, r3
 80048f4:	f04f 030f 	mov.w	r3, #15
 80048f8:	d11f      	bne.n	800493a <HAL_DMA_Init+0xa6>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 80048fa:	491a      	ldr	r1, [pc, #104]	; (8004964 <HAL_DMA_Init+0xd0>)
 80048fc:	680a      	ldr	r2, [r1, #0]
 80048fe:	40a3      	lsls	r3, r4
 8004900:	ea22 0303 	bic.w	r3, r2, r3
 8004904:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 8004906:	6842      	ldr	r2, [r0, #4]
 8004908:	680b      	ldr	r3, [r1, #0]
 800490a:	40a2      	lsls	r2, r4
 800490c:	431a      	orrs	r2, r3
 800490e:	600a      	str	r2, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
    }
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004910:	2300      	movs	r3, #0

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004912:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004914:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8004916:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004918:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800491a:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800491c:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State  = HAL_DMA_STATE_READY;
 800491e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004922:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  return HAL_OK;
 8004926:	4618      	mov	r0, r3
 8004928:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800492a:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <HAL_DMA_Init+0xd4>)
 800492c:	440b      	add	r3, r1
 800492e:	fbb3 f3f4 	udiv	r3, r3, r4
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004936:	4b0d      	ldr	r3, [pc, #52]	; (800496c <HAL_DMA_Init+0xd8>)
 8004938:	e7bd      	b.n	80048b6 <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 800493a:	490d      	ldr	r1, [pc, #52]	; (8004970 <HAL_DMA_Init+0xdc>)
 800493c:	680a      	ldr	r2, [r1, #0]
 800493e:	40a3      	lsls	r3, r4
 8004940:	ea22 0303 	bic.w	r3, r2, r3
 8004944:	600b      	str	r3, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 8004946:	6843      	ldr	r3, [r0, #4]
 8004948:	680a      	ldr	r2, [r1, #0]
 800494a:	40a3      	lsls	r3, r4
 800494c:	4313      	orrs	r3, r2
 800494e:	600b      	str	r3, [r1, #0]
 8004950:	e7de      	b.n	8004910 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8004952:	2001      	movs	r0, #1
}
 8004954:	bd30      	pop	{r4, r5, pc}
 8004956:	bf00      	nop
 8004958:	40020407 	.word	0x40020407
 800495c:	bffdfff8 	.word	0xbffdfff8
 8004960:	40020000 	.word	0x40020000
 8004964:	400200a8 	.word	0x400200a8
 8004968:	bffdfbf8 	.word	0xbffdfbf8
 800496c:	40020400 	.word	0x40020400
 8004970:	400204a8 	.word	0x400204a8

08004974 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004974:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004976:	2800      	cmp	r0, #0
 8004978:	d034      	beq.n	80049e4 <HAL_DMA_DeInit+0x70>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800497a:	6801      	ldr	r1, [r0, #0]
 800497c:	680b      	ldr	r3, [r1, #0]
 800497e:	f023 0301 	bic.w	r3, r3, #1
 8004982:	600b      	str	r3, [r1, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8004984:	2300      	movs	r3, #0
 8004986:	600b      	str	r3, [r1, #0]

  /* Calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004988:	4b17      	ldr	r3, [pc, #92]	; (80049e8 <HAL_DMA_DeInit+0x74>)
 800498a:	4299      	cmp	r1, r3
 800498c:	f04f 0414 	mov.w	r4, #20
 8004990:	d820      	bhi.n	80049d4 <HAL_DMA_DeInit+0x60>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004992:	4a16      	ldr	r2, [pc, #88]	; (80049ec <HAL_DMA_DeInit+0x78>)
 8004994:	440a      	add	r2, r1
 8004996:	fbb2 f2f4 	udiv	r2, r2, r4
 800499a:	0092      	lsls	r2, r2, #2
 800499c:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800499e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 80049a2:	6403      	str	r3, [r0, #64]	; 0x40
  }
  

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80049a4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80049a6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80049a8:	2301      	movs	r3, #1
 80049aa:	408b      	lsls	r3, r1
 80049ac:	6053      	str	r3, [r2, #4]

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 80049ae:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <HAL_DMA_DeInit+0x7c>)
 80049b0:	429a      	cmp	r2, r3
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 80049b2:	bf0c      	ite	eq
 80049b4:	4c0f      	ldreq	r4, [pc, #60]	; (80049f4 <HAL_DMA_DeInit+0x80>)
  }
  else  
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 80049b6:	4c10      	ldrne	r4, [pc, #64]	; (80049f8 <HAL_DMA_DeInit+0x84>)
 80049b8:	230f      	movs	r3, #15
 80049ba:	6822      	ldr	r2, [r4, #0]
 80049bc:	408b      	lsls	r3, r1
 80049be:	ea22 0303 	bic.w	r3, r2, r3
 80049c2:	6023      	str	r3, [r4, #0]
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049c4:	2300      	movs	r3, #0
 80049c6:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80049c8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_RESET;
 80049cc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

  return HAL_OK;
 80049d0:	4618      	mov	r0, r3
 80049d2:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80049d4:	4b09      	ldr	r3, [pc, #36]	; (80049fc <HAL_DMA_DeInit+0x88>)
 80049d6:	440b      	add	r3, r1
 80049d8:	fbb3 f3f4 	udiv	r3, r3, r4
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80049e0:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <HAL_DMA_DeInit+0x8c>)
 80049e2:	e7de      	b.n	80049a2 <HAL_DMA_DeInit+0x2e>
    return HAL_ERROR;
 80049e4:	2001      	movs	r0, #1
}
 80049e6:	bd10      	pop	{r4, pc}
 80049e8:	40020407 	.word	0x40020407
 80049ec:	bffdfff8 	.word	0xbffdfff8
 80049f0:	40020000 	.word	0x40020000
 80049f4:	400200a8 	.word	0x400200a8
 80049f8:	400204a8 	.word	0x400204a8
 80049fc:	bffdfbf8 	.word	0xbffdfbf8
 8004a00:	40020400 	.word	0x40020400

08004a04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a04:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a06:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8004a0a:	2c01      	cmp	r4, #1
 8004a0c:	d036      	beq.n	8004a7c <HAL_DMA_Start_IT+0x78>
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a0e:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8004a12:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a14:	b2ed      	uxtb	r5, r5
 8004a16:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8004a18:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8004a1c:	f04f 0600 	mov.w	r6, #0
 8004a20:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a24:	d128      	bne.n	8004a78 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a26:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a2a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a2c:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004a2e:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a30:	6c47      	ldr	r7, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8004a32:	f026 0601 	bic.w	r6, r6, #1
 8004a36:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a38:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8004a3a:	40bd      	lsls	r5, r7
 8004a3c:	6075      	str	r5, [r6, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a3e:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a40:	6883      	ldr	r3, [r0, #8]
 8004a42:	6805      	ldr	r5, [r0, #0]
 8004a44:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8004a46:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a48:	bf0b      	itete	eq
 8004a4a:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004a4c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004a4e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004a50:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8004a52:	b14b      	cbz	r3, 8004a68 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a5a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	f043 0301 	orr.w	r3, r3, #1
 8004a62:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a64:	2000      	movs	r0, #0
 8004a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	f023 0304 	bic.w	r3, r3, #4
 8004a6e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	f043 030a 	orr.w	r3, r3, #10
 8004a76:	e7f0      	b.n	8004a5a <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 8004a78:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8004a7c:	2002      	movs	r0, #2
}
 8004a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a80 <HAL_DMA_Abort>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004a80:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d003      	beq.n	8004a90 <HAL_DMA_Abort+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a88:	2304      	movs	r3, #4
 8004a8a:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8004a8c:	2001      	movs	r0, #1
 8004a8e:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a90:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a92:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	f022 020e 	bic.w	r2, r2, #14
 8004a9a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	f022 0201 	bic.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004aa4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);      
 8004aae:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8004ab0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);      
 8004ab4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 8004ab8:	4618      	mov	r0, r3
}
 8004aba:	4770      	bx	lr

08004abc <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004abc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004abe:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8004ac0:	6803      	ldr	r3, [r0, #0]
{
 8004ac2:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ac4:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004ac6:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004ac8:	2404      	movs	r4, #4
 8004aca:	4094      	lsls	r4, r2
 8004acc:	4226      	tst	r6, r4
 8004ace:	d00e      	beq.n	8004aee <HAL_DMA_IRQHandler+0x32>
 8004ad0:	f015 0f04 	tst.w	r5, #4
 8004ad4:	d00b      	beq.n	8004aee <HAL_DMA_IRQHandler+0x32>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ada:	bf5e      	ittt	pl
 8004adc:	681a      	ldrpl	r2, [r3, #0]
 8004ade:	f022 0204 	bicpl.w	r2, r2, #4
 8004ae2:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8004ae4:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8004ae6:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8004ae8:	b373      	cbz	r3, 8004b48 <HAL_DMA_IRQHandler+0x8c>
}
 8004aea:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8004aec:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004aee:	2402      	movs	r4, #2
 8004af0:	4094      	lsls	r4, r2
 8004af2:	4226      	tst	r6, r4
 8004af4:	d012      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x60>
 8004af6:	f015 0f02 	tst.w	r5, #2
 8004afa:	d00f      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	0695      	lsls	r5, r2, #26
 8004b00:	d406      	bmi.n	8004b10 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	f022 020a 	bic.w	r2, r2, #10
 8004b08:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004b10:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 8004b12:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004b14:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8004b18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004b1a:	e7e5      	b.n	8004ae8 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004b1c:	2408      	movs	r4, #8
 8004b1e:	4094      	lsls	r4, r2
 8004b20:	4234      	tst	r4, r6
 8004b22:	d011      	beq.n	8004b48 <HAL_DMA_IRQHandler+0x8c>
 8004b24:	072c      	lsls	r4, r5, #28
 8004b26:	d50f      	bpl.n	8004b48 <HAL_DMA_IRQHandler+0x8c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b28:	681c      	ldr	r4, [r3, #0]
 8004b2a:	f024 040e 	bic.w	r4, r4, #14
 8004b2e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004b30:	2301      	movs	r3, #1
 8004b32:	fa03 f202 	lsl.w	r2, r3, r2
 8004b36:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b38:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004b3a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004b44:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004b46:	e7cf      	b.n	8004ae8 <HAL_DMA_IRQHandler+0x2c>
}
 8004b48:	bc70      	pop	{r4, r5, r6}
 8004b4a:	4770      	bx	lr

08004b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b50:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8004b52:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b54:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d00 <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b58:	4c67      	ldr	r4, [pc, #412]	; (8004cf8 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8004b5a:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 8004b5c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8004b5e:	9a01      	ldr	r2, [sp, #4]
 8004b60:	40da      	lsrs	r2, r3
 8004b62:	d102      	bne.n	8004b6a <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8004b64:	b005      	add	sp, #20
 8004b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004b6a:	2601      	movs	r6, #1
    if(iocurrent)
 8004b6c:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004b6e:	409e      	lsls	r6, r3
    if(iocurrent)
 8004b70:	ea12 0e06 	ands.w	lr, r2, r6
 8004b74:	f000 80b1 	beq.w	8004cda <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b78:	684a      	ldr	r2, [r1, #4]
 8004b7a:	f022 0710 	bic.w	r7, r2, #16
 8004b7e:	2f02      	cmp	r7, #2
 8004b80:	d116      	bne.n	8004bb0 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8004b82:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8004b86:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b8a:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8004b8e:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b92:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8004b96:	f04f 0c0f 	mov.w	ip, #15
 8004b9a:	fa0c fc0a 	lsl.w	ip, ip, sl
 8004b9e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004ba2:	690d      	ldr	r5, [r1, #16]
 8004ba4:	fa05 f50a 	lsl.w	r5, r5, sl
 8004ba8:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8004bac:	f8c9 5020 	str.w	r5, [r9, #32]
 8004bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8004bb4:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8004bb6:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8004bba:	fa05 f50c 	lsl.w	r5, r5, ip
 8004bbe:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004bc0:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8004bc4:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004bc8:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bcc:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004bce:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bd2:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8004bd4:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bd8:	d811      	bhi.n	8004bfe <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8004bda:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8004bdc:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8004be0:	68cf      	ldr	r7, [r1, #12]
 8004be2:	fa07 f70c 	lsl.w	r7, r7, ip
 8004be6:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8004bea:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004bec:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bee:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004bf2:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8004bf6:	409f      	lsls	r7, r3
 8004bf8:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8004bfc:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004bfe:	f1ba 0f03 	cmp.w	sl, #3
 8004c02:	d107      	bne.n	8004c14 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8004c04:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004c06:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004c0a:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8004c0e:	409f      	lsls	r7, r3
 8004c10:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8004c12:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8004c14:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8004c16:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004c18:	688e      	ldr	r6, [r1, #8]
 8004c1a:	fa06 f60c 	lsl.w	r6, r6, ip
 8004c1e:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8004c20:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c22:	00d5      	lsls	r5, r2, #3
 8004c24:	d559      	bpl.n	8004cda <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c26:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8004c2a:	f045 0501 	orr.w	r5, r5, #1
 8004c2e:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8004c32:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8004c36:	f023 0603 	bic.w	r6, r3, #3
 8004c3a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8004c3e:	f005 0501 	and.w	r5, r5, #1
 8004c42:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8004c46:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004c48:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c4c:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8004c4e:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004c50:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004c54:	270f      	movs	r7, #15
 8004c56:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8004c5a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004c5e:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8004c62:	d03c      	beq.n	8004cde <HAL_GPIO_Init+0x192>
 8004c64:	4d25      	ldr	r5, [pc, #148]	; (8004cfc <HAL_GPIO_Init+0x1b0>)
 8004c66:	42a8      	cmp	r0, r5
 8004c68:	d03b      	beq.n	8004ce2 <HAL_GPIO_Init+0x196>
 8004c6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004c6e:	42a8      	cmp	r0, r5
 8004c70:	d039      	beq.n	8004ce6 <HAL_GPIO_Init+0x19a>
 8004c72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004c76:	42a8      	cmp	r0, r5
 8004c78:	d037      	beq.n	8004cea <HAL_GPIO_Init+0x19e>
 8004c7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004c7e:	42a8      	cmp	r0, r5
 8004c80:	d035      	beq.n	8004cee <HAL_GPIO_Init+0x1a2>
 8004c82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004c86:	42a8      	cmp	r0, r5
 8004c88:	d033      	beq.n	8004cf2 <HAL_GPIO_Init+0x1a6>
 8004c8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004c8e:	42a8      	cmp	r0, r5
 8004c90:	bf14      	ite	ne
 8004c92:	2507      	movne	r5, #7
 8004c94:	2506      	moveq	r5, #6
 8004c96:	fa05 f50c 	lsl.w	r5, r5, ip
 8004c9a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8004c9c:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8004c9e:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8004ca0:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ca4:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 8004ca6:	bf54      	ite	pl
 8004ca8:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8004caa:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8004cae:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8004cb0:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004cb2:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 8004cb4:	bf54      	ite	pl
 8004cb6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8004cb8:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8004cbc:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8004cbe:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004cc0:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 8004cc2:	bf54      	ite	pl
 8004cc4:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8004cc6:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8004cca:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8004ccc:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cce:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 8004cd0:	bf54      	ite	pl
 8004cd2:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8004cd4:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8004cd8:	60e5      	str	r5, [r4, #12]
    position++;
 8004cda:	3301      	adds	r3, #1
 8004cdc:	e73f      	b.n	8004b5e <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8004cde:	2500      	movs	r5, #0
 8004ce0:	e7d9      	b.n	8004c96 <HAL_GPIO_Init+0x14a>
 8004ce2:	2501      	movs	r5, #1
 8004ce4:	e7d7      	b.n	8004c96 <HAL_GPIO_Init+0x14a>
 8004ce6:	2502      	movs	r5, #2
 8004ce8:	e7d5      	b.n	8004c96 <HAL_GPIO_Init+0x14a>
 8004cea:	2503      	movs	r5, #3
 8004cec:	e7d3      	b.n	8004c96 <HAL_GPIO_Init+0x14a>
 8004cee:	2504      	movs	r5, #4
 8004cf0:	e7d1      	b.n	8004c96 <HAL_GPIO_Init+0x14a>
 8004cf2:	2505      	movs	r5, #5
 8004cf4:	e7cf      	b.n	8004c96 <HAL_GPIO_Init+0x14a>
 8004cf6:	bf00      	nop
 8004cf8:	40010400 	.word	0x40010400
 8004cfc:	48000400 	.word	0x48000400
 8004d00:	40021000 	.word	0x40021000

08004d04 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d04:	6903      	ldr	r3, [r0, #16]
 8004d06:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004d08:	bf14      	ite	ne
 8004d0a:	2001      	movne	r0, #1
 8004d0c:	2000      	moveq	r0, #0
 8004d0e:	4770      	bx	lr

08004d10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8004d14:	4604      	mov	r4, r0
{
 8004d16:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	d07c      	beq.n	8004e16 <HAL_PCD_Init+0x106>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  
  if(hpcd->State == HAL_PCD_STATE_RESET)
 8004d1c:	f890 3385 	ldrb.w	r3, [r0, #901]	; 0x385
 8004d20:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d24:	b91b      	cbnz	r3, 8004d2e <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d26:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d2a:	f7fe fded 	bl	8003908 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d2e:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d30:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8004d32:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d36:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  __HAL_PCD_DISABLE(hpcd);
 8004d3a:	f002 fef3 	bl	8007b24 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8004d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d40:	466e      	mov	r6, sp
 8004d42:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d46:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004d48:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004d4c:	e886 0003 	stmia.w	r6, {r0, r1}
 8004d50:	f104 0804 	add.w	r8, r4, #4
 8004d54:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8004d58:	6820      	ldr	r0, [r4, #0]
 8004d5a:	f002 fec9 	bl	8007af0 <USB_CoreInit>

  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8004d5e:	2100      	movs	r1, #0
 8004d60:	6820      	ldr	r0, [r4, #0]
 8004d62:	f002 fee5 	bl	8007b30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004d66:	2200      	movs	r2, #0
 8004d68:	6860      	ldr	r0, [r4, #4]
 8004d6a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8004d6e:	f104 0510 	add.w	r5, r4, #16
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8004d72:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8004d74:	4611      	mov	r1, r2
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004d76:	4282      	cmp	r2, r0
 8004d78:	f103 031c 	add.w	r3, r3, #28
 8004d7c:	d13b      	bne.n	8004df6 <HAL_PCD_Init+0xe6>
 8004d7e:	2200      	movs	r2, #0
 8004d80:	4623      	mov	r3, r4
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 8004d82:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8004d84:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
    hpcd->IN_ep[index].tx_fifo_num = index;
 8004d88:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (index = 0; index < 15 ; index++)
 8004d8c:	3201      	adds	r2, #1
 8004d8e:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0;
 8004d90:	f883 71e1 	strb.w	r7, [r3, #481]	; 0x1e1
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8004d94:	f883 71e3 	strb.w	r7, [r3, #483]	; 0x1e3
    hpcd->OUT_ep[index].maxpacket = 0;
 8004d98:	f8c3 71e8 	str.w	r7, [r3, #488]	; 0x1e8
    hpcd->OUT_ep[index].xfer_buff = 0;
 8004d9c:	f8c3 71ec 	str.w	r7, [r3, #492]	; 0x1ec
    hpcd->OUT_ep[index].xfer_len = 0;
 8004da0:	f8c3 71f4 	str.w	r7, [r3, #500]	; 0x1f4
 8004da4:	f103 031c 	add.w	r3, r3, #28
  for (index = 0; index < 15 ; index++)
 8004da8:	d1ec      	bne.n	8004d84 <HAL_PCD_Init+0x74>
  }

  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8004daa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dac:	466e      	mov	r6, sp
 8004dae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004db2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004db4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004db8:	e886 0003 	stmia.w	r6, {r0, r1}
 8004dbc:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8004dc0:	6820      	ldr	r0, [r4, #0]
 8004dc2:	f002 fecd 	bl	8007b60 <USB_DevInit>

  hpcd->USB_Address = 0;
  
  hpcd->State= HAL_PCD_STATE_READY;
 8004dc6:	2301      	movs	r3, #1
  hpcd->USB_Address = 0;
 8004dc8:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State= HAL_PCD_STATE_READY;
 8004dcc:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  
   /* Activate LPM */
  if (hpcd->Init.lpm_enable ==1)
 8004dd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d102      	bne.n	8004ddc <HAL_PCD_Init+0xcc>
  {
    HAL_PCDEx_ActivateLPM(hpcd);
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f000 fcb3 	bl	8005742 <HAL_PCDEx_ActivateLPM>
  }  
  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable ==1)
 8004ddc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d102      	bne.n	8004de8 <HAL_PCD_Init+0xd8>
  {
    HAL_PCDEx_ActivateBCD(hpcd);
 8004de2:	4620      	mov	r0, r4
 8004de4:	f000 fcc0 	bl	8005768 <HAL_PCDEx_ActivateBCD>
  }
  USB_DevDisconnect (hpcd->Instance);  
 8004de8:	6820      	ldr	r0, [r4, #0]
 8004dea:	f003 f999 	bl	8008120 <USB_DevDisconnect>
  return HAL_OK;
 8004dee:	2000      	movs	r0, #0
}
 8004df0:	b00a      	add	sp, #40	; 0x28
 8004df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hpcd->IN_ep[index].num = index;
 8004df6:	f803 2c1c 	strb.w	r2, [r3, #-28]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8004dfa:	f823 2c16 	strh.w	r2, [r3, #-22]
    hpcd->IN_ep[index].is_in = 1;
 8004dfe:	f803 6c1b 	strb.w	r6, [r3, #-27]
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8004e02:	f803 1c19 	strb.w	r1, [r3, #-25]
    hpcd->IN_ep[index].maxpacket =  0;
 8004e06:	f843 1c14 	str.w	r1, [r3, #-20]
    hpcd->IN_ep[index].xfer_buff = 0;
 8004e0a:	f843 1c10 	str.w	r1, [r3, #-16]
    hpcd->IN_ep[index].xfer_len = 0;
 8004e0e:	f843 1c08 	str.w	r1, [r3, #-8]
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004e12:	3201      	adds	r2, #1
 8004e14:	e7af      	b.n	8004d76 <HAL_PCD_Init+0x66>
    return HAL_ERROR;
 8004e16:	2001      	movs	r0, #1
 8004e18:	e7ea      	b.n	8004df0 <HAL_PCD_Init+0xe0>

08004e1a <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8004e1a:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8004e1e:	2b01      	cmp	r3, #1
{ 
 8004e20:	b510      	push	{r4, lr}
 8004e22:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8004e24:	d00c      	beq.n	8004e40 <HAL_PCD_Start+0x26>
 8004e26:	2301      	movs	r3, #1
 8004e28:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  USB_DevConnect (hpcd->Instance);
 8004e2c:	6800      	ldr	r0, [r0, #0]
 8004e2e:	f003 f96b 	bl	8008108 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004e32:	6820      	ldr	r0, [r4, #0]
 8004e34:	f002 fe70 	bl	8007b18 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8004e38:	2000      	movs	r0, #0
 8004e3a:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8004e3e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8004e40:	2002      	movs	r0, #2
}
 8004e42:	bd10      	pop	{r4, pc}

08004e44 <HAL_PCD_Stop>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8004e44:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8004e48:	2b01      	cmp	r3, #1
{ 
 8004e4a:	b510      	push	{r4, lr}
 8004e4c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8004e4e:	d00f      	beq.n	8004e70 <HAL_PCD_Stop+0x2c>
 8004e50:	2301      	movs	r3, #1
 8004e52:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  __HAL_PCD_DISABLE(hpcd);
 8004e56:	6800      	ldr	r0, [r0, #0]
 8004e58:	f002 fe64 	bl	8007b24 <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 8004e5c:	6820      	ldr	r0, [r4, #0]
 8004e5e:	f003 f922 	bl	80080a6 <USB_StopDevice>
  USB_DevDisconnect (hpcd->Instance);
 8004e62:	6820      	ldr	r0, [r4, #0]
 8004e64:	f003 f95c 	bl	8008120 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd); 
 8004e68:	2000      	movs	r0, #0
 8004e6a:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
 8004e6e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8004e70:	2002      	movs	r0, #2
  return HAL_OK;
}
 8004e72:	bd10      	pop	{r4, pc}

08004e74 <HAL_PCD_DeInit>:
{
 8004e74:	b510      	push	{r4, lr}
  if(hpcd == NULL)
 8004e76:	4604      	mov	r4, r0
 8004e78:	b158      	cbz	r0, 8004e92 <HAL_PCD_DeInit+0x1e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	f880 3385 	strb.w	r3, [r0, #901]	; 0x385
  HAL_PCD_Stop(hpcd);
 8004e80:	f7ff ffe0 	bl	8004e44 <HAL_PCD_Stop>
  HAL_PCD_MspDeInit(hpcd);
 8004e84:	4620      	mov	r0, r4
 8004e86:	f7fe fd7d 	bl	8003984 <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET; 
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	f884 0385 	strb.w	r0, [r4, #901]	; 0x385
  return HAL_OK;
 8004e90:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004e92:	2001      	movs	r0, #1
}
 8004e94:	bd10      	pop	{r4, pc}
	...

08004e98 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e9c:	6807      	ldr	r7, [r0, #0]
{
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep = NULL;
  uint32_t hclk = 80000000;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	f003 f976 	bl	8008194 <USB_GetMode>
 8004ea8:	9002      	str	r0, [sp, #8]
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	f040 8155 	bne.w	800515a <HAL_PCD_IRQHandler+0x2c2>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8004eb0:	6820      	ldr	r0, [r4, #0]
 8004eb2:	f003 f941 	bl	8008138 <USB_ReadInterrupts>
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	f000 814f 	beq.w	800515a <HAL_PCD_IRQHandler+0x2c2>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004ebc:	6820      	ldr	r0, [r4, #0]
 8004ebe:	f003 f93b 	bl	8008138 <USB_ReadInterrupts>
 8004ec2:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004ec4:	bf48      	it	mi
 8004ec6:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004ec8:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004eca:	bf42      	ittt	mi
 8004ecc:	6953      	ldrmi	r3, [r2, #20]
 8004ece:	f003 0302 	andmi.w	r3, r3, #2
 8004ed2:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004ed4:	f003 f930 	bl	8008138 <USB_ReadInterrupts>
 8004ed8:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8004edc:	d00c      	beq.n	8004ef8 <HAL_PCD_IRQHandler+0x60>
    {
      epnum = 0;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004ede:	6820      	ldr	r0, [r4, #0]
 8004ee0:	f003 f92e 	bl	8008140 <USB_ReadDevAllOutEpInterrupt>
 8004ee4:	f507 6930 	add.w	r9, r7, #2816	; 0xb00
 8004ee8:	4680      	mov	r8, r0
 8004eea:	46a3      	mov	fp, r4
      
      while ( ep_intr )
 8004eec:	464e      	mov	r6, r9
      epnum = 0;
 8004eee:	2500      	movs	r5, #0
      while ( ep_intr )
 8004ef0:	f1b8 0f00 	cmp.w	r8, #0
 8004ef4:	f040 8134 	bne.w	8005160 <HAL_PCD_IRQHandler+0x2c8>
        epnum++;
        ep_intr >>= 1;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004ef8:	6820      	ldr	r0, [r4, #0]
 8004efa:	f003 f91d 	bl	8008138 <USB_ReadInterrupts>
 8004efe:	0342      	lsls	r2, r0, #13
 8004f00:	d50b      	bpl.n	8004f1a <HAL_PCD_IRQHandler+0x82>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004f02:	6820      	ldr	r0, [r4, #0]
 8004f04:	f003 f924 	bl	8008150 <USB_ReadDevAllInEpInterrupt>
 8004f08:	4626      	mov	r6, r4
 8004f0a:	4683      	mov	fp, r0
 8004f0c:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      
      epnum = 0;
 8004f10:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8004f12:	f1bb 0f00 	cmp.w	fp, #0
 8004f16:	f040 81a1 	bne.w	800525c <HAL_PCD_IRQHandler+0x3c4>
        ep_intr >>= 1;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004f1a:	6820      	ldr	r0, [r4, #0]
 8004f1c:	f003 f90c 	bl	8008138 <USB_ReadInterrupts>
 8004f20:	2800      	cmp	r0, #0
 8004f22:	da15      	bge.n	8004f50 <HAL_PCD_IRQHandler+0xb8>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f24:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8004f28:	f023 0301 	bic.w	r3, r3, #1
 8004f2c:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
      
      if(hpcd->LPM_State == LPM_L1)
 8004f30:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	f040 822c 	bne.w	8005392 <HAL_PCD_IRQHandler+0x4fa>
      {
        hpcd->LPM_State = LPM_L0;
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004f40:	4620      	mov	r0, r4
 8004f42:	f000 fc1b 	bl	800577c <HAL_PCDEx_LPM_Callback>
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004f46:	6822      	ldr	r2, [r4, #0]
 8004f48:	6953      	ldr	r3, [r2, #20]
 8004f4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f4e:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004f50:	6820      	ldr	r0, [r4, #0]
 8004f52:	f003 f8f1 	bl	8008138 <USB_ReadInterrupts>
 8004f56:	0503      	lsls	r3, r0, #20
 8004f58:	d50b      	bpl.n	8004f72 <HAL_PCD_IRQHandler+0xda>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004f5a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004f5e:	07de      	lsls	r6, r3, #31
 8004f60:	d502      	bpl.n	8004f68 <HAL_PCD_IRQHandler+0xd0>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8004f62:	4620      	mov	r0, r4
 8004f64:	f7fe fd42 	bl	80039ec <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004f68:	6822      	ldr	r2, [r4, #0]
 8004f6a:	6953      	ldr	r3, [r2, #20]
 8004f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f70:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle LPM Interrupt */ 
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004f72:	6820      	ldr	r0, [r4, #0]
 8004f74:	f003 f8e0 	bl	8008138 <USB_ReadInterrupts>
 8004f78:	0100      	lsls	r0, r0, #4
 8004f7a:	d514      	bpl.n	8004fa6 <HAL_PCD_IRQHandler+0x10e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	695a      	ldr	r2, [r3, #20]
 8004f80:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004f84:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8004f86:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 8004f8a:	2a00      	cmp	r2, #0
 8004f8c:	f040 8205 	bne.w	800539a <HAL_PCD_IRQHandler+0x502>
      {   
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8004f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8004f92:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8004f94:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8004f98:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8004f9c:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f000 fbeb 	bl	800577c <HAL_PCDEx_LPM_Callback>
        HAL_PCD_SuspendCallback(hpcd);
      }
    }
    
    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004fa6:	6820      	ldr	r0, [r4, #0]
 8004fa8:	f003 f8c6 	bl	8008138 <USB_ReadInterrupts>
 8004fac:	04c1      	lsls	r1, r0, #19
 8004fae:	d537      	bpl.n	8005020 <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8004fb0:	f507 6600 	add.w	r6, r7, #2048	; 0x800
 8004fb4:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 8004fb6:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	f002 fe66 	bl	8007c90 <USB_FlushTxFifo>
      
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004fc4:	6861      	ldr	r1, [r4, #4]
 8004fc6:	f507 6310 	add.w	r3, r7, #2304	; 0x900
      {
        USBx_INEP(index)->DIEPINT = 0xFF;
 8004fca:	22ff      	movs	r2, #255	; 0xff
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004fcc:	9802      	ldr	r0, [sp, #8]
 8004fce:	4288      	cmp	r0, r1
 8004fd0:	f040 81e7 	bne.w	80053a2 <HAL_PCD_IRQHandler+0x50a>
        USBx_OUTEP(index)->DOEPINT = 0xFF;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8004fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd8:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 8004fda:	69f3      	ldr	r3, [r6, #28]
 8004fdc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004fe0:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8004fe2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 81e4 	beq.w	80053b2 <HAL_PCD_IRQHandler+0x51a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8004fea:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8004fee:	f043 030b 	orr.w	r3, r3, #11
 8004ff2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8004ff6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8004ff8:	f043 030b 	orr.w	r3, r3, #11
 8004ffc:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004ffe:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005002:	7c21      	ldrb	r1, [r4, #16]
 8005004:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005006:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800500a:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800500e:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005012:	f003 f8de 	bl	80081d2 <USB_EP0_OutStart>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005016:	6822      	ldr	r2, [r4, #0]
 8005018:	6953      	ldr	r3, [r2, #20]
 800501a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800501e:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005020:	6820      	ldr	r0, [r4, #0]
 8005022:	f003 f889 	bl	8008138 <USB_ReadInterrupts>
 8005026:	0482      	lsls	r2, r0, #18
 8005028:	d520      	bpl.n	800506c <HAL_PCD_IRQHandler+0x1d4>
    {
      USB_ActivateSetup(hpcd->Instance);
 800502a:	6820      	ldr	r0, [r4, #0]
 800502c:	f003 f8b6 	bl	800819c <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005030:	6822      	ldr	r2, [r4, #0]
 8005032:	68d3      	ldr	r3, [r2, #12]
 8005034:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8005038:	60d3      	str	r3, [r2, #12]
      
      hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800503a:	2303      	movs	r3, #3
 800503c:	60e3      	str	r3, [r4, #12]
      hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ; 
 800503e:	2340      	movs	r3, #64	; 0x40
 8005040:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */

      /* Get hclk frequency value */
      hclk = HAL_RCC_GetHCLKFreq();
 8005042:	f000 febb 	bl	8005dbc <HAL_RCC_GetHCLKFreq>
    
      if((hclk >= 14200000)&&(hclk < 15000000))
 8005046:	4b82      	ldr	r3, [pc, #520]	; (8005250 <HAL_PCD_IRQHandler+0x3b8>)
 8005048:	4a82      	ldr	r2, [pc, #520]	; (8005254 <HAL_PCD_IRQHandler+0x3bc>)
 800504a:	4403      	add	r3, r0
 800504c:	4293      	cmp	r3, r2
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	f200 81b8 	bhi.w	80053c4 <HAL_PCD_IRQHandler+0x52c>
      {
        /* hclk Clock Range between 14.2-15 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
      }
      
      else /* if(hclk >= 32000000) */
      {
        /* hclk Clock Range between 32-80 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 800505a:	60da      	str	r2, [r3, #12]
      }  
      
      HAL_PCD_ResetCallback(hpcd);
 800505c:	4620      	mov	r0, r4
 800505e:	f7fe fcb8 	bl	80039d2 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005062:	6822      	ldr	r2, [r4, #0]
 8005064:	6953      	ldr	r3, [r2, #20]
 8005066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800506a:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800506c:	6820      	ldr	r0, [r4, #0]
 800506e:	f003 f863 	bl	8008138 <USB_ReadInterrupts>
 8005072:	06c3      	lsls	r3, r0, #27
 8005074:	d52b      	bpl.n	80050ce <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005076:	6822      	ldr	r2, [r4, #0]
 8005078:	6993      	ldr	r3, [r2, #24]
 800507a:	f023 0310 	bic.w	r3, r3, #16
 800507e:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8005080:	6a3e      	ldr	r6, [r7, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005082:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8005086:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005088:	f006 090f 	and.w	r9, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800508c:	f040 81ea 	bne.w	8005464 <HAL_PCD_IRQHandler+0x5cc>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8005090:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005094:	421e      	tst	r6, r3
 8005096:	d015      	beq.n	80050c4 <HAL_PCD_IRQHandler+0x22c>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8005098:	f04f 081c 	mov.w	r8, #28
 800509c:	fb08 4809 	mla	r8, r8, r9, r4
 80050a0:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80050a4:	4632      	mov	r2, r6
 80050a6:	f8d8 11ec 	ldr.w	r1, [r8, #492]	; 0x1ec
 80050aa:	4638      	mov	r0, r7
 80050ac:	f002 ffb3 	bl	8008016 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050b0:	f8d8 31ec 	ldr.w	r3, [r8, #492]	; 0x1ec
 80050b4:	4433      	add	r3, r6
 80050b6:	f8c8 31ec 	str.w	r3, [r8, #492]	; 0x1ec
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050ba:	f8d8 31f8 	ldr.w	r3, [r8, #504]	; 0x1f8
 80050be:	441e      	add	r6, r3
 80050c0:	f8c8 61f8 	str.w	r6, [r8, #504]	; 0x1f8
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050c4:	6822      	ldr	r2, [r4, #0]
 80050c6:	6993      	ldr	r3, [r2, #24]
 80050c8:	f043 0310 	orr.w	r3, r3, #16
 80050cc:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80050ce:	6820      	ldr	r0, [r4, #0]
 80050d0:	f003 f832 	bl	8008138 <USB_ReadInterrupts>
 80050d4:	0707      	lsls	r7, r0, #28
 80050d6:	d507      	bpl.n	80050e8 <HAL_PCD_IRQHandler+0x250>
    {
      HAL_PCD_SOFCallback(hpcd);
 80050d8:	4620      	mov	r0, r4
 80050da:	f7fe fc76 	bl	80039ca <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80050de:	6822      	ldr	r2, [r4, #0]
 80050e0:	6953      	ldr	r3, [r2, #20]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80050e8:	6820      	ldr	r0, [r4, #0]
 80050ea:	f003 f825 	bl	8008138 <USB_ReadInterrupts>
 80050ee:	02c6      	lsls	r6, r0, #11
 80050f0:	d508      	bpl.n	8005104 <HAL_PCD_IRQHandler+0x26c>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 80050f2:	b2e9      	uxtb	r1, r5
 80050f4:	4620      	mov	r0, r4
 80050f6:	f7fe fc85 	bl	8003a04 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80050fa:	6822      	ldr	r2, [r4, #0]
 80050fc:	6953      	ldr	r3, [r2, #20]
 80050fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005102:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005104:	6820      	ldr	r0, [r4, #0]
 8005106:	f003 f817 	bl	8008138 <USB_ReadInterrupts>
 800510a:	0280      	lsls	r0, r0, #10
 800510c:	d508      	bpl.n	8005120 <HAL_PCD_IRQHandler+0x288>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 800510e:	b2e9      	uxtb	r1, r5
 8005110:	4620      	mov	r0, r4
 8005112:	f7fe fc73 	bl	80039fc <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005116:	6822      	ldr	r2, [r4, #0]
 8005118:	6953      	ldr	r3, [r2, #20]
 800511a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800511e:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005120:	6820      	ldr	r0, [r4, #0]
 8005122:	f003 f809 	bl	8008138 <USB_ReadInterrupts>
 8005126:	0041      	lsls	r1, r0, #1
 8005128:	d507      	bpl.n	800513a <HAL_PCD_IRQHandler+0x2a2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 800512a:	4620      	mov	r0, r4
 800512c:	f7fe fc6e 	bl	8003a0c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005130:	6822      	ldr	r2, [r4, #0]
 8005132:	6953      	ldr	r3, [r2, #20]
 8005134:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005138:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800513a:	6820      	ldr	r0, [r4, #0]
 800513c:	f002 fffc 	bl	8008138 <USB_ReadInterrupts>
 8005140:	0742      	lsls	r2, r0, #29
 8005142:	d50a      	bpl.n	800515a <HAL_PCD_IRQHandler+0x2c2>
    {
      temp = hpcd->Instance->GOTGINT;
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005148:	076b      	lsls	r3, r5, #29
 800514a:	d502      	bpl.n	8005152 <HAL_PCD_IRQHandler+0x2ba>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 800514c:	4620      	mov	r0, r4
 800514e:	f7fe fc61 	bl	8003a14 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	4315      	orrs	r5, r2
 8005158:	605d      	str	r5, [r3, #4]
    }
  }
}
 800515a:	b007      	add	sp, #28
 800515c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1)
 8005160:	f018 0f01 	tst.w	r8, #1
 8005164:	d049      	beq.n	80051fa <HAL_PCD_IRQHandler+0x362>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8005166:	b2ea      	uxtb	r2, r5
 8005168:	4611      	mov	r1, r2
 800516a:	6820      	ldr	r0, [r4, #0]
 800516c:	9203      	str	r2, [sp, #12]
 800516e:	f002 fff7 	bl	8008160 <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005172:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8005176:	4682      	mov	sl, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005178:	d032      	beq.n	80051e0 <HAL_PCD_IRQHandler+0x348>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800517a:	2101      	movs	r1, #1
 800517c:	60b1      	str	r1, [r6, #8]
            if (USBx->GSNPSID == USB_OTG_CORE_ID_310A)
 800517e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005180:	4b35      	ldr	r3, [pc, #212]	; (8005258 <HAL_PCD_IRQHandler+0x3c0>)
 8005182:	9a03      	ldr	r2, [sp, #12]
 8005184:	4299      	cmp	r1, r3
 8005186:	d13f      	bne.n	8005208 <HAL_PCD_IRQHandler+0x370>
              if (!(USBx_OUTEP(0)->DOEPINT & (0x1 << 15)))
 8005188:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800518c:	0409      	lsls	r1, r1, #16
 800518e:	d41f      	bmi.n	80051d0 <HAL_PCD_IRQHandler+0x338>
                  if (hpcd->Init.dma_enable == 1)
 8005190:	6921      	ldr	r1, [r4, #16]
 8005192:	2901      	cmp	r1, #1
 8005194:	d10c      	bne.n	80051b0 <HAL_PCD_IRQHandler+0x318>
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005196:	6931      	ldr	r1, [r6, #16]
                                                 hpcd->OUT_ep[epnum].maxpacket -
 8005198:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800519c:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                                 hpcd->OUT_ep[epnum].maxpacket -
 80051a0:	1a41      	subs	r1, r0, r1
                  	hpcd->OUT_ep[epnum].xfer_count =
 80051a2:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                    hpcd->OUT_ep[epnum].xfer_buff +=
 80051a6:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 80051aa:	4408      	add	r0, r1
 80051ac:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
                HAL_PCD_DataOutStageCallback(hpcd, epnum);
 80051b0:	4611      	mov	r1, r2
 80051b2:	4620      	mov	r0, r4
 80051b4:	f7fe fbf8 	bl	80039a8 <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 80051b8:	6921      	ldr	r1, [r4, #16]
 80051ba:	2901      	cmp	r1, #1
 80051bc:	d108      	bne.n	80051d0 <HAL_PCD_IRQHandler+0x338>
                  if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 80051be:	b93d      	cbnz	r5, 80051d0 <HAL_PCD_IRQHandler+0x338>
 80051c0:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 80051c4:	b922      	cbnz	r2, 80051d0 <HAL_PCD_IRQHandler+0x338>
                    USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 80051c6:	f504 7262 	add.w	r2, r4, #904	; 0x388
 80051ca:	6820      	ldr	r0, [r4, #0]
 80051cc:	f003 f801 	bl	80081d2 <USB_EP0_OutStart>
              USBx_OUTEP(0)->DOEPINT |= (0x1 << 15) | (0x1 << 5);
 80051d0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80051d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051d8:	f042 0220 	orr.w	r2, r2, #32
 80051dc:	f8c9 2008 	str.w	r2, [r9, #8]
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80051e0:	f01a 0f08 	tst.w	sl, #8
 80051e4:	d004      	beq.n	80051f0 <HAL_PCD_IRQHandler+0x358>
            HAL_PCD_SetupStageCallback(hpcd);
 80051e6:	4620      	mov	r0, r4
 80051e8:	f7fe fbd8 	bl	800399c <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80051ec:	2308      	movs	r3, #8
 80051ee:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80051f0:	f01a 0f10 	tst.w	sl, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80051f4:	bf1c      	itt	ne
 80051f6:	2310      	movne	r3, #16
 80051f8:	60b3      	strne	r3, [r6, #8]
        epnum++;
 80051fa:	3501      	adds	r5, #1
        ep_intr >>= 1;
 80051fc:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8005200:	3620      	adds	r6, #32
 8005202:	f10b 0b1c 	add.w	fp, fp, #28
 8005206:	e673      	b.n	8004ef0 <HAL_PCD_IRQHandler+0x58>
              if (hpcd->Init.dma_enable == 1)
 8005208:	6921      	ldr	r1, [r4, #16]
 800520a:	2901      	cmp	r1, #1
 800520c:	d10c      	bne.n	8005228 <HAL_PCD_IRQHandler+0x390>
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800520e:	6931      	ldr	r1, [r6, #16]
                                               hpcd->OUT_ep[epnum].maxpacket -
 8005210:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005214:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                               hpcd->OUT_ep[epnum].maxpacket -
 8005218:	1a41      	subs	r1, r0, r1
                hpcd->OUT_ep[epnum].xfer_count =
 800521a:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 800521e:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 8005222:	4408      	add	r0, r1
 8005224:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
              HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8005228:	4611      	mov	r1, r2
 800522a:	4620      	mov	r0, r4
 800522c:	f7fe fbbc 	bl	80039a8 <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 8005230:	6921      	ldr	r1, [r4, #16]
 8005232:	2901      	cmp	r1, #1
 8005234:	d1d4      	bne.n	80051e0 <HAL_PCD_IRQHandler+0x348>
                if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 8005236:	2d00      	cmp	r5, #0
 8005238:	d1d2      	bne.n	80051e0 <HAL_PCD_IRQHandler+0x348>
 800523a:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 800523e:	2a00      	cmp	r2, #0
 8005240:	d1ce      	bne.n	80051e0 <HAL_PCD_IRQHandler+0x348>
                  USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8005242:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005246:	6820      	ldr	r0, [r4, #0]
 8005248:	f002 ffc3 	bl	80081d2 <USB_EP0_OutStart>
 800524c:	e7c8      	b.n	80051e0 <HAL_PCD_IRQHandler+0x348>
 800524e:	bf00      	nop
 8005250:	ff275340 	.word	0xff275340
 8005254:	000c34ff 	.word	0x000c34ff
 8005258:	4f54310a 	.word	0x4f54310a
        if (ep_intr & 0x1) /* In ITR */
 800525c:	f01b 0f01 	tst.w	fp, #1
 8005260:	d074      	beq.n	800534c <HAL_PCD_IRQHandler+0x4b4>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8005262:	fa5f fa85 	uxtb.w	sl, r5
 8005266:	4651      	mov	r1, sl
 8005268:	6820      	ldr	r0, [r4, #0]
 800526a:	f002 ff83 	bl	8008174 <USB_ReadDevInEPInterrupt>
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800526e:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8005272:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005274:	d020      	beq.n	80052b8 <HAL_PCD_IRQHandler+0x420>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005276:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
            fifoemptymsk = 0x1 << epnum;
 800527a:	2101      	movs	r1, #1
 800527c:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800527e:	ea23 0301 	bic.w	r3, r3, r1
 8005282:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005286:	2301      	movs	r3, #1
 8005288:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1)
 800528c:	6923      	ldr	r3, [r4, #16]
 800528e:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8005290:	bf01      	itttt	eq
 8005292:	6cb3      	ldreq	r3, [r6, #72]	; 0x48
 8005294:	6c72      	ldreq	r2, [r6, #68]	; 0x44
 8005296:	189b      	addeq	r3, r3, r2
 8005298:	64b3      	streq	r3, [r6, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 800529a:	4651      	mov	r1, sl
 800529c:	4620      	mov	r0, r4
 800529e:	f7fe fb8c 	bl	80039ba <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1)
 80052a2:	6921      	ldr	r1, [r4, #16]
 80052a4:	2901      	cmp	r1, #1
 80052a6:	d107      	bne.n	80052b8 <HAL_PCD_IRQHandler+0x420>
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 80052a8:	b935      	cbnz	r5, 80052b8 <HAL_PCD_IRQHandler+0x420>
 80052aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80052ac:	b923      	cbnz	r3, 80052b8 <HAL_PCD_IRQHandler+0x420>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 80052ae:	f504 7262 	add.w	r2, r4, #904	; 0x388
 80052b2:	6820      	ldr	r0, [r4, #0]
 80052b4:	f002 ff8d 	bl	80081d2 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80052b8:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80052bc:	bf1c      	itt	ne
 80052be:	2308      	movne	r3, #8
 80052c0:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80052c4:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80052c8:	bf1c      	itt	ne
 80052ca:	2310      	movne	r3, #16
 80052cc:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80052d0:	f018 0f40 	tst.w	r8, #64	; 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80052d4:	bf1c      	itt	ne
 80052d6:	2340      	movne	r3, #64	; 0x40
 80052d8:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80052dc:	f018 0f02 	tst.w	r8, #2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80052e0:	bf1c      	itt	ne
 80052e2:	2302      	movne	r3, #2
 80052e4:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80052e8:	f018 0f80 	tst.w	r8, #128	; 0x80
 80052ec:	d02e      	beq.n	800534c <HAL_PCD_IRQHandler+0x4b4>
  * @param  epnum: endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	9303      	str	r3, [sp, #12]
  int32_t len = 0U;
  uint32_t len32b = 0;
  uint32_t fifoemptymsk = 0;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 80052f2:	6d72      	ldr	r2, [r6, #84]	; 0x54
 80052f4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80052f6:	eba3 0802 	sub.w	r8, r3, r2
 80052fa:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80052fc:	4598      	cmp	r8, r3
 80052fe:	bf28      	it	cs
 8005300:	4698      	movcs	r8, r3
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3) / 4;
 8005302:	f108 0303 	add.w	r3, r8, #3
 8005306:	2204      	movs	r2, #4
 8005308:	fb93 f3f2 	sdiv	r3, r3, r2
 800530c:	9304      	str	r3, [sp, #16]
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800530e:	9b03      	ldr	r3, [sp, #12]
 8005310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005314:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8005318:	9305      	str	r3, [sp, #20]
 800531a:	9b05      	ldr	r3, [sp, #20]
 800531c:	9a04      	ldr	r2, [sp, #16]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	b29b      	uxth	r3, r3
 8005322:	4293      	cmp	r3, r2
 8005324:	d904      	bls.n	8005330 <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 8005326:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8005328:	6d33      	ldr	r3, [r6, #80]	; 0x50
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800532a:	4293      	cmp	r3, r2
 800532c:	d900      	bls.n	8005330 <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 800532e:	b9a3      	cbnz	r3, 800535a <HAL_PCD_IRQHandler+0x4c2>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0)
 8005330:	f1b8 0f00 	cmp.w	r8, #0
 8005334:	dc0a      	bgt.n	800534c <HAL_PCD_IRQHandler+0x4b4>
  {
    fifoemptymsk = 0x1 << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005336:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = 0x1 << epnum;
 8005338:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800533a:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 800533e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1 << epnum;
 8005342:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005344:	ea23 0302 	bic.w	r3, r3, r2
 8005348:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        epnum++;
 800534c:	3501      	adds	r5, #1
        ep_intr >>= 1;
 800534e:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8005352:	361c      	adds	r6, #28
 8005354:	f109 0920 	add.w	r9, r9, #32
 8005358:	e5db      	b.n	8004f12 <HAL_PCD_IRQHandler+0x7a>
    len = ep->xfer_len - ep->xfer_count;
 800535a:	eba3 0802 	sub.w	r8, r3, r2
 800535e:	6c73      	ldr	r3, [r6, #68]	; 0x44
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8005360:	9803      	ldr	r0, [sp, #12]
 8005362:	4598      	cmp	r8, r3
 8005364:	bf28      	it	cs
 8005366:	4698      	movcs	r8, r3
    len32b = (len + 3) / 4;
 8005368:	2204      	movs	r2, #4
 800536a:	f108 0303 	add.w	r3, r8, #3
 800536e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005372:	9304      	str	r3, [sp, #16]
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8005374:	7c23      	ldrb	r3, [r4, #16]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	4652      	mov	r2, sl
 800537a:	fa1f f388 	uxth.w	r3, r8
 800537e:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8005380:	f002 fe38 	bl	8007ff4 <USB_WritePacket>
    ep->xfer_buff  += len;
 8005384:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8005386:	4443      	add	r3, r8
 8005388:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 800538a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800538c:	4443      	add	r3, r8
 800538e:	6573      	str	r3, [r6, #84]	; 0x54
 8005390:	e7c3      	b.n	800531a <HAL_PCD_IRQHandler+0x482>
        HAL_PCD_ResumeCallback(hpcd);
 8005392:	4620      	mov	r0, r4
 8005394:	f7fe fb2e 	bl	80039f4 <HAL_PCD_ResumeCallback>
 8005398:	e5d5      	b.n	8004f46 <HAL_PCD_IRQHandler+0xae>
        HAL_PCD_SuspendCallback(hpcd);
 800539a:	4620      	mov	r0, r4
 800539c:	f7fe fb26 	bl	80039ec <HAL_PCD_SuspendCallback>
 80053a0:	e601      	b.n	8004fa6 <HAL_PCD_IRQHandler+0x10e>
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80053a2:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(index)->DIEPINT = 0xFF;
 80053a4:	609a      	str	r2, [r3, #8]
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80053a6:	3001      	adds	r0, #1
        USBx_OUTEP(index)->DOEPINT = 0xFF;
 80053a8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80053ac:	9002      	str	r0, [sp, #8]
 80053ae:	3320      	adds	r3, #32
 80053b0:	e60c      	b.n	8004fcc <HAL_PCD_IRQHandler+0x134>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80053b2:	6973      	ldr	r3, [r6, #20]
 80053b4:	f043 030b 	orr.w	r3, r3, #11
 80053b8:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80053ba:	6933      	ldr	r3, [r6, #16]
 80053bc:	f043 030b 	orr.w	r3, r3, #11
 80053c0:	6133      	str	r3, [r6, #16]
 80053c2:	e61c      	b.n	8004ffe <HAL_PCD_IRQHandler+0x166>
      else if((hclk >= 15000000)&&(hclk < 16000000))
 80053c4:	4a2f      	ldr	r2, [pc, #188]	; (8005484 <HAL_PCD_IRQHandler+0x5ec>)
 80053c6:	4930      	ldr	r1, [pc, #192]	; (8005488 <HAL_PCD_IRQHandler+0x5f0>)
 80053c8:	4402      	add	r2, r0
 80053ca:	428a      	cmp	r2, r1
 80053cc:	d803      	bhi.n	80053d6 <HAL_PCD_IRQHandler+0x53e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80053d4:	e641      	b.n	800505a <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 16000000)&&(hclk < 17200000))
 80053d6:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 80053da:	492c      	ldr	r1, [pc, #176]	; (800548c <HAL_PCD_IRQHandler+0x5f4>)
 80053dc:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 80053e0:	428a      	cmp	r2, r1
 80053e2:	d803      	bhi.n	80053ec <HAL_PCD_IRQHandler+0x554>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 80053ea:	e636      	b.n	800505a <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 17200000)&&(hclk < 18500000))
 80053ec:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 80053f0:	4927      	ldr	r1, [pc, #156]	; (8005490 <HAL_PCD_IRQHandler+0x5f8>)
 80053f2:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 80053f6:	428a      	cmp	r2, r1
 80053f8:	d803      	bhi.n	8005402 <HAL_PCD_IRQHandler+0x56a>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8005400:	e62b      	b.n	800505a <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 18500000)&&(hclk < 20000000))
 8005402:	4a24      	ldr	r2, [pc, #144]	; (8005494 <HAL_PCD_IRQHandler+0x5fc>)
 8005404:	4924      	ldr	r1, [pc, #144]	; (8005498 <HAL_PCD_IRQHandler+0x600>)
 8005406:	4402      	add	r2, r0
 8005408:	428a      	cmp	r2, r1
 800540a:	d803      	bhi.n	8005414 <HAL_PCD_IRQHandler+0x57c>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8005412:	e622      	b.n	800505a <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 20000000)&&(hclk < 21800000))
 8005414:	4a21      	ldr	r2, [pc, #132]	; (800549c <HAL_PCD_IRQHandler+0x604>)
 8005416:	4922      	ldr	r1, [pc, #136]	; (80054a0 <HAL_PCD_IRQHandler+0x608>)
 8005418:	4402      	add	r2, r0
 800541a:	428a      	cmp	r2, r1
 800541c:	d803      	bhi.n	8005426 <HAL_PCD_IRQHandler+0x58e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8005424:	e619      	b.n	800505a <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 21800000)&&(hclk < 24000000))
 8005426:	4a1f      	ldr	r2, [pc, #124]	; (80054a4 <HAL_PCD_IRQHandler+0x60c>)
 8005428:	491f      	ldr	r1, [pc, #124]	; (80054a8 <HAL_PCD_IRQHandler+0x610>)
 800542a:	4402      	add	r2, r0
 800542c:	428a      	cmp	r2, r1
 800542e:	d803      	bhi.n	8005438 <HAL_PCD_IRQHandler+0x5a0>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8005436:	e610      	b.n	800505a <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 24000000)&&(hclk < 27700000))
 8005438:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 800543c:	491b      	ldr	r1, [pc, #108]	; (80054ac <HAL_PCD_IRQHandler+0x614>)
 800543e:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8005442:	428a      	cmp	r2, r1
 8005444:	d803      	bhi.n	800544e <HAL_PCD_IRQHandler+0x5b6>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800544c:	e605      	b.n	800505a <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 27700000)&&(hclk < 32000000))
 800544e:	4a18      	ldr	r2, [pc, #96]	; (80054b0 <HAL_PCD_IRQHandler+0x618>)
 8005450:	4918      	ldr	r1, [pc, #96]	; (80054b4 <HAL_PCD_IRQHandler+0x61c>)
 8005452:	4402      	add	r2, r0
 8005454:	428a      	cmp	r2, r1
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	bf94      	ite	ls
 800545a:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 800545e:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8005462:	e5fa      	b.n	800505a <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005464:	2b06      	cmp	r3, #6
 8005466:	f47f ae2d 	bne.w	80050c4 <HAL_PCD_IRQHandler+0x22c>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 800546a:	2208      	movs	r2, #8
 800546c:	f504 7162 	add.w	r1, r4, #904	; 0x388
 8005470:	4638      	mov	r0, r7
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005472:	f04f 081c 	mov.w	r8, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8005476:	f002 fdce 	bl	8008016 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800547a:	fb08 4809 	mla	r8, r8, r9, r4
 800547e:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8005482:	e61a      	b.n	80050ba <HAL_PCD_IRQHandler+0x222>
 8005484:	ff1b1e40 	.word	0xff1b1e40
 8005488:	000f423f 	.word	0x000f423f
 800548c:	00124f7f 	.word	0x00124f7f
 8005490:	0013d61f 	.word	0x0013d61f
 8005494:	fee5b660 	.word	0xfee5b660
 8005498:	0016e35f 	.word	0x0016e35f
 800549c:	feced300 	.word	0xfeced300
 80054a0:	001b773f 	.word	0x001b773f
 80054a4:	feb35bc0 	.word	0xfeb35bc0
 80054a8:	002191bf 	.word	0x002191bf
 80054ac:	0038751f 	.word	0x0038751f
 80054b0:	fe5954e0 	.word	0xfe5954e0
 80054b4:	00419cdf 	.word	0x00419cdf

080054b8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 80054b8:	f890 2384 	ldrb.w	r2, [r0, #900]	; 0x384
 80054bc:	2a01      	cmp	r2, #1
{
 80054be:	b510      	push	{r4, lr}
 80054c0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80054c2:	d00b      	beq.n	80054dc <HAL_PCD_SetAddress+0x24>
 80054c4:	2201      	movs	r2, #1
 80054c6:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  hpcd->USB_Address = address;
 80054ca:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  USB_SetDevAddress(hpcd->Instance, address);
 80054ce:	6800      	ldr	r0, [r0, #0]
 80054d0:	f002 fe0a 	bl	80080e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 80054d4:	2000      	movs	r0, #0
 80054d6:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80054da:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80054dc:	2002      	movs	r0, #2
}
 80054de:	bd10      	pop	{r4, pc}

080054e0 <HAL_PCD_EP_Open>:
{
 80054e0:	b570      	push	{r4, r5, r6, lr}
 80054e2:	4604      	mov	r4, r0
  if ((ep_addr & 0x80) == 0x80)
 80054e4:	b248      	sxtb	r0, r1
 80054e6:	2800      	cmp	r0, #0
 80054e8:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 80054ec:	f04f 051c 	mov.w	r5, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80054f0:	bfb5      	itete	lt
 80054f2:	fb05 4106 	mlalt	r1, r5, r6, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80054f6:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80054fa:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80054fc:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 8005500:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7F;
 8005502:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8005504:	7048      	strb	r0, [r1, #1]
  ep->type = ep_type;
 8005506:	70cb      	strb	r3, [r1, #3]
  __HAL_LOCK(hpcd);
 8005508:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->maxpacket = ep_mps;
 800550c:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd);
 800550e:	2b01      	cmp	r3, #1
 8005510:	d009      	beq.n	8005526 <HAL_PCD_EP_Open+0x46>
 8005512:	2301      	movs	r3, #1
 8005514:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8005518:	6820      	ldr	r0, [r4, #0]
 800551a:	f002 fbe2 	bl	8007ce2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800551e:	2000      	movs	r0, #0
 8005520:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return ret;
 8005524:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8005526:	2002      	movs	r0, #2
}
 8005528:	bd70      	pop	{r4, r5, r6, pc}

0800552a <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 800552a:	b24b      	sxtb	r3, r1
 800552c:	2b00      	cmp	r3, #0
{  
 800552e:	b510      	push	{r4, lr}
 8005530:	f04f 021c 	mov.w	r2, #28
 8005534:	4604      	mov	r4, r0
 8005536:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800553a:	bfb5      	itete	lt
 800553c:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8005540:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8005544:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8005546:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 800554a:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 800554c:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 800554e:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8005550:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
 8005554:	2b01      	cmp	r3, #1
 8005556:	d009      	beq.n	800556c <HAL_PCD_EP_Close+0x42>
 8005558:	2301      	movs	r3, #1
 800555a:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 800555e:	6820      	ldr	r0, [r4, #0]
 8005560:	f002 fbfe 	bl	8007d60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8005564:	2000      	movs	r0, #0
 8005566:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800556a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800556c:	2002      	movs	r0, #2
}
 800556e:	bd10      	pop	{r4, pc}

08005570 <HAL_PCD_EP_Receive>:
{
 8005570:	b570      	push	{r4, r5, r6, lr}
 8005572:	4604      	mov	r4, r0
 8005574:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 8005578:	201c      	movs	r0, #28
 800557a:	fb00 4506 	mla	r5, r0, r6, r4
  ep->xfer_len = len;
 800557e:	f8c5 31f4 	str.w	r3, [r5, #500]	; 0x1f4
  ep->xfer_count = 0;
 8005582:	2300      	movs	r3, #0
 8005584:	f8c5 31f8 	str.w	r3, [r5, #504]	; 0x1f8
  ep->is_in = 0;
 8005588:	f885 31e1 	strb.w	r3, [r5, #481]	; 0x1e1
  __HAL_LOCK(hpcd);
 800558c:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->xfer_buff = pBuf;  
 8005590:	f8c5 21ec 	str.w	r2, [r5, #492]	; 0x1ec
  __HAL_LOCK(hpcd);
 8005594:	2b01      	cmp	r3, #1
  ep->num = ep_addr & 0x7F;
 8005596:	f885 61e0 	strb.w	r6, [r5, #480]	; 0x1e0
  __HAL_LOCK(hpcd);
 800559a:	d011      	beq.n	80055c0 <HAL_PCD_EP_Receive+0x50>
 800559c:	6922      	ldr	r2, [r4, #16]
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 800559e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80055a0:	2301      	movs	r3, #1
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80055a2:	f505 71f0 	add.w	r1, r5, #480	; 0x1e0
  __HAL_LOCK(hpcd);
 80055a6:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80055aa:	b2d2      	uxtb	r2, r2
  if ((ep_addr & 0x7F) == 0 )
 80055ac:	b92e      	cbnz	r6, 80055ba <HAL_PCD_EP_Receive+0x4a>
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80055ae:	f002 fcbd 	bl	8007f2c <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 80055b2:	2000      	movs	r0, #0
 80055b4:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80055b8:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80055ba:	f002 fbff 	bl	8007dbc <USB_EPStartXfer>
 80055be:	e7f8      	b.n	80055b2 <HAL_PCD_EP_Receive+0x42>
  __HAL_LOCK(hpcd);
 80055c0:	2002      	movs	r0, #2
}
 80055c2:	bd70      	pop	{r4, r5, r6, pc}

080055c4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 80055c4:	231c      	movs	r3, #28
 80055c6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80055ca:	fb03 0101 	mla	r1, r3, r1, r0
}
 80055ce:	f8b1 01f8 	ldrh.w	r0, [r1, #504]	; 0x1f8
 80055d2:	4770      	bx	lr

080055d4 <HAL_PCD_EP_Transmit>:
{
 80055d4:	b570      	push	{r4, r5, r6, lr}
 80055d6:	4604      	mov	r4, r0
 80055d8:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 80055dc:	201c      	movs	r0, #28
 80055de:	fb00 4506 	mla	r5, r0, r6, r4
 80055e2:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 80055e4:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_LOCK(hpcd);
 80055e6:	f894 2384 	ldrb.w	r2, [r4, #900]	; 0x384
  ep->num = ep_addr & 0x7F;
 80055ea:	f885 603c 	strb.w	r6, [r5, #60]	; 0x3c
  ep->xfer_count = 0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1;
 80055f2:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 80055f4:	429a      	cmp	r2, r3
  ep->is_in = 1;
 80055f6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_LOCK(hpcd);
 80055fa:	d010      	beq.n	800561e <HAL_PCD_EP_Transmit+0x4a>
 80055fc:	6922      	ldr	r2, [r4, #16]
 80055fe:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8005602:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	6820      	ldr	r0, [r4, #0]
  if ((ep_addr & 0x7F) == 0 )
 800560a:	b92e      	cbnz	r6, 8005618 <HAL_PCD_EP_Transmit+0x44>
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 800560c:	f002 fc8e 	bl	8007f2c <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 8005610:	2000      	movs	r0, #0
 8005612:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8005616:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep,  hpcd->Init.dma_enable);
 8005618:	f002 fbd0 	bl	8007dbc <USB_EPStartXfer>
 800561c:	e7f8      	b.n	8005610 <HAL_PCD_EP_Transmit+0x3c>
  __HAL_LOCK(hpcd);
 800561e:	2002      	movs	r0, #2
}
 8005620:	bd70      	pop	{r4, r5, r6, pc}

08005622 <HAL_PCD_EP_SetStall>:
{
 8005622:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8005624:	b24b      	sxtb	r3, r1
 8005626:	2b00      	cmp	r3, #0
 8005628:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800562c:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8005630:	bfb5      	itete	lt
 8005632:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8005636:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800563a:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 800563c:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_stall = 1;
 8005640:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8005642:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8005644:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1;
 8005646:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8005648:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800564a:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 800564c:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8005650:	4293      	cmp	r3, r2
{
 8005652:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005654:	d00f      	beq.n	8005676 <HAL_PCD_EP_SetStall+0x54>
 8005656:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  USB_EPSetStall(hpcd->Instance , ep);
 800565a:	6800      	ldr	r0, [r0, #0]
 800565c:	f002 fceb 	bl	8008036 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8005660:	b92d      	cbnz	r5, 800566e <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance,  hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005662:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005666:	7c21      	ldrb	r1, [r4, #16]
 8005668:	6820      	ldr	r0, [r4, #0]
 800566a:	f002 fdb2 	bl	80081d2 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 800566e:	2000      	movs	r0, #0
 8005670:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8005674:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8005676:	2002      	movs	r0, #2
}
 8005678:	bd38      	pop	{r3, r4, r5, pc}

0800567a <HAL_PCD_EP_ClrStall>:
{
 800567a:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 800567c:	b24b      	sxtb	r3, r1
 800567e:	2b00      	cmp	r3, #0
{
 8005680:	4605      	mov	r5, r0
 8005682:	f04f 021c 	mov.w	r2, #28
 8005686:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800568a:	bfb5      	itete	lt
 800568c:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 8005690:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8005694:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 8005696:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800569a:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 800569c:	2400      	movs	r4, #0
 800569e:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80056a0:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80056a2:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80056a4:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d009      	beq.n	80056c0 <HAL_PCD_EP_ClrStall+0x46>
 80056ac:	2301      	movs	r3, #1
 80056ae:	f885 3384 	strb.w	r3, [r5, #900]	; 0x384
  USB_EPClearStall(hpcd->Instance , ep);
 80056b2:	6828      	ldr	r0, [r5, #0]
 80056b4:	f002 fcde 	bl	8008074 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80056b8:	f885 4384 	strb.w	r4, [r5, #900]	; 0x384
  return HAL_OK;
 80056bc:	4620      	mov	r0, r4
 80056be:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80056c0:	2002      	movs	r0, #2
}
 80056c2:	bd38      	pop	{r3, r4, r5, pc}

080056c4 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd); 
 80056c4:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 80056c8:	2b01      	cmp	r3, #1
{
 80056ca:	b510      	push	{r4, lr}
 80056cc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80056ce:	d011      	beq.n	80056f4 <HAL_PCD_EP_Flush+0x30>
 80056d0:	2301      	movs	r3, #1
 80056d2:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  if ((ep_addr & 0x80) == 0x80)
 80056d6:	060b      	lsls	r3, r1, #24
 80056d8:	d508      	bpl.n	80056ec <HAL_PCD_EP_Flush+0x28>
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 80056da:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80056de:	6800      	ldr	r0, [r0, #0]
 80056e0:	f002 fad6 	bl	8007c90 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd); 
 80056e4:	2000      	movs	r0, #0
 80056e6:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80056ea:	bd10      	pop	{r4, pc}
    USB_FlushRxFifo(hpcd->Instance);
 80056ec:	6800      	ldr	r0, [r0, #0]
 80056ee:	f002 fae1 	bl	8007cb4 <USB_FlushRxFifo>
 80056f2:	e7f7      	b.n	80056e4 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd); 
 80056f4:	2002      	movs	r0, #2
}
 80056f6:	bd10      	pop	{r4, pc}

080056f8 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80056f8:	6800      	ldr	r0, [r0, #0]
{
 80056fa:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80056fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 80056fe:	b921      	cbnz	r1, 800570a <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (size << 16) | Tx_Offset;
 8005700:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005704:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
  }
  
  return HAL_OK;
}
 8005706:	2000      	movs	r0, #0
 8005708:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800570a:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (index = 0; index < (fifo - 1); index++)
 800570c:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800570e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (index = 0; index < (fifo - 1); index++)
 8005712:	1e4e      	subs	r6, r1, #1
 8005714:	b2ec      	uxtb	r4, r5
 8005716:	42b4      	cmp	r4, r6
 8005718:	f105 0501 	add.w	r5, r5, #1
 800571c:	db06      	blt.n	800572c <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
 800571e:	313f      	adds	r1, #63	; 0x3f
 8005720:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005724:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005728:	6043      	str	r3, [r0, #4]
 800572a:	e7ec      	b.n	8005706 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[index] >> 16);
 800572c:	3440      	adds	r4, #64	; 0x40
 800572e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8005732:	6864      	ldr	r4, [r4, #4]
 8005734:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005738:	e7ec      	b.n	8005714 <HAL_PCDEx_SetTxFiFo+0x1c>

0800573a <HAL_PCDEx_SetRxFiFo>:
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800573a:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 800573c:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800573e:	6259      	str	r1, [r3, #36]	; 0x24
}
 8005740:	4770      	bx	lr

08005742 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8005742:	6802      	ldr	r2, [r0, #0]
{
 8005744:	4603      	mov	r3, r0
  
  hpcd->lpm_active = ENABLE;
 8005746:	2101      	movs	r1, #1
 8005748:	f8c0 13c0 	str.w	r1, [r0, #960]	; 0x3c0
  hpcd->LPM_State = LPM_L0;
 800574c:	2000      	movs	r0, #0
 800574e:	f883 03b8 	strb.w	r0, [r3, #952]	; 0x3b8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005752:	6993      	ldr	r3, [r2, #24]
 8005754:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005758:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800575a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800575c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005760:	f043 0303 	orr.w	r3, r3, #3
 8005764:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;  
}
 8005766:	4770      	bx	lr

08005768 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8005768:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = ENABLE; 
 800576a:	2301      	movs	r3, #1
 800576c:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8005770:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005776:	6393      	str	r3, [r2, #56]	; 0x38
  
  return HAL_OK;  
}
 8005778:	2000      	movs	r0, #0
 800577a:	4770      	bx	lr

0800577c <HAL_PCDEx_LPM_Callback>:
 800577c:	4770      	bx	lr
	...

08005780 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005780:	4b02      	ldr	r3, [pc, #8]	; (800578c <HAL_PWREx_GetVoltageRange+0xc>)
 8005782:	6818      	ldr	r0, [r3, #0]
}
 8005784:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40007000 	.word	0x40007000

08005790 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005790:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005792:	4d1e      	ldr	r5, [pc, #120]	; (800580c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8005794:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005796:	00da      	lsls	r2, r3, #3
{
 8005798:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800579a:	d518      	bpl.n	80057ce <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800579c:	f7ff fff0 	bl	8005780 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057a0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80057a4:	d123      	bne.n	80057ee <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80057a6:	2c80      	cmp	r4, #128	; 0x80
 80057a8:	d929      	bls.n	80057fe <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80057aa:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057ac:	bf8c      	ite	hi
 80057ae:	2002      	movhi	r0, #2
 80057b0:	2001      	movls	r0, #1
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 80057b2:	4a17      	ldr	r2, [pc, #92]	; (8005810 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80057b4:	6813      	ldr	r3, [r2, #0]
 80057b6:	f023 0307 	bic.w	r3, r3, #7
 80057ba:	4303      	orrs	r3, r0
 80057bc:	6013      	str	r3, [r2, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80057be:	6813      	ldr	r3, [r2, #0]
 80057c0:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 80057c4:	1a18      	subs	r0, r3, r0
 80057c6:	bf18      	it	ne
 80057c8:	2001      	movne	r0, #1
 80057ca:	b003      	add	sp, #12
 80057cc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80057ce:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80057d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d4:	65ab      	str	r3, [r5, #88]	; 0x58
 80057d6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80057d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80057e0:	f7ff ffce 	bl	8005780 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80057e4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80057e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ea:	65ab      	str	r3, [r5, #88]	; 0x58
 80057ec:	e7d8      	b.n	80057a0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80057ee:	2c80      	cmp	r4, #128	; 0x80
 80057f0:	d807      	bhi.n	8005802 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80057f2:	d008      	beq.n	8005806 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7) 
 80057f4:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80057f8:	4258      	negs	r0, r3
 80057fa:	4158      	adcs	r0, r3
 80057fc:	e7d9      	b.n	80057b2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80057fe:	2000      	movs	r0, #0
 8005800:	e7d7      	b.n	80057b2 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8005802:	2003      	movs	r0, #3
 8005804:	e7d5      	b.n	80057b2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8005806:	2002      	movs	r0, #2
 8005808:	e7d3      	b.n	80057b2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800580a:	bf00      	nop
 800580c:	40021000 	.word	0x40021000
 8005810:	40022000 	.word	0x40022000

08005814 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8005814:	4b46      	ldr	r3, [pc, #280]	; (8005930 <HAL_RCC_GetSysClockFreq+0x11c>)
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	f012 0f0c 	tst.w	r2, #12
{
 800581c:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800581e:	d009      	beq.n	8005834 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8005826:	2a0c      	cmp	r2, #12
 8005828:	d148      	bne.n	80058bc <HAL_RCC_GetSysClockFreq+0xa8>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	f002 0203 	and.w	r2, r2, #3
 8005830:	2a01      	cmp	r2, #1
 8005832:	d143      	bne.n	80058bc <HAL_RCC_GetSysClockFreq+0xa8>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	0712      	lsls	r2, r2, #28
 8005838:	d437      	bmi.n	80058aa <HAL_RCC_GetSysClockFreq+0x96>
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 800583a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800583e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8005842:	fa91 f1a1 	rbit	r1, r1
 8005846:	fab1 f181 	clz	r1, r1
 800584a:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 800584e:	40ca      	lsrs	r2, r1
    msirange = MSIRangeTable[msirange];
 8005850:	4938      	ldr	r1, [pc, #224]	; (8005934 <HAL_RCC_GetSysClockFreq+0x120>)
 8005852:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8005856:	689a      	ldr	r2, [r3, #8]
      sysclockfreq = msirange;
 8005858:	f012 0f0c 	tst.w	r2, #12
 800585c:	bf0c      	ite	eq
 800585e:	4620      	moveq	r0, r4
 8005860:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	f002 020c 	and.w	r2, r2, #12
 8005868:	2a0c      	cmp	r2, #12
 800586a:	d154      	bne.n	8005916 <HAL_RCC_GetSysClockFreq+0x102>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800586c:	68da      	ldr	r2, [r3, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 800586e:	68d8      	ldr	r0, [r3, #12]
 8005870:	2170      	movs	r1, #112	; 0x70
 8005872:	fa91 f1a1 	rbit	r1, r1
 8005876:	fab1 f181 	clz	r1, r1
 800587a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800587e:	40c8      	lsrs	r0, r1
 8005880:	1c41      	adds	r1, r0, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005882:	f002 0003 	and.w	r0, r2, #3
    switch (pllsource)
 8005886:	2802      	cmp	r0, #2
 8005888:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800588c:	d028      	beq.n	80058e0 <HAL_RCC_GetSysClockFreq+0xcc>
 800588e:	2803      	cmp	r0, #3
 8005890:	d042      	beq.n	8005918 <HAL_RCC_GetSysClockFreq+0x104>
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8005892:	68d8      	ldr	r0, [r3, #12]
 8005894:	fa92 f2a2 	rbit	r2, r2
 8005898:	fab2 f282 	clz	r2, r2
 800589c:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 80058a0:	40d0      	lsrs	r0, r2
 80058a2:	fbb4 f1f1 	udiv	r1, r4, r1
 80058a6:	4348      	muls	r0, r1
      break;
 80058a8:	e027      	b.n	80058fa <HAL_RCC_GetSysClockFreq+0xe6>
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	21f0      	movs	r1, #240	; 0xf0
 80058ae:	fa91 f1a1 	rbit	r1, r1
 80058b2:	fab1 f181 	clz	r1, r1
 80058b6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80058ba:	e7c8      	b.n	800584e <HAL_RCC_GetSysClockFreq+0x3a>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	f002 020c 	and.w	r2, r2, #12
 80058c2:	2a04      	cmp	r2, #4
 80058c4:	d007      	beq.n	80058d6 <HAL_RCC_GetSysClockFreq+0xc2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	f002 020c 	and.w	r2, r2, #12
 80058cc:	2a08      	cmp	r2, #8
 80058ce:	d104      	bne.n	80058da <HAL_RCC_GetSysClockFreq+0xc6>
    sysclockfreq = HSE_VALUE;
 80058d0:	4819      	ldr	r0, [pc, #100]	; (8005938 <HAL_RCC_GetSysClockFreq+0x124>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80058d2:	2400      	movs	r4, #0
 80058d4:	e7c5      	b.n	8005862 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 80058d6:	4819      	ldr	r0, [pc, #100]	; (800593c <HAL_RCC_GetSysClockFreq+0x128>)
 80058d8:	e7fb      	b.n	80058d2 <HAL_RCC_GetSysClockFreq+0xbe>
  uint32_t sysclockfreq = 0U;
 80058da:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80058dc:	4604      	mov	r4, r0
 80058de:	e7c0      	b.n	8005862 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80058e0:	68d8      	ldr	r0, [r3, #12]
 80058e2:	fa92 f2a2 	rbit	r2, r2
 80058e6:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 80058ea:	fab2 f282 	clz	r2, r2
 80058ee:	fa20 f202 	lsr.w	r2, r0, r2
 80058f2:	4812      	ldr	r0, [pc, #72]	; (800593c <HAL_RCC_GetSysClockFreq+0x128>)
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80058f4:	fbb0 f0f1 	udiv	r0, r0, r1
 80058f8:	4350      	muls	r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005900:	fa92 f2a2 	rbit	r2, r2
 8005904:	fab2 f282 	clz	r2, r2
 8005908:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800590c:	40d3      	lsrs	r3, r2
 800590e:	3301      	adds	r3, #1
 8005910:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005912:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8005916:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8005918:	68d8      	ldr	r0, [r3, #12]
 800591a:	fa92 f2a2 	rbit	r2, r2
 800591e:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 8005922:	fab2 f282 	clz	r2, r2
 8005926:	fa20 f202 	lsr.w	r2, r0, r2
 800592a:	4803      	ldr	r0, [pc, #12]	; (8005938 <HAL_RCC_GetSysClockFreq+0x124>)
 800592c:	e7e2      	b.n	80058f4 <HAL_RCC_GetSysClockFreq+0xe0>
 800592e:	bf00      	nop
 8005930:	40021000 	.word	0x40021000
 8005934:	0800c72c 	.word	0x0800c72c
 8005938:	007a1200 	.word	0x007a1200
 800593c:	00f42400 	.word	0x00f42400

08005940 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005940:	6803      	ldr	r3, [r0, #0]
{
 8005942:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005946:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005948:	06d8      	lsls	r0, r3, #27
 800594a:	d541      	bpl.n	80059d0 <HAL_RCC_OscConfig+0x90>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800594c:	4ca5      	ldr	r4, [pc, #660]	; (8005be4 <HAL_RCC_OscConfig+0x2a4>)
 800594e:	68a3      	ldr	r3, [r4, #8]
 8005950:	f013 0f0c 	tst.w	r3, #12
 8005954:	d166      	bne.n	8005a24 <HAL_RCC_OscConfig+0xe4>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	0799      	lsls	r1, r3, #30
 800595a:	d505      	bpl.n	8005968 <HAL_RCC_OscConfig+0x28>
 800595c:	69ab      	ldr	r3, [r5, #24]
 800595e:	b91b      	cbnz	r3, 8005968 <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 8005960:	2001      	movs	r0, #1
}
 8005962:	b002      	add	sp, #8
 8005964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	6a28      	ldr	r0, [r5, #32]
 800596c:	071a      	lsls	r2, r3, #28
 800596e:	bf56      	itet	pl
 8005970:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8005974:	6823      	ldrmi	r3, [r4, #0]
 8005976:	091b      	lsrpl	r3, r3, #4
 8005978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800597c:	4283      	cmp	r3, r0
 800597e:	d23c      	bcs.n	80059fa <HAL_RCC_OscConfig+0xba>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005980:	f7ff ff06 	bl	8005790 <RCC_SetFlashLatencyFromMSIRange>
 8005984:	2800      	cmp	r0, #0
 8005986:	d1eb      	bne.n	8005960 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	f043 0308 	orr.w	r3, r3, #8
 800598e:	6023      	str	r3, [r4, #0]
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	6a2a      	ldr	r2, [r5, #32]
 8005994:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005998:	4313      	orrs	r3, r2
 800599a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800599c:	6863      	ldr	r3, [r4, #4]
 800599e:	69ea      	ldr	r2, [r5, #28]
 80059a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80059a8:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80059aa:	f7ff ff33 	bl	8005814 <HAL_RCC_GetSysClockFreq>
 80059ae:	68a3      	ldr	r3, [r4, #8]
 80059b0:	22f0      	movs	r2, #240	; 0xf0
 80059b2:	fa92 f2a2 	rbit	r2, r2
 80059b6:	fab2 f282 	clz	r2, r2
 80059ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059be:	40d3      	lsrs	r3, r2
 80059c0:	4a89      	ldr	r2, [pc, #548]	; (8005be8 <HAL_RCC_OscConfig+0x2a8>)
 80059c2:	5cd3      	ldrb	r3, [r2, r3]
 80059c4:	40d8      	lsrs	r0, r3
 80059c6:	4b89      	ldr	r3, [pc, #548]	; (8005bec <HAL_RCC_OscConfig+0x2ac>)
 80059c8:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80059ca:	2000      	movs	r0, #0
 80059cc:	f7fe feb2 	bl	8004734 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	07de      	lsls	r6, r3, #31
 80059d4:	d45b      	bmi.n	8005a8e <HAL_RCC_OscConfig+0x14e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059d6:	682b      	ldr	r3, [r5, #0]
 80059d8:	079c      	lsls	r4, r3, #30
 80059da:	f100 80a3 	bmi.w	8005b24 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059de:	682b      	ldr	r3, [r5, #0]
 80059e0:	0719      	lsls	r1, r3, #28
 80059e2:	f100 80e7 	bmi.w	8005bb4 <HAL_RCC_OscConfig+0x274>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059e6:	682b      	ldr	r3, [r5, #0]
 80059e8:	075a      	lsls	r2, r3, #29
 80059ea:	f100 8115 	bmi.w	8005c18 <HAL_RCC_OscConfig+0x2d8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059ee:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80059f0:	2a00      	cmp	r2, #0
 80059f2:	f040 817c 	bne.w	8005cee <HAL_RCC_OscConfig+0x3ae>
  return HAL_OK;
 80059f6:	2000      	movs	r0, #0
 80059f8:	e7b3      	b.n	8005962 <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	f043 0308 	orr.w	r3, r3, #8
 8005a00:	6023      	str	r3, [r4, #0]
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a08:	4303      	orrs	r3, r0
 8005a0a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a0c:	6863      	ldr	r3, [r4, #4]
 8005a0e:	69ea      	ldr	r2, [r5, #28]
 8005a10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a18:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a1a:	f7ff feb9 	bl	8005790 <RCC_SetFlashLatencyFromMSIRange>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d0c3      	beq.n	80059aa <HAL_RCC_OscConfig+0x6a>
 8005a22:	e79d      	b.n	8005960 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a24:	69ab      	ldr	r3, [r5, #24]
 8005a26:	b313      	cbz	r3, 8005a6e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_ENABLE();
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	f043 0301 	orr.w	r3, r3, #1
 8005a2e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005a30:	f7fe fea8 	bl	8004784 <HAL_GetTick>
 8005a34:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	079b      	lsls	r3, r3, #30
 8005a3a:	d511      	bpl.n	8005a60 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	f043 0308 	orr.w	r3, r3, #8
 8005a42:	6023      	str	r3, [r4, #0]
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	6a2a      	ldr	r2, [r5, #32]
 8005a48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a50:	6863      	ldr	r3, [r4, #4]
 8005a52:	69ea      	ldr	r2, [r5, #28]
 8005a54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a5c:	6063      	str	r3, [r4, #4]
 8005a5e:	e7b7      	b.n	80059d0 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a60:	f7fe fe90 	bl	8004784 <HAL_GetTick>
 8005a64:	1b80      	subs	r0, r0, r6
 8005a66:	2802      	cmp	r0, #2
 8005a68:	d9e5      	bls.n	8005a36 <HAL_RCC_OscConfig+0xf6>
            return HAL_TIMEOUT;
 8005a6a:	2003      	movs	r0, #3
 8005a6c:	e779      	b.n	8005962 <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	f023 0301 	bic.w	r3, r3, #1
 8005a74:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005a76:	f7fe fe85 	bl	8004784 <HAL_GetTick>
 8005a7a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	079f      	lsls	r7, r3, #30
 8005a80:	d5a6      	bpl.n	80059d0 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a82:	f7fe fe7f 	bl	8004784 <HAL_GetTick>
 8005a86:	1b80      	subs	r0, r0, r6
 8005a88:	2802      	cmp	r0, #2
 8005a8a:	d9f7      	bls.n	8005a7c <HAL_RCC_OscConfig+0x13c>
 8005a8c:	e7ed      	b.n	8005a6a <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8005a8e:	4c55      	ldr	r4, [pc, #340]	; (8005be4 <HAL_RCC_OscConfig+0x2a4>)
 8005a90:	68a3      	ldr	r3, [r4, #8]
 8005a92:	f003 030c 	and.w	r3, r3, #12
 8005a96:	2b08      	cmp	r3, #8
 8005a98:	d009      	beq.n	8005aae <HAL_RCC_OscConfig+0x16e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a9a:	68a3      	ldr	r3, [r4, #8]
 8005a9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8005aa0:	2b0c      	cmp	r3, #12
 8005aa2:	d10b      	bne.n	8005abc <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005aa4:	68e3      	ldr	r3, [r4, #12]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d106      	bne.n	8005abc <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	0398      	lsls	r0, r3, #14
 8005ab2:	d590      	bpl.n	80059d6 <HAL_RCC_OscConfig+0x96>
 8005ab4:	686b      	ldr	r3, [r5, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d18d      	bne.n	80059d6 <HAL_RCC_OscConfig+0x96>
 8005aba:	e751      	b.n	8005960 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005abc:	686b      	ldr	r3, [r5, #4]
 8005abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac2:	d110      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x1a6>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005acc:	f7fe fe5a 	bl	8004784 <HAL_GetTick>
 8005ad0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	0399      	lsls	r1, r3, #14
 8005ad6:	f53f af7e 	bmi.w	80059d6 <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ada:	f7fe fe53 	bl	8004784 <HAL_GetTick>
 8005ade:	1b80      	subs	r0, r0, r6
 8005ae0:	2864      	cmp	r0, #100	; 0x64
 8005ae2:	d9f6      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x192>
 8005ae4:	e7c1      	b.n	8005a6a <HAL_RCC_OscConfig+0x12a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ae6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aea:	d104      	bne.n	8005af6 <HAL_RCC_OscConfig+0x1b6>
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005af2:	6023      	str	r3, [r4, #0]
 8005af4:	e7e6      	b.n	8005ac4 <HAL_RCC_OscConfig+0x184>
 8005af6:	6822      	ldr	r2, [r4, #0]
 8005af8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005afc:	6022      	str	r2, [r4, #0]
 8005afe:	6822      	ldr	r2, [r4, #0]
 8005b00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b04:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e0      	bne.n	8005acc <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8005b0a:	f7fe fe3b 	bl	8004784 <HAL_GetTick>
 8005b0e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8005b10:	6823      	ldr	r3, [r4, #0]
 8005b12:	039a      	lsls	r2, r3, #14
 8005b14:	f57f af5f 	bpl.w	80059d6 <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b18:	f7fe fe34 	bl	8004784 <HAL_GetTick>
 8005b1c:	1b80      	subs	r0, r0, r6
 8005b1e:	2864      	cmp	r0, #100	; 0x64
 8005b20:	d9f6      	bls.n	8005b10 <HAL_RCC_OscConfig+0x1d0>
 8005b22:	e7a2      	b.n	8005a6a <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8005b24:	4c2f      	ldr	r4, [pc, #188]	; (8005be4 <HAL_RCC_OscConfig+0x2a4>)
 8005b26:	68a3      	ldr	r3, [r4, #8]
 8005b28:	f003 030c 	and.w	r3, r3, #12
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d009      	beq.n	8005b44 <HAL_RCC_OscConfig+0x204>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005b30:	68a3      	ldr	r3, [r4, #8]
 8005b32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8005b36:	2b0c      	cmp	r3, #12
 8005b38:	d119      	bne.n	8005b6e <HAL_RCC_OscConfig+0x22e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005b3a:	68e3      	ldr	r3, [r4, #12]
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d114      	bne.n	8005b6e <HAL_RCC_OscConfig+0x22e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	055b      	lsls	r3, r3, #21
 8005b48:	d503      	bpl.n	8005b52 <HAL_RCC_OscConfig+0x212>
 8005b4a:	68eb      	ldr	r3, [r5, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f43f af07 	beq.w	8005960 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b52:	6861      	ldr	r1, [r4, #4]
 8005b54:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8005b58:	fa93 f3a3 	rbit	r3, r3
 8005b5c:	fab3 f283 	clz	r2, r3
 8005b60:	692b      	ldr	r3, [r5, #16]
 8005b62:	4093      	lsls	r3, r2
 8005b64:	f021 52f8 	bic.w	r2, r1, #520093696	; 0x1f000000
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	6063      	str	r3, [r4, #4]
 8005b6c:	e737      	b.n	80059de <HAL_RCC_OscConfig+0x9e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b6e:	68eb      	ldr	r3, [r5, #12]
 8005b70:	b17b      	cbz	r3, 8005b92 <HAL_RCC_OscConfig+0x252>
        __HAL_RCC_HSI_ENABLE();
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b78:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005b7a:	f7fe fe03 	bl	8004784 <HAL_GetTick>
 8005b7e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	055f      	lsls	r7, r3, #21
 8005b84:	d4e5      	bmi.n	8005b52 <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b86:	f7fe fdfd 	bl	8004784 <HAL_GetTick>
 8005b8a:	1b80      	subs	r0, r0, r6
 8005b8c:	2802      	cmp	r0, #2
 8005b8e:	d9f7      	bls.n	8005b80 <HAL_RCC_OscConfig+0x240>
 8005b90:	e76b      	b.n	8005a6a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_DISABLE();
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b98:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005b9a:	f7fe fdf3 	bl	8004784 <HAL_GetTick>
 8005b9e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	0558      	lsls	r0, r3, #21
 8005ba4:	f57f af1b 	bpl.w	80059de <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ba8:	f7fe fdec 	bl	8004784 <HAL_GetTick>
 8005bac:	1b80      	subs	r0, r0, r6
 8005bae:	2802      	cmp	r0, #2
 8005bb0:	d9f6      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x260>
 8005bb2:	e75a      	b.n	8005a6a <HAL_RCC_OscConfig+0x12a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bb4:	696b      	ldr	r3, [r5, #20]
 8005bb6:	4c0b      	ldr	r4, [pc, #44]	; (8005be4 <HAL_RCC_OscConfig+0x2a4>)
 8005bb8:	b1d3      	cbz	r3, 8005bf0 <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_LSI_ENABLE();
 8005bba:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005bc6:	f7fe fddd 	bl	8004784 <HAL_GetTick>
 8005bca:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8005bcc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005bd0:	079b      	lsls	r3, r3, #30
 8005bd2:	f53f af08 	bmi.w	80059e6 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bd6:	f7fe fdd5 	bl	8004784 <HAL_GetTick>
 8005bda:	1b80      	subs	r0, r0, r6
 8005bdc:	2802      	cmp	r0, #2
 8005bde:	d9f5      	bls.n	8005bcc <HAL_RCC_OscConfig+0x28c>
 8005be0:	e743      	b.n	8005a6a <HAL_RCC_OscConfig+0x12a>
 8005be2:	bf00      	nop
 8005be4:	40021000 	.word	0x40021000
 8005be8:	0800c711 	.word	0x0800c711
 8005bec:	20000034 	.word	0x20000034
      __HAL_RCC_LSI_DISABLE();
 8005bf0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005bf4:	f023 0301 	bic.w	r3, r3, #1
 8005bf8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005bfc:	f7fe fdc2 	bl	8004784 <HAL_GetTick>
 8005c00:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8005c02:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005c06:	079f      	lsls	r7, r3, #30
 8005c08:	f57f aeed 	bpl.w	80059e6 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c0c:	f7fe fdba 	bl	8004784 <HAL_GetTick>
 8005c10:	1b80      	subs	r0, r0, r6
 8005c12:	2802      	cmp	r0, #2
 8005c14:	d9f5      	bls.n	8005c02 <HAL_RCC_OscConfig+0x2c2>
 8005c16:	e728      	b.n	8005a6a <HAL_RCC_OscConfig+0x12a>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005c18:	4c66      	ldr	r4, [pc, #408]	; (8005db4 <HAL_RCC_OscConfig+0x474>)
 8005c1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c1c:	00de      	lsls	r6, r3, #3
 8005c1e:	d427      	bmi.n	8005c70 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c26:	65a3      	str	r3, [r4, #88]	; 0x58
 8005c28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c2e:	9301      	str	r3, [sp, #4]
 8005c30:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005c32:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c34:	4e60      	ldr	r6, [pc, #384]	; (8005db8 <HAL_RCC_OscConfig+0x478>)
 8005c36:	6833      	ldr	r3, [r6, #0]
 8005c38:	05d8      	lsls	r0, r3, #23
 8005c3a:	d51b      	bpl.n	8005c74 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c3c:	68ab      	ldr	r3, [r5, #8]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d129      	bne.n	8005c96 <HAL_RCC_OscConfig+0x356>
 8005c42:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005c46:	f043 0301 	orr.w	r3, r3, #1
 8005c4a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005c4e:	f7fe fd99 	bl	8004784 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c52:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005c56:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8005c58:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005c5c:	079a      	lsls	r2, r3, #30
 8005c5e:	d540      	bpl.n	8005ce2 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8005c60:	2f00      	cmp	r7, #0
 8005c62:	f43f aec4 	beq.w	80059ee <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c6c:	65a3      	str	r3, [r4, #88]	; 0x58
 8005c6e:	e6be      	b.n	80059ee <HAL_RCC_OscConfig+0xae>
    FlagStatus       pwrclkchanged = RESET;
 8005c70:	2700      	movs	r7, #0
 8005c72:	e7df      	b.n	8005c34 <HAL_RCC_OscConfig+0x2f4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c74:	6833      	ldr	r3, [r6, #0]
 8005c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c7a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005c7c:	f7fe fd82 	bl	8004784 <HAL_GetTick>
 8005c80:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c82:	6833      	ldr	r3, [r6, #0]
 8005c84:	05d9      	lsls	r1, r3, #23
 8005c86:	d4d9      	bmi.n	8005c3c <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c88:	f7fe fd7c 	bl	8004784 <HAL_GetTick>
 8005c8c:	eba0 0008 	sub.w	r0, r0, r8
 8005c90:	2802      	cmp	r0, #2
 8005c92:	d9f6      	bls.n	8005c82 <HAL_RCC_OscConfig+0x342>
 8005c94:	e6e9      	b.n	8005a6a <HAL_RCC_OscConfig+0x12a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c96:	2b05      	cmp	r3, #5
 8005c98:	d106      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x368>
 8005c9a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005c9e:	f043 0304 	orr.w	r3, r3, #4
 8005ca2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8005ca6:	e7cc      	b.n	8005c42 <HAL_RCC_OscConfig+0x302>
 8005ca8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005cac:	f022 0201 	bic.w	r2, r2, #1
 8005cb0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8005cb4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005cb8:	f022 0204 	bic.w	r2, r2, #4
 8005cbc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1c4      	bne.n	8005c4e <HAL_RCC_OscConfig+0x30e>
      tickstart = HAL_GetTick();
 8005cc4:	f7fe fd5e 	bl	8004784 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cc8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005ccc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8005cce:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005cd2:	079b      	lsls	r3, r3, #30
 8005cd4:	d5c4      	bpl.n	8005c60 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cd6:	f7fe fd55 	bl	8004784 <HAL_GetTick>
 8005cda:	1b80      	subs	r0, r0, r6
 8005cdc:	4540      	cmp	r0, r8
 8005cde:	d9f6      	bls.n	8005cce <HAL_RCC_OscConfig+0x38e>
 8005ce0:	e6c3      	b.n	8005a6a <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ce2:	f7fe fd4f 	bl	8004784 <HAL_GetTick>
 8005ce6:	1b80      	subs	r0, r0, r6
 8005ce8:	4540      	cmp	r0, r8
 8005cea:	d9b5      	bls.n	8005c58 <HAL_RCC_OscConfig+0x318>
 8005cec:	e6bd      	b.n	8005a6a <HAL_RCC_OscConfig+0x12a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cee:	4c31      	ldr	r4, [pc, #196]	; (8005db4 <HAL_RCC_OscConfig+0x474>)
 8005cf0:	68a3      	ldr	r3, [r4, #8]
 8005cf2:	f003 030c 	and.w	r3, r3, #12
 8005cf6:	2b0c      	cmp	r3, #12
 8005cf8:	f43f ae32 	beq.w	8005960 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8005cfc:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005cfe:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8005d00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d04:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d06:	d137      	bne.n	8005d78 <HAL_RCC_OscConfig+0x438>
        tickstart = HAL_GetTick();
 8005d08:	f7fe fd3c 	bl	8004784 <HAL_GetTick>
 8005d0c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	019f      	lsls	r7, r3, #6
 8005d12:	d42b      	bmi.n	8005d6c <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d14:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005d16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005d18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d1c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005d1e:	3a01      	subs	r2, #1
 8005d20:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005d24:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005d26:	0912      	lsrs	r2, r2, #4
 8005d28:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8005d2c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8005d2e:	0852      	lsrs	r2, r2, #1
 8005d30:	3a01      	subs	r2, #1
 8005d32:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8005d36:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005d38:	0852      	lsrs	r2, r2, #1
 8005d3a:	3a01      	subs	r2, #1
 8005d3c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005d40:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d48:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d4a:	68e3      	ldr	r3, [r4, #12]
 8005d4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d50:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8005d52:	f7fe fd17 	bl	8004784 <HAL_GetTick>
 8005d56:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	0198      	lsls	r0, r3, #6
 8005d5c:	f53f ae4b 	bmi.w	80059f6 <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d60:	f7fe fd10 	bl	8004784 <HAL_GetTick>
 8005d64:	1b40      	subs	r0, r0, r5
 8005d66:	2802      	cmp	r0, #2
 8005d68:	d9f6      	bls.n	8005d58 <HAL_RCC_OscConfig+0x418>
 8005d6a:	e67e      	b.n	8005a6a <HAL_RCC_OscConfig+0x12a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d6c:	f7fe fd0a 	bl	8004784 <HAL_GetTick>
 8005d70:	1b80      	subs	r0, r0, r6
 8005d72:	2802      	cmp	r0, #2
 8005d74:	d9cb      	bls.n	8005d0e <HAL_RCC_OscConfig+0x3ce>
 8005d76:	e678      	b.n	8005a6a <HAL_RCC_OscConfig+0x12a>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	0119      	lsls	r1, r3, #4
 8005d7c:	d406      	bmi.n	8005d8c <HAL_RCC_OscConfig+0x44c>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8005d7e:	6823      	ldr	r3, [r4, #0]
           && 
 8005d80:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005d82:	bf5e      	ittt	pl
 8005d84:	68e3      	ldrpl	r3, [r4, #12]
 8005d86:	f023 0303 	bicpl.w	r3, r3, #3
 8005d8a:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005d8c:	68e3      	ldr	r3, [r4, #12]
 8005d8e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d96:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8005d98:	f7fe fcf4 	bl	8004784 <HAL_GetTick>
 8005d9c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	019b      	lsls	r3, r3, #6
 8005da2:	f57f ae28 	bpl.w	80059f6 <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da6:	f7fe fced 	bl	8004784 <HAL_GetTick>
 8005daa:	1b40      	subs	r0, r0, r5
 8005dac:	2802      	cmp	r0, #2
 8005dae:	d9f6      	bls.n	8005d9e <HAL_RCC_OscConfig+0x45e>
 8005db0:	e65b      	b.n	8005a6a <HAL_RCC_OscConfig+0x12a>
 8005db2:	bf00      	nop
 8005db4:	40021000 	.word	0x40021000
 8005db8:	40007000 	.word	0x40007000

08005dbc <HAL_RCC_GetHCLKFreq>:
}
 8005dbc:	4b01      	ldr	r3, [pc, #4]	; (8005dc4 <HAL_RCC_GetHCLKFreq+0x8>)
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	20000034 	.word	0x20000034

08005dc8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8005dc8:	4b08      	ldr	r3, [pc, #32]	; (8005dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	fa92 f2a2 	rbit	r2, r2
 8005dd4:	fab2 f282 	clz	r2, r2
 8005dd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ddc:	40d3      	lsrs	r3, r2
 8005dde:	4a04      	ldr	r2, [pc, #16]	; (8005df0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005de0:	5cd3      	ldrb	r3, [r2, r3]
 8005de2:	4a04      	ldr	r2, [pc, #16]	; (8005df4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8005de4:	6810      	ldr	r0, [r2, #0]
}
 8005de6:	40d8      	lsrs	r0, r3
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40021000 	.word	0x40021000
 8005df0:	0800c721 	.word	0x0800c721
 8005df4:	20000034 	.word	0x20000034

08005df8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8005df8:	4b08      	ldr	r3, [pc, #32]	; (8005e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dfa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	fa92 f2a2 	rbit	r2, r2
 8005e04:	fab2 f282 	clz	r2, r2
 8005e08:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005e0c:	40d3      	lsrs	r3, r2
 8005e0e:	4a04      	ldr	r2, [pc, #16]	; (8005e20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e10:	5cd3      	ldrb	r3, [r2, r3]
 8005e12:	4a04      	ldr	r2, [pc, #16]	; (8005e24 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8005e14:	6810      	ldr	r0, [r2, #0]
}
 8005e16:	40d8      	lsrs	r0, r3
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	40021000 	.word	0x40021000
 8005e20:	0800c721 	.word	0x0800c721
 8005e24:	20000034 	.word	0x20000034

08005e28 <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005e28:	4a02      	ldr	r2, [pc, #8]	; (8005e34 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8005e2a:	6813      	ldr	r3, [r2, #0]
 8005e2c:	f043 0304 	orr.w	r3, r3, #4
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	4770      	bx	lr
 8005e34:	40021000 	.word	0x40021000

08005e38 <SD_CmdResp2Error>:
  */
static HAL_SD_ErrorTypedef SD_CmdResp2Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8005e38:	6803      	ldr	r3, [r0, #0]
 8005e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e3c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005e40:	d0fb      	beq.n	8005e3a <SD_CmdResp2Error+0x2>
  {
  }
    
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8005e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e44:	0752      	lsls	r2, r2, #29
 8005e46:	d503      	bpl.n	8005e50 <SD_CmdResp2Error+0x18>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8005e48:	2204      	movs	r2, #4
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8005e4c:	2003      	movs	r0, #3
 8005e4e:	4770      	bx	lr
  }
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 8005e50:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005e52:	f010 0001 	ands.w	r0, r0, #1
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8005e56:	bf15      	itete	ne
 8005e58:	2001      	movne	r0, #1
  {
    /* No error flag set */
  }  
  
  /* Clear all the static flags */
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e5a:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8005e5e:	6398      	strne	r0, [r3, #56]	; 0x38
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e60:	639a      	streq	r2, [r3, #56]	; 0x38
  
  return errorstate;
}
 8005e62:	4770      	bx	lr

08005e64 <SD_CmdResp1Error>:
{
 8005e64:	b570      	push	{r4, r5, r6, lr}
 8005e66:	4605      	mov	r5, r0
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8005e68:	6800      	ldr	r0, [r0, #0]
{
 8005e6a:	460e      	mov	r6, r1
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8005e6c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005e6e:	f013 0f45 	tst.w	r3, #69	; 0x45
 8005e72:	d0fb      	beq.n	8005e6c <SD_CmdResp1Error+0x8>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8005e74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005e76:	075b      	lsls	r3, r3, #29
 8005e78:	d503      	bpl.n	8005e82 <SD_CmdResp1Error+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8005e7a:	2304      	movs	r3, #4
 8005e7c:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8005e7e:	2003      	movs	r0, #3
 8005e80:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 8005e82:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005e84:	f014 0401 	ands.w	r4, r4, #1
 8005e88:	d003      	beq.n	8005e92 <SD_CmdResp1Error+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 8005e8e:	4618      	mov	r0, r3
 8005e90:	bd70      	pop	{r4, r5, r6, pc}
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 8005e92:	f001 fda8 	bl	80079e6 <SDMMC_GetCommandResponse>
 8005e96:	42b0      	cmp	r0, r6
 8005e98:	d001      	beq.n	8005e9e <SD_CmdResp1Error+0x3a>
    return errorstate;
 8005e9a:	2010      	movs	r0, #16
 8005e9c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e9e:	6828      	ldr	r0, [r5, #0]
 8005ea0:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005ea4:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	f001 fda0 	bl	80079ec <SDMMC_GetResponse>
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8005eac:	4b27      	ldr	r3, [pc, #156]	; (8005f4c <SD_CmdResp1Error+0xe8>)
 8005eae:	4003      	ands	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0ec      	beq.n	8005e8e <SD_CmdResp1Error+0x2a>
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	db27      	blt.n	8005f08 <SD_CmdResp1Error+0xa4>
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 8005eb8:	0045      	lsls	r5, r0, #1
 8005eba:	d427      	bmi.n	8005f0c <SD_CmdResp1Error+0xa8>
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 8005ebc:	0084      	lsls	r4, r0, #2
 8005ebe:	d427      	bmi.n	8005f10 <SD_CmdResp1Error+0xac>
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 8005ec0:	00c1      	lsls	r1, r0, #3
 8005ec2:	d427      	bmi.n	8005f14 <SD_CmdResp1Error+0xb0>
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 8005ec4:	0102      	lsls	r2, r0, #4
 8005ec6:	d427      	bmi.n	8005f18 <SD_CmdResp1Error+0xb4>
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 8005ec8:	0143      	lsls	r3, r0, #5
 8005eca:	d427      	bmi.n	8005f1c <SD_CmdResp1Error+0xb8>
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 8005ecc:	01c6      	lsls	r6, r0, #7
 8005ece:	d427      	bmi.n	8005f20 <SD_CmdResp1Error+0xbc>
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 8005ed0:	0205      	lsls	r5, r0, #8
 8005ed2:	d427      	bmi.n	8005f24 <SD_CmdResp1Error+0xc0>
  if((response_r1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 8005ed4:	0244      	lsls	r4, r0, #9
 8005ed6:	d4e0      	bmi.n	8005e9a <SD_CmdResp1Error+0x36>
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 8005ed8:	0281      	lsls	r1, r0, #10
 8005eda:	d425      	bmi.n	8005f28 <SD_CmdResp1Error+0xc4>
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 8005edc:	02c2      	lsls	r2, r0, #11
 8005ede:	d425      	bmi.n	8005f2c <SD_CmdResp1Error+0xc8>
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 8005ee0:	0303      	lsls	r3, r0, #12
 8005ee2:	d425      	bmi.n	8005f30 <SD_CmdResp1Error+0xcc>
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 8005ee4:	0346      	lsls	r6, r0, #13
 8005ee6:	d425      	bmi.n	8005f34 <SD_CmdResp1Error+0xd0>
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 8005ee8:	0385      	lsls	r5, r0, #14
 8005eea:	d425      	bmi.n	8005f38 <SD_CmdResp1Error+0xd4>
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 8005eec:	03c4      	lsls	r4, r0, #15
 8005eee:	d425      	bmi.n	8005f3c <SD_CmdResp1Error+0xd8>
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 8005ef0:	0401      	lsls	r1, r0, #16
 8005ef2:	d425      	bmi.n	8005f40 <SD_CmdResp1Error+0xdc>
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 8005ef4:	0442      	lsls	r2, r0, #17
 8005ef6:	d425      	bmi.n	8005f44 <SD_CmdResp1Error+0xe0>
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 8005ef8:	0483      	lsls	r3, r0, #18
 8005efa:	d425      	bmi.n	8005f48 <SD_CmdResp1Error+0xe4>
    return(SD_AKE_SEQ_ERROR);
 8005efc:	f010 0f08 	tst.w	r0, #8
 8005f00:	bf0c      	ite	eq
 8005f02:	2000      	moveq	r0, #0
 8005f04:	201a      	movne	r0, #26
 8005f06:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ADDR_OUT_OF_RANGE);
 8005f08:	201c      	movs	r0, #28
 8005f0a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ADDR_MISALIGNED);
 8005f0c:	2009      	movs	r0, #9
 8005f0e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_BLOCK_LEN_ERR);
 8005f10:	200a      	movs	r0, #10
 8005f12:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ERASE_SEQ_ERR);
 8005f14:	200b      	movs	r0, #11
 8005f16:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_BAD_ERASE_PARAM);
 8005f18:	200c      	movs	r0, #12
 8005f1a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_WRITE_PROT_VIOLATION);
 8005f1c:	200d      	movs	r0, #13
 8005f1e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_LOCK_UNLOCK_FAILED);
 8005f20:	200e      	movs	r0, #14
 8005f22:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_COM_CRC_FAILED);
 8005f24:	200f      	movs	r0, #15
 8005f26:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CARD_ECC_FAILED);
 8005f28:	2011      	movs	r0, #17
 8005f2a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CC_ERROR);
 8005f2c:	2012      	movs	r0, #18
 8005f2e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_GENERAL_UNKNOWN_ERROR);
 8005f30:	2013      	movs	r0, #19
 8005f32:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_STREAM_READ_UNDERRUN);
 8005f34:	2014      	movs	r0, #20
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_STREAM_WRITE_OVERRUN);
 8005f38:	2015      	movs	r0, #21
 8005f3a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CID_CSD_OVERWRITE);
 8005f3c:	2016      	movs	r0, #22
 8005f3e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_WP_ERASE_SKIP);
 8005f40:	2017      	movs	r0, #23
 8005f42:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CARD_ECC_DISABLED);
 8005f44:	2018      	movs	r0, #24
 8005f46:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ERASE_RESET);
 8005f48:	2019      	movs	r0, #25
}
 8005f4a:	bd70      	pop	{r4, r5, r6, pc}
 8005f4c:	fdffe008 	.word	0xfdffe008

08005f50 <SD_FindSCR>:
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f54:	b08e      	sub	sp, #56	; 0x38
  SDMMC_CmdInitTypeDef  sdmmc_cmdinitstructure;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 8005f56:	2300      	movs	r3, #0
  
  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005f58:	2410      	movs	r4, #16
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005f5a:	2240      	movs	r2, #64	; 0x40
{
 8005f5c:	4606      	mov	r6, r0
  uint32_t tempscr[2] = {0, 0};
 8005f5e:	9301      	str	r3, [sp, #4]
 8005f60:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f62:	9306      	str	r3, [sp, #24]
{
 8005f64:	460d      	mov	r5, r1
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005f6a:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
 8005f6c:	2708      	movs	r7, #8
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005f6e:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005f70:	9404      	str	r4, [sp, #16]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005f72:	9205      	str	r2, [sp, #20]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005f74:	9307      	str	r3, [sp, #28]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
 8005f76:	9703      	str	r7, [sp, #12]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005f78:	f001 fd23 	bl	80079c2 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	4630      	mov	r0, r6
 8005f80:	f7ff ff70 	bl	8005e64 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8005f84:	4604      	mov	r4, r0
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d138      	bne.n	8005ffc <SD_FindSCR+0xac>
  {
    return errorstate;
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8005f8a:	6a73      	ldr	r3, [r6, #36]	; 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005f8c:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8005f8e:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8005f90:	2437      	movs	r4, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005f92:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8005f94:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8005f96:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005f98:	f001 fd13 	bl	80079c2 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	f7ff ff60 	bl	8005e64 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	bb48      	cbnz	r0, 8005ffc <SD_FindSCR+0xac>
  {
    return errorstate;
  }
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8005fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fac:	9308      	str	r3, [sp, #32]
  sdmmc_datainitstructure.DataLength    = 8;
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005fae:	2330      	movs	r3, #48	; 0x30
 8005fb0:	930a      	str	r3, [sp, #40]	; 0x28
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	930b      	str	r3, [sp, #44]	; 0x2c
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005fb6:	900c      	str	r0, [sp, #48]	; 0x30
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005fb8:	2301      	movs	r3, #1
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8005fba:	a908      	add	r1, sp, #32
 8005fbc:	6830      	ldr	r0, [r6, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005fbe:	930d      	str	r3, [sp, #52]	; 0x34
  sdmmc_datainitstructure.DataLength    = 8;
 8005fc0:	9709      	str	r7, [sp, #36]	; 0x24
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8005fc2:	f001 fd1d 	bl	8007a00 <SDMMC_DataConfig>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  sdmmc_cmdinitstructure.Argument         = 0;
 8005fc6:	9403      	str	r4, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005fc8:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8005fca:	2433      	movs	r4, #51	; 0x33
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005fcc:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8005fce:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005fd0:	f001 fcf7 	bl	80079c2 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SD_APP_SEND_SCR);
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	f7ff ff44 	bl	8005e64 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8005fdc:	4604      	mov	r4, r0
 8005fde:	b968      	cbnz	r0, 8005ffc <SD_FindSCR+0xac>
 8005fe0:	466f      	mov	r7, sp
  {
    return errorstate;
  }
  
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8005fe2:	f240 482a 	movw	r8, #1066	; 0x42a
 8005fe6:	6830      	ldr	r0, [r6, #0]
 8005fe8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005fea:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8005fee:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8005ff0:	d008      	beq.n	8006004 <SD_FindSCR+0xb4>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
      index++;
    }
  }
  
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005ff2:	0719      	lsls	r1, r3, #28
 8005ff4:	d50d      	bpl.n	8006012 <SD_FindSCR+0xc2>
  {
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005ff6:	2308      	movs	r3, #8
 8005ff8:	6383      	str	r3, [r0, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
    
    return errorstate;
 8005ffa:	2404      	movs	r4, #4
  
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
    ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
  
  return errorstate;
}
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	b00e      	add	sp, #56	; 0x38
 8006000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006004:	029b      	lsls	r3, r3, #10
 8006006:	d5ef      	bpl.n	8005fe8 <SD_FindSCR+0x98>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006008:	f001 fcd0 	bl	80079ac <SDMMC_ReadFIFO>
 800600c:	f847 0f04 	str.w	r0, [r7, #4]!
 8006010:	e7e9      	b.n	8005fe6 <SD_FindSCR+0x96>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006012:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006014:	079a      	lsls	r2, r3, #30
 8006016:	d502      	bpl.n	800601e <SD_FindSCR+0xce>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006018:	2402      	movs	r4, #2
 800601a:	6384      	str	r4, [r0, #56]	; 0x38
    return errorstate;
 800601c:	e7ee      	b.n	8005ffc <SD_FindSCR+0xac>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800601e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006020:	069b      	lsls	r3, r3, #26
 8006022:	d503      	bpl.n	800602c <SD_FindSCR+0xdc>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006024:	2320      	movs	r3, #32
 8006026:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8006028:	2406      	movs	r4, #6
 800602a:	e7e7      	b.n	8005ffc <SD_FindSCR+0xac>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800602c:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006030:	6383      	str	r3, [r0, #56]	; 0x38
 8006032:	9b01      	ldr	r3, [sp, #4]
 8006034:	ba1b      	rev	r3, r3
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 8006036:	606b      	str	r3, [r5, #4]
 8006038:	9b02      	ldr	r3, [sp, #8]
 800603a:	ba1b      	rev	r3, r3
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 800603c:	602b      	str	r3, [r5, #0]
  return errorstate;
 800603e:	e7dd      	b.n	8005ffc <SD_FindSCR+0xac>

08006040 <HAL_SD_ReadBlocks_DMA>:
{
 8006040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006044:	b08d      	sub	sp, #52	; 0x34
  hsd->Instance->DCTRL = 0;
 8006046:	6806      	ldr	r6, [r0, #0]
{
 8006048:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800604a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  if(NumberOfBlocks > 1)
 800604c:	2f01      	cmp	r7, #1
{
 800604e:	4699      	mov	r9, r3
  hsd->Instance->DCTRL = 0;
 8006050:	f04f 0300 	mov.w	r3, #0
 8006054:	62f3      	str	r3, [r6, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 8006056:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 8006058:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK; 
 800605a:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdOperation = SD_READ_MULTIPLE_BLOCK;
 800605c:	bf88      	it	hi
 800605e:	2301      	movhi	r3, #1
    hsd->SdOperation = SD_READ_SINGLE_BLOCK;
 8006060:	6543      	str	r3, [r0, #84]	; 0x54
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8006062:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8006064:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 8006068:	63f3      	str	r3, [r6, #60]	; 0x3c
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 800606a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
{
 800606c:	4604      	mov	r4, r0
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 800606e:	f043 0308 	orr.w	r3, r3, #8
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 8006072:	6d80      	ldr	r0, [r0, #88]	; 0x58
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8006074:	62f3      	str	r3, [r6, #44]	; 0x2c
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 8006076:	4b2d      	ldr	r3, [pc, #180]	; (800612c <HAL_SD_ReadBlocks_DMA+0xec>)
 8006078:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 800607a:	4690      	mov	r8, r2
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 800607c:	4b2c      	ldr	r3, [pc, #176]	; (8006130 <HAL_SD_ReadBlocks_DMA+0xf0>)
  hsd->hdmarx->Instance->CCR &= ~DMA_MEMORY_TO_PERIPH;
 800607e:	6802      	ldr	r2, [r0, #0]
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 8006080:	6343      	str	r3, [r0, #52]	; 0x34
  hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006082:	2300      	movs	r3, #0
 8006084:	6083      	str	r3, [r0, #8]
  hsd->hdmarx->Instance->CCR &= ~DMA_MEMORY_TO_PERIPH;
 8006086:	6813      	ldr	r3, [r2, #0]
 8006088:	f023 0310 	bic.w	r3, r3, #16
 800608c:	6013      	str	r3, [r2, #0]
  HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pReadBuffer, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 800608e:	fb05 f307 	mul.w	r3, r5, r7
 8006092:	460a      	mov	r2, r1
 8006094:	089b      	lsrs	r3, r3, #2
 8006096:	f106 0180 	add.w	r1, r6, #128	; 0x80
 800609a:	f7fe fcb3 	bl	8004a04 <HAL_DMA_Start_IT>
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 800609e:	6a23      	ldr	r3, [r4, #32]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80060a0:	6820      	ldr	r0, [r4, #0]
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 80060a2:	2b02      	cmp	r3, #2
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80060a4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80060a8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80060aa:	f04f 0300 	mov.w	r3, #0
    ReadAddr /= 512;
 80060ae:	bf04      	itt	eq
 80060b0:	ea4f 2858 	moveq.w	r8, r8, lsr #9
    BlockSize = 512;
 80060b4:	f44f 7500 	moveq.w	r5, #512	; 0x200
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 80060b8:	f04f 0610 	mov.w	r6, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80060bc:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80060be:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80060c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    ReadAddr /= 512;
 80060c4:	bf08      	it	eq
 80060c6:	ea48 58c9 	orreq.w	r8, r8, r9, lsl #23
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 80060ca:	9501      	str	r5, [sp, #4]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 80060cc:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80060ce:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80060d0:	f001 fc77 	bl	80079c2 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 80060d4:	4631      	mov	r1, r6
 80060d6:	4620      	mov	r0, r4
 80060d8:	f7ff fec4 	bl	8005e64 <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 80060dc:	bb10      	cbnz	r0, 8006124 <HAL_SD_ReadBlocks_DMA+0xe4>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 80060de:	f04f 32ff 	mov.w	r2, #4294967295
 80060e2:	9206      	str	r2, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80060e4:	2290      	movs	r2, #144	; 0x90
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 80060e6:	2301      	movs	r3, #1
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80060e8:	9208      	str	r2, [sp, #32]
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80060ea:	900a      	str	r0, [sp, #40]	; 0x28
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80060ec:	2202      	movs	r2, #2
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 80060ee:	a906      	add	r1, sp, #24
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 80060f0:	437d      	muls	r5, r7
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 80060f2:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 80060f4:	930b      	str	r3, [sp, #44]	; 0x2c
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80060f6:	9209      	str	r2, [sp, #36]	; 0x24
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 80060f8:	9507      	str	r5, [sp, #28]
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 80060fa:	f001 fc81 	bl	8007a00 <SDMMC_DataConfig>
  if(NumberOfBlocks > 1)
 80060fe:	2f01      	cmp	r7, #1
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 8006100:	bf8c      	ite	hi
 8006102:	2312      	movhi	r3, #18
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 8006104:	2311      	movls	r3, #17
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006106:	a901      	add	r1, sp, #4
 8006108:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 800610a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)ReadAddr;
 800610c:	f8cd 8004 	str.w	r8, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006110:	f001 fc57 	bl	80079c2 <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 8006114:	2f01      	cmp	r7, #1
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_MULT_BLOCK);
 8006116:	bf8c      	ite	hi
 8006118:	2112      	movhi	r1, #18
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_SINGLE_BLOCK);
 800611a:	2111      	movls	r1, #17
 800611c:	4620      	mov	r0, r4
 800611e:	f7ff fea1 	bl	8005e64 <SD_CmdResp1Error>
  hsd->SdTransferErr = errorstate;
 8006122:	64e0      	str	r0, [r4, #76]	; 0x4c
}
 8006124:	b00d      	add	sp, #52	; 0x34
 8006126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800612a:	bf00      	nop
 800612c:	080062a3 	.word	0x080062a3
 8006130:	080062bf 	.word	0x080062bf

08006134 <HAL_SD_WriteBlocks_DMA>:
{
 8006134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006138:	b08c      	sub	sp, #48	; 0x30
 800613a:	4617      	mov	r7, r2
 800613c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  hsd->Instance->DCTRL = 0;
 800613e:	6802      	ldr	r2, [r0, #0]
{
 8006140:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  if(NumberOfBlocks > 1)
 8006144:	2e01      	cmp	r6, #1
{
 8006146:	461d      	mov	r5, r3
  hsd->Instance->DCTRL = 0;
 8006148:	f04f 0300 	mov.w	r3, #0
 800614c:	62d3      	str	r3, [r2, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 800614e:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 8006150:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK;
 8006152:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdOperation = SD_WRITE_MULTIPLE_BLOCK;
 8006154:	bf8c      	ite	hi
 8006156:	2303      	movhi	r3, #3
    hsd->SdOperation = SD_WRITE_SINGLE_BLOCK;
 8006158:	2302      	movls	r3, #2
 800615a:	6543      	str	r3, [r0, #84]	; 0x54
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 800615c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
{
 800615e:	4604      	mov	r4, r0
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8006160:	f443 738d 	orr.w	r3, r3, #282	; 0x11a
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8006164:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8006166:	63d3      	str	r3, [r2, #60]	; 0x3c
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8006168:	4b2f      	ldr	r3, [pc, #188]	; (8006228 <HAL_SD_WriteBlocks_DMA+0xf4>)
  hsd->hdmatx->Instance->CCR |= DMA_MEMORY_TO_PERIPH;
 800616a:	f8d0 e000 	ldr.w	lr, [r0]
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 800616e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsd->hdmatx->XferErrorCallback = SD_DMA_TxError;
 8006170:	4b2e      	ldr	r3, [pc, #184]	; (800622c <HAL_SD_WriteBlocks_DMA+0xf8>)
 8006172:	6343      	str	r3, [r0, #52]	; 0x34
  hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006174:	2310      	movs	r3, #16
 8006176:	6083      	str	r3, [r0, #8]
  hsd->hdmatx->Instance->CCR |= DMA_MEMORY_TO_PERIPH;
 8006178:	f8de 3000 	ldr.w	r3, [lr]
 800617c:	f043 0310 	orr.w	r3, r3, #16
 8006180:	f8ce 3000 	str.w	r3, [lr]
  HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pWriteBuffer, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 8006184:	fb08 f306 	mul.w	r3, r8, r6
 8006188:	3280      	adds	r2, #128	; 0x80
 800618a:	089b      	lsrs	r3, r3, #2
 800618c:	f7fe fc3a 	bl	8004a04 <HAL_DMA_Start_IT>
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8006190:	6820      	ldr	r0, [r4, #0]
 8006192:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006194:	f043 0308 	orr.w	r3, r3, #8
 8006198:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 800619a:	6a23      	ldr	r3, [r4, #32]
 800619c:	2b02      	cmp	r3, #2
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800619e:	f04f 0340 	mov.w	r3, #64	; 0x40
    WriteAddr /= 512;
 80061a2:	bf08      	it	eq
 80061a4:	0a7f      	lsreq	r7, r7, #9
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80061a6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80061a8:	f04f 0300 	mov.w	r3, #0
    WriteAddr /= 512;
 80061ac:	bf04      	itt	eq
 80061ae:	ea47 57c5 	orreq.w	r7, r7, r5, lsl #23
    BlockSize = 512;
 80061b2:	f44f 7800 	moveq.w	r8, #512	; 0x200
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 80061b6:	2510      	movs	r5, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80061b8:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80061ba:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80061bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 80061c0:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80061c2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 80061c4:	f8cd 8004 	str.w	r8, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80061c8:	f001 fbfb 	bl	80079c2 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 80061cc:	4629      	mov	r1, r5
 80061ce:	4620      	mov	r0, r4
 80061d0:	f7ff fe48 	bl	8005e64 <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 80061d4:	4605      	mov	r5, r0
 80061d6:	bb18      	cbnz	r0, 8006220 <HAL_SD_WriteBlocks_DMA+0xec>
  if(NumberOfBlocks <= 1)
 80061d8:	2e01      	cmp	r6, #1
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 80061da:	bf94      	ite	ls
 80061dc:	2318      	movls	r3, #24
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 80061de:	2319      	movhi	r3, #25
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80061e0:	a901      	add	r1, sp, #4
 80061e2:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 80061e4:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
 80061e6:	9701      	str	r7, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80061e8:	f001 fbeb 	bl	80079c2 <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 80061ec:	2e01      	cmp	r6, #1
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_MULT_BLOCK);
 80061ee:	bf8c      	ite	hi
 80061f0:	2119      	movhi	r1, #25
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_SINGLE_BLOCK);
 80061f2:	2118      	movls	r1, #24
 80061f4:	4620      	mov	r0, r4
 80061f6:	f7ff fe35 	bl	8005e64 <SD_CmdResp1Error>
 80061fa:	4605      	mov	r5, r0
  if (errorstate != SD_OK)
 80061fc:	b980      	cbnz	r0, 8006220 <HAL_SD_WriteBlocks_DMA+0xec>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 80061fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006202:	9306      	str	r3, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006204:	2390      	movs	r3, #144	; 0x90
 8006206:	9308      	str	r3, [sp, #32]
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006208:	9009      	str	r0, [sp, #36]	; 0x24
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800620a:	900a      	str	r0, [sp, #40]	; 0x28
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800620c:	2301      	movs	r3, #1
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 800620e:	fb06 f608 	mul.w	r6, r6, r8
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006212:	a906      	add	r1, sp, #24
 8006214:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8006216:	9607      	str	r6, [sp, #28]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006218:	930b      	str	r3, [sp, #44]	; 0x2c
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 800621a:	f001 fbf1 	bl	8007a00 <SDMMC_DataConfig>
  hsd->SdTransferErr = errorstate;
 800621e:	64e5      	str	r5, [r4, #76]	; 0x4c
}
 8006220:	4628      	mov	r0, r5
 8006222:	b00c      	add	sp, #48	; 0x30
 8006224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006228:	080062cd 	.word	0x080062cd
 800622c:	080062e9 	.word	0x080062e9

08006230 <HAL_SD_XferCpltCallback>:
 8006230:	4770      	bx	lr

08006232 <HAL_SD_XferErrorCallback>:
 8006232:	4770      	bx	lr

08006234 <HAL_SD_IRQHandler>:
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 8006234:	6803      	ldr	r3, [r0, #0]
 8006236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006238:	05d2      	lsls	r2, r2, #23
{  
 800623a:	b510      	push	{r4, lr}
 800623c:	4604      	mov	r4, r0
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 800623e:	d510      	bpl.n	8006262 <HAL_SD_IRQHandler+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_IT_DATAEND);  
 8006240:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006244:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferCplt = 1;
 8006246:	2301      	movs	r3, #1
 8006248:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdTransferErr  = SD_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_SD_XferCpltCallback(hsd);  
 800624e:	f7ff ffef 	bl	8006230 <HAL_SD_XferCpltCallback>
  __HAL_SD_SDMMC_DISABLE_IT(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_DATAEND  |\
 8006252:	6822      	ldr	r2, [r4, #0]
 8006254:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006256:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800625a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800625e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006260:	bd10      	pop	{r4, pc}
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL))
 8006262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006264:	0791      	lsls	r1, r2, #30
 8006266:	d505      	bpl.n	8006274 <HAL_SD_IRQHandler+0x40>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006268:	2202      	movs	r2, #2
 800626a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_CRC_FAIL;
 800626c:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 800626e:	f7ff ffe0 	bl	8006232 <HAL_SD_XferErrorCallback>
 8006272:	e7ee      	b.n	8006252 <HAL_SD_IRQHandler+0x1e>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT))
 8006274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006276:	0712      	lsls	r2, r2, #28
 8006278:	d504      	bpl.n	8006284 <HAL_SD_IRQHandler+0x50>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800627a:	2208      	movs	r2, #8
 800627c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_TIMEOUT;
 800627e:	2304      	movs	r3, #4
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 8006280:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006282:	e7f4      	b.n	800626e <HAL_SD_IRQHandler+0x3a>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_RXOVERR))
 8006284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006286:	0691      	lsls	r1, r2, #26
 8006288:	d503      	bpl.n	8006292 <HAL_SD_IRQHandler+0x5e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800628a:	2220      	movs	r2, #32
 800628c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_RX_OVERRUN;
 800628e:	2306      	movs	r3, #6
 8006290:	e7f6      	b.n	8006280 <HAL_SD_IRQHandler+0x4c>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_TXUNDERR))
 8006292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006294:	06d2      	lsls	r2, r2, #27
 8006296:	d5dc      	bpl.n	8006252 <HAL_SD_IRQHandler+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_TXUNDERR);
 8006298:	2210      	movs	r2, #16
 800629a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 800629c:	2305      	movs	r3, #5
 800629e:	e7ef      	b.n	8006280 <HAL_SD_IRQHandler+0x4c>

080062a0 <HAL_SD_DMA_RxCpltCallback>:
 80062a0:	4770      	bx	lr

080062a2 <SD_DMA_RxCplt>:
{
 80062a2:	b510      	push	{r4, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80062a4:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hsd->DmaTransferCplt = 1;
 80062a6:	2301      	movs	r3, #1
 80062a8:	6523      	str	r3, [r4, #80]	; 0x50
  while(hsd->SdTransferCplt == 0)
 80062aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d0fc      	beq.n	80062aa <SD_DMA_RxCplt+0x8>
  HAL_DMA_Abort(hdma);
 80062b0:	f7fe fbe6 	bl	8004a80 <HAL_DMA_Abort>
  HAL_SD_DMA_RxCpltCallback(hsd->hdmarx);   
 80062b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062b6:	f7ff fff3 	bl	80062a0 <HAL_SD_DMA_RxCpltCallback>
 80062ba:	bd10      	pop	{r4, pc}

080062bc <HAL_SD_DMA_RxErrorCallback>:
 80062bc:	4770      	bx	lr

080062be <SD_DMA_RxError>:
{
 80062be:	b508      	push	{r3, lr}
  HAL_SD_DMA_RxErrorCallback(hsd->hdmarx);
 80062c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80062c2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80062c4:	f7ff fffa 	bl	80062bc <HAL_SD_DMA_RxErrorCallback>
 80062c8:	bd08      	pop	{r3, pc}

080062ca <HAL_SD_DMA_TxCpltCallback>:
 80062ca:	4770      	bx	lr

080062cc <SD_DMA_TxCplt>:
{
 80062cc:	b510      	push	{r4, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80062ce:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hsd->DmaTransferCplt = 1;
 80062d0:	2301      	movs	r3, #1
 80062d2:	6523      	str	r3, [r4, #80]	; 0x50
  while(hsd->SdTransferCplt == 0)
 80062d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0fc      	beq.n	80062d4 <SD_DMA_TxCplt+0x8>
  HAL_DMA_Abort(hdma);
 80062da:	f7fe fbd1 	bl	8004a80 <HAL_DMA_Abort>
  HAL_SD_DMA_TxCpltCallback(hsd->hdmatx);  
 80062de:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80062e0:	f7ff fff3 	bl	80062ca <HAL_SD_DMA_TxCpltCallback>
 80062e4:	bd10      	pop	{r4, pc}

080062e6 <HAL_SD_DMA_TxErrorCallback>:
{
 80062e6:	4770      	bx	lr

080062e8 <SD_DMA_TxError>:
{
 80062e8:	b508      	push	{r3, lr}
  HAL_SD_DMA_TxErrorCallback(hsd->hdmatx);
 80062ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80062ec:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80062ee:	f7ff fffa 	bl	80062e6 <HAL_SD_DMA_TxErrorCallback>
 80062f2:	bd08      	pop	{r3, pc}

080062f4 <HAL_SD_Get_CardInfo>:
{
 80062f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 80062f8:	6a05      	ldr	r5, [r0, #32]
 80062fa:	f881 5056 	strb.w	r5, [r1, #86]	; 0x56
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
 80062fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006300:	f8a1 3054 	strh.w	r3, [r1, #84]	; 0x54
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
 8006304:	6a83      	ldr	r3, [r0, #40]	; 0x28
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8006306:	0f9a      	lsrs	r2, r3, #30
 8006308:	700a      	strb	r2, [r1, #0]
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800630a:	f3c3 6283 	ubfx	r2, r3, #26, #4
 800630e:	704a      	strb	r2, [r1, #1]
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03;
 8006310:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8006314:	708a      	strb	r2, [r1, #2]
  pCardInfo->SD_csd.TAAC = (uint8_t)tmp;
 8006316:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800631a:	70ca      	strb	r2, [r1, #3]
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 800631c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8006320:	b2db      	uxtb	r3, r3
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 8006322:	710a      	strb	r2, [r1, #4]
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8006324:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
 8006326:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006328:	0e13      	lsrs	r3, r2, #24
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800632e:	88cb      	ldrh	r3, [r1, #6]
{
 8006330:	4604      	mov	r4, r0
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8006332:	b29b      	uxth	r3, r3
 8006334:	f3c2 5003 	ubfx	r0, r2, #20, #4
 8006338:	4303      	orrs	r3, r0
 800633a:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0F);
 800633c:	f3c2 4303 	ubfx	r3, r2, #16, #4
 8006340:	720b      	strb	r3, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00) >> 8;
 8006342:	f3c2 2307 	ubfx	r3, r2, #8, #8
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8006346:	09d8      	lsrs	r0, r3, #7
 8006348:	7248      	strb	r0, [r1, #9]
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800634a:	f3c3 1080 	ubfx	r0, r3, #6, #1
 800634e:	7288      	strb	r0, [r1, #10]
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8006350:	f3c3 1040 	ubfx	r0, r3, #5, #1
 8006354:	72c8      	strb	r0, [r1, #11]
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8006356:	f3c3 1000 	ubfx	r0, r3, #4, #1
 800635a:	7308      	strb	r0, [r1, #12]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 800635c:	2d01      	cmp	r5, #1
  pCardInfo->SD_csd.Reserved2       = 0; /*!< Reserved */
 800635e:	f04f 0000 	mov.w	r0, #0
 8006362:	7348      	strb	r0, [r1, #13]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 8006364:	f200 80dc 	bhi.w	8006520 <HAL_SD_Get_CardInfo+0x22c>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 8006368:	029b      	lsls	r3, r3, #10
 800636a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800636e:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 8006370:	690b      	ldr	r3, [r1, #16]
 8006372:	0092      	lsls	r2, r2, #2
 8006374:	f402 727f 	and.w	r2, r2, #1020	; 0x3fc
 8006378:	431a      	orrs	r2, r3
 800637a:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 800637c:	690b      	ldr	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 800637e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8006380:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8006384:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8006386:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800638a:	750b      	strb	r3, [r1, #20]
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 800638c:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8006390:	754b      	strb	r3, [r1, #21]
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8006392:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8006396:	758b      	strb	r3, [r1, #22]
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8006398:	f3c2 4382 	ubfx	r3, r2, #18, #3
 800639c:	75cb      	strb	r3, [r1, #23]
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
 800639e:	0bd3      	lsrs	r3, r2, #15
 80063a0:	f003 0306 	and.w	r3, r3, #6
 80063a4:	760b      	strb	r3, [r1, #24]
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 80063a6:	7e0d      	ldrb	r5, [r1, #24]
 80063a8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80063ac:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80063b0:	432a      	orrs	r2, r5
 80063b2:	760a      	strb	r2, [r1, #24]
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 80063b4:	690d      	ldr	r5, [r1, #16]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80063b6:	7e0f      	ldrb	r7, [r1, #24]
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 80063b8:	7a0a      	ldrb	r2, [r1, #8]
 80063ba:	2601      	movs	r6, #1
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80063bc:	3702      	adds	r7, #2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 80063be:	fa06 f202 	lsl.w	r2, r6, r2
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80063c2:	40be      	lsls	r6, r7
 80063c4:	ea4f 79e6 	mov.w	r9, r6, asr #31
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 80063c8:	fba6 6702 	umull	r6, r7, r6, r2
 80063cc:	fb02 7709 	mla	r7, r2, r9, r7
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 80063d0:	650a      	str	r2, [r1, #80]	; 0x50
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 80063d2:	1c6a      	adds	r2, r5, #1
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 80063d4:	fba6 8902 	umull	r8, r9, r6, r2
 80063d8:	fb02 9907 	mla	r9, r2, r7, r9
 80063dc:	e9c1 8912 	strd	r8, r9, [r1, #72]	; 0x48
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 80063e0:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 80063ea:	764a      	strb	r2, [r1, #25]
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 80063ec:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 80063ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 80063f0:	7e8a      	ldrb	r2, [r1, #26]
 80063f2:	f3c3 15c0 	ubfx	r5, r3, #7, #1
 80063f6:	432a      	orrs	r2, r5
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 80063f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 80063fc:	768a      	strb	r2, [r1, #26]
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 80063fe:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000) >> 24);
 8006400:	6b63      	ldr	r3, [r4, #52]	; 0x34
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 8006402:	0fda      	lsrs	r2, r3, #31
 8006404:	770a      	strb	r2, [r1, #28]
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60) >> 5;
 8006406:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800640a:	774a      	strb	r2, [r1, #29]
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1C) >> 2;
 800640c:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8006410:	778a      	strb	r2, [r1, #30]
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03) << 2;
 8006412:	0d9a      	lsrs	r2, r3, #22
 8006414:	f002 020c 	and.w	r2, r2, #12
 8006418:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800641a:	7fca      	ldrb	r2, [r1, #31]
 800641c:	f3c3 5581 	ubfx	r5, r3, #22, #2
 8006420:	432a      	orrs	r2, r5
 8006422:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8006424:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8006428:	f881 2020 	strb.w	r2, [r1, #32]
  pCardInfo->SD_csd.Reserved3           = 0;
 800642c:	2200      	movs	r2, #0
 800642e:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 8006432:	f3c3 4200 	ubfx	r2, r3, #16, #1
 8006436:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 800643a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800643e:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40) >> 6;
 8006442:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8006446:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20) >> 5;
 800644a:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800644e:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10) >> 4;
 8006452:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8006456:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
 800645a:	f3c3 2281 	ubfx	r2, r3, #10, #2
 800645e:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCardInfo->SD_csd.Reserved4 = 1;
 8006462:	2501      	movs	r5, #1
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 8006464:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 8006468:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 800646c:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 8006470:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCardInfo->SD_csd.Reserved4 = 1;
 8006474:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
  tmp = (uint8_t)((hsd->CID[0] & 0xFF000000) >> 24);
 8006478:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800647a:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ManufacturerID = tmp;
 800647c:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
 8006480:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006484:	0212      	lsls	r2, r2, #8
 8006486:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 8006488:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 800648a:	f3c3 2607 	ubfx	r6, r3, #8, #8
 800648e:	b292      	uxth	r2, r2
 8006490:	4332      	orrs	r2, r6
 8006492:	061b      	lsls	r3, r3, #24
 8006494:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
 8006496:	630b      	str	r3, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 8006498:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 800649a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 800649c:	0e1e      	lsrs	r6, r3, #24
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 800649e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80064a2:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
 80064a4:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 80064a6:	0a1a      	lsrs	r2, r3, #8
 80064a8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80064ac:	4332      	orrs	r2, r6
 80064ae:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp;
 80064b0:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 80064b2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80064b6:	4332      	orrs	r2, r6
  tmp = (uint8_t)(hsd->CID[1] & 0x000000FF);
 80064b8:	b2db      	uxtb	r3, r3
  pCardInfo->SD_cid.ProdName1 |= tmp;
 80064ba:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName2 = tmp;
 80064bc:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
  tmp = (uint8_t)((hsd->CID[2] & 0xFF000000) >> 24);
 80064c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064c2:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ProdRev = tmp;
 80064c4:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
  tmp = (uint8_t)((hsd->CID[2] & 0x00FF0000) >> 16);
 80064c8:	0c1a      	lsrs	r2, r3, #16
 80064ca:	0612      	lsls	r2, r2, #24
  pCardInfo->SD_cid.ProdSN = tmp << 24;
 80064cc:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 80064ce:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 80064d0:	021a      	lsls	r2, r3, #8
 80064d2:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80064d6:	4332      	orrs	r2, r6
 80064d8:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 80064da:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80064dc:	021b      	lsls	r3, r3, #8
 80064de:	b29b      	uxth	r3, r3
 80064e0:	4313      	orrs	r3, r2
 80064e2:	638b      	str	r3, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp;
 80064e4:	6b8a      	ldr	r2, [r1, #56]	; 0x38
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
 80064e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCardInfo->SD_cid.ProdSN |= tmp;
 80064e8:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 80064ec:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 80064ee:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 80064f2:	f3c3 5403 	ubfx	r4, r3, #20, #4
 80064f6:	4322      	orrs	r2, r4
 80064f8:	f881 203c 	strb.w	r2, [r1, #60]	; 0x3c
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 80064fc:	0a1a      	lsrs	r2, r3, #8
 80064fe:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8006502:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8006504:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8006506:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800650a:	b292      	uxth	r2, r2
 800650c:	4322      	orrs	r2, r4
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 800650e:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8006512:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 8006514:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
  pCardInfo->SD_cid.Reserved2 = 1;
 8006518:	f881 5041 	strb.w	r5, [r1, #65]	; 0x41
}
 800651c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006520:	2d02      	cmp	r5, #2
 8006522:	d11f      	bne.n	8006564 <HAL_SD_Get_CardInfo+0x270>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 8006524:	0412      	lsls	r2, r2, #16
 8006526:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 800652a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 800652c:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 800652e:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 8006530:	0e1d      	lsrs	r5, r3, #24
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 8006532:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006536:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 8006538:	690d      	ldr	r5, [r1, #16]
 800653a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800653e:	432a      	orrs	r2, r5
 8006540:	610a      	str	r2, [r1, #16]
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 8006542:	690e      	ldr	r6, [r1, #16]
 8006544:	2700      	movs	r7, #0
 8006546:	3601      	adds	r6, #1
 8006548:	f147 0700 	adc.w	r7, r7, #0
 800654c:	04fa      	lsls	r2, r7, #19
 800654e:	ea42 3256 	orr.w	r2, r2, r6, lsr #13
 8006552:	64ca      	str	r2, [r1, #76]	; 0x4c
 8006554:	04f6      	lsls	r6, r6, #19
    pCardInfo->CardBlockSize = 512;    
 8006556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800655a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 800655e:	648e      	str	r6, [r1, #72]	; 0x48
    pCardInfo->CardBlockSize = 512;    
 8006560:	650a      	str	r2, [r1, #80]	; 0x50
 8006562:	e73d      	b.n	80063e0 <HAL_SD_Get_CardInfo+0xec>
    errorstate = SD_ERROR;
 8006564:	2029      	movs	r0, #41	; 0x29
 8006566:	e73b      	b.n	80063e0 <HAL_SD_Get_CardInfo+0xec>

08006568 <HAL_SD_Init>:
{ 
 8006568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656c:	b091      	sub	sp, #68	; 0x44
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 800656e:	2500      	movs	r5, #0
{ 
 8006570:	4604      	mov	r4, r0
 8006572:	460e      	mov	r6, r1
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 8006574:	f88d 5012 	strb.w	r5, [sp, #18]
  HAL_SD_MspInit(hsd);
 8006578:	f7fd f870 	bl	800365c <HAL_SD_MspInit>
  tmpinit.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800657c:	2376      	movs	r3, #118	; 0x76
 800657e:	930f      	str	r3, [sp, #60]	; 0x3c
  tmpinit.BusWide             = SDMMC_BUS_WIDE_1B;
 8006580:	950d      	str	r5, [sp, #52]	; 0x34
  tmpinit.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006582:	950e      	str	r5, [sp, #56]	; 0x38
  SDMMC_Init(hsd->Instance, tmpinit);
 8006584:	ab10      	add	r3, sp, #64	; 0x40
 8006586:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800658a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  tmpinit.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800658e:	950a      	str	r5, [sp, #40]	; 0x28
  tmpinit.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006590:	950b      	str	r5, [sp, #44]	; 0x2c
  tmpinit.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006592:	950c      	str	r5, [sp, #48]	; 0x30
  SDMMC_Init(hsd->Instance, tmpinit);
 8006594:	ab0a      	add	r3, sp, #40	; 0x28
 8006596:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006598:	6820      	ldr	r0, [r4, #0]
 800659a:	f001 f9eb 	bl	8007974 <SDMMC_Init>
  __HAL_SD_SDMMC_DISABLE(hsd); 
 800659e:	6820      	ldr	r0, [r4, #0]
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
 80065a0:	f88d 5013 	strb.w	r5, [sp, #19]
  __HAL_SD_SDMMC_DISABLE(hsd); 
 80065a4:	6843      	ldr	r3, [r0, #4]
 80065a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065aa:	6043      	str	r3, [r0, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 80065ac:	f001 fa01 	bl	80079b2 <SDMMC_PowerState_ON>
  HAL_Delay(1);
 80065b0:	2001      	movs	r0, #1
 80065b2:	f7fe f8ed 	bl	8004790 <HAL_Delay>
  __HAL_SD_SDMMC_ENABLE(hsd);
 80065b6:	6820      	ldr	r0, [r4, #0]
 80065b8:	6843      	ldr	r3, [r0, #4]
 80065ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065be:	6043      	str	r3, [r0, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80065c0:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80065c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065c6:	9309      	str	r3, [sp, #36]	; 0x24
  sdmmc_cmdinitstructure.Argument         = 0;
 80065c8:	9505      	str	r5, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
 80065ca:	9506      	str	r5, [sp, #24]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_NO;
 80065cc:	9507      	str	r5, [sp, #28]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80065ce:	9508      	str	r5, [sp, #32]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80065d0:	f001 f9f7 	bl	80079c2 <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 80065d4:	6820      	ldr	r0, [r4, #0]
 80065d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80065d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80065dc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 80065e0:	b123      	cbz	r3, 80065ec <HAL_SD_Init+0x84>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065e2:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80065e6:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 80065e8:	2300      	movs	r3, #0
 80065ea:	e005      	b.n	80065f8 <HAL_SD_Init+0x90>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 80065ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while((timeout > 0) && (!tmp))
 80065ee:	3a01      	subs	r2, #1
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 80065f0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 80065f4:	d1f4      	bne.n	80065e0 <HAL_SD_Init+0x78>
    return errorstate;
 80065f6:	2303      	movs	r3, #3
  errorstate = SD_CmdError(hsd);
 80065f8:	f88d 3013 	strb.w	r3, [sp, #19]
  if(errorstate != SD_OK)
 80065fc:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006600:	b18b      	cbz	r3, 8006626 <HAL_SD_Init+0xbe>
  return errorstate;
 8006602:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006606:	b2db      	uxtb	r3, r3
  errorstate = SD_PowerON(hsd); 
 8006608:	f88d 3012 	strb.w	r3, [sp, #18]
  if(errorstate != SD_OK)     
 800660c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006610:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 80b1 	beq.w	800677c <HAL_SD_Init+0x214>
  return errorstate;
 800661a:	f89d 0012 	ldrb.w	r0, [sp, #18]
 800661e:	b2c0      	uxtb	r0, r0
}
 8006620:	b011      	add	sp, #68	; 0x44
 8006622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sdmmc_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
 8006626:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800662a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_SDMMC_SEND_IF_COND;
 800662c:	2308      	movs	r3, #8
 800662e:	9306      	str	r3, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006630:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006632:	2340      	movs	r3, #64	; 0x40
 8006634:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006636:	f001 f9c4 	bl	80079c2 <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT); 
 800663a:	6820      	ldr	r0, [r4, #0]
 800663c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800663e:	f013 0f45 	tst.w	r3, #69	; 0x45
 8006642:	bf14      	ite	ne
 8006644:	2301      	movne	r3, #1
 8006646:	2300      	moveq	r3, #0
  uint32_t timeout = SDMMC_CMD0TIMEOUT, tmp;
 8006648:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  while((!tmp) && (timeout > 0))
 800664c:	b90b      	cbnz	r3, 8006652 <HAL_SD_Init+0xea>
 800664e:	2a00      	cmp	r2, #0
 8006650:	d17c      	bne.n	800674c <HAL_SD_Init+0x1e4>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT); 
 8006652:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if((timeout == 0) || tmp)
 8006654:	b112      	cbz	r2, 800665c <HAL_SD_Init+0xf4>
 8006656:	f013 0304 	ands.w	r3, r3, #4
 800665a:	d07f      	beq.n	800675c <HAL_SD_Init+0x1f4>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 800665c:	2304      	movs	r3, #4
 800665e:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8006660:	2303      	movs	r3, #3
  errorstate = SD_CmdResp7Error(hsd);
 8006662:	f88d 3013 	strb.w	r3, [sp, #19]
  if (errorstate == SD_OK)
 8006666:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800666a:	2300      	movs	r3, #0
 800666c:	2a00      	cmp	r2, #0
 800666e:	d17c      	bne.n	800676a <HAL_SD_Init+0x202>
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 8006670:	2201      	movs	r2, #1
 8006672:	6222      	str	r2, [r4, #32]
    sdtype        = SD_HIGH_CAPACITY;
 8006674:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006678:	2537      	movs	r5, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800667a:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Argument         = 0;
 800667c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800667e:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006680:	f001 f99f 	bl	80079c2 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8006684:	4629      	mov	r1, r5
 8006686:	4620      	mov	r0, r4
 8006688:	f7ff fbec 	bl	8005e64 <SD_CmdResp1Error>
 800668c:	f88d 0013 	strb.w	r0, [sp, #19]
  if(errorstate == SD_OK)
 8006690:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006694:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1b2      	bne.n	8006602 <HAL_SD_Init+0x9a>
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 800669c:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
      sdmmc_cmdinitstructure.Argument         = 0;
 80066a0:	46a8      	mov	r8, r5
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 80066a2:	f447 1780 	orr.w	r7, r7, #1048576	; 0x100000
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80066a6:	f04f 0b37 	mov.w	fp, #55	; 0x37
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80066aa:	a905      	add	r1, sp, #20
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80066ac:	f04f 0a40 	mov.w	sl, #64	; 0x40
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80066b0:	f44f 6980 	mov.w	r9, #1024	; 0x400
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80066b4:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = 0;
 80066b6:	f8cd 8014 	str.w	r8, [sp, #20]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80066ba:	f8cd b018 	str.w	fp, [sp, #24]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80066be:	f8cd a01c 	str.w	sl, [sp, #28]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80066c2:	f8cd 8020 	str.w	r8, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80066c6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80066ca:	f001 f97a 	bl	80079c2 <SDMMC_SendCommand>
      errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80066ce:	4659      	mov	r1, fp
 80066d0:	4620      	mov	r0, r4
 80066d2:	f7ff fbc7 	bl	8005e64 <SD_CmdResp1Error>
 80066d6:	f88d 0013 	strb.w	r0, [sp, #19]
      if(errorstate != SD_OK)
 80066da:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80066de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d18d      	bne.n	8006602 <HAL_SD_Init+0x9a>
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 80066e6:	2329      	movs	r3, #41	; 0x29
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80066e8:	a905      	add	r1, sp, #20
 80066ea:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 80066ec:	9705      	str	r7, [sp, #20]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 80066ee:	9306      	str	r3, [sp, #24]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80066f0:	f8cd a01c 	str.w	sl, [sp, #28]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80066f4:	9208      	str	r2, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80066f6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80066fa:	f001 f962 	bl	80079c2 <SDMMC_SendCommand>
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 80066fe:	6820      	ldr	r0, [r4, #0]
 8006700:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006702:	f013 0f45 	tst.w	r3, #69	; 0x45
 8006706:	d0fb      	beq.n	8006700 <HAL_SD_Init+0x198>
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8006708:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800670a:	f013 0304 	ands.w	r3, r3, #4
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 800670e:	bf1b      	ittet	ne
 8006710:	2304      	movne	r3, #4
 8006712:	6383      	strne	r3, [r0, #56]	; 0x38
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006714:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    return errorstate;
 8006718:	2303      	movne	r3, #3
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800671a:	bf08      	it	eq
 800671c:	6382      	streq	r2, [r0, #56]	; 0x38
      errorstate = SD_CmdResp3Error(hsd);
 800671e:	f88d 3013 	strb.w	r3, [sp, #19]
      if(errorstate != SD_OK)
 8006722:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006726:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800672a:	2b00      	cmp	r3, #0
 800672c:	f47f af69 	bne.w	8006602 <HAL_SD_Init+0x9a>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006730:	f001 f95c 	bl	80079ec <SDMMC_GetResponse>
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8006734:	2800      	cmp	r0, #0
      count++;
 8006736:	f105 0501 	add.w	r5, r5, #1
 800673a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 800673e:	db16      	blt.n	800676e <HAL_SD_Init+0x206>
 8006740:	429d      	cmp	r5, r3
 8006742:	d1b0      	bne.n	80066a6 <HAL_SD_Init+0x13e>
      errorstate = SD_INVALID_VOLTRANGE;
 8006744:	231b      	movs	r3, #27
 8006746:	f88d 3013 	strb.w	r3, [sp, #19]
 800674a:	e75a      	b.n	8006602 <HAL_SD_Init+0x9a>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT);
 800674c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800674e:	f013 0f45 	tst.w	r3, #69	; 0x45
 8006752:	bf14      	ite	ne
 8006754:	2301      	movne	r3, #1
 8006756:	2300      	moveq	r3, #0
    timeout--;
 8006758:	3a01      	subs	r2, #1
 800675a:	e777      	b.n	800664c <HAL_SD_Init+0xe4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDREND))
 800675c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800675e:	0652      	lsls	r2, r2, #25
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CMDREND);
 8006760:	bf46      	itte	mi
 8006762:	2240      	movmi	r2, #64	; 0x40
 8006764:	6382      	strmi	r2, [r0, #56]	; 0x38
  return errorstate;
 8006766:	2329      	movpl	r3, #41	; 0x29
 8006768:	e77b      	b.n	8006662 <HAL_SD_Init+0xfa>
  uint32_t sdtype = SD_STD_CAPACITY;
 800676a:	461f      	mov	r7, r3
 800676c:	e784      	b.n	8006678 <HAL_SD_Init+0x110>
    if(count >= SD_MAX_VOLT_TRIAL)
 800676e:	429d      	cmp	r5, r3
 8006770:	d0e8      	beq.n	8006744 <HAL_SD_Init+0x1dc>
    if((response & SD_HIGH_CAPACITY) == SD_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006772:	0047      	lsls	r7, r0, #1
      hsd->CardType = HIGH_CAPACITY_SD_CARD;
 8006774:	bf44      	itt	mi
 8006776:	2302      	movmi	r3, #2
 8006778:	6223      	strmi	r3, [r4, #32]
 800677a:	e742      	b.n	8006602 <HAL_SD_Init+0x9a>
  if(SDMMC_GetPowerState(hsd->Instance) == 0) /* Power off */
 800677c:	6820      	ldr	r0, [r4, #0]
 800677e:	f001 f91c 	bl	80079ba <SDMMC_GetPowerState>
 8006782:	2800      	cmp	r0, #0
 8006784:	f000 80c2 	beq.w	800690c <HAL_SD_Init+0x3a4>
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8006788:	6a23      	ldr	r3, [r4, #32]
 800678a:	2b04      	cmp	r3, #4
 800678c:	d026      	beq.n	80067dc <HAL_SD_Init+0x274>
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
 800678e:	2302      	movs	r3, #2
 8006790:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8006792:	23c0      	movs	r3, #192	; 0xc0
 8006794:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006796:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006798:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800679c:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Argument         = 0;
 800679e:	9505      	str	r5, [sp, #20]
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80067a0:	9508      	str	r5, [sp, #32]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80067a2:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80067a4:	f001 f90d 	bl	80079c2 <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 80067a8:	4620      	mov	r0, r4
 80067aa:	f7ff fb45 	bl	8005e38 <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 80067ae:	4605      	mov	r5, r0
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d155      	bne.n	8006860 <HAL_SD_Init+0x2f8>
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80067b4:	4601      	mov	r1, r0
 80067b6:	6820      	ldr	r0, [r4, #0]
 80067b8:	f001 f918 	bl	80079ec <SDMMC_GetResponse>
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80067bc:	2104      	movs	r1, #4
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80067be:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80067c0:	6820      	ldr	r0, [r4, #0]
 80067c2:	f001 f913 	bl	80079ec <SDMMC_GetResponse>
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80067c6:	2108      	movs	r1, #8
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80067c8:	63e0      	str	r0, [r4, #60]	; 0x3c
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80067ca:	6820      	ldr	r0, [r4, #0]
 80067cc:	f001 f90e 	bl	80079ec <SDMMC_GetResponse>
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80067d0:	210c      	movs	r1, #12
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80067d2:	6420      	str	r0, [r4, #64]	; 0x40
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80067d4:	6820      	ldr	r0, [r4, #0]
 80067d6:	f001 f909 	bl	80079ec <SDMMC_GetResponse>
 80067da:	6460      	str	r0, [r4, #68]	; 0x44
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80067dc:	6a23      	ldr	r3, [r4, #32]
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d92b      	bls.n	800683a <HAL_SD_Init+0x2d2>
 80067e2:	2b06      	cmp	r3, #6
 80067e4:	d029      	beq.n	800683a <HAL_SD_Init+0x2d2>
  uint16_t sd_rca = 1;
 80067e6:	2001      	movs	r0, #1
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 80067e8:	6a23      	ldr	r3, [r4, #32]
 80067ea:	2b04      	cmp	r3, #4
 80067ec:	f000 8092 	beq.w	8006914 <HAL_SD_Init+0x3ac>
    hsd->RCA = sd_rca;
 80067f0:	6260      	str	r0, [r4, #36]	; 0x24
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 80067f2:	2309      	movs	r3, #9
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80067f4:	0400      	lsls	r0, r0, #16
 80067f6:	9005      	str	r0, [sp, #20]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 80067f8:	9306      	str	r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80067fa:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 80067fc:	23c0      	movs	r3, #192	; 0xc0
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80067fe:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8006800:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006802:	f001 f8de 	bl	80079c2 <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 8006806:	4620      	mov	r0, r4
 8006808:	f7ff fb16 	bl	8005e38 <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 800680c:	4605      	mov	r5, r0
 800680e:	bb38      	cbnz	r0, 8006860 <HAL_SD_Init+0x2f8>
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006810:	4601      	mov	r1, r0
 8006812:	6820      	ldr	r0, [r4, #0]
 8006814:	f001 f8ea 	bl	80079ec <SDMMC_GetResponse>
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006818:	2104      	movs	r1, #4
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800681a:	62a0      	str	r0, [r4, #40]	; 0x28
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800681c:	6820      	ldr	r0, [r4, #0]
 800681e:	f001 f8e5 	bl	80079ec <SDMMC_GetResponse>
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006822:	2108      	movs	r1, #8
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006824:	62e0      	str	r0, [r4, #44]	; 0x2c
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006826:	6820      	ldr	r0, [r4, #0]
 8006828:	f001 f8e0 	bl	80079ec <SDMMC_GetResponse>
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800682c:	210c      	movs	r1, #12
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800682e:	6320      	str	r0, [r4, #48]	; 0x30
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006830:	6820      	ldr	r0, [r4, #0]
 8006832:	f001 f8db 	bl	80079ec <SDMMC_GetResponse>
 8006836:	6360      	str	r0, [r4, #52]	; 0x34
 8006838:	e012      	b.n	8006860 <HAL_SD_Init+0x2f8>
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
 800683a:	2303      	movs	r3, #3
 800683c:	9306      	str	r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800683e:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006840:	2340      	movs	r3, #64	; 0x40
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006842:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006844:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006846:	f001 f8bc 	bl	80079c2 <SDMMC_SendCommand>
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 800684a:	6820      	ldr	r0, [r4, #0]
 800684c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800684e:	f013 0f45 	tst.w	r3, #69	; 0x45
 8006852:	d0fb      	beq.n	800684c <HAL_SD_Init+0x2e4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8006854:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006856:	075d      	lsls	r5, r3, #29
 8006858:	d536      	bpl.n	80068c8 <HAL_SD_Init+0x360>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 800685a:	2304      	movs	r3, #4
 800685c:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 800685e:	2503      	movs	r5, #3
  errorstate = SD_Initialize_Cards(hsd);
 8006860:	f88d 5012 	strb.w	r5, [sp, #18]
  if (errorstate != SD_OK)
 8006864:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006868:	2b00      	cmp	r3, #0
 800686a:	f47f aed6 	bne.w	800661a <HAL_SD_Init+0xb2>
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
 800686e:	4631      	mov	r1, r6
 8006870:	4620      	mov	r0, r4
 8006872:	f7ff fd3f 	bl	80062f4 <HAL_SD_Get_CardInfo>
 8006876:	f88d 0012 	strb.w	r0, [sp, #18]
  if (errorstate == SD_OK)
 800687a:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800687e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006882:	b9ab      	cbnz	r3, 80068b0 <HAL_SD_Init+0x348>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8006884:	f8b6 3054 	ldrh.w	r3, [r6, #84]	; 0x54
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006888:	6820      	ldr	r0, [r4, #0]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800688a:	9208      	str	r2, [sp, #32]
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 800688c:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.Argument         = (uint32_t)addr;
 800688e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006890:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 8006892:	2507      	movs	r5, #7
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006894:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006896:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800689c:	9309      	str	r3, [sp, #36]	; 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 800689e:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80068a0:	f001 f88f 	bl	80079c2 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEL_DESEL_CARD);
 80068a4:	4629      	mov	r1, r5
 80068a6:	4620      	mov	r0, r4
 80068a8:	f7ff fadc 	bl	8005e64 <SD_CmdResp1Error>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 80068ac:	f88d 0012 	strb.w	r0, [sp, #18]
  SDMMC_Init(hsd->Instance, hsd->Init);   
 80068b0:	f104 0310 	add.w	r3, r4, #16
 80068b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80068b8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80068bc:	1d23      	adds	r3, r4, #4
 80068be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068c0:	6820      	ldr	r0, [r4, #0]
 80068c2:	f001 f857 	bl	8007974 <SDMMC_Init>
 80068c6:	e6a8      	b.n	800661a <HAL_SD_Init+0xb2>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 80068c8:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80068ca:	f015 0501 	ands.w	r5, r5, #1
 80068ce:	d002      	beq.n	80068d6 <HAL_SD_Init+0x36e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 80068d0:	2501      	movs	r5, #1
 80068d2:	6385      	str	r5, [r0, #56]	; 0x38
 80068d4:	e7c4      	b.n	8006860 <HAL_SD_Init+0x2f8>
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 80068d6:	f001 f886 	bl	80079e6 <SDMMC_GetCommandResponse>
 80068da:	2803      	cmp	r0, #3
 80068dc:	d001      	beq.n	80068e2 <HAL_SD_Init+0x37a>
    return errorstate;
 80068de:	2510      	movs	r5, #16
 80068e0:	e7be      	b.n	8006860 <HAL_SD_Init+0x2f8>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068e2:	6820      	ldr	r0, [r4, #0]
 80068e4:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80068e8:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80068ea:	4629      	mov	r1, r5
 80068ec:	f001 f87e 	bl	80079ec <SDMMC_GetResponse>
  if((response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)) == SD_ALLZERO)
 80068f0:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 80068f4:	d101      	bne.n	80068fa <HAL_SD_Init+0x392>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80068f6:	0c00      	lsrs	r0, r0, #16
 80068f8:	e776      	b.n	80067e8 <HAL_SD_Init+0x280>
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
 80068fa:	0481      	lsls	r1, r0, #18
 80068fc:	d408      	bmi.n	8006910 <HAL_SD_Init+0x3a8>
  if((response_r1 & SD_R6_ILLEGAL_CMD) == SD_R6_ILLEGAL_CMD)
 80068fe:	0442      	lsls	r2, r0, #17
 8006900:	d4ed      	bmi.n	80068de <HAL_SD_Init+0x376>
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
 8006902:	0403      	lsls	r3, r0, #16
 8006904:	f57f af6f 	bpl.w	80067e6 <HAL_SD_Init+0x27e>
    return(SD_COM_CRC_FAILED);
 8006908:	250f      	movs	r5, #15
 800690a:	e7a9      	b.n	8006860 <HAL_SD_Init+0x2f8>
    return errorstate;
 800690c:	2525      	movs	r5, #37	; 0x25
 800690e:	e7a7      	b.n	8006860 <HAL_SD_Init+0x2f8>
    return(SD_GENERAL_UNKNOWN_ERROR);
 8006910:	2513      	movs	r5, #19
 8006912:	e7a5      	b.n	8006860 <HAL_SD_Init+0x2f8>
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8006914:	2500      	movs	r5, #0
 8006916:	e7a3      	b.n	8006860 <HAL_SD_Init+0x2f8>

08006918 <HAL_SD_WideBusOperation_Config>:
{
 8006918:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hsd->CardType == MULTIMEDIA_CARD)
 800691a:	6a03      	ldr	r3, [r0, #32]
 800691c:	2b03      	cmp	r3, #3
{
 800691e:	b08d      	sub	sp, #52	; 0x34
 8006920:	4605      	mov	r5, r0
 8006922:	460e      	mov	r6, r1
  if (hsd->CardType == MULTIMEDIA_CARD)
 8006924:	f000 8088 	beq.w	8006a38 <HAL_SD_WideBusOperation_Config+0x120>
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8006928:	2b02      	cmp	r3, #2
 800692a:	f200 8083 	bhi.w	8006a34 <HAL_SD_WideBusOperation_Config+0x11c>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800692e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8006932:	f000 8081 	beq.w	8006a38 <HAL_SD_WideBusOperation_Config+0x120>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006936:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800693a:	d14c      	bne.n	80069d6 <HAL_SD_WideBusOperation_Config+0xbe>
  uint32_t scr[2] = {0, 0};
 800693c:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 800693e:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8006940:	9104      	str	r1, [sp, #16]
 8006942:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8006944:	f001 f852 	bl	80079ec <SDMMC_GetResponse>
 8006948:	0180      	lsls	r0, r0, #6
 800694a:	d46d      	bmi.n	8006a28 <HAL_SD_WideBusOperation_Config+0x110>
  errorstate = SD_FindSCR(hsd, scr);
 800694c:	a904      	add	r1, sp, #16
 800694e:	4628      	mov	r0, r5
 8006950:	f7ff fafe 	bl	8005f50 <SD_FindSCR>
  if(errorstate != SD_OK)
 8006954:	4604      	mov	r4, r0
 8006956:	2800      	cmp	r0, #0
 8006958:	d167      	bne.n	8006a2a <HAL_SD_WideBusOperation_Config+0x112>
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 800695a:	9b05      	ldr	r3, [sp, #20]
 800695c:	0359      	lsls	r1, r3, #13
 800695e:	d567      	bpl.n	8006a30 <HAL_SD_WideBusOperation_Config+0x118>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006960:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006962:	9009      	str	r0, [sp, #36]	; 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006964:	041b      	lsls	r3, r3, #16
 8006966:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006968:	2340      	movs	r3, #64	; 0x40
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800696a:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800696c:	9308      	str	r3, [sp, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800696e:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006970:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006974:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006976:	930a      	str	r3, [sp, #40]	; 0x28
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006978:	9707      	str	r7, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800697a:	f001 f822 	bl	80079c2 <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800697e:	4639      	mov	r1, r7
 8006980:	4628      	mov	r0, r5
 8006982:	f7ff fa6f 	bl	8005e64 <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 8006986:	4604      	mov	r4, r0
 8006988:	2800      	cmp	r0, #0
 800698a:	d14e      	bne.n	8006a2a <HAL_SD_WideBusOperation_Config+0x112>
    sdmmc_cmdinitstructure.Argument         = 2;
 800698c:	2302      	movs	r3, #2
 800698e:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8006990:	2406      	movs	r4, #6
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006992:	a906      	add	r1, sp, #24
 8006994:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8006996:	9407      	str	r4, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006998:	f001 f813 	bl	80079c2 <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 800699c:	4621      	mov	r1, r4
 800699e:	4628      	mov	r0, r5
 80069a0:	f7ff fa60 	bl	8005e64 <SD_CmdResp1Error>
 80069a4:	4604      	mov	r4, r0
    if (errorstate == SD_OK)
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d13f      	bne.n	8006a2a <HAL_SD_WideBusOperation_Config+0x112>
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
 80069aa:	686b      	ldr	r3, [r5, #4]
 80069ac:	9306      	str	r3, [sp, #24]
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
 80069ae:	68ab      	ldr	r3, [r5, #8]
 80069b0:	9307      	str	r3, [sp, #28]
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80069b2:	68eb      	ldr	r3, [r5, #12]
 80069b4:	9308      	str	r3, [sp, #32]
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80069b6:	696b      	ldr	r3, [r5, #20]
 80069b8:	930a      	str	r3, [sp, #40]	; 0x28
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
 80069ba:	69ab      	ldr	r3, [r5, #24]
 80069bc:	930b      	str	r3, [sp, #44]	; 0x2c
      tmpinit.BusWide             = WideMode;
 80069be:	9609      	str	r6, [sp, #36]	; 0x24
      SDMMC_Init(hsd->Instance, tmpinit);
 80069c0:	ab0c      	add	r3, sp, #48	; 0x30
 80069c2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80069c6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80069ca:	ab06      	add	r3, sp, #24
 80069cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069ce:	6828      	ldr	r0, [r5, #0]
 80069d0:	f000 ffd0 	bl	8007974 <SDMMC_Init>
 80069d4:	e029      	b.n	8006a2a <HAL_SD_WideBusOperation_Config+0x112>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80069d6:	2900      	cmp	r1, #0
 80069d8:	d130      	bne.n	8006a3c <HAL_SD_WideBusOperation_Config+0x124>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 80069da:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 80069dc:	9104      	str	r1, [sp, #16]
 80069de:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 80069e0:	f001 f804 	bl	80079ec <SDMMC_GetResponse>
 80069e4:	0182      	lsls	r2, r0, #6
 80069e6:	d41f      	bmi.n	8006a28 <HAL_SD_WideBusOperation_Config+0x110>
  errorstate = SD_FindSCR(hsd, scr);
 80069e8:	a904      	add	r1, sp, #16
 80069ea:	4628      	mov	r0, r5
 80069ec:	f7ff fab0 	bl	8005f50 <SD_FindSCR>
  if(errorstate != SD_OK)
 80069f0:	4604      	mov	r4, r0
 80069f2:	b9d0      	cbnz	r0, 8006a2a <HAL_SD_WideBusOperation_Config+0x112>
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 80069f4:	9b05      	ldr	r3, [sp, #20]
 80069f6:	03db      	lsls	r3, r3, #15
 80069f8:	d51a      	bpl.n	8006a30 <HAL_SD_WideBusOperation_Config+0x118>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80069fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80069fc:	9009      	str	r0, [sp, #36]	; 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80069fe:	041b      	lsls	r3, r3, #16
 8006a00:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006a02:	2340      	movs	r3, #64	; 0x40
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006a04:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006a06:	9308      	str	r3, [sp, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006a08:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006a0e:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006a10:	930a      	str	r3, [sp, #40]	; 0x28
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006a12:	9707      	str	r7, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006a14:	f000 ffd5 	bl	80079c2 <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8006a18:	4639      	mov	r1, r7
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	f7ff fa22 	bl	8005e64 <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 8006a20:	4604      	mov	r4, r0
 8006a22:	b910      	cbnz	r0, 8006a2a <HAL_SD_WideBusOperation_Config+0x112>
    sdmmc_cmdinitstructure.Argument         = 0;
 8006a24:	9006      	str	r0, [sp, #24]
 8006a26:	e7b3      	b.n	8006990 <HAL_SD_WideBusOperation_Config+0x78>
    return errorstate;
 8006a28:	240e      	movs	r4, #14
}
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	b00d      	add	sp, #52	; 0x34
 8006a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return errorstate;
 8006a30:	2425      	movs	r4, #37	; 0x25
 8006a32:	e7fa      	b.n	8006a2a <HAL_SD_WideBusOperation_Config+0x112>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8006a34:	2400      	movs	r4, #0
 8006a36:	e7f8      	b.n	8006a2a <HAL_SD_WideBusOperation_Config+0x112>
    return errorstate;
 8006a38:	2427      	movs	r4, #39	; 0x27
 8006a3a:	e7f6      	b.n	8006a2a <HAL_SD_WideBusOperation_Config+0x112>
      errorstate = SD_INVALID_PARAMETER;
 8006a3c:	2426      	movs	r4, #38	; 0x26
 8006a3e:	e7f4      	b.n	8006a2a <HAL_SD_WideBusOperation_Config+0x112>

08006a40 <HAL_SD_StopTransfer>:
{
 8006a40:	b530      	push	{r4, r5, lr}
 8006a42:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Argument         = 0;
 8006a44:	2300      	movs	r3, #0
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006a46:	2240      	movs	r2, #64	; 0x40
{
 8006a48:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.Argument         = 0;
 8006a4a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8006a4c:	250c      	movs	r5, #12
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a4e:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006a50:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006a56:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006a58:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006a5a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8006a5c:	9502      	str	r5, [sp, #8]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006a5e:	f000 ffb0 	bl	80079c2 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_STOP_TRANSMISSION);
 8006a62:	4629      	mov	r1, r5
 8006a64:	4620      	mov	r0, r4
 8006a66:	f7ff f9fd 	bl	8005e64 <SD_CmdResp1Error>
}
 8006a6a:	b007      	add	sp, #28
 8006a6c:	bd30      	pop	{r4, r5, pc}

08006a6e <HAL_SD_CheckReadOperation>:
{
 8006a6e:	b538      	push	{r3, r4, r5, lr}
 8006a70:	4604      	mov	r4, r0
 8006a72:	460d      	mov	r5, r1
  tmp1 = hsd->DmaTransferCplt; 
 8006a74:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 8006a76:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8006a78:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  uint32_t timeout = Timeout;
 8006a7a:	462a      	mov	r2, r5
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8006a7c:	b2db      	uxtb	r3, r3
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8006a7e:	4208      	tst	r0, r1
 8006a80:	d100      	bne.n	8006a84 <HAL_SD_CheckReadOperation+0x16>
 8006a82:	b1b3      	cbz	r3, 8006ab2 <HAL_SD_CheckReadOperation+0x44>
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXACT)) && (timeout > 0))
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a88:	0492      	lsls	r2, r2, #18
 8006a8a:	d500      	bpl.n	8006a8e <HAL_SD_CheckReadOperation+0x20>
 8006a8c:	b9cd      	cbnz	r5, 8006ac2 <HAL_SD_CheckReadOperation+0x54>
  if (hsd->SdOperation == SD_READ_MULTIPLE_BLOCK)
 8006a8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d118      	bne.n	8006ac6 <HAL_SD_CheckReadOperation+0x58>
    errorstate = HAL_SD_StopTransfer(hsd);
 8006a94:	4620      	mov	r0, r4
 8006a96:	f7ff ffd3 	bl	8006a40 <HAL_SD_StopTransfer>
  if ((timeout == 0) && (errorstate == SD_OK))
 8006a9a:	b90d      	cbnz	r5, 8006aa0 <HAL_SD_CheckReadOperation+0x32>
 8006a9c:	b900      	cbnz	r0, 8006aa0 <HAL_SD_CheckReadOperation+0x32>
    errorstate = SD_DATA_TIMEOUT;
 8006a9e:	2004      	movs	r0, #4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006aa6:	639a      	str	r2, [r3, #56]	; 0x38
  if (hsd->SdTransferErr != SD_OK)
 8006aa8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006aaa:	b183      	cbz	r3, 8006ace <HAL_SD_CheckReadOperation+0x60>
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 8006aac:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006aae:	b2c0      	uxtb	r0, r0
 8006ab0:	bd38      	pop	{r3, r4, r5, pc}
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8006ab2:	2a00      	cmp	r2, #0
 8006ab4:	d0e6      	beq.n	8006a84 <HAL_SD_CheckReadOperation+0x16>
    tmp1 = hsd->DmaTransferCplt; 
 8006ab6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 8006ab8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 8006aba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 8006abc:	3a01      	subs	r2, #1
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	e7dd      	b.n	8006a7e <HAL_SD_CheckReadOperation+0x10>
    timeout--;  
 8006ac2:	3d01      	subs	r5, #1
 8006ac4:	e7df      	b.n	8006a86 <HAL_SD_CheckReadOperation+0x18>
  if ((timeout == 0) && (errorstate == SD_OK))
 8006ac6:	2d00      	cmp	r5, #0
 8006ac8:	d0e9      	beq.n	8006a9e <HAL_SD_CheckReadOperation+0x30>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8006aca:	2000      	movs	r0, #0
 8006acc:	e7e8      	b.n	8006aa0 <HAL_SD_CheckReadOperation+0x32>
}
 8006ace:	bd38      	pop	{r3, r4, r5, pc}

08006ad0 <HAL_SD_GetStatus>:
{
 8006ad0:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006ad2:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8006ad4:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006ad6:	041b      	lsls	r3, r3, #16
 8006ad8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006ada:	2340      	movs	r3, #64	; 0x40
 8006adc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ade:	2300      	movs	r3, #0
{
 8006ae0:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 8006ae2:	250d      	movs	r5, #13
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ae4:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ae6:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006aec:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006aee:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 8006af0:	9502      	str	r5, [sp, #8]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006af2:	f000 ff66 	bl	80079c2 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEND_STATUS);
 8006af6:	4629      	mov	r1, r5
 8006af8:	4620      	mov	r0, r4
 8006afa:	f7ff f9b3 	bl	8005e64 <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 8006afe:	4601      	mov	r1, r0
 8006b00:	b948      	cbnz	r0, 8006b16 <HAL_SD_GetStatus+0x46>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b02:	6820      	ldr	r0, [r4, #0]
 8006b04:	f000 ff72 	bl	80079ec <SDMMC_GetResponse>
  if (cardstate == SD_CARD_TRANSFER)
 8006b08:	f3c0 2043 	ubfx	r0, r0, #9, #4
    return SD_TRANSFER_OK;
 8006b0c:	3804      	subs	r0, #4
 8006b0e:	bf18      	it	ne
 8006b10:	2001      	movne	r0, #1
}
 8006b12:	b007      	add	sp, #28
 8006b14:	bd30      	pop	{r4, r5, pc}
    return SD_TRANSFER_ERROR;
 8006b16:	2002      	movs	r0, #2
 8006b18:	e7fb      	b.n	8006b12 <HAL_SD_GetStatus+0x42>

08006b1a <HAL_SD_CheckWriteOperation>:
{
 8006b1a:	b570      	push	{r4, r5, r6, lr}
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	460e      	mov	r6, r1
  tmp1 = hsd->DmaTransferCplt; 
 8006b20:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 8006b22:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8006b24:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  uint32_t timeout = Timeout;
 8006b26:	4632      	mov	r2, r6
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8006b28:	b2db      	uxtb	r3, r3
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8006b2a:	4208      	tst	r0, r1
 8006b2c:	d100      	bne.n	8006b30 <HAL_SD_CheckWriteOperation+0x16>
 8006b2e:	b1c3      	cbz	r3, 8006b62 <HAL_SD_CheckWriteOperation+0x48>
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXACT))  && (timeout > 0))
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b34:	04d2      	lsls	r2, r2, #19
 8006b36:	d500      	bpl.n	8006b3a <HAL_SD_CheckWriteOperation+0x20>
 8006b38:	b9de      	cbnz	r6, 8006b72 <HAL_SD_CheckWriteOperation+0x58>
  if (hsd->SdOperation == SD_WRITE_MULTIPLE_BLOCK)
 8006b3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d120      	bne.n	8006b82 <HAL_SD_CheckWriteOperation+0x68>
    errorstate = HAL_SD_StopTransfer(hsd);
 8006b40:	4620      	mov	r0, r4
 8006b42:	f7ff ff7d 	bl	8006a40 <HAL_SD_StopTransfer>
 8006b46:	4605      	mov	r5, r0
  if ((timeout == 0) && (errorstate == SD_OK))
 8006b48:	b90e      	cbnz	r6, 8006b4e <HAL_SD_CheckWriteOperation+0x34>
 8006b4a:	b900      	cbnz	r0, 8006b4e <HAL_SD_CheckWriteOperation+0x34>
    errorstate = SD_DATA_TIMEOUT;
 8006b4c:	2504      	movs	r5, #4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006b54:	639a      	str	r2, [r3, #56]	; 0x38
  if (hsd->SdTransferErr != SD_OK)
 8006b56:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006b58:	b16b      	cbz	r3, 8006b76 <HAL_SD_CheckWriteOperation+0x5c>
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 8006b5a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006b5c:	b2ed      	uxtb	r5, r5
}
 8006b5e:	4628      	mov	r0, r5
 8006b60:	bd70      	pop	{r4, r5, r6, pc}
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8006b62:	2a00      	cmp	r2, #0
 8006b64:	d0e4      	beq.n	8006b30 <HAL_SD_CheckWriteOperation+0x16>
    tmp1 = hsd->DmaTransferCplt; 
 8006b66:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 8006b68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8006b6a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 8006b6c:	3a01      	subs	r2, #1
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	e7db      	b.n	8006b2a <HAL_SD_CheckWriteOperation+0x10>
    timeout--;  
 8006b72:	3e01      	subs	r6, #1
 8006b74:	e7dd      	b.n	8006b32 <HAL_SD_CheckWriteOperation+0x18>
  while(HAL_SD_GetStatus(hsd) != SD_TRANSFER_OK)
 8006b76:	4620      	mov	r0, r4
 8006b78:	f7ff ffaa 	bl	8006ad0 <HAL_SD_GetStatus>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d1fa      	bne.n	8006b76 <HAL_SD_CheckWriteOperation+0x5c>
 8006b80:	e7ed      	b.n	8006b5e <HAL_SD_CheckWriteOperation+0x44>
  if ((timeout == 0) && (errorstate == SD_OK))
 8006b82:	2e00      	cmp	r6, #0
 8006b84:	d0e2      	beq.n	8006b4c <HAL_SD_CheckWriteOperation+0x32>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8006b86:	2500      	movs	r5, #0
 8006b88:	e7e1      	b.n	8006b4e <HAL_SD_CheckWriteOperation+0x34>

08006b8a <HAL_UART_MspInit>:
 8006b8a:	4770      	bx	lr

08006b8c <HAL_UART_MspDeInit>:
 8006b8c:	4770      	bx	lr

08006b8e <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006b8e:	b538      	push	{r3, r4, r5, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8006b90:	4605      	mov	r5, r0
 8006b92:	b1a0      	cbz	r0, 8006bbe <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->State = HAL_UART_STATE_BUSY;
 8006b94:	2302      	movs	r3, #2
 8006b96:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006b9a:	6803      	ldr	r3, [r0, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]

  huart->Instance->CR1 = 0x0;
 8006b9e:	2400      	movs	r4, #0
  __HAL_UART_DISABLE(huart);
 8006ba0:	f022 0201 	bic.w	r2, r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0;
 8006ba6:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8006ba8:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8006baa:	609c      	str	r4, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006bac:	f7ff ffee 	bl	8006b8c <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb0:	66ec      	str	r4, [r5, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8006bb2:	f885 4068 	strb.w	r4, [r5, #104]	; 0x68
  huart->State = HAL_UART_STATE_RESET;
 8006bb6:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69

  return HAL_OK;
 8006bba:	4620      	mov	r0, r4
 8006bbc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006bbe:	2001      	movs	r0, #1
}
 8006bc0:	bd38      	pop	{r3, r4, r5, pc}

08006bc2 <HAL_UART_Receive_IT>:
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8006bc2:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d003      	beq.n	8006bd2 <HAL_UART_Receive_IT+0x10>
 8006bca:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8006bce:	2b12      	cmp	r3, #18
 8006bd0:	d147      	bne.n	8006c62 <HAL_UART_Receive_IT+0xa0>
  {
    if((pData == NULL ) || (Size == 0))
 8006bd2:	2900      	cmp	r1, #0
 8006bd4:	d043      	beq.n	8006c5e <HAL_UART_Receive_IT+0x9c>
 8006bd6:	2a00      	cmp	r2, #0
 8006bd8:	d041      	beq.n	8006c5e <HAL_UART_Receive_IT+0x9c>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bda:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d03f      	beq.n	8006c62 <HAL_UART_Receive_IT+0xa0>
 8006be2:	2301      	movs	r3, #1
 8006be4:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006be8:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8006bea:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8006bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8006bf0:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8006bf4:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8006bf8:	d123      	bne.n	8006c42 <HAL_UART_Receive_IT+0x80>
 8006bfa:	6903      	ldr	r3, [r0, #16]
 8006bfc:	b9fb      	cbnz	r3, 8006c3e <HAL_UART_Receive_IT+0x7c>
 8006bfe:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006c02:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c06:	2300      	movs	r3, #0
 8006c08:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8006c0a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c0e:	6802      	ldr	r2, [r0, #0]
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8006c10:	2b12      	cmp	r3, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8006c12:	bf0c      	ite	eq
 8006c14:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8006c16:	2322      	movne	r3, #34	; 0x22
 8006c18:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c1c:	6813      	ldr	r3, [r2, #0]
 8006c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c22:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c24:	6893      	ldr	r3, [r2, #8]
 8006c26:	f043 0301 	orr.w	r3, r3, #1
 8006c2a:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c2c:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(huart);
 8006c2e:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c30:	f041 0120 	orr.w	r1, r1, #32
    __HAL_UNLOCK(huart);
 8006c34:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c38:	6011      	str	r1, [r2, #0]

    return HAL_OK;
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8006c3e:	23ff      	movs	r3, #255	; 0xff
 8006c40:	e7df      	b.n	8006c02 <HAL_UART_Receive_IT+0x40>
 8006c42:	b923      	cbnz	r3, 8006c4e <HAL_UART_Receive_IT+0x8c>
 8006c44:	6903      	ldr	r3, [r0, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0f9      	beq.n	8006c3e <HAL_UART_Receive_IT+0x7c>
 8006c4a:	237f      	movs	r3, #127	; 0x7f
 8006c4c:	e7d9      	b.n	8006c02 <HAL_UART_Receive_IT+0x40>
 8006c4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c52:	d1d8      	bne.n	8006c06 <HAL_UART_Receive_IT+0x44>
 8006c54:	6903      	ldr	r3, [r0, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0f7      	beq.n	8006c4a <HAL_UART_Receive_IT+0x88>
 8006c5a:	233f      	movs	r3, #63	; 0x3f
 8006c5c:	e7d1      	b.n	8006c02 <HAL_UART_Receive_IT+0x40>
      return HAL_ERROR;
 8006c5e:	2001      	movs	r0, #1
 8006c60:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006c62:	2002      	movs	r0, #2
  }
}
 8006c64:	4770      	bx	lr
	...

08006c68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6a:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8006c6c:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c6e:	6921      	ldr	r1, [r4, #16]
 8006c70:	68a3      	ldr	r3, [r4, #8]
 8006c72:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006c74:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c76:	430b      	orrs	r3, r1
 8006c78:	6961      	ldr	r1, [r4, #20]
 8006c7a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006c7c:	49b0      	ldr	r1, [pc, #704]	; (8006f40 <UART_SetConfig+0x2d8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c7e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006c80:	4001      	ands	r1, r0
 8006c82:	430b      	orrs	r3, r1
 8006c84:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c86:	686b      	ldr	r3, [r5, #4]
 8006c88:	68e1      	ldr	r1, [r4, #12]
 8006c8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006c8e:	430b      	orrs	r3, r1
 8006c90:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c92:	4bac      	ldr	r3, [pc, #688]	; (8006f44 <UART_SetConfig+0x2dc>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c94:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c96:	429d      	cmp	r5, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c98:	bf1c      	itt	ne
 8006c9a:	6a23      	ldrne	r3, [r4, #32]
 8006c9c:	4319      	orrne	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8006c9e:	68ab      	ldr	r3, [r5, #8]
 8006ca0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006ca4:	430b      	orrs	r3, r1
 8006ca6:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ca8:	4ba7      	ldr	r3, [pc, #668]	; (8006f48 <UART_SetConfig+0x2e0>)
 8006caa:	429d      	cmp	r5, r3
 8006cac:	d118      	bne.n	8006ce0 <UART_SetConfig+0x78>
 8006cae:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8006cb2:	49a6      	ldr	r1, [pc, #664]	; (8006f4c <UART_SetConfig+0x2e4>)
 8006cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb8:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cbc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006cc0:	5ccb      	ldrb	r3, [r1, r3]
 8006cc2:	f040 80c6 	bne.w	8006e52 <UART_SetConfig+0x1ea>
  {
    switch (clocksource)
 8006cc6:	2b08      	cmp	r3, #8
 8006cc8:	d828      	bhi.n	8006d1c <UART_SetConfig+0xb4>
 8006cca:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006cce:	011a      	.short	0x011a
 8006cd0:	012f00bf 	.word	0x012f00bf
 8006cd4:	01140027 	.word	0x01140027
 8006cd8:	00270027 	.word	0x00270027
 8006cdc:	00330027 	.word	0x00330027
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ce0:	4b9b      	ldr	r3, [pc, #620]	; (8006f50 <UART_SetConfig+0x2e8>)
 8006ce2:	429d      	cmp	r5, r3
 8006ce4:	d107      	bne.n	8006cf6 <UART_SetConfig+0x8e>
 8006ce6:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8006cea:	499a      	ldr	r1, [pc, #616]	; (8006f54 <UART_SetConfig+0x2ec>)
 8006cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf0:	f003 030c 	and.w	r3, r3, #12
 8006cf4:	e7e2      	b.n	8006cbc <UART_SetConfig+0x54>
 8006cf6:	4b98      	ldr	r3, [pc, #608]	; (8006f58 <UART_SetConfig+0x2f0>)
 8006cf8:	429d      	cmp	r5, r3
 8006cfa:	d120      	bne.n	8006d3e <UART_SetConfig+0xd6>
 8006cfc:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8006d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	f000 80f1 	beq.w	8006ef0 <UART_SetConfig+0x288>
 8006d0e:	d808      	bhi.n	8006d22 <UART_SetConfig+0xba>
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 80f3 	beq.w	8006efc <UART_SetConfig+0x294>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d16:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006d1a:	d134      	bne.n	8006d86 <UART_SetConfig+0x11e>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8006d1c:	2201      	movs	r2, #1
  uint16_t usartdiv                   = 0x0000;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	e0f9      	b.n	8006f16 <UART_SetConfig+0x2ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d22:	2b20      	cmp	r3, #32
 8006d24:	f000 80ff 	beq.w	8006f26 <UART_SetConfig+0x2be>
 8006d28:	2b30      	cmp	r3, #48	; 0x30
 8006d2a:	d1f4      	bne.n	8006d16 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d2c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006d30:	f040 80c1 	bne.w	8006eb6 <UART_SetConfig+0x24e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006d34:	6860      	ldr	r0, [r4, #4]
 8006d36:	0843      	lsrs	r3, r0, #1
 8006d38:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006d3c:	e0fc      	b.n	8006f38 <UART_SetConfig+0x2d0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d3e:	4b87      	ldr	r3, [pc, #540]	; (8006f5c <UART_SetConfig+0x2f4>)
 8006d40:	429d      	cmp	r5, r3
 8006d42:	d122      	bne.n	8006d8a <UART_SetConfig+0x122>
 8006d44:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8006d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d50:	2b40      	cmp	r3, #64	; 0x40
 8006d52:	f000 80c0 	beq.w	8006ed6 <UART_SetConfig+0x26e>
 8006d56:	d806      	bhi.n	8006d66 <UART_SetConfig+0xfe>
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 80b1 	beq.w	8006ec0 <UART_SetConfig+0x258>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006d5e:	4b79      	ldr	r3, [pc, #484]	; (8006f44 <UART_SetConfig+0x2dc>)
 8006d60:	429d      	cmp	r5, r3
 8006d62:	d1d8      	bne.n	8006d16 <UART_SetConfig+0xae>
 8006d64:	e00f      	b.n	8006d86 <UART_SetConfig+0x11e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d66:	2b80      	cmp	r3, #128	; 0x80
 8006d68:	f000 80bc 	beq.w	8006ee4 <UART_SetConfig+0x27c>
 8006d6c:	2bc0      	cmp	r3, #192	; 0xc0
 8006d6e:	d1f6      	bne.n	8006d5e <UART_SetConfig+0xf6>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006d70:	4b74      	ldr	r3, [pc, #464]	; (8006f44 <UART_SetConfig+0x2dc>)
 8006d72:	429d      	cmp	r5, r3
 8006d74:	d1da      	bne.n	8006d2c <UART_SetConfig+0xc4>
 8006d76:	2308      	movs	r3, #8
      tmpreg = (uint32_t) LSE_VALUE;
 8006d78:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8006d7c:	6862      	ldr	r2, [r4, #4]
 8006d7e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8006d82:	4281      	cmp	r1, r0
 8006d84:	d92b      	bls.n	8006dde <UART_SetConfig+0x176>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8006d86:	2201      	movs	r2, #1
      break;
    }
  }

  return ret;
 8006d88:	e04b      	b.n	8006e22 <UART_SetConfig+0x1ba>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d8a:	4b75      	ldr	r3, [pc, #468]	; (8006f60 <UART_SetConfig+0x2f8>)
 8006d8c:	429d      	cmp	r5, r3
 8006d8e:	d111      	bne.n	8006db4 <UART_SetConfig+0x14c>
 8006d90:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8006d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006da0:	f000 8099 	beq.w	8006ed6 <UART_SetConfig+0x26e>
 8006da4:	d9d8      	bls.n	8006d58 <UART_SetConfig+0xf0>
 8006da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006daa:	f000 809b 	beq.w	8006ee4 <UART_SetConfig+0x27c>
 8006dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006db2:	e7dc      	b.n	8006d6e <UART_SetConfig+0x106>
 8006db4:	4b63      	ldr	r3, [pc, #396]	; (8006f44 <UART_SetConfig+0x2dc>)
 8006db6:	429d      	cmp	r5, r3
 8006db8:	d1ad      	bne.n	8006d16 <UART_SetConfig+0xae>
 8006dba:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8006dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dca:	f000 8084 	beq.w	8006ed6 <UART_SetConfig+0x26e>
 8006dce:	d9c3      	bls.n	8006d58 <UART_SetConfig+0xf0>
 8006dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dd4:	f000 8086 	beq.w	8006ee4 <UART_SetConfig+0x27c>
 8006dd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ddc:	e7c7      	b.n	8006d6e <UART_SetConfig+0x106>
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8006dde:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8006de2:	d8d0      	bhi.n	8006d86 <UART_SetConfig+0x11e>
        switch (clocksource)
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	d82f      	bhi.n	8006e48 <UART_SetConfig+0x1e0>
 8006de8:	e8df f003 	tbb	[pc, r3]
 8006dec:	2e1d2e05 	.word	0x2e1d2e05
 8006df0:	2e2e2e25 	.word	0x2e2e2e25
 8006df4:	28          	.byte	0x28
 8006df5:	00          	.byte	0x00
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006df6:	f7fe ffe7 	bl	8005dc8 <HAL_RCC_GetPCLK1Freq>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006dfa:	6862      	ldr	r2, [r4, #4]
 8006dfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e00:	0856      	lsrs	r6, r2, #1
 8006e02:	2700      	movs	r7, #0
 8006e04:	fbe1 6700 	umlal	r6, r7, r1, r0
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	4639      	mov	r1, r7
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006e0e:	f7f9 ff31 	bl	8000c74 <__aeabi_uldivmod>
          break;
 8006e12:	2200      	movs	r2, #0
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8006e14:	4b53      	ldr	r3, [pc, #332]	; (8006f64 <UART_SetConfig+0x2fc>)
 8006e16:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8006e1a:	4299      	cmp	r1, r3
 8006e1c:	d8b3      	bhi.n	8006d86 <UART_SetConfig+0x11e>
           huart->Instance->BRR = tmpreg;
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	60d8      	str	r0, [r3, #12]

}
 8006e22:	4610      	mov	r0, r2
 8006e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006e26:	4850      	ldr	r0, [pc, #320]	; (8006f68 <UART_SetConfig+0x300>)
 8006e28:	0855      	lsrs	r5, r2, #1
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	1940      	adds	r0, r0, r5
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006e30:	f141 0100 	adc.w	r1, r1, #0
 8006e34:	e7eb      	b.n	8006e0e <UART_SetConfig+0x1a6>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006e36:	f7fe fced 	bl	8005814 <HAL_RCC_GetSysClockFreq>
 8006e3a:	e7de      	b.n	8006dfa <UART_SetConfig+0x192>
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006e3c:	0850      	lsrs	r0, r2, #1
 8006e3e:	2100      	movs	r1, #0
 8006e40:	2300      	movs	r3, #0
 8006e42:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8006e46:	e7f3      	b.n	8006e30 <UART_SetConfig+0x1c8>
            ret = HAL_ERROR;
 8006e48:	2201      	movs	r2, #1
 8006e4a:	e7e3      	b.n	8006e14 <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006e4c:	f7fe ffd4 	bl	8005df8 <HAL_RCC_GetPCLK2Freq>
 8006e50:	e059      	b.n	8006f06 <UART_SetConfig+0x29e>
    switch (clocksource)
 8006e52:	2b08      	cmp	r3, #8
 8006e54:	d897      	bhi.n	8006d86 <UART_SetConfig+0x11e>
 8006e56:	a201      	add	r2, pc, #4	; (adr r2, 8006e5c <UART_SetConfig+0x1f4>)
 8006e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5c:	08006e81 	.word	0x08006e81
 8006e60:	08006e95 	.word	0x08006e95
 8006e64:	08006e9b 	.word	0x08006e9b
 8006e68:	08006d87 	.word	0x08006d87
 8006e6c:	08006eb1 	.word	0x08006eb1
 8006e70:	08006d87 	.word	0x08006d87
 8006e74:	08006d87 	.word	0x08006d87
 8006e78:	08006d87 	.word	0x08006d87
 8006e7c:	08006eb7 	.word	0x08006eb7
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006e80:	f7fe ffa2 	bl	8005dc8 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006e84:	6863      	ldr	r3, [r4, #4]
 8006e86:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006e8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8006e8e:	b280      	uxth	r0, r0
 8006e90:	60e8      	str	r0, [r5, #12]
 8006e92:	e01e      	b.n	8006ed2 <UART_SetConfig+0x26a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006e94:	f7fe ffb0 	bl	8005df8 <HAL_RCC_GetPCLK2Freq>
 8006e98:	e7f4      	b.n	8006e84 <UART_SetConfig+0x21c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006e9a:	6862      	ldr	r2, [r4, #4]
 8006e9c:	0853      	lsrs	r3, r2, #1
 8006e9e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006ea2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006ea6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	60eb      	str	r3, [r5, #12]
 8006eae:	e010      	b.n	8006ed2 <UART_SetConfig+0x26a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006eb0:	f7fe fcb0 	bl	8005814 <HAL_RCC_GetSysClockFreq>
 8006eb4:	e7e6      	b.n	8006e84 <UART_SetConfig+0x21c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006eb6:	6862      	ldr	r2, [r4, #4]
 8006eb8:	0853      	lsrs	r3, r2, #1
 8006eba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006ebe:	e7f2      	b.n	8006ea6 <UART_SetConfig+0x23e>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006ec0:	4b20      	ldr	r3, [pc, #128]	; (8006f44 <UART_SetConfig+0x2dc>)
 8006ec2:	429d      	cmp	r5, r3
 8006ec4:	d11a      	bne.n	8006efc <UART_SetConfig+0x294>
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8006ec6:	f7fe ff7f 	bl	8005dc8 <HAL_RCC_GetPCLK1Freq>
      break;
 8006eca:	2300      	movs	r3, #0
    if (tmpreg != 0)
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	f47f af55 	bne.w	8006d7c <UART_SetConfig+0x114>
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ed2:	2200      	movs	r2, #0
      break;
 8006ed4:	e7a5      	b.n	8006e22 <UART_SetConfig+0x1ba>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006ed6:	4b1b      	ldr	r3, [pc, #108]	; (8006f44 <UART_SetConfig+0x2dc>)
 8006ed8:	429d      	cmp	r5, r3
 8006eda:	d109      	bne.n	8006ef0 <UART_SetConfig+0x288>
      tmpreg = HAL_RCC_GetSysClockFreq();
 8006edc:	f7fe fc9a 	bl	8005814 <HAL_RCC_GetSysClockFreq>
      break;
 8006ee0:	2304      	movs	r3, #4
 8006ee2:	e7f3      	b.n	8006ecc <UART_SetConfig+0x264>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006ee4:	4b17      	ldr	r3, [pc, #92]	; (8006f44 <UART_SetConfig+0x2dc>)
 8006ee6:	429d      	cmp	r5, r3
 8006ee8:	d11d      	bne.n	8006f26 <UART_SetConfig+0x2be>
 8006eea:	2302      	movs	r3, #2
      tmpreg = (uint32_t) HSI_VALUE;
 8006eec:	481f      	ldr	r0, [pc, #124]	; (8006f6c <UART_SetConfig+0x304>)
 8006eee:	e745      	b.n	8006d7c <UART_SetConfig+0x114>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ef0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006ef4:	d1dc      	bne.n	8006eb0 <UART_SetConfig+0x248>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006ef6:	f7fe fc8d 	bl	8005814 <HAL_RCC_GetSysClockFreq>
 8006efa:	e004      	b.n	8006f06 <UART_SetConfig+0x29e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006efc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006f00:	d1be      	bne.n	8006e80 <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006f02:	f7fe ff61 	bl	8005dc8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006f06:	6861      	ldr	r1, [r4, #4]
 8006f08:	084a      	lsrs	r2, r1, #1
 8006f0a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8006f0e:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006f12:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f14:	2200      	movs	r2, #0
    brrtemp = usartdiv & 0xFFF0;
 8006f16:	f023 010f 	bic.w	r1, r3, #15
    huart->Instance->BRR = brrtemp;
 8006f1a:	6820      	ldr	r0, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8006f1c:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8006f20:	430b      	orrs	r3, r1
 8006f22:	60c3      	str	r3, [r0, #12]
 8006f24:	e77d      	b.n	8006e22 <UART_SetConfig+0x1ba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f26:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006f2a:	d1b6      	bne.n	8006e9a <UART_SetConfig+0x232>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006f2c:	6860      	ldr	r0, [r4, #4]
 8006f2e:	0843      	lsrs	r3, r0, #1
 8006f30:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006f34:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006f38:	fbb3 f3f0 	udiv	r3, r3, r0
 8006f3c:	e7e9      	b.n	8006f12 <UART_SetConfig+0x2aa>
 8006f3e:	bf00      	nop
 8006f40:	efff69f3 	.word	0xefff69f3
 8006f44:	40008000 	.word	0x40008000
 8006f48:	40013800 	.word	0x40013800
 8006f4c:	0800c94b 	.word	0x0800c94b
 8006f50:	40004400 	.word	0x40004400
 8006f54:	0800c94f 	.word	0x0800c94f
 8006f58:	40004800 	.word	0x40004800
 8006f5c:	40004c00 	.word	0x40004c00
 8006f60:	40005000 	.word	0x40005000
 8006f64:	000ffcff 	.word	0x000ffcff
 8006f68:	f4240000 	.word	0xf4240000
 8006f6c:	00f42400 	.word	0x00f42400

08006f70 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006f72:	07da      	lsls	r2, r3, #31
{
 8006f74:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f76:	d506      	bpl.n	8006f86 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f78:	6801      	ldr	r1, [r0, #0]
 8006f7a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8006f7c:	684a      	ldr	r2, [r1, #4]
 8006f7e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006f82:	4322      	orrs	r2, r4
 8006f84:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f86:	079c      	lsls	r4, r3, #30
 8006f88:	d506      	bpl.n	8006f98 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f8a:	6801      	ldr	r1, [r0, #0]
 8006f8c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006f8e:	684a      	ldr	r2, [r1, #4]
 8006f90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f94:	4322      	orrs	r2, r4
 8006f96:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f98:	0759      	lsls	r1, r3, #29
 8006f9a:	d506      	bpl.n	8006faa <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f9c:	6801      	ldr	r1, [r0, #0]
 8006f9e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006fa0:	684a      	ldr	r2, [r1, #4]
 8006fa2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006fa6:	4322      	orrs	r2, r4
 8006fa8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006faa:	071a      	lsls	r2, r3, #28
 8006fac:	d506      	bpl.n	8006fbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fae:	6801      	ldr	r1, [r0, #0]
 8006fb0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006fb2:	684a      	ldr	r2, [r1, #4]
 8006fb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fb8:	4322      	orrs	r2, r4
 8006fba:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fbc:	06dc      	lsls	r4, r3, #27
 8006fbe:	d506      	bpl.n	8006fce <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fc0:	6801      	ldr	r1, [r0, #0]
 8006fc2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006fc4:	688a      	ldr	r2, [r1, #8]
 8006fc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006fca:	4322      	orrs	r2, r4
 8006fcc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fce:	0699      	lsls	r1, r3, #26
 8006fd0:	d506      	bpl.n	8006fe0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fd2:	6801      	ldr	r1, [r0, #0]
 8006fd4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006fd6:	688a      	ldr	r2, [r1, #8]
 8006fd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fdc:	4322      	orrs	r2, r4
 8006fde:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fe0:	065a      	lsls	r2, r3, #25
 8006fe2:	d50f      	bpl.n	8007004 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fe4:	6801      	ldr	r1, [r0, #0]
 8006fe6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006fe8:	684a      	ldr	r2, [r1, #4]
 8006fea:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006fee:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ff0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ff4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ff6:	d105      	bne.n	8007004 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ff8:	684a      	ldr	r2, [r1, #4]
 8006ffa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006ffc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007000:	4322      	orrs	r2, r4
 8007002:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007004:	061b      	lsls	r3, r3, #24
 8007006:	d506      	bpl.n	8007016 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007008:	6802      	ldr	r2, [r0, #0]
 800700a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800700c:	6853      	ldr	r3, [r2, #4]
 800700e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007012:	430b      	orrs	r3, r1
 8007014:	6053      	str	r3, [r2, #4]
 8007016:	bd10      	pop	{r4, pc}

08007018 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8007018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800701c:	4604      	mov	r4, r0
 800701e:	460e      	mov	r6, r1
 8007020:	4690      	mov	r8, r2
 8007022:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8007024:	f7fd fbae 	bl	8004784 <HAL_GetTick>
 8007028:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 800702a:	f1b8 0f00 	cmp.w	r8, #0
 800702e:	d02f      	beq.n	8007090 <UART_WaitOnFlagUntilTimeout+0x78>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8007030:	6822      	ldr	r2, [r4, #0]
 8007032:	69d3      	ldr	r3, [r2, #28]
 8007034:	ea36 0303 	bics.w	r3, r6, r3
 8007038:	d12f      	bne.n	800709a <UART_WaitOnFlagUntilTimeout+0x82>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800703a:	1c6b      	adds	r3, r5, #1
 800703c:	d0f9      	beq.n	8007032 <UART_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800703e:	b145      	cbz	r5, 8007052 <UART_WaitOnFlagUntilTimeout+0x3a>
 8007040:	f7fd fba0 	bl	8004784 <HAL_GetTick>
 8007044:	1bc0      	subs	r0, r0, r7
 8007046:	4285      	cmp	r5, r0
 8007048:	d2f2      	bcs.n	8007030 <UART_WaitOnFlagUntilTimeout+0x18>
 800704a:	e002      	b.n	8007052 <UART_WaitOnFlagUntilTimeout+0x3a>
      if(Timeout != HAL_MAX_DELAY)
 800704c:	1c69      	adds	r1, r5, #1
 800704e:	d020      	beq.n	8007092 <UART_WaitOnFlagUntilTimeout+0x7a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8007050:	b9cd      	cbnz	r5, 8007086 <UART_WaitOnFlagUntilTimeout+0x6e>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800705a:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	f022 0220 	bic.w	r2, r2, #32
 8007062:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800706a:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800706c:	689a      	ldr	r2, [r3, #8]
 800706e:	f022 0201 	bic.w	r2, r2, #1
 8007072:	609a      	str	r2, [r3, #8]

          huart->State= HAL_UART_STATE_READY;
 8007074:	2301      	movs	r3, #1
 8007076:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800707a:	2300      	movs	r3, #0
 800707c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68

          return HAL_TIMEOUT;
 8007080:	2003      	movs	r0, #3
 8007082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8007086:	f7fd fb7d 	bl	8004784 <HAL_GetTick>
 800708a:	1bc0      	subs	r0, r0, r7
 800708c:	4285      	cmp	r5, r0
 800708e:	d3e0      	bcc.n	8007052 <UART_WaitOnFlagUntilTimeout+0x3a>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8007090:	6822      	ldr	r2, [r4, #0]
 8007092:	69d3      	ldr	r3, [r2, #28]
 8007094:	ea36 0303 	bics.w	r3, r6, r3
 8007098:	d1d8      	bne.n	800704c <UART_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 800709a:	2000      	movs	r0, #0
 800709c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080070a0 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a0:	2200      	movs	r2, #0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070a2:	6803      	ldr	r3, [r0, #0]
{
 80070a4:	b510      	push	{r4, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a6:	66c2      	str	r2, [r0, #108]	; 0x6c
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	0719      	lsls	r1, r3, #28
{
 80070ac:	4604      	mov	r4, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070ae:	d413      	bmi.n	80070d8 <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	075b      	lsls	r3, r3, #29
 80070b6:	d508      	bpl.n	80070ca <UART_CheckIdleState+0x2a>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070bc:	2200      	movs	r2, #0
 80070be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070c2:	4620      	mov	r0, r4
 80070c4:	f7ff ffa8 	bl	8007018 <UART_WaitOnFlagUntilTimeout>
 80070c8:	b970      	cbnz	r0, 80070e8 <UART_CheckIdleState+0x48>
  huart->State= HAL_UART_STATE_READY;
 80070ca:	2301      	movs	r3, #1
  __HAL_UNLOCK(huart);
 80070cc:	2000      	movs	r0, #0
  huart->State= HAL_UART_STATE_READY;
 80070ce:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80070d2:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  return HAL_OK;
 80070d6:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070e0:	f7ff ff9a 	bl	8007018 <UART_WaitOnFlagUntilTimeout>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d0e3      	beq.n	80070b0 <UART_CheckIdleState+0x10>
      return HAL_TIMEOUT;
 80070e8:	2003      	movs	r0, #3
 80070ea:	bd10      	pop	{r4, pc}

080070ec <HAL_UART_Init>:
{
 80070ec:	b510      	push	{r4, lr}
  if(huart == NULL)
 80070ee:	4604      	mov	r4, r0
 80070f0:	b360      	cbz	r0, 800714c <HAL_UART_Init+0x60>
  if(huart->State == HAL_UART_STATE_RESET)
 80070f2:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80070f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80070fa:	b91b      	cbnz	r3, 8007104 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80070fc:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8007100:	f7ff fd43 	bl	8006b8a <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8007104:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8007106:	2302      	movs	r3, #2
 8007108:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800710c:	6813      	ldr	r3, [r2, #0]
 800710e:	f023 0301 	bic.w	r3, r3, #1
 8007112:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007114:	4620      	mov	r0, r4
 8007116:	f7ff fda7 	bl	8006c68 <UART_SetConfig>
 800711a:	2801      	cmp	r0, #1
 800711c:	d016      	beq.n	800714c <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800711e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007120:	b113      	cbz	r3, 8007128 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8007122:	4620      	mov	r0, r4
 8007124:	f7ff ff24 	bl	8006f70 <UART_AdvFeatureConfig>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007130:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007138:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8007140:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8007142:	601a      	str	r2, [r3, #0]
}
 8007144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8007148:	f7ff bfaa 	b.w	80070a0 <UART_CheckIdleState>
}
 800714c:	2001      	movs	r0, #1
 800714e:	bd10      	pop	{r4, pc}

08007150 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007154:	680a      	ldr	r2, [r1, #0]
 8007156:	fa92 f4a2 	rbit	r4, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800715a:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800715e:	fab4 f484 	clz	r4, r4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007162:	2503      	movs	r5, #3
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007164:	270f      	movs	r7, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007166:	fa32 f304 	lsrs.w	r3, r2, r4
 800716a:	d10d      	bne.n	8007188 <LL_GPIO_Init+0x38>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800716c:	684b      	ldr	r3, [r1, #4]
 800716e:	3b01      	subs	r3, #1
 8007170:	2b01      	cmp	r3, #1
 8007172:	d806      	bhi.n	8007182 <LL_GPIO_Init+0x32>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007174:	6843      	ldr	r3, [r0, #4]
 8007176:	68c9      	ldr	r1, [r1, #12]
 8007178:	ea23 0302 	bic.w	r3, r3, r2
 800717c:	434a      	muls	r2, r1
 800717e:	431a      	orrs	r2, r3
 8007180:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8007182:	2001      	movs	r0, #1
 8007184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007188:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 800718c:	4013      	ands	r3, r2
 800718e:	d069      	beq.n	8007264 <LL_GPIO_Init+0x114>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007190:	f8d1 8004 	ldr.w	r8, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007194:	f8d0 9000 	ldr.w	r9, [r0]
 8007198:	fa93 fca3 	rbit	ip, r3
 800719c:	fabc fc8c 	clz	ip, ip
 80071a0:	fa93 f6a3 	rbit	r6, r3
 80071a4:	fab6 f686 	clz	r6, r6
 80071a8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80071ac:	fa05 fc0c 	lsl.w	ip, r5, ip
 80071b0:	0076      	lsls	r6, r6, #1
 80071b2:	ea29 0c0c 	bic.w	ip, r9, ip
 80071b6:	fa08 f606 	lsl.w	r6, r8, r6
 80071ba:	ea4c 0606 	orr.w	r6, ip, r6
 80071be:	6006      	str	r6, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80071c0:	f108 36ff 	add.w	r6, r8, #4294967295
 80071c4:	2e01      	cmp	r6, #1
 80071c6:	d816      	bhi.n	80071f6 <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80071c8:	6886      	ldr	r6, [r0, #8]
 80071ca:	fa93 fca3 	rbit	ip, r3
 80071ce:	fabc fc8c 	clz	ip, ip
 80071d2:	fa93 f9a3 	rbit	r9, r3
 80071d6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80071da:	fa05 fc0c 	lsl.w	ip, r5, ip
 80071de:	ea26 0c0c 	bic.w	ip, r6, ip
 80071e2:	fab9 f989 	clz	r9, r9
 80071e6:	688e      	ldr	r6, [r1, #8]
 80071e8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80071ec:	fa06 f609 	lsl.w	r6, r6, r9
 80071f0:	ea4c 0606 	orr.w	r6, ip, r6
 80071f4:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80071f6:	68c6      	ldr	r6, [r0, #12]
 80071f8:	fa93 fca3 	rbit	ip, r3
 80071fc:	fabc fc8c 	clz	ip, ip
 8007200:	fa93 f9a3 	rbit	r9, r3
 8007204:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007208:	fa05 fc0c 	lsl.w	ip, r5, ip
 800720c:	ea26 0c0c 	bic.w	ip, r6, ip
 8007210:	fab9 f989 	clz	r9, r9
 8007214:	690e      	ldr	r6, [r1, #16]
 8007216:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800721a:	fa06 f609 	lsl.w	r6, r6, r9
 800721e:	ea4c 0606 	orr.w	r6, ip, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007222:	f1b8 0f02 	cmp.w	r8, #2
 8007226:	60c6      	str	r6, [r0, #12]
 8007228:	d11c      	bne.n	8007264 <LL_GPIO_Init+0x114>
 800722a:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800722e:	fab6 f686 	clz	r6, r6
 8007232:	2e07      	cmp	r6, #7
 8007234:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8007238:	dc16      	bgt.n	8007268 <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800723a:	f8d0 8020 	ldr.w	r8, [r0, #32]
 800723e:	fa93 f6a3 	rbit	r6, r3
 8007242:	fab6 f686 	clz	r6, r6
 8007246:	fa93 f3a3 	rbit	r3, r3
 800724a:	fab3 f383 	clz	r3, r3
 800724e:	00b6      	lsls	r6, r6, #2
 8007250:	fa07 f606 	lsl.w	r6, r7, r6
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	ea28 0606 	bic.w	r6, r8, r6
 800725a:	fa0c fc03 	lsl.w	ip, ip, r3
 800725e:	ea46 060c 	orr.w	r6, r6, ip
 8007262:	6206      	str	r6, [r0, #32]
    pinpos++;
 8007264:	3401      	adds	r4, #1
 8007266:	e77e      	b.n	8007166 <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007268:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 800726c:	0a1b      	lsrs	r3, r3, #8
 800726e:	fa93 f6a3 	rbit	r6, r3
 8007272:	fab6 f686 	clz	r6, r6
 8007276:	fa93 f3a3 	rbit	r3, r3
 800727a:	fab3 f383 	clz	r3, r3
 800727e:	00b6      	lsls	r6, r6, #2
 8007280:	fa07 f606 	lsl.w	r6, r7, r6
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	ea28 0606 	bic.w	r6, r8, r6
 800728a:	fa0c f303 	lsl.w	r3, ip, r3
 800728e:	4333      	orrs	r3, r6
 8007290:	6243      	str	r3, [r0, #36]	; 0x24
 8007292:	e7e7      	b.n	8007264 <LL_GPIO_Init+0x114>

08007294 <LL_RCC_HSI_IsReady>:
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8007294:	4b02      	ldr	r3, [pc, #8]	; (80072a0 <LL_RCC_HSI_IsReady+0xc>)
 8007296:	6818      	ldr	r0, [r3, #0]
}
 8007298:	f3c0 2080 	ubfx	r0, r0, #10, #1
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	40021000 	.word	0x40021000

080072a4 <LL_RCC_LSE_IsReady>:
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80072a4:	4b02      	ldr	r3, [pc, #8]	; (80072b0 <LL_RCC_LSE_IsReady+0xc>)
 80072a6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
}
 80072aa:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80072ae:	4770      	bx	lr
 80072b0:	40021000 	.word	0x40021000

080072b4 <LL_RCC_MSI_IsEnabledRangeSelect>:
  return (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL));
 80072b4:	4b02      	ldr	r3, [pc, #8]	; (80072c0 <LL_RCC_MSI_IsEnabledRangeSelect+0xc>)
 80072b6:	6818      	ldr	r0, [r3, #0]
}
 80072b8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	40021000 	.word	0x40021000

080072c4 <LL_RCC_PLL_GetN>:
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_POSITION_PLLN);
 80072c4:	4b05      	ldr	r3, [pc, #20]	; (80072dc <LL_RCC_PLL_GetN+0x18>)
 80072c6:	68d8      	ldr	r0, [r3, #12]
 80072c8:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 80072cc:	fa93 f3a3 	rbit	r3, r3
 80072d0:	fab3 f383 	clz	r3, r3
 80072d4:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
}
 80072d8:	40d8      	lsrs	r0, r3
 80072da:	4770      	bx	lr
 80072dc:	40021000 	.word	0x40021000

080072e0 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80072e0:	4b06      	ldr	r3, [pc, #24]	; (80072fc <RCC_GetHCLKClockFreq+0x1c>)
 80072e2:	22f0      	movs	r2, #240	; 0xf0
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	fa92 f2a2 	rbit	r2, r2
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80072ea:	fab2 f282 	clz	r2, r2
 80072ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072f2:	40d3      	lsrs	r3, r2
 80072f4:	4a02      	ldr	r2, [pc, #8]	; (8007300 <RCC_GetHCLKClockFreq+0x20>)
 80072f6:	5cd3      	ldrb	r3, [r2, r3]
}
 80072f8:	40d8      	lsrs	r0, r3
 80072fa:	4770      	bx	lr
 80072fc:	40021000 	.word	0x40021000
 8007300:	0800c711 	.word	0x0800c711

08007304 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007304:	4b07      	ldr	r3, [pc, #28]	; (8007324 <RCC_GetPCLK1ClockFreq+0x20>)
 8007306:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	fa92 f2a2 	rbit	r2, r2
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007310:	fab2 f282 	clz	r2, r2
 8007314:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007318:	40d3      	lsrs	r3, r2
 800731a:	4a03      	ldr	r2, [pc, #12]	; (8007328 <RCC_GetPCLK1ClockFreq+0x24>)
 800731c:	5cd3      	ldrb	r3, [r2, r3]
}
 800731e:	40d8      	lsrs	r0, r3
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	40021000 	.word	0x40021000
 8007328:	0800c95c 	.word	0x0800c95c

0800732c <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800732c:	4b07      	ldr	r3, [pc, #28]	; (800734c <RCC_GetPCLK2ClockFreq+0x20>)
 800732e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	fa92 f2a2 	rbit	r2, r2
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007338:	fab2 f282 	clz	r2, r2
 800733c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007340:	40d3      	lsrs	r3, r2
 8007342:	4a03      	ldr	r2, [pc, #12]	; (8007350 <RCC_GetPCLK2ClockFreq+0x24>)
 8007344:	5cd3      	ldrb	r3, [r2, r3]
}
 8007346:	40d8      	lsrs	r0, r3
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	40021000 	.word	0x40021000
 8007350:	0800c95c 	.word	0x0800c95c

08007354 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007354:	4a24      	ldr	r2, [pc, #144]	; (80073e8 <RCC_PLL_GetFreqDomain_SYS+0x94>)
 8007356:	68d3      	ldr	r3, [r2, #12]
 8007358:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 800735c:	2b02      	cmp	r3, #2
{
 800735e:	b510      	push	{r4, lr}
  switch (pllsource)
 8007360:	d040      	beq.n	80073e4 <RCC_PLL_GetFreqDomain_SYS+0x90>
 8007362:	2b03      	cmp	r3, #3
 8007364:	d00b      	beq.n	800737e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8007366:	4921      	ldr	r1, [pc, #132]	; (80073ec <RCC_PLL_GetFreqDomain_SYS+0x98>)
    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
      break;

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007368:	f7ff ffa4 	bl	80072b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800736c:	4604      	mov	r4, r0
 800736e:	bb50      	cbnz	r0, 80073c6 <RCC_PLL_GetFreqDomain_SYS+0x72>
 8007370:	f7ff ffa0 	bl	80072b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007374:	b310      	cbz	r0, 80073bc <RCC_PLL_GetFreqDomain_SYS+0x68>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8007376:	6813      	ldr	r3, [r2, #0]
 8007378:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800737c:	e000      	b.n	8007380 <RCC_PLL_GetFreqDomain_SYS+0x2c>
      pllinputfreq = HSE_VALUE;
 800737e:	481c      	ldr	r0, [pc, #112]	; (80073f0 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007380:	68d1      	ldr	r1, [r2, #12]
 8007382:	2370      	movs	r3, #112	; 0x70
 8007384:	fa93 f3a3 	rbit	r3, r3
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007388:	fab3 f383 	clz	r3, r3
 800738c:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8007390:	40d9      	lsrs	r1, r3
 8007392:	3101      	adds	r1, #1
 8007394:	fbb0 f1f1 	udiv	r1, r0, r1
 8007398:	f7ff ff94 	bl	80072c4 <LL_RCC_PLL_GetN>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800739c:	68d3      	ldr	r3, [r2, #12]
 800739e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80073a2:	fa92 f2a2 	rbit	r2, r2
 80073a6:	fab2 f282 	clz	r2, r2
 80073aa:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80073ae:	40d3      	lsrs	r3, r2
 80073b0:	3301      	adds	r3, #1
 80073b2:	4348      	muls	r0, r1
 80073b4:	005b      	lsls	r3, r3, #1
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80073b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80073ba:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80073bc:	f8d2 4094 	ldr.w	r4, [r2, #148]	; 0x94
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80073c0:	f3c4 2403 	ubfx	r4, r4, #8, #4
 80073c4:	e7d8      	b.n	8007378 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80073c6:	f7ff ff75 	bl	80072b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 80073ca:	b128      	cbz	r0, 80073d8 <RCC_PLL_GetFreqDomain_SYS+0x84>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80073cc:	6813      	ldr	r3, [r2, #0]
 80073ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80073d2:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80073d6:	e7d3      	b.n	8007380 <RCC_PLL_GetFreqDomain_SYS+0x2c>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80073d8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80073dc:	091b      	lsrs	r3, r3, #4
 80073de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073e2:	e7f6      	b.n	80073d2 <RCC_PLL_GetFreqDomain_SYS+0x7e>
      pllinputfreq = HSI_VALUE;
 80073e4:	4803      	ldr	r0, [pc, #12]	; (80073f4 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 80073e6:	e7cb      	b.n	8007380 <RCC_PLL_GetFreqDomain_SYS+0x2c>
 80073e8:	40021000 	.word	0x40021000
 80073ec:	0800c72c 	.word	0x0800c72c
 80073f0:	007a1200 	.word	0x007a1200
 80073f4:	00f42400 	.word	0x00f42400

080073f8 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80073f8:	4a1b      	ldr	r2, [pc, #108]	; (8007468 <RCC_GetSystemClockFreq+0x70>)
 80073fa:	6893      	ldr	r3, [r2, #8]
 80073fc:	f003 030c 	and.w	r3, r3, #12
{
 8007400:	b510      	push	{r4, lr}
  switch (LL_RCC_GetSysClkSource())
 8007402:	2b0c      	cmp	r3, #12
 8007404:	d80e      	bhi.n	8007424 <RCC_GetSystemClockFreq+0x2c>
 8007406:	e8df f003 	tbb	[pc, r3]
 800740a:	0d0d      	.short	0x0d0d
 800740c:	0d2d0d0d 	.word	0x0d2d0d0d
 8007410:	0d070d0d 	.word	0x0d070d0d
 8007414:	0d0d      	.short	0x0d0d
 8007416:	09          	.byte	0x09
 8007417:	00          	.byte	0x00
      frequency = HSE_VALUE;
 8007418:	4814      	ldr	r0, [pc, #80]	; (800746c <RCC_GetSystemClockFreq+0x74>)
 800741a:	bd10      	pop	{r4, pc}
}
 800741c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8007420:	f7ff bf98 	b.w	8007354 <RCC_PLL_GetFreqDomain_SYS>
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007424:	f7ff ff46 	bl	80072b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007428:	4c11      	ldr	r4, [pc, #68]	; (8007470 <RCC_GetSystemClockFreq+0x78>)
 800742a:	4601      	mov	r1, r0
 800742c:	b958      	cbnz	r0, 8007446 <RCC_GetSystemClockFreq+0x4e>
 800742e:	f7ff ff41 	bl	80072b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007432:	b118      	cbz	r0, 800743c <RCC_GetSystemClockFreq+0x44>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8007434:	6813      	ldr	r3, [r2, #0]
 8007436:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 800743a:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800743c:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
 8007440:	f3c1 2103 	ubfx	r1, r1, #8, #4
 8007444:	e7f7      	b.n	8007436 <RCC_GetSystemClockFreq+0x3e>
 8007446:	f7ff ff35 	bl	80072b4 <LL_RCC_MSI_IsEnabledRangeSelect>
 800744a:	b128      	cbz	r0, 8007458 <RCC_GetSystemClockFreq+0x60>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800744c:	6813      	ldr	r3, [r2, #0]
 800744e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007452:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8007456:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8007458:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800745c:	091b      	lsrs	r3, r3, #4
 800745e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007462:	e7f6      	b.n	8007452 <RCC_GetSystemClockFreq+0x5a>
      frequency = HSI_VALUE;
 8007464:	4803      	ldr	r0, [pc, #12]	; (8007474 <RCC_GetSystemClockFreq+0x7c>)
}
 8007466:	bd10      	pop	{r4, pc}
 8007468:	40021000 	.word	0x40021000
 800746c:	007a1200 	.word	0x007a1200
 8007470:	0800c72c 	.word	0x0800c72c
 8007474:	00f42400 	.word	0x00f42400

08007478 <LL_RCC_GetUSARTClockFreq>:
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8007478:	2803      	cmp	r0, #3
{
 800747a:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800747c:	d129      	bne.n	80074d2 <LL_RCC_GetUSARTClockFreq+0x5a>
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16));
 800747e:	4b2a      	ldr	r3, [pc, #168]	; (8007528 <LL_RCC_GetUSARTClockFreq+0xb0>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8007480:	4a2a      	ldr	r2, [pc, #168]	; (800752c <LL_RCC_GetUSARTClockFreq+0xb4>)
 8007482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007486:	f003 0303 	and.w	r3, r3, #3
 800748a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800748e:	4293      	cmp	r3, r2
 8007490:	d009      	beq.n	80074a6 <LL_RCC_GetUSARTClockFreq+0x2e>
 8007492:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8007496:	d00d      	beq.n	80074b4 <LL_RCC_GetUSARTClockFreq+0x3c>
 8007498:	3a01      	subs	r2, #1
 800749a:	4293      	cmp	r3, r2
 800749c:	d111      	bne.n	80074c2 <LL_RCC_GetUSARTClockFreq+0x4a>
}
 800749e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
          usart_frequency = RCC_GetSystemClockFreq();
 80074a2:	f7ff bfa9 	b.w	80073f8 <RCC_GetSystemClockFreq>
        if (LL_RCC_HSI_IsReady())
 80074a6:	f7ff fef5 	bl	8007294 <LL_RCC_HSI_IsReady>
 80074aa:	b908      	cbnz	r0, 80074b0 <LL_RCC_GetUSARTClockFreq+0x38>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80074ac:	2000      	movs	r0, #0
 80074ae:	bd08      	pop	{r3, pc}
          usart_frequency = HSI_VALUE;
 80074b0:	481f      	ldr	r0, [pc, #124]	; (8007530 <LL_RCC_GetUSARTClockFreq+0xb8>)
 80074b2:	bd08      	pop	{r3, pc}
        if (LL_RCC_LSE_IsReady())
 80074b4:	f7ff fef6 	bl	80072a4 <LL_RCC_LSE_IsReady>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	d0f7      	beq.n	80074ac <LL_RCC_GetUSARTClockFreq+0x34>
          usart_frequency = LSE_VALUE;
 80074bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80074c0:	bd08      	pop	{r3, pc}
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80074c2:	f7ff ff99 	bl	80073f8 <RCC_GetSystemClockFreq>
 80074c6:	f7ff ff0b 	bl	80072e0 <RCC_GetHCLKClockFreq>
}
 80074ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80074ce:	f7ff bf2d 	b.w	800732c <RCC_GetPCLK2ClockFreq>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80074d2:	280c      	cmp	r0, #12
 80074d4:	d117      	bne.n	8007506 <LL_RCC_GetUSARTClockFreq+0x8e>
 80074d6:	4b14      	ldr	r3, [pc, #80]	; (8007528 <LL_RCC_GetUSARTClockFreq+0xb0>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80074d8:	4a16      	ldr	r2, [pc, #88]	; (8007534 <LL_RCC_GetUSARTClockFreq+0xbc>)
 80074da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074de:	f003 030c 	and.w	r3, r3, #12
 80074e2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d0dd      	beq.n	80074a6 <LL_RCC_GetUSARTClockFreq+0x2e>
 80074ea:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80074ee:	d0e1      	beq.n	80074b4 <LL_RCC_GetUSARTClockFreq+0x3c>
 80074f0:	3a04      	subs	r2, #4
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d0d3      	beq.n	800749e <LL_RCC_GetUSARTClockFreq+0x26>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80074f6:	f7ff ff7f 	bl	80073f8 <RCC_GetSystemClockFreq>
 80074fa:	f7ff fef1 	bl	80072e0 <RCC_GetHCLKClockFreq>
}
 80074fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8007502:	f7ff beff 	b.w	8007304 <RCC_GetPCLK1ClockFreq>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8007506:	2830      	cmp	r0, #48	; 0x30
 8007508:	d1d0      	bne.n	80074ac <LL_RCC_GetUSARTClockFreq+0x34>
 800750a:	4b07      	ldr	r3, [pc, #28]	; (8007528 <LL_RCC_GetUSARTClockFreq+0xb0>)
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800750c:	4a0a      	ldr	r2, [pc, #40]	; (8007538 <LL_RCC_GetUSARTClockFreq+0xc0>)
 800750e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007512:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007516:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800751a:	4293      	cmp	r3, r2
 800751c:	d0c3      	beq.n	80074a6 <LL_RCC_GetUSARTClockFreq+0x2e>
 800751e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8007522:	d0c7      	beq.n	80074b4 <LL_RCC_GetUSARTClockFreq+0x3c>
 8007524:	3a10      	subs	r2, #16
 8007526:	e7e4      	b.n	80074f2 <LL_RCC_GetUSARTClockFreq+0x7a>
 8007528:	40021000 	.word	0x40021000
 800752c:	00030002 	.word	0x00030002
 8007530:	00f42400 	.word	0x00f42400
 8007534:	000c0008 	.word	0x000c0008
 8007538:	00300020 	.word	0x00300020

0800753c <LL_RCC_GetUARTClockFreq>:
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800753c:	28c0      	cmp	r0, #192	; 0xc0
{
 800753e:	b508      	push	{r3, lr}
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8007540:	d121      	bne.n	8007586 <LL_RCC_GetUARTClockFreq+0x4a>
 8007542:	4b1e      	ldr	r3, [pc, #120]	; (80075bc <LL_RCC_GetUARTClockFreq+0x80>)
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8007544:	4a1e      	ldr	r2, [pc, #120]	; (80075c0 <LL_RCC_GetUARTClockFreq+0x84>)
 8007546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800754a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800754e:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8007552:	4293      	cmp	r3, r2
 8007554:	d009      	beq.n	800756a <LL_RCC_GetUARTClockFreq+0x2e>
 8007556:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800755a:	d00d      	beq.n	8007578 <LL_RCC_GetUARTClockFreq+0x3c>
 800755c:	3a40      	subs	r2, #64	; 0x40
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800755e:	4293      	cmp	r3, r2
 8007560:	d124      	bne.n	80075ac <LL_RCC_GetUARTClockFreq+0x70>
}
 8007562:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        uart_frequency = RCC_GetSystemClockFreq();
 8007566:	f7ff bf47 	b.w	80073f8 <RCC_GetSystemClockFreq>
        if (LL_RCC_HSI_IsReady())
 800756a:	f7ff fe93 	bl	8007294 <LL_RCC_HSI_IsReady>
 800756e:	b908      	cbnz	r0, 8007574 <LL_RCC_GetUARTClockFreq+0x38>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8007570:	2000      	movs	r0, #0
 8007572:	bd08      	pop	{r3, pc}
          uart_frequency = HSI_VALUE;
 8007574:	4813      	ldr	r0, [pc, #76]	; (80075c4 <LL_RCC_GetUARTClockFreq+0x88>)
 8007576:	bd08      	pop	{r3, pc}
        if (LL_RCC_LSE_IsReady())
 8007578:	f7ff fe94 	bl	80072a4 <LL_RCC_LSE_IsReady>
 800757c:	2800      	cmp	r0, #0
 800757e:	d0f7      	beq.n	8007570 <LL_RCC_GetUARTClockFreq+0x34>
          uart_frequency = LSE_VALUE;
 8007580:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007584:	bd08      	pop	{r3, pc}
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8007586:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 800758a:	d1f1      	bne.n	8007570 <LL_RCC_GetUARTClockFreq+0x34>
 800758c:	4b0b      	ldr	r3, [pc, #44]	; (80075bc <LL_RCC_GetUARTClockFreq+0x80>)
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800758e:	4a0e      	ldr	r2, [pc, #56]	; (80075c8 <LL_RCC_GetUARTClockFreq+0x8c>)
 8007590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007598:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800759c:	4293      	cmp	r3, r2
 800759e:	d0e4      	beq.n	800756a <LL_RCC_GetUARTClockFreq+0x2e>
 80075a0:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80075a4:	d0e8      	beq.n	8007578 <LL_RCC_GetUARTClockFreq+0x3c>
 80075a6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80075aa:	e7d8      	b.n	800755e <LL_RCC_GetUARTClockFreq+0x22>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80075ac:	f7ff ff24 	bl	80073f8 <RCC_GetSystemClockFreq>
 80075b0:	f7ff fe96 	bl	80072e0 <RCC_GetHCLKClockFreq>
}
 80075b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80075b8:	f7ff bea4 	b.w	8007304 <RCC_GetPCLK1ClockFreq>
 80075bc:	40021000 	.word	0x40021000
 80075c0:	00c00080 	.word	0x00c00080
 80075c4:	00f42400 	.word	0x00f42400
 80075c8:	03000200 	.word	0x03000200

080075cc <LL_RTC_TIME_Config>:
{
 80075cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d0:	f8dd c020 	ldr.w	ip, [sp, #32]
 80075d4:	f44f 1740 	mov.w	r7, #3145728	; 0x300000
 80075d8:	fa97 f7a7 	rbit	r7, r7
 80075dc:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 80075e0:	fab7 f787 	clz	r7, r7
 80075e4:	fa94 f4a4 	rbit	r4, r4
 80075e8:	f44f 46e0 	mov.w	r6, #28672	; 0x7000
 80075ec:	fab4 fa84 	clz	sl, r4
 80075f0:	fa96 f6a6 	rbit	r6, r6
 80075f4:	f44f 6970 	mov.w	r9, #3840	; 0xf00
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 80075f8:	fab6 f686 	clz	r6, r6
 80075fc:	fa99 f9a9 	rbit	r9, r9
 8007600:	2570      	movs	r5, #112	; 0x70
 8007602:	fab9 f989 	clz	r9, r9
 8007606:	fa95 f5a5 	rbit	r5, r5
 800760a:	f04f 080f 	mov.w	r8, #15
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 800760e:	fab5 f585 	clz	r5, r5
 8007612:	fa98 f8a8 	rbit	r8, r8
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007616:	f8d0 e000 	ldr.w	lr, [r0]
 800761a:	f02e 1e7f 	bic.w	lr, lr, #8323199	; 0x7f007f
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 800761e:	f002 040f 	and.w	r4, r2, #15
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007622:	f42e 4efe 	bic.w	lr, lr, #32512	; 0x7f00
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8007626:	fa04 f40a 	lsl.w	r4, r4, sl
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800762a:	ea4e 0101 	orr.w	r1, lr, r1
 800762e:	4321      	orrs	r1, r4
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8007630:	f003 040f 	and.w	r4, r3, #15
 8007634:	fa04 f909 	lsl.w	r9, r4, r9
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8007638:	fab8 f888 	clz	r8, r8
 800763c:	f00c 040f 	and.w	r4, ip, #15
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007640:	ea41 0109 	orr.w	r1, r1, r9
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8007644:	fa04 f808 	lsl.w	r8, r4, r8
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8007648:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800764c:	3f04      	subs	r7, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800764e:	ea41 0108 	orr.w	r1, r1, r8
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8007652:	40ba      	lsls	r2, r7
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8007654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007658:	3e04      	subs	r6, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800765a:	430a      	orrs	r2, r1
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 800765c:	40b3      	lsls	r3, r6
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 800765e:	f00c 0cf0 	and.w	ip, ip, #240	; 0xf0
 8007662:	3d04      	subs	r5, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007664:	4313      	orrs	r3, r2
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8007666:	fa0c f505 	lsl.w	r5, ip, r5
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800766a:	432b      	orrs	r3, r5
 800766c:	6003      	str	r3, [r0, #0]
 800766e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08007674 <LL_RTC_DATE_Config>:
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  * @param  Year Value between Min_Data=0x00 and Max_Data=0x99
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DATE_Config(RTC_TypeDef *RTCx, uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 8007674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007678:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 800767c:	f44f 4a60 	mov.w	sl, #57344	; 0xe000
 8007680:	fa9a faaa 	rbit	sl, sl
 8007684:	f44f 0770 	mov.w	r7, #15728640	; 0xf00000
  register uint32_t temp = 0U;

  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 8007688:	faba fa8a 	clz	sl, sl
 800768c:	fa97 f7a7 	rbit	r7, r7
 8007690:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8007694:	fab7 f787 	clz	r7, r7
 8007698:	fa94 f4a4 	rbit	r4, r4
 800769c:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80076a0:	fab4 fb84 	clz	fp, r4
 80076a4:	fa96 f6a6 	rbit	r6, r6
 80076a8:	f44f 6870 	mov.w	r8, #3840	; 0xf00
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 80076ac:	fab6 f686 	clz	r6, r6
 80076b0:	fa98 f8a8 	rbit	r8, r8
 80076b4:	2530      	movs	r5, #48	; 0x30
 80076b6:	fab8 f888 	clz	r8, r8
 80076ba:	fa95 f5a5 	rbit	r5, r5
 80076be:	f04f 0c0f 	mov.w	ip, #15
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 80076c2:	fab5 f585 	clz	r5, r5
 80076c6:	fa9c fcac 	rbit	ip, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 80076ca:	f00e 040f 	and.w	r4, lr, #15
 80076ce:	fa04 f40b 	lsl.w	r4, r4, fp
  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 80076d2:	fa01 f10a 	lsl.w	r1, r1, sl

  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 80076d6:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80076da:	4321      	orrs	r1, r4
 80076dc:	4c12      	ldr	r4, [pc, #72]	; (8007728 <LL_RTC_DATE_Config+0xb4>)
 80076de:	ea09 0404 	and.w	r4, r9, r4
 80076e2:	4321      	orrs	r1, r4
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 80076e4:	f003 040f 	and.w	r4, r3, #15
 80076e8:	fa04 f808 	lsl.w	r8, r4, r8
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 80076ec:	fabc fc8c 	clz	ip, ip
 80076f0:	f002 040f 	and.w	r4, r2, #15
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 80076f4:	ea41 0108 	orr.w	r1, r1, r8
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 80076f8:	fa04 fc0c 	lsl.w	ip, r4, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 80076fc:	f00e 0ef0 	and.w	lr, lr, #240	; 0xf0
 8007700:	3f04      	subs	r7, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8007702:	ea41 010c 	orr.w	r1, r1, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8007706:	fa0e f707 	lsl.w	r7, lr, r7
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 800770a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800770e:	3e04      	subs	r6, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8007710:	4339      	orrs	r1, r7
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8007712:	40b3      	lsls	r3, r6
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8007714:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007718:	3d04      	subs	r5, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 800771a:	430b      	orrs	r3, r1
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 800771c:	40aa      	lsls	r2, r5
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 800771e:	431a      	orrs	r2, r3
 8007720:	6042      	str	r2, [r0, #4]
 8007722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007726:	bf00      	nop
 8007728:	ff0000c0 	.word	0xff0000c0

0800772c <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 800772c:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 800772e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007732:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8007734:	68c3      	ldr	r3, [r0, #12]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8007736:	065a      	lsls	r2, r3, #25
 8007738:	d41c      	bmi.n	8007774 <LL_RTC_EnterInitMode+0x48>
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 800773a:	f04f 33ff 	mov.w	r3, #4294967295
 800773e:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8007740:	68c3      	ldr	r3, [r0, #12]
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8007742:	490d      	ldr	r1, [pc, #52]	; (8007778 <LL_RTC_EnterInitMode+0x4c>)
 8007744:	f3c3 1380 	ubfx	r3, r3, #6, #1
  ErrorStatus status = SUCCESS;
 8007748:	2201      	movs	r2, #1
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 800774a:	9c01      	ldr	r4, [sp, #4]
 800774c:	b104      	cbz	r4, 8007750 <LL_RTC_EnterInitMode+0x24>
 800774e:	b113      	cbz	r3, 8007756 <LL_RTC_EnterInitMode+0x2a>
        status = ERROR;
      }
    }
  }
  return status;
}
 8007750:	4610      	mov	r0, r2
 8007752:	b002      	add	sp, #8
 8007754:	bd10      	pop	{r4, pc}
 8007756:	680b      	ldr	r3, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8007758:	03db      	lsls	r3, r3, #15
        timeout --;
 800775a:	bf42      	ittt	mi
 800775c:	9b01      	ldrmi	r3, [sp, #4]
 800775e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8007762:	9301      	strmi	r3, [sp, #4]
 8007764:	68c3      	ldr	r3, [r0, #12]
      if (timeout == 0U)
 8007766:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 8007768:	2c00      	cmp	r4, #0
 800776a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800776e:	bf08      	it	eq
 8007770:	2200      	moveq	r2, #0
 8007772:	e7ea      	b.n	800774a <LL_RTC_EnterInitMode+0x1e>
  ErrorStatus status = SUCCESS;
 8007774:	2201      	movs	r2, #1
 8007776:	e7eb      	b.n	8007750 <LL_RTC_EnterInitMode+0x24>
 8007778:	e000e010 	.word	0xe000e010

0800777c <LL_RTC_Init>:
{
 800777c:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800777e:	23ca      	movs	r3, #202	; 0xca
 8007780:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8007782:	2353      	movs	r3, #83	; 0x53
 8007784:	6243      	str	r3, [r0, #36]	; 0x24
 8007786:	4604      	mov	r4, r0
 8007788:	460d      	mov	r5, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800778a:	f7ff ffcf 	bl	800772c <LL_RTC_EnterInitMode>
 800778e:	b1f0      	cbz	r0, 80077ce <LL_RTC_Init+0x52>
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8007790:	68a3      	ldr	r3, [r4, #8]
 8007792:	682a      	ldr	r2, [r5, #0]
 8007794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007798:	4313      	orrs	r3, r2
 800779a:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 800779c:	6923      	ldr	r3, [r4, #16]
 800779e:	68aa      	ldr	r2, [r5, #8]
 80077a0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80077a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077a8:	4313      	orrs	r3, r2
 80077aa:	6123      	str	r3, [r4, #16]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_POSITION_PRER_PREDIV_A);
 80077ac:	6921      	ldr	r1, [r4, #16]
 80077ae:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
 80077b2:	fa93 f3a3 	rbit	r3, r3
 80077b6:	fab3 f283 	clz	r2, r3
 80077ba:	686b      	ldr	r3, [r5, #4]
 80077bc:	4093      	lsls	r3, r2
 80077be:	f421 02fe 	bic.w	r2, r1, #8323072	; 0x7f0000
 80077c2:	4313      	orrs	r3, r2
 80077c4:	6123      	str	r3, [r4, #16]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 80077c6:	f06f 0380 	mvn.w	r3, #128	; 0x80
 80077ca:	60e3      	str	r3, [r4, #12]
    status = SUCCESS;
 80077cc:	2001      	movs	r0, #1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80077ce:	23ff      	movs	r3, #255	; 0xff
 80077d0:	6263      	str	r3, [r4, #36]	; 0x24
}
 80077d2:	bd38      	pop	{r3, r4, r5, pc}

080077d4 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 80077d4:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 80077d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077da:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 80077dc:	68c3      	ldr	r3, [r0, #12]
 80077de:	491e      	ldr	r1, [pc, #120]	; (8007858 <LL_RTC_WaitForSynchro+0x84>)
 80077e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e4:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 80077e8:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 80077ea:	68c2      	ldr	r2, [r0, #12]
  ErrorStatus status = SUCCESS;
 80077ec:	2301      	movs	r3, #1
 80077ee:	f3c2 1240 	ubfx	r2, r2, #5, #1
  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
  while ((timeout != 0U) && (tmp != 0U))
 80077f2:	9c01      	ldr	r4, [sp, #4]
 80077f4:	b91c      	cbnz	r4, 80077fe <LL_RTC_WaitForSynchro+0x2a>
    {
      status = ERROR;
    }
  }

  if (status != ERROR)
 80077f6:	b99b      	cbnz	r3, 8007820 <LL_RTC_WaitForSynchro+0x4c>
      }
    }
  }

  return (status);
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	b002      	add	sp, #8
 80077fc:	bd10      	pop	{r4, pc}
  while ((timeout != 0U) && (tmp != 0U))
 80077fe:	2a00      	cmp	r2, #0
 8007800:	d0f9      	beq.n	80077f6 <LL_RTC_WaitForSynchro+0x22>
 8007802:	680a      	ldr	r2, [r1, #0]
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8007804:	03d4      	lsls	r4, r2, #15
      timeout--;
 8007806:	bf42      	ittt	mi
 8007808:	9a01      	ldrmi	r2, [sp, #4]
 800780a:	f102 32ff 	addmi.w	r2, r2, #4294967295
 800780e:	9201      	strmi	r2, [sp, #4]
 8007810:	68c2      	ldr	r2, [r0, #12]
    if (timeout == 0U)
 8007812:	9c01      	ldr	r4, [sp, #4]
      status = ERROR;
 8007814:	2c00      	cmp	r4, #0
 8007816:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800781a:	bf08      	it	eq
 800781c:	2300      	moveq	r3, #0
 800781e:	e7e8      	b.n	80077f2 <LL_RTC_WaitForSynchro+0x1e>
    timeout = RTC_SYNCHRO_TIMEOUT;
 8007820:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007824:	9201      	str	r2, [sp, #4]
 8007826:	68c2      	ldr	r2, [r0, #12]
 8007828:	490b      	ldr	r1, [pc, #44]	; (8007858 <LL_RTC_WaitForSynchro+0x84>)
 800782a:	f3c2 1240 	ubfx	r2, r2, #5, #1
    while ((timeout != 0U) && (tmp != 1U))
 800782e:	9c01      	ldr	r4, [sp, #4]
 8007830:	2c00      	cmp	r4, #0
 8007832:	d0e1      	beq.n	80077f8 <LL_RTC_WaitForSynchro+0x24>
 8007834:	2a00      	cmp	r2, #0
 8007836:	d1df      	bne.n	80077f8 <LL_RTC_WaitForSynchro+0x24>
 8007838:	680a      	ldr	r2, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800783a:	03d2      	lsls	r2, r2, #15
        timeout--;
 800783c:	bf42      	ittt	mi
 800783e:	9a01      	ldrmi	r2, [sp, #4]
 8007840:	f102 32ff 	addmi.w	r2, r2, #4294967295
 8007844:	9201      	strmi	r2, [sp, #4]
 8007846:	68c2      	ldr	r2, [r0, #12]
      if (timeout == 0U)
 8007848:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 800784a:	2c00      	cmp	r4, #0
 800784c:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8007850:	bf08      	it	eq
 8007852:	2300      	moveq	r3, #0
 8007854:	e7eb      	b.n	800782e <LL_RTC_WaitForSynchro+0x5a>
 8007856:	bf00      	nop
 8007858:	e000e010 	.word	0xe000e010

0800785c <LL_RTC_TIME_Init>:
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 800785c:	6883      	ldr	r3, [r0, #8]
{
 800785e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007860:	4615      	mov	r5, r2
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8007862:	065a      	lsls	r2, r3, #25
      RTC_TimeStruct->TimeFormat = 0x00U;
 8007864:	bf5c      	itt	pl
 8007866:	2300      	movpl	r3, #0
 8007868:	602b      	strpl	r3, [r5, #0]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800786a:	23ca      	movs	r3, #202	; 0xca
 800786c:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800786e:	2353      	movs	r3, #83	; 0x53
 8007870:	6243      	str	r3, [r0, #36]	; 0x24
{
 8007872:	4604      	mov	r4, r0
  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8007874:	460e      	mov	r6, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8007876:	f7ff ff59 	bl	800772c <LL_RTC_EnterInitMode>
 800787a:	b190      	cbz	r0, 80078a2 <LL_RTC_TIME_Init+0x46>
 800787c:	796b      	ldrb	r3, [r5, #5]
 800787e:	792a      	ldrb	r2, [r5, #4]
 8007880:	79a8      	ldrb	r0, [r5, #6]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8007882:	b196      	cbz	r6, 80078aa <LL_RTC_TIME_Init+0x4e>
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8007884:	9000      	str	r0, [sp, #0]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8007886:	6829      	ldr	r1, [r5, #0]
 8007888:	4620      	mov	r0, r4
 800788a:	f7ff fe9f 	bl	80075cc <LL_RTC_TIME_Config>
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 800788e:	4b14      	ldr	r3, [pc, #80]	; (80078e0 <LL_RTC_TIME_Init+0x84>)
 8007890:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007894:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8007896:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8007898:	069b      	lsls	r3, r3, #26
 800789a:	d41e      	bmi.n	80078da <LL_RTC_TIME_Init+0x7e>
      status = LL_RTC_WaitForSynchro(RTCx);
 800789c:	4620      	mov	r0, r4
 800789e:	f7ff ff99 	bl	80077d4 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80078a2:	23ff      	movs	r3, #255	; 0xff
 80078a4:	6263      	str	r3, [r4, #36]	; 0x24
}
 80078a6:	b002      	add	sp, #8
 80078a8:	bd70      	pop	{r4, r5, r6, pc}
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 80078aa:	210a      	movs	r1, #10
 80078ac:	fbb3 f6f1 	udiv	r6, r3, r1
 80078b0:	fb01 3316 	mls	r3, r1, r6, r3
 80078b4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 80078b8:	fbb2 f6f1 	udiv	r6, r2, r1
 80078bc:	fb01 2216 	mls	r2, r1, r6, r2
 80078c0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 80078c4:	fbb0 f6f1 	udiv	r6, r0, r1
 80078c8:	fb01 0116 	mls	r1, r1, r6, r0
 80078cc:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 80078d0:	b2c9      	uxtb	r1, r1
 80078d2:	9100      	str	r1, [sp, #0]
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	b2d2      	uxtb	r2, r2
 80078d8:	e7d5      	b.n	8007886 <LL_RTC_TIME_Init+0x2a>
      status = SUCCESS;
 80078da:	2001      	movs	r0, #1
 80078dc:	e7e1      	b.n	80078a2 <LL_RTC_TIME_Init+0x46>
 80078de:	bf00      	nop
 80078e0:	40002800 	.word	0x40002800

080078e4 <LL_RTC_DATE_Init>:
{
 80078e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078e6:	4604      	mov	r4, r0
 80078e8:	4616      	mov	r6, r2
  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 80078ea:	460f      	mov	r7, r1
 80078ec:	b931      	cbnz	r1, 80078fc <LL_RTC_DATE_Init+0x18>
 80078ee:	7853      	ldrb	r3, [r2, #1]
 80078f0:	06da      	lsls	r2, r3, #27
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 80078f2:	bf42      	ittt	mi
 80078f4:	f023 0310 	bicmi.w	r3, r3, #16
 80078f8:	330a      	addmi	r3, #10
 80078fa:	7073      	strbmi	r3, [r6, #1]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80078fc:	23ca      	movs	r3, #202	; 0xca
 80078fe:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8007900:	2353      	movs	r3, #83	; 0x53
 8007902:	6263      	str	r3, [r4, #36]	; 0x24
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8007904:	4620      	mov	r0, r4
 8007906:	f7ff ff11 	bl	800772c <LL_RTC_EnterInitMode>
 800790a:	b198      	cbz	r0, 8007934 <LL_RTC_DATE_Init+0x50>
 800790c:	7873      	ldrb	r3, [r6, #1]
 800790e:	78b5      	ldrb	r5, [r6, #2]
 8007910:	7831      	ldrb	r1, [r6, #0]
 8007912:	78f6      	ldrb	r6, [r6, #3]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8007914:	b197      	cbz	r7, 800793c <LL_RTC_DATE_Init+0x58>
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 8007916:	9600      	str	r6, [sp, #0]
 8007918:	462a      	mov	r2, r5
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800791a:	4620      	mov	r0, r4
 800791c:	f7ff feaa 	bl	8007674 <LL_RTC_DATE_Config>
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8007920:	4b13      	ldr	r3, [pc, #76]	; (8007970 <LL_RTC_DATE_Init+0x8c>)
 8007922:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007926:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8007928:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 800792a:	069b      	lsls	r3, r3, #26
 800792c:	d41e      	bmi.n	800796c <LL_RTC_DATE_Init+0x88>
      status = LL_RTC_WaitForSynchro(RTCx);
 800792e:	4620      	mov	r0, r4
 8007930:	f7ff ff50 	bl	80077d4 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8007934:	23ff      	movs	r3, #255	; 0xff
 8007936:	6263      	str	r3, [r4, #36]	; 0x24
}
 8007938:	b003      	add	sp, #12
 800793a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 800793c:	200a      	movs	r0, #10
 800793e:	fbb3 f2f0 	udiv	r2, r3, r0
 8007942:	fb00 3312 	mls	r3, r0, r2, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8007946:	fbb5 f7f0 	udiv	r7, r5, r0
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 800794a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800794e:	fb00 5217 	mls	r2, r0, r7, r5
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8007952:	fbb6 f5f0 	udiv	r5, r6, r0
 8007956:	fb00 6015 	mls	r0, r0, r5, r6
 800795a:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800795e:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 8007962:	b2c0      	uxtb	r0, r0
 8007964:	9000      	str	r0, [sp, #0]
 8007966:	b2db      	uxtb	r3, r3
 8007968:	b2d2      	uxtb	r2, r2
 800796a:	e7d6      	b.n	800791a <LL_RTC_DATE_Init+0x36>
      status = SUCCESS;
 800796c:	2001      	movs	r0, #1
 800796e:	e7e1      	b.n	8007934 <LL_RTC_DATE_Init+0x50>
 8007970:	40002800 	.word	0x40002800

08007974 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007974:	b084      	sub	sp, #16
 8007976:	b510      	push	{r4, lr}
 8007978:	ac03      	add	r4, sp, #12
 800797a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 800797e:	9904      	ldr	r1, [sp, #16]
 8007980:	9b03      	ldr	r3, [sp, #12]
 8007982:	6842      	ldr	r2, [r0, #4]
 8007984:	430b      	orrs	r3, r1
 8007986:	9905      	ldr	r1, [sp, #20]
 8007988:	430b      	orrs	r3, r1
 800798a:	9906      	ldr	r1, [sp, #24]
 800798c:	430b      	orrs	r3, r1
 800798e:	9907      	ldr	r1, [sp, #28]
 8007990:	430b      	orrs	r3, r1
 8007992:	9908      	ldr	r1, [sp, #32]
                                              Init.BusWide             |\
                                              Init.HardwareFlowControl |\
                                              Init.ClockDiv);  

  return HAL_OK;
}
 8007994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8007998:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 800799c:	430b      	orrs	r3, r1
 800799e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80079a2:	4313      	orrs	r3, r2
 80079a4:	6043      	str	r3, [r0, #4]
}
 80079a6:	b004      	add	sp, #16
 80079a8:	2000      	movs	r0, #0
 80079aa:	4770      	bx	lr

080079ac <SDMMC_ReadFIFO>:
 80079ac:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80079b0:	4770      	bx	lr

080079b2 <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80079b2:	2303      	movs	r3, #3
 80079b4:	6003      	str	r3, [r0, #0]
  
  return HAL_OK; 
}
 80079b6:	2000      	movs	r0, #0
 80079b8:	4770      	bx	lr

080079ba <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80079ba:	6800      	ldr	r0, [r0, #0]
}
 80079bc:	f000 0003 	and.w	r0, r0, #3
 80079c0:	4770      	bx	lr

080079c2 <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80079c2:	680b      	ldr	r3, [r1, #0]
 80079c4:	6083      	str	r3, [r0, #8]

  /* Set SDMMC command parameters */
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80079c6:	68c3      	ldr	r3, [r0, #12]
 80079c8:	684a      	ldr	r2, [r1, #4]
 80079ca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80079ce:	f023 030f 	bic.w	r3, r3, #15
 80079d2:	4313      	orrs	r3, r2
 80079d4:	688a      	ldr	r2, [r1, #8]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	68ca      	ldr	r2, [r1, #12]
 80079da:	4313      	orrs	r3, r2
 80079dc:	690a      	ldr	r2, [r1, #16]
 80079de:	4313      	orrs	r3, r2
 80079e0:	60c3      	str	r3, [r0, #12]
                                          Command->Response         |\
                                          Command->WaitForInterrupt |\
                                          Command->CPSM); 
  
  return HAL_OK;  
}
 80079e2:	2000      	movs	r0, #0
 80079e4:	4770      	bx	lr

080079e6 <SDMMC_GetCommandResponse>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
  return (uint8_t)(SDMMCx->RESPCMD);
 80079e6:	6900      	ldr	r0, [r0, #16]
}
 80079e8:	b2c0      	uxtb	r0, r0
 80079ea:	4770      	bx	lr

080079ec <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80079ec:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80079ee:	3014      	adds	r0, #20
 80079f0:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80079f6:	9101      	str	r1, [sp, #4]
  
  return (*(__IO uint32_t *) tmp);
 80079f8:	9b01      	ldr	r3, [sp, #4]
 80079fa:	6818      	ldr	r0, [r3, #0]
}  
 80079fc:	b002      	add	sp, #8
 80079fe:	4770      	bx	lr

08007a00 <SDMMC_DataConfig>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007a00:	680b      	ldr	r3, [r1, #0]
 8007a02:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007a04:	684b      	ldr	r3, [r1, #4]
 8007a06:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 8007a08:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007a0a:	688a      	ldr	r2, [r1, #8]
 8007a0c:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 8007a10:	4313      	orrs	r3, r2
 8007a12:	68ca      	ldr	r2, [r1, #12]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	690a      	ldr	r2, [r1, #16]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	694a      	ldr	r2, [r1, #20]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	62c3      	str	r3, [r0, #44]	; 0x2c
                                              Data->TransferMode  |\
                                              Data->DPSM);

  return HAL_OK;

}
 8007a20:	2000      	movs	r0, #0
 8007a22:	4770      	bx	lr

08007a24 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8007a24:	b538      	push	{r3, r4, r5, lr}
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8007a26:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007a28:	07db      	lsls	r3, r3, #31
{
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	460d      	mov	r5, r1
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007a2e:	d501      	bpl.n	8007a34 <LL_USART_Init+0x10>
  ErrorStatus status = ERROR;
 8007a30:	2000      	movs	r0, #0
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007a34:	68ea      	ldr	r2, [r5, #12]
 8007a36:	686b      	ldr	r3, [r5, #4]
 8007a38:	6801      	ldr	r1, [r0, #0]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	692a      	ldr	r2, [r5, #16]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	69aa      	ldr	r2, [r5, #24]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	4a24      	ldr	r2, [pc, #144]	; (8007ad8 <LL_USART_Init+0xb4>)
 8007a46:	400a      	ands	r2, r1
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	6003      	str	r3, [r0, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007a4c:	6843      	ldr	r3, [r0, #4]
 8007a4e:	68aa      	ldr	r2, [r5, #8]
 8007a50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007a54:	4313      	orrs	r3, r2
 8007a56:	6043      	str	r3, [r0, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007a58:	6883      	ldr	r3, [r0, #8]
 8007a5a:	696a      	ldr	r2, [r5, #20]
 8007a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a60:	4313      	orrs	r3, r2
 8007a62:	6083      	str	r3, [r0, #8]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8007a64:	4b1d      	ldr	r3, [pc, #116]	; (8007adc <LL_USART_Init+0xb8>)
 8007a66:	4298      	cmp	r0, r3
 8007a68:	d11a      	bne.n	8007aa0 <LL_USART_Init+0x7c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8007a6a:	2003      	movs	r0, #3
    }
    else if (USARTx == USART2)
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8007a6c:	f7ff fd04 	bl	8007478 <LL_RCC_GetUSARTClockFreq>

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d0dd      	beq.n	8007a30 <LL_USART_Init+0xc>
        && (USART_InitStruct->BaudRate != 0U))
 8007a74:	682a      	ldr	r2, [r5, #0]
 8007a76:	2a00      	cmp	r2, #0
 8007a78:	d0da      	beq.n	8007a30 <LL_USART_Init+0xc>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007a7a:	69ab      	ldr	r3, [r5, #24]
 8007a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a80:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8007a84:	d123      	bne.n	8007ace <LL_USART_Init+0xaa>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007a86:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007a8a:	fbb3 f3f2 	udiv	r3, r3, r2
    brrtemp = usartdiv & 0xFFF0U;
 8007a8e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8007a92:	401a      	ands	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a94:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007a98:	4313      	orrs	r3, r2
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007a9a:	60e3      	str	r3, [r4, #12]
    {
      status = SUCCESS;
 8007a9c:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8007a9e:	bd38      	pop	{r3, r4, r5, pc}
    else if (USARTx == USART2)
 8007aa0:	4b0f      	ldr	r3, [pc, #60]	; (8007ae0 <LL_USART_Init+0xbc>)
 8007aa2:	4298      	cmp	r0, r3
 8007aa4:	d101      	bne.n	8007aaa <LL_USART_Init+0x86>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8007aa6:	200c      	movs	r0, #12
 8007aa8:	e7e0      	b.n	8007a6c <LL_USART_Init+0x48>
    else if (USARTx == USART3)
 8007aaa:	4b0e      	ldr	r3, [pc, #56]	; (8007ae4 <LL_USART_Init+0xc0>)
 8007aac:	4298      	cmp	r0, r3
 8007aae:	d101      	bne.n	8007ab4 <LL_USART_Init+0x90>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8007ab0:	2030      	movs	r0, #48	; 0x30
 8007ab2:	e7db      	b.n	8007a6c <LL_USART_Init+0x48>
    else if (USARTx == UART4)
 8007ab4:	4b0c      	ldr	r3, [pc, #48]	; (8007ae8 <LL_USART_Init+0xc4>)
 8007ab6:	4298      	cmp	r0, r3
 8007ab8:	d103      	bne.n	8007ac2 <LL_USART_Init+0x9e>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8007aba:	20c0      	movs	r0, #192	; 0xc0
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8007abc:	f7ff fd3e 	bl	800753c <LL_RCC_GetUARTClockFreq>
 8007ac0:	e7d6      	b.n	8007a70 <LL_USART_Init+0x4c>
    else if (USARTx == UART5)
 8007ac2:	4b0a      	ldr	r3, [pc, #40]	; (8007aec <LL_USART_Init+0xc8>)
 8007ac4:	4298      	cmp	r0, r3
 8007ac6:	d1b3      	bne.n	8007a30 <LL_USART_Init+0xc>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8007ac8:	f44f 7040 	mov.w	r0, #768	; 0x300
 8007acc:	e7f6      	b.n	8007abc <LL_USART_Init+0x98>
 8007ace:	4403      	add	r3, r0
 8007ad0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	e7e0      	b.n	8007a9a <LL_USART_Init+0x76>
 8007ad8:	efff69f3 	.word	0xefff69f3
 8007adc:	40013800 	.word	0x40013800
 8007ae0:	40004400 	.word	0x40004400
 8007ae4:	40004800 	.word	0x40004800
 8007ae8:	40004c00 	.word	0x40004c00
 8007aec:	40005000 	.word	0x40005000

08007af0 <USB_CoreInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007af0:	b084      	sub	sp, #16
 8007af2:	b538      	push	{r3, r4, r5, lr}
 8007af4:	ad05      	add	r5, sp, #20
 8007af6:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007afa:	68c3      	ldr	r3, [r0, #12]
 8007afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
{
 8007b00:	4604      	mov	r4, r0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b02:	60c3      	str	r3, [r0, #12]
  
  /* Reset after a PHY select and set Host mode */
  USB_CoreReset(USBx);
 8007b04:	f000 fb76 	bl	80081f4 <USB_CoreReset>
  
  /* Deactivate the power down*/
  USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8007b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b0c:	63a3      	str	r3, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8007b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b12:	2000      	movs	r0, #0
 8007b14:	b004      	add	sp, #16
 8007b16:	4770      	bx	lr

08007b18 <USB_EnableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007b18:	6883      	ldr	r3, [r0, #8]
 8007b1a:	f043 0301 	orr.w	r3, r3, #1
 8007b1e:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8007b20:	2000      	movs	r0, #0
 8007b22:	4770      	bx	lr

08007b24 <USB_DisableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b24:	6883      	ldr	r3, [r0, #8]
 8007b26:	f023 0301 	bic.w	r3, r3, #1
 8007b2a:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	4770      	bx	lr

08007b30 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_ModeTypeDef mode)
{
 8007b30:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8007b32:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_HOST_MODE)
 8007b34:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8007b36:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007b3a:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_HOST_MODE)
 8007b3c:	d108      	bne.n	8007b50 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8007b3e:	68c3      	ldr	r3, [r0, #12]
 8007b40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b44:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50);
 8007b46:	2032      	movs	r0, #50	; 0x32
 8007b48:	f7fc fe22 	bl	8004790 <HAL_Delay>
  
  return HAL_OK;
}
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	bd08      	pop	{r3, pc}
  else if ( mode == USB_DEVICE_MODE)
 8007b50:	2900      	cmp	r1, #0
 8007b52:	d1f8      	bne.n	8007b46 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8007b54:	68c3      	ldr	r3, [r0, #12]
 8007b56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b5a:	60c3      	str	r3, [r0, #12]
 8007b5c:	e7f3      	b.n	8007b46 <USB_SetCurrentMode+0x16>
	...

08007b60 <USB_DevInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b60:	b084      	sub	sp, #16
 8007b62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b66:	4604      	mov	r4, r0
 8007b68:	a809      	add	r0, sp, #36	; 0x24
 8007b6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t index = 0;

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007b6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b70:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8007b72:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8007b76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b7a:	4689      	mov	r9, r1
 8007b7c:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 8007b7e:	b95f      	cbnz	r7, 8007b98 <USB_DevInit+0x38>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8007b80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b86:	63a3      	str	r3, [r4, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b8e:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b96:	6023      	str	r3, [r4, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 8007b98:	2500      	movs	r5, #0
 8007b9a:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007b9e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8007ba2:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  /* Set Full speed phy */
  USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8007ba6:	2103      	movs	r1, #3
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f000 f893 	bl	8007cd4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 8007bae:	2110      	movs	r1, #16
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f000 f86d 	bl	8007c90 <USB_FlushTxFifo>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007bb6:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  USB_FlushRxFifo(USBx);
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f000 f87a 	bl	8007cb4 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
  USBx_DEVICE->DOEPMSK = 0;
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8007bc0:	f04f 33ff 	mov.w	r3, #4294967295
  USBx_DEVICE->DIEPMSK = 0;
 8007bc4:	6135      	str	r5, [r6, #16]
 8007bc6:	462a      	mov	r2, r5
  USBx_DEVICE->DOEPMSK = 0;
 8007bc8:	6175      	str	r5, [r6, #20]
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8007bca:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8007bce:	61b3      	str	r3, [r6, #24]
    {
      USBx_INEP(index)->DIEPCTL = 0;
    }
    
    USBx_INEP(index)->DIEPTSIZ = 0;
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8007bd0:	20ff      	movs	r0, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0;
 8007bd2:	61f5      	str	r5, [r6, #28]
 8007bd4:	f504 6310 	add.w	r3, r4, #2304	; 0x900
  for (index = 0; index < cfg.dev_endpoints; index++)
 8007bd8:	454d      	cmp	r5, r9
 8007bda:	d13c      	bne.n	8007c56 <USB_DevInit+0xf6>
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8007be2:	4611      	mov	r1, r2
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8007be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    {
      USBx_OUTEP(index)->DOEPCTL = 0;
    }
    
    USBx_OUTEP(index)->DOEPTSIZ = 0;
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8007be8:	f04f 0eff 	mov.w	lr, #255	; 0xff
  for (index = 0; index < cfg.dev_endpoints; index++)
 8007bec:	4295      	cmp	r5, r2
 8007bee:	d13e      	bne.n	8007c6e <USB_DevInit+0x10e>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007bf0:	6933      	ldr	r3, [r6, #16]
  
  if (cfg.dma_enable == 1)
 8007bf2:	f1b8 0f01 	cmp.w	r8, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007bf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bfa:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 8007bfc:	d108      	bne.n	8007c10 <USB_DevInit+0xb0>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8007bfe:	4b22      	ldr	r3, [pc, #136]	; (8007c88 <USB_DevInit+0x128>)
 8007c00:	6333      	str	r3, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8007c02:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8007c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c08:	f043 0303 	orr.w	r3, r3, #3
 8007c0c:	6333      	str	r3, [r6, #48]	; 0x30
    
    index= USBx_DEVICE->DTHRCTL;
 8007c0e:	6b33      	ldr	r3, [r6, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 8007c10:	2300      	movs	r3, #0
 8007c12:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 8007c14:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8007c18:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8007c1a:	f1b8 0f00 	cmp.w	r8, #0
 8007c1e:	d103      	bne.n	8007c28 <USB_DevInit+0xc8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8007c20:	69a3      	ldr	r3, [r4, #24]
 8007c22:	f043 0310 	orr.w	r3, r3, #16
 8007c26:	61a3      	str	r3, [r4, #24]
  }

    /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8007c28:	69a2      	ldr	r2, [r4, #24]
 8007c2a:	4b18      	ldr	r3, [pc, #96]	; (8007c8c <USB_DevInit+0x12c>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 8007c30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c32:	b11b      	cbz	r3, 8007c3c <USB_DevInit+0xdc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007c34:	69a3      	ldr	r3, [r4, #24]
 8007c36:	f043 0308 	orr.w	r3, r3, #8
 8007c3a:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8007c3c:	2f01      	cmp	r7, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8007c3e:	bf01      	itttt	eq
 8007c40:	69a3      	ldreq	r3, [r4, #24]
 8007c42:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8007c46:	f043 0304 	orreq.w	r3, r3, #4
 8007c4a:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 8007c4c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c50:	2000      	movs	r0, #0
 8007c52:	b004      	add	sp, #16
 8007c54:	4770      	bx	lr
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c56:	f8d3 e000 	ldr.w	lr, [r3]
 8007c5a:	f1be 0f00 	cmp.w	lr, #0
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8007c5e:	bfb4      	ite	lt
 8007c60:	6019      	strlt	r1, [r3, #0]
      USBx_INEP(index)->DIEPCTL = 0;
 8007c62:	601a      	strge	r2, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8007c64:	3501      	adds	r5, #1
    USBx_INEP(index)->DIEPTSIZ = 0;
 8007c66:	611a      	str	r2, [r3, #16]
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8007c68:	6098      	str	r0, [r3, #8]
 8007c6a:	3320      	adds	r3, #32
 8007c6c:	e7b4      	b.n	8007bd8 <USB_DevInit+0x78>
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c6e:	f8d3 c000 	ldr.w	ip, [r3]
 8007c72:	f1bc 0f00 	cmp.w	ip, #0
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8007c76:	bfb4      	ite	lt
 8007c78:	6018      	strlt	r0, [r3, #0]
      USBx_OUTEP(index)->DOEPCTL = 0;
 8007c7a:	6019      	strge	r1, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8007c7c:	3201      	adds	r2, #1
    USBx_OUTEP(index)->DOEPTSIZ = 0;
 8007c7e:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8007c80:	f8c3 e008 	str.w	lr, [r3, #8]
 8007c84:	3320      	adds	r3, #32
 8007c86:	e7b1      	b.n	8007bec <USB_DevInit+0x8c>
 8007c88:	00800100 	.word	0x00800100
 8007c8c:	803c3800 	.word	0x803c3800

08007c90 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8007c90:	0189      	lsls	r1, r1, #6
 8007c92:	f041 0120 	orr.w	r1, r1, #32
 8007c96:	4a06      	ldr	r2, [pc, #24]	; (8007cb0 <USB_FlushTxFifo+0x20>)
 8007c98:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000)
 8007c9a:	3a01      	subs	r2, #1
 8007c9c:	d005      	beq.n	8007caa <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c9e:	6903      	ldr	r3, [r0, #16]
 8007ca0:	f013 0320 	ands.w	r3, r3, #32
 8007ca4:	d1f9      	bne.n	8007c9a <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	4770      	bx	lr
      return HAL_TIMEOUT;
 8007caa:	2003      	movs	r0, #3
}
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	00030d41 	.word	0x00030d41

08007cb4 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007cb4:	2310      	movs	r3, #16
 8007cb6:	4a06      	ldr	r2, [pc, #24]	; (8007cd0 <USB_FlushRxFifo+0x1c>)
 8007cb8:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8007cba:	3a01      	subs	r2, #1
 8007cbc:	d005      	beq.n	8007cca <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007cbe:	6903      	ldr	r3, [r0, #16]
 8007cc0:	f013 0310 	ands.w	r3, r3, #16
 8007cc4:	d1f9      	bne.n	8007cba <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	4770      	bx	lr
      return HAL_TIMEOUT;
 8007cca:	2003      	movs	r0, #3
}
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	00030d41 	.word	0x00030d41

08007cd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8007cd4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007cd8:	4319      	orrs	r1, r3
 8007cda:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8007cde:	2000      	movs	r0, #0
 8007ce0:	4770      	bx	lr

08007ce2 <USB_ActivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ce2:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1)
 8007ce4:	784b      	ldrb	r3, [r1, #1]
 8007ce6:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8007ce8:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8007cec:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d11b      	bne.n	8007d2c <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8007cf4:	40a3      	lsls	r3, r4
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8007cfa:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8007cfe:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8007d00:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	0412      	lsls	r2, r2, #16
 8007d08:	d40e      	bmi.n	8007d28 <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8007d0a:	688a      	ldr	r2, [r1, #8]
 8007d0c:	78c8      	ldrb	r0, [r1, #3]
 8007d0e:	681d      	ldr	r5, [r3, #0]
 8007d10:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007d14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007d18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d1c:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 8007d20:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8007d24:	4328      	orrs	r0, r5
 8007d26:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8007d28:	2000      	movs	r0, #0
 8007d2a:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8007d2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d30:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8007d32:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8007d36:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8007d38:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8007d3c:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8007d3e:	6803      	ldr	r3, [r0, #0]
 8007d40:	041b      	lsls	r3, r3, #16
 8007d42:	d4f1      	bmi.n	8007d28 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8007d44:	688b      	ldr	r3, [r1, #8]
 8007d46:	78c9      	ldrb	r1, [r1, #3]
 8007d48:	6802      	ldr	r2, [r0, #0]
 8007d4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d56:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	6003      	str	r3, [r0, #0]
 8007d5e:	e7e3      	b.n	8007d28 <USB_ActivateEndpoint+0x46>

08007d60 <USB_DeactivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d60:	b510      	push	{r4, lr}
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8007d62:	784b      	ldrb	r3, [r1, #1]
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8007d64:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8007d68:	7809      	ldrb	r1, [r1, #0]
 8007d6a:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d111      	bne.n	8007d96 <USB_DeactivateEndpoint+0x36>
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8007d72:	408b      	lsls	r3, r1
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	43db      	mvns	r3, r3
 8007d78:	401c      	ands	r4, r3
 8007d7a:	63d4      	str	r4, [r2, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8007d7c:	69d4      	ldr	r4, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8007d7e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8007d82:	4023      	ands	r3, r4
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8007d84:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8007d88:	61d3      	str	r3, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8007d8a:	6803      	ldr	r3, [r0, #0]
 8007d8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d90:	6003      	str	r3, [r0, #0]
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
  }
  return HAL_OK;
}
 8007d92:	2000      	movs	r0, #0
 8007d94:	bd10      	pop	{r4, pc}
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8007d96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d9a:	408b      	lsls	r3, r1
 8007d9c:	43db      	mvns	r3, r3
 8007d9e:	401c      	ands	r4, r3
 8007da0:	63d4      	str	r4, [r2, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8007da2:	69d4      	ldr	r4, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8007da4:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8007da8:	4023      	ands	r3, r4
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8007daa:	eb00 1041 	add.w	r0, r0, r1, lsl #5
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8007dae:	61d3      	str	r3, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8007db0:	6803      	ldr	r3, [r0, #0]
 8007db2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007db6:	6003      	str	r3, [r0, #0]
 8007db8:	e7eb      	b.n	8007d92 <USB_DeactivateEndpoint+0x32>
	...

08007dbc <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8007dbe:	784b      	ldrb	r3, [r1, #1]
 8007dc0:	780c      	ldrb	r4, [r1, #0]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	694b      	ldr	r3, [r1, #20]
 8007dc6:	d163      	bne.n	8007e90 <USB_EPStartXfer+0xd4>
 8007dc8:	2520      	movs	r5, #32
 8007dca:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007dce:	fb15 6404 	smlabb	r4, r5, r4, r6
 8007dd2:	6925      	ldr	r5, [r4, #16]
    if (ep->xfer_len == 0)
 8007dd4:	bb73      	cbnz	r3, 8007e34 <USB_EPStartXfer+0x78>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007dd6:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8007dda:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8007dde:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8007de0:	6925      	ldr	r5, [r4, #16]
 8007de2:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8007de6:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8007de8:	6925      	ldr	r5, [r4, #16]
 8007dea:	0ced      	lsrs	r5, r5, #19
 8007dec:	04ed      	lsls	r5, r5, #19
 8007dee:	6125      	str	r5, [r4, #16]
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
      }       
    }
      if (ep->type != EP_TYPE_ISOC)
 8007df0:	78cf      	ldrb	r7, [r1, #3]
 8007df2:	780d      	ldrb	r5, [r1, #0]
 8007df4:	2f01      	cmp	r7, #1
 8007df6:	f000 8089 	beq.w	8007f0c <USB_EPStartXfer+0x150>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8007dfa:	b14b      	cbz	r3, 8007e10 <USB_EPStartXfer+0x54>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 8007dfc:	f8d0 c834 	ldr.w	ip, [r0, #2100]	; 0x834
 8007e00:	2401      	movs	r4, #1
 8007e02:	40ac      	lsls	r4, r5
 8007e04:	ea44 040c 	orr.w	r4, r4, ip
 8007e08:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 8007e0c:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e10:	780d      	ldrb	r5, [r1, #0]
 8007e12:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 8007e16:	2f01      	cmp	r7, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e18:	6834      	ldr	r4, [r6, #0]
 8007e1a:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8007e1e:	6034      	str	r4, [r6, #0]
    if (ep->type == EP_TYPE_ISOC)
 8007e20:	d105      	bne.n	8007e2e <USB_EPStartXfer+0x72>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8007e22:	9200      	str	r2, [sp, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	462a      	mov	r2, r5
 8007e28:	68c9      	ldr	r1, [r1, #12]
 8007e2a:	f000 f8e3 	bl	8007ff4 <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8007e2e:	2000      	movs	r0, #0
 8007e30:	b003      	add	sp, #12
 8007e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e34:	0ced      	lsrs	r5, r5, #19
 8007e36:	04ed      	lsls	r5, r5, #19
 8007e38:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007e3a:	6925      	ldr	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8007e3c:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007e3e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8007e42:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8007e46:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8007e48:	19dd      	adds	r5, r3, r7
 8007e4a:	3d01      	subs	r5, #1
 8007e4c:	fbb5 f7f7 	udiv	r7, r5, r7
 8007e50:	4d35      	ldr	r5, [pc, #212]	; (8007f28 <USB_EPStartXfer+0x16c>)
 8007e52:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8007e56:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 8007e5a:	ea45 050e 	orr.w	r5, r5, lr
 8007e5e:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8007e60:	6927      	ldr	r7, [r4, #16]
 8007e62:	f3c3 0512 	ubfx	r5, r3, #0, #19
 8007e66:	433d      	orrs	r5, r7
 8007e68:	6125      	str	r5, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8007e6a:	78cd      	ldrb	r5, [r1, #3]
 8007e6c:	2d01      	cmp	r5, #1
 8007e6e:	d1bf      	bne.n	8007df0 <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8007e70:	6925      	ldr	r5, [r4, #16]
 8007e72:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8007e76:	6125      	str	r5, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
 8007e78:	6925      	ldr	r5, [r4, #16]
 8007e7a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007e7e:	6125      	str	r5, [r4, #16]
 8007e80:	e7b6      	b.n	8007df0 <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007e82:	fb14 6405 	smlabb	r4, r4, r5, r6
 8007e86:	6825      	ldr	r5, [r4, #0]
 8007e88:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007e8c:	6025      	str	r5, [r4, #0]
 8007e8e:	e7bf      	b.n	8007e10 <USB_EPStartXfer+0x54>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8007e90:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8007e94:	eb02 1244 	add.w	r2, r2, r4, lsl #5
 8007e98:	6914      	ldr	r4, [r2, #16]
 8007e9a:	0ce4      	lsrs	r4, r4, #19
 8007e9c:	04e4      	lsls	r4, r4, #19
 8007e9e:	6114      	str	r4, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8007ea0:	6914      	ldr	r4, [r2, #16]
 8007ea2:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007ea6:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007eaa:	6114      	str	r4, [r2, #16]
 8007eac:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0)
 8007eae:	b9db      	cbnz	r3, 8007ee8 <USB_EPStartXfer+0x12c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007eb0:	6913      	ldr	r3, [r2, #16]
 8007eb2:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007eb6:	431c      	orrs	r4, r3
 8007eb8:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;      
 8007eba:	6913      	ldr	r3, [r2, #16]
 8007ebc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ec0:	6113      	str	r3, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 8007ec2:	78cb      	ldrb	r3, [r1, #3]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d10a      	bne.n	8007ede <USB_EPStartXfer+0x122>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8007ec8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8007ecc:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007ed0:	6813      	ldr	r3, [r2, #0]
 8007ed2:	bf0c      	ite	eq
 8007ed4:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007ed8:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8007edc:	6013      	str	r3, [r2, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ede:	6813      	ldr	r3, [r2, #0]
 8007ee0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ee4:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8007ee6:	e7a2      	b.n	8007e2e <USB_EPStartXfer+0x72>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 8007ee8:	4d0f      	ldr	r5, [pc, #60]	; (8007f28 <USB_EPStartXfer+0x16c>)
 8007eea:	6916      	ldr	r6, [r2, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket; 
 8007eec:	4423      	add	r3, r4
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 8007ef4:	ea05 45c3 	and.w	r5, r5, r3, lsl #19
 8007ef8:	4335      	orrs	r5, r6
 8007efa:	6115      	str	r5, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt)); 
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	6915      	ldr	r5, [r2, #16]
 8007f00:	435c      	muls	r4, r3
 8007f02:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007f06:	432c      	orrs	r4, r5
 8007f08:	6114      	str	r4, [r2, #16]
 8007f0a:	e7da      	b.n	8007ec2 <USB_EPStartXfer+0x106>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8007f0c:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8007f10:	f414 7f80 	tst.w	r4, #256	; 0x100
 8007f14:	f04f 0420 	mov.w	r4, #32
 8007f18:	d0b3      	beq.n	8007e82 <USB_EPStartXfer+0xc6>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f1a:	fb14 6405 	smlabb	r4, r4, r5, r6
 8007f1e:	6825      	ldr	r5, [r4, #0]
 8007f20:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8007f24:	6025      	str	r5, [r4, #0]
 8007f26:	e773      	b.n	8007e10 <USB_EPStartXfer+0x54>
 8007f28:	1ff80000 	.word	0x1ff80000

08007f2c <USB_EP0StartXfer>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8007f2c:	784b      	ldrb	r3, [r1, #1]
 8007f2e:	2b01      	cmp	r3, #1
{
 8007f30:	b530      	push	{r4, r5, lr}
 8007f32:	780b      	ldrb	r3, [r1, #0]
 8007f34:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1)
 8007f36:	d13e      	bne.n	8007fb6 <USB_EP0StartXfer+0x8a>
 8007f38:	2220      	movs	r2, #32
 8007f3a:	f500 6410 	add.w	r4, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007f3e:	fb12 4303 	smlabb	r3, r2, r3, r4
 8007f42:	691a      	ldr	r2, [r3, #16]
    if (ep->xfer_len == 0)
 8007f44:	b9fd      	cbnz	r5, 8007f86 <USB_EP0StartXfer+0x5a>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007f46:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007f4a:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8007f4e:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8007f50:	691a      	ldr	r2, [r3, #16]
 8007f52:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007f56:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8007f58:	691a      	ldr	r2, [r3, #16]
 8007f5a:	0cd2      	lsrs	r2, r2, #19
 8007f5c:	04d2      	lsls	r2, r2, #19
 8007f5e:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0)
 8007f60:	694b      	ldr	r3, [r1, #20]
 8007f62:	b13b      	cbz	r3, 8007f74 <USB_EP0StartXfer+0x48>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1 << (ep->num);
 8007f64:	780d      	ldrb	r5, [r1, #0]
 8007f66:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	40ab      	lsls	r3, r5
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 8007f74:	780b      	ldrb	r3, [r1, #0]
 8007f76:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8007f80:	601a      	str	r2, [r3, #0]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8007f82:	2000      	movs	r0, #0
 8007f84:	bd30      	pop	{r4, r5, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f86:	0cd2      	lsrs	r2, r2, #19
 8007f88:	04d2      	lsls	r2, r2, #19
 8007f8a:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007f8c:	691a      	ldr	r2, [r3, #16]
 8007f8e:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007f92:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8007f96:	611a      	str	r2, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8007f98:	688a      	ldr	r2, [r1, #8]
 8007f9a:	4295      	cmp	r5, r2
        ep->xfer_len = ep->maxpacket;
 8007f9c:	bf88      	it	hi
 8007f9e:	614a      	strhi	r2, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8007fa0:	691a      	ldr	r2, [r3, #16]
 8007fa2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007fa6:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8007fa8:	694a      	ldr	r2, [r1, #20]
 8007faa:	691d      	ldr	r5, [r3, #16]
 8007fac:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007fb0:	432a      	orrs	r2, r5
 8007fb2:	611a      	str	r2, [r3, #16]
 8007fb4:	e7d4      	b.n	8007f60 <USB_EP0StartXfer+0x34>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8007fb6:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8007fba:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8007fbe:	6903      	ldr	r3, [r0, #16]
 8007fc0:	0cdb      	lsrs	r3, r3, #19
 8007fc2:	04db      	lsls	r3, r3, #19
 8007fc4:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8007fc6:	6903      	ldr	r3, [r0, #16]
 8007fc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fcc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fd0:	6103      	str	r3, [r0, #16]
 8007fd2:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0)
 8007fd4:	b105      	cbz	r5, 8007fd8 <USB_EP0StartXfer+0xac>
      ep->xfer_len = ep->maxpacket;
 8007fd6:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 8007fd8:	6902      	ldr	r2, [r0, #16]
 8007fda:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007fde:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8007fe0:	6902      	ldr	r2, [r0, #16]
 8007fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8007fea:	6803      	ldr	r3, [r0, #0]
 8007fec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ff0:	6003      	str	r3, [r0, #0]
 8007ff2:	e7c6      	b.n	8007f82 <USB_EP0StartXfer+0x56>

08007ff4 <USB_WritePacket>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  uint32_t count32b= 0 , index= 0;
  count32b =  (len + 3) / 4;
 8007ff4:	3303      	adds	r3, #3
  for (index = 0; index < count32b; index++, src += 4)
  {
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8007ff6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
{
 8007ffa:	b510      	push	{r4, lr}
  count32b =  (len + 3) / 4;
 8007ffc:	109b      	asrs	r3, r3, #2
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8007ffe:	eb00 3202 	add.w	r2, r0, r2, lsl #12
  for (index = 0; index < count32b; index++, src += 4)
 8008002:	2400      	movs	r4, #0
 8008004:	429c      	cmp	r4, r3
 8008006:	d101      	bne.n	800800c <USB_WritePacket+0x18>
  }
  return HAL_OK;
}
 8008008:	2000      	movs	r0, #0
 800800a:	bd10      	pop	{r4, pc}
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 800800c:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8008010:	6010      	str	r0, [r2, #0]
  for (index = 0; index < count32b; index++, src += 4)
 8008012:	3401      	adds	r4, #1
 8008014:	e7f6      	b.n	8008004 <USB_WritePacket+0x10>

08008016 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008016:	b510      	push	{r4, lr}
  uint32_t index=0;
  uint32_t count32b = (len + 3) / 4;
 8008018:	3203      	adds	r2, #3
 800801a:	1092      	asrs	r2, r2, #2
  
  for ( index = 0; index < count32b; index++, dest += 4 )
 800801c:	2300      	movs	r3, #0
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 800801e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( index = 0; index < count32b; index++, dest += 4 )
 8008022:	4293      	cmp	r3, r2
 8008024:	d102      	bne.n	800802c <USB_ReadPacket+0x16>
    
  }
  return ((void *)dest);
}
 8008026:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800802a:	bd10      	pop	{r4, pc}
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 800802c:	6804      	ldr	r4, [r0, #0]
 800802e:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  for ( index = 0; index < count32b; index++, dest += 4 )
 8008032:	3301      	adds	r3, #1
 8008034:	e7f5      	b.n	8008022 <USB_ReadPacket+0xc>

08008036 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8008036:	784b      	ldrb	r3, [r1, #1]
 8008038:	780a      	ldrb	r2, [r1, #0]
 800803a:	2b01      	cmp	r3, #1
 800803c:	f04f 0320 	mov.w	r3, #32
 8008040:	d10b      	bne.n	800805a <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 8008042:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8008046:	fb13 0002 	smlabb	r0, r3, r2, r0
 800804a:	6803      	ldr	r3, [r0, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	db0b      	blt.n	8008068 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8008050:	6803      	ldr	r3, [r0, #0]
 8008052:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008056:	6003      	str	r3, [r0, #0]
 8008058:	e006      	b.n	8008068 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 800805a:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800805e:	fb13 0002 	smlabb	r0, r3, r2, r0
 8008062:	6803      	ldr	r3, [r0, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	daf3      	bge.n	8008050 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008068:	6803      	ldr	r3, [r0, #0]
 800806a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800806e:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8008070:	2000      	movs	r0, #0
 8008072:	4770      	bx	lr

08008074 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8008074:	784b      	ldrb	r3, [r1, #1]
 8008076:	780a      	ldrb	r2, [r1, #0]
 8008078:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800807a:	bf0c      	ite	eq
 800807c:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008080:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8008084:	2320      	movs	r3, #32
 8008086:	fb13 0002 	smlabb	r0, r3, r2, r0
 800808a:	6803      	ldr	r3, [r0, #0]
 800808c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008090:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8008092:	78cb      	ldrb	r3, [r1, #3]
 8008094:	3b02      	subs	r3, #2
 8008096:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008098:	bf9e      	ittt	ls
 800809a:	6803      	ldrls	r3, [r0, #0]
 800809c:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 80080a0:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 80080a2:	2000      	movs	r0, #0
 80080a4:	4770      	bx	lr

080080a6 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the USB device mode
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 80080a6:	b538      	push	{r3, r4, r5, lr}
 80080a8:	f500 612e 	add.w	r1, r0, #2784	; 0xae0
 80080ac:	4604      	mov	r4, r0
 80080ae:	f500 6310 	add.w	r3, r0, #2304	; 0x900
  uint32_t index;
  
  /* Clear Pending interrupt */
  for (index = 0; index < 15 ; index++)
  {
    USBx_INEP(index)->DIEPINT  = 0xFF;
 80080b2:	22ff      	movs	r2, #255	; 0xff
 80080b4:	609a      	str	r2, [r3, #8]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 80080b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80080ba:	3320      	adds	r3, #32
  for (index = 0; index < 15 ; index++)
 80080bc:	428b      	cmp	r3, r1
 80080be:	d1f9      	bne.n	80080b4 <USB_StopDevice+0xe>
  }
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
  
  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0;
 80080c0:	2500      	movs	r5, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80080c2:	f04f 32ff 	mov.w	r2, #4294967295
 80080c6:	f8c4 2818 	str.w	r2, [r4, #2072]	; 0x818
  USBx_DEVICE->DOEPMSK  = 0;
  USBx_DEVICE->DAINTMSK = 0;
  
  /* Flush the FIFO */
  USB_FlushRxFifo(USBx);
 80080ca:	4620      	mov	r0, r4
  USBx_DEVICE->DIEPMSK  = 0;
 80080cc:	f8c4 5810 	str.w	r5, [r4, #2064]	; 0x810
  USBx_DEVICE->DOEPMSK  = 0;
 80080d0:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
  USBx_DEVICE->DAINTMSK = 0;
 80080d4:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
  USB_FlushRxFifo(USBx);
 80080d8:	f7ff fdec 	bl	8007cb4 <USB_FlushRxFifo>
  USB_FlushTxFifo(USBx ,  0x10 );  
 80080dc:	2110      	movs	r1, #16
 80080de:	4620      	mov	r0, r4
 80080e0:	f7ff fdd6 	bl	8007c90 <USB_FlushTxFifo>
  
  return HAL_OK;
}
 80080e4:	4628      	mov	r0, r5
 80080e6:	bd38      	pop	{r3, r4, r5, pc}

080080e8 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 80080e8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80080ec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80080f0:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 80080f4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80080f8:	0109      	lsls	r1, r1, #4
 80080fa:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80080fe:	4319      	orrs	r1, r3
 8008100:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8008104:	2000      	movs	r0, #0
 8008106:	4770      	bx	lr

08008108 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8008108:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ; 
 800810a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800810e:	f023 0302 	bic.w	r3, r3, #2
 8008112:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8008116:	2003      	movs	r0, #3
 8008118:	f7fc fb3a 	bl	8004790 <HAL_Delay>
  
  return HAL_OK;  
}
 800811c:	2000      	movs	r0, #0
 800811e:	bd08      	pop	{r3, pc}

08008120 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8008120:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ; 
 8008122:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8008126:	f043 0302 	orr.w	r3, r3, #2
 800812a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 800812e:	2003      	movs	r0, #3
 8008130:	f7fc fb2e 	bl	8004790 <HAL_Delay>
  
  return HAL_OK;  
}
 8008134:	2000      	movs	r0, #0
 8008136:	bd08      	pop	{r3, pc}

08008138 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->GINTSTS;
 8008138:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800813a:	6980      	ldr	r0, [r0, #24]
  return tmpreg;  
}
 800813c:	4010      	ands	r0, r2
 800813e:	4770      	bx	lr

08008140 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 8008140:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8008144:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008148:	69c0      	ldr	r0, [r0, #28]
 800814a:	4018      	ands	r0, r3
  return ((tmpreg & 0xffff0000) >> 16);
}
 800814c:	0c00      	lsrs	r0, r0, #16
 800814e:	4770      	bx	lr

08008150 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 8008150:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8008154:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008158:	69c0      	ldr	r0, [r0, #28]
 800815a:	4018      	ands	r0, r3
  return ((tmpreg & 0xFFFF));
}
 800815c:	b280      	uxth	r0, r0
 800815e:	4770      	bx	lr

08008160 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t tmpreg;
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8008160:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8008164:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008168:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 800816c:	688a      	ldr	r2, [r1, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800816e:	6940      	ldr	r0, [r0, #20]
  return tmpreg;
}
 8008170:	4010      	ands	r0, r2
 8008172:	4770      	bx	lr

08008174 <USB_ReadDevInEPInterrupt>:
  * @param  epnum: endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8008174:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, msk = 0, emp = 0;
  
  msk = USBx_DEVICE->DIEPMSK;
 8008176:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800817a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1) << 7;
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 800817e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1) << 7;
 8008182:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8008184:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1) << 7;
 8008188:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 800818a:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1) << 7;
 800818c:	b2db      	uxtb	r3, r3
 800818e:	4323      	orrs	r3, r4
  return tmpreg;
}
 8008190:	4018      	ands	r0, r3
 8008192:	bd10      	pop	{r4, pc}

08008194 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1);
 8008194:	6940      	ldr	r0, [r0, #20]
}
 8008196:	f000 0001 	and.w	r0, r0, #1
 800819a:	4770      	bx	lr

0800819c <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800819c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80081a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80081a4:	f023 0307 	bic.w	r3, r3, #7
 80081a8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80081ac:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80081b0:	689a      	ldr	r2, [r3, #8]
 80081b2:	f002 0206 	and.w	r2, r2, #6
 80081b6:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 80081b8:	bf02      	ittt	eq
 80081ba:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 80081be:	f042 0203 	orreq.w	r2, r2, #3
 80081c2:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 80081ce:	2000      	movs	r0, #0
 80081d0:	4770      	bx	lr

080081d2 <USB_EP0_OutStart>:
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(psetup);

  USBx_OUTEP(0)->DOEPTSIZ = 0;
 80081d2:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80081d6:	2000      	movs	r0, #0
 80081d8:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 80081da:	691a      	ldr	r2, [r3, #16]
 80081dc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80081e0:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 80081e2:	691a      	ldr	r2, [r3, #16]
 80081e4:	f042 0218 	orr.w	r2, r2, #24
 80081e8:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80081ea:	691a      	ldr	r2, [r3, #16]
 80081ec:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 80081f0:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
}
 80081f2:	4770      	bx	lr

080081f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80081fc:	2300      	movs	r3, #0
 80081fe:	60fb      	str	r3, [r7, #12]
  
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3301      	adds	r3, #1
 8008204:	60fb      	str	r3, [r7, #12]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4a13      	ldr	r2, [pc, #76]	; (8008258 <USB_CoreReset+0x64>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d901      	bls.n	8008212 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e01b      	b.n	800824a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	2b00      	cmp	r3, #0
 8008218:	daf2      	bge.n	8008200 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 800821a:	2300      	movs	r3, #0
 800821c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	f043 0201 	orr.w	r2, r3, #1
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	3301      	adds	r3, #1
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4a09      	ldr	r2, [pc, #36]	; (8008258 <USB_CoreReset+0x64>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d901      	bls.n	800823c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e006      	b.n	800824a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b01      	cmp	r3, #1
 8008246:	d0f0      	beq.n	800822a <USB_CoreReset+0x36>
  
  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	00030d40 	.word	0x00030d40

0800825c <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800825c:	4b08      	ldr	r3, [pc, #32]	; (8008280 <LL_mDelay+0x24>)
{
 800825e:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8008264:	9b01      	ldr	r3, [sp, #4]
    Delay++;
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8008266:	4b06      	ldr	r3, [pc, #24]	; (8008280 <LL_mDelay+0x24>)
  if (Delay < LL_MAX_DELAY)
 8008268:	1c41      	adds	r1, r0, #1
    Delay++;
 800826a:	bf18      	it	ne
 800826c:	3001      	addne	r0, #1
  while (Delay)
 800826e:	b908      	cbnz	r0, 8008274 <LL_mDelay+0x18>
    {
      Delay--;
    }
  }
}
 8008270:	b002      	add	sp, #8
 8008272:	4770      	bx	lr
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	03d2      	lsls	r2, r2, #15
      Delay--;
 8008278:	bf48      	it	mi
 800827a:	f100 30ff 	addmi.w	r0, r0, #4294967295
 800827e:	e7f6      	b.n	800826e <LL_mDelay+0x12>
 8008280:	e000e010 	.word	0xe000e010

08008284 <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8008284:	2320      	movs	r3, #32
 8008286:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8008288:	4800      	ldr	r0, [pc, #0]	; (800828c <USBD_MSC_GetHSCfgDesc+0x8>)
 800828a:	4770      	bx	lr
 800828c:	2000027c 	.word	0x2000027c

08008290 <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8008290:	2320      	movs	r3, #32
 8008292:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8008294:	4800      	ldr	r0, [pc, #0]	; (8008298 <USBD_MSC_GetFSCfgDesc+0x8>)
 8008296:	4770      	bx	lr
 8008298:	2000025c 	.word	0x2000025c

0800829c <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 800829c:	2320      	movs	r3, #32
 800829e:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 80082a0:	4800      	ldr	r0, [pc, #0]	; (80082a4 <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 80082a2:	4770      	bx	lr
 80082a4:	200002a8 	.word	0x200002a8

080082a8 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 80082a8:	230a      	movs	r3, #10
 80082aa:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 80082ac:	4800      	ldr	r0, [pc, #0]	; (80082b0 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 80082ae:	4770      	bx	lr
 80082b0:	2000029c 	.word	0x2000029c

080082b4 <USBD_MSC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80082b4:	7c03      	ldrb	r3, [r0, #16]
{
 80082b6:	b510      	push	{r4, lr}
 80082b8:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80082ba:	b9c3      	cbnz	r3, 80082ee <USBD_MSC_Init+0x3a>
    USBD_LL_OpenEP(pdev,
 80082bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082c0:	2202      	movs	r2, #2
 80082c2:	2101      	movs	r1, #1
 80082c4:	f7fb fbed 	bl	8003aa2 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80082c8:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 80082cc:	2202      	movs	r2, #2
 80082ce:	2181      	movs	r1, #129	; 0x81
 80082d0:	4620      	mov	r0, r4
 80082d2:	f7fb fbe6 	bl	8003aa2 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 80082d6:	f242 006c 	movw	r0, #8300	; 0x206c
 80082da:	f002 fb9b 	bl	800aa14 <malloc>
 80082de:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 80082e2:	b158      	cbz	r0, 80082fc <USBD_MSC_Init+0x48>
    MSC_BOT_Init(pdev); 
 80082e4:	4620      	mov	r0, r4
 80082e6:	f000 f8be 	bl	8008466 <MSC_BOT_Init>
    ret = 0;
 80082ea:	2000      	movs	r0, #0
 80082ec:	bd10      	pop	{r4, pc}
    USBD_LL_OpenEP(pdev,
 80082ee:	2340      	movs	r3, #64	; 0x40
 80082f0:	2202      	movs	r2, #2
 80082f2:	2101      	movs	r1, #1
 80082f4:	f7fb fbd5 	bl	8003aa2 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80082f8:	2340      	movs	r3, #64	; 0x40
 80082fa:	e7e7      	b.n	80082cc <USBD_MSC_Init+0x18>
    ret = 1; 
 80082fc:	2001      	movs	r0, #1
}
 80082fe:	bd10      	pop	{r4, pc}

08008300 <USBD_MSC_DeInit>:
{
 8008300:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8008302:	2101      	movs	r1, #1
{
 8008304:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8008306:	f7fb fbd6 	bl	8003ab6 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800830a:	2181      	movs	r1, #129	; 0x81
 800830c:	4620      	mov	r0, r4
 800830e:	f7fb fbd2 	bl	8003ab6 <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 8008312:	4620      	mov	r0, r4
 8008314:	f000 f8d6 	bl	80084c4 <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 8008318:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800831c:	b120      	cbz	r0, 8008328 <USBD_MSC_DeInit+0x28>
    USBD_free(pdev->pClassData);
 800831e:	f002 fb81 	bl	800aa24 <free>
    pdev->pClassData  = NULL; 
 8008322:	2300      	movs	r3, #0
 8008324:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8008328:	2000      	movs	r0, #0
 800832a:	bd10      	pop	{r4, pc}

0800832c <USBD_MSC_Setup>:
{
 800832c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008330:	780b      	ldrb	r3, [r1, #0]
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8008332:	f8d0 8218 	ldr.w	r8, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008336:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 800833a:	4606      	mov	r6, r0
 800833c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800833e:	d02d      	beq.n	800839c <USBD_MSC_Setup+0x70>
 8008340:	2c20      	cmp	r4, #32
 8008342:	d14a      	bne.n	80083da <USBD_MSC_Setup+0xae>
    switch (req->bRequest)
 8008344:	784a      	ldrb	r2, [r1, #1]
 8008346:	2afe      	cmp	r2, #254	; 0xfe
 8008348:	d005      	beq.n	8008356 <USBD_MSC_Setup+0x2a>
 800834a:	2aff      	cmp	r2, #255	; 0xff
 800834c:	d019      	beq.n	8008382 <USBD_MSC_Setup+0x56>
       USBD_CtlError(pdev , req);
 800834e:	f000 fef2 	bl	8009136 <USBD_CtlError>
       return USBD_FAIL; 
 8008352:	2402      	movs	r4, #2
 8008354:	e01f      	b.n	8008396 <USBD_MSC_Setup+0x6a>
      if((req->wValue  == 0) && 
 8008356:	884c      	ldrh	r4, [r1, #2]
 8008358:	b984      	cbnz	r4, 800837c <USBD_MSC_Setup+0x50>
 800835a:	88cf      	ldrh	r7, [r1, #6]
 800835c:	2f01      	cmp	r7, #1
 800835e:	d10d      	bne.n	800837c <USBD_MSC_Setup+0x50>
         (req->wLength == 1) &&
 8008360:	061a      	lsls	r2, r3, #24
 8008362:	d50b      	bpl.n	800837c <USBD_MSC_Setup+0x50>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8008364:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	4798      	blx	r3
        USBD_CtlSendData (pdev,
 800836c:	463a      	mov	r2, r7
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800836e:	f8c8 0000 	str.w	r0, [r8]
        USBD_CtlSendData (pdev,
 8008372:	4641      	mov	r1, r8
 8008374:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8008376:	f000 ff05 	bl	8009184 <USBD_CtlSendData>
      break;
 800837a:	e00c      	b.n	8008396 <USBD_MSC_Setup+0x6a>
         USBD_CtlError(pdev , req);
 800837c:	4629      	mov	r1, r5
 800837e:	4630      	mov	r0, r6
 8008380:	e7e5      	b.n	800834e <USBD_MSC_Setup+0x22>
      if((req->wValue  == 0) && 
 8008382:	884a      	ldrh	r2, [r1, #2]
 8008384:	2a00      	cmp	r2, #0
 8008386:	d1f9      	bne.n	800837c <USBD_MSC_Setup+0x50>
 8008388:	88cc      	ldrh	r4, [r1, #6]
 800838a:	2c00      	cmp	r4, #0
 800838c:	d1f6      	bne.n	800837c <USBD_MSC_Setup+0x50>
         (req->wLength == 0) &&
 800838e:	061b      	lsls	r3, r3, #24
 8008390:	d4f4      	bmi.n	800837c <USBD_MSC_Setup+0x50>
         MSC_BOT_Reset(pdev);
 8008392:	f000 f88b 	bl	80084ac <MSC_BOT_Reset>
}
 8008396:	4620      	mov	r0, r4
 8008398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 800839c:	784f      	ldrb	r7, [r1, #1]
 800839e:	2f0a      	cmp	r7, #10
 80083a0:	d01d      	beq.n	80083de <USBD_MSC_Setup+0xb2>
 80083a2:	2f0b      	cmp	r7, #11
 80083a4:	d01f      	beq.n	80083e6 <USBD_MSC_Setup+0xba>
 80083a6:	2f01      	cmp	r7, #1
 80083a8:	d1f5      	bne.n	8008396 <USBD_MSC_Setup+0x6a>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80083aa:	7909      	ldrb	r1, [r1, #4]
 80083ac:	f7fb fb8a 	bl	8003ac4 <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 80083b0:	7929      	ldrb	r1, [r5, #4]
 80083b2:	4630      	mov	r0, r6
 80083b4:	f7fb fb7f 	bl	8003ab6 <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 80083b8:	f995 3004 	ldrsb.w	r3, [r5, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	7c33      	ldrb	r3, [r6, #16]
 80083c0:	da17      	bge.n	80083f2 <USBD_MSC_Setup+0xc6>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80083c2:	b9a3      	cbnz	r3, 80083ee <USBD_MSC_Setup+0xc2>
          USBD_LL_OpenEP(pdev,
 80083c4:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 80083c8:	2202      	movs	r2, #2
 80083ca:	2181      	movs	r1, #129	; 0x81
          USBD_LL_OpenEP(pdev,
 80083cc:	4630      	mov	r0, r6
 80083ce:	f7fb fb68 	bl	8003aa2 <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80083d2:	7929      	ldrb	r1, [r5, #4]
 80083d4:	4630      	mov	r0, r6
 80083d6:	f000 f931 	bl	800863c <MSC_BOT_CplClrFeature>
  return 0;
 80083da:	2400      	movs	r4, #0
 80083dc:	e7db      	b.n	8008396 <USBD_MSC_Setup+0x6a>
      USBD_CtlSendData (pdev,
 80083de:	2201      	movs	r2, #1
 80083e0:	f108 0104 	add.w	r1, r8, #4
 80083e4:	e7c7      	b.n	8008376 <USBD_MSC_Setup+0x4a>
      hmsc->interface = (uint8_t)(req->wValue);
 80083e6:	788b      	ldrb	r3, [r1, #2]
 80083e8:	f8c8 3004 	str.w	r3, [r8, #4]
      break;
 80083ec:	e7d3      	b.n	8008396 <USBD_MSC_Setup+0x6a>
          USBD_LL_OpenEP(pdev,
 80083ee:	2340      	movs	r3, #64	; 0x40
 80083f0:	e7ea      	b.n	80083c8 <USBD_MSC_Setup+0x9c>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80083f2:	b923      	cbnz	r3, 80083fe <USBD_MSC_Setup+0xd2>
          USBD_LL_OpenEP(pdev,
 80083f4:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 80083f8:	2202      	movs	r2, #2
 80083fa:	4639      	mov	r1, r7
 80083fc:	e7e6      	b.n	80083cc <USBD_MSC_Setup+0xa0>
 80083fe:	2340      	movs	r3, #64	; 0x40
 8008400:	e7fa      	b.n	80083f8 <USBD_MSC_Setup+0xcc>

08008402 <USBD_MSC_DataIn>:
{
 8008402:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8008404:	f000 f882 	bl	800850c <MSC_BOT_DataIn>
}
 8008408:	2000      	movs	r0, #0
 800840a:	bd08      	pop	{r3, pc}

0800840c <USBD_MSC_DataOut>:
{
 800840c:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 800840e:	f000 f89b 	bl	8008548 <MSC_BOT_DataOut>
}
 8008412:	2000      	movs	r0, #0
 8008414:	bd08      	pop	{r3, pc}

08008416 <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8008416:	b109      	cbz	r1, 800841c <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData= fops;
 8008418:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
  }
  return 0;
}
 800841c:	2000      	movs	r0, #0
 800841e:	4770      	bx	lr

08008420 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8008420:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  if ((hmsc->cbw.bmFlags == 0) && 
 8008422:	f242 0318 	movw	r3, #8216	; 0x2018
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008426:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0) && 
 800842a:	5ce3      	ldrb	r3, [r4, r3]
{
 800842c:	4605      	mov	r5, r0
  if ((hmsc->cbw.bmFlags == 0) && 
 800842e:	b943      	cbnz	r3, 8008442 <MSC_BOT_Abort+0x22>
      (hmsc->cbw.dDataLength != 0) &&
 8008430:	f242 0314 	movw	r3, #8212	; 0x2014
  if ((hmsc->cbw.bmFlags == 0) && 
 8008434:	58e3      	ldr	r3, [r4, r3]
 8008436:	b123      	cbz	r3, 8008442 <MSC_BOT_Abort+0x22>
      (hmsc->cbw.dDataLength != 0) &&
 8008438:	7a63      	ldrb	r3, [r4, #9]
 800843a:	b913      	cbnz	r3, 8008442 <MSC_BOT_Abort+0x22>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 800843c:	2101      	movs	r1, #1
 800843e:	f7fb fb48 	bl	8003ad2 <USBD_LL_StallEP>
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8008442:	2181      	movs	r1, #129	; 0x81
 8008444:	4628      	mov	r0, r5
 8008446:	f7fb fb44 	bl	8003ad2 <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800844a:	7a63      	ldrb	r3, [r4, #9]
 800844c:	2b02      	cmp	r3, #2
 800844e:	d109      	bne.n	8008464 <MSC_BOT_Abort+0x44>
  {
    USBD_LL_PrepareReceive (pdev,
 8008450:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8008454:	4628      	mov	r0, r5
 8008456:	231f      	movs	r3, #31
 8008458:	320c      	adds	r2, #12
 800845a:	2101      	movs	r1, #1
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
                      USBD_BOT_CBW_LENGTH);    
  }
}
 800845c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    USBD_LL_PrepareReceive (pdev,
 8008460:	f7fb bb66 	b.w	8003b30 <USBD_LL_PrepareReceive>
 8008464:	bd70      	pop	{r4, r5, r6, pc}

08008466 <MSC_BOT_Init>:
{
 8008466:	b570      	push	{r4, r5, r6, lr}
  hmsc->scsi_sense_tail = 0;
 8008468:	f242 035d 	movw	r3, #8285	; 0x205d
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800846c:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
{
 8008470:	4604      	mov	r4, r0
  hmsc->bot_state  = USBD_BOT_IDLE;
 8008472:	2000      	movs	r0, #0
 8008474:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8008476:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0;
 8008478:	54e8      	strb	r0, [r5, r3]
  hmsc->scsi_sense_head = 0;
 800847a:	f242 035c 	movw	r3, #8284	; 0x205c
 800847e:	54e8      	strb	r0, [r5, r3]
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 8008480:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8008488:	2101      	movs	r1, #1
 800848a:	4620      	mov	r0, r4
 800848c:	f7fb fb1a 	bl	8003ac4 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8008490:	2181      	movs	r1, #129	; 0x81
 8008492:	4620      	mov	r0, r4
 8008494:	f7fb fb16 	bl	8003ac4 <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev,
 8008498:	f505 5200 	add.w	r2, r5, #8192	; 0x2000
 800849c:	4620      	mov	r0, r4
 800849e:	231f      	movs	r3, #31
 80084a0:	320c      	adds	r2, #12
 80084a2:	2101      	movs	r1, #1
}
 80084a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 80084a8:	f7fb bb42 	b.w	8003b30 <USBD_LL_PrepareReceive>

080084ac <MSC_BOT_Reset>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80084ac:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 80084b0:	2300      	movs	r3, #0
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 80084b2:	2101      	movs	r1, #1
  hmsc->bot_state  = USBD_BOT_IDLE;
 80084b4:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 80084b6:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev,
 80084b8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80084bc:	231f      	movs	r3, #31
 80084be:	320c      	adds	r2, #12
 80084c0:	f7fb bb36 	b.w	8003b30 <USBD_LL_PrepareReceive>

080084c4 <MSC_BOT_DeInit>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 80084c4:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 80084c8:	2200      	movs	r2, #0
 80084ca:	721a      	strb	r2, [r3, #8]
 80084cc:	4770      	bx	lr
	...

080084d0 <MSC_BOT_SendCSW>:
{
 80084d0:	b570      	push	{r4, r5, r6, lr}
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80084d2:	f242 022c 	movw	r2, #8236	; 0x202c
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80084d6:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80084da:	4b0b      	ldr	r3, [pc, #44]	; (8008508 <MSC_BOT_SendCSW+0x38>)
 80084dc:	50a3      	str	r3, [r4, r2]
  hmsc->csw.bStatus = CSW_Status;
 80084de:	f242 0338 	movw	r3, #8248	; 0x2038
  USBD_LL_Transmit (pdev, 
 80084e2:	4422      	add	r2, r4
  hmsc->csw.bStatus = CSW_Status;
 80084e4:	54e1      	strb	r1, [r4, r3]
  hmsc->bot_state = USBD_BOT_IDLE;
 80084e6:	2300      	movs	r3, #0
 80084e8:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, 
 80084ea:	2181      	movs	r1, #129	; 0x81
 80084ec:	230d      	movs	r3, #13
{
 80084ee:	4605      	mov	r5, r0
  USBD_LL_Transmit (pdev, 
 80084f0:	f7fb fb17 	bl	8003b22 <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev,
 80084f4:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 80084f8:	4628      	mov	r0, r5
 80084fa:	231f      	movs	r3, #31
 80084fc:	320c      	adds	r2, #12
 80084fe:	2101      	movs	r1, #1
}
 8008500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 8008504:	f7fb bb14 	b.w	8003b30 <USBD_LL_PrepareReceive>
 8008508:	53425355 	.word	0x53425355

0800850c <MSC_BOT_DataIn>:
{
 800850c:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 800850e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8008512:	7a1a      	ldrb	r2, [r3, #8]
 8008514:	2a02      	cmp	r2, #2
{
 8008516:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 8008518:	d003      	beq.n	8008522 <MSC_BOT_DataIn+0x16>
 800851a:	d314      	bcc.n	8008546 <MSC_BOT_DataIn+0x3a>
 800851c:	2a04      	cmp	r2, #4
 800851e:	d910      	bls.n	8008542 <MSC_BOT_DataIn+0x36>
 8008520:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 8008522:	f242 0119 	movw	r1, #8217	; 0x2019
 8008526:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 800852a:	321b      	adds	r2, #27
 800852c:	5c59      	ldrb	r1, [r3, r1]
 800852e:	f000 f8b3 	bl	8008698 <SCSI_ProcessCmd>
 8008532:	2800      	cmp	r0, #0
 8008534:	da07      	bge.n	8008546 <MSC_BOT_DataIn+0x3a>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8008536:	2101      	movs	r1, #1
 8008538:	4620      	mov	r0, r4
}
 800853a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800853e:	f7ff bfc7 	b.w	80084d0 <MSC_BOT_SendCSW>
 8008542:	2100      	movs	r1, #0
 8008544:	e7f9      	b.n	800853a <MSC_BOT_DataIn+0x2e>
 8008546:	bd10      	pop	{r4, pc}

08008548 <MSC_BOT_DataOut>:
{
 8008548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800854c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8008550:	7a26      	ldrb	r6, [r4, #8]
{
 8008552:	4605      	mov	r5, r0
  switch (hmsc->bot_state)
 8008554:	b11e      	cbz	r6, 800855e <MSC_BOT_DataOut+0x16>
 8008556:	2e01      	cmp	r6, #1
 8008558:	d062      	beq.n	8008620 <MSC_BOT_DataOut+0xd8>
 800855a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 800855e:	f242 0310 	movw	r3, #8208	; 0x2010
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8008562:	f242 0814 	movw	r8, #8212	; 0x2014
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8008566:	58e2      	ldr	r2, [r4, r3]
 8008568:	f242 0330 	movw	r3, #8240	; 0x2030
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800856c:	f242 0734 	movw	r7, #8244	; 0x2034
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8008570:	50e2      	str	r2, [r4, r3]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8008572:	f854 3008 	ldr.w	r3, [r4, r8]
 8008576:	51e3      	str	r3, [r4, r7]
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8008578:	2101      	movs	r1, #1
 800857a:	f7fb fae0 	bl	8003b3e <USBD_LL_GetRxDataSize>
 800857e:	281f      	cmp	r0, #31
 8008580:	d110      	bne.n	80085a4 <MSC_BOT_DataOut+0x5c>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8008582:	f242 030c 	movw	r3, #8204	; 0x200c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8008586:	58e2      	ldr	r2, [r4, r3]
 8008588:	4b2b      	ldr	r3, [pc, #172]	; (8008638 <MSC_BOT_DataOut+0xf0>)
 800858a:	429a      	cmp	r2, r3
 800858c:	d10a      	bne.n	80085a4 <MSC_BOT_DataOut+0x5c>
        (hmsc->cbw.bLUN > 1) || 
 800858e:	f242 0319 	movw	r3, #8217	; 0x2019
 8008592:	5ce1      	ldrb	r1, [r4, r3]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8008594:	2901      	cmp	r1, #1
 8008596:	d805      	bhi.n	80085a4 <MSC_BOT_DataOut+0x5c>
          (hmsc->cbw.bCBLength < 1) || 
 8008598:	f242 031a 	movw	r3, #8218	; 0x201a
        (hmsc->cbw.bLUN > 1) || 
 800859c:	5ce3      	ldrb	r3, [r4, r3]
 800859e:	3b01      	subs	r3, #1
 80085a0:	2b0f      	cmp	r3, #15
 80085a2:	d90e      	bls.n	80085c2 <MSC_BOT_DataOut+0x7a>
    SCSI_SenseCode(pdev,
 80085a4:	f242 0119 	movw	r1, #8217	; 0x2019
 80085a8:	2320      	movs	r3, #32
 80085aa:	2205      	movs	r2, #5
 80085ac:	5c61      	ldrb	r1, [r4, r1]
 80085ae:	4628      	mov	r0, r5
 80085b0:	f000 fac2 	bl	8008b38 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 80085b4:	2302      	movs	r3, #2
 80085b6:	7263      	strb	r3, [r4, #9]
        MSC_BOT_Abort(pdev);
 80085b8:	4628      	mov	r0, r5
}
 80085ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MSC_BOT_Abort(pdev);
 80085be:	f7ff bf2f 	b.w	8008420 <MSC_BOT_Abort>
    if(SCSI_ProcessCmd(pdev,
 80085c2:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 80085c6:	321b      	adds	r2, #27
 80085c8:	4628      	mov	r0, r5
 80085ca:	f000 f865 	bl	8008698 <SCSI_ProcessCmd>
 80085ce:	2800      	cmp	r0, #0
 80085d0:	7a23      	ldrb	r3, [r4, #8]
 80085d2:	da07      	bge.n	80085e4 <MSC_BOT_DataOut+0x9c>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 80085d4:	2b05      	cmp	r3, #5
 80085d6:	d1ef      	bne.n	80085b8 <MSC_BOT_DataOut+0x70>
       MSC_BOT_SendCSW (pdev,
 80085d8:	2101      	movs	r1, #1
        MSC_BOT_SendCSW (pdev,
 80085da:	4628      	mov	r0, r5
}
 80085dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MSC_BOT_SendCSW (pdev,
 80085e0:	f7ff bf76 	b.w	80084d0 <MSC_BOT_SendCSW>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 80085e4:	3b01      	subs	r3, #1
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d924      	bls.n	8008634 <MSC_BOT_DataOut+0xec>
      if (hmsc->bot_data_length > 0)
 80085ea:	8961      	ldrh	r1, [r4, #10]
 80085ec:	2900      	cmp	r1, #0
 80085ee:	d0f4      	beq.n	80085da <MSC_BOT_DataOut+0x92>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80085f0:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
  len = MIN (hmsc->cbw.dDataLength, len);
 80085f4:	f852 3008 	ldr.w	r3, [r2, r8]
 80085f8:	4299      	cmp	r1, r3
 80085fa:	bf28      	it	cs
 80085fc:	4619      	movcs	r1, r3
  hmsc->csw.dDataResidue -= len;
 80085fe:	59d3      	ldr	r3, [r2, r7]
 8008600:	1a5b      	subs	r3, r3, r1
 8008602:	51d3      	str	r3, [r2, r7]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8008604:	f242 0338 	movw	r3, #8248	; 0x2038
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8008608:	4628      	mov	r0, r5
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800860a:	54d6      	strb	r6, [r2, r3]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800860c:	2304      	movs	r3, #4
 800860e:	7213      	strb	r3, [r2, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8008610:	b28b      	uxth	r3, r1
 8008612:	f104 020c 	add.w	r2, r4, #12
 8008616:	2181      	movs	r1, #129	; 0x81
}
 8008618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 800861c:	f7fb ba81 	b.w	8003b22 <USBD_LL_Transmit>
    if(SCSI_ProcessCmd(pdev,
 8008620:	f242 0319 	movw	r3, #8217	; 0x2019
 8008624:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8008628:	321b      	adds	r2, #27
 800862a:	5ce1      	ldrb	r1, [r4, r3]
 800862c:	f000 f834 	bl	8008698 <SCSI_ProcessCmd>
 8008630:	2800      	cmp	r0, #0
 8008632:	dbd1      	blt.n	80085d8 <MSC_BOT_DataOut+0x90>
 8008634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008638:	43425355 	.word	0x43425355

0800863c <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800863c:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800863e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 8008642:	7a63      	ldrb	r3, [r4, #9]
 8008644:	2b02      	cmp	r3, #2
 8008646:	d105      	bne.n	8008654 <MSC_BOT_CplClrFeature+0x18>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8008648:	2181      	movs	r1, #129	; 0x81
 800864a:	f7fb fa42 	bl	8003ad2 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 800864e:	2300      	movs	r3, #0
 8008650:	7263      	strb	r3, [r4, #9]
 8008652:	bd10      	pop	{r4, pc}
  }
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8008654:	060a      	lsls	r2, r1, #24
 8008656:	d506      	bpl.n	8008666 <MSC_BOT_CplClrFeature+0x2a>
 8008658:	2b01      	cmp	r3, #1
 800865a:	d004      	beq.n	8008666 <MSC_BOT_CplClrFeature+0x2a>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800865c:	2101      	movs	r1, #1
  }
  
}
 800865e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8008662:	f7ff bf35 	b.w	80084d0 <MSC_BOT_SendCSW>
 8008666:	bd10      	pop	{r4, pc}

08008668 <SCSI_SenseCode.constprop.8>:
* @param  sKey: Sense Key
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
 8008668:	b570      	push	{r4, r5, r6, lr}
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800866a:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800866e:	f242 055d 	movw	r5, #8285	; 0x205d
 8008672:	f242 063c 	movw	r6, #8252	; 0x203c
 8008676:	5d43      	ldrb	r3, [r0, r5]
 8008678:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
  hmsc->scsi_sense_tail++;
 800867c:	3301      	adds	r3, #1
 800867e:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8008680:	55a1      	strb	r1, [r4, r6]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8008682:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8008684:	f504 5401 	add.w	r4, r4, #8256	; 0x2040
 8008688:	ea4f 2202 	mov.w	r2, r2, lsl #8
  {
    hmsc->scsi_sense_tail = 0;
 800868c:	bf08      	it	eq
 800868e:	2300      	moveq	r3, #0
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8008690:	6022      	str	r2, [r4, #0]
    hmsc->scsi_sense_tail = 0;
 8008692:	5543      	strb	r3, [r0, r5]
 8008694:	bd70      	pop	{r4, r5, r6, pc}
	...

08008698 <SCSI_ProcessCmd>:
{
 8008698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (params[0])
 800869c:	7813      	ldrb	r3, [r2, #0]
 800869e:	2b1e      	cmp	r3, #30
{
 80086a0:	4605      	mov	r5, r0
 80086a2:	460c      	mov	r4, r1
 80086a4:	4617      	mov	r7, r2
  switch (params[0])
 80086a6:	d00f      	beq.n	80086c8 <SCSI_ProcessCmd+0x30>
 80086a8:	d813      	bhi.n	80086d2 <SCSI_ProcessCmd+0x3a>
 80086aa:	2b12      	cmp	r3, #18
 80086ac:	f000 80b4 	beq.w	8008818 <SCSI_ProcessCmd+0x180>
 80086b0:	d805      	bhi.n	80086be <SCSI_ProcessCmd+0x26>
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d060      	beq.n	8008778 <SCSI_ProcessCmd+0xe0>
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d07b      	beq.n	80087b2 <SCSI_ProcessCmd+0x11a>
    SCSI_SenseCode(pdev, 
 80086ba:	2220      	movs	r2, #32
 80086bc:	e14a      	b.n	8008954 <SCSI_ProcessCmd+0x2bc>
  switch (params[0])
 80086be:	2b1a      	cmp	r3, #26
 80086c0:	f000 80c8 	beq.w	8008854 <SCSI_ProcessCmd+0x1bc>
 80086c4:	2b1b      	cmp	r3, #27
 80086c6:	d1f8      	bne.n	80086ba <SCSI_ProcessCmd+0x22>
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
  hmsc->bot_data_length = 0;
 80086c8:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 80086cc:	2400      	movs	r4, #0
                            hmsc->scsi_blk_addr, 
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */      
  }
  hmsc->bot_data_length = 0;
 80086ce:	815c      	strh	r4, [r3, #10]
 80086d0:	e06b      	b.n	80087aa <SCSI_ProcessCmd+0x112>
  switch (params[0])
 80086d2:	2b28      	cmp	r3, #40	; 0x28
 80086d4:	f000 810b 	beq.w	80088ee <SCSI_ProcessCmd+0x256>
 80086d8:	d828      	bhi.n	800872c <SCSI_ProcessCmd+0x94>
 80086da:	2b23      	cmp	r3, #35	; 0x23
 80086dc:	f000 80d8 	beq.w	8008890 <SCSI_ProcessCmd+0x1f8>
 80086e0:	2b25      	cmp	r3, #37	; 0x25
 80086e2:	d1ea      	bne.n	80086ba <SCSI_ProcessCmd+0x22>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80086e4:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 80086e8:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80086ec:	f242 075e 	movw	r7, #8286	; 0x205e
 80086f0:	f242 0860 	movw	r8, #8288	; 0x2060
 80086f4:	4620      	mov	r0, r4
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	19f2      	adds	r2, r6, r7
 80086fa:	eb06 0108 	add.w	r1, r6, r8
 80086fe:	4798      	blx	r3
 8008700:	4604      	mov	r4, r0
 8008702:	2800      	cmp	r0, #0
 8008704:	f040 80d9 	bne.w	80088ba <SCSI_ProcessCmd+0x222>
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 8008708:	f856 3008 	ldr.w	r3, [r6, r8]
 800870c:	3b01      	subs	r3, #1
 800870e:	0e1a      	lsrs	r2, r3, #24
 8008710:	7332      	strb	r2, [r6, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 8008712:	0c1a      	lsrs	r2, r3, #16
 8008714:	7372      	strb	r2, [r6, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 8008716:	0a1a      	lsrs	r2, r3, #8
 8008718:	73b2      	strb	r2, [r6, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 800871a:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800871c:	5bf3      	ldrh	r3, [r6, r7]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800871e:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8008720:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8008722:	7430      	strb	r0, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8008724:	7470      	strb	r0, [r6, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8008726:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data_length = 8;
 8008728:	2308      	movs	r3, #8
 800872a:	e0de      	b.n	80088ea <SCSI_ProcessCmd+0x252>
  switch (params[0])
 800872c:	2b2f      	cmp	r3, #47	; 0x2f
 800872e:	f000 81ac 	beq.w	8008a8a <SCSI_ProcessCmd+0x3f2>
 8008732:	2b5a      	cmp	r3, #90	; 0x5a
 8008734:	f000 809d 	beq.w	8008872 <SCSI_ProcessCmd+0x1da>
 8008738:	2b2a      	cmp	r3, #42	; 0x2a
 800873a:	d1be      	bne.n	80086ba <SCSI_ProcessCmd+0x22>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 800873c:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008740:	7a33      	ldrb	r3, [r6, #8]
 8008742:	2b00      	cmp	r3, #0
 8008744:	f040 815e 	bne.w	8008a04 <SCSI_ProcessCmd+0x36c>
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 8008748:	f242 0318 	movw	r3, #8216	; 0x2018
 800874c:	56f3      	ldrsb	r3, [r6, r3]
 800874e:	2b00      	cmp	r3, #0
 8008750:	dbb3      	blt.n	80086ba <SCSI_ProcessCmd+0x22>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8008752:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8008756:	4608      	mov	r0, r1
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	4798      	blx	r3
 800875c:	2800      	cmp	r0, #0
 800875e:	f040 80ac 	bne.w	80088ba <SCSI_ProcessCmd+0x222>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 8008762:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8008766:	4620      	mov	r0, r4
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	4798      	blx	r3
 800876c:	4604      	mov	r4, r0
 800876e:	2800      	cmp	r0, #0
 8008770:	f000 810d 	beq.w	800898e <SCSI_ProcessCmd+0x2f6>
      SCSI_SenseCode(pdev,
 8008774:	2227      	movs	r2, #39	; 0x27
 8008776:	e0a1      	b.n	80088bc <SCSI_ProcessCmd+0x224>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8008778:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if (hmsc->cbw.dDataLength != 0)
 800877c:	f242 0314 	movw	r3, #8212	; 0x2014
 8008780:	58f3      	ldr	r3, [r6, r3]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d199      	bne.n	80086ba <SCSI_ProcessCmd+0x22>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8008786:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800878a:	4608      	mov	r0, r1
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	4798      	blx	r3
 8008790:	4604      	mov	r4, r0
 8008792:	b148      	cbz	r0, 80087a8 <SCSI_ProcessCmd+0x110>
    SCSI_SenseCode(pdev,
 8008794:	223a      	movs	r2, #58	; 0x3a
 8008796:	2102      	movs	r1, #2
 8008798:	4628      	mov	r0, r5
 800879a:	f7ff ff65 	bl	8008668 <SCSI_SenseCode.constprop.8>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800879e:	2305      	movs	r3, #5
 80087a0:	7233      	strb	r3, [r6, #8]
    return -1;
 80087a2:	f04f 34ff 	mov.w	r4, #4294967295
 80087a6:	e000      	b.n	80087aa <SCSI_ProcessCmd+0x112>
  hmsc->bot_data_length = 0;
 80087a8:	8170      	strh	r0, [r6, #10]
}
 80087aa:	4620      	mov	r0, r4
 80087ac:	b003      	add	sp, #12
 80087ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b2:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
    hmsc->bot_data[i] = 0;
 80087b6:	2400      	movs	r4, #0
 80087b8:	f103 020c 	add.w	r2, r3, #12
 80087bc:	f103 011e 	add.w	r1, r3, #30
 80087c0:	f802 4b01 	strb.w	r4, [r2], #1
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 80087c4:	428a      	cmp	r2, r1
 80087c6:	d1fb      	bne.n	80087c0 <SCSI_ProcessCmd+0x128>
  hmsc->bot_data[0]	= 0x70;		
 80087c8:	2270      	movs	r2, #112	; 0x70
 80087ca:	731a      	strb	r2, [r3, #12]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 80087cc:	f242 005c 	movw	r0, #8284	; 0x205c
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 80087d0:	220c      	movs	r2, #12
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 80087d2:	f242 015d 	movw	r1, #8285	; 0x205d
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 80087d6:	74da      	strb	r2, [r3, #19]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 80087d8:	5c1a      	ldrb	r2, [r3, r0]
 80087da:	5c59      	ldrb	r1, [r3, r1]
 80087dc:	4291      	cmp	r1, r2
 80087de:	d013      	beq.n	8008808 <SCSI_ProcessCmd+0x170>
 80087e0:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 80087e4:	f242 053c 	movw	r5, #8252	; 0x203c
    hmsc->scsi_sense_head++;
 80087e8:	3201      	adds	r2, #1
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 80087ea:	5d4d      	ldrb	r5, [r1, r5]
 80087ec:	739d      	strb	r5, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 80087ee:	f242 0541 	movw	r5, #8257	; 0x2041
    hmsc->scsi_sense_head++;
 80087f2:	b2d2      	uxtb	r2, r2
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 80087f4:	5d4d      	ldrb	r5, [r1, r5]
 80087f6:	761d      	strb	r5, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 80087f8:	f501 5101 	add.w	r1, r1, #8256	; 0x2040
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80087fc:	2a04      	cmp	r2, #4
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 80087fe:	7809      	ldrb	r1, [r1, #0]
 8008800:	7659      	strb	r1, [r3, #25]
    hmsc->scsi_sense_head++;
 8008802:	bf14      	ite	ne
 8008804:	541a      	strbne	r2, [r3, r0]
      hmsc->scsi_sense_head = 0;
 8008806:	541c      	strbeq	r4, [r3, r0]
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 8008808:	2212      	movs	r2, #18
 800880a:	815a      	strh	r2, [r3, #10]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800880c:	793a      	ldrb	r2, [r7, #4]
 800880e:	2a12      	cmp	r2, #18
    hmsc->bot_data_length = params[4];
 8008810:	bf98      	it	ls
 8008812:	815a      	strhls	r2, [r3, #10]
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
  }
  
  return 0;
 8008814:	2400      	movs	r4, #0
 8008816:	e7c8      	b.n	80087aa <SCSI_ProcessCmd+0x112>
  if (params[1] & 0x01)/*Evpd is set*/
 8008818:	787b      	ldrb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800881a:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  if (params[1] & 0x01)/*Evpd is set*/
 800881e:	07db      	lsls	r3, r3, #31
 8008820:	d415      	bmi.n	800884e <SCSI_ProcessCmd+0x1b6>
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8008822:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8008826:	69db      	ldr	r3, [r3, #28]
 8008828:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
 800882c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008830:	7939      	ldrb	r1, [r7, #4]
    len = pPage[4] + 5;
 8008832:	7923      	ldrb	r3, [r4, #4]
 8008834:	3305      	adds	r3, #5
 8008836:	428b      	cmp	r3, r1
 8008838:	bf28      	it	cs
 800883a:	460b      	movcs	r3, r1
  hmsc->bot_data_length = len;
 800883c:	8153      	strh	r3, [r2, #10]
  while (len) 
 800883e:	2b00      	cmp	r3, #0
 8008840:	d0e8      	beq.n	8008814 <SCSI_ProcessCmd+0x17c>
    len--;
 8008842:	3b01      	subs	r3, #1
 8008844:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pPage[len];
 8008846:	18d1      	adds	r1, r2, r3
 8008848:	5ce0      	ldrb	r0, [r4, r3]
 800884a:	7308      	strb	r0, [r1, #12]
 800884c:	e7f7      	b.n	800883e <SCSI_ProcessCmd+0x1a6>
    len = LENGTH_INQUIRY_PAGE00;
 800884e:	2307      	movs	r3, #7
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 8008850:	4cb6      	ldr	r4, [pc, #728]	; (8008b2c <SCSI_ProcessCmd+0x494>)
 8008852:	e7f3      	b.n	800883c <SCSI_ProcessCmd+0x1a4>
 8008854:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8008858:	49b5      	ldr	r1, [pc, #724]	; (8008b30 <SCSI_ProcessCmd+0x498>)
  hmsc->bot_data_length = len;
 800885a:	2208      	movs	r2, #8
 800885c:	815a      	strh	r2, [r3, #10]
 800885e:	f103 0213 	add.w	r2, r3, #19
 8008862:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8008864:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8008868:	f802 0901 	strb.w	r0, [r2], #-1
  while (len) 
 800886c:	4293      	cmp	r3, r2
 800886e:	d1f9      	bne.n	8008864 <SCSI_ProcessCmd+0x1cc>
 8008870:	e7d0      	b.n	8008814 <SCSI_ProcessCmd+0x17c>
 8008872:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8008876:	49af      	ldr	r1, [pc, #700]	; (8008b34 <SCSI_ProcessCmd+0x49c>)
  hmsc->bot_data_length = len;
 8008878:	2208      	movs	r2, #8
 800887a:	815a      	strh	r2, [r3, #10]
 800887c:	f103 0213 	add.w	r2, r3, #19
 8008880:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8008882:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8008886:	f802 0901 	strb.w	r0, [r2], #-1
  while (len) 
 800888a:	429a      	cmp	r2, r3
 800888c:	d1f9      	bne.n	8008882 <SCSI_ProcessCmd+0x1ea>
 800888e:	e7c1      	b.n	8008814 <SCSI_ProcessCmd+0x17c>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008890:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
    hmsc->bot_data[i] = 0;
 8008894:	2100      	movs	r1, #0
 8008896:	f106 030c 	add.w	r3, r6, #12
 800889a:	f106 0218 	add.w	r2, r6, #24
 800889e:	f803 1b01 	strb.w	r1, [r3], #1
  for(i=0 ; i < 12 ; i++) 
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d1fb      	bne.n	800889e <SCSI_ProcessCmd+0x206>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 80088a6:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80088aa:	4620      	mov	r0, r4
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	f10d 0202 	add.w	r2, sp, #2
 80088b2:	a901      	add	r1, sp, #4
 80088b4:	4798      	blx	r3
 80088b6:	4604      	mov	r4, r0
 80088b8:	b118      	cbz	r0, 80088c2 <SCSI_ProcessCmd+0x22a>
    SCSI_SenseCode(pdev,
 80088ba:	223a      	movs	r2, #58	; 0x3a
      SCSI_SenseCode(pdev,
 80088bc:	2102      	movs	r1, #2
    SCSI_SenseCode(pdev, 
 80088be:	4628      	mov	r0, r5
 80088c0:	e0eb      	b.n	8008a9a <SCSI_ProcessCmd+0x402>
    hmsc->bot_data[3] = 0x08;
 80088c2:	2308      	movs	r3, #8
 80088c4:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 80088c6:	9b01      	ldr	r3, [sp, #4]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80088c8:	7570      	strb	r0, [r6, #21]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 80088ca:	3b01      	subs	r3, #1
 80088cc:	0e1a      	lsrs	r2, r3, #24
 80088ce:	7432      	strb	r2, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 80088d0:	0c1a      	lsrs	r2, r3, #16
 80088d2:	7472      	strb	r2, [r6, #17]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 80088d4:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 80088d6:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[8] = 0x02;
 80088d8:	2302      	movs	r3, #2
 80088da:	7533      	strb	r3, [r6, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80088dc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 80088e0:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80088e2:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 80088e4:	75f3      	strb	r3, [r6, #23]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80088e6:	75b2      	strb	r2, [r6, #22]
    hmsc->bot_data_length = 12;
 80088e8:	230c      	movs	r3, #12
    hmsc->bot_data_length = 8;
 80088ea:	8173      	strh	r3, [r6, #10]
 80088ec:	e75d      	b.n	80087aa <SCSI_ProcessCmd+0x112>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 80088ee:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 80088f2:	7a33      	ldrb	r3, [r6, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f040 80f1 	bne.w	8008adc <SCSI_ProcessCmd+0x444>
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 80088fa:	f242 0318 	movw	r3, #8216	; 0x2018
 80088fe:	56f3      	ldrsb	r3, [r6, r3]
 8008900:	2b00      	cmp	r3, #0
 8008902:	f6bf aeda 	bge.w	80086ba <SCSI_ProcessCmd+0x22>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8008906:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800890a:	4608      	mov	r0, r1
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	4798      	blx	r3
 8008910:	2800      	cmp	r0, #0
 8008912:	d1d2      	bne.n	80088ba <SCSI_ProcessCmd+0x222>
      (params[3] << 16) | \
 8008914:	78fb      	ldrb	r3, [r7, #3]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008916:	78ba      	ldrb	r2, [r7, #2]
      (params[3] << 16) | \
 8008918:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800891a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
          params[5];
 800891e:	797a      	ldrb	r2, [r7, #5]
        (params[4] <<  8) | \
 8008920:	4313      	orrs	r3, r2
 8008922:	793a      	ldrb	r2, [r7, #4]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008924:	f242 0e64 	movw	lr, #8292	; 0x2064
        (params[4] <<  8) | \
 8008928:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800892c:	f846 300e 	str.w	r3, [r6, lr]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8008930:	79fa      	ldrb	r2, [r7, #7]
      params[8];  
 8008932:	7a39      	ldrb	r1, [r7, #8]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8008934:	f242 0c60 	movw	ip, #8288	; 0x2060
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8008938:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 800893c:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 8008940:	f852 200c 	ldr.w	r2, [r2, ip]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8008944:	f242 0068 	movw	r0, #8296	; 0x2068
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8008948:	185f      	adds	r7, r3, r1
 800894a:	4297      	cmp	r7, r2
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 800894c:	5031      	str	r1, [r6, r0]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 800894e:	f240 80b5 	bls.w	8008abc <SCSI_ProcessCmd+0x424>
    SCSI_SenseCode(pdev,
 8008952:	2221      	movs	r2, #33	; 0x21
    SCSI_SenseCode(pdev, 
 8008954:	2105      	movs	r1, #5
 8008956:	e7b2      	b.n	80088be <SCSI_ProcessCmd+0x226>
  USBD_LL_Transmit (pdev, 
 8008958:	b2bb      	uxth	r3, r7
 800895a:	4652      	mov	r2, sl
 800895c:	2181      	movs	r1, #129	; 0x81
 800895e:	4628      	mov	r0, r5
 8008960:	f7fb f8df 	bl	8003b22 <USBD_LL_Transmit>
  hmsc->scsi_blk_addr   += len; 
 8008964:	f856 3009 	ldr.w	r3, [r6, r9]
  hmsc->scsi_blk_len    -= len;  
 8008968:	f856 4008 	ldr.w	r4, [r6, r8]
  hmsc->csw.dDataResidue -= len;
 800896c:	f242 0234 	movw	r2, #8244	; 0x2034
  hmsc->scsi_blk_addr   += len; 
 8008970:	443b      	add	r3, r7
 8008972:	f846 3009 	str.w	r3, [r6, r9]
  hmsc->csw.dDataResidue -= len;
 8008976:	58b3      	ldr	r3, [r6, r2]
  hmsc->scsi_blk_len    -= len;  
 8008978:	1be4      	subs	r4, r4, r7
  hmsc->csw.dDataResidue -= len;
 800897a:	1bdf      	subs	r7, r3, r7
  hmsc->scsi_blk_len    -= len;  
 800897c:	f846 4008 	str.w	r4, [r6, r8]
  hmsc->csw.dDataResidue -= len;
 8008980:	50b7      	str	r7, [r6, r2]
  if (hmsc->scsi_blk_len == 0)
 8008982:	2c00      	cmp	r4, #0
 8008984:	f47f af46 	bne.w	8008814 <SCSI_ProcessCmd+0x17c>
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8008988:	2303      	movs	r3, #3
 800898a:	7233      	strb	r3, [r6, #8]
 800898c:	e70d      	b.n	80087aa <SCSI_ProcessCmd+0x112>
      (params[3] << 16) | \
 800898e:	78fa      	ldrb	r2, [r7, #3]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008990:	78bb      	ldrb	r3, [r7, #2]
      (params[3] << 16) | \
 8008992:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008994:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
          params[5];
 8008998:	797b      	ldrb	r3, [r7, #5]
        (params[4] <<  8) | \
 800899a:	431a      	orrs	r2, r3
 800899c:	793b      	ldrb	r3, [r7, #4]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800899e:	f242 0e64 	movw	lr, #8292	; 0x2064
        (params[4] <<  8) | \
 80089a2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80089a6:	f846 200e 	str.w	r2, [r6, lr]
      params[8];  
 80089aa:	7a3b      	ldrb	r3, [r7, #8]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80089ac:	79f9      	ldrb	r1, [r7, #7]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80089ae:	f242 0c60 	movw	ip, #8288	; 0x2060
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80089b2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80089b6:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 80089ba:	f853 300c 	ldr.w	r3, [r3, ip]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80089be:	f242 0068 	movw	r0, #8296	; 0x2068
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80089c2:	1857      	adds	r7, r2, r1
 80089c4:	429f      	cmp	r7, r3
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80089c6:	5031      	str	r1, [r6, r0]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80089c8:	d8c3      	bhi.n	8008952 <SCSI_ProcessCmd+0x2ba>
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80089ca:	f242 035e 	movw	r3, #8286	; 0x205e
 80089ce:	5af3      	ldrh	r3, [r6, r3]
 80089d0:	435a      	muls	r2, r3
 80089d2:	f846 200e 	str.w	r2, [r6, lr]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80089d6:	f242 0214 	movw	r2, #8212	; 0x2014
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80089da:	434b      	muls	r3, r1
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80089dc:	58b2      	ldr	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80089de:	5033      	str	r3, [r6, r0]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	f47f ae6a 	bne.w	80086ba <SCSI_ProcessCmd+0x22>
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 80089e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 80089ea:	f04f 0101 	mov.w	r1, #1
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 80089ee:	bf28      	it	cs
 80089f0:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 80089f4:	7231      	strb	r1, [r6, #8]
    USBD_LL_PrepareReceive (pdev,
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	f106 020c 	add.w	r2, r6, #12
 80089fc:	4628      	mov	r0, r5
 80089fe:	f7fb f897 	bl	8003b30 <USBD_LL_PrepareReceive>
 8008a02:	e6d2      	b.n	80087aa <SCSI_ProcessCmd+0x112>
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8008a04:	f242 0968 	movw	r9, #8296	; 0x2068
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8008a08:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8008a0c:	f856 7009 	ldr.w	r7, [r6, r9]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8008a10:	f8d0 b014 	ldr.w	fp, [r0, #20]
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8008a14:	f242 035e 	movw	r3, #8286	; 0x205e
 8008a18:	f242 0a64 	movw	sl, #8292	; 0x2064
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8008a1c:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
                              hmsc->bot_data, 
 8008a20:	f106 080c 	add.w	r8, r6, #12
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8008a24:	bf28      	it	cs
 8008a26:	f44f 5700 	movcs.w	r7, #8192	; 0x2000
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8008a2a:	5af2      	ldrh	r2, [r6, r3]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8008a2c:	f856 100a 	ldr.w	r1, [r6, sl]
                              len / hmsc->scsi_blk_size) < 0)
 8008a30:	fbb7 f3f2 	udiv	r3, r7, r2
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8008a34:	4620      	mov	r0, r4
 8008a36:	fbb1 f2f2 	udiv	r2, r1, r2
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	4641      	mov	r1, r8
 8008a3e:	47d8      	blx	fp
 8008a40:	2800      	cmp	r0, #0
 8008a42:	da01      	bge.n	8008a48 <SCSI_ProcessCmd+0x3b0>
    SCSI_SenseCode(pdev,
 8008a44:	2203      	movs	r2, #3
 8008a46:	e06e      	b.n	8008b26 <SCSI_ProcessCmd+0x48e>
  hmsc->scsi_blk_addr  += len; 
 8008a48:	f856 300a 	ldr.w	r3, [r6, sl]
  hmsc->csw.dDataResidue -= len;
 8008a4c:	f242 0134 	movw	r1, #8244	; 0x2034
  hmsc->scsi_blk_addr  += len; 
 8008a50:	443b      	add	r3, r7
 8008a52:	f846 300a 	str.w	r3, [r6, sl]
  hmsc->csw.dDataResidue -= len;
 8008a56:	5872      	ldr	r2, [r6, r1]
  hmsc->scsi_blk_len   -= len; 
 8008a58:	f856 3009 	ldr.w	r3, [r6, r9]
 8008a5c:	1bdb      	subs	r3, r3, r7
  hmsc->csw.dDataResidue -= len;
 8008a5e:	1bd7      	subs	r7, r2, r7
  hmsc->scsi_blk_len   -= len; 
 8008a60:	f846 3009 	str.w	r3, [r6, r9]
  hmsc->csw.dDataResidue -= len;
 8008a64:	5077      	str	r7, [r6, r1]
  if (hmsc->scsi_blk_len == 0)
 8008a66:	b923      	cbnz	r3, 8008a72 <SCSI_ProcessCmd+0x3da>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8008a68:	2100      	movs	r1, #0
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f7ff fd30 	bl	80084d0 <MSC_BOT_SendCSW>
 8008a70:	e6d0      	b.n	8008814 <SCSI_ProcessCmd+0x17c>
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 8008a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a76:	bf28      	it	cs
 8008a78:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    USBD_LL_PrepareReceive (pdev,
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	4642      	mov	r2, r8
 8008a80:	2101      	movs	r1, #1
 8008a82:	4628      	mov	r0, r5
 8008a84:	f7fb f854 	bl	8003b30 <USBD_LL_PrepareReceive>
 8008a88:	e6c4      	b.n	8008814 <SCSI_ProcessCmd+0x17c>
  if ((params[1]& 0x02) == 0x02) 
 8008a8a:	7854      	ldrb	r4, [r2, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8008a8c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  if ((params[1]& 0x02) == 0x02) 
 8008a90:	f014 0402 	ands.w	r4, r4, #2
 8008a94:	d004      	beq.n	8008aa0 <SCSI_ProcessCmd+0x408>
    SCSI_SenseCode (pdev,
 8008a96:	2224      	movs	r2, #36	; 0x24
 8008a98:	2105      	movs	r1, #5
    SCSI_SenseCode(pdev, 
 8008a9a:	f7ff fde5 	bl	8008668 <SCSI_SenseCode.constprop.8>
 8008a9e:	e680      	b.n	80087a2 <SCSI_ProcessCmd+0x10a>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8008aa0:	f242 0268 	movw	r2, #8296	; 0x2068
  if(SCSI_CheckAddressRange(pdev,
 8008aa4:	f242 0164 	movw	r1, #8292	; 0x2064
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8008aa8:	5a9a      	ldrh	r2, [r3, r2]
 8008aaa:	5859      	ldr	r1, [r3, r1]
 8008aac:	440a      	add	r2, r1
 8008aae:	f242 0160 	movw	r1, #8288	; 0x2060
 8008ab2:	5859      	ldr	r1, [r3, r1]
 8008ab4:	428a      	cmp	r2, r1
 8008ab6:	f67f ae0a 	bls.w	80086ce <SCSI_ProcessCmd+0x36>
 8008aba:	e74a      	b.n	8008952 <SCSI_ProcessCmd+0x2ba>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 8008abc:	2202      	movs	r2, #2
 8008abe:	7232      	strb	r2, [r6, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8008ac0:	f242 025e 	movw	r2, #8286	; 0x205e
 8008ac4:	5ab2      	ldrh	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8008ac6:	4351      	muls	r1, r2
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8008ac8:	4353      	muls	r3, r2
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8008aca:	f242 0214 	movw	r2, #8212	; 0x2014
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8008ace:	f846 300e 	str.w	r3, [r6, lr]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8008ad2:	58b2      	ldr	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8008ad4:	5031      	str	r1, [r6, r0]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8008ad6:	4291      	cmp	r1, r2
 8008ad8:	f47f adef 	bne.w	80086ba <SCSI_ProcessCmd+0x22>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 8008adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ae0:	8173      	strh	r3, [r6, #10]
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8008ae2:	f242 0868 	movw	r8, #8296	; 0x2068
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 8008ae6:	f8d5 6218 	ldr.w	r6, [r5, #536]	; 0x218
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8008aea:	f8d5 021c 	ldr.w	r0, [r5, #540]	; 0x21c
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8008aee:	f856 7008 	ldr.w	r7, [r6, r8]
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8008af2:	f8d0 b010 	ldr.w	fp, [r0, #16]
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8008af6:	429f      	cmp	r7, r3
 8008af8:	bf28      	it	cs
 8008afa:	461f      	movcs	r7, r3
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8008afc:	f242 0964 	movw	r9, #8292	; 0x2064
 8008b00:	f242 035e 	movw	r3, #8286	; 0x205e
                              hmsc->bot_data, 
 8008b04:	f106 0a0c 	add.w	sl, r6, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8008b08:	5af2      	ldrh	r2, [r6, r3]
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8008b0a:	f856 1009 	ldr.w	r1, [r6, r9]
                              len / hmsc->scsi_blk_size) < 0)
 8008b0e:	fbb7 f3f2 	udiv	r3, r7, r2
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8008b12:	4620      	mov	r0, r4
 8008b14:	fbb1 f2f2 	udiv	r2, r1, r2
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	4651      	mov	r1, sl
 8008b1c:	47d8      	blx	fp
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	f6bf af1a 	bge.w	8008958 <SCSI_ProcessCmd+0x2c0>
    SCSI_SenseCode(pdev,
 8008b24:	2211      	movs	r2, #17
    SCSI_SenseCode(pdev,
 8008b26:	2104      	movs	r1, #4
 8008b28:	e6c9      	b.n	80088be <SCSI_ProcessCmd+0x226>
 8008b2a:	bf00      	nop
 8008b2c:	0800c974 	.word	0x0800c974
 8008b30:	0800c974 	.word	0x0800c974
 8008b34:	0800c96c 	.word	0x0800c96c

08008b38 <SCSI_SenseCode>:
{
 8008b38:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008b3a:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8008b3e:	f242 055d 	movw	r5, #8285	; 0x205d
 8008b42:	f242 063c 	movw	r6, #8252	; 0x203c
 8008b46:	5d41      	ldrb	r1, [r0, r5]
 8008b48:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
  hmsc->scsi_sense_tail++;
 8008b4c:	3101      	adds	r1, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8008b4e:	55a2      	strb	r2, [r4, r6]
  hmsc->scsi_sense_tail++;
 8008b50:	b2c9      	uxtb	r1, r1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8008b52:	f504 5401 	add.w	r4, r4, #8256	; 0x2040
 8008b56:	021b      	lsls	r3, r3, #8
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8008b58:	2904      	cmp	r1, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8008b5a:	6023      	str	r3, [r4, #0]
    hmsc->scsi_sense_tail = 0;
 8008b5c:	bf0a      	itet	eq
 8008b5e:	2300      	moveq	r3, #0
  hmsc->scsi_sense_tail++;
 8008b60:	5541      	strbne	r1, [r0, r5]
    hmsc->scsi_sense_tail = 0;
 8008b62:	5543      	strbeq	r3, [r0, r5]
 8008b64:	bd70      	pop	{r4, r5, r6, pc}

08008b66 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b66:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008b68:	b180      	cbz	r0, 8008b8c <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8008b6a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008b6e:	b113      	cbz	r3, 8008b76 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8008b70:	2300      	movs	r3, #0
 8008b72:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008b76:	b109      	cbz	r1, 8008b7c <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8008b78:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8008b82:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008b84:	f7fa ff4a 	bl	8003a1c <USBD_LL_Init>

  return USBD_OK;
 8008b88:	2000      	movs	r0, #0
 8008b8a:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8008b8c:	2002      	movs	r0, #2
}
 8008b8e:	bd08      	pop	{r3, pc}

08008b90 <Battey_Charge_Mode>:

USBD_StatusTypeDef Battey_Charge_Mode(USBD_HandleTypeDef *pdev)
{
	if ( pdev->dev_state  == USBD_STATE_DEFAULT)
 8008b90:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008b94:	2b01      	cmp	r3, #1
		return USBD_OK;
	else
		return USBD_FAIL;

}
 8008b96:	bf14      	ite	ne
 8008b98:	2002      	movne	r0, #2
 8008b9a:	2000      	moveq	r0, #0
 8008b9c:	4770      	bx	lr

08008b9e <USBD_DeInit>:
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
  /* Set Default State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008b9e:	2301      	movs	r3, #1
{
 8008ba0:	b510      	push	{r4, lr}
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008ba2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008ba6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008baa:	7901      	ldrb	r1, [r0, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
{
 8008bae:	4604      	mov	r4, r0
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008bb0:	4798      	blx	r3
  
    /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f7fa ff6e 	bl	8003a94 <USBD_LL_Stop>
  
  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f7fa ff5d 	bl	8003a78 <USBD_LL_DeInit>
  
  return USBD_OK;
}
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	bd10      	pop	{r4, pc}

08008bc2 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8008bc2:	b119      	cbz	r1, 8008bcc <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008bc4:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8008bc8:	2000      	movs	r0, #0
 8008bca:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8008bcc:	2002      	movs	r0, #2
  }
  
  return status;
}
 8008bce:	4770      	bx	lr

08008bd0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8008bd0:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8008bd2:	f7fa ff58 	bl	8003a86 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	bd08      	pop	{r3, pc}

08008bda <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
{
 8008bda:	b510      	push	{r4, lr}
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008bdc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008be0:	7901      	ldrb	r1, [r0, #4]
 8008be2:	685b      	ldr	r3, [r3, #4]
{
 8008be4:	4604      	mov	r4, r0
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008be6:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 8008be8:	4620      	mov	r0, r4
 8008bea:	f7fa ff53 	bl	8003a94 <USBD_LL_Stop>
  
  return USBD_OK;  
}
 8008bee:	2000      	movs	r0, #0
 8008bf0:	bd10      	pop	{r4, pc}

08008bf2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008bf2:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8008bf4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008bf8:	b90b      	cbnz	r3, 8008bfe <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008bfa:	2002      	movs	r0, #2
 8008bfc:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4798      	blx	r3
 8008c02:	2800      	cmp	r0, #0
 8008c04:	d1f9      	bne.n	8008bfa <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8008c06:	bd08      	pop	{r3, pc}

08008c08 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008c08:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8008c0a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	4798      	blx	r3
  return USBD_OK;
}
 8008c12:	2000      	movs	r0, #0
 8008c14:	bd08      	pop	{r3, pc}

08008c16 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c16:	b538      	push	{r3, r4, r5, lr}
 8008c18:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c1a:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8008c1e:	4628      	mov	r0, r5
 8008c20:	f000 fa75 	bl	800910e <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8008c24:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8008c26:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8008c2a:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8008c2e:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8008c32:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8008c36:	f001 031f 	and.w	r3, r1, #31
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d00e      	beq.n	8008c5c <USBD_LL_SetupStage+0x46>
 8008c3e:	d307      	bcc.n	8008c50 <USBD_LL_SetupStage+0x3a>
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d010      	beq.n	8008c66 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8008c44:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f7fa ff42 	bl	8003ad2 <USBD_LL_StallEP>
    break;
 8008c4e:	e003      	b.n	8008c58 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8008c50:	4629      	mov	r1, r5
 8008c52:	4620      	mov	r0, r4
 8008c54:	f000 f8e6 	bl	8008e24 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8008c58:	2000      	movs	r0, #0
 8008c5a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f000 f9da 	bl	8009018 <USBD_StdItfReq>
    break;
 8008c64:	e7f8      	b.n	8008c58 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8008c66:	4629      	mov	r1, r5
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 f9ed 	bl	8009048 <USBD_StdEPReq>
    break;
 8008c6e:	e7f3      	b.n	8008c58 <USBD_LL_SetupStage+0x42>

08008c70 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	4604      	mov	r4, r0
 8008c74:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8008c76:	bb11      	cbnz	r1, 8008cbe <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c78:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8008c7c:	2b03      	cmp	r3, #3
 8008c7e:	d10f      	bne.n	8008ca0 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8008c80:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8008c84:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d90b      	bls.n	8008ca4 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8008c8c:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	bf28      	it	cs
 8008c92:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8008c94:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8008c98:	b292      	uxth	r2, r2
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	f000 fa96 	bl	80091cc <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008ca4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	b123      	cbz	r3, 8008cb6 <USBD_LL_DataOutStage+0x46>
 8008cac:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8008cb0:	2a03      	cmp	r2, #3
 8008cb2:	d100      	bne.n	8008cb6 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8008cb4:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	f000 fa90 	bl	80091dc <USBD_CtlSendStatus>
 8008cbc:	e7f0      	b.n	8008ca0 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8008cbe:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d0eb      	beq.n	8008ca0 <USBD_LL_DataOutStage+0x30>
 8008cc8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8008ccc:	2a03      	cmp	r2, #3
 8008cce:	d1e7      	bne.n	8008ca0 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8008cd0:	4798      	blx	r3
 8008cd2:	e7e5      	b.n	8008ca0 <USBD_LL_DataOutStage+0x30>

08008cd4 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8008cd4:	b570      	push	{r4, r5, r6, lr}
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8008cda:	460e      	mov	r6, r1
 8008cdc:	2900      	cmp	r1, #0
 8008cde:	d13d      	bne.n	8008d5c <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ce0:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8008ce4:	2a02      	cmp	r2, #2
 8008ce6:	d10f      	bne.n	8008d08 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8008ce8:	69c5      	ldr	r5, [r0, #28]
 8008cea:	6a02      	ldr	r2, [r0, #32]
 8008cec:	4295      	cmp	r5, r2
 8008cee:	d914      	bls.n	8008d1a <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8008cf0:	1aaa      	subs	r2, r5, r2
 8008cf2:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	b292      	uxth	r2, r2
 8008cf8:	f000 fa51 	bl	800919e <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8008cfc:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8008cfe:	461a      	mov	r2, r3
 8008d00:	4619      	mov	r1, r3
 8008d02:	4620      	mov	r0, r4
 8008d04:	f7fa ff14 	bl	8003b30 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8008d08:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d102      	bne.n	8008d16 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8008d16:	2000      	movs	r0, #0
 8008d18:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8008d1a:	6983      	ldr	r3, [r0, #24]
 8008d1c:	fbb3 f5f2 	udiv	r5, r3, r2
 8008d20:	fb02 3515 	mls	r5, r2, r5, r3
 8008d24:	b965      	cbnz	r5, 8008d40 <USBD_LL_DataInStage+0x6c>
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d80a      	bhi.n	8008d40 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8008d2a:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d206      	bcs.n	8008d40 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8008d32:	462a      	mov	r2, r5
 8008d34:	f000 fa33 	bl	800919e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8008d38:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8008d3c:	462b      	mov	r3, r5
 8008d3e:	e7de      	b.n	8008cfe <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008d40:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	b12b      	cbz	r3, 8008d54 <USBD_LL_DataInStage+0x80>
 8008d48:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8008d4c:	2a03      	cmp	r2, #3
 8008d4e:	d101      	bne.n	8008d54 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8008d50:	4620      	mov	r0, r4
 8008d52:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8008d54:	4620      	mov	r0, r4
 8008d56:	f000 fa4c 	bl	80091f2 <USBD_CtlReceiveStatus>
 8008d5a:	e7d5      	b.n	8008d08 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8008d5c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0d7      	beq.n	8008d16 <USBD_LL_DataInStage+0x42>
 8008d66:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8008d6a:	2a03      	cmp	r2, #3
 8008d6c:	d1d3      	bne.n	8008d16 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8008d6e:	4798      	blx	r3
 8008d70:	e7d1      	b.n	8008d16 <USBD_LL_DataInStage+0x42>

08008d72 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008d72:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8008d74:	2200      	movs	r2, #0
{
 8008d76:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8008d78:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d7a:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8008d7c:	2340      	movs	r3, #64	; 0x40
 8008d7e:	f7fa fe90 	bl	8003aa2 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8008d82:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d84:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8008d88:	2200      	movs	r2, #0
 8008d8a:	2180      	movs	r1, #128	; 0x80
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f7fa fe88 	bl	8003aa2 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d92:	2301      	movs	r3, #1
 8008d94:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8008d98:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d9c:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8008d9e:	b12b      	cbz	r3, 8008dac <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008da0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8008da4:	7921      	ldrb	r1, [r4, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	4620      	mov	r0, r4
 8008daa:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8008dac:	2000      	movs	r0, #0
 8008dae:	bd38      	pop	{r3, r4, r5, pc}

08008db0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8008db0:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8008db2:	2000      	movs	r0, #0
 8008db4:	4770      	bx	lr

08008db6 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8008db6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008dba:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008dbe:	2304      	movs	r3, #4
 8008dc0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	4770      	bx	lr

08008dc8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8008dc8:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8008dcc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	4770      	bx	lr

08008dd4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008dd4:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8008dda:	2a03      	cmp	r2, #3
 8008ddc:	d104      	bne.n	8008de8 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8008dde:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008de2:	69db      	ldr	r3, [r3, #28]
 8008de4:	b103      	cbz	r3, 8008de8 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8008de6:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8008de8:	2000      	movs	r0, #0
 8008dea:	bd08      	pop	{r3, pc}

08008dec <USBD_LL_IsoINIncomplete>:
 8008dec:	2000      	movs	r0, #0
 8008dee:	4770      	bx	lr

08008df0 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8008df0:	2000      	movs	r0, #0
 8008df2:	4770      	bx	lr

08008df4 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8008df4:	2000      	movs	r0, #0
 8008df6:	4770      	bx	lr

08008df8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8008df8:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008e00:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8008e04:	7901      	ldrb	r1, [r0, #4]
 8008e06:	6852      	ldr	r2, [r2, #4]
 8008e08:	4790      	blx	r2
   
  return USBD_OK;
}
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	bd08      	pop	{r3, pc}

08008e0e <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8008e0e:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8008e10:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8008e12:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8008e14:	f7fa fe5d 	bl	8003ad2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8008e18:	4620      	mov	r0, r4
 8008e1a:	2100      	movs	r1, #0
}
 8008e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8008e20:	f7fa be57 	b.w	8003ad2 <USBD_LL_StallEP>

08008e24 <USBD_StdDevReq>:
{
 8008e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8008e26:	784b      	ldrb	r3, [r1, #1]
{
 8008e28:	4604      	mov	r4, r0
 8008e2a:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8008e2c:	2b09      	cmp	r3, #9
 8008e2e:	d879      	bhi.n	8008f24 <USBD_StdDevReq+0x100>
 8008e30:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008e34:	00e500c9 	.word	0x00e500c9
 8008e38:	00d90078 	.word	0x00d90078
 8008e3c:	006d0078 	.word	0x006d0078
 8008e40:	0078000a 	.word	0x0078000a
 8008e44:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8008e48:	884b      	ldrh	r3, [r1, #2]
 8008e4a:	0a1a      	lsrs	r2, r3, #8
 8008e4c:	3a01      	subs	r2, #1
 8008e4e:	2a06      	cmp	r2, #6
 8008e50:	d868      	bhi.n	8008f24 <USBD_StdDevReq+0x100>
 8008e52:	e8df f002 	tbb	[pc, r2]
 8008e56:	1c04      	.short	0x1c04
 8008e58:	49676729 	.word	0x49676729
 8008e5c:	52          	.byte	0x52
 8008e5d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e5e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8008e62:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8008e64:	7c20      	ldrb	r0, [r4, #16]
 8008e66:	f10d 0106 	add.w	r1, sp, #6
 8008e6a:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8008e6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008e70:	2a00      	cmp	r2, #0
 8008e72:	d067      	beq.n	8008f44 <USBD_StdDevReq+0x120>
 8008e74:	88eb      	ldrh	r3, [r5, #6]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d064      	beq.n	8008f44 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	bf28      	it	cs
 8008e7e:	461a      	movcs	r2, r3
 8008e80:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8008e84:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 8008e86:	4620      	mov	r0, r4
 8008e88:	f000 f97c 	bl	8009184 <USBD_CtlSendData>
 8008e8c:	e05a      	b.n	8008f44 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8008e8e:	7c02      	ldrb	r2, [r0, #16]
 8008e90:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008e94:	b932      	cbnz	r2, 8008ea4 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008e98:	f10d 0006 	add.w	r0, sp, #6
 8008e9c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e9e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ea0:	7043      	strb	r3, [r0, #1]
 8008ea2:	e7e3      	b.n	8008e6c <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea6:	e7f7      	b.n	8008e98 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b05      	cmp	r3, #5
 8008eac:	d83a      	bhi.n	8008f24 <USBD_StdDevReq+0x100>
 8008eae:	e8df f003 	tbb	[pc, r3]
 8008eb2:	0703      	.short	0x0703
 8008eb4:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8008eb8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	e7d1      	b.n	8008e64 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ec0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	e7cd      	b.n	8008e64 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ec8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	e7c9      	b.n	8008e64 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ed0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	e7c5      	b.n	8008e64 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ed8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8008edc:	695b      	ldr	r3, [r3, #20]
 8008ede:	e7c1      	b.n	8008e64 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ee0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	e7bd      	b.n	8008e64 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8008ee8:	7c03      	ldrb	r3, [r0, #16]
 8008eea:	b9db      	cbnz	r3, 8008f24 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008eec:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008ef0:	f10d 0006 	add.w	r0, sp, #6
 8008ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef6:	4798      	blx	r3
 8008ef8:	e7b8      	b.n	8008e6c <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8008efa:	7c03      	ldrb	r3, [r0, #16]
 8008efc:	b993      	cbnz	r3, 8008f24 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008efe:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008f02:	f10d 0006 	add.w	r0, sp, #6
 8008f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f08:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f0a:	2307      	movs	r3, #7
 8008f0c:	e7c8      	b.n	8008ea0 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8008f0e:	888b      	ldrh	r3, [r1, #4]
 8008f10:	b943      	cbnz	r3, 8008f24 <USBD_StdDevReq+0x100>
 8008f12:	88cb      	ldrh	r3, [r1, #6]
 8008f14:	b933      	cbnz	r3, 8008f24 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8008f16:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8008f1a:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8008f1c:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8008f1e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8008f22:	d103      	bne.n	8008f2c <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8008f24:	4620      	mov	r0, r4
 8008f26:	f7ff ff72 	bl	8008e0e <USBD_CtlError.constprop.0>
    break;
 8008f2a:	e00b      	b.n	8008f44 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8008f2c:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8008f30:	4629      	mov	r1, r5
 8008f32:	f7fa fdef 	bl	8003b14 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8008f36:	4620      	mov	r0, r4
 8008f38:	f000 f950 	bl	80091dc <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8008f3c:	b12d      	cbz	r5, 8008f4a <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8008f3e:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8008f40:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8008f44:	2000      	movs	r0, #0
 8008f46:	b003      	add	sp, #12
 8008f48:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e7f8      	b.n	8008f40 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8008f4e:	7889      	ldrb	r1, [r1, #2]
 8008f50:	4d30      	ldr	r5, [pc, #192]	; (8009014 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8008f52:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8008f54:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8008f56:	d8e5      	bhi.n	8008f24 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8008f58:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d00c      	beq.n	8008f7a <USBD_StdDevReq+0x156>
 8008f60:	2b03      	cmp	r3, #3
 8008f62:	d1df      	bne.n	8008f24 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8008f64:	b9b1      	cbnz	r1, 8008f94 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f66:	2302      	movs	r3, #2
 8008f68:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8008f6c:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8008f6e:	f7ff fe4b 	bl	8008c08 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8008f72:	4620      	mov	r0, r4
 8008f74:	f000 f932 	bl	80091dc <USBD_CtlSendStatus>
 8008f78:	e7e4      	b.n	8008f44 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8008f7a:	2900      	cmp	r1, #0
 8008f7c:	d0f9      	beq.n	8008f72 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8008f7e:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f80:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8008f82:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f84:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f7ff fe32 	bl	8008bf2 <USBD_SetClassConfig>
 8008f8e:	2802      	cmp	r0, #2
 8008f90:	d1ef      	bne.n	8008f72 <USBD_StdDevReq+0x14e>
 8008f92:	e7c7      	b.n	8008f24 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8008f94:	6841      	ldr	r1, [r0, #4]
 8008f96:	2901      	cmp	r1, #1
 8008f98:	d0eb      	beq.n	8008f72 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8008f9a:	b2c9      	uxtb	r1, r1
 8008f9c:	f7ff fe34 	bl	8008c08 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008fa0:	7829      	ldrb	r1, [r5, #0]
 8008fa2:	6061      	str	r1, [r4, #4]
 8008fa4:	e7f0      	b.n	8008f88 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8008fa6:	88ca      	ldrh	r2, [r1, #6]
 8008fa8:	2a01      	cmp	r2, #1
 8008faa:	d1bb      	bne.n	8008f24 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8008fac:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d003      	beq.n	8008fbc <USBD_StdDevReq+0x198>
 8008fb4:	2b03      	cmp	r3, #3
 8008fb6:	d1b5      	bne.n	8008f24 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8008fb8:	1d01      	adds	r1, r0, #4
 8008fba:	e764      	b.n	8008e86 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8008fbc:	4601      	mov	r1, r0
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	f841 3f08 	str.w	r3, [r1, #8]!
 8008fc4:	e75f      	b.n	8008e86 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8008fc6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008fca:	3b02      	subs	r3, #2
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d8a9      	bhi.n	8008f24 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8008fd4:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8008fd8:	b10b      	cbz	r3, 8008fde <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8008fda:	2303      	movs	r3, #3
 8008fdc:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8008fde:	2202      	movs	r2, #2
 8008fe0:	f104 010c 	add.w	r1, r4, #12
 8008fe4:	e74f      	b.n	8008e86 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fe6:	884b      	ldrh	r3, [r1, #2]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d1ab      	bne.n	8008f44 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8008fec:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8008ff0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	4798      	blx	r3
 8008ffc:	e7b9      	b.n	8008f72 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8008ffe:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8009002:	3b02      	subs	r3, #2
 8009004:	2b01      	cmp	r3, #1
 8009006:	d88d      	bhi.n	8008f24 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8009008:	884b      	ldrh	r3, [r1, #2]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d19a      	bne.n	8008f44 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800900e:	2300      	movs	r3, #0
 8009010:	e7ec      	b.n	8008fec <USBD_StdDevReq+0x1c8>
 8009012:	bf00      	nop
 8009014:	2000063a 	.word	0x2000063a

08009018 <USBD_StdItfReq>:
{
 8009018:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800901a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800901e:	2b03      	cmp	r3, #3
{
 8009020:	4604      	mov	r4, r0
 8009022:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8009024:	d10d      	bne.n	8009042 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8009026:	790b      	ldrb	r3, [r1, #4]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d80a      	bhi.n	8009042 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 800902c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8009034:	88eb      	ldrh	r3, [r5, #6]
 8009036:	b913      	cbnz	r3, 800903e <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8009038:	4620      	mov	r0, r4
 800903a:	f000 f8cf 	bl	80091dc <USBD_CtlSendStatus>
}
 800903e:	2000      	movs	r0, #0
 8009040:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8009042:	f7ff fee4 	bl	8008e0e <USBD_CtlError.constprop.0>
    break;
 8009046:	e7fa      	b.n	800903e <USBD_StdItfReq+0x26>

08009048 <USBD_StdEPReq>:
{
 8009048:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 800904a:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 800904c:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 800904e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8009052:	2a20      	cmp	r2, #32
{
 8009054:	4604      	mov	r4, r0
 8009056:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8009058:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 800905a:	d105      	bne.n	8009068 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 800905c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	4798      	blx	r3
}
 8009064:	2000      	movs	r0, #0
 8009066:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8009068:	784a      	ldrb	r2, [r1, #1]
 800906a:	2a01      	cmp	r2, #1
 800906c:	d01c      	beq.n	80090a8 <USBD_StdEPReq+0x60>
 800906e:	d32a      	bcc.n	80090c6 <USBD_StdEPReq+0x7e>
 8009070:	2a03      	cmp	r2, #3
 8009072:	d1f7      	bne.n	8009064 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8009074:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8009078:	2a02      	cmp	r2, #2
 800907a:	d040      	beq.n	80090fe <USBD_StdEPReq+0xb6>
 800907c:	2a03      	cmp	r2, #3
 800907e:	d002      	beq.n	8009086 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8009080:	f7ff fec5 	bl	8008e0e <USBD_CtlError.constprop.0>
      break;
 8009084:	e7ee      	b.n	8009064 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8009086:	884a      	ldrh	r2, [r1, #2]
 8009088:	b922      	cbnz	r2, 8009094 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800908a:	065e      	lsls	r6, r3, #25
 800908c:	d002      	beq.n	8009094 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800908e:	4619      	mov	r1, r3
 8009090:	f7fa fd1f 	bl	8003ad2 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8009094:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8009098:	4629      	mov	r1, r5
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	4620      	mov	r0, r4
 800909e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80090a0:	4620      	mov	r0, r4
 80090a2:	f000 f89b 	bl	80091dc <USBD_CtlSendStatus>
 80090a6:	e7dd      	b.n	8009064 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80090a8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80090ac:	2a02      	cmp	r2, #2
 80090ae:	d026      	beq.n	80090fe <USBD_StdEPReq+0xb6>
 80090b0:	2a03      	cmp	r2, #3
 80090b2:	d1e5      	bne.n	8009080 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80090b4:	884a      	ldrh	r2, [r1, #2]
 80090b6:	2a00      	cmp	r2, #0
 80090b8:	d1d4      	bne.n	8009064 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80090ba:	0659      	lsls	r1, r3, #25
 80090bc:	d0f0      	beq.n	80090a0 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80090be:	4619      	mov	r1, r3
 80090c0:	f7fa fd0e 	bl	8003ae0 <USBD_LL_ClearStallEP>
 80090c4:	e7e6      	b.n	8009094 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80090c6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80090ca:	2a02      	cmp	r2, #2
 80090cc:	d017      	beq.n	80090fe <USBD_StdEPReq+0xb6>
 80090ce:	2a03      	cmp	r2, #3
 80090d0:	d1d6      	bne.n	8009080 <USBD_StdEPReq+0x38>
 80090d2:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80090d6:	f016 0f80 	tst.w	r6, #128	; 0x80
 80090da:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80090de:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80090e0:	bf14      	ite	ne
 80090e2:	3514      	addne	r5, #20
 80090e4:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80090e8:	f7fa fd01 	bl	8003aee <USBD_LL_IsStallEP>
 80090ec:	b168      	cbz	r0, 800910a <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 80090ee:	2301      	movs	r3, #1
 80090f0:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 80090f2:	2202      	movs	r2, #2
 80090f4:	4629      	mov	r1, r5
 80090f6:	4620      	mov	r0, r4
 80090f8:	f000 f844 	bl	8009184 <USBD_CtlSendData>
      break;
 80090fc:	e7b2      	b.n	8009064 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 80090fe:	065a      	lsls	r2, r3, #25
 8009100:	d0b0      	beq.n	8009064 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8009102:	4619      	mov	r1, r3
 8009104:	f7fa fce5 	bl	8003ad2 <USBD_LL_StallEP>
 8009108:	e7ac      	b.n	8009064 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 800910a:	6028      	str	r0, [r5, #0]
 800910c:	e7f1      	b.n	80090f2 <USBD_StdEPReq+0xaa>

0800910e <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800910e:	780b      	ldrb	r3, [r1, #0]
 8009110:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009112:	784b      	ldrb	r3, [r1, #1]
 8009114:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009116:	78ca      	ldrb	r2, [r1, #3]
 8009118:	788b      	ldrb	r3, [r1, #2]
 800911a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800911e:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8009120:	794a      	ldrb	r2, [r1, #5]
 8009122:	790b      	ldrb	r3, [r1, #4]
 8009124:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009128:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800912a:	79ca      	ldrb	r2, [r1, #7]
 800912c:	798b      	ldrb	r3, [r1, #6]
 800912e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009132:	80c3      	strh	r3, [r0, #6]
 8009134:	4770      	bx	lr

08009136 <USBD_CtlError>:
{
 8009136:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 8009138:	2180      	movs	r1, #128	; 0x80
{
 800913a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800913c:	f7fa fcc9 	bl	8003ad2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8009140:	4620      	mov	r0, r4
 8009142:	2100      	movs	r1, #0
}
 8009144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8009148:	f7fa bcc3 	b.w	8003ad2 <USBD_LL_StallEP>

0800914c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800914c:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 800914e:	b188      	cbz	r0, 8009174 <USBD_GetString+0x28>
 8009150:	4605      	mov	r5, r0
 8009152:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8009154:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009158:	b2db      	uxtb	r3, r3
 800915a:	2c00      	cmp	r4, #0
 800915c:	d1f9      	bne.n	8009152 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800915e:	005b      	lsls	r3, r3, #1
 8009160:	3302      	adds	r3, #2
 8009162:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8009164:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8009166:	2303      	movs	r3, #3
 8009168:	704b      	strb	r3, [r1, #1]
 800916a:	3801      	subs	r0, #1
 800916c:	2302      	movs	r3, #2
    while (*desc != '\0') 
 800916e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009172:	b905      	cbnz	r5, 8009176 <USBD_GetString+0x2a>
 8009174:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8009176:	1c5a      	adds	r2, r3, #1
 8009178:	b2d2      	uxtb	r2, r2
 800917a:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 800917c:	3302      	adds	r3, #2
 800917e:	b2db      	uxtb	r3, r3
 8009180:	548c      	strb	r4, [r1, r2]
 8009182:	e7f4      	b.n	800916e <USBD_GetString+0x22>

08009184 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8009184:	b510      	push	{r4, lr}
 8009186:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8009188:	2202      	movs	r2, #2
 800918a:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800918e:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8009190:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8009192:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8009194:	2100      	movs	r1, #0
 8009196:	f7fa fcc4 	bl	8003b22 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800919a:	2000      	movs	r0, #0
 800919c:	bd10      	pop	{r4, pc}

0800919e <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800919e:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80091a0:	4613      	mov	r3, r2
 80091a2:	460a      	mov	r2, r1
 80091a4:	2100      	movs	r1, #0
 80091a6:	f7fa fcbc 	bl	8003b22 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80091aa:	2000      	movs	r0, #0
 80091ac:	bd08      	pop	{r3, pc}

080091ae <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80091ae:	b510      	push	{r4, lr}
 80091b0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80091b2:	2203      	movs	r2, #3
 80091b4:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80091b8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80091bc:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80091be:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 80091c2:	2100      	movs	r1, #0
 80091c4:	f7fa fcb4 	bl	8003b30 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80091c8:	2000      	movs	r0, #0
 80091ca:	bd10      	pop	{r4, pc}

080091cc <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80091cc:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80091ce:	4613      	mov	r3, r2
 80091d0:	460a      	mov	r2, r1
 80091d2:	2100      	movs	r1, #0
 80091d4:	f7fa fcac 	bl	8003b30 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80091d8:	2000      	movs	r0, #0
 80091da:	bd08      	pop	{r3, pc}

080091dc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80091dc:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80091de:	2304      	movs	r3, #4
 80091e0:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80091e4:	2300      	movs	r3, #0
 80091e6:	461a      	mov	r2, r3
 80091e8:	4619      	mov	r1, r3
 80091ea:	f7fa fc9a 	bl	8003b22 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80091ee:	2000      	movs	r0, #0
 80091f0:	bd08      	pop	{r3, pc}

080091f2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80091f2:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80091f4:	2305      	movs	r3, #5
 80091f6:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80091fa:	2300      	movs	r3, #0
 80091fc:	461a      	mov	r2, r3
 80091fe:	4619      	mov	r1, r3
 8009200:	f7fa fc96 	bl	8003b30 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8009204:	2000      	movs	r0, #0
 8009206:	bd08      	pop	{r3, pc}

08009208 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009208:	4b03      	ldr	r3, [pc, #12]	; (8009218 <disk_status+0x10>)
 800920a:	181a      	adds	r2, r3, r0
 800920c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009210:	7a10      	ldrb	r0, [r2, #8]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	4718      	bx	r3
 8009218:	2000065c 	.word	0x2000065c

0800921c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 800921c:	4b06      	ldr	r3, [pc, #24]	; (8009238 <disk_initialize+0x1c>)
 800921e:	5c1a      	ldrb	r2, [r3, r0]
 8009220:	b942      	cbnz	r2, 8009234 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8009222:	2201      	movs	r2, #1
 8009224:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009226:	181a      	adds	r2, r3, r0
 8009228:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800922c:	7a10      	ldrb	r0, [r2, #8]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4718      	bx	r3
  }
  return stat;
}
 8009234:	2000      	movs	r0, #0
 8009236:	4770      	bx	lr
 8009238:	2000065c 	.word	0x2000065c

0800923c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800923c:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800923e:	4c05      	ldr	r4, [pc, #20]	; (8009254 <disk_read+0x18>)
 8009240:	1825      	adds	r5, r4, r0
 8009242:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8009246:	6860      	ldr	r0, [r4, #4]
 8009248:	6884      	ldr	r4, [r0, #8]
 800924a:	7a28      	ldrb	r0, [r5, #8]
 800924c:	46a4      	mov	ip, r4
  return res;
}
 800924e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009250:	4760      	bx	ip
 8009252:	bf00      	nop
 8009254:	2000065c 	.word	0x2000065c

08009258 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009258:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800925a:	4c05      	ldr	r4, [pc, #20]	; (8009270 <disk_write+0x18>)
 800925c:	1825      	adds	r5, r4, r0
 800925e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8009262:	6860      	ldr	r0, [r4, #4]
 8009264:	68c4      	ldr	r4, [r0, #12]
 8009266:	7a28      	ldrb	r0, [r5, #8]
 8009268:	46a4      	mov	ip, r4
  return res;
}
 800926a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800926c:	4760      	bx	ip
 800926e:	bf00      	nop
 8009270:	2000065c 	.word	0x2000065c

08009274 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009274:	4b05      	ldr	r3, [pc, #20]	; (800928c <disk_ioctl+0x18>)
{
 8009276:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009278:	181c      	adds	r4, r3, r0
 800927a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800927e:	7a20      	ldrb	r0, [r4, #8]
 8009280:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8009282:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	4718      	bx	r3
 800928a:	bf00      	nop
 800928c:	2000065c 	.word	0x2000065c

08009290 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009290:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8009292:	4c06      	ldr	r4, [pc, #24]	; (80092ac <SD_initialize+0x1c>)
 8009294:	2301      	movs	r3, #1
 8009296:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8009298:	f7f7 ffb0 	bl	80011fc <BSP_SD_Init>
 800929c:	4623      	mov	r3, r4
 800929e:	b918      	cbnz	r0, 80092a8 <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 80092a0:	7822      	ldrb	r2, [r4, #0]
 80092a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80092a6:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 80092a8:	7818      	ldrb	r0, [r3, #0]
}
 80092aa:	bd10      	pop	{r4, pc}
 80092ac:	200002c8 	.word	0x200002c8

080092b0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80092b0:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80092b2:	4c06      	ldr	r4, [pc, #24]	; (80092cc <SD_status+0x1c>)
 80092b4:	2301      	movs	r3, #1
 80092b6:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetStatus() == MSD_OK)
 80092b8:	f7f7 ff0a 	bl	80010d0 <BSP_SD_GetStatus>
 80092bc:	4623      	mov	r3, r4
 80092be:	b918      	cbnz	r0, 80092c8 <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 80092c0:	7822      	ldrb	r2, [r4, #0]
 80092c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80092c6:	7022      	strb	r2, [r4, #0]
  }
  
  return Stat;
 80092c8:	7818      	ldrb	r0, [r3, #0]
}
 80092ca:	bd10      	pop	{r4, pc}
 80092cc:	200002c8 	.word	0x200002c8

080092d0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80092d0:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80092d2:	9301      	str	r3, [sp, #4]
 80092d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	0252      	lsls	r2, r2, #9
 80092dc:	2300      	movs	r3, #0
 80092de:	4608      	mov	r0, r1
 80092e0:	f7f7 ff34 	bl	800114c <BSP_SD_ReadBlocks_DMA>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 80092e4:	3000      	adds	r0, #0
 80092e6:	bf18      	it	ne
 80092e8:	2001      	movne	r0, #1
 80092ea:	b003      	add	sp, #12
 80092ec:	f85d fb04 	ldr.w	pc, [sp], #4

080092f0 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80092f0:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80092f2:	9301      	str	r3, [sp, #4]
 80092f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	0252      	lsls	r2, r2, #9
 80092fc:	2300      	movs	r3, #0
 80092fe:	4608      	mov	r0, r1
 8009300:	f7f7 fffc 	bl	80012fc <BSP_SD_WriteBlocks_DMA>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 8009304:	3000      	adds	r0, #0
 8009306:	bf18      	it	ne
 8009308:	2001      	movne	r0, #1
 800930a:	b003      	add	sp, #12
 800930c:	f85d fb04 	ldr.w	pc, [sp], #4

08009310 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009310:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009312:	4b12      	ldr	r3, [pc, #72]	; (800935c <SD_ioctl+0x4c>)
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	07db      	lsls	r3, r3, #31
{
 8009318:	b096      	sub	sp, #88	; 0x58
 800931a:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800931c:	d41c      	bmi.n	8009358 <SD_ioctl+0x48>
  
  switch (cmd)
 800931e:	2903      	cmp	r1, #3
 8009320:	d803      	bhi.n	800932a <SD_ioctl+0x1a>
 8009322:	e8df f001 	tbb	[pc, r1]
 8009326:	050e      	.short	0x050e
 8009328:	1410      	.short	0x1410
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = BLOCK_SIZE;
    break;
  
  default:
    res = RES_PARERR;
 800932a:	2004      	movs	r0, #4
  }
  
  return res;
}
 800932c:	b016      	add	sp, #88	; 0x58
 800932e:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8009330:	4668      	mov	r0, sp
 8009332:	f7f7 fed3 	bl	80010dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.CardCapacity / BLOCK_SIZE;
 8009336:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009338:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800933a:	0a5b      	lsrs	r3, r3, #9
 800933c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009340:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8009342:	2000      	movs	r0, #0
 8009344:	e7f2      	b.n	800932c <SD_ioctl+0x1c>
    *(WORD*)buff = BLOCK_SIZE;
 8009346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800934a:	8013      	strh	r3, [r2, #0]
 800934c:	e7f9      	b.n	8009342 <SD_ioctl+0x32>
    *(DWORD*)buff = BLOCK_SIZE;
 800934e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009352:	6013      	str	r3, [r2, #0]
  DRESULT res = RES_ERROR;
 8009354:	2001      	movs	r0, #1
    break;
 8009356:	e7e9      	b.n	800932c <SD_ioctl+0x1c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009358:	2003      	movs	r0, #3
 800935a:	e7e7      	b.n	800932c <SD_ioctl+0x1c>
 800935c:	200002c8 	.word	0x200002c8

08009360 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009360:	3801      	subs	r0, #1
 8009362:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8009364:	4291      	cmp	r1, r2
 8009366:	d100      	bne.n	800936a <mem_cpy+0xa>
		*d++ = *s++;
}
 8009368:	4770      	bx	lr
		*d++ = *s++;
 800936a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800936e:	f800 3f01 	strb.w	r3, [r0, #1]!
 8009372:	e7f7      	b.n	8009364 <mem_cpy+0x4>

08009374 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009374:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8009376:	4290      	cmp	r0, r2
 8009378:	d100      	bne.n	800937c <mem_set+0x8>
		*d++ = (BYTE)val;
}
 800937a:	4770      	bx	lr
		*d++ = (BYTE)val;
 800937c:	f800 1b01 	strb.w	r1, [r0], #1
 8009380:	e7f9      	b.n	8009376 <mem_set+0x2>
	...

08009384 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009384:	4a17      	ldr	r2, [pc, #92]	; (80093e4 <chk_lock+0x60>)
 8009386:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009388:	2400      	movs	r4, #0
 800938a:	4623      	mov	r3, r4
 800938c:	4616      	mov	r6, r2
		if (Files[i].fs) {	/* Existing entry */
 800938e:	6815      	ldr	r5, [r2, #0]
 8009390:	b1c5      	cbz	r5, 80093c4 <chk_lock+0x40>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009392:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
 8009396:	42bd      	cmp	r5, r7
 8009398:	d115      	bne.n	80093c6 <chk_lock+0x42>
 800939a:	6857      	ldr	r7, [r2, #4]
 800939c:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 80093a0:	42af      	cmp	r7, r5
 80093a2:	d110      	bne.n	80093c6 <chk_lock+0x42>
				Files[i].clu == dp->sclust &&
 80093a4:	8917      	ldrh	r7, [r2, #8]
 80093a6:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 80093aa:	42af      	cmp	r7, r5
 80093ac:	d10b      	bne.n	80093c6 <chk_lock+0x42>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80093ae:	b9b9      	cbnz	r1, 80093e0 <chk_lock+0x5c>
 80093b0:	220c      	movs	r2, #12
 80093b2:	fb02 6303 	mla	r3, r2, r3, r6
 80093b6:	895b      	ldrh	r3, [r3, #10]
 80093b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093bc:	bf14      	ite	ne
 80093be:	2000      	movne	r0, #0
 80093c0:	2010      	moveq	r0, #16
 80093c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 80093c4:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 80093c6:	3301      	adds	r3, #1
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	f102 020c 	add.w	r2, r2, #12
 80093ce:	d1de      	bne.n	800938e <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80093d0:	b10c      	cbz	r4, 80093d6 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80093d2:	2000      	movs	r0, #0
 80093d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80093d6:	2902      	cmp	r1, #2
 80093d8:	bf0c      	ite	eq
 80093da:	2000      	moveq	r0, #0
 80093dc:	2012      	movne	r0, #18
 80093de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80093e0:	2010      	movs	r0, #16
 80093e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e4:	20000640 	.word	0x20000640

080093e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80093e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ea:	4c20      	ldr	r4, [pc, #128]	; (800946c <inc_lock+0x84>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 80093ec:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80093f0:	2300      	movs	r3, #0
 80093f2:	4622      	mov	r2, r4
		if (Files[i].fs == dp->fs &&
 80093f4:	6825      	ldr	r5, [r4, #0]
 80093f6:	42b5      	cmp	r5, r6
 80093f8:	d109      	bne.n	800940e <inc_lock+0x26>
 80093fa:	6867      	ldr	r7, [r4, #4]
 80093fc:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8009400:	42af      	cmp	r7, r5
 8009402:	d104      	bne.n	800940e <inc_lock+0x26>
			Files[i].clu == dp->sclust &&
 8009404:	8927      	ldrh	r7, [r4, #8]
 8009406:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 800940a:	42af      	cmp	r7, r5
 800940c:	d022      	beq.n	8009454 <inc_lock+0x6c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800940e:	3301      	adds	r3, #1
 8009410:	2b02      	cmp	r3, #2
 8009412:	f104 040c 	add.w	r4, r4, #12
 8009416:	d1ed      	bne.n	80093f4 <inc_lock+0xc>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009418:	6813      	ldr	r3, [r2, #0]
 800941a:	b113      	cbz	r3, 8009422 <inc_lock+0x3a>
 800941c:	68d3      	ldr	r3, [r2, #12]
 800941e:	bb1b      	cbnz	r3, 8009468 <inc_lock+0x80>
 8009420:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 8009422:	240c      	movs	r4, #12
 8009424:	435c      	muls	r4, r3
 8009426:	1915      	adds	r5, r2, r4
 8009428:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 800942a:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 800942e:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
 8009432:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 8009434:	2000      	movs	r0, #0
		Files[i].clu = dp->sclust;
 8009436:	606c      	str	r4, [r5, #4]
		Files[i].ctr = 0;
 8009438:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800943a:	b991      	cbnz	r1, 8009462 <inc_lock+0x7a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800943c:	210c      	movs	r1, #12
 800943e:	fb01 2103 	mla	r1, r1, r3, r2
 8009442:	8949      	ldrh	r1, [r1, #10]
 8009444:	3101      	adds	r1, #1
 8009446:	b289      	uxth	r1, r1
 8009448:	200c      	movs	r0, #12
 800944a:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 800944e:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009450:	8151      	strh	r1, [r2, #10]
	return i + 1;
 8009452:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009454:	2900      	cmp	r1, #0
 8009456:	d0f1      	beq.n	800943c <inc_lock+0x54>
 8009458:	210c      	movs	r1, #12
 800945a:	fb01 2103 	mla	r1, r1, r3, r2
 800945e:	8949      	ldrh	r1, [r1, #10]
 8009460:	b911      	cbnz	r1, 8009468 <inc_lock+0x80>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009462:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009466:	e7ef      	b.n	8009448 <inc_lock+0x60>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009468:	2000      	movs	r0, #0
 800946a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800946c:	20000640 	.word	0x20000640

08009470 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009470:	b530      	push	{r4, r5, lr}
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009472:	1e45      	subs	r5, r0, #1
 8009474:	2d01      	cmp	r5, #1
 8009476:	d811      	bhi.n	800949c <dec_lock+0x2c>
		n = Files[i].ctr;
 8009478:	490a      	ldr	r1, [pc, #40]	; (80094a4 <dec_lock+0x34>)
 800947a:	220c      	movs	r2, #12
 800947c:	fb02 1305 	mla	r3, r2, r5, r1
 8009480:	895c      	ldrh	r4, [r3, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n) n--;					/* Decrement read mode open count */
 8009482:	f424 7380 	bic.w	r3, r4, #256	; 0x100
 8009486:	b298      	uxth	r0, r3
 8009488:	b108      	cbz	r0, 800948e <dec_lock+0x1e>
 800948a:	3c01      	subs	r4, #1
 800948c:	b2a0      	uxth	r0, r4
		Files[i].ctr = n;
 800948e:	fb02 f305 	mul.w	r3, r2, r5
 8009492:	18ca      	adds	r2, r1, r3
 8009494:	8150      	strh	r0, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009496:	b918      	cbnz	r0, 80094a0 <dec_lock+0x30>
 8009498:	50c8      	str	r0, [r1, r3]
 800949a:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800949c:	2002      	movs	r0, #2
 800949e:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
 80094a0:	2000      	movs	r0, #0
	}
	return res;
}
 80094a2:	bd30      	pop	{r4, r5, pc}
 80094a4:	20000640 	.word	0x20000640

080094a8 <clmt_clust>:
)
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80094a8:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80094ac:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80094b0:	3304      	adds	r3, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80094b2:	0a49      	lsrs	r1, r1, #9
 80094b4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80094b8:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80094bc:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 80094be:	b130      	cbz	r0, 80094ce <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80094c0:	4281      	cmp	r1, r0
 80094c2:	d302      	bcc.n	80094ca <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 80094c4:	1a09      	subs	r1, r1, r0
 80094c6:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80094c8:	e7f8      	b.n	80094bc <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 80094ca:	6858      	ldr	r0, [r3, #4]
 80094cc:	4408      	add	r0, r1
}
 80094ce:	4770      	bx	lr

080094d0 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80094d0:	6802      	ldr	r2, [r0, #0]
{
 80094d2:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 80094d4:	b152      	cbz	r2, 80094ec <get_ldnumber+0x1c>
 80094d6:	4611      	mov	r1, r2
 80094d8:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80094da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094de:	2c20      	cmp	r4, #32
 80094e0:	d90c      	bls.n	80094fc <get_ldnumber+0x2c>
 80094e2:	2c3a      	cmp	r4, #58	; 0x3a
 80094e4:	d1f8      	bne.n	80094d8 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 80094e6:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80094e8:	428b      	cmp	r3, r1
 80094ea:	d002      	beq.n	80094f2 <get_ldnumber+0x22>
	int vol = -1;
 80094ec:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 80094f0:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80094f2:	7812      	ldrb	r2, [r2, #0]
 80094f4:	2a30      	cmp	r2, #48	; 0x30
 80094f6:	d1f9      	bne.n	80094ec <get_ldnumber+0x1c>
					*path = ++tt;
 80094f8:	3301      	adds	r3, #1
 80094fa:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 80094fc:	2000      	movs	r0, #0
 80094fe:	bd10      	pop	{r4, pc}

08009500 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8009500:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8009502:	b190      	cbz	r0, 800952a <validate+0x2a>
 8009504:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8009508:	b17b      	cbz	r3, 800952a <validate+0x2a>
 800950a:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 800950e:	b162      	cbz	r2, 800952a <validate+0x2a>
 8009510:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 8009514:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 8009518:	4291      	cmp	r1, r2
 800951a:	d106      	bne.n	800952a <validate+0x2a>
 800951c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009520:	f7ff fe72 	bl	8009208 <disk_status>
 8009524:	f010 0001 	ands.w	r0, r0, #1
 8009528:	d000      	beq.n	800952c <validate+0x2c>
		return FR_INVALID_OBJECT;
 800952a:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 800952c:	bd08      	pop	{r3, pc}

0800952e <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 800952e:	7eca      	ldrb	r2, [r1, #27]
 8009530:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 8009532:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8009534:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8009538:	bf01      	itttt	eq
 800953a:	7d48      	ldrbeq	r0, [r1, #21]
 800953c:	7d0a      	ldrbeq	r2, [r1, #20]
 800953e:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8009542:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8009546:	4618      	mov	r0, r3
 8009548:	4770      	bx	lr

0800954a <sync_window.part.2>:
FRESULT sync_window (
 800954a:	b570      	push	{r4, r5, r6, lr}
		wsect = fs->winsect;	/* Current sector number */
 800954c:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
FRESULT sync_window (
 8009550:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8009552:	4601      	mov	r1, r0
 8009554:	2301      	movs	r3, #1
 8009556:	462a      	mov	r2, r5
 8009558:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800955c:	f7ff fe7c 	bl	8009258 <disk_write>
 8009560:	b9d0      	cbnz	r0, 8009598 <sync_window.part.2+0x4e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009562:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 8009566:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
			fs->wflag = 0;
 800956a:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800956e:	1aeb      	subs	r3, r5, r3
 8009570:	4293      	cmp	r3, r2
 8009572:	d301      	bcc.n	8009578 <sync_window.part.2+0x2e>
	FRESULT res = FR_OK;
 8009574:	2000      	movs	r0, #0
 8009576:	bd70      	pop	{r4, r5, r6, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009578:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 800957c:	2e01      	cmp	r6, #1
 800957e:	d9f9      	bls.n	8009574 <sync_window.part.2+0x2a>
					wsect += fs->fsize;
 8009580:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009584:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 8009588:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800958a:	462a      	mov	r2, r5
 800958c:	2301      	movs	r3, #1
 800958e:	4621      	mov	r1, r4
 8009590:	f7ff fe62 	bl	8009258 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009594:	3e01      	subs	r6, #1
 8009596:	e7f1      	b.n	800957c <sync_window.part.2+0x32>
			res = FR_DISK_ERR;
 8009598:	2001      	movs	r0, #1
}
 800959a:	bd70      	pop	{r4, r5, r6, pc}

0800959c <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800959c:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 80095a0:	b10b      	cbz	r3, 80095a6 <sync_window+0xa>
 80095a2:	f7ff bfd2 	b.w	800954a <sync_window.part.2>
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	4770      	bx	lr

080095aa <sync_fs>:
{
 80095aa:	b538      	push	{r3, r4, r5, lr}
 80095ac:	4604      	mov	r4, r0
	res = sync_window(fs);
 80095ae:	f7ff fff5 	bl	800959c <sync_window>
 80095b2:	4605      	mov	r5, r0
	if (res == FR_OK) {
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d154      	bne.n	8009662 <sync_fs+0xb8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80095b8:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80095bc:	2b03      	cmp	r3, #3
 80095be:	d147      	bne.n	8009650 <sync_fs+0xa6>
 80095c0:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d143      	bne.n	8009650 <sync_fs+0xa6>
			mem_set(fs->win.d8, 0, SS(fs));
 80095c8:	4601      	mov	r1, r0
 80095ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095ce:	4620      	mov	r0, r4
 80095d0:	f7ff fed0 	bl	8009374 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80095d4:	2255      	movs	r2, #85	; 0x55
 80095d6:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
 80095da:	22aa      	movs	r2, #170	; 0xaa
 80095dc:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80095e0:	2252      	movs	r2, #82	; 0x52
 80095e2:	7022      	strb	r2, [r4, #0]
 80095e4:	7062      	strb	r2, [r4, #1]
 80095e6:	2261      	movs	r2, #97	; 0x61
 80095e8:	70a2      	strb	r2, [r4, #2]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80095ea:	f884 21e7 	strb.w	r2, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80095ee:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 80095f2:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80095f6:	2141      	movs	r1, #65	; 0x41
 80095f8:	70e1      	strb	r1, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80095fa:	f884 11e6 	strb.w	r1, [r4, #486]	; 0x1e6
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80095fe:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009602:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 8009606:	0c11      	lsrs	r1, r2, #16
 8009608:	0e12      	lsrs	r2, r2, #24
 800960a:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800960e:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009612:	f884 11ea 	strb.w	r1, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009616:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800961a:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 800961e:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 8009622:	0c11      	lsrs	r1, r2, #16
 8009624:	0e12      	lsrs	r2, r2, #24
 8009626:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 800962a:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800962e:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009632:	2072      	movs	r0, #114	; 0x72
			fs->winsect = fs->volbase + 1;
 8009634:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009636:	f884 01e4 	strb.w	r0, [r4, #484]	; 0x1e4
 800963a:	f884 01e5 	strb.w	r0, [r4, #485]	; 0x1e5
			fs->winsect = fs->volbase + 1;
 800963e:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8009642:	4621      	mov	r1, r4
 8009644:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8009648:	f7ff fe06 	bl	8009258 <disk_write>
			fs->fsi_flag = 0;
 800964c:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8009650:	2200      	movs	r2, #0
 8009652:	4611      	mov	r1, r2
 8009654:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8009658:	f7ff fe0c 	bl	8009274 <disk_ioctl>
 800965c:	3000      	adds	r0, #0
 800965e:	bf18      	it	ne
 8009660:	2001      	movne	r0, #1
}
 8009662:	bd38      	pop	{r3, r4, r5, pc}

08009664 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009664:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8009668:	428b      	cmp	r3, r1
{
 800966a:	b570      	push	{r4, r5, r6, lr}
 800966c:	4606      	mov	r6, r0
 800966e:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009670:	d013      	beq.n	800969a <move_window+0x36>
		res = sync_window(fs);		/* Write-back changes */
 8009672:	f7ff ff93 	bl	800959c <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009676:	4604      	mov	r4, r0
 8009678:	b968      	cbnz	r0, 8009696 <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800967a:	462a      	mov	r2, r5
 800967c:	2301      	movs	r3, #1
 800967e:	4631      	mov	r1, r6
 8009680:	f896 0201 	ldrb.w	r0, [r6, #513]	; 0x201
 8009684:	f7ff fdda 	bl	800923c <disk_read>
 8009688:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 800968a:	bf1c      	itt	ne
 800968c:	f04f 35ff 	movne.w	r5, #4294967295
 8009690:	2401      	movne	r4, #1
			fs->winsect = sector;
 8009692:	f8c6 522c 	str.w	r5, [r6, #556]	; 0x22c
}
 8009696:	4620      	mov	r0, r4
 8009698:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 800969a:	2400      	movs	r4, #0
 800969c:	e7fb      	b.n	8009696 <move_window+0x32>
	...

080096a0 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80096a0:	2300      	movs	r3, #0
{
 80096a2:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80096a4:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 80096a8:	f04f 33ff 	mov.w	r3, #4294967295
 80096ac:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
{
 80096b0:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80096b2:	f7ff ffd7 	bl	8009664 <move_window>
 80096b6:	b9c0      	cbnz	r0, 80096ea <check_fs+0x4a>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80096b8:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 80096bc:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 80096c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80096c4:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d110      	bne.n	80096ee <check_fs+0x4e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80096cc:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 80096d0:	4a08      	ldr	r2, [pc, #32]	; (80096f4 <check_fs+0x54>)
 80096d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d00a      	beq.n	80096f0 <check_fs+0x50>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80096da:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 80096de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 80096e2:	1a80      	subs	r0, r0, r2
 80096e4:	bf18      	it	ne
 80096e6:	2001      	movne	r0, #1
 80096e8:	bd10      	pop	{r4, pc}
 80096ea:	2003      	movs	r0, #3
 80096ec:	bd10      	pop	{r4, pc}
		return 2;
 80096ee:	2002      	movs	r0, #2
}
 80096f0:	bd10      	pop	{r4, pc}
 80096f2:	bf00      	nop
 80096f4:	00544146 	.word	0x00544146

080096f8 <find_volume>:
{
 80096f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 80096fa:	2300      	movs	r3, #0
 80096fc:	6003      	str	r3, [r0, #0]
{
 80096fe:	b085      	sub	sp, #20
 8009700:	4607      	mov	r7, r0
	vol = get_ldnumber(path);
 8009702:	4608      	mov	r0, r1
{
 8009704:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8009706:	f7ff fee3 	bl	80094d0 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800970a:	1e06      	subs	r6, r0, #0
 800970c:	f2c0 8123 	blt.w	8009956 <find_volume+0x25e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009710:	4b95      	ldr	r3, [pc, #596]	; (8009968 <find_volume+0x270>)
 8009712:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009716:	2c00      	cmp	r4, #0
 8009718:	f000 811f 	beq.w	800995a <find_volume+0x262>
	*rfs = fs;							/* Return pointer to the file system object */
 800971c:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800971e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8009722:	b173      	cbz	r3, 8009742 <find_volume+0x4a>
		stat = disk_status(fs->drv);
 8009724:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8009728:	f7ff fd6e 	bl	8009208 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800972c:	07c7      	lsls	r7, r0, #31
 800972e:	d408      	bmi.n	8009742 <find_volume+0x4a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8009730:	2d00      	cmp	r5, #0
 8009732:	f000 8114 	beq.w	800995e <find_volume+0x266>
 8009736:	f010 0004 	ands.w	r0, r0, #4
 800973a:	d000      	beq.n	800973e <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 800973c:	200a      	movs	r0, #10
}
 800973e:	b005      	add	sp, #20
 8009740:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8009742:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009744:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8009746:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800974a:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800974e:	f7ff fd65 	bl	800921c <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8009752:	07c1      	lsls	r1, r0, #31
 8009754:	f100 8105 	bmi.w	8009962 <find_volume+0x26a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8009758:	b10d      	cbz	r5, 800975e <find_volume+0x66>
 800975a:	0742      	lsls	r2, r0, #29
 800975c:	d4ee      	bmi.n	800973c <find_volume+0x44>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800975e:	2100      	movs	r1, #0
 8009760:	4620      	mov	r0, r4
 8009762:	f7ff ff9d 	bl	80096a0 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8009766:	2801      	cmp	r0, #1
 8009768:	f040 80dc 	bne.w	8009924 <find_volume+0x22c>
 800976c:	f504 71e3 	add.w	r1, r4, #454	; 0x1c6
 8009770:	2200      	movs	r2, #0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8009772:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8009776:	b103      	cbz	r3, 800977a <find_volume+0x82>
 8009778:	680b      	ldr	r3, [r1, #0]
 800977a:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800977e:	3201      	adds	r2, #1
 8009780:	2a04      	cmp	r2, #4
 8009782:	f101 0110 	add.w	r1, r1, #16
 8009786:	d1f4      	bne.n	8009772 <find_volume+0x7a>
 8009788:	2600      	movs	r6, #0
			bsect = br[i];
 800978a:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800978e:	2d00      	cmp	r5, #0
 8009790:	f000 80bf 	beq.w	8009912 <find_volume+0x21a>
 8009794:	4629      	mov	r1, r5
 8009796:	4620      	mov	r0, r4
 8009798:	f7ff ff82 	bl	80096a0 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800979c:	2800      	cmp	r0, #0
 800979e:	f040 80b9 	bne.w	8009914 <find_volume+0x21c>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80097a2:	7b22      	ldrb	r2, [r4, #12]
 80097a4:	7ae3      	ldrb	r3, [r4, #11]
 80097a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80097aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097ae:	f040 80bc 	bne.w	800992a <find_volume+0x232>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80097b2:	7de3      	ldrb	r3, [r4, #23]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80097b4:	7c20      	ldrb	r0, [r4, #16]
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80097b6:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80097b8:	f884 0203 	strb.w	r0, [r4, #515]	; 0x203
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80097bc:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80097c0:	f100 33ff 	add.w	r3, r0, #4294967295
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80097c4:	bf08      	it	eq
 80097c6:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 80097c8:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	f200 80ac 	bhi.w	800992a <find_volume+0x232>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80097d2:	7b66      	ldrb	r6, [r4, #13]
 80097d4:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80097d8:	2e00      	cmp	r6, #0
 80097da:	f000 80a6 	beq.w	800992a <find_volume+0x232>
 80097de:	1e73      	subs	r3, r6, #1
 80097e0:	4233      	tst	r3, r6
 80097e2:	f040 80a2 	bne.w	800992a <find_volume+0x232>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80097e6:	7ca3      	ldrb	r3, [r4, #18]
 80097e8:	7c67      	ldrb	r7, [r4, #17]
 80097ea:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80097ee:	073b      	lsls	r3, r7, #28
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80097f0:	f8a4 7208 	strh.w	r7, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80097f4:	f040 8099 	bne.w	800992a <find_volume+0x232>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80097f8:	7d22      	ldrb	r2, [r4, #20]
 80097fa:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80097fc:	f894 e00f 	ldrb.w	lr, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8009800:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8009804:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8009806:	bf08      	it	eq
 8009808:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800980a:	ea52 220e 	orrs.w	r2, r2, lr, lsl #8
 800980e:	f000 808c 	beq.w	800992a <find_volume+0x232>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8009812:	fb01 fe00 	mul.w	lr, r1, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8009816:	eb02 1017 	add.w	r0, r2, r7, lsr #4
 800981a:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800981c:	4283      	cmp	r3, r0
 800981e:	f0c0 8084 	bcc.w	800992a <find_volume+0x232>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8009822:	1a1b      	subs	r3, r3, r0
 8009824:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8009828:	2b00      	cmp	r3, #0
 800982a:	d07e      	beq.n	800992a <find_volume+0x232>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800982c:	f640 76f5 	movw	r6, #4085	; 0xff5
 8009830:	42b3      	cmp	r3, r6
 8009832:	d97e      	bls.n	8009932 <find_volume+0x23a>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8009834:	f64f 76f5 	movw	r6, #65525	; 0xfff5
 8009838:	42b3      	cmp	r3, r6
 800983a:	bf94      	ite	ls
 800983c:	2602      	movls	r6, #2
 800983e:	2603      	movhi	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8009840:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8009842:	442a      	add	r2, r5
	fs->database = bsect + sysect;						/* Data start sector */
 8009844:	4428      	add	r0, r5
	if (fmt == FS_FAT32) {
 8009846:	2e03      	cmp	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8009848:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800984c:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8009850:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8009854:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8009858:	d16d      	bne.n	8009936 <find_volume+0x23e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800985a:	2f00      	cmp	r7, #0
 800985c:	d165      	bne.n	800992a <find_volume+0x232>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800985e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009860:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8009864:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8009866:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800986a:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 800986e:	d35c      	bcc.n	800992a <find_volume+0x232>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8009870:	f04f 33ff 	mov.w	r3, #4294967295
 8009874:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 8009878:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800987c:	2e03      	cmp	r6, #3
	fs->fsi_flag = 0x80;
 800987e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009882:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8009886:	d12d      	bne.n	80098e4 <find_volume+0x1ec>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8009888:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 800988c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009890:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009894:	2b01      	cmp	r3, #1
 8009896:	d125      	bne.n	80098e4 <find_volume+0x1ec>
		&& move_window(fs, bsect + 1) == FR_OK)
 8009898:	1c69      	adds	r1, r5, #1
 800989a:	4620      	mov	r0, r4
 800989c:	f7ff fee2 	bl	8009664 <move_window>
 80098a0:	bb00      	cbnz	r0, 80098e4 <find_volume+0x1ec>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80098a2:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 80098a6:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 80098aa:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80098ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80098b2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d114      	bne.n	80098e4 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80098ba:	6822      	ldr	r2, [r4, #0]
 80098bc:	4b2b      	ldr	r3, [pc, #172]	; (800996c <find_volume+0x274>)
 80098be:	429a      	cmp	r2, r3
 80098c0:	d110      	bne.n	80098e4 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80098c2:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 80098c6:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 80098ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80098ce:	3320      	adds	r3, #32
 80098d0:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80098d2:	bf01      	itttt	eq
 80098d4:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 80098d8:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80098dc:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 80098e0:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 80098e4:	4a22      	ldr	r2, [pc, #136]	; (8009970 <find_volume+0x278>)
	fs->fs_type = fmt;	/* FAT sub-type */
 80098e6:	f884 6200 	strb.w	r6, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80098ea:	8813      	ldrh	r3, [r2, #0]
 80098ec:	3301      	adds	r3, #1
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	8013      	strh	r3, [r2, #0]
 80098f2:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 80098f6:	4b1f      	ldr	r3, [pc, #124]	; (8009974 <find_volume+0x27c>)
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	4294      	cmp	r4, r2
 80098fc:	bf04      	itt	eq
 80098fe:	2200      	moveq	r2, #0
 8009900:	601a      	streq	r2, [r3, #0]
 8009902:	68da      	ldr	r2, [r3, #12]
 8009904:	4294      	cmp	r4, r2
 8009906:	f04f 0000 	mov.w	r0, #0
 800990a:	f47f af18 	bne.w	800973e <find_volume+0x46>
 800990e:	60d8      	str	r0, [r3, #12]
 8009910:	e715      	b.n	800973e <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8009912:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8009914:	3601      	adds	r6, #1
 8009916:	2e04      	cmp	r6, #4
 8009918:	f47f af37 	bne.w	800978a <find_volume+0x92>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800991c:	2803      	cmp	r0, #3
 800991e:	d104      	bne.n	800992a <find_volume+0x232>
 8009920:	2001      	movs	r0, #1
 8009922:	e70c      	b.n	800973e <find_volume+0x46>
 8009924:	2803      	cmp	r0, #3
 8009926:	d0fb      	beq.n	8009920 <find_volume+0x228>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8009928:	b108      	cbz	r0, 800992e <find_volume+0x236>
 800992a:	200d      	movs	r0, #13
 800992c:	e707      	b.n	800973e <find_volume+0x46>
	bsect = 0;
 800992e:	4605      	mov	r5, r0
 8009930:	e737      	b.n	80097a2 <find_volume+0xaa>
	fmt = FS_FAT12;
 8009932:	2601      	movs	r6, #1
 8009934:	e784      	b.n	8009840 <find_volume+0x148>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009936:	2f00      	cmp	r7, #0
 8009938:	d0f7      	beq.n	800992a <find_volume+0x232>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800993a:	4472      	add	r2, lr
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800993c:	2e02      	cmp	r6, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800993e:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 8009942:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009946:	bf1b      	ittet	ne
 8009948:	18d2      	addne	r2, r2, r3
 800994a:	f003 0301 	andne.w	r3, r3, #1
 800994e:	4613      	moveq	r3, r2
 8009950:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8009954:	e787      	b.n	8009866 <find_volume+0x16e>
	if (vol < 0) return FR_INVALID_DRIVE;
 8009956:	200b      	movs	r0, #11
 8009958:	e6f1      	b.n	800973e <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800995a:	200c      	movs	r0, #12
 800995c:	e6ef      	b.n	800973e <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 800995e:	4628      	mov	r0, r5
 8009960:	e6ed      	b.n	800973e <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009962:	2003      	movs	r0, #3
 8009964:	e6eb      	b.n	800973e <find_volume+0x46>
 8009966:	bf00      	nop
 8009968:	2000063c 	.word	0x2000063c
 800996c:	41615252 	.word	0x41615252
 8009970:	20000658 	.word	0x20000658
 8009974:	20000640 	.word	0x20000640

08009978 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009978:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
	clst -= 2;
 800997c:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800997e:	3b02      	subs	r3, #2
 8009980:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8009982:	bf3d      	ittte	cc
 8009984:	f890 3202 	ldrbcc.w	r3, [r0, #514]	; 0x202
 8009988:	f8d0 0228 	ldrcc.w	r0, [r0, #552]	; 0x228
 800998c:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009990:	2000      	movcs	r0, #0
}
 8009992:	4770      	bx	lr

08009994 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009994:	2901      	cmp	r1, #1
{
 8009996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009998:	4606      	mov	r6, r0
 800999a:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800999c:	d959      	bls.n	8009a52 <get_fat+0xbe>
 800999e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80099a2:	4299      	cmp	r1, r3
 80099a4:	d255      	bcs.n	8009a52 <get_fat+0xbe>
		switch (fs->fs_type) {
 80099a6:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d027      	beq.n	80099fe <get_fat+0x6a>
 80099ae:	2b03      	cmp	r3, #3
 80099b0:	d036      	beq.n	8009a20 <get_fat+0x8c>
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d14d      	bne.n	8009a52 <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 80099b6:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80099ba:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80099be:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 80099c2:	f7ff fe4f 	bl	8009664 <move_window>
 80099c6:	b110      	cbz	r0, 80099ce <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80099c8:	f04f 30ff 	mov.w	r0, #4294967295
 80099cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80099ce:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 80099d2:	1c67      	adds	r7, r4, #1
 80099d4:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80099d8:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80099dc:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 80099de:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80099e0:	f7ff fe40 	bl	8009664 <move_window>
 80099e4:	2800      	cmp	r0, #0
 80099e6:	d1ef      	bne.n	80099c8 <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80099e8:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80099ec:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80099ee:	5df0      	ldrb	r0, [r6, r7]
 80099f0:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80099f4:	bf4c      	ite	mi
 80099f6:	0900      	lsrmi	r0, r0, #4
 80099f8:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80099fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80099fe:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8009a02:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8009a06:	f7ff fe2d 	bl	8009664 <move_window>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	d1dc      	bne.n	80099c8 <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009a0e:	006d      	lsls	r5, r5, #1
 8009a10:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 8009a14:	1973      	adds	r3, r6, r5
 8009a16:	5d70      	ldrb	r0, [r6, r5]
 8009a18:	785b      	ldrb	r3, [r3, #1]
 8009a1a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8009a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009a20:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8009a24:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8009a28:	f7ff fe1c 	bl	8009664 <move_window>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d1cb      	bne.n	80099c8 <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009a30:	00ad      	lsls	r5, r5, #2
 8009a32:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8009a36:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8009a38:	7898      	ldrb	r0, [r3, #2]
 8009a3a:	78da      	ldrb	r2, [r3, #3]
 8009a3c:	785b      	ldrb	r3, [r3, #1]
 8009a3e:	0400      	lsls	r0, r0, #16
 8009a40:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8009a44:	5d72      	ldrb	r2, [r6, r5]
 8009a46:	4310      	orrs	r0, r2
 8009a48:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8009a4c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8009a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8009a52:	2001      	movs	r0, #1
}
 8009a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a56 <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8009a56:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
{
 8009a5a:	b570      	push	{r4, r5, r6, lr}
 8009a5c:	4604      	mov	r4, r0
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8009a5e:	2a01      	cmp	r2, #1
{
 8009a60:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 8009a62:	f8a4 1206 	strh.w	r1, [r4, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8009a66:	d101      	bne.n	8009a6c <dir_sdi+0x16>
		return FR_INT_ERR;
 8009a68:	2002      	movs	r0, #2
 8009a6a:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8009a6c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8009a70:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8009a74:	428a      	cmp	r2, r1
 8009a76:	d2f7      	bcs.n	8009a68 <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8009a78:	b9f2      	cbnz	r2, 8009ab8 <dir_sdi+0x62>
 8009a7a:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 8009a7e:	2903      	cmp	r1, #3
 8009a80:	d102      	bne.n	8009a88 <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 8009a82:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009a86:	b9c1      	cbnz	r1, 8009aba <dir_sdi+0x64>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8009a88:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8009a8c:	428d      	cmp	r5, r1
 8009a8e:	d2eb      	bcs.n	8009a68 <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 8009a90:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 8009a94:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	d0e5      	beq.n	8009a68 <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8009a9c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8009aa0:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8009aa4:	f005 050f 	and.w	r5, r5, #15
 8009aa8:	eb03 1545 	add.w	r5, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8009aac:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8009ab0:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}
 8009ab8:	4611      	mov	r1, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8009aba:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
		while (idx >= ic) {	/* Follow cluster chain */
 8009abe:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8009ac0:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8009ac2:	42b5      	cmp	r5, r6
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
		while (idx >= ic) {	/* Follow cluster chain */
 8009aca:	d202      	bcs.n	8009ad2 <dir_sdi+0x7c>
		sect = clust2sect(dp->fs, clst);
 8009acc:	f7ff ff54 	bl	8009978 <clust2sect>
 8009ad0:	e7e0      	b.n	8009a94 <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8009ad2:	f7ff ff5f 	bl	8009994 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009ad6:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8009ad8:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009ada:	d009      	beq.n	8009af0 <dir_sdi+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8009adc:	2801      	cmp	r0, #1
 8009ade:	d9c3      	bls.n	8009a68 <dir_sdi+0x12>
 8009ae0:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8009ae4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009ae8:	4298      	cmp	r0, r3
 8009aea:	d2bd      	bcs.n	8009a68 <dir_sdi+0x12>
			idx -= ic;
 8009aec:	1bad      	subs	r5, r5, r6
 8009aee:	e7e8      	b.n	8009ac2 <dir_sdi+0x6c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009af0:	2001      	movs	r0, #1
}
 8009af2:	bd70      	pop	{r4, r5, r6, pc}

08009af4 <dir_remove>:
{
 8009af4:	b510      	push	{r4, lr}
	res = dir_sdi(dp, dp->index);
 8009af6:	f8b0 1206 	ldrh.w	r1, [r0, #518]	; 0x206
{
 8009afa:	4604      	mov	r4, r0
	res = dir_sdi(dp, dp->index);
 8009afc:	f7ff ffab 	bl	8009a56 <dir_sdi>
	if (res == FR_OK) {
 8009b00:	4603      	mov	r3, r0
 8009b02:	b9b0      	cbnz	r0, 8009b32 <dir_remove+0x3e>
		res = move_window(dp->fs, dp->sect);
 8009b04:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8009b08:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009b0c:	f7ff fdaa 	bl	8009664 <move_window>
		if (res == FR_OK) {
 8009b10:	4603      	mov	r3, r0
 8009b12:	b970      	cbnz	r0, 8009b32 <dir_remove+0x3e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 8009b14:	4601      	mov	r1, r0
 8009b16:	2220      	movs	r2, #32
 8009b18:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 8009b1c:	f7ff fc2a 	bl	8009374 <mem_set>
			*dp->dir = DDEM;
 8009b20:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8009b24:	21e5      	movs	r1, #229	; 0xe5
 8009b26:	7011      	strb	r1, [r2, #0]
			dp->fs->wflag = 1;
 8009b28:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	f882 1204 	strb.w	r1, [r2, #516]	; 0x204
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	bd10      	pop	{r4, pc}

08009b36 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009b36:	2901      	cmp	r1, #1
{
 8009b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b3c:	4605      	mov	r5, r0
 8009b3e:	460c      	mov	r4, r1
 8009b40:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009b42:	d96f      	bls.n	8009c24 <put_fat+0xee>
 8009b44:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009b48:	4299      	cmp	r1, r3
 8009b4a:	d26b      	bcs.n	8009c24 <put_fat+0xee>
		switch (fs->fs_type) {
 8009b4c:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d03d      	beq.n	8009bd0 <put_fat+0x9a>
 8009b54:	2b03      	cmp	r3, #3
 8009b56:	d04b      	beq.n	8009bf0 <put_fat+0xba>
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d163      	bne.n	8009c24 <put_fat+0xee>
			bc = (UINT)clst; bc += bc / 2;
 8009b5c:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009b60:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8009b64:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8009b68:	f7ff fd7c 	bl	8009664 <move_window>
			if (res != FR_OK) break;
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	d15a      	bne.n	8009c26 <put_fat+0xf0>
			p = &fs->win.d8[bc++ % SS(fs)];
 8009b70:	f107 0801 	add.w	r8, r7, #1
 8009b74:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009b78:	f014 0401 	ands.w	r4, r4, #1
 8009b7c:	bf1f      	itttt	ne
 8009b7e:	5deb      	ldrbne	r3, [r5, r7]
 8009b80:	f003 020f 	andne.w	r2, r3, #15
 8009b84:	0133      	lslne	r3, r6, #4
 8009b86:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8009b8a:	bf14      	ite	ne
 8009b8c:	4313      	orrne	r3, r2
 8009b8e:	b2f3      	uxtbeq	r3, r6
 8009b90:	55eb      	strb	r3, [r5, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009b92:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
			fs->wflag = 1;
 8009b96:	2301      	movs	r3, #1
 8009b98:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009b9c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	f7ff fd5f 	bl	8009664 <move_window>
			if (res != FR_OK) break;
 8009ba6:	bbf0      	cbnz	r0, 8009c26 <put_fat+0xf0>
			p = &fs->win.d8[bc % SS(fs)];
 8009ba8:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009bac:	b144      	cbz	r4, 8009bc0 <put_fat+0x8a>
 8009bae:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8009bb2:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 8009bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009bc0:	f815 2008 	ldrb.w	r2, [r5, r8]
 8009bc4:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8009bc8:	f022 020f 	bic.w	r2, r2, #15
 8009bcc:	4332      	orrs	r2, r6
 8009bce:	e7f0      	b.n	8009bb2 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009bd0:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8009bd4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8009bd8:	f7ff fd44 	bl	8009664 <move_window>
			if (res != FR_OK) break;
 8009bdc:	bb18      	cbnz	r0, 8009c26 <put_fat+0xf0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009bde:	0064      	lsls	r4, r4, #1
 8009be0:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 8009be4:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8009be8:	552e      	strb	r6, [r5, r4]
 8009bea:	442c      	add	r4, r5
 8009bec:	7062      	strb	r2, [r4, #1]
 8009bee:	e7e2      	b.n	8009bb6 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009bf0:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8009bf4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8009bf8:	f7ff fd34 	bl	8009664 <move_window>
			if (res != FR_OK) break;
 8009bfc:	b998      	cbnz	r0, 8009c26 <put_fat+0xf0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009bfe:	00a4      	lsls	r4, r4, #2
 8009c00:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8009c04:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 8009c06:	78cb      	ldrb	r3, [r1, #3]
 8009c08:	061b      	lsls	r3, r3, #24
 8009c0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009c0e:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 8009c12:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8009c16:	552a      	strb	r2, [r5, r4]
 8009c18:	704b      	strb	r3, [r1, #1]
 8009c1a:	0c13      	lsrs	r3, r2, #16
 8009c1c:	0e12      	lsrs	r2, r2, #24
 8009c1e:	708b      	strb	r3, [r1, #2]
 8009c20:	70ca      	strb	r2, [r1, #3]
 8009c22:	e7c8      	b.n	8009bb6 <put_fat+0x80>
			res = FR_INT_ERR;
 8009c24:	2002      	movs	r0, #2
}
 8009c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009c2a <create_chain>:
{
 8009c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2c:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 8009c2e:	460f      	mov	r7, r1
 8009c30:	b989      	cbnz	r1, 8009c56 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8009c32:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8009c36:	b1fe      	cbz	r6, 8009c78 <create_chain+0x4e>
 8009c38:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009c3c:	429e      	cmp	r6, r3
 8009c3e:	bf28      	it	cs
 8009c40:	2601      	movcs	r6, #1
 8009c42:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8009c44:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		ncl++;							/* Next cluster */
 8009c48:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8009c4a:	429c      	cmp	r4, r3
 8009c4c:	d317      	bcc.n	8009c7e <create_chain+0x54>
			if (ncl > scl) return 0;	/* No free cluster */
 8009c4e:	2e01      	cmp	r6, #1
 8009c50:	d814      	bhi.n	8009c7c <create_chain+0x52>
 8009c52:	2400      	movs	r4, #0
 8009c54:	e008      	b.n	8009c68 <create_chain+0x3e>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8009c56:	f7ff fe9d 	bl	8009994 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 8009c5a:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8009c5c:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 8009c5e:	d93b      	bls.n	8009cd8 <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009c60:	3001      	adds	r0, #1
 8009c62:	d103      	bne.n	8009c6c <create_chain+0x42>
			ncl = 2;
 8009c64:	f04f 34ff 	mov.w	r4, #4294967295
}
 8009c68:	4620      	mov	r0, r4
 8009c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009c6c:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8009c70:	429c      	cmp	r4, r3
 8009c72:	d3f9      	bcc.n	8009c68 <create_chain+0x3e>
 8009c74:	463e      	mov	r6, r7
 8009c76:	e7e4      	b.n	8009c42 <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8009c78:	2601      	movs	r6, #1
 8009c7a:	e7e2      	b.n	8009c42 <create_chain+0x18>
			ncl = 2;
 8009c7c:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8009c7e:	4621      	mov	r1, r4
 8009c80:	4628      	mov	r0, r5
 8009c82:	f7ff fe87 	bl	8009994 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8009c86:	b130      	cbz	r0, 8009c96 <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8009c88:	1c41      	adds	r1, r0, #1
 8009c8a:	d0eb      	beq.n	8009c64 <create_chain+0x3a>
 8009c8c:	2801      	cmp	r0, #1
 8009c8e:	d023      	beq.n	8009cd8 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 8009c90:	42b4      	cmp	r4, r6
 8009c92:	d1d7      	bne.n	8009c44 <create_chain+0x1a>
 8009c94:	e7dd      	b.n	8009c52 <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8009c96:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	f7ff ff4a 	bl	8009b36 <put_fat>
	if (res == FR_OK && clst != 0) {
 8009ca2:	b9b8      	cbnz	r0, 8009cd4 <create_chain+0xaa>
 8009ca4:	b97f      	cbnz	r7, 8009cc6 <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 8009ca6:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 8009caa:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8009cae:	1c5a      	adds	r2, r3, #1
 8009cb0:	d0da      	beq.n	8009c68 <create_chain+0x3e>
			fs->free_clust--;
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 8009cb8:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 8009cbc:	f043 0301 	orr.w	r3, r3, #1
 8009cc0:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 8009cc4:	e7d0      	b.n	8009c68 <create_chain+0x3e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8009cc6:	4622      	mov	r2, r4
 8009cc8:	4639      	mov	r1, r7
 8009cca:	4628      	mov	r0, r5
 8009ccc:	f7ff ff33 	bl	8009b36 <put_fat>
	if (res == FR_OK) {
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d0e8      	beq.n	8009ca6 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8009cd4:	2801      	cmp	r0, #1
 8009cd6:	d0c5      	beq.n	8009c64 <create_chain+0x3a>
 8009cd8:	2401      	movs	r4, #1
 8009cda:	e7c5      	b.n	8009c68 <create_chain+0x3e>

08009cdc <dir_next>:
{
 8009cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 8009ce0:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 8009ce4:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009ce6:	b2b3      	uxth	r3, r6
{
 8009ce8:	4604      	mov	r4, r0
 8009cea:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009cec:	b913      	cbnz	r3, 8009cf4 <dir_next+0x18>
		return FR_NO_FILE;
 8009cee:	2004      	movs	r0, #4
 8009cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009cf4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d0f8      	beq.n	8009cee <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8009cfc:	f016 080f 	ands.w	r8, r6, #15
 8009d00:	d10b      	bne.n	8009d1a <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 8009d02:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 8009d06:	3301      	adds	r3, #1
 8009d08:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 8009d0c:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		if (!dp->clust) {		/* Static table */
 8009d10:	b971      	cbnz	r1, 8009d30 <dir_next+0x54>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8009d12:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 8009d16:	429e      	cmp	r6, r3
 8009d18:	d2e9      	bcs.n	8009cee <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8009d1a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->index = (WORD)i;	/* Current index */
 8009d1e:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8009d22:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8009d26:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 8009d2a:	2000      	movs	r0, #0
 8009d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8009d30:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 8009d34:	3f01      	subs	r7, #1
 8009d36:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 8009d3a:	d1ee      	bne.n	8009d1a <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8009d3c:	f7ff fe2a 	bl	8009994 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 8009d40:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8009d42:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 8009d44:	d802      	bhi.n	8009d4c <dir_next+0x70>
 8009d46:	2002      	movs	r0, #2
 8009d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009d4c:	1c42      	adds	r2, r0, #1
 8009d4e:	d102      	bne.n	8009d56 <dir_next+0x7a>
 8009d50:	2001      	movs	r0, #1
 8009d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8009d56:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009d5a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009d5e:	429d      	cmp	r5, r3
 8009d60:	d32f      	bcc.n	8009dc2 <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8009d62:	f1b9 0f00 	cmp.w	r9, #0
 8009d66:	d0c2      	beq.n	8009cee <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8009d68:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 8009d6c:	f7ff ff5d 	bl	8009c2a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009d70:	4605      	mov	r5, r0
 8009d72:	2800      	cmp	r0, #0
 8009d74:	d03e      	beq.n	8009df4 <dir_next+0x118>
					if (clst == 1) return FR_INT_ERR;
 8009d76:	2801      	cmp	r0, #1
 8009d78:	d0e5      	beq.n	8009d46 <dir_next+0x6a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009d7a:	1c43      	adds	r3, r0, #1
 8009d7c:	d0e8      	beq.n	8009d50 <dir_next+0x74>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8009d7e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009d82:	f7ff fc0b 	bl	800959c <sync_window>
 8009d86:	4601      	mov	r1, r0
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d1e1      	bne.n	8009d50 <dir_next+0x74>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8009d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d90:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009d94:	f7ff faee 	bl	8009374 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8009d98:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8009d9c:	4629      	mov	r1, r5
 8009d9e:	4610      	mov	r0, r2
 8009da0:	f7ff fdea 	bl	8009978 <clust2sect>
						dp->fs->wflag = 1;
 8009da4:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8009da8:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009dac:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009db0:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8009db4:	429f      	cmp	r7, r3
 8009db6:	d30e      	bcc.n	8009dd6 <dir_next+0xfa>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8009db8:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8009dbc:	1bdf      	subs	r7, r3, r7
 8009dbe:	f8c0 722c 	str.w	r7, [r0, #556]	; 0x22c
				dp->clust = clst;				/* Initialize data for new cluster */
 8009dc2:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009dcc:	f7ff fdd4 	bl	8009978 <clust2sect>
 8009dd0:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 8009dd4:	e7a1      	b.n	8009d1a <dir_next+0x3e>
						dp->fs->wflag = 1;
 8009dd6:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
 8009dda:	f7ff fbb6 	bl	800954a <sync_window.part.2>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d1b6      	bne.n	8009d50 <dir_next+0x74>
						dp->fs->winsect++;
 8009de2:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8009de6:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 8009dea:	3301      	adds	r3, #1
 8009dec:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009df0:	3701      	adds	r7, #1
 8009df2:	e7db      	b.n	8009dac <dir_next+0xd0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009df4:	2007      	movs	r0, #7
}
 8009df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08009dfc <follow_path>:
{
 8009dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8009e00:	780b      	ldrb	r3, [r1, #0]
 8009e02:	2b2f      	cmp	r3, #47	; 0x2f
{
 8009e04:	4604      	mov	r4, r0
 8009e06:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8009e08:	d001      	beq.n	8009e0e <follow_path+0x12>
 8009e0a:	2b5c      	cmp	r3, #92	; 0x5c
 8009e0c:	d100      	bne.n	8009e10 <follow_path+0x14>
		path++;
 8009e0e:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8009e10:	2600      	movs	r6, #0
 8009e12:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009e16:	782b      	ldrb	r3, [r5, #0]
 8009e18:	2b1f      	cmp	r3, #31
 8009e1a:	d936      	bls.n	8009e8a <follow_path+0x8e>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009e1c:	4e5f      	ldr	r6, [pc, #380]	; (8009f9c <follow_path+0x1a0>)
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8009e1e:	782b      	ldrb	r3, [r5, #0]
 8009e20:	2b2f      	cmp	r3, #47	; 0x2f
 8009e22:	46a8      	mov	r8, r5
 8009e24:	f105 0501 	add.w	r5, r5, #1
 8009e28:	d0f9      	beq.n	8009e1e <follow_path+0x22>
 8009e2a:	2b5c      	cmp	r3, #92	; 0x5c
 8009e2c:	d0f7      	beq.n	8009e1e <follow_path+0x22>
	sfn = dp->fn;
 8009e2e:	f8d4 7218 	ldr.w	r7, [r4, #536]	; 0x218
	mem_set(sfn, ' ', 11);
 8009e32:	220b      	movs	r2, #11
 8009e34:	2120      	movs	r1, #32
 8009e36:	4638      	mov	r0, r7
 8009e38:	f7ff fa9c 	bl	8009374 <mem_set>
	si = i = b = 0; ni = 8;
 8009e3c:	f04f 0e00 	mov.w	lr, #0
 8009e40:	f108 39ff 	add.w	r9, r8, #4294967295
 8009e44:	46f4      	mov	ip, lr
 8009e46:	2108      	movs	r1, #8
 8009e48:	4672      	mov	r2, lr
		c = (BYTE)p[si++];
 8009e4a:	f819 3f01 	ldrb.w	r3, [r9, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8009e4e:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8009e50:	f10c 0c01 	add.w	ip, ip, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8009e54:	d928      	bls.n	8009ea8 <follow_path+0xac>
 8009e56:	2b2f      	cmp	r3, #47	; 0x2f
 8009e58:	d026      	beq.n	8009ea8 <follow_path+0xac>
 8009e5a:	2b5c      	cmp	r3, #92	; 0x5c
 8009e5c:	d024      	beq.n	8009ea8 <follow_path+0xac>
		if (c == '.' || i >= ni) {
 8009e5e:	2b2e      	cmp	r3, #46	; 0x2e
 8009e60:	f000 8085 	beq.w	8009f6e <follow_path+0x172>
 8009e64:	4571      	cmp	r1, lr
 8009e66:	d90d      	bls.n	8009e84 <follow_path+0x88>
		if (c >= 0x80) {				/* Extended character? */
 8009e68:	0618      	lsls	r0, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009e6a:	bf48      	it	mi
 8009e6c:	3b80      	submi	r3, #128	; 0x80
 8009e6e:	4d4c      	ldr	r5, [pc, #304]	; (8009fa0 <follow_path+0x1a4>)
 8009e70:	bf44      	itt	mi
 8009e72:	5cf3      	ldrbmi	r3, [r6, r3]
			b |= 3;						/* Eliminate NT flag */
 8009e74:	f042 0203 	orrmi.w	r2, r2, #3
	while (*str && *str != chr) str++;
 8009e78:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	d07d      	beq.n	8009f7c <follow_path+0x180>
 8009e80:	4283      	cmp	r3, r0
 8009e82:	d1f9      	bne.n	8009e78 <follow_path+0x7c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8009e84:	2006      	movs	r0, #6
	return res;
 8009e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, 0);
 8009e8a:	4631      	mov	r1, r6
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f7ff fde2 	bl	8009a56 <dir_sdi>
		dp->dir = 0;
 8009e92:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
 8009e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				b |= 2;
 8009e9a:	f042 0202 	orr.w	r2, r2, #2
			sfn[i++] = c;
 8009e9e:	f807 300e 	strb.w	r3, [r7, lr]
 8009ea2:	f10e 0e01 	add.w	lr, lr, #1
 8009ea6:	e7d0      	b.n	8009e4a <follow_path+0x4e>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8009ea8:	2b21      	cmp	r3, #33	; 0x21
	*path = &p[si];						/* Return pointer to the next segment */
 8009eaa:	eb08 050c 	add.w	r5, r8, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8009eae:	bf34      	ite	cc
 8009eb0:	2304      	movcc	r3, #4
 8009eb2:	2300      	movcs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8009eb4:	f1be 0f00 	cmp.w	lr, #0
 8009eb8:	d0e4      	beq.n	8009e84 <follow_path+0x88>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8009eba:	7838      	ldrb	r0, [r7, #0]
 8009ebc:	28e5      	cmp	r0, #229	; 0xe5
 8009ebe:	bf04      	itt	eq
 8009ec0:	2005      	moveq	r0, #5
 8009ec2:	7038      	strbeq	r0, [r7, #0]
	if (ni == 8) b <<= 2;
 8009ec4:	2908      	cmp	r1, #8
 8009ec6:	bf04      	itt	eq
 8009ec8:	0092      	lsleq	r2, r2, #2
 8009eca:	b2d2      	uxtbeq	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8009ecc:	f002 0103 	and.w	r1, r2, #3
 8009ed0:	2901      	cmp	r1, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8009ed2:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8009ed6:	bf08      	it	eq
 8009ed8:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8009edc:	2a04      	cmp	r2, #4
 8009ede:	bf08      	it	eq
 8009ee0:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8009ee4:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f7ff fdb4 	bl	8009a56 <dir_sdi>
	if (res != FR_OK) return res;
 8009eee:	b9f8      	cbnz	r0, 8009f30 <follow_path+0x134>
		res = move_window(dp->fs, dp->sect);
 8009ef0:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8009ef4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009ef8:	f7ff fbb4 	bl	8009664 <move_window>
		if (res != FR_OK) break;
 8009efc:	b9c0      	cbnz	r0, 8009f30 <follow_path+0x134>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8009efe:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009f02:	7813      	ldrb	r3, [r2, #0]
 8009f04:	b19b      	cbz	r3, 8009f2e <follow_path+0x132>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8009f06:	7ad3      	ldrb	r3, [r2, #11]
 8009f08:	0719      	lsls	r1, r3, #28
 8009f0a:	d40b      	bmi.n	8009f24 <follow_path+0x128>
 8009f0c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8009f10:	f103 0e0b 	add.w	lr, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009f14:	4573      	cmp	r3, lr
 8009f16:	d00b      	beq.n	8009f30 <follow_path+0x134>
 8009f18:	f812 7b01 	ldrb.w	r7, [r2], #1
 8009f1c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009f20:	428f      	cmp	r7, r1
 8009f22:	d0f7      	beq.n	8009f14 <follow_path+0x118>
		res = dir_next(dp, 0);		/* Next entry */
 8009f24:	2100      	movs	r1, #0
 8009f26:	4620      	mov	r0, r4
 8009f28:	f7ff fed8 	bl	8009cdc <dir_next>
 8009f2c:	e7df      	b.n	8009eee <follow_path+0xf2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009f2e:	2004      	movs	r0, #4
			ns = dp->fn[NSFLAG];
 8009f30:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8009f34:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009f36:	b138      	cbz	r0, 8009f48 <follow_path+0x14c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009f38:	2804      	cmp	r0, #4
 8009f3a:	d12c      	bne.n	8009f96 <follow_path+0x19a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009f3c:	f013 0f04 	tst.w	r3, #4
 8009f40:	bf08      	it	eq
 8009f42:	2005      	moveq	r0, #5
 8009f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009f48:	075a      	lsls	r2, r3, #29
 8009f4a:	d424      	bmi.n	8009f96 <follow_path+0x19a>
			dir = dp->dir;						/* Follow the sub-directory */
 8009f4c:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8009f50:	7acb      	ldrb	r3, [r1, #11]
 8009f52:	06db      	lsls	r3, r3, #27
 8009f54:	d508      	bpl.n	8009f68 <follow_path+0x16c>
			dp->sclust = ld_clust(dp->fs, dir);
 8009f56:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8009f5a:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8009f5e:	f7ff fae6 	bl	800952e <ld_clust.isra.0>
 8009f62:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f66:	e75a      	b.n	8009e1e <follow_path+0x22>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009f68:	2005      	movs	r0, #5
 8009f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8009f6e:	2908      	cmp	r1, #8
 8009f70:	d188      	bne.n	8009e84 <follow_path+0x88>
			b <<= 2; continue;
 8009f72:	0092      	lsls	r2, r2, #2
			i = 8; ni = 11;
 8009f74:	468e      	mov	lr, r1
			b <<= 2; continue;
 8009f76:	b2d2      	uxtb	r2, r2
			i = 8; ni = 11;
 8009f78:	210b      	movs	r1, #11
 8009f7a:	e766      	b.n	8009e4a <follow_path+0x4e>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8009f7c:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 8009f80:	2819      	cmp	r0, #25
 8009f82:	d98a      	bls.n	8009e9a <follow_path+0x9e>
				if (IsLower(c)) {		/* ASCII small capital? */
 8009f84:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 8009f88:	2819      	cmp	r0, #25
					b |= 1; c -= 0x20;
 8009f8a:	bf9e      	ittt	ls
 8009f8c:	3b20      	subls	r3, #32
 8009f8e:	f042 0201 	orrls.w	r2, r2, #1
 8009f92:	b2db      	uxtbls	r3, r3
 8009f94:	e783      	b.n	8009e9e <follow_path+0xa2>
}
 8009f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f9a:	bf00      	nop
 8009f9c:	0800c990 	.word	0x0800c990
 8009fa0:	0800ca0f 	.word	0x0800ca0f

08009fa4 <dir_read.constprop.13>:
FRESULT dir_read (
 8009fa4:	b510      	push	{r4, lr}
 8009fa6:	4604      	mov	r4, r0
	res = FR_NO_FILE;
 8009fa8:	2004      	movs	r0, #4
	while (dp->sect) {
 8009faa:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8009fae:	b909      	cbnz	r1, 8009fb4 <dir_read.constprop.13+0x10>
	if (res != FR_OK) dp->sect = 0;
 8009fb0:	b1b0      	cbz	r0, 8009fe0 <dir_read.constprop.13+0x3c>
 8009fb2:	e01d      	b.n	8009ff0 <dir_read.constprop.13+0x4c>
		res = move_window(dp->fs, dp->sect);
 8009fb4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009fb8:	f7ff fb54 	bl	8009664 <move_window>
		if (res != FR_OK) break;
 8009fbc:	b9c0      	cbnz	r0, 8009ff0 <dir_read.constprop.13+0x4c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8009fbe:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		c = dir[DIR_Name];
 8009fc2:	7813      	ldrb	r3, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009fc4:	b1c3      	cbz	r3, 8009ff8 <dir_read.constprop.13+0x54>
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8009fc6:	2be5      	cmp	r3, #229	; 0xe5
 8009fc8:	d00c      	beq.n	8009fe4 <dir_read.constprop.13+0x40>
 8009fca:	2b2e      	cmp	r3, #46	; 0x2e
 8009fcc:	d00a      	beq.n	8009fe4 <dir_read.constprop.13+0x40>
		a = dir[DIR_Attr] & AM_MASK;
 8009fce:	7ad3      	ldrb	r3, [r2, #11]
 8009fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8009fd4:	2b0f      	cmp	r3, #15
 8009fd6:	d005      	beq.n	8009fe4 <dir_read.constprop.13+0x40>
 8009fd8:	f023 0320 	bic.w	r3, r3, #32
 8009fdc:	2b08      	cmp	r3, #8
 8009fde:	d001      	beq.n	8009fe4 <dir_read.constprop.13+0x40>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	bd10      	pop	{r4, pc}
		res = dir_next(dp, 0);				/* Next entry */
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f7ff fe78 	bl	8009cdc <dir_next>
		if (res != FR_OK) break;
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d0dc      	beq.n	8009faa <dir_read.constprop.13+0x6>
	if (res != FR_OK) dp->sect = 0;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
}
 8009ff6:	bd10      	pop	{r4, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009ff8:	2004      	movs	r0, #4
 8009ffa:	e7f9      	b.n	8009ff0 <dir_read.constprop.13+0x4c>

08009ffc <dir_register>:
{
 8009ffc:	b538      	push	{r3, r4, r5, lr}
	res = dir_sdi(dp, 0);
 8009ffe:	2100      	movs	r1, #0
{
 800a000:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 800a002:	f7ff fd28 	bl	8009a56 <dir_sdi>
	if (res == FR_OK) {
 800a006:	4604      	mov	r4, r0
 800a008:	bb78      	cbnz	r0, 800a06a <dir_register+0x6e>
			res = move_window(dp->fs, dp->sect);
 800a00a:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 800a00e:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 800a012:	f7ff fb27 	bl	8009664 <move_window>
			if (res != FR_OK) break;
 800a016:	4604      	mov	r4, r0
 800a018:	bb38      	cbnz	r0, 800a06a <dir_register+0x6e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a01a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	2be5      	cmp	r3, #229	; 0xe5
 800a022:	d11b      	bne.n	800a05c <dir_register+0x60>
		res = move_window(dp->fs, dp->sect);
 800a024:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 800a028:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 800a02c:	f7ff fb1a 	bl	8009664 <move_window>
		if (res == FR_OK) {
 800a030:	4604      	mov	r4, r0
 800a032:	b988      	cbnz	r0, 800a058 <dir_register+0x5c>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800a034:	4601      	mov	r1, r0
 800a036:	2220      	movs	r2, #32
 800a038:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 800a03c:	f7ff f99a 	bl	8009374 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800a040:	220b      	movs	r2, #11
 800a042:	f8d5 1218 	ldr.w	r1, [r5, #536]	; 0x218
 800a046:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 800a04a:	f7ff f989 	bl	8009360 <mem_cpy>
			dp->fs->wflag = 1;
 800a04e:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 800a052:	2201      	movs	r2, #1
 800a054:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 800a058:	4620      	mov	r0, r4
 800a05a:	bd38      	pop	{r3, r4, r5, pc}
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d0e1      	beq.n	800a024 <dir_register+0x28>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800a060:	2101      	movs	r1, #1
 800a062:	4628      	mov	r0, r5
 800a064:	f7ff fe3a 	bl	8009cdc <dir_next>
 800a068:	e7cd      	b.n	800a006 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a06a:	2c04      	cmp	r4, #4
 800a06c:	bf08      	it	eq
 800a06e:	2407      	moveq	r4, #7
 800a070:	e7f2      	b.n	800a058 <dir_register+0x5c>

0800a072 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a072:	2901      	cmp	r1, #1
{
 800a074:	b570      	push	{r4, r5, r6, lr}
 800a076:	4604      	mov	r4, r0
 800a078:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a07a:	d801      	bhi.n	800a080 <remove_chain+0xe>
		res = FR_INT_ERR;
 800a07c:	2002      	movs	r0, #2
 800a07e:	bd70      	pop	{r4, r5, r6, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a080:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a084:	4299      	cmp	r1, r3
 800a086:	d2f9      	bcs.n	800a07c <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a088:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800a08c:	429d      	cmp	r5, r3
 800a08e:	d205      	bcs.n	800a09c <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800a090:	4629      	mov	r1, r5
 800a092:	4620      	mov	r0, r4
 800a094:	f7ff fc7e 	bl	8009994 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 800a098:	4606      	mov	r6, r0
 800a09a:	b908      	cbnz	r0, 800a0a0 <remove_chain+0x2e>
		res = FR_INT_ERR;
 800a09c:	2000      	movs	r0, #0
 800a09e:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800a0a0:	2801      	cmp	r0, #1
 800a0a2:	d0eb      	beq.n	800a07c <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a0a4:	1c41      	adds	r1, r0, #1
 800a0a6:	d014      	beq.n	800a0d2 <remove_chain+0x60>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f7ff fd42 	bl	8009b36 <put_fat>
			if (res != FR_OK) break;
 800a0b2:	b978      	cbnz	r0, 800a0d4 <remove_chain+0x62>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800a0b4:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800a0b8:	1c5a      	adds	r2, r3, #1
 800a0ba:	d008      	beq.n	800a0ce <remove_chain+0x5c>
				fs->free_clust++;
 800a0bc:	3301      	adds	r3, #1
 800a0be:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
				fs->fsi_flag |= 1;
 800a0c2:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 800a0c6:	f043 0301 	orr.w	r3, r3, #1
 800a0ca:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
{
 800a0ce:	4635      	mov	r5, r6
 800a0d0:	e7da      	b.n	800a088 <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a0d2:	2001      	movs	r0, #1
}
 800a0d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a0d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a0d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a0da:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a0dc:	a804      	add	r0, sp, #16
{
 800a0de:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 800a0e0:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 800a0e4:	4616      	mov	r6, r2


	vol = get_ldnumber(&rp);
 800a0e6:	f7ff f9f3 	bl	80094d0 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800a0ea:	1e05      	subs	r5, r0, #0
 800a0ec:	db21      	blt.n	800a132 <f_mount+0x5a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a0ee:	4913      	ldr	r1, [pc, #76]	; (800a13c <f_mount+0x64>)
 800a0f0:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 800a0f4:	b164      	cbz	r4, 800a110 <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a0f6:	4b12      	ldr	r3, [pc, #72]	; (800a140 <f_mount+0x68>)
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	4294      	cmp	r4, r2
 800a0fc:	bf04      	itt	eq
 800a0fe:	2200      	moveq	r2, #0
 800a100:	601a      	streq	r2, [r3, #0]
 800a102:	68da      	ldr	r2, [r3, #12]
 800a104:	2000      	movs	r0, #0
 800a106:	4294      	cmp	r4, r2
 800a108:	bf08      	it	eq
 800a10a:	60d8      	streq	r0, [r3, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a10c:	f884 0200 	strb.w	r0, [r4, #512]	; 0x200
	}

	if (fs) {
 800a110:	9801      	ldr	r0, [sp, #4]
 800a112:	b110      	cbz	r0, 800a11a <f_mount+0x42>
		fs->fs_type = 0;				/* Clear new fs object */
 800a114:	2300      	movs	r3, #0
 800a116:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a11a:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a11e:	b130      	cbz	r0, 800a12e <f_mount+0x56>
 800a120:	2e01      	cmp	r6, #1
 800a122:	d108      	bne.n	800a136 <f_mount+0x5e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800a124:	2200      	movs	r2, #0
 800a126:	4669      	mov	r1, sp
 800a128:	a801      	add	r0, sp, #4
 800a12a:	f7ff fae5 	bl	80096f8 <find_volume>
	LEAVE_FF(fs, res);
}
 800a12e:	b004      	add	sp, #16
 800a130:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800a132:	200b      	movs	r0, #11
 800a134:	e7fb      	b.n	800a12e <f_mount+0x56>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a136:	2000      	movs	r0, #0
 800a138:	e7f9      	b.n	800a12e <f_mount+0x56>
 800a13a:	bf00      	nop
 800a13c:	2000063c 	.word	0x2000063c
 800a140:	20000640 	.word	0x20000640

0800a144 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a148:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800a14c:	4690      	mov	r8, r2
 800a14e:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800a150:	4605      	mov	r5, r0
 800a152:	2800      	cmp	r0, #0
 800a154:	f000 80a6 	beq.w	800a2a4 <f_open+0x160>
	fp->fs = 0;			/* Clear file object */
 800a158:	2300      	movs	r3, #0
 800a15a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800a15e:	f002 021e 	and.w	r2, r2, #30
 800a162:	a901      	add	r1, sp, #4
 800a164:	a886      	add	r0, sp, #536	; 0x218
 800a166:	f7ff fac7 	bl	80096f8 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800a16a:	4606      	mov	r6, r0
 800a16c:	2800      	cmp	r0, #0
 800a16e:	f040 8094 	bne.w	800a29a <f_open+0x156>
		INIT_BUF(dj);
 800a172:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 800a174:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800a176:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 800a178:	a806      	add	r0, sp, #24
 800a17a:	f7ff fe3f 	bl	8009dfc <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800a17e:	f008 071f 	and.w	r7, r8, #31
		dir = dj.dir;
 800a182:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a184:	b948      	cbnz	r0, 800a19a <f_open+0x56>
			if (!dir)	/* Default directory itself */
 800a186:	2c00      	cmp	r4, #0
 800a188:	d05b      	beq.n	800a242 <f_open+0xfe>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a18a:	f017 0f1e 	tst.w	r7, #30
 800a18e:	bf14      	ite	ne
 800a190:	2101      	movne	r1, #1
 800a192:	2100      	moveq	r1, #0
 800a194:	a806      	add	r0, sp, #24
 800a196:	f7ff f8f5 	bl	8009384 <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a19a:	f018 0f1c 	tst.w	r8, #28
 800a19e:	d05b      	beq.n	800a258 <f_open+0x114>
			if (res != FR_OK) {					/* No file, create new */
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d050      	beq.n	800a246 <f_open+0x102>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800a1a4:	2804      	cmp	r0, #4
 800a1a6:	d14a      	bne.n	800a23e <f_open+0xfa>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a1a8:	4b51      	ldr	r3, [pc, #324]	; (800a2f0 <f_open+0x1ac>)
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	b11a      	cbz	r2, 800a1b6 <f_open+0x72>
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f040 809b 	bne.w	800a2ec <f_open+0x1a8>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a1b6:	a806      	add	r0, sp, #24
 800a1b8:	f7ff ff20 	bl	8009ffc <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	d13e      	bne.n	800a23e <f_open+0xfa>
				dir = dj.dir;					/* New entry */
 800a1c0:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a1c2:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a1c6:	073b      	lsls	r3, r7, #28
 800a1c8:	d550      	bpl.n	800a26c <f_open+0x128>
				dw = GET_FATTIME();				/* Created time */
 800a1ca:	f7f7 fa6d 	bl	80016a8 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 800a1ce:	f3c0 2307 	ubfx	r3, r0, #8, #8
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800a1d2:	f04f 0800 	mov.w	r8, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 800a1d6:	73a0      	strb	r0, [r4, #14]
 800a1d8:	73e3      	strb	r3, [r4, #15]
 800a1da:	0c03      	lsrs	r3, r0, #16
 800a1dc:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800a1de:	f884 800b 	strb.w	r8, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800a1e2:	f884 801c 	strb.w	r8, [r4, #28]
 800a1e6:	f884 801d 	strb.w	r8, [r4, #29]
 800a1ea:	f884 801e 	strb.w	r8, [r4, #30]
 800a1ee:	f884 801f 	strb.w	r8, [r4, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800a1f2:	7423      	strb	r3, [r4, #16]
 800a1f4:	7460      	strb	r0, [r4, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800a1f6:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800a1f8:	4621      	mov	r1, r4
 800a1fa:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800a1fe:	f7ff f996 	bl	800952e <ld_clust.isra.0>
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a202:	f884 801a 	strb.w	r8, [r4, #26]
 800a206:	f884 801b 	strb.w	r8, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800a20a:	f884 8014 	strb.w	r8, [r4, #20]
 800a20e:	f884 8015 	strb.w	r8, [r4, #21]
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 800a212:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800a214:	2201      	movs	r2, #1
 800a216:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800a21a:	4680      	mov	r8, r0
 800a21c:	b330      	cbz	r0, 800a26c <f_open+0x128>
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
 800a21e:	4601      	mov	r1, r0
 800a220:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 800a222:	f8d3 922c 	ldr.w	r9, [r3, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 800a226:	f7ff ff24 	bl	800a072 <remove_chain>
					if (res == FR_OK) {
 800a22a:	b940      	cbnz	r0, 800a23e <f_open+0xfa>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800a22c:	9886      	ldr	r0, [sp, #536]	; 0x218
 800a22e:	f108 33ff 	add.w	r3, r8, #4294967295
 800a232:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800a236:	4649      	mov	r1, r9
 800a238:	f7ff fa14 	bl	8009664 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 800a23c:	b1b0      	cbz	r0, 800a26c <f_open+0x128>
					res = FR_DENIED;
 800a23e:	4606      	mov	r6, r0
 800a240:	e02b      	b.n	800a29a <f_open+0x156>
				res = FR_INVALID_NAME;
 800a242:	2006      	movs	r0, #6
 800a244:	e7a9      	b.n	800a19a <f_open+0x56>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a246:	7ae3      	ldrb	r3, [r4, #11]
 800a248:	f013 0f11 	tst.w	r3, #17
 800a24c:	d12e      	bne.n	800a2ac <f_open+0x168>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800a24e:	f018 0f04 	tst.w	r8, #4
 800a252:	d0b8      	beq.n	800a1c6 <f_open+0x82>
						res = FR_EXIST;
 800a254:	2608      	movs	r6, #8
 800a256:	e020      	b.n	800a29a <f_open+0x156>
			if (res == FR_OK) {					/* Follow succeeded */
 800a258:	2800      	cmp	r0, #0
 800a25a:	d1f0      	bne.n	800a23e <f_open+0xfa>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800a25c:	7ae3      	ldrb	r3, [r4, #11]
 800a25e:	06d8      	lsls	r0, r3, #27
 800a260:	d422      	bmi.n	800a2a8 <f_open+0x164>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800a262:	f018 0f02 	tst.w	r8, #2
 800a266:	d001      	beq.n	800a26c <f_open+0x128>
 800a268:	07da      	lsls	r2, r3, #31
 800a26a:	d41f      	bmi.n	800a2ac <f_open+0x168>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a26c:	073b      	lsls	r3, r7, #28
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800a26e:	9b86      	ldr	r3, [sp, #536]	; 0x218
				mode |= FA__WRITTEN;
 800a270:	bf48      	it	mi
 800a272:	f047 0720 	orrmi.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800a276:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800a27a:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
			fp->dir_ptr = dir;
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a27e:	f017 0ffe 	tst.w	r7, #254	; 0xfe
			fp->dir_ptr = dir;
 800a282:	f8c5 4220 	str.w	r4, [r5, #544]	; 0x220
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a286:	bf14      	ite	ne
 800a288:	2101      	movne	r1, #1
 800a28a:	2100      	moveq	r1, #0
 800a28c:	a806      	add	r0, sp, #24
 800a28e:	f7ff f8ab 	bl	80093e8 <inc_lock>
 800a292:	f8c5 0228 	str.w	r0, [r5, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800a296:	b958      	cbnz	r0, 800a2b0 <f_open+0x16c>
 800a298:	2602      	movs	r6, #2
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 800a29a:	4630      	mov	r0, r6
 800a29c:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 800a2a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!fp) return FR_INVALID_OBJECT;
 800a2a4:	2609      	movs	r6, #9
 800a2a6:	e7f8      	b.n	800a29a <f_open+0x156>
					res = FR_NO_FILE;
 800a2a8:	2604      	movs	r6, #4
 800a2aa:	e7f6      	b.n	800a29a <f_open+0x156>
					res = FR_DENIED;
 800a2ac:	2607      	movs	r6, #7
 800a2ae:	e7f4      	b.n	800a29a <f_open+0x156>
			fp->flag = mode;					/* File access mode */
 800a2b0:	f885 7206 	strb.w	r7, [r5, #518]	; 0x206
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800a2b4:	f8dd 8218 	ldr.w	r8, [sp, #536]	; 0x218
			fp->err = 0;						/* Clear error flag */
 800a2b8:	2700      	movs	r7, #0
 800a2ba:	f885 7207 	strb.w	r7, [r5, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800a2be:	f898 0200 	ldrb.w	r0, [r8, #512]	; 0x200
 800a2c2:	4621      	mov	r1, r4
 800a2c4:	f7ff f933 	bl	800952e <ld_clust.isra.0>
 800a2c8:	f8c5 0210 	str.w	r0, [r5, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800a2cc:	69e3      	ldr	r3, [r4, #28]
 800a2ce:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
			fp->id = fp->fs->id;
 800a2d2:	f8b8 3206 	ldrh.w	r3, [r8, #518]	; 0x206
			fp->fptr = 0;						/* File pointer */
 800a2d6:	f8c5 7208 	str.w	r7, [r5, #520]	; 0x208
			fp->dsect = 0;
 800a2da:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 800a2de:	f8c5 7224 	str.w	r7, [r5, #548]	; 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 800a2e2:	f8c5 8200 	str.w	r8, [r5, #512]	; 0x200
			fp->id = fp->fs->id;
 800a2e6:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
 800a2ea:	e7d6      	b.n	800a29a <f_open+0x156>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a2ec:	2012      	movs	r0, #18
 800a2ee:	e7a6      	b.n	800a23e <f_open+0xfa>
 800a2f0:	20000640 	.word	0x20000640

0800a2f4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a2f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f8:	469b      	mov	fp, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	f8cb 3000 	str.w	r3, [fp]
{
 800a300:	4604      	mov	r4, r0
 800a302:	4689      	mov	r9, r1
 800a304:	4617      	mov	r7, r2

	res = validate(fp);						/* Check validity */
 800a306:	f7ff f8fb 	bl	8009500 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800a30a:	4606      	mov	r6, r0
 800a30c:	bb50      	cbnz	r0, 800a364 <f_write+0x70>
	if (fp->err)							/* Check error */
 800a30e:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 800a312:	2b00      	cmp	r3, #0
 800a314:	f040 80d9 	bne.w	800a4ca <f_write+0x1d6>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800a318:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a31c:	0799      	lsls	r1, r3, #30
 800a31e:	f140 80d6 	bpl.w	800a4ce <f_write+0x1da>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800a322:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800a326:	42df      	cmn	r7, r3
 800a328:	f0c0 8083 	bcc.w	800a432 <f_write+0x13e>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800a32c:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800a330:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 800a334:	4293      	cmp	r3, r2
 800a336:	f200 80c5 	bhi.w	800a4c4 <f_write+0x1d0>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800a33a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a33e:	f043 0320 	orr.w	r3, r3, #32
 800a342:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800a346:	e00d      	b.n	800a364 <f_write+0x70>
					if (fp->cltbl)
 800a348:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800a34c:	b173      	cbz	r3, 800a36c <f_write+0x78>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a34e:	4620      	mov	r0, r4
 800a350:	f7ff f8aa 	bl	80094a8 <clmt_clust>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a354:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a356:	2800      	cmp	r0, #0
 800a358:	d0e8      	beq.n	800a32c <f_write+0x38>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800a35a:	2901      	cmp	r1, #1
 800a35c:	d109      	bne.n	800a372 <f_write+0x7e>
 800a35e:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a360:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207

	LEAVE_FF(fp->fs, FR_OK);
}
 800a364:	4630      	mov	r0, r6
 800a366:	b003      	add	sp, #12
 800a368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a36c:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 800a370:	e07a      	b.n	800a468 <f_write+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a372:	1c4a      	adds	r2, r1, #1
 800a374:	d101      	bne.n	800a37a <f_write+0x86>
 800a376:	2601      	movs	r6, #1
 800a378:	e7f2      	b.n	800a360 <f_write+0x6c>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800a37a:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
				fp->clust = clst;			/* Update current cluster */
 800a37e:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800a382:	b90b      	cbnz	r3, 800a388 <f_write+0x94>
 800a384:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800a388:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a38c:	065b      	lsls	r3, r3, #25
 800a38e:	d511      	bpl.n	800a3b4 <f_write+0xc0>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a390:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a394:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800a398:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800a39c:	2301      	movs	r3, #1
 800a39e:	4621      	mov	r1, r4
 800a3a0:	f7fe ff5a 	bl	8009258 <disk_write>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d1e6      	bne.n	800a376 <f_write+0x82>
				fp->flag &= ~FA__DIRTY;
 800a3a8:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a3ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3b0:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800a3b4:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 800a3b8:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 800a3bc:	4650      	mov	r0, sl
 800a3be:	f7ff fadb 	bl	8009978 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	d0cb      	beq.n	800a35e <f_write+0x6a>
			sect += csect;
 800a3c6:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a3c8:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 800a3ca:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a3ce:	d04e      	beq.n	800a46e <f_write+0x17a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800a3d0:	9a01      	ldr	r2, [sp, #4]
 800a3d2:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800a3d6:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800a3da:	442a      	add	r2, r5
 800a3dc:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 800a3de:	bf84      	itt	hi
 800a3e0:	9a01      	ldrhi	r2, [sp, #4]
 800a3e2:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800a3e4:	462b      	mov	r3, r5
 800a3e6:	4642      	mov	r2, r8
 800a3e8:	4649      	mov	r1, r9
 800a3ea:	f7fe ff35 	bl	8009258 <disk_write>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	d1c1      	bne.n	800a376 <f_write+0x82>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a3f2:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 800a3f6:	eba1 0108 	sub.w	r1, r1, r8
 800a3fa:	428d      	cmp	r5, r1
 800a3fc:	d90c      	bls.n	800a418 <f_write+0x124>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800a3fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a402:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 800a406:	4620      	mov	r0, r4
 800a408:	f7fe ffaa 	bl	8009360 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800a40c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a414:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800a418:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800a41a:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800a41e:	442b      	add	r3, r5
 800a420:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 800a424:	f8db 3000 	ldr.w	r3, [fp]
 800a428:	442b      	add	r3, r5
 800a42a:	44a9      	add	r9, r5
 800a42c:	f8cb 3000 	str.w	r3, [fp]
 800a430:	1b7f      	subs	r7, r7, r5
	for ( ;  btw;							/* Repeat until all data written */
 800a432:	2f00      	cmp	r7, #0
 800a434:	f43f af7a 	beq.w	800a32c <f_write+0x38>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800a438:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 800a43c:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800a440:	bb5b      	cbnz	r3, 800a49a <f_write+0x1a6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800a442:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a446:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 800a44a:	3b01      	subs	r3, #1
 800a44c:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 800a450:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800a454:	9301      	str	r3, [sp, #4]
 800a456:	d197      	bne.n	800a388 <f_write+0x94>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a458:	2900      	cmp	r1, #0
 800a45a:	f47f af75 	bne.w	800a348 <f_write+0x54>
					clst = fp->sclust;		/* Follow from the origin */
 800a45e:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 800a462:	2900      	cmp	r1, #0
 800a464:	f47f af79 	bne.w	800a35a <f_write+0x66>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a468:	f7ff fbdf 	bl	8009c2a <create_chain>
 800a46c:	e772      	b.n	800a354 <f_write+0x60>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800a46e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800a472:	4598      	cmp	r8, r3
 800a474:	d00f      	beq.n	800a496 <f_write+0x1a2>
				if (fp->fptr < fp->fsize &&
 800a476:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 800a47a:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800a47e:	429a      	cmp	r2, r3
 800a480:	d209      	bcs.n	800a496 <f_write+0x1a2>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800a482:	2301      	movs	r3, #1
 800a484:	4642      	mov	r2, r8
 800a486:	4621      	mov	r1, r4
 800a488:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 800a48c:	f7fe fed6 	bl	800923c <disk_read>
				if (fp->fptr < fp->fsize &&
 800a490:	2800      	cmp	r0, #0
 800a492:	f47f af70 	bne.w	800a376 <f_write+0x82>
			fp->dsect = sect;
 800a496:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800a49a:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 800a49e:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800a4a2:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 800a4a6:	42bd      	cmp	r5, r7
 800a4a8:	bf28      	it	cs
 800a4aa:	463d      	movcs	r5, r7
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800a4ac:	462a      	mov	r2, r5
 800a4ae:	4649      	mov	r1, r9
 800a4b0:	4420      	add	r0, r4
 800a4b2:	f7fe ff55 	bl	8009360 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800a4b6:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a4ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4be:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800a4c2:	e7aa      	b.n	800a41a <f_write+0x126>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800a4c4:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 800a4c8:	e737      	b.n	800a33a <f_write+0x46>
 800a4ca:	461e      	mov	r6, r3
 800a4cc:	e74a      	b.n	800a364 <f_write+0x70>
		LEAVE_FF(fp->fs, FR_DENIED);
 800a4ce:	2607      	movs	r6, #7
 800a4d0:	e748      	b.n	800a364 <f_write+0x70>

0800a4d2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a4d2:	b570      	push	{r4, r5, r6, lr}
 800a4d4:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800a4d6:	f7ff f813 	bl	8009500 <validate>
	if (res == FR_OK) {
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	d158      	bne.n	800a590 <f_sync+0xbe>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800a4de:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a4e2:	069a      	lsls	r2, r3, #26
 800a4e4:	d554      	bpl.n	800a590 <f_sync+0xbe>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800a4e6:	065b      	lsls	r3, r3, #25
 800a4e8:	d511      	bpl.n	800a50e <f_sync+0x3c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a4ea:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a4ee:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800a4f2:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	4621      	mov	r1, r4
 800a4fa:	f7fe fead 	bl	8009258 <disk_write>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d145      	bne.n	800a58e <f_sync+0xbc>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 800a502:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a50a:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800a50e:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 800a512:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a516:	f7ff f8a5 	bl	8009664 <move_window>
 800a51a:	4606      	mov	r6, r0
			if (res == FR_OK) {
 800a51c:	bbc0      	cbnz	r0, 800a590 <f_sync+0xbe>
				dir = fp->dir_ptr;
 800a51e:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800a522:	7aeb      	ldrb	r3, [r5, #11]
 800a524:	f043 0320 	orr.w	r3, r3, #32
 800a528:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800a52a:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800a52e:	772b      	strb	r3, [r5, #28]
 800a530:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 800a534:	0a1b      	lsrs	r3, r3, #8
 800a536:	776b      	strb	r3, [r5, #29]
 800a538:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800a53c:	77ab      	strb	r3, [r5, #30]
 800a53e:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 800a542:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800a544:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a548:	76ab      	strb	r3, [r5, #26]
 800a54a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800a54e:	0c1b      	lsrs	r3, r3, #16
 800a550:	752b      	strb	r3, [r5, #20]
 800a552:	0a1b      	lsrs	r3, r3, #8
 800a554:	756b      	strb	r3, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a556:	76ea      	strb	r2, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 800a558:	f7f7 f8a6 	bl	80016a8 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 800a55c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800a560:	75a8      	strb	r0, [r5, #22]
 800a562:	75eb      	strb	r3, [r5, #23]
 800a564:	0c03      	lsrs	r3, r0, #16
 800a566:	0e00      	lsrs	r0, r0, #24
 800a568:	762b      	strb	r3, [r5, #24]
 800a56a:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800a56c:	74ae      	strb	r6, [r5, #18]
 800a56e:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 800a570:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 800a574:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 800a578:	f023 0320 	bic.w	r3, r3, #32
 800a57c:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 800a580:	2301      	movs	r3, #1
 800a582:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 800a586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 800a58a:	f7ff b80e 	b.w	80095aa <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800a58e:	2001      	movs	r0, #1
}
 800a590:	bd70      	pop	{r4, r5, r6, pc}

0800a592 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800a592:	b510      	push	{r4, lr}
 800a594:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a596:	f7ff ff9c 	bl	800a4d2 <f_sync>
	if (res == FR_OK)
 800a59a:	b950      	cbnz	r0, 800a5b2 <f_close+0x20>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800a59c:	4620      	mov	r0, r4
 800a59e:	f7fe ffaf 	bl	8009500 <validate>
		if (res == FR_OK) {
 800a5a2:	b930      	cbnz	r0, 800a5b2 <f_close+0x20>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800a5a4:	f8d4 0228 	ldr.w	r0, [r4, #552]	; 0x228
 800a5a8:	f7fe ff62 	bl	8009470 <dec_lock>
			if (res == FR_OK)
 800a5ac:	b908      	cbnz	r0, 800a5b2 <f_close+0x20>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800a5ae:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800a5b2:	bd10      	pop	{r4, pc}

0800a5b4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800a5b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	460d      	mov	r5, r1
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800a5bc:	f7fe ffa0 	bl	8009500 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800a5c0:	4606      	mov	r6, r0
 800a5c2:	bb10      	cbnz	r0, 800a60a <f_lseek+0x56>
	if (fp->err)						/* Check error */
 800a5c4:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f040 813e 	bne.w	800a84a <f_lseek+0x296>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a5ce:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f000 8087 	beq.w	800a6e6 <f_lseek+0x132>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a5d8:	1c6a      	adds	r2, r5, #1
 800a5da:	d13d      	bne.n	800a658 <f_lseek+0xa4>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
			cl = fp->sclust;			/* Top of the chain */
 800a5dc:	f8d4 7210 	ldr.w	r7, [r4, #528]	; 0x210
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a5e0:	f8d3 b000 	ldr.w	fp, [r3]
 800a5e4:	f103 0a04 	add.w	sl, r3, #4
 800a5e8:	2502      	movs	r5, #2
			if (cl) {
 800a5ea:	b35f      	cbz	r7, 800a644 <f_lseek+0x90>
 800a5ec:	46b8      	mov	r8, r7
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a5ee:	f04f 0900 	mov.w	r9, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(fp->fs, cl);
 800a5f2:	4641      	mov	r1, r8
 800a5f4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a5f8:	f7ff f9cc 	bl	8009994 <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800a5fc:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 800a5fe:	f109 0901 	add.w	r9, r9, #1
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800a602:	d807      	bhi.n	800a614 <f_lseek+0x60>
 800a604:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a606:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
 800a60a:	4630      	mov	r0, r6
 800a60c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a610:	4607      	mov	r7, r0
 800a612:	e7eb      	b.n	800a5ec <f_lseek+0x38>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a614:	1c43      	adds	r3, r0, #1
 800a616:	d101      	bne.n	800a61c <f_lseek+0x68>
 800a618:	2601      	movs	r6, #1
 800a61a:	e7f4      	b.n	800a606 <f_lseek+0x52>
					} while (cl == pcl + 1);
 800a61c:	f108 0301 	add.w	r3, r8, #1
 800a620:	4298      	cmp	r0, r3
 800a622:	4680      	mov	r8, r0
 800a624:	d0e5      	beq.n	800a5f2 <f_lseek+0x3e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a626:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a628:	45ab      	cmp	fp, r5
						*tbl++ = ncl; *tbl++ = tcl;
 800a62a:	bf21      	itttt	cs
 800a62c:	4653      	movcs	r3, sl
 800a62e:	f843 9b08 	strcs.w	r9, [r3], #8
 800a632:	f8ca 7004 	strcs.w	r7, [sl, #4]
 800a636:	469a      	movcs	sl, r3
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800a638:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800a63c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a640:	4298      	cmp	r0, r3
 800a642:	d3e5      	bcc.n	800a610 <f_lseek+0x5c>
			*fp->cltbl = ulen;	/* Number of items used */
 800a644:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
			if (ulen <= tlen)
 800a648:	455d      	cmp	r5, fp
			*fp->cltbl = ulen;	/* Number of items used */
 800a64a:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen)
 800a64c:	f200 80ff 	bhi.w	800a84e <f_lseek+0x29a>
				*tbl = 0;		/* Terminate table */
 800a650:	2300      	movs	r3, #0
 800a652:	f8ca 3000 	str.w	r3, [sl]
 800a656:	e7d8      	b.n	800a60a <f_lseek+0x56>
 800a658:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
 800a65c:	4285      	cmp	r5, r0
 800a65e:	bf28      	it	cs
 800a660:	4605      	movcs	r5, r0
			fp->fptr = ofs;				/* Set file pointer */
 800a662:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
			if (ofs) {
 800a666:	2d00      	cmp	r5, #0
 800a668:	d0cf      	beq.n	800a60a <f_lseek+0x56>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a66a:	f105 38ff 	add.w	r8, r5, #4294967295
 800a66e:	4641      	mov	r1, r8
 800a670:	4620      	mov	r0, r4
 800a672:	f7fe ff19 	bl	80094a8 <clmt_clust>
				dsc = clust2sect(fp->fs, fp->clust);
 800a676:	f8d4 7200 	ldr.w	r7, [r4, #512]	; 0x200
				fp->clust = clmt_clust(fp, ofs - 1);
 800a67a:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
 800a67e:	4601      	mov	r1, r0
				dsc = clust2sect(fp->fs, fp->clust);
 800a680:	4638      	mov	r0, r7
 800a682:	f7ff f979 	bl	8009978 <clust2sect>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800a686:	2800      	cmp	r0, #0
 800a688:	d0bc      	beq.n	800a604 <f_lseek+0x50>
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800a68a:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800a68e:	2d00      	cmp	r5, #0
 800a690:	d0bb      	beq.n	800a60a <f_lseek+0x56>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800a692:	f897 5202 	ldrb.w	r5, [r7, #514]	; 0x202
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800a696:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800a69a:	3d01      	subs	r5, #1
 800a69c:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 800a6a0:	4405      	add	r5, r0
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800a6a2:	4295      	cmp	r5, r2
 800a6a4:	d0b1      	beq.n	800a60a <f_lseek+0x56>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800a6a6:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a6aa:	0659      	lsls	r1, r3, #25
 800a6ac:	d50d      	bpl.n	800a6ca <f_lseek+0x116>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	4621      	mov	r1, r4
 800a6b2:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 800a6b6:	f7fe fdcf 	bl	8009258 <disk_write>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	d1ac      	bne.n	800a618 <f_lseek+0x64>
						fp->flag &= ~FA__DIRTY;
 800a6be:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a6c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6c6:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800a6ca:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	462a      	mov	r2, r5
 800a6d2:	4621      	mov	r1, r4
 800a6d4:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800a6d8:	f7fe fdb0 	bl	800923c <disk_read>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d19b      	bne.n	800a618 <f_lseek+0x64>
					fp->dsect = dsc;
 800a6e0:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 800a6e4:	e791      	b.n	800a60a <f_lseek+0x56>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800a6e6:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800a6ea:	429d      	cmp	r5, r3
 800a6ec:	d905      	bls.n	800a6fa <f_lseek+0x146>
			 && !(fp->flag & FA_WRITE)
 800a6ee:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 800a6f2:	f012 0f02 	tst.w	r2, #2
 800a6f6:	bf08      	it	eq
 800a6f8:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 800a6fa:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 800a6fc:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
		fp->fptr = nsect = 0;
 800a700:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
		if (ofs) {
 800a704:	2d00      	cmp	r5, #0
 800a706:	d13e      	bne.n	800a786 <f_lseek+0x1d2>
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800a708:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800a70c:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 800a710:	4293      	cmp	r3, r2
 800a712:	f67f af7a 	bls.w	800a60a <f_lseek+0x56>
			fp->fsize = fp->fptr;
 800a716:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 800a71a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a71e:	f043 0320 	orr.w	r3, r3, #32
 800a722:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800a726:	e770      	b.n	800a60a <f_lseek+0x56>
		fp->fptr = nsect = 0;
 800a728:	2500      	movs	r5, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800a72a:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800a72e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a732:	2b00      	cmp	r3, #0
 800a734:	d0e8      	beq.n	800a708 <f_lseek+0x154>
 800a736:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800a73a:	4295      	cmp	r5, r2
 800a73c:	d0e4      	beq.n	800a708 <f_lseek+0x154>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800a73e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a742:	065b      	lsls	r3, r3, #25
 800a744:	d510      	bpl.n	800a768 <f_lseek+0x1b4>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a746:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a74a:	2301      	movs	r3, #1
 800a74c:	4621      	mov	r1, r4
 800a74e:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800a752:	f7fe fd81 	bl	8009258 <disk_write>
 800a756:	2800      	cmp	r0, #0
 800a758:	f47f af5e 	bne.w	800a618 <f_lseek+0x64>
				fp->flag &= ~FA__DIRTY;
 800a75c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800a760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a764:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800a768:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a76c:	2301      	movs	r3, #1
 800a76e:	462a      	mov	r2, r5
 800a770:	4621      	mov	r1, r4
 800a772:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800a776:	f7fe fd61 	bl	800923c <disk_read>
 800a77a:	2800      	cmp	r0, #0
 800a77c:	f47f af4c 	bne.w	800a618 <f_lseek+0x64>
			fp->dsect = nsect;
 800a780:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 800a784:	e7c0      	b.n	800a708 <f_lseek+0x154>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800a786:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a78a:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 800a78e:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 800a790:	b32b      	cbz	r3, 800a7de <f_lseek+0x22a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a792:	3b01      	subs	r3, #1
 800a794:	1e6a      	subs	r2, r5, #1
 800a796:	fbb3 f1f7 	udiv	r1, r3, r7
 800a79a:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 800a79e:	428a      	cmp	r2, r1
 800a7a0:	d31d      	bcc.n	800a7de <f_lseek+0x22a>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800a7a2:	427a      	negs	r2, r7
 800a7a4:	4013      	ands	r3, r2
				clst = fp->clust;
 800a7a6:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800a7aa:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				ofs -= fp->fptr;
 800a7ae:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 800a7b0:	2900      	cmp	r1, #0
 800a7b2:	d0b9      	beq.n	800a728 <f_lseek+0x174>
				while (ofs > bcs) {						/* Cluster following loop */
 800a7b4:	42bd      	cmp	r5, r7
 800a7b6:	d823      	bhi.n	800a800 <f_lseek+0x24c>
				fp->fptr += ofs;
 800a7b8:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800a7bc:	442b      	add	r3, r5
 800a7be:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 800a7c2:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d0ae      	beq.n	800a728 <f_lseek+0x174>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800a7ca:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a7ce:	f7ff f8d3 	bl	8009978 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	f43f af16 	beq.w	800a604 <f_lseek+0x50>
					nsect += ofs / SS(fp->fs);
 800a7d8:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 800a7dc:	e7a5      	b.n	800a72a <f_lseek+0x176>
				clst = fp->sclust;						/* start from the first cluster */
 800a7de:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a7e2:	b951      	cbnz	r1, 800a7fa <f_lseek+0x246>
					clst = create_chain(fp->fs, 0);
 800a7e4:	f7ff fa21 	bl	8009c2a <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800a7e8:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 800a7ea:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800a7ec:	f43f af0a 	beq.w	800a604 <f_lseek+0x50>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a7f0:	1c42      	adds	r2, r0, #1
 800a7f2:	f43f af11 	beq.w	800a618 <f_lseek+0x64>
					fp->sclust = clst;
 800a7f6:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
				fp->clust = clst;
 800a7fa:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
 800a7fe:	e7d7      	b.n	800a7b0 <f_lseek+0x1fc>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a800:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800a804:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a808:	079b      	lsls	r3, r3, #30
 800a80a:	d505      	bpl.n	800a818 <f_lseek+0x264>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800a80c:	f7ff fa0d 	bl	8009c2a <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 800a810:	4601      	mov	r1, r0
 800a812:	b920      	cbnz	r0, 800a81e <f_lseek+0x26a>
 800a814:	463d      	mov	r5, r7
 800a816:	e7cf      	b.n	800a7b8 <f_lseek+0x204>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800a818:	f7ff f8bc 	bl	8009994 <get_fat>
 800a81c:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a81e:	1c4a      	adds	r2, r1, #1
 800a820:	f43f aefa 	beq.w	800a618 <f_lseek+0x64>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800a824:	2901      	cmp	r1, #1
 800a826:	f67f aeed 	bls.w	800a604 <f_lseek+0x50>
 800a82a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800a82e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a832:	4299      	cmp	r1, r3
 800a834:	f4bf aee6 	bcs.w	800a604 <f_lseek+0x50>
					fp->fptr += bcs;
 800a838:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
					fp->clust = clst;
 800a83c:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
					fp->fptr += bcs;
 800a840:	443b      	add	r3, r7
 800a842:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
					ofs -= bcs;
 800a846:	1bed      	subs	r5, r5, r7
 800a848:	e7b4      	b.n	800a7b4 <f_lseek+0x200>
 800a84a:	461e      	mov	r6, r3
 800a84c:	e6dd      	b.n	800a60a <f_lseek+0x56>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a84e:	2611      	movs	r6, #17
 800a850:	e6db      	b.n	800a60a <f_lseek+0x56>

0800a852 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800a852:	b530      	push	{r4, r5, lr}
 800a854:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
	DWORD dclst = 0;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 800a858:	2201      	movs	r2, #1
{
 800a85a:	9001      	str	r0, [sp, #4]
	res = find_volume(&dj.fs, &path, 1);
 800a85c:	a901      	add	r1, sp, #4
 800a85e:	a886      	add	r0, sp, #536	; 0x218
 800a860:	f7fe ff4a 	bl	80096f8 <find_volume>
	if (res == FR_OK) {
 800a864:	b988      	cbnz	r0, 800a88a <f_unlink+0x38>
		INIT_BUF(dj);
 800a866:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);		/* Follow the file path */
 800a868:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800a86a:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);		/* Follow the file path */
 800a86c:	a806      	add	r0, sp, #24
 800a86e:	f7ff fac5 	bl	8009dfc <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
 800a872:	b950      	cbnz	r0, 800a88a <f_unlink+0x38>
 800a874:	2102      	movs	r1, #2
 800a876:	a806      	add	r0, sp, #24
 800a878:	f7fe fd84 	bl	8009384 <chk_lock>
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800a87c:	b928      	cbnz	r0, 800a88a <f_unlink+0x38>
			dir = dj.dir;
 800a87e:	998b      	ldr	r1, [sp, #556]	; 0x22c
			if (!dir) {
 800a880:	b169      	cbz	r1, 800a89e <f_unlink+0x4c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 800a882:	7acd      	ldrb	r5, [r1, #11]
 800a884:	07ea      	lsls	r2, r5, #31
 800a886:	d50c      	bpl.n	800a8a2 <f_unlink+0x50>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800a888:	2007      	movs	r0, #7
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
 800a88a:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c
 800a88e:	bd30      	pop	{r4, r5, pc}
					res = remove_chain(dj.fs, dclst);
 800a890:	4621      	mov	r1, r4
 800a892:	9886      	ldr	r0, [sp, #536]	; 0x218
 800a894:	f7ff fbed 	bl	800a072 <remove_chain>
				if (res == FR_OK) res = sync_fs(dj.fs);
 800a898:	2800      	cmp	r0, #0
 800a89a:	d1f6      	bne.n	800a88a <f_unlink+0x38>
 800a89c:	e026      	b.n	800a8ec <f_unlink+0x9a>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800a89e:	2006      	movs	r0, #6
 800a8a0:	e7f3      	b.n	800a88a <f_unlink+0x38>
				dclst = ld_clust(dj.fs, dir);
 800a8a2:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800a8a4:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800a8a8:	f7fe fe41 	bl	800952e <ld_clust.isra.0>
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	b1b0      	cbz	r0, 800a8de <f_unlink+0x8c>
 800a8b0:	06eb      	lsls	r3, r5, #27
 800a8b2:	d514      	bpl.n	800a8de <f_unlink+0x8c>
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 800a8b4:	a906      	add	r1, sp, #24
 800a8b6:	a88e      	add	r0, sp, #568	; 0x238
 800a8b8:	f44f 7208 	mov.w	r2, #544	; 0x220
 800a8bc:	f7fe fd50 	bl	8009360 <mem_cpy>
						res = dir_sdi(&sdj, 2);
 800a8c0:	2102      	movs	r1, #2
 800a8c2:	a88e      	add	r0, sp, #568	; 0x238
						sdj.sclust = dclst;
 800a8c4:	f8cd 4440 	str.w	r4, [sp, #1088]	; 0x440
						res = dir_sdi(&sdj, 2);
 800a8c8:	f7ff f8c5 	bl	8009a56 <dir_sdi>
						if (res == FR_OK) {
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d1dc      	bne.n	800a88a <f_unlink+0x38>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 800a8d0:	a88e      	add	r0, sp, #568	; 0x238
 800a8d2:	f7ff fb67 	bl	8009fa4 <dir_read.constprop.13>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d0d6      	beq.n	800a888 <f_unlink+0x36>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 800a8da:	2804      	cmp	r0, #4
 800a8dc:	d1d5      	bne.n	800a88a <f_unlink+0x38>
				res = dir_remove(&dj);		/* Remove the directory entry */
 800a8de:	a806      	add	r0, sp, #24
 800a8e0:	f7ff f908 	bl	8009af4 <dir_remove>
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	d1d0      	bne.n	800a88a <f_unlink+0x38>
 800a8e8:	2c00      	cmp	r4, #0
 800a8ea:	d1d1      	bne.n	800a890 <f_unlink+0x3e>
				if (res == FR_OK) res = sync_fs(dj.fs);
 800a8ec:	9886      	ldr	r0, [sp, #536]	; 0x218
 800a8ee:	f7fe fe5c 	bl	80095aa <sync_fs>
 800a8f2:	e7ca      	b.n	800a88a <f_unlink+0x38>

0800a8f4 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the time stamp to be set */
)
{
 800a8f4:	b510      	push	{r4, lr}
 800a8f6:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800a8fa:	460c      	mov	r4, r1
 800a8fc:	9001      	str	r0, [sp, #4]
	BYTE *dir;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 800a8fe:	2201      	movs	r2, #1
 800a900:	a901      	add	r1, sp, #4
 800a902:	a886      	add	r0, sp, #536	; 0x218
 800a904:	f7fe fef8 	bl	80096f8 <find_volume>
	if (res == FR_OK) {
 800a908:	b9c0      	cbnz	r0, 800a93c <f_utime+0x48>
		INIT_BUF(dj);
 800a90a:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 800a90c:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800a90e:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 800a910:	a806      	add	r0, sp, #24
 800a912:	f7ff fa73 	bl	8009dfc <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
 800a916:	b988      	cbnz	r0, 800a93c <f_utime+0x48>
			dir = dj.dir;
 800a918:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
			if (!dir) {					/* Root directory */
 800a91a:	b193      	cbz	r3, 800a942 <f_utime+0x4e>
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir + DIR_WrtTime, fno->ftime);
 800a91c:	88e2      	ldrh	r2, [r4, #6]
 800a91e:	759a      	strb	r2, [r3, #22]
 800a920:	88e2      	ldrh	r2, [r4, #6]
 800a922:	0a12      	lsrs	r2, r2, #8
 800a924:	75da      	strb	r2, [r3, #23]
				ST_WORD(dir + DIR_WrtDate, fno->fdate);
 800a926:	88a2      	ldrh	r2, [r4, #4]
 800a928:	761a      	strb	r2, [r3, #24]
 800a92a:	88a2      	ldrh	r2, [r4, #4]
 800a92c:	0a12      	lsrs	r2, r2, #8
 800a92e:	765a      	strb	r2, [r3, #25]
				dj.fs->wflag = 1;
 800a930:	9886      	ldr	r0, [sp, #536]	; 0x218
 800a932:	2301      	movs	r3, #1
 800a934:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
				res = sync_fs(dj.fs);
 800a938:	f7fe fe37 	bl	80095aa <sync_fs>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
 800a93c:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800a940:	bd10      	pop	{r4, pc}
				res = FR_INVALID_NAME;
 800a942:	2006      	movs	r0, #6
 800a944:	e7fa      	b.n	800a93c <f_utime+0x48>
	...

0800a948 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a948:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 800a94a:	4b0f      	ldr	r3, [pc, #60]	; (800a988 <FATFS_LinkDriverEx+0x40>)
 800a94c:	7a5c      	ldrb	r4, [r3, #9]
 800a94e:	2c01      	cmp	r4, #1
 800a950:	d818      	bhi.n	800a984 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a952:	7a5d      	ldrb	r5, [r3, #9]
 800a954:	b2ed      	uxtb	r5, r5
 800a956:	2400      	movs	r4, #0
 800a958:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 800a95a:	7a5d      	ldrb	r5, [r3, #9]
 800a95c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a960:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 800a962:	7a58      	ldrb	r0, [r3, #9]
 800a964:	4418      	add	r0, r3
 800a966:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800a968:	7a5a      	ldrb	r2, [r3, #9]
 800a96a:	b2d2      	uxtb	r2, r2
 800a96c:	1c50      	adds	r0, r2, #1
 800a96e:	b2c0      	uxtb	r0, r0
 800a970:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 800a972:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800a974:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 800a976:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800a978:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800a97a:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800a97c:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800a97e:	70cc      	strb	r4, [r1, #3]
 800a980:	4620      	mov	r0, r4
 800a982:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800a984:	2001      	movs	r0, #1
    ret = 0;
  }
  
  return ret;
}
 800a986:	bd30      	pop	{r4, r5, pc}
 800a988:	2000065c 	.word	0x2000065c

0800a98c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800a98c:	2200      	movs	r2, #0
 800a98e:	f7ff bfdb 	b.w	800a948 <FATFS_LinkDriverEx>
	...

0800a994 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{ 
  uint8_t DiskNum = 0;
  uint8_t ret = 1;
  
  if(disk.nbr >= 1)
 800a994:	4a0a      	ldr	r2, [pc, #40]	; (800a9c0 <FATFS_UnLinkDriverEx+0x2c>)
 800a996:	7a53      	ldrb	r3, [r2, #9]
 800a998:	b17b      	cbz	r3, 800a9ba <FATFS_UnLinkDriverEx+0x26>
  {    
    DiskNum = path[0] - '0';
 800a99a:	7803      	ldrb	r3, [r0, #0]
 800a99c:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800a9a4:	6848      	ldr	r0, [r1, #4]
 800a9a6:	b140      	cbz	r0, 800a9ba <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 800a9a8:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 800a9aa:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 800a9ac:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 800a9ae:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 800a9b0:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	7253      	strb	r3, [r2, #9]
 800a9b8:	4770      	bx	lr
  uint8_t ret = 1;
 800a9ba:	2001      	movs	r0, #1
      ret = 0;
    }
  }
  
  return ret;
}
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	2000065c 	.word	0x2000065c

0800a9c4 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path  
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{ 
  return FATFS_UnLinkDriverEx(path, 0);
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	f7ff bfe5 	b.w	800a994 <FATFS_UnLinkDriverEx>
	...

0800a9cc <__libc_init_array>:
 800a9cc:	b570      	push	{r4, r5, r6, lr}
 800a9ce:	4e0d      	ldr	r6, [pc, #52]	; (800aa04 <__libc_init_array+0x38>)
 800a9d0:	4c0d      	ldr	r4, [pc, #52]	; (800aa08 <__libc_init_array+0x3c>)
 800a9d2:	1ba4      	subs	r4, r4, r6
 800a9d4:	10a4      	asrs	r4, r4, #2
 800a9d6:	2500      	movs	r5, #0
 800a9d8:	42a5      	cmp	r5, r4
 800a9da:	d109      	bne.n	800a9f0 <__libc_init_array+0x24>
 800a9dc:	4e0b      	ldr	r6, [pc, #44]	; (800aa0c <__libc_init_array+0x40>)
 800a9de:	4c0c      	ldr	r4, [pc, #48]	; (800aa10 <__libc_init_array+0x44>)
 800a9e0:	f001 fe6a 	bl	800c6b8 <_init>
 800a9e4:	1ba4      	subs	r4, r4, r6
 800a9e6:	10a4      	asrs	r4, r4, #2
 800a9e8:	2500      	movs	r5, #0
 800a9ea:	42a5      	cmp	r5, r4
 800a9ec:	d105      	bne.n	800a9fa <__libc_init_array+0x2e>
 800a9ee:	bd70      	pop	{r4, r5, r6, pc}
 800a9f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a9f4:	4798      	blx	r3
 800a9f6:	3501      	adds	r5, #1
 800a9f8:	e7ee      	b.n	800a9d8 <__libc_init_array+0xc>
 800a9fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a9fe:	4798      	blx	r3
 800aa00:	3501      	adds	r5, #1
 800aa02:	e7f2      	b.n	800a9ea <__libc_init_array+0x1e>
 800aa04:	0800cce0 	.word	0x0800cce0
 800aa08:	0800cce0 	.word	0x0800cce0
 800aa0c:	0800cce0 	.word	0x0800cce0
 800aa10:	0800cce4 	.word	0x0800cce4

0800aa14 <malloc>:
 800aa14:	4b02      	ldr	r3, [pc, #8]	; (800aa20 <malloc+0xc>)
 800aa16:	4601      	mov	r1, r0
 800aa18:	6818      	ldr	r0, [r3, #0]
 800aa1a:	f000 bac9 	b.w	800afb0 <_malloc_r>
 800aa1e:	bf00      	nop
 800aa20:	20000314 	.word	0x20000314

0800aa24 <free>:
 800aa24:	4b02      	ldr	r3, [pc, #8]	; (800aa30 <free+0xc>)
 800aa26:	4601      	mov	r1, r0
 800aa28:	6818      	ldr	r0, [r3, #0]
 800aa2a:	f000 ba73 	b.w	800af14 <_free_r>
 800aa2e:	bf00      	nop
 800aa30:	20000314 	.word	0x20000314

0800aa34 <memcpy>:
 800aa34:	b510      	push	{r4, lr}
 800aa36:	1e43      	subs	r3, r0, #1
 800aa38:	440a      	add	r2, r1
 800aa3a:	4291      	cmp	r1, r2
 800aa3c:	d100      	bne.n	800aa40 <memcpy+0xc>
 800aa3e:	bd10      	pop	{r4, pc}
 800aa40:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa44:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa48:	e7f7      	b.n	800aa3a <memcpy+0x6>

0800aa4a <memset>:
 800aa4a:	4402      	add	r2, r0
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d100      	bne.n	800aa54 <memset+0xa>
 800aa52:	4770      	bx	lr
 800aa54:	f803 1b01 	strb.w	r1, [r3], #1
 800aa58:	e7f9      	b.n	800aa4e <memset+0x4>
	...

0800aa5c <validate_structure>:
 800aa5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa5e:	6801      	ldr	r1, [r0, #0]
 800aa60:	293b      	cmp	r1, #59	; 0x3b
 800aa62:	4604      	mov	r4, r0
 800aa64:	d911      	bls.n	800aa8a <validate_structure+0x2e>
 800aa66:	223c      	movs	r2, #60	; 0x3c
 800aa68:	4668      	mov	r0, sp
 800aa6a:	f000 fd99 	bl	800b5a0 <div>
 800aa6e:	9a01      	ldr	r2, [sp, #4]
 800aa70:	6863      	ldr	r3, [r4, #4]
 800aa72:	9900      	ldr	r1, [sp, #0]
 800aa74:	2a00      	cmp	r2, #0
 800aa76:	440b      	add	r3, r1
 800aa78:	6063      	str	r3, [r4, #4]
 800aa7a:	bfbb      	ittet	lt
 800aa7c:	323c      	addlt	r2, #60	; 0x3c
 800aa7e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800aa82:	6022      	strge	r2, [r4, #0]
 800aa84:	6022      	strlt	r2, [r4, #0]
 800aa86:	bfb8      	it	lt
 800aa88:	6063      	strlt	r3, [r4, #4]
 800aa8a:	6861      	ldr	r1, [r4, #4]
 800aa8c:	293b      	cmp	r1, #59	; 0x3b
 800aa8e:	d911      	bls.n	800aab4 <validate_structure+0x58>
 800aa90:	223c      	movs	r2, #60	; 0x3c
 800aa92:	4668      	mov	r0, sp
 800aa94:	f000 fd84 	bl	800b5a0 <div>
 800aa98:	9a01      	ldr	r2, [sp, #4]
 800aa9a:	68a3      	ldr	r3, [r4, #8]
 800aa9c:	9900      	ldr	r1, [sp, #0]
 800aa9e:	2a00      	cmp	r2, #0
 800aaa0:	440b      	add	r3, r1
 800aaa2:	60a3      	str	r3, [r4, #8]
 800aaa4:	bfbb      	ittet	lt
 800aaa6:	323c      	addlt	r2, #60	; 0x3c
 800aaa8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800aaac:	6062      	strge	r2, [r4, #4]
 800aaae:	6062      	strlt	r2, [r4, #4]
 800aab0:	bfb8      	it	lt
 800aab2:	60a3      	strlt	r3, [r4, #8]
 800aab4:	68a1      	ldr	r1, [r4, #8]
 800aab6:	2917      	cmp	r1, #23
 800aab8:	d911      	bls.n	800aade <validate_structure+0x82>
 800aaba:	2218      	movs	r2, #24
 800aabc:	4668      	mov	r0, sp
 800aabe:	f000 fd6f 	bl	800b5a0 <div>
 800aac2:	9a01      	ldr	r2, [sp, #4]
 800aac4:	68e3      	ldr	r3, [r4, #12]
 800aac6:	9900      	ldr	r1, [sp, #0]
 800aac8:	2a00      	cmp	r2, #0
 800aaca:	440b      	add	r3, r1
 800aacc:	60e3      	str	r3, [r4, #12]
 800aace:	bfbb      	ittet	lt
 800aad0:	3218      	addlt	r2, #24
 800aad2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800aad6:	60a2      	strge	r2, [r4, #8]
 800aad8:	60a2      	strlt	r2, [r4, #8]
 800aada:	bfb8      	it	lt
 800aadc:	60e3      	strlt	r3, [r4, #12]
 800aade:	6921      	ldr	r1, [r4, #16]
 800aae0:	290b      	cmp	r1, #11
 800aae2:	d911      	bls.n	800ab08 <validate_structure+0xac>
 800aae4:	220c      	movs	r2, #12
 800aae6:	4668      	mov	r0, sp
 800aae8:	f000 fd5a 	bl	800b5a0 <div>
 800aaec:	9a01      	ldr	r2, [sp, #4]
 800aaee:	6963      	ldr	r3, [r4, #20]
 800aaf0:	9900      	ldr	r1, [sp, #0]
 800aaf2:	2a00      	cmp	r2, #0
 800aaf4:	440b      	add	r3, r1
 800aaf6:	6163      	str	r3, [r4, #20]
 800aaf8:	bfbb      	ittet	lt
 800aafa:	320c      	addlt	r2, #12
 800aafc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ab00:	6122      	strge	r2, [r4, #16]
 800ab02:	6122      	strlt	r2, [r4, #16]
 800ab04:	bfb8      	it	lt
 800ab06:	6163      	strlt	r3, [r4, #20]
 800ab08:	6963      	ldr	r3, [r4, #20]
 800ab0a:	0799      	lsls	r1, r3, #30
 800ab0c:	d143      	bne.n	800ab96 <validate_structure+0x13a>
 800ab0e:	2164      	movs	r1, #100	; 0x64
 800ab10:	fb93 f2f1 	sdiv	r2, r3, r1
 800ab14:	fb01 3212 	mls	r2, r1, r2, r3
 800ab18:	2a00      	cmp	r2, #0
 800ab1a:	d13e      	bne.n	800ab9a <validate_structure+0x13e>
 800ab1c:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800ab20:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800ab24:	fb93 f2f1 	sdiv	r2, r3, r1
 800ab28:	fb01 3312 	mls	r3, r1, r2, r3
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	bf14      	ite	ne
 800ab30:	231c      	movne	r3, #28
 800ab32:	231d      	moveq	r3, #29
 800ab34:	68e2      	ldr	r2, [r4, #12]
 800ab36:	2a00      	cmp	r2, #0
 800ab38:	dd31      	ble.n	800ab9e <validate_structure+0x142>
 800ab3a:	4f37      	ldr	r7, [pc, #220]	; (800ac18 <validate_structure+0x1bc>)
 800ab3c:	2602      	movs	r6, #2
 800ab3e:	f04f 0e00 	mov.w	lr, #0
 800ab42:	2064      	movs	r0, #100	; 0x64
 800ab44:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800ab48:	6921      	ldr	r1, [r4, #16]
 800ab4a:	68e2      	ldr	r2, [r4, #12]
 800ab4c:	2901      	cmp	r1, #1
 800ab4e:	d05d      	beq.n	800ac0c <validate_structure+0x1b0>
 800ab50:	f857 c021 	ldr.w	ip, [r7, r1, lsl #2]
 800ab54:	4562      	cmp	r2, ip
 800ab56:	dd2c      	ble.n	800abb2 <validate_structure+0x156>
 800ab58:	3101      	adds	r1, #1
 800ab5a:	eba2 020c 	sub.w	r2, r2, ip
 800ab5e:	290c      	cmp	r1, #12
 800ab60:	60e2      	str	r2, [r4, #12]
 800ab62:	6121      	str	r1, [r4, #16]
 800ab64:	d1f0      	bne.n	800ab48 <validate_structure+0xec>
 800ab66:	6963      	ldr	r3, [r4, #20]
 800ab68:	f8c4 e010 	str.w	lr, [r4, #16]
 800ab6c:	1c5a      	adds	r2, r3, #1
 800ab6e:	0791      	lsls	r1, r2, #30
 800ab70:	6162      	str	r2, [r4, #20]
 800ab72:	d147      	bne.n	800ac04 <validate_structure+0x1a8>
 800ab74:	fb92 f1f0 	sdiv	r1, r2, r0
 800ab78:	fb00 2211 	mls	r2, r0, r1, r2
 800ab7c:	2a00      	cmp	r2, #0
 800ab7e:	d143      	bne.n	800ac08 <validate_structure+0x1ac>
 800ab80:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800ab84:	fb93 f2f5 	sdiv	r2, r3, r5
 800ab88:	fb05 3312 	mls	r3, r5, r2, r3
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	bf14      	ite	ne
 800ab90:	231c      	movne	r3, #28
 800ab92:	231d      	moveq	r3, #29
 800ab94:	e7d8      	b.n	800ab48 <validate_structure+0xec>
 800ab96:	231c      	movs	r3, #28
 800ab98:	e7cc      	b.n	800ab34 <validate_structure+0xd8>
 800ab9a:	231d      	movs	r3, #29
 800ab9c:	e7ca      	b.n	800ab34 <validate_structure+0xd8>
 800ab9e:	4f1e      	ldr	r7, [pc, #120]	; (800ac18 <validate_structure+0x1bc>)
 800aba0:	260b      	movs	r6, #11
 800aba2:	2064      	movs	r0, #100	; 0x64
 800aba4:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800aba8:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800abac:	f1be 0f00 	cmp.w	lr, #0
 800abb0:	dd01      	ble.n	800abb6 <validate_structure+0x15a>
 800abb2:	b003      	add	sp, #12
 800abb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abb6:	6921      	ldr	r1, [r4, #16]
 800abb8:	3901      	subs	r1, #1
 800abba:	6121      	str	r1, [r4, #16]
 800abbc:	3101      	adds	r1, #1
 800abbe:	d114      	bne.n	800abea <validate_structure+0x18e>
 800abc0:	6963      	ldr	r3, [r4, #20]
 800abc2:	6126      	str	r6, [r4, #16]
 800abc4:	1e59      	subs	r1, r3, #1
 800abc6:	078a      	lsls	r2, r1, #30
 800abc8:	6161      	str	r1, [r4, #20]
 800abca:	d117      	bne.n	800abfc <validate_structure+0x1a0>
 800abcc:	fb91 f2f0 	sdiv	r2, r1, r0
 800abd0:	fb00 1112 	mls	r1, r0, r2, r1
 800abd4:	b9a1      	cbnz	r1, 800ac00 <validate_structure+0x1a4>
 800abd6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800abda:	fb93 f2f5 	sdiv	r2, r3, r5
 800abde:	fb05 3312 	mls	r3, r5, r2, r3
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	bf14      	ite	ne
 800abe6:	231c      	movne	r3, #28
 800abe8:	231d      	moveq	r3, #29
 800abea:	6922      	ldr	r2, [r4, #16]
 800abec:	2a01      	cmp	r2, #1
 800abee:	bf14      	ite	ne
 800abf0:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800abf4:	461a      	moveq	r2, r3
 800abf6:	4472      	add	r2, lr
 800abf8:	60e2      	str	r2, [r4, #12]
 800abfa:	e7d5      	b.n	800aba8 <validate_structure+0x14c>
 800abfc:	231c      	movs	r3, #28
 800abfe:	e7f4      	b.n	800abea <validate_structure+0x18e>
 800ac00:	231d      	movs	r3, #29
 800ac02:	e7f2      	b.n	800abea <validate_structure+0x18e>
 800ac04:	231c      	movs	r3, #28
 800ac06:	e79f      	b.n	800ab48 <validate_structure+0xec>
 800ac08:	231d      	movs	r3, #29
 800ac0a:	e79d      	b.n	800ab48 <validate_structure+0xec>
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	dad0      	bge.n	800abb2 <validate_structure+0x156>
 800ac10:	1ad2      	subs	r2, r2, r3
 800ac12:	60e2      	str	r2, [r4, #12]
 800ac14:	6126      	str	r6, [r4, #16]
 800ac16:	e797      	b.n	800ab48 <validate_structure+0xec>
 800ac18:	0800ca20 	.word	0x0800ca20

0800ac1c <mktime>:
 800ac1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac20:	4681      	mov	r9, r0
 800ac22:	f000 fd19 	bl	800b658 <__gettzinfo>
 800ac26:	4680      	mov	r8, r0
 800ac28:	4648      	mov	r0, r9
 800ac2a:	f7ff ff17 	bl	800aa5c <validate_structure>
 800ac2e:	e899 0081 	ldmia.w	r9, {r0, r7}
 800ac32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac36:	4ab4      	ldr	r2, [pc, #720]	; (800af08 <mktime+0x2ec>)
 800ac38:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800ac3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ac40:	253c      	movs	r5, #60	; 0x3c
 800ac42:	fb05 0707 	mla	r7, r5, r7, r0
 800ac46:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800ac4a:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 800ac4e:	3c01      	subs	r4, #1
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	fb05 7000 	mla	r0, r5, r0, r7
 800ac56:	4414      	add	r4, r2
 800ac58:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ac5c:	dd11      	ble.n	800ac82 <mktime+0x66>
 800ac5e:	0799      	lsls	r1, r3, #30
 800ac60:	d10f      	bne.n	800ac82 <mktime+0x66>
 800ac62:	2164      	movs	r1, #100	; 0x64
 800ac64:	fb93 f2f1 	sdiv	r2, r3, r1
 800ac68:	fb01 3212 	mls	r2, r1, r2, r3
 800ac6c:	b942      	cbnz	r2, 800ac80 <mktime+0x64>
 800ac6e:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 800ac72:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800ac76:	fb95 f2f1 	sdiv	r2, r5, r1
 800ac7a:	fb01 5212 	mls	r2, r1, r2, r5
 800ac7e:	b902      	cbnz	r2, 800ac82 <mktime+0x66>
 800ac80:	3401      	adds	r4, #1
 800ac82:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 800ac86:	3210      	adds	r2, #16
 800ac88:	f644 6120 	movw	r1, #20000	; 0x4e20
 800ac8c:	428a      	cmp	r2, r1
 800ac8e:	f8c9 401c 	str.w	r4, [r9, #28]
 800ac92:	f200 812d 	bhi.w	800aef0 <mktime+0x2d4>
 800ac96:	2b46      	cmp	r3, #70	; 0x46
 800ac98:	dd70      	ble.n	800ad7c <mktime+0x160>
 800ac9a:	2546      	movs	r5, #70	; 0x46
 800ac9c:	f240 176d 	movw	r7, #365	; 0x16d
 800aca0:	2164      	movs	r1, #100	; 0x64
 800aca2:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800aca6:	07aa      	lsls	r2, r5, #30
 800aca8:	d162      	bne.n	800ad70 <mktime+0x154>
 800acaa:	fb95 f2f1 	sdiv	r2, r5, r1
 800acae:	fb01 5212 	mls	r2, r1, r2, r5
 800acb2:	2a00      	cmp	r2, #0
 800acb4:	d15f      	bne.n	800ad76 <mktime+0x15a>
 800acb6:	f205 7e6c 	addw	lr, r5, #1900	; 0x76c
 800acba:	fb9e f2f6 	sdiv	r2, lr, r6
 800acbe:	fb06 e212 	mls	r2, r6, r2, lr
 800acc2:	2a00      	cmp	r2, #0
 800acc4:	bf14      	ite	ne
 800acc6:	463a      	movne	r2, r7
 800acc8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800accc:	3501      	adds	r5, #1
 800acce:	42ab      	cmp	r3, r5
 800acd0:	4414      	add	r4, r2
 800acd2:	d1e8      	bne.n	800aca6 <mktime+0x8a>
 800acd4:	4f8d      	ldr	r7, [pc, #564]	; (800af0c <mktime+0x2f0>)
 800acd6:	fb07 0704 	mla	r7, r7, r4, r0
 800acda:	f000 fad7 	bl	800b28c <__tz_lock>
 800acde:	f000 fad7 	bl	800b290 <_tzset_unlocked>
 800ace2:	4b8b      	ldr	r3, [pc, #556]	; (800af10 <mktime+0x2f4>)
 800ace4:	681e      	ldr	r6, [r3, #0]
 800ace6:	2e00      	cmp	r6, #0
 800ace8:	f000 810a 	beq.w	800af00 <mktime+0x2e4>
 800acec:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800acf0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	bfa8      	it	ge
 800acf8:	2301      	movge	r3, #1
 800acfa:	469a      	mov	sl, r3
 800acfc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ad00:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800ad04:	4298      	cmp	r0, r3
 800ad06:	d17c      	bne.n	800ae02 <mktime+0x1e6>
 800ad08:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 800ad0c:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800ad10:	f8d8 003c 	ldr.w	r0, [r8, #60]	; 0x3c
 800ad14:	f8d8 101c 	ldr.w	r1, [r8, #28]
 800ad18:	1ad6      	subs	r6, r2, r3
 800ad1a:	42b7      	cmp	r7, r6
 800ad1c:	eba1 0100 	sub.w	r1, r1, r0
 800ad20:	da76      	bge.n	800ae10 <mktime+0x1f4>
 800ad22:	f8d8 2000 	ldr.w	r2, [r8]
 800ad26:	2a00      	cmp	r2, #0
 800ad28:	d076      	beq.n	800ae18 <mktime+0x1fc>
 800ad2a:	428f      	cmp	r7, r1
 800ad2c:	f2c0 80e3 	blt.w	800aef6 <mktime+0x2da>
 800ad30:	42b7      	cmp	r7, r6
 800ad32:	bfac      	ite	ge
 800ad34:	2600      	movge	r6, #0
 800ad36:	2601      	movlt	r6, #1
 800ad38:	f1ba 0f00 	cmp.w	sl, #0
 800ad3c:	da72      	bge.n	800ae24 <mktime+0x208>
 800ad3e:	2e01      	cmp	r6, #1
 800ad40:	f040 80de 	bne.w	800af00 <mktime+0x2e4>
 800ad44:	f8d8 503c 	ldr.w	r5, [r8, #60]	; 0x3c
 800ad48:	2601      	movs	r6, #1
 800ad4a:	443d      	add	r5, r7
 800ad4c:	f000 fa9f 	bl	800b28e <__tz_unlock>
 800ad50:	3404      	adds	r4, #4
 800ad52:	2307      	movs	r3, #7
 800ad54:	fb94 f3f3 	sdiv	r3, r4, r3
 800ad58:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ad5c:	1ae4      	subs	r4, r4, r3
 800ad5e:	bf48      	it	mi
 800ad60:	3407      	addmi	r4, #7
 800ad62:	f8c9 6020 	str.w	r6, [r9, #32]
 800ad66:	f8c9 4018 	str.w	r4, [r9, #24]
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad70:	f240 126d 	movw	r2, #365	; 0x16d
 800ad74:	e7aa      	b.n	800accc <mktime+0xb0>
 800ad76:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800ad7a:	e7a7      	b.n	800accc <mktime+0xb0>
 800ad7c:	d01e      	beq.n	800adbc <mktime+0x1a0>
 800ad7e:	2245      	movs	r2, #69	; 0x45
 800ad80:	f240 176d 	movw	r7, #365	; 0x16d
 800ad84:	2564      	movs	r5, #100	; 0x64
 800ad86:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	dc18      	bgt.n	800adc0 <mktime+0x1a4>
 800ad8e:	079d      	lsls	r5, r3, #30
 800ad90:	d131      	bne.n	800adf6 <mktime+0x1da>
 800ad92:	2164      	movs	r1, #100	; 0x64
 800ad94:	fb93 f2f1 	sdiv	r2, r3, r1
 800ad98:	fb01 3212 	mls	r2, r1, r2, r3
 800ad9c:	bb72      	cbnz	r2, 800adfc <mktime+0x1e0>
 800ad9e:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 800ada2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800ada6:	fb95 f2f1 	sdiv	r2, r5, r1
 800adaa:	fb01 5212 	mls	r2, r1, r2, r5
 800adae:	2a00      	cmp	r2, #0
 800adb0:	f240 126d 	movw	r2, #365	; 0x16d
 800adb4:	bf08      	it	eq
 800adb6:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800adba:	1aa4      	subs	r4, r4, r2
 800adbc:	461d      	mov	r5, r3
 800adbe:	e789      	b.n	800acd4 <mktime+0xb8>
 800adc0:	0791      	lsls	r1, r2, #30
 800adc2:	d112      	bne.n	800adea <mktime+0x1ce>
 800adc4:	fb92 f1f5 	sdiv	r1, r2, r5
 800adc8:	fb05 2111 	mls	r1, r5, r1, r2
 800adcc:	b981      	cbnz	r1, 800adf0 <mktime+0x1d4>
 800adce:	f202 7e6c 	addw	lr, r2, #1900	; 0x76c
 800add2:	fb9e f1f6 	sdiv	r1, lr, r6
 800add6:	fb06 e111 	mls	r1, r6, r1, lr
 800adda:	2900      	cmp	r1, #0
 800addc:	bf14      	ite	ne
 800adde:	4639      	movne	r1, r7
 800ade0:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
 800ade4:	1a64      	subs	r4, r4, r1
 800ade6:	3a01      	subs	r2, #1
 800ade8:	e7cf      	b.n	800ad8a <mktime+0x16e>
 800adea:	f240 116d 	movw	r1, #365	; 0x16d
 800adee:	e7f9      	b.n	800ade4 <mktime+0x1c8>
 800adf0:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 800adf4:	e7f6      	b.n	800ade4 <mktime+0x1c8>
 800adf6:	f240 126d 	movw	r2, #365	; 0x16d
 800adfa:	e7de      	b.n	800adba <mktime+0x19e>
 800adfc:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800ae00:	e7db      	b.n	800adba <mktime+0x19e>
 800ae02:	f000 f99b 	bl	800b13c <__tzcalc_limits>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	f47f af7e 	bne.w	800ad08 <mktime+0xec>
 800ae0c:	4656      	mov	r6, sl
 800ae0e:	e796      	b.n	800ad3e <mktime+0x122>
 800ae10:	1a12      	subs	r2, r2, r0
 800ae12:	4297      	cmp	r7, r2
 800ae14:	dbfa      	blt.n	800ae0c <mktime+0x1f0>
 800ae16:	e784      	b.n	800ad22 <mktime+0x106>
 800ae18:	428f      	cmp	r7, r1
 800ae1a:	db89      	blt.n	800ad30 <mktime+0x114>
 800ae1c:	f1ba 0f00 	cmp.w	sl, #0
 800ae20:	db90      	blt.n	800ad44 <mktime+0x128>
 800ae22:	2601      	movs	r6, #1
 800ae24:	ea8a 0a06 	eor.w	sl, sl, r6
 800ae28:	f1ba 0f01 	cmp.w	sl, #1
 800ae2c:	d187      	bne.n	800ad3e <mktime+0x122>
 800ae2e:	1a1b      	subs	r3, r3, r0
 800ae30:	b906      	cbnz	r6, 800ae34 <mktime+0x218>
 800ae32:	425b      	negs	r3, r3
 800ae34:	f8d9 2000 	ldr.w	r2, [r9]
 800ae38:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 800ae3c:	441a      	add	r2, r3
 800ae3e:	f8c9 2000 	str.w	r2, [r9]
 800ae42:	4648      	mov	r0, r9
 800ae44:	441f      	add	r7, r3
 800ae46:	f7ff fe09 	bl	800aa5c <validate_structure>
 800ae4a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ae4e:	ebb3 030a 	subs.w	r3, r3, sl
 800ae52:	f43f af74 	beq.w	800ad3e <mktime+0x122>
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	dc21      	bgt.n	800ae9e <mktime+0x282>
 800ae5a:	1c98      	adds	r0, r3, #2
 800ae5c:	bfd8      	it	le
 800ae5e:	2301      	movle	r3, #1
 800ae60:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ae64:	441c      	add	r4, r3
 800ae66:	189b      	adds	r3, r3, r2
 800ae68:	d522      	bpl.n	800aeb0 <mktime+0x294>
 800ae6a:	1e6a      	subs	r2, r5, #1
 800ae6c:	0791      	lsls	r1, r2, #30
 800ae6e:	d119      	bne.n	800aea4 <mktime+0x288>
 800ae70:	2164      	movs	r1, #100	; 0x64
 800ae72:	fb92 f3f1 	sdiv	r3, r2, r1
 800ae76:	fb01 2313 	mls	r3, r1, r3, r2
 800ae7a:	b9b3      	cbnz	r3, 800aeaa <mktime+0x28e>
 800ae7c:	f205 756b 	addw	r5, r5, #1899	; 0x76b
 800ae80:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ae84:	fb95 f3f2 	sdiv	r3, r5, r2
 800ae88:	fb02 5513 	mls	r5, r2, r3, r5
 800ae8c:	2d00      	cmp	r5, #0
 800ae8e:	f240 136d 	movw	r3, #365	; 0x16d
 800ae92:	bf18      	it	ne
 800ae94:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800ae98:	f8c9 301c 	str.w	r3, [r9, #28]
 800ae9c:	e74f      	b.n	800ad3e <mktime+0x122>
 800ae9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aea2:	e7dd      	b.n	800ae60 <mktime+0x244>
 800aea4:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800aea8:	e7f6      	b.n	800ae98 <mktime+0x27c>
 800aeaa:	f240 136d 	movw	r3, #365	; 0x16d
 800aeae:	e7f3      	b.n	800ae98 <mktime+0x27c>
 800aeb0:	07aa      	lsls	r2, r5, #30
 800aeb2:	d117      	bne.n	800aee4 <mktime+0x2c8>
 800aeb4:	2164      	movs	r1, #100	; 0x64
 800aeb6:	fb95 f2f1 	sdiv	r2, r5, r1
 800aeba:	fb01 5212 	mls	r2, r1, r2, r5
 800aebe:	b9a2      	cbnz	r2, 800aeea <mktime+0x2ce>
 800aec0:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 800aec4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800aec8:	fb95 f2f1 	sdiv	r2, r5, r1
 800aecc:	fb01 5512 	mls	r5, r1, r2, r5
 800aed0:	2d00      	cmp	r5, #0
 800aed2:	f240 126d 	movw	r2, #365	; 0x16d
 800aed6:	bf08      	it	eq
 800aed8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800aedc:	429a      	cmp	r2, r3
 800aede:	bfd8      	it	le
 800aee0:	1a9b      	suble	r3, r3, r2
 800aee2:	e7d9      	b.n	800ae98 <mktime+0x27c>
 800aee4:	f240 126d 	movw	r2, #365	; 0x16d
 800aee8:	e7f8      	b.n	800aedc <mktime+0x2c0>
 800aeea:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800aeee:	e7f5      	b.n	800aedc <mktime+0x2c0>
 800aef0:	f04f 35ff 	mov.w	r5, #4294967295
 800aef4:	e739      	b.n	800ad6a <mktime+0x14e>
 800aef6:	f1ba 0f00 	cmp.w	sl, #0
 800aefa:	f04f 0600 	mov.w	r6, #0
 800aefe:	da91      	bge.n	800ae24 <mktime+0x208>
 800af00:	f8d8 5020 	ldr.w	r5, [r8, #32]
 800af04:	443d      	add	r5, r7
 800af06:	e721      	b.n	800ad4c <mktime+0x130>
 800af08:	0800ca50 	.word	0x0800ca50
 800af0c:	00015180 	.word	0x00015180
 800af10:	2000068c 	.word	0x2000068c

0800af14 <_free_r>:
 800af14:	b538      	push	{r3, r4, r5, lr}
 800af16:	4605      	mov	r5, r0
 800af18:	2900      	cmp	r1, #0
 800af1a:	d045      	beq.n	800afa8 <_free_r+0x94>
 800af1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af20:	1f0c      	subs	r4, r1, #4
 800af22:	2b00      	cmp	r3, #0
 800af24:	bfb8      	it	lt
 800af26:	18e4      	addlt	r4, r4, r3
 800af28:	f000 fb9a 	bl	800b660 <__malloc_lock>
 800af2c:	4a1f      	ldr	r2, [pc, #124]	; (800afac <_free_r+0x98>)
 800af2e:	6813      	ldr	r3, [r2, #0]
 800af30:	4610      	mov	r0, r2
 800af32:	b933      	cbnz	r3, 800af42 <_free_r+0x2e>
 800af34:	6063      	str	r3, [r4, #4]
 800af36:	6014      	str	r4, [r2, #0]
 800af38:	4628      	mov	r0, r5
 800af3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af3e:	f000 bb90 	b.w	800b662 <__malloc_unlock>
 800af42:	42a3      	cmp	r3, r4
 800af44:	d90c      	bls.n	800af60 <_free_r+0x4c>
 800af46:	6821      	ldr	r1, [r4, #0]
 800af48:	1862      	adds	r2, r4, r1
 800af4a:	4293      	cmp	r3, r2
 800af4c:	bf04      	itt	eq
 800af4e:	681a      	ldreq	r2, [r3, #0]
 800af50:	685b      	ldreq	r3, [r3, #4]
 800af52:	6063      	str	r3, [r4, #4]
 800af54:	bf04      	itt	eq
 800af56:	1852      	addeq	r2, r2, r1
 800af58:	6022      	streq	r2, [r4, #0]
 800af5a:	6004      	str	r4, [r0, #0]
 800af5c:	e7ec      	b.n	800af38 <_free_r+0x24>
 800af5e:	4613      	mov	r3, r2
 800af60:	685a      	ldr	r2, [r3, #4]
 800af62:	b10a      	cbz	r2, 800af68 <_free_r+0x54>
 800af64:	42a2      	cmp	r2, r4
 800af66:	d9fa      	bls.n	800af5e <_free_r+0x4a>
 800af68:	6819      	ldr	r1, [r3, #0]
 800af6a:	1858      	adds	r0, r3, r1
 800af6c:	42a0      	cmp	r0, r4
 800af6e:	d10b      	bne.n	800af88 <_free_r+0x74>
 800af70:	6820      	ldr	r0, [r4, #0]
 800af72:	4401      	add	r1, r0
 800af74:	1858      	adds	r0, r3, r1
 800af76:	4282      	cmp	r2, r0
 800af78:	6019      	str	r1, [r3, #0]
 800af7a:	d1dd      	bne.n	800af38 <_free_r+0x24>
 800af7c:	6810      	ldr	r0, [r2, #0]
 800af7e:	6852      	ldr	r2, [r2, #4]
 800af80:	605a      	str	r2, [r3, #4]
 800af82:	4401      	add	r1, r0
 800af84:	6019      	str	r1, [r3, #0]
 800af86:	e7d7      	b.n	800af38 <_free_r+0x24>
 800af88:	d902      	bls.n	800af90 <_free_r+0x7c>
 800af8a:	230c      	movs	r3, #12
 800af8c:	602b      	str	r3, [r5, #0]
 800af8e:	e7d3      	b.n	800af38 <_free_r+0x24>
 800af90:	6820      	ldr	r0, [r4, #0]
 800af92:	1821      	adds	r1, r4, r0
 800af94:	428a      	cmp	r2, r1
 800af96:	bf04      	itt	eq
 800af98:	6811      	ldreq	r1, [r2, #0]
 800af9a:	6852      	ldreq	r2, [r2, #4]
 800af9c:	6062      	str	r2, [r4, #4]
 800af9e:	bf04      	itt	eq
 800afa0:	1809      	addeq	r1, r1, r0
 800afa2:	6021      	streq	r1, [r4, #0]
 800afa4:	605c      	str	r4, [r3, #4]
 800afa6:	e7c7      	b.n	800af38 <_free_r+0x24>
 800afa8:	bd38      	pop	{r3, r4, r5, pc}
 800afaa:	bf00      	nop
 800afac:	20000668 	.word	0x20000668

0800afb0 <_malloc_r>:
 800afb0:	b570      	push	{r4, r5, r6, lr}
 800afb2:	1ccd      	adds	r5, r1, #3
 800afb4:	f025 0503 	bic.w	r5, r5, #3
 800afb8:	3508      	adds	r5, #8
 800afba:	2d0c      	cmp	r5, #12
 800afbc:	bf38      	it	cc
 800afbe:	250c      	movcc	r5, #12
 800afc0:	2d00      	cmp	r5, #0
 800afc2:	4606      	mov	r6, r0
 800afc4:	db01      	blt.n	800afca <_malloc_r+0x1a>
 800afc6:	42a9      	cmp	r1, r5
 800afc8:	d903      	bls.n	800afd2 <_malloc_r+0x22>
 800afca:	230c      	movs	r3, #12
 800afcc:	6033      	str	r3, [r6, #0]
 800afce:	2000      	movs	r0, #0
 800afd0:	bd70      	pop	{r4, r5, r6, pc}
 800afd2:	f000 fb45 	bl	800b660 <__malloc_lock>
 800afd6:	4a23      	ldr	r2, [pc, #140]	; (800b064 <_malloc_r+0xb4>)
 800afd8:	6814      	ldr	r4, [r2, #0]
 800afda:	4621      	mov	r1, r4
 800afdc:	b991      	cbnz	r1, 800b004 <_malloc_r+0x54>
 800afde:	4c22      	ldr	r4, [pc, #136]	; (800b068 <_malloc_r+0xb8>)
 800afe0:	6823      	ldr	r3, [r4, #0]
 800afe2:	b91b      	cbnz	r3, 800afec <_malloc_r+0x3c>
 800afe4:	4630      	mov	r0, r6
 800afe6:	f000 f841 	bl	800b06c <_sbrk_r>
 800afea:	6020      	str	r0, [r4, #0]
 800afec:	4629      	mov	r1, r5
 800afee:	4630      	mov	r0, r6
 800aff0:	f000 f83c 	bl	800b06c <_sbrk_r>
 800aff4:	1c43      	adds	r3, r0, #1
 800aff6:	d126      	bne.n	800b046 <_malloc_r+0x96>
 800aff8:	230c      	movs	r3, #12
 800affa:	6033      	str	r3, [r6, #0]
 800affc:	4630      	mov	r0, r6
 800affe:	f000 fb30 	bl	800b662 <__malloc_unlock>
 800b002:	e7e4      	b.n	800afce <_malloc_r+0x1e>
 800b004:	680b      	ldr	r3, [r1, #0]
 800b006:	1b5b      	subs	r3, r3, r5
 800b008:	d41a      	bmi.n	800b040 <_malloc_r+0x90>
 800b00a:	2b0b      	cmp	r3, #11
 800b00c:	d90f      	bls.n	800b02e <_malloc_r+0x7e>
 800b00e:	600b      	str	r3, [r1, #0]
 800b010:	50cd      	str	r5, [r1, r3]
 800b012:	18cc      	adds	r4, r1, r3
 800b014:	4630      	mov	r0, r6
 800b016:	f000 fb24 	bl	800b662 <__malloc_unlock>
 800b01a:	f104 000b 	add.w	r0, r4, #11
 800b01e:	1d23      	adds	r3, r4, #4
 800b020:	f020 0007 	bic.w	r0, r0, #7
 800b024:	1ac3      	subs	r3, r0, r3
 800b026:	d01b      	beq.n	800b060 <_malloc_r+0xb0>
 800b028:	425a      	negs	r2, r3
 800b02a:	50e2      	str	r2, [r4, r3]
 800b02c:	bd70      	pop	{r4, r5, r6, pc}
 800b02e:	428c      	cmp	r4, r1
 800b030:	bf0d      	iteet	eq
 800b032:	6863      	ldreq	r3, [r4, #4]
 800b034:	684b      	ldrne	r3, [r1, #4]
 800b036:	6063      	strne	r3, [r4, #4]
 800b038:	6013      	streq	r3, [r2, #0]
 800b03a:	bf18      	it	ne
 800b03c:	460c      	movne	r4, r1
 800b03e:	e7e9      	b.n	800b014 <_malloc_r+0x64>
 800b040:	460c      	mov	r4, r1
 800b042:	6849      	ldr	r1, [r1, #4]
 800b044:	e7ca      	b.n	800afdc <_malloc_r+0x2c>
 800b046:	1cc4      	adds	r4, r0, #3
 800b048:	f024 0403 	bic.w	r4, r4, #3
 800b04c:	42a0      	cmp	r0, r4
 800b04e:	d005      	beq.n	800b05c <_malloc_r+0xac>
 800b050:	1a21      	subs	r1, r4, r0
 800b052:	4630      	mov	r0, r6
 800b054:	f000 f80a 	bl	800b06c <_sbrk_r>
 800b058:	3001      	adds	r0, #1
 800b05a:	d0cd      	beq.n	800aff8 <_malloc_r+0x48>
 800b05c:	6025      	str	r5, [r4, #0]
 800b05e:	e7d9      	b.n	800b014 <_malloc_r+0x64>
 800b060:	bd70      	pop	{r4, r5, r6, pc}
 800b062:	bf00      	nop
 800b064:	20000668 	.word	0x20000668
 800b068:	2000066c 	.word	0x2000066c

0800b06c <_sbrk_r>:
 800b06c:	b538      	push	{r3, r4, r5, lr}
 800b06e:	4c06      	ldr	r4, [pc, #24]	; (800b088 <_sbrk_r+0x1c>)
 800b070:	2300      	movs	r3, #0
 800b072:	4605      	mov	r5, r0
 800b074:	4608      	mov	r0, r1
 800b076:	6023      	str	r3, [r4, #0]
 800b078:	f001 fb10 	bl	800c69c <_sbrk>
 800b07c:	1c43      	adds	r3, r0, #1
 800b07e:	d102      	bne.n	800b086 <_sbrk_r+0x1a>
 800b080:	6823      	ldr	r3, [r4, #0]
 800b082:	b103      	cbz	r3, 800b086 <_sbrk_r+0x1a>
 800b084:	602b      	str	r3, [r5, #0]
 800b086:	bd38      	pop	{r3, r4, r5, pc}
 800b088:	2000ae04 	.word	0x2000ae04

0800b08c <siprintf>:
 800b08c:	b40e      	push	{r1, r2, r3}
 800b08e:	b500      	push	{lr}
 800b090:	b09c      	sub	sp, #112	; 0x70
 800b092:	f44f 7102 	mov.w	r1, #520	; 0x208
 800b096:	ab1d      	add	r3, sp, #116	; 0x74
 800b098:	f8ad 1014 	strh.w	r1, [sp, #20]
 800b09c:	9002      	str	r0, [sp, #8]
 800b09e:	9006      	str	r0, [sp, #24]
 800b0a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b0a4:	480a      	ldr	r0, [pc, #40]	; (800b0d0 <siprintf+0x44>)
 800b0a6:	9104      	str	r1, [sp, #16]
 800b0a8:	9107      	str	r1, [sp, #28]
 800b0aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b0ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0b2:	f8ad 1016 	strh.w	r1, [sp, #22]
 800b0b6:	6800      	ldr	r0, [r0, #0]
 800b0b8:	9301      	str	r3, [sp, #4]
 800b0ba:	a902      	add	r1, sp, #8
 800b0bc:	f000 fb2e 	bl	800b71c <_svfiprintf_r>
 800b0c0:	9b02      	ldr	r3, [sp, #8]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	701a      	strb	r2, [r3, #0]
 800b0c6:	b01c      	add	sp, #112	; 0x70
 800b0c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0cc:	b003      	add	sp, #12
 800b0ce:	4770      	bx	lr
 800b0d0:	20000314 	.word	0x20000314

0800b0d4 <siscanf>:
 800b0d4:	b40e      	push	{r1, r2, r3}
 800b0d6:	b530      	push	{r4, r5, lr}
 800b0d8:	b09c      	sub	sp, #112	; 0x70
 800b0da:	ac1f      	add	r4, sp, #124	; 0x7c
 800b0dc:	f44f 7201 	mov.w	r2, #516	; 0x204
 800b0e0:	f854 5b04 	ldr.w	r5, [r4], #4
 800b0e4:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b0e8:	9002      	str	r0, [sp, #8]
 800b0ea:	9006      	str	r0, [sp, #24]
 800b0ec:	f7f5 f870 	bl	80001d0 <strlen>
 800b0f0:	4b0b      	ldr	r3, [pc, #44]	; (800b120 <siscanf+0x4c>)
 800b0f2:	9003      	str	r0, [sp, #12]
 800b0f4:	9007      	str	r0, [sp, #28]
 800b0f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0f8:	480a      	ldr	r0, [pc, #40]	; (800b124 <siscanf+0x50>)
 800b0fa:	9401      	str	r4, [sp, #4]
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800b100:	9314      	str	r3, [sp, #80]	; 0x50
 800b102:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b106:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b10a:	462a      	mov	r2, r5
 800b10c:	4623      	mov	r3, r4
 800b10e:	a902      	add	r1, sp, #8
 800b110:	6800      	ldr	r0, [r0, #0]
 800b112:	f000 fc51 	bl	800b9b8 <__ssvfiscanf_r>
 800b116:	b01c      	add	sp, #112	; 0x70
 800b118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b11c:	b003      	add	sp, #12
 800b11e:	4770      	bx	lr
 800b120:	0800b129 	.word	0x0800b129
 800b124:	20000314 	.word	0x20000314

0800b128 <__seofread>:
 800b128:	2000      	movs	r0, #0
 800b12a:	4770      	bx	lr

0800b12c <strcpy>:
 800b12c:	4603      	mov	r3, r0
 800b12e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b132:	f803 2b01 	strb.w	r2, [r3], #1
 800b136:	2a00      	cmp	r2, #0
 800b138:	d1f9      	bne.n	800b12e <strcpy+0x2>
 800b13a:	4770      	bx	lr

0800b13c <__tzcalc_limits>:
 800b13c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b140:	4604      	mov	r4, r0
 800b142:	f000 fa89 	bl	800b658 <__gettzinfo>
 800b146:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800b14a:	429c      	cmp	r4, r3
 800b14c:	f340 8098 	ble.w	800b280 <__tzcalc_limits+0x144>
 800b150:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 800b154:	18e3      	adds	r3, r4, r3
 800b156:	109b      	asrs	r3, r3, #2
 800b158:	f240 126d 	movw	r2, #365	; 0x16d
 800b15c:	f2a4 75b2 	subw	r5, r4, #1970	; 0x7b2
 800b160:	fb02 3505 	mla	r5, r2, r5, r3
 800b164:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800b168:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
 800b16c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b170:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 800b174:	441d      	add	r5, r3
 800b176:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800b17a:	18a2      	adds	r2, r4, r2
 800b17c:	fb94 f7f3 	sdiv	r7, r4, r3
 800b180:	fb92 f2f3 	sdiv	r2, r2, r3
 800b184:	fb03 4717 	mls	r7, r3, r7, r4
 800b188:	f100 0338 	add.w	r3, r0, #56	; 0x38
 800b18c:	4415      	add	r5, r2
 800b18e:	fab7 fe87 	clz	lr, r7
 800b192:	2264      	movs	r2, #100	; 0x64
 800b194:	9301      	str	r3, [sp, #4]
 800b196:	f004 0303 	and.w	r3, r4, #3
 800b19a:	fb94 f6f2 	sdiv	r6, r4, r2
 800b19e:	6044      	str	r4, [r0, #4]
 800b1a0:	fb02 4616 	mls	r6, r2, r6, r4
 800b1a4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800b1a8:	4601      	mov	r1, r0
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
 800b1b0:	7a0b      	ldrb	r3, [r1, #8]
 800b1b2:	2b4a      	cmp	r3, #74	; 0x4a
 800b1b4:	d123      	bne.n	800b1fe <__tzcalc_limits+0xc2>
 800b1b6:	694c      	ldr	r4, [r1, #20]
 800b1b8:	9a00      	ldr	r2, [sp, #0]
 800b1ba:	192b      	adds	r3, r5, r4
 800b1bc:	b902      	cbnz	r2, 800b1c0 <__tzcalc_limits+0x84>
 800b1be:	b906      	cbnz	r6, 800b1c2 <__tzcalc_limits+0x86>
 800b1c0:	b9df      	cbnz	r7, 800b1fa <__tzcalc_limits+0xbe>
 800b1c2:	2c3b      	cmp	r4, #59	; 0x3b
 800b1c4:	bfd4      	ite	le
 800b1c6:	2400      	movle	r4, #0
 800b1c8:	2401      	movgt	r4, #1
 800b1ca:	441c      	add	r4, r3
 800b1cc:	3c01      	subs	r4, #1
 800b1ce:	4b2d      	ldr	r3, [pc, #180]	; (800b284 <__tzcalc_limits+0x148>)
 800b1d0:	698a      	ldr	r2, [r1, #24]
 800b1d2:	fb03 2404 	mla	r4, r3, r4, r2
 800b1d6:	6a0b      	ldr	r3, [r1, #32]
 800b1d8:	441c      	add	r4, r3
 800b1da:	f841 4f1c 	str.w	r4, [r1, #28]!
 800b1de:	9b01      	ldr	r3, [sp, #4]
 800b1e0:	428b      	cmp	r3, r1
 800b1e2:	d1e5      	bne.n	800b1b0 <__tzcalc_limits+0x74>
 800b1e4:	69c3      	ldr	r3, [r0, #28]
 800b1e6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	bfac      	ite	ge
 800b1ec:	2300      	movge	r3, #0
 800b1ee:	2301      	movlt	r3, #1
 800b1f0:	6003      	str	r3, [r0, #0]
 800b1f2:	2001      	movs	r0, #1
 800b1f4:	b003      	add	sp, #12
 800b1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1fa:	2400      	movs	r4, #0
 800b1fc:	e7e5      	b.n	800b1ca <__tzcalc_limits+0x8e>
 800b1fe:	2b44      	cmp	r3, #68	; 0x44
 800b200:	d102      	bne.n	800b208 <__tzcalc_limits+0xcc>
 800b202:	694b      	ldr	r3, [r1, #20]
 800b204:	18ec      	adds	r4, r5, r3
 800b206:	e7e2      	b.n	800b1ce <__tzcalc_limits+0x92>
 800b208:	9b00      	ldr	r3, [sp, #0]
 800b20a:	bb7b      	cbnz	r3, 800b26c <__tzcalc_limits+0x130>
 800b20c:	2e00      	cmp	r6, #0
 800b20e:	bf0c      	ite	eq
 800b210:	46f0      	moveq	r8, lr
 800b212:	f04f 0801 	movne.w	r8, #1
 800b216:	4b1c      	ldr	r3, [pc, #112]	; (800b288 <__tzcalc_limits+0x14c>)
 800b218:	68cc      	ldr	r4, [r1, #12]
 800b21a:	2230      	movs	r2, #48	; 0x30
 800b21c:	fb02 3808 	mla	r8, r2, r8, r3
 800b220:	f1a8 0a04 	sub.w	sl, r8, #4
 800b224:	462b      	mov	r3, r5
 800b226:	f04f 0901 	mov.w	r9, #1
 800b22a:	45a1      	cmp	r9, r4
 800b22c:	db20      	blt.n	800b270 <__tzcalc_limits+0x134>
 800b22e:	2c01      	cmp	r4, #1
 800b230:	bfb8      	it	lt
 800b232:	2401      	movlt	r4, #1
 800b234:	46a1      	mov	r9, r4
 800b236:	f103 0b04 	add.w	fp, r3, #4
 800b23a:	2207      	movs	r2, #7
 800b23c:	694c      	ldr	r4, [r1, #20]
 800b23e:	fb9b faf2 	sdiv	sl, fp, r2
 800b242:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800b246:	ebab 0a0a 	sub.w	sl, fp, sl
 800b24a:	ebb4 0a0a 	subs.w	sl, r4, sl
 800b24e:	690c      	ldr	r4, [r1, #16]
 800b250:	44e1      	add	r9, ip
 800b252:	f104 34ff 	add.w	r4, r4, #4294967295
 800b256:	bf48      	it	mi
 800b258:	4492      	addmi	sl, r2
 800b25a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800b25e:	f858 8029 	ldr.w	r8, [r8, r9, lsl #2]
 800b262:	4454      	add	r4, sl
 800b264:	4544      	cmp	r4, r8
 800b266:	da09      	bge.n	800b27c <__tzcalc_limits+0x140>
 800b268:	441c      	add	r4, r3
 800b26a:	e7b0      	b.n	800b1ce <__tzcalc_limits+0x92>
 800b26c:	46f0      	mov	r8, lr
 800b26e:	e7d2      	b.n	800b216 <__tzcalc_limits+0xda>
 800b270:	f85a bf04 	ldr.w	fp, [sl, #4]!
 800b274:	f109 0901 	add.w	r9, r9, #1
 800b278:	445b      	add	r3, fp
 800b27a:	e7d6      	b.n	800b22a <__tzcalc_limits+0xee>
 800b27c:	3c07      	subs	r4, #7
 800b27e:	e7f1      	b.n	800b264 <__tzcalc_limits+0x128>
 800b280:	2000      	movs	r0, #0
 800b282:	e7b7      	b.n	800b1f4 <__tzcalc_limits+0xb8>
 800b284:	00015180 	.word	0x00015180
 800b288:	0800cabc 	.word	0x0800cabc

0800b28c <__tz_lock>:
 800b28c:	4770      	bx	lr

0800b28e <__tz_unlock>:
 800b28e:	4770      	bx	lr

0800b290 <_tzset_unlocked>:
 800b290:	4b01      	ldr	r3, [pc, #4]	; (800b298 <_tzset_unlocked+0x8>)
 800b292:	6818      	ldr	r0, [r3, #0]
 800b294:	f000 b802 	b.w	800b29c <_tzset_unlocked_r>
 800b298:	20000314 	.word	0x20000314

0800b29c <_tzset_unlocked_r>:
 800b29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a0:	b08d      	sub	sp, #52	; 0x34
 800b2a2:	4607      	mov	r7, r0
 800b2a4:	f000 f9d8 	bl	800b658 <__gettzinfo>
 800b2a8:	49b1      	ldr	r1, [pc, #708]	; (800b570 <_tzset_unlocked_r+0x2d4>)
 800b2aa:	4eb2      	ldr	r6, [pc, #712]	; (800b574 <_tzset_unlocked_r+0x2d8>)
 800b2ac:	4605      	mov	r5, r0
 800b2ae:	4638      	mov	r0, r7
 800b2b0:	f000 f9ca 	bl	800b648 <_getenv_r>
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	b970      	cbnz	r0, 800b2d6 <_tzset_unlocked_r+0x3a>
 800b2b8:	4baf      	ldr	r3, [pc, #700]	; (800b578 <_tzset_unlocked_r+0x2dc>)
 800b2ba:	4ab0      	ldr	r2, [pc, #704]	; (800b57c <_tzset_unlocked_r+0x2e0>)
 800b2bc:	6018      	str	r0, [r3, #0]
 800b2be:	4bb0      	ldr	r3, [pc, #704]	; (800b580 <_tzset_unlocked_r+0x2e4>)
 800b2c0:	6018      	str	r0, [r3, #0]
 800b2c2:	4bb0      	ldr	r3, [pc, #704]	; (800b584 <_tzset_unlocked_r+0x2e8>)
 800b2c4:	6830      	ldr	r0, [r6, #0]
 800b2c6:	601a      	str	r2, [r3, #0]
 800b2c8:	605a      	str	r2, [r3, #4]
 800b2ca:	f7ff fbab 	bl	800aa24 <free>
 800b2ce:	6034      	str	r4, [r6, #0]
 800b2d0:	b00d      	add	sp, #52	; 0x34
 800b2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2d6:	6831      	ldr	r1, [r6, #0]
 800b2d8:	2900      	cmp	r1, #0
 800b2da:	d160      	bne.n	800b39e <_tzset_unlocked_r+0x102>
 800b2dc:	6830      	ldr	r0, [r6, #0]
 800b2de:	f7ff fba1 	bl	800aa24 <free>
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	f7f4 ff74 	bl	80001d0 <strlen>
 800b2e8:	1c41      	adds	r1, r0, #1
 800b2ea:	4638      	mov	r0, r7
 800b2ec:	f7ff fe60 	bl	800afb0 <_malloc_r>
 800b2f0:	6030      	str	r0, [r6, #0]
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d158      	bne.n	800b3a8 <_tzset_unlocked_r+0x10c>
 800b2f6:	7823      	ldrb	r3, [r4, #0]
 800b2f8:	4aa3      	ldr	r2, [pc, #652]	; (800b588 <_tzset_unlocked_r+0x2ec>)
 800b2fa:	49a4      	ldr	r1, [pc, #656]	; (800b58c <_tzset_unlocked_r+0x2f0>)
 800b2fc:	2b3a      	cmp	r3, #58	; 0x3a
 800b2fe:	bf08      	it	eq
 800b300:	3401      	addeq	r4, #1
 800b302:	ae0a      	add	r6, sp, #40	; 0x28
 800b304:	4633      	mov	r3, r6
 800b306:	4620      	mov	r0, r4
 800b308:	f7ff fee4 	bl	800b0d4 <siscanf>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	dddf      	ble.n	800b2d0 <_tzset_unlocked_r+0x34>
 800b310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b312:	18e7      	adds	r7, r4, r3
 800b314:	5ce3      	ldrb	r3, [r4, r3]
 800b316:	2b2d      	cmp	r3, #45	; 0x2d
 800b318:	d14a      	bne.n	800b3b0 <_tzset_unlocked_r+0x114>
 800b31a:	3701      	adds	r7, #1
 800b31c:	f04f 34ff 	mov.w	r4, #4294967295
 800b320:	f10d 0a20 	add.w	sl, sp, #32
 800b324:	f10d 0b1e 	add.w	fp, sp, #30
 800b328:	f04f 0800 	mov.w	r8, #0
 800b32c:	9603      	str	r6, [sp, #12]
 800b32e:	f8cd a008 	str.w	sl, [sp, #8]
 800b332:	9601      	str	r6, [sp, #4]
 800b334:	f8cd b000 	str.w	fp, [sp]
 800b338:	4633      	mov	r3, r6
 800b33a:	aa07      	add	r2, sp, #28
 800b33c:	4994      	ldr	r1, [pc, #592]	; (800b590 <_tzset_unlocked_r+0x2f4>)
 800b33e:	f8ad 801e 	strh.w	r8, [sp, #30]
 800b342:	4638      	mov	r0, r7
 800b344:	f8ad 8020 	strh.w	r8, [sp, #32]
 800b348:	f7ff fec4 	bl	800b0d4 <siscanf>
 800b34c:	4540      	cmp	r0, r8
 800b34e:	ddbf      	ble.n	800b2d0 <_tzset_unlocked_r+0x34>
 800b350:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b354:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800b358:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800b59c <_tzset_unlocked_r+0x300>
 800b35c:	213c      	movs	r1, #60	; 0x3c
 800b35e:	fb01 2203 	mla	r2, r1, r3, r2
 800b362:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800b366:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b36a:	fb01 2303 	mla	r3, r1, r3, r2
 800b36e:	435c      	muls	r4, r3
 800b370:	622c      	str	r4, [r5, #32]
 800b372:	4c84      	ldr	r4, [pc, #528]	; (800b584 <_tzset_unlocked_r+0x2e8>)
 800b374:	4b84      	ldr	r3, [pc, #528]	; (800b588 <_tzset_unlocked_r+0x2ec>)
 800b376:	6023      	str	r3, [r4, #0]
 800b378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b37a:	4984      	ldr	r1, [pc, #528]	; (800b58c <_tzset_unlocked_r+0x2f0>)
 800b37c:	441f      	add	r7, r3
 800b37e:	464a      	mov	r2, r9
 800b380:	4633      	mov	r3, r6
 800b382:	4638      	mov	r0, r7
 800b384:	f7ff fea6 	bl	800b0d4 <siscanf>
 800b388:	4540      	cmp	r0, r8
 800b38a:	dc16      	bgt.n	800b3ba <_tzset_unlocked_r+0x11e>
 800b38c:	6823      	ldr	r3, [r4, #0]
 800b38e:	6063      	str	r3, [r4, #4]
 800b390:	4b79      	ldr	r3, [pc, #484]	; (800b578 <_tzset_unlocked_r+0x2dc>)
 800b392:	6a2a      	ldr	r2, [r5, #32]
 800b394:	601a      	str	r2, [r3, #0]
 800b396:	4b7a      	ldr	r3, [pc, #488]	; (800b580 <_tzset_unlocked_r+0x2e4>)
 800b398:	f8c3 8000 	str.w	r8, [r3]
 800b39c:	e798      	b.n	800b2d0 <_tzset_unlocked_r+0x34>
 800b39e:	f7f4 ff1f 	bl	80001e0 <strcmp>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	d094      	beq.n	800b2d0 <_tzset_unlocked_r+0x34>
 800b3a6:	e799      	b.n	800b2dc <_tzset_unlocked_r+0x40>
 800b3a8:	4621      	mov	r1, r4
 800b3aa:	f7ff febf 	bl	800b12c <strcpy>
 800b3ae:	e7a2      	b.n	800b2f6 <_tzset_unlocked_r+0x5a>
 800b3b0:	2b2b      	cmp	r3, #43	; 0x2b
 800b3b2:	bf08      	it	eq
 800b3b4:	3701      	addeq	r7, #1
 800b3b6:	2401      	movs	r4, #1
 800b3b8:	e7b2      	b.n	800b320 <_tzset_unlocked_r+0x84>
 800b3ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3bc:	f8c4 9004 	str.w	r9, [r4, #4]
 800b3c0:	18fc      	adds	r4, r7, r3
 800b3c2:	5cfb      	ldrb	r3, [r7, r3]
 800b3c4:	2b2d      	cmp	r3, #45	; 0x2d
 800b3c6:	f040 8092 	bne.w	800b4ee <_tzset_unlocked_r+0x252>
 800b3ca:	3401      	adds	r4, #1
 800b3cc:	f04f 37ff 	mov.w	r7, #4294967295
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b3d6:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b3da:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b3de:	930a      	str	r3, [sp, #40]	; 0x28
 800b3e0:	9603      	str	r6, [sp, #12]
 800b3e2:	f8cd a008 	str.w	sl, [sp, #8]
 800b3e6:	9601      	str	r6, [sp, #4]
 800b3e8:	f8cd b000 	str.w	fp, [sp]
 800b3ec:	4633      	mov	r3, r6
 800b3ee:	aa07      	add	r2, sp, #28
 800b3f0:	4967      	ldr	r1, [pc, #412]	; (800b590 <_tzset_unlocked_r+0x2f4>)
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f7ff fe6e 	bl	800b0d4 <siscanf>
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	dc7d      	bgt.n	800b4f8 <_tzset_unlocked_r+0x25c>
 800b3fc:	6a2b      	ldr	r3, [r5, #32]
 800b3fe:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800b402:	63eb      	str	r3, [r5, #60]	; 0x3c
 800b404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b406:	462f      	mov	r7, r5
 800b408:	441c      	add	r4, r3
 800b40a:	f04f 0900 	mov.w	r9, #0
 800b40e:	7823      	ldrb	r3, [r4, #0]
 800b410:	2b2c      	cmp	r3, #44	; 0x2c
 800b412:	bf08      	it	eq
 800b414:	3401      	addeq	r4, #1
 800b416:	f894 8000 	ldrb.w	r8, [r4]
 800b41a:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800b41e:	d17b      	bne.n	800b518 <_tzset_unlocked_r+0x27c>
 800b420:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800b424:	9302      	str	r3, [sp, #8]
 800b426:	ab09      	add	r3, sp, #36	; 0x24
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	9603      	str	r6, [sp, #12]
 800b42c:	9601      	str	r6, [sp, #4]
 800b42e:	4633      	mov	r3, r6
 800b430:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800b434:	4957      	ldr	r1, [pc, #348]	; (800b594 <_tzset_unlocked_r+0x2f8>)
 800b436:	4620      	mov	r0, r4
 800b438:	f7ff fe4c 	bl	800b0d4 <siscanf>
 800b43c:	2803      	cmp	r0, #3
 800b43e:	f47f af47 	bne.w	800b2d0 <_tzset_unlocked_r+0x34>
 800b442:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800b446:	1e4b      	subs	r3, r1, #1
 800b448:	2b0b      	cmp	r3, #11
 800b44a:	f63f af41 	bhi.w	800b2d0 <_tzset_unlocked_r+0x34>
 800b44e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800b452:	1e53      	subs	r3, r2, #1
 800b454:	2b04      	cmp	r3, #4
 800b456:	f63f af3b 	bhi.w	800b2d0 <_tzset_unlocked_r+0x34>
 800b45a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800b45e:	2b06      	cmp	r3, #6
 800b460:	f63f af36 	bhi.w	800b2d0 <_tzset_unlocked_r+0x34>
 800b464:	f887 8008 	strb.w	r8, [r7, #8]
 800b468:	60f9      	str	r1, [r7, #12]
 800b46a:	613a      	str	r2, [r7, #16]
 800b46c:	617b      	str	r3, [r7, #20]
 800b46e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b470:	eb04 0803 	add.w	r8, r4, r3
 800b474:	2302      	movs	r3, #2
 800b476:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b47a:	2300      	movs	r3, #0
 800b47c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b480:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b484:	930a      	str	r3, [sp, #40]	; 0x28
 800b486:	f898 3000 	ldrb.w	r3, [r8]
 800b48a:	2b2f      	cmp	r3, #47	; 0x2f
 800b48c:	d10b      	bne.n	800b4a6 <_tzset_unlocked_r+0x20a>
 800b48e:	9603      	str	r6, [sp, #12]
 800b490:	f8cd a008 	str.w	sl, [sp, #8]
 800b494:	9601      	str	r6, [sp, #4]
 800b496:	f8cd b000 	str.w	fp, [sp]
 800b49a:	4633      	mov	r3, r6
 800b49c:	aa07      	add	r2, sp, #28
 800b49e:	493e      	ldr	r1, [pc, #248]	; (800b598 <_tzset_unlocked_r+0x2fc>)
 800b4a0:	4640      	mov	r0, r8
 800b4a2:	f7ff fe17 	bl	800b0d4 <siscanf>
 800b4a6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b4aa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800b4ae:	213c      	movs	r1, #60	; 0x3c
 800b4b0:	fb01 2203 	mla	r2, r1, r3, r2
 800b4b4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800b4b8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b4bc:	fb01 2303 	mla	r3, r1, r3, r2
 800b4c0:	61bb      	str	r3, [r7, #24]
 800b4c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b4c4:	f109 0901 	add.w	r9, r9, #1
 800b4c8:	f1b9 0f02 	cmp.w	r9, #2
 800b4cc:	4444      	add	r4, r8
 800b4ce:	f107 071c 	add.w	r7, r7, #28
 800b4d2:	d19c      	bne.n	800b40e <_tzset_unlocked_r+0x172>
 800b4d4:	6868      	ldr	r0, [r5, #4]
 800b4d6:	f7ff fe31 	bl	800b13c <__tzcalc_limits>
 800b4da:	4b27      	ldr	r3, [pc, #156]	; (800b578 <_tzset_unlocked_r+0x2dc>)
 800b4dc:	6a2a      	ldr	r2, [r5, #32]
 800b4de:	601a      	str	r2, [r3, #0]
 800b4e0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800b4e2:	1a9b      	subs	r3, r3, r2
 800b4e4:	4a26      	ldr	r2, [pc, #152]	; (800b580 <_tzset_unlocked_r+0x2e4>)
 800b4e6:	bf18      	it	ne
 800b4e8:	2301      	movne	r3, #1
 800b4ea:	6013      	str	r3, [r2, #0]
 800b4ec:	e6f0      	b.n	800b2d0 <_tzset_unlocked_r+0x34>
 800b4ee:	2b2b      	cmp	r3, #43	; 0x2b
 800b4f0:	bf08      	it	eq
 800b4f2:	3401      	addeq	r4, #1
 800b4f4:	2701      	movs	r7, #1
 800b4f6:	e76b      	b.n	800b3d0 <_tzset_unlocked_r+0x134>
 800b4f8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800b4fc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800b500:	213c      	movs	r1, #60	; 0x3c
 800b502:	fb01 2203 	mla	r2, r1, r3, r2
 800b506:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800b50a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b50e:	fb01 2303 	mla	r3, r1, r3, r2
 800b512:	435f      	muls	r7, r3
 800b514:	63ef      	str	r7, [r5, #60]	; 0x3c
 800b516:	e775      	b.n	800b404 <_tzset_unlocked_r+0x168>
 800b518:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800b51c:	bf06      	itte	eq
 800b51e:	3401      	addeq	r4, #1
 800b520:	4643      	moveq	r3, r8
 800b522:	2344      	movne	r3, #68	; 0x44
 800b524:	220a      	movs	r2, #10
 800b526:	a90b      	add	r1, sp, #44	; 0x2c
 800b528:	4620      	mov	r0, r4
 800b52a:	9305      	str	r3, [sp, #20]
 800b52c:	f000 ffea 	bl	800c504 <strtoul>
 800b530:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b534:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800b538:	4544      	cmp	r4, r8
 800b53a:	9b05      	ldr	r3, [sp, #20]
 800b53c:	d114      	bne.n	800b568 <_tzset_unlocked_r+0x2cc>
 800b53e:	234d      	movs	r3, #77	; 0x4d
 800b540:	f1b9 0f00 	cmp.w	r9, #0
 800b544:	d107      	bne.n	800b556 <_tzset_unlocked_r+0x2ba>
 800b546:	722b      	strb	r3, [r5, #8]
 800b548:	2303      	movs	r3, #3
 800b54a:	60eb      	str	r3, [r5, #12]
 800b54c:	2302      	movs	r3, #2
 800b54e:	612b      	str	r3, [r5, #16]
 800b550:	f8c5 9014 	str.w	r9, [r5, #20]
 800b554:	e78e      	b.n	800b474 <_tzset_unlocked_r+0x1d8>
 800b556:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 800b55a:	230b      	movs	r3, #11
 800b55c:	62ab      	str	r3, [r5, #40]	; 0x28
 800b55e:	2301      	movs	r3, #1
 800b560:	62eb      	str	r3, [r5, #44]	; 0x2c
 800b562:	2300      	movs	r3, #0
 800b564:	632b      	str	r3, [r5, #48]	; 0x30
 800b566:	e785      	b.n	800b474 <_tzset_unlocked_r+0x1d8>
 800b568:	b280      	uxth	r0, r0
 800b56a:	723b      	strb	r3, [r7, #8]
 800b56c:	6178      	str	r0, [r7, #20]
 800b56e:	e781      	b.n	800b474 <_tzset_unlocked_r+0x1d8>
 800b570:	0800ca80 	.word	0x0800ca80
 800b574:	20000688 	.word	0x20000688
 800b578:	20000690 	.word	0x20000690
 800b57c:	0800ca83 	.word	0x0800ca83
 800b580:	2000068c 	.word	0x2000068c
 800b584:	200002cc 	.word	0x200002cc
 800b588:	2000067b 	.word	0x2000067b
 800b58c:	0800ca87 	.word	0x0800ca87
 800b590:	0800caaa 	.word	0x0800caaa
 800b594:	0800ca96 	.word	0x0800ca96
 800b598:	0800caa9 	.word	0x0800caa9
 800b59c:	20000670 	.word	0x20000670

0800b5a0 <div>:
 800b5a0:	2900      	cmp	r1, #0
 800b5a2:	b510      	push	{r4, lr}
 800b5a4:	fb91 f4f2 	sdiv	r4, r1, r2
 800b5a8:	fb02 1314 	mls	r3, r2, r4, r1
 800b5ac:	db06      	blt.n	800b5bc <div+0x1c>
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	da01      	bge.n	800b5b6 <div+0x16>
 800b5b2:	3401      	adds	r4, #1
 800b5b4:	1a9b      	subs	r3, r3, r2
 800b5b6:	6004      	str	r4, [r0, #0]
 800b5b8:	6043      	str	r3, [r0, #4]
 800b5ba:	bd10      	pop	{r4, pc}
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	bfc4      	itt	gt
 800b5c0:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800b5c4:	189b      	addgt	r3, r3, r2
 800b5c6:	e7f6      	b.n	800b5b6 <div+0x16>

0800b5c8 <_findenv_r>:
 800b5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5cc:	4606      	mov	r6, r0
 800b5ce:	468a      	mov	sl, r1
 800b5d0:	4617      	mov	r7, r2
 800b5d2:	f000 ffe8 	bl	800c5a6 <__env_lock>
 800b5d6:	4b1b      	ldr	r3, [pc, #108]	; (800b644 <_findenv_r+0x7c>)
 800b5d8:	f8d3 8000 	ldr.w	r8, [r3]
 800b5dc:	4699      	mov	r9, r3
 800b5de:	f1b8 0f00 	cmp.w	r8, #0
 800b5e2:	d007      	beq.n	800b5f4 <_findenv_r+0x2c>
 800b5e4:	4654      	mov	r4, sl
 800b5e6:	4623      	mov	r3, r4
 800b5e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5ec:	b332      	cbz	r2, 800b63c <_findenv_r+0x74>
 800b5ee:	2a3d      	cmp	r2, #61	; 0x3d
 800b5f0:	461c      	mov	r4, r3
 800b5f2:	d1f8      	bne.n	800b5e6 <_findenv_r+0x1e>
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	f000 ffd7 	bl	800c5a8 <__env_unlock>
 800b5fa:	2000      	movs	r0, #0
 800b5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b600:	f108 0804 	add.w	r8, r8, #4
 800b604:	f8d8 0000 	ldr.w	r0, [r8]
 800b608:	2800      	cmp	r0, #0
 800b60a:	d0f3      	beq.n	800b5f4 <_findenv_r+0x2c>
 800b60c:	4622      	mov	r2, r4
 800b60e:	4651      	mov	r1, sl
 800b610:	f000 fe44 	bl	800c29c <strncmp>
 800b614:	2800      	cmp	r0, #0
 800b616:	d1f3      	bne.n	800b600 <_findenv_r+0x38>
 800b618:	f8d8 3000 	ldr.w	r3, [r8]
 800b61c:	191d      	adds	r5, r3, r4
 800b61e:	5d1b      	ldrb	r3, [r3, r4]
 800b620:	2b3d      	cmp	r3, #61	; 0x3d
 800b622:	d1ed      	bne.n	800b600 <_findenv_r+0x38>
 800b624:	f8d9 3000 	ldr.w	r3, [r9]
 800b628:	eba8 0303 	sub.w	r3, r8, r3
 800b62c:	109b      	asrs	r3, r3, #2
 800b62e:	4630      	mov	r0, r6
 800b630:	603b      	str	r3, [r7, #0]
 800b632:	f000 ffb9 	bl	800c5a8 <__env_unlock>
 800b636:	1c68      	adds	r0, r5, #1
 800b638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b63c:	eba4 040a 	sub.w	r4, r4, sl
 800b640:	e7e0      	b.n	800b604 <_findenv_r+0x3c>
 800b642:	bf00      	nop
 800b644:	20000378 	.word	0x20000378

0800b648 <_getenv_r>:
 800b648:	b507      	push	{r0, r1, r2, lr}
 800b64a:	aa01      	add	r2, sp, #4
 800b64c:	f7ff ffbc 	bl	800b5c8 <_findenv_r>
 800b650:	b003      	add	sp, #12
 800b652:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b658 <__gettzinfo>:
 800b658:	4800      	ldr	r0, [pc, #0]	; (800b65c <__gettzinfo+0x4>)
 800b65a:	4770      	bx	lr
 800b65c:	200002d4 	.word	0x200002d4

0800b660 <__malloc_lock>:
 800b660:	4770      	bx	lr

0800b662 <__malloc_unlock>:
 800b662:	4770      	bx	lr

0800b664 <__ssputs_r>:
 800b664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b668:	688e      	ldr	r6, [r1, #8]
 800b66a:	429e      	cmp	r6, r3
 800b66c:	4682      	mov	sl, r0
 800b66e:	460c      	mov	r4, r1
 800b670:	4691      	mov	r9, r2
 800b672:	4698      	mov	r8, r3
 800b674:	d835      	bhi.n	800b6e2 <__ssputs_r+0x7e>
 800b676:	898a      	ldrh	r2, [r1, #12]
 800b678:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b67c:	d031      	beq.n	800b6e2 <__ssputs_r+0x7e>
 800b67e:	6825      	ldr	r5, [r4, #0]
 800b680:	6909      	ldr	r1, [r1, #16]
 800b682:	1a6f      	subs	r7, r5, r1
 800b684:	6965      	ldr	r5, [r4, #20]
 800b686:	2302      	movs	r3, #2
 800b688:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b68c:	fb95 f5f3 	sdiv	r5, r5, r3
 800b690:	f108 0301 	add.w	r3, r8, #1
 800b694:	443b      	add	r3, r7
 800b696:	429d      	cmp	r5, r3
 800b698:	bf38      	it	cc
 800b69a:	461d      	movcc	r5, r3
 800b69c:	0553      	lsls	r3, r2, #21
 800b69e:	d531      	bpl.n	800b704 <__ssputs_r+0xa0>
 800b6a0:	4629      	mov	r1, r5
 800b6a2:	f7ff fc85 	bl	800afb0 <_malloc_r>
 800b6a6:	4606      	mov	r6, r0
 800b6a8:	b950      	cbnz	r0, 800b6c0 <__ssputs_r+0x5c>
 800b6aa:	230c      	movs	r3, #12
 800b6ac:	f8ca 3000 	str.w	r3, [sl]
 800b6b0:	89a3      	ldrh	r3, [r4, #12]
 800b6b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6b6:	81a3      	strh	r3, [r4, #12]
 800b6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c0:	463a      	mov	r2, r7
 800b6c2:	6921      	ldr	r1, [r4, #16]
 800b6c4:	f7ff f9b6 	bl	800aa34 <memcpy>
 800b6c8:	89a3      	ldrh	r3, [r4, #12]
 800b6ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6d2:	81a3      	strh	r3, [r4, #12]
 800b6d4:	6126      	str	r6, [r4, #16]
 800b6d6:	6165      	str	r5, [r4, #20]
 800b6d8:	443e      	add	r6, r7
 800b6da:	1bed      	subs	r5, r5, r7
 800b6dc:	6026      	str	r6, [r4, #0]
 800b6de:	60a5      	str	r5, [r4, #8]
 800b6e0:	4646      	mov	r6, r8
 800b6e2:	4546      	cmp	r6, r8
 800b6e4:	bf28      	it	cs
 800b6e6:	4646      	movcs	r6, r8
 800b6e8:	4632      	mov	r2, r6
 800b6ea:	4649      	mov	r1, r9
 800b6ec:	6820      	ldr	r0, [r4, #0]
 800b6ee:	f000 ff7f 	bl	800c5f0 <memmove>
 800b6f2:	68a3      	ldr	r3, [r4, #8]
 800b6f4:	1b9b      	subs	r3, r3, r6
 800b6f6:	60a3      	str	r3, [r4, #8]
 800b6f8:	6823      	ldr	r3, [r4, #0]
 800b6fa:	441e      	add	r6, r3
 800b6fc:	6026      	str	r6, [r4, #0]
 800b6fe:	2000      	movs	r0, #0
 800b700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b704:	462a      	mov	r2, r5
 800b706:	f000 ff8d 	bl	800c624 <_realloc_r>
 800b70a:	4606      	mov	r6, r0
 800b70c:	2800      	cmp	r0, #0
 800b70e:	d1e1      	bne.n	800b6d4 <__ssputs_r+0x70>
 800b710:	6921      	ldr	r1, [r4, #16]
 800b712:	4650      	mov	r0, sl
 800b714:	f7ff fbfe 	bl	800af14 <_free_r>
 800b718:	e7c7      	b.n	800b6aa <__ssputs_r+0x46>
	...

0800b71c <_svfiprintf_r>:
 800b71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b720:	b09d      	sub	sp, #116	; 0x74
 800b722:	4680      	mov	r8, r0
 800b724:	9303      	str	r3, [sp, #12]
 800b726:	898b      	ldrh	r3, [r1, #12]
 800b728:	061c      	lsls	r4, r3, #24
 800b72a:	460d      	mov	r5, r1
 800b72c:	4616      	mov	r6, r2
 800b72e:	d50f      	bpl.n	800b750 <_svfiprintf_r+0x34>
 800b730:	690b      	ldr	r3, [r1, #16]
 800b732:	b96b      	cbnz	r3, 800b750 <_svfiprintf_r+0x34>
 800b734:	2140      	movs	r1, #64	; 0x40
 800b736:	f7ff fc3b 	bl	800afb0 <_malloc_r>
 800b73a:	6028      	str	r0, [r5, #0]
 800b73c:	6128      	str	r0, [r5, #16]
 800b73e:	b928      	cbnz	r0, 800b74c <_svfiprintf_r+0x30>
 800b740:	230c      	movs	r3, #12
 800b742:	f8c8 3000 	str.w	r3, [r8]
 800b746:	f04f 30ff 	mov.w	r0, #4294967295
 800b74a:	e0c5      	b.n	800b8d8 <_svfiprintf_r+0x1bc>
 800b74c:	2340      	movs	r3, #64	; 0x40
 800b74e:	616b      	str	r3, [r5, #20]
 800b750:	2300      	movs	r3, #0
 800b752:	9309      	str	r3, [sp, #36]	; 0x24
 800b754:	2320      	movs	r3, #32
 800b756:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b75a:	2330      	movs	r3, #48	; 0x30
 800b75c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b760:	f04f 0b01 	mov.w	fp, #1
 800b764:	4637      	mov	r7, r6
 800b766:	463c      	mov	r4, r7
 800b768:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d13c      	bne.n	800b7ea <_svfiprintf_r+0xce>
 800b770:	ebb7 0a06 	subs.w	sl, r7, r6
 800b774:	d00b      	beq.n	800b78e <_svfiprintf_r+0x72>
 800b776:	4653      	mov	r3, sl
 800b778:	4632      	mov	r2, r6
 800b77a:	4629      	mov	r1, r5
 800b77c:	4640      	mov	r0, r8
 800b77e:	f7ff ff71 	bl	800b664 <__ssputs_r>
 800b782:	3001      	adds	r0, #1
 800b784:	f000 80a3 	beq.w	800b8ce <_svfiprintf_r+0x1b2>
 800b788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b78a:	4453      	add	r3, sl
 800b78c:	9309      	str	r3, [sp, #36]	; 0x24
 800b78e:	783b      	ldrb	r3, [r7, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	f000 809c 	beq.w	800b8ce <_svfiprintf_r+0x1b2>
 800b796:	2300      	movs	r3, #0
 800b798:	f04f 32ff 	mov.w	r2, #4294967295
 800b79c:	9304      	str	r3, [sp, #16]
 800b79e:	9307      	str	r3, [sp, #28]
 800b7a0:	9205      	str	r2, [sp, #20]
 800b7a2:	9306      	str	r3, [sp, #24]
 800b7a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7a8:	931a      	str	r3, [sp, #104]	; 0x68
 800b7aa:	2205      	movs	r2, #5
 800b7ac:	7821      	ldrb	r1, [r4, #0]
 800b7ae:	4850      	ldr	r0, [pc, #320]	; (800b8f0 <_svfiprintf_r+0x1d4>)
 800b7b0:	f7f4 fd26 	bl	8000200 <memchr>
 800b7b4:	1c67      	adds	r7, r4, #1
 800b7b6:	9b04      	ldr	r3, [sp, #16]
 800b7b8:	b9d8      	cbnz	r0, 800b7f2 <_svfiprintf_r+0xd6>
 800b7ba:	06d9      	lsls	r1, r3, #27
 800b7bc:	bf44      	itt	mi
 800b7be:	2220      	movmi	r2, #32
 800b7c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b7c4:	071a      	lsls	r2, r3, #28
 800b7c6:	bf44      	itt	mi
 800b7c8:	222b      	movmi	r2, #43	; 0x2b
 800b7ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b7ce:	7822      	ldrb	r2, [r4, #0]
 800b7d0:	2a2a      	cmp	r2, #42	; 0x2a
 800b7d2:	d016      	beq.n	800b802 <_svfiprintf_r+0xe6>
 800b7d4:	9a07      	ldr	r2, [sp, #28]
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	200a      	movs	r0, #10
 800b7da:	4627      	mov	r7, r4
 800b7dc:	3401      	adds	r4, #1
 800b7de:	783b      	ldrb	r3, [r7, #0]
 800b7e0:	3b30      	subs	r3, #48	; 0x30
 800b7e2:	2b09      	cmp	r3, #9
 800b7e4:	d951      	bls.n	800b88a <_svfiprintf_r+0x16e>
 800b7e6:	b1c9      	cbz	r1, 800b81c <_svfiprintf_r+0x100>
 800b7e8:	e011      	b.n	800b80e <_svfiprintf_r+0xf2>
 800b7ea:	2b25      	cmp	r3, #37	; 0x25
 800b7ec:	d0c0      	beq.n	800b770 <_svfiprintf_r+0x54>
 800b7ee:	4627      	mov	r7, r4
 800b7f0:	e7b9      	b.n	800b766 <_svfiprintf_r+0x4a>
 800b7f2:	4a3f      	ldr	r2, [pc, #252]	; (800b8f0 <_svfiprintf_r+0x1d4>)
 800b7f4:	1a80      	subs	r0, r0, r2
 800b7f6:	fa0b f000 	lsl.w	r0, fp, r0
 800b7fa:	4318      	orrs	r0, r3
 800b7fc:	9004      	str	r0, [sp, #16]
 800b7fe:	463c      	mov	r4, r7
 800b800:	e7d3      	b.n	800b7aa <_svfiprintf_r+0x8e>
 800b802:	9a03      	ldr	r2, [sp, #12]
 800b804:	1d11      	adds	r1, r2, #4
 800b806:	6812      	ldr	r2, [r2, #0]
 800b808:	9103      	str	r1, [sp, #12]
 800b80a:	2a00      	cmp	r2, #0
 800b80c:	db01      	blt.n	800b812 <_svfiprintf_r+0xf6>
 800b80e:	9207      	str	r2, [sp, #28]
 800b810:	e004      	b.n	800b81c <_svfiprintf_r+0x100>
 800b812:	4252      	negs	r2, r2
 800b814:	f043 0302 	orr.w	r3, r3, #2
 800b818:	9207      	str	r2, [sp, #28]
 800b81a:	9304      	str	r3, [sp, #16]
 800b81c:	783b      	ldrb	r3, [r7, #0]
 800b81e:	2b2e      	cmp	r3, #46	; 0x2e
 800b820:	d10e      	bne.n	800b840 <_svfiprintf_r+0x124>
 800b822:	787b      	ldrb	r3, [r7, #1]
 800b824:	2b2a      	cmp	r3, #42	; 0x2a
 800b826:	f107 0101 	add.w	r1, r7, #1
 800b82a:	d132      	bne.n	800b892 <_svfiprintf_r+0x176>
 800b82c:	9b03      	ldr	r3, [sp, #12]
 800b82e:	1d1a      	adds	r2, r3, #4
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	9203      	str	r2, [sp, #12]
 800b834:	2b00      	cmp	r3, #0
 800b836:	bfb8      	it	lt
 800b838:	f04f 33ff 	movlt.w	r3, #4294967295
 800b83c:	3702      	adds	r7, #2
 800b83e:	9305      	str	r3, [sp, #20]
 800b840:	4c2c      	ldr	r4, [pc, #176]	; (800b8f4 <_svfiprintf_r+0x1d8>)
 800b842:	7839      	ldrb	r1, [r7, #0]
 800b844:	2203      	movs	r2, #3
 800b846:	4620      	mov	r0, r4
 800b848:	f7f4 fcda 	bl	8000200 <memchr>
 800b84c:	b138      	cbz	r0, 800b85e <_svfiprintf_r+0x142>
 800b84e:	2340      	movs	r3, #64	; 0x40
 800b850:	1b00      	subs	r0, r0, r4
 800b852:	fa03 f000 	lsl.w	r0, r3, r0
 800b856:	9b04      	ldr	r3, [sp, #16]
 800b858:	4303      	orrs	r3, r0
 800b85a:	9304      	str	r3, [sp, #16]
 800b85c:	3701      	adds	r7, #1
 800b85e:	7839      	ldrb	r1, [r7, #0]
 800b860:	4825      	ldr	r0, [pc, #148]	; (800b8f8 <_svfiprintf_r+0x1dc>)
 800b862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b866:	2206      	movs	r2, #6
 800b868:	1c7e      	adds	r6, r7, #1
 800b86a:	f7f4 fcc9 	bl	8000200 <memchr>
 800b86e:	2800      	cmp	r0, #0
 800b870:	d035      	beq.n	800b8de <_svfiprintf_r+0x1c2>
 800b872:	4b22      	ldr	r3, [pc, #136]	; (800b8fc <_svfiprintf_r+0x1e0>)
 800b874:	b9fb      	cbnz	r3, 800b8b6 <_svfiprintf_r+0x19a>
 800b876:	9b03      	ldr	r3, [sp, #12]
 800b878:	3307      	adds	r3, #7
 800b87a:	f023 0307 	bic.w	r3, r3, #7
 800b87e:	3308      	adds	r3, #8
 800b880:	9303      	str	r3, [sp, #12]
 800b882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b884:	444b      	add	r3, r9
 800b886:	9309      	str	r3, [sp, #36]	; 0x24
 800b888:	e76c      	b.n	800b764 <_svfiprintf_r+0x48>
 800b88a:	fb00 3202 	mla	r2, r0, r2, r3
 800b88e:	2101      	movs	r1, #1
 800b890:	e7a3      	b.n	800b7da <_svfiprintf_r+0xbe>
 800b892:	2300      	movs	r3, #0
 800b894:	9305      	str	r3, [sp, #20]
 800b896:	4618      	mov	r0, r3
 800b898:	240a      	movs	r4, #10
 800b89a:	460f      	mov	r7, r1
 800b89c:	3101      	adds	r1, #1
 800b89e:	783a      	ldrb	r2, [r7, #0]
 800b8a0:	3a30      	subs	r2, #48	; 0x30
 800b8a2:	2a09      	cmp	r2, #9
 800b8a4:	d903      	bls.n	800b8ae <_svfiprintf_r+0x192>
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d0ca      	beq.n	800b840 <_svfiprintf_r+0x124>
 800b8aa:	9005      	str	r0, [sp, #20]
 800b8ac:	e7c8      	b.n	800b840 <_svfiprintf_r+0x124>
 800b8ae:	fb04 2000 	mla	r0, r4, r0, r2
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e7f1      	b.n	800b89a <_svfiprintf_r+0x17e>
 800b8b6:	ab03      	add	r3, sp, #12
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	462a      	mov	r2, r5
 800b8bc:	4b10      	ldr	r3, [pc, #64]	; (800b900 <_svfiprintf_r+0x1e4>)
 800b8be:	a904      	add	r1, sp, #16
 800b8c0:	4640      	mov	r0, r8
 800b8c2:	f3af 8000 	nop.w
 800b8c6:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b8ca:	4681      	mov	r9, r0
 800b8cc:	d1d9      	bne.n	800b882 <_svfiprintf_r+0x166>
 800b8ce:	89ab      	ldrh	r3, [r5, #12]
 800b8d0:	065b      	lsls	r3, r3, #25
 800b8d2:	f53f af38 	bmi.w	800b746 <_svfiprintf_r+0x2a>
 800b8d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8d8:	b01d      	add	sp, #116	; 0x74
 800b8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8de:	ab03      	add	r3, sp, #12
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	462a      	mov	r2, r5
 800b8e4:	4b06      	ldr	r3, [pc, #24]	; (800b900 <_svfiprintf_r+0x1e4>)
 800b8e6:	a904      	add	r1, sp, #16
 800b8e8:	4640      	mov	r0, r8
 800b8ea:	f000 fa2f 	bl	800bd4c <_printf_i>
 800b8ee:	e7ea      	b.n	800b8c6 <_svfiprintf_r+0x1aa>
 800b8f0:	0800cb1c 	.word	0x0800cb1c
 800b8f4:	0800cb22 	.word	0x0800cb22
 800b8f8:	0800cb26 	.word	0x0800cb26
 800b8fc:	00000000 	.word	0x00000000
 800b900:	0800b665 	.word	0x0800b665

0800b904 <_sungetc_r>:
 800b904:	b538      	push	{r3, r4, r5, lr}
 800b906:	1c4b      	adds	r3, r1, #1
 800b908:	4614      	mov	r4, r2
 800b90a:	d103      	bne.n	800b914 <_sungetc_r+0x10>
 800b90c:	f04f 35ff 	mov.w	r5, #4294967295
 800b910:	4628      	mov	r0, r5
 800b912:	bd38      	pop	{r3, r4, r5, pc}
 800b914:	8993      	ldrh	r3, [r2, #12]
 800b916:	f023 0320 	bic.w	r3, r3, #32
 800b91a:	8193      	strh	r3, [r2, #12]
 800b91c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800b91e:	6852      	ldr	r2, [r2, #4]
 800b920:	b2cd      	uxtb	r5, r1
 800b922:	b18b      	cbz	r3, 800b948 <_sungetc_r+0x44>
 800b924:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b926:	429a      	cmp	r2, r3
 800b928:	da08      	bge.n	800b93c <_sungetc_r+0x38>
 800b92a:	6823      	ldr	r3, [r4, #0]
 800b92c:	1e5a      	subs	r2, r3, #1
 800b92e:	6022      	str	r2, [r4, #0]
 800b930:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b934:	6863      	ldr	r3, [r4, #4]
 800b936:	3301      	adds	r3, #1
 800b938:	6063      	str	r3, [r4, #4]
 800b93a:	e7e9      	b.n	800b910 <_sungetc_r+0xc>
 800b93c:	4621      	mov	r1, r4
 800b93e:	f000 fdf7 	bl	800c530 <__submore>
 800b942:	2800      	cmp	r0, #0
 800b944:	d0f1      	beq.n	800b92a <_sungetc_r+0x26>
 800b946:	e7e1      	b.n	800b90c <_sungetc_r+0x8>
 800b948:	6921      	ldr	r1, [r4, #16]
 800b94a:	6823      	ldr	r3, [r4, #0]
 800b94c:	b151      	cbz	r1, 800b964 <_sungetc_r+0x60>
 800b94e:	4299      	cmp	r1, r3
 800b950:	d208      	bcs.n	800b964 <_sungetc_r+0x60>
 800b952:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b956:	428d      	cmp	r5, r1
 800b958:	d104      	bne.n	800b964 <_sungetc_r+0x60>
 800b95a:	3b01      	subs	r3, #1
 800b95c:	3201      	adds	r2, #1
 800b95e:	6023      	str	r3, [r4, #0]
 800b960:	6062      	str	r2, [r4, #4]
 800b962:	e7d5      	b.n	800b910 <_sungetc_r+0xc>
 800b964:	63e3      	str	r3, [r4, #60]	; 0x3c
 800b966:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b96a:	6363      	str	r3, [r4, #52]	; 0x34
 800b96c:	2303      	movs	r3, #3
 800b96e:	63a3      	str	r3, [r4, #56]	; 0x38
 800b970:	4623      	mov	r3, r4
 800b972:	6422      	str	r2, [r4, #64]	; 0x40
 800b974:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	2301      	movs	r3, #1
 800b97c:	e7dc      	b.n	800b938 <_sungetc_r+0x34>

0800b97e <__ssrefill_r>:
 800b97e:	b510      	push	{r4, lr}
 800b980:	460c      	mov	r4, r1
 800b982:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b984:	b169      	cbz	r1, 800b9a2 <__ssrefill_r+0x24>
 800b986:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b98a:	4299      	cmp	r1, r3
 800b98c:	d001      	beq.n	800b992 <__ssrefill_r+0x14>
 800b98e:	f7ff fac1 	bl	800af14 <_free_r>
 800b992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b994:	6063      	str	r3, [r4, #4]
 800b996:	2000      	movs	r0, #0
 800b998:	6360      	str	r0, [r4, #52]	; 0x34
 800b99a:	b113      	cbz	r3, 800b9a2 <__ssrefill_r+0x24>
 800b99c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b99e:	6023      	str	r3, [r4, #0]
 800b9a0:	bd10      	pop	{r4, pc}
 800b9a2:	6923      	ldr	r3, [r4, #16]
 800b9a4:	6023      	str	r3, [r4, #0]
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	6063      	str	r3, [r4, #4]
 800b9aa:	89a3      	ldrh	r3, [r4, #12]
 800b9ac:	f043 0320 	orr.w	r3, r3, #32
 800b9b0:	81a3      	strh	r3, [r4, #12]
 800b9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b6:	bd10      	pop	{r4, pc}

0800b9b8 <__ssvfiscanf_r>:
 800b9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9bc:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800b9c0:	f10d 080c 	add.w	r8, sp, #12
 800b9c4:	9301      	str	r3, [sp, #4]
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	9346      	str	r3, [sp, #280]	; 0x118
 800b9ca:	9347      	str	r3, [sp, #284]	; 0x11c
 800b9cc:	4ba0      	ldr	r3, [pc, #640]	; (800bc50 <__ssvfiscanf_r+0x298>)
 800b9ce:	93a2      	str	r3, [sp, #648]	; 0x288
 800b9d0:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800bc58 <__ssvfiscanf_r+0x2a0>
 800b9d4:	4b9f      	ldr	r3, [pc, #636]	; (800bc54 <__ssvfiscanf_r+0x29c>)
 800b9d6:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800b9da:	4606      	mov	r6, r0
 800b9dc:	460c      	mov	r4, r1
 800b9de:	93a3      	str	r3, [sp, #652]	; 0x28c
 800b9e0:	4692      	mov	sl, r2
 800b9e2:	270a      	movs	r7, #10
 800b9e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f000 812f 	beq.w	800bc4c <__ssvfiscanf_r+0x294>
 800b9ee:	f000 fddf 	bl	800c5b0 <__locale_ctype_ptr>
 800b9f2:	f89a b000 	ldrb.w	fp, [sl]
 800b9f6:	4458      	add	r0, fp
 800b9f8:	7843      	ldrb	r3, [r0, #1]
 800b9fa:	f013 0308 	ands.w	r3, r3, #8
 800b9fe:	d143      	bne.n	800ba88 <__ssvfiscanf_r+0xd0>
 800ba00:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800ba04:	f10a 0501 	add.w	r5, sl, #1
 800ba08:	f040 8099 	bne.w	800bb3e <__ssvfiscanf_r+0x186>
 800ba0c:	9345      	str	r3, [sp, #276]	; 0x114
 800ba0e:	9343      	str	r3, [sp, #268]	; 0x10c
 800ba10:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800ba14:	2b2a      	cmp	r3, #42	; 0x2a
 800ba16:	d103      	bne.n	800ba20 <__ssvfiscanf_r+0x68>
 800ba18:	2310      	movs	r3, #16
 800ba1a:	9343      	str	r3, [sp, #268]	; 0x10c
 800ba1c:	f10a 0502 	add.w	r5, sl, #2
 800ba20:	7829      	ldrb	r1, [r5, #0]
 800ba22:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ba26:	2a09      	cmp	r2, #9
 800ba28:	46aa      	mov	sl, r5
 800ba2a:	f105 0501 	add.w	r5, r5, #1
 800ba2e:	d941      	bls.n	800bab4 <__ssvfiscanf_r+0xfc>
 800ba30:	2203      	movs	r2, #3
 800ba32:	4889      	ldr	r0, [pc, #548]	; (800bc58 <__ssvfiscanf_r+0x2a0>)
 800ba34:	f7f4 fbe4 	bl	8000200 <memchr>
 800ba38:	b138      	cbz	r0, 800ba4a <__ssvfiscanf_r+0x92>
 800ba3a:	eba0 0309 	sub.w	r3, r0, r9
 800ba3e:	2001      	movs	r0, #1
 800ba40:	4098      	lsls	r0, r3
 800ba42:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ba44:	4318      	orrs	r0, r3
 800ba46:	9043      	str	r0, [sp, #268]	; 0x10c
 800ba48:	46aa      	mov	sl, r5
 800ba4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba4e:	2b67      	cmp	r3, #103	; 0x67
 800ba50:	f10a 0501 	add.w	r5, sl, #1
 800ba54:	d84a      	bhi.n	800baec <__ssvfiscanf_r+0x134>
 800ba56:	2b65      	cmp	r3, #101	; 0x65
 800ba58:	f080 80b7 	bcs.w	800bbca <__ssvfiscanf_r+0x212>
 800ba5c:	2b47      	cmp	r3, #71	; 0x47
 800ba5e:	d82f      	bhi.n	800bac0 <__ssvfiscanf_r+0x108>
 800ba60:	2b45      	cmp	r3, #69	; 0x45
 800ba62:	f080 80b2 	bcs.w	800bbca <__ssvfiscanf_r+0x212>
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	f000 8082 	beq.w	800bb70 <__ssvfiscanf_r+0x1b8>
 800ba6c:	2b25      	cmp	r3, #37	; 0x25
 800ba6e:	d066      	beq.n	800bb3e <__ssvfiscanf_r+0x186>
 800ba70:	2303      	movs	r3, #3
 800ba72:	9349      	str	r3, [sp, #292]	; 0x124
 800ba74:	9744      	str	r7, [sp, #272]	; 0x110
 800ba76:	e045      	b.n	800bb04 <__ssvfiscanf_r+0x14c>
 800ba78:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800ba7a:	3101      	adds	r1, #1
 800ba7c:	9147      	str	r1, [sp, #284]	; 0x11c
 800ba7e:	6861      	ldr	r1, [r4, #4]
 800ba80:	3301      	adds	r3, #1
 800ba82:	3901      	subs	r1, #1
 800ba84:	6061      	str	r1, [r4, #4]
 800ba86:	6023      	str	r3, [r4, #0]
 800ba88:	6863      	ldr	r3, [r4, #4]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	dd0b      	ble.n	800baa6 <__ssvfiscanf_r+0xee>
 800ba8e:	f000 fd8f 	bl	800c5b0 <__locale_ctype_ptr>
 800ba92:	6823      	ldr	r3, [r4, #0]
 800ba94:	7819      	ldrb	r1, [r3, #0]
 800ba96:	4408      	add	r0, r1
 800ba98:	7841      	ldrb	r1, [r0, #1]
 800ba9a:	070d      	lsls	r5, r1, #28
 800ba9c:	d4ec      	bmi.n	800ba78 <__ssvfiscanf_r+0xc0>
 800ba9e:	f10a 0501 	add.w	r5, sl, #1
 800baa2:	46aa      	mov	sl, r5
 800baa4:	e79e      	b.n	800b9e4 <__ssvfiscanf_r+0x2c>
 800baa6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800baa8:	4621      	mov	r1, r4
 800baaa:	4630      	mov	r0, r6
 800baac:	4798      	blx	r3
 800baae:	2800      	cmp	r0, #0
 800bab0:	d0ed      	beq.n	800ba8e <__ssvfiscanf_r+0xd6>
 800bab2:	e7f4      	b.n	800ba9e <__ssvfiscanf_r+0xe6>
 800bab4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bab6:	fb07 1303 	mla	r3, r7, r3, r1
 800baba:	3b30      	subs	r3, #48	; 0x30
 800babc:	9345      	str	r3, [sp, #276]	; 0x114
 800babe:	e7af      	b.n	800ba20 <__ssvfiscanf_r+0x68>
 800bac0:	2b5b      	cmp	r3, #91	; 0x5b
 800bac2:	d061      	beq.n	800bb88 <__ssvfiscanf_r+0x1d0>
 800bac4:	d80c      	bhi.n	800bae0 <__ssvfiscanf_r+0x128>
 800bac6:	2b58      	cmp	r3, #88	; 0x58
 800bac8:	d1d2      	bne.n	800ba70 <__ssvfiscanf_r+0xb8>
 800baca:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800bacc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bad0:	9243      	str	r2, [sp, #268]	; 0x10c
 800bad2:	2210      	movs	r2, #16
 800bad4:	9244      	str	r2, [sp, #272]	; 0x110
 800bad6:	2b6f      	cmp	r3, #111	; 0x6f
 800bad8:	bfb4      	ite	lt
 800bada:	2303      	movlt	r3, #3
 800badc:	2304      	movge	r3, #4
 800bade:	e010      	b.n	800bb02 <__ssvfiscanf_r+0x14a>
 800bae0:	2b63      	cmp	r3, #99	; 0x63
 800bae2:	d05c      	beq.n	800bb9e <__ssvfiscanf_r+0x1e6>
 800bae4:	2b64      	cmp	r3, #100	; 0x64
 800bae6:	d1c3      	bne.n	800ba70 <__ssvfiscanf_r+0xb8>
 800bae8:	9744      	str	r7, [sp, #272]	; 0x110
 800baea:	e7f4      	b.n	800bad6 <__ssvfiscanf_r+0x11e>
 800baec:	2b70      	cmp	r3, #112	; 0x70
 800baee:	d042      	beq.n	800bb76 <__ssvfiscanf_r+0x1be>
 800baf0:	d81d      	bhi.n	800bb2e <__ssvfiscanf_r+0x176>
 800baf2:	2b6e      	cmp	r3, #110	; 0x6e
 800baf4:	d059      	beq.n	800bbaa <__ssvfiscanf_r+0x1f2>
 800baf6:	d843      	bhi.n	800bb80 <__ssvfiscanf_r+0x1c8>
 800baf8:	2b69      	cmp	r3, #105	; 0x69
 800bafa:	d1b9      	bne.n	800ba70 <__ssvfiscanf_r+0xb8>
 800bafc:	2300      	movs	r3, #0
 800bafe:	9344      	str	r3, [sp, #272]	; 0x110
 800bb00:	2303      	movs	r3, #3
 800bb02:	9349      	str	r3, [sp, #292]	; 0x124
 800bb04:	6863      	ldr	r3, [r4, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	dd61      	ble.n	800bbce <__ssvfiscanf_r+0x216>
 800bb0a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bb0c:	0659      	lsls	r1, r3, #25
 800bb0e:	d56f      	bpl.n	800bbf0 <__ssvfiscanf_r+0x238>
 800bb10:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800bb12:	2b02      	cmp	r3, #2
 800bb14:	dc7c      	bgt.n	800bc10 <__ssvfiscanf_r+0x258>
 800bb16:	ab01      	add	r3, sp, #4
 800bb18:	4622      	mov	r2, r4
 800bb1a:	a943      	add	r1, sp, #268	; 0x10c
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	f000 fa35 	bl	800bf8c <_scanf_chars>
 800bb22:	2801      	cmp	r0, #1
 800bb24:	f000 8092 	beq.w	800bc4c <__ssvfiscanf_r+0x294>
 800bb28:	2802      	cmp	r0, #2
 800bb2a:	d1ba      	bne.n	800baa2 <__ssvfiscanf_r+0xea>
 800bb2c:	e01d      	b.n	800bb6a <__ssvfiscanf_r+0x1b2>
 800bb2e:	2b75      	cmp	r3, #117	; 0x75
 800bb30:	d0da      	beq.n	800bae8 <__ssvfiscanf_r+0x130>
 800bb32:	2b78      	cmp	r3, #120	; 0x78
 800bb34:	d0c9      	beq.n	800baca <__ssvfiscanf_r+0x112>
 800bb36:	2b73      	cmp	r3, #115	; 0x73
 800bb38:	d19a      	bne.n	800ba70 <__ssvfiscanf_r+0xb8>
 800bb3a:	2302      	movs	r3, #2
 800bb3c:	e7e1      	b.n	800bb02 <__ssvfiscanf_r+0x14a>
 800bb3e:	6863      	ldr	r3, [r4, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	dd0c      	ble.n	800bb5e <__ssvfiscanf_r+0x1a6>
 800bb44:	6823      	ldr	r3, [r4, #0]
 800bb46:	781a      	ldrb	r2, [r3, #0]
 800bb48:	4593      	cmp	fp, r2
 800bb4a:	d17f      	bne.n	800bc4c <__ssvfiscanf_r+0x294>
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	6862      	ldr	r2, [r4, #4]
 800bb50:	6023      	str	r3, [r4, #0]
 800bb52:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bb54:	3a01      	subs	r2, #1
 800bb56:	3301      	adds	r3, #1
 800bb58:	6062      	str	r2, [r4, #4]
 800bb5a:	9347      	str	r3, [sp, #284]	; 0x11c
 800bb5c:	e7a1      	b.n	800baa2 <__ssvfiscanf_r+0xea>
 800bb5e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bb60:	4621      	mov	r1, r4
 800bb62:	4630      	mov	r0, r6
 800bb64:	4798      	blx	r3
 800bb66:	2800      	cmp	r0, #0
 800bb68:	d0ec      	beq.n	800bb44 <__ssvfiscanf_r+0x18c>
 800bb6a:	9846      	ldr	r0, [sp, #280]	; 0x118
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	d163      	bne.n	800bc38 <__ssvfiscanf_r+0x280>
 800bb70:	f04f 30ff 	mov.w	r0, #4294967295
 800bb74:	e066      	b.n	800bc44 <__ssvfiscanf_r+0x28c>
 800bb76:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800bb78:	f042 0220 	orr.w	r2, r2, #32
 800bb7c:	9243      	str	r2, [sp, #268]	; 0x10c
 800bb7e:	e7a4      	b.n	800baca <__ssvfiscanf_r+0x112>
 800bb80:	2308      	movs	r3, #8
 800bb82:	9344      	str	r3, [sp, #272]	; 0x110
 800bb84:	2304      	movs	r3, #4
 800bb86:	e7bc      	b.n	800bb02 <__ssvfiscanf_r+0x14a>
 800bb88:	4629      	mov	r1, r5
 800bb8a:	4640      	mov	r0, r8
 800bb8c:	f000 fb56 	bl	800c23c <__sccl>
 800bb90:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bb92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb96:	9343      	str	r3, [sp, #268]	; 0x10c
 800bb98:	4605      	mov	r5, r0
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e7b1      	b.n	800bb02 <__ssvfiscanf_r+0x14a>
 800bb9e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bba4:	9343      	str	r3, [sp, #268]	; 0x10c
 800bba6:	2300      	movs	r3, #0
 800bba8:	e7ab      	b.n	800bb02 <__ssvfiscanf_r+0x14a>
 800bbaa:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800bbac:	06d0      	lsls	r0, r2, #27
 800bbae:	f53f af78 	bmi.w	800baa2 <__ssvfiscanf_r+0xea>
 800bbb2:	f012 0f01 	tst.w	r2, #1
 800bbb6:	9a01      	ldr	r2, [sp, #4]
 800bbb8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bbba:	f102 0104 	add.w	r1, r2, #4
 800bbbe:	9101      	str	r1, [sp, #4]
 800bbc0:	6812      	ldr	r2, [r2, #0]
 800bbc2:	bf14      	ite	ne
 800bbc4:	8013      	strhne	r3, [r2, #0]
 800bbc6:	6013      	streq	r3, [r2, #0]
 800bbc8:	e76b      	b.n	800baa2 <__ssvfiscanf_r+0xea>
 800bbca:	2305      	movs	r3, #5
 800bbcc:	e799      	b.n	800bb02 <__ssvfiscanf_r+0x14a>
 800bbce:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bbd0:	4621      	mov	r1, r4
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	4798      	blx	r3
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d097      	beq.n	800bb0a <__ssvfiscanf_r+0x152>
 800bbda:	e7c6      	b.n	800bb6a <__ssvfiscanf_r+0x1b2>
 800bbdc:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800bbde:	3201      	adds	r2, #1
 800bbe0:	9247      	str	r2, [sp, #284]	; 0x11c
 800bbe2:	6862      	ldr	r2, [r4, #4]
 800bbe4:	3a01      	subs	r2, #1
 800bbe6:	2a00      	cmp	r2, #0
 800bbe8:	6062      	str	r2, [r4, #4]
 800bbea:	dd0a      	ble.n	800bc02 <__ssvfiscanf_r+0x24a>
 800bbec:	3301      	adds	r3, #1
 800bbee:	6023      	str	r3, [r4, #0]
 800bbf0:	f000 fcde 	bl	800c5b0 <__locale_ctype_ptr>
 800bbf4:	6823      	ldr	r3, [r4, #0]
 800bbf6:	781a      	ldrb	r2, [r3, #0]
 800bbf8:	4410      	add	r0, r2
 800bbfa:	7842      	ldrb	r2, [r0, #1]
 800bbfc:	0712      	lsls	r2, r2, #28
 800bbfe:	d4ed      	bmi.n	800bbdc <__ssvfiscanf_r+0x224>
 800bc00:	e786      	b.n	800bb10 <__ssvfiscanf_r+0x158>
 800bc02:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bc04:	4621      	mov	r1, r4
 800bc06:	4630      	mov	r0, r6
 800bc08:	4798      	blx	r3
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	d0f0      	beq.n	800bbf0 <__ssvfiscanf_r+0x238>
 800bc0e:	e7ac      	b.n	800bb6a <__ssvfiscanf_r+0x1b2>
 800bc10:	2b04      	cmp	r3, #4
 800bc12:	dc06      	bgt.n	800bc22 <__ssvfiscanf_r+0x26a>
 800bc14:	ab01      	add	r3, sp, #4
 800bc16:	4622      	mov	r2, r4
 800bc18:	a943      	add	r1, sp, #268	; 0x10c
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	f000 fa1a 	bl	800c054 <_scanf_i>
 800bc20:	e77f      	b.n	800bb22 <__ssvfiscanf_r+0x16a>
 800bc22:	4b0e      	ldr	r3, [pc, #56]	; (800bc5c <__ssvfiscanf_r+0x2a4>)
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	f43f af3c 	beq.w	800baa2 <__ssvfiscanf_r+0xea>
 800bc2a:	ab01      	add	r3, sp, #4
 800bc2c:	4622      	mov	r2, r4
 800bc2e:	a943      	add	r1, sp, #268	; 0x10c
 800bc30:	4630      	mov	r0, r6
 800bc32:	f3af 8000 	nop.w
 800bc36:	e774      	b.n	800bb22 <__ssvfiscanf_r+0x16a>
 800bc38:	89a3      	ldrh	r3, [r4, #12]
 800bc3a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bc3e:	bf18      	it	ne
 800bc40:	f04f 30ff 	movne.w	r0, #4294967295
 800bc44:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 800bc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc4c:	9846      	ldr	r0, [sp, #280]	; 0x118
 800bc4e:	e7f9      	b.n	800bc44 <__ssvfiscanf_r+0x28c>
 800bc50:	0800b905 	.word	0x0800b905
 800bc54:	0800b97f 	.word	0x0800b97f
 800bc58:	0800cb22 	.word	0x0800cb22
 800bc5c:	00000000 	.word	0x00000000

0800bc60 <_printf_common>:
 800bc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc64:	4691      	mov	r9, r2
 800bc66:	461f      	mov	r7, r3
 800bc68:	688a      	ldr	r2, [r1, #8]
 800bc6a:	690b      	ldr	r3, [r1, #16]
 800bc6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc70:	4293      	cmp	r3, r2
 800bc72:	bfb8      	it	lt
 800bc74:	4613      	movlt	r3, r2
 800bc76:	f8c9 3000 	str.w	r3, [r9]
 800bc7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc7e:	4606      	mov	r6, r0
 800bc80:	460c      	mov	r4, r1
 800bc82:	b112      	cbz	r2, 800bc8a <_printf_common+0x2a>
 800bc84:	3301      	adds	r3, #1
 800bc86:	f8c9 3000 	str.w	r3, [r9]
 800bc8a:	6823      	ldr	r3, [r4, #0]
 800bc8c:	0699      	lsls	r1, r3, #26
 800bc8e:	bf42      	ittt	mi
 800bc90:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bc94:	3302      	addmi	r3, #2
 800bc96:	f8c9 3000 	strmi.w	r3, [r9]
 800bc9a:	6825      	ldr	r5, [r4, #0]
 800bc9c:	f015 0506 	ands.w	r5, r5, #6
 800bca0:	d107      	bne.n	800bcb2 <_printf_common+0x52>
 800bca2:	f104 0a19 	add.w	sl, r4, #25
 800bca6:	68e3      	ldr	r3, [r4, #12]
 800bca8:	f8d9 2000 	ldr.w	r2, [r9]
 800bcac:	1a9b      	subs	r3, r3, r2
 800bcae:	429d      	cmp	r5, r3
 800bcb0:	db29      	blt.n	800bd06 <_printf_common+0xa6>
 800bcb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bcb6:	6822      	ldr	r2, [r4, #0]
 800bcb8:	3300      	adds	r3, #0
 800bcba:	bf18      	it	ne
 800bcbc:	2301      	movne	r3, #1
 800bcbe:	0692      	lsls	r2, r2, #26
 800bcc0:	d42e      	bmi.n	800bd20 <_printf_common+0xc0>
 800bcc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcc6:	4639      	mov	r1, r7
 800bcc8:	4630      	mov	r0, r6
 800bcca:	47c0      	blx	r8
 800bccc:	3001      	adds	r0, #1
 800bcce:	d021      	beq.n	800bd14 <_printf_common+0xb4>
 800bcd0:	6823      	ldr	r3, [r4, #0]
 800bcd2:	68e5      	ldr	r5, [r4, #12]
 800bcd4:	f8d9 2000 	ldr.w	r2, [r9]
 800bcd8:	f003 0306 	and.w	r3, r3, #6
 800bcdc:	2b04      	cmp	r3, #4
 800bcde:	bf08      	it	eq
 800bce0:	1aad      	subeq	r5, r5, r2
 800bce2:	68a3      	ldr	r3, [r4, #8]
 800bce4:	6922      	ldr	r2, [r4, #16]
 800bce6:	bf0c      	ite	eq
 800bce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcec:	2500      	movne	r5, #0
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	bfc4      	itt	gt
 800bcf2:	1a9b      	subgt	r3, r3, r2
 800bcf4:	18ed      	addgt	r5, r5, r3
 800bcf6:	f04f 0900 	mov.w	r9, #0
 800bcfa:	341a      	adds	r4, #26
 800bcfc:	454d      	cmp	r5, r9
 800bcfe:	d11b      	bne.n	800bd38 <_printf_common+0xd8>
 800bd00:	2000      	movs	r0, #0
 800bd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd06:	2301      	movs	r3, #1
 800bd08:	4652      	mov	r2, sl
 800bd0a:	4639      	mov	r1, r7
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	47c0      	blx	r8
 800bd10:	3001      	adds	r0, #1
 800bd12:	d103      	bne.n	800bd1c <_printf_common+0xbc>
 800bd14:	f04f 30ff 	mov.w	r0, #4294967295
 800bd18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd1c:	3501      	adds	r5, #1
 800bd1e:	e7c2      	b.n	800bca6 <_printf_common+0x46>
 800bd20:	18e1      	adds	r1, r4, r3
 800bd22:	1c5a      	adds	r2, r3, #1
 800bd24:	2030      	movs	r0, #48	; 0x30
 800bd26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd2a:	4422      	add	r2, r4
 800bd2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd34:	3302      	adds	r3, #2
 800bd36:	e7c4      	b.n	800bcc2 <_printf_common+0x62>
 800bd38:	2301      	movs	r3, #1
 800bd3a:	4622      	mov	r2, r4
 800bd3c:	4639      	mov	r1, r7
 800bd3e:	4630      	mov	r0, r6
 800bd40:	47c0      	blx	r8
 800bd42:	3001      	adds	r0, #1
 800bd44:	d0e6      	beq.n	800bd14 <_printf_common+0xb4>
 800bd46:	f109 0901 	add.w	r9, r9, #1
 800bd4a:	e7d7      	b.n	800bcfc <_printf_common+0x9c>

0800bd4c <_printf_i>:
 800bd4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd50:	4617      	mov	r7, r2
 800bd52:	7e0a      	ldrb	r2, [r1, #24]
 800bd54:	b085      	sub	sp, #20
 800bd56:	2a6e      	cmp	r2, #110	; 0x6e
 800bd58:	4698      	mov	r8, r3
 800bd5a:	4606      	mov	r6, r0
 800bd5c:	460c      	mov	r4, r1
 800bd5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd60:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800bd64:	f000 80bc 	beq.w	800bee0 <_printf_i+0x194>
 800bd68:	d81a      	bhi.n	800bda0 <_printf_i+0x54>
 800bd6a:	2a63      	cmp	r2, #99	; 0x63
 800bd6c:	d02e      	beq.n	800bdcc <_printf_i+0x80>
 800bd6e:	d80a      	bhi.n	800bd86 <_printf_i+0x3a>
 800bd70:	2a00      	cmp	r2, #0
 800bd72:	f000 80c8 	beq.w	800bf06 <_printf_i+0x1ba>
 800bd76:	2a58      	cmp	r2, #88	; 0x58
 800bd78:	f000 808a 	beq.w	800be90 <_printf_i+0x144>
 800bd7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd80:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800bd84:	e02a      	b.n	800bddc <_printf_i+0x90>
 800bd86:	2a64      	cmp	r2, #100	; 0x64
 800bd88:	d001      	beq.n	800bd8e <_printf_i+0x42>
 800bd8a:	2a69      	cmp	r2, #105	; 0x69
 800bd8c:	d1f6      	bne.n	800bd7c <_printf_i+0x30>
 800bd8e:	6821      	ldr	r1, [r4, #0]
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	f011 0f80 	tst.w	r1, #128	; 0x80
 800bd96:	d023      	beq.n	800bde0 <_printf_i+0x94>
 800bd98:	1d11      	adds	r1, r2, #4
 800bd9a:	6019      	str	r1, [r3, #0]
 800bd9c:	6813      	ldr	r3, [r2, #0]
 800bd9e:	e027      	b.n	800bdf0 <_printf_i+0xa4>
 800bda0:	2a73      	cmp	r2, #115	; 0x73
 800bda2:	f000 80b4 	beq.w	800bf0e <_printf_i+0x1c2>
 800bda6:	d808      	bhi.n	800bdba <_printf_i+0x6e>
 800bda8:	2a6f      	cmp	r2, #111	; 0x6f
 800bdaa:	d02a      	beq.n	800be02 <_printf_i+0xb6>
 800bdac:	2a70      	cmp	r2, #112	; 0x70
 800bdae:	d1e5      	bne.n	800bd7c <_printf_i+0x30>
 800bdb0:	680a      	ldr	r2, [r1, #0]
 800bdb2:	f042 0220 	orr.w	r2, r2, #32
 800bdb6:	600a      	str	r2, [r1, #0]
 800bdb8:	e003      	b.n	800bdc2 <_printf_i+0x76>
 800bdba:	2a75      	cmp	r2, #117	; 0x75
 800bdbc:	d021      	beq.n	800be02 <_printf_i+0xb6>
 800bdbe:	2a78      	cmp	r2, #120	; 0x78
 800bdc0:	d1dc      	bne.n	800bd7c <_printf_i+0x30>
 800bdc2:	2278      	movs	r2, #120	; 0x78
 800bdc4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800bdc8:	496e      	ldr	r1, [pc, #440]	; (800bf84 <_printf_i+0x238>)
 800bdca:	e064      	b.n	800be96 <_printf_i+0x14a>
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800bdd2:	1d11      	adds	r1, r2, #4
 800bdd4:	6019      	str	r1, [r3, #0]
 800bdd6:	6813      	ldr	r3, [r2, #0]
 800bdd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bddc:	2301      	movs	r3, #1
 800bdde:	e0a3      	b.n	800bf28 <_printf_i+0x1dc>
 800bde0:	f011 0f40 	tst.w	r1, #64	; 0x40
 800bde4:	f102 0104 	add.w	r1, r2, #4
 800bde8:	6019      	str	r1, [r3, #0]
 800bdea:	d0d7      	beq.n	800bd9c <_printf_i+0x50>
 800bdec:	f9b2 3000 	ldrsh.w	r3, [r2]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	da03      	bge.n	800bdfc <_printf_i+0xb0>
 800bdf4:	222d      	movs	r2, #45	; 0x2d
 800bdf6:	425b      	negs	r3, r3
 800bdf8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bdfc:	4962      	ldr	r1, [pc, #392]	; (800bf88 <_printf_i+0x23c>)
 800bdfe:	220a      	movs	r2, #10
 800be00:	e017      	b.n	800be32 <_printf_i+0xe6>
 800be02:	6820      	ldr	r0, [r4, #0]
 800be04:	6819      	ldr	r1, [r3, #0]
 800be06:	f010 0f80 	tst.w	r0, #128	; 0x80
 800be0a:	d003      	beq.n	800be14 <_printf_i+0xc8>
 800be0c:	1d08      	adds	r0, r1, #4
 800be0e:	6018      	str	r0, [r3, #0]
 800be10:	680b      	ldr	r3, [r1, #0]
 800be12:	e006      	b.n	800be22 <_printf_i+0xd6>
 800be14:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be18:	f101 0004 	add.w	r0, r1, #4
 800be1c:	6018      	str	r0, [r3, #0]
 800be1e:	d0f7      	beq.n	800be10 <_printf_i+0xc4>
 800be20:	880b      	ldrh	r3, [r1, #0]
 800be22:	4959      	ldr	r1, [pc, #356]	; (800bf88 <_printf_i+0x23c>)
 800be24:	2a6f      	cmp	r2, #111	; 0x6f
 800be26:	bf14      	ite	ne
 800be28:	220a      	movne	r2, #10
 800be2a:	2208      	moveq	r2, #8
 800be2c:	2000      	movs	r0, #0
 800be2e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800be32:	6865      	ldr	r5, [r4, #4]
 800be34:	60a5      	str	r5, [r4, #8]
 800be36:	2d00      	cmp	r5, #0
 800be38:	f2c0 809c 	blt.w	800bf74 <_printf_i+0x228>
 800be3c:	6820      	ldr	r0, [r4, #0]
 800be3e:	f020 0004 	bic.w	r0, r0, #4
 800be42:	6020      	str	r0, [r4, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d13f      	bne.n	800bec8 <_printf_i+0x17c>
 800be48:	2d00      	cmp	r5, #0
 800be4a:	f040 8095 	bne.w	800bf78 <_printf_i+0x22c>
 800be4e:	4675      	mov	r5, lr
 800be50:	2a08      	cmp	r2, #8
 800be52:	d10b      	bne.n	800be6c <_printf_i+0x120>
 800be54:	6823      	ldr	r3, [r4, #0]
 800be56:	07da      	lsls	r2, r3, #31
 800be58:	d508      	bpl.n	800be6c <_printf_i+0x120>
 800be5a:	6923      	ldr	r3, [r4, #16]
 800be5c:	6862      	ldr	r2, [r4, #4]
 800be5e:	429a      	cmp	r2, r3
 800be60:	bfde      	ittt	le
 800be62:	2330      	movle	r3, #48	; 0x30
 800be64:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be68:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be6c:	ebae 0305 	sub.w	r3, lr, r5
 800be70:	6123      	str	r3, [r4, #16]
 800be72:	f8cd 8000 	str.w	r8, [sp]
 800be76:	463b      	mov	r3, r7
 800be78:	aa03      	add	r2, sp, #12
 800be7a:	4621      	mov	r1, r4
 800be7c:	4630      	mov	r0, r6
 800be7e:	f7ff feef 	bl	800bc60 <_printf_common>
 800be82:	3001      	adds	r0, #1
 800be84:	d155      	bne.n	800bf32 <_printf_i+0x1e6>
 800be86:	f04f 30ff 	mov.w	r0, #4294967295
 800be8a:	b005      	add	sp, #20
 800be8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be90:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800be94:	493c      	ldr	r1, [pc, #240]	; (800bf88 <_printf_i+0x23c>)
 800be96:	6822      	ldr	r2, [r4, #0]
 800be98:	6818      	ldr	r0, [r3, #0]
 800be9a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800be9e:	f100 0504 	add.w	r5, r0, #4
 800bea2:	601d      	str	r5, [r3, #0]
 800bea4:	d001      	beq.n	800beaa <_printf_i+0x15e>
 800bea6:	6803      	ldr	r3, [r0, #0]
 800bea8:	e002      	b.n	800beb0 <_printf_i+0x164>
 800beaa:	0655      	lsls	r5, r2, #25
 800beac:	d5fb      	bpl.n	800bea6 <_printf_i+0x15a>
 800beae:	8803      	ldrh	r3, [r0, #0]
 800beb0:	07d0      	lsls	r0, r2, #31
 800beb2:	bf44      	itt	mi
 800beb4:	f042 0220 	orrmi.w	r2, r2, #32
 800beb8:	6022      	strmi	r2, [r4, #0]
 800beba:	b91b      	cbnz	r3, 800bec4 <_printf_i+0x178>
 800bebc:	6822      	ldr	r2, [r4, #0]
 800bebe:	f022 0220 	bic.w	r2, r2, #32
 800bec2:	6022      	str	r2, [r4, #0]
 800bec4:	2210      	movs	r2, #16
 800bec6:	e7b1      	b.n	800be2c <_printf_i+0xe0>
 800bec8:	4675      	mov	r5, lr
 800beca:	fbb3 f0f2 	udiv	r0, r3, r2
 800bece:	fb02 3310 	mls	r3, r2, r0, r3
 800bed2:	5ccb      	ldrb	r3, [r1, r3]
 800bed4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bed8:	4603      	mov	r3, r0
 800beda:	2800      	cmp	r0, #0
 800bedc:	d1f5      	bne.n	800beca <_printf_i+0x17e>
 800bede:	e7b7      	b.n	800be50 <_printf_i+0x104>
 800bee0:	6808      	ldr	r0, [r1, #0]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	6949      	ldr	r1, [r1, #20]
 800bee6:	f010 0f80 	tst.w	r0, #128	; 0x80
 800beea:	d004      	beq.n	800bef6 <_printf_i+0x1aa>
 800beec:	1d10      	adds	r0, r2, #4
 800beee:	6018      	str	r0, [r3, #0]
 800bef0:	6813      	ldr	r3, [r2, #0]
 800bef2:	6019      	str	r1, [r3, #0]
 800bef4:	e007      	b.n	800bf06 <_printf_i+0x1ba>
 800bef6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800befa:	f102 0004 	add.w	r0, r2, #4
 800befe:	6018      	str	r0, [r3, #0]
 800bf00:	6813      	ldr	r3, [r2, #0]
 800bf02:	d0f6      	beq.n	800bef2 <_printf_i+0x1a6>
 800bf04:	8019      	strh	r1, [r3, #0]
 800bf06:	2300      	movs	r3, #0
 800bf08:	6123      	str	r3, [r4, #16]
 800bf0a:	4675      	mov	r5, lr
 800bf0c:	e7b1      	b.n	800be72 <_printf_i+0x126>
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	1d11      	adds	r1, r2, #4
 800bf12:	6019      	str	r1, [r3, #0]
 800bf14:	6815      	ldr	r5, [r2, #0]
 800bf16:	6862      	ldr	r2, [r4, #4]
 800bf18:	2100      	movs	r1, #0
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	f7f4 f970 	bl	8000200 <memchr>
 800bf20:	b108      	cbz	r0, 800bf26 <_printf_i+0x1da>
 800bf22:	1b40      	subs	r0, r0, r5
 800bf24:	6060      	str	r0, [r4, #4]
 800bf26:	6863      	ldr	r3, [r4, #4]
 800bf28:	6123      	str	r3, [r4, #16]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf30:	e79f      	b.n	800be72 <_printf_i+0x126>
 800bf32:	6923      	ldr	r3, [r4, #16]
 800bf34:	462a      	mov	r2, r5
 800bf36:	4639      	mov	r1, r7
 800bf38:	4630      	mov	r0, r6
 800bf3a:	47c0      	blx	r8
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	d0a2      	beq.n	800be86 <_printf_i+0x13a>
 800bf40:	6823      	ldr	r3, [r4, #0]
 800bf42:	079b      	lsls	r3, r3, #30
 800bf44:	d507      	bpl.n	800bf56 <_printf_i+0x20a>
 800bf46:	2500      	movs	r5, #0
 800bf48:	f104 0919 	add.w	r9, r4, #25
 800bf4c:	68e3      	ldr	r3, [r4, #12]
 800bf4e:	9a03      	ldr	r2, [sp, #12]
 800bf50:	1a9b      	subs	r3, r3, r2
 800bf52:	429d      	cmp	r5, r3
 800bf54:	db05      	blt.n	800bf62 <_printf_i+0x216>
 800bf56:	68e0      	ldr	r0, [r4, #12]
 800bf58:	9b03      	ldr	r3, [sp, #12]
 800bf5a:	4298      	cmp	r0, r3
 800bf5c:	bfb8      	it	lt
 800bf5e:	4618      	movlt	r0, r3
 800bf60:	e793      	b.n	800be8a <_printf_i+0x13e>
 800bf62:	2301      	movs	r3, #1
 800bf64:	464a      	mov	r2, r9
 800bf66:	4639      	mov	r1, r7
 800bf68:	4630      	mov	r0, r6
 800bf6a:	47c0      	blx	r8
 800bf6c:	3001      	adds	r0, #1
 800bf6e:	d08a      	beq.n	800be86 <_printf_i+0x13a>
 800bf70:	3501      	adds	r5, #1
 800bf72:	e7eb      	b.n	800bf4c <_printf_i+0x200>
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d1a7      	bne.n	800bec8 <_printf_i+0x17c>
 800bf78:	780b      	ldrb	r3, [r1, #0]
 800bf7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf82:	e765      	b.n	800be50 <_printf_i+0x104>
 800bf84:	0800cb3e 	.word	0x0800cb3e
 800bf88:	0800cb2d 	.word	0x0800cb2d

0800bf8c <_scanf_chars>:
 800bf8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf90:	4615      	mov	r5, r2
 800bf92:	688a      	ldr	r2, [r1, #8]
 800bf94:	4680      	mov	r8, r0
 800bf96:	460c      	mov	r4, r1
 800bf98:	b932      	cbnz	r2, 800bfa8 <_scanf_chars+0x1c>
 800bf9a:	698a      	ldr	r2, [r1, #24]
 800bf9c:	2a00      	cmp	r2, #0
 800bf9e:	bf0c      	ite	eq
 800bfa0:	2201      	moveq	r2, #1
 800bfa2:	f04f 32ff 	movne.w	r2, #4294967295
 800bfa6:	608a      	str	r2, [r1, #8]
 800bfa8:	6822      	ldr	r2, [r4, #0]
 800bfaa:	06d1      	lsls	r1, r2, #27
 800bfac:	bf5f      	itttt	pl
 800bfae:	681a      	ldrpl	r2, [r3, #0]
 800bfb0:	1d11      	addpl	r1, r2, #4
 800bfb2:	6019      	strpl	r1, [r3, #0]
 800bfb4:	6817      	ldrpl	r7, [r2, #0]
 800bfb6:	2600      	movs	r6, #0
 800bfb8:	69a3      	ldr	r3, [r4, #24]
 800bfba:	b1db      	cbz	r3, 800bff4 <_scanf_chars+0x68>
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d107      	bne.n	800bfd0 <_scanf_chars+0x44>
 800bfc0:	682b      	ldr	r3, [r5, #0]
 800bfc2:	6962      	ldr	r2, [r4, #20]
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	5cd3      	ldrb	r3, [r2, r3]
 800bfc8:	b9a3      	cbnz	r3, 800bff4 <_scanf_chars+0x68>
 800bfca:	2e00      	cmp	r6, #0
 800bfcc:	d132      	bne.n	800c034 <_scanf_chars+0xa8>
 800bfce:	e006      	b.n	800bfde <_scanf_chars+0x52>
 800bfd0:	2b02      	cmp	r3, #2
 800bfd2:	d007      	beq.n	800bfe4 <_scanf_chars+0x58>
 800bfd4:	2e00      	cmp	r6, #0
 800bfd6:	d12d      	bne.n	800c034 <_scanf_chars+0xa8>
 800bfd8:	69a3      	ldr	r3, [r4, #24]
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d12a      	bne.n	800c034 <_scanf_chars+0xa8>
 800bfde:	2001      	movs	r0, #1
 800bfe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfe4:	f000 fae4 	bl	800c5b0 <__locale_ctype_ptr>
 800bfe8:	682b      	ldr	r3, [r5, #0]
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	4418      	add	r0, r3
 800bfee:	7843      	ldrb	r3, [r0, #1]
 800bff0:	071b      	lsls	r3, r3, #28
 800bff2:	d4ef      	bmi.n	800bfd4 <_scanf_chars+0x48>
 800bff4:	6823      	ldr	r3, [r4, #0]
 800bff6:	06da      	lsls	r2, r3, #27
 800bff8:	bf5e      	ittt	pl
 800bffa:	682b      	ldrpl	r3, [r5, #0]
 800bffc:	781b      	ldrbpl	r3, [r3, #0]
 800bffe:	703b      	strbpl	r3, [r7, #0]
 800c000:	682a      	ldr	r2, [r5, #0]
 800c002:	686b      	ldr	r3, [r5, #4]
 800c004:	f102 0201 	add.w	r2, r2, #1
 800c008:	602a      	str	r2, [r5, #0]
 800c00a:	68a2      	ldr	r2, [r4, #8]
 800c00c:	f103 33ff 	add.w	r3, r3, #4294967295
 800c010:	f102 32ff 	add.w	r2, r2, #4294967295
 800c014:	606b      	str	r3, [r5, #4]
 800c016:	f106 0601 	add.w	r6, r6, #1
 800c01a:	bf58      	it	pl
 800c01c:	3701      	addpl	r7, #1
 800c01e:	60a2      	str	r2, [r4, #8]
 800c020:	b142      	cbz	r2, 800c034 <_scanf_chars+0xa8>
 800c022:	2b00      	cmp	r3, #0
 800c024:	dcc8      	bgt.n	800bfb8 <_scanf_chars+0x2c>
 800c026:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c02a:	4629      	mov	r1, r5
 800c02c:	4640      	mov	r0, r8
 800c02e:	4798      	blx	r3
 800c030:	2800      	cmp	r0, #0
 800c032:	d0c1      	beq.n	800bfb8 <_scanf_chars+0x2c>
 800c034:	6823      	ldr	r3, [r4, #0]
 800c036:	f013 0310 	ands.w	r3, r3, #16
 800c03a:	d105      	bne.n	800c048 <_scanf_chars+0xbc>
 800c03c:	68e2      	ldr	r2, [r4, #12]
 800c03e:	3201      	adds	r2, #1
 800c040:	60e2      	str	r2, [r4, #12]
 800c042:	69a2      	ldr	r2, [r4, #24]
 800c044:	b102      	cbz	r2, 800c048 <_scanf_chars+0xbc>
 800c046:	703b      	strb	r3, [r7, #0]
 800c048:	6923      	ldr	r3, [r4, #16]
 800c04a:	441e      	add	r6, r3
 800c04c:	6126      	str	r6, [r4, #16]
 800c04e:	2000      	movs	r0, #0
 800c050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c054 <_scanf_i>:
 800c054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c058:	469a      	mov	sl, r3
 800c05a:	4b74      	ldr	r3, [pc, #464]	; (800c22c <_scanf_i+0x1d8>)
 800c05c:	460c      	mov	r4, r1
 800c05e:	4683      	mov	fp, r0
 800c060:	4616      	mov	r6, r2
 800c062:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c066:	b087      	sub	sp, #28
 800c068:	ab03      	add	r3, sp, #12
 800c06a:	68a7      	ldr	r7, [r4, #8]
 800c06c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c070:	4b6f      	ldr	r3, [pc, #444]	; (800c230 <_scanf_i+0x1dc>)
 800c072:	69a1      	ldr	r1, [r4, #24]
 800c074:	4a6f      	ldr	r2, [pc, #444]	; (800c234 <_scanf_i+0x1e0>)
 800c076:	2903      	cmp	r1, #3
 800c078:	bf18      	it	ne
 800c07a:	461a      	movne	r2, r3
 800c07c:	1e7b      	subs	r3, r7, #1
 800c07e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800c082:	bf84      	itt	hi
 800c084:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c088:	60a3      	strhi	r3, [r4, #8]
 800c08a:	6823      	ldr	r3, [r4, #0]
 800c08c:	9200      	str	r2, [sp, #0]
 800c08e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c092:	bf88      	it	hi
 800c094:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c098:	f104 091c 	add.w	r9, r4, #28
 800c09c:	6023      	str	r3, [r4, #0]
 800c09e:	bf8c      	ite	hi
 800c0a0:	197f      	addhi	r7, r7, r5
 800c0a2:	2700      	movls	r7, #0
 800c0a4:	464b      	mov	r3, r9
 800c0a6:	f04f 0800 	mov.w	r8, #0
 800c0aa:	9301      	str	r3, [sp, #4]
 800c0ac:	6831      	ldr	r1, [r6, #0]
 800c0ae:	ab03      	add	r3, sp, #12
 800c0b0:	2202      	movs	r2, #2
 800c0b2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c0b6:	7809      	ldrb	r1, [r1, #0]
 800c0b8:	f7f4 f8a2 	bl	8000200 <memchr>
 800c0bc:	9b01      	ldr	r3, [sp, #4]
 800c0be:	b328      	cbz	r0, 800c10c <_scanf_i+0xb8>
 800c0c0:	f1b8 0f01 	cmp.w	r8, #1
 800c0c4:	d156      	bne.n	800c174 <_scanf_i+0x120>
 800c0c6:	6862      	ldr	r2, [r4, #4]
 800c0c8:	b92a      	cbnz	r2, 800c0d6 <_scanf_i+0x82>
 800c0ca:	2208      	movs	r2, #8
 800c0cc:	6062      	str	r2, [r4, #4]
 800c0ce:	6822      	ldr	r2, [r4, #0]
 800c0d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0d4:	6022      	str	r2, [r4, #0]
 800c0d6:	6822      	ldr	r2, [r4, #0]
 800c0d8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c0dc:	6022      	str	r2, [r4, #0]
 800c0de:	68a2      	ldr	r2, [r4, #8]
 800c0e0:	1e51      	subs	r1, r2, #1
 800c0e2:	60a1      	str	r1, [r4, #8]
 800c0e4:	b192      	cbz	r2, 800c10c <_scanf_i+0xb8>
 800c0e6:	6832      	ldr	r2, [r6, #0]
 800c0e8:	1c51      	adds	r1, r2, #1
 800c0ea:	6031      	str	r1, [r6, #0]
 800c0ec:	7812      	ldrb	r2, [r2, #0]
 800c0ee:	701a      	strb	r2, [r3, #0]
 800c0f0:	1c5d      	adds	r5, r3, #1
 800c0f2:	6873      	ldr	r3, [r6, #4]
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	6073      	str	r3, [r6, #4]
 800c0fa:	dc06      	bgt.n	800c10a <_scanf_i+0xb6>
 800c0fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c100:	4631      	mov	r1, r6
 800c102:	4658      	mov	r0, fp
 800c104:	4798      	blx	r3
 800c106:	2800      	cmp	r0, #0
 800c108:	d176      	bne.n	800c1f8 <_scanf_i+0x1a4>
 800c10a:	462b      	mov	r3, r5
 800c10c:	f108 0801 	add.w	r8, r8, #1
 800c110:	f1b8 0f03 	cmp.w	r8, #3
 800c114:	d1c9      	bne.n	800c0aa <_scanf_i+0x56>
 800c116:	6862      	ldr	r2, [r4, #4]
 800c118:	b90a      	cbnz	r2, 800c11e <_scanf_i+0xca>
 800c11a:	220a      	movs	r2, #10
 800c11c:	6062      	str	r2, [r4, #4]
 800c11e:	6862      	ldr	r2, [r4, #4]
 800c120:	4945      	ldr	r1, [pc, #276]	; (800c238 <_scanf_i+0x1e4>)
 800c122:	6960      	ldr	r0, [r4, #20]
 800c124:	9301      	str	r3, [sp, #4]
 800c126:	1a89      	subs	r1, r1, r2
 800c128:	f000 f888 	bl	800c23c <__sccl>
 800c12c:	9b01      	ldr	r3, [sp, #4]
 800c12e:	f04f 0800 	mov.w	r8, #0
 800c132:	461d      	mov	r5, r3
 800c134:	68a3      	ldr	r3, [r4, #8]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d038      	beq.n	800c1ac <_scanf_i+0x158>
 800c13a:	6831      	ldr	r1, [r6, #0]
 800c13c:	6960      	ldr	r0, [r4, #20]
 800c13e:	780a      	ldrb	r2, [r1, #0]
 800c140:	5c80      	ldrb	r0, [r0, r2]
 800c142:	2800      	cmp	r0, #0
 800c144:	d032      	beq.n	800c1ac <_scanf_i+0x158>
 800c146:	2a30      	cmp	r2, #48	; 0x30
 800c148:	6822      	ldr	r2, [r4, #0]
 800c14a:	d121      	bne.n	800c190 <_scanf_i+0x13c>
 800c14c:	0510      	lsls	r0, r2, #20
 800c14e:	d51f      	bpl.n	800c190 <_scanf_i+0x13c>
 800c150:	f108 0801 	add.w	r8, r8, #1
 800c154:	b117      	cbz	r7, 800c15c <_scanf_i+0x108>
 800c156:	3301      	adds	r3, #1
 800c158:	3f01      	subs	r7, #1
 800c15a:	60a3      	str	r3, [r4, #8]
 800c15c:	6873      	ldr	r3, [r6, #4]
 800c15e:	3b01      	subs	r3, #1
 800c160:	2b00      	cmp	r3, #0
 800c162:	6073      	str	r3, [r6, #4]
 800c164:	dd1b      	ble.n	800c19e <_scanf_i+0x14a>
 800c166:	6833      	ldr	r3, [r6, #0]
 800c168:	3301      	adds	r3, #1
 800c16a:	6033      	str	r3, [r6, #0]
 800c16c:	68a3      	ldr	r3, [r4, #8]
 800c16e:	3b01      	subs	r3, #1
 800c170:	60a3      	str	r3, [r4, #8]
 800c172:	e7df      	b.n	800c134 <_scanf_i+0xe0>
 800c174:	f1b8 0f02 	cmp.w	r8, #2
 800c178:	d1b1      	bne.n	800c0de <_scanf_i+0x8a>
 800c17a:	6822      	ldr	r2, [r4, #0]
 800c17c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c180:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c184:	d1c2      	bne.n	800c10c <_scanf_i+0xb8>
 800c186:	2110      	movs	r1, #16
 800c188:	6061      	str	r1, [r4, #4]
 800c18a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c18e:	e7a5      	b.n	800c0dc <_scanf_i+0x88>
 800c190:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c194:	6022      	str	r2, [r4, #0]
 800c196:	780b      	ldrb	r3, [r1, #0]
 800c198:	702b      	strb	r3, [r5, #0]
 800c19a:	3501      	adds	r5, #1
 800c19c:	e7de      	b.n	800c15c <_scanf_i+0x108>
 800c19e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c1a2:	4631      	mov	r1, r6
 800c1a4:	4658      	mov	r0, fp
 800c1a6:	4798      	blx	r3
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	d0df      	beq.n	800c16c <_scanf_i+0x118>
 800c1ac:	6823      	ldr	r3, [r4, #0]
 800c1ae:	05d9      	lsls	r1, r3, #23
 800c1b0:	d50c      	bpl.n	800c1cc <_scanf_i+0x178>
 800c1b2:	454d      	cmp	r5, r9
 800c1b4:	d908      	bls.n	800c1c8 <_scanf_i+0x174>
 800c1b6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c1ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c1be:	4632      	mov	r2, r6
 800c1c0:	4658      	mov	r0, fp
 800c1c2:	4798      	blx	r3
 800c1c4:	1e6f      	subs	r7, r5, #1
 800c1c6:	463d      	mov	r5, r7
 800c1c8:	454d      	cmp	r5, r9
 800c1ca:	d02c      	beq.n	800c226 <_scanf_i+0x1d2>
 800c1cc:	6822      	ldr	r2, [r4, #0]
 800c1ce:	f012 0210 	ands.w	r2, r2, #16
 800c1d2:	d11e      	bne.n	800c212 <_scanf_i+0x1be>
 800c1d4:	702a      	strb	r2, [r5, #0]
 800c1d6:	6863      	ldr	r3, [r4, #4]
 800c1d8:	9e00      	ldr	r6, [sp, #0]
 800c1da:	4649      	mov	r1, r9
 800c1dc:	4658      	mov	r0, fp
 800c1de:	47b0      	blx	r6
 800c1e0:	6822      	ldr	r2, [r4, #0]
 800c1e2:	f8da 3000 	ldr.w	r3, [sl]
 800c1e6:	f012 0f20 	tst.w	r2, #32
 800c1ea:	d008      	beq.n	800c1fe <_scanf_i+0x1aa>
 800c1ec:	1d1a      	adds	r2, r3, #4
 800c1ee:	f8ca 2000 	str.w	r2, [sl]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	6018      	str	r0, [r3, #0]
 800c1f6:	e009      	b.n	800c20c <_scanf_i+0x1b8>
 800c1f8:	f04f 0800 	mov.w	r8, #0
 800c1fc:	e7d6      	b.n	800c1ac <_scanf_i+0x158>
 800c1fe:	07d2      	lsls	r2, r2, #31
 800c200:	d5f4      	bpl.n	800c1ec <_scanf_i+0x198>
 800c202:	1d1a      	adds	r2, r3, #4
 800c204:	f8ca 2000 	str.w	r2, [sl]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	8018      	strh	r0, [r3, #0]
 800c20c:	68e3      	ldr	r3, [r4, #12]
 800c20e:	3301      	adds	r3, #1
 800c210:	60e3      	str	r3, [r4, #12]
 800c212:	eba5 0509 	sub.w	r5, r5, r9
 800c216:	44a8      	add	r8, r5
 800c218:	6925      	ldr	r5, [r4, #16]
 800c21a:	4445      	add	r5, r8
 800c21c:	6125      	str	r5, [r4, #16]
 800c21e:	2000      	movs	r0, #0
 800c220:	b007      	add	sp, #28
 800c222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c226:	2001      	movs	r0, #1
 800c228:	e7fa      	b.n	800c220 <_scanf_i+0x1cc>
 800c22a:	bf00      	nop
 800c22c:	0800c6d0 	.word	0x0800c6d0
 800c230:	0800c4e1 	.word	0x0800c4e1
 800c234:	0800c3c1 	.word	0x0800c3c1
 800c238:	0800cb5f 	.word	0x0800cb5f

0800c23c <__sccl>:
 800c23c:	b570      	push	{r4, r5, r6, lr}
 800c23e:	780b      	ldrb	r3, [r1, #0]
 800c240:	2b5e      	cmp	r3, #94	; 0x5e
 800c242:	bf13      	iteet	ne
 800c244:	1c4a      	addne	r2, r1, #1
 800c246:	1c8a      	addeq	r2, r1, #2
 800c248:	784b      	ldrbeq	r3, [r1, #1]
 800c24a:	2100      	movne	r1, #0
 800c24c:	bf08      	it	eq
 800c24e:	2101      	moveq	r1, #1
 800c250:	1e44      	subs	r4, r0, #1
 800c252:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800c256:	f804 1f01 	strb.w	r1, [r4, #1]!
 800c25a:	42a5      	cmp	r5, r4
 800c25c:	d1fb      	bne.n	800c256 <__sccl+0x1a>
 800c25e:	b913      	cbnz	r3, 800c266 <__sccl+0x2a>
 800c260:	3a01      	subs	r2, #1
 800c262:	4610      	mov	r0, r2
 800c264:	bd70      	pop	{r4, r5, r6, pc}
 800c266:	f081 0401 	eor.w	r4, r1, #1
 800c26a:	54c4      	strb	r4, [r0, r3]
 800c26c:	4611      	mov	r1, r2
 800c26e:	780d      	ldrb	r5, [r1, #0]
 800c270:	2d2d      	cmp	r5, #45	; 0x2d
 800c272:	f101 0201 	add.w	r2, r1, #1
 800c276:	d006      	beq.n	800c286 <__sccl+0x4a>
 800c278:	2d5d      	cmp	r5, #93	; 0x5d
 800c27a:	d0f2      	beq.n	800c262 <__sccl+0x26>
 800c27c:	b90d      	cbnz	r5, 800c282 <__sccl+0x46>
 800c27e:	460a      	mov	r2, r1
 800c280:	e7ef      	b.n	800c262 <__sccl+0x26>
 800c282:	462b      	mov	r3, r5
 800c284:	e7f1      	b.n	800c26a <__sccl+0x2e>
 800c286:	784e      	ldrb	r6, [r1, #1]
 800c288:	2e5d      	cmp	r6, #93	; 0x5d
 800c28a:	d0fa      	beq.n	800c282 <__sccl+0x46>
 800c28c:	42b3      	cmp	r3, r6
 800c28e:	dcf8      	bgt.n	800c282 <__sccl+0x46>
 800c290:	3102      	adds	r1, #2
 800c292:	3301      	adds	r3, #1
 800c294:	429e      	cmp	r6, r3
 800c296:	54c4      	strb	r4, [r0, r3]
 800c298:	dcfb      	bgt.n	800c292 <__sccl+0x56>
 800c29a:	e7e8      	b.n	800c26e <__sccl+0x32>

0800c29c <strncmp>:
 800c29c:	b510      	push	{r4, lr}
 800c29e:	b16a      	cbz	r2, 800c2bc <strncmp+0x20>
 800c2a0:	3901      	subs	r1, #1
 800c2a2:	1884      	adds	r4, r0, r2
 800c2a4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c2a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d103      	bne.n	800c2b8 <strncmp+0x1c>
 800c2b0:	42a0      	cmp	r0, r4
 800c2b2:	d001      	beq.n	800c2b8 <strncmp+0x1c>
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1f5      	bne.n	800c2a4 <strncmp+0x8>
 800c2b8:	1a98      	subs	r0, r3, r2
 800c2ba:	bd10      	pop	{r4, pc}
 800c2bc:	4610      	mov	r0, r2
 800c2be:	bd10      	pop	{r4, pc}

0800c2c0 <_strtol_l.isra.0>:
 800c2c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c4:	4680      	mov	r8, r0
 800c2c6:	4689      	mov	r9, r1
 800c2c8:	4692      	mov	sl, r2
 800c2ca:	461f      	mov	r7, r3
 800c2cc:	468b      	mov	fp, r1
 800c2ce:	465d      	mov	r5, fp
 800c2d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c2d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2d6:	f000 f968 	bl	800c5aa <__locale_ctype_ptr_l>
 800c2da:	4420      	add	r0, r4
 800c2dc:	7846      	ldrb	r6, [r0, #1]
 800c2de:	f016 0608 	ands.w	r6, r6, #8
 800c2e2:	d10b      	bne.n	800c2fc <_strtol_l.isra.0+0x3c>
 800c2e4:	2c2d      	cmp	r4, #45	; 0x2d
 800c2e6:	d10b      	bne.n	800c300 <_strtol_l.isra.0+0x40>
 800c2e8:	782c      	ldrb	r4, [r5, #0]
 800c2ea:	2601      	movs	r6, #1
 800c2ec:	f10b 0502 	add.w	r5, fp, #2
 800c2f0:	b167      	cbz	r7, 800c30c <_strtol_l.isra.0+0x4c>
 800c2f2:	2f10      	cmp	r7, #16
 800c2f4:	d114      	bne.n	800c320 <_strtol_l.isra.0+0x60>
 800c2f6:	2c30      	cmp	r4, #48	; 0x30
 800c2f8:	d00a      	beq.n	800c310 <_strtol_l.isra.0+0x50>
 800c2fa:	e011      	b.n	800c320 <_strtol_l.isra.0+0x60>
 800c2fc:	46ab      	mov	fp, r5
 800c2fe:	e7e6      	b.n	800c2ce <_strtol_l.isra.0+0xe>
 800c300:	2c2b      	cmp	r4, #43	; 0x2b
 800c302:	bf04      	itt	eq
 800c304:	782c      	ldrbeq	r4, [r5, #0]
 800c306:	f10b 0502 	addeq.w	r5, fp, #2
 800c30a:	e7f1      	b.n	800c2f0 <_strtol_l.isra.0+0x30>
 800c30c:	2c30      	cmp	r4, #48	; 0x30
 800c30e:	d127      	bne.n	800c360 <_strtol_l.isra.0+0xa0>
 800c310:	782b      	ldrb	r3, [r5, #0]
 800c312:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c316:	2b58      	cmp	r3, #88	; 0x58
 800c318:	d14b      	bne.n	800c3b2 <_strtol_l.isra.0+0xf2>
 800c31a:	786c      	ldrb	r4, [r5, #1]
 800c31c:	2710      	movs	r7, #16
 800c31e:	3502      	adds	r5, #2
 800c320:	2e00      	cmp	r6, #0
 800c322:	bf0c      	ite	eq
 800c324:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c328:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c32c:	2200      	movs	r2, #0
 800c32e:	fbb1 fef7 	udiv	lr, r1, r7
 800c332:	4610      	mov	r0, r2
 800c334:	fb07 1c1e 	mls	ip, r7, lr, r1
 800c338:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c33c:	2b09      	cmp	r3, #9
 800c33e:	d811      	bhi.n	800c364 <_strtol_l.isra.0+0xa4>
 800c340:	461c      	mov	r4, r3
 800c342:	42a7      	cmp	r7, r4
 800c344:	dd1d      	ble.n	800c382 <_strtol_l.isra.0+0xc2>
 800c346:	1c53      	adds	r3, r2, #1
 800c348:	d007      	beq.n	800c35a <_strtol_l.isra.0+0x9a>
 800c34a:	4586      	cmp	lr, r0
 800c34c:	d316      	bcc.n	800c37c <_strtol_l.isra.0+0xbc>
 800c34e:	d101      	bne.n	800c354 <_strtol_l.isra.0+0x94>
 800c350:	45a4      	cmp	ip, r4
 800c352:	db13      	blt.n	800c37c <_strtol_l.isra.0+0xbc>
 800c354:	fb00 4007 	mla	r0, r0, r7, r4
 800c358:	2201      	movs	r2, #1
 800c35a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c35e:	e7eb      	b.n	800c338 <_strtol_l.isra.0+0x78>
 800c360:	270a      	movs	r7, #10
 800c362:	e7dd      	b.n	800c320 <_strtol_l.isra.0+0x60>
 800c364:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c368:	2b19      	cmp	r3, #25
 800c36a:	d801      	bhi.n	800c370 <_strtol_l.isra.0+0xb0>
 800c36c:	3c37      	subs	r4, #55	; 0x37
 800c36e:	e7e8      	b.n	800c342 <_strtol_l.isra.0+0x82>
 800c370:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c374:	2b19      	cmp	r3, #25
 800c376:	d804      	bhi.n	800c382 <_strtol_l.isra.0+0xc2>
 800c378:	3c57      	subs	r4, #87	; 0x57
 800c37a:	e7e2      	b.n	800c342 <_strtol_l.isra.0+0x82>
 800c37c:	f04f 32ff 	mov.w	r2, #4294967295
 800c380:	e7eb      	b.n	800c35a <_strtol_l.isra.0+0x9a>
 800c382:	1c53      	adds	r3, r2, #1
 800c384:	d108      	bne.n	800c398 <_strtol_l.isra.0+0xd8>
 800c386:	2322      	movs	r3, #34	; 0x22
 800c388:	f8c8 3000 	str.w	r3, [r8]
 800c38c:	4608      	mov	r0, r1
 800c38e:	f1ba 0f00 	cmp.w	sl, #0
 800c392:	d107      	bne.n	800c3a4 <_strtol_l.isra.0+0xe4>
 800c394:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c398:	b106      	cbz	r6, 800c39c <_strtol_l.isra.0+0xdc>
 800c39a:	4240      	negs	r0, r0
 800c39c:	f1ba 0f00 	cmp.w	sl, #0
 800c3a0:	d00c      	beq.n	800c3bc <_strtol_l.isra.0+0xfc>
 800c3a2:	b122      	cbz	r2, 800c3ae <_strtol_l.isra.0+0xee>
 800c3a4:	3d01      	subs	r5, #1
 800c3a6:	f8ca 5000 	str.w	r5, [sl]
 800c3aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ae:	464d      	mov	r5, r9
 800c3b0:	e7f9      	b.n	800c3a6 <_strtol_l.isra.0+0xe6>
 800c3b2:	2430      	movs	r4, #48	; 0x30
 800c3b4:	2f00      	cmp	r7, #0
 800c3b6:	d1b3      	bne.n	800c320 <_strtol_l.isra.0+0x60>
 800c3b8:	2708      	movs	r7, #8
 800c3ba:	e7b1      	b.n	800c320 <_strtol_l.isra.0+0x60>
 800c3bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c3c0 <_strtol_r>:
 800c3c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3c2:	4c06      	ldr	r4, [pc, #24]	; (800c3dc <_strtol_r+0x1c>)
 800c3c4:	4d06      	ldr	r5, [pc, #24]	; (800c3e0 <_strtol_r+0x20>)
 800c3c6:	6824      	ldr	r4, [r4, #0]
 800c3c8:	6a24      	ldr	r4, [r4, #32]
 800c3ca:	2c00      	cmp	r4, #0
 800c3cc:	bf08      	it	eq
 800c3ce:	462c      	moveq	r4, r5
 800c3d0:	9400      	str	r4, [sp, #0]
 800c3d2:	f7ff ff75 	bl	800c2c0 <_strtol_l.isra.0>
 800c3d6:	b003      	add	sp, #12
 800c3d8:	bd30      	pop	{r4, r5, pc}
 800c3da:	bf00      	nop
 800c3dc:	20000314 	.word	0x20000314
 800c3e0:	2000037c 	.word	0x2000037c

0800c3e4 <_strtoul_l.isra.0>:
 800c3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3e8:	4680      	mov	r8, r0
 800c3ea:	4689      	mov	r9, r1
 800c3ec:	4692      	mov	sl, r2
 800c3ee:	461e      	mov	r6, r3
 800c3f0:	460f      	mov	r7, r1
 800c3f2:	463d      	mov	r5, r7
 800c3f4:	9808      	ldr	r0, [sp, #32]
 800c3f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3fa:	f000 f8d6 	bl	800c5aa <__locale_ctype_ptr_l>
 800c3fe:	4420      	add	r0, r4
 800c400:	7843      	ldrb	r3, [r0, #1]
 800c402:	f013 0308 	ands.w	r3, r3, #8
 800c406:	d10a      	bne.n	800c41e <_strtoul_l.isra.0+0x3a>
 800c408:	2c2d      	cmp	r4, #45	; 0x2d
 800c40a:	d10a      	bne.n	800c422 <_strtoul_l.isra.0+0x3e>
 800c40c:	782c      	ldrb	r4, [r5, #0]
 800c40e:	2301      	movs	r3, #1
 800c410:	1cbd      	adds	r5, r7, #2
 800c412:	b15e      	cbz	r6, 800c42c <_strtoul_l.isra.0+0x48>
 800c414:	2e10      	cmp	r6, #16
 800c416:	d113      	bne.n	800c440 <_strtoul_l.isra.0+0x5c>
 800c418:	2c30      	cmp	r4, #48	; 0x30
 800c41a:	d009      	beq.n	800c430 <_strtoul_l.isra.0+0x4c>
 800c41c:	e010      	b.n	800c440 <_strtoul_l.isra.0+0x5c>
 800c41e:	462f      	mov	r7, r5
 800c420:	e7e7      	b.n	800c3f2 <_strtoul_l.isra.0+0xe>
 800c422:	2c2b      	cmp	r4, #43	; 0x2b
 800c424:	bf04      	itt	eq
 800c426:	782c      	ldrbeq	r4, [r5, #0]
 800c428:	1cbd      	addeq	r5, r7, #2
 800c42a:	e7f2      	b.n	800c412 <_strtoul_l.isra.0+0x2e>
 800c42c:	2c30      	cmp	r4, #48	; 0x30
 800c42e:	d125      	bne.n	800c47c <_strtoul_l.isra.0+0x98>
 800c430:	782a      	ldrb	r2, [r5, #0]
 800c432:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c436:	2a58      	cmp	r2, #88	; 0x58
 800c438:	d14a      	bne.n	800c4d0 <_strtoul_l.isra.0+0xec>
 800c43a:	786c      	ldrb	r4, [r5, #1]
 800c43c:	2610      	movs	r6, #16
 800c43e:	3502      	adds	r5, #2
 800c440:	f04f 31ff 	mov.w	r1, #4294967295
 800c444:	2700      	movs	r7, #0
 800c446:	fbb1 f1f6 	udiv	r1, r1, r6
 800c44a:	fb06 fe01 	mul.w	lr, r6, r1
 800c44e:	ea6f 0e0e 	mvn.w	lr, lr
 800c452:	4638      	mov	r0, r7
 800c454:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800c458:	2a09      	cmp	r2, #9
 800c45a:	d811      	bhi.n	800c480 <_strtoul_l.isra.0+0x9c>
 800c45c:	4614      	mov	r4, r2
 800c45e:	42a6      	cmp	r6, r4
 800c460:	dd1d      	ble.n	800c49e <_strtoul_l.isra.0+0xba>
 800c462:	2f00      	cmp	r7, #0
 800c464:	db18      	blt.n	800c498 <_strtoul_l.isra.0+0xb4>
 800c466:	4281      	cmp	r1, r0
 800c468:	d316      	bcc.n	800c498 <_strtoul_l.isra.0+0xb4>
 800c46a:	d101      	bne.n	800c470 <_strtoul_l.isra.0+0x8c>
 800c46c:	45a6      	cmp	lr, r4
 800c46e:	db13      	blt.n	800c498 <_strtoul_l.isra.0+0xb4>
 800c470:	fb00 4006 	mla	r0, r0, r6, r4
 800c474:	2701      	movs	r7, #1
 800c476:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c47a:	e7eb      	b.n	800c454 <_strtoul_l.isra.0+0x70>
 800c47c:	260a      	movs	r6, #10
 800c47e:	e7df      	b.n	800c440 <_strtoul_l.isra.0+0x5c>
 800c480:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800c484:	2a19      	cmp	r2, #25
 800c486:	d801      	bhi.n	800c48c <_strtoul_l.isra.0+0xa8>
 800c488:	3c37      	subs	r4, #55	; 0x37
 800c48a:	e7e8      	b.n	800c45e <_strtoul_l.isra.0+0x7a>
 800c48c:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800c490:	2a19      	cmp	r2, #25
 800c492:	d804      	bhi.n	800c49e <_strtoul_l.isra.0+0xba>
 800c494:	3c57      	subs	r4, #87	; 0x57
 800c496:	e7e2      	b.n	800c45e <_strtoul_l.isra.0+0x7a>
 800c498:	f04f 37ff 	mov.w	r7, #4294967295
 800c49c:	e7eb      	b.n	800c476 <_strtoul_l.isra.0+0x92>
 800c49e:	2f00      	cmp	r7, #0
 800c4a0:	da09      	bge.n	800c4b6 <_strtoul_l.isra.0+0xd2>
 800c4a2:	2322      	movs	r3, #34	; 0x22
 800c4a4:	f8c8 3000 	str.w	r3, [r8]
 800c4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ac:	f1ba 0f00 	cmp.w	sl, #0
 800c4b0:	d107      	bne.n	800c4c2 <_strtoul_l.isra.0+0xde>
 800c4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4b6:	b103      	cbz	r3, 800c4ba <_strtoul_l.isra.0+0xd6>
 800c4b8:	4240      	negs	r0, r0
 800c4ba:	f1ba 0f00 	cmp.w	sl, #0
 800c4be:	d00c      	beq.n	800c4da <_strtoul_l.isra.0+0xf6>
 800c4c0:	b127      	cbz	r7, 800c4cc <_strtoul_l.isra.0+0xe8>
 800c4c2:	3d01      	subs	r5, #1
 800c4c4:	f8ca 5000 	str.w	r5, [sl]
 800c4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4cc:	464d      	mov	r5, r9
 800c4ce:	e7f9      	b.n	800c4c4 <_strtoul_l.isra.0+0xe0>
 800c4d0:	2430      	movs	r4, #48	; 0x30
 800c4d2:	2e00      	cmp	r6, #0
 800c4d4:	d1b4      	bne.n	800c440 <_strtoul_l.isra.0+0x5c>
 800c4d6:	2608      	movs	r6, #8
 800c4d8:	e7b2      	b.n	800c440 <_strtoul_l.isra.0+0x5c>
 800c4da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800c4e0 <_strtoul_r>:
 800c4e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4e2:	4c06      	ldr	r4, [pc, #24]	; (800c4fc <_strtoul_r+0x1c>)
 800c4e4:	4d06      	ldr	r5, [pc, #24]	; (800c500 <_strtoul_r+0x20>)
 800c4e6:	6824      	ldr	r4, [r4, #0]
 800c4e8:	6a24      	ldr	r4, [r4, #32]
 800c4ea:	2c00      	cmp	r4, #0
 800c4ec:	bf08      	it	eq
 800c4ee:	462c      	moveq	r4, r5
 800c4f0:	9400      	str	r4, [sp, #0]
 800c4f2:	f7ff ff77 	bl	800c3e4 <_strtoul_l.isra.0>
 800c4f6:	b003      	add	sp, #12
 800c4f8:	bd30      	pop	{r4, r5, pc}
 800c4fa:	bf00      	nop
 800c4fc:	20000314 	.word	0x20000314
 800c500:	2000037c 	.word	0x2000037c

0800c504 <strtoul>:
 800c504:	4b08      	ldr	r3, [pc, #32]	; (800c528 <strtoul+0x24>)
 800c506:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c508:	681c      	ldr	r4, [r3, #0]
 800c50a:	4d08      	ldr	r5, [pc, #32]	; (800c52c <strtoul+0x28>)
 800c50c:	6a23      	ldr	r3, [r4, #32]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	bf08      	it	eq
 800c512:	462b      	moveq	r3, r5
 800c514:	9300      	str	r3, [sp, #0]
 800c516:	4613      	mov	r3, r2
 800c518:	460a      	mov	r2, r1
 800c51a:	4601      	mov	r1, r0
 800c51c:	4620      	mov	r0, r4
 800c51e:	f7ff ff61 	bl	800c3e4 <_strtoul_l.isra.0>
 800c522:	b003      	add	sp, #12
 800c524:	bd30      	pop	{r4, r5, pc}
 800c526:	bf00      	nop
 800c528:	20000314 	.word	0x20000314
 800c52c:	2000037c 	.word	0x2000037c

0800c530 <__submore>:
 800c530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c534:	460c      	mov	r4, r1
 800c536:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c53c:	4299      	cmp	r1, r3
 800c53e:	d11e      	bne.n	800c57e <__submore+0x4e>
 800c540:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c544:	f7fe fd34 	bl	800afb0 <_malloc_r>
 800c548:	b918      	cbnz	r0, 800c552 <__submore+0x22>
 800c54a:	f04f 30ff 	mov.w	r0, #4294967295
 800c54e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c556:	63a3      	str	r3, [r4, #56]	; 0x38
 800c558:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c55c:	6360      	str	r0, [r4, #52]	; 0x34
 800c55e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c562:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c566:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c56a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c56e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c572:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c576:	6020      	str	r0, [r4, #0]
 800c578:	2000      	movs	r0, #0
 800c57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c57e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c580:	0077      	lsls	r7, r6, #1
 800c582:	463a      	mov	r2, r7
 800c584:	f000 f84e 	bl	800c624 <_realloc_r>
 800c588:	4605      	mov	r5, r0
 800c58a:	2800      	cmp	r0, #0
 800c58c:	d0dd      	beq.n	800c54a <__submore+0x1a>
 800c58e:	eb00 0806 	add.w	r8, r0, r6
 800c592:	4601      	mov	r1, r0
 800c594:	4632      	mov	r2, r6
 800c596:	4640      	mov	r0, r8
 800c598:	f7fe fa4c 	bl	800aa34 <memcpy>
 800c59c:	f8c4 8000 	str.w	r8, [r4]
 800c5a0:	6365      	str	r5, [r4, #52]	; 0x34
 800c5a2:	63a7      	str	r7, [r4, #56]	; 0x38
 800c5a4:	e7e8      	b.n	800c578 <__submore+0x48>

0800c5a6 <__env_lock>:
 800c5a6:	4770      	bx	lr

0800c5a8 <__env_unlock>:
 800c5a8:	4770      	bx	lr

0800c5aa <__locale_ctype_ptr_l>:
 800c5aa:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c5ae:	4770      	bx	lr

0800c5b0 <__locale_ctype_ptr>:
 800c5b0:	4b04      	ldr	r3, [pc, #16]	; (800c5c4 <__locale_ctype_ptr+0x14>)
 800c5b2:	4a05      	ldr	r2, [pc, #20]	; (800c5c8 <__locale_ctype_ptr+0x18>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	6a1b      	ldr	r3, [r3, #32]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	bf08      	it	eq
 800c5bc:	4613      	moveq	r3, r2
 800c5be:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800c5c2:	4770      	bx	lr
 800c5c4:	20000314 	.word	0x20000314
 800c5c8:	2000037c 	.word	0x2000037c

0800c5cc <__ascii_mbtowc>:
 800c5cc:	b082      	sub	sp, #8
 800c5ce:	b901      	cbnz	r1, 800c5d2 <__ascii_mbtowc+0x6>
 800c5d0:	a901      	add	r1, sp, #4
 800c5d2:	b142      	cbz	r2, 800c5e6 <__ascii_mbtowc+0x1a>
 800c5d4:	b14b      	cbz	r3, 800c5ea <__ascii_mbtowc+0x1e>
 800c5d6:	7813      	ldrb	r3, [r2, #0]
 800c5d8:	600b      	str	r3, [r1, #0]
 800c5da:	7812      	ldrb	r2, [r2, #0]
 800c5dc:	1c10      	adds	r0, r2, #0
 800c5de:	bf18      	it	ne
 800c5e0:	2001      	movne	r0, #1
 800c5e2:	b002      	add	sp, #8
 800c5e4:	4770      	bx	lr
 800c5e6:	4610      	mov	r0, r2
 800c5e8:	e7fb      	b.n	800c5e2 <__ascii_mbtowc+0x16>
 800c5ea:	f06f 0001 	mvn.w	r0, #1
 800c5ee:	e7f8      	b.n	800c5e2 <__ascii_mbtowc+0x16>

0800c5f0 <memmove>:
 800c5f0:	4288      	cmp	r0, r1
 800c5f2:	b510      	push	{r4, lr}
 800c5f4:	eb01 0302 	add.w	r3, r1, r2
 800c5f8:	d803      	bhi.n	800c602 <memmove+0x12>
 800c5fa:	1e42      	subs	r2, r0, #1
 800c5fc:	4299      	cmp	r1, r3
 800c5fe:	d10c      	bne.n	800c61a <memmove+0x2a>
 800c600:	bd10      	pop	{r4, pc}
 800c602:	4298      	cmp	r0, r3
 800c604:	d2f9      	bcs.n	800c5fa <memmove+0xa>
 800c606:	1881      	adds	r1, r0, r2
 800c608:	1ad2      	subs	r2, r2, r3
 800c60a:	42d3      	cmn	r3, r2
 800c60c:	d100      	bne.n	800c610 <memmove+0x20>
 800c60e:	bd10      	pop	{r4, pc}
 800c610:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c614:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c618:	e7f7      	b.n	800c60a <memmove+0x1a>
 800c61a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c61e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c622:	e7eb      	b.n	800c5fc <memmove+0xc>

0800c624 <_realloc_r>:
 800c624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c626:	4607      	mov	r7, r0
 800c628:	4614      	mov	r4, r2
 800c62a:	460e      	mov	r6, r1
 800c62c:	b921      	cbnz	r1, 800c638 <_realloc_r+0x14>
 800c62e:	4611      	mov	r1, r2
 800c630:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c634:	f7fe bcbc 	b.w	800afb0 <_malloc_r>
 800c638:	b922      	cbnz	r2, 800c644 <_realloc_r+0x20>
 800c63a:	f7fe fc6b 	bl	800af14 <_free_r>
 800c63e:	4625      	mov	r5, r4
 800c640:	4628      	mov	r0, r5
 800c642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c644:	f000 f821 	bl	800c68a <_malloc_usable_size_r>
 800c648:	4284      	cmp	r4, r0
 800c64a:	d90f      	bls.n	800c66c <_realloc_r+0x48>
 800c64c:	4621      	mov	r1, r4
 800c64e:	4638      	mov	r0, r7
 800c650:	f7fe fcae 	bl	800afb0 <_malloc_r>
 800c654:	4605      	mov	r5, r0
 800c656:	2800      	cmp	r0, #0
 800c658:	d0f2      	beq.n	800c640 <_realloc_r+0x1c>
 800c65a:	4631      	mov	r1, r6
 800c65c:	4622      	mov	r2, r4
 800c65e:	f7fe f9e9 	bl	800aa34 <memcpy>
 800c662:	4631      	mov	r1, r6
 800c664:	4638      	mov	r0, r7
 800c666:	f7fe fc55 	bl	800af14 <_free_r>
 800c66a:	e7e9      	b.n	800c640 <_realloc_r+0x1c>
 800c66c:	4635      	mov	r5, r6
 800c66e:	e7e7      	b.n	800c640 <_realloc_r+0x1c>

0800c670 <__ascii_wctomb>:
 800c670:	b149      	cbz	r1, 800c686 <__ascii_wctomb+0x16>
 800c672:	2aff      	cmp	r2, #255	; 0xff
 800c674:	bf85      	ittet	hi
 800c676:	238a      	movhi	r3, #138	; 0x8a
 800c678:	6003      	strhi	r3, [r0, #0]
 800c67a:	700a      	strbls	r2, [r1, #0]
 800c67c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c680:	bf98      	it	ls
 800c682:	2001      	movls	r0, #1
 800c684:	4770      	bx	lr
 800c686:	4608      	mov	r0, r1
 800c688:	4770      	bx	lr

0800c68a <_malloc_usable_size_r>:
 800c68a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800c68e:	2800      	cmp	r0, #0
 800c690:	f1a0 0004 	sub.w	r0, r0, #4
 800c694:	bfbc      	itt	lt
 800c696:	580b      	ldrlt	r3, [r1, r0]
 800c698:	18c0      	addlt	r0, r0, r3
 800c69a:	4770      	bx	lr

0800c69c <_sbrk>:
 800c69c:	4b04      	ldr	r3, [pc, #16]	; (800c6b0 <_sbrk+0x14>)
 800c69e:	6819      	ldr	r1, [r3, #0]
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	b909      	cbnz	r1, 800c6a8 <_sbrk+0xc>
 800c6a4:	4903      	ldr	r1, [pc, #12]	; (800c6b4 <_sbrk+0x18>)
 800c6a6:	6019      	str	r1, [r3, #0]
 800c6a8:	6818      	ldr	r0, [r3, #0]
 800c6aa:	4402      	add	r2, r0
 800c6ac:	601a      	str	r2, [r3, #0]
 800c6ae:	4770      	bx	lr
 800c6b0:	20000698 	.word	0x20000698
 800c6b4:	2000ae08 	.word	0x2000ae08

0800c6b8 <_init>:
 800c6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ba:	bf00      	nop
 800c6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6be:	bc08      	pop	{r3}
 800c6c0:	469e      	mov	lr, r3
 800c6c2:	4770      	bx	lr

0800c6c4 <_fini>:
 800c6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c6:	bf00      	nop
 800c6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ca:	bc08      	pop	{r3}
 800c6cc:	469e      	mov	lr, r3
 800c6ce:	4770      	bx	lr
