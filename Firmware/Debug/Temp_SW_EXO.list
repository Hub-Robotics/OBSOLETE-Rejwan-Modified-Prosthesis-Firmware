
Temp_SW_EXO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b394  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800b524  0800b524  0001b524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ba30  0800ba30  0001ba30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ba38  0800ba38  0001ba38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ba3c  0800ba3c  0001ba3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000046c  20000000  0800ba40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  0002046c  2**0
                  CONTENTS
  8 .bss          0000a8d8  20000470  20000470  00020470  2**3
                  ALLOC
  9 ._user_heap_stack 00003000  2000ad48  2000ad48  00020470  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00053bf1  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000089b0  00000000  00000000  0007408d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001b0cb  00000000  00000000  0007ca3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001dc0  00000000  00000000  00097b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003530  00000000  00000000  000998c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00016fb5  00000000  00000000  0009cdf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000abd4  00000000  00000000  000b3dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000be981  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005f64  00000000  00000000  000bea00  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000df  00000000  00000000  000c4964  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000470 	.word	0x20000470
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b50c 	.word	0x0800b50c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000474 	.word	0x20000474
 80001cc:	0800b50c 	.word	0x0800b50c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8000590:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 8000592:	2301      	movs	r3, #1
  
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8000594:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __IO uint8_t status = SD_PRESENT;
 800059c:	f88d 3007 	strb.w	r3, [sp, #7]
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80005a0:	f004 f880 	bl	80046a4 <HAL_GPIO_ReadPin>
 80005a4:	b110      	cbz	r0, 80005ac <BSP_SD_IsDetected+0x1c>
  {
   status = SD_NOT_PRESENT;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  return status;
 80005ac:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80005b0:	b003      	add	sp, #12
 80005b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080005b8 <BSP_SD_IRQHandler>:
  * @brief  Handles SD card interrupt request.
  * @retval None
  */
void BSP_SD_IRQHandler(void)
{
  HAL_SD_IRQHandler(&uSdHandle);
 80005b8:	4801      	ldr	r0, [pc, #4]	; (80005c0 <BSP_SD_IRQHandler+0x8>)
 80005ba:	f005 bb0b 	b.w	8005bd4 <HAL_SD_IRQHandler>
 80005be:	bf00      	nop
 80005c0:	200085f8 	.word	0x200085f8

080005c4 <BSP_SD_DMA_Tx_IRQHandler>:
  * @brief  Handles SD DMA Tx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Tx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmatx);
 80005c4:	4b01      	ldr	r3, [pc, #4]	; (80005cc <BSP_SD_DMA_Tx_IRQHandler+0x8>)
 80005c6:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80005c8:	f003 bf48 	b.w	800445c <HAL_DMA_IRQHandler>
 80005cc:	200085f8 	.word	0x200085f8

080005d0 <BSP_SD_DMA_Rx_IRQHandler>:
  * @brief  Handles SD DMA Rx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Rx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <BSP_SD_DMA_Rx_IRQHandler+0x8>)
 80005d2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80005d4:	f003 bf42 	b.w	800445c <HAL_DMA_IRQHandler>
 80005d8:	200085f8 	.word	0x200085f8

080005dc <BSP_SD_GetStatus>:
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  *            @arg  SD_TRANSFER_ERROR: Data transfer error 
  */
HAL_SD_TransferStateTypedef BSP_SD_GetStatus(void)
{
  return(HAL_SD_GetStatus(&uSdHandle));
 80005dc:	4801      	ldr	r0, [pc, #4]	; (80005e4 <BSP_SD_GetStatus+0x8>)
 80005de:	f005 bf47 	b.w	8006470 <HAL_SD_GetStatus>
 80005e2:	bf00      	nop
 80005e4:	200085f8 	.word	0x200085f8

080005e8 <BSP_SD_GetCardInfo>:
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypedef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_Get_CardInfo(&uSdHandle, CardInfo);
 80005e8:	4601      	mov	r1, r0
 80005ea:	4801      	ldr	r0, [pc, #4]	; (80005f0 <BSP_SD_GetCardInfo+0x8>)
 80005ec:	f005 bb52 	b.w	8005c94 <HAL_SD_Get_CardInfo>
 80005f0:	200085f8 	.word	0x200085f8

080005f4 <SD_DMAConfigRx>:
  * @brief Configure the DMA to receive data from the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 80005f4:	b510      	push	{r4, lr}
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Configure DMA Rx parameters */
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80005f6:	4c15      	ldr	r4, [pc, #84]	; (800064c <SD_DMAConfigRx+0x58>)
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_rx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 80005f8:	6584      	str	r4, [r0, #88]	; 0x58
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80005fa:	2307      	movs	r3, #7
 80005fc:	6063      	str	r3, [r4, #4]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80005fe:	2300      	movs	r3, #0
 8000600:	60a3      	str	r3, [r4, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000602:	60e3      	str	r3, [r4, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	6123      	str	r3, [r4, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800060c:	6163      	str	r3, [r4, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800060e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000612:	61a3      	str	r3, [r4, #24]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8000614:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000618:	6223      	str	r3, [r4, #32]
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 800061a:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_rx.Instance = DMA2_Channel4;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <SD_DMAConfigRx+0x5c>)
 800061e:	6023      	str	r3, [r4, #0]

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_rx);
 8000620:	4620      	mov	r0, r4
 8000622:	f003 fefd 	bl	8004420 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_rx);
 8000626:	4620      	mov	r0, r4
 8000628:	f003 fe74 	bl	8004314 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_rx);
 800062c:	4620      	mov	r0, r4
 800062e:	f003 fe01 	bl	8004234 <HAL_DMA_Init>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <SD_DMAConfigRx+0x60>)
 8000634:	2230      	movs	r2, #48	; 0x30
 8000636:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);

  return (status != HAL_OK? SD_ERROR : SD_OK);
 800063a:	2800      	cmp	r0, #0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800063c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000640:	605a      	str	r2, [r3, #4]
}
 8000642:	bf14      	ite	ne
 8000644:	2029      	movne	r0, #41	; 0x29
 8000646:	2000      	moveq	r0, #0
 8000648:	bd10      	pop	{r4, pc}
 800064a:	bf00      	nop
 800064c:	2000048c 	.word	0x2000048c
 8000650:	40020444 	.word	0x40020444
 8000654:	e000e100 	.word	0xe000e100

08000658 <BSP_SD_ReadBlocks_DMA>:
{
 8000658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uSdHandle.hdmatx = NULL;
 800065a:	4c10      	ldr	r4, [pc, #64]	; (800069c <BSP_SD_ReadBlocks_DMA+0x44>)
{
 800065c:	4605      	mov	r5, r0
 800065e:	461f      	mov	r7, r3
  state = ((SD_DMAConfigRx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8000660:	4620      	mov	r0, r4
  uSdHandle.hdmatx = NULL;
 8000662:	2300      	movs	r3, #0
{
 8000664:	4616      	mov	r6, r2
  uSdHandle.hdmatx = NULL;
 8000666:	65e3      	str	r3, [r4, #92]	; 0x5c
  state = ((SD_DMAConfigRx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8000668:	f7ff ffc4 	bl	80005f4 <SD_DMAConfigRx>
  if(state == MSD_OK)
 800066c:	b998      	cbnz	r0, 8000696 <BSP_SD_ReadBlocks_DMA+0x3e>
    state = ((HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 800066e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	9b08      	ldr	r3, [sp, #32]
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	4632      	mov	r2, r6
 8000678:	463b      	mov	r3, r7
 800067a:	4629      	mov	r1, r5
 800067c:	4620      	mov	r0, r4
 800067e:	f005 f9af 	bl	80059e0 <HAL_SD_ReadBlocks_DMA>
    if(state == MSD_OK)
 8000682:	b940      	cbnz	r0, 8000696 <BSP_SD_ReadBlocks_DMA+0x3e>
      state = ((HAL_SD_CheckReadOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 8000684:	4906      	ldr	r1, [pc, #24]	; (80006a0 <BSP_SD_ReadBlocks_DMA+0x48>)
 8000686:	4620      	mov	r0, r4
 8000688:	f005 fec1 	bl	800640e <HAL_SD_CheckReadOperation>
 800068c:	3000      	adds	r0, #0
 800068e:	bf18      	it	ne
 8000690:	2001      	movne	r0, #1
}
 8000692:	b003      	add	sp, #12
 8000694:	bdf0      	pop	{r4, r5, r6, r7, pc}
    state = ((HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 8000696:	2001      	movs	r0, #1
 8000698:	e7fb      	b.n	8000692 <BSP_SD_ReadBlocks_DMA+0x3a>
 800069a:	bf00      	nop
 800069c:	200085f8 	.word	0x200085f8
 80006a0:	00989680 	.word	0x00989680

080006a4 <SD_DMAConfigTx>:
  * @brief Configure the DMA to transmit data to the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 80006a4:	b510      	push	{r4, lr}
  static DMA_HandleTypeDef hdma_tx;
  HAL_StatusTypeDef status;

  /* Configure DMA Tx parameters */
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 80006a6:	4c15      	ldr	r4, [pc, #84]	; (80006fc <SD_DMAConfigTx+0x58>)
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_tx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 80006a8:	65c4      	str	r4, [r0, #92]	; 0x5c
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 80006aa:	2307      	movs	r3, #7
 80006ac:	6063      	str	r3, [r4, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80006ae:	2310      	movs	r3, #16
 80006b0:	60a3      	str	r3, [r4, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60e3      	str	r3, [r4, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	6123      	str	r3, [r4, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006be:	6163      	str	r3, [r4, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80006c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006c4:	61a3      	str	r3, [r4, #24]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80006c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80006ca:	6223      	str	r3, [r4, #32]
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 80006cc:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_tx.Instance = DMA2_Channel4;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <SD_DMAConfigTx+0x5c>)
 80006d0:	6023      	str	r3, [r4, #0]

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_tx);
 80006d2:	4620      	mov	r0, r4
 80006d4:	f003 fea4 	bl	8004420 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_tx);
 80006d8:	4620      	mov	r0, r4
 80006da:	f003 fe1b 	bl	8004314 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_tx);
 80006de:	4620      	mov	r0, r4
 80006e0:	f003 fda8 	bl	8004234 <HAL_DMA_Init>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <SD_DMAConfigTx+0x60>)
 80006e6:	2230      	movs	r2, #48	; 0x30
 80006e8:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);

  return (status != HAL_OK? SD_ERROR : SD_OK);
 80006ec:	2800      	cmp	r0, #0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006f2:	605a      	str	r2, [r3, #4]
}
 80006f4:	bf14      	ite	ne
 80006f6:	2029      	movne	r0, #41	; 0x29
 80006f8:	2000      	moveq	r0, #0
 80006fa:	bd10      	pop	{r4, pc}
 80006fc:	200004d4 	.word	0x200004d4
 8000700:	40020444 	.word	0x40020444
 8000704:	e000e100 	.word	0xe000e100

08000708 <BSP_SD_Init>:
{
 8000708:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef gpioinitstruct = {0};
 800070a:	2214      	movs	r2, #20
{
 800070c:	b08a      	sub	sp, #40	; 0x28
  uSdHandle.Instance = SDMMC1;
 800070e:	4c37      	ldr	r4, [pc, #220]	; (80007ec <BSP_SD_Init+0xe4>)
 8000710:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <BSP_SD_Init+0xe8>)
 8000712:	6023      	str	r3, [r4, #0]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8000714:	2100      	movs	r1, #0
  uSdHandle.Init.ClockDiv            = 1;    // Checked by Masudul,
 8000716:	2501      	movs	r5, #1
  GPIO_InitTypeDef gpioinitstruct = {0};
 8000718:	eb0d 0002 	add.w	r0, sp, r2
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800071c:	6061      	str	r1, [r4, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800071e:	60a1      	str	r1, [r4, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000720:	60e1      	str	r1, [r4, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8000722:	6121      	str	r1, [r4, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000724:	6161      	str	r1, [r4, #20]
  uSdHandle.Init.ClockDiv            = 1;    // Checked by Masudul,
 8000726:	61a5      	str	r5, [r4, #24]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8000728:	f009 fdb7 	bl	800a29a <memset>
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800072c:	4b31      	ldr	r3, [pc, #196]	; (80007f4 <BSP_SD_Init+0xec>)
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 800072e:	4832      	ldr	r0, [pc, #200]	; (80007f8 <BSP_SD_Init+0xf0>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000730:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000732:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000736:	661a      	str	r2, [r3, #96]	; 0x60
 8000738:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800073a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800073e:	9200      	str	r2, [sp, #0]
 8000740:	9a00      	ldr	r2, [sp, #0]
  __DMAx_TxRx_CLK_ENABLE();
 8000742:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000744:	f042 0202 	orr.w	r2, r2, #2
 8000748:	649a      	str	r2, [r3, #72]	; 0x48
 800074a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800074c:	f002 0202 	and.w	r2, r2, #2
 8000750:	9201      	str	r2, [sp, #4]
 8000752:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000754:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000756:	f042 0204 	orr.w	r2, r2, #4
 800075a:	64da      	str	r2, [r3, #76]	; 0x4c
 800075c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800075e:	f002 0204 	and.w	r2, r2, #4
 8000762:	9202      	str	r2, [sp, #8]
 8000764:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000768:	f042 0208 	orr.w	r2, r2, #8
 800076c:	64da      	str	r2, [r3, #76]	; 0x4c
 800076e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000770:	f002 0208 	and.w	r2, r2, #8
 8000774:	9203      	str	r2, [sp, #12]
 8000776:	9a03      	ldr	r2, [sp, #12]
  __SD_DETECT_GPIO_CLK_ENABLE();
 8000778:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800077a:	432a      	orrs	r2, r5
 800077c:	64da      	str	r2, [r3, #76]	; 0x4c
 800077e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  gpioinitstruct.Pull      = GPIO_PULLUP;
 8000780:	9507      	str	r5, [sp, #28]
  __SD_DETECT_GPIO_CLK_ENABLE();
 8000782:	402b      	ands	r3, r5
 8000784:	9304      	str	r3, [sp, #16]
 8000786:	9b04      	ldr	r3, [sp, #16]
 8000788:	4d1c      	ldr	r5, [pc, #112]	; (80007fc <BSP_SD_Init+0xf4>)
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	9308      	str	r3, [sp, #32]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 8000792:	230c      	movs	r3, #12
 8000794:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8000796:	a905      	add	r1, sp, #20
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8000798:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800079c:	9305      	str	r3, [sp, #20]
 800079e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80007a2:	f003 fea3 	bl	80044ec <HAL_GPIO_Init>
  gpioinitstruct.Pin = GPIO_PIN_2;
 80007a6:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80007a8:	4815      	ldr	r0, [pc, #84]	; (8000800 <BSP_SD_Init+0xf8>)
  gpioinitstruct.Pin = GPIO_PIN_2;
 80007aa:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80007ac:	a905      	add	r1, sp, #20
 80007ae:	f003 fe9d 	bl	80044ec <HAL_GPIO_Init>
 80007b2:	606e      	str	r6, [r5, #4]
  if((SD_DMAConfigTx(&uSdHandle) == SD_OK) )
 80007b4:	4620      	mov	r0, r4
 80007b6:	f7ff ff75 	bl	80006a4 <SD_DMAConfigTx>
 80007ba:	b900      	cbnz	r0, 80007be <BSP_SD_Init+0xb6>
 80007bc:	606e      	str	r6, [r5, #4]
  if(BSP_SD_IsDetected() != SD_PRESENT)
 80007be:	f7ff fee7 	bl	8000590 <BSP_SD_IsDetected>
 80007c2:	2801      	cmp	r0, #1
 80007c4:	d002      	beq.n	80007cc <BSP_SD_Init+0xc4>
    return MSD_ERROR;
 80007c6:	2001      	movs	r0, #1
}
 80007c8:	b00a      	add	sp, #40	; 0x28
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
  if(HAL_SD_Init(&uSdHandle, &uSdCardInfo) != SD_OK)
 80007cc:	490d      	ldr	r1, [pc, #52]	; (8000804 <BSP_SD_Init+0xfc>)
 80007ce:	4807      	ldr	r0, [pc, #28]	; (80007ec <BSP_SD_Init+0xe4>)
 80007d0:	f005 fb9a 	bl	8005f08 <HAL_SD_Init>
 80007d4:	2800      	cmp	r0, #0
 80007d6:	d1f6      	bne.n	80007c6 <BSP_SD_Init+0xbe>
    if(HAL_SD_WideBusOperation_Config(&uSdHandle, SDMMC_BUS_WIDE_4B) != SD_OK)
 80007d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <BSP_SD_Init+0xe4>)
 80007de:	f005 fd6b 	bl	80062b8 <HAL_SD_WideBusOperation_Config>
    return MSD_ERROR;
 80007e2:	3000      	adds	r0, #0
 80007e4:	bf18      	it	ne
 80007e6:	2001      	movne	r0, #1
 80007e8:	e7ee      	b.n	80007c8 <BSP_SD_Init+0xc0>
 80007ea:	bf00      	nop
 80007ec:	200085f8 	.word	0x200085f8
 80007f0:	40012800 	.word	0x40012800
 80007f4:	40021000 	.word	0x40021000
 80007f8:	48000800 	.word	0x48000800
 80007fc:	e000e100 	.word	0xe000e100
 8000800:	48000c00 	.word	0x48000c00
 8000804:	20000520 	.word	0x20000520

08000808 <BSP_SD_WriteBlocks_DMA>:
{
 8000808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uSdHandle.hdmarx = NULL;
 800080a:	4c10      	ldr	r4, [pc, #64]	; (800084c <BSP_SD_WriteBlocks_DMA+0x44>)
{
 800080c:	4605      	mov	r5, r0
 800080e:	461f      	mov	r7, r3
  state = ((SD_DMAConfigTx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8000810:	4620      	mov	r0, r4
  uSdHandle.hdmarx = NULL;
 8000812:	2300      	movs	r3, #0
{
 8000814:	4616      	mov	r6, r2
  uSdHandle.hdmarx = NULL;
 8000816:	65a3      	str	r3, [r4, #88]	; 0x58
  state = ((SD_DMAConfigTx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8000818:	f7ff ff44 	bl	80006a4 <SD_DMAConfigTx>
  if(state == MSD_OK)
 800081c:	b998      	cbnz	r0, 8000846 <BSP_SD_WriteBlocks_DMA+0x3e>
    state = ((HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 800081e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	9b08      	ldr	r3, [sp, #32]
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	4632      	mov	r2, r6
 8000828:	463b      	mov	r3, r7
 800082a:	4629      	mov	r1, r5
 800082c:	4620      	mov	r0, r4
 800082e:	f005 f951 	bl	8005ad4 <HAL_SD_WriteBlocks_DMA>
    if(state == MSD_OK)
 8000832:	b940      	cbnz	r0, 8000846 <BSP_SD_WriteBlocks_DMA+0x3e>
      state = ((HAL_SD_CheckWriteOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 8000834:	4906      	ldr	r1, [pc, #24]	; (8000850 <BSP_SD_WriteBlocks_DMA+0x48>)
 8000836:	4620      	mov	r0, r4
 8000838:	f005 fe3f 	bl	80064ba <HAL_SD_CheckWriteOperation>
 800083c:	3000      	adds	r0, #0
 800083e:	bf18      	it	ne
 8000840:	2001      	movne	r0, #1
}
 8000842:	b003      	add	sp, #12
 8000844:	bdf0      	pop	{r4, r5, r6, r7, pc}
    state = ((HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 8000846:	2001      	movs	r0, #1
 8000848:	e7fb      	b.n	8000842 <BSP_SD_WriteBlocks_DMA+0x3a>
 800084a:	bf00      	nop
 800084c:	200085f8 	.word	0x200085f8
 8000850:	00989680 	.word	0x00989680

08000854 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8000854:	2000      	movs	r0, #0
 8000856:	4770      	bx	lr

08000858 <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <LL_AHB2_GRP1_EnableClock+0x18>)
 800085a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800085c:	4302      	orrs	r2, r0
 800085e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8000862:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000864:	4018      	ands	r0, r3
 8000866:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000868:	9b01      	ldr	r3, [sp, #4]
}
 800086a:	b002      	add	sp, #8
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000

08000874 <MX_GPIO_Init>:
LL_GPIO_InitTypeDef GPIO_InitStruct;



void MX_GPIO_Init(void)
{
 8000874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}



  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000878:	2004      	movs	r0, #4
 800087a:	f7ff ffed 	bl	8000858 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 800087e:	2080      	movs	r0, #128	; 0x80
 8000880:	f7ff ffea 	bl	8000858 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000884:	2001      	movs	r0, #1
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);

  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 8000886:	4c7d      	ldr	r4, [pc, #500]	; (8000a7c <MX_GPIO_Init+0x208>)
  GPIO_InitStruct.Pin = LED_B_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	4f7d      	ldr	r7, [pc, #500]	; (8000a80 <MX_GPIO_Init+0x20c>)
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800088a:	f7ff ffe5 	bl	8000858 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800088e:	2002      	movs	r0, #2
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8000890:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
 8000894:	f7ff ffe0 	bl	8000858 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8000898:	2008      	movs	r0, #8
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800089a:	f04f 0a00 	mov.w	sl, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800089e:	2501      	movs	r5, #1
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80008a0:	f7ff ffda 	bl	8000858 <LL_AHB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 80008a4:	260c      	movs	r6, #12
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	4621      	mov	r1, r4
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LED_B_PIN;
 80008ac:	f04f 0b80 	mov.w	fp, #128	; 0x80
  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 80008b0:	6026      	str	r6, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008b2:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008b4:	f8c4 a008 	str.w	sl, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008b8:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008bc:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f006 f99e 	bl	8006c00 <LL_GPIO_Init>
 80008c4:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	4621      	mov	r1, r4
 80008ca:	4638      	mov	r0, r7
  LL_GPIO_ResetOutputPin(GPIOB, LED_B_PIN);

  GPIO_InitStruct.Pin = USB_CONNECTIVITY;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80008cc:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pin = LED_B_PIN;
 80008d0:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008d4:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008d6:	f8c4 a008 	str.w	sl, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008da:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008de:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f006 f98d 	bl	8006c00 <LL_GPIO_Init>
 80008e6:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
  GPIO_InitStruct.Pin = USB_CONNECTIVITY;
 80008ea:	f44f 7200 	mov.w	r2, #512	; 0x200
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 80008ee:	4621      	mov	r1, r4
 80008f0:	4640      	mov	r0, r8

  /**/
  GPIO_InitStruct.Pin = ENC1_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2603      	movs	r6, #3
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80008f4:	e884 0404 	stmia.w	r4, {r2, sl}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80008f8:	f8c4 9010 	str.w	r9, [r4, #16]
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 80008fc:	f006 f980 	bl	8006c00 <LL_GPIO_Init>
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC1_CS_GPIO_PORT, &GPIO_InitStruct);
 8000900:	4621      	mov	r1, r4
 8000902:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = ENC1_CS_PIN;
 8000904:	f8c4 9000 	str.w	r9, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000908:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800090c:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000910:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(ENC1_CS_GPIO_PORT, &GPIO_InitStruct);
 8000914:	f006 f974 	bl	8006c00 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ENC1_SCLK_PIN;
 8000918:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC1_SCLK_GPIO_PORT, &GPIO_InitStruct);
 800091c:	4621      	mov	r1, r4
 800091e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = ENC1_SCLK_PIN;
 8000920:	6023      	str	r3, [r4, #0]
 8000922:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000924:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000928:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800092c:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(ENC1_SCLK_GPIO_PORT, &GPIO_InitStruct);
 8000930:	f006 f966 	bl	8006c00 <LL_GPIO_Init>

  GPIO_InitStruct.Pin =  ENC1_DATA_PIN;
 8000934:	2204      	movs	r2, #4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(ENC1_DATA_GPIO_PORT, &GPIO_InitStruct);
 8000936:	4621      	mov	r1, r4
 8000938:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800093a:	e884 0404 	stmia.w	r4, {r2, sl}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800093e:	f8c4 9010 	str.w	r9, [r4, #16]
  LL_GPIO_Init(ENC1_DATA_GPIO_PORT, &GPIO_InitStruct);
 8000942:	f006 f95d 	bl	8006c00 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ENC2_CS_PIN;
 8000946:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 8000948:	4621      	mov	r1, r4
 800094a:	484e      	ldr	r0, [pc, #312]	; (8000a84 <MX_GPIO_Init+0x210>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800094c:	f8c4 a010 	str.w	sl, [r4, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000950:	e884 0468 	stmia.w	r4, {r3, r5, r6, sl}
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 8000954:	f006 f954 	bl	8006c00 <LL_GPIO_Init>

  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(ENC2_DATA_GPIO_PORT, &GPIO_InitStruct);
 8000958:	4621      	mov	r1, r4
 800095a:	484a      	ldr	r0, [pc, #296]	; (8000a84 <MX_GPIO_Init+0x210>)
  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
 800095c:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000960:	f8c4 a004 	str.w	sl, [r4, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000964:	f8c4 9010 	str.w	r9, [r4, #16]
  LL_GPIO_Init(ENC2_DATA_GPIO_PORT, &GPIO_InitStruct);
 8000968:	f006 f94a 	bl	8006c00 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = ENC2_SCLK_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC2_SCLK_GPIO_PORT, &GPIO_InitStruct);
 800096c:	4621      	mov	r1, r4
 800096e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = ENC2_SCLK_PIN;
 8000970:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000974:	6065      	str	r5, [r4, #4]



  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 8000976:	f44f 7b80 	mov.w	fp, #256	; 0x100
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800097c:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000980:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(ENC2_SCLK_GPIO_PORT, &GPIO_InitStruct);
 8000984:	f006 f93c 	bl	8006c00 <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI1_CS_GPIO_PORT, &GPIO_InitStruct);
 8000988:	4621      	mov	r1, r4
 800098a:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 800098c:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000990:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000994:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000998:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(SPI1_CS_GPIO_PORT, &GPIO_InitStruct);
 800099c:	f006 f930 	bl	8006c00 <LL_GPIO_Init>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80009a0:	f8c8 b018 	str.w	fp, [r8, #24]
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 80009a4:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
 80009a6:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 80009aa:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
 80009ac:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009b0:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009b4:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009b8:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 80009bc:	f006 f920 	bl	8006c00 <LL_GPIO_Init>
 80009c0:	f8c7 b018 	str.w	fp, [r7, #24]
  GPIO_InitStruct.Pin = SPI3_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 80009c4:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8000a88 <MX_GPIO_Init+0x214>
  GPIO_InitStruct.Pin = SPI3_CS_PIN;
 80009c8:	6025      	str	r5, [r4, #0]
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 80009ca:	4621      	mov	r1, r4
 80009cc:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009ce:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009d2:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009d6:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 80009da:	f006 f911 	bl	8006c00 <LL_GPIO_Init>
 80009de:	f8cb 5018 	str.w	r5, [fp, #24]
  LL_GPIO_SetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN);

  GPIO_InitStruct.Pin = SPI1_IMU2_CS_Pin;
 80009e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI1_IMU2_CS_GPIO_Port, &GPIO_InitStruct);
 80009e6:	4621      	mov	r1, r4
 80009e8:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = SPI1_IMU2_CS_Pin;
 80009ea:	6022      	str	r2, [r4, #0]
 80009ec:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009ee:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009f2:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009f6:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(SPI1_IMU2_CS_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f006 f901 	bl	8006c00 <LL_GPIO_Init>
 80009fe:	9a00      	ldr	r2, [sp, #0]
 8000a00:	f8c8 2018 	str.w	r2, [r8, #24]
  GPIO_InitStruct.Pin = SPI3_IMU5_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 8000a04:	4621      	mov	r1, r4
 8000a06:	4658      	mov	r0, fp
 8000a08:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Pin = SPI3_IMU5_CS_Pin;
 8000a0a:	f8c4 9000 	str.w	r9, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a0e:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a12:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a16:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f006 f8f1 	bl	8006c00 <LL_GPIO_Init>
  LL_GPIO_SetOutputPin(SPI3_IMU5_CS_GPIO_Port, SPI3_IMU5_CS_Pin);


  /**/
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
 8000a1e:	9a00      	ldr	r2, [sp, #0]
 8000a20:	f8cb 9018 	str.w	r9, [fp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 8000a24:	4621      	mov	r1, r4
 8000a26:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a28:	e884 0404 	stmia.w	r4, {r2, sl}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000a2c:	f8c4 9010 	str.w	r9, [r4, #16]
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 8000a30:	f006 f8e6 	bl	8006c00 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000a34:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000a36:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	4621      	mov	r1, r4
 8000a3a:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a3c:	e884 0408 	stmia.w	r4, {r3, sl}
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f006 f8de 	bl	8006c00 <LL_GPIO_Init>


  /**/
//
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;   // Portable IMU2 CS Pin
 8000a44:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	4621      	mov	r1, r4
 8000a48:	4638      	mov	r0, r7
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a4a:	e884 0468 	stmia.w	r4, {r3, r5, r6, sl}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a4e:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a52:	f006 f8d5 	bl	8006c00 <LL_GPIO_Init>
 8000a56:	2340      	movs	r3, #64	; 0x40
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;   // Portable IMU3 CS Pin
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5a:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;   // Portable IMU3 CS Pin
 8000a5c:	2710      	movs	r7, #16
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5e:	4809      	ldr	r0, [pc, #36]	; (8000a84 <MX_GPIO_Init+0x210>)
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;   // Portable IMU3 CS Pin
 8000a60:	6027      	str	r7, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a62:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a66:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a6a:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6e:	f006 f8c7 	bl	8006c00 <LL_GPIO_Init>
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <MX_GPIO_Init+0x210>)
 8000a74:	619f      	str	r7, [r3, #24]
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_4);

}
 8000a76:	b003      	add	sp, #12
 8000a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a7c:	2000865c 	.word	0x2000865c
 8000a80:	48000400 	.word	0x48000400
 8000a84:	48000800 	.word	0x48000800
 8000a88:	48001c00 	.word	0x48001c00

08000a8c <RED_LED_OFF>:
 8000a8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a90:	2208      	movs	r2, #8
 8000a92:	619a      	str	r2, [r3, #24]
 8000a94:	4770      	bx	lr

08000a96 <GREEN_LED_OFF>:
 8000a96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	619a      	str	r2, [r3, #24]
 8000a9e:	4770      	bx	lr

08000aa0 <BLUE_LED_OFF>:
 8000aa0:	4b01      	ldr	r3, [pc, #4]	; (8000aa8 <BLUE_LED_OFF+0x8>)
 8000aa2:	2280      	movs	r2, #128	; 0x80
 8000aa4:	619a      	str	r2, [r3, #24]
 8000aa6:	4770      	bx	lr
 8000aa8:	48000400 	.word	0x48000400

08000aac <ALL_LED_OFF>:
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <ALL_LED_OFF+0x14>)
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	619a      	str	r2, [r3, #24]
 8000ab2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	619a      	str	r2, [r3, #24]
 8000aba:	2208      	movs	r2, #8
 8000abc:	619a      	str	r2, [r3, #24]
 8000abe:	4770      	bx	lr
 8000ac0:	48000400 	.word	0x48000400

08000ac4 <ALL_LED_ON>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <ALL_LED_ON+0x14>)
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
 8000aca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ace:	2204      	movs	r2, #4
 8000ad0:	629a      	str	r2, [r3, #40]	; 0x28
 8000ad2:	2208      	movs	r2, #8
 8000ad4:	629a      	str	r2, [r3, #40]	; 0x28
 8000ad6:	4770      	bx	lr
 8000ad8:	48000400 	.word	0x48000400

08000adc <GREEN_LED_ONLY>:
 8000adc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ae4:	4a02      	ldr	r2, [pc, #8]	; (8000af0 <GREEN_LED_ONLY+0x14>)
 8000ae6:	2180      	movs	r1, #128	; 0x80
 8000ae8:	6191      	str	r1, [r2, #24]
 8000aea:	2208      	movs	r2, #8
 8000aec:	619a      	str	r2, [r3, #24]
 8000aee:	4770      	bx	lr
 8000af0:	48000400 	.word	0x48000400

08000af4 <RED_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8000af4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000af8:	2208      	movs	r2, #8
 8000afa:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000afc:	4a02      	ldr	r2, [pc, #8]	; (8000b08 <RED_LED_ONLY+0x14>)
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	6191      	str	r1, [r2, #24]
 8000b02:	2204      	movs	r2, #4
 8000b04:	619a      	str	r2, [r3, #24]
 8000b06:	4770      	bx	lr
 8000b08:	48000400 	.word	0x48000400

08000b0c <BLUE_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <BLUE_LED_ONLY+0x14>)
 8000b0e:	2280      	movs	r2, #128	; 0x80
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000b12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b16:	2204      	movs	r2, #4
 8000b18:	619a      	str	r2, [r3, #24]
 8000b1a:	2208      	movs	r2, #8
 8000b1c:	619a      	str	r2, [r3, #24]
 8000b1e:	4770      	bx	lr
 8000b20:	48000400 	.word	0x48000400

08000b24 <VIOLET_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <VIOLET_LED_ONLY+0x14>)
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000b2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b2e:	2204      	movs	r2, #4
 8000b30:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b32:	2208      	movs	r2, #8
 8000b34:	629a      	str	r2, [r3, #40]	; 0x28
 8000b36:	4770      	bx	lr
 8000b38:	48000400 	.word	0x48000400

08000b3c <SD_POWER_ON>:
 8000b3c:	4770      	bx	lr

08000b3e <SD_POWER_OFF>:
void SD_POWER_ON(void)
{

}
void SD_POWER_OFF(void)
{
 8000b3e:	4770      	bx	lr

08000b40 <main>:




int main(void){
	Pros_state =  LP_STOP;                                    // Default state after power ON reset
 8000b40:	4c64      	ldr	r4, [pc, #400]	; (8000cd4 <main+0x194>)
int main(void){
 8000b42:	b580      	push	{r7, lr}
	Pros_state =  LP_STOP;                                    // Default state after power ON reset
 8000b44:	2501      	movs	r5, #1
 8000b46:	7025      	strb	r5, [r4, #0]
	SystemClock_Config_MSI_80MHz();	                        // Configure the system clock to 48 MHz from MSI, PLL disabled for power saving
 8000b48:	f002 fafc 	bl	8003144 <SystemClock_Config_MSI_80MHz>

	// If RTC is previously configured and running via backup battery i.e. BackUp Register Data is available, No need to update RTC time again
 if (RTC_BAK_GetRegister(RTC, 0x01) != RTC_BKP_DATE_TIME_UPDTATED) //    0x01 value was arbitrarily set from previous Configure_RTC_Calendar()
 8000b4c:	4629      	mov	r1, r5
 8000b4e:	4862      	ldr	r0, [pc, #392]	; (8000cd8 <main+0x198>)
 8000b50:	f000 fe0a 	bl	8001768 <RTC_BAK_GetRegister>
 8000b54:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8000b58:	4298      	cmp	r0, r3
 8000b5a:	d001      	beq.n	8000b60 <main+0x20>
	  {
			MX_RTC_Init();   // Set RTC clock source and parameters
 8000b5c:	f000 fd72 	bl	8001644 <MX_RTC_Init>
	  }

  MX_GPIO_Init();
 8000b60:	f7ff fe88 	bl	8000874 <MX_GPIO_Init>
  HAL_Init();                 // Reset of all peripherals, Initializes the Flash interface and the Systick.
 8000b64:	f003 fac2 	bl	80040ec <HAL_Init>



    DFU_Bypass();
 8000b68:	f000 fb0e 	bl	8001188 <DFU_Bypass>
    Configure_USART_1();  // Debug with PC
 8000b6c:	f001 fa72 	bl	8002054 <Configure_USART_1>
    sprintf(PrintBuf,"Hello");
 8000b70:	495a      	ldr	r1, [pc, #360]	; (8000cdc <main+0x19c>)
 8000b72:	485b      	ldr	r0, [pc, #364]	; (8000ce0 <main+0x1a0>)
					case Dormant_Idle_Stop:             // Idle Lowest Power Stop Mode with no Data log (only wait for USB connectivity)

					  	                        EnterStop();   // Enter Stop Mode
												 // Wake Up after STOP Mode only by USB EXTI Int

												if (USB_Present_ == 1)                     // After detecting USB attachment via EXTI_5 int
 8000b74:	4d5b      	ldr	r5, [pc, #364]	; (8000ce4 <main+0x1a4>)
						   Data_log_Start_Resume=0;
 8000b76:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8000d04 <main+0x1c4>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8000b7a:	4f5b      	ldr	r7, [pc, #364]	; (8000ce8 <main+0x1a8>)
    sprintf(PrintBuf,"Hello");
 8000b7c:	f009 fca2 	bl	800a4c4 <strcpy>
    USART1_wr_print(PrintBuf,sizeof(PrintBuf));
 8000b80:	2132      	movs	r1, #50	; 0x32
 8000b82:	4857      	ldr	r0, [pc, #348]	; (8000ce0 <main+0x1a0>)
 8000b84:	f001 faa0 	bl	80020c8 <USART1_wr_print>
    P_IMU3_SPI2_Initialization_at_reset();   //IMU3-_SPI2
 8000b88:	f002 f926 	bl	8002dd8 <P_IMU3_SPI2_Initialization_at_reset>
  sprintf(PrintBuf,"Hello");
 8000b8c:	4953      	ldr	r1, [pc, #332]	; (8000cdc <main+0x19c>)
 8000b8e:	4854      	ldr	r0, [pc, #336]	; (8000ce0 <main+0x1a0>)
 8000b90:	f009 fc98 	bl	800a4c4 <strcpy>
 USART1_wr_print(PrintBuf,sizeof(PrintBuf));
 8000b94:	2132      	movs	r1, #50	; 0x32
 8000b96:	4852      	ldr	r0, [pc, #328]	; (8000ce0 <main+0x1a0>)
 8000b98:	f001 fa96 	bl	80020c8 <USART1_wr_print>
 P_IMU4_SPI3_Initialization_at_reset();   //IMU4-5_SPI3
 8000b9c:	f002 f89a 	bl	8002cd4 <P_IMU4_SPI3_Initialization_at_reset>
  sprintf(PrintBuf,"Hello3");
 8000ba0:	4952      	ldr	r1, [pc, #328]	; (8000cec <main+0x1ac>)
 8000ba2:	484f      	ldr	r0, [pc, #316]	; (8000ce0 <main+0x1a0>)
 8000ba4:	f009 fc8e 	bl	800a4c4 <strcpy>
  USART1_wr_print(PrintBuf,sizeof(PrintBuf));
 8000ba8:	2132      	movs	r1, #50	; 0x32
 8000baa:	484d      	ldr	r0, [pc, #308]	; (8000ce0 <main+0x1a0>)
 8000bac:	f001 fa8c 	bl	80020c8 <USART1_wr_print>
  P_IMU1_SPI1_Initialization_at_reset(); //IMU1-2__SPI1  (only IMU1 configured)
 8000bb0:	f002 f80e 	bl	8002bd0 <P_IMU1_SPI1_Initialization_at_reset>
  P_ADC_Sensor_GPIO_Init(); //ADC GPIOs
 8000bb4:	f000 ffe0 	bl	8001b78 <P_ADC_Sensor_GPIO_Init>
  USB_PA9_EXTI_conf();         // USB connectivity pin detect Interrupt // Data_Pause_Resume_PC0_EXTI_conf();
 8000bb8:	f000 fdda 	bl	8001770 <USB_PA9_EXTI_conf>
  Configure_LPTIM2_Int(); // Configured LPTIM2 but not started. To be started before going to Loop
 8000bbc:	f002 fb32 	bl	8003224 <Configure_LPTIM2_Int>
  Configure_Interrupt();       // Re-arrange NVIC interrupt priority
 8000bc0:	f000 fa90 	bl	80010e4 <Configure_Interrupt>
  Power_on_reset();            // Following reset is found by troubleshooting
 8000bc4:	f000 fa80 	bl	80010c8 <Power_on_reset>
  AIM_DataStart_at_Reset();
 8000bc8:	f001 fd80 	bl	80026cc <AIM_DataStart_at_Reset>
  GREEN_LED_ONLY();
 8000bcc:	f7ff ff86 	bl	8000adc <GREEN_LED_ONLY>
				  switch(Pros_state) {
 8000bd0:	7823      	ldrb	r3, [r4, #0]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	2b06      	cmp	r3, #6
 8000bd6:	d8fd      	bhi.n	8000bd4 <main+0x94>
 8000bd8:	a201      	add	r2, pc, #4	; (adr r2, 8000be0 <main+0xa0>)
 8000bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bde:	bf00      	nop
 8000be0:	08000bfd 	.word	0x08000bfd
 8000be4:	08000c37 	.word	0x08000c37
 8000be8:	08000bd5 	.word	0x08000bd5
 8000bec:	08000cb9 	.word	0x08000cb9
 8000bf0:	08000c55 	.word	0x08000c55
 8000bf4:	08000cbf 	.word	0x08000cbf
 8000bf8:	08000c71 	.word	0x08000c71
						EnterStop();   // Enter Stop Mode
 8000bfc:	f002 fa8c 	bl	8003118 <EnterStop>
						if (USB_Present_ == 1)                     // After detecting USB attachment via EXTI_5 int
 8000c00:	782b      	ldrb	r3, [r5, #0]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d104      	bne.n	8000c10 <main+0xd0>
													 Pros_state = USB_MSC_VCP_Mode;                   // Next State USB_MSC_Mode Mode
 8000c06:	2304      	movs	r3, #4
 8000c08:	7023      	strb	r3, [r4, #0]
													 USB_Present_ = 0;                           // Reset Flag to avoid looping
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	702b      	strb	r3, [r5, #0]
 8000c0e:	e7df      	b.n	8000bd0 <main+0x90>
						 else if (FATAL_Error == 1)                      // Triggered from Error_Handler
 8000c10:	4b37      	ldr	r3, [pc, #220]	; (8000cf0 <main+0x1b0>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d105      	bne.n	8000c24 <main+0xe4>
								FATAL_Error = 0;                            // Reset Flag to avoid looping
 8000c18:	4b35      	ldr	r3, [pc, #212]	; (8000cf0 <main+0x1b0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
								 Pros_state = Fatal_Error_State;             // Next State Fatal_Error_State
 8000c1e:	2307      	movs	r3, #7
							 Pros_state = Dormant_Idle_Stop;                       // Stay Dormant Mode if no external events
 8000c20:	7023      	strb	r3, [r4, #0]
 8000c22:	e7d5      	b.n	8000bd0 <main+0x90>
						 else if (SD_write_Flag == 1)                    // When BUffer full to store in SD card
 8000c24:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <main+0x1b4>)
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	2a01      	cmp	r2, #1
 8000c2a:	d111      	bne.n	8000c50 <main+0x110>
							Pros_state = Sensor_FATFS_Write;              // Next State Sensor_FATFS_Write Mode
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	7022      	strb	r2, [r4, #0]
							SD_write_Flag = 0;                           // Reset Flag to avoid looping
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
 8000c34:	e7cc      	b.n	8000bd0 <main+0x90>
						Battery_ADC_Value=2500;
 8000c36:	4b30      	ldr	r3, [pc, #192]	; (8000cf8 <main+0x1b8>)
 8000c38:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000c3c:	801a      	strh	r2, [r3, #0]
	   									SD_Sensor_write();                   // Write Sensor Buffer to SD card
 8000c3e:	f001 fd05 	bl	800264c <SD_Sensor_write>
		                                     if (USB_Present_ == 1)          // If USB attachment detected here via EXTI_5 int
 8000c42:	782b      	ldrb	r3, [r5, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d0de      	beq.n	8000c06 <main+0xc6>
		            						 else if (FATAL_Error == 1)                      // Triggered from Error_Handler
 8000c48:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <main+0x1b0>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d0e3      	beq.n	8000c18 <main+0xd8>
							 Pros_state = LP_STOP;                       // Return to Low Power Mode Data collection
 8000c50:	2301      	movs	r3, #1
 8000c52:	e7e5      	b.n	8000c20 <main+0xe0>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c54:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <main+0x1bc>)
 8000c56:	2204      	movs	r2, #4
 8000c58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							ALL_LED_OFF();
 8000c5c:	f7ff ff26 	bl	8000aac <ALL_LED_OFF>
							Shut_Down_SD();
 8000c60:	f000 fcd4 	bl	800160c <Shut_Down_SD>
							Reset_Variables_for_LowBattery();
 8000c64:	f000 fac6 	bl	80011f4 <Reset_Variables_for_LowBattery>
							Prepare_Goto_Dormant_Mode();
 8000c68:	f000 faba 	bl	80011e0 <Prepare_Goto_Dormant_Mode>
							 Pros_state = Dormant_Idle_Stop;                       // Stay Dormant Mode if no external events
 8000c6c:	2306      	movs	r3, #6
 8000c6e:	e7d7      	b.n	8000c20 <main+0xe0>
						   RED_LED_ONLY();
 8000c70:	f7ff ff40 	bl	8000af4 <RED_LED_ONLY>
						   FATFS_Logstart_Delete();
 8000c74:	f000 fb7c 	bl	8001370 <FATFS_Logstart_Delete>
						   SD_write_Flag = 0;
 8000c78:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <main+0x1b4>)
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_DisableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8000c7a:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <main+0x1c0>)
						   Data_log_Start_Resume=0;
 8000c7c:	2600      	movs	r6, #0
						   SD_write_Flag = 0;
 8000c7e:	701e      	strb	r6, [r3, #0]
 8000c80:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <main+0x1bc>)
						   Data_log_Start_Resume=0;
 8000c82:	f888 6000 	strb.w	r6, [r8]
 8000c86:	f04f 0904 	mov.w	r9, #4
 8000c8a:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
 8000c8e:	6893      	ldr	r3, [r2, #8]
 8000c90:	f023 0302 	bic.w	r3, r3, #2
 8000c94:	6093      	str	r3, [r2, #8]
						   SD_POWER_OFF();
 8000c96:	f7ff ff52 	bl	8000b3e <SD_POWER_OFF>
 8000c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
	                        EnterStop();   // Enter Stop Mode
 8000ca2:	f002 fa39 	bl	8003118 <EnterStop>
						if (USB_Present_ == 1)                     // After detecting USB attachment via EXTI_5 int
 8000ca6:	782b      	ldrb	r3, [r5, #0]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d1df      	bne.n	8000c6c <main+0x12c>
						 Pros_state = USB_MSC_VCP_Mode;               // Next State USB_MSC_Mode Mode
 8000cac:	f884 9000 	strb.w	r9, [r4]
						 USB_Present_ = 0;                           // Reset Flag to avoid looping
 8000cb0:	702e      	strb	r6, [r5, #0]
												 {
												 Pros_state = USB_MSC_VCP_Mode;               // Next State USB_MSC_Mode Mode
												 USB_Present_ = 0;                           // Reset Flag to avoid looping
												 SD_POWER_ON();               				// Power on SD CARD
 8000cb2:	f7ff ff43 	bl	8000b3c <SD_POWER_ON>
 8000cb6:	e78b      	b.n	8000bd0 <main+0x90>
						USB_Init_Start();            // Initialize USB and Stay USB mode as long as USB cable connected
 8000cb8:	f001 fc60 	bl	800257c <USB_Init_Start>
  					    break;
 8000cbc:	e788      	b.n	8000bd0 <main+0x90>
					  	                        EnterStop();   // Enter Stop Mode
 8000cbe:	f002 fa2b 	bl	8003118 <EnterStop>
												if (USB_Present_ == 1)                     // After detecting USB attachment via EXTI_5 int
 8000cc2:	782b      	ldrb	r3, [r5, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d1d1      	bne.n	8000c6c <main+0x12c>
												 Pros_state = USB_MSC_VCP_Mode;               // Next State USB_MSC_Mode Mode
 8000cc8:	2304      	movs	r3, #4
 8000cca:	7023      	strb	r3, [r4, #0]
												 USB_Present_ = 0;                           // Reset Flag to avoid looping
 8000ccc:	2300      	movs	r3, #0
 8000cce:	702b      	strb	r3, [r5, #0]
 8000cd0:	e7ef      	b.n	8000cb2 <main+0x172>
 8000cd2:	bf00      	nop
 8000cd4:	20008658 	.word	0x20008658
 8000cd8:	40002800 	.word	0x40002800
 8000cdc:	0800b530 	.word	0x0800b530
 8000ce0:	2000890c 	.word	0x2000890c
 8000ce4:	20000580 	.word	0x20000580
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	0800b536 	.word	0x0800b536
 8000cf0:	20008c98 	.word	0x20008c98
 8000cf4:	2000868c 	.word	0x2000868c
 8000cf8:	20008c74 	.word	0x20008c74
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	40009400 	.word	0x40009400
 8000d04:	20008681 	.word	0x20008681

08000d08 <LPTIM2_IRQHandler>:
  return (READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == (LPTIM_ISR_ARRM));
 8000d08:	4b28      	ldr	r3, [pc, #160]	; (8000dac <LPTIM2_IRQHandler+0xa4>)
 8000d0a:	681b      	ldr	r3, [r3, #0]

}

void LPTIM2_IRQHandler(void)   // Response of 10ms LPTIM interrupt
{
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)	// auto reload match interrupt has occured
 8000d0c:	079b      	lsls	r3, r3, #30
{
 8000d0e:	b570      	push	{r4, r5, r6, lr}
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)	// auto reload match interrupt has occured
 8000d10:	d543      	bpl.n	8000d9a <LPTIM2_IRQHandler+0x92>
	{
		if (Data_log_Start_Resume == 1)   // Sensor Start Flag from VCP command / FATFS SD card file
 8000d12:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <LPTIM2_IRQHandler+0xa8>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d13a      	bne.n	8000d90 <LPTIM2_IRQHandler+0x88>
		{
			F_Sensor_ADC_Store();
 8000d1a:	f001 f83d 	bl	8001d98 <F_Sensor_ADC_Store>
			Mag_Enc1_Store();
 8000d1e:	f002 f867 	bl	8002df0 <Mag_Enc1_Store>
			Mag_Enc2_Store();
 8000d22:	f002 f8ab 	bl	8002e7c <Mag_Enc2_Store>
			MPU_9D_store_IMU4_SPI3();
 8000d26:	f001 fda5 	bl	8002874 <MPU_9D_store_IMU4_SPI3>
			MPU_9D_store_IMU3_SPI2();
 8000d2a:	f001 fe3d 	bl	80029a8 <MPU_9D_store_IMU3_SPI2>
			MPU_9D_store_IMU1_SPI1();
 8000d2e:	f001 fcfb 	bl	8002728 <MPU_9D_store_IMU1_SPI1>

			if (Sub_cnt == 5)
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <LPTIM2_IRQHandler+0xac>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	2a05      	cmp	r2, #5
 8000d38:	d118      	bne.n	8000d6c <LPTIM2_IRQHandler+0x64>
			{
				//BSbuffer[s_flag].Blank1 = (uint8_t) (LL_GPIO_IsInputPinSet(GPIOA,LL_GPIO_PIN_10));
				BSbuffer[s_flag].RTC_Time = (uint32_t)(RTC->TR & 0x007F7F7F);
 8000d3a:	4d1f      	ldr	r5, [pc, #124]	; (8000db8 <LPTIM2_IRQHandler+0xb0>)
 8000d3c:	4c1f      	ldr	r4, [pc, #124]	; (8000dbc <LPTIM2_IRQHandler+0xb4>)
 8000d3e:	7828      	ldrb	r0, [r5, #0]
 8000d40:	491f      	ldr	r1, [pc, #124]	; (8000dc0 <LPTIM2_IRQHandler+0xb8>)
 8000d42:	6822      	ldr	r2, [r4, #0]
 8000d44:	eb01 3080 	add.w	r0, r1, r0, lsl #14
 8000d48:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 8000d4c:	f643 76f8 	movw	r6, #16376	; 0x3ff8
 8000d50:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8000d54:	5182      	str	r2, [r0, r6]
				BSbuffer[s_flag].RTC_Date= (uint32_t)(RTC->DR & 0x00FFFF3F);
 8000d56:	7828      	ldrb	r0, [r5, #0]
 8000d58:	6862      	ldr	r2, [r4, #4]
 8000d5a:	eb01 3180 	add.w	r1, r1, r0, lsl #14
 8000d5e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000d62:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 8000d66:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000d6a:	500a      	str	r2, [r1, r0]

			}

// Switching Buffer code starts here
			if(Sub_cnt==Highest_sensor_count)   // Total samples to be stored in a 16KB buffer
 8000d6c:	6819      	ldr	r1, [r3, #0]
 8000d6e:	f240 1207 	movw	r2, #263	; 0x107
 8000d72:	4291      	cmp	r1, r2
 8000d74:	d115      	bne.n	8000da2 <LPTIM2_IRQHandler+0x9a>
			{
				Sub_cnt=0;           // Reset Counter of sensor element
 8000d76:	2100      	movs	r1, #0
 8000d78:	6019      	str	r1, [r3, #0]
				SD_write_Flag = 1;   // Flag set to write filled buffer content
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <LPTIM2_IRQHandler+0xbc>)
 8000d7c:	4812      	ldr	r0, [pc, #72]	; (8000dc8 <LPTIM2_IRQHandler+0xc0>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
				// Changing Buffer
				if (s_flag==0)       // if current storgae_buffer was 0
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <LPTIM2_IRQHandler+0xb0>)
 8000d84:	781c      	ldrb	r4, [r3, #0]
 8000d86:	f004 05ff 	and.w	r5, r4, #255	; 0xff
 8000d8a:	b93c      	cbnz	r4, 8000d9c <LPTIM2_IRQHandler+0x94>
				{
					w_flag=0;            // write_buffer to be saved in SD card = 0
 8000d8c:	7005      	strb	r5, [r0, #0]
					s_flag=1;            // current storgae_buffer is set 1
 8000d8e:	701a      	strb	r2, [r3, #0]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <LPTIM2_IRQHandler+0xa4>)
 8000d92:	6853      	ldr	r3, [r2, #4]
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6053      	str	r3, [r2, #4]
 8000d9a:	bd70      	pop	{r4, r5, r6, pc}
				}
				else                    // if current storgae_buffer was 1
				{
					w_flag=1;           // write_buffer to be saved in SD card = 1
 8000d9c:	7002      	strb	r2, [r0, #0]
					s_flag=0;           // current storgae_buffer is set 0
 8000d9e:	7019      	strb	r1, [r3, #0]
 8000da0:	e7f6      	b.n	8000d90 <LPTIM2_IRQHandler+0x88>
				}

			}
			else
			{
				Sub_cnt++;              // Increment Counter of sensor element
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	3201      	adds	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	e7f2      	b.n	8000d90 <LPTIM2_IRQHandler+0x88>
 8000daa:	bf00      	nop
 8000dac:	40009400 	.word	0x40009400
 8000db0:	20008681 	.word	0x20008681
 8000db4:	2000057c 	.word	0x2000057c
 8000db8:	20000581 	.word	0x20000581
 8000dbc:	40002800 	.word	0x40002800
 8000dc0:	200005c4 	.word	0x200005c4
 8000dc4:	2000868c 	.word	0x2000868c
 8000dc8:	20000000 	.word	0x20000000

08000dcc <EXTI9_5_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine));
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <EXTI9_5_IRQHandler+0x18>)
 8000dce:	695a      	ldr	r2, [r3, #20]

}

void EXTI9_5_IRQHandler(void)       // Interrupt from USB connectivity PIN PA9
{
if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8000dd0:	0592      	lsls	r2, r2, #22
 8000dd2:	d505      	bpl.n	8000de0 <EXTI9_5_IRQHandler+0x14>
{
USB_Present_=1;         // USB present
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <EXTI9_5_IRQHandler+0x1c>)
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	7011      	strb	r1, [r2, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dde:	615a      	str	r2, [r3, #20]
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40010400 	.word	0x40010400
 8000de8:	20000580 	.word	0x20000580

08000dec <NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dec:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000df0:	4905      	ldr	r1, [pc, #20]	; (8000e08 <NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000df4:	68ca      	ldr	r2, [r1, #12]
 8000df6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60cb      	str	r3, [r1, #12]
 8000dfe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8000e02:	bf00      	nop
 8000e04:	e7fd      	b.n	8000e02 <NVIC_SystemReset+0x16>
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00
 8000e0c:	05fa0004 	.word	0x05fa0004

08000e10 <LL_ADC_REG_StartConversion>:
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e10:	6883      	ldr	r3, [r0, #8]
 8000e12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e1a:	f043 0304 	orr.w	r3, r3, #4
 8000e1e:	6083      	str	r3, [r0, #8]
 8000e20:	4770      	bx	lr
	...

08000e24 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <LL_AHB2_GRP1_EnableClock+0x18>)
 8000e26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e28:	4302      	orrs	r2, r0
 8000e2a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8000e2e:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e30:	4018      	ands	r0, r3
 8000e32:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000e34:	9b01      	ldr	r3, [sp, #4]
}
 8000e36:	b002      	add	sp, #8
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000

08000e40 <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <LL_APB2_GRP1_EnableClock+0x18>)
 8000e42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e44:	4302      	orrs	r2, r0
 8000e46:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 8000e4a:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e4c:	4018      	ands	r0, r3
 8000e4e:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000e50:	9b01      	ldr	r3, [sp, #4]
}
 8000e52:	b002      	add	sp, #8
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000

08000e5c <LL_GPIO_SetPinMode>:
{
 8000e5c:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000e5e:	6803      	ldr	r3, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e60:	fa91 f4a1 	rbit	r4, r1
 8000e64:	fab4 f484 	clz	r4, r4
 8000e68:	fa91 f1a1 	rbit	r1, r1
 8000e6c:	2503      	movs	r5, #3
 8000e6e:	fab1 f181 	clz	r1, r1
 8000e72:	0064      	lsls	r4, r4, #1
 8000e74:	fa05 f404 	lsl.w	r4, r5, r4
 8000e78:	0049      	lsls	r1, r1, #1
 8000e7a:	ea23 0304 	bic.w	r3, r3, r4
 8000e7e:	fa02 f101 	lsl.w	r1, r2, r1
 8000e82:	4319      	orrs	r1, r3
 8000e84:	6001      	str	r1, [r0, #0]
 8000e86:	bd30      	pop	{r4, r5, pc}

08000e88 <LL_ADC_REG_SetSequencerRanks>:
{
 8000e88:	b530      	push	{r4, r5, lr}
 8000e8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e8e:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000e92:	fab3 f383 	clz	r3, r3
 8000e96:	f401 7440 	and.w	r4, r1, #768	; 0x300
 8000e9a:	40dc      	lsrs	r4, r3
 8000e9c:	3030      	adds	r0, #48	; 0x30
  MODIFY_REG(*preg,
 8000e9e:	f001 011f 	and.w	r1, r1, #31
 8000ea2:	231f      	movs	r3, #31
 8000ea4:	fa03 f501 	lsl.w	r5, r3, r1
 8000ea8:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8000eac:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000eb0:	f1c1 011a 	rsb	r1, r1, #26
 8000eb4:	ea23 0305 	bic.w	r3, r3, r5
 8000eb8:	fa22 f101 	lsr.w	r1, r2, r1
 8000ebc:	4319      	orrs	r1, r3
 8000ebe:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 8000ec2:	bd30      	pop	{r4, r5, pc}

08000ec4 <LL_ADC_SetChannelSamplingTime>:
{
 8000ec4:	b570      	push	{r4, r5, r6, lr}
 8000ec6:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000eca:	fa96 f6a6 	rbit	r6, r6
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000ece:	fab6 f386 	clz	r3, r6
 8000ed2:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 8000ed6:	40de      	lsrs	r6, r3
 8000ed8:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 8000eda:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8000ede:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8000ee2:	fa93 f5a3 	rbit	r5, r3
 8000ee6:	fab5 f585 	clz	r5, r5
 8000eea:	fa93 f3a3 	rbit	r3, r3
 8000eee:	2407      	movs	r4, #7
 8000ef0:	fa21 f505 	lsr.w	r5, r1, r5
 8000ef4:	fa04 f505 	lsl.w	r5, r4, r5
 8000ef8:	fab3 f383 	clz	r3, r3
 8000efc:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8000f00:	40d9      	lsrs	r1, r3
 8000f02:	ea24 0405 	bic.w	r4, r4, r5
 8000f06:	fa02 f101 	lsl.w	r1, r2, r1
 8000f0a:	4321      	orrs	r1, r4
 8000f0c:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 8000f10:	bd70      	pop	{r4, r5, r6, pc}

08000f12 <LL_GPIO_SetAFPin_0_7>:
{
 8000f12:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000f14:	6a03      	ldr	r3, [r0, #32]
 8000f16:	fa91 f4a1 	rbit	r4, r1
 8000f1a:	fab4 f484 	clz	r4, r4
 8000f1e:	fa91 f1a1 	rbit	r1, r1
 8000f22:	250f      	movs	r5, #15
 8000f24:	fab1 f181 	clz	r1, r1
 8000f28:	00a4      	lsls	r4, r4, #2
 8000f2a:	fa05 f404 	lsl.w	r4, r5, r4
 8000f2e:	0089      	lsls	r1, r1, #2
 8000f30:	ea23 0304 	bic.w	r3, r3, r4
 8000f34:	fa02 f101 	lsl.w	r1, r2, r1
 8000f38:	4319      	orrs	r1, r3
 8000f3a:	6201      	str	r1, [r0, #32]
 8000f3c:	bd30      	pop	{r4, r5, pc}

08000f3e <LL_GPIO_SetPinPull>:
{
 8000f3e:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000f40:	68c3      	ldr	r3, [r0, #12]
 8000f42:	fa91 f4a1 	rbit	r4, r1
 8000f46:	fab4 f484 	clz	r4, r4
 8000f4a:	fa91 f1a1 	rbit	r1, r1
 8000f4e:	2503      	movs	r5, #3
 8000f50:	fab1 f181 	clz	r1, r1
 8000f54:	0064      	lsls	r4, r4, #1
 8000f56:	fa05 f404 	lsl.w	r4, r5, r4
 8000f5a:	0049      	lsls	r1, r1, #1
 8000f5c:	ea23 0304 	bic.w	r3, r3, r4
 8000f60:	fa02 f101 	lsl.w	r1, r2, r1
 8000f64:	4319      	orrs	r1, r3
 8000f66:	60c1      	str	r1, [r0, #12]
 8000f68:	bd30      	pop	{r4, r5, pc}

08000f6a <LL_GPIO_SetPinSpeed.constprop.6>:
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 8000f6a:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000f6c:	6882      	ldr	r2, [r0, #8]
 8000f6e:	fa91 f3a1 	rbit	r3, r1
 8000f72:	fab3 f383 	clz	r3, r3
 8000f76:	fa91 f1a1 	rbit	r1, r1
 8000f7a:	2403      	movs	r4, #3
 8000f7c:	fab1 f181 	clz	r1, r1
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa04 f303 	lsl.w	r3, r4, r3
 8000f86:	0049      	lsls	r1, r1, #1
 8000f88:	ea22 0303 	bic.w	r3, r2, r3
 8000f8c:	fa04 f101 	lsl.w	r1, r4, r1
 8000f90:	4319      	orrs	r1, r3
 8000f92:	6081      	str	r1, [r0, #8]
 8000f94:	bd10      	pop	{r4, pc}
	...

08000f98 <LL_RTC_DATE_GetDay.constprop.8>:
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetDay(RTC_TypeDef *RTCx)
{
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <LL_RTC_DATE_GetDay.constprop.8+0x2c>)
 8000f9a:	2030      	movs	r0, #48	; 0x30
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	fa90 f0a0 	rbit	r0, r0
 8000fa2:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 8000fa4:	fab0 f080 	clz	r0, r0
 8000fa8:	fa92 f2a2 	rbit	r2, r2
 8000fac:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8000fb0:	fab2 f282 	clz	r2, r2
 8000fb4:	f003 030f 	and.w	r3, r3, #15
 8000fb8:	fa21 f000 	lsr.w	r0, r1, r0
 8000fbc:	40d3      	lsrs	r3, r2
}
 8000fbe:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8000fc2:	4770      	bx	lr
 8000fc4:	40002800 	.word	0x40002800

08000fc8 <LL_RTC_DATE_GetMonth.constprop.9>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <LL_RTC_DATE_GetMonth.constprop.9+0x30>)
 8000fca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	fa90 f0a0 	rbit	r0, r0
 8000fd4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 8000fd8:	fab0 f080 	clz	r0, r0
 8000fdc:	fa92 f2a2 	rbit	r2, r2
 8000fe0:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 8000fe4:	fab2 f282 	clz	r2, r2
 8000fe8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000fec:	fa21 f000 	lsr.w	r0, r1, r0
 8000ff0:	40d3      	lsrs	r3, r2
}
 8000ff2:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8000ff6:	4770      	bx	lr
 8000ff8:	40002800 	.word	0x40002800

08000ffc <LL_RTC_DATE_GetYear.constprop.10>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <LL_RTC_DATE_GetYear.constprop.10+0x30>)
 8000ffe:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	fa90 f0a0 	rbit	r0, r0
 8001008:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 800100c:	fab0 f080 	clz	r0, r0
 8001010:	fa92 f2a2 	rbit	r2, r2
 8001014:	f403 0170 	and.w	r1, r3, #15728640	; 0xf00000
 8001018:	fab2 f282 	clz	r2, r2
 800101c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001020:	fa21 f000 	lsr.w	r0, r1, r0
 8001024:	40d3      	lsrs	r3, r2
}
 8001026:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800102a:	4770      	bx	lr
 800102c:	40002800 	.word	0x40002800

08001030 <LL_RTC_TIME_GetSecond.constprop.11>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <LL_RTC_TIME_GetSecond.constprop.11+0x2c>)
 8001032:	2070      	movs	r0, #112	; 0x70
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	fa90 f0a0 	rbit	r0, r0
 800103a:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 800103c:	fab0 f080 	clz	r0, r0
 8001040:	fa92 f2a2 	rbit	r2, r2
 8001044:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8001048:	fab2 f282 	clz	r2, r2
 800104c:	f003 030f 	and.w	r3, r3, #15
 8001050:	fa21 f000 	lsr.w	r0, r1, r0
 8001054:	40d3      	lsrs	r3, r2
}
 8001056:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800105a:	4770      	bx	lr
 800105c:	40002800 	.word	0x40002800

08001060 <LL_RTC_TIME_GetMinute.constprop.12>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <LL_RTC_TIME_GetMinute.constprop.12+0x30>)
 8001062:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	fa90 f0a0 	rbit	r0, r0
 800106c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 8001070:	fab0 f080 	clz	r0, r0
 8001074:	fa92 f2a2 	rbit	r2, r2
 8001078:	f403 41e0 	and.w	r1, r3, #28672	; 0x7000
 800107c:	fab2 f282 	clz	r2, r2
 8001080:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001084:	fa21 f000 	lsr.w	r0, r1, r0
 8001088:	40d3      	lsrs	r3, r2
}
 800108a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800108e:	4770      	bx	lr
 8001090:	40002800 	.word	0x40002800

08001094 <LL_RTC_TIME_GetHour.constprop.13>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <LL_RTC_TIME_GetHour.constprop.13+0x30>)
 8001096:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	fa90 f0a0 	rbit	r0, r0
 80010a0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 80010a4:	fab0 f080 	clz	r0, r0
 80010a8:	fa92 f2a2 	rbit	r2, r2
 80010ac:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
 80010b0:	fab2 f282 	clz	r2, r2
 80010b4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80010b8:	fa21 f000 	lsr.w	r0, r1, r0
 80010bc:	40d3      	lsrs	r3, r2
}
 80010be:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 80010c2:	4770      	bx	lr
 80010c4:	40002800 	.word	0x40002800

080010c8 <Power_on_reset>:

}


void Power_on_reset(void)
{
 80010c8:	b508      	push	{r3, lr}
	  if (*Reset_Ram_Key_Address != Reset_Key_Value)
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <Power_on_reset+0x14>)
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <Power_on_reset+0x18>)
 80010ce:	6819      	ldr	r1, [r3, #0]
 80010d0:	4291      	cmp	r1, r2
 80010d2:	d002      	beq.n	80010da <Power_on_reset+0x12>
	  {
	      *Reset_Ram_Key_Address = Reset_Key_Value;
 80010d4:	601a      	str	r2, [r3, #0]
		   NVIC_SystemReset();
 80010d6:	f7ff fe89 	bl	8000dec <NVIC_SystemReset>
 80010da:	bd08      	pop	{r3, pc}
 80010dc:	20017ef0 	.word	0x20017ef0
 80010e0:	deadbeef 	.word	0xdeadbeef

080010e4 <Configure_Interrupt>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <Configure_Interrupt+0x2c>)
 80010e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010ec:	041b      	lsls	r3, r3, #16
 80010ee:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
 80010f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80010f8:	60d3      	str	r3, [r2, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <Configure_Interrupt+0x30>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
 8001102:	2220      	movs	r2, #32
 8001104:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
 8001108:	2210      	movs	r2, #16
 800110a:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00
 8001114:	e000e100 	.word	0xe000e100

08001118 <Shut_Down_USB>:
  * @rmtoll CR2          USV           LL_PWR_DisableVddUSB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableVddUSB(void)
{
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 8001118:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <Shut_Down_USB+0x2c>)
 800111a:	6853      	ldr	r3, [r2, #4]
		f_mount(0, "", 0); 		                //  unmount FATFS file (of running sensor storage file)
		FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
}

void Shut_Down_USB(void)
{
 800111c:	b510      	push	{r4, lr}
 800111e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

	LL_PWR_DisableVddUSB();                               // Disable VDDUSB supply for USB
	USB_Present_=0;                                      // reset the USB present flag to be set by EXTI interrupt

	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 8001122:	4c09      	ldr	r4, [pc, #36]	; (8001148 <Shut_Down_USB+0x30>)
 8001124:	6053      	str	r3, [r2, #4]
	USB_Present_=0;                                      // reset the USB present flag to be set by EXTI interrupt
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <Shut_Down_USB+0x34>)
 8001128:	2200      	movs	r2, #0
	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 800112a:	4620      	mov	r0, r4
	USB_Present_=0;                                      // reset the USB present flag to be set by EXTI interrupt
 800112c:	701a      	strb	r2, [r3, #0]
	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 800112e:	f007 f8d6 	bl	80082de <USBD_Stop>
	USBD_DeInit(&USBD_Device);               // De-Initialize the device library
 8001132:	4620      	mov	r0, r4
 8001134:	f007 f8b5 	bl	80082a2 <USBD_DeInit>
	__HAL_RCC_USB_OTG_FS_CLK_DISABLE();      // Disable USB Clock
 8001138:	4a05      	ldr	r2, [pc, #20]	; (8001150 <Shut_Down_USB+0x38>)
 800113a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800113c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	bd10      	pop	{r4, pc}
 8001144:	40007000 	.word	0x40007000
 8001148:	200086a4 	.word	0x200086a4
 800114c:	20000580 	.word	0x20000580
 8001150:	40021000 	.word	0x40021000

08001154 <USB_Clock_Ready>:
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <USB_Clock_Ready+0x2c>)
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
}


void USB_Clock_Ready(void)
{
 800115c:	b082      	sub	sp, #8
 800115e:	605a      	str	r2, [r3, #4]
  * @rmtoll CR2          USV           LL_PWR_IsEnabledVddUSB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledVddUSB(void)
{
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 8001160:	685a      	ldr	r2, [r3, #4]
	LL_PWR_EnableVddUSB();                                  // Enable VDDUSB supply for USB
		while(!LL_PWR_IsEnabledVddUSB());                       // Wait for VDDUSB supply to activate
 8001162:	0552      	lsls	r2, r2, #21
 8001164:	d5fc      	bpl.n	8001160 <USB_Clock_Ready+0xc>
		__HAL_RCC_USB_OTG_FS_CLK_ENABLE();     // Enable USB Clock
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <USB_Clock_Ready+0x30>)
 8001168:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800116a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800116e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	9b01      	ldr	r3, [sp, #4]
}
 800117a:	b002      	add	sp, #8
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40007000 	.word	0x40007000
 8001184:	40021000 	.word	0x40021000

08001188 <DFU_Bypass>:
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001188:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
void DFU_Bypass(void)
{

	uint32_t i=0;

    check=LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY);
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <DFU_Bypass+0x48>)
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8001194:	f3c2 2240 	ubfx	r2, r2, #9, #1
{
 8001198:	b570      	push	{r4, r5, r6, lr}
    check=LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY);
 800119a:	6002      	str	r2, [r0, #0]
 800119c:	691a      	ldr	r2, [r3, #16]
   // if(check == 1)
    //	 CYAN_LED_ONLY();
    while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));  // Wait until USB cable disconnect from Charger
 800119e:	0592      	lsls	r2, r2, #22
 80011a0:	d4fc      	bmi.n	800119c <DFU_Bypass+0x14>
	  if (*LP_Ram_Key_Address != Reset_Key_Value)
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <DFU_Bypass+0x4c>)
 80011a4:	4c0c      	ldr	r4, [pc, #48]	; (80011d8 <DFU_Bypass+0x50>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	42a2      	cmp	r2, r4
 80011aa:	d010      	beq.n	80011ce <DFU_Bypass+0x46>
	  {
	      *LP_Ram_Key_Address = Reset_Key_Value;
 80011ac:	601c      	str	r4, [r3, #0]
    if(check == 1)
 80011ae:	b171      	cbz	r1, 80011ce <DFU_Bypass+0x46>
 80011b0:	2505      	movs	r5, #5
 80011b2:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
    {
	  /* Toggle IO in during 2s (10*200ms) */
	  for(i =0; i<5; i++)
	  {
	 //   LL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
	    LL_mDelay(200);
 80011b6:	20c8      	movs	r0, #200	; 0xc8
 80011b8:	f006 fbd2 	bl	8007960 <LL_mDelay>
 80011bc:	6933      	ldr	r3, [r6, #16]
	    if (LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY))
 80011be:	059b      	lsls	r3, r3, #22
 80011c0:	d503      	bpl.n	80011ca <DFU_Bypass+0x42>
	    {
	    	 *Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <DFU_Bypass+0x54>)
 80011c4:	601c      	str	r4, [r3, #0]
	    	  NVIC_SystemReset();        // System reset
 80011c6:	f7ff fe11 	bl	8000dec <NVIC_SystemReset>
	  for(i =0; i<5; i++)
 80011ca:	3d01      	subs	r5, #1
 80011cc:	d1f3      	bne.n	80011b6 <DFU_Bypass+0x2e>
 80011ce:	bd70      	pop	{r4, r5, r6, pc}
 80011d0:	20008a28 	.word	0x20008a28
 80011d4:	20017cf0 	.word	0x20017cf0
 80011d8:	deadbeef 	.word	0xdeadbeef
 80011dc:	20017ff0 	.word	0x20017ff0

080011e0 <Prepare_Goto_Dormant_Mode>:
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 80011e0:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <Prepare_Goto_Dormant_Mode+0x10>)
 80011e2:	6893      	ldr	r3, [r2, #8]
 80011e4:	f023 0302 	bic.w	r3, r3, #2
 80011e8:	6093      	str	r3, [r2, #8]


void Prepare_Goto_Dormant_Mode(void)
{
	LL_LPTIM_DisableIT_ARRM(LPTIM2);                           // Disable auto reload match interrupt of LPTIM2
	SD_POWER_OFF();               // Power off SD CARD
 80011ea:	f7ff bca8 	b.w	8000b3e <SD_POWER_OFF>
 80011ee:	bf00      	nop
 80011f0:	40009400 	.word	0x40009400

080011f4 <Reset_Variables_for_LowBattery>:

}

void Reset_Variables_for_LowBattery(void)          // Reset all variables needed to Sensor logging in Double Buffer System
{
 80011f4:	b508      	push	{r3, lr}

	SD_write_Flag = 0;
 80011f6:	4b02      	ldr	r3, [pc, #8]	; (8001200 <Reset_Variables_for_LowBattery+0xc>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
#ifdef Bottle_Device
  //ALL_LED_OFF();
#else
  NVIC_SystemReset();
 80011fc:	f7ff fdf6 	bl	8000dec <NVIC_SystemReset>
 8001200:	2000868c 	.word	0x2000868c

08001204 <GetNextIndex>:

}


int GetNextIndex(char *path)  // Read SD card content to save next value in auto increment format
{
 8001204:	b530      	push	{r4, r5, lr}
 8001206:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
DIR dir;
FILINFO fno;
int i, index = -1;

if (f_opendir(&dir, path) == FR_OK)
 800120a:	4601      	mov	r1, r0
 800120c:	a808      	add	r0, sp, #32
 800120e:	f008 fed0 	bl	8009fb2 <f_opendir>
 8001212:	f04f 34ff 	mov.w	r4, #4294967295
 8001216:	b9e0      	cbnz	r0, 8001252 <GetNextIndex+0x4e>
while(1)
{
  if ((f_readdir(&dir,  &fno) !=  FR_OK) || (fno.fname[0] == 0))
    break;

  if ((strstr(fno.fname, ".BIN") != NULL) && (sscanf(fno.fname, "%d", &i) == 1))   // Searcing for .BIN file and determining highest index
 8001218:	4d10      	ldr	r5, [pc, #64]	; (800125c <GetNextIndex+0x58>)
  if ((f_readdir(&dir,  &fno) !=  FR_OK) || (fno.fname[0] == 0))
 800121a:	a902      	add	r1, sp, #8
 800121c:	a808      	add	r0, sp, #32
 800121e:	f008 ff16 	bl	800a04e <f_readdir>
 8001222:	b9b0      	cbnz	r0, 8001252 <GetNextIndex+0x4e>
 8001224:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8001228:	b19b      	cbz	r3, 8001252 <GetNextIndex+0x4e>
  if ((strstr(fno.fname, ".BIN") != NULL) && (sscanf(fno.fname, "%d", &i) == 1))   // Searcing for .BIN file and determining highest index
 800122a:	4629      	mov	r1, r5
 800122c:	f10d 0011 	add.w	r0, sp, #17
 8001230:	f009 f950 	bl	800a4d4 <strstr>
 8001234:	2800      	cmp	r0, #0
 8001236:	d0f0      	beq.n	800121a <GetNextIndex+0x16>
 8001238:	aa01      	add	r2, sp, #4
 800123a:	4909      	ldr	r1, [pc, #36]	; (8001260 <GetNextIndex+0x5c>)
 800123c:	f10d 0011 	add.w	r0, sp, #17
 8001240:	f009 f914 	bl	800a46c <siscanf>
 8001244:	2801      	cmp	r0, #1
 8001246:	d1e8      	bne.n	800121a <GetNextIndex+0x16>
 8001248:	9b01      	ldr	r3, [sp, #4]
 800124a:	429c      	cmp	r4, r3
 800124c:	bfb8      	it	lt
 800124e:	461c      	movlt	r4, r3
 8001250:	e7e3      	b.n	800121a <GetNextIndex+0x16>
    if (i > index) index = i;
}
}
return(index+1);
}
 8001252:	1c60      	adds	r0, r4, #1
 8001254:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8001258:	bd30      	pop	{r4, r5, pc}
 800125a:	bf00      	nop
 800125c:	0800b56b 	.word	0x0800b56b
 8001260:	0800b564 	.word	0x0800b564

08001264 <Try_FATFS_Mount>:
	return 0;
}

void Try_FATFS_Mount(void)
{
	  if (Fat_mnt_fail == 1)
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <Try_FATFS_Mount+0x44>)
{
 8001266:	b510      	push	{r4, lr}
	  if (Fat_mnt_fail == 1)
 8001268:	681c      	ldr	r4, [r3, #0]
 800126a:	2c01      	cmp	r4, #1
 800126c:	d11a      	bne.n	80012a4 <Try_FATFS_Mount+0x40>
	  {
		  Fat_mnt_fail=0;
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
		  SD_POWER_OFF();
 8001272:	f7ff fc64 	bl	8000b3e <SD_POWER_OFF>
		  delay_us(10000); // wait 10 msec
 8001276:	f242 7010 	movw	r0, #10000	; 0x2710
 800127a:	f001 ff21 	bl	80030c0 <delay_us>
		  SD_POWER_ON();
 800127e:	f7ff fc5d 	bl	8000b3c <SD_POWER_ON>
		  delay_us(1000000); // wait 1 sec
 8001282:	480a      	ldr	r0, [pc, #40]	; (80012ac <Try_FATFS_Mount+0x48>)
 8001284:	f001 ff1c 	bl	80030c0 <delay_us>
		  //Retry FATFS link

		  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8001288:	4909      	ldr	r1, [pc, #36]	; (80012b0 <Try_FATFS_Mount+0x4c>)
 800128a:	480a      	ldr	r0, [pc, #40]	; (80012b4 <Try_FATFS_Mount+0x50>)
 800128c:	f008 ffa6 	bl	800a1dc <FATFS_LinkDriver>
 8001290:	b928      	cbnz	r0, 800129e <Try_FATFS_Mount+0x3a>
		 		{
		 			 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 8001292:	4622      	mov	r2, r4
 8001294:	4906      	ldr	r1, [pc, #24]	; (80012b0 <Try_FATFS_Mount+0x4c>)
 8001296:	4808      	ldr	r0, [pc, #32]	; (80012b8 <Try_FATFS_Mount+0x54>)
 8001298:	f008 face 	bl	8009838 <f_mount>
 800129c:	b110      	cbz	r0, 80012a4 <Try_FATFS_Mount+0x40>
		 			 {
		 				Skip_FATFS=1;
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <Try_FATFS_Mount+0x58>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	bd10      	pop	{r4, pc}
 80012a6:	bf00      	nop
 80012a8:	20008940 	.word	0x20008940
 80012ac:	000f4240 	.word	0x000f4240
 80012b0:	20008a35 	.word	0x20008a35
 80012b4:	0800b7d0 	.word	0x0800b7d0
 80012b8:	20008a44 	.word	0x20008a44
 80012bc:	20008c99 	.word	0x20008c99

080012c0 <file_reopen_sync>:
	  }

}

void file_reopen_sync(void)
{
 80012c0:	b508      	push	{r3, lr}
	f_close(&MyFile);
 80012c2:	4807      	ldr	r0, [pc, #28]	; (80012e0 <file_reopen_sync+0x20>)
 80012c4:	f008 fd15 	bl	8009cf2 <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 80012c8:	2212      	movs	r2, #18
 80012ca:	4906      	ldr	r1, [pc, #24]	; (80012e4 <file_reopen_sync+0x24>)
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <file_reopen_sync+0x20>)
 80012ce:	f008 fae9 	bl	80098a4 <f_open>
	if(res != FR_OK)
 80012d2:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <file_reopen_sync+0x28>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b113      	cbz	r3, 80012de <file_reopen_sync+0x1e>
						{
							Fat_sync_read_fail=1;
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <file_reopen_sync+0x2c>)
 80012da:	2201      	movs	r2, #1
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	bd08      	pop	{r3, pc}
 80012e0:	20008ca4 	.word	0x20008ca4
 80012e4:	20008988 	.word	0x20008988
 80012e8:	20008f26 	.word	0x20008f26
 80012ec:	20008948 	.word	0x20008948

080012f0 <file_reopen>:
						}
}

void file_reopen(void)
{
 80012f0:	b508      	push	{r3, lr}
	f_close(&MyFile);
 80012f2:	4807      	ldr	r0, [pc, #28]	; (8001310 <file_reopen+0x20>)
 80012f4:	f008 fcfd 	bl	8009cf2 <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 80012f8:	2212      	movs	r2, #18
 80012fa:	4906      	ldr	r1, [pc, #24]	; (8001314 <file_reopen+0x24>)
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <file_reopen+0x20>)
 80012fe:	f008 fad1 	bl	80098a4 <f_open>
	if(res != FR_OK)
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <file_reopen+0x28>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b113      	cbz	r3, 800130e <file_reopen+0x1e>
						{
							Fat_write_read_fail=1;
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <file_reopen+0x2c>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	bd08      	pop	{r3, pc}
 8001310:	20008ca4 	.word	0x20008ca4
 8001314:	20008988 	.word	0x20008988
 8001318:	20008f26 	.word	0x20008f26
 800131c:	20008944 	.word	0x20008944

08001320 <file_mnt_reopen>:
						}
}

void file_mnt_reopen(void)
{
 8001320:	b508      	push	{r3, lr}
	  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8001322:	490c      	ldr	r1, [pc, #48]	; (8001354 <file_mnt_reopen+0x34>)
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <file_mnt_reopen+0x38>)
 8001326:	f008 ff59 	bl	800a1dc <FATFS_LinkDriver>
 800132a:	b928      	cbnz	r0, 8001338 <file_mnt_reopen+0x18>
		{
			 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 800132c:	2201      	movs	r2, #1
 800132e:	4909      	ldr	r1, [pc, #36]	; (8001354 <file_mnt_reopen+0x34>)
 8001330:	480a      	ldr	r0, [pc, #40]	; (800135c <file_mnt_reopen+0x3c>)
 8001332:	f008 fa81 	bl	8009838 <f_mount>
 8001336:	b118      	cbz	r0, 8001340 <file_mnt_reopen+0x20>
			 {
				 Fat_read_mnt_fail=1;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <file_mnt_reopen+0x40>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	bd08      	pop	{r3, pc}
			 }
			 else  // Good to Go
			 {
				 res= f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8001340:	2212      	movs	r2, #18
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <file_mnt_reopen+0x44>)
 8001344:	4808      	ldr	r0, [pc, #32]	; (8001368 <file_mnt_reopen+0x48>)
 8001346:	f008 faad 	bl	80098a4 <f_open>
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <file_mnt_reopen+0x4c>)
 800134c:	7018      	strb	r0, [r3, #0]
					if(res != FR_OK)
 800134e:	2800      	cmp	r0, #0
 8001350:	d1f2      	bne.n	8001338 <file_mnt_reopen+0x18>
 8001352:	bd08      	pop	{r3, pc}
 8001354:	20008a35 	.word	0x20008a35
 8001358:	0800b7d0 	.word	0x0800b7d0
 800135c:	20008a44 	.word	0x20008a44
 8001360:	200089ec 	.word	0x200089ec
 8001364:	20008988 	.word	0x20008988
 8001368:	20008ca4 	.word	0x20008ca4
 800136c:	20008f26 	.word	0x20008f26

08001370 <FATFS_Logstart_Delete>:
		 delay_us(100);
			 }
}

void FATFS_Logstart_Delete(void)
{
 8001370:	b508      	push	{r3, lr}

  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8001372:	490d      	ldr	r1, [pc, #52]	; (80013a8 <FATFS_Logstart_Delete+0x38>)
 8001374:	480d      	ldr	r0, [pc, #52]	; (80013ac <FATFS_Logstart_Delete+0x3c>)
 8001376:	f008 ff31 	bl	800a1dc <FATFS_LinkDriver>
 800137a:	b958      	cbnz	r0, 8001394 <FATFS_Logstart_Delete+0x24>
	{
		 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 800137c:	2201      	movs	r2, #1
 800137e:	490a      	ldr	r1, [pc, #40]	; (80013a8 <FATFS_Logstart_Delete+0x38>)
 8001380:	480b      	ldr	r0, [pc, #44]	; (80013b0 <FATFS_Logstart_Delete+0x40>)
 8001382:	f008 fa59 	bl	8009838 <f_mount>
 8001386:	b910      	cbnz	r0, 800138e <FATFS_Logstart_Delete+0x1e>
	//		 RED_LED_ON();
		 }

    	 else
			 {
			  if (f_unlink ("LogStart.txt") == FR_OK) {    // If LogStart.txt file present, delete the file
 8001388:	480a      	ldr	r0, [pc, #40]	; (80013b4 <FATFS_Logstart_Delete+0x44>)
 800138a:	f008 fe8b 	bl	800a0a4 <f_unlink>
					  }
			 }
		 delay_us(100);
 800138e:	2064      	movs	r0, #100	; 0x64
 8001390:	f001 fe96 	bl	80030c0 <delay_us>
			 }
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 8001394:	2200      	movs	r2, #0
 8001396:	4908      	ldr	r1, [pc, #32]	; (80013b8 <FATFS_Logstart_Delete+0x48>)
 8001398:	4610      	mov	r0, r2
 800139a:	f008 fa4d 	bl	8009838 <f_mount>
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 800139e:	4802      	ldr	r0, [pc, #8]	; (80013a8 <FATFS_Logstart_Delete+0x38>)
}
 80013a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 80013a4:	f008 bf36 	b.w	800a214 <FATFS_UnLinkDriver>
 80013a8:	20008a35 	.word	0x20008a35
 80013ac:	0800b7d0 	.word	0x0800b7d0
 80013b0:	20008a44 	.word	0x20008a44
 80013b4:	0800b557 	.word	0x0800b557
 80013b8:	0800b6fb 	.word	0x0800b6fb

080013bc <FATFS_Logstart_Ready>:

void FATFS_Logstart_Ready(void)
{
 80013bc:	b508      	push	{r3, lr}

  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 80013be:	4910      	ldr	r1, [pc, #64]	; (8001400 <FATFS_Logstart_Ready+0x44>)
 80013c0:	4810      	ldr	r0, [pc, #64]	; (8001404 <FATFS_Logstart_Ready+0x48>)
 80013c2:	f008 ff0b 	bl	800a1dc <FATFS_LinkDriver>
 80013c6:	b988      	cbnz	r0, 80013ec <FATFS_Logstart_Ready+0x30>
	{
		 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 80013c8:	2201      	movs	r2, #1
 80013ca:	490d      	ldr	r1, [pc, #52]	; (8001400 <FATFS_Logstart_Ready+0x44>)
 80013cc:	480e      	ldr	r0, [pc, #56]	; (8001408 <FATFS_Logstart_Ready+0x4c>)
 80013ce:	f008 fa33 	bl	8009838 <f_mount>
 80013d2:	b940      	cbnz	r0, 80013e6 <FATFS_Logstart_Ready+0x2a>

		 }

    	 else
			 {
			 if(f_open(&MyFile, "LogStart.txt", FA_OPEN_ALWAYS | FA_WRITE) != FR_OK) // Create and Open a new text file object with write access
 80013d4:	2212      	movs	r2, #18
 80013d6:	490d      	ldr	r1, [pc, #52]	; (800140c <FATFS_Logstart_Ready+0x50>)
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <FATFS_Logstart_Ready+0x54>)
 80013da:	f008 fa63 	bl	80098a4 <f_open>
 80013de:	b910      	cbnz	r0, 80013e6 <FATFS_Logstart_Ready+0x2a>

				 }
				 else
				 {

					f_close(&MyFile);
 80013e0:	480b      	ldr	r0, [pc, #44]	; (8001410 <FATFS_Logstart_Ready+0x54>)
 80013e2:	f008 fc86 	bl	8009cf2 <f_close>
				 }
			 }
		 delay_us(100);
 80013e6:	2064      	movs	r0, #100	; 0x64
 80013e8:	f001 fe6a 	bl	80030c0 <delay_us>
			 }
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 80013ec:	2200      	movs	r2, #0
 80013ee:	4909      	ldr	r1, [pc, #36]	; (8001414 <FATFS_Logstart_Ready+0x58>)
 80013f0:	4610      	mov	r0, r2
 80013f2:	f008 fa21 	bl	8009838 <f_mount>
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 80013f6:	4802      	ldr	r0, [pc, #8]	; (8001400 <FATFS_Logstart_Ready+0x44>)
}
 80013f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 80013fc:	f008 bf0a 	b.w	800a214 <FATFS_UnLinkDriver>
 8001400:	20008a35 	.word	0x20008a35
 8001404:	0800b7d0 	.word	0x0800b7d0
 8001408:	20008a44 	.word	0x20008a44
 800140c:	0800b557 	.word	0x0800b557
 8001410:	20008ca4 	.word	0x20008ca4
 8001414:	0800b6fb 	.word	0x0800b6fb

08001418 <USB_MSC_Init_Start>:
	 }
#endif
}

void USB_MSC_Init_Start(void)                                 // Initialize USB MSC mode
{
 8001418:	b510      	push	{r4, lr}
	USBD_Init(&USBD_Device, &MSC_Desc, 0);                   // USB MSC initialization
 800141a:	4c0b      	ldr	r4, [pc, #44]	; (8001448 <USB_MSC_Init_Start+0x30>)
 800141c:	490b      	ldr	r1, [pc, #44]	; (800144c <USB_MSC_Init_Start+0x34>)
 800141e:	2200      	movs	r2, #0
 8001420:	4620      	mov	r0, r4
 8001422:	f006 ff22 	bl	800826a <USBD_Init>
	USBD_RegisterClass(&USBD_Device, USBD_MSC_CLASS);        // USB class registration
 8001426:	490a      	ldr	r1, [pc, #40]	; (8001450 <USB_MSC_Init_Start+0x38>)
 8001428:	4620      	mov	r0, r4
 800142a:	f006 ff4c 	bl	80082c6 <USBD_RegisterClass>
	USBD_MSC_RegisterStorage(&USBD_Device, &USBD_DISK_fops); // Storage call backs
 800142e:	4909      	ldr	r1, [pc, #36]	; (8001454 <USB_MSC_Init_Start+0x3c>)
 8001430:	4620      	mov	r0, r4
 8001432:	f006 fb72 	bl	8007b1a <USBD_MSC_RegisterStorage>
	USBD_Start(&USBD_Device);                                // Start USB MSC
 8001436:	4620      	mov	r0, r4
 8001438:	f006 ff4c 	bl	80082d4 <USBD_Start>

	delay_us(1000000);
 800143c:	4806      	ldr	r0, [pc, #24]	; (8001458 <USB_MSC_Init_Start+0x40>)


}
 800143e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(1000000);
 8001442:	f001 be3d 	b.w	80030c0 <delay_us>
 8001446:	bf00      	nop
 8001448:	200086a4 	.word	0x200086a4
 800144c:	20000008 	.word	0x20000008
 8001450:	200001f4 	.word	0x200001f4
 8001454:	200001d4 	.word	0x200001d4
 8001458:	000f4240 	.word	0x000f4240

0800145c <USB_VCP_Init_Start>:

void USB_VCP_Init_Start(void)
{
 800145c:	b510      	push	{r4, lr}
	   USBD_Init(&USBD_Device, &VCP_Desc, 0);                   // USB VCP initialization
 800145e:	4c0b      	ldr	r4, [pc, #44]	; (800148c <USB_VCP_Init_Start+0x30>)
 8001460:	490b      	ldr	r1, [pc, #44]	; (8001490 <USB_VCP_Init_Start+0x34>)
 8001462:	2200      	movs	r2, #0
 8001464:	4620      	mov	r0, r4
 8001466:	f006 ff00 	bl	800826a <USBD_Init>
	   USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);        // USB class registration
 800146a:	490a      	ldr	r1, [pc, #40]	; (8001494 <USB_VCP_Init_Start+0x38>)
 800146c:	4620      	mov	r0, r4
 800146e:	f006 ff2a 	bl	80082c6 <USBD_RegisterClass>
	   USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops); // VCP CDC call backs
 8001472:	4909      	ldr	r1, [pc, #36]	; (8001498 <USB_VCP_Init_Start+0x3c>)
 8001474:	4620      	mov	r0, r4
 8001476:	f002 fb91 	bl	8003b9c <USBD_CDC_RegisterInterface>
	   USBD_Start(&USBD_Device);                                 // Start USB VCP
 800147a:	4620      	mov	r0, r4
 800147c:	f006 ff2a 	bl	80082d4 <USBD_Start>
	   delay_us(1000000);
 8001480:	4806      	ldr	r0, [pc, #24]	; (800149c <USB_VCP_Init_Start+0x40>)
}
 8001482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	   delay_us(1000000);
 8001486:	f001 be1b 	b.w	80030c0 <delay_us>
 800148a:	bf00      	nop
 800148c:	200086a4 	.word	0x200086a4
 8001490:	2000006c 	.word	0x2000006c
 8001494:	200000b4 	.word	0x200000b4
 8001498:	200001c4 	.word	0x200001c4
 800149c:	000f4240 	.word	0x000f4240

080014a0 <Read_RTC_Timestamp>:
          2000 + __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC)));
}


void Read_RTC_Timestamp(void)               // Read RTC timestamp and store in variables
{
 80014a0:	b510      	push	{r4, lr}
// read RTC time in BCD format from registers and save in .BIN/.DEC format

Hour = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 80014a2:	f7ff fdf7 	bl	8001094 <LL_RTC_TIME_GetHour.constprop.13>
 80014a6:	4604      	mov	r4, r0
 80014a8:	f7ff fdf4 	bl	8001094 <LL_RTC_TIME_GetHour.constprop.13>
 80014ac:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80014b0:	4a2b      	ldr	r2, [pc, #172]	; (8001560 <Read_RTC_Timestamp+0xc0>)
 80014b2:	f000 000f 	and.w	r0, r0, #15
 80014b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014ba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80014be:	7013      	strb	r3, [r2, #0]
Min = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 80014c0:	f7ff fdce 	bl	8001060 <LL_RTC_TIME_GetMinute.constprop.12>
 80014c4:	4604      	mov	r4, r0
 80014c6:	f7ff fdcb 	bl	8001060 <LL_RTC_TIME_GetMinute.constprop.12>
 80014ca:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80014ce:	4a25      	ldr	r2, [pc, #148]	; (8001564 <Read_RTC_Timestamp+0xc4>)
 80014d0:	f000 000f 	and.w	r0, r0, #15
 80014d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014d8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80014dc:	7013      	strb	r3, [r2, #0]
Sec =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80014de:	f7ff fda7 	bl	8001030 <LL_RTC_TIME_GetSecond.constprop.11>
 80014e2:	4604      	mov	r4, r0
 80014e4:	f7ff fda4 	bl	8001030 <LL_RTC_TIME_GetSecond.constprop.11>
 80014e8:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80014ec:	4a1e      	ldr	r2, [pc, #120]	; (8001568 <Read_RTC_Timestamp+0xc8>)
 80014ee:	f000 000f 	and.w	r0, r0, #15
 80014f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014f6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80014fa:	7013      	strb	r3, [r2, #0]

Mon =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 80014fc:	f7ff fd64 	bl	8000fc8 <LL_RTC_DATE_GetMonth.constprop.9>
 8001500:	4604      	mov	r4, r0
 8001502:	f7ff fd61 	bl	8000fc8 <LL_RTC_DATE_GetMonth.constprop.9>
 8001506:	f3c4 1303 	ubfx	r3, r4, #4, #4
 800150a:	4a18      	ldr	r2, [pc, #96]	; (800156c <Read_RTC_Timestamp+0xcc>)
 800150c:	f000 000f 	and.w	r0, r0, #15
 8001510:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001514:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001518:	7013      	strb	r3, [r2, #0]
Day = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 800151a:	f7ff fd3d 	bl	8000f98 <LL_RTC_DATE_GetDay.constprop.8>
 800151e:	4604      	mov	r4, r0
 8001520:	f7ff fd3a 	bl	8000f98 <LL_RTC_DATE_GetDay.constprop.8>
 8001524:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8001528:	4a11      	ldr	r2, [pc, #68]	; (8001570 <Read_RTC_Timestamp+0xd0>)
 800152a:	f000 000f 	and.w	r0, r0, #15
 800152e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001532:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001536:	7013      	strb	r3, [r2, #0]
Year =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 8001538:	f7ff fd60 	bl	8000ffc <LL_RTC_DATE_GetYear.constprop.10>
 800153c:	4604      	mov	r4, r0
 800153e:	f7ff fd5d 	bl	8000ffc <LL_RTC_DATE_GetYear.constprop.10>
 8001542:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <Read_RTC_Timestamp+0xd4>)
 8001548:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800154c:	f000 000f 	and.w	r0, r0, #15
 8001550:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001554:	7013      	strb	r3, [r2, #0]

// Releasing RTC registers (Time and Date registers); necessary for RTC read/write operation
(void)RTC->DR;
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <Read_RTC_Timestamp+0xd8>)
 8001558:	685a      	ldr	r2, [r3, #4]
(void)RTC->TR;
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	bd10      	pop	{r4, pc}
 800155e:	bf00      	nop
 8001560:	2000899a 	.word	0x2000899a
 8001564:	20008958 	.word	0x20008958
 8001568:	200089a4 	.word	0x200089a4
 800156c:	20008c88 	.word	0x20008c88
 8001570:	20008c76 	.word	0x20008c76
 8001574:	20008ca1 	.word	0x20008ca1
 8001578:	40002800 	.word	0x40002800

0800157c <update_FATFS_time>:
{
 800157c:	b508      	push	{r3, lr}
	Read_RTC_Timestamp();                                   // Read RTC time-stamps and store in variables
 800157e:	f7ff ff8f 	bl	80014a0 <Read_RTC_Timestamp>
	fno.fdate = (WORD)(((Year+20) << 9) | Mon << 5 | Day);  // Update File time with the data log starting time
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <update_FATFS_time+0x44>)
 8001584:	490f      	ldr	r1, [pc, #60]	; (80015c4 <update_FATFS_time+0x48>)
 8001586:	781a      	ldrb	r2, [r3, #0]
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <update_FATFS_time+0x4c>)
	f_utime(FILE_NAME_STRING, &fno);                        // Update RTC time on FATFS file header
 800158a:	4810      	ldr	r0, [pc, #64]	; (80015cc <update_FATFS_time+0x50>)
	fno.fdate = (WORD)(((Year+20) << 9) | Mon << 5 | Day);  // Update File time with the data log starting time
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8001592:	4a0f      	ldr	r2, [pc, #60]	; (80015d0 <update_FATFS_time+0x54>)
 8001594:	7812      	ldrb	r2, [r2, #0]
 8001596:	3214      	adds	r2, #20
 8001598:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 800159c:	808b      	strh	r3, [r1, #4]
    fno.ftime = (WORD)(Hour <<11 |  Min<<5 | Sec/2 );       // Extracting values from RTC registers
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <update_FATFS_time+0x58>)
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <update_FATFS_time+0x5c>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	015b      	lsls	r3, r3, #5
 80015a8:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80015ac:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <update_FATFS_time+0x60>)
 80015ae:	7812      	ldrb	r2, [r2, #0]
 80015b0:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 80015b4:	80cb      	strh	r3, [r1, #6]
}
 80015b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	f_utime(FILE_NAME_STRING, &fno);                        // Update RTC time on FATFS file header
 80015ba:	f008 bdc4 	b.w	800a146 <f_utime>
 80015be:	bf00      	nop
 80015c0:	20008c88 	.word	0x20008c88
 80015c4:	2000896c 	.word	0x2000896c
 80015c8:	20008c76 	.word	0x20008c76
 80015cc:	20008988 	.word	0x20008988
 80015d0:	20008ca1 	.word	0x20008ca1
 80015d4:	2000899a 	.word	0x2000899a
 80015d8:	20008958 	.word	0x20008958
 80015dc:	200089a4 	.word	0x200089a4

080015e0 <File_Close_Update_Unlink>:
{
 80015e0:	b508      	push	{r3, lr}
	f_close(&MyFile);                       // Close previous running file
 80015e2:	4807      	ldr	r0, [pc, #28]	; (8001600 <File_Close_Update_Unlink+0x20>)
 80015e4:	f008 fb85 	bl	8009cf2 <f_close>
	update_FATFS_time();                    // Write RTC time-stamp on File header/properties of last FATFS file to visualize in PC
 80015e8:	f7ff ffc8 	bl	800157c <update_FATFS_time>
	f_mount(0, "", 0); 		                //  unmount FATFS file (of running sensor storage file)
 80015ec:	2200      	movs	r2, #0
 80015ee:	4905      	ldr	r1, [pc, #20]	; (8001604 <File_Close_Update_Unlink+0x24>)
 80015f0:	4610      	mov	r0, r2
 80015f2:	f008 f921 	bl	8009838 <f_mount>
	FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
 80015f6:	4804      	ldr	r0, [pc, #16]	; (8001608 <File_Close_Update_Unlink+0x28>)
}
 80015f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
 80015fc:	f008 be0a 	b.w	800a214 <FATFS_UnLinkDriver>
 8001600:	20008ca4 	.word	0x20008ca4
 8001604:	0800b6fb 	.word	0x0800b6fb
 8001608:	20008a35 	.word	0x20008a35

0800160c <Shut_Down_SD>:
 800160c:	f7ff bfe8 	b.w	80015e0 <File_Close_Update_Unlink>

08001610 <Enter_RTC_InitMode>:
}

void Enter_RTC_InitMode(void)      // Function needed before writing on RTC registers
{
  RTC->ISR = RTC_INIT_MASK;                                // Enter Init Mode
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <Enter_RTC_InitMode+0x10>)
 8001612:	f04f 32ff 	mov.w	r2, #4294967295
 8001616:	60da      	str	r2, [r3, #12]
  while(((RTC->ISR) & RTC_ISR_INITF) != (RTC_ISR_INITF)); // Wait to enter Init mode
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	0652      	lsls	r2, r2, #25
 800161c:	d5fc      	bpl.n	8001618 <Enter_RTC_InitMode+0x8>
}
 800161e:	4770      	bx	lr
 8001620:	40002800 	.word	0x40002800

08001624 <Exit_RTC_InitMode>:

void Exit_RTC_InitMode(void)      // Function needed after writing on RTC registers
{
  RTC->ISR = (uint32_t)~RTC_ISR_INIT; // Disable RTC init mode
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <Exit_RTC_InitMode+0x1c>)
 8001626:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800162a:	60da      	str	r2, [r3, #12]

	// Wait for synchro. Needed only if Shadow registers is enabled
	WRITE_REG(RTC->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTC->ISR & RTC_ISR_INIT))); // Clear RTC sync flag
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001632:	f062 02a0 	orn	r2, r2, #160	; 0xa0
 8001636:	60da      	str	r2, [r3, #12]
	while(((RTC->ISR) & RTC_ISR_RSF) != (RTC_ISR_RSF));  // Wait the registers to be synchronised
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	0692      	lsls	r2, r2, #26
 800163c:	d5fc      	bpl.n	8001638 <Exit_RTC_InitMode+0x14>
}
 800163e:	4770      	bx	lr
 8001640:	40002800 	.word	0x40002800

08001644 <MX_RTC_Init>:

void MX_RTC_Init(void)                           // RTC initialization after Power on reset
{
 8001644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001646:	4b29      	ldr	r3, [pc, #164]	; (80016ec <MX_RTC_Init+0xa8>)
 8001648:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800164c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001650:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001654:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001658:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800165c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001660:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001664:	f042 0201 	orr.w	r2, r2, #1
 8001668:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800166c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  LL_RTC_InitTypeDef RTC_InitStruct;

  LL_RCC_ForceBackupDomainReset();               // Reset Backup domain registers
  LL_RCC_ReleaseBackupDomainReset();
  LL_RCC_LSE_Enable();                          // Configure LSE as RTC source clock
  while (LL_RCC_LSE_IsReady() != 1);
 8001670:	0792      	lsls	r2, r2, #30
 8001672:	d5fb      	bpl.n	800166c <MX_RTC_Init+0x28>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001674:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
  LL_RCC_EnableRTC();                           // RTC clock

  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
  LL_RTC_Init(RTC, &RTC_InitStruct);           // Initialize RTC with default configurations
 8001678:	4c1d      	ldr	r4, [pc, #116]	; (80016f0 <MX_RTC_Init+0xac>)
 800167a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800167e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001682:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001686:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 800168a:	a904      	add	r1, sp, #16
 800168c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001690:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001694:	2300      	movs	r3, #0
 8001696:	f841 3d0c 	str.w	r3, [r1, #-12]!
  LL_RTC_Init(RTC, &RTC_InitStruct);           // Initialize RTC with default configurations
 800169a:	4620      	mov	r0, r4
 800169c:	f005 fc2a 	bl	8006ef4 <LL_RTC_Init>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80016a0:	23ca      	movs	r3, #202	; 0xca
 80016a2:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80016a4:	2353      	movs	r3, #83	; 0x53
 80016a6:	6263      	str	r3, [r4, #36]	; 0x24


    LL_RTC_DisableWriteProtection(RTC);
    Enter_RTC_InitMode();                         // Enter RTC initialization mode to set parameters
 80016a8:	f7ff ffb2 	bl	8001610 <Enter_RTC_InitMode>

    // Calender set up
    MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_A, 0x7F << RTC_POSITION_PRER_PREDIV_A);  // ASYNC prediv= 0x7F
 80016ac:	6923      	ldr	r3, [r4, #16]
 80016ae:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80016b2:	fa92 f2a2 	rbit	r2, r2
 80016b6:	217f      	movs	r1, #127	; 0x7f
 80016b8:	fab2 f282 	clz	r2, r2
 80016bc:	fa01 f202 	lsl.w	r2, r1, r2
 80016c0:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80016c4:	4313      	orrs	r3, r2
 80016c6:	6123      	str	r3, [r4, #16]
  	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_S, 0xFF);                                // SYNC prediv= 0xFF
 80016c8:	6923      	ldr	r3, [r4, #16]
 80016ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80016ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80016d2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80016d6:	6123      	str	r3, [r4, #16]

  	Exit_RTC_InitMode();
 80016d8:	f7ff ffa4 	bl	8001624 <Exit_RTC_InitMode>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80016dc:	23ff      	movs	r3, #255	; 0xff
 80016de:	6263      	str	r3, [r4, #36]	; 0x24

  tmp = (uint32_t)(&(RTCx->BKP0R));
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <MX_RTC_Init+0xb0>)
 80016e2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80016e6:	605a      	str	r2, [r3, #4]
}
 80016e8:	b004      	add	sp, #16
 80016ea:	bd10      	pop	{r4, pc}
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40002800 	.word	0x40002800
 80016f4:	40002850 	.word	0x40002850

080016f8 <Set_RTC_Calendar>:
{
 80016f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80016fa:	4c19      	ldr	r4, [pc, #100]	; (8001760 <Set_RTC_Calendar+0x68>)
 80016fc:	460f      	mov	r7, r1
 80016fe:	4619      	mov	r1, r3
 8001700:	23ca      	movs	r3, #202	; 0xca
 8001702:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001704:	2353      	movs	r3, #83	; 0x53
 8001706:	b085      	sub	sp, #20
 8001708:	6263      	str	r3, [r4, #36]	; 0x24
 800170a:	4606      	mov	r6, r0
 800170c:	4615      	mov	r5, r2
  Enter_RTC_InitMode();
 800170e:	f7ff ff7f 	bl	8001610 <Enter_RTC_InitMode>
  RTC_TimeStruct.Minutes = Min;
 8001712:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  RTC_TimeStruct.Hours = Hour;
 8001716:	f88d 100c 	strb.w	r1, [sp, #12]
  RTC_TimeStruct.Minutes = Min;
 800171a:	f88d 300d 	strb.w	r3, [sp, #13]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 800171e:	aa02      	add	r2, sp, #8
  RTC_TimeStruct.Seconds = Sec;
 8001720:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8001724:	f88d 300e 	strb.w	r3, [sp, #14]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 8001728:	2100      	movs	r1, #0
 800172a:	4620      	mov	r0, r4
 800172c:	f005 fc52 	bl	8006fd4 <LL_RTC_TIME_Init>
  RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;          // Default value
 8001730:	2301      	movs	r3, #1
  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8001732:	aa01      	add	r2, sp, #4
 8001734:	2100      	movs	r1, #0
 8001736:	4620      	mov	r0, r4
  RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;          // Default value
 8001738:	f88d 3004 	strb.w	r3, [sp, #4]
  RTC_DateStruct.Month = Month;
 800173c:	f88d 7005 	strb.w	r7, [sp, #5]
  RTC_DateStruct.Year = Year;
 8001740:	f88d 6007 	strb.w	r6, [sp, #7]
  RTC_DateStruct.Day = Day;
 8001744:	f88d 5006 	strb.w	r5, [sp, #6]
  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8001748:	f005 fc88 	bl	800705c <LL_RTC_DATE_Init>
  Exit_RTC_InitMode();
 800174c:	f7ff ff6a 	bl	8001624 <Exit_RTC_InitMode>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001750:	23ff      	movs	r3, #255	; 0xff
 8001752:	6263      	str	r3, [r4, #36]	; 0x24
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <Set_RTC_Calendar+0x6c>)
 8001756:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800175a:	605a      	str	r2, [r3, #4]
}
 800175c:	b005      	add	sp, #20
 800175e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001760:	40002800 	.word	0x40002800
 8001764:	40002850 	.word	0x40002850

08001768 <RTC_BAK_GetRegister>:
// Valid register value indicates RTC is enabled and running
uint32_t RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
  register uint32_t tmp = 0U;

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8001768:	3050      	adds	r0, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800176a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
}
 800176e:	4770      	bx	lr

08001770 <USB_PA9_EXTI_conf>:
  LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_10);                        // Interrupt configured for falling edge
}


void USB_PA9_EXTI_conf(void)                                              // PA9 EXTI pin interrupt configuration for USB connectivity Sense
{
 8001770:	b508      	push	{r3, lr}
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <USB_PA9_EXTI_conf+0x34>)
 8001774:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001778:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(EXTI9_5_IRQn);                                           // Enabling External GPIO pin interrupt (EXTI9-5) for USB connectivity PA10 Pin
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);                   // Enable Sysconfig clock to enable EXTI pin interrupts
 800177a:	2001      	movs	r0, #1
 800177c:	f7ff fb60 	bl	8000e40 <LL_APB2_GRP1_EnableClock>
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001780:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <USB_PA9_EXTI_conf+0x38>)
 8001782:	6913      	ldr	r3, [r2, #16]
 8001784:	21f0      	movs	r1, #240	; 0xf0
 8001786:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800178a:	fa91 f1a1 	rbit	r1, r1
 800178e:	6113      	str	r3, [r2, #16]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <USB_PA9_EXTI_conf+0x3c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001798:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	bd08      	pop	{r3, pc}
 80017a4:	e000e100 	.word	0xe000e100
 80017a8:	40010000 	.word	0x40010000
 80017ac:	40010400 	.word	0x40010400

080017b0 <P_IMU4_SPI3_Init>:
	//}
}


void P_IMU4_SPI3_Init(void)
{
 80017b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LL_SPI_InitTypeDef SPI_InitStruct;

  LL_GPIO_InitTypeDef GPIO_InitStruct;

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80017b4:	2004      	movs	r0, #4
{
 80017b6:	b093      	sub	sp, #76	; 0x4c
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80017b8:	f7ff fb34 	bl	8000e24 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80017bc:	2002      	movs	r0, #2
 80017be:	f7ff fb31 	bl	8000e24 <LL_AHB2_GRP1_EnableClock>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017c2:	4b34      	ldr	r3, [pc, #208]	; (8001894 <P_IMU4_SPI3_Init+0xe4>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
  LL_GPIO_Init(SPI3_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 80017c4:	4e34      	ldr	r6, [pc, #208]	; (8001898 <P_IMU4_SPI3_Init+0xe8>)
 80017c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017cc:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
  GPIO_InitStruct.Pin = SPI3_SCK_IMU_PIN;
 80017d0:	f04f 0908 	mov.w	r9, #8
 80017d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017d8:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017da:	2502      	movs	r5, #2
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80017e0:	2706      	movs	r7, #6
 80017e2:	9301      	str	r3, [sp, #4]
  LL_GPIO_Init(SPI3_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 80017e4:	eb0d 0109 	add.w	r1, sp, r9
 80017e8:	4630      	mov	r0, r6
  (void)tmpreg;
 80017ea:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017ec:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017ee:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = SPI3_SCK_IMU_PIN;
 80017f0:	f8cd 9008 	str.w	r9, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017f4:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80017fa:	9707      	str	r7, [sp, #28]
  LL_GPIO_Init(SPI3_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 80017fc:	f005 fa00 	bl	8006c00 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI3_MISO_IMU_PIN;
 8001800:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
  LL_GPIO_Init(SPI3_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001802:	eb0d 0109 	add.w	r1, sp, r9
 8001806:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = SPI3_MISO_IMU_PIN;
 8001808:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800180a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800180c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800180e:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001814:	9707      	str	r7, [sp, #28]
  LL_GPIO_Init(SPI3_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001816:	f005 f9f3 	bl	8006c00 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI3_MOSI_IMU_PIN;
 800181a:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
  LL_GPIO_Init(SPI3_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 800181c:	eb0d 0109 	add.w	r1, sp, r9
 8001820:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = SPI3_MOSI_IMU_PIN;
 8001822:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001824:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001826:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001828:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800182e:	9707      	str	r7, [sp, #28]
  LL_GPIO_Init(SPI3_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001830:	f005 f9e6 	bl	8006c00 <LL_GPIO_Init>


  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001834:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001838:	9309      	str	r3, [sp, #36]	; 0x24
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800183a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800183e:	9408      	str	r4, [sp, #32]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001840:	930a      	str	r3, [sp, #40]	; 0x28
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;

  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001842:	940f      	str	r4, [sp, #60]	; 0x3c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001844:	9410      	str	r4, [sp, #64]	; 0x40
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001846:	2301      	movs	r3, #1
  SPI_InitStruct.CRCPoly = 7;
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001848:	4c14      	ldr	r4, [pc, #80]	; (800189c <P_IMU4_SPI3_Init+0xec>)
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800184a:	930c      	str	r3, [sp, #48]	; 0x30
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800184c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001850:	930d      	str	r3, [sp, #52]	; 0x34
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001852:	a908      	add	r1, sp, #32
  SPI_InitStruct.CRCPoly = 7;
 8001854:	2307      	movs	r3, #7
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001856:	4620      	mov	r0, r4
  SPI_InitStruct.CRCPoly = 7;
 8001858:	9311      	str	r3, [sp, #68]	; 0x44
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800185a:	950b      	str	r5, [sp, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 800185c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001860:	f005 fc9c 	bl	800719c <LL_SPI_Init>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001864:	6863      	ldr	r3, [r4, #4]
 8001866:	f023 0308 	bic.w	r3, r3, #8
 800186a:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800186c:	6863      	ldr	r3, [r4, #4]
 800186e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001872:	6063      	str	r3, [r4, #4]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_RXNE(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8001874:	6863      	ldr	r3, [r4, #4]
 8001876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800187a:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800187c:	6823      	ldr	r3, [r4, #0]
 800187e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001882:	6023      	str	r3, [r4, #0]

  LL_SPI_SetRxFIFOThreshold(SPI3,LL_SPI_RX_FIFO_TH_QUARTER);
  LL_SPI_DisableIT_RXNE(SPI3);
  LL_SPI_Enable(SPI3);

  delay_us(10000);
 8001884:	f242 7010 	movw	r0, #10000	; 0x2710
 8001888:	f001 fc1a 	bl	80030c0 <delay_us>

}
 800188c:	b013      	add	sp, #76	; 0x4c
 800188e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000
 8001898:	48000400 	.word	0x48000400
 800189c:	40003c00 	.word	0x40003c00

080018a0 <Wait_for_ADC_timeout_While_Datalog>:
	         }
}

void Wait_for_ADC_timeout_While_Datalog(void)   // During Timer_Interrupt for Data logging, Involved Volatile variables
{
	ADC_TimeOut_Count_Buf++;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <Wait_for_ADC_timeout_While_Datalog+0x1c>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	3201      	adds	r2, #1
 80018a6:	601a      	str	r2, [r3, #0]
	if( ADC_TimeOut_Count_Buf > ADC_TimeOut_Limit_Buf) // 100ms= 48000*ADC_TimeOut_MS_value)
 80018a8:	6819      	ldr	r1, [r3, #0]
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <Wait_for_ADC_timeout_While_Datalog+0x20>)
 80018ac:	4291      	cmp	r1, r2
 80018ae:	d904      	bls.n	80018ba <Wait_for_ADC_timeout_While_Datalog+0x1a>
	         {
		ADC_TimeOut_Count_Buf=0;
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
		ADC_Error_Buf=1;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <Wait_for_ADC_timeout_While_Datalog+0x24>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
 80018ba:	4770      	bx	lr
 80018bc:	20008968 	.word	0x20008968
 80018c0:	00493e00 	.word	0x00493e00
 80018c4:	20008f27 	.word	0x20008f27

080018c8 <Wait_for_ADC_TimeOut_>:
	         }
}

void Wait_for_ADC_TimeOut_ (void)
{
	ADC_TimeOut_Count++;
 80018c8:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <Wait_for_ADC_TimeOut_+0x1c>)
	if( ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 80018ca:	4907      	ldr	r1, [pc, #28]	; (80018e8 <Wait_for_ADC_TimeOut_+0x20>)
	ADC_TimeOut_Count++;
 80018cc:	6813      	ldr	r3, [r2, #0]
 80018ce:	3301      	adds	r3, #1
	if( ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 80018d0:	428b      	cmp	r3, r1
	         {
		ADC_TimeOut_Count=0;
 80018d2:	bf83      	ittte	hi
 80018d4:	2300      	movhi	r3, #0
 80018d6:	6013      	strhi	r3, [r2, #0]
		ADC_Error=1;
 80018d8:	4b04      	ldrhi	r3, [pc, #16]	; (80018ec <Wait_for_ADC_TimeOut_+0x24>)
	ADC_TimeOut_Count++;
 80018da:	6013      	strls	r3, [r2, #0]
		ADC_Error=1;
 80018dc:	bf84      	itt	hi
 80018de:	2201      	movhi	r2, #1
 80018e0:	701a      	strbhi	r2, [r3, #0]
 80018e2:	4770      	bx	lr
 80018e4:	20008f28 	.word	0x20008f28
 80018e8:	00493e00 	.word	0x00493e00
 80018ec:	20008f1e 	.word	0x20008f1e

080018f0 <P_Activate_ADC2>:
{
 80018f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 80018f2:	2300      	movs	r3, #0
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018f4:	482c      	ldr	r0, [pc, #176]	; (80019a8 <P_Activate_ADC2+0xb8>)
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / 100000) /10);
 80018fa:	4a2c      	ldr	r2, [pc, #176]	; (80019ac <P_Activate_ADC2+0xbc>)
 80018fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001900:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001904:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8001906:	6883      	ldr	r3, [r0, #8]
 8001908:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800190c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001914:	6083      	str	r3, [r0, #8]
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <P_Activate_ADC2+0xc0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	fbb3 f3f2 	udiv	r3, r3, r2
 800191e:	220a      	movs	r2, #10
 8001920:	4353      	muls	r3, r2
 8001922:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001926:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8001928:	9a01      	ldr	r2, [sp, #4]
 800192a:	2a00      	cmp	r2, #0
 800192c:	d12f      	bne.n	800198e <P_Activate_ADC2+0x9e>
  MODIFY_REG(ADCx->CR,
 800192e:	6883      	ldr	r3, [r0, #8]
    ADC_TimeOut_Count=0;
 8001930:	4d20      	ldr	r5, [pc, #128]	; (80019b4 <P_Activate_ADC2+0xc4>)
    ADC_Error=0;
 8001932:	4c21      	ldr	r4, [pc, #132]	; (80019b8 <P_Activate_ADC2+0xc8>)
 8001934:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001938:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800193c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001940:	6083      	str	r3, [r0, #8]
 8001942:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
    ADC_TimeOut_Count=0;
 8001946:	602a      	str	r2, [r5, #0]
    ADC_Error=0;
 8001948:	7022      	strb	r2, [r4, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800194a:	6883      	ldr	r3, [r0, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC2) == 0) && !Error_preceding&& (ADC_Error==0))
 800194c:	2b00      	cmp	r3, #0
 800194e:	db04      	blt.n	800195a <P_Activate_ADC2+0x6a>
 8001950:	6933      	ldr	r3, [r6, #16]
 8001952:	0599      	lsls	r1, r3, #22
 8001954:	d401      	bmi.n	800195a <P_Activate_ADC2+0x6a>
 8001956:	7823      	ldrb	r3, [r4, #0]
 8001958:	b1e3      	cbz	r3, 8001994 <P_Activate_ADC2+0xa4>
    wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES;   // ADC Delay calculations
 800195a:	2380      	movs	r3, #128	; 0x80
      wait_loop_index--;
 800195c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800195e:	9a01      	ldr	r2, [sp, #4]
 8001960:	b9da      	cbnz	r2, 800199a <P_Activate_ADC2+0xaa>
  MODIFY_REG(ADCx->CR,
 8001962:	6883      	ldr	r3, [r0, #8]
 8001964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001968:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6083      	str	r3, [r0, #8]
    ADC_TimeOut_Count=0;
 8001972:	602a      	str	r2, [r5, #0]
    ADC_Error=0;
 8001974:	7022      	strb	r2, [r4, #0]
 8001976:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800197a:	6803      	ldr	r3, [r0, #0]
    while ((LL_ADC_IsActiveFlag_ADRDY(ADC2) == 0)&& !Error_preceding&& (ADC_Error==0))
 800197c:	07da      	lsls	r2, r3, #31
 800197e:	d404      	bmi.n	800198a <P_Activate_ADC2+0x9a>
 8001980:	692b      	ldr	r3, [r5, #16]
 8001982:	059b      	lsls	r3, r3, #22
 8001984:	d401      	bmi.n	800198a <P_Activate_ADC2+0x9a>
 8001986:	7823      	ldrb	r3, [r4, #0]
 8001988:	b153      	cbz	r3, 80019a0 <P_Activate_ADC2+0xb0>
}
 800198a:	b002      	add	sp, #8
 800198c:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 800198e:	9b01      	ldr	r3, [sp, #4]
 8001990:	3b01      	subs	r3, #1
 8001992:	e7c8      	b.n	8001926 <P_Activate_ADC2+0x36>
  	  Wait_for_ADC_TimeOut_();
 8001994:	f7ff ff98 	bl	80018c8 <Wait_for_ADC_TimeOut_>
 8001998:	e7d7      	b.n	800194a <P_Activate_ADC2+0x5a>
      wait_loop_index--;
 800199a:	9b01      	ldr	r3, [sp, #4]
 800199c:	3b01      	subs	r3, #1
 800199e:	e7dd      	b.n	800195c <P_Activate_ADC2+0x6c>
  	  Wait_for_ADC_TimeOut_();
 80019a0:	f7ff ff92 	bl	80018c8 <Wait_for_ADC_TimeOut_>
 80019a4:	e7e9      	b.n	800197a <P_Activate_ADC2+0x8a>
 80019a6:	bf00      	nop
 80019a8:	50040100 	.word	0x50040100
 80019ac:	000186a0 	.word	0x000186a0
 80019b0:	20000004 	.word	0x20000004
 80019b4:	20008f28 	.word	0x20008f28
 80019b8:	20008f1e 	.word	0x20008f1e

080019bc <P_Activate_ADC1>:
{
 80019bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019c2:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <P_Activate_ADC1+0xbc>)
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / 100000) /10);
 80019c4:	492d      	ldr	r1, [pc, #180]	; (8001a7c <P_Activate_ADC1+0xc0>)
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 80019cc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80019d0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80019d8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80019dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	4a27      	ldr	r2, [pc, #156]	; (8001a80 <P_Activate_ADC1+0xc4>)
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	fbb2 f2f1 	udiv	r2, r2, r1
 80019ea:	210a      	movs	r1, #10
 80019ec:	434a      	muls	r2, r1
 80019ee:	fbb2 f2f1 	udiv	r2, r2, r1
      wait_loop_index--;
 80019f2:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 80019f4:	9901      	ldr	r1, [sp, #4]
 80019f6:	2900      	cmp	r1, #0
 80019f8:	d132      	bne.n	8001a60 <P_Activate_ADC1+0xa4>
  MODIFY_REG(ADCx->CR,
 80019fa:	689a      	ldr	r2, [r3, #8]
    ADC_TimeOut_Count=0;
 80019fc:	4c21      	ldr	r4, [pc, #132]	; (8001a84 <P_Activate_ADC1+0xc8>)
    ADC_Error=0;
 80019fe:	4822      	ldr	r0, [pc, #136]	; (8001a88 <P_Activate_ADC1+0xcc>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8001a00:	4d1d      	ldr	r5, [pc, #116]	; (8001a78 <P_Activate_ADC1+0xbc>)
  MODIFY_REG(ADCx->CR,
 8001a02:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8001a06:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001a0a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
    ADC_TimeOut_Count=0;
 8001a14:	6021      	str	r1, [r4, #0]
    ADC_Error=0;
 8001a16:	7001      	strb	r1, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8001a18:	68ab      	ldr	r3, [r5, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC1) == 0) && !Error_preceding&& (ADC_Error==0))
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	db04      	blt.n	8001a28 <P_Activate_ADC1+0x6c>
 8001a1e:	6933      	ldr	r3, [r6, #16]
 8001a20:	0599      	lsls	r1, r3, #22
 8001a22:	d401      	bmi.n	8001a28 <P_Activate_ADC1+0x6c>
 8001a24:	7803      	ldrb	r3, [r0, #0]
 8001a26:	b1f3      	cbz	r3, 8001a66 <P_Activate_ADC1+0xaa>
    wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES;   // ADC Delay calculations
 8001a28:	2380      	movs	r3, #128	; 0x80
      wait_loop_index--;
 8001a2a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8001a2c:	9901      	ldr	r1, [sp, #4]
 8001a2e:	b9e9      	cbnz	r1, 8001a6c <P_Activate_ADC1+0xb0>
  MODIFY_REG(ADCx->CR,
 8001a30:	4a11      	ldr	r2, [pc, #68]	; (8001a78 <P_Activate_ADC1+0xbc>)
 8001a32:	6893      	ldr	r3, [r2, #8]
 8001a34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6093      	str	r3, [r2, #8]
 8001a42:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
    ADC_TimeOut_Count=0;
 8001a46:	6021      	str	r1, [r4, #0]
    ADC_Error=0;
 8001a48:	7001      	strb	r1, [r0, #0]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8001a4a:	4614      	mov	r4, r2
 8001a4c:	6823      	ldr	r3, [r4, #0]
    while ((LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)&& !Error_preceding&& (ADC_Error==0))
 8001a4e:	07da      	lsls	r2, r3, #31
 8001a50:	d404      	bmi.n	8001a5c <P_Activate_ADC1+0xa0>
 8001a52:	692b      	ldr	r3, [r5, #16]
 8001a54:	059b      	lsls	r3, r3, #22
 8001a56:	d401      	bmi.n	8001a5c <P_Activate_ADC1+0xa0>
 8001a58:	7803      	ldrb	r3, [r0, #0]
 8001a5a:	b153      	cbz	r3, 8001a72 <P_Activate_ADC1+0xb6>
}
 8001a5c:	b002      	add	sp, #8
 8001a5e:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 8001a60:	9a01      	ldr	r2, [sp, #4]
 8001a62:	3a01      	subs	r2, #1
 8001a64:	e7c5      	b.n	80019f2 <P_Activate_ADC1+0x36>
  	  Wait_for_ADC_TimeOut_();
 8001a66:	f7ff ff2f 	bl	80018c8 <Wait_for_ADC_TimeOut_>
 8001a6a:	e7d5      	b.n	8001a18 <P_Activate_ADC1+0x5c>
      wait_loop_index--;
 8001a6c:	9b01      	ldr	r3, [sp, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	e7db      	b.n	8001a2a <P_Activate_ADC1+0x6e>
  	  Wait_for_ADC_TimeOut_();
 8001a72:	f7ff ff29 	bl	80018c8 <Wait_for_ADC_TimeOut_>
 8001a76:	e7e9      	b.n	8001a4c <P_Activate_ADC1+0x90>
 8001a78:	50040000 	.word	0x50040000
 8001a7c:	000186a0 	.word	0x000186a0
 8001a80:	20000004 	.word	0x20000004
 8001a84:	20008f28 	.word	0x20008f28
 8001a88:	20008f1e 	.word	0x20008f1e

08001a8c <P_ADC1_conf_strain>:
  SET_BIT(RCC->AHB2RSTR, Periphs);
 8001a8c:	4b35      	ldr	r3, [pc, #212]	; (8001b64 <P_ADC1_conf_strain+0xd8>)
 8001a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
{
 8001a94:	b570      	push	{r4, r5, r6, lr}
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 8001a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a9a:	4d33      	ldr	r5, [pc, #204]	; (8001b68 <P_ADC1_conf_strain+0xdc>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8001a9c:	4c33      	ldr	r4, [pc, #204]	; (8001b6c <P_ADC1_conf_strain+0xe0>)
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);   // FSR1=PC2=Ch3=ADC1
 8001a9e:	4e34      	ldr	r6, [pc, #208]	; (8001b70 <P_ADC1_conf_strain+0xe4>)
 8001aa0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aa4:	62da      	str	r2, [r3, #44]	; 0x2c
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8001aa6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001aaa:	f7ff f9bb 	bl	8000e24 <LL_AHB2_GRP1_EnableClock>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001aae:	68ab      	ldr	r3, [r5, #8]
 8001ab0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab8:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8001aba:	68e3      	ldr	r3, [r4, #12]
 8001abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac0:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 8001ac2:	68e3      	ldr	r3, [r4, #12]
 8001ac4:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8001ac8:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 8001aca:	68e3      	ldr	r3, [r4, #12]
 8001acc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ad0:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 8001ad2:	68e3      	ldr	r3, [r4, #12]
 8001ad4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ad8:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001ada:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001adc:	f023 030f 	bic.w	r3, r3, #15
 8001ae0:	6323      	str	r3, [r4, #48]	; 0x30
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);   // FSR1=PC2=Ch3=ADC1
 8001ae2:	4632      	mov	r2, r6
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	2106      	movs	r1, #6
 8001ae8:	f7ff f9ce 	bl	8000e88 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_640CYCLES_5);
 8001aec:	4631      	mov	r1, r6
 8001aee:	4620      	mov	r0, r4
 8001af0:	2207      	movs	r2, #7
 8001af2:	f7ff f9e7 	bl	8000ec4 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001af6:	68ab      	ldr	r3, [r5, #8]
 8001af8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b00:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8001b02:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8001b06:	4d1b      	ldr	r5, [pc, #108]	; (8001b74 <P_ADC1_conf_strain+0xe8>)
 8001b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0c:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 8001b10:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8001b14:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8001b18:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 8001b1c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8001b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b24:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 8001b28:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8001b2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b30:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001b34:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8001b38:	f023 030f 	bic.w	r3, r3, #15
 8001b3c:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8001b40:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8001b44:	462a      	mov	r2, r5
 8001b46:	4620      	mov	r0, r4
 8001b48:	2106      	movs	r1, #6
 8001b4a:	f7ff f99d 	bl	8000e88 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_640CYCLES_5); // FSR2=PC3=Ch4=ADC2
 8001b4e:	4629      	mov	r1, r5
 8001b50:	4620      	mov	r0, r4
 8001b52:	2207      	movs	r2, #7
 8001b54:	f7ff f9b6 	bl	8000ec4 <LL_ADC_SetChannelSamplingTime>
    P_Activate_ADC2();
 8001b58:	f7ff feca 	bl	80018f0 <P_Activate_ADC2>
}
 8001b5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    P_Activate_ADC1();
 8001b60:	f7ff bf2c 	b.w	80019bc <P_Activate_ADC1>
 8001b64:	40021000 	.word	0x40021000
 8001b68:	50040300 	.word	0x50040300
 8001b6c:	50040000 	.word	0x50040000
 8001b70:	0c900008 	.word	0x0c900008
 8001b74:	10c00010 	.word	0x10c00010

08001b78 <P_ADC_Sensor_GPIO_Init>:
{
 8001b78:	b510      	push	{r4, lr}
LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_2, LL_GPIO_MODE_ANALOG);
 8001b7a:	4c0d      	ldr	r4, [pc, #52]	; (8001bb0 <P_ADC_Sensor_GPIO_Init+0x38>)
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001b7c:	2004      	movs	r0, #4
 8001b7e:	f7ff f951 	bl	8000e24 <LL_AHB2_GRP1_EnableClock>
LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_2, LL_GPIO_MODE_ANALOG);
 8001b82:	4620      	mov	r0, r4
 8001b84:	2203      	movs	r2, #3
 8001b86:	2104      	movs	r1, #4
 8001b88:	f7ff f968 	bl	8000e5c <LL_GPIO_SetPinMode>
  SET_BIT(GPIOx->ASCR, PinMask);
 8001b8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	62e3      	str	r3, [r4, #44]	; 0x2c
LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_3, LL_GPIO_MODE_ANALOG);
 8001b94:	4620      	mov	r0, r4
 8001b96:	2203      	movs	r2, #3
 8001b98:	2108      	movs	r1, #8
 8001b9a:	f7ff f95f 	bl	8000e5c <LL_GPIO_SetPinMode>
 8001b9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ba0:	f043 0308 	orr.w	r3, r3, #8
 8001ba4:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8001ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  P_ADC1_conf_strain();
 8001baa:	f7ff bf6f 	b.w	8001a8c <P_ADC1_conf_strain>
 8001bae:	bf00      	nop
 8001bb0:	48000800 	.word	0x48000800

08001bb4 <WriteReg3>:

LL_GPIO_SetOutputPin(MPU_CS_GPIO_PORT, MPU_CS_PIN); // PA4 CS SET Active Low
return temp_val;
}

unsigned int WriteReg3(uint8_t adress, uint8_t data){
 8001bb4:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(GPIOx->BRR, PinMask);
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <WriteReg3+0x48>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	629a      	str	r2, [r3, #40]	; 0x28
 8001bbc:	4605      	mov	r5, r0
	 unsigned int temp_val;
LL_GPIO_ResetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN); // PA4 CS RESET Active Low
delay_us(10);
 8001bbe:	200a      	movs	r0, #10
unsigned int WriteReg3(uint8_t adress, uint8_t data){
 8001bc0:	460c      	mov	r4, r1
delay_us(10);
 8001bc2:	f001 fa7d 	bl	80030c0 <delay_us>
while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001bc6:	4a0e      	ldr	r2, [pc, #56]	; (8001c00 <WriteReg3+0x4c>)
 8001bc8:	4613      	mov	r3, r2
 8001bca:	6891      	ldr	r1, [r2, #8]
 8001bcc:	0789      	lsls	r1, r1, #30
 8001bce:	d5fc      	bpl.n	8001bca <WriteReg3+0x16>
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001bd0:	7315      	strb	r5, [r2, #12]
LL_SPI_TransmitData8(SPI3,adress);
while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	07d0      	lsls	r0, r2, #31
 8001bd6:	d5fc      	bpl.n	8001bd2 <WriteReg3+0x1e>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001bd8:	68da      	ldr	r2, [r3, #12]
LL_SPI_ReceiveData8(SPI3);

while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	0791      	lsls	r1, r2, #30
 8001bde:	d5fc      	bpl.n	8001bda <WriteReg3+0x26>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001be0:	731c      	strb	r4, [r3, #12]
LL_SPI_TransmitData8(SPI3,data);
while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <WriteReg3+0x4c>)
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	07d2      	lsls	r2, r2, #31
 8001be8:	d5fc      	bpl.n	8001be4 <WriteReg3+0x30>
temp_val=LL_SPI_ReceiveData8(SPI3);
delay_us(5);
 8001bea:	2005      	movs	r0, #5
  return (uint8_t)(READ_REG(SPIx->DR));
 8001bec:	68dc      	ldr	r4, [r3, #12]
 8001bee:	f001 fa67 	bl	80030c0 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001bf2:	4b02      	ldr	r3, [pc, #8]	; (8001bfc <WriteReg3+0x48>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	619a      	str	r2, [r3, #24]
LL_GPIO_SetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN); // PA4 CS SET Active Low
return temp_val;
}
 8001bf8:	b2e0      	uxtb	r0, r4
 8001bfa:	bd38      	pop	{r3, r4, r5, pc}
 8001bfc:	48001c00 	.word	0x48001c00
 8001c00:	40003c00 	.word	0x40003c00

08001c04 <WriteReg1>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001c04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c08:	f44f 7280 	mov.w	r2, #256	; 0x100


unsigned int WriteReg1(uint8_t adress, uint8_t data){
 8001c0c:	b510      	push	{r4, lr}
 8001c0e:	629a      	str	r2, [r3, #40]	; 0x28
	 unsigned int temp_val;
LL_GPIO_ResetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);

while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001c10:	4a0c      	ldr	r2, [pc, #48]	; (8001c44 <WriteReg1+0x40>)
 8001c12:	4613      	mov	r3, r2
 8001c14:	6894      	ldr	r4, [r2, #8]
 8001c16:	07a4      	lsls	r4, r4, #30
 8001c18:	d5fc      	bpl.n	8001c14 <WriteReg1+0x10>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001c1a:	7310      	strb	r0, [r2, #12]
LL_SPI_TransmitData8(SPI1,adress);
while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	07d4      	lsls	r4, r2, #31
 8001c20:	d5fc      	bpl.n	8001c1c <WriteReg1+0x18>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001c22:	68da      	ldr	r2, [r3, #12]
LL_SPI_ReceiveData8(SPI1);

while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	0790      	lsls	r0, r2, #30
 8001c28:	d5fc      	bpl.n	8001c24 <WriteReg1+0x20>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001c2a:	7319      	strb	r1, [r3, #12]
LL_SPI_TransmitData8(SPI1,data);
while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <WriteReg1+0x40>)
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	07d2      	lsls	r2, r2, #31
 8001c32:	d5fc      	bpl.n	8001c2e <WriteReg1+0x2a>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001c34:	68d8      	ldr	r0, [r3, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001c36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c3e:	619a      	str	r2, [r3, #24]
temp_val=LL_SPI_ReceiveData8(SPI1);

LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);
return temp_val;
}
 8001c40:	b2c0      	uxtb	r0, r0
 8001c42:	bd10      	pop	{r4, pc}
 8001c44:	40013000 	.word	0x40013000

08001c48 <WriteReg2>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <WriteReg2+0x3c>)
 8001c4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000


unsigned int WriteReg2(uint8_t adress, uint8_t data){
 8001c4e:	b510      	push	{r4, lr}
 8001c50:	629a      	str	r2, [r3, #40]	; 0x28
	 unsigned int temp_val;
LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_PORT, SPI2_CS_PIN);

while(!(SPI2->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001c52:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <WriteReg2+0x40>)
 8001c54:	4613      	mov	r3, r2
 8001c56:	6894      	ldr	r4, [r2, #8]
 8001c58:	07a4      	lsls	r4, r4, #30
 8001c5a:	d5fc      	bpl.n	8001c56 <WriteReg2+0xe>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001c5c:	7310      	strb	r0, [r2, #12]
LL_SPI_TransmitData8(SPI2,adress);
while(!(SPI2->SR & SPI_SR_RXNE)); //data received?
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	07d4      	lsls	r4, r2, #31
 8001c62:	d5fc      	bpl.n	8001c5e <WriteReg2+0x16>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001c64:	68da      	ldr	r2, [r3, #12]
LL_SPI_ReceiveData8(SPI2);

while(!(SPI2->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	0790      	lsls	r0, r2, #30
 8001c6a:	d5fc      	bpl.n	8001c66 <WriteReg2+0x1e>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001c6c:	7319      	strb	r1, [r3, #12]
LL_SPI_TransmitData8(SPI2,data);
while(!(SPI2->SR & SPI_SR_RXNE)); //data received?
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <WriteReg2+0x40>)
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	07d2      	lsls	r2, r2, #31
 8001c74:	d5fc      	bpl.n	8001c70 <WriteReg2+0x28>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001c76:	68d8      	ldr	r0, [r3, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001c78:	4b02      	ldr	r3, [pc, #8]	; (8001c84 <WriteReg2+0x3c>)
 8001c7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c7e:	619a      	str	r2, [r3, #24]
temp_val=LL_SPI_ReceiveData8(SPI2);

LL_GPIO_SetOutputPin(SPI2_CS_GPIO_PORT, SPI2_CS_PIN); // PA4 CS SET Active Low
return temp_val;
}
 8001c80:	b2c0      	uxtb	r0, r0
 8001c82:	bd10      	pop	{r4, pc}
 8001c84:	48000400 	.word	0x48000400
 8001c88:	40003800 	.word	0x40003800

08001c8c <ReadRegs1>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001c8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);  // PC4 CS SET Active Low

}

void ReadRegs1( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
 8001c90:	b530      	push	{r4, r5, lr}
 8001c92:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001c96:	629c      	str	r4, [r3, #40]	; 0x28
	unsigned int  i = 0;
	LL_GPIO_ResetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN); // PA4 CS RESET Active Low

	while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <ReadRegs1+0x50>)
 8001c9a:	461c      	mov	r4, r3
 8001c9c:	689d      	ldr	r5, [r3, #8]
 8001c9e:	07ad      	lsls	r5, r5, #30
 8001ca0:	d5fc      	bpl.n	8001c9c <ReadRegs1+0x10>
	LL_SPI_TransmitData8(SPI1,(ReadAddr | 0x80));  // (Starting Address 0x22 | 0x80); MSB is '1' for 0x80, next 7 bit Address of register to write 0x22
 8001ca2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001ca6:	7318      	strb	r0, [r3, #12]
	while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8001ca8:	68a3      	ldr	r3, [r4, #8]
 8001caa:	07db      	lsls	r3, r3, #31
 8001cac:	d5fc      	bpl.n	8001ca8 <ReadRegs1+0x1c>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001cae:	68e3      	ldr	r3, [r4, #12]
	LL_SPI_ReceiveData8(SPI1);

	for (i = 0; i < Bytes; i++)
	{
			  while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <ReadRegs1+0x50>)
 8001cb2:	440a      	add	r2, r1
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001cb4:	2000      	movs	r0, #0
	for (i = 0; i < Bytes; i++)
 8001cb6:	4291      	cmp	r1, r2
 8001cb8:	d105      	bne.n	8001cc6 <ReadRegs1+0x3a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001cba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cc2:	619a      	str	r2, [r3, #24]
 8001cc4:	bd30      	pop	{r4, r5, pc}
			  while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001cc6:	689c      	ldr	r4, [r3, #8]
 8001cc8:	07a5      	lsls	r5, r4, #30
 8001cca:	d5fc      	bpl.n	8001cc6 <ReadRegs1+0x3a>
 8001ccc:	7318      	strb	r0, [r3, #12]
			  LL_SPI_TransmitData8(SPI1,0x00);

				while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8001cce:	689c      	ldr	r4, [r3, #8]
 8001cd0:	07e4      	lsls	r4, r4, #31
 8001cd2:	d5fc      	bpl.n	8001cce <ReadRegs1+0x42>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001cd4:	68dc      	ldr	r4, [r3, #12]
 8001cd6:	f801 4b01 	strb.w	r4, [r1], #1
 8001cda:	e7ec      	b.n	8001cb6 <ReadRegs1+0x2a>
 8001cdc:	40013000 	.word	0x40013000

08001ce0 <ReadRegs3>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <ReadRegs3+0x5c>)


}

void ReadRegs3( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
 8001ce2:	b570      	push	{r4, r5, r6, lr}
 8001ce4:	4615      	mov	r5, r2
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28
 8001cea:	4606      	mov	r6, r0
	unsigned int  i = 0;
	LL_GPIO_ResetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN); // PA4 CS RESET Active Low
	delay_us(10);
 8001cec:	200a      	movs	r0, #10
{
 8001cee:	460c      	mov	r4, r1
	delay_us(10);
 8001cf0:	f001 f9e6 	bl	80030c0 <delay_us>
	while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <ReadRegs3+0x60>)
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	6899      	ldr	r1, [r3, #8]
 8001cfa:	0789      	lsls	r1, r1, #30
 8001cfc:	d5fc      	bpl.n	8001cf8 <ReadRegs3+0x18>
	LL_SPI_TransmitData8(SPI3,(ReadAddr | 0x80));  // (Starting Address 0x22 | 0x80); MSB is '1' for 0x80, next 7 bit Address of register to write 0x22
 8001cfe:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001d02:	731e      	strb	r6, [r3, #12]
	while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8001d04:	6893      	ldr	r3, [r2, #8]
 8001d06:	07de      	lsls	r6, r3, #31
 8001d08:	d5fc      	bpl.n	8001d04 <ReadRegs3+0x24>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001d0a:	68d3      	ldr	r3, [r2, #12]
	LL_SPI_ReceiveData8(SPI3);

	for (i = 0; i < Bytes; i++)
	{
			  while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <ReadRegs3+0x60>)
 8001d0e:	4621      	mov	r1, r4
 8001d10:	4425      	add	r5, r4
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001d12:	2200      	movs	r2, #0
	for (i = 0; i < Bytes; i++)
 8001d14:	42a9      	cmp	r1, r5
 8001d16:	d106      	bne.n	8001d26 <ReadRegs3+0x46>

				while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
				ReadBuf[i]= LL_SPI_ReceiveData8(SPI3);

		}
	delay_us(5);
 8001d18:	2005      	movs	r0, #5
 8001d1a:	f001 f9d1 	bl	80030c0 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <ReadRegs3+0x5c>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	619a      	str	r2, [r3, #24]
 8001d24:	bd70      	pop	{r4, r5, r6, pc}
			  while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001d26:	6898      	ldr	r0, [r3, #8]
 8001d28:	0784      	lsls	r4, r0, #30
 8001d2a:	d5fc      	bpl.n	8001d26 <ReadRegs3+0x46>
 8001d2c:	731a      	strb	r2, [r3, #12]
				while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8001d2e:	6898      	ldr	r0, [r3, #8]
 8001d30:	07c0      	lsls	r0, r0, #31
 8001d32:	d5fc      	bpl.n	8001d2e <ReadRegs3+0x4e>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001d34:	68d8      	ldr	r0, [r3, #12]
 8001d36:	f801 0b01 	strb.w	r0, [r1], #1
 8001d3a:	e7eb      	b.n	8001d14 <ReadRegs3+0x34>
 8001d3c:	48001c00 	.word	0x48001c00
 8001d40:	40003c00 	.word	0x40003c00

08001d44 <ReadRegs2>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <ReadRegs2+0x4c>)

}


void ReadRegs2( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
 8001d46:	b530      	push	{r4, r5, lr}
 8001d48:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001d4c:	629c      	str	r4, [r3, #40]	; 0x28
	unsigned int  i = 0;
	LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_PORT, SPI2_CS_PIN); // PA4 CS RESET Active Low

	while(!(SPI2->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <ReadRegs2+0x50>)
 8001d50:	461c      	mov	r4, r3
 8001d52:	689d      	ldr	r5, [r3, #8]
 8001d54:	07ad      	lsls	r5, r5, #30
 8001d56:	d5fc      	bpl.n	8001d52 <ReadRegs2+0xe>
	LL_SPI_TransmitData8(SPI2,(ReadAddr | 0x80));  // (Starting Address 0x22 | 0x80); MSB is '1' for 0x80, next 7 bit Address of register to write 0x22
 8001d58:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001d5c:	7318      	strb	r0, [r3, #12]
	while(!(SPI2->SR & SPI_SR_RXNE)); //data received?
 8001d5e:	68a3      	ldr	r3, [r4, #8]
 8001d60:	07db      	lsls	r3, r3, #31
 8001d62:	d5fc      	bpl.n	8001d5e <ReadRegs2+0x1a>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001d64:	68e3      	ldr	r3, [r4, #12]
	LL_SPI_ReceiveData8(SPI2);

	for (i = 0; i < Bytes; i++)
	{
			  while(!(SPI2->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <ReadRegs2+0x50>)
 8001d68:	440a      	add	r2, r1
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001d6a:	2000      	movs	r0, #0
	for (i = 0; i < Bytes; i++)
 8001d6c:	4291      	cmp	r1, r2
 8001d6e:	d104      	bne.n	8001d7a <ReadRegs2+0x36>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <ReadRegs2+0x4c>)
 8001d72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d76:	619a      	str	r2, [r3, #24]
 8001d78:	bd30      	pop	{r4, r5, pc}
			  while(!(SPI2->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001d7a:	689c      	ldr	r4, [r3, #8]
 8001d7c:	07a5      	lsls	r5, r4, #30
 8001d7e:	d5fc      	bpl.n	8001d7a <ReadRegs2+0x36>
 8001d80:	7318      	strb	r0, [r3, #12]
			  LL_SPI_TransmitData8(SPI2,0x00);

				while(!(SPI2->SR & SPI_SR_RXNE)); //data received?
 8001d82:	689c      	ldr	r4, [r3, #8]
 8001d84:	07e4      	lsls	r4, r4, #31
 8001d86:	d5fc      	bpl.n	8001d82 <ReadRegs2+0x3e>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001d88:	68dc      	ldr	r4, [r3, #12]
 8001d8a:	f801 4b01 	strb.w	r4, [r1], #1
 8001d8e:	e7ed      	b.n	8001d6c <ReadRegs2+0x28>
 8001d90:	48000400 	.word	0x48000400
 8001d94:	40003800 	.word	0x40003800

08001d98 <F_Sensor_ADC_Store>:
}


//Toe: ADC1_Ch3_PC2=ADC1  Heel: ADC2_Ch4_PC3=ADC2
void F_Sensor_ADC_Store(void)
{
 8001d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	  LL_ADC_REG_StartConversion(ADC2);
 8001d9a:	4825      	ldr	r0, [pc, #148]	; (8001e30 <F_Sensor_ADC_Store+0x98>)
	  ADC_TimeOut_Count_Buf=0;
 8001d9c:	4d25      	ldr	r5, [pc, #148]	; (8001e34 <F_Sensor_ADC_Store+0x9c>)
	  ADC_Error_Buf=0;
 8001d9e:	4c26      	ldr	r4, [pc, #152]	; (8001e38 <F_Sensor_ADC_Store+0xa0>)
	  LL_ADC_REG_StartConversion(ADC2);
 8001da0:	f7ff f836 	bl	8000e10 <LL_ADC_REG_StartConversion>
	  ADC_TimeOut_Count_Buf=0;
 8001da4:	2300      	movs	r3, #0
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001da6:	4822      	ldr	r0, [pc, #136]	; (8001e30 <F_Sensor_ADC_Store+0x98>)
 8001da8:	602b      	str	r3, [r5, #0]
	  ADC_Error_Buf=0;
 8001daa:	7023      	strb	r3, [r4, #0]
 8001dac:	6803      	ldr	r3, [r0, #0]
	  while ((LL_ADC_IsActiveFlag_EOC(ADC2) == 0))
 8001dae:	075a      	lsls	r2, r3, #29
 8001db0:	d537      	bpl.n	8001e22 <F_Sensor_ADC_Store+0x8a>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001db2:	2304      	movs	r3, #4
	  {
		  Wait_for_ADC_timeout_While_Datalog();
	  }
	  LL_ADC_ClearFlag_EOC(ADC2);
	  BSbuffer[s_flag].Flex2[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC2), LL_ADC_RESOLUTION_12B);  // Toe
 8001db4:	4f21      	ldr	r7, [pc, #132]	; (8001e3c <F_Sensor_ADC_Store+0xa4>)
 8001db6:	4e22      	ldr	r6, [pc, #136]	; (8001e40 <F_Sensor_ADC_Store+0xa8>)
 8001db8:	6003      	str	r3, [r0, #0]
 8001dba:	f897 e000 	ldrb.w	lr, [r7]
 8001dbe:	6833      	ldr	r3, [r6, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001dc0:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8001dc2:	4920      	ldr	r1, [pc, #128]	; (8001e44 <F_Sensor_ADC_Store+0xac>)
 8001dc4:	eb03 334e 	add.w	r3, r3, lr, lsl #13
 8001dc8:	f503 53e7 	add.w	r3, r3, #7392	; 0x1ce0
 8001dcc:	3304      	adds	r3, #4
 8001dce:	b280      	uxth	r0, r0
 8001dd0:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8001dd4:	4342      	muls	r2, r0
 8001dd6:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001dda:	fbb2 f2f0 	udiv	r2, r2, r0
	  LL_ADC_REG_StartConversion(ADC1);
 8001dde:	481a      	ldr	r0, [pc, #104]	; (8001e48 <F_Sensor_ADC_Store+0xb0>)
	  BSbuffer[s_flag].Flex2[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC2), LL_ADC_RESOLUTION_12B);  // Toe
 8001de0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  LL_ADC_REG_StartConversion(ADC1);
 8001de4:	f7ff f814 	bl	8000e10 <LL_ADC_REG_StartConversion>
	  ADC_TimeOut_Count_Buf=0;
 8001de8:	2300      	movs	r3, #0
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001dea:	4817      	ldr	r0, [pc, #92]	; (8001e48 <F_Sensor_ADC_Store+0xb0>)
 8001dec:	602b      	str	r3, [r5, #0]
	  ADC_Error_Buf=0;
 8001dee:	7023      	strb	r3, [r4, #0]
 8001df0:	460c      	mov	r4, r1
 8001df2:	6803      	ldr	r3, [r0, #0]
	  while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0))
 8001df4:	075b      	lsls	r3, r3, #29
 8001df6:	d517      	bpl.n	8001e28 <F_Sensor_ADC_Store+0x90>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001df8:	2304      	movs	r3, #4
 8001dfa:	6003      	str	r3, [r0, #0]
	  {
		  Wait_for_ADC_timeout_While_Datalog();
	  }
	  LL_ADC_ClearFlag_EOC(ADC1);
	  BSbuffer[s_flag].Flex1[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC1), LL_ADC_RESOLUTION_12B);  //Heel
 8001dfc:	7839      	ldrb	r1, [r7, #0]
 8001dfe:	6833      	ldr	r3, [r6, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001e00:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8001e02:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 8001e06:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 8001e0a:	331c      	adds	r3, #28
 8001e0c:	b280      	uxth	r0, r0
 8001e0e:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8001e12:	4342      	muls	r2, r0
 8001e14:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001e18:	fbb2 f2f1 	udiv	r2, r2, r1
 8001e1c:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
 8001e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  Wait_for_ADC_timeout_While_Datalog();
 8001e22:	f7ff fd3d 	bl	80018a0 <Wait_for_ADC_timeout_While_Datalog>
 8001e26:	e7c1      	b.n	8001dac <F_Sensor_ADC_Store+0x14>
		  Wait_for_ADC_timeout_While_Datalog();
 8001e28:	f7ff fd3a 	bl	80018a0 <Wait_for_ADC_timeout_While_Datalog>
 8001e2c:	e7e1      	b.n	8001df2 <F_Sensor_ADC_Store+0x5a>
 8001e2e:	bf00      	nop
 8001e30:	50040100 	.word	0x50040100
 8001e34:	20008968 	.word	0x20008968
 8001e38:	20008f27 	.word	0x20008f27
 8001e3c:	20000581 	.word	0x20000581
 8001e40:	2000057c 	.word	0x2000057c
 8001e44:	200005c4 	.word	0x200005c4
 8001e48:	50040000 	.word	0x50040000

08001e4c <ACC_GPIO_INIT>:
}



void ACC_GPIO_INIT(void)
{
 8001e4c:	b510      	push	{r4, lr}
	// Configure SCK Pin connected to PA5, MISO PA6, MOSI PA7
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_5, LL_GPIO_MODE_ALTERNATE);
 8001e4e:	2202      	movs	r2, #2
 8001e50:	2120      	movs	r1, #32
 8001e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001e56:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
 8001e5a:	f7fe ffff 	bl	8000e5c <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_5, LL_GPIO_AF_5);
 8001e5e:	2205      	movs	r2, #5
 8001e60:	2120      	movs	r1, #32
 8001e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e66:	f7ff f854 	bl	8000f12 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_5, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8001e6a:	2120      	movs	r1, #32
 8001e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e70:	f7ff f87b 	bl	8000f6a <LL_GPIO_SetPinSpeed.constprop.6>
 8001e74:	6863      	ldr	r3, [r4, #4]
 8001e76:	f023 0320 	bic.w	r3, r3, #32
 8001e7a:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_5, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_5, LL_GPIO_PULL_NO);
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2120      	movs	r1, #32
 8001e82:	f7ff f85c 	bl	8000f3e <LL_GPIO_SetPinPull>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 8001e86:	4620      	mov	r0, r4
 8001e88:	2202      	movs	r2, #2
 8001e8a:	2140      	movs	r1, #64	; 0x40
 8001e8c:	f7fe ffe6 	bl	8000e5c <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_6, LL_GPIO_AF_5);
 8001e90:	2205      	movs	r2, #5
 8001e92:	4620      	mov	r0, r4
 8001e94:	2140      	movs	r1, #64	; 0x40
 8001e96:	f7ff f83c 	bl	8000f12 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	2140      	movs	r1, #64	; 0x40
 8001e9e:	f7ff f864 	bl	8000f6a <LL_GPIO_SetPinSpeed.constprop.6>
 8001ea2:	6863      	ldr	r3, [r4, #4]
 8001ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ea8:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_6, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_6 , LL_GPIO_PULL_NO);
 8001eaa:	4620      	mov	r0, r4
 8001eac:	2200      	movs	r2, #0
 8001eae:	2140      	movs	r1, #64	; 0x40
 8001eb0:	f7ff f845 	bl	8000f3e <LL_GPIO_SetPinPull>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_ALTERNATE);
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	2180      	movs	r1, #128	; 0x80
 8001eba:	f7fe ffcf 	bl	8000e5c <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_7, LL_GPIO_AF_5);
 8001ebe:	2205      	movs	r2, #5
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	2180      	movs	r1, #128	; 0x80
 8001ec4:	f7ff f825 	bl	8000f12 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_7, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8001ec8:	4620      	mov	r0, r4
 8001eca:	2180      	movs	r1, #128	; 0x80
 8001ecc:	f7ff f84d 	bl	8000f6a <LL_GPIO_SetPinSpeed.constprop.6>
 8001ed0:	6863      	ldr	r3, [r4, #4]
 8001ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ed6:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_7, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_7, LL_GPIO_PULL_NO);
 8001ed8:	4620      	mov	r0, r4
 8001eda:	2200      	movs	r2, #0
 8001edc:	2180      	movs	r1, #128	; 0x80
}
 8001ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_7, LL_GPIO_PULL_NO);
 8001ee2:	f7ff b82c 	b.w	8000f3e <LL_GPIO_SetPinPull>
	...

08001ee8 <P_IMU1_SPI1_Init>:
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_15, LL_GPIO_PULL_NO);
}


void P_IMU1_SPI1_Init(void)  //MPU9250
{
 8001ee8:	b508      	push	{r3, lr}

LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001eea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001eee:	f7fe ffa7 	bl	8000e40 <LL_APB2_GRP1_EnableClock>

ACC_GPIO_INIT();
 8001ef2:	f7ff ffab 	bl	8001e4c <ACC_GPIO_INIT>
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <P_IMU1_SPI1_Init+0x7c>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8001efe:	f042 0208 	orr.w	r2, r2, #8
 8001f02:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8001f0a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	f042 0202 	orr.w	r2, r2, #2
 8001f1a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f22:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001f2a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001f2e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f36:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	f022 0204 	bic.w	r2, r2, #4
 8001f3e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f46:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	f442 7282 	orr.w	r2, r2, #260	; 0x104
 8001f4e:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f56:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	f042 0208 	orr.w	r2, r2, #8
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	bd08      	pop	{r3, pc}
 8001f62:	bf00      	nop
 8001f64:	40013000 	.word	0x40013000

08001f68 <P_IMU3_SPI2_Init>:



/* SPI2 init function */
void P_IMU3_SPI2_Init(void)
{
 8001f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LL_SPI_InitTypeDef SPI_InitStruct;

  LL_GPIO_InitTypeDef GPIO_InitStruct;

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001f6c:	2004      	movs	r0, #4
{
 8001f6e:	b092      	sub	sp, #72	; 0x48
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001f70:	f7fe ff58 	bl	8000e24 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001f74:	2002      	movs	r0, #2
 8001f76:	f7fe ff55 	bl	8000e24 <LL_AHB2_GRP1_EnableClock>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f7a:	4b33      	ldr	r3, [pc, #204]	; (8002048 <P_IMU3_SPI2_Init+0xe0>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
  LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001f7c:	4e33      	ldr	r6, [pc, #204]	; (800204c <P_IMU3_SPI2_Init+0xe4>)
 8001f7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f84:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f8e:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f90:	2502      	movs	r5, #2
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001f96:	2705      	movs	r7, #5
  (void)tmpreg;
 8001f98:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f9a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = SPI2_SCK_IMU_PIN;
 8001f9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001fa0:	a902      	add	r1, sp, #8
 8001fa2:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = SPI2_SCK_IMU_PIN;
 8001fa4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fa6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fa8:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001faa:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001fae:	9707      	str	r7, [sp, #28]
  LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001fb0:	f004 fe26 	bl	8006c00 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI2_MISO_IMU_PIN;
 8001fb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
  LL_GPIO_Init(SPI2_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001fb8:	a902      	add	r1, sp, #8
 8001fba:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = SPI2_MISO_IMU_PIN;
 8001fbc:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fbe:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fc0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fc2:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc4:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001fc8:	9707      	str	r7, [sp, #28]
  LL_GPIO_Init(SPI2_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001fca:	f004 fe19 	bl	8006c00 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI2_MOSI_IMU_PIN;
 8001fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
  LL_GPIO_Init(SPI2_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001fd2:	a902      	add	r1, sp, #8
 8001fd4:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = SPI2_MOSI_IMU_PIN;
 8001fd6:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fd8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fda:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fdc:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001fe2:	9707      	str	r7, [sp, #28]
  LL_GPIO_Init(SPI2_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001fe4:	f004 fe0c 	bl	8006c00 <LL_GPIO_Init>


  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001fe8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001fec:	9309      	str	r3, [sp, #36]	; 0x24
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001fee:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ff2:	930a      	str	r3, [sp, #40]	; 0x28
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001ff4:	2301      	movs	r3, #1
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001ff6:	9408      	str	r4, [sp, #32]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001ff8:	930c      	str	r3, [sp, #48]	; 0x30
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;

  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001ffa:	940f      	str	r4, [sp, #60]	; 0x3c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001ffc:	9410      	str	r4, [sp, #64]	; 0x40
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
  SPI_InitStruct.CRCPoly = 7;
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8002002:	4c13      	ldr	r4, [pc, #76]	; (8002050 <P_IMU3_SPI2_Init+0xe8>)
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002004:	930d      	str	r3, [sp, #52]	; 0x34
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002006:	2308      	movs	r3, #8
 8002008:	930e      	str	r3, [sp, #56]	; 0x38
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800200a:	a908      	add	r1, sp, #32
  SPI_InitStruct.CRCPoly = 7;
 800200c:	2307      	movs	r3, #7
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800200e:	4620      	mov	r0, r4
  SPI_InitStruct.CRCPoly = 7;
 8002010:	9311      	str	r3, [sp, #68]	; 0x44
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002012:	950b      	str	r5, [sp, #44]	; 0x2c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8002014:	f005 f8c2 	bl	800719c <LL_SPI_Init>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8002018:	6863      	ldr	r3, [r4, #4]
 800201a:	f023 0308 	bic.w	r3, r3, #8
 800201e:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8002020:	6863      	ldr	r3, [r4, #4]
 8002022:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002026:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8002028:	6863      	ldr	r3, [r4, #4]
 800202a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800202e:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002030:	6823      	ldr	r3, [r4, #0]
 8002032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002036:	6023      	str	r3, [r4, #0]

  LL_SPI_SetRxFIFOThreshold(SPI2,LL_SPI_RX_FIFO_TH_QUARTER);
  LL_SPI_DisableIT_RXNE(SPI2);
  LL_SPI_Enable(SPI2);

  delay_us(10000);
 8002038:	f242 7010 	movw	r0, #10000	; 0x2710
 800203c:	f001 f840 	bl	80030c0 <delay_us>

}
 8002040:	b012      	add	sp, #72	; 0x48
 8002042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	48000400 	.word	0x48000400
 8002050:	40003800 	.word	0x40003800

08002054 <Configure_USART_1>:


void Configure_USART_1(void)   // USART1: PB6-Tx, (PA10-Rx disabled)
{
 8002054:	b510      	push	{r4, lr}

// Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up
LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 8002056:	4c18      	ldr	r4, [pc, #96]	; (80020b8 <Configure_USART_1+0x64>)
 8002058:	2202      	movs	r2, #2
 800205a:	2140      	movs	r1, #64	; 0x40
 800205c:	4620      	mov	r0, r4
 800205e:	f7fe fefd 	bl	8000e5c <LL_GPIO_SetPinMode>
LL_GPIO_SetAFPin_0_7(GPIOB, LL_GPIO_PIN_6, LL_GPIO_AF_7);
 8002062:	2207      	movs	r2, #7
 8002064:	2140      	movs	r1, #64	; 0x40
 8002066:	4620      	mov	r0, r4
 8002068:	f7fe ff53 	bl	8000f12 <LL_GPIO_SetAFPin_0_7>
LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 800206c:	2140      	movs	r1, #64	; 0x40
 800206e:	4620      	mov	r0, r4
 8002070:	f7fe ff7b 	bl	8000f6a <LL_GPIO_SetPinSpeed.constprop.6>
 8002074:	6863      	ldr	r3, [r4, #4]
 8002076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800207a:	6063      	str	r3, [r4, #4]
LL_GPIO_SetPinOutputType(GPIOB, LL_GPIO_PIN_6, LL_GPIO_OUTPUT_PUSHPULL);
LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_UP);
 800207c:	2201      	movs	r2, #1
 800207e:	2140      	movs	r1, #64	; 0x40
 8002080:	4620      	mov	r0, r4
 8002082:	f7fe ff5c 	bl	8000f3e <LL_GPIO_SetPinPull>

RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1 clock enable, Clock source Default peripheral clock PCLK2, APB2
 8002086:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <Configure_USART_1+0x68>)
 8002088:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800208a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800208e:	6613      	str	r3, [r2, #96]	; 0x60

// Default parameter: 8 data bit, 1 start bit, 1 stop bit, no parity, no hardware flow control

MODIFY_REG(USART1->CR1, USART_CR1_RE | USART_CR1_TE, (USART_CR1_TE |USART_CR1_RE));  // TX/RX direction BidirecttionalLL_USART_DIRECTION_TX_RX
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <Configure_USART_1+0x6c>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	f042 020c 	orr.w	r2, r2, #12
 8002098:	601a      	str	r2, [r3, #0]

USART1->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(SystemCoreClock, 115200));  // Baud rate 115200
 800209a:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <Configure_USART_1+0x70>)
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80020a2:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 80020a6:	fbb2 f2f1 	udiv	r2, r2, r1
 80020aa:	60da      	str	r2, [r3, #12]

USART1->CR1|= USART_CR1_UE;  // Unable USART1
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	bd10      	pop	{r4, pc}
 80020b6:	bf00      	nop
 80020b8:	48000400 	.word	0x48000400
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40013800 	.word	0x40013800
 80020c4:	20000004 	.word	0x20000004

080020c8 <USART1_wr_print>:

void USART1_wr_print(uint8_t *buffer, uint32_t nBytes)
{
for (int i=0;i<nBytes;i++)
{
while(!(USART1->ISR & USART_ISR_TXE));
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <USART1_wr_print+0x28>)
 80020ca:	4401      	add	r1, r0
for (int i=0;i<nBytes;i++)
 80020cc:	4288      	cmp	r0, r1
 80020ce:	d100      	bne.n	80020d2 <USART1_wr_print+0xa>
USART1->TDR= buffer[i]& 0xFF;

while(!(USART1->ISR & USART_ISR_TC));
USART1->ISR &= ~USART_ISR_TC;
}
}
 80020d0:	4770      	bx	lr
while(!(USART1->ISR & USART_ISR_TXE));
 80020d2:	69da      	ldr	r2, [r3, #28]
 80020d4:	0612      	lsls	r2, r2, #24
 80020d6:	d5fc      	bpl.n	80020d2 <USART1_wr_print+0xa>
USART1->TDR= buffer[i]& 0xFF;
 80020d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020dc:	851a      	strh	r2, [r3, #40]	; 0x28
while(!(USART1->ISR & USART_ISR_TC));
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	0652      	lsls	r2, r2, #25
 80020e2:	d5fc      	bpl.n	80020de <USART1_wr_print+0x16>
USART1->ISR &= ~USART_ISR_TC;
 80020e4:	69da      	ldr	r2, [r3, #28]
 80020e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ea:	61da      	str	r2, [r3, #28]
 80020ec:	e7ee      	b.n	80020cc <USART1_wr_print+0x4>
 80020ee:	bf00      	nop
 80020f0:	40013800 	.word	0x40013800

080020f4 <Clear_ErrorTimestamp_Buffer>:

int FPGA_Loop_Error_cnt;

void Clear_ErrorTimestamp_Buffer(void)
{
	ErrorCodeBuf=0;
 80020f4:	4a02      	ldr	r2, [pc, #8]	; (8002100 <Clear_ErrorTimestamp_Buffer+0xc>)
 80020f6:	2300      	movs	r3, #0
 80020f8:	7013      	strb	r3, [r2, #0]
	ErrorTimeStampBuf=0;
 80020fa:	4a02      	ldr	r2, [pc, #8]	; (8002104 <Clear_ErrorTimestamp_Buffer+0x10>)
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	4770      	bx	lr
 8002100:	20008698 	.word	0x20008698
 8002104:	2000869c 	.word	0x2000869c

08002108 <Reset_All>:
{
 8002108:	b508      	push	{r3, lr}
	last_file=0;
 800210a:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <Reset_All+0x38>)
 800210c:	2100      	movs	r1, #0
 800210e:	6019      	str	r1, [r3, #0]
	Sub_cnt=0;                // Array Index count in a single buffer to store values
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <Reset_All+0x3c>)
 8002112:	6019      	str	r1, [r3, #0]
	w_flag=1;                 // Buffer write flag to be written in FATFS file (1=Buffer1, 0=Buffer0)
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <Reset_All+0x40>)
 8002116:	2201      	movs	r2, #1
 8002118:	701a      	strb	r2, [r3, #0]
	s_flag=0;                 // Buffer Store flag to be stored/filled by sensor values in interrupt (1=Buffer1, 0=Buffer0)
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <Reset_All+0x44>)
 800211c:	7019      	strb	r1, [r3, #0]
	SD_write_Flag = 0;        // Flag to indicates whether a buffer a full and ready to write in SD card
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <Reset_All+0x48>)
 8002120:	7019      	strb	r1, [r3, #0]
	SD_Write_Count = 0;       // Number of SD write. If reach a predefined value, f_sync() operation will update FATFS files.
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <Reset_All+0x4c>)
 8002124:	7019      	strb	r1, [r3, #0]
	Clear_ErrorTimestamp_Buffer();
 8002126:	f7ff ffe5 	bl	80020f4 <Clear_ErrorTimestamp_Buffer>
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <Reset_All+0x50>)
	Error_reg_log.Error[indxE]=0;
 800212c:	460a      	mov	r2, r1
 800212e:	f1a3 0008 	sub.w	r0, r3, #8
 8002132:	540a      	strb	r2, [r1, r0]
	for(int indxE=0;indxE<10;indxE++)
 8002134:	3101      	adds	r1, #1
 8002136:	290a      	cmp	r1, #10
	Error_reg_log.ErrorTime[indxE]=0;
 8002138:	f843 2f04 	str.w	r2, [r3, #4]!
	for(int indxE=0;indxE<10;indxE++)
 800213c:	d1f9      	bne.n	8002132 <Reset_All+0x2a>
}
 800213e:	bd08      	pop	{r3, pc}
 8002140:	20008c9c 	.word	0x20008c9c
 8002144:	2000057c 	.word	0x2000057c
 8002148:	20000000 	.word	0x20000000
 800214c:	20000581 	.word	0x20000581
 8002150:	2000868c 	.word	0x2000868c
 8002154:	20000578 	.word	0x20000578
 8002158:	200085cc 	.word	0x200085cc

0800215c <Save_ErrorTimestamp_Buffer>:
}

void Save_ErrorTimestamp_Buffer(uint8_t ErrorCode)
{
 800215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ErrorCodeBuf=ErrorCode;
 800215e:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <Save_ErrorTimestamp_Buffer+0x88>)
{
 8002160:	4606      	mov	r6, r0
	ErrorCodeBuf=ErrorCode;
 8002162:	7018      	strb	r0, [r3, #0]
	ErrorTimeStampBuf=__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))*10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8002164:	f7fe ff96 	bl	8001094 <LL_RTC_TIME_GetHour.constprop.13>
 8002168:	4604      	mov	r4, r0
 800216a:	f7fe ff93 	bl	8001094 <LL_RTC_TIME_GetHour.constprop.13>
 800216e:	4605      	mov	r5, r0
 8002170:	f7fe ff76 	bl	8001060 <LL_RTC_TIME_GetMinute.constprop.12>
 8002174:	f3c4 1403 	ubfx	r4, r4, #4, #4
 8002178:	4607      	mov	r7, r0
 800217a:	f7fe ff71 	bl	8001060 <LL_RTC_TIME_GetMinute.constprop.12>
 800217e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002182:	f005 040f 	and.w	r4, r5, #15
 8002186:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800218a:	f3c7 1303 	ubfx	r3, r7, #4, #4
 800218e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002192:	f000 000f 	and.w	r0, r0, #15
 8002196:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800219a:	b2c0      	uxtb	r0, r0
 800219c:	2364      	movs	r3, #100	; 0x64
 800219e:	fb10 f003 	smulbb	r0, r0, r3
 80021a2:	b2e4      	uxtb	r4, r4
 80021a4:	f242 7310 	movw	r3, #10000	; 0x2710
 80021a8:	fb03 0404 	mla	r4, r3, r4, r0
 80021ac:	f7fe ff40 	bl	8001030 <LL_RTC_TIME_GetSecond.constprop.11>
 80021b0:	4605      	mov	r5, r0
 80021b2:	f7fe ff3d 	bl	8001030 <LL_RTC_TIME_GetSecond.constprop.11>
 80021b6:	f3c5 1303 	ubfx	r3, r5, #4, #4
 80021ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80021be:	f000 000f 	and.w	r0, r0, #15
 80021c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1

	Error_reg_log.Error[Error_indx]=ErrorCode;
 80021c6:	4908      	ldr	r1, [pc, #32]	; (80021e8 <Save_ErrorTimestamp_Buffer+0x8c>)
	ErrorTimeStampBuf=__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))*10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <Save_ErrorTimestamp_Buffer+0x90>)
	Error_reg_log.Error[Error_indx]=ErrorCode;
 80021ca:	4a09      	ldr	r2, [pc, #36]	; (80021f0 <Save_ErrorTimestamp_Buffer+0x94>)
	ErrorTimeStampBuf=__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))*10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80021cc:	fa54 f480 	uxtab	r4, r4, r0
 80021d0:	601c      	str	r4, [r3, #0]
	Error_reg_log.Error[Error_indx]=ErrorCode;
 80021d2:	780b      	ldrb	r3, [r1, #0]
 80021d4:	54d6      	strb	r6, [r2, r3]
	Error_reg_log.ErrorTime[Error_indx]=ErrorTimeStampBuf;
 80021d6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Error_indx++;
 80021da:	3301      	adds	r3, #1
 80021dc:	700b      	strb	r3, [r1, #0]
	Error_reg_log.ErrorTime[Error_indx]=ErrorTimeStampBuf;
 80021de:	60d4      	str	r4, [r2, #12]
	Error_indx++;
 80021e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20008698 	.word	0x20008698
 80021e8:	2000899e 	.word	0x2000899e
 80021ec:	2000869c 	.word	0x2000869c
 80021f0:	200085c4 	.word	0x200085c4

080021f4 <AIM_Error_Handler>:
}

void AIM_Error_Handler(int AIM_Error_Code)
{
    switch(AIM_Error_Code) {
 80021f4:	3801      	subs	r0, #1
{
 80021f6:	b510      	push	{r4, lr}
    switch(AIM_Error_Code) {
 80021f8:	280f      	cmp	r0, #15
 80021fa:	d862      	bhi.n	80022c2 <AIM_Error_Handler+0xce>
 80021fc:	e8df f000 	tbb	[pc, r0]
 8002200:	392e611e 	.word	0x392e611e
 8002204:	4661610f 	.word	0x4661610f
 8002208:	54616161 	.word	0x54616161
 800220c:	08616161 	.word	0x08616161

	case FPGA_SPI_R_Error:
		Save_ErrorTimestamp_Buffer(FPGA_SPI_R_Error);
 8002210:	2010      	movs	r0, #16
 8002212:	f7ff ffa3 	bl	800215c <Save_ErrorTimestamp_Buffer>
		FATAL_Error = 1;
 8002216:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <AIM_Error_Handler+0xd0>)
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]

	break;
 800221c:	bd10      	pop	{r4, pc}

			case f_write_E:
				file_reopen();
 800221e:	f7ff f867 	bl	80012f0 <file_reopen>
				if (Fat_write_read_fail==1) // Could not solve write issue by reopening file
 8002222:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <AIM_Error_Handler+0xd4>)
 8002224:	681c      	ldr	r4, [r3, #0]
 8002226:	2c01      	cmp	r4, #1
 8002228:	d14b      	bne.n	80022c2 <AIM_Error_Handler+0xce>
								  {
									   Fat_read_mnt_fail=0;
 800222a:	4b28      	ldr	r3, [pc, #160]	; (80022cc <AIM_Error_Handler+0xd8>)
 800222c:	2200      	movs	r2, #0
										Save_ErrorTimestamp_Buffer(f_write_E);
 800222e:	2005      	movs	r0, #5
									   Fat_read_mnt_fail=0;
 8002230:	601a      	str	r2, [r3, #0]
										Save_ErrorTimestamp_Buffer(f_write_E);
 8002232:	f7ff ff93 	bl	800215c <Save_ErrorTimestamp_Buffer>
										File_Sensor_write_issue=1;
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <AIM_Error_Handler+0xdc>)
				file_reopen_sync();
				if (Fat_sync_read_fail==1) // Could not solve write issue by reopening file
								  {
										Fat_sync_read_fail=0;
										Save_ErrorTimestamp_Buffer(f_sync_E);
										File_Sensor_close_issue=1;
 8002238:	701c      	strb	r4, [r3, #0]
 800223a:	e018      	b.n	800226e <AIM_Error_Handler+0x7a>
				file_mnt_reopen();
 800223c:	f7ff f870 	bl	8001320 <file_mnt_reopen>
				  if (Fat_read_mnt_fail==1) // Could not solve read issue by FATFS mount
 8002240:	4b22      	ldr	r3, [pc, #136]	; (80022cc <AIM_Error_Handler+0xd8>)
 8002242:	681c      	ldr	r4, [r3, #0]
 8002244:	2c01      	cmp	r4, #1
 8002246:	d13c      	bne.n	80022c2 <AIM_Error_Handler+0xce>
					  Fat_read_mnt_fail=0;
 8002248:	2200      	movs	r2, #0
						Save_ErrorTimestamp_Buffer(f_open_E);
 800224a:	4620      	mov	r0, r4
					  Fat_read_mnt_fail=0;
 800224c:	601a      	str	r2, [r3, #0]
						Save_ErrorTimestamp_Buffer(f_open_E);
 800224e:	f7ff ff85 	bl	800215c <Save_ErrorTimestamp_Buffer>
						FATAL_Error = 1;
 8002252:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <AIM_Error_Handler+0xd0>)
 8002254:	701c      	strb	r4, [r3, #0]
						Skip_FATFS =1;
 8002256:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <AIM_Error_Handler+0xe0>)
										FATAL_Error = 1;
 8002258:	701c      	strb	r4, [r3, #0]
 800225a:	bd10      	pop	{r4, pc}
				Try_FATFS_Mount();
 800225c:	f7ff f802 	bl	8001264 <Try_FATFS_Mount>
				if (Skip_FATFS==1)  // Could not solve FATFS mount
 8002260:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <AIM_Error_Handler+0xe0>)
 8002262:	781c      	ldrb	r4, [r3, #0]
 8002264:	2c01      	cmp	r4, #1
 8002266:	d12c      	bne.n	80022c2 <AIM_Error_Handler+0xce>
				Save_ErrorTimestamp_Buffer(f_mount_E);
 8002268:	2003      	movs	r0, #3
 800226a:	f7ff ff77 	bl	800215c <Save_ErrorTimestamp_Buffer>
										FATAL_Error = 1;
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <AIM_Error_Handler+0xd0>)
 8002270:	e7f2      	b.n	8002258 <AIM_Error_Handler+0x64>
				file_reopen_sync();
 8002272:	f7ff f825 	bl	80012c0 <file_reopen_sync>
				if (Fat_sync_read_fail==1) // Could not solve write issue by reopening file
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <AIM_Error_Handler+0xe4>)
 8002278:	681c      	ldr	r4, [r3, #0]
 800227a:	2c01      	cmp	r4, #1
 800227c:	d121      	bne.n	80022c2 <AIM_Error_Handler+0xce>
										Fat_sync_read_fail=0;
 800227e:	2200      	movs	r2, #0
										Save_ErrorTimestamp_Buffer(f_sync_E);
 8002280:	2004      	movs	r0, #4
										Fat_sync_read_fail=0;
 8002282:	601a      	str	r2, [r3, #0]
										Save_ErrorTimestamp_Buffer(f_sync_E);
 8002284:	f7ff ff6a 	bl	800215c <Save_ErrorTimestamp_Buffer>
										File_Sensor_close_issue=1;
 8002288:	4b14      	ldr	r3, [pc, #80]	; (80022dc <AIM_Error_Handler+0xe8>)
 800228a:	e7d5      	b.n	8002238 <AIM_Error_Handler+0x44>

			break;

			case SPI_Acc_Error :

				if (SPI_ErrorCnt>3)
 800228c:	4a14      	ldr	r2, [pc, #80]	; (80022e0 <AIM_Error_Handler+0xec>)
 800228e:	7813      	ldrb	r3, [r2, #0]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d914      	bls.n	80022be <AIM_Error_Handler+0xca>
				{
				SPI_ErrorCnt=0;
 8002294:	2300      	movs	r3, #0
 8002296:	7013      	strb	r3, [r2, #0]
				FATAL_Error = 1;
 8002298:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <AIM_Error_Handler+0xd0>)
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
				Save_ErrorTimestamp_Buffer(SPI_Acc_Error);
 800229e:	2008      	movs	r0, #8
		    default :

		    break;

    }
}
 80022a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				Save_ErrorTimestamp_Buffer(ADC_R_Error);
 80022a4:	f7ff bf5a 	b.w	800215c <Save_ErrorTimestamp_Buffer>
				if (ADC_ErrorCnt>3)
 80022a8:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <AIM_Error_Handler+0xf0>)
 80022aa:	7813      	ldrb	r3, [r2, #0]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d906      	bls.n	80022be <AIM_Error_Handler+0xca>
				ADC_ErrorCnt=0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	7013      	strb	r3, [r2, #0]
				FATAL_Error = 1;
 80022b4:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <AIM_Error_Handler+0xd0>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
				Save_ErrorTimestamp_Buffer(ADC_R_Error);
 80022ba:	200c      	movs	r0, #12
 80022bc:	e7f0      	b.n	80022a0 <AIM_Error_Handler+0xac>
				ADC_ErrorCnt++;
 80022be:	3301      	adds	r3, #1
 80022c0:	7013      	strb	r3, [r2, #0]
 80022c2:	bd10      	pop	{r4, pc}
 80022c4:	20008c98 	.word	0x20008c98
 80022c8:	20008944 	.word	0x20008944
 80022cc:	200089ec 	.word	0x200089ec
 80022d0:	20008964 	.word	0x20008964
 80022d4:	20008c99 	.word	0x20008c99
 80022d8:	20008948 	.word	0x20008948
 80022dc:	20008a2e 	.word	0x20008a2e
 80022e0:	20008f2c 	.word	0x20008f2c
 80022e4:	20008ca0 	.word	0x20008ca0

080022e8 <FATFS_Init>:
{
 80022e8:	b510      	push	{r4, lr}
	  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 80022ea:	490b      	ldr	r1, [pc, #44]	; (8002318 <FATFS_Init+0x30>)
 80022ec:	480b      	ldr	r0, [pc, #44]	; (800231c <FATFS_Init+0x34>)
 80022ee:	4c0c      	ldr	r4, [pc, #48]	; (8002320 <FATFS_Init+0x38>)
 80022f0:	f007 ff74 	bl	800a1dc <FATFS_LinkDriver>
 80022f4:	b928      	cbnz	r0, 8002302 <FATFS_Init+0x1a>
			 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 80022f6:	2201      	movs	r2, #1
 80022f8:	4907      	ldr	r1, [pc, #28]	; (8002318 <FATFS_Init+0x30>)
 80022fa:	480a      	ldr	r0, [pc, #40]	; (8002324 <FATFS_Init+0x3c>)
 80022fc:	f007 fa9c 	bl	8009838 <f_mount>
 8002300:	b108      	cbz	r0, 8002306 <FATFS_Init+0x1e>
				 Fat_mnt_fail=1;
 8002302:	2301      	movs	r3, #1
 8002304:	6023      	str	r3, [r4, #0]
	  if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 8002306:	6823      	ldr	r3, [r4, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d104      	bne.n	8002316 <FATFS_Init+0x2e>
		  AIM_Error_Handler(f_mount_E);
 800230c:	2003      	movs	r0, #3
}
 800230e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		  AIM_Error_Handler(f_mount_E);
 8002312:	f7ff bf6f 	b.w	80021f4 <AIM_Error_Handler>
 8002316:	bd10      	pop	{r4, pc}
 8002318:	20008a35 	.word	0x20008a35
 800231c:	0800b7d0 	.word	0x0800b7d0
 8002320:	20008940 	.word	0x20008940
 8002324:	20008a44 	.word	0x20008a44

08002328 <Check_SD_Command_File>:
{
 8002328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  Data_log_Start_Resume = 0;
 800232a:	4c31      	ldr	r4, [pc, #196]	; (80023f0 <Check_SD_Command_File+0xc8>)
	 if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 800232c:	4931      	ldr	r1, [pc, #196]	; (80023f4 <Check_SD_Command_File+0xcc>)
 800232e:	4832      	ldr	r0, [pc, #200]	; (80023f8 <Check_SD_Command_File+0xd0>)
 8002330:	4e32      	ldr	r6, [pc, #200]	; (80023fc <Check_SD_Command_File+0xd4>)
	  Data_log_Start_Resume = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	7023      	strb	r3, [r4, #0]
	 if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8002336:	f007 ff51 	bl	800a1dc <FATFS_LinkDriver>
 800233a:	b930      	cbnz	r0, 800234a <Check_SD_Command_File+0x22>
	 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 800233c:	2201      	movs	r2, #1
 800233e:	492d      	ldr	r1, [pc, #180]	; (80023f4 <Check_SD_Command_File+0xcc>)
 8002340:	482f      	ldr	r0, [pc, #188]	; (8002400 <Check_SD_Command_File+0xd8>)
 8002342:	f007 fa79 	bl	8009838 <f_mount>
 8002346:	4605      	mov	r5, r0
 8002348:	b148      	cbz	r0, 800235e <Check_SD_Command_File+0x36>
		 Fat_mnt_fail=1;
 800234a:	2301      	movs	r3, #1
 800234c:	6033      	str	r3, [r6, #0]
	  if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 800234e:	6833      	ldr	r3, [r6, #0]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d14b      	bne.n	80023ec <Check_SD_Command_File+0xc4>
		  AIM_Error_Handler(f_mount_E);
 8002354:	2003      	movs	r0, #3
}
 8002356:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		  AIM_Error_Handler(f_mount_E);
 800235a:	f7ff bf4b 	b.w	80021f4 <AIM_Error_Handler>
		 if(f_open(&MyFile, "EnterDFU.txt", FA_READ) != FR_OK) // Check the presence of EnterDFU.txt file
 800235e:	2201      	movs	r2, #1
 8002360:	4928      	ldr	r1, [pc, #160]	; (8002404 <Check_SD_Command_File+0xdc>)
 8002362:	4829      	ldr	r0, [pc, #164]	; (8002408 <Check_SD_Command_File+0xe0>)
 8002364:	f007 fa9e 	bl	80098a4 <f_open>
 8002368:	4607      	mov	r7, r0
 800236a:	b360      	cbz	r0, 80023c6 <Check_SD_Command_File+0x9e>
			   if(f_open(&MyFile, "EnterVCP.txt", FA_READ) != FR_OK) // Check the presence of EnterVCP.txt file
 800236c:	2201      	movs	r2, #1
 800236e:	4927      	ldr	r1, [pc, #156]	; (800240c <Check_SD_Command_File+0xe4>)
 8002370:	4825      	ldr	r0, [pc, #148]	; (8002408 <Check_SD_Command_File+0xe0>)
 8002372:	f007 fa97 	bl	80098a4 <f_open>
 8002376:	b1f0      	cbz	r0, 80023b6 <Check_SD_Command_File+0x8e>
					 if (Logstart_Delete ==1)
 8002378:	4b25      	ldr	r3, [pc, #148]	; (8002410 <Check_SD_Command_File+0xe8>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	2a01      	cmp	r2, #1
 800237e:	d104      	bne.n	800238a <Check_SD_Command_File+0x62>
								  if (f_unlink ("LogStart.txt") == FR_OK) {    // If LogStart.txt file present, delete the file
 8002380:	4824      	ldr	r0, [pc, #144]	; (8002414 <Check_SD_Command_File+0xec>)
						 Logstart_Delete=0;
 8002382:	601d      	str	r5, [r3, #0]
					  if (f_unlink ("EnterVCP.txt") == FR_OK) {    // If EnterVCP.txt file present, delete the file
 8002384:	f007 fe8e 	bl	800a0a4 <f_unlink>
 8002388:	e006      	b.n	8002398 <Check_SD_Command_File+0x70>
				   if(f_open(&MyFile, "LogStart.txt", FA_READ) != FR_OK) // Check the presence of LogStart.txt file
 800238a:	2201      	movs	r2, #1
 800238c:	4921      	ldr	r1, [pc, #132]	; (8002414 <Check_SD_Command_File+0xec>)
 800238e:	481e      	ldr	r0, [pc, #120]	; (8002408 <Check_SD_Command_File+0xe0>)
 8002390:	f007 fa88 	bl	80098a4 <f_open>
 8002394:	b148      	cbz	r0, 80023aa <Check_SD_Command_File+0x82>
					   Data_log_Start_Resume = 0;          // Data Log Stops
 8002396:	7025      	strb	r5, [r4, #0]
			f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 8002398:	2200      	movs	r2, #0
 800239a:	491f      	ldr	r1, [pc, #124]	; (8002418 <Check_SD_Command_File+0xf0>)
 800239c:	4610      	mov	r0, r2
 800239e:	f007 fa4b 	bl	8009838 <f_mount>
			FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 80023a2:	4814      	ldr	r0, [pc, #80]	; (80023f4 <Check_SD_Command_File+0xcc>)
 80023a4:	f007 ff36 	bl	800a214 <FATFS_UnLinkDriver>
 80023a8:	e7d1      	b.n	800234e <Check_SD_Command_File+0x26>
					   Data_log_Start_Resume = 1;          // Data Log Starts/Resume
 80023aa:	2301      	movs	r3, #1
					   f_close(&MyFile);
 80023ac:	4816      	ldr	r0, [pc, #88]	; (8002408 <Check_SD_Command_File+0xe0>)
					   Data_log_Start_Resume = 1;          // Data Log Starts/Resume
 80023ae:	7023      	strb	r3, [r4, #0]
					   f_close(&MyFile);
 80023b0:	f007 fc9f 	bl	8009cf2 <f_close>
 80023b4:	e7f0      	b.n	8002398 <Check_SD_Command_File+0x70>
				     USB_Mode = 0;                       // USB VCP mode in Next USB Connectivity
 80023b6:	4b19      	ldr	r3, [pc, #100]	; (800241c <Check_SD_Command_File+0xf4>)
				     Data_log_Start_Resume = 0;          // Data Log Stops
 80023b8:	7020      	strb	r0, [r4, #0]
				     USB_Mode = 0;                       // USB VCP mode in Next USB Connectivity
 80023ba:	7018      	strb	r0, [r3, #0]
					 f_close(&MyFile);
 80023bc:	4812      	ldr	r0, [pc, #72]	; (8002408 <Check_SD_Command_File+0xe0>)
 80023be:	f007 fc98 	bl	8009cf2 <f_close>
					  if (f_unlink ("EnterVCP.txt") == FR_OK) {    // If EnterVCP.txt file present, delete the file
 80023c2:	4812      	ldr	r0, [pc, #72]	; (800240c <Check_SD_Command_File+0xe4>)
 80023c4:	e7de      	b.n	8002384 <Check_SD_Command_File+0x5c>
			 f_close(&MyFile);
 80023c6:	4810      	ldr	r0, [pc, #64]	; (8002408 <Check_SD_Command_File+0xe0>)
 80023c8:	f007 fc93 	bl	8009cf2 <f_close>
			  if (f_unlink ("EnterDFU.txt") == FR_OK) {    // If EnterDFU.txt file present, delete the file
 80023cc:	480d      	ldr	r0, [pc, #52]	; (8002404 <Check_SD_Command_File+0xdc>)
 80023ce:	f007 fe69 	bl	800a0a4 <f_unlink>
				f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 80023d2:	463a      	mov	r2, r7
 80023d4:	4910      	ldr	r1, [pc, #64]	; (8002418 <Check_SD_Command_File+0xf0>)
 80023d6:	4638      	mov	r0, r7
 80023d8:	f007 fa2e 	bl	8009838 <f_mount>
				FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 80023dc:	4805      	ldr	r0, [pc, #20]	; (80023f4 <Check_SD_Command_File+0xcc>)
 80023de:	f007 ff19 	bl	800a214 <FATFS_UnLinkDriver>
			*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 80023e2:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <Check_SD_Command_File+0xf8>)
 80023e4:	4a0f      	ldr	r2, [pc, #60]	; (8002424 <Check_SD_Command_File+0xfc>)
 80023e6:	601a      	str	r2, [r3, #0]
			 NVIC_SystemReset();        // System reset
 80023e8:	f7fe fd00 	bl	8000dec <NVIC_SystemReset>
 80023ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20008681 	.word	0x20008681
 80023f4:	20008a35 	.word	0x20008a35
 80023f8:	0800b7d0 	.word	0x0800b7d0
 80023fc:	20008940 	.word	0x20008940
 8002400:	20008a44 	.word	0x20008a44
 8002404:	0800b53d 	.word	0x0800b53d
 8002408:	20008ca4 	.word	0x20008ca4
 800240c:	0800b54a 	.word	0x0800b54a
 8002410:	20009438 	.word	0x20009438
 8002414:	0800b557 	.word	0x0800b557
 8002418:	0800b6fb 	.word	0x0800b6fb
 800241c:	20008f64 	.word	0x20008f64
 8002420:	20017ff0 	.word	0x20017ff0
 8002424:	deadbeef 	.word	0xdeadbeef

08002428 <Execute_VCP_Command>:
	 if (EnterReset_Create ==1)
 8002428:	4a10      	ldr	r2, [pc, #64]	; (800246c <Execute_VCP_Command+0x44>)
 800242a:	6811      	ldr	r1, [r2, #0]
{
 800242c:	b538      	push	{r3, r4, r5, lr}
	  Data_log_Start_Resume = 0;
 800242e:	4c10      	ldr	r4, [pc, #64]	; (8002470 <Execute_VCP_Command+0x48>)
 8002430:	2300      	movs	r3, #0
	 if (EnterReset_Create ==1)
 8002432:	2901      	cmp	r1, #1
	  Data_log_Start_Resume = 0;
 8002434:	7023      	strb	r3, [r4, #0]
	 if (EnterReset_Create ==1)
 8002436:	d102      	bne.n	800243e <Execute_VCP_Command+0x16>
		 EnterReset_Create =0;
 8002438:	6013      	str	r3, [r2, #0]
			NVIC_SystemReset();    // System reset
 800243a:	f7fe fcd7 	bl	8000dec <NVIC_SystemReset>
	 if (EnterDFU_Create ==1)
 800243e:	4a0d      	ldr	r2, [pc, #52]	; (8002474 <Execute_VCP_Command+0x4c>)
 8002440:	6811      	ldr	r1, [r2, #0]
 8002442:	2901      	cmp	r1, #1
 8002444:	d104      	bne.n	8002450 <Execute_VCP_Command+0x28>
		    EnterDFU_Create =0;
 8002446:	6013      	str	r3, [r2, #0]
			*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <Execute_VCP_Command+0x50>)
 800244a:	4a0c      	ldr	r2, [pc, #48]	; (800247c <Execute_VCP_Command+0x54>)
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	e7f4      	b.n	800243a <Execute_VCP_Command+0x12>
	 if (Logstart_Create ==1)
 8002450:	4a0b      	ldr	r2, [pc, #44]	; (8002480 <Execute_VCP_Command+0x58>)
 8002452:	6815      	ldr	r5, [r2, #0]
 8002454:	2d01      	cmp	r5, #1
 8002456:	d107      	bne.n	8002468 <Execute_VCP_Command+0x40>
		 Logstart_Create=0;
 8002458:	6013      	str	r3, [r2, #0]
		 FATFS_Logstart_Ready();
 800245a:	f7fe ffaf 	bl	80013bc <FATFS_Logstart_Ready>
		 Data_log_Start_Resume = 1;
 800245e:	7025      	strb	r5, [r4, #0]
}
 8002460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		 Check_SD_Command_File();
 8002464:	f7ff bf60 	b.w	8002328 <Check_SD_Command_File>
 8002468:	bd38      	pop	{r3, r4, r5, pc}
 800246a:	bf00      	nop
 800246c:	20009d24 	.word	0x20009d24
 8002470:	20008681 	.word	0x20008681
 8002474:	2000a914 	.word	0x2000a914
 8002478:	20017ff0 	.word	0x20017ff0
 800247c:	deadbeef 	.word	0xdeadbeef
 8002480:	200094b4 	.word	0x200094b4

08002484 <Open_File_For_Sensor_Write>:
{
 8002484:	b538      	push	{r3, r4, r5, lr}
	if (Skip_FATFS==0)
 8002486:	4b15      	ldr	r3, [pc, #84]	; (80024dc <Open_File_For_Sensor_Write+0x58>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	bb2b      	cbnz	r3, 80024d8 <Open_File_For_Sensor_Write+0x54>
	last_file=GetNextIndex("");
 800248c:	4814      	ldr	r0, [pc, #80]	; (80024e0 <Open_File_For_Sensor_Write+0x5c>)
		res= f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 800248e:	4c15      	ldr	r4, [pc, #84]	; (80024e4 <Open_File_For_Sensor_Write+0x60>)
 8002490:	4d15      	ldr	r5, [pc, #84]	; (80024e8 <Open_File_For_Sensor_Write+0x64>)
	last_file=GetNextIndex("");
 8002492:	f7fe feb7 	bl	8001204 <GetNextIndex>
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <Open_File_For_Sensor_Write+0x68>)
	sprintf(FILE_NAME_STRING, "%06d.BIN",last_file);
 8002498:	4915      	ldr	r1, [pc, #84]	; (80024f0 <Open_File_For_Sensor_Write+0x6c>)
	last_file=GetNextIndex("");
 800249a:	6018      	str	r0, [r3, #0]
 800249c:	4602      	mov	r2, r0
	sprintf(FILE_NAME_STRING, "%06d.BIN",last_file);
 800249e:	4815      	ldr	r0, [pc, #84]	; (80024f4 <Open_File_For_Sensor_Write+0x70>)
 80024a0:	f007 ffc0 	bl	800a424 <siprintf>
		res= f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 80024a4:	2212      	movs	r2, #18
 80024a6:	4913      	ldr	r1, [pc, #76]	; (80024f4 <Open_File_For_Sensor_Write+0x70>)
 80024a8:	4620      	mov	r0, r4
 80024aa:	f007 f9fb 	bl	80098a4 <f_open>
 80024ae:	7028      	strb	r0, [r5, #0]
		if(res != FR_OK) // Create and Open a new text file object with write access
 80024b0:	b140      	cbz	r0, 80024c4 <Open_File_For_Sensor_Write+0x40>
			        AIM_Error_Handler(f_open_E);
 80024b2:	2001      	movs	r0, #1
 80024b4:	f7ff fe9e 	bl	80021f4 <AIM_Error_Handler>
				 delay_us(1000);  // Arbitrary delay to complete FATFS SD write
 80024b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 80024bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				 delay_us(1000);  // Arbitrary delay to complete FATFS SD write
 80024c0:	f000 bdfe 	b.w	80030c0 <delay_us>
							f_lseek(&MyFile, MyFile.fsize);   // Increase File Size when big file to write
 80024c4:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 80024c8:	4620      	mov	r0, r4
 80024ca:	f007 fc23 	bl	8009d14 <f_lseek>
							 res= f_sync(&MyFile);
 80024ce:	4620      	mov	r0, r4
 80024d0:	f007 fbaf 	bl	8009c32 <f_sync>
 80024d4:	7028      	strb	r0, [r5, #0]
 80024d6:	e7ef      	b.n	80024b8 <Open_File_For_Sensor_Write+0x34>
 80024d8:	bd38      	pop	{r3, r4, r5, pc}
 80024da:	bf00      	nop
 80024dc:	20008c99 	.word	0x20008c99
 80024e0:	0800b6fb 	.word	0x0800b6fb
 80024e4:	20008ca4 	.word	0x20008ca4
 80024e8:	20008f26 	.word	0x20008f26
 80024ec:	20008c9c 	.word	0x20008c9c
 80024f0:	0800b567 	.word	0x0800b567
 80024f4:	20008988 	.word	0x20008988

080024f8 <Datalog_Sensor_Initialization>:
{
 80024f8:	b508      	push	{r3, lr}
		 FATFS_Init();
 80024fa:	f7ff fef5 	bl	80022e8 <FATFS_Init>
		Open_File_For_Sensor_Write();
 80024fe:	f7ff ffc1 	bl	8002484 <Open_File_For_Sensor_Write>
		if (Skip_FATFS==0)
 8002502:	4b04      	ldr	r3, [pc, #16]	; (8002514 <Datalog_Sensor_Initialization+0x1c>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	b91b      	cbnz	r3, 8002510 <Datalog_Sensor_Initialization+0x18>
}
 8002508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Reset_All();                       // Reset All Buffer parameters for FATFS SDIO write
 800250c:	f7ff bdfc 	b.w	8002108 <Reset_All>
 8002510:	bd08      	pop	{r3, pc}
 8002512:	bf00      	nop
 8002514:	20008c99 	.word	0x20008c99

08002518 <Prepare_Data_Log_State>:
{
 8002518:	b510      	push	{r4, lr}
	   if (Skip_FATFS==0)   // If there's no FATFS SD error
 800251a:	4c11      	ldr	r4, [pc, #68]	; (8002560 <Prepare_Data_Log_State+0x48>)
 800251c:	7821      	ldrb	r1, [r4, #0]
 800251e:	b9f1      	cbnz	r1, 800255e <Prepare_Data_Log_State+0x46>
		   Battery_ADC_Value=2500;
 8002520:	4b10      	ldr	r3, [pc, #64]	; (8002564 <Prepare_Data_Log_State+0x4c>)
 8002522:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002526:	801a      	strh	r2, [r3, #0]
 if (Data_log_Start_Resume == 1)       // Continue Data Log after USB disconnect
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <Prepare_Data_Log_State+0x50>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d10c      	bne.n	800254a <Prepare_Data_Log_State+0x32>
	 Datalog_Sensor_Initialization();
 8002530:	f7ff ffe2 	bl	80024f8 <Datalog_Sensor_Initialization>
   if (Skip_FATFS==0)   // If there's no FATFS SD error
 8002534:	7823      	ldrb	r3, [r4, #0]
 8002536:	b993      	cbnz	r3, 800255e <Prepare_Data_Log_State+0x46>
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8002538:	4a0c      	ldr	r2, [pc, #48]	; (800256c <Prepare_Data_Log_State+0x54>)
 800253a:	6893      	ldr	r3, [r2, #8]
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	6093      	str	r3, [r2, #8]
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <Prepare_Data_Log_State+0x58>)
 8002544:	2204      	movs	r2, #4
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	bd10      	pop	{r4, pc}
	else if (VCP_Bypass==1)
 800254a:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <Prepare_Data_Log_State+0x5c>)
 800254c:	7813      	ldrb	r3, [r2, #0]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d103      	bne.n	800255a <Prepare_Data_Log_State+0x42>
		VCP_Bypass= 0;
 8002552:	7011      	strb	r1, [r2, #0]
		Pros_state = LP_STOP;
 8002554:	4a08      	ldr	r2, [pc, #32]	; (8002578 <Prepare_Data_Log_State+0x60>)
 8002556:	7013      	strb	r3, [r2, #0]
 8002558:	bd10      	pop	{r4, pc}
  NVIC_SystemReset();
 800255a:	f7fe fc47 	bl	8000dec <NVIC_SystemReset>
 800255e:	bd10      	pop	{r4, pc}
 8002560:	20008c99 	.word	0x20008c99
 8002564:	20008c74 	.word	0x20008c74
 8002568:	20008681 	.word	0x20008681
 800256c:	40009400 	.word	0x40009400
 8002570:	e000e100 	.word	0xe000e100
 8002574:	20008a41 	.word	0x20008a41
 8002578:	20008658 	.word	0x20008658

0800257c <USB_Init_Start>:
{
 800257c:	b570      	push	{r4, r5, r6, lr}
	SD_POWER_ON();
 800257e:	f7fe fadd 	bl	8000b3c <SD_POWER_ON>
	 Pros_state = LP_STOP;                  // Next state
 8002582:	4b2a      	ldr	r3, [pc, #168]	; (800262c <USB_Init_Start+0xb0>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002584:	492a      	ldr	r1, [pc, #168]	; (8002630 <USB_Init_Start+0xb4>)
	if (Data_log_Start_Resume == 1 )    // If Data log was in operation
 8002586:	4d2b      	ldr	r5, [pc, #172]	; (8002634 <USB_Init_Start+0xb8>)
	 Pros_state = LP_STOP;                  // Next state
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
 800258c:	2304      	movs	r3, #4
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	 USB_Clock_Ready();
 8002592:	f7fe fddf 	bl	8001154 <USB_Clock_Ready>
 8002596:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800259a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if (Data_log_Start_Resume == 1 )    // If Data log was in operation
 800259e:	782a      	ldrb	r2, [r5, #0]
 80025a0:	2a01      	cmp	r2, #1
 80025a2:	d101      	bne.n	80025a8 <USB_Init_Start+0x2c>
		File_Close_Update_Unlink();
 80025a4:	f7ff f81c 	bl	80015e0 <File_Close_Update_Unlink>
	if (USB_Mode == 1)               // USB MSC Mode  // Default: USB VCP mode (0), MSC (1)
 80025a8:	4e23      	ldr	r6, [pc, #140]	; (8002638 <USB_Init_Start+0xbc>)
	Data_log_Start_Resume = 0;
 80025aa:	2400      	movs	r4, #0
 80025ac:	702c      	strb	r4, [r5, #0]
    HAL_ResumeTick();                                       // Before entering USB mode, SYS_tick needs to enable
 80025ae:	f001 fdcb 	bl	8004148 <HAL_ResumeTick>
	if (USB_Mode == 1)               // USB MSC Mode  // Default: USB VCP mode (0), MSC (1)
 80025b2:	7833      	ldrb	r3, [r6, #0]
 80025b4:	4d21      	ldr	r5, [pc, #132]	; (800263c <USB_Init_Start+0xc0>)
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d116      	bne.n	80025e8 <USB_Init_Start+0x6c>
		VIOLET_LED_ONLY();
 80025ba:	f7fe fab3 	bl	8000b24 <VIOLET_LED_ONLY>
		USB_Mode = 0;               // Next mode default USB VCP
 80025be:	7034      	strb	r4, [r6, #0]
		USB_MSC_Init_Start();
 80025c0:	f7fe ff2a 	bl	8001418 <USB_MSC_Init_Start>
		 FATAL_Error = 0;
 80025c4:	702c      	strb	r4, [r5, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80025c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80025ca:	6914      	ldr	r4, [r2, #16]
		while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));       // Stay USB mode until USB connectivity available PA9
 80025cc:	f414 7400 	ands.w	r4, r4, #512	; 0x200
 80025d0:	d1fb      	bne.n	80025ca <USB_Init_Start+0x4e>
		Shut_Down_USB();
 80025d2:	f7fe fda1 	bl	8001118 <Shut_Down_USB>
		Enter_Into_DFU=0;
 80025d6:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <USB_Init_Start+0xc4>)
 80025d8:	701c      	strb	r4, [r3, #0]
		 Prepare_Data_Log_State();           // Prepare for Data collection
 80025da:	f7ff ff9d 	bl	8002518 <Prepare_Data_Log_State>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <USB_Init_Start+0xb4>)
 80025e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	bd70      	pop	{r4, r5, r6, pc}
  USB_VCP_Init_Start();
 80025e8:	f7fe ff38 	bl	800145c <USB_VCP_Init_Start>
		if (Battey_Charge_Mode(&USBD_Device) == USBD_OK)   // USB Battery charging mode
 80025ec:	4815      	ldr	r0, [pc, #84]	; (8002644 <USB_Init_Start+0xc8>)
 80025ee:	f005 fe51 	bl	8008294 <Battey_Charge_Mode>
 80025f2:	b950      	cbnz	r0, 800260a <USB_Init_Start+0x8e>
			    FATAL_Error = 0;
 80025f4:	7028      	strb	r0, [r5, #0]
 80025f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80025fa:	6913      	ldr	r3, [r2, #16]
				while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));
 80025fc:	059b      	lsls	r3, r3, #22
 80025fe:	d4fc      	bmi.n	80025fa <USB_Init_Start+0x7e>
				Shut_Down_USB();
 8002600:	f7fe fd8a 	bl	8001118 <Shut_Down_USB>
				Check_SD_Command_File();
 8002604:	f7ff fe90 	bl	8002328 <Check_SD_Command_File>
 8002608:	e7e7      	b.n	80025da <USB_Init_Start+0x5e>
			 ALL_LED_ON();
 800260a:	f7fe fa5b 	bl	8000ac4 <ALL_LED_ON>
			 FATAL_Error = 0;
 800260e:	702c      	strb	r4, [r5, #0]
 8002610:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002614:	6914      	ldr	r4, [r2, #16]
		while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));       // Stay USB mode until USB connectivity available PA9
 8002616:	f414 7400 	ands.w	r4, r4, #512	; 0x200
 800261a:	d1fb      	bne.n	8002614 <USB_Init_Start+0x98>
		Shut_Down_USB();
 800261c:	f7fe fd7c 	bl	8001118 <Shut_Down_USB>
		VCP_continue = 0;                     // Variable reset, aviod looping
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <USB_Init_Start+0xcc>)
 8002622:	701c      	strb	r4, [r3, #0]
		Execute_VCP_Command();
 8002624:	f7ff ff00 	bl	8002428 <Execute_VCP_Command>
 8002628:	e7d7      	b.n	80025da <USB_Init_Start+0x5e>
 800262a:	bf00      	nop
 800262c:	20008658 	.word	0x20008658
 8002630:	e000e100 	.word	0xe000e100
 8002634:	20008681 	.word	0x20008681
 8002638:	20008f64 	.word	0x20008f64
 800263c:	20008c98 	.word	0x20008c98
 8002640:	20008a42 	.word	0x20008a42
 8002644:	200086a4 	.word	0x200086a4
 8002648:	200089ce 	.word	0x200089ce

0800264c <SD_Sensor_write>:
{
 800264c:	b538      	push	{r3, r4, r5, lr}
	 res= f_write(&MyFile, &BSbuffer[w_flag], (8192*2), &BytesWritten2);
 800264e:	4b17      	ldr	r3, [pc, #92]	; (80026ac <SD_Sensor_write+0x60>)
 8002650:	4917      	ldr	r1, [pc, #92]	; (80026b0 <SD_Sensor_write+0x64>)
 8002652:	7818      	ldrb	r0, [r3, #0]
 8002654:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <SD_Sensor_write+0x68>)
 8002656:	4c18      	ldr	r4, [pc, #96]	; (80026b8 <SD_Sensor_write+0x6c>)
 8002658:	eb01 3180 	add.w	r1, r1, r0, lsl #14
 800265c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002660:	4816      	ldr	r0, [pc, #88]	; (80026bc <SD_Sensor_write+0x70>)
 8002662:	f007 f9f7 	bl	8009a54 <f_write>
 8002666:	7020      	strb	r0, [r4, #0]
	 if(res!= FR_OK)   // Write the sensor Buffer content to .BIN file
 8002668:	b1b8      	cbz	r0, 800269a <SD_Sensor_write+0x4e>
	 AIM_Error_Handler(f_write_E);
 800266a:	2005      	movs	r0, #5
 800266c:	f7ff fdc2 	bl	80021f4 <AIM_Error_Handler>
	 if (File_Sensor_write_issue==0)
 8002670:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <SD_Sensor_write+0x74>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	b9c3      	cbnz	r3, 80026a8 <SD_Sensor_write+0x5c>
	 if(SD_Write_Count ==SD_cnt_limit)                                          // After 50 SD card write, File Sync (176 write*20.45 sec = 60 minute
 8002676:	4a13      	ldr	r2, [pc, #76]	; (80026c4 <SD_Sensor_write+0x78>)
 8002678:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <SD_Sensor_write+0x7c>)
 800267a:	7811      	ldrb	r1, [r2, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4299      	cmp	r1, r3
 8002680:	4615      	mov	r5, r2
 8002682:	d10d      	bne.n	80026a0 <SD_Sensor_write+0x54>
		 res= f_sync(&MyFile);
 8002684:	480d      	ldr	r0, [pc, #52]	; (80026bc <SD_Sensor_write+0x70>)
 8002686:	f007 fad4 	bl	8009c32 <f_sync>
 800268a:	7020      	strb	r0, [r4, #0]
		 if(res != FR_OK)
 800268c:	b110      	cbz	r0, 8002694 <SD_Sensor_write+0x48>
			 AIM_Error_Handler(f_sync_E);
 800268e:	2004      	movs	r0, #4
 8002690:	f7ff fdb0 	bl	80021f4 <AIM_Error_Handler>
				SD_Write_Count = 0;                                        // Reset SD write counters
 8002694:	2300      	movs	r3, #0
 8002696:	702b      	strb	r3, [r5, #0]
 8002698:	bd38      	pop	{r3, r4, r5, pc}
	 GREEN_LED_OFF();               // Sensor write Completed
 800269a:	f7fe f9fc 	bl	8000a96 <GREEN_LED_OFF>
 800269e:	e7e7      	b.n	8002670 <SD_Sensor_write+0x24>
				SD_Write_Count++;                                          // Increment SD write counter
 80026a0:	7813      	ldrb	r3, [r2, #0]
 80026a2:	3301      	adds	r3, #1
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	7013      	strb	r3, [r2, #0]
 80026a8:	bd38      	pop	{r3, r4, r5, pc}
 80026aa:	bf00      	nop
 80026ac:	20000000 	.word	0x20000000
 80026b0:	200005c4 	.word	0x200005c4
 80026b4:	200089a0 	.word	0x200089a0
 80026b8:	20008f26 	.word	0x20008f26
 80026bc:	20008ca4 	.word	0x20008ca4
 80026c0:	20008964 	.word	0x20008964
 80026c4:	20000578 	.word	0x20000578
 80026c8:	20008904 	.word	0x20008904

080026cc <AIM_DataStart_at_Reset>:



void AIM_DataStart_at_Reset(void)
{
 80026cc:	b510      	push	{r4, lr}
	SD_POWER_ON();
 80026ce:	f7fe fa35 	bl	8000b3c <SD_POWER_ON>
	SD_cnt_limit=3;                    // After 50 write, File will Sync
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <AIM_DataStart_at_Reset+0x44>)
 80026d4:	2203      	movs	r2, #3
 80026d6:	601a      	str	r2, [r3, #0]
	 Data_log_Start_Resume = 1;
 80026d8:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <AIM_DataStart_at_Reset+0x48>)
 80026da:	2401      	movs	r4, #1
 80026dc:	701c      	strb	r4, [r3, #0]
		FATFS_Init();
 80026de:	f7ff fe03 	bl	80022e8 <FATFS_Init>
		Open_File_For_Sensor_Write();
 80026e2:	f7ff fecf 	bl	8002484 <Open_File_For_Sensor_Write>
	Reset_All();
 80026e6:	f7ff fd0f 	bl	8002108 <Reset_All>
	  Start_LPTIMCounter2(0xFF);
 80026ea:	20ff      	movs	r0, #255	; 0xff
 80026ec:	f000 fcf2 	bl	80030d4 <Start_LPTIMCounter2>
 80026f0:	4a09      	ldr	r2, [pc, #36]	; (8002718 <AIM_DataStart_at_Reset+0x4c>)
 80026f2:	6893      	ldr	r3, [r2, #8]
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	6093      	str	r3, [r2, #8]
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <AIM_DataStart_at_Reset+0x50>)
 80026fc:	2204      	movs	r2, #4
 80026fe:	609a      	str	r2, [r3, #8]
		LL_LPTIM_EnableIT_ARRM(LPTIM2);
		NVIC_EnableIRQ(LPTIM2_IRQn);
	Pros_state = LP_STOP;
 8002700:	4a07      	ldr	r2, [pc, #28]	; (8002720 <AIM_DataStart_at_Reset+0x54>)
 8002702:	7014      	strb	r4, [r2, #0]
	USB_Mode = 1;
 8002704:	4a07      	ldr	r2, [pc, #28]	; (8002724 <AIM_DataStart_at_Reset+0x58>)
 8002706:	7014      	strb	r4, [r2, #0]
 8002708:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	bd10      	pop	{r4, pc}
 8002710:	20008904 	.word	0x20008904
 8002714:	20008681 	.word	0x20008681
 8002718:	40009400 	.word	0x40009400
 800271c:	e000e100 	.word	0xe000e100
 8002720:	20008658 	.word	0x20008658
 8002724:	20008f64 	.word	0x20008f64

08002728 <MPU_9D_store_IMU1_SPI1>:
    BSbuffer[s_flag].MY[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
    BSbuffer[s_flag].MZ[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
}

void MPU_9D_store_IMU1_SPI1(void)
{
 8002728:	b530      	push	{r4, r5, lr}
    uint8_t response[21];
    WriteReg1(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 800272a:	218c      	movs	r1, #140	; 0x8c
{
 800272c:	b087      	sub	sp, #28
    WriteReg1(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 800272e:	2025      	movs	r0, #37	; 0x25
 8002730:	f7ff fa68 	bl	8001c04 <WriteReg1>
    WriteReg1(MPUREG_I2C_SLV0_REG, AK8963_HXL);                // I2C slave 0 register address from where to begin data transfer
 8002734:	2103      	movs	r1, #3
 8002736:	2026      	movs	r0, #38	; 0x26
 8002738:	f7ff fa64 	bl	8001c04 <WriteReg1>
    WriteReg1(MPUREG_I2C_SLV0_CTRL, 0x87);                     // Read 7 bytes from the magnetometer
 800273c:	2187      	movs	r1, #135	; 0x87
 800273e:	2027      	movs	r0, #39	; 0x27
 8002740:	f7ff fa60 	bl	8001c04 <WriteReg1>

    ReadRegs1(MPUREG_ACCEL_XOUT_H,response,21);
 8002744:	4669      	mov	r1, sp
 8002746:	2215      	movs	r2, #21
 8002748:	203b      	movs	r0, #59	; 0x3b
 800274a:	f7ff fa9f 	bl	8001c8c <ReadRegs1>

    BSbuffer[s_flag].X1[Sub_cnt]=((int16_t)response[0]<<8)|response[1];
 800274e:	4946      	ldr	r1, [pc, #280]	; (8002868 <MPU_9D_store_IMU1_SPI1+0x140>)
 8002750:	4a46      	ldr	r2, [pc, #280]	; (800286c <MPU_9D_store_IMU1_SPI1+0x144>)
 8002752:	780c      	ldrb	r4, [r1, #0]
 8002754:	6810      	ldr	r0, [r2, #0]
 8002756:	f89d 5000 	ldrb.w	r5, [sp]
 800275a:	4b45      	ldr	r3, [pc, #276]	; (8002870 <MPU_9D_store_IMU1_SPI1+0x148>)
 800275c:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002760:	f500 5094 	add.w	r0, r0, #4736	; 0x1280
 8002764:	f89d 4001 	ldrb.w	r4, [sp, #1]
 8002768:	3014      	adds	r0, #20
 800276a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800276e:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].Y1[Sub_cnt]=((int16_t)response[2]<<8)|response[3];
 8002772:	780c      	ldrb	r4, [r1, #0]
 8002774:	6810      	ldr	r0, [r2, #0]
 8002776:	f89d 5002 	ldrb.w	r5, [sp, #2]
 800277a:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 800277e:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 8002782:	f89d 4003 	ldrb.w	r4, [sp, #3]
 8002786:	301c      	adds	r0, #28
 8002788:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800278c:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].Z1[Sub_cnt]=((int16_t)response[4]<<8)|response[5];
 8002790:	780c      	ldrb	r4, [r1, #0]
 8002792:	6810      	ldr	r0, [r2, #0]
 8002794:	f89d 5004 	ldrb.w	r5, [sp, #4]
 8002798:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 800279c:	f500 50a5 	add.w	r0, r0, #5280	; 0x14a0
 80027a0:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80027a4:	3004      	adds	r0, #4
 80027a6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80027aa:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GX1[Sub_cnt]=((int16_t)response[8]<<8)|response[9];
 80027ae:	780c      	ldrb	r4, [r1, #0]
 80027b0:	6810      	ldr	r0, [r2, #0]
 80027b2:	f89d 5008 	ldrb.w	r5, [sp, #8]
 80027b6:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80027ba:	f500 50ad 	add.w	r0, r0, #5536	; 0x15a0
 80027be:	f89d 4009 	ldrb.w	r4, [sp, #9]
 80027c2:	300c      	adds	r0, #12
 80027c4:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80027c8:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GY1[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 80027cc:	780c      	ldrb	r4, [r1, #0]
 80027ce:	6810      	ldr	r0, [r2, #0]
 80027d0:	f89d 500a 	ldrb.w	r5, [sp, #10]
 80027d4:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80027d8:	f500 50b5 	add.w	r0, r0, #5792	; 0x16a0
 80027dc:	f89d 400b 	ldrb.w	r4, [sp, #11]
 80027e0:	3014      	adds	r0, #20
 80027e2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80027e6:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GZ1[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 80027ea:	780c      	ldrb	r4, [r1, #0]
 80027ec:	6810      	ldr	r0, [r2, #0]
 80027ee:	f89d 500c 	ldrb.w	r5, [sp, #12]
 80027f2:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80027f6:	f500 50bd 	add.w	r0, r0, #6048	; 0x17a0
 80027fa:	f89d 400d 	ldrb.w	r4, [sp, #13]
 80027fe:	301c      	adds	r0, #28
 8002800:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002804:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].MX1[Sub_cnt]=((int16_t)response[15]<<8)|response[14];
 8002808:	780c      	ldrb	r4, [r1, #0]
 800280a:	6810      	ldr	r0, [r2, #0]
 800280c:	f89d 500f 	ldrb.w	r5, [sp, #15]
 8002810:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002814:	f500 50c6 	add.w	r0, r0, #6336	; 0x18c0
 8002818:	f89d 400e 	ldrb.w	r4, [sp, #14]
 800281c:	3004      	adds	r0, #4
 800281e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002822:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].MY1[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
 8002826:	780c      	ldrb	r4, [r1, #0]
 8002828:	6810      	ldr	r0, [r2, #0]
 800282a:	f89d 5011 	ldrb.w	r5, [sp, #17]
    BSbuffer[s_flag].MZ1[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
 800282e:	7809      	ldrb	r1, [r1, #0]
 8002830:	6812      	ldr	r2, [r2, #0]
    BSbuffer[s_flag].MY1[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
 8002832:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002836:	f500 50ce 	add.w	r0, r0, #6592	; 0x19c0
 800283a:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800283e:	300c      	adds	r0, #12
 8002840:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    BSbuffer[s_flag].MZ1[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
 8002844:	eb02 3241 	add.w	r2, r2, r1, lsl #13
    BSbuffer[s_flag].MY1[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
 8002848:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].MZ1[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
 800284c:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8002850:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8002854:	f502 52d6 	add.w	r2, r2, #6848	; 0x1ac0
 8002858:	3214      	adds	r2, #20
 800285a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800285e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8002862:	b007      	add	sp, #28
 8002864:	bd30      	pop	{r4, r5, pc}
 8002866:	bf00      	nop
 8002868:	20000581 	.word	0x20000581
 800286c:	2000057c 	.word	0x2000057c
 8002870:	200005c4 	.word	0x200005c4

08002874 <MPU_9D_store_IMU4_SPI3>:

void MPU_9D_store_IMU4_SPI3(void)
{
 8002874:	b530      	push	{r4, r5, lr}
    uint8_t response[21];
    WriteReg3(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 8002876:	218c      	movs	r1, #140	; 0x8c
{
 8002878:	b087      	sub	sp, #28
    WriteReg3(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 800287a:	2025      	movs	r0, #37	; 0x25
 800287c:	f7ff f99a 	bl	8001bb4 <WriteReg3>
    WriteReg3(MPUREG_I2C_SLV0_REG, AK8963_HXL);                // I2C slave 0 register address from where to begin data transfer
 8002880:	2103      	movs	r1, #3
 8002882:	2026      	movs	r0, #38	; 0x26
 8002884:	f7ff f996 	bl	8001bb4 <WriteReg3>
    WriteReg3(MPUREG_I2C_SLV0_CTRL, 0x87);                     // Read 7 bytes from the magnetometer
 8002888:	2187      	movs	r1, #135	; 0x87
 800288a:	2027      	movs	r0, #39	; 0x27
 800288c:	f7ff f992 	bl	8001bb4 <WriteReg3>

    ReadRegs3(MPUREG_ACCEL_XOUT_H,response,21);
 8002890:	4669      	mov	r1, sp
 8002892:	2215      	movs	r2, #21
 8002894:	203b      	movs	r0, #59	; 0x3b
 8002896:	f7ff fa23 	bl	8001ce0 <ReadRegs3>

    BSbuffer[s_flag].X[Sub_cnt]=((int16_t)response[0]<<8)|response[1];
 800289a:	4940      	ldr	r1, [pc, #256]	; (800299c <MPU_9D_store_IMU4_SPI3+0x128>)
 800289c:	4a40      	ldr	r2, [pc, #256]	; (80029a0 <MPU_9D_store_IMU4_SPI3+0x12c>)
 800289e:	780c      	ldrb	r4, [r1, #0]
 80028a0:	6810      	ldr	r0, [r2, #0]
 80028a2:	f89d 5000 	ldrb.w	r5, [sp]
 80028a6:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <MPU_9D_store_IMU4_SPI3+0x130>)
 80028a8:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80028ac:	f89d 4001 	ldrb.w	r4, [sp, #1]
 80028b0:	3004      	adds	r0, #4
 80028b2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80028b6:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].Y[Sub_cnt]=((int16_t)response[2]<<8)|response[3];
 80028ba:	780c      	ldrb	r4, [r1, #0]
 80028bc:	6810      	ldr	r0, [r2, #0]
 80028be:	f89d 5002 	ldrb.w	r5, [sp, #2]
 80028c2:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80028c6:	f89d 4003 	ldrb.w	r4, [sp, #3]
 80028ca:	f500 7086 	add.w	r0, r0, #268	; 0x10c
 80028ce:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80028d2:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].Z[Sub_cnt]=((int16_t)response[4]<<8)|response[5];
 80028d6:	780c      	ldrb	r4, [r1, #0]
 80028d8:	6810      	ldr	r0, [r2, #0]
 80028da:	f89d 5004 	ldrb.w	r5, [sp, #4]
 80028de:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80028e2:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80028e6:	f500 7005 	add.w	r0, r0, #532	; 0x214
 80028ea:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80028ee:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GX[Sub_cnt]=((int16_t)response[8]<<8)|response[9];
 80028f2:	780c      	ldrb	r4, [r1, #0]
 80028f4:	6810      	ldr	r0, [r2, #0]
 80028f6:	f89d 5008 	ldrb.w	r5, [sp, #8]
 80028fa:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80028fe:	f89d 4009 	ldrb.w	r4, [sp, #9]
 8002902:	f500 7047 	add.w	r0, r0, #796	; 0x31c
 8002906:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800290a:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GY[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 800290e:	780c      	ldrb	r4, [r1, #0]
 8002910:	6810      	ldr	r0, [r2, #0]
 8002912:	f89d 500a 	ldrb.w	r5, [sp, #10]
 8002916:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 800291a:	f89d 400b 	ldrb.w	r4, [sp, #11]
 800291e:	f200 4024 	addw	r0, r0, #1060	; 0x424
 8002922:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002926:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GZ[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 800292a:	780c      	ldrb	r4, [r1, #0]
 800292c:	6810      	ldr	r0, [r2, #0]
 800292e:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8002932:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002936:	f89d 400d 	ldrb.w	r4, [sp, #13]
 800293a:	f200 502c 	addw	r0, r0, #1324	; 0x52c
 800293e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002942:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].MX[Sub_cnt]=((int16_t)response[15]<<8)|response[14];
 8002946:	780c      	ldrb	r4, [r1, #0]
 8002948:	6810      	ldr	r0, [r2, #0]
 800294a:	f89d 500f 	ldrb.w	r5, [sp, #15]
 800294e:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002952:	f89d 400e 	ldrb.w	r4, [sp, #14]
 8002956:	f200 6034 	addw	r0, r0, #1588	; 0x634
 800295a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800295e:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].MY[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
 8002962:	780c      	ldrb	r4, [r1, #0]
 8002964:	6810      	ldr	r0, [r2, #0]
 8002966:	f89d 5011 	ldrb.w	r5, [sp, #17]
 800296a:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 800296e:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8002972:	f200 703c 	addw	r0, r0, #1852	; 0x73c
 8002976:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800297a:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
 //   BSbuffer[s_flag].MZ[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
    BSbuffer[s_flag].MZ[Sub_cnt]=(int16_t) (LL_GPIO_IsInputPinSet(GPIOA,LL_GPIO_PIN_10));
 800297e:	7808      	ldrb	r0, [r1, #0]
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002986:	eb02 3240 	add.w	r2, r2, r0, lsl #13
 800298a:	6909      	ldr	r1, [r1, #16]
 800298c:	f602 0244 	addw	r2, r2, #2116	; 0x844
 8002990:	f3c1 2180 	ubfx	r1, r1, #10, #1
 8002994:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8002998:	b007      	add	sp, #28
 800299a:	bd30      	pop	{r4, r5, pc}
 800299c:	20000581 	.word	0x20000581
 80029a0:	2000057c 	.word	0x2000057c
 80029a4:	200005c4 	.word	0x200005c4

080029a8 <MPU_9D_store_IMU3_SPI2>:

void MPU_9D_store_IMU3_SPI2(void)
{
 80029a8:	b530      	push	{r4, r5, lr}
    uint8_t response[21];
    WriteReg2(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 80029aa:	218c      	movs	r1, #140	; 0x8c
{
 80029ac:	b087      	sub	sp, #28
    WriteReg2(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 80029ae:	2025      	movs	r0, #37	; 0x25
 80029b0:	f7ff f94a 	bl	8001c48 <WriteReg2>
    WriteReg2(MPUREG_I2C_SLV0_REG, AK8963_HXL);                // I2C slave 0 register address from where to begin data transfer
 80029b4:	2103      	movs	r1, #3
 80029b6:	2026      	movs	r0, #38	; 0x26
 80029b8:	f7ff f946 	bl	8001c48 <WriteReg2>
    WriteReg2(MPUREG_I2C_SLV0_CTRL, 0x87);                     // Read 7 bytes from the magnetometer
 80029bc:	2187      	movs	r1, #135	; 0x87
 80029be:	2027      	movs	r0, #39	; 0x27
 80029c0:	f7ff f942 	bl	8001c48 <WriteReg2>

    ReadRegs2(MPUREG_ACCEL_XOUT_H,response,21);
 80029c4:	4669      	mov	r1, sp
 80029c6:	2215      	movs	r2, #21
 80029c8:	203b      	movs	r0, #59	; 0x3b
 80029ca:	f7ff f9bb 	bl	8001d44 <ReadRegs2>

    BSbuffer[s_flag].X2[Sub_cnt]=((int16_t)response[0]<<8)|response[1];
 80029ce:	4942      	ldr	r1, [pc, #264]	; (8002ad8 <MPU_9D_store_IMU3_SPI2+0x130>)
 80029d0:	4a42      	ldr	r2, [pc, #264]	; (8002adc <MPU_9D_store_IMU3_SPI2+0x134>)
 80029d2:	780c      	ldrb	r4, [r1, #0]
 80029d4:	6810      	ldr	r0, [r2, #0]
 80029d6:	f89d 5000 	ldrb.w	r5, [sp]
 80029da:	4b41      	ldr	r3, [pc, #260]	; (8002ae0 <MPU_9D_store_IMU3_SPI2+0x138>)
 80029dc:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80029e0:	f89d 4001 	ldrb.w	r4, [sp, #1]
 80029e4:	f600 104c 	addw	r0, r0, #2380	; 0x94c
 80029e8:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80029ec:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].Y2[Sub_cnt]=((int16_t)response[2]<<8)|response[3];
 80029f0:	780c      	ldrb	r4, [r1, #0]
 80029f2:	6810      	ldr	r0, [r2, #0]
 80029f4:	f89d 5002 	ldrb.w	r5, [sp, #2]
 80029f8:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80029fc:	f89d 4003 	ldrb.w	r4, [sp, #3]
 8002a00:	f600 2054 	addw	r0, r0, #2644	; 0xa54
 8002a04:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002a08:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].Z2[Sub_cnt]=((int16_t)response[4]<<8)|response[5];
 8002a0c:	780c      	ldrb	r4, [r1, #0]
 8002a0e:	6810      	ldr	r0, [r2, #0]
 8002a10:	f89d 5004 	ldrb.w	r5, [sp, #4]
 8002a14:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002a18:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8002a1c:	f600 305c 	addw	r0, r0, #2908	; 0xb5c
 8002a20:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002a24:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GX2[Sub_cnt]=((int16_t)response[8]<<8)|response[9];
 8002a28:	780c      	ldrb	r4, [r1, #0]
 8002a2a:	6810      	ldr	r0, [r2, #0]
 8002a2c:	f89d 5008 	ldrb.w	r5, [sp, #8]
 8002a30:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002a34:	f89d 4009 	ldrb.w	r4, [sp, #9]
 8002a38:	f600 4064 	addw	r0, r0, #3172	; 0xc64
 8002a3c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002a40:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GY2[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 8002a44:	780c      	ldrb	r4, [r1, #0]
 8002a46:	6810      	ldr	r0, [r2, #0]
 8002a48:	f89d 500a 	ldrb.w	r5, [sp, #10]
 8002a4c:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002a50:	f89d 400b 	ldrb.w	r4, [sp, #11]
 8002a54:	f600 506c 	addw	r0, r0, #3436	; 0xd6c
 8002a58:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002a5c:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GZ2[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 8002a60:	780c      	ldrb	r4, [r1, #0]
 8002a62:	6810      	ldr	r0, [r2, #0]
 8002a64:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8002a68:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002a6c:	f89d 400d 	ldrb.w	r4, [sp, #13]
 8002a70:	f600 6074 	addw	r0, r0, #3700	; 0xe74
 8002a74:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002a78:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].MX2[Sub_cnt]=((int16_t)response[15]<<8)|response[14];
 8002a7c:	780c      	ldrb	r4, [r1, #0]
 8002a7e:	6810      	ldr	r0, [r2, #0]
 8002a80:	f89d 500f 	ldrb.w	r5, [sp, #15]
 8002a84:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002a88:	f89d 400e 	ldrb.w	r4, [sp, #14]
 8002a8c:	f600 707c 	addw	r0, r0, #3964	; 0xf7c
 8002a90:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002a94:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].MY2[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
 8002a98:	780c      	ldrb	r4, [r1, #0]
 8002a9a:	6810      	ldr	r0, [r2, #0]
 8002a9c:	f89d 5011 	ldrb.w	r5, [sp, #17]
    BSbuffer[s_flag].MZ2[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
 8002aa0:	7809      	ldrb	r1, [r1, #0]
 8002aa2:	6812      	ldr	r2, [r2, #0]
    BSbuffer[s_flag].MY2[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
 8002aa4:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002aa8:	f500 5084 	add.w	r0, r0, #4224	; 0x1080
 8002aac:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8002ab0:	3004      	adds	r0, #4
 8002ab2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    BSbuffer[s_flag].MZ2[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
 8002ab6:	eb02 3241 	add.w	r2, r2, r1, lsl #13
    BSbuffer[s_flag].MY2[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
 8002aba:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].MZ2[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
 8002abe:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8002ac2:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8002ac6:	f502 528c 	add.w	r2, r2, #4480	; 0x1180
 8002aca:	320c      	adds	r2, #12
 8002acc:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002ad0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8002ad4:	b007      	add	sp, #28
 8002ad6:	bd30      	pop	{r4, r5, pc}
 8002ad8:	20000581 	.word	0x20000581
 8002adc:	2000057c 	.word	0x2000057c
 8002ae0:	200005c4 	.word	0x200005c4

08002ae4 <MPU1_SPI1_init>:
        mag_data[i-7] = data * Magnetometer_ASA[i-7];
    }
}

void MPU1_SPI1_init(void)
{
 8002ae4:	b530      	push	{r4, r5, lr}
 8002ae6:	b08b      	sub	sp, #44	; 0x2c
	float temp[3];
	uint8_t i = 0;
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = {
 8002ae8:	226b      	movs	r2, #107	; 0x6b
 8002aea:	f88d 2005 	strb.w	r2, [sp, #5]
 8002aee:	f88d 2007 	strb.w	r2, [sp, #7]
 8002af2:	226c      	movs	r2, #108	; 0x6c
 8002af4:	f88d 2009 	strb.w	r2, [sp, #9]
 8002af8:	4a33      	ldr	r2, [pc, #204]	; (8002bc8 <MPU1_SPI1_init+0xe4>)
 8002afa:	7812      	ldrb	r2, [r2, #0]
 8002afc:	f88d 200a 	strb.w	r2, [sp, #10]
 8002b00:	221a      	movs	r2, #26
 8002b02:	f88d 200b 	strb.w	r2, [sp, #11]
 8002b06:	221b      	movs	r2, #27
 8002b08:	f88d 200d 	strb.w	r2, [sp, #13]
 8002b0c:	221c      	movs	r2, #28
 8002b0e:	f88d 200f 	strb.w	r2, [sp, #15]
 8002b12:	4a2e      	ldr	r2, [pc, #184]	; (8002bcc <MPU1_SPI1_init+0xe8>)
 8002b14:	7812      	ldrb	r2, [r2, #0]
 8002b16:	f88d 2010 	strb.w	r2, [sp, #16]
 8002b1a:	221d      	movs	r2, #29
 8002b1c:	f88d 2011 	strb.w	r2, [sp, #17]
 8002b20:	2212      	movs	r2, #18
 8002b22:	f88d 2012 	strb.w	r2, [sp, #18]
 8002b26:	2237      	movs	r2, #55	; 0x37
 8002b28:	f88d 2013 	strb.w	r2, [sp, #19]
 8002b2c:	2230      	movs	r2, #48	; 0x30
 8002b2e:	f88d 2014 	strb.w	r2, [sp, #20]
 8002b32:	226a      	movs	r2, #106	; 0x6a
 8002b34:	f88d 2015 	strb.w	r2, [sp, #21]
 8002b38:	220d      	movs	r2, #13
 8002b3a:	f88d 2016 	strb.w	r2, [sp, #22]
 8002b3e:	2224      	movs	r2, #36	; 0x24
 8002b40:	f88d 2017 	strb.w	r2, [sp, #23]
 8002b44:	220c      	movs	r2, #12
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	f88d 2018 	strb.w	r2, [sp, #24]
 8002b4c:	2225      	movs	r2, #37	; 0x25
 8002b4e:	f88d 3004 	strb.w	r3, [sp, #4]
 8002b52:	f88d 2019 	strb.w	r2, [sp, #25]
 8002b56:	2301      	movs	r3, #1
 8002b58:	220b      	movs	r2, #11
 8002b5a:	2400      	movs	r4, #0
 8002b5c:	2026      	movs	r0, #38	; 0x26
 8002b5e:	f88d 3006 	strb.w	r3, [sp, #6]
 8002b62:	f88d 201a 	strb.w	r2, [sp, #26]
 8002b66:	f88d 301c 	strb.w	r3, [sp, #28]
 8002b6a:	2163      	movs	r1, #99	; 0x63
 8002b6c:	2281      	movs	r2, #129	; 0x81
 8002b6e:	2327      	movs	r3, #39	; 0x27
 8002b70:	250a      	movs	r5, #10
 8002b72:	f88d 001b 	strb.w	r0, [sp, #27]
 8002b76:	f88d 5020 	strb.w	r5, [sp, #32]
 8002b7a:	f88d 4008 	strb.w	r4, [sp, #8]
 8002b7e:	f88d 400c 	strb.w	r4, [sp, #12]
 8002b82:	f88d 400e 	strb.w	r4, [sp, #14]
 8002b86:	f88d 101d 	strb.w	r1, [sp, #29]
 8002b8a:	f88d 201e 	strb.w	r2, [sp, #30]
 8002b8e:	f88d 301f 	strb.w	r3, [sp, #31]
 8002b92:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8002b96:	2016      	movs	r0, #22
 8002b98:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8002b9c:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 8002ba0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8002ba4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25

	};


    for(i = 0; i < MPU_InitRegNum; i++) {
        WriteReg1(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 8002ba8:	ad01      	add	r5, sp, #4
 8002baa:	192b      	adds	r3, r5, r4
 8002bac:	5d29      	ldrb	r1, [r5, r4]
 8002bae:	7858      	ldrb	r0, [r3, #1]
 8002bb0:	f7ff f828 	bl	8001c04 <WriteReg1>
 8002bb4:	3402      	adds	r4, #2
        delay_us(1000);  // I2C must slow down the write speed, otherwise it won't work
 8002bb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bba:	f000 fa81 	bl	80030c0 <delay_us>
    for(i = 0; i < MPU_InitRegNum; i++) {
 8002bbe:	2c22      	cmp	r4, #34	; 0x22
 8002bc0:	d1f3      	bne.n	8002baa <MPU1_SPI1_init+0xc6>

 //   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
 //   return 0;


}
 8002bc2:	b00b      	add	sp, #44	; 0x2c
 8002bc4:	bd30      	pop	{r4, r5, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000001 	.word	0x20000001
 8002bcc:	20000002 	.word	0x20000002

08002bd0 <P_IMU1_SPI1_Initialization_at_reset>:
{
 8002bd0:	b508      	push	{r3, lr}
	P_IMU1_SPI1_Init();         // Accelerometer Chip Initialization
 8002bd2:	f7ff f989 	bl	8001ee8 <P_IMU1_SPI1_Init>
	delay_us(7000);         // Arbitrary delay after SPI initialization
 8002bd6:	f641 3058 	movw	r0, #7000	; 0x1b58
 8002bda:	f000 fa71 	bl	80030c0 <delay_us>
}
 8002bde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MPU1_SPI1_init();
 8002be2:	f7ff bf7f 	b.w	8002ae4 <MPU1_SPI1_init>
	...

08002be8 <MPU4_SPI3_init>:

void MPU4_SPI3_init(void)
{
 8002be8:	b530      	push	{r4, r5, lr}
 8002bea:	b08b      	sub	sp, #44	; 0x2c
//	float temp[3];
	uint8_t i = 0;
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = {
 8002bec:	226b      	movs	r2, #107	; 0x6b
 8002bee:	f88d 2005 	strb.w	r2, [sp, #5]
 8002bf2:	f88d 2007 	strb.w	r2, [sp, #7]
 8002bf6:	226c      	movs	r2, #108	; 0x6c
 8002bf8:	f88d 2009 	strb.w	r2, [sp, #9]
 8002bfc:	4a33      	ldr	r2, [pc, #204]	; (8002ccc <MPU4_SPI3_init+0xe4>)
 8002bfe:	7812      	ldrb	r2, [r2, #0]
 8002c00:	f88d 200a 	strb.w	r2, [sp, #10]
 8002c04:	221a      	movs	r2, #26
 8002c06:	f88d 200b 	strb.w	r2, [sp, #11]
 8002c0a:	221b      	movs	r2, #27
 8002c0c:	f88d 200d 	strb.w	r2, [sp, #13]
 8002c10:	221c      	movs	r2, #28
 8002c12:	f88d 200f 	strb.w	r2, [sp, #15]
 8002c16:	4a2e      	ldr	r2, [pc, #184]	; (8002cd0 <MPU4_SPI3_init+0xe8>)
 8002c18:	7812      	ldrb	r2, [r2, #0]
 8002c1a:	f88d 2010 	strb.w	r2, [sp, #16]
 8002c1e:	221d      	movs	r2, #29
 8002c20:	f88d 2011 	strb.w	r2, [sp, #17]
 8002c24:	2212      	movs	r2, #18
 8002c26:	f88d 2012 	strb.w	r2, [sp, #18]
 8002c2a:	2237      	movs	r2, #55	; 0x37
 8002c2c:	f88d 2013 	strb.w	r2, [sp, #19]
 8002c30:	2230      	movs	r2, #48	; 0x30
 8002c32:	f88d 2014 	strb.w	r2, [sp, #20]
 8002c36:	226a      	movs	r2, #106	; 0x6a
 8002c38:	f88d 2015 	strb.w	r2, [sp, #21]
 8002c3c:	220d      	movs	r2, #13
 8002c3e:	f88d 2016 	strb.w	r2, [sp, #22]
 8002c42:	2224      	movs	r2, #36	; 0x24
 8002c44:	f88d 2017 	strb.w	r2, [sp, #23]
 8002c48:	220c      	movs	r2, #12
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	f88d 2018 	strb.w	r2, [sp, #24]
 8002c50:	2225      	movs	r2, #37	; 0x25
 8002c52:	f88d 3004 	strb.w	r3, [sp, #4]
 8002c56:	f88d 2019 	strb.w	r2, [sp, #25]
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	220b      	movs	r2, #11
 8002c5e:	2400      	movs	r4, #0
 8002c60:	2026      	movs	r0, #38	; 0x26
 8002c62:	f88d 3006 	strb.w	r3, [sp, #6]
 8002c66:	f88d 201a 	strb.w	r2, [sp, #26]
 8002c6a:	f88d 301c 	strb.w	r3, [sp, #28]
 8002c6e:	2163      	movs	r1, #99	; 0x63
 8002c70:	2281      	movs	r2, #129	; 0x81
 8002c72:	2327      	movs	r3, #39	; 0x27
 8002c74:	250a      	movs	r5, #10
 8002c76:	f88d 001b 	strb.w	r0, [sp, #27]
 8002c7a:	f88d 5020 	strb.w	r5, [sp, #32]
 8002c7e:	f88d 4008 	strb.w	r4, [sp, #8]
 8002c82:	f88d 400c 	strb.w	r4, [sp, #12]
 8002c86:	f88d 400e 	strb.w	r4, [sp, #14]
 8002c8a:	f88d 101d 	strb.w	r1, [sp, #29]
 8002c8e:	f88d 201e 	strb.w	r2, [sp, #30]
 8002c92:	f88d 301f 	strb.w	r3, [sp, #31]
 8002c96:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8002c9a:	2016      	movs	r0, #22
 8002c9c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8002ca0:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 8002ca4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8002ca8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25

	};

//	 LED_Nucleo_OFF();
    for(i = 0; i < MPU_InitRegNum; i++) {
        WriteReg3(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 8002cac:	ad01      	add	r5, sp, #4
 8002cae:	192b      	adds	r3, r5, r4
 8002cb0:	5d29      	ldrb	r1, [r5, r4]
 8002cb2:	7858      	ldrb	r0, [r3, #1]
 8002cb4:	f7fe ff7e 	bl	8001bb4 <WriteReg3>
 8002cb8:	3402      	adds	r4, #2
        delay_us(1000);  // I2C must slow down the write speed, otherwise it won't work
 8002cba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cbe:	f000 f9ff 	bl	80030c0 <delay_us>
    for(i = 0; i < MPU_InitRegNum; i++) {
 8002cc2:	2c22      	cmp	r4, #34	; 0x22
 8002cc4:	d1f3      	bne.n	8002cae <MPU4_SPI3_init+0xc6>

 //   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
 //   return 0;


}
 8002cc6:	b00b      	add	sp, #44	; 0x2c
 8002cc8:	bd30      	pop	{r4, r5, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000001 	.word	0x20000001
 8002cd0:	20000002 	.word	0x20000002

08002cd4 <P_IMU4_SPI3_Initialization_at_reset>:
{
 8002cd4:	b508      	push	{r3, lr}
	P_IMU4_SPI3_Init();         // Accelerometer Chip Initialization
 8002cd6:	f7fe fd6b 	bl	80017b0 <P_IMU4_SPI3_Init>
	delay_us(7000);         // Arbitrary delay after SPI initialization
 8002cda:	f641 3058 	movw	r0, #7000	; 0x1b58
 8002cde:	f000 f9ef 	bl	80030c0 <delay_us>
}
 8002ce2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MPU4_SPI3_init();
 8002ce6:	f7ff bf7f 	b.w	8002be8 <MPU4_SPI3_init>
	...

08002cec <MPU3_SPI2_init>:

void MPU3_SPI2_init(void)
{
 8002cec:	b530      	push	{r4, r5, lr}
 8002cee:	b08b      	sub	sp, #44	; 0x2c
	float temp[3];
	uint8_t i = 0;
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = {
 8002cf0:	226b      	movs	r2, #107	; 0x6b
 8002cf2:	f88d 2005 	strb.w	r2, [sp, #5]
 8002cf6:	f88d 2007 	strb.w	r2, [sp, #7]
 8002cfa:	226c      	movs	r2, #108	; 0x6c
 8002cfc:	f88d 2009 	strb.w	r2, [sp, #9]
 8002d00:	4a33      	ldr	r2, [pc, #204]	; (8002dd0 <MPU3_SPI2_init+0xe4>)
 8002d02:	7812      	ldrb	r2, [r2, #0]
 8002d04:	f88d 200a 	strb.w	r2, [sp, #10]
 8002d08:	221a      	movs	r2, #26
 8002d0a:	f88d 200b 	strb.w	r2, [sp, #11]
 8002d0e:	221b      	movs	r2, #27
 8002d10:	f88d 200d 	strb.w	r2, [sp, #13]
 8002d14:	221c      	movs	r2, #28
 8002d16:	f88d 200f 	strb.w	r2, [sp, #15]
 8002d1a:	4a2e      	ldr	r2, [pc, #184]	; (8002dd4 <MPU3_SPI2_init+0xe8>)
 8002d1c:	7812      	ldrb	r2, [r2, #0]
 8002d1e:	f88d 2010 	strb.w	r2, [sp, #16]
 8002d22:	221d      	movs	r2, #29
 8002d24:	f88d 2011 	strb.w	r2, [sp, #17]
 8002d28:	2212      	movs	r2, #18
 8002d2a:	f88d 2012 	strb.w	r2, [sp, #18]
 8002d2e:	2237      	movs	r2, #55	; 0x37
 8002d30:	f88d 2013 	strb.w	r2, [sp, #19]
 8002d34:	2230      	movs	r2, #48	; 0x30
 8002d36:	f88d 2014 	strb.w	r2, [sp, #20]
 8002d3a:	226a      	movs	r2, #106	; 0x6a
 8002d3c:	f88d 2015 	strb.w	r2, [sp, #21]
 8002d40:	220d      	movs	r2, #13
 8002d42:	f88d 2016 	strb.w	r2, [sp, #22]
 8002d46:	2224      	movs	r2, #36	; 0x24
 8002d48:	f88d 2017 	strb.w	r2, [sp, #23]
 8002d4c:	220c      	movs	r2, #12
 8002d4e:	2380      	movs	r3, #128	; 0x80
 8002d50:	f88d 2018 	strb.w	r2, [sp, #24]
 8002d54:	2225      	movs	r2, #37	; 0x25
 8002d56:	f88d 3004 	strb.w	r3, [sp, #4]
 8002d5a:	f88d 2019 	strb.w	r2, [sp, #25]
 8002d5e:	2301      	movs	r3, #1
 8002d60:	220b      	movs	r2, #11
 8002d62:	2400      	movs	r4, #0
 8002d64:	2026      	movs	r0, #38	; 0x26
 8002d66:	f88d 3006 	strb.w	r3, [sp, #6]
 8002d6a:	f88d 201a 	strb.w	r2, [sp, #26]
 8002d6e:	f88d 301c 	strb.w	r3, [sp, #28]
 8002d72:	2163      	movs	r1, #99	; 0x63
 8002d74:	2281      	movs	r2, #129	; 0x81
 8002d76:	2327      	movs	r3, #39	; 0x27
 8002d78:	250a      	movs	r5, #10
 8002d7a:	f88d 001b 	strb.w	r0, [sp, #27]
 8002d7e:	f88d 5020 	strb.w	r5, [sp, #32]
 8002d82:	f88d 4008 	strb.w	r4, [sp, #8]
 8002d86:	f88d 400c 	strb.w	r4, [sp, #12]
 8002d8a:	f88d 400e 	strb.w	r4, [sp, #14]
 8002d8e:	f88d 101d 	strb.w	r1, [sp, #29]
 8002d92:	f88d 201e 	strb.w	r2, [sp, #30]
 8002d96:	f88d 301f 	strb.w	r3, [sp, #31]
 8002d9a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8002d9e:	2016      	movs	r0, #22
 8002da0:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8002da4:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 8002da8:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8002dac:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25

	};


    for(i = 0; i < MPU_InitRegNum; i++) {
        WriteReg2(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 8002db0:	ad01      	add	r5, sp, #4
 8002db2:	192b      	adds	r3, r5, r4
 8002db4:	5d29      	ldrb	r1, [r5, r4]
 8002db6:	7858      	ldrb	r0, [r3, #1]
 8002db8:	f7fe ff46 	bl	8001c48 <WriteReg2>
 8002dbc:	3402      	adds	r4, #2
        delay_us(1000);  // I2C must slow down the write speed, otherwise it won't work
 8002dbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dc2:	f000 f97d 	bl	80030c0 <delay_us>
    for(i = 0; i < MPU_InitRegNum; i++) {
 8002dc6:	2c22      	cmp	r4, #34	; 0x22
 8002dc8:	d1f3      	bne.n	8002db2 <MPU3_SPI2_init+0xc6>

 //   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
 //   return 0;


}
 8002dca:	b00b      	add	sp, #44	; 0x2c
 8002dcc:	bd30      	pop	{r4, r5, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000001 	.word	0x20000001
 8002dd4:	20000002 	.word	0x20000002

08002dd8 <P_IMU3_SPI2_Initialization_at_reset>:
{
 8002dd8:	b508      	push	{r3, lr}
	P_IMU3_SPI2_Init();         // Accelerometer Chip Initialization
 8002dda:	f7ff f8c5 	bl	8001f68 <P_IMU3_SPI2_Init>
	delay_us(7000);         // Arbitrary delay after SPI initialization
 8002dde:	f641 3058 	movw	r0, #7000	; 0x1b58
 8002de2:	f000 f96d 	bl	80030c0 <delay_us>
}
 8002de6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MPU3_SPI2_init();
 8002dea:	f7ff bf7f 	b.w	8002cec <MPU3_SPI2_init>
	...

08002df0 <Mag_Enc1_Store>:
//	}
	return tempPosition;
}

void Mag_Enc1_Store(void)
{
 8002df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  WRITE_REG(GPIOx->BRR, PinMask);
 8002df4:	4c1d      	ldr	r4, [pc, #116]	; (8002e6c <Mag_Enc1_Store+0x7c>)
 8002df6:	2302      	movs	r3, #2
 8002df8:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8002dfc:	62a3      	str	r3, [r4, #40]	; 0x28
	uint8_t tempRead = 0;
	uint8_t Flags[6];
	LL_GPIO_ResetOutputPin(ENC1_CS_GPIO_PORT, ENC1_CS_PIN);

	// Sensor feeds out position MSB first
	for(i = 11; i >= 0; i--)
 8002dfe:	250b      	movs	r5, #11
	int tempPosition = 0;
 8002e00:	2600      	movs	r6, #0
 8002e02:	46b8      	mov	r8, r7
	{
		LL_GPIO_ResetOutputPin(ENC1_SCLK_GPIO_PORT, ENC1_SCLK_PIN);
		delay_us(10);
 8002e04:	200a      	movs	r0, #10
 8002e06:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 8002e0a:	f000 f959 	bl	80030c0 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002e0e:	61a7      	str	r7, [r4, #24]

		LL_GPIO_SetOutputPin(ENC1_SCLK_GPIO_PORT, ENC1_SCLK_PIN);
		delay_us(10);
 8002e10:	200a      	movs	r0, #10
 8002e12:	f000 f955 	bl	80030c0 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002e16:	6923      	ldr	r3, [r4, #16]
 8002e18:	f3c3 0380 	ubfx	r3, r3, #2, #1

		tempRead = LL_GPIO_IsInputPinSet(ENC1_DATA_GPIO_PORT,ENC1_DATA_PIN) &0x01;
		tempPosition |= (tempRead)<<i;
 8002e1c:	40ab      	lsls	r3, r5
	for(i = 11; i >= 0; i--)
 8002e1e:	f115 35ff 	adds.w	r5, r5, #4294967295
		tempPosition |= (tempRead)<<i;
 8002e22:	ea46 0603 	orr.w	r6, r6, r3
	for(i = 11; i >= 0; i--)
 8002e26:	d2ed      	bcs.n	8002e04 <Mag_Enc1_Store+0x14>
  WRITE_REG(GPIOx->BRR, PinMask);
 8002e28:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8002e2c:	4c0f      	ldr	r4, [pc, #60]	; (8002e6c <Mag_Enc1_Store+0x7c>)
 8002e2e:	2506      	movs	r5, #6
 8002e30:	46b8      	mov	r8, r7
	}

	for(i = 0; i < 6; i++)
	{
		LL_GPIO_ResetOutputPin(ENC1_SCLK_GPIO_PORT, ENC1_SCLK_PIN);
		delay_us(10);
 8002e32:	200a      	movs	r0, #10
 8002e34:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 8002e38:	f000 f942 	bl	80030c0 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002e3c:	61a7      	str	r7, [r4, #24]

		LL_GPIO_SetOutputPin(ENC1_SCLK_GPIO_PORT, ENC1_SCLK_PIN);
		delay_us(10);
 8002e3e:	200a      	movs	r0, #10
 8002e40:	f000 f93e 	bl	80030c0 <delay_us>
	for(i = 0; i < 6; i++)
 8002e44:	3d01      	subs	r5, #1
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002e46:	6923      	ldr	r3, [r4, #16]
 8002e48:	d1f3      	bne.n	8002e32 <Mag_Enc1_Store+0x42>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	61a3      	str	r3, [r4, #24]
		Flags[i] |= (tempRead)<<i;
	}

	LL_GPIO_SetOutputPin(ENC1_CS_GPIO_PORT, ENC1_CS_PIN);

	BSbuffer[s_flag].Enc1[Sub_cnt]=tempPosition;
 8002e4e:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <Mag_Enc1_Store+0x80>)
 8002e50:	781a      	ldrb	r2, [r3, #0]
 8002e52:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <Mag_Enc1_Store+0x84>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8002e5a:	f503 53ef 	add.w	r3, r3, #7648	; 0x1de0
 8002e5e:	330c      	adds	r3, #12
 8002e60:	4a05      	ldr	r2, [pc, #20]	; (8002e78 <Mag_Enc1_Store+0x88>)
 8002e62:	f822 6013 	strh.w	r6, [r2, r3, lsl #1]
 8002e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e6a:	bf00      	nop
 8002e6c:	48000400 	.word	0x48000400
 8002e70:	20000581 	.word	0x20000581
 8002e74:	2000057c 	.word	0x2000057c
 8002e78:	200005c4 	.word	0x200005c4

08002e7c <Mag_Enc2_Store>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8002e7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <Mag_Enc2_Store+0x7c>)
}

void Mag_Enc2_Store(void)
{
 8002e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e82:	2240      	movs	r2, #64	; 0x40
 8002e84:	2780      	movs	r7, #128	; 0x80
 8002e86:	4e1d      	ldr	r6, [pc, #116]	; (8002efc <Mag_Enc2_Store+0x80>)
 8002e88:	629a      	str	r2, [r3, #40]	; 0x28
	uint8_t tempRead = 0;
	uint8_t Flags[6];
	LL_GPIO_ResetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	// Sensor feeds out position MSB first
	for(i = 11; i >= 0; i--)
 8002e8a:	240b      	movs	r4, #11
	int tempPosition = 0;
 8002e8c:	2500      	movs	r5, #0
 8002e8e:	46b8      	mov	r8, r7
	{
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8002e90:	200a      	movs	r0, #10
 8002e92:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 8002e96:	f000 f913 	bl	80030c0 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002e9a:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8002e9c:	200a      	movs	r0, #10
 8002e9e:	f000 f90f 	bl	80030c0 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <Mag_Enc2_Store+0x7c>)
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f3c3 13c0 	ubfx	r3, r3, #7, #1

		tempRead = LL_GPIO_IsInputPinSet(ENC2_DATA_GPIO_PORT,ENC2_DATA_PIN) &0x01;
		tempPosition |= (tempRead)<<i;
 8002eaa:	40a3      	lsls	r3, r4
	for(i = 11; i >= 0; i--)
 8002eac:	f114 34ff 	adds.w	r4, r4, #4294967295
		tempPosition |= (tempRead)<<i;
 8002eb0:	ea45 0503 	orr.w	r5, r5, r3
	for(i = 11; i >= 0; i--)
 8002eb4:	d2ec      	bcs.n	8002e90 <Mag_Enc2_Store+0x14>
  WRITE_REG(GPIOx->BRR, PinMask);
 8002eb6:	2780      	movs	r7, #128	; 0x80
 8002eb8:	4e10      	ldr	r6, [pc, #64]	; (8002efc <Mag_Enc2_Store+0x80>)
 8002eba:	2406      	movs	r4, #6
 8002ebc:	46b8      	mov	r8, r7
	}

	for(i = 0; i < 6; i++)
	{
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8002ebe:	200a      	movs	r0, #10
 8002ec0:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 8002ec4:	f000 f8fc 	bl	80030c0 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002ec8:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8002eca:	200a      	movs	r0, #10
 8002ecc:	f000 f8f8 	bl	80030c0 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <Mag_Enc2_Store+0x7c>)
	for(i = 0; i < 6; i++)
 8002ed2:	3c01      	subs	r4, #1
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	d1f2      	bne.n	8002ebe <Mag_Enc2_Store+0x42>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002ed8:	2240      	movs	r2, #64	; 0x40
 8002eda:	619a      	str	r2, [r3, #24]
		Flags[i] |= (tempRead)<<i;
	}

	LL_GPIO_SetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	BSbuffer[s_flag].Enc2[Sub_cnt]=tempPosition;
 8002edc:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <Mag_Enc2_Store+0x84>)
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <Mag_Enc2_Store+0x88>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8002ee8:	f503 53f7 	add.w	r3, r3, #7904	; 0x1ee0
 8002eec:	3314      	adds	r3, #20
 8002eee:	4a06      	ldr	r2, [pc, #24]	; (8002f08 <Mag_Enc2_Store+0x8c>)
 8002ef0:	f822 5013 	strh.w	r5, [r2, r3, lsl #1]
 8002ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ef8:	48000800 	.word	0x48000800
 8002efc:	48000400 	.word	0x48000400
 8002f00:	20000581 	.word	0x20000581
 8002f04:	2000057c 	.word	0x2000057c
 8002f08:	200005c4 	.word	0x200005c4

08002f0c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f0c:	4b21      	ldr	r3, [pc, #132]	; (8002f94 <HAL_MspInit+0x88>)
{
 8002f0e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	661a      	str	r2, [r3, #96]	; 0x60
 8002f18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f1a:	f002 0201 	and.w	r2, r2, #1
 8002f1e:	9200      	str	r2, [sp, #0]
 8002f20:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f28:	659a      	str	r2, [r3, #88]	; 0x58
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f30:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f32:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f34:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f36:	f001 f90f 	bl	8004158 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	f06f 000b 	mvn.w	r0, #11
 8002f42:	f001 f91b 	bl	800417c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002f46:	2200      	movs	r2, #0
 8002f48:	4611      	mov	r1, r2
 8002f4a:	f06f 000a 	mvn.w	r0, #10
 8002f4e:	f001 f915 	bl	800417c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002f52:	2200      	movs	r2, #0
 8002f54:	4611      	mov	r1, r2
 8002f56:	f06f 0009 	mvn.w	r0, #9
 8002f5a:	f001 f90f 	bl	800417c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	4611      	mov	r1, r2
 8002f62:	f06f 0004 	mvn.w	r0, #4
 8002f66:	f001 f909 	bl	800417c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	f06f 0003 	mvn.w	r0, #3
 8002f72:	f001 f903 	bl	800417c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002f76:	2200      	movs	r2, #0
 8002f78:	4611      	mov	r1, r2
 8002f7a:	f06f 0001 	mvn.w	r0, #1
 8002f7e:	f001 f8fd 	bl	800417c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002f82:	2200      	movs	r2, #0
 8002f84:	4611      	mov	r1, r2
 8002f86:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8a:	f001 f8f7 	bl	800417c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f8e:	b003      	add	sp, #12
 8002f90:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f94:	40021000 	.word	0x40021000

08002f98 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002f98:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 8002f9a:	6802      	ldr	r2, [r0, #0]
 8002f9c:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <HAL_SD_MspInit+0x5c>)
 8002f9e:	429a      	cmp	r2, r3
{
 8002fa0:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 8002fa2:	d124      	bne.n	8002fee <HAL_SD_MspInit+0x56>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002fa4:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa8:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002faa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fac:	4812      	ldr	r0, [pc, #72]	; (8002ff8 <HAL_SD_MspInit+0x60>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002fae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fb2:	661a      	str	r2, [r3, #96]	; 0x60
 8002fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb6:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8002fc2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc6:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002fc8:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fca:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8002fcc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002fd2:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd4:	f001 fa8a 	bl	80044ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fd8:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fda:	eb0d 0103 	add.w	r1, sp, r3
 8002fde:	4807      	ldr	r0, [pc, #28]	; (8002ffc <HAL_SD_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fe0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe2:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002fe8:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fea:	f001 fa7f 	bl	80044ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002fee:	b007      	add	sp, #28
 8002ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40012800 	.word	0x40012800
 8002ff8:	48000800 	.word	0x48000800
 8002ffc:	48000c00 	.word	0x48000c00

08003000 <NMI_Handler>:
 8003000:	4770      	bx	lr

08003002 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003002:	e7fe      	b.n	8003002 <HardFault_Handler>

08003004 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003004:	e7fe      	b.n	8003004 <MemManage_Handler>

08003006 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003006:	e7fe      	b.n	8003006 <BusFault_Handler>

08003008 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003008:	e7fe      	b.n	8003008 <UsageFault_Handler>

0800300a <SVC_Handler>:
 800300a:	4770      	bx	lr

0800300c <DebugMon_Handler>:
 800300c:	4770      	bx	lr

0800300e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800300e:	4770      	bx	lr

08003010 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003010:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003012:	f001 f877 	bl	8004104 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003016:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800301a:	f001 b906 	b.w	800422a <HAL_SYSTICK_IRQHandler>
	...

08003020 <OTG_FS_IRQHandler>:
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  // ES HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
	HAL_PCD_IRQHandler(&hpcd);
 8003020:	4801      	ldr	r0, [pc, #4]	; (8003028 <OTG_FS_IRQHandler+0x8>)
 8003022:	f001 bc09 	b.w	8004838 <HAL_PCD_IRQHandler>
 8003026:	bf00      	nop
 8003028:	20008f68 	.word	0x20008f68

0800302c <DMA2_Channel4_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Channel4_IRQHandler(void)
{
  if((uSdHandle.SdOperation == SD_READ_MULTIPLE_BLOCK) || (uSdHandle.SdOperation == SD_READ_SINGLE_BLOCK))
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <DMA2_Channel4_IRQHandler+0x14>)
 800302e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003030:	2a01      	cmp	r2, #1
 8003032:	d001      	beq.n	8003038 <DMA2_Channel4_IRQHandler+0xc>
 8003034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003036:	b90b      	cbnz	r3, 800303c <DMA2_Channel4_IRQHandler+0x10>
  {
    BSP_SD_DMA_Rx_IRQHandler();
 8003038:	f7fd baca 	b.w	80005d0 <BSP_SD_DMA_Rx_IRQHandler>
  }
  else
  {
    BSP_SD_DMA_Tx_IRQHandler();
 800303c:	f7fd bac2 	b.w	80005c4 <BSP_SD_DMA_Tx_IRQHandler>
 8003040:	200085f8 	.word	0x200085f8

08003044 <SDMMC1_IRQHandler>:
  * @param  None
  * @retval None
  */
void SDMMC1_IRQHandler(void)
{
  BSP_SD_IRQHandler();
 8003044:	f7fd bab8 	b.w	80005b8 <BSP_SD_IRQHandler>

08003048 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003048:	490f      	ldr	r1, [pc, #60]	; (8003088 <SystemInit+0x40>)
 800304a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800304e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <SystemInit+0x44>)
 8003058:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800305a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800305c:	f042 0201 	orr.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003062:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800306a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800306e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8003070:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003074:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800307c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800307e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003080:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003084:	608b      	str	r3, [r1, #8]
 8003086:	4770      	bx	lr
 8003088:	e000ed00 	.word	0xe000ed00
 800308c:	40021000 	.word	0x40021000

08003090 <LL_APB1_GRP1_EnableClock>:
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <LL_APB1_GRP1_EnableClock+0x18>)
 8003092:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003094:	4302      	orrs	r2, r0
 8003096:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 800309a:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800309c:	4018      	ands	r0, r3
 800309e:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80030a0:	9b01      	ldr	r3, [sp, #4]
}
 80030a2:	b002      	add	sp, #8
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000

080030ac <LL_RCC_SetUSBClockSource.constprop.3>:
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, USBxSource);
 80030ac:	4a03      	ldr	r2, [pc, #12]	; (80030bc <LL_RCC_SetUSBClockSource.constprop.3+0x10>)
 80030ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80030b2:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80030b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80030ba:	4770      	bx	lr
 80030bc:	40021000 	.word	0x40021000

080030c0 <delay_us>:
extern uint8_t USB_Mode;
extern uint8_t Enter_Into_DFU,MSC_continue,VCP_continue;

void delay_us(uint32_t us){
    uint32_t i,k;
    for(k=0;k<us;k++)
 80030c0:	2300      	movs	r3, #0
 80030c2:	4283      	cmp	r3, r0
 80030c4:	d100      	bne.n	80030c8 <delay_us+0x8>
    {
    	for(i=0;i<11;i++)
         __NOP();  // Timed at 48 MHz clock
    }
}
 80030c6:	4770      	bx	lr
 80030c8:	220b      	movs	r2, #11
  __ASM volatile ("nop");
 80030ca:	bf00      	nop
    	for(i=0;i<11;i++)
 80030cc:	3a01      	subs	r2, #1
 80030ce:	d1fc      	bne.n	80030ca <delay_us+0xa>
    for(k=0;k<us;k++)
 80030d0:	3301      	adds	r3, #1
 80030d2:	e7f6      	b.n	80030c2 <delay_us+0x2>

080030d4 <Start_LPTIMCounter2>:
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 80030d4:	4a08      	ldr	r2, [pc, #32]	; (80030f8 <Start_LPTIMCounter2+0x24>)
 80030d6:	6913      	ldr	r3, [r2, #16]
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	6113      	str	r3, [r2, #16]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 80030de:	6993      	ldr	r3, [r2, #24]
 80030e0:	0c1b      	lsrs	r3, r3, #16
 80030e2:	041b      	lsls	r3, r3, #16
 80030e4:	4318      	orrs	r0, r3
 80030e6:	6190      	str	r0, [r2, #24]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 80030e8:	6913      	ldr	r3, [r2, #16]
 80030ea:	f023 0306 	bic.w	r3, r3, #6
 80030ee:	f043 0304 	orr.w	r3, r3, #4
 80030f2:	6113      	str	r3, [r2, #16]
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40009400 	.word	0x40009400

080030fc <LSE_ON>:
	/* Following 2lines are necessary before LSE
	RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN; // PWR clock is necessary for LSE
	PWR->CR1 |= PWR_CR1_DBP;  // Enable Backup access
	*/

	RCC->BDCR |= RCC_BDCR_LSEON;  // LSE ON
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <LSE_ON+0x18>)
 80030fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	while(((RCC->BDCR) & RCC_BDCR_LSERDY) != (RCC_BDCR_LSERDY)); // wait for LSE to get ready
 800310a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800310e:	0792      	lsls	r2, r2, #30
 8003110:	d5fb      	bpl.n	800310a <LSE_ON+0xe>

}
 8003112:	4770      	bx	lr
 8003114:	40021000 	.word	0x40021000

08003118 <EnterStop>:
	{
	}
}

void EnterStop(void) // Enter Stop Mode
{
 8003118:	b508      	push	{r3, lr}
	HAL_SuspendTick();  // Before entering STOP mode, SYS_tick needs to disable
 800311a:	f001 f80d 	bl	8004138 <HAL_SuspendTick>
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 800311e:	4a07      	ldr	r2, [pc, #28]	; (800313c <EnterStop+0x24>)
 8003120:	6813      	ldr	r3, [r2, #0]
 8003122:	f023 0307 	bic.w	r3, r3, #7
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	6013      	str	r3, [r2, #0]
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800312c:	4a04      	ldr	r2, [pc, #16]	; (8003140 <EnterStop+0x28>)
 800312e:	6913      	ldr	r3, [r2, #16]
 8003130:	f043 0304 	orr.w	r3, r3, #4
 8003134:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 8003136:	bf30      	wfi
 8003138:	bd08      	pop	{r3, pc}
 800313a:	bf00      	nop
 800313c:	40007000 	.word	0x40007000
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <SystemClock_Config_MSI_80MHz>:
*            PLL_R                          = 4
*            Flash Latency(WS)              = 4
*/

void SystemClock_Config_MSI_80MHz(void)
{
 8003144:	b510      	push	{r4, lr}
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 8003146:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
{
 800314a:	b092      	sub	sp, #72	; 0x48
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 800314c:	f7ff ffa0 	bl	8003090 <LL_APB1_GRP1_EnableClock>
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003150:	4b31      	ldr	r3, [pc, #196]	; (8003218 <SystemClock_Config_MSI_80MHz+0xd4>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003158:	601a      	str	r2, [r3, #0]
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003160:	605a      	str	r2, [r3, #4]
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 8003162:	685a      	ldr	r2, [r3, #4]
	  LL_PWR_EnableBkUpAccess();                              // Enable Backup access (needed for LSE clock)
	  LL_PWR_EnableVddUSB();                                  // Enable VDDUSB supply for USB
	  while(!LL_PWR_IsEnabledVddUSB());                       // Wait for VDDUSB supply to activate
 8003164:	0552      	lsls	r2, r2, #21
 8003166:	d5fc      	bpl.n	8003162 <SystemClock_Config_MSI_80MHz+0x1e>

	  /* Enable MSI Oscillator and activate PLL with MSI as source */
	  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8003168:	2310      	movs	r3, #16
 800316a:	9301      	str	r3, [sp, #4]
	  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 800316c:	2301      	movs	r3, #1
 800316e:	9307      	str	r3, [sp, #28]
	//  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
	  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 8003170:	930c      	str	r3, [sp, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLM            = 6;
 8003172:	2306      	movs	r3, #6
 8003174:	930d      	str	r3, [sp, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLN            = 40;
 8003176:	2328      	movs	r3, #40	; 0x28
 8003178:	930e      	str	r3, [sp, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 800317a:	2307      	movs	r3, #7
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
	  RCC_OscInitStruct.PLL.PLLR            = 4;

	  HAL_RCC_OscConfig(&RCC_OscInitStruct);

	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800317c:	4c27      	ldr	r4, [pc, #156]	; (800321c <SystemClock_Config_MSI_80MHz+0xd8>)
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 800317e:	930f      	str	r3, [sp, #60]	; 0x3c
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8003180:	22b0      	movs	r2, #176	; 0xb0
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8003182:	2304      	movs	r3, #4
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8003184:	9209      	str	r2, [sp, #36]	; 0x24
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003186:	eb0d 0003 	add.w	r0, sp, r3
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800318a:	2202      	movs	r2, #2
 800318c:	920b      	str	r2, [sp, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 800318e:	9310      	str	r3, [sp, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLR            = 4;
 8003190:	9311      	str	r3, [sp, #68]	; 0x44
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003192:	f002 f8a5 	bl	80052e0 <HAL_RCC_OscConfig>
	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8003196:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800319a:	f023 0320 	bic.w	r3, r3, #32
 800319e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	  CLEAR_BIT(RCC->CIER, (RCC_IT_LSECSS));
 80031a2:	69a3      	ldr	r3, [r4, #24]
 80031a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031a8:	61a3      	str	r3, [r4, #24]

	  LSE_ON();                                                     //Start LSE for RTC and LPTIM timer
 80031aa:	f7ff ffa7 	bl	80030fc <LSE_ON>
	  HAL_RCCEx_EnableMSIPLLMode();
 80031ae:	f002 fb0b 	bl	80057c8 <HAL_RCCEx_EnableMSIPLLMode>


	  LL_RCC_SetSDMMCClockSource(LL_RCC_SDMMC1_CLKSOURCE_MSI);
 80031b2:	f7ff ff7b 	bl	80030ac <LL_RCC_SetUSBClockSource.constprop.3>
	  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_MSI);
 80031b6:	f7ff ff79 	bl	80030ac <LL_RCC_SetUSBClockSource.constprop.3>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80031ba:	68a3      	ldr	r3, [r4, #8]
 80031bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031c0:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80031c2:	68a3      	ldr	r3, [r4, #8]
 80031c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80031c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031cc:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80031ce:	68a3      	ldr	r3, [r4, #8]
 80031d0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80031d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031d8:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80031da:	68a3      	ldr	r3, [r4, #8]
 80031dc:	f023 0303 	bic.w	r3, r3, #3
 80031e0:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_FLASH_LATENCY_4
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80031e2:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <SystemClock_Config_MSI_80MHz+0xdc>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	f022 0207 	bic.w	r2, r2, #7
 80031ea:	f042 0204 	orr.w	r2, r2, #4
 80031ee:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_3
  *         @arg @ref LL_FLASH_LATENCY_4
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	f002 0207 	and.w	r2, r2, #7
	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2); //1
	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);

	  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
	  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4);
 80031f6:	2a04      	cmp	r2, #4
 80031f8:	d1fa      	bne.n	80031f0 <SystemClock_Config_MSI_80MHz+0xac>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80031fa:	68a3      	ldr	r3, [r4, #8]
 80031fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003200:	60a3      	str	r3, [r4, #8]

	  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_MSI);  // MSI clock is set as default clock after wake up from Stop
	  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();               // Disable USB clock to save power
 8003202:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003204:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003208:	64e3      	str	r3, [r4, #76]	; 0x4c
 800320a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800320c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	9b00      	ldr	r3, [sp, #0]

		}
 8003214:	b012      	add	sp, #72	; 0x48
 8003216:	bd10      	pop	{r4, pc}
 8003218:	40007000 	.word	0x40007000
 800321c:	40021000 	.word	0x40021000
 8003220:	40022000 	.word	0x40022000

08003224 <Configure_LPTIM2_Int>:
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003224:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <Configure_LPTIM2_Int+0x40>)
 8003226:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800322a:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 800322e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003232:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003234:	f042 0220 	orr.w	r2, r2, #32
 8003238:	65da      	str	r2, [r3, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c

		}

//Configure LPTIM2 to generate the XX Hz interrupt
void Configure_LPTIM2_Int(void)
{
 800323c:	b082      	sub	sp, #8
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003244:	9b01      	ldr	r3, [sp, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <Configure_LPTIM2_Int+0x44>)
 8003248:	2204      	movs	r2, #4
 800324a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 800324e:	4b07      	ldr	r3, [pc, #28]	; (800326c <Configure_LPTIM2_Int+0x48>)
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	f022 0202 	bic.w	r2, r2, #2
 8003256:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	f022 0201 	bic.w	r2, r2, #1
 800325e:	611a      	str	r2, [r3, #16]
	LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);     // Enable LPTIM2 Clock
	NVIC_DisableIRQ(LPTIM2_IRQn);
	LL_LPTIM_DisableIT_ARRM(LPTIM2);                           // Enable auto reload match interrupt (ARRMIE).
	LL_LPTIM_Disable(LPTIM2);                                // LPTIM2 disable if needed

}
 8003260:	b002      	add	sp, #8
 8003262:	4770      	bx	lr
 8003264:	40021000 	.word	0x40021000
 8003268:	e000e100 	.word	0xe000e100
 800326c:	40009400 	.word	0x40009400

08003270 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8003270:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003272:	4c1d      	ldr	r4, [pc, #116]	; (80032e8 <HAL_PCD_MspInit+0x78>)
 8003274:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800327c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 800327e:	b088      	sub	sp, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	9301      	str	r3, [sp, #4]
 8003286:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8003288:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800328c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328e:	2302      	movs	r3, #2
 8003290:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003294:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003296:	260a      	movs	r6, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8003298:	a903      	add	r1, sp, #12
 800329a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80032a2:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 80032a4:	f001 f922 	bl	80044ec <HAL_GPIO_Init>
  
  /* Configure VBUS Pin */

  
  /* Configure ID pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ac:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032ae:	2312      	movs	r3, #18
 80032b0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032b4:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032ba:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80032bc:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032be:	f001 f915 	bl	80044ec <HAL_GPIO_Init>
  
  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80032c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80032c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032c8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80032ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80032cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d0:	9302      	str	r3, [sp, #8]
  
  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 80032d2:	462a      	mov	r2, r5
 80032d4:	2107      	movs	r1, #7
 80032d6:	2043      	movs	r0, #67	; 0x43
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80032d8:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 80032da:	f000 ff4f 	bl	800417c <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80032de:	2043      	movs	r0, #67	; 0x43
 80032e0:	f000 ff80 	bl	80041e4 <HAL_NVIC_EnableIRQ>
    
}
 80032e4:	b008      	add	sp, #32
 80032e6:	bd70      	pop	{r4, r5, r6, pc}
 80032e8:	40021000 	.word	0x40021000

080032ec <HAL_PCD_MspDeInit>:
  * @retval None
  */
void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)
{  
  /* Disable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 80032ec:	4b04      	ldr	r3, [pc, #16]	; (8003300 <HAL_PCD_MspDeInit+0x14>)
 80032ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032f4:	64da      	str	r2, [r3, #76]	; 0x4c
  __HAL_RCC_SYSCFG_CLK_DISABLE(); 
 80032f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	661a      	str	r2, [r3, #96]	; 0x60
 80032fe:	4770      	bx	lr
 8003300:	40021000 	.word	0x40021000

08003304 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8003304:	f500 7162 	add.w	r1, r0, #904	; 0x388
 8003308:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800330c:	f005 b805 	b.w	800831a <USBD_LL_SetupStage>

08003310 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003310:	231c      	movs	r3, #28
 8003312:	fb03 0301 	mla	r3, r3, r1, r0
 8003316:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800331a:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 800331e:	f005 b829 	b.w	8008374 <USBD_LL_DataOutStage>

08003322 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003322:	231c      	movs	r3, #28
 8003324:	fb03 0301 	mla	r3, r3, r1, r0
 8003328:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800332c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800332e:	f005 b853 	b.w	80083d8 <USBD_LL_DataInStage>

08003332 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 8003332:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003336:	f005 b8cf 	b.w	80084d8 <USBD_LL_SOF>

0800333a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 800333a:	b510      	push	{r4, lr}
 800333c:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 800333e:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003342:	f005 f898 	bl	8008476 <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8003346:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 800334a:	2101      	movs	r1, #1
}
 800334c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8003350:	f005 b8b0 	b.w	80084b4 <USBD_LL_SetSpeed>

08003354 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
  USBD_LL_Suspend(hpcd->pData);
 8003354:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003358:	f005 b8af 	b.w	80084ba <USBD_LL_Suspend>

0800335c <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 800335c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003360:	f005 b8b4 	b.w	80084cc <USBD_LL_Resume>

08003364 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8003364:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003368:	f005 b8c4 	b.w	80084f4 <USBD_LL_IsoOUTIncomplete>

0800336c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 800336c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003370:	f005 b8be 	b.w	80084f0 <USBD_LL_IsoINIncomplete>

08003374 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 8003374:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003378:	f005 b8be 	b.w	80084f8 <USBD_LL_DevConnected>

0800337c <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 800337c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003380:	f005 b8bc 	b.w	80084fc <USBD_LL_DevDisconnected>

08003384 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 8003386:	4c15      	ldr	r4, [pc, #84]	; (80033dc <USBD_LL_Init+0x58>)
  hpcd.Init.dev_endpoints = 5;
  hpcd.Init.use_dedicated_ep1 = 0;
 8003388:	2500      	movs	r5, #0
  hpcd.Init.dev_endpoints = 5;
 800338a:	2305      	movs	r3, #5
 800338c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hpcd.Init.ep0_mps = 0x40;
  hpcd.Init.dma_enable = 0;
  hpcd.Init.low_power_enable = 0;
  hpcd.Init.lpm_enable = 0;
  hpcd.Init.battery_charging_enable = 0;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003390:	2601      	movs	r6, #1
  hpcd.Init.Sof_enable = 0;
  hpcd.Init.speed = PCD_SPEED_FULL;
  hpcd.Init.vbus_sensing_enable = 0;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8003392:	f8c4 03c8 	str.w	r0, [r4, #968]	; 0x3c8
  hpcd.Init.ep0_mps = 0x40;
 8003396:	2740      	movs	r7, #64	; 0x40
  pdev->pData = &hpcd;
 8003398:	f8c0 4220 	str.w	r4, [r0, #544]	; 0x220
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 800339c:	4620      	mov	r0, r4
  hpcd.Init.dev_endpoints = 5;
 800339e:	e884 000c 	stmia.w	r4, {r2, r3}
  hpcd.Init.use_dedicated_ep1 = 0;
 80033a2:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;
 80033a4:	6167      	str	r7, [r4, #20]
  hpcd.Init.dma_enable = 0;
 80033a6:	6125      	str	r5, [r4, #16]
  hpcd.Init.low_power_enable = 0;
 80033a8:	6225      	str	r5, [r4, #32]
  hpcd.Init.lpm_enable = 0;
 80033aa:	6265      	str	r5, [r4, #36]	; 0x24
  hpcd.Init.battery_charging_enable = 0;
 80033ac:	62a5      	str	r5, [r4, #40]	; 0x28
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 80033ae:	61a6      	str	r6, [r4, #24]
  hpcd.Init.Sof_enable = 0;
 80033b0:	61e5      	str	r5, [r4, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 80033b2:	60e6      	str	r6, [r4, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 80033b4:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_PCD_Init(&hpcd);
 80033b6:	f001 f97b 	bl	80046b0 <HAL_PCD_Init>
  
  /* Configure EPs FIFOs */
  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 80033ba:	2180      	movs	r1, #128	; 0x80
 80033bc:	4620      	mov	r0, r4
 80033be:	f001 fe8c 	bl	80050da <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 80033c2:	463a      	mov	r2, r7
 80033c4:	4629      	mov	r1, r5
 80033c6:	4620      	mov	r0, r4
 80033c8:	f001 fe66 	bl	8005098 <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x80);
 80033cc:	2280      	movs	r2, #128	; 0x80
 80033ce:	4631      	mov	r1, r6
 80033d0:	4620      	mov	r0, r4
 80033d2:	f001 fe61 	bl	8005098 <HAL_PCDEx_SetTxFiFo>

  return USBD_OK;
}
 80033d6:	4628      	mov	r0, r5
 80033d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033da:	bf00      	nop
 80033dc:	20008f68 	.word	0x20008f68

080033e0 <USBD_LL_DeInit>:
  * @brief  De-Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 80033e0:	b508      	push	{r3, lr}
  HAL_PCD_DeInit(pdev->pData);
 80033e2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80033e6:	f001 fa15 	bl	8004814 <HAL_PCD_DeInit>
  return USBD_OK;
}
 80033ea:	2000      	movs	r0, #0
 80033ec:	bd08      	pop	{r3, pc}

080033ee <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80033ee:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 80033f0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80033f4:	f001 f9e1 	bl	80047ba <HAL_PCD_Start>
  return USBD_OK;
}
 80033f8:	2000      	movs	r0, #0
 80033fa:	bd08      	pop	{r3, pc}

080033fc <USBD_LL_Stop>:
  * @brief  Stops the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80033fc:	b508      	push	{r3, lr}
  HAL_PCD_Stop(pdev->pData);
 80033fe:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003402:	f001 f9ef 	bl	80047e4 <HAL_PCD_Stop>
  return USBD_OK;
}
 8003406:	2000      	movs	r0, #0
 8003408:	bd08      	pop	{r3, pc}

0800340a <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 800340a:	b510      	push	{r4, lr}
 800340c:	461c      	mov	r4, r3
  HAL_PCD_EP_Open(pdev->pData,
 800340e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003412:	4613      	mov	r3, r2
 8003414:	4622      	mov	r2, r4
 8003416:	f001 fd33 	bl	8004e80 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 800341a:	2000      	movs	r0, #0
 800341c:	bd10      	pop	{r4, pc}

0800341e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800341e:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003420:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003424:	f001 fd51 	bl	8004eca <HAL_PCD_EP_Close>
  return USBD_OK;
}
 8003428:	2000      	movs	r0, #0
 800342a:	bd08      	pop	{r3, pc}

0800342c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800342c:	b508      	push	{r3, lr}
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800342e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003432:	f001 fe17 	bl	8005064 <HAL_PCD_EP_Flush>
  return USBD_OK;
}
 8003436:	2000      	movs	r0, #0
 8003438:	bd08      	pop	{r3, pc}

0800343a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800343a:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800343c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003440:	f001 fdbf 	bl	8004fc2 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8003444:	2000      	movs	r0, #0
 8003446:	bd08      	pop	{r3, pc}

08003448 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003448:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800344a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800344e:	f001 fde4 	bl	800501a <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8003452:	2000      	movs	r0, #0
 8003454:	bd08      	pop	{r3, pc}

08003456 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003456:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800345a:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 800345e:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003462:	bf1b      	ittet	ne
 8003464:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8003468:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800346c:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003470:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003474:	bf08      	it	eq
 8003476:	f891 01e2 	ldrbeq.w	r0, [r1, #482]	; 0x1e2
  }
}
 800347a:	4770      	bx	lr

0800347c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800347c:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800347e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003482:	f001 fce9 	bl	8004e58 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8003486:	2000      	movs	r0, #0
 8003488:	bd08      	pop	{r3, pc}

0800348a <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 800348a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800348c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003490:	f001 fd70 	bl	8004f74 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8003494:	2000      	movs	r0, #0
 8003496:	bd08      	pop	{r3, pc}

08003498 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8003498:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800349a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800349e:	f001 fd37 	bl	8004f10 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 80034a2:	2000      	movs	r0, #0
 80034a4:	bd08      	pop	{r3, pc}

080034a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80034a6:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 80034a8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80034ac:	f001 fd5a 	bl	8004f64 <HAL_PCD_EP_GetRxCount>
}
 80034b0:	bd08      	pop	{r3, pc}
	...

080034b4 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc_VCP);
 80034b4:	2312      	movs	r3, #18
 80034b6:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc_VCP;
}
 80034b8:	4800      	ldr	r0, [pc, #0]	; (80034bc <USBD_VCP_DeviceDescriptor+0x8>)
 80034ba:	4770      	bx	lr
 80034bc:	20000038 	.word	0x20000038

080034c0 <USBD_MSC_DeviceDescriptor>:

uint8_t *USBD_MSC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 80034c0:	2312      	movs	r3, #18
 80034c2:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc;
}
 80034c4:	4800      	ldr	r0, [pc, #0]	; (80034c8 <USBD_MSC_DeviceDescriptor+0x8>)
 80034c6:	4770      	bx	lr
 80034c8:	20000024 	.word	0x20000024

080034cc <USBD_MSC_LangIDStrDescriptor>:
  return (uint8_t*)USBD_LangIDDesc;
}

uint8_t *USBD_MSC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 80034cc:	2304      	movs	r3, #4
 80034ce:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 80034d0:	4800      	ldr	r0, [pc, #0]	; (80034d4 <USBD_MSC_LangIDStrDescriptor+0x8>)
 80034d2:	4770      	bx	lr
 80034d4:	2000004c 	.word	0x2000004c

080034d8 <IntToUnicode>:
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80034d8:	2300      	movs	r3, #0
{
 80034da:	b530      	push	{r4, r5, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80034dc:	461d      	mov	r5, r3
  for( idx = 0 ; idx < len ; idx ++)
 80034de:	b2dc      	uxtb	r4, r3
 80034e0:	42a2      	cmp	r2, r4
 80034e2:	d800      	bhi.n	80034e6 <IntToUnicode+0xe>
  }
}
 80034e4:	bd30      	pop	{r4, r5, pc}
    if( ((value >> 28)) < 0xA )
 80034e6:	0f04      	lsrs	r4, r0, #28
 80034e8:	2c09      	cmp	r4, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 80034ea:	bf94      	ite	ls
 80034ec:	3430      	addls	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80034ee:	3437      	addhi	r4, #55	; 0x37
 80034f0:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 80034f4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 80034f8:	0100      	lsls	r0, r0, #4
    pbuf[ 2* idx + 1] = 0;
 80034fa:	7065      	strb	r5, [r4, #1]
 80034fc:	3301      	adds	r3, #1
 80034fe:	e7ee      	b.n	80034de <IntToUnicode+0x6>

08003500 <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003500:	231a      	movs	r3, #26
{
 8003502:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003504:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)VCP_DEVICE_ID1;
 8003506:	4b09      	ldr	r3, [pc, #36]	; (800352c <USBD_VCP_SerialStrDescriptor+0x2c>)
 8003508:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)VCP_DEVICE_ID3;
 800350a:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 800350c:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800350e:	18c0      	adds	r0, r0, r3
 8003510:	d00a      	beq.n	8003528 <USBD_VCP_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)VCP_DEVICE_ID2;
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <USBD_VCP_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8003514:	4907      	ldr	r1, [pc, #28]	; (8003534 <USBD_VCP_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)VCP_DEVICE_ID2;
 8003516:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8003518:	2208      	movs	r2, #8
 800351a:	f7ff ffdd 	bl	80034d8 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800351e:	2204      	movs	r2, #4
 8003520:	4905      	ldr	r1, [pc, #20]	; (8003538 <USBD_VCP_SerialStrDescriptor+0x38>)
 8003522:	4620      	mov	r0, r4
 8003524:	f7ff ffd8 	bl	80034d8 <IntToUnicode>
}
 8003528:	4804      	ldr	r0, [pc, #16]	; (800353c <USBD_VCP_SerialStrDescriptor+0x3c>)
 800352a:	bd10      	pop	{r4, pc}
 800352c:	1fff7a30 	.word	0x1fff7a30
 8003530:	1fff7a34 	.word	0x1fff7a34
 8003534:	20000052 	.word	0x20000052
 8003538:	20000062 	.word	0x20000062
 800353c:	20000050 	.word	0x20000050

08003540 <USBD_MSC_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003540:	231a      	movs	r3, #26
{
 8003542:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003544:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <USBD_MSC_SerialStrDescriptor+0x2c>)
 8003548:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 800354a:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 800354c:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800354e:	18c0      	adds	r0, r0, r3
 8003550:	d00a      	beq.n	8003568 <USBD_MSC_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8003552:	4b07      	ldr	r3, [pc, #28]	; (8003570 <USBD_MSC_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8003554:	4907      	ldr	r1, [pc, #28]	; (8003574 <USBD_MSC_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8003556:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8003558:	2208      	movs	r2, #8
 800355a:	f7ff ffbd 	bl	80034d8 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800355e:	2204      	movs	r2, #4
 8003560:	4905      	ldr	r1, [pc, #20]	; (8003578 <USBD_MSC_SerialStrDescriptor+0x38>)
 8003562:	4620      	mov	r0, r4
 8003564:	f7ff ffb8 	bl	80034d8 <IntToUnicode>
}
 8003568:	4804      	ldr	r0, [pc, #16]	; (800357c <USBD_MSC_SerialStrDescriptor+0x3c>)
 800356a:	bd10      	pop	{r4, pc}
 800356c:	1fff7a10 	.word	0x1fff7a10
 8003570:	1fff7a14 	.word	0x1fff7a14
 8003574:	20000052 	.word	0x20000052
 8003578:	20000062 	.word	0x20000062
 800357c:	20000050 	.word	0x20000050

08003580 <USBD_VCP_ProductStrDescriptor>:
{
 8003580:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING_VCP, USBD_StrDesc, length);
 8003582:	4c04      	ldr	r4, [pc, #16]	; (8003594 <USBD_VCP_ProductStrDescriptor+0x14>)
 8003584:	4804      	ldr	r0, [pc, #16]	; (8003598 <USBD_VCP_ProductStrDescriptor+0x18>)
 8003586:	460a      	mov	r2, r1
 8003588:	4621      	mov	r1, r4
 800358a:	f005 f961 	bl	8008850 <USBD_GetString>
}
 800358e:	4620      	mov	r0, r4
 8003590:	bd10      	pop	{r4, pc}
 8003592:	bf00      	nop
 8003594:	20009334 	.word	0x20009334
 8003598:	0800b615 	.word	0x0800b615

0800359c <USBD_MSC_ProductStrDescriptor>:
{
 800359c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800359e:	4c04      	ldr	r4, [pc, #16]	; (80035b0 <USBD_MSC_ProductStrDescriptor+0x14>)
 80035a0:	4804      	ldr	r0, [pc, #16]	; (80035b4 <USBD_MSC_ProductStrDescriptor+0x18>)
 80035a2:	460a      	mov	r2, r1
 80035a4:	4621      	mov	r1, r4
 80035a6:	f005 f953 	bl	8008850 <USBD_GetString>
}
 80035aa:	4620      	mov	r0, r4
 80035ac:	bd10      	pop	{r4, pc}
 80035ae:	bf00      	nop
 80035b0:	20009334 	.word	0x20009334
 80035b4:	0800b5e4 	.word	0x0800b5e4

080035b8 <USBD_MSC_ManufacturerStrDescriptor>:
{
 80035b8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80035ba:	4c04      	ldr	r4, [pc, #16]	; (80035cc <USBD_MSC_ManufacturerStrDescriptor+0x14>)
 80035bc:	4804      	ldr	r0, [pc, #16]	; (80035d0 <USBD_MSC_ManufacturerStrDescriptor+0x18>)
 80035be:	460a      	mov	r2, r1
 80035c0:	4621      	mov	r1, r4
 80035c2:	f005 f945 	bl	8008850 <USBD_GetString>
}
 80035c6:	4620      	mov	r0, r4
 80035c8:	bd10      	pop	{r4, pc}
 80035ca:	bf00      	nop
 80035cc:	20009334 	.word	0x20009334
 80035d0:	0800b5d1 	.word	0x0800b5d1

080035d4 <USBD_VCP_ConfigStrDescriptor>:
{
 80035d4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING_VCP, USBD_StrDesc, length);
 80035d6:	4c04      	ldr	r4, [pc, #16]	; (80035e8 <USBD_VCP_ConfigStrDescriptor+0x14>)
 80035d8:	4804      	ldr	r0, [pc, #16]	; (80035ec <USBD_VCP_ConfigStrDescriptor+0x18>)
 80035da:	460a      	mov	r2, r1
 80035dc:	4621      	mov	r1, r4
 80035de:	f005 f937 	bl	8008850 <USBD_GetString>
}
 80035e2:	4620      	mov	r0, r4
 80035e4:	bd10      	pop	{r4, pc}
 80035e6:	bf00      	nop
 80035e8:	20009334 	.word	0x20009334
 80035ec:	0800b5fc 	.word	0x0800b5fc

080035f0 <USBD_MSC_ConfigStrDescriptor>:
{
 80035f0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 80035f2:	4c04      	ldr	r4, [pc, #16]	; (8003604 <USBD_MSC_ConfigStrDescriptor+0x14>)
 80035f4:	4804      	ldr	r0, [pc, #16]	; (8003608 <USBD_MSC_ConfigStrDescriptor+0x18>)
 80035f6:	460a      	mov	r2, r1
 80035f8:	4621      	mov	r1, r4
 80035fa:	f005 f929 	bl	8008850 <USBD_GetString>
}
 80035fe:	4620      	mov	r0, r4
 8003600:	bd10      	pop	{r4, pc}
 8003602:	bf00      	nop
 8003604:	20009334 	.word	0x20009334
 8003608:	0800b5b8 	.word	0x0800b5b8

0800360c <USBD_VCP_InterfaceStrDescriptor>:
{
 800360c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING_VCP, USBD_StrDesc, length);
 800360e:	4c04      	ldr	r4, [pc, #16]	; (8003620 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 8003610:	4804      	ldr	r0, [pc, #16]	; (8003624 <USBD_VCP_InterfaceStrDescriptor+0x18>)
 8003612:	460a      	mov	r2, r1
 8003614:	4621      	mov	r1, r4
 8003616:	f005 f91b 	bl	8008850 <USBD_GetString>
}
 800361a:	4620      	mov	r0, r4
 800361c:	bd10      	pop	{r4, pc}
 800361e:	bf00      	nop
 8003620:	20009334 	.word	0x20009334
 8003624:	0800b607 	.word	0x0800b607

08003628 <USBD_MSC_InterfaceStrDescriptor>:
{
 8003628:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800362a:	4c04      	ldr	r4, [pc, #16]	; (800363c <USBD_MSC_InterfaceStrDescriptor+0x14>)
 800362c:	4804      	ldr	r0, [pc, #16]	; (8003640 <USBD_MSC_InterfaceStrDescriptor+0x18>)
 800362e:	460a      	mov	r2, r1
 8003630:	4621      	mov	r1, r4
 8003632:	f005 f90d 	bl	8008850 <USBD_GetString>
}
 8003636:	4620      	mov	r0, r4
 8003638:	bd10      	pop	{r4, pc}
 800363a:	bf00      	nop
 800363c:	20009334 	.word	0x20009334
 8003640:	0800b5c3 	.word	0x0800b5c3

08003644 <USBD_VCP_LangIDStrDescriptor>:
 8003644:	2304      	movs	r3, #4
 8003646:	800b      	strh	r3, [r1, #0]
 8003648:	4800      	ldr	r0, [pc, #0]	; (800364c <USBD_VCP_LangIDStrDescriptor+0x8>)
 800364a:	4770      	bx	lr
 800364c:	2000004c 	.word	0x2000004c

08003650 <USBD_VCP_ManufacturerStrDescriptor>:
 8003650:	b510      	push	{r4, lr}
 8003652:	4c04      	ldr	r4, [pc, #16]	; (8003664 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8003654:	4804      	ldr	r0, [pc, #16]	; (8003668 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
 8003656:	460a      	mov	r2, r1
 8003658:	4621      	mov	r1, r4
 800365a:	f005 f8f9 	bl	8008850 <USBD_GetString>
 800365e:	4620      	mov	r0, r4
 8003660:	bd10      	pop	{r4, pc}
 8003662:	bf00      	nop
 8003664:	20009334 	.word	0x20009334
 8003668:	0800b5d1 	.word	0x0800b5d1

0800366c <STORAGE_IsWriteProtected>:
  * @retval Status (0: write enabled / -1: otherwise)
  */
int8_t STORAGE_IsWriteProtected(uint8_t lun)
{
  return 0;
}
 800366c:	2000      	movs	r0, #0
 800366e:	4770      	bx	lr

08003670 <STORAGE_GetMaxLun>:
  * @retval Lun(s) number
  */
int8_t STORAGE_GetMaxLun(void)
{
  return(STORAGE_LUN_NBR - 1);
}
 8003670:	2000      	movs	r0, #0
 8003672:	4770      	bx	lr

08003674 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003674:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

  if(pdev->pClassData != NULL)
 8003678:	b11b      	cbz	r3, 8003682 <USBD_CDC_DataIn+0xe>
  {

    hcdc->TxState = 0;
 800367a:	2000      	movs	r0, #0
 800367c:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8003680:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8003682:	2002      	movs	r0, #2
  }
}
 8003684:	4770      	bx	lr

08003686 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003686:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{
 800368a:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800368c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003690:	b15b      	cbz	r3, 80036aa <USBD_CDC_EP0_RxReady+0x24>
 8003692:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003696:	28ff      	cmp	r0, #255	; 0xff
 8003698:	d007      	beq.n	80036aa <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80036a0:	4621      	mov	r1, r4
 80036a2:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF;
 80036a4:	23ff      	movs	r3, #255	; 0xff
 80036a6:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 80036aa:	2000      	movs	r0, #0
 80036ac:	bd10      	pop	{r4, pc}
	...

080036b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80036b0:	2343      	movs	r3, #67	; 0x43
 80036b2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80036b4:	4800      	ldr	r0, [pc, #0]	; (80036b8 <USBD_CDC_GetFSCfgDesc+0x8>)
 80036b6:	4770      	bx	lr
 80036b8:	200000ec 	.word	0x200000ec

080036bc <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80036bc:	2343      	movs	r3, #67	; 0x43
 80036be:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80036c0:	4800      	ldr	r0, [pc, #0]	; (80036c4 <USBD_CDC_GetHSCfgDesc+0x8>)
 80036c2:	4770      	bx	lr
 80036c4:	20000130 	.word	0x20000130

080036c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80036c8:	2343      	movs	r3, #67	; 0x43
 80036ca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80036cc:	4800      	ldr	r0, [pc, #0]	; (80036d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80036ce:	4770      	bx	lr
 80036d0:	20000180 	.word	0x20000180

080036d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80036d4:	230a      	movs	r3, #10
 80036d6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80036d8:	4800      	ldr	r0, [pc, #0]	; (80036dc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80036da:	4770      	bx	lr
 80036dc:	20000174 	.word	0x20000174

080036e0 <STORAGE_Init>:
{
 80036e0:	b508      	push	{r3, lr}
  BSP_SD_Init();
 80036e2:	f7fd f811 	bl	8000708 <BSP_SD_Init>
}
 80036e6:	2000      	movs	r0, #0
 80036e8:	bd08      	pop	{r3, pc}

080036ea <STORAGE_GetCapacity>:
{
 80036ea:	b530      	push	{r4, r5, lr}
 80036ec:	b097      	sub	sp, #92	; 0x5c
 80036ee:	460d      	mov	r5, r1
 80036f0:	4614      	mov	r4, r2
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 80036f2:	f7fc ff4d 	bl	8000590 <BSP_SD_IsDetected>
 80036f6:	b178      	cbz	r0, 8003718 <STORAGE_GetCapacity+0x2e>
    BSP_SD_GetCardInfo(&info);
 80036f8:	4668      	mov	r0, sp
 80036fa:	f7fc ff75 	bl	80005e8 <BSP_SD_GetCardInfo>
    *block_num = (info.CardCapacity)/STORAGE_BLK_SIZ  - 1;
 80036fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003700:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003702:	0a5b      	lsrs	r3, r3, #9
 8003704:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8003708:	3b01      	subs	r3, #1
 800370a:	602b      	str	r3, [r5, #0]
    *block_size = STORAGE_BLK_SIZ;
 800370c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003710:	8023      	strh	r3, [r4, #0]
    ret = 0;
 8003712:	2000      	movs	r0, #0
}
 8003714:	b017      	add	sp, #92	; 0x5c
 8003716:	bd30      	pop	{r4, r5, pc}
  int8_t ret = -1;  
 8003718:	f04f 30ff 	mov.w	r0, #4294967295
 800371c:	e7fa      	b.n	8003714 <STORAGE_GetCapacity+0x2a>

0800371e <STORAGE_Read>:
{
 800371e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003720:	460c      	mov	r4, r1
 8003722:	4615      	mov	r5, r2
 8003724:	461e      	mov	r6, r3
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8003726:	f7fc ff33 	bl	8000590 <BSP_SD_IsDetected>
 800372a:	b158      	cbz	r0, 8003744 <STORAGE_Read+0x26>
    BSP_SD_ReadBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 800372c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	9601      	str	r6, [sp, #4]
 8003734:	026a      	lsls	r2, r5, #9
 8003736:	2300      	movs	r3, #0
 8003738:	4620      	mov	r0, r4
 800373a:	f7fc ff8d 	bl	8000658 <BSP_SD_ReadBlocks_DMA>
    ret = 0;
 800373e:	2000      	movs	r0, #0
}
 8003740:	b002      	add	sp, #8
 8003742:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;  
 8003744:	f04f 30ff 	mov.w	r0, #4294967295
 8003748:	e7fa      	b.n	8003740 <STORAGE_Read+0x22>

0800374a <STORAGE_Write>:
{
 800374a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800374c:	460c      	mov	r4, r1
 800374e:	4615      	mov	r5, r2
 8003750:	461e      	mov	r6, r3
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8003752:	f7fc ff1d 	bl	8000590 <BSP_SD_IsDetected>
 8003756:	b158      	cbz	r0, 8003770 <STORAGE_Write+0x26>
    BSP_SD_WriteBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 8003758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	9601      	str	r6, [sp, #4]
 8003760:	026a      	lsls	r2, r5, #9
 8003762:	2300      	movs	r3, #0
 8003764:	4620      	mov	r0, r4
 8003766:	f7fd f84f 	bl	8000808 <BSP_SD_WriteBlocks_DMA>
    ret = 0;
 800376a:	2000      	movs	r0, #0
}
 800376c:	b002      	add	sp, #8
 800376e:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;  
 8003770:	f04f 30ff 	mov.w	r0, #4294967295
 8003774:	e7fa      	b.n	800376c <STORAGE_Write+0x22>

08003776 <USBD_CDC_DataOut>:
{
 8003776:	b538      	push	{r3, r4, r5, lr}
 8003778:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800377a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800377e:	f7ff fe92 	bl	80034a6 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8003782:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003786:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800378a:	b14b      	cbz	r3, 80037a0 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800378c:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8003790:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800379a:	4798      	blx	r3
    return USBD_OK;
 800379c:	2000      	movs	r0, #0
 800379e:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80037a0:	2002      	movs	r0, #2
}
 80037a2:	bd38      	pop	{r3, r4, r5, pc}

080037a4 <USBD_CDC_Setup>:
{
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80037a6:	780f      	ldrb	r7, [r1, #0]
 80037a8:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 80037ac:	4606      	mov	r6, r0
 80037ae:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80037b0:	d023      	beq.n	80037fa <USBD_CDC_Setup+0x56>
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d119      	bne.n	80037ea <USBD_CDC_Setup+0x46>
    if (req->wLength)
 80037b6:	88ca      	ldrh	r2, [r1, #6]
 80037b8:	784b      	ldrb	r3, [r1, #1]
 80037ba:	b1c2      	cbz	r2, 80037ee <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 80037bc:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80037be:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 80037c2:	d50b      	bpl.n	80037dc <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80037c4:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 80037c8:	4618      	mov	r0, r3
 80037ca:	688f      	ldr	r7, [r1, #8]
 80037cc:	4629      	mov	r1, r5
 80037ce:	47b8      	blx	r7
          USBD_CtlSendData (pdev,
 80037d0:	88e2      	ldrh	r2, [r4, #6]
 80037d2:	4629      	mov	r1, r5
 80037d4:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 80037d6:	f005 f857 	bl	8008888 <USBD_CtlSendData>
      break;
 80037da:	e006      	b.n	80037ea <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 80037dc:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80037e0:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev,
 80037e4:	4629      	mov	r1, r5
 80037e6:	f005 f864 	bl	80088b2 <USBD_CtlPrepareRx>
}
 80037ea:	2000      	movs	r0, #0
 80037ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80037ee:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80037f2:	6884      	ldr	r4, [r0, #8]
 80037f4:	4618      	mov	r0, r3
 80037f6:	47a0      	blx	r4
 80037f8:	e7f7      	b.n	80037ea <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 80037fa:	784b      	ldrb	r3, [r1, #1]
 80037fc:	2b0a      	cmp	r3, #10
 80037fe:	d1f4      	bne.n	80037ea <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8003800:	2201      	movs	r2, #1
 8003802:	4901      	ldr	r1, [pc, #4]	; (8003808 <USBD_CDC_Setup+0x64>)
 8003804:	e7e7      	b.n	80037d6 <USBD_CDC_Setup+0x32>
 8003806:	bf00      	nop
 8003808:	20000588 	.word	0x20000588

0800380c <USBD_CDC_DeInit>:
{
 800380c:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 800380e:	2183      	movs	r1, #131	; 0x83
{
 8003810:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8003812:	f7ff fe04 	bl	800341e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8003816:	2103      	movs	r1, #3
 8003818:	4620      	mov	r0, r4
 800381a:	f7ff fe00 	bl	800341e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800381e:	2182      	movs	r1, #130	; 0x82
 8003820:	4620      	mov	r0, r4
 8003822:	f7ff fdfc 	bl	800341e <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8003826:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800382a:	b153      	cbz	r3, 8003842 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800382c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003834:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8003838:	f006 fd1c 	bl	800a274 <free>
    pdev->pClassData = NULL;
 800383c:	2300      	movs	r3, #0
 800383e:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8003842:	2000      	movs	r0, #0
 8003844:	bd10      	pop	{r4, pc}

08003846 <USBD_CDC_Init>:
{
 8003846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003848:	7c03      	ldrb	r3, [r0, #16]
{
 800384a:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800384c:	bb7b      	cbnz	r3, 80038ae <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 800384e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003852:	2202      	movs	r2, #2
 8003854:	2183      	movs	r1, #131	; 0x83
 8003856:	f7ff fdd8 	bl	800340a <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800385a:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 800385e:	2202      	movs	r2, #2
 8003860:	2103      	movs	r1, #3
 8003862:	4620      	mov	r0, r4
 8003864:	f7ff fdd1 	bl	800340a <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8003868:	2308      	movs	r3, #8
 800386a:	2203      	movs	r2, #3
 800386c:	2182      	movs	r1, #130	; 0x82
 800386e:	4620      	mov	r0, r4
 8003870:	f7ff fdcb 	bl	800340a <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003874:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003878:	f006 fcf4 	bl	800a264 <malloc>
 800387c:	4606      	mov	r6, r0
 800387e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8003882:	b320      	cbz	r0, 80038ce <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003884:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800388c:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 800388e:	2500      	movs	r5, #0
 8003890:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8003894:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003898:	b987      	cbnz	r7, 80038bc <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 800389a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800389e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80038a2:	2103      	movs	r1, #3
 80038a4:	4620      	mov	r0, r4
 80038a6:	f7ff fdf7 	bl	8003498 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80038aa:	4638      	mov	r0, r7
 80038ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 80038ae:	2340      	movs	r3, #64	; 0x40
 80038b0:	2202      	movs	r2, #2
 80038b2:	2183      	movs	r1, #131	; 0x83
 80038b4:	f7ff fda9 	bl	800340a <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80038b8:	2340      	movs	r3, #64	; 0x40
 80038ba:	e7d0      	b.n	800385e <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 80038bc:	2340      	movs	r3, #64	; 0x40
 80038be:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80038c2:	2103      	movs	r1, #3
 80038c4:	4620      	mov	r0, r4
 80038c6:	f7ff fde7 	bl	8003498 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80038ca:	4628      	mov	r0, r5
 80038cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1;
 80038ce:	2001      	movs	r0, #1
}
 80038d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038d4 <CDC_Itf_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
 80038d4:	b508      	push	{r3, lr}
  /* DeInitialize the UART peripheral */
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 80038d6:	4802      	ldr	r0, [pc, #8]	; (80038e0 <CDC_Itf_DeInit+0xc>)
 80038d8:	f002 feb2 	bl	8006640 <HAL_UART_DeInit>
  {
    /* Initialization Error */
 //   Error_Handler();
 }
  return (USBD_OK);
}
 80038dc:	2000      	movs	r0, #0
 80038de:	bd08      	pop	{r3, pc}
 80038e0:	20009444 	.word	0x20009444

080038e4 <CDC_Itf_Init>:
{
 80038e4:	b570      	push	{r4, r5, r6, lr}
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 80038e6:	4a18      	ldr	r2, [pc, #96]	; (8003948 <CDC_Itf_Init+0x64>)
  UartHandle.Instance          = USARTx;
 80038e8:	4c18      	ldr	r4, [pc, #96]	; (800394c <CDC_Itf_Init+0x68>)
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 80038ea:	4e19      	ldr	r6, [pc, #100]	; (8003950 <CDC_Itf_Init+0x6c>)
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 80038ec:	2500      	movs	r5, #0
 80038ee:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80038f2:	e884 002c 	stmia.w	r4, {r2, r3, r5}
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 80038f6:	4620      	mov	r0, r4
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80038f8:	230c      	movs	r3, #12
 80038fa:	6163      	str	r3, [r4, #20]
  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 80038fc:	60e5      	str	r5, [r4, #12]
  UartHandle.Init.Parity       = UART_PARITY_NONE;
 80038fe:	6125      	str	r5, [r4, #16]
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8003900:	61a5      	str	r5, [r4, #24]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8003902:	f003 f94b 	bl	8006b9c <HAL_UART_Init>
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 8003906:	2201      	movs	r2, #1
 8003908:	4631      	mov	r1, r6
 800390a:	4620      	mov	r0, r4


static void TIM_Config(void)
{
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 800390c:	4c11      	ldr	r4, [pc, #68]	; (8003954 <CDC_Itf_Init+0x70>)
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 800390e:	f002 feb1 	bl	8006674 <HAL_UART_Receive_IT>
  TimHandle.Instance = TIMx;
 8003912:	4b11      	ldr	r3, [pc, #68]	; (8003958 <CDC_Itf_Init+0x74>)
 8003914:	6023      	str	r3, [r4, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 8003916:	f241 3387 	movw	r3, #4999	; 0x1387
 800391a:	60e3      	str	r3, [r4, #12]
  TimHandle.Init.Prescaler = 84-1;
  TimHandle.Init.ClockDivision = 0;
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 800391c:	4620      	mov	r0, r4
  TimHandle.Init.Prescaler = 84-1;
 800391e:	2353      	movs	r3, #83	; 0x53
 8003920:	6063      	str	r3, [r4, #4]
  TimHandle.Init.ClockDivision = 0;
 8003922:	6125      	str	r5, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003924:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8003926:	f002 fe6f 	bl	8006608 <HAL_TIM_Base_Init>
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 800392a:	4620      	mov	r0, r4
 800392c:	f002 fdfe 	bl	800652c <HAL_TIM_Base_Start_IT>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <CDC_Itf_Init+0x78>)
  hcdc->RxBuffer = pbuff;
 8003932:	4a0b      	ldr	r2, [pc, #44]	; (8003960 <CDC_Itf_Init+0x7c>)
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003934:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
}
 8003938:	4628      	mov	r0, r5
  hcdc->TxBuffer = pbuff;
 800393a:	f8c3 6208 	str.w	r6, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800393e:	f8c3 5210 	str.w	r5, [r3, #528]	; 0x210
  hcdc->RxBuffer = pbuff;
 8003942:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8003946:	bd70      	pop	{r4, r5, r6, pc}
 8003948:	40013800 	.word	0x40013800
 800394c:	20009444 	.word	0x20009444
 8003950:	2000951d 	.word	0x2000951d
 8003954:	2000a91c 	.word	0x2000a91c
 8003958:	40000400 	.word	0x40000400
 800395c:	200086a4 	.word	0x200086a4
 8003960:	2000a110 	.word	0x2000a110

08003964 <STORAGE_IsReady>:
{
 8003964:	b510      	push	{r4, lr}
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8003966:	f7fc fe13 	bl	8000590 <BSP_SD_IsDetected>
 800396a:	4c0b      	ldr	r4, [pc, #44]	; (8003998 <STORAGE_IsReady+0x34>)
    if(prev_status < 0)
 800396c:	f994 3000 	ldrsb.w	r3, [r4]
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8003970:	b160      	cbz	r0, 800398c <STORAGE_IsReady+0x28>
    if(prev_status < 0)
 8003972:	2b00      	cmp	r3, #0
 8003974:	da03      	bge.n	800397e <STORAGE_IsReady+0x1a>
      BSP_SD_Init();
 8003976:	f7fc fec7 	bl	8000708 <BSP_SD_Init>
      prev_status = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	7023      	strb	r3, [r4, #0]
    if(BSP_SD_GetStatus() == SD_TRANSFER_OK)
 800397e:	f7fc fe2d 	bl	80005dc <BSP_SD_GetStatus>
 8003982:	3000      	adds	r0, #0
 8003984:	bf18      	it	ne
 8003986:	2001      	movne	r0, #1
 8003988:	4240      	negs	r0, r0
 800398a:	bd10      	pop	{r4, pc}
  else if(prev_status == 0)
 800398c:	b90b      	cbnz	r3, 8003992 <STORAGE_IsReady+0x2e>
    prev_status = -1;
 800398e:	23ff      	movs	r3, #255	; 0xff
 8003990:	7023      	strb	r3, [r4, #0]
  int8_t ret = -1;
 8003992:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003996:	bd10      	pop	{r4, pc}
 8003998:	20000589 	.word	0x20000589

0800399c <CDC_Itf_Control>:
  switch (cmd)
 800399c:	2820      	cmp	r0, #32
{
 800399e:	b538      	push	{r3, r4, r5, lr}
  switch (cmd)
 80039a0:	d003      	beq.n	80039aa <CDC_Itf_Control+0xe>
 80039a2:	2821      	cmp	r0, #33	; 0x21
 80039a4:	d048      	beq.n	8003a38 <CDC_Itf_Control+0x9c>
}
 80039a6:	2000      	movs	r0, #0
 80039a8:	bd38      	pop	{r3, r4, r5, pc}
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80039aa:	4c2c      	ldr	r4, [pc, #176]	; (8003a5c <CDC_Itf_Control+0xc0>)
 80039ac:	680b      	ldr	r3, [r1, #0]
 80039ae:	6023      	str	r3, [r4, #0]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 80039b0:	4d2b      	ldr	r5, [pc, #172]	; (8003a60 <CDC_Itf_Control+0xc4>)
    LineCoding.format     = pbuf[4];
 80039b2:	790b      	ldrb	r3, [r1, #4]
 80039b4:	7123      	strb	r3, [r4, #4]
    LineCoding.paritytype = pbuf[5];
 80039b6:	794b      	ldrb	r3, [r1, #5]
 80039b8:	7163      	strb	r3, [r4, #5]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 80039ba:	4628      	mov	r0, r5
    LineCoding.datatype   = pbuf[6];
 80039bc:	798b      	ldrb	r3, [r1, #6]
 80039be:	71a3      	strb	r3, [r4, #6]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 80039c0:	f002 fe3e 	bl	8006640 <HAL_UART_DeInit>
  switch (LineCoding.format)
 80039c4:	7923      	ldrb	r3, [r4, #4]
 80039c6:	4628      	mov	r0, r5
 80039c8:	b12b      	cbz	r3, 80039d6 <CDC_Itf_Control+0x3a>
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d001      	beq.n	80039d2 <CDC_Itf_Control+0x36>
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 80039ce:	2300      	movs	r3, #0
 80039d0:	e001      	b.n	80039d6 <CDC_Itf_Control+0x3a>
    UartHandle.Init.StopBits = UART_STOPBITS_2;
 80039d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  switch (LineCoding.paritytype)
 80039d6:	7962      	ldrb	r2, [r4, #5]
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 80039d8:	60c3      	str	r3, [r0, #12]
  switch (LineCoding.paritytype)
 80039da:	2a01      	cmp	r2, #1
 80039dc:	d020      	beq.n	8003a20 <CDC_Itf_Control+0x84>
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	d301      	bcc.n	80039e8 <CDC_Itf_Control+0x4c>
 80039e4:	2a02      	cmp	r2, #2
 80039e6:	d01e      	beq.n	8003a26 <CDC_Itf_Control+0x8a>
  switch (LineCoding.datatype)
 80039e8:	79a2      	ldrb	r2, [r4, #6]
    UartHandle.Init.Parity = UART_PARITY_NONE;
 80039ea:	6103      	str	r3, [r0, #16]
  switch (LineCoding.datatype)
 80039ec:	2a07      	cmp	r2, #7
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	d001      	beq.n	80039f8 <CDC_Itf_Control+0x5c>
 80039f4:	2a08      	cmp	r2, #8
 80039f6:	d019      	beq.n	8003a2c <CDC_Itf_Control+0x90>
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80039f8:	6083      	str	r3, [r0, #8]
  UartHandle.Init.BaudRate     = LineCoding.bitrate;
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	6043      	str	r3, [r0, #4]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80039fe:	220c      	movs	r2, #12
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8003a00:	2300      	movs	r3, #0
 8003a02:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8003a04:	6142      	str	r2, [r0, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a06:	61c3      	str	r3, [r0, #28]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8003a08:	4815      	ldr	r0, [pc, #84]	; (8003a60 <CDC_Itf_Control+0xc4>)
 8003a0a:	f003 f8c7 	bl	8006b9c <HAL_UART_Init>
 HAL_UART_Receive_IT(&UartHandle, (uint8_t *)(UserTxBuffer + UserTxBufPtrIn), 1);
 8003a0e:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <CDC_Itf_Control+0xc8>)
 8003a10:	4915      	ldr	r1, [pc, #84]	; (8003a68 <CDC_Itf_Control+0xcc>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4812      	ldr	r0, [pc, #72]	; (8003a60 <CDC_Itf_Control+0xc4>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	4419      	add	r1, r3
 8003a1a:	f002 fe2b 	bl	8006674 <HAL_UART_Receive_IT>
 8003a1e:	e7c2      	b.n	80039a6 <CDC_Itf_Control+0xa>
    UartHandle.Init.Parity = UART_PARITY_ODD;
 8003a20:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a24:	e7e0      	b.n	80039e8 <CDC_Itf_Control+0x4c>
    UartHandle.Init.Parity = UART_PARITY_EVEN;
 8003a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a2a:	e7dd      	b.n	80039e8 <CDC_Itf_Control+0x4c>
    if(UartHandle.Init.Parity == UART_PARITY_NONE)
 8003a2c:	6903      	ldr	r3, [r0, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0e2      	beq.n	80039f8 <CDC_Itf_Control+0x5c>
      UartHandle.Init.WordLength = UART_WORDLENGTH_9B;
 8003a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a36:	e7df      	b.n	80039f8 <CDC_Itf_Control+0x5c>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8003a38:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <CDC_Itf_Control+0xc0>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	0a12      	lsrs	r2, r2, #8
 8003a42:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8003a44:	885a      	ldrh	r2, [r3, #2]
 8003a46:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8003a48:	78da      	ldrb	r2, [r3, #3]
 8003a4a:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 8003a4c:	791a      	ldrb	r2, [r3, #4]
 8003a4e:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 8003a50:	795a      	ldrb	r2, [r3, #5]
 8003a52:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;
 8003a54:	799b      	ldrb	r3, [r3, #6]
 8003a56:	718b      	strb	r3, [r1, #6]
    break;
 8003a58:	e7a5      	b.n	80039a6 <CDC_Itf_Control+0xa>
 8003a5a:	bf00      	nop
 8003a5c:	20000088 	.word	0x20000088
 8003a60:	20009444 	.word	0x20009444
 8003a64:	20000584 	.word	0x20000584
 8003a68:	2000951d 	.word	0x2000951d

08003a6c <LL_RTC_DATE_GetDay.constprop.2>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <LL_RTC_DATE_GetDay.constprop.2+0x2c>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	2030      	movs	r0, #48	; 0x30
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	fa90 f0a0 	rbit	r0, r0
 8003a76:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 8003a78:	fab0 f080 	clz	r0, r0
 8003a7c:	fa92 f2a2 	rbit	r2, r2
 8003a80:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8003a84:	fab2 f282 	clz	r2, r2
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	fa21 f000 	lsr.w	r0, r1, r0
 8003a90:	40d3      	lsrs	r3, r2
}
 8003a92:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8003a96:	4770      	bx	lr
 8003a98:	40002800 	.word	0x40002800

08003a9c <LL_RTC_DATE_GetMonth.constprop.3>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <LL_RTC_DATE_GetMonth.constprop.3+0x30>)
 8003a9e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	fa90 f0a0 	rbit	r0, r0
 8003aa8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 8003aac:	fab0 f080 	clz	r0, r0
 8003ab0:	fa92 f2a2 	rbit	r2, r2
 8003ab4:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 8003ab8:	fab2 f282 	clz	r2, r2
 8003abc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ac0:	fa21 f000 	lsr.w	r0, r1, r0
 8003ac4:	40d3      	lsrs	r3, r2
}
 8003ac6:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8003aca:	4770      	bx	lr
 8003acc:	40002800 	.word	0x40002800

08003ad0 <LL_RTC_DATE_GetYear.constprop.4>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <LL_RTC_DATE_GetYear.constprop.4+0x30>)
 8003ad2:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	fa90 f0a0 	rbit	r0, r0
 8003adc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 8003ae0:	fab0 f080 	clz	r0, r0
 8003ae4:	fa92 f2a2 	rbit	r2, r2
 8003ae8:	f403 0170 	and.w	r1, r3, #15728640	; 0xf00000
 8003aec:	fab2 f282 	clz	r2, r2
 8003af0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003af4:	fa21 f000 	lsr.w	r0, r1, r0
 8003af8:	40d3      	lsrs	r3, r2
}
 8003afa:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8003afe:	4770      	bx	lr
 8003b00:	40002800 	.word	0x40002800

08003b04 <LL_RTC_TIME_GetSecond.constprop.5>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 8003b04:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <LL_RTC_TIME_GetSecond.constprop.5+0x2c>)
 8003b06:	2070      	movs	r0, #112	; 0x70
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	fa90 f0a0 	rbit	r0, r0
 8003b0e:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 8003b10:	fab0 f080 	clz	r0, r0
 8003b14:	fa92 f2a2 	rbit	r2, r2
 8003b18:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8003b1c:	fab2 f282 	clz	r2, r2
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	fa21 f000 	lsr.w	r0, r1, r0
 8003b28:	40d3      	lsrs	r3, r2
}
 8003b2a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8003b2e:	4770      	bx	lr
 8003b30:	40002800 	.word	0x40002800

08003b34 <LL_RTC_TIME_GetMinute.constprop.6>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 8003b34:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <LL_RTC_TIME_GetMinute.constprop.6+0x30>)
 8003b36:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	fa90 f0a0 	rbit	r0, r0
 8003b40:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 8003b44:	fab0 f080 	clz	r0, r0
 8003b48:	fa92 f2a2 	rbit	r2, r2
 8003b4c:	f403 41e0 	and.w	r1, r3, #28672	; 0x7000
 8003b50:	fab2 f282 	clz	r2, r2
 8003b54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b58:	fa21 f000 	lsr.w	r0, r1, r0
 8003b5c:	40d3      	lsrs	r3, r2
}
 8003b5e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8003b62:	4770      	bx	lr
 8003b64:	40002800 	.word	0x40002800

08003b68 <LL_RTC_TIME_GetHour.constprop.7>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <LL_RTC_TIME_GetHour.constprop.7+0x30>)
 8003b6a:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	fa90 f0a0 	rbit	r0, r0
 8003b74:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 8003b78:	fab0 f080 	clz	r0, r0
 8003b7c:	fa92 f2a2 	rbit	r2, r2
 8003b80:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
 8003b84:	fab2 f282 	clz	r2, r2
 8003b88:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003b8c:	fa21 f000 	lsr.w	r0, r1, r0
 8003b90:	40d3      	lsrs	r3, r2
}
 8003b92:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8003b96:	4770      	bx	lr
 8003b98:	40002800 	.word	0x40002800

08003b9c <USBD_CDC_RegisterInterface>:
  if(fops != NULL)
 8003b9c:	b119      	cbz	r1, 8003ba6 <USBD_CDC_RegisterInterface+0xa>
    pdev->pUserData= fops;
 8003b9e:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003ba6:	2002      	movs	r0, #2
}
 8003ba8:	4770      	bx	lr

08003baa <USBD_CDC_TransmitPacket>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003baa:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 8003bae:	b510      	push	{r4, lr}
  if(pdev->pClassData != NULL)
 8003bb0:	b172      	cbz	r2, 8003bd0 <USBD_CDC_TransmitPacket+0x26>
    if(hcdc->TxState == 0)
 8003bb2:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	b964      	cbnz	r4, 8003bd4 <USBD_CDC_TransmitPacket+0x2a>
      hcdc->TxState = 1;
 8003bba:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      USBD_LL_Transmit(pdev,
 8003bbe:	2183      	movs	r1, #131	; 0x83
 8003bc0:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8003bc4:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8003bc8:	f7ff fc5f 	bl	800348a <USBD_LL_Transmit>
      return USBD_OK;
 8003bcc:	4620      	mov	r0, r4
 8003bce:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003bd0:	2002      	movs	r0, #2
 8003bd2:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8003bd4:	4618      	mov	r0, r3
}
 8003bd6:	bd10      	pop	{r4, pc}

08003bd8 <USBD_CDC_ReceivePacket>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003bd8:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 8003bdc:	b510      	push	{r4, lr}
  if(pdev->pClassData != NULL)
 8003bde:	b162      	cbz	r2, 8003bfa <USBD_CDC_ReceivePacket+0x22>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003be0:	7c04      	ldrb	r4, [r0, #16]
 8003be2:	b944      	cbnz	r4, 8003bf6 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8003be4:	f44f 7300 	mov.w	r3, #512	; 0x200
      USBD_LL_PrepareReceive(pdev,
 8003be8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003bec:	2103      	movs	r1, #3
 8003bee:	f7ff fc53 	bl	8003498 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003bf6:	2340      	movs	r3, #64	; 0x40
 8003bf8:	e7f6      	b.n	8003be8 <USBD_CDC_ReceivePacket+0x10>
    return USBD_FAIL;
 8003bfa:	2002      	movs	r0, #2
}
 8003bfc:	bd10      	pop	{r4, pc}
	...

08003c00 <CDC_Itf_Receive>:
{
 8003c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
BuffLength=0;
 8003c04:	4dc1      	ldr	r5, [pc, #772]	; (8003f0c <CDC_Itf_Receive+0x30c>)
 8003c06:	4cc2      	ldr	r4, [pc, #776]	; (8003f10 <CDC_Itf_Receive+0x310>)
 8003c08:	2300      	movs	r3, #0
{
 8003c0a:	b087      	sub	sp, #28
BuffLength=0;
 8003c0c:	602b      	str	r3, [r5, #0]
for (i = 0; i < *Len; i++)
 8003c0e:	4602      	mov	r2, r0
 8003c10:	680e      	ldr	r6, [r1, #0]
 8003c12:	1a13      	subs	r3, r2, r0
 8003c14:	429e      	cmp	r6, r3
 8003c16:	f200 8089 	bhi.w	8003d2c <CDC_Itf_Receive+0x12c>
if (TempUserBuffer[0] == 'g')
 8003c1a:	7823      	ldrb	r3, [r4, #0]
 8003c1c:	2b67      	cmp	r3, #103	; 0x67
 8003c1e:	f040 808c 	bne.w	8003d3a <CDC_Itf_Receive+0x13a>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8003c22:	f894 c002 	ldrb.w	ip, [r4, #2]
 8003c26:	78e3      	ldrb	r3, [r4, #3]
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8003c28:	f894 e006 	ldrb.w	lr, [r4, #6]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8003c2c:	7ae2      	ldrb	r2, [r4, #11]
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8003c2e:	7be1      	ldrb	r1, [r4, #15]
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8003c30:	7ce0      	ldrb	r0, [r4, #19]
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8003c32:	f894 a016 	ldrb.w	sl, [r4, #22]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8003c36:	f8df b324 	ldr.w	fp, [pc, #804]	; 8003f5c <CDC_Itf_Receive+0x35c>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8003c3a:	4fb6      	ldr	r7, [pc, #728]	; (8003f14 <CDC_Itf_Receive+0x314>)
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8003c3c:	4eb6      	ldr	r6, [pc, #728]	; (8003f18 <CDC_Itf_Receive+0x318>)
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8003c3e:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8003f60 <CDC_Itf_Receive+0x360>
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8003c42:	f8df 8320 	ldr.w	r8, [pc, #800]	; 8003f64 <CDC_Itf_Receive+0x364>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8003c46:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003c4a:	3b30      	subs	r3, #48	; 0x30
 8003c4c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003c50:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8003c54:	79e3      	ldrb	r3, [r4, #7]
 8003c56:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003c5a:	3b30      	subs	r3, #48	; 0x30
 8003c5c:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8003c60:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8003c64:	7aa3      	ldrb	r3, [r4, #10]
 8003c66:	3b30      	subs	r3, #48	; 0x30
 8003c68:	3a30      	subs	r2, #48	; 0x30
 8003c6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c6e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8003c72:	7ba2      	ldrb	r2, [r4, #14]
 8003c74:	3a30      	subs	r2, #48	; 0x30
 8003c76:	3930      	subs	r1, #48	; 0x30
 8003c78:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003c7c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8003c80:	7ca1      	ldrb	r1, [r4, #18]
 8003c82:	3930      	subs	r1, #48	; 0x30
 8003c84:	3830      	subs	r0, #48	; 0x30
 8003c86:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003c8a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8003c8e:	7de0      	ldrb	r0, [r4, #23]
 8003c90:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 8003c94:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8003c98:	3830      	subs	r0, #48	; 0x30
 8003c9a:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 8003c9e:	f8df a294 	ldr.w	sl, [pc, #660]	; 8003f34 <CDC_Itf_Receive+0x334>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8003ca2:	fa5f fc8c 	uxtb.w	ip, ip
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8003ca6:	fa5f fe8e 	uxtb.w	lr, lr
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8003caa:	b2db      	uxtb	r3, r3
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8003cac:	b2d2      	uxtb	r2, r2
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8003cae:	b2c9      	uxtb	r1, r1
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8003cb0:	b2c0      	uxtb	r0, r0
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8003cb2:	f887 c000 	strb.w	ip, [r7]
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8003cb6:	f886 e000 	strb.w	lr, [r6]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8003cba:	f88b 3000 	strb.w	r3, [fp]
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8003cbe:	f889 2000 	strb.w	r2, [r9]
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8003cc2:	f888 1000 	strb.w	r1, [r8]
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8003cc6:	f88a 0000 	strb.w	r0, [sl]
Set_RTC_Calendar(RTC_Y, RTC_Mo , RTC_D, RTC_H, RTC_Mi, RTC_S);  // Set Device RTC with received Values
 8003cca:	f8cd c004 	str.w	ip, [sp, #4]
 8003cce:	f8cd e000 	str.w	lr, [sp]
 8003cd2:	f7fd fd11 	bl	80016f8 <Set_RTC_Calendar>
UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Timestamp Received :%d:%d:%d_%d/%d/%d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);//
 8003cd6:	f89a 2000 	ldrb.w	r2, [sl]
 8003cda:	f89b 3000 	ldrb.w	r3, [fp]
 8003cde:	9204      	str	r2, [sp, #16]
 8003ce0:	f899 2000 	ldrb.w	r2, [r9]
 8003ce4:	9203      	str	r2, [sp, #12]
 8003ce6:	f898 2000 	ldrb.w	r2, [r8]
 8003cea:	9202      	str	r2, [sp, #8]
 8003cec:	783a      	ldrb	r2, [r7, #0]
 8003cee:	f8df b250 	ldr.w	fp, [pc, #592]	; 8003f40 <CDC_Itf_Receive+0x340>
 8003cf2:	9201      	str	r2, [sp, #4]
 8003cf4:	7832      	ldrb	r2, [r6, #0]
 8003cf6:	9200      	str	r2, [sp, #0]
 8003cf8:	4988      	ldr	r1, [pc, #544]	; (8003f1c <CDC_Itf_Receive+0x31c>)
 8003cfa:	4a89      	ldr	r2, [pc, #548]	; (8003f20 <CDC_Itf_Receive+0x320>)
 8003cfc:	4658      	mov	r0, fp
 8003cfe:	f006 fb91 	bl	800a424 <siprintf>
 8003d02:	4a88      	ldr	r2, [pc, #544]	; (8003f24 <CDC_Itf_Receive+0x324>)
 8003d04:	4603      	mov	r3, r0
 8003d06:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003d08:	4887      	ldr	r0, [pc, #540]	; (8003f28 <CDC_Itf_Receive+0x328>)
 8003d0a:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8003d14:	f8c2 b208 	str.w	fp, [r2, #520]	; 0x208
USBD_CDC_TransmitPacket(&USBD_Device);//
 8003d18:	f7ff ff47 	bl	8003baa <USBD_CDC_TransmitPacket>
TempUserBuffer[0] = 0;        // Clear 1st Character to avoid code conflict
 8003d1c:	2300      	movs	r3, #0
USB_Mode = 1;                 // USB VCP Mode in next USB connectivity
 8003d1e:	4a83      	ldr	r2, [pc, #524]	; (8003f2c <CDC_Itf_Receive+0x32c>)
TempUserBuffer[0] = 0;        // Clear 1st Character to avoid code conflict
 8003d20:	7023      	strb	r3, [r4, #0]
USB_Mode = 1;                 // USB VCP Mode in next USB connectivity
 8003d22:	2301      	movs	r3, #1
 8003d24:	7013      	strb	r3, [r2, #0]
Logstart_Create=1;
 8003d26:	4a82      	ldr	r2, [pc, #520]	; (8003f30 <CDC_Itf_Receive+0x330>)
	*LP_Ram_Key_Address = 0;
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	e011      	b.n	8003d50 <CDC_Itf_Receive+0x150>
TempUserBuffer[BuffLength] = Buf[i];
 8003d2c:	682b      	ldr	r3, [r5, #0]
 8003d2e:	f812 6b01 	ldrb.w	r6, [r2], #1
 8003d32:	54e6      	strb	r6, [r4, r3]
BuffLength++;
 8003d34:	3301      	adds	r3, #1
 8003d36:	602b      	str	r3, [r5, #0]
 8003d38:	e76a      	b.n	8003c10 <CDC_Itf_Receive+0x10>
else if (TempUserBuffer[0] == 'o')   // Turn off All LED
 8003d3a:	2b6f      	cmp	r3, #111	; 0x6f
 8003d3c:	f04f 0600 	mov.w	r6, #0
 8003d40:	d114      	bne.n	8003d6c <CDC_Itf_Receive+0x16c>
RED_LED_OFF();
 8003d42:	f7fc fea3 	bl	8000a8c <RED_LED_OFF>
GREEN_LED_OFF();
 8003d46:	f7fc fea6 	bl	8000a96 <GREEN_LED_OFF>
BLUE_LED_OFF();
 8003d4a:	f7fc fea9 	bl	8000aa0 <BLUE_LED_OFF>
TempUserBuffer[0] = 0;         // Clear 1st Character to avoid code conflict
 8003d4e:	7026      	strb	r6, [r4, #0]
for (i = 0; i < BuffLength; i++) // Buffer Empty
 8003d50:	2300      	movs	r3, #0
 8003d52:	682a      	ldr	r2, [r5, #0]
TempUserBuffer[i] = 0;//
 8003d54:	496e      	ldr	r1, [pc, #440]	; (8003f10 <CDC_Itf_Receive+0x310>)
 8003d56:	4618      	mov	r0, r3
for (i = 0; i < BuffLength; i++) // Buffer Empty
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	f040 8154 	bne.w	8004006 <CDC_Itf_Receive+0x406>
USBD_CDC_ReceivePacket(&USBD_Device);   // Ready for Next packet receive
 8003d5e:	4872      	ldr	r0, [pc, #456]	; (8003f28 <CDC_Itf_Receive+0x328>)
 8003d60:	f7ff ff3a 	bl	8003bd8 <USBD_CDC_ReceivePacket>
}
 8003d64:	2000      	movs	r0, #0
 8003d66:	b007      	add	sp, #28
 8003d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
else if (TempUserBuffer[0] == 'B')   // Turn on BLUE LED
 8003d6c:	2b42      	cmp	r3, #66	; 0x42
 8003d6e:	d102      	bne.n	8003d76 <CDC_Itf_Receive+0x176>
BLUE_LED_ONLY();
 8003d70:	f7fc fecc 	bl	8000b0c <BLUE_LED_ONLY>
 8003d74:	e7eb      	b.n	8003d4e <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'b')  // Turn off BLUE LED
 8003d76:	2b62      	cmp	r3, #98	; 0x62
 8003d78:	d104      	bne.n	8003d84 <CDC_Itf_Receive+0x184>
ALL_LED_OFF();
 8003d7a:	f7fc fe97 	bl	8000aac <ALL_LED_OFF>
	TempUserBuffer[0] = 0;       // Clear 1st Character to avoid code conflict
 8003d7e:	2300      	movs	r3, #0
 8003d80:	7023      	strb	r3, [r4, #0]
 8003d82:	e7e5      	b.n	8003d50 <CDC_Itf_Receive+0x150>
else if (TempUserBuffer[0] == 'E')  // Turn on Green LED
 8003d84:	2b45      	cmp	r3, #69	; 0x45
 8003d86:	d102      	bne.n	8003d8e <CDC_Itf_Receive+0x18e>
GREEN_LED_ONLY();
 8003d88:	f7fc fea8 	bl	8000adc <GREEN_LED_ONLY>
 8003d8c:	e7df      	b.n	8003d4e <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'e')  // Turn off Green LED
 8003d8e:	2b65      	cmp	r3, #101	; 0x65
 8003d90:	d0f3      	beq.n	8003d7a <CDC_Itf_Receive+0x17a>
else if (TempUserBuffer[0] == 'F')  // Turn on RED LED
 8003d92:	2b46      	cmp	r3, #70	; 0x46
 8003d94:	d102      	bne.n	8003d9c <CDC_Itf_Receive+0x19c>
RED_LED_ONLY();
 8003d96:	f7fc fead 	bl	8000af4 <RED_LED_ONLY>
 8003d9a:	e7d8      	b.n	8003d4e <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'f')  // Turn off RED LED
 8003d9c:	2b66      	cmp	r3, #102	; 0x66
 8003d9e:	d0ec      	beq.n	8003d7a <CDC_Itf_Receive+0x17a>
else if (TempUserBuffer[0] == 'l')  // Turn on White LED
 8003da0:	2b6c      	cmp	r3, #108	; 0x6c
 8003da2:	d102      	bne.n	8003daa <CDC_Itf_Receive+0x1aa>
ALL_LED_ON();
 8003da4:	f7fc fe8e 	bl	8000ac4 <ALL_LED_ON>
 8003da8:	e7e9      	b.n	8003d7e <CDC_Itf_Receive+0x17e>
else if (TempUserBuffer[0] == 'r')   // Read Device RTC Timestamp
 8003daa:	2b72      	cmp	r3, #114	; 0x72
 8003dac:	f040 8086 	bne.w	8003ebc <CDC_Itf_Receive+0x2bc>
	RTC_H = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8003db0:	f7ff feda 	bl	8003b68 <LL_RTC_TIME_GetHour.constprop.7>
 8003db4:	4606      	mov	r6, r0
 8003db6:	f7ff fed7 	bl	8003b68 <LL_RTC_TIME_GetHour.constprop.7>
 8003dba:	f3c6 1303 	ubfx	r3, r6, #4, #4
 8003dbe:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8003f5c <CDC_Itf_Receive+0x35c>
	RTC_Mi = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8003dc2:	4e55      	ldr	r6, [pc, #340]	; (8003f18 <CDC_Itf_Receive+0x318>)
	RTC_H = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8003dc4:	f000 000f 	and.w	r0, r0, #15
 8003dc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003dcc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003dd0:	f88a 3000 	strb.w	r3, [sl]
	RTC_Mi = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8003dd4:	f7ff feae 	bl	8003b34 <LL_RTC_TIME_GetMinute.constprop.6>
 8003dd8:	4607      	mov	r7, r0
 8003dda:	f7ff feab 	bl	8003b34 <LL_RTC_TIME_GetMinute.constprop.6>
 8003dde:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8003de2:	f000 000f 	and.w	r0, r0, #15
 8003de6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003dea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003dee:	7033      	strb	r3, [r6, #0]
	RTC_S =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8003df0:	f7ff fe88 	bl	8003b04 <LL_RTC_TIME_GetSecond.constprop.5>
 8003df4:	4680      	mov	r8, r0
 8003df6:	f7ff fe85 	bl	8003b04 <LL_RTC_TIME_GetSecond.constprop.5>
 8003dfa:	f3c8 1303 	ubfx	r3, r8, #4, #4
 8003dfe:	4f45      	ldr	r7, [pc, #276]	; (8003f14 <CDC_Itf_Receive+0x314>)
	RTC_Mo =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 8003e00:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8003f64 <CDC_Itf_Receive+0x364>
	RTC_S =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8003e04:	f000 000f 	and.w	r0, r0, #15
 8003e08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e0c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003e10:	703b      	strb	r3, [r7, #0]
	RTC_Mo =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 8003e12:	f7ff fe43 	bl	8003a9c <LL_RTC_DATE_GetMonth.constprop.3>
 8003e16:	4681      	mov	r9, r0
 8003e18:	f7ff fe40 	bl	8003a9c <LL_RTC_DATE_GetMonth.constprop.3>
 8003e1c:	f3c9 1303 	ubfx	r3, r9, #4, #4
 8003e20:	f000 000f 	and.w	r0, r0, #15
 8003e24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e28:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003e2c:	f888 3000 	strb.w	r3, [r8]
	RTC_D = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 8003e30:	f7ff fe1c 	bl	8003a6c <LL_RTC_DATE_GetDay.constprop.2>
 8003e34:	4683      	mov	fp, r0
 8003e36:	f7ff fe19 	bl	8003a6c <LL_RTC_DATE_GetDay.constprop.2>
 8003e3a:	f3cb 1303 	ubfx	r3, fp, #4, #4
 8003e3e:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8003f60 <CDC_Itf_Receive+0x360>
 8003e42:	f000 000f 	and.w	r0, r0, #15
 8003e46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e4a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003e4e:	f889 3000 	strb.w	r3, [r9]
	RTC_Y =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 8003e52:	f7ff fe3d 	bl	8003ad0 <LL_RTC_DATE_GetYear.constprop.4>
 8003e56:	4683      	mov	fp, r0
 8003e58:	f7ff fe3a 	bl	8003ad0 <LL_RTC_DATE_GetYear.constprop.4>
 8003e5c:	f3cb 1303 	ubfx	r3, fp, #4, #4
 8003e60:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e64:	f000 000f 	and.w	r0, r0, #15
 8003e68:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8003e6c:	4b31      	ldr	r3, [pc, #196]	; (8003f34 <CDC_Itf_Receive+0x334>)
		UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\nCurrent Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);
 8003e6e:	4932      	ldr	r1, [pc, #200]	; (8003f38 <CDC_Itf_Receive+0x338>)
	RTC_Y =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 8003e70:	b2c0      	uxtb	r0, r0
 8003e72:	7018      	strb	r0, [r3, #0]
	(void)RTC->DR;
 8003e74:	4b31      	ldr	r3, [pc, #196]	; (8003f3c <CDC_Itf_Receive+0x33c>)
 8003e76:	685a      	ldr	r2, [r3, #4]
	(void)RTC->TR;
 8003e78:	681b      	ldr	r3, [r3, #0]
		UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\nCurrent Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);
 8003e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e7e:	9004      	str	r0, [sp, #16]
 8003e80:	f899 2000 	ldrb.w	r2, [r9]
 8003e84:	9203      	str	r2, [sp, #12]
 8003e86:	f898 2000 	ldrb.w	r2, [r8]
 8003e8a:	9202      	str	r2, [sp, #8]
 8003e8c:	783a      	ldrb	r2, [r7, #0]
 8003e8e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8003f40 <CDC_Itf_Receive+0x340>
 8003e92:	9201      	str	r2, [sp, #4]
 8003e94:	7832      	ldrb	r2, [r6, #0]
 8003e96:	9200      	str	r2, [sp, #0]
 8003e98:	4650      	mov	r0, sl
 8003e9a:	4a21      	ldr	r2, [pc, #132]	; (8003f20 <CDC_Itf_Receive+0x320>)
 8003e9c:	f006 fac2 	bl	800a424 <siprintf>
 8003ea0:	4a20      	ldr	r2, [pc, #128]	; (8003f24 <CDC_Itf_Receive+0x324>)
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003ea6:	4820      	ldr	r0, [pc, #128]	; (8003f28 <CDC_Itf_Receive+0x328>)
 8003ea8:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8003eac:	b2db      	uxtb	r3, r3
  hcdc->TxBuffer = pbuff;
 8003eae:	f8c2 a208 	str.w	sl, [r2, #520]	; 0x208
  hcdc->TxLength = length;
 8003eb2:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
	USBD_CDC_TransmitPacket(&USBD_Device);//
 8003eb6:	f7ff fe78 	bl	8003baa <USBD_CDC_TransmitPacket>
 8003eba:	e760      	b.n	8003d7e <CDC_Itf_Receive+0x17e>
else if (TempUserBuffer[0] == 'U')    // USB MSC in next USB connectivity
 8003ebc:	2b55      	cmp	r3, #85	; 0x55
 8003ebe:	d153      	bne.n	8003f68 <CDC_Itf_Receive+0x368>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n Return to USB MSC Mode after USB reconnect..\r\n\r\n",software_vr);
 8003ec0:	4e1f      	ldr	r6, [pc, #124]	; (8003f40 <CDC_Itf_Receive+0x340>)
 8003ec2:	4920      	ldr	r1, [pc, #128]	; (8003f44 <CDC_Itf_Receive+0x344>)
 8003ec4:	4a16      	ldr	r2, [pc, #88]	; (8003f20 <CDC_Itf_Receive+0x320>)
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	f006 faac 	bl	800a424 <siprintf>
 8003ecc:	4a15      	ldr	r2, [pc, #84]	; (8003f24 <CDC_Itf_Receive+0x324>)
 8003ece:	4603      	mov	r3, r0
 8003ed0:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003ed2:	4815      	ldr	r0, [pc, #84]	; (8003f28 <CDC_Itf_Receive+0x328>)
 8003ed4:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8003ede:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);//
 8003ee2:	f7ff fe62 	bl	8003baa <USBD_CDC_TransmitPacket>
	USB_Mode = 1;                    // USB MSC Mode
 8003ee6:	4911      	ldr	r1, [pc, #68]	; (8003f2c <CDC_Itf_Receive+0x32c>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	700a      	strb	r2, [r1, #0]
	Logstart_Delete=1;
 8003eec:	4916      	ldr	r1, [pc, #88]	; (8003f48 <CDC_Itf_Receive+0x348>)
 8003eee:	600a      	str	r2, [r1, #0]
	EnterReset_Create=0;
 8003ef0:	4916      	ldr	r1, [pc, #88]	; (8003f4c <CDC_Itf_Receive+0x34c>)
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 8003ef2:	2300      	movs	r3, #0
	EnterReset_Create=0;
 8003ef4:	600b      	str	r3, [r1, #0]
	EnterDFU_Create=0;
 8003ef6:	4916      	ldr	r1, [pc, #88]	; (8003f50 <CDC_Itf_Receive+0x350>)
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 8003ef8:	7023      	strb	r3, [r4, #0]
	EnterDFU_Create=0;
 8003efa:	600b      	str	r3, [r1, #0]
	Logstart_Create=1;
 8003efc:	490c      	ldr	r1, [pc, #48]	; (8003f30 <CDC_Itf_Receive+0x330>)
 8003efe:	600a      	str	r2, [r1, #0]
	 VCP_Bypass=1;
 8003f00:	4914      	ldr	r1, [pc, #80]	; (8003f54 <CDC_Itf_Receive+0x354>)
 8003f02:	700a      	strb	r2, [r1, #0]
	 Data_log_Start_Resume = 0;
 8003f04:	4a14      	ldr	r2, [pc, #80]	; (8003f58 <CDC_Itf_Receive+0x358>)
 8003f06:	7013      	strb	r3, [r2, #0]
 8003f08:	e722      	b.n	8003d50 <CDC_Itf_Receive+0x150>
 8003f0a:	bf00      	nop
 8003f0c:	20009440 	.word	0x20009440
 8003f10:	2000a958 	.word	0x2000a958
 8003f14:	2000a910 	.word	0x2000a910
 8003f18:	2000a911 	.word	0x2000a911
 8003f1c:	0800b636 	.word	0x0800b636
 8003f20:	0002c314 	.word	0x0002c314
 8003f24:	2000a912 	.word	0x2000a912
 8003f28:	200086a4 	.word	0x200086a4
 8003f2c:	20008f64 	.word	0x20008f64
 8003f30:	200094b4 	.word	0x200094b4
 8003f34:	2000951c 	.word	0x2000951c
 8003f38:	0800b672 	.word	0x0800b672
 8003f3c:	40002800 	.word	0x40002800
 8003f40:	20009d28 	.word	0x20009d28
 8003f44:	0800b6b7 	.word	0x0800b6b7
 8003f48:	20009438 	.word	0x20009438
 8003f4c:	20009d24 	.word	0x20009d24
 8003f50:	2000a914 	.word	0x2000a914
 8003f54:	20008a41 	.word	0x20008a41
 8003f58:	20008681 	.word	0x20008681
 8003f5c:	2000943c 	.word	0x2000943c
 8003f60:	2000a918 	.word	0x2000a918
 8003f64:	20009434 	.word	0x20009434
else if (TempUserBuffer[0] == 'Z')    // Reset Device
 8003f68:	2b5a      	cmp	r3, #90	; 0x5a
 8003f6a:	d118      	bne.n	8003f9e <CDC_Itf_Receive+0x39e>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to reset AIM device..\r\n",software_vr);
 8003f6c:	4e27      	ldr	r6, [pc, #156]	; (800400c <CDC_Itf_Receive+0x40c>)
 8003f6e:	4a28      	ldr	r2, [pc, #160]	; (8004010 <CDC_Itf_Receive+0x410>)
 8003f70:	4928      	ldr	r1, [pc, #160]	; (8004014 <CDC_Itf_Receive+0x414>)
 8003f72:	4630      	mov	r0, r6
 8003f74:	f006 fa56 	bl	800a424 <siprintf>
 8003f78:	4a27      	ldr	r2, [pc, #156]	; (8004018 <CDC_Itf_Receive+0x418>)
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003f7e:	4827      	ldr	r0, [pc, #156]	; (800401c <CDC_Itf_Receive+0x41c>)
 8003f80:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8003f8a:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 8003f8e:	f7ff fe0c 	bl	8003baa <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 8003f92:	2300      	movs	r3, #0
 8003f94:	7023      	strb	r3, [r4, #0]
	EnterReset_Create=1;
 8003f96:	4b22      	ldr	r3, [pc, #136]	; (8004020 <CDC_Itf_Receive+0x420>)
 8003f98:	2201      	movs	r2, #1
	EnterDFU_Create=1;
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	e6d8      	b.n	8003d50 <CDC_Itf_Receive+0x150>
else if (TempUserBuffer[0] == 'X')     // Enter DFU mode for firmware Update
 8003f9e:	2b58      	cmp	r3, #88	; 0x58
 8003fa0:	d117      	bne.n	8003fd2 <CDC_Itf_Receive+0x3d2>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to enter Firmware update Mode..\r\n",software_vr);
 8003fa2:	4e1a      	ldr	r6, [pc, #104]	; (800400c <CDC_Itf_Receive+0x40c>)
 8003fa4:	4a1a      	ldr	r2, [pc, #104]	; (8004010 <CDC_Itf_Receive+0x410>)
 8003fa6:	491f      	ldr	r1, [pc, #124]	; (8004024 <CDC_Itf_Receive+0x424>)
 8003fa8:	4630      	mov	r0, r6
 8003faa:	f006 fa3b 	bl	800a424 <siprintf>
 8003fae:	4a1a      	ldr	r2, [pc, #104]	; (8004018 <CDC_Itf_Receive+0x418>)
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003fb4:	4819      	ldr	r0, [pc, #100]	; (800401c <CDC_Itf_Receive+0x41c>)
 8003fb6:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8003fc0:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 8003fc4:	f7ff fdf1 	bl	8003baa <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 8003fc8:	2300      	movs	r3, #0
 8003fca:	7023      	strb	r3, [r4, #0]
	EnterDFU_Create=1;
 8003fcc:	2201      	movs	r2, #1
 8003fce:	4b16      	ldr	r3, [pc, #88]	; (8004028 <CDC_Itf_Receive+0x428>)
 8003fd0:	e7e3      	b.n	8003f9a <CDC_Itf_Receive+0x39a>
else if (TempUserBuffer[0] == 'Y')     // Enter DFU mode for firmware Update
 8003fd2:	2b59      	cmp	r3, #89	; 0x59
 8003fd4:	f47f aebc 	bne.w	8003d50 <CDC_Itf_Receive+0x150>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n LP_RAM reset..\r\n",software_vr);
 8003fd8:	4e0c      	ldr	r6, [pc, #48]	; (800400c <CDC_Itf_Receive+0x40c>)
 8003fda:	4a0d      	ldr	r2, [pc, #52]	; (8004010 <CDC_Itf_Receive+0x410>)
 8003fdc:	4913      	ldr	r1, [pc, #76]	; (800402c <CDC_Itf_Receive+0x42c>)
 8003fde:	4630      	mov	r0, r6
 8003fe0:	f006 fa20 	bl	800a424 <siprintf>
 8003fe4:	4a0c      	ldr	r2, [pc, #48]	; (8004018 <CDC_Itf_Receive+0x418>)
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003fea:	480c      	ldr	r0, [pc, #48]	; (800401c <CDC_Itf_Receive+0x41c>)
 8003fec:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8003ff6:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 8003ffa:	f7ff fdd6 	bl	8003baa <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 8003ffe:	2300      	movs	r3, #0
 8004000:	7023      	strb	r3, [r4, #0]
	*LP_Ram_Key_Address = 0;
 8004002:	4a0b      	ldr	r2, [pc, #44]	; (8004030 <CDC_Itf_Receive+0x430>)
 8004004:	e690      	b.n	8003d28 <CDC_Itf_Receive+0x128>
TempUserBuffer[i] = 0;//
 8004006:	5458      	strb	r0, [r3, r1]
for (i = 0; i < BuffLength; i++) // Buffer Empty
 8004008:	3301      	adds	r3, #1
 800400a:	e6a5      	b.n	8003d58 <CDC_Itf_Receive+0x158>
 800400c:	20009d28 	.word	0x20009d28
 8004010:	0002c314 	.word	0x0002c314
 8004014:	0800b6fc 	.word	0x0800b6fc
 8004018:	2000a912 	.word	0x2000a912
 800401c:	200086a4 	.word	0x200086a4
 8004020:	20009d24 	.word	0x20009d24
 8004024:	0800b73a 	.word	0x0800b73a
 8004028:	2000a914 	.word	0x2000a914
 800402c:	0800b782 	.word	0x0800b782
 8004030:	20017cf0 	.word	0x20017cf0

08004034 <Reboot_Handler>:
    .section	.text.Reboot_Handler
	//.weak	Reboot_Handler
	.type	Reboot_Handler, %function
Reboot_Handler:

               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 8004034:	4805      	ldr	r0, [pc, #20]	; (800404c <Reboot_Handler+0x18>)
                LDR     R1, =0x00000001 // ENABLE SYSCFG CLOCK
 8004036:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 8004038:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 800403a:	4805      	ldr	r0, [pc, #20]	; (8004050 <Reboot_Handler+0x1c>)
                LDR     R1, =0x00000001 // MAP ROM AT ZERO
 800403c:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 800403e:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 8004040:	4804      	ldr	r0, [pc, #16]	; (8004054 <Reboot_Handler+0x20>)
                LDR     SP,[R0, #0]     // SP @ +0
 8004042:	f8d0 d000 	ldr.w	sp, [r0]
                LDR     R0,[R0, #4]    //  PC @ +4
 8004046:	6840      	ldr	r0, [r0, #4]
                BX      R0
 8004048:	4700      	bx	r0
 800404a:	0000      	.short	0x0000
               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 800404c:	40021060 	.word	0x40021060
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 8004050:	40010000 	.word	0x40010000
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 8004054:	1fff0000 	.word	0x1fff0000

08004058 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 8004058:	4811      	ldr	r0, [pc, #68]	; (80040a0 <LoopForever+0x4>)
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 800405a:	4912      	ldr	r1, [pc, #72]	; (80040a4 <LoopForever+0x8>)
                LDR     R2, [R0, #0]
 800405c:	6802      	ldr	r2, [r0, #0]
                STR     R0, [R0, #0]     // Invalidate Bootloader_Key_Value
 800405e:	6000      	str	r0, [r0, #0]
                // zero data at Bootloader_Ram_Key_Address to avoid looping in DFU Mode

                CMP     R2, R1
 8004060:	428a      	cmp	r2, r1
                BEQ     Reboot_Handler    // Jump to DfuModeEntry Lable if Bootloader_Key_Value matches
 8004062:	f43f afe7 	beq.w	8004034 <Reboot_Handler>

                // Conitnue without entering DFU Mode


  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004066:	f8df d040 	ldr.w	sp, [pc, #64]	; 80040a8 <LoopForever+0xc>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800406a:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800406c:	e003      	b.n	8004076 <LoopCopyDataInit>

0800406e <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800406e:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <LoopForever+0x10>)
	ldr	r3, [r3, r1]
 8004070:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004072:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004074:	3104      	adds	r1, #4

08004076 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004076:	480e      	ldr	r0, [pc, #56]	; (80040b0 <LoopForever+0x14>)
	ldr	r3, =_edata
 8004078:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <LoopForever+0x18>)
	adds	r2, r0, r1
 800407a:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800407c:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800407e:	d3f6      	bcc.n	800406e <CopyDataInit>
	ldr	r2, =_sbss
 8004080:	4a0d      	ldr	r2, [pc, #52]	; (80040b8 <LoopForever+0x1c>)
	b	LoopFillZerobss
 8004082:	e002      	b.n	800408a <LoopFillZerobss>

08004084 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004084:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004086:	f842 3b04 	str.w	r3, [r2], #4

0800408a <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800408a:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <LoopForever+0x20>)
	cmp	r2, r3
 800408c:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800408e:	d3f9      	bcc.n	8004084 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004090:	f7fe ffda 	bl	8003048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004094:	f006 f8c2 	bl	800a21c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004098:	f7fc fd52 	bl	8000b40 <main>

0800409c <LoopForever>:

LoopForever:
    b LoopForever
 800409c:	e7fe      	b.n	800409c <LoopForever>
 800409e:	0000      	.short	0x0000
                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 80040a0:	20017ff0 	.word	0x20017ff0
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 80040a4:	deadbeef 	.word	0xdeadbeef
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80040a8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80040ac:	0800ba40 	.word	0x0800ba40
	ldr	r0, =_sdata
 80040b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80040b4:	2000046c 	.word	0x2000046c
	ldr	r2, =_sbss
 80040b8:	20000470 	.word	0x20000470
	ldr	r3, = _ebss
 80040bc:	2000ad48 	.word	0x2000ad48

080040c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040c0:	e7fe      	b.n	80040c0 <ADC1_2_IRQHandler>
	...

080040c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040c4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80040c6:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <HAL_InitTick+0x24>)
{
 80040c8:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80040d4:	f000 f892 	bl	80041fc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80040d8:	2200      	movs	r2, #0
 80040da:	4621      	mov	r1, r4
 80040dc:	f04f 30ff 	mov.w	r0, #4294967295
 80040e0:	f000 f84c 	bl	800417c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80040e4:	2000      	movs	r0, #0
 80040e6:	bd10      	pop	{r4, pc}
 80040e8:	20000004 	.word	0x20000004

080040ec <HAL_Init>:
{
 80040ec:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040ee:	2003      	movs	r0, #3
 80040f0:	f000 f832 	bl	8004158 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80040f4:	2000      	movs	r0, #0
 80040f6:	f7ff ffe5 	bl	80040c4 <HAL_InitTick>
  HAL_MspInit();
 80040fa:	f7fe ff07 	bl	8002f0c <HAL_MspInit>
}
 80040fe:	2000      	movs	r0, #0
 8004100:	bd08      	pop	{r3, pc}
	...

08004104 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8004104:	4a02      	ldr	r2, [pc, #8]	; (8004110 <HAL_IncTick+0xc>)
 8004106:	6813      	ldr	r3, [r2, #0]
 8004108:	3301      	adds	r3, #1
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	2000ad40 	.word	0x2000ad40

08004114 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004114:	4b01      	ldr	r3, [pc, #4]	; (800411c <HAL_GetTick+0x8>)
 8004116:	6818      	ldr	r0, [r3, #0]
}
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	2000ad40 	.word	0x2000ad40

08004120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004120:	b538      	push	{r3, r4, r5, lr}
 8004122:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8004124:	f7ff fff6 	bl	8004114 <HAL_GetTick>
 8004128:	4605      	mov	r5, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800412a:	f7ff fff3 	bl	8004114 <HAL_GetTick>
 800412e:	1b40      	subs	r0, r0, r5
 8004130:	42a0      	cmp	r0, r4
 8004132:	d3fa      	bcc.n	800412a <HAL_Delay+0xa>
  {
  }
}
 8004134:	bd38      	pop	{r3, r4, r5, pc}
	...

08004138 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004138:	4a02      	ldr	r2, [pc, #8]	; (8004144 <HAL_SuspendTick+0xc>)
 800413a:	6813      	ldr	r3, [r2, #0]
 800413c:	f023 0302 	bic.w	r3, r3, #2
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	4770      	bx	lr
 8004144:	e000e010 	.word	0xe000e010

08004148 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8004148:	4a02      	ldr	r2, [pc, #8]	; (8004154 <HAL_ResumeTick+0xc>)
 800414a:	6813      	ldr	r3, [r2, #0]
 800414c:	f043 0302 	orr.w	r3, r3, #2
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	4770      	bx	lr
 8004154:	e000e010 	.word	0xe000e010

08004158 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004158:	4a07      	ldr	r2, [pc, #28]	; (8004178 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800415a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800415c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004160:	041b      	lsls	r3, r3, #16
 8004162:	0c1b      	lsrs	r3, r3, #16
 8004164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8004168:	0200      	lsls	r0, r0, #8
 800416a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8004172:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004174:	60d3      	str	r3, [r2, #12]
 8004176:	4770      	bx	lr
 8004178:	e000ed00 	.word	0xe000ed00

0800417c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800417c:	4b17      	ldr	r3, [pc, #92]	; (80041dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800417e:	b530      	push	{r4, r5, lr}
 8004180:	68dc      	ldr	r4, [r3, #12]
 8004182:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004186:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800418a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800418c:	2b04      	cmp	r3, #4
 800418e:	bf28      	it	cs
 8004190:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004192:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004194:	f04f 0501 	mov.w	r5, #1
 8004198:	fa05 f303 	lsl.w	r3, r5, r3
 800419c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041a0:	bf8c      	ite	hi
 80041a2:	3c03      	subhi	r4, #3
 80041a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a6:	4019      	ands	r1, r3
 80041a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041aa:	fa05 f404 	lsl.w	r4, r5, r4
 80041ae:	3c01      	subs	r4, #1
 80041b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80041b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b4:	ea42 0201 	orr.w	r2, r2, r1
 80041b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041bc:	bfaf      	iteee	ge
 80041be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041c2:	f000 000f 	andlt.w	r0, r0, #15
 80041c6:	4b06      	ldrlt	r3, [pc, #24]	; (80041e0 <HAL_NVIC_SetPriority+0x64>)
 80041c8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ca:	bfa5      	ittet	ge
 80041cc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80041d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80041d8:	bd30      	pop	{r4, r5, pc}
 80041da:	bf00      	nop
 80041dc:	e000ed00 	.word	0xe000ed00
 80041e0:	e000ed14 	.word	0xe000ed14

080041e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80041e4:	0942      	lsrs	r2, r0, #5
 80041e6:	2301      	movs	r3, #1
 80041e8:	f000 001f 	and.w	r0, r0, #31
 80041ec:	fa03 f000 	lsl.w	r0, r3, r0
 80041f0:	4b01      	ldr	r3, [pc, #4]	; (80041f8 <HAL_NVIC_EnableIRQ+0x14>)
 80041f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80041f6:	4770      	bx	lr
 80041f8:	e000e100 	.word	0xe000e100

080041fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041fc:	3801      	subs	r0, #1
 80041fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004202:	d20a      	bcs.n	800421a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004206:	4a07      	ldr	r2, [pc, #28]	; (8004224 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004208:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800420a:	21f0      	movs	r1, #240	; 0xf0
 800420c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004210:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004212:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004214:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800421a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	e000e010 	.word	0xe000e010
 8004224:	e000ed00 	.word	0xe000ed00

08004228 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8004228:	4770      	bx	lr

0800422a <HAL_SYSTICK_IRQHandler>:
{
 800422a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800422c:	f7ff fffc 	bl	8004228 <HAL_SYSTICK_Callback>
 8004230:	bd08      	pop	{r3, pc}
	...

08004234 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004234:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004236:	2800      	cmp	r0, #0
 8004238:	d05b      	beq.n	80042f2 <HAL_DMA_Init+0xbe>
  {
    assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
  }
  
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800423a:	6801      	ldr	r1, [r0, #0]
 800423c:	4b2e      	ldr	r3, [pc, #184]	; (80042f8 <HAL_DMA_Init+0xc4>)
 800423e:	4299      	cmp	r1, r3
 8004240:	f04f 0414 	mov.w	r4, #20
 8004244:	d841      	bhi.n	80042ca <HAL_DMA_Init+0x96>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004246:	4a2d      	ldr	r2, [pc, #180]	; (80042fc <HAL_DMA_Init+0xc8>)
 8004248:	440a      	add	r2, r1
 800424a:	fbb2 f2f4 	udiv	r2, r2, r4
 800424e:	0092      	lsls	r2, r2, #2
 8004250:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004252:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8004256:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004258:	2302      	movs	r3, #2
 800425a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800425e:	6884      	ldr	r4, [r0, #8]
 8004260:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004262:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8004264:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8004266:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004268:	432b      	orrs	r3, r5
 800426a:	6945      	ldr	r5, [r0, #20]
 800426c:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800426e:	6985      	ldr	r5, [r0, #24]
 8004270:	432b      	orrs	r3, r5
 8004272:	69c5      	ldr	r5, [r0, #28]
 8004274:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8004276:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004278:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800427c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8004280:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8004282:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004284:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8004288:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800428a:	d011      	beq.n	80042b0 <HAL_DMA_Init+0x7c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800428c:	4b1c      	ldr	r3, [pc, #112]	; (8004300 <HAL_DMA_Init+0xcc>)
 800428e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004290:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004292:	429a      	cmp	r2, r3
 8004294:	f04f 030f 	mov.w	r3, #15
 8004298:	d11f      	bne.n	80042da <HAL_DMA_Init+0xa6>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 800429a:	491a      	ldr	r1, [pc, #104]	; (8004304 <HAL_DMA_Init+0xd0>)
 800429c:	680a      	ldr	r2, [r1, #0]
 800429e:	40a3      	lsls	r3, r4
 80042a0:	ea22 0303 	bic.w	r3, r2, r3
 80042a4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 80042a6:	6842      	ldr	r2, [r0, #4]
 80042a8:	680b      	ldr	r3, [r1, #0]
 80042aa:	40a2      	lsls	r2, r4
 80042ac:	431a      	orrs	r2, r3
 80042ae:	600a      	str	r2, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
    }
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80042b0:	2300      	movs	r3, #0

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80042b2:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042b4:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 80042b6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80042b8:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80042ba:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80042bc:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State  = HAL_DMA_STATE_READY;
 80042be:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042c2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  return HAL_OK;
 80042c6:	4618      	mov	r0, r3
 80042c8:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80042ca:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <HAL_DMA_Init+0xd4>)
 80042cc:	440b      	add	r3, r1
 80042ce:	fbb3 f3f4 	udiv	r3, r3, r4
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80042d6:	4b0d      	ldr	r3, [pc, #52]	; (800430c <HAL_DMA_Init+0xd8>)
 80042d8:	e7bd      	b.n	8004256 <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 80042da:	490d      	ldr	r1, [pc, #52]	; (8004310 <HAL_DMA_Init+0xdc>)
 80042dc:	680a      	ldr	r2, [r1, #0]
 80042de:	40a3      	lsls	r3, r4
 80042e0:	ea22 0303 	bic.w	r3, r2, r3
 80042e4:	600b      	str	r3, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 80042e6:	6843      	ldr	r3, [r0, #4]
 80042e8:	680a      	ldr	r2, [r1, #0]
 80042ea:	40a3      	lsls	r3, r4
 80042ec:	4313      	orrs	r3, r2
 80042ee:	600b      	str	r3, [r1, #0]
 80042f0:	e7de      	b.n	80042b0 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 80042f2:	2001      	movs	r0, #1
}
 80042f4:	bd30      	pop	{r4, r5, pc}
 80042f6:	bf00      	nop
 80042f8:	40020407 	.word	0x40020407
 80042fc:	bffdfff8 	.word	0xbffdfff8
 8004300:	40020000 	.word	0x40020000
 8004304:	400200a8 	.word	0x400200a8
 8004308:	bffdfbf8 	.word	0xbffdfbf8
 800430c:	40020400 	.word	0x40020400
 8004310:	400204a8 	.word	0x400204a8

08004314 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004314:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004316:	2800      	cmp	r0, #0
 8004318:	d034      	beq.n	8004384 <HAL_DMA_DeInit+0x70>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800431a:	6801      	ldr	r1, [r0, #0]
 800431c:	680b      	ldr	r3, [r1, #0]
 800431e:	f023 0301 	bic.w	r3, r3, #1
 8004322:	600b      	str	r3, [r1, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	600b      	str	r3, [r1, #0]

  /* Calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004328:	4b17      	ldr	r3, [pc, #92]	; (8004388 <HAL_DMA_DeInit+0x74>)
 800432a:	4299      	cmp	r1, r3
 800432c:	f04f 0414 	mov.w	r4, #20
 8004330:	d820      	bhi.n	8004374 <HAL_DMA_DeInit+0x60>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004332:	4a16      	ldr	r2, [pc, #88]	; (800438c <HAL_DMA_DeInit+0x78>)
 8004334:	440a      	add	r2, r1
 8004336:	fbb2 f2f4 	udiv	r2, r2, r4
 800433a:	0092      	lsls	r2, r2, #2
 800433c:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800433e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8004342:	6403      	str	r3, [r0, #64]	; 0x40
  }
  

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004344:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004346:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004348:	2301      	movs	r3, #1
 800434a:	408b      	lsls	r3, r1
 800434c:	6053      	str	r3, [r2, #4]

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 800434e:	4b10      	ldr	r3, [pc, #64]	; (8004390 <HAL_DMA_DeInit+0x7c>)
 8004350:	429a      	cmp	r2, r3
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 8004352:	bf0c      	ite	eq
 8004354:	4c0f      	ldreq	r4, [pc, #60]	; (8004394 <HAL_DMA_DeInit+0x80>)
  }
  else  
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 8004356:	4c10      	ldrne	r4, [pc, #64]	; (8004398 <HAL_DMA_DeInit+0x84>)
 8004358:	230f      	movs	r3, #15
 800435a:	6822      	ldr	r2, [r4, #0]
 800435c:	408b      	lsls	r3, r1
 800435e:	ea22 0303 	bic.w	r3, r2, r3
 8004362:	6023      	str	r3, [r4, #0]
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004364:	2300      	movs	r3, #0
 8004366:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004368:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_RESET;
 800436c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

  return HAL_OK;
 8004370:	4618      	mov	r0, r3
 8004372:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004374:	4b09      	ldr	r3, [pc, #36]	; (800439c <HAL_DMA_DeInit+0x88>)
 8004376:	440b      	add	r3, r1
 8004378:	fbb3 f3f4 	udiv	r3, r3, r4
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004380:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <HAL_DMA_DeInit+0x8c>)
 8004382:	e7de      	b.n	8004342 <HAL_DMA_DeInit+0x2e>
    return HAL_ERROR;
 8004384:	2001      	movs	r0, #1
}
 8004386:	bd10      	pop	{r4, pc}
 8004388:	40020407 	.word	0x40020407
 800438c:	bffdfff8 	.word	0xbffdfff8
 8004390:	40020000 	.word	0x40020000
 8004394:	400200a8 	.word	0x400200a8
 8004398:	400204a8 	.word	0x400204a8
 800439c:	bffdfbf8 	.word	0xbffdfbf8
 80043a0:	40020400 	.word	0x40020400

080043a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043a4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80043a6:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 80043aa:	2c01      	cmp	r4, #1
 80043ac:	d036      	beq.n	800441c <HAL_DMA_Start_IT+0x78>
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043ae:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 80043b2:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80043b4:	b2ed      	uxtb	r5, r5
 80043b6:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80043b8:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 80043bc:	f04f 0600 	mov.w	r6, #0
 80043c0:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 80043c4:	d128      	bne.n	8004418 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043c6:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043ca:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043cc:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80043ce:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80043d0:	6c47      	ldr	r7, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 80043d2:	f026 0601 	bic.w	r6, r6, #1
 80043d6:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80043d8:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80043da:	40bd      	lsls	r5, r7
 80043dc:	6075      	str	r5, [r6, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043de:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043e0:	6883      	ldr	r3, [r0, #8]
 80043e2:	6805      	ldr	r5, [r0, #0]
 80043e4:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80043e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043e8:	bf0b      	itete	eq
 80043ea:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80043ec:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80043ee:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80043f0:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80043f2:	b14b      	cbz	r3, 8004408 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80043fa:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004404:	2000      	movs	r0, #0
 8004406:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	f023 0304 	bic.w	r3, r3, #4
 800440e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	f043 030a 	orr.w	r3, r3, #10
 8004416:	e7f0      	b.n	80043fa <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 8004418:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 800441c:	2002      	movs	r0, #2
}
 800441e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004420 <HAL_DMA_Abort>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004420:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004424:	2b02      	cmp	r3, #2
 8004426:	d003      	beq.n	8004430 <HAL_DMA_Abort+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004428:	2304      	movs	r3, #4
 800442a:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800442c:	2001      	movs	r0, #1
 800442e:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004430:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004432:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	f022 020e 	bic.w	r2, r2, #14
 800443a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	f022 0201 	bic.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004444:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004446:	2201      	movs	r2, #1
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);      
 800444e:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8004450:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);      
 8004454:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 8004458:	4618      	mov	r0, r3
}
 800445a:	4770      	bx	lr

0800445c <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800445c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800445e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8004460:	6803      	ldr	r3, [r0, #0]
{
 8004462:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004464:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004466:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004468:	2404      	movs	r4, #4
 800446a:	4094      	lsls	r4, r2
 800446c:	4226      	tst	r6, r4
 800446e:	d00e      	beq.n	800448e <HAL_DMA_IRQHandler+0x32>
 8004470:	f015 0f04 	tst.w	r5, #4
 8004474:	d00b      	beq.n	800448e <HAL_DMA_IRQHandler+0x32>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800447a:	bf5e      	ittt	pl
 800447c:	681a      	ldrpl	r2, [r3, #0]
 800447e:	f022 0204 	bicpl.w	r2, r2, #4
 8004482:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8004484:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8004486:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8004488:	b373      	cbz	r3, 80044e8 <HAL_DMA_IRQHandler+0x8c>
}
 800448a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800448c:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800448e:	2402      	movs	r4, #2
 8004490:	4094      	lsls	r4, r2
 8004492:	4226      	tst	r6, r4
 8004494:	d012      	beq.n	80044bc <HAL_DMA_IRQHandler+0x60>
 8004496:	f015 0f02 	tst.w	r5, #2
 800449a:	d00f      	beq.n	80044bc <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	0695      	lsls	r5, r2, #26
 80044a0:	d406      	bmi.n	80044b0 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	f022 020a 	bic.w	r2, r2, #10
 80044a8:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80044aa:	2301      	movs	r3, #1
 80044ac:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80044b0:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 80044b2:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80044b4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 80044b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80044ba:	e7e5      	b.n	8004488 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80044bc:	2408      	movs	r4, #8
 80044be:	4094      	lsls	r4, r2
 80044c0:	4234      	tst	r4, r6
 80044c2:	d011      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x8c>
 80044c4:	072c      	lsls	r4, r5, #28
 80044c6:	d50f      	bpl.n	80044e8 <HAL_DMA_IRQHandler+0x8c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044c8:	681c      	ldr	r4, [r3, #0]
 80044ca:	f024 040e 	bic.w	r4, r4, #14
 80044ce:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80044d0:	2301      	movs	r3, #1
 80044d2:	fa03 f202 	lsl.w	r2, r3, r2
 80044d6:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044d8:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80044da:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80044de:	2300      	movs	r3, #0
 80044e0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80044e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80044e6:	e7cf      	b.n	8004488 <HAL_DMA_IRQHandler+0x2c>
}
 80044e8:	bc70      	pop	{r4, r5, r6}
 80044ea:	4770      	bx	lr

080044ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80044f2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f4:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80046a0 <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80044f8:	4c67      	ldr	r4, [pc, #412]	; (8004698 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 80044fa:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 80044fc:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80044fe:	9a01      	ldr	r2, [sp, #4]
 8004500:	40da      	lsrs	r2, r3
 8004502:	d102      	bne.n	800450a <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8004504:	b005      	add	sp, #20
 8004506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800450a:	2601      	movs	r6, #1
    if(iocurrent)
 800450c:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800450e:	409e      	lsls	r6, r3
    if(iocurrent)
 8004510:	ea12 0e06 	ands.w	lr, r2, r6
 8004514:	f000 80b1 	beq.w	800467a <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004518:	684a      	ldr	r2, [r1, #4]
 800451a:	f022 0710 	bic.w	r7, r2, #16
 800451e:	2f02      	cmp	r7, #2
 8004520:	d116      	bne.n	8004550 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8004522:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8004526:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800452a:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800452e:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004532:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8004536:	f04f 0c0f 	mov.w	ip, #15
 800453a:	fa0c fc0a 	lsl.w	ip, ip, sl
 800453e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004542:	690d      	ldr	r5, [r1, #16]
 8004544:	fa05 f50a 	lsl.w	r5, r5, sl
 8004548:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800454c:	f8c9 5020 	str.w	r5, [r9, #32]
 8004550:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8004554:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8004556:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800455a:	fa05 f50c 	lsl.w	r5, r5, ip
 800455e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004560:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8004564:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004568:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800456c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800456e:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004572:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8004574:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004578:	d811      	bhi.n	800459e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800457a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 800457c:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8004580:	68cf      	ldr	r7, [r1, #12]
 8004582:	fa07 f70c 	lsl.w	r7, r7, ip
 8004586:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 800458a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800458c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800458e:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004592:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8004596:	409f      	lsls	r7, r3
 8004598:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 800459c:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800459e:	f1ba 0f03 	cmp.w	sl, #3
 80045a2:	d107      	bne.n	80045b4 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80045a4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80045a6:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80045aa:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 80045ae:	409f      	lsls	r7, r3
 80045b0:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 80045b2:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80045b4:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80045b6:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80045b8:	688e      	ldr	r6, [r1, #8]
 80045ba:	fa06 f60c 	lsl.w	r6, r6, ip
 80045be:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80045c0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045c2:	00d5      	lsls	r5, r2, #3
 80045c4:	d559      	bpl.n	800467a <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045c6:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80045ca:	f045 0501 	orr.w	r5, r5, #1
 80045ce:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 80045d2:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80045d6:	f023 0603 	bic.w	r6, r3, #3
 80045da:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80045de:	f005 0501 	and.w	r5, r5, #1
 80045e2:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80045e6:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045e8:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ec:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80045ee:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045f0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80045f4:	270f      	movs	r7, #15
 80045f6:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80045fa:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045fe:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8004602:	d03c      	beq.n	800467e <HAL_GPIO_Init+0x192>
 8004604:	4d25      	ldr	r5, [pc, #148]	; (800469c <HAL_GPIO_Init+0x1b0>)
 8004606:	42a8      	cmp	r0, r5
 8004608:	d03b      	beq.n	8004682 <HAL_GPIO_Init+0x196>
 800460a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800460e:	42a8      	cmp	r0, r5
 8004610:	d039      	beq.n	8004686 <HAL_GPIO_Init+0x19a>
 8004612:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004616:	42a8      	cmp	r0, r5
 8004618:	d037      	beq.n	800468a <HAL_GPIO_Init+0x19e>
 800461a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800461e:	42a8      	cmp	r0, r5
 8004620:	d035      	beq.n	800468e <HAL_GPIO_Init+0x1a2>
 8004622:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004626:	42a8      	cmp	r0, r5
 8004628:	d033      	beq.n	8004692 <HAL_GPIO_Init+0x1a6>
 800462a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800462e:	42a8      	cmp	r0, r5
 8004630:	bf14      	ite	ne
 8004632:	2507      	movne	r5, #7
 8004634:	2506      	moveq	r5, #6
 8004636:	fa05 f50c 	lsl.w	r5, r5, ip
 800463a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800463c:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 800463e:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8004640:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004644:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 8004646:	bf54      	ite	pl
 8004648:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800464a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 800464e:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8004650:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004652:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 8004654:	bf54      	ite	pl
 8004656:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8004658:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 800465c:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 800465e:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004660:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 8004662:	bf54      	ite	pl
 8004664:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8004666:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 800466a:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 800466c:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800466e:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 8004670:	bf54      	ite	pl
 8004672:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8004674:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8004678:	60e5      	str	r5, [r4, #12]
    position++;
 800467a:	3301      	adds	r3, #1
 800467c:	e73f      	b.n	80044fe <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800467e:	2500      	movs	r5, #0
 8004680:	e7d9      	b.n	8004636 <HAL_GPIO_Init+0x14a>
 8004682:	2501      	movs	r5, #1
 8004684:	e7d7      	b.n	8004636 <HAL_GPIO_Init+0x14a>
 8004686:	2502      	movs	r5, #2
 8004688:	e7d5      	b.n	8004636 <HAL_GPIO_Init+0x14a>
 800468a:	2503      	movs	r5, #3
 800468c:	e7d3      	b.n	8004636 <HAL_GPIO_Init+0x14a>
 800468e:	2504      	movs	r5, #4
 8004690:	e7d1      	b.n	8004636 <HAL_GPIO_Init+0x14a>
 8004692:	2505      	movs	r5, #5
 8004694:	e7cf      	b.n	8004636 <HAL_GPIO_Init+0x14a>
 8004696:	bf00      	nop
 8004698:	40010400 	.word	0x40010400
 800469c:	48000400 	.word	0x48000400
 80046a0:	40021000 	.word	0x40021000

080046a4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046a4:	6903      	ldr	r3, [r0, #16]
 80046a6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80046a8:	bf14      	ite	ne
 80046aa:	2001      	movne	r0, #1
 80046ac:	2000      	moveq	r0, #0
 80046ae:	4770      	bx	lr

080046b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80046b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80046b4:	4604      	mov	r4, r0
{
 80046b6:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 80046b8:	2800      	cmp	r0, #0
 80046ba:	d07c      	beq.n	80047b6 <HAL_PCD_Init+0x106>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  
  if(hpcd->State == HAL_PCD_STATE_RESET)
 80046bc:	f890 3385 	ldrb.w	r3, [r0, #901]	; 0x385
 80046c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80046c4:	b91b      	cbnz	r3, 80046ce <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80046c6:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046ca:	f7fe fdd1 	bl	8003270 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046ce:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80046d0:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 80046d2:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80046d6:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  __HAL_PCD_DISABLE(hpcd);
 80046da:	f002 fda6 	bl	800722a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80046de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046e0:	466e      	mov	r6, sp
 80046e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80046e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80046e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80046ec:	e886 0003 	stmia.w	r6, {r0, r1}
 80046f0:	f104 0804 	add.w	r8, r4, #4
 80046f4:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80046f8:	6820      	ldr	r0, [r4, #0]
 80046fa:	f002 fd7c 	bl	80071f6 <USB_CoreInit>

  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80046fe:	2100      	movs	r1, #0
 8004700:	6820      	ldr	r0, [r4, #0]
 8004702:	f002 fd98 	bl	8007236 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004706:	2200      	movs	r2, #0
 8004708:	6860      	ldr	r0, [r4, #4]
 800470a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800470e:	f104 0510 	add.w	r5, r4, #16
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8004712:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8004714:	4611      	mov	r1, r2
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004716:	4282      	cmp	r2, r0
 8004718:	f103 031c 	add.w	r3, r3, #28
 800471c:	d13b      	bne.n	8004796 <HAL_PCD_Init+0xe6>
 800471e:	2200      	movs	r2, #0
 8004720:	4623      	mov	r3, r4
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 8004722:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8004724:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
    hpcd->IN_ep[index].tx_fifo_num = index;
 8004728:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (index = 0; index < 15 ; index++)
 800472c:	3201      	adds	r2, #1
 800472e:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0;
 8004730:	f883 71e1 	strb.w	r7, [r3, #481]	; 0x1e1
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8004734:	f883 71e3 	strb.w	r7, [r3, #483]	; 0x1e3
    hpcd->OUT_ep[index].maxpacket = 0;
 8004738:	f8c3 71e8 	str.w	r7, [r3, #488]	; 0x1e8
    hpcd->OUT_ep[index].xfer_buff = 0;
 800473c:	f8c3 71ec 	str.w	r7, [r3, #492]	; 0x1ec
    hpcd->OUT_ep[index].xfer_len = 0;
 8004740:	f8c3 71f4 	str.w	r7, [r3, #500]	; 0x1f4
 8004744:	f103 031c 	add.w	r3, r3, #28
  for (index = 0; index < 15 ; index++)
 8004748:	d1ec      	bne.n	8004724 <HAL_PCD_Init+0x74>
  }

  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 800474a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800474c:	466e      	mov	r6, sp
 800474e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004752:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004754:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004758:	e886 0003 	stmia.w	r6, {r0, r1}
 800475c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8004760:	6820      	ldr	r0, [r4, #0]
 8004762:	f002 fd7f 	bl	8007264 <USB_DevInit>

  hpcd->USB_Address = 0;
  
  hpcd->State= HAL_PCD_STATE_READY;
 8004766:	2301      	movs	r3, #1
  hpcd->USB_Address = 0;
 8004768:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State= HAL_PCD_STATE_READY;
 800476c:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  
   /* Activate LPM */
  if (hpcd->Init.lpm_enable ==1)
 8004770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004772:	2b01      	cmp	r3, #1
 8004774:	d102      	bne.n	800477c <HAL_PCD_Init+0xcc>
  {
    HAL_PCDEx_ActivateLPM(hpcd);
 8004776:	4620      	mov	r0, r4
 8004778:	f000 fcb3 	bl	80050e2 <HAL_PCDEx_ActivateLPM>
  }  
  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable ==1)
 800477c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800477e:	2b01      	cmp	r3, #1
 8004780:	d102      	bne.n	8004788 <HAL_PCD_Init+0xd8>
  {
    HAL_PCDEx_ActivateBCD(hpcd);
 8004782:	4620      	mov	r0, r4
 8004784:	f000 fcc0 	bl	8005108 <HAL_PCDEx_ActivateBCD>
  }
  USB_DevDisconnect (hpcd->Instance);  
 8004788:	6820      	ldr	r0, [r4, #0]
 800478a:	f003 f84b 	bl	8007824 <USB_DevDisconnect>
  return HAL_OK;
 800478e:	2000      	movs	r0, #0
}
 8004790:	b00a      	add	sp, #40	; 0x28
 8004792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hpcd->IN_ep[index].num = index;
 8004796:	f803 2c1c 	strb.w	r2, [r3, #-28]
    hpcd->IN_ep[index].tx_fifo_num = index;
 800479a:	f823 2c16 	strh.w	r2, [r3, #-22]
    hpcd->IN_ep[index].is_in = 1;
 800479e:	f803 6c1b 	strb.w	r6, [r3, #-27]
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80047a2:	f803 1c19 	strb.w	r1, [r3, #-25]
    hpcd->IN_ep[index].maxpacket =  0;
 80047a6:	f843 1c14 	str.w	r1, [r3, #-20]
    hpcd->IN_ep[index].xfer_buff = 0;
 80047aa:	f843 1c10 	str.w	r1, [r3, #-16]
    hpcd->IN_ep[index].xfer_len = 0;
 80047ae:	f843 1c08 	str.w	r1, [r3, #-8]
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80047b2:	3201      	adds	r2, #1
 80047b4:	e7af      	b.n	8004716 <HAL_PCD_Init+0x66>
    return HAL_ERROR;
 80047b6:	2001      	movs	r0, #1
 80047b8:	e7ea      	b.n	8004790 <HAL_PCD_Init+0xe0>

080047ba <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 80047ba:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 80047be:	2b01      	cmp	r3, #1
{ 
 80047c0:	b510      	push	{r4, lr}
 80047c2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80047c4:	d00c      	beq.n	80047e0 <HAL_PCD_Start+0x26>
 80047c6:	2301      	movs	r3, #1
 80047c8:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  USB_DevConnect (hpcd->Instance);
 80047cc:	6800      	ldr	r0, [r0, #0]
 80047ce:	f003 f81d 	bl	800780c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80047d2:	6820      	ldr	r0, [r4, #0]
 80047d4:	f002 fd23 	bl	800721e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 80047d8:	2000      	movs	r0, #0
 80047da:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80047de:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80047e0:	2002      	movs	r0, #2
}
 80047e2:	bd10      	pop	{r4, pc}

080047e4 <HAL_PCD_Stop>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 80047e4:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 80047e8:	2b01      	cmp	r3, #1
{ 
 80047ea:	b510      	push	{r4, lr}
 80047ec:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80047ee:	d00f      	beq.n	8004810 <HAL_PCD_Stop+0x2c>
 80047f0:	2301      	movs	r3, #1
 80047f2:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  __HAL_PCD_DISABLE(hpcd);
 80047f6:	6800      	ldr	r0, [r0, #0]
 80047f8:	f002 fd17 	bl	800722a <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 80047fc:	6820      	ldr	r0, [r4, #0]
 80047fe:	f002 ffd4 	bl	80077aa <USB_StopDevice>
  USB_DevDisconnect (hpcd->Instance);
 8004802:	6820      	ldr	r0, [r4, #0]
 8004804:	f003 f80e 	bl	8007824 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd); 
 8004808:	2000      	movs	r0, #0
 800480a:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
 800480e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8004810:	2002      	movs	r0, #2
  return HAL_OK;
}
 8004812:	bd10      	pop	{r4, pc}

08004814 <HAL_PCD_DeInit>:
{
 8004814:	b510      	push	{r4, lr}
  if(hpcd == NULL)
 8004816:	4604      	mov	r4, r0
 8004818:	b158      	cbz	r0, 8004832 <HAL_PCD_DeInit+0x1e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 800481a:	2303      	movs	r3, #3
 800481c:	f880 3385 	strb.w	r3, [r0, #901]	; 0x385
  HAL_PCD_Stop(hpcd);
 8004820:	f7ff ffe0 	bl	80047e4 <HAL_PCD_Stop>
  HAL_PCD_MspDeInit(hpcd);
 8004824:	4620      	mov	r0, r4
 8004826:	f7fe fd61 	bl	80032ec <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET; 
 800482a:	2000      	movs	r0, #0
 800482c:	f884 0385 	strb.w	r0, [r4, #901]	; 0x385
  return HAL_OK;
 8004830:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004832:	2001      	movs	r0, #1
}
 8004834:	bd10      	pop	{r4, pc}
	...

08004838 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800483c:	6807      	ldr	r7, [r0, #0]
{
 800483e:	b087      	sub	sp, #28
 8004840:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep = NULL;
  uint32_t hclk = 80000000;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004842:	4638      	mov	r0, r7
 8004844:	f003 f828 	bl	8007898 <USB_GetMode>
 8004848:	9002      	str	r0, [sp, #8]
 800484a:	2800      	cmp	r0, #0
 800484c:	f040 8155 	bne.w	8004afa <HAL_PCD_IRQHandler+0x2c2>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8004850:	6820      	ldr	r0, [r4, #0]
 8004852:	f002 fff3 	bl	800783c <USB_ReadInterrupts>
 8004856:	2800      	cmp	r0, #0
 8004858:	f000 814f 	beq.w	8004afa <HAL_PCD_IRQHandler+0x2c2>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800485c:	6820      	ldr	r0, [r4, #0]
 800485e:	f002 ffed 	bl	800783c <USB_ReadInterrupts>
 8004862:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004864:	bf48      	it	mi
 8004866:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004868:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800486a:	bf42      	ittt	mi
 800486c:	6953      	ldrmi	r3, [r2, #20]
 800486e:	f003 0302 	andmi.w	r3, r3, #2
 8004872:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004874:	f002 ffe2 	bl	800783c <USB_ReadInterrupts>
 8004878:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 800487c:	d00c      	beq.n	8004898 <HAL_PCD_IRQHandler+0x60>
    {
      epnum = 0;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800487e:	6820      	ldr	r0, [r4, #0]
 8004880:	f002 ffe0 	bl	8007844 <USB_ReadDevAllOutEpInterrupt>
 8004884:	f507 6930 	add.w	r9, r7, #2816	; 0xb00
 8004888:	4680      	mov	r8, r0
 800488a:	46a3      	mov	fp, r4
      
      while ( ep_intr )
 800488c:	464e      	mov	r6, r9
      epnum = 0;
 800488e:	2500      	movs	r5, #0
      while ( ep_intr )
 8004890:	f1b8 0f00 	cmp.w	r8, #0
 8004894:	f040 8134 	bne.w	8004b00 <HAL_PCD_IRQHandler+0x2c8>
        epnum++;
        ep_intr >>= 1;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004898:	6820      	ldr	r0, [r4, #0]
 800489a:	f002 ffcf 	bl	800783c <USB_ReadInterrupts>
 800489e:	0342      	lsls	r2, r0, #13
 80048a0:	d50b      	bpl.n	80048ba <HAL_PCD_IRQHandler+0x82>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80048a2:	6820      	ldr	r0, [r4, #0]
 80048a4:	f002 ffd6 	bl	8007854 <USB_ReadDevAllInEpInterrupt>
 80048a8:	4626      	mov	r6, r4
 80048aa:	4683      	mov	fp, r0
 80048ac:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      
      epnum = 0;
 80048b0:	2500      	movs	r5, #0
      
      while ( ep_intr )
 80048b2:	f1bb 0f00 	cmp.w	fp, #0
 80048b6:	f040 81a1 	bne.w	8004bfc <HAL_PCD_IRQHandler+0x3c4>
        ep_intr >>= 1;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80048ba:	6820      	ldr	r0, [r4, #0]
 80048bc:	f002 ffbe 	bl	800783c <USB_ReadInterrupts>
 80048c0:	2800      	cmp	r0, #0
 80048c2:	da15      	bge.n	80048f0 <HAL_PCD_IRQHandler+0xb8>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048c4:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
      
      if(hpcd->LPM_State == LPM_L1)
 80048d0:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	f040 822c 	bne.w	8004d32 <HAL_PCD_IRQHandler+0x4fa>
      {
        hpcd->LPM_State = LPM_L0;
 80048da:	2100      	movs	r1, #0
 80048dc:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80048e0:	4620      	mov	r0, r4
 80048e2:	f000 fc1b 	bl	800511c <HAL_PCDEx_LPM_Callback>
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80048e6:	6822      	ldr	r2, [r4, #0]
 80048e8:	6953      	ldr	r3, [r2, #20]
 80048ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048ee:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80048f0:	6820      	ldr	r0, [r4, #0]
 80048f2:	f002 ffa3 	bl	800783c <USB_ReadInterrupts>
 80048f6:	0503      	lsls	r3, r0, #20
 80048f8:	d50b      	bpl.n	8004912 <HAL_PCD_IRQHandler+0xda>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80048fa:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80048fe:	07de      	lsls	r6, r3, #31
 8004900:	d502      	bpl.n	8004908 <HAL_PCD_IRQHandler+0xd0>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8004902:	4620      	mov	r0, r4
 8004904:	f7fe fd26 	bl	8003354 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004908:	6822      	ldr	r2, [r4, #0]
 800490a:	6953      	ldr	r3, [r2, #20]
 800490c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004910:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle LPM Interrupt */ 
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004912:	6820      	ldr	r0, [r4, #0]
 8004914:	f002 ff92 	bl	800783c <USB_ReadInterrupts>
 8004918:	0100      	lsls	r0, r0, #4
 800491a:	d514      	bpl.n	8004946 <HAL_PCD_IRQHandler+0x10e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	695a      	ldr	r2, [r3, #20]
 8004920:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004924:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8004926:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 800492a:	2a00      	cmp	r2, #0
 800492c:	f040 8205 	bne.w	8004d3a <HAL_PCD_IRQHandler+0x502>
      {   
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8004930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8004932:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8004934:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8004938:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 800493c:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004940:	4620      	mov	r0, r4
 8004942:	f000 fbeb 	bl	800511c <HAL_PCDEx_LPM_Callback>
        HAL_PCD_SuspendCallback(hpcd);
      }
    }
    
    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004946:	6820      	ldr	r0, [r4, #0]
 8004948:	f002 ff78 	bl	800783c <USB_ReadInterrupts>
 800494c:	04c1      	lsls	r1, r0, #19
 800494e:	d537      	bpl.n	80049c0 <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8004950:	f507 6600 	add.w	r6, r7, #2048	; 0x800
 8004954:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 8004956:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8004958:	f023 0301 	bic.w	r3, r3, #1
 800495c:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 800495e:	2100      	movs	r1, #0
 8004960:	f002 fd18 	bl	8007394 <USB_FlushTxFifo>
      
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004964:	6861      	ldr	r1, [r4, #4]
 8004966:	f507 6310 	add.w	r3, r7, #2304	; 0x900
      {
        USBx_INEP(index)->DIEPINT = 0xFF;
 800496a:	22ff      	movs	r2, #255	; 0xff
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 800496c:	9802      	ldr	r0, [sp, #8]
 800496e:	4288      	cmp	r0, r1
 8004970:	f040 81e7 	bne.w	8004d42 <HAL_PCD_IRQHandler+0x50a>
        USBx_OUTEP(index)->DOEPINT = 0xFF;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8004974:	f04f 33ff 	mov.w	r3, #4294967295
 8004978:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 800497a:	69f3      	ldr	r3, [r6, #28]
 800497c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004980:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8004982:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 81e4 	beq.w	8004d52 <HAL_PCD_IRQHandler+0x51a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 800498a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 800498e:	f043 030b 	orr.w	r3, r3, #11
 8004992:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8004996:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8004998:	f043 030b 	orr.w	r3, r3, #11
 800499c:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800499e:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80049a2:	7c21      	ldrb	r1, [r4, #16]
 80049a4:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80049a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80049aa:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80049ae:	f504 7262 	add.w	r2, r4, #904	; 0x388
 80049b2:	f002 ff90 	bl	80078d6 <USB_EP0_OutStart>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80049b6:	6822      	ldr	r2, [r4, #0]
 80049b8:	6953      	ldr	r3, [r2, #20]
 80049ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049be:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80049c0:	6820      	ldr	r0, [r4, #0]
 80049c2:	f002 ff3b 	bl	800783c <USB_ReadInterrupts>
 80049c6:	0482      	lsls	r2, r0, #18
 80049c8:	d520      	bpl.n	8004a0c <HAL_PCD_IRQHandler+0x1d4>
    {
      USB_ActivateSetup(hpcd->Instance);
 80049ca:	6820      	ldr	r0, [r4, #0]
 80049cc:	f002 ff68 	bl	80078a0 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80049d0:	6822      	ldr	r2, [r4, #0]
 80049d2:	68d3      	ldr	r3, [r2, #12]
 80049d4:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80049d8:	60d3      	str	r3, [r2, #12]
      
      hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 80049da:	2303      	movs	r3, #3
 80049dc:	60e3      	str	r3, [r4, #12]
      hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ; 
 80049de:	2340      	movs	r3, #64	; 0x40
 80049e0:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */

      /* Get hclk frequency value */
      hclk = HAL_RCC_GetHCLKFreq();
 80049e2:	f000 febb 	bl	800575c <HAL_RCC_GetHCLKFreq>
    
      if((hclk >= 14200000)&&(hclk < 15000000))
 80049e6:	4b82      	ldr	r3, [pc, #520]	; (8004bf0 <HAL_PCD_IRQHandler+0x3b8>)
 80049e8:	4a82      	ldr	r2, [pc, #520]	; (8004bf4 <HAL_PCD_IRQHandler+0x3bc>)
 80049ea:	4403      	add	r3, r0
 80049ec:	4293      	cmp	r3, r2
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	f200 81b8 	bhi.w	8004d64 <HAL_PCD_IRQHandler+0x52c>
      {
        /* hclk Clock Range between 14.2-15 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
      }
      
      else /* if(hclk >= 32000000) */
      {
        /* hclk Clock Range between 32-80 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 80049fa:	60da      	str	r2, [r3, #12]
      }  
      
      HAL_PCD_ResetCallback(hpcd);
 80049fc:	4620      	mov	r0, r4
 80049fe:	f7fe fc9c 	bl	800333a <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004a02:	6822      	ldr	r2, [r4, #0]
 8004a04:	6953      	ldr	r3, [r2, #20]
 8004a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a0a:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004a0c:	6820      	ldr	r0, [r4, #0]
 8004a0e:	f002 ff15 	bl	800783c <USB_ReadInterrupts>
 8004a12:	06c3      	lsls	r3, r0, #27
 8004a14:	d52b      	bpl.n	8004a6e <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a16:	6822      	ldr	r2, [r4, #0]
 8004a18:	6993      	ldr	r3, [r2, #24]
 8004a1a:	f023 0310 	bic.w	r3, r3, #16
 8004a1e:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8004a20:	6a3e      	ldr	r6, [r7, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004a22:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8004a26:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004a28:	f006 090f 	and.w	r9, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004a2c:	f040 81ea 	bne.w	8004e04 <HAL_PCD_IRQHandler+0x5cc>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8004a30:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004a34:	421e      	tst	r6, r3
 8004a36:	d015      	beq.n	8004a64 <HAL_PCD_IRQHandler+0x22c>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8004a38:	f04f 081c 	mov.w	r8, #28
 8004a3c:	fb08 4809 	mla	r8, r8, r9, r4
 8004a40:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8004a44:	4632      	mov	r2, r6
 8004a46:	f8d8 11ec 	ldr.w	r1, [r8, #492]	; 0x1ec
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	f002 fe65 	bl	800771a <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a50:	f8d8 31ec 	ldr.w	r3, [r8, #492]	; 0x1ec
 8004a54:	4433      	add	r3, r6
 8004a56:	f8c8 31ec 	str.w	r3, [r8, #492]	; 0x1ec
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a5a:	f8d8 31f8 	ldr.w	r3, [r8, #504]	; 0x1f8
 8004a5e:	441e      	add	r6, r3
 8004a60:	f8c8 61f8 	str.w	r6, [r8, #504]	; 0x1f8
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a64:	6822      	ldr	r2, [r4, #0]
 8004a66:	6993      	ldr	r3, [r2, #24]
 8004a68:	f043 0310 	orr.w	r3, r3, #16
 8004a6c:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004a6e:	6820      	ldr	r0, [r4, #0]
 8004a70:	f002 fee4 	bl	800783c <USB_ReadInterrupts>
 8004a74:	0707      	lsls	r7, r0, #28
 8004a76:	d507      	bpl.n	8004a88 <HAL_PCD_IRQHandler+0x250>
    {
      HAL_PCD_SOFCallback(hpcd);
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f7fe fc5a 	bl	8003332 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004a7e:	6822      	ldr	r2, [r4, #0]
 8004a80:	6953      	ldr	r3, [r2, #20]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004a88:	6820      	ldr	r0, [r4, #0]
 8004a8a:	f002 fed7 	bl	800783c <USB_ReadInterrupts>
 8004a8e:	02c6      	lsls	r6, r0, #11
 8004a90:	d508      	bpl.n	8004aa4 <HAL_PCD_IRQHandler+0x26c>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8004a92:	b2e9      	uxtb	r1, r5
 8004a94:	4620      	mov	r0, r4
 8004a96:	f7fe fc69 	bl	800336c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a9a:	6822      	ldr	r2, [r4, #0]
 8004a9c:	6953      	ldr	r3, [r2, #20]
 8004a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aa2:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004aa4:	6820      	ldr	r0, [r4, #0]
 8004aa6:	f002 fec9 	bl	800783c <USB_ReadInterrupts>
 8004aaa:	0280      	lsls	r0, r0, #10
 8004aac:	d508      	bpl.n	8004ac0 <HAL_PCD_IRQHandler+0x288>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8004aae:	b2e9      	uxtb	r1, r5
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	f7fe fc57 	bl	8003364 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004ab6:	6822      	ldr	r2, [r4, #0]
 8004ab8:	6953      	ldr	r3, [r2, #20]
 8004aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004abe:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004ac0:	6820      	ldr	r0, [r4, #0]
 8004ac2:	f002 febb 	bl	800783c <USB_ReadInterrupts>
 8004ac6:	0041      	lsls	r1, r0, #1
 8004ac8:	d507      	bpl.n	8004ada <HAL_PCD_IRQHandler+0x2a2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8004aca:	4620      	mov	r0, r4
 8004acc:	f7fe fc52 	bl	8003374 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004ad0:	6822      	ldr	r2, [r4, #0]
 8004ad2:	6953      	ldr	r3, [r2, #20]
 8004ad4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ad8:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004ada:	6820      	ldr	r0, [r4, #0]
 8004adc:	f002 feae 	bl	800783c <USB_ReadInterrupts>
 8004ae0:	0742      	lsls	r2, r0, #29
 8004ae2:	d50a      	bpl.n	8004afa <HAL_PCD_IRQHandler+0x2c2>
    {
      temp = hpcd->Instance->GOTGINT;
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ae8:	076b      	lsls	r3, r5, #29
 8004aea:	d502      	bpl.n	8004af2 <HAL_PCD_IRQHandler+0x2ba>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8004aec:	4620      	mov	r0, r4
 8004aee:	f7fe fc45 	bl	800337c <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	4315      	orrs	r5, r2
 8004af8:	605d      	str	r5, [r3, #4]
    }
  }
}
 8004afa:	b007      	add	sp, #28
 8004afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1)
 8004b00:	f018 0f01 	tst.w	r8, #1
 8004b04:	d049      	beq.n	8004b9a <HAL_PCD_IRQHandler+0x362>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8004b06:	b2ea      	uxtb	r2, r5
 8004b08:	4611      	mov	r1, r2
 8004b0a:	6820      	ldr	r0, [r4, #0]
 8004b0c:	9203      	str	r2, [sp, #12]
 8004b0e:	f002 fea9 	bl	8007864 <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004b12:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8004b16:	4682      	mov	sl, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004b18:	d032      	beq.n	8004b80 <HAL_PCD_IRQHandler+0x348>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	60b1      	str	r1, [r6, #8]
            if (USBx->GSNPSID == USB_OTG_CORE_ID_310A)
 8004b1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b20:	4b35      	ldr	r3, [pc, #212]	; (8004bf8 <HAL_PCD_IRQHandler+0x3c0>)
 8004b22:	9a03      	ldr	r2, [sp, #12]
 8004b24:	4299      	cmp	r1, r3
 8004b26:	d13f      	bne.n	8004ba8 <HAL_PCD_IRQHandler+0x370>
              if (!(USBx_OUTEP(0)->DOEPINT & (0x1 << 15)))
 8004b28:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8004b2c:	0409      	lsls	r1, r1, #16
 8004b2e:	d41f      	bmi.n	8004b70 <HAL_PCD_IRQHandler+0x338>
                  if (hpcd->Init.dma_enable == 1)
 8004b30:	6921      	ldr	r1, [r4, #16]
 8004b32:	2901      	cmp	r1, #1
 8004b34:	d10c      	bne.n	8004b50 <HAL_PCD_IRQHandler+0x318>
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b36:	6931      	ldr	r1, [r6, #16]
                                                 hpcd->OUT_ep[epnum].maxpacket -
 8004b38:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b3c:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                                 hpcd->OUT_ep[epnum].maxpacket -
 8004b40:	1a41      	subs	r1, r0, r1
                  	hpcd->OUT_ep[epnum].xfer_count =
 8004b42:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                    hpcd->OUT_ep[epnum].xfer_buff +=
 8004b46:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 8004b4a:	4408      	add	r0, r1
 8004b4c:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
                HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8004b50:	4611      	mov	r1, r2
 8004b52:	4620      	mov	r0, r4
 8004b54:	f7fe fbdc 	bl	8003310 <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 8004b58:	6921      	ldr	r1, [r4, #16]
 8004b5a:	2901      	cmp	r1, #1
 8004b5c:	d108      	bne.n	8004b70 <HAL_PCD_IRQHandler+0x338>
                  if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 8004b5e:	b93d      	cbnz	r5, 8004b70 <HAL_PCD_IRQHandler+0x338>
 8004b60:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 8004b64:	b922      	cbnz	r2, 8004b70 <HAL_PCD_IRQHandler+0x338>
                    USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8004b66:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8004b6a:	6820      	ldr	r0, [r4, #0]
 8004b6c:	f002 feb3 	bl	80078d6 <USB_EP0_OutStart>
              USBx_OUTEP(0)->DOEPINT |= (0x1 << 15) | (0x1 << 5);
 8004b70:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8004b74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b78:	f042 0220 	orr.w	r2, r2, #32
 8004b7c:	f8c9 2008 	str.w	r2, [r9, #8]
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004b80:	f01a 0f08 	tst.w	sl, #8
 8004b84:	d004      	beq.n	8004b90 <HAL_PCD_IRQHandler+0x358>
            HAL_PCD_SetupStageCallback(hpcd);
 8004b86:	4620      	mov	r0, r4
 8004b88:	f7fe fbbc 	bl	8003304 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004b8c:	2308      	movs	r3, #8
 8004b8e:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004b90:	f01a 0f10 	tst.w	sl, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004b94:	bf1c      	itt	ne
 8004b96:	2310      	movne	r3, #16
 8004b98:	60b3      	strne	r3, [r6, #8]
        epnum++;
 8004b9a:	3501      	adds	r5, #1
        ep_intr >>= 1;
 8004b9c:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8004ba0:	3620      	adds	r6, #32
 8004ba2:	f10b 0b1c 	add.w	fp, fp, #28
 8004ba6:	e673      	b.n	8004890 <HAL_PCD_IRQHandler+0x58>
              if (hpcd->Init.dma_enable == 1)
 8004ba8:	6921      	ldr	r1, [r4, #16]
 8004baa:	2901      	cmp	r1, #1
 8004bac:	d10c      	bne.n	8004bc8 <HAL_PCD_IRQHandler+0x390>
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004bae:	6931      	ldr	r1, [r6, #16]
                                               hpcd->OUT_ep[epnum].maxpacket -
 8004bb0:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004bb4:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                               hpcd->OUT_ep[epnum].maxpacket -
 8004bb8:	1a41      	subs	r1, r0, r1
                hpcd->OUT_ep[epnum].xfer_count =
 8004bba:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8004bbe:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 8004bc2:	4408      	add	r0, r1
 8004bc4:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
              HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8004bc8:	4611      	mov	r1, r2
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f7fe fba0 	bl	8003310 <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 8004bd0:	6921      	ldr	r1, [r4, #16]
 8004bd2:	2901      	cmp	r1, #1
 8004bd4:	d1d4      	bne.n	8004b80 <HAL_PCD_IRQHandler+0x348>
                if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 8004bd6:	2d00      	cmp	r5, #0
 8004bd8:	d1d2      	bne.n	8004b80 <HAL_PCD_IRQHandler+0x348>
 8004bda:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 8004bde:	2a00      	cmp	r2, #0
 8004be0:	d1ce      	bne.n	8004b80 <HAL_PCD_IRQHandler+0x348>
                  USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8004be2:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8004be6:	6820      	ldr	r0, [r4, #0]
 8004be8:	f002 fe75 	bl	80078d6 <USB_EP0_OutStart>
 8004bec:	e7c8      	b.n	8004b80 <HAL_PCD_IRQHandler+0x348>
 8004bee:	bf00      	nop
 8004bf0:	ff275340 	.word	0xff275340
 8004bf4:	000c34ff 	.word	0x000c34ff
 8004bf8:	4f54310a 	.word	0x4f54310a
        if (ep_intr & 0x1) /* In ITR */
 8004bfc:	f01b 0f01 	tst.w	fp, #1
 8004c00:	d074      	beq.n	8004cec <HAL_PCD_IRQHandler+0x4b4>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8004c02:	fa5f fa85 	uxtb.w	sl, r5
 8004c06:	4651      	mov	r1, sl
 8004c08:	6820      	ldr	r0, [r4, #0]
 8004c0a:	f002 fe35 	bl	8007878 <USB_ReadDevInEPInterrupt>
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004c0e:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8004c12:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004c14:	d020      	beq.n	8004c58 <HAL_PCD_IRQHandler+0x420>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c16:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
            fifoemptymsk = 0x1 << epnum;
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c1e:	ea23 0301 	bic.w	r3, r3, r1
 8004c22:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004c26:	2301      	movs	r3, #1
 8004c28:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1)
 8004c2c:	6923      	ldr	r3, [r4, #16]
 8004c2e:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8004c30:	bf01      	itttt	eq
 8004c32:	6cb3      	ldreq	r3, [r6, #72]	; 0x48
 8004c34:	6c72      	ldreq	r2, [r6, #68]	; 0x44
 8004c36:	189b      	addeq	r3, r3, r2
 8004c38:	64b3      	streq	r3, [r6, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8004c3a:	4651      	mov	r1, sl
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f7fe fb70 	bl	8003322 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1)
 8004c42:	6921      	ldr	r1, [r4, #16]
 8004c44:	2901      	cmp	r1, #1
 8004c46:	d107      	bne.n	8004c58 <HAL_PCD_IRQHandler+0x420>
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 8004c48:	b935      	cbnz	r5, 8004c58 <HAL_PCD_IRQHandler+0x420>
 8004c4a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004c4c:	b923      	cbnz	r3, 8004c58 <HAL_PCD_IRQHandler+0x420>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8004c4e:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8004c52:	6820      	ldr	r0, [r4, #0]
 8004c54:	f002 fe3f 	bl	80078d6 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004c58:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004c5c:	bf1c      	itt	ne
 8004c5e:	2308      	movne	r3, #8
 8004c60:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004c64:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004c68:	bf1c      	itt	ne
 8004c6a:	2310      	movne	r3, #16
 8004c6c:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004c70:	f018 0f40 	tst.w	r8, #64	; 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004c74:	bf1c      	itt	ne
 8004c76:	2340      	movne	r3, #64	; 0x40
 8004c78:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004c7c:	f018 0f02 	tst.w	r8, #2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004c80:	bf1c      	itt	ne
 8004c82:	2302      	movne	r3, #2
 8004c84:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c88:	f018 0f80 	tst.w	r8, #128	; 0x80
 8004c8c:	d02e      	beq.n	8004cec <HAL_PCD_IRQHandler+0x4b4>
  * @param  epnum: endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	9303      	str	r3, [sp, #12]
  int32_t len = 0U;
  uint32_t len32b = 0;
  uint32_t fifoemptymsk = 0;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8004c92:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8004c94:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8004c96:	eba3 0802 	sub.w	r8, r3, r2
 8004c9a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8004c9c:	4598      	cmp	r8, r3
 8004c9e:	bf28      	it	cs
 8004ca0:	4698      	movcs	r8, r3
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3) / 4;
 8004ca2:	f108 0303 	add.w	r3, r8, #3
 8004ca6:	2204      	movs	r2, #4
 8004ca8:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cac:	9304      	str	r3, [sp, #16]
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004cae:	9b03      	ldr	r3, [sp, #12]
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8004cb8:	9305      	str	r3, [sp, #20]
 8004cba:	9b05      	ldr	r3, [sp, #20]
 8004cbc:	9a04      	ldr	r2, [sp, #16]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d904      	bls.n	8004cd0 <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 8004cc6:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8004cc8:	6d33      	ldr	r3, [r6, #80]	; 0x50
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d900      	bls.n	8004cd0 <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 8004cce:	b9a3      	cbnz	r3, 8004cfa <HAL_PCD_IRQHandler+0x4c2>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0)
 8004cd0:	f1b8 0f00 	cmp.w	r8, #0
 8004cd4:	dc0a      	bgt.n	8004cec <HAL_PCD_IRQHandler+0x4b4>
  {
    fifoemptymsk = 0x1 << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cd6:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = 0x1 << epnum;
 8004cd8:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cda:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 8004cde:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1 << epnum;
 8004ce2:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ce4:	ea23 0302 	bic.w	r3, r3, r2
 8004ce8:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        epnum++;
 8004cec:	3501      	adds	r5, #1
        ep_intr >>= 1;
 8004cee:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8004cf2:	361c      	adds	r6, #28
 8004cf4:	f109 0920 	add.w	r9, r9, #32
 8004cf8:	e5db      	b.n	80048b2 <HAL_PCD_IRQHandler+0x7a>
    len = ep->xfer_len - ep->xfer_count;
 8004cfa:	eba3 0802 	sub.w	r8, r3, r2
 8004cfe:	6c73      	ldr	r3, [r6, #68]	; 0x44
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8004d00:	9803      	ldr	r0, [sp, #12]
 8004d02:	4598      	cmp	r8, r3
 8004d04:	bf28      	it	cs
 8004d06:	4698      	movcs	r8, r3
    len32b = (len + 3) / 4;
 8004d08:	2204      	movs	r2, #4
 8004d0a:	f108 0303 	add.w	r3, r8, #3
 8004d0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d12:	9304      	str	r3, [sp, #16]
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8004d14:	7c23      	ldrb	r3, [r4, #16]
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	4652      	mov	r2, sl
 8004d1a:	fa1f f388 	uxth.w	r3, r8
 8004d1e:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8004d20:	f002 fcea 	bl	80076f8 <USB_WritePacket>
    ep->xfer_buff  += len;
 8004d24:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8004d26:	4443      	add	r3, r8
 8004d28:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 8004d2a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8004d2c:	4443      	add	r3, r8
 8004d2e:	6573      	str	r3, [r6, #84]	; 0x54
 8004d30:	e7c3      	b.n	8004cba <HAL_PCD_IRQHandler+0x482>
        HAL_PCD_ResumeCallback(hpcd);
 8004d32:	4620      	mov	r0, r4
 8004d34:	f7fe fb12 	bl	800335c <HAL_PCD_ResumeCallback>
 8004d38:	e5d5      	b.n	80048e6 <HAL_PCD_IRQHandler+0xae>
        HAL_PCD_SuspendCallback(hpcd);
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f7fe fb0a 	bl	8003354 <HAL_PCD_SuspendCallback>
 8004d40:	e601      	b.n	8004946 <HAL_PCD_IRQHandler+0x10e>
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004d42:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(index)->DIEPINT = 0xFF;
 8004d44:	609a      	str	r2, [r3, #8]
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004d46:	3001      	adds	r0, #1
        USBx_OUTEP(index)->DOEPINT = 0xFF;
 8004d48:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004d4c:	9002      	str	r0, [sp, #8]
 8004d4e:	3320      	adds	r3, #32
 8004d50:	e60c      	b.n	800496c <HAL_PCD_IRQHandler+0x134>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8004d52:	6973      	ldr	r3, [r6, #20]
 8004d54:	f043 030b 	orr.w	r3, r3, #11
 8004d58:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8004d5a:	6933      	ldr	r3, [r6, #16]
 8004d5c:	f043 030b 	orr.w	r3, r3, #11
 8004d60:	6133      	str	r3, [r6, #16]
 8004d62:	e61c      	b.n	800499e <HAL_PCD_IRQHandler+0x166>
      else if((hclk >= 15000000)&&(hclk < 16000000))
 8004d64:	4a2f      	ldr	r2, [pc, #188]	; (8004e24 <HAL_PCD_IRQHandler+0x5ec>)
 8004d66:	4930      	ldr	r1, [pc, #192]	; (8004e28 <HAL_PCD_IRQHandler+0x5f0>)
 8004d68:	4402      	add	r2, r0
 8004d6a:	428a      	cmp	r2, r1
 8004d6c:	d803      	bhi.n	8004d76 <HAL_PCD_IRQHandler+0x53e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8004d74:	e641      	b.n	80049fa <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 16000000)&&(hclk < 17200000))
 8004d76:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8004d7a:	492c      	ldr	r1, [pc, #176]	; (8004e2c <HAL_PCD_IRQHandler+0x5f4>)
 8004d7c:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8004d80:	428a      	cmp	r2, r1
 8004d82:	d803      	bhi.n	8004d8c <HAL_PCD_IRQHandler+0x554>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8004d8a:	e636      	b.n	80049fa <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 17200000)&&(hclk < 18500000))
 8004d8c:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8004d90:	4927      	ldr	r1, [pc, #156]	; (8004e30 <HAL_PCD_IRQHandler+0x5f8>)
 8004d92:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8004d96:	428a      	cmp	r2, r1
 8004d98:	d803      	bhi.n	8004da2 <HAL_PCD_IRQHandler+0x56a>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004da0:	e62b      	b.n	80049fa <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 18500000)&&(hclk < 20000000))
 8004da2:	4a24      	ldr	r2, [pc, #144]	; (8004e34 <HAL_PCD_IRQHandler+0x5fc>)
 8004da4:	4924      	ldr	r1, [pc, #144]	; (8004e38 <HAL_PCD_IRQHandler+0x600>)
 8004da6:	4402      	add	r2, r0
 8004da8:	428a      	cmp	r2, r1
 8004daa:	d803      	bhi.n	8004db4 <HAL_PCD_IRQHandler+0x57c>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8004db2:	e622      	b.n	80049fa <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 20000000)&&(hclk < 21800000))
 8004db4:	4a21      	ldr	r2, [pc, #132]	; (8004e3c <HAL_PCD_IRQHandler+0x604>)
 8004db6:	4922      	ldr	r1, [pc, #136]	; (8004e40 <HAL_PCD_IRQHandler+0x608>)
 8004db8:	4402      	add	r2, r0
 8004dba:	428a      	cmp	r2, r1
 8004dbc:	d803      	bhi.n	8004dc6 <HAL_PCD_IRQHandler+0x58e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8004dc4:	e619      	b.n	80049fa <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 21800000)&&(hclk < 24000000))
 8004dc6:	4a1f      	ldr	r2, [pc, #124]	; (8004e44 <HAL_PCD_IRQHandler+0x60c>)
 8004dc8:	491f      	ldr	r1, [pc, #124]	; (8004e48 <HAL_PCD_IRQHandler+0x610>)
 8004dca:	4402      	add	r2, r0
 8004dcc:	428a      	cmp	r2, r1
 8004dce:	d803      	bhi.n	8004dd8 <HAL_PCD_IRQHandler+0x5a0>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8004dd6:	e610      	b.n	80049fa <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 24000000)&&(hclk < 27700000))
 8004dd8:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8004ddc:	491b      	ldr	r1, [pc, #108]	; (8004e4c <HAL_PCD_IRQHandler+0x614>)
 8004dde:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8004de2:	428a      	cmp	r2, r1
 8004de4:	d803      	bhi.n	8004dee <HAL_PCD_IRQHandler+0x5b6>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dec:	e605      	b.n	80049fa <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 27700000)&&(hclk < 32000000))
 8004dee:	4a18      	ldr	r2, [pc, #96]	; (8004e50 <HAL_PCD_IRQHandler+0x618>)
 8004df0:	4918      	ldr	r1, [pc, #96]	; (8004e54 <HAL_PCD_IRQHandler+0x61c>)
 8004df2:	4402      	add	r2, r0
 8004df4:	428a      	cmp	r2, r1
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	bf94      	ite	ls
 8004dfa:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8004dfe:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8004e02:	e5fa      	b.n	80049fa <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004e04:	2b06      	cmp	r3, #6
 8004e06:	f47f ae2d 	bne.w	8004a64 <HAL_PCD_IRQHandler+0x22c>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8004e0a:	2208      	movs	r2, #8
 8004e0c:	f504 7162 	add.w	r1, r4, #904	; 0x388
 8004e10:	4638      	mov	r0, r7
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e12:	f04f 081c 	mov.w	r8, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8004e16:	f002 fc80 	bl	800771a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e1a:	fb08 4809 	mla	r8, r8, r9, r4
 8004e1e:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8004e22:	e61a      	b.n	8004a5a <HAL_PCD_IRQHandler+0x222>
 8004e24:	ff1b1e40 	.word	0xff1b1e40
 8004e28:	000f423f 	.word	0x000f423f
 8004e2c:	00124f7f 	.word	0x00124f7f
 8004e30:	0013d61f 	.word	0x0013d61f
 8004e34:	fee5b660 	.word	0xfee5b660
 8004e38:	0016e35f 	.word	0x0016e35f
 8004e3c:	feced300 	.word	0xfeced300
 8004e40:	001b773f 	.word	0x001b773f
 8004e44:	feb35bc0 	.word	0xfeb35bc0
 8004e48:	002191bf 	.word	0x002191bf
 8004e4c:	0038751f 	.word	0x0038751f
 8004e50:	fe5954e0 	.word	0xfe5954e0
 8004e54:	00419cdf 	.word	0x00419cdf

08004e58 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8004e58:	f890 2384 	ldrb.w	r2, [r0, #900]	; 0x384
 8004e5c:	2a01      	cmp	r2, #1
{
 8004e5e:	b510      	push	{r4, lr}
 8004e60:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8004e62:	d00b      	beq.n	8004e7c <HAL_PCD_SetAddress+0x24>
 8004e64:	2201      	movs	r2, #1
 8004e66:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  hpcd->USB_Address = address;
 8004e6a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  USB_SetDevAddress(hpcd->Instance, address);
 8004e6e:	6800      	ldr	r0, [r0, #0]
 8004e70:	f002 fcbc 	bl	80077ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8004e74:	2000      	movs	r0, #0
 8004e76:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8004e7a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8004e7c:	2002      	movs	r0, #2
}
 8004e7e:	bd10      	pop	{r4, pc}

08004e80 <HAL_PCD_EP_Open>:
{
 8004e80:	b570      	push	{r4, r5, r6, lr}
 8004e82:	4604      	mov	r4, r0
  if ((ep_addr & 0x80) == 0x80)
 8004e84:	b248      	sxtb	r0, r1
 8004e86:	2800      	cmp	r0, #0
 8004e88:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8004e8c:	f04f 051c 	mov.w	r5, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004e90:	bfb5      	itete	lt
 8004e92:	fb05 4106 	mlalt	r1, r5, r6, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004e96:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004e9a:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004e9c:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 8004ea0:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7F;
 8004ea2:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8004ea4:	7048      	strb	r0, [r1, #1]
  ep->type = ep_type;
 8004ea6:	70cb      	strb	r3, [r1, #3]
  __HAL_LOCK(hpcd);
 8004ea8:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->maxpacket = ep_mps;
 8004eac:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd);
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d009      	beq.n	8004ec6 <HAL_PCD_EP_Open+0x46>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8004eb8:	6820      	ldr	r0, [r4, #0]
 8004eba:	f002 fa94 	bl	80073e6 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return ret;
 8004ec4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8004ec6:	2002      	movs	r0, #2
}
 8004ec8:	bd70      	pop	{r4, r5, r6, pc}

08004eca <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 8004eca:	b24b      	sxtb	r3, r1
 8004ecc:	2b00      	cmp	r3, #0
{  
 8004ece:	b510      	push	{r4, lr}
 8004ed0:	f04f 021c 	mov.w	r2, #28
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004eda:	bfb5      	itete	lt
 8004edc:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004ee0:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004ee4:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004ee6:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 8004eea:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8004eec:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8004eee:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8004ef0:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d009      	beq.n	8004f0c <HAL_PCD_EP_Close+0x42>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8004efe:	6820      	ldr	r0, [r4, #0]
 8004f00:	f002 fab0 	bl	8007464 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8004f04:	2000      	movs	r0, #0
 8004f06:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8004f0a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8004f0c:	2002      	movs	r0, #2
}
 8004f0e:	bd10      	pop	{r4, pc}

08004f10 <HAL_PCD_EP_Receive>:
{
 8004f10:	b570      	push	{r4, r5, r6, lr}
 8004f12:	4604      	mov	r4, r0
 8004f14:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 8004f18:	201c      	movs	r0, #28
 8004f1a:	fb00 4506 	mla	r5, r0, r6, r4
  ep->xfer_len = len;
 8004f1e:	f8c5 31f4 	str.w	r3, [r5, #500]	; 0x1f4
  ep->xfer_count = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	f8c5 31f8 	str.w	r3, [r5, #504]	; 0x1f8
  ep->is_in = 0;
 8004f28:	f885 31e1 	strb.w	r3, [r5, #481]	; 0x1e1
  __HAL_LOCK(hpcd);
 8004f2c:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->xfer_buff = pBuf;  
 8004f30:	f8c5 21ec 	str.w	r2, [r5, #492]	; 0x1ec
  __HAL_LOCK(hpcd);
 8004f34:	2b01      	cmp	r3, #1
  ep->num = ep_addr & 0x7F;
 8004f36:	f885 61e0 	strb.w	r6, [r5, #480]	; 0x1e0
  __HAL_LOCK(hpcd);
 8004f3a:	d011      	beq.n	8004f60 <HAL_PCD_EP_Receive+0x50>
 8004f3c:	6922      	ldr	r2, [r4, #16]
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004f3e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004f40:	2301      	movs	r3, #1
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004f42:	f505 71f0 	add.w	r1, r5, #480	; 0x1e0
  __HAL_LOCK(hpcd);
 8004f46:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004f4a:	b2d2      	uxtb	r2, r2
  if ((ep_addr & 0x7F) == 0 )
 8004f4c:	b92e      	cbnz	r6, 8004f5a <HAL_PCD_EP_Receive+0x4a>
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004f4e:	f002 fb6f 	bl	8007630 <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 8004f52:	2000      	movs	r0, #0
 8004f54:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8004f58:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004f5a:	f002 fab1 	bl	80074c0 <USB_EPStartXfer>
 8004f5e:	e7f8      	b.n	8004f52 <HAL_PCD_EP_Receive+0x42>
  __HAL_LOCK(hpcd);
 8004f60:	2002      	movs	r0, #2
}
 8004f62:	bd70      	pop	{r4, r5, r6, pc}

08004f64 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8004f64:	231c      	movs	r3, #28
 8004f66:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004f6a:	fb03 0101 	mla	r1, r3, r1, r0
}
 8004f6e:	f8b1 01f8 	ldrh.w	r0, [r1, #504]	; 0x1f8
 8004f72:	4770      	bx	lr

08004f74 <HAL_PCD_EP_Transmit>:
{
 8004f74:	b570      	push	{r4, r5, r6, lr}
 8004f76:	4604      	mov	r4, r0
 8004f78:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 8004f7c:	201c      	movs	r0, #28
 8004f7e:	fb00 4506 	mla	r5, r0, r6, r4
 8004f82:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 8004f84:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_LOCK(hpcd);
 8004f86:	f894 2384 	ldrb.w	r2, [r4, #900]	; 0x384
  ep->num = ep_addr & 0x7F;
 8004f8a:	f885 603c 	strb.w	r6, [r5, #60]	; 0x3c
  ep->xfer_count = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1;
 8004f92:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8004f94:	429a      	cmp	r2, r3
  ep->is_in = 1;
 8004f96:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_LOCK(hpcd);
 8004f9a:	d010      	beq.n	8004fbe <HAL_PCD_EP_Transmit+0x4a>
 8004f9c:	6922      	ldr	r2, [r4, #16]
 8004f9e:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004fa2:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	6820      	ldr	r0, [r4, #0]
  if ((ep_addr & 0x7F) == 0 )
 8004faa:	b92e      	cbnz	r6, 8004fb8 <HAL_PCD_EP_Transmit+0x44>
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 8004fac:	f002 fb40 	bl	8007630 <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8004fb6:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep,  hpcd->Init.dma_enable);
 8004fb8:	f002 fa82 	bl	80074c0 <USB_EPStartXfer>
 8004fbc:	e7f8      	b.n	8004fb0 <HAL_PCD_EP_Transmit+0x3c>
  __HAL_LOCK(hpcd);
 8004fbe:	2002      	movs	r0, #2
}
 8004fc0:	bd70      	pop	{r4, r5, r6, pc}

08004fc2 <HAL_PCD_EP_SetStall>:
{
 8004fc2:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8004fc4:	b24b      	sxtb	r3, r1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004fcc:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004fd0:	bfb5      	itete	lt
 8004fd2:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8004fd6:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004fda:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 8004fdc:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_stall = 1;
 8004fe0:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8004fe2:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8004fe4:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1;
 8004fe6:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8004fe8:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8004fea:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8004fec:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8004ff0:	4293      	cmp	r3, r2
{
 8004ff2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004ff4:	d00f      	beq.n	8005016 <HAL_PCD_EP_SetStall+0x54>
 8004ff6:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  USB_EPSetStall(hpcd->Instance , ep);
 8004ffa:	6800      	ldr	r0, [r0, #0]
 8004ffc:	f002 fb9d 	bl	800773a <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8005000:	b92d      	cbnz	r5, 800500e <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance,  hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005002:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005006:	7c21      	ldrb	r1, [r4, #16]
 8005008:	6820      	ldr	r0, [r4, #0]
 800500a:	f002 fc64 	bl	80078d6 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 800500e:	2000      	movs	r0, #0
 8005010:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8005014:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8005016:	2002      	movs	r0, #2
}
 8005018:	bd38      	pop	{r3, r4, r5, pc}

0800501a <HAL_PCD_EP_ClrStall>:
{
 800501a:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 800501c:	b24b      	sxtb	r3, r1
 800501e:	2b00      	cmp	r3, #0
{
 8005020:	4605      	mov	r5, r0
 8005022:	f04f 021c 	mov.w	r2, #28
 8005026:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800502a:	bfb5      	itete	lt
 800502c:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 8005030:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8005034:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 8005036:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800503a:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 800503c:	2400      	movs	r4, #0
 800503e:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8005040:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8005042:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8005044:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
 8005048:	2b01      	cmp	r3, #1
 800504a:	d009      	beq.n	8005060 <HAL_PCD_EP_ClrStall+0x46>
 800504c:	2301      	movs	r3, #1
 800504e:	f885 3384 	strb.w	r3, [r5, #900]	; 0x384
  USB_EPClearStall(hpcd->Instance , ep);
 8005052:	6828      	ldr	r0, [r5, #0]
 8005054:	f002 fb90 	bl	8007778 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8005058:	f885 4384 	strb.w	r4, [r5, #900]	; 0x384
  return HAL_OK;
 800505c:	4620      	mov	r0, r4
 800505e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8005060:	2002      	movs	r0, #2
}
 8005062:	bd38      	pop	{r3, r4, r5, pc}

08005064 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd); 
 8005064:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8005068:	2b01      	cmp	r3, #1
{
 800506a:	b510      	push	{r4, lr}
 800506c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 800506e:	d011      	beq.n	8005094 <HAL_PCD_EP_Flush+0x30>
 8005070:	2301      	movs	r3, #1
 8005072:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  if ((ep_addr & 0x80) == 0x80)
 8005076:	060b      	lsls	r3, r1, #24
 8005078:	d508      	bpl.n	800508c <HAL_PCD_EP_Flush+0x28>
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 800507a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800507e:	6800      	ldr	r0, [r0, #0]
 8005080:	f002 f988 	bl	8007394 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd); 
 8005084:	2000      	movs	r0, #0
 8005086:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800508a:	bd10      	pop	{r4, pc}
    USB_FlushRxFifo(hpcd->Instance);
 800508c:	6800      	ldr	r0, [r0, #0]
 800508e:	f002 f993 	bl	80073b8 <USB_FlushRxFifo>
 8005092:	e7f7      	b.n	8005084 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd); 
 8005094:	2002      	movs	r0, #2
}
 8005096:	bd10      	pop	{r4, pc}

08005098 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005098:	6800      	ldr	r0, [r0, #0]
{
 800509a:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800509c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 800509e:	b921      	cbnz	r1, 80050aa <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (size << 16) | Tx_Offset;
 80050a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050a4:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
  }
  
  return HAL_OK;
}
 80050a6:	2000      	movs	r0, #0
 80050a8:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80050aa:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (index = 0; index < (fifo - 1); index++)
 80050ac:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80050ae:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (index = 0; index < (fifo - 1); index++)
 80050b2:	1e4e      	subs	r6, r1, #1
 80050b4:	b2ec      	uxtb	r4, r5
 80050b6:	42b4      	cmp	r4, r6
 80050b8:	f105 0501 	add.w	r5, r5, #1
 80050bc:	db06      	blt.n	80050cc <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
 80050be:	313f      	adds	r1, #63	; 0x3f
 80050c0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80050c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050c8:	6043      	str	r3, [r0, #4]
 80050ca:	e7ec      	b.n	80050a6 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[index] >> 16);
 80050cc:	3440      	adds	r4, #64	; 0x40
 80050ce:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80050d2:	6864      	ldr	r4, [r4, #4]
 80050d4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80050d8:	e7ec      	b.n	80050b4 <HAL_PCDEx_SetTxFiFo+0x1c>

080050da <HAL_PCDEx_SetRxFiFo>:
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80050da:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 80050dc:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80050de:	6259      	str	r1, [r3, #36]	; 0x24
}
 80050e0:	4770      	bx	lr

080050e2 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80050e2:	6802      	ldr	r2, [r0, #0]
{
 80050e4:	4603      	mov	r3, r0
  
  hpcd->lpm_active = ENABLE;
 80050e6:	2101      	movs	r1, #1
 80050e8:	f8c0 13c0 	str.w	r1, [r0, #960]	; 0x3c0
  hpcd->LPM_State = LPM_L0;
 80050ec:	2000      	movs	r0, #0
 80050ee:	f883 03b8 	strb.w	r0, [r3, #952]	; 0x3b8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80050f2:	6993      	ldr	r3, [r2, #24]
 80050f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050f8:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80050fa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80050fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005100:	f043 0303 	orr.w	r3, r3, #3
 8005104:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;  
}
 8005106:	4770      	bx	lr

08005108 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8005108:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = ENABLE; 
 800510a:	2301      	movs	r3, #1
 800510c:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8005110:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005116:	6393      	str	r3, [r2, #56]	; 0x38
  
  return HAL_OK;  
}
 8005118:	2000      	movs	r0, #0
 800511a:	4770      	bx	lr

0800511c <HAL_PCDEx_LPM_Callback>:
 800511c:	4770      	bx	lr
	...

08005120 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005120:	4b02      	ldr	r3, [pc, #8]	; (800512c <HAL_PWREx_GetVoltageRange+0xc>)
 8005122:	6818      	ldr	r0, [r3, #0]
}
 8005124:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40007000 	.word	0x40007000

08005130 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005130:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005132:	4d1e      	ldr	r5, [pc, #120]	; (80051ac <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8005134:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005136:	00da      	lsls	r2, r3, #3
{
 8005138:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800513a:	d518      	bpl.n	800516e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800513c:	f7ff fff0 	bl	8005120 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005140:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005144:	d123      	bne.n	800518e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005146:	2c80      	cmp	r4, #128	; 0x80
 8005148:	d929      	bls.n	800519e <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800514a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800514c:	bf8c      	ite	hi
 800514e:	2002      	movhi	r0, #2
 8005150:	2001      	movls	r0, #1
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8005152:	4a17      	ldr	r2, [pc, #92]	; (80051b0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8005154:	6813      	ldr	r3, [r2, #0]
 8005156:	f023 0307 	bic.w	r3, r3, #7
 800515a:	4303      	orrs	r3, r0
 800515c:	6013      	str	r3, [r2, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800515e:	6813      	ldr	r3, [r2, #0]
 8005160:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8005164:	1a18      	subs	r0, r3, r0
 8005166:	bf18      	it	ne
 8005168:	2001      	movne	r0, #1
 800516a:	b003      	add	sp, #12
 800516c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800516e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005174:	65ab      	str	r3, [r5, #88]	; 0x58
 8005176:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8005180:	f7ff ffce 	bl	8005120 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8005184:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800518a:	65ab      	str	r3, [r5, #88]	; 0x58
 800518c:	e7d8      	b.n	8005140 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800518e:	2c80      	cmp	r4, #128	; 0x80
 8005190:	d807      	bhi.n	80051a2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8005192:	d008      	beq.n	80051a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7) 
 8005194:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8005198:	4258      	negs	r0, r3
 800519a:	4158      	adcs	r0, r3
 800519c:	e7d9      	b.n	8005152 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800519e:	2000      	movs	r0, #0
 80051a0:	e7d7      	b.n	8005152 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80051a2:	2003      	movs	r0, #3
 80051a4:	e7d5      	b.n	8005152 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80051a6:	2002      	movs	r0, #2
 80051a8:	e7d3      	b.n	8005152 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80051aa:	bf00      	nop
 80051ac:	40021000 	.word	0x40021000
 80051b0:	40022000 	.word	0x40022000

080051b4 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80051b4:	4b46      	ldr	r3, [pc, #280]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x11c>)
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	f012 0f0c 	tst.w	r2, #12
{
 80051bc:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80051be:	d009      	beq.n	80051d4 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80051c6:	2a0c      	cmp	r2, #12
 80051c8:	d148      	bne.n	800525c <HAL_RCC_GetSysClockFreq+0xa8>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	f002 0203 	and.w	r2, r2, #3
 80051d0:	2a01      	cmp	r2, #1
 80051d2:	d143      	bne.n	800525c <HAL_RCC_GetSysClockFreq+0xa8>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	0712      	lsls	r2, r2, #28
 80051d8:	d437      	bmi.n	800524a <HAL_RCC_GetSysClockFreq+0x96>
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 80051da:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80051de:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80051e2:	fa91 f1a1 	rbit	r1, r1
 80051e6:	fab1 f181 	clz	r1, r1
 80051ea:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 80051ee:	40ca      	lsrs	r2, r1
    msirange = MSIRangeTable[msirange];
 80051f0:	4938      	ldr	r1, [pc, #224]	; (80052d4 <HAL_RCC_GetSysClockFreq+0x120>)
 80051f2:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80051f6:	689a      	ldr	r2, [r3, #8]
      sysclockfreq = msirange;
 80051f8:	f012 0f0c 	tst.w	r2, #12
 80051fc:	bf0c      	ite	eq
 80051fe:	4620      	moveq	r0, r4
 8005200:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	f002 020c 	and.w	r2, r2, #12
 8005208:	2a0c      	cmp	r2, #12
 800520a:	d154      	bne.n	80052b6 <HAL_RCC_GetSysClockFreq+0x102>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800520c:	68da      	ldr	r2, [r3, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 800520e:	68d8      	ldr	r0, [r3, #12]
 8005210:	2170      	movs	r1, #112	; 0x70
 8005212:	fa91 f1a1 	rbit	r1, r1
 8005216:	fab1 f181 	clz	r1, r1
 800521a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800521e:	40c8      	lsrs	r0, r1
 8005220:	1c41      	adds	r1, r0, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005222:	f002 0003 	and.w	r0, r2, #3
    switch (pllsource)
 8005226:	2802      	cmp	r0, #2
 8005228:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800522c:	d028      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0xcc>
 800522e:	2803      	cmp	r0, #3
 8005230:	d042      	beq.n	80052b8 <HAL_RCC_GetSysClockFreq+0x104>
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8005232:	68d8      	ldr	r0, [r3, #12]
 8005234:	fa92 f2a2 	rbit	r2, r2
 8005238:	fab2 f282 	clz	r2, r2
 800523c:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 8005240:	40d0      	lsrs	r0, r2
 8005242:	fbb4 f1f1 	udiv	r1, r4, r1
 8005246:	4348      	muls	r0, r1
      break;
 8005248:	e027      	b.n	800529a <HAL_RCC_GetSysClockFreq+0xe6>
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	21f0      	movs	r1, #240	; 0xf0
 800524e:	fa91 f1a1 	rbit	r1, r1
 8005252:	fab1 f181 	clz	r1, r1
 8005256:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800525a:	e7c8      	b.n	80051ee <HAL_RCC_GetSysClockFreq+0x3a>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	f002 020c 	and.w	r2, r2, #12
 8005262:	2a04      	cmp	r2, #4
 8005264:	d007      	beq.n	8005276 <HAL_RCC_GetSysClockFreq+0xc2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	f002 020c 	and.w	r2, r2, #12
 800526c:	2a08      	cmp	r2, #8
 800526e:	d104      	bne.n	800527a <HAL_RCC_GetSysClockFreq+0xc6>
    sysclockfreq = HSE_VALUE;
 8005270:	4819      	ldr	r0, [pc, #100]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x124>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8005272:	2400      	movs	r4, #0
 8005274:	e7c5      	b.n	8005202 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8005276:	4819      	ldr	r0, [pc, #100]	; (80052dc <HAL_RCC_GetSysClockFreq+0x128>)
 8005278:	e7fb      	b.n	8005272 <HAL_RCC_GetSysClockFreq+0xbe>
  uint32_t sysclockfreq = 0U;
 800527a:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800527c:	4604      	mov	r4, r0
 800527e:	e7c0      	b.n	8005202 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8005280:	68d8      	ldr	r0, [r3, #12]
 8005282:	fa92 f2a2 	rbit	r2, r2
 8005286:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 800528a:	fab2 f282 	clz	r2, r2
 800528e:	fa20 f202 	lsr.w	r2, r0, r2
 8005292:	4812      	ldr	r0, [pc, #72]	; (80052dc <HAL_RCC_GetSysClockFreq+0x128>)
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8005294:	fbb0 f0f1 	udiv	r0, r0, r1
 8005298:	4350      	muls	r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80052a0:	fa92 f2a2 	rbit	r2, r2
 80052a4:	fab2 f282 	clz	r2, r2
 80052a8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80052ac:	40d3      	lsrs	r3, r2
 80052ae:	3301      	adds	r3, #1
 80052b0:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80052b2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80052b6:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80052b8:	68d8      	ldr	r0, [r3, #12]
 80052ba:	fa92 f2a2 	rbit	r2, r2
 80052be:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 80052c2:	fab2 f282 	clz	r2, r2
 80052c6:	fa20 f202 	lsr.w	r2, r0, r2
 80052ca:	4803      	ldr	r0, [pc, #12]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x124>)
 80052cc:	e7e2      	b.n	8005294 <HAL_RCC_GetSysClockFreq+0xe0>
 80052ce:	bf00      	nop
 80052d0:	40021000 	.word	0x40021000
 80052d4:	0800b588 	.word	0x0800b588
 80052d8:	007a1200 	.word	0x007a1200
 80052dc:	00f42400 	.word	0x00f42400

080052e0 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052e0:	6803      	ldr	r3, [r0, #0]
{
 80052e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80052e6:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052e8:	06d8      	lsls	r0, r3, #27
 80052ea:	d541      	bpl.n	8005370 <HAL_RCC_OscConfig+0x90>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80052ec:	4ca5      	ldr	r4, [pc, #660]	; (8005584 <HAL_RCC_OscConfig+0x2a4>)
 80052ee:	68a3      	ldr	r3, [r4, #8]
 80052f0:	f013 0f0c 	tst.w	r3, #12
 80052f4:	d166      	bne.n	80053c4 <HAL_RCC_OscConfig+0xe4>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	0799      	lsls	r1, r3, #30
 80052fa:	d505      	bpl.n	8005308 <HAL_RCC_OscConfig+0x28>
 80052fc:	69ab      	ldr	r3, [r5, #24]
 80052fe:	b91b      	cbnz	r3, 8005308 <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 8005300:	2001      	movs	r0, #1
}
 8005302:	b002      	add	sp, #8
 8005304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	6a28      	ldr	r0, [r5, #32]
 800530c:	071a      	lsls	r2, r3, #28
 800530e:	bf56      	itet	pl
 8005310:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8005314:	6823      	ldrmi	r3, [r4, #0]
 8005316:	091b      	lsrpl	r3, r3, #4
 8005318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800531c:	4283      	cmp	r3, r0
 800531e:	d23c      	bcs.n	800539a <HAL_RCC_OscConfig+0xba>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005320:	f7ff ff06 	bl	8005130 <RCC_SetFlashLatencyFromMSIRange>
 8005324:	2800      	cmp	r0, #0
 8005326:	d1eb      	bne.n	8005300 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	f043 0308 	orr.w	r3, r3, #8
 800532e:	6023      	str	r3, [r4, #0]
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	6a2a      	ldr	r2, [r5, #32]
 8005334:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005338:	4313      	orrs	r3, r2
 800533a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800533c:	6863      	ldr	r3, [r4, #4]
 800533e:	69ea      	ldr	r2, [r5, #28]
 8005340:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005344:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005348:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800534a:	f7ff ff33 	bl	80051b4 <HAL_RCC_GetSysClockFreq>
 800534e:	68a3      	ldr	r3, [r4, #8]
 8005350:	22f0      	movs	r2, #240	; 0xf0
 8005352:	fa92 f2a2 	rbit	r2, r2
 8005356:	fab2 f282 	clz	r2, r2
 800535a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800535e:	40d3      	lsrs	r3, r2
 8005360:	4a89      	ldr	r2, [pc, #548]	; (8005588 <HAL_RCC_OscConfig+0x2a8>)
 8005362:	5cd3      	ldrb	r3, [r2, r3]
 8005364:	40d8      	lsrs	r0, r3
 8005366:	4b89      	ldr	r3, [pc, #548]	; (800558c <HAL_RCC_OscConfig+0x2ac>)
 8005368:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800536a:	2000      	movs	r0, #0
 800536c:	f7fe feaa 	bl	80040c4 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005370:	682b      	ldr	r3, [r5, #0]
 8005372:	07de      	lsls	r6, r3, #31
 8005374:	d45b      	bmi.n	800542e <HAL_RCC_OscConfig+0x14e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005376:	682b      	ldr	r3, [r5, #0]
 8005378:	079c      	lsls	r4, r3, #30
 800537a:	f100 80a3 	bmi.w	80054c4 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800537e:	682b      	ldr	r3, [r5, #0]
 8005380:	0719      	lsls	r1, r3, #28
 8005382:	f100 80e7 	bmi.w	8005554 <HAL_RCC_OscConfig+0x274>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005386:	682b      	ldr	r3, [r5, #0]
 8005388:	075a      	lsls	r2, r3, #29
 800538a:	f100 8115 	bmi.w	80055b8 <HAL_RCC_OscConfig+0x2d8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800538e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005390:	2a00      	cmp	r2, #0
 8005392:	f040 817c 	bne.w	800568e <HAL_RCC_OscConfig+0x3ae>
  return HAL_OK;
 8005396:	2000      	movs	r0, #0
 8005398:	e7b3      	b.n	8005302 <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	f043 0308 	orr.w	r3, r3, #8
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053a8:	4303      	orrs	r3, r0
 80053aa:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053ac:	6863      	ldr	r3, [r4, #4]
 80053ae:	69ea      	ldr	r2, [r5, #28]
 80053b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80053b8:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053ba:	f7ff feb9 	bl	8005130 <RCC_SetFlashLatencyFromMSIRange>
 80053be:	2800      	cmp	r0, #0
 80053c0:	d0c3      	beq.n	800534a <HAL_RCC_OscConfig+0x6a>
 80053c2:	e79d      	b.n	8005300 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053c4:	69ab      	ldr	r3, [r5, #24]
 80053c6:	b313      	cbz	r3, 800540e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_ENABLE();
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	f043 0301 	orr.w	r3, r3, #1
 80053ce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80053d0:	f7fe fea0 	bl	8004114 <HAL_GetTick>
 80053d4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	079b      	lsls	r3, r3, #30
 80053da:	d511      	bpl.n	8005400 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	f043 0308 	orr.w	r3, r3, #8
 80053e2:	6023      	str	r3, [r4, #0]
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	6a2a      	ldr	r2, [r5, #32]
 80053e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053ec:	4313      	orrs	r3, r2
 80053ee:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053f0:	6863      	ldr	r3, [r4, #4]
 80053f2:	69ea      	ldr	r2, [r5, #28]
 80053f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80053fc:	6063      	str	r3, [r4, #4]
 80053fe:	e7b7      	b.n	8005370 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005400:	f7fe fe88 	bl	8004114 <HAL_GetTick>
 8005404:	1b80      	subs	r0, r0, r6
 8005406:	2802      	cmp	r0, #2
 8005408:	d9e5      	bls.n	80053d6 <HAL_RCC_OscConfig+0xf6>
            return HAL_TIMEOUT;
 800540a:	2003      	movs	r0, #3
 800540c:	e779      	b.n	8005302 <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005416:	f7fe fe7d 	bl	8004114 <HAL_GetTick>
 800541a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	079f      	lsls	r7, r3, #30
 8005420:	d5a6      	bpl.n	8005370 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005422:	f7fe fe77 	bl	8004114 <HAL_GetTick>
 8005426:	1b80      	subs	r0, r0, r6
 8005428:	2802      	cmp	r0, #2
 800542a:	d9f7      	bls.n	800541c <HAL_RCC_OscConfig+0x13c>
 800542c:	e7ed      	b.n	800540a <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 800542e:	4c55      	ldr	r4, [pc, #340]	; (8005584 <HAL_RCC_OscConfig+0x2a4>)
 8005430:	68a3      	ldr	r3, [r4, #8]
 8005432:	f003 030c 	and.w	r3, r3, #12
 8005436:	2b08      	cmp	r3, #8
 8005438:	d009      	beq.n	800544e <HAL_RCC_OscConfig+0x16e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800543a:	68a3      	ldr	r3, [r4, #8]
 800543c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8005440:	2b0c      	cmp	r3, #12
 8005442:	d10b      	bne.n	800545c <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005444:	68e3      	ldr	r3, [r4, #12]
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	2b03      	cmp	r3, #3
 800544c:	d106      	bne.n	800545c <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	0398      	lsls	r0, r3, #14
 8005452:	d590      	bpl.n	8005376 <HAL_RCC_OscConfig+0x96>
 8005454:	686b      	ldr	r3, [r5, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d18d      	bne.n	8005376 <HAL_RCC_OscConfig+0x96>
 800545a:	e751      	b.n	8005300 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800545c:	686b      	ldr	r3, [r5, #4]
 800545e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005462:	d110      	bne.n	8005486 <HAL_RCC_OscConfig+0x1a6>
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800546a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800546c:	f7fe fe52 	bl	8004114 <HAL_GetTick>
 8005470:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	0399      	lsls	r1, r3, #14
 8005476:	f53f af7e 	bmi.w	8005376 <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800547a:	f7fe fe4b 	bl	8004114 <HAL_GetTick>
 800547e:	1b80      	subs	r0, r0, r6
 8005480:	2864      	cmp	r0, #100	; 0x64
 8005482:	d9f6      	bls.n	8005472 <HAL_RCC_OscConfig+0x192>
 8005484:	e7c1      	b.n	800540a <HAL_RCC_OscConfig+0x12a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005486:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800548a:	d104      	bne.n	8005496 <HAL_RCC_OscConfig+0x1b6>
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005492:	6023      	str	r3, [r4, #0]
 8005494:	e7e6      	b.n	8005464 <HAL_RCC_OscConfig+0x184>
 8005496:	6822      	ldr	r2, [r4, #0]
 8005498:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800549c:	6022      	str	r2, [r4, #0]
 800549e:	6822      	ldr	r2, [r4, #0]
 80054a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054a4:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1e0      	bne.n	800546c <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 80054aa:	f7fe fe33 	bl	8004114 <HAL_GetTick>
 80054ae:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	039a      	lsls	r2, r3, #14
 80054b4:	f57f af5f 	bpl.w	8005376 <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b8:	f7fe fe2c 	bl	8004114 <HAL_GetTick>
 80054bc:	1b80      	subs	r0, r0, r6
 80054be:	2864      	cmp	r0, #100	; 0x64
 80054c0:	d9f6      	bls.n	80054b0 <HAL_RCC_OscConfig+0x1d0>
 80054c2:	e7a2      	b.n	800540a <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80054c4:	4c2f      	ldr	r4, [pc, #188]	; (8005584 <HAL_RCC_OscConfig+0x2a4>)
 80054c6:	68a3      	ldr	r3, [r4, #8]
 80054c8:	f003 030c 	and.w	r3, r3, #12
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d009      	beq.n	80054e4 <HAL_RCC_OscConfig+0x204>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80054d0:	68a3      	ldr	r3, [r4, #8]
 80054d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80054d6:	2b0c      	cmp	r3, #12
 80054d8:	d119      	bne.n	800550e <HAL_RCC_OscConfig+0x22e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80054da:	68e3      	ldr	r3, [r4, #12]
 80054dc:	f003 0303 	and.w	r3, r3, #3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d114      	bne.n	800550e <HAL_RCC_OscConfig+0x22e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	055b      	lsls	r3, r3, #21
 80054e8:	d503      	bpl.n	80054f2 <HAL_RCC_OscConfig+0x212>
 80054ea:	68eb      	ldr	r3, [r5, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f43f af07 	beq.w	8005300 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f2:	6861      	ldr	r1, [r4, #4]
 80054f4:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 80054f8:	fa93 f3a3 	rbit	r3, r3
 80054fc:	fab3 f283 	clz	r2, r3
 8005500:	692b      	ldr	r3, [r5, #16]
 8005502:	4093      	lsls	r3, r2
 8005504:	f021 52f8 	bic.w	r2, r1, #520093696	; 0x1f000000
 8005508:	4313      	orrs	r3, r2
 800550a:	6063      	str	r3, [r4, #4]
 800550c:	e737      	b.n	800537e <HAL_RCC_OscConfig+0x9e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800550e:	68eb      	ldr	r3, [r5, #12]
 8005510:	b17b      	cbz	r3, 8005532 <HAL_RCC_OscConfig+0x252>
        __HAL_RCC_HSI_ENABLE();
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005518:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800551a:	f7fe fdfb 	bl	8004114 <HAL_GetTick>
 800551e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	055f      	lsls	r7, r3, #21
 8005524:	d4e5      	bmi.n	80054f2 <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005526:	f7fe fdf5 	bl	8004114 <HAL_GetTick>
 800552a:	1b80      	subs	r0, r0, r6
 800552c:	2802      	cmp	r0, #2
 800552e:	d9f7      	bls.n	8005520 <HAL_RCC_OscConfig+0x240>
 8005530:	e76b      	b.n	800540a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_DISABLE();
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005538:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800553a:	f7fe fdeb 	bl	8004114 <HAL_GetTick>
 800553e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	0558      	lsls	r0, r3, #21
 8005544:	f57f af1b 	bpl.w	800537e <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005548:	f7fe fde4 	bl	8004114 <HAL_GetTick>
 800554c:	1b80      	subs	r0, r0, r6
 800554e:	2802      	cmp	r0, #2
 8005550:	d9f6      	bls.n	8005540 <HAL_RCC_OscConfig+0x260>
 8005552:	e75a      	b.n	800540a <HAL_RCC_OscConfig+0x12a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005554:	696b      	ldr	r3, [r5, #20]
 8005556:	4c0b      	ldr	r4, [pc, #44]	; (8005584 <HAL_RCC_OscConfig+0x2a4>)
 8005558:	b1d3      	cbz	r3, 8005590 <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_LSI_ENABLE();
 800555a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800555e:	f043 0301 	orr.w	r3, r3, #1
 8005562:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005566:	f7fe fdd5 	bl	8004114 <HAL_GetTick>
 800556a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 800556c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005570:	079b      	lsls	r3, r3, #30
 8005572:	f53f af08 	bmi.w	8005386 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005576:	f7fe fdcd 	bl	8004114 <HAL_GetTick>
 800557a:	1b80      	subs	r0, r0, r6
 800557c:	2802      	cmp	r0, #2
 800557e:	d9f5      	bls.n	800556c <HAL_RCC_OscConfig+0x28c>
 8005580:	e743      	b.n	800540a <HAL_RCC_OscConfig+0x12a>
 8005582:	bf00      	nop
 8005584:	40021000 	.word	0x40021000
 8005588:	0800b570 	.word	0x0800b570
 800558c:	20000004 	.word	0x20000004
      __HAL_RCC_LSI_DISABLE();
 8005590:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005594:	f023 0301 	bic.w	r3, r3, #1
 8005598:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800559c:	f7fe fdba 	bl	8004114 <HAL_GetTick>
 80055a0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80055a2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80055a6:	079f      	lsls	r7, r3, #30
 80055a8:	f57f aeed 	bpl.w	8005386 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055ac:	f7fe fdb2 	bl	8004114 <HAL_GetTick>
 80055b0:	1b80      	subs	r0, r0, r6
 80055b2:	2802      	cmp	r0, #2
 80055b4:	d9f5      	bls.n	80055a2 <HAL_RCC_OscConfig+0x2c2>
 80055b6:	e728      	b.n	800540a <HAL_RCC_OscConfig+0x12a>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80055b8:	4c66      	ldr	r4, [pc, #408]	; (8005754 <HAL_RCC_OscConfig+0x474>)
 80055ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055bc:	00de      	lsls	r6, r3, #3
 80055be:	d427      	bmi.n	8005610 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_PWR_CLK_ENABLE();
 80055c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80055c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ce:	9301      	str	r3, [sp, #4]
 80055d0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80055d2:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055d4:	4e60      	ldr	r6, [pc, #384]	; (8005758 <HAL_RCC_OscConfig+0x478>)
 80055d6:	6833      	ldr	r3, [r6, #0]
 80055d8:	05d8      	lsls	r0, r3, #23
 80055da:	d51b      	bpl.n	8005614 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055dc:	68ab      	ldr	r3, [r5, #8]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d129      	bne.n	8005636 <HAL_RCC_OscConfig+0x356>
 80055e2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80055e6:	f043 0301 	orr.w	r3, r3, #1
 80055ea:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80055ee:	f7fe fd91 	bl	8004114 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80055f6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80055f8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80055fc:	079a      	lsls	r2, r3, #30
 80055fe:	d540      	bpl.n	8005682 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8005600:	2f00      	cmp	r7, #0
 8005602:	f43f aec4 	beq.w	800538e <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005606:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800560c:	65a3      	str	r3, [r4, #88]	; 0x58
 800560e:	e6be      	b.n	800538e <HAL_RCC_OscConfig+0xae>
    FlagStatus       pwrclkchanged = RESET;
 8005610:	2700      	movs	r7, #0
 8005612:	e7df      	b.n	80055d4 <HAL_RCC_OscConfig+0x2f4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005614:	6833      	ldr	r3, [r6, #0]
 8005616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800561a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800561c:	f7fe fd7a 	bl	8004114 <HAL_GetTick>
 8005620:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005622:	6833      	ldr	r3, [r6, #0]
 8005624:	05d9      	lsls	r1, r3, #23
 8005626:	d4d9      	bmi.n	80055dc <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005628:	f7fe fd74 	bl	8004114 <HAL_GetTick>
 800562c:	eba0 0008 	sub.w	r0, r0, r8
 8005630:	2802      	cmp	r0, #2
 8005632:	d9f6      	bls.n	8005622 <HAL_RCC_OscConfig+0x342>
 8005634:	e6e9      	b.n	800540a <HAL_RCC_OscConfig+0x12a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005636:	2b05      	cmp	r3, #5
 8005638:	d106      	bne.n	8005648 <HAL_RCC_OscConfig+0x368>
 800563a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800563e:	f043 0304 	orr.w	r3, r3, #4
 8005642:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8005646:	e7cc      	b.n	80055e2 <HAL_RCC_OscConfig+0x302>
 8005648:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800564c:	f022 0201 	bic.w	r2, r2, #1
 8005650:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8005654:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005658:	f022 0204 	bic.w	r2, r2, #4
 800565c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1c4      	bne.n	80055ee <HAL_RCC_OscConfig+0x30e>
      tickstart = HAL_GetTick();
 8005664:	f7fe fd56 	bl	8004114 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005668:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800566c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800566e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005672:	079b      	lsls	r3, r3, #30
 8005674:	d5c4      	bpl.n	8005600 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005676:	f7fe fd4d 	bl	8004114 <HAL_GetTick>
 800567a:	1b80      	subs	r0, r0, r6
 800567c:	4540      	cmp	r0, r8
 800567e:	d9f6      	bls.n	800566e <HAL_RCC_OscConfig+0x38e>
 8005680:	e6c3      	b.n	800540a <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005682:	f7fe fd47 	bl	8004114 <HAL_GetTick>
 8005686:	1b80      	subs	r0, r0, r6
 8005688:	4540      	cmp	r0, r8
 800568a:	d9b5      	bls.n	80055f8 <HAL_RCC_OscConfig+0x318>
 800568c:	e6bd      	b.n	800540a <HAL_RCC_OscConfig+0x12a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800568e:	4c31      	ldr	r4, [pc, #196]	; (8005754 <HAL_RCC_OscConfig+0x474>)
 8005690:	68a3      	ldr	r3, [r4, #8]
 8005692:	f003 030c 	and.w	r3, r3, #12
 8005696:	2b0c      	cmp	r3, #12
 8005698:	f43f ae32 	beq.w	8005300 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 800569c:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800569e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80056a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056a4:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056a6:	d137      	bne.n	8005718 <HAL_RCC_OscConfig+0x438>
        tickstart = HAL_GetTick();
 80056a8:	f7fe fd34 	bl	8004114 <HAL_GetTick>
 80056ac:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	019f      	lsls	r7, r3, #6
 80056b2:	d42b      	bmi.n	800570c <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056b4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80056b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80056b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80056bc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80056be:	3a01      	subs	r2, #1
 80056c0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80056c4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80056c6:	0912      	lsrs	r2, r2, #4
 80056c8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80056cc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80056ce:	0852      	lsrs	r2, r2, #1
 80056d0:	3a01      	subs	r2, #1
 80056d2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80056d6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80056d8:	0852      	lsrs	r2, r2, #1
 80056da:	3a01      	subs	r2, #1
 80056dc:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80056e0:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056e8:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056ea:	68e3      	ldr	r3, [r4, #12]
 80056ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056f0:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80056f2:	f7fe fd0f 	bl	8004114 <HAL_GetTick>
 80056f6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	0198      	lsls	r0, r3, #6
 80056fc:	f53f ae4b 	bmi.w	8005396 <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005700:	f7fe fd08 	bl	8004114 <HAL_GetTick>
 8005704:	1b40      	subs	r0, r0, r5
 8005706:	2802      	cmp	r0, #2
 8005708:	d9f6      	bls.n	80056f8 <HAL_RCC_OscConfig+0x418>
 800570a:	e67e      	b.n	800540a <HAL_RCC_OscConfig+0x12a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800570c:	f7fe fd02 	bl	8004114 <HAL_GetTick>
 8005710:	1b80      	subs	r0, r0, r6
 8005712:	2802      	cmp	r0, #2
 8005714:	d9cb      	bls.n	80056ae <HAL_RCC_OscConfig+0x3ce>
 8005716:	e678      	b.n	800540a <HAL_RCC_OscConfig+0x12a>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	0119      	lsls	r1, r3, #4
 800571c:	d406      	bmi.n	800572c <HAL_RCC_OscConfig+0x44c>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800571e:	6823      	ldr	r3, [r4, #0]
           && 
 8005720:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005722:	bf5e      	ittt	pl
 8005724:	68e3      	ldrpl	r3, [r4, #12]
 8005726:	f023 0303 	bicpl.w	r3, r3, #3
 800572a:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800572c:	68e3      	ldr	r3, [r4, #12]
 800572e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005736:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8005738:	f7fe fcec 	bl	8004114 <HAL_GetTick>
 800573c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	019b      	lsls	r3, r3, #6
 8005742:	f57f ae28 	bpl.w	8005396 <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005746:	f7fe fce5 	bl	8004114 <HAL_GetTick>
 800574a:	1b40      	subs	r0, r0, r5
 800574c:	2802      	cmp	r0, #2
 800574e:	d9f6      	bls.n	800573e <HAL_RCC_OscConfig+0x45e>
 8005750:	e65b      	b.n	800540a <HAL_RCC_OscConfig+0x12a>
 8005752:	bf00      	nop
 8005754:	40021000 	.word	0x40021000
 8005758:	40007000 	.word	0x40007000

0800575c <HAL_RCC_GetHCLKFreq>:
}
 800575c:	4b01      	ldr	r3, [pc, #4]	; (8005764 <HAL_RCC_GetHCLKFreq+0x8>)
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	20000004 	.word	0x20000004

08005768 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8005768:	4b08      	ldr	r3, [pc, #32]	; (800578c <HAL_RCC_GetPCLK1Freq+0x24>)
 800576a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	fa92 f2a2 	rbit	r2, r2
 8005774:	fab2 f282 	clz	r2, r2
 8005778:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800577c:	40d3      	lsrs	r3, r2
 800577e:	4a04      	ldr	r2, [pc, #16]	; (8005790 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005780:	5cd3      	ldrb	r3, [r2, r3]
 8005782:	4a04      	ldr	r2, [pc, #16]	; (8005794 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8005784:	6810      	ldr	r0, [r2, #0]
}
 8005786:	40d8      	lsrs	r0, r3
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40021000 	.word	0x40021000
 8005790:	0800b580 	.word	0x0800b580
 8005794:	20000004 	.word	0x20000004

08005798 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8005798:	4b08      	ldr	r3, [pc, #32]	; (80057bc <HAL_RCC_GetPCLK2Freq+0x24>)
 800579a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	fa92 f2a2 	rbit	r2, r2
 80057a4:	fab2 f282 	clz	r2, r2
 80057a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80057ac:	40d3      	lsrs	r3, r2
 80057ae:	4a04      	ldr	r2, [pc, #16]	; (80057c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057b0:	5cd3      	ldrb	r3, [r2, r3]
 80057b2:	4a04      	ldr	r2, [pc, #16]	; (80057c4 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80057b4:	6810      	ldr	r0, [r2, #0]
}
 80057b6:	40d8      	lsrs	r0, r3
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40021000 	.word	0x40021000
 80057c0:	0800b580 	.word	0x0800b580
 80057c4:	20000004 	.word	0x20000004

080057c8 <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80057c8:	4a02      	ldr	r2, [pc, #8]	; (80057d4 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80057ca:	6813      	ldr	r3, [r2, #0]
 80057cc:	f043 0304 	orr.w	r3, r3, #4
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	4770      	bx	lr
 80057d4:	40021000 	.word	0x40021000

080057d8 <SD_CmdResp2Error>:
  */
static HAL_SD_ErrorTypedef SD_CmdResp2Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 80057d8:	6803      	ldr	r3, [r0, #0]
 80057da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057dc:	f012 0f45 	tst.w	r2, #69	; 0x45
 80057e0:	d0fb      	beq.n	80057da <SD_CmdResp2Error+0x2>
  {
  }
    
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 80057e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057e4:	0752      	lsls	r2, r2, #29
 80057e6:	d503      	bpl.n	80057f0 <SD_CmdResp2Error+0x18>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 80057e8:	2204      	movs	r2, #4
 80057ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 80057ec:	2003      	movs	r0, #3
 80057ee:	4770      	bx	lr
  }
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 80057f0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80057f2:	f010 0001 	ands.w	r0, r0, #1
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 80057f6:	bf15      	itete	ne
 80057f8:	2001      	movne	r0, #1
  {
    /* No error flag set */
  }  
  
  /* Clear all the static flags */
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057fa:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 80057fe:	6398      	strne	r0, [r3, #56]	; 0x38
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005800:	639a      	streq	r2, [r3, #56]	; 0x38
  
  return errorstate;
}
 8005802:	4770      	bx	lr

08005804 <SD_CmdResp1Error>:
{
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	4605      	mov	r5, r0
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8005808:	6800      	ldr	r0, [r0, #0]
{
 800580a:	460e      	mov	r6, r1
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 800580c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800580e:	f013 0f45 	tst.w	r3, #69	; 0x45
 8005812:	d0fb      	beq.n	800580c <SD_CmdResp1Error+0x8>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8005814:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005816:	075b      	lsls	r3, r3, #29
 8005818:	d503      	bpl.n	8005822 <SD_CmdResp1Error+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 800581a:	2304      	movs	r3, #4
 800581c:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 800581e:	2003      	movs	r0, #3
 8005820:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 8005822:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005824:	f014 0401 	ands.w	r4, r4, #1
 8005828:	d003      	beq.n	8005832 <SD_CmdResp1Error+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 800582a:	2301      	movs	r3, #1
 800582c:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 800582e:	4618      	mov	r0, r3
 8005830:	bd70      	pop	{r4, r5, r6, pc}
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 8005832:	f001 fc94 	bl	800715e <SDMMC_GetCommandResponse>
 8005836:	42b0      	cmp	r0, r6
 8005838:	d001      	beq.n	800583e <SD_CmdResp1Error+0x3a>
    return errorstate;
 800583a:	2010      	movs	r0, #16
 800583c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800583e:	6828      	ldr	r0, [r5, #0]
 8005840:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005844:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005846:	4621      	mov	r1, r4
 8005848:	f001 fc8c 	bl	8007164 <SDMMC_GetResponse>
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 800584c:	4b27      	ldr	r3, [pc, #156]	; (80058ec <SD_CmdResp1Error+0xe8>)
 800584e:	4003      	ands	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0ec      	beq.n	800582e <SD_CmdResp1Error+0x2a>
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 8005854:	2800      	cmp	r0, #0
 8005856:	db27      	blt.n	80058a8 <SD_CmdResp1Error+0xa4>
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 8005858:	0045      	lsls	r5, r0, #1
 800585a:	d427      	bmi.n	80058ac <SD_CmdResp1Error+0xa8>
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 800585c:	0084      	lsls	r4, r0, #2
 800585e:	d427      	bmi.n	80058b0 <SD_CmdResp1Error+0xac>
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 8005860:	00c1      	lsls	r1, r0, #3
 8005862:	d427      	bmi.n	80058b4 <SD_CmdResp1Error+0xb0>
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 8005864:	0102      	lsls	r2, r0, #4
 8005866:	d427      	bmi.n	80058b8 <SD_CmdResp1Error+0xb4>
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 8005868:	0143      	lsls	r3, r0, #5
 800586a:	d427      	bmi.n	80058bc <SD_CmdResp1Error+0xb8>
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 800586c:	01c6      	lsls	r6, r0, #7
 800586e:	d427      	bmi.n	80058c0 <SD_CmdResp1Error+0xbc>
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 8005870:	0205      	lsls	r5, r0, #8
 8005872:	d427      	bmi.n	80058c4 <SD_CmdResp1Error+0xc0>
  if((response_r1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 8005874:	0244      	lsls	r4, r0, #9
 8005876:	d4e0      	bmi.n	800583a <SD_CmdResp1Error+0x36>
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 8005878:	0281      	lsls	r1, r0, #10
 800587a:	d425      	bmi.n	80058c8 <SD_CmdResp1Error+0xc4>
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 800587c:	02c2      	lsls	r2, r0, #11
 800587e:	d425      	bmi.n	80058cc <SD_CmdResp1Error+0xc8>
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 8005880:	0303      	lsls	r3, r0, #12
 8005882:	d425      	bmi.n	80058d0 <SD_CmdResp1Error+0xcc>
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 8005884:	0346      	lsls	r6, r0, #13
 8005886:	d425      	bmi.n	80058d4 <SD_CmdResp1Error+0xd0>
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 8005888:	0385      	lsls	r5, r0, #14
 800588a:	d425      	bmi.n	80058d8 <SD_CmdResp1Error+0xd4>
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 800588c:	03c4      	lsls	r4, r0, #15
 800588e:	d425      	bmi.n	80058dc <SD_CmdResp1Error+0xd8>
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 8005890:	0401      	lsls	r1, r0, #16
 8005892:	d425      	bmi.n	80058e0 <SD_CmdResp1Error+0xdc>
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 8005894:	0442      	lsls	r2, r0, #17
 8005896:	d425      	bmi.n	80058e4 <SD_CmdResp1Error+0xe0>
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 8005898:	0483      	lsls	r3, r0, #18
 800589a:	d425      	bmi.n	80058e8 <SD_CmdResp1Error+0xe4>
    return(SD_AKE_SEQ_ERROR);
 800589c:	f010 0f08 	tst.w	r0, #8
 80058a0:	bf0c      	ite	eq
 80058a2:	2000      	moveq	r0, #0
 80058a4:	201a      	movne	r0, #26
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ADDR_OUT_OF_RANGE);
 80058a8:	201c      	movs	r0, #28
 80058aa:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ADDR_MISALIGNED);
 80058ac:	2009      	movs	r0, #9
 80058ae:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_BLOCK_LEN_ERR);
 80058b0:	200a      	movs	r0, #10
 80058b2:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ERASE_SEQ_ERR);
 80058b4:	200b      	movs	r0, #11
 80058b6:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_BAD_ERASE_PARAM);
 80058b8:	200c      	movs	r0, #12
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_WRITE_PROT_VIOLATION);
 80058bc:	200d      	movs	r0, #13
 80058be:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_LOCK_UNLOCK_FAILED);
 80058c0:	200e      	movs	r0, #14
 80058c2:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_COM_CRC_FAILED);
 80058c4:	200f      	movs	r0, #15
 80058c6:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CARD_ECC_FAILED);
 80058c8:	2011      	movs	r0, #17
 80058ca:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CC_ERROR);
 80058cc:	2012      	movs	r0, #18
 80058ce:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_GENERAL_UNKNOWN_ERROR);
 80058d0:	2013      	movs	r0, #19
 80058d2:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_STREAM_READ_UNDERRUN);
 80058d4:	2014      	movs	r0, #20
 80058d6:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_STREAM_WRITE_OVERRUN);
 80058d8:	2015      	movs	r0, #21
 80058da:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CID_CSD_OVERWRITE);
 80058dc:	2016      	movs	r0, #22
 80058de:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_WP_ERASE_SKIP);
 80058e0:	2017      	movs	r0, #23
 80058e2:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CARD_ECC_DISABLED);
 80058e4:	2018      	movs	r0, #24
 80058e6:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ERASE_RESET);
 80058e8:	2019      	movs	r0, #25
}
 80058ea:	bd70      	pop	{r4, r5, r6, pc}
 80058ec:	fdffe008 	.word	0xfdffe008

080058f0 <SD_FindSCR>:
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80058f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058f4:	b08e      	sub	sp, #56	; 0x38
  SDMMC_CmdInitTypeDef  sdmmc_cmdinitstructure;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 80058f6:	2300      	movs	r3, #0
  
  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 80058f8:	2410      	movs	r4, #16
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80058fa:	2240      	movs	r2, #64	; 0x40
{
 80058fc:	4606      	mov	r6, r0
  uint32_t tempscr[2] = {0, 0};
 80058fe:	9301      	str	r3, [sp, #4]
 8005900:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005902:	9306      	str	r3, [sp, #24]
{
 8005904:	460d      	mov	r5, r1
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005906:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800590a:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
 800590c:	2708      	movs	r7, #8
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800590e:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005910:	9404      	str	r4, [sp, #16]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005912:	9205      	str	r2, [sp, #20]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005914:	9307      	str	r3, [sp, #28]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
 8005916:	9703      	str	r7, [sp, #12]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005918:	f001 fc0f 	bl	800713a <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 800591c:	4621      	mov	r1, r4
 800591e:	4630      	mov	r0, r6
 8005920:	f7ff ff70 	bl	8005804 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8005924:	4604      	mov	r4, r0
 8005926:	2800      	cmp	r0, #0
 8005928:	d138      	bne.n	800599c <SD_FindSCR+0xac>
  {
    return errorstate;
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 800592a:	6a73      	ldr	r3, [r6, #36]	; 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800592c:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 800592e:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8005930:	2437      	movs	r4, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005932:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8005934:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8005936:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005938:	f001 fbff 	bl	800713a <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800593c:	4621      	mov	r1, r4
 800593e:	4630      	mov	r0, r6
 8005940:	f7ff ff60 	bl	8005804 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8005944:	4604      	mov	r4, r0
 8005946:	bb48      	cbnz	r0, 800599c <SD_FindSCR+0xac>
  {
    return errorstate;
  }
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8005948:	f04f 33ff 	mov.w	r3, #4294967295
 800594c:	9308      	str	r3, [sp, #32]
  sdmmc_datainitstructure.DataLength    = 8;
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800594e:	2330      	movs	r3, #48	; 0x30
 8005950:	930a      	str	r3, [sp, #40]	; 0x28
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005952:	2302      	movs	r3, #2
 8005954:	930b      	str	r3, [sp, #44]	; 0x2c
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005956:	900c      	str	r0, [sp, #48]	; 0x30
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005958:	2301      	movs	r3, #1
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 800595a:	a908      	add	r1, sp, #32
 800595c:	6830      	ldr	r0, [r6, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800595e:	930d      	str	r3, [sp, #52]	; 0x34
  sdmmc_datainitstructure.DataLength    = 8;
 8005960:	9709      	str	r7, [sp, #36]	; 0x24
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8005962:	f001 fc09 	bl	8007178 <SDMMC_DataConfig>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  sdmmc_cmdinitstructure.Argument         = 0;
 8005966:	9403      	str	r4, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005968:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 800596a:	2433      	movs	r4, #51	; 0x33
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800596c:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 800596e:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005970:	f001 fbe3 	bl	800713a <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SD_APP_SEND_SCR);
 8005974:	4621      	mov	r1, r4
 8005976:	4630      	mov	r0, r6
 8005978:	f7ff ff44 	bl	8005804 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 800597c:	4604      	mov	r4, r0
 800597e:	b968      	cbnz	r0, 800599c <SD_FindSCR+0xac>
 8005980:	466f      	mov	r7, sp
  {
    return errorstate;
  }
  
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8005982:	f240 482a 	movw	r8, #1066	; 0x42a
 8005986:	6830      	ldr	r0, [r6, #0]
 8005988:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800598a:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800598e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8005990:	d008      	beq.n	80059a4 <SD_FindSCR+0xb4>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
      index++;
    }
  }
  
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005992:	0719      	lsls	r1, r3, #28
 8005994:	d50d      	bpl.n	80059b2 <SD_FindSCR+0xc2>
  {
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005996:	2308      	movs	r3, #8
 8005998:	6383      	str	r3, [r0, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
    
    return errorstate;
 800599a:	2404      	movs	r4, #4
  
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
    ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
  
  return errorstate;
}
 800599c:	4620      	mov	r0, r4
 800599e:	b00e      	add	sp, #56	; 0x38
 80059a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80059a4:	029b      	lsls	r3, r3, #10
 80059a6:	d5ef      	bpl.n	8005988 <SD_FindSCR+0x98>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80059a8:	f001 fbbc 	bl	8007124 <SDMMC_ReadFIFO>
 80059ac:	f847 0f04 	str.w	r0, [r7, #4]!
 80059b0:	e7e9      	b.n	8005986 <SD_FindSCR+0x96>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80059b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80059b4:	079a      	lsls	r2, r3, #30
 80059b6:	d502      	bpl.n	80059be <SD_FindSCR+0xce>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80059b8:	2402      	movs	r4, #2
 80059ba:	6384      	str	r4, [r0, #56]	; 0x38
    return errorstate;
 80059bc:	e7ee      	b.n	800599c <SD_FindSCR+0xac>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80059be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80059c0:	069b      	lsls	r3, r3, #26
 80059c2:	d503      	bpl.n	80059cc <SD_FindSCR+0xdc>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80059c4:	2320      	movs	r3, #32
 80059c6:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 80059c8:	2406      	movs	r4, #6
 80059ca:	e7e7      	b.n	800599c <SD_FindSCR+0xac>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059cc:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80059d0:	6383      	str	r3, [r0, #56]	; 0x38
 80059d2:	9b01      	ldr	r3, [sp, #4]
 80059d4:	ba1b      	rev	r3, r3
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 80059d6:	606b      	str	r3, [r5, #4]
 80059d8:	9b02      	ldr	r3, [sp, #8]
 80059da:	ba1b      	rev	r3, r3
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 80059dc:	602b      	str	r3, [r5, #0]
  return errorstate;
 80059de:	e7dd      	b.n	800599c <SD_FindSCR+0xac>

080059e0 <HAL_SD_ReadBlocks_DMA>:
{
 80059e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059e4:	b08d      	sub	sp, #52	; 0x34
  hsd->Instance->DCTRL = 0;
 80059e6:	6806      	ldr	r6, [r0, #0]
{
 80059e8:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80059ea:	9d14      	ldr	r5, [sp, #80]	; 0x50
  if(NumberOfBlocks > 1)
 80059ec:	2f01      	cmp	r7, #1
{
 80059ee:	4699      	mov	r9, r3
  hsd->Instance->DCTRL = 0;
 80059f0:	f04f 0300 	mov.w	r3, #0
 80059f4:	62f3      	str	r3, [r6, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 80059f6:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 80059f8:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK; 
 80059fa:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdOperation = SD_READ_MULTIPLE_BLOCK;
 80059fc:	bf88      	it	hi
 80059fe:	2301      	movhi	r3, #1
    hsd->SdOperation = SD_READ_SINGLE_BLOCK;
 8005a00:	6543      	str	r3, [r0, #84]	; 0x54
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8005a02:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005a04:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 8005a08:	63f3      	str	r3, [r6, #60]	; 0x3c
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8005a0a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
{
 8005a0c:	4604      	mov	r4, r0
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8005a0e:	f043 0308 	orr.w	r3, r3, #8
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 8005a12:	6d80      	ldr	r0, [r0, #88]	; 0x58
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8005a14:	62f3      	str	r3, [r6, #44]	; 0x2c
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 8005a16:	4b2d      	ldr	r3, [pc, #180]	; (8005acc <HAL_SD_ReadBlocks_DMA+0xec>)
 8005a18:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 8005a1a:	4690      	mov	r8, r2
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 8005a1c:	4b2c      	ldr	r3, [pc, #176]	; (8005ad0 <HAL_SD_ReadBlocks_DMA+0xf0>)
  hsd->hdmarx->Instance->CCR &= ~DMA_MEMORY_TO_PERIPH;
 8005a1e:	6802      	ldr	r2, [r0, #0]
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 8005a20:	6343      	str	r3, [r0, #52]	; 0x34
  hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a22:	2300      	movs	r3, #0
 8005a24:	6083      	str	r3, [r0, #8]
  hsd->hdmarx->Instance->CCR &= ~DMA_MEMORY_TO_PERIPH;
 8005a26:	6813      	ldr	r3, [r2, #0]
 8005a28:	f023 0310 	bic.w	r3, r3, #16
 8005a2c:	6013      	str	r3, [r2, #0]
  HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pReadBuffer, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 8005a2e:	fb05 f307 	mul.w	r3, r5, r7
 8005a32:	460a      	mov	r2, r1
 8005a34:	089b      	lsrs	r3, r3, #2
 8005a36:	f106 0180 	add.w	r1, r6, #128	; 0x80
 8005a3a:	f7fe fcb3 	bl	80043a4 <HAL_DMA_Start_IT>
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8005a3e:	6a23      	ldr	r3, [r4, #32]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005a40:	6820      	ldr	r0, [r4, #0]
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8005a42:	2b02      	cmp	r3, #2
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005a44:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005a48:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a4a:	f04f 0300 	mov.w	r3, #0
    ReadAddr /= 512;
 8005a4e:	bf04      	itt	eq
 8005a50:	ea4f 2858 	moveq.w	r8, r8, lsr #9
    BlockSize = 512;
 8005a54:	f44f 7500 	moveq.w	r5, #512	; 0x200
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005a58:	f04f 0610 	mov.w	r6, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a5c:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005a5e:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
    ReadAddr /= 512;
 8005a64:	bf08      	it	eq
 8005a66:	ea48 58c9 	orreq.w	r8, r8, r9, lsl #23
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8005a6a:	9501      	str	r5, [sp, #4]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005a6c:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005a6e:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005a70:	f001 fb63 	bl	800713a <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8005a74:	4631      	mov	r1, r6
 8005a76:	4620      	mov	r0, r4
 8005a78:	f7ff fec4 	bl	8005804 <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 8005a7c:	bb10      	cbnz	r0, 8005ac4 <HAL_SD_ReadBlocks_DMA+0xe4>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8005a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a82:	9206      	str	r2, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005a84:	2290      	movs	r2, #144	; 0x90
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005a86:	2301      	movs	r3, #1
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005a88:	9208      	str	r2, [sp, #32]
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005a8a:	900a      	str	r0, [sp, #40]	; 0x28
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005a8c:	2202      	movs	r2, #2
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8005a8e:	a906      	add	r1, sp, #24
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8005a90:	437d      	muls	r5, r7
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8005a92:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005a94:	930b      	str	r3, [sp, #44]	; 0x2c
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005a96:	9209      	str	r2, [sp, #36]	; 0x24
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8005a98:	9507      	str	r5, [sp, #28]
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8005a9a:	f001 fb6d 	bl	8007178 <SDMMC_DataConfig>
  if(NumberOfBlocks > 1)
 8005a9e:	2f01      	cmp	r7, #1
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 8005aa0:	bf8c      	ite	hi
 8005aa2:	2312      	movhi	r3, #18
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 8005aa4:	2311      	movls	r3, #17
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005aa6:	a901      	add	r1, sp, #4
 8005aa8:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 8005aaa:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)ReadAddr;
 8005aac:	f8cd 8004 	str.w	r8, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005ab0:	f001 fb43 	bl	800713a <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 8005ab4:	2f01      	cmp	r7, #1
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_MULT_BLOCK);
 8005ab6:	bf8c      	ite	hi
 8005ab8:	2112      	movhi	r1, #18
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_SINGLE_BLOCK);
 8005aba:	2111      	movls	r1, #17
 8005abc:	4620      	mov	r0, r4
 8005abe:	f7ff fea1 	bl	8005804 <SD_CmdResp1Error>
  hsd->SdTransferErr = errorstate;
 8005ac2:	64e0      	str	r0, [r4, #76]	; 0x4c
}
 8005ac4:	b00d      	add	sp, #52	; 0x34
 8005ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005aca:	bf00      	nop
 8005acc:	08005c43 	.word	0x08005c43
 8005ad0:	08005c5f 	.word	0x08005c5f

08005ad4 <HAL_SD_WriteBlocks_DMA>:
{
 8005ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad8:	b08c      	sub	sp, #48	; 0x30
 8005ada:	4617      	mov	r7, r2
 8005adc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  hsd->Instance->DCTRL = 0;
 8005ade:	6802      	ldr	r2, [r0, #0]
{
 8005ae0:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  if(NumberOfBlocks > 1)
 8005ae4:	2e01      	cmp	r6, #1
{
 8005ae6:	461d      	mov	r5, r3
  hsd->Instance->DCTRL = 0;
 8005ae8:	f04f 0300 	mov.w	r3, #0
 8005aec:	62d3      	str	r3, [r2, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 8005aee:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 8005af0:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK;
 8005af2:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdOperation = SD_WRITE_MULTIPLE_BLOCK;
 8005af4:	bf8c      	ite	hi
 8005af6:	2303      	movhi	r3, #3
    hsd->SdOperation = SD_WRITE_SINGLE_BLOCK;
 8005af8:	2302      	movls	r3, #2
 8005afa:	6543      	str	r3, [r0, #84]	; 0x54
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8005afc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
{
 8005afe:	4604      	mov	r4, r0
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8005b00:	f443 738d 	orr.w	r3, r3, #282	; 0x11a
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8005b04:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8005b06:	63d3      	str	r3, [r2, #60]	; 0x3c
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8005b08:	4b2f      	ldr	r3, [pc, #188]	; (8005bc8 <HAL_SD_WriteBlocks_DMA+0xf4>)
  hsd->hdmatx->Instance->CCR |= DMA_MEMORY_TO_PERIPH;
 8005b0a:	f8d0 e000 	ldr.w	lr, [r0]
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8005b0e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsd->hdmatx->XferErrorCallback = SD_DMA_TxError;
 8005b10:	4b2e      	ldr	r3, [pc, #184]	; (8005bcc <HAL_SD_WriteBlocks_DMA+0xf8>)
 8005b12:	6343      	str	r3, [r0, #52]	; 0x34
  hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b14:	2310      	movs	r3, #16
 8005b16:	6083      	str	r3, [r0, #8]
  hsd->hdmatx->Instance->CCR |= DMA_MEMORY_TO_PERIPH;
 8005b18:	f8de 3000 	ldr.w	r3, [lr]
 8005b1c:	f043 0310 	orr.w	r3, r3, #16
 8005b20:	f8ce 3000 	str.w	r3, [lr]
  HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pWriteBuffer, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 8005b24:	fb08 f306 	mul.w	r3, r8, r6
 8005b28:	3280      	adds	r2, #128	; 0x80
 8005b2a:	089b      	lsrs	r3, r3, #2
 8005b2c:	f7fe fc3a 	bl	80043a4 <HAL_DMA_Start_IT>
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8005b30:	6820      	ldr	r0, [r4, #0]
 8005b32:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005b34:	f043 0308 	orr.w	r3, r3, #8
 8005b38:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8005b3a:	6a23      	ldr	r3, [r4, #32]
 8005b3c:	2b02      	cmp	r3, #2
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005b3e:	f04f 0340 	mov.w	r3, #64	; 0x40
    WriteAddr /= 512;
 8005b42:	bf08      	it	eq
 8005b44:	0a7f      	lsreq	r7, r7, #9
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005b46:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b48:	f04f 0300 	mov.w	r3, #0
    WriteAddr /= 512;
 8005b4c:	bf04      	itt	eq
 8005b4e:	ea47 57c5 	orreq.w	r7, r7, r5, lsl #23
    BlockSize = 512;
 8005b52:	f44f 7800 	moveq.w	r8, #512	; 0x200
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005b56:	2510      	movs	r5, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b58:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005b5a:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005b60:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005b62:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8005b64:	f8cd 8004 	str.w	r8, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005b68:	f001 fae7 	bl	800713a <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f7ff fe48 	bl	8005804 <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 8005b74:	4605      	mov	r5, r0
 8005b76:	bb18      	cbnz	r0, 8005bc0 <HAL_SD_WriteBlocks_DMA+0xec>
  if(NumberOfBlocks <= 1)
 8005b78:	2e01      	cmp	r6, #1
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 8005b7a:	bf94      	ite	ls
 8005b7c:	2318      	movls	r3, #24
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8005b7e:	2319      	movhi	r3, #25
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005b80:	a901      	add	r1, sp, #4
 8005b82:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8005b84:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
 8005b86:	9701      	str	r7, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005b88:	f001 fad7 	bl	800713a <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 8005b8c:	2e01      	cmp	r6, #1
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_MULT_BLOCK);
 8005b8e:	bf8c      	ite	hi
 8005b90:	2119      	movhi	r1, #25
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_SINGLE_BLOCK);
 8005b92:	2118      	movls	r1, #24
 8005b94:	4620      	mov	r0, r4
 8005b96:	f7ff fe35 	bl	8005804 <SD_CmdResp1Error>
 8005b9a:	4605      	mov	r5, r0
  if (errorstate != SD_OK)
 8005b9c:	b980      	cbnz	r0, 8005bc0 <HAL_SD_WriteBlocks_DMA+0xec>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8005b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba2:	9306      	str	r3, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005ba4:	2390      	movs	r3, #144	; 0x90
 8005ba6:	9308      	str	r3, [sp, #32]
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005ba8:	9009      	str	r0, [sp, #36]	; 0x24
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005baa:	900a      	str	r0, [sp, #40]	; 0x28
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005bac:	2301      	movs	r3, #1
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8005bae:	fb06 f608 	mul.w	r6, r6, r8
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8005bb2:	a906      	add	r1, sp, #24
 8005bb4:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8005bb6:	9607      	str	r6, [sp, #28]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005bb8:	930b      	str	r3, [sp, #44]	; 0x2c
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8005bba:	f001 fadd 	bl	8007178 <SDMMC_DataConfig>
  hsd->SdTransferErr = errorstate;
 8005bbe:	64e5      	str	r5, [r4, #76]	; 0x4c
}
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	b00c      	add	sp, #48	; 0x30
 8005bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bc8:	08005c6d 	.word	0x08005c6d
 8005bcc:	08005c89 	.word	0x08005c89

08005bd0 <HAL_SD_XferCpltCallback>:
 8005bd0:	4770      	bx	lr

08005bd2 <HAL_SD_XferErrorCallback>:
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_SD_IRQHandler>:
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 8005bd4:	6803      	ldr	r3, [r0, #0]
 8005bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bd8:	05d2      	lsls	r2, r2, #23
{  
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	4604      	mov	r4, r0
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 8005bde:	d510      	bpl.n	8005c02 <HAL_SD_IRQHandler+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_IT_DATAEND);  
 8005be0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005be4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferCplt = 1;
 8005be6:	2301      	movs	r3, #1
 8005be8:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdTransferErr  = SD_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_SD_XferCpltCallback(hsd);  
 8005bee:	f7ff ffef 	bl	8005bd0 <HAL_SD_XferCpltCallback>
  __HAL_SD_SDMMC_DISABLE_IT(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_DATAEND  |\
 8005bf2:	6822      	ldr	r2, [r4, #0]
 8005bf4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005bf6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8005bfa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005bfe:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005c00:	bd10      	pop	{r4, pc}
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL))
 8005c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c04:	0791      	lsls	r1, r2, #30
 8005c06:	d505      	bpl.n	8005c14 <HAL_SD_IRQHandler+0x40>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005c08:	2202      	movs	r2, #2
 8005c0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_CRC_FAIL;
 8005c0c:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 8005c0e:	f7ff ffe0 	bl	8005bd2 <HAL_SD_XferErrorCallback>
 8005c12:	e7ee      	b.n	8005bf2 <HAL_SD_IRQHandler+0x1e>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT))
 8005c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c16:	0712      	lsls	r2, r2, #28
 8005c18:	d504      	bpl.n	8005c24 <HAL_SD_IRQHandler+0x50>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005c1a:	2208      	movs	r2, #8
 8005c1c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_TIMEOUT;
 8005c1e:	2304      	movs	r3, #4
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 8005c20:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005c22:	e7f4      	b.n	8005c0e <HAL_SD_IRQHandler+0x3a>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_RXOVERR))
 8005c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c26:	0691      	lsls	r1, r2, #26
 8005c28:	d503      	bpl.n	8005c32 <HAL_SD_IRQHandler+0x5e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_RX_OVERRUN;
 8005c2e:	2306      	movs	r3, #6
 8005c30:	e7f6      	b.n	8005c20 <HAL_SD_IRQHandler+0x4c>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_TXUNDERR))
 8005c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c34:	06d2      	lsls	r2, r2, #27
 8005c36:	d5dc      	bpl.n	8005bf2 <HAL_SD_IRQHandler+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_TXUNDERR);
 8005c38:	2210      	movs	r2, #16
 8005c3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 8005c3c:	2305      	movs	r3, #5
 8005c3e:	e7ef      	b.n	8005c20 <HAL_SD_IRQHandler+0x4c>

08005c40 <HAL_SD_DMA_RxCpltCallback>:
 8005c40:	4770      	bx	lr

08005c42 <SD_DMA_RxCplt>:
{
 8005c42:	b510      	push	{r4, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8005c44:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hsd->DmaTransferCplt = 1;
 8005c46:	2301      	movs	r3, #1
 8005c48:	6523      	str	r3, [r4, #80]	; 0x50
  while(hsd->SdTransferCplt == 0)
 8005c4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0fc      	beq.n	8005c4a <SD_DMA_RxCplt+0x8>
  HAL_DMA_Abort(hdma);
 8005c50:	f7fe fbe6 	bl	8004420 <HAL_DMA_Abort>
  HAL_SD_DMA_RxCpltCallback(hsd->hdmarx);   
 8005c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c56:	f7ff fff3 	bl	8005c40 <HAL_SD_DMA_RxCpltCallback>
 8005c5a:	bd10      	pop	{r4, pc}

08005c5c <HAL_SD_DMA_RxErrorCallback>:
 8005c5c:	4770      	bx	lr

08005c5e <SD_DMA_RxError>:
{
 8005c5e:	b508      	push	{r3, lr}
  HAL_SD_DMA_RxErrorCallback(hsd->hdmarx);
 8005c60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005c62:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005c64:	f7ff fffa 	bl	8005c5c <HAL_SD_DMA_RxErrorCallback>
 8005c68:	bd08      	pop	{r3, pc}

08005c6a <HAL_SD_DMA_TxCpltCallback>:
 8005c6a:	4770      	bx	lr

08005c6c <SD_DMA_TxCplt>:
{
 8005c6c:	b510      	push	{r4, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8005c6e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hsd->DmaTransferCplt = 1;
 8005c70:	2301      	movs	r3, #1
 8005c72:	6523      	str	r3, [r4, #80]	; 0x50
  while(hsd->SdTransferCplt == 0)
 8005c74:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0fc      	beq.n	8005c74 <SD_DMA_TxCplt+0x8>
  HAL_DMA_Abort(hdma);
 8005c7a:	f7fe fbd1 	bl	8004420 <HAL_DMA_Abort>
  HAL_SD_DMA_TxCpltCallback(hsd->hdmatx);  
 8005c7e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005c80:	f7ff fff3 	bl	8005c6a <HAL_SD_DMA_TxCpltCallback>
 8005c84:	bd10      	pop	{r4, pc}

08005c86 <HAL_SD_DMA_TxErrorCallback>:
{
 8005c86:	4770      	bx	lr

08005c88 <SD_DMA_TxError>:
{
 8005c88:	b508      	push	{r3, lr}
  HAL_SD_DMA_TxErrorCallback(hsd->hdmatx);
 8005c8a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005c8c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8005c8e:	f7ff fffa 	bl	8005c86 <HAL_SD_DMA_TxErrorCallback>
 8005c92:	bd08      	pop	{r3, pc}

08005c94 <HAL_SD_Get_CardInfo>:
{
 8005c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 8005c98:	6a05      	ldr	r5, [r0, #32]
 8005c9a:	f881 5056 	strb.w	r5, [r1, #86]	; 0x56
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
 8005c9e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005ca0:	f8a1 3054 	strh.w	r3, [r1, #84]	; 0x54
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
 8005ca4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8005ca6:	0f9a      	lsrs	r2, r3, #30
 8005ca8:	700a      	strb	r2, [r1, #0]
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8005caa:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8005cae:	704a      	strb	r2, [r1, #1]
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03;
 8005cb0:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8005cb4:	708a      	strb	r2, [r1, #2]
  pCardInfo->SD_csd.TAAC = (uint8_t)tmp;
 8005cb6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005cba:	70ca      	strb	r2, [r1, #3]
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 8005cbc:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8005cc0:	b2db      	uxtb	r3, r3
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 8005cc2:	710a      	strb	r2, [r1, #4]
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8005cc4:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
 8005cc6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005cc8:	0e13      	lsrs	r3, r2, #24
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8005cce:	88cb      	ldrh	r3, [r1, #6]
{
 8005cd0:	4604      	mov	r4, r0
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	f3c2 5003 	ubfx	r0, r2, #20, #4
 8005cd8:	4303      	orrs	r3, r0
 8005cda:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8005cdc:	f3c2 4303 	ubfx	r3, r2, #16, #4
 8005ce0:	720b      	strb	r3, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00) >> 8;
 8005ce2:	f3c2 2307 	ubfx	r3, r2, #8, #8
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8005ce6:	09d8      	lsrs	r0, r3, #7
 8005ce8:	7248      	strb	r0, [r1, #9]
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8005cea:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8005cee:	7288      	strb	r0, [r1, #10]
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8005cf0:	f3c3 1040 	ubfx	r0, r3, #5, #1
 8005cf4:	72c8      	strb	r0, [r1, #11]
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8005cf6:	f3c3 1000 	ubfx	r0, r3, #4, #1
 8005cfa:	7308      	strb	r0, [r1, #12]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 8005cfc:	2d01      	cmp	r5, #1
  pCardInfo->SD_csd.Reserved2       = 0; /*!< Reserved */
 8005cfe:	f04f 0000 	mov.w	r0, #0
 8005d02:	7348      	strb	r0, [r1, #13]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 8005d04:	f200 80dc 	bhi.w	8005ec0 <HAL_SD_Get_CardInfo+0x22c>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 8005d08:	029b      	lsls	r3, r3, #10
 8005d0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d0e:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 8005d10:	690b      	ldr	r3, [r1, #16]
 8005d12:	0092      	lsls	r2, r2, #2
 8005d14:	f402 727f 	and.w	r2, r2, #1020	; 0x3fc
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8005d1c:	690b      	ldr	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 8005d1e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8005d20:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8005d24:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8005d26:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8005d2a:	750b      	strb	r3, [r1, #20]
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 8005d2c:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8005d30:	754b      	strb	r3, [r1, #21]
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8005d32:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8005d36:	758b      	strb	r3, [r1, #22]
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8005d38:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8005d3c:	75cb      	strb	r3, [r1, #23]
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
 8005d3e:	0bd3      	lsrs	r3, r2, #15
 8005d40:	f003 0306 	and.w	r3, r3, #6
 8005d44:	760b      	strb	r3, [r1, #24]
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 8005d46:	7e0d      	ldrb	r5, [r1, #24]
 8005d48:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8005d4c:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8005d50:	432a      	orrs	r2, r5
 8005d52:	760a      	strb	r2, [r1, #24]
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 8005d54:	690d      	ldr	r5, [r1, #16]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 8005d56:	7e0f      	ldrb	r7, [r1, #24]
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8005d58:	7a0a      	ldrb	r2, [r1, #8]
 8005d5a:	2601      	movs	r6, #1
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 8005d5c:	3702      	adds	r7, #2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8005d5e:	fa06 f202 	lsl.w	r2, r6, r2
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 8005d62:	40be      	lsls	r6, r7
 8005d64:	ea4f 79e6 	mov.w	r9, r6, asr #31
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8005d68:	fba6 6702 	umull	r6, r7, r6, r2
 8005d6c:	fb02 7709 	mla	r7, r2, r9, r7
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8005d70:	650a      	str	r2, [r1, #80]	; 0x50
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 8005d72:	1c6a      	adds	r2, r5, #1
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8005d74:	fba6 8902 	umull	r8, r9, r6, r2
 8005d78:	fb02 9907 	mla	r9, r2, r7, r9
 8005d7c:	e9c1 8912 	strd	r8, r9, [r1, #72]	; 0x48
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8005d80:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8005d8a:	764a      	strb	r2, [r1, #25]
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 8005d8c:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8005d8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 8005d90:	7e8a      	ldrb	r2, [r1, #26]
 8005d92:	f3c3 15c0 	ubfx	r5, r3, #7, #1
 8005d96:	432a      	orrs	r2, r5
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8005d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 8005d9c:	768a      	strb	r2, [r1, #26]
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8005d9e:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000) >> 24);
 8005da0:	6b63      	ldr	r3, [r4, #52]	; 0x34
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 8005da2:	0fda      	lsrs	r2, r3, #31
 8005da4:	770a      	strb	r2, [r1, #28]
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60) >> 5;
 8005da6:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8005daa:	774a      	strb	r2, [r1, #29]
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1C) >> 2;
 8005dac:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8005db0:	778a      	strb	r2, [r1, #30]
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03) << 2;
 8005db2:	0d9a      	lsrs	r2, r3, #22
 8005db4:	f002 020c 	and.w	r2, r2, #12
 8005db8:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8005dba:	7fca      	ldrb	r2, [r1, #31]
 8005dbc:	f3c3 5581 	ubfx	r5, r3, #22, #2
 8005dc0:	432a      	orrs	r2, r5
 8005dc2:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8005dc4:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8005dc8:	f881 2020 	strb.w	r2, [r1, #32]
  pCardInfo->SD_csd.Reserved3           = 0;
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 8005dd2:	f3c3 4200 	ubfx	r2, r3, #16, #1
 8005dd6:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 8005dda:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8005dde:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40) >> 6;
 8005de2:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8005de6:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20) >> 5;
 8005dea:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8005dee:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10) >> 4;
 8005df2:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8005df6:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
 8005dfa:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8005dfe:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCardInfo->SD_csd.Reserved4 = 1;
 8005e02:	2501      	movs	r5, #1
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 8005e04:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 8005e08:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 8005e0c:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 8005e10:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCardInfo->SD_csd.Reserved4 = 1;
 8005e14:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
  tmp = (uint8_t)((hsd->CID[0] & 0xFF000000) >> 24);
 8005e18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e1a:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ManufacturerID = tmp;
 8005e1c:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
 8005e20:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005e24:	0212      	lsls	r2, r2, #8
 8005e26:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 8005e28:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 8005e2a:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8005e2e:	b292      	uxth	r2, r2
 8005e30:	4332      	orrs	r2, r6
 8005e32:	061b      	lsls	r3, r3, #24
 8005e34:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
 8005e36:	630b      	str	r3, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 8005e38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 8005e3a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 8005e3c:	0e1e      	lsrs	r6, r3, #24
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 8005e3e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8005e42:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
 8005e44:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8005e46:	0a1a      	lsrs	r2, r3, #8
 8005e48:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8005e4c:	4332      	orrs	r2, r6
 8005e4e:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp;
 8005e50:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8005e52:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005e56:	4332      	orrs	r2, r6
  tmp = (uint8_t)(hsd->CID[1] & 0x000000FF);
 8005e58:	b2db      	uxtb	r3, r3
  pCardInfo->SD_cid.ProdName1 |= tmp;
 8005e5a:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName2 = tmp;
 8005e5c:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
  tmp = (uint8_t)((hsd->CID[2] & 0xFF000000) >> 24);
 8005e60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e62:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ProdRev = tmp;
 8005e64:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
  tmp = (uint8_t)((hsd->CID[2] & 0x00FF0000) >> 16);
 8005e68:	0c1a      	lsrs	r2, r3, #16
 8005e6a:	0612      	lsls	r2, r2, #24
  pCardInfo->SD_cid.ProdSN = tmp << 24;
 8005e6c:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 8005e6e:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8005e70:	021a      	lsls	r2, r3, #8
 8005e72:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8005e76:	4332      	orrs	r2, r6
 8005e78:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 8005e7a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	4313      	orrs	r3, r2
 8005e82:	638b      	str	r3, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp;
 8005e84:	6b8a      	ldr	r2, [r1, #56]	; 0x38
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
 8005e86:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCardInfo->SD_cid.ProdSN |= tmp;
 8005e88:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8005e8c:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 8005e8e:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 8005e92:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8005e96:	4322      	orrs	r2, r4
 8005e98:	f881 203c 	strb.w	r2, [r1, #60]	; 0x3c
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 8005e9c:	0a1a      	lsrs	r2, r3, #8
 8005e9e:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8005ea2:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8005ea4:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8005ea6:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8005eaa:	b292      	uxth	r2, r2
 8005eac:	4322      	orrs	r2, r4
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 8005eae:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8005eb2:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 8005eb4:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
  pCardInfo->SD_cid.Reserved2 = 1;
 8005eb8:	f881 5041 	strb.w	r5, [r1, #65]	; 0x41
}
 8005ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8005ec0:	2d02      	cmp	r5, #2
 8005ec2:	d11f      	bne.n	8005f04 <HAL_SD_Get_CardInfo+0x270>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 8005ec4:	0412      	lsls	r2, r2, #16
 8005ec6:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 8005eca:	6b23      	ldr	r3, [r4, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 8005ecc:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 8005ece:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 8005ed0:	0e1d      	lsrs	r5, r3, #24
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 8005ed2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005ed6:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 8005ed8:	690d      	ldr	r5, [r1, #16]
 8005eda:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005ede:	432a      	orrs	r2, r5
 8005ee0:	610a      	str	r2, [r1, #16]
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 8005ee2:	690e      	ldr	r6, [r1, #16]
 8005ee4:	2700      	movs	r7, #0
 8005ee6:	3601      	adds	r6, #1
 8005ee8:	f147 0700 	adc.w	r7, r7, #0
 8005eec:	04fa      	lsls	r2, r7, #19
 8005eee:	ea42 3256 	orr.w	r2, r2, r6, lsr #13
 8005ef2:	64ca      	str	r2, [r1, #76]	; 0x4c
 8005ef4:	04f6      	lsls	r6, r6, #19
    pCardInfo->CardBlockSize = 512;    
 8005ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005efa:	f3c3 2307 	ubfx	r3, r3, #8, #8
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 8005efe:	648e      	str	r6, [r1, #72]	; 0x48
    pCardInfo->CardBlockSize = 512;    
 8005f00:	650a      	str	r2, [r1, #80]	; 0x50
 8005f02:	e73d      	b.n	8005d80 <HAL_SD_Get_CardInfo+0xec>
    errorstate = SD_ERROR;
 8005f04:	2029      	movs	r0, #41	; 0x29
 8005f06:	e73b      	b.n	8005d80 <HAL_SD_Get_CardInfo+0xec>

08005f08 <HAL_SD_Init>:
{ 
 8005f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0c:	b091      	sub	sp, #68	; 0x44
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 8005f0e:	2500      	movs	r5, #0
{ 
 8005f10:	4604      	mov	r4, r0
 8005f12:	460e      	mov	r6, r1
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 8005f14:	f88d 5012 	strb.w	r5, [sp, #18]
  HAL_SD_MspInit(hsd);
 8005f18:	f7fd f83e 	bl	8002f98 <HAL_SD_MspInit>
  tmpinit.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005f1c:	2376      	movs	r3, #118	; 0x76
 8005f1e:	930f      	str	r3, [sp, #60]	; 0x3c
  tmpinit.BusWide             = SDMMC_BUS_WIDE_1B;
 8005f20:	950d      	str	r5, [sp, #52]	; 0x34
  tmpinit.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005f22:	950e      	str	r5, [sp, #56]	; 0x38
  SDMMC_Init(hsd->Instance, tmpinit);
 8005f24:	ab10      	add	r3, sp, #64	; 0x40
 8005f26:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8005f2a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  tmpinit.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005f2e:	950a      	str	r5, [sp, #40]	; 0x28
  tmpinit.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005f30:	950b      	str	r5, [sp, #44]	; 0x2c
  tmpinit.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005f32:	950c      	str	r5, [sp, #48]	; 0x30
  SDMMC_Init(hsd->Instance, tmpinit);
 8005f34:	ab0a      	add	r3, sp, #40	; 0x28
 8005f36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f38:	6820      	ldr	r0, [r4, #0]
 8005f3a:	f001 f8d7 	bl	80070ec <SDMMC_Init>
  __HAL_SD_SDMMC_DISABLE(hsd); 
 8005f3e:	6820      	ldr	r0, [r4, #0]
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
 8005f40:	f88d 5013 	strb.w	r5, [sp, #19]
  __HAL_SD_SDMMC_DISABLE(hsd); 
 8005f44:	6843      	ldr	r3, [r0, #4]
 8005f46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f4a:	6043      	str	r3, [r0, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8005f4c:	f001 f8ed 	bl	800712a <SDMMC_PowerState_ON>
  HAL_Delay(1);
 8005f50:	2001      	movs	r0, #1
 8005f52:	f7fe f8e5 	bl	8004120 <HAL_Delay>
  __HAL_SD_SDMMC_ENABLE(hsd);
 8005f56:	6820      	ldr	r0, [r4, #0]
 8005f58:	6843      	ldr	r3, [r0, #4]
 8005f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f5e:	6043      	str	r3, [r0, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005f60:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f66:	9309      	str	r3, [sp, #36]	; 0x24
  sdmmc_cmdinitstructure.Argument         = 0;
 8005f68:	9505      	str	r5, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
 8005f6a:	9506      	str	r5, [sp, #24]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_NO;
 8005f6c:	9507      	str	r5, [sp, #28]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f6e:	9508      	str	r5, [sp, #32]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005f70:	f001 f8e3 	bl	800713a <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8005f74:	6820      	ldr	r0, [r4, #0]
 8005f76:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005f7c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 8005f80:	b123      	cbz	r3, 8005f8c <HAL_SD_Init+0x84>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f82:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005f86:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	e005      	b.n	8005f98 <HAL_SD_Init+0x90>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8005f8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while((timeout > 0) && (!tmp))
 8005f8e:	3a01      	subs	r2, #1
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8005f90:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 8005f94:	d1f4      	bne.n	8005f80 <HAL_SD_Init+0x78>
    return errorstate;
 8005f96:	2303      	movs	r3, #3
  errorstate = SD_CmdError(hsd);
 8005f98:	f88d 3013 	strb.w	r3, [sp, #19]
  if(errorstate != SD_OK)
 8005f9c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8005fa0:	b18b      	cbz	r3, 8005fc6 <HAL_SD_Init+0xbe>
  return errorstate;
 8005fa2:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8005fa6:	b2db      	uxtb	r3, r3
  errorstate = SD_PowerON(hsd); 
 8005fa8:	f88d 3012 	strb.w	r3, [sp, #18]
  if(errorstate != SD_OK)     
 8005fac:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8005fb0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 80b1 	beq.w	800611c <HAL_SD_Init+0x214>
  return errorstate;
 8005fba:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8005fbe:	b2c0      	uxtb	r0, r0
}
 8005fc0:	b011      	add	sp, #68	; 0x44
 8005fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sdmmc_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
 8005fc6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005fca:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_SDMMC_SEND_IF_COND;
 8005fcc:	2308      	movs	r3, #8
 8005fce:	9306      	str	r3, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005fd0:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005fd2:	2340      	movs	r3, #64	; 0x40
 8005fd4:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005fd6:	f001 f8b0 	bl	800713a <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT); 
 8005fda:	6820      	ldr	r0, [r4, #0]
 8005fdc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005fde:	f013 0f45 	tst.w	r3, #69	; 0x45
 8005fe2:	bf14      	ite	ne
 8005fe4:	2301      	movne	r3, #1
 8005fe6:	2300      	moveq	r3, #0
  uint32_t timeout = SDMMC_CMD0TIMEOUT, tmp;
 8005fe8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  while((!tmp) && (timeout > 0))
 8005fec:	b90b      	cbnz	r3, 8005ff2 <HAL_SD_Init+0xea>
 8005fee:	2a00      	cmp	r2, #0
 8005ff0:	d17c      	bne.n	80060ec <HAL_SD_Init+0x1e4>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT); 
 8005ff2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if((timeout == 0) || tmp)
 8005ff4:	b112      	cbz	r2, 8005ffc <HAL_SD_Init+0xf4>
 8005ff6:	f013 0304 	ands.w	r3, r3, #4
 8005ffa:	d07f      	beq.n	80060fc <HAL_SD_Init+0x1f4>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8005ffc:	2304      	movs	r3, #4
 8005ffe:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8006000:	2303      	movs	r3, #3
  errorstate = SD_CmdResp7Error(hsd);
 8006002:	f88d 3013 	strb.w	r3, [sp, #19]
  if (errorstate == SD_OK)
 8006006:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800600a:	2300      	movs	r3, #0
 800600c:	2a00      	cmp	r2, #0
 800600e:	d17c      	bne.n	800610a <HAL_SD_Init+0x202>
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 8006010:	2201      	movs	r2, #1
 8006012:	6222      	str	r2, [r4, #32]
    sdtype        = SD_HIGH_CAPACITY;
 8006014:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006018:	2537      	movs	r5, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800601a:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Argument         = 0;
 800601c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800601e:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006020:	f001 f88b 	bl	800713a <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8006024:	4629      	mov	r1, r5
 8006026:	4620      	mov	r0, r4
 8006028:	f7ff fbec 	bl	8005804 <SD_CmdResp1Error>
 800602c:	f88d 0013 	strb.w	r0, [sp, #19]
  if(errorstate == SD_OK)
 8006030:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006034:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1b2      	bne.n	8005fa2 <HAL_SD_Init+0x9a>
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 800603c:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
      sdmmc_cmdinitstructure.Argument         = 0;
 8006040:	46a8      	mov	r8, r5
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 8006042:	f447 1780 	orr.w	r7, r7, #1048576	; 0x100000
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006046:	f04f 0b37 	mov.w	fp, #55	; 0x37
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800604a:	a905      	add	r1, sp, #20
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800604c:	f04f 0a40 	mov.w	sl, #64	; 0x40
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006050:	f44f 6980 	mov.w	r9, #1024	; 0x400
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006054:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = 0;
 8006056:	f8cd 8014 	str.w	r8, [sp, #20]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800605a:	f8cd b018 	str.w	fp, [sp, #24]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800605e:	f8cd a01c 	str.w	sl, [sp, #28]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006062:	f8cd 8020 	str.w	r8, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006066:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800606a:	f001 f866 	bl	800713a <SDMMC_SendCommand>
      errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800606e:	4659      	mov	r1, fp
 8006070:	4620      	mov	r0, r4
 8006072:	f7ff fbc7 	bl	8005804 <SD_CmdResp1Error>
 8006076:	f88d 0013 	strb.w	r0, [sp, #19]
      if(errorstate != SD_OK)
 800607a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800607e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006082:	2b00      	cmp	r3, #0
 8006084:	d18d      	bne.n	8005fa2 <HAL_SD_Init+0x9a>
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 8006086:	2329      	movs	r3, #41	; 0x29
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006088:	a905      	add	r1, sp, #20
 800608a:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 800608c:	9705      	str	r7, [sp, #20]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 800608e:	9306      	str	r3, [sp, #24]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006090:	f8cd a01c 	str.w	sl, [sp, #28]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006094:	9208      	str	r2, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006096:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800609a:	f001 f84e 	bl	800713a <SDMMC_SendCommand>
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 800609e:	6820      	ldr	r0, [r4, #0]
 80060a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80060a2:	f013 0f45 	tst.w	r3, #69	; 0x45
 80060a6:	d0fb      	beq.n	80060a0 <HAL_SD_Init+0x198>
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 80060a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80060aa:	f013 0304 	ands.w	r3, r3, #4
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 80060ae:	bf1b      	ittet	ne
 80060b0:	2304      	movne	r3, #4
 80060b2:	6383      	strne	r3, [r0, #56]	; 0x38
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060b4:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    return errorstate;
 80060b8:	2303      	movne	r3, #3
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060ba:	bf08      	it	eq
 80060bc:	6382      	streq	r2, [r0, #56]	; 0x38
      errorstate = SD_CmdResp3Error(hsd);
 80060be:	f88d 3013 	strb.w	r3, [sp, #19]
      if(errorstate != SD_OK)
 80060c2:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80060c6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f47f af69 	bne.w	8005fa2 <HAL_SD_Init+0x9a>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80060d0:	f001 f848 	bl	8007164 <SDMMC_GetResponse>
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 80060d4:	2800      	cmp	r0, #0
      count++;
 80060d6:	f105 0501 	add.w	r5, r5, #1
 80060da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 80060de:	db16      	blt.n	800610e <HAL_SD_Init+0x206>
 80060e0:	429d      	cmp	r5, r3
 80060e2:	d1b0      	bne.n	8006046 <HAL_SD_Init+0x13e>
      errorstate = SD_INVALID_VOLTRANGE;
 80060e4:	231b      	movs	r3, #27
 80060e6:	f88d 3013 	strb.w	r3, [sp, #19]
 80060ea:	e75a      	b.n	8005fa2 <HAL_SD_Init+0x9a>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT);
 80060ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80060ee:	f013 0f45 	tst.w	r3, #69	; 0x45
 80060f2:	bf14      	ite	ne
 80060f4:	2301      	movne	r3, #1
 80060f6:	2300      	moveq	r3, #0
    timeout--;
 80060f8:	3a01      	subs	r2, #1
 80060fa:	e777      	b.n	8005fec <HAL_SD_Init+0xe4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDREND))
 80060fc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80060fe:	0652      	lsls	r2, r2, #25
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CMDREND);
 8006100:	bf46      	itte	mi
 8006102:	2240      	movmi	r2, #64	; 0x40
 8006104:	6382      	strmi	r2, [r0, #56]	; 0x38
  return errorstate;
 8006106:	2329      	movpl	r3, #41	; 0x29
 8006108:	e77b      	b.n	8006002 <HAL_SD_Init+0xfa>
  uint32_t sdtype = SD_STD_CAPACITY;
 800610a:	461f      	mov	r7, r3
 800610c:	e784      	b.n	8006018 <HAL_SD_Init+0x110>
    if(count >= SD_MAX_VOLT_TRIAL)
 800610e:	429d      	cmp	r5, r3
 8006110:	d0e8      	beq.n	80060e4 <HAL_SD_Init+0x1dc>
    if((response & SD_HIGH_CAPACITY) == SD_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006112:	0047      	lsls	r7, r0, #1
      hsd->CardType = HIGH_CAPACITY_SD_CARD;
 8006114:	bf44      	itt	mi
 8006116:	2302      	movmi	r3, #2
 8006118:	6223      	strmi	r3, [r4, #32]
 800611a:	e742      	b.n	8005fa2 <HAL_SD_Init+0x9a>
  if(SDMMC_GetPowerState(hsd->Instance) == 0) /* Power off */
 800611c:	6820      	ldr	r0, [r4, #0]
 800611e:	f001 f808 	bl	8007132 <SDMMC_GetPowerState>
 8006122:	2800      	cmp	r0, #0
 8006124:	f000 80c2 	beq.w	80062ac <HAL_SD_Init+0x3a4>
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8006128:	6a23      	ldr	r3, [r4, #32]
 800612a:	2b04      	cmp	r3, #4
 800612c:	d026      	beq.n	800617c <HAL_SD_Init+0x274>
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
 800612e:	2302      	movs	r3, #2
 8006130:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8006132:	23c0      	movs	r3, #192	; 0xc0
 8006134:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006136:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006138:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800613c:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Argument         = 0;
 800613e:	9505      	str	r5, [sp, #20]
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006140:	9508      	str	r5, [sp, #32]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006142:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006144:	f000 fff9 	bl	800713a <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 8006148:	4620      	mov	r0, r4
 800614a:	f7ff fb45 	bl	80057d8 <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 800614e:	4605      	mov	r5, r0
 8006150:	2800      	cmp	r0, #0
 8006152:	d155      	bne.n	8006200 <HAL_SD_Init+0x2f8>
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006154:	4601      	mov	r1, r0
 8006156:	6820      	ldr	r0, [r4, #0]
 8006158:	f001 f804 	bl	8007164 <SDMMC_GetResponse>
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800615c:	2104      	movs	r1, #4
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800615e:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006160:	6820      	ldr	r0, [r4, #0]
 8006162:	f000 ffff 	bl	8007164 <SDMMC_GetResponse>
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006166:	2108      	movs	r1, #8
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006168:	63e0      	str	r0, [r4, #60]	; 0x3c
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800616a:	6820      	ldr	r0, [r4, #0]
 800616c:	f000 fffa 	bl	8007164 <SDMMC_GetResponse>
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006170:	210c      	movs	r1, #12
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006172:	6420      	str	r0, [r4, #64]	; 0x40
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006174:	6820      	ldr	r0, [r4, #0]
 8006176:	f000 fff5 	bl	8007164 <SDMMC_GetResponse>
 800617a:	6460      	str	r0, [r4, #68]	; 0x44
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 800617c:	6a23      	ldr	r3, [r4, #32]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d92b      	bls.n	80061da <HAL_SD_Init+0x2d2>
 8006182:	2b06      	cmp	r3, #6
 8006184:	d029      	beq.n	80061da <HAL_SD_Init+0x2d2>
  uint16_t sd_rca = 1;
 8006186:	2001      	movs	r0, #1
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8006188:	6a23      	ldr	r3, [r4, #32]
 800618a:	2b04      	cmp	r3, #4
 800618c:	f000 8092 	beq.w	80062b4 <HAL_SD_Init+0x3ac>
    hsd->RCA = sd_rca;
 8006190:	6260      	str	r0, [r4, #36]	; 0x24
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 8006192:	2309      	movs	r3, #9
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006194:	0400      	lsls	r0, r0, #16
 8006196:	9005      	str	r0, [sp, #20]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 8006198:	9306      	str	r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800619a:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 800619c:	23c0      	movs	r3, #192	; 0xc0
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800619e:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 80061a0:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80061a2:	f000 ffca 	bl	800713a <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 80061a6:	4620      	mov	r0, r4
 80061a8:	f7ff fb16 	bl	80057d8 <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 80061ac:	4605      	mov	r5, r0
 80061ae:	bb38      	cbnz	r0, 8006200 <HAL_SD_Init+0x2f8>
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80061b0:	4601      	mov	r1, r0
 80061b2:	6820      	ldr	r0, [r4, #0]
 80061b4:	f000 ffd6 	bl	8007164 <SDMMC_GetResponse>
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80061b8:	2104      	movs	r1, #4
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80061ba:	62a0      	str	r0, [r4, #40]	; 0x28
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80061bc:	6820      	ldr	r0, [r4, #0]
 80061be:	f000 ffd1 	bl	8007164 <SDMMC_GetResponse>
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80061c2:	2108      	movs	r1, #8
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80061c4:	62e0      	str	r0, [r4, #44]	; 0x2c
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80061c6:	6820      	ldr	r0, [r4, #0]
 80061c8:	f000 ffcc 	bl	8007164 <SDMMC_GetResponse>
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80061cc:	210c      	movs	r1, #12
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80061ce:	6320      	str	r0, [r4, #48]	; 0x30
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80061d0:	6820      	ldr	r0, [r4, #0]
 80061d2:	f000 ffc7 	bl	8007164 <SDMMC_GetResponse>
 80061d6:	6360      	str	r0, [r4, #52]	; 0x34
 80061d8:	e012      	b.n	8006200 <HAL_SD_Init+0x2f8>
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
 80061da:	2303      	movs	r3, #3
 80061dc:	9306      	str	r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80061de:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80061e0:	2340      	movs	r3, #64	; 0x40
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80061e2:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80061e4:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80061e6:	f000 ffa8 	bl	800713a <SDMMC_SendCommand>
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 80061ea:	6820      	ldr	r0, [r4, #0]
 80061ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80061ee:	f013 0f45 	tst.w	r3, #69	; 0x45
 80061f2:	d0fb      	beq.n	80061ec <HAL_SD_Init+0x2e4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 80061f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80061f6:	075d      	lsls	r5, r3, #29
 80061f8:	d536      	bpl.n	8006268 <HAL_SD_Init+0x360>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 80061fa:	2304      	movs	r3, #4
 80061fc:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 80061fe:	2503      	movs	r5, #3
  errorstate = SD_Initialize_Cards(hsd);
 8006200:	f88d 5012 	strb.w	r5, [sp, #18]
  if (errorstate != SD_OK)
 8006204:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006208:	2b00      	cmp	r3, #0
 800620a:	f47f aed6 	bne.w	8005fba <HAL_SD_Init+0xb2>
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
 800620e:	4631      	mov	r1, r6
 8006210:	4620      	mov	r0, r4
 8006212:	f7ff fd3f 	bl	8005c94 <HAL_SD_Get_CardInfo>
 8006216:	f88d 0012 	strb.w	r0, [sp, #18]
  if (errorstate == SD_OK)
 800621a:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800621e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006222:	b9ab      	cbnz	r3, 8006250 <HAL_SD_Init+0x348>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8006224:	f8b6 3054 	ldrh.w	r3, [r6, #84]	; 0x54
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006228:	6820      	ldr	r0, [r4, #0]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800622a:	9208      	str	r2, [sp, #32]
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 800622c:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.Argument         = (uint32_t)addr;
 800622e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006230:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 8006232:	2507      	movs	r5, #7
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006234:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006236:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800623c:	9309      	str	r3, [sp, #36]	; 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 800623e:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006240:	f000 ff7b 	bl	800713a <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEL_DESEL_CARD);
 8006244:	4629      	mov	r1, r5
 8006246:	4620      	mov	r0, r4
 8006248:	f7ff fadc 	bl	8005804 <SD_CmdResp1Error>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 800624c:	f88d 0012 	strb.w	r0, [sp, #18]
  SDMMC_Init(hsd->Instance, hsd->Init);   
 8006250:	f104 0310 	add.w	r3, r4, #16
 8006254:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006258:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800625c:	1d23      	adds	r3, r4, #4
 800625e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006260:	6820      	ldr	r0, [r4, #0]
 8006262:	f000 ff43 	bl	80070ec <SDMMC_Init>
 8006266:	e6a8      	b.n	8005fba <HAL_SD_Init+0xb2>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 8006268:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800626a:	f015 0501 	ands.w	r5, r5, #1
 800626e:	d002      	beq.n	8006276 <HAL_SD_Init+0x36e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8006270:	2501      	movs	r5, #1
 8006272:	6385      	str	r5, [r0, #56]	; 0x38
 8006274:	e7c4      	b.n	8006200 <HAL_SD_Init+0x2f8>
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 8006276:	f000 ff72 	bl	800715e <SDMMC_GetCommandResponse>
 800627a:	2803      	cmp	r0, #3
 800627c:	d001      	beq.n	8006282 <HAL_SD_Init+0x37a>
    return errorstate;
 800627e:	2510      	movs	r5, #16
 8006280:	e7be      	b.n	8006200 <HAL_SD_Init+0x2f8>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006282:	6820      	ldr	r0, [r4, #0]
 8006284:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006288:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800628a:	4629      	mov	r1, r5
 800628c:	f000 ff6a 	bl	8007164 <SDMMC_GetResponse>
  if((response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)) == SD_ALLZERO)
 8006290:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8006294:	d101      	bne.n	800629a <HAL_SD_Init+0x392>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006296:	0c00      	lsrs	r0, r0, #16
 8006298:	e776      	b.n	8006188 <HAL_SD_Init+0x280>
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
 800629a:	0481      	lsls	r1, r0, #18
 800629c:	d408      	bmi.n	80062b0 <HAL_SD_Init+0x3a8>
  if((response_r1 & SD_R6_ILLEGAL_CMD) == SD_R6_ILLEGAL_CMD)
 800629e:	0442      	lsls	r2, r0, #17
 80062a0:	d4ed      	bmi.n	800627e <HAL_SD_Init+0x376>
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
 80062a2:	0403      	lsls	r3, r0, #16
 80062a4:	f57f af6f 	bpl.w	8006186 <HAL_SD_Init+0x27e>
    return(SD_COM_CRC_FAILED);
 80062a8:	250f      	movs	r5, #15
 80062aa:	e7a9      	b.n	8006200 <HAL_SD_Init+0x2f8>
    return errorstate;
 80062ac:	2525      	movs	r5, #37	; 0x25
 80062ae:	e7a7      	b.n	8006200 <HAL_SD_Init+0x2f8>
    return(SD_GENERAL_UNKNOWN_ERROR);
 80062b0:	2513      	movs	r5, #19
 80062b2:	e7a5      	b.n	8006200 <HAL_SD_Init+0x2f8>
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 80062b4:	2500      	movs	r5, #0
 80062b6:	e7a3      	b.n	8006200 <HAL_SD_Init+0x2f8>

080062b8 <HAL_SD_WideBusOperation_Config>:
{
 80062b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hsd->CardType == MULTIMEDIA_CARD)
 80062ba:	6a03      	ldr	r3, [r0, #32]
 80062bc:	2b03      	cmp	r3, #3
{
 80062be:	b08d      	sub	sp, #52	; 0x34
 80062c0:	4605      	mov	r5, r0
 80062c2:	460e      	mov	r6, r1
  if (hsd->CardType == MULTIMEDIA_CARD)
 80062c4:	f000 8088 	beq.w	80063d8 <HAL_SD_WideBusOperation_Config+0x120>
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	f200 8083 	bhi.w	80063d4 <HAL_SD_WideBusOperation_Config+0x11c>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80062ce:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80062d2:	f000 8081 	beq.w	80063d8 <HAL_SD_WideBusOperation_Config+0x120>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80062d6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80062da:	d14c      	bne.n	8006376 <HAL_SD_WideBusOperation_Config+0xbe>
  uint32_t scr[2] = {0, 0};
 80062dc:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 80062de:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 80062e0:	9104      	str	r1, [sp, #16]
 80062e2:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 80062e4:	f000 ff3e 	bl	8007164 <SDMMC_GetResponse>
 80062e8:	0180      	lsls	r0, r0, #6
 80062ea:	d46d      	bmi.n	80063c8 <HAL_SD_WideBusOperation_Config+0x110>
  errorstate = SD_FindSCR(hsd, scr);
 80062ec:	a904      	add	r1, sp, #16
 80062ee:	4628      	mov	r0, r5
 80062f0:	f7ff fafe 	bl	80058f0 <SD_FindSCR>
  if(errorstate != SD_OK)
 80062f4:	4604      	mov	r4, r0
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d167      	bne.n	80063ca <HAL_SD_WideBusOperation_Config+0x112>
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 80062fa:	9b05      	ldr	r3, [sp, #20]
 80062fc:	0359      	lsls	r1, r3, #13
 80062fe:	d567      	bpl.n	80063d0 <HAL_SD_WideBusOperation_Config+0x118>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006300:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006302:	9009      	str	r0, [sp, #36]	; 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006304:	041b      	lsls	r3, r3, #16
 8006306:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006308:	2340      	movs	r3, #64	; 0x40
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800630a:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800630c:	9308      	str	r3, [sp, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800630e:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006310:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006314:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006316:	930a      	str	r3, [sp, #40]	; 0x28
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006318:	9707      	str	r7, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800631a:	f000 ff0e 	bl	800713a <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800631e:	4639      	mov	r1, r7
 8006320:	4628      	mov	r0, r5
 8006322:	f7ff fa6f 	bl	8005804 <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 8006326:	4604      	mov	r4, r0
 8006328:	2800      	cmp	r0, #0
 800632a:	d14e      	bne.n	80063ca <HAL_SD_WideBusOperation_Config+0x112>
    sdmmc_cmdinitstructure.Argument         = 2;
 800632c:	2302      	movs	r3, #2
 800632e:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8006330:	2406      	movs	r4, #6
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006332:	a906      	add	r1, sp, #24
 8006334:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8006336:	9407      	str	r4, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006338:	f000 feff 	bl	800713a <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 800633c:	4621      	mov	r1, r4
 800633e:	4628      	mov	r0, r5
 8006340:	f7ff fa60 	bl	8005804 <SD_CmdResp1Error>
 8006344:	4604      	mov	r4, r0
    if (errorstate == SD_OK)
 8006346:	2800      	cmp	r0, #0
 8006348:	d13f      	bne.n	80063ca <HAL_SD_WideBusOperation_Config+0x112>
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
 800634a:	686b      	ldr	r3, [r5, #4]
 800634c:	9306      	str	r3, [sp, #24]
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
 800634e:	68ab      	ldr	r3, [r5, #8]
 8006350:	9307      	str	r3, [sp, #28]
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006352:	68eb      	ldr	r3, [r5, #12]
 8006354:	9308      	str	r3, [sp, #32]
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006356:	696b      	ldr	r3, [r5, #20]
 8006358:	930a      	str	r3, [sp, #40]	; 0x28
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
 800635a:	69ab      	ldr	r3, [r5, #24]
 800635c:	930b      	str	r3, [sp, #44]	; 0x2c
      tmpinit.BusWide             = WideMode;
 800635e:	9609      	str	r6, [sp, #36]	; 0x24
      SDMMC_Init(hsd->Instance, tmpinit);
 8006360:	ab0c      	add	r3, sp, #48	; 0x30
 8006362:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006366:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800636a:	ab06      	add	r3, sp, #24
 800636c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800636e:	6828      	ldr	r0, [r5, #0]
 8006370:	f000 febc 	bl	80070ec <SDMMC_Init>
 8006374:	e029      	b.n	80063ca <HAL_SD_WideBusOperation_Config+0x112>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006376:	2900      	cmp	r1, #0
 8006378:	d130      	bne.n	80063dc <HAL_SD_WideBusOperation_Config+0x124>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 800637a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 800637c:	9104      	str	r1, [sp, #16]
 800637e:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8006380:	f000 fef0 	bl	8007164 <SDMMC_GetResponse>
 8006384:	0182      	lsls	r2, r0, #6
 8006386:	d41f      	bmi.n	80063c8 <HAL_SD_WideBusOperation_Config+0x110>
  errorstate = SD_FindSCR(hsd, scr);
 8006388:	a904      	add	r1, sp, #16
 800638a:	4628      	mov	r0, r5
 800638c:	f7ff fab0 	bl	80058f0 <SD_FindSCR>
  if(errorstate != SD_OK)
 8006390:	4604      	mov	r4, r0
 8006392:	b9d0      	cbnz	r0, 80063ca <HAL_SD_WideBusOperation_Config+0x112>
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 8006394:	9b05      	ldr	r3, [sp, #20]
 8006396:	03db      	lsls	r3, r3, #15
 8006398:	d51a      	bpl.n	80063d0 <HAL_SD_WideBusOperation_Config+0x118>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800639a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800639c:	9009      	str	r0, [sp, #36]	; 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800639e:	041b      	lsls	r3, r3, #16
 80063a0:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80063a2:	2340      	movs	r3, #64	; 0x40
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80063a4:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80063a6:	9308      	str	r3, [sp, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80063a8:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80063aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80063ae:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80063b0:	930a      	str	r3, [sp, #40]	; 0x28
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80063b2:	9707      	str	r7, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80063b4:	f000 fec1 	bl	800713a <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80063b8:	4639      	mov	r1, r7
 80063ba:	4628      	mov	r0, r5
 80063bc:	f7ff fa22 	bl	8005804 <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 80063c0:	4604      	mov	r4, r0
 80063c2:	b910      	cbnz	r0, 80063ca <HAL_SD_WideBusOperation_Config+0x112>
    sdmmc_cmdinitstructure.Argument         = 0;
 80063c4:	9006      	str	r0, [sp, #24]
 80063c6:	e7b3      	b.n	8006330 <HAL_SD_WideBusOperation_Config+0x78>
    return errorstate;
 80063c8:	240e      	movs	r4, #14
}
 80063ca:	4620      	mov	r0, r4
 80063cc:	b00d      	add	sp, #52	; 0x34
 80063ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return errorstate;
 80063d0:	2425      	movs	r4, #37	; 0x25
 80063d2:	e7fa      	b.n	80063ca <HAL_SD_WideBusOperation_Config+0x112>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 80063d4:	2400      	movs	r4, #0
 80063d6:	e7f8      	b.n	80063ca <HAL_SD_WideBusOperation_Config+0x112>
    return errorstate;
 80063d8:	2427      	movs	r4, #39	; 0x27
 80063da:	e7f6      	b.n	80063ca <HAL_SD_WideBusOperation_Config+0x112>
      errorstate = SD_INVALID_PARAMETER;
 80063dc:	2426      	movs	r4, #38	; 0x26
 80063de:	e7f4      	b.n	80063ca <HAL_SD_WideBusOperation_Config+0x112>

080063e0 <HAL_SD_StopTransfer>:
{
 80063e0:	b530      	push	{r4, r5, lr}
 80063e2:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Argument         = 0;
 80063e4:	2300      	movs	r3, #0
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80063e6:	2240      	movs	r2, #64	; 0x40
{
 80063e8:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.Argument         = 0;
 80063ea:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 80063ec:	250c      	movs	r5, #12
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80063ee:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80063f0:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80063f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80063f6:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80063f8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80063fa:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 80063fc:	9502      	str	r5, [sp, #8]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80063fe:	f000 fe9c 	bl	800713a <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_STOP_TRANSMISSION);
 8006402:	4629      	mov	r1, r5
 8006404:	4620      	mov	r0, r4
 8006406:	f7ff f9fd 	bl	8005804 <SD_CmdResp1Error>
}
 800640a:	b007      	add	sp, #28
 800640c:	bd30      	pop	{r4, r5, pc}

0800640e <HAL_SD_CheckReadOperation>:
{
 800640e:	b538      	push	{r3, r4, r5, lr}
 8006410:	4604      	mov	r4, r0
 8006412:	460d      	mov	r5, r1
  tmp1 = hsd->DmaTransferCplt; 
 8006414:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 8006416:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8006418:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  uint32_t timeout = Timeout;
 800641a:	462a      	mov	r2, r5
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 800641c:	b2db      	uxtb	r3, r3
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 800641e:	4208      	tst	r0, r1
 8006420:	d100      	bne.n	8006424 <HAL_SD_CheckReadOperation+0x16>
 8006422:	b1b3      	cbz	r3, 8006452 <HAL_SD_CheckReadOperation+0x44>
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXACT)) && (timeout > 0))
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006428:	0492      	lsls	r2, r2, #18
 800642a:	d500      	bpl.n	800642e <HAL_SD_CheckReadOperation+0x20>
 800642c:	b9cd      	cbnz	r5, 8006462 <HAL_SD_CheckReadOperation+0x54>
  if (hsd->SdOperation == SD_READ_MULTIPLE_BLOCK)
 800642e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006430:	2b01      	cmp	r3, #1
 8006432:	d118      	bne.n	8006466 <HAL_SD_CheckReadOperation+0x58>
    errorstate = HAL_SD_StopTransfer(hsd);
 8006434:	4620      	mov	r0, r4
 8006436:	f7ff ffd3 	bl	80063e0 <HAL_SD_StopTransfer>
  if ((timeout == 0) && (errorstate == SD_OK))
 800643a:	b90d      	cbnz	r5, 8006440 <HAL_SD_CheckReadOperation+0x32>
 800643c:	b900      	cbnz	r0, 8006440 <HAL_SD_CheckReadOperation+0x32>
    errorstate = SD_DATA_TIMEOUT;
 800643e:	2004      	movs	r0, #4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006446:	639a      	str	r2, [r3, #56]	; 0x38
  if (hsd->SdTransferErr != SD_OK)
 8006448:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800644a:	b183      	cbz	r3, 800646e <HAL_SD_CheckReadOperation+0x60>
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 800644c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800644e:	b2c0      	uxtb	r0, r0
 8006450:	bd38      	pop	{r3, r4, r5, pc}
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8006452:	2a00      	cmp	r2, #0
 8006454:	d0e6      	beq.n	8006424 <HAL_SD_CheckReadOperation+0x16>
    tmp1 = hsd->DmaTransferCplt; 
 8006456:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 8006458:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 800645a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 800645c:	3a01      	subs	r2, #1
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 800645e:	b2db      	uxtb	r3, r3
 8006460:	e7dd      	b.n	800641e <HAL_SD_CheckReadOperation+0x10>
    timeout--;  
 8006462:	3d01      	subs	r5, #1
 8006464:	e7df      	b.n	8006426 <HAL_SD_CheckReadOperation+0x18>
  if ((timeout == 0) && (errorstate == SD_OK))
 8006466:	2d00      	cmp	r5, #0
 8006468:	d0e9      	beq.n	800643e <HAL_SD_CheckReadOperation+0x30>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800646a:	2000      	movs	r0, #0
 800646c:	e7e8      	b.n	8006440 <HAL_SD_CheckReadOperation+0x32>
}
 800646e:	bd38      	pop	{r3, r4, r5, pc}

08006470 <HAL_SD_GetStatus>:
{
 8006470:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006472:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8006474:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006476:	041b      	lsls	r3, r3, #16
 8006478:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800647a:	2340      	movs	r3, #64	; 0x40
 800647c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800647e:	2300      	movs	r3, #0
{
 8006480:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 8006482:	250d      	movs	r5, #13
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006484:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006486:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006488:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800648c:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800648e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 8006490:	9502      	str	r5, [sp, #8]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006492:	f000 fe52 	bl	800713a <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEND_STATUS);
 8006496:	4629      	mov	r1, r5
 8006498:	4620      	mov	r0, r4
 800649a:	f7ff f9b3 	bl	8005804 <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 800649e:	4601      	mov	r1, r0
 80064a0:	b948      	cbnz	r0, 80064b6 <HAL_SD_GetStatus+0x46>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80064a2:	6820      	ldr	r0, [r4, #0]
 80064a4:	f000 fe5e 	bl	8007164 <SDMMC_GetResponse>
  if (cardstate == SD_CARD_TRANSFER)
 80064a8:	f3c0 2043 	ubfx	r0, r0, #9, #4
    return SD_TRANSFER_OK;
 80064ac:	3804      	subs	r0, #4
 80064ae:	bf18      	it	ne
 80064b0:	2001      	movne	r0, #1
}
 80064b2:	b007      	add	sp, #28
 80064b4:	bd30      	pop	{r4, r5, pc}
    return SD_TRANSFER_ERROR;
 80064b6:	2002      	movs	r0, #2
 80064b8:	e7fb      	b.n	80064b2 <HAL_SD_GetStatus+0x42>

080064ba <HAL_SD_CheckWriteOperation>:
{
 80064ba:	b570      	push	{r4, r5, r6, lr}
 80064bc:	4604      	mov	r4, r0
 80064be:	460e      	mov	r6, r1
  tmp1 = hsd->DmaTransferCplt; 
 80064c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 80064c2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 80064c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  uint32_t timeout = Timeout;
 80064c6:	4632      	mov	r2, r6
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 80064c8:	b2db      	uxtb	r3, r3
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 80064ca:	4208      	tst	r0, r1
 80064cc:	d100      	bne.n	80064d0 <HAL_SD_CheckWriteOperation+0x16>
 80064ce:	b1c3      	cbz	r3, 8006502 <HAL_SD_CheckWriteOperation+0x48>
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXACT))  && (timeout > 0))
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064d4:	04d2      	lsls	r2, r2, #19
 80064d6:	d500      	bpl.n	80064da <HAL_SD_CheckWriteOperation+0x20>
 80064d8:	b9de      	cbnz	r6, 8006512 <HAL_SD_CheckWriteOperation+0x58>
  if (hsd->SdOperation == SD_WRITE_MULTIPLE_BLOCK)
 80064da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d120      	bne.n	8006522 <HAL_SD_CheckWriteOperation+0x68>
    errorstate = HAL_SD_StopTransfer(hsd);
 80064e0:	4620      	mov	r0, r4
 80064e2:	f7ff ff7d 	bl	80063e0 <HAL_SD_StopTransfer>
 80064e6:	4605      	mov	r5, r0
  if ((timeout == 0) && (errorstate == SD_OK))
 80064e8:	b90e      	cbnz	r6, 80064ee <HAL_SD_CheckWriteOperation+0x34>
 80064ea:	b900      	cbnz	r0, 80064ee <HAL_SD_CheckWriteOperation+0x34>
    errorstate = SD_DATA_TIMEOUT;
 80064ec:	2504      	movs	r5, #4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80064f4:	639a      	str	r2, [r3, #56]	; 0x38
  if (hsd->SdTransferErr != SD_OK)
 80064f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80064f8:	b16b      	cbz	r3, 8006516 <HAL_SD_CheckWriteOperation+0x5c>
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 80064fa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80064fc:	b2ed      	uxtb	r5, r5
}
 80064fe:	4628      	mov	r0, r5
 8006500:	bd70      	pop	{r4, r5, r6, pc}
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8006502:	2a00      	cmp	r2, #0
 8006504:	d0e4      	beq.n	80064d0 <HAL_SD_CheckWriteOperation+0x16>
    tmp1 = hsd->DmaTransferCplt; 
 8006506:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 8006508:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 800650a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 800650c:	3a01      	subs	r2, #1
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 800650e:	b2db      	uxtb	r3, r3
 8006510:	e7db      	b.n	80064ca <HAL_SD_CheckWriteOperation+0x10>
    timeout--;  
 8006512:	3e01      	subs	r6, #1
 8006514:	e7dd      	b.n	80064d2 <HAL_SD_CheckWriteOperation+0x18>
  while(HAL_SD_GetStatus(hsd) != SD_TRANSFER_OK)
 8006516:	4620      	mov	r0, r4
 8006518:	f7ff ffaa 	bl	8006470 <HAL_SD_GetStatus>
 800651c:	2800      	cmp	r0, #0
 800651e:	d1fa      	bne.n	8006516 <HAL_SD_CheckWriteOperation+0x5c>
 8006520:	e7ed      	b.n	80064fe <HAL_SD_CheckWriteOperation+0x44>
  if ((timeout == 0) && (errorstate == SD_OK))
 8006522:	2e00      	cmp	r6, #0
 8006524:	d0e2      	beq.n	80064ec <HAL_SD_CheckWriteOperation+0x32>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8006526:	2500      	movs	r5, #0
 8006528:	e7e1      	b.n	80064ee <HAL_SD_CheckWriteOperation+0x34>

0800652a <HAL_TIM_Base_MspInit>:
 800652a:	4770      	bx	lr

0800652c <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800652c:	6803      	ldr	r3, [r0, #0]
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	f042 0201 	orr.w	r2, r2, #1
 8006534:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	f042 0201 	orr.w	r2, r2, #1
 800653c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800653e:	2000      	movs	r0, #0
 8006540:	4770      	bx	lr
	...

08006544 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006544:	4a2e      	ldr	r2, [pc, #184]	; (8006600 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8006546:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006548:	4290      	cmp	r0, r2
 800654a:	d012      	beq.n	8006572 <TIM_Base_SetConfig+0x2e>
 800654c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006550:	d00f      	beq.n	8006572 <TIM_Base_SetConfig+0x2e>
 8006552:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006556:	4290      	cmp	r0, r2
 8006558:	d00b      	beq.n	8006572 <TIM_Base_SetConfig+0x2e>
 800655a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800655e:	4290      	cmp	r0, r2
 8006560:	d007      	beq.n	8006572 <TIM_Base_SetConfig+0x2e>
 8006562:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006566:	4290      	cmp	r0, r2
 8006568:	d003      	beq.n	8006572 <TIM_Base_SetConfig+0x2e>
 800656a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800656e:	4290      	cmp	r0, r2
 8006570:	d119      	bne.n	80065a6 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8006572:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006578:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800657a:	4a21      	ldr	r2, [pc, #132]	; (8006600 <TIM_Base_SetConfig+0xbc>)
 800657c:	4290      	cmp	r0, r2
 800657e:	d01d      	beq.n	80065bc <TIM_Base_SetConfig+0x78>
 8006580:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006584:	d01a      	beq.n	80065bc <TIM_Base_SetConfig+0x78>
 8006586:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800658a:	4290      	cmp	r0, r2
 800658c:	d016      	beq.n	80065bc <TIM_Base_SetConfig+0x78>
 800658e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006592:	4290      	cmp	r0, r2
 8006594:	d012      	beq.n	80065bc <TIM_Base_SetConfig+0x78>
 8006596:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800659a:	4290      	cmp	r0, r2
 800659c:	d00e      	beq.n	80065bc <TIM_Base_SetConfig+0x78>
 800659e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80065a2:	4290      	cmp	r0, r2
 80065a4:	d00a      	beq.n	80065bc <TIM_Base_SetConfig+0x78>
 80065a6:	4a17      	ldr	r2, [pc, #92]	; (8006604 <TIM_Base_SetConfig+0xc0>)
 80065a8:	4290      	cmp	r0, r2
 80065aa:	d007      	beq.n	80065bc <TIM_Base_SetConfig+0x78>
 80065ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065b0:	4290      	cmp	r0, r2
 80065b2:	d003      	beq.n	80065bc <TIM_Base_SetConfig+0x78>
 80065b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065b8:	4290      	cmp	r0, r2
 80065ba:	d103      	bne.n	80065c4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065bc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80065be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065c2:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80065c4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065c6:	688b      	ldr	r3, [r1, #8]
 80065c8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80065ca:	680b      	ldr	r3, [r1, #0]
 80065cc:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065ce:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <TIM_Base_SetConfig+0xbc>)
 80065d0:	4298      	cmp	r0, r3
 80065d2:	d00f      	beq.n	80065f4 <TIM_Base_SetConfig+0xb0>
 80065d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d8:	4298      	cmp	r0, r3
 80065da:	d00b      	beq.n	80065f4 <TIM_Base_SetConfig+0xb0>
 80065dc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80065e0:	4298      	cmp	r0, r3
 80065e2:	d007      	beq.n	80065f4 <TIM_Base_SetConfig+0xb0>
 80065e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065e8:	4298      	cmp	r0, r3
 80065ea:	d003      	beq.n	80065f4 <TIM_Base_SetConfig+0xb0>
 80065ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065f0:	4298      	cmp	r0, r3
 80065f2:	d101      	bne.n	80065f8 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065f4:	690b      	ldr	r3, [r1, #16]
 80065f6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065f8:	2301      	movs	r3, #1
 80065fa:	6143      	str	r3, [r0, #20]
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	40012c00 	.word	0x40012c00
 8006604:	40014000 	.word	0x40014000

08006608 <HAL_TIM_Base_Init>:
{
 8006608:	b510      	push	{r4, lr}
  if(htim == NULL)
 800660a:	4604      	mov	r4, r0
 800660c:	b1a0      	cbz	r0, 8006638 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800660e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8006612:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006616:	b91b      	cbnz	r3, 8006620 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006618:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800661c:	f7ff ff85 	bl	800652a <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8006620:	2302      	movs	r3, #2
 8006622:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006626:	6820      	ldr	r0, [r4, #0]
 8006628:	1d21      	adds	r1, r4, #4
 800662a:	f7ff ff8b 	bl	8006544 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800662e:	2301      	movs	r3, #1
 8006630:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8006634:	2000      	movs	r0, #0
 8006636:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006638:	2001      	movs	r0, #1
}
 800663a:	bd10      	pop	{r4, pc}

0800663c <HAL_UART_MspInit>:
 800663c:	4770      	bx	lr

0800663e <HAL_UART_MspDeInit>:
 800663e:	4770      	bx	lr

08006640 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006640:	b538      	push	{r3, r4, r5, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8006642:	4605      	mov	r5, r0
 8006644:	b1a0      	cbz	r0, 8006670 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->State = HAL_UART_STATE_BUSY;
 8006646:	2302      	movs	r3, #2
 8006648:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800664c:	6803      	ldr	r3, [r0, #0]
 800664e:	681a      	ldr	r2, [r3, #0]

  huart->Instance->CR1 = 0x0;
 8006650:	2400      	movs	r4, #0
  __HAL_UART_DISABLE(huart);
 8006652:	f022 0201 	bic.w	r2, r2, #1
 8006656:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0;
 8006658:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0;
 800665a:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0;
 800665c:	609c      	str	r4, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800665e:	f7ff ffee 	bl	800663e <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006662:	66ec      	str	r4, [r5, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8006664:	f885 4068 	strb.w	r4, [r5, #104]	; 0x68
  huart->State = HAL_UART_STATE_RESET;
 8006668:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69

  return HAL_OK;
 800666c:	4620      	mov	r0, r4
 800666e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006670:	2001      	movs	r0, #1
}
 8006672:	bd38      	pop	{r3, r4, r5, pc}

08006674 <HAL_UART_Receive_IT>:
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8006674:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8006678:	2b01      	cmp	r3, #1
 800667a:	d003      	beq.n	8006684 <HAL_UART_Receive_IT+0x10>
 800667c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8006680:	2b12      	cmp	r3, #18
 8006682:	d147      	bne.n	8006714 <HAL_UART_Receive_IT+0xa0>
  {
    if((pData == NULL ) || (Size == 0))
 8006684:	2900      	cmp	r1, #0
 8006686:	d043      	beq.n	8006710 <HAL_UART_Receive_IT+0x9c>
 8006688:	2a00      	cmp	r2, #0
 800668a:	d041      	beq.n	8006710 <HAL_UART_Receive_IT+0x9c>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800668c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8006690:	2b01      	cmp	r3, #1
 8006692:	d03f      	beq.n	8006714 <HAL_UART_Receive_IT+0xa0>
 8006694:	2301      	movs	r3, #1
 8006696:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800669a:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 800669c:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 800669e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 80066a2:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 80066a6:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80066aa:	d123      	bne.n	80066f4 <HAL_UART_Receive_IT+0x80>
 80066ac:	6903      	ldr	r3, [r0, #16]
 80066ae:	b9fb      	cbnz	r3, 80066f0 <HAL_UART_Receive_IT+0x7c>
 80066b0:	f240 13ff 	movw	r3, #511	; 0x1ff
 80066b4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b8:	2300      	movs	r3, #0
 80066ba:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80066bc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80066c0:	6802      	ldr	r2, [r0, #0]
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80066c2:	2b12      	cmp	r3, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80066c4:	bf0c      	ite	eq
 80066c6:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 80066c8:	2322      	movne	r3, #34	; 0x22
 80066ca:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80066ce:	6813      	ldr	r3, [r2, #0]
 80066d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d4:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80066d6:	6893      	ldr	r3, [r2, #8]
 80066d8:	f043 0301 	orr.w	r3, r3, #1
 80066dc:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066de:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(huart);
 80066e0:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066e2:	f041 0120 	orr.w	r1, r1, #32
    __HAL_UNLOCK(huart);
 80066e6:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066ea:	6011      	str	r1, [r2, #0]

    return HAL_OK;
 80066ec:	4618      	mov	r0, r3
 80066ee:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80066f0:	23ff      	movs	r3, #255	; 0xff
 80066f2:	e7df      	b.n	80066b4 <HAL_UART_Receive_IT+0x40>
 80066f4:	b923      	cbnz	r3, 8006700 <HAL_UART_Receive_IT+0x8c>
 80066f6:	6903      	ldr	r3, [r0, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d0f9      	beq.n	80066f0 <HAL_UART_Receive_IT+0x7c>
 80066fc:	237f      	movs	r3, #127	; 0x7f
 80066fe:	e7d9      	b.n	80066b4 <HAL_UART_Receive_IT+0x40>
 8006700:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006704:	d1d8      	bne.n	80066b8 <HAL_UART_Receive_IT+0x44>
 8006706:	6903      	ldr	r3, [r0, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0f7      	beq.n	80066fc <HAL_UART_Receive_IT+0x88>
 800670c:	233f      	movs	r3, #63	; 0x3f
 800670e:	e7d1      	b.n	80066b4 <HAL_UART_Receive_IT+0x40>
      return HAL_ERROR;
 8006710:	2001      	movs	r0, #1
 8006712:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006714:	2002      	movs	r0, #2
  }
}
 8006716:	4770      	bx	lr

08006718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 800671c:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800671e:	6921      	ldr	r1, [r4, #16]
 8006720:	68a3      	ldr	r3, [r4, #8]
 8006722:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006724:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006726:	430b      	orrs	r3, r1
 8006728:	6961      	ldr	r1, [r4, #20]
 800672a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800672c:	49b0      	ldr	r1, [pc, #704]	; (80069f0 <UART_SetConfig+0x2d8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800672e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006730:	4001      	ands	r1, r0
 8006732:	430b      	orrs	r3, r1
 8006734:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006736:	686b      	ldr	r3, [r5, #4]
 8006738:	68e1      	ldr	r1, [r4, #12]
 800673a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800673e:	430b      	orrs	r3, r1
 8006740:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006742:	4bac      	ldr	r3, [pc, #688]	; (80069f4 <UART_SetConfig+0x2dc>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006744:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006746:	429d      	cmp	r5, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006748:	bf1c      	itt	ne
 800674a:	6a23      	ldrne	r3, [r4, #32]
 800674c:	4319      	orrne	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800674e:	68ab      	ldr	r3, [r5, #8]
 8006750:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006754:	430b      	orrs	r3, r1
 8006756:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006758:	4ba7      	ldr	r3, [pc, #668]	; (80069f8 <UART_SetConfig+0x2e0>)
 800675a:	429d      	cmp	r5, r3
 800675c:	d118      	bne.n	8006790 <UART_SetConfig+0x78>
 800675e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8006762:	49a6      	ldr	r1, [pc, #664]	; (80069fc <UART_SetConfig+0x2e4>)
 8006764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006768:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800676c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006770:	5ccb      	ldrb	r3, [r1, r3]
 8006772:	f040 80c6 	bne.w	8006902 <UART_SetConfig+0x1ea>
  {
    switch (clocksource)
 8006776:	2b08      	cmp	r3, #8
 8006778:	d828      	bhi.n	80067cc <UART_SetConfig+0xb4>
 800677a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800677e:	011a      	.short	0x011a
 8006780:	012f00bf 	.word	0x012f00bf
 8006784:	01140027 	.word	0x01140027
 8006788:	00270027 	.word	0x00270027
 800678c:	00330027 	.word	0x00330027
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006790:	4b9b      	ldr	r3, [pc, #620]	; (8006a00 <UART_SetConfig+0x2e8>)
 8006792:	429d      	cmp	r5, r3
 8006794:	d107      	bne.n	80067a6 <UART_SetConfig+0x8e>
 8006796:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800679a:	499a      	ldr	r1, [pc, #616]	; (8006a04 <UART_SetConfig+0x2ec>)
 800679c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a0:	f003 030c 	and.w	r3, r3, #12
 80067a4:	e7e2      	b.n	800676c <UART_SetConfig+0x54>
 80067a6:	4b98      	ldr	r3, [pc, #608]	; (8006a08 <UART_SetConfig+0x2f0>)
 80067a8:	429d      	cmp	r5, r3
 80067aa:	d120      	bne.n	80067ee <UART_SetConfig+0xd6>
 80067ac:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80067b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067b8:	2b10      	cmp	r3, #16
 80067ba:	f000 80f1 	beq.w	80069a0 <UART_SetConfig+0x288>
 80067be:	d808      	bhi.n	80067d2 <UART_SetConfig+0xba>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 80f3 	beq.w	80069ac <UART_SetConfig+0x294>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067c6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80067ca:	d134      	bne.n	8006836 <UART_SetConfig+0x11e>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80067cc:	2201      	movs	r2, #1
  uint16_t usartdiv                   = 0x0000;
 80067ce:	2300      	movs	r3, #0
 80067d0:	e0f9      	b.n	80069c6 <UART_SetConfig+0x2ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067d2:	2b20      	cmp	r3, #32
 80067d4:	f000 80ff 	beq.w	80069d6 <UART_SetConfig+0x2be>
 80067d8:	2b30      	cmp	r3, #48	; 0x30
 80067da:	d1f4      	bne.n	80067c6 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067dc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80067e0:	f040 80c1 	bne.w	8006966 <UART_SetConfig+0x24e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80067e4:	6860      	ldr	r0, [r4, #4]
 80067e6:	0843      	lsrs	r3, r0, #1
 80067e8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80067ec:	e0fc      	b.n	80069e8 <UART_SetConfig+0x2d0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067ee:	4b87      	ldr	r3, [pc, #540]	; (8006a0c <UART_SetConfig+0x2f4>)
 80067f0:	429d      	cmp	r5, r3
 80067f2:	d122      	bne.n	800683a <UART_SetConfig+0x122>
 80067f4:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80067f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006800:	2b40      	cmp	r3, #64	; 0x40
 8006802:	f000 80c0 	beq.w	8006986 <UART_SetConfig+0x26e>
 8006806:	d806      	bhi.n	8006816 <UART_SetConfig+0xfe>
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 80b1 	beq.w	8006970 <UART_SetConfig+0x258>
  if(UART_INSTANCE_LOWPOWER(huart))
 800680e:	4b79      	ldr	r3, [pc, #484]	; (80069f4 <UART_SetConfig+0x2dc>)
 8006810:	429d      	cmp	r5, r3
 8006812:	d1d8      	bne.n	80067c6 <UART_SetConfig+0xae>
 8006814:	e00f      	b.n	8006836 <UART_SetConfig+0x11e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006816:	2b80      	cmp	r3, #128	; 0x80
 8006818:	f000 80bc 	beq.w	8006994 <UART_SetConfig+0x27c>
 800681c:	2bc0      	cmp	r3, #192	; 0xc0
 800681e:	d1f6      	bne.n	800680e <UART_SetConfig+0xf6>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006820:	4b74      	ldr	r3, [pc, #464]	; (80069f4 <UART_SetConfig+0x2dc>)
 8006822:	429d      	cmp	r5, r3
 8006824:	d1da      	bne.n	80067dc <UART_SetConfig+0xc4>
 8006826:	2308      	movs	r3, #8
      tmpreg = (uint32_t) LSE_VALUE;
 8006828:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800682c:	6862      	ldr	r2, [r4, #4]
 800682e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8006832:	4281      	cmp	r1, r0
 8006834:	d92b      	bls.n	800688e <UART_SetConfig+0x176>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8006836:	2201      	movs	r2, #1
      break;
    }
  }

  return ret;
 8006838:	e04b      	b.n	80068d2 <UART_SetConfig+0x1ba>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800683a:	4b75      	ldr	r3, [pc, #468]	; (8006a10 <UART_SetConfig+0x2f8>)
 800683c:	429d      	cmp	r5, r3
 800683e:	d111      	bne.n	8006864 <UART_SetConfig+0x14c>
 8006840:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8006844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800684c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006850:	f000 8099 	beq.w	8006986 <UART_SetConfig+0x26e>
 8006854:	d9d8      	bls.n	8006808 <UART_SetConfig+0xf0>
 8006856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800685a:	f000 809b 	beq.w	8006994 <UART_SetConfig+0x27c>
 800685e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006862:	e7dc      	b.n	800681e <UART_SetConfig+0x106>
 8006864:	4b63      	ldr	r3, [pc, #396]	; (80069f4 <UART_SetConfig+0x2dc>)
 8006866:	429d      	cmp	r5, r3
 8006868:	d1ad      	bne.n	80067c6 <UART_SetConfig+0xae>
 800686a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800686e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006872:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800687a:	f000 8084 	beq.w	8006986 <UART_SetConfig+0x26e>
 800687e:	d9c3      	bls.n	8006808 <UART_SetConfig+0xf0>
 8006880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006884:	f000 8086 	beq.w	8006994 <UART_SetConfig+0x27c>
 8006888:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800688c:	e7c7      	b.n	800681e <UART_SetConfig+0x106>
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800688e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8006892:	d8d0      	bhi.n	8006836 <UART_SetConfig+0x11e>
        switch (clocksource)
 8006894:	2b08      	cmp	r3, #8
 8006896:	d82f      	bhi.n	80068f8 <UART_SetConfig+0x1e0>
 8006898:	e8df f003 	tbb	[pc, r3]
 800689c:	2e1d2e05 	.word	0x2e1d2e05
 80068a0:	2e2e2e25 	.word	0x2e2e2e25
 80068a4:	28          	.byte	0x28
 80068a5:	00          	.byte	0x00
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80068a6:	f7fe ff5f 	bl	8005768 <HAL_RCC_GetPCLK1Freq>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80068aa:	6862      	ldr	r2, [r4, #4]
 80068ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068b0:	0856      	lsrs	r6, r2, #1
 80068b2:	2700      	movs	r7, #0
 80068b4:	fbe1 6700 	umlal	r6, r7, r1, r0
 80068b8:	2300      	movs	r3, #0
 80068ba:	4630      	mov	r0, r6
 80068bc:	4639      	mov	r1, r7
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80068be:	f7f9 fcdf 	bl	8000280 <__aeabi_uldivmod>
          break;
 80068c2:	2200      	movs	r2, #0
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 80068c4:	4b53      	ldr	r3, [pc, #332]	; (8006a14 <UART_SetConfig+0x2fc>)
 80068c6:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80068ca:	4299      	cmp	r1, r3
 80068cc:	d8b3      	bhi.n	8006836 <UART_SetConfig+0x11e>
           huart->Instance->BRR = tmpreg;
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	60d8      	str	r0, [r3, #12]

}
 80068d2:	4610      	mov	r0, r2
 80068d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80068d6:	4850      	ldr	r0, [pc, #320]	; (8006a18 <UART_SetConfig+0x300>)
 80068d8:	0855      	lsrs	r5, r2, #1
 80068da:	2300      	movs	r3, #0
 80068dc:	2100      	movs	r1, #0
 80068de:	1940      	adds	r0, r0, r5
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80068e0:	f141 0100 	adc.w	r1, r1, #0
 80068e4:	e7eb      	b.n	80068be <UART_SetConfig+0x1a6>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80068e6:	f7fe fc65 	bl	80051b4 <HAL_RCC_GetSysClockFreq>
 80068ea:	e7de      	b.n	80068aa <UART_SetConfig+0x192>
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80068ec:	0850      	lsrs	r0, r2, #1
 80068ee:	2100      	movs	r1, #0
 80068f0:	2300      	movs	r3, #0
 80068f2:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80068f6:	e7f3      	b.n	80068e0 <UART_SetConfig+0x1c8>
            ret = HAL_ERROR;
 80068f8:	2201      	movs	r2, #1
 80068fa:	e7e3      	b.n	80068c4 <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80068fc:	f7fe ff4c 	bl	8005798 <HAL_RCC_GetPCLK2Freq>
 8006900:	e059      	b.n	80069b6 <UART_SetConfig+0x29e>
    switch (clocksource)
 8006902:	2b08      	cmp	r3, #8
 8006904:	d897      	bhi.n	8006836 <UART_SetConfig+0x11e>
 8006906:	a201      	add	r2, pc, #4	; (adr r2, 800690c <UART_SetConfig+0x1f4>)
 8006908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690c:	08006931 	.word	0x08006931
 8006910:	08006945 	.word	0x08006945
 8006914:	0800694b 	.word	0x0800694b
 8006918:	08006837 	.word	0x08006837
 800691c:	08006961 	.word	0x08006961
 8006920:	08006837 	.word	0x08006837
 8006924:	08006837 	.word	0x08006837
 8006928:	08006837 	.word	0x08006837
 800692c:	08006967 	.word	0x08006967
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006930:	f7fe ff1a 	bl	8005768 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006934:	6863      	ldr	r3, [r4, #4]
 8006936:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800693a:	fbb0 f0f3 	udiv	r0, r0, r3
 800693e:	b280      	uxth	r0, r0
 8006940:	60e8      	str	r0, [r5, #12]
 8006942:	e01e      	b.n	8006982 <UART_SetConfig+0x26a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006944:	f7fe ff28 	bl	8005798 <HAL_RCC_GetPCLK2Freq>
 8006948:	e7f4      	b.n	8006934 <UART_SetConfig+0x21c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800694a:	6862      	ldr	r2, [r4, #4]
 800694c:	0853      	lsrs	r3, r2, #1
 800694e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006952:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006956:	fbb3 f3f2 	udiv	r3, r3, r2
 800695a:	b29b      	uxth	r3, r3
 800695c:	60eb      	str	r3, [r5, #12]
 800695e:	e010      	b.n	8006982 <UART_SetConfig+0x26a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006960:	f7fe fc28 	bl	80051b4 <HAL_RCC_GetSysClockFreq>
 8006964:	e7e6      	b.n	8006934 <UART_SetConfig+0x21c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006966:	6862      	ldr	r2, [r4, #4]
 8006968:	0853      	lsrs	r3, r2, #1
 800696a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800696e:	e7f2      	b.n	8006956 <UART_SetConfig+0x23e>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006970:	4b20      	ldr	r3, [pc, #128]	; (80069f4 <UART_SetConfig+0x2dc>)
 8006972:	429d      	cmp	r5, r3
 8006974:	d11a      	bne.n	80069ac <UART_SetConfig+0x294>
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8006976:	f7fe fef7 	bl	8005768 <HAL_RCC_GetPCLK1Freq>
      break;
 800697a:	2300      	movs	r3, #0
    if (tmpreg != 0)
 800697c:	2800      	cmp	r0, #0
 800697e:	f47f af55 	bne.w	800682c <UART_SetConfig+0x114>
  HAL_StatusTypeDef ret               = HAL_OK;
 8006982:	2200      	movs	r2, #0
      break;
 8006984:	e7a5      	b.n	80068d2 <UART_SetConfig+0x1ba>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006986:	4b1b      	ldr	r3, [pc, #108]	; (80069f4 <UART_SetConfig+0x2dc>)
 8006988:	429d      	cmp	r5, r3
 800698a:	d109      	bne.n	80069a0 <UART_SetConfig+0x288>
      tmpreg = HAL_RCC_GetSysClockFreq();
 800698c:	f7fe fc12 	bl	80051b4 <HAL_RCC_GetSysClockFreq>
      break;
 8006990:	2304      	movs	r3, #4
 8006992:	e7f3      	b.n	800697c <UART_SetConfig+0x264>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006994:	4b17      	ldr	r3, [pc, #92]	; (80069f4 <UART_SetConfig+0x2dc>)
 8006996:	429d      	cmp	r5, r3
 8006998:	d11d      	bne.n	80069d6 <UART_SetConfig+0x2be>
 800699a:	2302      	movs	r3, #2
      tmpreg = (uint32_t) HSI_VALUE;
 800699c:	481f      	ldr	r0, [pc, #124]	; (8006a1c <UART_SetConfig+0x304>)
 800699e:	e745      	b.n	800682c <UART_SetConfig+0x114>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069a0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80069a4:	d1dc      	bne.n	8006960 <UART_SetConfig+0x248>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80069a6:	f7fe fc05 	bl	80051b4 <HAL_RCC_GetSysClockFreq>
 80069aa:	e004      	b.n	80069b6 <UART_SetConfig+0x29e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069ac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80069b0:	d1be      	bne.n	8006930 <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80069b2:	f7fe fed9 	bl	8005768 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80069b6:	6861      	ldr	r1, [r4, #4]
 80069b8:	084a      	lsrs	r2, r1, #1
 80069ba:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80069be:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80069c2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80069c4:	2200      	movs	r2, #0
    brrtemp = usartdiv & 0xFFF0;
 80069c6:	f023 010f 	bic.w	r1, r3, #15
    huart->Instance->BRR = brrtemp;
 80069ca:	6820      	ldr	r0, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80069cc:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80069d0:	430b      	orrs	r3, r1
 80069d2:	60c3      	str	r3, [r0, #12]
 80069d4:	e77d      	b.n	80068d2 <UART_SetConfig+0x1ba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069d6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80069da:	d1b6      	bne.n	800694a <UART_SetConfig+0x232>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80069dc:	6860      	ldr	r0, [r4, #4]
 80069de:	0843      	lsrs	r3, r0, #1
 80069e0:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80069e4:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80069e8:	fbb3 f3f0 	udiv	r3, r3, r0
 80069ec:	e7e9      	b.n	80069c2 <UART_SetConfig+0x2aa>
 80069ee:	bf00      	nop
 80069f0:	efff69f3 	.word	0xefff69f3
 80069f4:	40008000 	.word	0x40008000
 80069f8:	40013800 	.word	0x40013800
 80069fc:	0800b7a7 	.word	0x0800b7a7
 8006a00:	40004400 	.word	0x40004400
 8006a04:	0800b7ab 	.word	0x0800b7ab
 8006a08:	40004800 	.word	0x40004800
 8006a0c:	40004c00 	.word	0x40004c00
 8006a10:	40005000 	.word	0x40005000
 8006a14:	000ffcff 	.word	0x000ffcff
 8006a18:	f4240000 	.word	0xf4240000
 8006a1c:	00f42400 	.word	0x00f42400

08006a20 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006a22:	07da      	lsls	r2, r3, #31
{
 8006a24:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a26:	d506      	bpl.n	8006a36 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a28:	6801      	ldr	r1, [r0, #0]
 8006a2a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8006a2c:	684a      	ldr	r2, [r1, #4]
 8006a2e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006a32:	4322      	orrs	r2, r4
 8006a34:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a36:	079c      	lsls	r4, r3, #30
 8006a38:	d506      	bpl.n	8006a48 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a3a:	6801      	ldr	r1, [r0, #0]
 8006a3c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006a3e:	684a      	ldr	r2, [r1, #4]
 8006a40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a44:	4322      	orrs	r2, r4
 8006a46:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a48:	0759      	lsls	r1, r3, #29
 8006a4a:	d506      	bpl.n	8006a5a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a4c:	6801      	ldr	r1, [r0, #0]
 8006a4e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006a50:	684a      	ldr	r2, [r1, #4]
 8006a52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a56:	4322      	orrs	r2, r4
 8006a58:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a5a:	071a      	lsls	r2, r3, #28
 8006a5c:	d506      	bpl.n	8006a6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a5e:	6801      	ldr	r1, [r0, #0]
 8006a60:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006a62:	684a      	ldr	r2, [r1, #4]
 8006a64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a68:	4322      	orrs	r2, r4
 8006a6a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a6c:	06dc      	lsls	r4, r3, #27
 8006a6e:	d506      	bpl.n	8006a7e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a70:	6801      	ldr	r1, [r0, #0]
 8006a72:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006a74:	688a      	ldr	r2, [r1, #8]
 8006a76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a7a:	4322      	orrs	r2, r4
 8006a7c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a7e:	0699      	lsls	r1, r3, #26
 8006a80:	d506      	bpl.n	8006a90 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a82:	6801      	ldr	r1, [r0, #0]
 8006a84:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006a86:	688a      	ldr	r2, [r1, #8]
 8006a88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a8c:	4322      	orrs	r2, r4
 8006a8e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a90:	065a      	lsls	r2, r3, #25
 8006a92:	d50f      	bpl.n	8006ab4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a94:	6801      	ldr	r1, [r0, #0]
 8006a96:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006a98:	684a      	ldr	r2, [r1, #4]
 8006a9a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006a9e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aa0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006aa4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aa6:	d105      	bne.n	8006ab4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006aa8:	684a      	ldr	r2, [r1, #4]
 8006aaa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006aac:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006ab0:	4322      	orrs	r2, r4
 8006ab2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ab4:	061b      	lsls	r3, r3, #24
 8006ab6:	d506      	bpl.n	8006ac6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ab8:	6802      	ldr	r2, [r0, #0]
 8006aba:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006abc:	6853      	ldr	r3, [r2, #4]
 8006abe:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006ac2:	430b      	orrs	r3, r1
 8006ac4:	6053      	str	r3, [r2, #4]
 8006ac6:	bd10      	pop	{r4, pc}

08006ac8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8006ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006acc:	4604      	mov	r4, r0
 8006ace:	460e      	mov	r6, r1
 8006ad0:	4690      	mov	r8, r2
 8006ad2:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8006ad4:	f7fd fb1e 	bl	8004114 <HAL_GetTick>
 8006ad8:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 8006ada:	f1b8 0f00 	cmp.w	r8, #0
 8006ade:	d02f      	beq.n	8006b40 <UART_WaitOnFlagUntilTimeout+0x78>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8006ae0:	6822      	ldr	r2, [r4, #0]
 8006ae2:	69d3      	ldr	r3, [r2, #28]
 8006ae4:	ea36 0303 	bics.w	r3, r6, r3
 8006ae8:	d12f      	bne.n	8006b4a <UART_WaitOnFlagUntilTimeout+0x82>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006aea:	1c6b      	adds	r3, r5, #1
 8006aec:	d0f9      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8006aee:	b145      	cbz	r5, 8006b02 <UART_WaitOnFlagUntilTimeout+0x3a>
 8006af0:	f7fd fb10 	bl	8004114 <HAL_GetTick>
 8006af4:	1bc0      	subs	r0, r0, r7
 8006af6:	4285      	cmp	r5, r0
 8006af8:	d2f2      	bcs.n	8006ae0 <UART_WaitOnFlagUntilTimeout+0x18>
 8006afa:	e002      	b.n	8006b02 <UART_WaitOnFlagUntilTimeout+0x3a>
      if(Timeout != HAL_MAX_DELAY)
 8006afc:	1c69      	adds	r1, r5, #1
 8006afe:	d020      	beq.n	8006b42 <UART_WaitOnFlagUntilTimeout+0x7a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8006b00:	b9cd      	cbnz	r5, 8006b36 <UART_WaitOnFlagUntilTimeout+0x6e>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b0a:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	f022 0220 	bic.w	r2, r2, #32
 8006b12:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b1a:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b1c:	689a      	ldr	r2, [r3, #8]
 8006b1e:	f022 0201 	bic.w	r2, r2, #1
 8006b22:	609a      	str	r2, [r3, #8]

          huart->State= HAL_UART_STATE_READY;
 8006b24:	2301      	movs	r3, #1
 8006b26:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68

          return HAL_TIMEOUT;
 8006b30:	2003      	movs	r0, #3
 8006b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8006b36:	f7fd faed 	bl	8004114 <HAL_GetTick>
 8006b3a:	1bc0      	subs	r0, r0, r7
 8006b3c:	4285      	cmp	r5, r0
 8006b3e:	d3e0      	bcc.n	8006b02 <UART_WaitOnFlagUntilTimeout+0x3a>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8006b40:	6822      	ldr	r2, [r4, #0]
 8006b42:	69d3      	ldr	r3, [r2, #28]
 8006b44:	ea36 0303 	bics.w	r3, r6, r3
 8006b48:	d1d8      	bne.n	8006afc <UART_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006b50 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b50:	2200      	movs	r2, #0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b52:	6803      	ldr	r3, [r0, #0]
{
 8006b54:	b510      	push	{r4, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b56:	66c2      	str	r2, [r0, #108]	; 0x6c
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	0719      	lsls	r1, r3, #28
{
 8006b5c:	4604      	mov	r4, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b5e:	d413      	bmi.n	8006b88 <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	075b      	lsls	r3, r3, #29
 8006b66:	d508      	bpl.n	8006b7a <UART_CheckIdleState+0x2a>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b72:	4620      	mov	r0, r4
 8006b74:	f7ff ffa8 	bl	8006ac8 <UART_WaitOnFlagUntilTimeout>
 8006b78:	b970      	cbnz	r0, 8006b98 <UART_CheckIdleState+0x48>
  huart->State= HAL_UART_STATE_READY;
 8006b7a:	2301      	movs	r3, #1
  __HAL_UNLOCK(huart);
 8006b7c:	2000      	movs	r0, #0
  huart->State= HAL_UART_STATE_READY;
 8006b7e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8006b82:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  return HAL_OK;
 8006b86:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b90:	f7ff ff9a 	bl	8006ac8 <UART_WaitOnFlagUntilTimeout>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d0e3      	beq.n	8006b60 <UART_CheckIdleState+0x10>
      return HAL_TIMEOUT;
 8006b98:	2003      	movs	r0, #3
 8006b9a:	bd10      	pop	{r4, pc}

08006b9c <HAL_UART_Init>:
{
 8006b9c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	b360      	cbz	r0, 8006bfc <HAL_UART_Init+0x60>
  if(huart->State == HAL_UART_STATE_RESET)
 8006ba2:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8006ba6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006baa:	b91b      	cbnz	r3, 8006bb4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8006bac:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8006bb0:	f7ff fd44 	bl	800663c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006bb4:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8006bbc:	6813      	ldr	r3, [r2, #0]
 8006bbe:	f023 0301 	bic.w	r3, r3, #1
 8006bc2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f7ff fda7 	bl	8006718 <UART_SetConfig>
 8006bca:	2801      	cmp	r0, #1
 8006bcc:	d016      	beq.n	8006bfc <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bd0:	b113      	cbz	r3, 8006bd8 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f7ff ff24 	bl	8006a20 <UART_AdvFeatureConfig>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006be0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006be8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8006bf0:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8006bf2:	601a      	str	r2, [r3, #0]
}
 8006bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8006bf8:	f7ff bfaa 	b.w	8006b50 <UART_CheckIdleState>
}
 8006bfc:	2001      	movs	r0, #1
 8006bfe:	bd10      	pop	{r4, pc}

08006c00 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006c04:	680a      	ldr	r2, [r1, #0]
 8006c06:	fa92 f4a2 	rbit	r4, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006c0a:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006c0e:	fab4 f484 	clz	r4, r4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006c12:	2503      	movs	r5, #3
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006c14:	270f      	movs	r7, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006c16:	fa32 f304 	lsrs.w	r3, r2, r4
 8006c1a:	d10d      	bne.n	8006c38 <LL_GPIO_Init+0x38>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006c1c:	684b      	ldr	r3, [r1, #4]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d806      	bhi.n	8006c32 <LL_GPIO_Init+0x32>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006c24:	6843      	ldr	r3, [r0, #4]
 8006c26:	68c9      	ldr	r1, [r1, #12]
 8006c28:	ea23 0302 	bic.w	r3, r3, r2
 8006c2c:	434a      	muls	r2, r1
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8006c32:	2001      	movs	r0, #1
 8006c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006c38:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	d069      	beq.n	8006d14 <LL_GPIO_Init+0x114>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006c40:	f8d1 8004 	ldr.w	r8, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006c44:	f8d0 9000 	ldr.w	r9, [r0]
 8006c48:	fa93 fca3 	rbit	ip, r3
 8006c4c:	fabc fc8c 	clz	ip, ip
 8006c50:	fa93 f6a3 	rbit	r6, r3
 8006c54:	fab6 f686 	clz	r6, r6
 8006c58:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006c5c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8006c60:	0076      	lsls	r6, r6, #1
 8006c62:	ea29 0c0c 	bic.w	ip, r9, ip
 8006c66:	fa08 f606 	lsl.w	r6, r8, r6
 8006c6a:	ea4c 0606 	orr.w	r6, ip, r6
 8006c6e:	6006      	str	r6, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006c70:	f108 36ff 	add.w	r6, r8, #4294967295
 8006c74:	2e01      	cmp	r6, #1
 8006c76:	d816      	bhi.n	8006ca6 <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006c78:	6886      	ldr	r6, [r0, #8]
 8006c7a:	fa93 fca3 	rbit	ip, r3
 8006c7e:	fabc fc8c 	clz	ip, ip
 8006c82:	fa93 f9a3 	rbit	r9, r3
 8006c86:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006c8a:	fa05 fc0c 	lsl.w	ip, r5, ip
 8006c8e:	ea26 0c0c 	bic.w	ip, r6, ip
 8006c92:	fab9 f989 	clz	r9, r9
 8006c96:	688e      	ldr	r6, [r1, #8]
 8006c98:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8006c9c:	fa06 f609 	lsl.w	r6, r6, r9
 8006ca0:	ea4c 0606 	orr.w	r6, ip, r6
 8006ca4:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006ca6:	68c6      	ldr	r6, [r0, #12]
 8006ca8:	fa93 fca3 	rbit	ip, r3
 8006cac:	fabc fc8c 	clz	ip, ip
 8006cb0:	fa93 f9a3 	rbit	r9, r3
 8006cb4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006cb8:	fa05 fc0c 	lsl.w	ip, r5, ip
 8006cbc:	ea26 0c0c 	bic.w	ip, r6, ip
 8006cc0:	fab9 f989 	clz	r9, r9
 8006cc4:	690e      	ldr	r6, [r1, #16]
 8006cc6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8006cca:	fa06 f609 	lsl.w	r6, r6, r9
 8006cce:	ea4c 0606 	orr.w	r6, ip, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006cd2:	f1b8 0f02 	cmp.w	r8, #2
 8006cd6:	60c6      	str	r6, [r0, #12]
 8006cd8:	d11c      	bne.n	8006d14 <LL_GPIO_Init+0x114>
 8006cda:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006cde:	fab6 f686 	clz	r6, r6
 8006ce2:	2e07      	cmp	r6, #7
 8006ce4:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8006ce8:	dc16      	bgt.n	8006d18 <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006cea:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8006cee:	fa93 f6a3 	rbit	r6, r3
 8006cf2:	fab6 f686 	clz	r6, r6
 8006cf6:	fa93 f3a3 	rbit	r3, r3
 8006cfa:	fab3 f383 	clz	r3, r3
 8006cfe:	00b6      	lsls	r6, r6, #2
 8006d00:	fa07 f606 	lsl.w	r6, r7, r6
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	ea28 0606 	bic.w	r6, r8, r6
 8006d0a:	fa0c fc03 	lsl.w	ip, ip, r3
 8006d0e:	ea46 060c 	orr.w	r6, r6, ip
 8006d12:	6206      	str	r6, [r0, #32]
    pinpos++;
 8006d14:	3401      	adds	r4, #1
 8006d16:	e77e      	b.n	8006c16 <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006d18:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 8006d1c:	0a1b      	lsrs	r3, r3, #8
 8006d1e:	fa93 f6a3 	rbit	r6, r3
 8006d22:	fab6 f686 	clz	r6, r6
 8006d26:	fa93 f3a3 	rbit	r3, r3
 8006d2a:	fab3 f383 	clz	r3, r3
 8006d2e:	00b6      	lsls	r6, r6, #2
 8006d30:	fa07 f606 	lsl.w	r6, r7, r6
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	ea28 0606 	bic.w	r6, r8, r6
 8006d3a:	fa0c f303 	lsl.w	r3, ip, r3
 8006d3e:	4333      	orrs	r3, r6
 8006d40:	6243      	str	r3, [r0, #36]	; 0x24
 8006d42:	e7e7      	b.n	8006d14 <LL_GPIO_Init+0x114>

08006d44 <LL_RTC_TIME_Config>:
{
 8006d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d48:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006d4c:	f44f 1740 	mov.w	r7, #3145728	; 0x300000
 8006d50:	fa97 f7a7 	rbit	r7, r7
 8006d54:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8006d58:	fab7 f787 	clz	r7, r7
 8006d5c:	fa94 f4a4 	rbit	r4, r4
 8006d60:	f44f 46e0 	mov.w	r6, #28672	; 0x7000
 8006d64:	fab4 fa84 	clz	sl, r4
 8006d68:	fa96 f6a6 	rbit	r6, r6
 8006d6c:	f44f 6970 	mov.w	r9, #3840	; 0xf00
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8006d70:	fab6 f686 	clz	r6, r6
 8006d74:	fa99 f9a9 	rbit	r9, r9
 8006d78:	2570      	movs	r5, #112	; 0x70
 8006d7a:	fab9 f989 	clz	r9, r9
 8006d7e:	fa95 f5a5 	rbit	r5, r5
 8006d82:	f04f 080f 	mov.w	r8, #15
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8006d86:	fab5 f585 	clz	r5, r5
 8006d8a:	fa98 f8a8 	rbit	r8, r8
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8006d8e:	f8d0 e000 	ldr.w	lr, [r0]
 8006d92:	f02e 1e7f 	bic.w	lr, lr, #8323199	; 0x7f007f
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8006d96:	f002 040f 	and.w	r4, r2, #15
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8006d9a:	f42e 4efe 	bic.w	lr, lr, #32512	; 0x7f00
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8006d9e:	fa04 f40a 	lsl.w	r4, r4, sl
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8006da2:	ea4e 0101 	orr.w	r1, lr, r1
 8006da6:	4321      	orrs	r1, r4
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8006da8:	f003 040f 	and.w	r4, r3, #15
 8006dac:	fa04 f909 	lsl.w	r9, r4, r9
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8006db0:	fab8 f888 	clz	r8, r8
 8006db4:	f00c 040f 	and.w	r4, ip, #15
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8006db8:	ea41 0109 	orr.w	r1, r1, r9
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8006dbc:	fa04 f808 	lsl.w	r8, r4, r8
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8006dc0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006dc4:	3f04      	subs	r7, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8006dc6:	ea41 0108 	orr.w	r1, r1, r8
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8006dca:	40ba      	lsls	r2, r7
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8006dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dd0:	3e04      	subs	r6, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8006dd2:	430a      	orrs	r2, r1
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8006dd4:	40b3      	lsls	r3, r6
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8006dd6:	f00c 0cf0 	and.w	ip, ip, #240	; 0xf0
 8006dda:	3d04      	subs	r5, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8006ddc:	4313      	orrs	r3, r2
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8006dde:	fa0c f505 	lsl.w	r5, ip, r5
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8006de2:	432b      	orrs	r3, r5
 8006de4:	6003      	str	r3, [r0, #0]
 8006de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006dec <LL_RTC_DATE_Config>:
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  * @param  Year Value between Min_Data=0x00 and Max_Data=0x99
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DATE_Config(RTC_TypeDef *RTCx, uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 8006dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8006df4:	f44f 4a60 	mov.w	sl, #57344	; 0xe000
 8006df8:	fa9a faaa 	rbit	sl, sl
 8006dfc:	f44f 0770 	mov.w	r7, #15728640	; 0xf00000
  register uint32_t temp = 0U;

  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 8006e00:	faba fa8a 	clz	sl, sl
 8006e04:	fa97 f7a7 	rbit	r7, r7
 8006e08:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8006e0c:	fab7 f787 	clz	r7, r7
 8006e10:	fa94 f4a4 	rbit	r4, r4
 8006e14:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8006e18:	fab4 fb84 	clz	fp, r4
 8006e1c:	fa96 f6a6 	rbit	r6, r6
 8006e20:	f44f 6870 	mov.w	r8, #3840	; 0xf00
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8006e24:	fab6 f686 	clz	r6, r6
 8006e28:	fa98 f8a8 	rbit	r8, r8
 8006e2c:	2530      	movs	r5, #48	; 0x30
 8006e2e:	fab8 f888 	clz	r8, r8
 8006e32:	fa95 f5a5 	rbit	r5, r5
 8006e36:	f04f 0c0f 	mov.w	ip, #15
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8006e3a:	fab5 f585 	clz	r5, r5
 8006e3e:	fa9c fcac 	rbit	ip, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8006e42:	f00e 040f 	and.w	r4, lr, #15
 8006e46:	fa04 f40b 	lsl.w	r4, r4, fp
  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 8006e4a:	fa01 f10a 	lsl.w	r1, r1, sl

  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8006e4e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8006e52:	4321      	orrs	r1, r4
 8006e54:	4c12      	ldr	r4, [pc, #72]	; (8006ea0 <LL_RTC_DATE_Config+0xb4>)
 8006e56:	ea09 0404 	and.w	r4, r9, r4
 8006e5a:	4321      	orrs	r1, r4
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8006e5c:	f003 040f 	and.w	r4, r3, #15
 8006e60:	fa04 f808 	lsl.w	r8, r4, r8
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8006e64:	fabc fc8c 	clz	ip, ip
 8006e68:	f002 040f 	and.w	r4, r2, #15
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8006e6c:	ea41 0108 	orr.w	r1, r1, r8
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8006e70:	fa04 fc0c 	lsl.w	ip, r4, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8006e74:	f00e 0ef0 	and.w	lr, lr, #240	; 0xf0
 8006e78:	3f04      	subs	r7, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8006e7a:	ea41 010c 	orr.w	r1, r1, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8006e7e:	fa0e f707 	lsl.w	r7, lr, r7
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8006e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e86:	3e04      	subs	r6, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8006e88:	4339      	orrs	r1, r7
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8006e8a:	40b3      	lsls	r3, r6
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8006e8c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006e90:	3d04      	subs	r5, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8006e92:	430b      	orrs	r3, r1
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8006e94:	40aa      	lsls	r2, r5
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8006e96:	431a      	orrs	r2, r3
 8006e98:	6042      	str	r2, [r0, #4]
 8006e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e9e:	bf00      	nop
 8006ea0:	ff0000c0 	.word	0xff0000c0

08006ea4 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8006ea4:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8006ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006eaa:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8006eac:	68c3      	ldr	r3, [r0, #12]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8006eae:	065a      	lsls	r2, r3, #25
 8006eb0:	d41c      	bmi.n	8006eec <LL_RTC_EnterInitMode+0x48>
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8006eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb6:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8006eb8:	68c3      	ldr	r3, [r0, #12]
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8006eba:	490d      	ldr	r1, [pc, #52]	; (8006ef0 <LL_RTC_EnterInitMode+0x4c>)
 8006ebc:	f3c3 1380 	ubfx	r3, r3, #6, #1
  ErrorStatus status = SUCCESS;
 8006ec0:	2201      	movs	r2, #1
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 8006ec2:	9c01      	ldr	r4, [sp, #4]
 8006ec4:	b104      	cbz	r4, 8006ec8 <LL_RTC_EnterInitMode+0x24>
 8006ec6:	b113      	cbz	r3, 8006ece <LL_RTC_EnterInitMode+0x2a>
        status = ERROR;
      }
    }
  }
  return status;
}
 8006ec8:	4610      	mov	r0, r2
 8006eca:	b002      	add	sp, #8
 8006ecc:	bd10      	pop	{r4, pc}
 8006ece:	680b      	ldr	r3, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8006ed0:	03db      	lsls	r3, r3, #15
        timeout --;
 8006ed2:	bf42      	ittt	mi
 8006ed4:	9b01      	ldrmi	r3, [sp, #4]
 8006ed6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8006eda:	9301      	strmi	r3, [sp, #4]
 8006edc:	68c3      	ldr	r3, [r0, #12]
      if (timeout == 0U)
 8006ede:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 8006ee0:	2c00      	cmp	r4, #0
 8006ee2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006ee6:	bf08      	it	eq
 8006ee8:	2200      	moveq	r2, #0
 8006eea:	e7ea      	b.n	8006ec2 <LL_RTC_EnterInitMode+0x1e>
  ErrorStatus status = SUCCESS;
 8006eec:	2201      	movs	r2, #1
 8006eee:	e7eb      	b.n	8006ec8 <LL_RTC_EnterInitMode+0x24>
 8006ef0:	e000e010 	.word	0xe000e010

08006ef4 <LL_RTC_Init>:
{
 8006ef4:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8006ef6:	23ca      	movs	r3, #202	; 0xca
 8006ef8:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8006efa:	2353      	movs	r3, #83	; 0x53
 8006efc:	6243      	str	r3, [r0, #36]	; 0x24
 8006efe:	4604      	mov	r4, r0
 8006f00:	460d      	mov	r5, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8006f02:	f7ff ffcf 	bl	8006ea4 <LL_RTC_EnterInitMode>
 8006f06:	b1f0      	cbz	r0, 8006f46 <LL_RTC_Init+0x52>
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8006f08:	68a3      	ldr	r3, [r4, #8]
 8006f0a:	682a      	ldr	r2, [r5, #0]
 8006f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f10:	4313      	orrs	r3, r2
 8006f12:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8006f14:	6923      	ldr	r3, [r4, #16]
 8006f16:	68aa      	ldr	r2, [r5, #8]
 8006f18:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006f1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f20:	4313      	orrs	r3, r2
 8006f22:	6123      	str	r3, [r4, #16]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_POSITION_PRER_PREDIV_A);
 8006f24:	6921      	ldr	r1, [r4, #16]
 8006f26:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
 8006f2a:	fa93 f3a3 	rbit	r3, r3
 8006f2e:	fab3 f283 	clz	r2, r3
 8006f32:	686b      	ldr	r3, [r5, #4]
 8006f34:	4093      	lsls	r3, r2
 8006f36:	f421 02fe 	bic.w	r2, r1, #8323072	; 0x7f0000
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	6123      	str	r3, [r4, #16]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8006f3e:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8006f42:	60e3      	str	r3, [r4, #12]
    status = SUCCESS;
 8006f44:	2001      	movs	r0, #1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8006f46:	23ff      	movs	r3, #255	; 0xff
 8006f48:	6263      	str	r3, [r4, #36]	; 0x24
}
 8006f4a:	bd38      	pop	{r3, r4, r5, pc}

08006f4c <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8006f4c:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8006f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f52:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8006f54:	68c3      	ldr	r3, [r0, #12]
 8006f56:	491e      	ldr	r1, [pc, #120]	; (8006fd0 <LL_RTC_WaitForSynchro+0x84>)
 8006f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f5c:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 8006f60:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8006f62:	68c2      	ldr	r2, [r0, #12]
  ErrorStatus status = SUCCESS;
 8006f64:	2301      	movs	r3, #1
 8006f66:	f3c2 1240 	ubfx	r2, r2, #5, #1
  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
  while ((timeout != 0U) && (tmp != 0U))
 8006f6a:	9c01      	ldr	r4, [sp, #4]
 8006f6c:	b91c      	cbnz	r4, 8006f76 <LL_RTC_WaitForSynchro+0x2a>
    {
      status = ERROR;
    }
  }

  if (status != ERROR)
 8006f6e:	b99b      	cbnz	r3, 8006f98 <LL_RTC_WaitForSynchro+0x4c>
      }
    }
  }

  return (status);
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	b002      	add	sp, #8
 8006f74:	bd10      	pop	{r4, pc}
  while ((timeout != 0U) && (tmp != 0U))
 8006f76:	2a00      	cmp	r2, #0
 8006f78:	d0f9      	beq.n	8006f6e <LL_RTC_WaitForSynchro+0x22>
 8006f7a:	680a      	ldr	r2, [r1, #0]
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8006f7c:	03d4      	lsls	r4, r2, #15
      timeout--;
 8006f7e:	bf42      	ittt	mi
 8006f80:	9a01      	ldrmi	r2, [sp, #4]
 8006f82:	f102 32ff 	addmi.w	r2, r2, #4294967295
 8006f86:	9201      	strmi	r2, [sp, #4]
 8006f88:	68c2      	ldr	r2, [r0, #12]
    if (timeout == 0U)
 8006f8a:	9c01      	ldr	r4, [sp, #4]
      status = ERROR;
 8006f8c:	2c00      	cmp	r4, #0
 8006f8e:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8006f92:	bf08      	it	eq
 8006f94:	2300      	moveq	r3, #0
 8006f96:	e7e8      	b.n	8006f6a <LL_RTC_WaitForSynchro+0x1e>
    timeout = RTC_SYNCHRO_TIMEOUT;
 8006f98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f9c:	9201      	str	r2, [sp, #4]
 8006f9e:	68c2      	ldr	r2, [r0, #12]
 8006fa0:	490b      	ldr	r1, [pc, #44]	; (8006fd0 <LL_RTC_WaitForSynchro+0x84>)
 8006fa2:	f3c2 1240 	ubfx	r2, r2, #5, #1
    while ((timeout != 0U) && (tmp != 1U))
 8006fa6:	9c01      	ldr	r4, [sp, #4]
 8006fa8:	2c00      	cmp	r4, #0
 8006faa:	d0e1      	beq.n	8006f70 <LL_RTC_WaitForSynchro+0x24>
 8006fac:	2a00      	cmp	r2, #0
 8006fae:	d1df      	bne.n	8006f70 <LL_RTC_WaitForSynchro+0x24>
 8006fb0:	680a      	ldr	r2, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8006fb2:	03d2      	lsls	r2, r2, #15
        timeout--;
 8006fb4:	bf42      	ittt	mi
 8006fb6:	9a01      	ldrmi	r2, [sp, #4]
 8006fb8:	f102 32ff 	addmi.w	r2, r2, #4294967295
 8006fbc:	9201      	strmi	r2, [sp, #4]
 8006fbe:	68c2      	ldr	r2, [r0, #12]
      if (timeout == 0U)
 8006fc0:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 8006fc2:	2c00      	cmp	r4, #0
 8006fc4:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8006fc8:	bf08      	it	eq
 8006fca:	2300      	moveq	r3, #0
 8006fcc:	e7eb      	b.n	8006fa6 <LL_RTC_WaitForSynchro+0x5a>
 8006fce:	bf00      	nop
 8006fd0:	e000e010 	.word	0xe000e010

08006fd4 <LL_RTC_TIME_Init>:
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8006fd4:	6883      	ldr	r3, [r0, #8]
{
 8006fd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fd8:	4615      	mov	r5, r2
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8006fda:	065a      	lsls	r2, r3, #25
      RTC_TimeStruct->TimeFormat = 0x00U;
 8006fdc:	bf5c      	itt	pl
 8006fde:	2300      	movpl	r3, #0
 8006fe0:	602b      	strpl	r3, [r5, #0]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8006fe2:	23ca      	movs	r3, #202	; 0xca
 8006fe4:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8006fe6:	2353      	movs	r3, #83	; 0x53
 8006fe8:	6243      	str	r3, [r0, #36]	; 0x24
{
 8006fea:	4604      	mov	r4, r0
  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8006fec:	460e      	mov	r6, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8006fee:	f7ff ff59 	bl	8006ea4 <LL_RTC_EnterInitMode>
 8006ff2:	b190      	cbz	r0, 800701a <LL_RTC_TIME_Init+0x46>
 8006ff4:	796b      	ldrb	r3, [r5, #5]
 8006ff6:	792a      	ldrb	r2, [r5, #4]
 8006ff8:	79a8      	ldrb	r0, [r5, #6]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8006ffa:	b196      	cbz	r6, 8007022 <LL_RTC_TIME_Init+0x4e>
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8006ffc:	9000      	str	r0, [sp, #0]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8006ffe:	6829      	ldr	r1, [r5, #0]
 8007000:	4620      	mov	r0, r4
 8007002:	f7ff fe9f 	bl	8006d44 <LL_RTC_TIME_Config>
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8007006:	4b14      	ldr	r3, [pc, #80]	; (8007058 <LL_RTC_TIME_Init+0x84>)
 8007008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800700c:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 800700e:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8007010:	069b      	lsls	r3, r3, #26
 8007012:	d41e      	bmi.n	8007052 <LL_RTC_TIME_Init+0x7e>
      status = LL_RTC_WaitForSynchro(RTCx);
 8007014:	4620      	mov	r0, r4
 8007016:	f7ff ff99 	bl	8006f4c <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800701a:	23ff      	movs	r3, #255	; 0xff
 800701c:	6263      	str	r3, [r4, #36]	; 0x24
}
 800701e:	b002      	add	sp, #8
 8007020:	bd70      	pop	{r4, r5, r6, pc}
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 8007022:	210a      	movs	r1, #10
 8007024:	fbb3 f6f1 	udiv	r6, r3, r1
 8007028:	fb01 3316 	mls	r3, r1, r6, r3
 800702c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8007030:	fbb2 f6f1 	udiv	r6, r2, r1
 8007034:	fb01 2216 	mls	r2, r1, r6, r2
 8007038:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 800703c:	fbb0 f6f1 	udiv	r6, r0, r1
 8007040:	fb01 0116 	mls	r1, r1, r6, r0
 8007044:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8007048:	b2c9      	uxtb	r1, r1
 800704a:	9100      	str	r1, [sp, #0]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	e7d5      	b.n	8006ffe <LL_RTC_TIME_Init+0x2a>
      status = SUCCESS;
 8007052:	2001      	movs	r0, #1
 8007054:	e7e1      	b.n	800701a <LL_RTC_TIME_Init+0x46>
 8007056:	bf00      	nop
 8007058:	40002800 	.word	0x40002800

0800705c <LL_RTC_DATE_Init>:
{
 800705c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800705e:	4604      	mov	r4, r0
 8007060:	4616      	mov	r6, r2
  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 8007062:	460f      	mov	r7, r1
 8007064:	b931      	cbnz	r1, 8007074 <LL_RTC_DATE_Init+0x18>
 8007066:	7853      	ldrb	r3, [r2, #1]
 8007068:	06da      	lsls	r2, r3, #27
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 800706a:	bf42      	ittt	mi
 800706c:	f023 0310 	bicmi.w	r3, r3, #16
 8007070:	330a      	addmi	r3, #10
 8007072:	7073      	strbmi	r3, [r6, #1]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8007074:	23ca      	movs	r3, #202	; 0xca
 8007076:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8007078:	2353      	movs	r3, #83	; 0x53
 800707a:	6263      	str	r3, [r4, #36]	; 0x24
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800707c:	4620      	mov	r0, r4
 800707e:	f7ff ff11 	bl	8006ea4 <LL_RTC_EnterInitMode>
 8007082:	b198      	cbz	r0, 80070ac <LL_RTC_DATE_Init+0x50>
 8007084:	7873      	ldrb	r3, [r6, #1]
 8007086:	78b5      	ldrb	r5, [r6, #2]
 8007088:	7831      	ldrb	r1, [r6, #0]
 800708a:	78f6      	ldrb	r6, [r6, #3]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 800708c:	b197      	cbz	r7, 80070b4 <LL_RTC_DATE_Init+0x58>
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 800708e:	9600      	str	r6, [sp, #0]
 8007090:	462a      	mov	r2, r5
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8007092:	4620      	mov	r0, r4
 8007094:	f7ff feaa 	bl	8006dec <LL_RTC_DATE_Config>
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8007098:	4b13      	ldr	r3, [pc, #76]	; (80070e8 <LL_RTC_DATE_Init+0x8c>)
 800709a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800709e:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 80070a0:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 80070a2:	069b      	lsls	r3, r3, #26
 80070a4:	d41e      	bmi.n	80070e4 <LL_RTC_DATE_Init+0x88>
      status = LL_RTC_WaitForSynchro(RTCx);
 80070a6:	4620      	mov	r0, r4
 80070a8:	f7ff ff50 	bl	8006f4c <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80070ac:	23ff      	movs	r3, #255	; 0xff
 80070ae:	6263      	str	r3, [r4, #36]	; 0x24
}
 80070b0:	b003      	add	sp, #12
 80070b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 80070b4:	200a      	movs	r0, #10
 80070b6:	fbb3 f2f0 	udiv	r2, r3, r0
 80070ba:	fb00 3312 	mls	r3, r0, r2, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80070be:	fbb5 f7f0 	udiv	r7, r5, r0
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 80070c2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80070c6:	fb00 5217 	mls	r2, r0, r7, r5
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 80070ca:	fbb6 f5f0 	udiv	r5, r6, r0
 80070ce:	fb00 6015 	mls	r0, r0, r5, r6
 80070d2:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80070d6:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 80070da:	b2c0      	uxtb	r0, r0
 80070dc:	9000      	str	r0, [sp, #0]
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	e7d6      	b.n	8007092 <LL_RTC_DATE_Init+0x36>
      status = SUCCESS;
 80070e4:	2001      	movs	r0, #1
 80070e6:	e7e1      	b.n	80070ac <LL_RTC_DATE_Init+0x50>
 80070e8:	40002800 	.word	0x40002800

080070ec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80070ec:	b084      	sub	sp, #16
 80070ee:	b510      	push	{r4, lr}
 80070f0:	ac03      	add	r4, sp, #12
 80070f2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 80070f6:	9904      	ldr	r1, [sp, #16]
 80070f8:	9b03      	ldr	r3, [sp, #12]
 80070fa:	6842      	ldr	r2, [r0, #4]
 80070fc:	430b      	orrs	r3, r1
 80070fe:	9905      	ldr	r1, [sp, #20]
 8007100:	430b      	orrs	r3, r1
 8007102:	9906      	ldr	r1, [sp, #24]
 8007104:	430b      	orrs	r3, r1
 8007106:	9907      	ldr	r1, [sp, #28]
 8007108:	430b      	orrs	r3, r1
 800710a:	9908      	ldr	r1, [sp, #32]
                                              Init.BusWide             |\
                                              Init.HardwareFlowControl |\
                                              Init.ClockDiv);  

  return HAL_OK;
}
 800710c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8007110:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 8007114:	430b      	orrs	r3, r1
 8007116:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800711a:	4313      	orrs	r3, r2
 800711c:	6043      	str	r3, [r0, #4]
}
 800711e:	b004      	add	sp, #16
 8007120:	2000      	movs	r0, #0
 8007122:	4770      	bx	lr

08007124 <SDMMC_ReadFIFO>:
 8007124:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8007128:	4770      	bx	lr

0800712a <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800712a:	2303      	movs	r3, #3
 800712c:	6003      	str	r3, [r0, #0]
  
  return HAL_OK; 
}
 800712e:	2000      	movs	r0, #0
 8007130:	4770      	bx	lr

08007132 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007132:	6800      	ldr	r0, [r0, #0]
}
 8007134:	f000 0003 	and.w	r0, r0, #3
 8007138:	4770      	bx	lr

0800713a <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800713a:	680b      	ldr	r3, [r1, #0]
 800713c:	6083      	str	r3, [r0, #8]

  /* Set SDMMC command parameters */
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800713e:	68c3      	ldr	r3, [r0, #12]
 8007140:	684a      	ldr	r2, [r1, #4]
 8007142:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007146:	f023 030f 	bic.w	r3, r3, #15
 800714a:	4313      	orrs	r3, r2
 800714c:	688a      	ldr	r2, [r1, #8]
 800714e:	4313      	orrs	r3, r2
 8007150:	68ca      	ldr	r2, [r1, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	690a      	ldr	r2, [r1, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	60c3      	str	r3, [r0, #12]
                                          Command->Response         |\
                                          Command->WaitForInterrupt |\
                                          Command->CPSM); 
  
  return HAL_OK;  
}
 800715a:	2000      	movs	r0, #0
 800715c:	4770      	bx	lr

0800715e <SDMMC_GetCommandResponse>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
  return (uint8_t)(SDMMCx->RESPCMD);
 800715e:	6900      	ldr	r0, [r0, #16]
}
 8007160:	b2c0      	uxtb	r0, r0
 8007162:	4770      	bx	lr

08007164 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007164:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8007166:	3014      	adds	r0, #20
 8007168:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 800716a:	2300      	movs	r3, #0
 800716c:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800716e:	9101      	str	r1, [sp, #4]
  
  return (*(__IO uint32_t *) tmp);
 8007170:	9b01      	ldr	r3, [sp, #4]
 8007172:	6818      	ldr	r0, [r3, #0]
}  
 8007174:	b002      	add	sp, #8
 8007176:	4770      	bx	lr

08007178 <SDMMC_DataConfig>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007178:	680b      	ldr	r3, [r1, #0]
 800717a:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800717c:	684b      	ldr	r3, [r1, #4]
 800717e:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 8007180:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007182:	688a      	ldr	r2, [r1, #8]
 8007184:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 8007188:	4313      	orrs	r3, r2
 800718a:	68ca      	ldr	r2, [r1, #12]
 800718c:	4313      	orrs	r3, r2
 800718e:	690a      	ldr	r2, [r1, #16]
 8007190:	4313      	orrs	r3, r2
 8007192:	694a      	ldr	r2, [r1, #20]
 8007194:	4313      	orrs	r3, r2
 8007196:	62c3      	str	r3, [r0, #44]	; 0x2c
                                              Data->TransferMode  |\
                                              Data->DPSM);

  return HAL_OK;

}
 8007198:	2000      	movs	r0, #0
 800719a:	4770      	bx	lr

0800719c <LL_SPI_Init>:
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 800719c:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800719e:	065b      	lsls	r3, r3, #25
{
 80071a0:	b570      	push	{r4, r5, r6, lr}
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80071a2:	d426      	bmi.n	80071f2 <LL_SPI_Init+0x56>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80071a4:	e891 0048 	ldmia.w	r1, {r3, r6}
 80071a8:	4333      	orrs	r3, r6
 80071aa:	68ce      	ldr	r6, [r1, #12]
 80071ac:	694d      	ldr	r5, [r1, #20]
 80071ae:	6804      	ldr	r4, [r0, #0]
 80071b0:	6a0a      	ldr	r2, [r1, #32]
 80071b2:	4333      	orrs	r3, r6
 80071b4:	690e      	ldr	r6, [r1, #16]
 80071b6:	4333      	orrs	r3, r6
 80071b8:	698e      	ldr	r6, [r1, #24]
 80071ba:	432b      	orrs	r3, r5
 80071bc:	4333      	orrs	r3, r6
 80071be:	69ce      	ldr	r6, [r1, #28]
 80071c0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80071c4:	4333      	orrs	r3, r6
 80071c6:	f024 04bf 	bic.w	r4, r4, #191	; 0xbf
 80071ca:	4313      	orrs	r3, r2
 80071cc:	4323      	orrs	r3, r4
 80071ce:	6003      	str	r3, [r0, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80071d0:	6844      	ldr	r4, [r0, #4]
 80071d2:	688b      	ldr	r3, [r1, #8]
 80071d4:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
 80071d8:	ea43 4315 	orr.w	r3, r3, r5, lsr #16
 80071dc:	f024 0404 	bic.w	r4, r4, #4
 80071e0:	4323      	orrs	r3, r4

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80071e2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    MODIFY_REG(SPIx->CR2,
 80071e6:	6043      	str	r3, [r0, #4]
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80071e8:	d101      	bne.n	80071ee <LL_SPI_Init+0x52>
 80071ea:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80071ec:	6103      	str	r3, [r0, #16]
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 80071ee:	2001      	movs	r0, #1
  }

  return status;
}
 80071f0:	bd70      	pop	{r4, r5, r6, pc}
  ErrorStatus status = ERROR;
 80071f2:	2000      	movs	r0, #0
 80071f4:	bd70      	pop	{r4, r5, r6, pc}

080071f6 <USB_CoreInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071f6:	b084      	sub	sp, #16
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	ad05      	add	r5, sp, #20
 80071fc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007200:	68c3      	ldr	r3, [r0, #12]
 8007202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
{
 8007206:	4604      	mov	r4, r0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007208:	60c3      	str	r3, [r0, #12]
  
  /* Reset after a PHY select and set Host mode */
  USB_CoreReset(USBx);
 800720a:	f000 fb75 	bl	80078f8 <USB_CoreReset>
  
  /* Deactivate the power down*/
  USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800720e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007212:	63a3      	str	r3, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8007214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007218:	2000      	movs	r0, #0
 800721a:	b004      	add	sp, #16
 800721c:	4770      	bx	lr

0800721e <USB_EnableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800721e:	6883      	ldr	r3, [r0, #8]
 8007220:	f043 0301 	orr.w	r3, r3, #1
 8007224:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8007226:	2000      	movs	r0, #0
 8007228:	4770      	bx	lr

0800722a <USB_DisableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800722a:	6883      	ldr	r3, [r0, #8]
 800722c:	f023 0301 	bic.w	r3, r3, #1
 8007230:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8007232:	2000      	movs	r0, #0
 8007234:	4770      	bx	lr

08007236 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_ModeTypeDef mode)
{
 8007236:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8007238:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_HOST_MODE)
 800723a:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800723c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007240:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_HOST_MODE)
 8007242:	d108      	bne.n	8007256 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8007244:	68c3      	ldr	r3, [r0, #12]
 8007246:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800724a:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50);
 800724c:	2032      	movs	r0, #50	; 0x32
 800724e:	f7fc ff67 	bl	8004120 <HAL_Delay>
  
  return HAL_OK;
}
 8007252:	2000      	movs	r0, #0
 8007254:	bd08      	pop	{r3, pc}
  else if ( mode == USB_DEVICE_MODE)
 8007256:	2900      	cmp	r1, #0
 8007258:	d1f8      	bne.n	800724c <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 800725a:	68c3      	ldr	r3, [r0, #12]
 800725c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007260:	60c3      	str	r3, [r0, #12]
 8007262:	e7f3      	b.n	800724c <USB_SetCurrentMode+0x16>

08007264 <USB_DevInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007264:	b084      	sub	sp, #16
 8007266:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800726a:	4604      	mov	r4, r0
 800726c:	a809      	add	r0, sp, #36	; 0x24
 800726e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t index = 0;

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007272:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007274:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8007276:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800727a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800727e:	4689      	mov	r9, r1
 8007280:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 8007282:	b95f      	cbnz	r7, 800729c <USB_DevInit+0x38>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8007284:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007286:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800728a:	63a3      	str	r3, [r4, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007292:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800729a:	6023      	str	r3, [r4, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 800729c:	2500      	movs	r5, #0
 800729e:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80072a2:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80072a6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  /* Set Full speed phy */
  USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80072aa:	2103      	movs	r1, #3
 80072ac:	4620      	mov	r0, r4
 80072ae:	f000 f893 	bl	80073d8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 80072b2:	2110      	movs	r1, #16
 80072b4:	4620      	mov	r0, r4
 80072b6:	f000 f86d 	bl	8007394 <USB_FlushTxFifo>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80072ba:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  USB_FlushRxFifo(USBx);
 80072be:	4620      	mov	r0, r4
 80072c0:	f000 f87a 	bl	80073b8 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
  USBx_DEVICE->DOEPMSK = 0;
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80072c4:	f04f 33ff 	mov.w	r3, #4294967295
  USBx_DEVICE->DIEPMSK = 0;
 80072c8:	6135      	str	r5, [r6, #16]
 80072ca:	462a      	mov	r2, r5
  USBx_DEVICE->DOEPMSK = 0;
 80072cc:	6175      	str	r5, [r6, #20]
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80072ce:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80072d2:	61b3      	str	r3, [r6, #24]
    {
      USBx_INEP(index)->DIEPCTL = 0;
    }
    
    USBx_INEP(index)->DIEPTSIZ = 0;
    USBx_INEP(index)->DIEPINT  = 0xFF;
 80072d4:	20ff      	movs	r0, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0;
 80072d6:	61f5      	str	r5, [r6, #28]
 80072d8:	f504 6310 	add.w	r3, r4, #2304	; 0x900
  for (index = 0; index < cfg.dev_endpoints; index++)
 80072dc:	454d      	cmp	r5, r9
 80072de:	d13c      	bne.n	800735a <USB_DevInit+0xf6>
 80072e0:	2200      	movs	r2, #0
 80072e2:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 80072e6:	4611      	mov	r1, r2
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80072e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    {
      USBx_OUTEP(index)->DOEPCTL = 0;
    }
    
    USBx_OUTEP(index)->DOEPTSIZ = 0;
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 80072ec:	f04f 0eff 	mov.w	lr, #255	; 0xff
  for (index = 0; index < cfg.dev_endpoints; index++)
 80072f0:	4295      	cmp	r5, r2
 80072f2:	d13e      	bne.n	8007372 <USB_DevInit+0x10e>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80072f4:	6933      	ldr	r3, [r6, #16]
  
  if (cfg.dma_enable == 1)
 80072f6:	f1b8 0f01 	cmp.w	r8, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80072fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072fe:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 8007300:	d108      	bne.n	8007314 <USB_DevInit+0xb0>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8007302:	4b22      	ldr	r3, [pc, #136]	; (800738c <USB_DevInit+0x128>)
 8007304:	6333      	str	r3, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8007306:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8007308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800730c:	f043 0303 	orr.w	r3, r3, #3
 8007310:	6333      	str	r3, [r6, #48]	; 0x30
    
    index= USBx_DEVICE->DTHRCTL;
 8007312:	6b33      	ldr	r3, [r6, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 8007314:	2300      	movs	r3, #0
 8007316:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 8007318:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800731c:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 800731e:	f1b8 0f00 	cmp.w	r8, #0
 8007322:	d103      	bne.n	800732c <USB_DevInit+0xc8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8007324:	69a3      	ldr	r3, [r4, #24]
 8007326:	f043 0310 	orr.w	r3, r3, #16
 800732a:	61a3      	str	r3, [r4, #24]
  }

    /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800732c:	69a2      	ldr	r2, [r4, #24]
 800732e:	4b18      	ldr	r3, [pc, #96]	; (8007390 <USB_DevInit+0x12c>)
 8007330:	4313      	orrs	r3, r2
 8007332:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 8007334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007336:	b11b      	cbz	r3, 8007340 <USB_DevInit+0xdc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007338:	69a3      	ldr	r3, [r4, #24]
 800733a:	f043 0308 	orr.w	r3, r3, #8
 800733e:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8007340:	2f01      	cmp	r7, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8007342:	bf01      	itttt	eq
 8007344:	69a3      	ldreq	r3, [r4, #24]
 8007346:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800734a:	f043 0304 	orreq.w	r3, r3, #4
 800734e:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 8007350:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007354:	2000      	movs	r0, #0
 8007356:	b004      	add	sp, #16
 8007358:	4770      	bx	lr
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800735a:	f8d3 e000 	ldr.w	lr, [r3]
 800735e:	f1be 0f00 	cmp.w	lr, #0
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8007362:	bfb4      	ite	lt
 8007364:	6019      	strlt	r1, [r3, #0]
      USBx_INEP(index)->DIEPCTL = 0;
 8007366:	601a      	strge	r2, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8007368:	3501      	adds	r5, #1
    USBx_INEP(index)->DIEPTSIZ = 0;
 800736a:	611a      	str	r2, [r3, #16]
    USBx_INEP(index)->DIEPINT  = 0xFF;
 800736c:	6098      	str	r0, [r3, #8]
 800736e:	3320      	adds	r3, #32
 8007370:	e7b4      	b.n	80072dc <USB_DevInit+0x78>
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007372:	f8d3 c000 	ldr.w	ip, [r3]
 8007376:	f1bc 0f00 	cmp.w	ip, #0
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800737a:	bfb4      	ite	lt
 800737c:	6018      	strlt	r0, [r3, #0]
      USBx_OUTEP(index)->DOEPCTL = 0;
 800737e:	6019      	strge	r1, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8007380:	3201      	adds	r2, #1
    USBx_OUTEP(index)->DOEPTSIZ = 0;
 8007382:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8007384:	f8c3 e008 	str.w	lr, [r3, #8]
 8007388:	3320      	adds	r3, #32
 800738a:	e7b1      	b.n	80072f0 <USB_DevInit+0x8c>
 800738c:	00800100 	.word	0x00800100
 8007390:	803c3800 	.word	0x803c3800

08007394 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8007394:	0189      	lsls	r1, r1, #6
 8007396:	f041 0120 	orr.w	r1, r1, #32
 800739a:	4a06      	ldr	r2, [pc, #24]	; (80073b4 <USB_FlushTxFifo+0x20>)
 800739c:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000)
 800739e:	3a01      	subs	r2, #1
 80073a0:	d005      	beq.n	80073ae <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80073a2:	6903      	ldr	r3, [r0, #16]
 80073a4:	f013 0320 	ands.w	r3, r3, #32
 80073a8:	d1f9      	bne.n	800739e <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 80073aa:	4618      	mov	r0, r3
 80073ac:	4770      	bx	lr
      return HAL_TIMEOUT;
 80073ae:	2003      	movs	r0, #3
}
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	00030d41 	.word	0x00030d41

080073b8 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80073b8:	2310      	movs	r3, #16
 80073ba:	4a06      	ldr	r2, [pc, #24]	; (80073d4 <USB_FlushRxFifo+0x1c>)
 80073bc:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80073be:	3a01      	subs	r2, #1
 80073c0:	d005      	beq.n	80073ce <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80073c2:	6903      	ldr	r3, [r0, #16]
 80073c4:	f013 0310 	ands.w	r3, r3, #16
 80073c8:	d1f9      	bne.n	80073be <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 80073ca:	4618      	mov	r0, r3
 80073cc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80073ce:	2003      	movs	r0, #3
}
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	00030d41 	.word	0x00030d41

080073d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 80073d8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80073dc:	4319      	orrs	r1, r3
 80073de:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 80073e2:	2000      	movs	r0, #0
 80073e4:	4770      	bx	lr

080073e6 <USB_ActivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073e6:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1)
 80073e8:	784b      	ldrb	r3, [r1, #1]
 80073ea:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 80073ec:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 80073f0:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d11b      	bne.n	8007430 <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 80073f8:	40a3      	lsls	r3, r4
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 80073fe:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8007402:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8007404:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	0412      	lsls	r2, r2, #16
 800740c:	d40e      	bmi.n	800742c <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 800740e:	688a      	ldr	r2, [r1, #8]
 8007410:	78c8      	ldrb	r0, [r1, #3]
 8007412:	681d      	ldr	r5, [r3, #0]
 8007414:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007418:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800741c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007420:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 8007424:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8007428:	4328      	orrs	r0, r5
 800742a:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 800742c:	2000      	movs	r0, #0
 800742e:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8007430:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007434:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8007436:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 800743a:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 800743c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8007440:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8007442:	6803      	ldr	r3, [r0, #0]
 8007444:	041b      	lsls	r3, r3, #16
 8007446:	d4f1      	bmi.n	800742c <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8007448:	688b      	ldr	r3, [r1, #8]
 800744a:	78c9      	ldrb	r1, [r1, #3]
 800744c:	6802      	ldr	r2, [r0, #0]
 800744e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800745a:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800745e:	4313      	orrs	r3, r2
 8007460:	6003      	str	r3, [r0, #0]
 8007462:	e7e3      	b.n	800742c <USB_ActivateEndpoint+0x46>

08007464 <USB_DeactivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007464:	b510      	push	{r4, lr}
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8007466:	784b      	ldrb	r3, [r1, #1]
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8007468:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800746c:	7809      	ldrb	r1, [r1, #0]
 800746e:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 8007472:	2b01      	cmp	r3, #1
 8007474:	d111      	bne.n	800749a <USB_DeactivateEndpoint+0x36>
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8007476:	408b      	lsls	r3, r1
 8007478:	b29b      	uxth	r3, r3
 800747a:	43db      	mvns	r3, r3
 800747c:	401c      	ands	r4, r3
 800747e:	63d4      	str	r4, [r2, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8007480:	69d4      	ldr	r4, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8007482:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8007486:	4023      	ands	r3, r4
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8007488:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 800748c:	61d3      	str	r3, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 800748e:	6803      	ldr	r3, [r0, #0]
 8007490:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007494:	6003      	str	r3, [r0, #0]
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
  }
  return HAL_OK;
}
 8007496:	2000      	movs	r0, #0
 8007498:	bd10      	pop	{r4, pc}
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 800749a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800749e:	408b      	lsls	r3, r1
 80074a0:	43db      	mvns	r3, r3
 80074a2:	401c      	ands	r4, r3
 80074a4:	63d4      	str	r4, [r2, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 80074a6:	69d4      	ldr	r4, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 80074a8:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 80074ac:	4023      	ands	r3, r4
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 80074ae:	eb00 1041 	add.w	r0, r0, r1, lsl #5
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 80074b2:	61d3      	str	r3, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 80074b4:	6803      	ldr	r3, [r0, #0]
 80074b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074ba:	6003      	str	r3, [r0, #0]
 80074bc:	e7eb      	b.n	8007496 <USB_DeactivateEndpoint+0x32>
	...

080074c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80074c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 80074c2:	784b      	ldrb	r3, [r1, #1]
 80074c4:	780c      	ldrb	r4, [r1, #0]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	694b      	ldr	r3, [r1, #20]
 80074ca:	d163      	bne.n	8007594 <USB_EPStartXfer+0xd4>
 80074cc:	2520      	movs	r5, #32
 80074ce:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80074d2:	fb15 6404 	smlabb	r4, r5, r4, r6
 80074d6:	6925      	ldr	r5, [r4, #16]
    if (ep->xfer_len == 0)
 80074d8:	bb73      	cbnz	r3, 8007538 <USB_EPStartXfer+0x78>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80074da:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80074de:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80074e2:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 80074e4:	6925      	ldr	r5, [r4, #16]
 80074e6:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80074ea:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80074ec:	6925      	ldr	r5, [r4, #16]
 80074ee:	0ced      	lsrs	r5, r5, #19
 80074f0:	04ed      	lsls	r5, r5, #19
 80074f2:	6125      	str	r5, [r4, #16]
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
      }       
    }
      if (ep->type != EP_TYPE_ISOC)
 80074f4:	78cf      	ldrb	r7, [r1, #3]
 80074f6:	780d      	ldrb	r5, [r1, #0]
 80074f8:	2f01      	cmp	r7, #1
 80074fa:	f000 8089 	beq.w	8007610 <USB_EPStartXfer+0x150>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 80074fe:	b14b      	cbz	r3, 8007514 <USB_EPStartXfer+0x54>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 8007500:	f8d0 c834 	ldr.w	ip, [r0, #2100]	; 0x834
 8007504:	2401      	movs	r4, #1
 8007506:	40ac      	lsls	r4, r5
 8007508:	ea44 040c 	orr.w	r4, r4, ip
 800750c:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 8007510:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007514:	780d      	ldrb	r5, [r1, #0]
 8007516:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 800751a:	2f01      	cmp	r7, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800751c:	6834      	ldr	r4, [r6, #0]
 800751e:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8007522:	6034      	str	r4, [r6, #0]
    if (ep->type == EP_TYPE_ISOC)
 8007524:	d105      	bne.n	8007532 <USB_EPStartXfer+0x72>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8007526:	9200      	str	r2, [sp, #0]
 8007528:	b29b      	uxth	r3, r3
 800752a:	462a      	mov	r2, r5
 800752c:	68c9      	ldr	r1, [r1, #12]
 800752e:	f000 f8e3 	bl	80076f8 <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8007532:	2000      	movs	r0, #0
 8007534:	b003      	add	sp, #12
 8007536:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007538:	0ced      	lsrs	r5, r5, #19
 800753a:	04ed      	lsls	r5, r5, #19
 800753c:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800753e:	6925      	ldr	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8007540:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007542:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8007546:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800754a:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 800754c:	19dd      	adds	r5, r3, r7
 800754e:	3d01      	subs	r5, #1
 8007550:	fbb5 f7f7 	udiv	r7, r5, r7
 8007554:	4d35      	ldr	r5, [pc, #212]	; (800762c <USB_EPStartXfer+0x16c>)
 8007556:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800755a:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 800755e:	ea45 050e 	orr.w	r5, r5, lr
 8007562:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8007564:	6927      	ldr	r7, [r4, #16]
 8007566:	f3c3 0512 	ubfx	r5, r3, #0, #19
 800756a:	433d      	orrs	r5, r7
 800756c:	6125      	str	r5, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 800756e:	78cd      	ldrb	r5, [r1, #3]
 8007570:	2d01      	cmp	r5, #1
 8007572:	d1bf      	bne.n	80074f4 <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8007574:	6925      	ldr	r5, [r4, #16]
 8007576:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800757a:	6125      	str	r5, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
 800757c:	6925      	ldr	r5, [r4, #16]
 800757e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007582:	6125      	str	r5, [r4, #16]
 8007584:	e7b6      	b.n	80074f4 <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007586:	fb14 6405 	smlabb	r4, r4, r5, r6
 800758a:	6825      	ldr	r5, [r4, #0]
 800758c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007590:	6025      	str	r5, [r4, #0]
 8007592:	e7bf      	b.n	8007514 <USB_EPStartXfer+0x54>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8007594:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8007598:	eb02 1244 	add.w	r2, r2, r4, lsl #5
 800759c:	6914      	ldr	r4, [r2, #16]
 800759e:	0ce4      	lsrs	r4, r4, #19
 80075a0:	04e4      	lsls	r4, r4, #19
 80075a2:	6114      	str	r4, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80075a4:	6914      	ldr	r4, [r2, #16]
 80075a6:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80075aa:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80075ae:	6114      	str	r4, [r2, #16]
 80075b0:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0)
 80075b2:	b9db      	cbnz	r3, 80075ec <USB_EPStartXfer+0x12c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80075b4:	6913      	ldr	r3, [r2, #16]
 80075b6:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80075ba:	431c      	orrs	r4, r3
 80075bc:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;      
 80075be:	6913      	ldr	r3, [r2, #16]
 80075c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075c4:	6113      	str	r3, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 80075c6:	78cb      	ldrb	r3, [r1, #3]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d10a      	bne.n	80075e2 <USB_EPStartXfer+0x122>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 80075cc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80075d0:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80075d4:	6813      	ldr	r3, [r2, #0]
 80075d6:	bf0c      	ite	eq
 80075d8:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80075dc:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80075e0:	6013      	str	r3, [r2, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075e2:	6813      	ldr	r3, [r2, #0]
 80075e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075e8:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80075ea:	e7a2      	b.n	8007532 <USB_EPStartXfer+0x72>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 80075ec:	4d0f      	ldr	r5, [pc, #60]	; (800762c <USB_EPStartXfer+0x16c>)
 80075ee:	6916      	ldr	r6, [r2, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket; 
 80075f0:	4423      	add	r3, r4
 80075f2:	3b01      	subs	r3, #1
 80075f4:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 80075f8:	ea05 45c3 	and.w	r5, r5, r3, lsl #19
 80075fc:	4335      	orrs	r5, r6
 80075fe:	6115      	str	r5, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt)); 
 8007600:	b29b      	uxth	r3, r3
 8007602:	6915      	ldr	r5, [r2, #16]
 8007604:	435c      	muls	r4, r3
 8007606:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800760a:	432c      	orrs	r4, r5
 800760c:	6114      	str	r4, [r2, #16]
 800760e:	e7da      	b.n	80075c6 <USB_EPStartXfer+0x106>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8007610:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8007614:	f414 7f80 	tst.w	r4, #256	; 0x100
 8007618:	f04f 0420 	mov.w	r4, #32
 800761c:	d0b3      	beq.n	8007586 <USB_EPStartXfer+0xc6>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800761e:	fb14 6405 	smlabb	r4, r4, r5, r6
 8007622:	6825      	ldr	r5, [r4, #0]
 8007624:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8007628:	6025      	str	r5, [r4, #0]
 800762a:	e773      	b.n	8007514 <USB_EPStartXfer+0x54>
 800762c:	1ff80000 	.word	0x1ff80000

08007630 <USB_EP0StartXfer>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8007630:	784b      	ldrb	r3, [r1, #1]
 8007632:	2b01      	cmp	r3, #1
{
 8007634:	b530      	push	{r4, r5, lr}
 8007636:	780b      	ldrb	r3, [r1, #0]
 8007638:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1)
 800763a:	d13e      	bne.n	80076ba <USB_EP0StartXfer+0x8a>
 800763c:	2220      	movs	r2, #32
 800763e:	f500 6410 	add.w	r4, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007642:	fb12 4303 	smlabb	r3, r2, r3, r4
 8007646:	691a      	ldr	r2, [r3, #16]
    if (ep->xfer_len == 0)
 8007648:	b9fd      	cbnz	r5, 800768a <USB_EP0StartXfer+0x5a>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800764a:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 800764e:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8007652:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8007654:	691a      	ldr	r2, [r3, #16]
 8007656:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800765a:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 800765c:	691a      	ldr	r2, [r3, #16]
 800765e:	0cd2      	lsrs	r2, r2, #19
 8007660:	04d2      	lsls	r2, r2, #19
 8007662:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0)
 8007664:	694b      	ldr	r3, [r1, #20]
 8007666:	b13b      	cbz	r3, 8007678 <USB_EP0StartXfer+0x48>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1 << (ep->num);
 8007668:	780d      	ldrb	r5, [r1, #0]
 800766a:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800766e:	2301      	movs	r3, #1
 8007670:	40ab      	lsls	r3, r5
 8007672:	4313      	orrs	r3, r2
 8007674:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 8007678:	780b      	ldrb	r3, [r1, #0]
 800767a:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8007684:	601a      	str	r2, [r3, #0]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8007686:	2000      	movs	r0, #0
 8007688:	bd30      	pop	{r4, r5, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800768a:	0cd2      	lsrs	r2, r2, #19
 800768c:	04d2      	lsls	r2, r2, #19
 800768e:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007690:	691a      	ldr	r2, [r3, #16]
 8007692:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007696:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 800769a:	611a      	str	r2, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 800769c:	688a      	ldr	r2, [r1, #8]
 800769e:	4295      	cmp	r5, r2
        ep->xfer_len = ep->maxpacket;
 80076a0:	bf88      	it	hi
 80076a2:	614a      	strhi	r2, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 80076a4:	691a      	ldr	r2, [r3, #16]
 80076a6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80076aa:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 80076ac:	694a      	ldr	r2, [r1, #20]
 80076ae:	691d      	ldr	r5, [r3, #16]
 80076b0:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80076b4:	432a      	orrs	r2, r5
 80076b6:	611a      	str	r2, [r3, #16]
 80076b8:	e7d4      	b.n	8007664 <USB_EP0StartXfer+0x34>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80076ba:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 80076be:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80076c2:	6903      	ldr	r3, [r0, #16]
 80076c4:	0cdb      	lsrs	r3, r3, #19
 80076c6:	04db      	lsls	r3, r3, #19
 80076c8:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80076ca:	6903      	ldr	r3, [r0, #16]
 80076cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076d4:	6103      	str	r3, [r0, #16]
 80076d6:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0)
 80076d8:	b105      	cbz	r5, 80076dc <USB_EP0StartXfer+0xac>
      ep->xfer_len = ep->maxpacket;
 80076da:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 80076dc:	6902      	ldr	r2, [r0, #16]
 80076de:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80076e2:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80076e4:	6902      	ldr	r2, [r0, #16]
 80076e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076ea:	4313      	orrs	r3, r2
 80076ec:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 80076ee:	6803      	ldr	r3, [r0, #0]
 80076f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076f4:	6003      	str	r3, [r0, #0]
 80076f6:	e7c6      	b.n	8007686 <USB_EP0StartXfer+0x56>

080076f8 <USB_WritePacket>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  uint32_t count32b= 0 , index= 0;
  count32b =  (len + 3) / 4;
 80076f8:	3303      	adds	r3, #3
  for (index = 0; index < count32b; index++, src += 4)
  {
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80076fa:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
{
 80076fe:	b510      	push	{r4, lr}
  count32b =  (len + 3) / 4;
 8007700:	109b      	asrs	r3, r3, #2
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8007702:	eb00 3202 	add.w	r2, r0, r2, lsl #12
  for (index = 0; index < count32b; index++, src += 4)
 8007706:	2400      	movs	r4, #0
 8007708:	429c      	cmp	r4, r3
 800770a:	d101      	bne.n	8007710 <USB_WritePacket+0x18>
  }
  return HAL_OK;
}
 800770c:	2000      	movs	r0, #0
 800770e:	bd10      	pop	{r4, pc}
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8007710:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8007714:	6010      	str	r0, [r2, #0]
  for (index = 0; index < count32b; index++, src += 4)
 8007716:	3401      	adds	r4, #1
 8007718:	e7f6      	b.n	8007708 <USB_WritePacket+0x10>

0800771a <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800771a:	b510      	push	{r4, lr}
  uint32_t index=0;
  uint32_t count32b = (len + 3) / 4;
 800771c:	3203      	adds	r2, #3
 800771e:	1092      	asrs	r2, r2, #2
  
  for ( index = 0; index < count32b; index++, dest += 4 )
 8007720:	2300      	movs	r3, #0
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8007722:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( index = 0; index < count32b; index++, dest += 4 )
 8007726:	4293      	cmp	r3, r2
 8007728:	d102      	bne.n	8007730 <USB_ReadPacket+0x16>
    
  }
  return ((void *)dest);
}
 800772a:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800772e:	bd10      	pop	{r4, pc}
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8007730:	6804      	ldr	r4, [r0, #0]
 8007732:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  for ( index = 0; index < count32b; index++, dest += 4 )
 8007736:	3301      	adds	r3, #1
 8007738:	e7f5      	b.n	8007726 <USB_ReadPacket+0xc>

0800773a <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 800773a:	784b      	ldrb	r3, [r1, #1]
 800773c:	780a      	ldrb	r2, [r1, #0]
 800773e:	2b01      	cmp	r3, #1
 8007740:	f04f 0320 	mov.w	r3, #32
 8007744:	d10b      	bne.n	800775e <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 8007746:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800774a:	fb13 0002 	smlabb	r0, r3, r2, r0
 800774e:	6803      	ldr	r3, [r0, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	db0b      	blt.n	800776c <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8007754:	6803      	ldr	r3, [r0, #0]
 8007756:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800775a:	6003      	str	r3, [r0, #0]
 800775c:	e006      	b.n	800776c <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 800775e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8007762:	fb13 0002 	smlabb	r0, r3, r2, r0
 8007766:	6803      	ldr	r3, [r0, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	daf3      	bge.n	8007754 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800776c:	6803      	ldr	r3, [r0, #0]
 800776e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007772:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8007774:	2000      	movs	r0, #0
 8007776:	4770      	bx	lr

08007778 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8007778:	784b      	ldrb	r3, [r1, #1]
 800777a:	780a      	ldrb	r2, [r1, #0]
 800777c:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800777e:	bf0c      	ite	eq
 8007780:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007784:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8007788:	2320      	movs	r3, #32
 800778a:	fb13 0002 	smlabb	r0, r3, r2, r0
 800778e:	6803      	ldr	r3, [r0, #0]
 8007790:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007794:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8007796:	78cb      	ldrb	r3, [r1, #3]
 8007798:	3b02      	subs	r3, #2
 800779a:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800779c:	bf9e      	ittt	ls
 800779e:	6803      	ldrls	r3, [r0, #0]
 80077a0:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 80077a4:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 80077a6:	2000      	movs	r0, #0
 80077a8:	4770      	bx	lr

080077aa <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the USB device mode
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 80077aa:	b538      	push	{r3, r4, r5, lr}
 80077ac:	f500 612e 	add.w	r1, r0, #2784	; 0xae0
 80077b0:	4604      	mov	r4, r0
 80077b2:	f500 6310 	add.w	r3, r0, #2304	; 0x900
  uint32_t index;
  
  /* Clear Pending interrupt */
  for (index = 0; index < 15 ; index++)
  {
    USBx_INEP(index)->DIEPINT  = 0xFF;
 80077b6:	22ff      	movs	r2, #255	; 0xff
 80077b8:	609a      	str	r2, [r3, #8]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 80077ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80077be:	3320      	adds	r3, #32
  for (index = 0; index < 15 ; index++)
 80077c0:	428b      	cmp	r3, r1
 80077c2:	d1f9      	bne.n	80077b8 <USB_StopDevice+0xe>
  }
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
  
  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0;
 80077c4:	2500      	movs	r5, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80077c6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ca:	f8c4 2818 	str.w	r2, [r4, #2072]	; 0x818
  USBx_DEVICE->DOEPMSK  = 0;
  USBx_DEVICE->DAINTMSK = 0;
  
  /* Flush the FIFO */
  USB_FlushRxFifo(USBx);
 80077ce:	4620      	mov	r0, r4
  USBx_DEVICE->DIEPMSK  = 0;
 80077d0:	f8c4 5810 	str.w	r5, [r4, #2064]	; 0x810
  USBx_DEVICE->DOEPMSK  = 0;
 80077d4:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
  USBx_DEVICE->DAINTMSK = 0;
 80077d8:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
  USB_FlushRxFifo(USBx);
 80077dc:	f7ff fdec 	bl	80073b8 <USB_FlushRxFifo>
  USB_FlushTxFifo(USBx ,  0x10 );  
 80077e0:	2110      	movs	r1, #16
 80077e2:	4620      	mov	r0, r4
 80077e4:	f7ff fdd6 	bl	8007394 <USB_FlushTxFifo>
  
  return HAL_OK;
}
 80077e8:	4628      	mov	r0, r5
 80077ea:	bd38      	pop	{r3, r4, r5, pc}

080077ec <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 80077ec:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80077f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80077f4:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 80077f8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80077fc:	0109      	lsls	r1, r1, #4
 80077fe:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8007802:	4319      	orrs	r1, r3
 8007804:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8007808:	2000      	movs	r0, #0
 800780a:	4770      	bx	lr

0800780c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 800780c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ; 
 800780e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8007812:	f023 0302 	bic.w	r3, r3, #2
 8007816:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 800781a:	2003      	movs	r0, #3
 800781c:	f7fc fc80 	bl	8004120 <HAL_Delay>
  
  return HAL_OK;  
}
 8007820:	2000      	movs	r0, #0
 8007822:	bd08      	pop	{r3, pc}

08007824 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8007824:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ; 
 8007826:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800782a:	f043 0302 	orr.w	r3, r3, #2
 800782e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8007832:	2003      	movs	r0, #3
 8007834:	f7fc fc74 	bl	8004120 <HAL_Delay>
  
  return HAL_OK;  
}
 8007838:	2000      	movs	r0, #0
 800783a:	bd08      	pop	{r3, pc}

0800783c <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->GINTSTS;
 800783c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800783e:	6980      	ldr	r0, [r0, #24]
  return tmpreg;  
}
 8007840:	4010      	ands	r0, r2
 8007842:	4770      	bx	lr

08007844 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 8007844:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007848:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800784c:	69c0      	ldr	r0, [r0, #28]
 800784e:	4018      	ands	r0, r3
  return ((tmpreg & 0xffff0000) >> 16);
}
 8007850:	0c00      	lsrs	r0, r0, #16
 8007852:	4770      	bx	lr

08007854 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 8007854:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007858:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800785c:	69c0      	ldr	r0, [r0, #28]
 800785e:	4018      	ands	r0, r3
  return ((tmpreg & 0xFFFF));
}
 8007860:	b280      	uxth	r0, r0
 8007862:	4770      	bx	lr

08007864 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t tmpreg;
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8007864:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8007868:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800786c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8007870:	688a      	ldr	r2, [r1, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007872:	6940      	ldr	r0, [r0, #20]
  return tmpreg;
}
 8007874:	4010      	ands	r0, r2
 8007876:	4770      	bx	lr

08007878 <USB_ReadDevInEPInterrupt>:
  * @param  epnum: endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8007878:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, msk = 0, emp = 0;
  
  msk = USBx_DEVICE->DIEPMSK;
 800787a:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800787e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1) << 7;
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8007882:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1) << 7;
 8007886:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8007888:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1) << 7;
 800788c:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 800788e:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8007890:	b2db      	uxtb	r3, r3
 8007892:	4323      	orrs	r3, r4
  return tmpreg;
}
 8007894:	4018      	ands	r0, r3
 8007896:	bd10      	pop	{r4, pc}

08007898 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1);
 8007898:	6940      	ldr	r0, [r0, #20]
}
 800789a:	f000 0001 	and.w	r0, r0, #1
 800789e:	4770      	bx	lr

080078a0 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80078a0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80078a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80078a8:	f023 0307 	bic.w	r3, r3, #7
 80078ac:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80078b0:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80078b4:	689a      	ldr	r2, [r3, #8]
 80078b6:	f002 0206 	and.w	r2, r2, #6
 80078ba:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 80078bc:	bf02      	ittt	eq
 80078be:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 80078c2:	f042 0203 	orreq.w	r2, r2, #3
 80078c6:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078d0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 80078d2:	2000      	movs	r0, #0
 80078d4:	4770      	bx	lr

080078d6 <USB_EP0_OutStart>:
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(psetup);

  USBx_OUTEP(0)->DOEPTSIZ = 0;
 80078d6:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80078da:	2000      	movs	r0, #0
 80078dc:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 80078de:	691a      	ldr	r2, [r3, #16]
 80078e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80078e4:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 80078e6:	691a      	ldr	r2, [r3, #16]
 80078e8:	f042 0218 	orr.w	r2, r2, #24
 80078ec:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80078ee:	691a      	ldr	r2, [r3, #16]
 80078f0:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 80078f4:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
}
 80078f6:	4770      	bx	lr

080078f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007900:	2300      	movs	r3, #0
 8007902:	60fb      	str	r3, [r7, #12]
  
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	3301      	adds	r3, #1
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	4a13      	ldr	r2, [pc, #76]	; (800795c <USB_CoreReset+0x64>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d901      	bls.n	8007916 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e01b      	b.n	800794e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	daf2      	bge.n	8007904 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	f043 0201 	orr.w	r2, r3, #1
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	3301      	adds	r3, #1
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4a09      	ldr	r2, [pc, #36]	; (800795c <USB_CoreReset+0x64>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d901      	bls.n	8007940 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e006      	b.n	800794e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	f003 0301 	and.w	r3, r3, #1
 8007948:	2b01      	cmp	r3, #1
 800794a:	d0f0      	beq.n	800792e <USB_CoreReset+0x36>
  
  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	00030d40 	.word	0x00030d40

08007960 <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8007960:	4b08      	ldr	r3, [pc, #32]	; (8007984 <LL_mDelay+0x24>)
{
 8007962:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8007968:	9b01      	ldr	r3, [sp, #4]
    Delay++;
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 800796a:	4b06      	ldr	r3, [pc, #24]	; (8007984 <LL_mDelay+0x24>)
  if (Delay < LL_MAX_DELAY)
 800796c:	1c41      	adds	r1, r0, #1
    Delay++;
 800796e:	bf18      	it	ne
 8007970:	3001      	addne	r0, #1
  while (Delay)
 8007972:	b908      	cbnz	r0, 8007978 <LL_mDelay+0x18>
    {
      Delay--;
    }
  }
}
 8007974:	b002      	add	sp, #8
 8007976:	4770      	bx	lr
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	03d2      	lsls	r2, r2, #15
      Delay--;
 800797c:	bf48      	it	mi
 800797e:	f100 30ff 	addmi.w	r0, r0, #4294967295
 8007982:	e7f6      	b.n	8007972 <LL_mDelay+0x12>
 8007984:	e000e010 	.word	0xe000e010

08007988 <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8007988:	2320      	movs	r3, #32
 800798a:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 800798c:	4800      	ldr	r0, [pc, #0]	; (8007990 <USBD_MSC_GetHSCfgDesc+0x8>)
 800798e:	4770      	bx	lr
 8007990:	2000024c 	.word	0x2000024c

08007994 <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8007994:	2320      	movs	r3, #32
 8007996:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8007998:	4800      	ldr	r0, [pc, #0]	; (800799c <USBD_MSC_GetFSCfgDesc+0x8>)
 800799a:	4770      	bx	lr
 800799c:	2000022c 	.word	0x2000022c

080079a0 <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 80079a0:	2320      	movs	r3, #32
 80079a2:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 80079a4:	4800      	ldr	r0, [pc, #0]	; (80079a8 <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 80079a6:	4770      	bx	lr
 80079a8:	20000278 	.word	0x20000278

080079ac <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 80079ac:	230a      	movs	r3, #10
 80079ae:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 80079b0:	4800      	ldr	r0, [pc, #0]	; (80079b4 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 80079b2:	4770      	bx	lr
 80079b4:	2000026c 	.word	0x2000026c

080079b8 <USBD_MSC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80079b8:	7c03      	ldrb	r3, [r0, #16]
{
 80079ba:	b510      	push	{r4, lr}
 80079bc:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80079be:	b9c3      	cbnz	r3, 80079f2 <USBD_MSC_Init+0x3a>
    USBD_LL_OpenEP(pdev,
 80079c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079c4:	2202      	movs	r2, #2
 80079c6:	2101      	movs	r1, #1
 80079c8:	f7fb fd1f 	bl	800340a <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80079cc:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 80079d0:	2202      	movs	r2, #2
 80079d2:	2181      	movs	r1, #129	; 0x81
 80079d4:	4620      	mov	r0, r4
 80079d6:	f7fb fd18 	bl	800340a <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 80079da:	f242 006c 	movw	r0, #8300	; 0x206c
 80079de:	f002 fc41 	bl	800a264 <malloc>
 80079e2:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 80079e6:	b158      	cbz	r0, 8007a00 <USBD_MSC_Init+0x48>
    MSC_BOT_Init(pdev); 
 80079e8:	4620      	mov	r0, r4
 80079ea:	f000 f8be 	bl	8007b6a <MSC_BOT_Init>
    ret = 0;
 80079ee:	2000      	movs	r0, #0
 80079f0:	bd10      	pop	{r4, pc}
    USBD_LL_OpenEP(pdev,
 80079f2:	2340      	movs	r3, #64	; 0x40
 80079f4:	2202      	movs	r2, #2
 80079f6:	2101      	movs	r1, #1
 80079f8:	f7fb fd07 	bl	800340a <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80079fc:	2340      	movs	r3, #64	; 0x40
 80079fe:	e7e7      	b.n	80079d0 <USBD_MSC_Init+0x18>
    ret = 1; 
 8007a00:	2001      	movs	r0, #1
}
 8007a02:	bd10      	pop	{r4, pc}

08007a04 <USBD_MSC_DeInit>:
{
 8007a04:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8007a06:	2101      	movs	r1, #1
{
 8007a08:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8007a0a:	f7fb fd08 	bl	800341e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8007a0e:	2181      	movs	r1, #129	; 0x81
 8007a10:	4620      	mov	r0, r4
 8007a12:	f7fb fd04 	bl	800341e <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 f8d6 	bl	8007bc8 <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 8007a1c:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8007a20:	b120      	cbz	r0, 8007a2c <USBD_MSC_DeInit+0x28>
    USBD_free(pdev->pClassData);
 8007a22:	f002 fc27 	bl	800a274 <free>
    pdev->pClassData  = NULL; 
 8007a26:	2300      	movs	r3, #0
 8007a28:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	bd10      	pop	{r4, pc}

08007a30 <USBD_MSC_Setup>:
{
 8007a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a34:	780b      	ldrb	r3, [r1, #0]
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8007a36:	f8d0 8218 	ldr.w	r8, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a3a:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 8007a3e:	4606      	mov	r6, r0
 8007a40:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a42:	d02d      	beq.n	8007aa0 <USBD_MSC_Setup+0x70>
 8007a44:	2c20      	cmp	r4, #32
 8007a46:	d14a      	bne.n	8007ade <USBD_MSC_Setup+0xae>
    switch (req->bRequest)
 8007a48:	784a      	ldrb	r2, [r1, #1]
 8007a4a:	2afe      	cmp	r2, #254	; 0xfe
 8007a4c:	d005      	beq.n	8007a5a <USBD_MSC_Setup+0x2a>
 8007a4e:	2aff      	cmp	r2, #255	; 0xff
 8007a50:	d019      	beq.n	8007a86 <USBD_MSC_Setup+0x56>
       USBD_CtlError(pdev , req);
 8007a52:	f000 fef2 	bl	800883a <USBD_CtlError>
       return USBD_FAIL; 
 8007a56:	2402      	movs	r4, #2
 8007a58:	e01f      	b.n	8007a9a <USBD_MSC_Setup+0x6a>
      if((req->wValue  == 0) && 
 8007a5a:	884c      	ldrh	r4, [r1, #2]
 8007a5c:	b984      	cbnz	r4, 8007a80 <USBD_MSC_Setup+0x50>
 8007a5e:	88cf      	ldrh	r7, [r1, #6]
 8007a60:	2f01      	cmp	r7, #1
 8007a62:	d10d      	bne.n	8007a80 <USBD_MSC_Setup+0x50>
         (req->wLength == 1) &&
 8007a64:	061a      	lsls	r2, r3, #24
 8007a66:	d50b      	bpl.n	8007a80 <USBD_MSC_Setup+0x50>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8007a68:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	4798      	blx	r3
        USBD_CtlSendData (pdev,
 8007a70:	463a      	mov	r2, r7
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8007a72:	f8c8 0000 	str.w	r0, [r8]
        USBD_CtlSendData (pdev,
 8007a76:	4641      	mov	r1, r8
 8007a78:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8007a7a:	f000 ff05 	bl	8008888 <USBD_CtlSendData>
      break;
 8007a7e:	e00c      	b.n	8007a9a <USBD_MSC_Setup+0x6a>
         USBD_CtlError(pdev , req);
 8007a80:	4629      	mov	r1, r5
 8007a82:	4630      	mov	r0, r6
 8007a84:	e7e5      	b.n	8007a52 <USBD_MSC_Setup+0x22>
      if((req->wValue  == 0) && 
 8007a86:	884a      	ldrh	r2, [r1, #2]
 8007a88:	2a00      	cmp	r2, #0
 8007a8a:	d1f9      	bne.n	8007a80 <USBD_MSC_Setup+0x50>
 8007a8c:	88cc      	ldrh	r4, [r1, #6]
 8007a8e:	2c00      	cmp	r4, #0
 8007a90:	d1f6      	bne.n	8007a80 <USBD_MSC_Setup+0x50>
         (req->wLength == 0) &&
 8007a92:	061b      	lsls	r3, r3, #24
 8007a94:	d4f4      	bmi.n	8007a80 <USBD_MSC_Setup+0x50>
         MSC_BOT_Reset(pdev);
 8007a96:	f000 f88b 	bl	8007bb0 <MSC_BOT_Reset>
}
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8007aa0:	784f      	ldrb	r7, [r1, #1]
 8007aa2:	2f0a      	cmp	r7, #10
 8007aa4:	d01d      	beq.n	8007ae2 <USBD_MSC_Setup+0xb2>
 8007aa6:	2f0b      	cmp	r7, #11
 8007aa8:	d01f      	beq.n	8007aea <USBD_MSC_Setup+0xba>
 8007aaa:	2f01      	cmp	r7, #1
 8007aac:	d1f5      	bne.n	8007a9a <USBD_MSC_Setup+0x6a>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8007aae:	7909      	ldrb	r1, [r1, #4]
 8007ab0:	f7fb fcbc 	bl	800342c <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8007ab4:	7929      	ldrb	r1, [r5, #4]
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	f7fb fcb1 	bl	800341e <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 8007abc:	f995 3004 	ldrsb.w	r3, [r5, #4]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	7c33      	ldrb	r3, [r6, #16]
 8007ac4:	da17      	bge.n	8007af6 <USBD_MSC_Setup+0xc6>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8007ac6:	b9a3      	cbnz	r3, 8007af2 <USBD_MSC_Setup+0xc2>
          USBD_LL_OpenEP(pdev,
 8007ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8007acc:	2202      	movs	r2, #2
 8007ace:	2181      	movs	r1, #129	; 0x81
          USBD_LL_OpenEP(pdev,
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	f7fb fc9a 	bl	800340a <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8007ad6:	7929      	ldrb	r1, [r5, #4]
 8007ad8:	4630      	mov	r0, r6
 8007ada:	f000 f931 	bl	8007d40 <MSC_BOT_CplClrFeature>
  return 0;
 8007ade:	2400      	movs	r4, #0
 8007ae0:	e7db      	b.n	8007a9a <USBD_MSC_Setup+0x6a>
      USBD_CtlSendData (pdev,
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f108 0104 	add.w	r1, r8, #4
 8007ae8:	e7c7      	b.n	8007a7a <USBD_MSC_Setup+0x4a>
      hmsc->interface = (uint8_t)(req->wValue);
 8007aea:	788b      	ldrb	r3, [r1, #2]
 8007aec:	f8c8 3004 	str.w	r3, [r8, #4]
      break;
 8007af0:	e7d3      	b.n	8007a9a <USBD_MSC_Setup+0x6a>
          USBD_LL_OpenEP(pdev,
 8007af2:	2340      	movs	r3, #64	; 0x40
 8007af4:	e7ea      	b.n	8007acc <USBD_MSC_Setup+0x9c>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8007af6:	b923      	cbnz	r3, 8007b02 <USBD_MSC_Setup+0xd2>
          USBD_LL_OpenEP(pdev,
 8007af8:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8007afc:	2202      	movs	r2, #2
 8007afe:	4639      	mov	r1, r7
 8007b00:	e7e6      	b.n	8007ad0 <USBD_MSC_Setup+0xa0>
 8007b02:	2340      	movs	r3, #64	; 0x40
 8007b04:	e7fa      	b.n	8007afc <USBD_MSC_Setup+0xcc>

08007b06 <USBD_MSC_DataIn>:
{
 8007b06:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8007b08:	f000 f882 	bl	8007c10 <MSC_BOT_DataIn>
}
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	bd08      	pop	{r3, pc}

08007b10 <USBD_MSC_DataOut>:
{
 8007b10:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 8007b12:	f000 f89b 	bl	8007c4c <MSC_BOT_DataOut>
}
 8007b16:	2000      	movs	r0, #0
 8007b18:	bd08      	pop	{r3, pc}

08007b1a <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8007b1a:	b109      	cbz	r1, 8007b20 <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData= fops;
 8007b1c:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
  }
  return 0;
}
 8007b20:	2000      	movs	r0, #0
 8007b22:	4770      	bx	lr

08007b24 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8007b24:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  if ((hmsc->cbw.bmFlags == 0) && 
 8007b26:	f242 0318 	movw	r3, #8216	; 0x2018
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007b2a:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0) && 
 8007b2e:	5ce3      	ldrb	r3, [r4, r3]
{
 8007b30:	4605      	mov	r5, r0
  if ((hmsc->cbw.bmFlags == 0) && 
 8007b32:	b943      	cbnz	r3, 8007b46 <MSC_BOT_Abort+0x22>
      (hmsc->cbw.dDataLength != 0) &&
 8007b34:	f242 0314 	movw	r3, #8212	; 0x2014
  if ((hmsc->cbw.bmFlags == 0) && 
 8007b38:	58e3      	ldr	r3, [r4, r3]
 8007b3a:	b123      	cbz	r3, 8007b46 <MSC_BOT_Abort+0x22>
      (hmsc->cbw.dDataLength != 0) &&
 8007b3c:	7a63      	ldrb	r3, [r4, #9]
 8007b3e:	b913      	cbnz	r3, 8007b46 <MSC_BOT_Abort+0x22>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8007b40:	2101      	movs	r1, #1
 8007b42:	f7fb fc7a 	bl	800343a <USBD_LL_StallEP>
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007b46:	2181      	movs	r1, #129	; 0x81
 8007b48:	4628      	mov	r0, r5
 8007b4a:	f7fb fc76 	bl	800343a <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007b4e:	7a63      	ldrb	r3, [r4, #9]
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d109      	bne.n	8007b68 <MSC_BOT_Abort+0x44>
  {
    USBD_LL_PrepareReceive (pdev,
 8007b54:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8007b58:	4628      	mov	r0, r5
 8007b5a:	231f      	movs	r3, #31
 8007b5c:	320c      	adds	r2, #12
 8007b5e:	2101      	movs	r1, #1
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
                      USBD_BOT_CBW_LENGTH);    
  }
}
 8007b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    USBD_LL_PrepareReceive (pdev,
 8007b64:	f7fb bc98 	b.w	8003498 <USBD_LL_PrepareReceive>
 8007b68:	bd70      	pop	{r4, r5, r6, pc}

08007b6a <MSC_BOT_Init>:
{
 8007b6a:	b570      	push	{r4, r5, r6, lr}
  hmsc->scsi_sense_tail = 0;
 8007b6c:	f242 035d 	movw	r3, #8285	; 0x205d
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007b70:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
{
 8007b74:	4604      	mov	r4, r0
  hmsc->bot_state  = USBD_BOT_IDLE;
 8007b76:	2000      	movs	r0, #0
 8007b78:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8007b7a:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0;
 8007b7c:	54e8      	strb	r0, [r5, r3]
  hmsc->scsi_sense_head = 0;
 8007b7e:	f242 035c 	movw	r3, #8284	; 0x205c
 8007b82:	54e8      	strb	r0, [r5, r3]
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 8007b84:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f7fb fc4c 	bl	800342c <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8007b94:	2181      	movs	r1, #129	; 0x81
 8007b96:	4620      	mov	r0, r4
 8007b98:	f7fb fc48 	bl	800342c <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev,
 8007b9c:	f505 5200 	add.w	r2, r5, #8192	; 0x2000
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	231f      	movs	r3, #31
 8007ba4:	320c      	adds	r2, #12
 8007ba6:	2101      	movs	r1, #1
}
 8007ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 8007bac:	f7fb bc74 	b.w	8003498 <USBD_LL_PrepareReceive>

08007bb0 <MSC_BOT_Reset>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007bb0:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8007bb4:	2300      	movs	r3, #0
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8007bb6:	2101      	movs	r1, #1
  hmsc->bot_state  = USBD_BOT_IDLE;
 8007bb8:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8007bba:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev,
 8007bbc:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007bc0:	231f      	movs	r3, #31
 8007bc2:	320c      	adds	r2, #12
 8007bc4:	f7fb bc68 	b.w	8003498 <USBD_LL_PrepareReceive>

08007bc8 <MSC_BOT_DeInit>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 8007bc8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8007bcc:	2200      	movs	r2, #0
 8007bce:	721a      	strb	r2, [r3, #8]
 8007bd0:	4770      	bx	lr
	...

08007bd4 <MSC_BOT_SendCSW>:
{
 8007bd4:	b570      	push	{r4, r5, r6, lr}
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007bd6:	f242 022c 	movw	r2, #8236	; 0x202c
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007bda:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007bde:	4b0b      	ldr	r3, [pc, #44]	; (8007c0c <MSC_BOT_SendCSW+0x38>)
 8007be0:	50a3      	str	r3, [r4, r2]
  hmsc->csw.bStatus = CSW_Status;
 8007be2:	f242 0338 	movw	r3, #8248	; 0x2038
  USBD_LL_Transmit (pdev, 
 8007be6:	4422      	add	r2, r4
  hmsc->csw.bStatus = CSW_Status;
 8007be8:	54e1      	strb	r1, [r4, r3]
  hmsc->bot_state = USBD_BOT_IDLE;
 8007bea:	2300      	movs	r3, #0
 8007bec:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, 
 8007bee:	2181      	movs	r1, #129	; 0x81
 8007bf0:	230d      	movs	r3, #13
{
 8007bf2:	4605      	mov	r5, r0
  USBD_LL_Transmit (pdev, 
 8007bf4:	f7fb fc49 	bl	800348a <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev,
 8007bf8:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	231f      	movs	r3, #31
 8007c00:	320c      	adds	r2, #12
 8007c02:	2101      	movs	r1, #1
}
 8007c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 8007c08:	f7fb bc46 	b.w	8003498 <USBD_LL_PrepareReceive>
 8007c0c:	53425355 	.word	0x53425355

08007c10 <MSC_BOT_DataIn>:
{
 8007c10:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8007c12:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8007c16:	7a1a      	ldrb	r2, [r3, #8]
 8007c18:	2a02      	cmp	r2, #2
{
 8007c1a:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 8007c1c:	d003      	beq.n	8007c26 <MSC_BOT_DataIn+0x16>
 8007c1e:	d314      	bcc.n	8007c4a <MSC_BOT_DataIn+0x3a>
 8007c20:	2a04      	cmp	r2, #4
 8007c22:	d910      	bls.n	8007c46 <MSC_BOT_DataIn+0x36>
 8007c24:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 8007c26:	f242 0119 	movw	r1, #8217	; 0x2019
 8007c2a:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8007c2e:	321b      	adds	r2, #27
 8007c30:	5c59      	ldrb	r1, [r3, r1]
 8007c32:	f000 f8b3 	bl	8007d9c <SCSI_ProcessCmd>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	da07      	bge.n	8007c4a <MSC_BOT_DataIn+0x3a>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	4620      	mov	r0, r4
}
 8007c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8007c42:	f7ff bfc7 	b.w	8007bd4 <MSC_BOT_SendCSW>
 8007c46:	2100      	movs	r1, #0
 8007c48:	e7f9      	b.n	8007c3e <MSC_BOT_DataIn+0x2e>
 8007c4a:	bd10      	pop	{r4, pc}

08007c4c <MSC_BOT_DataOut>:
{
 8007c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007c50:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8007c54:	7a26      	ldrb	r6, [r4, #8]
{
 8007c56:	4605      	mov	r5, r0
  switch (hmsc->bot_state)
 8007c58:	b11e      	cbz	r6, 8007c62 <MSC_BOT_DataOut+0x16>
 8007c5a:	2e01      	cmp	r6, #1
 8007c5c:	d062      	beq.n	8007d24 <MSC_BOT_DataOut+0xd8>
 8007c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007c62:	f242 0310 	movw	r3, #8208	; 0x2010
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007c66:	f242 0814 	movw	r8, #8212	; 0x2014
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007c6a:	58e2      	ldr	r2, [r4, r3]
 8007c6c:	f242 0330 	movw	r3, #8240	; 0x2030
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007c70:	f242 0734 	movw	r7, #8244	; 0x2034
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007c74:	50e2      	str	r2, [r4, r3]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007c76:	f854 3008 	ldr.w	r3, [r4, r8]
 8007c7a:	51e3      	str	r3, [r4, r7]
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	f7fb fc12 	bl	80034a6 <USBD_LL_GetRxDataSize>
 8007c82:	281f      	cmp	r0, #31
 8007c84:	d110      	bne.n	8007ca8 <MSC_BOT_DataOut+0x5c>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8007c86:	f242 030c 	movw	r3, #8204	; 0x200c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007c8a:	58e2      	ldr	r2, [r4, r3]
 8007c8c:	4b2b      	ldr	r3, [pc, #172]	; (8007d3c <MSC_BOT_DataOut+0xf0>)
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d10a      	bne.n	8007ca8 <MSC_BOT_DataOut+0x5c>
        (hmsc->cbw.bLUN > 1) || 
 8007c92:	f242 0319 	movw	r3, #8217	; 0x2019
 8007c96:	5ce1      	ldrb	r1, [r4, r3]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8007c98:	2901      	cmp	r1, #1
 8007c9a:	d805      	bhi.n	8007ca8 <MSC_BOT_DataOut+0x5c>
          (hmsc->cbw.bCBLength < 1) || 
 8007c9c:	f242 031a 	movw	r3, #8218	; 0x201a
        (hmsc->cbw.bLUN > 1) || 
 8007ca0:	5ce3      	ldrb	r3, [r4, r3]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	2b0f      	cmp	r3, #15
 8007ca6:	d90e      	bls.n	8007cc6 <MSC_BOT_DataOut+0x7a>
    SCSI_SenseCode(pdev,
 8007ca8:	f242 0119 	movw	r1, #8217	; 0x2019
 8007cac:	2320      	movs	r3, #32
 8007cae:	2205      	movs	r2, #5
 8007cb0:	5c61      	ldrb	r1, [r4, r1]
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f000 fac2 	bl	800823c <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 8007cb8:	2302      	movs	r3, #2
 8007cba:	7263      	strb	r3, [r4, #9]
        MSC_BOT_Abort(pdev);
 8007cbc:	4628      	mov	r0, r5
}
 8007cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MSC_BOT_Abort(pdev);
 8007cc2:	f7ff bf2f 	b.w	8007b24 <MSC_BOT_Abort>
    if(SCSI_ProcessCmd(pdev,
 8007cc6:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8007cca:	321b      	adds	r2, #27
 8007ccc:	4628      	mov	r0, r5
 8007cce:	f000 f865 	bl	8007d9c <SCSI_ProcessCmd>
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	7a23      	ldrb	r3, [r4, #8]
 8007cd6:	da07      	bge.n	8007ce8 <MSC_BOT_DataOut+0x9c>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8007cd8:	2b05      	cmp	r3, #5
 8007cda:	d1ef      	bne.n	8007cbc <MSC_BOT_DataOut+0x70>
       MSC_BOT_SendCSW (pdev,
 8007cdc:	2101      	movs	r1, #1
        MSC_BOT_SendCSW (pdev,
 8007cde:	4628      	mov	r0, r5
}
 8007ce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MSC_BOT_SendCSW (pdev,
 8007ce4:	f7ff bf76 	b.w	8007bd4 <MSC_BOT_SendCSW>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d924      	bls.n	8007d38 <MSC_BOT_DataOut+0xec>
      if (hmsc->bot_data_length > 0)
 8007cee:	8961      	ldrh	r1, [r4, #10]
 8007cf0:	2900      	cmp	r1, #0
 8007cf2:	d0f4      	beq.n	8007cde <MSC_BOT_DataOut+0x92>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007cf4:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
  len = MIN (hmsc->cbw.dDataLength, len);
 8007cf8:	f852 3008 	ldr.w	r3, [r2, r8]
 8007cfc:	4299      	cmp	r1, r3
 8007cfe:	bf28      	it	cs
 8007d00:	4619      	movcs	r1, r3
  hmsc->csw.dDataResidue -= len;
 8007d02:	59d3      	ldr	r3, [r2, r7]
 8007d04:	1a5b      	subs	r3, r3, r1
 8007d06:	51d3      	str	r3, [r2, r7]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007d08:	f242 0338 	movw	r3, #8248	; 0x2038
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8007d0c:	4628      	mov	r0, r5
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007d0e:	54d6      	strb	r6, [r2, r3]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8007d10:	2304      	movs	r3, #4
 8007d12:	7213      	strb	r3, [r2, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8007d14:	b28b      	uxth	r3, r1
 8007d16:	f104 020c 	add.w	r2, r4, #12
 8007d1a:	2181      	movs	r1, #129	; 0x81
}
 8007d1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8007d20:	f7fb bbb3 	b.w	800348a <USBD_LL_Transmit>
    if(SCSI_ProcessCmd(pdev,
 8007d24:	f242 0319 	movw	r3, #8217	; 0x2019
 8007d28:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8007d2c:	321b      	adds	r2, #27
 8007d2e:	5ce1      	ldrb	r1, [r4, r3]
 8007d30:	f000 f834 	bl	8007d9c <SCSI_ProcessCmd>
 8007d34:	2800      	cmp	r0, #0
 8007d36:	dbd1      	blt.n	8007cdc <MSC_BOT_DataOut+0x90>
 8007d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d3c:	43425355 	.word	0x43425355

08007d40 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007d40:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007d42:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 8007d46:	7a63      	ldrb	r3, [r4, #9]
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d105      	bne.n	8007d58 <MSC_BOT_CplClrFeature+0x18>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007d4c:	2181      	movs	r1, #129	; 0x81
 8007d4e:	f7fb fb74 	bl	800343a <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 8007d52:	2300      	movs	r3, #0
 8007d54:	7263      	strb	r3, [r4, #9]
 8007d56:	bd10      	pop	{r4, pc}
  }
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8007d58:	060a      	lsls	r2, r1, #24
 8007d5a:	d506      	bpl.n	8007d6a <MSC_BOT_CplClrFeature+0x2a>
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d004      	beq.n	8007d6a <MSC_BOT_CplClrFeature+0x2a>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8007d60:	2101      	movs	r1, #1
  }
  
}
 8007d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8007d66:	f7ff bf35 	b.w	8007bd4 <MSC_BOT_SendCSW>
 8007d6a:	bd10      	pop	{r4, pc}

08007d6c <SCSI_SenseCode.constprop.8>:
* @param  sKey: Sense Key
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
 8007d6c:	b570      	push	{r4, r5, r6, lr}
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007d6e:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8007d72:	f242 055d 	movw	r5, #8285	; 0x205d
 8007d76:	f242 063c 	movw	r6, #8252	; 0x203c
 8007d7a:	5d43      	ldrb	r3, [r0, r5]
 8007d7c:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
  hmsc->scsi_sense_tail++;
 8007d80:	3301      	adds	r3, #1
 8007d82:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8007d84:	55a1      	strb	r1, [r4, r6]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007d86:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8007d88:	f504 5401 	add.w	r4, r4, #8256	; 0x2040
 8007d8c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  {
    hmsc->scsi_sense_tail = 0;
 8007d90:	bf08      	it	eq
 8007d92:	2300      	moveq	r3, #0
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8007d94:	6022      	str	r2, [r4, #0]
    hmsc->scsi_sense_tail = 0;
 8007d96:	5543      	strb	r3, [r0, r5]
 8007d98:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d9c <SCSI_ProcessCmd>:
{
 8007d9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (params[0])
 8007da0:	7813      	ldrb	r3, [r2, #0]
 8007da2:	2b1e      	cmp	r3, #30
{
 8007da4:	4605      	mov	r5, r0
 8007da6:	460c      	mov	r4, r1
 8007da8:	4617      	mov	r7, r2
  switch (params[0])
 8007daa:	d00f      	beq.n	8007dcc <SCSI_ProcessCmd+0x30>
 8007dac:	d813      	bhi.n	8007dd6 <SCSI_ProcessCmd+0x3a>
 8007dae:	2b12      	cmp	r3, #18
 8007db0:	f000 80b4 	beq.w	8007f1c <SCSI_ProcessCmd+0x180>
 8007db4:	d805      	bhi.n	8007dc2 <SCSI_ProcessCmd+0x26>
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d060      	beq.n	8007e7c <SCSI_ProcessCmd+0xe0>
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d07b      	beq.n	8007eb6 <SCSI_ProcessCmd+0x11a>
    SCSI_SenseCode(pdev, 
 8007dbe:	2220      	movs	r2, #32
 8007dc0:	e14a      	b.n	8008058 <SCSI_ProcessCmd+0x2bc>
  switch (params[0])
 8007dc2:	2b1a      	cmp	r3, #26
 8007dc4:	f000 80c8 	beq.w	8007f58 <SCSI_ProcessCmd+0x1bc>
 8007dc8:	2b1b      	cmp	r3, #27
 8007dca:	d1f8      	bne.n	8007dbe <SCSI_ProcessCmd+0x22>
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
  hmsc->bot_data_length = 0;
 8007dcc:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8007dd0:	2400      	movs	r4, #0
                            hmsc->scsi_blk_addr, 
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */      
  }
  hmsc->bot_data_length = 0;
 8007dd2:	815c      	strh	r4, [r3, #10]
 8007dd4:	e06b      	b.n	8007eae <SCSI_ProcessCmd+0x112>
  switch (params[0])
 8007dd6:	2b28      	cmp	r3, #40	; 0x28
 8007dd8:	f000 810b 	beq.w	8007ff2 <SCSI_ProcessCmd+0x256>
 8007ddc:	d828      	bhi.n	8007e30 <SCSI_ProcessCmd+0x94>
 8007dde:	2b23      	cmp	r3, #35	; 0x23
 8007de0:	f000 80d8 	beq.w	8007f94 <SCSI_ProcessCmd+0x1f8>
 8007de4:	2b25      	cmp	r3, #37	; 0x25
 8007de6:	d1ea      	bne.n	8007dbe <SCSI_ProcessCmd+0x22>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007de8:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8007dec:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8007df0:	f242 075e 	movw	r7, #8286	; 0x205e
 8007df4:	f242 0860 	movw	r8, #8288	; 0x2060
 8007df8:	4620      	mov	r0, r4
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	19f2      	adds	r2, r6, r7
 8007dfe:	eb06 0108 	add.w	r1, r6, r8
 8007e02:	4798      	blx	r3
 8007e04:	4604      	mov	r4, r0
 8007e06:	2800      	cmp	r0, #0
 8007e08:	f040 80d9 	bne.w	8007fbe <SCSI_ProcessCmd+0x222>
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 8007e0c:	f856 3008 	ldr.w	r3, [r6, r8]
 8007e10:	3b01      	subs	r3, #1
 8007e12:	0e1a      	lsrs	r2, r3, #24
 8007e14:	7332      	strb	r2, [r6, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 8007e16:	0c1a      	lsrs	r2, r3, #16
 8007e18:	7372      	strb	r2, [r6, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 8007e1a:	0a1a      	lsrs	r2, r3, #8
 8007e1c:	73b2      	strb	r2, [r6, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 8007e1e:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007e20:	5bf3      	ldrh	r3, [r6, r7]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8007e22:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007e24:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007e26:	7430      	strb	r0, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007e28:	7470      	strb	r0, [r6, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007e2a:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data_length = 8;
 8007e2c:	2308      	movs	r3, #8
 8007e2e:	e0de      	b.n	8007fee <SCSI_ProcessCmd+0x252>
  switch (params[0])
 8007e30:	2b2f      	cmp	r3, #47	; 0x2f
 8007e32:	f000 81ac 	beq.w	800818e <SCSI_ProcessCmd+0x3f2>
 8007e36:	2b5a      	cmp	r3, #90	; 0x5a
 8007e38:	f000 809d 	beq.w	8007f76 <SCSI_ProcessCmd+0x1da>
 8007e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e3e:	d1be      	bne.n	8007dbe <SCSI_ProcessCmd+0x22>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8007e40:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007e44:	7a33      	ldrb	r3, [r6, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f040 815e 	bne.w	8008108 <SCSI_ProcessCmd+0x36c>
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 8007e4c:	f242 0318 	movw	r3, #8216	; 0x2018
 8007e50:	56f3      	ldrsb	r3, [r6, r3]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	dbb3      	blt.n	8007dbe <SCSI_ProcessCmd+0x22>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8007e56:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8007e5a:	4608      	mov	r0, r1
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	4798      	blx	r3
 8007e60:	2800      	cmp	r0, #0
 8007e62:	f040 80ac 	bne.w	8007fbe <SCSI_ProcessCmd+0x222>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 8007e66:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	4798      	blx	r3
 8007e70:	4604      	mov	r4, r0
 8007e72:	2800      	cmp	r0, #0
 8007e74:	f000 810d 	beq.w	8008092 <SCSI_ProcessCmd+0x2f6>
      SCSI_SenseCode(pdev,
 8007e78:	2227      	movs	r2, #39	; 0x27
 8007e7a:	e0a1      	b.n	8007fc0 <SCSI_ProcessCmd+0x224>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8007e7c:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if (hmsc->cbw.dDataLength != 0)
 8007e80:	f242 0314 	movw	r3, #8212	; 0x2014
 8007e84:	58f3      	ldr	r3, [r6, r3]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d199      	bne.n	8007dbe <SCSI_ProcessCmd+0x22>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8007e8a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8007e8e:	4608      	mov	r0, r1
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	4798      	blx	r3
 8007e94:	4604      	mov	r4, r0
 8007e96:	b148      	cbz	r0, 8007eac <SCSI_ProcessCmd+0x110>
    SCSI_SenseCode(pdev,
 8007e98:	223a      	movs	r2, #58	; 0x3a
 8007e9a:	2102      	movs	r1, #2
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f7ff ff65 	bl	8007d6c <SCSI_SenseCode.constprop.8>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007ea2:	2305      	movs	r3, #5
 8007ea4:	7233      	strb	r3, [r6, #8]
    return -1;
 8007ea6:	f04f 34ff 	mov.w	r4, #4294967295
 8007eaa:	e000      	b.n	8007eae <SCSI_ProcessCmd+0x112>
  hmsc->bot_data_length = 0;
 8007eac:	8170      	strh	r0, [r6, #10]
}
 8007eae:	4620      	mov	r0, r4
 8007eb0:	b003      	add	sp, #12
 8007eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb6:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
    hmsc->bot_data[i] = 0;
 8007eba:	2400      	movs	r4, #0
 8007ebc:	f103 020c 	add.w	r2, r3, #12
 8007ec0:	f103 011e 	add.w	r1, r3, #30
 8007ec4:	f802 4b01 	strb.w	r4, [r2], #1
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 8007ec8:	428a      	cmp	r2, r1
 8007eca:	d1fb      	bne.n	8007ec4 <SCSI_ProcessCmd+0x128>
  hmsc->bot_data[0]	= 0x70;		
 8007ecc:	2270      	movs	r2, #112	; 0x70
 8007ece:	731a      	strb	r2, [r3, #12]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8007ed0:	f242 005c 	movw	r0, #8284	; 0x205c
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8007ed4:	220c      	movs	r2, #12
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8007ed6:	f242 015d 	movw	r1, #8285	; 0x205d
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8007eda:	74da      	strb	r2, [r3, #19]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8007edc:	5c1a      	ldrb	r2, [r3, r0]
 8007ede:	5c59      	ldrb	r1, [r3, r1]
 8007ee0:	4291      	cmp	r1, r2
 8007ee2:	d013      	beq.n	8007f0c <SCSI_ProcessCmd+0x170>
 8007ee4:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 8007ee8:	f242 053c 	movw	r5, #8252	; 0x203c
    hmsc->scsi_sense_head++;
 8007eec:	3201      	adds	r2, #1
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 8007eee:	5d4d      	ldrb	r5, [r1, r5]
 8007ef0:	739d      	strb	r5, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 8007ef2:	f242 0541 	movw	r5, #8257	; 0x2041
    hmsc->scsi_sense_head++;
 8007ef6:	b2d2      	uxtb	r2, r2
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 8007ef8:	5d4d      	ldrb	r5, [r1, r5]
 8007efa:	761d      	strb	r5, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 8007efc:	f501 5101 	add.w	r1, r1, #8256	; 0x2040
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007f00:	2a04      	cmp	r2, #4
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 8007f02:	7809      	ldrb	r1, [r1, #0]
 8007f04:	7659      	strb	r1, [r3, #25]
    hmsc->scsi_sense_head++;
 8007f06:	bf14      	ite	ne
 8007f08:	541a      	strbne	r2, [r3, r0]
      hmsc->scsi_sense_head = 0;
 8007f0a:	541c      	strbeq	r4, [r3, r0]
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 8007f0c:	2212      	movs	r2, #18
 8007f0e:	815a      	strh	r2, [r3, #10]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007f10:	793a      	ldrb	r2, [r7, #4]
 8007f12:	2a12      	cmp	r2, #18
    hmsc->bot_data_length = params[4];
 8007f14:	bf98      	it	ls
 8007f16:	815a      	strhls	r2, [r3, #10]
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
  }
  
  return 0;
 8007f18:	2400      	movs	r4, #0
 8007f1a:	e7c8      	b.n	8007eae <SCSI_ProcessCmd+0x112>
  if (params[1] & 0x01)/*Evpd is set*/
 8007f1c:	787b      	ldrb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007f1e:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  if (params[1] & 0x01)/*Evpd is set*/
 8007f22:	07db      	lsls	r3, r3, #31
 8007f24:	d415      	bmi.n	8007f52 <SCSI_ProcessCmd+0x1b6>
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8007f26:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8007f2a:	69db      	ldr	r3, [r3, #28]
 8007f2c:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
 8007f30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f34:	7939      	ldrb	r1, [r7, #4]
    len = pPage[4] + 5;
 8007f36:	7923      	ldrb	r3, [r4, #4]
 8007f38:	3305      	adds	r3, #5
 8007f3a:	428b      	cmp	r3, r1
 8007f3c:	bf28      	it	cs
 8007f3e:	460b      	movcs	r3, r1
  hmsc->bot_data_length = len;
 8007f40:	8153      	strh	r3, [r2, #10]
  while (len) 
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0e8      	beq.n	8007f18 <SCSI_ProcessCmd+0x17c>
    len--;
 8007f46:	3b01      	subs	r3, #1
 8007f48:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pPage[len];
 8007f4a:	18d1      	adds	r1, r2, r3
 8007f4c:	5ce0      	ldrb	r0, [r4, r3]
 8007f4e:	7308      	strb	r0, [r1, #12]
 8007f50:	e7f7      	b.n	8007f42 <SCSI_ProcessCmd+0x1a6>
    len = LENGTH_INQUIRY_PAGE00;
 8007f52:	2307      	movs	r3, #7
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 8007f54:	4cb6      	ldr	r4, [pc, #728]	; (8008230 <SCSI_ProcessCmd+0x494>)
 8007f56:	e7f3      	b.n	8007f40 <SCSI_ProcessCmd+0x1a4>
 8007f58:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8007f5c:	49b5      	ldr	r1, [pc, #724]	; (8008234 <SCSI_ProcessCmd+0x498>)
  hmsc->bot_data_length = len;
 8007f5e:	2208      	movs	r2, #8
 8007f60:	815a      	strh	r2, [r3, #10]
 8007f62:	f103 0213 	add.w	r2, r3, #19
 8007f66:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8007f68:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8007f6c:	f802 0901 	strb.w	r0, [r2], #-1
  while (len) 
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d1f9      	bne.n	8007f68 <SCSI_ProcessCmd+0x1cc>
 8007f74:	e7d0      	b.n	8007f18 <SCSI_ProcessCmd+0x17c>
 8007f76:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8007f7a:	49af      	ldr	r1, [pc, #700]	; (8008238 <SCSI_ProcessCmd+0x49c>)
  hmsc->bot_data_length = len;
 8007f7c:	2208      	movs	r2, #8
 8007f7e:	815a      	strh	r2, [r3, #10]
 8007f80:	f103 0213 	add.w	r2, r3, #19
 8007f84:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8007f86:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8007f8a:	f802 0901 	strb.w	r0, [r2], #-1
  while (len) 
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d1f9      	bne.n	8007f86 <SCSI_ProcessCmd+0x1ea>
 8007f92:	e7c1      	b.n	8007f18 <SCSI_ProcessCmd+0x17c>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007f94:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
    hmsc->bot_data[i] = 0;
 8007f98:	2100      	movs	r1, #0
 8007f9a:	f106 030c 	add.w	r3, r6, #12
 8007f9e:	f106 0218 	add.w	r2, r6, #24
 8007fa2:	f803 1b01 	strb.w	r1, [r3], #1
  for(i=0 ; i < 12 ; i++) 
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d1fb      	bne.n	8007fa2 <SCSI_ProcessCmd+0x206>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 8007faa:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8007fae:	4620      	mov	r0, r4
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f10d 0202 	add.w	r2, sp, #2
 8007fb6:	a901      	add	r1, sp, #4
 8007fb8:	4798      	blx	r3
 8007fba:	4604      	mov	r4, r0
 8007fbc:	b118      	cbz	r0, 8007fc6 <SCSI_ProcessCmd+0x22a>
    SCSI_SenseCode(pdev,
 8007fbe:	223a      	movs	r2, #58	; 0x3a
      SCSI_SenseCode(pdev,
 8007fc0:	2102      	movs	r1, #2
    SCSI_SenseCode(pdev, 
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	e0eb      	b.n	800819e <SCSI_ProcessCmd+0x402>
    hmsc->bot_data[3] = 0x08;
 8007fc6:	2308      	movs	r3, #8
 8007fc8:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8007fca:	9b01      	ldr	r3, [sp, #4]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007fcc:	7570      	strb	r0, [r6, #21]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	0e1a      	lsrs	r2, r3, #24
 8007fd2:	7432      	strb	r2, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 8007fd4:	0c1a      	lsrs	r2, r3, #16
 8007fd6:	7472      	strb	r2, [r6, #17]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 8007fd8:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 8007fda:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[8] = 0x02;
 8007fdc:	2302      	movs	r3, #2
 8007fde:	7533      	strb	r3, [r6, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007fe0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 8007fe4:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007fe6:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007fe8:	75f3      	strb	r3, [r6, #23]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007fea:	75b2      	strb	r2, [r6, #22]
    hmsc->bot_data_length = 12;
 8007fec:	230c      	movs	r3, #12
    hmsc->bot_data_length = 8;
 8007fee:	8173      	strh	r3, [r6, #10]
 8007ff0:	e75d      	b.n	8007eae <SCSI_ProcessCmd+0x112>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8007ff2:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 8007ff6:	7a33      	ldrb	r3, [r6, #8]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f040 80f1 	bne.w	80081e0 <SCSI_ProcessCmd+0x444>
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 8007ffe:	f242 0318 	movw	r3, #8216	; 0x2018
 8008002:	56f3      	ldrsb	r3, [r6, r3]
 8008004:	2b00      	cmp	r3, #0
 8008006:	f6bf aeda 	bge.w	8007dbe <SCSI_ProcessCmd+0x22>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 800800a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800800e:	4608      	mov	r0, r1
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	4798      	blx	r3
 8008014:	2800      	cmp	r0, #0
 8008016:	d1d2      	bne.n	8007fbe <SCSI_ProcessCmd+0x222>
      (params[3] << 16) | \
 8008018:	78fb      	ldrb	r3, [r7, #3]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800801a:	78ba      	ldrb	r2, [r7, #2]
      (params[3] << 16) | \
 800801c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800801e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
          params[5];
 8008022:	797a      	ldrb	r2, [r7, #5]
        (params[4] <<  8) | \
 8008024:	4313      	orrs	r3, r2
 8008026:	793a      	ldrb	r2, [r7, #4]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008028:	f242 0e64 	movw	lr, #8292	; 0x2064
        (params[4] <<  8) | \
 800802c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008030:	f846 300e 	str.w	r3, [r6, lr]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8008034:	79fa      	ldrb	r2, [r7, #7]
      params[8];  
 8008036:	7a39      	ldrb	r1, [r7, #8]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8008038:	f242 0c60 	movw	ip, #8288	; 0x2060
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 800803c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8008040:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 8008044:	f852 200c 	ldr.w	r2, [r2, ip]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8008048:	f242 0068 	movw	r0, #8296	; 0x2068
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 800804c:	185f      	adds	r7, r3, r1
 800804e:	4297      	cmp	r7, r2
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8008050:	5031      	str	r1, [r6, r0]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8008052:	f240 80b5 	bls.w	80081c0 <SCSI_ProcessCmd+0x424>
    SCSI_SenseCode(pdev,
 8008056:	2221      	movs	r2, #33	; 0x21
    SCSI_SenseCode(pdev, 
 8008058:	2105      	movs	r1, #5
 800805a:	e7b2      	b.n	8007fc2 <SCSI_ProcessCmd+0x226>
  USBD_LL_Transmit (pdev, 
 800805c:	b2bb      	uxth	r3, r7
 800805e:	4652      	mov	r2, sl
 8008060:	2181      	movs	r1, #129	; 0x81
 8008062:	4628      	mov	r0, r5
 8008064:	f7fb fa11 	bl	800348a <USBD_LL_Transmit>
  hmsc->scsi_blk_addr   += len; 
 8008068:	f856 3009 	ldr.w	r3, [r6, r9]
  hmsc->scsi_blk_len    -= len;  
 800806c:	f856 4008 	ldr.w	r4, [r6, r8]
  hmsc->csw.dDataResidue -= len;
 8008070:	f242 0234 	movw	r2, #8244	; 0x2034
  hmsc->scsi_blk_addr   += len; 
 8008074:	443b      	add	r3, r7
 8008076:	f846 3009 	str.w	r3, [r6, r9]
  hmsc->csw.dDataResidue -= len;
 800807a:	58b3      	ldr	r3, [r6, r2]
  hmsc->scsi_blk_len    -= len;  
 800807c:	1be4      	subs	r4, r4, r7
  hmsc->csw.dDataResidue -= len;
 800807e:	1bdf      	subs	r7, r3, r7
  hmsc->scsi_blk_len    -= len;  
 8008080:	f846 4008 	str.w	r4, [r6, r8]
  hmsc->csw.dDataResidue -= len;
 8008084:	50b7      	str	r7, [r6, r2]
  if (hmsc->scsi_blk_len == 0)
 8008086:	2c00      	cmp	r4, #0
 8008088:	f47f af46 	bne.w	8007f18 <SCSI_ProcessCmd+0x17c>
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800808c:	2303      	movs	r3, #3
 800808e:	7233      	strb	r3, [r6, #8]
 8008090:	e70d      	b.n	8007eae <SCSI_ProcessCmd+0x112>
      (params[3] << 16) | \
 8008092:	78fa      	ldrb	r2, [r7, #3]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008094:	78bb      	ldrb	r3, [r7, #2]
      (params[3] << 16) | \
 8008096:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008098:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
          params[5];
 800809c:	797b      	ldrb	r3, [r7, #5]
        (params[4] <<  8) | \
 800809e:	431a      	orrs	r2, r3
 80080a0:	793b      	ldrb	r3, [r7, #4]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80080a2:	f242 0e64 	movw	lr, #8292	; 0x2064
        (params[4] <<  8) | \
 80080a6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80080aa:	f846 200e 	str.w	r2, [r6, lr]
      params[8];  
 80080ae:	7a3b      	ldrb	r3, [r7, #8]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80080b0:	79f9      	ldrb	r1, [r7, #7]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80080b2:	f242 0c60 	movw	ip, #8288	; 0x2060
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80080b6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80080ba:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 80080be:	f853 300c 	ldr.w	r3, [r3, ip]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80080c2:	f242 0068 	movw	r0, #8296	; 0x2068
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80080c6:	1857      	adds	r7, r2, r1
 80080c8:	429f      	cmp	r7, r3
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80080ca:	5031      	str	r1, [r6, r0]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80080cc:	d8c3      	bhi.n	8008056 <SCSI_ProcessCmd+0x2ba>
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80080ce:	f242 035e 	movw	r3, #8286	; 0x205e
 80080d2:	5af3      	ldrh	r3, [r6, r3]
 80080d4:	435a      	muls	r2, r3
 80080d6:	f846 200e 	str.w	r2, [r6, lr]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80080da:	f242 0214 	movw	r2, #8212	; 0x2014
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80080de:	434b      	muls	r3, r1
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80080e0:	58b2      	ldr	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80080e2:	5033      	str	r3, [r6, r0]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	f47f ae6a 	bne.w	8007dbe <SCSI_ProcessCmd+0x22>
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 80080ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 80080ee:	f04f 0101 	mov.w	r1, #1
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 80080f2:	bf28      	it	cs
 80080f4:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 80080f8:	7231      	strb	r1, [r6, #8]
    USBD_LL_PrepareReceive (pdev,
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	f106 020c 	add.w	r2, r6, #12
 8008100:	4628      	mov	r0, r5
 8008102:	f7fb f9c9 	bl	8003498 <USBD_LL_PrepareReceive>
 8008106:	e6d2      	b.n	8007eae <SCSI_ProcessCmd+0x112>
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8008108:	f242 0968 	movw	r9, #8296	; 0x2068
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 800810c:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8008110:	f856 7009 	ldr.w	r7, [r6, r9]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8008114:	f8d0 b014 	ldr.w	fp, [r0, #20]
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8008118:	f242 035e 	movw	r3, #8286	; 0x205e
 800811c:	f242 0a64 	movw	sl, #8292	; 0x2064
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8008120:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
                              hmsc->bot_data, 
 8008124:	f106 080c 	add.w	r8, r6, #12
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8008128:	bf28      	it	cs
 800812a:	f44f 5700 	movcs.w	r7, #8192	; 0x2000
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 800812e:	5af2      	ldrh	r2, [r6, r3]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8008130:	f856 100a 	ldr.w	r1, [r6, sl]
                              len / hmsc->scsi_blk_size) < 0)
 8008134:	fbb7 f3f2 	udiv	r3, r7, r2
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8008138:	4620      	mov	r0, r4
 800813a:	fbb1 f2f2 	udiv	r2, r1, r2
 800813e:	b29b      	uxth	r3, r3
 8008140:	4641      	mov	r1, r8
 8008142:	47d8      	blx	fp
 8008144:	2800      	cmp	r0, #0
 8008146:	da01      	bge.n	800814c <SCSI_ProcessCmd+0x3b0>
    SCSI_SenseCode(pdev,
 8008148:	2203      	movs	r2, #3
 800814a:	e06e      	b.n	800822a <SCSI_ProcessCmd+0x48e>
  hmsc->scsi_blk_addr  += len; 
 800814c:	f856 300a 	ldr.w	r3, [r6, sl]
  hmsc->csw.dDataResidue -= len;
 8008150:	f242 0134 	movw	r1, #8244	; 0x2034
  hmsc->scsi_blk_addr  += len; 
 8008154:	443b      	add	r3, r7
 8008156:	f846 300a 	str.w	r3, [r6, sl]
  hmsc->csw.dDataResidue -= len;
 800815a:	5872      	ldr	r2, [r6, r1]
  hmsc->scsi_blk_len   -= len; 
 800815c:	f856 3009 	ldr.w	r3, [r6, r9]
 8008160:	1bdb      	subs	r3, r3, r7
  hmsc->csw.dDataResidue -= len;
 8008162:	1bd7      	subs	r7, r2, r7
  hmsc->scsi_blk_len   -= len; 
 8008164:	f846 3009 	str.w	r3, [r6, r9]
  hmsc->csw.dDataResidue -= len;
 8008168:	5077      	str	r7, [r6, r1]
  if (hmsc->scsi_blk_len == 0)
 800816a:	b923      	cbnz	r3, 8008176 <SCSI_ProcessCmd+0x3da>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800816c:	2100      	movs	r1, #0
 800816e:	4628      	mov	r0, r5
 8008170:	f7ff fd30 	bl	8007bd4 <MSC_BOT_SendCSW>
 8008174:	e6d0      	b.n	8007f18 <SCSI_ProcessCmd+0x17c>
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 8008176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800817a:	bf28      	it	cs
 800817c:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    USBD_LL_PrepareReceive (pdev,
 8008180:	b29b      	uxth	r3, r3
 8008182:	4642      	mov	r2, r8
 8008184:	2101      	movs	r1, #1
 8008186:	4628      	mov	r0, r5
 8008188:	f7fb f986 	bl	8003498 <USBD_LL_PrepareReceive>
 800818c:	e6c4      	b.n	8007f18 <SCSI_ProcessCmd+0x17c>
  if ((params[1]& 0x02) == 0x02) 
 800818e:	7854      	ldrb	r4, [r2, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8008190:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  if ((params[1]& 0x02) == 0x02) 
 8008194:	f014 0402 	ands.w	r4, r4, #2
 8008198:	d004      	beq.n	80081a4 <SCSI_ProcessCmd+0x408>
    SCSI_SenseCode (pdev,
 800819a:	2224      	movs	r2, #36	; 0x24
 800819c:	2105      	movs	r1, #5
    SCSI_SenseCode(pdev, 
 800819e:	f7ff fde5 	bl	8007d6c <SCSI_SenseCode.constprop.8>
 80081a2:	e680      	b.n	8007ea6 <SCSI_ProcessCmd+0x10a>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80081a4:	f242 0268 	movw	r2, #8296	; 0x2068
  if(SCSI_CheckAddressRange(pdev,
 80081a8:	f242 0164 	movw	r1, #8292	; 0x2064
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80081ac:	5a9a      	ldrh	r2, [r3, r2]
 80081ae:	5859      	ldr	r1, [r3, r1]
 80081b0:	440a      	add	r2, r1
 80081b2:	f242 0160 	movw	r1, #8288	; 0x2060
 80081b6:	5859      	ldr	r1, [r3, r1]
 80081b8:	428a      	cmp	r2, r1
 80081ba:	f67f ae0a 	bls.w	8007dd2 <SCSI_ProcessCmd+0x36>
 80081be:	e74a      	b.n	8008056 <SCSI_ProcessCmd+0x2ba>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 80081c0:	2202      	movs	r2, #2
 80081c2:	7232      	strb	r2, [r6, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80081c4:	f242 025e 	movw	r2, #8286	; 0x205e
 80081c8:	5ab2      	ldrh	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80081ca:	4351      	muls	r1, r2
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80081cc:	4353      	muls	r3, r2
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80081ce:	f242 0214 	movw	r2, #8212	; 0x2014
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80081d2:	f846 300e 	str.w	r3, [r6, lr]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80081d6:	58b2      	ldr	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80081d8:	5031      	str	r1, [r6, r0]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80081da:	4291      	cmp	r1, r2
 80081dc:	f47f adef 	bne.w	8007dbe <SCSI_ProcessCmd+0x22>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 80081e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081e4:	8173      	strh	r3, [r6, #10]
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80081e6:	f242 0868 	movw	r8, #8296	; 0x2068
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 80081ea:	f8d5 6218 	ldr.w	r6, [r5, #536]	; 0x218
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 80081ee:	f8d5 021c 	ldr.w	r0, [r5, #540]	; 0x21c
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80081f2:	f856 7008 	ldr.w	r7, [r6, r8]
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 80081f6:	f8d0 b010 	ldr.w	fp, [r0, #16]
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80081fa:	429f      	cmp	r7, r3
 80081fc:	bf28      	it	cs
 80081fe:	461f      	movcs	r7, r3
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8008200:	f242 0964 	movw	r9, #8292	; 0x2064
 8008204:	f242 035e 	movw	r3, #8286	; 0x205e
                              hmsc->bot_data, 
 8008208:	f106 0a0c 	add.w	sl, r6, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 800820c:	5af2      	ldrh	r2, [r6, r3]
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 800820e:	f856 1009 	ldr.w	r1, [r6, r9]
                              len / hmsc->scsi_blk_size) < 0)
 8008212:	fbb7 f3f2 	udiv	r3, r7, r2
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8008216:	4620      	mov	r0, r4
 8008218:	fbb1 f2f2 	udiv	r2, r1, r2
 800821c:	b29b      	uxth	r3, r3
 800821e:	4651      	mov	r1, sl
 8008220:	47d8      	blx	fp
 8008222:	2800      	cmp	r0, #0
 8008224:	f6bf af1a 	bge.w	800805c <SCSI_ProcessCmd+0x2c0>
    SCSI_SenseCode(pdev,
 8008228:	2211      	movs	r2, #17
    SCSI_SenseCode(pdev,
 800822a:	2104      	movs	r1, #4
 800822c:	e6c9      	b.n	8007fc2 <SCSI_ProcessCmd+0x226>
 800822e:	bf00      	nop
 8008230:	0800b7c8 	.word	0x0800b7c8
 8008234:	0800b7c8 	.word	0x0800b7c8
 8008238:	0800b7c0 	.word	0x0800b7c0

0800823c <SCSI_SenseCode>:
{
 800823c:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800823e:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8008242:	f242 055d 	movw	r5, #8285	; 0x205d
 8008246:	f242 063c 	movw	r6, #8252	; 0x203c
 800824a:	5d41      	ldrb	r1, [r0, r5]
 800824c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
  hmsc->scsi_sense_tail++;
 8008250:	3101      	adds	r1, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8008252:	55a2      	strb	r2, [r4, r6]
  hmsc->scsi_sense_tail++;
 8008254:	b2c9      	uxtb	r1, r1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8008256:	f504 5401 	add.w	r4, r4, #8256	; 0x2040
 800825a:	021b      	lsls	r3, r3, #8
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800825c:	2904      	cmp	r1, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800825e:	6023      	str	r3, [r4, #0]
    hmsc->scsi_sense_tail = 0;
 8008260:	bf0a      	itet	eq
 8008262:	2300      	moveq	r3, #0
  hmsc->scsi_sense_tail++;
 8008264:	5541      	strbne	r1, [r0, r5]
    hmsc->scsi_sense_tail = 0;
 8008266:	5543      	strbeq	r3, [r0, r5]
 8008268:	bd70      	pop	{r4, r5, r6, pc}

0800826a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800826a:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800826c:	b180      	cbz	r0, 8008290 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800826e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008272:	b113      	cbz	r3, 800827a <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8008274:	2300      	movs	r3, #0
 8008276:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800827a:	b109      	cbz	r1, 8008280 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800827c:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008280:	2301      	movs	r3, #1
 8008282:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8008286:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008288:	f7fb f87c 	bl	8003384 <USBD_LL_Init>

  return USBD_OK;
 800828c:	2000      	movs	r0, #0
 800828e:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8008290:	2002      	movs	r0, #2
}
 8008292:	bd08      	pop	{r3, pc}

08008294 <Battey_Charge_Mode>:

USBD_StatusTypeDef Battey_Charge_Mode(USBD_HandleTypeDef *pdev)
{
	if ( pdev->dev_state  == USBD_STATE_DEFAULT)
 8008294:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008298:	2b01      	cmp	r3, #1
		return USBD_OK;
	else
		return USBD_FAIL;

}
 800829a:	bf14      	ite	ne
 800829c:	2002      	movne	r0, #2
 800829e:	2000      	moveq	r0, #0
 80082a0:	4770      	bx	lr

080082a2 <USBD_DeInit>:
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
  /* Set Default State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80082a2:	2301      	movs	r3, #1
{
 80082a4:	b510      	push	{r4, lr}
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80082a6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80082aa:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80082ae:	7901      	ldrb	r1, [r0, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
{
 80082b2:	4604      	mov	r4, r0
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80082b4:	4798      	blx	r3
  
    /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 80082b6:	4620      	mov	r0, r4
 80082b8:	f7fb f8a0 	bl	80033fc <USBD_LL_Stop>
  
  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 80082bc:	4620      	mov	r0, r4
 80082be:	f7fb f88f 	bl	80033e0 <USBD_LL_DeInit>
  
  return USBD_OK;
}
 80082c2:	2000      	movs	r0, #0
 80082c4:	bd10      	pop	{r4, pc}

080082c6 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80082c6:	b119      	cbz	r1, 80082d0 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80082c8:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 80082cc:	2000      	movs	r0, #0
 80082ce:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80082d0:	2002      	movs	r0, #2
  }
  
  return status;
}
 80082d2:	4770      	bx	lr

080082d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80082d4:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80082d6:	f7fb f88a 	bl	80033ee <USBD_LL_Start>
  
  return USBD_OK;  
}
 80082da:	2000      	movs	r0, #0
 80082dc:	bd08      	pop	{r3, pc}

080082de <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
{
 80082de:	b510      	push	{r4, lr}
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80082e0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80082e4:	7901      	ldrb	r1, [r0, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
{
 80082e8:	4604      	mov	r4, r0
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80082ea:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 80082ec:	4620      	mov	r0, r4
 80082ee:	f7fb f885 	bl	80033fc <USBD_LL_Stop>
  
  return USBD_OK;  
}
 80082f2:	2000      	movs	r0, #0
 80082f4:	bd10      	pop	{r4, pc}

080082f6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082f6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 80082f8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80082fc:	b90b      	cbnz	r3, 8008302 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80082fe:	2002      	movs	r0, #2
 8008300:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4798      	blx	r3
 8008306:	2800      	cmp	r0, #0
 8008308:	d1f9      	bne.n	80082fe <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800830a:	bd08      	pop	{r3, pc}

0800830c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800830c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800830e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	4798      	blx	r3
  return USBD_OK;
}
 8008316:	2000      	movs	r0, #0
 8008318:	bd08      	pop	{r3, pc}

0800831a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800831a:	b538      	push	{r3, r4, r5, lr}
 800831c:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800831e:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8008322:	4628      	mov	r0, r5
 8008324:	f000 fa75 	bl	8008812 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8008328:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800832a:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 800832e:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8008332:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8008336:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 800833a:	f001 031f 	and.w	r3, r1, #31
 800833e:	2b01      	cmp	r3, #1
 8008340:	d00e      	beq.n	8008360 <USBD_LL_SetupStage+0x46>
 8008342:	d307      	bcc.n	8008354 <USBD_LL_SetupStage+0x3a>
 8008344:	2b02      	cmp	r3, #2
 8008346:	d010      	beq.n	800836a <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8008348:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800834c:	4620      	mov	r0, r4
 800834e:	f7fb f874 	bl	800343a <USBD_LL_StallEP>
    break;
 8008352:	e003      	b.n	800835c <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8008354:	4629      	mov	r1, r5
 8008356:	4620      	mov	r0, r4
 8008358:	f000 f8e6 	bl	8008528 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 800835c:	2000      	movs	r0, #0
 800835e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8008360:	4629      	mov	r1, r5
 8008362:	4620      	mov	r0, r4
 8008364:	f000 f9da 	bl	800871c <USBD_StdItfReq>
    break;
 8008368:	e7f8      	b.n	800835c <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 800836a:	4629      	mov	r1, r5
 800836c:	4620      	mov	r0, r4
 800836e:	f000 f9ed 	bl	800874c <USBD_StdEPReq>
    break;
 8008372:	e7f3      	b.n	800835c <USBD_LL_SetupStage+0x42>

08008374 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	4604      	mov	r4, r0
 8008378:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800837a:	bb11      	cbnz	r1, 80083c2 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800837c:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8008380:	2b03      	cmp	r3, #3
 8008382:	d10f      	bne.n	80083a4 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8008384:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8008388:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 800838c:	4293      	cmp	r3, r2
 800838e:	d90b      	bls.n	80083a8 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8008390:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8008392:	429a      	cmp	r2, r3
 8008394:	bf28      	it	cs
 8008396:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8008398:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 800839c:	b292      	uxth	r2, r2
 800839e:	4629      	mov	r1, r5
 80083a0:	f000 fa96 	bl	80088d0 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80083a4:	2000      	movs	r0, #0
 80083a6:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80083a8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	b123      	cbz	r3, 80083ba <USBD_LL_DataOutStage+0x46>
 80083b0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80083b4:	2a03      	cmp	r2, #3
 80083b6:	d100      	bne.n	80083ba <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 80083b8:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80083ba:	4620      	mov	r0, r4
 80083bc:	f000 fa90 	bl	80088e0 <USBD_CtlSendStatus>
 80083c0:	e7f0      	b.n	80083a4 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 80083c2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0eb      	beq.n	80083a4 <USBD_LL_DataOutStage+0x30>
 80083cc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80083d0:	2a03      	cmp	r2, #3
 80083d2:	d1e7      	bne.n	80083a4 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 80083d4:	4798      	blx	r3
 80083d6:	e7e5      	b.n	80083a4 <USBD_LL_DataOutStage+0x30>

080083d8 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80083d8:	b570      	push	{r4, r5, r6, lr}
 80083da:	4613      	mov	r3, r2
 80083dc:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80083de:	460e      	mov	r6, r1
 80083e0:	2900      	cmp	r1, #0
 80083e2:	d13d      	bne.n	8008460 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80083e4:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80083e8:	2a02      	cmp	r2, #2
 80083ea:	d10f      	bne.n	800840c <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 80083ec:	69c5      	ldr	r5, [r0, #28]
 80083ee:	6a02      	ldr	r2, [r0, #32]
 80083f0:	4295      	cmp	r5, r2
 80083f2:	d914      	bls.n	800841e <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 80083f4:	1aaa      	subs	r2, r5, r2
 80083f6:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 80083f8:	4619      	mov	r1, r3
 80083fa:	b292      	uxth	r2, r2
 80083fc:	f000 fa51 	bl	80088a2 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8008400:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8008402:	461a      	mov	r2, r3
 8008404:	4619      	mov	r1, r3
 8008406:	4620      	mov	r0, r4
 8008408:	f7fb f846 	bl	8003498 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800840c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8008410:	2b01      	cmp	r3, #1
 8008412:	d102      	bne.n	800841a <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800841a:	2000      	movs	r0, #0
 800841c:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800841e:	6983      	ldr	r3, [r0, #24]
 8008420:	fbb3 f5f2 	udiv	r5, r3, r2
 8008424:	fb02 3515 	mls	r5, r2, r5, r3
 8008428:	b965      	cbnz	r5, 8008444 <USBD_LL_DataInStage+0x6c>
 800842a:	429a      	cmp	r2, r3
 800842c:	d80a      	bhi.n	8008444 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 800842e:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8008432:	4293      	cmp	r3, r2
 8008434:	d206      	bcs.n	8008444 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8008436:	462a      	mov	r2, r5
 8008438:	f000 fa33 	bl	80088a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800843c:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8008440:	462b      	mov	r3, r5
 8008442:	e7de      	b.n	8008402 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008444:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	b12b      	cbz	r3, 8008458 <USBD_LL_DataInStage+0x80>
 800844c:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8008450:	2a03      	cmp	r2, #3
 8008452:	d101      	bne.n	8008458 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8008454:	4620      	mov	r0, r4
 8008456:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8008458:	4620      	mov	r0, r4
 800845a:	f000 fa4c 	bl	80088f6 <USBD_CtlReceiveStatus>
 800845e:	e7d5      	b.n	800840c <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8008460:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d0d7      	beq.n	800841a <USBD_LL_DataInStage+0x42>
 800846a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800846e:	2a03      	cmp	r2, #3
 8008470:	d1d3      	bne.n	800841a <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8008472:	4798      	blx	r3
 8008474:	e7d1      	b.n	800841a <USBD_LL_DataInStage+0x42>

08008476 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008476:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8008478:	2200      	movs	r2, #0
{
 800847a:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 800847c:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800847e:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8008480:	2340      	movs	r3, #64	; 0x40
 8008482:	f7fa ffc2 	bl	800340a <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8008486:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008488:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 800848c:	2200      	movs	r2, #0
 800848e:	2180      	movs	r1, #128	; 0x80
 8008490:	4620      	mov	r0, r4
 8008492:	f7fa ffba 	bl	800340a <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008496:	2301      	movs	r3, #1
 8008498:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800849c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80084a0:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80084a2:	b12b      	cbz	r3, 80084b0 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80084a4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80084a8:	7921      	ldrb	r1, [r4, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	4620      	mov	r0, r4
 80084ae:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80084b0:	2000      	movs	r0, #0
 80084b2:	bd38      	pop	{r3, r4, r5, pc}

080084b4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80084b4:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80084b6:	2000      	movs	r0, #0
 80084b8:	4770      	bx	lr

080084ba <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80084ba:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80084be:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80084c2:	2304      	movs	r3, #4
 80084c4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80084c8:	2000      	movs	r0, #0
 80084ca:	4770      	bx	lr

080084cc <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80084cc:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 80084d0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80084d4:	2000      	movs	r0, #0
 80084d6:	4770      	bx	lr

080084d8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80084d8:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80084da:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80084de:	2a03      	cmp	r2, #3
 80084e0:	d104      	bne.n	80084ec <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 80084e2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	b103      	cbz	r3, 80084ec <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80084ea:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80084ec:	2000      	movs	r0, #0
 80084ee:	bd08      	pop	{r3, pc}

080084f0 <USBD_LL_IsoINIncomplete>:
 80084f0:	2000      	movs	r0, #0
 80084f2:	4770      	bx	lr

080084f4 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 80084f4:	2000      	movs	r0, #0
 80084f6:	4770      	bx	lr

080084f8 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 80084f8:	2000      	movs	r0, #0
 80084fa:	4770      	bx	lr

080084fc <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80084fc:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084fe:	2201      	movs	r2, #1
 8008500:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008504:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8008508:	7901      	ldrb	r1, [r0, #4]
 800850a:	6852      	ldr	r2, [r2, #4]
 800850c:	4790      	blx	r2
   
  return USBD_OK;
}
 800850e:	2000      	movs	r0, #0
 8008510:	bd08      	pop	{r3, pc}

08008512 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8008512:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8008514:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8008516:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8008518:	f7fa ff8f 	bl	800343a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800851c:	4620      	mov	r0, r4
 800851e:	2100      	movs	r1, #0
}
 8008520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8008524:	f7fa bf89 	b.w	800343a <USBD_LL_StallEP>

08008528 <USBD_StdDevReq>:
{
 8008528:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 800852a:	784b      	ldrb	r3, [r1, #1]
{
 800852c:	4604      	mov	r4, r0
 800852e:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8008530:	2b09      	cmp	r3, #9
 8008532:	d879      	bhi.n	8008628 <USBD_StdDevReq+0x100>
 8008534:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008538:	00e500c9 	.word	0x00e500c9
 800853c:	00d90078 	.word	0x00d90078
 8008540:	006d0078 	.word	0x006d0078
 8008544:	0078000a 	.word	0x0078000a
 8008548:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 800854c:	884b      	ldrh	r3, [r1, #2]
 800854e:	0a1a      	lsrs	r2, r3, #8
 8008550:	3a01      	subs	r2, #1
 8008552:	2a06      	cmp	r2, #6
 8008554:	d868      	bhi.n	8008628 <USBD_StdDevReq+0x100>
 8008556:	e8df f002 	tbb	[pc, r2]
 800855a:	1c04      	.short	0x1c04
 800855c:	49676729 	.word	0x49676729
 8008560:	52          	.byte	0x52
 8008561:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008562:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8008566:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8008568:	7c20      	ldrb	r0, [r4, #16]
 800856a:	f10d 0106 	add.w	r1, sp, #6
 800856e:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8008570:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008574:	2a00      	cmp	r2, #0
 8008576:	d067      	beq.n	8008648 <USBD_StdDevReq+0x120>
 8008578:	88eb      	ldrh	r3, [r5, #6]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d064      	beq.n	8008648 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800857e:	429a      	cmp	r2, r3
 8008580:	bf28      	it	cs
 8008582:	461a      	movcs	r2, r3
 8008584:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8008588:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 800858a:	4620      	mov	r0, r4
 800858c:	f000 f97c 	bl	8008888 <USBD_CtlSendData>
 8008590:	e05a      	b.n	8008648 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8008592:	7c02      	ldrb	r2, [r0, #16]
 8008594:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008598:	b932      	cbnz	r2, 80085a8 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800859a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800859c:	f10d 0006 	add.w	r0, sp, #6
 80085a0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085a2:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80085a4:	7043      	strb	r3, [r0, #1]
 80085a6:	e7e3      	b.n	8008570 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80085a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085aa:	e7f7      	b.n	800859c <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b05      	cmp	r3, #5
 80085b0:	d83a      	bhi.n	8008628 <USBD_StdDevReq+0x100>
 80085b2:	e8df f003 	tbb	[pc, r3]
 80085b6:	0703      	.short	0x0703
 80085b8:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80085bc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	e7d1      	b.n	8008568 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085c4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	e7cd      	b.n	8008568 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085cc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	e7c9      	b.n	8008568 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085d4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	e7c5      	b.n	8008568 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085dc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	e7c1      	b.n	8008568 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085e4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	e7bd      	b.n	8008568 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80085ec:	7c03      	ldrb	r3, [r0, #16]
 80085ee:	b9db      	cbnz	r3, 8008628 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80085f0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80085f4:	f10d 0006 	add.w	r0, sp, #6
 80085f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085fa:	4798      	blx	r3
 80085fc:	e7b8      	b.n	8008570 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80085fe:	7c03      	ldrb	r3, [r0, #16]
 8008600:	b993      	cbnz	r3, 8008628 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008602:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008606:	f10d 0006 	add.w	r0, sp, #6
 800860a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800860e:	2307      	movs	r3, #7
 8008610:	e7c8      	b.n	80085a4 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8008612:	888b      	ldrh	r3, [r1, #4]
 8008614:	b943      	cbnz	r3, 8008628 <USBD_StdDevReq+0x100>
 8008616:	88cb      	ldrh	r3, [r1, #6]
 8008618:	b933      	cbnz	r3, 8008628 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800861a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800861e:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8008620:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8008622:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8008626:	d103      	bne.n	8008630 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8008628:	4620      	mov	r0, r4
 800862a:	f7ff ff72 	bl	8008512 <USBD_CtlError.constprop.0>
    break;
 800862e:	e00b      	b.n	8008648 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8008630:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8008634:	4629      	mov	r1, r5
 8008636:	f7fa ff21 	bl	800347c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800863a:	4620      	mov	r0, r4
 800863c:	f000 f950 	bl	80088e0 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8008640:	b12d      	cbz	r5, 800864e <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8008642:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8008644:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8008648:	2000      	movs	r0, #0
 800864a:	b003      	add	sp, #12
 800864c:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800864e:	2301      	movs	r3, #1
 8008650:	e7f8      	b.n	8008644 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8008652:	7889      	ldrb	r1, [r1, #2]
 8008654:	4d30      	ldr	r5, [pc, #192]	; (8008718 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8008656:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8008658:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800865a:	d8e5      	bhi.n	8008628 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 800865c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008660:	2b02      	cmp	r3, #2
 8008662:	d00c      	beq.n	800867e <USBD_StdDevReq+0x156>
 8008664:	2b03      	cmp	r3, #3
 8008666:	d1df      	bne.n	8008628 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8008668:	b9b1      	cbnz	r1, 8008698 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800866a:	2302      	movs	r3, #2
 800866c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8008670:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8008672:	f7ff fe4b 	bl	800830c <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8008676:	4620      	mov	r0, r4
 8008678:	f000 f932 	bl	80088e0 <USBD_CtlSendStatus>
 800867c:	e7e4      	b.n	8008648 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800867e:	2900      	cmp	r1, #0
 8008680:	d0f9      	beq.n	8008676 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8008682:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008684:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8008686:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008688:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800868c:	4620      	mov	r0, r4
 800868e:	f7ff fe32 	bl	80082f6 <USBD_SetClassConfig>
 8008692:	2802      	cmp	r0, #2
 8008694:	d1ef      	bne.n	8008676 <USBD_StdDevReq+0x14e>
 8008696:	e7c7      	b.n	8008628 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8008698:	6841      	ldr	r1, [r0, #4]
 800869a:	2901      	cmp	r1, #1
 800869c:	d0eb      	beq.n	8008676 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800869e:	b2c9      	uxtb	r1, r1
 80086a0:	f7ff fe34 	bl	800830c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80086a4:	7829      	ldrb	r1, [r5, #0]
 80086a6:	6061      	str	r1, [r4, #4]
 80086a8:	e7f0      	b.n	800868c <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 80086aa:	88ca      	ldrh	r2, [r1, #6]
 80086ac:	2a01      	cmp	r2, #1
 80086ae:	d1bb      	bne.n	8008628 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 80086b0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d003      	beq.n	80086c0 <USBD_StdDevReq+0x198>
 80086b8:	2b03      	cmp	r3, #3
 80086ba:	d1b5      	bne.n	8008628 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 80086bc:	1d01      	adds	r1, r0, #4
 80086be:	e764      	b.n	800858a <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 80086c0:	4601      	mov	r1, r0
 80086c2:	2300      	movs	r3, #0
 80086c4:	f841 3f08 	str.w	r3, [r1, #8]!
 80086c8:	e75f      	b.n	800858a <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 80086ca:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80086ce:	3b02      	subs	r3, #2
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d8a9      	bhi.n	8008628 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80086d4:	2301      	movs	r3, #1
 80086d6:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80086d8:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80086dc:	b10b      	cbz	r3, 80086e2 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80086de:	2303      	movs	r3, #3
 80086e0:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 80086e2:	2202      	movs	r2, #2
 80086e4:	f104 010c 	add.w	r1, r4, #12
 80086e8:	e74f      	b.n	800858a <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086ea:	884b      	ldrh	r3, [r1, #2]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d1ab      	bne.n	8008648 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80086f0:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80086f4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80086f8:	4629      	mov	r1, r5
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	4620      	mov	r0, r4
 80086fe:	4798      	blx	r3
 8008700:	e7b9      	b.n	8008676 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8008702:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008706:	3b02      	subs	r3, #2
 8008708:	2b01      	cmp	r3, #1
 800870a:	d88d      	bhi.n	8008628 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800870c:	884b      	ldrh	r3, [r1, #2]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d19a      	bne.n	8008648 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8008712:	2300      	movs	r3, #0
 8008714:	e7ec      	b.n	80086f0 <USBD_StdDevReq+0x1c8>
 8008716:	bf00      	nop
 8008718:	2000058a 	.word	0x2000058a

0800871c <USBD_StdItfReq>:
{
 800871c:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800871e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008722:	2b03      	cmp	r3, #3
{
 8008724:	4604      	mov	r4, r0
 8008726:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8008728:	d10d      	bne.n	8008746 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800872a:	790b      	ldrb	r3, [r1, #4]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d80a      	bhi.n	8008746 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8008730:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8008738:	88eb      	ldrh	r3, [r5, #6]
 800873a:	b913      	cbnz	r3, 8008742 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 800873c:	4620      	mov	r0, r4
 800873e:	f000 f8cf 	bl	80088e0 <USBD_CtlSendStatus>
}
 8008742:	2000      	movs	r0, #0
 8008744:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8008746:	f7ff fee4 	bl	8008512 <USBD_CtlError.constprop.0>
    break;
 800874a:	e7fa      	b.n	8008742 <USBD_StdItfReq+0x26>

0800874c <USBD_StdEPReq>:
{
 800874c:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 800874e:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8008750:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8008752:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8008756:	2a20      	cmp	r2, #32
{
 8008758:	4604      	mov	r4, r0
 800875a:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800875c:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 800875e:	d105      	bne.n	800876c <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8008760:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	4798      	blx	r3
}
 8008768:	2000      	movs	r0, #0
 800876a:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 800876c:	784a      	ldrb	r2, [r1, #1]
 800876e:	2a01      	cmp	r2, #1
 8008770:	d01c      	beq.n	80087ac <USBD_StdEPReq+0x60>
 8008772:	d32a      	bcc.n	80087ca <USBD_StdEPReq+0x7e>
 8008774:	2a03      	cmp	r2, #3
 8008776:	d1f7      	bne.n	8008768 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8008778:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800877c:	2a02      	cmp	r2, #2
 800877e:	d040      	beq.n	8008802 <USBD_StdEPReq+0xb6>
 8008780:	2a03      	cmp	r2, #3
 8008782:	d002      	beq.n	800878a <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8008784:	f7ff fec5 	bl	8008512 <USBD_CtlError.constprop.0>
      break;
 8008788:	e7ee      	b.n	8008768 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800878a:	884a      	ldrh	r2, [r1, #2]
 800878c:	b922      	cbnz	r2, 8008798 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800878e:	065e      	lsls	r6, r3, #25
 8008790:	d002      	beq.n	8008798 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8008792:	4619      	mov	r1, r3
 8008794:	f7fa fe51 	bl	800343a <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8008798:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800879c:	4629      	mov	r1, r5
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	4620      	mov	r0, r4
 80087a2:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80087a4:	4620      	mov	r0, r4
 80087a6:	f000 f89b 	bl	80088e0 <USBD_CtlSendStatus>
 80087aa:	e7dd      	b.n	8008768 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80087ac:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80087b0:	2a02      	cmp	r2, #2
 80087b2:	d026      	beq.n	8008802 <USBD_StdEPReq+0xb6>
 80087b4:	2a03      	cmp	r2, #3
 80087b6:	d1e5      	bne.n	8008784 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80087b8:	884a      	ldrh	r2, [r1, #2]
 80087ba:	2a00      	cmp	r2, #0
 80087bc:	d1d4      	bne.n	8008768 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80087be:	0659      	lsls	r1, r3, #25
 80087c0:	d0f0      	beq.n	80087a4 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80087c2:	4619      	mov	r1, r3
 80087c4:	f7fa fe40 	bl	8003448 <USBD_LL_ClearStallEP>
 80087c8:	e7e6      	b.n	8008798 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80087ca:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80087ce:	2a02      	cmp	r2, #2
 80087d0:	d017      	beq.n	8008802 <USBD_StdEPReq+0xb6>
 80087d2:	2a03      	cmp	r2, #3
 80087d4:	d1d6      	bne.n	8008784 <USBD_StdEPReq+0x38>
 80087d6:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80087da:	f016 0f80 	tst.w	r6, #128	; 0x80
 80087de:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80087e2:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80087e4:	bf14      	ite	ne
 80087e6:	3514      	addne	r5, #20
 80087e8:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80087ec:	f7fa fe33 	bl	8003456 <USBD_LL_IsStallEP>
 80087f0:	b168      	cbz	r0, 800880e <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 80087f2:	2301      	movs	r3, #1
 80087f4:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 80087f6:	2202      	movs	r2, #2
 80087f8:	4629      	mov	r1, r5
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 f844 	bl	8008888 <USBD_CtlSendData>
      break;
 8008800:	e7b2      	b.n	8008768 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8008802:	065a      	lsls	r2, r3, #25
 8008804:	d0b0      	beq.n	8008768 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8008806:	4619      	mov	r1, r3
 8008808:	f7fa fe17 	bl	800343a <USBD_LL_StallEP>
 800880c:	e7ac      	b.n	8008768 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 800880e:	6028      	str	r0, [r5, #0]
 8008810:	e7f1      	b.n	80087f6 <USBD_StdEPReq+0xaa>

08008812 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008812:	780b      	ldrb	r3, [r1, #0]
 8008814:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008816:	784b      	ldrb	r3, [r1, #1]
 8008818:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800881a:	78ca      	ldrb	r2, [r1, #3]
 800881c:	788b      	ldrb	r3, [r1, #2]
 800881e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008822:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008824:	794a      	ldrb	r2, [r1, #5]
 8008826:	790b      	ldrb	r3, [r1, #4]
 8008828:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800882c:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800882e:	79ca      	ldrb	r2, [r1, #7]
 8008830:	798b      	ldrb	r3, [r1, #6]
 8008832:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008836:	80c3      	strh	r3, [r0, #6]
 8008838:	4770      	bx	lr

0800883a <USBD_CtlError>:
{
 800883a:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 800883c:	2180      	movs	r1, #128	; 0x80
{
 800883e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8008840:	f7fa fdfb 	bl	800343a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8008844:	4620      	mov	r0, r4
 8008846:	2100      	movs	r1, #0
}
 8008848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800884c:	f7fa bdf5 	b.w	800343a <USBD_LL_StallEP>

08008850 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008850:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8008852:	b188      	cbz	r0, 8008878 <USBD_GetString+0x28>
 8008854:	4605      	mov	r5, r0
 8008856:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8008858:	f815 4b01 	ldrb.w	r4, [r5], #1
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2c00      	cmp	r4, #0
 8008860:	d1f9      	bne.n	8008856 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	3302      	adds	r3, #2
 8008866:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8008868:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800886a:	2303      	movs	r3, #3
 800886c:	704b      	strb	r3, [r1, #1]
 800886e:	3801      	subs	r0, #1
 8008870:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8008872:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008876:	b905      	cbnz	r5, 800887a <USBD_GetString+0x2a>
 8008878:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800887a:	1c5a      	adds	r2, r3, #1
 800887c:	b2d2      	uxtb	r2, r2
 800887e:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8008880:	3302      	adds	r3, #2
 8008882:	b2db      	uxtb	r3, r3
 8008884:	548c      	strb	r4, [r1, r2]
 8008886:	e7f4      	b.n	8008872 <USBD_GetString+0x22>

08008888 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8008888:	b510      	push	{r4, lr}
 800888a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800888c:	2202      	movs	r2, #2
 800888e:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8008892:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8008894:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8008896:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8008898:	2100      	movs	r1, #0
 800889a:	f7fa fdf6 	bl	800348a <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800889e:	2000      	movs	r0, #0
 80088a0:	bd10      	pop	{r4, pc}

080088a2 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80088a2:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80088a4:	4613      	mov	r3, r2
 80088a6:	460a      	mov	r2, r1
 80088a8:	2100      	movs	r1, #0
 80088aa:	f7fa fdee 	bl	800348a <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80088ae:	2000      	movs	r0, #0
 80088b0:	bd08      	pop	{r3, pc}

080088b2 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80088b2:	b510      	push	{r4, lr}
 80088b4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80088b6:	2203      	movs	r2, #3
 80088b8:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80088bc:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80088c0:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80088c2:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 80088c6:	2100      	movs	r1, #0
 80088c8:	f7fa fde6 	bl	8003498 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80088cc:	2000      	movs	r0, #0
 80088ce:	bd10      	pop	{r4, pc}

080088d0 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80088d0:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80088d2:	4613      	mov	r3, r2
 80088d4:	460a      	mov	r2, r1
 80088d6:	2100      	movs	r1, #0
 80088d8:	f7fa fdde 	bl	8003498 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80088dc:	2000      	movs	r0, #0
 80088de:	bd08      	pop	{r3, pc}

080088e0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80088e0:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80088e2:	2304      	movs	r3, #4
 80088e4:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80088e8:	2300      	movs	r3, #0
 80088ea:	461a      	mov	r2, r3
 80088ec:	4619      	mov	r1, r3
 80088ee:	f7fa fdcc 	bl	800348a <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80088f2:	2000      	movs	r0, #0
 80088f4:	bd08      	pop	{r3, pc}

080088f6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80088f6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80088f8:	2305      	movs	r3, #5
 80088fa:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80088fe:	2300      	movs	r3, #0
 8008900:	461a      	mov	r2, r3
 8008902:	4619      	mov	r1, r3
 8008904:	f7fa fdc8 	bl	8003498 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8008908:	2000      	movs	r0, #0
 800890a:	bd08      	pop	{r3, pc}

0800890c <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800890c:	4b03      	ldr	r3, [pc, #12]	; (800891c <disk_status+0x10>)
 800890e:	181a      	adds	r2, r3, r0
 8008910:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008914:	7a10      	ldrb	r0, [r2, #8]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	4718      	bx	r3
 800891c:	200005ac 	.word	0x200005ac

08008920 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8008920:	4b06      	ldr	r3, [pc, #24]	; (800893c <disk_initialize+0x1c>)
 8008922:	5c1a      	ldrb	r2, [r3, r0]
 8008924:	b942      	cbnz	r2, 8008938 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8008926:	2201      	movs	r2, #1
 8008928:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800892a:	181a      	adds	r2, r3, r0
 800892c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008930:	7a10      	ldrb	r0, [r2, #8]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4718      	bx	r3
  }
  return stat;
}
 8008938:	2000      	movs	r0, #0
 800893a:	4770      	bx	lr
 800893c:	200005ac 	.word	0x200005ac

08008940 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008940:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008942:	4c05      	ldr	r4, [pc, #20]	; (8008958 <disk_read+0x18>)
 8008944:	1825      	adds	r5, r4, r0
 8008946:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800894a:	6860      	ldr	r0, [r4, #4]
 800894c:	6884      	ldr	r4, [r0, #8]
 800894e:	7a28      	ldrb	r0, [r5, #8]
 8008950:	46a4      	mov	ip, r4
  return res;
}
 8008952:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008954:	4760      	bx	ip
 8008956:	bf00      	nop
 8008958:	200005ac 	.word	0x200005ac

0800895c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800895c:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800895e:	4c05      	ldr	r4, [pc, #20]	; (8008974 <disk_write+0x18>)
 8008960:	1825      	adds	r5, r4, r0
 8008962:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008966:	6860      	ldr	r0, [r4, #4]
 8008968:	68c4      	ldr	r4, [r0, #12]
 800896a:	7a28      	ldrb	r0, [r5, #8]
 800896c:	46a4      	mov	ip, r4
  return res;
}
 800896e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008970:	4760      	bx	ip
 8008972:	bf00      	nop
 8008974:	200005ac 	.word	0x200005ac

08008978 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008978:	4b05      	ldr	r3, [pc, #20]	; (8008990 <disk_ioctl+0x18>)
{
 800897a:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800897c:	181c      	adds	r4, r3, r0
 800897e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008982:	7a20      	ldrb	r0, [r4, #8]
 8008984:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8008986:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	4718      	bx	r3
 800898e:	bf00      	nop
 8008990:	200005ac 	.word	0x200005ac

08008994 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008994:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8008996:	4c06      	ldr	r4, [pc, #24]	; (80089b0 <SD_initialize+0x1c>)
 8008998:	2301      	movs	r3, #1
 800899a:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800899c:	f7f7 feb4 	bl	8000708 <BSP_SD_Init>
 80089a0:	4623      	mov	r3, r4
 80089a2:	b918      	cbnz	r0, 80089ac <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 80089a4:	7822      	ldrb	r2, [r4, #0]
 80089a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80089aa:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 80089ac:	7818      	ldrb	r0, [r3, #0]
}
 80089ae:	bd10      	pop	{r4, pc}
 80089b0:	20000298 	.word	0x20000298

080089b4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80089b4:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80089b6:	4c06      	ldr	r4, [pc, #24]	; (80089d0 <SD_status+0x1c>)
 80089b8:	2301      	movs	r3, #1
 80089ba:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetStatus() == MSD_OK)
 80089bc:	f7f7 fe0e 	bl	80005dc <BSP_SD_GetStatus>
 80089c0:	4623      	mov	r3, r4
 80089c2:	b918      	cbnz	r0, 80089cc <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 80089c4:	7822      	ldrb	r2, [r4, #0]
 80089c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80089ca:	7022      	strb	r2, [r4, #0]
  }
  
  return Stat;
 80089cc:	7818      	ldrb	r0, [r3, #0]
}
 80089ce:	bd10      	pop	{r4, pc}
 80089d0:	20000298 	.word	0x20000298

080089d4 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80089d4:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80089d6:	9301      	str	r3, [sp, #4]
 80089d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	0252      	lsls	r2, r2, #9
 80089e0:	2300      	movs	r3, #0
 80089e2:	4608      	mov	r0, r1
 80089e4:	f7f7 fe38 	bl	8000658 <BSP_SD_ReadBlocks_DMA>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 80089e8:	3000      	adds	r0, #0
 80089ea:	bf18      	it	ne
 80089ec:	2001      	movne	r0, #1
 80089ee:	b003      	add	sp, #12
 80089f0:	f85d fb04 	ldr.w	pc, [sp], #4

080089f4 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80089f4:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80089f6:	9301      	str	r3, [sp, #4]
 80089f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	0252      	lsls	r2, r2, #9
 8008a00:	2300      	movs	r3, #0
 8008a02:	4608      	mov	r0, r1
 8008a04:	f7f7 ff00 	bl	8000808 <BSP_SD_WriteBlocks_DMA>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 8008a08:	3000      	adds	r0, #0
 8008a0a:	bf18      	it	ne
 8008a0c:	2001      	movne	r0, #1
 8008a0e:	b003      	add	sp, #12
 8008a10:	f85d fb04 	ldr.w	pc, [sp], #4

08008a14 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008a14:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008a16:	4b12      	ldr	r3, [pc, #72]	; (8008a60 <SD_ioctl+0x4c>)
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	07db      	lsls	r3, r3, #31
{
 8008a1c:	b096      	sub	sp, #88	; 0x58
 8008a1e:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008a20:	d41c      	bmi.n	8008a5c <SD_ioctl+0x48>
  
  switch (cmd)
 8008a22:	2903      	cmp	r1, #3
 8008a24:	d803      	bhi.n	8008a2e <SD_ioctl+0x1a>
 8008a26:	e8df f001 	tbb	[pc, r1]
 8008a2a:	050e      	.short	0x050e
 8008a2c:	1410      	.short	0x1410
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = BLOCK_SIZE;
    break;
  
  default:
    res = RES_PARERR;
 8008a2e:	2004      	movs	r0, #4
  }
  
  return res;
}
 8008a30:	b016      	add	sp, #88	; 0x58
 8008a32:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8008a34:	4668      	mov	r0, sp
 8008a36:	f7f7 fdd7 	bl	80005e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.CardCapacity / BLOCK_SIZE;
 8008a3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a3e:	0a5b      	lsrs	r3, r3, #9
 8008a40:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008a44:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8008a46:	2000      	movs	r0, #0
 8008a48:	e7f2      	b.n	8008a30 <SD_ioctl+0x1c>
    *(WORD*)buff = BLOCK_SIZE;
 8008a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a4e:	8013      	strh	r3, [r2, #0]
 8008a50:	e7f9      	b.n	8008a46 <SD_ioctl+0x32>
    *(DWORD*)buff = BLOCK_SIZE;
 8008a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a56:	6013      	str	r3, [r2, #0]
  DRESULT res = RES_ERROR;
 8008a58:	2001      	movs	r0, #1
    break;
 8008a5a:	e7e9      	b.n	8008a30 <SD_ioctl+0x1c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008a5c:	2003      	movs	r0, #3
 8008a5e:	e7e7      	b.n	8008a30 <SD_ioctl+0x1c>
 8008a60:	20000298 	.word	0x20000298

08008a64 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008a64:	3801      	subs	r0, #1
 8008a66:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8008a68:	4291      	cmp	r1, r2
 8008a6a:	d100      	bne.n	8008a6e <mem_cpy+0xa>
		*d++ = *s++;
}
 8008a6c:	4770      	bx	lr
		*d++ = *s++;
 8008a6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a72:	f800 3f01 	strb.w	r3, [r0, #1]!
 8008a76:	e7f7      	b.n	8008a68 <mem_cpy+0x4>

08008a78 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008a78:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8008a7a:	4290      	cmp	r0, r2
 8008a7c:	d100      	bne.n	8008a80 <mem_set+0x8>
		*d++ = (BYTE)val;
}
 8008a7e:	4770      	bx	lr
		*d++ = (BYTE)val;
 8008a80:	f800 1b01 	strb.w	r1, [r0], #1
 8008a84:	e7f9      	b.n	8008a7a <mem_set+0x2>
	...

08008a88 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008a88:	4a17      	ldr	r2, [pc, #92]	; (8008ae8 <chk_lock+0x60>)
 8008a8a:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008a8c:	2400      	movs	r4, #0
 8008a8e:	4623      	mov	r3, r4
 8008a90:	4616      	mov	r6, r2
		if (Files[i].fs) {	/* Existing entry */
 8008a92:	6815      	ldr	r5, [r2, #0]
 8008a94:	b1c5      	cbz	r5, 8008ac8 <chk_lock+0x40>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008a96:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
 8008a9a:	42bd      	cmp	r5, r7
 8008a9c:	d115      	bne.n	8008aca <chk_lock+0x42>
 8008a9e:	6857      	ldr	r7, [r2, #4]
 8008aa0:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8008aa4:	42af      	cmp	r7, r5
 8008aa6:	d110      	bne.n	8008aca <chk_lock+0x42>
				Files[i].clu == dp->sclust &&
 8008aa8:	8917      	ldrh	r7, [r2, #8]
 8008aaa:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8008aae:	42af      	cmp	r7, r5
 8008ab0:	d10b      	bne.n	8008aca <chk_lock+0x42>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008ab2:	b9b9      	cbnz	r1, 8008ae4 <chk_lock+0x5c>
 8008ab4:	220c      	movs	r2, #12
 8008ab6:	fb02 6303 	mla	r3, r2, r3, r6
 8008aba:	895b      	ldrh	r3, [r3, #10]
 8008abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ac0:	bf14      	ite	ne
 8008ac2:	2000      	movne	r0, #0
 8008ac4:	2010      	moveq	r0, #16
 8008ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8008ac8:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008aca:	3301      	adds	r3, #1
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	f102 020c 	add.w	r2, r2, #12
 8008ad2:	d1de      	bne.n	8008a92 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008ad4:	b10c      	cbz	r4, 8008ada <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008ada:	2902      	cmp	r1, #2
 8008adc:	bf0c      	ite	eq
 8008ade:	2000      	moveq	r0, #0
 8008ae0:	2012      	movne	r0, #18
 8008ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008ae4:	2010      	movs	r0, #16
 8008ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ae8:	20000590 	.word	0x20000590

08008aec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aee:	4c20      	ldr	r4, [pc, #128]	; (8008b70 <inc_lock+0x84>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8008af0:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008af4:	2300      	movs	r3, #0
 8008af6:	4622      	mov	r2, r4
		if (Files[i].fs == dp->fs &&
 8008af8:	6825      	ldr	r5, [r4, #0]
 8008afa:	42b5      	cmp	r5, r6
 8008afc:	d109      	bne.n	8008b12 <inc_lock+0x26>
 8008afe:	6867      	ldr	r7, [r4, #4]
 8008b00:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8008b04:	42af      	cmp	r7, r5
 8008b06:	d104      	bne.n	8008b12 <inc_lock+0x26>
			Files[i].clu == dp->sclust &&
 8008b08:	8927      	ldrh	r7, [r4, #8]
 8008b0a:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8008b0e:	42af      	cmp	r7, r5
 8008b10:	d022      	beq.n	8008b58 <inc_lock+0x6c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008b12:	3301      	adds	r3, #1
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	f104 040c 	add.w	r4, r4, #12
 8008b1a:	d1ed      	bne.n	8008af8 <inc_lock+0xc>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008b1c:	6813      	ldr	r3, [r2, #0]
 8008b1e:	b113      	cbz	r3, 8008b26 <inc_lock+0x3a>
 8008b20:	68d3      	ldr	r3, [r2, #12]
 8008b22:	bb1b      	cbnz	r3, 8008b6c <inc_lock+0x80>
 8008b24:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 8008b26:	240c      	movs	r4, #12
 8008b28:	435c      	muls	r4, r3
 8008b2a:	1915      	adds	r5, r2, r4
 8008b2c:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 8008b2e:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 8008b32:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
 8008b36:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 8008b38:	2000      	movs	r0, #0
		Files[i].clu = dp->sclust;
 8008b3a:	606c      	str	r4, [r5, #4]
		Files[i].ctr = 0;
 8008b3c:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008b3e:	b991      	cbnz	r1, 8008b66 <inc_lock+0x7a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008b40:	210c      	movs	r1, #12
 8008b42:	fb01 2103 	mla	r1, r1, r3, r2
 8008b46:	8949      	ldrh	r1, [r1, #10]
 8008b48:	3101      	adds	r1, #1
 8008b4a:	b289      	uxth	r1, r1
 8008b4c:	200c      	movs	r0, #12
 8008b4e:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 8008b52:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008b54:	8151      	strh	r1, [r2, #10]
	return i + 1;
 8008b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008b58:	2900      	cmp	r1, #0
 8008b5a:	d0f1      	beq.n	8008b40 <inc_lock+0x54>
 8008b5c:	210c      	movs	r1, #12
 8008b5e:	fb01 2103 	mla	r1, r1, r3, r2
 8008b62:	8949      	ldrh	r1, [r1, #10]
 8008b64:	b911      	cbnz	r1, 8008b6c <inc_lock+0x80>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008b6a:	e7ef      	b.n	8008b4c <inc_lock+0x60>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b70:	20000590 	.word	0x20000590

08008b74 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008b74:	b530      	push	{r4, r5, lr}
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008b76:	1e45      	subs	r5, r0, #1
 8008b78:	2d01      	cmp	r5, #1
 8008b7a:	d811      	bhi.n	8008ba0 <dec_lock+0x2c>
		n = Files[i].ctr;
 8008b7c:	490a      	ldr	r1, [pc, #40]	; (8008ba8 <dec_lock+0x34>)
 8008b7e:	220c      	movs	r2, #12
 8008b80:	fb02 1305 	mla	r3, r2, r5, r1
 8008b84:	895c      	ldrh	r4, [r3, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n) n--;					/* Decrement read mode open count */
 8008b86:	f424 7380 	bic.w	r3, r4, #256	; 0x100
 8008b8a:	b298      	uxth	r0, r3
 8008b8c:	b108      	cbz	r0, 8008b92 <dec_lock+0x1e>
 8008b8e:	3c01      	subs	r4, #1
 8008b90:	b2a0      	uxth	r0, r4
		Files[i].ctr = n;
 8008b92:	fb02 f305 	mul.w	r3, r2, r5
 8008b96:	18ca      	adds	r2, r1, r3
 8008b98:	8150      	strh	r0, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008b9a:	b918      	cbnz	r0, 8008ba4 <dec_lock+0x30>
 8008b9c:	50c8      	str	r0, [r1, r3]
 8008b9e:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008ba0:	2002      	movs	r0, #2
 8008ba2:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
 8008ba4:	2000      	movs	r0, #0
	}
	return res;
}
 8008ba6:	bd30      	pop	{r4, r5, pc}
 8008ba8:	20000590 	.word	0x20000590

08008bac <clmt_clust>:
)
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008bac:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008bb0:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008bb4:	3304      	adds	r3, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008bb6:	0a49      	lsrs	r1, r1, #9
 8008bb8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8008bbc:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008bc0:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 8008bc2:	b130      	cbz	r0, 8008bd2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008bc4:	4281      	cmp	r1, r0
 8008bc6:	d302      	bcc.n	8008bce <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8008bc8:	1a09      	subs	r1, r1, r0
 8008bca:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008bcc:	e7f8      	b.n	8008bc0 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8008bce:	6858      	ldr	r0, [r3, #4]
 8008bd0:	4408      	add	r0, r1
}
 8008bd2:	4770      	bx	lr

08008bd4 <get_fileinfo>:
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
	if (dp->sect) {		/* Get SFN */
 8008bd4:	f8d0 2210 	ldr.w	r2, [r0, #528]	; 0x210
{
 8008bd8:	b570      	push	{r4, r5, r6, lr}
	p = fno->fname;
 8008bda:	f101 0309 	add.w	r3, r1, #9
	if (dp->sect) {		/* Get SFN */
 8008bde:	b322      	cbz	r2, 8008c2a <get_fileinfo+0x56>
		dir = dp->dir;
 8008be0:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
		i = 0;
 8008be4:	2400      	movs	r4, #0
 8008be6:	1e55      	subs	r5, r2, #1
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
			if (c == ' ') continue;				/* Skip padding spaces */
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8008be8:	262e      	movs	r6, #46	; 0x2e
			c = (TCHAR)dir[i++];
 8008bea:	f815 0f01 	ldrb.w	r0, [r5, #1]!
			if (c == ' ') continue;				/* Skip padding spaces */
 8008bee:	2820      	cmp	r0, #32
			c = (TCHAR)dir[i++];
 8008bf0:	f104 0401 	add.w	r4, r4, #1
			if (c == ' ') continue;				/* Skip padding spaces */
 8008bf4:	d009      	beq.n	8008c0a <get_fileinfo+0x36>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008bf6:	2805      	cmp	r0, #5
 8008bf8:	bf08      	it	eq
 8008bfa:	20e5      	moveq	r0, #229	; 0xe5
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8008bfc:	2c09      	cmp	r4, #9
 8008bfe:	bf04      	itt	eq
 8008c00:	701e      	strbeq	r6, [r3, #0]
 8008c02:	3301      	addeq	r3, #1
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8008c04:	3301      	adds	r3, #1
 8008c06:	f803 0c01 	strb.w	r0, [r3, #-1]
		while (i < 11) {		/* Copy name body and extension */
 8008c0a:	2c0b      	cmp	r4, #11
 8008c0c:	d1ed      	bne.n	8008bea <get_fileinfo+0x16>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8008c0e:	7ad0      	ldrb	r0, [r2, #11]
 8008c10:	7208      	strb	r0, [r1, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8008c12:	69d0      	ldr	r0, [r2, #28]
 8008c14:	6008      	str	r0, [r1, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8008c16:	7e54      	ldrb	r4, [r2, #25]
 8008c18:	7e10      	ldrb	r0, [r2, #24]
 8008c1a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8008c1e:	8088      	strh	r0, [r1, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8008c20:	7dd0      	ldrb	r0, [r2, #23]
 8008c22:	7d92      	ldrb	r2, [r2, #22]
 8008c24:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008c28:	80ca      	strh	r2, [r1, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	701a      	strb	r2, [r3, #0]
 8008c2e:	bd70      	pop	{r4, r5, r6, pc}

08008c30 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008c30:	6802      	ldr	r2, [r0, #0]
{
 8008c32:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8008c34:	b152      	cbz	r2, 8008c4c <get_ldnumber+0x1c>
 8008c36:	4611      	mov	r1, r2
 8008c38:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008c3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c3e:	2c20      	cmp	r4, #32
 8008c40:	d90c      	bls.n	8008c5c <get_ldnumber+0x2c>
 8008c42:	2c3a      	cmp	r4, #58	; 0x3a
 8008c44:	d1f8      	bne.n	8008c38 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8008c46:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008c48:	428b      	cmp	r3, r1
 8008c4a:	d002      	beq.n	8008c52 <get_ldnumber+0x22>
	int vol = -1;
 8008c4c:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8008c50:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008c52:	7812      	ldrb	r2, [r2, #0]
 8008c54:	2a30      	cmp	r2, #48	; 0x30
 8008c56:	d1f9      	bne.n	8008c4c <get_ldnumber+0x1c>
					*path = ++tt;
 8008c58:	3301      	adds	r3, #1
 8008c5a:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	bd10      	pop	{r4, pc}

08008c60 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008c60:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008c62:	b190      	cbz	r0, 8008c8a <validate+0x2a>
 8008c64:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8008c68:	b17b      	cbz	r3, 8008c8a <validate+0x2a>
 8008c6a:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 8008c6e:	b162      	cbz	r2, 8008c8a <validate+0x2a>
 8008c70:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 8008c74:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 8008c78:	4291      	cmp	r1, r2
 8008c7a:	d106      	bne.n	8008c8a <validate+0x2a>
 8008c7c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008c80:	f7ff fe44 	bl	800890c <disk_status>
 8008c84:	f010 0001 	ands.w	r0, r0, #1
 8008c88:	d000      	beq.n	8008c8c <validate+0x2c>
		return FR_INVALID_OBJECT;
 8008c8a:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 8008c8c:	bd08      	pop	{r3, pc}

08008c8e <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 8008c8e:	7eca      	ldrb	r2, [r1, #27]
 8008c90:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 8008c92:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8008c94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8008c98:	bf01      	itttt	eq
 8008c9a:	7d48      	ldrbeq	r0, [r1, #21]
 8008c9c:	7d0a      	ldrbeq	r2, [r1, #20]
 8008c9e:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8008ca2:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	4770      	bx	lr

08008caa <sync_window.part.2>:
FRESULT sync_window (
 8008caa:	b570      	push	{r4, r5, r6, lr}
		wsect = fs->winsect;	/* Current sector number */
 8008cac:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
FRESULT sync_window (
 8008cb0:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	462a      	mov	r2, r5
 8008cb8:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8008cbc:	f7ff fe4e 	bl	800895c <disk_write>
 8008cc0:	b9d0      	cbnz	r0, 8008cf8 <sync_window.part.2+0x4e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008cc2:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 8008cc6:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
			fs->wflag = 0;
 8008cca:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008cce:	1aeb      	subs	r3, r5, r3
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d301      	bcc.n	8008cd8 <sync_window.part.2+0x2e>
	FRESULT res = FR_OK;
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	bd70      	pop	{r4, r5, r6, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008cd8:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 8008cdc:	2e01      	cmp	r6, #1
 8008cde:	d9f9      	bls.n	8008cd4 <sync_window.part.2+0x2a>
					wsect += fs->fsize;
 8008ce0:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008ce4:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 8008ce8:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008cea:	462a      	mov	r2, r5
 8008cec:	2301      	movs	r3, #1
 8008cee:	4621      	mov	r1, r4
 8008cf0:	f7ff fe34 	bl	800895c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008cf4:	3e01      	subs	r6, #1
 8008cf6:	e7f1      	b.n	8008cdc <sync_window.part.2+0x32>
			res = FR_DISK_ERR;
 8008cf8:	2001      	movs	r0, #1
}
 8008cfa:	bd70      	pop	{r4, r5, r6, pc}

08008cfc <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008cfc:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8008d00:	b10b      	cbz	r3, 8008d06 <sync_window+0xa>
 8008d02:	f7ff bfd2 	b.w	8008caa <sync_window.part.2>
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	4770      	bx	lr

08008d0a <sync_fs>:
{
 8008d0a:	b538      	push	{r3, r4, r5, lr}
 8008d0c:	4604      	mov	r4, r0
	res = sync_window(fs);
 8008d0e:	f7ff fff5 	bl	8008cfc <sync_window>
 8008d12:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d154      	bne.n	8008dc2 <sync_fs+0xb8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008d18:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	d147      	bne.n	8008db0 <sync_fs+0xa6>
 8008d20:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d143      	bne.n	8008db0 <sync_fs+0xa6>
			mem_set(fs->win.d8, 0, SS(fs));
 8008d28:	4601      	mov	r1, r0
 8008d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f7ff fea2 	bl	8008a78 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8008d34:	2255      	movs	r2, #85	; 0x55
 8008d36:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
 8008d3a:	22aa      	movs	r2, #170	; 0xaa
 8008d3c:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8008d40:	2252      	movs	r2, #82	; 0x52
 8008d42:	7022      	strb	r2, [r4, #0]
 8008d44:	7062      	strb	r2, [r4, #1]
 8008d46:	2261      	movs	r2, #97	; 0x61
 8008d48:	70a2      	strb	r2, [r4, #2]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8008d4a:	f884 21e7 	strb.w	r2, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8008d4e:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8008d52:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8008d56:	2141      	movs	r1, #65	; 0x41
 8008d58:	70e1      	strb	r1, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8008d5a:	f884 11e6 	strb.w	r1, [r4, #486]	; 0x1e6
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8008d5e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008d62:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 8008d66:	0c11      	lsrs	r1, r2, #16
 8008d68:	0e12      	lsrs	r2, r2, #24
 8008d6a:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8008d6e:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8008d72:	f884 11ea 	strb.w	r1, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8008d76:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008d7a:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 8008d7e:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 8008d82:	0c11      	lsrs	r1, r2, #16
 8008d84:	0e12      	lsrs	r2, r2, #24
 8008d86:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 8008d8a:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8008d8e:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8008d92:	2072      	movs	r0, #114	; 0x72
			fs->winsect = fs->volbase + 1;
 8008d94:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8008d96:	f884 01e4 	strb.w	r0, [r4, #484]	; 0x1e4
 8008d9a:	f884 01e5 	strb.w	r0, [r4, #485]	; 0x1e5
			fs->winsect = fs->volbase + 1;
 8008d9e:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8008da2:	4621      	mov	r1, r4
 8008da4:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8008da8:	f7ff fdd8 	bl	800895c <disk_write>
			fs->fsi_flag = 0;
 8008dac:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8008db0:	2200      	movs	r2, #0
 8008db2:	4611      	mov	r1, r2
 8008db4:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8008db8:	f7ff fdde 	bl	8008978 <disk_ioctl>
 8008dbc:	3000      	adds	r0, #0
 8008dbe:	bf18      	it	ne
 8008dc0:	2001      	movne	r0, #1
}
 8008dc2:	bd38      	pop	{r3, r4, r5, pc}

08008dc4 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008dc4:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8008dc8:	428b      	cmp	r3, r1
{
 8008dca:	b570      	push	{r4, r5, r6, lr}
 8008dcc:	4606      	mov	r6, r0
 8008dce:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008dd0:	d013      	beq.n	8008dfa <move_window+0x36>
		res = sync_window(fs);		/* Write-back changes */
 8008dd2:	f7ff ff93 	bl	8008cfc <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	b968      	cbnz	r0, 8008df6 <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8008dda:	462a      	mov	r2, r5
 8008ddc:	2301      	movs	r3, #1
 8008dde:	4631      	mov	r1, r6
 8008de0:	f896 0201 	ldrb.w	r0, [r6, #513]	; 0x201
 8008de4:	f7ff fdac 	bl	8008940 <disk_read>
 8008de8:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8008dea:	bf1c      	itt	ne
 8008dec:	f04f 35ff 	movne.w	r5, #4294967295
 8008df0:	2401      	movne	r4, #1
			fs->winsect = sector;
 8008df2:	f8c6 522c 	str.w	r5, [r6, #556]	; 0x22c
}
 8008df6:	4620      	mov	r0, r4
 8008df8:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8008dfa:	2400      	movs	r4, #0
 8008dfc:	e7fb      	b.n	8008df6 <move_window+0x32>
	...

08008e00 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008e00:	2300      	movs	r3, #0
{
 8008e02:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008e04:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 8008e08:	f04f 33ff 	mov.w	r3, #4294967295
 8008e0c:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
{
 8008e10:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8008e12:	f7ff ffd7 	bl	8008dc4 <move_window>
 8008e16:	b9c0      	cbnz	r0, 8008e4a <check_fs+0x4a>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8008e18:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8008e1c:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8008e20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e24:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d110      	bne.n	8008e4e <check_fs+0x4e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8008e2c:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8008e30:	4a08      	ldr	r2, [pc, #32]	; (8008e54 <check_fs+0x54>)
 8008e32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d00a      	beq.n	8008e50 <check_fs+0x50>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008e3a:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 8008e3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 8008e42:	1a80      	subs	r0, r0, r2
 8008e44:	bf18      	it	ne
 8008e46:	2001      	movne	r0, #1
 8008e48:	bd10      	pop	{r4, pc}
 8008e4a:	2003      	movs	r0, #3
 8008e4c:	bd10      	pop	{r4, pc}
		return 2;
 8008e4e:	2002      	movs	r0, #2
}
 8008e50:	bd10      	pop	{r4, pc}
 8008e52:	bf00      	nop
 8008e54:	00544146 	.word	0x00544146

08008e58 <find_volume>:
{
 8008e58:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	6003      	str	r3, [r0, #0]
{
 8008e5e:	b085      	sub	sp, #20
 8008e60:	4607      	mov	r7, r0
	vol = get_ldnumber(path);
 8008e62:	4608      	mov	r0, r1
{
 8008e64:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8008e66:	f7ff fee3 	bl	8008c30 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008e6a:	1e06      	subs	r6, r0, #0
 8008e6c:	f2c0 8123 	blt.w	80090b6 <find_volume+0x25e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008e70:	4b95      	ldr	r3, [pc, #596]	; (80090c8 <find_volume+0x270>)
 8008e72:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008e76:	2c00      	cmp	r4, #0
 8008e78:	f000 811f 	beq.w	80090ba <find_volume+0x262>
	*rfs = fs;							/* Return pointer to the file system object */
 8008e7c:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008e7e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8008e82:	b173      	cbz	r3, 8008ea2 <find_volume+0x4a>
		stat = disk_status(fs->drv);
 8008e84:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8008e88:	f7ff fd40 	bl	800890c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008e8c:	07c7      	lsls	r7, r0, #31
 8008e8e:	d408      	bmi.n	8008ea2 <find_volume+0x4a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8008e90:	2d00      	cmp	r5, #0
 8008e92:	f000 8114 	beq.w	80090be <find_volume+0x266>
 8008e96:	f010 0004 	ands.w	r0, r0, #4
 8008e9a:	d000      	beq.n	8008e9e <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8008e9c:	200a      	movs	r0, #10
}
 8008e9e:	b005      	add	sp, #20
 8008ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8008ea2:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008ea4:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8008ea6:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008eaa:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008eae:	f7ff fd37 	bl	8008920 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8008eb2:	07c1      	lsls	r1, r0, #31
 8008eb4:	f100 8105 	bmi.w	80090c2 <find_volume+0x26a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8008eb8:	b10d      	cbz	r5, 8008ebe <find_volume+0x66>
 8008eba:	0742      	lsls	r2, r0, #29
 8008ebc:	d4ee      	bmi.n	8008e9c <find_volume+0x44>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f7ff ff9d 	bl	8008e00 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008ec6:	2801      	cmp	r0, #1
 8008ec8:	f040 80dc 	bne.w	8009084 <find_volume+0x22c>
 8008ecc:	f504 71e3 	add.w	r1, r4, #454	; 0x1c6
 8008ed0:	2200      	movs	r2, #0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008ed2:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8008ed6:	b103      	cbz	r3, 8008eda <find_volume+0x82>
 8008ed8:	680b      	ldr	r3, [r1, #0]
 8008eda:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008ede:	3201      	adds	r2, #1
 8008ee0:	2a04      	cmp	r2, #4
 8008ee2:	f101 0110 	add.w	r1, r1, #16
 8008ee6:	d1f4      	bne.n	8008ed2 <find_volume+0x7a>
 8008ee8:	2600      	movs	r6, #0
			bsect = br[i];
 8008eea:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008eee:	2d00      	cmp	r5, #0
 8008ef0:	f000 80bf 	beq.w	8009072 <find_volume+0x21a>
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f7ff ff82 	bl	8008e00 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008efc:	2800      	cmp	r0, #0
 8008efe:	f040 80b9 	bne.w	8009074 <find_volume+0x21c>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008f02:	7b22      	ldrb	r2, [r4, #12]
 8008f04:	7ae3      	ldrb	r3, [r4, #11]
 8008f06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f0e:	f040 80bc 	bne.w	800908a <find_volume+0x232>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008f12:	7de3      	ldrb	r3, [r4, #23]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008f14:	7c20      	ldrb	r0, [r4, #16]
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008f16:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008f18:	f884 0203 	strb.w	r0, [r4, #515]	; 0x203
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8008f1c:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008f20:	f100 33ff 	add.w	r3, r0, #4294967295
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8008f24:	bf08      	it	eq
 8008f26:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 8008f28:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	f200 80ac 	bhi.w	800908a <find_volume+0x232>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8008f32:	7b66      	ldrb	r6, [r4, #13]
 8008f34:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8008f38:	2e00      	cmp	r6, #0
 8008f3a:	f000 80a6 	beq.w	800908a <find_volume+0x232>
 8008f3e:	1e73      	subs	r3, r6, #1
 8008f40:	4233      	tst	r3, r6
 8008f42:	f040 80a2 	bne.w	800908a <find_volume+0x232>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008f46:	7ca3      	ldrb	r3, [r4, #18]
 8008f48:	7c67      	ldrb	r7, [r4, #17]
 8008f4a:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8008f4e:	073b      	lsls	r3, r7, #28
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008f50:	f8a4 7208 	strh.w	r7, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8008f54:	f040 8099 	bne.w	800908a <find_volume+0x232>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8008f58:	7d22      	ldrb	r2, [r4, #20]
 8008f5a:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8008f5c:	f894 e00f 	ldrb.w	lr, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8008f60:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8008f64:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8008f66:	bf08      	it	eq
 8008f68:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8008f6a:	ea52 220e 	orrs.w	r2, r2, lr, lsl #8
 8008f6e:	f000 808c 	beq.w	800908a <find_volume+0x232>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8008f72:	fb01 fe00 	mul.w	lr, r1, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8008f76:	eb02 1017 	add.w	r0, r2, r7, lsr #4
 8008f7a:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008f7c:	4283      	cmp	r3, r0
 8008f7e:	f0c0 8084 	bcc.w	800908a <find_volume+0x232>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008f82:	1a1b      	subs	r3, r3, r0
 8008f84:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d07e      	beq.n	800908a <find_volume+0x232>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008f8c:	f640 76f5 	movw	r6, #4085	; 0xff5
 8008f90:	42b3      	cmp	r3, r6
 8008f92:	d97e      	bls.n	8009092 <find_volume+0x23a>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008f94:	f64f 76f5 	movw	r6, #65525	; 0xfff5
 8008f98:	42b3      	cmp	r3, r6
 8008f9a:	bf94      	ite	ls
 8008f9c:	2602      	movls	r6, #2
 8008f9e:	2603      	movhi	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008fa0:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008fa2:	442a      	add	r2, r5
	fs->database = bsect + sysect;						/* Data start sector */
 8008fa4:	4428      	add	r0, r5
	if (fmt == FS_FAT32) {
 8008fa6:	2e03      	cmp	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008fa8:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8008fac:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008fb0:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8008fb4:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8008fb8:	d16d      	bne.n	8009096 <find_volume+0x23e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008fba:	2f00      	cmp	r7, #0
 8008fbc:	d165      	bne.n	800908a <find_volume+0x232>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8008fbe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008fc0:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8008fc4:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8008fc6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008fca:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 8008fce:	d35c      	bcc.n	800908a <find_volume+0x232>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd4:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 8008fd8:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008fdc:	2e03      	cmp	r6, #3
	fs->fsi_flag = 0x80;
 8008fde:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008fe2:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008fe6:	d12d      	bne.n	8009044 <find_volume+0x1ec>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8008fe8:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8008fec:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8008ff0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d125      	bne.n	8009044 <find_volume+0x1ec>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008ff8:	1c69      	adds	r1, r5, #1
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f7ff fee2 	bl	8008dc4 <move_window>
 8009000:	bb00      	cbnz	r0, 8009044 <find_volume+0x1ec>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009002:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8009006:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 800900a:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800900e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009012:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8009016:	4293      	cmp	r3, r2
 8009018:	d114      	bne.n	8009044 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800901a:	6822      	ldr	r2, [r4, #0]
 800901c:	4b2b      	ldr	r3, [pc, #172]	; (80090cc <find_volume+0x274>)
 800901e:	429a      	cmp	r2, r3
 8009020:	d110      	bne.n	8009044 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8009022:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8009026:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 800902a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800902e:	3320      	adds	r3, #32
 8009030:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8009032:	bf01      	itttt	eq
 8009034:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 8009038:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800903c:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 8009040:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 8009044:	4a22      	ldr	r2, [pc, #136]	; (80090d0 <find_volume+0x278>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8009046:	f884 6200 	strb.w	r6, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800904a:	8813      	ldrh	r3, [r2, #0]
 800904c:	3301      	adds	r3, #1
 800904e:	b29b      	uxth	r3, r3
 8009050:	8013      	strh	r3, [r2, #0]
 8009052:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009056:	4b1f      	ldr	r3, [pc, #124]	; (80090d4 <find_volume+0x27c>)
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	4294      	cmp	r4, r2
 800905c:	bf04      	itt	eq
 800905e:	2200      	moveq	r2, #0
 8009060:	601a      	streq	r2, [r3, #0]
 8009062:	68da      	ldr	r2, [r3, #12]
 8009064:	4294      	cmp	r4, r2
 8009066:	f04f 0000 	mov.w	r0, #0
 800906a:	f47f af18 	bne.w	8008e9e <find_volume+0x46>
 800906e:	60d8      	str	r0, [r3, #12]
 8009070:	e715      	b.n	8008e9e <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8009072:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8009074:	3601      	adds	r6, #1
 8009076:	2e04      	cmp	r6, #4
 8009078:	f47f af37 	bne.w	8008eea <find_volume+0x92>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800907c:	2803      	cmp	r0, #3
 800907e:	d104      	bne.n	800908a <find_volume+0x232>
 8009080:	2001      	movs	r0, #1
 8009082:	e70c      	b.n	8008e9e <find_volume+0x46>
 8009084:	2803      	cmp	r0, #3
 8009086:	d0fb      	beq.n	8009080 <find_volume+0x228>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8009088:	b108      	cbz	r0, 800908e <find_volume+0x236>
 800908a:	200d      	movs	r0, #13
 800908c:	e707      	b.n	8008e9e <find_volume+0x46>
	bsect = 0;
 800908e:	4605      	mov	r5, r0
 8009090:	e737      	b.n	8008f02 <find_volume+0xaa>
	fmt = FS_FAT12;
 8009092:	2601      	movs	r6, #1
 8009094:	e784      	b.n	8008fa0 <find_volume+0x148>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009096:	2f00      	cmp	r7, #0
 8009098:	d0f7      	beq.n	800908a <find_volume+0x232>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800909a:	4472      	add	r2, lr
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800909c:	2e02      	cmp	r6, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800909e:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 80090a2:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80090a6:	bf1b      	ittet	ne
 80090a8:	18d2      	addne	r2, r2, r3
 80090aa:	f003 0301 	andne.w	r3, r3, #1
 80090ae:	4613      	moveq	r3, r2
 80090b0:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 80090b4:	e787      	b.n	8008fc6 <find_volume+0x16e>
	if (vol < 0) return FR_INVALID_DRIVE;
 80090b6:	200b      	movs	r0, #11
 80090b8:	e6f1      	b.n	8008e9e <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80090ba:	200c      	movs	r0, #12
 80090bc:	e6ef      	b.n	8008e9e <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 80090be:	4628      	mov	r0, r5
 80090c0:	e6ed      	b.n	8008e9e <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80090c2:	2003      	movs	r0, #3
 80090c4:	e6eb      	b.n	8008e9e <find_volume+0x46>
 80090c6:	bf00      	nop
 80090c8:	2000058c 	.word	0x2000058c
 80090cc:	41615252 	.word	0x41615252
 80090d0:	200005a8 	.word	0x200005a8
 80090d4:	20000590 	.word	0x20000590

080090d8 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80090d8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
	clst -= 2;
 80090dc:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80090de:	3b02      	subs	r3, #2
 80090e0:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 80090e2:	bf3d      	ittte	cc
 80090e4:	f890 3202 	ldrbcc.w	r3, [r0, #514]	; 0x202
 80090e8:	f8d0 0228 	ldrcc.w	r0, [r0, #552]	; 0x228
 80090ec:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80090f0:	2000      	movcs	r0, #0
}
 80090f2:	4770      	bx	lr

080090f4 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80090f4:	2901      	cmp	r1, #1
{
 80090f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f8:	4606      	mov	r6, r0
 80090fa:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80090fc:	d959      	bls.n	80091b2 <get_fat+0xbe>
 80090fe:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009102:	4299      	cmp	r1, r3
 8009104:	d255      	bcs.n	80091b2 <get_fat+0xbe>
		switch (fs->fs_type) {
 8009106:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 800910a:	2b02      	cmp	r3, #2
 800910c:	d027      	beq.n	800915e <get_fat+0x6a>
 800910e:	2b03      	cmp	r3, #3
 8009110:	d036      	beq.n	8009180 <get_fat+0x8c>
 8009112:	2b01      	cmp	r3, #1
 8009114:	d14d      	bne.n	80091b2 <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 8009116:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800911a:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800911e:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 8009122:	f7ff fe4f 	bl	8008dc4 <move_window>
 8009126:	b110      	cbz	r0, 800912e <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009128:	f04f 30ff 	mov.w	r0, #4294967295
 800912c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800912e:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 8009132:	1c67      	adds	r7, r4, #1
 8009134:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009138:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800913c:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 800913e:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009140:	f7ff fe40 	bl	8008dc4 <move_window>
 8009144:	2800      	cmp	r0, #0
 8009146:	d1ef      	bne.n	8009128 <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8009148:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800914c:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800914e:	5df0      	ldrb	r0, [r6, r7]
 8009150:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8009154:	bf4c      	ite	mi
 8009156:	0900      	lsrmi	r0, r0, #4
 8009158:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800915c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800915e:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8009162:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8009166:	f7ff fe2d 	bl	8008dc4 <move_window>
 800916a:	2800      	cmp	r0, #0
 800916c:	d1dc      	bne.n	8009128 <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800916e:	006d      	lsls	r5, r5, #1
 8009170:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 8009174:	1973      	adds	r3, r6, r5
 8009176:	5d70      	ldrb	r0, [r6, r5]
 8009178:	785b      	ldrb	r3, [r3, #1]
 800917a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800917e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009180:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8009184:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8009188:	f7ff fe1c 	bl	8008dc4 <move_window>
 800918c:	2800      	cmp	r0, #0
 800918e:	d1cb      	bne.n	8009128 <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009190:	00ad      	lsls	r5, r5, #2
 8009192:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8009196:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8009198:	7898      	ldrb	r0, [r3, #2]
 800919a:	78da      	ldrb	r2, [r3, #3]
 800919c:	785b      	ldrb	r3, [r3, #1]
 800919e:	0400      	lsls	r0, r0, #16
 80091a0:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80091a4:	5d72      	ldrb	r2, [r6, r5]
 80091a6:	4310      	orrs	r0, r2
 80091a8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80091ac:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 80091b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 80091b2:	2001      	movs	r0, #1
}
 80091b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091b6 <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80091b6:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
{
 80091ba:	b570      	push	{r4, r5, r6, lr}
 80091bc:	4604      	mov	r4, r0
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80091be:	2a01      	cmp	r2, #1
{
 80091c0:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 80091c2:	f8a4 1206 	strh.w	r1, [r4, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80091c6:	d101      	bne.n	80091cc <dir_sdi+0x16>
		return FR_INT_ERR;
 80091c8:	2002      	movs	r0, #2
 80091ca:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80091cc:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 80091d0:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 80091d4:	428a      	cmp	r2, r1
 80091d6:	d2f7      	bcs.n	80091c8 <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80091d8:	b9f2      	cbnz	r2, 8009218 <dir_sdi+0x62>
 80091da:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 80091de:	2903      	cmp	r1, #3
 80091e0:	d102      	bne.n	80091e8 <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 80091e2:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80091e6:	b9c1      	cbnz	r1, 800921a <dir_sdi+0x64>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80091e8:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 80091ec:	428d      	cmp	r5, r1
 80091ee:	d2eb      	bcs.n	80091c8 <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 80091f0:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 80091f4:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80091f8:	2800      	cmp	r0, #0
 80091fa:	d0e5      	beq.n	80091c8 <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80091fc:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8009200:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8009204:	f005 050f 	and.w	r5, r5, #15
 8009208:	eb03 1545 	add.w	r5, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800920c:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8009210:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 8009214:	2000      	movs	r0, #0
 8009216:	bd70      	pop	{r4, r5, r6, pc}
 8009218:	4611      	mov	r1, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800921a:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
		while (idx >= ic) {	/* Follow cluster chain */
 800921e:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8009220:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8009222:	42b5      	cmp	r5, r6
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8009224:	4611      	mov	r1, r2
 8009226:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
		while (idx >= ic) {	/* Follow cluster chain */
 800922a:	d202      	bcs.n	8009232 <dir_sdi+0x7c>
		sect = clust2sect(dp->fs, clst);
 800922c:	f7ff ff54 	bl	80090d8 <clust2sect>
 8009230:	e7e0      	b.n	80091f4 <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8009232:	f7ff ff5f 	bl	80090f4 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009236:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8009238:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800923a:	d009      	beq.n	8009250 <dir_sdi+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800923c:	2801      	cmp	r0, #1
 800923e:	d9c3      	bls.n	80091c8 <dir_sdi+0x12>
 8009240:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8009244:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009248:	4298      	cmp	r0, r3
 800924a:	d2bd      	bcs.n	80091c8 <dir_sdi+0x12>
			idx -= ic;
 800924c:	1bad      	subs	r5, r5, r6
 800924e:	e7e8      	b.n	8009222 <dir_sdi+0x6c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009250:	2001      	movs	r0, #1
}
 8009252:	bd70      	pop	{r4, r5, r6, pc}

08009254 <dir_remove>:
{
 8009254:	b510      	push	{r4, lr}
	res = dir_sdi(dp, dp->index);
 8009256:	f8b0 1206 	ldrh.w	r1, [r0, #518]	; 0x206
{
 800925a:	4604      	mov	r4, r0
	res = dir_sdi(dp, dp->index);
 800925c:	f7ff ffab 	bl	80091b6 <dir_sdi>
	if (res == FR_OK) {
 8009260:	4603      	mov	r3, r0
 8009262:	b9b0      	cbnz	r0, 8009292 <dir_remove+0x3e>
		res = move_window(dp->fs, dp->sect);
 8009264:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8009268:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800926c:	f7ff fdaa 	bl	8008dc4 <move_window>
		if (res == FR_OK) {
 8009270:	4603      	mov	r3, r0
 8009272:	b970      	cbnz	r0, 8009292 <dir_remove+0x3e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 8009274:	4601      	mov	r1, r0
 8009276:	2220      	movs	r2, #32
 8009278:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 800927c:	f7ff fbfc 	bl	8008a78 <mem_set>
			*dp->dir = DDEM;
 8009280:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8009284:	21e5      	movs	r1, #229	; 0xe5
 8009286:	7011      	strb	r1, [r2, #0]
			dp->fs->wflag = 1;
 8009288:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800928c:	2101      	movs	r1, #1
 800928e:	f882 1204 	strb.w	r1, [r2, #516]	; 0x204
}
 8009292:	4618      	mov	r0, r3
 8009294:	bd10      	pop	{r4, pc}

08009296 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009296:	2901      	cmp	r1, #1
{
 8009298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800929c:	4605      	mov	r5, r0
 800929e:	460c      	mov	r4, r1
 80092a0:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80092a2:	d96f      	bls.n	8009384 <put_fat+0xee>
 80092a4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80092a8:	4299      	cmp	r1, r3
 80092aa:	d26b      	bcs.n	8009384 <put_fat+0xee>
		switch (fs->fs_type) {
 80092ac:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	d03d      	beq.n	8009330 <put_fat+0x9a>
 80092b4:	2b03      	cmp	r3, #3
 80092b6:	d04b      	beq.n	8009350 <put_fat+0xba>
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d163      	bne.n	8009384 <put_fat+0xee>
			bc = (UINT)clst; bc += bc / 2;
 80092bc:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80092c0:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80092c4:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80092c8:	f7ff fd7c 	bl	8008dc4 <move_window>
			if (res != FR_OK) break;
 80092cc:	2800      	cmp	r0, #0
 80092ce:	d15a      	bne.n	8009386 <put_fat+0xf0>
			p = &fs->win.d8[bc++ % SS(fs)];
 80092d0:	f107 0801 	add.w	r8, r7, #1
 80092d4:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80092d8:	f014 0401 	ands.w	r4, r4, #1
 80092dc:	bf1f      	itttt	ne
 80092de:	5deb      	ldrbne	r3, [r5, r7]
 80092e0:	f003 020f 	andne.w	r2, r3, #15
 80092e4:	0133      	lslne	r3, r6, #4
 80092e6:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 80092ea:	bf14      	ite	ne
 80092ec:	4313      	orrne	r3, r2
 80092ee:	b2f3      	uxtbeq	r3, r6
 80092f0:	55eb      	strb	r3, [r5, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80092f2:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
			fs->wflag = 1;
 80092f6:	2301      	movs	r3, #1
 80092f8:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80092fc:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8009300:	4628      	mov	r0, r5
 8009302:	f7ff fd5f 	bl	8008dc4 <move_window>
			if (res != FR_OK) break;
 8009306:	bbf0      	cbnz	r0, 8009386 <put_fat+0xf0>
			p = &fs->win.d8[bc % SS(fs)];
 8009308:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800930c:	b144      	cbz	r4, 8009320 <put_fat+0x8a>
 800930e:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8009312:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 8009316:	2301      	movs	r3, #1
 8009318:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 800931c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009320:	f815 2008 	ldrb.w	r2, [r5, r8]
 8009324:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8009328:	f022 020f 	bic.w	r2, r2, #15
 800932c:	4332      	orrs	r2, r6
 800932e:	e7f0      	b.n	8009312 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009330:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8009334:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8009338:	f7ff fd44 	bl	8008dc4 <move_window>
			if (res != FR_OK) break;
 800933c:	bb18      	cbnz	r0, 8009386 <put_fat+0xf0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800933e:	0064      	lsls	r4, r4, #1
 8009340:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 8009344:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8009348:	552e      	strb	r6, [r5, r4]
 800934a:	442c      	add	r4, r5
 800934c:	7062      	strb	r2, [r4, #1]
 800934e:	e7e2      	b.n	8009316 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009350:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8009354:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8009358:	f7ff fd34 	bl	8008dc4 <move_window>
			if (res != FR_OK) break;
 800935c:	b998      	cbnz	r0, 8009386 <put_fat+0xf0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800935e:	00a4      	lsls	r4, r4, #2
 8009360:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8009364:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 8009366:	78cb      	ldrb	r3, [r1, #3]
 8009368:	061b      	lsls	r3, r3, #24
 800936a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800936e:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 8009372:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8009376:	552a      	strb	r2, [r5, r4]
 8009378:	704b      	strb	r3, [r1, #1]
 800937a:	0c13      	lsrs	r3, r2, #16
 800937c:	0e12      	lsrs	r2, r2, #24
 800937e:	708b      	strb	r3, [r1, #2]
 8009380:	70ca      	strb	r2, [r1, #3]
 8009382:	e7c8      	b.n	8009316 <put_fat+0x80>
			res = FR_INT_ERR;
 8009384:	2002      	movs	r0, #2
}
 8009386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800938a <create_chain>:
{
 800938a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938c:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 800938e:	460f      	mov	r7, r1
 8009390:	b989      	cbnz	r1, 80093b6 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8009392:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8009396:	b1fe      	cbz	r6, 80093d8 <create_chain+0x4e>
 8009398:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800939c:	429e      	cmp	r6, r3
 800939e:	bf28      	it	cs
 80093a0:	2601      	movcs	r6, #1
 80093a2:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80093a4:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		ncl++;							/* Next cluster */
 80093a8:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80093aa:	429c      	cmp	r4, r3
 80093ac:	d317      	bcc.n	80093de <create_chain+0x54>
			if (ncl > scl) return 0;	/* No free cluster */
 80093ae:	2e01      	cmp	r6, #1
 80093b0:	d814      	bhi.n	80093dc <create_chain+0x52>
 80093b2:	2400      	movs	r4, #0
 80093b4:	e008      	b.n	80093c8 <create_chain+0x3e>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80093b6:	f7ff fe9d 	bl	80090f4 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 80093ba:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80093bc:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 80093be:	d93b      	bls.n	8009438 <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80093c0:	3001      	adds	r0, #1
 80093c2:	d103      	bne.n	80093cc <create_chain+0x42>
			ncl = 2;
 80093c4:	f04f 34ff 	mov.w	r4, #4294967295
}
 80093c8:	4620      	mov	r0, r4
 80093ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80093cc:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80093d0:	429c      	cmp	r4, r3
 80093d2:	d3f9      	bcc.n	80093c8 <create_chain+0x3e>
 80093d4:	463e      	mov	r6, r7
 80093d6:	e7e4      	b.n	80093a2 <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80093d8:	2601      	movs	r6, #1
 80093da:	e7e2      	b.n	80093a2 <create_chain+0x18>
			ncl = 2;
 80093dc:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80093de:	4621      	mov	r1, r4
 80093e0:	4628      	mov	r0, r5
 80093e2:	f7ff fe87 	bl	80090f4 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 80093e6:	b130      	cbz	r0, 80093f6 <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80093e8:	1c41      	adds	r1, r0, #1
 80093ea:	d0eb      	beq.n	80093c4 <create_chain+0x3a>
 80093ec:	2801      	cmp	r0, #1
 80093ee:	d023      	beq.n	8009438 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 80093f0:	42b4      	cmp	r4, r6
 80093f2:	d1d7      	bne.n	80093a4 <create_chain+0x1a>
 80093f4:	e7dd      	b.n	80093b2 <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80093f6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80093fa:	4621      	mov	r1, r4
 80093fc:	4628      	mov	r0, r5
 80093fe:	f7ff ff4a 	bl	8009296 <put_fat>
	if (res == FR_OK && clst != 0) {
 8009402:	b9b8      	cbnz	r0, 8009434 <create_chain+0xaa>
 8009404:	b97f      	cbnz	r7, 8009426 <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 8009406:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 800940a:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800940e:	1c5a      	adds	r2, r3, #1
 8009410:	d0da      	beq.n	80093c8 <create_chain+0x3e>
			fs->free_clust--;
 8009412:	3b01      	subs	r3, #1
 8009414:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 8009418:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 800941c:	f043 0301 	orr.w	r3, r3, #1
 8009420:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 8009424:	e7d0      	b.n	80093c8 <create_chain+0x3e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8009426:	4622      	mov	r2, r4
 8009428:	4639      	mov	r1, r7
 800942a:	4628      	mov	r0, r5
 800942c:	f7ff ff33 	bl	8009296 <put_fat>
	if (res == FR_OK) {
 8009430:	2800      	cmp	r0, #0
 8009432:	d0e8      	beq.n	8009406 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8009434:	2801      	cmp	r0, #1
 8009436:	d0c5      	beq.n	80093c4 <create_chain+0x3a>
 8009438:	2401      	movs	r4, #1
 800943a:	e7c5      	b.n	80093c8 <create_chain+0x3e>

0800943c <dir_next>:
{
 800943c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 8009440:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 8009444:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009446:	b2b3      	uxth	r3, r6
{
 8009448:	4604      	mov	r4, r0
 800944a:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800944c:	b913      	cbnz	r3, 8009454 <dir_next+0x18>
		return FR_NO_FILE;
 800944e:	2004      	movs	r0, #4
 8009450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009454:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8009458:	2b00      	cmp	r3, #0
 800945a:	d0f8      	beq.n	800944e <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800945c:	f016 080f 	ands.w	r8, r6, #15
 8009460:	d10b      	bne.n	800947a <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 8009462:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 8009466:	3301      	adds	r3, #1
 8009468:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 800946c:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		if (!dp->clust) {		/* Static table */
 8009470:	b971      	cbnz	r1, 8009490 <dir_next+0x54>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8009472:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 8009476:	429e      	cmp	r6, r3
 8009478:	d2e9      	bcs.n	800944e <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800947a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->index = (WORD)i;	/* Current index */
 800947e:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8009482:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8009486:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 800948a:	2000      	movs	r0, #0
 800948c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8009490:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 8009494:	3f01      	subs	r7, #1
 8009496:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 800949a:	d1ee      	bne.n	800947a <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800949c:	f7ff fe2a 	bl	80090f4 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 80094a0:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80094a2:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 80094a4:	d802      	bhi.n	80094ac <dir_next+0x70>
 80094a6:	2002      	movs	r0, #2
 80094a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80094ac:	1c42      	adds	r2, r0, #1
 80094ae:	d102      	bne.n	80094b6 <dir_next+0x7a>
 80094b0:	2001      	movs	r0, #1
 80094b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80094b6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80094ba:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80094be:	429d      	cmp	r5, r3
 80094c0:	d32f      	bcc.n	8009522 <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80094c2:	f1b9 0f00 	cmp.w	r9, #0
 80094c6:	d0c2      	beq.n	800944e <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80094c8:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 80094cc:	f7ff ff5d 	bl	800938a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80094d0:	4605      	mov	r5, r0
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d03e      	beq.n	8009554 <dir_next+0x118>
					if (clst == 1) return FR_INT_ERR;
 80094d6:	2801      	cmp	r0, #1
 80094d8:	d0e5      	beq.n	80094a6 <dir_next+0x6a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80094da:	1c43      	adds	r3, r0, #1
 80094dc:	d0e8      	beq.n	80094b0 <dir_next+0x74>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80094de:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80094e2:	f7ff fc0b 	bl	8008cfc <sync_window>
 80094e6:	4601      	mov	r1, r0
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d1e1      	bne.n	80094b0 <dir_next+0x74>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80094ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094f0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80094f4:	f7ff fac0 	bl	8008a78 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80094f8:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 80094fc:	4629      	mov	r1, r5
 80094fe:	4610      	mov	r0, r2
 8009500:	f7ff fdea 	bl	80090d8 <clust2sect>
						dp->fs->wflag = 1;
 8009504:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8009508:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800950c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009510:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8009514:	429f      	cmp	r7, r3
 8009516:	d30e      	bcc.n	8009536 <dir_next+0xfa>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8009518:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 800951c:	1bdf      	subs	r7, r3, r7
 800951e:	f8c0 722c 	str.w	r7, [r0, #556]	; 0x22c
				dp->clust = clst;				/* Initialize data for new cluster */
 8009522:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8009526:	4629      	mov	r1, r5
 8009528:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800952c:	f7ff fdd4 	bl	80090d8 <clust2sect>
 8009530:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 8009534:	e7a1      	b.n	800947a <dir_next+0x3e>
						dp->fs->wflag = 1;
 8009536:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
 800953a:	f7ff fbb6 	bl	8008caa <sync_window.part.2>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800953e:	2800      	cmp	r0, #0
 8009540:	d1b6      	bne.n	80094b0 <dir_next+0x74>
						dp->fs->winsect++;
 8009542:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8009546:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 800954a:	3301      	adds	r3, #1
 800954c:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009550:	3701      	adds	r7, #1
 8009552:	e7db      	b.n	800950c <dir_next+0xd0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009554:	2007      	movs	r0, #7
}
 8009556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800955c <follow_path>:
{
 800955c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8009560:	780b      	ldrb	r3, [r1, #0]
 8009562:	2b2f      	cmp	r3, #47	; 0x2f
{
 8009564:	4604      	mov	r4, r0
 8009566:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8009568:	d001      	beq.n	800956e <follow_path+0x12>
 800956a:	2b5c      	cmp	r3, #92	; 0x5c
 800956c:	d100      	bne.n	8009570 <follow_path+0x14>
		path++;
 800956e:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8009570:	2600      	movs	r6, #0
 8009572:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009576:	782b      	ldrb	r3, [r5, #0]
 8009578:	2b1f      	cmp	r3, #31
 800957a:	d936      	bls.n	80095ea <follow_path+0x8e>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800957c:	4e5f      	ldr	r6, [pc, #380]	; (80096fc <follow_path+0x1a0>)
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800957e:	782b      	ldrb	r3, [r5, #0]
 8009580:	2b2f      	cmp	r3, #47	; 0x2f
 8009582:	46a8      	mov	r8, r5
 8009584:	f105 0501 	add.w	r5, r5, #1
 8009588:	d0f9      	beq.n	800957e <follow_path+0x22>
 800958a:	2b5c      	cmp	r3, #92	; 0x5c
 800958c:	d0f7      	beq.n	800957e <follow_path+0x22>
	sfn = dp->fn;
 800958e:	f8d4 7218 	ldr.w	r7, [r4, #536]	; 0x218
	mem_set(sfn, ' ', 11);
 8009592:	220b      	movs	r2, #11
 8009594:	2120      	movs	r1, #32
 8009596:	4638      	mov	r0, r7
 8009598:	f7ff fa6e 	bl	8008a78 <mem_set>
	si = i = b = 0; ni = 8;
 800959c:	f04f 0e00 	mov.w	lr, #0
 80095a0:	f108 39ff 	add.w	r9, r8, #4294967295
 80095a4:	46f4      	mov	ip, lr
 80095a6:	2108      	movs	r1, #8
 80095a8:	4672      	mov	r2, lr
		c = (BYTE)p[si++];
 80095aa:	f819 3f01 	ldrb.w	r3, [r9, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80095ae:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 80095b0:	f10c 0c01 	add.w	ip, ip, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80095b4:	d928      	bls.n	8009608 <follow_path+0xac>
 80095b6:	2b2f      	cmp	r3, #47	; 0x2f
 80095b8:	d026      	beq.n	8009608 <follow_path+0xac>
 80095ba:	2b5c      	cmp	r3, #92	; 0x5c
 80095bc:	d024      	beq.n	8009608 <follow_path+0xac>
		if (c == '.' || i >= ni) {
 80095be:	2b2e      	cmp	r3, #46	; 0x2e
 80095c0:	f000 8085 	beq.w	80096ce <follow_path+0x172>
 80095c4:	4571      	cmp	r1, lr
 80095c6:	d90d      	bls.n	80095e4 <follow_path+0x88>
		if (c >= 0x80) {				/* Extended character? */
 80095c8:	0618      	lsls	r0, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80095ca:	bf48      	it	mi
 80095cc:	3b80      	submi	r3, #128	; 0x80
 80095ce:	4d4c      	ldr	r5, [pc, #304]	; (8009700 <follow_path+0x1a4>)
 80095d0:	bf44      	itt	mi
 80095d2:	5cf3      	ldrbmi	r3, [r6, r3]
			b |= 3;						/* Eliminate NT flag */
 80095d4:	f042 0203 	orrmi.w	r2, r2, #3
	while (*str && *str != chr) str++;
 80095d8:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80095dc:	2800      	cmp	r0, #0
 80095de:	d07d      	beq.n	80096dc <follow_path+0x180>
 80095e0:	4283      	cmp	r3, r0
 80095e2:	d1f9      	bne.n	80095d8 <follow_path+0x7c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80095e4:	2006      	movs	r0, #6
	return res;
 80095e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, 0);
 80095ea:	4631      	mov	r1, r6
 80095ec:	4620      	mov	r0, r4
 80095ee:	f7ff fde2 	bl	80091b6 <dir_sdi>
		dp->dir = 0;
 80095f2:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
 80095f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				b |= 2;
 80095fa:	f042 0202 	orr.w	r2, r2, #2
			sfn[i++] = c;
 80095fe:	f807 300e 	strb.w	r3, [r7, lr]
 8009602:	f10e 0e01 	add.w	lr, lr, #1
 8009606:	e7d0      	b.n	80095aa <follow_path+0x4e>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8009608:	2b21      	cmp	r3, #33	; 0x21
	*path = &p[si];						/* Return pointer to the next segment */
 800960a:	eb08 050c 	add.w	r5, r8, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800960e:	bf34      	ite	cc
 8009610:	2304      	movcc	r3, #4
 8009612:	2300      	movcs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8009614:	f1be 0f00 	cmp.w	lr, #0
 8009618:	d0e4      	beq.n	80095e4 <follow_path+0x88>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800961a:	7838      	ldrb	r0, [r7, #0]
 800961c:	28e5      	cmp	r0, #229	; 0xe5
 800961e:	bf04      	itt	eq
 8009620:	2005      	moveq	r0, #5
 8009622:	7038      	strbeq	r0, [r7, #0]
	if (ni == 8) b <<= 2;
 8009624:	2908      	cmp	r1, #8
 8009626:	bf04      	itt	eq
 8009628:	0092      	lsleq	r2, r2, #2
 800962a:	b2d2      	uxtbeq	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800962c:	f002 0103 	and.w	r1, r2, #3
 8009630:	2901      	cmp	r1, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8009632:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8009636:	bf08      	it	eq
 8009638:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800963c:	2a04      	cmp	r2, #4
 800963e:	bf08      	it	eq
 8009640:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8009644:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009646:	2100      	movs	r1, #0
 8009648:	4620      	mov	r0, r4
 800964a:	f7ff fdb4 	bl	80091b6 <dir_sdi>
	if (res != FR_OK) return res;
 800964e:	b9f8      	cbnz	r0, 8009690 <follow_path+0x134>
		res = move_window(dp->fs, dp->sect);
 8009650:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8009654:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009658:	f7ff fbb4 	bl	8008dc4 <move_window>
		if (res != FR_OK) break;
 800965c:	b9c0      	cbnz	r0, 8009690 <follow_path+0x134>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800965e:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009662:	7813      	ldrb	r3, [r2, #0]
 8009664:	b19b      	cbz	r3, 800968e <follow_path+0x132>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8009666:	7ad3      	ldrb	r3, [r2, #11]
 8009668:	0719      	lsls	r1, r3, #28
 800966a:	d40b      	bmi.n	8009684 <follow_path+0x128>
 800966c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8009670:	f103 0e0b 	add.w	lr, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009674:	4573      	cmp	r3, lr
 8009676:	d00b      	beq.n	8009690 <follow_path+0x134>
 8009678:	f812 7b01 	ldrb.w	r7, [r2], #1
 800967c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009680:	428f      	cmp	r7, r1
 8009682:	d0f7      	beq.n	8009674 <follow_path+0x118>
		res = dir_next(dp, 0);		/* Next entry */
 8009684:	2100      	movs	r1, #0
 8009686:	4620      	mov	r0, r4
 8009688:	f7ff fed8 	bl	800943c <dir_next>
 800968c:	e7df      	b.n	800964e <follow_path+0xf2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800968e:	2004      	movs	r0, #4
			ns = dp->fn[NSFLAG];
 8009690:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8009694:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009696:	b138      	cbz	r0, 80096a8 <follow_path+0x14c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009698:	2804      	cmp	r0, #4
 800969a:	d12c      	bne.n	80096f6 <follow_path+0x19a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800969c:	f013 0f04 	tst.w	r3, #4
 80096a0:	bf08      	it	eq
 80096a2:	2005      	moveq	r0, #5
 80096a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80096a8:	075a      	lsls	r2, r3, #29
 80096aa:	d424      	bmi.n	80096f6 <follow_path+0x19a>
			dir = dp->dir;						/* Follow the sub-directory */
 80096ac:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80096b0:	7acb      	ldrb	r3, [r1, #11]
 80096b2:	06db      	lsls	r3, r3, #27
 80096b4:	d508      	bpl.n	80096c8 <follow_path+0x16c>
			dp->sclust = ld_clust(dp->fs, dir);
 80096b6:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80096ba:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 80096be:	f7ff fae6 	bl	8008c8e <ld_clust.isra.0>
 80096c2:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80096c6:	e75a      	b.n	800957e <follow_path+0x22>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80096c8:	2005      	movs	r0, #5
 80096ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80096ce:	2908      	cmp	r1, #8
 80096d0:	d188      	bne.n	80095e4 <follow_path+0x88>
			b <<= 2; continue;
 80096d2:	0092      	lsls	r2, r2, #2
			i = 8; ni = 11;
 80096d4:	468e      	mov	lr, r1
			b <<= 2; continue;
 80096d6:	b2d2      	uxtb	r2, r2
			i = 8; ni = 11;
 80096d8:	210b      	movs	r1, #11
 80096da:	e766      	b.n	80095aa <follow_path+0x4e>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80096dc:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 80096e0:	2819      	cmp	r0, #25
 80096e2:	d98a      	bls.n	80095fa <follow_path+0x9e>
				if (IsLower(c)) {		/* ASCII small capital? */
 80096e4:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 80096e8:	2819      	cmp	r0, #25
					b |= 1; c -= 0x20;
 80096ea:	bf9e      	ittt	ls
 80096ec:	3b20      	subls	r3, #32
 80096ee:	f042 0201 	orrls.w	r2, r2, #1
 80096f2:	b2db      	uxtbls	r3, r3
 80096f4:	e783      	b.n	80095fe <follow_path+0xa2>
}
 80096f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096fa:	bf00      	nop
 80096fc:	0800b7e4 	.word	0x0800b7e4
 8009700:	0800b863 	.word	0x0800b863

08009704 <dir_read.constprop.13>:
FRESULT dir_read (
 8009704:	b510      	push	{r4, lr}
 8009706:	4604      	mov	r4, r0
	res = FR_NO_FILE;
 8009708:	2004      	movs	r0, #4
	while (dp->sect) {
 800970a:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 800970e:	b909      	cbnz	r1, 8009714 <dir_read.constprop.13+0x10>
	if (res != FR_OK) dp->sect = 0;
 8009710:	b1b0      	cbz	r0, 8009740 <dir_read.constprop.13+0x3c>
 8009712:	e01d      	b.n	8009750 <dir_read.constprop.13+0x4c>
		res = move_window(dp->fs, dp->sect);
 8009714:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009718:	f7ff fb54 	bl	8008dc4 <move_window>
		if (res != FR_OK) break;
 800971c:	b9c0      	cbnz	r0, 8009750 <dir_read.constprop.13+0x4c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800971e:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		c = dir[DIR_Name];
 8009722:	7813      	ldrb	r3, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009724:	b1c3      	cbz	r3, 8009758 <dir_read.constprop.13+0x54>
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8009726:	2be5      	cmp	r3, #229	; 0xe5
 8009728:	d00c      	beq.n	8009744 <dir_read.constprop.13+0x40>
 800972a:	2b2e      	cmp	r3, #46	; 0x2e
 800972c:	d00a      	beq.n	8009744 <dir_read.constprop.13+0x40>
		a = dir[DIR_Attr] & AM_MASK;
 800972e:	7ad3      	ldrb	r3, [r2, #11]
 8009730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8009734:	2b0f      	cmp	r3, #15
 8009736:	d005      	beq.n	8009744 <dir_read.constprop.13+0x40>
 8009738:	f023 0320 	bic.w	r3, r3, #32
 800973c:	2b08      	cmp	r3, #8
 800973e:	d001      	beq.n	8009744 <dir_read.constprop.13+0x40>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009740:	2000      	movs	r0, #0
 8009742:	bd10      	pop	{r4, pc}
		res = dir_next(dp, 0);				/* Next entry */
 8009744:	2100      	movs	r1, #0
 8009746:	4620      	mov	r0, r4
 8009748:	f7ff fe78 	bl	800943c <dir_next>
		if (res != FR_OK) break;
 800974c:	2800      	cmp	r0, #0
 800974e:	d0dc      	beq.n	800970a <dir_read.constprop.13+0x6>
	if (res != FR_OK) dp->sect = 0;
 8009750:	2300      	movs	r3, #0
 8009752:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
}
 8009756:	bd10      	pop	{r4, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009758:	2004      	movs	r0, #4
 800975a:	e7f9      	b.n	8009750 <dir_read.constprop.13+0x4c>

0800975c <dir_register>:
{
 800975c:	b538      	push	{r3, r4, r5, lr}
	res = dir_sdi(dp, 0);
 800975e:	2100      	movs	r1, #0
{
 8009760:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 8009762:	f7ff fd28 	bl	80091b6 <dir_sdi>
	if (res == FR_OK) {
 8009766:	4604      	mov	r4, r0
 8009768:	bb78      	cbnz	r0, 80097ca <dir_register+0x6e>
			res = move_window(dp->fs, dp->sect);
 800976a:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 800976e:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8009772:	f7ff fb27 	bl	8008dc4 <move_window>
			if (res != FR_OK) break;
 8009776:	4604      	mov	r4, r0
 8009778:	bb38      	cbnz	r0, 80097ca <dir_register+0x6e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800977a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	2be5      	cmp	r3, #229	; 0xe5
 8009782:	d11b      	bne.n	80097bc <dir_register+0x60>
		res = move_window(dp->fs, dp->sect);
 8009784:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8009788:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 800978c:	f7ff fb1a 	bl	8008dc4 <move_window>
		if (res == FR_OK) {
 8009790:	4604      	mov	r4, r0
 8009792:	b988      	cbnz	r0, 80097b8 <dir_register+0x5c>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8009794:	4601      	mov	r1, r0
 8009796:	2220      	movs	r2, #32
 8009798:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 800979c:	f7ff f96c 	bl	8008a78 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80097a0:	220b      	movs	r2, #11
 80097a2:	f8d5 1218 	ldr.w	r1, [r5, #536]	; 0x218
 80097a6:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 80097aa:	f7ff f95b 	bl	8008a64 <mem_cpy>
			dp->fs->wflag = 1;
 80097ae:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 80097b8:	4620      	mov	r0, r4
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d0e1      	beq.n	8009784 <dir_register+0x28>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80097c0:	2101      	movs	r1, #1
 80097c2:	4628      	mov	r0, r5
 80097c4:	f7ff fe3a 	bl	800943c <dir_next>
 80097c8:	e7cd      	b.n	8009766 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80097ca:	2c04      	cmp	r4, #4
 80097cc:	bf08      	it	eq
 80097ce:	2407      	moveq	r4, #7
 80097d0:	e7f2      	b.n	80097b8 <dir_register+0x5c>

080097d2 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80097d2:	2901      	cmp	r1, #1
{
 80097d4:	b570      	push	{r4, r5, r6, lr}
 80097d6:	4604      	mov	r4, r0
 80097d8:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80097da:	d801      	bhi.n	80097e0 <remove_chain+0xe>
		res = FR_INT_ERR;
 80097dc:	2002      	movs	r0, #2
 80097de:	bd70      	pop	{r4, r5, r6, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80097e0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80097e4:	4299      	cmp	r1, r3
 80097e6:	d2f9      	bcs.n	80097dc <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80097e8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80097ec:	429d      	cmp	r5, r3
 80097ee:	d205      	bcs.n	80097fc <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80097f0:	4629      	mov	r1, r5
 80097f2:	4620      	mov	r0, r4
 80097f4:	f7ff fc7e 	bl	80090f4 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 80097f8:	4606      	mov	r6, r0
 80097fa:	b908      	cbnz	r0, 8009800 <remove_chain+0x2e>
		res = FR_INT_ERR;
 80097fc:	2000      	movs	r0, #0
 80097fe:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8009800:	2801      	cmp	r0, #1
 8009802:	d0eb      	beq.n	80097dc <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8009804:	1c41      	adds	r1, r0, #1
 8009806:	d014      	beq.n	8009832 <remove_chain+0x60>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8009808:	2200      	movs	r2, #0
 800980a:	4629      	mov	r1, r5
 800980c:	4620      	mov	r0, r4
 800980e:	f7ff fd42 	bl	8009296 <put_fat>
			if (res != FR_OK) break;
 8009812:	b978      	cbnz	r0, 8009834 <remove_chain+0x62>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8009814:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8009818:	1c5a      	adds	r2, r3, #1
 800981a:	d008      	beq.n	800982e <remove_chain+0x5c>
				fs->free_clust++;
 800981c:	3301      	adds	r3, #1
 800981e:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
				fs->fsi_flag |= 1;
 8009822:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8009826:	f043 0301 	orr.w	r3, r3, #1
 800982a:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
{
 800982e:	4635      	mov	r5, r6
 8009830:	e7da      	b.n	80097e8 <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8009832:	2001      	movs	r0, #1
}
 8009834:	bd70      	pop	{r4, r5, r6, pc}
	...

08009838 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009838:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800983a:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800983c:	a804      	add	r0, sp, #16
{
 800983e:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8009840:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8009844:	4616      	mov	r6, r2


	vol = get_ldnumber(&rp);
 8009846:	f7ff f9f3 	bl	8008c30 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800984a:	1e05      	subs	r5, r0, #0
 800984c:	db21      	blt.n	8009892 <f_mount+0x5a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800984e:	4913      	ldr	r1, [pc, #76]	; (800989c <f_mount+0x64>)
 8009850:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8009854:	b164      	cbz	r4, 8009870 <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009856:	4b12      	ldr	r3, [pc, #72]	; (80098a0 <f_mount+0x68>)
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	4294      	cmp	r4, r2
 800985c:	bf04      	itt	eq
 800985e:	2200      	moveq	r2, #0
 8009860:	601a      	streq	r2, [r3, #0]
 8009862:	68da      	ldr	r2, [r3, #12]
 8009864:	2000      	movs	r0, #0
 8009866:	4294      	cmp	r4, r2
 8009868:	bf08      	it	eq
 800986a:	60d8      	streq	r0, [r3, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800986c:	f884 0200 	strb.w	r0, [r4, #512]	; 0x200
	}

	if (fs) {
 8009870:	9801      	ldr	r0, [sp, #4]
 8009872:	b110      	cbz	r0, 800987a <f_mount+0x42>
		fs->fs_type = 0;				/* Clear new fs object */
 8009874:	2300      	movs	r3, #0
 8009876:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800987a:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800987e:	b130      	cbz	r0, 800988e <f_mount+0x56>
 8009880:	2e01      	cmp	r6, #1
 8009882:	d108      	bne.n	8009896 <f_mount+0x5e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8009884:	2200      	movs	r2, #0
 8009886:	4669      	mov	r1, sp
 8009888:	a801      	add	r0, sp, #4
 800988a:	f7ff fae5 	bl	8008e58 <find_volume>
	LEAVE_FF(fs, res);
}
 800988e:	b004      	add	sp, #16
 8009890:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8009892:	200b      	movs	r0, #11
 8009894:	e7fb      	b.n	800988e <f_mount+0x56>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009896:	2000      	movs	r0, #0
 8009898:	e7f9      	b.n	800988e <f_mount+0x56>
 800989a:	bf00      	nop
 800989c:	2000058c 	.word	0x2000058c
 80098a0:	20000590 	.word	0x20000590

080098a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80098a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098a8:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80098ac:	4690      	mov	r8, r2
 80098ae:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80098b0:	4605      	mov	r5, r0
 80098b2:	2800      	cmp	r0, #0
 80098b4:	f000 80a6 	beq.w	8009a04 <f_open+0x160>
	fp->fs = 0;			/* Clear file object */
 80098b8:	2300      	movs	r3, #0
 80098ba:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80098be:	f002 021e 	and.w	r2, r2, #30
 80098c2:	a901      	add	r1, sp, #4
 80098c4:	a886      	add	r0, sp, #536	; 0x218
 80098c6:	f7ff fac7 	bl	8008e58 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80098ca:	4606      	mov	r6, r0
 80098cc:	2800      	cmp	r0, #0
 80098ce:	f040 8094 	bne.w	80099fa <f_open+0x156>
		INIT_BUF(dj);
 80098d2:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 80098d4:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 80098d6:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 80098d8:	a806      	add	r0, sp, #24
 80098da:	f7ff fe3f 	bl	800955c <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80098de:	f008 071f 	and.w	r7, r8, #31
		dir = dj.dir;
 80098e2:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80098e4:	b948      	cbnz	r0, 80098fa <f_open+0x56>
			if (!dir)	/* Default directory itself */
 80098e6:	2c00      	cmp	r4, #0
 80098e8:	d05b      	beq.n	80099a2 <f_open+0xfe>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80098ea:	f017 0f1e 	tst.w	r7, #30
 80098ee:	bf14      	ite	ne
 80098f0:	2101      	movne	r1, #1
 80098f2:	2100      	moveq	r1, #0
 80098f4:	a806      	add	r0, sp, #24
 80098f6:	f7ff f8c7 	bl	8008a88 <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80098fa:	f018 0f1c 	tst.w	r8, #28
 80098fe:	d05b      	beq.n	80099b8 <f_open+0x114>
			if (res != FR_OK) {					/* No file, create new */
 8009900:	2800      	cmp	r0, #0
 8009902:	d050      	beq.n	80099a6 <f_open+0x102>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8009904:	2804      	cmp	r0, #4
 8009906:	d14a      	bne.n	800999e <f_open+0xfa>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009908:	4b51      	ldr	r3, [pc, #324]	; (8009a50 <f_open+0x1ac>)
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	b11a      	cbz	r2, 8009916 <f_open+0x72>
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	2b00      	cmp	r3, #0
 8009912:	f040 809b 	bne.w	8009a4c <f_open+0x1a8>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009916:	a806      	add	r0, sp, #24
 8009918:	f7ff ff20 	bl	800975c <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800991c:	2800      	cmp	r0, #0
 800991e:	d13e      	bne.n	800999e <f_open+0xfa>
				dir = dj.dir;					/* New entry */
 8009920:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009922:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009926:	073b      	lsls	r3, r7, #28
 8009928:	d550      	bpl.n	80099cc <f_open+0x128>
				dw = GET_FATTIME();				/* Created time */
 800992a:	f7f6 ff93 	bl	8000854 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 800992e:	f3c0 2307 	ubfx	r3, r0, #8, #8
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8009932:	f04f 0800 	mov.w	r8, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 8009936:	73a0      	strb	r0, [r4, #14]
 8009938:	73e3      	strb	r3, [r4, #15]
 800993a:	0c03      	lsrs	r3, r0, #16
 800993c:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800993e:	f884 800b 	strb.w	r8, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8009942:	f884 801c 	strb.w	r8, [r4, #28]
 8009946:	f884 801d 	strb.w	r8, [r4, #29]
 800994a:	f884 801e 	strb.w	r8, [r4, #30]
 800994e:	f884 801f 	strb.w	r8, [r4, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8009952:	7423      	strb	r3, [r4, #16]
 8009954:	7460      	strb	r0, [r4, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8009956:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8009958:	4621      	mov	r1, r4
 800995a:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800995e:	f7ff f996 	bl	8008c8e <ld_clust.isra.0>
	ST_WORD(dir + DIR_FstClusLO, cl);
 8009962:	f884 801a 	strb.w	r8, [r4, #26]
 8009966:	f884 801b 	strb.w	r8, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800996a:	f884 8014 	strb.w	r8, [r4, #20]
 800996e:	f884 8015 	strb.w	r8, [r4, #21]
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 8009972:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8009974:	2201      	movs	r2, #1
 8009976:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800997a:	4680      	mov	r8, r0
 800997c:	b330      	cbz	r0, 80099cc <f_open+0x128>
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
 800997e:	4601      	mov	r1, r0
 8009980:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 8009982:	f8d3 922c 	ldr.w	r9, [r3, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 8009986:	f7ff ff24 	bl	80097d2 <remove_chain>
					if (res == FR_OK) {
 800998a:	b940      	cbnz	r0, 800999e <f_open+0xfa>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800998c:	9886      	ldr	r0, [sp, #536]	; 0x218
 800998e:	f108 33ff 	add.w	r3, r8, #4294967295
 8009992:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8009996:	4649      	mov	r1, r9
 8009998:	f7ff fa14 	bl	8008dc4 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 800999c:	b1b0      	cbz	r0, 80099cc <f_open+0x128>
					res = FR_DENIED;
 800999e:	4606      	mov	r6, r0
 80099a0:	e02b      	b.n	80099fa <f_open+0x156>
				res = FR_INVALID_NAME;
 80099a2:	2006      	movs	r0, #6
 80099a4:	e7a9      	b.n	80098fa <f_open+0x56>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80099a6:	7ae3      	ldrb	r3, [r4, #11]
 80099a8:	f013 0f11 	tst.w	r3, #17
 80099ac:	d12e      	bne.n	8009a0c <f_open+0x168>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80099ae:	f018 0f04 	tst.w	r8, #4
 80099b2:	d0b8      	beq.n	8009926 <f_open+0x82>
						res = FR_EXIST;
 80099b4:	2608      	movs	r6, #8
 80099b6:	e020      	b.n	80099fa <f_open+0x156>
			if (res == FR_OK) {					/* Follow succeeded */
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d1f0      	bne.n	800999e <f_open+0xfa>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80099bc:	7ae3      	ldrb	r3, [r4, #11]
 80099be:	06d8      	lsls	r0, r3, #27
 80099c0:	d422      	bmi.n	8009a08 <f_open+0x164>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80099c2:	f018 0f02 	tst.w	r8, #2
 80099c6:	d001      	beq.n	80099cc <f_open+0x128>
 80099c8:	07da      	lsls	r2, r3, #31
 80099ca:	d41f      	bmi.n	8009a0c <f_open+0x168>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80099cc:	073b      	lsls	r3, r7, #28
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80099ce:	9b86      	ldr	r3, [sp, #536]	; 0x218
				mode |= FA__WRITTEN;
 80099d0:	bf48      	it	mi
 80099d2:	f047 0720 	orrmi.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80099d6:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80099da:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
			fp->dir_ptr = dir;
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80099de:	f017 0ffe 	tst.w	r7, #254	; 0xfe
			fp->dir_ptr = dir;
 80099e2:	f8c5 4220 	str.w	r4, [r5, #544]	; 0x220
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80099e6:	bf14      	ite	ne
 80099e8:	2101      	movne	r1, #1
 80099ea:	2100      	moveq	r1, #0
 80099ec:	a806      	add	r0, sp, #24
 80099ee:	f7ff f87d 	bl	8008aec <inc_lock>
 80099f2:	f8c5 0228 	str.w	r0, [r5, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80099f6:	b958      	cbnz	r0, 8009a10 <f_open+0x16c>
 80099f8:	2602      	movs	r6, #2
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 80099fa:	4630      	mov	r0, r6
 80099fc:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8009a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!fp) return FR_INVALID_OBJECT;
 8009a04:	2609      	movs	r6, #9
 8009a06:	e7f8      	b.n	80099fa <f_open+0x156>
					res = FR_NO_FILE;
 8009a08:	2604      	movs	r6, #4
 8009a0a:	e7f6      	b.n	80099fa <f_open+0x156>
					res = FR_DENIED;
 8009a0c:	2607      	movs	r6, #7
 8009a0e:	e7f4      	b.n	80099fa <f_open+0x156>
			fp->flag = mode;					/* File access mode */
 8009a10:	f885 7206 	strb.w	r7, [r5, #518]	; 0x206
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8009a14:	f8dd 8218 	ldr.w	r8, [sp, #536]	; 0x218
			fp->err = 0;						/* Clear error flag */
 8009a18:	2700      	movs	r7, #0
 8009a1a:	f885 7207 	strb.w	r7, [r5, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8009a1e:	f898 0200 	ldrb.w	r0, [r8, #512]	; 0x200
 8009a22:	4621      	mov	r1, r4
 8009a24:	f7ff f933 	bl	8008c8e <ld_clust.isra.0>
 8009a28:	f8c5 0210 	str.w	r0, [r5, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8009a2c:	69e3      	ldr	r3, [r4, #28]
 8009a2e:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
			fp->id = fp->fs->id;
 8009a32:	f8b8 3206 	ldrh.w	r3, [r8, #518]	; 0x206
			fp->fptr = 0;						/* File pointer */
 8009a36:	f8c5 7208 	str.w	r7, [r5, #520]	; 0x208
			fp->dsect = 0;
 8009a3a:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 8009a3e:	f8c5 7224 	str.w	r7, [r5, #548]	; 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 8009a42:	f8c5 8200 	str.w	r8, [r5, #512]	; 0x200
			fp->id = fp->fs->id;
 8009a46:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
 8009a4a:	e7d6      	b.n	80099fa <f_open+0x156>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009a4c:	2012      	movs	r0, #18
 8009a4e:	e7a6      	b.n	800999e <f_open+0xfa>
 8009a50:	20000590 	.word	0x20000590

08009a54 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009a54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a58:	469b      	mov	fp, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	f8cb 3000 	str.w	r3, [fp]
{
 8009a60:	4604      	mov	r4, r0
 8009a62:	4689      	mov	r9, r1
 8009a64:	4617      	mov	r7, r2

	res = validate(fp);						/* Check validity */
 8009a66:	f7ff f8fb 	bl	8008c60 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	bb50      	cbnz	r0, 8009ac4 <f_write+0x70>
	if (fp->err)							/* Check error */
 8009a6e:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f040 80d9 	bne.w	8009c2a <f_write+0x1d6>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8009a78:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009a7c:	0799      	lsls	r1, r3, #30
 8009a7e:	f140 80d6 	bpl.w	8009c2e <f_write+0x1da>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8009a82:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009a86:	42df      	cmn	r7, r3
 8009a88:	f0c0 8083 	bcc.w	8009b92 <f_write+0x13e>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8009a8c:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009a90:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8009a94:	4293      	cmp	r3, r2
 8009a96:	f200 80c5 	bhi.w	8009c24 <f_write+0x1d0>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8009a9a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009a9e:	f043 0320 	orr.w	r3, r3, #32
 8009aa2:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8009aa6:	e00d      	b.n	8009ac4 <f_write+0x70>
					if (fp->cltbl)
 8009aa8:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8009aac:	b173      	cbz	r3, 8009acc <f_write+0x78>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009aae:	4620      	mov	r0, r4
 8009ab0:	f7ff f87c 	bl	8008bac <clmt_clust>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009ab4:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d0e8      	beq.n	8009a8c <f_write+0x38>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009aba:	2901      	cmp	r1, #1
 8009abc:	d109      	bne.n	8009ad2 <f_write+0x7e>
 8009abe:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009ac0:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207

	LEAVE_FF(fp->fs, FR_OK);
}
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	b003      	add	sp, #12
 8009ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009acc:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8009ad0:	e07a      	b.n	8009bc8 <f_write+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009ad2:	1c4a      	adds	r2, r1, #1
 8009ad4:	d101      	bne.n	8009ada <f_write+0x86>
 8009ad6:	2601      	movs	r6, #1
 8009ad8:	e7f2      	b.n	8009ac0 <f_write+0x6c>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8009ada:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
				fp->clust = clst;			/* Update current cluster */
 8009ade:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8009ae2:	b90b      	cbnz	r3, 8009ae8 <f_write+0x94>
 8009ae4:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8009ae8:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009aec:	065b      	lsls	r3, r3, #25
 8009aee:	d511      	bpl.n	8009b14 <f_write+0xc0>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009af0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009af4:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8009af8:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8009afc:	2301      	movs	r3, #1
 8009afe:	4621      	mov	r1, r4
 8009b00:	f7fe ff2c 	bl	800895c <disk_write>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d1e6      	bne.n	8009ad6 <f_write+0x82>
				fp->flag &= ~FA__DIRTY;
 8009b08:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b10:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009b14:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 8009b18:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8009b1c:	4650      	mov	r0, sl
 8009b1e:	f7ff fadb 	bl	80090d8 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009b22:	2800      	cmp	r0, #0
 8009b24:	d0cb      	beq.n	8009abe <f_write+0x6a>
			sect += csect;
 8009b26:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009b28:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8009b2a:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009b2e:	d04e      	beq.n	8009bce <f_write+0x17a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009b30:	9a01      	ldr	r2, [sp, #4]
 8009b32:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8009b36:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009b3a:	442a      	add	r2, r5
 8009b3c:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 8009b3e:	bf84      	itt	hi
 8009b40:	9a01      	ldrhi	r2, [sp, #4]
 8009b42:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8009b44:	462b      	mov	r3, r5
 8009b46:	4642      	mov	r2, r8
 8009b48:	4649      	mov	r1, r9
 8009b4a:	f7fe ff07 	bl	800895c <disk_write>
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	d1c1      	bne.n	8009ad6 <f_write+0x82>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009b52:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 8009b56:	eba1 0108 	sub.w	r1, r1, r8
 8009b5a:	428d      	cmp	r5, r1
 8009b5c:	d90c      	bls.n	8009b78 <f_write+0x124>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8009b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b62:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8009b66:	4620      	mov	r0, r4
 8009b68:	f7fe ff7c 	bl	8008a64 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8009b6c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b74:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8009b78:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8009b7a:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009b7e:	442b      	add	r3, r5
 8009b80:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8009b84:	f8db 3000 	ldr.w	r3, [fp]
 8009b88:	442b      	add	r3, r5
 8009b8a:	44a9      	add	r9, r5
 8009b8c:	f8cb 3000 	str.w	r3, [fp]
 8009b90:	1b7f      	subs	r7, r7, r5
	for ( ;  btw;							/* Repeat until all data written */
 8009b92:	2f00      	cmp	r7, #0
 8009b94:	f43f af7a 	beq.w	8009a8c <f_write+0x38>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8009b98:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 8009b9c:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8009ba0:	bb5b      	cbnz	r3, 8009bfa <f_write+0x1a6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009ba2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009ba6:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8009baa:	3b01      	subs	r3, #1
 8009bac:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 8009bb0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8009bb4:	9301      	str	r3, [sp, #4]
 8009bb6:	d197      	bne.n	8009ae8 <f_write+0x94>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009bb8:	2900      	cmp	r1, #0
 8009bba:	f47f af75 	bne.w	8009aa8 <f_write+0x54>
					clst = fp->sclust;		/* Follow from the origin */
 8009bbe:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 8009bc2:	2900      	cmp	r1, #0
 8009bc4:	f47f af79 	bne.w	8009aba <f_write+0x66>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009bc8:	f7ff fbdf 	bl	800938a <create_chain>
 8009bcc:	e772      	b.n	8009ab4 <f_write+0x60>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8009bce:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8009bd2:	4598      	cmp	r8, r3
 8009bd4:	d00f      	beq.n	8009bf6 <f_write+0x1a2>
				if (fp->fptr < fp->fsize &&
 8009bd6:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 8009bda:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d209      	bcs.n	8009bf6 <f_write+0x1a2>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8009be2:	2301      	movs	r3, #1
 8009be4:	4642      	mov	r2, r8
 8009be6:	4621      	mov	r1, r4
 8009be8:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 8009bec:	f7fe fea8 	bl	8008940 <disk_read>
				if (fp->fptr < fp->fsize &&
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	f47f af70 	bne.w	8009ad6 <f_write+0x82>
			fp->dsect = sect;
 8009bf6:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8009bfa:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 8009bfe:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8009c02:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 8009c06:	42bd      	cmp	r5, r7
 8009c08:	bf28      	it	cs
 8009c0a:	463d      	movcs	r5, r7
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8009c0c:	462a      	mov	r2, r5
 8009c0e:	4649      	mov	r1, r9
 8009c10:	4420      	add	r0, r4
 8009c12:	f7fe ff27 	bl	8008a64 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8009c16:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c1e:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8009c22:	e7aa      	b.n	8009b7a <f_write+0x126>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8009c24:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 8009c28:	e737      	b.n	8009a9a <f_write+0x46>
 8009c2a:	461e      	mov	r6, r3
 8009c2c:	e74a      	b.n	8009ac4 <f_write+0x70>
		LEAVE_FF(fp->fs, FR_DENIED);
 8009c2e:	2607      	movs	r6, #7
 8009c30:	e748      	b.n	8009ac4 <f_write+0x70>

08009c32 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009c32:	b570      	push	{r4, r5, r6, lr}
 8009c34:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8009c36:	f7ff f813 	bl	8008c60 <validate>
	if (res == FR_OK) {
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d158      	bne.n	8009cf0 <f_sync+0xbe>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8009c3e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009c42:	069a      	lsls	r2, r3, #26
 8009c44:	d554      	bpl.n	8009cf0 <f_sync+0xbe>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8009c46:	065b      	lsls	r3, r3, #25
 8009c48:	d511      	bpl.n	8009c6e <f_sync+0x3c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009c4a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009c4e:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8009c52:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8009c56:	2301      	movs	r3, #1
 8009c58:	4621      	mov	r1, r4
 8009c5a:	f7fe fe7f 	bl	800895c <disk_write>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d145      	bne.n	8009cee <f_sync+0xbc>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 8009c62:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c6a:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8009c6e:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 8009c72:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009c76:	f7ff f8a5 	bl	8008dc4 <move_window>
 8009c7a:	4606      	mov	r6, r0
			if (res == FR_OK) {
 8009c7c:	bbc0      	cbnz	r0, 8009cf0 <f_sync+0xbe>
				dir = fp->dir_ptr;
 8009c7e:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8009c82:	7aeb      	ldrb	r3, [r5, #11]
 8009c84:	f043 0320 	orr.w	r3, r3, #32
 8009c88:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8009c8a:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8009c8e:	772b      	strb	r3, [r5, #28]
 8009c90:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 8009c94:	0a1b      	lsrs	r3, r3, #8
 8009c96:	776b      	strb	r3, [r5, #29]
 8009c98:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8009c9c:	77ab      	strb	r3, [r5, #30]
 8009c9e:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 8009ca2:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8009ca4:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 8009ca8:	76ab      	strb	r3, [r5, #26]
 8009caa:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8009cae:	0c1b      	lsrs	r3, r3, #16
 8009cb0:	752b      	strb	r3, [r5, #20]
 8009cb2:	0a1b      	lsrs	r3, r3, #8
 8009cb4:	756b      	strb	r3, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8009cb6:	76ea      	strb	r2, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 8009cb8:	f7f6 fdcc 	bl	8000854 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009cbc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009cc0:	75a8      	strb	r0, [r5, #22]
 8009cc2:	75eb      	strb	r3, [r5, #23]
 8009cc4:	0c03      	lsrs	r3, r0, #16
 8009cc6:	0e00      	lsrs	r0, r0, #24
 8009cc8:	762b      	strb	r3, [r5, #24]
 8009cca:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8009ccc:	74ae      	strb	r6, [r5, #18]
 8009cce:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 8009cd0:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 8009cd4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 8009cd8:	f023 0320 	bic.w	r3, r3, #32
 8009cdc:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 8009ce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 8009cea:	f7ff b80e 	b.w	8008d0a <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8009cee:	2001      	movs	r0, #1
}
 8009cf0:	bd70      	pop	{r4, r5, r6, pc}

08009cf2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8009cf2:	b510      	push	{r4, lr}
 8009cf4:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009cf6:	f7ff ff9c 	bl	8009c32 <f_sync>
	if (res == FR_OK)
 8009cfa:	b950      	cbnz	r0, 8009d12 <f_close+0x20>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f7fe ffaf 	bl	8008c60 <validate>
		if (res == FR_OK) {
 8009d02:	b930      	cbnz	r0, 8009d12 <f_close+0x20>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8009d04:	f8d4 0228 	ldr.w	r0, [r4, #552]	; 0x228
 8009d08:	f7fe ff34 	bl	8008b74 <dec_lock>
			if (res == FR_OK)
 8009d0c:	b908      	cbnz	r0, 8009d12 <f_close+0x20>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8009d0e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8009d12:	bd10      	pop	{r4, pc}

08009d14 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8009d14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d18:	4604      	mov	r4, r0
 8009d1a:	460d      	mov	r5, r1
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8009d1c:	f7fe ffa0 	bl	8008c60 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009d20:	4606      	mov	r6, r0
 8009d22:	bb10      	cbnz	r0, 8009d6a <f_lseek+0x56>
	if (fp->err)						/* Check error */
 8009d24:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f040 813e 	bne.w	8009faa <f_lseek+0x296>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009d2e:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f000 8087 	beq.w	8009e46 <f_lseek+0x132>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009d38:	1c6a      	adds	r2, r5, #1
 8009d3a:	d13d      	bne.n	8009db8 <f_lseek+0xa4>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
			cl = fp->sclust;			/* Top of the chain */
 8009d3c:	f8d4 7210 	ldr.w	r7, [r4, #528]	; 0x210
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009d40:	f8d3 b000 	ldr.w	fp, [r3]
 8009d44:	f103 0a04 	add.w	sl, r3, #4
 8009d48:	2502      	movs	r5, #2
			if (cl) {
 8009d4a:	b35f      	cbz	r7, 8009da4 <f_lseek+0x90>
 8009d4c:	46b8      	mov	r8, r7
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009d4e:	f04f 0900 	mov.w	r9, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(fp->fs, cl);
 8009d52:	4641      	mov	r1, r8
 8009d54:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009d58:	f7ff f9cc 	bl	80090f4 <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8009d5c:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 8009d5e:	f109 0901 	add.w	r9, r9, #1
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8009d62:	d807      	bhi.n	8009d74 <f_lseek+0x60>
 8009d64:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009d66:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d70:	4607      	mov	r7, r0
 8009d72:	e7eb      	b.n	8009d4c <f_lseek+0x38>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009d74:	1c43      	adds	r3, r0, #1
 8009d76:	d101      	bne.n	8009d7c <f_lseek+0x68>
 8009d78:	2601      	movs	r6, #1
 8009d7a:	e7f4      	b.n	8009d66 <f_lseek+0x52>
					} while (cl == pcl + 1);
 8009d7c:	f108 0301 	add.w	r3, r8, #1
 8009d80:	4298      	cmp	r0, r3
 8009d82:	4680      	mov	r8, r0
 8009d84:	d0e5      	beq.n	8009d52 <f_lseek+0x3e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009d86:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009d88:	45ab      	cmp	fp, r5
						*tbl++ = ncl; *tbl++ = tcl;
 8009d8a:	bf21      	itttt	cs
 8009d8c:	4653      	movcs	r3, sl
 8009d8e:	f843 9b08 	strcs.w	r9, [r3], #8
 8009d92:	f8ca 7004 	strcs.w	r7, [sl, #4]
 8009d96:	469a      	movcs	sl, r3
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8009d98:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8009d9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009da0:	4298      	cmp	r0, r3
 8009da2:	d3e5      	bcc.n	8009d70 <f_lseek+0x5c>
			*fp->cltbl = ulen;	/* Number of items used */
 8009da4:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
			if (ulen <= tlen)
 8009da8:	455d      	cmp	r5, fp
			*fp->cltbl = ulen;	/* Number of items used */
 8009daa:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen)
 8009dac:	f200 80ff 	bhi.w	8009fae <f_lseek+0x29a>
				*tbl = 0;		/* Terminate table */
 8009db0:	2300      	movs	r3, #0
 8009db2:	f8ca 3000 	str.w	r3, [sl]
 8009db6:	e7d8      	b.n	8009d6a <f_lseek+0x56>
 8009db8:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
 8009dbc:	4285      	cmp	r5, r0
 8009dbe:	bf28      	it	cs
 8009dc0:	4605      	movcs	r5, r0
			fp->fptr = ofs;				/* Set file pointer */
 8009dc2:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
			if (ofs) {
 8009dc6:	2d00      	cmp	r5, #0
 8009dc8:	d0cf      	beq.n	8009d6a <f_lseek+0x56>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009dca:	f105 38ff 	add.w	r8, r5, #4294967295
 8009dce:	4641      	mov	r1, r8
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f7fe feeb 	bl	8008bac <clmt_clust>
				dsc = clust2sect(fp->fs, fp->clust);
 8009dd6:	f8d4 7200 	ldr.w	r7, [r4, #512]	; 0x200
				fp->clust = clmt_clust(fp, ofs - 1);
 8009dda:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
 8009dde:	4601      	mov	r1, r0
				dsc = clust2sect(fp->fs, fp->clust);
 8009de0:	4638      	mov	r0, r7
 8009de2:	f7ff f979 	bl	80090d8 <clust2sect>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d0bc      	beq.n	8009d64 <f_lseek+0x50>
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009dea:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8009dee:	2d00      	cmp	r5, #0
 8009df0:	d0bb      	beq.n	8009d6a <f_lseek+0x56>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8009df2:	f897 5202 	ldrb.w	r5, [r7, #514]	; 0x202
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009df6:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8009dfa:	3d01      	subs	r5, #1
 8009dfc:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 8009e00:	4405      	add	r5, r0
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009e02:	4295      	cmp	r5, r2
 8009e04:	d0b1      	beq.n	8009d6a <f_lseek+0x56>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8009e06:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009e0a:	0659      	lsls	r1, r3, #25
 8009e0c:	d50d      	bpl.n	8009e2a <f_lseek+0x116>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009e0e:	2301      	movs	r3, #1
 8009e10:	4621      	mov	r1, r4
 8009e12:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 8009e16:	f7fe fda1 	bl	800895c <disk_write>
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d1ac      	bne.n	8009d78 <f_lseek+0x64>
						fp->flag &= ~FA__DIRTY;
 8009e1e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e26:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8009e2a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009e2e:	2301      	movs	r3, #1
 8009e30:	462a      	mov	r2, r5
 8009e32:	4621      	mov	r1, r4
 8009e34:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8009e38:	f7fe fd82 	bl	8008940 <disk_read>
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	d19b      	bne.n	8009d78 <f_lseek+0x64>
					fp->dsect = dsc;
 8009e40:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 8009e44:	e791      	b.n	8009d6a <f_lseek+0x56>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8009e46:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8009e4a:	429d      	cmp	r5, r3
 8009e4c:	d905      	bls.n	8009e5a <f_lseek+0x146>
			 && !(fp->flag & FA_WRITE)
 8009e4e:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 8009e52:	f012 0f02 	tst.w	r2, #2
 8009e56:	bf08      	it	eq
 8009e58:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 8009e5a:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8009e5c:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
		fp->fptr = nsect = 0;
 8009e60:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
		if (ofs) {
 8009e64:	2d00      	cmp	r5, #0
 8009e66:	d13e      	bne.n	8009ee6 <f_lseek+0x1d2>
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8009e68:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009e6c:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8009e70:	4293      	cmp	r3, r2
 8009e72:	f67f af7a 	bls.w	8009d6a <f_lseek+0x56>
			fp->fsize = fp->fptr;
 8009e76:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8009e7a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009e7e:	f043 0320 	orr.w	r3, r3, #32
 8009e82:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8009e86:	e770      	b.n	8009d6a <f_lseek+0x56>
		fp->fptr = nsect = 0;
 8009e88:	2500      	movs	r5, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8009e8a:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d0e8      	beq.n	8009e68 <f_lseek+0x154>
 8009e96:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8009e9a:	4295      	cmp	r5, r2
 8009e9c:	d0e4      	beq.n	8009e68 <f_lseek+0x154>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8009e9e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009ea2:	065b      	lsls	r3, r3, #25
 8009ea4:	d510      	bpl.n	8009ec8 <f_lseek+0x1b4>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009ea6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009eaa:	2301      	movs	r3, #1
 8009eac:	4621      	mov	r1, r4
 8009eae:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8009eb2:	f7fe fd53 	bl	800895c <disk_write>
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	f47f af5e 	bne.w	8009d78 <f_lseek+0x64>
				fp->flag &= ~FA__DIRTY;
 8009ebc:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ec4:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8009ec8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009ecc:	2301      	movs	r3, #1
 8009ece:	462a      	mov	r2, r5
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8009ed6:	f7fe fd33 	bl	8008940 <disk_read>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	f47f af4c 	bne.w	8009d78 <f_lseek+0x64>
			fp->dsect = nsect;
 8009ee0:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 8009ee4:	e7c0      	b.n	8009e68 <f_lseek+0x154>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8009ee6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009eea:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 8009eee:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 8009ef0:	b32b      	cbz	r3, 8009f3e <f_lseek+0x22a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	1e6a      	subs	r2, r5, #1
 8009ef6:	fbb3 f1f7 	udiv	r1, r3, r7
 8009efa:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 8009efe:	428a      	cmp	r2, r1
 8009f00:	d31d      	bcc.n	8009f3e <f_lseek+0x22a>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009f02:	427a      	negs	r2, r7
 8009f04:	4013      	ands	r3, r2
				clst = fp->clust;
 8009f06:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009f0a:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				ofs -= fp->fptr;
 8009f0e:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 8009f10:	2900      	cmp	r1, #0
 8009f12:	d0b9      	beq.n	8009e88 <f_lseek+0x174>
				while (ofs > bcs) {						/* Cluster following loop */
 8009f14:	42bd      	cmp	r5, r7
 8009f16:	d823      	bhi.n	8009f60 <f_lseek+0x24c>
				fp->fptr += ofs;
 8009f18:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009f1c:	442b      	add	r3, r5
 8009f1e:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8009f22:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d0ae      	beq.n	8009e88 <f_lseek+0x174>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8009f2a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009f2e:	f7ff f8d3 	bl	80090d8 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8009f32:	2800      	cmp	r0, #0
 8009f34:	f43f af16 	beq.w	8009d64 <f_lseek+0x50>
					nsect += ofs / SS(fp->fs);
 8009f38:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 8009f3c:	e7a5      	b.n	8009e8a <f_lseek+0x176>
				clst = fp->sclust;						/* start from the first cluster */
 8009f3e:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009f42:	b951      	cbnz	r1, 8009f5a <f_lseek+0x246>
					clst = create_chain(fp->fs, 0);
 8009f44:	f7ff fa21 	bl	800938a <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009f48:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 8009f4a:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009f4c:	f43f af0a 	beq.w	8009d64 <f_lseek+0x50>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009f50:	1c42      	adds	r2, r0, #1
 8009f52:	f43f af11 	beq.w	8009d78 <f_lseek+0x64>
					fp->sclust = clst;
 8009f56:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
				fp->clust = clst;
 8009f5a:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
 8009f5e:	e7d7      	b.n	8009f10 <f_lseek+0x1fc>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009f60:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8009f64:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009f68:	079b      	lsls	r3, r3, #30
 8009f6a:	d505      	bpl.n	8009f78 <f_lseek+0x264>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8009f6c:	f7ff fa0d 	bl	800938a <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 8009f70:	4601      	mov	r1, r0
 8009f72:	b920      	cbnz	r0, 8009f7e <f_lseek+0x26a>
 8009f74:	463d      	mov	r5, r7
 8009f76:	e7cf      	b.n	8009f18 <f_lseek+0x204>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8009f78:	f7ff f8bc 	bl	80090f4 <get_fat>
 8009f7c:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009f7e:	1c4a      	adds	r2, r1, #1
 8009f80:	f43f aefa 	beq.w	8009d78 <f_lseek+0x64>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8009f84:	2901      	cmp	r1, #1
 8009f86:	f67f aeed 	bls.w	8009d64 <f_lseek+0x50>
 8009f8a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8009f8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f92:	4299      	cmp	r1, r3
 8009f94:	f4bf aee6 	bcs.w	8009d64 <f_lseek+0x50>
					fp->fptr += bcs;
 8009f98:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
					fp->clust = clst;
 8009f9c:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
					fp->fptr += bcs;
 8009fa0:	443b      	add	r3, r7
 8009fa2:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
					ofs -= bcs;
 8009fa6:	1bed      	subs	r5, r5, r7
 8009fa8:	e7b4      	b.n	8009f14 <f_lseek+0x200>
 8009faa:	461e      	mov	r6, r3
 8009fac:	e6dd      	b.n	8009d6a <f_lseek+0x56>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009fae:	2611      	movs	r6, #17
 8009fb0:	e6db      	b.n	8009d6a <f_lseek+0x56>

08009fb2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009fb2:	b530      	push	{r4, r5, lr}
 8009fb4:	b087      	sub	sp, #28
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8009fb6:	4605      	mov	r5, r0
{
 8009fb8:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d045      	beq.n	800a04a <f_opendir+0x98>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	a901      	add	r1, sp, #4
 8009fc2:	a802      	add	r0, sp, #8
 8009fc4:	f7fe ff48 	bl	8008e58 <find_volume>
	if (res == FR_OK) {
 8009fc8:	4604      	mov	r4, r0
 8009fca:	bb30      	cbnz	r0, 800a01a <f_opendir+0x68>
		dp->fs = fs;
 8009fcc:	9b02      	ldr	r3, [sp, #8]
 8009fce:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
		INIT_BUF(*dp);
 8009fd2:	ab03      	add	r3, sp, #12
 8009fd4:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8009fd8:	9901      	ldr	r1, [sp, #4]
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f7ff fabe 	bl	800955c <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	b9b8      	cbnz	r0, 800a014 <f_opendir+0x62>
			if (dp->dir) {						/* It is not the origin directory itself */
 8009fe4:	f8d5 1214 	ldr.w	r1, [r5, #532]	; 0x214
 8009fe8:	b149      	cbz	r1, 8009ffe <f_opendir+0x4c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8009fea:	7acb      	ldrb	r3, [r1, #11]
 8009fec:	06db      	lsls	r3, r3, #27
 8009fee:	d528      	bpl.n	800a042 <f_opendir+0x90>
					dp->sclust = ld_clust(fs, dp->dir);
 8009ff0:	9b02      	ldr	r3, [sp, #8]
 8009ff2:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8009ff6:	f7fe fe4a 	bl	8008c8e <ld_clust.isra.0>
 8009ffa:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
				else							/* The object is a file */
					res = FR_NO_PATH;
			}
			if (res == FR_OK) {
				dp->id = fs->id;
 8009ffe:	9b02      	ldr	r3, [sp, #8]
 800a000:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800a004:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800a008:	2100      	movs	r1, #0
 800a00a:	4628      	mov	r0, r5
 800a00c:	f7ff f8d3 	bl	80091b6 <dir_sdi>
#if _FS_LOCK
				if (res == FR_OK) {
 800a010:	4604      	mov	r4, r0
 800a012:	b130      	cbz	r0, 800a022 <f_opendir+0x70>
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a014:	2c04      	cmp	r4, #4
 800a016:	bf08      	it	eq
 800a018:	2405      	moveq	r4, #5
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800a01a:	2300      	movs	r3, #0
 800a01c:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
 800a020:	e009      	b.n	800a036 <f_opendir+0x84>
					if (dp->sclust) {
 800a022:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 800a026:	b14b      	cbz	r3, 800a03c <f_opendir+0x8a>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800a028:	4621      	mov	r1, r4
 800a02a:	4628      	mov	r0, r5
 800a02c:	f7fe fd5e 	bl	8008aec <inc_lock>
 800a030:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
						if (!dp->lockid)
 800a034:	b138      	cbz	r0, 800a046 <f_opendir+0x94>

	LEAVE_FF(fs, res);
}
 800a036:	4620      	mov	r0, r4
 800a038:	b007      	add	sp, #28
 800a03a:	bd30      	pop	{r4, r5, pc}
						dp->lockid = 0;	/* Root directory need not to be locked */
 800a03c:	f8c5 421c 	str.w	r4, [r5, #540]	; 0x21c
 800a040:	e7f9      	b.n	800a036 <f_opendir+0x84>
					res = FR_NO_PATH;
 800a042:	2405      	movs	r4, #5
 800a044:	e7e9      	b.n	800a01a <f_opendir+0x68>
							res = FR_TOO_MANY_OPEN_FILES;
 800a046:	2412      	movs	r4, #18
 800a048:	e7e7      	b.n	800a01a <f_opendir+0x68>
	if (!dp) return FR_INVALID_OBJECT;
 800a04a:	2409      	movs	r4, #9
 800a04c:	e7f3      	b.n	800a036 <f_opendir+0x84>

0800a04e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a04e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a050:	4605      	mov	r5, r0
 800a052:	460e      	mov	r6, r1
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 800a054:	f7fe fe04 	bl	8008c60 <validate>
	if (res == FR_OK) {
 800a058:	4604      	mov	r4, r0
 800a05a:	b9e8      	cbnz	r0, 800a098 <f_readdir+0x4a>
		if (!fno) {
 800a05c:	b92e      	cbnz	r6, 800a06a <f_readdir+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a05e:	4601      	mov	r1, r0
 800a060:	4628      	mov	r0, r5
 800a062:	f7ff f8a8 	bl	80091b6 <dir_sdi>
 800a066:	4604      	mov	r4, r0
 800a068:	e016      	b.n	800a098 <f_readdir+0x4a>
		} else {
			INIT_BUF(*dp);
 800a06a:	ab01      	add	r3, sp, #4
 800a06c:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 800a070:	4628      	mov	r0, r5
 800a072:	f7ff fb47 	bl	8009704 <dir_read.constprop.13>
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800a076:	2804      	cmp	r0, #4
 800a078:	d111      	bne.n	800a09e <f_readdir+0x50>
				dp->sect = 0;
 800a07a:	f8c5 4210 	str.w	r4, [r5, #528]	; 0x210
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
 800a07e:	4631      	mov	r1, r6
 800a080:	4628      	mov	r0, r5
 800a082:	f7fe fda7 	bl	8008bd4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a086:	2100      	movs	r1, #0
 800a088:	4628      	mov	r0, r5
 800a08a:	f7ff f9d7 	bl	800943c <dir_next>
				if (res == FR_NO_FILE) {
 800a08e:	2804      	cmp	r0, #4
 800a090:	d1e9      	bne.n	800a066 <f_readdir+0x18>
					dp->sect = 0;
 800a092:	2300      	movs	r3, #0
 800a094:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
}
 800a098:	4620      	mov	r0, r4
 800a09a:	b004      	add	sp, #16
 800a09c:	bd70      	pop	{r4, r5, r6, pc}
			if (res == FR_OK) {				/* A valid entry is found */
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d1e1      	bne.n	800a066 <f_readdir+0x18>
 800a0a2:	e7ec      	b.n	800a07e <f_readdir+0x30>

0800a0a4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800a0a4:	b530      	push	{r4, r5, lr}
 800a0a6:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
	DWORD dclst = 0;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 800a0aa:	2201      	movs	r2, #1
{
 800a0ac:	9001      	str	r0, [sp, #4]
	res = find_volume(&dj.fs, &path, 1);
 800a0ae:	a901      	add	r1, sp, #4
 800a0b0:	a886      	add	r0, sp, #536	; 0x218
 800a0b2:	f7fe fed1 	bl	8008e58 <find_volume>
	if (res == FR_OK) {
 800a0b6:	b988      	cbnz	r0, 800a0dc <f_unlink+0x38>
		INIT_BUF(dj);
 800a0b8:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);		/* Follow the file path */
 800a0ba:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800a0bc:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);		/* Follow the file path */
 800a0be:	a806      	add	r0, sp, #24
 800a0c0:	f7ff fa4c 	bl	800955c <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
 800a0c4:	b950      	cbnz	r0, 800a0dc <f_unlink+0x38>
 800a0c6:	2102      	movs	r1, #2
 800a0c8:	a806      	add	r0, sp, #24
 800a0ca:	f7fe fcdd 	bl	8008a88 <chk_lock>
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800a0ce:	b928      	cbnz	r0, 800a0dc <f_unlink+0x38>
			dir = dj.dir;
 800a0d0:	998b      	ldr	r1, [sp, #556]	; 0x22c
			if (!dir) {
 800a0d2:	b169      	cbz	r1, 800a0f0 <f_unlink+0x4c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 800a0d4:	7acd      	ldrb	r5, [r1, #11]
 800a0d6:	07ea      	lsls	r2, r5, #31
 800a0d8:	d50c      	bpl.n	800a0f4 <f_unlink+0x50>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800a0da:	2007      	movs	r0, #7
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
 800a0dc:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c
 800a0e0:	bd30      	pop	{r4, r5, pc}
					res = remove_chain(dj.fs, dclst);
 800a0e2:	4621      	mov	r1, r4
 800a0e4:	9886      	ldr	r0, [sp, #536]	; 0x218
 800a0e6:	f7ff fb74 	bl	80097d2 <remove_chain>
				if (res == FR_OK) res = sync_fs(dj.fs);
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	d1f6      	bne.n	800a0dc <f_unlink+0x38>
 800a0ee:	e026      	b.n	800a13e <f_unlink+0x9a>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800a0f0:	2006      	movs	r0, #6
 800a0f2:	e7f3      	b.n	800a0dc <f_unlink+0x38>
				dclst = ld_clust(dj.fs, dir);
 800a0f4:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800a0f6:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800a0fa:	f7fe fdc8 	bl	8008c8e <ld_clust.isra.0>
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 800a0fe:	4604      	mov	r4, r0
 800a100:	b1b0      	cbz	r0, 800a130 <f_unlink+0x8c>
 800a102:	06eb      	lsls	r3, r5, #27
 800a104:	d514      	bpl.n	800a130 <f_unlink+0x8c>
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 800a106:	a906      	add	r1, sp, #24
 800a108:	a88e      	add	r0, sp, #568	; 0x238
 800a10a:	f44f 7208 	mov.w	r2, #544	; 0x220
 800a10e:	f7fe fca9 	bl	8008a64 <mem_cpy>
						res = dir_sdi(&sdj, 2);
 800a112:	2102      	movs	r1, #2
 800a114:	a88e      	add	r0, sp, #568	; 0x238
						sdj.sclust = dclst;
 800a116:	f8cd 4440 	str.w	r4, [sp, #1088]	; 0x440
						res = dir_sdi(&sdj, 2);
 800a11a:	f7ff f84c 	bl	80091b6 <dir_sdi>
						if (res == FR_OK) {
 800a11e:	2800      	cmp	r0, #0
 800a120:	d1dc      	bne.n	800a0dc <f_unlink+0x38>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 800a122:	a88e      	add	r0, sp, #568	; 0x238
 800a124:	f7ff faee 	bl	8009704 <dir_read.constprop.13>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 800a128:	2800      	cmp	r0, #0
 800a12a:	d0d6      	beq.n	800a0da <f_unlink+0x36>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 800a12c:	2804      	cmp	r0, #4
 800a12e:	d1d5      	bne.n	800a0dc <f_unlink+0x38>
				res = dir_remove(&dj);		/* Remove the directory entry */
 800a130:	a806      	add	r0, sp, #24
 800a132:	f7ff f88f 	bl	8009254 <dir_remove>
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 800a136:	2800      	cmp	r0, #0
 800a138:	d1d0      	bne.n	800a0dc <f_unlink+0x38>
 800a13a:	2c00      	cmp	r4, #0
 800a13c:	d1d1      	bne.n	800a0e2 <f_unlink+0x3e>
				if (res == FR_OK) res = sync_fs(dj.fs);
 800a13e:	9886      	ldr	r0, [sp, #536]	; 0x218
 800a140:	f7fe fde3 	bl	8008d0a <sync_fs>
 800a144:	e7ca      	b.n	800a0dc <f_unlink+0x38>

0800a146 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the time stamp to be set */
)
{
 800a146:	b510      	push	{r4, lr}
 800a148:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800a14c:	460c      	mov	r4, r1
 800a14e:	9001      	str	r0, [sp, #4]
	BYTE *dir;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 800a150:	2201      	movs	r2, #1
 800a152:	a901      	add	r1, sp, #4
 800a154:	a886      	add	r0, sp, #536	; 0x218
 800a156:	f7fe fe7f 	bl	8008e58 <find_volume>
	if (res == FR_OK) {
 800a15a:	b9c0      	cbnz	r0, 800a18e <f_utime+0x48>
		INIT_BUF(dj);
 800a15c:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 800a15e:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800a160:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 800a162:	a806      	add	r0, sp, #24
 800a164:	f7ff f9fa 	bl	800955c <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
 800a168:	b988      	cbnz	r0, 800a18e <f_utime+0x48>
			dir = dj.dir;
 800a16a:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
			if (!dir) {					/* Root directory */
 800a16c:	b193      	cbz	r3, 800a194 <f_utime+0x4e>
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir + DIR_WrtTime, fno->ftime);
 800a16e:	88e2      	ldrh	r2, [r4, #6]
 800a170:	759a      	strb	r2, [r3, #22]
 800a172:	88e2      	ldrh	r2, [r4, #6]
 800a174:	0a12      	lsrs	r2, r2, #8
 800a176:	75da      	strb	r2, [r3, #23]
				ST_WORD(dir + DIR_WrtDate, fno->fdate);
 800a178:	88a2      	ldrh	r2, [r4, #4]
 800a17a:	761a      	strb	r2, [r3, #24]
 800a17c:	88a2      	ldrh	r2, [r4, #4]
 800a17e:	0a12      	lsrs	r2, r2, #8
 800a180:	765a      	strb	r2, [r3, #25]
				dj.fs->wflag = 1;
 800a182:	9886      	ldr	r0, [sp, #536]	; 0x218
 800a184:	2301      	movs	r3, #1
 800a186:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
				res = sync_fs(dj.fs);
 800a18a:	f7fe fdbe 	bl	8008d0a <sync_fs>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
 800a18e:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800a192:	bd10      	pop	{r4, pc}
				res = FR_INVALID_NAME;
 800a194:	2006      	movs	r0, #6
 800a196:	e7fa      	b.n	800a18e <f_utime+0x48>

0800a198 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a198:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 800a19a:	4b0f      	ldr	r3, [pc, #60]	; (800a1d8 <FATFS_LinkDriverEx+0x40>)
 800a19c:	7a5c      	ldrb	r4, [r3, #9]
 800a19e:	2c01      	cmp	r4, #1
 800a1a0:	d818      	bhi.n	800a1d4 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a1a2:	7a5d      	ldrb	r5, [r3, #9]
 800a1a4:	b2ed      	uxtb	r5, r5
 800a1a6:	2400      	movs	r4, #0
 800a1a8:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 800a1aa:	7a5d      	ldrb	r5, [r3, #9]
 800a1ac:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a1b0:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 800a1b2:	7a58      	ldrb	r0, [r3, #9]
 800a1b4:	4418      	add	r0, r3
 800a1b6:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800a1b8:	7a5a      	ldrb	r2, [r3, #9]
 800a1ba:	b2d2      	uxtb	r2, r2
 800a1bc:	1c50      	adds	r0, r2, #1
 800a1be:	b2c0      	uxtb	r0, r0
 800a1c0:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 800a1c2:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800a1c4:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 800a1c6:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800a1c8:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800a1ca:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800a1cc:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800a1ce:	70cc      	strb	r4, [r1, #3]
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800a1d4:	2001      	movs	r0, #1
    ret = 0;
  }
  
  return ret;
}
 800a1d6:	bd30      	pop	{r4, r5, pc}
 800a1d8:	200005ac 	.word	0x200005ac

0800a1dc <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f7ff bfdb 	b.w	800a198 <FATFS_LinkDriverEx>
	...

0800a1e4 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{ 
  uint8_t DiskNum = 0;
  uint8_t ret = 1;
  
  if(disk.nbr >= 1)
 800a1e4:	4a0a      	ldr	r2, [pc, #40]	; (800a210 <FATFS_UnLinkDriverEx+0x2c>)
 800a1e6:	7a53      	ldrb	r3, [r2, #9]
 800a1e8:	b17b      	cbz	r3, 800a20a <FATFS_UnLinkDriverEx+0x26>
  {    
    DiskNum = path[0] - '0';
 800a1ea:	7803      	ldrb	r3, [r0, #0]
 800a1ec:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800a1f4:	6848      	ldr	r0, [r1, #4]
 800a1f6:	b140      	cbz	r0, 800a20a <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 800a1f8:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 800a1fa:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 800a1fc:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 800a1fe:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 800a200:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 800a202:	3b01      	subs	r3, #1
 800a204:	b2db      	uxtb	r3, r3
 800a206:	7253      	strb	r3, [r2, #9]
 800a208:	4770      	bx	lr
  uint8_t ret = 1;
 800a20a:	2001      	movs	r0, #1
      ret = 0;
    }
  }
  
  return ret;
}
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	200005ac 	.word	0x200005ac

0800a214 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path  
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{ 
  return FATFS_UnLinkDriverEx(path, 0);
 800a214:	2100      	movs	r1, #0
 800a216:	f7ff bfe5 	b.w	800a1e4 <FATFS_UnLinkDriverEx>
	...

0800a21c <__libc_init_array>:
 800a21c:	b570      	push	{r4, r5, r6, lr}
 800a21e:	4e0d      	ldr	r6, [pc, #52]	; (800a254 <__libc_init_array+0x38>)
 800a220:	4c0d      	ldr	r4, [pc, #52]	; (800a258 <__libc_init_array+0x3c>)
 800a222:	1ba4      	subs	r4, r4, r6
 800a224:	10a4      	asrs	r4, r4, #2
 800a226:	2500      	movs	r5, #0
 800a228:	42a5      	cmp	r5, r4
 800a22a:	d109      	bne.n	800a240 <__libc_init_array+0x24>
 800a22c:	4e0b      	ldr	r6, [pc, #44]	; (800a25c <__libc_init_array+0x40>)
 800a22e:	4c0c      	ldr	r4, [pc, #48]	; (800a260 <__libc_init_array+0x44>)
 800a230:	f001 f96c 	bl	800b50c <_init>
 800a234:	1ba4      	subs	r4, r4, r6
 800a236:	10a4      	asrs	r4, r4, #2
 800a238:	2500      	movs	r5, #0
 800a23a:	42a5      	cmp	r5, r4
 800a23c:	d105      	bne.n	800a24a <__libc_init_array+0x2e>
 800a23e:	bd70      	pop	{r4, r5, r6, pc}
 800a240:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a244:	4798      	blx	r3
 800a246:	3501      	adds	r5, #1
 800a248:	e7ee      	b.n	800a228 <__libc_init_array+0xc>
 800a24a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a24e:	4798      	blx	r3
 800a250:	3501      	adds	r5, #1
 800a252:	e7f2      	b.n	800a23a <__libc_init_array+0x1e>
 800a254:	0800ba38 	.word	0x0800ba38
 800a258:	0800ba38 	.word	0x0800ba38
 800a25c:	0800ba38 	.word	0x0800ba38
 800a260:	0800ba3c 	.word	0x0800ba3c

0800a264 <malloc>:
 800a264:	4b02      	ldr	r3, [pc, #8]	; (800a270 <malloc+0xc>)
 800a266:	4601      	mov	r1, r0
 800a268:	6818      	ldr	r0, [r3, #0]
 800a26a:	f000 b86d 	b.w	800a348 <_malloc_r>
 800a26e:	bf00      	nop
 800a270:	2000029c 	.word	0x2000029c

0800a274 <free>:
 800a274:	4b02      	ldr	r3, [pc, #8]	; (800a280 <free+0xc>)
 800a276:	4601      	mov	r1, r0
 800a278:	6818      	ldr	r0, [r3, #0]
 800a27a:	f000 b817 	b.w	800a2ac <_free_r>
 800a27e:	bf00      	nop
 800a280:	2000029c 	.word	0x2000029c

0800a284 <memcpy>:
 800a284:	b510      	push	{r4, lr}
 800a286:	1e43      	subs	r3, r0, #1
 800a288:	440a      	add	r2, r1
 800a28a:	4291      	cmp	r1, r2
 800a28c:	d100      	bne.n	800a290 <memcpy+0xc>
 800a28e:	bd10      	pop	{r4, pc}
 800a290:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a294:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a298:	e7f7      	b.n	800a28a <memcpy+0x6>

0800a29a <memset>:
 800a29a:	4402      	add	r2, r0
 800a29c:	4603      	mov	r3, r0
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d100      	bne.n	800a2a4 <memset+0xa>
 800a2a2:	4770      	bx	lr
 800a2a4:	f803 1b01 	strb.w	r1, [r3], #1
 800a2a8:	e7f9      	b.n	800a29e <memset+0x4>
	...

0800a2ac <_free_r>:
 800a2ac:	b538      	push	{r3, r4, r5, lr}
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	2900      	cmp	r1, #0
 800a2b2:	d045      	beq.n	800a340 <_free_r+0x94>
 800a2b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2b8:	1f0c      	subs	r4, r1, #4
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	bfb8      	it	lt
 800a2be:	18e4      	addlt	r4, r4, r3
 800a2c0:	f000 f923 	bl	800a50a <__malloc_lock>
 800a2c4:	4a1f      	ldr	r2, [pc, #124]	; (800a344 <_free_r+0x98>)
 800a2c6:	6813      	ldr	r3, [r2, #0]
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	b933      	cbnz	r3, 800a2da <_free_r+0x2e>
 800a2cc:	6063      	str	r3, [r4, #4]
 800a2ce:	6014      	str	r4, [r2, #0]
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2d6:	f000 b919 	b.w	800a50c <__malloc_unlock>
 800a2da:	42a3      	cmp	r3, r4
 800a2dc:	d90c      	bls.n	800a2f8 <_free_r+0x4c>
 800a2de:	6821      	ldr	r1, [r4, #0]
 800a2e0:	1862      	adds	r2, r4, r1
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	bf04      	itt	eq
 800a2e6:	681a      	ldreq	r2, [r3, #0]
 800a2e8:	685b      	ldreq	r3, [r3, #4]
 800a2ea:	6063      	str	r3, [r4, #4]
 800a2ec:	bf04      	itt	eq
 800a2ee:	1852      	addeq	r2, r2, r1
 800a2f0:	6022      	streq	r2, [r4, #0]
 800a2f2:	6004      	str	r4, [r0, #0]
 800a2f4:	e7ec      	b.n	800a2d0 <_free_r+0x24>
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	685a      	ldr	r2, [r3, #4]
 800a2fa:	b10a      	cbz	r2, 800a300 <_free_r+0x54>
 800a2fc:	42a2      	cmp	r2, r4
 800a2fe:	d9fa      	bls.n	800a2f6 <_free_r+0x4a>
 800a300:	6819      	ldr	r1, [r3, #0]
 800a302:	1858      	adds	r0, r3, r1
 800a304:	42a0      	cmp	r0, r4
 800a306:	d10b      	bne.n	800a320 <_free_r+0x74>
 800a308:	6820      	ldr	r0, [r4, #0]
 800a30a:	4401      	add	r1, r0
 800a30c:	1858      	adds	r0, r3, r1
 800a30e:	4282      	cmp	r2, r0
 800a310:	6019      	str	r1, [r3, #0]
 800a312:	d1dd      	bne.n	800a2d0 <_free_r+0x24>
 800a314:	6810      	ldr	r0, [r2, #0]
 800a316:	6852      	ldr	r2, [r2, #4]
 800a318:	605a      	str	r2, [r3, #4]
 800a31a:	4401      	add	r1, r0
 800a31c:	6019      	str	r1, [r3, #0]
 800a31e:	e7d7      	b.n	800a2d0 <_free_r+0x24>
 800a320:	d902      	bls.n	800a328 <_free_r+0x7c>
 800a322:	230c      	movs	r3, #12
 800a324:	602b      	str	r3, [r5, #0]
 800a326:	e7d3      	b.n	800a2d0 <_free_r+0x24>
 800a328:	6820      	ldr	r0, [r4, #0]
 800a32a:	1821      	adds	r1, r4, r0
 800a32c:	428a      	cmp	r2, r1
 800a32e:	bf04      	itt	eq
 800a330:	6811      	ldreq	r1, [r2, #0]
 800a332:	6852      	ldreq	r2, [r2, #4]
 800a334:	6062      	str	r2, [r4, #4]
 800a336:	bf04      	itt	eq
 800a338:	1809      	addeq	r1, r1, r0
 800a33a:	6021      	streq	r1, [r4, #0]
 800a33c:	605c      	str	r4, [r3, #4]
 800a33e:	e7c7      	b.n	800a2d0 <_free_r+0x24>
 800a340:	bd38      	pop	{r3, r4, r5, pc}
 800a342:	bf00      	nop
 800a344:	200005b8 	.word	0x200005b8

0800a348 <_malloc_r>:
 800a348:	b570      	push	{r4, r5, r6, lr}
 800a34a:	1ccd      	adds	r5, r1, #3
 800a34c:	f025 0503 	bic.w	r5, r5, #3
 800a350:	3508      	adds	r5, #8
 800a352:	2d0c      	cmp	r5, #12
 800a354:	bf38      	it	cc
 800a356:	250c      	movcc	r5, #12
 800a358:	2d00      	cmp	r5, #0
 800a35a:	4606      	mov	r6, r0
 800a35c:	db01      	blt.n	800a362 <_malloc_r+0x1a>
 800a35e:	42a9      	cmp	r1, r5
 800a360:	d903      	bls.n	800a36a <_malloc_r+0x22>
 800a362:	230c      	movs	r3, #12
 800a364:	6033      	str	r3, [r6, #0]
 800a366:	2000      	movs	r0, #0
 800a368:	bd70      	pop	{r4, r5, r6, pc}
 800a36a:	f000 f8ce 	bl	800a50a <__malloc_lock>
 800a36e:	4a23      	ldr	r2, [pc, #140]	; (800a3fc <_malloc_r+0xb4>)
 800a370:	6814      	ldr	r4, [r2, #0]
 800a372:	4621      	mov	r1, r4
 800a374:	b991      	cbnz	r1, 800a39c <_malloc_r+0x54>
 800a376:	4c22      	ldr	r4, [pc, #136]	; (800a400 <_malloc_r+0xb8>)
 800a378:	6823      	ldr	r3, [r4, #0]
 800a37a:	b91b      	cbnz	r3, 800a384 <_malloc_r+0x3c>
 800a37c:	4630      	mov	r0, r6
 800a37e:	f000 f841 	bl	800a404 <_sbrk_r>
 800a382:	6020      	str	r0, [r4, #0]
 800a384:	4629      	mov	r1, r5
 800a386:	4630      	mov	r0, r6
 800a388:	f000 f83c 	bl	800a404 <_sbrk_r>
 800a38c:	1c43      	adds	r3, r0, #1
 800a38e:	d126      	bne.n	800a3de <_malloc_r+0x96>
 800a390:	230c      	movs	r3, #12
 800a392:	6033      	str	r3, [r6, #0]
 800a394:	4630      	mov	r0, r6
 800a396:	f000 f8b9 	bl	800a50c <__malloc_unlock>
 800a39a:	e7e4      	b.n	800a366 <_malloc_r+0x1e>
 800a39c:	680b      	ldr	r3, [r1, #0]
 800a39e:	1b5b      	subs	r3, r3, r5
 800a3a0:	d41a      	bmi.n	800a3d8 <_malloc_r+0x90>
 800a3a2:	2b0b      	cmp	r3, #11
 800a3a4:	d90f      	bls.n	800a3c6 <_malloc_r+0x7e>
 800a3a6:	600b      	str	r3, [r1, #0]
 800a3a8:	50cd      	str	r5, [r1, r3]
 800a3aa:	18cc      	adds	r4, r1, r3
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	f000 f8ad 	bl	800a50c <__malloc_unlock>
 800a3b2:	f104 000b 	add.w	r0, r4, #11
 800a3b6:	1d23      	adds	r3, r4, #4
 800a3b8:	f020 0007 	bic.w	r0, r0, #7
 800a3bc:	1ac3      	subs	r3, r0, r3
 800a3be:	d01b      	beq.n	800a3f8 <_malloc_r+0xb0>
 800a3c0:	425a      	negs	r2, r3
 800a3c2:	50e2      	str	r2, [r4, r3]
 800a3c4:	bd70      	pop	{r4, r5, r6, pc}
 800a3c6:	428c      	cmp	r4, r1
 800a3c8:	bf0d      	iteet	eq
 800a3ca:	6863      	ldreq	r3, [r4, #4]
 800a3cc:	684b      	ldrne	r3, [r1, #4]
 800a3ce:	6063      	strne	r3, [r4, #4]
 800a3d0:	6013      	streq	r3, [r2, #0]
 800a3d2:	bf18      	it	ne
 800a3d4:	460c      	movne	r4, r1
 800a3d6:	e7e9      	b.n	800a3ac <_malloc_r+0x64>
 800a3d8:	460c      	mov	r4, r1
 800a3da:	6849      	ldr	r1, [r1, #4]
 800a3dc:	e7ca      	b.n	800a374 <_malloc_r+0x2c>
 800a3de:	1cc4      	adds	r4, r0, #3
 800a3e0:	f024 0403 	bic.w	r4, r4, #3
 800a3e4:	42a0      	cmp	r0, r4
 800a3e6:	d005      	beq.n	800a3f4 <_malloc_r+0xac>
 800a3e8:	1a21      	subs	r1, r4, r0
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	f000 f80a 	bl	800a404 <_sbrk_r>
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	d0cd      	beq.n	800a390 <_malloc_r+0x48>
 800a3f4:	6025      	str	r5, [r4, #0]
 800a3f6:	e7d9      	b.n	800a3ac <_malloc_r+0x64>
 800a3f8:	bd70      	pop	{r4, r5, r6, pc}
 800a3fa:	bf00      	nop
 800a3fc:	200005b8 	.word	0x200005b8
 800a400:	200005bc 	.word	0x200005bc

0800a404 <_sbrk_r>:
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	4c06      	ldr	r4, [pc, #24]	; (800a420 <_sbrk_r+0x1c>)
 800a408:	2300      	movs	r3, #0
 800a40a:	4605      	mov	r5, r0
 800a40c:	4608      	mov	r0, r1
 800a40e:	6023      	str	r3, [r4, #0]
 800a410:	f001 f86e 	bl	800b4f0 <_sbrk>
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	d102      	bne.n	800a41e <_sbrk_r+0x1a>
 800a418:	6823      	ldr	r3, [r4, #0]
 800a41a:	b103      	cbz	r3, 800a41e <_sbrk_r+0x1a>
 800a41c:	602b      	str	r3, [r5, #0]
 800a41e:	bd38      	pop	{r3, r4, r5, pc}
 800a420:	2000ad44 	.word	0x2000ad44

0800a424 <siprintf>:
 800a424:	b40e      	push	{r1, r2, r3}
 800a426:	b500      	push	{lr}
 800a428:	b09c      	sub	sp, #112	; 0x70
 800a42a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800a42e:	ab1d      	add	r3, sp, #116	; 0x74
 800a430:	f8ad 1014 	strh.w	r1, [sp, #20]
 800a434:	9002      	str	r0, [sp, #8]
 800a436:	9006      	str	r0, [sp, #24]
 800a438:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a43c:	480a      	ldr	r0, [pc, #40]	; (800a468 <siprintf+0x44>)
 800a43e:	9104      	str	r1, [sp, #16]
 800a440:	9107      	str	r1, [sp, #28]
 800a442:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a446:	f853 2b04 	ldr.w	r2, [r3], #4
 800a44a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800a44e:	6800      	ldr	r0, [r0, #0]
 800a450:	9301      	str	r3, [sp, #4]
 800a452:	a902      	add	r1, sp, #8
 800a454:	f000 f8b6 	bl	800a5c4 <_svfiprintf_r>
 800a458:	9b02      	ldr	r3, [sp, #8]
 800a45a:	2200      	movs	r2, #0
 800a45c:	701a      	strb	r2, [r3, #0]
 800a45e:	b01c      	add	sp, #112	; 0x70
 800a460:	f85d eb04 	ldr.w	lr, [sp], #4
 800a464:	b003      	add	sp, #12
 800a466:	4770      	bx	lr
 800a468:	2000029c 	.word	0x2000029c

0800a46c <siscanf>:
 800a46c:	b40e      	push	{r1, r2, r3}
 800a46e:	b530      	push	{r4, r5, lr}
 800a470:	b09c      	sub	sp, #112	; 0x70
 800a472:	ac1f      	add	r4, sp, #124	; 0x7c
 800a474:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a478:	f854 5b04 	ldr.w	r5, [r4], #4
 800a47c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a480:	9002      	str	r0, [sp, #8]
 800a482:	9006      	str	r0, [sp, #24]
 800a484:	f7f5 fea4 	bl	80001d0 <strlen>
 800a488:	4b0b      	ldr	r3, [pc, #44]	; (800a4b8 <siscanf+0x4c>)
 800a48a:	9003      	str	r0, [sp, #12]
 800a48c:	9007      	str	r0, [sp, #28]
 800a48e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a490:	480a      	ldr	r0, [pc, #40]	; (800a4bc <siscanf+0x50>)
 800a492:	9401      	str	r4, [sp, #4]
 800a494:	2300      	movs	r3, #0
 800a496:	930f      	str	r3, [sp, #60]	; 0x3c
 800a498:	9314      	str	r3, [sp, #80]	; 0x50
 800a49a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a49e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a4a2:	462a      	mov	r2, r5
 800a4a4:	4623      	mov	r3, r4
 800a4a6:	a902      	add	r1, sp, #8
 800a4a8:	6800      	ldr	r0, [r0, #0]
 800a4aa:	f000 f9d9 	bl	800a860 <__ssvfiscanf_r>
 800a4ae:	b01c      	add	sp, #112	; 0x70
 800a4b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4b4:	b003      	add	sp, #12
 800a4b6:	4770      	bx	lr
 800a4b8:	0800a4c1 	.word	0x0800a4c1
 800a4bc:	2000029c 	.word	0x2000029c

0800a4c0 <__seofread>:
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	4770      	bx	lr

0800a4c4 <strcpy>:
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4ca:	f803 2b01 	strb.w	r2, [r3], #1
 800a4ce:	2a00      	cmp	r2, #0
 800a4d0:	d1f9      	bne.n	800a4c6 <strcpy+0x2>
 800a4d2:	4770      	bx	lr

0800a4d4 <strstr>:
 800a4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4d6:	7803      	ldrb	r3, [r0, #0]
 800a4d8:	b133      	cbz	r3, 800a4e8 <strstr+0x14>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	4618      	mov	r0, r3
 800a4de:	1c5e      	adds	r6, r3, #1
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	b933      	cbnz	r3, 800a4f2 <strstr+0x1e>
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4e8:	780b      	ldrb	r3, [r1, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	bf18      	it	ne
 800a4ee:	2000      	movne	r0, #0
 800a4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4f2:	1e4d      	subs	r5, r1, #1
 800a4f4:	1e44      	subs	r4, r0, #1
 800a4f6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a4fa:	2a00      	cmp	r2, #0
 800a4fc:	d0f3      	beq.n	800a4e6 <strstr+0x12>
 800a4fe:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800a502:	4297      	cmp	r7, r2
 800a504:	4633      	mov	r3, r6
 800a506:	d0f6      	beq.n	800a4f6 <strstr+0x22>
 800a508:	e7e8      	b.n	800a4dc <strstr+0x8>

0800a50a <__malloc_lock>:
 800a50a:	4770      	bx	lr

0800a50c <__malloc_unlock>:
 800a50c:	4770      	bx	lr

0800a50e <__ssputs_r>:
 800a50e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a512:	688e      	ldr	r6, [r1, #8]
 800a514:	429e      	cmp	r6, r3
 800a516:	4682      	mov	sl, r0
 800a518:	460c      	mov	r4, r1
 800a51a:	4691      	mov	r9, r2
 800a51c:	4698      	mov	r8, r3
 800a51e:	d835      	bhi.n	800a58c <__ssputs_r+0x7e>
 800a520:	898a      	ldrh	r2, [r1, #12]
 800a522:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a526:	d031      	beq.n	800a58c <__ssputs_r+0x7e>
 800a528:	6825      	ldr	r5, [r4, #0]
 800a52a:	6909      	ldr	r1, [r1, #16]
 800a52c:	1a6f      	subs	r7, r5, r1
 800a52e:	6965      	ldr	r5, [r4, #20]
 800a530:	2302      	movs	r3, #2
 800a532:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a536:	fb95 f5f3 	sdiv	r5, r5, r3
 800a53a:	f108 0301 	add.w	r3, r8, #1
 800a53e:	443b      	add	r3, r7
 800a540:	429d      	cmp	r5, r3
 800a542:	bf38      	it	cc
 800a544:	461d      	movcc	r5, r3
 800a546:	0553      	lsls	r3, r2, #21
 800a548:	d531      	bpl.n	800a5ae <__ssputs_r+0xa0>
 800a54a:	4629      	mov	r1, r5
 800a54c:	f7ff fefc 	bl	800a348 <_malloc_r>
 800a550:	4606      	mov	r6, r0
 800a552:	b950      	cbnz	r0, 800a56a <__ssputs_r+0x5c>
 800a554:	230c      	movs	r3, #12
 800a556:	f8ca 3000 	str.w	r3, [sl]
 800a55a:	89a3      	ldrh	r3, [r4, #12]
 800a55c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a560:	81a3      	strh	r3, [r4, #12]
 800a562:	f04f 30ff 	mov.w	r0, #4294967295
 800a566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a56a:	463a      	mov	r2, r7
 800a56c:	6921      	ldr	r1, [r4, #16]
 800a56e:	f7ff fe89 	bl	800a284 <memcpy>
 800a572:	89a3      	ldrh	r3, [r4, #12]
 800a574:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a57c:	81a3      	strh	r3, [r4, #12]
 800a57e:	6126      	str	r6, [r4, #16]
 800a580:	6165      	str	r5, [r4, #20]
 800a582:	443e      	add	r6, r7
 800a584:	1bed      	subs	r5, r5, r7
 800a586:	6026      	str	r6, [r4, #0]
 800a588:	60a5      	str	r5, [r4, #8]
 800a58a:	4646      	mov	r6, r8
 800a58c:	4546      	cmp	r6, r8
 800a58e:	bf28      	it	cs
 800a590:	4646      	movcs	r6, r8
 800a592:	4632      	mov	r2, r6
 800a594:	4649      	mov	r1, r9
 800a596:	6820      	ldr	r0, [r4, #0]
 800a598:	f000 ff54 	bl	800b444 <memmove>
 800a59c:	68a3      	ldr	r3, [r4, #8]
 800a59e:	1b9b      	subs	r3, r3, r6
 800a5a0:	60a3      	str	r3, [r4, #8]
 800a5a2:	6823      	ldr	r3, [r4, #0]
 800a5a4:	441e      	add	r6, r3
 800a5a6:	6026      	str	r6, [r4, #0]
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ae:	462a      	mov	r2, r5
 800a5b0:	f000 ff62 	bl	800b478 <_realloc_r>
 800a5b4:	4606      	mov	r6, r0
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	d1e1      	bne.n	800a57e <__ssputs_r+0x70>
 800a5ba:	6921      	ldr	r1, [r4, #16]
 800a5bc:	4650      	mov	r0, sl
 800a5be:	f7ff fe75 	bl	800a2ac <_free_r>
 800a5c2:	e7c7      	b.n	800a554 <__ssputs_r+0x46>

0800a5c4 <_svfiprintf_r>:
 800a5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c8:	b09d      	sub	sp, #116	; 0x74
 800a5ca:	4680      	mov	r8, r0
 800a5cc:	9303      	str	r3, [sp, #12]
 800a5ce:	898b      	ldrh	r3, [r1, #12]
 800a5d0:	061c      	lsls	r4, r3, #24
 800a5d2:	460d      	mov	r5, r1
 800a5d4:	4616      	mov	r6, r2
 800a5d6:	d50f      	bpl.n	800a5f8 <_svfiprintf_r+0x34>
 800a5d8:	690b      	ldr	r3, [r1, #16]
 800a5da:	b96b      	cbnz	r3, 800a5f8 <_svfiprintf_r+0x34>
 800a5dc:	2140      	movs	r1, #64	; 0x40
 800a5de:	f7ff feb3 	bl	800a348 <_malloc_r>
 800a5e2:	6028      	str	r0, [r5, #0]
 800a5e4:	6128      	str	r0, [r5, #16]
 800a5e6:	b928      	cbnz	r0, 800a5f4 <_svfiprintf_r+0x30>
 800a5e8:	230c      	movs	r3, #12
 800a5ea:	f8c8 3000 	str.w	r3, [r8]
 800a5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f2:	e0c5      	b.n	800a780 <_svfiprintf_r+0x1bc>
 800a5f4:	2340      	movs	r3, #64	; 0x40
 800a5f6:	616b      	str	r3, [r5, #20]
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a5fc:	2320      	movs	r3, #32
 800a5fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a602:	2330      	movs	r3, #48	; 0x30
 800a604:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a608:	f04f 0b01 	mov.w	fp, #1
 800a60c:	4637      	mov	r7, r6
 800a60e:	463c      	mov	r4, r7
 800a610:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a614:	2b00      	cmp	r3, #0
 800a616:	d13c      	bne.n	800a692 <_svfiprintf_r+0xce>
 800a618:	ebb7 0a06 	subs.w	sl, r7, r6
 800a61c:	d00b      	beq.n	800a636 <_svfiprintf_r+0x72>
 800a61e:	4653      	mov	r3, sl
 800a620:	4632      	mov	r2, r6
 800a622:	4629      	mov	r1, r5
 800a624:	4640      	mov	r0, r8
 800a626:	f7ff ff72 	bl	800a50e <__ssputs_r>
 800a62a:	3001      	adds	r0, #1
 800a62c:	f000 80a3 	beq.w	800a776 <_svfiprintf_r+0x1b2>
 800a630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a632:	4453      	add	r3, sl
 800a634:	9309      	str	r3, [sp, #36]	; 0x24
 800a636:	783b      	ldrb	r3, [r7, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f000 809c 	beq.w	800a776 <_svfiprintf_r+0x1b2>
 800a63e:	2300      	movs	r3, #0
 800a640:	f04f 32ff 	mov.w	r2, #4294967295
 800a644:	9304      	str	r3, [sp, #16]
 800a646:	9307      	str	r3, [sp, #28]
 800a648:	9205      	str	r2, [sp, #20]
 800a64a:	9306      	str	r3, [sp, #24]
 800a64c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a650:	931a      	str	r3, [sp, #104]	; 0x68
 800a652:	2205      	movs	r2, #5
 800a654:	7821      	ldrb	r1, [r4, #0]
 800a656:	4850      	ldr	r0, [pc, #320]	; (800a798 <_svfiprintf_r+0x1d4>)
 800a658:	f7f5 fdc2 	bl	80001e0 <memchr>
 800a65c:	1c67      	adds	r7, r4, #1
 800a65e:	9b04      	ldr	r3, [sp, #16]
 800a660:	b9d8      	cbnz	r0, 800a69a <_svfiprintf_r+0xd6>
 800a662:	06d9      	lsls	r1, r3, #27
 800a664:	bf44      	itt	mi
 800a666:	2220      	movmi	r2, #32
 800a668:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a66c:	071a      	lsls	r2, r3, #28
 800a66e:	bf44      	itt	mi
 800a670:	222b      	movmi	r2, #43	; 0x2b
 800a672:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a676:	7822      	ldrb	r2, [r4, #0]
 800a678:	2a2a      	cmp	r2, #42	; 0x2a
 800a67a:	d016      	beq.n	800a6aa <_svfiprintf_r+0xe6>
 800a67c:	9a07      	ldr	r2, [sp, #28]
 800a67e:	2100      	movs	r1, #0
 800a680:	200a      	movs	r0, #10
 800a682:	4627      	mov	r7, r4
 800a684:	3401      	adds	r4, #1
 800a686:	783b      	ldrb	r3, [r7, #0]
 800a688:	3b30      	subs	r3, #48	; 0x30
 800a68a:	2b09      	cmp	r3, #9
 800a68c:	d951      	bls.n	800a732 <_svfiprintf_r+0x16e>
 800a68e:	b1c9      	cbz	r1, 800a6c4 <_svfiprintf_r+0x100>
 800a690:	e011      	b.n	800a6b6 <_svfiprintf_r+0xf2>
 800a692:	2b25      	cmp	r3, #37	; 0x25
 800a694:	d0c0      	beq.n	800a618 <_svfiprintf_r+0x54>
 800a696:	4627      	mov	r7, r4
 800a698:	e7b9      	b.n	800a60e <_svfiprintf_r+0x4a>
 800a69a:	4a3f      	ldr	r2, [pc, #252]	; (800a798 <_svfiprintf_r+0x1d4>)
 800a69c:	1a80      	subs	r0, r0, r2
 800a69e:	fa0b f000 	lsl.w	r0, fp, r0
 800a6a2:	4318      	orrs	r0, r3
 800a6a4:	9004      	str	r0, [sp, #16]
 800a6a6:	463c      	mov	r4, r7
 800a6a8:	e7d3      	b.n	800a652 <_svfiprintf_r+0x8e>
 800a6aa:	9a03      	ldr	r2, [sp, #12]
 800a6ac:	1d11      	adds	r1, r2, #4
 800a6ae:	6812      	ldr	r2, [r2, #0]
 800a6b0:	9103      	str	r1, [sp, #12]
 800a6b2:	2a00      	cmp	r2, #0
 800a6b4:	db01      	blt.n	800a6ba <_svfiprintf_r+0xf6>
 800a6b6:	9207      	str	r2, [sp, #28]
 800a6b8:	e004      	b.n	800a6c4 <_svfiprintf_r+0x100>
 800a6ba:	4252      	negs	r2, r2
 800a6bc:	f043 0302 	orr.w	r3, r3, #2
 800a6c0:	9207      	str	r2, [sp, #28]
 800a6c2:	9304      	str	r3, [sp, #16]
 800a6c4:	783b      	ldrb	r3, [r7, #0]
 800a6c6:	2b2e      	cmp	r3, #46	; 0x2e
 800a6c8:	d10e      	bne.n	800a6e8 <_svfiprintf_r+0x124>
 800a6ca:	787b      	ldrb	r3, [r7, #1]
 800a6cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a6ce:	f107 0101 	add.w	r1, r7, #1
 800a6d2:	d132      	bne.n	800a73a <_svfiprintf_r+0x176>
 800a6d4:	9b03      	ldr	r3, [sp, #12]
 800a6d6:	1d1a      	adds	r2, r3, #4
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	9203      	str	r2, [sp, #12]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	bfb8      	it	lt
 800a6e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6e4:	3702      	adds	r7, #2
 800a6e6:	9305      	str	r3, [sp, #20]
 800a6e8:	4c2c      	ldr	r4, [pc, #176]	; (800a79c <_svfiprintf_r+0x1d8>)
 800a6ea:	7839      	ldrb	r1, [r7, #0]
 800a6ec:	2203      	movs	r2, #3
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f7f5 fd76 	bl	80001e0 <memchr>
 800a6f4:	b138      	cbz	r0, 800a706 <_svfiprintf_r+0x142>
 800a6f6:	2340      	movs	r3, #64	; 0x40
 800a6f8:	1b00      	subs	r0, r0, r4
 800a6fa:	fa03 f000 	lsl.w	r0, r3, r0
 800a6fe:	9b04      	ldr	r3, [sp, #16]
 800a700:	4303      	orrs	r3, r0
 800a702:	9304      	str	r3, [sp, #16]
 800a704:	3701      	adds	r7, #1
 800a706:	7839      	ldrb	r1, [r7, #0]
 800a708:	4825      	ldr	r0, [pc, #148]	; (800a7a0 <_svfiprintf_r+0x1dc>)
 800a70a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a70e:	2206      	movs	r2, #6
 800a710:	1c7e      	adds	r6, r7, #1
 800a712:	f7f5 fd65 	bl	80001e0 <memchr>
 800a716:	2800      	cmp	r0, #0
 800a718:	d035      	beq.n	800a786 <_svfiprintf_r+0x1c2>
 800a71a:	4b22      	ldr	r3, [pc, #136]	; (800a7a4 <_svfiprintf_r+0x1e0>)
 800a71c:	b9fb      	cbnz	r3, 800a75e <_svfiprintf_r+0x19a>
 800a71e:	9b03      	ldr	r3, [sp, #12]
 800a720:	3307      	adds	r3, #7
 800a722:	f023 0307 	bic.w	r3, r3, #7
 800a726:	3308      	adds	r3, #8
 800a728:	9303      	str	r3, [sp, #12]
 800a72a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a72c:	444b      	add	r3, r9
 800a72e:	9309      	str	r3, [sp, #36]	; 0x24
 800a730:	e76c      	b.n	800a60c <_svfiprintf_r+0x48>
 800a732:	fb00 3202 	mla	r2, r0, r2, r3
 800a736:	2101      	movs	r1, #1
 800a738:	e7a3      	b.n	800a682 <_svfiprintf_r+0xbe>
 800a73a:	2300      	movs	r3, #0
 800a73c:	9305      	str	r3, [sp, #20]
 800a73e:	4618      	mov	r0, r3
 800a740:	240a      	movs	r4, #10
 800a742:	460f      	mov	r7, r1
 800a744:	3101      	adds	r1, #1
 800a746:	783a      	ldrb	r2, [r7, #0]
 800a748:	3a30      	subs	r2, #48	; 0x30
 800a74a:	2a09      	cmp	r2, #9
 800a74c:	d903      	bls.n	800a756 <_svfiprintf_r+0x192>
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d0ca      	beq.n	800a6e8 <_svfiprintf_r+0x124>
 800a752:	9005      	str	r0, [sp, #20]
 800a754:	e7c8      	b.n	800a6e8 <_svfiprintf_r+0x124>
 800a756:	fb04 2000 	mla	r0, r4, r0, r2
 800a75a:	2301      	movs	r3, #1
 800a75c:	e7f1      	b.n	800a742 <_svfiprintf_r+0x17e>
 800a75e:	ab03      	add	r3, sp, #12
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	462a      	mov	r2, r5
 800a764:	4b10      	ldr	r3, [pc, #64]	; (800a7a8 <_svfiprintf_r+0x1e4>)
 800a766:	a904      	add	r1, sp, #16
 800a768:	4640      	mov	r0, r8
 800a76a:	f3af 8000 	nop.w
 800a76e:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a772:	4681      	mov	r9, r0
 800a774:	d1d9      	bne.n	800a72a <_svfiprintf_r+0x166>
 800a776:	89ab      	ldrh	r3, [r5, #12]
 800a778:	065b      	lsls	r3, r3, #25
 800a77a:	f53f af38 	bmi.w	800a5ee <_svfiprintf_r+0x2a>
 800a77e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a780:	b01d      	add	sp, #116	; 0x74
 800a782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a786:	ab03      	add	r3, sp, #12
 800a788:	9300      	str	r3, [sp, #0]
 800a78a:	462a      	mov	r2, r5
 800a78c:	4b06      	ldr	r3, [pc, #24]	; (800a7a8 <_svfiprintf_r+0x1e4>)
 800a78e:	a904      	add	r1, sp, #16
 800a790:	4640      	mov	r0, r8
 800a792:	f000 fa2f 	bl	800abf4 <_printf_i>
 800a796:	e7ea      	b.n	800a76e <_svfiprintf_r+0x1aa>
 800a798:	0800b873 	.word	0x0800b873
 800a79c:	0800b879 	.word	0x0800b879
 800a7a0:	0800b87d 	.word	0x0800b87d
 800a7a4:	00000000 	.word	0x00000000
 800a7a8:	0800a50f 	.word	0x0800a50f

0800a7ac <_sungetc_r>:
 800a7ac:	b538      	push	{r3, r4, r5, lr}
 800a7ae:	1c4b      	adds	r3, r1, #1
 800a7b0:	4614      	mov	r4, r2
 800a7b2:	d103      	bne.n	800a7bc <_sungetc_r+0x10>
 800a7b4:	f04f 35ff 	mov.w	r5, #4294967295
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	bd38      	pop	{r3, r4, r5, pc}
 800a7bc:	8993      	ldrh	r3, [r2, #12]
 800a7be:	f023 0320 	bic.w	r3, r3, #32
 800a7c2:	8193      	strh	r3, [r2, #12]
 800a7c4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a7c6:	6852      	ldr	r2, [r2, #4]
 800a7c8:	b2cd      	uxtb	r5, r1
 800a7ca:	b18b      	cbz	r3, 800a7f0 <_sungetc_r+0x44>
 800a7cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	da08      	bge.n	800a7e4 <_sungetc_r+0x38>
 800a7d2:	6823      	ldr	r3, [r4, #0]
 800a7d4:	1e5a      	subs	r2, r3, #1
 800a7d6:	6022      	str	r2, [r4, #0]
 800a7d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a7dc:	6863      	ldr	r3, [r4, #4]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	6063      	str	r3, [r4, #4]
 800a7e2:	e7e9      	b.n	800a7b8 <_sungetc_r+0xc>
 800a7e4:	4621      	mov	r1, r4
 800a7e6:	f000 fdcf 	bl	800b388 <__submore>
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	d0f1      	beq.n	800a7d2 <_sungetc_r+0x26>
 800a7ee:	e7e1      	b.n	800a7b4 <_sungetc_r+0x8>
 800a7f0:	6921      	ldr	r1, [r4, #16]
 800a7f2:	6823      	ldr	r3, [r4, #0]
 800a7f4:	b151      	cbz	r1, 800a80c <_sungetc_r+0x60>
 800a7f6:	4299      	cmp	r1, r3
 800a7f8:	d208      	bcs.n	800a80c <_sungetc_r+0x60>
 800a7fa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a7fe:	428d      	cmp	r5, r1
 800a800:	d104      	bne.n	800a80c <_sungetc_r+0x60>
 800a802:	3b01      	subs	r3, #1
 800a804:	3201      	adds	r2, #1
 800a806:	6023      	str	r3, [r4, #0]
 800a808:	6062      	str	r2, [r4, #4]
 800a80a:	e7d5      	b.n	800a7b8 <_sungetc_r+0xc>
 800a80c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a80e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a812:	6363      	str	r3, [r4, #52]	; 0x34
 800a814:	2303      	movs	r3, #3
 800a816:	63a3      	str	r3, [r4, #56]	; 0x38
 800a818:	4623      	mov	r3, r4
 800a81a:	6422      	str	r2, [r4, #64]	; 0x40
 800a81c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	2301      	movs	r3, #1
 800a824:	e7dc      	b.n	800a7e0 <_sungetc_r+0x34>

0800a826 <__ssrefill_r>:
 800a826:	b510      	push	{r4, lr}
 800a828:	460c      	mov	r4, r1
 800a82a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a82c:	b169      	cbz	r1, 800a84a <__ssrefill_r+0x24>
 800a82e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a832:	4299      	cmp	r1, r3
 800a834:	d001      	beq.n	800a83a <__ssrefill_r+0x14>
 800a836:	f7ff fd39 	bl	800a2ac <_free_r>
 800a83a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a83c:	6063      	str	r3, [r4, #4]
 800a83e:	2000      	movs	r0, #0
 800a840:	6360      	str	r0, [r4, #52]	; 0x34
 800a842:	b113      	cbz	r3, 800a84a <__ssrefill_r+0x24>
 800a844:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a846:	6023      	str	r3, [r4, #0]
 800a848:	bd10      	pop	{r4, pc}
 800a84a:	6923      	ldr	r3, [r4, #16]
 800a84c:	6023      	str	r3, [r4, #0]
 800a84e:	2300      	movs	r3, #0
 800a850:	6063      	str	r3, [r4, #4]
 800a852:	89a3      	ldrh	r3, [r4, #12]
 800a854:	f043 0320 	orr.w	r3, r3, #32
 800a858:	81a3      	strh	r3, [r4, #12]
 800a85a:	f04f 30ff 	mov.w	r0, #4294967295
 800a85e:	bd10      	pop	{r4, pc}

0800a860 <__ssvfiscanf_r>:
 800a860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a864:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800a868:	f10d 080c 	add.w	r8, sp, #12
 800a86c:	9301      	str	r3, [sp, #4]
 800a86e:	2300      	movs	r3, #0
 800a870:	9346      	str	r3, [sp, #280]	; 0x118
 800a872:	9347      	str	r3, [sp, #284]	; 0x11c
 800a874:	4ba0      	ldr	r3, [pc, #640]	; (800aaf8 <__ssvfiscanf_r+0x298>)
 800a876:	93a2      	str	r3, [sp, #648]	; 0x288
 800a878:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800ab00 <__ssvfiscanf_r+0x2a0>
 800a87c:	4b9f      	ldr	r3, [pc, #636]	; (800aafc <__ssvfiscanf_r+0x29c>)
 800a87e:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800a882:	4606      	mov	r6, r0
 800a884:	460c      	mov	r4, r1
 800a886:	93a3      	str	r3, [sp, #652]	; 0x28c
 800a888:	4692      	mov	sl, r2
 800a88a:	270a      	movs	r7, #10
 800a88c:	f89a 3000 	ldrb.w	r3, [sl]
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 812f 	beq.w	800aaf4 <__ssvfiscanf_r+0x294>
 800a896:	f000 fdb5 	bl	800b404 <__locale_ctype_ptr>
 800a89a:	f89a b000 	ldrb.w	fp, [sl]
 800a89e:	4458      	add	r0, fp
 800a8a0:	7843      	ldrb	r3, [r0, #1]
 800a8a2:	f013 0308 	ands.w	r3, r3, #8
 800a8a6:	d143      	bne.n	800a930 <__ssvfiscanf_r+0xd0>
 800a8a8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800a8ac:	f10a 0501 	add.w	r5, sl, #1
 800a8b0:	f040 8099 	bne.w	800a9e6 <__ssvfiscanf_r+0x186>
 800a8b4:	9345      	str	r3, [sp, #276]	; 0x114
 800a8b6:	9343      	str	r3, [sp, #268]	; 0x10c
 800a8b8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a8bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a8be:	d103      	bne.n	800a8c8 <__ssvfiscanf_r+0x68>
 800a8c0:	2310      	movs	r3, #16
 800a8c2:	9343      	str	r3, [sp, #268]	; 0x10c
 800a8c4:	f10a 0502 	add.w	r5, sl, #2
 800a8c8:	7829      	ldrb	r1, [r5, #0]
 800a8ca:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a8ce:	2a09      	cmp	r2, #9
 800a8d0:	46aa      	mov	sl, r5
 800a8d2:	f105 0501 	add.w	r5, r5, #1
 800a8d6:	d941      	bls.n	800a95c <__ssvfiscanf_r+0xfc>
 800a8d8:	2203      	movs	r2, #3
 800a8da:	4889      	ldr	r0, [pc, #548]	; (800ab00 <__ssvfiscanf_r+0x2a0>)
 800a8dc:	f7f5 fc80 	bl	80001e0 <memchr>
 800a8e0:	b138      	cbz	r0, 800a8f2 <__ssvfiscanf_r+0x92>
 800a8e2:	eba0 0309 	sub.w	r3, r0, r9
 800a8e6:	2001      	movs	r0, #1
 800a8e8:	4098      	lsls	r0, r3
 800a8ea:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a8ec:	4318      	orrs	r0, r3
 800a8ee:	9043      	str	r0, [sp, #268]	; 0x10c
 800a8f0:	46aa      	mov	sl, r5
 800a8f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8f6:	2b67      	cmp	r3, #103	; 0x67
 800a8f8:	f10a 0501 	add.w	r5, sl, #1
 800a8fc:	d84a      	bhi.n	800a994 <__ssvfiscanf_r+0x134>
 800a8fe:	2b65      	cmp	r3, #101	; 0x65
 800a900:	f080 80b7 	bcs.w	800aa72 <__ssvfiscanf_r+0x212>
 800a904:	2b47      	cmp	r3, #71	; 0x47
 800a906:	d82f      	bhi.n	800a968 <__ssvfiscanf_r+0x108>
 800a908:	2b45      	cmp	r3, #69	; 0x45
 800a90a:	f080 80b2 	bcs.w	800aa72 <__ssvfiscanf_r+0x212>
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f000 8082 	beq.w	800aa18 <__ssvfiscanf_r+0x1b8>
 800a914:	2b25      	cmp	r3, #37	; 0x25
 800a916:	d066      	beq.n	800a9e6 <__ssvfiscanf_r+0x186>
 800a918:	2303      	movs	r3, #3
 800a91a:	9349      	str	r3, [sp, #292]	; 0x124
 800a91c:	9744      	str	r7, [sp, #272]	; 0x110
 800a91e:	e045      	b.n	800a9ac <__ssvfiscanf_r+0x14c>
 800a920:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800a922:	3101      	adds	r1, #1
 800a924:	9147      	str	r1, [sp, #284]	; 0x11c
 800a926:	6861      	ldr	r1, [r4, #4]
 800a928:	3301      	adds	r3, #1
 800a92a:	3901      	subs	r1, #1
 800a92c:	6061      	str	r1, [r4, #4]
 800a92e:	6023      	str	r3, [r4, #0]
 800a930:	6863      	ldr	r3, [r4, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	dd0b      	ble.n	800a94e <__ssvfiscanf_r+0xee>
 800a936:	f000 fd65 	bl	800b404 <__locale_ctype_ptr>
 800a93a:	6823      	ldr	r3, [r4, #0]
 800a93c:	7819      	ldrb	r1, [r3, #0]
 800a93e:	4408      	add	r0, r1
 800a940:	7841      	ldrb	r1, [r0, #1]
 800a942:	070d      	lsls	r5, r1, #28
 800a944:	d4ec      	bmi.n	800a920 <__ssvfiscanf_r+0xc0>
 800a946:	f10a 0501 	add.w	r5, sl, #1
 800a94a:	46aa      	mov	sl, r5
 800a94c:	e79e      	b.n	800a88c <__ssvfiscanf_r+0x2c>
 800a94e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a950:	4621      	mov	r1, r4
 800a952:	4630      	mov	r0, r6
 800a954:	4798      	blx	r3
 800a956:	2800      	cmp	r0, #0
 800a958:	d0ed      	beq.n	800a936 <__ssvfiscanf_r+0xd6>
 800a95a:	e7f4      	b.n	800a946 <__ssvfiscanf_r+0xe6>
 800a95c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a95e:	fb07 1303 	mla	r3, r7, r3, r1
 800a962:	3b30      	subs	r3, #48	; 0x30
 800a964:	9345      	str	r3, [sp, #276]	; 0x114
 800a966:	e7af      	b.n	800a8c8 <__ssvfiscanf_r+0x68>
 800a968:	2b5b      	cmp	r3, #91	; 0x5b
 800a96a:	d061      	beq.n	800aa30 <__ssvfiscanf_r+0x1d0>
 800a96c:	d80c      	bhi.n	800a988 <__ssvfiscanf_r+0x128>
 800a96e:	2b58      	cmp	r3, #88	; 0x58
 800a970:	d1d2      	bne.n	800a918 <__ssvfiscanf_r+0xb8>
 800a972:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a978:	9243      	str	r2, [sp, #268]	; 0x10c
 800a97a:	2210      	movs	r2, #16
 800a97c:	9244      	str	r2, [sp, #272]	; 0x110
 800a97e:	2b6f      	cmp	r3, #111	; 0x6f
 800a980:	bfb4      	ite	lt
 800a982:	2303      	movlt	r3, #3
 800a984:	2304      	movge	r3, #4
 800a986:	e010      	b.n	800a9aa <__ssvfiscanf_r+0x14a>
 800a988:	2b63      	cmp	r3, #99	; 0x63
 800a98a:	d05c      	beq.n	800aa46 <__ssvfiscanf_r+0x1e6>
 800a98c:	2b64      	cmp	r3, #100	; 0x64
 800a98e:	d1c3      	bne.n	800a918 <__ssvfiscanf_r+0xb8>
 800a990:	9744      	str	r7, [sp, #272]	; 0x110
 800a992:	e7f4      	b.n	800a97e <__ssvfiscanf_r+0x11e>
 800a994:	2b70      	cmp	r3, #112	; 0x70
 800a996:	d042      	beq.n	800aa1e <__ssvfiscanf_r+0x1be>
 800a998:	d81d      	bhi.n	800a9d6 <__ssvfiscanf_r+0x176>
 800a99a:	2b6e      	cmp	r3, #110	; 0x6e
 800a99c:	d059      	beq.n	800aa52 <__ssvfiscanf_r+0x1f2>
 800a99e:	d843      	bhi.n	800aa28 <__ssvfiscanf_r+0x1c8>
 800a9a0:	2b69      	cmp	r3, #105	; 0x69
 800a9a2:	d1b9      	bne.n	800a918 <__ssvfiscanf_r+0xb8>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	9344      	str	r3, [sp, #272]	; 0x110
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	9349      	str	r3, [sp, #292]	; 0x124
 800a9ac:	6863      	ldr	r3, [r4, #4]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	dd61      	ble.n	800aa76 <__ssvfiscanf_r+0x216>
 800a9b2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a9b4:	0659      	lsls	r1, r3, #25
 800a9b6:	d56f      	bpl.n	800aa98 <__ssvfiscanf_r+0x238>
 800a9b8:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	dc7c      	bgt.n	800aab8 <__ssvfiscanf_r+0x258>
 800a9be:	ab01      	add	r3, sp, #4
 800a9c0:	4622      	mov	r2, r4
 800a9c2:	a943      	add	r1, sp, #268	; 0x10c
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	f000 fa35 	bl	800ae34 <_scanf_chars>
 800a9ca:	2801      	cmp	r0, #1
 800a9cc:	f000 8092 	beq.w	800aaf4 <__ssvfiscanf_r+0x294>
 800a9d0:	2802      	cmp	r0, #2
 800a9d2:	d1ba      	bne.n	800a94a <__ssvfiscanf_r+0xea>
 800a9d4:	e01d      	b.n	800aa12 <__ssvfiscanf_r+0x1b2>
 800a9d6:	2b75      	cmp	r3, #117	; 0x75
 800a9d8:	d0da      	beq.n	800a990 <__ssvfiscanf_r+0x130>
 800a9da:	2b78      	cmp	r3, #120	; 0x78
 800a9dc:	d0c9      	beq.n	800a972 <__ssvfiscanf_r+0x112>
 800a9de:	2b73      	cmp	r3, #115	; 0x73
 800a9e0:	d19a      	bne.n	800a918 <__ssvfiscanf_r+0xb8>
 800a9e2:	2302      	movs	r3, #2
 800a9e4:	e7e1      	b.n	800a9aa <__ssvfiscanf_r+0x14a>
 800a9e6:	6863      	ldr	r3, [r4, #4]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	dd0c      	ble.n	800aa06 <__ssvfiscanf_r+0x1a6>
 800a9ec:	6823      	ldr	r3, [r4, #0]
 800a9ee:	781a      	ldrb	r2, [r3, #0]
 800a9f0:	4593      	cmp	fp, r2
 800a9f2:	d17f      	bne.n	800aaf4 <__ssvfiscanf_r+0x294>
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	6862      	ldr	r2, [r4, #4]
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a9fc:	3a01      	subs	r2, #1
 800a9fe:	3301      	adds	r3, #1
 800aa00:	6062      	str	r2, [r4, #4]
 800aa02:	9347      	str	r3, [sp, #284]	; 0x11c
 800aa04:	e7a1      	b.n	800a94a <__ssvfiscanf_r+0xea>
 800aa06:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800aa08:	4621      	mov	r1, r4
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	4798      	blx	r3
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	d0ec      	beq.n	800a9ec <__ssvfiscanf_r+0x18c>
 800aa12:	9846      	ldr	r0, [sp, #280]	; 0x118
 800aa14:	2800      	cmp	r0, #0
 800aa16:	d163      	bne.n	800aae0 <__ssvfiscanf_r+0x280>
 800aa18:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1c:	e066      	b.n	800aaec <__ssvfiscanf_r+0x28c>
 800aa1e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800aa20:	f042 0220 	orr.w	r2, r2, #32
 800aa24:	9243      	str	r2, [sp, #268]	; 0x10c
 800aa26:	e7a4      	b.n	800a972 <__ssvfiscanf_r+0x112>
 800aa28:	2308      	movs	r3, #8
 800aa2a:	9344      	str	r3, [sp, #272]	; 0x110
 800aa2c:	2304      	movs	r3, #4
 800aa2e:	e7bc      	b.n	800a9aa <__ssvfiscanf_r+0x14a>
 800aa30:	4629      	mov	r1, r5
 800aa32:	4640      	mov	r0, r8
 800aa34:	f000 fb56 	bl	800b0e4 <__sccl>
 800aa38:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800aa3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa3e:	9343      	str	r3, [sp, #268]	; 0x10c
 800aa40:	4605      	mov	r5, r0
 800aa42:	2301      	movs	r3, #1
 800aa44:	e7b1      	b.n	800a9aa <__ssvfiscanf_r+0x14a>
 800aa46:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800aa48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa4c:	9343      	str	r3, [sp, #268]	; 0x10c
 800aa4e:	2300      	movs	r3, #0
 800aa50:	e7ab      	b.n	800a9aa <__ssvfiscanf_r+0x14a>
 800aa52:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800aa54:	06d0      	lsls	r0, r2, #27
 800aa56:	f53f af78 	bmi.w	800a94a <__ssvfiscanf_r+0xea>
 800aa5a:	f012 0f01 	tst.w	r2, #1
 800aa5e:	9a01      	ldr	r2, [sp, #4]
 800aa60:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800aa62:	f102 0104 	add.w	r1, r2, #4
 800aa66:	9101      	str	r1, [sp, #4]
 800aa68:	6812      	ldr	r2, [r2, #0]
 800aa6a:	bf14      	ite	ne
 800aa6c:	8013      	strhne	r3, [r2, #0]
 800aa6e:	6013      	streq	r3, [r2, #0]
 800aa70:	e76b      	b.n	800a94a <__ssvfiscanf_r+0xea>
 800aa72:	2305      	movs	r3, #5
 800aa74:	e799      	b.n	800a9aa <__ssvfiscanf_r+0x14a>
 800aa76:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800aa78:	4621      	mov	r1, r4
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	4798      	blx	r3
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	d097      	beq.n	800a9b2 <__ssvfiscanf_r+0x152>
 800aa82:	e7c6      	b.n	800aa12 <__ssvfiscanf_r+0x1b2>
 800aa84:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800aa86:	3201      	adds	r2, #1
 800aa88:	9247      	str	r2, [sp, #284]	; 0x11c
 800aa8a:	6862      	ldr	r2, [r4, #4]
 800aa8c:	3a01      	subs	r2, #1
 800aa8e:	2a00      	cmp	r2, #0
 800aa90:	6062      	str	r2, [r4, #4]
 800aa92:	dd0a      	ble.n	800aaaa <__ssvfiscanf_r+0x24a>
 800aa94:	3301      	adds	r3, #1
 800aa96:	6023      	str	r3, [r4, #0]
 800aa98:	f000 fcb4 	bl	800b404 <__locale_ctype_ptr>
 800aa9c:	6823      	ldr	r3, [r4, #0]
 800aa9e:	781a      	ldrb	r2, [r3, #0]
 800aaa0:	4410      	add	r0, r2
 800aaa2:	7842      	ldrb	r2, [r0, #1]
 800aaa4:	0712      	lsls	r2, r2, #28
 800aaa6:	d4ed      	bmi.n	800aa84 <__ssvfiscanf_r+0x224>
 800aaa8:	e786      	b.n	800a9b8 <__ssvfiscanf_r+0x158>
 800aaaa:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800aaac:	4621      	mov	r1, r4
 800aaae:	4630      	mov	r0, r6
 800aab0:	4798      	blx	r3
 800aab2:	2800      	cmp	r0, #0
 800aab4:	d0f0      	beq.n	800aa98 <__ssvfiscanf_r+0x238>
 800aab6:	e7ac      	b.n	800aa12 <__ssvfiscanf_r+0x1b2>
 800aab8:	2b04      	cmp	r3, #4
 800aaba:	dc06      	bgt.n	800aaca <__ssvfiscanf_r+0x26a>
 800aabc:	ab01      	add	r3, sp, #4
 800aabe:	4622      	mov	r2, r4
 800aac0:	a943      	add	r1, sp, #268	; 0x10c
 800aac2:	4630      	mov	r0, r6
 800aac4:	f000 fa1a 	bl	800aefc <_scanf_i>
 800aac8:	e77f      	b.n	800a9ca <__ssvfiscanf_r+0x16a>
 800aaca:	4b0e      	ldr	r3, [pc, #56]	; (800ab04 <__ssvfiscanf_r+0x2a4>)
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f43f af3c 	beq.w	800a94a <__ssvfiscanf_r+0xea>
 800aad2:	ab01      	add	r3, sp, #4
 800aad4:	4622      	mov	r2, r4
 800aad6:	a943      	add	r1, sp, #268	; 0x10c
 800aad8:	4630      	mov	r0, r6
 800aada:	f3af 8000 	nop.w
 800aade:	e774      	b.n	800a9ca <__ssvfiscanf_r+0x16a>
 800aae0:	89a3      	ldrh	r3, [r4, #12]
 800aae2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800aae6:	bf18      	it	ne
 800aae8:	f04f 30ff 	movne.w	r0, #4294967295
 800aaec:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 800aaf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf4:	9846      	ldr	r0, [sp, #280]	; 0x118
 800aaf6:	e7f9      	b.n	800aaec <__ssvfiscanf_r+0x28c>
 800aaf8:	0800a7ad 	.word	0x0800a7ad
 800aafc:	0800a827 	.word	0x0800a827
 800ab00:	0800b879 	.word	0x0800b879
 800ab04:	00000000 	.word	0x00000000

0800ab08 <_printf_common>:
 800ab08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab0c:	4691      	mov	r9, r2
 800ab0e:	461f      	mov	r7, r3
 800ab10:	688a      	ldr	r2, [r1, #8]
 800ab12:	690b      	ldr	r3, [r1, #16]
 800ab14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	bfb8      	it	lt
 800ab1c:	4613      	movlt	r3, r2
 800ab1e:	f8c9 3000 	str.w	r3, [r9]
 800ab22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab26:	4606      	mov	r6, r0
 800ab28:	460c      	mov	r4, r1
 800ab2a:	b112      	cbz	r2, 800ab32 <_printf_common+0x2a>
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	f8c9 3000 	str.w	r3, [r9]
 800ab32:	6823      	ldr	r3, [r4, #0]
 800ab34:	0699      	lsls	r1, r3, #26
 800ab36:	bf42      	ittt	mi
 800ab38:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ab3c:	3302      	addmi	r3, #2
 800ab3e:	f8c9 3000 	strmi.w	r3, [r9]
 800ab42:	6825      	ldr	r5, [r4, #0]
 800ab44:	f015 0506 	ands.w	r5, r5, #6
 800ab48:	d107      	bne.n	800ab5a <_printf_common+0x52>
 800ab4a:	f104 0a19 	add.w	sl, r4, #25
 800ab4e:	68e3      	ldr	r3, [r4, #12]
 800ab50:	f8d9 2000 	ldr.w	r2, [r9]
 800ab54:	1a9b      	subs	r3, r3, r2
 800ab56:	429d      	cmp	r5, r3
 800ab58:	db29      	blt.n	800abae <_printf_common+0xa6>
 800ab5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ab5e:	6822      	ldr	r2, [r4, #0]
 800ab60:	3300      	adds	r3, #0
 800ab62:	bf18      	it	ne
 800ab64:	2301      	movne	r3, #1
 800ab66:	0692      	lsls	r2, r2, #26
 800ab68:	d42e      	bmi.n	800abc8 <_printf_common+0xc0>
 800ab6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab6e:	4639      	mov	r1, r7
 800ab70:	4630      	mov	r0, r6
 800ab72:	47c0      	blx	r8
 800ab74:	3001      	adds	r0, #1
 800ab76:	d021      	beq.n	800abbc <_printf_common+0xb4>
 800ab78:	6823      	ldr	r3, [r4, #0]
 800ab7a:	68e5      	ldr	r5, [r4, #12]
 800ab7c:	f8d9 2000 	ldr.w	r2, [r9]
 800ab80:	f003 0306 	and.w	r3, r3, #6
 800ab84:	2b04      	cmp	r3, #4
 800ab86:	bf08      	it	eq
 800ab88:	1aad      	subeq	r5, r5, r2
 800ab8a:	68a3      	ldr	r3, [r4, #8]
 800ab8c:	6922      	ldr	r2, [r4, #16]
 800ab8e:	bf0c      	ite	eq
 800ab90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab94:	2500      	movne	r5, #0
 800ab96:	4293      	cmp	r3, r2
 800ab98:	bfc4      	itt	gt
 800ab9a:	1a9b      	subgt	r3, r3, r2
 800ab9c:	18ed      	addgt	r5, r5, r3
 800ab9e:	f04f 0900 	mov.w	r9, #0
 800aba2:	341a      	adds	r4, #26
 800aba4:	454d      	cmp	r5, r9
 800aba6:	d11b      	bne.n	800abe0 <_printf_common+0xd8>
 800aba8:	2000      	movs	r0, #0
 800abaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abae:	2301      	movs	r3, #1
 800abb0:	4652      	mov	r2, sl
 800abb2:	4639      	mov	r1, r7
 800abb4:	4630      	mov	r0, r6
 800abb6:	47c0      	blx	r8
 800abb8:	3001      	adds	r0, #1
 800abba:	d103      	bne.n	800abc4 <_printf_common+0xbc>
 800abbc:	f04f 30ff 	mov.w	r0, #4294967295
 800abc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc4:	3501      	adds	r5, #1
 800abc6:	e7c2      	b.n	800ab4e <_printf_common+0x46>
 800abc8:	18e1      	adds	r1, r4, r3
 800abca:	1c5a      	adds	r2, r3, #1
 800abcc:	2030      	movs	r0, #48	; 0x30
 800abce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800abd2:	4422      	add	r2, r4
 800abd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800abd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abdc:	3302      	adds	r3, #2
 800abde:	e7c4      	b.n	800ab6a <_printf_common+0x62>
 800abe0:	2301      	movs	r3, #1
 800abe2:	4622      	mov	r2, r4
 800abe4:	4639      	mov	r1, r7
 800abe6:	4630      	mov	r0, r6
 800abe8:	47c0      	blx	r8
 800abea:	3001      	adds	r0, #1
 800abec:	d0e6      	beq.n	800abbc <_printf_common+0xb4>
 800abee:	f109 0901 	add.w	r9, r9, #1
 800abf2:	e7d7      	b.n	800aba4 <_printf_common+0x9c>

0800abf4 <_printf_i>:
 800abf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abf8:	4617      	mov	r7, r2
 800abfa:	7e0a      	ldrb	r2, [r1, #24]
 800abfc:	b085      	sub	sp, #20
 800abfe:	2a6e      	cmp	r2, #110	; 0x6e
 800ac00:	4698      	mov	r8, r3
 800ac02:	4606      	mov	r6, r0
 800ac04:	460c      	mov	r4, r1
 800ac06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac08:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800ac0c:	f000 80bc 	beq.w	800ad88 <_printf_i+0x194>
 800ac10:	d81a      	bhi.n	800ac48 <_printf_i+0x54>
 800ac12:	2a63      	cmp	r2, #99	; 0x63
 800ac14:	d02e      	beq.n	800ac74 <_printf_i+0x80>
 800ac16:	d80a      	bhi.n	800ac2e <_printf_i+0x3a>
 800ac18:	2a00      	cmp	r2, #0
 800ac1a:	f000 80c8 	beq.w	800adae <_printf_i+0x1ba>
 800ac1e:	2a58      	cmp	r2, #88	; 0x58
 800ac20:	f000 808a 	beq.w	800ad38 <_printf_i+0x144>
 800ac24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac28:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800ac2c:	e02a      	b.n	800ac84 <_printf_i+0x90>
 800ac2e:	2a64      	cmp	r2, #100	; 0x64
 800ac30:	d001      	beq.n	800ac36 <_printf_i+0x42>
 800ac32:	2a69      	cmp	r2, #105	; 0x69
 800ac34:	d1f6      	bne.n	800ac24 <_printf_i+0x30>
 800ac36:	6821      	ldr	r1, [r4, #0]
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800ac3e:	d023      	beq.n	800ac88 <_printf_i+0x94>
 800ac40:	1d11      	adds	r1, r2, #4
 800ac42:	6019      	str	r1, [r3, #0]
 800ac44:	6813      	ldr	r3, [r2, #0]
 800ac46:	e027      	b.n	800ac98 <_printf_i+0xa4>
 800ac48:	2a73      	cmp	r2, #115	; 0x73
 800ac4a:	f000 80b4 	beq.w	800adb6 <_printf_i+0x1c2>
 800ac4e:	d808      	bhi.n	800ac62 <_printf_i+0x6e>
 800ac50:	2a6f      	cmp	r2, #111	; 0x6f
 800ac52:	d02a      	beq.n	800acaa <_printf_i+0xb6>
 800ac54:	2a70      	cmp	r2, #112	; 0x70
 800ac56:	d1e5      	bne.n	800ac24 <_printf_i+0x30>
 800ac58:	680a      	ldr	r2, [r1, #0]
 800ac5a:	f042 0220 	orr.w	r2, r2, #32
 800ac5e:	600a      	str	r2, [r1, #0]
 800ac60:	e003      	b.n	800ac6a <_printf_i+0x76>
 800ac62:	2a75      	cmp	r2, #117	; 0x75
 800ac64:	d021      	beq.n	800acaa <_printf_i+0xb6>
 800ac66:	2a78      	cmp	r2, #120	; 0x78
 800ac68:	d1dc      	bne.n	800ac24 <_printf_i+0x30>
 800ac6a:	2278      	movs	r2, #120	; 0x78
 800ac6c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800ac70:	496e      	ldr	r1, [pc, #440]	; (800ae2c <_printf_i+0x238>)
 800ac72:	e064      	b.n	800ad3e <_printf_i+0x14a>
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800ac7a:	1d11      	adds	r1, r2, #4
 800ac7c:	6019      	str	r1, [r3, #0]
 800ac7e:	6813      	ldr	r3, [r2, #0]
 800ac80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac84:	2301      	movs	r3, #1
 800ac86:	e0a3      	b.n	800add0 <_printf_i+0x1dc>
 800ac88:	f011 0f40 	tst.w	r1, #64	; 0x40
 800ac8c:	f102 0104 	add.w	r1, r2, #4
 800ac90:	6019      	str	r1, [r3, #0]
 800ac92:	d0d7      	beq.n	800ac44 <_printf_i+0x50>
 800ac94:	f9b2 3000 	ldrsh.w	r3, [r2]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	da03      	bge.n	800aca4 <_printf_i+0xb0>
 800ac9c:	222d      	movs	r2, #45	; 0x2d
 800ac9e:	425b      	negs	r3, r3
 800aca0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800aca4:	4962      	ldr	r1, [pc, #392]	; (800ae30 <_printf_i+0x23c>)
 800aca6:	220a      	movs	r2, #10
 800aca8:	e017      	b.n	800acda <_printf_i+0xe6>
 800acaa:	6820      	ldr	r0, [r4, #0]
 800acac:	6819      	ldr	r1, [r3, #0]
 800acae:	f010 0f80 	tst.w	r0, #128	; 0x80
 800acb2:	d003      	beq.n	800acbc <_printf_i+0xc8>
 800acb4:	1d08      	adds	r0, r1, #4
 800acb6:	6018      	str	r0, [r3, #0]
 800acb8:	680b      	ldr	r3, [r1, #0]
 800acba:	e006      	b.n	800acca <_printf_i+0xd6>
 800acbc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800acc0:	f101 0004 	add.w	r0, r1, #4
 800acc4:	6018      	str	r0, [r3, #0]
 800acc6:	d0f7      	beq.n	800acb8 <_printf_i+0xc4>
 800acc8:	880b      	ldrh	r3, [r1, #0]
 800acca:	4959      	ldr	r1, [pc, #356]	; (800ae30 <_printf_i+0x23c>)
 800accc:	2a6f      	cmp	r2, #111	; 0x6f
 800acce:	bf14      	ite	ne
 800acd0:	220a      	movne	r2, #10
 800acd2:	2208      	moveq	r2, #8
 800acd4:	2000      	movs	r0, #0
 800acd6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800acda:	6865      	ldr	r5, [r4, #4]
 800acdc:	60a5      	str	r5, [r4, #8]
 800acde:	2d00      	cmp	r5, #0
 800ace0:	f2c0 809c 	blt.w	800ae1c <_printf_i+0x228>
 800ace4:	6820      	ldr	r0, [r4, #0]
 800ace6:	f020 0004 	bic.w	r0, r0, #4
 800acea:	6020      	str	r0, [r4, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d13f      	bne.n	800ad70 <_printf_i+0x17c>
 800acf0:	2d00      	cmp	r5, #0
 800acf2:	f040 8095 	bne.w	800ae20 <_printf_i+0x22c>
 800acf6:	4675      	mov	r5, lr
 800acf8:	2a08      	cmp	r2, #8
 800acfa:	d10b      	bne.n	800ad14 <_printf_i+0x120>
 800acfc:	6823      	ldr	r3, [r4, #0]
 800acfe:	07da      	lsls	r2, r3, #31
 800ad00:	d508      	bpl.n	800ad14 <_printf_i+0x120>
 800ad02:	6923      	ldr	r3, [r4, #16]
 800ad04:	6862      	ldr	r2, [r4, #4]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	bfde      	ittt	le
 800ad0a:	2330      	movle	r3, #48	; 0x30
 800ad0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad14:	ebae 0305 	sub.w	r3, lr, r5
 800ad18:	6123      	str	r3, [r4, #16]
 800ad1a:	f8cd 8000 	str.w	r8, [sp]
 800ad1e:	463b      	mov	r3, r7
 800ad20:	aa03      	add	r2, sp, #12
 800ad22:	4621      	mov	r1, r4
 800ad24:	4630      	mov	r0, r6
 800ad26:	f7ff feef 	bl	800ab08 <_printf_common>
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	d155      	bne.n	800adda <_printf_i+0x1e6>
 800ad2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad32:	b005      	add	sp, #20
 800ad34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad38:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800ad3c:	493c      	ldr	r1, [pc, #240]	; (800ae30 <_printf_i+0x23c>)
 800ad3e:	6822      	ldr	r2, [r4, #0]
 800ad40:	6818      	ldr	r0, [r3, #0]
 800ad42:	f012 0f80 	tst.w	r2, #128	; 0x80
 800ad46:	f100 0504 	add.w	r5, r0, #4
 800ad4a:	601d      	str	r5, [r3, #0]
 800ad4c:	d001      	beq.n	800ad52 <_printf_i+0x15e>
 800ad4e:	6803      	ldr	r3, [r0, #0]
 800ad50:	e002      	b.n	800ad58 <_printf_i+0x164>
 800ad52:	0655      	lsls	r5, r2, #25
 800ad54:	d5fb      	bpl.n	800ad4e <_printf_i+0x15a>
 800ad56:	8803      	ldrh	r3, [r0, #0]
 800ad58:	07d0      	lsls	r0, r2, #31
 800ad5a:	bf44      	itt	mi
 800ad5c:	f042 0220 	orrmi.w	r2, r2, #32
 800ad60:	6022      	strmi	r2, [r4, #0]
 800ad62:	b91b      	cbnz	r3, 800ad6c <_printf_i+0x178>
 800ad64:	6822      	ldr	r2, [r4, #0]
 800ad66:	f022 0220 	bic.w	r2, r2, #32
 800ad6a:	6022      	str	r2, [r4, #0]
 800ad6c:	2210      	movs	r2, #16
 800ad6e:	e7b1      	b.n	800acd4 <_printf_i+0xe0>
 800ad70:	4675      	mov	r5, lr
 800ad72:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad76:	fb02 3310 	mls	r3, r2, r0, r3
 800ad7a:	5ccb      	ldrb	r3, [r1, r3]
 800ad7c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ad80:	4603      	mov	r3, r0
 800ad82:	2800      	cmp	r0, #0
 800ad84:	d1f5      	bne.n	800ad72 <_printf_i+0x17e>
 800ad86:	e7b7      	b.n	800acf8 <_printf_i+0x104>
 800ad88:	6808      	ldr	r0, [r1, #0]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	6949      	ldr	r1, [r1, #20]
 800ad8e:	f010 0f80 	tst.w	r0, #128	; 0x80
 800ad92:	d004      	beq.n	800ad9e <_printf_i+0x1aa>
 800ad94:	1d10      	adds	r0, r2, #4
 800ad96:	6018      	str	r0, [r3, #0]
 800ad98:	6813      	ldr	r3, [r2, #0]
 800ad9a:	6019      	str	r1, [r3, #0]
 800ad9c:	e007      	b.n	800adae <_printf_i+0x1ba>
 800ad9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ada2:	f102 0004 	add.w	r0, r2, #4
 800ada6:	6018      	str	r0, [r3, #0]
 800ada8:	6813      	ldr	r3, [r2, #0]
 800adaa:	d0f6      	beq.n	800ad9a <_printf_i+0x1a6>
 800adac:	8019      	strh	r1, [r3, #0]
 800adae:	2300      	movs	r3, #0
 800adb0:	6123      	str	r3, [r4, #16]
 800adb2:	4675      	mov	r5, lr
 800adb4:	e7b1      	b.n	800ad1a <_printf_i+0x126>
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	1d11      	adds	r1, r2, #4
 800adba:	6019      	str	r1, [r3, #0]
 800adbc:	6815      	ldr	r5, [r2, #0]
 800adbe:	6862      	ldr	r2, [r4, #4]
 800adc0:	2100      	movs	r1, #0
 800adc2:	4628      	mov	r0, r5
 800adc4:	f7f5 fa0c 	bl	80001e0 <memchr>
 800adc8:	b108      	cbz	r0, 800adce <_printf_i+0x1da>
 800adca:	1b40      	subs	r0, r0, r5
 800adcc:	6060      	str	r0, [r4, #4]
 800adce:	6863      	ldr	r3, [r4, #4]
 800add0:	6123      	str	r3, [r4, #16]
 800add2:	2300      	movs	r3, #0
 800add4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800add8:	e79f      	b.n	800ad1a <_printf_i+0x126>
 800adda:	6923      	ldr	r3, [r4, #16]
 800addc:	462a      	mov	r2, r5
 800adde:	4639      	mov	r1, r7
 800ade0:	4630      	mov	r0, r6
 800ade2:	47c0      	blx	r8
 800ade4:	3001      	adds	r0, #1
 800ade6:	d0a2      	beq.n	800ad2e <_printf_i+0x13a>
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	079b      	lsls	r3, r3, #30
 800adec:	d507      	bpl.n	800adfe <_printf_i+0x20a>
 800adee:	2500      	movs	r5, #0
 800adf0:	f104 0919 	add.w	r9, r4, #25
 800adf4:	68e3      	ldr	r3, [r4, #12]
 800adf6:	9a03      	ldr	r2, [sp, #12]
 800adf8:	1a9b      	subs	r3, r3, r2
 800adfa:	429d      	cmp	r5, r3
 800adfc:	db05      	blt.n	800ae0a <_printf_i+0x216>
 800adfe:	68e0      	ldr	r0, [r4, #12]
 800ae00:	9b03      	ldr	r3, [sp, #12]
 800ae02:	4298      	cmp	r0, r3
 800ae04:	bfb8      	it	lt
 800ae06:	4618      	movlt	r0, r3
 800ae08:	e793      	b.n	800ad32 <_printf_i+0x13e>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	464a      	mov	r2, r9
 800ae0e:	4639      	mov	r1, r7
 800ae10:	4630      	mov	r0, r6
 800ae12:	47c0      	blx	r8
 800ae14:	3001      	adds	r0, #1
 800ae16:	d08a      	beq.n	800ad2e <_printf_i+0x13a>
 800ae18:	3501      	adds	r5, #1
 800ae1a:	e7eb      	b.n	800adf4 <_printf_i+0x200>
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1a7      	bne.n	800ad70 <_printf_i+0x17c>
 800ae20:	780b      	ldrb	r3, [r1, #0]
 800ae22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae2a:	e765      	b.n	800acf8 <_printf_i+0x104>
 800ae2c:	0800b895 	.word	0x0800b895
 800ae30:	0800b884 	.word	0x0800b884

0800ae34 <_scanf_chars>:
 800ae34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae38:	4615      	mov	r5, r2
 800ae3a:	688a      	ldr	r2, [r1, #8]
 800ae3c:	4680      	mov	r8, r0
 800ae3e:	460c      	mov	r4, r1
 800ae40:	b932      	cbnz	r2, 800ae50 <_scanf_chars+0x1c>
 800ae42:	698a      	ldr	r2, [r1, #24]
 800ae44:	2a00      	cmp	r2, #0
 800ae46:	bf0c      	ite	eq
 800ae48:	2201      	moveq	r2, #1
 800ae4a:	f04f 32ff 	movne.w	r2, #4294967295
 800ae4e:	608a      	str	r2, [r1, #8]
 800ae50:	6822      	ldr	r2, [r4, #0]
 800ae52:	06d1      	lsls	r1, r2, #27
 800ae54:	bf5f      	itttt	pl
 800ae56:	681a      	ldrpl	r2, [r3, #0]
 800ae58:	1d11      	addpl	r1, r2, #4
 800ae5a:	6019      	strpl	r1, [r3, #0]
 800ae5c:	6817      	ldrpl	r7, [r2, #0]
 800ae5e:	2600      	movs	r6, #0
 800ae60:	69a3      	ldr	r3, [r4, #24]
 800ae62:	b1db      	cbz	r3, 800ae9c <_scanf_chars+0x68>
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d107      	bne.n	800ae78 <_scanf_chars+0x44>
 800ae68:	682b      	ldr	r3, [r5, #0]
 800ae6a:	6962      	ldr	r2, [r4, #20]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	5cd3      	ldrb	r3, [r2, r3]
 800ae70:	b9a3      	cbnz	r3, 800ae9c <_scanf_chars+0x68>
 800ae72:	2e00      	cmp	r6, #0
 800ae74:	d132      	bne.n	800aedc <_scanf_chars+0xa8>
 800ae76:	e006      	b.n	800ae86 <_scanf_chars+0x52>
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	d007      	beq.n	800ae8c <_scanf_chars+0x58>
 800ae7c:	2e00      	cmp	r6, #0
 800ae7e:	d12d      	bne.n	800aedc <_scanf_chars+0xa8>
 800ae80:	69a3      	ldr	r3, [r4, #24]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d12a      	bne.n	800aedc <_scanf_chars+0xa8>
 800ae86:	2001      	movs	r0, #1
 800ae88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae8c:	f000 faba 	bl	800b404 <__locale_ctype_ptr>
 800ae90:	682b      	ldr	r3, [r5, #0]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	4418      	add	r0, r3
 800ae96:	7843      	ldrb	r3, [r0, #1]
 800ae98:	071b      	lsls	r3, r3, #28
 800ae9a:	d4ef      	bmi.n	800ae7c <_scanf_chars+0x48>
 800ae9c:	6823      	ldr	r3, [r4, #0]
 800ae9e:	06da      	lsls	r2, r3, #27
 800aea0:	bf5e      	ittt	pl
 800aea2:	682b      	ldrpl	r3, [r5, #0]
 800aea4:	781b      	ldrbpl	r3, [r3, #0]
 800aea6:	703b      	strbpl	r3, [r7, #0]
 800aea8:	682a      	ldr	r2, [r5, #0]
 800aeaa:	686b      	ldr	r3, [r5, #4]
 800aeac:	f102 0201 	add.w	r2, r2, #1
 800aeb0:	602a      	str	r2, [r5, #0]
 800aeb2:	68a2      	ldr	r2, [r4, #8]
 800aeb4:	f103 33ff 	add.w	r3, r3, #4294967295
 800aeb8:	f102 32ff 	add.w	r2, r2, #4294967295
 800aebc:	606b      	str	r3, [r5, #4]
 800aebe:	f106 0601 	add.w	r6, r6, #1
 800aec2:	bf58      	it	pl
 800aec4:	3701      	addpl	r7, #1
 800aec6:	60a2      	str	r2, [r4, #8]
 800aec8:	b142      	cbz	r2, 800aedc <_scanf_chars+0xa8>
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	dcc8      	bgt.n	800ae60 <_scanf_chars+0x2c>
 800aece:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aed2:	4629      	mov	r1, r5
 800aed4:	4640      	mov	r0, r8
 800aed6:	4798      	blx	r3
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d0c1      	beq.n	800ae60 <_scanf_chars+0x2c>
 800aedc:	6823      	ldr	r3, [r4, #0]
 800aede:	f013 0310 	ands.w	r3, r3, #16
 800aee2:	d105      	bne.n	800aef0 <_scanf_chars+0xbc>
 800aee4:	68e2      	ldr	r2, [r4, #12]
 800aee6:	3201      	adds	r2, #1
 800aee8:	60e2      	str	r2, [r4, #12]
 800aeea:	69a2      	ldr	r2, [r4, #24]
 800aeec:	b102      	cbz	r2, 800aef0 <_scanf_chars+0xbc>
 800aeee:	703b      	strb	r3, [r7, #0]
 800aef0:	6923      	ldr	r3, [r4, #16]
 800aef2:	441e      	add	r6, r3
 800aef4:	6126      	str	r6, [r4, #16]
 800aef6:	2000      	movs	r0, #0
 800aef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aefc <_scanf_i>:
 800aefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af00:	469a      	mov	sl, r3
 800af02:	4b74      	ldr	r3, [pc, #464]	; (800b0d4 <_scanf_i+0x1d8>)
 800af04:	460c      	mov	r4, r1
 800af06:	4683      	mov	fp, r0
 800af08:	4616      	mov	r6, r2
 800af0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800af0e:	b087      	sub	sp, #28
 800af10:	ab03      	add	r3, sp, #12
 800af12:	68a7      	ldr	r7, [r4, #8]
 800af14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800af18:	4b6f      	ldr	r3, [pc, #444]	; (800b0d8 <_scanf_i+0x1dc>)
 800af1a:	69a1      	ldr	r1, [r4, #24]
 800af1c:	4a6f      	ldr	r2, [pc, #444]	; (800b0dc <_scanf_i+0x1e0>)
 800af1e:	2903      	cmp	r1, #3
 800af20:	bf18      	it	ne
 800af22:	461a      	movne	r2, r3
 800af24:	1e7b      	subs	r3, r7, #1
 800af26:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800af2a:	bf84      	itt	hi
 800af2c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800af30:	60a3      	strhi	r3, [r4, #8]
 800af32:	6823      	ldr	r3, [r4, #0]
 800af34:	9200      	str	r2, [sp, #0]
 800af36:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800af3a:	bf88      	it	hi
 800af3c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800af40:	f104 091c 	add.w	r9, r4, #28
 800af44:	6023      	str	r3, [r4, #0]
 800af46:	bf8c      	ite	hi
 800af48:	197f      	addhi	r7, r7, r5
 800af4a:	2700      	movls	r7, #0
 800af4c:	464b      	mov	r3, r9
 800af4e:	f04f 0800 	mov.w	r8, #0
 800af52:	9301      	str	r3, [sp, #4]
 800af54:	6831      	ldr	r1, [r6, #0]
 800af56:	ab03      	add	r3, sp, #12
 800af58:	2202      	movs	r2, #2
 800af5a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800af5e:	7809      	ldrb	r1, [r1, #0]
 800af60:	f7f5 f93e 	bl	80001e0 <memchr>
 800af64:	9b01      	ldr	r3, [sp, #4]
 800af66:	b328      	cbz	r0, 800afb4 <_scanf_i+0xb8>
 800af68:	f1b8 0f01 	cmp.w	r8, #1
 800af6c:	d156      	bne.n	800b01c <_scanf_i+0x120>
 800af6e:	6862      	ldr	r2, [r4, #4]
 800af70:	b92a      	cbnz	r2, 800af7e <_scanf_i+0x82>
 800af72:	2208      	movs	r2, #8
 800af74:	6062      	str	r2, [r4, #4]
 800af76:	6822      	ldr	r2, [r4, #0]
 800af78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af7c:	6022      	str	r2, [r4, #0]
 800af7e:	6822      	ldr	r2, [r4, #0]
 800af80:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800af84:	6022      	str	r2, [r4, #0]
 800af86:	68a2      	ldr	r2, [r4, #8]
 800af88:	1e51      	subs	r1, r2, #1
 800af8a:	60a1      	str	r1, [r4, #8]
 800af8c:	b192      	cbz	r2, 800afb4 <_scanf_i+0xb8>
 800af8e:	6832      	ldr	r2, [r6, #0]
 800af90:	1c51      	adds	r1, r2, #1
 800af92:	6031      	str	r1, [r6, #0]
 800af94:	7812      	ldrb	r2, [r2, #0]
 800af96:	701a      	strb	r2, [r3, #0]
 800af98:	1c5d      	adds	r5, r3, #1
 800af9a:	6873      	ldr	r3, [r6, #4]
 800af9c:	3b01      	subs	r3, #1
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	6073      	str	r3, [r6, #4]
 800afa2:	dc06      	bgt.n	800afb2 <_scanf_i+0xb6>
 800afa4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800afa8:	4631      	mov	r1, r6
 800afaa:	4658      	mov	r0, fp
 800afac:	4798      	blx	r3
 800afae:	2800      	cmp	r0, #0
 800afb0:	d176      	bne.n	800b0a0 <_scanf_i+0x1a4>
 800afb2:	462b      	mov	r3, r5
 800afb4:	f108 0801 	add.w	r8, r8, #1
 800afb8:	f1b8 0f03 	cmp.w	r8, #3
 800afbc:	d1c9      	bne.n	800af52 <_scanf_i+0x56>
 800afbe:	6862      	ldr	r2, [r4, #4]
 800afc0:	b90a      	cbnz	r2, 800afc6 <_scanf_i+0xca>
 800afc2:	220a      	movs	r2, #10
 800afc4:	6062      	str	r2, [r4, #4]
 800afc6:	6862      	ldr	r2, [r4, #4]
 800afc8:	4945      	ldr	r1, [pc, #276]	; (800b0e0 <_scanf_i+0x1e4>)
 800afca:	6960      	ldr	r0, [r4, #20]
 800afcc:	9301      	str	r3, [sp, #4]
 800afce:	1a89      	subs	r1, r1, r2
 800afd0:	f000 f888 	bl	800b0e4 <__sccl>
 800afd4:	9b01      	ldr	r3, [sp, #4]
 800afd6:	f04f 0800 	mov.w	r8, #0
 800afda:	461d      	mov	r5, r3
 800afdc:	68a3      	ldr	r3, [r4, #8]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d038      	beq.n	800b054 <_scanf_i+0x158>
 800afe2:	6831      	ldr	r1, [r6, #0]
 800afe4:	6960      	ldr	r0, [r4, #20]
 800afe6:	780a      	ldrb	r2, [r1, #0]
 800afe8:	5c80      	ldrb	r0, [r0, r2]
 800afea:	2800      	cmp	r0, #0
 800afec:	d032      	beq.n	800b054 <_scanf_i+0x158>
 800afee:	2a30      	cmp	r2, #48	; 0x30
 800aff0:	6822      	ldr	r2, [r4, #0]
 800aff2:	d121      	bne.n	800b038 <_scanf_i+0x13c>
 800aff4:	0510      	lsls	r0, r2, #20
 800aff6:	d51f      	bpl.n	800b038 <_scanf_i+0x13c>
 800aff8:	f108 0801 	add.w	r8, r8, #1
 800affc:	b117      	cbz	r7, 800b004 <_scanf_i+0x108>
 800affe:	3301      	adds	r3, #1
 800b000:	3f01      	subs	r7, #1
 800b002:	60a3      	str	r3, [r4, #8]
 800b004:	6873      	ldr	r3, [r6, #4]
 800b006:	3b01      	subs	r3, #1
 800b008:	2b00      	cmp	r3, #0
 800b00a:	6073      	str	r3, [r6, #4]
 800b00c:	dd1b      	ble.n	800b046 <_scanf_i+0x14a>
 800b00e:	6833      	ldr	r3, [r6, #0]
 800b010:	3301      	adds	r3, #1
 800b012:	6033      	str	r3, [r6, #0]
 800b014:	68a3      	ldr	r3, [r4, #8]
 800b016:	3b01      	subs	r3, #1
 800b018:	60a3      	str	r3, [r4, #8]
 800b01a:	e7df      	b.n	800afdc <_scanf_i+0xe0>
 800b01c:	f1b8 0f02 	cmp.w	r8, #2
 800b020:	d1b1      	bne.n	800af86 <_scanf_i+0x8a>
 800b022:	6822      	ldr	r2, [r4, #0]
 800b024:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b028:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b02c:	d1c2      	bne.n	800afb4 <_scanf_i+0xb8>
 800b02e:	2110      	movs	r1, #16
 800b030:	6061      	str	r1, [r4, #4]
 800b032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b036:	e7a5      	b.n	800af84 <_scanf_i+0x88>
 800b038:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b03c:	6022      	str	r2, [r4, #0]
 800b03e:	780b      	ldrb	r3, [r1, #0]
 800b040:	702b      	strb	r3, [r5, #0]
 800b042:	3501      	adds	r5, #1
 800b044:	e7de      	b.n	800b004 <_scanf_i+0x108>
 800b046:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b04a:	4631      	mov	r1, r6
 800b04c:	4658      	mov	r0, fp
 800b04e:	4798      	blx	r3
 800b050:	2800      	cmp	r0, #0
 800b052:	d0df      	beq.n	800b014 <_scanf_i+0x118>
 800b054:	6823      	ldr	r3, [r4, #0]
 800b056:	05d9      	lsls	r1, r3, #23
 800b058:	d50c      	bpl.n	800b074 <_scanf_i+0x178>
 800b05a:	454d      	cmp	r5, r9
 800b05c:	d908      	bls.n	800b070 <_scanf_i+0x174>
 800b05e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b062:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b066:	4632      	mov	r2, r6
 800b068:	4658      	mov	r0, fp
 800b06a:	4798      	blx	r3
 800b06c:	1e6f      	subs	r7, r5, #1
 800b06e:	463d      	mov	r5, r7
 800b070:	454d      	cmp	r5, r9
 800b072:	d02c      	beq.n	800b0ce <_scanf_i+0x1d2>
 800b074:	6822      	ldr	r2, [r4, #0]
 800b076:	f012 0210 	ands.w	r2, r2, #16
 800b07a:	d11e      	bne.n	800b0ba <_scanf_i+0x1be>
 800b07c:	702a      	strb	r2, [r5, #0]
 800b07e:	6863      	ldr	r3, [r4, #4]
 800b080:	9e00      	ldr	r6, [sp, #0]
 800b082:	4649      	mov	r1, r9
 800b084:	4658      	mov	r0, fp
 800b086:	47b0      	blx	r6
 800b088:	6822      	ldr	r2, [r4, #0]
 800b08a:	f8da 3000 	ldr.w	r3, [sl]
 800b08e:	f012 0f20 	tst.w	r2, #32
 800b092:	d008      	beq.n	800b0a6 <_scanf_i+0x1aa>
 800b094:	1d1a      	adds	r2, r3, #4
 800b096:	f8ca 2000 	str.w	r2, [sl]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	6018      	str	r0, [r3, #0]
 800b09e:	e009      	b.n	800b0b4 <_scanf_i+0x1b8>
 800b0a0:	f04f 0800 	mov.w	r8, #0
 800b0a4:	e7d6      	b.n	800b054 <_scanf_i+0x158>
 800b0a6:	07d2      	lsls	r2, r2, #31
 800b0a8:	d5f4      	bpl.n	800b094 <_scanf_i+0x198>
 800b0aa:	1d1a      	adds	r2, r3, #4
 800b0ac:	f8ca 2000 	str.w	r2, [sl]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	8018      	strh	r0, [r3, #0]
 800b0b4:	68e3      	ldr	r3, [r4, #12]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	60e3      	str	r3, [r4, #12]
 800b0ba:	eba5 0509 	sub.w	r5, r5, r9
 800b0be:	44a8      	add	r8, r5
 800b0c0:	6925      	ldr	r5, [r4, #16]
 800b0c2:	4445      	add	r5, r8
 800b0c4:	6125      	str	r5, [r4, #16]
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	b007      	add	sp, #28
 800b0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ce:	2001      	movs	r0, #1
 800b0d0:	e7fa      	b.n	800b0c8 <_scanf_i+0x1cc>
 800b0d2:	bf00      	nop
 800b0d4:	0800b524 	.word	0x0800b524
 800b0d8:	0800b365 	.word	0x0800b365
 800b0dc:	0800b245 	.word	0x0800b245
 800b0e0:	0800b8b6 	.word	0x0800b8b6

0800b0e4 <__sccl>:
 800b0e4:	b570      	push	{r4, r5, r6, lr}
 800b0e6:	780b      	ldrb	r3, [r1, #0]
 800b0e8:	2b5e      	cmp	r3, #94	; 0x5e
 800b0ea:	bf13      	iteet	ne
 800b0ec:	1c4a      	addne	r2, r1, #1
 800b0ee:	1c8a      	addeq	r2, r1, #2
 800b0f0:	784b      	ldrbeq	r3, [r1, #1]
 800b0f2:	2100      	movne	r1, #0
 800b0f4:	bf08      	it	eq
 800b0f6:	2101      	moveq	r1, #1
 800b0f8:	1e44      	subs	r4, r0, #1
 800b0fa:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800b0fe:	f804 1f01 	strb.w	r1, [r4, #1]!
 800b102:	42a5      	cmp	r5, r4
 800b104:	d1fb      	bne.n	800b0fe <__sccl+0x1a>
 800b106:	b913      	cbnz	r3, 800b10e <__sccl+0x2a>
 800b108:	3a01      	subs	r2, #1
 800b10a:	4610      	mov	r0, r2
 800b10c:	bd70      	pop	{r4, r5, r6, pc}
 800b10e:	f081 0401 	eor.w	r4, r1, #1
 800b112:	54c4      	strb	r4, [r0, r3]
 800b114:	4611      	mov	r1, r2
 800b116:	780d      	ldrb	r5, [r1, #0]
 800b118:	2d2d      	cmp	r5, #45	; 0x2d
 800b11a:	f101 0201 	add.w	r2, r1, #1
 800b11e:	d006      	beq.n	800b12e <__sccl+0x4a>
 800b120:	2d5d      	cmp	r5, #93	; 0x5d
 800b122:	d0f2      	beq.n	800b10a <__sccl+0x26>
 800b124:	b90d      	cbnz	r5, 800b12a <__sccl+0x46>
 800b126:	460a      	mov	r2, r1
 800b128:	e7ef      	b.n	800b10a <__sccl+0x26>
 800b12a:	462b      	mov	r3, r5
 800b12c:	e7f1      	b.n	800b112 <__sccl+0x2e>
 800b12e:	784e      	ldrb	r6, [r1, #1]
 800b130:	2e5d      	cmp	r6, #93	; 0x5d
 800b132:	d0fa      	beq.n	800b12a <__sccl+0x46>
 800b134:	42b3      	cmp	r3, r6
 800b136:	dcf8      	bgt.n	800b12a <__sccl+0x46>
 800b138:	3102      	adds	r1, #2
 800b13a:	3301      	adds	r3, #1
 800b13c:	429e      	cmp	r6, r3
 800b13e:	54c4      	strb	r4, [r0, r3]
 800b140:	dcfb      	bgt.n	800b13a <__sccl+0x56>
 800b142:	e7e8      	b.n	800b116 <__sccl+0x32>

0800b144 <_strtol_l.isra.0>:
 800b144:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b148:	4680      	mov	r8, r0
 800b14a:	4689      	mov	r9, r1
 800b14c:	4692      	mov	sl, r2
 800b14e:	461f      	mov	r7, r3
 800b150:	468b      	mov	fp, r1
 800b152:	465d      	mov	r5, fp
 800b154:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b156:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b15a:	f000 f950 	bl	800b3fe <__locale_ctype_ptr_l>
 800b15e:	4420      	add	r0, r4
 800b160:	7846      	ldrb	r6, [r0, #1]
 800b162:	f016 0608 	ands.w	r6, r6, #8
 800b166:	d10b      	bne.n	800b180 <_strtol_l.isra.0+0x3c>
 800b168:	2c2d      	cmp	r4, #45	; 0x2d
 800b16a:	d10b      	bne.n	800b184 <_strtol_l.isra.0+0x40>
 800b16c:	782c      	ldrb	r4, [r5, #0]
 800b16e:	2601      	movs	r6, #1
 800b170:	f10b 0502 	add.w	r5, fp, #2
 800b174:	b167      	cbz	r7, 800b190 <_strtol_l.isra.0+0x4c>
 800b176:	2f10      	cmp	r7, #16
 800b178:	d114      	bne.n	800b1a4 <_strtol_l.isra.0+0x60>
 800b17a:	2c30      	cmp	r4, #48	; 0x30
 800b17c:	d00a      	beq.n	800b194 <_strtol_l.isra.0+0x50>
 800b17e:	e011      	b.n	800b1a4 <_strtol_l.isra.0+0x60>
 800b180:	46ab      	mov	fp, r5
 800b182:	e7e6      	b.n	800b152 <_strtol_l.isra.0+0xe>
 800b184:	2c2b      	cmp	r4, #43	; 0x2b
 800b186:	bf04      	itt	eq
 800b188:	782c      	ldrbeq	r4, [r5, #0]
 800b18a:	f10b 0502 	addeq.w	r5, fp, #2
 800b18e:	e7f1      	b.n	800b174 <_strtol_l.isra.0+0x30>
 800b190:	2c30      	cmp	r4, #48	; 0x30
 800b192:	d127      	bne.n	800b1e4 <_strtol_l.isra.0+0xa0>
 800b194:	782b      	ldrb	r3, [r5, #0]
 800b196:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b19a:	2b58      	cmp	r3, #88	; 0x58
 800b19c:	d14b      	bne.n	800b236 <_strtol_l.isra.0+0xf2>
 800b19e:	786c      	ldrb	r4, [r5, #1]
 800b1a0:	2710      	movs	r7, #16
 800b1a2:	3502      	adds	r5, #2
 800b1a4:	2e00      	cmp	r6, #0
 800b1a6:	bf0c      	ite	eq
 800b1a8:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b1ac:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	fbb1 fef7 	udiv	lr, r1, r7
 800b1b6:	4610      	mov	r0, r2
 800b1b8:	fb07 1c1e 	mls	ip, r7, lr, r1
 800b1bc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b1c0:	2b09      	cmp	r3, #9
 800b1c2:	d811      	bhi.n	800b1e8 <_strtol_l.isra.0+0xa4>
 800b1c4:	461c      	mov	r4, r3
 800b1c6:	42a7      	cmp	r7, r4
 800b1c8:	dd1d      	ble.n	800b206 <_strtol_l.isra.0+0xc2>
 800b1ca:	1c53      	adds	r3, r2, #1
 800b1cc:	d007      	beq.n	800b1de <_strtol_l.isra.0+0x9a>
 800b1ce:	4586      	cmp	lr, r0
 800b1d0:	d316      	bcc.n	800b200 <_strtol_l.isra.0+0xbc>
 800b1d2:	d101      	bne.n	800b1d8 <_strtol_l.isra.0+0x94>
 800b1d4:	45a4      	cmp	ip, r4
 800b1d6:	db13      	blt.n	800b200 <_strtol_l.isra.0+0xbc>
 800b1d8:	fb00 4007 	mla	r0, r0, r7, r4
 800b1dc:	2201      	movs	r2, #1
 800b1de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b1e2:	e7eb      	b.n	800b1bc <_strtol_l.isra.0+0x78>
 800b1e4:	270a      	movs	r7, #10
 800b1e6:	e7dd      	b.n	800b1a4 <_strtol_l.isra.0+0x60>
 800b1e8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b1ec:	2b19      	cmp	r3, #25
 800b1ee:	d801      	bhi.n	800b1f4 <_strtol_l.isra.0+0xb0>
 800b1f0:	3c37      	subs	r4, #55	; 0x37
 800b1f2:	e7e8      	b.n	800b1c6 <_strtol_l.isra.0+0x82>
 800b1f4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b1f8:	2b19      	cmp	r3, #25
 800b1fa:	d804      	bhi.n	800b206 <_strtol_l.isra.0+0xc2>
 800b1fc:	3c57      	subs	r4, #87	; 0x57
 800b1fe:	e7e2      	b.n	800b1c6 <_strtol_l.isra.0+0x82>
 800b200:	f04f 32ff 	mov.w	r2, #4294967295
 800b204:	e7eb      	b.n	800b1de <_strtol_l.isra.0+0x9a>
 800b206:	1c53      	adds	r3, r2, #1
 800b208:	d108      	bne.n	800b21c <_strtol_l.isra.0+0xd8>
 800b20a:	2322      	movs	r3, #34	; 0x22
 800b20c:	f8c8 3000 	str.w	r3, [r8]
 800b210:	4608      	mov	r0, r1
 800b212:	f1ba 0f00 	cmp.w	sl, #0
 800b216:	d107      	bne.n	800b228 <_strtol_l.isra.0+0xe4>
 800b218:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b21c:	b106      	cbz	r6, 800b220 <_strtol_l.isra.0+0xdc>
 800b21e:	4240      	negs	r0, r0
 800b220:	f1ba 0f00 	cmp.w	sl, #0
 800b224:	d00c      	beq.n	800b240 <_strtol_l.isra.0+0xfc>
 800b226:	b122      	cbz	r2, 800b232 <_strtol_l.isra.0+0xee>
 800b228:	3d01      	subs	r5, #1
 800b22a:	f8ca 5000 	str.w	r5, [sl]
 800b22e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b232:	464d      	mov	r5, r9
 800b234:	e7f9      	b.n	800b22a <_strtol_l.isra.0+0xe6>
 800b236:	2430      	movs	r4, #48	; 0x30
 800b238:	2f00      	cmp	r7, #0
 800b23a:	d1b3      	bne.n	800b1a4 <_strtol_l.isra.0+0x60>
 800b23c:	2708      	movs	r7, #8
 800b23e:	e7b1      	b.n	800b1a4 <_strtol_l.isra.0+0x60>
 800b240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b244 <_strtol_r>:
 800b244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b246:	4c06      	ldr	r4, [pc, #24]	; (800b260 <_strtol_r+0x1c>)
 800b248:	4d06      	ldr	r5, [pc, #24]	; (800b264 <_strtol_r+0x20>)
 800b24a:	6824      	ldr	r4, [r4, #0]
 800b24c:	6a24      	ldr	r4, [r4, #32]
 800b24e:	2c00      	cmp	r4, #0
 800b250:	bf08      	it	eq
 800b252:	462c      	moveq	r4, r5
 800b254:	9400      	str	r4, [sp, #0]
 800b256:	f7ff ff75 	bl	800b144 <_strtol_l.isra.0>
 800b25a:	b003      	add	sp, #12
 800b25c:	bd30      	pop	{r4, r5, pc}
 800b25e:	bf00      	nop
 800b260:	2000029c 	.word	0x2000029c
 800b264:	20000300 	.word	0x20000300

0800b268 <_strtoul_l.isra.0>:
 800b268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b26c:	4680      	mov	r8, r0
 800b26e:	4689      	mov	r9, r1
 800b270:	4692      	mov	sl, r2
 800b272:	461e      	mov	r6, r3
 800b274:	460f      	mov	r7, r1
 800b276:	463d      	mov	r5, r7
 800b278:	9808      	ldr	r0, [sp, #32]
 800b27a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b27e:	f000 f8be 	bl	800b3fe <__locale_ctype_ptr_l>
 800b282:	4420      	add	r0, r4
 800b284:	7843      	ldrb	r3, [r0, #1]
 800b286:	f013 0308 	ands.w	r3, r3, #8
 800b28a:	d10a      	bne.n	800b2a2 <_strtoul_l.isra.0+0x3a>
 800b28c:	2c2d      	cmp	r4, #45	; 0x2d
 800b28e:	d10a      	bne.n	800b2a6 <_strtoul_l.isra.0+0x3e>
 800b290:	782c      	ldrb	r4, [r5, #0]
 800b292:	2301      	movs	r3, #1
 800b294:	1cbd      	adds	r5, r7, #2
 800b296:	b15e      	cbz	r6, 800b2b0 <_strtoul_l.isra.0+0x48>
 800b298:	2e10      	cmp	r6, #16
 800b29a:	d113      	bne.n	800b2c4 <_strtoul_l.isra.0+0x5c>
 800b29c:	2c30      	cmp	r4, #48	; 0x30
 800b29e:	d009      	beq.n	800b2b4 <_strtoul_l.isra.0+0x4c>
 800b2a0:	e010      	b.n	800b2c4 <_strtoul_l.isra.0+0x5c>
 800b2a2:	462f      	mov	r7, r5
 800b2a4:	e7e7      	b.n	800b276 <_strtoul_l.isra.0+0xe>
 800b2a6:	2c2b      	cmp	r4, #43	; 0x2b
 800b2a8:	bf04      	itt	eq
 800b2aa:	782c      	ldrbeq	r4, [r5, #0]
 800b2ac:	1cbd      	addeq	r5, r7, #2
 800b2ae:	e7f2      	b.n	800b296 <_strtoul_l.isra.0+0x2e>
 800b2b0:	2c30      	cmp	r4, #48	; 0x30
 800b2b2:	d125      	bne.n	800b300 <_strtoul_l.isra.0+0x98>
 800b2b4:	782a      	ldrb	r2, [r5, #0]
 800b2b6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b2ba:	2a58      	cmp	r2, #88	; 0x58
 800b2bc:	d14a      	bne.n	800b354 <_strtoul_l.isra.0+0xec>
 800b2be:	786c      	ldrb	r4, [r5, #1]
 800b2c0:	2610      	movs	r6, #16
 800b2c2:	3502      	adds	r5, #2
 800b2c4:	f04f 31ff 	mov.w	r1, #4294967295
 800b2c8:	2700      	movs	r7, #0
 800b2ca:	fbb1 f1f6 	udiv	r1, r1, r6
 800b2ce:	fb06 fe01 	mul.w	lr, r6, r1
 800b2d2:	ea6f 0e0e 	mvn.w	lr, lr
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800b2dc:	2a09      	cmp	r2, #9
 800b2de:	d811      	bhi.n	800b304 <_strtoul_l.isra.0+0x9c>
 800b2e0:	4614      	mov	r4, r2
 800b2e2:	42a6      	cmp	r6, r4
 800b2e4:	dd1d      	ble.n	800b322 <_strtoul_l.isra.0+0xba>
 800b2e6:	2f00      	cmp	r7, #0
 800b2e8:	db18      	blt.n	800b31c <_strtoul_l.isra.0+0xb4>
 800b2ea:	4281      	cmp	r1, r0
 800b2ec:	d316      	bcc.n	800b31c <_strtoul_l.isra.0+0xb4>
 800b2ee:	d101      	bne.n	800b2f4 <_strtoul_l.isra.0+0x8c>
 800b2f0:	45a6      	cmp	lr, r4
 800b2f2:	db13      	blt.n	800b31c <_strtoul_l.isra.0+0xb4>
 800b2f4:	fb00 4006 	mla	r0, r0, r6, r4
 800b2f8:	2701      	movs	r7, #1
 800b2fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2fe:	e7eb      	b.n	800b2d8 <_strtoul_l.isra.0+0x70>
 800b300:	260a      	movs	r6, #10
 800b302:	e7df      	b.n	800b2c4 <_strtoul_l.isra.0+0x5c>
 800b304:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800b308:	2a19      	cmp	r2, #25
 800b30a:	d801      	bhi.n	800b310 <_strtoul_l.isra.0+0xa8>
 800b30c:	3c37      	subs	r4, #55	; 0x37
 800b30e:	e7e8      	b.n	800b2e2 <_strtoul_l.isra.0+0x7a>
 800b310:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800b314:	2a19      	cmp	r2, #25
 800b316:	d804      	bhi.n	800b322 <_strtoul_l.isra.0+0xba>
 800b318:	3c57      	subs	r4, #87	; 0x57
 800b31a:	e7e2      	b.n	800b2e2 <_strtoul_l.isra.0+0x7a>
 800b31c:	f04f 37ff 	mov.w	r7, #4294967295
 800b320:	e7eb      	b.n	800b2fa <_strtoul_l.isra.0+0x92>
 800b322:	2f00      	cmp	r7, #0
 800b324:	da09      	bge.n	800b33a <_strtoul_l.isra.0+0xd2>
 800b326:	2322      	movs	r3, #34	; 0x22
 800b328:	f8c8 3000 	str.w	r3, [r8]
 800b32c:	f04f 30ff 	mov.w	r0, #4294967295
 800b330:	f1ba 0f00 	cmp.w	sl, #0
 800b334:	d107      	bne.n	800b346 <_strtoul_l.isra.0+0xde>
 800b336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b33a:	b103      	cbz	r3, 800b33e <_strtoul_l.isra.0+0xd6>
 800b33c:	4240      	negs	r0, r0
 800b33e:	f1ba 0f00 	cmp.w	sl, #0
 800b342:	d00c      	beq.n	800b35e <_strtoul_l.isra.0+0xf6>
 800b344:	b127      	cbz	r7, 800b350 <_strtoul_l.isra.0+0xe8>
 800b346:	3d01      	subs	r5, #1
 800b348:	f8ca 5000 	str.w	r5, [sl]
 800b34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b350:	464d      	mov	r5, r9
 800b352:	e7f9      	b.n	800b348 <_strtoul_l.isra.0+0xe0>
 800b354:	2430      	movs	r4, #48	; 0x30
 800b356:	2e00      	cmp	r6, #0
 800b358:	d1b4      	bne.n	800b2c4 <_strtoul_l.isra.0+0x5c>
 800b35a:	2608      	movs	r6, #8
 800b35c:	e7b2      	b.n	800b2c4 <_strtoul_l.isra.0+0x5c>
 800b35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800b364 <_strtoul_r>:
 800b364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b366:	4c06      	ldr	r4, [pc, #24]	; (800b380 <_strtoul_r+0x1c>)
 800b368:	4d06      	ldr	r5, [pc, #24]	; (800b384 <_strtoul_r+0x20>)
 800b36a:	6824      	ldr	r4, [r4, #0]
 800b36c:	6a24      	ldr	r4, [r4, #32]
 800b36e:	2c00      	cmp	r4, #0
 800b370:	bf08      	it	eq
 800b372:	462c      	moveq	r4, r5
 800b374:	9400      	str	r4, [sp, #0]
 800b376:	f7ff ff77 	bl	800b268 <_strtoul_l.isra.0>
 800b37a:	b003      	add	sp, #12
 800b37c:	bd30      	pop	{r4, r5, pc}
 800b37e:	bf00      	nop
 800b380:	2000029c 	.word	0x2000029c
 800b384:	20000300 	.word	0x20000300

0800b388 <__submore>:
 800b388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b38c:	460c      	mov	r4, r1
 800b38e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b394:	4299      	cmp	r1, r3
 800b396:	d11e      	bne.n	800b3d6 <__submore+0x4e>
 800b398:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b39c:	f7fe ffd4 	bl	800a348 <_malloc_r>
 800b3a0:	b918      	cbnz	r0, 800b3aa <__submore+0x22>
 800b3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3ae:	63a3      	str	r3, [r4, #56]	; 0x38
 800b3b0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b3b4:	6360      	str	r0, [r4, #52]	; 0x34
 800b3b6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b3ba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b3be:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b3c2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b3c6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b3ca:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b3ce:	6020      	str	r0, [r4, #0]
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b3d8:	0077      	lsls	r7, r6, #1
 800b3da:	463a      	mov	r2, r7
 800b3dc:	f000 f84c 	bl	800b478 <_realloc_r>
 800b3e0:	4605      	mov	r5, r0
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	d0dd      	beq.n	800b3a2 <__submore+0x1a>
 800b3e6:	eb00 0806 	add.w	r8, r0, r6
 800b3ea:	4601      	mov	r1, r0
 800b3ec:	4632      	mov	r2, r6
 800b3ee:	4640      	mov	r0, r8
 800b3f0:	f7fe ff48 	bl	800a284 <memcpy>
 800b3f4:	f8c4 8000 	str.w	r8, [r4]
 800b3f8:	6365      	str	r5, [r4, #52]	; 0x34
 800b3fa:	63a7      	str	r7, [r4, #56]	; 0x38
 800b3fc:	e7e8      	b.n	800b3d0 <__submore+0x48>

0800b3fe <__locale_ctype_ptr_l>:
 800b3fe:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b402:	4770      	bx	lr

0800b404 <__locale_ctype_ptr>:
 800b404:	4b04      	ldr	r3, [pc, #16]	; (800b418 <__locale_ctype_ptr+0x14>)
 800b406:	4a05      	ldr	r2, [pc, #20]	; (800b41c <__locale_ctype_ptr+0x18>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	6a1b      	ldr	r3, [r3, #32]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	bf08      	it	eq
 800b410:	4613      	moveq	r3, r2
 800b412:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800b416:	4770      	bx	lr
 800b418:	2000029c 	.word	0x2000029c
 800b41c:	20000300 	.word	0x20000300

0800b420 <__ascii_mbtowc>:
 800b420:	b082      	sub	sp, #8
 800b422:	b901      	cbnz	r1, 800b426 <__ascii_mbtowc+0x6>
 800b424:	a901      	add	r1, sp, #4
 800b426:	b142      	cbz	r2, 800b43a <__ascii_mbtowc+0x1a>
 800b428:	b14b      	cbz	r3, 800b43e <__ascii_mbtowc+0x1e>
 800b42a:	7813      	ldrb	r3, [r2, #0]
 800b42c:	600b      	str	r3, [r1, #0]
 800b42e:	7812      	ldrb	r2, [r2, #0]
 800b430:	1c10      	adds	r0, r2, #0
 800b432:	bf18      	it	ne
 800b434:	2001      	movne	r0, #1
 800b436:	b002      	add	sp, #8
 800b438:	4770      	bx	lr
 800b43a:	4610      	mov	r0, r2
 800b43c:	e7fb      	b.n	800b436 <__ascii_mbtowc+0x16>
 800b43e:	f06f 0001 	mvn.w	r0, #1
 800b442:	e7f8      	b.n	800b436 <__ascii_mbtowc+0x16>

0800b444 <memmove>:
 800b444:	4288      	cmp	r0, r1
 800b446:	b510      	push	{r4, lr}
 800b448:	eb01 0302 	add.w	r3, r1, r2
 800b44c:	d803      	bhi.n	800b456 <memmove+0x12>
 800b44e:	1e42      	subs	r2, r0, #1
 800b450:	4299      	cmp	r1, r3
 800b452:	d10c      	bne.n	800b46e <memmove+0x2a>
 800b454:	bd10      	pop	{r4, pc}
 800b456:	4298      	cmp	r0, r3
 800b458:	d2f9      	bcs.n	800b44e <memmove+0xa>
 800b45a:	1881      	adds	r1, r0, r2
 800b45c:	1ad2      	subs	r2, r2, r3
 800b45e:	42d3      	cmn	r3, r2
 800b460:	d100      	bne.n	800b464 <memmove+0x20>
 800b462:	bd10      	pop	{r4, pc}
 800b464:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b468:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b46c:	e7f7      	b.n	800b45e <memmove+0x1a>
 800b46e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b472:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b476:	e7eb      	b.n	800b450 <memmove+0xc>

0800b478 <_realloc_r>:
 800b478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b47a:	4607      	mov	r7, r0
 800b47c:	4614      	mov	r4, r2
 800b47e:	460e      	mov	r6, r1
 800b480:	b921      	cbnz	r1, 800b48c <_realloc_r+0x14>
 800b482:	4611      	mov	r1, r2
 800b484:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b488:	f7fe bf5e 	b.w	800a348 <_malloc_r>
 800b48c:	b922      	cbnz	r2, 800b498 <_realloc_r+0x20>
 800b48e:	f7fe ff0d 	bl	800a2ac <_free_r>
 800b492:	4625      	mov	r5, r4
 800b494:	4628      	mov	r0, r5
 800b496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b498:	f000 f821 	bl	800b4de <_malloc_usable_size_r>
 800b49c:	4284      	cmp	r4, r0
 800b49e:	d90f      	bls.n	800b4c0 <_realloc_r+0x48>
 800b4a0:	4621      	mov	r1, r4
 800b4a2:	4638      	mov	r0, r7
 800b4a4:	f7fe ff50 	bl	800a348 <_malloc_r>
 800b4a8:	4605      	mov	r5, r0
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	d0f2      	beq.n	800b494 <_realloc_r+0x1c>
 800b4ae:	4631      	mov	r1, r6
 800b4b0:	4622      	mov	r2, r4
 800b4b2:	f7fe fee7 	bl	800a284 <memcpy>
 800b4b6:	4631      	mov	r1, r6
 800b4b8:	4638      	mov	r0, r7
 800b4ba:	f7fe fef7 	bl	800a2ac <_free_r>
 800b4be:	e7e9      	b.n	800b494 <_realloc_r+0x1c>
 800b4c0:	4635      	mov	r5, r6
 800b4c2:	e7e7      	b.n	800b494 <_realloc_r+0x1c>

0800b4c4 <__ascii_wctomb>:
 800b4c4:	b149      	cbz	r1, 800b4da <__ascii_wctomb+0x16>
 800b4c6:	2aff      	cmp	r2, #255	; 0xff
 800b4c8:	bf85      	ittet	hi
 800b4ca:	238a      	movhi	r3, #138	; 0x8a
 800b4cc:	6003      	strhi	r3, [r0, #0]
 800b4ce:	700a      	strbls	r2, [r1, #0]
 800b4d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800b4d4:	bf98      	it	ls
 800b4d6:	2001      	movls	r0, #1
 800b4d8:	4770      	bx	lr
 800b4da:	4608      	mov	r0, r1
 800b4dc:	4770      	bx	lr

0800b4de <_malloc_usable_size_r>:
 800b4de:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	f1a0 0004 	sub.w	r0, r0, #4
 800b4e8:	bfbc      	itt	lt
 800b4ea:	580b      	ldrlt	r3, [r1, r0]
 800b4ec:	18c0      	addlt	r0, r0, r3
 800b4ee:	4770      	bx	lr

0800b4f0 <_sbrk>:
 800b4f0:	4b04      	ldr	r3, [pc, #16]	; (800b504 <_sbrk+0x14>)
 800b4f2:	6819      	ldr	r1, [r3, #0]
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	b909      	cbnz	r1, 800b4fc <_sbrk+0xc>
 800b4f8:	4903      	ldr	r1, [pc, #12]	; (800b508 <_sbrk+0x18>)
 800b4fa:	6019      	str	r1, [r3, #0]
 800b4fc:	6818      	ldr	r0, [r3, #0]
 800b4fe:	4402      	add	r2, r0
 800b500:	601a      	str	r2, [r3, #0]
 800b502:	4770      	bx	lr
 800b504:	200005c0 	.word	0x200005c0
 800b508:	2000ad48 	.word	0x2000ad48

0800b50c <_init>:
 800b50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50e:	bf00      	nop
 800b510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b512:	bc08      	pop	{r3}
 800b514:	469e      	mov	lr, r3
 800b516:	4770      	bx	lr

0800b518 <_fini>:
 800b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51a:	bf00      	nop
 800b51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b51e:	bc08      	pop	{r3}
 800b520:	469e      	mov	lr, r3
 800b522:	4770      	bx	lr
