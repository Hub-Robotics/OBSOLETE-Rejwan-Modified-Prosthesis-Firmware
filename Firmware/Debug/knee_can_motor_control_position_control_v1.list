
knee_can_motor_control_position_control_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d794  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800d928  0800d928  0001d928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e008  0800e008  0001e008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e010  0800e010  0001e010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e014  0800e014  0001e014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000047c  20000000  0800e018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  0002047c  2**0
                  CONTENTS
  8 .bss          0000a928  20000480  20000480  00020480  2**3
                  ALLOC
  9 ._user_heap_stack 00003000  2000ada8  2000ada8  00020480  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00059cfb  00000000  00000000  000204ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008e69  00000000  00000000  0007a1a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001bf71  00000000  00000000  00083010  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ec0  00000000  00000000  0009ef88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000037e8  00000000  00000000  000a0e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001932f  00000000  00000000  000a4630  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000afe8  00000000  00000000  000bd95f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000c8947  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000669c  00000000  00000000  000c89c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000df  00000000  00000000  000cf060  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000480 	.word	0x20000480
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d90c 	.word	0x0800d90c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000484 	.word	0x20000484
 80001cc:	0800d90c 	.word	0x0800d90c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2iz>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d215      	bcs.n	8000b5a <__aeabi_d2iz+0x36>
 8000b2e:	d511      	bpl.n	8000b54 <__aeabi_d2iz+0x30>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d912      	bls.n	8000b60 <__aeabi_d2iz+0x3c>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4e:	bf18      	it	ne
 8000b50:	4240      	negne	r0, r0
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d105      	bne.n	8000b6c <__aeabi_d2iz+0x48>
 8000b60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	bf08      	it	eq
 8000b66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2f>:
 8000b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b7c:	bf24      	itt	cs
 8000b7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b86:	d90d      	bls.n	8000ba4 <__aeabi_d2f+0x30>
 8000b88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b9c:	bf08      	it	eq
 8000b9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ba2:	4770      	bx	lr
 8000ba4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba8:	d121      	bne.n	8000bee <__aeabi_d2f+0x7a>
 8000baa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bae:	bfbc      	itt	lt
 8000bb0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	4770      	bxlt	lr
 8000bb6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bbe:	f1c2 0218 	rsb	r2, r2, #24
 8000bc2:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bca:	fa20 f002 	lsr.w	r0, r0, r2
 8000bce:	bf18      	it	ne
 8000bd0:	f040 0001 	orrne.w	r0, r0, #1
 8000bd4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bdc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be0:	ea40 000c 	orr.w	r0, r0, ip
 8000be4:	fa23 f302 	lsr.w	r3, r3, r2
 8000be8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bec:	e7cc      	b.n	8000b88 <__aeabi_d2f+0x14>
 8000bee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf2:	d107      	bne.n	8000c04 <__aeabi_d2f+0x90>
 8000bf4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf8:	bf1e      	ittt	ne
 8000bfa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bfe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c02:	4770      	bxne	lr
 8000c04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop

08000c14 <__aeabi_uldivmod>:
 8000c14:	b953      	cbnz	r3, 8000c2c <__aeabi_uldivmod+0x18>
 8000c16:	b94a      	cbnz	r2, 8000c2c <__aeabi_uldivmod+0x18>
 8000c18:	2900      	cmp	r1, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	2800      	cmpeq	r0, #0
 8000c1e:	bf1c      	itt	ne
 8000c20:	f04f 31ff 	movne.w	r1, #4294967295
 8000c24:	f04f 30ff 	movne.w	r0, #4294967295
 8000c28:	f000 b97a 	b.w	8000f20 <__aeabi_idiv0>
 8000c2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c34:	f000 f806 	bl	8000c44 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4770      	bx	lr

08000c44 <__udivmoddi4>:
 8000c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c48:	468c      	mov	ip, r1
 8000c4a:	460d      	mov	r5, r1
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	9e08      	ldr	r6, [sp, #32]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d151      	bne.n	8000cf8 <__udivmoddi4+0xb4>
 8000c54:	428a      	cmp	r2, r1
 8000c56:	4617      	mov	r7, r2
 8000c58:	d96d      	bls.n	8000d36 <__udivmoddi4+0xf2>
 8000c5a:	fab2 fe82 	clz	lr, r2
 8000c5e:	f1be 0f00 	cmp.w	lr, #0
 8000c62:	d00b      	beq.n	8000c7c <__udivmoddi4+0x38>
 8000c64:	f1ce 0c20 	rsb	ip, lr, #32
 8000c68:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c6c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c70:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c74:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c78:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c7c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c80:	0c25      	lsrs	r5, r4, #16
 8000c82:	fbbc f8fa 	udiv	r8, ip, sl
 8000c86:	fa1f f987 	uxth.w	r9, r7
 8000c8a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c8e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c92:	fb08 f309 	mul.w	r3, r8, r9
 8000c96:	42ab      	cmp	r3, r5
 8000c98:	d90a      	bls.n	8000cb0 <__udivmoddi4+0x6c>
 8000c9a:	19ed      	adds	r5, r5, r7
 8000c9c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ca0:	f080 8123 	bcs.w	8000eea <__udivmoddi4+0x2a6>
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	f240 8120 	bls.w	8000eea <__udivmoddi4+0x2a6>
 8000caa:	f1a8 0802 	sub.w	r8, r8, #2
 8000cae:	443d      	add	r5, r7
 8000cb0:	1aed      	subs	r5, r5, r3
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000cb8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000cbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cc0:	fb00 f909 	mul.w	r9, r0, r9
 8000cc4:	45a1      	cmp	r9, r4
 8000cc6:	d909      	bls.n	8000cdc <__udivmoddi4+0x98>
 8000cc8:	19e4      	adds	r4, r4, r7
 8000cca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cce:	f080 810a 	bcs.w	8000ee6 <__udivmoddi4+0x2a2>
 8000cd2:	45a1      	cmp	r9, r4
 8000cd4:	f240 8107 	bls.w	8000ee6 <__udivmoddi4+0x2a2>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	443c      	add	r4, r7
 8000cdc:	eba4 0409 	sub.w	r4, r4, r9
 8000ce0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d061      	beq.n	8000dae <__udivmoddi4+0x16a>
 8000cea:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cee:	2300      	movs	r3, #0
 8000cf0:	6034      	str	r4, [r6, #0]
 8000cf2:	6073      	str	r3, [r6, #4]
 8000cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xc8>
 8000cfc:	2e00      	cmp	r6, #0
 8000cfe:	d054      	beq.n	8000daa <__udivmoddi4+0x166>
 8000d00:	2100      	movs	r1, #0
 8000d02:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d06:	4608      	mov	r0, r1
 8000d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0c:	fab3 f183 	clz	r1, r3
 8000d10:	2900      	cmp	r1, #0
 8000d12:	f040 808e 	bne.w	8000e32 <__udivmoddi4+0x1ee>
 8000d16:	42ab      	cmp	r3, r5
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xdc>
 8000d1a:	4282      	cmp	r2, r0
 8000d1c:	f200 80fa 	bhi.w	8000f14 <__udivmoddi4+0x2d0>
 8000d20:	1a84      	subs	r4, r0, r2
 8000d22:	eb65 0503 	sbc.w	r5, r5, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	46ac      	mov	ip, r5
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d03f      	beq.n	8000dae <__udivmoddi4+0x16a>
 8000d2e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	b912      	cbnz	r2, 8000d3e <__udivmoddi4+0xfa>
 8000d38:	2701      	movs	r7, #1
 8000d3a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d3e:	fab7 fe87 	clz	lr, r7
 8000d42:	f1be 0f00 	cmp.w	lr, #0
 8000d46:	d134      	bne.n	8000db2 <__udivmoddi4+0x16e>
 8000d48:	1beb      	subs	r3, r5, r7
 8000d4a:	0c3a      	lsrs	r2, r7, #16
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	2101      	movs	r1, #1
 8000d52:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d56:	0c25      	lsrs	r5, r4, #16
 8000d58:	fb02 3318 	mls	r3, r2, r8, r3
 8000d5c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d60:	fb0c f308 	mul.w	r3, ip, r8
 8000d64:	42ab      	cmp	r3, r5
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0x134>
 8000d68:	19ed      	adds	r5, r5, r7
 8000d6a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x132>
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	f200 80d1 	bhi.w	8000f18 <__udivmoddi4+0x2d4>
 8000d76:	4680      	mov	r8, r0
 8000d78:	1aed      	subs	r5, r5, r3
 8000d7a:	b2a3      	uxth	r3, r4
 8000d7c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d80:	fb02 5510 	mls	r5, r2, r0, r5
 8000d84:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d88:	fb0c fc00 	mul.w	ip, ip, r0
 8000d8c:	45a4      	cmp	ip, r4
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x15c>
 8000d90:	19e4      	adds	r4, r4, r7
 8000d92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x15a>
 8000d98:	45a4      	cmp	ip, r4
 8000d9a:	f200 80b8 	bhi.w	8000f0e <__udivmoddi4+0x2ca>
 8000d9e:	4618      	mov	r0, r3
 8000da0:	eba4 040c 	sub.w	r4, r4, ip
 8000da4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da8:	e79d      	b.n	8000ce6 <__udivmoddi4+0xa2>
 8000daa:	4631      	mov	r1, r6
 8000dac:	4630      	mov	r0, r6
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	f1ce 0420 	rsb	r4, lr, #32
 8000db6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000dba:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dbe:	fa20 f804 	lsr.w	r8, r0, r4
 8000dc2:	0c3a      	lsrs	r2, r7, #16
 8000dc4:	fa25 f404 	lsr.w	r4, r5, r4
 8000dc8:	ea48 0803 	orr.w	r8, r8, r3
 8000dcc:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dd0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000dd4:	fb02 4411 	mls	r4, r2, r1, r4
 8000dd8:	fa1f fc87 	uxth.w	ip, r7
 8000ddc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000de0:	fb01 f30c 	mul.w	r3, r1, ip
 8000de4:	42ab      	cmp	r3, r5
 8000de6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x1bc>
 8000dec:	19ed      	adds	r5, r5, r7
 8000dee:	f101 30ff 	add.w	r0, r1, #4294967295
 8000df2:	f080 808a 	bcs.w	8000f0a <__udivmoddi4+0x2c6>
 8000df6:	42ab      	cmp	r3, r5
 8000df8:	f240 8087 	bls.w	8000f0a <__udivmoddi4+0x2c6>
 8000dfc:	3902      	subs	r1, #2
 8000dfe:	443d      	add	r5, r7
 8000e00:	1aeb      	subs	r3, r5, r3
 8000e02:	fa1f f588 	uxth.w	r5, r8
 8000e06:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e0a:	fb02 3310 	mls	r3, r2, r0, r3
 8000e0e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e12:	fb00 f30c 	mul.w	r3, r0, ip
 8000e16:	42ab      	cmp	r3, r5
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x1e6>
 8000e1a:	19ed      	adds	r5, r5, r7
 8000e1c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e20:	d26f      	bcs.n	8000f02 <__udivmoddi4+0x2be>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	d96d      	bls.n	8000f02 <__udivmoddi4+0x2be>
 8000e26:	3802      	subs	r0, #2
 8000e28:	443d      	add	r5, r7
 8000e2a:	1aeb      	subs	r3, r5, r3
 8000e2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e30:	e78f      	b.n	8000d52 <__udivmoddi4+0x10e>
 8000e32:	f1c1 0720 	rsb	r7, r1, #32
 8000e36:	fa22 f807 	lsr.w	r8, r2, r7
 8000e3a:	408b      	lsls	r3, r1
 8000e3c:	fa05 f401 	lsl.w	r4, r5, r1
 8000e40:	ea48 0303 	orr.w	r3, r8, r3
 8000e44:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e48:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e4c:	40fd      	lsrs	r5, r7
 8000e4e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e52:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e56:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e5a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e5e:	fa1f f883 	uxth.w	r8, r3
 8000e62:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e66:	fb09 f408 	mul.w	r4, r9, r8
 8000e6a:	42ac      	cmp	r4, r5
 8000e6c:	fa02 f201 	lsl.w	r2, r2, r1
 8000e70:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x244>
 8000e76:	18ed      	adds	r5, r5, r3
 8000e78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e7c:	d243      	bcs.n	8000f06 <__udivmoddi4+0x2c2>
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	d941      	bls.n	8000f06 <__udivmoddi4+0x2c2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	441d      	add	r5, r3
 8000e88:	1b2d      	subs	r5, r5, r4
 8000e8a:	fa1f fe8e 	uxth.w	lr, lr
 8000e8e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e92:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e96:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e9a:	fb00 f808 	mul.w	r8, r0, r8
 8000e9e:	45a0      	cmp	r8, r4
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x26e>
 8000ea2:	18e4      	adds	r4, r4, r3
 8000ea4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ea8:	d229      	bcs.n	8000efe <__udivmoddi4+0x2ba>
 8000eaa:	45a0      	cmp	r8, r4
 8000eac:	d927      	bls.n	8000efe <__udivmoddi4+0x2ba>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	441c      	add	r4, r3
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	eba4 0408 	sub.w	r4, r4, r8
 8000eba:	fba0 8902 	umull	r8, r9, r0, r2
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	464d      	mov	r5, r9
 8000ec4:	d315      	bcc.n	8000ef2 <__udivmoddi4+0x2ae>
 8000ec6:	d012      	beq.n	8000eee <__udivmoddi4+0x2aa>
 8000ec8:	b156      	cbz	r6, 8000ee0 <__udivmoddi4+0x29c>
 8000eca:	ebba 030e 	subs.w	r3, sl, lr
 8000ece:	eb64 0405 	sbc.w	r4, r4, r5
 8000ed2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed6:	40cb      	lsrs	r3, r1
 8000ed8:	431f      	orrs	r7, r3
 8000eda:	40cc      	lsrs	r4, r1
 8000edc:	6037      	str	r7, [r6, #0]
 8000ede:	6074      	str	r4, [r6, #4]
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	e6f8      	b.n	8000cdc <__udivmoddi4+0x98>
 8000eea:	4690      	mov	r8, r2
 8000eec:	e6e0      	b.n	8000cb0 <__udivmoddi4+0x6c>
 8000eee:	45c2      	cmp	sl, r8
 8000ef0:	d2ea      	bcs.n	8000ec8 <__udivmoddi4+0x284>
 8000ef2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef6:	eb69 0503 	sbc.w	r5, r9, r3
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7e4      	b.n	8000ec8 <__udivmoddi4+0x284>
 8000efe:	4628      	mov	r0, r5
 8000f00:	e7d7      	b.n	8000eb2 <__udivmoddi4+0x26e>
 8000f02:	4640      	mov	r0, r8
 8000f04:	e791      	b.n	8000e2a <__udivmoddi4+0x1e6>
 8000f06:	4681      	mov	r9, r0
 8000f08:	e7be      	b.n	8000e88 <__udivmoddi4+0x244>
 8000f0a:	4601      	mov	r1, r0
 8000f0c:	e778      	b.n	8000e00 <__udivmoddi4+0x1bc>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	e745      	b.n	8000da0 <__udivmoddi4+0x15c>
 8000f14:	4608      	mov	r0, r1
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xe6>
 8000f18:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1c:	443d      	add	r5, r7
 8000f1e:	e72b      	b.n	8000d78 <__udivmoddi4+0x134>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <CAN_configure>:
//// CNF3: CONFIGURATION 3 REGISTER (ADDRESS: 28h)
//MCP_write(0x28,0x05);
//}

/*configuration for 1mbps: https://www.kvaser.com/support/calculators/bit-timing-calculator/ */
void CAN_configure(){
 8000f24:	b508      	push	{r3, lr}
// CNF1: CONFIGURATION 1 REGISTER (ADDRESS: 2Ah)
MCP_write(0x2A,0xC0);
 8000f26:	21c0      	movs	r1, #192	; 0xc0
 8000f28:	202a      	movs	r0, #42	; 0x2a
 8000f2a:	f001 fe97 	bl	8002c5c <MCP_write>

// CNF2: CONFIGURATION 2 REGISTER (ADDRESS: 29h)
MCP_write(0x29,0x89);
 8000f2e:	2189      	movs	r1, #137	; 0x89
 8000f30:	2029      	movs	r0, #41	; 0x29
 8000f32:	f001 fe93 	bl	8002c5c <MCP_write>

// CNF3: CONFIGURATION 3 REGISTER (ADDRESS: 28h)
MCP_write(0x28,0x04);
 8000f36:	2104      	movs	r1, #4
 8000f38:	2028      	movs	r0, #40	; 0x28
}
 8000f3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
MCP_write(0x28,0x04);
 8000f3e:	f001 be8d 	b.w	8002c5c <MCP_write>

08000f42 <CAN_mode>:


// sets the CAN operation mode
void CAN_mode(){
// CANCTRL: CAN CONTROL REGISTER (ADDRESS: XFh)
MCP_write(0x0F,0x08);
 8000f42:	2108      	movs	r1, #8
 8000f44:	200f      	movs	r0, #15
 8000f46:	f001 be89 	b.w	8002c5c <MCP_write>

08000f4a <CAN_transmit>:




// Sends the apropriate message information to the transmit buffers and then flags them for transmittal
void CAN_transmit(int CAN_ID, int CAN_message[]){
 8000f4a:	b538      	push	{r3, r4, r5, lr}
 8000f4c:	460c      	mov	r4, r1
 8000f4e:	4605      	mov	r5, r0
    SIDH = CAN_ID >> 3;
    SIDL = CAN_ID << 5;

//  TXBxSIDH: TRANSMIT BUFFER x STANDARD IDENTIFIER HIGH REGISTER
// (ADDRESS: 31h, 41h, 51h)
MCP_write(0x51,SIDH);
 8000f50:	10c1      	asrs	r1, r0, #3
 8000f52:	2051      	movs	r0, #81	; 0x51
 8000f54:	f001 fe82 	bl	8002c5c <MCP_write>

// TXBxSIDL: TRANSMIT BUFFER x STANDARD IDENTIFIER LOW REGISTER
// (ADDRESS: 32h, 42h, 52h)
MCP_write(0x52,SIDL);
 8000f58:	0169      	lsls	r1, r5, #5
 8000f5a:	2052      	movs	r0, #82	; 0x52
 8000f5c:	f001 fe7e 	bl	8002c5c <MCP_write>

//  TXBxDLC: TRANSMIT BUFFER x DATA LENGTH CODE REGISTER
// (ADDRESS: 35h, 45h, 55h)
MCP_write(0x55,0x08);
 8000f60:	2108      	movs	r1, #8
 8000f62:	2055      	movs	r0, #85	; 0x55
 8000f64:	f001 fe7a 	bl	8002c5c <MCP_write>

// TXBxDn: TRANSMIT BUFFER x DATA BYTE n REGISTER
// (ADDRESS: 36h-3Dh, 46h-4Dh, 56h-5Dh)
// The data to be loaded into the transmit buffer for sending
MCP_write(0x56,CAN_message[0]);
 8000f68:	6821      	ldr	r1, [r4, #0]
 8000f6a:	2056      	movs	r0, #86	; 0x56
 8000f6c:	f001 fe76 	bl	8002c5c <MCP_write>
MCP_write(0x57,CAN_message[1]);
 8000f70:	6861      	ldr	r1, [r4, #4]
 8000f72:	2057      	movs	r0, #87	; 0x57
 8000f74:	f001 fe72 	bl	8002c5c <MCP_write>
MCP_write(0x58,CAN_message[2]);
 8000f78:	68a1      	ldr	r1, [r4, #8]
 8000f7a:	2058      	movs	r0, #88	; 0x58
 8000f7c:	f001 fe6e 	bl	8002c5c <MCP_write>
MCP_write(0x59,CAN_message[3]);
 8000f80:	68e1      	ldr	r1, [r4, #12]
 8000f82:	2059      	movs	r0, #89	; 0x59
 8000f84:	f001 fe6a 	bl	8002c5c <MCP_write>
MCP_write(0x5A,CAN_message[4]);
 8000f88:	6921      	ldr	r1, [r4, #16]
 8000f8a:	205a      	movs	r0, #90	; 0x5a
 8000f8c:	f001 fe66 	bl	8002c5c <MCP_write>
MCP_write(0x5B,CAN_message[5]);
 8000f90:	6961      	ldr	r1, [r4, #20]
 8000f92:	205b      	movs	r0, #91	; 0x5b
 8000f94:	f001 fe62 	bl	8002c5c <MCP_write>
MCP_write(0x5C,CAN_message[6]);
 8000f98:	69a1      	ldr	r1, [r4, #24]
 8000f9a:	205c      	movs	r0, #92	; 0x5c
 8000f9c:	f001 fe5e 	bl	8002c5c <MCP_write>
MCP_write(0x5D,CAN_message[7]);
 8000fa0:	69e1      	ldr	r1, [r4, #28]
 8000fa2:	205d      	movs	r0, #93	; 0x5d
 8000fa4:	f001 fe5a 	bl	8002c5c <MCP_write>

// Setting the TXREQ bit high in the TXBxCRTL (0x30) register iniates message sending
// This bit remains high until the message is sent
MCP_write(0x50,0x0F);
 8000fa8:	210f      	movs	r1, #15
 8000faa:	2050      	movs	r0, #80	; 0x50
}
 8000fac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
MCP_write(0x50,0x0F);
 8000fb0:	f001 be54 	b.w	8002c5c <MCP_write>

08000fb4 <EPOS4_data_framer>:
#include "EPOS4.h"
#include "time_functions.h"


//This is useful for later adding in functionality. Should work for any Client to Server SDO
void EPOS4_data_framer(int data[],int object, int subindex, int value){
 8000fb4:	b510      	push	{r4, lr}
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
    data[1] = (0x00 | object); //Index LowByte
    data[2] = (0x00 | (object >> 8)); //Index HighByte
    data[3] = subindex; //subindex
 8000fb6:	60c2      	str	r2, [r0, #12]
    data[4] = (0x00 | value); //SDO Byte 0
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8000fb8:	121a      	asrs	r2, r3, #8
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 8000fba:	2422      	movs	r4, #34	; 0x22
    data[1] = (0x00 | object); //Index LowByte
 8000fbc:	6041      	str	r1, [r0, #4]
    data[4] = (0x00 | value); //SDO Byte 0
 8000fbe:	6103      	str	r3, [r0, #16]
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8000fc0:	1209      	asrs	r1, r1, #8
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8000fc2:	6142      	str	r2, [r0, #20]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8000fc4:	141a      	asrs	r2, r3, #16
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 8000fc6:	161b      	asrs	r3, r3, #24
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 8000fc8:	6004      	str	r4, [r0, #0]
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8000fca:	6081      	str	r1, [r0, #8]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8000fcc:	6182      	str	r2, [r0, #24]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 8000fce:	61c3      	str	r3, [r0, #28]
 8000fd0:	bd10      	pop	{r4, pc}

08000fd2 <EPOS4_set_operation_mode>:
}

void EPOS4_set_operation_mode(int CAN_ID, int mode){
 8000fd2:	b510      	push	{r4, lr}
 8000fd4:	b088      	sub	sp, #32
    int data[8];
    int object = 0x6060;
    int subindex = 0x00;
    int value = mode;
    EPOS4_data_framer(data,object,subindex,value);
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	2200      	movs	r2, #0
void EPOS4_set_operation_mode(int CAN_ID, int mode){
 8000fda:	4604      	mov	r4, r0
    EPOS4_data_framer(data,object,subindex,value);
 8000fdc:	f246 0160 	movw	r1, #24672	; 0x6060
 8000fe0:	4668      	mov	r0, sp
 8000fe2:	f7ff ffe7 	bl	8000fb4 <EPOS4_data_framer>

    CAN_transmit(CAN_ID, data);
 8000fe6:	4669      	mov	r1, sp
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f7ff ffae 	bl	8000f4a <CAN_transmit>
    delay_us(10000);
 8000fee:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ff2:	f003 fa27 	bl	8004444 <delay_us>
}
 8000ff6:	b008      	add	sp, #32
 8000ff8:	bd10      	pop	{r4, pc}

08000ffa <EPOS4_PVM_start>:

    CAN_transmit(CAN_ID, data);
    delay_us(10000);
}

void EPOS4_PVM_start(int CAN_ID){
 8000ffa:	b500      	push	{lr}
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8000ffc:	f04f 0c60 	mov.w	ip, #96	; 0x60
void EPOS4_PVM_start(int CAN_ID){
 8001000:	b089      	sub	sp, #36	; 0x24
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8001002:	2222      	movs	r2, #34	; 0x22
 8001004:	f246 0340 	movw	r3, #24640	; 0x6040
 8001008:	e88d 100c 	stmia.w	sp, {r2, r3, ip}
    int object = 0x6040;
    int subindex = 0x00;
    int value = 0x000F;
    EPOS4_data_framer(data,object,subindex,value);

    CAN_transmit(CAN_ID, data);
 800100c:	4669      	mov	r1, sp
    data[3] = subindex; //subindex
 800100e:	2300      	movs	r3, #0
    data[4] = (0x00 | value); //SDO Byte 0
 8001010:	220f      	movs	r2, #15
    data[3] = subindex; //subindex
 8001012:	9303      	str	r3, [sp, #12]
    data[4] = (0x00 | value); //SDO Byte 0
 8001014:	9204      	str	r2, [sp, #16]
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8001016:	9305      	str	r3, [sp, #20]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8001018:	9306      	str	r3, [sp, #24]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 800101a:	9307      	str	r3, [sp, #28]
    CAN_transmit(CAN_ID, data);
 800101c:	f7ff ff95 	bl	8000f4a <CAN_transmit>
    delay_us(10000);
 8001020:	f242 7010 	movw	r0, #10000	; 0x2710
 8001024:	f003 fa0e 	bl	8004444 <delay_us>
}
 8001028:	b009      	add	sp, #36	; 0x24
 800102a:	f85d fb04 	ldr.w	pc, [sp], #4

0800102e <EPOS4_enable>:
void EPOS4_enable(int CAN_ID){
 800102e:	b510      	push	{r4, lr}
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8001030:	f04f 0c60 	mov.w	ip, #96	; 0x60
void EPOS4_enable(int CAN_ID){
 8001034:	b088      	sub	sp, #32
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8001036:	2222      	movs	r2, #34	; 0x22
 8001038:	f246 0340 	movw	r3, #24640	; 0x6040
 800103c:	e88d 100c 	stmia.w	sp, {r2, r3, ip}
    CAN_transmit(CAN_ID, data);
 8001040:	4669      	mov	r1, sp
    data[3] = subindex; //subindex
 8001042:	2300      	movs	r3, #0
    data[4] = (0x00 | value); //SDO Byte 0
 8001044:	2206      	movs	r2, #6
void EPOS4_enable(int CAN_ID){
 8001046:	4604      	mov	r4, r0
    data[3] = subindex; //subindex
 8001048:	9303      	str	r3, [sp, #12]
    data[4] = (0x00 | value); //SDO Byte 0
 800104a:	9204      	str	r2, [sp, #16]
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 800104c:	9305      	str	r3, [sp, #20]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 800104e:	9306      	str	r3, [sp, #24]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 8001050:	9307      	str	r3, [sp, #28]
    CAN_transmit(CAN_ID, data);
 8001052:	f7ff ff7a 	bl	8000f4a <CAN_transmit>
    delay_us(10000);
 8001056:	f242 7010 	movw	r0, #10000	; 0x2710
 800105a:	f003 f9f3 	bl	8004444 <delay_us>
    EPOS4_enable2(CAN_ID);
 800105e:	4620      	mov	r0, r4
 8001060:	f7ff ffcb 	bl	8000ffa <EPOS4_PVM_start>
}
 8001064:	b008      	add	sp, #32
 8001066:	bd10      	pop	{r4, pc}

08001068 <EPOS4_CST_apply_torque>:
    CAN_transmit(CAN_ID, data);
    delay_us(10000);
}


void EPOS4_CST_apply_torque(int CAN_ID, int torque){
 8001068:	b510      	push	{r4, lr}
 800106a:	b088      	sub	sp, #32
    }
    else{

    }

    EPOS4_data_framer(data,object,subindex,value);
 800106c:	460b      	mov	r3, r1
 800106e:	2200      	movs	r2, #0
void EPOS4_CST_apply_torque(int CAN_ID, int torque){
 8001070:	4604      	mov	r4, r0
    EPOS4_data_framer(data,object,subindex,value);
 8001072:	f246 0171 	movw	r1, #24689	; 0x6071
 8001076:	4668      	mov	r0, sp
 8001078:	f7ff ff9c 	bl	8000fb4 <EPOS4_data_framer>

    CAN_transmit(CAN_ID, data);
 800107c:	4669      	mov	r1, sp
 800107e:	4620      	mov	r0, r4
 8001080:	f7ff ff63 	bl	8000f4a <CAN_transmit>
    delay_us(50); //1500
 8001084:	2032      	movs	r0, #50	; 0x32
 8001086:	f003 f9dd 	bl	8004444 <delay_us>
}
 800108a:	b008      	add	sp, #32
 800108c:	bd10      	pop	{r4, pc}

0800108e <EPOS4_clear_errors>:

    CAN_transmit(CAN_ID, data);
    delay_us(1500);
}

void EPOS4_clear_errors(int CAN_ID){
 800108e:	b500      	push	{lr}
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8001090:	f04f 0c60 	mov.w	ip, #96	; 0x60
void EPOS4_clear_errors(int CAN_ID){
 8001094:	b089      	sub	sp, #36	; 0x24
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8001096:	2222      	movs	r2, #34	; 0x22
 8001098:	f246 0340 	movw	r3, #24640	; 0x6040
 800109c:	e88d 100c 	stmia.w	sp, {r2, r3, ip}
    int object = 0x6040;
    int subindex = 0x00;
    int value = 0x0080;
    EPOS4_data_framer(data,object,subindex,value);

    CAN_transmit(CAN_ID, data);
 80010a0:	4669      	mov	r1, sp
    data[3] = subindex; //subindex
 80010a2:	2300      	movs	r3, #0
    data[4] = (0x00 | value); //SDO Byte 0
 80010a4:	2280      	movs	r2, #128	; 0x80
    data[3] = subindex; //subindex
 80010a6:	9303      	str	r3, [sp, #12]
    data[4] = (0x00 | value); //SDO Byte 0
 80010a8:	9204      	str	r2, [sp, #16]
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 80010aa:	9305      	str	r3, [sp, #20]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 80010ac:	9306      	str	r3, [sp, #24]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 80010ae:	9307      	str	r3, [sp, #28]
    CAN_transmit(CAN_ID, data);
 80010b0:	f7ff ff4b 	bl	8000f4a <CAN_transmit>
//    delay_us(200);
//    delay_us(1500); // testing by commenting it
}
 80010b4:	b009      	add	sp, #36	; 0x24
 80010b6:	f85d fb04 	ldr.w	pc, [sp], #4

080010ba <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80010ba:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 80010bc:	2301      	movs	r3, #1
 80010be:	f88d 3007 	strb.w	r3, [sp, #7]
  
//  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
//  {
//   status = SD_NOT_PRESENT;
//  }
  return status;
 80010c2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80010c6:	b002      	add	sp, #8
 80010c8:	4770      	bx	lr
	...

080010cc <BSP_SD_IRQHandler>:
  * @brief  Handles SD card interrupt request.
  * @retval None
  */
void BSP_SD_IRQHandler(void)
{
  HAL_SD_IRQHandler(&uSdHandle);
 80010cc:	4801      	ldr	r0, [pc, #4]	; (80010d4 <BSP_SD_IRQHandler+0x8>)
 80010ce:	f005 bf3d 	b.w	8006f4c <HAL_SD_IRQHandler>
 80010d2:	bf00      	nop
 80010d4:	2000865c 	.word	0x2000865c

080010d8 <BSP_SD_DMA_Tx_IRQHandler>:
  * @brief  Handles SD DMA Tx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Tx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmatx);
 80010d8:	4b01      	ldr	r3, [pc, #4]	; (80010e0 <BSP_SD_DMA_Tx_IRQHandler+0x8>)
 80010da:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80010dc:	f004 bb80 	b.w	80057e0 <HAL_DMA_IRQHandler>
 80010e0:	2000865c 	.word	0x2000865c

080010e4 <BSP_SD_DMA_Rx_IRQHandler>:
  * @brief  Handles SD DMA Rx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Rx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 80010e4:	4b01      	ldr	r3, [pc, #4]	; (80010ec <BSP_SD_DMA_Rx_IRQHandler+0x8>)
 80010e6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80010e8:	f004 bb7a 	b.w	80057e0 <HAL_DMA_IRQHandler>
 80010ec:	2000865c 	.word	0x2000865c

080010f0 <BSP_SD_GetStatus>:
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  *            @arg  SD_TRANSFER_ERROR: Data transfer error 
  */
HAL_SD_TransferStateTypedef BSP_SD_GetStatus(void)
{
  return(HAL_SD_GetStatus(&uSdHandle));
 80010f0:	4801      	ldr	r0, [pc, #4]	; (80010f8 <BSP_SD_GetStatus+0x8>)
 80010f2:	f006 bb79 	b.w	80077e8 <HAL_SD_GetStatus>
 80010f6:	bf00      	nop
 80010f8:	2000865c 	.word	0x2000865c

080010fc <BSP_SD_GetCardInfo>:
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypedef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_Get_CardInfo(&uSdHandle, CardInfo);
 80010fc:	4601      	mov	r1, r0
 80010fe:	4801      	ldr	r0, [pc, #4]	; (8001104 <BSP_SD_GetCardInfo+0x8>)
 8001100:	f005 bf84 	b.w	800700c <HAL_SD_Get_CardInfo>
 8001104:	2000865c 	.word	0x2000865c

08001108 <SD_DMAConfigRx>:
  * @brief Configure the DMA to receive data from the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 8001108:	b510      	push	{r4, lr}
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Configure DMA Rx parameters */
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 800110a:	4c15      	ldr	r4, [pc, #84]	; (8001160 <SD_DMAConfigRx+0x58>)
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_rx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 800110c:	6584      	str	r4, [r0, #88]	; 0x58
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 800110e:	2307      	movs	r3, #7
 8001110:	6063      	str	r3, [r4, #4]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001112:	2300      	movs	r3, #0
 8001114:	60a3      	str	r3, [r4, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001116:	60e3      	str	r3, [r4, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	6123      	str	r3, [r4, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800111c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001120:	6163      	str	r3, [r4, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001122:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001126:	61a3      	str	r3, [r4, #24]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8001128:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800112c:	6223      	str	r3, [r4, #32]
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 800112e:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_rx.Instance = DMA2_Channel4;
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <SD_DMAConfigRx+0x5c>)
 8001132:	6023      	str	r3, [r4, #0]

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_rx);
 8001134:	4620      	mov	r0, r4
 8001136:	f004 fb35 	bl	80057a4 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_rx);
 800113a:	4620      	mov	r0, r4
 800113c:	f004 faac 	bl	8005698 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_rx);
 8001140:	4620      	mov	r0, r4
 8001142:	f004 fa39 	bl	80055b8 <HAL_DMA_Init>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <SD_DMAConfigRx+0x60>)
 8001148:	2230      	movs	r2, #48	; 0x30
 800114a:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);

  return (status != HAL_OK? SD_ERROR : SD_OK);
 800114e:	2800      	cmp	r0, #0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001150:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001154:	605a      	str	r2, [r3, #4]
}
 8001156:	bf14      	ite	ne
 8001158:	2029      	movne	r0, #41	; 0x29
 800115a:	2000      	moveq	r0, #0
 800115c:	bd10      	pop	{r4, pc}
 800115e:	bf00      	nop
 8001160:	2000049c 	.word	0x2000049c
 8001164:	40020444 	.word	0x40020444
 8001168:	e000e100 	.word	0xe000e100

0800116c <BSP_SD_ReadBlocks_DMA>:
{
 800116c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uSdHandle.hdmatx = NULL;
 800116e:	4c10      	ldr	r4, [pc, #64]	; (80011b0 <BSP_SD_ReadBlocks_DMA+0x44>)
{
 8001170:	4605      	mov	r5, r0
 8001172:	461f      	mov	r7, r3
  state = ((SD_DMAConfigRx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001174:	4620      	mov	r0, r4
  uSdHandle.hdmatx = NULL;
 8001176:	2300      	movs	r3, #0
{
 8001178:	4616      	mov	r6, r2
  uSdHandle.hdmatx = NULL;
 800117a:	65e3      	str	r3, [r4, #92]	; 0x5c
  state = ((SD_DMAConfigRx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 800117c:	f7ff ffc4 	bl	8001108 <SD_DMAConfigRx>
  if(state == MSD_OK)
 8001180:	b998      	cbnz	r0, 80011aa <BSP_SD_ReadBlocks_DMA+0x3e>
    state = ((HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	9b08      	ldr	r3, [sp, #32]
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	4632      	mov	r2, r6
 800118c:	463b      	mov	r3, r7
 800118e:	4629      	mov	r1, r5
 8001190:	4620      	mov	r0, r4
 8001192:	f005 fde1 	bl	8006d58 <HAL_SD_ReadBlocks_DMA>
    if(state == MSD_OK)
 8001196:	b940      	cbnz	r0, 80011aa <BSP_SD_ReadBlocks_DMA+0x3e>
      state = ((HAL_SD_CheckReadOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001198:	4906      	ldr	r1, [pc, #24]	; (80011b4 <BSP_SD_ReadBlocks_DMA+0x48>)
 800119a:	4620      	mov	r0, r4
 800119c:	f006 faf3 	bl	8007786 <HAL_SD_CheckReadOperation>
 80011a0:	3000      	adds	r0, #0
 80011a2:	bf18      	it	ne
 80011a4:	2001      	movne	r0, #1
}
 80011a6:	b003      	add	sp, #12
 80011a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    state = ((HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 80011aa:	2001      	movs	r0, #1
 80011ac:	e7fb      	b.n	80011a6 <BSP_SD_ReadBlocks_DMA+0x3a>
 80011ae:	bf00      	nop
 80011b0:	2000865c 	.word	0x2000865c
 80011b4:	00989680 	.word	0x00989680

080011b8 <SD_DMAConfigTx>:
  * @brief Configure the DMA to transmit data to the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 80011b8:	b510      	push	{r4, lr}
  static DMA_HandleTypeDef hdma_tx;
  HAL_StatusTypeDef status;

  /* Configure DMA Tx parameters */
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 80011ba:	4c15      	ldr	r4, [pc, #84]	; (8001210 <SD_DMAConfigTx+0x58>)
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_tx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 80011bc:	65c4      	str	r4, [r0, #92]	; 0x5c
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 80011be:	2307      	movs	r3, #7
 80011c0:	6063      	str	r3, [r4, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80011c2:	2310      	movs	r3, #16
 80011c4:	60a3      	str	r3, [r4, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60e3      	str	r3, [r4, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	6123      	str	r3, [r4, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011d2:	6163      	str	r3, [r4, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80011d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011d8:	61a3      	str	r3, [r4, #24]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80011da:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011de:	6223      	str	r3, [r4, #32]
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 80011e0:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_tx.Instance = DMA2_Channel4;
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <SD_DMAConfigTx+0x5c>)
 80011e4:	6023      	str	r3, [r4, #0]

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_tx);
 80011e6:	4620      	mov	r0, r4
 80011e8:	f004 fadc 	bl	80057a4 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_tx);
 80011ec:	4620      	mov	r0, r4
 80011ee:	f004 fa53 	bl	8005698 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_tx);
 80011f2:	4620      	mov	r0, r4
 80011f4:	f004 f9e0 	bl	80055b8 <HAL_DMA_Init>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <SD_DMAConfigTx+0x60>)
 80011fa:	2230      	movs	r2, #48	; 0x30
 80011fc:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);

  return (status != HAL_OK? SD_ERROR : SD_OK);
 8001200:	2800      	cmp	r0, #0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001202:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001206:	605a      	str	r2, [r3, #4]
}
 8001208:	bf14      	ite	ne
 800120a:	2029      	movne	r0, #41	; 0x29
 800120c:	2000      	moveq	r0, #0
 800120e:	bd10      	pop	{r4, pc}
 8001210:	200004e4 	.word	0x200004e4
 8001214:	40020444 	.word	0x40020444
 8001218:	e000e100 	.word	0xe000e100

0800121c <BSP_SD_Init>:
{
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef gpioinitstruct = {0};
 800121e:	2214      	movs	r2, #20
{
 8001220:	b08b      	sub	sp, #44	; 0x2c
  uSdHandle.Instance = SDMMC1;
 8001222:	4c38      	ldr	r4, [pc, #224]	; (8001304 <BSP_SD_Init+0xe8>)
 8001224:	4b38      	ldr	r3, [pc, #224]	; (8001308 <BSP_SD_Init+0xec>)
 8001226:	6023      	str	r3, [r4, #0]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8001228:	2100      	movs	r1, #0
  uSdHandle.Init.ClockDiv            = 1;    // Checked by Masudul,
 800122a:	2501      	movs	r5, #1
  GPIO_InitTypeDef gpioinitstruct = {0};
 800122c:	eb0d 0002 	add.w	r0, sp, r2
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8001230:	6061      	str	r1, [r4, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8001232:	60a1      	str	r1, [r4, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001234:	60e1      	str	r1, [r4, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8001236:	6121      	str	r1, [r4, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001238:	6161      	str	r1, [r4, #20]
  uSdHandle.Init.ClockDiv            = 1;    // Checked by Masudul,
 800123a:	61a5      	str	r5, [r4, #24]
  GPIO_InitTypeDef gpioinitstruct = {0};
 800123c:	f00a f9e9 	bl	800b612 <memset>
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001240:	4b32      	ldr	r3, [pc, #200]	; (800130c <BSP_SD_Init+0xf0>)
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8001242:	4833      	ldr	r0, [pc, #204]	; (8001310 <BSP_SD_Init+0xf4>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001244:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001246:	4e33      	ldr	r6, [pc, #204]	; (8001314 <BSP_SD_Init+0xf8>)
 8001248:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800124c:	661a      	str	r2, [r3, #96]	; 0x60
 800124e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001250:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001254:	9200      	str	r2, [sp, #0]
 8001256:	9a00      	ldr	r2, [sp, #0]
  __DMAx_TxRx_CLK_ENABLE();
 8001258:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800125a:	f042 0202 	orr.w	r2, r2, #2
 800125e:	649a      	str	r2, [r3, #72]	; 0x48
 8001260:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001262:	f002 0202 	and.w	r2, r2, #2
 8001266:	9201      	str	r2, [sp, #4]
 8001268:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800126c:	f042 0204 	orr.w	r2, r2, #4
 8001270:	64da      	str	r2, [r3, #76]	; 0x4c
 8001272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001274:	f002 0204 	and.w	r2, r2, #4
 8001278:	9202      	str	r2, [sp, #8]
 800127a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800127e:	f042 0208 	orr.w	r2, r2, #8
 8001282:	64da      	str	r2, [r3, #76]	; 0x4c
 8001284:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001286:	f002 0208 	and.w	r2, r2, #8
 800128a:	9203      	str	r2, [sp, #12]
 800128c:	9a03      	ldr	r2, [sp, #12]
  __SD_DETECT_GPIO_CLK_ENABLE();
 800128e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001290:	432a      	orrs	r2, r5
 8001292:	64da      	str	r2, [r3, #76]	; 0x4c
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  gpioinitstruct.Pull      = GPIO_PULLUP;
 8001296:	9507      	str	r5, [sp, #28]
  __SD_DETECT_GPIO_CLK_ENABLE();
 8001298:	402b      	ands	r3, r5
 800129a:	9304      	str	r3, [sp, #16]
 800129c:	9b04      	ldr	r3, [sp, #16]
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	9308      	str	r3, [sp, #32]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 80012a6:	230c      	movs	r3, #12
 80012a8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80012aa:	a905      	add	r1, sp, #20
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80012ac:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80012b0:	9305      	str	r3, [sp, #20]
 80012b2:	f44f 3700 	mov.w	r7, #131072	; 0x20000
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80012b6:	f004 fadb 	bl	8005870 <HAL_GPIO_Init>
  gpioinitstruct.Pin = GPIO_PIN_2;
 80012ba:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80012bc:	4816      	ldr	r0, [pc, #88]	; (8001318 <BSP_SD_Init+0xfc>)
  gpioinitstruct.Pin = GPIO_PIN_2;
 80012be:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80012c0:	a905      	add	r1, sp, #20
 80012c2:	f004 fad5 	bl	8005870 <HAL_GPIO_Init>
 80012c6:	6077      	str	r7, [r6, #4]
  if((SD_DMAConfigTx(&uSdHandle) == SD_OK) )
 80012c8:	4620      	mov	r0, r4
 80012ca:	f7ff ff75 	bl	80011b8 <SD_DMAConfigTx>
 80012ce:	b900      	cbnz	r0, 80012d2 <BSP_SD_Init+0xb6>
 80012d0:	6077      	str	r7, [r6, #4]
  __IO uint8_t status = SD_PRESENT;
 80012d2:	f88d 5014 	strb.w	r5, [sp, #20]
  return status;
 80012d6:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if(BSP_SD_IsDetected() != SD_PRESENT)
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d002      	beq.n	80012e4 <BSP_SD_Init+0xc8>
    return MSD_ERROR;
 80012de:	2001      	movs	r0, #1
}
 80012e0:	b00b      	add	sp, #44	; 0x2c
 80012e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(HAL_SD_Init(&uSdHandle, &uSdCardInfo) != SD_OK)
 80012e4:	490d      	ldr	r1, [pc, #52]	; (800131c <BSP_SD_Init+0x100>)
 80012e6:	4807      	ldr	r0, [pc, #28]	; (8001304 <BSP_SD_Init+0xe8>)
 80012e8:	f005 ffca 	bl	8007280 <HAL_SD_Init>
 80012ec:	2800      	cmp	r0, #0
 80012ee:	d1f6      	bne.n	80012de <BSP_SD_Init+0xc2>
    if(HAL_SD_WideBusOperation_Config(&uSdHandle, SDMMC_BUS_WIDE_4B) != SD_OK)
 80012f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012f4:	4803      	ldr	r0, [pc, #12]	; (8001304 <BSP_SD_Init+0xe8>)
 80012f6:	f006 f99b 	bl	8007630 <HAL_SD_WideBusOperation_Config>
    return MSD_ERROR;
 80012fa:	3000      	adds	r0, #0
 80012fc:	bf18      	it	ne
 80012fe:	2001      	movne	r0, #1
 8001300:	e7ee      	b.n	80012e0 <BSP_SD_Init+0xc4>
 8001302:	bf00      	nop
 8001304:	2000865c 	.word	0x2000865c
 8001308:	40012800 	.word	0x40012800
 800130c:	40021000 	.word	0x40021000
 8001310:	48000800 	.word	0x48000800
 8001314:	e000e100 	.word	0xe000e100
 8001318:	48000c00 	.word	0x48000c00
 800131c:	20000530 	.word	0x20000530

08001320 <BSP_SD_WriteBlocks_DMA>:
{
 8001320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uSdHandle.hdmarx = NULL;
 8001322:	4c10      	ldr	r4, [pc, #64]	; (8001364 <BSP_SD_WriteBlocks_DMA+0x44>)
{
 8001324:	4605      	mov	r5, r0
 8001326:	461f      	mov	r7, r3
  state = ((SD_DMAConfigTx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001328:	4620      	mov	r0, r4
  uSdHandle.hdmarx = NULL;
 800132a:	2300      	movs	r3, #0
{
 800132c:	4616      	mov	r6, r2
  uSdHandle.hdmarx = NULL;
 800132e:	65a3      	str	r3, [r4, #88]	; 0x58
  state = ((SD_DMAConfigTx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001330:	f7ff ff42 	bl	80011b8 <SD_DMAConfigTx>
  if(state == MSD_OK)
 8001334:	b998      	cbnz	r0, 800135e <BSP_SD_WriteBlocks_DMA+0x3e>
    state = ((HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	9b08      	ldr	r3, [sp, #32]
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	4632      	mov	r2, r6
 8001340:	463b      	mov	r3, r7
 8001342:	4629      	mov	r1, r5
 8001344:	4620      	mov	r0, r4
 8001346:	f005 fd81 	bl	8006e4c <HAL_SD_WriteBlocks_DMA>
    if(state == MSD_OK)
 800134a:	b940      	cbnz	r0, 800135e <BSP_SD_WriteBlocks_DMA+0x3e>
      state = ((HAL_SD_CheckWriteOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 800134c:	4906      	ldr	r1, [pc, #24]	; (8001368 <BSP_SD_WriteBlocks_DMA+0x48>)
 800134e:	4620      	mov	r0, r4
 8001350:	f006 fa6f 	bl	8007832 <HAL_SD_CheckWriteOperation>
 8001354:	3000      	adds	r0, #0
 8001356:	bf18      	it	ne
 8001358:	2001      	movne	r0, #1
}
 800135a:	b003      	add	sp, #12
 800135c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    state = ((HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 800135e:	2001      	movs	r0, #1
 8001360:	e7fb      	b.n	800135a <BSP_SD_WriteBlocks_DMA+0x3a>
 8001362:	bf00      	nop
 8001364:	2000865c 	.word	0x2000865c
 8001368:	00989680 	.word	0x00989680

0800136c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 800136c:	2000      	movs	r0, #0
 800136e:	4770      	bx	lr

08001370 <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <LL_AHB2_GRP1_EnableClock+0x18>)
 8001372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001374:	4302      	orrs	r2, r0
 8001376:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 800137a:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800137c:	4018      	ands	r0, r3
 800137e:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001380:	9b01      	ldr	r3, [sp, #4]
}
 8001382:	b002      	add	sp, #8
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000

0800138c <MX_GPIO_Init>:
LL_GPIO_InitTypeDef GPIO_InitStruct;



void MX_GPIO_Init(void)
{
 800138c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}



  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001390:	2004      	movs	r0, #4
 8001392:	f7ff ffed 	bl	8001370 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8001396:	2080      	movs	r0, #128	; 0x80
 8001398:	f7ff ffea 	bl	8001370 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800139c:	2001      	movs	r0, #1
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);

  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 800139e:	4c76      	ldr	r4, [pc, #472]	; (8001578 <MX_GPIO_Init+0x1ec>)
  GPIO_InitStruct.Pin = LED_B_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8001580 <MX_GPIO_Init+0x1f4>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80013a4:	f7ff ffe4 	bl	8001370 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80013a8:	2002      	movs	r0, #2
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80013aa:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
 80013ae:	f7ff ffdf 	bl	8001370 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80013b2:	2008      	movs	r0, #8
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013b4:	2700      	movs	r7, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013b6:	2501      	movs	r5, #1
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80013b8:	f7ff ffda 	bl	8001370 <LL_AHB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 80013bc:	260c      	movs	r6, #12
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	4621      	mov	r1, r4
 80013c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LED_B_PIN;
 80013c4:	f04f 0b80 	mov.w	fp, #128	; 0x80
  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 80013c8:	6026      	str	r6, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013ca:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013cc:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013ce:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013d0:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f006 fdd1 	bl	8007f78 <LL_GPIO_Init>
 80013d6:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	4621      	mov	r1, r4
 80013dc:	4650      	mov	r0, sl
  LL_GPIO_ResetOutputPin(GPIOB, LED_B_PIN);

  GPIO_InitStruct.Pin = USB_CONNECTIVITY;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80013de:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pin = LED_B_PIN;
 80013e2:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013e6:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013e8:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013ea:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013ec:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f006 fdc3 	bl	8007f78 <LL_GPIO_Init>
 80013f2:	f8ca b028 	str.w	fp, [sl, #40]	; 0x28
  GPIO_InitStruct.Pin = USB_CONNECTIVITY;
 80013f6:	f44f 7200 	mov.w	r2, #512	; 0x200
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 80013fa:	4621      	mov	r1, r4
 80013fc:	4640      	mov	r0, r8

  /**/
  GPIO_InitStruct.Pin = ENC1_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2603      	movs	r6, #3
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001400:	e884 0084 	stmia.w	r4, {r2, r7}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001404:	f8c4 9010 	str.w	r9, [r4, #16]
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 8001408:	f006 fdb6 	bl	8007f78 <LL_GPIO_Init>
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC1_CS_GPIO_PORT, &GPIO_InitStruct);
 800140c:	4621      	mov	r1, r4
 800140e:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = ENC1_CS_PIN;
 8001410:	f8c4 9000 	str.w	r9, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001414:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001416:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001418:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800141a:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(ENC1_CS_GPIO_PORT, &GPIO_InitStruct);
 800141c:	f006 fdac 	bl	8007f78 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ENC1_SCLK_PIN;
 8001420:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC1_SCLK_GPIO_PORT, &GPIO_InitStruct);
 8001424:	4621      	mov	r1, r4
 8001426:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = ENC1_SCLK_PIN;
 8001428:	6023      	str	r3, [r4, #0]
 800142a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800142c:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001430:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001432:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(ENC1_SCLK_GPIO_PORT, &GPIO_InitStruct);
 8001434:	f006 fda0 	bl	8007f78 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001438:	f44f 6200 	mov.w	r2, #2048	; 0x800
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC1_SCLK_GPIO_PORT, &GPIO_InitStruct);
 800143c:	4621      	mov	r1, r4
 800143e:	4650      	mov	r0, sl
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001440:	e884 00e4 	stmia.w	r4, {r2, r5, r6, r7}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001444:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(ENC1_SCLK_GPIO_PORT, &GPIO_InitStruct);
 8001446:	f006 fd97 	bl	8007f78 <LL_GPIO_Init>




  GPIO_InitStruct.Pin =  ENC1_DATA_PIN;
 800144a:	2204      	movs	r2, #4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(ENC1_DATA_GPIO_PORT, &GPIO_InitStruct);
 800144c:	4621      	mov	r1, r4
 800144e:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001450:	e884 0084 	stmia.w	r4, {r2, r7}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001454:	f8c4 9010 	str.w	r9, [r4, #16]
  LL_GPIO_Init(ENC1_DATA_GPIO_PORT, &GPIO_InitStruct);
 8001458:	f006 fd8e 	bl	8007f78 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ENC2_CS_PIN;
 800145c:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 800145e:	4621      	mov	r1, r4
 8001460:	4846      	ldr	r0, [pc, #280]	; (800157c <MX_GPIO_Init+0x1f0>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001462:	6127      	str	r7, [r4, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001464:	e884 00e8 	stmia.w	r4, {r3, r5, r6, r7}
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 8001468:	f006 fd86 	bl	8007f78 <LL_GPIO_Init>

  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(ENC2_DATA_GPIO_PORT, &GPIO_InitStruct);
 800146c:	4621      	mov	r1, r4
 800146e:	4843      	ldr	r0, [pc, #268]	; (800157c <MX_GPIO_Init+0x1f0>)
  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
 8001470:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001474:	6067      	str	r7, [r4, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001476:	f8c4 9010 	str.w	r9, [r4, #16]
  LL_GPIO_Init(ENC2_DATA_GPIO_PORT, &GPIO_InitStruct);
 800147a:	f006 fd7d 	bl	8007f78 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = ENC2_SCLK_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC2_SCLK_GPIO_PORT, &GPIO_InitStruct);
 800147e:	4621      	mov	r1, r4
 8001480:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = ENC2_SCLK_PIN;
 8001482:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001486:	6065      	str	r5, [r4, #4]



  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 8001488:	f44f 7b80 	mov.w	fp, #256	; 0x100
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800148e:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001490:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(ENC2_SCLK_GPIO_PORT, &GPIO_InitStruct);
 8001492:	f006 fd71 	bl	8007f78 <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI1_CS_GPIO_PORT, &GPIO_InitStruct);
 8001496:	4621      	mov	r1, r4
 8001498:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 800149a:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800149e:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014a2:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014a4:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(SPI1_CS_GPIO_PORT, &GPIO_InitStruct);
 80014a6:	f006 fd67 	bl	8007f78 <LL_GPIO_Init>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80014aa:	f8c8 b018 	str.w	fp, [r8, #24]
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 80014ae:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
 80014b0:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 80014b4:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
 80014b6:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014ba:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014be:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014c0:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 80014c2:	f006 fd59 	bl	8007f78 <LL_GPIO_Init>
 80014c6:	f8ca b018 	str.w	fp, [sl, #24]
  GPIO_InitStruct.Pin = SPI3_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 80014ca:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8001584 <MX_GPIO_Init+0x1f8>
  GPIO_InitStruct.Pin = SPI3_CS_PIN;
 80014ce:	6025      	str	r5, [r4, #0]
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 80014d0:	4621      	mov	r1, r4
 80014d2:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014d4:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014d8:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014da:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 80014dc:	f006 fd4c 	bl	8007f78 <LL_GPIO_Init>
 80014e0:	f8cb 5018 	str.w	r5, [fp, #24]
  LL_GPIO_SetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN);

  GPIO_InitStruct.Pin = SPI1_IMU2_CS_Pin;
 80014e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI1_IMU2_CS_GPIO_Port, &GPIO_InitStruct);
 80014e8:	4621      	mov	r1, r4
 80014ea:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = SPI1_IMU2_CS_Pin;
 80014ec:	6022      	str	r2, [r4, #0]
 80014ee:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014f0:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014f4:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014f6:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(SPI1_IMU2_CS_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f006 fd3e 	bl	8007f78 <LL_GPIO_Init>
 80014fc:	9a00      	ldr	r2, [sp, #0]
 80014fe:	f8c8 2018 	str.w	r2, [r8, #24]
  GPIO_InitStruct.Pin = SPI3_IMU5_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 8001502:	4621      	mov	r1, r4
 8001504:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = SPI3_IMU5_CS_Pin;
 8001506:	f8c4 9000 	str.w	r9, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800150a:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800150e:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001510:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 8001512:	f006 fd31 	bl	8007f78 <LL_GPIO_Init>
 8001516:	f8cb 9018 	str.w	r9, [fp, #24]

  /**/
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 800151a:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
 800151c:	f04f 0b10 	mov.w	fp, #16
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 8001520:	4816      	ldr	r0, [pc, #88]	; (800157c <MX_GPIO_Init+0x1f0>)
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
 8001522:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001526:	6067      	str	r7, [r4, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001528:	f8c4 9010 	str.w	r9, [r4, #16]
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 800152c:	f006 fd24 	bl	8007f78 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001530:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001532:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	4621      	mov	r1, r4
 8001536:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001538:	e884 0088 	stmia.w	r4, {r3, r7}
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f006 fd1c 	bl	8007f78 <LL_GPIO_Init>


  /**/
//
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;   // Portable IMU2 CS Pin
 8001540:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	4621      	mov	r1, r4
 8001544:	4650      	mov	r0, sl
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001546:	e884 00e8 	stmia.w	r4, {r3, r5, r6, r7}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800154a:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154c:	f006 fd14 	bl	8007f78 <LL_GPIO_Init>
 8001550:	2340      	movs	r3, #64	; 0x40
 8001552:	f8ca 3018 	str.w	r3, [sl, #24]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;   // Portable IMU3 CS Pin
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001556:	4621      	mov	r1, r4
 8001558:	4808      	ldr	r0, [pc, #32]	; (800157c <MX_GPIO_Init+0x1f0>)
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;   // Portable IMU3 CS Pin
 800155a:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800155e:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001562:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001564:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001566:	f006 fd07 	bl	8007f78 <LL_GPIO_Init>
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <MX_GPIO_Init+0x1f0>)
 800156c:	f8c3 b018 	str.w	fp, [r3, #24]
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_4);

}
 8001570:	b003      	add	sp, #12
 8001572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001576:	bf00      	nop
 8001578:	200086bc 	.word	0x200086bc
 800157c:	48000800 	.word	0x48000800
 8001580:	48000400 	.word	0x48000400
 8001584:	48001c00 	.word	0x48001c00

08001588 <RED_LED_OFF>:
 8001588:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800158c:	2208      	movs	r2, #8
 800158e:	619a      	str	r2, [r3, #24]
 8001590:	4770      	bx	lr

08001592 <GREEN_LED_OFF>:
 8001592:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001596:	2204      	movs	r2, #4
 8001598:	619a      	str	r2, [r3, #24]
 800159a:	4770      	bx	lr

0800159c <BLUE_LED_OFF>:
 800159c:	4b01      	ldr	r3, [pc, #4]	; (80015a4 <BLUE_LED_OFF+0x8>)
 800159e:	2280      	movs	r2, #128	; 0x80
 80015a0:	619a      	str	r2, [r3, #24]
 80015a2:	4770      	bx	lr
 80015a4:	48000400 	.word	0x48000400

080015a8 <ALL_LED_OFF>:
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <ALL_LED_OFF+0x14>)
 80015aa:	2280      	movs	r2, #128	; 0x80
 80015ac:	619a      	str	r2, [r3, #24]
 80015ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015b2:	2204      	movs	r2, #4
 80015b4:	619a      	str	r2, [r3, #24]
 80015b6:	2208      	movs	r2, #8
 80015b8:	619a      	str	r2, [r3, #24]
 80015ba:	4770      	bx	lr
 80015bc:	48000400 	.word	0x48000400

080015c0 <GREEN_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80015c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015c4:	2204      	movs	r2, #4
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80015c8:	4a02      	ldr	r2, [pc, #8]	; (80015d4 <GREEN_LED_ONLY+0x14>)
 80015ca:	2180      	movs	r1, #128	; 0x80
 80015cc:	6191      	str	r1, [r2, #24]
 80015ce:	2208      	movs	r2, #8
 80015d0:	619a      	str	r2, [r3, #24]
 80015d2:	4770      	bx	lr
 80015d4:	48000400 	.word	0x48000400

080015d8 <RED_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80015d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015dc:	2208      	movs	r2, #8
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80015e0:	4a02      	ldr	r2, [pc, #8]	; (80015ec <RED_LED_ONLY+0x14>)
 80015e2:	2180      	movs	r1, #128	; 0x80
 80015e4:	6191      	str	r1, [r2, #24]
 80015e6:	2204      	movs	r2, #4
 80015e8:	619a      	str	r2, [r3, #24]
 80015ea:	4770      	bx	lr
 80015ec:	48000400 	.word	0x48000400

080015f0 <BLUE_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <BLUE_LED_ONLY+0x14>)
 80015f2:	2280      	movs	r2, #128	; 0x80
 80015f4:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80015f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015fa:	2204      	movs	r2, #4
 80015fc:	619a      	str	r2, [r3, #24]
 80015fe:	2208      	movs	r2, #8
 8001600:	619a      	str	r2, [r3, #24]
 8001602:	4770      	bx	lr
 8001604:	48000400 	.word	0x48000400

08001608 <VIOLET_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <VIOLET_LED_ONLY+0x14>)
 800160a:	2280      	movs	r2, #128	; 0x80
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 800160e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001612:	2204      	movs	r2, #4
 8001614:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001616:	2208      	movs	r2, #8
 8001618:	629a      	str	r2, [r3, #40]	; 0x28
 800161a:	4770      	bx	lr
 800161c:	48000400 	.word	0x48000400

08001620 <CYAN_LED_ONLY>:
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <CYAN_LED_ONLY+0x14>)
 8001622:	2280      	movs	r2, #128	; 0x80
 8001624:	629a      	str	r2, [r3, #40]	; 0x28
 8001626:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800162a:	2204      	movs	r2, #4
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
 800162e:	2208      	movs	r2, #8
 8001630:	629a      	str	r2, [r3, #40]	; 0x28
 8001632:	4770      	bx	lr
 8001634:	48000400 	.word	0x48000400

08001638 <ALL_LED_ON>:
 8001638:	f7ff bff2 	b.w	8001620 <CYAN_LED_ONLY>

0800163c <SD_POWER_ON>:
 800163c:	4770      	bx	lr

0800163e <SD_POWER_OFF>:
void SD_POWER_ON(void)
{

}
void SD_POWER_OFF(void)
{
 800163e:	4770      	bx	lr

08001640 <main>:




int main(void){
	Pros_state =  LP_STOP;                                    // Default state after power ON reset
 8001640:	4c67      	ldr	r4, [pc, #412]	; (80017e0 <main+0x1a0>)
int main(void){
 8001642:	b580      	push	{r7, lr}
	Pros_state =  LP_STOP;                                    // Default state after power ON reset
 8001644:	2501      	movs	r5, #1
 8001646:	7025      	strb	r5, [r4, #0]
	SystemClock_Config_MSI_80MHz();	                        // Configure the system clock to 48 MHz from MSI, PLL disabled for power saving
 8001648:	f002 ff3e 	bl	80044c8 <SystemClock_Config_MSI_80MHz>

	// If RTC is previously configured and running via backup battery i.e. BackUp Register Data is available, No need to update RTC time again
 if (RTC_BAK_GetRegister(RTC, 0x01) != RTC_BKP_DATE_TIME_UPDTATED) //    0x01 value was arbitrarily set from previous Configure_RTC_Calendar()
 800164c:	4629      	mov	r1, r5
 800164e:	4865      	ldr	r0, [pc, #404]	; (80017e4 <main+0x1a4>)
 8001650:	f000 ff92 	bl	8002578 <RTC_BAK_GetRegister>
 8001654:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8001658:	4298      	cmp	r0, r3
 800165a:	d001      	beq.n	8001660 <main+0x20>
	  {
			MX_RTC_Init();   // Set RTC clock source and parameters
 800165c:	f000 fefa 	bl	8002454 <MX_RTC_Init>

  //Transmits a message over can
//clear state


  EPOS4_enable(CAN_ID);
 8001660:	4d61      	ldr	r5, [pc, #388]	; (80017e8 <main+0x1a8>)

					case Fatal_Error_State:
						   RED_LED_ONLY();

						   FATFS_Logstart_Delete();
						   Data_log_Start_Resume=0;
 8001662:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001810 <main+0x1d0>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8001666:	4f61      	ldr	r7, [pc, #388]	; (80017ec <main+0x1ac>)
  MX_GPIO_Init();
 8001668:	f7ff fe90 	bl	800138c <MX_GPIO_Init>
  HAL_Init();                 // Reset of all peripherals, Initializes the Flash interface and the Systick.
 800166c:	f003 ff00 	bl	8005470 <HAL_Init>
    DFU_Bypass();
 8001670:	f000 fc94 	bl	8001f9c <DFU_Bypass>
    Configure_USART_1();  // Debug with PC
 8001674:	f001 fd96 	bl	80031a4 <Configure_USART_1>
    sprintf(PrintBuf,"Hello");
 8001678:	495d      	ldr	r1, [pc, #372]	; (80017f0 <main+0x1b0>)
 800167a:	485e      	ldr	r0, [pc, #376]	; (80017f4 <main+0x1b4>)
 800167c:	f00a f8de 	bl	800b83c <strcpy>
    USART1_wr_print(PrintBuf,sizeof(PrintBuf));
 8001680:	2132      	movs	r1, #50	; 0x32
 8001682:	485c      	ldr	r0, [pc, #368]	; (80017f4 <main+0x1b4>)
 8001684:	f001 fdc8 	bl	8003218 <USART1_wr_print>
 P_IMU4_SPI3_Initialization_at_reset();   //IMU4-5_SPI3 //step1
 8001688:	f002 fd0a 	bl	80040a0 <P_IMU4_SPI3_Initialization_at_reset>
 P_IMU1_SPI1_Initialization_at_reset(); //IMU1-2__SPI1  (only IMU1 configured)
 800168c:	f002 fc0e 	bl	8003eac <P_IMU1_SPI1_Initialization_at_reset>
 P_ADC_Sensor_GPIO_Init(); //ADC GPIOs //here we initialized the chip select pins as well
 8001690:	f001 fa20 	bl	8002ad4 <P_ADC_Sensor_GPIO_Init>
 MCP_SPI2_Initialization_at_reset();
 8001694:	f001 fd74 	bl	8003180 <MCP_SPI2_Initialization_at_reset>
  CAN_configure();
 8001698:	f7ff fc44 	bl	8000f24 <CAN_configure>
  CAN_mode();
 800169c:	f7ff fc51 	bl	8000f42 <CAN_mode>
  EPOS4_enable(CAN_ID);
 80016a0:	6828      	ldr	r0, [r5, #0]
 80016a2:	f7ff fcc4 	bl	800102e <EPOS4_enable>
EPOS4_set_operation_mode(CAN_ID, 0x0A); // torque mode
 80016a6:	210a      	movs	r1, #10
 80016a8:	6828      	ldr	r0, [r5, #0]
 80016aa:	f7ff fc92 	bl	8000fd2 <EPOS4_set_operation_mode>
EPOS4_clear_errors(CAN_ID);
 80016ae:	6828      	ldr	r0, [r5, #0]
 80016b0:	f7ff fced 	bl	800108e <EPOS4_clear_errors>
delay_us(1500);
 80016b4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80016b8:	f002 fec4 	bl	8004444 <delay_us>
EPOS4_enable(CAN_ID);
 80016bc:	6828      	ldr	r0, [r5, #0]
					case Dormant_Idle_Stop:             // Idle Lowest Power Stop Mode with no Data log (only wait for USB connectivity)

					  	                        EnterStop();   // Enter Stop Mode
												 // Wake Up after STOP Mode only by USB EXTI Int

												if (USB_Present_ == 1)                     // After detecting USB attachment via EXTI_5 int
 80016be:	4d4e      	ldr	r5, [pc, #312]	; (80017f8 <main+0x1b8>)
EPOS4_enable(CAN_ID);
 80016c0:	f7ff fcb5 	bl	800102e <EPOS4_enable>
  USB_PA9_EXTI_conf();         // USB connectivity pin detect Interrupt // Data_Pause_Resume_PC0_EXTI_conf();
 80016c4:	f000 ff5c 	bl	8002580 <USB_PA9_EXTI_conf>
  Configure_LPTIM2_Int(); // Configured LPTIM2 but not started. To be started before going to Loop
 80016c8:	f002 ff6e 	bl	80045a8 <Configure_LPTIM2_Int>
  Configure_Interrupt();       // Re-arrange NVIC interrupt priority
 80016cc:	f000 fc14 	bl	8001ef8 <Configure_Interrupt>
  Power_on_reset();            // Following reset is found by troubleshooting
 80016d0:	f000 fc04 	bl	8001edc <Power_on_reset>
  AIM_DataStart_at_Reset();
 80016d4:	f002 f8aa 	bl	800382c <AIM_DataStart_at_Reset>
  GREEN_LED_ONLY();
 80016d8:	f7ff ff72 	bl	80015c0 <GREEN_LED_ONLY>
				  switch(Pros_state) {
 80016dc:	7823      	ldrb	r3, [r4, #0]
 80016de:	3b01      	subs	r3, #1
 80016e0:	2b06      	cmp	r3, #6
 80016e2:	d8fd      	bhi.n	80016e0 <main+0xa0>
 80016e4:	a201      	add	r2, pc, #4	; (adr r2, 80016ec <main+0xac>)
 80016e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ea:	bf00      	nop
 80016ec:	08001709 	.word	0x08001709
 80016f0:	08001743 	.word	0x08001743
 80016f4:	080016e1 	.word	0x080016e1
 80016f8:	080017c5 	.word	0x080017c5
 80016fc:	08001761 	.word	0x08001761
 8001700:	080017cb 	.word	0x080017cb
 8001704:	0800177d 	.word	0x0800177d
						EnterStop();   // Enter Stop Mode
 8001708:	f002 fec8 	bl	800449c <EnterStop>
						if (USB_Present_ == 1)                     // After detecting USB attachment via EXTI_5 int
 800170c:	782b      	ldrb	r3, [r5, #0]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d104      	bne.n	800171c <main+0xdc>
													 Pros_state = USB_MSC_VCP_Mode;                   // Next State USB_MSC_Mode Mode
 8001712:	2304      	movs	r3, #4
 8001714:	7023      	strb	r3, [r4, #0]
													 USB_Present_ = 0;                           // Reset Flag to avoid looping
 8001716:	2300      	movs	r3, #0
 8001718:	702b      	strb	r3, [r5, #0]
 800171a:	e7df      	b.n	80016dc <main+0x9c>
						 else if (FATAL_Error == 1)                      // Triggered from Error_Handler
 800171c:	4b37      	ldr	r3, [pc, #220]	; (80017fc <main+0x1bc>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <main+0xf0>
								FATAL_Error = 0;                            // Reset Flag to avoid looping
 8001724:	4b35      	ldr	r3, [pc, #212]	; (80017fc <main+0x1bc>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
								 Pros_state = Fatal_Error_State;             // Next State Fatal_Error_State
 800172a:	2307      	movs	r3, #7
							 Pros_state = Dormant_Idle_Stop;                       // Stay Dormant Mode if no external events
 800172c:	7023      	strb	r3, [r4, #0]
 800172e:	e7d5      	b.n	80016dc <main+0x9c>
						 else if (SD_write_Flag == 1)                    // When BUffer full to store in SD card
 8001730:	4b33      	ldr	r3, [pc, #204]	; (8001800 <main+0x1c0>)
 8001732:	781a      	ldrb	r2, [r3, #0]
 8001734:	2a01      	cmp	r2, #1
 8001736:	d111      	bne.n	800175c <main+0x11c>
							Pros_state = Sensor_FATFS_Write;              // Next State Sensor_FATFS_Write Mode
 8001738:	2202      	movs	r2, #2
 800173a:	7022      	strb	r2, [r4, #0]
							SD_write_Flag = 0;                           // Reset Flag to avoid looping
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
 8001740:	e7cc      	b.n	80016dc <main+0x9c>
						Battery_ADC_Value=2500;
 8001742:	4b30      	ldr	r3, [pc, #192]	; (8001804 <main+0x1c4>)
 8001744:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001748:	801a      	strh	r2, [r3, #0]
	   									SD_Sensor_write();                   // Write Sensor Buffer to SD card
 800174a:	f002 f82f 	bl	80037ac <SD_Sensor_write>
		                                     if (USB_Present_ == 1)          // If USB attachment detected here via EXTI_5 int
 800174e:	782b      	ldrb	r3, [r5, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d0de      	beq.n	8001712 <main+0xd2>
		            						 else if (FATAL_Error == 1)                      // Triggered from Error_Handler
 8001754:	4b29      	ldr	r3, [pc, #164]	; (80017fc <main+0x1bc>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d0e3      	beq.n	8001724 <main+0xe4>
							 Pros_state = LP_STOP;                       // Return to Low Power Mode Data collection
 800175c:	2301      	movs	r3, #1
 800175e:	e7e5      	b.n	800172c <main+0xec>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <main+0x1c8>)
 8001762:	2204      	movs	r2, #4
 8001764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							ALL_LED_OFF();
 8001768:	f7ff ff1e 	bl	80015a8 <ALL_LED_OFF>
							Shut_Down_SD();
 800176c:	f000 fe56 	bl	800241c <Shut_Down_SD>
							Reset_Variables_for_LowBattery();
 8001770:	f000 fc4a 	bl	8002008 <Reset_Variables_for_LowBattery>
							Prepare_Goto_Dormant_Mode();
 8001774:	f000 fc3e 	bl	8001ff4 <Prepare_Goto_Dormant_Mode>
							 Pros_state = Dormant_Idle_Stop;                       // Stay Dormant Mode if no external events
 8001778:	2306      	movs	r3, #6
 800177a:	e7d7      	b.n	800172c <main+0xec>
						   RED_LED_ONLY();
 800177c:	f7ff ff2c 	bl	80015d8 <RED_LED_ONLY>
						   FATFS_Logstart_Delete();
 8001780:	f000 fcfe 	bl	8002180 <FATFS_Logstart_Delete>
						   SD_write_Flag = 0;
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <main+0x1c0>)
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_DisableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8001786:	4a21      	ldr	r2, [pc, #132]	; (800180c <main+0x1cc>)
						   Data_log_Start_Resume=0;
 8001788:	2600      	movs	r6, #0
						   SD_write_Flag = 0;
 800178a:	701e      	strb	r6, [r3, #0]
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <main+0x1c8>)
						   Data_log_Start_Resume=0;
 800178e:	f888 6000 	strb.w	r6, [r8]
 8001792:	f04f 0904 	mov.w	r9, #4
 8001796:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
 800179a:	6893      	ldr	r3, [r2, #8]
 800179c:	f023 0302 	bic.w	r3, r3, #2
 80017a0:	6093      	str	r3, [r2, #8]
						   SD_POWER_OFF();
 80017a2:	f7ff ff4c 	bl	800163e <SD_POWER_OFF>
 80017a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017ac:	64fb      	str	r3, [r7, #76]	; 0x4c
	                        EnterStop();   // Enter Stop Mode
 80017ae:	f002 fe75 	bl	800449c <EnterStop>
						if (USB_Present_ == 1)                     // After detecting USB attachment via EXTI_5 int
 80017b2:	782b      	ldrb	r3, [r5, #0]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d1df      	bne.n	8001778 <main+0x138>
						 Pros_state = USB_MSC_VCP_Mode;               // Next State USB_MSC_Mode Mode
 80017b8:	f884 9000 	strb.w	r9, [r4]
						 USB_Present_ = 0;                           // Reset Flag to avoid looping
 80017bc:	702e      	strb	r6, [r5, #0]
												 {
												 Pros_state = USB_MSC_VCP_Mode;               // Next State USB_MSC_Mode Mode
												 USB_Present_ = 0;                           // Reset Flag to avoid looping
												 SD_POWER_ON();               				// Power on SD CARD
 80017be:	f7ff ff3d 	bl	800163c <SD_POWER_ON>
 80017c2:	e78b      	b.n	80016dc <main+0x9c>
						USB_Init_Start();            // Initialize USB and Stay USB mode as long as USB cable connected
 80017c4:	f001 ff84 	bl	80036d0 <USB_Init_Start>
  					    break;
 80017c8:	e788      	b.n	80016dc <main+0x9c>
					  	                        EnterStop();   // Enter Stop Mode
 80017ca:	f002 fe67 	bl	800449c <EnterStop>
												if (USB_Present_ == 1)                     // After detecting USB attachment via EXTI_5 int
 80017ce:	782b      	ldrb	r3, [r5, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d1d1      	bne.n	8001778 <main+0x138>
												 Pros_state = USB_MSC_VCP_Mode;               // Next State USB_MSC_Mode Mode
 80017d4:	2304      	movs	r3, #4
 80017d6:	7023      	strb	r3, [r4, #0]
												 USB_Present_ = 0;                           // Reset Flag to avoid looping
 80017d8:	2300      	movs	r3, #0
 80017da:	702b      	strb	r3, [r5, #0]
 80017dc:	e7ef      	b.n	80017be <main+0x17e>
 80017de:	bf00      	nop
 80017e0:	20008658 	.word	0x20008658
 80017e4:	40002800 	.word	0x40002800
 80017e8:	20000000 	.word	0x20000000
 80017ec:	40021000 	.word	0x40021000
 80017f0:	0800d934 	.word	0x0800d934
 80017f4:	2000896c 	.word	0x2000896c
 80017f8:	200005a4 	.word	0x200005a4
 80017fc:	20008cf8 	.word	0x20008cf8
 8001800:	200086f0 	.word	0x200086f0
 8001804:	20008cd4 	.word	0x20008cd4
 8001808:	e000e100 	.word	0xe000e100
 800180c:	40009400 	.word	0x40009400
 8001810:	200086e8 	.word	0x200086e8
 8001814:	00000000 	.word	0x00000000

08001818 <LPTIM2_IRQHandler>:
				}

}

void LPTIM2_IRQHandler(void)   // Response of 10ms LPTIM interrupt
{
 8001818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return (READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == (LPTIM_ISR_ARRM));
 800181c:	4bc2      	ldr	r3, [pc, #776]	; (8001b28 <LPTIM2_IRQHandler+0x310>)
 800181e:	ed2d 8b04 	vpush	{d8-d9}
 8001822:	681b      	ldr	r3, [r3, #0]
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)	// auto reload match interrupt has occured
 8001824:	079b      	lsls	r3, r3, #30
{
 8001826:	b082      	sub	sp, #8
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)	// auto reload match interrupt has occured
 8001828:	f140 815c 	bpl.w	8001ae4 <LPTIM2_IRQHandler+0x2cc>
	{




		if (Data_log_Start_Resume == 1)   // Sensor Start Flag from VCP command / FATFS SD card file
 800182c:	4bbf      	ldr	r3, [pc, #764]	; (8001b2c <LPTIM2_IRQHandler+0x314>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	f040 8152 	bne.w	8001ada <LPTIM2_IRQHandler+0x2c2>
		{



					angle_eq=30;
 8001836:	4bbe      	ldr	r3, [pc, #760]	; (8001b30 <LPTIM2_IRQHandler+0x318>)
 8001838:	4abe      	ldr	r2, [pc, #760]	; (8001b34 <LPTIM2_IRQHandler+0x31c>)
 800183a:	601a      	str	r2, [r3, #0]
					angle_now=knee_angle();
 800183c:	f002 fd08 	bl	8004250 <knee_angle>

					/* velocity calculation*/
					angular_velocity = (float) ((float) 2*(angle_now - angle_old)+(float) (2*tau-T)*old_angular_velocity) /(float) (T+2*tau);
 8001840:	4bbd      	ldr	r3, [pc, #756]	; (8001b38 <LPTIM2_IRQHandler+0x320>)
 8001842:	4abe      	ldr	r2, [pc, #760]	; (8001b3c <LPTIM2_IRQHandler+0x324>)
 8001844:	edd3 6a00 	vldr	s13, [r3]
 8001848:	edd2 5a00 	vldr	s11, [r2]
 800184c:	49bc      	ldr	r1, [pc, #752]	; (8001b40 <LPTIM2_IRQHandler+0x328>)
 800184e:	48bd      	ldr	r0, [pc, #756]	; (8001b44 <LPTIM2_IRQHandler+0x32c>)
 8001850:	ed91 6a00 	vldr	s12, [r1]
 8001854:	ed90 5a00 	vldr	s10, [r0]
					angle_now=knee_angle();
 8001858:	4cbb      	ldr	r4, [pc, #748]	; (8001b48 <LPTIM2_IRQHandler+0x330>)
					angular_velocity = (float) ((float) 2*(angle_now - angle_old)+(float) (2*tau-T)*old_angular_velocity) /(float) (T+2*tau);
 800185a:	4dbc      	ldr	r5, [pc, #752]	; (8001b4c <LPTIM2_IRQHandler+0x334>)
					angle_now=knee_angle();
 800185c:	ed84 0a00 	vstr	s0, [r4]
					angular_velocity = (float) ((float) 2*(angle_now - angle_old)+(float) (2*tau-T)*old_angular_velocity) /(float) (T+2*tau);
 8001860:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8001864:	eeb0 7a66 	vmov.f32	s14, s13
 8001868:	ee95 7aa7 	vfnms.f32	s14, s11, s15
 800186c:	4692      	mov	sl, r2
 800186e:	4699      	mov	r9, r3
 8001870:	ee30 6a46 	vsub.f32	s12, s0, s12
 8001874:	ee27 7a05 	vmul.f32	s14, s14, s10
 8001878:	eee5 6aa7 	vfma.f32	s13, s11, s15
 800187c:	f8df 833c 	ldr.w	r8, [pc, #828]	; 8001bbc <LPTIM2_IRQHandler+0x3a4>
 8001880:	4eb3      	ldr	r6, [pc, #716]	; (8001b50 <LPTIM2_IRQHandler+0x338>)
					old_angular_velocity = (float) angular_velocity;
					angle_old = (float) angle_now;
 8001882:	ed81 0a00 	vstr	s0, [r1]
					angular_velocity = (float) ((float) 2*(angle_now - angle_old)+(float) (2*tau-T)*old_angular_velocity) /(float) (T+2*tau);
 8001886:	eea6 7a27 	vfma.f32	s14, s12, s15
 800188a:	4fb2      	ldr	r7, [pc, #712]	; (8001b54 <LPTIM2_IRQHandler+0x33c>)




						  	  if(angle_now>=0 && angle_now<=50 )
 800188c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
					angular_velocity = (float) ((float) 2*(angle_now - angle_old)+(float) (2*tau-T)*old_angular_velocity) /(float) (T+2*tau);
 8001890:	ee87 6a26 	vdiv.f32	s12, s14, s13
						  	  if(angle_now>=0 && angle_now<=50 )
 8001894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					angular_velocity = (float) ((float) 2*(angle_now - angle_old)+(float) (2*tau-T)*old_angular_velocity) /(float) (T+2*tau);
 8001898:	ed85 6a00 	vstr	s12, [r5]
					old_angular_velocity = (float) angular_velocity;
 800189c:	ed80 6a00 	vstr	s12, [r0]
 80018a0:	eeb0 8a67 	vmov.f32	s16, s15
 80018a4:	eddf 9aac 	vldr	s19, [pc, #688]	; 8001b58 <LPTIM2_IRQHandler+0x340>
						  	  if(angle_now>=0 && angle_now<=50 )
 80018a8:	f2c0 8127 	blt.w	8001afa <LPTIM2_IRQHandler+0x2e2>
 80018ac:	eddf 7aab 	vldr	s15, [pc, #684]	; 8001b5c <LPTIM2_IRQHandler+0x344>
 80018b0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	f200 811f 	bhi.w	8001afa <LPTIM2_IRQHandler+0x2e2>
						  	  {	GREEN_LED_ONLY();
 80018bc:	f7ff fe80 	bl	80015c0 <GREEN_LED_ONLY>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80018c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018c4:	f8c8 3018 	str.w	r3, [r8, #24]
							  	LL_GPIO_SetOutputPin(ENC1_CS_GPIO_PORT, LL_GPIO_PIN_10);

							  	SetAngle= 25+15*sin(i_deg*3.14/180);//(float) (25+10*sin((float) i*3.1416/180/2));
 80018c8:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8001bc0 <LPTIM2_IRQHandler+0x3a8>
 80018cc:	edd8 8a00 	vldr	s17, [r8]
 80018d0:	ee18 0a90 	vmov	r0, s17
 80018d4:	f7fe fe38 	bl	8000548 <__aeabi_f2d>
 80018d8:	a391      	add	r3, pc, #580	; (adr r3, 8001b20 <LPTIM2_IRQHandler+0x308>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7fe fe87 	bl	80005f0 <__aeabi_dmul>
 80018e2:	2200      	movs	r2, #0
 80018e4:	4b9e      	ldr	r3, [pc, #632]	; (8001b60 <LPTIM2_IRQHandler+0x348>)
 80018e6:	f7fe ffad 	bl	8000844 <__aeabi_ddiv>
 80018ea:	ec41 0b10 	vmov	d0, r0, r1
 80018ee:	f00a ffbb 	bl	800c868 <sin>
 80018f2:	2200      	movs	r2, #0
 80018f4:	ec51 0b10 	vmov	r0, r1, d0
 80018f8:	4b9a      	ldr	r3, [pc, #616]	; (8001b64 <LPTIM2_IRQHandler+0x34c>)
 80018fa:	f7fe fe79 	bl	80005f0 <__aeabi_dmul>
 80018fe:	2200      	movs	r2, #0
 8001900:	4b99      	ldr	r3, [pc, #612]	; (8001b68 <LPTIM2_IRQHandler+0x350>)
 8001902:	f7fe fcc3 	bl	800028c <__adddf3>
 8001906:	f7ff f935 	bl	8000b74 <__aeabi_d2f>

									if(i_deg==360)
 800190a:	eddf 7a98 	vldr	s15, [pc, #608]	; 8001b6c <LPTIM2_IRQHandler+0x354>
							  	SetAngle= 25+15*sin(i_deg*3.14/180);//(float) (25+10*sin((float) i*3.1416/180/2));
 800190e:	6030      	str	r0, [r6, #0]
									if(i_deg==360)
 8001910:	eef4 8a67 	vcmp.f32	s17, s15
 8001914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
									{
										i_deg=0;
									}
									else
									{
										i_deg=i_deg+4;}
 8001918:	bf1b      	ittet	ne
 800191a:	eef1 7a00 	vmovne.f32	s15, #16	; 0x40800000  4.0
 800191e:	ee78 8aa7 	vaddne.f32	s17, s17, s15
										i_deg=0;
 8001922:	edc8 9a00 	vstreq	s19, [r8]
										i_deg=i_deg+4;}
 8001926:	edc8 8a00 	vstrne	s17, [r8]

							  	angle_now=knee_angle();
 800192a:	f002 fc91 	bl	8004250 <knee_angle>
								KneeError=SetAngle-angle_now;
 800192e:	edd6 7a00 	vldr	s15, [r6]
							  	angle_now=knee_angle();
 8001932:	ed84 0a00 	vstr	s0, [r4]
								KneeError=SetAngle-angle_now;
 8001936:	4b8e      	ldr	r3, [pc, #568]	; (8001b70 <LPTIM2_IRQHandler+0x358>)




								 /*Practical diff*/
								angular_velocity_d = (float) ((float) 2*(SetAngle - angle_now)+(float) (2*tau-T)*old_angular_velocity_d) /(float) (T+2*tau);
 8001938:	edd9 6a00 	vldr	s13, [r9]
 800193c:	ed9a 7a00 	vldr	s14, [sl]
 8001940:	4a8c      	ldr	r2, [pc, #560]	; (8001b74 <LPTIM2_IRQHandler+0x35c>)
								KneeError=SetAngle-angle_now;
 8001942:	ee37 0ac0 	vsub.f32	s0, s15, s0
								Con_d=(KneeError-KneeError_old)/512;
 8001946:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8001b78 <LPTIM2_IRQHandler+0x360>
								KneeError=SetAngle-angle_now;
 800194a:	ed83 0a00 	vstr	s0, [r3]
								Con_d=(KneeError-KneeError_old)/512;
 800194e:	4b8b      	ldr	r3, [pc, #556]	; (8001b7c <LPTIM2_IRQHandler+0x364>)
 8001950:	edd3 8a00 	vldr	s17, [r3]
								KneeError_old=KneeError;
 8001954:	ed83 0a00 	vstr	s0, [r3]
								integral=integral+KneeError;
 8001958:	4b89      	ldr	r3, [pc, #548]	; (8001b80 <LPTIM2_IRQHandler+0x368>)
 800195a:	ed93 9a00 	vldr	s18, [r3]
								Con_d=(KneeError-KneeError_old)/512;
 800195e:	ee70 8a68 	vsub.f32	s17, s0, s17
								integral=integral+KneeError;
 8001962:	ee30 9a09 	vadd.f32	s18, s0, s18
								Con_d=(KneeError-KneeError_old)/512;
 8001966:	ee68 8aa7 	vmul.f32	s17, s17, s15
								angular_velocity_d = (float) ((float) 2*(SetAngle - angle_now)+(float) (2*tau-T)*old_angular_velocity_d) /(float) (T+2*tau);
 800196a:	eef0 7a66 	vmov.f32	s15, s13
								integral=integral+KneeError;
 800196e:	ed83 9a00 	vstr	s18, [r3]
								angular_velocity_d = (float) ((float) 2*(SetAngle - angle_now)+(float) (2*tau-T)*old_angular_velocity_d) /(float) (T+2*tau);
 8001972:	eed7 7a08 	vfnms.f32	s15, s14, s16
 8001976:	4b83      	ldr	r3, [pc, #524]	; (8001b84 <LPTIM2_IRQHandler+0x36c>)
 8001978:	ed93 6a00 	vldr	s12, [r3]
								Con_d=(KneeError-KneeError_old)/512;
 800197c:	edc7 8a00 	vstr	s17, [r7]
								angular_velocity_d = (float) ((float) 2*(SetAngle - angle_now)+(float) (2*tau-T)*old_angular_velocity_d) /(float) (T+2*tau);
 8001980:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001984:	eee7 6a08 	vfma.f32	s13, s14, s16
 8001988:	eee0 7a08 	vfma.f32	s15, s0, s16
//								        //anti-windup
//								        if(fabs(Ki*integral)>integral_max){
//								            integral=integral*integral_max/fabs(integral);
//								        }
//
								CST_CMD_EPOS= -(kp*KneeError+kI*integral+kd*Con_d);//PID controller (Kp*KneeError+Ki*integral+Kd*Con_d);
 800198c:	ee10 0a10 	vmov	r0, s0
								angular_velocity_d = (float) ((float) 2*(SetAngle - angle_now)+(float) (2*tau-T)*old_angular_velocity_d) /(float) (T+2*tau);
 8001990:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001994:	ed82 7a00 	vstr	s14, [r2]
								diff_part=angular_velocity_d-old_angular_velocity_d;
 8001998:	ee37 7a46 	vsub.f32	s14, s14, s12
 800199c:	4a7a      	ldr	r2, [pc, #488]	; (8001b88 <LPTIM2_IRQHandler+0x370>)
 800199e:	ed82 7a00 	vstr	s14, [r2]
								old_angular_velocity_d = (float) angular_velocity;
 80019a2:	682a      	ldr	r2, [r5, #0]
 80019a4:	601a      	str	r2, [r3, #0]
								CST_CMD_EPOS= -(kp*KneeError+kI*integral+kd*Con_d);//PID controller (Kp*KneeError+Ki*integral+Kd*Con_d);
 80019a6:	f7fe fdcf 	bl	8000548 <__aeabi_f2d>
 80019aa:	2200      	movs	r2, #0
 80019ac:	4b77      	ldr	r3, [pc, #476]	; (8001b8c <LPTIM2_IRQHandler+0x374>)
 80019ae:	f7fe fe1f 	bl	80005f0 <__aeabi_dmul>
 80019b2:	ee69 7a29 	vmul.f32	s15, s18, s19
 80019b6:	4680      	mov	r8, r0
 80019b8:	ee17 0a90 	vmov	r0, s15
 80019bc:	4689      	mov	r9, r1
 80019be:	f7fe fdc3 	bl	8000548 <__aeabi_f2d>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4640      	mov	r0, r8
 80019c8:	4649      	mov	r1, r9
 80019ca:	f7fe fc5f 	bl	800028c <__adddf3>
 80019ce:	4680      	mov	r8, r0
 80019d0:	ee18 0a90 	vmov	r0, s17
 80019d4:	4689      	mov	r9, r1
 80019d6:	f7fe fdb7 	bl	8000548 <__aeabi_f2d>
 80019da:	2200      	movs	r2, #0
 80019dc:	4b6c      	ldr	r3, [pc, #432]	; (8001b90 <LPTIM2_IRQHandler+0x378>)
 80019de:	f7fe fe07 	bl	80005f0 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4640      	mov	r0, r8
 80019e8:	4649      	mov	r1, r9
 80019ea:	f7fe fc4f 	bl	800028c <__adddf3>
 80019ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7ff f896 	bl	8000b24 <__aeabi_d2iz>
//							  	CST_CMD_EPOS= -(angle_eq-angle_now)*30;


						  		if (CST_CMD_EPOS>=max_CST_CMD_EPOS)
 80019f8:	f240 2325 	movw	r3, #549	; 0x225
 80019fc:	4298      	cmp	r0, r3
 80019fe:	4b65      	ldr	r3, [pc, #404]	; (8001b94 <LPTIM2_IRQHandler+0x37c>)
 8001a00:	dd75      	ble.n	8001aee <LPTIM2_IRQHandler+0x2d6>
						  		{
						  			CST_CMD_EPOS=max_CST_CMD_EPOS;
 8001a02:	f240 2226 	movw	r2, #550	; 0x226
 8001a06:	601a      	str	r2, [r3, #0]
						  			CST_CMD_EPOS=-max_CST_CMD_EPOS;
						  		}
						  		else
						  			CST_CMD_EPOS=CST_CMD_EPOS;
//						  		EPOS4_enable(CAN_ID);
						  		EPOS4_CST_apply_torque(CAN_ID,CST_CMD_EPOS); //100 means 10% +ve is extension -ve is flextion
 8001a08:	6819      	ldr	r1, [r3, #0]
						  	  }
						  	  else
						  	  {LL_GPIO_ResetOutputPin(ENC1_CS_GPIO_PORT, LL_GPIO_PIN_10);
						  		RED_LED_ONLY();
						  		CST_CMD_EPOS=0;
						  		EPOS4_CST_apply_torque(CAN_ID,0); //100 means 10%
 8001a0a:	4b63      	ldr	r3, [pc, #396]	; (8001b98 <LPTIM2_IRQHandler+0x380>)
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	f7ff fb2b 	bl	8001068 <EPOS4_CST_apply_torque>
						  	  }


//			LL_GPIO_SetOutputPin(ENC1_CS_GPIO_PORT, LL_GPIO_PIN_10);

			F_Sensor_ADC_Store();
 8001a12:	f001 fa0b 	bl	8002e2c <F_Sensor_ADC_Store>
//		    BSbuffer[s_flag].marking_sw[Sub_cnt]=(int16_t) (LL_GPIO_IsInputPinSet(GPIOA,LL_GPIO_PIN_10));
//			BSbuffer[s_flag].marking_sw[Sub_cnt]=13;
			Mag_Enc1_Store();
 8001a16:	f002 fb51 	bl	80040bc <Mag_Enc1_Store>
			Mag_Enc2_Store();
 8001a1a:	f002 fb95 	bl	8004148 <Mag_Enc2_Store>
			MPU_9D_store_IMU1_SPI1();
 8001a1e:	f001 ff33 	bl	8003888 <MPU_9D_store_IMU1_SPI1>
			MPU_9D_store_IMU2_SPI1(); // create similar for IMU2
 8001a22:	f001 ffa3 	bl	800396c <MPU_9D_store_IMU2_SPI1>
//			MPU_9D_store_IMU3_SPI2(1,1,1,1,1,1);

			MPU_9D_store_IMU3_SPI2(angle_now*100,angular_velocity,SetAngle*100,CST_CMD_EPOS,diff_part,Con_d);
 8001a26:	ed96 7a00 	vldr	s14, [r6]
 8001a2a:	edd4 7a00 	vldr	s15, [r4]
 8001a2e:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8001b9c <LPTIM2_IRQHandler+0x384>
 8001a32:	4b55      	ldr	r3, [pc, #340]	; (8001b88 <LPTIM2_IRQHandler+0x370>)
 8001a34:	ed95 6a00 	vldr	s12, [r5]
 8001a38:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001a3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a40:	edd7 6a00 	vldr	s13, [r7]
 8001a44:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8001a48:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8001a4c:	edcd 6a01 	vstr	s13, [sp, #4]
 8001a50:	edd3 6a00 	vldr	s13, [r3]
 8001a54:	4b4f      	ldr	r3, [pc, #316]	; (8001b94 <LPTIM2_IRQHandler+0x37c>)
 8001a56:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8001a5a:	ee17 2a10 	vmov	r2, s14
 8001a5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a62:	eebd 7ac6 	vcvt.s32.f32	s14, s12
 8001a66:	edcd 6a00 	vstr	s13, [sp]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	ee17 1a10 	vmov	r1, s14
 8001a70:	ee17 0a90 	vmov	r0, s15
 8001a74:	f002 f8ec 	bl	8003c50 <MPU_9D_store_IMU3_SPI2>
			MPU_9D_store_IMU4_SPI3(); // create similar for IMU5
 8001a78:	f001 ffec 	bl	8003a54 <MPU_9D_store_IMU4_SPI3>
			MPU_9D_store_IMU5_SPI3();
 8001a7c:	f002 f86e 	bl	8003b5c <MPU_9D_store_IMU5_SPI3>

			if (Sub_cnt == 5)
 8001a80:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <LPTIM2_IRQHandler+0x388>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2a05      	cmp	r2, #5
 8001a86:	d118      	bne.n	8001aba <LPTIM2_IRQHandler+0x2a2>
			{
				//BSbuffer[s_flag].Blank1 = (uint8_t) (LL_GPIO_IsInputPinSet(GPIOA,LL_GPIO_PIN_10));
				BSbuffer[s_flag].RTC_Time = (uint32_t)(RTC->TR & 0x007F7F7F);
 8001a88:	4d46      	ldr	r5, [pc, #280]	; (8001ba4 <LPTIM2_IRQHandler+0x38c>)
 8001a8a:	4c47      	ldr	r4, [pc, #284]	; (8001ba8 <LPTIM2_IRQHandler+0x390>)
 8001a8c:	7828      	ldrb	r0, [r5, #0]
 8001a8e:	4947      	ldr	r1, [pc, #284]	; (8001bac <LPTIM2_IRQHandler+0x394>)
 8001a90:	6822      	ldr	r2, [r4, #0]
 8001a92:	eb01 3080 	add.w	r0, r1, r0, lsl #14
 8001a96:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 8001a9a:	f643 76f8 	movw	r6, #16376	; 0x3ff8
 8001a9e:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8001aa2:	5182      	str	r2, [r0, r6]
				BSbuffer[s_flag].RTC_Date= (uint32_t)(RTC->DR & 0x00FFFF3F);
 8001aa4:	7828      	ldrb	r0, [r5, #0]
 8001aa6:	6862      	ldr	r2, [r4, #4]
 8001aa8:	eb01 3180 	add.w	r1, r1, r0, lsl #14
 8001aac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001ab0:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 8001ab4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001ab8:	500a      	str	r2, [r1, r0]

			}

// Switching Buffer code starts here
			if(Sub_cnt==Highest_sensor_count)   // Total samples to be stored in a 16KB buffer
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2ab9      	cmp	r2, #185	; 0xb9
 8001abe:	d129      	bne.n	8001b14 <LPTIM2_IRQHandler+0x2fc>
			{
				Sub_cnt=0;           // Reset Counter of sensor element
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	6019      	str	r1, [r3, #0]
				SD_write_Flag = 1;   // Flag set to write filled buffer content
 8001ac4:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <LPTIM2_IRQHandler+0x398>)
 8001ac6:	483b      	ldr	r0, [pc, #236]	; (8001bb4 <LPTIM2_IRQHandler+0x39c>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
				// Changing Buffer
				if (s_flag==0)       // if current storgae_buffer was 0
 8001acc:	4b35      	ldr	r3, [pc, #212]	; (8001ba4 <LPTIM2_IRQHandler+0x38c>)
 8001ace:	781c      	ldrb	r4, [r3, #0]
 8001ad0:	f004 05ff 	and.w	r5, r4, #255	; 0xff
 8001ad4:	b9dc      	cbnz	r4, 8001b0e <LPTIM2_IRQHandler+0x2f6>
				{
					w_flag=0;            // write_buffer to be saved in SD card = 0
 8001ad6:	7005      	strb	r5, [r0, #0]
					s_flag=1;            // current storgae_buffer is set 1
 8001ad8:	701a      	strb	r2, [r3, #0]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8001ada:	4a13      	ldr	r2, [pc, #76]	; (8001b28 <LPTIM2_IRQHandler+0x310>)
 8001adc:	6853      	ldr	r3, [r2, #4]
 8001ade:	f043 0302 	orr.w	r3, r3, #2
 8001ae2:	6053      	str	r3, [r2, #4]
		}  // Data log at timer interrupt ends here

		LL_LPTIM_ClearFLAG_ARRM(LPTIM2); // Clear ARR interrupt flag
	}

}
 8001ae4:	b002      	add	sp, #8
 8001ae6:	ecbd 8b04 	vpop	{d8-d9}
 8001aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
								CST_CMD_EPOS= -(kp*KneeError+kI*integral+kd*Con_d);//PID controller (Kp*KneeError+Ki*integral+Kd*Con_d);
 8001aee:	4a32      	ldr	r2, [pc, #200]	; (8001bb8 <LPTIM2_IRQHandler+0x3a0>)
 8001af0:	4290      	cmp	r0, r2
 8001af2:	bfac      	ite	ge
 8001af4:	6018      	strge	r0, [r3, #0]
 8001af6:	601a      	strlt	r2, [r3, #0]
 8001af8:	e786      	b.n	8001a08 <LPTIM2_IRQHandler+0x1f0>
  WRITE_REG(GPIOx->BRR, PinMask);
 8001afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001afe:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
						  		RED_LED_ONLY();
 8001b02:	f7ff fd69 	bl	80015d8 <RED_LED_ONLY>
						  		CST_CMD_EPOS=0;
 8001b06:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <LPTIM2_IRQHandler+0x37c>)
 8001b08:	2100      	movs	r1, #0
 8001b0a:	6019      	str	r1, [r3, #0]
 8001b0c:	e77d      	b.n	8001a0a <LPTIM2_IRQHandler+0x1f2>
					w_flag=1;           // write_buffer to be saved in SD card = 1
 8001b0e:	7002      	strb	r2, [r0, #0]
					s_flag=0;           // current storgae_buffer is set 0
 8001b10:	7019      	strb	r1, [r3, #0]
 8001b12:	e7e2      	b.n	8001ada <LPTIM2_IRQHandler+0x2c2>
				Sub_cnt++;              // Increment Counter of sensor element
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	3201      	adds	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e7de      	b.n	8001ada <LPTIM2_IRQHandler+0x2c2>
 8001b1c:	f3af 8000 	nop.w
 8001b20:	51eb851f 	.word	0x51eb851f
 8001b24:	40091eb8 	.word	0x40091eb8
 8001b28:	40009400 	.word	0x40009400
 8001b2c:	200086e8 	.word	0x200086e8
 8001b30:	200005a8 	.word	0x200005a8
 8001b34:	41f00000 	.word	0x41f00000
 8001b38:	20000004 	.word	0x20000004
 8001b3c:	2000000c 	.word	0x2000000c
 8001b40:	200005b0 	.word	0x200005b0
 8001b44:	200005c4 	.word	0x200005c4
 8001b48:	200005ac 	.word	0x200005ac
 8001b4c:	200005b4 	.word	0x200005b4
 8001b50:	2000059c 	.word	0x2000059c
 8001b54:	2000058c 	.word	0x2000058c
 8001b58:	00000000 	.word	0x00000000
 8001b5c:	42480000 	.word	0x42480000
 8001b60:	40668000 	.word	0x40668000
 8001b64:	402e0000 	.word	0x402e0000
 8001b68:	40390000 	.word	0x40390000
 8001b6c:	43b40000 	.word	0x43b40000
 8001b70:	20000590 	.word	0x20000590
 8001b74:	200005b8 	.word	0x200005b8
 8001b78:	3b000000 	.word	0x3b000000
 8001b7c:	20000594 	.word	0x20000594
 8001b80:	200005c0 	.word	0x200005c0
 8001b84:	200005c8 	.word	0x200005c8
 8001b88:	200005bc 	.word	0x200005bc
 8001b8c:	40398000 	.word	0x40398000
 8001b90:	3fe00000 	.word	0x3fe00000
 8001b94:	20000588 	.word	0x20000588
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	42c80000 	.word	0x42c80000
 8001ba0:	200005a0 	.word	0x200005a0
 8001ba4:	200005cc 	.word	0x200005cc
 8001ba8:	40002800 	.word	0x40002800
 8001bac:	20000618 	.word	0x20000618
 8001bb0:	200086f0 	.word	0x200086f0
 8001bb4:	20000010 	.word	0x20000010
 8001bb8:	fffffdda 	.word	0xfffffdda
 8001bbc:	48000400 	.word	0x48000400
 8001bc0:	20000008 	.word	0x20000008

08001bc4 <EXTI9_5_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine));
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <EXTI9_5_IRQHandler+0x18>)
 8001bc6:	695a      	ldr	r2, [r3, #20]

void EXTI9_5_IRQHandler(void)       // Interrupt from USB connectivity PIN PA9
{
if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8001bc8:	0592      	lsls	r2, r2, #22
 8001bca:	d505      	bpl.n	8001bd8 <EXTI9_5_IRQHandler+0x14>
{
USB_Present_=1;         // USB present
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <EXTI9_5_IRQHandler+0x1c>)
 8001bce:	2101      	movs	r1, #1
 8001bd0:	7011      	strb	r1, [r2, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd6:	615a      	str	r2, [r3, #20]
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40010400 	.word	0x40010400
 8001be0:	200005a4 	.word	0x200005a4

08001be4 <NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001be4:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001be8:	4905      	ldr	r1, [pc, #20]	; (8001c00 <NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001bec:	68ca      	ldr	r2, [r1, #12]
 8001bee:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60cb      	str	r3, [r1, #12]
 8001bf6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8001bfa:	bf00      	nop
 8001bfc:	e7fd      	b.n	8001bfa <NVIC_SystemReset+0x16>
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00
 8001c04:	05fa0004 	.word	0x05fa0004

08001c08 <LL_ADC_REG_StartConversion>:
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c08:	6883      	ldr	r3, [r0, #8]
 8001c0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	6083      	str	r3, [r0, #8]
 8001c18:	4770      	bx	lr
	...

08001c1c <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <LL_AHB2_GRP1_EnableClock+0x18>)
 8001c1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c20:	4302      	orrs	r2, r0
 8001c22:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8001c26:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c28:	4018      	ands	r0, r3
 8001c2a:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001c2c:	9b01      	ldr	r3, [sp, #4]
}
 8001c2e:	b002      	add	sp, #8
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000

08001c38 <LL_APB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <LL_APB1_GRP1_EnableClock+0x18>)
 8001c3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c3c:	4302      	orrs	r2, r0
 8001c3e:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 8001c42:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c44:	4018      	ands	r0, r3
 8001c46:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001c48:	9b01      	ldr	r3, [sp, #4]
}
 8001c4a:	b002      	add	sp, #8
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000

08001c54 <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <LL_APB2_GRP1_EnableClock+0x18>)
 8001c56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 8001c5e:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c60:	4018      	ands	r0, r3
 8001c62:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001c64:	9b01      	ldr	r3, [sp, #4]
}
 8001c66:	b002      	add	sp, #8
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000

08001c70 <LL_GPIO_SetPinMode>:
{
 8001c70:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001c72:	6803      	ldr	r3, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	fa91 f4a1 	rbit	r4, r1
 8001c78:	fab4 f484 	clz	r4, r4
 8001c7c:	fa91 f1a1 	rbit	r1, r1
 8001c80:	2503      	movs	r5, #3
 8001c82:	fab1 f181 	clz	r1, r1
 8001c86:	0064      	lsls	r4, r4, #1
 8001c88:	fa05 f404 	lsl.w	r4, r5, r4
 8001c8c:	0049      	lsls	r1, r1, #1
 8001c8e:	ea23 0304 	bic.w	r3, r3, r4
 8001c92:	fa02 f101 	lsl.w	r1, r2, r1
 8001c96:	4319      	orrs	r1, r3
 8001c98:	6001      	str	r1, [r0, #0]
 8001c9a:	bd30      	pop	{r4, r5, pc}

08001c9c <LL_ADC_REG_SetSequencerRanks>:
{
 8001c9c:	b530      	push	{r4, r5, lr}
 8001c9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ca2:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	f401 7440 	and.w	r4, r1, #768	; 0x300
 8001cae:	40dc      	lsrs	r4, r3
 8001cb0:	3030      	adds	r0, #48	; 0x30
  MODIFY_REG(*preg,
 8001cb2:	f001 011f 	and.w	r1, r1, #31
 8001cb6:	231f      	movs	r3, #31
 8001cb8:	fa03 f501 	lsl.w	r5, r3, r1
 8001cbc:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8001cc0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001cc4:	f1c1 011a 	rsb	r1, r1, #26
 8001cc8:	ea23 0305 	bic.w	r3, r3, r5
 8001ccc:	fa22 f101 	lsr.w	r1, r2, r1
 8001cd0:	4319      	orrs	r1, r3
 8001cd2:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 8001cd6:	bd30      	pop	{r4, r5, pc}

08001cd8 <LL_ADC_SetChannelSamplingTime>:
{
 8001cd8:	b570      	push	{r4, r5, r6, lr}
 8001cda:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001cde:	fa96 f6a6 	rbit	r6, r6
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001ce2:	fab6 f386 	clz	r3, r6
 8001ce6:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 8001cea:	40de      	lsrs	r6, r3
 8001cec:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 8001cee:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8001cf2:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8001cf6:	fa93 f5a3 	rbit	r5, r3
 8001cfa:	fab5 f585 	clz	r5, r5
 8001cfe:	fa93 f3a3 	rbit	r3, r3
 8001d02:	2407      	movs	r4, #7
 8001d04:	fa21 f505 	lsr.w	r5, r1, r5
 8001d08:	fa04 f505 	lsl.w	r5, r4, r5
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8001d14:	40d9      	lsrs	r1, r3
 8001d16:	ea24 0405 	bic.w	r4, r4, r5
 8001d1a:	fa02 f101 	lsl.w	r1, r2, r1
 8001d1e:	4321      	orrs	r1, r4
 8001d20:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 8001d24:	bd70      	pop	{r4, r5, r6, pc}

08001d26 <LL_GPIO_SetAFPin_0_7>:
{
 8001d26:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001d28:	6a03      	ldr	r3, [r0, #32]
 8001d2a:	fa91 f4a1 	rbit	r4, r1
 8001d2e:	fab4 f484 	clz	r4, r4
 8001d32:	fa91 f1a1 	rbit	r1, r1
 8001d36:	250f      	movs	r5, #15
 8001d38:	fab1 f181 	clz	r1, r1
 8001d3c:	00a4      	lsls	r4, r4, #2
 8001d3e:	fa05 f404 	lsl.w	r4, r5, r4
 8001d42:	0089      	lsls	r1, r1, #2
 8001d44:	ea23 0304 	bic.w	r3, r3, r4
 8001d48:	fa02 f101 	lsl.w	r1, r2, r1
 8001d4c:	4319      	orrs	r1, r3
 8001d4e:	6201      	str	r1, [r0, #32]
 8001d50:	bd30      	pop	{r4, r5, pc}

08001d52 <LL_GPIO_SetPinPull>:
{
 8001d52:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001d54:	68c3      	ldr	r3, [r0, #12]
 8001d56:	fa91 f4a1 	rbit	r4, r1
 8001d5a:	fab4 f484 	clz	r4, r4
 8001d5e:	fa91 f1a1 	rbit	r1, r1
 8001d62:	2503      	movs	r5, #3
 8001d64:	fab1 f181 	clz	r1, r1
 8001d68:	0064      	lsls	r4, r4, #1
 8001d6a:	fa05 f404 	lsl.w	r4, r5, r4
 8001d6e:	0049      	lsls	r1, r1, #1
 8001d70:	ea23 0304 	bic.w	r3, r3, r4
 8001d74:	fa02 f101 	lsl.w	r1, r2, r1
 8001d78:	4319      	orrs	r1, r3
 8001d7a:	60c1      	str	r1, [r0, #12]
 8001d7c:	bd30      	pop	{r4, r5, pc}

08001d7e <LL_GPIO_SetPinSpeed.constprop.6>:
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 8001d7e:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001d80:	6882      	ldr	r2, [r0, #8]
 8001d82:	fa91 f3a1 	rbit	r3, r1
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	fa91 f1a1 	rbit	r1, r1
 8001d8e:	2403      	movs	r4, #3
 8001d90:	fab1 f181 	clz	r1, r1
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	fa04 f303 	lsl.w	r3, r4, r3
 8001d9a:	0049      	lsls	r1, r1, #1
 8001d9c:	ea22 0303 	bic.w	r3, r2, r3
 8001da0:	fa04 f101 	lsl.w	r1, r4, r1
 8001da4:	4319      	orrs	r1, r3
 8001da6:	6081      	str	r1, [r0, #8]
 8001da8:	bd10      	pop	{r4, pc}
	...

08001dac <LL_RTC_DATE_GetDay.constprop.8>:
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetDay(RTC_TypeDef *RTCx)
{
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <LL_RTC_DATE_GetDay.constprop.8+0x2c>)
 8001dae:	2030      	movs	r0, #48	; 0x30
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	fa90 f0a0 	rbit	r0, r0
 8001db6:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 8001db8:	fab0 f080 	clz	r0, r0
 8001dbc:	fa92 f2a2 	rbit	r2, r2
 8001dc0:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8001dc4:	fab2 f282 	clz	r2, r2
 8001dc8:	f003 030f 	and.w	r3, r3, #15
 8001dcc:	fa21 f000 	lsr.w	r0, r1, r0
 8001dd0:	40d3      	lsrs	r3, r2
}
 8001dd2:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8001dd6:	4770      	bx	lr
 8001dd8:	40002800 	.word	0x40002800

08001ddc <LL_RTC_DATE_GetMonth.constprop.9>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <LL_RTC_DATE_GetMonth.constprop.9+0x30>)
 8001dde:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	fa90 f0a0 	rbit	r0, r0
 8001de8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 8001dec:	fab0 f080 	clz	r0, r0
 8001df0:	fa92 f2a2 	rbit	r2, r2
 8001df4:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 8001df8:	fab2 f282 	clz	r2, r2
 8001dfc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001e00:	fa21 f000 	lsr.w	r0, r1, r0
 8001e04:	40d3      	lsrs	r3, r2
}
 8001e06:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8001e0a:	4770      	bx	lr
 8001e0c:	40002800 	.word	0x40002800

08001e10 <LL_RTC_DATE_GetYear.constprop.10>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <LL_RTC_DATE_GetYear.constprop.10+0x30>)
 8001e12:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	fa90 f0a0 	rbit	r0, r0
 8001e1c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 8001e20:	fab0 f080 	clz	r0, r0
 8001e24:	fa92 f2a2 	rbit	r2, r2
 8001e28:	f403 0170 	and.w	r1, r3, #15728640	; 0xf00000
 8001e2c:	fab2 f282 	clz	r2, r2
 8001e30:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e34:	fa21 f000 	lsr.w	r0, r1, r0
 8001e38:	40d3      	lsrs	r3, r2
}
 8001e3a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8001e3e:	4770      	bx	lr
 8001e40:	40002800 	.word	0x40002800

08001e44 <LL_RTC_TIME_GetSecond.constprop.11>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 8001e44:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <LL_RTC_TIME_GetSecond.constprop.11+0x2c>)
 8001e46:	2070      	movs	r0, #112	; 0x70
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	fa90 f0a0 	rbit	r0, r0
 8001e4e:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 8001e50:	fab0 f080 	clz	r0, r0
 8001e54:	fa92 f2a2 	rbit	r2, r2
 8001e58:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8001e5c:	fab2 f282 	clz	r2, r2
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	fa21 f000 	lsr.w	r0, r1, r0
 8001e68:	40d3      	lsrs	r3, r2
}
 8001e6a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8001e6e:	4770      	bx	lr
 8001e70:	40002800 	.word	0x40002800

08001e74 <LL_RTC_TIME_GetMinute.constprop.12>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <LL_RTC_TIME_GetMinute.constprop.12+0x30>)
 8001e76:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	fa90 f0a0 	rbit	r0, r0
 8001e80:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 8001e84:	fab0 f080 	clz	r0, r0
 8001e88:	fa92 f2a2 	rbit	r2, r2
 8001e8c:	f403 41e0 	and.w	r1, r3, #28672	; 0x7000
 8001e90:	fab2 f282 	clz	r2, r2
 8001e94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001e98:	fa21 f000 	lsr.w	r0, r1, r0
 8001e9c:	40d3      	lsrs	r3, r2
}
 8001e9e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8001ea2:	4770      	bx	lr
 8001ea4:	40002800 	.word	0x40002800

08001ea8 <LL_RTC_TIME_GetHour.constprop.13>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <LL_RTC_TIME_GetHour.constprop.13+0x30>)
 8001eaa:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	fa90 f0a0 	rbit	r0, r0
 8001eb4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 8001eb8:	fab0 f080 	clz	r0, r0
 8001ebc:	fa92 f2a2 	rbit	r2, r2
 8001ec0:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
 8001ec4:	fab2 f282 	clz	r2, r2
 8001ec8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ecc:	fa21 f000 	lsr.w	r0, r1, r0
 8001ed0:	40d3      	lsrs	r3, r2
}
 8001ed2:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8001ed6:	4770      	bx	lr
 8001ed8:	40002800 	.word	0x40002800

08001edc <Power_on_reset>:

}


void Power_on_reset(void)
{
 8001edc:	b508      	push	{r3, lr}
	  if (*Reset_Ram_Key_Address != Reset_Key_Value)
 8001ede:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <Power_on_reset+0x14>)
 8001ee0:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <Power_on_reset+0x18>)
 8001ee2:	6819      	ldr	r1, [r3, #0]
 8001ee4:	4291      	cmp	r1, r2
 8001ee6:	d002      	beq.n	8001eee <Power_on_reset+0x12>
	  {
	      *Reset_Ram_Key_Address = Reset_Key_Value;
 8001ee8:	601a      	str	r2, [r3, #0]
		   NVIC_SystemReset();
 8001eea:	f7ff fe7b 	bl	8001be4 <NVIC_SystemReset>
 8001eee:	bd08      	pop	{r3, pc}
 8001ef0:	20017ef0 	.word	0x20017ef0
 8001ef4:	deadbeef 	.word	0xdeadbeef

08001ef8 <Configure_Interrupt>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef8:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <Configure_Interrupt+0x2c>)
 8001efa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f00:	041b      	lsls	r3, r3, #16
 8001f02:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
 8001f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001f0c:	60d3      	str	r3, [r2, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <Configure_Interrupt+0x30>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
 8001f1c:	2210      	movs	r2, #16
 8001f1e:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <Shut_Down_USB>:
  * @rmtoll CR2          USV           LL_PWR_DisableVddUSB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableVddUSB(void)
{
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <Shut_Down_USB+0x2c>)
 8001f2e:	6853      	ldr	r3, [r2, #4]
		f_mount(0, "", 0); 		                //  unmount FATFS file (of running sensor storage file)
		FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
}

void Shut_Down_USB(void)
{
 8001f30:	b510      	push	{r4, lr}
 8001f32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

	LL_PWR_DisableVddUSB();                               // Disable VDDUSB supply for USB
	USB_Present_=0;                                      // reset the USB present flag to be set by EXTI interrupt

	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 8001f36:	4c09      	ldr	r4, [pc, #36]	; (8001f5c <Shut_Down_USB+0x30>)
 8001f38:	6053      	str	r3, [r2, #4]
	USB_Present_=0;                                      // reset the USB present flag to be set by EXTI interrupt
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <Shut_Down_USB+0x34>)
 8001f3c:	2200      	movs	r2, #0
	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 8001f3e:	4620      	mov	r0, r4
	USB_Present_=0;                                      // reset the USB present flag to be set by EXTI interrupt
 8001f40:	701a      	strb	r2, [r3, #0]
	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 8001f42:	f007 fb88 	bl	8009656 <USBD_Stop>
	USBD_DeInit(&USBD_Device);               // De-Initialize the device library
 8001f46:	4620      	mov	r0, r4
 8001f48:	f007 fb67 	bl	800961a <USBD_DeInit>
	__HAL_RCC_USB_OTG_FS_CLK_DISABLE();      // Disable USB Clock
 8001f4c:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <Shut_Down_USB+0x38>)
 8001f4e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001f50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f56:	bd10      	pop	{r4, pc}
 8001f58:	40007000 	.word	0x40007000
 8001f5c:	20008700 	.word	0x20008700
 8001f60:	200005a4 	.word	0x200005a4
 8001f64:	40021000 	.word	0x40021000

08001f68 <USB_Clock_Ready>:
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001f68:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <USB_Clock_Ready+0x2c>)
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
}


void USB_Clock_Ready(void)
{
 8001f70:	b082      	sub	sp, #8
 8001f72:	605a      	str	r2, [r3, #4]
  * @rmtoll CR2          USV           LL_PWR_IsEnabledVddUSB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledVddUSB(void)
{
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 8001f74:	685a      	ldr	r2, [r3, #4]
	LL_PWR_EnableVddUSB();                                  // Enable VDDUSB supply for USB
		while(!LL_PWR_IsEnabledVddUSB());                       // Wait for VDDUSB supply to activate
 8001f76:	0552      	lsls	r2, r2, #21
 8001f78:	d5fc      	bpl.n	8001f74 <USB_Clock_Ready+0xc>
		__HAL_RCC_USB_OTG_FS_CLK_ENABLE();     // Enable USB Clock
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <USB_Clock_Ready+0x30>)
 8001f7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f82:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	9b01      	ldr	r3, [sp, #4]
}
 8001f8e:	b002      	add	sp, #8
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40007000 	.word	0x40007000
 8001f98:	40021000 	.word	0x40021000

08001f9c <DFU_Bypass>:
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001f9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
void DFU_Bypass(void)
{

	uint32_t i=0;

    check=LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY);
 8001fa0:	4810      	ldr	r0, [pc, #64]	; (8001fe4 <DFU_Bypass+0x48>)
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8001fa8:	f3c2 2240 	ubfx	r2, r2, #9, #1
{
 8001fac:	b570      	push	{r4, r5, r6, lr}
    check=LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY);
 8001fae:	6002      	str	r2, [r0, #0]
 8001fb0:	691a      	ldr	r2, [r3, #16]
   // if(check == 1)
    //	 CYAN_LED_ONLY();
    while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));  // Wait until USB cable disconnect from Charger
 8001fb2:	0592      	lsls	r2, r2, #22
 8001fb4:	d4fc      	bmi.n	8001fb0 <DFU_Bypass+0x14>
	  if (*LP_Ram_Key_Address != Reset_Key_Value)
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <DFU_Bypass+0x4c>)
 8001fb8:	4c0c      	ldr	r4, [pc, #48]	; (8001fec <DFU_Bypass+0x50>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	42a2      	cmp	r2, r4
 8001fbe:	d010      	beq.n	8001fe2 <DFU_Bypass+0x46>
	  {
	      *LP_Ram_Key_Address = Reset_Key_Value;
 8001fc0:	601c      	str	r4, [r3, #0]
    if(check == 1)
 8001fc2:	b171      	cbz	r1, 8001fe2 <DFU_Bypass+0x46>
 8001fc4:	2505      	movs	r5, #5
 8001fc6:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
    {
	  /* Toggle IO in during 2s (10*200ms) */
	  for(i =0; i<5; i++)
	  {
	 //   LL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
	    LL_mDelay(200);
 8001fca:	20c8      	movs	r0, #200	; 0xc8
 8001fcc:	f006 fe84 	bl	8008cd8 <LL_mDelay>
 8001fd0:	6933      	ldr	r3, [r6, #16]
	    if (LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY))
 8001fd2:	059b      	lsls	r3, r3, #22
 8001fd4:	d503      	bpl.n	8001fde <DFU_Bypass+0x42>
	    {
	    	 *Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <DFU_Bypass+0x54>)
 8001fd8:	601c      	str	r4, [r3, #0]
	    	  NVIC_SystemReset();        // System reset
 8001fda:	f7ff fe03 	bl	8001be4 <NVIC_SystemReset>
	  for(i =0; i<5; i++)
 8001fde:	3d01      	subs	r5, #1
 8001fe0:	d1f3      	bne.n	8001fca <DFU_Bypass+0x2e>
 8001fe2:	bd70      	pop	{r4, r5, r6, pc}
 8001fe4:	20008a88 	.word	0x20008a88
 8001fe8:	20017cf0 	.word	0x20017cf0
 8001fec:	deadbeef 	.word	0xdeadbeef
 8001ff0:	20017ff0 	.word	0x20017ff0

08001ff4 <Prepare_Goto_Dormant_Mode>:
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8001ff4:	4a03      	ldr	r2, [pc, #12]	; (8002004 <Prepare_Goto_Dormant_Mode+0x10>)
 8001ff6:	6893      	ldr	r3, [r2, #8]
 8001ff8:	f023 0302 	bic.w	r3, r3, #2
 8001ffc:	6093      	str	r3, [r2, #8]


void Prepare_Goto_Dormant_Mode(void)
{
	LL_LPTIM_DisableIT_ARRM(LPTIM2);                           // Disable auto reload match interrupt of LPTIM2
	SD_POWER_OFF();               // Power off SD CARD
 8001ffe:	f7ff bb1e 	b.w	800163e <SD_POWER_OFF>
 8002002:	bf00      	nop
 8002004:	40009400 	.word	0x40009400

08002008 <Reset_Variables_for_LowBattery>:
}

void Reset_Variables_for_LowBattery(void)          // Reset all variables needed to Sensor logging in Double Buffer System
{

	SD_write_Flag = 0;
 8002008:	4b01      	ldr	r3, [pc, #4]	; (8002010 <Reset_Variables_for_LowBattery+0x8>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
 800200e:	4770      	bx	lr
 8002010:	200086f0 	.word	0x200086f0

08002014 <GetNextIndex>:

}


int GetNextIndex(char *path)  // Read SD card content to save next value in auto increment format
{
 8002014:	b530      	push	{r4, r5, lr}
 8002016:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
DIR dir;
FILINFO fno;
int i, index = -1;

if (f_opendir(&dir, path) == FR_OK)
 800201a:	4601      	mov	r1, r0
 800201c:	a808      	add	r0, sp, #32
 800201e:	f009 f984 	bl	800b32a <f_opendir>
 8002022:	f04f 34ff 	mov.w	r4, #4294967295
 8002026:	b9e0      	cbnz	r0, 8002062 <GetNextIndex+0x4e>
while(1)
{
  if ((f_readdir(&dir,  &fno) !=  FR_OK) || (fno.fname[0] == 0))
    break;

  if ((strstr(fno.fname, ".BIN") != NULL) && (sscanf(fno.fname, "%d", &i) == 1))   // Searcing for .BIN file and determining highest index
 8002028:	4d10      	ldr	r5, [pc, #64]	; (800206c <GetNextIndex+0x58>)
  if ((f_readdir(&dir,  &fno) !=  FR_OK) || (fno.fname[0] == 0))
 800202a:	a902      	add	r1, sp, #8
 800202c:	a808      	add	r0, sp, #32
 800202e:	f009 f9ca 	bl	800b3c6 <f_readdir>
 8002032:	b9b0      	cbnz	r0, 8002062 <GetNextIndex+0x4e>
 8002034:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002038:	b19b      	cbz	r3, 8002062 <GetNextIndex+0x4e>
  if ((strstr(fno.fname, ".BIN") != NULL) && (sscanf(fno.fname, "%d", &i) == 1))   // Searcing for .BIN file and determining highest index
 800203a:	4629      	mov	r1, r5
 800203c:	f10d 0011 	add.w	r0, sp, #17
 8002040:	f009 fc04 	bl	800b84c <strstr>
 8002044:	2800      	cmp	r0, #0
 8002046:	d0f0      	beq.n	800202a <GetNextIndex+0x16>
 8002048:	aa01      	add	r2, sp, #4
 800204a:	4909      	ldr	r1, [pc, #36]	; (8002070 <GetNextIndex+0x5c>)
 800204c:	f10d 0011 	add.w	r0, sp, #17
 8002050:	f009 fbc8 	bl	800b7e4 <siscanf>
 8002054:	2801      	cmp	r0, #1
 8002056:	d1e8      	bne.n	800202a <GetNextIndex+0x16>
 8002058:	9b01      	ldr	r3, [sp, #4]
 800205a:	429c      	cmp	r4, r3
 800205c:	bfb8      	it	lt
 800205e:	461c      	movlt	r4, r3
 8002060:	e7e3      	b.n	800202a <GetNextIndex+0x16>
    if (i > index) index = i;
}
}
return(index+1);
}
 8002062:	1c60      	adds	r0, r4, #1
 8002064:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8002068:	bd30      	pop	{r4, r5, pc}
 800206a:	bf00      	nop
 800206c:	0800d968 	.word	0x0800d968
 8002070:	0800d961 	.word	0x0800d961

08002074 <Try_FATFS_Mount>:
	return 0;
}

void Try_FATFS_Mount(void)
{
	  if (Fat_mnt_fail == 1)
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <Try_FATFS_Mount+0x44>)
{
 8002076:	b510      	push	{r4, lr}
	  if (Fat_mnt_fail == 1)
 8002078:	681c      	ldr	r4, [r3, #0]
 800207a:	2c01      	cmp	r4, #1
 800207c:	d11a      	bne.n	80020b4 <Try_FATFS_Mount+0x40>
	  {
		  Fat_mnt_fail=0;
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
		  SD_POWER_OFF();
 8002082:	f7ff fadc 	bl	800163e <SD_POWER_OFF>
		  delay_us(10000); // wait 10 msec
 8002086:	f242 7010 	movw	r0, #10000	; 0x2710
 800208a:	f002 f9db 	bl	8004444 <delay_us>
		  SD_POWER_ON();
 800208e:	f7ff fad5 	bl	800163c <SD_POWER_ON>
		  delay_us(1000000); // wait 1 sec
 8002092:	480a      	ldr	r0, [pc, #40]	; (80020bc <Try_FATFS_Mount+0x48>)
 8002094:	f002 f9d6 	bl	8004444 <delay_us>
		  //Retry FATFS link

		  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8002098:	4909      	ldr	r1, [pc, #36]	; (80020c0 <Try_FATFS_Mount+0x4c>)
 800209a:	480a      	ldr	r0, [pc, #40]	; (80020c4 <Try_FATFS_Mount+0x50>)
 800209c:	f009 fa5a 	bl	800b554 <FATFS_LinkDriver>
 80020a0:	b928      	cbnz	r0, 80020ae <Try_FATFS_Mount+0x3a>
		 		{
		 			 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 80020a2:	4622      	mov	r2, r4
 80020a4:	4906      	ldr	r1, [pc, #24]	; (80020c0 <Try_FATFS_Mount+0x4c>)
 80020a6:	4808      	ldr	r0, [pc, #32]	; (80020c8 <Try_FATFS_Mount+0x54>)
 80020a8:	f008 fd82 	bl	800abb0 <f_mount>
 80020ac:	b110      	cbz	r0, 80020b4 <Try_FATFS_Mount+0x40>
		 			 {
		 				Skip_FATFS=1;
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <Try_FATFS_Mount+0x58>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]
 80020b4:	bd10      	pop	{r4, pc}
 80020b6:	bf00      	nop
 80020b8:	200089a0 	.word	0x200089a0
 80020bc:	000f4240 	.word	0x000f4240
 80020c0:	20008a95 	.word	0x20008a95
 80020c4:	0800dbd0 	.word	0x0800dbd0
 80020c8:	20008aa4 	.word	0x20008aa4
 80020cc:	20008cf9 	.word	0x20008cf9

080020d0 <file_reopen_sync>:
	  }

}

void file_reopen_sync(void)
{
 80020d0:	b508      	push	{r3, lr}
	f_close(&MyFile);
 80020d2:	4807      	ldr	r0, [pc, #28]	; (80020f0 <file_reopen_sync+0x20>)
 80020d4:	f008 ffc9 	bl	800b06a <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 80020d8:	2212      	movs	r2, #18
 80020da:	4906      	ldr	r1, [pc, #24]	; (80020f4 <file_reopen_sync+0x24>)
 80020dc:	4804      	ldr	r0, [pc, #16]	; (80020f0 <file_reopen_sync+0x20>)
 80020de:	f008 fd9d 	bl	800ac1c <f_open>
	if(res != FR_OK)
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <file_reopen_sync+0x28>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	b113      	cbz	r3, 80020ee <file_reopen_sync+0x1e>
						{
							Fat_sync_read_fail=1;
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <file_reopen_sync+0x2c>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	bd08      	pop	{r3, pc}
 80020f0:	20008d04 	.word	0x20008d04
 80020f4:	200089e8 	.word	0x200089e8
 80020f8:	20008f86 	.word	0x20008f86
 80020fc:	200089a8 	.word	0x200089a8

08002100 <file_reopen>:
						}
}

void file_reopen(void)
{
 8002100:	b508      	push	{r3, lr}
	f_close(&MyFile);
 8002102:	4807      	ldr	r0, [pc, #28]	; (8002120 <file_reopen+0x20>)
 8002104:	f008 ffb1 	bl	800b06a <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8002108:	2212      	movs	r2, #18
 800210a:	4906      	ldr	r1, [pc, #24]	; (8002124 <file_reopen+0x24>)
 800210c:	4804      	ldr	r0, [pc, #16]	; (8002120 <file_reopen+0x20>)
 800210e:	f008 fd85 	bl	800ac1c <f_open>
	if(res != FR_OK)
 8002112:	4b05      	ldr	r3, [pc, #20]	; (8002128 <file_reopen+0x28>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	b113      	cbz	r3, 800211e <file_reopen+0x1e>
						{
							Fat_write_read_fail=1;
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <file_reopen+0x2c>)
 800211a:	2201      	movs	r2, #1
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	bd08      	pop	{r3, pc}
 8002120:	20008d04 	.word	0x20008d04
 8002124:	200089e8 	.word	0x200089e8
 8002128:	20008f86 	.word	0x20008f86
 800212c:	200089a4 	.word	0x200089a4

08002130 <file_mnt_reopen>:
						}
}

void file_mnt_reopen(void)
{
 8002130:	b508      	push	{r3, lr}
	  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8002132:	490c      	ldr	r1, [pc, #48]	; (8002164 <file_mnt_reopen+0x34>)
 8002134:	480c      	ldr	r0, [pc, #48]	; (8002168 <file_mnt_reopen+0x38>)
 8002136:	f009 fa0d 	bl	800b554 <FATFS_LinkDriver>
 800213a:	b928      	cbnz	r0, 8002148 <file_mnt_reopen+0x18>
		{
			 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 800213c:	2201      	movs	r2, #1
 800213e:	4909      	ldr	r1, [pc, #36]	; (8002164 <file_mnt_reopen+0x34>)
 8002140:	480a      	ldr	r0, [pc, #40]	; (800216c <file_mnt_reopen+0x3c>)
 8002142:	f008 fd35 	bl	800abb0 <f_mount>
 8002146:	b118      	cbz	r0, 8002150 <file_mnt_reopen+0x20>
			 {
				 Fat_read_mnt_fail=1;
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <file_mnt_reopen+0x40>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	bd08      	pop	{r3, pc}
			 }
			 else  // Good to Go
			 {
				 res= f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8002150:	2212      	movs	r2, #18
 8002152:	4908      	ldr	r1, [pc, #32]	; (8002174 <file_mnt_reopen+0x44>)
 8002154:	4808      	ldr	r0, [pc, #32]	; (8002178 <file_mnt_reopen+0x48>)
 8002156:	f008 fd61 	bl	800ac1c <f_open>
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <file_mnt_reopen+0x4c>)
 800215c:	7018      	strb	r0, [r3, #0]
					if(res != FR_OK)
 800215e:	2800      	cmp	r0, #0
 8002160:	d1f2      	bne.n	8002148 <file_mnt_reopen+0x18>
 8002162:	bd08      	pop	{r3, pc}
 8002164:	20008a95 	.word	0x20008a95
 8002168:	0800dbd0 	.word	0x0800dbd0
 800216c:	20008aa4 	.word	0x20008aa4
 8002170:	20008a4c 	.word	0x20008a4c
 8002174:	200089e8 	.word	0x200089e8
 8002178:	20008d04 	.word	0x20008d04
 800217c:	20008f86 	.word	0x20008f86

08002180 <FATFS_Logstart_Delete>:
		 delay_us(100);
			 }
}

void FATFS_Logstart_Delete(void)
{
 8002180:	b508      	push	{r3, lr}

  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8002182:	490d      	ldr	r1, [pc, #52]	; (80021b8 <FATFS_Logstart_Delete+0x38>)
 8002184:	480d      	ldr	r0, [pc, #52]	; (80021bc <FATFS_Logstart_Delete+0x3c>)
 8002186:	f009 f9e5 	bl	800b554 <FATFS_LinkDriver>
 800218a:	b958      	cbnz	r0, 80021a4 <FATFS_Logstart_Delete+0x24>
	{
		 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 800218c:	2201      	movs	r2, #1
 800218e:	490a      	ldr	r1, [pc, #40]	; (80021b8 <FATFS_Logstart_Delete+0x38>)
 8002190:	480b      	ldr	r0, [pc, #44]	; (80021c0 <FATFS_Logstart_Delete+0x40>)
 8002192:	f008 fd0d 	bl	800abb0 <f_mount>
 8002196:	b910      	cbnz	r0, 800219e <FATFS_Logstart_Delete+0x1e>
	//		 RED_LED_ON();
		 }

    	 else
			 {
			  if (f_unlink ("LogStart.txt") == FR_OK) {    // If LogStart.txt file present, delete the file
 8002198:	480a      	ldr	r0, [pc, #40]	; (80021c4 <FATFS_Logstart_Delete+0x44>)
 800219a:	f009 f93f 	bl	800b41c <f_unlink>
					  }
			 }
		 delay_us(100);
 800219e:	2064      	movs	r0, #100	; 0x64
 80021a0:	f002 f950 	bl	8004444 <delay_us>
			 }
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 80021a4:	2200      	movs	r2, #0
 80021a6:	4908      	ldr	r1, [pc, #32]	; (80021c8 <FATFS_Logstart_Delete+0x48>)
 80021a8:	4610      	mov	r0, r2
 80021aa:	f008 fd01 	bl	800abb0 <f_mount>
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 80021ae:	4802      	ldr	r0, [pc, #8]	; (80021b8 <FATFS_Logstart_Delete+0x38>)
}
 80021b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 80021b4:	f009 b9ea 	b.w	800b58c <FATFS_UnLinkDriver>
 80021b8:	20008a95 	.word	0x20008a95
 80021bc:	0800dbd0 	.word	0x0800dbd0
 80021c0:	20008aa4 	.word	0x20008aa4
 80021c4:	0800d954 	.word	0x0800d954
 80021c8:	0800dafb 	.word	0x0800dafb

080021cc <FATFS_Logstart_Ready>:

void FATFS_Logstart_Ready(void)
{
 80021cc:	b508      	push	{r3, lr}

  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 80021ce:	4910      	ldr	r1, [pc, #64]	; (8002210 <FATFS_Logstart_Ready+0x44>)
 80021d0:	4810      	ldr	r0, [pc, #64]	; (8002214 <FATFS_Logstart_Ready+0x48>)
 80021d2:	f009 f9bf 	bl	800b554 <FATFS_LinkDriver>
 80021d6:	b988      	cbnz	r0, 80021fc <FATFS_Logstart_Ready+0x30>
	{
		 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 80021d8:	2201      	movs	r2, #1
 80021da:	490d      	ldr	r1, [pc, #52]	; (8002210 <FATFS_Logstart_Ready+0x44>)
 80021dc:	480e      	ldr	r0, [pc, #56]	; (8002218 <FATFS_Logstart_Ready+0x4c>)
 80021de:	f008 fce7 	bl	800abb0 <f_mount>
 80021e2:	b940      	cbnz	r0, 80021f6 <FATFS_Logstart_Ready+0x2a>

		 }

    	 else
			 {
			 if(f_open(&MyFile, "LogStart.txt", FA_OPEN_ALWAYS | FA_WRITE) != FR_OK) // Create and Open a new text file object with write access
 80021e4:	2212      	movs	r2, #18
 80021e6:	490d      	ldr	r1, [pc, #52]	; (800221c <FATFS_Logstart_Ready+0x50>)
 80021e8:	480d      	ldr	r0, [pc, #52]	; (8002220 <FATFS_Logstart_Ready+0x54>)
 80021ea:	f008 fd17 	bl	800ac1c <f_open>
 80021ee:	b910      	cbnz	r0, 80021f6 <FATFS_Logstart_Ready+0x2a>

				 }
				 else
				 {

					f_close(&MyFile);
 80021f0:	480b      	ldr	r0, [pc, #44]	; (8002220 <FATFS_Logstart_Ready+0x54>)
 80021f2:	f008 ff3a 	bl	800b06a <f_close>
				 }
			 }
		 delay_us(100);
 80021f6:	2064      	movs	r0, #100	; 0x64
 80021f8:	f002 f924 	bl	8004444 <delay_us>
			 }
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 80021fc:	2200      	movs	r2, #0
 80021fe:	4909      	ldr	r1, [pc, #36]	; (8002224 <FATFS_Logstart_Ready+0x58>)
 8002200:	4610      	mov	r0, r2
 8002202:	f008 fcd5 	bl	800abb0 <f_mount>
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 8002206:	4802      	ldr	r0, [pc, #8]	; (8002210 <FATFS_Logstart_Ready+0x44>)
}
 8002208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 800220c:	f009 b9be 	b.w	800b58c <FATFS_UnLinkDriver>
 8002210:	20008a95 	.word	0x20008a95
 8002214:	0800dbd0 	.word	0x0800dbd0
 8002218:	20008aa4 	.word	0x20008aa4
 800221c:	0800d954 	.word	0x0800d954
 8002220:	20008d04 	.word	0x20008d04
 8002224:	0800dafb 	.word	0x0800dafb

08002228 <USB_MSC_Init_Start>:
	 }
#endif
}

void USB_MSC_Init_Start(void)                                 // Initialize USB MSC mode
{
 8002228:	b510      	push	{r4, lr}
	USBD_Init(&USBD_Device, &MSC_Desc, 0);                   // USB MSC initialization
 800222a:	4c0b      	ldr	r4, [pc, #44]	; (8002258 <USB_MSC_Init_Start+0x30>)
 800222c:	490b      	ldr	r1, [pc, #44]	; (800225c <USB_MSC_Init_Start+0x34>)
 800222e:	2200      	movs	r2, #0
 8002230:	4620      	mov	r0, r4
 8002232:	f007 f9d6 	bl	80095e2 <USBD_Init>
	USBD_RegisterClass(&USBD_Device, USBD_MSC_CLASS);        // USB class registration
 8002236:	490a      	ldr	r1, [pc, #40]	; (8002260 <USB_MSC_Init_Start+0x38>)
 8002238:	4620      	mov	r0, r4
 800223a:	f007 fa00 	bl	800963e <USBD_RegisterClass>
	USBD_MSC_RegisterStorage(&USBD_Device, &USBD_DISK_fops); // Storage call backs
 800223e:	4909      	ldr	r1, [pc, #36]	; (8002264 <USB_MSC_Init_Start+0x3c>)
 8002240:	4620      	mov	r0, r4
 8002242:	f006 fe26 	bl	8008e92 <USBD_MSC_RegisterStorage>
	USBD_Start(&USBD_Device);                                // Start USB MSC
 8002246:	4620      	mov	r0, r4
 8002248:	f007 fa00 	bl	800964c <USBD_Start>

	delay_us(1000000);
 800224c:	4806      	ldr	r0, [pc, #24]	; (8002268 <USB_MSC_Init_Start+0x40>)


}
 800224e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(1000000);
 8002252:	f002 b8f7 	b.w	8004444 <delay_us>
 8002256:	bf00      	nop
 8002258:	20008700 	.word	0x20008700
 800225c:	20000018 	.word	0x20000018
 8002260:	20000204 	.word	0x20000204
 8002264:	200001e4 	.word	0x200001e4
 8002268:	000f4240 	.word	0x000f4240

0800226c <USB_VCP_Init_Start>:

void USB_VCP_Init_Start(void)
{
 800226c:	b510      	push	{r4, lr}
	   USBD_Init(&USBD_Device, &VCP_Desc, 0);                   // USB VCP initialization
 800226e:	4c0b      	ldr	r4, [pc, #44]	; (800229c <USB_VCP_Init_Start+0x30>)
 8002270:	490b      	ldr	r1, [pc, #44]	; (80022a0 <USB_VCP_Init_Start+0x34>)
 8002272:	2200      	movs	r2, #0
 8002274:	4620      	mov	r0, r4
 8002276:	f007 f9b4 	bl	80095e2 <USBD_Init>
	   USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);        // USB class registration
 800227a:	490a      	ldr	r1, [pc, #40]	; (80022a4 <USB_VCP_Init_Start+0x38>)
 800227c:	4620      	mov	r0, r4
 800227e:	f007 f9de 	bl	800963e <USBD_RegisterClass>
	   USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops); // VCP CDC call backs
 8002282:	4909      	ldr	r1, [pc, #36]	; (80022a8 <USB_VCP_Init_Start+0x3c>)
 8002284:	4620      	mov	r0, r4
 8002286:	f002 fe4b 	bl	8004f20 <USBD_CDC_RegisterInterface>
	   USBD_Start(&USBD_Device);                                 // Start USB VCP
 800228a:	4620      	mov	r0, r4
 800228c:	f007 f9de 	bl	800964c <USBD_Start>
	   delay_us(1000000);
 8002290:	4806      	ldr	r0, [pc, #24]	; (80022ac <USB_VCP_Init_Start+0x40>)
}
 8002292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	   delay_us(1000000);
 8002296:	f002 b8d5 	b.w	8004444 <delay_us>
 800229a:	bf00      	nop
 800229c:	20008700 	.word	0x20008700
 80022a0:	2000007c 	.word	0x2000007c
 80022a4:	200000c4 	.word	0x200000c4
 80022a8:	200001d4 	.word	0x200001d4
 80022ac:	000f4240 	.word	0x000f4240

080022b0 <Read_RTC_Timestamp>:
          2000 + __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC)));
}


void Read_RTC_Timestamp(void)               // Read RTC timestamp and store in variables
{
 80022b0:	b510      	push	{r4, lr}
// read RTC time in BCD format from registers and save in .BIN/.DEC format

Hour = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 80022b2:	f7ff fdf9 	bl	8001ea8 <LL_RTC_TIME_GetHour.constprop.13>
 80022b6:	4604      	mov	r4, r0
 80022b8:	f7ff fdf6 	bl	8001ea8 <LL_RTC_TIME_GetHour.constprop.13>
 80022bc:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80022c0:	4a2b      	ldr	r2, [pc, #172]	; (8002370 <Read_RTC_Timestamp+0xc0>)
 80022c2:	f000 000f 	and.w	r0, r0, #15
 80022c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022ca:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80022ce:	7013      	strb	r3, [r2, #0]
Min = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 80022d0:	f7ff fdd0 	bl	8001e74 <LL_RTC_TIME_GetMinute.constprop.12>
 80022d4:	4604      	mov	r4, r0
 80022d6:	f7ff fdcd 	bl	8001e74 <LL_RTC_TIME_GetMinute.constprop.12>
 80022da:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80022de:	4a25      	ldr	r2, [pc, #148]	; (8002374 <Read_RTC_Timestamp+0xc4>)
 80022e0:	f000 000f 	and.w	r0, r0, #15
 80022e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022e8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80022ec:	7013      	strb	r3, [r2, #0]
Sec =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80022ee:	f7ff fda9 	bl	8001e44 <LL_RTC_TIME_GetSecond.constprop.11>
 80022f2:	4604      	mov	r4, r0
 80022f4:	f7ff fda6 	bl	8001e44 <LL_RTC_TIME_GetSecond.constprop.11>
 80022f8:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80022fc:	4a1e      	ldr	r2, [pc, #120]	; (8002378 <Read_RTC_Timestamp+0xc8>)
 80022fe:	f000 000f 	and.w	r0, r0, #15
 8002302:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002306:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800230a:	7013      	strb	r3, [r2, #0]

Mon =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 800230c:	f7ff fd66 	bl	8001ddc <LL_RTC_DATE_GetMonth.constprop.9>
 8002310:	4604      	mov	r4, r0
 8002312:	f7ff fd63 	bl	8001ddc <LL_RTC_DATE_GetMonth.constprop.9>
 8002316:	f3c4 1303 	ubfx	r3, r4, #4, #4
 800231a:	4a18      	ldr	r2, [pc, #96]	; (800237c <Read_RTC_Timestamp+0xcc>)
 800231c:	f000 000f 	and.w	r0, r0, #15
 8002320:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002324:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002328:	7013      	strb	r3, [r2, #0]
Day = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 800232a:	f7ff fd3f 	bl	8001dac <LL_RTC_DATE_GetDay.constprop.8>
 800232e:	4604      	mov	r4, r0
 8002330:	f7ff fd3c 	bl	8001dac <LL_RTC_DATE_GetDay.constprop.8>
 8002334:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8002338:	4a11      	ldr	r2, [pc, #68]	; (8002380 <Read_RTC_Timestamp+0xd0>)
 800233a:	f000 000f 	and.w	r0, r0, #15
 800233e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002342:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002346:	7013      	strb	r3, [r2, #0]
Year =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 8002348:	f7ff fd62 	bl	8001e10 <LL_RTC_DATE_GetYear.constprop.10>
 800234c:	4604      	mov	r4, r0
 800234e:	f7ff fd5f 	bl	8001e10 <LL_RTC_DATE_GetYear.constprop.10>
 8002352:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8002356:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <Read_RTC_Timestamp+0xd4>)
 8002358:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800235c:	f000 000f 	and.w	r0, r0, #15
 8002360:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002364:	7013      	strb	r3, [r2, #0]

// Releasing RTC registers (Time and Date registers); necessary for RTC read/write operation
(void)RTC->DR;
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <Read_RTC_Timestamp+0xd8>)
 8002368:	685a      	ldr	r2, [r3, #4]
(void)RTC->TR;
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	bd10      	pop	{r4, pc}
 800236e:	bf00      	nop
 8002370:	200089fa 	.word	0x200089fa
 8002374:	200089b8 	.word	0x200089b8
 8002378:	20008a04 	.word	0x20008a04
 800237c:	20008ce8 	.word	0x20008ce8
 8002380:	20008cd6 	.word	0x20008cd6
 8002384:	20008d01 	.word	0x20008d01
 8002388:	40002800 	.word	0x40002800

0800238c <update_FATFS_time>:
{
 800238c:	b508      	push	{r3, lr}
	Read_RTC_Timestamp();                                   // Read RTC time-stamps and store in variables
 800238e:	f7ff ff8f 	bl	80022b0 <Read_RTC_Timestamp>
	fno.fdate = (WORD)(((Year+20) << 9) | Mon << 5 | Day);  // Update File time with the data log starting time
 8002392:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <update_FATFS_time+0x44>)
 8002394:	490f      	ldr	r1, [pc, #60]	; (80023d4 <update_FATFS_time+0x48>)
 8002396:	781a      	ldrb	r2, [r3, #0]
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <update_FATFS_time+0x4c>)
	f_utime(FILE_NAME_STRING, &fno);                        // Update RTC time on FATFS file header
 800239a:	4810      	ldr	r0, [pc, #64]	; (80023dc <update_FATFS_time+0x50>)
	fno.fdate = (WORD)(((Year+20) << 9) | Mon << 5 | Day);  // Update File time with the data log starting time
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80023a2:	4a0f      	ldr	r2, [pc, #60]	; (80023e0 <update_FATFS_time+0x54>)
 80023a4:	7812      	ldrb	r2, [r2, #0]
 80023a6:	3214      	adds	r2, #20
 80023a8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 80023ac:	808b      	strh	r3, [r1, #4]
    fno.ftime = (WORD)(Hour <<11 |  Min<<5 | Sec/2 );       // Extracting values from RTC registers
 80023ae:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <update_FATFS_time+0x58>)
 80023b0:	781a      	ldrb	r2, [r3, #0]
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <update_FATFS_time+0x5c>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	015b      	lsls	r3, r3, #5
 80023b8:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80023bc:	4a0b      	ldr	r2, [pc, #44]	; (80023ec <update_FATFS_time+0x60>)
 80023be:	7812      	ldrb	r2, [r2, #0]
 80023c0:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 80023c4:	80cb      	strh	r3, [r1, #6]
}
 80023c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	f_utime(FILE_NAME_STRING, &fno);                        // Update RTC time on FATFS file header
 80023ca:	f009 b878 	b.w	800b4be <f_utime>
 80023ce:	bf00      	nop
 80023d0:	20008ce8 	.word	0x20008ce8
 80023d4:	200089cc 	.word	0x200089cc
 80023d8:	20008cd6 	.word	0x20008cd6
 80023dc:	200089e8 	.word	0x200089e8
 80023e0:	20008d01 	.word	0x20008d01
 80023e4:	200089fa 	.word	0x200089fa
 80023e8:	200089b8 	.word	0x200089b8
 80023ec:	20008a04 	.word	0x20008a04

080023f0 <File_Close_Update_Unlink>:
{
 80023f0:	b508      	push	{r3, lr}
	f_close(&MyFile);                       // Close previous running file
 80023f2:	4807      	ldr	r0, [pc, #28]	; (8002410 <File_Close_Update_Unlink+0x20>)
 80023f4:	f008 fe39 	bl	800b06a <f_close>
	update_FATFS_time();                    // Write RTC time-stamp on File header/properties of last FATFS file to visualize in PC
 80023f8:	f7ff ffc8 	bl	800238c <update_FATFS_time>
	f_mount(0, "", 0); 		                //  unmount FATFS file (of running sensor storage file)
 80023fc:	2200      	movs	r2, #0
 80023fe:	4905      	ldr	r1, [pc, #20]	; (8002414 <File_Close_Update_Unlink+0x24>)
 8002400:	4610      	mov	r0, r2
 8002402:	f008 fbd5 	bl	800abb0 <f_mount>
	FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
 8002406:	4804      	ldr	r0, [pc, #16]	; (8002418 <File_Close_Update_Unlink+0x28>)
}
 8002408:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
 800240c:	f009 b8be 	b.w	800b58c <FATFS_UnLinkDriver>
 8002410:	20008d04 	.word	0x20008d04
 8002414:	0800dafb 	.word	0x0800dafb
 8002418:	20008a95 	.word	0x20008a95

0800241c <Shut_Down_SD>:
 800241c:	f7ff bfe8 	b.w	80023f0 <File_Close_Update_Unlink>

08002420 <Enter_RTC_InitMode>:
}

void Enter_RTC_InitMode(void)      // Function needed before writing on RTC registers
{
  RTC->ISR = RTC_INIT_MASK;                                // Enter Init Mode
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <Enter_RTC_InitMode+0x10>)
 8002422:	f04f 32ff 	mov.w	r2, #4294967295
 8002426:	60da      	str	r2, [r3, #12]
  while(((RTC->ISR) & RTC_ISR_INITF) != (RTC_ISR_INITF)); // Wait to enter Init mode
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	0652      	lsls	r2, r2, #25
 800242c:	d5fc      	bpl.n	8002428 <Enter_RTC_InitMode+0x8>
}
 800242e:	4770      	bx	lr
 8002430:	40002800 	.word	0x40002800

08002434 <Exit_RTC_InitMode>:

void Exit_RTC_InitMode(void)      // Function needed after writing on RTC registers
{
  RTC->ISR = (uint32_t)~RTC_ISR_INIT; // Disable RTC init mode
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <Exit_RTC_InitMode+0x1c>)
 8002436:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800243a:	60da      	str	r2, [r3, #12]

	// Wait for synchro. Needed only if Shadow registers is enabled
	WRITE_REG(RTC->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTC->ISR & RTC_ISR_INIT))); // Clear RTC sync flag
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002442:	f062 02a0 	orn	r2, r2, #160	; 0xa0
 8002446:	60da      	str	r2, [r3, #12]
	while(((RTC->ISR) & RTC_ISR_RSF) != (RTC_ISR_RSF));  // Wait the registers to be synchronised
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	0692      	lsls	r2, r2, #26
 800244c:	d5fc      	bpl.n	8002448 <Exit_RTC_InitMode+0x14>
}
 800244e:	4770      	bx	lr
 8002450:	40002800 	.word	0x40002800

08002454 <MX_RTC_Init>:

void MX_RTC_Init(void)                           // RTC initialization after Power on reset
{
 8002454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002456:	4b29      	ldr	r3, [pc, #164]	; (80024fc <MX_RTC_Init+0xa8>)
 8002458:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800245c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002460:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002464:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002468:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800246c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002470:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002474:	f042 0201 	orr.w	r2, r2, #1
 8002478:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800247c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  LL_RTC_InitTypeDef RTC_InitStruct;

  LL_RCC_ForceBackupDomainReset();               // Reset Backup domain registers
  LL_RCC_ReleaseBackupDomainReset();
  LL_RCC_LSE_Enable();                          // Configure LSE as RTC source clock
  while (LL_RCC_LSE_IsReady() != 1);
 8002480:	0792      	lsls	r2, r2, #30
 8002482:	d5fb      	bpl.n	800247c <MX_RTC_Init+0x28>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002484:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
  LL_RCC_EnableRTC();                           // RTC clock

  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
  LL_RTC_Init(RTC, &RTC_InitStruct);           // Initialize RTC with default configurations
 8002488:	4c1d      	ldr	r4, [pc, #116]	; (8002500 <MX_RTC_Init+0xac>)
 800248a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800248e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002492:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002496:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 800249a:	a904      	add	r1, sp, #16
 800249c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80024a4:	2300      	movs	r3, #0
 80024a6:	f841 3d0c 	str.w	r3, [r1, #-12]!
  LL_RTC_Init(RTC, &RTC_InitStruct);           // Initialize RTC with default configurations
 80024aa:	4620      	mov	r0, r4
 80024ac:	f005 fede 	bl	800826c <LL_RTC_Init>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80024b0:	23ca      	movs	r3, #202	; 0xca
 80024b2:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80024b4:	2353      	movs	r3, #83	; 0x53
 80024b6:	6263      	str	r3, [r4, #36]	; 0x24


    LL_RTC_DisableWriteProtection(RTC);
    Enter_RTC_InitMode();                         // Enter RTC initialization mode to set parameters
 80024b8:	f7ff ffb2 	bl	8002420 <Enter_RTC_InitMode>

    // Calender set up
    MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_A, 0x7F << RTC_POSITION_PRER_PREDIV_A);  // ASYNC prediv= 0x7F
 80024bc:	6923      	ldr	r3, [r4, #16]
 80024be:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80024c2:	fa92 f2a2 	rbit	r2, r2
 80024c6:	217f      	movs	r1, #127	; 0x7f
 80024c8:	fab2 f282 	clz	r2, r2
 80024cc:	fa01 f202 	lsl.w	r2, r1, r2
 80024d0:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80024d4:	4313      	orrs	r3, r2
 80024d6:	6123      	str	r3, [r4, #16]
  	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_S, 0xFF);                                // SYNC prediv= 0xFF
 80024d8:	6923      	ldr	r3, [r4, #16]
 80024da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80024de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80024e2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80024e6:	6123      	str	r3, [r4, #16]

  	Exit_RTC_InitMode();
 80024e8:	f7ff ffa4 	bl	8002434 <Exit_RTC_InitMode>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80024ec:	23ff      	movs	r3, #255	; 0xff
 80024ee:	6263      	str	r3, [r4, #36]	; 0x24

  tmp = (uint32_t)(&(RTCx->BKP0R));
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80024f0:	4b04      	ldr	r3, [pc, #16]	; (8002504 <MX_RTC_Init+0xb0>)
 80024f2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80024f6:	605a      	str	r2, [r3, #4]
}
 80024f8:	b004      	add	sp, #16
 80024fa:	bd10      	pop	{r4, pc}
 80024fc:	40021000 	.word	0x40021000
 8002500:	40002800 	.word	0x40002800
 8002504:	40002850 	.word	0x40002850

08002508 <Set_RTC_Calendar>:
{
 8002508:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800250a:	4c19      	ldr	r4, [pc, #100]	; (8002570 <Set_RTC_Calendar+0x68>)
 800250c:	460f      	mov	r7, r1
 800250e:	4619      	mov	r1, r3
 8002510:	23ca      	movs	r3, #202	; 0xca
 8002512:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002514:	2353      	movs	r3, #83	; 0x53
 8002516:	b085      	sub	sp, #20
 8002518:	6263      	str	r3, [r4, #36]	; 0x24
 800251a:	4606      	mov	r6, r0
 800251c:	4615      	mov	r5, r2
  Enter_RTC_InitMode();
 800251e:	f7ff ff7f 	bl	8002420 <Enter_RTC_InitMode>
  RTC_TimeStruct.Minutes = Min;
 8002522:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  RTC_TimeStruct.Hours = Hour;
 8002526:	f88d 100c 	strb.w	r1, [sp, #12]
  RTC_TimeStruct.Minutes = Min;
 800252a:	f88d 300d 	strb.w	r3, [sp, #13]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 800252e:	aa02      	add	r2, sp, #8
  RTC_TimeStruct.Seconds = Sec;
 8002530:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8002534:	f88d 300e 	strb.w	r3, [sp, #14]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 8002538:	2100      	movs	r1, #0
 800253a:	4620      	mov	r0, r4
 800253c:	f005 ff06 	bl	800834c <LL_RTC_TIME_Init>
  RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;          // Default value
 8002540:	2301      	movs	r3, #1
  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8002542:	aa01      	add	r2, sp, #4
 8002544:	2100      	movs	r1, #0
 8002546:	4620      	mov	r0, r4
  RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;          // Default value
 8002548:	f88d 3004 	strb.w	r3, [sp, #4]
  RTC_DateStruct.Month = Month;
 800254c:	f88d 7005 	strb.w	r7, [sp, #5]
  RTC_DateStruct.Year = Year;
 8002550:	f88d 6007 	strb.w	r6, [sp, #7]
  RTC_DateStruct.Day = Day;
 8002554:	f88d 5006 	strb.w	r5, [sp, #6]
  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8002558:	f005 ff3c 	bl	80083d4 <LL_RTC_DATE_Init>
  Exit_RTC_InitMode();
 800255c:	f7ff ff6a 	bl	8002434 <Exit_RTC_InitMode>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002560:	23ff      	movs	r3, #255	; 0xff
 8002562:	6263      	str	r3, [r4, #36]	; 0x24
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <Set_RTC_Calendar+0x6c>)
 8002566:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800256a:	605a      	str	r2, [r3, #4]
}
 800256c:	b005      	add	sp, #20
 800256e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002570:	40002800 	.word	0x40002800
 8002574:	40002850 	.word	0x40002850

08002578 <RTC_BAK_GetRegister>:
// Valid register value indicates RTC is enabled and running
uint32_t RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
  register uint32_t tmp = 0U;

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8002578:	3050      	adds	r0, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800257a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
}
 800257e:	4770      	bx	lr

08002580 <USB_PA9_EXTI_conf>:
  LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_10);                        // Interrupt configured for falling edge
}


void USB_PA9_EXTI_conf(void)                                              // PA9 EXTI pin interrupt configuration for USB connectivity Sense
{
 8002580:	b508      	push	{r3, lr}
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002582:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <USB_PA9_EXTI_conf+0x34>)
 8002584:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002588:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(EXTI9_5_IRQn);                                           // Enabling External GPIO pin interrupt (EXTI9-5) for USB connectivity PA10 Pin
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);                   // Enable Sysconfig clock to enable EXTI pin interrupts
 800258a:	2001      	movs	r0, #1
 800258c:	f7ff fb62 	bl	8001c54 <LL_APB2_GRP1_EnableClock>
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8002590:	4a09      	ldr	r2, [pc, #36]	; (80025b8 <USB_PA9_EXTI_conf+0x38>)
 8002592:	6913      	ldr	r3, [r2, #16]
 8002594:	21f0      	movs	r1, #240	; 0xf0
 8002596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800259a:	fa91 f1a1 	rbit	r1, r1
 800259e:	6113      	str	r3, [r2, #16]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <USB_PA9_EXTI_conf+0x3c>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a8:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b0:	609a      	str	r2, [r3, #8]
 80025b2:	bd08      	pop	{r3, pc}
 80025b4:	e000e100 	.word	0xe000e100
 80025b8:	40010000 	.word	0x40010000
 80025bc:	40010400 	.word	0x40010400

080025c0 <P_IMU4_SPI3_Init>:
	//}
}


void P_IMU4_SPI3_Init(void) // work for imu5
{
 80025c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LL_SPI_InitTypeDef SPI_InitStruct;

  LL_GPIO_InitTypeDef GPIO_InitStruct;

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80025c4:	2004      	movs	r0, #4
{
 80025c6:	b091      	sub	sp, #68	; 0x44
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80025c8:	f7ff fb28 	bl	8001c1c <LL_AHB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
  LL_GPIO_Init(SPI3_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 80025cc:	4e2e      	ldr	r6, [pc, #184]	; (8002688 <P_IMU4_SPI3_Init+0xc8>)
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80025ce:	2002      	movs	r0, #2
 80025d0:	f7ff fb24 	bl	8001c1c <LL_AHB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80025d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025d8:	f7ff fb2e 	bl	8001c38 <LL_APB1_GRP1_EnableClock>
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025dc:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025de:	2502      	movs	r5, #2
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80025e0:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80025e4:	2706      	movs	r7, #6
  GPIO_InitStruct.Pin = SPI3_SCK_IMU_PIN;
 80025e6:	f04f 0908 	mov.w	r9, #8
  LL_GPIO_Init(SPI3_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 80025ea:	4669      	mov	r1, sp
 80025ec:	4630      	mov	r0, r6
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025ee:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025f0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pin = SPI3_SCK_IMU_PIN;
 80025f2:	f8cd 9000 	str.w	r9, [sp]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025f6:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80025f8:	f8cd 8008 	str.w	r8, [sp, #8]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80025fc:	9705      	str	r7, [sp, #20]
  LL_GPIO_Init(SPI3_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 80025fe:	f005 fcbb 	bl	8007f78 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI3_MISO_IMU_PIN;
 8002602:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
  LL_GPIO_Init(SPI3_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 8002604:	4669      	mov	r1, sp
 8002606:	4630      	mov	r0, r6
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	e88d 0128 	stmia.w	sp, {r3, r5, r8}
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800260c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800260e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002610:	9705      	str	r7, [sp, #20]
  LL_GPIO_Init(SPI3_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 8002612:	f005 fcb1 	bl	8007f78 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI3_MOSI_IMU_PIN;
 8002616:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
  LL_GPIO_Init(SPI3_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 8002618:	4669      	mov	r1, sp
 800261a:	4630      	mov	r0, r6
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800261c:	e88d 0128 	stmia.w	sp, {r3, r5, r8}
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002620:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002622:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002624:	9705      	str	r7, [sp, #20]
  LL_GPIO_Init(SPI3_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 8002626:	f005 fca7 	bl	8007f78 <LL_GPIO_Init>


  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800262a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800262e:	9307      	str	r3, [sp, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002630:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002634:	9406      	str	r4, [sp, #24]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002636:	9308      	str	r3, [sp, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;

  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002638:	940d      	str	r4, [sp, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800263a:	940e      	str	r4, [sp, #56]	; 0x38
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800263c:	2301      	movs	r3, #1
  SPI_InitStruct.CRCPoly = 7;
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 800263e:	4c13      	ldr	r4, [pc, #76]	; (800268c <P_IMU4_SPI3_Init+0xcc>)
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002640:	930a      	str	r3, [sp, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002642:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002646:	930b      	str	r3, [sp, #44]	; 0x2c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8002648:	a906      	add	r1, sp, #24
  SPI_InitStruct.CRCPoly = 7;
 800264a:	2307      	movs	r3, #7
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 800264c:	4620      	mov	r0, r4
  SPI_InitStruct.CRCPoly = 7;
 800264e:	930f      	str	r3, [sp, #60]	; 0x3c
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002650:	9509      	str	r5, [sp, #36]	; 0x24
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8002652:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8002656:	f005 ff5d 	bl	8008514 <LL_SPI_Init>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800265a:	6863      	ldr	r3, [r4, #4]
 800265c:	f023 0308 	bic.w	r3, r3, #8
 8002660:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8002662:	6863      	ldr	r3, [r4, #4]
 8002664:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002668:	6063      	str	r3, [r4, #4]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_RXNE(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 800266a:	6863      	ldr	r3, [r4, #4]
 800266c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002670:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002678:	6023      	str	r3, [r4, #0]

  LL_SPI_SetRxFIFOThreshold(SPI3,LL_SPI_RX_FIFO_TH_QUARTER);
  LL_SPI_DisableIT_RXNE(SPI3);
  LL_SPI_Enable(SPI3);

  delay_us(10000);
 800267a:	f242 7010 	movw	r0, #10000	; 0x2710
 800267e:	f001 fee1 	bl	8004444 <delay_us>

}
 8002682:	b011      	add	sp, #68	; 0x44
 8002684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002688:	48000400 	.word	0x48000400
 800268c:	40003c00 	.word	0x40003c00

08002690 <MCP_reset>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <MCP_reset+0x28>)
 8002692:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002696:	629a      	str	r2, [r3, #40]	; 0x28
}

void MCP_reset(){
    LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_PORT, SPI2_CS_PIN);

    while(!(SPI2->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002698:	4b08      	ldr	r3, [pc, #32]	; (80026bc <MCP_reset+0x2c>)
 800269a:	461a      	mov	r2, r3
 800269c:	6899      	ldr	r1, [r3, #8]
 800269e:	0789      	lsls	r1, r1, #30
 80026a0:	d5fc      	bpl.n	800269c <MCP_reset+0xc>
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 80026a2:	21c0      	movs	r1, #192	; 0xc0
 80026a4:	7319      	strb	r1, [r3, #12]
	LL_SPI_TransmitData8(SPI2,0xC0);
	while(!(SPI2->SR & SPI_SR_RXNE)); //data received?
 80026a6:	6893      	ldr	r3, [r2, #8]
 80026a8:	07db      	lsls	r3, r3, #31
 80026aa:	d5fc      	bpl.n	80026a6 <MCP_reset+0x16>
  return (uint8_t)(READ_REG(SPIx->DR));
 80026ac:	68d3      	ldr	r3, [r2, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80026ae:	4b02      	ldr	r3, [pc, #8]	; (80026b8 <MCP_reset+0x28>)
 80026b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026b4:	619a      	str	r2, [r3, #24]
 80026b6:	4770      	bx	lr
 80026b8:	48000400 	.word	0x48000400
 80026bc:	40003800 	.word	0x40003800

080026c0 <Wait_for_ADC_timeout_While_Datalog>:
	         }
}

void Wait_for_ADC_timeout_While_Datalog(void)   // During Timer_Interrupt for Data logging, Involved Volatile variables
{
	ADC_TimeOut_Count_Buf++;
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <Wait_for_ADC_timeout_While_Datalog+0x1c>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	3201      	adds	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
	if( ADC_TimeOut_Count_Buf > ADC_TimeOut_Limit_Buf) // 100ms= 48000*ADC_TimeOut_MS_value)
 80026c8:	6819      	ldr	r1, [r3, #0]
 80026ca:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <Wait_for_ADC_timeout_While_Datalog+0x20>)
 80026cc:	4291      	cmp	r1, r2
 80026ce:	d904      	bls.n	80026da <Wait_for_ADC_timeout_While_Datalog+0x1a>
	         {
		ADC_TimeOut_Count_Buf=0;
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
		ADC_Error_Buf=1;
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <Wait_for_ADC_timeout_While_Datalog+0x24>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	4770      	bx	lr
 80026dc:	200089c8 	.word	0x200089c8
 80026e0:	00493e00 	.word	0x00493e00
 80026e4:	20008f87 	.word	0x20008f87

080026e8 <Wait_for_ADC_TimeOut_>:
	         }
}

void Wait_for_ADC_TimeOut_ (void)
{
	ADC_TimeOut_Count++;
 80026e8:	4a06      	ldr	r2, [pc, #24]	; (8002704 <Wait_for_ADC_TimeOut_+0x1c>)
	if( ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 80026ea:	4907      	ldr	r1, [pc, #28]	; (8002708 <Wait_for_ADC_TimeOut_+0x20>)
	ADC_TimeOut_Count++;
 80026ec:	6813      	ldr	r3, [r2, #0]
 80026ee:	3301      	adds	r3, #1
	if( ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 80026f0:	428b      	cmp	r3, r1
	         {
		ADC_TimeOut_Count=0;
 80026f2:	bf83      	ittte	hi
 80026f4:	2300      	movhi	r3, #0
 80026f6:	6013      	strhi	r3, [r2, #0]
		ADC_Error=1;
 80026f8:	4b04      	ldrhi	r3, [pc, #16]	; (800270c <Wait_for_ADC_TimeOut_+0x24>)
	ADC_TimeOut_Count++;
 80026fa:	6013      	strls	r3, [r2, #0]
		ADC_Error=1;
 80026fc:	bf84      	itt	hi
 80026fe:	2201      	movhi	r2, #1
 8002700:	701a      	strbhi	r2, [r3, #0]
 8002702:	4770      	bx	lr
 8002704:	20008f88 	.word	0x20008f88
 8002708:	00493e00 	.word	0x00493e00
 800270c:	20008f7e 	.word	0x20008f7e

08002710 <P_Activate_ADC3>:
{
 8002710:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8002712:	2300      	movs	r3, #0
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002714:	482c      	ldr	r0, [pc, #176]	; (80027c8 <P_Activate_ADC3+0xb8>)
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / 100000) /10);
 800271a:	4a2c      	ldr	r2, [pc, #176]	; (80027cc <P_Activate_ADC3+0xbc>)
 800271c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002720:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002724:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8002726:	6883      	ldr	r3, [r0, #8]
 8002728:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800272c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002734:	6083      	str	r3, [r0, #8]
 8002736:	4b26      	ldr	r3, [pc, #152]	; (80027d0 <P_Activate_ADC3+0xc0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	fbb3 f3f2 	udiv	r3, r3, r2
 800273e:	220a      	movs	r2, #10
 8002740:	4353      	muls	r3, r2
 8002742:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8002746:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8002748:	9a01      	ldr	r2, [sp, #4]
 800274a:	2a00      	cmp	r2, #0
 800274c:	d12f      	bne.n	80027ae <P_Activate_ADC3+0x9e>
  MODIFY_REG(ADCx->CR,
 800274e:	6883      	ldr	r3, [r0, #8]
    ADC_TimeOut_Count=0;
 8002750:	4d20      	ldr	r5, [pc, #128]	; (80027d4 <P_Activate_ADC3+0xc4>)
    ADC_Error=0;
 8002752:	4c21      	ldr	r4, [pc, #132]	; (80027d8 <P_Activate_ADC3+0xc8>)
 8002754:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002758:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800275c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002760:	6083      	str	r3, [r0, #8]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002762:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
    ADC_TimeOut_Count=0;
 8002766:	602a      	str	r2, [r5, #0]
    ADC_Error=0;
 8002768:	7022      	strb	r2, [r4, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800276a:	6883      	ldr	r3, [r0, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC3) == 0) && !Error_preceding&& (ADC_Error==0))
 800276c:	2b00      	cmp	r3, #0
 800276e:	db04      	blt.n	800277a <P_Activate_ADC3+0x6a>
 8002770:	6933      	ldr	r3, [r6, #16]
 8002772:	0599      	lsls	r1, r3, #22
 8002774:	d401      	bmi.n	800277a <P_Activate_ADC3+0x6a>
 8002776:	7823      	ldrb	r3, [r4, #0]
 8002778:	b1e3      	cbz	r3, 80027b4 <P_Activate_ADC3+0xa4>
    wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES;   // ADC Delay calculations
 800277a:	2380      	movs	r3, #128	; 0x80
      wait_loop_index--;
 800277c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800277e:	9a01      	ldr	r2, [sp, #4]
 8002780:	b9da      	cbnz	r2, 80027ba <P_Activate_ADC3+0xaa>
  MODIFY_REG(ADCx->CR,
 8002782:	6883      	ldr	r3, [r0, #8]
 8002784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002788:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6083      	str	r3, [r0, #8]
    ADC_TimeOut_Count=0;
 8002792:	602a      	str	r2, [r5, #0]
    ADC_Error=0;
 8002794:	7022      	strb	r2, [r4, #0]
 8002796:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800279a:	6803      	ldr	r3, [r0, #0]
    while ((LL_ADC_IsActiveFlag_ADRDY(ADC3) == 0)&& !Error_preceding&& (ADC_Error==0))
 800279c:	07da      	lsls	r2, r3, #31
 800279e:	d404      	bmi.n	80027aa <P_Activate_ADC3+0x9a>
 80027a0:	692b      	ldr	r3, [r5, #16]
 80027a2:	059b      	lsls	r3, r3, #22
 80027a4:	d401      	bmi.n	80027aa <P_Activate_ADC3+0x9a>
 80027a6:	7823      	ldrb	r3, [r4, #0]
 80027a8:	b153      	cbz	r3, 80027c0 <P_Activate_ADC3+0xb0>
}
 80027aa:	b002      	add	sp, #8
 80027ac:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 80027ae:	9b01      	ldr	r3, [sp, #4]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	e7c8      	b.n	8002746 <P_Activate_ADC3+0x36>
  	  Wait_for_ADC_TimeOut_();
 80027b4:	f7ff ff98 	bl	80026e8 <Wait_for_ADC_TimeOut_>
 80027b8:	e7d7      	b.n	800276a <P_Activate_ADC3+0x5a>
      wait_loop_index--;
 80027ba:	9b01      	ldr	r3, [sp, #4]
 80027bc:	3b01      	subs	r3, #1
 80027be:	e7dd      	b.n	800277c <P_Activate_ADC3+0x6c>
  	  Wait_for_ADC_TimeOut_();
 80027c0:	f7ff ff92 	bl	80026e8 <Wait_for_ADC_TimeOut_>
 80027c4:	e7e9      	b.n	800279a <P_Activate_ADC3+0x8a>
 80027c6:	bf00      	nop
 80027c8:	50040200 	.word	0x50040200
 80027cc:	000186a0 	.word	0x000186a0
 80027d0:	20000014 	.word	0x20000014
 80027d4:	20008f88 	.word	0x20008f88
 80027d8:	20008f7e 	.word	0x20008f7e

080027dc <P_Activate_ADC2>:
{
 80027dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 80027de:	2300      	movs	r3, #0
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027e0:	482c      	ldr	r0, [pc, #176]	; (8002894 <P_Activate_ADC2+0xb8>)
 80027e2:	9301      	str	r3, [sp, #4]
 80027e4:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / 100000) /10);
 80027e6:	4a2c      	ldr	r2, [pc, #176]	; (8002898 <P_Activate_ADC2+0xbc>)
 80027e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80027ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027f0:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 80027f2:	6883      	ldr	r3, [r0, #8]
 80027f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80027f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002800:	6083      	str	r3, [r0, #8]
 8002802:	4b26      	ldr	r3, [pc, #152]	; (800289c <P_Activate_ADC2+0xc0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	fbb3 f3f2 	udiv	r3, r3, r2
 800280a:	220a      	movs	r2, #10
 800280c:	4353      	muls	r3, r2
 800280e:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8002812:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8002814:	9a01      	ldr	r2, [sp, #4]
 8002816:	2a00      	cmp	r2, #0
 8002818:	d12f      	bne.n	800287a <P_Activate_ADC2+0x9e>
  MODIFY_REG(ADCx->CR,
 800281a:	6883      	ldr	r3, [r0, #8]
    ADC_TimeOut_Count=0;
 800281c:	4d20      	ldr	r5, [pc, #128]	; (80028a0 <P_Activate_ADC2+0xc4>)
    ADC_Error=0;
 800281e:	4c21      	ldr	r4, [pc, #132]	; (80028a4 <P_Activate_ADC2+0xc8>)
 8002820:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002824:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002828:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800282c:	6083      	str	r3, [r0, #8]
 800282e:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
    ADC_TimeOut_Count=0;
 8002832:	602a      	str	r2, [r5, #0]
    ADC_Error=0;
 8002834:	7022      	strb	r2, [r4, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002836:	6883      	ldr	r3, [r0, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC2) == 0) && !Error_preceding&& (ADC_Error==0))
 8002838:	2b00      	cmp	r3, #0
 800283a:	db04      	blt.n	8002846 <P_Activate_ADC2+0x6a>
 800283c:	6933      	ldr	r3, [r6, #16]
 800283e:	0599      	lsls	r1, r3, #22
 8002840:	d401      	bmi.n	8002846 <P_Activate_ADC2+0x6a>
 8002842:	7823      	ldrb	r3, [r4, #0]
 8002844:	b1e3      	cbz	r3, 8002880 <P_Activate_ADC2+0xa4>
    wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES;   // ADC Delay calculations
 8002846:	2380      	movs	r3, #128	; 0x80
      wait_loop_index--;
 8002848:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800284a:	9a01      	ldr	r2, [sp, #4]
 800284c:	b9da      	cbnz	r2, 8002886 <P_Activate_ADC2+0xaa>
  MODIFY_REG(ADCx->CR,
 800284e:	6883      	ldr	r3, [r0, #8]
 8002850:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002854:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6083      	str	r3, [r0, #8]
    ADC_TimeOut_Count=0;
 800285e:	602a      	str	r2, [r5, #0]
    ADC_Error=0;
 8002860:	7022      	strb	r2, [r4, #0]
 8002862:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8002866:	6803      	ldr	r3, [r0, #0]
    while ((LL_ADC_IsActiveFlag_ADRDY(ADC2) == 0)&& !Error_preceding&& (ADC_Error==0))
 8002868:	07da      	lsls	r2, r3, #31
 800286a:	d404      	bmi.n	8002876 <P_Activate_ADC2+0x9a>
 800286c:	692b      	ldr	r3, [r5, #16]
 800286e:	059b      	lsls	r3, r3, #22
 8002870:	d401      	bmi.n	8002876 <P_Activate_ADC2+0x9a>
 8002872:	7823      	ldrb	r3, [r4, #0]
 8002874:	b153      	cbz	r3, 800288c <P_Activate_ADC2+0xb0>
}
 8002876:	b002      	add	sp, #8
 8002878:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 800287a:	9b01      	ldr	r3, [sp, #4]
 800287c:	3b01      	subs	r3, #1
 800287e:	e7c8      	b.n	8002812 <P_Activate_ADC2+0x36>
  	  Wait_for_ADC_TimeOut_();
 8002880:	f7ff ff32 	bl	80026e8 <Wait_for_ADC_TimeOut_>
 8002884:	e7d7      	b.n	8002836 <P_Activate_ADC2+0x5a>
      wait_loop_index--;
 8002886:	9b01      	ldr	r3, [sp, #4]
 8002888:	3b01      	subs	r3, #1
 800288a:	e7dd      	b.n	8002848 <P_Activate_ADC2+0x6c>
  	  Wait_for_ADC_TimeOut_();
 800288c:	f7ff ff2c 	bl	80026e8 <Wait_for_ADC_TimeOut_>
 8002890:	e7e9      	b.n	8002866 <P_Activate_ADC2+0x8a>
 8002892:	bf00      	nop
 8002894:	50040100 	.word	0x50040100
 8002898:	000186a0 	.word	0x000186a0
 800289c:	20000014 	.word	0x20000014
 80028a0:	20008f88 	.word	0x20008f88
 80028a4:	20008f7e 	.word	0x20008f7e

080028a8 <P_Activate_ADC1>:
{
 80028a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028ae:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <P_Activate_ADC1+0xbc>)
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / 100000) /10);
 80028b0:	492d      	ldr	r1, [pc, #180]	; (8002968 <P_Activate_ADC1+0xc0>)
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 80028b8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80028bc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80028c4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80028c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	4a27      	ldr	r2, [pc, #156]	; (800296c <P_Activate_ADC1+0xc4>)
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	fbb2 f2f1 	udiv	r2, r2, r1
 80028d6:	210a      	movs	r1, #10
 80028d8:	434a      	muls	r2, r1
 80028da:	fbb2 f2f1 	udiv	r2, r2, r1
      wait_loop_index--;
 80028de:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 80028e0:	9901      	ldr	r1, [sp, #4]
 80028e2:	2900      	cmp	r1, #0
 80028e4:	d132      	bne.n	800294c <P_Activate_ADC1+0xa4>
  MODIFY_REG(ADCx->CR,
 80028e6:	689a      	ldr	r2, [r3, #8]
    ADC_TimeOut_Count=0;
 80028e8:	4c21      	ldr	r4, [pc, #132]	; (8002970 <P_Activate_ADC1+0xc8>)
    ADC_Error=0;
 80028ea:	4822      	ldr	r0, [pc, #136]	; (8002974 <P_Activate_ADC1+0xcc>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80028ec:	4d1d      	ldr	r5, [pc, #116]	; (8002964 <P_Activate_ADC1+0xbc>)
  MODIFY_REG(ADCx->CR,
 80028ee:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80028f2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80028f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
    ADC_TimeOut_Count=0;
 8002900:	6021      	str	r1, [r4, #0]
    ADC_Error=0;
 8002902:	7001      	strb	r1, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002904:	68ab      	ldr	r3, [r5, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC1) == 0) && !Error_preceding&& (ADC_Error==0))
 8002906:	2b00      	cmp	r3, #0
 8002908:	db04      	blt.n	8002914 <P_Activate_ADC1+0x6c>
 800290a:	6933      	ldr	r3, [r6, #16]
 800290c:	0599      	lsls	r1, r3, #22
 800290e:	d401      	bmi.n	8002914 <P_Activate_ADC1+0x6c>
 8002910:	7803      	ldrb	r3, [r0, #0]
 8002912:	b1f3      	cbz	r3, 8002952 <P_Activate_ADC1+0xaa>
    wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES;   // ADC Delay calculations
 8002914:	2380      	movs	r3, #128	; 0x80
      wait_loop_index--;
 8002916:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8002918:	9901      	ldr	r1, [sp, #4]
 800291a:	b9e9      	cbnz	r1, 8002958 <P_Activate_ADC1+0xb0>
  MODIFY_REG(ADCx->CR,
 800291c:	4a11      	ldr	r2, [pc, #68]	; (8002964 <P_Activate_ADC1+0xbc>)
 800291e:	6893      	ldr	r3, [r2, #8]
 8002920:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002924:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6093      	str	r3, [r2, #8]
 800292e:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
    ADC_TimeOut_Count=0;
 8002932:	6021      	str	r1, [r4, #0]
    ADC_Error=0;
 8002934:	7001      	strb	r1, [r0, #0]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8002936:	4614      	mov	r4, r2
 8002938:	6823      	ldr	r3, [r4, #0]
    while ((LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)&& !Error_preceding&& (ADC_Error==0))
 800293a:	07da      	lsls	r2, r3, #31
 800293c:	d404      	bmi.n	8002948 <P_Activate_ADC1+0xa0>
 800293e:	692b      	ldr	r3, [r5, #16]
 8002940:	059b      	lsls	r3, r3, #22
 8002942:	d401      	bmi.n	8002948 <P_Activate_ADC1+0xa0>
 8002944:	7803      	ldrb	r3, [r0, #0]
 8002946:	b153      	cbz	r3, 800295e <P_Activate_ADC1+0xb6>
}
 8002948:	b002      	add	sp, #8
 800294a:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 800294c:	9a01      	ldr	r2, [sp, #4]
 800294e:	3a01      	subs	r2, #1
 8002950:	e7c5      	b.n	80028de <P_Activate_ADC1+0x36>
  	  Wait_for_ADC_TimeOut_();
 8002952:	f7ff fec9 	bl	80026e8 <Wait_for_ADC_TimeOut_>
 8002956:	e7d5      	b.n	8002904 <P_Activate_ADC1+0x5c>
      wait_loop_index--;
 8002958:	9b01      	ldr	r3, [sp, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	e7db      	b.n	8002916 <P_Activate_ADC1+0x6e>
  	  Wait_for_ADC_TimeOut_();
 800295e:	f7ff fec3 	bl	80026e8 <Wait_for_ADC_TimeOut_>
 8002962:	e7e9      	b.n	8002938 <P_Activate_ADC1+0x90>
 8002964:	50040000 	.word	0x50040000
 8002968:	000186a0 	.word	0x000186a0
 800296c:	20000014 	.word	0x20000014
 8002970:	20008f88 	.word	0x20008f88
 8002974:	20008f7e 	.word	0x20008f7e

08002978 <P_ADC1_conf_strain>:
  SET_BIT(RCC->AHB2RSTR, Periphs);
 8002978:	4b4f      	ldr	r3, [pc, #316]	; (8002ab8 <P_ADC1_conf_strain+0x140>)
 800297a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
{
 8002980:	b570      	push	{r4, r5, r6, lr}
 8002982:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 8002984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002986:	4d4d      	ldr	r5, [pc, #308]	; (8002abc <P_ADC1_conf_strain+0x144>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002988:	4c4d      	ldr	r4, [pc, #308]	; (8002ac0 <P_ADC1_conf_strain+0x148>)
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);   // FSR1=PC2=Ch3=ADC1
 800298a:	4e4e      	ldr	r6, [pc, #312]	; (8002ac4 <P_ADC1_conf_strain+0x14c>)
 800298c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002990:	62da      	str	r2, [r3, #44]	; 0x2c
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8002992:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002996:	f7ff f941 	bl	8001c1c <LL_AHB2_GRP1_EnableClock>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800299a:	68ab      	ldr	r3, [r5, #8]
 800299c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80029a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a4:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 80029a6:	68e3      	ldr	r3, [r4, #12]
 80029a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ac:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 80029ae:	68e3      	ldr	r3, [r4, #12]
 80029b0:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 80029b4:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 80029b6:	68e3      	ldr	r3, [r4, #12]
 80029b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029bc:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 80029be:	68e3      	ldr	r3, [r4, #12]
 80029c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029c4:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80029c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029c8:	f023 030f 	bic.w	r3, r3, #15
 80029cc:	6323      	str	r3, [r4, #48]	; 0x30
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);   // FSR1=PC2=Ch3=ADC1
 80029ce:	4620      	mov	r0, r4
 80029d0:	4632      	mov	r2, r6
 80029d2:	2106      	movs	r1, #6
 80029d4:	f7ff f962 	bl	8001c9c <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_640CYCLES_5);
 80029d8:	4620      	mov	r0, r4
 80029da:	4631      	mov	r1, r6
 80029dc:	2207      	movs	r2, #7
 80029de:	f7ff f97b 	bl	8001cd8 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029e2:	68ab      	ldr	r3, [r5, #8]
    LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 80029e4:	4e38      	ldr	r6, [pc, #224]	; (8002ac8 <P_ADC1_conf_strain+0x150>)
 80029e6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 80029ea:	f504 7480 	add.w	r4, r4, #256	; 0x100
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f2:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 80029f4:	68e3      	ldr	r3, [r4, #12]
 80029f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029fa:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 80029fc:	68e3      	ldr	r3, [r4, #12]
 80029fe:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8002a02:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 8002a04:	68e3      	ldr	r3, [r4, #12]
 8002a06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a0a:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 8002a0c:	68e3      	ldr	r3, [r4, #12]
 8002a0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a12:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002a14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a16:	f023 030f 	bic.w	r3, r3, #15
 8002a1a:	6323      	str	r3, [r4, #48]	; 0x30
 8002a1c:	4632      	mov	r2, r6
 8002a1e:	4620      	mov	r0, r4
 8002a20:	2106      	movs	r1, #6
 8002a22:	f7ff f93b 	bl	8001c9c <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_640CYCLES_5); // FSR2=PC3=Ch4=ADC2
 8002a26:	4631      	mov	r1, r6
 8002a28:	4620      	mov	r0, r4
 8002a2a:	2207      	movs	r2, #7
 8002a2c:	f7ff f954 	bl	8001cd8 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a30:	68ab      	ldr	r3, [r5, #8]
 8002a32:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3a:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002a3c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8002a40:	4d22      	ldr	r5, [pc, #136]	; (8002acc <P_ADC1_conf_strain+0x154>)
 8002a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a46:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 8002a4a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8002a4e:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8002a52:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 8002a56:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8002a5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a5e:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 8002a62:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8002a66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a6a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002a6e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8002a72:	f023 030f 	bic.w	r3, r3, #15
 8002a76:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002a7a:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8002a7e:	462a      	mov	r2, r5
 8002a80:	4620      	mov	r0, r4
 8002a82:	2106      	movs	r1, #6
 8002a84:	f7ff f90a 	bl	8001c9c <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_640CYCLES_5); // Load1=PC1=Ch2
 8002a88:	4629      	mov	r1, r5
    LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8002a8a:	4d11      	ldr	r5, [pc, #68]	; (8002ad0 <P_ADC1_conf_strain+0x158>)
    LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_640CYCLES_5); // Load1=PC1=Ch2
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	2207      	movs	r2, #7
 8002a90:	f7ff f922 	bl	8001cd8 <LL_ADC_SetChannelSamplingTime>
    LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8002a94:	462a      	mov	r2, r5
 8002a96:	4620      	mov	r0, r4
 8002a98:	2106      	movs	r1, #6
 8002a9a:	f7ff f8ff 	bl	8001c9c <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_640CYCLES_5); // Load2=PC0=Ch1
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	2207      	movs	r2, #7
 8002aa4:	f7ff f918 	bl	8001cd8 <LL_ADC_SetChannelSamplingTime>
    P_Activate_ADC3();
 8002aa8:	f7ff fe32 	bl	8002710 <P_Activate_ADC3>
    P_Activate_ADC2();
 8002aac:	f7ff fe96 	bl	80027dc <P_Activate_ADC2>
}
 8002ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    P_Activate_ADC1();
 8002ab4:	f7ff bef8 	b.w	80028a8 <P_Activate_ADC1>
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	50040300 	.word	0x50040300
 8002ac0:	50040000 	.word	0x50040000
 8002ac4:	0c900008 	.word	0x0c900008
 8002ac8:	10c00010 	.word	0x10c00010
 8002acc:	08600004 	.word	0x08600004
 8002ad0:	04300002 	.word	0x04300002

08002ad4 <P_ADC_Sensor_GPIO_Init>:
{
 8002ad4:	b510      	push	{r4, lr}
LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_2, LL_GPIO_MODE_ANALOG);
 8002ad6:	4c16      	ldr	r4, [pc, #88]	; (8002b30 <P_ADC_Sensor_GPIO_Init+0x5c>)
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002ad8:	2004      	movs	r0, #4
 8002ada:	f7ff f89f 	bl	8001c1c <LL_AHB2_GRP1_EnableClock>
LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_2, LL_GPIO_MODE_ANALOG);
 8002ade:	4620      	mov	r0, r4
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	2104      	movs	r1, #4
 8002ae4:	f7ff f8c4 	bl	8001c70 <LL_GPIO_SetPinMode>
  SET_BIT(GPIOx->ASCR, PinMask);
 8002ae8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002aea:	f043 0304 	orr.w	r3, r3, #4
 8002aee:	62e3      	str	r3, [r4, #44]	; 0x2c
LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_3, LL_GPIO_MODE_ANALOG);
 8002af0:	4620      	mov	r0, r4
 8002af2:	2203      	movs	r2, #3
 8002af4:	2108      	movs	r1, #8
 8002af6:	f7ff f8bb 	bl	8001c70 <LL_GPIO_SetPinMode>
 8002afa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002afc:	f043 0308 	orr.w	r3, r3, #8
 8002b00:	62e3      	str	r3, [r4, #44]	; 0x2c
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_1, LL_GPIO_MODE_ANALOG);
 8002b02:	4620      	mov	r0, r4
 8002b04:	2203      	movs	r2, #3
 8002b06:	2102      	movs	r1, #2
 8002b08:	f7ff f8b2 	bl	8001c70 <LL_GPIO_SetPinMode>
 8002b0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b0e:	f043 0302 	orr.w	r3, r3, #2
 8002b12:	62e3      	str	r3, [r4, #44]	; 0x2c
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_0, LL_GPIO_MODE_ANALOG);
 8002b14:	4620      	mov	r0, r4
 8002b16:	2203      	movs	r2, #3
 8002b18:	2101      	movs	r1, #1
 8002b1a:	f7ff f8a9 	bl	8001c70 <LL_GPIO_SetPinMode>
 8002b1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  P_ADC1_conf_strain();
 8002b2a:	f7ff bf25 	b.w	8002978 <P_ADC1_conf_strain>
 8002b2e:	bf00      	nop
 8002b30:	48000800 	.word	0x48000800

08002b34 <WriteReg3>:

LL_GPIO_SetOutputPin(MPU_CS_GPIO_PORT, MPU_CS_PIN); // PA4 CS SET Active Low
return temp_val;
}

unsigned int WriteReg3(uint8_t adress, uint8_t data){
 8002b34:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(GPIOx->BRR, PinMask);
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <WriteReg3+0x48>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b3c:	4605      	mov	r5, r0
	 unsigned int temp_val;
LL_GPIO_ResetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN); // PA4 CS RESET Active Low // for IMU5 change here
delay_us(10);
 8002b3e:	200a      	movs	r0, #10
unsigned int WriteReg3(uint8_t adress, uint8_t data){
 8002b40:	460c      	mov	r4, r1
delay_us(10);
 8002b42:	f001 fc7f 	bl	8004444 <delay_us>
while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002b46:	4a0e      	ldr	r2, [pc, #56]	; (8002b80 <WriteReg3+0x4c>)
 8002b48:	4613      	mov	r3, r2
 8002b4a:	6891      	ldr	r1, [r2, #8]
 8002b4c:	0789      	lsls	r1, r1, #30
 8002b4e:	d5fc      	bpl.n	8002b4a <WriteReg3+0x16>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002b50:	7315      	strb	r5, [r2, #12]
LL_SPI_TransmitData8(SPI3,adress);
while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	07d0      	lsls	r0, r2, #31
 8002b56:	d5fc      	bpl.n	8002b52 <WriteReg3+0x1e>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002b58:	68da      	ldr	r2, [r3, #12]
LL_SPI_ReceiveData8(SPI3);

while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	0791      	lsls	r1, r2, #30
 8002b5e:	d5fc      	bpl.n	8002b5a <WriteReg3+0x26>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002b60:	731c      	strb	r4, [r3, #12]
LL_SPI_TransmitData8(SPI3,data);
while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8002b62:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <WriteReg3+0x4c>)
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	07d2      	lsls	r2, r2, #31
 8002b68:	d5fc      	bpl.n	8002b64 <WriteReg3+0x30>
temp_val=LL_SPI_ReceiveData8(SPI3);
delay_us(5);
 8002b6a:	2005      	movs	r0, #5
  return (uint8_t)(READ_REG(SPIx->DR));
 8002b6c:	68dc      	ldr	r4, [r3, #12]
 8002b6e:	f001 fc69 	bl	8004444 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002b72:	4b02      	ldr	r3, [pc, #8]	; (8002b7c <WriteReg3+0x48>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	619a      	str	r2, [r3, #24]
LL_GPIO_SetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN); // PA4 CS SET Active Low // for IMU5 change here
return temp_val;
}
 8002b78:	b2e0      	uxtb	r0, r4
 8002b7a:	bd38      	pop	{r3, r4, r5, pc}
 8002b7c:	48001c00 	.word	0x48001c00
 8002b80:	40003c00 	.word	0x40003c00

08002b84 <WriteReg3_imu5>:

unsigned int WriteReg3_imu5(uint8_t adress, uint8_t data){
 8002b84:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(GPIOx->BRR, PinMask);
 8002b86:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <WriteReg3_imu5+0x48>)
 8002b88:	2202      	movs	r2, #2
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b8c:	4605      	mov	r5, r0
	 unsigned int temp_val;
LL_GPIO_ResetOutputPin(SPI3_CS_GPIO_PORT, SPI3_IMU5_CS_Pin); // PA4 CS RESET Active Low // for IMU5 changed here
delay_us(10);
 8002b8e:	200a      	movs	r0, #10
unsigned int WriteReg3_imu5(uint8_t adress, uint8_t data){
 8002b90:	460c      	mov	r4, r1
delay_us(10);
 8002b92:	f001 fc57 	bl	8004444 <delay_us>
while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002b96:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <WriteReg3_imu5+0x4c>)
 8002b98:	4613      	mov	r3, r2
 8002b9a:	6891      	ldr	r1, [r2, #8]
 8002b9c:	0789      	lsls	r1, r1, #30
 8002b9e:	d5fc      	bpl.n	8002b9a <WriteReg3_imu5+0x16>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002ba0:	7315      	strb	r5, [r2, #12]
LL_SPI_TransmitData8(SPI3,adress);
while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	07d0      	lsls	r0, r2, #31
 8002ba6:	d5fc      	bpl.n	8002ba2 <WriteReg3_imu5+0x1e>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002ba8:	68da      	ldr	r2, [r3, #12]
LL_SPI_ReceiveData8(SPI3);

while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	0791      	lsls	r1, r2, #30
 8002bae:	d5fc      	bpl.n	8002baa <WriteReg3_imu5+0x26>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002bb0:	731c      	strb	r4, [r3, #12]
LL_SPI_TransmitData8(SPI3,data);
while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8002bb2:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <WriteReg3_imu5+0x4c>)
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	07d2      	lsls	r2, r2, #31
 8002bb8:	d5fc      	bpl.n	8002bb4 <WriteReg3_imu5+0x30>
temp_val=LL_SPI_ReceiveData8(SPI3);
delay_us(5);
 8002bba:	2005      	movs	r0, #5
  return (uint8_t)(READ_REG(SPIx->DR));
 8002bbc:	68dc      	ldr	r4, [r3, #12]
 8002bbe:	f001 fc41 	bl	8004444 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002bc2:	4b02      	ldr	r3, [pc, #8]	; (8002bcc <WriteReg3_imu5+0x48>)
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	619a      	str	r2, [r3, #24]
LL_GPIO_SetOutputPin(SPI3_IMU5_CS_GPIO_Port, SPI3_IMU5_CS_Pin); // PA4 CS SET Active Low // for IMU5 changed here
return temp_val;
}
 8002bc8:	b2e0      	uxtb	r0, r4
 8002bca:	bd38      	pop	{r3, r4, r5, pc}
 8002bcc:	48001c00 	.word	0x48001c00
 8002bd0:	40003c00 	.word	0x40003c00

08002bd4 <WriteReg1>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8002bd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002bd8:	f44f 7280 	mov.w	r2, #256	; 0x100

unsigned int WriteReg1(uint8_t adress, uint8_t data){
 8002bdc:	b510      	push	{r4, lr}
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28
	 unsigned int temp_val;
LL_GPIO_ResetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);

while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002be0:	4a0c      	ldr	r2, [pc, #48]	; (8002c14 <WriteReg1+0x40>)
 8002be2:	4613      	mov	r3, r2
 8002be4:	6894      	ldr	r4, [r2, #8]
 8002be6:	07a4      	lsls	r4, r4, #30
 8002be8:	d5fc      	bpl.n	8002be4 <WriteReg1+0x10>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002bea:	7310      	strb	r0, [r2, #12]
LL_SPI_TransmitData8(SPI1,adress);
while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	07d4      	lsls	r4, r2, #31
 8002bf0:	d5fc      	bpl.n	8002bec <WriteReg1+0x18>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002bf2:	68da      	ldr	r2, [r3, #12]
LL_SPI_ReceiveData8(SPI1);

while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	0790      	lsls	r0, r2, #30
 8002bf8:	d5fc      	bpl.n	8002bf4 <WriteReg1+0x20>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002bfa:	7319      	strb	r1, [r3, #12]
LL_SPI_TransmitData8(SPI1,data);
while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <WriteReg1+0x40>)
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	07d2      	lsls	r2, r2, #31
 8002c02:	d5fc      	bpl.n	8002bfe <WriteReg1+0x2a>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002c04:	68d8      	ldr	r0, [r3, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002c06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c0e:	619a      	str	r2, [r3, #24]
temp_val=LL_SPI_ReceiveData8(SPI1);

LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);
return temp_val;
}
 8002c10:	b2c0      	uxtb	r0, r0
 8002c12:	bd10      	pop	{r4, pc}
 8002c14:	40013000 	.word	0x40013000

08002c18 <WriteReg1_imu2>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8002c18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000

unsigned int WriteReg1_imu2(uint8_t adress, uint8_t data){
 8002c20:	b510      	push	{r4, lr}
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28
	 unsigned int temp_val;
LL_GPIO_ResetOutputPin(SPI1_IMU2_CS_GPIO_Port, SPI1_IMU2_CS_Pin);

while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002c24:	4a0c      	ldr	r2, [pc, #48]	; (8002c58 <WriteReg1_imu2+0x40>)
 8002c26:	4613      	mov	r3, r2
 8002c28:	6894      	ldr	r4, [r2, #8]
 8002c2a:	07a4      	lsls	r4, r4, #30
 8002c2c:	d5fc      	bpl.n	8002c28 <WriteReg1_imu2+0x10>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002c2e:	7310      	strb	r0, [r2, #12]
LL_SPI_TransmitData8(SPI1,adress);
while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	07d4      	lsls	r4, r2, #31
 8002c34:	d5fc      	bpl.n	8002c30 <WriteReg1_imu2+0x18>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002c36:	68da      	ldr	r2, [r3, #12]
LL_SPI_ReceiveData8(SPI1);

while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	0790      	lsls	r0, r2, #30
 8002c3c:	d5fc      	bpl.n	8002c38 <WriteReg1_imu2+0x20>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002c3e:	7319      	strb	r1, [r3, #12]
LL_SPI_TransmitData8(SPI1,data);
while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <WriteReg1_imu2+0x40>)
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	07d2      	lsls	r2, r2, #31
 8002c46:	d5fc      	bpl.n	8002c42 <WriteReg1_imu2+0x2a>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002c48:	68d8      	ldr	r0, [r3, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002c4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c52:	619a      	str	r2, [r3, #24]
temp_val=LL_SPI_ReceiveData8(SPI1);

LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_IMU2_CS_Pin);
return temp_val;
}
 8002c54:	b2c0      	uxtb	r0, r0
 8002c56:	bd10      	pop	{r4, pc}
 8002c58:	40013000 	.word	0x40013000

08002c5c <MCP_write>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8002c5c:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <MCP_write+0x58>)
 8002c5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000

//void MCP_write(uint8_t adress, uint8_t data)
void MCP_write(int adress, int data){
 8002c62:	b510      	push	{r4, lr}
 8002c64:	629a      	str	r2, [r3, #40]	; 0x28
LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_PORT, SPI2_CS_PIN);

while(!(SPI2->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002c66:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <MCP_write+0x5c>)
 8002c68:	461a      	mov	r2, r3
 8002c6a:	689c      	ldr	r4, [r3, #8]
 8002c6c:	07a4      	lsls	r4, r4, #30
 8002c6e:	d5fc      	bpl.n	8002c6a <MCP_write+0xe>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002c70:	2402      	movs	r4, #2
 8002c72:	731c      	strb	r4, [r3, #12]
LL_SPI_TransmitData8(SPI2,0x02);
while(!(SPI2->SR & SPI_SR_RXNE)); //data received?
 8002c74:	6893      	ldr	r3, [r2, #8]
 8002c76:	07db      	lsls	r3, r3, #31
 8002c78:	d5fc      	bpl.n	8002c74 <MCP_write+0x18>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002c7a:	68d3      	ldr	r3, [r2, #12]
LL_SPI_ReceiveData8(SPI2);


while(!(SPI2->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <MCP_write+0x5c>)
 8002c7e:	461a      	mov	r2, r3
 8002c80:	689c      	ldr	r4, [r3, #8]
 8002c82:	07a4      	lsls	r4, r4, #30
 8002c84:	d5fc      	bpl.n	8002c80 <MCP_write+0x24>
LL_SPI_TransmitData8(SPI2,adress);
 8002c86:	b2c0      	uxtb	r0, r0
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002c88:	7318      	strb	r0, [r3, #12]
while(!(SPI2->SR & SPI_SR_RXNE)); //data received?
 8002c8a:	6893      	ldr	r3, [r2, #8]
 8002c8c:	07dc      	lsls	r4, r3, #31
 8002c8e:	d5fc      	bpl.n	8002c8a <MCP_write+0x2e>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002c90:	68d3      	ldr	r3, [r2, #12]
LL_SPI_ReceiveData8(SPI2);

while(!(SPI2->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <MCP_write+0x5c>)
 8002c94:	461a      	mov	r2, r3
 8002c96:	6898      	ldr	r0, [r3, #8]
 8002c98:	0780      	lsls	r0, r0, #30
 8002c9a:	d5fc      	bpl.n	8002c96 <MCP_write+0x3a>
LL_SPI_TransmitData8(SPI2,data);
 8002c9c:	b2c9      	uxtb	r1, r1
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002c9e:	7319      	strb	r1, [r3, #12]
while(!(SPI2->SR & SPI_SR_RXNE)); //data received?
 8002ca0:	6893      	ldr	r3, [r2, #8]
 8002ca2:	07db      	lsls	r3, r3, #31
 8002ca4:	d5fc      	bpl.n	8002ca0 <MCP_write+0x44>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002ca6:	68d3      	ldr	r3, [r2, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002ca8:	4b02      	ldr	r3, [pc, #8]	; (8002cb4 <MCP_write+0x58>)
 8002caa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cae:	619a      	str	r2, [r3, #24]
 8002cb0:	bd10      	pop	{r4, pc}
 8002cb2:	bf00      	nop
 8002cb4:	48000400 	.word	0x48000400
 8002cb8:	40003800 	.word	0x40003800

08002cbc <ReadRegs1>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8002cbc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);  // PC4 CS SET Active Low

}

void ReadRegs1( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
 8002cc0:	b530      	push	{r4, r5, lr}
 8002cc2:	f44f 7480 	mov.w	r4, #256	; 0x100
 8002cc6:	629c      	str	r4, [r3, #40]	; 0x28
	unsigned int  i = 0;
	LL_GPIO_ResetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN); // PA4 CS RESET Active Low

	while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002cc8:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <ReadRegs1+0x50>)
 8002cca:	461c      	mov	r4, r3
 8002ccc:	689d      	ldr	r5, [r3, #8]
 8002cce:	07ad      	lsls	r5, r5, #30
 8002cd0:	d5fc      	bpl.n	8002ccc <ReadRegs1+0x10>
	LL_SPI_TransmitData8(SPI1,(ReadAddr | 0x80));  // (Starting Address 0x22 | 0x80); MSB is '1' for 0x80, next 7 bit Address of register to write 0x22
 8002cd2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002cd6:	7318      	strb	r0, [r3, #12]
	while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8002cd8:	68a3      	ldr	r3, [r4, #8]
 8002cda:	07db      	lsls	r3, r3, #31
 8002cdc:	d5fc      	bpl.n	8002cd8 <ReadRegs1+0x1c>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002cde:	68e3      	ldr	r3, [r4, #12]
	LL_SPI_ReceiveData8(SPI1);

	for (i = 0; i < Bytes; i++)
	{
			  while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <ReadRegs1+0x50>)
 8002ce2:	440a      	add	r2, r1
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002ce4:	2000      	movs	r0, #0
	for (i = 0; i < Bytes; i++)
 8002ce6:	4291      	cmp	r1, r2
 8002ce8:	d105      	bne.n	8002cf6 <ReadRegs1+0x3a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002cea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002cee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cf2:	619a      	str	r2, [r3, #24]
 8002cf4:	bd30      	pop	{r4, r5, pc}
			  while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002cf6:	689c      	ldr	r4, [r3, #8]
 8002cf8:	07a5      	lsls	r5, r4, #30
 8002cfa:	d5fc      	bpl.n	8002cf6 <ReadRegs1+0x3a>
 8002cfc:	7318      	strb	r0, [r3, #12]
			  LL_SPI_TransmitData8(SPI1,0x00);

				while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8002cfe:	689c      	ldr	r4, [r3, #8]
 8002d00:	07e4      	lsls	r4, r4, #31
 8002d02:	d5fc      	bpl.n	8002cfe <ReadRegs1+0x42>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002d04:	68dc      	ldr	r4, [r3, #12]
 8002d06:	f801 4b01 	strb.w	r4, [r1], #1
 8002d0a:	e7ec      	b.n	8002ce6 <ReadRegs1+0x2a>
 8002d0c:	40013000 	.word	0x40013000

08002d10 <ReadRegs1_imu2>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8002d10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000


}

void ReadRegs1_imu2( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
 8002d14:	b530      	push	{r4, r5, lr}
 8002d16:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8002d1a:	629c      	str	r4, [r3, #40]	; 0x28
	unsigned int  i = 0;
	LL_GPIO_ResetOutputPin(SPI1_IMU2_CS_GPIO_Port, SPI1_IMU2_CS_Pin); // PA4 CS RESET Active Low

	while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <ReadRegs1_imu2+0x50>)
 8002d1e:	461c      	mov	r4, r3
 8002d20:	689d      	ldr	r5, [r3, #8]
 8002d22:	07ad      	lsls	r5, r5, #30
 8002d24:	d5fc      	bpl.n	8002d20 <ReadRegs1_imu2+0x10>
	LL_SPI_TransmitData8(SPI1,(ReadAddr | 0x80));  // (Starting Address 0x22 | 0x80); MSB is '1' for 0x80, next 7 bit Address of register to write 0x22
 8002d26:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002d2a:	7318      	strb	r0, [r3, #12]
	while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8002d2c:	68a3      	ldr	r3, [r4, #8]
 8002d2e:	07db      	lsls	r3, r3, #31
 8002d30:	d5fc      	bpl.n	8002d2c <ReadRegs1_imu2+0x1c>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002d32:	68e3      	ldr	r3, [r4, #12]
	LL_SPI_ReceiveData8(SPI1);

	for (i = 0; i < Bytes; i++)
	{
			  while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002d34:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <ReadRegs1_imu2+0x50>)
 8002d36:	440a      	add	r2, r1
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002d38:	2000      	movs	r0, #0
	for (i = 0; i < Bytes; i++)
 8002d3a:	4291      	cmp	r1, r2
 8002d3c:	d105      	bne.n	8002d4a <ReadRegs1_imu2+0x3a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002d3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d46:	619a      	str	r2, [r3, #24]
 8002d48:	bd30      	pop	{r4, r5, pc}
			  while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002d4a:	689c      	ldr	r4, [r3, #8]
 8002d4c:	07a5      	lsls	r5, r4, #30
 8002d4e:	d5fc      	bpl.n	8002d4a <ReadRegs1_imu2+0x3a>
 8002d50:	7318      	strb	r0, [r3, #12]
			  LL_SPI_TransmitData8(SPI1,0x00);

				while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8002d52:	689c      	ldr	r4, [r3, #8]
 8002d54:	07e4      	lsls	r4, r4, #31
 8002d56:	d5fc      	bpl.n	8002d52 <ReadRegs1_imu2+0x42>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002d58:	68dc      	ldr	r4, [r3, #12]
 8002d5a:	f801 4b01 	strb.w	r4, [r1], #1
 8002d5e:	e7ec      	b.n	8002d3a <ReadRegs1_imu2+0x2a>
 8002d60:	40013000 	.word	0x40013000

08002d64 <ReadRegs3>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8002d64:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <ReadRegs3+0x5c>)


}

void ReadRegs3( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
 8002d66:	b570      	push	{r4, r5, r6, lr}
 8002d68:	4615      	mov	r5, r2
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	629a      	str	r2, [r3, #40]	; 0x28
 8002d6e:	4606      	mov	r6, r0
	unsigned int  i = 0;
	LL_GPIO_ResetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN); // PA4 CS RESET Active Low // change here for IMU5
	delay_us(10);
 8002d70:	200a      	movs	r0, #10
{
 8002d72:	460c      	mov	r4, r1
	delay_us(10);
 8002d74:	f001 fb66 	bl	8004444 <delay_us>
	while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <ReadRegs3+0x60>)
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	6899      	ldr	r1, [r3, #8]
 8002d7e:	0789      	lsls	r1, r1, #30
 8002d80:	d5fc      	bpl.n	8002d7c <ReadRegs3+0x18>
	LL_SPI_TransmitData8(SPI3,(ReadAddr | 0x80));  // (Starting Address 0x22 | 0x80); MSB is '1' for 0x80, next 7 bit Address of register to write 0x22
 8002d82:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002d86:	731e      	strb	r6, [r3, #12]
	while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8002d88:	6893      	ldr	r3, [r2, #8]
 8002d8a:	07de      	lsls	r6, r3, #31
 8002d8c:	d5fc      	bpl.n	8002d88 <ReadRegs3+0x24>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002d8e:	68d3      	ldr	r3, [r2, #12]
	LL_SPI_ReceiveData8(SPI3);

	for (i = 0; i < Bytes; i++)
	{
			  while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <ReadRegs3+0x60>)
 8002d92:	4621      	mov	r1, r4
 8002d94:	4425      	add	r5, r4
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002d96:	2200      	movs	r2, #0
	for (i = 0; i < Bytes; i++)
 8002d98:	42a9      	cmp	r1, r5
 8002d9a:	d106      	bne.n	8002daa <ReadRegs3+0x46>

				while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
				ReadBuf[i]= LL_SPI_ReceiveData8(SPI3);

		}
	delay_us(5);
 8002d9c:	2005      	movs	r0, #5
 8002d9e:	f001 fb51 	bl	8004444 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002da2:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <ReadRegs3+0x5c>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	619a      	str	r2, [r3, #24]
 8002da8:	bd70      	pop	{r4, r5, r6, pc}
			  while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002daa:	6898      	ldr	r0, [r3, #8]
 8002dac:	0784      	lsls	r4, r0, #30
 8002dae:	d5fc      	bpl.n	8002daa <ReadRegs3+0x46>
 8002db0:	731a      	strb	r2, [r3, #12]
				while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8002db2:	6898      	ldr	r0, [r3, #8]
 8002db4:	07c0      	lsls	r0, r0, #31
 8002db6:	d5fc      	bpl.n	8002db2 <ReadRegs3+0x4e>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002db8:	68d8      	ldr	r0, [r3, #12]
 8002dba:	f801 0b01 	strb.w	r0, [r1], #1
 8002dbe:	e7eb      	b.n	8002d98 <ReadRegs3+0x34>
 8002dc0:	48001c00 	.word	0x48001c00
 8002dc4:	40003c00 	.word	0x40003c00

08002dc8 <ReadRegs3_imu5>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8002dc8:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <ReadRegs3_imu5+0x5c>)


}

void ReadRegs3_imu5( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
 8002dca:	b570      	push	{r4, r5, r6, lr}
 8002dcc:	4615      	mov	r5, r2
 8002dce:	2202      	movs	r2, #2
 8002dd0:	629a      	str	r2, [r3, #40]	; 0x28
 8002dd2:	4606      	mov	r6, r0
	unsigned int  i = 0;
	LL_GPIO_ResetOutputPin(SPI3_IMU5_CS_GPIO_Port, SPI3_IMU5_CS_Pin); // PA4 CS RESET Active Low // change here for IMU5
	delay_us(10);
 8002dd4:	200a      	movs	r0, #10
{
 8002dd6:	460c      	mov	r4, r1
	delay_us(10);
 8002dd8:	f001 fb34 	bl	8004444 <delay_us>
	while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <ReadRegs3_imu5+0x60>)
 8002dde:	461a      	mov	r2, r3
 8002de0:	6899      	ldr	r1, [r3, #8]
 8002de2:	0789      	lsls	r1, r1, #30
 8002de4:	d5fc      	bpl.n	8002de0 <ReadRegs3_imu5+0x18>
	LL_SPI_TransmitData8(SPI3,(ReadAddr | 0x80));  // (Starting Address 0x22 | 0x80); MSB is '1' for 0x80, next 7 bit Address of register to write 0x22
 8002de6:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002dea:	731e      	strb	r6, [r3, #12]
	while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8002dec:	6893      	ldr	r3, [r2, #8]
 8002dee:	07de      	lsls	r6, r3, #31
 8002df0:	d5fc      	bpl.n	8002dec <ReadRegs3_imu5+0x24>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002df2:	68d3      	ldr	r3, [r2, #12]
	LL_SPI_ReceiveData8(SPI3);

	for (i = 0; i < Bytes; i++)
	{
			  while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <ReadRegs3_imu5+0x60>)
 8002df6:	4621      	mov	r1, r4
 8002df8:	4425      	add	r5, r4
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002dfa:	2200      	movs	r2, #0
	for (i = 0; i < Bytes; i++)
 8002dfc:	42a9      	cmp	r1, r5
 8002dfe:	d106      	bne.n	8002e0e <ReadRegs3_imu5+0x46>

				while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
				ReadBuf[i]= LL_SPI_ReceiveData8(SPI3);

		}
	delay_us(5);
 8002e00:	2005      	movs	r0, #5
 8002e02:	f001 fb1f 	bl	8004444 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <ReadRegs3_imu5+0x5c>)
 8002e08:	2202      	movs	r2, #2
 8002e0a:	619a      	str	r2, [r3, #24]
 8002e0c:	bd70      	pop	{r4, r5, r6, pc}
			  while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8002e0e:	6898      	ldr	r0, [r3, #8]
 8002e10:	0784      	lsls	r4, r0, #30
 8002e12:	d5fc      	bpl.n	8002e0e <ReadRegs3_imu5+0x46>
 8002e14:	731a      	strb	r2, [r3, #12]
				while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8002e16:	6898      	ldr	r0, [r3, #8]
 8002e18:	07c0      	lsls	r0, r0, #31
 8002e1a:	d5fc      	bpl.n	8002e16 <ReadRegs3_imu5+0x4e>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002e1c:	68d8      	ldr	r0, [r3, #12]
 8002e1e:	f801 0b01 	strb.w	r0, [r1], #1
 8002e22:	e7eb      	b.n	8002dfc <ReadRegs3_imu5+0x34>
 8002e24:	48001c00 	.word	0x48001c00
 8002e28:	40003c00 	.word	0x40003c00

08002e2c <F_Sensor_ADC_Store>:
}


//Toe: ADC1_Ch3_PC2=ADC1  Heel: ADC2_Ch4_PC3=ADC2
void F_Sensor_ADC_Store(void)
{
 8002e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// ADC3 Ch1 PC0 read
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8002e30:	4a4e      	ldr	r2, [pc, #312]	; (8002f6c <F_Sensor_ADC_Store+0x140>)
 8002e32:	484f      	ldr	r0, [pc, #316]	; (8002f70 <F_Sensor_ADC_Store+0x144>)

	  LL_ADC_REG_StartConversion(ADC3);
	  ADC_TimeOut_Count_Buf=0;
	  ADC_Error_Buf=0;
 8002e34:	4f4f      	ldr	r7, [pc, #316]	; (8002f74 <F_Sensor_ADC_Store+0x148>)
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8002e36:	2106      	movs	r1, #6
 8002e38:	f7fe ff30 	bl	8001c9c <LL_ADC_REG_SetSequencerRanks>
	  LL_ADC_REG_StartConversion(ADC3);
 8002e3c:	484c      	ldr	r0, [pc, #304]	; (8002f70 <F_Sensor_ADC_Store+0x144>)
 8002e3e:	f7fe fee3 	bl	8001c08 <LL_ADC_REG_StartConversion>
	  ADC_TimeOut_Count_Buf=0;
 8002e42:	4b4d      	ldr	r3, [pc, #308]	; (8002f78 <F_Sensor_ADC_Store+0x14c>)
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002e44:	484a      	ldr	r0, [pc, #296]	; (8002f70 <F_Sensor_ADC_Store+0x144>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	4698      	mov	r8, r3
	  ADC_Error_Buf=0;
 8002e4c:	703a      	strb	r2, [r7, #0]
 8002e4e:	4681      	mov	r9, r0
 8002e50:	6803      	ldr	r3, [r0, #0]
	  while ((LL_ADC_IsActiveFlag_EOC(ADC3) == 0))
 8002e52:	075c      	lsls	r4, r3, #29
 8002e54:	d57e      	bpl.n	8002f54 <F_Sensor_ADC_Store+0x128>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002e56:	2304      	movs	r3, #4
	  {
		  Wait_for_ADC_timeout_While_Datalog();
	  }
	  LL_ADC_ClearFlag_EOC(ADC3);
	  // toe uninstrumented side
	  BSbuffer[s_flag].other_fsr1[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC3), LL_ADC_RESOLUTION_12B);  // Toe
 8002e58:	4e48      	ldr	r6, [pc, #288]	; (8002f7c <F_Sensor_ADC_Store+0x150>)
 8002e5a:	4d49      	ldr	r5, [pc, #292]	; (8002f80 <F_Sensor_ADC_Store+0x154>)
 8002e5c:	6003      	str	r3, [r0, #0]
 8002e5e:	7831      	ldrb	r1, [r6, #0]
 8002e60:	682b      	ldr	r3, [r5, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002e62:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002e64:	4c47      	ldr	r4, [pc, #284]	; (8002f84 <F_Sensor_ADC_Store+0x158>)


	  LL_ADC_REG_StartConversion(ADC2);
 8002e66:	4848      	ldr	r0, [pc, #288]	; (8002f88 <F_Sensor_ADC_Store+0x15c>)
	  BSbuffer[s_flag].other_fsr1[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC3), LL_ADC_RESOLUTION_12B);  // Toe
 8002e68:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 8002e6c:	f503 53ba 	add.w	r3, r3, #5952	; 0x1740
 8002e70:	3304      	adds	r3, #4
 8002e72:	b291      	uxth	r1, r2
 8002e74:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8002e78:	434a      	muls	r2, r1
 8002e7a:	f640 71ff 	movw	r1, #4095	; 0xfff
 8002e7e:	fbb2 f2f1 	udiv	r2, r2, r1
 8002e82:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	  LL_ADC_REG_StartConversion(ADC2);
 8002e86:	f7fe febf 	bl	8001c08 <LL_ADC_REG_StartConversion>
	  ADC_TimeOut_Count_Buf=0;
 8002e8a:	2300      	movs	r3, #0
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002e8c:	483e      	ldr	r0, [pc, #248]	; (8002f88 <F_Sensor_ADC_Store+0x15c>)
 8002e8e:	f8c8 3000 	str.w	r3, [r8]
	  ADC_Error_Buf=0;
 8002e92:	703b      	strb	r3, [r7, #0]
 8002e94:	6803      	ldr	r3, [r0, #0]
	  while ((LL_ADC_IsActiveFlag_EOC(ADC2) == 0))
 8002e96:	0759      	lsls	r1, r3, #29
 8002e98:	d55f      	bpl.n	8002f5a <F_Sensor_ADC_Store+0x12e>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	6003      	str	r3, [r0, #0]
	  {
		  Wait_for_ADC_timeout_While_Datalog();
	  }
	  LL_ADC_ClearFlag_EOC(ADC2);
	  BSbuffer[s_flag].Flex2[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC2), LL_ADC_RESOLUTION_12B);  // Toe
 8002e9e:	7831      	ldrb	r1, [r6, #0]
 8002ea0:	682b      	ldr	r3, [r5, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002ea2:	6c02      	ldr	r2, [r0, #64]	; 0x40


	  LL_ADC_REG_StartConversion(ADC1);
 8002ea4:	4839      	ldr	r0, [pc, #228]	; (8002f8c <F_Sensor_ADC_Store+0x160>)
	  BSbuffer[s_flag].Flex2[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC2), LL_ADC_RESOLUTION_12B);  // Toe
 8002ea6:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 8002eaa:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002eae:	3308      	adds	r3, #8
 8002eb0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002eb4:	b291      	uxth	r1, r2
 8002eb6:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8002eba:	434a      	muls	r2, r1
 8002ebc:	f640 71ff 	movw	r1, #4095	; 0xfff
 8002ec0:	fbb2 f2f1 	udiv	r2, r2, r1
 8002ec4:	809a      	strh	r2, [r3, #4]
	  LL_ADC_REG_StartConversion(ADC1);
 8002ec6:	f7fe fe9f 	bl	8001c08 <LL_ADC_REG_StartConversion>
	  ADC_TimeOut_Count_Buf=0;
 8002eca:	2300      	movs	r3, #0
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002ecc:	482f      	ldr	r0, [pc, #188]	; (8002f8c <F_Sensor_ADC_Store+0x160>)
 8002ece:	f8c8 3000 	str.w	r3, [r8]
	  ADC_Error_Buf=0;
 8002ed2:	703b      	strb	r3, [r7, #0]
 8002ed4:	6803      	ldr	r3, [r0, #0]
	  while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0))
 8002ed6:	075a      	lsls	r2, r3, #29
 8002ed8:	d542      	bpl.n	8002f60 <F_Sensor_ADC_Store+0x134>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002eda:	2304      	movs	r3, #4
 8002edc:	6003      	str	r3, [r0, #0]
	  {
		  Wait_for_ADC_timeout_While_Datalog();
	  }
	  LL_ADC_ClearFlag_EOC(ADC1);
	  BSbuffer[s_flag].Flex1[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC1), LL_ADC_RESOLUTION_12B);  //Heel
 8002ede:	7831      	ldrb	r1, [r6, #0]
 8002ee0:	682b      	ldr	r3, [r5, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002ee2:	6c02      	ldr	r2, [r0, #64]	; 0x40


	  // ADC3 Ch2 PC1 read

		LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8002ee4:	4822      	ldr	r0, [pc, #136]	; (8002f70 <F_Sensor_ADC_Store+0x144>)
	  BSbuffer[s_flag].Flex1[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC1), LL_ADC_RESOLUTION_12B);  //Heel
 8002ee6:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 8002eea:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 8002eee:	3310      	adds	r3, #16
 8002ef0:	b291      	uxth	r1, r2
 8002ef2:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8002ef6:	434a      	muls	r2, r1
 8002ef8:	f640 71ff 	movw	r1, #4095	; 0xfff
 8002efc:	fbb2 f2f1 	udiv	r2, r2, r1
		LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8002f00:	2106      	movs	r1, #6
	  BSbuffer[s_flag].Flex1[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC1), LL_ADC_RESOLUTION_12B);  //Heel
 8002f02:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8002f06:	4a22      	ldr	r2, [pc, #136]	; (8002f90 <F_Sensor_ADC_Store+0x164>)
 8002f08:	f7fe fec8 	bl	8001c9c <LL_ADC_REG_SetSequencerRanks>

		  LL_ADC_REG_StartConversion(ADC3);
 8002f0c:	4818      	ldr	r0, [pc, #96]	; (8002f70 <F_Sensor_ADC_Store+0x144>)
 8002f0e:	f7fe fe7b 	bl	8001c08 <LL_ADC_REG_StartConversion>
		  ADC_TimeOut_Count_Buf=0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8c8 3000 	str.w	r3, [r8]
		  ADC_Error_Buf=0;
 8002f18:	703b      	strb	r3, [r7, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002f1a:	f8d9 3000 	ldr.w	r3, [r9]
		  while ((LL_ADC_IsActiveFlag_EOC(ADC3) == 0))
 8002f1e:	075b      	lsls	r3, r3, #29
 8002f20:	d521      	bpl.n	8002f66 <F_Sensor_ADC_Store+0x13a>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002f22:	2304      	movs	r3, #4
 8002f24:	f8c9 3000 	str.w	r3, [r9]
		  {
			  Wait_for_ADC_timeout_While_Datalog();
		  }
		  LL_ADC_ClearFlag_EOC(ADC3);
		  // heel uninstrumented side
		  BSbuffer[s_flag].other_fsr2[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC3), LL_ADC_RESOLUTION_12B);  // Toe
 8002f28:	7831      	ldrb	r1, [r6, #0]
 8002f2a:	682b      	ldr	r3, [r5, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002f2c:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
 8002f30:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 8002f34:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8002f38:	331c      	adds	r3, #28
 8002f3a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8002f3e:	b292      	uxth	r2, r2
 8002f40:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8002f44:	4353      	muls	r3, r2
 8002f46:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002f4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f4e:	80a3      	strh	r3, [r4, #4]
 8002f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		  Wait_for_ADC_timeout_While_Datalog();
 8002f54:	f7ff fbb4 	bl	80026c0 <Wait_for_ADC_timeout_While_Datalog>
 8002f58:	e77a      	b.n	8002e50 <F_Sensor_ADC_Store+0x24>
		  Wait_for_ADC_timeout_While_Datalog();
 8002f5a:	f7ff fbb1 	bl	80026c0 <Wait_for_ADC_timeout_While_Datalog>
 8002f5e:	e799      	b.n	8002e94 <F_Sensor_ADC_Store+0x68>
		  Wait_for_ADC_timeout_While_Datalog();
 8002f60:	f7ff fbae 	bl	80026c0 <Wait_for_ADC_timeout_While_Datalog>
 8002f64:	e7b6      	b.n	8002ed4 <F_Sensor_ADC_Store+0xa8>
			  Wait_for_ADC_timeout_While_Datalog();
 8002f66:	f7ff fbab 	bl	80026c0 <Wait_for_ADC_timeout_While_Datalog>
 8002f6a:	e7d6      	b.n	8002f1a <F_Sensor_ADC_Store+0xee>
 8002f6c:	04300002 	.word	0x04300002
 8002f70:	50040200 	.word	0x50040200
 8002f74:	20008f87 	.word	0x20008f87
 8002f78:	200089c8 	.word	0x200089c8
 8002f7c:	200005cc 	.word	0x200005cc
 8002f80:	200005a0 	.word	0x200005a0
 8002f84:	20000618 	.word	0x20000618
 8002f88:	50040100 	.word	0x50040100
 8002f8c:	50040000 	.word	0x50040000
 8002f90:	08600004 	.word	0x08600004

08002f94 <ACC_GPIO_INIT>:
}



void ACC_GPIO_INIT(void)
{
 8002f94:	b510      	push	{r4, lr}
	// Configure SCK Pin connected to PA5, MISO PA6, MOSI PA7
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_5, LL_GPIO_MODE_ALTERNATE);
 8002f96:	2202      	movs	r2, #2
 8002f98:	2120      	movs	r1, #32
 8002f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002f9e:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
 8002fa2:	f7fe fe65 	bl	8001c70 <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_5, LL_GPIO_AF_5);
 8002fa6:	2205      	movs	r2, #5
 8002fa8:	2120      	movs	r1, #32
 8002faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fae:	f7fe feba 	bl	8001d26 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_5, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8002fb2:	2120      	movs	r1, #32
 8002fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fb8:	f7fe fee1 	bl	8001d7e <LL_GPIO_SetPinSpeed.constprop.6>
 8002fbc:	6863      	ldr	r3, [r4, #4]
 8002fbe:	f023 0320 	bic.w	r3, r3, #32
 8002fc2:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_5, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_5, LL_GPIO_PULL_NO);
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2120      	movs	r1, #32
 8002fca:	f7fe fec2 	bl	8001d52 <LL_GPIO_SetPinPull>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 8002fce:	4620      	mov	r0, r4
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	2140      	movs	r1, #64	; 0x40
 8002fd4:	f7fe fe4c 	bl	8001c70 <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_6, LL_GPIO_AF_5);
 8002fd8:	2205      	movs	r2, #5
 8002fda:	4620      	mov	r0, r4
 8002fdc:	2140      	movs	r1, #64	; 0x40
 8002fde:	f7fe fea2 	bl	8001d26 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	2140      	movs	r1, #64	; 0x40
 8002fe6:	f7fe feca 	bl	8001d7e <LL_GPIO_SetPinSpeed.constprop.6>
 8002fea:	6863      	ldr	r3, [r4, #4]
 8002fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ff0:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_6, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_6 , LL_GPIO_PULL_NO);
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2140      	movs	r1, #64	; 0x40
 8002ff8:	f7fe feab 	bl	8001d52 <LL_GPIO_SetPinPull>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_ALTERNATE);
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	2202      	movs	r2, #2
 8003000:	2180      	movs	r1, #128	; 0x80
 8003002:	f7fe fe35 	bl	8001c70 <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_7, LL_GPIO_AF_5);
 8003006:	2205      	movs	r2, #5
 8003008:	4620      	mov	r0, r4
 800300a:	2180      	movs	r1, #128	; 0x80
 800300c:	f7fe fe8b 	bl	8001d26 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_7, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8003010:	4620      	mov	r0, r4
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	f7fe feb3 	bl	8001d7e <LL_GPIO_SetPinSpeed.constprop.6>
 8003018:	6863      	ldr	r3, [r4, #4]
 800301a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800301e:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_7, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_7, LL_GPIO_PULL_NO);
 8003020:	4620      	mov	r0, r4
 8003022:	2200      	movs	r2, #0
 8003024:	2180      	movs	r1, #128	; 0x80
}
 8003026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_7, LL_GPIO_PULL_NO);
 800302a:	f7fe be92 	b.w	8001d52 <LL_GPIO_SetPinPull>
	...

08003030 <P_IMU1_SPI1_Init>:
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_15, LL_GPIO_PULL_NO);
}


void P_IMU1_SPI1_Init(void)  //MPU9250
{
 8003030:	b508      	push	{r3, lr}

LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003032:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003036:	f7fe fe0d 	bl	8001c54 <LL_APB2_GRP1_EnableClock>

ACC_GPIO_INIT();
 800303a:	f7ff ffab 	bl	8002f94 <ACC_GPIO_INIT>
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 800303e:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <P_IMU1_SPI1_Init+0x7c>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8003046:	f042 0208 	orr.w	r2, r2, #8
 800304a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8003052:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	f042 0202 	orr.w	r2, r2, #2
 8003062:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800306a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8003072:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003076:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	f022 0204 	bic.w	r2, r2, #4
 8003086:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800308e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	f442 7282 	orr.w	r2, r2, #260	; 0x104
 8003096:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800309e:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	f042 0208 	orr.w	r2, r2, #8
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	bd08      	pop	{r3, pc}
 80030aa:	bf00      	nop
 80030ac:	40013000 	.word	0x40013000

080030b0 <MCP_setup>:

}


void MCP_setup(void)
{
 80030b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LL_SPI_InitTypeDef SPI_InitStruct;

	  LL_GPIO_InitTypeDef GPIO_InitStruct;

	  /* Peripheral clock enable */
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80030b4:	2004      	movs	r0, #4
{
 80030b6:	b090      	sub	sp, #64	; 0x40
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80030b8:	f7fe fdb0 	bl	8001c1c <LL_AHB2_GRP1_EnableClock>
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
	  LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 80030bc:	4e2e      	ldr	r6, [pc, #184]	; (8003178 <MCP_setup+0xc8>)
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80030be:	2002      	movs	r0, #2
 80030c0:	f7fe fdac 	bl	8001c1c <LL_AHB2_GRP1_EnableClock>
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80030c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80030c8:	2400      	movs	r4, #0
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80030ca:	f7fe fdb5 	bl	8001c38 <LL_APB1_GRP1_EnableClock>
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80030ce:	2502      	movs	r5, #2
 80030d0:	f04f 0803 	mov.w	r8, #3
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80030d4:	2705      	movs	r7, #5
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80030d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	  LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 80030da:	4669      	mov	r1, sp
 80030dc:	4630      	mov	r0, r6
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80030de:	e88d 0128 	stmia.w	sp, {r3, r5, r8}
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80030e2:	9403      	str	r4, [sp, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80030e4:	9404      	str	r4, [sp, #16]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80030e6:	9705      	str	r7, [sp, #20]
	  LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 80030e8:	f004 ff46 	bl	8007f78 <LL_GPIO_Init>

	  GPIO_InitStruct.Pin = SPI2_MISO_IMU_PIN;
 80030ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
	  LL_GPIO_Init(SPI2_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 80030f0:	4669      	mov	r1, sp
 80030f2:	4630      	mov	r0, r6
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80030f4:	e88d 0128 	stmia.w	sp, {r3, r5, r8}
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80030f8:	9403      	str	r4, [sp, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80030fa:	9404      	str	r4, [sp, #16]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80030fc:	9705      	str	r7, [sp, #20]
	  LL_GPIO_Init(SPI2_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 80030fe:	f004 ff3b 	bl	8007f78 <LL_GPIO_Init>

	  GPIO_InitStruct.Pin = SPI2_MOSI_IMU_PIN;
 8003102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
	  LL_GPIO_Init(SPI2_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 8003106:	4669      	mov	r1, sp
 8003108:	4630      	mov	r0, r6
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800310a:	e88d 0128 	stmia.w	sp, {r3, r5, r8}
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800310e:	9403      	str	r4, [sp, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003110:	9404      	str	r4, [sp, #16]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003112:	9705      	str	r7, [sp, #20]
	  LL_GPIO_Init(SPI2_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 8003114:	f004 ff30 	bl	8007f78 <LL_GPIO_Init>


	  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
	  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003118:	f44f 7382 	mov.w	r3, #260	; 0x104
 800311c:	9307      	str	r3, [sp, #28]
	  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800311e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003122:	9308      	str	r3, [sp, #32]
	  /*Mode 3 (Mode 1,1) */
	  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH; /*Clock 1 when idle and 0 when active */
	  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE; //Second clock transition is the first data capture edge
 8003124:	2301      	movs	r3, #1
	  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003126:	9406      	str	r4, [sp, #24]
	  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE; //Second clock transition is the first data capture edge
 8003128:	930a      	str	r3, [sp, #40]	; 0x28
	  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;

	  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
	  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800312a:	940d      	str	r4, [sp, #52]	; 0x34
	  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800312c:	940e      	str	r4, [sp, #56]	; 0x38
	  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800312e:	f44f 7300 	mov.w	r3, #512	; 0x200
	  SPI_InitStruct.CRCPoly = 7; //?
	  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003132:	4c12      	ldr	r4, [pc, #72]	; (800317c <MCP_setup+0xcc>)
	  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003134:	930b      	str	r3, [sp, #44]	; 0x2c
	  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8003136:	2320      	movs	r3, #32
 8003138:	930c      	str	r3, [sp, #48]	; 0x30
	  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800313a:	a906      	add	r1, sp, #24
	  SPI_InitStruct.CRCPoly = 7; //?
 800313c:	2307      	movs	r3, #7
	  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800313e:	4620      	mov	r0, r4
	  SPI_InitStruct.CRCPoly = 7; //?
 8003140:	930f      	str	r3, [sp, #60]	; 0x3c
	  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH; /*Clock 1 when idle and 0 when active */
 8003142:	9509      	str	r5, [sp, #36]	; 0x24
	  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8003144:	f005 f9e6 	bl	8008514 <LL_SPI_Init>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8003148:	6863      	ldr	r3, [r4, #4]
 800314a:	f023 0308 	bic.w	r3, r3, #8
 800314e:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8003150:	6863      	ldr	r3, [r4, #4]
 8003152:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003156:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8003158:	6863      	ldr	r3, [r4, #4]
 800315a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800315e:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003166:	6023      	str	r3, [r4, #0]

	  LL_SPI_SetRxFIFOThreshold(SPI2,LL_SPI_RX_FIFO_TH_QUARTER);
	  LL_SPI_DisableIT_RXNE(SPI2);
	  LL_SPI_Enable(SPI2);

	  delay_us(10000);
 8003168:	f242 7010 	movw	r0, #10000	; 0x2710
 800316c:	f001 f96a 	bl	8004444 <delay_us>


}
 8003170:	b010      	add	sp, #64	; 0x40
 8003172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003176:	bf00      	nop
 8003178:	48000400 	.word	0x48000400
 800317c:	40003800 	.word	0x40003800

08003180 <MCP_SPI2_Initialization_at_reset>:
{	LL_GPIO_SetOutputPin(SPI2_CS_GPIO_PORT, SPI2_CS_PIN); // PA4 CS SET Active Low
 8003180:	b508      	push	{r3, lr}
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003182:	4b06      	ldr	r3, [pc, #24]	; (800319c <MCP_SPI2_Initialization_at_reset+0x1c>)
 8003184:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003188:	619a      	str	r2, [r3, #24]
	MCP_setup();
 800318a:	f7ff ff91 	bl	80030b0 <MCP_setup>
	MCP_reset();
 800318e:	f7ff fa7f 	bl	8002690 <MCP_reset>
	delay_us(70000);
 8003192:	4803      	ldr	r0, [pc, #12]	; (80031a0 <MCP_SPI2_Initialization_at_reset+0x20>)
}
 8003194:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_us(70000);
 8003198:	f001 b954 	b.w	8004444 <delay_us>
 800319c:	48000400 	.word	0x48000400
 80031a0:	00011170 	.word	0x00011170

080031a4 <Configure_USART_1>:

}


void Configure_USART_1(void)   // USART1: PB6-Tx, (PA10-Rx disabled)
{
 80031a4:	b510      	push	{r4, lr}

// Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up
LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 80031a6:	4c18      	ldr	r4, [pc, #96]	; (8003208 <Configure_USART_1+0x64>)
 80031a8:	2202      	movs	r2, #2
 80031aa:	2140      	movs	r1, #64	; 0x40
 80031ac:	4620      	mov	r0, r4
 80031ae:	f7fe fd5f 	bl	8001c70 <LL_GPIO_SetPinMode>
LL_GPIO_SetAFPin_0_7(GPIOB, LL_GPIO_PIN_6, LL_GPIO_AF_7);
 80031b2:	2207      	movs	r2, #7
 80031b4:	2140      	movs	r1, #64	; 0x40
 80031b6:	4620      	mov	r0, r4
 80031b8:	f7fe fdb5 	bl	8001d26 <LL_GPIO_SetAFPin_0_7>
LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 80031bc:	2140      	movs	r1, #64	; 0x40
 80031be:	4620      	mov	r0, r4
 80031c0:	f7fe fddd 	bl	8001d7e <LL_GPIO_SetPinSpeed.constprop.6>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80031c4:	6863      	ldr	r3, [r4, #4]
 80031c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ca:	6063      	str	r3, [r4, #4]
LL_GPIO_SetPinOutputType(GPIOB, LL_GPIO_PIN_6, LL_GPIO_OUTPUT_PUSHPULL);
LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_UP);
 80031cc:	2201      	movs	r2, #1
 80031ce:	2140      	movs	r1, #64	; 0x40
 80031d0:	4620      	mov	r0, r4
 80031d2:	f7fe fdbe 	bl	8001d52 <LL_GPIO_SetPinPull>

RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1 clock enable, Clock source Default peripheral clock PCLK2, APB2
 80031d6:	4a0d      	ldr	r2, [pc, #52]	; (800320c <Configure_USART_1+0x68>)
 80031d8:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80031da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031de:	6613      	str	r3, [r2, #96]	; 0x60

// Default parameter: 8 data bit, 1 start bit, 1 stop bit, no parity, no hardware flow control

MODIFY_REG(USART1->CR1, USART_CR1_RE | USART_CR1_TE, (USART_CR1_TE |USART_CR1_RE));  // TX/RX direction BidirecttionalLL_USART_DIRECTION_TX_RX
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <Configure_USART_1+0x6c>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	f042 020c 	orr.w	r2, r2, #12
 80031e8:	601a      	str	r2, [r3, #0]

USART1->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(SystemCoreClock, 115200));  // Baud rate 115200
 80031ea:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <Configure_USART_1+0x70>)
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80031f2:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 80031f6:	fbb2 f2f1 	udiv	r2, r2, r1
 80031fa:	60da      	str	r2, [r3, #12]

USART1->CR1|= USART_CR1_UE;  // Unable USART1
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	bd10      	pop	{r4, pc}
 8003206:	bf00      	nop
 8003208:	48000400 	.word	0x48000400
 800320c:	40021000 	.word	0x40021000
 8003210:	40013800 	.word	0x40013800
 8003214:	20000014 	.word	0x20000014

08003218 <USART1_wr_print>:

void USART1_wr_print(uint8_t *buffer, uint32_t nBytes)
{
for (int i=0;i<nBytes;i++)
{
while(!(USART1->ISR & USART_ISR_TXE));
 8003218:	4b09      	ldr	r3, [pc, #36]	; (8003240 <USART1_wr_print+0x28>)
 800321a:	4401      	add	r1, r0
for (int i=0;i<nBytes;i++)
 800321c:	4288      	cmp	r0, r1
 800321e:	d100      	bne.n	8003222 <USART1_wr_print+0xa>
USART1->TDR= buffer[i]& 0xFF;

while(!(USART1->ISR & USART_ISR_TC));
USART1->ISR &= ~USART_ISR_TC;
}
}
 8003220:	4770      	bx	lr
while(!(USART1->ISR & USART_ISR_TXE));
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	0612      	lsls	r2, r2, #24
 8003226:	d5fc      	bpl.n	8003222 <USART1_wr_print+0xa>
USART1->TDR= buffer[i]& 0xFF;
 8003228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800322c:	851a      	strh	r2, [r3, #40]	; 0x28
while(!(USART1->ISR & USART_ISR_TC));
 800322e:	69da      	ldr	r2, [r3, #28]
 8003230:	0652      	lsls	r2, r2, #25
 8003232:	d5fc      	bpl.n	800322e <USART1_wr_print+0x16>
USART1->ISR &= ~USART_ISR_TC;
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800323a:	61da      	str	r2, [r3, #28]
 800323c:	e7ee      	b.n	800321c <USART1_wr_print+0x4>
 800323e:	bf00      	nop
 8003240:	40013800 	.word	0x40013800

08003244 <Clear_ErrorTimestamp_Buffer>:

int FPGA_Loop_Error_cnt;

void Clear_ErrorTimestamp_Buffer(void)
{
	ErrorCodeBuf=0;
 8003244:	4a02      	ldr	r2, [pc, #8]	; (8003250 <Clear_ErrorTimestamp_Buffer+0xc>)
 8003246:	2300      	movs	r3, #0
 8003248:	7013      	strb	r3, [r2, #0]
	ErrorTimeStampBuf=0;
 800324a:	4a02      	ldr	r2, [pc, #8]	; (8003254 <Clear_ErrorTimestamp_Buffer+0x10>)
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4770      	bx	lr
 8003250:	200086f8 	.word	0x200086f8
 8003254:	200086fc 	.word	0x200086fc

08003258 <Reset_All>:
{
 8003258:	b508      	push	{r3, lr}
	last_file=0;
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <Reset_All+0x38>)
 800325c:	2100      	movs	r1, #0
 800325e:	6019      	str	r1, [r3, #0]
	Sub_cnt=0;                // Array Index count in a single buffer to store values
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <Reset_All+0x3c>)
 8003262:	6019      	str	r1, [r3, #0]
	w_flag=1;                 // Buffer write flag to be written in FATFS file (1=Buffer1, 0=Buffer0)
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <Reset_All+0x40>)
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
	s_flag=0;                 // Buffer Store flag to be stored/filled by sensor values in interrupt (1=Buffer1, 0=Buffer0)
 800326a:	4b0c      	ldr	r3, [pc, #48]	; (800329c <Reset_All+0x44>)
 800326c:	7019      	strb	r1, [r3, #0]
	SD_write_Flag = 0;        // Flag to indicates whether a buffer a full and ready to write in SD card
 800326e:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <Reset_All+0x48>)
 8003270:	7019      	strb	r1, [r3, #0]
	SD_Write_Count = 0;       // Number of SD write. If reach a predefined value, f_sync() operation will update FATFS files.
 8003272:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <Reset_All+0x4c>)
 8003274:	7019      	strb	r1, [r3, #0]
	Clear_ErrorTimestamp_Buffer();
 8003276:	f7ff ffe5 	bl	8003244 <Clear_ErrorTimestamp_Buffer>
 800327a:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <Reset_All+0x50>)
	Error_reg_log.Error[indxE]=0;
 800327c:	460a      	mov	r2, r1
 800327e:	f1a3 0008 	sub.w	r0, r3, #8
 8003282:	540a      	strb	r2, [r1, r0]
	for(int indxE=0;indxE<10;indxE++)
 8003284:	3101      	adds	r1, #1
 8003286:	290a      	cmp	r1, #10
	Error_reg_log.ErrorTime[indxE]=0;
 8003288:	f843 2f04 	str.w	r2, [r3, #4]!
	for(int indxE=0;indxE<10;indxE++)
 800328c:	d1f9      	bne.n	8003282 <Reset_All+0x2a>
}
 800328e:	bd08      	pop	{r3, pc}
 8003290:	20008cfc 	.word	0x20008cfc
 8003294:	200005a0 	.word	0x200005a0
 8003298:	20000010 	.word	0x20000010
 800329c:	200005cc 	.word	0x200005cc
 80032a0:	200086f0 	.word	0x200086f0
 80032a4:	20000598 	.word	0x20000598
 80032a8:	20008624 	.word	0x20008624

080032ac <Save_ErrorTimestamp_Buffer>:
}

void Save_ErrorTimestamp_Buffer(uint8_t ErrorCode)
{
 80032ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ErrorCodeBuf=ErrorCode;
 80032ae:	4b21      	ldr	r3, [pc, #132]	; (8003334 <Save_ErrorTimestamp_Buffer+0x88>)
{
 80032b0:	4606      	mov	r6, r0
	ErrorCodeBuf=ErrorCode;
 80032b2:	7018      	strb	r0, [r3, #0]
	ErrorTimeStampBuf=__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))*10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80032b4:	f7fe fdf8 	bl	8001ea8 <LL_RTC_TIME_GetHour.constprop.13>
 80032b8:	4604      	mov	r4, r0
 80032ba:	f7fe fdf5 	bl	8001ea8 <LL_RTC_TIME_GetHour.constprop.13>
 80032be:	4605      	mov	r5, r0
 80032c0:	f7fe fdd8 	bl	8001e74 <LL_RTC_TIME_GetMinute.constprop.12>
 80032c4:	f3c4 1403 	ubfx	r4, r4, #4, #4
 80032c8:	4607      	mov	r7, r0
 80032ca:	f7fe fdd3 	bl	8001e74 <LL_RTC_TIME_GetMinute.constprop.12>
 80032ce:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80032d2:	f005 040f 	and.w	r4, r5, #15
 80032d6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80032da:	f3c7 1303 	ubfx	r3, r7, #4, #4
 80032de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80032e2:	f000 000f 	and.w	r0, r0, #15
 80032e6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80032ea:	b2c0      	uxtb	r0, r0
 80032ec:	2364      	movs	r3, #100	; 0x64
 80032ee:	fb10 f003 	smulbb	r0, r0, r3
 80032f2:	b2e4      	uxtb	r4, r4
 80032f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80032f8:	fb03 0404 	mla	r4, r3, r4, r0
 80032fc:	f7fe fda2 	bl	8001e44 <LL_RTC_TIME_GetSecond.constprop.11>
 8003300:	4605      	mov	r5, r0
 8003302:	f7fe fd9f 	bl	8001e44 <LL_RTC_TIME_GetSecond.constprop.11>
 8003306:	f3c5 1303 	ubfx	r3, r5, #4, #4
 800330a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800330e:	f000 000f 	and.w	r0, r0, #15
 8003312:	eb00 0043 	add.w	r0, r0, r3, lsl #1

	Error_reg_log.Error[Error_indx]=ErrorCode;
 8003316:	4908      	ldr	r1, [pc, #32]	; (8003338 <Save_ErrorTimestamp_Buffer+0x8c>)
	ErrorTimeStampBuf=__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))*10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8003318:	4b08      	ldr	r3, [pc, #32]	; (800333c <Save_ErrorTimestamp_Buffer+0x90>)
	Error_reg_log.Error[Error_indx]=ErrorCode;
 800331a:	4a09      	ldr	r2, [pc, #36]	; (8003340 <Save_ErrorTimestamp_Buffer+0x94>)
	ErrorTimeStampBuf=__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))*10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800331c:	fa54 f480 	uxtab	r4, r4, r0
 8003320:	601c      	str	r4, [r3, #0]
	Error_reg_log.Error[Error_indx]=ErrorCode;
 8003322:	780b      	ldrb	r3, [r1, #0]
 8003324:	54d6      	strb	r6, [r2, r3]
	Error_reg_log.ErrorTime[Error_indx]=ErrorTimeStampBuf;
 8003326:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Error_indx++;
 800332a:	3301      	adds	r3, #1
 800332c:	700b      	strb	r3, [r1, #0]
	Error_reg_log.ErrorTime[Error_indx]=ErrorTimeStampBuf;
 800332e:	60d4      	str	r4, [r2, #12]
	Error_indx++;
 8003330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003332:	bf00      	nop
 8003334:	200086f8 	.word	0x200086f8
 8003338:	200089fe 	.word	0x200089fe
 800333c:	200086fc 	.word	0x200086fc
 8003340:	2000861c 	.word	0x2000861c

08003344 <AIM_Error_Handler>:
}

void AIM_Error_Handler(int AIM_Error_Code)
{
    switch(AIM_Error_Code) {
 8003344:	3801      	subs	r0, #1
{
 8003346:	b510      	push	{r4, lr}
    switch(AIM_Error_Code) {
 8003348:	280f      	cmp	r0, #15
 800334a:	d862      	bhi.n	8003412 <AIM_Error_Handler+0xce>
 800334c:	e8df f000 	tbb	[pc, r0]
 8003350:	392e611e 	.word	0x392e611e
 8003354:	4661610f 	.word	0x4661610f
 8003358:	54616161 	.word	0x54616161
 800335c:	08616161 	.word	0x08616161

	case FPGA_SPI_R_Error:
		Save_ErrorTimestamp_Buffer(FPGA_SPI_R_Error);
 8003360:	2010      	movs	r0, #16
 8003362:	f7ff ffa3 	bl	80032ac <Save_ErrorTimestamp_Buffer>
		FATAL_Error = 1;
 8003366:	4b2b      	ldr	r3, [pc, #172]	; (8003414 <AIM_Error_Handler+0xd0>)
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]

	break;
 800336c:	bd10      	pop	{r4, pc}

			case f_write_E:
				file_reopen();
 800336e:	f7fe fec7 	bl	8002100 <file_reopen>
				if (Fat_write_read_fail==1) // Could not solve write issue by reopening file
 8003372:	4b29      	ldr	r3, [pc, #164]	; (8003418 <AIM_Error_Handler+0xd4>)
 8003374:	681c      	ldr	r4, [r3, #0]
 8003376:	2c01      	cmp	r4, #1
 8003378:	d14b      	bne.n	8003412 <AIM_Error_Handler+0xce>
								  {
									   Fat_read_mnt_fail=0;
 800337a:	4b28      	ldr	r3, [pc, #160]	; (800341c <AIM_Error_Handler+0xd8>)
 800337c:	2200      	movs	r2, #0
										Save_ErrorTimestamp_Buffer(f_write_E);
 800337e:	2005      	movs	r0, #5
									   Fat_read_mnt_fail=0;
 8003380:	601a      	str	r2, [r3, #0]
										Save_ErrorTimestamp_Buffer(f_write_E);
 8003382:	f7ff ff93 	bl	80032ac <Save_ErrorTimestamp_Buffer>
										File_Sensor_write_issue=1;
 8003386:	4b26      	ldr	r3, [pc, #152]	; (8003420 <AIM_Error_Handler+0xdc>)
				file_reopen_sync();
				if (Fat_sync_read_fail==1) // Could not solve write issue by reopening file
								  {
										Fat_sync_read_fail=0;
										Save_ErrorTimestamp_Buffer(f_sync_E);
										File_Sensor_close_issue=1;
 8003388:	701c      	strb	r4, [r3, #0]
 800338a:	e018      	b.n	80033be <AIM_Error_Handler+0x7a>
				file_mnt_reopen();
 800338c:	f7fe fed0 	bl	8002130 <file_mnt_reopen>
				  if (Fat_read_mnt_fail==1) // Could not solve read issue by FATFS mount
 8003390:	4b22      	ldr	r3, [pc, #136]	; (800341c <AIM_Error_Handler+0xd8>)
 8003392:	681c      	ldr	r4, [r3, #0]
 8003394:	2c01      	cmp	r4, #1
 8003396:	d13c      	bne.n	8003412 <AIM_Error_Handler+0xce>
					  Fat_read_mnt_fail=0;
 8003398:	2200      	movs	r2, #0
						Save_ErrorTimestamp_Buffer(f_open_E);
 800339a:	4620      	mov	r0, r4
					  Fat_read_mnt_fail=0;
 800339c:	601a      	str	r2, [r3, #0]
						Save_ErrorTimestamp_Buffer(f_open_E);
 800339e:	f7ff ff85 	bl	80032ac <Save_ErrorTimestamp_Buffer>
						FATAL_Error = 1;
 80033a2:	4b1c      	ldr	r3, [pc, #112]	; (8003414 <AIM_Error_Handler+0xd0>)
 80033a4:	701c      	strb	r4, [r3, #0]
						Skip_FATFS =1;
 80033a6:	4b1f      	ldr	r3, [pc, #124]	; (8003424 <AIM_Error_Handler+0xe0>)
										FATAL_Error = 1;
 80033a8:	701c      	strb	r4, [r3, #0]
 80033aa:	bd10      	pop	{r4, pc}
				Try_FATFS_Mount();
 80033ac:	f7fe fe62 	bl	8002074 <Try_FATFS_Mount>
				if (Skip_FATFS==1)  // Could not solve FATFS mount
 80033b0:	4b1c      	ldr	r3, [pc, #112]	; (8003424 <AIM_Error_Handler+0xe0>)
 80033b2:	781c      	ldrb	r4, [r3, #0]
 80033b4:	2c01      	cmp	r4, #1
 80033b6:	d12c      	bne.n	8003412 <AIM_Error_Handler+0xce>
				Save_ErrorTimestamp_Buffer(f_mount_E);
 80033b8:	2003      	movs	r0, #3
 80033ba:	f7ff ff77 	bl	80032ac <Save_ErrorTimestamp_Buffer>
										FATAL_Error = 1;
 80033be:	4b15      	ldr	r3, [pc, #84]	; (8003414 <AIM_Error_Handler+0xd0>)
 80033c0:	e7f2      	b.n	80033a8 <AIM_Error_Handler+0x64>
				file_reopen_sync();
 80033c2:	f7fe fe85 	bl	80020d0 <file_reopen_sync>
				if (Fat_sync_read_fail==1) // Could not solve write issue by reopening file
 80033c6:	4b18      	ldr	r3, [pc, #96]	; (8003428 <AIM_Error_Handler+0xe4>)
 80033c8:	681c      	ldr	r4, [r3, #0]
 80033ca:	2c01      	cmp	r4, #1
 80033cc:	d121      	bne.n	8003412 <AIM_Error_Handler+0xce>
										Fat_sync_read_fail=0;
 80033ce:	2200      	movs	r2, #0
										Save_ErrorTimestamp_Buffer(f_sync_E);
 80033d0:	2004      	movs	r0, #4
										Fat_sync_read_fail=0;
 80033d2:	601a      	str	r2, [r3, #0]
										Save_ErrorTimestamp_Buffer(f_sync_E);
 80033d4:	f7ff ff6a 	bl	80032ac <Save_ErrorTimestamp_Buffer>
										File_Sensor_close_issue=1;
 80033d8:	4b14      	ldr	r3, [pc, #80]	; (800342c <AIM_Error_Handler+0xe8>)
 80033da:	e7d5      	b.n	8003388 <AIM_Error_Handler+0x44>

			break;

			case SPI_Acc_Error :

				if (SPI_ErrorCnt>3)
 80033dc:	4a14      	ldr	r2, [pc, #80]	; (8003430 <AIM_Error_Handler+0xec>)
 80033de:	7813      	ldrb	r3, [r2, #0]
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d914      	bls.n	800340e <AIM_Error_Handler+0xca>
				{
				SPI_ErrorCnt=0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	7013      	strb	r3, [r2, #0]
				FATAL_Error = 1;
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <AIM_Error_Handler+0xd0>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	701a      	strb	r2, [r3, #0]
				Save_ErrorTimestamp_Buffer(SPI_Acc_Error);
 80033ee:	2008      	movs	r0, #8
		    default :

		    break;

    }
}
 80033f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				Save_ErrorTimestamp_Buffer(ADC_R_Error);
 80033f4:	f7ff bf5a 	b.w	80032ac <Save_ErrorTimestamp_Buffer>
				if (ADC_ErrorCnt>3)
 80033f8:	4a0e      	ldr	r2, [pc, #56]	; (8003434 <AIM_Error_Handler+0xf0>)
 80033fa:	7813      	ldrb	r3, [r2, #0]
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d906      	bls.n	800340e <AIM_Error_Handler+0xca>
				ADC_ErrorCnt=0;
 8003400:	2300      	movs	r3, #0
 8003402:	7013      	strb	r3, [r2, #0]
				FATAL_Error = 1;
 8003404:	4b03      	ldr	r3, [pc, #12]	; (8003414 <AIM_Error_Handler+0xd0>)
 8003406:	2201      	movs	r2, #1
 8003408:	701a      	strb	r2, [r3, #0]
				Save_ErrorTimestamp_Buffer(ADC_R_Error);
 800340a:	200c      	movs	r0, #12
 800340c:	e7f0      	b.n	80033f0 <AIM_Error_Handler+0xac>
				ADC_ErrorCnt++;
 800340e:	3301      	adds	r3, #1
 8003410:	7013      	strb	r3, [r2, #0]
 8003412:	bd10      	pop	{r4, pc}
 8003414:	20008cf8 	.word	0x20008cf8
 8003418:	200089a4 	.word	0x200089a4
 800341c:	20008a4c 	.word	0x20008a4c
 8003420:	200089c4 	.word	0x200089c4
 8003424:	20008cf9 	.word	0x20008cf9
 8003428:	200089a8 	.word	0x200089a8
 800342c:	20008a8e 	.word	0x20008a8e
 8003430:	20008f8c 	.word	0x20008f8c
 8003434:	20008d00 	.word	0x20008d00

08003438 <FATFS_Init>:
{
 8003438:	b510      	push	{r4, lr}
	  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 800343a:	490b      	ldr	r1, [pc, #44]	; (8003468 <FATFS_Init+0x30>)
 800343c:	480b      	ldr	r0, [pc, #44]	; (800346c <FATFS_Init+0x34>)
 800343e:	4c0c      	ldr	r4, [pc, #48]	; (8003470 <FATFS_Init+0x38>)
 8003440:	f008 f888 	bl	800b554 <FATFS_LinkDriver>
 8003444:	b928      	cbnz	r0, 8003452 <FATFS_Init+0x1a>
			 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 8003446:	2201      	movs	r2, #1
 8003448:	4907      	ldr	r1, [pc, #28]	; (8003468 <FATFS_Init+0x30>)
 800344a:	480a      	ldr	r0, [pc, #40]	; (8003474 <FATFS_Init+0x3c>)
 800344c:	f007 fbb0 	bl	800abb0 <f_mount>
 8003450:	b108      	cbz	r0, 8003456 <FATFS_Init+0x1e>
				 Fat_mnt_fail=1;
 8003452:	2301      	movs	r3, #1
 8003454:	6023      	str	r3, [r4, #0]
	  if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d104      	bne.n	8003466 <FATFS_Init+0x2e>
		  AIM_Error_Handler(f_mount_E);
 800345c:	2003      	movs	r0, #3
}
 800345e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		  AIM_Error_Handler(f_mount_E);
 8003462:	f7ff bf6f 	b.w	8003344 <AIM_Error_Handler>
 8003466:	bd10      	pop	{r4, pc}
 8003468:	20008a95 	.word	0x20008a95
 800346c:	0800dbd0 	.word	0x0800dbd0
 8003470:	200089a0 	.word	0x200089a0
 8003474:	20008aa4 	.word	0x20008aa4

08003478 <Check_SD_Command_File>:
{
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  Data_log_Start_Resume = 0;
 800347a:	4c31      	ldr	r4, [pc, #196]	; (8003540 <Check_SD_Command_File+0xc8>)
	 if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 800347c:	4931      	ldr	r1, [pc, #196]	; (8003544 <Check_SD_Command_File+0xcc>)
 800347e:	4832      	ldr	r0, [pc, #200]	; (8003548 <Check_SD_Command_File+0xd0>)
 8003480:	4e32      	ldr	r6, [pc, #200]	; (800354c <Check_SD_Command_File+0xd4>)
	  Data_log_Start_Resume = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	7023      	strb	r3, [r4, #0]
	 if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8003486:	f008 f865 	bl	800b554 <FATFS_LinkDriver>
 800348a:	b930      	cbnz	r0, 800349a <Check_SD_Command_File+0x22>
	 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 800348c:	2201      	movs	r2, #1
 800348e:	492d      	ldr	r1, [pc, #180]	; (8003544 <Check_SD_Command_File+0xcc>)
 8003490:	482f      	ldr	r0, [pc, #188]	; (8003550 <Check_SD_Command_File+0xd8>)
 8003492:	f007 fb8d 	bl	800abb0 <f_mount>
 8003496:	4605      	mov	r5, r0
 8003498:	b148      	cbz	r0, 80034ae <Check_SD_Command_File+0x36>
		 Fat_mnt_fail=1;
 800349a:	2301      	movs	r3, #1
 800349c:	6033      	str	r3, [r6, #0]
	  if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 800349e:	6833      	ldr	r3, [r6, #0]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d14b      	bne.n	800353c <Check_SD_Command_File+0xc4>
		  AIM_Error_Handler(f_mount_E);
 80034a4:	2003      	movs	r0, #3
}
 80034a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		  AIM_Error_Handler(f_mount_E);
 80034aa:	f7ff bf4b 	b.w	8003344 <AIM_Error_Handler>
		 if(f_open(&MyFile, "EnterDFU.txt", FA_READ) != FR_OK) // Check the presence of EnterDFU.txt file
 80034ae:	2201      	movs	r2, #1
 80034b0:	4928      	ldr	r1, [pc, #160]	; (8003554 <Check_SD_Command_File+0xdc>)
 80034b2:	4829      	ldr	r0, [pc, #164]	; (8003558 <Check_SD_Command_File+0xe0>)
 80034b4:	f007 fbb2 	bl	800ac1c <f_open>
 80034b8:	4607      	mov	r7, r0
 80034ba:	b360      	cbz	r0, 8003516 <Check_SD_Command_File+0x9e>
			   if(f_open(&MyFile, "EnterVCP.txt", FA_READ) != FR_OK) // Check the presence of EnterVCP.txt file
 80034bc:	2201      	movs	r2, #1
 80034be:	4927      	ldr	r1, [pc, #156]	; (800355c <Check_SD_Command_File+0xe4>)
 80034c0:	4825      	ldr	r0, [pc, #148]	; (8003558 <Check_SD_Command_File+0xe0>)
 80034c2:	f007 fbab 	bl	800ac1c <f_open>
 80034c6:	b1f0      	cbz	r0, 8003506 <Check_SD_Command_File+0x8e>
					 if (Logstart_Delete ==1)
 80034c8:	4b25      	ldr	r3, [pc, #148]	; (8003560 <Check_SD_Command_File+0xe8>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	2a01      	cmp	r2, #1
 80034ce:	d104      	bne.n	80034da <Check_SD_Command_File+0x62>
								  if (f_unlink ("LogStart.txt") == FR_OK) {    // If LogStart.txt file present, delete the file
 80034d0:	4824      	ldr	r0, [pc, #144]	; (8003564 <Check_SD_Command_File+0xec>)
						 Logstart_Delete=0;
 80034d2:	601d      	str	r5, [r3, #0]
					  if (f_unlink ("EnterVCP.txt") == FR_OK) {    // If EnterVCP.txt file present, delete the file
 80034d4:	f007 ffa2 	bl	800b41c <f_unlink>
 80034d8:	e006      	b.n	80034e8 <Check_SD_Command_File+0x70>
				   if(f_open(&MyFile, "LogStart.txt", FA_READ) != FR_OK) // Check the presence of LogStart.txt file
 80034da:	2201      	movs	r2, #1
 80034dc:	4921      	ldr	r1, [pc, #132]	; (8003564 <Check_SD_Command_File+0xec>)
 80034de:	481e      	ldr	r0, [pc, #120]	; (8003558 <Check_SD_Command_File+0xe0>)
 80034e0:	f007 fb9c 	bl	800ac1c <f_open>
 80034e4:	b148      	cbz	r0, 80034fa <Check_SD_Command_File+0x82>
					   Data_log_Start_Resume = 0;          // Data Log Stops
 80034e6:	7025      	strb	r5, [r4, #0]
			f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 80034e8:	2200      	movs	r2, #0
 80034ea:	491f      	ldr	r1, [pc, #124]	; (8003568 <Check_SD_Command_File+0xf0>)
 80034ec:	4610      	mov	r0, r2
 80034ee:	f007 fb5f 	bl	800abb0 <f_mount>
			FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 80034f2:	4814      	ldr	r0, [pc, #80]	; (8003544 <Check_SD_Command_File+0xcc>)
 80034f4:	f008 f84a 	bl	800b58c <FATFS_UnLinkDriver>
 80034f8:	e7d1      	b.n	800349e <Check_SD_Command_File+0x26>
					   Data_log_Start_Resume = 1;          // Data Log Starts/Resume
 80034fa:	2301      	movs	r3, #1
					   f_close(&MyFile);
 80034fc:	4816      	ldr	r0, [pc, #88]	; (8003558 <Check_SD_Command_File+0xe0>)
					   Data_log_Start_Resume = 1;          // Data Log Starts/Resume
 80034fe:	7023      	strb	r3, [r4, #0]
					   f_close(&MyFile);
 8003500:	f007 fdb3 	bl	800b06a <f_close>
 8003504:	e7f0      	b.n	80034e8 <Check_SD_Command_File+0x70>
				     USB_Mode = 0;                       // USB VCP mode in Next USB Connectivity
 8003506:	4b19      	ldr	r3, [pc, #100]	; (800356c <Check_SD_Command_File+0xf4>)
				     Data_log_Start_Resume = 0;          // Data Log Stops
 8003508:	7020      	strb	r0, [r4, #0]
				     USB_Mode = 0;                       // USB VCP mode in Next USB Connectivity
 800350a:	7018      	strb	r0, [r3, #0]
					 f_close(&MyFile);
 800350c:	4812      	ldr	r0, [pc, #72]	; (8003558 <Check_SD_Command_File+0xe0>)
 800350e:	f007 fdac 	bl	800b06a <f_close>
					  if (f_unlink ("EnterVCP.txt") == FR_OK) {    // If EnterVCP.txt file present, delete the file
 8003512:	4812      	ldr	r0, [pc, #72]	; (800355c <Check_SD_Command_File+0xe4>)
 8003514:	e7de      	b.n	80034d4 <Check_SD_Command_File+0x5c>
			 f_close(&MyFile);
 8003516:	4810      	ldr	r0, [pc, #64]	; (8003558 <Check_SD_Command_File+0xe0>)
 8003518:	f007 fda7 	bl	800b06a <f_close>
			  if (f_unlink ("EnterDFU.txt") == FR_OK) {    // If EnterDFU.txt file present, delete the file
 800351c:	480d      	ldr	r0, [pc, #52]	; (8003554 <Check_SD_Command_File+0xdc>)
 800351e:	f007 ff7d 	bl	800b41c <f_unlink>
				f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 8003522:	463a      	mov	r2, r7
 8003524:	4910      	ldr	r1, [pc, #64]	; (8003568 <Check_SD_Command_File+0xf0>)
 8003526:	4638      	mov	r0, r7
 8003528:	f007 fb42 	bl	800abb0 <f_mount>
				FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 800352c:	4805      	ldr	r0, [pc, #20]	; (8003544 <Check_SD_Command_File+0xcc>)
 800352e:	f008 f82d 	bl	800b58c <FATFS_UnLinkDriver>
			*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 8003532:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <Check_SD_Command_File+0xf8>)
 8003534:	4a0f      	ldr	r2, [pc, #60]	; (8003574 <Check_SD_Command_File+0xfc>)
 8003536:	601a      	str	r2, [r3, #0]
			 NVIC_SystemReset();        // System reset
 8003538:	f7fe fb54 	bl	8001be4 <NVIC_SystemReset>
 800353c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800353e:	bf00      	nop
 8003540:	200086e8 	.word	0x200086e8
 8003544:	20008a95 	.word	0x20008a95
 8003548:	0800dbd0 	.word	0x0800dbd0
 800354c:	200089a0 	.word	0x200089a0
 8003550:	20008aa4 	.word	0x20008aa4
 8003554:	0800d93a 	.word	0x0800d93a
 8003558:	20008d04 	.word	0x20008d04
 800355c:	0800d947 	.word	0x0800d947
 8003560:	20009498 	.word	0x20009498
 8003564:	0800d954 	.word	0x0800d954
 8003568:	0800dafb 	.word	0x0800dafb
 800356c:	20008fc4 	.word	0x20008fc4
 8003570:	20017ff0 	.word	0x20017ff0
 8003574:	deadbeef 	.word	0xdeadbeef

08003578 <Execute_VCP_Command>:
	 if (EnterReset_Create ==1)
 8003578:	4a10      	ldr	r2, [pc, #64]	; (80035bc <Execute_VCP_Command+0x44>)
 800357a:	6811      	ldr	r1, [r2, #0]
{
 800357c:	b538      	push	{r3, r4, r5, lr}
	  Data_log_Start_Resume = 0;
 800357e:	4c10      	ldr	r4, [pc, #64]	; (80035c0 <Execute_VCP_Command+0x48>)
 8003580:	2300      	movs	r3, #0
	 if (EnterReset_Create ==1)
 8003582:	2901      	cmp	r1, #1
	  Data_log_Start_Resume = 0;
 8003584:	7023      	strb	r3, [r4, #0]
	 if (EnterReset_Create ==1)
 8003586:	d102      	bne.n	800358e <Execute_VCP_Command+0x16>
		 EnterReset_Create =0;
 8003588:	6013      	str	r3, [r2, #0]
			NVIC_SystemReset();    // System reset
 800358a:	f7fe fb2b 	bl	8001be4 <NVIC_SystemReset>
	 if (EnterDFU_Create ==1)
 800358e:	4a0d      	ldr	r2, [pc, #52]	; (80035c4 <Execute_VCP_Command+0x4c>)
 8003590:	6811      	ldr	r1, [r2, #0]
 8003592:	2901      	cmp	r1, #1
 8003594:	d104      	bne.n	80035a0 <Execute_VCP_Command+0x28>
		    EnterDFU_Create =0;
 8003596:	6013      	str	r3, [r2, #0]
			*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 8003598:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <Execute_VCP_Command+0x50>)
 800359a:	4a0c      	ldr	r2, [pc, #48]	; (80035cc <Execute_VCP_Command+0x54>)
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	e7f4      	b.n	800358a <Execute_VCP_Command+0x12>
	 if (Logstart_Create ==1)
 80035a0:	4a0b      	ldr	r2, [pc, #44]	; (80035d0 <Execute_VCP_Command+0x58>)
 80035a2:	6815      	ldr	r5, [r2, #0]
 80035a4:	2d01      	cmp	r5, #1
 80035a6:	d107      	bne.n	80035b8 <Execute_VCP_Command+0x40>
		 Logstart_Create=0;
 80035a8:	6013      	str	r3, [r2, #0]
		 FATFS_Logstart_Ready();
 80035aa:	f7fe fe0f 	bl	80021cc <FATFS_Logstart_Ready>
		 Data_log_Start_Resume = 1;
 80035ae:	7025      	strb	r5, [r4, #0]
}
 80035b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		 Check_SD_Command_File();
 80035b4:	f7ff bf60 	b.w	8003478 <Check_SD_Command_File>
 80035b8:	bd38      	pop	{r3, r4, r5, pc}
 80035ba:	bf00      	nop
 80035bc:	20009d84 	.word	0x20009d84
 80035c0:	200086e8 	.word	0x200086e8
 80035c4:	2000a974 	.word	0x2000a974
 80035c8:	20017ff0 	.word	0x20017ff0
 80035cc:	deadbeef 	.word	0xdeadbeef
 80035d0:	20009514 	.word	0x20009514

080035d4 <Open_File_For_Sensor_Write>:
{
 80035d4:	b538      	push	{r3, r4, r5, lr}
	if (Skip_FATFS==0)
 80035d6:	4b15      	ldr	r3, [pc, #84]	; (800362c <Open_File_For_Sensor_Write+0x58>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	bb2b      	cbnz	r3, 8003628 <Open_File_For_Sensor_Write+0x54>
	last_file=GetNextIndex("");
 80035dc:	4814      	ldr	r0, [pc, #80]	; (8003630 <Open_File_For_Sensor_Write+0x5c>)
		res= f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 80035de:	4c15      	ldr	r4, [pc, #84]	; (8003634 <Open_File_For_Sensor_Write+0x60>)
 80035e0:	4d15      	ldr	r5, [pc, #84]	; (8003638 <Open_File_For_Sensor_Write+0x64>)
	last_file=GetNextIndex("");
 80035e2:	f7fe fd17 	bl	8002014 <GetNextIndex>
 80035e6:	4b15      	ldr	r3, [pc, #84]	; (800363c <Open_File_For_Sensor_Write+0x68>)
	sprintf(FILE_NAME_STRING, "%06d.BIN",last_file);
 80035e8:	4915      	ldr	r1, [pc, #84]	; (8003640 <Open_File_For_Sensor_Write+0x6c>)
	last_file=GetNextIndex("");
 80035ea:	6018      	str	r0, [r3, #0]
 80035ec:	4602      	mov	r2, r0
	sprintf(FILE_NAME_STRING, "%06d.BIN",last_file);
 80035ee:	4815      	ldr	r0, [pc, #84]	; (8003644 <Open_File_For_Sensor_Write+0x70>)
 80035f0:	f008 f8d4 	bl	800b79c <siprintf>
		res= f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 80035f4:	2212      	movs	r2, #18
 80035f6:	4913      	ldr	r1, [pc, #76]	; (8003644 <Open_File_For_Sensor_Write+0x70>)
 80035f8:	4620      	mov	r0, r4
 80035fa:	f007 fb0f 	bl	800ac1c <f_open>
 80035fe:	7028      	strb	r0, [r5, #0]
		if(res != FR_OK) // Create and Open a new text file object with write access
 8003600:	b140      	cbz	r0, 8003614 <Open_File_For_Sensor_Write+0x40>
			        AIM_Error_Handler(f_open_E);
 8003602:	2001      	movs	r0, #1
 8003604:	f7ff fe9e 	bl	8003344 <AIM_Error_Handler>
				 delay_us(1000);  // Arbitrary delay to complete FATFS SD write
 8003608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 800360c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				 delay_us(1000);  // Arbitrary delay to complete FATFS SD write
 8003610:	f000 bf18 	b.w	8004444 <delay_us>
							f_lseek(&MyFile, MyFile.fsize);   // Increase File Size when big file to write
 8003614:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 8003618:	4620      	mov	r0, r4
 800361a:	f007 fd37 	bl	800b08c <f_lseek>
							 res= f_sync(&MyFile);
 800361e:	4620      	mov	r0, r4
 8003620:	f007 fcc3 	bl	800afaa <f_sync>
 8003624:	7028      	strb	r0, [r5, #0]
 8003626:	e7ef      	b.n	8003608 <Open_File_For_Sensor_Write+0x34>
 8003628:	bd38      	pop	{r3, r4, r5, pc}
 800362a:	bf00      	nop
 800362c:	20008cf9 	.word	0x20008cf9
 8003630:	0800dafb 	.word	0x0800dafb
 8003634:	20008d04 	.word	0x20008d04
 8003638:	20008f86 	.word	0x20008f86
 800363c:	20008cfc 	.word	0x20008cfc
 8003640:	0800d964 	.word	0x0800d964
 8003644:	200089e8 	.word	0x200089e8

08003648 <Datalog_Sensor_Initialization>:
{
 8003648:	b508      	push	{r3, lr}
		 FATFS_Init();
 800364a:	f7ff fef5 	bl	8003438 <FATFS_Init>
		Open_File_For_Sensor_Write();
 800364e:	f7ff ffc1 	bl	80035d4 <Open_File_For_Sensor_Write>
		if (Skip_FATFS==0)
 8003652:	4b04      	ldr	r3, [pc, #16]	; (8003664 <Datalog_Sensor_Initialization+0x1c>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	b91b      	cbnz	r3, 8003660 <Datalog_Sensor_Initialization+0x18>
}
 8003658:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Reset_All();                       // Reset All Buffer parameters for FATFS SDIO write
 800365c:	f7ff bdfc 	b.w	8003258 <Reset_All>
 8003660:	bd08      	pop	{r3, pc}
 8003662:	bf00      	nop
 8003664:	20008cf9 	.word	0x20008cf9

08003668 <Prepare_Data_Log_State>:
{
 8003668:	b510      	push	{r4, lr}
	   if (Skip_FATFS==0)   // If there's no FATFS SD error
 800366a:	4c12      	ldr	r4, [pc, #72]	; (80036b4 <Prepare_Data_Log_State+0x4c>)
 800366c:	7821      	ldrb	r1, [r4, #0]
 800366e:	b9d9      	cbnz	r1, 80036a8 <Prepare_Data_Log_State+0x40>
		   Battery_ADC_Value=2500;
 8003670:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <Prepare_Data_Log_State+0x50>)
 8003672:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003676:	801a      	strh	r2, [r3, #0]
 if (Data_log_Start_Resume == 1)       // Continue Data Log after USB disconnect
 8003678:	4b10      	ldr	r3, [pc, #64]	; (80036bc <Prepare_Data_Log_State+0x54>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d10c      	bne.n	800369a <Prepare_Data_Log_State+0x32>
	 Datalog_Sensor_Initialization();
 8003680:	f7ff ffe2 	bl	8003648 <Datalog_Sensor_Initialization>
   if (Skip_FATFS==0)   // If there's no FATFS SD error
 8003684:	7823      	ldrb	r3, [r4, #0]
 8003686:	b97b      	cbnz	r3, 80036a8 <Prepare_Data_Log_State+0x40>
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8003688:	4a0d      	ldr	r2, [pc, #52]	; (80036c0 <Prepare_Data_Log_State+0x58>)
 800368a:	6893      	ldr	r3, [r2, #8]
 800368c:	f043 0302 	orr.w	r3, r3, #2
 8003690:	6093      	str	r3, [r2, #8]
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <Prepare_Data_Log_State+0x5c>)
 8003694:	2204      	movs	r2, #4
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	bd10      	pop	{r4, pc}
	else if (VCP_Bypass==1)
 800369a:	4a0b      	ldr	r2, [pc, #44]	; (80036c8 <Prepare_Data_Log_State+0x60>)
 800369c:	4c0b      	ldr	r4, [pc, #44]	; (80036cc <Prepare_Data_Log_State+0x64>)
 800369e:	7813      	ldrb	r3, [r2, #0]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d102      	bne.n	80036aa <Prepare_Data_Log_State+0x42>
		VCP_Bypass= 0;
 80036a4:	7011      	strb	r1, [r2, #0]
		Pros_state = Dormant_Idle_Stop;
 80036a6:	7023      	strb	r3, [r4, #0]
 80036a8:	bd10      	pop	{r4, pc}
		Prepare_Goto_Dormant_Mode();
 80036aa:	f7fe fca3 	bl	8001ff4 <Prepare_Goto_Dormant_Mode>
		Pros_state = Dormant_Idle_Stop;
 80036ae:	2306      	movs	r3, #6
 80036b0:	e7f9      	b.n	80036a6 <Prepare_Data_Log_State+0x3e>
 80036b2:	bf00      	nop
 80036b4:	20008cf9 	.word	0x20008cf9
 80036b8:	20008cd4 	.word	0x20008cd4
 80036bc:	200086e8 	.word	0x200086e8
 80036c0:	40009400 	.word	0x40009400
 80036c4:	e000e100 	.word	0xe000e100
 80036c8:	20008aa1 	.word	0x20008aa1
 80036cc:	20008658 	.word	0x20008658

080036d0 <USB_Init_Start>:
{
 80036d0:	b570      	push	{r4, r5, r6, lr}
	SD_POWER_ON();
 80036d2:	f7fd ffb3 	bl	800163c <SD_POWER_ON>
	 Pros_state = LP_STOP;                  // Next state
 80036d6:	4b2d      	ldr	r3, [pc, #180]	; (800378c <USB_Init_Start+0xbc>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80036d8:	492d      	ldr	r1, [pc, #180]	; (8003790 <USB_Init_Start+0xc0>)
	if (Data_log_Start_Resume == 1 )    // If Data log was in operation
 80036da:	4d2e      	ldr	r5, [pc, #184]	; (8003794 <USB_Init_Start+0xc4>)
	 Pros_state = LP_STOP;                  // Next state
 80036dc:	2201      	movs	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]
 80036e0:	2304      	movs	r3, #4
 80036e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	 USB_Clock_Ready();
 80036e6:	f7fe fc3f 	bl	8001f68 <USB_Clock_Ready>
 80036ea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80036ee:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if (Data_log_Start_Resume == 1 )    // If Data log was in operation
 80036f2:	782a      	ldrb	r2, [r5, #0]
 80036f4:	2a01      	cmp	r2, #1
 80036f6:	d101      	bne.n	80036fc <USB_Init_Start+0x2c>
		File_Close_Update_Unlink();
 80036f8:	f7fe fe7a 	bl	80023f0 <File_Close_Update_Unlink>
	if (USB_Mode == 1)               // USB MSC Mode  // Default: USB VCP mode (0), MSC (1)
 80036fc:	4e26      	ldr	r6, [pc, #152]	; (8003798 <USB_Init_Start+0xc8>)
	Data_log_Start_Resume = 0;
 80036fe:	2400      	movs	r4, #0
 8003700:	702c      	strb	r4, [r5, #0]
    HAL_ResumeTick();                                       // Before entering USB mode, SYS_tick needs to enable
 8003702:	f001 fee3 	bl	80054cc <HAL_ResumeTick>
	if (USB_Mode == 1)               // USB MSC Mode  // Default: USB VCP mode (0), MSC (1)
 8003706:	7833      	ldrb	r3, [r6, #0]
 8003708:	4d24      	ldr	r5, [pc, #144]	; (800379c <USB_Init_Start+0xcc>)
 800370a:	2b01      	cmp	r3, #1
 800370c:	d118      	bne.n	8003740 <USB_Init_Start+0x70>
		VIOLET_LED_ONLY();
 800370e:	f7fd ff7b 	bl	8001608 <VIOLET_LED_ONLY>
		USB_Mode = 0;               // Next mode default USB VCP
 8003712:	7034      	strb	r4, [r6, #0]
		USB_MSC_Init_Start();
 8003714:	f7fe fd88 	bl	8002228 <USB_MSC_Init_Start>
		 FATAL_Error = 0;
 8003718:	702c      	strb	r4, [r5, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800371a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800371e:	6914      	ldr	r4, [r2, #16]
		while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));       // Stay USB mode until USB connectivity available PA9
 8003720:	f414 7400 	ands.w	r4, r4, #512	; 0x200
 8003724:	d1fb      	bne.n	800371e <USB_Init_Start+0x4e>
		ALL_LED_OFF();
 8003726:	f7fd ff3f 	bl	80015a8 <ALL_LED_OFF>
		Shut_Down_USB();
 800372a:	f7fe fbff 	bl	8001f2c <Shut_Down_USB>
		Enter_Into_DFU=0;
 800372e:	4b1c      	ldr	r3, [pc, #112]	; (80037a0 <USB_Init_Start+0xd0>)
 8003730:	701c      	strb	r4, [r3, #0]
		 Prepare_Data_Log_State();           // Prepare for Data collection
 8003732:	f7ff ff99 	bl	8003668 <Prepare_Data_Log_State>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003736:	4b16      	ldr	r3, [pc, #88]	; (8003790 <USB_Init_Start+0xc0>)
 8003738:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	bd70      	pop	{r4, r5, r6, pc}
		CYAN_LED_ONLY();
 8003740:	f7fd ff6e 	bl	8001620 <CYAN_LED_ONLY>
  USB_VCP_Init_Start();
 8003744:	f7fe fd92 	bl	800226c <USB_VCP_Init_Start>
		if (Battey_Charge_Mode(&USBD_Device) == USBD_OK)   // USB Battery charging mode
 8003748:	4816      	ldr	r0, [pc, #88]	; (80037a4 <USB_Init_Start+0xd4>)
 800374a:	f005 ff5f 	bl	800960c <Battey_Charge_Mode>
 800374e:	b960      	cbnz	r0, 800376a <USB_Init_Start+0x9a>
			    FATAL_Error = 0;
 8003750:	7028      	strb	r0, [r5, #0]
 8003752:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003756:	6913      	ldr	r3, [r2, #16]
				while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));
 8003758:	059b      	lsls	r3, r3, #22
 800375a:	d4fc      	bmi.n	8003756 <USB_Init_Start+0x86>
				Shut_Down_USB();
 800375c:	f7fe fbe6 	bl	8001f2c <Shut_Down_USB>
				ALL_LED_OFF();
 8003760:	f7fd ff22 	bl	80015a8 <ALL_LED_OFF>
				Check_SD_Command_File();
 8003764:	f7ff fe88 	bl	8003478 <Check_SD_Command_File>
 8003768:	e7e3      	b.n	8003732 <USB_Init_Start+0x62>
			 FATAL_Error = 0;
 800376a:	702c      	strb	r4, [r5, #0]
 800376c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003770:	6914      	ldr	r4, [r2, #16]
		while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));       // Stay USB mode until USB connectivity available PA9
 8003772:	f414 7400 	ands.w	r4, r4, #512	; 0x200
 8003776:	d1fb      	bne.n	8003770 <USB_Init_Start+0xa0>
		Shut_Down_USB();
 8003778:	f7fe fbd8 	bl	8001f2c <Shut_Down_USB>
		ALL_LED_OFF();
 800377c:	f7fd ff14 	bl	80015a8 <ALL_LED_OFF>
		VCP_continue = 0;                     // Variable reset, aviod looping
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <USB_Init_Start+0xd8>)
 8003782:	701c      	strb	r4, [r3, #0]
		Execute_VCP_Command();
 8003784:	f7ff fef8 	bl	8003578 <Execute_VCP_Command>
 8003788:	e7d3      	b.n	8003732 <USB_Init_Start+0x62>
 800378a:	bf00      	nop
 800378c:	20008658 	.word	0x20008658
 8003790:	e000e100 	.word	0xe000e100
 8003794:	200086e8 	.word	0x200086e8
 8003798:	20008fc4 	.word	0x20008fc4
 800379c:	20008cf8 	.word	0x20008cf8
 80037a0:	20008aa2 	.word	0x20008aa2
 80037a4:	20008700 	.word	0x20008700
 80037a8:	20008a2e 	.word	0x20008a2e

080037ac <SD_Sensor_write>:
{
 80037ac:	b538      	push	{r3, r4, r5, lr}
	 res= f_write(&MyFile, &BSbuffer[w_flag], (8192*2), &BytesWritten2);
 80037ae:	4b17      	ldr	r3, [pc, #92]	; (800380c <SD_Sensor_write+0x60>)
 80037b0:	4917      	ldr	r1, [pc, #92]	; (8003810 <SD_Sensor_write+0x64>)
 80037b2:	7818      	ldrb	r0, [r3, #0]
 80037b4:	4b17      	ldr	r3, [pc, #92]	; (8003814 <SD_Sensor_write+0x68>)
 80037b6:	4c18      	ldr	r4, [pc, #96]	; (8003818 <SD_Sensor_write+0x6c>)
 80037b8:	eb01 3180 	add.w	r1, r1, r0, lsl #14
 80037bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037c0:	4816      	ldr	r0, [pc, #88]	; (800381c <SD_Sensor_write+0x70>)
 80037c2:	f007 fb03 	bl	800adcc <f_write>
 80037c6:	7020      	strb	r0, [r4, #0]
	 if(res!= FR_OK)   // Write the sensor Buffer content to .BIN file
 80037c8:	b1b8      	cbz	r0, 80037fa <SD_Sensor_write+0x4e>
	 AIM_Error_Handler(f_write_E);
 80037ca:	2005      	movs	r0, #5
 80037cc:	f7ff fdba 	bl	8003344 <AIM_Error_Handler>
	 if (File_Sensor_write_issue==0)
 80037d0:	4b13      	ldr	r3, [pc, #76]	; (8003820 <SD_Sensor_write+0x74>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	b9c3      	cbnz	r3, 8003808 <SD_Sensor_write+0x5c>
	 if(SD_Write_Count ==SD_cnt_limit)                                          // After 50 SD card write, File Sync (176 write*20.45 sec = 60 minute
 80037d6:	4a13      	ldr	r2, [pc, #76]	; (8003824 <SD_Sensor_write+0x78>)
 80037d8:	4b13      	ldr	r3, [pc, #76]	; (8003828 <SD_Sensor_write+0x7c>)
 80037da:	7811      	ldrb	r1, [r2, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4299      	cmp	r1, r3
 80037e0:	4615      	mov	r5, r2
 80037e2:	d10d      	bne.n	8003800 <SD_Sensor_write+0x54>
		 res= f_sync(&MyFile);
 80037e4:	480d      	ldr	r0, [pc, #52]	; (800381c <SD_Sensor_write+0x70>)
 80037e6:	f007 fbe0 	bl	800afaa <f_sync>
 80037ea:	7020      	strb	r0, [r4, #0]
		 if(res != FR_OK)
 80037ec:	b110      	cbz	r0, 80037f4 <SD_Sensor_write+0x48>
			 AIM_Error_Handler(f_sync_E);
 80037ee:	2004      	movs	r0, #4
 80037f0:	f7ff fda8 	bl	8003344 <AIM_Error_Handler>
				SD_Write_Count = 0;                                        // Reset SD write counters
 80037f4:	2300      	movs	r3, #0
 80037f6:	702b      	strb	r3, [r5, #0]
 80037f8:	bd38      	pop	{r3, r4, r5, pc}
	 GREEN_LED_OFF();               // Sensor write Completed
 80037fa:	f7fd feca 	bl	8001592 <GREEN_LED_OFF>
 80037fe:	e7e7      	b.n	80037d0 <SD_Sensor_write+0x24>
				SD_Write_Count++;                                          // Increment SD write counter
 8003800:	7813      	ldrb	r3, [r2, #0]
 8003802:	3301      	adds	r3, #1
 8003804:	b2db      	uxtb	r3, r3
 8003806:	7013      	strb	r3, [r2, #0]
 8003808:	bd38      	pop	{r3, r4, r5, pc}
 800380a:	bf00      	nop
 800380c:	20000010 	.word	0x20000010
 8003810:	20000618 	.word	0x20000618
 8003814:	20008a00 	.word	0x20008a00
 8003818:	20008f86 	.word	0x20008f86
 800381c:	20008d04 	.word	0x20008d04
 8003820:	200089c4 	.word	0x200089c4
 8003824:	20000598 	.word	0x20000598
 8003828:	20008960 	.word	0x20008960

0800382c <AIM_DataStart_at_Reset>:



void AIM_DataStart_at_Reset(void)
{
 800382c:	b510      	push	{r4, lr}
	SD_POWER_ON();
 800382e:	f7fd ff05 	bl	800163c <SD_POWER_ON>
	SD_cnt_limit=3;                    // After 50 write, File will Sync
 8003832:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <AIM_DataStart_at_Reset+0x44>)
 8003834:	2203      	movs	r2, #3
 8003836:	601a      	str	r2, [r3, #0]
	 Data_log_Start_Resume = 1;
 8003838:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <AIM_DataStart_at_Reset+0x48>)
 800383a:	2401      	movs	r4, #1
 800383c:	701c      	strb	r4, [r3, #0]
		FATFS_Init();
 800383e:	f7ff fdfb 	bl	8003438 <FATFS_Init>
		Open_File_For_Sensor_Write();
 8003842:	f7ff fec7 	bl	80035d4 <Open_File_For_Sensor_Write>
	Reset_All();
 8003846:	f7ff fd07 	bl	8003258 <Reset_All>
	  Start_LPTIMCounter2(0x20); //0xFF //0x40
 800384a:	2020      	movs	r0, #32
 800384c:	f000 fe04 	bl	8004458 <Start_LPTIMCounter2>
 8003850:	4a09      	ldr	r2, [pc, #36]	; (8003878 <AIM_DataStart_at_Reset+0x4c>)
 8003852:	6893      	ldr	r3, [r2, #8]
 8003854:	f043 0302 	orr.w	r3, r3, #2
 8003858:	6093      	str	r3, [r2, #8]
 800385a:	4b08      	ldr	r3, [pc, #32]	; (800387c <AIM_DataStart_at_Reset+0x50>)
 800385c:	2204      	movs	r2, #4
 800385e:	609a      	str	r2, [r3, #8]
		LL_LPTIM_EnableIT_ARRM(LPTIM2);
		NVIC_EnableIRQ(LPTIM2_IRQn);
	Pros_state = LP_STOP;
 8003860:	4a07      	ldr	r2, [pc, #28]	; (8003880 <AIM_DataStart_at_Reset+0x54>)
 8003862:	7014      	strb	r4, [r2, #0]
	USB_Mode = 1;
 8003864:	4a07      	ldr	r2, [pc, #28]	; (8003884 <AIM_DataStart_at_Reset+0x58>)
 8003866:	7014      	strb	r4, [r2, #0]
 8003868:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	bd10      	pop	{r4, pc}
 8003870:	20008960 	.word	0x20008960
 8003874:	200086e8 	.word	0x200086e8
 8003878:	40009400 	.word	0x40009400
 800387c:	e000e100 	.word	0xe000e100
 8003880:	20008658 	.word	0x20008658
 8003884:	20008fc4 	.word	0x20008fc4

08003888 <MPU_9D_store_IMU1_SPI1>:
//    BSbuffer[s_flag].MY[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
//    BSbuffer[s_flag].MZ[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
}

void MPU_9D_store_IMU1_SPI1(void)
{
 8003888:	b530      	push	{r4, r5, lr}
    uint8_t response[21];
    WriteReg1(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 800388a:	218c      	movs	r1, #140	; 0x8c
{
 800388c:	b087      	sub	sp, #28
    WriteReg1(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 800388e:	2025      	movs	r0, #37	; 0x25
 8003890:	f7ff f9a0 	bl	8002bd4 <WriteReg1>
    WriteReg1(MPUREG_I2C_SLV0_REG, AK8963_HXL);                // I2C slave 0 register address from where to begin data transfer
 8003894:	2103      	movs	r1, #3
 8003896:	2026      	movs	r0, #38	; 0x26
 8003898:	f7ff f99c 	bl	8002bd4 <WriteReg1>
    WriteReg1(MPUREG_I2C_SLV0_CTRL, 0x87);                     // Read 7 bytes from the magnetometer
 800389c:	2187      	movs	r1, #135	; 0x87
 800389e:	2027      	movs	r0, #39	; 0x27
 80038a0:	f7ff f998 	bl	8002bd4 <WriteReg1>

    ReadRegs1(MPUREG_ACCEL_XOUT_H,response,21);
 80038a4:	4669      	mov	r1, sp
 80038a6:	2215      	movs	r2, #21
 80038a8:	203b      	movs	r0, #59	; 0x3b
 80038aa:	f7ff fa07 	bl	8002cbc <ReadRegs1>

    BSbuffer[s_flag].AX1[Sub_cnt]=((int16_t)response[0]<<8)|response[1];
 80038ae:	492c      	ldr	r1, [pc, #176]	; (8003960 <MPU_9D_store_IMU1_SPI1+0xd8>)
 80038b0:	4a2c      	ldr	r2, [pc, #176]	; (8003964 <MPU_9D_store_IMU1_SPI1+0xdc>)
 80038b2:	780c      	ldrb	r4, [r1, #0]
 80038b4:	6810      	ldr	r0, [r2, #0]
 80038b6:	f89d 5000 	ldrb.w	r5, [sp]
 80038ba:	4b2b      	ldr	r3, [pc, #172]	; (8003968 <MPU_9D_store_IMU1_SPI1+0xe0>)
 80038bc:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80038c0:	f89d 4001 	ldrb.w	r4, [sp, #1]
 80038c4:	3004      	adds	r0, #4
 80038c6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80038ca:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].AY1[Sub_cnt]=((int16_t)response[2]<<8)|response[3];
 80038ce:	780c      	ldrb	r4, [r1, #0]
 80038d0:	6810      	ldr	r0, [r2, #0]
 80038d2:	f89d 5002 	ldrb.w	r5, [sp, #2]
 80038d6:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80038da:	f89d 4003 	ldrb.w	r4, [sp, #3]
 80038de:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80038e2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80038e6:	f8a0 417c 	strh.w	r4, [r0, #380]	; 0x17c
    BSbuffer[s_flag].AZ1[Sub_cnt]=((int16_t)response[4]<<8)|response[5];
 80038ea:	780c      	ldrb	r4, [r1, #0]
 80038ec:	6810      	ldr	r0, [r2, #0]
 80038ee:	f89d 5004 	ldrb.w	r5, [sp, #4]
 80038f2:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80038f6:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80038fa:	f500 70bc 	add.w	r0, r0, #376	; 0x178
 80038fe:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8003902:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GX1[Sub_cnt]=((int16_t)response[8]<<8)|response[9];
 8003906:	780c      	ldrb	r4, [r1, #0]
 8003908:	6810      	ldr	r0, [r2, #0]
 800390a:	f89d 5008 	ldrb.w	r5, [sp, #8]
 800390e:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8003912:	f89d 4009 	ldrb.w	r4, [sp, #9]
 8003916:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800391a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800391e:	f8a0 4464 	strh.w	r4, [r0, #1124]	; 0x464
    BSbuffer[s_flag].GY1[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 8003922:	780c      	ldrb	r4, [r1, #0]
 8003924:	6810      	ldr	r0, [r2, #0]
 8003926:	f89d 500a 	ldrb.w	r5, [sp, #10]
    BSbuffer[s_flag].GZ1[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 800392a:	7809      	ldrb	r1, [r1, #0]
 800392c:	6812      	ldr	r2, [r2, #0]
    BSbuffer[s_flag].GY1[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 800392e:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8003932:	f89d 400b 	ldrb.w	r4, [sp, #11]
 8003936:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    BSbuffer[s_flag].GZ1[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 800393a:	eb02 3241 	add.w	r2, r2, r1, lsl #13
    BSbuffer[s_flag].GY1[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 800393e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8003942:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GZ1[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 8003946:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800394a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800394e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8003952:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003956:	f8a3 274c 	strh.w	r2, [r3, #1868]	; 0x74c
//    BSbuffer[s_flag].MX1[Sub_cnt]=((int16_t)response[15]<<8)|response[14];
//    BSbuffer[s_flag].MY1[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
//    BSbuffer[s_flag].MZ1[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
}
 800395a:	b007      	add	sp, #28
 800395c:	bd30      	pop	{r4, r5, pc}
 800395e:	bf00      	nop
 8003960:	200005cc 	.word	0x200005cc
 8003964:	200005a0 	.word	0x200005a0
 8003968:	20000618 	.word	0x20000618

0800396c <MPU_9D_store_IMU2_SPI1>:

void MPU_9D_store_IMU2_SPI1(void)
{
 800396c:	b530      	push	{r4, r5, lr}
    uint8_t response[21];
    WriteReg1_imu2(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 800396e:	218c      	movs	r1, #140	; 0x8c
{
 8003970:	b087      	sub	sp, #28
    WriteReg1_imu2(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 8003972:	2025      	movs	r0, #37	; 0x25
 8003974:	f7ff f950 	bl	8002c18 <WriteReg1_imu2>
    WriteReg1_imu2(MPUREG_I2C_SLV0_REG, AK8963_HXL);                // I2C slave 0 register address from where to begin data transfer
 8003978:	2103      	movs	r1, #3
 800397a:	2026      	movs	r0, #38	; 0x26
 800397c:	f7ff f94c 	bl	8002c18 <WriteReg1_imu2>
    WriteReg1_imu2(MPUREG_I2C_SLV0_CTRL, 0x87);                     // Read 7 bytes from the magnetometer
 8003980:	2187      	movs	r1, #135	; 0x87
 8003982:	2027      	movs	r0, #39	; 0x27
 8003984:	f7ff f948 	bl	8002c18 <WriteReg1_imu2>

    ReadRegs1_imu2(MPUREG_ACCEL_XOUT_H,response,21);
 8003988:	4669      	mov	r1, sp
 800398a:	2215      	movs	r2, #21
 800398c:	203b      	movs	r0, #59	; 0x3b
 800398e:	f7ff f9bf 	bl	8002d10 <ReadRegs1_imu2>

    BSbuffer[s_flag].AX2[Sub_cnt]=((int16_t)response[0]<<8)|response[1];
 8003992:	492d      	ldr	r1, [pc, #180]	; (8003a48 <MPU_9D_store_IMU2_SPI1+0xdc>)
 8003994:	4a2d      	ldr	r2, [pc, #180]	; (8003a4c <MPU_9D_store_IMU2_SPI1+0xe0>)
 8003996:	780c      	ldrb	r4, [r1, #0]
 8003998:	6810      	ldr	r0, [r2, #0]
 800399a:	f89d 5000 	ldrb.w	r5, [sp]
 800399e:	4b2c      	ldr	r3, [pc, #176]	; (8003a50 <MPU_9D_store_IMU2_SPI1+0xe4>)
 80039a0:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80039a4:	f89d 4001 	ldrb.w	r4, [sp, #1]
 80039a8:	f500 608c 	add.w	r0, r0, #1120	; 0x460
 80039ac:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80039b0:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].AY2[Sub_cnt]=((int16_t)response[2]<<8)|response[3];
 80039b4:	780c      	ldrb	r4, [r1, #0]
 80039b6:	6810      	ldr	r0, [r2, #0]
 80039b8:	f89d 5002 	ldrb.w	r5, [sp, #2]
 80039bc:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80039c0:	f89d 4003 	ldrb.w	r4, [sp, #3]
 80039c4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80039c8:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80039cc:	f8a0 4a34 	strh.w	r4, [r0, #2612]	; 0xa34
    BSbuffer[s_flag].AZ2[Sub_cnt]=((int16_t)response[4]<<8)|response[5];
 80039d0:	780c      	ldrb	r4, [r1, #0]
 80039d2:	6810      	ldr	r0, [r2, #0]
 80039d4:	f89d 5004 	ldrb.w	r5, [sp, #4]
 80039d8:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80039dc:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80039e0:	f200 50d4 	addw	r0, r0, #1492	; 0x5d4
 80039e4:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80039e8:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GX2[Sub_cnt]=((int16_t)response[8]<<8)|response[9];
 80039ec:	780c      	ldrb	r4, [r1, #0]
 80039ee:	6810      	ldr	r0, [r2, #0]
 80039f0:	f89d 5008 	ldrb.w	r5, [sp, #8]
 80039f4:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80039f8:	f89d 4009 	ldrb.w	r4, [sp, #9]
 80039fc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003a00:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8003a04:	f8a0 4d1c 	strh.w	r4, [r0, #3356]	; 0xd1c
    BSbuffer[s_flag].GY2[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 8003a08:	780c      	ldrb	r4, [r1, #0]
 8003a0a:	6810      	ldr	r0, [r2, #0]
    BSbuffer[s_flag].GZ2[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 8003a0c:	7809      	ldrb	r1, [r1, #0]
 8003a0e:	6812      	ldr	r2, [r2, #0]
    BSbuffer[s_flag].GY2[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 8003a10:	f89d 500a 	ldrb.w	r5, [sp, #10]
 8003a14:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8003a18:	f89d 400b 	ldrb.w	r4, [sp, #11]
 8003a1c:	f500 60e9 	add.w	r0, r0, #1864	; 0x748
    BSbuffer[s_flag].GZ2[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 8003a20:	eb02 3241 	add.w	r2, r2, r1, lsl #13
    BSbuffer[s_flag].GY2[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 8003a24:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    BSbuffer[s_flag].GZ2[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 8003a28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
    BSbuffer[s_flag].GY2[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 8003a2c:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GZ2[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 8003a30:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003a34:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003a38:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8003a3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003a40:	809a      	strh	r2, [r3, #4]

}
 8003a42:	b007      	add	sp, #28
 8003a44:	bd30      	pop	{r4, r5, pc}
 8003a46:	bf00      	nop
 8003a48:	200005cc 	.word	0x200005cc
 8003a4c:	200005a0 	.word	0x200005a0
 8003a50:	20000618 	.word	0x20000618

08003a54 <MPU_9D_store_IMU4_SPI3>:

void MPU_9D_store_IMU4_SPI3(void)
{
 8003a54:	b530      	push	{r4, r5, lr}
    uint8_t response[21];
    //change all writereg3 for imu5
    WriteReg3(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 8003a56:	218c      	movs	r1, #140	; 0x8c
{
 8003a58:	b087      	sub	sp, #28
    WriteReg3(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 8003a5a:	2025      	movs	r0, #37	; 0x25
 8003a5c:	f7ff f86a 	bl	8002b34 <WriteReg3>
    WriteReg3(MPUREG_I2C_SLV0_REG, AK8963_HXL);                // I2C slave 0 register address from where to begin data transfer
 8003a60:	2103      	movs	r1, #3
 8003a62:	2026      	movs	r0, #38	; 0x26
 8003a64:	f7ff f866 	bl	8002b34 <WriteReg3>
    WriteReg3(MPUREG_I2C_SLV0_CTRL, 0x87);                     // Read 7 bytes from the magnetometer
 8003a68:	2187      	movs	r1, #135	; 0x87
 8003a6a:	2027      	movs	r0, #39	; 0x27
 8003a6c:	f7ff f862 	bl	8002b34 <WriteReg3>

    ReadRegs3(MPUREG_ACCEL_XOUT_H,response,21); //create and change here for IMU5
 8003a70:	4669      	mov	r1, sp
 8003a72:	2215      	movs	r2, #21
 8003a74:	203b      	movs	r0, #59	; 0x3b
 8003a76:	f7ff f975 	bl	8002d64 <ReadRegs3>

    //change these to store for IMU5
    BSbuffer[s_flag].AX4[Sub_cnt]=((int16_t)response[0]<<8)|response[1];
 8003a7a:	4935      	ldr	r1, [pc, #212]	; (8003b50 <MPU_9D_store_IMU4_SPI3+0xfc>)
 8003a7c:	4835      	ldr	r0, [pc, #212]	; (8003b54 <MPU_9D_store_IMU4_SPI3+0x100>)
 8003a7e:	f89d 5000 	ldrb.w	r5, [sp]
 8003a82:	7804      	ldrb	r4, [r0, #0]
 8003a84:	680b      	ldr	r3, [r1, #0]
 8003a86:	4a34      	ldr	r2, [pc, #208]	; (8003b58 <MPU_9D_store_IMU4_SPI3+0x104>)
 8003a88:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 8003a8c:	f89d 4001 	ldrb.w	r4, [sp, #1]
 8003a90:	f603 5318 	addw	r3, r3, #3352	; 0xd18
 8003a94:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8003a98:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
    BSbuffer[s_flag].AY4[Sub_cnt]=((int16_t)response[2]<<8)|response[3];
 8003a9c:	7804      	ldrb	r4, [r0, #0]
 8003a9e:	680b      	ldr	r3, [r1, #0]
 8003aa0:	f89d 5002 	ldrb.w	r5, [sp, #2]
 8003aa4:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 8003aa8:	f503 635d 	add.w	r3, r3, #3536	; 0xdd0
 8003aac:	f89d 4003 	ldrb.w	r4, [sp, #3]
 8003ab0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8003ab4:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8003ab8:	809c      	strh	r4, [r3, #4]
    BSbuffer[s_flag].AZ4[Sub_cnt]=((int16_t)response[4]<<8)|response[5];
 8003aba:	7804      	ldrb	r4, [r0, #0]
 8003abc:	680b      	ldr	r3, [r1, #0]
 8003abe:	f89d 5004 	ldrb.w	r5, [sp, #4]
 8003ac2:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 8003ac6:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8003aca:	f603 638c 	addw	r3, r3, #3724	; 0xe8c
 8003ace:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8003ad2:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
    BSbuffer[s_flag].GX4[Sub_cnt]=((int16_t)response[8]<<8)|response[9];
 8003ad6:	7804      	ldrb	r4, [r0, #0]
 8003ad8:	680b      	ldr	r3, [r1, #0]
 8003ada:	f89d 5008 	ldrb.w	r5, [sp, #8]
 8003ade:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 8003ae2:	f603 7344 	addw	r3, r3, #3908	; 0xf44
 8003ae6:	f89d 4009 	ldrb.w	r4, [sp, #9]
 8003aea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8003aee:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8003af2:	809c      	strh	r4, [r3, #4]
    BSbuffer[s_flag].GY4[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 8003af4:	7804      	ldrb	r4, [r0, #0]
 8003af6:	680b      	ldr	r3, [r1, #0]
 8003af8:	f89d 500a 	ldrb.w	r5, [sp, #10]
 8003afc:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 8003b00:	f89d 400b 	ldrb.w	r4, [sp, #11]
 8003b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b08:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8003b0c:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
    BSbuffer[s_flag].GZ4[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 8003b10:	7804      	ldrb	r4, [r0, #0]
 8003b12:	680b      	ldr	r3, [r1, #0]
 8003b14:	f89d 500c 	ldrb.w	r5, [sp, #12]
//    BSbuffer[s_flag].MX[Sub_cnt]=((int16_t)response[15]<<8)|response[14];
//    BSbuffer[s_flag].MY[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
 //   BSbuffer[s_flag].MZ[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
    BSbuffer[s_flag].marking_sw[Sub_cnt]=(int16_t) (LL_GPIO_IsInputPinSet(GPIOA,LL_GPIO_PIN_10));
 8003b18:	7800      	ldrb	r0, [r0, #0]
    BSbuffer[s_flag].GZ4[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 8003b1a:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 8003b1e:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8003b22:	f89d 400d 	ldrb.w	r4, [sp, #13]
 8003b26:	3318      	adds	r3, #24
 8003b28:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8003b2c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8003b30:	809c      	strh	r4, [r3, #4]
    BSbuffer[s_flag].marking_sw[Sub_cnt]=(int16_t) (LL_GPIO_IsInputPinSet(GPIOA,LL_GPIO_PIN_10));
 8003b32:	680b      	ldr	r3, [r1, #0]
 8003b34:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8003b38:	eb03 3340 	add.w	r3, r3, r0, lsl #13
 8003b3c:	6909      	ldr	r1, [r1, #16]
 8003b3e:	f503 53d1 	add.w	r3, r3, #6688	; 0x1a20
 8003b42:	330c      	adds	r3, #12
 8003b44:	f3c1 2180 	ubfx	r1, r1, #10, #1
 8003b48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8003b4c:	b007      	add	sp, #28
 8003b4e:	bd30      	pop	{r4, r5, pc}
 8003b50:	200005a0 	.word	0x200005a0
 8003b54:	200005cc 	.word	0x200005cc
 8003b58:	20000618 	.word	0x20000618

08003b5c <MPU_9D_store_IMU5_SPI3>:

void MPU_9D_store_IMU5_SPI3(void)
{
 8003b5c:	b530      	push	{r4, r5, lr}
    uint8_t response[21];
    //change all writereg3 for imu5
    WriteReg3_imu5(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 8003b5e:	218c      	movs	r1, #140	; 0x8c
{
 8003b60:	b087      	sub	sp, #28
    WriteReg3_imu5(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 8003b62:	2025      	movs	r0, #37	; 0x25
 8003b64:	f7ff f80e 	bl	8002b84 <WriteReg3_imu5>
    WriteReg3_imu5(MPUREG_I2C_SLV0_REG, AK8963_HXL);                // I2C slave 0 register address from where to begin data transfer
 8003b68:	2103      	movs	r1, #3
 8003b6a:	2026      	movs	r0, #38	; 0x26
 8003b6c:	f7ff f80a 	bl	8002b84 <WriteReg3_imu5>
    WriteReg3_imu5(MPUREG_I2C_SLV0_CTRL, 0x87);                     // Read 7 bytes from the magnetometer
 8003b70:	2187      	movs	r1, #135	; 0x87
 8003b72:	2027      	movs	r0, #39	; 0x27
 8003b74:	f7ff f806 	bl	8002b84 <WriteReg3_imu5>

    ReadRegs3_imu5(MPUREG_ACCEL_XOUT_H,response,21); //create and change here for IMU5
 8003b78:	4669      	mov	r1, sp
 8003b7a:	2215      	movs	r2, #21
 8003b7c:	203b      	movs	r0, #59	; 0x3b
 8003b7e:	f7ff f923 	bl	8002dc8 <ReadRegs3_imu5>

    //change these to store for IMU5
    BSbuffer[s_flag].AX5[Sub_cnt]=((int16_t)response[0]<<8)|response[1];
 8003b82:	4930      	ldr	r1, [pc, #192]	; (8003c44 <MPU_9D_store_IMU5_SPI3+0xe8>)
 8003b84:	4830      	ldr	r0, [pc, #192]	; (8003c48 <MPU_9D_store_IMU5_SPI3+0xec>)
 8003b86:	f89d 5000 	ldrb.w	r5, [sp]
 8003b8a:	7804      	ldrb	r4, [r0, #0]
 8003b8c:	680b      	ldr	r3, [r1, #0]
 8003b8e:	4a2f      	ldr	r2, [pc, #188]	; (8003c4c <MPU_9D_store_IMU5_SPI3+0xf0>)
 8003b90:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 8003b94:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003b98:	f89d 4001 	ldrb.w	r4, [sp, #1]
 8003b9c:	3314      	adds	r3, #20
 8003b9e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8003ba2:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
    BSbuffer[s_flag].AY5[Sub_cnt]=((int16_t)response[2]<<8)|response[3];
 8003ba6:	7804      	ldrb	r4, [r0, #0]
 8003ba8:	680b      	ldr	r3, [r1, #0]
 8003baa:	f89d 5002 	ldrb.w	r5, [sp, #2]
 8003bae:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 8003bb2:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8003bb6:	f89d 4003 	ldrb.w	r4, [sp, #3]
 8003bba:	330c      	adds	r3, #12
 8003bbc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8003bc0:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8003bc4:	809c      	strh	r4, [r3, #4]
    BSbuffer[s_flag].AZ5[Sub_cnt]=((int16_t)response[4]<<8)|response[5];
 8003bc6:	7804      	ldrb	r4, [r0, #0]
 8003bc8:	680b      	ldr	r3, [r1, #0]
 8003bca:	f89d 5004 	ldrb.w	r5, [sp, #4]
 8003bce:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 8003bd2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8003bd6:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8003bda:	3308      	adds	r3, #8
 8003bdc:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8003be0:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
    BSbuffer[s_flag].GX5[Sub_cnt]=((int16_t)response[8]<<8)|response[9];
 8003be4:	7804      	ldrb	r4, [r0, #0]
 8003be6:	680b      	ldr	r3, [r1, #0]
 8003be8:	f89d 5008 	ldrb.w	r5, [sp, #8]
 8003bec:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 8003bf0:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8003bf4:	f89d 4009 	ldrb.w	r4, [sp, #9]
 8003bf8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8003bfc:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8003c00:	809c      	strh	r4, [r3, #4]
    BSbuffer[s_flag].GY5[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 8003c02:	7804      	ldrb	r4, [r0, #0]
 8003c04:	680b      	ldr	r3, [r1, #0]
 8003c06:	f89d 500a 	ldrb.w	r5, [sp, #10]
    BSbuffer[s_flag].GZ5[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 8003c0a:	7800      	ldrb	r0, [r0, #0]
    BSbuffer[s_flag].GY5[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 8003c0c:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 8003c10:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8003c14:	f89d 400b 	ldrb.w	r4, [sp, #11]
 8003c18:	331c      	adds	r3, #28
 8003c1a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8003c1e:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
    BSbuffer[s_flag].GZ5[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 8003c22:	680b      	ldr	r3, [r1, #0]
 8003c24:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003c28:	eb03 3340 	add.w	r3, r3, r0, lsl #13
 8003c2c:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8003c30:	3314      	adds	r3, #20
 8003c32:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003c36:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8003c3a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003c3e:	8093      	strh	r3, [r2, #4]

}
 8003c40:	b007      	add	sp, #28
 8003c42:	bd30      	pop	{r4, r5, pc}
 8003c44:	200005a0 	.word	0x200005a0
 8003c48:	200005cc 	.word	0x200005cc
 8003c4c:	20000618 	.word	0x20000618

08003c50 <MPU_9D_store_IMU3_SPI2>:

//void MPU_9D_store_IMU3_SPI2(void)
void MPU_9D_store_IMU3_SPI2(int value1, int value2, int value3, int value4, int value5, int value6)
{
 8003c50:	b5f0      	push	{r4, r5, r6, r7, lr}
//    BSbuffer[s_flag].GZ3[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
//	mcpwrite(0x0F,0x60);



    BSbuffer[s_flag].AX3[Sub_cnt]=value1;
 8003c52:	4e1d      	ldr	r6, [pc, #116]	; (8003cc8 <MPU_9D_store_IMU3_SPI2+0x78>)
 8003c54:	4d1d      	ldr	r5, [pc, #116]	; (8003ccc <MPU_9D_store_IMU3_SPI2+0x7c>)
 8003c56:	f896 e000 	ldrb.w	lr, [r6]
 8003c5a:	682f      	ldr	r7, [r5, #0]
 8003c5c:	4c1c      	ldr	r4, [pc, #112]	; (8003cd0 <MPU_9D_store_IMU3_SPI2+0x80>)
 8003c5e:	eb07 374e 	add.w	r7, r7, lr, lsl #13
 8003c62:	f607 07bc 	addw	r7, r7, #2236	; 0x8bc
 8003c66:	f824 0017 	strh.w	r0, [r4, r7, lsl #1]
    BSbuffer[s_flag].AY3[Sub_cnt]=value2;
 8003c6a:	7837      	ldrb	r7, [r6, #0]
 8003c6c:	6828      	ldr	r0, [r5, #0]
 8003c6e:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 8003c72:	f600 1074 	addw	r0, r0, #2420	; 0x974
 8003c76:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 8003c7a:	8081      	strh	r1, [r0, #4]
    BSbuffer[s_flag].AZ3[Sub_cnt]=value3;
 8003c7c:	7830      	ldrb	r0, [r6, #0]
 8003c7e:	6829      	ldr	r1, [r5, #0]
 8003c80:	eb01 3140 	add.w	r1, r1, r0, lsl #13
 8003c84:	f501 6123 	add.w	r1, r1, #2608	; 0xa30
 8003c88:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
    BSbuffer[s_flag].GX3[Sub_cnt]=value4;
 8003c8c:	7831      	ldrb	r1, [r6, #0]
 8003c8e:	682a      	ldr	r2, [r5, #0]
 8003c90:	eb02 3241 	add.w	r2, r2, r1, lsl #13
 8003c94:	f602 22e8 	addw	r2, r2, #2792	; 0xae8
 8003c98:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003c9c:	8093      	strh	r3, [r2, #4]
    BSbuffer[s_flag].GY3[Sub_cnt]=value5;
 8003c9e:	7832      	ldrb	r2, [r6, #0]
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8003ca6:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 8003caa:	9a05      	ldr	r2, [sp, #20]
 8003cac:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
    BSbuffer[s_flag].GZ3[Sub_cnt]=value6;
 8003cb0:	7832      	ldrb	r2, [r6, #0]
 8003cb2:	682b      	ldr	r3, [r5, #0]
 8003cb4:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8003cb8:	f603 435c 	addw	r3, r3, #3164	; 0xc5c
 8003cbc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8003cc0:	9b06      	ldr	r3, [sp, #24]
 8003cc2:	80a3      	strh	r3, [r4, #4]
 8003cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	200005cc 	.word	0x200005cc
 8003ccc:	200005a0 	.word	0x200005a0
 8003cd0:	20000618 	.word	0x20000618

08003cd4 <MPU1_SPI1_init>:
        mag_data[i-7] = data * Magnetometer_ASA[i-7];
    }
}

void MPU1_SPI1_init(void)
{
 8003cd4:	b530      	push	{r4, r5, lr}
 8003cd6:	b08b      	sub	sp, #44	; 0x2c
	float temp[3];
	uint8_t i = 0;
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = {
 8003cd8:	226b      	movs	r2, #107	; 0x6b
 8003cda:	f88d 2005 	strb.w	r2, [sp, #5]
 8003cde:	f88d 2007 	strb.w	r2, [sp, #7]
 8003ce2:	226c      	movs	r2, #108	; 0x6c
 8003ce4:	f88d 2009 	strb.w	r2, [sp, #9]
 8003ce8:	4a33      	ldr	r2, [pc, #204]	; (8003db8 <MPU1_SPI1_init+0xe4>)
 8003cea:	7812      	ldrb	r2, [r2, #0]
 8003cec:	f88d 200a 	strb.w	r2, [sp, #10]
 8003cf0:	221a      	movs	r2, #26
 8003cf2:	f88d 200b 	strb.w	r2, [sp, #11]
 8003cf6:	2210      	movs	r2, #16
 8003cf8:	f88d 200c 	strb.w	r2, [sp, #12]
 8003cfc:	f88d 200e 	strb.w	r2, [sp, #14]
 8003d00:	221c      	movs	r2, #28
 8003d02:	f88d 200f 	strb.w	r2, [sp, #15]
 8003d06:	4a2d      	ldr	r2, [pc, #180]	; (8003dbc <MPU1_SPI1_init+0xe8>)
 8003d08:	7812      	ldrb	r2, [r2, #0]
 8003d0a:	f88d 2010 	strb.w	r2, [sp, #16]
 8003d0e:	221d      	movs	r2, #29
 8003d10:	f88d 2011 	strb.w	r2, [sp, #17]
 8003d14:	2212      	movs	r2, #18
 8003d16:	f88d 2012 	strb.w	r2, [sp, #18]
 8003d1a:	2237      	movs	r2, #55	; 0x37
 8003d1c:	f88d 2013 	strb.w	r2, [sp, #19]
 8003d20:	2230      	movs	r2, #48	; 0x30
 8003d22:	f88d 2014 	strb.w	r2, [sp, #20]
 8003d26:	226a      	movs	r2, #106	; 0x6a
 8003d28:	f88d 2015 	strb.w	r2, [sp, #21]
 8003d2c:	220d      	movs	r2, #13
 8003d2e:	f88d 2016 	strb.w	r2, [sp, #22]
 8003d32:	2224      	movs	r2, #36	; 0x24
 8003d34:	f88d 2017 	strb.w	r2, [sp, #23]
 8003d38:	220c      	movs	r2, #12
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	f88d 2018 	strb.w	r2, [sp, #24]
 8003d40:	2225      	movs	r2, #37	; 0x25
 8003d42:	f88d 3004 	strb.w	r3, [sp, #4]
 8003d46:	211b      	movs	r1, #27
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f88d 2019 	strb.w	r2, [sp, #25]
 8003d4e:	220b      	movs	r2, #11
 8003d50:	2026      	movs	r0, #38	; 0x26
 8003d52:	f88d 3006 	strb.w	r3, [sp, #6]
 8003d56:	f88d 100d 	strb.w	r1, [sp, #13]
 8003d5a:	f88d 201a 	strb.w	r2, [sp, #26]
 8003d5e:	f88d 301c 	strb.w	r3, [sp, #28]
 8003d62:	2163      	movs	r1, #99	; 0x63
 8003d64:	2281      	movs	r2, #129	; 0x81
 8003d66:	2327      	movs	r3, #39	; 0x27
 8003d68:	250a      	movs	r5, #10
 8003d6a:	2400      	movs	r4, #0
 8003d6c:	f88d 001b 	strb.w	r0, [sp, #27]
 8003d70:	f88d 5020 	strb.w	r5, [sp, #32]
 8003d74:	f88d 4008 	strb.w	r4, [sp, #8]
 8003d78:	f88d 101d 	strb.w	r1, [sp, #29]
 8003d7c:	f88d 201e 	strb.w	r2, [sp, #30]
 8003d80:	f88d 301f 	strb.w	r3, [sp, #31]
 8003d84:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8003d88:	2016      	movs	r0, #22
 8003d8a:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8003d8e:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 8003d92:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8003d96:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25

	};


    for(i = 0; i < MPU_InitRegNum; i++) {
        WriteReg1(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 8003d9a:	ad01      	add	r5, sp, #4
 8003d9c:	192b      	adds	r3, r5, r4
 8003d9e:	5d29      	ldrb	r1, [r5, r4]
 8003da0:	7858      	ldrb	r0, [r3, #1]
 8003da2:	f7fe ff17 	bl	8002bd4 <WriteReg1>
 8003da6:	3402      	adds	r4, #2
        delay_us(1000);  // I2C must slow down the write speed, otherwise it won't work
 8003da8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dac:	f000 fb4a 	bl	8004444 <delay_us>
    for(i = 0; i < MPU_InitRegNum; i++) {
 8003db0:	2c22      	cmp	r4, #34	; 0x22
 8003db2:	d1f3      	bne.n	8003d9c <MPU1_SPI1_init+0xc8>

 //   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
 //   return 0;


}
 8003db4:	b00b      	add	sp, #44	; 0x2c
 8003db6:	bd30      	pop	{r4, r5, pc}
 8003db8:	20000011 	.word	0x20000011
 8003dbc:	20000012 	.word	0x20000012

08003dc0 <MPU2_SPI1_init>:

void MPU2_SPI1_init(void)
{
 8003dc0:	b530      	push	{r4, r5, lr}
 8003dc2:	b08b      	sub	sp, #44	; 0x2c
	float temp[3];
	uint8_t i = 0;
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = {
 8003dc4:	226b      	movs	r2, #107	; 0x6b
 8003dc6:	f88d 2005 	strb.w	r2, [sp, #5]
 8003dca:	f88d 2007 	strb.w	r2, [sp, #7]
 8003dce:	226c      	movs	r2, #108	; 0x6c
 8003dd0:	f88d 2009 	strb.w	r2, [sp, #9]
 8003dd4:	4a33      	ldr	r2, [pc, #204]	; (8003ea4 <MPU2_SPI1_init+0xe4>)
 8003dd6:	7812      	ldrb	r2, [r2, #0]
 8003dd8:	f88d 200a 	strb.w	r2, [sp, #10]
 8003ddc:	221a      	movs	r2, #26
 8003dde:	f88d 200b 	strb.w	r2, [sp, #11]
 8003de2:	2210      	movs	r2, #16
 8003de4:	f88d 200c 	strb.w	r2, [sp, #12]
 8003de8:	f88d 200e 	strb.w	r2, [sp, #14]
 8003dec:	221c      	movs	r2, #28
 8003dee:	f88d 200f 	strb.w	r2, [sp, #15]
 8003df2:	4a2d      	ldr	r2, [pc, #180]	; (8003ea8 <MPU2_SPI1_init+0xe8>)
 8003df4:	7812      	ldrb	r2, [r2, #0]
 8003df6:	f88d 2010 	strb.w	r2, [sp, #16]
 8003dfa:	221d      	movs	r2, #29
 8003dfc:	f88d 2011 	strb.w	r2, [sp, #17]
 8003e00:	2212      	movs	r2, #18
 8003e02:	f88d 2012 	strb.w	r2, [sp, #18]
 8003e06:	2237      	movs	r2, #55	; 0x37
 8003e08:	f88d 2013 	strb.w	r2, [sp, #19]
 8003e0c:	2230      	movs	r2, #48	; 0x30
 8003e0e:	f88d 2014 	strb.w	r2, [sp, #20]
 8003e12:	226a      	movs	r2, #106	; 0x6a
 8003e14:	f88d 2015 	strb.w	r2, [sp, #21]
 8003e18:	220d      	movs	r2, #13
 8003e1a:	f88d 2016 	strb.w	r2, [sp, #22]
 8003e1e:	2224      	movs	r2, #36	; 0x24
 8003e20:	f88d 2017 	strb.w	r2, [sp, #23]
 8003e24:	220c      	movs	r2, #12
 8003e26:	2380      	movs	r3, #128	; 0x80
 8003e28:	f88d 2018 	strb.w	r2, [sp, #24]
 8003e2c:	2225      	movs	r2, #37	; 0x25
 8003e2e:	f88d 3004 	strb.w	r3, [sp, #4]
 8003e32:	211b      	movs	r1, #27
 8003e34:	2301      	movs	r3, #1
 8003e36:	f88d 2019 	strb.w	r2, [sp, #25]
 8003e3a:	220b      	movs	r2, #11
 8003e3c:	2026      	movs	r0, #38	; 0x26
 8003e3e:	f88d 3006 	strb.w	r3, [sp, #6]
 8003e42:	f88d 100d 	strb.w	r1, [sp, #13]
 8003e46:	f88d 201a 	strb.w	r2, [sp, #26]
 8003e4a:	f88d 301c 	strb.w	r3, [sp, #28]
 8003e4e:	2163      	movs	r1, #99	; 0x63
 8003e50:	2281      	movs	r2, #129	; 0x81
 8003e52:	2327      	movs	r3, #39	; 0x27
 8003e54:	250a      	movs	r5, #10
 8003e56:	2400      	movs	r4, #0
 8003e58:	f88d 001b 	strb.w	r0, [sp, #27]
 8003e5c:	f88d 5020 	strb.w	r5, [sp, #32]
 8003e60:	f88d 4008 	strb.w	r4, [sp, #8]
 8003e64:	f88d 101d 	strb.w	r1, [sp, #29]
 8003e68:	f88d 201e 	strb.w	r2, [sp, #30]
 8003e6c:	f88d 301f 	strb.w	r3, [sp, #31]
 8003e70:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8003e74:	2016      	movs	r0, #22
 8003e76:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8003e7a:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 8003e7e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8003e82:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25

	};


    for(i = 0; i < MPU_InitRegNum; i++) {
    	WriteReg1_imu2(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 8003e86:	ad01      	add	r5, sp, #4
 8003e88:	192b      	adds	r3, r5, r4
 8003e8a:	5d29      	ldrb	r1, [r5, r4]
 8003e8c:	7858      	ldrb	r0, [r3, #1]
 8003e8e:	f7fe fec3 	bl	8002c18 <WriteReg1_imu2>
 8003e92:	3402      	adds	r4, #2
        delay_us(1000);  // I2C must slow down the write speed, otherwise it won't work
 8003e94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e98:	f000 fad4 	bl	8004444 <delay_us>
    for(i = 0; i < MPU_InitRegNum; i++) {
 8003e9c:	2c22      	cmp	r4, #34	; 0x22
 8003e9e:	d1f3      	bne.n	8003e88 <MPU2_SPI1_init+0xc8>

 //   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
 //   return 0;


}
 8003ea0:	b00b      	add	sp, #44	; 0x2c
 8003ea2:	bd30      	pop	{r4, r5, pc}
 8003ea4:	20000011 	.word	0x20000011
 8003ea8:	20000012 	.word	0x20000012

08003eac <P_IMU1_SPI1_Initialization_at_reset>:
{
 8003eac:	b508      	push	{r3, lr}
	P_IMU1_SPI1_Init();         // Accelerometer Chip Initialization
 8003eae:	f7ff f8bf 	bl	8003030 <P_IMU1_SPI1_Init>
	delay_us(7000);         // Arbitrary delay after SPI initialization
 8003eb2:	f641 3058 	movw	r0, #7000	; 0x1b58
 8003eb6:	f000 fac5 	bl	8004444 <delay_us>
	MPU1_SPI1_init();
 8003eba:	f7ff ff0b 	bl	8003cd4 <MPU1_SPI1_init>
}
 8003ebe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MPU2_SPI1_init();
 8003ec2:	f7ff bf7d 	b.w	8003dc0 <MPU2_SPI1_init>
	...

08003ec8 <MPU4_SPI3_init>:


void MPU4_SPI3_init(void)
{
 8003ec8:	b530      	push	{r4, r5, lr}
 8003eca:	b08b      	sub	sp, #44	; 0x2c
//	float temp[3];
	uint8_t i = 0;
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = {
 8003ecc:	226b      	movs	r2, #107	; 0x6b
 8003ece:	f88d 2005 	strb.w	r2, [sp, #5]
 8003ed2:	f88d 2007 	strb.w	r2, [sp, #7]
 8003ed6:	226c      	movs	r2, #108	; 0x6c
 8003ed8:	f88d 2009 	strb.w	r2, [sp, #9]
 8003edc:	4a33      	ldr	r2, [pc, #204]	; (8003fac <MPU4_SPI3_init+0xe4>)
 8003ede:	7812      	ldrb	r2, [r2, #0]
 8003ee0:	f88d 200a 	strb.w	r2, [sp, #10]
 8003ee4:	221a      	movs	r2, #26
 8003ee6:	f88d 200b 	strb.w	r2, [sp, #11]
 8003eea:	2210      	movs	r2, #16
 8003eec:	f88d 200c 	strb.w	r2, [sp, #12]
 8003ef0:	f88d 200e 	strb.w	r2, [sp, #14]
 8003ef4:	221c      	movs	r2, #28
 8003ef6:	f88d 200f 	strb.w	r2, [sp, #15]
 8003efa:	4a2d      	ldr	r2, [pc, #180]	; (8003fb0 <MPU4_SPI3_init+0xe8>)
 8003efc:	7812      	ldrb	r2, [r2, #0]
 8003efe:	f88d 2010 	strb.w	r2, [sp, #16]
 8003f02:	221d      	movs	r2, #29
 8003f04:	f88d 2011 	strb.w	r2, [sp, #17]
 8003f08:	2212      	movs	r2, #18
 8003f0a:	f88d 2012 	strb.w	r2, [sp, #18]
 8003f0e:	2237      	movs	r2, #55	; 0x37
 8003f10:	f88d 2013 	strb.w	r2, [sp, #19]
 8003f14:	2230      	movs	r2, #48	; 0x30
 8003f16:	f88d 2014 	strb.w	r2, [sp, #20]
 8003f1a:	226a      	movs	r2, #106	; 0x6a
 8003f1c:	f88d 2015 	strb.w	r2, [sp, #21]
 8003f20:	220d      	movs	r2, #13
 8003f22:	f88d 2016 	strb.w	r2, [sp, #22]
 8003f26:	2224      	movs	r2, #36	; 0x24
 8003f28:	f88d 2017 	strb.w	r2, [sp, #23]
 8003f2c:	220c      	movs	r2, #12
 8003f2e:	2380      	movs	r3, #128	; 0x80
 8003f30:	f88d 2018 	strb.w	r2, [sp, #24]
 8003f34:	2225      	movs	r2, #37	; 0x25
 8003f36:	f88d 3004 	strb.w	r3, [sp, #4]
 8003f3a:	211b      	movs	r1, #27
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f88d 2019 	strb.w	r2, [sp, #25]
 8003f42:	220b      	movs	r2, #11
 8003f44:	2026      	movs	r0, #38	; 0x26
 8003f46:	f88d 3006 	strb.w	r3, [sp, #6]
 8003f4a:	f88d 100d 	strb.w	r1, [sp, #13]
 8003f4e:	f88d 201a 	strb.w	r2, [sp, #26]
 8003f52:	f88d 301c 	strb.w	r3, [sp, #28]
 8003f56:	2163      	movs	r1, #99	; 0x63
 8003f58:	2281      	movs	r2, #129	; 0x81
 8003f5a:	2327      	movs	r3, #39	; 0x27
 8003f5c:	250a      	movs	r5, #10
 8003f5e:	2400      	movs	r4, #0
 8003f60:	f88d 001b 	strb.w	r0, [sp, #27]
 8003f64:	f88d 5020 	strb.w	r5, [sp, #32]
 8003f68:	f88d 4008 	strb.w	r4, [sp, #8]
 8003f6c:	f88d 101d 	strb.w	r1, [sp, #29]
 8003f70:	f88d 201e 	strb.w	r2, [sp, #30]
 8003f74:	f88d 301f 	strb.w	r3, [sp, #31]
 8003f78:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8003f7c:	2016      	movs	r0, #22
 8003f7e:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8003f82:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 8003f86:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8003f8a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	};

	//	 LED_Nucleo_OFF();
    for(i = 0; i < MPU_InitRegNum; i++) {
    	// change here
        WriteReg3(MPU_Init_Data[i][1], MPU_Init_Data[i][0]); // change here
 8003f8e:	ad01      	add	r5, sp, #4
 8003f90:	192b      	adds	r3, r5, r4
 8003f92:	5d29      	ldrb	r1, [r5, r4]
 8003f94:	7858      	ldrb	r0, [r3, #1]
 8003f96:	f7fe fdcd 	bl	8002b34 <WriteReg3>
 8003f9a:	3402      	adds	r4, #2
        delay_us(1000);  // I2C must slow down the write speed, otherwise it won't work
 8003f9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fa0:	f000 fa50 	bl	8004444 <delay_us>
    for(i = 0; i < MPU_InitRegNum; i++) {
 8003fa4:	2c22      	cmp	r4, #34	; 0x22
 8003fa6:	d1f3      	bne.n	8003f90 <MPU4_SPI3_init+0xc8>
 //   set_gyro_scale(BITS_FS_250DPS);

 //   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
 //   return 0;

}
 8003fa8:	b00b      	add	sp, #44	; 0x2c
 8003faa:	bd30      	pop	{r4, r5, pc}
 8003fac:	20000011 	.word	0x20000011
 8003fb0:	20000012 	.word	0x20000012

08003fb4 <MPU5_SPI3_init>:

void MPU5_SPI3_init(void) // created later for IMU5
{
 8003fb4:	b530      	push	{r4, r5, lr}
 8003fb6:	b08b      	sub	sp, #44	; 0x2c
//	float temp[3];
	uint8_t i = 0;
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = {
 8003fb8:	226b      	movs	r2, #107	; 0x6b
 8003fba:	f88d 2005 	strb.w	r2, [sp, #5]
 8003fbe:	f88d 2007 	strb.w	r2, [sp, #7]
 8003fc2:	226c      	movs	r2, #108	; 0x6c
 8003fc4:	f88d 2009 	strb.w	r2, [sp, #9]
 8003fc8:	4a33      	ldr	r2, [pc, #204]	; (8004098 <MPU5_SPI3_init+0xe4>)
 8003fca:	7812      	ldrb	r2, [r2, #0]
 8003fcc:	f88d 200a 	strb.w	r2, [sp, #10]
 8003fd0:	221a      	movs	r2, #26
 8003fd2:	f88d 200b 	strb.w	r2, [sp, #11]
 8003fd6:	2210      	movs	r2, #16
 8003fd8:	f88d 200c 	strb.w	r2, [sp, #12]
 8003fdc:	f88d 200e 	strb.w	r2, [sp, #14]
 8003fe0:	221c      	movs	r2, #28
 8003fe2:	f88d 200f 	strb.w	r2, [sp, #15]
 8003fe6:	4a2d      	ldr	r2, [pc, #180]	; (800409c <MPU5_SPI3_init+0xe8>)
 8003fe8:	7812      	ldrb	r2, [r2, #0]
 8003fea:	f88d 2010 	strb.w	r2, [sp, #16]
 8003fee:	221d      	movs	r2, #29
 8003ff0:	f88d 2011 	strb.w	r2, [sp, #17]
 8003ff4:	2212      	movs	r2, #18
 8003ff6:	f88d 2012 	strb.w	r2, [sp, #18]
 8003ffa:	2237      	movs	r2, #55	; 0x37
 8003ffc:	f88d 2013 	strb.w	r2, [sp, #19]
 8004000:	2230      	movs	r2, #48	; 0x30
 8004002:	f88d 2014 	strb.w	r2, [sp, #20]
 8004006:	226a      	movs	r2, #106	; 0x6a
 8004008:	f88d 2015 	strb.w	r2, [sp, #21]
 800400c:	220d      	movs	r2, #13
 800400e:	f88d 2016 	strb.w	r2, [sp, #22]
 8004012:	2224      	movs	r2, #36	; 0x24
 8004014:	f88d 2017 	strb.w	r2, [sp, #23]
 8004018:	220c      	movs	r2, #12
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	f88d 2018 	strb.w	r2, [sp, #24]
 8004020:	2225      	movs	r2, #37	; 0x25
 8004022:	f88d 3004 	strb.w	r3, [sp, #4]
 8004026:	211b      	movs	r1, #27
 8004028:	2301      	movs	r3, #1
 800402a:	f88d 2019 	strb.w	r2, [sp, #25]
 800402e:	220b      	movs	r2, #11
 8004030:	2026      	movs	r0, #38	; 0x26
 8004032:	f88d 3006 	strb.w	r3, [sp, #6]
 8004036:	f88d 100d 	strb.w	r1, [sp, #13]
 800403a:	f88d 201a 	strb.w	r2, [sp, #26]
 800403e:	f88d 301c 	strb.w	r3, [sp, #28]
 8004042:	2163      	movs	r1, #99	; 0x63
 8004044:	2281      	movs	r2, #129	; 0x81
 8004046:	2327      	movs	r3, #39	; 0x27
 8004048:	250a      	movs	r5, #10
 800404a:	2400      	movs	r4, #0
 800404c:	f88d 001b 	strb.w	r0, [sp, #27]
 8004050:	f88d 5020 	strb.w	r5, [sp, #32]
 8004054:	f88d 4008 	strb.w	r4, [sp, #8]
 8004058:	f88d 101d 	strb.w	r1, [sp, #29]
 800405c:	f88d 201e 	strb.w	r2, [sp, #30]
 8004060:	f88d 301f 	strb.w	r3, [sp, #31]
 8004064:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8004068:	2016      	movs	r0, #22
 800406a:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800406e:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 8004072:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8004076:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	};

	//	 LED_Nucleo_OFF();
    for(i = 0; i < MPU_InitRegNum; i++) {
    	// change here
    	WriteReg3_imu5(MPU_Init_Data[i][1], MPU_Init_Data[i][0]); // change here
 800407a:	ad01      	add	r5, sp, #4
 800407c:	192b      	adds	r3, r5, r4
 800407e:	5d29      	ldrb	r1, [r5, r4]
 8004080:	7858      	ldrb	r0, [r3, #1]
 8004082:	f7fe fd7f 	bl	8002b84 <WriteReg3_imu5>
 8004086:	3402      	adds	r4, #2
        delay_us(1000);  // I2C must slow down the write speed, otherwise it won't work
 8004088:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800408c:	f000 f9da 	bl	8004444 <delay_us>
    for(i = 0; i < MPU_InitRegNum; i++) {
 8004090:	2c22      	cmp	r4, #34	; 0x22
 8004092:	d1f3      	bne.n	800407c <MPU5_SPI3_init+0xc8>
 //   set_gyro_scale(BITS_FS_250DPS);

 //   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
 //   return 0;

}
 8004094:	b00b      	add	sp, #44	; 0x2c
 8004096:	bd30      	pop	{r4, r5, pc}
 8004098:	20000011 	.word	0x20000011
 800409c:	20000012 	.word	0x20000012

080040a0 <P_IMU4_SPI3_Initialization_at_reset>:
{
 80040a0:	b508      	push	{r3, lr}
	P_IMU4_SPI3_Init(); // peripheral initialization  //work for imu5   too
 80040a2:	f7fe fa8d 	bl	80025c0 <P_IMU4_SPI3_Init>
	delay_us(7000);         // Arbitrary delay after SPI initialization
 80040a6:	f641 3058 	movw	r0, #7000	; 0x1b58
 80040aa:	f000 f9cb 	bl	8004444 <delay_us>
	MPU4_SPI3_init(); // device initialization // for IMU5 need to create something like "WriteReg3"
 80040ae:	f7ff ff0b 	bl	8003ec8 <MPU4_SPI3_init>
}
 80040b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MPU5_SPI3_init(); // later created for IMU5
 80040b6:	f7ff bf7d 	b.w	8003fb4 <MPU5_SPI3_init>
	...

080040bc <Mag_Enc1_Store>:
//	}
	return tempPosition;
}

void Mag_Enc1_Store(void)
{
 80040bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  WRITE_REG(GPIOx->BRR, PinMask);
 80040c0:	4c1d      	ldr	r4, [pc, #116]	; (8004138 <Mag_Enc1_Store+0x7c>)
 80040c2:	2302      	movs	r3, #2
 80040c4:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80040c8:	62a3      	str	r3, [r4, #40]	; 0x28
	uint8_t tempRead = 0;
	uint8_t Flags[6];
	LL_GPIO_ResetOutputPin(ENC1_CS_GPIO_PORT, ENC1_CS_PIN);

	// Sensor feeds out position MSB first
	for(i = 11; i >= 0; i--)
 80040ca:	250b      	movs	r5, #11
	int tempPosition = 0;
 80040cc:	2600      	movs	r6, #0
 80040ce:	46b8      	mov	r8, r7
	{
		LL_GPIO_ResetOutputPin(ENC1_SCLK_GPIO_PORT, ENC1_SCLK_PIN);
		delay_us(10);
 80040d0:	200a      	movs	r0, #10
 80040d2:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 80040d6:	f000 f9b5 	bl	8004444 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80040da:	61a7      	str	r7, [r4, #24]

		LL_GPIO_SetOutputPin(ENC1_SCLK_GPIO_PORT, ENC1_SCLK_PIN);
		delay_us(10);
 80040dc:	200a      	movs	r0, #10
 80040de:	f000 f9b1 	bl	8004444 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80040e2:	6923      	ldr	r3, [r4, #16]
 80040e4:	f3c3 0380 	ubfx	r3, r3, #2, #1

		tempRead = LL_GPIO_IsInputPinSet(ENC1_DATA_GPIO_PORT,ENC1_DATA_PIN) &0x01;
		tempPosition |= (tempRead)<<i;
 80040e8:	40ab      	lsls	r3, r5
	for(i = 11; i >= 0; i--)
 80040ea:	f115 35ff 	adds.w	r5, r5, #4294967295
		tempPosition |= (tempRead)<<i;
 80040ee:	ea46 0603 	orr.w	r6, r6, r3
	for(i = 11; i >= 0; i--)
 80040f2:	d2ed      	bcs.n	80040d0 <Mag_Enc1_Store+0x14>
  WRITE_REG(GPIOx->BRR, PinMask);
 80040f4:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80040f8:	4c0f      	ldr	r4, [pc, #60]	; (8004138 <Mag_Enc1_Store+0x7c>)
 80040fa:	2506      	movs	r5, #6
 80040fc:	46b8      	mov	r8, r7
	}

	for(i = 0; i < 6; i++)
	{
		LL_GPIO_ResetOutputPin(ENC1_SCLK_GPIO_PORT, ENC1_SCLK_PIN);
		delay_us(10);
 80040fe:	200a      	movs	r0, #10
 8004100:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 8004104:	f000 f99e 	bl	8004444 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004108:	61a7      	str	r7, [r4, #24]

		LL_GPIO_SetOutputPin(ENC1_SCLK_GPIO_PORT, ENC1_SCLK_PIN);
		delay_us(10);
 800410a:	200a      	movs	r0, #10
 800410c:	f000 f99a 	bl	8004444 <delay_us>
	for(i = 0; i < 6; i++)
 8004110:	3d01      	subs	r5, #1
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8004112:	6923      	ldr	r3, [r4, #16]
 8004114:	d1f3      	bne.n	80040fe <Mag_Enc1_Store+0x42>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004116:	2302      	movs	r3, #2
 8004118:	61a3      	str	r3, [r4, #24]
		Flags[i] |= (tempRead)<<i;
	}

	LL_GPIO_SetOutputPin(ENC1_CS_GPIO_PORT, ENC1_CS_PIN);

	BSbuffer[s_flag].Enc1[Sub_cnt]=tempPosition;
 800411a:	4b08      	ldr	r3, [pc, #32]	; (800413c <Mag_Enc1_Store+0x80>)
 800411c:	781a      	ldrb	r2, [r3, #0]
 800411e:	4b08      	ldr	r3, [pc, #32]	; (8004140 <Mag_Enc1_Store+0x84>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8004126:	f503 53c5 	add.w	r3, r3, #6304	; 0x18a0
 800412a:	3318      	adds	r3, #24
 800412c:	4a05      	ldr	r2, [pc, #20]	; (8004144 <Mag_Enc1_Store+0x88>)
 800412e:	f822 6013 	strh.w	r6, [r2, r3, lsl #1]
 8004132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004136:	bf00      	nop
 8004138:	48000400 	.word	0x48000400
 800413c:	200005cc 	.word	0x200005cc
 8004140:	200005a0 	.word	0x200005a0
 8004144:	20000618 	.word	0x20000618

08004148 <Mag_Enc2_Store>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8004148:	4b1f      	ldr	r3, [pc, #124]	; (80041c8 <Mag_Enc2_Store+0x80>)
}

void Mag_Enc2_Store(void)
{
 800414a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800414e:	2240      	movs	r2, #64	; 0x40
 8004150:	2780      	movs	r7, #128	; 0x80
 8004152:	4e1e      	ldr	r6, [pc, #120]	; (80041cc <Mag_Enc2_Store+0x84>)
 8004154:	629a      	str	r2, [r3, #40]	; 0x28
	uint8_t tempRead = 0;
	uint8_t Flags[6];
	LL_GPIO_ResetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	// Sensor feeds out position MSB first
	for(i = 11; i >= 0; i--)
 8004156:	240b      	movs	r4, #11
	int tempPosition = 0;
 8004158:	2500      	movs	r5, #0
 800415a:	46b8      	mov	r8, r7
	{
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 800415c:	200a      	movs	r0, #10
 800415e:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 8004162:	f000 f96f 	bl	8004444 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004166:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8004168:	200a      	movs	r0, #10
 800416a:	f000 f96b 	bl	8004444 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800416e:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <Mag_Enc2_Store+0x80>)
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f3c3 13c0 	ubfx	r3, r3, #7, #1

		tempRead = LL_GPIO_IsInputPinSet(ENC2_DATA_GPIO_PORT,ENC2_DATA_PIN) &0x01;
		tempPosition |= (tempRead)<<i;
 8004176:	40a3      	lsls	r3, r4
	for(i = 11; i >= 0; i--)
 8004178:	f114 34ff 	adds.w	r4, r4, #4294967295
		tempPosition |= (tempRead)<<i;
 800417c:	ea45 0503 	orr.w	r5, r5, r3
	for(i = 11; i >= 0; i--)
 8004180:	d2ec      	bcs.n	800415c <Mag_Enc2_Store+0x14>
  WRITE_REG(GPIOx->BRR, PinMask);
 8004182:	2780      	movs	r7, #128	; 0x80
 8004184:	4e11      	ldr	r6, [pc, #68]	; (80041cc <Mag_Enc2_Store+0x84>)
 8004186:	2406      	movs	r4, #6
 8004188:	46b8      	mov	r8, r7
	}

	for(i = 0; i < 6; i++)
	{
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 800418a:	200a      	movs	r0, #10
 800418c:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 8004190:	f000 f958 	bl	8004444 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004194:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8004196:	200a      	movs	r0, #10
 8004198:	f000 f954 	bl	8004444 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <Mag_Enc2_Store+0x80>)
	for(i = 0; i < 6; i++)
 800419e:	3c01      	subs	r4, #1
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	d1f2      	bne.n	800418a <Mag_Enc2_Store+0x42>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80041a4:	2240      	movs	r2, #64	; 0x40
 80041a6:	619a      	str	r2, [r3, #24]
		Flags[i] |= (tempRead)<<i;
	}

	LL_GPIO_SetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	BSbuffer[s_flag].Enc2[Sub_cnt]=tempPosition;
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <Mag_Enc2_Store+0x88>)
 80041aa:	781a      	ldrb	r2, [r3, #0]
 80041ac:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <Mag_Enc2_Store+0x8c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 80041b4:	f503 53cb 	add.w	r3, r3, #6496	; 0x1960
 80041b8:	4a07      	ldr	r2, [pc, #28]	; (80041d8 <Mag_Enc2_Store+0x90>)
 80041ba:	3310      	adds	r3, #16
 80041bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80041c0:	809d      	strh	r5, [r3, #4]
 80041c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041c6:	bf00      	nop
 80041c8:	48000800 	.word	0x48000800
 80041cc:	48000400 	.word	0x48000400
 80041d0:	200005cc 	.word	0x200005cc
 80041d4:	200005a0 	.word	0x200005a0
 80041d8:	20000618 	.word	0x20000618

080041dc <Enc2_GetPosition>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80041dc:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <Enc2_GetPosition+0x6c>)
 80041de:	2240      	movs	r2, #64	; 0x40
}

int Enc2_GetPosition(void)
{
 80041e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i = 0;
	uint8_t tempRead = 0;
	uint8_t Flags[6];

	LL_GPIO_ResetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);
	delay_us(100);
 80041e4:	2064      	movs	r0, #100	; 0x64
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28
 80041e8:	f000 f92c 	bl	8004444 <delay_us>
 80041ec:	2780      	movs	r7, #128	; 0x80
 80041ee:	4e17      	ldr	r6, [pc, #92]	; (800424c <Enc2_GetPosition+0x70>)
	// Sensor feeds out position MSB first
	for(i = DataPrecision-1; i >= 0; i--)
 80041f0:	240b      	movs	r4, #11
	int tempPosition = 0;
 80041f2:	2500      	movs	r5, #0
 80041f4:	46b8      	mov	r8, r7
	{
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(100);
 80041f6:	2064      	movs	r0, #100	; 0x64
 80041f8:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 80041fc:	f000 f922 	bl	8004444 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004200:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(100);
 8004202:	2064      	movs	r0, #100	; 0x64
 8004204:	f000 f91e 	bl	8004444 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8004208:	4b0f      	ldr	r3, [pc, #60]	; (8004248 <Enc2_GetPosition+0x6c>)
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	f3c3 13c0 	ubfx	r3, r3, #7, #1

		tempRead = LL_GPIO_IsInputPinSet(ENC2_DATA_GPIO_PORT,ENC2_DATA_PIN) &0x01;
		tempPosition |= (tempRead)<<i;
 8004210:	40a3      	lsls	r3, r4
	for(i = DataPrecision-1; i >= 0; i--)
 8004212:	f114 34ff 	adds.w	r4, r4, #4294967295
		tempPosition |= (tempRead)<<i;
 8004216:	ea45 0503 	orr.w	r5, r5, r3
	for(i = DataPrecision-1; i >= 0; i--)
 800421a:	d2ec      	bcs.n	80041f6 <Enc2_GetPosition+0x1a>
  WRITE_REG(GPIOx->BRR, PinMask);
 800421c:	2780      	movs	r7, #128	; 0x80
 800421e:	4e0b      	ldr	r6, [pc, #44]	; (800424c <Enc2_GetPosition+0x70>)
 8004220:	2406      	movs	r4, #6
 8004222:	46b8      	mov	r8, r7
	}

	for(i = 0; i < 6; i++)
	{
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(100);
 8004224:	2064      	movs	r0, #100	; 0x64
 8004226:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 800422a:	f000 f90b 	bl	8004444 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800422e:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(100);
 8004230:	2064      	movs	r0, #100	; 0x64
 8004232:	f000 f907 	bl	8004444 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8004236:	4b04      	ldr	r3, [pc, #16]	; (8004248 <Enc2_GetPosition+0x6c>)
	for(i = 0; i < 6; i++)
 8004238:	3c01      	subs	r4, #1
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	d1f2      	bne.n	8004224 <Enc2_GetPosition+0x48>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800423e:	2240      	movs	r2, #64	; 0x40
 8004240:	619a      	str	r2, [r3, #24]
	}

	LL_GPIO_SetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	return tempPosition;
}
 8004242:	4628      	mov	r0, r5
 8004244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004248:	48000800 	.word	0x48000800
 800424c:	48000400 	.word	0x48000400

08004250 <knee_angle>:

float knee_angle(void)
{ float knee_position;
 8004250:	b508      	push	{r3, lr}
knee_position=-(Enc2_GetPosition()*0.088-306); //-((Prosthesis_Data(:,36)*0.088)-306)
 8004252:	f7ff ffc3 	bl	80041dc <Enc2_GetPosition>
 8004256:	f7fc f965 	bl	8000524 <__aeabi_i2d>
 800425a:	a309      	add	r3, pc, #36	; (adr r3, 8004280 <knee_angle+0x30>)
 800425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004260:	f7fc f9c6 	bl	80005f0 <__aeabi_dmul>
 8004264:	a308      	add	r3, pc, #32	; (adr r3, 8004288 <knee_angle+0x38>)
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	f7fc f80d 	bl	8000288 <__aeabi_dsub>
 800426e:	f7fc fc81 	bl	8000b74 <__aeabi_d2f>
return knee_position;
}
 8004272:	ee07 0a90 	vmov	s15, r0
 8004276:	eeb1 0a67 	vneg.f32	s0, s15
 800427a:	bd08      	pop	{r3, pc}
 800427c:	f3af 8000 	nop.w
 8004280:	020c49ba 	.word	0x020c49ba
 8004284:	3fb6872b 	.word	0x3fb6872b
 8004288:	00000000 	.word	0x00000000
 800428c:	40732000 	.word	0x40732000

08004290 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004290:	4b21      	ldr	r3, [pc, #132]	; (8004318 <HAL_MspInit+0x88>)
{
 8004292:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004294:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	661a      	str	r2, [r3, #96]	; 0x60
 800429c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800429e:	f002 0201 	and.w	r2, r2, #1
 80042a2:	9200      	str	r2, [sp, #0]
 80042a4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80042ac:	659a      	str	r2, [r3, #88]	; 0x58
 80042ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b4:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042b6:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80042b8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042ba:	f001 f90f 	bl	80054dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80042be:	2200      	movs	r2, #0
 80042c0:	4611      	mov	r1, r2
 80042c2:	f06f 000b 	mvn.w	r0, #11
 80042c6:	f001 f91b 	bl	8005500 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80042ca:	2200      	movs	r2, #0
 80042cc:	4611      	mov	r1, r2
 80042ce:	f06f 000a 	mvn.w	r0, #10
 80042d2:	f001 f915 	bl	8005500 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80042d6:	2200      	movs	r2, #0
 80042d8:	4611      	mov	r1, r2
 80042da:	f06f 0009 	mvn.w	r0, #9
 80042de:	f001 f90f 	bl	8005500 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80042e2:	2200      	movs	r2, #0
 80042e4:	4611      	mov	r1, r2
 80042e6:	f06f 0004 	mvn.w	r0, #4
 80042ea:	f001 f909 	bl	8005500 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80042ee:	2200      	movs	r2, #0
 80042f0:	4611      	mov	r1, r2
 80042f2:	f06f 0003 	mvn.w	r0, #3
 80042f6:	f001 f903 	bl	8005500 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80042fa:	2200      	movs	r2, #0
 80042fc:	4611      	mov	r1, r2
 80042fe:	f06f 0001 	mvn.w	r0, #1
 8004302:	f001 f8fd 	bl	8005500 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004306:	2200      	movs	r2, #0
 8004308:	4611      	mov	r1, r2
 800430a:	f04f 30ff 	mov.w	r0, #4294967295
 800430e:	f001 f8f7 	bl	8005500 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004312:	b003      	add	sp, #12
 8004314:	f85d fb04 	ldr.w	pc, [sp], #4
 8004318:	40021000 	.word	0x40021000

0800431c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800431c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 800431e:	6802      	ldr	r2, [r0, #0]
 8004320:	4b15      	ldr	r3, [pc, #84]	; (8004378 <HAL_SD_MspInit+0x5c>)
 8004322:	429a      	cmp	r2, r3
{
 8004324:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 8004326:	d124      	bne.n	8004372 <HAL_SD_MspInit+0x56>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004328:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432c:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800432e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004330:	4812      	ldr	r0, [pc, #72]	; (800437c <HAL_SD_MspInit+0x60>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004332:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004336:	661a      	str	r2, [r3, #96]	; 0x60
 8004338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800433a:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800433c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004344:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8004346:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800434a:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800434c:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800434e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8004350:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004352:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004354:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004356:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004358:	f001 fa8a 	bl	8005870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800435c:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800435e:	eb0d 0103 	add.w	r1, sp, r3
 8004362:	4807      	ldr	r0, [pc, #28]	; (8004380 <HAL_SD_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004364:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004366:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004368:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800436a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800436c:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800436e:	f001 fa7f 	bl	8005870 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8004372:	b007      	add	sp, #28
 8004374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004376:	bf00      	nop
 8004378:	40012800 	.word	0x40012800
 800437c:	48000800 	.word	0x48000800
 8004380:	48000c00 	.word	0x48000c00

08004384 <NMI_Handler>:
 8004384:	4770      	bx	lr

08004386 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004386:	e7fe      	b.n	8004386 <HardFault_Handler>

08004388 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004388:	e7fe      	b.n	8004388 <MemManage_Handler>

0800438a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800438a:	e7fe      	b.n	800438a <BusFault_Handler>

0800438c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800438c:	e7fe      	b.n	800438c <UsageFault_Handler>

0800438e <SVC_Handler>:
 800438e:	4770      	bx	lr

08004390 <DebugMon_Handler>:
 8004390:	4770      	bx	lr

08004392 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8004392:	4770      	bx	lr

08004394 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004394:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004396:	f001 f877 	bl	8005488 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800439a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800439e:	f001 b906 	b.w	80055ae <HAL_SYSTICK_IRQHandler>
	...

080043a4 <OTG_FS_IRQHandler>:
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  // ES HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
	HAL_PCD_IRQHandler(&hpcd);
 80043a4:	4801      	ldr	r0, [pc, #4]	; (80043ac <OTG_FS_IRQHandler+0x8>)
 80043a6:	f001 bc03 	b.w	8005bb0 <HAL_PCD_IRQHandler>
 80043aa:	bf00      	nop
 80043ac:	20008fc8 	.word	0x20008fc8

080043b0 <DMA2_Channel4_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Channel4_IRQHandler(void)
{
  if((uSdHandle.SdOperation == SD_READ_MULTIPLE_BLOCK) || (uSdHandle.SdOperation == SD_READ_SINGLE_BLOCK))
 80043b0:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <DMA2_Channel4_IRQHandler+0x14>)
 80043b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043b4:	2a01      	cmp	r2, #1
 80043b6:	d001      	beq.n	80043bc <DMA2_Channel4_IRQHandler+0xc>
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	b90b      	cbnz	r3, 80043c0 <DMA2_Channel4_IRQHandler+0x10>
  {
    BSP_SD_DMA_Rx_IRQHandler();
 80043bc:	f7fc be92 	b.w	80010e4 <BSP_SD_DMA_Rx_IRQHandler>
  }
  else
  {
    BSP_SD_DMA_Tx_IRQHandler();
 80043c0:	f7fc be8a 	b.w	80010d8 <BSP_SD_DMA_Tx_IRQHandler>
 80043c4:	2000865c 	.word	0x2000865c

080043c8 <SDMMC1_IRQHandler>:
  * @param  None
  * @retval None
  */
void SDMMC1_IRQHandler(void)
{
  BSP_SD_IRQHandler();
 80043c8:	f7fc be80 	b.w	80010cc <BSP_SD_IRQHandler>

080043cc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043cc:	490f      	ldr	r1, [pc, #60]	; (800440c <SystemInit+0x40>)
 80043ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80043d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80043da:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <SystemInit+0x44>)
 80043dc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80043de:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80043e0:	f042 0201 	orr.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80043e6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80043ee:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80043f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80043f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043f8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004400:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004402:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004404:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004408:	608b      	str	r3, [r1, #8]
 800440a:	4770      	bx	lr
 800440c:	e000ed00 	.word	0xe000ed00
 8004410:	40021000 	.word	0x40021000

08004414 <LL_APB1_GRP1_EnableClock>:
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <LL_APB1_GRP1_EnableClock+0x18>)
 8004416:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004418:	4302      	orrs	r2, r0
 800441a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800441c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 800441e:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004420:	4018      	ands	r0, r3
 8004422:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8004424:	9b01      	ldr	r3, [sp, #4]
}
 8004426:	b002      	add	sp, #8
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000

08004430 <LL_RCC_SetUSBClockSource.constprop.3>:
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, USBxSource);
 8004430:	4a03      	ldr	r2, [pc, #12]	; (8004440 <LL_RCC_SetUSBClockSource.constprop.3+0x10>)
 8004432:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004436:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 800443a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800443e:	4770      	bx	lr
 8004440:	40021000 	.word	0x40021000

08004444 <delay_us>:
extern uint8_t USB_Mode;
extern uint8_t Enter_Into_DFU,MSC_continue,VCP_continue;

void delay_us(uint32_t us){
    uint32_t i,k;
    for(k=0;k<us;k++)
 8004444:	2300      	movs	r3, #0
 8004446:	4283      	cmp	r3, r0
 8004448:	d100      	bne.n	800444c <delay_us+0x8>
    {
    	for(i=0;i<11;i++)
         __NOP();  // Timed at 48 MHz clock
    }
}
 800444a:	4770      	bx	lr
 800444c:	220b      	movs	r2, #11
  __ASM volatile ("nop");
 800444e:	bf00      	nop
    	for(i=0;i<11;i++)
 8004450:	3a01      	subs	r2, #1
 8004452:	d1fc      	bne.n	800444e <delay_us+0xa>
    for(k=0;k<us;k++)
 8004454:	3301      	adds	r3, #1
 8004456:	e7f6      	b.n	8004446 <delay_us+0x2>

08004458 <Start_LPTIMCounter2>:
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8004458:	4a08      	ldr	r2, [pc, #32]	; (800447c <Start_LPTIMCounter2+0x24>)
 800445a:	6913      	ldr	r3, [r2, #16]
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	6113      	str	r3, [r2, #16]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 8004462:	6993      	ldr	r3, [r2, #24]
 8004464:	0c1b      	lsrs	r3, r3, #16
 8004466:	041b      	lsls	r3, r3, #16
 8004468:	4318      	orrs	r0, r3
 800446a:	6190      	str	r0, [r2, #24]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 800446c:	6913      	ldr	r3, [r2, #16]
 800446e:	f023 0306 	bic.w	r3, r3, #6
 8004472:	f043 0304 	orr.w	r3, r3, #4
 8004476:	6113      	str	r3, [r2, #16]
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40009400 	.word	0x40009400

08004480 <LSE_ON>:
	/* Following 2lines are necessary before LSE
	RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN; // PWR clock is necessary for LSE
	PWR->CR1 |= PWR_CR1_DBP;  // Enable Backup access
	*/

	RCC->BDCR |= RCC_BDCR_LSEON;  // LSE ON
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <LSE_ON+0x18>)
 8004482:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	while(((RCC->BDCR) & RCC_BDCR_LSERDY) != (RCC_BDCR_LSERDY)); // wait for LSE to get ready
 800448e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004492:	0792      	lsls	r2, r2, #30
 8004494:	d5fb      	bpl.n	800448e <LSE_ON+0xe>

}
 8004496:	4770      	bx	lr
 8004498:	40021000 	.word	0x40021000

0800449c <EnterStop>:
	{
	}
}

void EnterStop(void) // Enter Stop Mode
{
 800449c:	b508      	push	{r3, lr}
	HAL_SuspendTick();  // Before entering STOP mode, SYS_tick needs to disable
 800449e:	f001 f80d 	bl	80054bc <HAL_SuspendTick>
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 80044a2:	4a07      	ldr	r2, [pc, #28]	; (80044c0 <EnterStop+0x24>)
 80044a4:	6813      	ldr	r3, [r2, #0]
 80044a6:	f023 0307 	bic.w	r3, r3, #7
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	6013      	str	r3, [r2, #0]
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80044b0:	4a04      	ldr	r2, [pc, #16]	; (80044c4 <EnterStop+0x28>)
 80044b2:	6913      	ldr	r3, [r2, #16]
 80044b4:	f043 0304 	orr.w	r3, r3, #4
 80044b8:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 80044ba:	bf30      	wfi
 80044bc:	bd08      	pop	{r3, pc}
 80044be:	bf00      	nop
 80044c0:	40007000 	.word	0x40007000
 80044c4:	e000ed00 	.word	0xe000ed00

080044c8 <SystemClock_Config_MSI_80MHz>:
*            PLL_R                          = 4
*            Flash Latency(WS)              = 4
*/

void SystemClock_Config_MSI_80MHz(void)
{
 80044c8:	b510      	push	{r4, lr}
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 80044ca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
{
 80044ce:	b092      	sub	sp, #72	; 0x48
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 80044d0:	f7ff ffa0 	bl	8004414 <LL_APB1_GRP1_EnableClock>
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044d4:	4b31      	ldr	r3, [pc, #196]	; (800459c <SystemClock_Config_MSI_80MHz+0xd4>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044dc:	601a      	str	r2, [r3, #0]
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044e4:	605a      	str	r2, [r3, #4]
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 80044e6:	685a      	ldr	r2, [r3, #4]
	  LL_PWR_EnableBkUpAccess();                              // Enable Backup access (needed for LSE clock)
	  LL_PWR_EnableVddUSB();                                  // Enable VDDUSB supply for USB
	  while(!LL_PWR_IsEnabledVddUSB());                       // Wait for VDDUSB supply to activate
 80044e8:	0552      	lsls	r2, r2, #21
 80044ea:	d5fc      	bpl.n	80044e6 <SystemClock_Config_MSI_80MHz+0x1e>

	  /* Enable MSI Oscillator and activate PLL with MSI as source */
	  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 80044ec:	2310      	movs	r3, #16
 80044ee:	9301      	str	r3, [sp, #4]
	  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 80044f0:	2301      	movs	r3, #1
 80044f2:	9307      	str	r3, [sp, #28]
	//  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
	  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 80044f4:	930c      	str	r3, [sp, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLM            = 6;
 80044f6:	2306      	movs	r3, #6
 80044f8:	930d      	str	r3, [sp, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLN            = 40;
 80044fa:	2328      	movs	r3, #40	; 0x28
 80044fc:	930e      	str	r3, [sp, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 80044fe:	2307      	movs	r3, #7
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
	  RCC_OscInitStruct.PLL.PLLR            = 4;

	  HAL_RCC_OscConfig(&RCC_OscInitStruct);

	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8004500:	4c27      	ldr	r4, [pc, #156]	; (80045a0 <SystemClock_Config_MSI_80MHz+0xd8>)
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 8004502:	930f      	str	r3, [sp, #60]	; 0x3c
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8004504:	22b0      	movs	r2, #176	; 0xb0
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8004506:	2304      	movs	r3, #4
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8004508:	9209      	str	r2, [sp, #36]	; 0x24
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800450a:	eb0d 0003 	add.w	r0, sp, r3
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800450e:	2202      	movs	r2, #2
 8004510:	920b      	str	r2, [sp, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8004512:	9310      	str	r3, [sp, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLR            = 4;
 8004514:	9311      	str	r3, [sp, #68]	; 0x44
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004516:	f002 f89f 	bl	8006658 <HAL_RCC_OscConfig>
	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800451a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800451e:	f023 0320 	bic.w	r3, r3, #32
 8004522:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	  CLEAR_BIT(RCC->CIER, (RCC_IT_LSECSS));
 8004526:	69a3      	ldr	r3, [r4, #24]
 8004528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800452c:	61a3      	str	r3, [r4, #24]

	  LSE_ON();                                                     //Start LSE for RTC and LPTIM timer
 800452e:	f7ff ffa7 	bl	8004480 <LSE_ON>
	  HAL_RCCEx_EnableMSIPLLMode();
 8004532:	f002 fb05 	bl	8006b40 <HAL_RCCEx_EnableMSIPLLMode>


	  LL_RCC_SetSDMMCClockSource(LL_RCC_SDMMC1_CLKSOURCE_MSI);
 8004536:	f7ff ff7b 	bl	8004430 <LL_RCC_SetUSBClockSource.constprop.3>
	  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_MSI);
 800453a:	f7ff ff79 	bl	8004430 <LL_RCC_SetUSBClockSource.constprop.3>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800453e:	68a3      	ldr	r3, [r4, #8]
 8004540:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004544:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004546:	68a3      	ldr	r3, [r4, #8]
 8004548:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800454c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004550:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004552:	68a3      	ldr	r3, [r4, #8]
 8004554:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004558:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800455c:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800455e:	68a3      	ldr	r3, [r4, #8]
 8004560:	f023 0303 	bic.w	r3, r3, #3
 8004564:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_FLASH_LATENCY_4
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004566:	4b0f      	ldr	r3, [pc, #60]	; (80045a4 <SystemClock_Config_MSI_80MHz+0xdc>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	f022 0207 	bic.w	r2, r2, #7
 800456e:	f042 0204 	orr.w	r2, r2, #4
 8004572:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_3
  *         @arg @ref LL_FLASH_LATENCY_4
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	f002 0207 	and.w	r2, r2, #7
	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2); //1
	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);

	  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
	  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4);
 800457a:	2a04      	cmp	r2, #4
 800457c:	d1fa      	bne.n	8004574 <SystemClock_Config_MSI_80MHz+0xac>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800457e:	68a3      	ldr	r3, [r4, #8]
 8004580:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004584:	60a3      	str	r3, [r4, #8]

	  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_MSI);  // MSI clock is set as default clock after wake up from Stop
	  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();               // Disable USB clock to save power
 8004586:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004588:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800458c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800458e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	9b00      	ldr	r3, [sp, #0]

		}
 8004598:	b012      	add	sp, #72	; 0x48
 800459a:	bd10      	pop	{r4, pc}
 800459c:	40007000 	.word	0x40007000
 80045a0:	40021000 	.word	0x40021000
 80045a4:	40022000 	.word	0x40022000

080045a8 <Configure_LPTIM2_Int>:
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80045a8:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <Configure_LPTIM2_Int+0x40>)
 80045aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80045ae:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 80045b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SET_BIT(RCC->APB1ENR2, Periphs);
 80045b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045b8:	f042 0220 	orr.w	r2, r2, #32
 80045bc:	65da      	str	r2, [r3, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80045be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c

		}

//Configure LPTIM2 to generate the XX Hz interrupt
void Configure_LPTIM2_Int(void)
{
 80045c0:	b082      	sub	sp, #8
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80045c8:	9b01      	ldr	r3, [sp, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <Configure_LPTIM2_Int+0x44>)
 80045cc:	2204      	movs	r2, #4
 80045ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 80045d2:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <Configure_LPTIM2_Int+0x48>)
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	f022 0202 	bic.w	r2, r2, #2
 80045da:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	f022 0201 	bic.w	r2, r2, #1
 80045e2:	611a      	str	r2, [r3, #16]
	LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);     // Enable LPTIM2 Clock
	NVIC_DisableIRQ(LPTIM2_IRQn);
	LL_LPTIM_DisableIT_ARRM(LPTIM2);                           // Enable auto reload match interrupt (ARRMIE).
	LL_LPTIM_Disable(LPTIM2);                                // LPTIM2 disable if needed

}
 80045e4:	b002      	add	sp, #8
 80045e6:	4770      	bx	lr
 80045e8:	40021000 	.word	0x40021000
 80045ec:	e000e100 	.word	0xe000e100
 80045f0:	40009400 	.word	0x40009400

080045f4 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 80045f4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045f6:	4c1d      	ldr	r4, [pc, #116]	; (800466c <HAL_PCD_MspInit+0x78>)
 80045f8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80045fa:	f043 0301 	orr.w	r3, r3, #1
 80045fe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004600:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 8004602:	b088      	sub	sp, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	9301      	str	r3, [sp, #4]
 800460a:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800460c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004610:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004612:	2302      	movs	r3, #2
 8004614:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004616:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004618:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800461a:	260a      	movs	r6, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800461c:	a903      	add	r1, sp, #12
 800461e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004622:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004624:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004626:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004628:	f001 f922 	bl	8005870 <HAL_GPIO_Init>
  
  /* Configure VBUS Pin */

  
  /* Configure ID pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800462c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004630:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004632:	2312      	movs	r3, #18
 8004634:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004636:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004638:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800463a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800463e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004640:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004642:	f001 f915 	bl	8005870 <HAL_GPIO_Init>
  
  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004646:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800464c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800464e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004654:	9302      	str	r3, [sp, #8]
  
  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 8004656:	462a      	mov	r2, r5
 8004658:	2107      	movs	r1, #7
 800465a:	2043      	movs	r0, #67	; 0x43
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800465c:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 800465e:	f000 ff4f 	bl	8005500 <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004662:	2043      	movs	r0, #67	; 0x43
 8004664:	f000 ff80 	bl	8005568 <HAL_NVIC_EnableIRQ>
    
}
 8004668:	b008      	add	sp, #32
 800466a:	bd70      	pop	{r4, r5, r6, pc}
 800466c:	40021000 	.word	0x40021000

08004670 <HAL_PCD_MspDeInit>:
  * @retval None
  */
void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)
{  
  /* Disable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 8004670:	4b04      	ldr	r3, [pc, #16]	; (8004684 <HAL_PCD_MspDeInit+0x14>)
 8004672:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004674:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004678:	64da      	str	r2, [r3, #76]	; 0x4c
  __HAL_RCC_SYSCFG_CLK_DISABLE(); 
 800467a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800467c:	f022 0201 	bic.w	r2, r2, #1
 8004680:	661a      	str	r2, [r3, #96]	; 0x60
 8004682:	4770      	bx	lr
 8004684:	40021000 	.word	0x40021000

08004688 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8004688:	f500 7162 	add.w	r1, r0, #904	; 0x388
 800468c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8004690:	f004 bfff 	b.w	8009692 <USBD_LL_SetupStage>

08004694 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004694:	231c      	movs	r3, #28
 8004696:	fb03 0301 	mla	r3, r3, r1, r0
 800469a:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800469e:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 80046a2:	f005 b823 	b.w	80096ec <USBD_LL_DataOutStage>

080046a6 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80046a6:	231c      	movs	r3, #28
 80046a8:	fb03 0301 	mla	r3, r3, r1, r0
 80046ac:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80046b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046b2:	f005 b84d 	b.w	8009750 <USBD_LL_DataInStage>

080046b6 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 80046b6:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80046ba:	f005 b8c9 	b.w	8009850 <USBD_LL_SOF>

080046be <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 80046be:	b510      	push	{r4, lr}
 80046c0:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 80046c2:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80046c6:	f005 f892 	bl	80097ee <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 80046ca:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 80046ce:	2101      	movs	r1, #1
}
 80046d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 80046d4:	f005 b8aa 	b.w	800982c <USBD_LL_SetSpeed>

080046d8 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
  USBD_LL_Suspend(hpcd->pData);
 80046d8:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80046dc:	f005 b8a9 	b.w	8009832 <USBD_LL_Suspend>

080046e0 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 80046e0:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80046e4:	f005 b8ae 	b.w	8009844 <USBD_LL_Resume>

080046e8 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 80046e8:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80046ec:	f005 b8be 	b.w	800986c <USBD_LL_IsoOUTIncomplete>

080046f0 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 80046f0:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80046f4:	f005 b8b8 	b.w	8009868 <USBD_LL_IsoINIncomplete>

080046f8 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 80046f8:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80046fc:	f005 b8b8 	b.w	8009870 <USBD_LL_DevConnected>

08004700 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 8004700:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8004704:	f005 b8b6 	b.w	8009874 <USBD_LL_DevDisconnected>

08004708 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 800470a:	4c15      	ldr	r4, [pc, #84]	; (8004760 <USBD_LL_Init+0x58>)
  hpcd.Init.dev_endpoints = 5;
  hpcd.Init.use_dedicated_ep1 = 0;
 800470c:	2500      	movs	r5, #0
  hpcd.Init.dev_endpoints = 5;
 800470e:	2305      	movs	r3, #5
 8004710:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hpcd.Init.ep0_mps = 0x40;
  hpcd.Init.dma_enable = 0;
  hpcd.Init.low_power_enable = 0;
  hpcd.Init.lpm_enable = 0;
  hpcd.Init.battery_charging_enable = 0;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004714:	2601      	movs	r6, #1
  hpcd.Init.Sof_enable = 0;
  hpcd.Init.speed = PCD_SPEED_FULL;
  hpcd.Init.vbus_sensing_enable = 0;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8004716:	f8c4 03c8 	str.w	r0, [r4, #968]	; 0x3c8
  hpcd.Init.ep0_mps = 0x40;
 800471a:	2740      	movs	r7, #64	; 0x40
  pdev->pData = &hpcd;
 800471c:	f8c0 4220 	str.w	r4, [r0, #544]	; 0x220
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 8004720:	4620      	mov	r0, r4
  hpcd.Init.dev_endpoints = 5;
 8004722:	e884 000c 	stmia.w	r4, {r2, r3}
  hpcd.Init.use_dedicated_ep1 = 0;
 8004726:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;
 8004728:	6167      	str	r7, [r4, #20]
  hpcd.Init.dma_enable = 0;
 800472a:	6125      	str	r5, [r4, #16]
  hpcd.Init.low_power_enable = 0;
 800472c:	6225      	str	r5, [r4, #32]
  hpcd.Init.lpm_enable = 0;
 800472e:	6265      	str	r5, [r4, #36]	; 0x24
  hpcd.Init.battery_charging_enable = 0;
 8004730:	62a5      	str	r5, [r4, #40]	; 0x28
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004732:	61a6      	str	r6, [r4, #24]
  hpcd.Init.Sof_enable = 0;
 8004734:	61e5      	str	r5, [r4, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 8004736:	60e6      	str	r6, [r4, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 8004738:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_PCD_Init(&hpcd);
 800473a:	f001 f975 	bl	8005a28 <HAL_PCD_Init>
  
  /* Configure EPs FIFOs */
  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 800473e:	2180      	movs	r1, #128	; 0x80
 8004740:	4620      	mov	r0, r4
 8004742:	f001 fe86 	bl	8006452 <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 8004746:	463a      	mov	r2, r7
 8004748:	4629      	mov	r1, r5
 800474a:	4620      	mov	r0, r4
 800474c:	f001 fe60 	bl	8006410 <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x80);
 8004750:	2280      	movs	r2, #128	; 0x80
 8004752:	4631      	mov	r1, r6
 8004754:	4620      	mov	r0, r4
 8004756:	f001 fe5b 	bl	8006410 <HAL_PCDEx_SetTxFiFo>

  return USBD_OK;
}
 800475a:	4628      	mov	r0, r5
 800475c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800475e:	bf00      	nop
 8004760:	20008fc8 	.word	0x20008fc8

08004764 <USBD_LL_DeInit>:
  * @brief  De-Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 8004764:	b508      	push	{r3, lr}
  HAL_PCD_DeInit(pdev->pData);
 8004766:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800476a:	f001 fa0f 	bl	8005b8c <HAL_PCD_DeInit>
  return USBD_OK;
}
 800476e:	2000      	movs	r0, #0
 8004770:	bd08      	pop	{r3, pc}

08004772 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004772:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8004774:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004778:	f001 f9db 	bl	8005b32 <HAL_PCD_Start>
  return USBD_OK;
}
 800477c:	2000      	movs	r0, #0
 800477e:	bd08      	pop	{r3, pc}

08004780 <USBD_LL_Stop>:
  * @brief  Stops the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8004780:	b508      	push	{r3, lr}
  HAL_PCD_Stop(pdev->pData);
 8004782:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004786:	f001 f9e9 	bl	8005b5c <HAL_PCD_Stop>
  return USBD_OK;
}
 800478a:	2000      	movs	r0, #0
 800478c:	bd08      	pop	{r3, pc}

0800478e <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 800478e:	b510      	push	{r4, lr}
 8004790:	461c      	mov	r4, r3
  HAL_PCD_EP_Open(pdev->pData,
 8004792:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004796:	4613      	mov	r3, r2
 8004798:	4622      	mov	r2, r4
 800479a:	f001 fd2d 	bl	80061f8 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 800479e:	2000      	movs	r0, #0
 80047a0:	bd10      	pop	{r4, pc}

080047a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80047a2:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80047a4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80047a8:	f001 fd4b 	bl	8006242 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 80047ac:	2000      	movs	r0, #0
 80047ae:	bd08      	pop	{r3, pc}

080047b0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80047b0:	b508      	push	{r3, lr}
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80047b2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80047b6:	f001 fe11 	bl	80063dc <HAL_PCD_EP_Flush>
  return USBD_OK;
}
 80047ba:	2000      	movs	r0, #0
 80047bc:	bd08      	pop	{r3, pc}

080047be <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80047be:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80047c0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80047c4:	f001 fdb9 	bl	800633a <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 80047c8:	2000      	movs	r0, #0
 80047ca:	bd08      	pop	{r3, pc}

080047cc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80047cc:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80047ce:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80047d2:	f001 fdde 	bl	8006392 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 80047d6:	2000      	movs	r0, #0
 80047d8:	bd08      	pop	{r3, pc}

080047da <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 80047da:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80047de:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 80047e2:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80047e6:	bf1b      	ittet	ne
 80047e8:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80047ec:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80047f0:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80047f4:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80047f8:	bf08      	it	eq
 80047fa:	f891 01e2 	ldrbeq.w	r0, [r1, #482]	; 0x1e2
  }
}
 80047fe:	4770      	bx	lr

08004800 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004800:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004802:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004806:	f001 fce3 	bl	80061d0 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 800480a:	2000      	movs	r0, #0
 800480c:	bd08      	pop	{r3, pc}

0800480e <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 800480e:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004810:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004814:	f001 fd6a 	bl	80062ec <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8004818:	2000      	movs	r0, #0
 800481a:	bd08      	pop	{r3, pc}

0800481c <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 800481c:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800481e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004822:	f001 fd31 	bl	8006288 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8004826:	2000      	movs	r0, #0
 8004828:	bd08      	pop	{r3, pc}

0800482a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800482a:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800482c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004830:	f001 fd54 	bl	80062dc <HAL_PCD_EP_GetRxCount>
}
 8004834:	bd08      	pop	{r3, pc}
	...

08004838 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc_VCP);
 8004838:	2312      	movs	r3, #18
 800483a:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc_VCP;
}
 800483c:	4800      	ldr	r0, [pc, #0]	; (8004840 <USBD_VCP_DeviceDescriptor+0x8>)
 800483e:	4770      	bx	lr
 8004840:	20000048 	.word	0x20000048

08004844 <USBD_MSC_DeviceDescriptor>:

uint8_t *USBD_MSC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 8004844:	2312      	movs	r3, #18
 8004846:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc;
}
 8004848:	4800      	ldr	r0, [pc, #0]	; (800484c <USBD_MSC_DeviceDescriptor+0x8>)
 800484a:	4770      	bx	lr
 800484c:	20000034 	.word	0x20000034

08004850 <USBD_MSC_LangIDStrDescriptor>:
  return (uint8_t*)USBD_LangIDDesc;
}

uint8_t *USBD_MSC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 8004850:	2304      	movs	r3, #4
 8004852:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 8004854:	4800      	ldr	r0, [pc, #0]	; (8004858 <USBD_MSC_LangIDStrDescriptor+0x8>)
 8004856:	4770      	bx	lr
 8004858:	2000005c 	.word	0x2000005c

0800485c <IntToUnicode>:
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800485c:	2300      	movs	r3, #0
{
 800485e:	b530      	push	{r4, r5, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004860:	461d      	mov	r5, r3
  for( idx = 0 ; idx < len ; idx ++)
 8004862:	b2dc      	uxtb	r4, r3
 8004864:	42a2      	cmp	r2, r4
 8004866:	d800      	bhi.n	800486a <IntToUnicode+0xe>
  }
}
 8004868:	bd30      	pop	{r4, r5, pc}
    if( ((value >> 28)) < 0xA )
 800486a:	0f04      	lsrs	r4, r0, #28
 800486c:	2c09      	cmp	r4, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 800486e:	bf94      	ite	ls
 8004870:	3430      	addls	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004872:	3437      	addhi	r4, #55	; 0x37
 8004874:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 8004878:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 800487c:	0100      	lsls	r0, r0, #4
    pbuf[ 2* idx + 1] = 0;
 800487e:	7065      	strb	r5, [r4, #1]
 8004880:	3301      	adds	r3, #1
 8004882:	e7ee      	b.n	8004862 <IntToUnicode+0x6>

08004884 <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8004884:	231a      	movs	r3, #26
{
 8004886:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004888:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)VCP_DEVICE_ID1;
 800488a:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <USBD_VCP_SerialStrDescriptor+0x2c>)
 800488c:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)VCP_DEVICE_ID3;
 800488e:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8004890:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8004892:	18c0      	adds	r0, r0, r3
 8004894:	d00a      	beq.n	80048ac <USBD_VCP_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)VCP_DEVICE_ID2;
 8004896:	4b07      	ldr	r3, [pc, #28]	; (80048b4 <USBD_VCP_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8004898:	4907      	ldr	r1, [pc, #28]	; (80048b8 <USBD_VCP_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)VCP_DEVICE_ID2;
 800489a:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800489c:	2208      	movs	r2, #8
 800489e:	f7ff ffdd 	bl	800485c <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 80048a2:	2204      	movs	r2, #4
 80048a4:	4905      	ldr	r1, [pc, #20]	; (80048bc <USBD_VCP_SerialStrDescriptor+0x38>)
 80048a6:	4620      	mov	r0, r4
 80048a8:	f7ff ffd8 	bl	800485c <IntToUnicode>
}
 80048ac:	4804      	ldr	r0, [pc, #16]	; (80048c0 <USBD_VCP_SerialStrDescriptor+0x3c>)
 80048ae:	bd10      	pop	{r4, pc}
 80048b0:	1fff7a30 	.word	0x1fff7a30
 80048b4:	1fff7a34 	.word	0x1fff7a34
 80048b8:	20000062 	.word	0x20000062
 80048bc:	20000072 	.word	0x20000072
 80048c0:	20000060 	.word	0x20000060

080048c4 <USBD_MSC_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80048c4:	231a      	movs	r3, #26
{
 80048c6:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80048c8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 80048ca:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <USBD_MSC_SerialStrDescriptor+0x2c>)
 80048cc:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 80048ce:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80048d0:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80048d2:	18c0      	adds	r0, r0, r3
 80048d4:	d00a      	beq.n	80048ec <USBD_MSC_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 80048d6:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <USBD_MSC_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 80048d8:	4907      	ldr	r1, [pc, #28]	; (80048f8 <USBD_MSC_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 80048da:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 80048dc:	2208      	movs	r2, #8
 80048de:	f7ff ffbd 	bl	800485c <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 80048e2:	2204      	movs	r2, #4
 80048e4:	4905      	ldr	r1, [pc, #20]	; (80048fc <USBD_MSC_SerialStrDescriptor+0x38>)
 80048e6:	4620      	mov	r0, r4
 80048e8:	f7ff ffb8 	bl	800485c <IntToUnicode>
}
 80048ec:	4804      	ldr	r0, [pc, #16]	; (8004900 <USBD_MSC_SerialStrDescriptor+0x3c>)
 80048ee:	bd10      	pop	{r4, pc}
 80048f0:	1fff7a10 	.word	0x1fff7a10
 80048f4:	1fff7a14 	.word	0x1fff7a14
 80048f8:	20000062 	.word	0x20000062
 80048fc:	20000072 	.word	0x20000072
 8004900:	20000060 	.word	0x20000060

08004904 <USBD_VCP_ProductStrDescriptor>:
{
 8004904:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING_VCP, USBD_StrDesc, length);
 8004906:	4c04      	ldr	r4, [pc, #16]	; (8004918 <USBD_VCP_ProductStrDescriptor+0x14>)
 8004908:	4804      	ldr	r0, [pc, #16]	; (800491c <USBD_VCP_ProductStrDescriptor+0x18>)
 800490a:	460a      	mov	r2, r1
 800490c:	4621      	mov	r1, r4
 800490e:	f005 f95b 	bl	8009bc8 <USBD_GetString>
}
 8004912:	4620      	mov	r0, r4
 8004914:	bd10      	pop	{r4, pc}
 8004916:	bf00      	nop
 8004918:	20009394 	.word	0x20009394
 800491c:	0800da15 	.word	0x0800da15

08004920 <USBD_MSC_ProductStrDescriptor>:
{
 8004920:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8004922:	4c04      	ldr	r4, [pc, #16]	; (8004934 <USBD_MSC_ProductStrDescriptor+0x14>)
 8004924:	4804      	ldr	r0, [pc, #16]	; (8004938 <USBD_MSC_ProductStrDescriptor+0x18>)
 8004926:	460a      	mov	r2, r1
 8004928:	4621      	mov	r1, r4
 800492a:	f005 f94d 	bl	8009bc8 <USBD_GetString>
}
 800492e:	4620      	mov	r0, r4
 8004930:	bd10      	pop	{r4, pc}
 8004932:	bf00      	nop
 8004934:	20009394 	.word	0x20009394
 8004938:	0800d9e4 	.word	0x0800d9e4

0800493c <USBD_MSC_ManufacturerStrDescriptor>:
{
 800493c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800493e:	4c04      	ldr	r4, [pc, #16]	; (8004950 <USBD_MSC_ManufacturerStrDescriptor+0x14>)
 8004940:	4804      	ldr	r0, [pc, #16]	; (8004954 <USBD_MSC_ManufacturerStrDescriptor+0x18>)
 8004942:	460a      	mov	r2, r1
 8004944:	4621      	mov	r1, r4
 8004946:	f005 f93f 	bl	8009bc8 <USBD_GetString>
}
 800494a:	4620      	mov	r0, r4
 800494c:	bd10      	pop	{r4, pc}
 800494e:	bf00      	nop
 8004950:	20009394 	.word	0x20009394
 8004954:	0800d9d1 	.word	0x0800d9d1

08004958 <USBD_VCP_ConfigStrDescriptor>:
{
 8004958:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING_VCP, USBD_StrDesc, length);
 800495a:	4c04      	ldr	r4, [pc, #16]	; (800496c <USBD_VCP_ConfigStrDescriptor+0x14>)
 800495c:	4804      	ldr	r0, [pc, #16]	; (8004970 <USBD_VCP_ConfigStrDescriptor+0x18>)
 800495e:	460a      	mov	r2, r1
 8004960:	4621      	mov	r1, r4
 8004962:	f005 f931 	bl	8009bc8 <USBD_GetString>
}
 8004966:	4620      	mov	r0, r4
 8004968:	bd10      	pop	{r4, pc}
 800496a:	bf00      	nop
 800496c:	20009394 	.word	0x20009394
 8004970:	0800d9fc 	.word	0x0800d9fc

08004974 <USBD_MSC_ConfigStrDescriptor>:
{
 8004974:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 8004976:	4c04      	ldr	r4, [pc, #16]	; (8004988 <USBD_MSC_ConfigStrDescriptor+0x14>)
 8004978:	4804      	ldr	r0, [pc, #16]	; (800498c <USBD_MSC_ConfigStrDescriptor+0x18>)
 800497a:	460a      	mov	r2, r1
 800497c:	4621      	mov	r1, r4
 800497e:	f005 f923 	bl	8009bc8 <USBD_GetString>
}
 8004982:	4620      	mov	r0, r4
 8004984:	bd10      	pop	{r4, pc}
 8004986:	bf00      	nop
 8004988:	20009394 	.word	0x20009394
 800498c:	0800d9b8 	.word	0x0800d9b8

08004990 <USBD_VCP_InterfaceStrDescriptor>:
{
 8004990:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING_VCP, USBD_StrDesc, length);
 8004992:	4c04      	ldr	r4, [pc, #16]	; (80049a4 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 8004994:	4804      	ldr	r0, [pc, #16]	; (80049a8 <USBD_VCP_InterfaceStrDescriptor+0x18>)
 8004996:	460a      	mov	r2, r1
 8004998:	4621      	mov	r1, r4
 800499a:	f005 f915 	bl	8009bc8 <USBD_GetString>
}
 800499e:	4620      	mov	r0, r4
 80049a0:	bd10      	pop	{r4, pc}
 80049a2:	bf00      	nop
 80049a4:	20009394 	.word	0x20009394
 80049a8:	0800da07 	.word	0x0800da07

080049ac <USBD_MSC_InterfaceStrDescriptor>:
{
 80049ac:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80049ae:	4c04      	ldr	r4, [pc, #16]	; (80049c0 <USBD_MSC_InterfaceStrDescriptor+0x14>)
 80049b0:	4804      	ldr	r0, [pc, #16]	; (80049c4 <USBD_MSC_InterfaceStrDescriptor+0x18>)
 80049b2:	460a      	mov	r2, r1
 80049b4:	4621      	mov	r1, r4
 80049b6:	f005 f907 	bl	8009bc8 <USBD_GetString>
}
 80049ba:	4620      	mov	r0, r4
 80049bc:	bd10      	pop	{r4, pc}
 80049be:	bf00      	nop
 80049c0:	20009394 	.word	0x20009394
 80049c4:	0800d9c3 	.word	0x0800d9c3

080049c8 <USBD_VCP_LangIDStrDescriptor>:
 80049c8:	2304      	movs	r3, #4
 80049ca:	800b      	strh	r3, [r1, #0]
 80049cc:	4800      	ldr	r0, [pc, #0]	; (80049d0 <USBD_VCP_LangIDStrDescriptor+0x8>)
 80049ce:	4770      	bx	lr
 80049d0:	2000005c 	.word	0x2000005c

080049d4 <USBD_VCP_ManufacturerStrDescriptor>:
 80049d4:	b510      	push	{r4, lr}
 80049d6:	4c04      	ldr	r4, [pc, #16]	; (80049e8 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 80049d8:	4804      	ldr	r0, [pc, #16]	; (80049ec <USBD_VCP_ManufacturerStrDescriptor+0x18>)
 80049da:	460a      	mov	r2, r1
 80049dc:	4621      	mov	r1, r4
 80049de:	f005 f8f3 	bl	8009bc8 <USBD_GetString>
 80049e2:	4620      	mov	r0, r4
 80049e4:	bd10      	pop	{r4, pc}
 80049e6:	bf00      	nop
 80049e8:	20009394 	.word	0x20009394
 80049ec:	0800d9d1 	.word	0x0800d9d1

080049f0 <STORAGE_IsWriteProtected>:
  * @retval Status (0: write enabled / -1: otherwise)
  */
int8_t STORAGE_IsWriteProtected(uint8_t lun)
{
  return 0;
}
 80049f0:	2000      	movs	r0, #0
 80049f2:	4770      	bx	lr

080049f4 <STORAGE_GetMaxLun>:
  * @retval Lun(s) number
  */
int8_t STORAGE_GetMaxLun(void)
{
  return(STORAGE_LUN_NBR - 1);
}
 80049f4:	2000      	movs	r0, #0
 80049f6:	4770      	bx	lr

080049f8 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80049f8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

  if(pdev->pClassData != NULL)
 80049fc:	b11b      	cbz	r3, 8004a06 <USBD_CDC_DataIn+0xe>
  {

    hcdc->TxState = 0;
 80049fe:	2000      	movs	r0, #0
 8004a00:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8004a04:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8004a06:	2002      	movs	r0, #2
  }
}
 8004a08:	4770      	bx	lr

08004a0a <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8004a0a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{
 8004a0e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004a10:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8004a14:	b15b      	cbz	r3, 8004a2e <USBD_CDC_EP0_RxReady+0x24>
 8004a16:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004a1a:	28ff      	cmp	r0, #255	; 0xff
 8004a1c:	d007      	beq.n	8004a2e <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004a24:	4621      	mov	r1, r4
 8004a26:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF;
 8004a28:	23ff      	movs	r3, #255	; 0xff
 8004a2a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8004a2e:	2000      	movs	r0, #0
 8004a30:	bd10      	pop	{r4, pc}
	...

08004a34 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004a34:	2343      	movs	r3, #67	; 0x43
 8004a36:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8004a38:	4800      	ldr	r0, [pc, #0]	; (8004a3c <USBD_CDC_GetFSCfgDesc+0x8>)
 8004a3a:	4770      	bx	lr
 8004a3c:	200000fc 	.word	0x200000fc

08004a40 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8004a40:	2343      	movs	r3, #67	; 0x43
 8004a42:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004a44:	4800      	ldr	r0, [pc, #0]	; (8004a48 <USBD_CDC_GetHSCfgDesc+0x8>)
 8004a46:	4770      	bx	lr
 8004a48:	20000140 	.word	0x20000140

08004a4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004a4c:	2343      	movs	r3, #67	; 0x43
 8004a4e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004a50:	4800      	ldr	r0, [pc, #0]	; (8004a54 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004a52:	4770      	bx	lr
 8004a54:	20000190 	.word	0x20000190

08004a58 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8004a58:	230a      	movs	r3, #10
 8004a5a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004a5c:	4800      	ldr	r0, [pc, #0]	; (8004a60 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004a5e:	4770      	bx	lr
 8004a60:	20000184 	.word	0x20000184

08004a64 <STORAGE_Init>:
{
 8004a64:	b508      	push	{r3, lr}
  BSP_SD_Init();
 8004a66:	f7fc fbd9 	bl	800121c <BSP_SD_Init>
}
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	bd08      	pop	{r3, pc}

08004a6e <STORAGE_GetCapacity>:
{
 8004a6e:	b530      	push	{r4, r5, lr}
 8004a70:	b097      	sub	sp, #92	; 0x5c
 8004a72:	460d      	mov	r5, r1
 8004a74:	4614      	mov	r4, r2
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8004a76:	f7fc fb20 	bl	80010ba <BSP_SD_IsDetected>
 8004a7a:	b178      	cbz	r0, 8004a9c <STORAGE_GetCapacity+0x2e>
    BSP_SD_GetCardInfo(&info);
 8004a7c:	4668      	mov	r0, sp
 8004a7e:	f7fc fb3d 	bl	80010fc <BSP_SD_GetCardInfo>
    *block_num = (info.CardCapacity)/STORAGE_BLK_SIZ  - 1;
 8004a82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004a86:	0a5b      	lsrs	r3, r3, #9
 8004a88:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	602b      	str	r3, [r5, #0]
    *block_size = STORAGE_BLK_SIZ;
 8004a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a94:	8023      	strh	r3, [r4, #0]
    ret = 0;
 8004a96:	2000      	movs	r0, #0
}
 8004a98:	b017      	add	sp, #92	; 0x5c
 8004a9a:	bd30      	pop	{r4, r5, pc}
  int8_t ret = -1;  
 8004a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa0:	e7fa      	b.n	8004a98 <STORAGE_GetCapacity+0x2a>

08004aa2 <STORAGE_Read>:
{
 8004aa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	4615      	mov	r5, r2
 8004aa8:	461e      	mov	r6, r3
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8004aaa:	f7fc fb06 	bl	80010ba <BSP_SD_IsDetected>
 8004aae:	b158      	cbz	r0, 8004ac8 <STORAGE_Read+0x26>
    BSP_SD_ReadBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 8004ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	9601      	str	r6, [sp, #4]
 8004ab8:	026a      	lsls	r2, r5, #9
 8004aba:	2300      	movs	r3, #0
 8004abc:	4620      	mov	r0, r4
 8004abe:	f7fc fb55 	bl	800116c <BSP_SD_ReadBlocks_DMA>
    ret = 0;
 8004ac2:	2000      	movs	r0, #0
}
 8004ac4:	b002      	add	sp, #8
 8004ac6:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;  
 8004ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8004acc:	e7fa      	b.n	8004ac4 <STORAGE_Read+0x22>

08004ace <STORAGE_Write>:
{
 8004ace:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	4615      	mov	r5, r2
 8004ad4:	461e      	mov	r6, r3
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8004ad6:	f7fc faf0 	bl	80010ba <BSP_SD_IsDetected>
 8004ada:	b158      	cbz	r0, 8004af4 <STORAGE_Write+0x26>
    BSP_SD_WriteBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 8004adc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	9601      	str	r6, [sp, #4]
 8004ae4:	026a      	lsls	r2, r5, #9
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f7fc fc19 	bl	8001320 <BSP_SD_WriteBlocks_DMA>
    ret = 0;
 8004aee:	2000      	movs	r0, #0
}
 8004af0:	b002      	add	sp, #8
 8004af2:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;  
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	e7fa      	b.n	8004af0 <STORAGE_Write+0x22>

08004afa <USBD_CDC_DataOut>:
{
 8004afa:	b538      	push	{r3, r4, r5, lr}
 8004afc:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004afe:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004b02:	f7ff fe92 	bl	800482a <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8004b06:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004b0a:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8004b0e:	b14b      	cbz	r3, 8004b24 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004b10:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8004b14:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8004b1e:	4798      	blx	r3
    return USBD_OK;
 8004b20:	2000      	movs	r0, #0
 8004b22:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8004b24:	2002      	movs	r0, #2
}
 8004b26:	bd38      	pop	{r3, r4, r5, pc}

08004b28 <USBD_CDC_Setup>:
{
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b2a:	780f      	ldrb	r7, [r1, #0]
 8004b2c:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8004b30:	4606      	mov	r6, r0
 8004b32:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b34:	d023      	beq.n	8004b7e <USBD_CDC_Setup+0x56>
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	d119      	bne.n	8004b6e <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8004b3a:	88ca      	ldrh	r2, [r1, #6]
 8004b3c:	784b      	ldrb	r3, [r1, #1]
 8004b3e:	b1c2      	cbz	r2, 8004b72 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8004b40:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004b42:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8004b46:	d50b      	bpl.n	8004b60 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004b48:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	688f      	ldr	r7, [r1, #8]
 8004b50:	4629      	mov	r1, r5
 8004b52:	47b8      	blx	r7
          USBD_CtlSendData (pdev,
 8004b54:	88e2      	ldrh	r2, [r4, #6]
 8004b56:	4629      	mov	r1, r5
 8004b58:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8004b5a:	f005 f851 	bl	8009c00 <USBD_CtlSendData>
      break;
 8004b5e:	e006      	b.n	8004b6e <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8004b60:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8004b64:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev,
 8004b68:	4629      	mov	r1, r5
 8004b6a:	f005 f85e 	bl	8009c2a <USBD_CtlPrepareRx>
}
 8004b6e:	2000      	movs	r0, #0
 8004b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004b72:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8004b76:	6884      	ldr	r4, [r0, #8]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	47a0      	blx	r4
 8004b7c:	e7f7      	b.n	8004b6e <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8004b7e:	784b      	ldrb	r3, [r1, #1]
 8004b80:	2b0a      	cmp	r3, #10
 8004b82:	d1f4      	bne.n	8004b6e <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8004b84:	2201      	movs	r2, #1
 8004b86:	4901      	ldr	r1, [pc, #4]	; (8004b8c <USBD_CDC_Setup+0x64>)
 8004b88:	e7e7      	b.n	8004b5a <USBD_CDC_Setup+0x32>
 8004b8a:	bf00      	nop
 8004b8c:	200005d4 	.word	0x200005d4

08004b90 <USBD_CDC_DeInit>:
{
 8004b90:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8004b92:	2183      	movs	r1, #131	; 0x83
{
 8004b94:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8004b96:	f7ff fe04 	bl	80047a2 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8004b9a:	2103      	movs	r1, #3
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	f7ff fe00 	bl	80047a2 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8004ba2:	2182      	movs	r1, #130	; 0x82
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f7ff fdfc 	bl	80047a2 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8004baa:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8004bae:	b153      	cbz	r3, 8004bc6 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004bb0:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004bb8:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8004bbc:	f006 fd16 	bl	800b5ec <free>
    pdev->pClassData = NULL;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	bd10      	pop	{r4, pc}

08004bca <USBD_CDC_Init>:
{
 8004bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004bcc:	7c03      	ldrb	r3, [r0, #16]
{
 8004bce:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004bd0:	bb7b      	cbnz	r3, 8004c32 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8004bd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	2183      	movs	r1, #131	; 0x83
 8004bda:	f7ff fdd8 	bl	800478e <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8004bde:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8004be2:	2202      	movs	r2, #2
 8004be4:	2103      	movs	r1, #3
 8004be6:	4620      	mov	r0, r4
 8004be8:	f7ff fdd1 	bl	800478e <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8004bec:	2308      	movs	r3, #8
 8004bee:	2203      	movs	r2, #3
 8004bf0:	2182      	movs	r1, #130	; 0x82
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f7ff fdcb 	bl	800478e <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004bf8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004bfc:	f006 fcee 	bl	800b5dc <malloc>
 8004c00:	4606      	mov	r6, r0
 8004c02:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8004c06:	b320      	cbz	r0, 8004c52 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004c08:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004c10:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8004c12:	2500      	movs	r5, #0
 8004c14:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8004c18:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004c1c:	b987      	cbnz	r7, 8004c40 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8004c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c22:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8004c26:	2103      	movs	r1, #3
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f7ff fdf7 	bl	800481c <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8004c2e:	4638      	mov	r0, r7
 8004c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8004c32:	2340      	movs	r3, #64	; 0x40
 8004c34:	2202      	movs	r2, #2
 8004c36:	2183      	movs	r1, #131	; 0x83
 8004c38:	f7ff fda9 	bl	800478e <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8004c3c:	2340      	movs	r3, #64	; 0x40
 8004c3e:	e7d0      	b.n	8004be2 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8004c40:	2340      	movs	r3, #64	; 0x40
 8004c42:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8004c46:	2103      	movs	r1, #3
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f7ff fde7 	bl	800481c <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8004c4e:	4628      	mov	r0, r5
 8004c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1;
 8004c52:	2001      	movs	r0, #1
}
 8004c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c58 <CDC_Itf_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
 8004c58:	b508      	push	{r3, lr}
  /* DeInitialize the UART peripheral */
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8004c5a:	4802      	ldr	r0, [pc, #8]	; (8004c64 <CDC_Itf_DeInit+0xc>)
 8004c5c:	f002 feac 	bl	80079b8 <HAL_UART_DeInit>
  {
    /* Initialization Error */
 //   Error_Handler();
 }
  return (USBD_OK);
}
 8004c60:	2000      	movs	r0, #0
 8004c62:	bd08      	pop	{r3, pc}
 8004c64:	200094a4 	.word	0x200094a4

08004c68 <CDC_Itf_Init>:
{
 8004c68:	b570      	push	{r4, r5, r6, lr}
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8004c6a:	4a18      	ldr	r2, [pc, #96]	; (8004ccc <CDC_Itf_Init+0x64>)
  UartHandle.Instance          = USARTx;
 8004c6c:	4c18      	ldr	r4, [pc, #96]	; (8004cd0 <CDC_Itf_Init+0x68>)
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 8004c6e:	4e19      	ldr	r6, [pc, #100]	; (8004cd4 <CDC_Itf_Init+0x6c>)
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8004c70:	2500      	movs	r5, #0
 8004c72:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004c76:	e884 002c 	stmia.w	r4, {r2, r3, r5}
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8004c7a:	4620      	mov	r0, r4
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8004c7c:	230c      	movs	r3, #12
 8004c7e:	6163      	str	r3, [r4, #20]
  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 8004c80:	60e5      	str	r5, [r4, #12]
  UartHandle.Init.Parity       = UART_PARITY_NONE;
 8004c82:	6125      	str	r5, [r4, #16]
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8004c84:	61a5      	str	r5, [r4, #24]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8004c86:	f003 f945 	bl	8007f14 <HAL_UART_Init>
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	4631      	mov	r1, r6
 8004c8e:	4620      	mov	r0, r4


static void TIM_Config(void)
{
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 8004c90:	4c11      	ldr	r4, [pc, #68]	; (8004cd8 <CDC_Itf_Init+0x70>)
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 8004c92:	f002 feab 	bl	80079ec <HAL_UART_Receive_IT>
  TimHandle.Instance = TIMx;
 8004c96:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <CDC_Itf_Init+0x74>)
 8004c98:	6023      	str	r3, [r4, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 8004c9a:	f241 3387 	movw	r3, #4999	; 0x1387
 8004c9e:	60e3      	str	r3, [r4, #12]
  TimHandle.Init.Prescaler = 84-1;
  TimHandle.Init.ClockDivision = 0;
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8004ca0:	4620      	mov	r0, r4
  TimHandle.Init.Prescaler = 84-1;
 8004ca2:	2353      	movs	r3, #83	; 0x53
 8004ca4:	6063      	str	r3, [r4, #4]
  TimHandle.Init.ClockDivision = 0;
 8004ca6:	6125      	str	r5, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ca8:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8004caa:	f002 fe69 	bl	8007980 <HAL_TIM_Base_Init>
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f002 fdf8 	bl	80078a4 <HAL_TIM_Base_Start_IT>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004cb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <CDC_Itf_Init+0x78>)
  hcdc->RxBuffer = pbuff;
 8004cb6:	4a0b      	ldr	r2, [pc, #44]	; (8004ce4 <CDC_Itf_Init+0x7c>)
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004cb8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
}
 8004cbc:	4628      	mov	r0, r5
  hcdc->TxBuffer = pbuff;
 8004cbe:	f8c3 6208 	str.w	r6, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004cc2:	f8c3 5210 	str.w	r5, [r3, #528]	; 0x210
  hcdc->RxBuffer = pbuff;
 8004cc6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8004cca:	bd70      	pop	{r4, r5, r6, pc}
 8004ccc:	40013800 	.word	0x40013800
 8004cd0:	200094a4 	.word	0x200094a4
 8004cd4:	2000957d 	.word	0x2000957d
 8004cd8:	2000a97c 	.word	0x2000a97c
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	20008700 	.word	0x20008700
 8004ce4:	2000a170 	.word	0x2000a170

08004ce8 <STORAGE_IsReady>:
{
 8004ce8:	b510      	push	{r4, lr}
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8004cea:	f7fc f9e6 	bl	80010ba <BSP_SD_IsDetected>
 8004cee:	4c0b      	ldr	r4, [pc, #44]	; (8004d1c <STORAGE_IsReady+0x34>)
    if(prev_status < 0)
 8004cf0:	f994 3000 	ldrsb.w	r3, [r4]
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8004cf4:	b160      	cbz	r0, 8004d10 <STORAGE_IsReady+0x28>
    if(prev_status < 0)
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	da03      	bge.n	8004d02 <STORAGE_IsReady+0x1a>
      BSP_SD_Init();
 8004cfa:	f7fc fa8f 	bl	800121c <BSP_SD_Init>
      prev_status = 0;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	7023      	strb	r3, [r4, #0]
    if(BSP_SD_GetStatus() == SD_TRANSFER_OK)
 8004d02:	f7fc f9f5 	bl	80010f0 <BSP_SD_GetStatus>
 8004d06:	3000      	adds	r0, #0
 8004d08:	bf18      	it	ne
 8004d0a:	2001      	movne	r0, #1
 8004d0c:	4240      	negs	r0, r0
 8004d0e:	bd10      	pop	{r4, pc}
  else if(prev_status == 0)
 8004d10:	b90b      	cbnz	r3, 8004d16 <STORAGE_IsReady+0x2e>
    prev_status = -1;
 8004d12:	23ff      	movs	r3, #255	; 0xff
 8004d14:	7023      	strb	r3, [r4, #0]
  int8_t ret = -1;
 8004d16:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004d1a:	bd10      	pop	{r4, pc}
 8004d1c:	200005d5 	.word	0x200005d5

08004d20 <CDC_Itf_Control>:
  switch (cmd)
 8004d20:	2820      	cmp	r0, #32
{
 8004d22:	b538      	push	{r3, r4, r5, lr}
  switch (cmd)
 8004d24:	d003      	beq.n	8004d2e <CDC_Itf_Control+0xe>
 8004d26:	2821      	cmp	r0, #33	; 0x21
 8004d28:	d048      	beq.n	8004dbc <CDC_Itf_Control+0x9c>
}
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	bd38      	pop	{r3, r4, r5, pc}
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8004d2e:	4c2c      	ldr	r4, [pc, #176]	; (8004de0 <CDC_Itf_Control+0xc0>)
 8004d30:	680b      	ldr	r3, [r1, #0]
 8004d32:	6023      	str	r3, [r4, #0]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8004d34:	4d2b      	ldr	r5, [pc, #172]	; (8004de4 <CDC_Itf_Control+0xc4>)
    LineCoding.format     = pbuf[4];
 8004d36:	790b      	ldrb	r3, [r1, #4]
 8004d38:	7123      	strb	r3, [r4, #4]
    LineCoding.paritytype = pbuf[5];
 8004d3a:	794b      	ldrb	r3, [r1, #5]
 8004d3c:	7163      	strb	r3, [r4, #5]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8004d3e:	4628      	mov	r0, r5
    LineCoding.datatype   = pbuf[6];
 8004d40:	798b      	ldrb	r3, [r1, #6]
 8004d42:	71a3      	strb	r3, [r4, #6]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8004d44:	f002 fe38 	bl	80079b8 <HAL_UART_DeInit>
  switch (LineCoding.format)
 8004d48:	7923      	ldrb	r3, [r4, #4]
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	b12b      	cbz	r3, 8004d5a <CDC_Itf_Control+0x3a>
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d001      	beq.n	8004d56 <CDC_Itf_Control+0x36>
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 8004d52:	2300      	movs	r3, #0
 8004d54:	e001      	b.n	8004d5a <CDC_Itf_Control+0x3a>
    UartHandle.Init.StopBits = UART_STOPBITS_2;
 8004d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  switch (LineCoding.paritytype)
 8004d5a:	7962      	ldrb	r2, [r4, #5]
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 8004d5c:	60c3      	str	r3, [r0, #12]
  switch (LineCoding.paritytype)
 8004d5e:	2a01      	cmp	r2, #1
 8004d60:	d020      	beq.n	8004da4 <CDC_Itf_Control+0x84>
 8004d62:	f04f 0300 	mov.w	r3, #0
 8004d66:	d301      	bcc.n	8004d6c <CDC_Itf_Control+0x4c>
 8004d68:	2a02      	cmp	r2, #2
 8004d6a:	d01e      	beq.n	8004daa <CDC_Itf_Control+0x8a>
  switch (LineCoding.datatype)
 8004d6c:	79a2      	ldrb	r2, [r4, #6]
    UartHandle.Init.Parity = UART_PARITY_NONE;
 8004d6e:	6103      	str	r3, [r0, #16]
  switch (LineCoding.datatype)
 8004d70:	2a07      	cmp	r2, #7
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	d001      	beq.n	8004d7c <CDC_Itf_Control+0x5c>
 8004d78:	2a08      	cmp	r2, #8
 8004d7a:	d019      	beq.n	8004db0 <CDC_Itf_Control+0x90>
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8004d7c:	6083      	str	r3, [r0, #8]
  UartHandle.Init.BaudRate     = LineCoding.bitrate;
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	6043      	str	r3, [r0, #4]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8004d82:	220c      	movs	r2, #12
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8004d84:	2300      	movs	r3, #0
 8004d86:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8004d88:	6142      	str	r2, [r0, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d8a:	61c3      	str	r3, [r0, #28]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8004d8c:	4815      	ldr	r0, [pc, #84]	; (8004de4 <CDC_Itf_Control+0xc4>)
 8004d8e:	f003 f8c1 	bl	8007f14 <HAL_UART_Init>
 HAL_UART_Receive_IT(&UartHandle, (uint8_t *)(UserTxBuffer + UserTxBufPtrIn), 1);
 8004d92:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <CDC_Itf_Control+0xc8>)
 8004d94:	4915      	ldr	r1, [pc, #84]	; (8004dec <CDC_Itf_Control+0xcc>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4812      	ldr	r0, [pc, #72]	; (8004de4 <CDC_Itf_Control+0xc4>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	4419      	add	r1, r3
 8004d9e:	f002 fe25 	bl	80079ec <HAL_UART_Receive_IT>
 8004da2:	e7c2      	b.n	8004d2a <CDC_Itf_Control+0xa>
    UartHandle.Init.Parity = UART_PARITY_ODD;
 8004da4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004da8:	e7e0      	b.n	8004d6c <CDC_Itf_Control+0x4c>
    UartHandle.Init.Parity = UART_PARITY_EVEN;
 8004daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dae:	e7dd      	b.n	8004d6c <CDC_Itf_Control+0x4c>
    if(UartHandle.Init.Parity == UART_PARITY_NONE)
 8004db0:	6903      	ldr	r3, [r0, #16]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0e2      	beq.n	8004d7c <CDC_Itf_Control+0x5c>
      UartHandle.Init.WordLength = UART_WORDLENGTH_9B;
 8004db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dba:	e7df      	b.n	8004d7c <CDC_Itf_Control+0x5c>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8004dbc:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <CDC_Itf_Control+0xc0>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	0a12      	lsrs	r2, r2, #8
 8004dc6:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8004dc8:	885a      	ldrh	r2, [r3, #2]
 8004dca:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8004dcc:	78da      	ldrb	r2, [r3, #3]
 8004dce:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 8004dd0:	791a      	ldrb	r2, [r3, #4]
 8004dd2:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 8004dd4:	795a      	ldrb	r2, [r3, #5]
 8004dd6:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;
 8004dd8:	799b      	ldrb	r3, [r3, #6]
 8004dda:	718b      	strb	r3, [r1, #6]
    break;
 8004ddc:	e7a5      	b.n	8004d2a <CDC_Itf_Control+0xa>
 8004dde:	bf00      	nop
 8004de0:	20000098 	.word	0x20000098
 8004de4:	200094a4 	.word	0x200094a4
 8004de8:	200005d0 	.word	0x200005d0
 8004dec:	2000957d 	.word	0x2000957d

08004df0 <LL_RTC_DATE_GetDay.constprop.2>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <LL_RTC_DATE_GetDay.constprop.2+0x2c>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df2:	2030      	movs	r0, #48	; 0x30
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	fa90 f0a0 	rbit	r0, r0
 8004dfa:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 8004dfc:	fab0 f080 	clz	r0, r0
 8004e00:	fa92 f2a2 	rbit	r2, r2
 8004e04:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8004e08:	fab2 f282 	clz	r2, r2
 8004e0c:	f003 030f 	and.w	r3, r3, #15
 8004e10:	fa21 f000 	lsr.w	r0, r1, r0
 8004e14:	40d3      	lsrs	r3, r2
}
 8004e16:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004e1a:	4770      	bx	lr
 8004e1c:	40002800 	.word	0x40002800

08004e20 <LL_RTC_DATE_GetMonth.constprop.3>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 8004e20:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <LL_RTC_DATE_GetMonth.constprop.3+0x30>)
 8004e22:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	fa90 f0a0 	rbit	r0, r0
 8004e2c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 8004e30:	fab0 f080 	clz	r0, r0
 8004e34:	fa92 f2a2 	rbit	r2, r2
 8004e38:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 8004e3c:	fab2 f282 	clz	r2, r2
 8004e40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e44:	fa21 f000 	lsr.w	r0, r1, r0
 8004e48:	40d3      	lsrs	r3, r2
}
 8004e4a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004e4e:	4770      	bx	lr
 8004e50:	40002800 	.word	0x40002800

08004e54 <LL_RTC_DATE_GetYear.constprop.4>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 8004e54:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <LL_RTC_DATE_GetYear.constprop.4+0x30>)
 8004e56:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	fa90 f0a0 	rbit	r0, r0
 8004e60:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 8004e64:	fab0 f080 	clz	r0, r0
 8004e68:	fa92 f2a2 	rbit	r2, r2
 8004e6c:	f403 0170 	and.w	r1, r3, #15728640	; 0xf00000
 8004e70:	fab2 f282 	clz	r2, r2
 8004e74:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004e78:	fa21 f000 	lsr.w	r0, r1, r0
 8004e7c:	40d3      	lsrs	r3, r2
}
 8004e7e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004e82:	4770      	bx	lr
 8004e84:	40002800 	.word	0x40002800

08004e88 <LL_RTC_TIME_GetSecond.constprop.5>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 8004e88:	4b0a      	ldr	r3, [pc, #40]	; (8004eb4 <LL_RTC_TIME_GetSecond.constprop.5+0x2c>)
 8004e8a:	2070      	movs	r0, #112	; 0x70
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	fa90 f0a0 	rbit	r0, r0
 8004e92:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 8004e94:	fab0 f080 	clz	r0, r0
 8004e98:	fa92 f2a2 	rbit	r2, r2
 8004e9c:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8004ea0:	fab2 f282 	clz	r2, r2
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	fa21 f000 	lsr.w	r0, r1, r0
 8004eac:	40d3      	lsrs	r3, r2
}
 8004eae:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40002800 	.word	0x40002800

08004eb8 <LL_RTC_TIME_GetMinute.constprop.6>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <LL_RTC_TIME_GetMinute.constprop.6+0x30>)
 8004eba:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	fa90 f0a0 	rbit	r0, r0
 8004ec4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 8004ec8:	fab0 f080 	clz	r0, r0
 8004ecc:	fa92 f2a2 	rbit	r2, r2
 8004ed0:	f403 41e0 	and.w	r1, r3, #28672	; 0x7000
 8004ed4:	fab2 f282 	clz	r2, r2
 8004ed8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004edc:	fa21 f000 	lsr.w	r0, r1, r0
 8004ee0:	40d3      	lsrs	r3, r2
}
 8004ee2:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004ee6:	4770      	bx	lr
 8004ee8:	40002800 	.word	0x40002800

08004eec <LL_RTC_TIME_GetHour.constprop.7>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <LL_RTC_TIME_GetHour.constprop.7+0x30>)
 8004eee:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	fa90 f0a0 	rbit	r0, r0
 8004ef8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 8004efc:	fab0 f080 	clz	r0, r0
 8004f00:	fa92 f2a2 	rbit	r2, r2
 8004f04:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
 8004f08:	fab2 f282 	clz	r2, r2
 8004f0c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004f10:	fa21 f000 	lsr.w	r0, r1, r0
 8004f14:	40d3      	lsrs	r3, r2
}
 8004f16:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004f1a:	4770      	bx	lr
 8004f1c:	40002800 	.word	0x40002800

08004f20 <USBD_CDC_RegisterInterface>:
  if(fops != NULL)
 8004f20:	b119      	cbz	r1, 8004f2a <USBD_CDC_RegisterInterface+0xa>
    pdev->pUserData= fops;
 8004f22:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;
 8004f26:	2000      	movs	r0, #0
 8004f28:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8004f2a:	2002      	movs	r0, #2
}
 8004f2c:	4770      	bx	lr

08004f2e <USBD_CDC_TransmitPacket>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004f2e:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 8004f32:	b510      	push	{r4, lr}
  if(pdev->pClassData != NULL)
 8004f34:	b172      	cbz	r2, 8004f54 <USBD_CDC_TransmitPacket+0x26>
    if(hcdc->TxState == 0)
 8004f36:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	b964      	cbnz	r4, 8004f58 <USBD_CDC_TransmitPacket+0x2a>
      hcdc->TxState = 1;
 8004f3e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      USBD_LL_Transmit(pdev,
 8004f42:	2183      	movs	r1, #131	; 0x83
 8004f44:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8004f48:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8004f4c:	f7ff fc5f 	bl	800480e <USBD_LL_Transmit>
      return USBD_OK;
 8004f50:	4620      	mov	r0, r4
 8004f52:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8004f54:	2002      	movs	r0, #2
 8004f56:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8004f58:	4618      	mov	r0, r3
}
 8004f5a:	bd10      	pop	{r4, pc}

08004f5c <USBD_CDC_ReceivePacket>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004f5c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 8004f60:	b510      	push	{r4, lr}
  if(pdev->pClassData != NULL)
 8004f62:	b162      	cbz	r2, 8004f7e <USBD_CDC_ReceivePacket+0x22>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004f64:	7c04      	ldrb	r4, [r0, #16]
 8004f66:	b944      	cbnz	r4, 8004f7a <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8004f68:	f44f 7300 	mov.w	r3, #512	; 0x200
      USBD_LL_PrepareReceive(pdev,
 8004f6c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004f70:	2103      	movs	r1, #3
 8004f72:	f7ff fc53 	bl	800481c <USBD_LL_PrepareReceive>
    return USBD_OK;
 8004f76:	2000      	movs	r0, #0
 8004f78:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8004f7a:	2340      	movs	r3, #64	; 0x40
 8004f7c:	e7f6      	b.n	8004f6c <USBD_CDC_ReceivePacket+0x10>
    return USBD_FAIL;
 8004f7e:	2002      	movs	r0, #2
}
 8004f80:	bd10      	pop	{r4, pc}
	...

08004f84 <CDC_Itf_Receive>:
{
 8004f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
BuffLength=0;
 8004f88:	4dc1      	ldr	r5, [pc, #772]	; (8005290 <CDC_Itf_Receive+0x30c>)
 8004f8a:	4cc2      	ldr	r4, [pc, #776]	; (8005294 <CDC_Itf_Receive+0x310>)
 8004f8c:	2300      	movs	r3, #0
{
 8004f8e:	b087      	sub	sp, #28
BuffLength=0;
 8004f90:	602b      	str	r3, [r5, #0]
for (i = 0; i < *Len; i++)
 8004f92:	4602      	mov	r2, r0
 8004f94:	680e      	ldr	r6, [r1, #0]
 8004f96:	1a13      	subs	r3, r2, r0
 8004f98:	429e      	cmp	r6, r3
 8004f9a:	f200 8089 	bhi.w	80050b0 <CDC_Itf_Receive+0x12c>
if (TempUserBuffer[0] == 'g')
 8004f9e:	7823      	ldrb	r3, [r4, #0]
 8004fa0:	2b67      	cmp	r3, #103	; 0x67
 8004fa2:	f040 808c 	bne.w	80050be <CDC_Itf_Receive+0x13a>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8004fa6:	f894 c002 	ldrb.w	ip, [r4, #2]
 8004faa:	78e3      	ldrb	r3, [r4, #3]
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8004fac:	f894 e006 	ldrb.w	lr, [r4, #6]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8004fb0:	7ae2      	ldrb	r2, [r4, #11]
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8004fb2:	7be1      	ldrb	r1, [r4, #15]
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8004fb4:	7ce0      	ldrb	r0, [r4, #19]
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8004fb6:	f894 a016 	ldrb.w	sl, [r4, #22]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8004fba:	f8df b324 	ldr.w	fp, [pc, #804]	; 80052e0 <CDC_Itf_Receive+0x35c>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8004fbe:	4fb6      	ldr	r7, [pc, #728]	; (8005298 <CDC_Itf_Receive+0x314>)
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8004fc0:	4eb6      	ldr	r6, [pc, #728]	; (800529c <CDC_Itf_Receive+0x318>)
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8004fc2:	f8df 9320 	ldr.w	r9, [pc, #800]	; 80052e4 <CDC_Itf_Receive+0x360>
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8004fc6:	f8df 8320 	ldr.w	r8, [pc, #800]	; 80052e8 <CDC_Itf_Receive+0x364>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8004fca:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004fce:	3b30      	subs	r3, #48	; 0x30
 8004fd0:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8004fd4:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8004fd8:	79e3      	ldrb	r3, [r4, #7]
 8004fda:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004fde:	3b30      	subs	r3, #48	; 0x30
 8004fe0:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8004fe4:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8004fe8:	7aa3      	ldrb	r3, [r4, #10]
 8004fea:	3b30      	subs	r3, #48	; 0x30
 8004fec:	3a30      	subs	r2, #48	; 0x30
 8004fee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ff2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8004ff6:	7ba2      	ldrb	r2, [r4, #14]
 8004ff8:	3a30      	subs	r2, #48	; 0x30
 8004ffa:	3930      	subs	r1, #48	; 0x30
 8004ffc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005000:	eb01 0242 	add.w	r2, r1, r2, lsl #1
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8005004:	7ca1      	ldrb	r1, [r4, #18]
 8005006:	3930      	subs	r1, #48	; 0x30
 8005008:	3830      	subs	r0, #48	; 0x30
 800500a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800500e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8005012:	7de0      	ldrb	r0, [r4, #23]
 8005014:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 8005018:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 800501c:	3830      	subs	r0, #48	; 0x30
 800501e:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 8005022:	f8df a294 	ldr.w	sl, [pc, #660]	; 80052b8 <CDC_Itf_Receive+0x334>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8005026:	fa5f fc8c 	uxtb.w	ip, ip
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 800502a:	fa5f fe8e 	uxtb.w	lr, lr
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 800502e:	b2db      	uxtb	r3, r3
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8005030:	b2d2      	uxtb	r2, r2
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8005032:	b2c9      	uxtb	r1, r1
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8005034:	b2c0      	uxtb	r0, r0
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8005036:	f887 c000 	strb.w	ip, [r7]
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 800503a:	f886 e000 	strb.w	lr, [r6]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 800503e:	f88b 3000 	strb.w	r3, [fp]
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8005042:	f889 2000 	strb.w	r2, [r9]
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8005046:	f888 1000 	strb.w	r1, [r8]
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 800504a:	f88a 0000 	strb.w	r0, [sl]
Set_RTC_Calendar(RTC_Y, RTC_Mo , RTC_D, RTC_H, RTC_Mi, RTC_S);  // Set Device RTC with received Values
 800504e:	f8cd c004 	str.w	ip, [sp, #4]
 8005052:	f8cd e000 	str.w	lr, [sp]
 8005056:	f7fd fa57 	bl	8002508 <Set_RTC_Calendar>
UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Timestamp Received :%d:%d:%d_%d/%d/%d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);//
 800505a:	f89a 2000 	ldrb.w	r2, [sl]
 800505e:	f89b 3000 	ldrb.w	r3, [fp]
 8005062:	9204      	str	r2, [sp, #16]
 8005064:	f899 2000 	ldrb.w	r2, [r9]
 8005068:	9203      	str	r2, [sp, #12]
 800506a:	f898 2000 	ldrb.w	r2, [r8]
 800506e:	9202      	str	r2, [sp, #8]
 8005070:	783a      	ldrb	r2, [r7, #0]
 8005072:	f8df b250 	ldr.w	fp, [pc, #592]	; 80052c4 <CDC_Itf_Receive+0x340>
 8005076:	9201      	str	r2, [sp, #4]
 8005078:	7832      	ldrb	r2, [r6, #0]
 800507a:	9200      	str	r2, [sp, #0]
 800507c:	4988      	ldr	r1, [pc, #544]	; (80052a0 <CDC_Itf_Receive+0x31c>)
 800507e:	4a89      	ldr	r2, [pc, #548]	; (80052a4 <CDC_Itf_Receive+0x320>)
 8005080:	4658      	mov	r0, fp
 8005082:	f006 fb8b 	bl	800b79c <siprintf>
 8005086:	4a88      	ldr	r2, [pc, #544]	; (80052a8 <CDC_Itf_Receive+0x324>)
 8005088:	4603      	mov	r3, r0
 800508a:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800508c:	4887      	ldr	r0, [pc, #540]	; (80052ac <CDC_Itf_Receive+0x328>)
 800508e:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8005092:	b2db      	uxtb	r3, r3
 8005094:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8005098:	f8c2 b208 	str.w	fp, [r2, #520]	; 0x208
USBD_CDC_TransmitPacket(&USBD_Device);//
 800509c:	f7ff ff47 	bl	8004f2e <USBD_CDC_TransmitPacket>
TempUserBuffer[0] = 0;        // Clear 1st Character to avoid code conflict
 80050a0:	2300      	movs	r3, #0
USB_Mode = 1;                 // USB VCP Mode in next USB connectivity
 80050a2:	4a83      	ldr	r2, [pc, #524]	; (80052b0 <CDC_Itf_Receive+0x32c>)
TempUserBuffer[0] = 0;        // Clear 1st Character to avoid code conflict
 80050a4:	7023      	strb	r3, [r4, #0]
USB_Mode = 1;                 // USB VCP Mode in next USB connectivity
 80050a6:	2301      	movs	r3, #1
 80050a8:	7013      	strb	r3, [r2, #0]
Logstart_Create=1;
 80050aa:	4a82      	ldr	r2, [pc, #520]	; (80052b4 <CDC_Itf_Receive+0x330>)
	*LP_Ram_Key_Address = 0;
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e011      	b.n	80050d4 <CDC_Itf_Receive+0x150>
TempUserBuffer[BuffLength] = Buf[i];
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	f812 6b01 	ldrb.w	r6, [r2], #1
 80050b6:	54e6      	strb	r6, [r4, r3]
BuffLength++;
 80050b8:	3301      	adds	r3, #1
 80050ba:	602b      	str	r3, [r5, #0]
 80050bc:	e76a      	b.n	8004f94 <CDC_Itf_Receive+0x10>
else if (TempUserBuffer[0] == 'o')   // Turn off All LED
 80050be:	2b6f      	cmp	r3, #111	; 0x6f
 80050c0:	f04f 0600 	mov.w	r6, #0
 80050c4:	d114      	bne.n	80050f0 <CDC_Itf_Receive+0x16c>
RED_LED_OFF();
 80050c6:	f7fc fa5f 	bl	8001588 <RED_LED_OFF>
GREEN_LED_OFF();
 80050ca:	f7fc fa62 	bl	8001592 <GREEN_LED_OFF>
BLUE_LED_OFF();
 80050ce:	f7fc fa65 	bl	800159c <BLUE_LED_OFF>
TempUserBuffer[0] = 0;         // Clear 1st Character to avoid code conflict
 80050d2:	7026      	strb	r6, [r4, #0]
for (i = 0; i < BuffLength; i++) // Buffer Empty
 80050d4:	2300      	movs	r3, #0
 80050d6:	682a      	ldr	r2, [r5, #0]
TempUserBuffer[i] = 0;//
 80050d8:	496e      	ldr	r1, [pc, #440]	; (8005294 <CDC_Itf_Receive+0x310>)
 80050da:	4618      	mov	r0, r3
for (i = 0; i < BuffLength; i++) // Buffer Empty
 80050dc:	4293      	cmp	r3, r2
 80050de:	f040 8154 	bne.w	800538a <CDC_Itf_Receive+0x406>
USBD_CDC_ReceivePacket(&USBD_Device);   // Ready for Next packet receive
 80050e2:	4872      	ldr	r0, [pc, #456]	; (80052ac <CDC_Itf_Receive+0x328>)
 80050e4:	f7ff ff3a 	bl	8004f5c <USBD_CDC_ReceivePacket>
}
 80050e8:	2000      	movs	r0, #0
 80050ea:	b007      	add	sp, #28
 80050ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
else if (TempUserBuffer[0] == 'B')   // Turn on BLUE LED
 80050f0:	2b42      	cmp	r3, #66	; 0x42
 80050f2:	d102      	bne.n	80050fa <CDC_Itf_Receive+0x176>
BLUE_LED_ONLY();
 80050f4:	f7fc fa7c 	bl	80015f0 <BLUE_LED_ONLY>
 80050f8:	e7eb      	b.n	80050d2 <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'b')  // Turn off BLUE LED
 80050fa:	2b62      	cmp	r3, #98	; 0x62
 80050fc:	d104      	bne.n	8005108 <CDC_Itf_Receive+0x184>
ALL_LED_OFF();
 80050fe:	f7fc fa53 	bl	80015a8 <ALL_LED_OFF>
	TempUserBuffer[0] = 0;       // Clear 1st Character to avoid code conflict
 8005102:	2300      	movs	r3, #0
 8005104:	7023      	strb	r3, [r4, #0]
 8005106:	e7e5      	b.n	80050d4 <CDC_Itf_Receive+0x150>
else if (TempUserBuffer[0] == 'E')  // Turn on Green LED
 8005108:	2b45      	cmp	r3, #69	; 0x45
 800510a:	d102      	bne.n	8005112 <CDC_Itf_Receive+0x18e>
GREEN_LED_ONLY();
 800510c:	f7fc fa58 	bl	80015c0 <GREEN_LED_ONLY>
 8005110:	e7df      	b.n	80050d2 <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'e')  // Turn off Green LED
 8005112:	2b65      	cmp	r3, #101	; 0x65
 8005114:	d0f3      	beq.n	80050fe <CDC_Itf_Receive+0x17a>
else if (TempUserBuffer[0] == 'F')  // Turn on RED LED
 8005116:	2b46      	cmp	r3, #70	; 0x46
 8005118:	d102      	bne.n	8005120 <CDC_Itf_Receive+0x19c>
RED_LED_ONLY();
 800511a:	f7fc fa5d 	bl	80015d8 <RED_LED_ONLY>
 800511e:	e7d8      	b.n	80050d2 <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'f')  // Turn off RED LED
 8005120:	2b66      	cmp	r3, #102	; 0x66
 8005122:	d0ec      	beq.n	80050fe <CDC_Itf_Receive+0x17a>
else if (TempUserBuffer[0] == 'l')  // Turn on White LED
 8005124:	2b6c      	cmp	r3, #108	; 0x6c
 8005126:	d102      	bne.n	800512e <CDC_Itf_Receive+0x1aa>
ALL_LED_ON();
 8005128:	f7fc fa86 	bl	8001638 <ALL_LED_ON>
 800512c:	e7e9      	b.n	8005102 <CDC_Itf_Receive+0x17e>
else if (TempUserBuffer[0] == 'r')   // Read Device RTC Timestamp
 800512e:	2b72      	cmp	r3, #114	; 0x72
 8005130:	f040 8086 	bne.w	8005240 <CDC_Itf_Receive+0x2bc>
	RTC_H = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8005134:	f7ff feda 	bl	8004eec <LL_RTC_TIME_GetHour.constprop.7>
 8005138:	4606      	mov	r6, r0
 800513a:	f7ff fed7 	bl	8004eec <LL_RTC_TIME_GetHour.constprop.7>
 800513e:	f3c6 1303 	ubfx	r3, r6, #4, #4
 8005142:	f8df a19c 	ldr.w	sl, [pc, #412]	; 80052e0 <CDC_Itf_Receive+0x35c>
	RTC_Mi = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8005146:	4e55      	ldr	r6, [pc, #340]	; (800529c <CDC_Itf_Receive+0x318>)
	RTC_H = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8005148:	f000 000f 	and.w	r0, r0, #15
 800514c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005150:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005154:	f88a 3000 	strb.w	r3, [sl]
	RTC_Mi = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8005158:	f7ff feae 	bl	8004eb8 <LL_RTC_TIME_GetMinute.constprop.6>
 800515c:	4607      	mov	r7, r0
 800515e:	f7ff feab 	bl	8004eb8 <LL_RTC_TIME_GetMinute.constprop.6>
 8005162:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8005166:	f000 000f 	and.w	r0, r0, #15
 800516a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800516e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005172:	7033      	strb	r3, [r6, #0]
	RTC_S =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8005174:	f7ff fe88 	bl	8004e88 <LL_RTC_TIME_GetSecond.constprop.5>
 8005178:	4680      	mov	r8, r0
 800517a:	f7ff fe85 	bl	8004e88 <LL_RTC_TIME_GetSecond.constprop.5>
 800517e:	f3c8 1303 	ubfx	r3, r8, #4, #4
 8005182:	4f45      	ldr	r7, [pc, #276]	; (8005298 <CDC_Itf_Receive+0x314>)
	RTC_Mo =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 8005184:	f8df 8160 	ldr.w	r8, [pc, #352]	; 80052e8 <CDC_Itf_Receive+0x364>
	RTC_S =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8005188:	f000 000f 	and.w	r0, r0, #15
 800518c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005190:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005194:	703b      	strb	r3, [r7, #0]
	RTC_Mo =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 8005196:	f7ff fe43 	bl	8004e20 <LL_RTC_DATE_GetMonth.constprop.3>
 800519a:	4681      	mov	r9, r0
 800519c:	f7ff fe40 	bl	8004e20 <LL_RTC_DATE_GetMonth.constprop.3>
 80051a0:	f3c9 1303 	ubfx	r3, r9, #4, #4
 80051a4:	f000 000f 	and.w	r0, r0, #15
 80051a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80051ac:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80051b0:	f888 3000 	strb.w	r3, [r8]
	RTC_D = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 80051b4:	f7ff fe1c 	bl	8004df0 <LL_RTC_DATE_GetDay.constprop.2>
 80051b8:	4683      	mov	fp, r0
 80051ba:	f7ff fe19 	bl	8004df0 <LL_RTC_DATE_GetDay.constprop.2>
 80051be:	f3cb 1303 	ubfx	r3, fp, #4, #4
 80051c2:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80052e4 <CDC_Itf_Receive+0x360>
 80051c6:	f000 000f 	and.w	r0, r0, #15
 80051ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80051ce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80051d2:	f889 3000 	strb.w	r3, [r9]
	RTC_Y =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 80051d6:	f7ff fe3d 	bl	8004e54 <LL_RTC_DATE_GetYear.constprop.4>
 80051da:	4683      	mov	fp, r0
 80051dc:	f7ff fe3a 	bl	8004e54 <LL_RTC_DATE_GetYear.constprop.4>
 80051e0:	f3cb 1303 	ubfx	r3, fp, #4, #4
 80051e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80051e8:	f000 000f 	and.w	r0, r0, #15
 80051ec:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80051f0:	4b31      	ldr	r3, [pc, #196]	; (80052b8 <CDC_Itf_Receive+0x334>)
		UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\nCurrent Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);
 80051f2:	4932      	ldr	r1, [pc, #200]	; (80052bc <CDC_Itf_Receive+0x338>)
	RTC_Y =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 80051f4:	b2c0      	uxtb	r0, r0
 80051f6:	7018      	strb	r0, [r3, #0]
	(void)RTC->DR;
 80051f8:	4b31      	ldr	r3, [pc, #196]	; (80052c0 <CDC_Itf_Receive+0x33c>)
 80051fa:	685a      	ldr	r2, [r3, #4]
	(void)RTC->TR;
 80051fc:	681b      	ldr	r3, [r3, #0]
		UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\nCurrent Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);
 80051fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005202:	9004      	str	r0, [sp, #16]
 8005204:	f899 2000 	ldrb.w	r2, [r9]
 8005208:	9203      	str	r2, [sp, #12]
 800520a:	f898 2000 	ldrb.w	r2, [r8]
 800520e:	9202      	str	r2, [sp, #8]
 8005210:	783a      	ldrb	r2, [r7, #0]
 8005212:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80052c4 <CDC_Itf_Receive+0x340>
 8005216:	9201      	str	r2, [sp, #4]
 8005218:	7832      	ldrb	r2, [r6, #0]
 800521a:	9200      	str	r2, [sp, #0]
 800521c:	4650      	mov	r0, sl
 800521e:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <CDC_Itf_Receive+0x320>)
 8005220:	f006 fabc 	bl	800b79c <siprintf>
 8005224:	4a20      	ldr	r2, [pc, #128]	; (80052a8 <CDC_Itf_Receive+0x324>)
 8005226:	4603      	mov	r3, r0
 8005228:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800522a:	4820      	ldr	r0, [pc, #128]	; (80052ac <CDC_Itf_Receive+0x328>)
 800522c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8005230:	b2db      	uxtb	r3, r3
  hcdc->TxBuffer = pbuff;
 8005232:	f8c2 a208 	str.w	sl, [r2, #520]	; 0x208
  hcdc->TxLength = length;
 8005236:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
	USBD_CDC_TransmitPacket(&USBD_Device);//
 800523a:	f7ff fe78 	bl	8004f2e <USBD_CDC_TransmitPacket>
 800523e:	e760      	b.n	8005102 <CDC_Itf_Receive+0x17e>
else if (TempUserBuffer[0] == 'U')    // USB MSC in next USB connectivity
 8005240:	2b55      	cmp	r3, #85	; 0x55
 8005242:	d153      	bne.n	80052ec <CDC_Itf_Receive+0x368>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n Return to USB MSC Mode after USB reconnect..\r\n\r\n",software_vr);
 8005244:	4e1f      	ldr	r6, [pc, #124]	; (80052c4 <CDC_Itf_Receive+0x340>)
 8005246:	4920      	ldr	r1, [pc, #128]	; (80052c8 <CDC_Itf_Receive+0x344>)
 8005248:	4a16      	ldr	r2, [pc, #88]	; (80052a4 <CDC_Itf_Receive+0x320>)
 800524a:	4630      	mov	r0, r6
 800524c:	f006 faa6 	bl	800b79c <siprintf>
 8005250:	4a15      	ldr	r2, [pc, #84]	; (80052a8 <CDC_Itf_Receive+0x324>)
 8005252:	4603      	mov	r3, r0
 8005254:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005256:	4815      	ldr	r0, [pc, #84]	; (80052ac <CDC_Itf_Receive+0x328>)
 8005258:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800525c:	b2db      	uxtb	r3, r3
 800525e:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8005262:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);//
 8005266:	f7ff fe62 	bl	8004f2e <USBD_CDC_TransmitPacket>
	USB_Mode = 1;                    // USB MSC Mode
 800526a:	4911      	ldr	r1, [pc, #68]	; (80052b0 <CDC_Itf_Receive+0x32c>)
 800526c:	2201      	movs	r2, #1
 800526e:	700a      	strb	r2, [r1, #0]
	Logstart_Delete=1;
 8005270:	4916      	ldr	r1, [pc, #88]	; (80052cc <CDC_Itf_Receive+0x348>)
 8005272:	600a      	str	r2, [r1, #0]
	EnterReset_Create=0;
 8005274:	4916      	ldr	r1, [pc, #88]	; (80052d0 <CDC_Itf_Receive+0x34c>)
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 8005276:	2300      	movs	r3, #0
	EnterReset_Create=0;
 8005278:	600b      	str	r3, [r1, #0]
	EnterDFU_Create=0;
 800527a:	4916      	ldr	r1, [pc, #88]	; (80052d4 <CDC_Itf_Receive+0x350>)
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 800527c:	7023      	strb	r3, [r4, #0]
	EnterDFU_Create=0;
 800527e:	600b      	str	r3, [r1, #0]
	Logstart_Create=1;
 8005280:	490c      	ldr	r1, [pc, #48]	; (80052b4 <CDC_Itf_Receive+0x330>)
 8005282:	600a      	str	r2, [r1, #0]
	 VCP_Bypass=1;
 8005284:	4914      	ldr	r1, [pc, #80]	; (80052d8 <CDC_Itf_Receive+0x354>)
 8005286:	700a      	strb	r2, [r1, #0]
	 Data_log_Start_Resume = 0;
 8005288:	4a14      	ldr	r2, [pc, #80]	; (80052dc <CDC_Itf_Receive+0x358>)
 800528a:	7013      	strb	r3, [r2, #0]
 800528c:	e722      	b.n	80050d4 <CDC_Itf_Receive+0x150>
 800528e:	bf00      	nop
 8005290:	200094a0 	.word	0x200094a0
 8005294:	2000a9b8 	.word	0x2000a9b8
 8005298:	2000a970 	.word	0x2000a970
 800529c:	2000a971 	.word	0x2000a971
 80052a0:	0800da36 	.word	0x0800da36
 80052a4:	0002c314 	.word	0x0002c314
 80052a8:	2000a972 	.word	0x2000a972
 80052ac:	20008700 	.word	0x20008700
 80052b0:	20008fc4 	.word	0x20008fc4
 80052b4:	20009514 	.word	0x20009514
 80052b8:	2000957c 	.word	0x2000957c
 80052bc:	0800da72 	.word	0x0800da72
 80052c0:	40002800 	.word	0x40002800
 80052c4:	20009d88 	.word	0x20009d88
 80052c8:	0800dab7 	.word	0x0800dab7
 80052cc:	20009498 	.word	0x20009498
 80052d0:	20009d84 	.word	0x20009d84
 80052d4:	2000a974 	.word	0x2000a974
 80052d8:	20008aa1 	.word	0x20008aa1
 80052dc:	200086e8 	.word	0x200086e8
 80052e0:	2000949c 	.word	0x2000949c
 80052e4:	2000a978 	.word	0x2000a978
 80052e8:	20009494 	.word	0x20009494
else if (TempUserBuffer[0] == 'Z')    // Reset Device
 80052ec:	2b5a      	cmp	r3, #90	; 0x5a
 80052ee:	d118      	bne.n	8005322 <CDC_Itf_Receive+0x39e>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to reset AIM device..\r\n",software_vr);
 80052f0:	4e27      	ldr	r6, [pc, #156]	; (8005390 <CDC_Itf_Receive+0x40c>)
 80052f2:	4a28      	ldr	r2, [pc, #160]	; (8005394 <CDC_Itf_Receive+0x410>)
 80052f4:	4928      	ldr	r1, [pc, #160]	; (8005398 <CDC_Itf_Receive+0x414>)
 80052f6:	4630      	mov	r0, r6
 80052f8:	f006 fa50 	bl	800b79c <siprintf>
 80052fc:	4a27      	ldr	r2, [pc, #156]	; (800539c <CDC_Itf_Receive+0x418>)
 80052fe:	4603      	mov	r3, r0
 8005300:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005302:	4827      	ldr	r0, [pc, #156]	; (80053a0 <CDC_Itf_Receive+0x41c>)
 8005304:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8005308:	b2db      	uxtb	r3, r3
 800530a:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 800530e:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 8005312:	f7ff fe0c 	bl	8004f2e <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 8005316:	2300      	movs	r3, #0
 8005318:	7023      	strb	r3, [r4, #0]
	EnterReset_Create=1;
 800531a:	4b22      	ldr	r3, [pc, #136]	; (80053a4 <CDC_Itf_Receive+0x420>)
 800531c:	2201      	movs	r2, #1
	EnterDFU_Create=1;
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	e6d8      	b.n	80050d4 <CDC_Itf_Receive+0x150>
else if (TempUserBuffer[0] == 'X')     // Enter DFU mode for firmware Update
 8005322:	2b58      	cmp	r3, #88	; 0x58
 8005324:	d117      	bne.n	8005356 <CDC_Itf_Receive+0x3d2>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to enter Firmware update Mode..\r\n",software_vr);
 8005326:	4e1a      	ldr	r6, [pc, #104]	; (8005390 <CDC_Itf_Receive+0x40c>)
 8005328:	4a1a      	ldr	r2, [pc, #104]	; (8005394 <CDC_Itf_Receive+0x410>)
 800532a:	491f      	ldr	r1, [pc, #124]	; (80053a8 <CDC_Itf_Receive+0x424>)
 800532c:	4630      	mov	r0, r6
 800532e:	f006 fa35 	bl	800b79c <siprintf>
 8005332:	4a1a      	ldr	r2, [pc, #104]	; (800539c <CDC_Itf_Receive+0x418>)
 8005334:	4603      	mov	r3, r0
 8005336:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005338:	4819      	ldr	r0, [pc, #100]	; (80053a0 <CDC_Itf_Receive+0x41c>)
 800533a:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800533e:	b2db      	uxtb	r3, r3
 8005340:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8005344:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 8005348:	f7ff fdf1 	bl	8004f2e <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 800534c:	2300      	movs	r3, #0
 800534e:	7023      	strb	r3, [r4, #0]
	EnterDFU_Create=1;
 8005350:	2201      	movs	r2, #1
 8005352:	4b16      	ldr	r3, [pc, #88]	; (80053ac <CDC_Itf_Receive+0x428>)
 8005354:	e7e3      	b.n	800531e <CDC_Itf_Receive+0x39a>
else if (TempUserBuffer[0] == 'Y')     // Enter DFU mode for firmware Update
 8005356:	2b59      	cmp	r3, #89	; 0x59
 8005358:	f47f aebc 	bne.w	80050d4 <CDC_Itf_Receive+0x150>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n LP_RAM reset..\r\n",software_vr);
 800535c:	4e0c      	ldr	r6, [pc, #48]	; (8005390 <CDC_Itf_Receive+0x40c>)
 800535e:	4a0d      	ldr	r2, [pc, #52]	; (8005394 <CDC_Itf_Receive+0x410>)
 8005360:	4913      	ldr	r1, [pc, #76]	; (80053b0 <CDC_Itf_Receive+0x42c>)
 8005362:	4630      	mov	r0, r6
 8005364:	f006 fa1a 	bl	800b79c <siprintf>
 8005368:	4a0c      	ldr	r2, [pc, #48]	; (800539c <CDC_Itf_Receive+0x418>)
 800536a:	4603      	mov	r3, r0
 800536c:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800536e:	480c      	ldr	r0, [pc, #48]	; (80053a0 <CDC_Itf_Receive+0x41c>)
 8005370:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8005374:	b2db      	uxtb	r3, r3
 8005376:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 800537a:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 800537e:	f7ff fdd6 	bl	8004f2e <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 8005382:	2300      	movs	r3, #0
 8005384:	7023      	strb	r3, [r4, #0]
	*LP_Ram_Key_Address = 0;
 8005386:	4a0b      	ldr	r2, [pc, #44]	; (80053b4 <CDC_Itf_Receive+0x430>)
 8005388:	e690      	b.n	80050ac <CDC_Itf_Receive+0x128>
TempUserBuffer[i] = 0;//
 800538a:	5458      	strb	r0, [r3, r1]
for (i = 0; i < BuffLength; i++) // Buffer Empty
 800538c:	3301      	adds	r3, #1
 800538e:	e6a5      	b.n	80050dc <CDC_Itf_Receive+0x158>
 8005390:	20009d88 	.word	0x20009d88
 8005394:	0002c314 	.word	0x0002c314
 8005398:	0800dafc 	.word	0x0800dafc
 800539c:	2000a972 	.word	0x2000a972
 80053a0:	20008700 	.word	0x20008700
 80053a4:	20009d84 	.word	0x20009d84
 80053a8:	0800db3a 	.word	0x0800db3a
 80053ac:	2000a974 	.word	0x2000a974
 80053b0:	0800db82 	.word	0x0800db82
 80053b4:	20017cf0 	.word	0x20017cf0

080053b8 <Reboot_Handler>:
    .section	.text.Reboot_Handler
	//.weak	Reboot_Handler
	.type	Reboot_Handler, %function
Reboot_Handler:

               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 80053b8:	4805      	ldr	r0, [pc, #20]	; (80053d0 <Reboot_Handler+0x18>)
                LDR     R1, =0x00000001 // ENABLE SYSCFG CLOCK
 80053ba:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 80053bc:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 80053be:	4805      	ldr	r0, [pc, #20]	; (80053d4 <Reboot_Handler+0x1c>)
                LDR     R1, =0x00000001 // MAP ROM AT ZERO
 80053c0:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 80053c2:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 80053c4:	4804      	ldr	r0, [pc, #16]	; (80053d8 <Reboot_Handler+0x20>)
                LDR     SP,[R0, #0]     // SP @ +0
 80053c6:	f8d0 d000 	ldr.w	sp, [r0]
                LDR     R0,[R0, #4]    //  PC @ +4
 80053ca:	6840      	ldr	r0, [r0, #4]
                BX      R0
 80053cc:	4700      	bx	r0
 80053ce:	0000      	.short	0x0000
               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 80053d0:	40021060 	.word	0x40021060
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 80053d4:	40010000 	.word	0x40010000
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 80053d8:	1fff0000 	.word	0x1fff0000

080053dc <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 80053dc:	4811      	ldr	r0, [pc, #68]	; (8005424 <LoopForever+0x4>)
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 80053de:	4912      	ldr	r1, [pc, #72]	; (8005428 <LoopForever+0x8>)
                LDR     R2, [R0, #0]
 80053e0:	6802      	ldr	r2, [r0, #0]
                STR     R0, [R0, #0]     // Invalidate Bootloader_Key_Value
 80053e2:	6000      	str	r0, [r0, #0]
                // zero data at Bootloader_Ram_Key_Address to avoid looping in DFU Mode

                CMP     R2, R1
 80053e4:	428a      	cmp	r2, r1
                BEQ     Reboot_Handler    // Jump to DfuModeEntry Lable if Bootloader_Key_Value matches
 80053e6:	f43f afe7 	beq.w	80053b8 <Reboot_Handler>

                // Conitnue without entering DFU Mode


  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80053ea:	f8df d040 	ldr.w	sp, [pc, #64]	; 800542c <LoopForever+0xc>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80053ee:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80053f0:	e003      	b.n	80053fa <LoopCopyDataInit>

080053f2 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80053f2:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <LoopForever+0x10>)
	ldr	r3, [r3, r1]
 80053f4:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80053f6:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80053f8:	3104      	adds	r1, #4

080053fa <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80053fa:	480e      	ldr	r0, [pc, #56]	; (8005434 <LoopForever+0x14>)
	ldr	r3, =_edata
 80053fc:	4b0e      	ldr	r3, [pc, #56]	; (8005438 <LoopForever+0x18>)
	adds	r2, r0, r1
 80053fe:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005400:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005402:	d3f6      	bcc.n	80053f2 <CopyDataInit>
	ldr	r2, =_sbss
 8005404:	4a0d      	ldr	r2, [pc, #52]	; (800543c <LoopForever+0x1c>)
	b	LoopFillZerobss
 8005406:	e002      	b.n	800540e <LoopFillZerobss>

08005408 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005408:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800540a:	f842 3b04 	str.w	r3, [r2], #4

0800540e <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800540e:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <LoopForever+0x20>)
	cmp	r2, r3
 8005410:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005412:	d3f9      	bcc.n	8005408 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005414:	f7fe ffda 	bl	80043cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005418:	f006 f8bc 	bl	800b594 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800541c:	f7fc f910 	bl	8001640 <main>

08005420 <LoopForever>:

LoopForever:
    b LoopForever
 8005420:	e7fe      	b.n	8005420 <LoopForever>
 8005422:	0000      	.short	0x0000
                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 8005424:	20017ff0 	.word	0x20017ff0
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 8005428:	deadbeef 	.word	0xdeadbeef
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800542c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005430:	0800e018 	.word	0x0800e018
	ldr	r0, =_sdata
 8005434:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005438:	2000047c 	.word	0x2000047c
	ldr	r2, =_sbss
 800543c:	20000480 	.word	0x20000480
	ldr	r3, = _ebss
 8005440:	2000ada8 	.word	0x2000ada8

08005444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005444:	e7fe      	b.n	8005444 <ADC1_2_IRQHandler>
	...

08005448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005448:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800544a:	4b08      	ldr	r3, [pc, #32]	; (800546c <HAL_InitTick+0x24>)
{
 800544c:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005454:	fbb0 f0f3 	udiv	r0, r0, r3
 8005458:	f000 f892 	bl	8005580 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800545c:	2200      	movs	r2, #0
 800545e:	4621      	mov	r1, r4
 8005460:	f04f 30ff 	mov.w	r0, #4294967295
 8005464:	f000 f84c 	bl	8005500 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8005468:	2000      	movs	r0, #0
 800546a:	bd10      	pop	{r4, pc}
 800546c:	20000014 	.word	0x20000014

08005470 <HAL_Init>:
{
 8005470:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005472:	2003      	movs	r0, #3
 8005474:	f000 f832 	bl	80054dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8005478:	2000      	movs	r0, #0
 800547a:	f7ff ffe5 	bl	8005448 <HAL_InitTick>
  HAL_MspInit();
 800547e:	f7fe ff07 	bl	8004290 <HAL_MspInit>
}
 8005482:	2000      	movs	r0, #0
 8005484:	bd08      	pop	{r3, pc}
	...

08005488 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8005488:	4a02      	ldr	r2, [pc, #8]	; (8005494 <HAL_IncTick+0xc>)
 800548a:	6813      	ldr	r3, [r2, #0]
 800548c:	3301      	adds	r3, #1
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	2000ada0 	.word	0x2000ada0

08005498 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005498:	4b01      	ldr	r3, [pc, #4]	; (80054a0 <HAL_GetTick+0x8>)
 800549a:	6818      	ldr	r0, [r3, #0]
}
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	2000ada0 	.word	0x2000ada0

080054a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054a4:	b538      	push	{r3, r4, r5, lr}
 80054a6:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80054a8:	f7ff fff6 	bl	8005498 <HAL_GetTick>
 80054ac:	4605      	mov	r5, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80054ae:	f7ff fff3 	bl	8005498 <HAL_GetTick>
 80054b2:	1b40      	subs	r0, r0, r5
 80054b4:	42a0      	cmp	r0, r4
 80054b6:	d3fa      	bcc.n	80054ae <HAL_Delay+0xa>
  {
  }
}
 80054b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080054bc <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80054bc:	4a02      	ldr	r2, [pc, #8]	; (80054c8 <HAL_SuspendTick+0xc>)
 80054be:	6813      	ldr	r3, [r2, #0]
 80054c0:	f023 0302 	bic.w	r3, r3, #2
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	4770      	bx	lr
 80054c8:	e000e010 	.word	0xe000e010

080054cc <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80054cc:	4a02      	ldr	r2, [pc, #8]	; (80054d8 <HAL_ResumeTick+0xc>)
 80054ce:	6813      	ldr	r3, [r2, #0]
 80054d0:	f043 0302 	orr.w	r3, r3, #2
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	4770      	bx	lr
 80054d8:	e000e010 	.word	0xe000e010

080054dc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054dc:	4a07      	ldr	r2, [pc, #28]	; (80054fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80054de:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80054e4:	041b      	lsls	r3, r3, #16
 80054e6:	0c1b      	lsrs	r3, r3, #16
 80054e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80054ec:	0200      	lsls	r0, r0, #8
 80054ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80054f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80054f8:	60d3      	str	r3, [r2, #12]
 80054fa:	4770      	bx	lr
 80054fc:	e000ed00 	.word	0xe000ed00

08005500 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005500:	4b17      	ldr	r3, [pc, #92]	; (8005560 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005502:	b530      	push	{r4, r5, lr}
 8005504:	68dc      	ldr	r4, [r3, #12]
 8005506:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800550a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800550e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005510:	2b04      	cmp	r3, #4
 8005512:	bf28      	it	cs
 8005514:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005516:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005518:	f04f 0501 	mov.w	r5, #1
 800551c:	fa05 f303 	lsl.w	r3, r5, r3
 8005520:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005524:	bf8c      	ite	hi
 8005526:	3c03      	subhi	r4, #3
 8005528:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800552a:	4019      	ands	r1, r3
 800552c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800552e:	fa05 f404 	lsl.w	r4, r5, r4
 8005532:	3c01      	subs	r4, #1
 8005534:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8005536:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005538:	ea42 0201 	orr.w	r2, r2, r1
 800553c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005540:	bfaf      	iteee	ge
 8005542:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005546:	f000 000f 	andlt.w	r0, r0, #15
 800554a:	4b06      	ldrlt	r3, [pc, #24]	; (8005564 <HAL_NVIC_SetPriority+0x64>)
 800554c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800554e:	bfa5      	ittet	ge
 8005550:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8005554:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005556:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005558:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800555c:	bd30      	pop	{r4, r5, pc}
 800555e:	bf00      	nop
 8005560:	e000ed00 	.word	0xe000ed00
 8005564:	e000ed14 	.word	0xe000ed14

08005568 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005568:	0942      	lsrs	r2, r0, #5
 800556a:	2301      	movs	r3, #1
 800556c:	f000 001f 	and.w	r0, r0, #31
 8005570:	fa03 f000 	lsl.w	r0, r3, r0
 8005574:	4b01      	ldr	r3, [pc, #4]	; (800557c <HAL_NVIC_EnableIRQ+0x14>)
 8005576:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800557a:	4770      	bx	lr
 800557c:	e000e100 	.word	0xe000e100

08005580 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005580:	3801      	subs	r0, #1
 8005582:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005586:	d20a      	bcs.n	800559e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005588:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800558a:	4a07      	ldr	r2, [pc, #28]	; (80055a8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800558c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800558e:	21f0      	movs	r1, #240	; 0xf0
 8005590:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005594:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005596:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005598:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800559e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	e000e010 	.word	0xe000e010
 80055a8:	e000ed00 	.word	0xe000ed00

080055ac <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80055ac:	4770      	bx	lr

080055ae <HAL_SYSTICK_IRQHandler>:
{
 80055ae:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80055b0:	f7ff fffc 	bl	80055ac <HAL_SYSTICK_Callback>
 80055b4:	bd08      	pop	{r3, pc}
	...

080055b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055b8:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80055ba:	2800      	cmp	r0, #0
 80055bc:	d05b      	beq.n	8005676 <HAL_DMA_Init+0xbe>
  {
    assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
  }
  
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80055be:	6801      	ldr	r1, [r0, #0]
 80055c0:	4b2e      	ldr	r3, [pc, #184]	; (800567c <HAL_DMA_Init+0xc4>)
 80055c2:	4299      	cmp	r1, r3
 80055c4:	f04f 0414 	mov.w	r4, #20
 80055c8:	d841      	bhi.n	800564e <HAL_DMA_Init+0x96>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80055ca:	4a2d      	ldr	r2, [pc, #180]	; (8005680 <HAL_DMA_Init+0xc8>)
 80055cc:	440a      	add	r2, r1
 80055ce:	fbb2 f2f4 	udiv	r2, r2, r4
 80055d2:	0092      	lsls	r2, r2, #2
 80055d4:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80055d6:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 80055da:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055dc:	2302      	movs	r3, #2
 80055de:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80055e2:	6884      	ldr	r4, [r0, #8]
 80055e4:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055e6:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 80055e8:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80055ea:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055ec:	432b      	orrs	r3, r5
 80055ee:	6945      	ldr	r5, [r0, #20]
 80055f0:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055f2:	6985      	ldr	r5, [r0, #24]
 80055f4:	432b      	orrs	r3, r5
 80055f6:	69c5      	ldr	r5, [r0, #28]
 80055f8:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80055fa:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80055fc:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8005600:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8005604:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8005606:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005608:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 800560c:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800560e:	d011      	beq.n	8005634 <HAL_DMA_Init+0x7c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005610:	4b1c      	ldr	r3, [pc, #112]	; (8005684 <HAL_DMA_Init+0xcc>)
 8005612:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005614:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005616:	429a      	cmp	r2, r3
 8005618:	f04f 030f 	mov.w	r3, #15
 800561c:	d11f      	bne.n	800565e <HAL_DMA_Init+0xa6>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 800561e:	491a      	ldr	r1, [pc, #104]	; (8005688 <HAL_DMA_Init+0xd0>)
 8005620:	680a      	ldr	r2, [r1, #0]
 8005622:	40a3      	lsls	r3, r4
 8005624:	ea22 0303 	bic.w	r3, r2, r3
 8005628:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 800562a:	6842      	ldr	r2, [r0, #4]
 800562c:	680b      	ldr	r3, [r1, #0]
 800562e:	40a2      	lsls	r2, r4
 8005630:	431a      	orrs	r2, r3
 8005632:	600a      	str	r2, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
    }
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005634:	2300      	movs	r3, #0

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005636:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005638:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 800563a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800563c:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800563e:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8005640:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State  = HAL_DMA_STATE_READY;
 8005642:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005646:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  return HAL_OK;
 800564a:	4618      	mov	r0, r3
 800564c:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800564e:	4b0f      	ldr	r3, [pc, #60]	; (800568c <HAL_DMA_Init+0xd4>)
 8005650:	440b      	add	r3, r1
 8005652:	fbb3 f3f4 	udiv	r3, r3, r4
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800565a:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <HAL_DMA_Init+0xd8>)
 800565c:	e7bd      	b.n	80055da <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 800565e:	490d      	ldr	r1, [pc, #52]	; (8005694 <HAL_DMA_Init+0xdc>)
 8005660:	680a      	ldr	r2, [r1, #0]
 8005662:	40a3      	lsls	r3, r4
 8005664:	ea22 0303 	bic.w	r3, r2, r3
 8005668:	600b      	str	r3, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 800566a:	6843      	ldr	r3, [r0, #4]
 800566c:	680a      	ldr	r2, [r1, #0]
 800566e:	40a3      	lsls	r3, r4
 8005670:	4313      	orrs	r3, r2
 8005672:	600b      	str	r3, [r1, #0]
 8005674:	e7de      	b.n	8005634 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8005676:	2001      	movs	r0, #1
}
 8005678:	bd30      	pop	{r4, r5, pc}
 800567a:	bf00      	nop
 800567c:	40020407 	.word	0x40020407
 8005680:	bffdfff8 	.word	0xbffdfff8
 8005684:	40020000 	.word	0x40020000
 8005688:	400200a8 	.word	0x400200a8
 800568c:	bffdfbf8 	.word	0xbffdfbf8
 8005690:	40020400 	.word	0x40020400
 8005694:	400204a8 	.word	0x400204a8

08005698 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005698:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800569a:	2800      	cmp	r0, #0
 800569c:	d034      	beq.n	8005708 <HAL_DMA_DeInit+0x70>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800569e:	6801      	ldr	r1, [r0, #0]
 80056a0:	680b      	ldr	r3, [r1, #0]
 80056a2:	f023 0301 	bic.w	r3, r3, #1
 80056a6:	600b      	str	r3, [r1, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	600b      	str	r3, [r1, #0]

  /* Calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80056ac:	4b17      	ldr	r3, [pc, #92]	; (800570c <HAL_DMA_DeInit+0x74>)
 80056ae:	4299      	cmp	r1, r3
 80056b0:	f04f 0414 	mov.w	r4, #20
 80056b4:	d820      	bhi.n	80056f8 <HAL_DMA_DeInit+0x60>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80056b6:	4a16      	ldr	r2, [pc, #88]	; (8005710 <HAL_DMA_DeInit+0x78>)
 80056b8:	440a      	add	r2, r1
 80056ba:	fbb2 f2f4 	udiv	r2, r2, r4
 80056be:	0092      	lsls	r2, r2, #2
 80056c0:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80056c2:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 80056c6:	6403      	str	r3, [r0, #64]	; 0x40
  }
  

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80056c8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80056ca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80056cc:	2301      	movs	r3, #1
 80056ce:	408b      	lsls	r3, r1
 80056d0:	6053      	str	r3, [r2, #4]

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 80056d2:	4b10      	ldr	r3, [pc, #64]	; (8005714 <HAL_DMA_DeInit+0x7c>)
 80056d4:	429a      	cmp	r2, r3
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 80056d6:	bf0c      	ite	eq
 80056d8:	4c0f      	ldreq	r4, [pc, #60]	; (8005718 <HAL_DMA_DeInit+0x80>)
  }
  else  
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 80056da:	4c10      	ldrne	r4, [pc, #64]	; (800571c <HAL_DMA_DeInit+0x84>)
 80056dc:	230f      	movs	r3, #15
 80056de:	6822      	ldr	r2, [r4, #0]
 80056e0:	408b      	lsls	r3, r1
 80056e2:	ea22 0303 	bic.w	r3, r2, r3
 80056e6:	6023      	str	r3, [r4, #0]
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056e8:	2300      	movs	r3, #0
 80056ea:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80056ec:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_RESET;
 80056f0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

  return HAL_OK;
 80056f4:	4618      	mov	r0, r3
 80056f6:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80056f8:	4b09      	ldr	r3, [pc, #36]	; (8005720 <HAL_DMA_DeInit+0x88>)
 80056fa:	440b      	add	r3, r1
 80056fc:	fbb3 f3f4 	udiv	r3, r3, r4
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005704:	4b07      	ldr	r3, [pc, #28]	; (8005724 <HAL_DMA_DeInit+0x8c>)
 8005706:	e7de      	b.n	80056c6 <HAL_DMA_DeInit+0x2e>
    return HAL_ERROR;
 8005708:	2001      	movs	r0, #1
}
 800570a:	bd10      	pop	{r4, pc}
 800570c:	40020407 	.word	0x40020407
 8005710:	bffdfff8 	.word	0xbffdfff8
 8005714:	40020000 	.word	0x40020000
 8005718:	400200a8 	.word	0x400200a8
 800571c:	400204a8 	.word	0x400204a8
 8005720:	bffdfbf8 	.word	0xbffdfbf8
 8005724:	40020400 	.word	0x40020400

08005728 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005728:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800572a:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800572e:	2c01      	cmp	r4, #1
 8005730:	d036      	beq.n	80057a0 <HAL_DMA_Start_IT+0x78>
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005732:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8005736:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8005738:	b2ed      	uxtb	r5, r5
 800573a:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 800573c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8005740:	f04f 0600 	mov.w	r6, #0
 8005744:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8005748:	d128      	bne.n	800579c <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800574a:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800574e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005750:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8005752:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005754:	6c47      	ldr	r7, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8005756:	f026 0601 	bic.w	r6, r6, #1
 800575a:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800575c:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800575e:	40bd      	lsls	r5, r7
 8005760:	6075      	str	r5, [r6, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005762:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005764:	6883      	ldr	r3, [r0, #8]
 8005766:	6805      	ldr	r5, [r0, #0]
 8005768:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 800576a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800576c:	bf0b      	itete	eq
 800576e:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8005770:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005772:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8005774:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8005776:	b14b      	cbz	r3, 800578c <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800577e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	f043 0301 	orr.w	r3, r3, #1
 8005786:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005788:	2000      	movs	r0, #0
 800578a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	f023 0304 	bic.w	r3, r3, #4
 8005792:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	f043 030a 	orr.w	r3, r3, #10
 800579a:	e7f0      	b.n	800577e <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 800579c:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 80057a0:	2002      	movs	r0, #2
}
 80057a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057a4 <HAL_DMA_Abort>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80057a4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d003      	beq.n	80057b4 <HAL_DMA_Abort+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057ac:	2304      	movs	r3, #4
 80057ae:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80057b0:	2001      	movs	r0, #1
 80057b2:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057b4:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80057b6:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	f022 020e 	bic.w	r2, r2, #14
 80057be:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	f022 0201 	bic.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80057c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80057ca:	2201      	movs	r2, #1
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);      
 80057d2:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 80057d4:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);      
 80057d8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 80057dc:	4618      	mov	r0, r3
}
 80057de:	4770      	bx	lr

080057e0 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80057e0:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80057e2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 80057e4:	6803      	ldr	r3, [r0, #0]
{
 80057e6:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80057e8:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80057ea:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80057ec:	2404      	movs	r4, #4
 80057ee:	4094      	lsls	r4, r2
 80057f0:	4226      	tst	r6, r4
 80057f2:	d00e      	beq.n	8005812 <HAL_DMA_IRQHandler+0x32>
 80057f4:	f015 0f04 	tst.w	r5, #4
 80057f8:	d00b      	beq.n	8005812 <HAL_DMA_IRQHandler+0x32>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057fe:	bf5e      	ittt	pl
 8005800:	681a      	ldrpl	r2, [r3, #0]
 8005802:	f022 0204 	bicpl.w	r2, r2, #4
 8005806:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8005808:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 800580a:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 800580c:	b373      	cbz	r3, 800586c <HAL_DMA_IRQHandler+0x8c>
}
 800580e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005810:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005812:	2402      	movs	r4, #2
 8005814:	4094      	lsls	r4, r2
 8005816:	4226      	tst	r6, r4
 8005818:	d012      	beq.n	8005840 <HAL_DMA_IRQHandler+0x60>
 800581a:	f015 0f02 	tst.w	r5, #2
 800581e:	d00f      	beq.n	8005840 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	0695      	lsls	r5, r2, #26
 8005824:	d406      	bmi.n	8005834 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	f022 020a 	bic.w	r2, r2, #10
 800582c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800582e:	2301      	movs	r3, #1
 8005830:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8005834:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 8005836:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8005838:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 800583c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800583e:	e7e5      	b.n	800580c <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005840:	2408      	movs	r4, #8
 8005842:	4094      	lsls	r4, r2
 8005844:	4234      	tst	r4, r6
 8005846:	d011      	beq.n	800586c <HAL_DMA_IRQHandler+0x8c>
 8005848:	072c      	lsls	r4, r5, #28
 800584a:	d50f      	bpl.n	800586c <HAL_DMA_IRQHandler+0x8c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800584c:	681c      	ldr	r4, [r3, #0]
 800584e:	f024 040e 	bic.w	r4, r4, #14
 8005852:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005854:	2301      	movs	r3, #1
 8005856:	fa03 f202 	lsl.w	r2, r3, r2
 800585a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800585c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800585e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8005862:	2300      	movs	r3, #0
 8005864:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8005868:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800586a:	e7cf      	b.n	800580c <HAL_DMA_IRQHandler+0x2c>
}
 800586c:	bc70      	pop	{r4, r5, r6}
 800586e:	4770      	bx	lr

08005870 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005874:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8005876:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005878:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005a24 <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800587c:	4c67      	ldr	r4, [pc, #412]	; (8005a1c <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 800587e:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 8005880:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8005882:	9a01      	ldr	r2, [sp, #4]
 8005884:	40da      	lsrs	r2, r3
 8005886:	d102      	bne.n	800588e <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8005888:	b005      	add	sp, #20
 800588a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800588e:	2601      	movs	r6, #1
    if(iocurrent)
 8005890:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005892:	409e      	lsls	r6, r3
    if(iocurrent)
 8005894:	ea12 0e06 	ands.w	lr, r2, r6
 8005898:	f000 80b1 	beq.w	80059fe <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800589c:	684a      	ldr	r2, [r1, #4]
 800589e:	f022 0710 	bic.w	r7, r2, #16
 80058a2:	2f02      	cmp	r7, #2
 80058a4:	d116      	bne.n	80058d4 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 80058a6:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80058aa:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80058ae:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80058b2:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80058b6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80058ba:	f04f 0c0f 	mov.w	ip, #15
 80058be:	fa0c fc0a 	lsl.w	ip, ip, sl
 80058c2:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80058c6:	690d      	ldr	r5, [r1, #16]
 80058c8:	fa05 f50a 	lsl.w	r5, r5, sl
 80058cc:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80058d0:	f8c9 5020 	str.w	r5, [r9, #32]
 80058d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80058d8:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80058da:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80058de:	fa05 f50c 	lsl.w	r5, r5, ip
 80058e2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80058e4:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80058e8:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80058ec:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058f0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80058f2:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058f6:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80058f8:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058fc:	d811      	bhi.n	8005922 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80058fe:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8005900:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8005904:	68cf      	ldr	r7, [r1, #12]
 8005906:	fa07 f70c 	lsl.w	r7, r7, ip
 800590a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 800590e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005910:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005912:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005916:	f3c2 1700 	ubfx	r7, r2, #4, #1
 800591a:	409f      	lsls	r7, r3
 800591c:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8005920:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005922:	f1ba 0f03 	cmp.w	sl, #3
 8005926:	d107      	bne.n	8005938 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8005928:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800592a:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800592e:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8005932:	409f      	lsls	r7, r3
 8005934:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8005936:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8005938:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 800593a:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800593c:	688e      	ldr	r6, [r1, #8]
 800593e:	fa06 f60c 	lsl.w	r6, r6, ip
 8005942:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8005944:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005946:	00d5      	lsls	r5, r2, #3
 8005948:	d559      	bpl.n	80059fe <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800594a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800594e:	f045 0501 	orr.w	r5, r5, #1
 8005952:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8005956:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800595a:	f023 0603 	bic.w	r6, r3, #3
 800595e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8005962:	f005 0501 	and.w	r5, r5, #1
 8005966:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800596a:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800596c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005970:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8005972:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005974:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005978:	270f      	movs	r7, #15
 800597a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800597e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005982:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8005986:	d03c      	beq.n	8005a02 <HAL_GPIO_Init+0x192>
 8005988:	4d25      	ldr	r5, [pc, #148]	; (8005a20 <HAL_GPIO_Init+0x1b0>)
 800598a:	42a8      	cmp	r0, r5
 800598c:	d03b      	beq.n	8005a06 <HAL_GPIO_Init+0x196>
 800598e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005992:	42a8      	cmp	r0, r5
 8005994:	d039      	beq.n	8005a0a <HAL_GPIO_Init+0x19a>
 8005996:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800599a:	42a8      	cmp	r0, r5
 800599c:	d037      	beq.n	8005a0e <HAL_GPIO_Init+0x19e>
 800599e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059a2:	42a8      	cmp	r0, r5
 80059a4:	d035      	beq.n	8005a12 <HAL_GPIO_Init+0x1a2>
 80059a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059aa:	42a8      	cmp	r0, r5
 80059ac:	d033      	beq.n	8005a16 <HAL_GPIO_Init+0x1a6>
 80059ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059b2:	42a8      	cmp	r0, r5
 80059b4:	bf14      	ite	ne
 80059b6:	2507      	movne	r5, #7
 80059b8:	2506      	moveq	r5, #6
 80059ba:	fa05 f50c 	lsl.w	r5, r5, ip
 80059be:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80059c0:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 80059c2:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80059c4:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80059c8:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 80059ca:	bf54      	ite	pl
 80059cc:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80059ce:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 80059d2:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 80059d4:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80059d6:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 80059d8:	bf54      	ite	pl
 80059da:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80059dc:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 80059e0:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 80059e2:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059e4:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 80059e6:	bf54      	ite	pl
 80059e8:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80059ea:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 80059ee:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 80059f0:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059f2:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 80059f4:	bf54      	ite	pl
 80059f6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80059f8:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80059fc:	60e5      	str	r5, [r4, #12]
    position++;
 80059fe:	3301      	adds	r3, #1
 8005a00:	e73f      	b.n	8005882 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8005a02:	2500      	movs	r5, #0
 8005a04:	e7d9      	b.n	80059ba <HAL_GPIO_Init+0x14a>
 8005a06:	2501      	movs	r5, #1
 8005a08:	e7d7      	b.n	80059ba <HAL_GPIO_Init+0x14a>
 8005a0a:	2502      	movs	r5, #2
 8005a0c:	e7d5      	b.n	80059ba <HAL_GPIO_Init+0x14a>
 8005a0e:	2503      	movs	r5, #3
 8005a10:	e7d3      	b.n	80059ba <HAL_GPIO_Init+0x14a>
 8005a12:	2504      	movs	r5, #4
 8005a14:	e7d1      	b.n	80059ba <HAL_GPIO_Init+0x14a>
 8005a16:	2505      	movs	r5, #5
 8005a18:	e7cf      	b.n	80059ba <HAL_GPIO_Init+0x14a>
 8005a1a:	bf00      	nop
 8005a1c:	40010400 	.word	0x40010400
 8005a20:	48000400 	.word	0x48000400
 8005a24:	40021000 	.word	0x40021000

08005a28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8005a2c:	4604      	mov	r4, r0
{
 8005a2e:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d07c      	beq.n	8005b2e <HAL_PCD_Init+0x106>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  
  if(hpcd->State == HAL_PCD_STATE_RESET)
 8005a34:	f890 3385 	ldrb.w	r3, [r0, #901]	; 0x385
 8005a38:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a3c:	b91b      	cbnz	r3, 8005a46 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a3e:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a42:	f7fe fdd7 	bl	80045f4 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a46:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a48:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8005a4a:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a4e:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  __HAL_PCD_DISABLE(hpcd);
 8005a52:	f002 fda6 	bl	80085a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8005a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a58:	466e      	mov	r6, sp
 8005a5a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a5e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005a60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005a64:	e886 0003 	stmia.w	r6, {r0, r1}
 8005a68:	f104 0804 	add.w	r8, r4, #4
 8005a6c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8005a70:	6820      	ldr	r0, [r4, #0]
 8005a72:	f002 fd7c 	bl	800856e <USB_CoreInit>

  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8005a76:	2100      	movs	r1, #0
 8005a78:	6820      	ldr	r0, [r4, #0]
 8005a7a:	f002 fd98 	bl	80085ae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	6860      	ldr	r0, [r4, #4]
 8005a82:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8005a86:	f104 0510 	add.w	r5, r4, #16
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8005a8a:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8005a8c:	4611      	mov	r1, r2
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005a8e:	4282      	cmp	r2, r0
 8005a90:	f103 031c 	add.w	r3, r3, #28
 8005a94:	d13b      	bne.n	8005b0e <HAL_PCD_Init+0xe6>
 8005a96:	2200      	movs	r2, #0
 8005a98:	4623      	mov	r3, r4
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 8005a9a:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8005a9c:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
    hpcd->IN_ep[index].tx_fifo_num = index;
 8005aa0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (index = 0; index < 15 ; index++)
 8005aa4:	3201      	adds	r2, #1
 8005aa6:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0;
 8005aa8:	f883 71e1 	strb.w	r7, [r3, #481]	; 0x1e1
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8005aac:	f883 71e3 	strb.w	r7, [r3, #483]	; 0x1e3
    hpcd->OUT_ep[index].maxpacket = 0;
 8005ab0:	f8c3 71e8 	str.w	r7, [r3, #488]	; 0x1e8
    hpcd->OUT_ep[index].xfer_buff = 0;
 8005ab4:	f8c3 71ec 	str.w	r7, [r3, #492]	; 0x1ec
    hpcd->OUT_ep[index].xfer_len = 0;
 8005ab8:	f8c3 71f4 	str.w	r7, [r3, #500]	; 0x1f4
 8005abc:	f103 031c 	add.w	r3, r3, #28
  for (index = 0; index < 15 ; index++)
 8005ac0:	d1ec      	bne.n	8005a9c <HAL_PCD_Init+0x74>
  }

  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8005ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ac4:	466e      	mov	r6, sp
 8005ac6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005aca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005acc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005ad0:	e886 0003 	stmia.w	r6, {r0, r1}
 8005ad4:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8005ad8:	6820      	ldr	r0, [r4, #0]
 8005ada:	f002 fd7f 	bl	80085dc <USB_DevInit>

  hpcd->USB_Address = 0;
  
  hpcd->State= HAL_PCD_STATE_READY;
 8005ade:	2301      	movs	r3, #1
  hpcd->USB_Address = 0;
 8005ae0:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State= HAL_PCD_STATE_READY;
 8005ae4:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  
   /* Activate LPM */
  if (hpcd->Init.lpm_enable ==1)
 8005ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d102      	bne.n	8005af4 <HAL_PCD_Init+0xcc>
  {
    HAL_PCDEx_ActivateLPM(hpcd);
 8005aee:	4620      	mov	r0, r4
 8005af0:	f000 fcb3 	bl	800645a <HAL_PCDEx_ActivateLPM>
  }  
  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable ==1)
 8005af4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d102      	bne.n	8005b00 <HAL_PCD_Init+0xd8>
  {
    HAL_PCDEx_ActivateBCD(hpcd);
 8005afa:	4620      	mov	r0, r4
 8005afc:	f000 fcc0 	bl	8006480 <HAL_PCDEx_ActivateBCD>
  }
  USB_DevDisconnect (hpcd->Instance);  
 8005b00:	6820      	ldr	r0, [r4, #0]
 8005b02:	f003 f84b 	bl	8008b9c <USB_DevDisconnect>
  return HAL_OK;
 8005b06:	2000      	movs	r0, #0
}
 8005b08:	b00a      	add	sp, #40	; 0x28
 8005b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hpcd->IN_ep[index].num = index;
 8005b0e:	f803 2c1c 	strb.w	r2, [r3, #-28]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8005b12:	f823 2c16 	strh.w	r2, [r3, #-22]
    hpcd->IN_ep[index].is_in = 1;
 8005b16:	f803 6c1b 	strb.w	r6, [r3, #-27]
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8005b1a:	f803 1c19 	strb.w	r1, [r3, #-25]
    hpcd->IN_ep[index].maxpacket =  0;
 8005b1e:	f843 1c14 	str.w	r1, [r3, #-20]
    hpcd->IN_ep[index].xfer_buff = 0;
 8005b22:	f843 1c10 	str.w	r1, [r3, #-16]
    hpcd->IN_ep[index].xfer_len = 0;
 8005b26:	f843 1c08 	str.w	r1, [r3, #-8]
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005b2a:	3201      	adds	r2, #1
 8005b2c:	e7af      	b.n	8005a8e <HAL_PCD_Init+0x66>
    return HAL_ERROR;
 8005b2e:	2001      	movs	r0, #1
 8005b30:	e7ea      	b.n	8005b08 <HAL_PCD_Init+0xe0>

08005b32 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8005b32:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8005b36:	2b01      	cmp	r3, #1
{ 
 8005b38:	b510      	push	{r4, lr}
 8005b3a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8005b3c:	d00c      	beq.n	8005b58 <HAL_PCD_Start+0x26>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  USB_DevConnect (hpcd->Instance);
 8005b44:	6800      	ldr	r0, [r0, #0]
 8005b46:	f003 f81d 	bl	8008b84 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005b4a:	6820      	ldr	r0, [r4, #0]
 8005b4c:	f002 fd23 	bl	8008596 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8005b50:	2000      	movs	r0, #0
 8005b52:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8005b56:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8005b58:	2002      	movs	r0, #2
}
 8005b5a:	bd10      	pop	{r4, pc}

08005b5c <HAL_PCD_Stop>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8005b5c:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8005b60:	2b01      	cmp	r3, #1
{ 
 8005b62:	b510      	push	{r4, lr}
 8005b64:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8005b66:	d00f      	beq.n	8005b88 <HAL_PCD_Stop+0x2c>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  __HAL_PCD_DISABLE(hpcd);
 8005b6e:	6800      	ldr	r0, [r0, #0]
 8005b70:	f002 fd17 	bl	80085a2 <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 8005b74:	6820      	ldr	r0, [r4, #0]
 8005b76:	f002 ffd4 	bl	8008b22 <USB_StopDevice>
  USB_DevDisconnect (hpcd->Instance);
 8005b7a:	6820      	ldr	r0, [r4, #0]
 8005b7c:	f003 f80e 	bl	8008b9c <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd); 
 8005b80:	2000      	movs	r0, #0
 8005b82:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
 8005b86:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8005b88:	2002      	movs	r0, #2
  return HAL_OK;
}
 8005b8a:	bd10      	pop	{r4, pc}

08005b8c <HAL_PCD_DeInit>:
{
 8005b8c:	b510      	push	{r4, lr}
  if(hpcd == NULL)
 8005b8e:	4604      	mov	r4, r0
 8005b90:	b158      	cbz	r0, 8005baa <HAL_PCD_DeInit+0x1e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b92:	2303      	movs	r3, #3
 8005b94:	f880 3385 	strb.w	r3, [r0, #901]	; 0x385
  HAL_PCD_Stop(hpcd);
 8005b98:	f7ff ffe0 	bl	8005b5c <HAL_PCD_Stop>
  HAL_PCD_MspDeInit(hpcd);
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f7fe fd67 	bl	8004670 <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET; 
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	f884 0385 	strb.w	r0, [r4, #901]	; 0x385
  return HAL_OK;
 8005ba8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005baa:	2001      	movs	r0, #1
}
 8005bac:	bd10      	pop	{r4, pc}
	...

08005bb0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bb4:	6807      	ldr	r7, [r0, #0]
{
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep = NULL;
  uint32_t hclk = 80000000;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005bba:	4638      	mov	r0, r7
 8005bbc:	f003 f828 	bl	8008c10 <USB_GetMode>
 8005bc0:	9002      	str	r0, [sp, #8]
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	f040 8155 	bne.w	8005e72 <HAL_PCD_IRQHandler+0x2c2>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8005bc8:	6820      	ldr	r0, [r4, #0]
 8005bca:	f002 fff3 	bl	8008bb4 <USB_ReadInterrupts>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	f000 814f 	beq.w	8005e72 <HAL_PCD_IRQHandler+0x2c2>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005bd4:	6820      	ldr	r0, [r4, #0]
 8005bd6:	f002 ffed 	bl	8008bb4 <USB_ReadInterrupts>
 8005bda:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005bdc:	bf48      	it	mi
 8005bde:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005be0:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005be2:	bf42      	ittt	mi
 8005be4:	6953      	ldrmi	r3, [r2, #20]
 8005be6:	f003 0302 	andmi.w	r3, r3, #2
 8005bea:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005bec:	f002 ffe2 	bl	8008bb4 <USB_ReadInterrupts>
 8005bf0:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8005bf4:	d00c      	beq.n	8005c10 <HAL_PCD_IRQHandler+0x60>
    {
      epnum = 0;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005bf6:	6820      	ldr	r0, [r4, #0]
 8005bf8:	f002 ffe0 	bl	8008bbc <USB_ReadDevAllOutEpInterrupt>
 8005bfc:	f507 6930 	add.w	r9, r7, #2816	; 0xb00
 8005c00:	4680      	mov	r8, r0
 8005c02:	46a3      	mov	fp, r4
      
      while ( ep_intr )
 8005c04:	464e      	mov	r6, r9
      epnum = 0;
 8005c06:	2500      	movs	r5, #0
      while ( ep_intr )
 8005c08:	f1b8 0f00 	cmp.w	r8, #0
 8005c0c:	f040 8134 	bne.w	8005e78 <HAL_PCD_IRQHandler+0x2c8>
        epnum++;
        ep_intr >>= 1;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005c10:	6820      	ldr	r0, [r4, #0]
 8005c12:	f002 ffcf 	bl	8008bb4 <USB_ReadInterrupts>
 8005c16:	0342      	lsls	r2, r0, #13
 8005c18:	d50b      	bpl.n	8005c32 <HAL_PCD_IRQHandler+0x82>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005c1a:	6820      	ldr	r0, [r4, #0]
 8005c1c:	f002 ffd6 	bl	8008bcc <USB_ReadDevAllInEpInterrupt>
 8005c20:	4626      	mov	r6, r4
 8005c22:	4683      	mov	fp, r0
 8005c24:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      
      epnum = 0;
 8005c28:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8005c2a:	f1bb 0f00 	cmp.w	fp, #0
 8005c2e:	f040 81a1 	bne.w	8005f74 <HAL_PCD_IRQHandler+0x3c4>
        ep_intr >>= 1;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005c32:	6820      	ldr	r0, [r4, #0]
 8005c34:	f002 ffbe 	bl	8008bb4 <USB_ReadInterrupts>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	da15      	bge.n	8005c68 <HAL_PCD_IRQHandler+0xb8>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c3c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005c40:	f023 0301 	bic.w	r3, r3, #1
 8005c44:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
      
      if(hpcd->LPM_State == LPM_L1)
 8005c48:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	f040 822c 	bne.w	80060aa <HAL_PCD_IRQHandler+0x4fa>
      {
        hpcd->LPM_State = LPM_L0;
 8005c52:	2100      	movs	r1, #0
 8005c54:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f000 fc1b 	bl	8006494 <HAL_PCDEx_LPM_Callback>
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005c5e:	6822      	ldr	r2, [r4, #0]
 8005c60:	6953      	ldr	r3, [r2, #20]
 8005c62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c66:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005c68:	6820      	ldr	r0, [r4, #0]
 8005c6a:	f002 ffa3 	bl	8008bb4 <USB_ReadInterrupts>
 8005c6e:	0503      	lsls	r3, r0, #20
 8005c70:	d50b      	bpl.n	8005c8a <HAL_PCD_IRQHandler+0xda>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005c72:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005c76:	07de      	lsls	r6, r3, #31
 8005c78:	d502      	bpl.n	8005c80 <HAL_PCD_IRQHandler+0xd0>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f7fe fd2c 	bl	80046d8 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005c80:	6822      	ldr	r2, [r4, #0]
 8005c82:	6953      	ldr	r3, [r2, #20]
 8005c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c88:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle LPM Interrupt */ 
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005c8a:	6820      	ldr	r0, [r4, #0]
 8005c8c:	f002 ff92 	bl	8008bb4 <USB_ReadInterrupts>
 8005c90:	0100      	lsls	r0, r0, #4
 8005c92:	d514      	bpl.n	8005cbe <HAL_PCD_IRQHandler+0x10e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	695a      	ldr	r2, [r3, #20]
 8005c98:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005c9c:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8005c9e:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 8005ca2:	2a00      	cmp	r2, #0
 8005ca4:	f040 8205 	bne.w	80060b2 <HAL_PCD_IRQHandler+0x502>
      {   
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8005caa:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8005cac:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8005cb0:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8005cb4:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 fbeb 	bl	8006494 <HAL_PCDEx_LPM_Callback>
        HAL_PCD_SuspendCallback(hpcd);
      }
    }
    
    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005cbe:	6820      	ldr	r0, [r4, #0]
 8005cc0:	f002 ff78 	bl	8008bb4 <USB_ReadInterrupts>
 8005cc4:	04c1      	lsls	r1, r0, #19
 8005cc6:	d537      	bpl.n	8005d38 <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8005cc8:	f507 6600 	add.w	r6, r7, #2048	; 0x800
 8005ccc:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 8005cce:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8005cd0:	f023 0301 	bic.w	r3, r3, #1
 8005cd4:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	f002 fd18 	bl	800870c <USB_FlushTxFifo>
      
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005cdc:	6861      	ldr	r1, [r4, #4]
 8005cde:	f507 6310 	add.w	r3, r7, #2304	; 0x900
      {
        USBx_INEP(index)->DIEPINT = 0xFF;
 8005ce2:	22ff      	movs	r2, #255	; 0xff
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005ce4:	9802      	ldr	r0, [sp, #8]
 8005ce6:	4288      	cmp	r0, r1
 8005ce8:	f040 81e7 	bne.w	80060ba <HAL_PCD_IRQHandler+0x50a>
        USBx_OUTEP(index)->DOEPINT = 0xFF;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8005cec:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf0:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 8005cf2:	69f3      	ldr	r3, [r6, #28]
 8005cf4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005cf8:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8005cfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 81e4 	beq.w	80060ca <HAL_PCD_IRQHandler+0x51a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8005d02:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8005d06:	f043 030b 	orr.w	r3, r3, #11
 8005d0a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8005d0e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005d10:	f043 030b 	orr.w	r3, r3, #11
 8005d14:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005d16:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005d1a:	7c21      	ldrb	r1, [r4, #16]
 8005d1c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005d1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d22:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005d26:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005d2a:	f002 ff90 	bl	8008c4e <USB_EP0_OutStart>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005d2e:	6822      	ldr	r2, [r4, #0]
 8005d30:	6953      	ldr	r3, [r2, #20]
 8005d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d36:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005d38:	6820      	ldr	r0, [r4, #0]
 8005d3a:	f002 ff3b 	bl	8008bb4 <USB_ReadInterrupts>
 8005d3e:	0482      	lsls	r2, r0, #18
 8005d40:	d520      	bpl.n	8005d84 <HAL_PCD_IRQHandler+0x1d4>
    {
      USB_ActivateSetup(hpcd->Instance);
 8005d42:	6820      	ldr	r0, [r4, #0]
 8005d44:	f002 ff68 	bl	8008c18 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005d48:	6822      	ldr	r2, [r4, #0]
 8005d4a:	68d3      	ldr	r3, [r2, #12]
 8005d4c:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8005d50:	60d3      	str	r3, [r2, #12]
      
      hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8005d52:	2303      	movs	r3, #3
 8005d54:	60e3      	str	r3, [r4, #12]
      hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ; 
 8005d56:	2340      	movs	r3, #64	; 0x40
 8005d58:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */

      /* Get hclk frequency value */
      hclk = HAL_RCC_GetHCLKFreq();
 8005d5a:	f000 febb 	bl	8006ad4 <HAL_RCC_GetHCLKFreq>
    
      if((hclk >= 14200000)&&(hclk < 15000000))
 8005d5e:	4b82      	ldr	r3, [pc, #520]	; (8005f68 <HAL_PCD_IRQHandler+0x3b8>)
 8005d60:	4a82      	ldr	r2, [pc, #520]	; (8005f6c <HAL_PCD_IRQHandler+0x3bc>)
 8005d62:	4403      	add	r3, r0
 8005d64:	4293      	cmp	r3, r2
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	f200 81b8 	bhi.w	80060dc <HAL_PCD_IRQHandler+0x52c>
      {
        /* hclk Clock Range between 14.2-15 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
      }
      
      else /* if(hclk >= 32000000) */
      {
        /* hclk Clock Range between 32-80 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8005d72:	60da      	str	r2, [r3, #12]
      }  
      
      HAL_PCD_ResetCallback(hpcd);
 8005d74:	4620      	mov	r0, r4
 8005d76:	f7fe fca2 	bl	80046be <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005d7a:	6822      	ldr	r2, [r4, #0]
 8005d7c:	6953      	ldr	r3, [r2, #20]
 8005d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d82:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005d84:	6820      	ldr	r0, [r4, #0]
 8005d86:	f002 ff15 	bl	8008bb4 <USB_ReadInterrupts>
 8005d8a:	06c3      	lsls	r3, r0, #27
 8005d8c:	d52b      	bpl.n	8005de6 <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d8e:	6822      	ldr	r2, [r4, #0]
 8005d90:	6993      	ldr	r3, [r2, #24]
 8005d92:	f023 0310 	bic.w	r3, r3, #16
 8005d96:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8005d98:	6a3e      	ldr	r6, [r7, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005d9a:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8005d9e:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005da0:	f006 090f 	and.w	r9, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005da4:	f040 81ea 	bne.w	800617c <HAL_PCD_IRQHandler+0x5cc>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8005da8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005dac:	421e      	tst	r6, r3
 8005dae:	d015      	beq.n	8005ddc <HAL_PCD_IRQHandler+0x22c>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8005db0:	f04f 081c 	mov.w	r8, #28
 8005db4:	fb08 4809 	mla	r8, r8, r9, r4
 8005db8:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8005dbc:	4632      	mov	r2, r6
 8005dbe:	f8d8 11ec 	ldr.w	r1, [r8, #492]	; 0x1ec
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	f002 fe65 	bl	8008a92 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005dc8:	f8d8 31ec 	ldr.w	r3, [r8, #492]	; 0x1ec
 8005dcc:	4433      	add	r3, r6
 8005dce:	f8c8 31ec 	str.w	r3, [r8, #492]	; 0x1ec
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005dd2:	f8d8 31f8 	ldr.w	r3, [r8, #504]	; 0x1f8
 8005dd6:	441e      	add	r6, r3
 8005dd8:	f8c8 61f8 	str.w	r6, [r8, #504]	; 0x1f8
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ddc:	6822      	ldr	r2, [r4, #0]
 8005dde:	6993      	ldr	r3, [r2, #24]
 8005de0:	f043 0310 	orr.w	r3, r3, #16
 8005de4:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005de6:	6820      	ldr	r0, [r4, #0]
 8005de8:	f002 fee4 	bl	8008bb4 <USB_ReadInterrupts>
 8005dec:	0707      	lsls	r7, r0, #28
 8005dee:	d507      	bpl.n	8005e00 <HAL_PCD_IRQHandler+0x250>
    {
      HAL_PCD_SOFCallback(hpcd);
 8005df0:	4620      	mov	r0, r4
 8005df2:	f7fe fc60 	bl	80046b6 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005df6:	6822      	ldr	r2, [r4, #0]
 8005df8:	6953      	ldr	r3, [r2, #20]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005e00:	6820      	ldr	r0, [r4, #0]
 8005e02:	f002 fed7 	bl	8008bb4 <USB_ReadInterrupts>
 8005e06:	02c6      	lsls	r6, r0, #11
 8005e08:	d508      	bpl.n	8005e1c <HAL_PCD_IRQHandler+0x26c>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8005e0a:	b2e9      	uxtb	r1, r5
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f7fe fc6f 	bl	80046f0 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005e12:	6822      	ldr	r2, [r4, #0]
 8005e14:	6953      	ldr	r3, [r2, #20]
 8005e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e1a:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005e1c:	6820      	ldr	r0, [r4, #0]
 8005e1e:	f002 fec9 	bl	8008bb4 <USB_ReadInterrupts>
 8005e22:	0280      	lsls	r0, r0, #10
 8005e24:	d508      	bpl.n	8005e38 <HAL_PCD_IRQHandler+0x288>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8005e26:	b2e9      	uxtb	r1, r5
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f7fe fc5d 	bl	80046e8 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005e2e:	6822      	ldr	r2, [r4, #0]
 8005e30:	6953      	ldr	r3, [r2, #20]
 8005e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e36:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005e38:	6820      	ldr	r0, [r4, #0]
 8005e3a:	f002 febb 	bl	8008bb4 <USB_ReadInterrupts>
 8005e3e:	0041      	lsls	r1, r0, #1
 8005e40:	d507      	bpl.n	8005e52 <HAL_PCD_IRQHandler+0x2a2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8005e42:	4620      	mov	r0, r4
 8005e44:	f7fe fc58 	bl	80046f8 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005e48:	6822      	ldr	r2, [r4, #0]
 8005e4a:	6953      	ldr	r3, [r2, #20]
 8005e4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e50:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005e52:	6820      	ldr	r0, [r4, #0]
 8005e54:	f002 feae 	bl	8008bb4 <USB_ReadInterrupts>
 8005e58:	0742      	lsls	r2, r0, #29
 8005e5a:	d50a      	bpl.n	8005e72 <HAL_PCD_IRQHandler+0x2c2>
    {
      temp = hpcd->Instance->GOTGINT;
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005e60:	076b      	lsls	r3, r5, #29
 8005e62:	d502      	bpl.n	8005e6a <HAL_PCD_IRQHandler+0x2ba>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8005e64:	4620      	mov	r0, r4
 8005e66:	f7fe fc4b 	bl	8004700 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	4315      	orrs	r5, r2
 8005e70:	605d      	str	r5, [r3, #4]
    }
  }
}
 8005e72:	b007      	add	sp, #28
 8005e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1)
 8005e78:	f018 0f01 	tst.w	r8, #1
 8005e7c:	d049      	beq.n	8005f12 <HAL_PCD_IRQHandler+0x362>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8005e7e:	b2ea      	uxtb	r2, r5
 8005e80:	4611      	mov	r1, r2
 8005e82:	6820      	ldr	r0, [r4, #0]
 8005e84:	9203      	str	r2, [sp, #12]
 8005e86:	f002 fea9 	bl	8008bdc <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005e8a:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8005e8e:	4682      	mov	sl, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005e90:	d032      	beq.n	8005ef8 <HAL_PCD_IRQHandler+0x348>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005e92:	2101      	movs	r1, #1
 8005e94:	60b1      	str	r1, [r6, #8]
            if (USBx->GSNPSID == USB_OTG_CORE_ID_310A)
 8005e96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e98:	4b35      	ldr	r3, [pc, #212]	; (8005f70 <HAL_PCD_IRQHandler+0x3c0>)
 8005e9a:	9a03      	ldr	r2, [sp, #12]
 8005e9c:	4299      	cmp	r1, r3
 8005e9e:	d13f      	bne.n	8005f20 <HAL_PCD_IRQHandler+0x370>
              if (!(USBx_OUTEP(0)->DOEPINT & (0x1 << 15)))
 8005ea0:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8005ea4:	0409      	lsls	r1, r1, #16
 8005ea6:	d41f      	bmi.n	8005ee8 <HAL_PCD_IRQHandler+0x338>
                  if (hpcd->Init.dma_enable == 1)
 8005ea8:	6921      	ldr	r1, [r4, #16]
 8005eaa:	2901      	cmp	r1, #1
 8005eac:	d10c      	bne.n	8005ec8 <HAL_PCD_IRQHandler+0x318>
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005eae:	6931      	ldr	r1, [r6, #16]
                                                 hpcd->OUT_ep[epnum].maxpacket -
 8005eb0:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005eb4:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                                 hpcd->OUT_ep[epnum].maxpacket -
 8005eb8:	1a41      	subs	r1, r0, r1
                  	hpcd->OUT_ep[epnum].xfer_count =
 8005eba:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                    hpcd->OUT_ep[epnum].xfer_buff +=
 8005ebe:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 8005ec2:	4408      	add	r0, r1
 8005ec4:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
                HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8005ec8:	4611      	mov	r1, r2
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f7fe fbe2 	bl	8004694 <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 8005ed0:	6921      	ldr	r1, [r4, #16]
 8005ed2:	2901      	cmp	r1, #1
 8005ed4:	d108      	bne.n	8005ee8 <HAL_PCD_IRQHandler+0x338>
                  if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 8005ed6:	b93d      	cbnz	r5, 8005ee8 <HAL_PCD_IRQHandler+0x338>
 8005ed8:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 8005edc:	b922      	cbnz	r2, 8005ee8 <HAL_PCD_IRQHandler+0x338>
                    USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8005ede:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005ee2:	6820      	ldr	r0, [r4, #0]
 8005ee4:	f002 feb3 	bl	8008c4e <USB_EP0_OutStart>
              USBx_OUTEP(0)->DOEPINT |= (0x1 << 15) | (0x1 << 5);
 8005ee8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8005eec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ef0:	f042 0220 	orr.w	r2, r2, #32
 8005ef4:	f8c9 2008 	str.w	r2, [r9, #8]
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005ef8:	f01a 0f08 	tst.w	sl, #8
 8005efc:	d004      	beq.n	8005f08 <HAL_PCD_IRQHandler+0x358>
            HAL_PCD_SetupStageCallback(hpcd);
 8005efe:	4620      	mov	r0, r4
 8005f00:	f7fe fbc2 	bl	8004688 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005f04:	2308      	movs	r3, #8
 8005f06:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005f08:	f01a 0f10 	tst.w	sl, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005f0c:	bf1c      	itt	ne
 8005f0e:	2310      	movne	r3, #16
 8005f10:	60b3      	strne	r3, [r6, #8]
        epnum++;
 8005f12:	3501      	adds	r5, #1
        ep_intr >>= 1;
 8005f14:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8005f18:	3620      	adds	r6, #32
 8005f1a:	f10b 0b1c 	add.w	fp, fp, #28
 8005f1e:	e673      	b.n	8005c08 <HAL_PCD_IRQHandler+0x58>
              if (hpcd->Init.dma_enable == 1)
 8005f20:	6921      	ldr	r1, [r4, #16]
 8005f22:	2901      	cmp	r1, #1
 8005f24:	d10c      	bne.n	8005f40 <HAL_PCD_IRQHandler+0x390>
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f26:	6931      	ldr	r1, [r6, #16]
                                               hpcd->OUT_ep[epnum].maxpacket -
 8005f28:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f2c:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                               hpcd->OUT_ep[epnum].maxpacket -
 8005f30:	1a41      	subs	r1, r0, r1
                hpcd->OUT_ep[epnum].xfer_count =
 8005f32:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8005f36:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 8005f3a:	4408      	add	r0, r1
 8005f3c:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
              HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8005f40:	4611      	mov	r1, r2
 8005f42:	4620      	mov	r0, r4
 8005f44:	f7fe fba6 	bl	8004694 <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 8005f48:	6921      	ldr	r1, [r4, #16]
 8005f4a:	2901      	cmp	r1, #1
 8005f4c:	d1d4      	bne.n	8005ef8 <HAL_PCD_IRQHandler+0x348>
                if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 8005f4e:	2d00      	cmp	r5, #0
 8005f50:	d1d2      	bne.n	8005ef8 <HAL_PCD_IRQHandler+0x348>
 8005f52:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 8005f56:	2a00      	cmp	r2, #0
 8005f58:	d1ce      	bne.n	8005ef8 <HAL_PCD_IRQHandler+0x348>
                  USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8005f5a:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005f5e:	6820      	ldr	r0, [r4, #0]
 8005f60:	f002 fe75 	bl	8008c4e <USB_EP0_OutStart>
 8005f64:	e7c8      	b.n	8005ef8 <HAL_PCD_IRQHandler+0x348>
 8005f66:	bf00      	nop
 8005f68:	ff275340 	.word	0xff275340
 8005f6c:	000c34ff 	.word	0x000c34ff
 8005f70:	4f54310a 	.word	0x4f54310a
        if (ep_intr & 0x1) /* In ITR */
 8005f74:	f01b 0f01 	tst.w	fp, #1
 8005f78:	d074      	beq.n	8006064 <HAL_PCD_IRQHandler+0x4b4>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8005f7a:	fa5f fa85 	uxtb.w	sl, r5
 8005f7e:	4651      	mov	r1, sl
 8005f80:	6820      	ldr	r0, [r4, #0]
 8005f82:	f002 fe35 	bl	8008bf0 <USB_ReadDevInEPInterrupt>
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005f86:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8005f8a:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005f8c:	d020      	beq.n	8005fd0 <HAL_PCD_IRQHandler+0x420>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f8e:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
            fifoemptymsk = 0x1 << epnum;
 8005f92:	2101      	movs	r1, #1
 8005f94:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f96:	ea23 0301 	bic.w	r3, r3, r1
 8005f9a:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1)
 8005fa4:	6923      	ldr	r3, [r4, #16]
 8005fa6:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8005fa8:	bf01      	itttt	eq
 8005faa:	6cb3      	ldreq	r3, [r6, #72]	; 0x48
 8005fac:	6c72      	ldreq	r2, [r6, #68]	; 0x44
 8005fae:	189b      	addeq	r3, r3, r2
 8005fb0:	64b3      	streq	r3, [r6, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8005fb2:	4651      	mov	r1, sl
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f7fe fb76 	bl	80046a6 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1)
 8005fba:	6921      	ldr	r1, [r4, #16]
 8005fbc:	2901      	cmp	r1, #1
 8005fbe:	d107      	bne.n	8005fd0 <HAL_PCD_IRQHandler+0x420>
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 8005fc0:	b935      	cbnz	r5, 8005fd0 <HAL_PCD_IRQHandler+0x420>
 8005fc2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005fc4:	b923      	cbnz	r3, 8005fd0 <HAL_PCD_IRQHandler+0x420>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8005fc6:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005fca:	6820      	ldr	r0, [r4, #0]
 8005fcc:	f002 fe3f 	bl	8008c4e <USB_EP0_OutStart>
          if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005fd0:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005fd4:	bf1c      	itt	ne
 8005fd6:	2308      	movne	r3, #8
 8005fd8:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005fdc:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005fe0:	bf1c      	itt	ne
 8005fe2:	2310      	movne	r3, #16
 8005fe4:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005fe8:	f018 0f40 	tst.w	r8, #64	; 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005fec:	bf1c      	itt	ne
 8005fee:	2340      	movne	r3, #64	; 0x40
 8005ff0:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005ff4:	f018 0f02 	tst.w	r8, #2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005ff8:	bf1c      	itt	ne
 8005ffa:	2302      	movne	r3, #2
 8005ffc:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006000:	f018 0f80 	tst.w	r8, #128	; 0x80
 8006004:	d02e      	beq.n	8006064 <HAL_PCD_IRQHandler+0x4b4>
  * @param  epnum: endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	9303      	str	r3, [sp, #12]
  int32_t len = 0U;
  uint32_t len32b = 0;
  uint32_t fifoemptymsk = 0;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 800600a:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800600c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800600e:	eba3 0802 	sub.w	r8, r3, r2
 8006012:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8006014:	4598      	cmp	r8, r3
 8006016:	bf28      	it	cs
 8006018:	4698      	movcs	r8, r3
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3) / 4;
 800601a:	f108 0303 	add.w	r3, r8, #3
 800601e:	2204      	movs	r2, #4
 8006020:	fb93 f3f2 	sdiv	r3, r3, r2
 8006024:	9304      	str	r3, [sp, #16]
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8006026:	9b03      	ldr	r3, [sp, #12]
 8006028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8006030:	9305      	str	r3, [sp, #20]
 8006032:	9b05      	ldr	r3, [sp, #20]
 8006034:	9a04      	ldr	r2, [sp, #16]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	b29b      	uxth	r3, r3
 800603a:	4293      	cmp	r3, r2
 800603c:	d904      	bls.n	8006048 <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 800603e:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8006040:	6d33      	ldr	r3, [r6, #80]	; 0x50
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8006042:	4293      	cmp	r3, r2
 8006044:	d900      	bls.n	8006048 <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 8006046:	b9a3      	cbnz	r3, 8006072 <HAL_PCD_IRQHandler+0x4c2>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0)
 8006048:	f1b8 0f00 	cmp.w	r8, #0
 800604c:	dc0a      	bgt.n	8006064 <HAL_PCD_IRQHandler+0x4b4>
  {
    fifoemptymsk = 0x1 << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800604e:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = 0x1 << epnum;
 8006050:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006052:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 8006056:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1 << epnum;
 800605a:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800605c:	ea23 0302 	bic.w	r3, r3, r2
 8006060:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        epnum++;
 8006064:	3501      	adds	r5, #1
        ep_intr >>= 1;
 8006066:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 800606a:	361c      	adds	r6, #28
 800606c:	f109 0920 	add.w	r9, r9, #32
 8006070:	e5db      	b.n	8005c2a <HAL_PCD_IRQHandler+0x7a>
    len = ep->xfer_len - ep->xfer_count;
 8006072:	eba3 0802 	sub.w	r8, r3, r2
 8006076:	6c73      	ldr	r3, [r6, #68]	; 0x44
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8006078:	9803      	ldr	r0, [sp, #12]
 800607a:	4598      	cmp	r8, r3
 800607c:	bf28      	it	cs
 800607e:	4698      	movcs	r8, r3
    len32b = (len + 3) / 4;
 8006080:	2204      	movs	r2, #4
 8006082:	f108 0303 	add.w	r3, r8, #3
 8006086:	fb93 f3f2 	sdiv	r3, r3, r2
 800608a:	9304      	str	r3, [sp, #16]
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 800608c:	7c23      	ldrb	r3, [r4, #16]
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	4652      	mov	r2, sl
 8006092:	fa1f f388 	uxth.w	r3, r8
 8006096:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8006098:	f002 fcea 	bl	8008a70 <USB_WritePacket>
    ep->xfer_buff  += len;
 800609c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800609e:	4443      	add	r3, r8
 80060a0:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 80060a2:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80060a4:	4443      	add	r3, r8
 80060a6:	6573      	str	r3, [r6, #84]	; 0x54
 80060a8:	e7c3      	b.n	8006032 <HAL_PCD_IRQHandler+0x482>
        HAL_PCD_ResumeCallback(hpcd);
 80060aa:	4620      	mov	r0, r4
 80060ac:	f7fe fb18 	bl	80046e0 <HAL_PCD_ResumeCallback>
 80060b0:	e5d5      	b.n	8005c5e <HAL_PCD_IRQHandler+0xae>
        HAL_PCD_SuspendCallback(hpcd);
 80060b2:	4620      	mov	r0, r4
 80060b4:	f7fe fb10 	bl	80046d8 <HAL_PCD_SuspendCallback>
 80060b8:	e601      	b.n	8005cbe <HAL_PCD_IRQHandler+0x10e>
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80060ba:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(index)->DIEPINT = 0xFF;
 80060bc:	609a      	str	r2, [r3, #8]
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80060be:	3001      	adds	r0, #1
        USBx_OUTEP(index)->DOEPINT = 0xFF;
 80060c0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80060c4:	9002      	str	r0, [sp, #8]
 80060c6:	3320      	adds	r3, #32
 80060c8:	e60c      	b.n	8005ce4 <HAL_PCD_IRQHandler+0x134>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80060ca:	6973      	ldr	r3, [r6, #20]
 80060cc:	f043 030b 	orr.w	r3, r3, #11
 80060d0:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80060d2:	6933      	ldr	r3, [r6, #16]
 80060d4:	f043 030b 	orr.w	r3, r3, #11
 80060d8:	6133      	str	r3, [r6, #16]
 80060da:	e61c      	b.n	8005d16 <HAL_PCD_IRQHandler+0x166>
      else if((hclk >= 15000000)&&(hclk < 16000000))
 80060dc:	4a2f      	ldr	r2, [pc, #188]	; (800619c <HAL_PCD_IRQHandler+0x5ec>)
 80060de:	4930      	ldr	r1, [pc, #192]	; (80061a0 <HAL_PCD_IRQHandler+0x5f0>)
 80060e0:	4402      	add	r2, r0
 80060e2:	428a      	cmp	r2, r1
 80060e4:	d803      	bhi.n	80060ee <HAL_PCD_IRQHandler+0x53e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80060ec:	e641      	b.n	8005d72 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 16000000)&&(hclk < 17200000))
 80060ee:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 80060f2:	492c      	ldr	r1, [pc, #176]	; (80061a4 <HAL_PCD_IRQHandler+0x5f4>)
 80060f4:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 80060f8:	428a      	cmp	r2, r1
 80060fa:	d803      	bhi.n	8006104 <HAL_PCD_IRQHandler+0x554>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8006102:	e636      	b.n	8005d72 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 17200000)&&(hclk < 18500000))
 8006104:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8006108:	4927      	ldr	r1, [pc, #156]	; (80061a8 <HAL_PCD_IRQHandler+0x5f8>)
 800610a:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 800610e:	428a      	cmp	r2, r1
 8006110:	d803      	bhi.n	800611a <HAL_PCD_IRQHandler+0x56a>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8006118:	e62b      	b.n	8005d72 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 18500000)&&(hclk < 20000000))
 800611a:	4a24      	ldr	r2, [pc, #144]	; (80061ac <HAL_PCD_IRQHandler+0x5fc>)
 800611c:	4924      	ldr	r1, [pc, #144]	; (80061b0 <HAL_PCD_IRQHandler+0x600>)
 800611e:	4402      	add	r2, r0
 8006120:	428a      	cmp	r2, r1
 8006122:	d803      	bhi.n	800612c <HAL_PCD_IRQHandler+0x57c>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 800612a:	e622      	b.n	8005d72 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 20000000)&&(hclk < 21800000))
 800612c:	4a21      	ldr	r2, [pc, #132]	; (80061b4 <HAL_PCD_IRQHandler+0x604>)
 800612e:	4922      	ldr	r1, [pc, #136]	; (80061b8 <HAL_PCD_IRQHandler+0x608>)
 8006130:	4402      	add	r2, r0
 8006132:	428a      	cmp	r2, r1
 8006134:	d803      	bhi.n	800613e <HAL_PCD_IRQHandler+0x58e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 800613c:	e619      	b.n	8005d72 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 21800000)&&(hclk < 24000000))
 800613e:	4a1f      	ldr	r2, [pc, #124]	; (80061bc <HAL_PCD_IRQHandler+0x60c>)
 8006140:	491f      	ldr	r1, [pc, #124]	; (80061c0 <HAL_PCD_IRQHandler+0x610>)
 8006142:	4402      	add	r2, r0
 8006144:	428a      	cmp	r2, r1
 8006146:	d803      	bhi.n	8006150 <HAL_PCD_IRQHandler+0x5a0>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800614e:	e610      	b.n	8005d72 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 24000000)&&(hclk < 27700000))
 8006150:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8006154:	491b      	ldr	r1, [pc, #108]	; (80061c4 <HAL_PCD_IRQHandler+0x614>)
 8006156:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 800615a:	428a      	cmp	r2, r1
 800615c:	d803      	bhi.n	8006166 <HAL_PCD_IRQHandler+0x5b6>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006164:	e605      	b.n	8005d72 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 27700000)&&(hclk < 32000000))
 8006166:	4a18      	ldr	r2, [pc, #96]	; (80061c8 <HAL_PCD_IRQHandler+0x618>)
 8006168:	4918      	ldr	r1, [pc, #96]	; (80061cc <HAL_PCD_IRQHandler+0x61c>)
 800616a:	4402      	add	r2, r0
 800616c:	428a      	cmp	r2, r1
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 800616e:	68da      	ldr	r2, [r3, #12]
 8006170:	bf94      	ite	ls
 8006172:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8006176:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 800617a:	e5fa      	b.n	8005d72 <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800617c:	2b06      	cmp	r3, #6
 800617e:	f47f ae2d 	bne.w	8005ddc <HAL_PCD_IRQHandler+0x22c>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8006182:	2208      	movs	r2, #8
 8006184:	f504 7162 	add.w	r1, r4, #904	; 0x388
 8006188:	4638      	mov	r0, r7
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800618a:	f04f 081c 	mov.w	r8, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 800618e:	f002 fc80 	bl	8008a92 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006192:	fb08 4809 	mla	r8, r8, r9, r4
 8006196:	f3c6 160a 	ubfx	r6, r6, #4, #11
 800619a:	e61a      	b.n	8005dd2 <HAL_PCD_IRQHandler+0x222>
 800619c:	ff1b1e40 	.word	0xff1b1e40
 80061a0:	000f423f 	.word	0x000f423f
 80061a4:	00124f7f 	.word	0x00124f7f
 80061a8:	0013d61f 	.word	0x0013d61f
 80061ac:	fee5b660 	.word	0xfee5b660
 80061b0:	0016e35f 	.word	0x0016e35f
 80061b4:	feced300 	.word	0xfeced300
 80061b8:	001b773f 	.word	0x001b773f
 80061bc:	feb35bc0 	.word	0xfeb35bc0
 80061c0:	002191bf 	.word	0x002191bf
 80061c4:	0038751f 	.word	0x0038751f
 80061c8:	fe5954e0 	.word	0xfe5954e0
 80061cc:	00419cdf 	.word	0x00419cdf

080061d0 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 80061d0:	f890 2384 	ldrb.w	r2, [r0, #900]	; 0x384
 80061d4:	2a01      	cmp	r2, #1
{
 80061d6:	b510      	push	{r4, lr}
 80061d8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80061da:	d00b      	beq.n	80061f4 <HAL_PCD_SetAddress+0x24>
 80061dc:	2201      	movs	r2, #1
 80061de:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  hpcd->USB_Address = address;
 80061e2:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  USB_SetDevAddress(hpcd->Instance, address);
 80061e6:	6800      	ldr	r0, [r0, #0]
 80061e8:	f002 fcbc 	bl	8008b64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 80061ec:	2000      	movs	r0, #0
 80061ee:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80061f2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80061f4:	2002      	movs	r0, #2
}
 80061f6:	bd10      	pop	{r4, pc}

080061f8 <HAL_PCD_EP_Open>:
{
 80061f8:	b570      	push	{r4, r5, r6, lr}
 80061fa:	4604      	mov	r4, r0
  if ((ep_addr & 0x80) == 0x80)
 80061fc:	b248      	sxtb	r0, r1
 80061fe:	2800      	cmp	r0, #0
 8006200:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8006204:	f04f 051c 	mov.w	r5, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006208:	bfb5      	itete	lt
 800620a:	fb05 4106 	mlalt	r1, r5, r6, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800620e:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006212:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8006214:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 8006218:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7F;
 800621a:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 800621c:	7048      	strb	r0, [r1, #1]
  ep->type = ep_type;
 800621e:	70cb      	strb	r3, [r1, #3]
  __HAL_LOCK(hpcd);
 8006220:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->maxpacket = ep_mps;
 8006224:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd);
 8006226:	2b01      	cmp	r3, #1
 8006228:	d009      	beq.n	800623e <HAL_PCD_EP_Open+0x46>
 800622a:	2301      	movs	r3, #1
 800622c:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8006230:	6820      	ldr	r0, [r4, #0]
 8006232:	f002 fa94 	bl	800875e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006236:	2000      	movs	r0, #0
 8006238:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return ret;
 800623c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 800623e:	2002      	movs	r0, #2
}
 8006240:	bd70      	pop	{r4, r5, r6, pc}

08006242 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 8006242:	b24b      	sxtb	r3, r1
 8006244:	2b00      	cmp	r3, #0
{  
 8006246:	b510      	push	{r4, lr}
 8006248:	f04f 021c 	mov.w	r2, #28
 800624c:	4604      	mov	r4, r0
 800624e:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006252:	bfb5      	itete	lt
 8006254:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8006258:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800625c:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800625e:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 8006262:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8006264:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8006266:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8006268:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
 800626c:	2b01      	cmp	r3, #1
 800626e:	d009      	beq.n	8006284 <HAL_PCD_EP_Close+0x42>
 8006270:	2301      	movs	r3, #1
 8006272:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8006276:	6820      	ldr	r0, [r4, #0]
 8006278:	f002 fab0 	bl	80087dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 800627c:	2000      	movs	r0, #0
 800627e:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8006282:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8006284:	2002      	movs	r0, #2
}
 8006286:	bd10      	pop	{r4, pc}

08006288 <HAL_PCD_EP_Receive>:
{
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	4604      	mov	r4, r0
 800628c:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 8006290:	201c      	movs	r0, #28
 8006292:	fb00 4506 	mla	r5, r0, r6, r4
  ep->xfer_len = len;
 8006296:	f8c5 31f4 	str.w	r3, [r5, #500]	; 0x1f4
  ep->xfer_count = 0;
 800629a:	2300      	movs	r3, #0
 800629c:	f8c5 31f8 	str.w	r3, [r5, #504]	; 0x1f8
  ep->is_in = 0;
 80062a0:	f885 31e1 	strb.w	r3, [r5, #481]	; 0x1e1
  __HAL_LOCK(hpcd);
 80062a4:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->xfer_buff = pBuf;  
 80062a8:	f8c5 21ec 	str.w	r2, [r5, #492]	; 0x1ec
  __HAL_LOCK(hpcd);
 80062ac:	2b01      	cmp	r3, #1
  ep->num = ep_addr & 0x7F;
 80062ae:	f885 61e0 	strb.w	r6, [r5, #480]	; 0x1e0
  __HAL_LOCK(hpcd);
 80062b2:	d011      	beq.n	80062d8 <HAL_PCD_EP_Receive+0x50>
 80062b4:	6922      	ldr	r2, [r4, #16]
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80062b6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80062b8:	2301      	movs	r3, #1
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80062ba:	f505 71f0 	add.w	r1, r5, #480	; 0x1e0
  __HAL_LOCK(hpcd);
 80062be:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80062c2:	b2d2      	uxtb	r2, r2
  if ((ep_addr & 0x7F) == 0 )
 80062c4:	b92e      	cbnz	r6, 80062d2 <HAL_PCD_EP_Receive+0x4a>
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80062c6:	f002 fb6f 	bl	80089a8 <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 80062ca:	2000      	movs	r0, #0
 80062cc:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80062d0:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80062d2:	f002 fab1 	bl	8008838 <USB_EPStartXfer>
 80062d6:	e7f8      	b.n	80062ca <HAL_PCD_EP_Receive+0x42>
  __HAL_LOCK(hpcd);
 80062d8:	2002      	movs	r0, #2
}
 80062da:	bd70      	pop	{r4, r5, r6, pc}

080062dc <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 80062dc:	231c      	movs	r3, #28
 80062de:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80062e2:	fb03 0101 	mla	r1, r3, r1, r0
}
 80062e6:	f8b1 01f8 	ldrh.w	r0, [r1, #504]	; 0x1f8
 80062ea:	4770      	bx	lr

080062ec <HAL_PCD_EP_Transmit>:
{
 80062ec:	b570      	push	{r4, r5, r6, lr}
 80062ee:	4604      	mov	r4, r0
 80062f0:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 80062f4:	201c      	movs	r0, #28
 80062f6:	fb00 4506 	mla	r5, r0, r6, r4
 80062fa:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 80062fc:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_LOCK(hpcd);
 80062fe:	f894 2384 	ldrb.w	r2, [r4, #900]	; 0x384
  ep->num = ep_addr & 0x7F;
 8006302:	f885 603c 	strb.w	r6, [r5, #60]	; 0x3c
  ep->xfer_count = 0;
 8006306:	2300      	movs	r3, #0
 8006308:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1;
 800630a:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 800630c:	429a      	cmp	r2, r3
  ep->is_in = 1;
 800630e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_LOCK(hpcd);
 8006312:	d010      	beq.n	8006336 <HAL_PCD_EP_Transmit+0x4a>
 8006314:	6922      	ldr	r2, [r4, #16]
 8006316:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800631a:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 800631e:	b2d2      	uxtb	r2, r2
 8006320:	6820      	ldr	r0, [r4, #0]
  if ((ep_addr & 0x7F) == 0 )
 8006322:	b92e      	cbnz	r6, 8006330 <HAL_PCD_EP_Transmit+0x44>
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 8006324:	f002 fb40 	bl	80089a8 <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 8006328:	2000      	movs	r0, #0
 800632a:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800632e:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep,  hpcd->Init.dma_enable);
 8006330:	f002 fa82 	bl	8008838 <USB_EPStartXfer>
 8006334:	e7f8      	b.n	8006328 <HAL_PCD_EP_Transmit+0x3c>
  __HAL_LOCK(hpcd);
 8006336:	2002      	movs	r0, #2
}
 8006338:	bd70      	pop	{r4, r5, r6, pc}

0800633a <HAL_PCD_EP_SetStall>:
{
 800633a:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 800633c:	b24b      	sxtb	r3, r1
 800633e:	2b00      	cmp	r3, #0
 8006340:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8006344:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006348:	bfb5      	itete	lt
 800634a:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 800634e:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006352:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 8006354:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_stall = 1;
 8006358:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800635a:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 800635c:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1;
 800635e:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8006360:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8006362:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8006364:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8006368:	4293      	cmp	r3, r2
{
 800636a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800636c:	d00f      	beq.n	800638e <HAL_PCD_EP_SetStall+0x54>
 800636e:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  USB_EPSetStall(hpcd->Instance , ep);
 8006372:	6800      	ldr	r0, [r0, #0]
 8006374:	f002 fb9d 	bl	8008ab2 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8006378:	b92d      	cbnz	r5, 8006386 <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance,  hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800637a:	f504 7262 	add.w	r2, r4, #904	; 0x388
 800637e:	7c21      	ldrb	r1, [r4, #16]
 8006380:	6820      	ldr	r0, [r4, #0]
 8006382:	f002 fc64 	bl	8008c4e <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8006386:	2000      	movs	r0, #0
 8006388:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800638c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800638e:	2002      	movs	r0, #2
}
 8006390:	bd38      	pop	{r3, r4, r5, pc}

08006392 <HAL_PCD_EP_ClrStall>:
{
 8006392:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8006394:	b24b      	sxtb	r3, r1
 8006396:	2b00      	cmp	r3, #0
{
 8006398:	4605      	mov	r5, r0
 800639a:	f04f 021c 	mov.w	r2, #28
 800639e:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80063a2:	bfb5      	itete	lt
 80063a4:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 80063a8:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80063ac:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 80063ae:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80063b2:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 80063b4:	2400      	movs	r4, #0
 80063b6:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80063b8:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80063ba:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80063bc:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d009      	beq.n	80063d8 <HAL_PCD_EP_ClrStall+0x46>
 80063c4:	2301      	movs	r3, #1
 80063c6:	f885 3384 	strb.w	r3, [r5, #900]	; 0x384
  USB_EPClearStall(hpcd->Instance , ep);
 80063ca:	6828      	ldr	r0, [r5, #0]
 80063cc:	f002 fb90 	bl	8008af0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80063d0:	f885 4384 	strb.w	r4, [r5, #900]	; 0x384
  return HAL_OK;
 80063d4:	4620      	mov	r0, r4
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80063d8:	2002      	movs	r0, #2
}
 80063da:	bd38      	pop	{r3, r4, r5, pc}

080063dc <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd); 
 80063dc:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 80063e0:	2b01      	cmp	r3, #1
{
 80063e2:	b510      	push	{r4, lr}
 80063e4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80063e6:	d011      	beq.n	800640c <HAL_PCD_EP_Flush+0x30>
 80063e8:	2301      	movs	r3, #1
 80063ea:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  if ((ep_addr & 0x80) == 0x80)
 80063ee:	060b      	lsls	r3, r1, #24
 80063f0:	d508      	bpl.n	8006404 <HAL_PCD_EP_Flush+0x28>
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 80063f2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80063f6:	6800      	ldr	r0, [r0, #0]
 80063f8:	f002 f988 	bl	800870c <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd); 
 80063fc:	2000      	movs	r0, #0
 80063fe:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8006402:	bd10      	pop	{r4, pc}
    USB_FlushRxFifo(hpcd->Instance);
 8006404:	6800      	ldr	r0, [r0, #0]
 8006406:	f002 f993 	bl	8008730 <USB_FlushRxFifo>
 800640a:	e7f7      	b.n	80063fc <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd); 
 800640c:	2002      	movs	r0, #2
}
 800640e:	bd10      	pop	{r4, pc}

08006410 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006410:	6800      	ldr	r0, [r0, #0]
{
 8006412:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006414:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 8006416:	b921      	cbnz	r1, 8006422 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (size << 16) | Tx_Offset;
 8006418:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800641c:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
  }
  
  return HAL_OK;
}
 800641e:	2000      	movs	r0, #0
 8006420:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006422:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (index = 0; index < (fifo - 1); index++)
 8006424:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006426:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (index = 0; index < (fifo - 1); index++)
 800642a:	1e4e      	subs	r6, r1, #1
 800642c:	b2ec      	uxtb	r4, r5
 800642e:	42b4      	cmp	r4, r6
 8006430:	f105 0501 	add.w	r5, r5, #1
 8006434:	db06      	blt.n	8006444 <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
 8006436:	313f      	adds	r1, #63	; 0x3f
 8006438:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800643c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006440:	6043      	str	r3, [r0, #4]
 8006442:	e7ec      	b.n	800641e <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[index] >> 16);
 8006444:	3440      	adds	r4, #64	; 0x40
 8006446:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800644a:	6864      	ldr	r4, [r4, #4]
 800644c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006450:	e7ec      	b.n	800642c <HAL_PCDEx_SetTxFiFo+0x1c>

08006452 <HAL_PCDEx_SetRxFiFo>:
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8006452:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8006454:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8006456:	6259      	str	r1, [r3, #36]	; 0x24
}
 8006458:	4770      	bx	lr

0800645a <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800645a:	6802      	ldr	r2, [r0, #0]
{
 800645c:	4603      	mov	r3, r0
  
  hpcd->lpm_active = ENABLE;
 800645e:	2101      	movs	r1, #1
 8006460:	f8c0 13c0 	str.w	r1, [r0, #960]	; 0x3c0
  hpcd->LPM_State = LPM_L0;
 8006464:	2000      	movs	r0, #0
 8006466:	f883 03b8 	strb.w	r0, [r3, #952]	; 0x3b8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800646a:	6993      	ldr	r3, [r2, #24]
 800646c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006470:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006472:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006478:	f043 0303 	orr.w	r3, r3, #3
 800647c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;  
}
 800647e:	4770      	bx	lr

08006480 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8006480:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = ENABLE; 
 8006482:	2301      	movs	r3, #1
 8006484:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8006488:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800648a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800648e:	6393      	str	r3, [r2, #56]	; 0x38
  
  return HAL_OK;  
}
 8006490:	2000      	movs	r0, #0
 8006492:	4770      	bx	lr

08006494 <HAL_PCDEx_LPM_Callback>:
 8006494:	4770      	bx	lr
	...

08006498 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006498:	4b02      	ldr	r3, [pc, #8]	; (80064a4 <HAL_PWREx_GetVoltageRange+0xc>)
 800649a:	6818      	ldr	r0, [r3, #0]
}
 800649c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	40007000 	.word	0x40007000

080064a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80064a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80064aa:	4d1e      	ldr	r5, [pc, #120]	; (8006524 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80064ac:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80064ae:	00da      	lsls	r2, r3, #3
{
 80064b0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80064b2:	d518      	bpl.n	80064e6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80064b4:	f7ff fff0 	bl	8006498 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80064b8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80064bc:	d123      	bne.n	8006506 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80064be:	2c80      	cmp	r4, #128	; 0x80
 80064c0:	d929      	bls.n	8006516 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80064c2:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80064c4:	bf8c      	ite	hi
 80064c6:	2002      	movhi	r0, #2
 80064c8:	2001      	movls	r0, #1
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 80064ca:	4a17      	ldr	r2, [pc, #92]	; (8006528 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80064cc:	6813      	ldr	r3, [r2, #0]
 80064ce:	f023 0307 	bic.w	r3, r3, #7
 80064d2:	4303      	orrs	r3, r0
 80064d4:	6013      	str	r3, [r2, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80064d6:	6813      	ldr	r3, [r2, #0]
 80064d8:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 80064dc:	1a18      	subs	r0, r3, r0
 80064de:	bf18      	it	ne
 80064e0:	2001      	movne	r0, #1
 80064e2:	b003      	add	sp, #12
 80064e4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80064e6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80064e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ec:	65ab      	str	r3, [r5, #88]	; 0x58
 80064ee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80064f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f4:	9301      	str	r3, [sp, #4]
 80064f6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80064f8:	f7ff ffce 	bl	8006498 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80064fc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80064fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006502:	65ab      	str	r3, [r5, #88]	; 0x58
 8006504:	e7d8      	b.n	80064b8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8006506:	2c80      	cmp	r4, #128	; 0x80
 8006508:	d807      	bhi.n	800651a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800650a:	d008      	beq.n	800651e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7) 
 800650c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8006510:	4258      	negs	r0, r3
 8006512:	4158      	adcs	r0, r3
 8006514:	e7d9      	b.n	80064ca <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006516:	2000      	movs	r0, #0
 8006518:	e7d7      	b.n	80064ca <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800651a:	2003      	movs	r0, #3
 800651c:	e7d5      	b.n	80064ca <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800651e:	2002      	movs	r0, #2
 8006520:	e7d3      	b.n	80064ca <RCC_SetFlashLatencyFromMSIRange+0x22>
 8006522:	bf00      	nop
 8006524:	40021000 	.word	0x40021000
 8006528:	40022000 	.word	0x40022000

0800652c <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800652c:	4b46      	ldr	r3, [pc, #280]	; (8006648 <HAL_RCC_GetSysClockFreq+0x11c>)
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	f012 0f0c 	tst.w	r2, #12
{
 8006534:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8006536:	d009      	beq.n	800654c <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800653e:	2a0c      	cmp	r2, #12
 8006540:	d148      	bne.n	80065d4 <HAL_RCC_GetSysClockFreq+0xa8>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8006542:	68da      	ldr	r2, [r3, #12]
 8006544:	f002 0203 	and.w	r2, r2, #3
 8006548:	2a01      	cmp	r2, #1
 800654a:	d143      	bne.n	80065d4 <HAL_RCC_GetSysClockFreq+0xa8>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	0712      	lsls	r2, r2, #28
 8006550:	d437      	bmi.n	80065c2 <HAL_RCC_GetSysClockFreq+0x96>
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 8006552:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8006556:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800655a:	fa91 f1a1 	rbit	r1, r1
 800655e:	fab1 f181 	clz	r1, r1
 8006562:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8006566:	40ca      	lsrs	r2, r1
    msirange = MSIRangeTable[msirange];
 8006568:	4938      	ldr	r1, [pc, #224]	; (800664c <HAL_RCC_GetSysClockFreq+0x120>)
 800656a:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800656e:	689a      	ldr	r2, [r3, #8]
      sysclockfreq = msirange;
 8006570:	f012 0f0c 	tst.w	r2, #12
 8006574:	bf0c      	ite	eq
 8006576:	4620      	moveq	r0, r4
 8006578:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	f002 020c 	and.w	r2, r2, #12
 8006580:	2a0c      	cmp	r2, #12
 8006582:	d154      	bne.n	800662e <HAL_RCC_GetSysClockFreq+0x102>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006584:	68da      	ldr	r2, [r3, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8006586:	68d8      	ldr	r0, [r3, #12]
 8006588:	2170      	movs	r1, #112	; 0x70
 800658a:	fa91 f1a1 	rbit	r1, r1
 800658e:	fab1 f181 	clz	r1, r1
 8006592:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8006596:	40c8      	lsrs	r0, r1
 8006598:	1c41      	adds	r1, r0, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800659a:	f002 0003 	and.w	r0, r2, #3
    switch (pllsource)
 800659e:	2802      	cmp	r0, #2
 80065a0:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80065a4:	d028      	beq.n	80065f8 <HAL_RCC_GetSysClockFreq+0xcc>
 80065a6:	2803      	cmp	r0, #3
 80065a8:	d042      	beq.n	8006630 <HAL_RCC_GetSysClockFreq+0x104>
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80065aa:	68d8      	ldr	r0, [r3, #12]
 80065ac:	fa92 f2a2 	rbit	r2, r2
 80065b0:	fab2 f282 	clz	r2, r2
 80065b4:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 80065b8:	40d0      	lsrs	r0, r2
 80065ba:	fbb4 f1f1 	udiv	r1, r4, r1
 80065be:	4348      	muls	r0, r1
      break;
 80065c0:	e027      	b.n	8006612 <HAL_RCC_GetSysClockFreq+0xe6>
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	21f0      	movs	r1, #240	; 0xf0
 80065c6:	fa91 f1a1 	rbit	r1, r1
 80065ca:	fab1 f181 	clz	r1, r1
 80065ce:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80065d2:	e7c8      	b.n	8006566 <HAL_RCC_GetSysClockFreq+0x3a>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80065d4:	689a      	ldr	r2, [r3, #8]
 80065d6:	f002 020c 	and.w	r2, r2, #12
 80065da:	2a04      	cmp	r2, #4
 80065dc:	d007      	beq.n	80065ee <HAL_RCC_GetSysClockFreq+0xc2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	f002 020c 	and.w	r2, r2, #12
 80065e4:	2a08      	cmp	r2, #8
 80065e6:	d104      	bne.n	80065f2 <HAL_RCC_GetSysClockFreq+0xc6>
    sysclockfreq = HSE_VALUE;
 80065e8:	4819      	ldr	r0, [pc, #100]	; (8006650 <HAL_RCC_GetSysClockFreq+0x124>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80065ea:	2400      	movs	r4, #0
 80065ec:	e7c5      	b.n	800657a <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 80065ee:	4819      	ldr	r0, [pc, #100]	; (8006654 <HAL_RCC_GetSysClockFreq+0x128>)
 80065f0:	e7fb      	b.n	80065ea <HAL_RCC_GetSysClockFreq+0xbe>
  uint32_t sysclockfreq = 0U;
 80065f2:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80065f4:	4604      	mov	r4, r0
 80065f6:	e7c0      	b.n	800657a <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80065f8:	68d8      	ldr	r0, [r3, #12]
 80065fa:	fa92 f2a2 	rbit	r2, r2
 80065fe:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 8006602:	fab2 f282 	clz	r2, r2
 8006606:	fa20 f202 	lsr.w	r2, r0, r2
 800660a:	4812      	ldr	r0, [pc, #72]	; (8006654 <HAL_RCC_GetSysClockFreq+0x128>)
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 800660c:	fbb0 f0f1 	udiv	r0, r0, r1
 8006610:	4350      	muls	r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006618:	fa92 f2a2 	rbit	r2, r2
 800661c:	fab2 f282 	clz	r2, r2
 8006620:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8006624:	40d3      	lsrs	r3, r2
 8006626:	3301      	adds	r3, #1
 8006628:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800662a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800662e:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8006630:	68d8      	ldr	r0, [r3, #12]
 8006632:	fa92 f2a2 	rbit	r2, r2
 8006636:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 800663a:	fab2 f282 	clz	r2, r2
 800663e:	fa20 f202 	lsr.w	r2, r0, r2
 8006642:	4803      	ldr	r0, [pc, #12]	; (8006650 <HAL_RCC_GetSysClockFreq+0x124>)
 8006644:	e7e2      	b.n	800660c <HAL_RCC_GetSysClockFreq+0xe0>
 8006646:	bf00      	nop
 8006648:	40021000 	.word	0x40021000
 800664c:	0800d988 	.word	0x0800d988
 8006650:	007a1200 	.word	0x007a1200
 8006654:	00f42400 	.word	0x00f42400

08006658 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006658:	6803      	ldr	r3, [r0, #0]
{
 800665a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800665e:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006660:	06d8      	lsls	r0, r3, #27
 8006662:	d541      	bpl.n	80066e8 <HAL_RCC_OscConfig+0x90>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8006664:	4ca5      	ldr	r4, [pc, #660]	; (80068fc <HAL_RCC_OscConfig+0x2a4>)
 8006666:	68a3      	ldr	r3, [r4, #8]
 8006668:	f013 0f0c 	tst.w	r3, #12
 800666c:	d166      	bne.n	800673c <HAL_RCC_OscConfig+0xe4>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	0799      	lsls	r1, r3, #30
 8006672:	d505      	bpl.n	8006680 <HAL_RCC_OscConfig+0x28>
 8006674:	69ab      	ldr	r3, [r5, #24]
 8006676:	b91b      	cbnz	r3, 8006680 <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 8006678:	2001      	movs	r0, #1
}
 800667a:	b002      	add	sp, #8
 800667c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	6a28      	ldr	r0, [r5, #32]
 8006684:	071a      	lsls	r2, r3, #28
 8006686:	bf56      	itet	pl
 8006688:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800668c:	6823      	ldrmi	r3, [r4, #0]
 800668e:	091b      	lsrpl	r3, r3, #4
 8006690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006694:	4283      	cmp	r3, r0
 8006696:	d23c      	bcs.n	8006712 <HAL_RCC_OscConfig+0xba>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006698:	f7ff ff06 	bl	80064a8 <RCC_SetFlashLatencyFromMSIRange>
 800669c:	2800      	cmp	r0, #0
 800669e:	d1eb      	bne.n	8006678 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	f043 0308 	orr.w	r3, r3, #8
 80066a6:	6023      	str	r3, [r4, #0]
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	6a2a      	ldr	r2, [r5, #32]
 80066ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066b0:	4313      	orrs	r3, r2
 80066b2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066b4:	6863      	ldr	r3, [r4, #4]
 80066b6:	69ea      	ldr	r2, [r5, #28]
 80066b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80066c0:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80066c2:	f7ff ff33 	bl	800652c <HAL_RCC_GetSysClockFreq>
 80066c6:	68a3      	ldr	r3, [r4, #8]
 80066c8:	22f0      	movs	r2, #240	; 0xf0
 80066ca:	fa92 f2a2 	rbit	r2, r2
 80066ce:	fab2 f282 	clz	r2, r2
 80066d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066d6:	40d3      	lsrs	r3, r2
 80066d8:	4a89      	ldr	r2, [pc, #548]	; (8006900 <HAL_RCC_OscConfig+0x2a8>)
 80066da:	5cd3      	ldrb	r3, [r2, r3]
 80066dc:	40d8      	lsrs	r0, r3
 80066de:	4b89      	ldr	r3, [pc, #548]	; (8006904 <HAL_RCC_OscConfig+0x2ac>)
 80066e0:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80066e2:	2000      	movs	r0, #0
 80066e4:	f7fe feb0 	bl	8005448 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	07de      	lsls	r6, r3, #31
 80066ec:	d45b      	bmi.n	80067a6 <HAL_RCC_OscConfig+0x14e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066ee:	682b      	ldr	r3, [r5, #0]
 80066f0:	079c      	lsls	r4, r3, #30
 80066f2:	f100 80a3 	bmi.w	800683c <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066f6:	682b      	ldr	r3, [r5, #0]
 80066f8:	0719      	lsls	r1, r3, #28
 80066fa:	f100 80e7 	bmi.w	80068cc <HAL_RCC_OscConfig+0x274>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066fe:	682b      	ldr	r3, [r5, #0]
 8006700:	075a      	lsls	r2, r3, #29
 8006702:	f100 8115 	bmi.w	8006930 <HAL_RCC_OscConfig+0x2d8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006706:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006708:	2a00      	cmp	r2, #0
 800670a:	f040 817c 	bne.w	8006a06 <HAL_RCC_OscConfig+0x3ae>
  return HAL_OK;
 800670e:	2000      	movs	r0, #0
 8006710:	e7b3      	b.n	800667a <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	f043 0308 	orr.w	r3, r3, #8
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006720:	4303      	orrs	r3, r0
 8006722:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006724:	6863      	ldr	r3, [r4, #4]
 8006726:	69ea      	ldr	r2, [r5, #28]
 8006728:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800672c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006730:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006732:	f7ff feb9 	bl	80064a8 <RCC_SetFlashLatencyFromMSIRange>
 8006736:	2800      	cmp	r0, #0
 8006738:	d0c3      	beq.n	80066c2 <HAL_RCC_OscConfig+0x6a>
 800673a:	e79d      	b.n	8006678 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800673c:	69ab      	ldr	r3, [r5, #24]
 800673e:	b313      	cbz	r3, 8006786 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_ENABLE();
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	f043 0301 	orr.w	r3, r3, #1
 8006746:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006748:	f7fe fea6 	bl	8005498 <HAL_GetTick>
 800674c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	079b      	lsls	r3, r3, #30
 8006752:	d511      	bpl.n	8006778 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	f043 0308 	orr.w	r3, r3, #8
 800675a:	6023      	str	r3, [r4, #0]
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	6a2a      	ldr	r2, [r5, #32]
 8006760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006764:	4313      	orrs	r3, r2
 8006766:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006768:	6863      	ldr	r3, [r4, #4]
 800676a:	69ea      	ldr	r2, [r5, #28]
 800676c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006770:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006774:	6063      	str	r3, [r4, #4]
 8006776:	e7b7      	b.n	80066e8 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006778:	f7fe fe8e 	bl	8005498 <HAL_GetTick>
 800677c:	1b80      	subs	r0, r0, r6
 800677e:	2802      	cmp	r0, #2
 8006780:	d9e5      	bls.n	800674e <HAL_RCC_OscConfig+0xf6>
            return HAL_TIMEOUT;
 8006782:	2003      	movs	r0, #3
 8006784:	e779      	b.n	800667a <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	f023 0301 	bic.w	r3, r3, #1
 800678c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800678e:	f7fe fe83 	bl	8005498 <HAL_GetTick>
 8006792:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	079f      	lsls	r7, r3, #30
 8006798:	d5a6      	bpl.n	80066e8 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800679a:	f7fe fe7d 	bl	8005498 <HAL_GetTick>
 800679e:	1b80      	subs	r0, r0, r6
 80067a0:	2802      	cmp	r0, #2
 80067a2:	d9f7      	bls.n	8006794 <HAL_RCC_OscConfig+0x13c>
 80067a4:	e7ed      	b.n	8006782 <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80067a6:	4c55      	ldr	r4, [pc, #340]	; (80068fc <HAL_RCC_OscConfig+0x2a4>)
 80067a8:	68a3      	ldr	r3, [r4, #8]
 80067aa:	f003 030c 	and.w	r3, r3, #12
 80067ae:	2b08      	cmp	r3, #8
 80067b0:	d009      	beq.n	80067c6 <HAL_RCC_OscConfig+0x16e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80067b2:	68a3      	ldr	r3, [r4, #8]
 80067b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80067b8:	2b0c      	cmp	r3, #12
 80067ba:	d10b      	bne.n	80067d4 <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80067bc:	68e3      	ldr	r3, [r4, #12]
 80067be:	f003 0303 	and.w	r3, r3, #3
 80067c2:	2b03      	cmp	r3, #3
 80067c4:	d106      	bne.n	80067d4 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	0398      	lsls	r0, r3, #14
 80067ca:	d590      	bpl.n	80066ee <HAL_RCC_OscConfig+0x96>
 80067cc:	686b      	ldr	r3, [r5, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d18d      	bne.n	80066ee <HAL_RCC_OscConfig+0x96>
 80067d2:	e751      	b.n	8006678 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067d4:	686b      	ldr	r3, [r5, #4]
 80067d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067da:	d110      	bne.n	80067fe <HAL_RCC_OscConfig+0x1a6>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067e2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80067e4:	f7fe fe58 	bl	8005498 <HAL_GetTick>
 80067e8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	0399      	lsls	r1, r3, #14
 80067ee:	f53f af7e 	bmi.w	80066ee <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067f2:	f7fe fe51 	bl	8005498 <HAL_GetTick>
 80067f6:	1b80      	subs	r0, r0, r6
 80067f8:	2864      	cmp	r0, #100	; 0x64
 80067fa:	d9f6      	bls.n	80067ea <HAL_RCC_OscConfig+0x192>
 80067fc:	e7c1      	b.n	8006782 <HAL_RCC_OscConfig+0x12a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006802:	d104      	bne.n	800680e <HAL_RCC_OscConfig+0x1b6>
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800680a:	6023      	str	r3, [r4, #0]
 800680c:	e7e6      	b.n	80067dc <HAL_RCC_OscConfig+0x184>
 800680e:	6822      	ldr	r2, [r4, #0]
 8006810:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006814:	6022      	str	r2, [r4, #0]
 8006816:	6822      	ldr	r2, [r4, #0]
 8006818:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800681c:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e0      	bne.n	80067e4 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8006822:	f7fe fe39 	bl	8005498 <HAL_GetTick>
 8006826:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	039a      	lsls	r2, r3, #14
 800682c:	f57f af5f 	bpl.w	80066ee <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006830:	f7fe fe32 	bl	8005498 <HAL_GetTick>
 8006834:	1b80      	subs	r0, r0, r6
 8006836:	2864      	cmp	r0, #100	; 0x64
 8006838:	d9f6      	bls.n	8006828 <HAL_RCC_OscConfig+0x1d0>
 800683a:	e7a2      	b.n	8006782 <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800683c:	4c2f      	ldr	r4, [pc, #188]	; (80068fc <HAL_RCC_OscConfig+0x2a4>)
 800683e:	68a3      	ldr	r3, [r4, #8]
 8006840:	f003 030c 	and.w	r3, r3, #12
 8006844:	2b04      	cmp	r3, #4
 8006846:	d009      	beq.n	800685c <HAL_RCC_OscConfig+0x204>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006848:	68a3      	ldr	r3, [r4, #8]
 800684a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800684e:	2b0c      	cmp	r3, #12
 8006850:	d119      	bne.n	8006886 <HAL_RCC_OscConfig+0x22e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006852:	68e3      	ldr	r3, [r4, #12]
 8006854:	f003 0303 	and.w	r3, r3, #3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d114      	bne.n	8006886 <HAL_RCC_OscConfig+0x22e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800685c:	6823      	ldr	r3, [r4, #0]
 800685e:	055b      	lsls	r3, r3, #21
 8006860:	d503      	bpl.n	800686a <HAL_RCC_OscConfig+0x212>
 8006862:	68eb      	ldr	r3, [r5, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	f43f af07 	beq.w	8006678 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800686a:	6861      	ldr	r1, [r4, #4]
 800686c:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8006870:	fa93 f3a3 	rbit	r3, r3
 8006874:	fab3 f283 	clz	r2, r3
 8006878:	692b      	ldr	r3, [r5, #16]
 800687a:	4093      	lsls	r3, r2
 800687c:	f021 52f8 	bic.w	r2, r1, #520093696	; 0x1f000000
 8006880:	4313      	orrs	r3, r2
 8006882:	6063      	str	r3, [r4, #4]
 8006884:	e737      	b.n	80066f6 <HAL_RCC_OscConfig+0x9e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006886:	68eb      	ldr	r3, [r5, #12]
 8006888:	b17b      	cbz	r3, 80068aa <HAL_RCC_OscConfig+0x252>
        __HAL_RCC_HSI_ENABLE();
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006890:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006892:	f7fe fe01 	bl	8005498 <HAL_GetTick>
 8006896:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	055f      	lsls	r7, r3, #21
 800689c:	d4e5      	bmi.n	800686a <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800689e:	f7fe fdfb 	bl	8005498 <HAL_GetTick>
 80068a2:	1b80      	subs	r0, r0, r6
 80068a4:	2802      	cmp	r0, #2
 80068a6:	d9f7      	bls.n	8006898 <HAL_RCC_OscConfig+0x240>
 80068a8:	e76b      	b.n	8006782 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_DISABLE();
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80068b2:	f7fe fdf1 	bl	8005498 <HAL_GetTick>
 80068b6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	0558      	lsls	r0, r3, #21
 80068bc:	f57f af1b 	bpl.w	80066f6 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068c0:	f7fe fdea 	bl	8005498 <HAL_GetTick>
 80068c4:	1b80      	subs	r0, r0, r6
 80068c6:	2802      	cmp	r0, #2
 80068c8:	d9f6      	bls.n	80068b8 <HAL_RCC_OscConfig+0x260>
 80068ca:	e75a      	b.n	8006782 <HAL_RCC_OscConfig+0x12a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068cc:	696b      	ldr	r3, [r5, #20]
 80068ce:	4c0b      	ldr	r4, [pc, #44]	; (80068fc <HAL_RCC_OscConfig+0x2a4>)
 80068d0:	b1d3      	cbz	r3, 8006908 <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_LSI_ENABLE();
 80068d2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80068d6:	f043 0301 	orr.w	r3, r3, #1
 80068da:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80068de:	f7fe fddb 	bl	8005498 <HAL_GetTick>
 80068e2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80068e4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80068e8:	079b      	lsls	r3, r3, #30
 80068ea:	f53f af08 	bmi.w	80066fe <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068ee:	f7fe fdd3 	bl	8005498 <HAL_GetTick>
 80068f2:	1b80      	subs	r0, r0, r6
 80068f4:	2802      	cmp	r0, #2
 80068f6:	d9f5      	bls.n	80068e4 <HAL_RCC_OscConfig+0x28c>
 80068f8:	e743      	b.n	8006782 <HAL_RCC_OscConfig+0x12a>
 80068fa:	bf00      	nop
 80068fc:	40021000 	.word	0x40021000
 8006900:	0800d96d 	.word	0x0800d96d
 8006904:	20000014 	.word	0x20000014
      __HAL_RCC_LSI_DISABLE();
 8006908:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800690c:	f023 0301 	bic.w	r3, r3, #1
 8006910:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006914:	f7fe fdc0 	bl	8005498 <HAL_GetTick>
 8006918:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800691a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800691e:	079f      	lsls	r7, r3, #30
 8006920:	f57f aeed 	bpl.w	80066fe <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006924:	f7fe fdb8 	bl	8005498 <HAL_GetTick>
 8006928:	1b80      	subs	r0, r0, r6
 800692a:	2802      	cmp	r0, #2
 800692c:	d9f5      	bls.n	800691a <HAL_RCC_OscConfig+0x2c2>
 800692e:	e728      	b.n	8006782 <HAL_RCC_OscConfig+0x12a>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006930:	4c66      	ldr	r4, [pc, #408]	; (8006acc <HAL_RCC_OscConfig+0x474>)
 8006932:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006934:	00de      	lsls	r6, r3, #3
 8006936:	d427      	bmi.n	8006988 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006938:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800693a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800693e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006940:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006946:	9301      	str	r3, [sp, #4]
 8006948:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800694a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800694c:	4e60      	ldr	r6, [pc, #384]	; (8006ad0 <HAL_RCC_OscConfig+0x478>)
 800694e:	6833      	ldr	r3, [r6, #0]
 8006950:	05d8      	lsls	r0, r3, #23
 8006952:	d51b      	bpl.n	800698c <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006954:	68ab      	ldr	r3, [r5, #8]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d129      	bne.n	80069ae <HAL_RCC_OscConfig+0x356>
 800695a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800695e:	f043 0301 	orr.w	r3, r3, #1
 8006962:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8006966:	f7fe fd97 	bl	8005498 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800696a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800696e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8006970:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006974:	079a      	lsls	r2, r3, #30
 8006976:	d540      	bpl.n	80069fa <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8006978:	2f00      	cmp	r7, #0
 800697a:	f43f aec4 	beq.w	8006706 <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_PWR_CLK_DISABLE();
 800697e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006984:	65a3      	str	r3, [r4, #88]	; 0x58
 8006986:	e6be      	b.n	8006706 <HAL_RCC_OscConfig+0xae>
    FlagStatus       pwrclkchanged = RESET;
 8006988:	2700      	movs	r7, #0
 800698a:	e7df      	b.n	800694c <HAL_RCC_OscConfig+0x2f4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800698c:	6833      	ldr	r3, [r6, #0]
 800698e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006992:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006994:	f7fe fd80 	bl	8005498 <HAL_GetTick>
 8006998:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800699a:	6833      	ldr	r3, [r6, #0]
 800699c:	05d9      	lsls	r1, r3, #23
 800699e:	d4d9      	bmi.n	8006954 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069a0:	f7fe fd7a 	bl	8005498 <HAL_GetTick>
 80069a4:	eba0 0008 	sub.w	r0, r0, r8
 80069a8:	2802      	cmp	r0, #2
 80069aa:	d9f6      	bls.n	800699a <HAL_RCC_OscConfig+0x342>
 80069ac:	e6e9      	b.n	8006782 <HAL_RCC_OscConfig+0x12a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069ae:	2b05      	cmp	r3, #5
 80069b0:	d106      	bne.n	80069c0 <HAL_RCC_OscConfig+0x368>
 80069b2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80069b6:	f043 0304 	orr.w	r3, r3, #4
 80069ba:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80069be:	e7cc      	b.n	800695a <HAL_RCC_OscConfig+0x302>
 80069c0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80069c4:	f022 0201 	bic.w	r2, r2, #1
 80069c8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80069cc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80069d0:	f022 0204 	bic.w	r2, r2, #4
 80069d4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1c4      	bne.n	8006966 <HAL_RCC_OscConfig+0x30e>
      tickstart = HAL_GetTick();
 80069dc:	f7fe fd5c 	bl	8005498 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069e0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80069e4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80069e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80069ea:	079b      	lsls	r3, r3, #30
 80069ec:	d5c4      	bpl.n	8006978 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ee:	f7fe fd53 	bl	8005498 <HAL_GetTick>
 80069f2:	1b80      	subs	r0, r0, r6
 80069f4:	4540      	cmp	r0, r8
 80069f6:	d9f6      	bls.n	80069e6 <HAL_RCC_OscConfig+0x38e>
 80069f8:	e6c3      	b.n	8006782 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069fa:	f7fe fd4d 	bl	8005498 <HAL_GetTick>
 80069fe:	1b80      	subs	r0, r0, r6
 8006a00:	4540      	cmp	r0, r8
 8006a02:	d9b5      	bls.n	8006970 <HAL_RCC_OscConfig+0x318>
 8006a04:	e6bd      	b.n	8006782 <HAL_RCC_OscConfig+0x12a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a06:	4c31      	ldr	r4, [pc, #196]	; (8006acc <HAL_RCC_OscConfig+0x474>)
 8006a08:	68a3      	ldr	r3, [r4, #8]
 8006a0a:	f003 030c 	and.w	r3, r3, #12
 8006a0e:	2b0c      	cmp	r3, #12
 8006a10:	f43f ae32 	beq.w	8006678 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8006a14:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a16:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8006a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a1c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a1e:	d137      	bne.n	8006a90 <HAL_RCC_OscConfig+0x438>
        tickstart = HAL_GetTick();
 8006a20:	f7fe fd3a 	bl	8005498 <HAL_GetTick>
 8006a24:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	019f      	lsls	r7, r3, #6
 8006a2a:	d42b      	bmi.n	8006a84 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a2c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8006a2e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006a30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006a34:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006a36:	3a01      	subs	r2, #1
 8006a38:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006a3c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8006a3e:	0912      	lsrs	r2, r2, #4
 8006a40:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8006a44:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8006a46:	0852      	lsrs	r2, r2, #1
 8006a48:	3a01      	subs	r2, #1
 8006a4a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8006a4e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8006a50:	0852      	lsrs	r2, r2, #1
 8006a52:	3a01      	subs	r2, #1
 8006a54:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8006a58:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a60:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a62:	68e3      	ldr	r3, [r4, #12]
 8006a64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a68:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8006a6a:	f7fe fd15 	bl	8005498 <HAL_GetTick>
 8006a6e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8006a70:	6823      	ldr	r3, [r4, #0]
 8006a72:	0198      	lsls	r0, r3, #6
 8006a74:	f53f ae4b 	bmi.w	800670e <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a78:	f7fe fd0e 	bl	8005498 <HAL_GetTick>
 8006a7c:	1b40      	subs	r0, r0, r5
 8006a7e:	2802      	cmp	r0, #2
 8006a80:	d9f6      	bls.n	8006a70 <HAL_RCC_OscConfig+0x418>
 8006a82:	e67e      	b.n	8006782 <HAL_RCC_OscConfig+0x12a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a84:	f7fe fd08 	bl	8005498 <HAL_GetTick>
 8006a88:	1b80      	subs	r0, r0, r6
 8006a8a:	2802      	cmp	r0, #2
 8006a8c:	d9cb      	bls.n	8006a26 <HAL_RCC_OscConfig+0x3ce>
 8006a8e:	e678      	b.n	8006782 <HAL_RCC_OscConfig+0x12a>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	0119      	lsls	r1, r3, #4
 8006a94:	d406      	bmi.n	8006aa4 <HAL_RCC_OscConfig+0x44c>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8006a96:	6823      	ldr	r3, [r4, #0]
           && 
 8006a98:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006a9a:	bf5e      	ittt	pl
 8006a9c:	68e3      	ldrpl	r3, [r4, #12]
 8006a9e:	f023 0303 	bicpl.w	r3, r3, #3
 8006aa2:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006aa4:	68e3      	ldr	r3, [r4, #12]
 8006aa6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aae:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8006ab0:	f7fe fcf2 	bl	8005498 <HAL_GetTick>
 8006ab4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	019b      	lsls	r3, r3, #6
 8006aba:	f57f ae28 	bpl.w	800670e <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006abe:	f7fe fceb 	bl	8005498 <HAL_GetTick>
 8006ac2:	1b40      	subs	r0, r0, r5
 8006ac4:	2802      	cmp	r0, #2
 8006ac6:	d9f6      	bls.n	8006ab6 <HAL_RCC_OscConfig+0x45e>
 8006ac8:	e65b      	b.n	8006782 <HAL_RCC_OscConfig+0x12a>
 8006aca:	bf00      	nop
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	40007000 	.word	0x40007000

08006ad4 <HAL_RCC_GetHCLKFreq>:
}
 8006ad4:	4b01      	ldr	r3, [pc, #4]	; (8006adc <HAL_RCC_GetHCLKFreq+0x8>)
 8006ad6:	6818      	ldr	r0, [r3, #0]
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	20000014 	.word	0x20000014

08006ae0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8006ae0:	4b08      	ldr	r3, [pc, #32]	; (8006b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ae2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	fa92 f2a2 	rbit	r2, r2
 8006aec:	fab2 f282 	clz	r2, r2
 8006af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006af4:	40d3      	lsrs	r3, r2
 8006af6:	4a04      	ldr	r2, [pc, #16]	; (8006b08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006af8:	5cd3      	ldrb	r3, [r2, r3]
 8006afa:	4a04      	ldr	r2, [pc, #16]	; (8006b0c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8006afc:	6810      	ldr	r0, [r2, #0]
}
 8006afe:	40d8      	lsrs	r0, r3
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	40021000 	.word	0x40021000
 8006b08:	0800d97d 	.word	0x0800d97d
 8006b0c:	20000014 	.word	0x20000014

08006b10 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8006b10:	4b08      	ldr	r3, [pc, #32]	; (8006b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b12:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	fa92 f2a2 	rbit	r2, r2
 8006b1c:	fab2 f282 	clz	r2, r2
 8006b20:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006b24:	40d3      	lsrs	r3, r2
 8006b26:	4a04      	ldr	r2, [pc, #16]	; (8006b38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b28:	5cd3      	ldrb	r3, [r2, r3]
 8006b2a:	4a04      	ldr	r2, [pc, #16]	; (8006b3c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8006b2c:	6810      	ldr	r0, [r2, #0]
}
 8006b2e:	40d8      	lsrs	r0, r3
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	40021000 	.word	0x40021000
 8006b38:	0800d97d 	.word	0x0800d97d
 8006b3c:	20000014 	.word	0x20000014

08006b40 <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006b40:	4a02      	ldr	r2, [pc, #8]	; (8006b4c <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8006b42:	6813      	ldr	r3, [r2, #0]
 8006b44:	f043 0304 	orr.w	r3, r3, #4
 8006b48:	6013      	str	r3, [r2, #0]
 8006b4a:	4770      	bx	lr
 8006b4c:	40021000 	.word	0x40021000

08006b50 <SD_CmdResp2Error>:
  */
static HAL_SD_ErrorTypedef SD_CmdResp2Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8006b50:	6803      	ldr	r3, [r0, #0]
 8006b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b54:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006b58:	d0fb      	beq.n	8006b52 <SD_CmdResp2Error+0x2>
  {
  }
    
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8006b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b5c:	0752      	lsls	r2, r2, #29
 8006b5e:	d503      	bpl.n	8006b68 <SD_CmdResp2Error+0x18>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8006b60:	2204      	movs	r2, #4
 8006b62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8006b64:	2003      	movs	r0, #3
 8006b66:	4770      	bx	lr
  }
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 8006b68:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006b6a:	f010 0001 	ands.w	r0, r0, #1
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8006b6e:	bf15      	itete	ne
 8006b70:	2001      	movne	r0, #1
  {
    /* No error flag set */
  }  
  
  /* Clear all the static flags */
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b72:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8006b76:	6398      	strne	r0, [r3, #56]	; 0x38
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b78:	639a      	streq	r2, [r3, #56]	; 0x38
  
  return errorstate;
}
 8006b7a:	4770      	bx	lr

08006b7c <SD_CmdResp1Error>:
{
 8006b7c:	b570      	push	{r4, r5, r6, lr}
 8006b7e:	4605      	mov	r5, r0
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8006b80:	6800      	ldr	r0, [r0, #0]
{
 8006b82:	460e      	mov	r6, r1
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8006b84:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006b86:	f013 0f45 	tst.w	r3, #69	; 0x45
 8006b8a:	d0fb      	beq.n	8006b84 <SD_CmdResp1Error+0x8>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8006b8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006b8e:	075b      	lsls	r3, r3, #29
 8006b90:	d503      	bpl.n	8006b9a <SD_CmdResp1Error+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8006b92:	2304      	movs	r3, #4
 8006b94:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8006b96:	2003      	movs	r0, #3
 8006b98:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 8006b9a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006b9c:	f014 0401 	ands.w	r4, r4, #1
 8006ba0:	d003      	beq.n	8006baa <SD_CmdResp1Error+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	bd70      	pop	{r4, r5, r6, pc}
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 8006baa:	f001 fc94 	bl	80084d6 <SDMMC_GetCommandResponse>
 8006bae:	42b0      	cmp	r0, r6
 8006bb0:	d001      	beq.n	8006bb6 <SD_CmdResp1Error+0x3a>
    return errorstate;
 8006bb2:	2010      	movs	r0, #16
 8006bb4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bb6:	6828      	ldr	r0, [r5, #0]
 8006bb8:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006bbc:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	f001 fc8c 	bl	80084dc <SDMMC_GetResponse>
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8006bc4:	4b27      	ldr	r3, [pc, #156]	; (8006c64 <SD_CmdResp1Error+0xe8>)
 8006bc6:	4003      	ands	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0ec      	beq.n	8006ba6 <SD_CmdResp1Error+0x2a>
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	db27      	blt.n	8006c20 <SD_CmdResp1Error+0xa4>
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 8006bd0:	0045      	lsls	r5, r0, #1
 8006bd2:	d427      	bmi.n	8006c24 <SD_CmdResp1Error+0xa8>
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 8006bd4:	0084      	lsls	r4, r0, #2
 8006bd6:	d427      	bmi.n	8006c28 <SD_CmdResp1Error+0xac>
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 8006bd8:	00c1      	lsls	r1, r0, #3
 8006bda:	d427      	bmi.n	8006c2c <SD_CmdResp1Error+0xb0>
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 8006bdc:	0102      	lsls	r2, r0, #4
 8006bde:	d427      	bmi.n	8006c30 <SD_CmdResp1Error+0xb4>
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 8006be0:	0143      	lsls	r3, r0, #5
 8006be2:	d427      	bmi.n	8006c34 <SD_CmdResp1Error+0xb8>
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 8006be4:	01c6      	lsls	r6, r0, #7
 8006be6:	d427      	bmi.n	8006c38 <SD_CmdResp1Error+0xbc>
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 8006be8:	0205      	lsls	r5, r0, #8
 8006bea:	d427      	bmi.n	8006c3c <SD_CmdResp1Error+0xc0>
  if((response_r1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 8006bec:	0244      	lsls	r4, r0, #9
 8006bee:	d4e0      	bmi.n	8006bb2 <SD_CmdResp1Error+0x36>
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 8006bf0:	0281      	lsls	r1, r0, #10
 8006bf2:	d425      	bmi.n	8006c40 <SD_CmdResp1Error+0xc4>
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 8006bf4:	02c2      	lsls	r2, r0, #11
 8006bf6:	d425      	bmi.n	8006c44 <SD_CmdResp1Error+0xc8>
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 8006bf8:	0303      	lsls	r3, r0, #12
 8006bfa:	d425      	bmi.n	8006c48 <SD_CmdResp1Error+0xcc>
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 8006bfc:	0346      	lsls	r6, r0, #13
 8006bfe:	d425      	bmi.n	8006c4c <SD_CmdResp1Error+0xd0>
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 8006c00:	0385      	lsls	r5, r0, #14
 8006c02:	d425      	bmi.n	8006c50 <SD_CmdResp1Error+0xd4>
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 8006c04:	03c4      	lsls	r4, r0, #15
 8006c06:	d425      	bmi.n	8006c54 <SD_CmdResp1Error+0xd8>
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 8006c08:	0401      	lsls	r1, r0, #16
 8006c0a:	d425      	bmi.n	8006c58 <SD_CmdResp1Error+0xdc>
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 8006c0c:	0442      	lsls	r2, r0, #17
 8006c0e:	d425      	bmi.n	8006c5c <SD_CmdResp1Error+0xe0>
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 8006c10:	0483      	lsls	r3, r0, #18
 8006c12:	d425      	bmi.n	8006c60 <SD_CmdResp1Error+0xe4>
    return(SD_AKE_SEQ_ERROR);
 8006c14:	f010 0f08 	tst.w	r0, #8
 8006c18:	bf0c      	ite	eq
 8006c1a:	2000      	moveq	r0, #0
 8006c1c:	201a      	movne	r0, #26
 8006c1e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ADDR_OUT_OF_RANGE);
 8006c20:	201c      	movs	r0, #28
 8006c22:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ADDR_MISALIGNED);
 8006c24:	2009      	movs	r0, #9
 8006c26:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_BLOCK_LEN_ERR);
 8006c28:	200a      	movs	r0, #10
 8006c2a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ERASE_SEQ_ERR);
 8006c2c:	200b      	movs	r0, #11
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_BAD_ERASE_PARAM);
 8006c30:	200c      	movs	r0, #12
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_WRITE_PROT_VIOLATION);
 8006c34:	200d      	movs	r0, #13
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_LOCK_UNLOCK_FAILED);
 8006c38:	200e      	movs	r0, #14
 8006c3a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_COM_CRC_FAILED);
 8006c3c:	200f      	movs	r0, #15
 8006c3e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CARD_ECC_FAILED);
 8006c40:	2011      	movs	r0, #17
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CC_ERROR);
 8006c44:	2012      	movs	r0, #18
 8006c46:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_GENERAL_UNKNOWN_ERROR);
 8006c48:	2013      	movs	r0, #19
 8006c4a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_STREAM_READ_UNDERRUN);
 8006c4c:	2014      	movs	r0, #20
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_STREAM_WRITE_OVERRUN);
 8006c50:	2015      	movs	r0, #21
 8006c52:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CID_CSD_OVERWRITE);
 8006c54:	2016      	movs	r0, #22
 8006c56:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_WP_ERASE_SKIP);
 8006c58:	2017      	movs	r0, #23
 8006c5a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CARD_ECC_DISABLED);
 8006c5c:	2018      	movs	r0, #24
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ERASE_RESET);
 8006c60:	2019      	movs	r0, #25
}
 8006c62:	bd70      	pop	{r4, r5, r6, pc}
 8006c64:	fdffe008 	.word	0xfdffe008

08006c68 <SD_FindSCR>:
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c6c:	b08e      	sub	sp, #56	; 0x38
  SDMMC_CmdInitTypeDef  sdmmc_cmdinitstructure;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 8006c6e:	2300      	movs	r3, #0
  
  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006c70:	2410      	movs	r4, #16
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006c72:	2240      	movs	r2, #64	; 0x40
{
 8006c74:	4606      	mov	r6, r0
  uint32_t tempscr[2] = {0, 0};
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c7a:	9306      	str	r3, [sp, #24]
{
 8006c7c:	460d      	mov	r5, r1
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c82:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
 8006c84:	2708      	movs	r7, #8
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c86:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006c88:	9404      	str	r4, [sp, #16]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006c8a:	9205      	str	r2, [sp, #20]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006c8c:	9307      	str	r3, [sp, #28]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
 8006c8e:	9703      	str	r7, [sp, #12]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c90:	f001 fc0f 	bl	80084b2 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8006c94:	4621      	mov	r1, r4
 8006c96:	4630      	mov	r0, r6
 8006c98:	f7ff ff70 	bl	8006b7c <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d138      	bne.n	8006d14 <SD_FindSCR+0xac>
  {
    return errorstate;
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8006ca2:	6a73      	ldr	r3, [r6, #36]	; 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ca4:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8006ca6:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006ca8:	2437      	movs	r4, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006caa:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8006cac:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006cae:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006cb0:	f001 fbff 	bl	80084b2 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f7ff ff60 	bl	8006b7c <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	bb48      	cbnz	r0, 8006d14 <SD_FindSCR+0xac>
  {
    return errorstate;
  }
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8006cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc4:	9308      	str	r3, [sp, #32]
  sdmmc_datainitstructure.DataLength    = 8;
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006cc6:	2330      	movs	r3, #48	; 0x30
 8006cc8:	930a      	str	r3, [sp, #40]	; 0x28
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006cca:	2302      	movs	r3, #2
 8006ccc:	930b      	str	r3, [sp, #44]	; 0x2c
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006cce:	900c      	str	r0, [sp, #48]	; 0x30
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006cd0:	2301      	movs	r3, #1
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006cd2:	a908      	add	r1, sp, #32
 8006cd4:	6830      	ldr	r0, [r6, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006cd6:	930d      	str	r3, [sp, #52]	; 0x34
  sdmmc_datainitstructure.DataLength    = 8;
 8006cd8:	9709      	str	r7, [sp, #36]	; 0x24
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006cda:	f001 fc09 	bl	80084f0 <SDMMC_DataConfig>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  sdmmc_cmdinitstructure.Argument         = 0;
 8006cde:	9403      	str	r4, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ce0:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8006ce2:	2433      	movs	r4, #51	; 0x33
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ce4:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8006ce6:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ce8:	f001 fbe3 	bl	80084b2 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SD_APP_SEND_SCR);
 8006cec:	4621      	mov	r1, r4
 8006cee:	4630      	mov	r0, r6
 8006cf0:	f7ff ff44 	bl	8006b7c <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	b968      	cbnz	r0, 8006d14 <SD_FindSCR+0xac>
 8006cf8:	466f      	mov	r7, sp
  {
    return errorstate;
  }
  
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006cfa:	f240 482a 	movw	r8, #1066	; 0x42a
 8006cfe:	6830      	ldr	r0, [r6, #0]
 8006d00:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006d02:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006d06:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006d08:	d008      	beq.n	8006d1c <SD_FindSCR+0xb4>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
      index++;
    }
  }
  
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006d0a:	0719      	lsls	r1, r3, #28
 8006d0c:	d50d      	bpl.n	8006d2a <SD_FindSCR+0xc2>
  {
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006d0e:	2308      	movs	r3, #8
 8006d10:	6383      	str	r3, [r0, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
    
    return errorstate;
 8006d12:	2404      	movs	r4, #4
  
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
    ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
  
  return errorstate;
}
 8006d14:	4620      	mov	r0, r4
 8006d16:	b00e      	add	sp, #56	; 0x38
 8006d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006d1c:	029b      	lsls	r3, r3, #10
 8006d1e:	d5ef      	bpl.n	8006d00 <SD_FindSCR+0x98>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006d20:	f001 fbbc 	bl	800849c <SDMMC_ReadFIFO>
 8006d24:	f847 0f04 	str.w	r0, [r7, #4]!
 8006d28:	e7e9      	b.n	8006cfe <SD_FindSCR+0x96>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006d2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006d2c:	079a      	lsls	r2, r3, #30
 8006d2e:	d502      	bpl.n	8006d36 <SD_FindSCR+0xce>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006d30:	2402      	movs	r4, #2
 8006d32:	6384      	str	r4, [r0, #56]	; 0x38
    return errorstate;
 8006d34:	e7ee      	b.n	8006d14 <SD_FindSCR+0xac>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006d36:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006d38:	069b      	lsls	r3, r3, #26
 8006d3a:	d503      	bpl.n	8006d44 <SD_FindSCR+0xdc>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006d3c:	2320      	movs	r3, #32
 8006d3e:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8006d40:	2406      	movs	r4, #6
 8006d42:	e7e7      	b.n	8006d14 <SD_FindSCR+0xac>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d44:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006d48:	6383      	str	r3, [r0, #56]	; 0x38
 8006d4a:	9b01      	ldr	r3, [sp, #4]
 8006d4c:	ba1b      	rev	r3, r3
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 8006d4e:	606b      	str	r3, [r5, #4]
 8006d50:	9b02      	ldr	r3, [sp, #8]
 8006d52:	ba1b      	rev	r3, r3
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 8006d54:	602b      	str	r3, [r5, #0]
  return errorstate;
 8006d56:	e7dd      	b.n	8006d14 <SD_FindSCR+0xac>

08006d58 <HAL_SD_ReadBlocks_DMA>:
{
 8006d58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d5c:	b08d      	sub	sp, #52	; 0x34
  hsd->Instance->DCTRL = 0;
 8006d5e:	6806      	ldr	r6, [r0, #0]
{
 8006d60:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8006d62:	9d14      	ldr	r5, [sp, #80]	; 0x50
  if(NumberOfBlocks > 1)
 8006d64:	2f01      	cmp	r7, #1
{
 8006d66:	4699      	mov	r9, r3
  hsd->Instance->DCTRL = 0;
 8006d68:	f04f 0300 	mov.w	r3, #0
 8006d6c:	62f3      	str	r3, [r6, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 8006d6e:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 8006d70:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK; 
 8006d72:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdOperation = SD_READ_MULTIPLE_BLOCK;
 8006d74:	bf88      	it	hi
 8006d76:	2301      	movhi	r3, #1
    hsd->SdOperation = SD_READ_SINGLE_BLOCK;
 8006d78:	6543      	str	r3, [r0, #84]	; 0x54
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8006d7a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8006d7c:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 8006d80:	63f3      	str	r3, [r6, #60]	; 0x3c
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8006d82:	6af3      	ldr	r3, [r6, #44]	; 0x2c
{
 8006d84:	4604      	mov	r4, r0
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8006d86:	f043 0308 	orr.w	r3, r3, #8
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 8006d8a:	6d80      	ldr	r0, [r0, #88]	; 0x58
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8006d8c:	62f3      	str	r3, [r6, #44]	; 0x2c
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 8006d8e:	4b2d      	ldr	r3, [pc, #180]	; (8006e44 <HAL_SD_ReadBlocks_DMA+0xec>)
 8006d90:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 8006d92:	4690      	mov	r8, r2
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 8006d94:	4b2c      	ldr	r3, [pc, #176]	; (8006e48 <HAL_SD_ReadBlocks_DMA+0xf0>)
  hsd->hdmarx->Instance->CCR &= ~DMA_MEMORY_TO_PERIPH;
 8006d96:	6802      	ldr	r2, [r0, #0]
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 8006d98:	6343      	str	r3, [r0, #52]	; 0x34
  hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	6083      	str	r3, [r0, #8]
  hsd->hdmarx->Instance->CCR &= ~DMA_MEMORY_TO_PERIPH;
 8006d9e:	6813      	ldr	r3, [r2, #0]
 8006da0:	f023 0310 	bic.w	r3, r3, #16
 8006da4:	6013      	str	r3, [r2, #0]
  HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pReadBuffer, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 8006da6:	fb05 f307 	mul.w	r3, r5, r7
 8006daa:	460a      	mov	r2, r1
 8006dac:	089b      	lsrs	r3, r3, #2
 8006dae:	f106 0180 	add.w	r1, r6, #128	; 0x80
 8006db2:	f7fe fcb9 	bl	8005728 <HAL_DMA_Start_IT>
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006db6:	6a23      	ldr	r3, [r4, #32]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006db8:	6820      	ldr	r0, [r4, #0]
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006dba:	2b02      	cmp	r3, #2
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006dbc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006dc0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006dc2:	f04f 0300 	mov.w	r3, #0
    ReadAddr /= 512;
 8006dc6:	bf04      	itt	eq
 8006dc8:	ea4f 2858 	moveq.w	r8, r8, lsr #9
    BlockSize = 512;
 8006dcc:	f44f 7500 	moveq.w	r5, #512	; 0x200
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006dd0:	f04f 0610 	mov.w	r6, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006dd4:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006dd6:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    ReadAddr /= 512;
 8006ddc:	bf08      	it	eq
 8006dde:	ea48 58c9 	orreq.w	r8, r8, r9, lsl #23
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8006de2:	9501      	str	r5, [sp, #4]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006de4:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006de6:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006de8:	f001 fb63 	bl	80084b2 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8006dec:	4631      	mov	r1, r6
 8006dee:	4620      	mov	r0, r4
 8006df0:	f7ff fec4 	bl	8006b7c <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 8006df4:	bb10      	cbnz	r0, 8006e3c <HAL_SD_ReadBlocks_DMA+0xe4>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8006df6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dfa:	9206      	str	r2, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006dfc:	2290      	movs	r2, #144	; 0x90
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006dfe:	2301      	movs	r3, #1
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006e00:	9208      	str	r2, [sp, #32]
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006e02:	900a      	str	r0, [sp, #40]	; 0x28
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006e04:	2202      	movs	r2, #2
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006e06:	a906      	add	r1, sp, #24
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8006e08:	437d      	muls	r5, r7
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006e0a:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006e0c:	930b      	str	r3, [sp, #44]	; 0x2c
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006e0e:	9209      	str	r2, [sp, #36]	; 0x24
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8006e10:	9507      	str	r5, [sp, #28]
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006e12:	f001 fb6d 	bl	80084f0 <SDMMC_DataConfig>
  if(NumberOfBlocks > 1)
 8006e16:	2f01      	cmp	r7, #1
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 8006e18:	bf8c      	ite	hi
 8006e1a:	2312      	movhi	r3, #18
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 8006e1c:	2311      	movls	r3, #17
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006e1e:	a901      	add	r1, sp, #4
 8006e20:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 8006e22:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)ReadAddr;
 8006e24:	f8cd 8004 	str.w	r8, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006e28:	f001 fb43 	bl	80084b2 <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 8006e2c:	2f01      	cmp	r7, #1
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_MULT_BLOCK);
 8006e2e:	bf8c      	ite	hi
 8006e30:	2112      	movhi	r1, #18
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_SINGLE_BLOCK);
 8006e32:	2111      	movls	r1, #17
 8006e34:	4620      	mov	r0, r4
 8006e36:	f7ff fea1 	bl	8006b7c <SD_CmdResp1Error>
  hsd->SdTransferErr = errorstate;
 8006e3a:	64e0      	str	r0, [r4, #76]	; 0x4c
}
 8006e3c:	b00d      	add	sp, #52	; 0x34
 8006e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e42:	bf00      	nop
 8006e44:	08006fbb 	.word	0x08006fbb
 8006e48:	08006fd7 	.word	0x08006fd7

08006e4c <HAL_SD_WriteBlocks_DMA>:
{
 8006e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e50:	b08c      	sub	sp, #48	; 0x30
 8006e52:	4617      	mov	r7, r2
 8006e54:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  hsd->Instance->DCTRL = 0;
 8006e56:	6802      	ldr	r2, [r0, #0]
{
 8006e58:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  if(NumberOfBlocks > 1)
 8006e5c:	2e01      	cmp	r6, #1
{
 8006e5e:	461d      	mov	r5, r3
  hsd->Instance->DCTRL = 0;
 8006e60:	f04f 0300 	mov.w	r3, #0
 8006e64:	62d3      	str	r3, [r2, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 8006e66:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 8006e68:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK;
 8006e6a:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdOperation = SD_WRITE_MULTIPLE_BLOCK;
 8006e6c:	bf8c      	ite	hi
 8006e6e:	2303      	movhi	r3, #3
    hsd->SdOperation = SD_WRITE_SINGLE_BLOCK;
 8006e70:	2302      	movls	r3, #2
 8006e72:	6543      	str	r3, [r0, #84]	; 0x54
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8006e74:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
{
 8006e76:	4604      	mov	r4, r0
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8006e78:	f443 738d 	orr.w	r3, r3, #282	; 0x11a
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8006e7c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8006e7e:	63d3      	str	r3, [r2, #60]	; 0x3c
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8006e80:	4b2f      	ldr	r3, [pc, #188]	; (8006f40 <HAL_SD_WriteBlocks_DMA+0xf4>)
  hsd->hdmatx->Instance->CCR |= DMA_MEMORY_TO_PERIPH;
 8006e82:	f8d0 e000 	ldr.w	lr, [r0]
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8006e86:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsd->hdmatx->XferErrorCallback = SD_DMA_TxError;
 8006e88:	4b2e      	ldr	r3, [pc, #184]	; (8006f44 <HAL_SD_WriteBlocks_DMA+0xf8>)
 8006e8a:	6343      	str	r3, [r0, #52]	; 0x34
  hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e8c:	2310      	movs	r3, #16
 8006e8e:	6083      	str	r3, [r0, #8]
  hsd->hdmatx->Instance->CCR |= DMA_MEMORY_TO_PERIPH;
 8006e90:	f8de 3000 	ldr.w	r3, [lr]
 8006e94:	f043 0310 	orr.w	r3, r3, #16
 8006e98:	f8ce 3000 	str.w	r3, [lr]
  HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pWriteBuffer, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 8006e9c:	fb08 f306 	mul.w	r3, r8, r6
 8006ea0:	3280      	adds	r2, #128	; 0x80
 8006ea2:	089b      	lsrs	r3, r3, #2
 8006ea4:	f7fe fc40 	bl	8005728 <HAL_DMA_Start_IT>
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8006ea8:	6820      	ldr	r0, [r4, #0]
 8006eaa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006eac:	f043 0308 	orr.w	r3, r3, #8
 8006eb0:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006eb2:	6a23      	ldr	r3, [r4, #32]
 8006eb4:	2b02      	cmp	r3, #2
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006eb6:	f04f 0340 	mov.w	r3, #64	; 0x40
    WriteAddr /= 512;
 8006eba:	bf08      	it	eq
 8006ebc:	0a7f      	lsreq	r7, r7, #9
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006ebe:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ec0:	f04f 0300 	mov.w	r3, #0
    WriteAddr /= 512;
 8006ec4:	bf04      	itt	eq
 8006ec6:	ea47 57c5 	orreq.w	r7, r7, r5, lsl #23
    BlockSize = 512;
 8006eca:	f44f 7800 	moveq.w	r8, #512	; 0x200
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006ece:	2510      	movs	r5, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ed0:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ed2:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006ed8:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006eda:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8006edc:	f8cd 8004 	str.w	r8, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ee0:	f001 fae7 	bl	80084b2 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f7ff fe48 	bl	8006b7c <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 8006eec:	4605      	mov	r5, r0
 8006eee:	bb18      	cbnz	r0, 8006f38 <HAL_SD_WriteBlocks_DMA+0xec>
  if(NumberOfBlocks <= 1)
 8006ef0:	2e01      	cmp	r6, #1
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 8006ef2:	bf94      	ite	ls
 8006ef4:	2318      	movls	r3, #24
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8006ef6:	2319      	movhi	r3, #25
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ef8:	a901      	add	r1, sp, #4
 8006efa:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8006efc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
 8006efe:	9701      	str	r7, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006f00:	f001 fad7 	bl	80084b2 <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 8006f04:	2e01      	cmp	r6, #1
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_MULT_BLOCK);
 8006f06:	bf8c      	ite	hi
 8006f08:	2119      	movhi	r1, #25
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_SINGLE_BLOCK);
 8006f0a:	2118      	movls	r1, #24
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f7ff fe35 	bl	8006b7c <SD_CmdResp1Error>
 8006f12:	4605      	mov	r5, r0
  if (errorstate != SD_OK)
 8006f14:	b980      	cbnz	r0, 8006f38 <HAL_SD_WriteBlocks_DMA+0xec>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8006f16:	f04f 33ff 	mov.w	r3, #4294967295
 8006f1a:	9306      	str	r3, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006f1c:	2390      	movs	r3, #144	; 0x90
 8006f1e:	9308      	str	r3, [sp, #32]
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006f20:	9009      	str	r0, [sp, #36]	; 0x24
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006f22:	900a      	str	r0, [sp, #40]	; 0x28
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006f24:	2301      	movs	r3, #1
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8006f26:	fb06 f608 	mul.w	r6, r6, r8
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006f2a:	a906      	add	r1, sp, #24
 8006f2c:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8006f2e:	9607      	str	r6, [sp, #28]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006f30:	930b      	str	r3, [sp, #44]	; 0x2c
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006f32:	f001 fadd 	bl	80084f0 <SDMMC_DataConfig>
  hsd->SdTransferErr = errorstate;
 8006f36:	64e5      	str	r5, [r4, #76]	; 0x4c
}
 8006f38:	4628      	mov	r0, r5
 8006f3a:	b00c      	add	sp, #48	; 0x30
 8006f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f40:	08006fe5 	.word	0x08006fe5
 8006f44:	08007001 	.word	0x08007001

08006f48 <HAL_SD_XferCpltCallback>:
 8006f48:	4770      	bx	lr

08006f4a <HAL_SD_XferErrorCallback>:
 8006f4a:	4770      	bx	lr

08006f4c <HAL_SD_IRQHandler>:
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 8006f4c:	6803      	ldr	r3, [r0, #0]
 8006f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f50:	05d2      	lsls	r2, r2, #23
{  
 8006f52:	b510      	push	{r4, lr}
 8006f54:	4604      	mov	r4, r0
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 8006f56:	d510      	bpl.n	8006f7a <HAL_SD_IRQHandler+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_IT_DATAEND);  
 8006f58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f5c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferCplt = 1;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdTransferErr  = SD_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_SD_XferCpltCallback(hsd);  
 8006f66:	f7ff ffef 	bl	8006f48 <HAL_SD_XferCpltCallback>
  __HAL_SD_SDMMC_DISABLE_IT(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_DATAEND  |\
 8006f6a:	6822      	ldr	r2, [r4, #0]
 8006f6c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006f6e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8006f72:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006f76:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006f78:	bd10      	pop	{r4, pc}
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL))
 8006f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f7c:	0791      	lsls	r1, r2, #30
 8006f7e:	d505      	bpl.n	8006f8c <HAL_SD_IRQHandler+0x40>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006f80:	2202      	movs	r2, #2
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_CRC_FAIL;
 8006f84:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 8006f86:	f7ff ffe0 	bl	8006f4a <HAL_SD_XferErrorCallback>
 8006f8a:	e7ee      	b.n	8006f6a <HAL_SD_IRQHandler+0x1e>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT))
 8006f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f8e:	0712      	lsls	r2, r2, #28
 8006f90:	d504      	bpl.n	8006f9c <HAL_SD_IRQHandler+0x50>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006f92:	2208      	movs	r2, #8
 8006f94:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_TIMEOUT;
 8006f96:	2304      	movs	r3, #4
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 8006f98:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006f9a:	e7f4      	b.n	8006f86 <HAL_SD_IRQHandler+0x3a>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_RXOVERR))
 8006f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f9e:	0691      	lsls	r1, r2, #26
 8006fa0:	d503      	bpl.n	8006faa <HAL_SD_IRQHandler+0x5e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_RX_OVERRUN;
 8006fa6:	2306      	movs	r3, #6
 8006fa8:	e7f6      	b.n	8006f98 <HAL_SD_IRQHandler+0x4c>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_TXUNDERR))
 8006faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fac:	06d2      	lsls	r2, r2, #27
 8006fae:	d5dc      	bpl.n	8006f6a <HAL_SD_IRQHandler+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_TXUNDERR);
 8006fb0:	2210      	movs	r2, #16
 8006fb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 8006fb4:	2305      	movs	r3, #5
 8006fb6:	e7ef      	b.n	8006f98 <HAL_SD_IRQHandler+0x4c>

08006fb8 <HAL_SD_DMA_RxCpltCallback>:
 8006fb8:	4770      	bx	lr

08006fba <SD_DMA_RxCplt>:
{
 8006fba:	b510      	push	{r4, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8006fbc:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hsd->DmaTransferCplt = 1;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	6523      	str	r3, [r4, #80]	; 0x50
  while(hsd->SdTransferCplt == 0)
 8006fc2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0fc      	beq.n	8006fc2 <SD_DMA_RxCplt+0x8>
  HAL_DMA_Abort(hdma);
 8006fc8:	f7fe fbec 	bl	80057a4 <HAL_DMA_Abort>
  HAL_SD_DMA_RxCpltCallback(hsd->hdmarx);   
 8006fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fce:	f7ff fff3 	bl	8006fb8 <HAL_SD_DMA_RxCpltCallback>
 8006fd2:	bd10      	pop	{r4, pc}

08006fd4 <HAL_SD_DMA_RxErrorCallback>:
 8006fd4:	4770      	bx	lr

08006fd6 <SD_DMA_RxError>:
{
 8006fd6:	b508      	push	{r3, lr}
  HAL_SD_DMA_RxErrorCallback(hsd->hdmarx);
 8006fd8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006fda:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006fdc:	f7ff fffa 	bl	8006fd4 <HAL_SD_DMA_RxErrorCallback>
 8006fe0:	bd08      	pop	{r3, pc}

08006fe2 <HAL_SD_DMA_TxCpltCallback>:
 8006fe2:	4770      	bx	lr

08006fe4 <SD_DMA_TxCplt>:
{
 8006fe4:	b510      	push	{r4, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8006fe6:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hsd->DmaTransferCplt = 1;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	6523      	str	r3, [r4, #80]	; 0x50
  while(hsd->SdTransferCplt == 0)
 8006fec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0fc      	beq.n	8006fec <SD_DMA_TxCplt+0x8>
  HAL_DMA_Abort(hdma);
 8006ff2:	f7fe fbd7 	bl	80057a4 <HAL_DMA_Abort>
  HAL_SD_DMA_TxCpltCallback(hsd->hdmatx);  
 8006ff6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006ff8:	f7ff fff3 	bl	8006fe2 <HAL_SD_DMA_TxCpltCallback>
 8006ffc:	bd10      	pop	{r4, pc}

08006ffe <HAL_SD_DMA_TxErrorCallback>:
{
 8006ffe:	4770      	bx	lr

08007000 <SD_DMA_TxError>:
{
 8007000:	b508      	push	{r3, lr}
  HAL_SD_DMA_TxErrorCallback(hsd->hdmatx);
 8007002:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007004:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8007006:	f7ff fffa 	bl	8006ffe <HAL_SD_DMA_TxErrorCallback>
 800700a:	bd08      	pop	{r3, pc}

0800700c <HAL_SD_Get_CardInfo>:
{
 800700c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 8007010:	6a05      	ldr	r5, [r0, #32]
 8007012:	f881 5056 	strb.w	r5, [r1, #86]	; 0x56
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
 8007016:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007018:	f8a1 3054 	strh.w	r3, [r1, #84]	; 0x54
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
 800701c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800701e:	0f9a      	lsrs	r2, r3, #30
 8007020:	700a      	strb	r2, [r1, #0]
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8007022:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8007026:	704a      	strb	r2, [r1, #1]
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03;
 8007028:	f3c3 6201 	ubfx	r2, r3, #24, #2
 800702c:	708a      	strb	r2, [r1, #2]
  pCardInfo->SD_csd.TAAC = (uint8_t)tmp;
 800702e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007032:	70ca      	strb	r2, [r1, #3]
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 8007034:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8007038:	b2db      	uxtb	r3, r3
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 800703a:	710a      	strb	r2, [r1, #4]
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 800703c:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
 800703e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007040:	0e13      	lsrs	r3, r2, #24
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8007046:	88cb      	ldrh	r3, [r1, #6]
{
 8007048:	4604      	mov	r4, r0
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800704a:	b29b      	uxth	r3, r3
 800704c:	f3c2 5003 	ubfx	r0, r2, #20, #4
 8007050:	4303      	orrs	r3, r0
 8007052:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8007054:	f3c2 4303 	ubfx	r3, r2, #16, #4
 8007058:	720b      	strb	r3, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00) >> 8;
 800705a:	f3c2 2307 	ubfx	r3, r2, #8, #8
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 800705e:	09d8      	lsrs	r0, r3, #7
 8007060:	7248      	strb	r0, [r1, #9]
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8007062:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8007066:	7288      	strb	r0, [r1, #10]
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8007068:	f3c3 1040 	ubfx	r0, r3, #5, #1
 800706c:	72c8      	strb	r0, [r1, #11]
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800706e:	f3c3 1000 	ubfx	r0, r3, #4, #1
 8007072:	7308      	strb	r0, [r1, #12]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 8007074:	2d01      	cmp	r5, #1
  pCardInfo->SD_csd.Reserved2       = 0; /*!< Reserved */
 8007076:	f04f 0000 	mov.w	r0, #0
 800707a:	7348      	strb	r0, [r1, #13]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 800707c:	f200 80dc 	bhi.w	8007238 <HAL_SD_Get_CardInfo+0x22c>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 8007080:	029b      	lsls	r3, r3, #10
 8007082:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007086:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 8007088:	690b      	ldr	r3, [r1, #16]
 800708a:	0092      	lsls	r2, r2, #2
 800708c:	f402 727f 	and.w	r2, r2, #1020	; 0x3fc
 8007090:	431a      	orrs	r2, r3
 8007092:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8007094:	690b      	ldr	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 8007096:	6b22      	ldr	r2, [r4, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8007098:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800709c:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800709e:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 80070a2:	750b      	strb	r3, [r1, #20]
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 80070a4:	f3c2 6302 	ubfx	r3, r2, #24, #3
 80070a8:	754b      	strb	r3, [r1, #21]
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80070aa:	f3c2 5342 	ubfx	r3, r2, #21, #3
 80070ae:	758b      	strb	r3, [r1, #22]
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80070b0:	f3c2 4382 	ubfx	r3, r2, #18, #3
 80070b4:	75cb      	strb	r3, [r1, #23]
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
 80070b6:	0bd3      	lsrs	r3, r2, #15
 80070b8:	f003 0306 	and.w	r3, r3, #6
 80070bc:	760b      	strb	r3, [r1, #24]
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 80070be:	7e0d      	ldrb	r5, [r1, #24]
 80070c0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80070c4:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80070c8:	432a      	orrs	r2, r5
 80070ca:	760a      	strb	r2, [r1, #24]
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 80070cc:	690d      	ldr	r5, [r1, #16]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80070ce:	7e0f      	ldrb	r7, [r1, #24]
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 80070d0:	7a0a      	ldrb	r2, [r1, #8]
 80070d2:	2601      	movs	r6, #1
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80070d4:	3702      	adds	r7, #2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 80070d6:	fa06 f202 	lsl.w	r2, r6, r2
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80070da:	40be      	lsls	r6, r7
 80070dc:	ea4f 79e6 	mov.w	r9, r6, asr #31
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 80070e0:	fba6 6702 	umull	r6, r7, r6, r2
 80070e4:	fb02 7709 	mla	r7, r2, r9, r7
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 80070e8:	650a      	str	r2, [r1, #80]	; 0x50
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 80070ea:	1c6a      	adds	r2, r5, #1
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 80070ec:	fba6 8902 	umull	r8, r9, r6, r2
 80070f0:	fb02 9907 	mla	r9, r2, r7, r9
 80070f4:	e9c1 8912 	strd	r8, r9, [r1, #72]	; 0x48
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 80070f8:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8007102:	764a      	strb	r2, [r1, #25]
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 8007104:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8007106:	6b23      	ldr	r3, [r4, #48]	; 0x30
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 8007108:	7e8a      	ldrb	r2, [r1, #26]
 800710a:	f3c3 15c0 	ubfx	r5, r3, #7, #1
 800710e:	432a      	orrs	r2, r5
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8007110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 8007114:	768a      	strb	r2, [r1, #26]
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8007116:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000) >> 24);
 8007118:	6b63      	ldr	r3, [r4, #52]	; 0x34
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 800711a:	0fda      	lsrs	r2, r3, #31
 800711c:	770a      	strb	r2, [r1, #28]
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60) >> 5;
 800711e:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8007122:	774a      	strb	r2, [r1, #29]
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1C) >> 2;
 8007124:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8007128:	778a      	strb	r2, [r1, #30]
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03) << 2;
 800712a:	0d9a      	lsrs	r2, r3, #22
 800712c:	f002 020c 	and.w	r2, r2, #12
 8007130:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8007132:	7fca      	ldrb	r2, [r1, #31]
 8007134:	f3c3 5581 	ubfx	r5, r3, #22, #2
 8007138:	432a      	orrs	r2, r5
 800713a:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800713c:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8007140:	f881 2020 	strb.w	r2, [r1, #32]
  pCardInfo->SD_csd.Reserved3           = 0;
 8007144:	2200      	movs	r2, #0
 8007146:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 800714a:	f3c3 4200 	ubfx	r2, r3, #16, #1
 800714e:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 8007152:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8007156:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40) >> 6;
 800715a:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800715e:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20) >> 5;
 8007162:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8007166:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10) >> 4;
 800716a:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800716e:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
 8007172:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8007176:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCardInfo->SD_csd.Reserved4 = 1;
 800717a:	2501      	movs	r5, #1
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 800717c:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 8007180:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 8007184:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 8007188:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCardInfo->SD_csd.Reserved4 = 1;
 800718c:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
  tmp = (uint8_t)((hsd->CID[0] & 0xFF000000) >> 24);
 8007190:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007192:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ManufacturerID = tmp;
 8007194:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
 8007198:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800719c:	0212      	lsls	r2, r2, #8
 800719e:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 80071a0:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 80071a2:	f3c3 2607 	ubfx	r6, r3, #8, #8
 80071a6:	b292      	uxth	r2, r2
 80071a8:	4332      	orrs	r2, r6
 80071aa:	061b      	lsls	r3, r3, #24
 80071ac:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
 80071ae:	630b      	str	r3, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 80071b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 80071b2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 80071b4:	0e1e      	lsrs	r6, r3, #24
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 80071b6:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80071ba:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
 80071bc:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 80071be:	0a1a      	lsrs	r2, r3, #8
 80071c0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80071c4:	4332      	orrs	r2, r6
 80071c6:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp;
 80071c8:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 80071ca:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80071ce:	4332      	orrs	r2, r6
  tmp = (uint8_t)(hsd->CID[1] & 0x000000FF);
 80071d0:	b2db      	uxtb	r3, r3
  pCardInfo->SD_cid.ProdName1 |= tmp;
 80071d2:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName2 = tmp;
 80071d4:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
  tmp = (uint8_t)((hsd->CID[2] & 0xFF000000) >> 24);
 80071d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071da:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ProdRev = tmp;
 80071dc:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
  tmp = (uint8_t)((hsd->CID[2] & 0x00FF0000) >> 16);
 80071e0:	0c1a      	lsrs	r2, r3, #16
 80071e2:	0612      	lsls	r2, r2, #24
  pCardInfo->SD_cid.ProdSN = tmp << 24;
 80071e4:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 80071e6:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 80071e8:	021a      	lsls	r2, r3, #8
 80071ea:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80071ee:	4332      	orrs	r2, r6
 80071f0:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 80071f2:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80071f4:	021b      	lsls	r3, r3, #8
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	4313      	orrs	r3, r2
 80071fa:	638b      	str	r3, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp;
 80071fc:	6b8a      	ldr	r2, [r1, #56]	; 0x38
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
 80071fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCardInfo->SD_cid.ProdSN |= tmp;
 8007200:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8007204:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 8007206:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 800720a:	f3c3 5403 	ubfx	r4, r3, #20, #4
 800720e:	4322      	orrs	r2, r4
 8007210:	f881 203c 	strb.w	r2, [r1, #60]	; 0x3c
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 8007214:	0a1a      	lsrs	r2, r3, #8
 8007216:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800721a:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.ManufactDate |= tmp;
 800721c:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 800721e:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8007222:	b292      	uxth	r2, r2
 8007224:	4322      	orrs	r2, r4
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 8007226:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_cid.ManufactDate |= tmp;
 800722a:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 800722c:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
  pCardInfo->SD_cid.Reserved2 = 1;
 8007230:	f881 5041 	strb.w	r5, [r1, #65]	; 0x41
}
 8007234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8007238:	2d02      	cmp	r5, #2
 800723a:	d11f      	bne.n	800727c <HAL_SD_Get_CardInfo+0x270>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 800723c:	0412      	lsls	r2, r2, #16
 800723e:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 8007242:	6b23      	ldr	r3, [r4, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 8007244:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 8007246:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 8007248:	0e1d      	lsrs	r5, r3, #24
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 800724a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800724e:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 8007250:	690d      	ldr	r5, [r1, #16]
 8007252:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007256:	432a      	orrs	r2, r5
 8007258:	610a      	str	r2, [r1, #16]
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 800725a:	690e      	ldr	r6, [r1, #16]
 800725c:	2700      	movs	r7, #0
 800725e:	3601      	adds	r6, #1
 8007260:	f147 0700 	adc.w	r7, r7, #0
 8007264:	04fa      	lsls	r2, r7, #19
 8007266:	ea42 3256 	orr.w	r2, r2, r6, lsr #13
 800726a:	64ca      	str	r2, [r1, #76]	; 0x4c
 800726c:	04f6      	lsls	r6, r6, #19
    pCardInfo->CardBlockSize = 512;    
 800726e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007272:	f3c3 2307 	ubfx	r3, r3, #8, #8
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 8007276:	648e      	str	r6, [r1, #72]	; 0x48
    pCardInfo->CardBlockSize = 512;    
 8007278:	650a      	str	r2, [r1, #80]	; 0x50
 800727a:	e73d      	b.n	80070f8 <HAL_SD_Get_CardInfo+0xec>
    errorstate = SD_ERROR;
 800727c:	2029      	movs	r0, #41	; 0x29
 800727e:	e73b      	b.n	80070f8 <HAL_SD_Get_CardInfo+0xec>

08007280 <HAL_SD_Init>:
{ 
 8007280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007284:	b091      	sub	sp, #68	; 0x44
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 8007286:	2500      	movs	r5, #0
{ 
 8007288:	4604      	mov	r4, r0
 800728a:	460e      	mov	r6, r1
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 800728c:	f88d 5012 	strb.w	r5, [sp, #18]
  HAL_SD_MspInit(hsd);
 8007290:	f7fd f844 	bl	800431c <HAL_SD_MspInit>
  tmpinit.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007294:	2376      	movs	r3, #118	; 0x76
 8007296:	930f      	str	r3, [sp, #60]	; 0x3c
  tmpinit.BusWide             = SDMMC_BUS_WIDE_1B;
 8007298:	950d      	str	r5, [sp, #52]	; 0x34
  tmpinit.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800729a:	950e      	str	r5, [sp, #56]	; 0x38
  SDMMC_Init(hsd->Instance, tmpinit);
 800729c:	ab10      	add	r3, sp, #64	; 0x40
 800729e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80072a2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  tmpinit.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80072a6:	950a      	str	r5, [sp, #40]	; 0x28
  tmpinit.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80072a8:	950b      	str	r5, [sp, #44]	; 0x2c
  tmpinit.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80072aa:	950c      	str	r5, [sp, #48]	; 0x30
  SDMMC_Init(hsd->Instance, tmpinit);
 80072ac:	ab0a      	add	r3, sp, #40	; 0x28
 80072ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072b0:	6820      	ldr	r0, [r4, #0]
 80072b2:	f001 f8d7 	bl	8008464 <SDMMC_Init>
  __HAL_SD_SDMMC_DISABLE(hsd); 
 80072b6:	6820      	ldr	r0, [r4, #0]
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
 80072b8:	f88d 5013 	strb.w	r5, [sp, #19]
  __HAL_SD_SDMMC_DISABLE(hsd); 
 80072bc:	6843      	ldr	r3, [r0, #4]
 80072be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072c2:	6043      	str	r3, [r0, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 80072c4:	f001 f8ed 	bl	80084a2 <SDMMC_PowerState_ON>
  HAL_Delay(1);
 80072c8:	2001      	movs	r0, #1
 80072ca:	f7fe f8eb 	bl	80054a4 <HAL_Delay>
  __HAL_SD_SDMMC_ENABLE(hsd);
 80072ce:	6820      	ldr	r0, [r4, #0]
 80072d0:	6843      	ldr	r3, [r0, #4]
 80072d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072d6:	6043      	str	r3, [r0, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80072d8:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80072da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072de:	9309      	str	r3, [sp, #36]	; 0x24
  sdmmc_cmdinitstructure.Argument         = 0;
 80072e0:	9505      	str	r5, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
 80072e2:	9506      	str	r5, [sp, #24]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_NO;
 80072e4:	9507      	str	r5, [sp, #28]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80072e6:	9508      	str	r5, [sp, #32]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80072e8:	f001 f8e3 	bl	80084b2 <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 80072ec:	6820      	ldr	r0, [r4, #0]
 80072ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80072f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80072f4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 80072f8:	b123      	cbz	r3, 8007304 <HAL_SD_Init+0x84>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072fa:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80072fe:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 8007300:	2300      	movs	r3, #0
 8007302:	e005      	b.n	8007310 <HAL_SD_Init+0x90>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8007304:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while((timeout > 0) && (!tmp))
 8007306:	3a01      	subs	r2, #1
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8007308:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 800730c:	d1f4      	bne.n	80072f8 <HAL_SD_Init+0x78>
    return errorstate;
 800730e:	2303      	movs	r3, #3
  errorstate = SD_CmdError(hsd);
 8007310:	f88d 3013 	strb.w	r3, [sp, #19]
  if(errorstate != SD_OK)
 8007314:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8007318:	b18b      	cbz	r3, 800733e <HAL_SD_Init+0xbe>
  return errorstate;
 800731a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800731e:	b2db      	uxtb	r3, r3
  errorstate = SD_PowerON(hsd); 
 8007320:	f88d 3012 	strb.w	r3, [sp, #18]
  if(errorstate != SD_OK)     
 8007324:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8007328:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 80b1 	beq.w	8007494 <HAL_SD_Init+0x214>
  return errorstate;
 8007332:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8007336:	b2c0      	uxtb	r0, r0
}
 8007338:	b011      	add	sp, #68	; 0x44
 800733a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sdmmc_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
 800733e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007342:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_SDMMC_SEND_IF_COND;
 8007344:	2308      	movs	r3, #8
 8007346:	9306      	str	r3, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007348:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800734a:	2340      	movs	r3, #64	; 0x40
 800734c:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800734e:	f001 f8b0 	bl	80084b2 <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT); 
 8007352:	6820      	ldr	r0, [r4, #0]
 8007354:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007356:	f013 0f45 	tst.w	r3, #69	; 0x45
 800735a:	bf14      	ite	ne
 800735c:	2301      	movne	r3, #1
 800735e:	2300      	moveq	r3, #0
  uint32_t timeout = SDMMC_CMD0TIMEOUT, tmp;
 8007360:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  while((!tmp) && (timeout > 0))
 8007364:	b90b      	cbnz	r3, 800736a <HAL_SD_Init+0xea>
 8007366:	2a00      	cmp	r2, #0
 8007368:	d17c      	bne.n	8007464 <HAL_SD_Init+0x1e4>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT); 
 800736a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if((timeout == 0) || tmp)
 800736c:	b112      	cbz	r2, 8007374 <HAL_SD_Init+0xf4>
 800736e:	f013 0304 	ands.w	r3, r3, #4
 8007372:	d07f      	beq.n	8007474 <HAL_SD_Init+0x1f4>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8007374:	2304      	movs	r3, #4
 8007376:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8007378:	2303      	movs	r3, #3
  errorstate = SD_CmdResp7Error(hsd);
 800737a:	f88d 3013 	strb.w	r3, [sp, #19]
  if (errorstate == SD_OK)
 800737e:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8007382:	2300      	movs	r3, #0
 8007384:	2a00      	cmp	r2, #0
 8007386:	d17c      	bne.n	8007482 <HAL_SD_Init+0x202>
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 8007388:	2201      	movs	r2, #1
 800738a:	6222      	str	r2, [r4, #32]
    sdtype        = SD_HIGH_CAPACITY;
 800738c:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8007390:	2537      	movs	r5, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007392:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Argument         = 0;
 8007394:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8007396:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007398:	f001 f88b 	bl	80084b2 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800739c:	4629      	mov	r1, r5
 800739e:	4620      	mov	r0, r4
 80073a0:	f7ff fbec 	bl	8006b7c <SD_CmdResp1Error>
 80073a4:	f88d 0013 	strb.w	r0, [sp, #19]
  if(errorstate == SD_OK)
 80073a8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80073ac:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1b2      	bne.n	800731a <HAL_SD_Init+0x9a>
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 80073b4:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
      sdmmc_cmdinitstructure.Argument         = 0;
 80073b8:	46a8      	mov	r8, r5
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 80073ba:	f447 1780 	orr.w	r7, r7, #1048576	; 0x100000
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80073be:	f04f 0b37 	mov.w	fp, #55	; 0x37
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80073c2:	a905      	add	r1, sp, #20
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80073c4:	f04f 0a40 	mov.w	sl, #64	; 0x40
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80073c8:	f44f 6980 	mov.w	r9, #1024	; 0x400
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80073cc:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = 0;
 80073ce:	f8cd 8014 	str.w	r8, [sp, #20]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80073d2:	f8cd b018 	str.w	fp, [sp, #24]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80073d6:	f8cd a01c 	str.w	sl, [sp, #28]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80073da:	f8cd 8020 	str.w	r8, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80073de:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80073e2:	f001 f866 	bl	80084b2 <SDMMC_SendCommand>
      errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80073e6:	4659      	mov	r1, fp
 80073e8:	4620      	mov	r0, r4
 80073ea:	f7ff fbc7 	bl	8006b7c <SD_CmdResp1Error>
 80073ee:	f88d 0013 	strb.w	r0, [sp, #19]
      if(errorstate != SD_OK)
 80073f2:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80073f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d18d      	bne.n	800731a <HAL_SD_Init+0x9a>
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 80073fe:	2329      	movs	r3, #41	; 0x29
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007400:	a905      	add	r1, sp, #20
 8007402:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 8007404:	9705      	str	r7, [sp, #20]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 8007406:	9306      	str	r3, [sp, #24]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8007408:	f8cd a01c 	str.w	sl, [sp, #28]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800740c:	9208      	str	r2, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800740e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007412:	f001 f84e 	bl	80084b2 <SDMMC_SendCommand>
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8007416:	6820      	ldr	r0, [r4, #0]
 8007418:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800741a:	f013 0f45 	tst.w	r3, #69	; 0x45
 800741e:	d0fb      	beq.n	8007418 <HAL_SD_Init+0x198>
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8007420:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007422:	f013 0304 	ands.w	r3, r3, #4
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8007426:	bf1b      	ittet	ne
 8007428:	2304      	movne	r3, #4
 800742a:	6383      	strne	r3, [r0, #56]	; 0x38
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800742c:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    return errorstate;
 8007430:	2303      	movne	r3, #3
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007432:	bf08      	it	eq
 8007434:	6382      	streq	r2, [r0, #56]	; 0x38
      errorstate = SD_CmdResp3Error(hsd);
 8007436:	f88d 3013 	strb.w	r3, [sp, #19]
      if(errorstate != SD_OK)
 800743a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800743e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8007442:	2b00      	cmp	r3, #0
 8007444:	f47f af69 	bne.w	800731a <HAL_SD_Init+0x9a>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007448:	f001 f848 	bl	80084dc <SDMMC_GetResponse>
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 800744c:	2800      	cmp	r0, #0
      count++;
 800744e:	f105 0501 	add.w	r5, r5, #1
 8007452:	f64f 73ff 	movw	r3, #65535	; 0xffff
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8007456:	db16      	blt.n	8007486 <HAL_SD_Init+0x206>
 8007458:	429d      	cmp	r5, r3
 800745a:	d1b0      	bne.n	80073be <HAL_SD_Init+0x13e>
      errorstate = SD_INVALID_VOLTRANGE;
 800745c:	231b      	movs	r3, #27
 800745e:	f88d 3013 	strb.w	r3, [sp, #19]
 8007462:	e75a      	b.n	800731a <HAL_SD_Init+0x9a>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT);
 8007464:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007466:	f013 0f45 	tst.w	r3, #69	; 0x45
 800746a:	bf14      	ite	ne
 800746c:	2301      	movne	r3, #1
 800746e:	2300      	moveq	r3, #0
    timeout--;
 8007470:	3a01      	subs	r2, #1
 8007472:	e777      	b.n	8007364 <HAL_SD_Init+0xe4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDREND))
 8007474:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007476:	0652      	lsls	r2, r2, #25
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CMDREND);
 8007478:	bf46      	itte	mi
 800747a:	2240      	movmi	r2, #64	; 0x40
 800747c:	6382      	strmi	r2, [r0, #56]	; 0x38
  return errorstate;
 800747e:	2329      	movpl	r3, #41	; 0x29
 8007480:	e77b      	b.n	800737a <HAL_SD_Init+0xfa>
  uint32_t sdtype = SD_STD_CAPACITY;
 8007482:	461f      	mov	r7, r3
 8007484:	e784      	b.n	8007390 <HAL_SD_Init+0x110>
    if(count >= SD_MAX_VOLT_TRIAL)
 8007486:	429d      	cmp	r5, r3
 8007488:	d0e8      	beq.n	800745c <HAL_SD_Init+0x1dc>
    if((response & SD_HIGH_CAPACITY) == SD_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800748a:	0047      	lsls	r7, r0, #1
      hsd->CardType = HIGH_CAPACITY_SD_CARD;
 800748c:	bf44      	itt	mi
 800748e:	2302      	movmi	r3, #2
 8007490:	6223      	strmi	r3, [r4, #32]
 8007492:	e742      	b.n	800731a <HAL_SD_Init+0x9a>
  if(SDMMC_GetPowerState(hsd->Instance) == 0) /* Power off */
 8007494:	6820      	ldr	r0, [r4, #0]
 8007496:	f001 f808 	bl	80084aa <SDMMC_GetPowerState>
 800749a:	2800      	cmp	r0, #0
 800749c:	f000 80c2 	beq.w	8007624 <HAL_SD_Init+0x3a4>
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 80074a0:	6a23      	ldr	r3, [r4, #32]
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d026      	beq.n	80074f4 <HAL_SD_Init+0x274>
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
 80074a6:	2302      	movs	r3, #2
 80074a8:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 80074aa:	23c0      	movs	r3, #192	; 0xc0
 80074ac:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80074ae:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80074b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80074b4:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Argument         = 0;
 80074b6:	9505      	str	r5, [sp, #20]
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80074b8:	9508      	str	r5, [sp, #32]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80074ba:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80074bc:	f000 fff9 	bl	80084b2 <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 80074c0:	4620      	mov	r0, r4
 80074c2:	f7ff fb45 	bl	8006b50 <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 80074c6:	4605      	mov	r5, r0
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d155      	bne.n	8007578 <HAL_SD_Init+0x2f8>
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80074cc:	4601      	mov	r1, r0
 80074ce:	6820      	ldr	r0, [r4, #0]
 80074d0:	f001 f804 	bl	80084dc <SDMMC_GetResponse>
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80074d4:	2104      	movs	r1, #4
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80074d6:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80074d8:	6820      	ldr	r0, [r4, #0]
 80074da:	f000 ffff 	bl	80084dc <SDMMC_GetResponse>
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80074de:	2108      	movs	r1, #8
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80074e0:	63e0      	str	r0, [r4, #60]	; 0x3c
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80074e2:	6820      	ldr	r0, [r4, #0]
 80074e4:	f000 fffa 	bl	80084dc <SDMMC_GetResponse>
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80074e8:	210c      	movs	r1, #12
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80074ea:	6420      	str	r0, [r4, #64]	; 0x40
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80074ec:	6820      	ldr	r0, [r4, #0]
 80074ee:	f000 fff5 	bl	80084dc <SDMMC_GetResponse>
 80074f2:	6460      	str	r0, [r4, #68]	; 0x44
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80074f4:	6a23      	ldr	r3, [r4, #32]
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d92b      	bls.n	8007552 <HAL_SD_Init+0x2d2>
 80074fa:	2b06      	cmp	r3, #6
 80074fc:	d029      	beq.n	8007552 <HAL_SD_Init+0x2d2>
  uint16_t sd_rca = 1;
 80074fe:	2001      	movs	r0, #1
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8007500:	6a23      	ldr	r3, [r4, #32]
 8007502:	2b04      	cmp	r3, #4
 8007504:	f000 8092 	beq.w	800762c <HAL_SD_Init+0x3ac>
    hsd->RCA = sd_rca;
 8007508:	6260      	str	r0, [r4, #36]	; 0x24
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 800750a:	2309      	movs	r3, #9
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800750c:	0400      	lsls	r0, r0, #16
 800750e:	9005      	str	r0, [sp, #20]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 8007510:	9306      	str	r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007512:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8007514:	23c0      	movs	r3, #192	; 0xc0
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007516:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8007518:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800751a:	f000 ffca 	bl	80084b2 <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 800751e:	4620      	mov	r0, r4
 8007520:	f7ff fb16 	bl	8006b50 <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 8007524:	4605      	mov	r5, r0
 8007526:	bb38      	cbnz	r0, 8007578 <HAL_SD_Init+0x2f8>
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007528:	4601      	mov	r1, r0
 800752a:	6820      	ldr	r0, [r4, #0]
 800752c:	f000 ffd6 	bl	80084dc <SDMMC_GetResponse>
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007530:	2104      	movs	r1, #4
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007532:	62a0      	str	r0, [r4, #40]	; 0x28
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007534:	6820      	ldr	r0, [r4, #0]
 8007536:	f000 ffd1 	bl	80084dc <SDMMC_GetResponse>
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800753a:	2108      	movs	r1, #8
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800753c:	62e0      	str	r0, [r4, #44]	; 0x2c
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800753e:	6820      	ldr	r0, [r4, #0]
 8007540:	f000 ffcc 	bl	80084dc <SDMMC_GetResponse>
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007544:	210c      	movs	r1, #12
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007546:	6320      	str	r0, [r4, #48]	; 0x30
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007548:	6820      	ldr	r0, [r4, #0]
 800754a:	f000 ffc7 	bl	80084dc <SDMMC_GetResponse>
 800754e:	6360      	str	r0, [r4, #52]	; 0x34
 8007550:	e012      	b.n	8007578 <HAL_SD_Init+0x2f8>
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
 8007552:	2303      	movs	r3, #3
 8007554:	9306      	str	r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007556:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8007558:	2340      	movs	r3, #64	; 0x40
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800755a:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800755c:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800755e:	f000 ffa8 	bl	80084b2 <SDMMC_SendCommand>
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8007562:	6820      	ldr	r0, [r4, #0]
 8007564:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007566:	f013 0f45 	tst.w	r3, #69	; 0x45
 800756a:	d0fb      	beq.n	8007564 <HAL_SD_Init+0x2e4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 800756c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800756e:	075d      	lsls	r5, r3, #29
 8007570:	d536      	bpl.n	80075e0 <HAL_SD_Init+0x360>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8007572:	2304      	movs	r3, #4
 8007574:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8007576:	2503      	movs	r5, #3
  errorstate = SD_Initialize_Cards(hsd);
 8007578:	f88d 5012 	strb.w	r5, [sp, #18]
  if (errorstate != SD_OK)
 800757c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8007580:	2b00      	cmp	r3, #0
 8007582:	f47f aed6 	bne.w	8007332 <HAL_SD_Init+0xb2>
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
 8007586:	4631      	mov	r1, r6
 8007588:	4620      	mov	r0, r4
 800758a:	f7ff fd3f 	bl	800700c <HAL_SD_Get_CardInfo>
 800758e:	f88d 0012 	strb.w	r0, [sp, #18]
  if (errorstate == SD_OK)
 8007592:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8007596:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800759a:	b9ab      	cbnz	r3, 80075c8 <HAL_SD_Init+0x348>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 800759c:	f8b6 3054 	ldrh.w	r3, [r6, #84]	; 0x54
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80075a0:	6820      	ldr	r0, [r4, #0]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80075a2:	9208      	str	r2, [sp, #32]
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 80075a4:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.Argument         = (uint32_t)addr;
 80075a6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80075a8:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 80075aa:	2507      	movs	r5, #7
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80075ac:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80075ae:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80075b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075b4:	9309      	str	r3, [sp, #36]	; 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 80075b6:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80075b8:	f000 ff7b 	bl	80084b2 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEL_DESEL_CARD);
 80075bc:	4629      	mov	r1, r5
 80075be:	4620      	mov	r0, r4
 80075c0:	f7ff fadc 	bl	8006b7c <SD_CmdResp1Error>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 80075c4:	f88d 0012 	strb.w	r0, [sp, #18]
  SDMMC_Init(hsd->Instance, hsd->Init);   
 80075c8:	f104 0310 	add.w	r3, r4, #16
 80075cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80075d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80075d4:	1d23      	adds	r3, r4, #4
 80075d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80075d8:	6820      	ldr	r0, [r4, #0]
 80075da:	f000 ff43 	bl	8008464 <SDMMC_Init>
 80075de:	e6a8      	b.n	8007332 <HAL_SD_Init+0xb2>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 80075e0:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80075e2:	f015 0501 	ands.w	r5, r5, #1
 80075e6:	d002      	beq.n	80075ee <HAL_SD_Init+0x36e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 80075e8:	2501      	movs	r5, #1
 80075ea:	6385      	str	r5, [r0, #56]	; 0x38
 80075ec:	e7c4      	b.n	8007578 <HAL_SD_Init+0x2f8>
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 80075ee:	f000 ff72 	bl	80084d6 <SDMMC_GetCommandResponse>
 80075f2:	2803      	cmp	r0, #3
 80075f4:	d001      	beq.n	80075fa <HAL_SD_Init+0x37a>
    return errorstate;
 80075f6:	2510      	movs	r5, #16
 80075f8:	e7be      	b.n	8007578 <HAL_SD_Init+0x2f8>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075fa:	6820      	ldr	r0, [r4, #0]
 80075fc:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8007600:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007602:	4629      	mov	r1, r5
 8007604:	f000 ff6a 	bl	80084dc <SDMMC_GetResponse>
  if((response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)) == SD_ALLZERO)
 8007608:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 800760c:	d101      	bne.n	8007612 <HAL_SD_Init+0x392>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800760e:	0c00      	lsrs	r0, r0, #16
 8007610:	e776      	b.n	8007500 <HAL_SD_Init+0x280>
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
 8007612:	0481      	lsls	r1, r0, #18
 8007614:	d408      	bmi.n	8007628 <HAL_SD_Init+0x3a8>
  if((response_r1 & SD_R6_ILLEGAL_CMD) == SD_R6_ILLEGAL_CMD)
 8007616:	0442      	lsls	r2, r0, #17
 8007618:	d4ed      	bmi.n	80075f6 <HAL_SD_Init+0x376>
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
 800761a:	0403      	lsls	r3, r0, #16
 800761c:	f57f af6f 	bpl.w	80074fe <HAL_SD_Init+0x27e>
    return(SD_COM_CRC_FAILED);
 8007620:	250f      	movs	r5, #15
 8007622:	e7a9      	b.n	8007578 <HAL_SD_Init+0x2f8>
    return errorstate;
 8007624:	2525      	movs	r5, #37	; 0x25
 8007626:	e7a7      	b.n	8007578 <HAL_SD_Init+0x2f8>
    return(SD_GENERAL_UNKNOWN_ERROR);
 8007628:	2513      	movs	r5, #19
 800762a:	e7a5      	b.n	8007578 <HAL_SD_Init+0x2f8>
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 800762c:	2500      	movs	r5, #0
 800762e:	e7a3      	b.n	8007578 <HAL_SD_Init+0x2f8>

08007630 <HAL_SD_WideBusOperation_Config>:
{
 8007630:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hsd->CardType == MULTIMEDIA_CARD)
 8007632:	6a03      	ldr	r3, [r0, #32]
 8007634:	2b03      	cmp	r3, #3
{
 8007636:	b08d      	sub	sp, #52	; 0x34
 8007638:	4605      	mov	r5, r0
 800763a:	460e      	mov	r6, r1
  if (hsd->CardType == MULTIMEDIA_CARD)
 800763c:	f000 8088 	beq.w	8007750 <HAL_SD_WideBusOperation_Config+0x120>
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8007640:	2b02      	cmp	r3, #2
 8007642:	f200 8083 	bhi.w	800774c <HAL_SD_WideBusOperation_Config+0x11c>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8007646:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800764a:	f000 8081 	beq.w	8007750 <HAL_SD_WideBusOperation_Config+0x120>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800764e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8007652:	d14c      	bne.n	80076ee <HAL_SD_WideBusOperation_Config+0xbe>
  uint32_t scr[2] = {0, 0};
 8007654:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8007656:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8007658:	9104      	str	r1, [sp, #16]
 800765a:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 800765c:	f000 ff3e 	bl	80084dc <SDMMC_GetResponse>
 8007660:	0180      	lsls	r0, r0, #6
 8007662:	d46d      	bmi.n	8007740 <HAL_SD_WideBusOperation_Config+0x110>
  errorstate = SD_FindSCR(hsd, scr);
 8007664:	a904      	add	r1, sp, #16
 8007666:	4628      	mov	r0, r5
 8007668:	f7ff fafe 	bl	8006c68 <SD_FindSCR>
  if(errorstate != SD_OK)
 800766c:	4604      	mov	r4, r0
 800766e:	2800      	cmp	r0, #0
 8007670:	d167      	bne.n	8007742 <HAL_SD_WideBusOperation_Config+0x112>
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 8007672:	9b05      	ldr	r3, [sp, #20]
 8007674:	0359      	lsls	r1, r3, #13
 8007676:	d567      	bpl.n	8007748 <HAL_SD_WideBusOperation_Config+0x118>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8007678:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800767a:	9009      	str	r0, [sp, #36]	; 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800767c:	041b      	lsls	r3, r3, #16
 800767e:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8007680:	2340      	movs	r3, #64	; 0x40
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8007682:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8007684:	9308      	str	r3, [sp, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007686:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8007688:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800768c:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800768e:	930a      	str	r3, [sp, #40]	; 0x28
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8007690:	9707      	str	r7, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007692:	f000 ff0e 	bl	80084b2 <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8007696:	4639      	mov	r1, r7
 8007698:	4628      	mov	r0, r5
 800769a:	f7ff fa6f 	bl	8006b7c <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 800769e:	4604      	mov	r4, r0
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d14e      	bne.n	8007742 <HAL_SD_WideBusOperation_Config+0x112>
    sdmmc_cmdinitstructure.Argument         = 2;
 80076a4:	2302      	movs	r3, #2
 80076a6:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 80076a8:	2406      	movs	r4, #6
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80076aa:	a906      	add	r1, sp, #24
 80076ac:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 80076ae:	9407      	str	r4, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80076b0:	f000 feff 	bl	80084b2 <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 80076b4:	4621      	mov	r1, r4
 80076b6:	4628      	mov	r0, r5
 80076b8:	f7ff fa60 	bl	8006b7c <SD_CmdResp1Error>
 80076bc:	4604      	mov	r4, r0
    if (errorstate == SD_OK)
 80076be:	2800      	cmp	r0, #0
 80076c0:	d13f      	bne.n	8007742 <HAL_SD_WideBusOperation_Config+0x112>
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
 80076c2:	686b      	ldr	r3, [r5, #4]
 80076c4:	9306      	str	r3, [sp, #24]
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
 80076c6:	68ab      	ldr	r3, [r5, #8]
 80076c8:	9307      	str	r3, [sp, #28]
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80076ca:	68eb      	ldr	r3, [r5, #12]
 80076cc:	9308      	str	r3, [sp, #32]
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80076ce:	696b      	ldr	r3, [r5, #20]
 80076d0:	930a      	str	r3, [sp, #40]	; 0x28
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
 80076d2:	69ab      	ldr	r3, [r5, #24]
 80076d4:	930b      	str	r3, [sp, #44]	; 0x2c
      tmpinit.BusWide             = WideMode;
 80076d6:	9609      	str	r6, [sp, #36]	; 0x24
      SDMMC_Init(hsd->Instance, tmpinit);
 80076d8:	ab0c      	add	r3, sp, #48	; 0x30
 80076da:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80076de:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80076e2:	ab06      	add	r3, sp, #24
 80076e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076e6:	6828      	ldr	r0, [r5, #0]
 80076e8:	f000 febc 	bl	8008464 <SDMMC_Init>
 80076ec:	e029      	b.n	8007742 <HAL_SD_WideBusOperation_Config+0x112>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80076ee:	2900      	cmp	r1, #0
 80076f0:	d130      	bne.n	8007754 <HAL_SD_WideBusOperation_Config+0x124>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 80076f2:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 80076f4:	9104      	str	r1, [sp, #16]
 80076f6:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 80076f8:	f000 fef0 	bl	80084dc <SDMMC_GetResponse>
 80076fc:	0182      	lsls	r2, r0, #6
 80076fe:	d41f      	bmi.n	8007740 <HAL_SD_WideBusOperation_Config+0x110>
  errorstate = SD_FindSCR(hsd, scr);
 8007700:	a904      	add	r1, sp, #16
 8007702:	4628      	mov	r0, r5
 8007704:	f7ff fab0 	bl	8006c68 <SD_FindSCR>
  if(errorstate != SD_OK)
 8007708:	4604      	mov	r4, r0
 800770a:	b9d0      	cbnz	r0, 8007742 <HAL_SD_WideBusOperation_Config+0x112>
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 800770c:	9b05      	ldr	r3, [sp, #20]
 800770e:	03db      	lsls	r3, r3, #15
 8007710:	d51a      	bpl.n	8007748 <HAL_SD_WideBusOperation_Config+0x118>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8007712:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8007714:	9009      	str	r0, [sp, #36]	; 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8007716:	041b      	lsls	r3, r3, #16
 8007718:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800771a:	2340      	movs	r3, #64	; 0x40
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800771c:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800771e:	9308      	str	r3, [sp, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007720:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8007722:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007726:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8007728:	930a      	str	r3, [sp, #40]	; 0x28
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800772a:	9707      	str	r7, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800772c:	f000 fec1 	bl	80084b2 <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8007730:	4639      	mov	r1, r7
 8007732:	4628      	mov	r0, r5
 8007734:	f7ff fa22 	bl	8006b7c <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 8007738:	4604      	mov	r4, r0
 800773a:	b910      	cbnz	r0, 8007742 <HAL_SD_WideBusOperation_Config+0x112>
    sdmmc_cmdinitstructure.Argument         = 0;
 800773c:	9006      	str	r0, [sp, #24]
 800773e:	e7b3      	b.n	80076a8 <HAL_SD_WideBusOperation_Config+0x78>
    return errorstate;
 8007740:	240e      	movs	r4, #14
}
 8007742:	4620      	mov	r0, r4
 8007744:	b00d      	add	sp, #52	; 0x34
 8007746:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return errorstate;
 8007748:	2425      	movs	r4, #37	; 0x25
 800774a:	e7fa      	b.n	8007742 <HAL_SD_WideBusOperation_Config+0x112>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800774c:	2400      	movs	r4, #0
 800774e:	e7f8      	b.n	8007742 <HAL_SD_WideBusOperation_Config+0x112>
    return errorstate;
 8007750:	2427      	movs	r4, #39	; 0x27
 8007752:	e7f6      	b.n	8007742 <HAL_SD_WideBusOperation_Config+0x112>
      errorstate = SD_INVALID_PARAMETER;
 8007754:	2426      	movs	r4, #38	; 0x26
 8007756:	e7f4      	b.n	8007742 <HAL_SD_WideBusOperation_Config+0x112>

08007758 <HAL_SD_StopTransfer>:
{
 8007758:	b530      	push	{r4, r5, lr}
 800775a:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Argument         = 0;
 800775c:	2300      	movs	r3, #0
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800775e:	2240      	movs	r2, #64	; 0x40
{
 8007760:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.Argument         = 0;
 8007762:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8007764:	250c      	movs	r5, #12
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8007766:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007768:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800776a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800776e:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8007770:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8007772:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8007774:	9502      	str	r5, [sp, #8]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007776:	f000 fe9c 	bl	80084b2 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_STOP_TRANSMISSION);
 800777a:	4629      	mov	r1, r5
 800777c:	4620      	mov	r0, r4
 800777e:	f7ff f9fd 	bl	8006b7c <SD_CmdResp1Error>
}
 8007782:	b007      	add	sp, #28
 8007784:	bd30      	pop	{r4, r5, pc}

08007786 <HAL_SD_CheckReadOperation>:
{
 8007786:	b538      	push	{r3, r4, r5, lr}
 8007788:	4604      	mov	r4, r0
 800778a:	460d      	mov	r5, r1
  tmp1 = hsd->DmaTransferCplt; 
 800778c:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 800778e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8007790:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  uint32_t timeout = Timeout;
 8007792:	462a      	mov	r2, r5
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8007794:	b2db      	uxtb	r3, r3
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8007796:	4208      	tst	r0, r1
 8007798:	d100      	bne.n	800779c <HAL_SD_CheckReadOperation+0x16>
 800779a:	b1b3      	cbz	r3, 80077ca <HAL_SD_CheckReadOperation+0x44>
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXACT)) && (timeout > 0))
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077a0:	0492      	lsls	r2, r2, #18
 80077a2:	d500      	bpl.n	80077a6 <HAL_SD_CheckReadOperation+0x20>
 80077a4:	b9cd      	cbnz	r5, 80077da <HAL_SD_CheckReadOperation+0x54>
  if (hsd->SdOperation == SD_READ_MULTIPLE_BLOCK)
 80077a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d118      	bne.n	80077de <HAL_SD_CheckReadOperation+0x58>
    errorstate = HAL_SD_StopTransfer(hsd);
 80077ac:	4620      	mov	r0, r4
 80077ae:	f7ff ffd3 	bl	8007758 <HAL_SD_StopTransfer>
  if ((timeout == 0) && (errorstate == SD_OK))
 80077b2:	b90d      	cbnz	r5, 80077b8 <HAL_SD_CheckReadOperation+0x32>
 80077b4:	b900      	cbnz	r0, 80077b8 <HAL_SD_CheckReadOperation+0x32>
    errorstate = SD_DATA_TIMEOUT;
 80077b6:	2004      	movs	r0, #4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80077be:	639a      	str	r2, [r3, #56]	; 0x38
  if (hsd->SdTransferErr != SD_OK)
 80077c0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80077c2:	b183      	cbz	r3, 80077e6 <HAL_SD_CheckReadOperation+0x60>
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 80077c4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80077c6:	b2c0      	uxtb	r0, r0
 80077c8:	bd38      	pop	{r3, r4, r5, pc}
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 80077ca:	2a00      	cmp	r2, #0
 80077cc:	d0e6      	beq.n	800779c <HAL_SD_CheckReadOperation+0x16>
    tmp1 = hsd->DmaTransferCplt; 
 80077ce:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 80077d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 80077d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 80077d4:	3a01      	subs	r2, #1
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	e7dd      	b.n	8007796 <HAL_SD_CheckReadOperation+0x10>
    timeout--;  
 80077da:	3d01      	subs	r5, #1
 80077dc:	e7df      	b.n	800779e <HAL_SD_CheckReadOperation+0x18>
  if ((timeout == 0) && (errorstate == SD_OK))
 80077de:	2d00      	cmp	r5, #0
 80077e0:	d0e9      	beq.n	80077b6 <HAL_SD_CheckReadOperation+0x30>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 80077e2:	2000      	movs	r0, #0
 80077e4:	e7e8      	b.n	80077b8 <HAL_SD_CheckReadOperation+0x32>
}
 80077e6:	bd38      	pop	{r3, r4, r5, pc}

080077e8 <HAL_SD_GetStatus>:
{
 80077e8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80077ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80077ec:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80077ee:	041b      	lsls	r3, r3, #16
 80077f0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80077f2:	2340      	movs	r3, #64	; 0x40
 80077f4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80077f6:	2300      	movs	r3, #0
{
 80077f8:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 80077fa:	250d      	movs	r5, #13
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80077fc:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80077fe:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8007800:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007804:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8007806:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 8007808:	9502      	str	r5, [sp, #8]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800780a:	f000 fe52 	bl	80084b2 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEND_STATUS);
 800780e:	4629      	mov	r1, r5
 8007810:	4620      	mov	r0, r4
 8007812:	f7ff f9b3 	bl	8006b7c <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 8007816:	4601      	mov	r1, r0
 8007818:	b948      	cbnz	r0, 800782e <HAL_SD_GetStatus+0x46>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800781a:	6820      	ldr	r0, [r4, #0]
 800781c:	f000 fe5e 	bl	80084dc <SDMMC_GetResponse>
  if (cardstate == SD_CARD_TRANSFER)
 8007820:	f3c0 2043 	ubfx	r0, r0, #9, #4
    return SD_TRANSFER_OK;
 8007824:	3804      	subs	r0, #4
 8007826:	bf18      	it	ne
 8007828:	2001      	movne	r0, #1
}
 800782a:	b007      	add	sp, #28
 800782c:	bd30      	pop	{r4, r5, pc}
    return SD_TRANSFER_ERROR;
 800782e:	2002      	movs	r0, #2
 8007830:	e7fb      	b.n	800782a <HAL_SD_GetStatus+0x42>

08007832 <HAL_SD_CheckWriteOperation>:
{
 8007832:	b570      	push	{r4, r5, r6, lr}
 8007834:	4604      	mov	r4, r0
 8007836:	460e      	mov	r6, r1
  tmp1 = hsd->DmaTransferCplt; 
 8007838:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 800783a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 800783c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  uint32_t timeout = Timeout;
 800783e:	4632      	mov	r2, r6
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8007840:	b2db      	uxtb	r3, r3
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8007842:	4208      	tst	r0, r1
 8007844:	d100      	bne.n	8007848 <HAL_SD_CheckWriteOperation+0x16>
 8007846:	b1c3      	cbz	r3, 800787a <HAL_SD_CheckWriteOperation+0x48>
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXACT))  && (timeout > 0))
 8007848:	6823      	ldr	r3, [r4, #0]
 800784a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800784c:	04d2      	lsls	r2, r2, #19
 800784e:	d500      	bpl.n	8007852 <HAL_SD_CheckWriteOperation+0x20>
 8007850:	b9de      	cbnz	r6, 800788a <HAL_SD_CheckWriteOperation+0x58>
  if (hsd->SdOperation == SD_WRITE_MULTIPLE_BLOCK)
 8007852:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007854:	2b03      	cmp	r3, #3
 8007856:	d120      	bne.n	800789a <HAL_SD_CheckWriteOperation+0x68>
    errorstate = HAL_SD_StopTransfer(hsd);
 8007858:	4620      	mov	r0, r4
 800785a:	f7ff ff7d 	bl	8007758 <HAL_SD_StopTransfer>
 800785e:	4605      	mov	r5, r0
  if ((timeout == 0) && (errorstate == SD_OK))
 8007860:	b90e      	cbnz	r6, 8007866 <HAL_SD_CheckWriteOperation+0x34>
 8007862:	b900      	cbnz	r0, 8007866 <HAL_SD_CheckWriteOperation+0x34>
    errorstate = SD_DATA_TIMEOUT;
 8007864:	2504      	movs	r5, #4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800786c:	639a      	str	r2, [r3, #56]	; 0x38
  if (hsd->SdTransferErr != SD_OK)
 800786e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007870:	b16b      	cbz	r3, 800788e <HAL_SD_CheckWriteOperation+0x5c>
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 8007872:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007874:	b2ed      	uxtb	r5, r5
}
 8007876:	4628      	mov	r0, r5
 8007878:	bd70      	pop	{r4, r5, r6, pc}
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 800787a:	2a00      	cmp	r2, #0
 800787c:	d0e4      	beq.n	8007848 <HAL_SD_CheckWriteOperation+0x16>
    tmp1 = hsd->DmaTransferCplt; 
 800787e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 8007880:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8007882:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 8007884:	3a01      	subs	r2, #1
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8007886:	b2db      	uxtb	r3, r3
 8007888:	e7db      	b.n	8007842 <HAL_SD_CheckWriteOperation+0x10>
    timeout--;  
 800788a:	3e01      	subs	r6, #1
 800788c:	e7dd      	b.n	800784a <HAL_SD_CheckWriteOperation+0x18>
  while(HAL_SD_GetStatus(hsd) != SD_TRANSFER_OK)
 800788e:	4620      	mov	r0, r4
 8007890:	f7ff ffaa 	bl	80077e8 <HAL_SD_GetStatus>
 8007894:	2800      	cmp	r0, #0
 8007896:	d1fa      	bne.n	800788e <HAL_SD_CheckWriteOperation+0x5c>
 8007898:	e7ed      	b.n	8007876 <HAL_SD_CheckWriteOperation+0x44>
  if ((timeout == 0) && (errorstate == SD_OK))
 800789a:	2e00      	cmp	r6, #0
 800789c:	d0e2      	beq.n	8007864 <HAL_SD_CheckWriteOperation+0x32>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800789e:	2500      	movs	r5, #0
 80078a0:	e7e1      	b.n	8007866 <HAL_SD_CheckWriteOperation+0x34>

080078a2 <HAL_TIM_Base_MspInit>:
 80078a2:	4770      	bx	lr

080078a4 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078a4:	6803      	ldr	r3, [r0, #0]
 80078a6:	68da      	ldr	r2, [r3, #12]
 80078a8:	f042 0201 	orr.w	r2, r2, #1
 80078ac:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	f042 0201 	orr.w	r2, r2, #1
 80078b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80078b6:	2000      	movs	r0, #0
 80078b8:	4770      	bx	lr
	...

080078bc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078bc:	4a2e      	ldr	r2, [pc, #184]	; (8007978 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80078be:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078c0:	4290      	cmp	r0, r2
 80078c2:	d012      	beq.n	80078ea <TIM_Base_SetConfig+0x2e>
 80078c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80078c8:	d00f      	beq.n	80078ea <TIM_Base_SetConfig+0x2e>
 80078ca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80078ce:	4290      	cmp	r0, r2
 80078d0:	d00b      	beq.n	80078ea <TIM_Base_SetConfig+0x2e>
 80078d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078d6:	4290      	cmp	r0, r2
 80078d8:	d007      	beq.n	80078ea <TIM_Base_SetConfig+0x2e>
 80078da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078de:	4290      	cmp	r0, r2
 80078e0:	d003      	beq.n	80078ea <TIM_Base_SetConfig+0x2e>
 80078e2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80078e6:	4290      	cmp	r0, r2
 80078e8:	d119      	bne.n	800791e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80078ea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80078f0:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078f2:	4a21      	ldr	r2, [pc, #132]	; (8007978 <TIM_Base_SetConfig+0xbc>)
 80078f4:	4290      	cmp	r0, r2
 80078f6:	d01d      	beq.n	8007934 <TIM_Base_SetConfig+0x78>
 80078f8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80078fc:	d01a      	beq.n	8007934 <TIM_Base_SetConfig+0x78>
 80078fe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007902:	4290      	cmp	r0, r2
 8007904:	d016      	beq.n	8007934 <TIM_Base_SetConfig+0x78>
 8007906:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800790a:	4290      	cmp	r0, r2
 800790c:	d012      	beq.n	8007934 <TIM_Base_SetConfig+0x78>
 800790e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007912:	4290      	cmp	r0, r2
 8007914:	d00e      	beq.n	8007934 <TIM_Base_SetConfig+0x78>
 8007916:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800791a:	4290      	cmp	r0, r2
 800791c:	d00a      	beq.n	8007934 <TIM_Base_SetConfig+0x78>
 800791e:	4a17      	ldr	r2, [pc, #92]	; (800797c <TIM_Base_SetConfig+0xc0>)
 8007920:	4290      	cmp	r0, r2
 8007922:	d007      	beq.n	8007934 <TIM_Base_SetConfig+0x78>
 8007924:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007928:	4290      	cmp	r0, r2
 800792a:	d003      	beq.n	8007934 <TIM_Base_SetConfig+0x78>
 800792c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007930:	4290      	cmp	r0, r2
 8007932:	d103      	bne.n	800793c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007934:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800793a:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 800793c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800793e:	688b      	ldr	r3, [r1, #8]
 8007940:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007942:	680b      	ldr	r3, [r1, #0]
 8007944:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007946:	4b0c      	ldr	r3, [pc, #48]	; (8007978 <TIM_Base_SetConfig+0xbc>)
 8007948:	4298      	cmp	r0, r3
 800794a:	d00f      	beq.n	800796c <TIM_Base_SetConfig+0xb0>
 800794c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007950:	4298      	cmp	r0, r3
 8007952:	d00b      	beq.n	800796c <TIM_Base_SetConfig+0xb0>
 8007954:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8007958:	4298      	cmp	r0, r3
 800795a:	d007      	beq.n	800796c <TIM_Base_SetConfig+0xb0>
 800795c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007960:	4298      	cmp	r0, r3
 8007962:	d003      	beq.n	800796c <TIM_Base_SetConfig+0xb0>
 8007964:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007968:	4298      	cmp	r0, r3
 800796a:	d101      	bne.n	8007970 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800796c:	690b      	ldr	r3, [r1, #16]
 800796e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007970:	2301      	movs	r3, #1
 8007972:	6143      	str	r3, [r0, #20]
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	40012c00 	.word	0x40012c00
 800797c:	40014000 	.word	0x40014000

08007980 <HAL_TIM_Base_Init>:
{
 8007980:	b510      	push	{r4, lr}
  if(htim == NULL)
 8007982:	4604      	mov	r4, r0
 8007984:	b1a0      	cbz	r0, 80079b0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8007986:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800798a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800798e:	b91b      	cbnz	r3, 8007998 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8007990:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8007994:	f7ff ff85 	bl	80078a2 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8007998:	2302      	movs	r3, #2
 800799a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800799e:	6820      	ldr	r0, [r4, #0]
 80079a0:	1d21      	adds	r1, r4, #4
 80079a2:	f7ff ff8b 	bl	80078bc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80079a6:	2301      	movs	r3, #1
 80079a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80079ac:	2000      	movs	r0, #0
 80079ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80079b0:	2001      	movs	r0, #1
}
 80079b2:	bd10      	pop	{r4, pc}

080079b4 <HAL_UART_MspInit>:
 80079b4:	4770      	bx	lr

080079b6 <HAL_UART_MspDeInit>:
 80079b6:	4770      	bx	lr

080079b8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80079b8:	b538      	push	{r3, r4, r5, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 80079ba:	4605      	mov	r5, r0
 80079bc:	b1a0      	cbz	r0, 80079e8 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->State = HAL_UART_STATE_BUSY;
 80079be:	2302      	movs	r3, #2
 80079c0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80079c4:	6803      	ldr	r3, [r0, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]

  huart->Instance->CR1 = 0x0;
 80079c8:	2400      	movs	r4, #0
  __HAL_UART_DISABLE(huart);
 80079ca:	f022 0201 	bic.w	r2, r2, #1
 80079ce:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0;
 80079d0:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0;
 80079d2:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0;
 80079d4:	609c      	str	r4, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80079d6:	f7ff ffee 	bl	80079b6 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079da:	66ec      	str	r4, [r5, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80079dc:	f885 4068 	strb.w	r4, [r5, #104]	; 0x68
  huart->State = HAL_UART_STATE_RESET;
 80079e0:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69

  return HAL_OK;
 80079e4:	4620      	mov	r0, r4
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80079e8:	2001      	movs	r0, #1
}
 80079ea:	bd38      	pop	{r3, r4, r5, pc}

080079ec <HAL_UART_Receive_IT>:
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80079ec:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d003      	beq.n	80079fc <HAL_UART_Receive_IT+0x10>
 80079f4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80079f8:	2b12      	cmp	r3, #18
 80079fa:	d147      	bne.n	8007a8c <HAL_UART_Receive_IT+0xa0>
  {
    if((pData == NULL ) || (Size == 0))
 80079fc:	2900      	cmp	r1, #0
 80079fe:	d043      	beq.n	8007a88 <HAL_UART_Receive_IT+0x9c>
 8007a00:	2a00      	cmp	r2, #0
 8007a02:	d041      	beq.n	8007a88 <HAL_UART_Receive_IT+0x9c>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a04:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d03f      	beq.n	8007a8c <HAL_UART_Receive_IT+0xa0>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007a12:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8007a14:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8007a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8007a1a:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8007a1e:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8007a22:	d123      	bne.n	8007a6c <HAL_UART_Receive_IT+0x80>
 8007a24:	6903      	ldr	r3, [r0, #16]
 8007a26:	b9fb      	cbnz	r3, 8007a68 <HAL_UART_Receive_IT+0x7c>
 8007a28:	f240 13ff 	movw	r3, #511	; 0x1ff
 8007a2c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a30:	2300      	movs	r3, #0
 8007a32:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8007a34:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a38:	6802      	ldr	r2, [r0, #0]
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8007a3a:	2b12      	cmp	r3, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8007a3c:	bf0c      	ite	eq
 8007a3e:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8007a40:	2322      	movne	r3, #34	; 0x22
 8007a42:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a46:	6813      	ldr	r3, [r2, #0]
 8007a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a4c:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007a4e:	6893      	ldr	r3, [r2, #8]
 8007a50:	f043 0301 	orr.w	r3, r3, #1
 8007a54:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007a56:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(huart);
 8007a58:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007a5a:	f041 0120 	orr.w	r1, r1, #32
    __HAL_UNLOCK(huart);
 8007a5e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007a62:	6011      	str	r1, [r2, #0]

    return HAL_OK;
 8007a64:	4618      	mov	r0, r3
 8007a66:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8007a68:	23ff      	movs	r3, #255	; 0xff
 8007a6a:	e7df      	b.n	8007a2c <HAL_UART_Receive_IT+0x40>
 8007a6c:	b923      	cbnz	r3, 8007a78 <HAL_UART_Receive_IT+0x8c>
 8007a6e:	6903      	ldr	r3, [r0, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d0f9      	beq.n	8007a68 <HAL_UART_Receive_IT+0x7c>
 8007a74:	237f      	movs	r3, #127	; 0x7f
 8007a76:	e7d9      	b.n	8007a2c <HAL_UART_Receive_IT+0x40>
 8007a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a7c:	d1d8      	bne.n	8007a30 <HAL_UART_Receive_IT+0x44>
 8007a7e:	6903      	ldr	r3, [r0, #16]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0f7      	beq.n	8007a74 <HAL_UART_Receive_IT+0x88>
 8007a84:	233f      	movs	r3, #63	; 0x3f
 8007a86:	e7d1      	b.n	8007a2c <HAL_UART_Receive_IT+0x40>
      return HAL_ERROR;
 8007a88:	2001      	movs	r0, #1
 8007a8a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8007a8c:	2002      	movs	r0, #2
  }
}
 8007a8e:	4770      	bx	lr

08007a90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a92:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8007a94:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a96:	6921      	ldr	r1, [r4, #16]
 8007a98:	68a3      	ldr	r3, [r4, #8]
 8007a9a:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8007a9c:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a9e:	430b      	orrs	r3, r1
 8007aa0:	6961      	ldr	r1, [r4, #20]
 8007aa2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8007aa4:	49b0      	ldr	r1, [pc, #704]	; (8007d68 <UART_SetConfig+0x2d8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007aa6:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8007aa8:	4001      	ands	r1, r0
 8007aaa:	430b      	orrs	r3, r1
 8007aac:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007aae:	686b      	ldr	r3, [r5, #4]
 8007ab0:	68e1      	ldr	r1, [r4, #12]
 8007ab2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007ab6:	430b      	orrs	r3, r1
 8007ab8:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007aba:	4bac      	ldr	r3, [pc, #688]	; (8007d6c <UART_SetConfig+0x2dc>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007abc:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007abe:	429d      	cmp	r5, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ac0:	bf1c      	itt	ne
 8007ac2:	6a23      	ldrne	r3, [r4, #32]
 8007ac4:	4319      	orrne	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8007ac6:	68ab      	ldr	r3, [r5, #8]
 8007ac8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007acc:	430b      	orrs	r3, r1
 8007ace:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ad0:	4ba7      	ldr	r3, [pc, #668]	; (8007d70 <UART_SetConfig+0x2e0>)
 8007ad2:	429d      	cmp	r5, r3
 8007ad4:	d118      	bne.n	8007b08 <UART_SetConfig+0x78>
 8007ad6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8007ada:	49a6      	ldr	r1, [pc, #664]	; (8007d74 <UART_SetConfig+0x2e4>)
 8007adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae0:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ae4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007ae8:	5ccb      	ldrb	r3, [r1, r3]
 8007aea:	f040 80c6 	bne.w	8007c7a <UART_SetConfig+0x1ea>
  {
    switch (clocksource)
 8007aee:	2b08      	cmp	r3, #8
 8007af0:	d828      	bhi.n	8007b44 <UART_SetConfig+0xb4>
 8007af2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007af6:	011a      	.short	0x011a
 8007af8:	012f00bf 	.word	0x012f00bf
 8007afc:	01140027 	.word	0x01140027
 8007b00:	00270027 	.word	0x00270027
 8007b04:	00330027 	.word	0x00330027
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b08:	4b9b      	ldr	r3, [pc, #620]	; (8007d78 <UART_SetConfig+0x2e8>)
 8007b0a:	429d      	cmp	r5, r3
 8007b0c:	d107      	bne.n	8007b1e <UART_SetConfig+0x8e>
 8007b0e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8007b12:	499a      	ldr	r1, [pc, #616]	; (8007d7c <UART_SetConfig+0x2ec>)
 8007b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b18:	f003 030c 	and.w	r3, r3, #12
 8007b1c:	e7e2      	b.n	8007ae4 <UART_SetConfig+0x54>
 8007b1e:	4b98      	ldr	r3, [pc, #608]	; (8007d80 <UART_SetConfig+0x2f0>)
 8007b20:	429d      	cmp	r5, r3
 8007b22:	d120      	bne.n	8007b66 <UART_SetConfig+0xd6>
 8007b24:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8007b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b30:	2b10      	cmp	r3, #16
 8007b32:	f000 80f1 	beq.w	8007d18 <UART_SetConfig+0x288>
 8007b36:	d808      	bhi.n	8007b4a <UART_SetConfig+0xba>
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 80f3 	beq.w	8007d24 <UART_SetConfig+0x294>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b3e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007b42:	d134      	bne.n	8007bae <UART_SetConfig+0x11e>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8007b44:	2201      	movs	r2, #1
  uint16_t usartdiv                   = 0x0000;
 8007b46:	2300      	movs	r3, #0
 8007b48:	e0f9      	b.n	8007d3e <UART_SetConfig+0x2ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b4a:	2b20      	cmp	r3, #32
 8007b4c:	f000 80ff 	beq.w	8007d4e <UART_SetConfig+0x2be>
 8007b50:	2b30      	cmp	r3, #48	; 0x30
 8007b52:	d1f4      	bne.n	8007b3e <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b54:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007b58:	f040 80c1 	bne.w	8007cde <UART_SetConfig+0x24e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007b5c:	6860      	ldr	r0, [r4, #4]
 8007b5e:	0843      	lsrs	r3, r0, #1
 8007b60:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007b64:	e0fc      	b.n	8007d60 <UART_SetConfig+0x2d0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b66:	4b87      	ldr	r3, [pc, #540]	; (8007d84 <UART_SetConfig+0x2f4>)
 8007b68:	429d      	cmp	r5, r3
 8007b6a:	d122      	bne.n	8007bb2 <UART_SetConfig+0x122>
 8007b6c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8007b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b78:	2b40      	cmp	r3, #64	; 0x40
 8007b7a:	f000 80c0 	beq.w	8007cfe <UART_SetConfig+0x26e>
 8007b7e:	d806      	bhi.n	8007b8e <UART_SetConfig+0xfe>
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 80b1 	beq.w	8007ce8 <UART_SetConfig+0x258>
  if(UART_INSTANCE_LOWPOWER(huart))
 8007b86:	4b79      	ldr	r3, [pc, #484]	; (8007d6c <UART_SetConfig+0x2dc>)
 8007b88:	429d      	cmp	r5, r3
 8007b8a:	d1d8      	bne.n	8007b3e <UART_SetConfig+0xae>
 8007b8c:	e00f      	b.n	8007bae <UART_SetConfig+0x11e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b8e:	2b80      	cmp	r3, #128	; 0x80
 8007b90:	f000 80bc 	beq.w	8007d0c <UART_SetConfig+0x27c>
 8007b94:	2bc0      	cmp	r3, #192	; 0xc0
 8007b96:	d1f6      	bne.n	8007b86 <UART_SetConfig+0xf6>
  if(UART_INSTANCE_LOWPOWER(huart))
 8007b98:	4b74      	ldr	r3, [pc, #464]	; (8007d6c <UART_SetConfig+0x2dc>)
 8007b9a:	429d      	cmp	r5, r3
 8007b9c:	d1da      	bne.n	8007b54 <UART_SetConfig+0xc4>
 8007b9e:	2308      	movs	r3, #8
      tmpreg = (uint32_t) LSE_VALUE;
 8007ba0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8007ba4:	6862      	ldr	r2, [r4, #4]
 8007ba6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8007baa:	4281      	cmp	r1, r0
 8007bac:	d92b      	bls.n	8007c06 <UART_SetConfig+0x176>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8007bae:	2201      	movs	r2, #1
      break;
    }
  }

  return ret;
 8007bb0:	e04b      	b.n	8007c4a <UART_SetConfig+0x1ba>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bb2:	4b75      	ldr	r3, [pc, #468]	; (8007d88 <UART_SetConfig+0x2f8>)
 8007bb4:	429d      	cmp	r5, r3
 8007bb6:	d111      	bne.n	8007bdc <UART_SetConfig+0x14c>
 8007bb8:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8007bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bc8:	f000 8099 	beq.w	8007cfe <UART_SetConfig+0x26e>
 8007bcc:	d9d8      	bls.n	8007b80 <UART_SetConfig+0xf0>
 8007bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bd2:	f000 809b 	beq.w	8007d0c <UART_SetConfig+0x27c>
 8007bd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bda:	e7dc      	b.n	8007b96 <UART_SetConfig+0x106>
 8007bdc:	4b63      	ldr	r3, [pc, #396]	; (8007d6c <UART_SetConfig+0x2dc>)
 8007bde:	429d      	cmp	r5, r3
 8007be0:	d1ad      	bne.n	8007b3e <UART_SetConfig+0xae>
 8007be2:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8007be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bf2:	f000 8084 	beq.w	8007cfe <UART_SetConfig+0x26e>
 8007bf6:	d9c3      	bls.n	8007b80 <UART_SetConfig+0xf0>
 8007bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bfc:	f000 8086 	beq.w	8007d0c <UART_SetConfig+0x27c>
 8007c00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c04:	e7c7      	b.n	8007b96 <UART_SetConfig+0x106>
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8007c06:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8007c0a:	d8d0      	bhi.n	8007bae <UART_SetConfig+0x11e>
        switch (clocksource)
 8007c0c:	2b08      	cmp	r3, #8
 8007c0e:	d82f      	bhi.n	8007c70 <UART_SetConfig+0x1e0>
 8007c10:	e8df f003 	tbb	[pc, r3]
 8007c14:	2e1d2e05 	.word	0x2e1d2e05
 8007c18:	2e2e2e25 	.word	0x2e2e2e25
 8007c1c:	28          	.byte	0x28
 8007c1d:	00          	.byte	0x00
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007c1e:	f7fe ff5f 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007c22:	6862      	ldr	r2, [r4, #4]
 8007c24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c28:	0856      	lsrs	r6, r2, #1
 8007c2a:	2700      	movs	r7, #0
 8007c2c:	fbe1 6700 	umlal	r6, r7, r1, r0
 8007c30:	2300      	movs	r3, #0
 8007c32:	4630      	mov	r0, r6
 8007c34:	4639      	mov	r1, r7
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007c36:	f7f8 ffed 	bl	8000c14 <__aeabi_uldivmod>
          break;
 8007c3a:	2200      	movs	r2, #0
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8007c3c:	4b53      	ldr	r3, [pc, #332]	; (8007d8c <UART_SetConfig+0x2fc>)
 8007c3e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8007c42:	4299      	cmp	r1, r3
 8007c44:	d8b3      	bhi.n	8007bae <UART_SetConfig+0x11e>
           huart->Instance->BRR = tmpreg;
 8007c46:	6823      	ldr	r3, [r4, #0]
 8007c48:	60d8      	str	r0, [r3, #12]

}
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8007c4e:	4850      	ldr	r0, [pc, #320]	; (8007d90 <UART_SetConfig+0x300>)
 8007c50:	0855      	lsrs	r5, r2, #1
 8007c52:	2300      	movs	r3, #0
 8007c54:	2100      	movs	r1, #0
 8007c56:	1940      	adds	r0, r0, r5
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007c58:	f141 0100 	adc.w	r1, r1, #0
 8007c5c:	e7eb      	b.n	8007c36 <UART_SetConfig+0x1a6>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007c5e:	f7fe fc65 	bl	800652c <HAL_RCC_GetSysClockFreq>
 8007c62:	e7de      	b.n	8007c22 <UART_SetConfig+0x192>
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007c64:	0850      	lsrs	r0, r2, #1
 8007c66:	2100      	movs	r1, #0
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8007c6e:	e7f3      	b.n	8007c58 <UART_SetConfig+0x1c8>
            ret = HAL_ERROR;
 8007c70:	2201      	movs	r2, #1
 8007c72:	e7e3      	b.n	8007c3c <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007c74:	f7fe ff4c 	bl	8006b10 <HAL_RCC_GetPCLK2Freq>
 8007c78:	e059      	b.n	8007d2e <UART_SetConfig+0x29e>
    switch (clocksource)
 8007c7a:	2b08      	cmp	r3, #8
 8007c7c:	d897      	bhi.n	8007bae <UART_SetConfig+0x11e>
 8007c7e:	a201      	add	r2, pc, #4	; (adr r2, 8007c84 <UART_SetConfig+0x1f4>)
 8007c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c84:	08007ca9 	.word	0x08007ca9
 8007c88:	08007cbd 	.word	0x08007cbd
 8007c8c:	08007cc3 	.word	0x08007cc3
 8007c90:	08007baf 	.word	0x08007baf
 8007c94:	08007cd9 	.word	0x08007cd9
 8007c98:	08007baf 	.word	0x08007baf
 8007c9c:	08007baf 	.word	0x08007baf
 8007ca0:	08007baf 	.word	0x08007baf
 8007ca4:	08007cdf 	.word	0x08007cdf
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007ca8:	f7fe ff1a 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007cac:	6863      	ldr	r3, [r4, #4]
 8007cae:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007cb2:	fbb0 f0f3 	udiv	r0, r0, r3
 8007cb6:	b280      	uxth	r0, r0
 8007cb8:	60e8      	str	r0, [r5, #12]
 8007cba:	e01e      	b.n	8007cfa <UART_SetConfig+0x26a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007cbc:	f7fe ff28 	bl	8006b10 <HAL_RCC_GetPCLK2Freq>
 8007cc0:	e7f4      	b.n	8007cac <UART_SetConfig+0x21c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007cc2:	6862      	ldr	r2, [r4, #4]
 8007cc4:	0853      	lsrs	r3, r2, #1
 8007cc6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007cca:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007cce:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	60eb      	str	r3, [r5, #12]
 8007cd6:	e010      	b.n	8007cfa <UART_SetConfig+0x26a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007cd8:	f7fe fc28 	bl	800652c <HAL_RCC_GetSysClockFreq>
 8007cdc:	e7e6      	b.n	8007cac <UART_SetConfig+0x21c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007cde:	6862      	ldr	r2, [r4, #4]
 8007ce0:	0853      	lsrs	r3, r2, #1
 8007ce2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007ce6:	e7f2      	b.n	8007cce <UART_SetConfig+0x23e>
  if(UART_INSTANCE_LOWPOWER(huart))
 8007ce8:	4b20      	ldr	r3, [pc, #128]	; (8007d6c <UART_SetConfig+0x2dc>)
 8007cea:	429d      	cmp	r5, r3
 8007cec:	d11a      	bne.n	8007d24 <UART_SetConfig+0x294>
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8007cee:	f7fe fef7 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
      break;
 8007cf2:	2300      	movs	r3, #0
    if (tmpreg != 0)
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	f47f af55 	bne.w	8007ba4 <UART_SetConfig+0x114>
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cfa:	2200      	movs	r2, #0
      break;
 8007cfc:	e7a5      	b.n	8007c4a <UART_SetConfig+0x1ba>
  if(UART_INSTANCE_LOWPOWER(huart))
 8007cfe:	4b1b      	ldr	r3, [pc, #108]	; (8007d6c <UART_SetConfig+0x2dc>)
 8007d00:	429d      	cmp	r5, r3
 8007d02:	d109      	bne.n	8007d18 <UART_SetConfig+0x288>
      tmpreg = HAL_RCC_GetSysClockFreq();
 8007d04:	f7fe fc12 	bl	800652c <HAL_RCC_GetSysClockFreq>
      break;
 8007d08:	2304      	movs	r3, #4
 8007d0a:	e7f3      	b.n	8007cf4 <UART_SetConfig+0x264>
  if(UART_INSTANCE_LOWPOWER(huart))
 8007d0c:	4b17      	ldr	r3, [pc, #92]	; (8007d6c <UART_SetConfig+0x2dc>)
 8007d0e:	429d      	cmp	r5, r3
 8007d10:	d11d      	bne.n	8007d4e <UART_SetConfig+0x2be>
 8007d12:	2302      	movs	r3, #2
      tmpreg = (uint32_t) HSI_VALUE;
 8007d14:	481f      	ldr	r0, [pc, #124]	; (8007d94 <UART_SetConfig+0x304>)
 8007d16:	e745      	b.n	8007ba4 <UART_SetConfig+0x114>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d18:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007d1c:	d1dc      	bne.n	8007cd8 <UART_SetConfig+0x248>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007d1e:	f7fe fc05 	bl	800652c <HAL_RCC_GetSysClockFreq>
 8007d22:	e004      	b.n	8007d2e <UART_SetConfig+0x29e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d24:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007d28:	d1be      	bne.n	8007ca8 <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007d2a:	f7fe fed9 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007d2e:	6861      	ldr	r1, [r4, #4]
 8007d30:	084a      	lsrs	r2, r1, #1
 8007d32:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8007d36:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007d3a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d3c:	2200      	movs	r2, #0
    brrtemp = usartdiv & 0xFFF0;
 8007d3e:	f023 010f 	bic.w	r1, r3, #15
    huart->Instance->BRR = brrtemp;
 8007d42:	6820      	ldr	r0, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8007d44:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8007d48:	430b      	orrs	r3, r1
 8007d4a:	60c3      	str	r3, [r0, #12]
 8007d4c:	e77d      	b.n	8007c4a <UART_SetConfig+0x1ba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d4e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007d52:	d1b6      	bne.n	8007cc2 <UART_SetConfig+0x232>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007d54:	6860      	ldr	r0, [r4, #4]
 8007d56:	0843      	lsrs	r3, r0, #1
 8007d58:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007d5c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007d60:	fbb3 f3f0 	udiv	r3, r3, r0
 8007d64:	e7e9      	b.n	8007d3a <UART_SetConfig+0x2aa>
 8007d66:	bf00      	nop
 8007d68:	efff69f3 	.word	0xefff69f3
 8007d6c:	40008000 	.word	0x40008000
 8007d70:	40013800 	.word	0x40013800
 8007d74:	0800dba7 	.word	0x0800dba7
 8007d78:	40004400 	.word	0x40004400
 8007d7c:	0800dbab 	.word	0x0800dbab
 8007d80:	40004800 	.word	0x40004800
 8007d84:	40004c00 	.word	0x40004c00
 8007d88:	40005000 	.word	0x40005000
 8007d8c:	000ffcff 	.word	0x000ffcff
 8007d90:	f4240000 	.word	0xf4240000
 8007d94:	00f42400 	.word	0x00f42400

08007d98 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007d9a:	07da      	lsls	r2, r3, #31
{
 8007d9c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d9e:	d506      	bpl.n	8007dae <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007da0:	6801      	ldr	r1, [r0, #0]
 8007da2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8007da4:	684a      	ldr	r2, [r1, #4]
 8007da6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007daa:	4322      	orrs	r2, r4
 8007dac:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dae:	079c      	lsls	r4, r3, #30
 8007db0:	d506      	bpl.n	8007dc0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007db2:	6801      	ldr	r1, [r0, #0]
 8007db4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007db6:	684a      	ldr	r2, [r1, #4]
 8007db8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007dbc:	4322      	orrs	r2, r4
 8007dbe:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dc0:	0759      	lsls	r1, r3, #29
 8007dc2:	d506      	bpl.n	8007dd2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dc4:	6801      	ldr	r1, [r0, #0]
 8007dc6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8007dc8:	684a      	ldr	r2, [r1, #4]
 8007dca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007dce:	4322      	orrs	r2, r4
 8007dd0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dd2:	071a      	lsls	r2, r3, #28
 8007dd4:	d506      	bpl.n	8007de4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dd6:	6801      	ldr	r1, [r0, #0]
 8007dd8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007dda:	684a      	ldr	r2, [r1, #4]
 8007ddc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007de0:	4322      	orrs	r2, r4
 8007de2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007de4:	06dc      	lsls	r4, r3, #27
 8007de6:	d506      	bpl.n	8007df6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007de8:	6801      	ldr	r1, [r0, #0]
 8007dea:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007dec:	688a      	ldr	r2, [r1, #8]
 8007dee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007df2:	4322      	orrs	r2, r4
 8007df4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007df6:	0699      	lsls	r1, r3, #26
 8007df8:	d506      	bpl.n	8007e08 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dfa:	6801      	ldr	r1, [r0, #0]
 8007dfc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007dfe:	688a      	ldr	r2, [r1, #8]
 8007e00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e04:	4322      	orrs	r2, r4
 8007e06:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e08:	065a      	lsls	r2, r3, #25
 8007e0a:	d50f      	bpl.n	8007e2c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e0c:	6801      	ldr	r1, [r0, #0]
 8007e0e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007e10:	684a      	ldr	r2, [r1, #4]
 8007e12:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8007e16:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e18:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e1c:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e1e:	d105      	bne.n	8007e2c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e20:	684a      	ldr	r2, [r1, #4]
 8007e22:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007e24:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007e28:	4322      	orrs	r2, r4
 8007e2a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e2c:	061b      	lsls	r3, r3, #24
 8007e2e:	d506      	bpl.n	8007e3e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e30:	6802      	ldr	r2, [r0, #0]
 8007e32:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007e34:	6853      	ldr	r3, [r2, #4]
 8007e36:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007e3a:	430b      	orrs	r3, r1
 8007e3c:	6053      	str	r3, [r2, #4]
 8007e3e:	bd10      	pop	{r4, pc}

08007e40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8007e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e44:	4604      	mov	r4, r0
 8007e46:	460e      	mov	r6, r1
 8007e48:	4690      	mov	r8, r2
 8007e4a:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8007e4c:	f7fd fb24 	bl	8005498 <HAL_GetTick>
 8007e50:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 8007e52:	f1b8 0f00 	cmp.w	r8, #0
 8007e56:	d02f      	beq.n	8007eb8 <UART_WaitOnFlagUntilTimeout+0x78>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8007e58:	6822      	ldr	r2, [r4, #0]
 8007e5a:	69d3      	ldr	r3, [r2, #28]
 8007e5c:	ea36 0303 	bics.w	r3, r6, r3
 8007e60:	d12f      	bne.n	8007ec2 <UART_WaitOnFlagUntilTimeout+0x82>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007e62:	1c6b      	adds	r3, r5, #1
 8007e64:	d0f9      	beq.n	8007e5a <UART_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8007e66:	b145      	cbz	r5, 8007e7a <UART_WaitOnFlagUntilTimeout+0x3a>
 8007e68:	f7fd fb16 	bl	8005498 <HAL_GetTick>
 8007e6c:	1bc0      	subs	r0, r0, r7
 8007e6e:	4285      	cmp	r5, r0
 8007e70:	d2f2      	bcs.n	8007e58 <UART_WaitOnFlagUntilTimeout+0x18>
 8007e72:	e002      	b.n	8007e7a <UART_WaitOnFlagUntilTimeout+0x3a>
      if(Timeout != HAL_MAX_DELAY)
 8007e74:	1c69      	adds	r1, r5, #1
 8007e76:	d020      	beq.n	8007eba <UART_WaitOnFlagUntilTimeout+0x7a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8007e78:	b9cd      	cbnz	r5, 8007eae <UART_WaitOnFlagUntilTimeout+0x6e>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e82:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	f022 0220 	bic.w	r2, r2, #32
 8007e8a:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e92:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e94:	689a      	ldr	r2, [r3, #8]
 8007e96:	f022 0201 	bic.w	r2, r2, #1
 8007e9a:	609a      	str	r2, [r3, #8]

          huart->State= HAL_UART_STATE_READY;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68

          return HAL_TIMEOUT;
 8007ea8:	2003      	movs	r0, #3
 8007eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8007eae:	f7fd faf3 	bl	8005498 <HAL_GetTick>
 8007eb2:	1bc0      	subs	r0, r0, r7
 8007eb4:	4285      	cmp	r5, r0
 8007eb6:	d3e0      	bcc.n	8007e7a <UART_WaitOnFlagUntilTimeout+0x3a>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8007eb8:	6822      	ldr	r2, [r4, #0]
 8007eba:	69d3      	ldr	r3, [r2, #28]
 8007ebc:	ea36 0303 	bics.w	r3, r6, r3
 8007ec0:	d1d8      	bne.n	8007e74 <UART_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007ec8 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ec8:	2200      	movs	r2, #0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007eca:	6803      	ldr	r3, [r0, #0]
{
 8007ecc:	b510      	push	{r4, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ece:	66c2      	str	r2, [r0, #108]	; 0x6c
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	0719      	lsls	r1, r3, #28
{
 8007ed4:	4604      	mov	r4, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ed6:	d413      	bmi.n	8007f00 <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ed8:	6823      	ldr	r3, [r4, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	075b      	lsls	r3, r3, #29
 8007ede:	d508      	bpl.n	8007ef2 <UART_CheckIdleState+0x2a>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ee0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007eea:	4620      	mov	r0, r4
 8007eec:	f7ff ffa8 	bl	8007e40 <UART_WaitOnFlagUntilTimeout>
 8007ef0:	b970      	cbnz	r0, 8007f10 <UART_CheckIdleState+0x48>
  huart->State= HAL_UART_STATE_READY;
 8007ef2:	2301      	movs	r3, #1
  __HAL_UNLOCK(huart);
 8007ef4:	2000      	movs	r0, #0
  huart->State= HAL_UART_STATE_READY;
 8007ef6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8007efa:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  return HAL_OK;
 8007efe:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f08:	f7ff ff9a 	bl	8007e40 <UART_WaitOnFlagUntilTimeout>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d0e3      	beq.n	8007ed8 <UART_CheckIdleState+0x10>
      return HAL_TIMEOUT;
 8007f10:	2003      	movs	r0, #3
 8007f12:	bd10      	pop	{r4, pc}

08007f14 <HAL_UART_Init>:
{
 8007f14:	b510      	push	{r4, lr}
  if(huart == NULL)
 8007f16:	4604      	mov	r4, r0
 8007f18:	b360      	cbz	r0, 8007f74 <HAL_UART_Init+0x60>
  if(huart->State == HAL_UART_STATE_RESET)
 8007f1a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8007f1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007f22:	b91b      	cbnz	r3, 8007f2c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8007f24:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8007f28:	f7ff fd44 	bl	80079b4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8007f2c:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8007f2e:	2302      	movs	r3, #2
 8007f30:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8007f34:	6813      	ldr	r3, [r2, #0]
 8007f36:	f023 0301 	bic.w	r3, r3, #1
 8007f3a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f7ff fda7 	bl	8007a90 <UART_SetConfig>
 8007f42:	2801      	cmp	r0, #1
 8007f44:	d016      	beq.n	8007f74 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f48:	b113      	cbz	r3, 8007f50 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f7ff ff24 	bl	8007d98 <UART_AdvFeatureConfig>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f58:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f60:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8007f68:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8007f6a:	601a      	str	r2, [r3, #0]
}
 8007f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8007f70:	f7ff bfaa 	b.w	8007ec8 <UART_CheckIdleState>
}
 8007f74:	2001      	movs	r0, #1
 8007f76:	bd10      	pop	{r4, pc}

08007f78 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007f7c:	680a      	ldr	r2, [r1, #0]
 8007f7e:	fa92 f4a2 	rbit	r4, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007f82:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007f86:	fab4 f484 	clz	r4, r4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007f8a:	2503      	movs	r5, #3
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007f8c:	270f      	movs	r7, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007f8e:	fa32 f304 	lsrs.w	r3, r2, r4
 8007f92:	d10d      	bne.n	8007fb0 <LL_GPIO_Init+0x38>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007f94:	684b      	ldr	r3, [r1, #4]
 8007f96:	3b01      	subs	r3, #1
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d806      	bhi.n	8007faa <LL_GPIO_Init+0x32>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007f9c:	6843      	ldr	r3, [r0, #4]
 8007f9e:	68c9      	ldr	r1, [r1, #12]
 8007fa0:	ea23 0302 	bic.w	r3, r3, r2
 8007fa4:	434a      	muls	r2, r1
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8007faa:	2001      	movs	r0, #1
 8007fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007fb0:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	d069      	beq.n	800808c <LL_GPIO_Init+0x114>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007fb8:	f8d1 8004 	ldr.w	r8, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007fbc:	f8d0 9000 	ldr.w	r9, [r0]
 8007fc0:	fa93 fca3 	rbit	ip, r3
 8007fc4:	fabc fc8c 	clz	ip, ip
 8007fc8:	fa93 f6a3 	rbit	r6, r3
 8007fcc:	fab6 f686 	clz	r6, r6
 8007fd0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007fd4:	fa05 fc0c 	lsl.w	ip, r5, ip
 8007fd8:	0076      	lsls	r6, r6, #1
 8007fda:	ea29 0c0c 	bic.w	ip, r9, ip
 8007fde:	fa08 f606 	lsl.w	r6, r8, r6
 8007fe2:	ea4c 0606 	orr.w	r6, ip, r6
 8007fe6:	6006      	str	r6, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007fe8:	f108 36ff 	add.w	r6, r8, #4294967295
 8007fec:	2e01      	cmp	r6, #1
 8007fee:	d816      	bhi.n	800801e <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8007ff0:	6886      	ldr	r6, [r0, #8]
 8007ff2:	fa93 fca3 	rbit	ip, r3
 8007ff6:	fabc fc8c 	clz	ip, ip
 8007ffa:	fa93 f9a3 	rbit	r9, r3
 8007ffe:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008002:	fa05 fc0c 	lsl.w	ip, r5, ip
 8008006:	ea26 0c0c 	bic.w	ip, r6, ip
 800800a:	fab9 f989 	clz	r9, r9
 800800e:	688e      	ldr	r6, [r1, #8]
 8008010:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008014:	fa06 f609 	lsl.w	r6, r6, r9
 8008018:	ea4c 0606 	orr.w	r6, ip, r6
 800801c:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800801e:	68c6      	ldr	r6, [r0, #12]
 8008020:	fa93 fca3 	rbit	ip, r3
 8008024:	fabc fc8c 	clz	ip, ip
 8008028:	fa93 f9a3 	rbit	r9, r3
 800802c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8008030:	fa05 fc0c 	lsl.w	ip, r5, ip
 8008034:	ea26 0c0c 	bic.w	ip, r6, ip
 8008038:	fab9 f989 	clz	r9, r9
 800803c:	690e      	ldr	r6, [r1, #16]
 800803e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008042:	fa06 f609 	lsl.w	r6, r6, r9
 8008046:	ea4c 0606 	orr.w	r6, ip, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800804a:	f1b8 0f02 	cmp.w	r8, #2
 800804e:	60c6      	str	r6, [r0, #12]
 8008050:	d11c      	bne.n	800808c <LL_GPIO_Init+0x114>
 8008052:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8008056:	fab6 f686 	clz	r6, r6
 800805a:	2e07      	cmp	r6, #7
 800805c:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8008060:	dc16      	bgt.n	8008090 <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008062:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8008066:	fa93 f6a3 	rbit	r6, r3
 800806a:	fab6 f686 	clz	r6, r6
 800806e:	fa93 f3a3 	rbit	r3, r3
 8008072:	fab3 f383 	clz	r3, r3
 8008076:	00b6      	lsls	r6, r6, #2
 8008078:	fa07 f606 	lsl.w	r6, r7, r6
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	ea28 0606 	bic.w	r6, r8, r6
 8008082:	fa0c fc03 	lsl.w	ip, ip, r3
 8008086:	ea46 060c 	orr.w	r6, r6, ip
 800808a:	6206      	str	r6, [r0, #32]
    pinpos++;
 800808c:	3401      	adds	r4, #1
 800808e:	e77e      	b.n	8007f8e <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008090:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 8008094:	0a1b      	lsrs	r3, r3, #8
 8008096:	fa93 f6a3 	rbit	r6, r3
 800809a:	fab6 f686 	clz	r6, r6
 800809e:	fa93 f3a3 	rbit	r3, r3
 80080a2:	fab3 f383 	clz	r3, r3
 80080a6:	00b6      	lsls	r6, r6, #2
 80080a8:	fa07 f606 	lsl.w	r6, r7, r6
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	ea28 0606 	bic.w	r6, r8, r6
 80080b2:	fa0c f303 	lsl.w	r3, ip, r3
 80080b6:	4333      	orrs	r3, r6
 80080b8:	6243      	str	r3, [r0, #36]	; 0x24
 80080ba:	e7e7      	b.n	800808c <LL_GPIO_Init+0x114>

080080bc <LL_RTC_TIME_Config>:
{
 80080bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c0:	f8dd c020 	ldr.w	ip, [sp, #32]
 80080c4:	f44f 1740 	mov.w	r7, #3145728	; 0x300000
 80080c8:	fa97 f7a7 	rbit	r7, r7
 80080cc:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 80080d0:	fab7 f787 	clz	r7, r7
 80080d4:	fa94 f4a4 	rbit	r4, r4
 80080d8:	f44f 46e0 	mov.w	r6, #28672	; 0x7000
 80080dc:	fab4 fa84 	clz	sl, r4
 80080e0:	fa96 f6a6 	rbit	r6, r6
 80080e4:	f44f 6970 	mov.w	r9, #3840	; 0xf00
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 80080e8:	fab6 f686 	clz	r6, r6
 80080ec:	fa99 f9a9 	rbit	r9, r9
 80080f0:	2570      	movs	r5, #112	; 0x70
 80080f2:	fab9 f989 	clz	r9, r9
 80080f6:	fa95 f5a5 	rbit	r5, r5
 80080fa:	f04f 080f 	mov.w	r8, #15
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 80080fe:	fab5 f585 	clz	r5, r5
 8008102:	fa98 f8a8 	rbit	r8, r8
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8008106:	f8d0 e000 	ldr.w	lr, [r0]
 800810a:	f02e 1e7f 	bic.w	lr, lr, #8323199	; 0x7f007f
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 800810e:	f002 040f 	and.w	r4, r2, #15
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8008112:	f42e 4efe 	bic.w	lr, lr, #32512	; 0x7f00
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8008116:	fa04 f40a 	lsl.w	r4, r4, sl
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800811a:	ea4e 0101 	orr.w	r1, lr, r1
 800811e:	4321      	orrs	r1, r4
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8008120:	f003 040f 	and.w	r4, r3, #15
 8008124:	fa04 f909 	lsl.w	r9, r4, r9
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8008128:	fab8 f888 	clz	r8, r8
 800812c:	f00c 040f 	and.w	r4, ip, #15
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8008130:	ea41 0109 	orr.w	r1, r1, r9
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8008134:	fa04 f808 	lsl.w	r8, r4, r8
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8008138:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800813c:	3f04      	subs	r7, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800813e:	ea41 0108 	orr.w	r1, r1, r8
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8008142:	40ba      	lsls	r2, r7
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8008144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008148:	3e04      	subs	r6, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800814a:	430a      	orrs	r2, r1
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 800814c:	40b3      	lsls	r3, r6
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 800814e:	f00c 0cf0 	and.w	ip, ip, #240	; 0xf0
 8008152:	3d04      	subs	r5, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8008154:	4313      	orrs	r3, r2
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8008156:	fa0c f505 	lsl.w	r5, ip, r5
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800815a:	432b      	orrs	r3, r5
 800815c:	6003      	str	r3, [r0, #0]
 800815e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08008164 <LL_RTC_DATE_Config>:
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  * @param  Year Value between Min_Data=0x00 and Max_Data=0x99
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DATE_Config(RTC_TypeDef *RTCx, uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 8008164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008168:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 800816c:	f44f 4a60 	mov.w	sl, #57344	; 0xe000
 8008170:	fa9a faaa 	rbit	sl, sl
 8008174:	f44f 0770 	mov.w	r7, #15728640	; 0xf00000
  register uint32_t temp = 0U;

  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 8008178:	faba fa8a 	clz	sl, sl
 800817c:	fa97 f7a7 	rbit	r7, r7
 8008180:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8008184:	fab7 f787 	clz	r7, r7
 8008188:	fa94 f4a4 	rbit	r4, r4
 800818c:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8008190:	fab4 fb84 	clz	fp, r4
 8008194:	fa96 f6a6 	rbit	r6, r6
 8008198:	f44f 6870 	mov.w	r8, #3840	; 0xf00
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 800819c:	fab6 f686 	clz	r6, r6
 80081a0:	fa98 f8a8 	rbit	r8, r8
 80081a4:	2530      	movs	r5, #48	; 0x30
 80081a6:	fab8 f888 	clz	r8, r8
 80081aa:	fa95 f5a5 	rbit	r5, r5
 80081ae:	f04f 0c0f 	mov.w	ip, #15
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 80081b2:	fab5 f585 	clz	r5, r5
 80081b6:	fa9c fcac 	rbit	ip, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 80081ba:	f00e 040f 	and.w	r4, lr, #15
 80081be:	fa04 f40b 	lsl.w	r4, r4, fp
  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 80081c2:	fa01 f10a 	lsl.w	r1, r1, sl

  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 80081c6:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80081ca:	4321      	orrs	r1, r4
 80081cc:	4c12      	ldr	r4, [pc, #72]	; (8008218 <LL_RTC_DATE_Config+0xb4>)
 80081ce:	ea09 0404 	and.w	r4, r9, r4
 80081d2:	4321      	orrs	r1, r4
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 80081d4:	f003 040f 	and.w	r4, r3, #15
 80081d8:	fa04 f808 	lsl.w	r8, r4, r8
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 80081dc:	fabc fc8c 	clz	ip, ip
 80081e0:	f002 040f 	and.w	r4, r2, #15
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 80081e4:	ea41 0108 	orr.w	r1, r1, r8
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 80081e8:	fa04 fc0c 	lsl.w	ip, r4, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 80081ec:	f00e 0ef0 	and.w	lr, lr, #240	; 0xf0
 80081f0:	3f04      	subs	r7, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 80081f2:	ea41 010c 	orr.w	r1, r1, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 80081f6:	fa0e f707 	lsl.w	r7, lr, r7
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 80081fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081fe:	3e04      	subs	r6, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8008200:	4339      	orrs	r1, r7
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8008202:	40b3      	lsls	r3, r6
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8008204:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008208:	3d04      	subs	r5, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 800820a:	430b      	orrs	r3, r1
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 800820c:	40aa      	lsls	r2, r5
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 800820e:	431a      	orrs	r2, r3
 8008210:	6042      	str	r2, [r0, #4]
 8008212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008216:	bf00      	nop
 8008218:	ff0000c0 	.word	0xff0000c0

0800821c <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 800821c:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 800821e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008222:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8008224:	68c3      	ldr	r3, [r0, #12]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8008226:	065a      	lsls	r2, r3, #25
 8008228:	d41c      	bmi.n	8008264 <LL_RTC_EnterInitMode+0x48>
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 800822a:	f04f 33ff 	mov.w	r3, #4294967295
 800822e:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8008230:	68c3      	ldr	r3, [r0, #12]
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8008232:	490d      	ldr	r1, [pc, #52]	; (8008268 <LL_RTC_EnterInitMode+0x4c>)
 8008234:	f3c3 1380 	ubfx	r3, r3, #6, #1
  ErrorStatus status = SUCCESS;
 8008238:	2201      	movs	r2, #1
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 800823a:	9c01      	ldr	r4, [sp, #4]
 800823c:	b104      	cbz	r4, 8008240 <LL_RTC_EnterInitMode+0x24>
 800823e:	b113      	cbz	r3, 8008246 <LL_RTC_EnterInitMode+0x2a>
        status = ERROR;
      }
    }
  }
  return status;
}
 8008240:	4610      	mov	r0, r2
 8008242:	b002      	add	sp, #8
 8008244:	bd10      	pop	{r4, pc}
 8008246:	680b      	ldr	r3, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8008248:	03db      	lsls	r3, r3, #15
        timeout --;
 800824a:	bf42      	ittt	mi
 800824c:	9b01      	ldrmi	r3, [sp, #4]
 800824e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8008252:	9301      	strmi	r3, [sp, #4]
 8008254:	68c3      	ldr	r3, [r0, #12]
      if (timeout == 0U)
 8008256:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 8008258:	2c00      	cmp	r4, #0
 800825a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800825e:	bf08      	it	eq
 8008260:	2200      	moveq	r2, #0
 8008262:	e7ea      	b.n	800823a <LL_RTC_EnterInitMode+0x1e>
  ErrorStatus status = SUCCESS;
 8008264:	2201      	movs	r2, #1
 8008266:	e7eb      	b.n	8008240 <LL_RTC_EnterInitMode+0x24>
 8008268:	e000e010 	.word	0xe000e010

0800826c <LL_RTC_Init>:
{
 800826c:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800826e:	23ca      	movs	r3, #202	; 0xca
 8008270:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8008272:	2353      	movs	r3, #83	; 0x53
 8008274:	6243      	str	r3, [r0, #36]	; 0x24
 8008276:	4604      	mov	r4, r0
 8008278:	460d      	mov	r5, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800827a:	f7ff ffcf 	bl	800821c <LL_RTC_EnterInitMode>
 800827e:	b1f0      	cbz	r0, 80082be <LL_RTC_Init+0x52>
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8008280:	68a3      	ldr	r3, [r4, #8]
 8008282:	682a      	ldr	r2, [r5, #0]
 8008284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008288:	4313      	orrs	r3, r2
 800828a:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 800828c:	6923      	ldr	r3, [r4, #16]
 800828e:	68aa      	ldr	r2, [r5, #8]
 8008290:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008294:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008298:	4313      	orrs	r3, r2
 800829a:	6123      	str	r3, [r4, #16]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_POSITION_PRER_PREDIV_A);
 800829c:	6921      	ldr	r1, [r4, #16]
 800829e:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
 80082a2:	fa93 f3a3 	rbit	r3, r3
 80082a6:	fab3 f283 	clz	r2, r3
 80082aa:	686b      	ldr	r3, [r5, #4]
 80082ac:	4093      	lsls	r3, r2
 80082ae:	f421 02fe 	bic.w	r2, r1, #8323072	; 0x7f0000
 80082b2:	4313      	orrs	r3, r2
 80082b4:	6123      	str	r3, [r4, #16]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 80082b6:	f06f 0380 	mvn.w	r3, #128	; 0x80
 80082ba:	60e3      	str	r3, [r4, #12]
    status = SUCCESS;
 80082bc:	2001      	movs	r0, #1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80082be:	23ff      	movs	r3, #255	; 0xff
 80082c0:	6263      	str	r3, [r4, #36]	; 0x24
}
 80082c2:	bd38      	pop	{r3, r4, r5, pc}

080082c4 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 80082c4:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 80082c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80082ca:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 80082cc:	68c3      	ldr	r3, [r0, #12]
 80082ce:	491e      	ldr	r1, [pc, #120]	; (8008348 <LL_RTC_WaitForSynchro+0x84>)
 80082d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d4:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 80082d8:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 80082da:	68c2      	ldr	r2, [r0, #12]
  ErrorStatus status = SUCCESS;
 80082dc:	2301      	movs	r3, #1
 80082de:	f3c2 1240 	ubfx	r2, r2, #5, #1
  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
  while ((timeout != 0U) && (tmp != 0U))
 80082e2:	9c01      	ldr	r4, [sp, #4]
 80082e4:	b91c      	cbnz	r4, 80082ee <LL_RTC_WaitForSynchro+0x2a>
    {
      status = ERROR;
    }
  }

  if (status != ERROR)
 80082e6:	b99b      	cbnz	r3, 8008310 <LL_RTC_WaitForSynchro+0x4c>
      }
    }
  }

  return (status);
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	b002      	add	sp, #8
 80082ec:	bd10      	pop	{r4, pc}
  while ((timeout != 0U) && (tmp != 0U))
 80082ee:	2a00      	cmp	r2, #0
 80082f0:	d0f9      	beq.n	80082e6 <LL_RTC_WaitForSynchro+0x22>
 80082f2:	680a      	ldr	r2, [r1, #0]
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80082f4:	03d4      	lsls	r4, r2, #15
      timeout--;
 80082f6:	bf42      	ittt	mi
 80082f8:	9a01      	ldrmi	r2, [sp, #4]
 80082fa:	f102 32ff 	addmi.w	r2, r2, #4294967295
 80082fe:	9201      	strmi	r2, [sp, #4]
 8008300:	68c2      	ldr	r2, [r0, #12]
    if (timeout == 0U)
 8008302:	9c01      	ldr	r4, [sp, #4]
      status = ERROR;
 8008304:	2c00      	cmp	r4, #0
 8008306:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800830a:	bf08      	it	eq
 800830c:	2300      	moveq	r3, #0
 800830e:	e7e8      	b.n	80082e2 <LL_RTC_WaitForSynchro+0x1e>
    timeout = RTC_SYNCHRO_TIMEOUT;
 8008310:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008314:	9201      	str	r2, [sp, #4]
 8008316:	68c2      	ldr	r2, [r0, #12]
 8008318:	490b      	ldr	r1, [pc, #44]	; (8008348 <LL_RTC_WaitForSynchro+0x84>)
 800831a:	f3c2 1240 	ubfx	r2, r2, #5, #1
    while ((timeout != 0U) && (tmp != 1U))
 800831e:	9c01      	ldr	r4, [sp, #4]
 8008320:	2c00      	cmp	r4, #0
 8008322:	d0e1      	beq.n	80082e8 <LL_RTC_WaitForSynchro+0x24>
 8008324:	2a00      	cmp	r2, #0
 8008326:	d1df      	bne.n	80082e8 <LL_RTC_WaitForSynchro+0x24>
 8008328:	680a      	ldr	r2, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800832a:	03d2      	lsls	r2, r2, #15
        timeout--;
 800832c:	bf42      	ittt	mi
 800832e:	9a01      	ldrmi	r2, [sp, #4]
 8008330:	f102 32ff 	addmi.w	r2, r2, #4294967295
 8008334:	9201      	strmi	r2, [sp, #4]
 8008336:	68c2      	ldr	r2, [r0, #12]
      if (timeout == 0U)
 8008338:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 800833a:	2c00      	cmp	r4, #0
 800833c:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8008340:	bf08      	it	eq
 8008342:	2300      	moveq	r3, #0
 8008344:	e7eb      	b.n	800831e <LL_RTC_WaitForSynchro+0x5a>
 8008346:	bf00      	nop
 8008348:	e000e010 	.word	0xe000e010

0800834c <LL_RTC_TIME_Init>:
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 800834c:	6883      	ldr	r3, [r0, #8]
{
 800834e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008350:	4615      	mov	r5, r2
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8008352:	065a      	lsls	r2, r3, #25
      RTC_TimeStruct->TimeFormat = 0x00U;
 8008354:	bf5c      	itt	pl
 8008356:	2300      	movpl	r3, #0
 8008358:	602b      	strpl	r3, [r5, #0]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800835a:	23ca      	movs	r3, #202	; 0xca
 800835c:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800835e:	2353      	movs	r3, #83	; 0x53
 8008360:	6243      	str	r3, [r0, #36]	; 0x24
{
 8008362:	4604      	mov	r4, r0
  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8008364:	460e      	mov	r6, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8008366:	f7ff ff59 	bl	800821c <LL_RTC_EnterInitMode>
 800836a:	b190      	cbz	r0, 8008392 <LL_RTC_TIME_Init+0x46>
 800836c:	796b      	ldrb	r3, [r5, #5]
 800836e:	792a      	ldrb	r2, [r5, #4]
 8008370:	79a8      	ldrb	r0, [r5, #6]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8008372:	b196      	cbz	r6, 800839a <LL_RTC_TIME_Init+0x4e>
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8008374:	9000      	str	r0, [sp, #0]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8008376:	6829      	ldr	r1, [r5, #0]
 8008378:	4620      	mov	r0, r4
 800837a:	f7ff fe9f 	bl	80080bc <LL_RTC_TIME_Config>
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 800837e:	4b14      	ldr	r3, [pc, #80]	; (80083d0 <LL_RTC_TIME_Init+0x84>)
 8008380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008384:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8008386:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8008388:	069b      	lsls	r3, r3, #26
 800838a:	d41e      	bmi.n	80083ca <LL_RTC_TIME_Init+0x7e>
      status = LL_RTC_WaitForSynchro(RTCx);
 800838c:	4620      	mov	r0, r4
 800838e:	f7ff ff99 	bl	80082c4 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8008392:	23ff      	movs	r3, #255	; 0xff
 8008394:	6263      	str	r3, [r4, #36]	; 0x24
}
 8008396:	b002      	add	sp, #8
 8008398:	bd70      	pop	{r4, r5, r6, pc}
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 800839a:	210a      	movs	r1, #10
 800839c:	fbb3 f6f1 	udiv	r6, r3, r1
 80083a0:	fb01 3316 	mls	r3, r1, r6, r3
 80083a4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 80083a8:	fbb2 f6f1 	udiv	r6, r2, r1
 80083ac:	fb01 2216 	mls	r2, r1, r6, r2
 80083b0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 80083b4:	fbb0 f6f1 	udiv	r6, r0, r1
 80083b8:	fb01 0116 	mls	r1, r1, r6, r0
 80083bc:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 80083c0:	b2c9      	uxtb	r1, r1
 80083c2:	9100      	str	r1, [sp, #0]
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	b2d2      	uxtb	r2, r2
 80083c8:	e7d5      	b.n	8008376 <LL_RTC_TIME_Init+0x2a>
      status = SUCCESS;
 80083ca:	2001      	movs	r0, #1
 80083cc:	e7e1      	b.n	8008392 <LL_RTC_TIME_Init+0x46>
 80083ce:	bf00      	nop
 80083d0:	40002800 	.word	0x40002800

080083d4 <LL_RTC_DATE_Init>:
{
 80083d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083d6:	4604      	mov	r4, r0
 80083d8:	4616      	mov	r6, r2
  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 80083da:	460f      	mov	r7, r1
 80083dc:	b931      	cbnz	r1, 80083ec <LL_RTC_DATE_Init+0x18>
 80083de:	7853      	ldrb	r3, [r2, #1]
 80083e0:	06da      	lsls	r2, r3, #27
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 80083e2:	bf42      	ittt	mi
 80083e4:	f023 0310 	bicmi.w	r3, r3, #16
 80083e8:	330a      	addmi	r3, #10
 80083ea:	7073      	strbmi	r3, [r6, #1]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80083ec:	23ca      	movs	r3, #202	; 0xca
 80083ee:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80083f0:	2353      	movs	r3, #83	; 0x53
 80083f2:	6263      	str	r3, [r4, #36]	; 0x24
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80083f4:	4620      	mov	r0, r4
 80083f6:	f7ff ff11 	bl	800821c <LL_RTC_EnterInitMode>
 80083fa:	b198      	cbz	r0, 8008424 <LL_RTC_DATE_Init+0x50>
 80083fc:	7873      	ldrb	r3, [r6, #1]
 80083fe:	78b5      	ldrb	r5, [r6, #2]
 8008400:	7831      	ldrb	r1, [r6, #0]
 8008402:	78f6      	ldrb	r6, [r6, #3]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8008404:	b197      	cbz	r7, 800842c <LL_RTC_DATE_Init+0x58>
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 8008406:	9600      	str	r6, [sp, #0]
 8008408:	462a      	mov	r2, r5
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800840a:	4620      	mov	r0, r4
 800840c:	f7ff feaa 	bl	8008164 <LL_RTC_DATE_Config>
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8008410:	4b13      	ldr	r3, [pc, #76]	; (8008460 <LL_RTC_DATE_Init+0x8c>)
 8008412:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008416:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8008418:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 800841a:	069b      	lsls	r3, r3, #26
 800841c:	d41e      	bmi.n	800845c <LL_RTC_DATE_Init+0x88>
      status = LL_RTC_WaitForSynchro(RTCx);
 800841e:	4620      	mov	r0, r4
 8008420:	f7ff ff50 	bl	80082c4 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8008424:	23ff      	movs	r3, #255	; 0xff
 8008426:	6263      	str	r3, [r4, #36]	; 0x24
}
 8008428:	b003      	add	sp, #12
 800842a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 800842c:	200a      	movs	r0, #10
 800842e:	fbb3 f2f0 	udiv	r2, r3, r0
 8008432:	fb00 3312 	mls	r3, r0, r2, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8008436:	fbb5 f7f0 	udiv	r7, r5, r0
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 800843a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800843e:	fb00 5217 	mls	r2, r0, r7, r5
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8008442:	fbb6 f5f0 	udiv	r5, r6, r0
 8008446:	fb00 6015 	mls	r0, r0, r5, r6
 800844a:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800844e:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 8008452:	b2c0      	uxtb	r0, r0
 8008454:	9000      	str	r0, [sp, #0]
 8008456:	b2db      	uxtb	r3, r3
 8008458:	b2d2      	uxtb	r2, r2
 800845a:	e7d6      	b.n	800840a <LL_RTC_DATE_Init+0x36>
      status = SUCCESS;
 800845c:	2001      	movs	r0, #1
 800845e:	e7e1      	b.n	8008424 <LL_RTC_DATE_Init+0x50>
 8008460:	40002800 	.word	0x40002800

08008464 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008464:	b084      	sub	sp, #16
 8008466:	b510      	push	{r4, lr}
 8008468:	ac03      	add	r4, sp, #12
 800846a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 800846e:	9904      	ldr	r1, [sp, #16]
 8008470:	9b03      	ldr	r3, [sp, #12]
 8008472:	6842      	ldr	r2, [r0, #4]
 8008474:	430b      	orrs	r3, r1
 8008476:	9905      	ldr	r1, [sp, #20]
 8008478:	430b      	orrs	r3, r1
 800847a:	9906      	ldr	r1, [sp, #24]
 800847c:	430b      	orrs	r3, r1
 800847e:	9907      	ldr	r1, [sp, #28]
 8008480:	430b      	orrs	r3, r1
 8008482:	9908      	ldr	r1, [sp, #32]
                                              Init.BusWide             |\
                                              Init.HardwareFlowControl |\
                                              Init.ClockDiv);  

  return HAL_OK;
}
 8008484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8008488:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 800848c:	430b      	orrs	r3, r1
 800848e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8008492:	4313      	orrs	r3, r2
 8008494:	6043      	str	r3, [r0, #4]
}
 8008496:	b004      	add	sp, #16
 8008498:	2000      	movs	r0, #0
 800849a:	4770      	bx	lr

0800849c <SDMMC_ReadFIFO>:
 800849c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80084a0:	4770      	bx	lr

080084a2 <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80084a2:	2303      	movs	r3, #3
 80084a4:	6003      	str	r3, [r0, #0]
  
  return HAL_OK; 
}
 80084a6:	2000      	movs	r0, #0
 80084a8:	4770      	bx	lr

080084aa <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80084aa:	6800      	ldr	r0, [r0, #0]
}
 80084ac:	f000 0003 	and.w	r0, r0, #3
 80084b0:	4770      	bx	lr

080084b2 <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80084b2:	680b      	ldr	r3, [r1, #0]
 80084b4:	6083      	str	r3, [r0, #8]

  /* Set SDMMC command parameters */
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80084b6:	68c3      	ldr	r3, [r0, #12]
 80084b8:	684a      	ldr	r2, [r1, #4]
 80084ba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80084be:	f023 030f 	bic.w	r3, r3, #15
 80084c2:	4313      	orrs	r3, r2
 80084c4:	688a      	ldr	r2, [r1, #8]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	68ca      	ldr	r2, [r1, #12]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	690a      	ldr	r2, [r1, #16]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	60c3      	str	r3, [r0, #12]
                                          Command->Response         |\
                                          Command->WaitForInterrupt |\
                                          Command->CPSM); 
  
  return HAL_OK;  
}
 80084d2:	2000      	movs	r0, #0
 80084d4:	4770      	bx	lr

080084d6 <SDMMC_GetCommandResponse>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
  return (uint8_t)(SDMMCx->RESPCMD);
 80084d6:	6900      	ldr	r0, [r0, #16]
}
 80084d8:	b2c0      	uxtb	r0, r0
 80084da:	4770      	bx	lr

080084dc <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80084dc:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80084de:	3014      	adds	r0, #20
 80084e0:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80084e6:	9101      	str	r1, [sp, #4]
  
  return (*(__IO uint32_t *) tmp);
 80084e8:	9b01      	ldr	r3, [sp, #4]
 80084ea:	6818      	ldr	r0, [r3, #0]
}  
 80084ec:	b002      	add	sp, #8
 80084ee:	4770      	bx	lr

080084f0 <SDMMC_DataConfig>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80084f0:	680b      	ldr	r3, [r1, #0]
 80084f2:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80084f4:	684b      	ldr	r3, [r1, #4]
 80084f6:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 80084f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80084fa:	688a      	ldr	r2, [r1, #8]
 80084fc:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 8008500:	4313      	orrs	r3, r2
 8008502:	68ca      	ldr	r2, [r1, #12]
 8008504:	4313      	orrs	r3, r2
 8008506:	690a      	ldr	r2, [r1, #16]
 8008508:	4313      	orrs	r3, r2
 800850a:	694a      	ldr	r2, [r1, #20]
 800850c:	4313      	orrs	r3, r2
 800850e:	62c3      	str	r3, [r0, #44]	; 0x2c
                                              Data->TransferMode  |\
                                              Data->DPSM);

  return HAL_OK;

}
 8008510:	2000      	movs	r0, #0
 8008512:	4770      	bx	lr

08008514 <LL_SPI_Init>:
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8008514:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8008516:	065b      	lsls	r3, r3, #25
{
 8008518:	b570      	push	{r4, r5, r6, lr}
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800851a:	d426      	bmi.n	800856a <LL_SPI_Init+0x56>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800851c:	e891 0048 	ldmia.w	r1, {r3, r6}
 8008520:	4333      	orrs	r3, r6
 8008522:	68ce      	ldr	r6, [r1, #12]
 8008524:	694d      	ldr	r5, [r1, #20]
 8008526:	6804      	ldr	r4, [r0, #0]
 8008528:	6a0a      	ldr	r2, [r1, #32]
 800852a:	4333      	orrs	r3, r6
 800852c:	690e      	ldr	r6, [r1, #16]
 800852e:	4333      	orrs	r3, r6
 8008530:	698e      	ldr	r6, [r1, #24]
 8008532:	432b      	orrs	r3, r5
 8008534:	4333      	orrs	r3, r6
 8008536:	69ce      	ldr	r6, [r1, #28]
 8008538:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 800853c:	4333      	orrs	r3, r6
 800853e:	f024 04bf 	bic.w	r4, r4, #191	; 0xbf
 8008542:	4313      	orrs	r3, r2
 8008544:	4323      	orrs	r3, r4
 8008546:	6003      	str	r3, [r0, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8008548:	6844      	ldr	r4, [r0, #4]
 800854a:	688b      	ldr	r3, [r1, #8]
 800854c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
 8008550:	ea43 4315 	orr.w	r3, r3, r5, lsr #16
 8008554:	f024 0404 	bic.w	r4, r4, #4
 8008558:	4323      	orrs	r3, r4

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800855a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    MODIFY_REG(SPIx->CR2,
 800855e:	6043      	str	r3, [r0, #4]
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8008560:	d101      	bne.n	8008566 <LL_SPI_Init+0x52>
 8008562:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8008564:	6103      	str	r3, [r0, #16]
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 8008566:	2001      	movs	r0, #1
  }

  return status;
}
 8008568:	bd70      	pop	{r4, r5, r6, pc}
  ErrorStatus status = ERROR;
 800856a:	2000      	movs	r0, #0
 800856c:	bd70      	pop	{r4, r5, r6, pc}

0800856e <USB_CoreInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800856e:	b084      	sub	sp, #16
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	ad05      	add	r5, sp, #20
 8008574:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008578:	68c3      	ldr	r3, [r0, #12]
 800857a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
{
 800857e:	4604      	mov	r4, r0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008580:	60c3      	str	r3, [r0, #12]
  
  /* Reset after a PHY select and set Host mode */
  USB_CoreReset(USBx);
 8008582:	f000 fb75 	bl	8008c70 <USB_CoreReset>
  
  /* Deactivate the power down*/
  USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8008586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800858a:	63a3      	str	r3, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 800858c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008590:	2000      	movs	r0, #0
 8008592:	b004      	add	sp, #16
 8008594:	4770      	bx	lr

08008596 <USB_EnableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008596:	6883      	ldr	r3, [r0, #8]
 8008598:	f043 0301 	orr.w	r3, r3, #1
 800859c:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 800859e:	2000      	movs	r0, #0
 80085a0:	4770      	bx	lr

080085a2 <USB_DisableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80085a2:	6883      	ldr	r3, [r0, #8]
 80085a4:	f023 0301 	bic.w	r3, r3, #1
 80085a8:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80085aa:	2000      	movs	r0, #0
 80085ac:	4770      	bx	lr

080085ae <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_ModeTypeDef mode)
{
 80085ae:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80085b0:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_HOST_MODE)
 80085b2:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80085b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80085b8:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_HOST_MODE)
 80085ba:	d108      	bne.n	80085ce <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80085bc:	68c3      	ldr	r3, [r0, #12]
 80085be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085c2:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50);
 80085c4:	2032      	movs	r0, #50	; 0x32
 80085c6:	f7fc ff6d 	bl	80054a4 <HAL_Delay>
  
  return HAL_OK;
}
 80085ca:	2000      	movs	r0, #0
 80085cc:	bd08      	pop	{r3, pc}
  else if ( mode == USB_DEVICE_MODE)
 80085ce:	2900      	cmp	r1, #0
 80085d0:	d1f8      	bne.n	80085c4 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 80085d2:	68c3      	ldr	r3, [r0, #12]
 80085d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085d8:	60c3      	str	r3, [r0, #12]
 80085da:	e7f3      	b.n	80085c4 <USB_SetCurrentMode+0x16>

080085dc <USB_DevInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085dc:	b084      	sub	sp, #16
 80085de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e2:	4604      	mov	r4, r0
 80085e4:	a809      	add	r0, sp, #36	; 0x24
 80085e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t index = 0;

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80085ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085ec:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80085ee:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80085f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085f6:	4689      	mov	r9, r1
 80085f8:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 80085fa:	b95f      	cbnz	r7, 8008614 <USB_DevInit+0x38>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 80085fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008602:	63a3      	str	r3, [r4, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008604:	6823      	ldr	r3, [r4, #0]
 8008606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800860a:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800860c:	6823      	ldr	r3, [r4, #0]
 800860e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008612:	6023      	str	r3, [r4, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 8008614:	2500      	movs	r5, #0
 8008616:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800861a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800861e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  /* Set Full speed phy */
  USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8008622:	2103      	movs	r1, #3
 8008624:	4620      	mov	r0, r4
 8008626:	f000 f893 	bl	8008750 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 800862a:	2110      	movs	r1, #16
 800862c:	4620      	mov	r0, r4
 800862e:	f000 f86d 	bl	800870c <USB_FlushTxFifo>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008632:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  USB_FlushRxFifo(USBx);
 8008636:	4620      	mov	r0, r4
 8008638:	f000 f87a 	bl	8008730 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
  USBx_DEVICE->DOEPMSK = 0;
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800863c:	f04f 33ff 	mov.w	r3, #4294967295
  USBx_DEVICE->DIEPMSK = 0;
 8008640:	6135      	str	r5, [r6, #16]
 8008642:	462a      	mov	r2, r5
  USBx_DEVICE->DOEPMSK = 0;
 8008644:	6175      	str	r5, [r6, #20]
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8008646:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800864a:	61b3      	str	r3, [r6, #24]
    {
      USBx_INEP(index)->DIEPCTL = 0;
    }
    
    USBx_INEP(index)->DIEPTSIZ = 0;
    USBx_INEP(index)->DIEPINT  = 0xFF;
 800864c:	20ff      	movs	r0, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0;
 800864e:	61f5      	str	r5, [r6, #28]
 8008650:	f504 6310 	add.w	r3, r4, #2304	; 0x900
  for (index = 0; index < cfg.dev_endpoints; index++)
 8008654:	454d      	cmp	r5, r9
 8008656:	d13c      	bne.n	80086d2 <USB_DevInit+0xf6>
 8008658:	2200      	movs	r2, #0
 800865a:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 800865e:	4611      	mov	r1, r2
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8008660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    {
      USBx_OUTEP(index)->DOEPCTL = 0;
    }
    
    USBx_OUTEP(index)->DOEPTSIZ = 0;
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8008664:	f04f 0eff 	mov.w	lr, #255	; 0xff
  for (index = 0; index < cfg.dev_endpoints; index++)
 8008668:	4295      	cmp	r5, r2
 800866a:	d13e      	bne.n	80086ea <USB_DevInit+0x10e>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800866c:	6933      	ldr	r3, [r6, #16]
  
  if (cfg.dma_enable == 1)
 800866e:	f1b8 0f01 	cmp.w	r8, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008672:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008676:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 8008678:	d108      	bne.n	800868c <USB_DevInit+0xb0>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 800867a:	4b22      	ldr	r3, [pc, #136]	; (8008704 <USB_DevInit+0x128>)
 800867c:	6333      	str	r3, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 800867e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8008680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008684:	f043 0303 	orr.w	r3, r3, #3
 8008688:	6333      	str	r3, [r6, #48]	; 0x30
    
    index= USBx_DEVICE->DTHRCTL;
 800868a:	6b33      	ldr	r3, [r6, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 800868c:	2300      	movs	r3, #0
 800868e:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 8008690:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8008694:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8008696:	f1b8 0f00 	cmp.w	r8, #0
 800869a:	d103      	bne.n	80086a4 <USB_DevInit+0xc8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 800869c:	69a3      	ldr	r3, [r4, #24]
 800869e:	f043 0310 	orr.w	r3, r3, #16
 80086a2:	61a3      	str	r3, [r4, #24]
  }

    /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80086a4:	69a2      	ldr	r2, [r4, #24]
 80086a6:	4b18      	ldr	r3, [pc, #96]	; (8008708 <USB_DevInit+0x12c>)
 80086a8:	4313      	orrs	r3, r2
 80086aa:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 80086ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086ae:	b11b      	cbz	r3, 80086b8 <USB_DevInit+0xdc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80086b0:	69a3      	ldr	r3, [r4, #24]
 80086b2:	f043 0308 	orr.w	r3, r3, #8
 80086b6:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 80086b8:	2f01      	cmp	r7, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 80086ba:	bf01      	itttt	eq
 80086bc:	69a3      	ldreq	r3, [r4, #24]
 80086be:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80086c2:	f043 0304 	orreq.w	r3, r3, #4
 80086c6:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 80086c8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086cc:	2000      	movs	r0, #0
 80086ce:	b004      	add	sp, #16
 80086d0:	4770      	bx	lr
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80086d2:	f8d3 e000 	ldr.w	lr, [r3]
 80086d6:	f1be 0f00 	cmp.w	lr, #0
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80086da:	bfb4      	ite	lt
 80086dc:	6019      	strlt	r1, [r3, #0]
      USBx_INEP(index)->DIEPCTL = 0;
 80086de:	601a      	strge	r2, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 80086e0:	3501      	adds	r5, #1
    USBx_INEP(index)->DIEPTSIZ = 0;
 80086e2:	611a      	str	r2, [r3, #16]
    USBx_INEP(index)->DIEPINT  = 0xFF;
 80086e4:	6098      	str	r0, [r3, #8]
 80086e6:	3320      	adds	r3, #32
 80086e8:	e7b4      	b.n	8008654 <USB_DevInit+0x78>
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086ea:	f8d3 c000 	ldr.w	ip, [r3]
 80086ee:	f1bc 0f00 	cmp.w	ip, #0
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80086f2:	bfb4      	ite	lt
 80086f4:	6018      	strlt	r0, [r3, #0]
      USBx_OUTEP(index)->DOEPCTL = 0;
 80086f6:	6019      	strge	r1, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 80086f8:	3201      	adds	r2, #1
    USBx_OUTEP(index)->DOEPTSIZ = 0;
 80086fa:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 80086fc:	f8c3 e008 	str.w	lr, [r3, #8]
 8008700:	3320      	adds	r3, #32
 8008702:	e7b1      	b.n	8008668 <USB_DevInit+0x8c>
 8008704:	00800100 	.word	0x00800100
 8008708:	803c3800 	.word	0x803c3800

0800870c <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 800870c:	0189      	lsls	r1, r1, #6
 800870e:	f041 0120 	orr.w	r1, r1, #32
 8008712:	4a06      	ldr	r2, [pc, #24]	; (800872c <USB_FlushTxFifo+0x20>)
 8008714:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000)
 8008716:	3a01      	subs	r2, #1
 8008718:	d005      	beq.n	8008726 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800871a:	6903      	ldr	r3, [r0, #16]
 800871c:	f013 0320 	ands.w	r3, r3, #32
 8008720:	d1f9      	bne.n	8008716 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8008722:	4618      	mov	r0, r3
 8008724:	4770      	bx	lr
      return HAL_TIMEOUT;
 8008726:	2003      	movs	r0, #3
}
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	00030d41 	.word	0x00030d41

08008730 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008730:	2310      	movs	r3, #16
 8008732:	4a06      	ldr	r2, [pc, #24]	; (800874c <USB_FlushRxFifo+0x1c>)
 8008734:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8008736:	3a01      	subs	r2, #1
 8008738:	d005      	beq.n	8008746 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800873a:	6903      	ldr	r3, [r0, #16]
 800873c:	f013 0310 	ands.w	r3, r3, #16
 8008740:	d1f9      	bne.n	8008736 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8008742:	4618      	mov	r0, r3
 8008744:	4770      	bx	lr
      return HAL_TIMEOUT;
 8008746:	2003      	movs	r0, #3
}
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	00030d41 	.word	0x00030d41

08008750 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8008750:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8008754:	4319      	orrs	r1, r3
 8008756:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 800875a:	2000      	movs	r0, #0
 800875c:	4770      	bx	lr

0800875e <USB_ActivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800875e:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1)
 8008760:	784b      	ldrb	r3, [r1, #1]
 8008762:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8008764:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8008768:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 800876c:	2b01      	cmp	r3, #1
 800876e:	d11b      	bne.n	80087a8 <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8008770:	40a3      	lsls	r3, r4
 8008772:	b29b      	uxth	r3, r3
 8008774:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8008776:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 800877a:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 800877c:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	0412      	lsls	r2, r2, #16
 8008784:	d40e      	bmi.n	80087a4 <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8008786:	688a      	ldr	r2, [r1, #8]
 8008788:	78c8      	ldrb	r0, [r1, #3]
 800878a:	681d      	ldr	r5, [r3, #0]
 800878c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8008790:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008794:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008798:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 800879c:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 80087a0:	4328      	orrs	r0, r5
 80087a2:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 80087a4:	2000      	movs	r0, #0
 80087a6:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 80087a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80087ac:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 80087ae:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 80087b2:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 80087b4:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 80087b8:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 80087ba:	6803      	ldr	r3, [r0, #0]
 80087bc:	041b      	lsls	r3, r3, #16
 80087be:	d4f1      	bmi.n	80087a4 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 80087c0:	688b      	ldr	r3, [r1, #8]
 80087c2:	78c9      	ldrb	r1, [r1, #3]
 80087c4:	6802      	ldr	r2, [r0, #0]
 80087c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087d2:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80087d6:	4313      	orrs	r3, r2
 80087d8:	6003      	str	r3, [r0, #0]
 80087da:	e7e3      	b.n	80087a4 <USB_ActivateEndpoint+0x46>

080087dc <USB_DeactivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087dc:	b510      	push	{r4, lr}
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 80087de:	784b      	ldrb	r3, [r1, #1]
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 80087e0:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 80087e4:	7809      	ldrb	r1, [r1, #0]
 80087e6:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d111      	bne.n	8008812 <USB_DeactivateEndpoint+0x36>
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 80087ee:	408b      	lsls	r3, r1
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	43db      	mvns	r3, r3
 80087f4:	401c      	ands	r4, r3
 80087f6:	63d4      	str	r4, [r2, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 80087f8:	69d4      	ldr	r4, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 80087fa:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 80087fe:	4023      	ands	r3, r4
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8008800:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8008804:	61d3      	str	r3, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8008806:	6803      	ldr	r3, [r0, #0]
 8008808:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800880c:	6003      	str	r3, [r0, #0]
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
  }
  return HAL_OK;
}
 800880e:	2000      	movs	r0, #0
 8008810:	bd10      	pop	{r4, pc}
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8008812:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008816:	408b      	lsls	r3, r1
 8008818:	43db      	mvns	r3, r3
 800881a:	401c      	ands	r4, r3
 800881c:	63d4      	str	r4, [r2, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 800881e:	69d4      	ldr	r4, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8008820:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8008824:	4023      	ands	r3, r4
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8008826:	eb00 1041 	add.w	r0, r0, r1, lsl #5
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 800882a:	61d3      	str	r3, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 800882c:	6803      	ldr	r3, [r0, #0]
 800882e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008832:	6003      	str	r3, [r0, #0]
 8008834:	e7eb      	b.n	800880e <USB_DeactivateEndpoint+0x32>
	...

08008838 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 800883a:	784b      	ldrb	r3, [r1, #1]
 800883c:	780c      	ldrb	r4, [r1, #0]
 800883e:	2b01      	cmp	r3, #1
 8008840:	694b      	ldr	r3, [r1, #20]
 8008842:	d163      	bne.n	800890c <USB_EPStartXfer+0xd4>
 8008844:	2520      	movs	r5, #32
 8008846:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800884a:	fb15 6404 	smlabb	r4, r5, r4, r6
 800884e:	6925      	ldr	r5, [r4, #16]
    if (ep->xfer_len == 0)
 8008850:	bb73      	cbnz	r3, 80088b0 <USB_EPStartXfer+0x78>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8008852:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8008856:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800885a:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 800885c:	6925      	ldr	r5, [r4, #16]
 800885e:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8008862:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8008864:	6925      	ldr	r5, [r4, #16]
 8008866:	0ced      	lsrs	r5, r5, #19
 8008868:	04ed      	lsls	r5, r5, #19
 800886a:	6125      	str	r5, [r4, #16]
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
      }       
    }
      if (ep->type != EP_TYPE_ISOC)
 800886c:	78cf      	ldrb	r7, [r1, #3]
 800886e:	780d      	ldrb	r5, [r1, #0]
 8008870:	2f01      	cmp	r7, #1
 8008872:	f000 8089 	beq.w	8008988 <USB_EPStartXfer+0x150>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8008876:	b14b      	cbz	r3, 800888c <USB_EPStartXfer+0x54>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 8008878:	f8d0 c834 	ldr.w	ip, [r0, #2100]	; 0x834
 800887c:	2401      	movs	r4, #1
 800887e:	40ac      	lsls	r4, r5
 8008880:	ea44 040c 	orr.w	r4, r4, ip
 8008884:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 8008888:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800888c:	780d      	ldrb	r5, [r1, #0]
 800888e:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 8008892:	2f01      	cmp	r7, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008894:	6834      	ldr	r4, [r6, #0]
 8008896:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800889a:	6034      	str	r4, [r6, #0]
    if (ep->type == EP_TYPE_ISOC)
 800889c:	d105      	bne.n	80088aa <USB_EPStartXfer+0x72>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 800889e:	9200      	str	r2, [sp, #0]
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	462a      	mov	r2, r5
 80088a4:	68c9      	ldr	r1, [r1, #12]
 80088a6:	f000 f8e3 	bl	8008a70 <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 80088aa:	2000      	movs	r0, #0
 80088ac:	b003      	add	sp, #12
 80088ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80088b0:	0ced      	lsrs	r5, r5, #19
 80088b2:	04ed      	lsls	r5, r5, #19
 80088b4:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80088b6:	6925      	ldr	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 80088b8:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80088ba:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80088be:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80088c2:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 80088c4:	19dd      	adds	r5, r3, r7
 80088c6:	3d01      	subs	r5, #1
 80088c8:	fbb5 f7f7 	udiv	r7, r5, r7
 80088cc:	4d35      	ldr	r5, [pc, #212]	; (80089a4 <USB_EPStartXfer+0x16c>)
 80088ce:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80088d2:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 80088d6:	ea45 050e 	orr.w	r5, r5, lr
 80088da:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 80088dc:	6927      	ldr	r7, [r4, #16]
 80088de:	f3c3 0512 	ubfx	r5, r3, #0, #19
 80088e2:	433d      	orrs	r5, r7
 80088e4:	6125      	str	r5, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 80088e6:	78cd      	ldrb	r5, [r1, #3]
 80088e8:	2d01      	cmp	r5, #1
 80088ea:	d1bf      	bne.n	800886c <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 80088ec:	6925      	ldr	r5, [r4, #16]
 80088ee:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 80088f2:	6125      	str	r5, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
 80088f4:	6925      	ldr	r5, [r4, #16]
 80088f6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80088fa:	6125      	str	r5, [r4, #16]
 80088fc:	e7b6      	b.n	800886c <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80088fe:	fb14 6405 	smlabb	r4, r4, r5, r6
 8008902:	6825      	ldr	r5, [r4, #0]
 8008904:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008908:	6025      	str	r5, [r4, #0]
 800890a:	e7bf      	b.n	800888c <USB_EPStartXfer+0x54>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 800890c:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8008910:	eb02 1244 	add.w	r2, r2, r4, lsl #5
 8008914:	6914      	ldr	r4, [r2, #16]
 8008916:	0ce4      	lsrs	r4, r4, #19
 8008918:	04e4      	lsls	r4, r4, #19
 800891a:	6114      	str	r4, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800891c:	6914      	ldr	r4, [r2, #16]
 800891e:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8008922:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8008926:	6114      	str	r4, [r2, #16]
 8008928:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0)
 800892a:	b9db      	cbnz	r3, 8008964 <USB_EPStartXfer+0x12c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800892c:	6913      	ldr	r3, [r2, #16]
 800892e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8008932:	431c      	orrs	r4, r3
 8008934:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;      
 8008936:	6913      	ldr	r3, [r2, #16]
 8008938:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800893c:	6113      	str	r3, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 800893e:	78cb      	ldrb	r3, [r1, #3]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d10a      	bne.n	800895a <USB_EPStartXfer+0x122>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8008944:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8008948:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800894c:	6813      	ldr	r3, [r2, #0]
 800894e:	bf0c      	ite	eq
 8008950:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008954:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8008958:	6013      	str	r3, [r2, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800895a:	6813      	ldr	r3, [r2, #0]
 800895c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008960:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8008962:	e7a2      	b.n	80088aa <USB_EPStartXfer+0x72>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 8008964:	4d0f      	ldr	r5, [pc, #60]	; (80089a4 <USB_EPStartXfer+0x16c>)
 8008966:	6916      	ldr	r6, [r2, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket; 
 8008968:	4423      	add	r3, r4
 800896a:	3b01      	subs	r3, #1
 800896c:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 8008970:	ea05 45c3 	and.w	r5, r5, r3, lsl #19
 8008974:	4335      	orrs	r5, r6
 8008976:	6115      	str	r5, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt)); 
 8008978:	b29b      	uxth	r3, r3
 800897a:	6915      	ldr	r5, [r2, #16]
 800897c:	435c      	muls	r4, r3
 800897e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8008982:	432c      	orrs	r4, r5
 8008984:	6114      	str	r4, [r2, #16]
 8008986:	e7da      	b.n	800893e <USB_EPStartXfer+0x106>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8008988:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 800898c:	f414 7f80 	tst.w	r4, #256	; 0x100
 8008990:	f04f 0420 	mov.w	r4, #32
 8008994:	d0b3      	beq.n	80088fe <USB_EPStartXfer+0xc6>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008996:	fb14 6405 	smlabb	r4, r4, r5, r6
 800899a:	6825      	ldr	r5, [r4, #0]
 800899c:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 80089a0:	6025      	str	r5, [r4, #0]
 80089a2:	e773      	b.n	800888c <USB_EPStartXfer+0x54>
 80089a4:	1ff80000 	.word	0x1ff80000

080089a8 <USB_EP0StartXfer>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  /* IN endpoint */
  if (ep->is_in == 1)
 80089a8:	784b      	ldrb	r3, [r1, #1]
 80089aa:	2b01      	cmp	r3, #1
{
 80089ac:	b530      	push	{r4, r5, lr}
 80089ae:	780b      	ldrb	r3, [r1, #0]
 80089b0:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1)
 80089b2:	d13e      	bne.n	8008a32 <USB_EP0StartXfer+0x8a>
 80089b4:	2220      	movs	r2, #32
 80089b6:	f500 6410 	add.w	r4, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80089ba:	fb12 4303 	smlabb	r3, r2, r3, r4
 80089be:	691a      	ldr	r2, [r3, #16]
    if (ep->xfer_len == 0)
 80089c0:	b9fd      	cbnz	r5, 8008a02 <USB_EP0StartXfer+0x5a>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80089c2:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 80089c6:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 80089ca:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 80089cc:	691a      	ldr	r2, [r3, #16]
 80089ce:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80089d2:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80089d4:	691a      	ldr	r2, [r3, #16]
 80089d6:	0cd2      	lsrs	r2, r2, #19
 80089d8:	04d2      	lsls	r2, r2, #19
 80089da:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0)
 80089dc:	694b      	ldr	r3, [r1, #20]
 80089de:	b13b      	cbz	r3, 80089f0 <USB_EP0StartXfer+0x48>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1 << (ep->num);
 80089e0:	780d      	ldrb	r5, [r1, #0]
 80089e2:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 80089e6:	2301      	movs	r3, #1
 80089e8:	40ab      	lsls	r3, r5
 80089ea:	4313      	orrs	r3, r2
 80089ec:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 80089f0:	780b      	ldrb	r3, [r1, #0]
 80089f2:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80089fc:	601a      	str	r2, [r3, #0]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 80089fe:	2000      	movs	r0, #0
 8008a00:	bd30      	pop	{r4, r5, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a02:	0cd2      	lsrs	r2, r2, #19
 8008a04:	04d2      	lsls	r2, r2, #19
 8008a06:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8008a08:	691a      	ldr	r2, [r3, #16]
 8008a0a:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8008a0e:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8008a12:	611a      	str	r2, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8008a14:	688a      	ldr	r2, [r1, #8]
 8008a16:	4295      	cmp	r5, r2
        ep->xfer_len = ep->maxpacket;
 8008a18:	bf88      	it	hi
 8008a1a:	614a      	strhi	r2, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8008a1c:	691a      	ldr	r2, [r3, #16]
 8008a1e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008a22:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8008a24:	694a      	ldr	r2, [r1, #20]
 8008a26:	691d      	ldr	r5, [r3, #16]
 8008a28:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8008a2c:	432a      	orrs	r2, r5
 8008a2e:	611a      	str	r2, [r3, #16]
 8008a30:	e7d4      	b.n	80089dc <USB_EP0StartXfer+0x34>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8008a32:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8008a36:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8008a3a:	6903      	ldr	r3, [r0, #16]
 8008a3c:	0cdb      	lsrs	r3, r3, #19
 8008a3e:	04db      	lsls	r3, r3, #19
 8008a40:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8008a42:	6903      	ldr	r3, [r0, #16]
 8008a44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a4c:	6103      	str	r3, [r0, #16]
 8008a4e:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0)
 8008a50:	b105      	cbz	r5, 8008a54 <USB_EP0StartXfer+0xac>
      ep->xfer_len = ep->maxpacket;
 8008a52:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 8008a54:	6902      	ldr	r2, [r0, #16]
 8008a56:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008a5a:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8008a5c:	6902      	ldr	r2, [r0, #16]
 8008a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a62:	4313      	orrs	r3, r2
 8008a64:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8008a66:	6803      	ldr	r3, [r0, #0]
 8008a68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a6c:	6003      	str	r3, [r0, #0]
 8008a6e:	e7c6      	b.n	80089fe <USB_EP0StartXfer+0x56>

08008a70 <USB_WritePacket>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  uint32_t count32b= 0 , index= 0;
  count32b =  (len + 3) / 4;
 8008a70:	3303      	adds	r3, #3
  for (index = 0; index < count32b; index++, src += 4)
  {
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8008a72:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
{
 8008a76:	b510      	push	{r4, lr}
  count32b =  (len + 3) / 4;
 8008a78:	109b      	asrs	r3, r3, #2
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8008a7a:	eb00 3202 	add.w	r2, r0, r2, lsl #12
  for (index = 0; index < count32b; index++, src += 4)
 8008a7e:	2400      	movs	r4, #0
 8008a80:	429c      	cmp	r4, r3
 8008a82:	d101      	bne.n	8008a88 <USB_WritePacket+0x18>
  }
  return HAL_OK;
}
 8008a84:	2000      	movs	r0, #0
 8008a86:	bd10      	pop	{r4, pc}
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8008a88:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8008a8c:	6010      	str	r0, [r2, #0]
  for (index = 0; index < count32b; index++, src += 4)
 8008a8e:	3401      	adds	r4, #1
 8008a90:	e7f6      	b.n	8008a80 <USB_WritePacket+0x10>

08008a92 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008a92:	b510      	push	{r4, lr}
  uint32_t index=0;
  uint32_t count32b = (len + 3) / 4;
 8008a94:	3203      	adds	r2, #3
 8008a96:	1092      	asrs	r2, r2, #2
  
  for ( index = 0; index < count32b; index++, dest += 4 )
 8008a98:	2300      	movs	r3, #0
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8008a9a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( index = 0; index < count32b; index++, dest += 4 )
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d102      	bne.n	8008aa8 <USB_ReadPacket+0x16>
    
  }
  return ((void *)dest);
}
 8008aa2:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8008aa6:	bd10      	pop	{r4, pc}
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8008aa8:	6804      	ldr	r4, [r0, #0]
 8008aaa:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  for ( index = 0; index < count32b; index++, dest += 4 )
 8008aae:	3301      	adds	r3, #1
 8008ab0:	e7f5      	b.n	8008a9e <USB_ReadPacket+0xc>

08008ab2 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8008ab2:	784b      	ldrb	r3, [r1, #1]
 8008ab4:	780a      	ldrb	r2, [r1, #0]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	f04f 0320 	mov.w	r3, #32
 8008abc:	d10b      	bne.n	8008ad6 <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 8008abe:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8008ac2:	fb13 0002 	smlabb	r0, r3, r2, r0
 8008ac6:	6803      	ldr	r3, [r0, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	db0b      	blt.n	8008ae4 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8008acc:	6803      	ldr	r3, [r0, #0]
 8008ace:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ad2:	6003      	str	r3, [r0, #0]
 8008ad4:	e006      	b.n	8008ae4 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 8008ad6:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8008ada:	fb13 0002 	smlabb	r0, r3, r2, r0
 8008ade:	6803      	ldr	r3, [r0, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	daf3      	bge.n	8008acc <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008ae4:	6803      	ldr	r3, [r0, #0]
 8008ae6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008aea:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8008aec:	2000      	movs	r0, #0
 8008aee:	4770      	bx	lr

08008af0 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8008af0:	784b      	ldrb	r3, [r1, #1]
 8008af2:	780a      	ldrb	r2, [r1, #0]
 8008af4:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008af6:	bf0c      	ite	eq
 8008af8:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008afc:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8008b00:	2320      	movs	r3, #32
 8008b02:	fb13 0002 	smlabb	r0, r3, r2, r0
 8008b06:	6803      	ldr	r3, [r0, #0]
 8008b08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b0c:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8008b0e:	78cb      	ldrb	r3, [r1, #3]
 8008b10:	3b02      	subs	r3, #2
 8008b12:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b14:	bf9e      	ittt	ls
 8008b16:	6803      	ldrls	r3, [r0, #0]
 8008b18:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8008b1c:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8008b1e:	2000      	movs	r0, #0
 8008b20:	4770      	bx	lr

08008b22 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the USB device mode
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 8008b22:	b538      	push	{r3, r4, r5, lr}
 8008b24:	f500 612e 	add.w	r1, r0, #2784	; 0xae0
 8008b28:	4604      	mov	r4, r0
 8008b2a:	f500 6310 	add.w	r3, r0, #2304	; 0x900
  uint32_t index;
  
  /* Clear Pending interrupt */
  for (index = 0; index < 15 ; index++)
  {
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8008b2e:	22ff      	movs	r2, #255	; 0xff
 8008b30:	609a      	str	r2, [r3, #8]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8008b32:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8008b36:	3320      	adds	r3, #32
  for (index = 0; index < 15 ; index++)
 8008b38:	428b      	cmp	r3, r1
 8008b3a:	d1f9      	bne.n	8008b30 <USB_StopDevice+0xe>
  }
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
  
  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0;
 8008b3c:	2500      	movs	r5, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8008b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b42:	f8c4 2818 	str.w	r2, [r4, #2072]	; 0x818
  USBx_DEVICE->DOEPMSK  = 0;
  USBx_DEVICE->DAINTMSK = 0;
  
  /* Flush the FIFO */
  USB_FlushRxFifo(USBx);
 8008b46:	4620      	mov	r0, r4
  USBx_DEVICE->DIEPMSK  = 0;
 8008b48:	f8c4 5810 	str.w	r5, [r4, #2064]	; 0x810
  USBx_DEVICE->DOEPMSK  = 0;
 8008b4c:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
  USBx_DEVICE->DAINTMSK = 0;
 8008b50:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
  USB_FlushRxFifo(USBx);
 8008b54:	f7ff fdec 	bl	8008730 <USB_FlushRxFifo>
  USB_FlushTxFifo(USBx ,  0x10 );  
 8008b58:	2110      	movs	r1, #16
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f7ff fdd6 	bl	800870c <USB_FlushTxFifo>
  
  return HAL_OK;
}
 8008b60:	4628      	mov	r0, r5
 8008b62:	bd38      	pop	{r3, r4, r5, pc}

08008b64 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8008b64:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8008b68:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008b6c:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 8008b70:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8008b74:	0109      	lsls	r1, r1, #4
 8008b76:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8008b7a:	4319      	orrs	r1, r3
 8008b7c:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8008b80:	2000      	movs	r0, #0
 8008b82:	4770      	bx	lr

08008b84 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8008b84:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ; 
 8008b86:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8008b8a:	f023 0302 	bic.w	r3, r3, #2
 8008b8e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8008b92:	2003      	movs	r0, #3
 8008b94:	f7fc fc86 	bl	80054a4 <HAL_Delay>
  
  return HAL_OK;  
}
 8008b98:	2000      	movs	r0, #0
 8008b9a:	bd08      	pop	{r3, pc}

08008b9c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8008b9c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ; 
 8008b9e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8008ba2:	f043 0302 	orr.w	r3, r3, #2
 8008ba6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8008baa:	2003      	movs	r0, #3
 8008bac:	f7fc fc7a 	bl	80054a4 <HAL_Delay>
  
  return HAL_OK;  
}
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	bd08      	pop	{r3, pc}

08008bb4 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->GINTSTS;
 8008bb4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8008bb6:	6980      	ldr	r0, [r0, #24]
  return tmpreg;  
}
 8008bb8:	4010      	ands	r0, r2
 8008bba:	4770      	bx	lr

08008bbc <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 8008bbc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8008bc0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008bc4:	69c0      	ldr	r0, [r0, #28]
 8008bc6:	4018      	ands	r0, r3
  return ((tmpreg & 0xffff0000) >> 16);
}
 8008bc8:	0c00      	lsrs	r0, r0, #16
 8008bca:	4770      	bx	lr

08008bcc <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 8008bcc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8008bd0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008bd4:	69c0      	ldr	r0, [r0, #28]
 8008bd6:	4018      	ands	r0, r3
  return ((tmpreg & 0xFFFF));
}
 8008bd8:	b280      	uxth	r0, r0
 8008bda:	4770      	bx	lr

08008bdc <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t tmpreg;
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8008bdc:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8008be0:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008be4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8008be8:	688a      	ldr	r2, [r1, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008bea:	6940      	ldr	r0, [r0, #20]
  return tmpreg;
}
 8008bec:	4010      	ands	r0, r2
 8008bee:	4770      	bx	lr

08008bf0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum: endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8008bf0:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, msk = 0, emp = 0;
  
  msk = USBx_DEVICE->DIEPMSK;
 8008bf2:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008bf6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1) << 7;
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8008bfa:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1) << 7;
 8008bfe:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8008c00:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1) << 7;
 8008c04:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8008c06:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	4323      	orrs	r3, r4
  return tmpreg;
}
 8008c0c:	4018      	ands	r0, r3
 8008c0e:	bd10      	pop	{r4, pc}

08008c10 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1);
 8008c10:	6940      	ldr	r0, [r0, #20]
}
 8008c12:	f000 0001 	and.w	r0, r0, #1
 8008c16:	4770      	bx	lr

08008c18 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008c18:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8008c1c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008c20:	f023 0307 	bic.w	r3, r3, #7
 8008c24:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8008c28:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8008c2c:	689a      	ldr	r2, [r3, #8]
 8008c2e:	f002 0206 	and.w	r2, r2, #6
 8008c32:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 8008c34:	bf02      	ittt	eq
 8008c36:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8008c3a:	f042 0203 	orreq.w	r2, r2, #3
 8008c3e:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008c42:	685a      	ldr	r2, [r3, #4]
 8008c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c48:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	4770      	bx	lr

08008c4e <USB_EP0_OutStart>:
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(psetup);

  USBx_OUTEP(0)->DOEPTSIZ = 0;
 8008c4e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8008c52:	2000      	movs	r0, #0
 8008c54:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8008c56:	691a      	ldr	r2, [r3, #16]
 8008c58:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008c5c:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 8008c5e:	691a      	ldr	r2, [r3, #16]
 8008c60:	f042 0218 	orr.w	r2, r2, #24
 8008c64:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8008c66:	691a      	ldr	r2, [r3, #16]
 8008c68:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8008c6c:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
}
 8008c6e:	4770      	bx	lr

08008c70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	60fb      	str	r3, [r7, #12]
  
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	60fb      	str	r3, [r7, #12]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	4a13      	ldr	r2, [pc, #76]	; (8008cd4 <USB_CoreReset+0x64>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d901      	bls.n	8008c8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e01b      	b.n	8008cc6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	daf2      	bge.n	8008c7c <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	f043 0201 	orr.w	r2, r3, #1
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	60fb      	str	r3, [r7, #12]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4a09      	ldr	r2, [pc, #36]	; (8008cd4 <USB_CoreReset+0x64>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d901      	bls.n	8008cb8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e006      	b.n	8008cc6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	f003 0301 	and.w	r3, r3, #1
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d0f0      	beq.n	8008ca6 <USB_CoreReset+0x36>
  
  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	00030d40 	.word	0x00030d40

08008cd8 <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8008cd8:	4b08      	ldr	r3, [pc, #32]	; (8008cfc <LL_mDelay+0x24>)
{
 8008cda:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8008ce0:	9b01      	ldr	r3, [sp, #4]
    Delay++;
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8008ce2:	4b06      	ldr	r3, [pc, #24]	; (8008cfc <LL_mDelay+0x24>)
  if (Delay < LL_MAX_DELAY)
 8008ce4:	1c41      	adds	r1, r0, #1
    Delay++;
 8008ce6:	bf18      	it	ne
 8008ce8:	3001      	addne	r0, #1
  while (Delay)
 8008cea:	b908      	cbnz	r0, 8008cf0 <LL_mDelay+0x18>
    {
      Delay--;
    }
  }
}
 8008cec:	b002      	add	sp, #8
 8008cee:	4770      	bx	lr
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	03d2      	lsls	r2, r2, #15
      Delay--;
 8008cf4:	bf48      	it	mi
 8008cf6:	f100 30ff 	addmi.w	r0, r0, #4294967295
 8008cfa:	e7f6      	b.n	8008cea <LL_mDelay+0x12>
 8008cfc:	e000e010 	.word	0xe000e010

08008d00 <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8008d00:	2320      	movs	r3, #32
 8008d02:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8008d04:	4800      	ldr	r0, [pc, #0]	; (8008d08 <USBD_MSC_GetHSCfgDesc+0x8>)
 8008d06:	4770      	bx	lr
 8008d08:	2000025c 	.word	0x2000025c

08008d0c <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8008d0c:	2320      	movs	r3, #32
 8008d0e:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8008d10:	4800      	ldr	r0, [pc, #0]	; (8008d14 <USBD_MSC_GetFSCfgDesc+0x8>)
 8008d12:	4770      	bx	lr
 8008d14:	2000023c 	.word	0x2000023c

08008d18 <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8008d18:	2320      	movs	r3, #32
 8008d1a:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8008d1c:	4800      	ldr	r0, [pc, #0]	; (8008d20 <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 8008d1e:	4770      	bx	lr
 8008d20:	20000288 	.word	0x20000288

08008d24 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8008d24:	230a      	movs	r3, #10
 8008d26:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 8008d28:	4800      	ldr	r0, [pc, #0]	; (8008d2c <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 8008d2a:	4770      	bx	lr
 8008d2c:	2000027c 	.word	0x2000027c

08008d30 <USBD_MSC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008d30:	7c03      	ldrb	r3, [r0, #16]
{
 8008d32:	b510      	push	{r4, lr}
 8008d34:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008d36:	b9c3      	cbnz	r3, 8008d6a <USBD_MSC_Init+0x3a>
    USBD_LL_OpenEP(pdev,
 8008d38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	2101      	movs	r1, #1
 8008d40:	f7fb fd25 	bl	800478e <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8008d44:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8008d48:	2202      	movs	r2, #2
 8008d4a:	2181      	movs	r1, #129	; 0x81
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	f7fb fd1e 	bl	800478e <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 8008d52:	f242 006c 	movw	r0, #8300	; 0x206c
 8008d56:	f002 fc41 	bl	800b5dc <malloc>
 8008d5a:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8008d5e:	b158      	cbz	r0, 8008d78 <USBD_MSC_Init+0x48>
    MSC_BOT_Init(pdev); 
 8008d60:	4620      	mov	r0, r4
 8008d62:	f000 f8be 	bl	8008ee2 <MSC_BOT_Init>
    ret = 0;
 8008d66:	2000      	movs	r0, #0
 8008d68:	bd10      	pop	{r4, pc}
    USBD_LL_OpenEP(pdev,
 8008d6a:	2340      	movs	r3, #64	; 0x40
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	2101      	movs	r1, #1
 8008d70:	f7fb fd0d 	bl	800478e <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8008d74:	2340      	movs	r3, #64	; 0x40
 8008d76:	e7e7      	b.n	8008d48 <USBD_MSC_Init+0x18>
    ret = 1; 
 8008d78:	2001      	movs	r0, #1
}
 8008d7a:	bd10      	pop	{r4, pc}

08008d7c <USBD_MSC_DeInit>:
{
 8008d7c:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8008d7e:	2101      	movs	r1, #1
{
 8008d80:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8008d82:	f7fb fd0e 	bl	80047a2 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8008d86:	2181      	movs	r1, #129	; 0x81
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f7fb fd0a 	bl	80047a2 <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f000 f8d6 	bl	8008f40 <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 8008d94:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8008d98:	b120      	cbz	r0, 8008da4 <USBD_MSC_DeInit+0x28>
    USBD_free(pdev->pClassData);
 8008d9a:	f002 fc27 	bl	800b5ec <free>
    pdev->pClassData  = NULL; 
 8008d9e:	2300      	movs	r3, #0
 8008da0:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8008da4:	2000      	movs	r0, #0
 8008da6:	bd10      	pop	{r4, pc}

08008da8 <USBD_MSC_Setup>:
{
 8008da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dac:	780b      	ldrb	r3, [r1, #0]
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8008dae:	f8d0 8218 	ldr.w	r8, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008db2:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 8008db6:	4606      	mov	r6, r0
 8008db8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dba:	d02d      	beq.n	8008e18 <USBD_MSC_Setup+0x70>
 8008dbc:	2c20      	cmp	r4, #32
 8008dbe:	d14a      	bne.n	8008e56 <USBD_MSC_Setup+0xae>
    switch (req->bRequest)
 8008dc0:	784a      	ldrb	r2, [r1, #1]
 8008dc2:	2afe      	cmp	r2, #254	; 0xfe
 8008dc4:	d005      	beq.n	8008dd2 <USBD_MSC_Setup+0x2a>
 8008dc6:	2aff      	cmp	r2, #255	; 0xff
 8008dc8:	d019      	beq.n	8008dfe <USBD_MSC_Setup+0x56>
       USBD_CtlError(pdev , req);
 8008dca:	f000 fef2 	bl	8009bb2 <USBD_CtlError>
       return USBD_FAIL; 
 8008dce:	2402      	movs	r4, #2
 8008dd0:	e01f      	b.n	8008e12 <USBD_MSC_Setup+0x6a>
      if((req->wValue  == 0) && 
 8008dd2:	884c      	ldrh	r4, [r1, #2]
 8008dd4:	b984      	cbnz	r4, 8008df8 <USBD_MSC_Setup+0x50>
 8008dd6:	88cf      	ldrh	r7, [r1, #6]
 8008dd8:	2f01      	cmp	r7, #1
 8008dda:	d10d      	bne.n	8008df8 <USBD_MSC_Setup+0x50>
         (req->wLength == 1) &&
 8008ddc:	061a      	lsls	r2, r3, #24
 8008dde:	d50b      	bpl.n	8008df8 <USBD_MSC_Setup+0x50>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8008de0:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8008de4:	699b      	ldr	r3, [r3, #24]
 8008de6:	4798      	blx	r3
        USBD_CtlSendData (pdev,
 8008de8:	463a      	mov	r2, r7
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8008dea:	f8c8 0000 	str.w	r0, [r8]
        USBD_CtlSendData (pdev,
 8008dee:	4641      	mov	r1, r8
 8008df0:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8008df2:	f000 ff05 	bl	8009c00 <USBD_CtlSendData>
      break;
 8008df6:	e00c      	b.n	8008e12 <USBD_MSC_Setup+0x6a>
         USBD_CtlError(pdev , req);
 8008df8:	4629      	mov	r1, r5
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	e7e5      	b.n	8008dca <USBD_MSC_Setup+0x22>
      if((req->wValue  == 0) && 
 8008dfe:	884a      	ldrh	r2, [r1, #2]
 8008e00:	2a00      	cmp	r2, #0
 8008e02:	d1f9      	bne.n	8008df8 <USBD_MSC_Setup+0x50>
 8008e04:	88cc      	ldrh	r4, [r1, #6]
 8008e06:	2c00      	cmp	r4, #0
 8008e08:	d1f6      	bne.n	8008df8 <USBD_MSC_Setup+0x50>
         (req->wLength == 0) &&
 8008e0a:	061b      	lsls	r3, r3, #24
 8008e0c:	d4f4      	bmi.n	8008df8 <USBD_MSC_Setup+0x50>
         MSC_BOT_Reset(pdev);
 8008e0e:	f000 f88b 	bl	8008f28 <MSC_BOT_Reset>
}
 8008e12:	4620      	mov	r0, r4
 8008e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8008e18:	784f      	ldrb	r7, [r1, #1]
 8008e1a:	2f0a      	cmp	r7, #10
 8008e1c:	d01d      	beq.n	8008e5a <USBD_MSC_Setup+0xb2>
 8008e1e:	2f0b      	cmp	r7, #11
 8008e20:	d01f      	beq.n	8008e62 <USBD_MSC_Setup+0xba>
 8008e22:	2f01      	cmp	r7, #1
 8008e24:	d1f5      	bne.n	8008e12 <USBD_MSC_Setup+0x6a>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8008e26:	7909      	ldrb	r1, [r1, #4]
 8008e28:	f7fb fcc2 	bl	80047b0 <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8008e2c:	7929      	ldrb	r1, [r5, #4]
 8008e2e:	4630      	mov	r0, r6
 8008e30:	f7fb fcb7 	bl	80047a2 <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 8008e34:	f995 3004 	ldrsb.w	r3, [r5, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	7c33      	ldrb	r3, [r6, #16]
 8008e3c:	da17      	bge.n	8008e6e <USBD_MSC_Setup+0xc6>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008e3e:	b9a3      	cbnz	r3, 8008e6a <USBD_MSC_Setup+0xc2>
          USBD_LL_OpenEP(pdev,
 8008e40:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8008e44:	2202      	movs	r2, #2
 8008e46:	2181      	movs	r1, #129	; 0x81
          USBD_LL_OpenEP(pdev,
 8008e48:	4630      	mov	r0, r6
 8008e4a:	f7fb fca0 	bl	800478e <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8008e4e:	7929      	ldrb	r1, [r5, #4]
 8008e50:	4630      	mov	r0, r6
 8008e52:	f000 f931 	bl	80090b8 <MSC_BOT_CplClrFeature>
  return 0;
 8008e56:	2400      	movs	r4, #0
 8008e58:	e7db      	b.n	8008e12 <USBD_MSC_Setup+0x6a>
      USBD_CtlSendData (pdev,
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f108 0104 	add.w	r1, r8, #4
 8008e60:	e7c7      	b.n	8008df2 <USBD_MSC_Setup+0x4a>
      hmsc->interface = (uint8_t)(req->wValue);
 8008e62:	788b      	ldrb	r3, [r1, #2]
 8008e64:	f8c8 3004 	str.w	r3, [r8, #4]
      break;
 8008e68:	e7d3      	b.n	8008e12 <USBD_MSC_Setup+0x6a>
          USBD_LL_OpenEP(pdev,
 8008e6a:	2340      	movs	r3, #64	; 0x40
 8008e6c:	e7ea      	b.n	8008e44 <USBD_MSC_Setup+0x9c>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008e6e:	b923      	cbnz	r3, 8008e7a <USBD_MSC_Setup+0xd2>
          USBD_LL_OpenEP(pdev,
 8008e70:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8008e74:	2202      	movs	r2, #2
 8008e76:	4639      	mov	r1, r7
 8008e78:	e7e6      	b.n	8008e48 <USBD_MSC_Setup+0xa0>
 8008e7a:	2340      	movs	r3, #64	; 0x40
 8008e7c:	e7fa      	b.n	8008e74 <USBD_MSC_Setup+0xcc>

08008e7e <USBD_MSC_DataIn>:
{
 8008e7e:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8008e80:	f000 f882 	bl	8008f88 <MSC_BOT_DataIn>
}
 8008e84:	2000      	movs	r0, #0
 8008e86:	bd08      	pop	{r3, pc}

08008e88 <USBD_MSC_DataOut>:
{
 8008e88:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 8008e8a:	f000 f89b 	bl	8008fc4 <MSC_BOT_DataOut>
}
 8008e8e:	2000      	movs	r0, #0
 8008e90:	bd08      	pop	{r3, pc}

08008e92 <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8008e92:	b109      	cbz	r1, 8008e98 <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData= fops;
 8008e94:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
  }
  return 0;
}
 8008e98:	2000      	movs	r0, #0
 8008e9a:	4770      	bx	lr

08008e9c <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8008e9c:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  if ((hmsc->cbw.bmFlags == 0) && 
 8008e9e:	f242 0318 	movw	r3, #8216	; 0x2018
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008ea2:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0) && 
 8008ea6:	5ce3      	ldrb	r3, [r4, r3]
{
 8008ea8:	4605      	mov	r5, r0
  if ((hmsc->cbw.bmFlags == 0) && 
 8008eaa:	b943      	cbnz	r3, 8008ebe <MSC_BOT_Abort+0x22>
      (hmsc->cbw.dDataLength != 0) &&
 8008eac:	f242 0314 	movw	r3, #8212	; 0x2014
  if ((hmsc->cbw.bmFlags == 0) && 
 8008eb0:	58e3      	ldr	r3, [r4, r3]
 8008eb2:	b123      	cbz	r3, 8008ebe <MSC_BOT_Abort+0x22>
      (hmsc->cbw.dDataLength != 0) &&
 8008eb4:	7a63      	ldrb	r3, [r4, #9]
 8008eb6:	b913      	cbnz	r3, 8008ebe <MSC_BOT_Abort+0x22>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8008eb8:	2101      	movs	r1, #1
 8008eba:	f7fb fc80 	bl	80047be <USBD_LL_StallEP>
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8008ebe:	2181      	movs	r1, #129	; 0x81
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	f7fb fc7c 	bl	80047be <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8008ec6:	7a63      	ldrb	r3, [r4, #9]
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d109      	bne.n	8008ee0 <MSC_BOT_Abort+0x44>
  {
    USBD_LL_PrepareReceive (pdev,
 8008ecc:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	231f      	movs	r3, #31
 8008ed4:	320c      	adds	r2, #12
 8008ed6:	2101      	movs	r1, #1
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
                      USBD_BOT_CBW_LENGTH);    
  }
}
 8008ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    USBD_LL_PrepareReceive (pdev,
 8008edc:	f7fb bc9e 	b.w	800481c <USBD_LL_PrepareReceive>
 8008ee0:	bd70      	pop	{r4, r5, r6, pc}

08008ee2 <MSC_BOT_Init>:
{
 8008ee2:	b570      	push	{r4, r5, r6, lr}
  hmsc->scsi_sense_tail = 0;
 8008ee4:	f242 035d 	movw	r3, #8285	; 0x205d
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8008ee8:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
{
 8008eec:	4604      	mov	r4, r0
  hmsc->bot_state  = USBD_BOT_IDLE;
 8008eee:	2000      	movs	r0, #0
 8008ef0:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8008ef2:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0;
 8008ef4:	54e8      	strb	r0, [r5, r3]
  hmsc->scsi_sense_head = 0;
 8008ef6:	f242 035c 	movw	r3, #8284	; 0x205c
 8008efa:	54e8      	strb	r0, [r5, r3]
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 8008efc:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8008f04:	2101      	movs	r1, #1
 8008f06:	4620      	mov	r0, r4
 8008f08:	f7fb fc52 	bl	80047b0 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8008f0c:	2181      	movs	r1, #129	; 0x81
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f7fb fc4e 	bl	80047b0 <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev,
 8008f14:	f505 5200 	add.w	r2, r5, #8192	; 0x2000
 8008f18:	4620      	mov	r0, r4
 8008f1a:	231f      	movs	r3, #31
 8008f1c:	320c      	adds	r2, #12
 8008f1e:	2101      	movs	r1, #1
}
 8008f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 8008f24:	f7fb bc7a 	b.w	800481c <USBD_LL_PrepareReceive>

08008f28 <MSC_BOT_Reset>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8008f28:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8008f2c:	2300      	movs	r3, #0
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8008f2e:	2101      	movs	r1, #1
  hmsc->bot_state  = USBD_BOT_IDLE;
 8008f30:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8008f32:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev,
 8008f34:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8008f38:	231f      	movs	r3, #31
 8008f3a:	320c      	adds	r2, #12
 8008f3c:	f7fb bc6e 	b.w	800481c <USBD_LL_PrepareReceive>

08008f40 <MSC_BOT_DeInit>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 8008f40:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8008f44:	2200      	movs	r2, #0
 8008f46:	721a      	strb	r2, [r3, #8]
 8008f48:	4770      	bx	lr
	...

08008f4c <MSC_BOT_SendCSW>:
{
 8008f4c:	b570      	push	{r4, r5, r6, lr}
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8008f4e:	f242 022c 	movw	r2, #8236	; 0x202c
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008f52:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8008f56:	4b0b      	ldr	r3, [pc, #44]	; (8008f84 <MSC_BOT_SendCSW+0x38>)
 8008f58:	50a3      	str	r3, [r4, r2]
  hmsc->csw.bStatus = CSW_Status;
 8008f5a:	f242 0338 	movw	r3, #8248	; 0x2038
  USBD_LL_Transmit (pdev, 
 8008f5e:	4422      	add	r2, r4
  hmsc->csw.bStatus = CSW_Status;
 8008f60:	54e1      	strb	r1, [r4, r3]
  hmsc->bot_state = USBD_BOT_IDLE;
 8008f62:	2300      	movs	r3, #0
 8008f64:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, 
 8008f66:	2181      	movs	r1, #129	; 0x81
 8008f68:	230d      	movs	r3, #13
{
 8008f6a:	4605      	mov	r5, r0
  USBD_LL_Transmit (pdev, 
 8008f6c:	f7fb fc4f 	bl	800480e <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev,
 8008f70:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8008f74:	4628      	mov	r0, r5
 8008f76:	231f      	movs	r3, #31
 8008f78:	320c      	adds	r2, #12
 8008f7a:	2101      	movs	r1, #1
}
 8008f7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 8008f80:	f7fb bc4c 	b.w	800481c <USBD_LL_PrepareReceive>
 8008f84:	53425355 	.word	0x53425355

08008f88 <MSC_BOT_DataIn>:
{
 8008f88:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8008f8a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8008f8e:	7a1a      	ldrb	r2, [r3, #8]
 8008f90:	2a02      	cmp	r2, #2
{
 8008f92:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 8008f94:	d003      	beq.n	8008f9e <MSC_BOT_DataIn+0x16>
 8008f96:	d314      	bcc.n	8008fc2 <MSC_BOT_DataIn+0x3a>
 8008f98:	2a04      	cmp	r2, #4
 8008f9a:	d910      	bls.n	8008fbe <MSC_BOT_DataIn+0x36>
 8008f9c:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 8008f9e:	f242 0119 	movw	r1, #8217	; 0x2019
 8008fa2:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8008fa6:	321b      	adds	r2, #27
 8008fa8:	5c59      	ldrb	r1, [r3, r1]
 8008faa:	f000 f8b3 	bl	8009114 <SCSI_ProcessCmd>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	da07      	bge.n	8008fc2 <MSC_BOT_DataIn+0x3a>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8008fb2:	2101      	movs	r1, #1
 8008fb4:	4620      	mov	r0, r4
}
 8008fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8008fba:	f7ff bfc7 	b.w	8008f4c <MSC_BOT_SendCSW>
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	e7f9      	b.n	8008fb6 <MSC_BOT_DataIn+0x2e>
 8008fc2:	bd10      	pop	{r4, pc}

08008fc4 <MSC_BOT_DataOut>:
{
 8008fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8008fc8:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8008fcc:	7a26      	ldrb	r6, [r4, #8]
{
 8008fce:	4605      	mov	r5, r0
  switch (hmsc->bot_state)
 8008fd0:	b11e      	cbz	r6, 8008fda <MSC_BOT_DataOut+0x16>
 8008fd2:	2e01      	cmp	r6, #1
 8008fd4:	d062      	beq.n	800909c <MSC_BOT_DataOut+0xd8>
 8008fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8008fda:	f242 0310 	movw	r3, #8208	; 0x2010
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8008fde:	f242 0814 	movw	r8, #8212	; 0x2014
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8008fe2:	58e2      	ldr	r2, [r4, r3]
 8008fe4:	f242 0330 	movw	r3, #8240	; 0x2030
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8008fe8:	f242 0734 	movw	r7, #8244	; 0x2034
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8008fec:	50e2      	str	r2, [r4, r3]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8008fee:	f854 3008 	ldr.w	r3, [r4, r8]
 8008ff2:	51e3      	str	r3, [r4, r7]
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	f7fb fc18 	bl	800482a <USBD_LL_GetRxDataSize>
 8008ffa:	281f      	cmp	r0, #31
 8008ffc:	d110      	bne.n	8009020 <MSC_BOT_DataOut+0x5c>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8008ffe:	f242 030c 	movw	r3, #8204	; 0x200c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8009002:	58e2      	ldr	r2, [r4, r3]
 8009004:	4b2b      	ldr	r3, [pc, #172]	; (80090b4 <MSC_BOT_DataOut+0xf0>)
 8009006:	429a      	cmp	r2, r3
 8009008:	d10a      	bne.n	8009020 <MSC_BOT_DataOut+0x5c>
        (hmsc->cbw.bLUN > 1) || 
 800900a:	f242 0319 	movw	r3, #8217	; 0x2019
 800900e:	5ce1      	ldrb	r1, [r4, r3]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8009010:	2901      	cmp	r1, #1
 8009012:	d805      	bhi.n	8009020 <MSC_BOT_DataOut+0x5c>
          (hmsc->cbw.bCBLength < 1) || 
 8009014:	f242 031a 	movw	r3, #8218	; 0x201a
        (hmsc->cbw.bLUN > 1) || 
 8009018:	5ce3      	ldrb	r3, [r4, r3]
 800901a:	3b01      	subs	r3, #1
 800901c:	2b0f      	cmp	r3, #15
 800901e:	d90e      	bls.n	800903e <MSC_BOT_DataOut+0x7a>
    SCSI_SenseCode(pdev,
 8009020:	f242 0119 	movw	r1, #8217	; 0x2019
 8009024:	2320      	movs	r3, #32
 8009026:	2205      	movs	r2, #5
 8009028:	5c61      	ldrb	r1, [r4, r1]
 800902a:	4628      	mov	r0, r5
 800902c:	f000 fac2 	bl	80095b4 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 8009030:	2302      	movs	r3, #2
 8009032:	7263      	strb	r3, [r4, #9]
        MSC_BOT_Abort(pdev);
 8009034:	4628      	mov	r0, r5
}
 8009036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MSC_BOT_Abort(pdev);
 800903a:	f7ff bf2f 	b.w	8008e9c <MSC_BOT_Abort>
    if(SCSI_ProcessCmd(pdev,
 800903e:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8009042:	321b      	adds	r2, #27
 8009044:	4628      	mov	r0, r5
 8009046:	f000 f865 	bl	8009114 <SCSI_ProcessCmd>
 800904a:	2800      	cmp	r0, #0
 800904c:	7a23      	ldrb	r3, [r4, #8]
 800904e:	da07      	bge.n	8009060 <MSC_BOT_DataOut+0x9c>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8009050:	2b05      	cmp	r3, #5
 8009052:	d1ef      	bne.n	8009034 <MSC_BOT_DataOut+0x70>
       MSC_BOT_SendCSW (pdev,
 8009054:	2101      	movs	r1, #1
        MSC_BOT_SendCSW (pdev,
 8009056:	4628      	mov	r0, r5
}
 8009058:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MSC_BOT_SendCSW (pdev,
 800905c:	f7ff bf76 	b.w	8008f4c <MSC_BOT_SendCSW>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 8009060:	3b01      	subs	r3, #1
 8009062:	2b02      	cmp	r3, #2
 8009064:	d924      	bls.n	80090b0 <MSC_BOT_DataOut+0xec>
      if (hmsc->bot_data_length > 0)
 8009066:	8961      	ldrh	r1, [r4, #10]
 8009068:	2900      	cmp	r1, #0
 800906a:	d0f4      	beq.n	8009056 <MSC_BOT_DataOut+0x92>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800906c:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
  len = MIN (hmsc->cbw.dDataLength, len);
 8009070:	f852 3008 	ldr.w	r3, [r2, r8]
 8009074:	4299      	cmp	r1, r3
 8009076:	bf28      	it	cs
 8009078:	4619      	movcs	r1, r3
  hmsc->csw.dDataResidue -= len;
 800907a:	59d3      	ldr	r3, [r2, r7]
 800907c:	1a5b      	subs	r3, r3, r1
 800907e:	51d3      	str	r3, [r2, r7]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8009080:	f242 0338 	movw	r3, #8248	; 0x2038
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8009084:	4628      	mov	r0, r5
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8009086:	54d6      	strb	r6, [r2, r3]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8009088:	2304      	movs	r3, #4
 800908a:	7213      	strb	r3, [r2, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 800908c:	b28b      	uxth	r3, r1
 800908e:	f104 020c 	add.w	r2, r4, #12
 8009092:	2181      	movs	r1, #129	; 0x81
}
 8009094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8009098:	f7fb bbb9 	b.w	800480e <USBD_LL_Transmit>
    if(SCSI_ProcessCmd(pdev,
 800909c:	f242 0319 	movw	r3, #8217	; 0x2019
 80090a0:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 80090a4:	321b      	adds	r2, #27
 80090a6:	5ce1      	ldrb	r1, [r4, r3]
 80090a8:	f000 f834 	bl	8009114 <SCSI_ProcessCmd>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	dbd1      	blt.n	8009054 <MSC_BOT_DataOut+0x90>
 80090b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b4:	43425355 	.word	0x43425355

080090b8 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80090b8:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80090ba:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 80090be:	7a63      	ldrb	r3, [r4, #9]
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d105      	bne.n	80090d0 <MSC_BOT_CplClrFeature+0x18>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80090c4:	2181      	movs	r1, #129	; 0x81
 80090c6:	f7fb fb7a 	bl	80047be <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 80090ca:	2300      	movs	r3, #0
 80090cc:	7263      	strb	r3, [r4, #9]
 80090ce:	bd10      	pop	{r4, pc}
  }
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80090d0:	060a      	lsls	r2, r1, #24
 80090d2:	d506      	bpl.n	80090e2 <MSC_BOT_CplClrFeature+0x2a>
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d004      	beq.n	80090e2 <MSC_BOT_CplClrFeature+0x2a>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 80090d8:	2101      	movs	r1, #1
  }
  
}
 80090da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 80090de:	f7ff bf35 	b.w	8008f4c <MSC_BOT_SendCSW>
 80090e2:	bd10      	pop	{r4, pc}

080090e4 <SCSI_SenseCode.constprop.8>:
* @param  sKey: Sense Key
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
 80090e4:	b570      	push	{r4, r5, r6, lr}
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80090e6:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80090ea:	f242 055d 	movw	r5, #8285	; 0x205d
 80090ee:	f242 063c 	movw	r6, #8252	; 0x203c
 80090f2:	5d43      	ldrb	r3, [r0, r5]
 80090f4:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
  hmsc->scsi_sense_tail++;
 80090f8:	3301      	adds	r3, #1
 80090fa:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80090fc:	55a1      	strb	r1, [r4, r6]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80090fe:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8009100:	f504 5401 	add.w	r4, r4, #8256	; 0x2040
 8009104:	ea4f 2202 	mov.w	r2, r2, lsl #8
  {
    hmsc->scsi_sense_tail = 0;
 8009108:	bf08      	it	eq
 800910a:	2300      	moveq	r3, #0
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800910c:	6022      	str	r2, [r4, #0]
    hmsc->scsi_sense_tail = 0;
 800910e:	5543      	strb	r3, [r0, r5]
 8009110:	bd70      	pop	{r4, r5, r6, pc}
	...

08009114 <SCSI_ProcessCmd>:
{
 8009114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (params[0])
 8009118:	7813      	ldrb	r3, [r2, #0]
 800911a:	2b1e      	cmp	r3, #30
{
 800911c:	4605      	mov	r5, r0
 800911e:	460c      	mov	r4, r1
 8009120:	4617      	mov	r7, r2
  switch (params[0])
 8009122:	d00f      	beq.n	8009144 <SCSI_ProcessCmd+0x30>
 8009124:	d813      	bhi.n	800914e <SCSI_ProcessCmd+0x3a>
 8009126:	2b12      	cmp	r3, #18
 8009128:	f000 80b4 	beq.w	8009294 <SCSI_ProcessCmd+0x180>
 800912c:	d805      	bhi.n	800913a <SCSI_ProcessCmd+0x26>
 800912e:	2b00      	cmp	r3, #0
 8009130:	d060      	beq.n	80091f4 <SCSI_ProcessCmd+0xe0>
 8009132:	2b03      	cmp	r3, #3
 8009134:	d07b      	beq.n	800922e <SCSI_ProcessCmd+0x11a>
    SCSI_SenseCode(pdev, 
 8009136:	2220      	movs	r2, #32
 8009138:	e14a      	b.n	80093d0 <SCSI_ProcessCmd+0x2bc>
  switch (params[0])
 800913a:	2b1a      	cmp	r3, #26
 800913c:	f000 80c8 	beq.w	80092d0 <SCSI_ProcessCmd+0x1bc>
 8009140:	2b1b      	cmp	r3, #27
 8009142:	d1f8      	bne.n	8009136 <SCSI_ProcessCmd+0x22>
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
  hmsc->bot_data_length = 0;
 8009144:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8009148:	2400      	movs	r4, #0
                            hmsc->scsi_blk_addr, 
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */      
  }
  hmsc->bot_data_length = 0;
 800914a:	815c      	strh	r4, [r3, #10]
 800914c:	e06b      	b.n	8009226 <SCSI_ProcessCmd+0x112>
  switch (params[0])
 800914e:	2b28      	cmp	r3, #40	; 0x28
 8009150:	f000 810b 	beq.w	800936a <SCSI_ProcessCmd+0x256>
 8009154:	d828      	bhi.n	80091a8 <SCSI_ProcessCmd+0x94>
 8009156:	2b23      	cmp	r3, #35	; 0x23
 8009158:	f000 80d8 	beq.w	800930c <SCSI_ProcessCmd+0x1f8>
 800915c:	2b25      	cmp	r3, #37	; 0x25
 800915e:	d1ea      	bne.n	8009136 <SCSI_ProcessCmd+0x22>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8009160:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8009164:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8009168:	f242 075e 	movw	r7, #8286	; 0x205e
 800916c:	f242 0860 	movw	r8, #8288	; 0x2060
 8009170:	4620      	mov	r0, r4
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	19f2      	adds	r2, r6, r7
 8009176:	eb06 0108 	add.w	r1, r6, r8
 800917a:	4798      	blx	r3
 800917c:	4604      	mov	r4, r0
 800917e:	2800      	cmp	r0, #0
 8009180:	f040 80d9 	bne.w	8009336 <SCSI_ProcessCmd+0x222>
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 8009184:	f856 3008 	ldr.w	r3, [r6, r8]
 8009188:	3b01      	subs	r3, #1
 800918a:	0e1a      	lsrs	r2, r3, #24
 800918c:	7332      	strb	r2, [r6, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 800918e:	0c1a      	lsrs	r2, r3, #16
 8009190:	7372      	strb	r2, [r6, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 8009192:	0a1a      	lsrs	r2, r3, #8
 8009194:	73b2      	strb	r2, [r6, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 8009196:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009198:	5bf3      	ldrh	r3, [r6, r7]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800919a:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800919c:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800919e:	7430      	strb	r0, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80091a0:	7470      	strb	r0, [r6, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80091a2:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data_length = 8;
 80091a4:	2308      	movs	r3, #8
 80091a6:	e0de      	b.n	8009366 <SCSI_ProcessCmd+0x252>
  switch (params[0])
 80091a8:	2b2f      	cmp	r3, #47	; 0x2f
 80091aa:	f000 81ac 	beq.w	8009506 <SCSI_ProcessCmd+0x3f2>
 80091ae:	2b5a      	cmp	r3, #90	; 0x5a
 80091b0:	f000 809d 	beq.w	80092ee <SCSI_ProcessCmd+0x1da>
 80091b4:	2b2a      	cmp	r3, #42	; 0x2a
 80091b6:	d1be      	bne.n	8009136 <SCSI_ProcessCmd+0x22>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 80091b8:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80091bc:	7a33      	ldrb	r3, [r6, #8]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f040 815e 	bne.w	8009480 <SCSI_ProcessCmd+0x36c>
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 80091c4:	f242 0318 	movw	r3, #8216	; 0x2018
 80091c8:	56f3      	ldrsb	r3, [r6, r3]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	dbb3      	blt.n	8009136 <SCSI_ProcessCmd+0x22>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80091ce:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80091d2:	4608      	mov	r0, r1
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	4798      	blx	r3
 80091d8:	2800      	cmp	r0, #0
 80091da:	f040 80ac 	bne.w	8009336 <SCSI_ProcessCmd+0x222>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 80091de:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80091e2:	4620      	mov	r0, r4
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	4798      	blx	r3
 80091e8:	4604      	mov	r4, r0
 80091ea:	2800      	cmp	r0, #0
 80091ec:	f000 810d 	beq.w	800940a <SCSI_ProcessCmd+0x2f6>
      SCSI_SenseCode(pdev,
 80091f0:	2227      	movs	r2, #39	; 0x27
 80091f2:	e0a1      	b.n	8009338 <SCSI_ProcessCmd+0x224>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 80091f4:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if (hmsc->cbw.dDataLength != 0)
 80091f8:	f242 0314 	movw	r3, #8212	; 0x2014
 80091fc:	58f3      	ldr	r3, [r6, r3]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d199      	bne.n	8009136 <SCSI_ProcessCmd+0x22>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8009202:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8009206:	4608      	mov	r0, r1
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	4798      	blx	r3
 800920c:	4604      	mov	r4, r0
 800920e:	b148      	cbz	r0, 8009224 <SCSI_ProcessCmd+0x110>
    SCSI_SenseCode(pdev,
 8009210:	223a      	movs	r2, #58	; 0x3a
 8009212:	2102      	movs	r1, #2
 8009214:	4628      	mov	r0, r5
 8009216:	f7ff ff65 	bl	80090e4 <SCSI_SenseCode.constprop.8>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800921a:	2305      	movs	r3, #5
 800921c:	7233      	strb	r3, [r6, #8]
    return -1;
 800921e:	f04f 34ff 	mov.w	r4, #4294967295
 8009222:	e000      	b.n	8009226 <SCSI_ProcessCmd+0x112>
  hmsc->bot_data_length = 0;
 8009224:	8170      	strh	r0, [r6, #10]
}
 8009226:	4620      	mov	r0, r4
 8009228:	b003      	add	sp, #12
 800922a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800922e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
    hmsc->bot_data[i] = 0;
 8009232:	2400      	movs	r4, #0
 8009234:	f103 020c 	add.w	r2, r3, #12
 8009238:	f103 011e 	add.w	r1, r3, #30
 800923c:	f802 4b01 	strb.w	r4, [r2], #1
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 8009240:	428a      	cmp	r2, r1
 8009242:	d1fb      	bne.n	800923c <SCSI_ProcessCmd+0x128>
  hmsc->bot_data[0]	= 0x70;		
 8009244:	2270      	movs	r2, #112	; 0x70
 8009246:	731a      	strb	r2, [r3, #12]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8009248:	f242 005c 	movw	r0, #8284	; 0x205c
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 800924c:	220c      	movs	r2, #12
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 800924e:	f242 015d 	movw	r1, #8285	; 0x205d
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8009252:	74da      	strb	r2, [r3, #19]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8009254:	5c1a      	ldrb	r2, [r3, r0]
 8009256:	5c59      	ldrb	r1, [r3, r1]
 8009258:	4291      	cmp	r1, r2
 800925a:	d013      	beq.n	8009284 <SCSI_ProcessCmd+0x170>
 800925c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 8009260:	f242 053c 	movw	r5, #8252	; 0x203c
    hmsc->scsi_sense_head++;
 8009264:	3201      	adds	r2, #1
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 8009266:	5d4d      	ldrb	r5, [r1, r5]
 8009268:	739d      	strb	r5, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 800926a:	f242 0541 	movw	r5, #8257	; 0x2041
    hmsc->scsi_sense_head++;
 800926e:	b2d2      	uxtb	r2, r2
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 8009270:	5d4d      	ldrb	r5, [r1, r5]
 8009272:	761d      	strb	r5, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 8009274:	f501 5101 	add.w	r1, r1, #8256	; 0x2040
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8009278:	2a04      	cmp	r2, #4
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 800927a:	7809      	ldrb	r1, [r1, #0]
 800927c:	7659      	strb	r1, [r3, #25]
    hmsc->scsi_sense_head++;
 800927e:	bf14      	ite	ne
 8009280:	541a      	strbne	r2, [r3, r0]
      hmsc->scsi_sense_head = 0;
 8009282:	541c      	strbeq	r4, [r3, r0]
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 8009284:	2212      	movs	r2, #18
 8009286:	815a      	strh	r2, [r3, #10]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8009288:	793a      	ldrb	r2, [r7, #4]
 800928a:	2a12      	cmp	r2, #18
    hmsc->bot_data_length = params[4];
 800928c:	bf98      	it	ls
 800928e:	815a      	strhls	r2, [r3, #10]
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
  }
  
  return 0;
 8009290:	2400      	movs	r4, #0
 8009292:	e7c8      	b.n	8009226 <SCSI_ProcessCmd+0x112>
  if (params[1] & 0x01)/*Evpd is set*/
 8009294:	787b      	ldrb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8009296:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  if (params[1] & 0x01)/*Evpd is set*/
 800929a:	07db      	lsls	r3, r3, #31
 800929c:	d415      	bmi.n	80092ca <SCSI_ProcessCmd+0x1b6>
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800929e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
 80092a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80092ac:	7939      	ldrb	r1, [r7, #4]
    len = pPage[4] + 5;
 80092ae:	7923      	ldrb	r3, [r4, #4]
 80092b0:	3305      	adds	r3, #5
 80092b2:	428b      	cmp	r3, r1
 80092b4:	bf28      	it	cs
 80092b6:	460b      	movcs	r3, r1
  hmsc->bot_data_length = len;
 80092b8:	8153      	strh	r3, [r2, #10]
  while (len) 
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d0e8      	beq.n	8009290 <SCSI_ProcessCmd+0x17c>
    len--;
 80092be:	3b01      	subs	r3, #1
 80092c0:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pPage[len];
 80092c2:	18d1      	adds	r1, r2, r3
 80092c4:	5ce0      	ldrb	r0, [r4, r3]
 80092c6:	7308      	strb	r0, [r1, #12]
 80092c8:	e7f7      	b.n	80092ba <SCSI_ProcessCmd+0x1a6>
    len = LENGTH_INQUIRY_PAGE00;
 80092ca:	2307      	movs	r3, #7
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 80092cc:	4cb6      	ldr	r4, [pc, #728]	; (80095a8 <SCSI_ProcessCmd+0x494>)
 80092ce:	e7f3      	b.n	80092b8 <SCSI_ProcessCmd+0x1a4>
 80092d0:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 80092d4:	49b5      	ldr	r1, [pc, #724]	; (80095ac <SCSI_ProcessCmd+0x498>)
  hmsc->bot_data_length = len;
 80092d6:	2208      	movs	r2, #8
 80092d8:	815a      	strh	r2, [r3, #10]
 80092da:	f103 0213 	add.w	r2, r3, #19
 80092de:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 80092e0:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 80092e4:	f802 0901 	strb.w	r0, [r2], #-1
  while (len) 
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d1f9      	bne.n	80092e0 <SCSI_ProcessCmd+0x1cc>
 80092ec:	e7d0      	b.n	8009290 <SCSI_ProcessCmd+0x17c>
 80092ee:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 80092f2:	49af      	ldr	r1, [pc, #700]	; (80095b0 <SCSI_ProcessCmd+0x49c>)
  hmsc->bot_data_length = len;
 80092f4:	2208      	movs	r2, #8
 80092f6:	815a      	strh	r2, [r3, #10]
 80092f8:	f103 0213 	add.w	r2, r3, #19
 80092fc:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80092fe:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8009302:	f802 0901 	strb.w	r0, [r2], #-1
  while (len) 
 8009306:	429a      	cmp	r2, r3
 8009308:	d1f9      	bne.n	80092fe <SCSI_ProcessCmd+0x1ea>
 800930a:	e7c1      	b.n	8009290 <SCSI_ProcessCmd+0x17c>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800930c:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
    hmsc->bot_data[i] = 0;
 8009310:	2100      	movs	r1, #0
 8009312:	f106 030c 	add.w	r3, r6, #12
 8009316:	f106 0218 	add.w	r2, r6, #24
 800931a:	f803 1b01 	strb.w	r1, [r3], #1
  for(i=0 ; i < 12 ; i++) 
 800931e:	429a      	cmp	r2, r3
 8009320:	d1fb      	bne.n	800931a <SCSI_ProcessCmd+0x206>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 8009322:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8009326:	4620      	mov	r0, r4
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	f10d 0202 	add.w	r2, sp, #2
 800932e:	a901      	add	r1, sp, #4
 8009330:	4798      	blx	r3
 8009332:	4604      	mov	r4, r0
 8009334:	b118      	cbz	r0, 800933e <SCSI_ProcessCmd+0x22a>
    SCSI_SenseCode(pdev,
 8009336:	223a      	movs	r2, #58	; 0x3a
      SCSI_SenseCode(pdev,
 8009338:	2102      	movs	r1, #2
    SCSI_SenseCode(pdev, 
 800933a:	4628      	mov	r0, r5
 800933c:	e0eb      	b.n	8009516 <SCSI_ProcessCmd+0x402>
    hmsc->bot_data[3] = 0x08;
 800933e:	2308      	movs	r3, #8
 8009340:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8009342:	9b01      	ldr	r3, [sp, #4]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8009344:	7570      	strb	r0, [r6, #21]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8009346:	3b01      	subs	r3, #1
 8009348:	0e1a      	lsrs	r2, r3, #24
 800934a:	7432      	strb	r2, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 800934c:	0c1a      	lsrs	r2, r3, #16
 800934e:	7472      	strb	r2, [r6, #17]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 8009350:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 8009352:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[8] = 0x02;
 8009354:	2302      	movs	r3, #2
 8009356:	7533      	strb	r3, [r6, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8009358:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 800935c:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800935e:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8009360:	75f3      	strb	r3, [r6, #23]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8009362:	75b2      	strb	r2, [r6, #22]
    hmsc->bot_data_length = 12;
 8009364:	230c      	movs	r3, #12
    hmsc->bot_data_length = 8;
 8009366:	8173      	strh	r3, [r6, #10]
 8009368:	e75d      	b.n	8009226 <SCSI_ProcessCmd+0x112>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 800936a:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 800936e:	7a33      	ldrb	r3, [r6, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	f040 80f1 	bne.w	8009558 <SCSI_ProcessCmd+0x444>
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 8009376:	f242 0318 	movw	r3, #8216	; 0x2018
 800937a:	56f3      	ldrsb	r3, [r6, r3]
 800937c:	2b00      	cmp	r3, #0
 800937e:	f6bf aeda 	bge.w	8009136 <SCSI_ProcessCmd+0x22>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8009382:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8009386:	4608      	mov	r0, r1
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	4798      	blx	r3
 800938c:	2800      	cmp	r0, #0
 800938e:	d1d2      	bne.n	8009336 <SCSI_ProcessCmd+0x222>
      (params[3] << 16) | \
 8009390:	78fb      	ldrb	r3, [r7, #3]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8009392:	78ba      	ldrb	r2, [r7, #2]
      (params[3] << 16) | \
 8009394:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8009396:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
          params[5];
 800939a:	797a      	ldrb	r2, [r7, #5]
        (params[4] <<  8) | \
 800939c:	4313      	orrs	r3, r2
 800939e:	793a      	ldrb	r2, [r7, #4]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80093a0:	f242 0e64 	movw	lr, #8292	; 0x2064
        (params[4] <<  8) | \
 80093a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80093a8:	f846 300e 	str.w	r3, [r6, lr]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80093ac:	79fa      	ldrb	r2, [r7, #7]
      params[8];  
 80093ae:	7a39      	ldrb	r1, [r7, #8]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80093b0:	f242 0c60 	movw	ip, #8288	; 0x2060
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80093b4:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80093b8:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 80093bc:	f852 200c 	ldr.w	r2, [r2, ip]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80093c0:	f242 0068 	movw	r0, #8296	; 0x2068
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80093c4:	185f      	adds	r7, r3, r1
 80093c6:	4297      	cmp	r7, r2
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80093c8:	5031      	str	r1, [r6, r0]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80093ca:	f240 80b5 	bls.w	8009538 <SCSI_ProcessCmd+0x424>
    SCSI_SenseCode(pdev,
 80093ce:	2221      	movs	r2, #33	; 0x21
    SCSI_SenseCode(pdev, 
 80093d0:	2105      	movs	r1, #5
 80093d2:	e7b2      	b.n	800933a <SCSI_ProcessCmd+0x226>
  USBD_LL_Transmit (pdev, 
 80093d4:	b2bb      	uxth	r3, r7
 80093d6:	4652      	mov	r2, sl
 80093d8:	2181      	movs	r1, #129	; 0x81
 80093da:	4628      	mov	r0, r5
 80093dc:	f7fb fa17 	bl	800480e <USBD_LL_Transmit>
  hmsc->scsi_blk_addr   += len; 
 80093e0:	f856 3009 	ldr.w	r3, [r6, r9]
  hmsc->scsi_blk_len    -= len;  
 80093e4:	f856 4008 	ldr.w	r4, [r6, r8]
  hmsc->csw.dDataResidue -= len;
 80093e8:	f242 0234 	movw	r2, #8244	; 0x2034
  hmsc->scsi_blk_addr   += len; 
 80093ec:	443b      	add	r3, r7
 80093ee:	f846 3009 	str.w	r3, [r6, r9]
  hmsc->csw.dDataResidue -= len;
 80093f2:	58b3      	ldr	r3, [r6, r2]
  hmsc->scsi_blk_len    -= len;  
 80093f4:	1be4      	subs	r4, r4, r7
  hmsc->csw.dDataResidue -= len;
 80093f6:	1bdf      	subs	r7, r3, r7
  hmsc->scsi_blk_len    -= len;  
 80093f8:	f846 4008 	str.w	r4, [r6, r8]
  hmsc->csw.dDataResidue -= len;
 80093fc:	50b7      	str	r7, [r6, r2]
  if (hmsc->scsi_blk_len == 0)
 80093fe:	2c00      	cmp	r4, #0
 8009400:	f47f af46 	bne.w	8009290 <SCSI_ProcessCmd+0x17c>
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8009404:	2303      	movs	r3, #3
 8009406:	7233      	strb	r3, [r6, #8]
 8009408:	e70d      	b.n	8009226 <SCSI_ProcessCmd+0x112>
      (params[3] << 16) | \
 800940a:	78fa      	ldrb	r2, [r7, #3]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800940c:	78bb      	ldrb	r3, [r7, #2]
      (params[3] << 16) | \
 800940e:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8009410:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
          params[5];
 8009414:	797b      	ldrb	r3, [r7, #5]
        (params[4] <<  8) | \
 8009416:	431a      	orrs	r2, r3
 8009418:	793b      	ldrb	r3, [r7, #4]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800941a:	f242 0e64 	movw	lr, #8292	; 0x2064
        (params[4] <<  8) | \
 800941e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8009422:	f846 200e 	str.w	r2, [r6, lr]
      params[8];  
 8009426:	7a3b      	ldrb	r3, [r7, #8]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8009428:	79f9      	ldrb	r1, [r7, #7]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 800942a:	f242 0c60 	movw	ip, #8288	; 0x2060
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 800942e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8009432:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8009436:	f853 300c 	ldr.w	r3, [r3, ip]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 800943a:	f242 0068 	movw	r0, #8296	; 0x2068
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 800943e:	1857      	adds	r7, r2, r1
 8009440:	429f      	cmp	r7, r3
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8009442:	5031      	str	r1, [r6, r0]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8009444:	d8c3      	bhi.n	80093ce <SCSI_ProcessCmd+0x2ba>
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8009446:	f242 035e 	movw	r3, #8286	; 0x205e
 800944a:	5af3      	ldrh	r3, [r6, r3]
 800944c:	435a      	muls	r2, r3
 800944e:	f846 200e 	str.w	r2, [r6, lr]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8009452:	f242 0214 	movw	r2, #8212	; 0x2014
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8009456:	434b      	muls	r3, r1
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8009458:	58b2      	ldr	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 800945a:	5033      	str	r3, [r6, r0]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 800945c:	4293      	cmp	r3, r2
 800945e:	f47f ae6a 	bne.w	8009136 <SCSI_ProcessCmd+0x22>
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 8009462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 8009466:	f04f 0101 	mov.w	r1, #1
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 800946a:	bf28      	it	cs
 800946c:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 8009470:	7231      	strb	r1, [r6, #8]
    USBD_LL_PrepareReceive (pdev,
 8009472:	b29b      	uxth	r3, r3
 8009474:	f106 020c 	add.w	r2, r6, #12
 8009478:	4628      	mov	r0, r5
 800947a:	f7fb f9cf 	bl	800481c <USBD_LL_PrepareReceive>
 800947e:	e6d2      	b.n	8009226 <SCSI_ProcessCmd+0x112>
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8009480:	f242 0968 	movw	r9, #8296	; 0x2068
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8009484:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8009488:	f856 7009 	ldr.w	r7, [r6, r9]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 800948c:	f8d0 b014 	ldr.w	fp, [r0, #20]
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8009490:	f242 035e 	movw	r3, #8286	; 0x205e
 8009494:	f242 0a64 	movw	sl, #8292	; 0x2064
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8009498:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
                              hmsc->bot_data, 
 800949c:	f106 080c 	add.w	r8, r6, #12
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80094a0:	bf28      	it	cs
 80094a2:	f44f 5700 	movcs.w	r7, #8192	; 0x2000
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 80094a6:	5af2      	ldrh	r2, [r6, r3]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 80094a8:	f856 100a 	ldr.w	r1, [r6, sl]
                              len / hmsc->scsi_blk_size) < 0)
 80094ac:	fbb7 f3f2 	udiv	r3, r7, r2
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 80094b0:	4620      	mov	r0, r4
 80094b2:	fbb1 f2f2 	udiv	r2, r1, r2
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	4641      	mov	r1, r8
 80094ba:	47d8      	blx	fp
 80094bc:	2800      	cmp	r0, #0
 80094be:	da01      	bge.n	80094c4 <SCSI_ProcessCmd+0x3b0>
    SCSI_SenseCode(pdev,
 80094c0:	2203      	movs	r2, #3
 80094c2:	e06e      	b.n	80095a2 <SCSI_ProcessCmd+0x48e>
  hmsc->scsi_blk_addr  += len; 
 80094c4:	f856 300a 	ldr.w	r3, [r6, sl]
  hmsc->csw.dDataResidue -= len;
 80094c8:	f242 0134 	movw	r1, #8244	; 0x2034
  hmsc->scsi_blk_addr  += len; 
 80094cc:	443b      	add	r3, r7
 80094ce:	f846 300a 	str.w	r3, [r6, sl]
  hmsc->csw.dDataResidue -= len;
 80094d2:	5872      	ldr	r2, [r6, r1]
  hmsc->scsi_blk_len   -= len; 
 80094d4:	f856 3009 	ldr.w	r3, [r6, r9]
 80094d8:	1bdb      	subs	r3, r3, r7
  hmsc->csw.dDataResidue -= len;
 80094da:	1bd7      	subs	r7, r2, r7
  hmsc->scsi_blk_len   -= len; 
 80094dc:	f846 3009 	str.w	r3, [r6, r9]
  hmsc->csw.dDataResidue -= len;
 80094e0:	5077      	str	r7, [r6, r1]
  if (hmsc->scsi_blk_len == 0)
 80094e2:	b923      	cbnz	r3, 80094ee <SCSI_ProcessCmd+0x3da>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 80094e4:	2100      	movs	r1, #0
 80094e6:	4628      	mov	r0, r5
 80094e8:	f7ff fd30 	bl	8008f4c <MSC_BOT_SendCSW>
 80094ec:	e6d0      	b.n	8009290 <SCSI_ProcessCmd+0x17c>
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 80094ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094f2:	bf28      	it	cs
 80094f4:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    USBD_LL_PrepareReceive (pdev,
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	4642      	mov	r2, r8
 80094fc:	2101      	movs	r1, #1
 80094fe:	4628      	mov	r0, r5
 8009500:	f7fb f98c 	bl	800481c <USBD_LL_PrepareReceive>
 8009504:	e6c4      	b.n	8009290 <SCSI_ProcessCmd+0x17c>
  if ((params[1]& 0x02) == 0x02) 
 8009506:	7854      	ldrb	r4, [r2, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8009508:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  if ((params[1]& 0x02) == 0x02) 
 800950c:	f014 0402 	ands.w	r4, r4, #2
 8009510:	d004      	beq.n	800951c <SCSI_ProcessCmd+0x408>
    SCSI_SenseCode (pdev,
 8009512:	2224      	movs	r2, #36	; 0x24
 8009514:	2105      	movs	r1, #5
    SCSI_SenseCode(pdev, 
 8009516:	f7ff fde5 	bl	80090e4 <SCSI_SenseCode.constprop.8>
 800951a:	e680      	b.n	800921e <SCSI_ProcessCmd+0x10a>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 800951c:	f242 0268 	movw	r2, #8296	; 0x2068
  if(SCSI_CheckAddressRange(pdev,
 8009520:	f242 0164 	movw	r1, #8292	; 0x2064
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8009524:	5a9a      	ldrh	r2, [r3, r2]
 8009526:	5859      	ldr	r1, [r3, r1]
 8009528:	440a      	add	r2, r1
 800952a:	f242 0160 	movw	r1, #8288	; 0x2060
 800952e:	5859      	ldr	r1, [r3, r1]
 8009530:	428a      	cmp	r2, r1
 8009532:	f67f ae0a 	bls.w	800914a <SCSI_ProcessCmd+0x36>
 8009536:	e74a      	b.n	80093ce <SCSI_ProcessCmd+0x2ba>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 8009538:	2202      	movs	r2, #2
 800953a:	7232      	strb	r2, [r6, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 800953c:	f242 025e 	movw	r2, #8286	; 0x205e
 8009540:	5ab2      	ldrh	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8009542:	4351      	muls	r1, r2
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8009544:	4353      	muls	r3, r2
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8009546:	f242 0214 	movw	r2, #8212	; 0x2014
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 800954a:	f846 300e 	str.w	r3, [r6, lr]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 800954e:	58b2      	ldr	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8009550:	5031      	str	r1, [r6, r0]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8009552:	4291      	cmp	r1, r2
 8009554:	f47f adef 	bne.w	8009136 <SCSI_ProcessCmd+0x22>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 8009558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800955c:	8173      	strh	r3, [r6, #10]
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 800955e:	f242 0868 	movw	r8, #8296	; 0x2068
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 8009562:	f8d5 6218 	ldr.w	r6, [r5, #536]	; 0x218
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8009566:	f8d5 021c 	ldr.w	r0, [r5, #540]	; 0x21c
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 800956a:	f856 7008 	ldr.w	r7, [r6, r8]
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 800956e:	f8d0 b010 	ldr.w	fp, [r0, #16]
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8009572:	429f      	cmp	r7, r3
 8009574:	bf28      	it	cs
 8009576:	461f      	movcs	r7, r3
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8009578:	f242 0964 	movw	r9, #8292	; 0x2064
 800957c:	f242 035e 	movw	r3, #8286	; 0x205e
                              hmsc->bot_data, 
 8009580:	f106 0a0c 	add.w	sl, r6, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8009584:	5af2      	ldrh	r2, [r6, r3]
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8009586:	f856 1009 	ldr.w	r1, [r6, r9]
                              len / hmsc->scsi_blk_size) < 0)
 800958a:	fbb7 f3f2 	udiv	r3, r7, r2
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 800958e:	4620      	mov	r0, r4
 8009590:	fbb1 f2f2 	udiv	r2, r1, r2
 8009594:	b29b      	uxth	r3, r3
 8009596:	4651      	mov	r1, sl
 8009598:	47d8      	blx	fp
 800959a:	2800      	cmp	r0, #0
 800959c:	f6bf af1a 	bge.w	80093d4 <SCSI_ProcessCmd+0x2c0>
    SCSI_SenseCode(pdev,
 80095a0:	2211      	movs	r2, #17
    SCSI_SenseCode(pdev,
 80095a2:	2104      	movs	r1, #4
 80095a4:	e6c9      	b.n	800933a <SCSI_ProcessCmd+0x226>
 80095a6:	bf00      	nop
 80095a8:	0800dbc8 	.word	0x0800dbc8
 80095ac:	0800dbc8 	.word	0x0800dbc8
 80095b0:	0800dbc0 	.word	0x0800dbc0

080095b4 <SCSI_SenseCode>:
{
 80095b4:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80095b6:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80095ba:	f242 055d 	movw	r5, #8285	; 0x205d
 80095be:	f242 063c 	movw	r6, #8252	; 0x203c
 80095c2:	5d41      	ldrb	r1, [r0, r5]
 80095c4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
  hmsc->scsi_sense_tail++;
 80095c8:	3101      	adds	r1, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80095ca:	55a2      	strb	r2, [r4, r6]
  hmsc->scsi_sense_tail++;
 80095cc:	b2c9      	uxtb	r1, r1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80095ce:	f504 5401 	add.w	r4, r4, #8256	; 0x2040
 80095d2:	021b      	lsls	r3, r3, #8
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80095d4:	2904      	cmp	r1, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80095d6:	6023      	str	r3, [r4, #0]
    hmsc->scsi_sense_tail = 0;
 80095d8:	bf0a      	itet	eq
 80095da:	2300      	moveq	r3, #0
  hmsc->scsi_sense_tail++;
 80095dc:	5541      	strbne	r1, [r0, r5]
    hmsc->scsi_sense_tail = 0;
 80095de:	5543      	strbeq	r3, [r0, r5]
 80095e0:	bd70      	pop	{r4, r5, r6, pc}

080095e2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80095e2:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80095e4:	b180      	cbz	r0, 8009608 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80095e6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80095ea:	b113      	cbz	r3, 80095f2 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80095ec:	2300      	movs	r3, #0
 80095ee:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80095f2:	b109      	cbz	r1, 80095f8 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80095f4:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80095f8:	2301      	movs	r3, #1
 80095fa:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 80095fe:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009600:	f7fb f882 	bl	8004708 <USBD_LL_Init>

  return USBD_OK;
 8009604:	2000      	movs	r0, #0
 8009606:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8009608:	2002      	movs	r0, #2
}
 800960a:	bd08      	pop	{r3, pc}

0800960c <Battey_Charge_Mode>:

USBD_StatusTypeDef Battey_Charge_Mode(USBD_HandleTypeDef *pdev)
{
	if ( pdev->dev_state  == USBD_STATE_DEFAULT)
 800960c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8009610:	2b01      	cmp	r3, #1
		return USBD_OK;
	else
		return USBD_FAIL;

}
 8009612:	bf14      	ite	ne
 8009614:	2002      	movne	r0, #2
 8009616:	2000      	moveq	r0, #0
 8009618:	4770      	bx	lr

0800961a <USBD_DeInit>:
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
  /* Set Default State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800961a:	2301      	movs	r3, #1
{
 800961c:	b510      	push	{r4, lr}
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800961e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8009622:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009626:	7901      	ldrb	r1, [r0, #4]
 8009628:	685b      	ldr	r3, [r3, #4]
{
 800962a:	4604      	mov	r4, r0
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800962c:	4798      	blx	r3
  
    /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 800962e:	4620      	mov	r0, r4
 8009630:	f7fb f8a6 	bl	8004780 <USBD_LL_Stop>
  
  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 8009634:	4620      	mov	r0, r4
 8009636:	f7fb f895 	bl	8004764 <USBD_LL_DeInit>
  
  return USBD_OK;
}
 800963a:	2000      	movs	r0, #0
 800963c:	bd10      	pop	{r4, pc}

0800963e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800963e:	b119      	cbz	r1, 8009648 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009640:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8009644:	2000      	movs	r0, #0
 8009646:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8009648:	2002      	movs	r0, #2
  }
  
  return status;
}
 800964a:	4770      	bx	lr

0800964c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800964c:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800964e:	f7fb f890 	bl	8004772 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8009652:	2000      	movs	r0, #0
 8009654:	bd08      	pop	{r3, pc}

08009656 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
{
 8009656:	b510      	push	{r4, lr}
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8009658:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800965c:	7901      	ldrb	r1, [r0, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
{
 8009660:	4604      	mov	r4, r0
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8009662:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 8009664:	4620      	mov	r0, r4
 8009666:	f7fb f88b 	bl	8004780 <USBD_LL_Stop>
  
  return USBD_OK;  
}
 800966a:	2000      	movs	r0, #0
 800966c:	bd10      	pop	{r4, pc}

0800966e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800966e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8009670:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009674:	b90b      	cbnz	r3, 800967a <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8009676:	2002      	movs	r0, #2
 8009678:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4798      	blx	r3
 800967e:	2800      	cmp	r0, #0
 8009680:	d1f9      	bne.n	8009676 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8009682:	bd08      	pop	{r3, pc}

08009684 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009684:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8009686:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	4798      	blx	r3
  return USBD_OK;
}
 800968e:	2000      	movs	r0, #0
 8009690:	bd08      	pop	{r3, pc}

08009692 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009692:	b538      	push	{r3, r4, r5, lr}
 8009694:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009696:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800969a:	4628      	mov	r0, r5
 800969c:	f000 fa75 	bl	8009b8a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80096a0:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80096a2:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80096a6:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80096aa:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80096ae:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80096b2:	f001 031f 	and.w	r3, r1, #31
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d00e      	beq.n	80096d8 <USBD_LL_SetupStage+0x46>
 80096ba:	d307      	bcc.n	80096cc <USBD_LL_SetupStage+0x3a>
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d010      	beq.n	80096e2 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80096c0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80096c4:	4620      	mov	r0, r4
 80096c6:	f7fb f87a 	bl	80047be <USBD_LL_StallEP>
    break;
 80096ca:	e003      	b.n	80096d4 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80096cc:	4629      	mov	r1, r5
 80096ce:	4620      	mov	r0, r4
 80096d0:	f000 f8e6 	bl	80098a0 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80096d4:	2000      	movs	r0, #0
 80096d6:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80096d8:	4629      	mov	r1, r5
 80096da:	4620      	mov	r0, r4
 80096dc:	f000 f9da 	bl	8009a94 <USBD_StdItfReq>
    break;
 80096e0:	e7f8      	b.n	80096d4 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 80096e2:	4629      	mov	r1, r5
 80096e4:	4620      	mov	r0, r4
 80096e6:	f000 f9ed 	bl	8009ac4 <USBD_StdEPReq>
    break;
 80096ea:	e7f3      	b.n	80096d4 <USBD_LL_SetupStage+0x42>

080096ec <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	4604      	mov	r4, r0
 80096f0:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80096f2:	bb11      	cbnz	r1, 800973a <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80096f4:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80096f8:	2b03      	cmp	r3, #3
 80096fa:	d10f      	bne.n	800971c <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 80096fc:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8009700:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8009704:	4293      	cmp	r3, r2
 8009706:	d90b      	bls.n	8009720 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8009708:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800970a:	429a      	cmp	r2, r3
 800970c:	bf28      	it	cs
 800970e:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8009710:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8009714:	b292      	uxth	r2, r2
 8009716:	4629      	mov	r1, r5
 8009718:	f000 fa96 	bl	8009c48 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800971c:	2000      	movs	r0, #0
 800971e:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8009720:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	b123      	cbz	r3, 8009732 <USBD_LL_DataOutStage+0x46>
 8009728:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800972c:	2a03      	cmp	r2, #3
 800972e:	d100      	bne.n	8009732 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8009730:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8009732:	4620      	mov	r0, r4
 8009734:	f000 fa90 	bl	8009c58 <USBD_CtlSendStatus>
 8009738:	e7f0      	b.n	800971c <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 800973a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d0eb      	beq.n	800971c <USBD_LL_DataOutStage+0x30>
 8009744:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8009748:	2a03      	cmp	r2, #3
 800974a:	d1e7      	bne.n	800971c <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 800974c:	4798      	blx	r3
 800974e:	e7e5      	b.n	800971c <USBD_LL_DataOutStage+0x30>

08009750 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8009750:	b570      	push	{r4, r5, r6, lr}
 8009752:	4613      	mov	r3, r2
 8009754:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8009756:	460e      	mov	r6, r1
 8009758:	2900      	cmp	r1, #0
 800975a:	d13d      	bne.n	80097d8 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800975c:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8009760:	2a02      	cmp	r2, #2
 8009762:	d10f      	bne.n	8009784 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8009764:	69c5      	ldr	r5, [r0, #28]
 8009766:	6a02      	ldr	r2, [r0, #32]
 8009768:	4295      	cmp	r5, r2
 800976a:	d914      	bls.n	8009796 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 800976c:	1aaa      	subs	r2, r5, r2
 800976e:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8009770:	4619      	mov	r1, r3
 8009772:	b292      	uxth	r2, r2
 8009774:	f000 fa51 	bl	8009c1a <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8009778:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800977a:	461a      	mov	r2, r3
 800977c:	4619      	mov	r1, r3
 800977e:	4620      	mov	r0, r4
 8009780:	f7fb f84c 	bl	800481c <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8009784:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8009788:	2b01      	cmp	r3, #1
 800978a:	d102      	bne.n	8009792 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800978c:	2300      	movs	r3, #0
 800978e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8009792:	2000      	movs	r0, #0
 8009794:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8009796:	6983      	ldr	r3, [r0, #24]
 8009798:	fbb3 f5f2 	udiv	r5, r3, r2
 800979c:	fb02 3515 	mls	r5, r2, r5, r3
 80097a0:	b965      	cbnz	r5, 80097bc <USBD_LL_DataInStage+0x6c>
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d80a      	bhi.n	80097bc <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80097a6:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d206      	bcs.n	80097bc <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80097ae:	462a      	mov	r2, r5
 80097b0:	f000 fa33 	bl	8009c1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80097b4:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80097b8:	462b      	mov	r3, r5
 80097ba:	e7de      	b.n	800977a <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80097bc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	b12b      	cbz	r3, 80097d0 <USBD_LL_DataInStage+0x80>
 80097c4:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80097c8:	2a03      	cmp	r2, #3
 80097ca:	d101      	bne.n	80097d0 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80097cc:	4620      	mov	r0, r4
 80097ce:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80097d0:	4620      	mov	r0, r4
 80097d2:	f000 fa4c 	bl	8009c6e <USBD_CtlReceiveStatus>
 80097d6:	e7d5      	b.n	8009784 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 80097d8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d0d7      	beq.n	8009792 <USBD_LL_DataInStage+0x42>
 80097e2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80097e6:	2a03      	cmp	r2, #3
 80097e8:	d1d3      	bne.n	8009792 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 80097ea:	4798      	blx	r3
 80097ec:	e7d1      	b.n	8009792 <USBD_LL_DataInStage+0x42>

080097ee <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80097ee:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80097f0:	2200      	movs	r2, #0
{
 80097f2:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 80097f4:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80097f6:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80097f8:	2340      	movs	r3, #64	; 0x40
 80097fa:	f7fa ffc8 	bl	800478e <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80097fe:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009800:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8009804:	2200      	movs	r2, #0
 8009806:	2180      	movs	r1, #128	; 0x80
 8009808:	4620      	mov	r0, r4
 800980a:	f7fa ffc0 	bl	800478e <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800980e:	2301      	movs	r3, #1
 8009810:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8009814:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009818:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800981a:	b12b      	cbz	r3, 8009828 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800981c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8009820:	7921      	ldrb	r1, [r4, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	4620      	mov	r0, r4
 8009826:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8009828:	2000      	movs	r0, #0
 800982a:	bd38      	pop	{r3, r4, r5, pc}

0800982c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800982c:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800982e:	2000      	movs	r0, #0
 8009830:	4770      	bx	lr

08009832 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8009832:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8009836:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800983a:	2304      	movs	r3, #4
 800983c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8009840:	2000      	movs	r0, #0
 8009842:	4770      	bx	lr

08009844 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8009844:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8009848:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800984c:	2000      	movs	r0, #0
 800984e:	4770      	bx	lr

08009850 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8009850:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8009852:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8009856:	2a03      	cmp	r2, #3
 8009858:	d104      	bne.n	8009864 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800985a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800985e:	69db      	ldr	r3, [r3, #28]
 8009860:	b103      	cbz	r3, 8009864 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8009862:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8009864:	2000      	movs	r0, #0
 8009866:	bd08      	pop	{r3, pc}

08009868 <USBD_LL_IsoINIncomplete>:
 8009868:	2000      	movs	r0, #0
 800986a:	4770      	bx	lr

0800986c <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 800986c:	2000      	movs	r0, #0
 800986e:	4770      	bx	lr

08009870 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8009870:	2000      	movs	r0, #0
 8009872:	4770      	bx	lr

08009874 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8009874:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009876:	2201      	movs	r2, #1
 8009878:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800987c:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8009880:	7901      	ldrb	r1, [r0, #4]
 8009882:	6852      	ldr	r2, [r2, #4]
 8009884:	4790      	blx	r2
   
  return USBD_OK;
}
 8009886:	2000      	movs	r0, #0
 8009888:	bd08      	pop	{r3, pc}

0800988a <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800988a:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800988c:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800988e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8009890:	f7fa ff95 	bl	80047be <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8009894:	4620      	mov	r0, r4
 8009896:	2100      	movs	r1, #0
}
 8009898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800989c:	f7fa bf8f 	b.w	80047be <USBD_LL_StallEP>

080098a0 <USBD_StdDevReq>:
{
 80098a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80098a2:	784b      	ldrb	r3, [r1, #1]
{
 80098a4:	4604      	mov	r4, r0
 80098a6:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80098a8:	2b09      	cmp	r3, #9
 80098aa:	d879      	bhi.n	80099a0 <USBD_StdDevReq+0x100>
 80098ac:	e8df f013 	tbh	[pc, r3, lsl #1]
 80098b0:	00e500c9 	.word	0x00e500c9
 80098b4:	00d90078 	.word	0x00d90078
 80098b8:	006d0078 	.word	0x006d0078
 80098bc:	0078000a 	.word	0x0078000a
 80098c0:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 80098c4:	884b      	ldrh	r3, [r1, #2]
 80098c6:	0a1a      	lsrs	r2, r3, #8
 80098c8:	3a01      	subs	r2, #1
 80098ca:	2a06      	cmp	r2, #6
 80098cc:	d868      	bhi.n	80099a0 <USBD_StdDevReq+0x100>
 80098ce:	e8df f002 	tbb	[pc, r2]
 80098d2:	1c04      	.short	0x1c04
 80098d4:	49676729 	.word	0x49676729
 80098d8:	52          	.byte	0x52
 80098d9:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80098da:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80098de:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80098e0:	7c20      	ldrb	r0, [r4, #16]
 80098e2:	f10d 0106 	add.w	r1, sp, #6
 80098e6:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80098e8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80098ec:	2a00      	cmp	r2, #0
 80098ee:	d067      	beq.n	80099c0 <USBD_StdDevReq+0x120>
 80098f0:	88eb      	ldrh	r3, [r5, #6]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d064      	beq.n	80099c0 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 80098f6:	429a      	cmp	r2, r3
 80098f8:	bf28      	it	cs
 80098fa:	461a      	movcs	r2, r3
 80098fc:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8009900:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 8009902:	4620      	mov	r0, r4
 8009904:	f000 f97c 	bl	8009c00 <USBD_CtlSendData>
 8009908:	e05a      	b.n	80099c0 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800990a:	7c02      	ldrb	r2, [r0, #16]
 800990c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009910:	b932      	cbnz	r2, 8009920 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009914:	f10d 0006 	add.w	r0, sp, #6
 8009918:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800991a:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800991c:	7043      	strb	r3, [r0, #1]
 800991e:	e7e3      	b.n	80098e8 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009922:	e7f7      	b.n	8009914 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2b05      	cmp	r3, #5
 8009928:	d83a      	bhi.n	80099a0 <USBD_StdDevReq+0x100>
 800992a:	e8df f003 	tbb	[pc, r3]
 800992e:	0703      	.short	0x0703
 8009930:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8009934:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	e7d1      	b.n	80098e0 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800993c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	e7cd      	b.n	80098e0 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009944:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	e7c9      	b.n	80098e0 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800994c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	e7c5      	b.n	80098e0 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009954:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8009958:	695b      	ldr	r3, [r3, #20]
 800995a:	e7c1      	b.n	80098e0 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800995c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	e7bd      	b.n	80098e0 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8009964:	7c03      	ldrb	r3, [r0, #16]
 8009966:	b9db      	cbnz	r3, 80099a0 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009968:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800996c:	f10d 0006 	add.w	r0, sp, #6
 8009970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009972:	4798      	blx	r3
 8009974:	e7b8      	b.n	80098e8 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8009976:	7c03      	ldrb	r3, [r0, #16]
 8009978:	b993      	cbnz	r3, 80099a0 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800997a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800997e:	f10d 0006 	add.w	r0, sp, #6
 8009982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009984:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009986:	2307      	movs	r3, #7
 8009988:	e7c8      	b.n	800991c <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800998a:	888b      	ldrh	r3, [r1, #4]
 800998c:	b943      	cbnz	r3, 80099a0 <USBD_StdDevReq+0x100>
 800998e:	88cb      	ldrh	r3, [r1, #6]
 8009990:	b933      	cbnz	r3, 80099a0 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8009992:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8009996:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8009998:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800999a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800999e:	d103      	bne.n	80099a8 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 80099a0:	4620      	mov	r0, r4
 80099a2:	f7ff ff72 	bl	800988a <USBD_CtlError.constprop.0>
    break;
 80099a6:	e00b      	b.n	80099c0 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 80099a8:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80099ac:	4629      	mov	r1, r5
 80099ae:	f7fa ff27 	bl	8004800 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80099b2:	4620      	mov	r0, r4
 80099b4:	f000 f950 	bl	8009c58 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80099b8:	b12d      	cbz	r5, 80099c6 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80099ba:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80099bc:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80099c0:	2000      	movs	r0, #0
 80099c2:	b003      	add	sp, #12
 80099c4:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80099c6:	2301      	movs	r3, #1
 80099c8:	e7f8      	b.n	80099bc <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 80099ca:	7889      	ldrb	r1, [r1, #2]
 80099cc:	4d30      	ldr	r5, [pc, #192]	; (8009a90 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80099ce:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80099d0:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80099d2:	d8e5      	bhi.n	80099a0 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 80099d4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d00c      	beq.n	80099f6 <USBD_StdDevReq+0x156>
 80099dc:	2b03      	cmp	r3, #3
 80099de:	d1df      	bne.n	80099a0 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 80099e0:	b9b1      	cbnz	r1, 8009a10 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099e2:	2302      	movs	r3, #2
 80099e4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80099e8:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80099ea:	f7ff fe4b 	bl	8009684 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80099ee:	4620      	mov	r0, r4
 80099f0:	f000 f932 	bl	8009c58 <USBD_CtlSendStatus>
 80099f4:	e7e4      	b.n	80099c0 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 80099f6:	2900      	cmp	r1, #0
 80099f8:	d0f9      	beq.n	80099ee <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 80099fa:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80099fc:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80099fe:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a00:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8009a04:	4620      	mov	r0, r4
 8009a06:	f7ff fe32 	bl	800966e <USBD_SetClassConfig>
 8009a0a:	2802      	cmp	r0, #2
 8009a0c:	d1ef      	bne.n	80099ee <USBD_StdDevReq+0x14e>
 8009a0e:	e7c7      	b.n	80099a0 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8009a10:	6841      	ldr	r1, [r0, #4]
 8009a12:	2901      	cmp	r1, #1
 8009a14:	d0eb      	beq.n	80099ee <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8009a16:	b2c9      	uxtb	r1, r1
 8009a18:	f7ff fe34 	bl	8009684 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a1c:	7829      	ldrb	r1, [r5, #0]
 8009a1e:	6061      	str	r1, [r4, #4]
 8009a20:	e7f0      	b.n	8009a04 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8009a22:	88ca      	ldrh	r2, [r1, #6]
 8009a24:	2a01      	cmp	r2, #1
 8009a26:	d1bb      	bne.n	80099a0 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8009a28:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	d003      	beq.n	8009a38 <USBD_StdDevReq+0x198>
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	d1b5      	bne.n	80099a0 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8009a34:	1d01      	adds	r1, r0, #4
 8009a36:	e764      	b.n	8009902 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8009a38:	4601      	mov	r1, r0
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	f841 3f08 	str.w	r3, [r1, #8]!
 8009a40:	e75f      	b.n	8009902 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8009a42:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8009a46:	3b02      	subs	r3, #2
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d8a9      	bhi.n	80099a0 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8009a50:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8009a54:	b10b      	cbz	r3, 8009a5a <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8009a56:	2303      	movs	r3, #3
 8009a58:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	f104 010c 	add.w	r1, r4, #12
 8009a60:	e74f      	b.n	8009902 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a62:	884b      	ldrh	r3, [r1, #2]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d1ab      	bne.n	80099c0 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8009a68:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8009a6c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8009a70:	4629      	mov	r1, r5
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	4620      	mov	r0, r4
 8009a76:	4798      	blx	r3
 8009a78:	e7b9      	b.n	80099ee <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8009a7a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8009a7e:	3b02      	subs	r3, #2
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d88d      	bhi.n	80099a0 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8009a84:	884b      	ldrh	r3, [r1, #2]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d19a      	bne.n	80099c0 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	e7ec      	b.n	8009a68 <USBD_StdDevReq+0x1c8>
 8009a8e:	bf00      	nop
 8009a90:	200005d6 	.word	0x200005d6

08009a94 <USBD_StdItfReq>:
{
 8009a94:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8009a96:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8009a9a:	2b03      	cmp	r3, #3
{
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8009aa0:	d10d      	bne.n	8009abe <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8009aa2:	790b      	ldrb	r3, [r1, #4]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d80a      	bhi.n	8009abe <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8009aa8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8009ab0:	88eb      	ldrh	r3, [r5, #6]
 8009ab2:	b913      	cbnz	r3, 8009aba <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f000 f8cf 	bl	8009c58 <USBD_CtlSendStatus>
}
 8009aba:	2000      	movs	r0, #0
 8009abc:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8009abe:	f7ff fee4 	bl	800988a <USBD_CtlError.constprop.0>
    break;
 8009ac2:	e7fa      	b.n	8009aba <USBD_StdItfReq+0x26>

08009ac4 <USBD_StdEPReq>:
{
 8009ac4:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8009ac6:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8009ac8:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8009aca:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8009ace:	2a20      	cmp	r2, #32
{
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8009ad4:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8009ad6:	d105      	bne.n	8009ae4 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8009ad8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	4798      	blx	r3
}
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8009ae4:	784a      	ldrb	r2, [r1, #1]
 8009ae6:	2a01      	cmp	r2, #1
 8009ae8:	d01c      	beq.n	8009b24 <USBD_StdEPReq+0x60>
 8009aea:	d32a      	bcc.n	8009b42 <USBD_StdEPReq+0x7e>
 8009aec:	2a03      	cmp	r2, #3
 8009aee:	d1f7      	bne.n	8009ae0 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8009af0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8009af4:	2a02      	cmp	r2, #2
 8009af6:	d040      	beq.n	8009b7a <USBD_StdEPReq+0xb6>
 8009af8:	2a03      	cmp	r2, #3
 8009afa:	d002      	beq.n	8009b02 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8009afc:	f7ff fec5 	bl	800988a <USBD_CtlError.constprop.0>
      break;
 8009b00:	e7ee      	b.n	8009ae0 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8009b02:	884a      	ldrh	r2, [r1, #2]
 8009b04:	b922      	cbnz	r2, 8009b10 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8009b06:	065e      	lsls	r6, r3, #25
 8009b08:	d002      	beq.n	8009b10 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	f7fa fe57 	bl	80047be <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8009b10:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8009b14:	4629      	mov	r1, r5
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	4620      	mov	r0, r4
 8009b1a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f000 f89b 	bl	8009c58 <USBD_CtlSendStatus>
 8009b22:	e7dd      	b.n	8009ae0 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8009b24:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8009b28:	2a02      	cmp	r2, #2
 8009b2a:	d026      	beq.n	8009b7a <USBD_StdEPReq+0xb6>
 8009b2c:	2a03      	cmp	r2, #3
 8009b2e:	d1e5      	bne.n	8009afc <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8009b30:	884a      	ldrh	r2, [r1, #2]
 8009b32:	2a00      	cmp	r2, #0
 8009b34:	d1d4      	bne.n	8009ae0 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8009b36:	0659      	lsls	r1, r3, #25
 8009b38:	d0f0      	beq.n	8009b1c <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	f7fa fe46 	bl	80047cc <USBD_LL_ClearStallEP>
 8009b40:	e7e6      	b.n	8009b10 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8009b42:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8009b46:	2a02      	cmp	r2, #2
 8009b48:	d017      	beq.n	8009b7a <USBD_StdEPReq+0xb6>
 8009b4a:	2a03      	cmp	r2, #3
 8009b4c:	d1d6      	bne.n	8009afc <USBD_StdEPReq+0x38>
 8009b4e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8009b52:	f016 0f80 	tst.w	r6, #128	; 0x80
 8009b56:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009b5a:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8009b5c:	bf14      	ite	ne
 8009b5e:	3514      	addne	r5, #20
 8009b60:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009b64:	f7fa fe39 	bl	80047da <USBD_LL_IsStallEP>
 8009b68:	b168      	cbz	r0, 8009b86 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8009b6e:	2202      	movs	r2, #2
 8009b70:	4629      	mov	r1, r5
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 f844 	bl	8009c00 <USBD_CtlSendData>
      break;
 8009b78:	e7b2      	b.n	8009ae0 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8009b7a:	065a      	lsls	r2, r3, #25
 8009b7c:	d0b0      	beq.n	8009ae0 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8009b7e:	4619      	mov	r1, r3
 8009b80:	f7fa fe1d 	bl	80047be <USBD_LL_StallEP>
 8009b84:	e7ac      	b.n	8009ae0 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8009b86:	6028      	str	r0, [r5, #0]
 8009b88:	e7f1      	b.n	8009b6e <USBD_StdEPReq+0xaa>

08009b8a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8009b8a:	780b      	ldrb	r3, [r1, #0]
 8009b8c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8009b8e:	784b      	ldrb	r3, [r1, #1]
 8009b90:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8009b92:	78ca      	ldrb	r2, [r1, #3]
 8009b94:	788b      	ldrb	r3, [r1, #2]
 8009b96:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009b9a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8009b9c:	794a      	ldrb	r2, [r1, #5]
 8009b9e:	790b      	ldrb	r3, [r1, #4]
 8009ba0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009ba4:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8009ba6:	79ca      	ldrb	r2, [r1, #7]
 8009ba8:	798b      	ldrb	r3, [r1, #6]
 8009baa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009bae:	80c3      	strh	r3, [r0, #6]
 8009bb0:	4770      	bx	lr

08009bb2 <USBD_CtlError>:
{
 8009bb2:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 8009bb4:	2180      	movs	r1, #128	; 0x80
{
 8009bb6:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8009bb8:	f7fa fe01 	bl	80047be <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	2100      	movs	r1, #0
}
 8009bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8009bc4:	f7fa bdfb 	b.w	80047be <USBD_LL_StallEP>

08009bc8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009bc8:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8009bca:	b188      	cbz	r0, 8009bf0 <USBD_GetString+0x28>
 8009bcc:	4605      	mov	r5, r0
 8009bce:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8009bd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	2c00      	cmp	r4, #0
 8009bd8:	d1f9      	bne.n	8009bce <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8009bda:	005b      	lsls	r3, r3, #1
 8009bdc:	3302      	adds	r3, #2
 8009bde:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8009be0:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8009be2:	2303      	movs	r3, #3
 8009be4:	704b      	strb	r3, [r1, #1]
 8009be6:	3801      	subs	r0, #1
 8009be8:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8009bea:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009bee:	b905      	cbnz	r5, 8009bf2 <USBD_GetString+0x2a>
 8009bf0:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8009bf2:	1c5a      	adds	r2, r3, #1
 8009bf4:	b2d2      	uxtb	r2, r2
 8009bf6:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8009bf8:	3302      	adds	r3, #2
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	548c      	strb	r4, [r1, r2]
 8009bfe:	e7f4      	b.n	8009bea <USBD_GetString+0x22>

08009c00 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8009c00:	b510      	push	{r4, lr}
 8009c02:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8009c04:	2202      	movs	r2, #2
 8009c06:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8009c0a:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8009c0c:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8009c0e:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8009c10:	2100      	movs	r1, #0
 8009c12:	f7fa fdfc 	bl	800480e <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8009c16:	2000      	movs	r0, #0
 8009c18:	bd10      	pop	{r4, pc}

08009c1a <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8009c1a:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	460a      	mov	r2, r1
 8009c20:	2100      	movs	r1, #0
 8009c22:	f7fa fdf4 	bl	800480e <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8009c26:	2000      	movs	r0, #0
 8009c28:	bd08      	pop	{r3, pc}

08009c2a <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8009c2a:	b510      	push	{r4, lr}
 8009c2c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8009c2e:	2203      	movs	r2, #3
 8009c30:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8009c34:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8009c38:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8009c3a:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8009c3e:	2100      	movs	r1, #0
 8009c40:	f7fa fdec 	bl	800481c <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8009c44:	2000      	movs	r0, #0
 8009c46:	bd10      	pop	{r4, pc}

08009c48 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8009c48:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	460a      	mov	r2, r1
 8009c4e:	2100      	movs	r1, #0
 8009c50:	f7fa fde4 	bl	800481c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8009c54:	2000      	movs	r0, #0
 8009c56:	bd08      	pop	{r3, pc}

08009c58 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8009c58:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009c5a:	2304      	movs	r3, #4
 8009c5c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8009c60:	2300      	movs	r3, #0
 8009c62:	461a      	mov	r2, r3
 8009c64:	4619      	mov	r1, r3
 8009c66:	f7fa fdd2 	bl	800480e <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	bd08      	pop	{r3, pc}

08009c6e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8009c6e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8009c70:	2305      	movs	r3, #5
 8009c72:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8009c76:	2300      	movs	r3, #0
 8009c78:	461a      	mov	r2, r3
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	f7fa fdce 	bl	800481c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8009c80:	2000      	movs	r0, #0
 8009c82:	bd08      	pop	{r3, pc}

08009c84 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009c84:	4b03      	ldr	r3, [pc, #12]	; (8009c94 <disk_status+0x10>)
 8009c86:	181a      	adds	r2, r3, r0
 8009c88:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009c8c:	7a10      	ldrb	r0, [r2, #8]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	4718      	bx	r3
 8009c94:	200005f8 	.word	0x200005f8

08009c98 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8009c98:	4b06      	ldr	r3, [pc, #24]	; (8009cb4 <disk_initialize+0x1c>)
 8009c9a:	5c1a      	ldrb	r2, [r3, r0]
 8009c9c:	b942      	cbnz	r2, 8009cb0 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009ca2:	181a      	adds	r2, r3, r0
 8009ca4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009ca8:	7a10      	ldrb	r0, [r2, #8]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4718      	bx	r3
  }
  return stat;
}
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	4770      	bx	lr
 8009cb4:	200005f8 	.word	0x200005f8

08009cb8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009cb8:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009cba:	4c05      	ldr	r4, [pc, #20]	; (8009cd0 <disk_read+0x18>)
 8009cbc:	1825      	adds	r5, r4, r0
 8009cbe:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8009cc2:	6860      	ldr	r0, [r4, #4]
 8009cc4:	6884      	ldr	r4, [r0, #8]
 8009cc6:	7a28      	ldrb	r0, [r5, #8]
 8009cc8:	46a4      	mov	ip, r4
  return res;
}
 8009cca:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009ccc:	4760      	bx	ip
 8009cce:	bf00      	nop
 8009cd0:	200005f8 	.word	0x200005f8

08009cd4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009cd4:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009cd6:	4c05      	ldr	r4, [pc, #20]	; (8009cec <disk_write+0x18>)
 8009cd8:	1825      	adds	r5, r4, r0
 8009cda:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8009cde:	6860      	ldr	r0, [r4, #4]
 8009ce0:	68c4      	ldr	r4, [r0, #12]
 8009ce2:	7a28      	ldrb	r0, [r5, #8]
 8009ce4:	46a4      	mov	ip, r4
  return res;
}
 8009ce6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009ce8:	4760      	bx	ip
 8009cea:	bf00      	nop
 8009cec:	200005f8 	.word	0x200005f8

08009cf0 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009cf0:	4b05      	ldr	r3, [pc, #20]	; (8009d08 <disk_ioctl+0x18>)
{
 8009cf2:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009cf4:	181c      	adds	r4, r3, r0
 8009cf6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009cfa:	7a20      	ldrb	r0, [r4, #8]
 8009cfc:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8009cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	4718      	bx	r3
 8009d06:	bf00      	nop
 8009d08:	200005f8 	.word	0x200005f8

08009d0c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009d0c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8009d0e:	4c06      	ldr	r4, [pc, #24]	; (8009d28 <SD_initialize+0x1c>)
 8009d10:	2301      	movs	r3, #1
 8009d12:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8009d14:	f7f7 fa82 	bl	800121c <BSP_SD_Init>
 8009d18:	4623      	mov	r3, r4
 8009d1a:	b918      	cbnz	r0, 8009d24 <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 8009d1c:	7822      	ldrb	r2, [r4, #0]
 8009d1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009d22:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8009d24:	7818      	ldrb	r0, [r3, #0]
}
 8009d26:	bd10      	pop	{r4, pc}
 8009d28:	200002a8 	.word	0x200002a8

08009d2c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009d2c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8009d2e:	4c06      	ldr	r4, [pc, #24]	; (8009d48 <SD_status+0x1c>)
 8009d30:	2301      	movs	r3, #1
 8009d32:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetStatus() == MSD_OK)
 8009d34:	f7f7 f9dc 	bl	80010f0 <BSP_SD_GetStatus>
 8009d38:	4623      	mov	r3, r4
 8009d3a:	b918      	cbnz	r0, 8009d44 <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 8009d3c:	7822      	ldrb	r2, [r4, #0]
 8009d3e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009d42:	7022      	strb	r2, [r4, #0]
  }
  
  return Stat;
 8009d44:	7818      	ldrb	r0, [r3, #0]
}
 8009d46:	bd10      	pop	{r4, pc}
 8009d48:	200002a8 	.word	0x200002a8

08009d4c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009d4c:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009d4e:	9301      	str	r3, [sp, #4]
 8009d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	0252      	lsls	r2, r2, #9
 8009d58:	2300      	movs	r3, #0
 8009d5a:	4608      	mov	r0, r1
 8009d5c:	f7f7 fa06 	bl	800116c <BSP_SD_ReadBlocks_DMA>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 8009d60:	3000      	adds	r0, #0
 8009d62:	bf18      	it	ne
 8009d64:	2001      	movne	r0, #1
 8009d66:	b003      	add	sp, #12
 8009d68:	f85d fb04 	ldr.w	pc, [sp], #4

08009d6c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009d6c:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009d6e:	9301      	str	r3, [sp, #4]
 8009d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	0252      	lsls	r2, r2, #9
 8009d78:	2300      	movs	r3, #0
 8009d7a:	4608      	mov	r0, r1
 8009d7c:	f7f7 fad0 	bl	8001320 <BSP_SD_WriteBlocks_DMA>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 8009d80:	3000      	adds	r0, #0
 8009d82:	bf18      	it	ne
 8009d84:	2001      	movne	r0, #1
 8009d86:	b003      	add	sp, #12
 8009d88:	f85d fb04 	ldr.w	pc, [sp], #4

08009d8c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009d8c:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009d8e:	4b12      	ldr	r3, [pc, #72]	; (8009dd8 <SD_ioctl+0x4c>)
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	07db      	lsls	r3, r3, #31
{
 8009d94:	b096      	sub	sp, #88	; 0x58
 8009d96:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009d98:	d41c      	bmi.n	8009dd4 <SD_ioctl+0x48>
  
  switch (cmd)
 8009d9a:	2903      	cmp	r1, #3
 8009d9c:	d803      	bhi.n	8009da6 <SD_ioctl+0x1a>
 8009d9e:	e8df f001 	tbb	[pc, r1]
 8009da2:	050e      	.short	0x050e
 8009da4:	1410      	.short	0x1410
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = BLOCK_SIZE;
    break;
  
  default:
    res = RES_PARERR;
 8009da6:	2004      	movs	r0, #4
  }
  
  return res;
}
 8009da8:	b016      	add	sp, #88	; 0x58
 8009daa:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8009dac:	4668      	mov	r0, sp
 8009dae:	f7f7 f9a5 	bl	80010fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.CardCapacity / BLOCK_SIZE;
 8009db2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009db4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009db6:	0a5b      	lsrs	r3, r3, #9
 8009db8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009dbc:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8009dbe:	2000      	movs	r0, #0
 8009dc0:	e7f2      	b.n	8009da8 <SD_ioctl+0x1c>
    *(WORD*)buff = BLOCK_SIZE;
 8009dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dc6:	8013      	strh	r3, [r2, #0]
 8009dc8:	e7f9      	b.n	8009dbe <SD_ioctl+0x32>
    *(DWORD*)buff = BLOCK_SIZE;
 8009dca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dce:	6013      	str	r3, [r2, #0]
  DRESULT res = RES_ERROR;
 8009dd0:	2001      	movs	r0, #1
    break;
 8009dd2:	e7e9      	b.n	8009da8 <SD_ioctl+0x1c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009dd4:	2003      	movs	r0, #3
 8009dd6:	e7e7      	b.n	8009da8 <SD_ioctl+0x1c>
 8009dd8:	200002a8 	.word	0x200002a8

08009ddc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009ddc:	3801      	subs	r0, #1
 8009dde:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8009de0:	4291      	cmp	r1, r2
 8009de2:	d100      	bne.n	8009de6 <mem_cpy+0xa>
		*d++ = *s++;
}
 8009de4:	4770      	bx	lr
		*d++ = *s++;
 8009de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dea:	f800 3f01 	strb.w	r3, [r0, #1]!
 8009dee:	e7f7      	b.n	8009de0 <mem_cpy+0x4>

08009df0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009df0:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8009df2:	4290      	cmp	r0, r2
 8009df4:	d100      	bne.n	8009df8 <mem_set+0x8>
		*d++ = (BYTE)val;
}
 8009df6:	4770      	bx	lr
		*d++ = (BYTE)val;
 8009df8:	f800 1b01 	strb.w	r1, [r0], #1
 8009dfc:	e7f9      	b.n	8009df2 <mem_set+0x2>
	...

08009e00 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009e00:	4a17      	ldr	r2, [pc, #92]	; (8009e60 <chk_lock+0x60>)
 8009e02:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e04:	2400      	movs	r4, #0
 8009e06:	4623      	mov	r3, r4
 8009e08:	4616      	mov	r6, r2
		if (Files[i].fs) {	/* Existing entry */
 8009e0a:	6815      	ldr	r5, [r2, #0]
 8009e0c:	b1c5      	cbz	r5, 8009e40 <chk_lock+0x40>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009e0e:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
 8009e12:	42bd      	cmp	r5, r7
 8009e14:	d115      	bne.n	8009e42 <chk_lock+0x42>
 8009e16:	6857      	ldr	r7, [r2, #4]
 8009e18:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8009e1c:	42af      	cmp	r7, r5
 8009e1e:	d110      	bne.n	8009e42 <chk_lock+0x42>
				Files[i].clu == dp->sclust &&
 8009e20:	8917      	ldrh	r7, [r2, #8]
 8009e22:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8009e26:	42af      	cmp	r7, r5
 8009e28:	d10b      	bne.n	8009e42 <chk_lock+0x42>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009e2a:	b9b9      	cbnz	r1, 8009e5c <chk_lock+0x5c>
 8009e2c:	220c      	movs	r2, #12
 8009e2e:	fb02 6303 	mla	r3, r2, r3, r6
 8009e32:	895b      	ldrh	r3, [r3, #10]
 8009e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e38:	bf14      	ite	ne
 8009e3a:	2000      	movne	r0, #0
 8009e3c:	2010      	moveq	r0, #16
 8009e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8009e40:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e42:	3301      	adds	r3, #1
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	f102 020c 	add.w	r2, r2, #12
 8009e4a:	d1de      	bne.n	8009e0a <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009e4c:	b10c      	cbz	r4, 8009e52 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009e4e:	2000      	movs	r0, #0
 8009e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009e52:	2902      	cmp	r1, #2
 8009e54:	bf0c      	ite	eq
 8009e56:	2000      	moveq	r0, #0
 8009e58:	2012      	movne	r0, #18
 8009e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009e5c:	2010      	movs	r0, #16
 8009e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e60:	200005dc 	.word	0x200005dc

08009e64 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e66:	4c20      	ldr	r4, [pc, #128]	; (8009ee8 <inc_lock+0x84>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8009e68:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	4622      	mov	r2, r4
		if (Files[i].fs == dp->fs &&
 8009e70:	6825      	ldr	r5, [r4, #0]
 8009e72:	42b5      	cmp	r5, r6
 8009e74:	d109      	bne.n	8009e8a <inc_lock+0x26>
 8009e76:	6867      	ldr	r7, [r4, #4]
 8009e78:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8009e7c:	42af      	cmp	r7, r5
 8009e7e:	d104      	bne.n	8009e8a <inc_lock+0x26>
			Files[i].clu == dp->sclust &&
 8009e80:	8927      	ldrh	r7, [r4, #8]
 8009e82:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8009e86:	42af      	cmp	r7, r5
 8009e88:	d022      	beq.n	8009ed0 <inc_lock+0x6c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	f104 040c 	add.w	r4, r4, #12
 8009e92:	d1ed      	bne.n	8009e70 <inc_lock+0xc>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009e94:	6813      	ldr	r3, [r2, #0]
 8009e96:	b113      	cbz	r3, 8009e9e <inc_lock+0x3a>
 8009e98:	68d3      	ldr	r3, [r2, #12]
 8009e9a:	bb1b      	cbnz	r3, 8009ee4 <inc_lock+0x80>
 8009e9c:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 8009e9e:	240c      	movs	r4, #12
 8009ea0:	435c      	muls	r4, r3
 8009ea2:	1915      	adds	r5, r2, r4
 8009ea4:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 8009ea6:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 8009eaa:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
 8009eae:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 8009eb0:	2000      	movs	r0, #0
		Files[i].clu = dp->sclust;
 8009eb2:	606c      	str	r4, [r5, #4]
		Files[i].ctr = 0;
 8009eb4:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009eb6:	b991      	cbnz	r1, 8009ede <inc_lock+0x7a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009eb8:	210c      	movs	r1, #12
 8009eba:	fb01 2103 	mla	r1, r1, r3, r2
 8009ebe:	8949      	ldrh	r1, [r1, #10]
 8009ec0:	3101      	adds	r1, #1
 8009ec2:	b289      	uxth	r1, r1
 8009ec4:	200c      	movs	r0, #12
 8009ec6:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 8009eca:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009ecc:	8151      	strh	r1, [r2, #10]
	return i + 1;
 8009ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009ed0:	2900      	cmp	r1, #0
 8009ed2:	d0f1      	beq.n	8009eb8 <inc_lock+0x54>
 8009ed4:	210c      	movs	r1, #12
 8009ed6:	fb01 2103 	mla	r1, r1, r3, r2
 8009eda:	8949      	ldrh	r1, [r1, #10]
 8009edc:	b911      	cbnz	r1, 8009ee4 <inc_lock+0x80>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009ede:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009ee2:	e7ef      	b.n	8009ec4 <inc_lock+0x60>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ee8:	200005dc 	.word	0x200005dc

08009eec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009eec:	b530      	push	{r4, r5, lr}
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009eee:	1e45      	subs	r5, r0, #1
 8009ef0:	2d01      	cmp	r5, #1
 8009ef2:	d811      	bhi.n	8009f18 <dec_lock+0x2c>
		n = Files[i].ctr;
 8009ef4:	490a      	ldr	r1, [pc, #40]	; (8009f20 <dec_lock+0x34>)
 8009ef6:	220c      	movs	r2, #12
 8009ef8:	fb02 1305 	mla	r3, r2, r5, r1
 8009efc:	895c      	ldrh	r4, [r3, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n) n--;					/* Decrement read mode open count */
 8009efe:	f424 7380 	bic.w	r3, r4, #256	; 0x100
 8009f02:	b298      	uxth	r0, r3
 8009f04:	b108      	cbz	r0, 8009f0a <dec_lock+0x1e>
 8009f06:	3c01      	subs	r4, #1
 8009f08:	b2a0      	uxth	r0, r4
		Files[i].ctr = n;
 8009f0a:	fb02 f305 	mul.w	r3, r2, r5
 8009f0e:	18ca      	adds	r2, r1, r3
 8009f10:	8150      	strh	r0, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009f12:	b918      	cbnz	r0, 8009f1c <dec_lock+0x30>
 8009f14:	50c8      	str	r0, [r1, r3]
 8009f16:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009f18:	2002      	movs	r0, #2
 8009f1a:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
 8009f1c:	2000      	movs	r0, #0
	}
	return res;
}
 8009f1e:	bd30      	pop	{r4, r5, pc}
 8009f20:	200005dc 	.word	0x200005dc

08009f24 <clmt_clust>:
)
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009f24:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8009f28:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009f2c:	3304      	adds	r3, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8009f2e:	0a49      	lsrs	r1, r1, #9
 8009f30:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8009f34:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f38:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 8009f3a:	b130      	cbz	r0, 8009f4a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009f3c:	4281      	cmp	r1, r0
 8009f3e:	d302      	bcc.n	8009f46 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8009f40:	1a09      	subs	r1, r1, r0
 8009f42:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009f44:	e7f8      	b.n	8009f38 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8009f46:	6858      	ldr	r0, [r3, #4]
 8009f48:	4408      	add	r0, r1
}
 8009f4a:	4770      	bx	lr

08009f4c <get_fileinfo>:
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
	if (dp->sect) {		/* Get SFN */
 8009f4c:	f8d0 2210 	ldr.w	r2, [r0, #528]	; 0x210
{
 8009f50:	b570      	push	{r4, r5, r6, lr}
	p = fno->fname;
 8009f52:	f101 0309 	add.w	r3, r1, #9
	if (dp->sect) {		/* Get SFN */
 8009f56:	b322      	cbz	r2, 8009fa2 <get_fileinfo+0x56>
		dir = dp->dir;
 8009f58:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
		i = 0;
 8009f5c:	2400      	movs	r4, #0
 8009f5e:	1e55      	subs	r5, r2, #1
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
			if (c == ' ') continue;				/* Skip padding spaces */
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8009f60:	262e      	movs	r6, #46	; 0x2e
			c = (TCHAR)dir[i++];
 8009f62:	f815 0f01 	ldrb.w	r0, [r5, #1]!
			if (c == ' ') continue;				/* Skip padding spaces */
 8009f66:	2820      	cmp	r0, #32
			c = (TCHAR)dir[i++];
 8009f68:	f104 0401 	add.w	r4, r4, #1
			if (c == ' ') continue;				/* Skip padding spaces */
 8009f6c:	d009      	beq.n	8009f82 <get_fileinfo+0x36>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009f6e:	2805      	cmp	r0, #5
 8009f70:	bf08      	it	eq
 8009f72:	20e5      	moveq	r0, #229	; 0xe5
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8009f74:	2c09      	cmp	r4, #9
 8009f76:	bf04      	itt	eq
 8009f78:	701e      	strbeq	r6, [r3, #0]
 8009f7a:	3301      	addeq	r3, #1
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	f803 0c01 	strb.w	r0, [r3, #-1]
		while (i < 11) {		/* Copy name body and extension */
 8009f82:	2c0b      	cmp	r4, #11
 8009f84:	d1ed      	bne.n	8009f62 <get_fileinfo+0x16>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8009f86:	7ad0      	ldrb	r0, [r2, #11]
 8009f88:	7208      	strb	r0, [r1, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8009f8a:	69d0      	ldr	r0, [r2, #28]
 8009f8c:	6008      	str	r0, [r1, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8009f8e:	7e54      	ldrb	r4, [r2, #25]
 8009f90:	7e10      	ldrb	r0, [r2, #24]
 8009f92:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8009f96:	8088      	strh	r0, [r1, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8009f98:	7dd0      	ldrb	r0, [r2, #23]
 8009f9a:	7d92      	ldrb	r2, [r2, #22]
 8009f9c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8009fa0:	80ca      	strh	r2, [r1, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	701a      	strb	r2, [r3, #0]
 8009fa6:	bd70      	pop	{r4, r5, r6, pc}

08009fa8 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009fa8:	6802      	ldr	r2, [r0, #0]
{
 8009faa:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8009fac:	b152      	cbz	r2, 8009fc4 <get_ldnumber+0x1c>
 8009fae:	4611      	mov	r1, r2
 8009fb0:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fb6:	2c20      	cmp	r4, #32
 8009fb8:	d90c      	bls.n	8009fd4 <get_ldnumber+0x2c>
 8009fba:	2c3a      	cmp	r4, #58	; 0x3a
 8009fbc:	d1f8      	bne.n	8009fb0 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8009fbe:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009fc0:	428b      	cmp	r3, r1
 8009fc2:	d002      	beq.n	8009fca <get_ldnumber+0x22>
	int vol = -1;
 8009fc4:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8009fc8:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009fca:	7812      	ldrb	r2, [r2, #0]
 8009fcc:	2a30      	cmp	r2, #48	; 0x30
 8009fce:	d1f9      	bne.n	8009fc4 <get_ldnumber+0x1c>
					*path = ++tt;
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	bd10      	pop	{r4, pc}

08009fd8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8009fd8:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8009fda:	b190      	cbz	r0, 800a002 <validate+0x2a>
 8009fdc:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8009fe0:	b17b      	cbz	r3, 800a002 <validate+0x2a>
 8009fe2:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 8009fe6:	b162      	cbz	r2, 800a002 <validate+0x2a>
 8009fe8:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 8009fec:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 8009ff0:	4291      	cmp	r1, r2
 8009ff2:	d106      	bne.n	800a002 <validate+0x2a>
 8009ff4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009ff8:	f7ff fe44 	bl	8009c84 <disk_status>
 8009ffc:	f010 0001 	ands.w	r0, r0, #1
 800a000:	d000      	beq.n	800a004 <validate+0x2c>
		return FR_INVALID_OBJECT;
 800a002:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 800a004:	bd08      	pop	{r3, pc}

0800a006 <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 800a006:	7eca      	ldrb	r2, [r1, #27]
 800a008:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 800a00a:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 800a00c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800a010:	bf01      	itttt	eq
 800a012:	7d48      	ldrbeq	r0, [r1, #21]
 800a014:	7d0a      	ldrbeq	r2, [r1, #20]
 800a016:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 800a01a:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 800a01e:	4618      	mov	r0, r3
 800a020:	4770      	bx	lr

0800a022 <sync_window.part.2>:
FRESULT sync_window (
 800a022:	b570      	push	{r4, r5, r6, lr}
		wsect = fs->winsect;	/* Current sector number */
 800a024:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
FRESULT sync_window (
 800a028:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800a02a:	4601      	mov	r1, r0
 800a02c:	2301      	movs	r3, #1
 800a02e:	462a      	mov	r2, r5
 800a030:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800a034:	f7ff fe4e 	bl	8009cd4 <disk_write>
 800a038:	b9d0      	cbnz	r0, 800a070 <sync_window.part.2+0x4e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a03a:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800a03e:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
			fs->wflag = 0;
 800a042:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a046:	1aeb      	subs	r3, r5, r3
 800a048:	4293      	cmp	r3, r2
 800a04a:	d301      	bcc.n	800a050 <sync_window.part.2+0x2e>
	FRESULT res = FR_OK;
 800a04c:	2000      	movs	r0, #0
 800a04e:	bd70      	pop	{r4, r5, r6, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a050:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 800a054:	2e01      	cmp	r6, #1
 800a056:	d9f9      	bls.n	800a04c <sync_window.part.2+0x2a>
					wsect += fs->fsize;
 800a058:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800a05c:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 800a060:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800a062:	462a      	mov	r2, r5
 800a064:	2301      	movs	r3, #1
 800a066:	4621      	mov	r1, r4
 800a068:	f7ff fe34 	bl	8009cd4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a06c:	3e01      	subs	r6, #1
 800a06e:	e7f1      	b.n	800a054 <sync_window.part.2+0x32>
			res = FR_DISK_ERR;
 800a070:	2001      	movs	r0, #1
}
 800a072:	bd70      	pop	{r4, r5, r6, pc}

0800a074 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a074:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 800a078:	b10b      	cbz	r3, 800a07e <sync_window+0xa>
 800a07a:	f7ff bfd2 	b.w	800a022 <sync_window.part.2>
}
 800a07e:	4618      	mov	r0, r3
 800a080:	4770      	bx	lr

0800a082 <sync_fs>:
{
 800a082:	b538      	push	{r3, r4, r5, lr}
 800a084:	4604      	mov	r4, r0
	res = sync_window(fs);
 800a086:	f7ff fff5 	bl	800a074 <sync_window>
 800a08a:	4605      	mov	r5, r0
	if (res == FR_OK) {
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d154      	bne.n	800a13a <sync_fs+0xb8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a090:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800a094:	2b03      	cmp	r3, #3
 800a096:	d147      	bne.n	800a128 <sync_fs+0xa6>
 800a098:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d143      	bne.n	800a128 <sync_fs+0xa6>
			mem_set(fs->win.d8, 0, SS(fs));
 800a0a0:	4601      	mov	r1, r0
 800a0a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f7ff fea2 	bl	8009df0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800a0ac:	2255      	movs	r2, #85	; 0x55
 800a0ae:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
 800a0b2:	22aa      	movs	r2, #170	; 0xaa
 800a0b4:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800a0b8:	2252      	movs	r2, #82	; 0x52
 800a0ba:	7022      	strb	r2, [r4, #0]
 800a0bc:	7062      	strb	r2, [r4, #1]
 800a0be:	2261      	movs	r2, #97	; 0x61
 800a0c0:	70a2      	strb	r2, [r4, #2]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800a0c2:	f884 21e7 	strb.w	r2, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800a0c6:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800a0ca:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800a0ce:	2141      	movs	r1, #65	; 0x41
 800a0d0:	70e1      	strb	r1, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800a0d2:	f884 11e6 	strb.w	r1, [r4, #486]	; 0x1e6
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800a0d6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a0da:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 800a0de:	0c11      	lsrs	r1, r2, #16
 800a0e0:	0e12      	lsrs	r2, r2, #24
 800a0e2:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800a0e6:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800a0ea:	f884 11ea 	strb.w	r1, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800a0ee:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a0f2:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 800a0f6:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 800a0fa:	0c11      	lsrs	r1, r2, #16
 800a0fc:	0e12      	lsrs	r2, r2, #24
 800a0fe:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 800a102:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800a106:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800a10a:	2072      	movs	r0, #114	; 0x72
			fs->winsect = fs->volbase + 1;
 800a10c:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800a10e:	f884 01e4 	strb.w	r0, [r4, #484]	; 0x1e4
 800a112:	f884 01e5 	strb.w	r0, [r4, #485]	; 0x1e5
			fs->winsect = fs->volbase + 1;
 800a116:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800a11a:	4621      	mov	r1, r4
 800a11c:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 800a120:	f7ff fdd8 	bl	8009cd4 <disk_write>
			fs->fsi_flag = 0;
 800a124:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800a128:	2200      	movs	r2, #0
 800a12a:	4611      	mov	r1, r2
 800a12c:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 800a130:	f7ff fdde 	bl	8009cf0 <disk_ioctl>
 800a134:	3000      	adds	r0, #0
 800a136:	bf18      	it	ne
 800a138:	2001      	movne	r0, #1
}
 800a13a:	bd38      	pop	{r3, r4, r5, pc}

0800a13c <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a13c:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 800a140:	428b      	cmp	r3, r1
{
 800a142:	b570      	push	{r4, r5, r6, lr}
 800a144:	4606      	mov	r6, r0
 800a146:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800a148:	d013      	beq.n	800a172 <move_window+0x36>
		res = sync_window(fs);		/* Write-back changes */
 800a14a:	f7ff ff93 	bl	800a074 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a14e:	4604      	mov	r4, r0
 800a150:	b968      	cbnz	r0, 800a16e <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800a152:	462a      	mov	r2, r5
 800a154:	2301      	movs	r3, #1
 800a156:	4631      	mov	r1, r6
 800a158:	f896 0201 	ldrb.w	r0, [r6, #513]	; 0x201
 800a15c:	f7ff fdac 	bl	8009cb8 <disk_read>
 800a160:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 800a162:	bf1c      	itt	ne
 800a164:	f04f 35ff 	movne.w	r5, #4294967295
 800a168:	2401      	movne	r4, #1
			fs->winsect = sector;
 800a16a:	f8c6 522c 	str.w	r5, [r6, #556]	; 0x22c
}
 800a16e:	4620      	mov	r0, r4
 800a170:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 800a172:	2400      	movs	r4, #0
 800a174:	e7fb      	b.n	800a16e <move_window+0x32>
	...

0800a178 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800a178:	2300      	movs	r3, #0
{
 800a17a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800a17c:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 800a180:	f04f 33ff 	mov.w	r3, #4294967295
 800a184:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
{
 800a188:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800a18a:	f7ff ffd7 	bl	800a13c <move_window>
 800a18e:	b9c0      	cbnz	r0, 800a1c2 <check_fs+0x4a>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800a190:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 800a194:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 800a198:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a19c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d110      	bne.n	800a1c6 <check_fs+0x4e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800a1a4:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 800a1a8:	4a08      	ldr	r2, [pc, #32]	; (800a1cc <check_fs+0x54>)
 800a1aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d00a      	beq.n	800a1c8 <check_fs+0x50>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800a1b2:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 800a1b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 800a1ba:	1a80      	subs	r0, r0, r2
 800a1bc:	bf18      	it	ne
 800a1be:	2001      	movne	r0, #1
 800a1c0:	bd10      	pop	{r4, pc}
 800a1c2:	2003      	movs	r0, #3
 800a1c4:	bd10      	pop	{r4, pc}
		return 2;
 800a1c6:	2002      	movs	r0, #2
}
 800a1c8:	bd10      	pop	{r4, pc}
 800a1ca:	bf00      	nop
 800a1cc:	00544146 	.word	0x00544146

0800a1d0 <find_volume>:
{
 800a1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	6003      	str	r3, [r0, #0]
{
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	4607      	mov	r7, r0
	vol = get_ldnumber(path);
 800a1da:	4608      	mov	r0, r1
{
 800a1dc:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800a1de:	f7ff fee3 	bl	8009fa8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800a1e2:	1e06      	subs	r6, r0, #0
 800a1e4:	f2c0 8123 	blt.w	800a42e <find_volume+0x25e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a1e8:	4b95      	ldr	r3, [pc, #596]	; (800a440 <find_volume+0x270>)
 800a1ea:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a1ee:	2c00      	cmp	r4, #0
 800a1f0:	f000 811f 	beq.w	800a432 <find_volume+0x262>
	*rfs = fs;							/* Return pointer to the file system object */
 800a1f4:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a1f6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800a1fa:	b173      	cbz	r3, 800a21a <find_volume+0x4a>
		stat = disk_status(fs->drv);
 800a1fc:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 800a200:	f7ff fd40 	bl	8009c84 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a204:	07c7      	lsls	r7, r0, #31
 800a206:	d408      	bmi.n	800a21a <find_volume+0x4a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800a208:	2d00      	cmp	r5, #0
 800a20a:	f000 8114 	beq.w	800a436 <find_volume+0x266>
 800a20e:	f010 0004 	ands.w	r0, r0, #4
 800a212:	d000      	beq.n	800a216 <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 800a214:	200a      	movs	r0, #10
}
 800a216:	b005      	add	sp, #20
 800a218:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800a21a:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a21c:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800a21e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a222:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a226:	f7ff fd37 	bl	8009c98 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800a22a:	07c1      	lsls	r1, r0, #31
 800a22c:	f100 8105 	bmi.w	800a43a <find_volume+0x26a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800a230:	b10d      	cbz	r5, 800a236 <find_volume+0x66>
 800a232:	0742      	lsls	r2, r0, #29
 800a234:	d4ee      	bmi.n	800a214 <find_volume+0x44>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800a236:	2100      	movs	r1, #0
 800a238:	4620      	mov	r0, r4
 800a23a:	f7ff ff9d 	bl	800a178 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800a23e:	2801      	cmp	r0, #1
 800a240:	f040 80dc 	bne.w	800a3fc <find_volume+0x22c>
 800a244:	f504 71e3 	add.w	r1, r4, #454	; 0x1c6
 800a248:	2200      	movs	r2, #0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800a24a:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 800a24e:	b103      	cbz	r3, 800a252 <find_volume+0x82>
 800a250:	680b      	ldr	r3, [r1, #0]
 800a252:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800a256:	3201      	adds	r2, #1
 800a258:	2a04      	cmp	r2, #4
 800a25a:	f101 0110 	add.w	r1, r1, #16
 800a25e:	d1f4      	bne.n	800a24a <find_volume+0x7a>
 800a260:	2600      	movs	r6, #0
			bsect = br[i];
 800a262:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800a266:	2d00      	cmp	r5, #0
 800a268:	f000 80bf 	beq.w	800a3ea <find_volume+0x21a>
 800a26c:	4629      	mov	r1, r5
 800a26e:	4620      	mov	r0, r4
 800a270:	f7ff ff82 	bl	800a178 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800a274:	2800      	cmp	r0, #0
 800a276:	f040 80b9 	bne.w	800a3ec <find_volume+0x21c>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a27a:	7b22      	ldrb	r2, [r4, #12]
 800a27c:	7ae3      	ldrb	r3, [r4, #11]
 800a27e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a286:	f040 80bc 	bne.w	800a402 <find_volume+0x232>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800a28a:	7de3      	ldrb	r3, [r4, #23]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800a28c:	7c20      	ldrb	r0, [r4, #16]
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800a28e:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800a290:	f884 0203 	strb.w	r0, [r4, #515]	; 0x203
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800a294:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800a298:	f100 33ff 	add.w	r3, r0, #4294967295
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800a29c:	bf08      	it	eq
 800a29e:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 800a2a0:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	f200 80ac 	bhi.w	800a402 <find_volume+0x232>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800a2aa:	7b66      	ldrb	r6, [r4, #13]
 800a2ac:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800a2b0:	2e00      	cmp	r6, #0
 800a2b2:	f000 80a6 	beq.w	800a402 <find_volume+0x232>
 800a2b6:	1e73      	subs	r3, r6, #1
 800a2b8:	4233      	tst	r3, r6
 800a2ba:	f040 80a2 	bne.w	800a402 <find_volume+0x232>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800a2be:	7ca3      	ldrb	r3, [r4, #18]
 800a2c0:	7c67      	ldrb	r7, [r4, #17]
 800a2c2:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800a2c6:	073b      	lsls	r3, r7, #28
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800a2c8:	f8a4 7208 	strh.w	r7, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800a2cc:	f040 8099 	bne.w	800a402 <find_volume+0x232>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800a2d0:	7d22      	ldrb	r2, [r4, #20]
 800a2d2:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800a2d4:	f894 e00f 	ldrb.w	lr, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800a2d8:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800a2dc:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800a2de:	bf08      	it	eq
 800a2e0:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800a2e2:	ea52 220e 	orrs.w	r2, r2, lr, lsl #8
 800a2e6:	f000 808c 	beq.w	800a402 <find_volume+0x232>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800a2ea:	fb01 fe00 	mul.w	lr, r1, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800a2ee:	eb02 1017 	add.w	r0, r2, r7, lsr #4
 800a2f2:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a2f4:	4283      	cmp	r3, r0
 800a2f6:	f0c0 8084 	bcc.w	800a402 <find_volume+0x232>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800a2fa:	1a1b      	subs	r3, r3, r0
 800a2fc:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800a300:	2b00      	cmp	r3, #0
 800a302:	d07e      	beq.n	800a402 <find_volume+0x232>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800a304:	f640 76f5 	movw	r6, #4085	; 0xff5
 800a308:	42b3      	cmp	r3, r6
 800a30a:	d97e      	bls.n	800a40a <find_volume+0x23a>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800a30c:	f64f 76f5 	movw	r6, #65525	; 0xfff5
 800a310:	42b3      	cmp	r3, r6
 800a312:	bf94      	ite	ls
 800a314:	2602      	movls	r6, #2
 800a316:	2603      	movhi	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800a318:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800a31a:	442a      	add	r2, r5
	fs->database = bsect + sysect;						/* Data start sector */
 800a31c:	4428      	add	r0, r5
	if (fmt == FS_FAT32) {
 800a31e:	2e03      	cmp	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800a320:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800a324:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800a328:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800a32c:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800a330:	d16d      	bne.n	800a40e <find_volume+0x23e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800a332:	2f00      	cmp	r7, #0
 800a334:	d165      	bne.n	800a402 <find_volume+0x232>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800a336:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a338:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800a33c:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800a33e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a342:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 800a346:	d35c      	bcc.n	800a402 <find_volume+0x232>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800a348:	f04f 33ff 	mov.w	r3, #4294967295
 800a34c:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 800a350:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800a354:	2e03      	cmp	r6, #3
	fs->fsi_flag = 0x80;
 800a356:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a35a:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800a35e:	d12d      	bne.n	800a3bc <find_volume+0x1ec>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800a360:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 800a364:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a368:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d125      	bne.n	800a3bc <find_volume+0x1ec>
		&& move_window(fs, bsect + 1) == FR_OK)
 800a370:	1c69      	adds	r1, r5, #1
 800a372:	4620      	mov	r0, r4
 800a374:	f7ff fee2 	bl	800a13c <move_window>
 800a378:	bb00      	cbnz	r0, 800a3bc <find_volume+0x1ec>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a37a:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 800a37e:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 800a382:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a386:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a38a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800a38e:	4293      	cmp	r3, r2
 800a390:	d114      	bne.n	800a3bc <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800a392:	6822      	ldr	r2, [r4, #0]
 800a394:	4b2b      	ldr	r3, [pc, #172]	; (800a444 <find_volume+0x274>)
 800a396:	429a      	cmp	r2, r3
 800a398:	d110      	bne.n	800a3bc <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800a39a:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 800a39e:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 800a3a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a3a6:	3320      	adds	r3, #32
 800a3a8:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800a3aa:	bf01      	itttt	eq
 800a3ac:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 800a3b0:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800a3b4:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 800a3b8:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 800a3bc:	4a22      	ldr	r2, [pc, #136]	; (800a448 <find_volume+0x278>)
	fs->fs_type = fmt;	/* FAT sub-type */
 800a3be:	f884 6200 	strb.w	r6, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800a3c2:	8813      	ldrh	r3, [r2, #0]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	8013      	strh	r3, [r2, #0]
 800a3ca:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a3ce:	4b1f      	ldr	r3, [pc, #124]	; (800a44c <find_volume+0x27c>)
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	4294      	cmp	r4, r2
 800a3d4:	bf04      	itt	eq
 800a3d6:	2200      	moveq	r2, #0
 800a3d8:	601a      	streq	r2, [r3, #0]
 800a3da:	68da      	ldr	r2, [r3, #12]
 800a3dc:	4294      	cmp	r4, r2
 800a3de:	f04f 0000 	mov.w	r0, #0
 800a3e2:	f47f af18 	bne.w	800a216 <find_volume+0x46>
 800a3e6:	60d8      	str	r0, [r3, #12]
 800a3e8:	e715      	b.n	800a216 <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800a3ea:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800a3ec:	3601      	adds	r6, #1
 800a3ee:	2e04      	cmp	r6, #4
 800a3f0:	f47f af37 	bne.w	800a262 <find_volume+0x92>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a3f4:	2803      	cmp	r0, #3
 800a3f6:	d104      	bne.n	800a402 <find_volume+0x232>
 800a3f8:	2001      	movs	r0, #1
 800a3fa:	e70c      	b.n	800a216 <find_volume+0x46>
 800a3fc:	2803      	cmp	r0, #3
 800a3fe:	d0fb      	beq.n	800a3f8 <find_volume+0x228>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800a400:	b108      	cbz	r0, 800a406 <find_volume+0x236>
 800a402:	200d      	movs	r0, #13
 800a404:	e707      	b.n	800a216 <find_volume+0x46>
	bsect = 0;
 800a406:	4605      	mov	r5, r0
 800a408:	e737      	b.n	800a27a <find_volume+0xaa>
	fmt = FS_FAT12;
 800a40a:	2601      	movs	r6, #1
 800a40c:	e784      	b.n	800a318 <find_volume+0x148>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800a40e:	2f00      	cmp	r7, #0
 800a410:	d0f7      	beq.n	800a402 <find_volume+0x232>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800a412:	4472      	add	r2, lr
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a414:	2e02      	cmp	r6, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800a416:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 800a41a:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a41e:	bf1b      	ittet	ne
 800a420:	18d2      	addne	r2, r2, r3
 800a422:	f003 0301 	andne.w	r3, r3, #1
 800a426:	4613      	moveq	r3, r2
 800a428:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 800a42c:	e787      	b.n	800a33e <find_volume+0x16e>
	if (vol < 0) return FR_INVALID_DRIVE;
 800a42e:	200b      	movs	r0, #11
 800a430:	e6f1      	b.n	800a216 <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a432:	200c      	movs	r0, #12
 800a434:	e6ef      	b.n	800a216 <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 800a436:	4628      	mov	r0, r5
 800a438:	e6ed      	b.n	800a216 <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a43a:	2003      	movs	r0, #3
 800a43c:	e6eb      	b.n	800a216 <find_volume+0x46>
 800a43e:	bf00      	nop
 800a440:	200005d8 	.word	0x200005d8
 800a444:	41615252 	.word	0x41615252
 800a448:	200005f4 	.word	0x200005f4
 800a44c:	200005dc 	.word	0x200005dc

0800a450 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a450:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
	clst -= 2;
 800a454:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a456:	3b02      	subs	r3, #2
 800a458:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 800a45a:	bf3d      	ittte	cc
 800a45c:	f890 3202 	ldrbcc.w	r3, [r0, #514]	; 0x202
 800a460:	f8d0 0228 	ldrcc.w	r0, [r0, #552]	; 0x228
 800a464:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a468:	2000      	movcs	r0, #0
}
 800a46a:	4770      	bx	lr

0800a46c <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a46c:	2901      	cmp	r1, #1
{
 800a46e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a470:	4606      	mov	r6, r0
 800a472:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a474:	d959      	bls.n	800a52a <get_fat+0xbe>
 800a476:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a47a:	4299      	cmp	r1, r3
 800a47c:	d255      	bcs.n	800a52a <get_fat+0xbe>
		switch (fs->fs_type) {
 800a47e:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 800a482:	2b02      	cmp	r3, #2
 800a484:	d027      	beq.n	800a4d6 <get_fat+0x6a>
 800a486:	2b03      	cmp	r3, #3
 800a488:	d036      	beq.n	800a4f8 <get_fat+0x8c>
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d14d      	bne.n	800a52a <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 800a48e:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a492:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800a496:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 800a49a:	f7ff fe4f 	bl	800a13c <move_window>
 800a49e:	b110      	cbz	r0, 800a4a6 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a4a6:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 800a4aa:	1c67      	adds	r7, r4, #1
 800a4ac:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a4b0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800a4b4:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 800a4b6:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a4b8:	f7ff fe40 	bl	800a13c <move_window>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d1ef      	bne.n	800a4a0 <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800a4c0:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a4c4:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800a4c6:	5df0      	ldrb	r0, [r6, r7]
 800a4c8:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a4cc:	bf4c      	ite	mi
 800a4ce:	0900      	lsrmi	r0, r0, #4
 800a4d0:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800a4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a4d6:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800a4da:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800a4de:	f7ff fe2d 	bl	800a13c <move_window>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d1dc      	bne.n	800a4a0 <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a4e6:	006d      	lsls	r5, r5, #1
 800a4e8:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 800a4ec:	1973      	adds	r3, r6, r5
 800a4ee:	5d70      	ldrb	r0, [r6, r5]
 800a4f0:	785b      	ldrb	r3, [r3, #1]
 800a4f2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800a4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a4f8:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800a4fc:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800a500:	f7ff fe1c 	bl	800a13c <move_window>
 800a504:	2800      	cmp	r0, #0
 800a506:	d1cb      	bne.n	800a4a0 <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a508:	00ad      	lsls	r5, r5, #2
 800a50a:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 800a50e:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800a510:	7898      	ldrb	r0, [r3, #2]
 800a512:	78da      	ldrb	r2, [r3, #3]
 800a514:	785b      	ldrb	r3, [r3, #1]
 800a516:	0400      	lsls	r0, r0, #16
 800a518:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800a51c:	5d72      	ldrb	r2, [r6, r5]
 800a51e:	4310      	orrs	r0, r2
 800a520:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800a524:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800a528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 800a52a:	2001      	movs	r0, #1
}
 800a52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a52e <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a52e:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
{
 800a532:	b570      	push	{r4, r5, r6, lr}
 800a534:	4604      	mov	r4, r0
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a536:	2a01      	cmp	r2, #1
{
 800a538:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 800a53a:	f8a4 1206 	strh.w	r1, [r4, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a53e:	d101      	bne.n	800a544 <dir_sdi+0x16>
		return FR_INT_ERR;
 800a540:	2002      	movs	r0, #2
 800a542:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a544:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 800a548:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 800a54c:	428a      	cmp	r2, r1
 800a54e:	d2f7      	bcs.n	800a540 <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a550:	b9f2      	cbnz	r2, 800a590 <dir_sdi+0x62>
 800a552:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 800a556:	2903      	cmp	r1, #3
 800a558:	d102      	bne.n	800a560 <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 800a55a:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a55e:	b9c1      	cbnz	r1, 800a592 <dir_sdi+0x64>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a560:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 800a564:	428d      	cmp	r5, r1
 800a566:	d2eb      	bcs.n	800a540 <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 800a568:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 800a56c:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800a570:	2800      	cmp	r0, #0
 800a572:	d0e5      	beq.n	800a540 <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a574:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a578:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a57c:	f005 050f 	and.w	r5, r5, #15
 800a580:	eb03 1545 	add.w	r5, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a584:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a588:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 800a58c:	2000      	movs	r0, #0
 800a58e:	bd70      	pop	{r4, r5, r6, pc}
 800a590:	4611      	mov	r1, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a592:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
		while (idx >= ic) {	/* Follow cluster chain */
 800a596:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a598:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 800a59a:	42b5      	cmp	r5, r6
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a59c:	4611      	mov	r1, r2
 800a59e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
		while (idx >= ic) {	/* Follow cluster chain */
 800a5a2:	d202      	bcs.n	800a5aa <dir_sdi+0x7c>
		sect = clust2sect(dp->fs, clst);
 800a5a4:	f7ff ff54 	bl	800a450 <clust2sect>
 800a5a8:	e7e0      	b.n	800a56c <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a5aa:	f7ff ff5f 	bl	800a46c <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a5ae:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a5b0:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a5b2:	d009      	beq.n	800a5c8 <dir_sdi+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a5b4:	2801      	cmp	r0, #1
 800a5b6:	d9c3      	bls.n	800a540 <dir_sdi+0x12>
 800a5b8:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800a5bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a5c0:	4298      	cmp	r0, r3
 800a5c2:	d2bd      	bcs.n	800a540 <dir_sdi+0x12>
			idx -= ic;
 800a5c4:	1bad      	subs	r5, r5, r6
 800a5c6:	e7e8      	b.n	800a59a <dir_sdi+0x6c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a5c8:	2001      	movs	r0, #1
}
 800a5ca:	bd70      	pop	{r4, r5, r6, pc}

0800a5cc <dir_remove>:
{
 800a5cc:	b510      	push	{r4, lr}
	res = dir_sdi(dp, dp->index);
 800a5ce:	f8b0 1206 	ldrh.w	r1, [r0, #518]	; 0x206
{
 800a5d2:	4604      	mov	r4, r0
	res = dir_sdi(dp, dp->index);
 800a5d4:	f7ff ffab 	bl	800a52e <dir_sdi>
	if (res == FR_OK) {
 800a5d8:	4603      	mov	r3, r0
 800a5da:	b9b0      	cbnz	r0, 800a60a <dir_remove+0x3e>
		res = move_window(dp->fs, dp->sect);
 800a5dc:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 800a5e0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a5e4:	f7ff fdaa 	bl	800a13c <move_window>
		if (res == FR_OK) {
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	b970      	cbnz	r0, 800a60a <dir_remove+0x3e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 800a5ec:	4601      	mov	r1, r0
 800a5ee:	2220      	movs	r2, #32
 800a5f0:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 800a5f4:	f7ff fbfc 	bl	8009df0 <mem_set>
			*dp->dir = DDEM;
 800a5f8:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 800a5fc:	21e5      	movs	r1, #229	; 0xe5
 800a5fe:	7011      	strb	r1, [r2, #0]
			dp->fs->wflag = 1;
 800a600:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800a604:	2101      	movs	r1, #1
 800a606:	f882 1204 	strb.w	r1, [r2, #516]	; 0x204
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	bd10      	pop	{r4, pc}

0800a60e <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a60e:	2901      	cmp	r1, #1
{
 800a610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a614:	4605      	mov	r5, r0
 800a616:	460c      	mov	r4, r1
 800a618:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a61a:	d96f      	bls.n	800a6fc <put_fat+0xee>
 800a61c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a620:	4299      	cmp	r1, r3
 800a622:	d26b      	bcs.n	800a6fc <put_fat+0xee>
		switch (fs->fs_type) {
 800a624:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d03d      	beq.n	800a6a8 <put_fat+0x9a>
 800a62c:	2b03      	cmp	r3, #3
 800a62e:	d04b      	beq.n	800a6c8 <put_fat+0xba>
 800a630:	2b01      	cmp	r3, #1
 800a632:	d163      	bne.n	800a6fc <put_fat+0xee>
			bc = (UINT)clst; bc += bc / 2;
 800a634:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a638:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800a63c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800a640:	f7ff fd7c 	bl	800a13c <move_window>
			if (res != FR_OK) break;
 800a644:	2800      	cmp	r0, #0
 800a646:	d15a      	bne.n	800a6fe <put_fat+0xf0>
			p = &fs->win.d8[bc++ % SS(fs)];
 800a648:	f107 0801 	add.w	r8, r7, #1
 800a64c:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a650:	f014 0401 	ands.w	r4, r4, #1
 800a654:	bf1f      	itttt	ne
 800a656:	5deb      	ldrbne	r3, [r5, r7]
 800a658:	f003 020f 	andne.w	r2, r3, #15
 800a65c:	0133      	lslne	r3, r6, #4
 800a65e:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 800a662:	bf14      	ite	ne
 800a664:	4313      	orrne	r3, r2
 800a666:	b2f3      	uxtbeq	r3, r6
 800a668:	55eb      	strb	r3, [r5, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a66a:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
			fs->wflag = 1;
 800a66e:	2301      	movs	r3, #1
 800a670:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a674:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800a678:	4628      	mov	r0, r5
 800a67a:	f7ff fd5f 	bl	800a13c <move_window>
			if (res != FR_OK) break;
 800a67e:	bbf0      	cbnz	r0, 800a6fe <put_fat+0xf0>
			p = &fs->win.d8[bc % SS(fs)];
 800a680:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a684:	b144      	cbz	r4, 800a698 <put_fat+0x8a>
 800a686:	f3c6 1207 	ubfx	r2, r6, #4, #8
 800a68a:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 800a68e:	2301      	movs	r3, #1
 800a690:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 800a694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a698:	f815 2008 	ldrb.w	r2, [r5, r8]
 800a69c:	f3c6 2603 	ubfx	r6, r6, #8, #4
 800a6a0:	f022 020f 	bic.w	r2, r2, #15
 800a6a4:	4332      	orrs	r2, r6
 800a6a6:	e7f0      	b.n	800a68a <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a6a8:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800a6ac:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800a6b0:	f7ff fd44 	bl	800a13c <move_window>
			if (res != FR_OK) break;
 800a6b4:	bb18      	cbnz	r0, 800a6fe <put_fat+0xf0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a6b6:	0064      	lsls	r4, r4, #1
 800a6b8:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 800a6bc:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800a6c0:	552e      	strb	r6, [r5, r4]
 800a6c2:	442c      	add	r4, r5
 800a6c4:	7062      	strb	r2, [r4, #1]
 800a6c6:	e7e2      	b.n	800a68e <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a6c8:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800a6cc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800a6d0:	f7ff fd34 	bl	800a13c <move_window>
			if (res != FR_OK) break;
 800a6d4:	b998      	cbnz	r0, 800a6fe <put_fat+0xf0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a6d6:	00a4      	lsls	r4, r4, #2
 800a6d8:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800a6dc:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 800a6de:	78cb      	ldrb	r3, [r1, #3]
 800a6e0:	061b      	lsls	r3, r3, #24
 800a6e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a6e6:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 800a6ea:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800a6ee:	552a      	strb	r2, [r5, r4]
 800a6f0:	704b      	strb	r3, [r1, #1]
 800a6f2:	0c13      	lsrs	r3, r2, #16
 800a6f4:	0e12      	lsrs	r2, r2, #24
 800a6f6:	708b      	strb	r3, [r1, #2]
 800a6f8:	70ca      	strb	r2, [r1, #3]
 800a6fa:	e7c8      	b.n	800a68e <put_fat+0x80>
			res = FR_INT_ERR;
 800a6fc:	2002      	movs	r0, #2
}
 800a6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a702 <create_chain>:
{
 800a702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a704:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 800a706:	460f      	mov	r7, r1
 800a708:	b989      	cbnz	r1, 800a72e <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 800a70a:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a70e:	b1fe      	cbz	r6, 800a750 <create_chain+0x4e>
 800a710:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a714:	429e      	cmp	r6, r3
 800a716:	bf28      	it	cs
 800a718:	2601      	movcs	r6, #1
 800a71a:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a71c:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		ncl++;							/* Next cluster */
 800a720:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a722:	429c      	cmp	r4, r3
 800a724:	d317      	bcc.n	800a756 <create_chain+0x54>
			if (ncl > scl) return 0;	/* No free cluster */
 800a726:	2e01      	cmp	r6, #1
 800a728:	d814      	bhi.n	800a754 <create_chain+0x52>
 800a72a:	2400      	movs	r4, #0
 800a72c:	e008      	b.n	800a740 <create_chain+0x3e>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a72e:	f7ff fe9d 	bl	800a46c <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 800a732:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a734:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 800a736:	d93b      	bls.n	800a7b0 <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a738:	3001      	adds	r0, #1
 800a73a:	d103      	bne.n	800a744 <create_chain+0x42>
			ncl = 2;
 800a73c:	f04f 34ff 	mov.w	r4, #4294967295
}
 800a740:	4620      	mov	r0, r4
 800a742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a744:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800a748:	429c      	cmp	r4, r3
 800a74a:	d3f9      	bcc.n	800a740 <create_chain+0x3e>
 800a74c:	463e      	mov	r6, r7
 800a74e:	e7e4      	b.n	800a71a <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a750:	2601      	movs	r6, #1
 800a752:	e7e2      	b.n	800a71a <create_chain+0x18>
			ncl = 2;
 800a754:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a756:	4621      	mov	r1, r4
 800a758:	4628      	mov	r0, r5
 800a75a:	f7ff fe87 	bl	800a46c <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 800a75e:	b130      	cbz	r0, 800a76e <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a760:	1c41      	adds	r1, r0, #1
 800a762:	d0eb      	beq.n	800a73c <create_chain+0x3a>
 800a764:	2801      	cmp	r0, #1
 800a766:	d023      	beq.n	800a7b0 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 800a768:	42b4      	cmp	r4, r6
 800a76a:	d1d7      	bne.n	800a71c <create_chain+0x1a>
 800a76c:	e7dd      	b.n	800a72a <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a76e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a772:	4621      	mov	r1, r4
 800a774:	4628      	mov	r0, r5
 800a776:	f7ff ff4a 	bl	800a60e <put_fat>
	if (res == FR_OK && clst != 0) {
 800a77a:	b9b8      	cbnz	r0, 800a7ac <create_chain+0xaa>
 800a77c:	b97f      	cbnz	r7, 800a79e <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 800a77e:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 800a782:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800a786:	1c5a      	adds	r2, r3, #1
 800a788:	d0da      	beq.n	800a740 <create_chain+0x3e>
			fs->free_clust--;
 800a78a:	3b01      	subs	r3, #1
 800a78c:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 800a790:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 800a794:	f043 0301 	orr.w	r3, r3, #1
 800a798:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 800a79c:	e7d0      	b.n	800a740 <create_chain+0x3e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a79e:	4622      	mov	r2, r4
 800a7a0:	4639      	mov	r1, r7
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	f7ff ff33 	bl	800a60e <put_fat>
	if (res == FR_OK) {
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	d0e8      	beq.n	800a77e <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a7ac:	2801      	cmp	r0, #1
 800a7ae:	d0c5      	beq.n	800a73c <create_chain+0x3a>
 800a7b0:	2401      	movs	r4, #1
 800a7b2:	e7c5      	b.n	800a740 <create_chain+0x3e>

0800a7b4 <dir_next>:
{
 800a7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 800a7b8:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 800a7bc:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a7be:	b2b3      	uxth	r3, r6
{
 800a7c0:	4604      	mov	r4, r0
 800a7c2:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a7c4:	b913      	cbnz	r3, 800a7cc <dir_next+0x18>
		return FR_NO_FILE;
 800a7c6:	2004      	movs	r0, #4
 800a7c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a7cc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d0f8      	beq.n	800a7c6 <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800a7d4:	f016 080f 	ands.w	r8, r6, #15
 800a7d8:	d10b      	bne.n	800a7f2 <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 800a7da:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 800a7de:	3301      	adds	r3, #1
 800a7e0:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 800a7e4:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		if (!dp->clust) {		/* Static table */
 800a7e8:	b971      	cbnz	r1, 800a808 <dir_next+0x54>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800a7ea:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 800a7ee:	429e      	cmp	r6, r3
 800a7f0:	d2e9      	bcs.n	800a7c6 <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a7f2:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->index = (WORD)i;	/* Current index */
 800a7f6:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a7fa:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800a7fe:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 800a802:	2000      	movs	r0, #0
 800a804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800a808:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 800a80c:	3f01      	subs	r7, #1
 800a80e:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 800a812:	d1ee      	bne.n	800a7f2 <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a814:	f7ff fe2a 	bl	800a46c <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 800a818:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a81a:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 800a81c:	d802      	bhi.n	800a824 <dir_next+0x70>
 800a81e:	2002      	movs	r0, #2
 800a820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a824:	1c42      	adds	r2, r0, #1
 800a826:	d102      	bne.n	800a82e <dir_next+0x7a>
 800a828:	2001      	movs	r0, #1
 800a82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800a82e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a832:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a836:	429d      	cmp	r5, r3
 800a838:	d32f      	bcc.n	800a89a <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800a83a:	f1b9 0f00 	cmp.w	r9, #0
 800a83e:	d0c2      	beq.n	800a7c6 <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800a840:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 800a844:	f7ff ff5d 	bl	800a702 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a848:	4605      	mov	r5, r0
 800a84a:	2800      	cmp	r0, #0
 800a84c:	d03e      	beq.n	800a8cc <dir_next+0x118>
					if (clst == 1) return FR_INT_ERR;
 800a84e:	2801      	cmp	r0, #1
 800a850:	d0e5      	beq.n	800a81e <dir_next+0x6a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a852:	1c43      	adds	r3, r0, #1
 800a854:	d0e8      	beq.n	800a828 <dir_next+0x74>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800a856:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a85a:	f7ff fc0b 	bl	800a074 <sync_window>
 800a85e:	4601      	mov	r1, r0
 800a860:	2800      	cmp	r0, #0
 800a862:	d1e1      	bne.n	800a828 <dir_next+0x74>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800a864:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a868:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a86c:	f7ff fac0 	bl	8009df0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a870:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800a874:	4629      	mov	r1, r5
 800a876:	4610      	mov	r0, r2
 800a878:	f7ff fdea 	bl	800a450 <clust2sect>
						dp->fs->wflag = 1;
 800a87c:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a880:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a884:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a888:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 800a88c:	429f      	cmp	r7, r3
 800a88e:	d30e      	bcc.n	800a8ae <dir_next+0xfa>
					dp->fs->winsect -= c;						/* Rewind window offset */
 800a890:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 800a894:	1bdf      	subs	r7, r3, r7
 800a896:	f8c0 722c 	str.w	r7, [r0, #556]	; 0x22c
				dp->clust = clst;				/* Initialize data for new cluster */
 800a89a:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800a89e:	4629      	mov	r1, r5
 800a8a0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a8a4:	f7ff fdd4 	bl	800a450 <clust2sect>
 800a8a8:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 800a8ac:	e7a1      	b.n	800a7f2 <dir_next+0x3e>
						dp->fs->wflag = 1;
 800a8ae:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
 800a8b2:	f7ff fbb6 	bl	800a022 <sync_window.part.2>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d1b6      	bne.n	800a828 <dir_next+0x74>
						dp->fs->winsect++;
 800a8ba:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800a8be:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a8c8:	3701      	adds	r7, #1
 800a8ca:	e7db      	b.n	800a884 <dir_next+0xd0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a8cc:	2007      	movs	r0, #7
}
 800a8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800a8d4 <follow_path>:
{
 800a8d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800a8d8:	780b      	ldrb	r3, [r1, #0]
 800a8da:	2b2f      	cmp	r3, #47	; 0x2f
{
 800a8dc:	4604      	mov	r4, r0
 800a8de:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800a8e0:	d001      	beq.n	800a8e6 <follow_path+0x12>
 800a8e2:	2b5c      	cmp	r3, #92	; 0x5c
 800a8e4:	d100      	bne.n	800a8e8 <follow_path+0x14>
		path++;
 800a8e6:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 800a8e8:	2600      	movs	r6, #0
 800a8ea:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a8ee:	782b      	ldrb	r3, [r5, #0]
 800a8f0:	2b1f      	cmp	r3, #31
 800a8f2:	d936      	bls.n	800a962 <follow_path+0x8e>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a8f4:	4e5f      	ldr	r6, [pc, #380]	; (800aa74 <follow_path+0x1a0>)
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800a8f6:	782b      	ldrb	r3, [r5, #0]
 800a8f8:	2b2f      	cmp	r3, #47	; 0x2f
 800a8fa:	46a8      	mov	r8, r5
 800a8fc:	f105 0501 	add.w	r5, r5, #1
 800a900:	d0f9      	beq.n	800a8f6 <follow_path+0x22>
 800a902:	2b5c      	cmp	r3, #92	; 0x5c
 800a904:	d0f7      	beq.n	800a8f6 <follow_path+0x22>
	sfn = dp->fn;
 800a906:	f8d4 7218 	ldr.w	r7, [r4, #536]	; 0x218
	mem_set(sfn, ' ', 11);
 800a90a:	220b      	movs	r2, #11
 800a90c:	2120      	movs	r1, #32
 800a90e:	4638      	mov	r0, r7
 800a910:	f7ff fa6e 	bl	8009df0 <mem_set>
	si = i = b = 0; ni = 8;
 800a914:	f04f 0e00 	mov.w	lr, #0
 800a918:	f108 39ff 	add.w	r9, r8, #4294967295
 800a91c:	46f4      	mov	ip, lr
 800a91e:	2108      	movs	r1, #8
 800a920:	4672      	mov	r2, lr
		c = (BYTE)p[si++];
 800a922:	f819 3f01 	ldrb.w	r3, [r9, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800a926:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 800a928:	f10c 0c01 	add.w	ip, ip, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800a92c:	d928      	bls.n	800a980 <follow_path+0xac>
 800a92e:	2b2f      	cmp	r3, #47	; 0x2f
 800a930:	d026      	beq.n	800a980 <follow_path+0xac>
 800a932:	2b5c      	cmp	r3, #92	; 0x5c
 800a934:	d024      	beq.n	800a980 <follow_path+0xac>
		if (c == '.' || i >= ni) {
 800a936:	2b2e      	cmp	r3, #46	; 0x2e
 800a938:	f000 8085 	beq.w	800aa46 <follow_path+0x172>
 800a93c:	4571      	cmp	r1, lr
 800a93e:	d90d      	bls.n	800a95c <follow_path+0x88>
		if (c >= 0x80) {				/* Extended character? */
 800a940:	0618      	lsls	r0, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a942:	bf48      	it	mi
 800a944:	3b80      	submi	r3, #128	; 0x80
 800a946:	4d4c      	ldr	r5, [pc, #304]	; (800aa78 <follow_path+0x1a4>)
 800a948:	bf44      	itt	mi
 800a94a:	5cf3      	ldrbmi	r3, [r6, r3]
			b |= 3;						/* Eliminate NT flag */
 800a94c:	f042 0203 	orrmi.w	r2, r2, #3
	while (*str && *str != chr) str++;
 800a950:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800a954:	2800      	cmp	r0, #0
 800a956:	d07d      	beq.n	800aa54 <follow_path+0x180>
 800a958:	4283      	cmp	r3, r0
 800a95a:	d1f9      	bne.n	800a950 <follow_path+0x7c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800a95c:	2006      	movs	r0, #6
	return res;
 800a95e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, 0);
 800a962:	4631      	mov	r1, r6
 800a964:	4620      	mov	r0, r4
 800a966:	f7ff fde2 	bl	800a52e <dir_sdi>
		dp->dir = 0;
 800a96a:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
 800a96e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				b |= 2;
 800a972:	f042 0202 	orr.w	r2, r2, #2
			sfn[i++] = c;
 800a976:	f807 300e 	strb.w	r3, [r7, lr]
 800a97a:	f10e 0e01 	add.w	lr, lr, #1
 800a97e:	e7d0      	b.n	800a922 <follow_path+0x4e>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800a980:	2b21      	cmp	r3, #33	; 0x21
	*path = &p[si];						/* Return pointer to the next segment */
 800a982:	eb08 050c 	add.w	r5, r8, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800a986:	bf34      	ite	cc
 800a988:	2304      	movcc	r3, #4
 800a98a:	2300      	movcs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800a98c:	f1be 0f00 	cmp.w	lr, #0
 800a990:	d0e4      	beq.n	800a95c <follow_path+0x88>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800a992:	7838      	ldrb	r0, [r7, #0]
 800a994:	28e5      	cmp	r0, #229	; 0xe5
 800a996:	bf04      	itt	eq
 800a998:	2005      	moveq	r0, #5
 800a99a:	7038      	strbeq	r0, [r7, #0]
	if (ni == 8) b <<= 2;
 800a99c:	2908      	cmp	r1, #8
 800a99e:	bf04      	itt	eq
 800a9a0:	0092      	lsleq	r2, r2, #2
 800a9a2:	b2d2      	uxtbeq	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800a9a4:	f002 0103 	and.w	r1, r2, #3
 800a9a8:	2901      	cmp	r1, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800a9aa:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800a9ae:	bf08      	it	eq
 800a9b0:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800a9b4:	2a04      	cmp	r2, #4
 800a9b6:	bf08      	it	eq
 800a9b8:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800a9bc:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a9be:	2100      	movs	r1, #0
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f7ff fdb4 	bl	800a52e <dir_sdi>
	if (res != FR_OK) return res;
 800a9c6:	b9f8      	cbnz	r0, 800aa08 <follow_path+0x134>
		res = move_window(dp->fs, dp->sect);
 800a9c8:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 800a9cc:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a9d0:	f7ff fbb4 	bl	800a13c <move_window>
		if (res != FR_OK) break;
 800a9d4:	b9c0      	cbnz	r0, 800aa08 <follow_path+0x134>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800a9d6:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a9da:	7813      	ldrb	r3, [r2, #0]
 800a9dc:	b19b      	cbz	r3, 800aa06 <follow_path+0x132>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800a9de:	7ad3      	ldrb	r3, [r2, #11]
 800a9e0:	0719      	lsls	r1, r3, #28
 800a9e2:	d40b      	bmi.n	800a9fc <follow_path+0x128>
 800a9e4:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800a9e8:	f103 0e0b 	add.w	lr, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800a9ec:	4573      	cmp	r3, lr
 800a9ee:	d00b      	beq.n	800aa08 <follow_path+0x134>
 800a9f0:	f812 7b01 	ldrb.w	r7, [r2], #1
 800a9f4:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a9f8:	428f      	cmp	r7, r1
 800a9fa:	d0f7      	beq.n	800a9ec <follow_path+0x118>
		res = dir_next(dp, 0);		/* Next entry */
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f7ff fed8 	bl	800a7b4 <dir_next>
 800aa04:	e7df      	b.n	800a9c6 <follow_path+0xf2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aa06:	2004      	movs	r0, #4
			ns = dp->fn[NSFLAG];
 800aa08:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800aa0c:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800aa0e:	b138      	cbz	r0, 800aa20 <follow_path+0x14c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800aa10:	2804      	cmp	r0, #4
 800aa12:	d12c      	bne.n	800aa6e <follow_path+0x19a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800aa14:	f013 0f04 	tst.w	r3, #4
 800aa18:	bf08      	it	eq
 800aa1a:	2005      	moveq	r0, #5
 800aa1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aa20:	075a      	lsls	r2, r3, #29
 800aa22:	d424      	bmi.n	800aa6e <follow_path+0x19a>
			dir = dp->dir;						/* Follow the sub-directory */
 800aa24:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800aa28:	7acb      	ldrb	r3, [r1, #11]
 800aa2a:	06db      	lsls	r3, r3, #27
 800aa2c:	d508      	bpl.n	800aa40 <follow_path+0x16c>
			dp->sclust = ld_clust(dp->fs, dir);
 800aa2e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800aa32:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800aa36:	f7ff fae6 	bl	800a006 <ld_clust.isra.0>
 800aa3a:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aa3e:	e75a      	b.n	800a8f6 <follow_path+0x22>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800aa40:	2005      	movs	r0, #5
 800aa42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800aa46:	2908      	cmp	r1, #8
 800aa48:	d188      	bne.n	800a95c <follow_path+0x88>
			b <<= 2; continue;
 800aa4a:	0092      	lsls	r2, r2, #2
			i = 8; ni = 11;
 800aa4c:	468e      	mov	lr, r1
			b <<= 2; continue;
 800aa4e:	b2d2      	uxtb	r2, r2
			i = 8; ni = 11;
 800aa50:	210b      	movs	r1, #11
 800aa52:	e766      	b.n	800a922 <follow_path+0x4e>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800aa54:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 800aa58:	2819      	cmp	r0, #25
 800aa5a:	d98a      	bls.n	800a972 <follow_path+0x9e>
				if (IsLower(c)) {		/* ASCII small capital? */
 800aa5c:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 800aa60:	2819      	cmp	r0, #25
					b |= 1; c -= 0x20;
 800aa62:	bf9e      	ittt	ls
 800aa64:	3b20      	subls	r3, #32
 800aa66:	f042 0201 	orrls.w	r2, r2, #1
 800aa6a:	b2db      	uxtbls	r3, r3
 800aa6c:	e783      	b.n	800a976 <follow_path+0xa2>
}
 800aa6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa72:	bf00      	nop
 800aa74:	0800dbe4 	.word	0x0800dbe4
 800aa78:	0800dc63 	.word	0x0800dc63

0800aa7c <dir_read.constprop.13>:
FRESULT dir_read (
 800aa7c:	b510      	push	{r4, lr}
 800aa7e:	4604      	mov	r4, r0
	res = FR_NO_FILE;
 800aa80:	2004      	movs	r0, #4
	while (dp->sect) {
 800aa82:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 800aa86:	b909      	cbnz	r1, 800aa8c <dir_read.constprop.13+0x10>
	if (res != FR_OK) dp->sect = 0;
 800aa88:	b1b0      	cbz	r0, 800aab8 <dir_read.constprop.13+0x3c>
 800aa8a:	e01d      	b.n	800aac8 <dir_read.constprop.13+0x4c>
		res = move_window(dp->fs, dp->sect);
 800aa8c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800aa90:	f7ff fb54 	bl	800a13c <move_window>
		if (res != FR_OK) break;
 800aa94:	b9c0      	cbnz	r0, 800aac8 <dir_read.constprop.13+0x4c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800aa96:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		c = dir[DIR_Name];
 800aa9a:	7813      	ldrb	r3, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aa9c:	b1c3      	cbz	r3, 800aad0 <dir_read.constprop.13+0x54>
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 800aa9e:	2be5      	cmp	r3, #229	; 0xe5
 800aaa0:	d00c      	beq.n	800aabc <dir_read.constprop.13+0x40>
 800aaa2:	2b2e      	cmp	r3, #46	; 0x2e
 800aaa4:	d00a      	beq.n	800aabc <dir_read.constprop.13+0x40>
		a = dir[DIR_Attr] & AM_MASK;
 800aaa6:	7ad3      	ldrb	r3, [r2, #11]
 800aaa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 800aaac:	2b0f      	cmp	r3, #15
 800aaae:	d005      	beq.n	800aabc <dir_read.constprop.13+0x40>
 800aab0:	f023 0320 	bic.w	r3, r3, #32
 800aab4:	2b08      	cmp	r3, #8
 800aab6:	d001      	beq.n	800aabc <dir_read.constprop.13+0x40>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aab8:	2000      	movs	r0, #0
 800aaba:	bd10      	pop	{r4, pc}
		res = dir_next(dp, 0);				/* Next entry */
 800aabc:	2100      	movs	r1, #0
 800aabe:	4620      	mov	r0, r4
 800aac0:	f7ff fe78 	bl	800a7b4 <dir_next>
		if (res != FR_OK) break;
 800aac4:	2800      	cmp	r0, #0
 800aac6:	d0dc      	beq.n	800aa82 <dir_read.constprop.13+0x6>
	if (res != FR_OK) dp->sect = 0;
 800aac8:	2300      	movs	r3, #0
 800aaca:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
}
 800aace:	bd10      	pop	{r4, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aad0:	2004      	movs	r0, #4
 800aad2:	e7f9      	b.n	800aac8 <dir_read.constprop.13+0x4c>

0800aad4 <dir_register>:
{
 800aad4:	b538      	push	{r3, r4, r5, lr}
	res = dir_sdi(dp, 0);
 800aad6:	2100      	movs	r1, #0
{
 800aad8:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 800aada:	f7ff fd28 	bl	800a52e <dir_sdi>
	if (res == FR_OK) {
 800aade:	4604      	mov	r4, r0
 800aae0:	bb78      	cbnz	r0, 800ab42 <dir_register+0x6e>
			res = move_window(dp->fs, dp->sect);
 800aae2:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 800aae6:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 800aaea:	f7ff fb27 	bl	800a13c <move_window>
			if (res != FR_OK) break;
 800aaee:	4604      	mov	r4, r0
 800aaf0:	bb38      	cbnz	r0, 800ab42 <dir_register+0x6e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800aaf2:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2be5      	cmp	r3, #229	; 0xe5
 800aafa:	d11b      	bne.n	800ab34 <dir_register+0x60>
		res = move_window(dp->fs, dp->sect);
 800aafc:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 800ab00:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 800ab04:	f7ff fb1a 	bl	800a13c <move_window>
		if (res == FR_OK) {
 800ab08:	4604      	mov	r4, r0
 800ab0a:	b988      	cbnz	r0, 800ab30 <dir_register+0x5c>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800ab0c:	4601      	mov	r1, r0
 800ab0e:	2220      	movs	r2, #32
 800ab10:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 800ab14:	f7ff f96c 	bl	8009df0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800ab18:	220b      	movs	r2, #11
 800ab1a:	f8d5 1218 	ldr.w	r1, [r5, #536]	; 0x218
 800ab1e:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 800ab22:	f7ff f95b 	bl	8009ddc <mem_cpy>
			dp->fs->wflag = 1;
 800ab26:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 800ab30:	4620      	mov	r0, r4
 800ab32:	bd38      	pop	{r3, r4, r5, pc}
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d0e1      	beq.n	800aafc <dir_register+0x28>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800ab38:	2101      	movs	r1, #1
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	f7ff fe3a 	bl	800a7b4 <dir_next>
 800ab40:	e7cd      	b.n	800aade <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ab42:	2c04      	cmp	r4, #4
 800ab44:	bf08      	it	eq
 800ab46:	2407      	moveq	r4, #7
 800ab48:	e7f2      	b.n	800ab30 <dir_register+0x5c>

0800ab4a <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800ab4a:	2901      	cmp	r1, #1
{
 800ab4c:	b570      	push	{r4, r5, r6, lr}
 800ab4e:	4604      	mov	r4, r0
 800ab50:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800ab52:	d801      	bhi.n	800ab58 <remove_chain+0xe>
		res = FR_INT_ERR;
 800ab54:	2002      	movs	r0, #2
 800ab56:	bd70      	pop	{r4, r5, r6, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800ab58:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800ab5c:	4299      	cmp	r1, r3
 800ab5e:	d2f9      	bcs.n	800ab54 <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800ab60:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800ab64:	429d      	cmp	r5, r3
 800ab66:	d205      	bcs.n	800ab74 <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800ab68:	4629      	mov	r1, r5
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f7ff fc7e 	bl	800a46c <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 800ab70:	4606      	mov	r6, r0
 800ab72:	b908      	cbnz	r0, 800ab78 <remove_chain+0x2e>
		res = FR_INT_ERR;
 800ab74:	2000      	movs	r0, #0
 800ab76:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800ab78:	2801      	cmp	r0, #1
 800ab7a:	d0eb      	beq.n	800ab54 <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800ab7c:	1c41      	adds	r1, r0, #1
 800ab7e:	d014      	beq.n	800abaa <remove_chain+0x60>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800ab80:	2200      	movs	r2, #0
 800ab82:	4629      	mov	r1, r5
 800ab84:	4620      	mov	r0, r4
 800ab86:	f7ff fd42 	bl	800a60e <put_fat>
			if (res != FR_OK) break;
 800ab8a:	b978      	cbnz	r0, 800abac <remove_chain+0x62>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800ab8c:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800ab90:	1c5a      	adds	r2, r3, #1
 800ab92:	d008      	beq.n	800aba6 <remove_chain+0x5c>
				fs->free_clust++;
 800ab94:	3301      	adds	r3, #1
 800ab96:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
				fs->fsi_flag |= 1;
 800ab9a:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 800ab9e:	f043 0301 	orr.w	r3, r3, #1
 800aba2:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
{
 800aba6:	4635      	mov	r5, r6
 800aba8:	e7da      	b.n	800ab60 <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800abaa:	2001      	movs	r0, #1
}
 800abac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800abb0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800abb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800abb2:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800abb4:	a804      	add	r0, sp, #16
{
 800abb6:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 800abb8:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 800abbc:	4616      	mov	r6, r2


	vol = get_ldnumber(&rp);
 800abbe:	f7ff f9f3 	bl	8009fa8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800abc2:	1e05      	subs	r5, r0, #0
 800abc4:	db21      	blt.n	800ac0a <f_mount+0x5a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800abc6:	4913      	ldr	r1, [pc, #76]	; (800ac14 <f_mount+0x64>)
 800abc8:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 800abcc:	b164      	cbz	r4, 800abe8 <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800abce:	4b12      	ldr	r3, [pc, #72]	; (800ac18 <f_mount+0x68>)
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	4294      	cmp	r4, r2
 800abd4:	bf04      	itt	eq
 800abd6:	2200      	moveq	r2, #0
 800abd8:	601a      	streq	r2, [r3, #0]
 800abda:	68da      	ldr	r2, [r3, #12]
 800abdc:	2000      	movs	r0, #0
 800abde:	4294      	cmp	r4, r2
 800abe0:	bf08      	it	eq
 800abe2:	60d8      	streq	r0, [r3, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800abe4:	f884 0200 	strb.w	r0, [r4, #512]	; 0x200
	}

	if (fs) {
 800abe8:	9801      	ldr	r0, [sp, #4]
 800abea:	b110      	cbz	r0, 800abf2 <f_mount+0x42>
		fs->fs_type = 0;				/* Clear new fs object */
 800abec:	2300      	movs	r3, #0
 800abee:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800abf2:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800abf6:	b130      	cbz	r0, 800ac06 <f_mount+0x56>
 800abf8:	2e01      	cmp	r6, #1
 800abfa:	d108      	bne.n	800ac0e <f_mount+0x5e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800abfc:	2200      	movs	r2, #0
 800abfe:	4669      	mov	r1, sp
 800ac00:	a801      	add	r0, sp, #4
 800ac02:	f7ff fae5 	bl	800a1d0 <find_volume>
	LEAVE_FF(fs, res);
}
 800ac06:	b004      	add	sp, #16
 800ac08:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800ac0a:	200b      	movs	r0, #11
 800ac0c:	e7fb      	b.n	800ac06 <f_mount+0x56>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ac0e:	2000      	movs	r0, #0
 800ac10:	e7f9      	b.n	800ac06 <f_mount+0x56>
 800ac12:	bf00      	nop
 800ac14:	200005d8 	.word	0x200005d8
 800ac18:	200005dc 	.word	0x200005dc

0800ac1c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ac1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac20:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800ac24:	4690      	mov	r8, r2
 800ac26:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800ac28:	4605      	mov	r5, r0
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	f000 80a6 	beq.w	800ad7c <f_open+0x160>
	fp->fs = 0;			/* Clear file object */
 800ac30:	2300      	movs	r3, #0
 800ac32:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800ac36:	f002 021e 	and.w	r2, r2, #30
 800ac3a:	a901      	add	r1, sp, #4
 800ac3c:	a886      	add	r0, sp, #536	; 0x218
 800ac3e:	f7ff fac7 	bl	800a1d0 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800ac42:	4606      	mov	r6, r0
 800ac44:	2800      	cmp	r0, #0
 800ac46:	f040 8094 	bne.w	800ad72 <f_open+0x156>
		INIT_BUF(dj);
 800ac4a:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 800ac4c:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800ac4e:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 800ac50:	a806      	add	r0, sp, #24
 800ac52:	f7ff fe3f 	bl	800a8d4 <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800ac56:	f008 071f 	and.w	r7, r8, #31
		dir = dj.dir;
 800ac5a:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ac5c:	b948      	cbnz	r0, 800ac72 <f_open+0x56>
			if (!dir)	/* Default directory itself */
 800ac5e:	2c00      	cmp	r4, #0
 800ac60:	d05b      	beq.n	800ad1a <f_open+0xfe>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ac62:	f017 0f1e 	tst.w	r7, #30
 800ac66:	bf14      	ite	ne
 800ac68:	2101      	movne	r1, #1
 800ac6a:	2100      	moveq	r1, #0
 800ac6c:	a806      	add	r0, sp, #24
 800ac6e:	f7ff f8c7 	bl	8009e00 <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ac72:	f018 0f1c 	tst.w	r8, #28
 800ac76:	d05b      	beq.n	800ad30 <f_open+0x114>
			if (res != FR_OK) {					/* No file, create new */
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	d050      	beq.n	800ad1e <f_open+0x102>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800ac7c:	2804      	cmp	r0, #4
 800ac7e:	d14a      	bne.n	800ad16 <f_open+0xfa>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ac80:	4b51      	ldr	r3, [pc, #324]	; (800adc8 <f_open+0x1ac>)
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	b11a      	cbz	r2, 800ac8e <f_open+0x72>
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f040 809b 	bne.w	800adc4 <f_open+0x1a8>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ac8e:	a806      	add	r0, sp, #24
 800ac90:	f7ff ff20 	bl	800aad4 <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d13e      	bne.n	800ad16 <f_open+0xfa>
				dir = dj.dir;					/* New entry */
 800ac98:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ac9a:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ac9e:	073b      	lsls	r3, r7, #28
 800aca0:	d550      	bpl.n	800ad44 <f_open+0x128>
				dw = GET_FATTIME();				/* Created time */
 800aca2:	f7f6 fb63 	bl	800136c <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 800aca6:	f3c0 2307 	ubfx	r3, r0, #8, #8
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800acaa:	f04f 0800 	mov.w	r8, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 800acae:	73a0      	strb	r0, [r4, #14]
 800acb0:	73e3      	strb	r3, [r4, #15]
 800acb2:	0c03      	lsrs	r3, r0, #16
 800acb4:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800acb6:	f884 800b 	strb.w	r8, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800acba:	f884 801c 	strb.w	r8, [r4, #28]
 800acbe:	f884 801d 	strb.w	r8, [r4, #29]
 800acc2:	f884 801e 	strb.w	r8, [r4, #30]
 800acc6:	f884 801f 	strb.w	r8, [r4, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800acca:	7423      	strb	r3, [r4, #16]
 800accc:	7460      	strb	r0, [r4, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800acce:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800acd0:	4621      	mov	r1, r4
 800acd2:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800acd6:	f7ff f996 	bl	800a006 <ld_clust.isra.0>
	ST_WORD(dir + DIR_FstClusLO, cl);
 800acda:	f884 801a 	strb.w	r8, [r4, #26]
 800acde:	f884 801b 	strb.w	r8, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800ace2:	f884 8014 	strb.w	r8, [r4, #20]
 800ace6:	f884 8015 	strb.w	r8, [r4, #21]
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 800acea:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800acec:	2201      	movs	r2, #1
 800acee:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800acf2:	4680      	mov	r8, r0
 800acf4:	b330      	cbz	r0, 800ad44 <f_open+0x128>
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
 800acf6:	4601      	mov	r1, r0
 800acf8:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 800acfa:	f8d3 922c 	ldr.w	r9, [r3, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 800acfe:	f7ff ff24 	bl	800ab4a <remove_chain>
					if (res == FR_OK) {
 800ad02:	b940      	cbnz	r0, 800ad16 <f_open+0xfa>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800ad04:	9886      	ldr	r0, [sp, #536]	; 0x218
 800ad06:	f108 33ff 	add.w	r3, r8, #4294967295
 800ad0a:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800ad0e:	4649      	mov	r1, r9
 800ad10:	f7ff fa14 	bl	800a13c <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 800ad14:	b1b0      	cbz	r0, 800ad44 <f_open+0x128>
					res = FR_DENIED;
 800ad16:	4606      	mov	r6, r0
 800ad18:	e02b      	b.n	800ad72 <f_open+0x156>
				res = FR_INVALID_NAME;
 800ad1a:	2006      	movs	r0, #6
 800ad1c:	e7a9      	b.n	800ac72 <f_open+0x56>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ad1e:	7ae3      	ldrb	r3, [r4, #11]
 800ad20:	f013 0f11 	tst.w	r3, #17
 800ad24:	d12e      	bne.n	800ad84 <f_open+0x168>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800ad26:	f018 0f04 	tst.w	r8, #4
 800ad2a:	d0b8      	beq.n	800ac9e <f_open+0x82>
						res = FR_EXIST;
 800ad2c:	2608      	movs	r6, #8
 800ad2e:	e020      	b.n	800ad72 <f_open+0x156>
			if (res == FR_OK) {					/* Follow succeeded */
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d1f0      	bne.n	800ad16 <f_open+0xfa>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800ad34:	7ae3      	ldrb	r3, [r4, #11]
 800ad36:	06d8      	lsls	r0, r3, #27
 800ad38:	d422      	bmi.n	800ad80 <f_open+0x164>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800ad3a:	f018 0f02 	tst.w	r8, #2
 800ad3e:	d001      	beq.n	800ad44 <f_open+0x128>
 800ad40:	07da      	lsls	r2, r3, #31
 800ad42:	d41f      	bmi.n	800ad84 <f_open+0x168>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ad44:	073b      	lsls	r3, r7, #28
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800ad46:	9b86      	ldr	r3, [sp, #536]	; 0x218
				mode |= FA__WRITTEN;
 800ad48:	bf48      	it	mi
 800ad4a:	f047 0720 	orrmi.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800ad4e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800ad52:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
			fp->dir_ptr = dir;
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ad56:	f017 0ffe 	tst.w	r7, #254	; 0xfe
			fp->dir_ptr = dir;
 800ad5a:	f8c5 4220 	str.w	r4, [r5, #544]	; 0x220
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ad5e:	bf14      	ite	ne
 800ad60:	2101      	movne	r1, #1
 800ad62:	2100      	moveq	r1, #0
 800ad64:	a806      	add	r0, sp, #24
 800ad66:	f7ff f87d 	bl	8009e64 <inc_lock>
 800ad6a:	f8c5 0228 	str.w	r0, [r5, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800ad6e:	b958      	cbnz	r0, 800ad88 <f_open+0x16c>
 800ad70:	2602      	movs	r6, #2
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 800ad72:	4630      	mov	r0, r6
 800ad74:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 800ad78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!fp) return FR_INVALID_OBJECT;
 800ad7c:	2609      	movs	r6, #9
 800ad7e:	e7f8      	b.n	800ad72 <f_open+0x156>
					res = FR_NO_FILE;
 800ad80:	2604      	movs	r6, #4
 800ad82:	e7f6      	b.n	800ad72 <f_open+0x156>
					res = FR_DENIED;
 800ad84:	2607      	movs	r6, #7
 800ad86:	e7f4      	b.n	800ad72 <f_open+0x156>
			fp->flag = mode;					/* File access mode */
 800ad88:	f885 7206 	strb.w	r7, [r5, #518]	; 0x206
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800ad8c:	f8dd 8218 	ldr.w	r8, [sp, #536]	; 0x218
			fp->err = 0;						/* Clear error flag */
 800ad90:	2700      	movs	r7, #0
 800ad92:	f885 7207 	strb.w	r7, [r5, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800ad96:	f898 0200 	ldrb.w	r0, [r8, #512]	; 0x200
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	f7ff f933 	bl	800a006 <ld_clust.isra.0>
 800ada0:	f8c5 0210 	str.w	r0, [r5, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800ada4:	69e3      	ldr	r3, [r4, #28]
 800ada6:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
			fp->id = fp->fs->id;
 800adaa:	f8b8 3206 	ldrh.w	r3, [r8, #518]	; 0x206
			fp->fptr = 0;						/* File pointer */
 800adae:	f8c5 7208 	str.w	r7, [r5, #520]	; 0x208
			fp->dsect = 0;
 800adb2:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 800adb6:	f8c5 7224 	str.w	r7, [r5, #548]	; 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 800adba:	f8c5 8200 	str.w	r8, [r5, #512]	; 0x200
			fp->id = fp->fs->id;
 800adbe:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
 800adc2:	e7d6      	b.n	800ad72 <f_open+0x156>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800adc4:	2012      	movs	r0, #18
 800adc6:	e7a6      	b.n	800ad16 <f_open+0xfa>
 800adc8:	200005dc 	.word	0x200005dc

0800adcc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800adcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add0:	469b      	mov	fp, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800add2:	2300      	movs	r3, #0
 800add4:	f8cb 3000 	str.w	r3, [fp]
{
 800add8:	4604      	mov	r4, r0
 800adda:	4689      	mov	r9, r1
 800addc:	4617      	mov	r7, r2

	res = validate(fp);						/* Check validity */
 800adde:	f7ff f8fb 	bl	8009fd8 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800ade2:	4606      	mov	r6, r0
 800ade4:	bb50      	cbnz	r0, 800ae3c <f_write+0x70>
	if (fp->err)							/* Check error */
 800ade6:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 800adea:	2b00      	cmp	r3, #0
 800adec:	f040 80d9 	bne.w	800afa2 <f_write+0x1d6>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800adf0:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800adf4:	0799      	lsls	r1, r3, #30
 800adf6:	f140 80d6 	bpl.w	800afa6 <f_write+0x1da>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800adfa:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800adfe:	42df      	cmn	r7, r3
 800ae00:	f0c0 8083 	bcc.w	800af0a <f_write+0x13e>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800ae04:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800ae08:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	f200 80c5 	bhi.w	800af9c <f_write+0x1d0>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800ae12:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800ae16:	f043 0320 	orr.w	r3, r3, #32
 800ae1a:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800ae1e:	e00d      	b.n	800ae3c <f_write+0x70>
					if (fp->cltbl)
 800ae20:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800ae24:	b173      	cbz	r3, 800ae44 <f_write+0x78>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ae26:	4620      	mov	r0, r4
 800ae28:	f7ff f87c 	bl	8009f24 <clmt_clust>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ae2c:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	d0e8      	beq.n	800ae04 <f_write+0x38>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800ae32:	2901      	cmp	r1, #1
 800ae34:	d109      	bne.n	800ae4a <f_write+0x7e>
 800ae36:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ae38:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207

	LEAVE_FF(fp->fs, FR_OK);
}
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	b003      	add	sp, #12
 800ae40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ae44:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 800ae48:	e07a      	b.n	800af40 <f_write+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ae4a:	1c4a      	adds	r2, r1, #1
 800ae4c:	d101      	bne.n	800ae52 <f_write+0x86>
 800ae4e:	2601      	movs	r6, #1
 800ae50:	e7f2      	b.n	800ae38 <f_write+0x6c>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800ae52:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
				fp->clust = clst;			/* Update current cluster */
 800ae56:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800ae5a:	b90b      	cbnz	r3, 800ae60 <f_write+0x94>
 800ae5c:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800ae60:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800ae64:	065b      	lsls	r3, r3, #25
 800ae66:	d511      	bpl.n	800ae8c <f_write+0xc0>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ae68:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800ae6c:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800ae70:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800ae74:	2301      	movs	r3, #1
 800ae76:	4621      	mov	r1, r4
 800ae78:	f7fe ff2c 	bl	8009cd4 <disk_write>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d1e6      	bne.n	800ae4e <f_write+0x82>
				fp->flag &= ~FA__DIRTY;
 800ae80:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800ae84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae88:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800ae8c:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 800ae90:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 800ae94:	4650      	mov	r0, sl
 800ae96:	f7ff fadb 	bl	800a450 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	d0cb      	beq.n	800ae36 <f_write+0x6a>
			sect += csect;
 800ae9e:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800aea0:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 800aea2:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 800aea6:	d04e      	beq.n	800af46 <f_write+0x17a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800aea8:	9a01      	ldr	r2, [sp, #4]
 800aeaa:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800aeae:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800aeb2:	442a      	add	r2, r5
 800aeb4:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 800aeb6:	bf84      	itt	hi
 800aeb8:	9a01      	ldrhi	r2, [sp, #4]
 800aeba:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800aebc:	462b      	mov	r3, r5
 800aebe:	4642      	mov	r2, r8
 800aec0:	4649      	mov	r1, r9
 800aec2:	f7fe ff07 	bl	8009cd4 <disk_write>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	d1c1      	bne.n	800ae4e <f_write+0x82>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800aeca:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 800aece:	eba1 0108 	sub.w	r1, r1, r8
 800aed2:	428d      	cmp	r5, r1
 800aed4:	d90c      	bls.n	800aef0 <f_write+0x124>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800aed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aeda:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 800aede:	4620      	mov	r0, r4
 800aee0:	f7fe ff7c 	bl	8009ddc <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800aee4:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800aee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aeec:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800aef0:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800aef2:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800aef6:	442b      	add	r3, r5
 800aef8:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 800aefc:	f8db 3000 	ldr.w	r3, [fp]
 800af00:	442b      	add	r3, r5
 800af02:	44a9      	add	r9, r5
 800af04:	f8cb 3000 	str.w	r3, [fp]
 800af08:	1b7f      	subs	r7, r7, r5
	for ( ;  btw;							/* Repeat until all data written */
 800af0a:	2f00      	cmp	r7, #0
 800af0c:	f43f af7a 	beq.w	800ae04 <f_write+0x38>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800af10:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 800af14:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800af18:	bb5b      	cbnz	r3, 800af72 <f_write+0x1a6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800af1a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800af1e:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 800af22:	3b01      	subs	r3, #1
 800af24:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 800af28:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800af2c:	9301      	str	r3, [sp, #4]
 800af2e:	d197      	bne.n	800ae60 <f_write+0x94>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800af30:	2900      	cmp	r1, #0
 800af32:	f47f af75 	bne.w	800ae20 <f_write+0x54>
					clst = fp->sclust;		/* Follow from the origin */
 800af36:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 800af3a:	2900      	cmp	r1, #0
 800af3c:	f47f af79 	bne.w	800ae32 <f_write+0x66>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800af40:	f7ff fbdf 	bl	800a702 <create_chain>
 800af44:	e772      	b.n	800ae2c <f_write+0x60>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800af46:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800af4a:	4598      	cmp	r8, r3
 800af4c:	d00f      	beq.n	800af6e <f_write+0x1a2>
				if (fp->fptr < fp->fsize &&
 800af4e:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 800af52:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800af56:	429a      	cmp	r2, r3
 800af58:	d209      	bcs.n	800af6e <f_write+0x1a2>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800af5a:	2301      	movs	r3, #1
 800af5c:	4642      	mov	r2, r8
 800af5e:	4621      	mov	r1, r4
 800af60:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 800af64:	f7fe fea8 	bl	8009cb8 <disk_read>
				if (fp->fptr < fp->fsize &&
 800af68:	2800      	cmp	r0, #0
 800af6a:	f47f af70 	bne.w	800ae4e <f_write+0x82>
			fp->dsect = sect;
 800af6e:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800af72:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 800af76:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800af7a:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 800af7e:	42bd      	cmp	r5, r7
 800af80:	bf28      	it	cs
 800af82:	463d      	movcs	r5, r7
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800af84:	462a      	mov	r2, r5
 800af86:	4649      	mov	r1, r9
 800af88:	4420      	add	r0, r4
 800af8a:	f7fe ff27 	bl	8009ddc <mem_cpy>
		fp->flag |= FA__DIRTY;
 800af8e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800af92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af96:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800af9a:	e7aa      	b.n	800aef2 <f_write+0x126>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800af9c:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 800afa0:	e737      	b.n	800ae12 <f_write+0x46>
 800afa2:	461e      	mov	r6, r3
 800afa4:	e74a      	b.n	800ae3c <f_write+0x70>
		LEAVE_FF(fp->fs, FR_DENIED);
 800afa6:	2607      	movs	r6, #7
 800afa8:	e748      	b.n	800ae3c <f_write+0x70>

0800afaa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800afaa:	b570      	push	{r4, r5, r6, lr}
 800afac:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800afae:	f7ff f813 	bl	8009fd8 <validate>
	if (res == FR_OK) {
 800afb2:	2800      	cmp	r0, #0
 800afb4:	d158      	bne.n	800b068 <f_sync+0xbe>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800afb6:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800afba:	069a      	lsls	r2, r3, #26
 800afbc:	d554      	bpl.n	800b068 <f_sync+0xbe>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800afbe:	065b      	lsls	r3, r3, #25
 800afc0:	d511      	bpl.n	800afe6 <f_sync+0x3c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800afc2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800afc6:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800afca:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800afce:	2301      	movs	r3, #1
 800afd0:	4621      	mov	r1, r4
 800afd2:	f7fe fe7f 	bl	8009cd4 <disk_write>
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d145      	bne.n	800b066 <f_sync+0xbc>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 800afda:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800afde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afe2:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800afe6:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 800afea:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800afee:	f7ff f8a5 	bl	800a13c <move_window>
 800aff2:	4606      	mov	r6, r0
			if (res == FR_OK) {
 800aff4:	bbc0      	cbnz	r0, 800b068 <f_sync+0xbe>
				dir = fp->dir_ptr;
 800aff6:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800affa:	7aeb      	ldrb	r3, [r5, #11]
 800affc:	f043 0320 	orr.w	r3, r3, #32
 800b000:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800b002:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800b006:	772b      	strb	r3, [r5, #28]
 800b008:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 800b00c:	0a1b      	lsrs	r3, r3, #8
 800b00e:	776b      	strb	r3, [r5, #29]
 800b010:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800b014:	77ab      	strb	r3, [r5, #30]
 800b016:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 800b01a:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800b01c:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 800b020:	76ab      	strb	r3, [r5, #26]
 800b022:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800b026:	0c1b      	lsrs	r3, r3, #16
 800b028:	752b      	strb	r3, [r5, #20]
 800b02a:	0a1b      	lsrs	r3, r3, #8
 800b02c:	756b      	strb	r3, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800b02e:	76ea      	strb	r2, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 800b030:	f7f6 f99c 	bl	800136c <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 800b034:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b038:	75a8      	strb	r0, [r5, #22]
 800b03a:	75eb      	strb	r3, [r5, #23]
 800b03c:	0c03      	lsrs	r3, r0, #16
 800b03e:	0e00      	lsrs	r0, r0, #24
 800b040:	762b      	strb	r3, [r5, #24]
 800b042:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800b044:	74ae      	strb	r6, [r5, #18]
 800b046:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 800b048:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 800b04c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 800b050:	f023 0320 	bic.w	r3, r3, #32
 800b054:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 800b058:	2301      	movs	r3, #1
 800b05a:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 800b05e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 800b062:	f7ff b80e 	b.w	800a082 <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800b066:	2001      	movs	r0, #1
}
 800b068:	bd70      	pop	{r4, r5, r6, pc}

0800b06a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800b06a:	b510      	push	{r4, lr}
 800b06c:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b06e:	f7ff ff9c 	bl	800afaa <f_sync>
	if (res == FR_OK)
 800b072:	b950      	cbnz	r0, 800b08a <f_close+0x20>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800b074:	4620      	mov	r0, r4
 800b076:	f7fe ffaf 	bl	8009fd8 <validate>
		if (res == FR_OK) {
 800b07a:	b930      	cbnz	r0, 800b08a <f_close+0x20>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800b07c:	f8d4 0228 	ldr.w	r0, [r4, #552]	; 0x228
 800b080:	f7fe ff34 	bl	8009eec <dec_lock>
			if (res == FR_OK)
 800b084:	b908      	cbnz	r0, 800b08a <f_close+0x20>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800b086:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800b08a:	bd10      	pop	{r4, pc}

0800b08c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800b08c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b090:	4604      	mov	r4, r0
 800b092:	460d      	mov	r5, r1
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800b094:	f7fe ffa0 	bl	8009fd8 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800b098:	4606      	mov	r6, r0
 800b09a:	bb10      	cbnz	r0, 800b0e2 <f_lseek+0x56>
	if (fp->err)						/* Check error */
 800b09c:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	f040 813e 	bne.w	800b322 <f_lseek+0x296>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b0a6:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	f000 8087 	beq.w	800b1be <f_lseek+0x132>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b0b0:	1c6a      	adds	r2, r5, #1
 800b0b2:	d13d      	bne.n	800b130 <f_lseek+0xa4>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
			cl = fp->sclust;			/* Top of the chain */
 800b0b4:	f8d4 7210 	ldr.w	r7, [r4, #528]	; 0x210
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b0b8:	f8d3 b000 	ldr.w	fp, [r3]
 800b0bc:	f103 0a04 	add.w	sl, r3, #4
 800b0c0:	2502      	movs	r5, #2
			if (cl) {
 800b0c2:	b35f      	cbz	r7, 800b11c <f_lseek+0x90>
 800b0c4:	46b8      	mov	r8, r7
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b0c6:	f04f 0900 	mov.w	r9, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(fp->fs, cl);
 800b0ca:	4641      	mov	r1, r8
 800b0cc:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800b0d0:	f7ff f9cc 	bl	800a46c <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800b0d4:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 800b0d6:	f109 0901 	add.w	r9, r9, #1
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800b0da:	d807      	bhi.n	800b0ec <f_lseek+0x60>
 800b0dc:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b0de:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e8:	4607      	mov	r7, r0
 800b0ea:	e7eb      	b.n	800b0c4 <f_lseek+0x38>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b0ec:	1c43      	adds	r3, r0, #1
 800b0ee:	d101      	bne.n	800b0f4 <f_lseek+0x68>
 800b0f0:	2601      	movs	r6, #1
 800b0f2:	e7f4      	b.n	800b0de <f_lseek+0x52>
					} while (cl == pcl + 1);
 800b0f4:	f108 0301 	add.w	r3, r8, #1
 800b0f8:	4298      	cmp	r0, r3
 800b0fa:	4680      	mov	r8, r0
 800b0fc:	d0e5      	beq.n	800b0ca <f_lseek+0x3e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b0fe:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b100:	45ab      	cmp	fp, r5
						*tbl++ = ncl; *tbl++ = tcl;
 800b102:	bf21      	itttt	cs
 800b104:	4653      	movcs	r3, sl
 800b106:	f843 9b08 	strcs.w	r9, [r3], #8
 800b10a:	f8ca 7004 	strcs.w	r7, [sl, #4]
 800b10e:	469a      	movcs	sl, r3
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800b110:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800b114:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b118:	4298      	cmp	r0, r3
 800b11a:	d3e5      	bcc.n	800b0e8 <f_lseek+0x5c>
			*fp->cltbl = ulen;	/* Number of items used */
 800b11c:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
			if (ulen <= tlen)
 800b120:	455d      	cmp	r5, fp
			*fp->cltbl = ulen;	/* Number of items used */
 800b122:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen)
 800b124:	f200 80ff 	bhi.w	800b326 <f_lseek+0x29a>
				*tbl = 0;		/* Terminate table */
 800b128:	2300      	movs	r3, #0
 800b12a:	f8ca 3000 	str.w	r3, [sl]
 800b12e:	e7d8      	b.n	800b0e2 <f_lseek+0x56>
 800b130:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
 800b134:	4285      	cmp	r5, r0
 800b136:	bf28      	it	cs
 800b138:	4605      	movcs	r5, r0
			fp->fptr = ofs;				/* Set file pointer */
 800b13a:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
			if (ofs) {
 800b13e:	2d00      	cmp	r5, #0
 800b140:	d0cf      	beq.n	800b0e2 <f_lseek+0x56>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b142:	f105 38ff 	add.w	r8, r5, #4294967295
 800b146:	4641      	mov	r1, r8
 800b148:	4620      	mov	r0, r4
 800b14a:	f7fe feeb 	bl	8009f24 <clmt_clust>
				dsc = clust2sect(fp->fs, fp->clust);
 800b14e:	f8d4 7200 	ldr.w	r7, [r4, #512]	; 0x200
				fp->clust = clmt_clust(fp, ofs - 1);
 800b152:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
 800b156:	4601      	mov	r1, r0
				dsc = clust2sect(fp->fs, fp->clust);
 800b158:	4638      	mov	r0, r7
 800b15a:	f7ff f979 	bl	800a450 <clust2sect>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800b15e:	2800      	cmp	r0, #0
 800b160:	d0bc      	beq.n	800b0dc <f_lseek+0x50>
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800b162:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800b166:	2d00      	cmp	r5, #0
 800b168:	d0bb      	beq.n	800b0e2 <f_lseek+0x56>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800b16a:	f897 5202 	ldrb.w	r5, [r7, #514]	; 0x202
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800b16e:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800b172:	3d01      	subs	r5, #1
 800b174:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 800b178:	4405      	add	r5, r0
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800b17a:	4295      	cmp	r5, r2
 800b17c:	d0b1      	beq.n	800b0e2 <f_lseek+0x56>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800b17e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800b182:	0659      	lsls	r1, r3, #25
 800b184:	d50d      	bpl.n	800b1a2 <f_lseek+0x116>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b186:	2301      	movs	r3, #1
 800b188:	4621      	mov	r1, r4
 800b18a:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 800b18e:	f7fe fda1 	bl	8009cd4 <disk_write>
 800b192:	2800      	cmp	r0, #0
 800b194:	d1ac      	bne.n	800b0f0 <f_lseek+0x64>
						fp->flag &= ~FA__DIRTY;
 800b196:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800b19a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b19e:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800b1a2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	462a      	mov	r2, r5
 800b1aa:	4621      	mov	r1, r4
 800b1ac:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800b1b0:	f7fe fd82 	bl	8009cb8 <disk_read>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d19b      	bne.n	800b0f0 <f_lseek+0x64>
					fp->dsect = dsc;
 800b1b8:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 800b1bc:	e791      	b.n	800b0e2 <f_lseek+0x56>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800b1be:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800b1c2:	429d      	cmp	r5, r3
 800b1c4:	d905      	bls.n	800b1d2 <f_lseek+0x146>
			 && !(fp->flag & FA_WRITE)
 800b1c6:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 800b1ca:	f012 0f02 	tst.w	r2, #2
 800b1ce:	bf08      	it	eq
 800b1d0:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 800b1d2:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 800b1d4:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
		fp->fptr = nsect = 0;
 800b1d8:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
		if (ofs) {
 800b1dc:	2d00      	cmp	r5, #0
 800b1de:	d13e      	bne.n	800b25e <f_lseek+0x1d2>
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800b1e0:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800b1e4:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	f67f af7a 	bls.w	800b0e2 <f_lseek+0x56>
			fp->fsize = fp->fptr;
 800b1ee:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 800b1f2:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800b1f6:	f043 0320 	orr.w	r3, r3, #32
 800b1fa:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800b1fe:	e770      	b.n	800b0e2 <f_lseek+0x56>
		fp->fptr = nsect = 0;
 800b200:	2500      	movs	r5, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800b202:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800b206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d0e8      	beq.n	800b1e0 <f_lseek+0x154>
 800b20e:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800b212:	4295      	cmp	r5, r2
 800b214:	d0e4      	beq.n	800b1e0 <f_lseek+0x154>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800b216:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800b21a:	065b      	lsls	r3, r3, #25
 800b21c:	d510      	bpl.n	800b240 <f_lseek+0x1b4>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b21e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800b222:	2301      	movs	r3, #1
 800b224:	4621      	mov	r1, r4
 800b226:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800b22a:	f7fe fd53 	bl	8009cd4 <disk_write>
 800b22e:	2800      	cmp	r0, #0
 800b230:	f47f af5e 	bne.w	800b0f0 <f_lseek+0x64>
				fp->flag &= ~FA__DIRTY;
 800b234:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800b238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b23c:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800b240:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800b244:	2301      	movs	r3, #1
 800b246:	462a      	mov	r2, r5
 800b248:	4621      	mov	r1, r4
 800b24a:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800b24e:	f7fe fd33 	bl	8009cb8 <disk_read>
 800b252:	2800      	cmp	r0, #0
 800b254:	f47f af4c 	bne.w	800b0f0 <f_lseek+0x64>
			fp->dsect = nsect;
 800b258:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 800b25c:	e7c0      	b.n	800b1e0 <f_lseek+0x154>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800b25e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800b262:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 800b266:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 800b268:	b32b      	cbz	r3, 800b2b6 <f_lseek+0x22a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b26a:	3b01      	subs	r3, #1
 800b26c:	1e6a      	subs	r2, r5, #1
 800b26e:	fbb3 f1f7 	udiv	r1, r3, r7
 800b272:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 800b276:	428a      	cmp	r2, r1
 800b278:	d31d      	bcc.n	800b2b6 <f_lseek+0x22a>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800b27a:	427a      	negs	r2, r7
 800b27c:	4013      	ands	r3, r2
				clst = fp->clust;
 800b27e:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800b282:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				ofs -= fp->fptr;
 800b286:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 800b288:	2900      	cmp	r1, #0
 800b28a:	d0b9      	beq.n	800b200 <f_lseek+0x174>
				while (ofs > bcs) {						/* Cluster following loop */
 800b28c:	42bd      	cmp	r5, r7
 800b28e:	d823      	bhi.n	800b2d8 <f_lseek+0x24c>
				fp->fptr += ofs;
 800b290:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800b294:	442b      	add	r3, r5
 800b296:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 800b29a:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d0ae      	beq.n	800b200 <f_lseek+0x174>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800b2a2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800b2a6:	f7ff f8d3 	bl	800a450 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	f43f af16 	beq.w	800b0dc <f_lseek+0x50>
					nsect += ofs / SS(fp->fs);
 800b2b0:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 800b2b4:	e7a5      	b.n	800b202 <f_lseek+0x176>
				clst = fp->sclust;						/* start from the first cluster */
 800b2b6:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b2ba:	b951      	cbnz	r1, 800b2d2 <f_lseek+0x246>
					clst = create_chain(fp->fs, 0);
 800b2bc:	f7ff fa21 	bl	800a702 <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b2c0:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 800b2c2:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b2c4:	f43f af0a 	beq.w	800b0dc <f_lseek+0x50>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b2c8:	1c42      	adds	r2, r0, #1
 800b2ca:	f43f af11 	beq.w	800b0f0 <f_lseek+0x64>
					fp->sclust = clst;
 800b2ce:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
				fp->clust = clst;
 800b2d2:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
 800b2d6:	e7d7      	b.n	800b288 <f_lseek+0x1fc>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b2d8:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800b2dc:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b2e0:	079b      	lsls	r3, r3, #30
 800b2e2:	d505      	bpl.n	800b2f0 <f_lseek+0x264>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800b2e4:	f7ff fa0d 	bl	800a702 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 800b2e8:	4601      	mov	r1, r0
 800b2ea:	b920      	cbnz	r0, 800b2f6 <f_lseek+0x26a>
 800b2ec:	463d      	mov	r5, r7
 800b2ee:	e7cf      	b.n	800b290 <f_lseek+0x204>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800b2f0:	f7ff f8bc 	bl	800a46c <get_fat>
 800b2f4:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b2f6:	1c4a      	adds	r2, r1, #1
 800b2f8:	f43f aefa 	beq.w	800b0f0 <f_lseek+0x64>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800b2fc:	2901      	cmp	r1, #1
 800b2fe:	f67f aeed 	bls.w	800b0dc <f_lseek+0x50>
 800b302:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800b306:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b30a:	4299      	cmp	r1, r3
 800b30c:	f4bf aee6 	bcs.w	800b0dc <f_lseek+0x50>
					fp->fptr += bcs;
 800b310:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
					fp->clust = clst;
 800b314:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
					fp->fptr += bcs;
 800b318:	443b      	add	r3, r7
 800b31a:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
					ofs -= bcs;
 800b31e:	1bed      	subs	r5, r5, r7
 800b320:	e7b4      	b.n	800b28c <f_lseek+0x200>
 800b322:	461e      	mov	r6, r3
 800b324:	e6dd      	b.n	800b0e2 <f_lseek+0x56>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b326:	2611      	movs	r6, #17
 800b328:	e6db      	b.n	800b0e2 <f_lseek+0x56>

0800b32a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b32a:	b530      	push	{r4, r5, lr}
 800b32c:	b087      	sub	sp, #28
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 800b32e:	4605      	mov	r5, r0
{
 800b330:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 800b332:	2800      	cmp	r0, #0
 800b334:	d045      	beq.n	800b3c2 <f_opendir+0x98>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800b336:	2200      	movs	r2, #0
 800b338:	a901      	add	r1, sp, #4
 800b33a:	a802      	add	r0, sp, #8
 800b33c:	f7fe ff48 	bl	800a1d0 <find_volume>
	if (res == FR_OK) {
 800b340:	4604      	mov	r4, r0
 800b342:	bb30      	cbnz	r0, 800b392 <f_opendir+0x68>
		dp->fs = fs;
 800b344:	9b02      	ldr	r3, [sp, #8]
 800b346:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
		INIT_BUF(*dp);
 800b34a:	ab03      	add	r3, sp, #12
 800b34c:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b350:	9901      	ldr	r1, [sp, #4]
 800b352:	4628      	mov	r0, r5
 800b354:	f7ff fabe 	bl	800a8d4 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800b358:	4604      	mov	r4, r0
 800b35a:	b9b8      	cbnz	r0, 800b38c <f_opendir+0x62>
			if (dp->dir) {						/* It is not the origin directory itself */
 800b35c:	f8d5 1214 	ldr.w	r1, [r5, #532]	; 0x214
 800b360:	b149      	cbz	r1, 800b376 <f_opendir+0x4c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 800b362:	7acb      	ldrb	r3, [r1, #11]
 800b364:	06db      	lsls	r3, r3, #27
 800b366:	d528      	bpl.n	800b3ba <f_opendir+0x90>
					dp->sclust = ld_clust(fs, dp->dir);
 800b368:	9b02      	ldr	r3, [sp, #8]
 800b36a:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800b36e:	f7fe fe4a 	bl	800a006 <ld_clust.isra.0>
 800b372:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
				else							/* The object is a file */
					res = FR_NO_PATH;
			}
			if (res == FR_OK) {
				dp->id = fs->id;
 800b376:	9b02      	ldr	r3, [sp, #8]
 800b378:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800b37c:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b380:	2100      	movs	r1, #0
 800b382:	4628      	mov	r0, r5
 800b384:	f7ff f8d3 	bl	800a52e <dir_sdi>
#if _FS_LOCK
				if (res == FR_OK) {
 800b388:	4604      	mov	r4, r0
 800b38a:	b130      	cbz	r0, 800b39a <f_opendir+0x70>
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b38c:	2c04      	cmp	r4, #4
 800b38e:	bf08      	it	eq
 800b390:	2405      	moveq	r4, #5
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800b392:	2300      	movs	r3, #0
 800b394:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
 800b398:	e009      	b.n	800b3ae <f_opendir+0x84>
					if (dp->sclust) {
 800b39a:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 800b39e:	b14b      	cbz	r3, 800b3b4 <f_opendir+0x8a>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b3a0:	4621      	mov	r1, r4
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	f7fe fd5e 	bl	8009e64 <inc_lock>
 800b3a8:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
						if (!dp->lockid)
 800b3ac:	b138      	cbz	r0, 800b3be <f_opendir+0x94>

	LEAVE_FF(fs, res);
}
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	b007      	add	sp, #28
 800b3b2:	bd30      	pop	{r4, r5, pc}
						dp->lockid = 0;	/* Root directory need not to be locked */
 800b3b4:	f8c5 421c 	str.w	r4, [r5, #540]	; 0x21c
 800b3b8:	e7f9      	b.n	800b3ae <f_opendir+0x84>
					res = FR_NO_PATH;
 800b3ba:	2405      	movs	r4, #5
 800b3bc:	e7e9      	b.n	800b392 <f_opendir+0x68>
							res = FR_TOO_MANY_OPEN_FILES;
 800b3be:	2412      	movs	r4, #18
 800b3c0:	e7e7      	b.n	800b392 <f_opendir+0x68>
	if (!dp) return FR_INVALID_OBJECT;
 800b3c2:	2409      	movs	r4, #9
 800b3c4:	e7f3      	b.n	800b3ae <f_opendir+0x84>

0800b3c6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b3c6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b3c8:	4605      	mov	r5, r0
 800b3ca:	460e      	mov	r6, r1
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 800b3cc:	f7fe fe04 	bl	8009fd8 <validate>
	if (res == FR_OK) {
 800b3d0:	4604      	mov	r4, r0
 800b3d2:	b9e8      	cbnz	r0, 800b410 <f_readdir+0x4a>
		if (!fno) {
 800b3d4:	b92e      	cbnz	r6, 800b3e2 <f_readdir+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b3d6:	4601      	mov	r1, r0
 800b3d8:	4628      	mov	r0, r5
 800b3da:	f7ff f8a8 	bl	800a52e <dir_sdi>
 800b3de:	4604      	mov	r4, r0
 800b3e0:	e016      	b.n	800b410 <f_readdir+0x4a>
		} else {
			INIT_BUF(*dp);
 800b3e2:	ab01      	add	r3, sp, #4
 800b3e4:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	f7ff fb47 	bl	800aa7c <dir_read.constprop.13>
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800b3ee:	2804      	cmp	r0, #4
 800b3f0:	d111      	bne.n	800b416 <f_readdir+0x50>
				dp->sect = 0;
 800b3f2:	f8c5 4210 	str.w	r4, [r5, #528]	; 0x210
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
 800b3f6:	4631      	mov	r1, r6
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	f7fe fda7 	bl	8009f4c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b3fe:	2100      	movs	r1, #0
 800b400:	4628      	mov	r0, r5
 800b402:	f7ff f9d7 	bl	800a7b4 <dir_next>
				if (res == FR_NO_FILE) {
 800b406:	2804      	cmp	r0, #4
 800b408:	d1e9      	bne.n	800b3de <f_readdir+0x18>
					dp->sect = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
}
 800b410:	4620      	mov	r0, r4
 800b412:	b004      	add	sp, #16
 800b414:	bd70      	pop	{r4, r5, r6, pc}
			if (res == FR_OK) {				/* A valid entry is found */
 800b416:	2800      	cmp	r0, #0
 800b418:	d1e1      	bne.n	800b3de <f_readdir+0x18>
 800b41a:	e7ec      	b.n	800b3f6 <f_readdir+0x30>

0800b41c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800b41c:	b530      	push	{r4, r5, lr}
 800b41e:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
	DWORD dclst = 0;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 800b422:	2201      	movs	r2, #1
{
 800b424:	9001      	str	r0, [sp, #4]
	res = find_volume(&dj.fs, &path, 1);
 800b426:	a901      	add	r1, sp, #4
 800b428:	a886      	add	r0, sp, #536	; 0x218
 800b42a:	f7fe fed1 	bl	800a1d0 <find_volume>
	if (res == FR_OK) {
 800b42e:	b988      	cbnz	r0, 800b454 <f_unlink+0x38>
		INIT_BUF(dj);
 800b430:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);		/* Follow the file path */
 800b432:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800b434:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);		/* Follow the file path */
 800b436:	a806      	add	r0, sp, #24
 800b438:	f7ff fa4c 	bl	800a8d4 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
 800b43c:	b950      	cbnz	r0, 800b454 <f_unlink+0x38>
 800b43e:	2102      	movs	r1, #2
 800b440:	a806      	add	r0, sp, #24
 800b442:	f7fe fcdd 	bl	8009e00 <chk_lock>
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b446:	b928      	cbnz	r0, 800b454 <f_unlink+0x38>
			dir = dj.dir;
 800b448:	998b      	ldr	r1, [sp, #556]	; 0x22c
			if (!dir) {
 800b44a:	b169      	cbz	r1, 800b468 <f_unlink+0x4c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 800b44c:	7acd      	ldrb	r5, [r1, #11]
 800b44e:	07ea      	lsls	r2, r5, #31
 800b450:	d50c      	bpl.n	800b46c <f_unlink+0x50>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b452:	2007      	movs	r0, #7
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
 800b454:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c
 800b458:	bd30      	pop	{r4, r5, pc}
					res = remove_chain(dj.fs, dclst);
 800b45a:	4621      	mov	r1, r4
 800b45c:	9886      	ldr	r0, [sp, #536]	; 0x218
 800b45e:	f7ff fb74 	bl	800ab4a <remove_chain>
				if (res == FR_OK) res = sync_fs(dj.fs);
 800b462:	2800      	cmp	r0, #0
 800b464:	d1f6      	bne.n	800b454 <f_unlink+0x38>
 800b466:	e026      	b.n	800b4b6 <f_unlink+0x9a>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b468:	2006      	movs	r0, #6
 800b46a:	e7f3      	b.n	800b454 <f_unlink+0x38>
				dclst = ld_clust(dj.fs, dir);
 800b46c:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800b46e:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800b472:	f7fe fdc8 	bl	800a006 <ld_clust.isra.0>
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 800b476:	4604      	mov	r4, r0
 800b478:	b1b0      	cbz	r0, 800b4a8 <f_unlink+0x8c>
 800b47a:	06eb      	lsls	r3, r5, #27
 800b47c:	d514      	bpl.n	800b4a8 <f_unlink+0x8c>
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 800b47e:	a906      	add	r1, sp, #24
 800b480:	a88e      	add	r0, sp, #568	; 0x238
 800b482:	f44f 7208 	mov.w	r2, #544	; 0x220
 800b486:	f7fe fca9 	bl	8009ddc <mem_cpy>
						res = dir_sdi(&sdj, 2);
 800b48a:	2102      	movs	r1, #2
 800b48c:	a88e      	add	r0, sp, #568	; 0x238
						sdj.sclust = dclst;
 800b48e:	f8cd 4440 	str.w	r4, [sp, #1088]	; 0x440
						res = dir_sdi(&sdj, 2);
 800b492:	f7ff f84c 	bl	800a52e <dir_sdi>
						if (res == FR_OK) {
 800b496:	2800      	cmp	r0, #0
 800b498:	d1dc      	bne.n	800b454 <f_unlink+0x38>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 800b49a:	a88e      	add	r0, sp, #568	; 0x238
 800b49c:	f7ff faee 	bl	800aa7c <dir_read.constprop.13>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	d0d6      	beq.n	800b452 <f_unlink+0x36>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 800b4a4:	2804      	cmp	r0, #4
 800b4a6:	d1d5      	bne.n	800b454 <f_unlink+0x38>
				res = dir_remove(&dj);		/* Remove the directory entry */
 800b4a8:	a806      	add	r0, sp, #24
 800b4aa:	f7ff f88f 	bl	800a5cc <dir_remove>
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d1d0      	bne.n	800b454 <f_unlink+0x38>
 800b4b2:	2c00      	cmp	r4, #0
 800b4b4:	d1d1      	bne.n	800b45a <f_unlink+0x3e>
				if (res == FR_OK) res = sync_fs(dj.fs);
 800b4b6:	9886      	ldr	r0, [sp, #536]	; 0x218
 800b4b8:	f7fe fde3 	bl	800a082 <sync_fs>
 800b4bc:	e7ca      	b.n	800b454 <f_unlink+0x38>

0800b4be <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the time stamp to be set */
)
{
 800b4be:	b510      	push	{r4, lr}
 800b4c0:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800b4c4:	460c      	mov	r4, r1
 800b4c6:	9001      	str	r0, [sp, #4]
	BYTE *dir;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	a901      	add	r1, sp, #4
 800b4cc:	a886      	add	r0, sp, #536	; 0x218
 800b4ce:	f7fe fe7f 	bl	800a1d0 <find_volume>
	if (res == FR_OK) {
 800b4d2:	b9c0      	cbnz	r0, 800b506 <f_utime+0x48>
		INIT_BUF(dj);
 800b4d4:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 800b4d6:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800b4d8:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 800b4da:	a806      	add	r0, sp, #24
 800b4dc:	f7ff f9fa 	bl	800a8d4 <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
 800b4e0:	b988      	cbnz	r0, 800b506 <f_utime+0x48>
			dir = dj.dir;
 800b4e2:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
			if (!dir) {					/* Root directory */
 800b4e4:	b193      	cbz	r3, 800b50c <f_utime+0x4e>
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir + DIR_WrtTime, fno->ftime);
 800b4e6:	88e2      	ldrh	r2, [r4, #6]
 800b4e8:	759a      	strb	r2, [r3, #22]
 800b4ea:	88e2      	ldrh	r2, [r4, #6]
 800b4ec:	0a12      	lsrs	r2, r2, #8
 800b4ee:	75da      	strb	r2, [r3, #23]
				ST_WORD(dir + DIR_WrtDate, fno->fdate);
 800b4f0:	88a2      	ldrh	r2, [r4, #4]
 800b4f2:	761a      	strb	r2, [r3, #24]
 800b4f4:	88a2      	ldrh	r2, [r4, #4]
 800b4f6:	0a12      	lsrs	r2, r2, #8
 800b4f8:	765a      	strb	r2, [r3, #25]
				dj.fs->wflag = 1;
 800b4fa:	9886      	ldr	r0, [sp, #536]	; 0x218
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
				res = sync_fs(dj.fs);
 800b502:	f7fe fdbe 	bl	800a082 <sync_fs>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
 800b506:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800b50a:	bd10      	pop	{r4, pc}
				res = FR_INVALID_NAME;
 800b50c:	2006      	movs	r0, #6
 800b50e:	e7fa      	b.n	800b506 <f_utime+0x48>

0800b510 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b510:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 800b512:	4b0f      	ldr	r3, [pc, #60]	; (800b550 <FATFS_LinkDriverEx+0x40>)
 800b514:	7a5c      	ldrb	r4, [r3, #9]
 800b516:	2c01      	cmp	r4, #1
 800b518:	d818      	bhi.n	800b54c <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b51a:	7a5d      	ldrb	r5, [r3, #9]
 800b51c:	b2ed      	uxtb	r5, r5
 800b51e:	2400      	movs	r4, #0
 800b520:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 800b522:	7a5d      	ldrb	r5, [r3, #9]
 800b524:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b528:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 800b52a:	7a58      	ldrb	r0, [r3, #9]
 800b52c:	4418      	add	r0, r3
 800b52e:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800b530:	7a5a      	ldrb	r2, [r3, #9]
 800b532:	b2d2      	uxtb	r2, r2
 800b534:	1c50      	adds	r0, r2, #1
 800b536:	b2c0      	uxtb	r0, r0
 800b538:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 800b53a:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800b53c:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 800b53e:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800b540:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800b542:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800b544:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800b546:	70cc      	strb	r4, [r1, #3]
 800b548:	4620      	mov	r0, r4
 800b54a:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800b54c:	2001      	movs	r0, #1
    ret = 0;
  }
  
  return ret;
}
 800b54e:	bd30      	pop	{r4, r5, pc}
 800b550:	200005f8 	.word	0x200005f8

0800b554 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800b554:	2200      	movs	r2, #0
 800b556:	f7ff bfdb 	b.w	800b510 <FATFS_LinkDriverEx>
	...

0800b55c <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{ 
  uint8_t DiskNum = 0;
  uint8_t ret = 1;
  
  if(disk.nbr >= 1)
 800b55c:	4a0a      	ldr	r2, [pc, #40]	; (800b588 <FATFS_UnLinkDriverEx+0x2c>)
 800b55e:	7a53      	ldrb	r3, [r2, #9]
 800b560:	b17b      	cbz	r3, 800b582 <FATFS_UnLinkDriverEx+0x26>
  {    
    DiskNum = path[0] - '0';
 800b562:	7803      	ldrb	r3, [r0, #0]
 800b564:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 800b566:	b2db      	uxtb	r3, r3
 800b568:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b56c:	6848      	ldr	r0, [r1, #4]
 800b56e:	b140      	cbz	r0, 800b582 <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 800b570:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 800b572:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 800b574:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 800b576:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 800b578:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 800b57a:	3b01      	subs	r3, #1
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	7253      	strb	r3, [r2, #9]
 800b580:	4770      	bx	lr
  uint8_t ret = 1;
 800b582:	2001      	movs	r0, #1
      ret = 0;
    }
  }
  
  return ret;
}
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	200005f8 	.word	0x200005f8

0800b58c <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path  
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{ 
  return FATFS_UnLinkDriverEx(path, 0);
 800b58c:	2100      	movs	r1, #0
 800b58e:	f7ff bfe5 	b.w	800b55c <FATFS_UnLinkDriverEx>
	...

0800b594 <__libc_init_array>:
 800b594:	b570      	push	{r4, r5, r6, lr}
 800b596:	4e0d      	ldr	r6, [pc, #52]	; (800b5cc <__libc_init_array+0x38>)
 800b598:	4c0d      	ldr	r4, [pc, #52]	; (800b5d0 <__libc_init_array+0x3c>)
 800b59a:	1ba4      	subs	r4, r4, r6
 800b59c:	10a4      	asrs	r4, r4, #2
 800b59e:	2500      	movs	r5, #0
 800b5a0:	42a5      	cmp	r5, r4
 800b5a2:	d109      	bne.n	800b5b8 <__libc_init_array+0x24>
 800b5a4:	4e0b      	ldr	r6, [pc, #44]	; (800b5d4 <__libc_init_array+0x40>)
 800b5a6:	4c0c      	ldr	r4, [pc, #48]	; (800b5d8 <__libc_init_array+0x44>)
 800b5a8:	f002 f9b0 	bl	800d90c <_init>
 800b5ac:	1ba4      	subs	r4, r4, r6
 800b5ae:	10a4      	asrs	r4, r4, #2
 800b5b0:	2500      	movs	r5, #0
 800b5b2:	42a5      	cmp	r5, r4
 800b5b4:	d105      	bne.n	800b5c2 <__libc_init_array+0x2e>
 800b5b6:	bd70      	pop	{r4, r5, r6, pc}
 800b5b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b5bc:	4798      	blx	r3
 800b5be:	3501      	adds	r5, #1
 800b5c0:	e7ee      	b.n	800b5a0 <__libc_init_array+0xc>
 800b5c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b5c6:	4798      	blx	r3
 800b5c8:	3501      	adds	r5, #1
 800b5ca:	e7f2      	b.n	800b5b2 <__libc_init_array+0x1e>
 800b5cc:	0800e010 	.word	0x0800e010
 800b5d0:	0800e010 	.word	0x0800e010
 800b5d4:	0800e010 	.word	0x0800e010
 800b5d8:	0800e014 	.word	0x0800e014

0800b5dc <malloc>:
 800b5dc:	4b02      	ldr	r3, [pc, #8]	; (800b5e8 <malloc+0xc>)
 800b5de:	4601      	mov	r1, r0
 800b5e0:	6818      	ldr	r0, [r3, #0]
 800b5e2:	f000 b86d 	b.w	800b6c0 <_malloc_r>
 800b5e6:	bf00      	nop
 800b5e8:	200002ac 	.word	0x200002ac

0800b5ec <free>:
 800b5ec:	4b02      	ldr	r3, [pc, #8]	; (800b5f8 <free+0xc>)
 800b5ee:	4601      	mov	r1, r0
 800b5f0:	6818      	ldr	r0, [r3, #0]
 800b5f2:	f000 b817 	b.w	800b624 <_free_r>
 800b5f6:	bf00      	nop
 800b5f8:	200002ac 	.word	0x200002ac

0800b5fc <memcpy>:
 800b5fc:	b510      	push	{r4, lr}
 800b5fe:	1e43      	subs	r3, r0, #1
 800b600:	440a      	add	r2, r1
 800b602:	4291      	cmp	r1, r2
 800b604:	d100      	bne.n	800b608 <memcpy+0xc>
 800b606:	bd10      	pop	{r4, pc}
 800b608:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b60c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b610:	e7f7      	b.n	800b602 <memcpy+0x6>

0800b612 <memset>:
 800b612:	4402      	add	r2, r0
 800b614:	4603      	mov	r3, r0
 800b616:	4293      	cmp	r3, r2
 800b618:	d100      	bne.n	800b61c <memset+0xa>
 800b61a:	4770      	bx	lr
 800b61c:	f803 1b01 	strb.w	r1, [r3], #1
 800b620:	e7f9      	b.n	800b616 <memset+0x4>
	...

0800b624 <_free_r>:
 800b624:	b538      	push	{r3, r4, r5, lr}
 800b626:	4605      	mov	r5, r0
 800b628:	2900      	cmp	r1, #0
 800b62a:	d045      	beq.n	800b6b8 <_free_r+0x94>
 800b62c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b630:	1f0c      	subs	r4, r1, #4
 800b632:	2b00      	cmp	r3, #0
 800b634:	bfb8      	it	lt
 800b636:	18e4      	addlt	r4, r4, r3
 800b638:	f000 f923 	bl	800b882 <__malloc_lock>
 800b63c:	4a1f      	ldr	r2, [pc, #124]	; (800b6bc <_free_r+0x98>)
 800b63e:	6813      	ldr	r3, [r2, #0]
 800b640:	4610      	mov	r0, r2
 800b642:	b933      	cbnz	r3, 800b652 <_free_r+0x2e>
 800b644:	6063      	str	r3, [r4, #4]
 800b646:	6014      	str	r4, [r2, #0]
 800b648:	4628      	mov	r0, r5
 800b64a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b64e:	f000 b919 	b.w	800b884 <__malloc_unlock>
 800b652:	42a3      	cmp	r3, r4
 800b654:	d90c      	bls.n	800b670 <_free_r+0x4c>
 800b656:	6821      	ldr	r1, [r4, #0]
 800b658:	1862      	adds	r2, r4, r1
 800b65a:	4293      	cmp	r3, r2
 800b65c:	bf04      	itt	eq
 800b65e:	681a      	ldreq	r2, [r3, #0]
 800b660:	685b      	ldreq	r3, [r3, #4]
 800b662:	6063      	str	r3, [r4, #4]
 800b664:	bf04      	itt	eq
 800b666:	1852      	addeq	r2, r2, r1
 800b668:	6022      	streq	r2, [r4, #0]
 800b66a:	6004      	str	r4, [r0, #0]
 800b66c:	e7ec      	b.n	800b648 <_free_r+0x24>
 800b66e:	4613      	mov	r3, r2
 800b670:	685a      	ldr	r2, [r3, #4]
 800b672:	b10a      	cbz	r2, 800b678 <_free_r+0x54>
 800b674:	42a2      	cmp	r2, r4
 800b676:	d9fa      	bls.n	800b66e <_free_r+0x4a>
 800b678:	6819      	ldr	r1, [r3, #0]
 800b67a:	1858      	adds	r0, r3, r1
 800b67c:	42a0      	cmp	r0, r4
 800b67e:	d10b      	bne.n	800b698 <_free_r+0x74>
 800b680:	6820      	ldr	r0, [r4, #0]
 800b682:	4401      	add	r1, r0
 800b684:	1858      	adds	r0, r3, r1
 800b686:	4282      	cmp	r2, r0
 800b688:	6019      	str	r1, [r3, #0]
 800b68a:	d1dd      	bne.n	800b648 <_free_r+0x24>
 800b68c:	6810      	ldr	r0, [r2, #0]
 800b68e:	6852      	ldr	r2, [r2, #4]
 800b690:	605a      	str	r2, [r3, #4]
 800b692:	4401      	add	r1, r0
 800b694:	6019      	str	r1, [r3, #0]
 800b696:	e7d7      	b.n	800b648 <_free_r+0x24>
 800b698:	d902      	bls.n	800b6a0 <_free_r+0x7c>
 800b69a:	230c      	movs	r3, #12
 800b69c:	602b      	str	r3, [r5, #0]
 800b69e:	e7d3      	b.n	800b648 <_free_r+0x24>
 800b6a0:	6820      	ldr	r0, [r4, #0]
 800b6a2:	1821      	adds	r1, r4, r0
 800b6a4:	428a      	cmp	r2, r1
 800b6a6:	bf04      	itt	eq
 800b6a8:	6811      	ldreq	r1, [r2, #0]
 800b6aa:	6852      	ldreq	r2, [r2, #4]
 800b6ac:	6062      	str	r2, [r4, #4]
 800b6ae:	bf04      	itt	eq
 800b6b0:	1809      	addeq	r1, r1, r0
 800b6b2:	6021      	streq	r1, [r4, #0]
 800b6b4:	605c      	str	r4, [r3, #4]
 800b6b6:	e7c7      	b.n	800b648 <_free_r+0x24>
 800b6b8:	bd38      	pop	{r3, r4, r5, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20000604 	.word	0x20000604

0800b6c0 <_malloc_r>:
 800b6c0:	b570      	push	{r4, r5, r6, lr}
 800b6c2:	1ccd      	adds	r5, r1, #3
 800b6c4:	f025 0503 	bic.w	r5, r5, #3
 800b6c8:	3508      	adds	r5, #8
 800b6ca:	2d0c      	cmp	r5, #12
 800b6cc:	bf38      	it	cc
 800b6ce:	250c      	movcc	r5, #12
 800b6d0:	2d00      	cmp	r5, #0
 800b6d2:	4606      	mov	r6, r0
 800b6d4:	db01      	blt.n	800b6da <_malloc_r+0x1a>
 800b6d6:	42a9      	cmp	r1, r5
 800b6d8:	d903      	bls.n	800b6e2 <_malloc_r+0x22>
 800b6da:	230c      	movs	r3, #12
 800b6dc:	6033      	str	r3, [r6, #0]
 800b6de:	2000      	movs	r0, #0
 800b6e0:	bd70      	pop	{r4, r5, r6, pc}
 800b6e2:	f000 f8ce 	bl	800b882 <__malloc_lock>
 800b6e6:	4a23      	ldr	r2, [pc, #140]	; (800b774 <_malloc_r+0xb4>)
 800b6e8:	6814      	ldr	r4, [r2, #0]
 800b6ea:	4621      	mov	r1, r4
 800b6ec:	b991      	cbnz	r1, 800b714 <_malloc_r+0x54>
 800b6ee:	4c22      	ldr	r4, [pc, #136]	; (800b778 <_malloc_r+0xb8>)
 800b6f0:	6823      	ldr	r3, [r4, #0]
 800b6f2:	b91b      	cbnz	r3, 800b6fc <_malloc_r+0x3c>
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	f000 f841 	bl	800b77c <_sbrk_r>
 800b6fa:	6020      	str	r0, [r4, #0]
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	4630      	mov	r0, r6
 800b700:	f000 f83c 	bl	800b77c <_sbrk_r>
 800b704:	1c43      	adds	r3, r0, #1
 800b706:	d126      	bne.n	800b756 <_malloc_r+0x96>
 800b708:	230c      	movs	r3, #12
 800b70a:	6033      	str	r3, [r6, #0]
 800b70c:	4630      	mov	r0, r6
 800b70e:	f000 f8b9 	bl	800b884 <__malloc_unlock>
 800b712:	e7e4      	b.n	800b6de <_malloc_r+0x1e>
 800b714:	680b      	ldr	r3, [r1, #0]
 800b716:	1b5b      	subs	r3, r3, r5
 800b718:	d41a      	bmi.n	800b750 <_malloc_r+0x90>
 800b71a:	2b0b      	cmp	r3, #11
 800b71c:	d90f      	bls.n	800b73e <_malloc_r+0x7e>
 800b71e:	600b      	str	r3, [r1, #0]
 800b720:	50cd      	str	r5, [r1, r3]
 800b722:	18cc      	adds	r4, r1, r3
 800b724:	4630      	mov	r0, r6
 800b726:	f000 f8ad 	bl	800b884 <__malloc_unlock>
 800b72a:	f104 000b 	add.w	r0, r4, #11
 800b72e:	1d23      	adds	r3, r4, #4
 800b730:	f020 0007 	bic.w	r0, r0, #7
 800b734:	1ac3      	subs	r3, r0, r3
 800b736:	d01b      	beq.n	800b770 <_malloc_r+0xb0>
 800b738:	425a      	negs	r2, r3
 800b73a:	50e2      	str	r2, [r4, r3]
 800b73c:	bd70      	pop	{r4, r5, r6, pc}
 800b73e:	428c      	cmp	r4, r1
 800b740:	bf0d      	iteet	eq
 800b742:	6863      	ldreq	r3, [r4, #4]
 800b744:	684b      	ldrne	r3, [r1, #4]
 800b746:	6063      	strne	r3, [r4, #4]
 800b748:	6013      	streq	r3, [r2, #0]
 800b74a:	bf18      	it	ne
 800b74c:	460c      	movne	r4, r1
 800b74e:	e7e9      	b.n	800b724 <_malloc_r+0x64>
 800b750:	460c      	mov	r4, r1
 800b752:	6849      	ldr	r1, [r1, #4]
 800b754:	e7ca      	b.n	800b6ec <_malloc_r+0x2c>
 800b756:	1cc4      	adds	r4, r0, #3
 800b758:	f024 0403 	bic.w	r4, r4, #3
 800b75c:	42a0      	cmp	r0, r4
 800b75e:	d005      	beq.n	800b76c <_malloc_r+0xac>
 800b760:	1a21      	subs	r1, r4, r0
 800b762:	4630      	mov	r0, r6
 800b764:	f000 f80a 	bl	800b77c <_sbrk_r>
 800b768:	3001      	adds	r0, #1
 800b76a:	d0cd      	beq.n	800b708 <_malloc_r+0x48>
 800b76c:	6025      	str	r5, [r4, #0]
 800b76e:	e7d9      	b.n	800b724 <_malloc_r+0x64>
 800b770:	bd70      	pop	{r4, r5, r6, pc}
 800b772:	bf00      	nop
 800b774:	20000604 	.word	0x20000604
 800b778:	20000608 	.word	0x20000608

0800b77c <_sbrk_r>:
 800b77c:	b538      	push	{r3, r4, r5, lr}
 800b77e:	4c06      	ldr	r4, [pc, #24]	; (800b798 <_sbrk_r+0x1c>)
 800b780:	2300      	movs	r3, #0
 800b782:	4605      	mov	r5, r0
 800b784:	4608      	mov	r0, r1
 800b786:	6023      	str	r3, [r4, #0]
 800b788:	f002 f8b2 	bl	800d8f0 <_sbrk>
 800b78c:	1c43      	adds	r3, r0, #1
 800b78e:	d102      	bne.n	800b796 <_sbrk_r+0x1a>
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	b103      	cbz	r3, 800b796 <_sbrk_r+0x1a>
 800b794:	602b      	str	r3, [r5, #0]
 800b796:	bd38      	pop	{r3, r4, r5, pc}
 800b798:	2000ada4 	.word	0x2000ada4

0800b79c <siprintf>:
 800b79c:	b40e      	push	{r1, r2, r3}
 800b79e:	b500      	push	{lr}
 800b7a0:	b09c      	sub	sp, #112	; 0x70
 800b7a2:	f44f 7102 	mov.w	r1, #520	; 0x208
 800b7a6:	ab1d      	add	r3, sp, #116	; 0x74
 800b7a8:	f8ad 1014 	strh.w	r1, [sp, #20]
 800b7ac:	9002      	str	r0, [sp, #8]
 800b7ae:	9006      	str	r0, [sp, #24]
 800b7b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7b4:	480a      	ldr	r0, [pc, #40]	; (800b7e0 <siprintf+0x44>)
 800b7b6:	9104      	str	r1, [sp, #16]
 800b7b8:	9107      	str	r1, [sp, #28]
 800b7ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b7be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7c2:	f8ad 1016 	strh.w	r1, [sp, #22]
 800b7c6:	6800      	ldr	r0, [r0, #0]
 800b7c8:	9301      	str	r3, [sp, #4]
 800b7ca:	a902      	add	r1, sp, #8
 800b7cc:	f000 f8b6 	bl	800b93c <_svfiprintf_r>
 800b7d0:	9b02      	ldr	r3, [sp, #8]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	701a      	strb	r2, [r3, #0]
 800b7d6:	b01c      	add	sp, #112	; 0x70
 800b7d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7dc:	b003      	add	sp, #12
 800b7de:	4770      	bx	lr
 800b7e0:	200002ac 	.word	0x200002ac

0800b7e4 <siscanf>:
 800b7e4:	b40e      	push	{r1, r2, r3}
 800b7e6:	b530      	push	{r4, r5, lr}
 800b7e8:	b09c      	sub	sp, #112	; 0x70
 800b7ea:	ac1f      	add	r4, sp, #124	; 0x7c
 800b7ec:	f44f 7201 	mov.w	r2, #516	; 0x204
 800b7f0:	f854 5b04 	ldr.w	r5, [r4], #4
 800b7f4:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b7f8:	9002      	str	r0, [sp, #8]
 800b7fa:	9006      	str	r0, [sp, #24]
 800b7fc:	f7f4 fce8 	bl	80001d0 <strlen>
 800b800:	4b0b      	ldr	r3, [pc, #44]	; (800b830 <siscanf+0x4c>)
 800b802:	9003      	str	r0, [sp, #12]
 800b804:	9007      	str	r0, [sp, #28]
 800b806:	930b      	str	r3, [sp, #44]	; 0x2c
 800b808:	480a      	ldr	r0, [pc, #40]	; (800b834 <siscanf+0x50>)
 800b80a:	9401      	str	r4, [sp, #4]
 800b80c:	2300      	movs	r3, #0
 800b80e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b810:	9314      	str	r3, [sp, #80]	; 0x50
 800b812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b816:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b81a:	462a      	mov	r2, r5
 800b81c:	4623      	mov	r3, r4
 800b81e:	a902      	add	r1, sp, #8
 800b820:	6800      	ldr	r0, [r0, #0]
 800b822:	f000 f9d9 	bl	800bbd8 <__ssvfiscanf_r>
 800b826:	b01c      	add	sp, #112	; 0x70
 800b828:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b82c:	b003      	add	sp, #12
 800b82e:	4770      	bx	lr
 800b830:	0800b839 	.word	0x0800b839
 800b834:	200002ac 	.word	0x200002ac

0800b838 <__seofread>:
 800b838:	2000      	movs	r0, #0
 800b83a:	4770      	bx	lr

0800b83c <strcpy>:
 800b83c:	4603      	mov	r3, r0
 800b83e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b842:	f803 2b01 	strb.w	r2, [r3], #1
 800b846:	2a00      	cmp	r2, #0
 800b848:	d1f9      	bne.n	800b83e <strcpy+0x2>
 800b84a:	4770      	bx	lr

0800b84c <strstr>:
 800b84c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b84e:	7803      	ldrb	r3, [r0, #0]
 800b850:	b133      	cbz	r3, 800b860 <strstr+0x14>
 800b852:	4603      	mov	r3, r0
 800b854:	4618      	mov	r0, r3
 800b856:	1c5e      	adds	r6, r3, #1
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	b933      	cbnz	r3, 800b86a <strstr+0x1e>
 800b85c:	4618      	mov	r0, r3
 800b85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b860:	780b      	ldrb	r3, [r1, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	bf18      	it	ne
 800b866:	2000      	movne	r0, #0
 800b868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b86a:	1e4d      	subs	r5, r1, #1
 800b86c:	1e44      	subs	r4, r0, #1
 800b86e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800b872:	2a00      	cmp	r2, #0
 800b874:	d0f3      	beq.n	800b85e <strstr+0x12>
 800b876:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800b87a:	4297      	cmp	r7, r2
 800b87c:	4633      	mov	r3, r6
 800b87e:	d0f6      	beq.n	800b86e <strstr+0x22>
 800b880:	e7e8      	b.n	800b854 <strstr+0x8>

0800b882 <__malloc_lock>:
 800b882:	4770      	bx	lr

0800b884 <__malloc_unlock>:
 800b884:	4770      	bx	lr

0800b886 <__ssputs_r>:
 800b886:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b88a:	688e      	ldr	r6, [r1, #8]
 800b88c:	429e      	cmp	r6, r3
 800b88e:	4682      	mov	sl, r0
 800b890:	460c      	mov	r4, r1
 800b892:	4691      	mov	r9, r2
 800b894:	4698      	mov	r8, r3
 800b896:	d835      	bhi.n	800b904 <__ssputs_r+0x7e>
 800b898:	898a      	ldrh	r2, [r1, #12]
 800b89a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b89e:	d031      	beq.n	800b904 <__ssputs_r+0x7e>
 800b8a0:	6825      	ldr	r5, [r4, #0]
 800b8a2:	6909      	ldr	r1, [r1, #16]
 800b8a4:	1a6f      	subs	r7, r5, r1
 800b8a6:	6965      	ldr	r5, [r4, #20]
 800b8a8:	2302      	movs	r3, #2
 800b8aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8ae:	fb95 f5f3 	sdiv	r5, r5, r3
 800b8b2:	f108 0301 	add.w	r3, r8, #1
 800b8b6:	443b      	add	r3, r7
 800b8b8:	429d      	cmp	r5, r3
 800b8ba:	bf38      	it	cc
 800b8bc:	461d      	movcc	r5, r3
 800b8be:	0553      	lsls	r3, r2, #21
 800b8c0:	d531      	bpl.n	800b926 <__ssputs_r+0xa0>
 800b8c2:	4629      	mov	r1, r5
 800b8c4:	f7ff fefc 	bl	800b6c0 <_malloc_r>
 800b8c8:	4606      	mov	r6, r0
 800b8ca:	b950      	cbnz	r0, 800b8e2 <__ssputs_r+0x5c>
 800b8cc:	230c      	movs	r3, #12
 800b8ce:	f8ca 3000 	str.w	r3, [sl]
 800b8d2:	89a3      	ldrh	r3, [r4, #12]
 800b8d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8d8:	81a3      	strh	r3, [r4, #12]
 800b8da:	f04f 30ff 	mov.w	r0, #4294967295
 800b8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e2:	463a      	mov	r2, r7
 800b8e4:	6921      	ldr	r1, [r4, #16]
 800b8e6:	f7ff fe89 	bl	800b5fc <memcpy>
 800b8ea:	89a3      	ldrh	r3, [r4, #12]
 800b8ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8f4:	81a3      	strh	r3, [r4, #12]
 800b8f6:	6126      	str	r6, [r4, #16]
 800b8f8:	6165      	str	r5, [r4, #20]
 800b8fa:	443e      	add	r6, r7
 800b8fc:	1bed      	subs	r5, r5, r7
 800b8fe:	6026      	str	r6, [r4, #0]
 800b900:	60a5      	str	r5, [r4, #8]
 800b902:	4646      	mov	r6, r8
 800b904:	4546      	cmp	r6, r8
 800b906:	bf28      	it	cs
 800b908:	4646      	movcs	r6, r8
 800b90a:	4632      	mov	r2, r6
 800b90c:	4649      	mov	r1, r9
 800b90e:	6820      	ldr	r0, [r4, #0]
 800b910:	f000 ff54 	bl	800c7bc <memmove>
 800b914:	68a3      	ldr	r3, [r4, #8]
 800b916:	1b9b      	subs	r3, r3, r6
 800b918:	60a3      	str	r3, [r4, #8]
 800b91a:	6823      	ldr	r3, [r4, #0]
 800b91c:	441e      	add	r6, r3
 800b91e:	6026      	str	r6, [r4, #0]
 800b920:	2000      	movs	r0, #0
 800b922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b926:	462a      	mov	r2, r5
 800b928:	f000 ff62 	bl	800c7f0 <_realloc_r>
 800b92c:	4606      	mov	r6, r0
 800b92e:	2800      	cmp	r0, #0
 800b930:	d1e1      	bne.n	800b8f6 <__ssputs_r+0x70>
 800b932:	6921      	ldr	r1, [r4, #16]
 800b934:	4650      	mov	r0, sl
 800b936:	f7ff fe75 	bl	800b624 <_free_r>
 800b93a:	e7c7      	b.n	800b8cc <__ssputs_r+0x46>

0800b93c <_svfiprintf_r>:
 800b93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b940:	b09d      	sub	sp, #116	; 0x74
 800b942:	4680      	mov	r8, r0
 800b944:	9303      	str	r3, [sp, #12]
 800b946:	898b      	ldrh	r3, [r1, #12]
 800b948:	061c      	lsls	r4, r3, #24
 800b94a:	460d      	mov	r5, r1
 800b94c:	4616      	mov	r6, r2
 800b94e:	d50f      	bpl.n	800b970 <_svfiprintf_r+0x34>
 800b950:	690b      	ldr	r3, [r1, #16]
 800b952:	b96b      	cbnz	r3, 800b970 <_svfiprintf_r+0x34>
 800b954:	2140      	movs	r1, #64	; 0x40
 800b956:	f7ff feb3 	bl	800b6c0 <_malloc_r>
 800b95a:	6028      	str	r0, [r5, #0]
 800b95c:	6128      	str	r0, [r5, #16]
 800b95e:	b928      	cbnz	r0, 800b96c <_svfiprintf_r+0x30>
 800b960:	230c      	movs	r3, #12
 800b962:	f8c8 3000 	str.w	r3, [r8]
 800b966:	f04f 30ff 	mov.w	r0, #4294967295
 800b96a:	e0c5      	b.n	800baf8 <_svfiprintf_r+0x1bc>
 800b96c:	2340      	movs	r3, #64	; 0x40
 800b96e:	616b      	str	r3, [r5, #20]
 800b970:	2300      	movs	r3, #0
 800b972:	9309      	str	r3, [sp, #36]	; 0x24
 800b974:	2320      	movs	r3, #32
 800b976:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b97a:	2330      	movs	r3, #48	; 0x30
 800b97c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b980:	f04f 0b01 	mov.w	fp, #1
 800b984:	4637      	mov	r7, r6
 800b986:	463c      	mov	r4, r7
 800b988:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d13c      	bne.n	800ba0a <_svfiprintf_r+0xce>
 800b990:	ebb7 0a06 	subs.w	sl, r7, r6
 800b994:	d00b      	beq.n	800b9ae <_svfiprintf_r+0x72>
 800b996:	4653      	mov	r3, sl
 800b998:	4632      	mov	r2, r6
 800b99a:	4629      	mov	r1, r5
 800b99c:	4640      	mov	r0, r8
 800b99e:	f7ff ff72 	bl	800b886 <__ssputs_r>
 800b9a2:	3001      	adds	r0, #1
 800b9a4:	f000 80a3 	beq.w	800baee <_svfiprintf_r+0x1b2>
 800b9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9aa:	4453      	add	r3, sl
 800b9ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ae:	783b      	ldrb	r3, [r7, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f000 809c 	beq.w	800baee <_svfiprintf_r+0x1b2>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9bc:	9304      	str	r3, [sp, #16]
 800b9be:	9307      	str	r3, [sp, #28]
 800b9c0:	9205      	str	r2, [sp, #20]
 800b9c2:	9306      	str	r3, [sp, #24]
 800b9c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9c8:	931a      	str	r3, [sp, #104]	; 0x68
 800b9ca:	2205      	movs	r2, #5
 800b9cc:	7821      	ldrb	r1, [r4, #0]
 800b9ce:	4850      	ldr	r0, [pc, #320]	; (800bb10 <_svfiprintf_r+0x1d4>)
 800b9d0:	f7f4 fc06 	bl	80001e0 <memchr>
 800b9d4:	1c67      	adds	r7, r4, #1
 800b9d6:	9b04      	ldr	r3, [sp, #16]
 800b9d8:	b9d8      	cbnz	r0, 800ba12 <_svfiprintf_r+0xd6>
 800b9da:	06d9      	lsls	r1, r3, #27
 800b9dc:	bf44      	itt	mi
 800b9de:	2220      	movmi	r2, #32
 800b9e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b9e4:	071a      	lsls	r2, r3, #28
 800b9e6:	bf44      	itt	mi
 800b9e8:	222b      	movmi	r2, #43	; 0x2b
 800b9ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b9ee:	7822      	ldrb	r2, [r4, #0]
 800b9f0:	2a2a      	cmp	r2, #42	; 0x2a
 800b9f2:	d016      	beq.n	800ba22 <_svfiprintf_r+0xe6>
 800b9f4:	9a07      	ldr	r2, [sp, #28]
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	200a      	movs	r0, #10
 800b9fa:	4627      	mov	r7, r4
 800b9fc:	3401      	adds	r4, #1
 800b9fe:	783b      	ldrb	r3, [r7, #0]
 800ba00:	3b30      	subs	r3, #48	; 0x30
 800ba02:	2b09      	cmp	r3, #9
 800ba04:	d951      	bls.n	800baaa <_svfiprintf_r+0x16e>
 800ba06:	b1c9      	cbz	r1, 800ba3c <_svfiprintf_r+0x100>
 800ba08:	e011      	b.n	800ba2e <_svfiprintf_r+0xf2>
 800ba0a:	2b25      	cmp	r3, #37	; 0x25
 800ba0c:	d0c0      	beq.n	800b990 <_svfiprintf_r+0x54>
 800ba0e:	4627      	mov	r7, r4
 800ba10:	e7b9      	b.n	800b986 <_svfiprintf_r+0x4a>
 800ba12:	4a3f      	ldr	r2, [pc, #252]	; (800bb10 <_svfiprintf_r+0x1d4>)
 800ba14:	1a80      	subs	r0, r0, r2
 800ba16:	fa0b f000 	lsl.w	r0, fp, r0
 800ba1a:	4318      	orrs	r0, r3
 800ba1c:	9004      	str	r0, [sp, #16]
 800ba1e:	463c      	mov	r4, r7
 800ba20:	e7d3      	b.n	800b9ca <_svfiprintf_r+0x8e>
 800ba22:	9a03      	ldr	r2, [sp, #12]
 800ba24:	1d11      	adds	r1, r2, #4
 800ba26:	6812      	ldr	r2, [r2, #0]
 800ba28:	9103      	str	r1, [sp, #12]
 800ba2a:	2a00      	cmp	r2, #0
 800ba2c:	db01      	blt.n	800ba32 <_svfiprintf_r+0xf6>
 800ba2e:	9207      	str	r2, [sp, #28]
 800ba30:	e004      	b.n	800ba3c <_svfiprintf_r+0x100>
 800ba32:	4252      	negs	r2, r2
 800ba34:	f043 0302 	orr.w	r3, r3, #2
 800ba38:	9207      	str	r2, [sp, #28]
 800ba3a:	9304      	str	r3, [sp, #16]
 800ba3c:	783b      	ldrb	r3, [r7, #0]
 800ba3e:	2b2e      	cmp	r3, #46	; 0x2e
 800ba40:	d10e      	bne.n	800ba60 <_svfiprintf_r+0x124>
 800ba42:	787b      	ldrb	r3, [r7, #1]
 800ba44:	2b2a      	cmp	r3, #42	; 0x2a
 800ba46:	f107 0101 	add.w	r1, r7, #1
 800ba4a:	d132      	bne.n	800bab2 <_svfiprintf_r+0x176>
 800ba4c:	9b03      	ldr	r3, [sp, #12]
 800ba4e:	1d1a      	adds	r2, r3, #4
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	9203      	str	r2, [sp, #12]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	bfb8      	it	lt
 800ba58:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba5c:	3702      	adds	r7, #2
 800ba5e:	9305      	str	r3, [sp, #20]
 800ba60:	4c2c      	ldr	r4, [pc, #176]	; (800bb14 <_svfiprintf_r+0x1d8>)
 800ba62:	7839      	ldrb	r1, [r7, #0]
 800ba64:	2203      	movs	r2, #3
 800ba66:	4620      	mov	r0, r4
 800ba68:	f7f4 fbba 	bl	80001e0 <memchr>
 800ba6c:	b138      	cbz	r0, 800ba7e <_svfiprintf_r+0x142>
 800ba6e:	2340      	movs	r3, #64	; 0x40
 800ba70:	1b00      	subs	r0, r0, r4
 800ba72:	fa03 f000 	lsl.w	r0, r3, r0
 800ba76:	9b04      	ldr	r3, [sp, #16]
 800ba78:	4303      	orrs	r3, r0
 800ba7a:	9304      	str	r3, [sp, #16]
 800ba7c:	3701      	adds	r7, #1
 800ba7e:	7839      	ldrb	r1, [r7, #0]
 800ba80:	4825      	ldr	r0, [pc, #148]	; (800bb18 <_svfiprintf_r+0x1dc>)
 800ba82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba86:	2206      	movs	r2, #6
 800ba88:	1c7e      	adds	r6, r7, #1
 800ba8a:	f7f4 fba9 	bl	80001e0 <memchr>
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	d035      	beq.n	800bafe <_svfiprintf_r+0x1c2>
 800ba92:	4b22      	ldr	r3, [pc, #136]	; (800bb1c <_svfiprintf_r+0x1e0>)
 800ba94:	b9fb      	cbnz	r3, 800bad6 <_svfiprintf_r+0x19a>
 800ba96:	9b03      	ldr	r3, [sp, #12]
 800ba98:	3307      	adds	r3, #7
 800ba9a:	f023 0307 	bic.w	r3, r3, #7
 800ba9e:	3308      	adds	r3, #8
 800baa0:	9303      	str	r3, [sp, #12]
 800baa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baa4:	444b      	add	r3, r9
 800baa6:	9309      	str	r3, [sp, #36]	; 0x24
 800baa8:	e76c      	b.n	800b984 <_svfiprintf_r+0x48>
 800baaa:	fb00 3202 	mla	r2, r0, r2, r3
 800baae:	2101      	movs	r1, #1
 800bab0:	e7a3      	b.n	800b9fa <_svfiprintf_r+0xbe>
 800bab2:	2300      	movs	r3, #0
 800bab4:	9305      	str	r3, [sp, #20]
 800bab6:	4618      	mov	r0, r3
 800bab8:	240a      	movs	r4, #10
 800baba:	460f      	mov	r7, r1
 800babc:	3101      	adds	r1, #1
 800babe:	783a      	ldrb	r2, [r7, #0]
 800bac0:	3a30      	subs	r2, #48	; 0x30
 800bac2:	2a09      	cmp	r2, #9
 800bac4:	d903      	bls.n	800bace <_svfiprintf_r+0x192>
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d0ca      	beq.n	800ba60 <_svfiprintf_r+0x124>
 800baca:	9005      	str	r0, [sp, #20]
 800bacc:	e7c8      	b.n	800ba60 <_svfiprintf_r+0x124>
 800bace:	fb04 2000 	mla	r0, r4, r0, r2
 800bad2:	2301      	movs	r3, #1
 800bad4:	e7f1      	b.n	800baba <_svfiprintf_r+0x17e>
 800bad6:	ab03      	add	r3, sp, #12
 800bad8:	9300      	str	r3, [sp, #0]
 800bada:	462a      	mov	r2, r5
 800badc:	4b10      	ldr	r3, [pc, #64]	; (800bb20 <_svfiprintf_r+0x1e4>)
 800bade:	a904      	add	r1, sp, #16
 800bae0:	4640      	mov	r0, r8
 800bae2:	f3af 8000 	nop.w
 800bae6:	f1b0 3fff 	cmp.w	r0, #4294967295
 800baea:	4681      	mov	r9, r0
 800baec:	d1d9      	bne.n	800baa2 <_svfiprintf_r+0x166>
 800baee:	89ab      	ldrh	r3, [r5, #12]
 800baf0:	065b      	lsls	r3, r3, #25
 800baf2:	f53f af38 	bmi.w	800b966 <_svfiprintf_r+0x2a>
 800baf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800baf8:	b01d      	add	sp, #116	; 0x74
 800bafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bafe:	ab03      	add	r3, sp, #12
 800bb00:	9300      	str	r3, [sp, #0]
 800bb02:	462a      	mov	r2, r5
 800bb04:	4b06      	ldr	r3, [pc, #24]	; (800bb20 <_svfiprintf_r+0x1e4>)
 800bb06:	a904      	add	r1, sp, #16
 800bb08:	4640      	mov	r0, r8
 800bb0a:	f000 fa2f 	bl	800bf6c <_printf_i>
 800bb0e:	e7ea      	b.n	800bae6 <_svfiprintf_r+0x1aa>
 800bb10:	0800dc73 	.word	0x0800dc73
 800bb14:	0800dc79 	.word	0x0800dc79
 800bb18:	0800dc7d 	.word	0x0800dc7d
 800bb1c:	00000000 	.word	0x00000000
 800bb20:	0800b887 	.word	0x0800b887

0800bb24 <_sungetc_r>:
 800bb24:	b538      	push	{r3, r4, r5, lr}
 800bb26:	1c4b      	adds	r3, r1, #1
 800bb28:	4614      	mov	r4, r2
 800bb2a:	d103      	bne.n	800bb34 <_sungetc_r+0x10>
 800bb2c:	f04f 35ff 	mov.w	r5, #4294967295
 800bb30:	4628      	mov	r0, r5
 800bb32:	bd38      	pop	{r3, r4, r5, pc}
 800bb34:	8993      	ldrh	r3, [r2, #12]
 800bb36:	f023 0320 	bic.w	r3, r3, #32
 800bb3a:	8193      	strh	r3, [r2, #12]
 800bb3c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800bb3e:	6852      	ldr	r2, [r2, #4]
 800bb40:	b2cd      	uxtb	r5, r1
 800bb42:	b18b      	cbz	r3, 800bb68 <_sungetc_r+0x44>
 800bb44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bb46:	429a      	cmp	r2, r3
 800bb48:	da08      	bge.n	800bb5c <_sungetc_r+0x38>
 800bb4a:	6823      	ldr	r3, [r4, #0]
 800bb4c:	1e5a      	subs	r2, r3, #1
 800bb4e:	6022      	str	r2, [r4, #0]
 800bb50:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bb54:	6863      	ldr	r3, [r4, #4]
 800bb56:	3301      	adds	r3, #1
 800bb58:	6063      	str	r3, [r4, #4]
 800bb5a:	e7e9      	b.n	800bb30 <_sungetc_r+0xc>
 800bb5c:	4621      	mov	r1, r4
 800bb5e:	f000 fdcf 	bl	800c700 <__submore>
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d0f1      	beq.n	800bb4a <_sungetc_r+0x26>
 800bb66:	e7e1      	b.n	800bb2c <_sungetc_r+0x8>
 800bb68:	6921      	ldr	r1, [r4, #16]
 800bb6a:	6823      	ldr	r3, [r4, #0]
 800bb6c:	b151      	cbz	r1, 800bb84 <_sungetc_r+0x60>
 800bb6e:	4299      	cmp	r1, r3
 800bb70:	d208      	bcs.n	800bb84 <_sungetc_r+0x60>
 800bb72:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bb76:	428d      	cmp	r5, r1
 800bb78:	d104      	bne.n	800bb84 <_sungetc_r+0x60>
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	3201      	adds	r2, #1
 800bb7e:	6023      	str	r3, [r4, #0]
 800bb80:	6062      	str	r2, [r4, #4]
 800bb82:	e7d5      	b.n	800bb30 <_sungetc_r+0xc>
 800bb84:	63e3      	str	r3, [r4, #60]	; 0x3c
 800bb86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb8a:	6363      	str	r3, [r4, #52]	; 0x34
 800bb8c:	2303      	movs	r3, #3
 800bb8e:	63a3      	str	r3, [r4, #56]	; 0x38
 800bb90:	4623      	mov	r3, r4
 800bb92:	6422      	str	r2, [r4, #64]	; 0x40
 800bb94:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bb98:	6023      	str	r3, [r4, #0]
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e7dc      	b.n	800bb58 <_sungetc_r+0x34>

0800bb9e <__ssrefill_r>:
 800bb9e:	b510      	push	{r4, lr}
 800bba0:	460c      	mov	r4, r1
 800bba2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bba4:	b169      	cbz	r1, 800bbc2 <__ssrefill_r+0x24>
 800bba6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbaa:	4299      	cmp	r1, r3
 800bbac:	d001      	beq.n	800bbb2 <__ssrefill_r+0x14>
 800bbae:	f7ff fd39 	bl	800b624 <_free_r>
 800bbb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbb4:	6063      	str	r3, [r4, #4]
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	6360      	str	r0, [r4, #52]	; 0x34
 800bbba:	b113      	cbz	r3, 800bbc2 <__ssrefill_r+0x24>
 800bbbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bbbe:	6023      	str	r3, [r4, #0]
 800bbc0:	bd10      	pop	{r4, pc}
 800bbc2:	6923      	ldr	r3, [r4, #16]
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	6063      	str	r3, [r4, #4]
 800bbca:	89a3      	ldrh	r3, [r4, #12]
 800bbcc:	f043 0320 	orr.w	r3, r3, #32
 800bbd0:	81a3      	strh	r3, [r4, #12]
 800bbd2:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd6:	bd10      	pop	{r4, pc}

0800bbd8 <__ssvfiscanf_r>:
 800bbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbdc:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800bbe0:	f10d 080c 	add.w	r8, sp, #12
 800bbe4:	9301      	str	r3, [sp, #4]
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	9346      	str	r3, [sp, #280]	; 0x118
 800bbea:	9347      	str	r3, [sp, #284]	; 0x11c
 800bbec:	4ba0      	ldr	r3, [pc, #640]	; (800be70 <__ssvfiscanf_r+0x298>)
 800bbee:	93a2      	str	r3, [sp, #648]	; 0x288
 800bbf0:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800be78 <__ssvfiscanf_r+0x2a0>
 800bbf4:	4b9f      	ldr	r3, [pc, #636]	; (800be74 <__ssvfiscanf_r+0x29c>)
 800bbf6:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800bbfa:	4606      	mov	r6, r0
 800bbfc:	460c      	mov	r4, r1
 800bbfe:	93a3      	str	r3, [sp, #652]	; 0x28c
 800bc00:	4692      	mov	sl, r2
 800bc02:	270a      	movs	r7, #10
 800bc04:	f89a 3000 	ldrb.w	r3, [sl]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f000 812f 	beq.w	800be6c <__ssvfiscanf_r+0x294>
 800bc0e:	f000 fdb5 	bl	800c77c <__locale_ctype_ptr>
 800bc12:	f89a b000 	ldrb.w	fp, [sl]
 800bc16:	4458      	add	r0, fp
 800bc18:	7843      	ldrb	r3, [r0, #1]
 800bc1a:	f013 0308 	ands.w	r3, r3, #8
 800bc1e:	d143      	bne.n	800bca8 <__ssvfiscanf_r+0xd0>
 800bc20:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800bc24:	f10a 0501 	add.w	r5, sl, #1
 800bc28:	f040 8099 	bne.w	800bd5e <__ssvfiscanf_r+0x186>
 800bc2c:	9345      	str	r3, [sp, #276]	; 0x114
 800bc2e:	9343      	str	r3, [sp, #268]	; 0x10c
 800bc30:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800bc34:	2b2a      	cmp	r3, #42	; 0x2a
 800bc36:	d103      	bne.n	800bc40 <__ssvfiscanf_r+0x68>
 800bc38:	2310      	movs	r3, #16
 800bc3a:	9343      	str	r3, [sp, #268]	; 0x10c
 800bc3c:	f10a 0502 	add.w	r5, sl, #2
 800bc40:	7829      	ldrb	r1, [r5, #0]
 800bc42:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800bc46:	2a09      	cmp	r2, #9
 800bc48:	46aa      	mov	sl, r5
 800bc4a:	f105 0501 	add.w	r5, r5, #1
 800bc4e:	d941      	bls.n	800bcd4 <__ssvfiscanf_r+0xfc>
 800bc50:	2203      	movs	r2, #3
 800bc52:	4889      	ldr	r0, [pc, #548]	; (800be78 <__ssvfiscanf_r+0x2a0>)
 800bc54:	f7f4 fac4 	bl	80001e0 <memchr>
 800bc58:	b138      	cbz	r0, 800bc6a <__ssvfiscanf_r+0x92>
 800bc5a:	eba0 0309 	sub.w	r3, r0, r9
 800bc5e:	2001      	movs	r0, #1
 800bc60:	4098      	lsls	r0, r3
 800bc62:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bc64:	4318      	orrs	r0, r3
 800bc66:	9043      	str	r0, [sp, #268]	; 0x10c
 800bc68:	46aa      	mov	sl, r5
 800bc6a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc6e:	2b67      	cmp	r3, #103	; 0x67
 800bc70:	f10a 0501 	add.w	r5, sl, #1
 800bc74:	d84a      	bhi.n	800bd0c <__ssvfiscanf_r+0x134>
 800bc76:	2b65      	cmp	r3, #101	; 0x65
 800bc78:	f080 80b7 	bcs.w	800bdea <__ssvfiscanf_r+0x212>
 800bc7c:	2b47      	cmp	r3, #71	; 0x47
 800bc7e:	d82f      	bhi.n	800bce0 <__ssvfiscanf_r+0x108>
 800bc80:	2b45      	cmp	r3, #69	; 0x45
 800bc82:	f080 80b2 	bcs.w	800bdea <__ssvfiscanf_r+0x212>
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	f000 8082 	beq.w	800bd90 <__ssvfiscanf_r+0x1b8>
 800bc8c:	2b25      	cmp	r3, #37	; 0x25
 800bc8e:	d066      	beq.n	800bd5e <__ssvfiscanf_r+0x186>
 800bc90:	2303      	movs	r3, #3
 800bc92:	9349      	str	r3, [sp, #292]	; 0x124
 800bc94:	9744      	str	r7, [sp, #272]	; 0x110
 800bc96:	e045      	b.n	800bd24 <__ssvfiscanf_r+0x14c>
 800bc98:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800bc9a:	3101      	adds	r1, #1
 800bc9c:	9147      	str	r1, [sp, #284]	; 0x11c
 800bc9e:	6861      	ldr	r1, [r4, #4]
 800bca0:	3301      	adds	r3, #1
 800bca2:	3901      	subs	r1, #1
 800bca4:	6061      	str	r1, [r4, #4]
 800bca6:	6023      	str	r3, [r4, #0]
 800bca8:	6863      	ldr	r3, [r4, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	dd0b      	ble.n	800bcc6 <__ssvfiscanf_r+0xee>
 800bcae:	f000 fd65 	bl	800c77c <__locale_ctype_ptr>
 800bcb2:	6823      	ldr	r3, [r4, #0]
 800bcb4:	7819      	ldrb	r1, [r3, #0]
 800bcb6:	4408      	add	r0, r1
 800bcb8:	7841      	ldrb	r1, [r0, #1]
 800bcba:	070d      	lsls	r5, r1, #28
 800bcbc:	d4ec      	bmi.n	800bc98 <__ssvfiscanf_r+0xc0>
 800bcbe:	f10a 0501 	add.w	r5, sl, #1
 800bcc2:	46aa      	mov	sl, r5
 800bcc4:	e79e      	b.n	800bc04 <__ssvfiscanf_r+0x2c>
 800bcc6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bcc8:	4621      	mov	r1, r4
 800bcca:	4630      	mov	r0, r6
 800bccc:	4798      	blx	r3
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	d0ed      	beq.n	800bcae <__ssvfiscanf_r+0xd6>
 800bcd2:	e7f4      	b.n	800bcbe <__ssvfiscanf_r+0xe6>
 800bcd4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bcd6:	fb07 1303 	mla	r3, r7, r3, r1
 800bcda:	3b30      	subs	r3, #48	; 0x30
 800bcdc:	9345      	str	r3, [sp, #276]	; 0x114
 800bcde:	e7af      	b.n	800bc40 <__ssvfiscanf_r+0x68>
 800bce0:	2b5b      	cmp	r3, #91	; 0x5b
 800bce2:	d061      	beq.n	800bda8 <__ssvfiscanf_r+0x1d0>
 800bce4:	d80c      	bhi.n	800bd00 <__ssvfiscanf_r+0x128>
 800bce6:	2b58      	cmp	r3, #88	; 0x58
 800bce8:	d1d2      	bne.n	800bc90 <__ssvfiscanf_r+0xb8>
 800bcea:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800bcec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcf0:	9243      	str	r2, [sp, #268]	; 0x10c
 800bcf2:	2210      	movs	r2, #16
 800bcf4:	9244      	str	r2, [sp, #272]	; 0x110
 800bcf6:	2b6f      	cmp	r3, #111	; 0x6f
 800bcf8:	bfb4      	ite	lt
 800bcfa:	2303      	movlt	r3, #3
 800bcfc:	2304      	movge	r3, #4
 800bcfe:	e010      	b.n	800bd22 <__ssvfiscanf_r+0x14a>
 800bd00:	2b63      	cmp	r3, #99	; 0x63
 800bd02:	d05c      	beq.n	800bdbe <__ssvfiscanf_r+0x1e6>
 800bd04:	2b64      	cmp	r3, #100	; 0x64
 800bd06:	d1c3      	bne.n	800bc90 <__ssvfiscanf_r+0xb8>
 800bd08:	9744      	str	r7, [sp, #272]	; 0x110
 800bd0a:	e7f4      	b.n	800bcf6 <__ssvfiscanf_r+0x11e>
 800bd0c:	2b70      	cmp	r3, #112	; 0x70
 800bd0e:	d042      	beq.n	800bd96 <__ssvfiscanf_r+0x1be>
 800bd10:	d81d      	bhi.n	800bd4e <__ssvfiscanf_r+0x176>
 800bd12:	2b6e      	cmp	r3, #110	; 0x6e
 800bd14:	d059      	beq.n	800bdca <__ssvfiscanf_r+0x1f2>
 800bd16:	d843      	bhi.n	800bda0 <__ssvfiscanf_r+0x1c8>
 800bd18:	2b69      	cmp	r3, #105	; 0x69
 800bd1a:	d1b9      	bne.n	800bc90 <__ssvfiscanf_r+0xb8>
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	9344      	str	r3, [sp, #272]	; 0x110
 800bd20:	2303      	movs	r3, #3
 800bd22:	9349      	str	r3, [sp, #292]	; 0x124
 800bd24:	6863      	ldr	r3, [r4, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	dd61      	ble.n	800bdee <__ssvfiscanf_r+0x216>
 800bd2a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bd2c:	0659      	lsls	r1, r3, #25
 800bd2e:	d56f      	bpl.n	800be10 <__ssvfiscanf_r+0x238>
 800bd30:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	dc7c      	bgt.n	800be30 <__ssvfiscanf_r+0x258>
 800bd36:	ab01      	add	r3, sp, #4
 800bd38:	4622      	mov	r2, r4
 800bd3a:	a943      	add	r1, sp, #268	; 0x10c
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	f000 fa35 	bl	800c1ac <_scanf_chars>
 800bd42:	2801      	cmp	r0, #1
 800bd44:	f000 8092 	beq.w	800be6c <__ssvfiscanf_r+0x294>
 800bd48:	2802      	cmp	r0, #2
 800bd4a:	d1ba      	bne.n	800bcc2 <__ssvfiscanf_r+0xea>
 800bd4c:	e01d      	b.n	800bd8a <__ssvfiscanf_r+0x1b2>
 800bd4e:	2b75      	cmp	r3, #117	; 0x75
 800bd50:	d0da      	beq.n	800bd08 <__ssvfiscanf_r+0x130>
 800bd52:	2b78      	cmp	r3, #120	; 0x78
 800bd54:	d0c9      	beq.n	800bcea <__ssvfiscanf_r+0x112>
 800bd56:	2b73      	cmp	r3, #115	; 0x73
 800bd58:	d19a      	bne.n	800bc90 <__ssvfiscanf_r+0xb8>
 800bd5a:	2302      	movs	r3, #2
 800bd5c:	e7e1      	b.n	800bd22 <__ssvfiscanf_r+0x14a>
 800bd5e:	6863      	ldr	r3, [r4, #4]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	dd0c      	ble.n	800bd7e <__ssvfiscanf_r+0x1a6>
 800bd64:	6823      	ldr	r3, [r4, #0]
 800bd66:	781a      	ldrb	r2, [r3, #0]
 800bd68:	4593      	cmp	fp, r2
 800bd6a:	d17f      	bne.n	800be6c <__ssvfiscanf_r+0x294>
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	6862      	ldr	r2, [r4, #4]
 800bd70:	6023      	str	r3, [r4, #0]
 800bd72:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bd74:	3a01      	subs	r2, #1
 800bd76:	3301      	adds	r3, #1
 800bd78:	6062      	str	r2, [r4, #4]
 800bd7a:	9347      	str	r3, [sp, #284]	; 0x11c
 800bd7c:	e7a1      	b.n	800bcc2 <__ssvfiscanf_r+0xea>
 800bd7e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bd80:	4621      	mov	r1, r4
 800bd82:	4630      	mov	r0, r6
 800bd84:	4798      	blx	r3
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d0ec      	beq.n	800bd64 <__ssvfiscanf_r+0x18c>
 800bd8a:	9846      	ldr	r0, [sp, #280]	; 0x118
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	d163      	bne.n	800be58 <__ssvfiscanf_r+0x280>
 800bd90:	f04f 30ff 	mov.w	r0, #4294967295
 800bd94:	e066      	b.n	800be64 <__ssvfiscanf_r+0x28c>
 800bd96:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800bd98:	f042 0220 	orr.w	r2, r2, #32
 800bd9c:	9243      	str	r2, [sp, #268]	; 0x10c
 800bd9e:	e7a4      	b.n	800bcea <__ssvfiscanf_r+0x112>
 800bda0:	2308      	movs	r3, #8
 800bda2:	9344      	str	r3, [sp, #272]	; 0x110
 800bda4:	2304      	movs	r3, #4
 800bda6:	e7bc      	b.n	800bd22 <__ssvfiscanf_r+0x14a>
 800bda8:	4629      	mov	r1, r5
 800bdaa:	4640      	mov	r0, r8
 800bdac:	f000 fb56 	bl	800c45c <__sccl>
 800bdb0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bdb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdb6:	9343      	str	r3, [sp, #268]	; 0x10c
 800bdb8:	4605      	mov	r5, r0
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e7b1      	b.n	800bd22 <__ssvfiscanf_r+0x14a>
 800bdbe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bdc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdc4:	9343      	str	r3, [sp, #268]	; 0x10c
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	e7ab      	b.n	800bd22 <__ssvfiscanf_r+0x14a>
 800bdca:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800bdcc:	06d0      	lsls	r0, r2, #27
 800bdce:	f53f af78 	bmi.w	800bcc2 <__ssvfiscanf_r+0xea>
 800bdd2:	f012 0f01 	tst.w	r2, #1
 800bdd6:	9a01      	ldr	r2, [sp, #4]
 800bdd8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bdda:	f102 0104 	add.w	r1, r2, #4
 800bdde:	9101      	str	r1, [sp, #4]
 800bde0:	6812      	ldr	r2, [r2, #0]
 800bde2:	bf14      	ite	ne
 800bde4:	8013      	strhne	r3, [r2, #0]
 800bde6:	6013      	streq	r3, [r2, #0]
 800bde8:	e76b      	b.n	800bcc2 <__ssvfiscanf_r+0xea>
 800bdea:	2305      	movs	r3, #5
 800bdec:	e799      	b.n	800bd22 <__ssvfiscanf_r+0x14a>
 800bdee:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bdf0:	4621      	mov	r1, r4
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	4798      	blx	r3
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d097      	beq.n	800bd2a <__ssvfiscanf_r+0x152>
 800bdfa:	e7c6      	b.n	800bd8a <__ssvfiscanf_r+0x1b2>
 800bdfc:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800bdfe:	3201      	adds	r2, #1
 800be00:	9247      	str	r2, [sp, #284]	; 0x11c
 800be02:	6862      	ldr	r2, [r4, #4]
 800be04:	3a01      	subs	r2, #1
 800be06:	2a00      	cmp	r2, #0
 800be08:	6062      	str	r2, [r4, #4]
 800be0a:	dd0a      	ble.n	800be22 <__ssvfiscanf_r+0x24a>
 800be0c:	3301      	adds	r3, #1
 800be0e:	6023      	str	r3, [r4, #0]
 800be10:	f000 fcb4 	bl	800c77c <__locale_ctype_ptr>
 800be14:	6823      	ldr	r3, [r4, #0]
 800be16:	781a      	ldrb	r2, [r3, #0]
 800be18:	4410      	add	r0, r2
 800be1a:	7842      	ldrb	r2, [r0, #1]
 800be1c:	0712      	lsls	r2, r2, #28
 800be1e:	d4ed      	bmi.n	800bdfc <__ssvfiscanf_r+0x224>
 800be20:	e786      	b.n	800bd30 <__ssvfiscanf_r+0x158>
 800be22:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800be24:	4621      	mov	r1, r4
 800be26:	4630      	mov	r0, r6
 800be28:	4798      	blx	r3
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d0f0      	beq.n	800be10 <__ssvfiscanf_r+0x238>
 800be2e:	e7ac      	b.n	800bd8a <__ssvfiscanf_r+0x1b2>
 800be30:	2b04      	cmp	r3, #4
 800be32:	dc06      	bgt.n	800be42 <__ssvfiscanf_r+0x26a>
 800be34:	ab01      	add	r3, sp, #4
 800be36:	4622      	mov	r2, r4
 800be38:	a943      	add	r1, sp, #268	; 0x10c
 800be3a:	4630      	mov	r0, r6
 800be3c:	f000 fa1a 	bl	800c274 <_scanf_i>
 800be40:	e77f      	b.n	800bd42 <__ssvfiscanf_r+0x16a>
 800be42:	4b0e      	ldr	r3, [pc, #56]	; (800be7c <__ssvfiscanf_r+0x2a4>)
 800be44:	2b00      	cmp	r3, #0
 800be46:	f43f af3c 	beq.w	800bcc2 <__ssvfiscanf_r+0xea>
 800be4a:	ab01      	add	r3, sp, #4
 800be4c:	4622      	mov	r2, r4
 800be4e:	a943      	add	r1, sp, #268	; 0x10c
 800be50:	4630      	mov	r0, r6
 800be52:	f3af 8000 	nop.w
 800be56:	e774      	b.n	800bd42 <__ssvfiscanf_r+0x16a>
 800be58:	89a3      	ldrh	r3, [r4, #12]
 800be5a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800be5e:	bf18      	it	ne
 800be60:	f04f 30ff 	movne.w	r0, #4294967295
 800be64:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 800be68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6c:	9846      	ldr	r0, [sp, #280]	; 0x118
 800be6e:	e7f9      	b.n	800be64 <__ssvfiscanf_r+0x28c>
 800be70:	0800bb25 	.word	0x0800bb25
 800be74:	0800bb9f 	.word	0x0800bb9f
 800be78:	0800dc79 	.word	0x0800dc79
 800be7c:	00000000 	.word	0x00000000

0800be80 <_printf_common>:
 800be80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be84:	4691      	mov	r9, r2
 800be86:	461f      	mov	r7, r3
 800be88:	688a      	ldr	r2, [r1, #8]
 800be8a:	690b      	ldr	r3, [r1, #16]
 800be8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be90:	4293      	cmp	r3, r2
 800be92:	bfb8      	it	lt
 800be94:	4613      	movlt	r3, r2
 800be96:	f8c9 3000 	str.w	r3, [r9]
 800be9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be9e:	4606      	mov	r6, r0
 800bea0:	460c      	mov	r4, r1
 800bea2:	b112      	cbz	r2, 800beaa <_printf_common+0x2a>
 800bea4:	3301      	adds	r3, #1
 800bea6:	f8c9 3000 	str.w	r3, [r9]
 800beaa:	6823      	ldr	r3, [r4, #0]
 800beac:	0699      	lsls	r1, r3, #26
 800beae:	bf42      	ittt	mi
 800beb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800beb4:	3302      	addmi	r3, #2
 800beb6:	f8c9 3000 	strmi.w	r3, [r9]
 800beba:	6825      	ldr	r5, [r4, #0]
 800bebc:	f015 0506 	ands.w	r5, r5, #6
 800bec0:	d107      	bne.n	800bed2 <_printf_common+0x52>
 800bec2:	f104 0a19 	add.w	sl, r4, #25
 800bec6:	68e3      	ldr	r3, [r4, #12]
 800bec8:	f8d9 2000 	ldr.w	r2, [r9]
 800becc:	1a9b      	subs	r3, r3, r2
 800bece:	429d      	cmp	r5, r3
 800bed0:	db29      	blt.n	800bf26 <_printf_common+0xa6>
 800bed2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bed6:	6822      	ldr	r2, [r4, #0]
 800bed8:	3300      	adds	r3, #0
 800beda:	bf18      	it	ne
 800bedc:	2301      	movne	r3, #1
 800bede:	0692      	lsls	r2, r2, #26
 800bee0:	d42e      	bmi.n	800bf40 <_printf_common+0xc0>
 800bee2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bee6:	4639      	mov	r1, r7
 800bee8:	4630      	mov	r0, r6
 800beea:	47c0      	blx	r8
 800beec:	3001      	adds	r0, #1
 800beee:	d021      	beq.n	800bf34 <_printf_common+0xb4>
 800bef0:	6823      	ldr	r3, [r4, #0]
 800bef2:	68e5      	ldr	r5, [r4, #12]
 800bef4:	f8d9 2000 	ldr.w	r2, [r9]
 800bef8:	f003 0306 	and.w	r3, r3, #6
 800befc:	2b04      	cmp	r3, #4
 800befe:	bf08      	it	eq
 800bf00:	1aad      	subeq	r5, r5, r2
 800bf02:	68a3      	ldr	r3, [r4, #8]
 800bf04:	6922      	ldr	r2, [r4, #16]
 800bf06:	bf0c      	ite	eq
 800bf08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf0c:	2500      	movne	r5, #0
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	bfc4      	itt	gt
 800bf12:	1a9b      	subgt	r3, r3, r2
 800bf14:	18ed      	addgt	r5, r5, r3
 800bf16:	f04f 0900 	mov.w	r9, #0
 800bf1a:	341a      	adds	r4, #26
 800bf1c:	454d      	cmp	r5, r9
 800bf1e:	d11b      	bne.n	800bf58 <_printf_common+0xd8>
 800bf20:	2000      	movs	r0, #0
 800bf22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf26:	2301      	movs	r3, #1
 800bf28:	4652      	mov	r2, sl
 800bf2a:	4639      	mov	r1, r7
 800bf2c:	4630      	mov	r0, r6
 800bf2e:	47c0      	blx	r8
 800bf30:	3001      	adds	r0, #1
 800bf32:	d103      	bne.n	800bf3c <_printf_common+0xbc>
 800bf34:	f04f 30ff 	mov.w	r0, #4294967295
 800bf38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf3c:	3501      	adds	r5, #1
 800bf3e:	e7c2      	b.n	800bec6 <_printf_common+0x46>
 800bf40:	18e1      	adds	r1, r4, r3
 800bf42:	1c5a      	adds	r2, r3, #1
 800bf44:	2030      	movs	r0, #48	; 0x30
 800bf46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf4a:	4422      	add	r2, r4
 800bf4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf54:	3302      	adds	r3, #2
 800bf56:	e7c4      	b.n	800bee2 <_printf_common+0x62>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	4622      	mov	r2, r4
 800bf5c:	4639      	mov	r1, r7
 800bf5e:	4630      	mov	r0, r6
 800bf60:	47c0      	blx	r8
 800bf62:	3001      	adds	r0, #1
 800bf64:	d0e6      	beq.n	800bf34 <_printf_common+0xb4>
 800bf66:	f109 0901 	add.w	r9, r9, #1
 800bf6a:	e7d7      	b.n	800bf1c <_printf_common+0x9c>

0800bf6c <_printf_i>:
 800bf6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf70:	4617      	mov	r7, r2
 800bf72:	7e0a      	ldrb	r2, [r1, #24]
 800bf74:	b085      	sub	sp, #20
 800bf76:	2a6e      	cmp	r2, #110	; 0x6e
 800bf78:	4698      	mov	r8, r3
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	460c      	mov	r4, r1
 800bf7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf80:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800bf84:	f000 80bc 	beq.w	800c100 <_printf_i+0x194>
 800bf88:	d81a      	bhi.n	800bfc0 <_printf_i+0x54>
 800bf8a:	2a63      	cmp	r2, #99	; 0x63
 800bf8c:	d02e      	beq.n	800bfec <_printf_i+0x80>
 800bf8e:	d80a      	bhi.n	800bfa6 <_printf_i+0x3a>
 800bf90:	2a00      	cmp	r2, #0
 800bf92:	f000 80c8 	beq.w	800c126 <_printf_i+0x1ba>
 800bf96:	2a58      	cmp	r2, #88	; 0x58
 800bf98:	f000 808a 	beq.w	800c0b0 <_printf_i+0x144>
 800bf9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfa0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800bfa4:	e02a      	b.n	800bffc <_printf_i+0x90>
 800bfa6:	2a64      	cmp	r2, #100	; 0x64
 800bfa8:	d001      	beq.n	800bfae <_printf_i+0x42>
 800bfaa:	2a69      	cmp	r2, #105	; 0x69
 800bfac:	d1f6      	bne.n	800bf9c <_printf_i+0x30>
 800bfae:	6821      	ldr	r1, [r4, #0]
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	f011 0f80 	tst.w	r1, #128	; 0x80
 800bfb6:	d023      	beq.n	800c000 <_printf_i+0x94>
 800bfb8:	1d11      	adds	r1, r2, #4
 800bfba:	6019      	str	r1, [r3, #0]
 800bfbc:	6813      	ldr	r3, [r2, #0]
 800bfbe:	e027      	b.n	800c010 <_printf_i+0xa4>
 800bfc0:	2a73      	cmp	r2, #115	; 0x73
 800bfc2:	f000 80b4 	beq.w	800c12e <_printf_i+0x1c2>
 800bfc6:	d808      	bhi.n	800bfda <_printf_i+0x6e>
 800bfc8:	2a6f      	cmp	r2, #111	; 0x6f
 800bfca:	d02a      	beq.n	800c022 <_printf_i+0xb6>
 800bfcc:	2a70      	cmp	r2, #112	; 0x70
 800bfce:	d1e5      	bne.n	800bf9c <_printf_i+0x30>
 800bfd0:	680a      	ldr	r2, [r1, #0]
 800bfd2:	f042 0220 	orr.w	r2, r2, #32
 800bfd6:	600a      	str	r2, [r1, #0]
 800bfd8:	e003      	b.n	800bfe2 <_printf_i+0x76>
 800bfda:	2a75      	cmp	r2, #117	; 0x75
 800bfdc:	d021      	beq.n	800c022 <_printf_i+0xb6>
 800bfde:	2a78      	cmp	r2, #120	; 0x78
 800bfe0:	d1dc      	bne.n	800bf9c <_printf_i+0x30>
 800bfe2:	2278      	movs	r2, #120	; 0x78
 800bfe4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800bfe8:	496e      	ldr	r1, [pc, #440]	; (800c1a4 <_printf_i+0x238>)
 800bfea:	e064      	b.n	800c0b6 <_printf_i+0x14a>
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800bff2:	1d11      	adds	r1, r2, #4
 800bff4:	6019      	str	r1, [r3, #0]
 800bff6:	6813      	ldr	r3, [r2, #0]
 800bff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bffc:	2301      	movs	r3, #1
 800bffe:	e0a3      	b.n	800c148 <_printf_i+0x1dc>
 800c000:	f011 0f40 	tst.w	r1, #64	; 0x40
 800c004:	f102 0104 	add.w	r1, r2, #4
 800c008:	6019      	str	r1, [r3, #0]
 800c00a:	d0d7      	beq.n	800bfbc <_printf_i+0x50>
 800c00c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c010:	2b00      	cmp	r3, #0
 800c012:	da03      	bge.n	800c01c <_printf_i+0xb0>
 800c014:	222d      	movs	r2, #45	; 0x2d
 800c016:	425b      	negs	r3, r3
 800c018:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c01c:	4962      	ldr	r1, [pc, #392]	; (800c1a8 <_printf_i+0x23c>)
 800c01e:	220a      	movs	r2, #10
 800c020:	e017      	b.n	800c052 <_printf_i+0xe6>
 800c022:	6820      	ldr	r0, [r4, #0]
 800c024:	6819      	ldr	r1, [r3, #0]
 800c026:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c02a:	d003      	beq.n	800c034 <_printf_i+0xc8>
 800c02c:	1d08      	adds	r0, r1, #4
 800c02e:	6018      	str	r0, [r3, #0]
 800c030:	680b      	ldr	r3, [r1, #0]
 800c032:	e006      	b.n	800c042 <_printf_i+0xd6>
 800c034:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c038:	f101 0004 	add.w	r0, r1, #4
 800c03c:	6018      	str	r0, [r3, #0]
 800c03e:	d0f7      	beq.n	800c030 <_printf_i+0xc4>
 800c040:	880b      	ldrh	r3, [r1, #0]
 800c042:	4959      	ldr	r1, [pc, #356]	; (800c1a8 <_printf_i+0x23c>)
 800c044:	2a6f      	cmp	r2, #111	; 0x6f
 800c046:	bf14      	ite	ne
 800c048:	220a      	movne	r2, #10
 800c04a:	2208      	moveq	r2, #8
 800c04c:	2000      	movs	r0, #0
 800c04e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800c052:	6865      	ldr	r5, [r4, #4]
 800c054:	60a5      	str	r5, [r4, #8]
 800c056:	2d00      	cmp	r5, #0
 800c058:	f2c0 809c 	blt.w	800c194 <_printf_i+0x228>
 800c05c:	6820      	ldr	r0, [r4, #0]
 800c05e:	f020 0004 	bic.w	r0, r0, #4
 800c062:	6020      	str	r0, [r4, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d13f      	bne.n	800c0e8 <_printf_i+0x17c>
 800c068:	2d00      	cmp	r5, #0
 800c06a:	f040 8095 	bne.w	800c198 <_printf_i+0x22c>
 800c06e:	4675      	mov	r5, lr
 800c070:	2a08      	cmp	r2, #8
 800c072:	d10b      	bne.n	800c08c <_printf_i+0x120>
 800c074:	6823      	ldr	r3, [r4, #0]
 800c076:	07da      	lsls	r2, r3, #31
 800c078:	d508      	bpl.n	800c08c <_printf_i+0x120>
 800c07a:	6923      	ldr	r3, [r4, #16]
 800c07c:	6862      	ldr	r2, [r4, #4]
 800c07e:	429a      	cmp	r2, r3
 800c080:	bfde      	ittt	le
 800c082:	2330      	movle	r3, #48	; 0x30
 800c084:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c088:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c08c:	ebae 0305 	sub.w	r3, lr, r5
 800c090:	6123      	str	r3, [r4, #16]
 800c092:	f8cd 8000 	str.w	r8, [sp]
 800c096:	463b      	mov	r3, r7
 800c098:	aa03      	add	r2, sp, #12
 800c09a:	4621      	mov	r1, r4
 800c09c:	4630      	mov	r0, r6
 800c09e:	f7ff feef 	bl	800be80 <_printf_common>
 800c0a2:	3001      	adds	r0, #1
 800c0a4:	d155      	bne.n	800c152 <_printf_i+0x1e6>
 800c0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0aa:	b005      	add	sp, #20
 800c0ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0b0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800c0b4:	493c      	ldr	r1, [pc, #240]	; (800c1a8 <_printf_i+0x23c>)
 800c0b6:	6822      	ldr	r2, [r4, #0]
 800c0b8:	6818      	ldr	r0, [r3, #0]
 800c0ba:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c0be:	f100 0504 	add.w	r5, r0, #4
 800c0c2:	601d      	str	r5, [r3, #0]
 800c0c4:	d001      	beq.n	800c0ca <_printf_i+0x15e>
 800c0c6:	6803      	ldr	r3, [r0, #0]
 800c0c8:	e002      	b.n	800c0d0 <_printf_i+0x164>
 800c0ca:	0655      	lsls	r5, r2, #25
 800c0cc:	d5fb      	bpl.n	800c0c6 <_printf_i+0x15a>
 800c0ce:	8803      	ldrh	r3, [r0, #0]
 800c0d0:	07d0      	lsls	r0, r2, #31
 800c0d2:	bf44      	itt	mi
 800c0d4:	f042 0220 	orrmi.w	r2, r2, #32
 800c0d8:	6022      	strmi	r2, [r4, #0]
 800c0da:	b91b      	cbnz	r3, 800c0e4 <_printf_i+0x178>
 800c0dc:	6822      	ldr	r2, [r4, #0]
 800c0de:	f022 0220 	bic.w	r2, r2, #32
 800c0e2:	6022      	str	r2, [r4, #0]
 800c0e4:	2210      	movs	r2, #16
 800c0e6:	e7b1      	b.n	800c04c <_printf_i+0xe0>
 800c0e8:	4675      	mov	r5, lr
 800c0ea:	fbb3 f0f2 	udiv	r0, r3, r2
 800c0ee:	fb02 3310 	mls	r3, r2, r0, r3
 800c0f2:	5ccb      	ldrb	r3, [r1, r3]
 800c0f4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	d1f5      	bne.n	800c0ea <_printf_i+0x17e>
 800c0fe:	e7b7      	b.n	800c070 <_printf_i+0x104>
 800c100:	6808      	ldr	r0, [r1, #0]
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	6949      	ldr	r1, [r1, #20]
 800c106:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c10a:	d004      	beq.n	800c116 <_printf_i+0x1aa>
 800c10c:	1d10      	adds	r0, r2, #4
 800c10e:	6018      	str	r0, [r3, #0]
 800c110:	6813      	ldr	r3, [r2, #0]
 800c112:	6019      	str	r1, [r3, #0]
 800c114:	e007      	b.n	800c126 <_printf_i+0x1ba>
 800c116:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c11a:	f102 0004 	add.w	r0, r2, #4
 800c11e:	6018      	str	r0, [r3, #0]
 800c120:	6813      	ldr	r3, [r2, #0]
 800c122:	d0f6      	beq.n	800c112 <_printf_i+0x1a6>
 800c124:	8019      	strh	r1, [r3, #0]
 800c126:	2300      	movs	r3, #0
 800c128:	6123      	str	r3, [r4, #16]
 800c12a:	4675      	mov	r5, lr
 800c12c:	e7b1      	b.n	800c092 <_printf_i+0x126>
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	1d11      	adds	r1, r2, #4
 800c132:	6019      	str	r1, [r3, #0]
 800c134:	6815      	ldr	r5, [r2, #0]
 800c136:	6862      	ldr	r2, [r4, #4]
 800c138:	2100      	movs	r1, #0
 800c13a:	4628      	mov	r0, r5
 800c13c:	f7f4 f850 	bl	80001e0 <memchr>
 800c140:	b108      	cbz	r0, 800c146 <_printf_i+0x1da>
 800c142:	1b40      	subs	r0, r0, r5
 800c144:	6060      	str	r0, [r4, #4]
 800c146:	6863      	ldr	r3, [r4, #4]
 800c148:	6123      	str	r3, [r4, #16]
 800c14a:	2300      	movs	r3, #0
 800c14c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c150:	e79f      	b.n	800c092 <_printf_i+0x126>
 800c152:	6923      	ldr	r3, [r4, #16]
 800c154:	462a      	mov	r2, r5
 800c156:	4639      	mov	r1, r7
 800c158:	4630      	mov	r0, r6
 800c15a:	47c0      	blx	r8
 800c15c:	3001      	adds	r0, #1
 800c15e:	d0a2      	beq.n	800c0a6 <_printf_i+0x13a>
 800c160:	6823      	ldr	r3, [r4, #0]
 800c162:	079b      	lsls	r3, r3, #30
 800c164:	d507      	bpl.n	800c176 <_printf_i+0x20a>
 800c166:	2500      	movs	r5, #0
 800c168:	f104 0919 	add.w	r9, r4, #25
 800c16c:	68e3      	ldr	r3, [r4, #12]
 800c16e:	9a03      	ldr	r2, [sp, #12]
 800c170:	1a9b      	subs	r3, r3, r2
 800c172:	429d      	cmp	r5, r3
 800c174:	db05      	blt.n	800c182 <_printf_i+0x216>
 800c176:	68e0      	ldr	r0, [r4, #12]
 800c178:	9b03      	ldr	r3, [sp, #12]
 800c17a:	4298      	cmp	r0, r3
 800c17c:	bfb8      	it	lt
 800c17e:	4618      	movlt	r0, r3
 800c180:	e793      	b.n	800c0aa <_printf_i+0x13e>
 800c182:	2301      	movs	r3, #1
 800c184:	464a      	mov	r2, r9
 800c186:	4639      	mov	r1, r7
 800c188:	4630      	mov	r0, r6
 800c18a:	47c0      	blx	r8
 800c18c:	3001      	adds	r0, #1
 800c18e:	d08a      	beq.n	800c0a6 <_printf_i+0x13a>
 800c190:	3501      	adds	r5, #1
 800c192:	e7eb      	b.n	800c16c <_printf_i+0x200>
 800c194:	2b00      	cmp	r3, #0
 800c196:	d1a7      	bne.n	800c0e8 <_printf_i+0x17c>
 800c198:	780b      	ldrb	r3, [r1, #0]
 800c19a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c19e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1a2:	e765      	b.n	800c070 <_printf_i+0x104>
 800c1a4:	0800dc95 	.word	0x0800dc95
 800c1a8:	0800dc84 	.word	0x0800dc84

0800c1ac <_scanf_chars>:
 800c1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b0:	4615      	mov	r5, r2
 800c1b2:	688a      	ldr	r2, [r1, #8]
 800c1b4:	4680      	mov	r8, r0
 800c1b6:	460c      	mov	r4, r1
 800c1b8:	b932      	cbnz	r2, 800c1c8 <_scanf_chars+0x1c>
 800c1ba:	698a      	ldr	r2, [r1, #24]
 800c1bc:	2a00      	cmp	r2, #0
 800c1be:	bf0c      	ite	eq
 800c1c0:	2201      	moveq	r2, #1
 800c1c2:	f04f 32ff 	movne.w	r2, #4294967295
 800c1c6:	608a      	str	r2, [r1, #8]
 800c1c8:	6822      	ldr	r2, [r4, #0]
 800c1ca:	06d1      	lsls	r1, r2, #27
 800c1cc:	bf5f      	itttt	pl
 800c1ce:	681a      	ldrpl	r2, [r3, #0]
 800c1d0:	1d11      	addpl	r1, r2, #4
 800c1d2:	6019      	strpl	r1, [r3, #0]
 800c1d4:	6817      	ldrpl	r7, [r2, #0]
 800c1d6:	2600      	movs	r6, #0
 800c1d8:	69a3      	ldr	r3, [r4, #24]
 800c1da:	b1db      	cbz	r3, 800c214 <_scanf_chars+0x68>
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d107      	bne.n	800c1f0 <_scanf_chars+0x44>
 800c1e0:	682b      	ldr	r3, [r5, #0]
 800c1e2:	6962      	ldr	r2, [r4, #20]
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	5cd3      	ldrb	r3, [r2, r3]
 800c1e8:	b9a3      	cbnz	r3, 800c214 <_scanf_chars+0x68>
 800c1ea:	2e00      	cmp	r6, #0
 800c1ec:	d132      	bne.n	800c254 <_scanf_chars+0xa8>
 800c1ee:	e006      	b.n	800c1fe <_scanf_chars+0x52>
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d007      	beq.n	800c204 <_scanf_chars+0x58>
 800c1f4:	2e00      	cmp	r6, #0
 800c1f6:	d12d      	bne.n	800c254 <_scanf_chars+0xa8>
 800c1f8:	69a3      	ldr	r3, [r4, #24]
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d12a      	bne.n	800c254 <_scanf_chars+0xa8>
 800c1fe:	2001      	movs	r0, #1
 800c200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c204:	f000 faba 	bl	800c77c <__locale_ctype_ptr>
 800c208:	682b      	ldr	r3, [r5, #0]
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	4418      	add	r0, r3
 800c20e:	7843      	ldrb	r3, [r0, #1]
 800c210:	071b      	lsls	r3, r3, #28
 800c212:	d4ef      	bmi.n	800c1f4 <_scanf_chars+0x48>
 800c214:	6823      	ldr	r3, [r4, #0]
 800c216:	06da      	lsls	r2, r3, #27
 800c218:	bf5e      	ittt	pl
 800c21a:	682b      	ldrpl	r3, [r5, #0]
 800c21c:	781b      	ldrbpl	r3, [r3, #0]
 800c21e:	703b      	strbpl	r3, [r7, #0]
 800c220:	682a      	ldr	r2, [r5, #0]
 800c222:	686b      	ldr	r3, [r5, #4]
 800c224:	f102 0201 	add.w	r2, r2, #1
 800c228:	602a      	str	r2, [r5, #0]
 800c22a:	68a2      	ldr	r2, [r4, #8]
 800c22c:	f103 33ff 	add.w	r3, r3, #4294967295
 800c230:	f102 32ff 	add.w	r2, r2, #4294967295
 800c234:	606b      	str	r3, [r5, #4]
 800c236:	f106 0601 	add.w	r6, r6, #1
 800c23a:	bf58      	it	pl
 800c23c:	3701      	addpl	r7, #1
 800c23e:	60a2      	str	r2, [r4, #8]
 800c240:	b142      	cbz	r2, 800c254 <_scanf_chars+0xa8>
 800c242:	2b00      	cmp	r3, #0
 800c244:	dcc8      	bgt.n	800c1d8 <_scanf_chars+0x2c>
 800c246:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c24a:	4629      	mov	r1, r5
 800c24c:	4640      	mov	r0, r8
 800c24e:	4798      	blx	r3
 800c250:	2800      	cmp	r0, #0
 800c252:	d0c1      	beq.n	800c1d8 <_scanf_chars+0x2c>
 800c254:	6823      	ldr	r3, [r4, #0]
 800c256:	f013 0310 	ands.w	r3, r3, #16
 800c25a:	d105      	bne.n	800c268 <_scanf_chars+0xbc>
 800c25c:	68e2      	ldr	r2, [r4, #12]
 800c25e:	3201      	adds	r2, #1
 800c260:	60e2      	str	r2, [r4, #12]
 800c262:	69a2      	ldr	r2, [r4, #24]
 800c264:	b102      	cbz	r2, 800c268 <_scanf_chars+0xbc>
 800c266:	703b      	strb	r3, [r7, #0]
 800c268:	6923      	ldr	r3, [r4, #16]
 800c26a:	441e      	add	r6, r3
 800c26c:	6126      	str	r6, [r4, #16]
 800c26e:	2000      	movs	r0, #0
 800c270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c274 <_scanf_i>:
 800c274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c278:	469a      	mov	sl, r3
 800c27a:	4b74      	ldr	r3, [pc, #464]	; (800c44c <_scanf_i+0x1d8>)
 800c27c:	460c      	mov	r4, r1
 800c27e:	4683      	mov	fp, r0
 800c280:	4616      	mov	r6, r2
 800c282:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c286:	b087      	sub	sp, #28
 800c288:	ab03      	add	r3, sp, #12
 800c28a:	68a7      	ldr	r7, [r4, #8]
 800c28c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c290:	4b6f      	ldr	r3, [pc, #444]	; (800c450 <_scanf_i+0x1dc>)
 800c292:	69a1      	ldr	r1, [r4, #24]
 800c294:	4a6f      	ldr	r2, [pc, #444]	; (800c454 <_scanf_i+0x1e0>)
 800c296:	2903      	cmp	r1, #3
 800c298:	bf18      	it	ne
 800c29a:	461a      	movne	r2, r3
 800c29c:	1e7b      	subs	r3, r7, #1
 800c29e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800c2a2:	bf84      	itt	hi
 800c2a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c2a8:	60a3      	strhi	r3, [r4, #8]
 800c2aa:	6823      	ldr	r3, [r4, #0]
 800c2ac:	9200      	str	r2, [sp, #0]
 800c2ae:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c2b2:	bf88      	it	hi
 800c2b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c2b8:	f104 091c 	add.w	r9, r4, #28
 800c2bc:	6023      	str	r3, [r4, #0]
 800c2be:	bf8c      	ite	hi
 800c2c0:	197f      	addhi	r7, r7, r5
 800c2c2:	2700      	movls	r7, #0
 800c2c4:	464b      	mov	r3, r9
 800c2c6:	f04f 0800 	mov.w	r8, #0
 800c2ca:	9301      	str	r3, [sp, #4]
 800c2cc:	6831      	ldr	r1, [r6, #0]
 800c2ce:	ab03      	add	r3, sp, #12
 800c2d0:	2202      	movs	r2, #2
 800c2d2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c2d6:	7809      	ldrb	r1, [r1, #0]
 800c2d8:	f7f3 ff82 	bl	80001e0 <memchr>
 800c2dc:	9b01      	ldr	r3, [sp, #4]
 800c2de:	b328      	cbz	r0, 800c32c <_scanf_i+0xb8>
 800c2e0:	f1b8 0f01 	cmp.w	r8, #1
 800c2e4:	d156      	bne.n	800c394 <_scanf_i+0x120>
 800c2e6:	6862      	ldr	r2, [r4, #4]
 800c2e8:	b92a      	cbnz	r2, 800c2f6 <_scanf_i+0x82>
 800c2ea:	2208      	movs	r2, #8
 800c2ec:	6062      	str	r2, [r4, #4]
 800c2ee:	6822      	ldr	r2, [r4, #0]
 800c2f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2f4:	6022      	str	r2, [r4, #0]
 800c2f6:	6822      	ldr	r2, [r4, #0]
 800c2f8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c2fc:	6022      	str	r2, [r4, #0]
 800c2fe:	68a2      	ldr	r2, [r4, #8]
 800c300:	1e51      	subs	r1, r2, #1
 800c302:	60a1      	str	r1, [r4, #8]
 800c304:	b192      	cbz	r2, 800c32c <_scanf_i+0xb8>
 800c306:	6832      	ldr	r2, [r6, #0]
 800c308:	1c51      	adds	r1, r2, #1
 800c30a:	6031      	str	r1, [r6, #0]
 800c30c:	7812      	ldrb	r2, [r2, #0]
 800c30e:	701a      	strb	r2, [r3, #0]
 800c310:	1c5d      	adds	r5, r3, #1
 800c312:	6873      	ldr	r3, [r6, #4]
 800c314:	3b01      	subs	r3, #1
 800c316:	2b00      	cmp	r3, #0
 800c318:	6073      	str	r3, [r6, #4]
 800c31a:	dc06      	bgt.n	800c32a <_scanf_i+0xb6>
 800c31c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c320:	4631      	mov	r1, r6
 800c322:	4658      	mov	r0, fp
 800c324:	4798      	blx	r3
 800c326:	2800      	cmp	r0, #0
 800c328:	d176      	bne.n	800c418 <_scanf_i+0x1a4>
 800c32a:	462b      	mov	r3, r5
 800c32c:	f108 0801 	add.w	r8, r8, #1
 800c330:	f1b8 0f03 	cmp.w	r8, #3
 800c334:	d1c9      	bne.n	800c2ca <_scanf_i+0x56>
 800c336:	6862      	ldr	r2, [r4, #4]
 800c338:	b90a      	cbnz	r2, 800c33e <_scanf_i+0xca>
 800c33a:	220a      	movs	r2, #10
 800c33c:	6062      	str	r2, [r4, #4]
 800c33e:	6862      	ldr	r2, [r4, #4]
 800c340:	4945      	ldr	r1, [pc, #276]	; (800c458 <_scanf_i+0x1e4>)
 800c342:	6960      	ldr	r0, [r4, #20]
 800c344:	9301      	str	r3, [sp, #4]
 800c346:	1a89      	subs	r1, r1, r2
 800c348:	f000 f888 	bl	800c45c <__sccl>
 800c34c:	9b01      	ldr	r3, [sp, #4]
 800c34e:	f04f 0800 	mov.w	r8, #0
 800c352:	461d      	mov	r5, r3
 800c354:	68a3      	ldr	r3, [r4, #8]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d038      	beq.n	800c3cc <_scanf_i+0x158>
 800c35a:	6831      	ldr	r1, [r6, #0]
 800c35c:	6960      	ldr	r0, [r4, #20]
 800c35e:	780a      	ldrb	r2, [r1, #0]
 800c360:	5c80      	ldrb	r0, [r0, r2]
 800c362:	2800      	cmp	r0, #0
 800c364:	d032      	beq.n	800c3cc <_scanf_i+0x158>
 800c366:	2a30      	cmp	r2, #48	; 0x30
 800c368:	6822      	ldr	r2, [r4, #0]
 800c36a:	d121      	bne.n	800c3b0 <_scanf_i+0x13c>
 800c36c:	0510      	lsls	r0, r2, #20
 800c36e:	d51f      	bpl.n	800c3b0 <_scanf_i+0x13c>
 800c370:	f108 0801 	add.w	r8, r8, #1
 800c374:	b117      	cbz	r7, 800c37c <_scanf_i+0x108>
 800c376:	3301      	adds	r3, #1
 800c378:	3f01      	subs	r7, #1
 800c37a:	60a3      	str	r3, [r4, #8]
 800c37c:	6873      	ldr	r3, [r6, #4]
 800c37e:	3b01      	subs	r3, #1
 800c380:	2b00      	cmp	r3, #0
 800c382:	6073      	str	r3, [r6, #4]
 800c384:	dd1b      	ble.n	800c3be <_scanf_i+0x14a>
 800c386:	6833      	ldr	r3, [r6, #0]
 800c388:	3301      	adds	r3, #1
 800c38a:	6033      	str	r3, [r6, #0]
 800c38c:	68a3      	ldr	r3, [r4, #8]
 800c38e:	3b01      	subs	r3, #1
 800c390:	60a3      	str	r3, [r4, #8]
 800c392:	e7df      	b.n	800c354 <_scanf_i+0xe0>
 800c394:	f1b8 0f02 	cmp.w	r8, #2
 800c398:	d1b1      	bne.n	800c2fe <_scanf_i+0x8a>
 800c39a:	6822      	ldr	r2, [r4, #0]
 800c39c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c3a0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c3a4:	d1c2      	bne.n	800c32c <_scanf_i+0xb8>
 800c3a6:	2110      	movs	r1, #16
 800c3a8:	6061      	str	r1, [r4, #4]
 800c3aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c3ae:	e7a5      	b.n	800c2fc <_scanf_i+0x88>
 800c3b0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c3b4:	6022      	str	r2, [r4, #0]
 800c3b6:	780b      	ldrb	r3, [r1, #0]
 800c3b8:	702b      	strb	r3, [r5, #0]
 800c3ba:	3501      	adds	r5, #1
 800c3bc:	e7de      	b.n	800c37c <_scanf_i+0x108>
 800c3be:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c3c2:	4631      	mov	r1, r6
 800c3c4:	4658      	mov	r0, fp
 800c3c6:	4798      	blx	r3
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	d0df      	beq.n	800c38c <_scanf_i+0x118>
 800c3cc:	6823      	ldr	r3, [r4, #0]
 800c3ce:	05d9      	lsls	r1, r3, #23
 800c3d0:	d50c      	bpl.n	800c3ec <_scanf_i+0x178>
 800c3d2:	454d      	cmp	r5, r9
 800c3d4:	d908      	bls.n	800c3e8 <_scanf_i+0x174>
 800c3d6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c3da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3de:	4632      	mov	r2, r6
 800c3e0:	4658      	mov	r0, fp
 800c3e2:	4798      	blx	r3
 800c3e4:	1e6f      	subs	r7, r5, #1
 800c3e6:	463d      	mov	r5, r7
 800c3e8:	454d      	cmp	r5, r9
 800c3ea:	d02c      	beq.n	800c446 <_scanf_i+0x1d2>
 800c3ec:	6822      	ldr	r2, [r4, #0]
 800c3ee:	f012 0210 	ands.w	r2, r2, #16
 800c3f2:	d11e      	bne.n	800c432 <_scanf_i+0x1be>
 800c3f4:	702a      	strb	r2, [r5, #0]
 800c3f6:	6863      	ldr	r3, [r4, #4]
 800c3f8:	9e00      	ldr	r6, [sp, #0]
 800c3fa:	4649      	mov	r1, r9
 800c3fc:	4658      	mov	r0, fp
 800c3fe:	47b0      	blx	r6
 800c400:	6822      	ldr	r2, [r4, #0]
 800c402:	f8da 3000 	ldr.w	r3, [sl]
 800c406:	f012 0f20 	tst.w	r2, #32
 800c40a:	d008      	beq.n	800c41e <_scanf_i+0x1aa>
 800c40c:	1d1a      	adds	r2, r3, #4
 800c40e:	f8ca 2000 	str.w	r2, [sl]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	6018      	str	r0, [r3, #0]
 800c416:	e009      	b.n	800c42c <_scanf_i+0x1b8>
 800c418:	f04f 0800 	mov.w	r8, #0
 800c41c:	e7d6      	b.n	800c3cc <_scanf_i+0x158>
 800c41e:	07d2      	lsls	r2, r2, #31
 800c420:	d5f4      	bpl.n	800c40c <_scanf_i+0x198>
 800c422:	1d1a      	adds	r2, r3, #4
 800c424:	f8ca 2000 	str.w	r2, [sl]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	8018      	strh	r0, [r3, #0]
 800c42c:	68e3      	ldr	r3, [r4, #12]
 800c42e:	3301      	adds	r3, #1
 800c430:	60e3      	str	r3, [r4, #12]
 800c432:	eba5 0509 	sub.w	r5, r5, r9
 800c436:	44a8      	add	r8, r5
 800c438:	6925      	ldr	r5, [r4, #16]
 800c43a:	4445      	add	r5, r8
 800c43c:	6125      	str	r5, [r4, #16]
 800c43e:	2000      	movs	r0, #0
 800c440:	b007      	add	sp, #28
 800c442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c446:	2001      	movs	r0, #1
 800c448:	e7fa      	b.n	800c440 <_scanf_i+0x1cc>
 800c44a:	bf00      	nop
 800c44c:	0800d928 	.word	0x0800d928
 800c450:	0800c6dd 	.word	0x0800c6dd
 800c454:	0800c5bd 	.word	0x0800c5bd
 800c458:	0800dcb6 	.word	0x0800dcb6

0800c45c <__sccl>:
 800c45c:	b570      	push	{r4, r5, r6, lr}
 800c45e:	780b      	ldrb	r3, [r1, #0]
 800c460:	2b5e      	cmp	r3, #94	; 0x5e
 800c462:	bf13      	iteet	ne
 800c464:	1c4a      	addne	r2, r1, #1
 800c466:	1c8a      	addeq	r2, r1, #2
 800c468:	784b      	ldrbeq	r3, [r1, #1]
 800c46a:	2100      	movne	r1, #0
 800c46c:	bf08      	it	eq
 800c46e:	2101      	moveq	r1, #1
 800c470:	1e44      	subs	r4, r0, #1
 800c472:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800c476:	f804 1f01 	strb.w	r1, [r4, #1]!
 800c47a:	42a5      	cmp	r5, r4
 800c47c:	d1fb      	bne.n	800c476 <__sccl+0x1a>
 800c47e:	b913      	cbnz	r3, 800c486 <__sccl+0x2a>
 800c480:	3a01      	subs	r2, #1
 800c482:	4610      	mov	r0, r2
 800c484:	bd70      	pop	{r4, r5, r6, pc}
 800c486:	f081 0401 	eor.w	r4, r1, #1
 800c48a:	54c4      	strb	r4, [r0, r3]
 800c48c:	4611      	mov	r1, r2
 800c48e:	780d      	ldrb	r5, [r1, #0]
 800c490:	2d2d      	cmp	r5, #45	; 0x2d
 800c492:	f101 0201 	add.w	r2, r1, #1
 800c496:	d006      	beq.n	800c4a6 <__sccl+0x4a>
 800c498:	2d5d      	cmp	r5, #93	; 0x5d
 800c49a:	d0f2      	beq.n	800c482 <__sccl+0x26>
 800c49c:	b90d      	cbnz	r5, 800c4a2 <__sccl+0x46>
 800c49e:	460a      	mov	r2, r1
 800c4a0:	e7ef      	b.n	800c482 <__sccl+0x26>
 800c4a2:	462b      	mov	r3, r5
 800c4a4:	e7f1      	b.n	800c48a <__sccl+0x2e>
 800c4a6:	784e      	ldrb	r6, [r1, #1]
 800c4a8:	2e5d      	cmp	r6, #93	; 0x5d
 800c4aa:	d0fa      	beq.n	800c4a2 <__sccl+0x46>
 800c4ac:	42b3      	cmp	r3, r6
 800c4ae:	dcf8      	bgt.n	800c4a2 <__sccl+0x46>
 800c4b0:	3102      	adds	r1, #2
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	429e      	cmp	r6, r3
 800c4b6:	54c4      	strb	r4, [r0, r3]
 800c4b8:	dcfb      	bgt.n	800c4b2 <__sccl+0x56>
 800c4ba:	e7e8      	b.n	800c48e <__sccl+0x32>

0800c4bc <_strtol_l.isra.0>:
 800c4bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c0:	4680      	mov	r8, r0
 800c4c2:	4689      	mov	r9, r1
 800c4c4:	4692      	mov	sl, r2
 800c4c6:	461f      	mov	r7, r3
 800c4c8:	468b      	mov	fp, r1
 800c4ca:	465d      	mov	r5, fp
 800c4cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c4ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4d2:	f000 f950 	bl	800c776 <__locale_ctype_ptr_l>
 800c4d6:	4420      	add	r0, r4
 800c4d8:	7846      	ldrb	r6, [r0, #1]
 800c4da:	f016 0608 	ands.w	r6, r6, #8
 800c4de:	d10b      	bne.n	800c4f8 <_strtol_l.isra.0+0x3c>
 800c4e0:	2c2d      	cmp	r4, #45	; 0x2d
 800c4e2:	d10b      	bne.n	800c4fc <_strtol_l.isra.0+0x40>
 800c4e4:	782c      	ldrb	r4, [r5, #0]
 800c4e6:	2601      	movs	r6, #1
 800c4e8:	f10b 0502 	add.w	r5, fp, #2
 800c4ec:	b167      	cbz	r7, 800c508 <_strtol_l.isra.0+0x4c>
 800c4ee:	2f10      	cmp	r7, #16
 800c4f0:	d114      	bne.n	800c51c <_strtol_l.isra.0+0x60>
 800c4f2:	2c30      	cmp	r4, #48	; 0x30
 800c4f4:	d00a      	beq.n	800c50c <_strtol_l.isra.0+0x50>
 800c4f6:	e011      	b.n	800c51c <_strtol_l.isra.0+0x60>
 800c4f8:	46ab      	mov	fp, r5
 800c4fa:	e7e6      	b.n	800c4ca <_strtol_l.isra.0+0xe>
 800c4fc:	2c2b      	cmp	r4, #43	; 0x2b
 800c4fe:	bf04      	itt	eq
 800c500:	782c      	ldrbeq	r4, [r5, #0]
 800c502:	f10b 0502 	addeq.w	r5, fp, #2
 800c506:	e7f1      	b.n	800c4ec <_strtol_l.isra.0+0x30>
 800c508:	2c30      	cmp	r4, #48	; 0x30
 800c50a:	d127      	bne.n	800c55c <_strtol_l.isra.0+0xa0>
 800c50c:	782b      	ldrb	r3, [r5, #0]
 800c50e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c512:	2b58      	cmp	r3, #88	; 0x58
 800c514:	d14b      	bne.n	800c5ae <_strtol_l.isra.0+0xf2>
 800c516:	786c      	ldrb	r4, [r5, #1]
 800c518:	2710      	movs	r7, #16
 800c51a:	3502      	adds	r5, #2
 800c51c:	2e00      	cmp	r6, #0
 800c51e:	bf0c      	ite	eq
 800c520:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c524:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c528:	2200      	movs	r2, #0
 800c52a:	fbb1 fef7 	udiv	lr, r1, r7
 800c52e:	4610      	mov	r0, r2
 800c530:	fb07 1c1e 	mls	ip, r7, lr, r1
 800c534:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c538:	2b09      	cmp	r3, #9
 800c53a:	d811      	bhi.n	800c560 <_strtol_l.isra.0+0xa4>
 800c53c:	461c      	mov	r4, r3
 800c53e:	42a7      	cmp	r7, r4
 800c540:	dd1d      	ble.n	800c57e <_strtol_l.isra.0+0xc2>
 800c542:	1c53      	adds	r3, r2, #1
 800c544:	d007      	beq.n	800c556 <_strtol_l.isra.0+0x9a>
 800c546:	4586      	cmp	lr, r0
 800c548:	d316      	bcc.n	800c578 <_strtol_l.isra.0+0xbc>
 800c54a:	d101      	bne.n	800c550 <_strtol_l.isra.0+0x94>
 800c54c:	45a4      	cmp	ip, r4
 800c54e:	db13      	blt.n	800c578 <_strtol_l.isra.0+0xbc>
 800c550:	fb00 4007 	mla	r0, r0, r7, r4
 800c554:	2201      	movs	r2, #1
 800c556:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c55a:	e7eb      	b.n	800c534 <_strtol_l.isra.0+0x78>
 800c55c:	270a      	movs	r7, #10
 800c55e:	e7dd      	b.n	800c51c <_strtol_l.isra.0+0x60>
 800c560:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c564:	2b19      	cmp	r3, #25
 800c566:	d801      	bhi.n	800c56c <_strtol_l.isra.0+0xb0>
 800c568:	3c37      	subs	r4, #55	; 0x37
 800c56a:	e7e8      	b.n	800c53e <_strtol_l.isra.0+0x82>
 800c56c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c570:	2b19      	cmp	r3, #25
 800c572:	d804      	bhi.n	800c57e <_strtol_l.isra.0+0xc2>
 800c574:	3c57      	subs	r4, #87	; 0x57
 800c576:	e7e2      	b.n	800c53e <_strtol_l.isra.0+0x82>
 800c578:	f04f 32ff 	mov.w	r2, #4294967295
 800c57c:	e7eb      	b.n	800c556 <_strtol_l.isra.0+0x9a>
 800c57e:	1c53      	adds	r3, r2, #1
 800c580:	d108      	bne.n	800c594 <_strtol_l.isra.0+0xd8>
 800c582:	2322      	movs	r3, #34	; 0x22
 800c584:	f8c8 3000 	str.w	r3, [r8]
 800c588:	4608      	mov	r0, r1
 800c58a:	f1ba 0f00 	cmp.w	sl, #0
 800c58e:	d107      	bne.n	800c5a0 <_strtol_l.isra.0+0xe4>
 800c590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c594:	b106      	cbz	r6, 800c598 <_strtol_l.isra.0+0xdc>
 800c596:	4240      	negs	r0, r0
 800c598:	f1ba 0f00 	cmp.w	sl, #0
 800c59c:	d00c      	beq.n	800c5b8 <_strtol_l.isra.0+0xfc>
 800c59e:	b122      	cbz	r2, 800c5aa <_strtol_l.isra.0+0xee>
 800c5a0:	3d01      	subs	r5, #1
 800c5a2:	f8ca 5000 	str.w	r5, [sl]
 800c5a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5aa:	464d      	mov	r5, r9
 800c5ac:	e7f9      	b.n	800c5a2 <_strtol_l.isra.0+0xe6>
 800c5ae:	2430      	movs	r4, #48	; 0x30
 800c5b0:	2f00      	cmp	r7, #0
 800c5b2:	d1b3      	bne.n	800c51c <_strtol_l.isra.0+0x60>
 800c5b4:	2708      	movs	r7, #8
 800c5b6:	e7b1      	b.n	800c51c <_strtol_l.isra.0+0x60>
 800c5b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c5bc <_strtol_r>:
 800c5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5be:	4c06      	ldr	r4, [pc, #24]	; (800c5d8 <_strtol_r+0x1c>)
 800c5c0:	4d06      	ldr	r5, [pc, #24]	; (800c5dc <_strtol_r+0x20>)
 800c5c2:	6824      	ldr	r4, [r4, #0]
 800c5c4:	6a24      	ldr	r4, [r4, #32]
 800c5c6:	2c00      	cmp	r4, #0
 800c5c8:	bf08      	it	eq
 800c5ca:	462c      	moveq	r4, r5
 800c5cc:	9400      	str	r4, [sp, #0]
 800c5ce:	f7ff ff75 	bl	800c4bc <_strtol_l.isra.0>
 800c5d2:	b003      	add	sp, #12
 800c5d4:	bd30      	pop	{r4, r5, pc}
 800c5d6:	bf00      	nop
 800c5d8:	200002ac 	.word	0x200002ac
 800c5dc:	20000310 	.word	0x20000310

0800c5e0 <_strtoul_l.isra.0>:
 800c5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5e4:	4680      	mov	r8, r0
 800c5e6:	4689      	mov	r9, r1
 800c5e8:	4692      	mov	sl, r2
 800c5ea:	461e      	mov	r6, r3
 800c5ec:	460f      	mov	r7, r1
 800c5ee:	463d      	mov	r5, r7
 800c5f0:	9808      	ldr	r0, [sp, #32]
 800c5f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c5f6:	f000 f8be 	bl	800c776 <__locale_ctype_ptr_l>
 800c5fa:	4420      	add	r0, r4
 800c5fc:	7843      	ldrb	r3, [r0, #1]
 800c5fe:	f013 0308 	ands.w	r3, r3, #8
 800c602:	d10a      	bne.n	800c61a <_strtoul_l.isra.0+0x3a>
 800c604:	2c2d      	cmp	r4, #45	; 0x2d
 800c606:	d10a      	bne.n	800c61e <_strtoul_l.isra.0+0x3e>
 800c608:	782c      	ldrb	r4, [r5, #0]
 800c60a:	2301      	movs	r3, #1
 800c60c:	1cbd      	adds	r5, r7, #2
 800c60e:	b15e      	cbz	r6, 800c628 <_strtoul_l.isra.0+0x48>
 800c610:	2e10      	cmp	r6, #16
 800c612:	d113      	bne.n	800c63c <_strtoul_l.isra.0+0x5c>
 800c614:	2c30      	cmp	r4, #48	; 0x30
 800c616:	d009      	beq.n	800c62c <_strtoul_l.isra.0+0x4c>
 800c618:	e010      	b.n	800c63c <_strtoul_l.isra.0+0x5c>
 800c61a:	462f      	mov	r7, r5
 800c61c:	e7e7      	b.n	800c5ee <_strtoul_l.isra.0+0xe>
 800c61e:	2c2b      	cmp	r4, #43	; 0x2b
 800c620:	bf04      	itt	eq
 800c622:	782c      	ldrbeq	r4, [r5, #0]
 800c624:	1cbd      	addeq	r5, r7, #2
 800c626:	e7f2      	b.n	800c60e <_strtoul_l.isra.0+0x2e>
 800c628:	2c30      	cmp	r4, #48	; 0x30
 800c62a:	d125      	bne.n	800c678 <_strtoul_l.isra.0+0x98>
 800c62c:	782a      	ldrb	r2, [r5, #0]
 800c62e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c632:	2a58      	cmp	r2, #88	; 0x58
 800c634:	d14a      	bne.n	800c6cc <_strtoul_l.isra.0+0xec>
 800c636:	786c      	ldrb	r4, [r5, #1]
 800c638:	2610      	movs	r6, #16
 800c63a:	3502      	adds	r5, #2
 800c63c:	f04f 31ff 	mov.w	r1, #4294967295
 800c640:	2700      	movs	r7, #0
 800c642:	fbb1 f1f6 	udiv	r1, r1, r6
 800c646:	fb06 fe01 	mul.w	lr, r6, r1
 800c64a:	ea6f 0e0e 	mvn.w	lr, lr
 800c64e:	4638      	mov	r0, r7
 800c650:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800c654:	2a09      	cmp	r2, #9
 800c656:	d811      	bhi.n	800c67c <_strtoul_l.isra.0+0x9c>
 800c658:	4614      	mov	r4, r2
 800c65a:	42a6      	cmp	r6, r4
 800c65c:	dd1d      	ble.n	800c69a <_strtoul_l.isra.0+0xba>
 800c65e:	2f00      	cmp	r7, #0
 800c660:	db18      	blt.n	800c694 <_strtoul_l.isra.0+0xb4>
 800c662:	4281      	cmp	r1, r0
 800c664:	d316      	bcc.n	800c694 <_strtoul_l.isra.0+0xb4>
 800c666:	d101      	bne.n	800c66c <_strtoul_l.isra.0+0x8c>
 800c668:	45a6      	cmp	lr, r4
 800c66a:	db13      	blt.n	800c694 <_strtoul_l.isra.0+0xb4>
 800c66c:	fb00 4006 	mla	r0, r0, r6, r4
 800c670:	2701      	movs	r7, #1
 800c672:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c676:	e7eb      	b.n	800c650 <_strtoul_l.isra.0+0x70>
 800c678:	260a      	movs	r6, #10
 800c67a:	e7df      	b.n	800c63c <_strtoul_l.isra.0+0x5c>
 800c67c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800c680:	2a19      	cmp	r2, #25
 800c682:	d801      	bhi.n	800c688 <_strtoul_l.isra.0+0xa8>
 800c684:	3c37      	subs	r4, #55	; 0x37
 800c686:	e7e8      	b.n	800c65a <_strtoul_l.isra.0+0x7a>
 800c688:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800c68c:	2a19      	cmp	r2, #25
 800c68e:	d804      	bhi.n	800c69a <_strtoul_l.isra.0+0xba>
 800c690:	3c57      	subs	r4, #87	; 0x57
 800c692:	e7e2      	b.n	800c65a <_strtoul_l.isra.0+0x7a>
 800c694:	f04f 37ff 	mov.w	r7, #4294967295
 800c698:	e7eb      	b.n	800c672 <_strtoul_l.isra.0+0x92>
 800c69a:	2f00      	cmp	r7, #0
 800c69c:	da09      	bge.n	800c6b2 <_strtoul_l.isra.0+0xd2>
 800c69e:	2322      	movs	r3, #34	; 0x22
 800c6a0:	f8c8 3000 	str.w	r3, [r8]
 800c6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a8:	f1ba 0f00 	cmp.w	sl, #0
 800c6ac:	d107      	bne.n	800c6be <_strtoul_l.isra.0+0xde>
 800c6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6b2:	b103      	cbz	r3, 800c6b6 <_strtoul_l.isra.0+0xd6>
 800c6b4:	4240      	negs	r0, r0
 800c6b6:	f1ba 0f00 	cmp.w	sl, #0
 800c6ba:	d00c      	beq.n	800c6d6 <_strtoul_l.isra.0+0xf6>
 800c6bc:	b127      	cbz	r7, 800c6c8 <_strtoul_l.isra.0+0xe8>
 800c6be:	3d01      	subs	r5, #1
 800c6c0:	f8ca 5000 	str.w	r5, [sl]
 800c6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6c8:	464d      	mov	r5, r9
 800c6ca:	e7f9      	b.n	800c6c0 <_strtoul_l.isra.0+0xe0>
 800c6cc:	2430      	movs	r4, #48	; 0x30
 800c6ce:	2e00      	cmp	r6, #0
 800c6d0:	d1b4      	bne.n	800c63c <_strtoul_l.isra.0+0x5c>
 800c6d2:	2608      	movs	r6, #8
 800c6d4:	e7b2      	b.n	800c63c <_strtoul_l.isra.0+0x5c>
 800c6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800c6dc <_strtoul_r>:
 800c6dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6de:	4c06      	ldr	r4, [pc, #24]	; (800c6f8 <_strtoul_r+0x1c>)
 800c6e0:	4d06      	ldr	r5, [pc, #24]	; (800c6fc <_strtoul_r+0x20>)
 800c6e2:	6824      	ldr	r4, [r4, #0]
 800c6e4:	6a24      	ldr	r4, [r4, #32]
 800c6e6:	2c00      	cmp	r4, #0
 800c6e8:	bf08      	it	eq
 800c6ea:	462c      	moveq	r4, r5
 800c6ec:	9400      	str	r4, [sp, #0]
 800c6ee:	f7ff ff77 	bl	800c5e0 <_strtoul_l.isra.0>
 800c6f2:	b003      	add	sp, #12
 800c6f4:	bd30      	pop	{r4, r5, pc}
 800c6f6:	bf00      	nop
 800c6f8:	200002ac 	.word	0x200002ac
 800c6fc:	20000310 	.word	0x20000310

0800c700 <__submore>:
 800c700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c704:	460c      	mov	r4, r1
 800c706:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c708:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c70c:	4299      	cmp	r1, r3
 800c70e:	d11e      	bne.n	800c74e <__submore+0x4e>
 800c710:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c714:	f7fe ffd4 	bl	800b6c0 <_malloc_r>
 800c718:	b918      	cbnz	r0, 800c722 <__submore+0x22>
 800c71a:	f04f 30ff 	mov.w	r0, #4294967295
 800c71e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c726:	63a3      	str	r3, [r4, #56]	; 0x38
 800c728:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c72c:	6360      	str	r0, [r4, #52]	; 0x34
 800c72e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c732:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c736:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c73a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c73e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c742:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c746:	6020      	str	r0, [r4, #0]
 800c748:	2000      	movs	r0, #0
 800c74a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c74e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c750:	0077      	lsls	r7, r6, #1
 800c752:	463a      	mov	r2, r7
 800c754:	f000 f84c 	bl	800c7f0 <_realloc_r>
 800c758:	4605      	mov	r5, r0
 800c75a:	2800      	cmp	r0, #0
 800c75c:	d0dd      	beq.n	800c71a <__submore+0x1a>
 800c75e:	eb00 0806 	add.w	r8, r0, r6
 800c762:	4601      	mov	r1, r0
 800c764:	4632      	mov	r2, r6
 800c766:	4640      	mov	r0, r8
 800c768:	f7fe ff48 	bl	800b5fc <memcpy>
 800c76c:	f8c4 8000 	str.w	r8, [r4]
 800c770:	6365      	str	r5, [r4, #52]	; 0x34
 800c772:	63a7      	str	r7, [r4, #56]	; 0x38
 800c774:	e7e8      	b.n	800c748 <__submore+0x48>

0800c776 <__locale_ctype_ptr_l>:
 800c776:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c77a:	4770      	bx	lr

0800c77c <__locale_ctype_ptr>:
 800c77c:	4b04      	ldr	r3, [pc, #16]	; (800c790 <__locale_ctype_ptr+0x14>)
 800c77e:	4a05      	ldr	r2, [pc, #20]	; (800c794 <__locale_ctype_ptr+0x18>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	6a1b      	ldr	r3, [r3, #32]
 800c784:	2b00      	cmp	r3, #0
 800c786:	bf08      	it	eq
 800c788:	4613      	moveq	r3, r2
 800c78a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800c78e:	4770      	bx	lr
 800c790:	200002ac 	.word	0x200002ac
 800c794:	20000310 	.word	0x20000310

0800c798 <__ascii_mbtowc>:
 800c798:	b082      	sub	sp, #8
 800c79a:	b901      	cbnz	r1, 800c79e <__ascii_mbtowc+0x6>
 800c79c:	a901      	add	r1, sp, #4
 800c79e:	b142      	cbz	r2, 800c7b2 <__ascii_mbtowc+0x1a>
 800c7a0:	b14b      	cbz	r3, 800c7b6 <__ascii_mbtowc+0x1e>
 800c7a2:	7813      	ldrb	r3, [r2, #0]
 800c7a4:	600b      	str	r3, [r1, #0]
 800c7a6:	7812      	ldrb	r2, [r2, #0]
 800c7a8:	1c10      	adds	r0, r2, #0
 800c7aa:	bf18      	it	ne
 800c7ac:	2001      	movne	r0, #1
 800c7ae:	b002      	add	sp, #8
 800c7b0:	4770      	bx	lr
 800c7b2:	4610      	mov	r0, r2
 800c7b4:	e7fb      	b.n	800c7ae <__ascii_mbtowc+0x16>
 800c7b6:	f06f 0001 	mvn.w	r0, #1
 800c7ba:	e7f8      	b.n	800c7ae <__ascii_mbtowc+0x16>

0800c7bc <memmove>:
 800c7bc:	4288      	cmp	r0, r1
 800c7be:	b510      	push	{r4, lr}
 800c7c0:	eb01 0302 	add.w	r3, r1, r2
 800c7c4:	d803      	bhi.n	800c7ce <memmove+0x12>
 800c7c6:	1e42      	subs	r2, r0, #1
 800c7c8:	4299      	cmp	r1, r3
 800c7ca:	d10c      	bne.n	800c7e6 <memmove+0x2a>
 800c7cc:	bd10      	pop	{r4, pc}
 800c7ce:	4298      	cmp	r0, r3
 800c7d0:	d2f9      	bcs.n	800c7c6 <memmove+0xa>
 800c7d2:	1881      	adds	r1, r0, r2
 800c7d4:	1ad2      	subs	r2, r2, r3
 800c7d6:	42d3      	cmn	r3, r2
 800c7d8:	d100      	bne.n	800c7dc <memmove+0x20>
 800c7da:	bd10      	pop	{r4, pc}
 800c7dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c7e4:	e7f7      	b.n	800c7d6 <memmove+0x1a>
 800c7e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7ea:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c7ee:	e7eb      	b.n	800c7c8 <memmove+0xc>

0800c7f0 <_realloc_r>:
 800c7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7f2:	4607      	mov	r7, r0
 800c7f4:	4614      	mov	r4, r2
 800c7f6:	460e      	mov	r6, r1
 800c7f8:	b921      	cbnz	r1, 800c804 <_realloc_r+0x14>
 800c7fa:	4611      	mov	r1, r2
 800c7fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c800:	f7fe bf5e 	b.w	800b6c0 <_malloc_r>
 800c804:	b922      	cbnz	r2, 800c810 <_realloc_r+0x20>
 800c806:	f7fe ff0d 	bl	800b624 <_free_r>
 800c80a:	4625      	mov	r5, r4
 800c80c:	4628      	mov	r0, r5
 800c80e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c810:	f000 f821 	bl	800c856 <_malloc_usable_size_r>
 800c814:	4284      	cmp	r4, r0
 800c816:	d90f      	bls.n	800c838 <_realloc_r+0x48>
 800c818:	4621      	mov	r1, r4
 800c81a:	4638      	mov	r0, r7
 800c81c:	f7fe ff50 	bl	800b6c0 <_malloc_r>
 800c820:	4605      	mov	r5, r0
 800c822:	2800      	cmp	r0, #0
 800c824:	d0f2      	beq.n	800c80c <_realloc_r+0x1c>
 800c826:	4631      	mov	r1, r6
 800c828:	4622      	mov	r2, r4
 800c82a:	f7fe fee7 	bl	800b5fc <memcpy>
 800c82e:	4631      	mov	r1, r6
 800c830:	4638      	mov	r0, r7
 800c832:	f7fe fef7 	bl	800b624 <_free_r>
 800c836:	e7e9      	b.n	800c80c <_realloc_r+0x1c>
 800c838:	4635      	mov	r5, r6
 800c83a:	e7e7      	b.n	800c80c <_realloc_r+0x1c>

0800c83c <__ascii_wctomb>:
 800c83c:	b149      	cbz	r1, 800c852 <__ascii_wctomb+0x16>
 800c83e:	2aff      	cmp	r2, #255	; 0xff
 800c840:	bf85      	ittet	hi
 800c842:	238a      	movhi	r3, #138	; 0x8a
 800c844:	6003      	strhi	r3, [r0, #0]
 800c846:	700a      	strbls	r2, [r1, #0]
 800c848:	f04f 30ff 	movhi.w	r0, #4294967295
 800c84c:	bf98      	it	ls
 800c84e:	2001      	movls	r0, #1
 800c850:	4770      	bx	lr
 800c852:	4608      	mov	r0, r1
 800c854:	4770      	bx	lr

0800c856 <_malloc_usable_size_r>:
 800c856:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800c85a:	2800      	cmp	r0, #0
 800c85c:	f1a0 0004 	sub.w	r0, r0, #4
 800c860:	bfbc      	itt	lt
 800c862:	580b      	ldrlt	r3, [r1, r0]
 800c864:	18c0      	addlt	r0, r0, r3
 800c866:	4770      	bx	lr

0800c868 <sin>:
 800c868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c86a:	ec51 0b10 	vmov	r0, r1, d0
 800c86e:	4a20      	ldr	r2, [pc, #128]	; (800c8f0 <sin+0x88>)
 800c870:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c874:	4293      	cmp	r3, r2
 800c876:	dc07      	bgt.n	800c888 <sin+0x20>
 800c878:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800c8e8 <sin+0x80>
 800c87c:	2000      	movs	r0, #0
 800c87e:	f000 fe67 	bl	800d550 <__kernel_sin>
 800c882:	ec51 0b10 	vmov	r0, r1, d0
 800c886:	e007      	b.n	800c898 <sin+0x30>
 800c888:	4a1a      	ldr	r2, [pc, #104]	; (800c8f4 <sin+0x8c>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	dd09      	ble.n	800c8a2 <sin+0x3a>
 800c88e:	ee10 2a10 	vmov	r2, s0
 800c892:	460b      	mov	r3, r1
 800c894:	f7f3 fcf8 	bl	8000288 <__aeabi_dsub>
 800c898:	ec41 0b10 	vmov	d0, r0, r1
 800c89c:	b005      	add	sp, #20
 800c89e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c8a2:	4668      	mov	r0, sp
 800c8a4:	f000 f828 	bl	800c8f8 <__ieee754_rem_pio2>
 800c8a8:	f000 0003 	and.w	r0, r0, #3
 800c8ac:	2801      	cmp	r0, #1
 800c8ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c8b2:	ed9d 0b00 	vldr	d0, [sp]
 800c8b6:	d004      	beq.n	800c8c2 <sin+0x5a>
 800c8b8:	2802      	cmp	r0, #2
 800c8ba:	d005      	beq.n	800c8c8 <sin+0x60>
 800c8bc:	b970      	cbnz	r0, 800c8dc <sin+0x74>
 800c8be:	2001      	movs	r0, #1
 800c8c0:	e7dd      	b.n	800c87e <sin+0x16>
 800c8c2:	f000 fa0d 	bl	800cce0 <__kernel_cos>
 800c8c6:	e7dc      	b.n	800c882 <sin+0x1a>
 800c8c8:	2001      	movs	r0, #1
 800c8ca:	f000 fe41 	bl	800d550 <__kernel_sin>
 800c8ce:	ec53 2b10 	vmov	r2, r3, d0
 800c8d2:	ee10 0a10 	vmov	r0, s0
 800c8d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c8da:	e7dd      	b.n	800c898 <sin+0x30>
 800c8dc:	f000 fa00 	bl	800cce0 <__kernel_cos>
 800c8e0:	e7f5      	b.n	800c8ce <sin+0x66>
 800c8e2:	bf00      	nop
 800c8e4:	f3af 8000 	nop.w
	...
 800c8f0:	3fe921fb 	.word	0x3fe921fb
 800c8f4:	7fefffff 	.word	0x7fefffff

0800c8f8 <__ieee754_rem_pio2>:
 800c8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fc:	ec57 6b10 	vmov	r6, r7, d0
 800c900:	4bc3      	ldr	r3, [pc, #780]	; (800cc10 <__ieee754_rem_pio2+0x318>)
 800c902:	b08d      	sub	sp, #52	; 0x34
 800c904:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c908:	4598      	cmp	r8, r3
 800c90a:	4604      	mov	r4, r0
 800c90c:	9704      	str	r7, [sp, #16]
 800c90e:	dc07      	bgt.n	800c920 <__ieee754_rem_pio2+0x28>
 800c910:	2200      	movs	r2, #0
 800c912:	2300      	movs	r3, #0
 800c914:	ed84 0b00 	vstr	d0, [r4]
 800c918:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c91c:	2500      	movs	r5, #0
 800c91e:	e027      	b.n	800c970 <__ieee754_rem_pio2+0x78>
 800c920:	4bbc      	ldr	r3, [pc, #752]	; (800cc14 <__ieee754_rem_pio2+0x31c>)
 800c922:	4598      	cmp	r8, r3
 800c924:	dc75      	bgt.n	800ca12 <__ieee754_rem_pio2+0x11a>
 800c926:	9b04      	ldr	r3, [sp, #16]
 800c928:	4dbb      	ldr	r5, [pc, #748]	; (800cc18 <__ieee754_rem_pio2+0x320>)
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	ee10 0a10 	vmov	r0, s0
 800c930:	a3a9      	add	r3, pc, #676	; (adr r3, 800cbd8 <__ieee754_rem_pio2+0x2e0>)
 800c932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c936:	4639      	mov	r1, r7
 800c938:	dd36      	ble.n	800c9a8 <__ieee754_rem_pio2+0xb0>
 800c93a:	f7f3 fca5 	bl	8000288 <__aeabi_dsub>
 800c93e:	45a8      	cmp	r8, r5
 800c940:	4606      	mov	r6, r0
 800c942:	460f      	mov	r7, r1
 800c944:	d018      	beq.n	800c978 <__ieee754_rem_pio2+0x80>
 800c946:	a3a6      	add	r3, pc, #664	; (adr r3, 800cbe0 <__ieee754_rem_pio2+0x2e8>)
 800c948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94c:	f7f3 fc9c 	bl	8000288 <__aeabi_dsub>
 800c950:	4602      	mov	r2, r0
 800c952:	460b      	mov	r3, r1
 800c954:	e9c4 2300 	strd	r2, r3, [r4]
 800c958:	4630      	mov	r0, r6
 800c95a:	4639      	mov	r1, r7
 800c95c:	f7f3 fc94 	bl	8000288 <__aeabi_dsub>
 800c960:	a39f      	add	r3, pc, #636	; (adr r3, 800cbe0 <__ieee754_rem_pio2+0x2e8>)
 800c962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c966:	f7f3 fc8f 	bl	8000288 <__aeabi_dsub>
 800c96a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c96e:	2501      	movs	r5, #1
 800c970:	4628      	mov	r0, r5
 800c972:	b00d      	add	sp, #52	; 0x34
 800c974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c978:	a39b      	add	r3, pc, #620	; (adr r3, 800cbe8 <__ieee754_rem_pio2+0x2f0>)
 800c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97e:	f7f3 fc83 	bl	8000288 <__aeabi_dsub>
 800c982:	a39b      	add	r3, pc, #620	; (adr r3, 800cbf0 <__ieee754_rem_pio2+0x2f8>)
 800c984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c988:	4606      	mov	r6, r0
 800c98a:	460f      	mov	r7, r1
 800c98c:	f7f3 fc7c 	bl	8000288 <__aeabi_dsub>
 800c990:	4602      	mov	r2, r0
 800c992:	460b      	mov	r3, r1
 800c994:	e9c4 2300 	strd	r2, r3, [r4]
 800c998:	4630      	mov	r0, r6
 800c99a:	4639      	mov	r1, r7
 800c99c:	f7f3 fc74 	bl	8000288 <__aeabi_dsub>
 800c9a0:	a393      	add	r3, pc, #588	; (adr r3, 800cbf0 <__ieee754_rem_pio2+0x2f8>)
 800c9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a6:	e7de      	b.n	800c966 <__ieee754_rem_pio2+0x6e>
 800c9a8:	f7f3 fc70 	bl	800028c <__adddf3>
 800c9ac:	45a8      	cmp	r8, r5
 800c9ae:	4606      	mov	r6, r0
 800c9b0:	460f      	mov	r7, r1
 800c9b2:	d016      	beq.n	800c9e2 <__ieee754_rem_pio2+0xea>
 800c9b4:	a38a      	add	r3, pc, #552	; (adr r3, 800cbe0 <__ieee754_rem_pio2+0x2e8>)
 800c9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ba:	f7f3 fc67 	bl	800028c <__adddf3>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	e9c4 2300 	strd	r2, r3, [r4]
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	4639      	mov	r1, r7
 800c9ca:	f7f3 fc5d 	bl	8000288 <__aeabi_dsub>
 800c9ce:	a384      	add	r3, pc, #528	; (adr r3, 800cbe0 <__ieee754_rem_pio2+0x2e8>)
 800c9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d4:	f7f3 fc5a 	bl	800028c <__adddf3>
 800c9d8:	f04f 35ff 	mov.w	r5, #4294967295
 800c9dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c9e0:	e7c6      	b.n	800c970 <__ieee754_rem_pio2+0x78>
 800c9e2:	a381      	add	r3, pc, #516	; (adr r3, 800cbe8 <__ieee754_rem_pio2+0x2f0>)
 800c9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e8:	f7f3 fc50 	bl	800028c <__adddf3>
 800c9ec:	a380      	add	r3, pc, #512	; (adr r3, 800cbf0 <__ieee754_rem_pio2+0x2f8>)
 800c9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f2:	4606      	mov	r6, r0
 800c9f4:	460f      	mov	r7, r1
 800c9f6:	f7f3 fc49 	bl	800028c <__adddf3>
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	e9c4 2300 	strd	r2, r3, [r4]
 800ca02:	4630      	mov	r0, r6
 800ca04:	4639      	mov	r1, r7
 800ca06:	f7f3 fc3f 	bl	8000288 <__aeabi_dsub>
 800ca0a:	a379      	add	r3, pc, #484	; (adr r3, 800cbf0 <__ieee754_rem_pio2+0x2f8>)
 800ca0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca10:	e7e0      	b.n	800c9d4 <__ieee754_rem_pio2+0xdc>
 800ca12:	4b82      	ldr	r3, [pc, #520]	; (800cc1c <__ieee754_rem_pio2+0x324>)
 800ca14:	4598      	cmp	r8, r3
 800ca16:	f300 80d0 	bgt.w	800cbba <__ieee754_rem_pio2+0x2c2>
 800ca1a:	f000 fe53 	bl	800d6c4 <fabs>
 800ca1e:	ec57 6b10 	vmov	r6, r7, d0
 800ca22:	ee10 0a10 	vmov	r0, s0
 800ca26:	a374      	add	r3, pc, #464	; (adr r3, 800cbf8 <__ieee754_rem_pio2+0x300>)
 800ca28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2c:	4639      	mov	r1, r7
 800ca2e:	f7f3 fddf 	bl	80005f0 <__aeabi_dmul>
 800ca32:	2200      	movs	r2, #0
 800ca34:	4b7a      	ldr	r3, [pc, #488]	; (800cc20 <__ieee754_rem_pio2+0x328>)
 800ca36:	f7f3 fc29 	bl	800028c <__adddf3>
 800ca3a:	f7f4 f873 	bl	8000b24 <__aeabi_d2iz>
 800ca3e:	4605      	mov	r5, r0
 800ca40:	f7f3 fd70 	bl	8000524 <__aeabi_i2d>
 800ca44:	a364      	add	r3, pc, #400	; (adr r3, 800cbd8 <__ieee754_rem_pio2+0x2e0>)
 800ca46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca4e:	f7f3 fdcf 	bl	80005f0 <__aeabi_dmul>
 800ca52:	4602      	mov	r2, r0
 800ca54:	460b      	mov	r3, r1
 800ca56:	4630      	mov	r0, r6
 800ca58:	4639      	mov	r1, r7
 800ca5a:	f7f3 fc15 	bl	8000288 <__aeabi_dsub>
 800ca5e:	a360      	add	r3, pc, #384	; (adr r3, 800cbe0 <__ieee754_rem_pio2+0x2e8>)
 800ca60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca64:	4682      	mov	sl, r0
 800ca66:	468b      	mov	fp, r1
 800ca68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca6c:	f7f3 fdc0 	bl	80005f0 <__aeabi_dmul>
 800ca70:	2d1f      	cmp	r5, #31
 800ca72:	4606      	mov	r6, r0
 800ca74:	460f      	mov	r7, r1
 800ca76:	dc2a      	bgt.n	800cace <__ieee754_rem_pio2+0x1d6>
 800ca78:	1e6a      	subs	r2, r5, #1
 800ca7a:	4b6a      	ldr	r3, [pc, #424]	; (800cc24 <__ieee754_rem_pio2+0x32c>)
 800ca7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca80:	4598      	cmp	r8, r3
 800ca82:	d024      	beq.n	800cace <__ieee754_rem_pio2+0x1d6>
 800ca84:	4632      	mov	r2, r6
 800ca86:	463b      	mov	r3, r7
 800ca88:	4650      	mov	r0, sl
 800ca8a:	4659      	mov	r1, fp
 800ca8c:	f7f3 fbfc 	bl	8000288 <__aeabi_dsub>
 800ca90:	e9c4 0100 	strd	r0, r1, [r4]
 800ca94:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ca98:	4650      	mov	r0, sl
 800ca9a:	4642      	mov	r2, r8
 800ca9c:	464b      	mov	r3, r9
 800ca9e:	4659      	mov	r1, fp
 800caa0:	f7f3 fbf2 	bl	8000288 <__aeabi_dsub>
 800caa4:	463b      	mov	r3, r7
 800caa6:	4632      	mov	r2, r6
 800caa8:	f7f3 fbee 	bl	8000288 <__aeabi_dsub>
 800caac:	9b04      	ldr	r3, [sp, #16]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cab4:	f6bf af5c 	bge.w	800c970 <__ieee754_rem_pio2+0x78>
 800cab8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cabc:	6063      	str	r3, [r4, #4]
 800cabe:	f8c4 8000 	str.w	r8, [r4]
 800cac2:	60a0      	str	r0, [r4, #8]
 800cac4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cac8:	60e3      	str	r3, [r4, #12]
 800caca:	426d      	negs	r5, r5
 800cacc:	e750      	b.n	800c970 <__ieee754_rem_pio2+0x78>
 800cace:	4632      	mov	r2, r6
 800cad0:	463b      	mov	r3, r7
 800cad2:	4650      	mov	r0, sl
 800cad4:	4659      	mov	r1, fp
 800cad6:	f7f3 fbd7 	bl	8000288 <__aeabi_dsub>
 800cada:	ea4f 5228 	mov.w	r2, r8, asr #20
 800cade:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cae2:	1ad3      	subs	r3, r2, r3
 800cae4:	2b10      	cmp	r3, #16
 800cae6:	e9c4 0100 	strd	r0, r1, [r4]
 800caea:	9205      	str	r2, [sp, #20]
 800caec:	ddd2      	ble.n	800ca94 <__ieee754_rem_pio2+0x19c>
 800caee:	a33e      	add	r3, pc, #248	; (adr r3, 800cbe8 <__ieee754_rem_pio2+0x2f0>)
 800caf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caf8:	f7f3 fd7a 	bl	80005f0 <__aeabi_dmul>
 800cafc:	4606      	mov	r6, r0
 800cafe:	460f      	mov	r7, r1
 800cb00:	4602      	mov	r2, r0
 800cb02:	460b      	mov	r3, r1
 800cb04:	4650      	mov	r0, sl
 800cb06:	4659      	mov	r1, fp
 800cb08:	f7f3 fbbe 	bl	8000288 <__aeabi_dsub>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	460b      	mov	r3, r1
 800cb10:	4680      	mov	r8, r0
 800cb12:	4689      	mov	r9, r1
 800cb14:	4650      	mov	r0, sl
 800cb16:	4659      	mov	r1, fp
 800cb18:	f7f3 fbb6 	bl	8000288 <__aeabi_dsub>
 800cb1c:	4632      	mov	r2, r6
 800cb1e:	463b      	mov	r3, r7
 800cb20:	f7f3 fbb2 	bl	8000288 <__aeabi_dsub>
 800cb24:	a332      	add	r3, pc, #200	; (adr r3, 800cbf0 <__ieee754_rem_pio2+0x2f8>)
 800cb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	460f      	mov	r7, r1
 800cb2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb32:	f7f3 fd5d 	bl	80005f0 <__aeabi_dmul>
 800cb36:	4632      	mov	r2, r6
 800cb38:	463b      	mov	r3, r7
 800cb3a:	f7f3 fba5 	bl	8000288 <__aeabi_dsub>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	460b      	mov	r3, r1
 800cb42:	4606      	mov	r6, r0
 800cb44:	460f      	mov	r7, r1
 800cb46:	4640      	mov	r0, r8
 800cb48:	4649      	mov	r1, r9
 800cb4a:	f7f3 fb9d 	bl	8000288 <__aeabi_dsub>
 800cb4e:	9a05      	ldr	r2, [sp, #20]
 800cb50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cb54:	1ad3      	subs	r3, r2, r3
 800cb56:	2b31      	cmp	r3, #49	; 0x31
 800cb58:	e9c4 0100 	strd	r0, r1, [r4]
 800cb5c:	dd2a      	ble.n	800cbb4 <__ieee754_rem_pio2+0x2bc>
 800cb5e:	a328      	add	r3, pc, #160	; (adr r3, 800cc00 <__ieee754_rem_pio2+0x308>)
 800cb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb68:	f7f3 fd42 	bl	80005f0 <__aeabi_dmul>
 800cb6c:	4606      	mov	r6, r0
 800cb6e:	460f      	mov	r7, r1
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	4640      	mov	r0, r8
 800cb76:	4649      	mov	r1, r9
 800cb78:	f7f3 fb86 	bl	8000288 <__aeabi_dsub>
 800cb7c:	4602      	mov	r2, r0
 800cb7e:	460b      	mov	r3, r1
 800cb80:	4682      	mov	sl, r0
 800cb82:	468b      	mov	fp, r1
 800cb84:	4640      	mov	r0, r8
 800cb86:	4649      	mov	r1, r9
 800cb88:	f7f3 fb7e 	bl	8000288 <__aeabi_dsub>
 800cb8c:	4632      	mov	r2, r6
 800cb8e:	463b      	mov	r3, r7
 800cb90:	f7f3 fb7a 	bl	8000288 <__aeabi_dsub>
 800cb94:	a31c      	add	r3, pc, #112	; (adr r3, 800cc08 <__ieee754_rem_pio2+0x310>)
 800cb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9a:	4606      	mov	r6, r0
 800cb9c:	460f      	mov	r7, r1
 800cb9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cba2:	f7f3 fd25 	bl	80005f0 <__aeabi_dmul>
 800cba6:	4632      	mov	r2, r6
 800cba8:	463b      	mov	r3, r7
 800cbaa:	f7f3 fb6d 	bl	8000288 <__aeabi_dsub>
 800cbae:	4606      	mov	r6, r0
 800cbb0:	460f      	mov	r7, r1
 800cbb2:	e767      	b.n	800ca84 <__ieee754_rem_pio2+0x18c>
 800cbb4:	46c2      	mov	sl, r8
 800cbb6:	46cb      	mov	fp, r9
 800cbb8:	e76c      	b.n	800ca94 <__ieee754_rem_pio2+0x19c>
 800cbba:	4b1b      	ldr	r3, [pc, #108]	; (800cc28 <__ieee754_rem_pio2+0x330>)
 800cbbc:	4598      	cmp	r8, r3
 800cbbe:	dd35      	ble.n	800cc2c <__ieee754_rem_pio2+0x334>
 800cbc0:	ee10 2a10 	vmov	r2, s0
 800cbc4:	463b      	mov	r3, r7
 800cbc6:	4630      	mov	r0, r6
 800cbc8:	4639      	mov	r1, r7
 800cbca:	f7f3 fb5d 	bl	8000288 <__aeabi_dsub>
 800cbce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cbd2:	e9c4 0100 	strd	r0, r1, [r4]
 800cbd6:	e6a1      	b.n	800c91c <__ieee754_rem_pio2+0x24>
 800cbd8:	54400000 	.word	0x54400000
 800cbdc:	3ff921fb 	.word	0x3ff921fb
 800cbe0:	1a626331 	.word	0x1a626331
 800cbe4:	3dd0b461 	.word	0x3dd0b461
 800cbe8:	1a600000 	.word	0x1a600000
 800cbec:	3dd0b461 	.word	0x3dd0b461
 800cbf0:	2e037073 	.word	0x2e037073
 800cbf4:	3ba3198a 	.word	0x3ba3198a
 800cbf8:	6dc9c883 	.word	0x6dc9c883
 800cbfc:	3fe45f30 	.word	0x3fe45f30
 800cc00:	2e000000 	.word	0x2e000000
 800cc04:	3ba3198a 	.word	0x3ba3198a
 800cc08:	252049c1 	.word	0x252049c1
 800cc0c:	397b839a 	.word	0x397b839a
 800cc10:	3fe921fb 	.word	0x3fe921fb
 800cc14:	4002d97b 	.word	0x4002d97b
 800cc18:	3ff921fb 	.word	0x3ff921fb
 800cc1c:	413921fb 	.word	0x413921fb
 800cc20:	3fe00000 	.word	0x3fe00000
 800cc24:	0800de30 	.word	0x0800de30
 800cc28:	7fefffff 	.word	0x7fefffff
 800cc2c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800cc30:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800cc34:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800cc38:	4630      	mov	r0, r6
 800cc3a:	460f      	mov	r7, r1
 800cc3c:	f7f3 ff72 	bl	8000b24 <__aeabi_d2iz>
 800cc40:	f7f3 fc70 	bl	8000524 <__aeabi_i2d>
 800cc44:	4602      	mov	r2, r0
 800cc46:	460b      	mov	r3, r1
 800cc48:	4630      	mov	r0, r6
 800cc4a:	4639      	mov	r1, r7
 800cc4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cc50:	f7f3 fb1a 	bl	8000288 <__aeabi_dsub>
 800cc54:	2200      	movs	r2, #0
 800cc56:	4b1f      	ldr	r3, [pc, #124]	; (800ccd4 <__ieee754_rem_pio2+0x3dc>)
 800cc58:	f7f3 fcca 	bl	80005f0 <__aeabi_dmul>
 800cc5c:	460f      	mov	r7, r1
 800cc5e:	4606      	mov	r6, r0
 800cc60:	f7f3 ff60 	bl	8000b24 <__aeabi_d2iz>
 800cc64:	f7f3 fc5e 	bl	8000524 <__aeabi_i2d>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	4630      	mov	r0, r6
 800cc6e:	4639      	mov	r1, r7
 800cc70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cc74:	f7f3 fb08 	bl	8000288 <__aeabi_dsub>
 800cc78:	2200      	movs	r2, #0
 800cc7a:	4b16      	ldr	r3, [pc, #88]	; (800ccd4 <__ieee754_rem_pio2+0x3dc>)
 800cc7c:	f7f3 fcb8 	bl	80005f0 <__aeabi_dmul>
 800cc80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cc84:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800cc88:	f04f 0803 	mov.w	r8, #3
 800cc8c:	2600      	movs	r6, #0
 800cc8e:	2700      	movs	r7, #0
 800cc90:	4632      	mov	r2, r6
 800cc92:	463b      	mov	r3, r7
 800cc94:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800cc98:	f108 3aff 	add.w	sl, r8, #4294967295
 800cc9c:	f7f3 ff10 	bl	8000ac0 <__aeabi_dcmpeq>
 800cca0:	b9b0      	cbnz	r0, 800ccd0 <__ieee754_rem_pio2+0x3d8>
 800cca2:	4b0d      	ldr	r3, [pc, #52]	; (800ccd8 <__ieee754_rem_pio2+0x3e0>)
 800cca4:	9301      	str	r3, [sp, #4]
 800cca6:	2302      	movs	r3, #2
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	462a      	mov	r2, r5
 800ccac:	4643      	mov	r3, r8
 800ccae:	4621      	mov	r1, r4
 800ccb0:	a806      	add	r0, sp, #24
 800ccb2:	f000 f8fd 	bl	800ceb0 <__kernel_rem_pio2>
 800ccb6:	9b04      	ldr	r3, [sp, #16]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	4605      	mov	r5, r0
 800ccbc:	f6bf ae58 	bge.w	800c970 <__ieee754_rem_pio2+0x78>
 800ccc0:	6863      	ldr	r3, [r4, #4]
 800ccc2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ccc6:	6063      	str	r3, [r4, #4]
 800ccc8:	68e3      	ldr	r3, [r4, #12]
 800ccca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ccce:	e6fb      	b.n	800cac8 <__ieee754_rem_pio2+0x1d0>
 800ccd0:	46d0      	mov	r8, sl
 800ccd2:	e7dd      	b.n	800cc90 <__ieee754_rem_pio2+0x398>
 800ccd4:	41700000 	.word	0x41700000
 800ccd8:	0800deb0 	.word	0x0800deb0
 800ccdc:	00000000 	.word	0x00000000

0800cce0 <__kernel_cos>:
 800cce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce4:	ec59 8b10 	vmov	r8, r9, d0
 800cce8:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 800ccec:	b085      	sub	sp, #20
 800ccee:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800ccf2:	ed8d 1b00 	vstr	d1, [sp]
 800ccf6:	da07      	bge.n	800cd08 <__kernel_cos+0x28>
 800ccf8:	ee10 0a10 	vmov	r0, s0
 800ccfc:	4649      	mov	r1, r9
 800ccfe:	f7f3 ff11 	bl	8000b24 <__aeabi_d2iz>
 800cd02:	2800      	cmp	r0, #0
 800cd04:	f000 80aa 	beq.w	800ce5c <__kernel_cos+0x17c>
 800cd08:	4642      	mov	r2, r8
 800cd0a:	464b      	mov	r3, r9
 800cd0c:	4640      	mov	r0, r8
 800cd0e:	4649      	mov	r1, r9
 800cd10:	f7f3 fc6e 	bl	80005f0 <__aeabi_dmul>
 800cd14:	a359      	add	r3, pc, #356	; (adr r3, 800ce7c <__kernel_cos+0x19c>)
 800cd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1a:	4604      	mov	r4, r0
 800cd1c:	460d      	mov	r5, r1
 800cd1e:	f7f3 fc67 	bl	80005f0 <__aeabi_dmul>
 800cd22:	a358      	add	r3, pc, #352	; (adr r3, 800ce84 <__kernel_cos+0x1a4>)
 800cd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd28:	f7f3 fab0 	bl	800028c <__adddf3>
 800cd2c:	4622      	mov	r2, r4
 800cd2e:	462b      	mov	r3, r5
 800cd30:	f7f3 fc5e 	bl	80005f0 <__aeabi_dmul>
 800cd34:	a355      	add	r3, pc, #340	; (adr r3, 800ce8c <__kernel_cos+0x1ac>)
 800cd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3a:	f7f3 faa5 	bl	8000288 <__aeabi_dsub>
 800cd3e:	4622      	mov	r2, r4
 800cd40:	462b      	mov	r3, r5
 800cd42:	f7f3 fc55 	bl	80005f0 <__aeabi_dmul>
 800cd46:	a353      	add	r3, pc, #332	; (adr r3, 800ce94 <__kernel_cos+0x1b4>)
 800cd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4c:	f7f3 fa9e 	bl	800028c <__adddf3>
 800cd50:	4622      	mov	r2, r4
 800cd52:	462b      	mov	r3, r5
 800cd54:	f7f3 fc4c 	bl	80005f0 <__aeabi_dmul>
 800cd58:	a350      	add	r3, pc, #320	; (adr r3, 800ce9c <__kernel_cos+0x1bc>)
 800cd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5e:	f7f3 fa93 	bl	8000288 <__aeabi_dsub>
 800cd62:	4622      	mov	r2, r4
 800cd64:	462b      	mov	r3, r5
 800cd66:	f7f3 fc43 	bl	80005f0 <__aeabi_dmul>
 800cd6a:	a34e      	add	r3, pc, #312	; (adr r3, 800cea4 <__kernel_cos+0x1c4>)
 800cd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd70:	f7f3 fa8c 	bl	800028c <__adddf3>
 800cd74:	462b      	mov	r3, r5
 800cd76:	4622      	mov	r2, r4
 800cd78:	f7f3 fc3a 	bl	80005f0 <__aeabi_dmul>
 800cd7c:	4b3a      	ldr	r3, [pc, #232]	; (800ce68 <__kernel_cos+0x188>)
 800cd7e:	429f      	cmp	r7, r3
 800cd80:	4682      	mov	sl, r0
 800cd82:	468b      	mov	fp, r1
 800cd84:	dc2c      	bgt.n	800cde0 <__kernel_cos+0x100>
 800cd86:	2200      	movs	r2, #0
 800cd88:	4b38      	ldr	r3, [pc, #224]	; (800ce6c <__kernel_cos+0x18c>)
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	4629      	mov	r1, r5
 800cd8e:	f7f3 fc2f 	bl	80005f0 <__aeabi_dmul>
 800cd92:	4652      	mov	r2, sl
 800cd94:	4606      	mov	r6, r0
 800cd96:	460f      	mov	r7, r1
 800cd98:	465b      	mov	r3, fp
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	4629      	mov	r1, r5
 800cd9e:	f7f3 fc27 	bl	80005f0 <__aeabi_dmul>
 800cda2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cda6:	4604      	mov	r4, r0
 800cda8:	460d      	mov	r5, r1
 800cdaa:	4640      	mov	r0, r8
 800cdac:	4649      	mov	r1, r9
 800cdae:	f7f3 fc1f 	bl	80005f0 <__aeabi_dmul>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	4629      	mov	r1, r5
 800cdba:	f7f3 fa65 	bl	8000288 <__aeabi_dsub>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	4639      	mov	r1, r7
 800cdc6:	f7f3 fa5f 	bl	8000288 <__aeabi_dsub>
 800cdca:	460b      	mov	r3, r1
 800cdcc:	4928      	ldr	r1, [pc, #160]	; (800ce70 <__kernel_cos+0x190>)
 800cdce:	4602      	mov	r2, r0
 800cdd0:	2000      	movs	r0, #0
 800cdd2:	f7f3 fa59 	bl	8000288 <__aeabi_dsub>
 800cdd6:	ec41 0b10 	vmov	d0, r0, r1
 800cdda:	b005      	add	sp, #20
 800cddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde0:	4b24      	ldr	r3, [pc, #144]	; (800ce74 <__kernel_cos+0x194>)
 800cde2:	4923      	ldr	r1, [pc, #140]	; (800ce70 <__kernel_cos+0x190>)
 800cde4:	429f      	cmp	r7, r3
 800cde6:	bfd7      	itett	le
 800cde8:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 800cdec:	4f22      	ldrgt	r7, [pc, #136]	; (800ce78 <__kernel_cos+0x198>)
 800cdee:	2200      	movle	r2, #0
 800cdf0:	4616      	movle	r6, r2
 800cdf2:	bfd4      	ite	le
 800cdf4:	461f      	movle	r7, r3
 800cdf6:	2600      	movgt	r6, #0
 800cdf8:	4632      	mov	r2, r6
 800cdfa:	463b      	mov	r3, r7
 800cdfc:	2000      	movs	r0, #0
 800cdfe:	f7f3 fa43 	bl	8000288 <__aeabi_dsub>
 800ce02:	2200      	movs	r2, #0
 800ce04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce08:	4b18      	ldr	r3, [pc, #96]	; (800ce6c <__kernel_cos+0x18c>)
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	4629      	mov	r1, r5
 800ce0e:	f7f3 fbef 	bl	80005f0 <__aeabi_dmul>
 800ce12:	4632      	mov	r2, r6
 800ce14:	463b      	mov	r3, r7
 800ce16:	f7f3 fa37 	bl	8000288 <__aeabi_dsub>
 800ce1a:	4652      	mov	r2, sl
 800ce1c:	4606      	mov	r6, r0
 800ce1e:	460f      	mov	r7, r1
 800ce20:	465b      	mov	r3, fp
 800ce22:	4620      	mov	r0, r4
 800ce24:	4629      	mov	r1, r5
 800ce26:	f7f3 fbe3 	bl	80005f0 <__aeabi_dmul>
 800ce2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce2e:	4604      	mov	r4, r0
 800ce30:	460d      	mov	r5, r1
 800ce32:	4640      	mov	r0, r8
 800ce34:	4649      	mov	r1, r9
 800ce36:	f7f3 fbdb 	bl	80005f0 <__aeabi_dmul>
 800ce3a:	4602      	mov	r2, r0
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	4620      	mov	r0, r4
 800ce40:	4629      	mov	r1, r5
 800ce42:	f7f3 fa21 	bl	8000288 <__aeabi_dsub>
 800ce46:	4602      	mov	r2, r0
 800ce48:	460b      	mov	r3, r1
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	4639      	mov	r1, r7
 800ce4e:	f7f3 fa1b 	bl	8000288 <__aeabi_dsub>
 800ce52:	4602      	mov	r2, r0
 800ce54:	460b      	mov	r3, r1
 800ce56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce5a:	e7ba      	b.n	800cdd2 <__kernel_cos+0xf2>
 800ce5c:	2000      	movs	r0, #0
 800ce5e:	4904      	ldr	r1, [pc, #16]	; (800ce70 <__kernel_cos+0x190>)
 800ce60:	e7b9      	b.n	800cdd6 <__kernel_cos+0xf6>
 800ce62:	bf00      	nop
 800ce64:	f3af 8000 	nop.w
 800ce68:	3fd33332 	.word	0x3fd33332
 800ce6c:	3fe00000 	.word	0x3fe00000
 800ce70:	3ff00000 	.word	0x3ff00000
 800ce74:	3fe90000 	.word	0x3fe90000
 800ce78:	3fd20000 	.word	0x3fd20000
 800ce7c:	be8838d4 	.word	0xbe8838d4
 800ce80:	bda8fae9 	.word	0xbda8fae9
 800ce84:	bdb4b1c4 	.word	0xbdb4b1c4
 800ce88:	3e21ee9e 	.word	0x3e21ee9e
 800ce8c:	809c52ad 	.word	0x809c52ad
 800ce90:	3e927e4f 	.word	0x3e927e4f
 800ce94:	19cb1590 	.word	0x19cb1590
 800ce98:	3efa01a0 	.word	0x3efa01a0
 800ce9c:	16c15177 	.word	0x16c15177
 800cea0:	3f56c16c 	.word	0x3f56c16c
 800cea4:	5555554c 	.word	0x5555554c
 800cea8:	3fa55555 	.word	0x3fa55555
 800ceac:	00000000 	.word	0x00000000

0800ceb0 <__kernel_rem_pio2>:
 800ceb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb4:	ed2d 8b02 	vpush	{d8}
 800ceb8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800cebc:	1ed4      	subs	r4, r2, #3
 800cebe:	9306      	str	r3, [sp, #24]
 800cec0:	9102      	str	r1, [sp, #8]
 800cec2:	4bc3      	ldr	r3, [pc, #780]	; (800d1d0 <__kernel_rem_pio2+0x320>)
 800cec4:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800cec6:	9009      	str	r0, [sp, #36]	; 0x24
 800cec8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cecc:	9300      	str	r3, [sp, #0]
 800cece:	9b06      	ldr	r3, [sp, #24]
 800ced0:	3b01      	subs	r3, #1
 800ced2:	9304      	str	r3, [sp, #16]
 800ced4:	2318      	movs	r3, #24
 800ced6:	fb94 f4f3 	sdiv	r4, r4, r3
 800ceda:	f06f 0317 	mvn.w	r3, #23
 800cede:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800cee2:	fb04 3303 	mla	r3, r4, r3, r3
 800cee6:	eb03 0a02 	add.w	sl, r3, r2
 800ceea:	9b00      	ldr	r3, [sp, #0]
 800ceec:	9a04      	ldr	r2, [sp, #16]
 800ceee:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800d1c0 <__kernel_rem_pio2+0x310>
 800cef2:	eb03 0802 	add.w	r8, r3, r2
 800cef6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800cef8:	1aa7      	subs	r7, r4, r2
 800cefa:	ae20      	add	r6, sp, #128	; 0x80
 800cefc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cf00:	2500      	movs	r5, #0
 800cf02:	4545      	cmp	r5, r8
 800cf04:	dd13      	ble.n	800cf2e <__kernel_rem_pio2+0x7e>
 800cf06:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800d1c0 <__kernel_rem_pio2+0x310>
 800cf0a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800cf0e:	2600      	movs	r6, #0
 800cf10:	9b00      	ldr	r3, [sp, #0]
 800cf12:	429e      	cmp	r6, r3
 800cf14:	dc32      	bgt.n	800cf7c <__kernel_rem_pio2+0xcc>
 800cf16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf18:	9303      	str	r3, [sp, #12]
 800cf1a:	9b06      	ldr	r3, [sp, #24]
 800cf1c:	199d      	adds	r5, r3, r6
 800cf1e:	ab20      	add	r3, sp, #128	; 0x80
 800cf20:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cf24:	9308      	str	r3, [sp, #32]
 800cf26:	ec59 8b18 	vmov	r8, r9, d8
 800cf2a:	2700      	movs	r7, #0
 800cf2c:	e01f      	b.n	800cf6e <__kernel_rem_pio2+0xbe>
 800cf2e:	42ef      	cmn	r7, r5
 800cf30:	d407      	bmi.n	800cf42 <__kernel_rem_pio2+0x92>
 800cf32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cf36:	f7f3 faf5 	bl	8000524 <__aeabi_i2d>
 800cf3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cf3e:	3501      	adds	r5, #1
 800cf40:	e7df      	b.n	800cf02 <__kernel_rem_pio2+0x52>
 800cf42:	ec51 0b18 	vmov	r0, r1, d8
 800cf46:	e7f8      	b.n	800cf3a <__kernel_rem_pio2+0x8a>
 800cf48:	9908      	ldr	r1, [sp, #32]
 800cf4a:	9d03      	ldr	r5, [sp, #12]
 800cf4c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800cf50:	9108      	str	r1, [sp, #32]
 800cf52:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800cf56:	9503      	str	r5, [sp, #12]
 800cf58:	f7f3 fb4a 	bl	80005f0 <__aeabi_dmul>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	460b      	mov	r3, r1
 800cf60:	4640      	mov	r0, r8
 800cf62:	4649      	mov	r1, r9
 800cf64:	f7f3 f992 	bl	800028c <__adddf3>
 800cf68:	3701      	adds	r7, #1
 800cf6a:	4680      	mov	r8, r0
 800cf6c:	4689      	mov	r9, r1
 800cf6e:	9b04      	ldr	r3, [sp, #16]
 800cf70:	429f      	cmp	r7, r3
 800cf72:	dde9      	ble.n	800cf48 <__kernel_rem_pio2+0x98>
 800cf74:	e8eb 8902 	strd	r8, r9, [fp], #8
 800cf78:	3601      	adds	r6, #1
 800cf7a:	e7c9      	b.n	800cf10 <__kernel_rem_pio2+0x60>
 800cf7c:	9b00      	ldr	r3, [sp, #0]
 800cf7e:	9f00      	ldr	r7, [sp, #0]
 800cf80:	aa0c      	add	r2, sp, #48	; 0x30
 800cf82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf86:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf88:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800cf8a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cf8e:	930a      	str	r3, [sp, #40]	; 0x28
 800cf90:	ab98      	add	r3, sp, #608	; 0x260
 800cf92:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800cf96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cf9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cf9e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800cfa2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cfa6:	9308      	str	r3, [sp, #32]
 800cfa8:	9a08      	ldr	r2, [sp, #32]
 800cfaa:	ab98      	add	r3, sp, #608	; 0x260
 800cfac:	4413      	add	r3, r2
 800cfae:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 800cfb2:	2600      	movs	r6, #0
 800cfb4:	1bbb      	subs	r3, r7, r6
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	dc77      	bgt.n	800d0aa <__kernel_rem_pio2+0x1fa>
 800cfba:	ec49 8b10 	vmov	d0, r8, r9
 800cfbe:	4650      	mov	r0, sl
 800cfc0:	f000 fc0e 	bl	800d7e0 <scalbn>
 800cfc4:	ec55 4b10 	vmov	r4, r5, d0
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cfce:	ee10 0a10 	vmov	r0, s0
 800cfd2:	4629      	mov	r1, r5
 800cfd4:	f7f3 fb0c 	bl	80005f0 <__aeabi_dmul>
 800cfd8:	ec41 0b10 	vmov	d0, r0, r1
 800cfdc:	f000 fb7c 	bl	800d6d8 <floor>
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	ec51 0b10 	vmov	r0, r1, d0
 800cfe6:	4b7b      	ldr	r3, [pc, #492]	; (800d1d4 <__kernel_rem_pio2+0x324>)
 800cfe8:	f7f3 fb02 	bl	80005f0 <__aeabi_dmul>
 800cfec:	4602      	mov	r2, r0
 800cfee:	460b      	mov	r3, r1
 800cff0:	4620      	mov	r0, r4
 800cff2:	4629      	mov	r1, r5
 800cff4:	f7f3 f948 	bl	8000288 <__aeabi_dsub>
 800cff8:	460d      	mov	r5, r1
 800cffa:	4604      	mov	r4, r0
 800cffc:	f7f3 fd92 	bl	8000b24 <__aeabi_d2iz>
 800d000:	9003      	str	r0, [sp, #12]
 800d002:	f7f3 fa8f 	bl	8000524 <__aeabi_i2d>
 800d006:	4602      	mov	r2, r0
 800d008:	460b      	mov	r3, r1
 800d00a:	4620      	mov	r0, r4
 800d00c:	4629      	mov	r1, r5
 800d00e:	f7f3 f93b 	bl	8000288 <__aeabi_dsub>
 800d012:	f1ba 0f00 	cmp.w	sl, #0
 800d016:	4680      	mov	r8, r0
 800d018:	4689      	mov	r9, r1
 800d01a:	dd6b      	ble.n	800d0f4 <__kernel_rem_pio2+0x244>
 800d01c:	1e7a      	subs	r2, r7, #1
 800d01e:	ab0c      	add	r3, sp, #48	; 0x30
 800d020:	f1ca 0118 	rsb	r1, sl, #24
 800d024:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d028:	9c03      	ldr	r4, [sp, #12]
 800d02a:	fa40 f301 	asr.w	r3, r0, r1
 800d02e:	441c      	add	r4, r3
 800d030:	408b      	lsls	r3, r1
 800d032:	1ac0      	subs	r0, r0, r3
 800d034:	ab0c      	add	r3, sp, #48	; 0x30
 800d036:	9403      	str	r4, [sp, #12]
 800d038:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d03c:	f1ca 0317 	rsb	r3, sl, #23
 800d040:	fa40 fb03 	asr.w	fp, r0, r3
 800d044:	f1bb 0f00 	cmp.w	fp, #0
 800d048:	dd62      	ble.n	800d110 <__kernel_rem_pio2+0x260>
 800d04a:	9b03      	ldr	r3, [sp, #12]
 800d04c:	2200      	movs	r2, #0
 800d04e:	3301      	adds	r3, #1
 800d050:	9303      	str	r3, [sp, #12]
 800d052:	4614      	mov	r4, r2
 800d054:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d058:	4297      	cmp	r7, r2
 800d05a:	f300 8089 	bgt.w	800d170 <__kernel_rem_pio2+0x2c0>
 800d05e:	f1ba 0f00 	cmp.w	sl, #0
 800d062:	dd07      	ble.n	800d074 <__kernel_rem_pio2+0x1c4>
 800d064:	f1ba 0f01 	cmp.w	sl, #1
 800d068:	f000 8096 	beq.w	800d198 <__kernel_rem_pio2+0x2e8>
 800d06c:	f1ba 0f02 	cmp.w	sl, #2
 800d070:	f000 809c 	beq.w	800d1ac <__kernel_rem_pio2+0x2fc>
 800d074:	f1bb 0f02 	cmp.w	fp, #2
 800d078:	d14a      	bne.n	800d110 <__kernel_rem_pio2+0x260>
 800d07a:	4642      	mov	r2, r8
 800d07c:	464b      	mov	r3, r9
 800d07e:	2000      	movs	r0, #0
 800d080:	4955      	ldr	r1, [pc, #340]	; (800d1d8 <__kernel_rem_pio2+0x328>)
 800d082:	f7f3 f901 	bl	8000288 <__aeabi_dsub>
 800d086:	4680      	mov	r8, r0
 800d088:	4689      	mov	r9, r1
 800d08a:	2c00      	cmp	r4, #0
 800d08c:	d040      	beq.n	800d110 <__kernel_rem_pio2+0x260>
 800d08e:	4650      	mov	r0, sl
 800d090:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800d1c8 <__kernel_rem_pio2+0x318>
 800d094:	f000 fba4 	bl	800d7e0 <scalbn>
 800d098:	4640      	mov	r0, r8
 800d09a:	4649      	mov	r1, r9
 800d09c:	ec53 2b10 	vmov	r2, r3, d0
 800d0a0:	f7f3 f8f2 	bl	8000288 <__aeabi_dsub>
 800d0a4:	4680      	mov	r8, r0
 800d0a6:	4689      	mov	r9, r1
 800d0a8:	e032      	b.n	800d110 <__kernel_rem_pio2+0x260>
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	4b4b      	ldr	r3, [pc, #300]	; (800d1dc <__kernel_rem_pio2+0x32c>)
 800d0ae:	4640      	mov	r0, r8
 800d0b0:	4649      	mov	r1, r9
 800d0b2:	f7f3 fa9d 	bl	80005f0 <__aeabi_dmul>
 800d0b6:	f7f3 fd35 	bl	8000b24 <__aeabi_d2iz>
 800d0ba:	f7f3 fa33 	bl	8000524 <__aeabi_i2d>
 800d0be:	2200      	movs	r2, #0
 800d0c0:	4b47      	ldr	r3, [pc, #284]	; (800d1e0 <__kernel_rem_pio2+0x330>)
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	460d      	mov	r5, r1
 800d0c6:	f7f3 fa93 	bl	80005f0 <__aeabi_dmul>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	4640      	mov	r0, r8
 800d0d0:	4649      	mov	r1, r9
 800d0d2:	f7f3 f8d9 	bl	8000288 <__aeabi_dsub>
 800d0d6:	f7f3 fd25 	bl	8000b24 <__aeabi_d2iz>
 800d0da:	ab0c      	add	r3, sp, #48	; 0x30
 800d0dc:	4629      	mov	r1, r5
 800d0de:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800d0e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d0e6:	4620      	mov	r0, r4
 800d0e8:	f7f3 f8d0 	bl	800028c <__adddf3>
 800d0ec:	3601      	adds	r6, #1
 800d0ee:	4680      	mov	r8, r0
 800d0f0:	4689      	mov	r9, r1
 800d0f2:	e75f      	b.n	800cfb4 <__kernel_rem_pio2+0x104>
 800d0f4:	d106      	bne.n	800d104 <__kernel_rem_pio2+0x254>
 800d0f6:	1e7b      	subs	r3, r7, #1
 800d0f8:	aa0c      	add	r2, sp, #48	; 0x30
 800d0fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d0fe:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800d102:	e79f      	b.n	800d044 <__kernel_rem_pio2+0x194>
 800d104:	2200      	movs	r2, #0
 800d106:	4b37      	ldr	r3, [pc, #220]	; (800d1e4 <__kernel_rem_pio2+0x334>)
 800d108:	f7f3 fcf8 	bl	8000afc <__aeabi_dcmpge>
 800d10c:	bb68      	cbnz	r0, 800d16a <__kernel_rem_pio2+0x2ba>
 800d10e:	4683      	mov	fp, r0
 800d110:	2200      	movs	r2, #0
 800d112:	2300      	movs	r3, #0
 800d114:	4640      	mov	r0, r8
 800d116:	4649      	mov	r1, r9
 800d118:	f7f3 fcd2 	bl	8000ac0 <__aeabi_dcmpeq>
 800d11c:	2800      	cmp	r0, #0
 800d11e:	f000 80c1 	beq.w	800d2a4 <__kernel_rem_pio2+0x3f4>
 800d122:	1e7c      	subs	r4, r7, #1
 800d124:	4623      	mov	r3, r4
 800d126:	2200      	movs	r2, #0
 800d128:	9900      	ldr	r1, [sp, #0]
 800d12a:	428b      	cmp	r3, r1
 800d12c:	da5c      	bge.n	800d1e8 <__kernel_rem_pio2+0x338>
 800d12e:	2a00      	cmp	r2, #0
 800d130:	f040 808b 	bne.w	800d24a <__kernel_rem_pio2+0x39a>
 800d134:	2401      	movs	r4, #1
 800d136:	f06f 0203 	mvn.w	r2, #3
 800d13a:	fb02 f304 	mul.w	r3, r2, r4
 800d13e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d140:	58cb      	ldr	r3, [r1, r3]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d056      	beq.n	800d1f4 <__kernel_rem_pio2+0x344>
 800d146:	9b08      	ldr	r3, [sp, #32]
 800d148:	aa98      	add	r2, sp, #608	; 0x260
 800d14a:	4413      	add	r3, r2
 800d14c:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 800d150:	9b06      	ldr	r3, [sp, #24]
 800d152:	19dd      	adds	r5, r3, r7
 800d154:	ab20      	add	r3, sp, #128	; 0x80
 800d156:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d15a:	19e3      	adds	r3, r4, r7
 800d15c:	1c7e      	adds	r6, r7, #1
 800d15e:	9303      	str	r3, [sp, #12]
 800d160:	9b03      	ldr	r3, [sp, #12]
 800d162:	429e      	cmp	r6, r3
 800d164:	dd48      	ble.n	800d1f8 <__kernel_rem_pio2+0x348>
 800d166:	461f      	mov	r7, r3
 800d168:	e712      	b.n	800cf90 <__kernel_rem_pio2+0xe0>
 800d16a:	f04f 0b02 	mov.w	fp, #2
 800d16e:	e76c      	b.n	800d04a <__kernel_rem_pio2+0x19a>
 800d170:	ab0c      	add	r3, sp, #48	; 0x30
 800d172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d176:	b94c      	cbnz	r4, 800d18c <__kernel_rem_pio2+0x2dc>
 800d178:	b12b      	cbz	r3, 800d186 <__kernel_rem_pio2+0x2d6>
 800d17a:	a80c      	add	r0, sp, #48	; 0x30
 800d17c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d180:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800d184:	2301      	movs	r3, #1
 800d186:	3201      	adds	r2, #1
 800d188:	461c      	mov	r4, r3
 800d18a:	e765      	b.n	800d058 <__kernel_rem_pio2+0x1a8>
 800d18c:	a80c      	add	r0, sp, #48	; 0x30
 800d18e:	1acb      	subs	r3, r1, r3
 800d190:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800d194:	4623      	mov	r3, r4
 800d196:	e7f6      	b.n	800d186 <__kernel_rem_pio2+0x2d6>
 800d198:	1e7a      	subs	r2, r7, #1
 800d19a:	ab0c      	add	r3, sp, #48	; 0x30
 800d19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1a0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d1a4:	a90c      	add	r1, sp, #48	; 0x30
 800d1a6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d1aa:	e763      	b.n	800d074 <__kernel_rem_pio2+0x1c4>
 800d1ac:	1e7a      	subs	r2, r7, #1
 800d1ae:	ab0c      	add	r3, sp, #48	; 0x30
 800d1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1b4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d1b8:	e7f4      	b.n	800d1a4 <__kernel_rem_pio2+0x2f4>
 800d1ba:	bf00      	nop
 800d1bc:	f3af 8000 	nop.w
	...
 800d1cc:	3ff00000 	.word	0x3ff00000
 800d1d0:	0800dff8 	.word	0x0800dff8
 800d1d4:	40200000 	.word	0x40200000
 800d1d8:	3ff00000 	.word	0x3ff00000
 800d1dc:	3e700000 	.word	0x3e700000
 800d1e0:	41700000 	.word	0x41700000
 800d1e4:	3fe00000 	.word	0x3fe00000
 800d1e8:	a90c      	add	r1, sp, #48	; 0x30
 800d1ea:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d1ee:	3b01      	subs	r3, #1
 800d1f0:	430a      	orrs	r2, r1
 800d1f2:	e799      	b.n	800d128 <__kernel_rem_pio2+0x278>
 800d1f4:	3401      	adds	r4, #1
 800d1f6:	e7a0      	b.n	800d13a <__kernel_rem_pio2+0x28a>
 800d1f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d1fe:	f7f3 f991 	bl	8000524 <__aeabi_i2d>
 800d202:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d208:	9508      	str	r5, [sp, #32]
 800d20a:	461c      	mov	r4, r3
 800d20c:	2700      	movs	r7, #0
 800d20e:	f04f 0800 	mov.w	r8, #0
 800d212:	f04f 0900 	mov.w	r9, #0
 800d216:	9b04      	ldr	r3, [sp, #16]
 800d218:	429f      	cmp	r7, r3
 800d21a:	dd03      	ble.n	800d224 <__kernel_rem_pio2+0x374>
 800d21c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800d220:	3601      	adds	r6, #1
 800d222:	e79d      	b.n	800d160 <__kernel_rem_pio2+0x2b0>
 800d224:	9908      	ldr	r1, [sp, #32]
 800d226:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800d22a:	9108      	str	r1, [sp, #32]
 800d22c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d230:	f7f3 f9de 	bl	80005f0 <__aeabi_dmul>
 800d234:	4602      	mov	r2, r0
 800d236:	460b      	mov	r3, r1
 800d238:	4640      	mov	r0, r8
 800d23a:	4649      	mov	r1, r9
 800d23c:	f7f3 f826 	bl	800028c <__adddf3>
 800d240:	3701      	adds	r7, #1
 800d242:	4680      	mov	r8, r0
 800d244:	4689      	mov	r9, r1
 800d246:	e7e6      	b.n	800d216 <__kernel_rem_pio2+0x366>
 800d248:	3c01      	subs	r4, #1
 800d24a:	ab0c      	add	r3, sp, #48	; 0x30
 800d24c:	f1aa 0a18 	sub.w	sl, sl, #24
 800d250:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d0f7      	beq.n	800d248 <__kernel_rem_pio2+0x398>
 800d258:	4650      	mov	r0, sl
 800d25a:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 800d530 <__kernel_rem_pio2+0x680>
 800d25e:	f000 fabf 	bl	800d7e0 <scalbn>
 800d262:	00e5      	lsls	r5, r4, #3
 800d264:	ab98      	add	r3, sp, #608	; 0x260
 800d266:	eb03 0905 	add.w	r9, r3, r5
 800d26a:	ec57 6b10 	vmov	r6, r7, d0
 800d26e:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 800d272:	46a0      	mov	r8, r4
 800d274:	f1b8 0f00 	cmp.w	r8, #0
 800d278:	da4d      	bge.n	800d316 <__kernel_rem_pio2+0x466>
 800d27a:	ed9f 8baf 	vldr	d8, [pc, #700]	; 800d538 <__kernel_rem_pio2+0x688>
 800d27e:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 800d282:	2300      	movs	r3, #0
 800d284:	9304      	str	r3, [sp, #16]
 800d286:	4657      	mov	r7, sl
 800d288:	9b04      	ldr	r3, [sp, #16]
 800d28a:	ebb4 0903 	subs.w	r9, r4, r3
 800d28e:	d476      	bmi.n	800d37e <__kernel_rem_pio2+0x4ce>
 800d290:	4bab      	ldr	r3, [pc, #684]	; (800d540 <__kernel_rem_pio2+0x690>)
 800d292:	461e      	mov	r6, r3
 800d294:	ab70      	add	r3, sp, #448	; 0x1c0
 800d296:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d29a:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d29e:	f04f 0800 	mov.w	r8, #0
 800d2a2:	e05e      	b.n	800d362 <__kernel_rem_pio2+0x4b2>
 800d2a4:	f1ca 0000 	rsb	r0, sl, #0
 800d2a8:	ec49 8b10 	vmov	d0, r8, r9
 800d2ac:	f000 fa98 	bl	800d7e0 <scalbn>
 800d2b0:	ec55 4b10 	vmov	r4, r5, d0
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	4ba3      	ldr	r3, [pc, #652]	; (800d544 <__kernel_rem_pio2+0x694>)
 800d2b8:	ee10 0a10 	vmov	r0, s0
 800d2bc:	4629      	mov	r1, r5
 800d2be:	f7f3 fc1d 	bl	8000afc <__aeabi_dcmpge>
 800d2c2:	b1f8      	cbz	r0, 800d304 <__kernel_rem_pio2+0x454>
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	4ba0      	ldr	r3, [pc, #640]	; (800d548 <__kernel_rem_pio2+0x698>)
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	4629      	mov	r1, r5
 800d2cc:	f7f3 f990 	bl	80005f0 <__aeabi_dmul>
 800d2d0:	f7f3 fc28 	bl	8000b24 <__aeabi_d2iz>
 800d2d4:	4606      	mov	r6, r0
 800d2d6:	f7f3 f925 	bl	8000524 <__aeabi_i2d>
 800d2da:	2200      	movs	r2, #0
 800d2dc:	4b99      	ldr	r3, [pc, #612]	; (800d544 <__kernel_rem_pio2+0x694>)
 800d2de:	f7f3 f987 	bl	80005f0 <__aeabi_dmul>
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	4629      	mov	r1, r5
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	f7f2 ffcd 	bl	8000288 <__aeabi_dsub>
 800d2ee:	f7f3 fc19 	bl	8000b24 <__aeabi_d2iz>
 800d2f2:	1c7c      	adds	r4, r7, #1
 800d2f4:	ab0c      	add	r3, sp, #48	; 0x30
 800d2f6:	f10a 0a18 	add.w	sl, sl, #24
 800d2fa:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800d2fe:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800d302:	e7a9      	b.n	800d258 <__kernel_rem_pio2+0x3a8>
 800d304:	4620      	mov	r0, r4
 800d306:	4629      	mov	r1, r5
 800d308:	f7f3 fc0c 	bl	8000b24 <__aeabi_d2iz>
 800d30c:	ab0c      	add	r3, sp, #48	; 0x30
 800d30e:	463c      	mov	r4, r7
 800d310:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800d314:	e7a0      	b.n	800d258 <__kernel_rem_pio2+0x3a8>
 800d316:	ab0c      	add	r3, sp, #48	; 0x30
 800d318:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d31c:	f7f3 f902 	bl	8000524 <__aeabi_i2d>
 800d320:	4632      	mov	r2, r6
 800d322:	463b      	mov	r3, r7
 800d324:	f7f3 f964 	bl	80005f0 <__aeabi_dmul>
 800d328:	2200      	movs	r2, #0
 800d32a:	e969 0102 	strd	r0, r1, [r9, #-8]!
 800d32e:	4b86      	ldr	r3, [pc, #536]	; (800d548 <__kernel_rem_pio2+0x698>)
 800d330:	4630      	mov	r0, r6
 800d332:	4639      	mov	r1, r7
 800d334:	f7f3 f95c 	bl	80005f0 <__aeabi_dmul>
 800d338:	f108 38ff 	add.w	r8, r8, #4294967295
 800d33c:	4606      	mov	r6, r0
 800d33e:	460f      	mov	r7, r1
 800d340:	e798      	b.n	800d274 <__kernel_rem_pio2+0x3c4>
 800d342:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d346:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800d34a:	f7f3 f951 	bl	80005f0 <__aeabi_dmul>
 800d34e:	4602      	mov	r2, r0
 800d350:	460b      	mov	r3, r1
 800d352:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d356:	f7f2 ff99 	bl	800028c <__adddf3>
 800d35a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d35e:	f108 0801 	add.w	r8, r8, #1
 800d362:	9b00      	ldr	r3, [sp, #0]
 800d364:	4598      	cmp	r8, r3
 800d366:	dc02      	bgt.n	800d36e <__kernel_rem_pio2+0x4be>
 800d368:	9b04      	ldr	r3, [sp, #16]
 800d36a:	4598      	cmp	r8, r3
 800d36c:	dde9      	ble.n	800d342 <__kernel_rem_pio2+0x492>
 800d36e:	9b04      	ldr	r3, [sp, #16]
 800d370:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d374:	3301      	adds	r3, #1
 800d376:	ecaa 7b02 	vstmia	sl!, {d7}
 800d37a:	9304      	str	r3, [sp, #16]
 800d37c:	e784      	b.n	800d288 <__kernel_rem_pio2+0x3d8>
 800d37e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d380:	2b03      	cmp	r3, #3
 800d382:	d85d      	bhi.n	800d440 <__kernel_rem_pio2+0x590>
 800d384:	e8df f003 	tbb	[pc, r3]
 800d388:	0226264b 	.word	0x0226264b
 800d38c:	ab98      	add	r3, sp, #608	; 0x260
 800d38e:	441d      	add	r5, r3
 800d390:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 800d394:	462e      	mov	r6, r5
 800d396:	46a2      	mov	sl, r4
 800d398:	f1ba 0f00 	cmp.w	sl, #0
 800d39c:	dc6e      	bgt.n	800d47c <__kernel_rem_pio2+0x5cc>
 800d39e:	462e      	mov	r6, r5
 800d3a0:	46a2      	mov	sl, r4
 800d3a2:	f1ba 0f01 	cmp.w	sl, #1
 800d3a6:	f300 808a 	bgt.w	800d4be <__kernel_rem_pio2+0x60e>
 800d3aa:	2000      	movs	r0, #0
 800d3ac:	2100      	movs	r1, #0
 800d3ae:	2c01      	cmp	r4, #1
 800d3b0:	f300 80a6 	bgt.w	800d500 <__kernel_rem_pio2+0x650>
 800d3b4:	f1bb 0f00 	cmp.w	fp, #0
 800d3b8:	f040 80a8 	bne.w	800d50c <__kernel_rem_pio2+0x65c>
 800d3bc:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 800d3c0:	9c02      	ldr	r4, [sp, #8]
 800d3c2:	e9c4 2300 	strd	r2, r3, [r4]
 800d3c6:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 800d3ca:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800d3ce:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d3d2:	e035      	b.n	800d440 <__kernel_rem_pio2+0x590>
 800d3d4:	3508      	adds	r5, #8
 800d3d6:	ab48      	add	r3, sp, #288	; 0x120
 800d3d8:	441d      	add	r5, r3
 800d3da:	4626      	mov	r6, r4
 800d3dc:	2000      	movs	r0, #0
 800d3de:	2100      	movs	r1, #0
 800d3e0:	2e00      	cmp	r6, #0
 800d3e2:	da3c      	bge.n	800d45e <__kernel_rem_pio2+0x5ae>
 800d3e4:	f1bb 0f00 	cmp.w	fp, #0
 800d3e8:	d03f      	beq.n	800d46a <__kernel_rem_pio2+0x5ba>
 800d3ea:	4602      	mov	r2, r0
 800d3ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3f0:	9d02      	ldr	r5, [sp, #8]
 800d3f2:	e9c5 2300 	strd	r2, r3, [r5]
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d3fe:	f7f2 ff43 	bl	8000288 <__aeabi_dsub>
 800d402:	ae4a      	add	r6, sp, #296	; 0x128
 800d404:	2501      	movs	r5, #1
 800d406:	42ac      	cmp	r4, r5
 800d408:	da32      	bge.n	800d470 <__kernel_rem_pio2+0x5c0>
 800d40a:	f1bb 0f00 	cmp.w	fp, #0
 800d40e:	d002      	beq.n	800d416 <__kernel_rem_pio2+0x566>
 800d410:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d414:	4619      	mov	r1, r3
 800d416:	9b02      	ldr	r3, [sp, #8]
 800d418:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d41c:	e010      	b.n	800d440 <__kernel_rem_pio2+0x590>
 800d41e:	ab98      	add	r3, sp, #608	; 0x260
 800d420:	441d      	add	r5, r3
 800d422:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 800d426:	2000      	movs	r0, #0
 800d428:	2100      	movs	r1, #0
 800d42a:	2c00      	cmp	r4, #0
 800d42c:	da11      	bge.n	800d452 <__kernel_rem_pio2+0x5a2>
 800d42e:	f1bb 0f00 	cmp.w	fp, #0
 800d432:	d002      	beq.n	800d43a <__kernel_rem_pio2+0x58a>
 800d434:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d438:	4619      	mov	r1, r3
 800d43a:	9b02      	ldr	r3, [sp, #8]
 800d43c:	e9c3 0100 	strd	r0, r1, [r3]
 800d440:	9b03      	ldr	r3, [sp, #12]
 800d442:	f003 0007 	and.w	r0, r3, #7
 800d446:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d44a:	ecbd 8b02 	vpop	{d8}
 800d44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d452:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d456:	f7f2 ff19 	bl	800028c <__adddf3>
 800d45a:	3c01      	subs	r4, #1
 800d45c:	e7e5      	b.n	800d42a <__kernel_rem_pio2+0x57a>
 800d45e:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d462:	f7f2 ff13 	bl	800028c <__adddf3>
 800d466:	3e01      	subs	r6, #1
 800d468:	e7ba      	b.n	800d3e0 <__kernel_rem_pio2+0x530>
 800d46a:	4602      	mov	r2, r0
 800d46c:	460b      	mov	r3, r1
 800d46e:	e7bf      	b.n	800d3f0 <__kernel_rem_pio2+0x540>
 800d470:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d474:	f7f2 ff0a 	bl	800028c <__adddf3>
 800d478:	3501      	adds	r5, #1
 800d47a:	e7c4      	b.n	800d406 <__kernel_rem_pio2+0x556>
 800d47c:	ed16 7b02 	vldr	d7, [r6, #-8]
 800d480:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 800d484:	ec53 2b17 	vmov	r2, r3, d7
 800d488:	4640      	mov	r0, r8
 800d48a:	4649      	mov	r1, r9
 800d48c:	ed8d 7b00 	vstr	d7, [sp]
 800d490:	f7f2 fefc 	bl	800028c <__adddf3>
 800d494:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d498:	4602      	mov	r2, r0
 800d49a:	460b      	mov	r3, r1
 800d49c:	4640      	mov	r0, r8
 800d49e:	4649      	mov	r1, r9
 800d4a0:	f7f2 fef2 	bl	8000288 <__aeabi_dsub>
 800d4a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4a8:	f7f2 fef0 	bl	800028c <__adddf3>
 800d4ac:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d4b0:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800d4b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d4b8:	ed06 7b02 	vstr	d7, [r6, #-8]
 800d4bc:	e76c      	b.n	800d398 <__kernel_rem_pio2+0x4e8>
 800d4be:	ed16 7b02 	vldr	d7, [r6, #-8]
 800d4c2:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 800d4c6:	ec53 2b17 	vmov	r2, r3, d7
 800d4ca:	4640      	mov	r0, r8
 800d4cc:	4649      	mov	r1, r9
 800d4ce:	ed8d 7b00 	vstr	d7, [sp]
 800d4d2:	f7f2 fedb 	bl	800028c <__adddf3>
 800d4d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4da:	4602      	mov	r2, r0
 800d4dc:	460b      	mov	r3, r1
 800d4de:	4640      	mov	r0, r8
 800d4e0:	4649      	mov	r1, r9
 800d4e2:	f7f2 fed1 	bl	8000288 <__aeabi_dsub>
 800d4e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4ea:	f7f2 fecf 	bl	800028c <__adddf3>
 800d4ee:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d4f2:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800d4f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d4fa:	ed06 7b02 	vstr	d7, [r6, #-8]
 800d4fe:	e750      	b.n	800d3a2 <__kernel_rem_pio2+0x4f2>
 800d500:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d504:	f7f2 fec2 	bl	800028c <__adddf3>
 800d508:	3c01      	subs	r4, #1
 800d50a:	e750      	b.n	800d3ae <__kernel_rem_pio2+0x4fe>
 800d50c:	9a02      	ldr	r2, [sp, #8]
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	6013      	str	r3, [r2, #0]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6110      	str	r0, [r2, #16]
 800d516:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d51a:	6053      	str	r3, [r2, #4]
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	6093      	str	r3, [r2, #8]
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d526:	60d3      	str	r3, [r2, #12]
 800d528:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d52c:	6153      	str	r3, [r2, #20]
 800d52e:	e787      	b.n	800d440 <__kernel_rem_pio2+0x590>
 800d530:	00000000 	.word	0x00000000
 800d534:	3ff00000 	.word	0x3ff00000
	...
 800d540:	0800dfb8 	.word	0x0800dfb8
 800d544:	41700000 	.word	0x41700000
 800d548:	3e700000 	.word	0x3e700000
 800d54c:	00000000 	.word	0x00000000

0800d550 <__kernel_sin>:
 800d550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d554:	ec55 4b10 	vmov	r4, r5, d0
 800d558:	b085      	sub	sp, #20
 800d55a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d55e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d562:	ed8d 1b00 	vstr	d1, [sp]
 800d566:	9002      	str	r0, [sp, #8]
 800d568:	da06      	bge.n	800d578 <__kernel_sin+0x28>
 800d56a:	ee10 0a10 	vmov	r0, s0
 800d56e:	4629      	mov	r1, r5
 800d570:	f7f3 fad8 	bl	8000b24 <__aeabi_d2iz>
 800d574:	2800      	cmp	r0, #0
 800d576:	d051      	beq.n	800d61c <__kernel_sin+0xcc>
 800d578:	4622      	mov	r2, r4
 800d57a:	462b      	mov	r3, r5
 800d57c:	4620      	mov	r0, r4
 800d57e:	4629      	mov	r1, r5
 800d580:	f7f3 f836 	bl	80005f0 <__aeabi_dmul>
 800d584:	4682      	mov	sl, r0
 800d586:	468b      	mov	fp, r1
 800d588:	4602      	mov	r2, r0
 800d58a:	460b      	mov	r3, r1
 800d58c:	4620      	mov	r0, r4
 800d58e:	4629      	mov	r1, r5
 800d590:	f7f3 f82e 	bl	80005f0 <__aeabi_dmul>
 800d594:	a341      	add	r3, pc, #260	; (adr r3, 800d69c <__kernel_sin+0x14c>)
 800d596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59a:	4680      	mov	r8, r0
 800d59c:	4689      	mov	r9, r1
 800d59e:	4650      	mov	r0, sl
 800d5a0:	4659      	mov	r1, fp
 800d5a2:	f7f3 f825 	bl	80005f0 <__aeabi_dmul>
 800d5a6:	a33f      	add	r3, pc, #252	; (adr r3, 800d6a4 <__kernel_sin+0x154>)
 800d5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ac:	f7f2 fe6c 	bl	8000288 <__aeabi_dsub>
 800d5b0:	4652      	mov	r2, sl
 800d5b2:	465b      	mov	r3, fp
 800d5b4:	f7f3 f81c 	bl	80005f0 <__aeabi_dmul>
 800d5b8:	a33c      	add	r3, pc, #240	; (adr r3, 800d6ac <__kernel_sin+0x15c>)
 800d5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5be:	f7f2 fe65 	bl	800028c <__adddf3>
 800d5c2:	4652      	mov	r2, sl
 800d5c4:	465b      	mov	r3, fp
 800d5c6:	f7f3 f813 	bl	80005f0 <__aeabi_dmul>
 800d5ca:	a33a      	add	r3, pc, #232	; (adr r3, 800d6b4 <__kernel_sin+0x164>)
 800d5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d0:	f7f2 fe5a 	bl	8000288 <__aeabi_dsub>
 800d5d4:	4652      	mov	r2, sl
 800d5d6:	465b      	mov	r3, fp
 800d5d8:	f7f3 f80a 	bl	80005f0 <__aeabi_dmul>
 800d5dc:	a337      	add	r3, pc, #220	; (adr r3, 800d6bc <__kernel_sin+0x16c>)
 800d5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e2:	f7f2 fe53 	bl	800028c <__adddf3>
 800d5e6:	9b02      	ldr	r3, [sp, #8]
 800d5e8:	4606      	mov	r6, r0
 800d5ea:	460f      	mov	r7, r1
 800d5ec:	b9db      	cbnz	r3, 800d626 <__kernel_sin+0xd6>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	4650      	mov	r0, sl
 800d5f4:	4659      	mov	r1, fp
 800d5f6:	f7f2 fffb 	bl	80005f0 <__aeabi_dmul>
 800d5fa:	a325      	add	r3, pc, #148	; (adr r3, 800d690 <__kernel_sin+0x140>)
 800d5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d600:	f7f2 fe42 	bl	8000288 <__aeabi_dsub>
 800d604:	4642      	mov	r2, r8
 800d606:	464b      	mov	r3, r9
 800d608:	f7f2 fff2 	bl	80005f0 <__aeabi_dmul>
 800d60c:	4602      	mov	r2, r0
 800d60e:	460b      	mov	r3, r1
 800d610:	4620      	mov	r0, r4
 800d612:	4629      	mov	r1, r5
 800d614:	f7f2 fe3a 	bl	800028c <__adddf3>
 800d618:	4604      	mov	r4, r0
 800d61a:	460d      	mov	r5, r1
 800d61c:	ec45 4b10 	vmov	d0, r4, r5
 800d620:	b005      	add	sp, #20
 800d622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d626:	2200      	movs	r2, #0
 800d628:	4b1b      	ldr	r3, [pc, #108]	; (800d698 <__kernel_sin+0x148>)
 800d62a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d62e:	f7f2 ffdf 	bl	80005f0 <__aeabi_dmul>
 800d632:	4632      	mov	r2, r6
 800d634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d638:	463b      	mov	r3, r7
 800d63a:	4640      	mov	r0, r8
 800d63c:	4649      	mov	r1, r9
 800d63e:	f7f2 ffd7 	bl	80005f0 <__aeabi_dmul>
 800d642:	4602      	mov	r2, r0
 800d644:	460b      	mov	r3, r1
 800d646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d64a:	f7f2 fe1d 	bl	8000288 <__aeabi_dsub>
 800d64e:	4652      	mov	r2, sl
 800d650:	465b      	mov	r3, fp
 800d652:	f7f2 ffcd 	bl	80005f0 <__aeabi_dmul>
 800d656:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d65a:	f7f2 fe15 	bl	8000288 <__aeabi_dsub>
 800d65e:	a30c      	add	r3, pc, #48	; (adr r3, 800d690 <__kernel_sin+0x140>)
 800d660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d664:	4606      	mov	r6, r0
 800d666:	460f      	mov	r7, r1
 800d668:	4640      	mov	r0, r8
 800d66a:	4649      	mov	r1, r9
 800d66c:	f7f2 ffc0 	bl	80005f0 <__aeabi_dmul>
 800d670:	4602      	mov	r2, r0
 800d672:	460b      	mov	r3, r1
 800d674:	4630      	mov	r0, r6
 800d676:	4639      	mov	r1, r7
 800d678:	f7f2 fe08 	bl	800028c <__adddf3>
 800d67c:	4602      	mov	r2, r0
 800d67e:	460b      	mov	r3, r1
 800d680:	4620      	mov	r0, r4
 800d682:	4629      	mov	r1, r5
 800d684:	f7f2 fe00 	bl	8000288 <__aeabi_dsub>
 800d688:	e7c6      	b.n	800d618 <__kernel_sin+0xc8>
 800d68a:	bf00      	nop
 800d68c:	f3af 8000 	nop.w
 800d690:	55555549 	.word	0x55555549
 800d694:	3fc55555 	.word	0x3fc55555
 800d698:	3fe00000 	.word	0x3fe00000
 800d69c:	5acfd57c 	.word	0x5acfd57c
 800d6a0:	3de5d93a 	.word	0x3de5d93a
 800d6a4:	8a2b9ceb 	.word	0x8a2b9ceb
 800d6a8:	3e5ae5e6 	.word	0x3e5ae5e6
 800d6ac:	57b1fe7d 	.word	0x57b1fe7d
 800d6b0:	3ec71de3 	.word	0x3ec71de3
 800d6b4:	19c161d5 	.word	0x19c161d5
 800d6b8:	3f2a01a0 	.word	0x3f2a01a0
 800d6bc:	1110f8a6 	.word	0x1110f8a6
 800d6c0:	3f811111 	.word	0x3f811111

0800d6c4 <fabs>:
 800d6c4:	ec53 2b10 	vmov	r2, r3, d0
 800d6c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6cc:	ec43 2b10 	vmov	d0, r2, r3
 800d6d0:	4770      	bx	lr
 800d6d2:	0000      	movs	r0, r0
 800d6d4:	0000      	movs	r0, r0
	...

0800d6d8 <floor>:
 800d6d8:	ec51 0b10 	vmov	r0, r1, d0
 800d6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d6e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d6e8:	2e13      	cmp	r6, #19
 800d6ea:	ee10 8a10 	vmov	r8, s0
 800d6ee:	460c      	mov	r4, r1
 800d6f0:	ee10 5a10 	vmov	r5, s0
 800d6f4:	dc35      	bgt.n	800d762 <floor+0x8a>
 800d6f6:	2e00      	cmp	r6, #0
 800d6f8:	da17      	bge.n	800d72a <floor+0x52>
 800d6fa:	a335      	add	r3, pc, #212	; (adr r3, 800d7d0 <floor+0xf8>)
 800d6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d700:	f7f2 fdc4 	bl	800028c <__adddf3>
 800d704:	2200      	movs	r2, #0
 800d706:	2300      	movs	r3, #0
 800d708:	f7f3 fa02 	bl	8000b10 <__aeabi_dcmpgt>
 800d70c:	b150      	cbz	r0, 800d724 <floor+0x4c>
 800d70e:	2c00      	cmp	r4, #0
 800d710:	da5a      	bge.n	800d7c8 <floor+0xf0>
 800d712:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d716:	ea53 0308 	orrs.w	r3, r3, r8
 800d71a:	4b2f      	ldr	r3, [pc, #188]	; (800d7d8 <floor+0x100>)
 800d71c:	f04f 0500 	mov.w	r5, #0
 800d720:	bf18      	it	ne
 800d722:	461c      	movne	r4, r3
 800d724:	4621      	mov	r1, r4
 800d726:	4628      	mov	r0, r5
 800d728:	e025      	b.n	800d776 <floor+0x9e>
 800d72a:	4f2c      	ldr	r7, [pc, #176]	; (800d7dc <floor+0x104>)
 800d72c:	4137      	asrs	r7, r6
 800d72e:	ea01 0307 	and.w	r3, r1, r7
 800d732:	4303      	orrs	r3, r0
 800d734:	d01f      	beq.n	800d776 <floor+0x9e>
 800d736:	a326      	add	r3, pc, #152	; (adr r3, 800d7d0 <floor+0xf8>)
 800d738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73c:	f7f2 fda6 	bl	800028c <__adddf3>
 800d740:	2200      	movs	r2, #0
 800d742:	2300      	movs	r3, #0
 800d744:	f7f3 f9e4 	bl	8000b10 <__aeabi_dcmpgt>
 800d748:	2800      	cmp	r0, #0
 800d74a:	d0eb      	beq.n	800d724 <floor+0x4c>
 800d74c:	2c00      	cmp	r4, #0
 800d74e:	bfbe      	ittt	lt
 800d750:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d754:	fa43 f606 	asrlt.w	r6, r3, r6
 800d758:	19a4      	addlt	r4, r4, r6
 800d75a:	ea24 0407 	bic.w	r4, r4, r7
 800d75e:	2500      	movs	r5, #0
 800d760:	e7e0      	b.n	800d724 <floor+0x4c>
 800d762:	2e33      	cmp	r6, #51	; 0x33
 800d764:	dd0b      	ble.n	800d77e <floor+0xa6>
 800d766:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d76a:	d104      	bne.n	800d776 <floor+0x9e>
 800d76c:	ee10 2a10 	vmov	r2, s0
 800d770:	460b      	mov	r3, r1
 800d772:	f7f2 fd8b 	bl	800028c <__adddf3>
 800d776:	ec41 0b10 	vmov	d0, r0, r1
 800d77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d77e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d782:	f04f 33ff 	mov.w	r3, #4294967295
 800d786:	fa23 f707 	lsr.w	r7, r3, r7
 800d78a:	4238      	tst	r0, r7
 800d78c:	d0f3      	beq.n	800d776 <floor+0x9e>
 800d78e:	a310      	add	r3, pc, #64	; (adr r3, 800d7d0 <floor+0xf8>)
 800d790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d794:	f7f2 fd7a 	bl	800028c <__adddf3>
 800d798:	2200      	movs	r2, #0
 800d79a:	2300      	movs	r3, #0
 800d79c:	f7f3 f9b8 	bl	8000b10 <__aeabi_dcmpgt>
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d0bf      	beq.n	800d724 <floor+0x4c>
 800d7a4:	2c00      	cmp	r4, #0
 800d7a6:	da02      	bge.n	800d7ae <floor+0xd6>
 800d7a8:	2e14      	cmp	r6, #20
 800d7aa:	d103      	bne.n	800d7b4 <floor+0xdc>
 800d7ac:	3401      	adds	r4, #1
 800d7ae:	ea25 0507 	bic.w	r5, r5, r7
 800d7b2:	e7b7      	b.n	800d724 <floor+0x4c>
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d7ba:	fa03 f606 	lsl.w	r6, r3, r6
 800d7be:	4435      	add	r5, r6
 800d7c0:	45a8      	cmp	r8, r5
 800d7c2:	bf88      	it	hi
 800d7c4:	18e4      	addhi	r4, r4, r3
 800d7c6:	e7f2      	b.n	800d7ae <floor+0xd6>
 800d7c8:	2500      	movs	r5, #0
 800d7ca:	462c      	mov	r4, r5
 800d7cc:	e7aa      	b.n	800d724 <floor+0x4c>
 800d7ce:	bf00      	nop
 800d7d0:	8800759c 	.word	0x8800759c
 800d7d4:	7e37e43c 	.word	0x7e37e43c
 800d7d8:	bff00000 	.word	0xbff00000
 800d7dc:	000fffff 	.word	0x000fffff

0800d7e0 <scalbn>:
 800d7e0:	b570      	push	{r4, r5, r6, lr}
 800d7e2:	ec55 4b10 	vmov	r4, r5, d0
 800d7e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d7ea:	4606      	mov	r6, r0
 800d7ec:	462b      	mov	r3, r5
 800d7ee:	b9b2      	cbnz	r2, 800d81e <scalbn+0x3e>
 800d7f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d7f4:	4323      	orrs	r3, r4
 800d7f6:	d03c      	beq.n	800d872 <scalbn+0x92>
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	4b33      	ldr	r3, [pc, #204]	; (800d8c8 <scalbn+0xe8>)
 800d7fc:	4629      	mov	r1, r5
 800d7fe:	ee10 0a10 	vmov	r0, s0
 800d802:	f7f2 fef5 	bl	80005f0 <__aeabi_dmul>
 800d806:	4a31      	ldr	r2, [pc, #196]	; (800d8cc <scalbn+0xec>)
 800d808:	4296      	cmp	r6, r2
 800d80a:	4604      	mov	r4, r0
 800d80c:	460d      	mov	r5, r1
 800d80e:	460b      	mov	r3, r1
 800d810:	da13      	bge.n	800d83a <scalbn+0x5a>
 800d812:	a329      	add	r3, pc, #164	; (adr r3, 800d8b8 <scalbn+0xd8>)
 800d814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d818:	f7f2 feea 	bl	80005f0 <__aeabi_dmul>
 800d81c:	e00a      	b.n	800d834 <scalbn+0x54>
 800d81e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d822:	428a      	cmp	r2, r1
 800d824:	d10c      	bne.n	800d840 <scalbn+0x60>
 800d826:	ee10 2a10 	vmov	r2, s0
 800d82a:	462b      	mov	r3, r5
 800d82c:	4620      	mov	r0, r4
 800d82e:	4629      	mov	r1, r5
 800d830:	f7f2 fd2c 	bl	800028c <__adddf3>
 800d834:	4604      	mov	r4, r0
 800d836:	460d      	mov	r5, r1
 800d838:	e01b      	b.n	800d872 <scalbn+0x92>
 800d83a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d83e:	3a36      	subs	r2, #54	; 0x36
 800d840:	4432      	add	r2, r6
 800d842:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d846:	428a      	cmp	r2, r1
 800d848:	dd0b      	ble.n	800d862 <scalbn+0x82>
 800d84a:	ec45 4b11 	vmov	d1, r4, r5
 800d84e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800d8c0 <scalbn+0xe0>
 800d852:	f000 f83f 	bl	800d8d4 <copysign>
 800d856:	a31a      	add	r3, pc, #104	; (adr r3, 800d8c0 <scalbn+0xe0>)
 800d858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85c:	ec51 0b10 	vmov	r0, r1, d0
 800d860:	e7da      	b.n	800d818 <scalbn+0x38>
 800d862:	2a00      	cmp	r2, #0
 800d864:	dd08      	ble.n	800d878 <scalbn+0x98>
 800d866:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d86a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d86e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d872:	ec45 4b10 	vmov	d0, r4, r5
 800d876:	bd70      	pop	{r4, r5, r6, pc}
 800d878:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d87c:	da0d      	bge.n	800d89a <scalbn+0xba>
 800d87e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d882:	429e      	cmp	r6, r3
 800d884:	ec45 4b11 	vmov	d1, r4, r5
 800d888:	dce1      	bgt.n	800d84e <scalbn+0x6e>
 800d88a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800d8b8 <scalbn+0xd8>
 800d88e:	f000 f821 	bl	800d8d4 <copysign>
 800d892:	a309      	add	r3, pc, #36	; (adr r3, 800d8b8 <scalbn+0xd8>)
 800d894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d898:	e7e0      	b.n	800d85c <scalbn+0x7c>
 800d89a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d89e:	3236      	adds	r2, #54	; 0x36
 800d8a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d8a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	4629      	mov	r1, r5
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	4b08      	ldr	r3, [pc, #32]	; (800d8d0 <scalbn+0xf0>)
 800d8b0:	e7b2      	b.n	800d818 <scalbn+0x38>
 800d8b2:	bf00      	nop
 800d8b4:	f3af 8000 	nop.w
 800d8b8:	c2f8f359 	.word	0xc2f8f359
 800d8bc:	01a56e1f 	.word	0x01a56e1f
 800d8c0:	8800759c 	.word	0x8800759c
 800d8c4:	7e37e43c 	.word	0x7e37e43c
 800d8c8:	43500000 	.word	0x43500000
 800d8cc:	ffff3cb0 	.word	0xffff3cb0
 800d8d0:	3c900000 	.word	0x3c900000

0800d8d4 <copysign>:
 800d8d4:	ec53 2b10 	vmov	r2, r3, d0
 800d8d8:	ee11 0a90 	vmov	r0, s3
 800d8dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d8e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800d8e4:	ea41 0300 	orr.w	r3, r1, r0
 800d8e8:	ec43 2b10 	vmov	d0, r2, r3
 800d8ec:	4770      	bx	lr
	...

0800d8f0 <_sbrk>:
 800d8f0:	4b04      	ldr	r3, [pc, #16]	; (800d904 <_sbrk+0x14>)
 800d8f2:	6819      	ldr	r1, [r3, #0]
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	b909      	cbnz	r1, 800d8fc <_sbrk+0xc>
 800d8f8:	4903      	ldr	r1, [pc, #12]	; (800d908 <_sbrk+0x18>)
 800d8fa:	6019      	str	r1, [r3, #0]
 800d8fc:	6818      	ldr	r0, [r3, #0]
 800d8fe:	4402      	add	r2, r0
 800d900:	601a      	str	r2, [r3, #0]
 800d902:	4770      	bx	lr
 800d904:	2000060c 	.word	0x2000060c
 800d908:	2000ada8 	.word	0x2000ada8

0800d90c <_init>:
 800d90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d90e:	bf00      	nop
 800d910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d912:	bc08      	pop	{r3}
 800d914:	469e      	mov	lr, r3
 800d916:	4770      	bx	lr

0800d918 <_fini>:
 800d918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d91a:	bf00      	nop
 800d91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d91e:	bc08      	pop	{r3}
 800d920:	469e      	mov	lr, r3
 800d922:	4770      	bx	lr
