
EXO_Uni_5_IMU_2set_FSR_july2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000491c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004aa4  08004aa4  00014aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004aec  08004aec  00014aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004af0  08004af0  00014af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08004af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ram2         00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00008dac  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00003000  20008db8  20008db8  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003ceb7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005de7  00000000  00000000  0005cef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ff30  00000000  00000000  00062cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001500  00000000  00000000  00072c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002950  00000000  00000000  00074110  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000102c1  00000000  00000000  00076a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008aaf  00000000  00000000  00086d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0008f7d0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003c70  00000000  00000000  0008f84c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000000df  00000000  00000000  000934bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a8c 	.word	0x08004a8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004a8c 	.word	0x08004a8c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <CAN_configure>:
//// CNF3: CONFIGURATION 3 REGISTER (ADDRESS: 28h)
//MCP_write(0x28,0x05);
//}

/*configuration for 1mbps: https://www.kvaser.com/support/calculators/bit-timing-calculator/ */
void CAN_configure(){
 80009fc:	b508      	push	{r3, lr}
// CNF1: CONFIGURATION 1 REGISTER (ADDRESS: 2Ah)
MCP_write(0x2A,0xC0);
 80009fe:	21c0      	movs	r1, #192	; 0xc0
 8000a00:	202a      	movs	r0, #42	; 0x2a
 8000a02:	f000 ffbd 	bl	8001980 <MCP_write>

// CNF2: CONFIGURATION 2 REGISTER (ADDRESS: 29h)
MCP_write(0x29,0x89);
 8000a06:	2189      	movs	r1, #137	; 0x89
 8000a08:	2029      	movs	r0, #41	; 0x29
 8000a0a:	f000 ffb9 	bl	8001980 <MCP_write>

// CNF3: CONFIGURATION 3 REGISTER (ADDRESS: 28h)
MCP_write(0x28,0x04);
 8000a0e:	2104      	movs	r1, #4
 8000a10:	2028      	movs	r0, #40	; 0x28
}
 8000a12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
MCP_write(0x28,0x04);
 8000a16:	f000 bfb3 	b.w	8001980 <MCP_write>

08000a1a <CAN_mode>:


// sets the CAN operation mode
void CAN_mode(){
// CANCTRL: CAN CONTROL REGISTER (ADDRESS: XFh)
MCP_write(0x0F,0x08);
 8000a1a:	2108      	movs	r1, #8
 8000a1c:	200f      	movs	r0, #15
 8000a1e:	f000 bfaf 	b.w	8001980 <MCP_write>

08000a22 <CAN_transmit>:




// Sends the apropriate message information to the transmit buffers and then flags them for transmittal
void CAN_transmit(int CAN_ID, int CAN_message[]){
 8000a22:	b538      	push	{r3, r4, r5, lr}
 8000a24:	460c      	mov	r4, r1
 8000a26:	4605      	mov	r5, r0
    SIDH = CAN_ID >> 3;
    SIDL = CAN_ID << 5;

//  TXBxSIDH: TRANSMIT BUFFER x STANDARD IDENTIFIER HIGH REGISTER
// (ADDRESS: 31h, 41h, 51h)
MCP_write(0x51,SIDH);
 8000a28:	10c1      	asrs	r1, r0, #3
 8000a2a:	2051      	movs	r0, #81	; 0x51
 8000a2c:	f000 ffa8 	bl	8001980 <MCP_write>

// TXBxSIDL: TRANSMIT BUFFER x STANDARD IDENTIFIER LOW REGISTER
// (ADDRESS: 32h, 42h, 52h)
MCP_write(0x52,SIDL);
 8000a30:	0169      	lsls	r1, r5, #5
 8000a32:	2052      	movs	r0, #82	; 0x52
 8000a34:	f000 ffa4 	bl	8001980 <MCP_write>

//  TXBxDLC: TRANSMIT BUFFER x DATA LENGTH CODE REGISTER
// (ADDRESS: 35h, 45h, 55h)
MCP_write(0x55,0x08);
 8000a38:	2108      	movs	r1, #8
 8000a3a:	2055      	movs	r0, #85	; 0x55
 8000a3c:	f000 ffa0 	bl	8001980 <MCP_write>

// TXBxDn: TRANSMIT BUFFER x DATA BYTE n REGISTER
// (ADDRESS: 36h-3Dh, 46h-4Dh, 56h-5Dh)
// The data to be loaded into the transmit buffer for sending
MCP_write(0x56,CAN_message[0]);
 8000a40:	6821      	ldr	r1, [r4, #0]
 8000a42:	2056      	movs	r0, #86	; 0x56
 8000a44:	f000 ff9c 	bl	8001980 <MCP_write>
MCP_write(0x57,CAN_message[1]);
 8000a48:	6861      	ldr	r1, [r4, #4]
 8000a4a:	2057      	movs	r0, #87	; 0x57
 8000a4c:	f000 ff98 	bl	8001980 <MCP_write>
MCP_write(0x58,CAN_message[2]);
 8000a50:	68a1      	ldr	r1, [r4, #8]
 8000a52:	2058      	movs	r0, #88	; 0x58
 8000a54:	f000 ff94 	bl	8001980 <MCP_write>
MCP_write(0x59,CAN_message[3]);
 8000a58:	68e1      	ldr	r1, [r4, #12]
 8000a5a:	2059      	movs	r0, #89	; 0x59
 8000a5c:	f000 ff90 	bl	8001980 <MCP_write>
MCP_write(0x5A,CAN_message[4]);
 8000a60:	6921      	ldr	r1, [r4, #16]
 8000a62:	205a      	movs	r0, #90	; 0x5a
 8000a64:	f000 ff8c 	bl	8001980 <MCP_write>
MCP_write(0x5B,CAN_message[5]);
 8000a68:	6961      	ldr	r1, [r4, #20]
 8000a6a:	205b      	movs	r0, #91	; 0x5b
 8000a6c:	f000 ff88 	bl	8001980 <MCP_write>
MCP_write(0x5C,CAN_message[6]);
 8000a70:	69a1      	ldr	r1, [r4, #24]
 8000a72:	205c      	movs	r0, #92	; 0x5c
 8000a74:	f000 ff84 	bl	8001980 <MCP_write>
MCP_write(0x5D,CAN_message[7]);
 8000a78:	69e1      	ldr	r1, [r4, #28]
 8000a7a:	205d      	movs	r0, #93	; 0x5d
 8000a7c:	f000 ff80 	bl	8001980 <MCP_write>

// Setting the TXREQ bit high in the TXBxCRTL (0x30) register iniates message sending
// This bit remains high until the message is sent
MCP_write(0x50,0x0F);
 8000a80:	210f      	movs	r1, #15
 8000a82:	2050      	movs	r0, #80	; 0x50
}
 8000a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
MCP_write(0x50,0x0F);
 8000a88:	f000 bf7a 	b.w	8001980 <MCP_write>

08000a8c <EPOS4_data_framer>:
#include "EPOS4.h"
#include "time_functions.h"


//This is useful for later adding in functionality. Should work for any Client to Server SDO
void EPOS4_data_framer(int data[],int object, int subindex, int value){
 8000a8c:	b510      	push	{r4, lr}
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
    data[1] = (0x00 | object); //Index LowByte
    data[2] = (0x00 | (object >> 8)); //Index HighByte
    data[3] = subindex; //subindex
 8000a8e:	60c2      	str	r2, [r0, #12]
    data[4] = (0x00 | value); //SDO Byte 0
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8000a90:	121a      	asrs	r2, r3, #8
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 8000a92:	2422      	movs	r4, #34	; 0x22
    data[1] = (0x00 | object); //Index LowByte
 8000a94:	6041      	str	r1, [r0, #4]
    data[4] = (0x00 | value); //SDO Byte 0
 8000a96:	6103      	str	r3, [r0, #16]
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8000a98:	1209      	asrs	r1, r1, #8
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8000a9a:	6142      	str	r2, [r0, #20]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8000a9c:	141a      	asrs	r2, r3, #16
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 8000a9e:	161b      	asrs	r3, r3, #24
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 8000aa0:	6004      	str	r4, [r0, #0]
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8000aa2:	6081      	str	r1, [r0, #8]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8000aa4:	6182      	str	r2, [r0, #24]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 8000aa6:	61c3      	str	r3, [r0, #28]
 8000aa8:	bd10      	pop	{r4, pc}

08000aaa <EPOS4_set_operation_mode>:
}

void EPOS4_set_operation_mode(int CAN_ID, int mode){
 8000aaa:	b510      	push	{r4, lr}
 8000aac:	b088      	sub	sp, #32
    int data[8];
    int object = 0x6060;
    int subindex = 0x00;
    int value = mode;
    EPOS4_data_framer(data,object,subindex,value);
 8000aae:	460b      	mov	r3, r1
 8000ab0:	2200      	movs	r2, #0
void EPOS4_set_operation_mode(int CAN_ID, int mode){
 8000ab2:	4604      	mov	r4, r0
    EPOS4_data_framer(data,object,subindex,value);
 8000ab4:	f246 0160 	movw	r1, #24672	; 0x6060
 8000ab8:	4668      	mov	r0, sp
 8000aba:	f7ff ffe7 	bl	8000a8c <EPOS4_data_framer>

    CAN_transmit(CAN_ID, data);
 8000abe:	4669      	mov	r1, sp
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	f7ff ffae 	bl	8000a22 <CAN_transmit>
    delay_us(10000);
 8000ac6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000aca:	f001 fff7 	bl	8002abc <delay_us>
}
 8000ace:	b008      	add	sp, #32
 8000ad0:	bd10      	pop	{r4, pc}

08000ad2 <EPOS4_enable>:

void EPOS4_enable(int CAN_ID){
 8000ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ad6:	b088      	sub	sp, #32
    data[3] = subindex; //subindex
 8000ad8:	2400      	movs	r4, #0
    data[4] = (0x00 | value); //SDO Byte 0
 8000ada:	2306      	movs	r3, #6
    int object = 0x6040;
    int subindex = 0x00;
    int value = 0x0006;
    EPOS4_data_framer(data,object,subindex,value);

    CAN_transmit(CAN_ID, data);
 8000adc:	4669      	mov	r1, sp
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 8000ade:	2722      	movs	r7, #34	; 0x22
    data[1] = (0x00 | object); //Index LowByte
 8000ae0:	f246 0640 	movw	r6, #24640	; 0x6040
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8000ae4:	2560      	movs	r5, #96	; 0x60
void EPOS4_enable(int CAN_ID){
 8000ae6:	4680      	mov	r8, r0
    data[4] = (0x00 | value); //SDO Byte 0
 8000ae8:	9304      	str	r3, [sp, #16]
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 8000aea:	9700      	str	r7, [sp, #0]
    data[1] = (0x00 | object); //Index LowByte
 8000aec:	9601      	str	r6, [sp, #4]
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8000aee:	9502      	str	r5, [sp, #8]
    data[3] = subindex; //subindex
 8000af0:	9403      	str	r4, [sp, #12]
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8000af2:	9405      	str	r4, [sp, #20]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8000af4:	9406      	str	r4, [sp, #24]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 8000af6:	9407      	str	r4, [sp, #28]
    CAN_transmit(CAN_ID, data);
 8000af8:	f7ff ff93 	bl	8000a22 <CAN_transmit>
    delay_us(10000);
 8000afc:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b00:	f001 ffdc 	bl	8002abc <delay_us>
    data[4] = (0x00 | value); //SDO Byte 0
 8000b04:	230f      	movs	r3, #15

    value = 0x000F;
    EPOS4_data_framer(data,object,subindex,value);


    CAN_transmit(CAN_ID, data);
 8000b06:	4669      	mov	r1, sp
 8000b08:	4640      	mov	r0, r8
    data[4] = (0x00 | value); //SDO Byte 0
 8000b0a:	9304      	str	r3, [sp, #16]
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 8000b0c:	9700      	str	r7, [sp, #0]
    data[1] = (0x00 | object); //Index LowByte
 8000b0e:	9601      	str	r6, [sp, #4]
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8000b10:	9502      	str	r5, [sp, #8]
    data[3] = subindex; //subindex
 8000b12:	9403      	str	r4, [sp, #12]
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8000b14:	9405      	str	r4, [sp, #20]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8000b16:	9406      	str	r4, [sp, #24]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 8000b18:	9407      	str	r4, [sp, #28]
    CAN_transmit(CAN_ID, data);
 8000b1a:	f7ff ff82 	bl	8000a22 <CAN_transmit>
    delay_us(10000);
 8000b1e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b22:	f001 ffcb 	bl	8002abc <delay_us>

}
 8000b26:	b008      	add	sp, #32
 8000b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000b2c <EPOS4_CST_apply_torque>:
    CAN_transmit(CAN_ID, data);
    delay_us(10000);
}


void EPOS4_CST_apply_torque(int CAN_ID, int torque){
 8000b2c:	b510      	push	{r4, lr}
 8000b2e:	b088      	sub	sp, #32
    }
    else{

    }

    EPOS4_data_framer(data,object,subindex,value);
 8000b30:	460b      	mov	r3, r1
 8000b32:	2200      	movs	r2, #0
void EPOS4_CST_apply_torque(int CAN_ID, int torque){
 8000b34:	4604      	mov	r4, r0
    EPOS4_data_framer(data,object,subindex,value);
 8000b36:	f246 0171 	movw	r1, #24689	; 0x6071
 8000b3a:	4668      	mov	r0, sp
 8000b3c:	f7ff ffa6 	bl	8000a8c <EPOS4_data_framer>

    CAN_transmit(CAN_ID, data);
 8000b40:	4669      	mov	r1, sp
 8000b42:	4620      	mov	r0, r4
 8000b44:	f7ff ff6d 	bl	8000a22 <CAN_transmit>
    delay_us(1500);
 8000b48:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000b4c:	f001 ffb6 	bl	8002abc <delay_us>
}
 8000b50:	b008      	add	sp, #32
 8000b52:	bd10      	pop	{r4, pc}

08000b54 <EPOS4_clear_errors>:

    CAN_transmit(CAN_ID, data);
    delay_us(1500);
}

void EPOS4_clear_errors(int CAN_ID){
 8000b54:	b500      	push	{lr}
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8000b56:	f04f 0c60 	mov.w	ip, #96	; 0x60
void EPOS4_clear_errors(int CAN_ID){
 8000b5a:	b089      	sub	sp, #36	; 0x24
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8000b5c:	2222      	movs	r2, #34	; 0x22
 8000b5e:	f246 0340 	movw	r3, #24640	; 0x6040
 8000b62:	e88d 100c 	stmia.w	sp, {r2, r3, ip}
    int object = 0x6040;
    int subindex = 0x00;
    int value = 0x0080;
    EPOS4_data_framer(data,object,subindex,value);

    CAN_transmit(CAN_ID, data);
 8000b66:	4669      	mov	r1, sp
    data[3] = subindex; //subindex
 8000b68:	2300      	movs	r3, #0
    data[4] = (0x00 | value); //SDO Byte 0
 8000b6a:	2280      	movs	r2, #128	; 0x80
    data[3] = subindex; //subindex
 8000b6c:	9303      	str	r3, [sp, #12]
    data[4] = (0x00 | value); //SDO Byte 0
 8000b6e:	9204      	str	r2, [sp, #16]
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8000b70:	9305      	str	r3, [sp, #20]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8000b72:	9306      	str	r3, [sp, #24]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 8000b74:	9307      	str	r3, [sp, #28]
    CAN_transmit(CAN_ID, data);
 8000b76:	f7ff ff54 	bl	8000a22 <CAN_transmit>
    delay_us(1500);
 8000b7a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000b7e:	f001 ff9d 	bl	8002abc <delay_us>
}
 8000b82:	b009      	add	sp, #36	; 0x24
 8000b84:	f85d fb04 	ldr.w	pc, [sp], #4

08000b88 <BSP_SD_IRQHandler>:
  * @brief  Handles SD card interrupt request.
  * @retval None
  */
void BSP_SD_IRQHandler(void)
{
  HAL_SD_IRQHandler(&uSdHandle);
 8000b88:	4801      	ldr	r0, [pc, #4]	; (8000b90 <BSP_SD_IRQHandler+0x8>)
 8000b8a:	f003 b8d9 	b.w	8003d40 <HAL_SD_IRQHandler>
 8000b8e:	bf00      	nop
 8000b90:	20008090 	.word	0x20008090

08000b94 <BSP_SD_DMA_Tx_IRQHandler>:
  * @brief  Handles SD DMA Tx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Tx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmatx);
 8000b94:	4b01      	ldr	r3, [pc, #4]	; (8000b9c <BSP_SD_DMA_Tx_IRQHandler+0x8>)
 8000b96:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8000b98:	f002 b96f 	b.w	8002e7a <HAL_DMA_IRQHandler>
 8000b9c:	20008090 	.word	0x20008090

08000ba0 <BSP_SD_DMA_Rx_IRQHandler>:
  * @brief  Handles SD DMA Rx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Rx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 8000ba0:	4b01      	ldr	r3, [pc, #4]	; (8000ba8 <BSP_SD_DMA_Rx_IRQHandler+0x8>)
 8000ba2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8000ba4:	f002 b969 	b.w	8002e7a <HAL_DMA_IRQHandler>
 8000ba8:	20008090 	.word	0x20008090

08000bac <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <LL_AHB2_GRP1_EnableClock+0x18>)
 8000bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bb0:	4302      	orrs	r2, r0
 8000bb2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8000bb6:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bb8:	4018      	ands	r0, r3
 8000bba:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000bbc:	9b01      	ldr	r3, [sp, #4]
}
 8000bbe:	b002      	add	sp, #8
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <MX_GPIO_Init>:
LL_GPIO_InitTypeDef GPIO_InitStruct;



void MX_GPIO_Init(void)
{
 8000bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}



  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000bcc:	2004      	movs	r0, #4
 8000bce:	f7ff ffed 	bl	8000bac <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8000bd2:	2080      	movs	r0, #128	; 0x80
 8000bd4:	f7ff ffea 	bl	8000bac <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000bd8:	2001      	movs	r0, #1
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);

  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 8000bda:	4c71      	ldr	r4, [pc, #452]	; (8000da0 <MX_GPIO_Init+0x1d8>)
  GPIO_InitStruct.Pin = LED_B_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 8000da8 <MX_GPIO_Init+0x1e0>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000be0:	f7ff ffe4 	bl	8000bac <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000be4:	2002      	movs	r0, #2
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8000be6:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
 8000bea:	f7ff ffdf 	bl	8000bac <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8000bee:	2008      	movs	r0, #8
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bf0:	2700      	movs	r7, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bf2:	2501      	movs	r5, #1
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8000bf4:	f7ff ffda 	bl	8000bac <LL_AHB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 8000bf8:	260c      	movs	r6, #12
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	4621      	mov	r1, r4
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LED_B_PIN;
 8000c00:	f04f 0b80 	mov.w	fp, #128	; 0x80
  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 8000c04:	6026      	str	r6, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c06:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c08:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c0a:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c0c:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f003 f8cd 	bl	8003dac <LL_GPIO_Init>
 8000c12:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c16:	4621      	mov	r1, r4
 8000c18:	4650      	mov	r0, sl
  LL_GPIO_ResetOutputPin(GPIOB, LED_B_PIN);

  GPIO_InitStruct.Pin = USB_CONNECTIVITY;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000c1a:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pin = LED_B_PIN;
 8000c1e:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c22:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c24:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c26:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c28:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f003 f8bf 	bl	8003dac <LL_GPIO_Init>
 8000c2e:	f8ca b028 	str.w	fp, [sl, #40]	; 0x28
  GPIO_InitStruct.Pin = USB_CONNECTIVITY;
 8000c32:	f44f 7200 	mov.w	r2, #512	; 0x200
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 8000c36:	4621      	mov	r1, r4
 8000c38:	4640      	mov	r0, r8

  /**/
  GPIO_InitStruct.Pin = ENC1_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2603      	movs	r6, #3
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000c3c:	e884 0084 	stmia.w	r4, {r2, r7}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000c40:	f8c4 9010 	str.w	r9, [r4, #16]
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 8000c44:	f003 f8b2 	bl	8003dac <LL_GPIO_Init>
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC1_CS_GPIO_PORT, &GPIO_InitStruct);
 8000c48:	4621      	mov	r1, r4
 8000c4a:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = ENC1_CS_PIN;
 8000c4c:	f8c4 9000 	str.w	r9, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c50:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c54:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c56:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(ENC1_CS_GPIO_PORT, &GPIO_InitStruct);
 8000c58:	f003 f8a8 	bl	8003dac <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ENC1_SCLK_PIN;
 8000c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC1_SCLK_GPIO_PORT, &GPIO_InitStruct);
 8000c60:	4621      	mov	r1, r4
 8000c62:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = ENC1_SCLK_PIN;
 8000c64:	6023      	str	r3, [r4, #0]
 8000c66:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c68:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c6c:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c6e:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(ENC1_SCLK_GPIO_PORT, &GPIO_InitStruct);
 8000c70:	f003 f89c 	bl	8003dac <LL_GPIO_Init>

  GPIO_InitStruct.Pin =  ENC1_DATA_PIN;
 8000c74:	2204      	movs	r2, #4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(ENC1_DATA_GPIO_PORT, &GPIO_InitStruct);
 8000c76:	4621      	mov	r1, r4
 8000c78:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000c7a:	e884 0084 	stmia.w	r4, {r2, r7}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000c7e:	f8c4 9010 	str.w	r9, [r4, #16]
  LL_GPIO_Init(ENC1_DATA_GPIO_PORT, &GPIO_InitStruct);
 8000c82:	f003 f893 	bl	8003dac <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ENC2_CS_PIN;
 8000c86:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 8000c88:	4621      	mov	r1, r4
 8000c8a:	4846      	ldr	r0, [pc, #280]	; (8000da4 <MX_GPIO_Init+0x1dc>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c8c:	6127      	str	r7, [r4, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c8e:	e884 00e8 	stmia.w	r4, {r3, r5, r6, r7}
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 8000c92:	f003 f88b 	bl	8003dac <LL_GPIO_Init>

  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(ENC2_DATA_GPIO_PORT, &GPIO_InitStruct);
 8000c96:	4621      	mov	r1, r4
 8000c98:	4842      	ldr	r0, [pc, #264]	; (8000da4 <MX_GPIO_Init+0x1dc>)
  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
 8000c9a:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000c9e:	6067      	str	r7, [r4, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000ca0:	f8c4 9010 	str.w	r9, [r4, #16]
  LL_GPIO_Init(ENC2_DATA_GPIO_PORT, &GPIO_InitStruct);
 8000ca4:	f003 f882 	bl	8003dac <LL_GPIO_Init>
  GPIO_InitStruct.Pin = ENC2_SCLK_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC2_SCLK_GPIO_PORT, &GPIO_InitStruct);
 8000ca8:	4621      	mov	r1, r4
 8000caa:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = ENC2_SCLK_PIN;
 8000cac:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cb0:	6065      	str	r5, [r4, #4]



  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 8000cb2:	f44f 7b80 	mov.w	fp, #256	; 0x100
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb6:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cb8:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cba:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(ENC2_SCLK_GPIO_PORT, &GPIO_InitStruct);
 8000cbc:	f003 f876 	bl	8003dac <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI1_CS_GPIO_PORT, &GPIO_InitStruct);
 8000cc0:	4621      	mov	r1, r4
 8000cc2:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 8000cc4:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cc8:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000cca:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ccc:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cce:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(SPI1_CS_GPIO_PORT, &GPIO_InitStruct);
 8000cd0:	f003 f86c 	bl	8003dac <LL_GPIO_Init>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000cd4:	f8c8 b018 	str.w	fp, [r8, #24]
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 8000cd8:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
 8000cda:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 8000cde:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
 8000ce0:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ce4:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ce8:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cea:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 8000cec:	f003 f85e 	bl	8003dac <LL_GPIO_Init>
 8000cf0:	f8ca b018 	str.w	fp, [sl, #24]
  GPIO_InitStruct.Pin = SPI3_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 8000cf4:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8000dac <MX_GPIO_Init+0x1e4>
  GPIO_InitStruct.Pin = SPI3_CS_PIN;
 8000cf8:	6025      	str	r5, [r4, #0]
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 8000cfa:	4621      	mov	r1, r4
 8000cfc:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cfe:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d02:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d04:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 8000d06:	f003 f851 	bl	8003dac <LL_GPIO_Init>
 8000d0a:	f8cb 5018 	str.w	r5, [fp, #24]
  LL_GPIO_SetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN);

  GPIO_InitStruct.Pin = SPI1_IMU2_CS_Pin;
 8000d0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI1_IMU2_CS_GPIO_Port, &GPIO_InitStruct);
 8000d12:	4621      	mov	r1, r4
 8000d14:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = SPI1_IMU2_CS_Pin;
 8000d16:	6022      	str	r2, [r4, #0]
 8000d18:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d1a:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1c:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d1e:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d20:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(SPI1_IMU2_CS_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f003 f843 	bl	8003dac <LL_GPIO_Init>
 8000d26:	9a00      	ldr	r2, [sp, #0]
 8000d28:	f8c8 2018 	str.w	r2, [r8, #24]
  GPIO_InitStruct.Pin = SPI3_IMU5_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	4621      	mov	r1, r4
 8000d2e:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = SPI3_IMU5_CS_Pin;
 8000d30:	f8c4 9000 	str.w	r9, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d34:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d38:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d3a:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f003 f836 	bl	8003dac <LL_GPIO_Init>
 8000d40:	f8cb 9018 	str.w	r9, [fp, #24]

  /**/
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 8000d44:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
 8000d46:	f04f 0b10 	mov.w	fp, #16
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 8000d4a:	4816      	ldr	r0, [pc, #88]	; (8000da4 <MX_GPIO_Init+0x1dc>)
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
 8000d4c:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000d50:	6067      	str	r7, [r4, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000d52:	f8c4 9010 	str.w	r9, [r4, #16]
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 8000d56:	f003 f829 	bl	8003dac <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000d5a:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000d5c:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	4621      	mov	r1, r4
 8000d60:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000d62:	e884 0088 	stmia.w	r4, {r3, r7}
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f003 f821 	bl	8003dac <LL_GPIO_Init>


  /**/
//
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;   // Portable IMU2 CS Pin
 8000d6a:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	4621      	mov	r1, r4
 8000d6e:	4650      	mov	r0, sl
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d70:	e884 00e8 	stmia.w	r4, {r3, r5, r6, r7}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d74:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	f003 f819 	bl	8003dac <LL_GPIO_Init>
 8000d7a:	2340      	movs	r3, #64	; 0x40
 8000d7c:	f8ca 3018 	str.w	r3, [sl, #24]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;   // Portable IMU3 CS Pin
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d80:	4621      	mov	r1, r4
 8000d82:	4808      	ldr	r0, [pc, #32]	; (8000da4 <MX_GPIO_Init+0x1dc>)
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;   // Portable IMU3 CS Pin
 8000d84:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d88:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d8c:	60e7      	str	r7, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d8e:	6127      	str	r7, [r4, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d90:	f003 f80c 	bl	8003dac <LL_GPIO_Init>
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <MX_GPIO_Init+0x1dc>)
 8000d96:	f8c3 b018 	str.w	fp, [r3, #24]
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_4);

}
 8000d9a:	b003      	add	sp, #12
 8000d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000da0:	200080f0 	.word	0x200080f0
 8000da4:	48000800 	.word	0x48000800
 8000da8:	48000400 	.word	0x48000400
 8000dac:	48001c00 	.word	0x48001c00

08000db0 <GREEN_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8000db0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000db4:	2204      	movs	r2, #4
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000db8:	4a02      	ldr	r2, [pc, #8]	; (8000dc4 <GREEN_LED_ONLY+0x14>)
 8000dba:	2180      	movs	r1, #128	; 0x80
 8000dbc:	6191      	str	r1, [r2, #24]
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	619a      	str	r2, [r3, #24]
 8000dc2:	4770      	bx	lr
 8000dc4:	48000400 	.word	0x48000400

08000dc8 <RED_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8000dc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dcc:	2208      	movs	r2, #8
 8000dce:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000dd0:	4a02      	ldr	r2, [pc, #8]	; (8000ddc <RED_LED_ONLY+0x14>)
 8000dd2:	2180      	movs	r1, #128	; 0x80
 8000dd4:	6191      	str	r1, [r2, #24]
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	619a      	str	r2, [r3, #24]
 8000dda:	4770      	bx	lr
 8000ddc:	48000400 	.word	0x48000400

08000de0 <main>:
uint8_t PrintBuf[50],PrintBuf1[50];




int main(void){
 8000de0:	b508      	push	{r3, lr}
	Pros_state =  LP_STOP;                                    // Default state after power ON reset
 8000de2:	4b36      	ldr	r3, [pc, #216]	; (8000ebc <main+0xdc>)
 8000de4:	2401      	movs	r4, #1
 8000de6:	701c      	strb	r4, [r3, #0]
	SystemClock_Config_MSI_80MHz();	                        // Configure the system clock to 48 MHz from MSI, PLL disabled for power saving
 8000de8:	f001 fe80 	bl	8002aec <SystemClock_Config_MSI_80MHz>

	// If RTC is previously configured and running via backup battery i.e. BackUp Register Data is available, No need to update RTC time again
 if (RTC_BAK_GetRegister(RTC, 0x01) != RTC_BKP_DATE_TIME_UPDTATED) //    0x01 value was arbitrarily set from previous Configure_RTC_Calendar()
 8000dec:	4621      	mov	r1, r4
 8000dee:	4834      	ldr	r0, [pc, #208]	; (8000ec0 <main+0xe0>)
 8000df0:	f000 fa74 	bl	80012dc <RTC_BAK_GetRegister>
 8000df4:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8000df8:	4298      	cmp	r0, r3
 8000dfa:	d001      	beq.n	8000e00 <main+0x20>
	  {
			MX_RTC_Init();   // Set RTC clock source and parameters
 8000dfc:	f000 fa14 	bl	8001228 <MX_RTC_Init>
	  }

  MX_GPIO_Init();
 8000e00:	f7ff fee2 	bl	8000bc8 <MX_GPIO_Init>
//clear state


//  EPOS4_enable(CAN_ID);
//  EPOS4_set_operation_mode(CAN_ID, 3); // this for velocity mode
  EPOS4_set_operation_mode(CAN_ID, 0x0A); // torque mode
 8000e04:	4c2f      	ldr	r4, [pc, #188]	; (8000ec4 <main+0xe4>)
//    }




  angle_eq=30;
 8000e06:	4d30      	ldr	r5, [pc, #192]	; (8000ec8 <main+0xe8>)

  while(1)
	  {angle_now=knee_angle();
 8000e08:	4e30      	ldr	r6, [pc, #192]	; (8000ecc <main+0xec>)

	  	  if(angle_now>=10 && angle_now<=50 )
 8000e0a:	ed9f 8a31 	vldr	s16, [pc, #196]	; 8000ed0 <main+0xf0>
	  	  {	GREEN_LED_ONLY();

	  		torque_calc= -(angle_eq-angle_now)*35;
 8000e0e:	eddf 8a31 	vldr	s17, [pc, #196]	; 8000ed4 <main+0xf4>
  HAL_Init();                 // Reset of all peripherals, Initializes the Flash interface and the Systick.
 8000e12:	f001 ffb7 	bl	8002d84 <HAL_Init>
    DFU_Bypass();
 8000e16:	f000 f9c1 	bl	800119c <DFU_Bypass>
    Configure_USART_1();  // Debug with PC
 8000e1a:	f001 f855 	bl	8001ec8 <Configure_USART_1>
    sprintf(PrintBuf,"Hello");
 8000e1e:	492e      	ldr	r1, [pc, #184]	; (8000ed8 <main+0xf8>)
 8000e20:	482e      	ldr	r0, [pc, #184]	; (8000edc <main+0xfc>)
 8000e22:	f003 fe2b 	bl	8004a7c <strcpy>
    USART1_wr_print(PrintBuf,sizeof(PrintBuf));
 8000e26:	2132      	movs	r1, #50	; 0x32
 8000e28:	482c      	ldr	r0, [pc, #176]	; (8000edc <main+0xfc>)
 8000e2a:	f001 f887 	bl	8001f3c <USART1_wr_print>
 P_IMU4_SPI3_Initialization_at_reset();   //IMU4-5_SPI3 //step1
 8000e2e:	f001 fca7 	bl	8002780 <P_IMU4_SPI3_Initialization_at_reset>
 P_IMU1_SPI1_Initialization_at_reset(); //IMU1-2__SPI1  (only IMU1 configured)
 8000e32:	f001 fbab 	bl	800258c <P_IMU1_SPI1_Initialization_at_reset>
 P_ADC_Sensor_GPIO_Init(); //ADC GPIOs //here we initialized the chip select pins as well
 8000e36:	f000 fcdf 	bl	80017f8 <P_ADC_Sensor_GPIO_Init>
 MCP_SPI2_Initialization_at_reset();
 8000e3a:	f001 f833 	bl	8001ea4 <MCP_SPI2_Initialization_at_reset>
  CAN_configure();
 8000e3e:	f7ff fddd 	bl	80009fc <CAN_configure>
  CAN_mode();
 8000e42:	f7ff fdea 	bl	8000a1a <CAN_mode>
  EPOS4_set_operation_mode(CAN_ID, 0x0A); // torque mode
 8000e46:	210a      	movs	r1, #10
 8000e48:	6820      	ldr	r0, [r4, #0]
 8000e4a:	f7ff fe2e 	bl	8000aaa <EPOS4_set_operation_mode>
  EPOS4_clear_errors(CAN_ID);
 8000e4e:	6820      	ldr	r0, [r4, #0]
 8000e50:	f7ff fe80 	bl	8000b54 <EPOS4_clear_errors>
  EPOS4_enable(CAN_ID);
 8000e54:	6820      	ldr	r0, [r4, #0]
 8000e56:	f7ff fe3c 	bl	8000ad2 <EPOS4_enable>
  angle_eq=30;
 8000e5a:	4a21      	ldr	r2, [pc, #132]	; (8000ee0 <main+0x100>)
 8000e5c:	602a      	str	r2, [r5, #0]
	  {angle_now=knee_angle();
 8000e5e:	f001 fd67 	bl	8002930 <knee_angle>
	  	  if(angle_now>=10 && angle_now<=50 )
 8000e62:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8000e66:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  {angle_now=knee_angle();
 8000e6e:	ed86 0a00 	vstr	s0, [r6]
	  	  if(angle_now>=10 && angle_now<=50 )
 8000e72:	db1e      	blt.n	8000eb2 <main+0xd2>
 8000e74:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8000e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7c:	d819      	bhi.n	8000eb2 <main+0xd2>
	  	  {	GREEN_LED_ONLY();
 8000e7e:	f7ff ff97 	bl	8000db0 <GREEN_LED_ONLY>
	  		torque_calc= -(angle_eq-angle_now)*35;
 8000e82:	edd5 7a00 	vldr	s15, [r5]
 8000e86:	ed96 7a00 	vldr	s14, [r6]
 8000e8a:	4a16      	ldr	r2, [pc, #88]	; (8000ee4 <main+0x104>)
 8000e8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e90:	ee67 7ae8 	vnmul.f32	s15, s15, s17
 8000e94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e98:	ee17 3a90 	vmov	r3, s15


	  		if (torque_calc>=600)
 8000e9c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
	  		{
	  			torque_calc=600;
 8000ea0:	bfa8      	it	ge
 8000ea2:	f44f 7316 	movge.w	r3, #600	; 0x258
 8000ea6:	6013      	str	r3, [r2, #0]
	  		}
	  		else
	  			torque_calc=torque_calc;

	  		EPOS4_CST_apply_torque(CAN_ID,torque_calc); //100 means 10% +ve is extension -ve is flextion
 8000ea8:	6811      	ldr	r1, [r2, #0]

	  	  }
	  	  else
	  	  {
	  		RED_LED_ONLY();
	  		EPOS4_CST_apply_torque(CAN_ID,0); //100 means 10%
 8000eaa:	6820      	ldr	r0, [r4, #0]
 8000eac:	f7ff fe3e 	bl	8000b2c <EPOS4_CST_apply_torque>
 8000eb0:	e7d5      	b.n	8000e5e <main+0x7e>
	  		RED_LED_ONLY();
 8000eb2:	f7ff ff89 	bl	8000dc8 <RED_LED_ONLY>
	  		EPOS4_CST_apply_torque(CAN_ID,0); //100 means 10%
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e7f7      	b.n	8000eaa <main+0xca>
 8000eba:	bf00      	nop
 8000ebc:	2000808c 	.word	0x2000808c
 8000ec0:	40002800 	.word	0x40002800
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000030 	.word	0x20000030
 8000ecc:	20000034 	.word	0x20000034
 8000ed0:	42480000 	.word	0x42480000
 8000ed4:	420c0000 	.word	0x420c0000
 8000ed8:	08004aa4 	.word	0x08004aa4
 8000edc:	2000838c 	.word	0x2000838c
 8000ee0:	41f00000 	.word	0x41f00000
 8000ee4:	2000003c 	.word	0x2000003c

08000ee8 <LPTIM2_IRQHandler>:
  * @param  LPTIMx Low-Power Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPTIM_IsActiveFlag_ARRM(LPTIM_TypeDef *LPTIMx)
{
  return (READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == (LPTIM_ISR_ARRM));
 8000ee8:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <LPTIM2_IRQHandler+0xac>)
 8000eea:	681b      	ldr	r3, [r3, #0]

}

void LPTIM2_IRQHandler(void)   // Response of 10ms LPTIM interrupt
{
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)	// auto reload match interrupt has occured
 8000eec:	079b      	lsls	r3, r3, #30
{
 8000eee:	b570      	push	{r4, r5, r6, lr}
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)	// auto reload match interrupt has occured
 8000ef0:	d547      	bpl.n	8000f82 <LPTIM2_IRQHandler+0x9a>
	{
		if (Data_log_Start_Resume == 1)   // Sensor Start Flag from VCP command / FATFS SD card file
 8000ef2:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <LPTIM2_IRQHandler+0xb0>)
 8000ef4:	781c      	ldrb	r4, [r3, #0]
 8000ef6:	2c01      	cmp	r4, #1
 8000ef8:	d13e      	bne.n	8000f78 <LPTIM2_IRQHandler+0x90>
		{
			F_Sensor_ADC_Store();
 8000efa:	f000 fe29 	bl	8001b50 <F_Sensor_ADC_Store>
//		    BSbuffer[s_flag].marking_sw[Sub_cnt]=(int16_t) (LL_GPIO_IsInputPinSet(GPIOA,LL_GPIO_PIN_10));
//			BSbuffer[s_flag].marking_sw[Sub_cnt]=13;
			Mag_Enc1_Store();
 8000efe:	f001 fc4d 	bl	800279c <Mag_Enc1_Store>
			Mag_Enc2_Store();
 8000f02:	f001 fc91 	bl	8002828 <Mag_Enc2_Store>
//			BSbuffer[s_flag].Enc2[Sub_cnt]=knee_angle();
			MPU_9D_store_IMU1_SPI1();
 8000f06:	f001 f82f 	bl	8001f68 <MPU_9D_store_IMU1_SPI1>
			MPU_9D_store_IMU2_SPI1(); // create similar for IMU2
 8000f0a:	f001 f89f 	bl	800204c <MPU_9D_store_IMU2_SPI1>

			MPU_9D_store_IMU3_SPI2(1,2);
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4620      	mov	r0, r4
 8000f12:	f001 fa0d 	bl	8002330 <MPU_9D_store_IMU3_SPI2>
			MPU_9D_store_IMU4_SPI3(); // create similar for IMU5
 8000f16:	f001 f90d 	bl	8002134 <MPU_9D_store_IMU4_SPI3>
			MPU_9D_store_IMU5_SPI3();
 8000f1a:	f001 f98f 	bl	800223c <MPU_9D_store_IMU5_SPI3>

			if (Sub_cnt == 5)
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <LPTIM2_IRQHandler+0xb4>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	2a05      	cmp	r2, #5
 8000f24:	d118      	bne.n	8000f58 <LPTIM2_IRQHandler+0x70>
			{
				//BSbuffer[s_flag].Blank1 = (uint8_t) (LL_GPIO_IsInputPinSet(GPIOA,LL_GPIO_PIN_10));
				BSbuffer[s_flag].RTC_Time = (uint32_t)(RTC->TR & 0x007F7F7F);
 8000f26:	4d1e      	ldr	r5, [pc, #120]	; (8000fa0 <LPTIM2_IRQHandler+0xb8>)
 8000f28:	4c1e      	ldr	r4, [pc, #120]	; (8000fa4 <LPTIM2_IRQHandler+0xbc>)
 8000f2a:	7828      	ldrb	r0, [r5, #0]
 8000f2c:	491e      	ldr	r1, [pc, #120]	; (8000fa8 <LPTIM2_IRQHandler+0xc0>)
 8000f2e:	6822      	ldr	r2, [r4, #0]
 8000f30:	eb01 3080 	add.w	r0, r1, r0, lsl #14
 8000f34:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 8000f38:	f643 76f8 	movw	r6, #16376	; 0x3ff8
 8000f3c:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8000f40:	5182      	str	r2, [r0, r6]
				BSbuffer[s_flag].RTC_Date= (uint32_t)(RTC->DR & 0x00FFFF3F);
 8000f42:	7828      	ldrb	r0, [r5, #0]
 8000f44:	6862      	ldr	r2, [r4, #4]
 8000f46:	eb01 3180 	add.w	r1, r1, r0, lsl #14
 8000f4a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000f4e:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 8000f52:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000f56:	500a      	str	r2, [r1, r0]

			}

// Switching Buffer code starts here
			if(Sub_cnt==Highest_sensor_count)   // Total samples to be stored in a 16KB buffer
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	2ab9      	cmp	r2, #185	; 0xb9
 8000f5c:	d115      	bne.n	8000f8a <LPTIM2_IRQHandler+0xa2>
			{
				Sub_cnt=0;           // Reset Counter of sensor element
 8000f5e:	2100      	movs	r1, #0
 8000f60:	6019      	str	r1, [r3, #0]
				SD_write_Flag = 1;   // Flag set to write filled buffer content
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <LPTIM2_IRQHandler+0xc4>)
 8000f64:	4812      	ldr	r0, [pc, #72]	; (8000fb0 <LPTIM2_IRQHandler+0xc8>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
				// Changing Buffer
				if (s_flag==0)       // if current storgae_buffer was 0
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <LPTIM2_IRQHandler+0xb8>)
 8000f6c:	781c      	ldrb	r4, [r3, #0]
 8000f6e:	f004 05ff 	and.w	r5, r4, #255	; 0xff
 8000f72:	b93c      	cbnz	r4, 8000f84 <LPTIM2_IRQHandler+0x9c>
				{
					w_flag=0;            // write_buffer to be saved in SD card = 0
 8000f74:	7005      	strb	r5, [r0, #0]
					s_flag=1;            // current storgae_buffer is set 1
 8000f76:	701a      	strb	r2, [r3, #0]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8000f78:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <LPTIM2_IRQHandler+0xac>)
 8000f7a:	6853      	ldr	r3, [r2, #4]
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	6053      	str	r3, [r2, #4]
 8000f82:	bd70      	pop	{r4, r5, r6, pc}
				}
				else                    // if current storgae_buffer was 1
				{
					w_flag=1;           // write_buffer to be saved in SD card = 1
 8000f84:	7002      	strb	r2, [r0, #0]
					s_flag=0;           // current storgae_buffer is set 0
 8000f86:	7019      	strb	r1, [r3, #0]
 8000f88:	e7f6      	b.n	8000f78 <LPTIM2_IRQHandler+0x90>
				}

			}
			else
			{
				Sub_cnt++;              // Increment Counter of sensor element
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	3201      	adds	r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	e7f2      	b.n	8000f78 <LPTIM2_IRQHandler+0x90>
 8000f92:	bf00      	nop
 8000f94:	40009400 	.word	0x40009400
 8000f98:	20008111 	.word	0x20008111
 8000f9c:	20000028 	.word	0x20000028
 8000fa0:	20000038 	.word	0x20000038
 8000fa4:	40002800 	.word	0x40002800
 8000fa8:	2000004c 	.word	0x2000004c
 8000fac:	20008118 	.word	0x20008118
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <EXTI9_5_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine));
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <EXTI9_5_IRQHandler+0x18>)
 8000fb6:	695a      	ldr	r2, [r3, #20]

}

void EXTI9_5_IRQHandler(void)       // Interrupt from USB connectivity PIN PA9
{
if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8000fb8:	0592      	lsls	r2, r2, #22
 8000fba:	d505      	bpl.n	8000fc8 <EXTI9_5_IRQHandler+0x14>
{
USB_Present_=1;         // USB present
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <EXTI9_5_IRQHandler+0x1c>)
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	7011      	strb	r1, [r2, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc6:	615a      	str	r2, [r3, #20]
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40010400 	.word	0x40010400
 8000fd0:	2000002c 	.word	0x2000002c

08000fd4 <NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd4:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000fd8:	4905      	ldr	r1, [pc, #20]	; (8000ff0 <NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000fdc:	68ca      	ldr	r2, [r1, #12]
 8000fde:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	60cb      	str	r3, [r1, #12]
 8000fe6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8000fea:	bf00      	nop
 8000fec:	e7fd      	b.n	8000fea <NVIC_SystemReset+0x16>
 8000fee:	bf00      	nop
 8000ff0:	e000ed00 	.word	0xe000ed00
 8000ff4:	05fa0004 	.word	0x05fa0004

08000ff8 <LL_ADC_REG_StartConversion>:
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ff8:	6883      	ldr	r3, [r0, #8]
 8000ffa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000ffe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6083      	str	r3, [r0, #8]
 8001008:	4770      	bx	lr
	...

0800100c <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <LL_AHB2_GRP1_EnableClock+0x18>)
 800100e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001010:	4302      	orrs	r2, r0
 8001012:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8001016:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001018:	4018      	ands	r0, r3
 800101a:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800101c:	9b01      	ldr	r3, [sp, #4]
}
 800101e:	b002      	add	sp, #8
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000

08001028 <LL_APB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <LL_APB1_GRP1_EnableClock+0x18>)
 800102a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800102c:	4302      	orrs	r2, r0
 800102e:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 8001032:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001034:	4018      	ands	r0, r3
 8001036:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001038:	9b01      	ldr	r3, [sp, #4]
}
 800103a:	b002      	add	sp, #8
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000

08001044 <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <LL_APB2_GRP1_EnableClock+0x18>)
 8001046:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001048:	4302      	orrs	r2, r0
 800104a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800104c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 800104e:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001050:	4018      	ands	r0, r3
 8001052:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001054:	9b01      	ldr	r3, [sp, #4]
}
 8001056:	b002      	add	sp, #8
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000

08001060 <LL_GPIO_SetPinMode>:
{
 8001060:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001062:	6803      	ldr	r3, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001064:	fa91 f4a1 	rbit	r4, r1
 8001068:	fab4 f484 	clz	r4, r4
 800106c:	fa91 f1a1 	rbit	r1, r1
 8001070:	2503      	movs	r5, #3
 8001072:	fab1 f181 	clz	r1, r1
 8001076:	0064      	lsls	r4, r4, #1
 8001078:	fa05 f404 	lsl.w	r4, r5, r4
 800107c:	0049      	lsls	r1, r1, #1
 800107e:	ea23 0304 	bic.w	r3, r3, r4
 8001082:	fa02 f101 	lsl.w	r1, r2, r1
 8001086:	4319      	orrs	r1, r3
 8001088:	6001      	str	r1, [r0, #0]
 800108a:	bd30      	pop	{r4, r5, pc}

0800108c <LL_ADC_REG_SetSequencerRanks>:
{
 800108c:	b530      	push	{r4, r5, lr}
 800108e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001092:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001096:	fab3 f383 	clz	r3, r3
 800109a:	f401 7440 	and.w	r4, r1, #768	; 0x300
 800109e:	40dc      	lsrs	r4, r3
 80010a0:	3030      	adds	r0, #48	; 0x30
  MODIFY_REG(*preg,
 80010a2:	f001 011f 	and.w	r1, r1, #31
 80010a6:	231f      	movs	r3, #31
 80010a8:	fa03 f501 	lsl.w	r5, r3, r1
 80010ac:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 80010b0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80010b4:	f1c1 011a 	rsb	r1, r1, #26
 80010b8:	ea23 0305 	bic.w	r3, r3, r5
 80010bc:	fa22 f101 	lsr.w	r1, r2, r1
 80010c0:	4319      	orrs	r1, r3
 80010c2:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 80010c6:	bd30      	pop	{r4, r5, pc}

080010c8 <LL_ADC_SetChannelSamplingTime>:
{
 80010c8:	b570      	push	{r4, r5, r6, lr}
 80010ca:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80010ce:	fa96 f6a6 	rbit	r6, r6
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80010d2:	fab6 f386 	clz	r3, r6
 80010d6:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 80010da:	40de      	lsrs	r6, r3
 80010dc:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 80010de:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 80010e2:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 80010e6:	fa93 f5a3 	rbit	r5, r3
 80010ea:	fab5 f585 	clz	r5, r5
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	2407      	movs	r4, #7
 80010f4:	fa21 f505 	lsr.w	r5, r1, r5
 80010f8:	fa04 f505 	lsl.w	r5, r4, r5
 80010fc:	fab3 f383 	clz	r3, r3
 8001100:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8001104:	40d9      	lsrs	r1, r3
 8001106:	ea24 0405 	bic.w	r4, r4, r5
 800110a:	fa02 f101 	lsl.w	r1, r2, r1
 800110e:	4321      	orrs	r1, r4
 8001110:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 8001114:	bd70      	pop	{r4, r5, r6, pc}

08001116 <LL_GPIO_SetAFPin_0_7>:
{
 8001116:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001118:	6a03      	ldr	r3, [r0, #32]
 800111a:	fa91 f4a1 	rbit	r4, r1
 800111e:	fab4 f484 	clz	r4, r4
 8001122:	fa91 f1a1 	rbit	r1, r1
 8001126:	250f      	movs	r5, #15
 8001128:	fab1 f181 	clz	r1, r1
 800112c:	00a4      	lsls	r4, r4, #2
 800112e:	fa05 f404 	lsl.w	r4, r5, r4
 8001132:	0089      	lsls	r1, r1, #2
 8001134:	ea23 0304 	bic.w	r3, r3, r4
 8001138:	fa02 f101 	lsl.w	r1, r2, r1
 800113c:	4319      	orrs	r1, r3
 800113e:	6201      	str	r1, [r0, #32]
 8001140:	bd30      	pop	{r4, r5, pc}

08001142 <LL_GPIO_SetPinPull>:
{
 8001142:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001144:	68c3      	ldr	r3, [r0, #12]
 8001146:	fa91 f4a1 	rbit	r4, r1
 800114a:	fab4 f484 	clz	r4, r4
 800114e:	fa91 f1a1 	rbit	r1, r1
 8001152:	2503      	movs	r5, #3
 8001154:	fab1 f181 	clz	r1, r1
 8001158:	0064      	lsls	r4, r4, #1
 800115a:	fa05 f404 	lsl.w	r4, r5, r4
 800115e:	0049      	lsls	r1, r1, #1
 8001160:	ea23 0304 	bic.w	r3, r3, r4
 8001164:	fa02 f101 	lsl.w	r1, r2, r1
 8001168:	4319      	orrs	r1, r3
 800116a:	60c1      	str	r1, [r0, #12]
 800116c:	bd30      	pop	{r4, r5, pc}

0800116e <LL_GPIO_SetPinSpeed.constprop.6>:
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 800116e:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001170:	6882      	ldr	r2, [r0, #8]
 8001172:	fa91 f3a1 	rbit	r3, r1
 8001176:	fab3 f383 	clz	r3, r3
 800117a:	fa91 f1a1 	rbit	r1, r1
 800117e:	2403      	movs	r4, #3
 8001180:	fab1 f181 	clz	r1, r1
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	fa04 f303 	lsl.w	r3, r4, r3
 800118a:	0049      	lsls	r1, r1, #1
 800118c:	ea22 0303 	bic.w	r3, r2, r3
 8001190:	fa04 f101 	lsl.w	r1, r4, r1
 8001194:	4319      	orrs	r1, r3
 8001196:	6081      	str	r1, [r0, #8]
 8001198:	bd10      	pop	{r4, pc}
	...

0800119c <DFU_Bypass>:
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800119c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
void DFU_Bypass(void)
{

	uint32_t i=0;

    check=LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY);
 80011a0:	4810      	ldr	r0, [pc, #64]	; (80011e4 <DFU_Bypass+0x48>)
 80011a2:	691a      	ldr	r2, [r3, #16]
 80011a4:	f402 7100 	and.w	r1, r2, #512	; 0x200
 80011a8:	f3c2 2240 	ubfx	r2, r2, #9, #1
{
 80011ac:	b570      	push	{r4, r5, r6, lr}
    check=LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY);
 80011ae:	6002      	str	r2, [r0, #0]
 80011b0:	691a      	ldr	r2, [r3, #16]
   // if(check == 1)
    //	 CYAN_LED_ONLY();
    while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));  // Wait until USB cable disconnect from Charger
 80011b2:	0592      	lsls	r2, r2, #22
 80011b4:	d4fc      	bmi.n	80011b0 <DFU_Bypass+0x14>
	  if (*LP_Ram_Key_Address != Reset_Key_Value)
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <DFU_Bypass+0x4c>)
 80011b8:	4c0c      	ldr	r4, [pc, #48]	; (80011ec <DFU_Bypass+0x50>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	42a2      	cmp	r2, r4
 80011be:	d010      	beq.n	80011e2 <DFU_Bypass+0x46>
	  {
	      *LP_Ram_Key_Address = Reset_Key_Value;
 80011c0:	601c      	str	r4, [r3, #0]
    if(check == 1)
 80011c2:	b171      	cbz	r1, 80011e2 <DFU_Bypass+0x46>
 80011c4:	2505      	movs	r5, #5
 80011c6:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
    {
	  /* Toggle IO in during 2s (10*200ms) */
	  for(i =0; i<5; i++)
	  {
	 //   LL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
	    LL_mDelay(200);
 80011ca:	20c8      	movs	r0, #200	; 0xc8
 80011cc:	f003 f948 	bl	8004460 <LL_mDelay>
 80011d0:	6933      	ldr	r3, [r6, #16]
	    if (LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY))
 80011d2:	059b      	lsls	r3, r3, #22
 80011d4:	d503      	bpl.n	80011de <DFU_Bypass+0x42>
	    {
	    	 *Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <DFU_Bypass+0x54>)
 80011d8:	601c      	str	r4, [r3, #0]
	    	  NVIC_SystemReset();        // System reset
 80011da:	f7ff fefb 	bl	8000fd4 <NVIC_SystemReset>
	  for(i =0; i<5; i++)
 80011de:	3d01      	subs	r5, #1
 80011e0:	d1f3      	bne.n	80011ca <DFU_Bypass+0x2e>
 80011e2:	bd70      	pop	{r4, r5, r6, pc}
 80011e4:	200084a8 	.word	0x200084a8
 80011e8:	20017cf0 	.word	0x20017cf0
 80011ec:	deadbeef 	.word	0xdeadbeef
 80011f0:	20017ff0 	.word	0x20017ff0

080011f4 <Enter_RTC_InitMode>:
(void)RTC->TR;
}

void Enter_RTC_InitMode(void)      // Function needed before writing on RTC registers
{
  RTC->ISR = RTC_INIT_MASK;                                // Enter Init Mode
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <Enter_RTC_InitMode+0x10>)
 80011f6:	f04f 32ff 	mov.w	r2, #4294967295
 80011fa:	60da      	str	r2, [r3, #12]
  while(((RTC->ISR) & RTC_ISR_INITF) != (RTC_ISR_INITF)); // Wait to enter Init mode
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	0652      	lsls	r2, r2, #25
 8001200:	d5fc      	bpl.n	80011fc <Enter_RTC_InitMode+0x8>
}
 8001202:	4770      	bx	lr
 8001204:	40002800 	.word	0x40002800

08001208 <Exit_RTC_InitMode>:

void Exit_RTC_InitMode(void)      // Function needed after writing on RTC registers
{
  RTC->ISR = (uint32_t)~RTC_ISR_INIT; // Disable RTC init mode
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <Exit_RTC_InitMode+0x1c>)
 800120a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800120e:	60da      	str	r2, [r3, #12]

	// Wait for synchro. Needed only if Shadow registers is enabled
	WRITE_REG(RTC->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTC->ISR & RTC_ISR_INIT))); // Clear RTC sync flag
 8001210:	68da      	ldr	r2, [r3, #12]
 8001212:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001216:	f062 02a0 	orn	r2, r2, #160	; 0xa0
 800121a:	60da      	str	r2, [r3, #12]
	while(((RTC->ISR) & RTC_ISR_RSF) != (RTC_ISR_RSF));  // Wait the registers to be synchronised
 800121c:	68da      	ldr	r2, [r3, #12]
 800121e:	0692      	lsls	r2, r2, #26
 8001220:	d5fc      	bpl.n	800121c <Exit_RTC_InitMode+0x14>
}
 8001222:	4770      	bx	lr
 8001224:	40002800 	.word	0x40002800

08001228 <MX_RTC_Init>:

void MX_RTC_Init(void)                           // RTC initialization after Power on reset
{
 8001228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <MX_RTC_Init+0xa8>)
 800122c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001230:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001234:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001238:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800123c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001240:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001244:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001248:	f042 0201 	orr.w	r2, r2, #1
 800124c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001250:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  LL_RTC_InitTypeDef RTC_InitStruct;

  LL_RCC_ForceBackupDomainReset();               // Reset Backup domain registers
  LL_RCC_ReleaseBackupDomainReset();
  LL_RCC_LSE_Enable();                          // Configure LSE as RTC source clock
  while (LL_RCC_LSE_IsReady() != 1);
 8001254:	0792      	lsls	r2, r2, #30
 8001256:	d5fb      	bpl.n	8001250 <MX_RTC_Init+0x28>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001258:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
  LL_RCC_EnableRTC();                           // RTC clock

  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
  LL_RTC_Init(RTC, &RTC_InitStruct);           // Initialize RTC with default configurations
 800125c:	4c1d      	ldr	r4, [pc, #116]	; (80012d4 <MX_RTC_Init+0xac>)
 800125e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001266:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800126a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 800126e:	a904      	add	r1, sp, #16
 8001270:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001274:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001278:	2300      	movs	r3, #0
 800127a:	f841 3d0c 	str.w	r3, [r1, #-12]!
  LL_RTC_Init(RTC, &RTC_InitStruct);           // Initialize RTC with default configurations
 800127e:	4620      	mov	r0, r4
 8001280:	f002 fe5e 	bl	8003f40 <LL_RTC_Init>
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001284:	23ca      	movs	r3, #202	; 0xca
 8001286:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001288:	2353      	movs	r3, #83	; 0x53
 800128a:	6263      	str	r3, [r4, #36]	; 0x24


    LL_RTC_DisableWriteProtection(RTC);
    Enter_RTC_InitMode();                         // Enter RTC initialization mode to set parameters
 800128c:	f7ff ffb2 	bl	80011f4 <Enter_RTC_InitMode>

    // Calender set up
    MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_A, 0x7F << RTC_POSITION_PRER_PREDIV_A);  // ASYNC prediv= 0x7F
 8001290:	6923      	ldr	r3, [r4, #16]
 8001292:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001296:	fa92 f2a2 	rbit	r2, r2
 800129a:	217f      	movs	r1, #127	; 0x7f
 800129c:	fab2 f282 	clz	r2, r2
 80012a0:	fa01 f202 	lsl.w	r2, r1, r2
 80012a4:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80012a8:	4313      	orrs	r3, r2
 80012aa:	6123      	str	r3, [r4, #16]
  	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_S, 0xFF);                                // SYNC prediv= 0xFF
 80012ac:	6923      	ldr	r3, [r4, #16]
 80012ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80012b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80012b6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80012ba:	6123      	str	r3, [r4, #16]

  	Exit_RTC_InitMode();
 80012bc:	f7ff ffa4 	bl	8001208 <Exit_RTC_InitMode>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80012c0:	23ff      	movs	r3, #255	; 0xff
 80012c2:	6263      	str	r3, [r4, #36]	; 0x24

  tmp = (uint32_t)(&(RTCx->BKP0R));
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <MX_RTC_Init+0xb0>)
 80012c6:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80012ca:	605a      	str	r2, [r3, #4]
}
 80012cc:	b004      	add	sp, #16
 80012ce:	bd10      	pop	{r4, pc}
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40002800 	.word	0x40002800
 80012d8:	40002850 	.word	0x40002850

080012dc <RTC_BAK_GetRegister>:
// Valid register value indicates RTC is enabled and running
uint32_t RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
  register uint32_t tmp = 0U;

  tmp = (uint32_t)(&(RTCx->BKP0R));
 80012dc:	3050      	adds	r0, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80012de:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
}
 80012e2:	4770      	bx	lr

080012e4 <P_IMU4_SPI3_Init>:
	//}
}


void P_IMU4_SPI3_Init(void) // work for imu5
{
 80012e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LL_SPI_InitTypeDef SPI_InitStruct;

  LL_GPIO_InitTypeDef GPIO_InitStruct;

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80012e8:	2004      	movs	r0, #4
{
 80012ea:	b091      	sub	sp, #68	; 0x44
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80012ec:	f7ff fe8e 	bl	800100c <LL_AHB2_GRP1_EnableClock>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
  LL_GPIO_Init(SPI3_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 80012f0:	4e2e      	ldr	r6, [pc, #184]	; (80013ac <P_IMU4_SPI3_Init+0xc8>)
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80012f2:	2002      	movs	r0, #2
 80012f4:	f7ff fe8a 	bl	800100c <LL_AHB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80012f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012fc:	f7ff fe94 	bl	8001028 <LL_APB1_GRP1_EnableClock>
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001300:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001302:	2502      	movs	r5, #2
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001308:	2706      	movs	r7, #6
  GPIO_InitStruct.Pin = SPI3_SCK_IMU_PIN;
 800130a:	f04f 0908 	mov.w	r9, #8
  LL_GPIO_Init(SPI3_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 800130e:	4669      	mov	r1, sp
 8001310:	4630      	mov	r0, r6
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001312:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001314:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pin = SPI3_SCK_IMU_PIN;
 8001316:	f8cd 9000 	str.w	r9, [sp]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800131a:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	f8cd 8008 	str.w	r8, [sp, #8]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001320:	9705      	str	r7, [sp, #20]
  LL_GPIO_Init(SPI3_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001322:	f002 fd43 	bl	8003dac <LL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI3_MISO_IMU_PIN;
 8001326:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
  LL_GPIO_Init(SPI3_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001328:	4669      	mov	r1, sp
 800132a:	4630      	mov	r0, r6
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800132c:	e88d 0128 	stmia.w	sp, {r3, r5, r8}
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001330:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001332:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001334:	9705      	str	r7, [sp, #20]
  LL_GPIO_Init(SPI3_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001336:	f002 fd39 	bl	8003dac <LL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI3_MOSI_IMU_PIN;
 800133a:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
  LL_GPIO_Init(SPI3_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 800133c:	4669      	mov	r1, sp
 800133e:	4630      	mov	r0, r6
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	e88d 0128 	stmia.w	sp, {r3, r5, r8}
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001344:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001346:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001348:	9705      	str	r7, [sp, #20]
  LL_GPIO_Init(SPI3_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 800134a:	f002 fd2f 	bl	8003dac <LL_GPIO_Init>


  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800134e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001352:	9307      	str	r3, [sp, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001354:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001358:	9406      	str	r4, [sp, #24]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800135a:	9308      	str	r3, [sp, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;

  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800135c:	940d      	str	r4, [sp, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800135e:	940e      	str	r4, [sp, #56]	; 0x38
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001360:	2301      	movs	r3, #1
  SPI_InitStruct.CRCPoly = 7;
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001362:	4c13      	ldr	r4, [pc, #76]	; (80013b0 <P_IMU4_SPI3_Init+0xcc>)
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001364:	930a      	str	r3, [sp, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800136a:	930b      	str	r3, [sp, #44]	; 0x2c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 800136c:	a906      	add	r1, sp, #24
  SPI_InitStruct.CRCPoly = 7;
 800136e:	2307      	movs	r3, #7
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001370:	4620      	mov	r0, r4
  SPI_InitStruct.CRCPoly = 7;
 8001372:	930f      	str	r3, [sp, #60]	; 0x3c
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001374:	9509      	str	r5, [sp, #36]	; 0x24
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001376:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 800137a:	f002 fe0d 	bl	8003f98 <LL_SPI_Init>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800137e:	6863      	ldr	r3, [r4, #4]
 8001380:	f023 0308 	bic.w	r3, r3, #8
 8001384:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8001386:	6863      	ldr	r3, [r4, #4]
 8001388:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800138c:	6063      	str	r3, [r4, #4]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_RXNE(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 800138e:	6863      	ldr	r3, [r4, #4]
 8001390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001394:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001396:	6823      	ldr	r3, [r4, #0]
 8001398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800139c:	6023      	str	r3, [r4, #0]

  LL_SPI_SetRxFIFOThreshold(SPI3,LL_SPI_RX_FIFO_TH_QUARTER);
  LL_SPI_DisableIT_RXNE(SPI3);
  LL_SPI_Enable(SPI3);

  delay_us(10000);
 800139e:	f242 7010 	movw	r0, #10000	; 0x2710
 80013a2:	f001 fb8b 	bl	8002abc <delay_us>

}
 80013a6:	b011      	add	sp, #68	; 0x44
 80013a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013ac:	48000400 	.word	0x48000400
 80013b0:	40003c00 	.word	0x40003c00

080013b4 <MCP_reset>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MCP_reset+0x28>)
 80013b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
}

void MCP_reset(){
    LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_PORT, SPI2_CS_PIN);

    while(!(SPI2->SR & SPI_SR_TXE)); //transmit buffer empty?
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MCP_reset+0x2c>)
 80013be:	461a      	mov	r2, r3
 80013c0:	6899      	ldr	r1, [r3, #8]
 80013c2:	0789      	lsls	r1, r1, #30
 80013c4:	d5fc      	bpl.n	80013c0 <MCP_reset+0xc>
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 80013c6:	21c0      	movs	r1, #192	; 0xc0
 80013c8:	7319      	strb	r1, [r3, #12]
	LL_SPI_TransmitData8(SPI2,0xC0);
	while(!(SPI2->SR & SPI_SR_RXNE)); //data received?
 80013ca:	6893      	ldr	r3, [r2, #8]
 80013cc:	07db      	lsls	r3, r3, #31
 80013ce:	d5fc      	bpl.n	80013ca <MCP_reset+0x16>
  return (uint8_t)(READ_REG(SPIx->DR));
 80013d0:	68d3      	ldr	r3, [r2, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80013d2:	4b02      	ldr	r3, [pc, #8]	; (80013dc <MCP_reset+0x28>)
 80013d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d8:	619a      	str	r2, [r3, #24]
 80013da:	4770      	bx	lr
 80013dc:	48000400 	.word	0x48000400
 80013e0:	40003800 	.word	0x40003800

080013e4 <Wait_for_ADC_timeout_While_Datalog>:
	         }
}

void Wait_for_ADC_timeout_While_Datalog(void)   // During Timer_Interrupt for Data logging, Involved Volatile variables
{
	ADC_TimeOut_Count_Buf++;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <Wait_for_ADC_timeout_While_Datalog+0x1c>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	3201      	adds	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]
	if( ADC_TimeOut_Count_Buf > ADC_TimeOut_Limit_Buf) // 100ms= 48000*ADC_TimeOut_MS_value)
 80013ec:	6819      	ldr	r1, [r3, #0]
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <Wait_for_ADC_timeout_While_Datalog+0x20>)
 80013f0:	4291      	cmp	r1, r2
 80013f2:	d904      	bls.n	80013fe <Wait_for_ADC_timeout_While_Datalog+0x1a>
	         {
		ADC_TimeOut_Count_Buf=0;
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
		ADC_Error_Buf=1;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <Wait_for_ADC_timeout_While_Datalog+0x24>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
 80013fe:	4770      	bx	lr
 8001400:	200083e8 	.word	0x200083e8
 8001404:	00493e00 	.word	0x00493e00
 8001408:	200089a7 	.word	0x200089a7

0800140c <Wait_for_ADC_TimeOut_>:
	         }
}

void Wait_for_ADC_TimeOut_ (void)
{
	ADC_TimeOut_Count++;
 800140c:	4a06      	ldr	r2, [pc, #24]	; (8001428 <Wait_for_ADC_TimeOut_+0x1c>)
	if( ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 800140e:	4907      	ldr	r1, [pc, #28]	; (800142c <Wait_for_ADC_TimeOut_+0x20>)
	ADC_TimeOut_Count++;
 8001410:	6813      	ldr	r3, [r2, #0]
 8001412:	3301      	adds	r3, #1
	if( ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 8001414:	428b      	cmp	r3, r1
	         {
		ADC_TimeOut_Count=0;
 8001416:	bf83      	ittte	hi
 8001418:	2300      	movhi	r3, #0
 800141a:	6013      	strhi	r3, [r2, #0]
		ADC_Error=1;
 800141c:	4b04      	ldrhi	r3, [pc, #16]	; (8001430 <Wait_for_ADC_TimeOut_+0x24>)
	ADC_TimeOut_Count++;
 800141e:	6013      	strls	r3, [r2, #0]
		ADC_Error=1;
 8001420:	bf84      	itt	hi
 8001422:	2201      	movhi	r2, #1
 8001424:	701a      	strbhi	r2, [r3, #0]
 8001426:	4770      	bx	lr
 8001428:	200089a8 	.word	0x200089a8
 800142c:	00493e00 	.word	0x00493e00
 8001430:	2000899e 	.word	0x2000899e

08001434 <P_Activate_ADC3>:
{
 8001434:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8001436:	2300      	movs	r3, #0
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001438:	482c      	ldr	r0, [pc, #176]	; (80014ec <P_Activate_ADC3+0xb8>)
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / 100000) /10);
 800143e:	4a2c      	ldr	r2, [pc, #176]	; (80014f0 <P_Activate_ADC3+0xbc>)
 8001440:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001444:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001448:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 800144a:	6883      	ldr	r3, [r0, #8]
 800144c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001450:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	6083      	str	r3, [r0, #8]
 800145a:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <P_Activate_ADC3+0xc0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001462:	220a      	movs	r2, #10
 8001464:	4353      	muls	r3, r2
 8001466:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800146a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800146c:	9a01      	ldr	r2, [sp, #4]
 800146e:	2a00      	cmp	r2, #0
 8001470:	d12f      	bne.n	80014d2 <P_Activate_ADC3+0x9e>
  MODIFY_REG(ADCx->CR,
 8001472:	6883      	ldr	r3, [r0, #8]
    ADC_TimeOut_Count=0;
 8001474:	4d20      	ldr	r5, [pc, #128]	; (80014f8 <P_Activate_ADC3+0xc4>)
    ADC_Error=0;
 8001476:	4c21      	ldr	r4, [pc, #132]	; (80014fc <P_Activate_ADC3+0xc8>)
 8001478:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800147c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001480:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001484:	6083      	str	r3, [r0, #8]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001486:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
    ADC_TimeOut_Count=0;
 800148a:	602a      	str	r2, [r5, #0]
    ADC_Error=0;
 800148c:	7022      	strb	r2, [r4, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800148e:	6883      	ldr	r3, [r0, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC3) == 0) && !Error_preceding&& (ADC_Error==0))
 8001490:	2b00      	cmp	r3, #0
 8001492:	db04      	blt.n	800149e <P_Activate_ADC3+0x6a>
 8001494:	6933      	ldr	r3, [r6, #16]
 8001496:	0599      	lsls	r1, r3, #22
 8001498:	d401      	bmi.n	800149e <P_Activate_ADC3+0x6a>
 800149a:	7823      	ldrb	r3, [r4, #0]
 800149c:	b1e3      	cbz	r3, 80014d8 <P_Activate_ADC3+0xa4>
    wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES;   // ADC Delay calculations
 800149e:	2380      	movs	r3, #128	; 0x80
      wait_loop_index--;
 80014a0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80014a2:	9a01      	ldr	r2, [sp, #4]
 80014a4:	b9da      	cbnz	r2, 80014de <P_Activate_ADC3+0xaa>
  MODIFY_REG(ADCx->CR,
 80014a6:	6883      	ldr	r3, [r0, #8]
 80014a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6083      	str	r3, [r0, #8]
    ADC_TimeOut_Count=0;
 80014b6:	602a      	str	r2, [r5, #0]
    ADC_Error=0;
 80014b8:	7022      	strb	r2, [r4, #0]
 80014ba:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 80014be:	6803      	ldr	r3, [r0, #0]
    while ((LL_ADC_IsActiveFlag_ADRDY(ADC3) == 0)&& !Error_preceding&& (ADC_Error==0))
 80014c0:	07da      	lsls	r2, r3, #31
 80014c2:	d404      	bmi.n	80014ce <P_Activate_ADC3+0x9a>
 80014c4:	692b      	ldr	r3, [r5, #16]
 80014c6:	059b      	lsls	r3, r3, #22
 80014c8:	d401      	bmi.n	80014ce <P_Activate_ADC3+0x9a>
 80014ca:	7823      	ldrb	r3, [r4, #0]
 80014cc:	b153      	cbz	r3, 80014e4 <P_Activate_ADC3+0xb0>
}
 80014ce:	b002      	add	sp, #8
 80014d0:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 80014d2:	9b01      	ldr	r3, [sp, #4]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	e7c8      	b.n	800146a <P_Activate_ADC3+0x36>
  	  Wait_for_ADC_TimeOut_();
 80014d8:	f7ff ff98 	bl	800140c <Wait_for_ADC_TimeOut_>
 80014dc:	e7d7      	b.n	800148e <P_Activate_ADC3+0x5a>
      wait_loop_index--;
 80014de:	9b01      	ldr	r3, [sp, #4]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	e7dd      	b.n	80014a0 <P_Activate_ADC3+0x6c>
  	  Wait_for_ADC_TimeOut_();
 80014e4:	f7ff ff92 	bl	800140c <Wait_for_ADC_TimeOut_>
 80014e8:	e7e9      	b.n	80014be <P_Activate_ADC3+0x8a>
 80014ea:	bf00      	nop
 80014ec:	50040200 	.word	0x50040200
 80014f0:	000186a0 	.word	0x000186a0
 80014f4:	20000008 	.word	0x20000008
 80014f8:	200089a8 	.word	0x200089a8
 80014fc:	2000899e 	.word	0x2000899e

08001500 <P_Activate_ADC2>:
{
 8001500:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8001502:	2300      	movs	r3, #0
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001504:	482c      	ldr	r0, [pc, #176]	; (80015b8 <P_Activate_ADC2+0xb8>)
 8001506:	9301      	str	r3, [sp, #4]
 8001508:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / 100000) /10);
 800150a:	4a2c      	ldr	r2, [pc, #176]	; (80015bc <P_Activate_ADC2+0xbc>)
 800150c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001510:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001514:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8001516:	6883      	ldr	r3, [r0, #8]
 8001518:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800151c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	6083      	str	r3, [r0, #8]
 8001526:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <P_Activate_ADC2+0xc0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	fbb3 f3f2 	udiv	r3, r3, r2
 800152e:	220a      	movs	r2, #10
 8001530:	4353      	muls	r3, r2
 8001532:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001536:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8001538:	9a01      	ldr	r2, [sp, #4]
 800153a:	2a00      	cmp	r2, #0
 800153c:	d12f      	bne.n	800159e <P_Activate_ADC2+0x9e>
  MODIFY_REG(ADCx->CR,
 800153e:	6883      	ldr	r3, [r0, #8]
    ADC_TimeOut_Count=0;
 8001540:	4d20      	ldr	r5, [pc, #128]	; (80015c4 <P_Activate_ADC2+0xc4>)
    ADC_Error=0;
 8001542:	4c21      	ldr	r4, [pc, #132]	; (80015c8 <P_Activate_ADC2+0xc8>)
 8001544:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001548:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800154c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001550:	6083      	str	r3, [r0, #8]
 8001552:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
    ADC_TimeOut_Count=0;
 8001556:	602a      	str	r2, [r5, #0]
    ADC_Error=0;
 8001558:	7022      	strb	r2, [r4, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800155a:	6883      	ldr	r3, [r0, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC2) == 0) && !Error_preceding&& (ADC_Error==0))
 800155c:	2b00      	cmp	r3, #0
 800155e:	db04      	blt.n	800156a <P_Activate_ADC2+0x6a>
 8001560:	6933      	ldr	r3, [r6, #16]
 8001562:	0599      	lsls	r1, r3, #22
 8001564:	d401      	bmi.n	800156a <P_Activate_ADC2+0x6a>
 8001566:	7823      	ldrb	r3, [r4, #0]
 8001568:	b1e3      	cbz	r3, 80015a4 <P_Activate_ADC2+0xa4>
    wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES;   // ADC Delay calculations
 800156a:	2380      	movs	r3, #128	; 0x80
      wait_loop_index--;
 800156c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800156e:	9a01      	ldr	r2, [sp, #4]
 8001570:	b9da      	cbnz	r2, 80015aa <P_Activate_ADC2+0xaa>
  MODIFY_REG(ADCx->CR,
 8001572:	6883      	ldr	r3, [r0, #8]
 8001574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001578:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6083      	str	r3, [r0, #8]
    ADC_TimeOut_Count=0;
 8001582:	602a      	str	r2, [r5, #0]
    ADC_Error=0;
 8001584:	7022      	strb	r2, [r4, #0]
 8001586:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800158a:	6803      	ldr	r3, [r0, #0]
    while ((LL_ADC_IsActiveFlag_ADRDY(ADC2) == 0)&& !Error_preceding&& (ADC_Error==0))
 800158c:	07da      	lsls	r2, r3, #31
 800158e:	d404      	bmi.n	800159a <P_Activate_ADC2+0x9a>
 8001590:	692b      	ldr	r3, [r5, #16]
 8001592:	059b      	lsls	r3, r3, #22
 8001594:	d401      	bmi.n	800159a <P_Activate_ADC2+0x9a>
 8001596:	7823      	ldrb	r3, [r4, #0]
 8001598:	b153      	cbz	r3, 80015b0 <P_Activate_ADC2+0xb0>
}
 800159a:	b002      	add	sp, #8
 800159c:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 800159e:	9b01      	ldr	r3, [sp, #4]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	e7c8      	b.n	8001536 <P_Activate_ADC2+0x36>
  	  Wait_for_ADC_TimeOut_();
 80015a4:	f7ff ff32 	bl	800140c <Wait_for_ADC_TimeOut_>
 80015a8:	e7d7      	b.n	800155a <P_Activate_ADC2+0x5a>
      wait_loop_index--;
 80015aa:	9b01      	ldr	r3, [sp, #4]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	e7dd      	b.n	800156c <P_Activate_ADC2+0x6c>
  	  Wait_for_ADC_TimeOut_();
 80015b0:	f7ff ff2c 	bl	800140c <Wait_for_ADC_TimeOut_>
 80015b4:	e7e9      	b.n	800158a <P_Activate_ADC2+0x8a>
 80015b6:	bf00      	nop
 80015b8:	50040100 	.word	0x50040100
 80015bc:	000186a0 	.word	0x000186a0
 80015c0:	20000008 	.word	0x20000008
 80015c4:	200089a8 	.word	0x200089a8
 80015c8:	2000899e 	.word	0x2000899e

080015cc <P_Activate_ADC1>:
{
 80015cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015d2:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <P_Activate_ADC1+0xbc>)
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / 100000) /10);
 80015d4:	492d      	ldr	r1, [pc, #180]	; (800168c <P_Activate_ADC1+0xc0>)
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 80015dc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80015e0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80015e8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80015ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	4a27      	ldr	r2, [pc, #156]	; (8001690 <P_Activate_ADC1+0xc4>)
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	fbb2 f2f1 	udiv	r2, r2, r1
 80015fa:	210a      	movs	r1, #10
 80015fc:	434a      	muls	r2, r1
 80015fe:	fbb2 f2f1 	udiv	r2, r2, r1
      wait_loop_index--;
 8001602:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 8001604:	9901      	ldr	r1, [sp, #4]
 8001606:	2900      	cmp	r1, #0
 8001608:	d132      	bne.n	8001670 <P_Activate_ADC1+0xa4>
  MODIFY_REG(ADCx->CR,
 800160a:	689a      	ldr	r2, [r3, #8]
    ADC_TimeOut_Count=0;
 800160c:	4c21      	ldr	r4, [pc, #132]	; (8001694 <P_Activate_ADC1+0xc8>)
    ADC_Error=0;
 800160e:	4822      	ldr	r0, [pc, #136]	; (8001698 <P_Activate_ADC1+0xcc>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8001610:	4d1d      	ldr	r5, [pc, #116]	; (8001688 <P_Activate_ADC1+0xbc>)
  MODIFY_REG(ADCx->CR,
 8001612:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8001616:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800161a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
    ADC_TimeOut_Count=0;
 8001624:	6021      	str	r1, [r4, #0]
    ADC_Error=0;
 8001626:	7001      	strb	r1, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8001628:	68ab      	ldr	r3, [r5, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC1) == 0) && !Error_preceding&& (ADC_Error==0))
 800162a:	2b00      	cmp	r3, #0
 800162c:	db04      	blt.n	8001638 <P_Activate_ADC1+0x6c>
 800162e:	6933      	ldr	r3, [r6, #16]
 8001630:	0599      	lsls	r1, r3, #22
 8001632:	d401      	bmi.n	8001638 <P_Activate_ADC1+0x6c>
 8001634:	7803      	ldrb	r3, [r0, #0]
 8001636:	b1f3      	cbz	r3, 8001676 <P_Activate_ADC1+0xaa>
    wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES;   // ADC Delay calculations
 8001638:	2380      	movs	r3, #128	; 0x80
      wait_loop_index--;
 800163a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800163c:	9901      	ldr	r1, [sp, #4]
 800163e:	b9e9      	cbnz	r1, 800167c <P_Activate_ADC1+0xb0>
  MODIFY_REG(ADCx->CR,
 8001640:	4a11      	ldr	r2, [pc, #68]	; (8001688 <P_Activate_ADC1+0xbc>)
 8001642:	6893      	ldr	r3, [r2, #8]
 8001644:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001648:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6093      	str	r3, [r2, #8]
 8001652:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
    ADC_TimeOut_Count=0;
 8001656:	6021      	str	r1, [r4, #0]
    ADC_Error=0;
 8001658:	7001      	strb	r1, [r0, #0]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800165a:	4614      	mov	r4, r2
 800165c:	6823      	ldr	r3, [r4, #0]
    while ((LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)&& !Error_preceding&& (ADC_Error==0))
 800165e:	07da      	lsls	r2, r3, #31
 8001660:	d404      	bmi.n	800166c <P_Activate_ADC1+0xa0>
 8001662:	692b      	ldr	r3, [r5, #16]
 8001664:	059b      	lsls	r3, r3, #22
 8001666:	d401      	bmi.n	800166c <P_Activate_ADC1+0xa0>
 8001668:	7803      	ldrb	r3, [r0, #0]
 800166a:	b153      	cbz	r3, 8001682 <P_Activate_ADC1+0xb6>
}
 800166c:	b002      	add	sp, #8
 800166e:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 8001670:	9a01      	ldr	r2, [sp, #4]
 8001672:	3a01      	subs	r2, #1
 8001674:	e7c5      	b.n	8001602 <P_Activate_ADC1+0x36>
  	  Wait_for_ADC_TimeOut_();
 8001676:	f7ff fec9 	bl	800140c <Wait_for_ADC_TimeOut_>
 800167a:	e7d5      	b.n	8001628 <P_Activate_ADC1+0x5c>
      wait_loop_index--;
 800167c:	9b01      	ldr	r3, [sp, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	e7db      	b.n	800163a <P_Activate_ADC1+0x6e>
  	  Wait_for_ADC_TimeOut_();
 8001682:	f7ff fec3 	bl	800140c <Wait_for_ADC_TimeOut_>
 8001686:	e7e9      	b.n	800165c <P_Activate_ADC1+0x90>
 8001688:	50040000 	.word	0x50040000
 800168c:	000186a0 	.word	0x000186a0
 8001690:	20000008 	.word	0x20000008
 8001694:	200089a8 	.word	0x200089a8
 8001698:	2000899e 	.word	0x2000899e

0800169c <P_ADC1_conf_strain>:
  SET_BIT(RCC->AHB2RSTR, Periphs);
 800169c:	4b4f      	ldr	r3, [pc, #316]	; (80017dc <P_ADC1_conf_strain+0x140>)
 800169e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
{
 80016a4:	b570      	push	{r4, r5, r6, lr}
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 80016a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016aa:	4d4d      	ldr	r5, [pc, #308]	; (80017e0 <P_ADC1_conf_strain+0x144>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 80016ac:	4c4d      	ldr	r4, [pc, #308]	; (80017e4 <P_ADC1_conf_strain+0x148>)
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);   // FSR1=PC2=Ch3=ADC1
 80016ae:	4e4e      	ldr	r6, [pc, #312]	; (80017e8 <P_ADC1_conf_strain+0x14c>)
 80016b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016b4:	62da      	str	r2, [r3, #44]	; 0x2c
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 80016b6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016ba:	f7ff fca7 	bl	800100c <LL_AHB2_GRP1_EnableClock>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016be:	68ab      	ldr	r3, [r5, #8]
 80016c0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 80016ca:	68e3      	ldr	r3, [r4, #12]
 80016cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d0:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 80016d2:	68e3      	ldr	r3, [r4, #12]
 80016d4:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 80016d8:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 80016da:	68e3      	ldr	r3, [r4, #12]
 80016dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016e0:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 80016e2:	68e3      	ldr	r3, [r4, #12]
 80016e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016e8:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80016ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016ec:	f023 030f 	bic.w	r3, r3, #15
 80016f0:	6323      	str	r3, [r4, #48]	; 0x30
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);   // FSR1=PC2=Ch3=ADC1
 80016f2:	4620      	mov	r0, r4
 80016f4:	4632      	mov	r2, r6
 80016f6:	2106      	movs	r1, #6
 80016f8:	f7ff fcc8 	bl	800108c <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_640CYCLES_5);
 80016fc:	4620      	mov	r0, r4
 80016fe:	4631      	mov	r1, r6
 8001700:	2207      	movs	r2, #7
 8001702:	f7ff fce1 	bl	80010c8 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001706:	68ab      	ldr	r3, [r5, #8]
    LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8001708:	4e38      	ldr	r6, [pc, #224]	; (80017ec <P_ADC1_conf_strain+0x150>)
 800170a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 800170e:	f504 7480 	add.w	r4, r4, #256	; 0x100
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001716:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8001718:	68e3      	ldr	r3, [r4, #12]
 800171a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171e:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 8001720:	68e3      	ldr	r3, [r4, #12]
 8001722:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8001726:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 8001728:	68e3      	ldr	r3, [r4, #12]
 800172a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800172e:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 8001730:	68e3      	ldr	r3, [r4, #12]
 8001732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001736:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001738:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800173a:	f023 030f 	bic.w	r3, r3, #15
 800173e:	6323      	str	r3, [r4, #48]	; 0x30
 8001740:	4632      	mov	r2, r6
 8001742:	4620      	mov	r0, r4
 8001744:	2106      	movs	r1, #6
 8001746:	f7ff fca1 	bl	800108c <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_640CYCLES_5); // FSR2=PC3=Ch4=ADC2
 800174a:	4631      	mov	r1, r6
 800174c:	4620      	mov	r0, r4
 800174e:	2207      	movs	r2, #7
 8001750:	f7ff fcba 	bl	80010c8 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001754:	68ab      	ldr	r3, [r5, #8]
 8001756:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800175a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175e:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8001760:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8001764:	4d22      	ldr	r5, [pc, #136]	; (80017f0 <P_ADC1_conf_strain+0x154>)
 8001766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 800176e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8001772:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8001776:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 800177a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800177e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001782:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 8001786:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800178a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800178e:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001792:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8001796:	f023 030f 	bic.w	r3, r3, #15
 800179a:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 800179e:	f504 7480 	add.w	r4, r4, #256	; 0x100
 80017a2:	462a      	mov	r2, r5
 80017a4:	4620      	mov	r0, r4
 80017a6:	2106      	movs	r1, #6
 80017a8:	f7ff fc70 	bl	800108c <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_640CYCLES_5); // Load1=PC1=Ch2
 80017ac:	4629      	mov	r1, r5
    LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80017ae:	4d11      	ldr	r5, [pc, #68]	; (80017f4 <P_ADC1_conf_strain+0x158>)
    LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_640CYCLES_5); // Load1=PC1=Ch2
 80017b0:	4620      	mov	r0, r4
 80017b2:	2207      	movs	r2, #7
 80017b4:	f7ff fc88 	bl	80010c8 <LL_ADC_SetChannelSamplingTime>
    LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80017b8:	462a      	mov	r2, r5
 80017ba:	4620      	mov	r0, r4
 80017bc:	2106      	movs	r1, #6
 80017be:	f7ff fc65 	bl	800108c <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_640CYCLES_5); // Load2=PC0=Ch1
 80017c2:	4629      	mov	r1, r5
 80017c4:	4620      	mov	r0, r4
 80017c6:	2207      	movs	r2, #7
 80017c8:	f7ff fc7e 	bl	80010c8 <LL_ADC_SetChannelSamplingTime>
    P_Activate_ADC3();
 80017cc:	f7ff fe32 	bl	8001434 <P_Activate_ADC3>
    P_Activate_ADC2();
 80017d0:	f7ff fe96 	bl	8001500 <P_Activate_ADC2>
}
 80017d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    P_Activate_ADC1();
 80017d8:	f7ff bef8 	b.w	80015cc <P_Activate_ADC1>
 80017dc:	40021000 	.word	0x40021000
 80017e0:	50040300 	.word	0x50040300
 80017e4:	50040000 	.word	0x50040000
 80017e8:	0c900008 	.word	0x0c900008
 80017ec:	10c00010 	.word	0x10c00010
 80017f0:	08600004 	.word	0x08600004
 80017f4:	04300002 	.word	0x04300002

080017f8 <P_ADC_Sensor_GPIO_Init>:
{
 80017f8:	b510      	push	{r4, lr}
LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_2, LL_GPIO_MODE_ANALOG);
 80017fa:	4c16      	ldr	r4, [pc, #88]	; (8001854 <P_ADC_Sensor_GPIO_Init+0x5c>)
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80017fc:	2004      	movs	r0, #4
 80017fe:	f7ff fc05 	bl	800100c <LL_AHB2_GRP1_EnableClock>
LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_2, LL_GPIO_MODE_ANALOG);
 8001802:	4620      	mov	r0, r4
 8001804:	2203      	movs	r2, #3
 8001806:	2104      	movs	r1, #4
 8001808:	f7ff fc2a 	bl	8001060 <LL_GPIO_SetPinMode>
  SET_BIT(GPIOx->ASCR, PinMask);
 800180c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	62e3      	str	r3, [r4, #44]	; 0x2c
LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_3, LL_GPIO_MODE_ANALOG);
 8001814:	4620      	mov	r0, r4
 8001816:	2203      	movs	r2, #3
 8001818:	2108      	movs	r1, #8
 800181a:	f7ff fc21 	bl	8001060 <LL_GPIO_SetPinMode>
 800181e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	62e3      	str	r3, [r4, #44]	; 0x2c
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_1, LL_GPIO_MODE_ANALOG);
 8001826:	4620      	mov	r0, r4
 8001828:	2203      	movs	r2, #3
 800182a:	2102      	movs	r1, #2
 800182c:	f7ff fc18 	bl	8001060 <LL_GPIO_SetPinMode>
 8001830:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001832:	f043 0302 	orr.w	r3, r3, #2
 8001836:	62e3      	str	r3, [r4, #44]	; 0x2c
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_0, LL_GPIO_MODE_ANALOG);
 8001838:	4620      	mov	r0, r4
 800183a:	2203      	movs	r2, #3
 800183c:	2101      	movs	r1, #1
 800183e:	f7ff fc0f 	bl	8001060 <LL_GPIO_SetPinMode>
 8001842:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800184a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  P_ADC1_conf_strain();
 800184e:	f7ff bf25 	b.w	800169c <P_ADC1_conf_strain>
 8001852:	bf00      	nop
 8001854:	48000800 	.word	0x48000800

08001858 <WriteReg3>:

LL_GPIO_SetOutputPin(MPU_CS_GPIO_PORT, MPU_CS_PIN); // PA4 CS SET Active Low
return temp_val;
}

unsigned int WriteReg3(uint8_t adress, uint8_t data){
 8001858:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(GPIOx->BRR, PinMask);
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <WriteReg3+0x48>)
 800185c:	2201      	movs	r2, #1
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
 8001860:	4605      	mov	r5, r0
	 unsigned int temp_val;
LL_GPIO_ResetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN); // PA4 CS RESET Active Low // for IMU5 change here
delay_us(10);
 8001862:	200a      	movs	r0, #10
unsigned int WriteReg3(uint8_t adress, uint8_t data){
 8001864:	460c      	mov	r4, r1
delay_us(10);
 8001866:	f001 f929 	bl	8002abc <delay_us>
while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 800186a:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <WriteReg3+0x4c>)
 800186c:	4613      	mov	r3, r2
 800186e:	6891      	ldr	r1, [r2, #8]
 8001870:	0789      	lsls	r1, r1, #30
 8001872:	d5fc      	bpl.n	800186e <WriteReg3+0x16>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001874:	7315      	strb	r5, [r2, #12]
LL_SPI_TransmitData8(SPI3,adress);
while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	07d0      	lsls	r0, r2, #31
 800187a:	d5fc      	bpl.n	8001876 <WriteReg3+0x1e>
  return (uint8_t)(READ_REG(SPIx->DR));
 800187c:	68da      	ldr	r2, [r3, #12]
LL_SPI_ReceiveData8(SPI3);

while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	0791      	lsls	r1, r2, #30
 8001882:	d5fc      	bpl.n	800187e <WriteReg3+0x26>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001884:	731c      	strb	r4, [r3, #12]
LL_SPI_TransmitData8(SPI3,data);
while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <WriteReg3+0x4c>)
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	07d2      	lsls	r2, r2, #31
 800188c:	d5fc      	bpl.n	8001888 <WriteReg3+0x30>
temp_val=LL_SPI_ReceiveData8(SPI3);
delay_us(5);
 800188e:	2005      	movs	r0, #5
  return (uint8_t)(READ_REG(SPIx->DR));
 8001890:	68dc      	ldr	r4, [r3, #12]
 8001892:	f001 f913 	bl	8002abc <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001896:	4b02      	ldr	r3, [pc, #8]	; (80018a0 <WriteReg3+0x48>)
 8001898:	2201      	movs	r2, #1
 800189a:	619a      	str	r2, [r3, #24]
LL_GPIO_SetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN); // PA4 CS SET Active Low // for IMU5 change here
return temp_val;
}
 800189c:	b2e0      	uxtb	r0, r4
 800189e:	bd38      	pop	{r3, r4, r5, pc}
 80018a0:	48001c00 	.word	0x48001c00
 80018a4:	40003c00 	.word	0x40003c00

080018a8 <WriteReg3_imu5>:

unsigned int WriteReg3_imu5(uint8_t adress, uint8_t data){
 80018a8:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(GPIOx->BRR, PinMask);
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <WriteReg3_imu5+0x48>)
 80018ac:	2202      	movs	r2, #2
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28
 80018b0:	4605      	mov	r5, r0
	 unsigned int temp_val;
LL_GPIO_ResetOutputPin(SPI3_CS_GPIO_PORT, SPI3_IMU5_CS_Pin); // PA4 CS RESET Active Low // for IMU5 changed here
delay_us(10);
 80018b2:	200a      	movs	r0, #10
unsigned int WriteReg3_imu5(uint8_t adress, uint8_t data){
 80018b4:	460c      	mov	r4, r1
delay_us(10);
 80018b6:	f001 f901 	bl	8002abc <delay_us>
while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 80018ba:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <WriteReg3_imu5+0x4c>)
 80018bc:	4613      	mov	r3, r2
 80018be:	6891      	ldr	r1, [r2, #8]
 80018c0:	0789      	lsls	r1, r1, #30
 80018c2:	d5fc      	bpl.n	80018be <WriteReg3_imu5+0x16>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 80018c4:	7315      	strb	r5, [r2, #12]
LL_SPI_TransmitData8(SPI3,adress);
while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	07d0      	lsls	r0, r2, #31
 80018ca:	d5fc      	bpl.n	80018c6 <WriteReg3_imu5+0x1e>
  return (uint8_t)(READ_REG(SPIx->DR));
 80018cc:	68da      	ldr	r2, [r3, #12]
LL_SPI_ReceiveData8(SPI3);

while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	0791      	lsls	r1, r2, #30
 80018d2:	d5fc      	bpl.n	80018ce <WriteReg3_imu5+0x26>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 80018d4:	731c      	strb	r4, [r3, #12]
LL_SPI_TransmitData8(SPI3,data);
while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <WriteReg3_imu5+0x4c>)
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	07d2      	lsls	r2, r2, #31
 80018dc:	d5fc      	bpl.n	80018d8 <WriteReg3_imu5+0x30>
temp_val=LL_SPI_ReceiveData8(SPI3);
delay_us(5);
 80018de:	2005      	movs	r0, #5
  return (uint8_t)(READ_REG(SPIx->DR));
 80018e0:	68dc      	ldr	r4, [r3, #12]
 80018e2:	f001 f8eb 	bl	8002abc <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80018e6:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <WriteReg3_imu5+0x48>)
 80018e8:	2202      	movs	r2, #2
 80018ea:	619a      	str	r2, [r3, #24]
LL_GPIO_SetOutputPin(SPI3_IMU5_CS_GPIO_Port, SPI3_IMU5_CS_Pin); // PA4 CS SET Active Low // for IMU5 changed here
return temp_val;
}
 80018ec:	b2e0      	uxtb	r0, r4
 80018ee:	bd38      	pop	{r3, r4, r5, pc}
 80018f0:	48001c00 	.word	0x48001c00
 80018f4:	40003c00 	.word	0x40003c00

080018f8 <WriteReg1>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80018f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018fc:	f44f 7280 	mov.w	r2, #256	; 0x100

unsigned int WriteReg1(uint8_t adress, uint8_t data){
 8001900:	b510      	push	{r4, lr}
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
	 unsigned int temp_val;
LL_GPIO_ResetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);

while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001904:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <WriteReg1+0x40>)
 8001906:	4613      	mov	r3, r2
 8001908:	6894      	ldr	r4, [r2, #8]
 800190a:	07a4      	lsls	r4, r4, #30
 800190c:	d5fc      	bpl.n	8001908 <WriteReg1+0x10>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 800190e:	7310      	strb	r0, [r2, #12]
LL_SPI_TransmitData8(SPI1,adress);
while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	07d4      	lsls	r4, r2, #31
 8001914:	d5fc      	bpl.n	8001910 <WriteReg1+0x18>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001916:	68da      	ldr	r2, [r3, #12]
LL_SPI_ReceiveData8(SPI1);

while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	0790      	lsls	r0, r2, #30
 800191c:	d5fc      	bpl.n	8001918 <WriteReg1+0x20>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 800191e:	7319      	strb	r1, [r3, #12]
LL_SPI_TransmitData8(SPI1,data);
while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <WriteReg1+0x40>)
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	07d2      	lsls	r2, r2, #31
 8001926:	d5fc      	bpl.n	8001922 <WriteReg1+0x2a>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001928:	68d8      	ldr	r0, [r3, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800192a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800192e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001932:	619a      	str	r2, [r3, #24]
temp_val=LL_SPI_ReceiveData8(SPI1);

LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);
return temp_val;
}
 8001934:	b2c0      	uxtb	r0, r0
 8001936:	bd10      	pop	{r4, pc}
 8001938:	40013000 	.word	0x40013000

0800193c <WriteReg1_imu2>:
  WRITE_REG(GPIOx->BRR, PinMask);
 800193c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001940:	f44f 4200 	mov.w	r2, #32768	; 0x8000

unsigned int WriteReg1_imu2(uint8_t adress, uint8_t data){
 8001944:	b510      	push	{r4, lr}
 8001946:	629a      	str	r2, [r3, #40]	; 0x28
	 unsigned int temp_val;
LL_GPIO_ResetOutputPin(SPI1_IMU2_CS_GPIO_Port, SPI1_IMU2_CS_Pin);

while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001948:	4a0c      	ldr	r2, [pc, #48]	; (800197c <WriteReg1_imu2+0x40>)
 800194a:	4613      	mov	r3, r2
 800194c:	6894      	ldr	r4, [r2, #8]
 800194e:	07a4      	lsls	r4, r4, #30
 8001950:	d5fc      	bpl.n	800194c <WriteReg1_imu2+0x10>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001952:	7310      	strb	r0, [r2, #12]
LL_SPI_TransmitData8(SPI1,adress);
while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	07d4      	lsls	r4, r2, #31
 8001958:	d5fc      	bpl.n	8001954 <WriteReg1_imu2+0x18>
  return (uint8_t)(READ_REG(SPIx->DR));
 800195a:	68da      	ldr	r2, [r3, #12]
LL_SPI_ReceiveData8(SPI1);

while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	0790      	lsls	r0, r2, #30
 8001960:	d5fc      	bpl.n	800195c <WriteReg1_imu2+0x20>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001962:	7319      	strb	r1, [r3, #12]
LL_SPI_TransmitData8(SPI1,data);
while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <WriteReg1_imu2+0x40>)
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	07d2      	lsls	r2, r2, #31
 800196a:	d5fc      	bpl.n	8001966 <WriteReg1_imu2+0x2a>
  return (uint8_t)(READ_REG(SPIx->DR));
 800196c:	68d8      	ldr	r0, [r3, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800196e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001972:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001976:	619a      	str	r2, [r3, #24]
temp_val=LL_SPI_ReceiveData8(SPI1);

LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_IMU2_CS_Pin);
return temp_val;
}
 8001978:	b2c0      	uxtb	r0, r0
 800197a:	bd10      	pop	{r4, pc}
 800197c:	40013000 	.word	0x40013000

08001980 <MCP_write>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <MCP_write+0x58>)
 8001982:	f44f 5280 	mov.w	r2, #4096	; 0x1000

//void MCP_write(uint8_t adress, uint8_t data)
void MCP_write(int adress, int data){
 8001986:	b510      	push	{r4, lr}
 8001988:	629a      	str	r2, [r3, #40]	; 0x28
LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_PORT, SPI2_CS_PIN);

while(!(SPI2->SR & SPI_SR_TXE)); //transmit buffer empty?
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <MCP_write+0x5c>)
 800198c:	461a      	mov	r2, r3
 800198e:	689c      	ldr	r4, [r3, #8]
 8001990:	07a4      	lsls	r4, r4, #30
 8001992:	d5fc      	bpl.n	800198e <MCP_write+0xe>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001994:	2402      	movs	r4, #2
 8001996:	731c      	strb	r4, [r3, #12]
LL_SPI_TransmitData8(SPI2,0x02);
while(!(SPI2->SR & SPI_SR_RXNE)); //data received?
 8001998:	6893      	ldr	r3, [r2, #8]
 800199a:	07db      	lsls	r3, r3, #31
 800199c:	d5fc      	bpl.n	8001998 <MCP_write+0x18>
  return (uint8_t)(READ_REG(SPIx->DR));
 800199e:	68d3      	ldr	r3, [r2, #12]
LL_SPI_ReceiveData8(SPI2);


while(!(SPI2->SR & SPI_SR_TXE)); //transmit buffer empty?
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <MCP_write+0x5c>)
 80019a2:	461a      	mov	r2, r3
 80019a4:	689c      	ldr	r4, [r3, #8]
 80019a6:	07a4      	lsls	r4, r4, #30
 80019a8:	d5fc      	bpl.n	80019a4 <MCP_write+0x24>
LL_SPI_TransmitData8(SPI2,adress);
 80019aa:	b2c0      	uxtb	r0, r0
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 80019ac:	7318      	strb	r0, [r3, #12]
while(!(SPI2->SR & SPI_SR_RXNE)); //data received?
 80019ae:	6893      	ldr	r3, [r2, #8]
 80019b0:	07dc      	lsls	r4, r3, #31
 80019b2:	d5fc      	bpl.n	80019ae <MCP_write+0x2e>
  return (uint8_t)(READ_REG(SPIx->DR));
 80019b4:	68d3      	ldr	r3, [r2, #12]
LL_SPI_ReceiveData8(SPI2);

while(!(SPI2->SR & SPI_SR_TXE)); //transmit buffer empty?
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <MCP_write+0x5c>)
 80019b8:	461a      	mov	r2, r3
 80019ba:	6898      	ldr	r0, [r3, #8]
 80019bc:	0780      	lsls	r0, r0, #30
 80019be:	d5fc      	bpl.n	80019ba <MCP_write+0x3a>
LL_SPI_TransmitData8(SPI2,data);
 80019c0:	b2c9      	uxtb	r1, r1
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 80019c2:	7319      	strb	r1, [r3, #12]
while(!(SPI2->SR & SPI_SR_RXNE)); //data received?
 80019c4:	6893      	ldr	r3, [r2, #8]
 80019c6:	07db      	lsls	r3, r3, #31
 80019c8:	d5fc      	bpl.n	80019c4 <MCP_write+0x44>
  return (uint8_t)(READ_REG(SPIx->DR));
 80019ca:	68d3      	ldr	r3, [r2, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019cc:	4b02      	ldr	r3, [pc, #8]	; (80019d8 <MCP_write+0x58>)
 80019ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019d2:	619a      	str	r2, [r3, #24]
 80019d4:	bd10      	pop	{r4, pc}
 80019d6:	bf00      	nop
 80019d8:	48000400 	.word	0x48000400
 80019dc:	40003800 	.word	0x40003800

080019e0 <ReadRegs1>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80019e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);  // PC4 CS SET Active Low

}

void ReadRegs1( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
 80019e4:	b530      	push	{r4, r5, lr}
 80019e6:	f44f 7480 	mov.w	r4, #256	; 0x100
 80019ea:	629c      	str	r4, [r3, #40]	; 0x28
	unsigned int  i = 0;
	LL_GPIO_ResetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN); // PA4 CS RESET Active Low

	while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 80019ec:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <ReadRegs1+0x50>)
 80019ee:	461c      	mov	r4, r3
 80019f0:	689d      	ldr	r5, [r3, #8]
 80019f2:	07ad      	lsls	r5, r5, #30
 80019f4:	d5fc      	bpl.n	80019f0 <ReadRegs1+0x10>
	LL_SPI_TransmitData8(SPI1,(ReadAddr | 0x80));  // (Starting Address 0x22 | 0x80); MSB is '1' for 0x80, next 7 bit Address of register to write 0x22
 80019f6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 80019fa:	7318      	strb	r0, [r3, #12]
	while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 80019fc:	68a3      	ldr	r3, [r4, #8]
 80019fe:	07db      	lsls	r3, r3, #31
 8001a00:	d5fc      	bpl.n	80019fc <ReadRegs1+0x1c>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001a02:	68e3      	ldr	r3, [r4, #12]
	LL_SPI_ReceiveData8(SPI1);

	for (i = 0; i < Bytes; i++)
	{
			  while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <ReadRegs1+0x50>)
 8001a06:	440a      	add	r2, r1
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001a08:	2000      	movs	r0, #0
	for (i = 0; i < Bytes; i++)
 8001a0a:	4291      	cmp	r1, r2
 8001a0c:	d105      	bne.n	8001a1a <ReadRegs1+0x3a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a16:	619a      	str	r2, [r3, #24]
 8001a18:	bd30      	pop	{r4, r5, pc}
			  while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001a1a:	689c      	ldr	r4, [r3, #8]
 8001a1c:	07a5      	lsls	r5, r4, #30
 8001a1e:	d5fc      	bpl.n	8001a1a <ReadRegs1+0x3a>
 8001a20:	7318      	strb	r0, [r3, #12]
			  LL_SPI_TransmitData8(SPI1,0x00);

				while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8001a22:	689c      	ldr	r4, [r3, #8]
 8001a24:	07e4      	lsls	r4, r4, #31
 8001a26:	d5fc      	bpl.n	8001a22 <ReadRegs1+0x42>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001a28:	68dc      	ldr	r4, [r3, #12]
 8001a2a:	f801 4b01 	strb.w	r4, [r1], #1
 8001a2e:	e7ec      	b.n	8001a0a <ReadRegs1+0x2a>
 8001a30:	40013000 	.word	0x40013000

08001a34 <ReadRegs1_imu2>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001a34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000


}

void ReadRegs1_imu2( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
 8001a38:	b530      	push	{r4, r5, lr}
 8001a3a:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8001a3e:	629c      	str	r4, [r3, #40]	; 0x28
	unsigned int  i = 0;
	LL_GPIO_ResetOutputPin(SPI1_IMU2_CS_GPIO_Port, SPI1_IMU2_CS_Pin); // PA4 CS RESET Active Low

	while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <ReadRegs1_imu2+0x50>)
 8001a42:	461c      	mov	r4, r3
 8001a44:	689d      	ldr	r5, [r3, #8]
 8001a46:	07ad      	lsls	r5, r5, #30
 8001a48:	d5fc      	bpl.n	8001a44 <ReadRegs1_imu2+0x10>
	LL_SPI_TransmitData8(SPI1,(ReadAddr | 0x80));  // (Starting Address 0x22 | 0x80); MSB is '1' for 0x80, next 7 bit Address of register to write 0x22
 8001a4a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001a4e:	7318      	strb	r0, [r3, #12]
	while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8001a50:	68a3      	ldr	r3, [r4, #8]
 8001a52:	07db      	lsls	r3, r3, #31
 8001a54:	d5fc      	bpl.n	8001a50 <ReadRegs1_imu2+0x1c>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001a56:	68e3      	ldr	r3, [r4, #12]
	LL_SPI_ReceiveData8(SPI1);

	for (i = 0; i < Bytes; i++)
	{
			  while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <ReadRegs1_imu2+0x50>)
 8001a5a:	440a      	add	r2, r1
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001a5c:	2000      	movs	r0, #0
	for (i = 0; i < Bytes; i++)
 8001a5e:	4291      	cmp	r1, r2
 8001a60:	d105      	bne.n	8001a6e <ReadRegs1_imu2+0x3a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a6a:	619a      	str	r2, [r3, #24]
 8001a6c:	bd30      	pop	{r4, r5, pc}
			  while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001a6e:	689c      	ldr	r4, [r3, #8]
 8001a70:	07a5      	lsls	r5, r4, #30
 8001a72:	d5fc      	bpl.n	8001a6e <ReadRegs1_imu2+0x3a>
 8001a74:	7318      	strb	r0, [r3, #12]
			  LL_SPI_TransmitData8(SPI1,0x00);

				while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8001a76:	689c      	ldr	r4, [r3, #8]
 8001a78:	07e4      	lsls	r4, r4, #31
 8001a7a:	d5fc      	bpl.n	8001a76 <ReadRegs1_imu2+0x42>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001a7c:	68dc      	ldr	r4, [r3, #12]
 8001a7e:	f801 4b01 	strb.w	r4, [r1], #1
 8001a82:	e7ec      	b.n	8001a5e <ReadRegs1_imu2+0x2a>
 8001a84:	40013000 	.word	0x40013000

08001a88 <ReadRegs3>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <ReadRegs3+0x5c>)


}

void ReadRegs3( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
 8001a8a:	b570      	push	{r4, r5, r6, lr}
 8001a8c:	4615      	mov	r5, r2
 8001a8e:	2201      	movs	r2, #1
 8001a90:	629a      	str	r2, [r3, #40]	; 0x28
 8001a92:	4606      	mov	r6, r0
	unsigned int  i = 0;
	LL_GPIO_ResetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN); // PA4 CS RESET Active Low // change here for IMU5
	delay_us(10);
 8001a94:	200a      	movs	r0, #10
{
 8001a96:	460c      	mov	r4, r1
	delay_us(10);
 8001a98:	f001 f810 	bl	8002abc <delay_us>
	while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <ReadRegs3+0x60>)
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	6899      	ldr	r1, [r3, #8]
 8001aa2:	0789      	lsls	r1, r1, #30
 8001aa4:	d5fc      	bpl.n	8001aa0 <ReadRegs3+0x18>
	LL_SPI_TransmitData8(SPI3,(ReadAddr | 0x80));  // (Starting Address 0x22 | 0x80); MSB is '1' for 0x80, next 7 bit Address of register to write 0x22
 8001aa6:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001aaa:	731e      	strb	r6, [r3, #12]
	while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8001aac:	6893      	ldr	r3, [r2, #8]
 8001aae:	07de      	lsls	r6, r3, #31
 8001ab0:	d5fc      	bpl.n	8001aac <ReadRegs3+0x24>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001ab2:	68d3      	ldr	r3, [r2, #12]
	LL_SPI_ReceiveData8(SPI3);

	for (i = 0; i < Bytes; i++)
	{
			  while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <ReadRegs3+0x60>)
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	4425      	add	r5, r4
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001aba:	2200      	movs	r2, #0
	for (i = 0; i < Bytes; i++)
 8001abc:	42a9      	cmp	r1, r5
 8001abe:	d106      	bne.n	8001ace <ReadRegs3+0x46>

				while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
				ReadBuf[i]= LL_SPI_ReceiveData8(SPI3);

		}
	delay_us(5);
 8001ac0:	2005      	movs	r0, #5
 8001ac2:	f000 fffb 	bl	8002abc <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <ReadRegs3+0x5c>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	619a      	str	r2, [r3, #24]
 8001acc:	bd70      	pop	{r4, r5, r6, pc}
			  while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001ace:	6898      	ldr	r0, [r3, #8]
 8001ad0:	0784      	lsls	r4, r0, #30
 8001ad2:	d5fc      	bpl.n	8001ace <ReadRegs3+0x46>
 8001ad4:	731a      	strb	r2, [r3, #12]
				while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8001ad6:	6898      	ldr	r0, [r3, #8]
 8001ad8:	07c0      	lsls	r0, r0, #31
 8001ada:	d5fc      	bpl.n	8001ad6 <ReadRegs3+0x4e>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001adc:	68d8      	ldr	r0, [r3, #12]
 8001ade:	f801 0b01 	strb.w	r0, [r1], #1
 8001ae2:	e7eb      	b.n	8001abc <ReadRegs3+0x34>
 8001ae4:	48001c00 	.word	0x48001c00
 8001ae8:	40003c00 	.word	0x40003c00

08001aec <ReadRegs3_imu5>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <ReadRegs3_imu5+0x5c>)


}

void ReadRegs3_imu5( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
 8001aee:	b570      	push	{r4, r5, r6, lr}
 8001af0:	4615      	mov	r5, r2
 8001af2:	2202      	movs	r2, #2
 8001af4:	629a      	str	r2, [r3, #40]	; 0x28
 8001af6:	4606      	mov	r6, r0
	unsigned int  i = 0;
	LL_GPIO_ResetOutputPin(SPI3_IMU5_CS_GPIO_Port, SPI3_IMU5_CS_Pin); // PA4 CS RESET Active Low // change here for IMU5
	delay_us(10);
 8001af8:	200a      	movs	r0, #10
{
 8001afa:	460c      	mov	r4, r1
	delay_us(10);
 8001afc:	f000 ffde 	bl	8002abc <delay_us>
	while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <ReadRegs3_imu5+0x60>)
 8001b02:	461a      	mov	r2, r3
 8001b04:	6899      	ldr	r1, [r3, #8]
 8001b06:	0789      	lsls	r1, r1, #30
 8001b08:	d5fc      	bpl.n	8001b04 <ReadRegs3_imu5+0x18>
	LL_SPI_TransmitData8(SPI3,(ReadAddr | 0x80));  // (Starting Address 0x22 | 0x80); MSB is '1' for 0x80, next 7 bit Address of register to write 0x22
 8001b0a:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001b0e:	731e      	strb	r6, [r3, #12]
	while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8001b10:	6893      	ldr	r3, [r2, #8]
 8001b12:	07de      	lsls	r6, r3, #31
 8001b14:	d5fc      	bpl.n	8001b10 <ReadRegs3_imu5+0x24>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001b16:	68d3      	ldr	r3, [r2, #12]
	LL_SPI_ReceiveData8(SPI3);

	for (i = 0; i < Bytes; i++)
	{
			  while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <ReadRegs3_imu5+0x60>)
 8001b1a:	4621      	mov	r1, r4
 8001b1c:	4425      	add	r5, r4
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001b1e:	2200      	movs	r2, #0
	for (i = 0; i < Bytes; i++)
 8001b20:	42a9      	cmp	r1, r5
 8001b22:	d106      	bne.n	8001b32 <ReadRegs3_imu5+0x46>

				while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
				ReadBuf[i]= LL_SPI_ReceiveData8(SPI3);

		}
	delay_us(5);
 8001b24:	2005      	movs	r0, #5
 8001b26:	f000 ffc9 	bl	8002abc <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <ReadRegs3_imu5+0x5c>)
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	619a      	str	r2, [r3, #24]
 8001b30:	bd70      	pop	{r4, r5, r6, pc}
			  while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001b32:	6898      	ldr	r0, [r3, #8]
 8001b34:	0784      	lsls	r4, r0, #30
 8001b36:	d5fc      	bpl.n	8001b32 <ReadRegs3_imu5+0x46>
 8001b38:	731a      	strb	r2, [r3, #12]
				while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8001b3a:	6898      	ldr	r0, [r3, #8]
 8001b3c:	07c0      	lsls	r0, r0, #31
 8001b3e:	d5fc      	bpl.n	8001b3a <ReadRegs3_imu5+0x4e>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001b40:	68d8      	ldr	r0, [r3, #12]
 8001b42:	f801 0b01 	strb.w	r0, [r1], #1
 8001b46:	e7eb      	b.n	8001b20 <ReadRegs3_imu5+0x34>
 8001b48:	48001c00 	.word	0x48001c00
 8001b4c:	40003c00 	.word	0x40003c00

08001b50 <F_Sensor_ADC_Store>:
}


//Toe: ADC1_Ch3_PC2=ADC1  Heel: ADC2_Ch4_PC3=ADC2
void F_Sensor_ADC_Store(void)
{
 8001b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// ADC3 Ch1 PC0 read
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8001b54:	4a4e      	ldr	r2, [pc, #312]	; (8001c90 <F_Sensor_ADC_Store+0x140>)
 8001b56:	484f      	ldr	r0, [pc, #316]	; (8001c94 <F_Sensor_ADC_Store+0x144>)

	  LL_ADC_REG_StartConversion(ADC3);
	  ADC_TimeOut_Count_Buf=0;
	  ADC_Error_Buf=0;
 8001b58:	4f4f      	ldr	r7, [pc, #316]	; (8001c98 <F_Sensor_ADC_Store+0x148>)
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8001b5a:	2106      	movs	r1, #6
 8001b5c:	f7ff fa96 	bl	800108c <LL_ADC_REG_SetSequencerRanks>
	  LL_ADC_REG_StartConversion(ADC3);
 8001b60:	484c      	ldr	r0, [pc, #304]	; (8001c94 <F_Sensor_ADC_Store+0x144>)
 8001b62:	f7ff fa49 	bl	8000ff8 <LL_ADC_REG_StartConversion>
	  ADC_TimeOut_Count_Buf=0;
 8001b66:	4b4d      	ldr	r3, [pc, #308]	; (8001c9c <F_Sensor_ADC_Store+0x14c>)
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001b68:	484a      	ldr	r0, [pc, #296]	; (8001c94 <F_Sensor_ADC_Store+0x144>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	4698      	mov	r8, r3
	  ADC_Error_Buf=0;
 8001b70:	703a      	strb	r2, [r7, #0]
 8001b72:	4681      	mov	r9, r0
 8001b74:	6803      	ldr	r3, [r0, #0]
	  while ((LL_ADC_IsActiveFlag_EOC(ADC3) == 0))
 8001b76:	075c      	lsls	r4, r3, #29
 8001b78:	d57e      	bpl.n	8001c78 <F_Sensor_ADC_Store+0x128>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001b7a:	2304      	movs	r3, #4
	  {
		  Wait_for_ADC_timeout_While_Datalog();
	  }
	  LL_ADC_ClearFlag_EOC(ADC3);
	  // toe uninstrumented side
	  BSbuffer[s_flag].other_fsr1[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC3), LL_ADC_RESOLUTION_12B);  // Toe
 8001b7c:	4e48      	ldr	r6, [pc, #288]	; (8001ca0 <F_Sensor_ADC_Store+0x150>)
 8001b7e:	4d49      	ldr	r5, [pc, #292]	; (8001ca4 <F_Sensor_ADC_Store+0x154>)
 8001b80:	6003      	str	r3, [r0, #0]
 8001b82:	7831      	ldrb	r1, [r6, #0]
 8001b84:	682b      	ldr	r3, [r5, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001b86:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001b88:	4c47      	ldr	r4, [pc, #284]	; (8001ca8 <F_Sensor_ADC_Store+0x158>)


	  LL_ADC_REG_StartConversion(ADC2);
 8001b8a:	4848      	ldr	r0, [pc, #288]	; (8001cac <F_Sensor_ADC_Store+0x15c>)
	  BSbuffer[s_flag].other_fsr1[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC3), LL_ADC_RESOLUTION_12B);  // Toe
 8001b8c:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 8001b90:	f503 53ba 	add.w	r3, r3, #5952	; 0x1740
 8001b94:	3304      	adds	r3, #4
 8001b96:	b291      	uxth	r1, r2
 8001b98:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8001b9c:	434a      	muls	r2, r1
 8001b9e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001ba2:	fbb2 f2f1 	udiv	r2, r2, r1
 8001ba6:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	  LL_ADC_REG_StartConversion(ADC2);
 8001baa:	f7ff fa25 	bl	8000ff8 <LL_ADC_REG_StartConversion>
	  ADC_TimeOut_Count_Buf=0;
 8001bae:	2300      	movs	r3, #0
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001bb0:	483e      	ldr	r0, [pc, #248]	; (8001cac <F_Sensor_ADC_Store+0x15c>)
 8001bb2:	f8c8 3000 	str.w	r3, [r8]
	  ADC_Error_Buf=0;
 8001bb6:	703b      	strb	r3, [r7, #0]
 8001bb8:	6803      	ldr	r3, [r0, #0]
	  while ((LL_ADC_IsActiveFlag_EOC(ADC2) == 0))
 8001bba:	0759      	lsls	r1, r3, #29
 8001bbc:	d55f      	bpl.n	8001c7e <F_Sensor_ADC_Store+0x12e>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	6003      	str	r3, [r0, #0]
	  {
		  Wait_for_ADC_timeout_While_Datalog();
	  }
	  LL_ADC_ClearFlag_EOC(ADC2);
	  BSbuffer[s_flag].Flex2[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC2), LL_ADC_RESOLUTION_12B);  // Toe
 8001bc2:	7831      	ldrb	r1, [r6, #0]
 8001bc4:	682b      	ldr	r3, [r5, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001bc6:	6c02      	ldr	r2, [r0, #64]	; 0x40


	  LL_ADC_REG_StartConversion(ADC1);
 8001bc8:	4839      	ldr	r0, [pc, #228]	; (8001cb0 <F_Sensor_ADC_Store+0x160>)
	  BSbuffer[s_flag].Flex2[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC2), LL_ADC_RESOLUTION_12B);  // Toe
 8001bca:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 8001bce:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8001bd2:	3308      	adds	r3, #8
 8001bd4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001bd8:	b291      	uxth	r1, r2
 8001bda:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8001bde:	434a      	muls	r2, r1
 8001be0:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001be4:	fbb2 f2f1 	udiv	r2, r2, r1
 8001be8:	809a      	strh	r2, [r3, #4]
	  LL_ADC_REG_StartConversion(ADC1);
 8001bea:	f7ff fa05 	bl	8000ff8 <LL_ADC_REG_StartConversion>
	  ADC_TimeOut_Count_Buf=0;
 8001bee:	2300      	movs	r3, #0
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001bf0:	482f      	ldr	r0, [pc, #188]	; (8001cb0 <F_Sensor_ADC_Store+0x160>)
 8001bf2:	f8c8 3000 	str.w	r3, [r8]
	  ADC_Error_Buf=0;
 8001bf6:	703b      	strb	r3, [r7, #0]
 8001bf8:	6803      	ldr	r3, [r0, #0]
	  while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0))
 8001bfa:	075a      	lsls	r2, r3, #29
 8001bfc:	d542      	bpl.n	8001c84 <F_Sensor_ADC_Store+0x134>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001bfe:	2304      	movs	r3, #4
 8001c00:	6003      	str	r3, [r0, #0]
	  {
		  Wait_for_ADC_timeout_While_Datalog();
	  }
	  LL_ADC_ClearFlag_EOC(ADC1);
	  BSbuffer[s_flag].Flex1[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC1), LL_ADC_RESOLUTION_12B);  //Heel
 8001c02:	7831      	ldrb	r1, [r6, #0]
 8001c04:	682b      	ldr	r3, [r5, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001c06:	6c02      	ldr	r2, [r0, #64]	; 0x40


	  // ADC3 Ch2 PC1 read

		LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8001c08:	4822      	ldr	r0, [pc, #136]	; (8001c94 <F_Sensor_ADC_Store+0x144>)
	  BSbuffer[s_flag].Flex1[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC1), LL_ADC_RESOLUTION_12B);  //Heel
 8001c0a:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 8001c0e:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 8001c12:	3310      	adds	r3, #16
 8001c14:	b291      	uxth	r1, r2
 8001c16:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8001c1a:	434a      	muls	r2, r1
 8001c1c:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001c20:	fbb2 f2f1 	udiv	r2, r2, r1
		LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8001c24:	2106      	movs	r1, #6
	  BSbuffer[s_flag].Flex1[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC1), LL_ADC_RESOLUTION_12B);  //Heel
 8001c26:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8001c2a:	4a22      	ldr	r2, [pc, #136]	; (8001cb4 <F_Sensor_ADC_Store+0x164>)
 8001c2c:	f7ff fa2e 	bl	800108c <LL_ADC_REG_SetSequencerRanks>

		  LL_ADC_REG_StartConversion(ADC3);
 8001c30:	4818      	ldr	r0, [pc, #96]	; (8001c94 <F_Sensor_ADC_Store+0x144>)
 8001c32:	f7ff f9e1 	bl	8000ff8 <LL_ADC_REG_StartConversion>
		  ADC_TimeOut_Count_Buf=0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f8c8 3000 	str.w	r3, [r8]
		  ADC_Error_Buf=0;
 8001c3c:	703b      	strb	r3, [r7, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001c3e:	f8d9 3000 	ldr.w	r3, [r9]
		  while ((LL_ADC_IsActiveFlag_EOC(ADC3) == 0))
 8001c42:	075b      	lsls	r3, r3, #29
 8001c44:	d521      	bpl.n	8001c8a <F_Sensor_ADC_Store+0x13a>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001c46:	2304      	movs	r3, #4
 8001c48:	f8c9 3000 	str.w	r3, [r9]
		  {
			  Wait_for_ADC_timeout_While_Datalog();
		  }
		  LL_ADC_ClearFlag_EOC(ADC3);
		  // heel uninstrumented side
		  BSbuffer[s_flag].other_fsr2[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC3), LL_ADC_RESOLUTION_12B);  // Toe
 8001c4c:	7831      	ldrb	r1, [r6, #0]
 8001c4e:	682b      	ldr	r3, [r5, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001c50:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
 8001c54:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 8001c58:	f503 53bf 	add.w	r3, r3, #6112	; 0x17e0
 8001c5c:	331c      	adds	r3, #28
 8001c5e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8001c62:	b292      	uxth	r2, r2
 8001c64:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8001c68:	4353      	muls	r3, r2
 8001c6a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001c6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c72:	80a3      	strh	r3, [r4, #4]
 8001c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		  Wait_for_ADC_timeout_While_Datalog();
 8001c78:	f7ff fbb4 	bl	80013e4 <Wait_for_ADC_timeout_While_Datalog>
 8001c7c:	e77a      	b.n	8001b74 <F_Sensor_ADC_Store+0x24>
		  Wait_for_ADC_timeout_While_Datalog();
 8001c7e:	f7ff fbb1 	bl	80013e4 <Wait_for_ADC_timeout_While_Datalog>
 8001c82:	e799      	b.n	8001bb8 <F_Sensor_ADC_Store+0x68>
		  Wait_for_ADC_timeout_While_Datalog();
 8001c84:	f7ff fbae 	bl	80013e4 <Wait_for_ADC_timeout_While_Datalog>
 8001c88:	e7b6      	b.n	8001bf8 <F_Sensor_ADC_Store+0xa8>
			  Wait_for_ADC_timeout_While_Datalog();
 8001c8a:	f7ff fbab 	bl	80013e4 <Wait_for_ADC_timeout_While_Datalog>
 8001c8e:	e7d6      	b.n	8001c3e <F_Sensor_ADC_Store+0xee>
 8001c90:	04300002 	.word	0x04300002
 8001c94:	50040200 	.word	0x50040200
 8001c98:	200089a7 	.word	0x200089a7
 8001c9c:	200083e8 	.word	0x200083e8
 8001ca0:	20000038 	.word	0x20000038
 8001ca4:	20000028 	.word	0x20000028
 8001ca8:	2000004c 	.word	0x2000004c
 8001cac:	50040100 	.word	0x50040100
 8001cb0:	50040000 	.word	0x50040000
 8001cb4:	08600004 	.word	0x08600004

08001cb8 <ACC_GPIO_INIT>:
}



void ACC_GPIO_INIT(void)
{
 8001cb8:	b510      	push	{r4, lr}
	// Configure SCK Pin connected to PA5, MISO PA6, MOSI PA7
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_5, LL_GPIO_MODE_ALTERNATE);
 8001cba:	2202      	movs	r2, #2
 8001cbc:	2120      	movs	r1, #32
 8001cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001cc2:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
 8001cc6:	f7ff f9cb 	bl	8001060 <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_5, LL_GPIO_AF_5);
 8001cca:	2205      	movs	r2, #5
 8001ccc:	2120      	movs	r1, #32
 8001cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd2:	f7ff fa20 	bl	8001116 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_5, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8001cd6:	2120      	movs	r1, #32
 8001cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cdc:	f7ff fa47 	bl	800116e <LL_GPIO_SetPinSpeed.constprop.6>
 8001ce0:	6863      	ldr	r3, [r4, #4]
 8001ce2:	f023 0320 	bic.w	r3, r3, #32
 8001ce6:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_5, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_5, LL_GPIO_PULL_NO);
 8001ce8:	4620      	mov	r0, r4
 8001cea:	2200      	movs	r2, #0
 8001cec:	2120      	movs	r1, #32
 8001cee:	f7ff fa28 	bl	8001142 <LL_GPIO_SetPinPull>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	2140      	movs	r1, #64	; 0x40
 8001cf8:	f7ff f9b2 	bl	8001060 <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_6, LL_GPIO_AF_5);
 8001cfc:	2205      	movs	r2, #5
 8001cfe:	4620      	mov	r0, r4
 8001d00:	2140      	movs	r1, #64	; 0x40
 8001d02:	f7ff fa08 	bl	8001116 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8001d06:	4620      	mov	r0, r4
 8001d08:	2140      	movs	r1, #64	; 0x40
 8001d0a:	f7ff fa30 	bl	800116e <LL_GPIO_SetPinSpeed.constprop.6>
 8001d0e:	6863      	ldr	r3, [r4, #4]
 8001d10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d14:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_6, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_6 , LL_GPIO_PULL_NO);
 8001d16:	4620      	mov	r0, r4
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2140      	movs	r1, #64	; 0x40
 8001d1c:	f7ff fa11 	bl	8001142 <LL_GPIO_SetPinPull>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_ALTERNATE);
 8001d20:	4620      	mov	r0, r4
 8001d22:	2202      	movs	r2, #2
 8001d24:	2180      	movs	r1, #128	; 0x80
 8001d26:	f7ff f99b 	bl	8001060 <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_7, LL_GPIO_AF_5);
 8001d2a:	2205      	movs	r2, #5
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	2180      	movs	r1, #128	; 0x80
 8001d30:	f7ff f9f1 	bl	8001116 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_7, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8001d34:	4620      	mov	r0, r4
 8001d36:	2180      	movs	r1, #128	; 0x80
 8001d38:	f7ff fa19 	bl	800116e <LL_GPIO_SetPinSpeed.constprop.6>
 8001d3c:	6863      	ldr	r3, [r4, #4]
 8001d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d42:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_7, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_7, LL_GPIO_PULL_NO);
 8001d44:	4620      	mov	r0, r4
 8001d46:	2200      	movs	r2, #0
 8001d48:	2180      	movs	r1, #128	; 0x80
}
 8001d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_7, LL_GPIO_PULL_NO);
 8001d4e:	f7ff b9f8 	b.w	8001142 <LL_GPIO_SetPinPull>
	...

08001d54 <P_IMU1_SPI1_Init>:
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_15, LL_GPIO_PULL_NO);
}


void P_IMU1_SPI1_Init(void)  //MPU9250
{
 8001d54:	b508      	push	{r3, lr}

LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001d56:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d5a:	f7ff f973 	bl	8001044 <LL_APB2_GRP1_EnableClock>

ACC_GPIO_INIT();
 8001d5e:	f7ff ffab 	bl	8001cb8 <ACC_GPIO_INIT>
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <P_IMU1_SPI1_Init+0x7c>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8001d6a:	f042 0208 	orr.w	r2, r2, #8
 8001d6e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8001d76:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	f042 0202 	orr.w	r2, r2, #2
 8001d86:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d8e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001d96:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001d9a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	f022 0204 	bic.w	r2, r2, #4
 8001daa:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001db2:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	f442 7282 	orr.w	r2, r2, #260	; 0x104
 8001dba:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dc2:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	f042 0208 	orr.w	r2, r2, #8
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	bd08      	pop	{r3, pc}
 8001dce:	bf00      	nop
 8001dd0:	40013000 	.word	0x40013000

08001dd4 <MCP_setup>:

}


void MCP_setup(void)
{
 8001dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LL_SPI_InitTypeDef SPI_InitStruct;

	  LL_GPIO_InitTypeDef GPIO_InitStruct;

	  /* Peripheral clock enable */
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001dd8:	2004      	movs	r0, #4
{
 8001dda:	b090      	sub	sp, #64	; 0x40
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001ddc:	f7ff f916 	bl	800100c <LL_AHB2_GRP1_EnableClock>
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
	  LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001de0:	4e2e      	ldr	r6, [pc, #184]	; (8001e9c <MCP_setup+0xc8>)
	  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001de2:	2002      	movs	r0, #2
 8001de4:	f7ff f912 	bl	800100c <LL_AHB2_GRP1_EnableClock>
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001de8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dec:	2400      	movs	r4, #0
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001dee:	f7ff f91b 	bl	8001028 <LL_APB1_GRP1_EnableClock>
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001df2:	2502      	movs	r5, #2
 8001df4:	f04f 0803 	mov.w	r8, #3
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001df8:	2705      	movs	r7, #5
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	  LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001dfe:	4669      	mov	r1, sp
 8001e00:	4630      	mov	r0, r6
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e02:	e88d 0128 	stmia.w	sp, {r3, r5, r8}
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e06:	9403      	str	r4, [sp, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e08:	9404      	str	r4, [sp, #16]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001e0a:	9705      	str	r7, [sp, #20]
	  LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001e0c:	f001 ffce 	bl	8003dac <LL_GPIO_Init>

	  GPIO_InitStruct.Pin = SPI2_MISO_IMU_PIN;
 8001e10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
	  LL_GPIO_Init(SPI2_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001e14:	4669      	mov	r1, sp
 8001e16:	4630      	mov	r0, r6
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e18:	e88d 0128 	stmia.w	sp, {r3, r5, r8}
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e1c:	9403      	str	r4, [sp, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e1e:	9404      	str	r4, [sp, #16]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001e20:	9705      	str	r7, [sp, #20]
	  LL_GPIO_Init(SPI2_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001e22:	f001 ffc3 	bl	8003dac <LL_GPIO_Init>

	  GPIO_InitStruct.Pin = SPI2_MOSI_IMU_PIN;
 8001e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
	  LL_GPIO_Init(SPI2_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001e2a:	4669      	mov	r1, sp
 8001e2c:	4630      	mov	r0, r6
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2e:	e88d 0128 	stmia.w	sp, {r3, r5, r8}
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e32:	9403      	str	r4, [sp, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e34:	9404      	str	r4, [sp, #16]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001e36:	9705      	str	r7, [sp, #20]
	  LL_GPIO_Init(SPI2_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001e38:	f001 ffb8 	bl	8003dac <LL_GPIO_Init>


	  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
	  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001e3c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001e40:	9307      	str	r3, [sp, #28]
	  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001e42:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001e46:	9308      	str	r3, [sp, #32]
	  /*Mode 3 (Mode 1,1) */
	  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH; /*Clock 1 when idle and 0 when active */
	  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE; //Second clock transition is the first data capture edge
 8001e48:	2301      	movs	r3, #1
	  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001e4a:	9406      	str	r4, [sp, #24]
	  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE; //Second clock transition is the first data capture edge
 8001e4c:	930a      	str	r3, [sp, #40]	; 0x28
	  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;

	  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
	  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001e4e:	940d      	str	r4, [sp, #52]	; 0x34
	  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001e50:	940e      	str	r4, [sp, #56]	; 0x38
	  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001e52:	f44f 7300 	mov.w	r3, #512	; 0x200
	  SPI_InitStruct.CRCPoly = 7; //?
	  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001e56:	4c12      	ldr	r4, [pc, #72]	; (8001ea0 <MCP_setup+0xcc>)
	  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001e58:	930b      	str	r3, [sp, #44]	; 0x2c
	  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	930c      	str	r3, [sp, #48]	; 0x30
	  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001e5e:	a906      	add	r1, sp, #24
	  SPI_InitStruct.CRCPoly = 7; //?
 8001e60:	2307      	movs	r3, #7
	  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001e62:	4620      	mov	r0, r4
	  SPI_InitStruct.CRCPoly = 7; //?
 8001e64:	930f      	str	r3, [sp, #60]	; 0x3c
	  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH; /*Clock 1 when idle and 0 when active */
 8001e66:	9509      	str	r5, [sp, #36]	; 0x24
	  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001e68:	f002 f896 	bl	8003f98 <LL_SPI_Init>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001e6c:	6863      	ldr	r3, [r4, #4]
 8001e6e:	f023 0308 	bic.w	r3, r3, #8
 8001e72:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8001e74:	6863      	ldr	r3, [r4, #4]
 8001e76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e7a:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8001e7c:	6863      	ldr	r3, [r4, #4]
 8001e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e82:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e8a:	6023      	str	r3, [r4, #0]

	  LL_SPI_SetRxFIFOThreshold(SPI2,LL_SPI_RX_FIFO_TH_QUARTER);
	  LL_SPI_DisableIT_RXNE(SPI2);
	  LL_SPI_Enable(SPI2);

	  delay_us(10000);
 8001e8c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001e90:	f000 fe14 	bl	8002abc <delay_us>


}
 8001e94:	b010      	add	sp, #64	; 0x40
 8001e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e9a:	bf00      	nop
 8001e9c:	48000400 	.word	0x48000400
 8001ea0:	40003800 	.word	0x40003800

08001ea4 <MCP_SPI2_Initialization_at_reset>:
{	LL_GPIO_SetOutputPin(SPI2_CS_GPIO_PORT, SPI2_CS_PIN); // PA4 CS SET Active Low
 8001ea4:	b508      	push	{r3, lr}
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <MCP_SPI2_Initialization_at_reset+0x1c>)
 8001ea8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eac:	619a      	str	r2, [r3, #24]
	MCP_setup();
 8001eae:	f7ff ff91 	bl	8001dd4 <MCP_setup>
	MCP_reset();
 8001eb2:	f7ff fa7f 	bl	80013b4 <MCP_reset>
	delay_us(70000);
 8001eb6:	4803      	ldr	r0, [pc, #12]	; (8001ec4 <MCP_SPI2_Initialization_at_reset+0x20>)
}
 8001eb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_us(70000);
 8001ebc:	f000 bdfe 	b.w	8002abc <delay_us>
 8001ec0:	48000400 	.word	0x48000400
 8001ec4:	00011170 	.word	0x00011170

08001ec8 <Configure_USART_1>:

}


void Configure_USART_1(void)   // USART1: PB6-Tx, (PA10-Rx disabled)
{
 8001ec8:	b510      	push	{r4, lr}

// Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up
LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 8001eca:	4c18      	ldr	r4, [pc, #96]	; (8001f2c <Configure_USART_1+0x64>)
 8001ecc:	2202      	movs	r2, #2
 8001ece:	2140      	movs	r1, #64	; 0x40
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f7ff f8c5 	bl	8001060 <LL_GPIO_SetPinMode>
LL_GPIO_SetAFPin_0_7(GPIOB, LL_GPIO_PIN_6, LL_GPIO_AF_7);
 8001ed6:	2207      	movs	r2, #7
 8001ed8:	2140      	movs	r1, #64	; 0x40
 8001eda:	4620      	mov	r0, r4
 8001edc:	f7ff f91b 	bl	8001116 <LL_GPIO_SetAFPin_0_7>
LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8001ee0:	2140      	movs	r1, #64	; 0x40
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f7ff f943 	bl	800116e <LL_GPIO_SetPinSpeed.constprop.6>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001ee8:	6863      	ldr	r3, [r4, #4]
 8001eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eee:	6063      	str	r3, [r4, #4]
LL_GPIO_SetPinOutputType(GPIOB, LL_GPIO_PIN_6, LL_GPIO_OUTPUT_PUSHPULL);
LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_UP);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	2140      	movs	r1, #64	; 0x40
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f7ff f924 	bl	8001142 <LL_GPIO_SetPinPull>

RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1 clock enable, Clock source Default peripheral clock PCLK2, APB2
 8001efa:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <Configure_USART_1+0x68>)
 8001efc:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f02:	6613      	str	r3, [r2, #96]	; 0x60

// Default parameter: 8 data bit, 1 start bit, 1 stop bit, no parity, no hardware flow control

MODIFY_REG(USART1->CR1, USART_CR1_RE | USART_CR1_TE, (USART_CR1_TE |USART_CR1_RE));  // TX/RX direction BidirecttionalLL_USART_DIRECTION_TX_RX
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <Configure_USART_1+0x6c>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	f042 020c 	orr.w	r2, r2, #12
 8001f0c:	601a      	str	r2, [r3, #0]

USART1->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(SystemCoreClock, 115200));  // Baud rate 115200
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <Configure_USART_1+0x70>)
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001f16:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 8001f1a:	fbb2 f2f1 	udiv	r2, r2, r1
 8001f1e:	60da      	str	r2, [r3, #12]

USART1->CR1|= USART_CR1_UE;  // Unable USART1
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	bd10      	pop	{r4, pc}
 8001f2a:	bf00      	nop
 8001f2c:	48000400 	.word	0x48000400
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40013800 	.word	0x40013800
 8001f38:	20000008 	.word	0x20000008

08001f3c <USART1_wr_print>:

void USART1_wr_print(uint8_t *buffer, uint32_t nBytes)
{
for (int i=0;i<nBytes;i++)
{
while(!(USART1->ISR & USART_ISR_TXE));
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <USART1_wr_print+0x28>)
 8001f3e:	4401      	add	r1, r0
for (int i=0;i<nBytes;i++)
 8001f40:	4288      	cmp	r0, r1
 8001f42:	d100      	bne.n	8001f46 <USART1_wr_print+0xa>
USART1->TDR= buffer[i]& 0xFF;

while(!(USART1->ISR & USART_ISR_TC));
USART1->ISR &= ~USART_ISR_TC;
}
}
 8001f44:	4770      	bx	lr
while(!(USART1->ISR & USART_ISR_TXE));
 8001f46:	69da      	ldr	r2, [r3, #28]
 8001f48:	0612      	lsls	r2, r2, #24
 8001f4a:	d5fc      	bpl.n	8001f46 <USART1_wr_print+0xa>
USART1->TDR= buffer[i]& 0xFF;
 8001f4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f50:	851a      	strh	r2, [r3, #40]	; 0x28
while(!(USART1->ISR & USART_ISR_TC));
 8001f52:	69da      	ldr	r2, [r3, #28]
 8001f54:	0652      	lsls	r2, r2, #25
 8001f56:	d5fc      	bpl.n	8001f52 <USART1_wr_print+0x16>
USART1->ISR &= ~USART_ISR_TC;
 8001f58:	69da      	ldr	r2, [r3, #28]
 8001f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f5e:	61da      	str	r2, [r3, #28]
 8001f60:	e7ee      	b.n	8001f40 <USART1_wr_print+0x4>
 8001f62:	bf00      	nop
 8001f64:	40013800 	.word	0x40013800

08001f68 <MPU_9D_store_IMU1_SPI1>:
//    BSbuffer[s_flag].MY[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
//    BSbuffer[s_flag].MZ[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
}

void MPU_9D_store_IMU1_SPI1(void)
{
 8001f68:	b530      	push	{r4, r5, lr}
    uint8_t response[21];
    WriteReg1(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 8001f6a:	218c      	movs	r1, #140	; 0x8c
{
 8001f6c:	b087      	sub	sp, #28
    WriteReg1(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 8001f6e:	2025      	movs	r0, #37	; 0x25
 8001f70:	f7ff fcc2 	bl	80018f8 <WriteReg1>
    WriteReg1(MPUREG_I2C_SLV0_REG, AK8963_HXL);                // I2C slave 0 register address from where to begin data transfer
 8001f74:	2103      	movs	r1, #3
 8001f76:	2026      	movs	r0, #38	; 0x26
 8001f78:	f7ff fcbe 	bl	80018f8 <WriteReg1>
    WriteReg1(MPUREG_I2C_SLV0_CTRL, 0x87);                     // Read 7 bytes from the magnetometer
 8001f7c:	2187      	movs	r1, #135	; 0x87
 8001f7e:	2027      	movs	r0, #39	; 0x27
 8001f80:	f7ff fcba 	bl	80018f8 <WriteReg1>

    ReadRegs1(MPUREG_ACCEL_XOUT_H,response,21);
 8001f84:	4669      	mov	r1, sp
 8001f86:	2215      	movs	r2, #21
 8001f88:	203b      	movs	r0, #59	; 0x3b
 8001f8a:	f7ff fd29 	bl	80019e0 <ReadRegs1>

    BSbuffer[s_flag].AX1[Sub_cnt]=((int16_t)response[0]<<8)|response[1];
 8001f8e:	492c      	ldr	r1, [pc, #176]	; (8002040 <MPU_9D_store_IMU1_SPI1+0xd8>)
 8001f90:	4a2c      	ldr	r2, [pc, #176]	; (8002044 <MPU_9D_store_IMU1_SPI1+0xdc>)
 8001f92:	780c      	ldrb	r4, [r1, #0]
 8001f94:	6810      	ldr	r0, [r2, #0]
 8001f96:	f89d 5000 	ldrb.w	r5, [sp]
 8001f9a:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <MPU_9D_store_IMU1_SPI1+0xe0>)
 8001f9c:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8001fa0:	f89d 4001 	ldrb.w	r4, [sp, #1]
 8001fa4:	3004      	adds	r0, #4
 8001fa6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8001faa:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].AY1[Sub_cnt]=((int16_t)response[2]<<8)|response[3];
 8001fae:	780c      	ldrb	r4, [r1, #0]
 8001fb0:	6810      	ldr	r0, [r2, #0]
 8001fb2:	f89d 5002 	ldrb.w	r5, [sp, #2]
 8001fb6:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8001fba:	f89d 4003 	ldrb.w	r4, [sp, #3]
 8001fbe:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001fc2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8001fc6:	f8a0 417c 	strh.w	r4, [r0, #380]	; 0x17c
    BSbuffer[s_flag].AZ1[Sub_cnt]=((int16_t)response[4]<<8)|response[5];
 8001fca:	780c      	ldrb	r4, [r1, #0]
 8001fcc:	6810      	ldr	r0, [r2, #0]
 8001fce:	f89d 5004 	ldrb.w	r5, [sp, #4]
 8001fd2:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8001fd6:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8001fda:	f500 70bc 	add.w	r0, r0, #376	; 0x178
 8001fde:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8001fe2:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GX1[Sub_cnt]=((int16_t)response[8]<<8)|response[9];
 8001fe6:	780c      	ldrb	r4, [r1, #0]
 8001fe8:	6810      	ldr	r0, [r2, #0]
 8001fea:	f89d 5008 	ldrb.w	r5, [sp, #8]
 8001fee:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8001ff2:	f89d 4009 	ldrb.w	r4, [sp, #9]
 8001ff6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001ffa:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8001ffe:	f8a0 4464 	strh.w	r4, [r0, #1124]	; 0x464
    BSbuffer[s_flag].GY1[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 8002002:	780c      	ldrb	r4, [r1, #0]
 8002004:	6810      	ldr	r0, [r2, #0]
 8002006:	f89d 500a 	ldrb.w	r5, [sp, #10]
    BSbuffer[s_flag].GZ1[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 800200a:	7809      	ldrb	r1, [r1, #0]
 800200c:	6812      	ldr	r2, [r2, #0]
    BSbuffer[s_flag].GY1[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 800200e:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002012:	f89d 400b 	ldrb.w	r4, [sp, #11]
 8002016:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
    BSbuffer[s_flag].GZ1[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 800201a:	eb02 3241 	add.w	r2, r2, r1, lsl #13
    BSbuffer[s_flag].GY1[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 800201e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002022:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GZ1[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 8002026:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800202a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800202e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8002032:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002036:	f8a3 274c 	strh.w	r2, [r3, #1868]	; 0x74c
//    BSbuffer[s_flag].MX1[Sub_cnt]=((int16_t)response[15]<<8)|response[14];
//    BSbuffer[s_flag].MY1[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
//    BSbuffer[s_flag].MZ1[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
}
 800203a:	b007      	add	sp, #28
 800203c:	bd30      	pop	{r4, r5, pc}
 800203e:	bf00      	nop
 8002040:	20000038 	.word	0x20000038
 8002044:	20000028 	.word	0x20000028
 8002048:	2000004c 	.word	0x2000004c

0800204c <MPU_9D_store_IMU2_SPI1>:

void MPU_9D_store_IMU2_SPI1(void)
{
 800204c:	b530      	push	{r4, r5, lr}
    uint8_t response[21];
    WriteReg1_imu2(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 800204e:	218c      	movs	r1, #140	; 0x8c
{
 8002050:	b087      	sub	sp, #28
    WriteReg1_imu2(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 8002052:	2025      	movs	r0, #37	; 0x25
 8002054:	f7ff fc72 	bl	800193c <WriteReg1_imu2>
    WriteReg1_imu2(MPUREG_I2C_SLV0_REG, AK8963_HXL);                // I2C slave 0 register address from where to begin data transfer
 8002058:	2103      	movs	r1, #3
 800205a:	2026      	movs	r0, #38	; 0x26
 800205c:	f7ff fc6e 	bl	800193c <WriteReg1_imu2>
    WriteReg1_imu2(MPUREG_I2C_SLV0_CTRL, 0x87);                     // Read 7 bytes from the magnetometer
 8002060:	2187      	movs	r1, #135	; 0x87
 8002062:	2027      	movs	r0, #39	; 0x27
 8002064:	f7ff fc6a 	bl	800193c <WriteReg1_imu2>

    ReadRegs1_imu2(MPUREG_ACCEL_XOUT_H,response,21);
 8002068:	4669      	mov	r1, sp
 800206a:	2215      	movs	r2, #21
 800206c:	203b      	movs	r0, #59	; 0x3b
 800206e:	f7ff fce1 	bl	8001a34 <ReadRegs1_imu2>

    BSbuffer[s_flag].AX2[Sub_cnt]=((int16_t)response[0]<<8)|response[1];
 8002072:	492d      	ldr	r1, [pc, #180]	; (8002128 <MPU_9D_store_IMU2_SPI1+0xdc>)
 8002074:	4a2d      	ldr	r2, [pc, #180]	; (800212c <MPU_9D_store_IMU2_SPI1+0xe0>)
 8002076:	780c      	ldrb	r4, [r1, #0]
 8002078:	6810      	ldr	r0, [r2, #0]
 800207a:	f89d 5000 	ldrb.w	r5, [sp]
 800207e:	4b2c      	ldr	r3, [pc, #176]	; (8002130 <MPU_9D_store_IMU2_SPI1+0xe4>)
 8002080:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002084:	f89d 4001 	ldrb.w	r4, [sp, #1]
 8002088:	f500 608c 	add.w	r0, r0, #1120	; 0x460
 800208c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002090:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].AY2[Sub_cnt]=((int16_t)response[2]<<8)|response[3];
 8002094:	780c      	ldrb	r4, [r1, #0]
 8002096:	6810      	ldr	r0, [r2, #0]
 8002098:	f89d 5002 	ldrb.w	r5, [sp, #2]
 800209c:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80020a0:	f89d 4003 	ldrb.w	r4, [sp, #3]
 80020a4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80020a8:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80020ac:	f8a0 4a34 	strh.w	r4, [r0, #2612]	; 0xa34
    BSbuffer[s_flag].AZ2[Sub_cnt]=((int16_t)response[4]<<8)|response[5];
 80020b0:	780c      	ldrb	r4, [r1, #0]
 80020b2:	6810      	ldr	r0, [r2, #0]
 80020b4:	f89d 5004 	ldrb.w	r5, [sp, #4]
 80020b8:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80020bc:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80020c0:	f200 50d4 	addw	r0, r0, #1492	; 0x5d4
 80020c4:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80020c8:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GX2[Sub_cnt]=((int16_t)response[8]<<8)|response[9];
 80020cc:	780c      	ldrb	r4, [r1, #0]
 80020ce:	6810      	ldr	r0, [r2, #0]
 80020d0:	f89d 5008 	ldrb.w	r5, [sp, #8]
 80020d4:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80020d8:	f89d 4009 	ldrb.w	r4, [sp, #9]
 80020dc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80020e0:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80020e4:	f8a0 4d1c 	strh.w	r4, [r0, #3356]	; 0xd1c
    BSbuffer[s_flag].GY2[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 80020e8:	780c      	ldrb	r4, [r1, #0]
 80020ea:	6810      	ldr	r0, [r2, #0]
    BSbuffer[s_flag].GZ2[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 80020ec:	7809      	ldrb	r1, [r1, #0]
 80020ee:	6812      	ldr	r2, [r2, #0]
    BSbuffer[s_flag].GY2[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 80020f0:	f89d 500a 	ldrb.w	r5, [sp, #10]
 80020f4:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80020f8:	f89d 400b 	ldrb.w	r4, [sp, #11]
 80020fc:	f500 60e9 	add.w	r0, r0, #1864	; 0x748
    BSbuffer[s_flag].GZ2[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 8002100:	eb02 3241 	add.w	r2, r2, r1, lsl #13
    BSbuffer[s_flag].GY2[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 8002104:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    BSbuffer[s_flag].GZ2[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 8002108:	f502 6200 	add.w	r2, r2, #2048	; 0x800
    BSbuffer[s_flag].GY2[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 800210c:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GZ2[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 8002110:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002114:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002118:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800211c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002120:	809a      	strh	r2, [r3, #4]

}
 8002122:	b007      	add	sp, #28
 8002124:	bd30      	pop	{r4, r5, pc}
 8002126:	bf00      	nop
 8002128:	20000038 	.word	0x20000038
 800212c:	20000028 	.word	0x20000028
 8002130:	2000004c 	.word	0x2000004c

08002134 <MPU_9D_store_IMU4_SPI3>:

void MPU_9D_store_IMU4_SPI3(void)
{
 8002134:	b530      	push	{r4, r5, lr}
    uint8_t response[21];
    //change all writereg3 for imu5
    WriteReg3(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 8002136:	218c      	movs	r1, #140	; 0x8c
{
 8002138:	b087      	sub	sp, #28
    WriteReg3(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 800213a:	2025      	movs	r0, #37	; 0x25
 800213c:	f7ff fb8c 	bl	8001858 <WriteReg3>
    WriteReg3(MPUREG_I2C_SLV0_REG, AK8963_HXL);                // I2C slave 0 register address from where to begin data transfer
 8002140:	2103      	movs	r1, #3
 8002142:	2026      	movs	r0, #38	; 0x26
 8002144:	f7ff fb88 	bl	8001858 <WriteReg3>
    WriteReg3(MPUREG_I2C_SLV0_CTRL, 0x87);                     // Read 7 bytes from the magnetometer
 8002148:	2187      	movs	r1, #135	; 0x87
 800214a:	2027      	movs	r0, #39	; 0x27
 800214c:	f7ff fb84 	bl	8001858 <WriteReg3>

    ReadRegs3(MPUREG_ACCEL_XOUT_H,response,21); //create and change here for IMU5
 8002150:	4669      	mov	r1, sp
 8002152:	2215      	movs	r2, #21
 8002154:	203b      	movs	r0, #59	; 0x3b
 8002156:	f7ff fc97 	bl	8001a88 <ReadRegs3>

    //change these to store for IMU5
    BSbuffer[s_flag].AX4[Sub_cnt]=((int16_t)response[0]<<8)|response[1];
 800215a:	4935      	ldr	r1, [pc, #212]	; (8002230 <MPU_9D_store_IMU4_SPI3+0xfc>)
 800215c:	4835      	ldr	r0, [pc, #212]	; (8002234 <MPU_9D_store_IMU4_SPI3+0x100>)
 800215e:	f89d 5000 	ldrb.w	r5, [sp]
 8002162:	7804      	ldrb	r4, [r0, #0]
 8002164:	680b      	ldr	r3, [r1, #0]
 8002166:	4a34      	ldr	r2, [pc, #208]	; (8002238 <MPU_9D_store_IMU4_SPI3+0x104>)
 8002168:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 800216c:	f89d 4001 	ldrb.w	r4, [sp, #1]
 8002170:	f603 5318 	addw	r3, r3, #3352	; 0xd18
 8002174:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002178:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
    BSbuffer[s_flag].AY4[Sub_cnt]=((int16_t)response[2]<<8)|response[3];
 800217c:	7804      	ldrb	r4, [r0, #0]
 800217e:	680b      	ldr	r3, [r1, #0]
 8002180:	f89d 5002 	ldrb.w	r5, [sp, #2]
 8002184:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 8002188:	f503 635d 	add.w	r3, r3, #3536	; 0xdd0
 800218c:	f89d 4003 	ldrb.w	r4, [sp, #3]
 8002190:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002194:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002198:	809c      	strh	r4, [r3, #4]
    BSbuffer[s_flag].AZ4[Sub_cnt]=((int16_t)response[4]<<8)|response[5];
 800219a:	7804      	ldrb	r4, [r0, #0]
 800219c:	680b      	ldr	r3, [r1, #0]
 800219e:	f89d 5004 	ldrb.w	r5, [sp, #4]
 80021a2:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 80021a6:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80021aa:	f603 638c 	addw	r3, r3, #3724	; 0xe8c
 80021ae:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80021b2:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
    BSbuffer[s_flag].GX4[Sub_cnt]=((int16_t)response[8]<<8)|response[9];
 80021b6:	7804      	ldrb	r4, [r0, #0]
 80021b8:	680b      	ldr	r3, [r1, #0]
 80021ba:	f89d 5008 	ldrb.w	r5, [sp, #8]
 80021be:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 80021c2:	f603 7344 	addw	r3, r3, #3908	; 0xf44
 80021c6:	f89d 4009 	ldrb.w	r4, [sp, #9]
 80021ca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80021ce:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80021d2:	809c      	strh	r4, [r3, #4]
    BSbuffer[s_flag].GY4[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 80021d4:	7804      	ldrb	r4, [r0, #0]
 80021d6:	680b      	ldr	r3, [r1, #0]
 80021d8:	f89d 500a 	ldrb.w	r5, [sp, #10]
 80021dc:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 80021e0:	f89d 400b 	ldrb.w	r4, [sp, #11]
 80021e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e8:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80021ec:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
    BSbuffer[s_flag].GZ4[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 80021f0:	7804      	ldrb	r4, [r0, #0]
 80021f2:	680b      	ldr	r3, [r1, #0]
 80021f4:	f89d 500c 	ldrb.w	r5, [sp, #12]
//    BSbuffer[s_flag].MX[Sub_cnt]=((int16_t)response[15]<<8)|response[14];
//    BSbuffer[s_flag].MY[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
 //   BSbuffer[s_flag].MZ[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
    BSbuffer[s_flag].marking_sw[Sub_cnt]=(int16_t) (LL_GPIO_IsInputPinSet(GPIOA,LL_GPIO_PIN_10));
 80021f8:	7800      	ldrb	r0, [r0, #0]
    BSbuffer[s_flag].GZ4[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 80021fa:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 80021fe:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8002202:	f89d 400d 	ldrb.w	r4, [sp, #13]
 8002206:	3318      	adds	r3, #24
 8002208:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800220c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002210:	809c      	strh	r4, [r3, #4]
    BSbuffer[s_flag].marking_sw[Sub_cnt]=(int16_t) (LL_GPIO_IsInputPinSet(GPIOA,LL_GPIO_PIN_10));
 8002212:	680b      	ldr	r3, [r1, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002214:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002218:	eb03 3340 	add.w	r3, r3, r0, lsl #13
 800221c:	6909      	ldr	r1, [r1, #16]
 800221e:	f503 53d1 	add.w	r3, r3, #6688	; 0x1a20
 8002222:	330c      	adds	r3, #12
 8002224:	f3c1 2180 	ubfx	r1, r1, #10, #1
 8002228:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 800222c:	b007      	add	sp, #28
 800222e:	bd30      	pop	{r4, r5, pc}
 8002230:	20000028 	.word	0x20000028
 8002234:	20000038 	.word	0x20000038
 8002238:	2000004c 	.word	0x2000004c

0800223c <MPU_9D_store_IMU5_SPI3>:

void MPU_9D_store_IMU5_SPI3(void)
{
 800223c:	b530      	push	{r4, r5, lr}
    uint8_t response[21];
    //change all writereg3 for imu5
    WriteReg3_imu5(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 800223e:	218c      	movs	r1, #140	; 0x8c
{
 8002240:	b087      	sub	sp, #28
    WriteReg3_imu5(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 8002242:	2025      	movs	r0, #37	; 0x25
 8002244:	f7ff fb30 	bl	80018a8 <WriteReg3_imu5>
    WriteReg3_imu5(MPUREG_I2C_SLV0_REG, AK8963_HXL);                // I2C slave 0 register address from where to begin data transfer
 8002248:	2103      	movs	r1, #3
 800224a:	2026      	movs	r0, #38	; 0x26
 800224c:	f7ff fb2c 	bl	80018a8 <WriteReg3_imu5>
    WriteReg3_imu5(MPUREG_I2C_SLV0_CTRL, 0x87);                     // Read 7 bytes from the magnetometer
 8002250:	2187      	movs	r1, #135	; 0x87
 8002252:	2027      	movs	r0, #39	; 0x27
 8002254:	f7ff fb28 	bl	80018a8 <WriteReg3_imu5>

    ReadRegs3_imu5(MPUREG_ACCEL_XOUT_H,response,21); //create and change here for IMU5
 8002258:	4669      	mov	r1, sp
 800225a:	2215      	movs	r2, #21
 800225c:	203b      	movs	r0, #59	; 0x3b
 800225e:	f7ff fc45 	bl	8001aec <ReadRegs3_imu5>

    //change these to store for IMU5
    BSbuffer[s_flag].AX5[Sub_cnt]=((int16_t)response[0]<<8)|response[1];
 8002262:	4930      	ldr	r1, [pc, #192]	; (8002324 <MPU_9D_store_IMU5_SPI3+0xe8>)
 8002264:	4830      	ldr	r0, [pc, #192]	; (8002328 <MPU_9D_store_IMU5_SPI3+0xec>)
 8002266:	f89d 5000 	ldrb.w	r5, [sp]
 800226a:	7804      	ldrb	r4, [r0, #0]
 800226c:	680b      	ldr	r3, [r1, #0]
 800226e:	4a2f      	ldr	r2, [pc, #188]	; (800232c <MPU_9D_store_IMU5_SPI3+0xf0>)
 8002270:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 8002274:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002278:	f89d 4001 	ldrb.w	r4, [sp, #1]
 800227c:	3314      	adds	r3, #20
 800227e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002282:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
    BSbuffer[s_flag].AY5[Sub_cnt]=((int16_t)response[2]<<8)|response[3];
 8002286:	7804      	ldrb	r4, [r0, #0]
 8002288:	680b      	ldr	r3, [r1, #0]
 800228a:	f89d 5002 	ldrb.w	r5, [sp, #2]
 800228e:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 8002292:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8002296:	f89d 4003 	ldrb.w	r4, [sp, #3]
 800229a:	330c      	adds	r3, #12
 800229c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80022a0:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80022a4:	809c      	strh	r4, [r3, #4]
    BSbuffer[s_flag].AZ5[Sub_cnt]=((int16_t)response[4]<<8)|response[5];
 80022a6:	7804      	ldrb	r4, [r0, #0]
 80022a8:	680b      	ldr	r3, [r1, #0]
 80022aa:	f89d 5004 	ldrb.w	r5, [sp, #4]
 80022ae:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 80022b2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80022b6:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80022ba:	3308      	adds	r3, #8
 80022bc:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80022c0:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
    BSbuffer[s_flag].GX5[Sub_cnt]=((int16_t)response[8]<<8)|response[9];
 80022c4:	7804      	ldrb	r4, [r0, #0]
 80022c6:	680b      	ldr	r3, [r1, #0]
 80022c8:	f89d 5008 	ldrb.w	r5, [sp, #8]
 80022cc:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 80022d0:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80022d4:	f89d 4009 	ldrb.w	r4, [sp, #9]
 80022d8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80022dc:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80022e0:	809c      	strh	r4, [r3, #4]
    BSbuffer[s_flag].GY5[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 80022e2:	7804      	ldrb	r4, [r0, #0]
 80022e4:	680b      	ldr	r3, [r1, #0]
 80022e6:	f89d 500a 	ldrb.w	r5, [sp, #10]
    BSbuffer[s_flag].GZ5[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 80022ea:	7800      	ldrb	r0, [r0, #0]
    BSbuffer[s_flag].GY5[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 80022ec:	eb03 3344 	add.w	r3, r3, r4, lsl #13
 80022f0:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80022f4:	f89d 400b 	ldrb.w	r4, [sp, #11]
 80022f8:	331c      	adds	r3, #28
 80022fa:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80022fe:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
    BSbuffer[s_flag].GZ5[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 8002302:	680b      	ldr	r3, [r1, #0]
 8002304:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002308:	eb03 3340 	add.w	r3, r3, r0, lsl #13
 800230c:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8002310:	3314      	adds	r3, #20
 8002312:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002316:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800231a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800231e:	8093      	strh	r3, [r2, #4]

}
 8002320:	b007      	add	sp, #28
 8002322:	bd30      	pop	{r4, r5, pc}
 8002324:	20000028 	.word	0x20000028
 8002328:	20000038 	.word	0x20000038
 800232c:	2000004c 	.word	0x2000004c

08002330 <MPU_9D_store_IMU3_SPI2>:

//void MPU_9D_store_IMU3_SPI2(void)
void MPU_9D_store_IMU3_SPI2(int value1, int value2)
{
 8002330:	b570      	push	{r4, r5, r6, lr}
//    BSbuffer[s_flag].GZ3[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
//	mcpwrite(0x0F,0x60);



    BSbuffer[s_flag].AX3[Sub_cnt]=value1;
 8002332:	4d1d      	ldr	r5, [pc, #116]	; (80023a8 <MPU_9D_store_IMU3_SPI2+0x78>)
 8002334:	4c1d      	ldr	r4, [pc, #116]	; (80023ac <MPU_9D_store_IMU3_SPI2+0x7c>)
 8002336:	782e      	ldrb	r6, [r5, #0]
 8002338:	6822      	ldr	r2, [r4, #0]
 800233a:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <MPU_9D_store_IMU3_SPI2+0x80>)
 800233c:	eb02 3246 	add.w	r2, r2, r6, lsl #13
 8002340:	f602 02bc 	addw	r2, r2, #2236	; 0x8bc
 8002344:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    BSbuffer[s_flag].AY3[Sub_cnt]=value2;
 8002348:	7828      	ldrb	r0, [r5, #0]
 800234a:	6822      	ldr	r2, [r4, #0]
 800234c:	eb02 3240 	add.w	r2, r2, r0, lsl #13
 8002350:	f602 1274 	addw	r2, r2, #2420	; 0x974
 8002354:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8002358:	8091      	strh	r1, [r2, #4]
    BSbuffer[s_flag].AZ3[Sub_cnt]=2;
 800235a:	7829      	ldrb	r1, [r5, #0]
 800235c:	6822      	ldr	r2, [r4, #0]
 800235e:	eb02 3241 	add.w	r2, r2, r1, lsl #13
 8002362:	f502 6223 	add.w	r2, r2, #2608	; 0xa30
 8002366:	2102      	movs	r1, #2
 8002368:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    BSbuffer[s_flag].GX3[Sub_cnt]=3;
 800236c:	7829      	ldrb	r1, [r5, #0]
 800236e:	6822      	ldr	r2, [r4, #0]
 8002370:	eb02 3241 	add.w	r2, r2, r1, lsl #13
 8002374:	f602 22e8 	addw	r2, r2, #2792	; 0xae8
 8002378:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800237c:	2103      	movs	r1, #3
 800237e:	8091      	strh	r1, [r2, #4]
    BSbuffer[s_flag].GY3[Sub_cnt]=4;
 8002380:	7829      	ldrb	r1, [r5, #0]
 8002382:	6822      	ldr	r2, [r4, #0]
 8002384:	eb02 3241 	add.w	r2, r2, r1, lsl #13
 8002388:	f602 32a4 	addw	r2, r2, #2980	; 0xba4
 800238c:	2104      	movs	r1, #4
 800238e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    BSbuffer[s_flag].GZ3[Sub_cnt]=5;
 8002392:	7829      	ldrb	r1, [r5, #0]
 8002394:	6822      	ldr	r2, [r4, #0]
 8002396:	eb02 3241 	add.w	r2, r2, r1, lsl #13
 800239a:	f602 425c 	addw	r2, r2, #3164	; 0xc5c
 800239e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80023a2:	2205      	movs	r2, #5
 80023a4:	809a      	strh	r2, [r3, #4]
 80023a6:	bd70      	pop	{r4, r5, r6, pc}
 80023a8:	20000038 	.word	0x20000038
 80023ac:	20000028 	.word	0x20000028
 80023b0:	2000004c 	.word	0x2000004c

080023b4 <MPU1_SPI1_init>:
        mag_data[i-7] = data * Magnetometer_ASA[i-7];
    }
}

void MPU1_SPI1_init(void)
{
 80023b4:	b530      	push	{r4, r5, lr}
 80023b6:	b08b      	sub	sp, #44	; 0x2c
	float temp[3];
	uint8_t i = 0;
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = {
 80023b8:	226b      	movs	r2, #107	; 0x6b
 80023ba:	f88d 2005 	strb.w	r2, [sp, #5]
 80023be:	f88d 2007 	strb.w	r2, [sp, #7]
 80023c2:	226c      	movs	r2, #108	; 0x6c
 80023c4:	f88d 2009 	strb.w	r2, [sp, #9]
 80023c8:	4a33      	ldr	r2, [pc, #204]	; (8002498 <MPU1_SPI1_init+0xe4>)
 80023ca:	7812      	ldrb	r2, [r2, #0]
 80023cc:	f88d 200a 	strb.w	r2, [sp, #10]
 80023d0:	221a      	movs	r2, #26
 80023d2:	f88d 200b 	strb.w	r2, [sp, #11]
 80023d6:	2210      	movs	r2, #16
 80023d8:	f88d 200c 	strb.w	r2, [sp, #12]
 80023dc:	f88d 200e 	strb.w	r2, [sp, #14]
 80023e0:	221c      	movs	r2, #28
 80023e2:	f88d 200f 	strb.w	r2, [sp, #15]
 80023e6:	4a2d      	ldr	r2, [pc, #180]	; (800249c <MPU1_SPI1_init+0xe8>)
 80023e8:	7812      	ldrb	r2, [r2, #0]
 80023ea:	f88d 2010 	strb.w	r2, [sp, #16]
 80023ee:	221d      	movs	r2, #29
 80023f0:	f88d 2011 	strb.w	r2, [sp, #17]
 80023f4:	2212      	movs	r2, #18
 80023f6:	f88d 2012 	strb.w	r2, [sp, #18]
 80023fa:	2237      	movs	r2, #55	; 0x37
 80023fc:	f88d 2013 	strb.w	r2, [sp, #19]
 8002400:	2230      	movs	r2, #48	; 0x30
 8002402:	f88d 2014 	strb.w	r2, [sp, #20]
 8002406:	226a      	movs	r2, #106	; 0x6a
 8002408:	f88d 2015 	strb.w	r2, [sp, #21]
 800240c:	220d      	movs	r2, #13
 800240e:	f88d 2016 	strb.w	r2, [sp, #22]
 8002412:	2224      	movs	r2, #36	; 0x24
 8002414:	f88d 2017 	strb.w	r2, [sp, #23]
 8002418:	220c      	movs	r2, #12
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	f88d 2018 	strb.w	r2, [sp, #24]
 8002420:	2225      	movs	r2, #37	; 0x25
 8002422:	f88d 3004 	strb.w	r3, [sp, #4]
 8002426:	211b      	movs	r1, #27
 8002428:	2301      	movs	r3, #1
 800242a:	f88d 2019 	strb.w	r2, [sp, #25]
 800242e:	220b      	movs	r2, #11
 8002430:	2026      	movs	r0, #38	; 0x26
 8002432:	f88d 3006 	strb.w	r3, [sp, #6]
 8002436:	f88d 100d 	strb.w	r1, [sp, #13]
 800243a:	f88d 201a 	strb.w	r2, [sp, #26]
 800243e:	f88d 301c 	strb.w	r3, [sp, #28]
 8002442:	2163      	movs	r1, #99	; 0x63
 8002444:	2281      	movs	r2, #129	; 0x81
 8002446:	2327      	movs	r3, #39	; 0x27
 8002448:	250a      	movs	r5, #10
 800244a:	2400      	movs	r4, #0
 800244c:	f88d 001b 	strb.w	r0, [sp, #27]
 8002450:	f88d 5020 	strb.w	r5, [sp, #32]
 8002454:	f88d 4008 	strb.w	r4, [sp, #8]
 8002458:	f88d 101d 	strb.w	r1, [sp, #29]
 800245c:	f88d 201e 	strb.w	r2, [sp, #30]
 8002460:	f88d 301f 	strb.w	r3, [sp, #31]
 8002464:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8002468:	2016      	movs	r0, #22
 800246a:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800246e:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 8002472:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8002476:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25

	};


    for(i = 0; i < MPU_InitRegNum; i++) {
        WriteReg1(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 800247a:	ad01      	add	r5, sp, #4
 800247c:	192b      	adds	r3, r5, r4
 800247e:	5d29      	ldrb	r1, [r5, r4]
 8002480:	7858      	ldrb	r0, [r3, #1]
 8002482:	f7ff fa39 	bl	80018f8 <WriteReg1>
 8002486:	3402      	adds	r4, #2
        delay_us(1000);  // I2C must slow down the write speed, otherwise it won't work
 8002488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800248c:	f000 fb16 	bl	8002abc <delay_us>
    for(i = 0; i < MPU_InitRegNum; i++) {
 8002490:	2c22      	cmp	r4, #34	; 0x22
 8002492:	d1f3      	bne.n	800247c <MPU1_SPI1_init+0xc8>

 //   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
 //   return 0;


}
 8002494:	b00b      	add	sp, #44	; 0x2c
 8002496:	bd30      	pop	{r4, r5, pc}
 8002498:	20000005 	.word	0x20000005
 800249c:	20000006 	.word	0x20000006

080024a0 <MPU2_SPI1_init>:

void MPU2_SPI1_init(void)
{
 80024a0:	b530      	push	{r4, r5, lr}
 80024a2:	b08b      	sub	sp, #44	; 0x2c
	float temp[3];
	uint8_t i = 0;
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = {
 80024a4:	226b      	movs	r2, #107	; 0x6b
 80024a6:	f88d 2005 	strb.w	r2, [sp, #5]
 80024aa:	f88d 2007 	strb.w	r2, [sp, #7]
 80024ae:	226c      	movs	r2, #108	; 0x6c
 80024b0:	f88d 2009 	strb.w	r2, [sp, #9]
 80024b4:	4a33      	ldr	r2, [pc, #204]	; (8002584 <MPU2_SPI1_init+0xe4>)
 80024b6:	7812      	ldrb	r2, [r2, #0]
 80024b8:	f88d 200a 	strb.w	r2, [sp, #10]
 80024bc:	221a      	movs	r2, #26
 80024be:	f88d 200b 	strb.w	r2, [sp, #11]
 80024c2:	2210      	movs	r2, #16
 80024c4:	f88d 200c 	strb.w	r2, [sp, #12]
 80024c8:	f88d 200e 	strb.w	r2, [sp, #14]
 80024cc:	221c      	movs	r2, #28
 80024ce:	f88d 200f 	strb.w	r2, [sp, #15]
 80024d2:	4a2d      	ldr	r2, [pc, #180]	; (8002588 <MPU2_SPI1_init+0xe8>)
 80024d4:	7812      	ldrb	r2, [r2, #0]
 80024d6:	f88d 2010 	strb.w	r2, [sp, #16]
 80024da:	221d      	movs	r2, #29
 80024dc:	f88d 2011 	strb.w	r2, [sp, #17]
 80024e0:	2212      	movs	r2, #18
 80024e2:	f88d 2012 	strb.w	r2, [sp, #18]
 80024e6:	2237      	movs	r2, #55	; 0x37
 80024e8:	f88d 2013 	strb.w	r2, [sp, #19]
 80024ec:	2230      	movs	r2, #48	; 0x30
 80024ee:	f88d 2014 	strb.w	r2, [sp, #20]
 80024f2:	226a      	movs	r2, #106	; 0x6a
 80024f4:	f88d 2015 	strb.w	r2, [sp, #21]
 80024f8:	220d      	movs	r2, #13
 80024fa:	f88d 2016 	strb.w	r2, [sp, #22]
 80024fe:	2224      	movs	r2, #36	; 0x24
 8002500:	f88d 2017 	strb.w	r2, [sp, #23]
 8002504:	220c      	movs	r2, #12
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	f88d 2018 	strb.w	r2, [sp, #24]
 800250c:	2225      	movs	r2, #37	; 0x25
 800250e:	f88d 3004 	strb.w	r3, [sp, #4]
 8002512:	211b      	movs	r1, #27
 8002514:	2301      	movs	r3, #1
 8002516:	f88d 2019 	strb.w	r2, [sp, #25]
 800251a:	220b      	movs	r2, #11
 800251c:	2026      	movs	r0, #38	; 0x26
 800251e:	f88d 3006 	strb.w	r3, [sp, #6]
 8002522:	f88d 100d 	strb.w	r1, [sp, #13]
 8002526:	f88d 201a 	strb.w	r2, [sp, #26]
 800252a:	f88d 301c 	strb.w	r3, [sp, #28]
 800252e:	2163      	movs	r1, #99	; 0x63
 8002530:	2281      	movs	r2, #129	; 0x81
 8002532:	2327      	movs	r3, #39	; 0x27
 8002534:	250a      	movs	r5, #10
 8002536:	2400      	movs	r4, #0
 8002538:	f88d 001b 	strb.w	r0, [sp, #27]
 800253c:	f88d 5020 	strb.w	r5, [sp, #32]
 8002540:	f88d 4008 	strb.w	r4, [sp, #8]
 8002544:	f88d 101d 	strb.w	r1, [sp, #29]
 8002548:	f88d 201e 	strb.w	r2, [sp, #30]
 800254c:	f88d 301f 	strb.w	r3, [sp, #31]
 8002550:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8002554:	2016      	movs	r0, #22
 8002556:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800255a:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 800255e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8002562:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25

	};


    for(i = 0; i < MPU_InitRegNum; i++) {
    	WriteReg1_imu2(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 8002566:	ad01      	add	r5, sp, #4
 8002568:	192b      	adds	r3, r5, r4
 800256a:	5d29      	ldrb	r1, [r5, r4]
 800256c:	7858      	ldrb	r0, [r3, #1]
 800256e:	f7ff f9e5 	bl	800193c <WriteReg1_imu2>
 8002572:	3402      	adds	r4, #2
        delay_us(1000);  // I2C must slow down the write speed, otherwise it won't work
 8002574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002578:	f000 faa0 	bl	8002abc <delay_us>
    for(i = 0; i < MPU_InitRegNum; i++) {
 800257c:	2c22      	cmp	r4, #34	; 0x22
 800257e:	d1f3      	bne.n	8002568 <MPU2_SPI1_init+0xc8>

 //   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
 //   return 0;


}
 8002580:	b00b      	add	sp, #44	; 0x2c
 8002582:	bd30      	pop	{r4, r5, pc}
 8002584:	20000005 	.word	0x20000005
 8002588:	20000006 	.word	0x20000006

0800258c <P_IMU1_SPI1_Initialization_at_reset>:
{
 800258c:	b508      	push	{r3, lr}
	P_IMU1_SPI1_Init();         // Accelerometer Chip Initialization
 800258e:	f7ff fbe1 	bl	8001d54 <P_IMU1_SPI1_Init>
	delay_us(7000);         // Arbitrary delay after SPI initialization
 8002592:	f641 3058 	movw	r0, #7000	; 0x1b58
 8002596:	f000 fa91 	bl	8002abc <delay_us>
	MPU1_SPI1_init();
 800259a:	f7ff ff0b 	bl	80023b4 <MPU1_SPI1_init>
}
 800259e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MPU2_SPI1_init();
 80025a2:	f7ff bf7d 	b.w	80024a0 <MPU2_SPI1_init>
	...

080025a8 <MPU4_SPI3_init>:


void MPU4_SPI3_init(void)
{
 80025a8:	b530      	push	{r4, r5, lr}
 80025aa:	b08b      	sub	sp, #44	; 0x2c
//	float temp[3];
	uint8_t i = 0;
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = {
 80025ac:	226b      	movs	r2, #107	; 0x6b
 80025ae:	f88d 2005 	strb.w	r2, [sp, #5]
 80025b2:	f88d 2007 	strb.w	r2, [sp, #7]
 80025b6:	226c      	movs	r2, #108	; 0x6c
 80025b8:	f88d 2009 	strb.w	r2, [sp, #9]
 80025bc:	4a33      	ldr	r2, [pc, #204]	; (800268c <MPU4_SPI3_init+0xe4>)
 80025be:	7812      	ldrb	r2, [r2, #0]
 80025c0:	f88d 200a 	strb.w	r2, [sp, #10]
 80025c4:	221a      	movs	r2, #26
 80025c6:	f88d 200b 	strb.w	r2, [sp, #11]
 80025ca:	2210      	movs	r2, #16
 80025cc:	f88d 200c 	strb.w	r2, [sp, #12]
 80025d0:	f88d 200e 	strb.w	r2, [sp, #14]
 80025d4:	221c      	movs	r2, #28
 80025d6:	f88d 200f 	strb.w	r2, [sp, #15]
 80025da:	4a2d      	ldr	r2, [pc, #180]	; (8002690 <MPU4_SPI3_init+0xe8>)
 80025dc:	7812      	ldrb	r2, [r2, #0]
 80025de:	f88d 2010 	strb.w	r2, [sp, #16]
 80025e2:	221d      	movs	r2, #29
 80025e4:	f88d 2011 	strb.w	r2, [sp, #17]
 80025e8:	2212      	movs	r2, #18
 80025ea:	f88d 2012 	strb.w	r2, [sp, #18]
 80025ee:	2237      	movs	r2, #55	; 0x37
 80025f0:	f88d 2013 	strb.w	r2, [sp, #19]
 80025f4:	2230      	movs	r2, #48	; 0x30
 80025f6:	f88d 2014 	strb.w	r2, [sp, #20]
 80025fa:	226a      	movs	r2, #106	; 0x6a
 80025fc:	f88d 2015 	strb.w	r2, [sp, #21]
 8002600:	220d      	movs	r2, #13
 8002602:	f88d 2016 	strb.w	r2, [sp, #22]
 8002606:	2224      	movs	r2, #36	; 0x24
 8002608:	f88d 2017 	strb.w	r2, [sp, #23]
 800260c:	220c      	movs	r2, #12
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	f88d 2018 	strb.w	r2, [sp, #24]
 8002614:	2225      	movs	r2, #37	; 0x25
 8002616:	f88d 3004 	strb.w	r3, [sp, #4]
 800261a:	211b      	movs	r1, #27
 800261c:	2301      	movs	r3, #1
 800261e:	f88d 2019 	strb.w	r2, [sp, #25]
 8002622:	220b      	movs	r2, #11
 8002624:	2026      	movs	r0, #38	; 0x26
 8002626:	f88d 3006 	strb.w	r3, [sp, #6]
 800262a:	f88d 100d 	strb.w	r1, [sp, #13]
 800262e:	f88d 201a 	strb.w	r2, [sp, #26]
 8002632:	f88d 301c 	strb.w	r3, [sp, #28]
 8002636:	2163      	movs	r1, #99	; 0x63
 8002638:	2281      	movs	r2, #129	; 0x81
 800263a:	2327      	movs	r3, #39	; 0x27
 800263c:	250a      	movs	r5, #10
 800263e:	2400      	movs	r4, #0
 8002640:	f88d 001b 	strb.w	r0, [sp, #27]
 8002644:	f88d 5020 	strb.w	r5, [sp, #32]
 8002648:	f88d 4008 	strb.w	r4, [sp, #8]
 800264c:	f88d 101d 	strb.w	r1, [sp, #29]
 8002650:	f88d 201e 	strb.w	r2, [sp, #30]
 8002654:	f88d 301f 	strb.w	r3, [sp, #31]
 8002658:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800265c:	2016      	movs	r0, #22
 800265e:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8002662:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 8002666:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800266a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	};

	//	 LED_Nucleo_OFF();
    for(i = 0; i < MPU_InitRegNum; i++) {
    	// change here
        WriteReg3(MPU_Init_Data[i][1], MPU_Init_Data[i][0]); // change here
 800266e:	ad01      	add	r5, sp, #4
 8002670:	192b      	adds	r3, r5, r4
 8002672:	5d29      	ldrb	r1, [r5, r4]
 8002674:	7858      	ldrb	r0, [r3, #1]
 8002676:	f7ff f8ef 	bl	8001858 <WriteReg3>
 800267a:	3402      	adds	r4, #2
        delay_us(1000);  // I2C must slow down the write speed, otherwise it won't work
 800267c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002680:	f000 fa1c 	bl	8002abc <delay_us>
    for(i = 0; i < MPU_InitRegNum; i++) {
 8002684:	2c22      	cmp	r4, #34	; 0x22
 8002686:	d1f3      	bne.n	8002670 <MPU4_SPI3_init+0xc8>
 //   set_gyro_scale(BITS_FS_250DPS);

 //   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
 //   return 0;

}
 8002688:	b00b      	add	sp, #44	; 0x2c
 800268a:	bd30      	pop	{r4, r5, pc}
 800268c:	20000005 	.word	0x20000005
 8002690:	20000006 	.word	0x20000006

08002694 <MPU5_SPI3_init>:

void MPU5_SPI3_init(void) // created later for IMU5
{
 8002694:	b530      	push	{r4, r5, lr}
 8002696:	b08b      	sub	sp, #44	; 0x2c
//	float temp[3];
	uint8_t i = 0;
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = {
 8002698:	226b      	movs	r2, #107	; 0x6b
 800269a:	f88d 2005 	strb.w	r2, [sp, #5]
 800269e:	f88d 2007 	strb.w	r2, [sp, #7]
 80026a2:	226c      	movs	r2, #108	; 0x6c
 80026a4:	f88d 2009 	strb.w	r2, [sp, #9]
 80026a8:	4a33      	ldr	r2, [pc, #204]	; (8002778 <MPU5_SPI3_init+0xe4>)
 80026aa:	7812      	ldrb	r2, [r2, #0]
 80026ac:	f88d 200a 	strb.w	r2, [sp, #10]
 80026b0:	221a      	movs	r2, #26
 80026b2:	f88d 200b 	strb.w	r2, [sp, #11]
 80026b6:	2210      	movs	r2, #16
 80026b8:	f88d 200c 	strb.w	r2, [sp, #12]
 80026bc:	f88d 200e 	strb.w	r2, [sp, #14]
 80026c0:	221c      	movs	r2, #28
 80026c2:	f88d 200f 	strb.w	r2, [sp, #15]
 80026c6:	4a2d      	ldr	r2, [pc, #180]	; (800277c <MPU5_SPI3_init+0xe8>)
 80026c8:	7812      	ldrb	r2, [r2, #0]
 80026ca:	f88d 2010 	strb.w	r2, [sp, #16]
 80026ce:	221d      	movs	r2, #29
 80026d0:	f88d 2011 	strb.w	r2, [sp, #17]
 80026d4:	2212      	movs	r2, #18
 80026d6:	f88d 2012 	strb.w	r2, [sp, #18]
 80026da:	2237      	movs	r2, #55	; 0x37
 80026dc:	f88d 2013 	strb.w	r2, [sp, #19]
 80026e0:	2230      	movs	r2, #48	; 0x30
 80026e2:	f88d 2014 	strb.w	r2, [sp, #20]
 80026e6:	226a      	movs	r2, #106	; 0x6a
 80026e8:	f88d 2015 	strb.w	r2, [sp, #21]
 80026ec:	220d      	movs	r2, #13
 80026ee:	f88d 2016 	strb.w	r2, [sp, #22]
 80026f2:	2224      	movs	r2, #36	; 0x24
 80026f4:	f88d 2017 	strb.w	r2, [sp, #23]
 80026f8:	220c      	movs	r2, #12
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	f88d 2018 	strb.w	r2, [sp, #24]
 8002700:	2225      	movs	r2, #37	; 0x25
 8002702:	f88d 3004 	strb.w	r3, [sp, #4]
 8002706:	211b      	movs	r1, #27
 8002708:	2301      	movs	r3, #1
 800270a:	f88d 2019 	strb.w	r2, [sp, #25]
 800270e:	220b      	movs	r2, #11
 8002710:	2026      	movs	r0, #38	; 0x26
 8002712:	f88d 3006 	strb.w	r3, [sp, #6]
 8002716:	f88d 100d 	strb.w	r1, [sp, #13]
 800271a:	f88d 201a 	strb.w	r2, [sp, #26]
 800271e:	f88d 301c 	strb.w	r3, [sp, #28]
 8002722:	2163      	movs	r1, #99	; 0x63
 8002724:	2281      	movs	r2, #129	; 0x81
 8002726:	2327      	movs	r3, #39	; 0x27
 8002728:	250a      	movs	r5, #10
 800272a:	2400      	movs	r4, #0
 800272c:	f88d 001b 	strb.w	r0, [sp, #27]
 8002730:	f88d 5020 	strb.w	r5, [sp, #32]
 8002734:	f88d 4008 	strb.w	r4, [sp, #8]
 8002738:	f88d 101d 	strb.w	r1, [sp, #29]
 800273c:	f88d 201e 	strb.w	r2, [sp, #30]
 8002740:	f88d 301f 	strb.w	r3, [sp, #31]
 8002744:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8002748:	2016      	movs	r0, #22
 800274a:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800274e:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 8002752:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8002756:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	};

	//	 LED_Nucleo_OFF();
    for(i = 0; i < MPU_InitRegNum; i++) {
    	// change here
    	WriteReg3_imu5(MPU_Init_Data[i][1], MPU_Init_Data[i][0]); // change here
 800275a:	ad01      	add	r5, sp, #4
 800275c:	192b      	adds	r3, r5, r4
 800275e:	5d29      	ldrb	r1, [r5, r4]
 8002760:	7858      	ldrb	r0, [r3, #1]
 8002762:	f7ff f8a1 	bl	80018a8 <WriteReg3_imu5>
 8002766:	3402      	adds	r4, #2
        delay_us(1000);  // I2C must slow down the write speed, otherwise it won't work
 8002768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800276c:	f000 f9a6 	bl	8002abc <delay_us>
    for(i = 0; i < MPU_InitRegNum; i++) {
 8002770:	2c22      	cmp	r4, #34	; 0x22
 8002772:	d1f3      	bne.n	800275c <MPU5_SPI3_init+0xc8>
 //   set_gyro_scale(BITS_FS_250DPS);

 //   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
 //   return 0;

}
 8002774:	b00b      	add	sp, #44	; 0x2c
 8002776:	bd30      	pop	{r4, r5, pc}
 8002778:	20000005 	.word	0x20000005
 800277c:	20000006 	.word	0x20000006

08002780 <P_IMU4_SPI3_Initialization_at_reset>:
{
 8002780:	b508      	push	{r3, lr}
	P_IMU4_SPI3_Init(); // peripheral initialization  //work for imu5   too
 8002782:	f7fe fdaf 	bl	80012e4 <P_IMU4_SPI3_Init>
	delay_us(7000);         // Arbitrary delay after SPI initialization
 8002786:	f641 3058 	movw	r0, #7000	; 0x1b58
 800278a:	f000 f997 	bl	8002abc <delay_us>
	MPU4_SPI3_init(); // device initialization // for IMU5 need to create something like "WriteReg3"
 800278e:	f7ff ff0b 	bl	80025a8 <MPU4_SPI3_init>
}
 8002792:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MPU5_SPI3_init(); // later created for IMU5
 8002796:	f7ff bf7d 	b.w	8002694 <MPU5_SPI3_init>
	...

0800279c <Mag_Enc1_Store>:
//	}
	return tempPosition;
}

void Mag_Enc1_Store(void)
{
 800279c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  WRITE_REG(GPIOx->BRR, PinMask);
 80027a0:	4c1d      	ldr	r4, [pc, #116]	; (8002818 <Mag_Enc1_Store+0x7c>)
 80027a2:	2302      	movs	r3, #2
 80027a4:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80027a8:	62a3      	str	r3, [r4, #40]	; 0x28
	uint8_t tempRead = 0;
	uint8_t Flags[6];
	LL_GPIO_ResetOutputPin(ENC1_CS_GPIO_PORT, ENC1_CS_PIN);

	// Sensor feeds out position MSB first
	for(i = 11; i >= 0; i--)
 80027aa:	250b      	movs	r5, #11
	int tempPosition = 0;
 80027ac:	2600      	movs	r6, #0
 80027ae:	46b8      	mov	r8, r7
	{
		LL_GPIO_ResetOutputPin(ENC1_SCLK_GPIO_PORT, ENC1_SCLK_PIN);
		delay_us(10);
 80027b0:	200a      	movs	r0, #10
 80027b2:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 80027b6:	f000 f981 	bl	8002abc <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80027ba:	61a7      	str	r7, [r4, #24]

		LL_GPIO_SetOutputPin(ENC1_SCLK_GPIO_PORT, ENC1_SCLK_PIN);
		delay_us(10);
 80027bc:	200a      	movs	r0, #10
 80027be:	f000 f97d 	bl	8002abc <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80027c2:	6923      	ldr	r3, [r4, #16]
 80027c4:	f3c3 0380 	ubfx	r3, r3, #2, #1

		tempRead = LL_GPIO_IsInputPinSet(ENC1_DATA_GPIO_PORT,ENC1_DATA_PIN) &0x01;
		tempPosition |= (tempRead)<<i;
 80027c8:	40ab      	lsls	r3, r5
	for(i = 11; i >= 0; i--)
 80027ca:	f115 35ff 	adds.w	r5, r5, #4294967295
		tempPosition |= (tempRead)<<i;
 80027ce:	ea46 0603 	orr.w	r6, r6, r3
	for(i = 11; i >= 0; i--)
 80027d2:	d2ed      	bcs.n	80027b0 <Mag_Enc1_Store+0x14>
  WRITE_REG(GPIOx->BRR, PinMask);
 80027d4:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80027d8:	4c0f      	ldr	r4, [pc, #60]	; (8002818 <Mag_Enc1_Store+0x7c>)
 80027da:	2506      	movs	r5, #6
 80027dc:	46b8      	mov	r8, r7
	}

	for(i = 0; i < 6; i++)
	{
		LL_GPIO_ResetOutputPin(ENC1_SCLK_GPIO_PORT, ENC1_SCLK_PIN);
		delay_us(10);
 80027de:	200a      	movs	r0, #10
 80027e0:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 80027e4:	f000 f96a 	bl	8002abc <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80027e8:	61a7      	str	r7, [r4, #24]

		LL_GPIO_SetOutputPin(ENC1_SCLK_GPIO_PORT, ENC1_SCLK_PIN);
		delay_us(10);
 80027ea:	200a      	movs	r0, #10
 80027ec:	f000 f966 	bl	8002abc <delay_us>
	for(i = 0; i < 6; i++)
 80027f0:	3d01      	subs	r5, #1
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80027f2:	6923      	ldr	r3, [r4, #16]
 80027f4:	d1f3      	bne.n	80027de <Mag_Enc1_Store+0x42>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80027f6:	2302      	movs	r3, #2
 80027f8:	61a3      	str	r3, [r4, #24]
		Flags[i] |= (tempRead)<<i;
	}

	LL_GPIO_SetOutputPin(ENC1_CS_GPIO_PORT, ENC1_CS_PIN);

	BSbuffer[s_flag].Enc1[Sub_cnt]=tempPosition;
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <Mag_Enc1_Store+0x80>)
 80027fc:	781a      	ldrb	r2, [r3, #0]
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <Mag_Enc1_Store+0x84>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8002806:	f503 53c5 	add.w	r3, r3, #6304	; 0x18a0
 800280a:	3318      	adds	r3, #24
 800280c:	4a05      	ldr	r2, [pc, #20]	; (8002824 <Mag_Enc1_Store+0x88>)
 800280e:	f822 6013 	strh.w	r6, [r2, r3, lsl #1]
 8002812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002816:	bf00      	nop
 8002818:	48000400 	.word	0x48000400
 800281c:	20000038 	.word	0x20000038
 8002820:	20000028 	.word	0x20000028
 8002824:	2000004c 	.word	0x2000004c

08002828 <Mag_Enc2_Store>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8002828:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <Mag_Enc2_Store+0x80>)
}

void Mag_Enc2_Store(void)
{
 800282a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800282e:	2240      	movs	r2, #64	; 0x40
 8002830:	2780      	movs	r7, #128	; 0x80
 8002832:	4e1e      	ldr	r6, [pc, #120]	; (80028ac <Mag_Enc2_Store+0x84>)
 8002834:	629a      	str	r2, [r3, #40]	; 0x28
	uint8_t tempRead = 0;
	uint8_t Flags[6];
	LL_GPIO_ResetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	// Sensor feeds out position MSB first
	for(i = 11; i >= 0; i--)
 8002836:	240b      	movs	r4, #11
	int tempPosition = 0;
 8002838:	2500      	movs	r5, #0
 800283a:	46b8      	mov	r8, r7
	{
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 800283c:	200a      	movs	r0, #10
 800283e:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 8002842:	f000 f93b 	bl	8002abc <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002846:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8002848:	200a      	movs	r0, #10
 800284a:	f000 f937 	bl	8002abc <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800284e:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <Mag_Enc2_Store+0x80>)
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f3c3 13c0 	ubfx	r3, r3, #7, #1

		tempRead = LL_GPIO_IsInputPinSet(ENC2_DATA_GPIO_PORT,ENC2_DATA_PIN) &0x01;
		tempPosition |= (tempRead)<<i;
 8002856:	40a3      	lsls	r3, r4
	for(i = 11; i >= 0; i--)
 8002858:	f114 34ff 	adds.w	r4, r4, #4294967295
		tempPosition |= (tempRead)<<i;
 800285c:	ea45 0503 	orr.w	r5, r5, r3
	for(i = 11; i >= 0; i--)
 8002860:	d2ec      	bcs.n	800283c <Mag_Enc2_Store+0x14>
  WRITE_REG(GPIOx->BRR, PinMask);
 8002862:	2780      	movs	r7, #128	; 0x80
 8002864:	4e11      	ldr	r6, [pc, #68]	; (80028ac <Mag_Enc2_Store+0x84>)
 8002866:	2406      	movs	r4, #6
 8002868:	46b8      	mov	r8, r7
	}

	for(i = 0; i < 6; i++)
	{
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 800286a:	200a      	movs	r0, #10
 800286c:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 8002870:	f000 f924 	bl	8002abc <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002874:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8002876:	200a      	movs	r0, #10
 8002878:	f000 f920 	bl	8002abc <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800287c:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <Mag_Enc2_Store+0x80>)
	for(i = 0; i < 6; i++)
 800287e:	3c01      	subs	r4, #1
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	d1f2      	bne.n	800286a <Mag_Enc2_Store+0x42>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002884:	2240      	movs	r2, #64	; 0x40
 8002886:	619a      	str	r2, [r3, #24]
		Flags[i] |= (tempRead)<<i;
	}

	LL_GPIO_SetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	BSbuffer[s_flag].Enc2[Sub_cnt]=tempPosition;
 8002888:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <Mag_Enc2_Store+0x88>)
 800288a:	781a      	ldrb	r2, [r3, #0]
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <Mag_Enc2_Store+0x8c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8002894:	f503 53cb 	add.w	r3, r3, #6496	; 0x1960
 8002898:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <Mag_Enc2_Store+0x90>)
 800289a:	3310      	adds	r3, #16
 800289c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80028a0:	809d      	strh	r5, [r3, #4]
 80028a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028a6:	bf00      	nop
 80028a8:	48000800 	.word	0x48000800
 80028ac:	48000400 	.word	0x48000400
 80028b0:	20000038 	.word	0x20000038
 80028b4:	20000028 	.word	0x20000028
 80028b8:	2000004c 	.word	0x2000004c

080028bc <Enc2_GetPosition>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80028bc:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <Enc2_GetPosition+0x6c>)
 80028be:	2240      	movs	r2, #64	; 0x40
}

int Enc2_GetPosition(void)
{
 80028c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i = 0;
	uint8_t tempRead = 0;
	uint8_t Flags[6];

	LL_GPIO_ResetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);
	delay_us(100);
 80028c4:	2064      	movs	r0, #100	; 0x64
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28
 80028c8:	f000 f8f8 	bl	8002abc <delay_us>
 80028cc:	2780      	movs	r7, #128	; 0x80
 80028ce:	4e17      	ldr	r6, [pc, #92]	; (800292c <Enc2_GetPosition+0x70>)
	// Sensor feeds out position MSB first
	for(i = DataPrecision-1; i >= 0; i--)
 80028d0:	240b      	movs	r4, #11
	int tempPosition = 0;
 80028d2:	2500      	movs	r5, #0
 80028d4:	46b8      	mov	r8, r7
	{
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(100);
 80028d6:	2064      	movs	r0, #100	; 0x64
 80028d8:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 80028dc:	f000 f8ee 	bl	8002abc <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80028e0:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(100);
 80028e2:	2064      	movs	r0, #100	; 0x64
 80028e4:	f000 f8ea 	bl	8002abc <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80028e8:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <Enc2_GetPosition+0x6c>)
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1

		tempRead = LL_GPIO_IsInputPinSet(ENC2_DATA_GPIO_PORT,ENC2_DATA_PIN) &0x01;
		tempPosition |= (tempRead)<<i;
 80028f0:	40a3      	lsls	r3, r4
	for(i = DataPrecision-1; i >= 0; i--)
 80028f2:	f114 34ff 	adds.w	r4, r4, #4294967295
		tempPosition |= (tempRead)<<i;
 80028f6:	ea45 0503 	orr.w	r5, r5, r3
	for(i = DataPrecision-1; i >= 0; i--)
 80028fa:	d2ec      	bcs.n	80028d6 <Enc2_GetPosition+0x1a>
  WRITE_REG(GPIOx->BRR, PinMask);
 80028fc:	2780      	movs	r7, #128	; 0x80
 80028fe:	4e0b      	ldr	r6, [pc, #44]	; (800292c <Enc2_GetPosition+0x70>)
 8002900:	2406      	movs	r4, #6
 8002902:	46b8      	mov	r8, r7
	}

	for(i = 0; i < 6; i++)
	{
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(100);
 8002904:	2064      	movs	r0, #100	; 0x64
 8002906:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 800290a:	f000 f8d7 	bl	8002abc <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800290e:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(100);
 8002910:	2064      	movs	r0, #100	; 0x64
 8002912:	f000 f8d3 	bl	8002abc <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002916:	4b04      	ldr	r3, [pc, #16]	; (8002928 <Enc2_GetPosition+0x6c>)
	for(i = 0; i < 6; i++)
 8002918:	3c01      	subs	r4, #1
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	d1f2      	bne.n	8002904 <Enc2_GetPosition+0x48>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800291e:	2240      	movs	r2, #64	; 0x40
 8002920:	619a      	str	r2, [r3, #24]
	}

	LL_GPIO_SetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	return tempPosition;
}
 8002922:	4628      	mov	r0, r5
 8002924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002928:	48000800 	.word	0x48000800
 800292c:	48000400 	.word	0x48000400

08002930 <knee_angle>:

float knee_angle(void)
{ float knee_position;
 8002930:	b508      	push	{r3, lr}
knee_position=-(Enc2_GetPosition()*0.088-306); //-((Prosthesis_Data(:,36)*0.088)-306)
 8002932:	f7ff ffc3 	bl	80028bc <Enc2_GetPosition>
 8002936:	f7fd fd99 	bl	800046c <__aeabi_i2d>
 800293a:	a309      	add	r3, pc, #36	; (adr r3, 8002960 <knee_angle+0x30>)
 800293c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002940:	f7fd fdfa 	bl	8000538 <__aeabi_dmul>
 8002944:	a308      	add	r3, pc, #32	; (adr r3, 8002968 <knee_angle+0x38>)
 8002946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294a:	f7fd fc41 	bl	80001d0 <__aeabi_dsub>
 800294e:	f7fe f805 	bl	800095c <__aeabi_d2f>
return knee_position;
}
 8002952:	ee07 0a90 	vmov	s15, r0
 8002956:	eeb1 0a67 	vneg.f32	s0, s15
 800295a:	bd08      	pop	{r3, pc}
 800295c:	f3af 8000 	nop.w
 8002960:	020c49ba 	.word	0x020c49ba
 8002964:	3fb6872b 	.word	0x3fb6872b
 8002968:	00000000 	.word	0x00000000
 800296c:	40732000 	.word	0x40732000

08002970 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002970:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <HAL_MspInit+0x88>)
{
 8002972:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002974:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	661a      	str	r2, [r3, #96]	; 0x60
 800297c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800297e:	f002 0201 	and.w	r2, r2, #1
 8002982:	9200      	str	r2, [sp, #0]
 8002984:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002988:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800298c:	659a      	str	r2, [r3, #88]	; 0x58
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002994:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002996:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002998:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299a:	f000 fa0d 	bl	8002db8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	4611      	mov	r1, r2
 80029a2:	f06f 000b 	mvn.w	r0, #11
 80029a6:	f000 fa19 	bl	8002ddc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80029aa:	2200      	movs	r2, #0
 80029ac:	4611      	mov	r1, r2
 80029ae:	f06f 000a 	mvn.w	r0, #10
 80029b2:	f000 fa13 	bl	8002ddc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	4611      	mov	r1, r2
 80029ba:	f06f 0009 	mvn.w	r0, #9
 80029be:	f000 fa0d 	bl	8002ddc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	4611      	mov	r1, r2
 80029c6:	f06f 0004 	mvn.w	r0, #4
 80029ca:	f000 fa07 	bl	8002ddc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	4611      	mov	r1, r2
 80029d2:	f06f 0003 	mvn.w	r0, #3
 80029d6:	f000 fa01 	bl	8002ddc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	4611      	mov	r1, r2
 80029de:	f06f 0001 	mvn.w	r0, #1
 80029e2:	f000 f9fb 	bl	8002ddc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	4611      	mov	r1, r2
 80029ea:	f04f 30ff 	mov.w	r0, #4294967295
 80029ee:	f000 f9f5 	bl	8002ddc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029f2:	b003      	add	sp, #12
 80029f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80029f8:	40021000 	.word	0x40021000

080029fc <NMI_Handler>:
 80029fc:	4770      	bx	lr

080029fe <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80029fe:	e7fe      	b.n	80029fe <HardFault_Handler>

08002a00 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002a00:	e7fe      	b.n	8002a00 <MemManage_Handler>

08002a02 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002a02:	e7fe      	b.n	8002a02 <BusFault_Handler>

08002a04 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002a04:	e7fe      	b.n	8002a04 <UsageFault_Handler>

08002a06 <SVC_Handler>:
 8002a06:	4770      	bx	lr

08002a08 <DebugMon_Handler>:
 8002a08:	4770      	bx	lr

08002a0a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002a0a:	4770      	bx	lr

08002a0c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002a0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a0e:	f000 f9c5 	bl	8002d9c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002a16:	f000 ba2c 	b.w	8002e72 <HAL_SYSTICK_IRQHandler>
	...

08002a1c <OTG_FS_IRQHandler>:
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  // ES HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
	HAL_PCD_IRQHandler(&hpcd);
 8002a1c:	4801      	ldr	r0, [pc, #4]	; (8002a24 <OTG_FS_IRQHandler+0x8>)
 8002a1e:	f000 ba75 	b.w	8002f0c <HAL_PCD_IRQHandler>
 8002a22:	bf00      	nop
 8002a24:	200089e8 	.word	0x200089e8

08002a28 <DMA2_Channel4_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Channel4_IRQHandler(void)
{
  if((uSdHandle.SdOperation == SD_READ_MULTIPLE_BLOCK) || (uSdHandle.SdOperation == SD_READ_SINGLE_BLOCK))
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <DMA2_Channel4_IRQHandler+0x14>)
 8002a2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a2c:	2a01      	cmp	r2, #1
 8002a2e:	d001      	beq.n	8002a34 <DMA2_Channel4_IRQHandler+0xc>
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	b90b      	cbnz	r3, 8002a38 <DMA2_Channel4_IRQHandler+0x10>
  {
    BSP_SD_DMA_Rx_IRQHandler();
 8002a34:	f7fe b8b4 	b.w	8000ba0 <BSP_SD_DMA_Rx_IRQHandler>
  }
  else
  {
    BSP_SD_DMA_Tx_IRQHandler();
 8002a38:	f7fe b8ac 	b.w	8000b94 <BSP_SD_DMA_Tx_IRQHandler>
 8002a3c:	20008090 	.word	0x20008090

08002a40 <SDMMC1_IRQHandler>:
  * @param  None
  * @retval None
  */
void SDMMC1_IRQHandler(void)
{
  BSP_SD_IRQHandler();
 8002a40:	f7fe b8a2 	b.w	8000b88 <BSP_SD_IRQHandler>

08002a44 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a44:	490f      	ldr	r1, [pc, #60]	; (8002a84 <SystemInit+0x40>)
 8002a46:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <SystemInit+0x44>)
 8002a54:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a56:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002a58:	f042 0201 	orr.w	r2, r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002a5e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002a66:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002a6a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8002a6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a70:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a78:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a7a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a80:	608b      	str	r3, [r1, #8]
 8002a82:	4770      	bx	lr
 8002a84:	e000ed00 	.word	0xe000ed00
 8002a88:	40021000 	.word	0x40021000

08002a8c <LL_APB1_GRP1_EnableClock>:
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <LL_APB1_GRP1_EnableClock+0x18>)
 8002a8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a90:	4302      	orrs	r2, r0
 8002a92:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 8002a96:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002a98:	4018      	ands	r0, r3
 8002a9a:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8002a9c:	9b01      	ldr	r3, [sp, #4]
}
 8002a9e:	b002      	add	sp, #8
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000

08002aa8 <LL_RCC_SetUSBClockSource.constprop.3>:
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, USBxSource);
 8002aa8:	4a03      	ldr	r2, [pc, #12]	; (8002ab8 <LL_RCC_SetUSBClockSource.constprop.3+0x10>)
 8002aaa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002aae:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8002ab2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002ab6:	4770      	bx	lr
 8002ab8:	40021000 	.word	0x40021000

08002abc <delay_us>:
extern uint8_t USB_Mode;
extern uint8_t Enter_Into_DFU,MSC_continue,VCP_continue;

void delay_us(uint32_t us){
    uint32_t i,k;
    for(k=0;k<us;k++)
 8002abc:	2300      	movs	r3, #0
 8002abe:	4283      	cmp	r3, r0
 8002ac0:	d100      	bne.n	8002ac4 <delay_us+0x8>
    {
    	for(i=0;i<11;i++)
         __NOP();  // Timed at 48 MHz clock
    }
}
 8002ac2:	4770      	bx	lr
 8002ac4:	220b      	movs	r2, #11
  __ASM volatile ("nop");
 8002ac6:	bf00      	nop
    	for(i=0;i<11;i++)
 8002ac8:	3a01      	subs	r2, #1
 8002aca:	d1fc      	bne.n	8002ac6 <delay_us+0xa>
    for(k=0;k<us;k++)
 8002acc:	3301      	adds	r3, #1
 8002ace:	e7f6      	b.n	8002abe <delay_us+0x2>

08002ad0 <LSE_ON>:
	/* Following 2lines are necessary before LSE
	RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN; // PWR clock is necessary for LSE
	PWR->CR1 |= PWR_CR1_DBP;  // Enable Backup access
	*/

	RCC->BDCR |= RCC_BDCR_LSEON;  // LSE ON
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <LSE_ON+0x18>)
 8002ad2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	while(((RCC->BDCR) & RCC_BDCR_LSERDY) != (RCC_BDCR_LSERDY)); // wait for LSE to get ready
 8002ade:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002ae2:	0792      	lsls	r2, r2, #30
 8002ae4:	d5fb      	bpl.n	8002ade <LSE_ON+0xe>

}
 8002ae6:	4770      	bx	lr
 8002ae8:	40021000 	.word	0x40021000

08002aec <SystemClock_Config_MSI_80MHz>:
*            PLL_R                          = 4
*            Flash Latency(WS)              = 4
*/

void SystemClock_Config_MSI_80MHz(void)
{
 8002aec:	b510      	push	{r4, lr}
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 8002aee:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
{
 8002af2:	b092      	sub	sp, #72	; 0x48
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 8002af4:	f7ff ffca 	bl	8002a8c <LL_APB1_GRP1_EnableClock>
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002af8:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <SystemClock_Config_MSI_80MHz+0xd4>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b00:	601a      	str	r2, [r3, #0]
  * @rmtoll CR2          USV           LL_PWR_EnableVddUSB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b08:	605a      	str	r2, [r3, #4]
  * @rmtoll CR2          USV           LL_PWR_IsEnabledVddUSB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledVddUSB(void)
{
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 8002b0a:	685a      	ldr	r2, [r3, #4]
	  LL_PWR_EnableBkUpAccess();                              // Enable Backup access (needed for LSE clock)
	  LL_PWR_EnableVddUSB();                                  // Enable VDDUSB supply for USB
	  while(!LL_PWR_IsEnabledVddUSB());                       // Wait for VDDUSB supply to activate
 8002b0c:	0552      	lsls	r2, r2, #21
 8002b0e:	d5fc      	bpl.n	8002b0a <SystemClock_Config_MSI_80MHz+0x1e>

	  /* Enable MSI Oscillator and activate PLL with MSI as source */
	  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8002b10:	2310      	movs	r3, #16
 8002b12:	9301      	str	r3, [sp, #4]
	  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8002b14:	2301      	movs	r3, #1
 8002b16:	9307      	str	r3, [sp, #28]
	//  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
	  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 8002b18:	930c      	str	r3, [sp, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLM            = 6;
 8002b1a:	2306      	movs	r3, #6
 8002b1c:	930d      	str	r3, [sp, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLN            = 40;
 8002b1e:	2328      	movs	r3, #40	; 0x28
 8002b20:	930e      	str	r3, [sp, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 8002b22:	2307      	movs	r3, #7
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
	  RCC_OscInitStruct.PLL.PLLR            = 4;

	  HAL_RCC_OscConfig(&RCC_OscInitStruct);

	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8002b24:	4c27      	ldr	r4, [pc, #156]	; (8002bc4 <SystemClock_Config_MSI_80MHz+0xd8>)
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 8002b26:	930f      	str	r3, [sp, #60]	; 0x3c
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8002b28:	22b0      	movs	r2, #176	; 0xb0
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8002b2a:	2304      	movs	r3, #4
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8002b2c:	9209      	str	r2, [sp, #36]	; 0x24
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002b2e:	eb0d 0003 	add.w	r0, sp, r3
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8002b32:	2202      	movs	r2, #2
 8002b34:	920b      	str	r2, [sp, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8002b36:	9310      	str	r3, [sp, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLR            = 4;
 8002b38:	9311      	str	r3, [sp, #68]	; 0x44
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002b3a:	f000 feb3 	bl	80038a4 <HAL_RCC_OscConfig>
	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8002b3e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002b42:	f023 0320 	bic.w	r3, r3, #32
 8002b46:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	  CLEAR_BIT(RCC->CIER, (RCC_IT_LSECSS));
 8002b4a:	69a3      	ldr	r3, [r4, #24]
 8002b4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b50:	61a3      	str	r3, [r4, #24]

	  LSE_ON();                                                     //Start LSE for RTC and LPTIM timer
 8002b52:	f7ff ffbd 	bl	8002ad0 <LSE_ON>
	  HAL_RCCEx_EnableMSIPLLMode();
 8002b56:	f001 f8e9 	bl	8003d2c <HAL_RCCEx_EnableMSIPLLMode>


	  LL_RCC_SetSDMMCClockSource(LL_RCC_SDMMC1_CLKSOURCE_MSI);
 8002b5a:	f7ff ffa5 	bl	8002aa8 <LL_RCC_SetUSBClockSource.constprop.3>
	  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_MSI);
 8002b5e:	f7ff ffa3 	bl	8002aa8 <LL_RCC_SetUSBClockSource.constprop.3>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002b62:	68a3      	ldr	r3, [r4, #8]
 8002b64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b68:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b6a:	68a3      	ldr	r3, [r4, #8]
 8002b6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b74:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b76:	68a3      	ldr	r3, [r4, #8]
 8002b78:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002b7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b80:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002b82:	68a3      	ldr	r3, [r4, #8]
 8002b84:	f023 0303 	bic.w	r3, r3, #3
 8002b88:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_FLASH_LATENCY_4
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002b8a:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <SystemClock_Config_MSI_80MHz+0xdc>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	f022 0207 	bic.w	r2, r2, #7
 8002b92:	f042 0204 	orr.w	r2, r2, #4
 8002b96:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_3
  *         @arg @ref LL_FLASH_LATENCY_4
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	f002 0207 	and.w	r2, r2, #7
	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2); //1
	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);

	  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
	  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4);
 8002b9e:	2a04      	cmp	r2, #4
 8002ba0:	d1fa      	bne.n	8002b98 <SystemClock_Config_MSI_80MHz+0xac>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002ba2:	68a3      	ldr	r3, [r4, #8]
 8002ba4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ba8:	60a3      	str	r3, [r4, #8]

	  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_MSI);  // MSI clock is set as default clock after wake up from Stop
	  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();               // Disable USB clock to save power
 8002baa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002bac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bb0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002bb2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	9b00      	ldr	r3, [sp, #0]

		}
 8002bbc:	b012      	add	sp, #72	; 0x48
 8002bbe:	bd10      	pop	{r4, pc}
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40022000 	.word	0x40022000

08002bcc <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8002bcc:	f500 7162 	add.w	r1, r0, #904	; 0x388
 8002bd0:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8002bd4:	f001 bc6a 	b.w	80044ac <USBD_LL_SetupStage>

08002bd8 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002bd8:	231c      	movs	r3, #28
 8002bda:	fb03 0301 	mla	r3, r3, r1, r0
 8002bde:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8002be2:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 8002be6:	f001 bc8e 	b.w	8004506 <USBD_LL_DataOutStage>

08002bea <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002bea:	231c      	movs	r3, #28
 8002bec:	fb03 0301 	mla	r3, r3, r1, r0
 8002bf0:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8002bf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bf6:	f001 bcb8 	b.w	800456a <USBD_LL_DataInStage>

08002bfa <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 8002bfa:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8002bfe:	f001 bd34 	b.w	800466a <USBD_LL_SOF>

08002c02 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8002c02:	b510      	push	{r4, lr}
 8002c04:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8002c06:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8002c0a:	f001 fcfd 	bl	8004608 <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8002c0e:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 8002c12:	2101      	movs	r1, #1
}
 8002c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8002c18:	f001 bd15 	b.w	8004646 <USBD_LL_SetSpeed>

08002c1c <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
  USBD_LL_Suspend(hpcd->pData);
 8002c1c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8002c20:	f001 bd14 	b.w	800464c <USBD_LL_Suspend>

08002c24 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 8002c24:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8002c28:	f001 bd19 	b.w	800465e <USBD_LL_Resume>

08002c2c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8002c2c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8002c30:	f001 bd29 	b.w	8004686 <USBD_LL_IsoOUTIncomplete>

08002c34 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8002c34:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8002c38:	f001 bd23 	b.w	8004682 <USBD_LL_IsoINIncomplete>

08002c3c <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 8002c3c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8002c40:	f001 bd23 	b.w	800468a <USBD_LL_DevConnected>

08002c44 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 8002c44:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8002c48:	f001 bd21 	b.w	800468e <USBD_LL_DevDisconnected>

08002c4c <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8002c4c:	b510      	push	{r4, lr}
 8002c4e:	461c      	mov	r4, r3
  HAL_PCD_EP_Open(pdev->pData,
 8002c50:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c54:	4613      	mov	r3, r2
 8002c56:	4622      	mov	r2, r4
 8002c58:	f000 fc7c 	bl	8003554 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	bd10      	pop	{r4, pc}

08002c60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002c60:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002c62:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c66:	f000 fceb 	bl	8003640 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	bd08      	pop	{r3, pc}

08002c6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002c6e:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8002c70:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c74:	f000 fd10 	bl	8003698 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8002c78:	2000      	movs	r0, #0
 8002c7a:	bd08      	pop	{r3, pc}

08002c7c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002c7c:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8002c80:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8002c84:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8002c88:	bf1b      	ittet	ne
 8002c8a:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8002c8e:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8002c92:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8002c96:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8002c9a:	bf08      	it	eq
 8002c9c:	f891 01e2 	ldrbeq.w	r0, [r1, #482]	; 0x1e2
  }
}
 8002ca0:	4770      	bx	lr

08002ca2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002ca2:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002ca4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002ca8:	f000 fc40 	bl	800352c <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8002cac:	2000      	movs	r0, #0
 8002cae:	bd08      	pop	{r3, pc}

08002cb0 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8002cb0:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002cb2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002cb6:	f000 fc9c 	bl	80035f2 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8002cba:	2000      	movs	r0, #0
 8002cbc:	bd08      	pop	{r3, pc}

08002cbe <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8002cbe:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002cc0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002cc4:	f000 fc6b 	bl	800359e <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8002cc8:	2000      	movs	r0, #0
 8002cca:	bd08      	pop	{r3, pc}

08002ccc <Reboot_Handler>:
    .section	.text.Reboot_Handler
	//.weak	Reboot_Handler
	.type	Reboot_Handler, %function
Reboot_Handler:

               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 8002ccc:	4805      	ldr	r0, [pc, #20]	; (8002ce4 <Reboot_Handler+0x18>)
                LDR     R1, =0x00000001 // ENABLE SYSCFG CLOCK
 8002cce:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 8002cd0:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 8002cd2:	4805      	ldr	r0, [pc, #20]	; (8002ce8 <Reboot_Handler+0x1c>)
                LDR     R1, =0x00000001 // MAP ROM AT ZERO
 8002cd4:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 8002cd6:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 8002cd8:	4804      	ldr	r0, [pc, #16]	; (8002cec <Reboot_Handler+0x20>)
                LDR     SP,[R0, #0]     // SP @ +0
 8002cda:	f8d0 d000 	ldr.w	sp, [r0]
                LDR     R0,[R0, #4]    //  PC @ +4
 8002cde:	6840      	ldr	r0, [r0, #4]
                BX      R0
 8002ce0:	4700      	bx	r0
 8002ce2:	0000      	.short	0x0000
               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 8002ce4:	40021060 	.word	0x40021060
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 8002ce8:	40010000 	.word	0x40010000
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 8002cec:	1fff0000 	.word	0x1fff0000

08002cf0 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 8002cf0:	4811      	ldr	r0, [pc, #68]	; (8002d38 <LoopForever+0x4>)
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 8002cf2:	4912      	ldr	r1, [pc, #72]	; (8002d3c <LoopForever+0x8>)
                LDR     R2, [R0, #0]
 8002cf4:	6802      	ldr	r2, [r0, #0]
                STR     R0, [R0, #0]     // Invalidate Bootloader_Key_Value
 8002cf6:	6000      	str	r0, [r0, #0]
                // zero data at Bootloader_Ram_Key_Address to avoid looping in DFU Mode

                CMP     R2, R1
 8002cf8:	428a      	cmp	r2, r1
                BEQ     Reboot_Handler    // Jump to DfuModeEntry Lable if Bootloader_Key_Value matches
 8002cfa:	f43f afe7 	beq.w	8002ccc <Reboot_Handler>

                // Conitnue without entering DFU Mode


  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002cfe:	f8df d040 	ldr.w	sp, [pc, #64]	; 8002d40 <LoopForever+0xc>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002d02:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002d04:	e003      	b.n	8002d0e <LoopCopyDataInit>

08002d06 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <LoopForever+0x10>)
	ldr	r3, [r3, r1]
 8002d08:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002d0a:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002d0c:	3104      	adds	r1, #4

08002d0e <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002d0e:	480e      	ldr	r0, [pc, #56]	; (8002d48 <LoopForever+0x14>)
	ldr	r3, =_edata
 8002d10:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <LoopForever+0x18>)
	adds	r2, r0, r1
 8002d12:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002d14:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002d16:	d3f6      	bcc.n	8002d06 <CopyDataInit>
	ldr	r2, =_sbss
 8002d18:	4a0d      	ldr	r2, [pc, #52]	; (8002d50 <LoopForever+0x1c>)
	b	LoopFillZerobss
 8002d1a:	e002      	b.n	8002d22 <LoopFillZerobss>

08002d1c <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002d1c:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002d1e:	f842 3b04 	str.w	r3, [r2], #4

08002d22 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002d22:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <LoopForever+0x20>)
	cmp	r2, r3
 8002d24:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002d26:	d3f9      	bcc.n	8002d1c <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d28:	f7ff fe8c 	bl	8002a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d2c:	f001 fe82 	bl	8004a34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d30:	f7fe f856 	bl	8000de0 <main>

08002d34 <LoopForever>:

LoopForever:
    b LoopForever
 8002d34:	e7fe      	b.n	8002d34 <LoopForever>
 8002d36:	0000      	.short	0x0000
                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 8002d38:	20017ff0 	.word	0x20017ff0
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 8002d3c:	deadbeef 	.word	0xdeadbeef
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d40:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002d44:	08004af4 	.word	0x08004af4
	ldr	r0, =_sdata
 8002d48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002d4c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002d50:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002d54:	20008db8 	.word	0x20008db8

08002d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d58:	e7fe      	b.n	8002d58 <ADC1_2_IRQHandler>
	...

08002d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d5c:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <HAL_InitTick+0x24>)
{
 8002d60:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d68:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d6c:	f000 f86a 	bl	8002e44 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8002d70:	2200      	movs	r2, #0
 8002d72:	4621      	mov	r1, r4
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	f000 f830 	bl	8002ddc <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	bd10      	pop	{r4, pc}
 8002d80:	20000008 	.word	0x20000008

08002d84 <HAL_Init>:
{
 8002d84:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d86:	2003      	movs	r0, #3
 8002d88:	f000 f816 	bl	8002db8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f7ff ffe5 	bl	8002d5c <HAL_InitTick>
  HAL_MspInit();
 8002d92:	f7ff fded 	bl	8002970 <HAL_MspInit>
}
 8002d96:	2000      	movs	r0, #0
 8002d98:	bd08      	pop	{r3, pc}
	...

08002d9c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002d9c:	4a02      	ldr	r2, [pc, #8]	; (8002da8 <HAL_IncTick+0xc>)
 8002d9e:	6813      	ldr	r3, [r2, #0]
 8002da0:	3301      	adds	r3, #1
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	20008db4 	.word	0x20008db4

08002dac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002dac:	4b01      	ldr	r3, [pc, #4]	; (8002db4 <HAL_GetTick+0x8>)
 8002dae:	6818      	ldr	r0, [r3, #0]
}
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20008db4 	.word	0x20008db4

08002db8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db8:	4a07      	ldr	r2, [pc, #28]	; (8002dd8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002dba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dbc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002dc0:	041b      	lsls	r3, r3, #16
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002dc8:	0200      	lsls	r0, r0, #8
 8002dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8002dd2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002dd4:	60d3      	str	r3, [r2, #12]
 8002dd6:	4770      	bx	lr
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ddc:	4b17      	ldr	r3, [pc, #92]	; (8002e3c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dde:	b530      	push	{r4, r5, lr}
 8002de0:	68dc      	ldr	r4, [r3, #12]
 8002de2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	bf28      	it	cs
 8002df0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df2:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df4:	f04f 0501 	mov.w	r5, #1
 8002df8:	fa05 f303 	lsl.w	r3, r5, r3
 8002dfc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e00:	bf8c      	ite	hi
 8002e02:	3c03      	subhi	r4, #3
 8002e04:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e06:	4019      	ands	r1, r3
 8002e08:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e0a:	fa05 f404 	lsl.w	r4, r5, r4
 8002e0e:	3c01      	subs	r4, #1
 8002e10:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8002e12:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e14:	ea42 0201 	orr.w	r2, r2, r1
 8002e18:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1c:	bfaf      	iteee	ge
 8002e1e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e22:	f000 000f 	andlt.w	r0, r0, #15
 8002e26:	4b06      	ldrlt	r3, [pc, #24]	; (8002e40 <HAL_NVIC_SetPriority+0x64>)
 8002e28:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2a:	bfa5      	ittet	ge
 8002e2c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8002e30:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e32:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e34:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8002e38:	bd30      	pop	{r4, r5, pc}
 8002e3a:	bf00      	nop
 8002e3c:	e000ed00 	.word	0xe000ed00
 8002e40:	e000ed14 	.word	0xe000ed14

08002e44 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e44:	3801      	subs	r0, #1
 8002e46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002e4a:	d20a      	bcs.n	8002e62 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4e:	4a07      	ldr	r2, [pc, #28]	; (8002e6c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e50:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e52:	21f0      	movs	r1, #240	; 0xf0
 8002e54:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e58:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e5a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e5c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002e62:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	e000e010 	.word	0xe000e010
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002e70:	4770      	bx	lr

08002e72 <HAL_SYSTICK_IRQHandler>:
{
 8002e72:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8002e74:	f7ff fffc 	bl	8002e70 <HAL_SYSTICK_Callback>
 8002e78:	bd08      	pop	{r3, pc}

08002e7a <HAL_DMA_IRQHandler>:
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e7a:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002e7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8002e7e:	6803      	ldr	r3, [r0, #0]
{
 8002e80:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e82:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002e84:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002e86:	2404      	movs	r4, #4
 8002e88:	4094      	lsls	r4, r2
 8002e8a:	4226      	tst	r6, r4
 8002e8c:	d00e      	beq.n	8002eac <HAL_DMA_IRQHandler+0x32>
 8002e8e:	f015 0f04 	tst.w	r5, #4
 8002e92:	d00b      	beq.n	8002eac <HAL_DMA_IRQHandler+0x32>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	0692      	lsls	r2, r2, #26
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e98:	bf5e      	ittt	pl
 8002e9a:	681a      	ldrpl	r2, [r3, #0]
 8002e9c:	f022 0204 	bicpl.w	r2, r2, #4
 8002ea0:	601a      	strpl	r2, [r3, #0]
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002ea2:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8002ea4:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8002ea6:	b373      	cbz	r3, 8002f06 <HAL_DMA_IRQHandler+0x8c>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8002ea8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002eaa:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002eac:	2402      	movs	r4, #2
 8002eae:	4094      	lsls	r4, r2
 8002eb0:	4226      	tst	r6, r4
 8002eb2:	d012      	beq.n	8002eda <HAL_DMA_IRQHandler+0x60>
 8002eb4:	f015 0f02 	tst.w	r5, #2
 8002eb8:	d00f      	beq.n	8002eda <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	0695      	lsls	r5, r2, #26
 8002ebe:	d406      	bmi.n	8002ece <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	f022 020a 	bic.w	r2, r2, #10
 8002ec6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002ece:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 8002ed0:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002ed2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8002ed6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002ed8:	e7e5      	b.n	8002ea6 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002eda:	2408      	movs	r4, #8
 8002edc:	4094      	lsls	r4, r2
 8002ede:	4234      	tst	r4, r6
 8002ee0:	d011      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x8c>
 8002ee2:	072c      	lsls	r4, r5, #28
 8002ee4:	d50f      	bpl.n	8002f06 <HAL_DMA_IRQHandler+0x8c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ee6:	681c      	ldr	r4, [r3, #0]
 8002ee8:	f024 040e 	bic.w	r4, r4, #14
 8002eec:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002eee:	2301      	movs	r3, #1
 8002ef0:	fa03 f202 	lsl.w	r2, r3, r2
 8002ef4:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ef6:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002ef8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002efc:	2300      	movs	r3, #0
 8002efe:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8002f02:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f04:	e7cf      	b.n	8002ea6 <HAL_DMA_IRQHandler+0x2c>
}
 8002f06:	bc70      	pop	{r4, r5, r6}
 8002f08:	4770      	bx	lr
	...

08002f0c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f10:	6807      	ldr	r7, [r0, #0]
{
 8002f12:	b087      	sub	sp, #28
 8002f14:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep = NULL;
  uint32_t hclk = 80000000;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f16:	4638      	mov	r0, r7
 8002f18:	f001 fa71 	bl	80043fe <USB_GetMode>
 8002f1c:	9002      	str	r0, [sp, #8]
 8002f1e:	2800      	cmp	r0, #0
 8002f20:	f040 8155 	bne.w	80031ce <HAL_PCD_IRQHandler+0x2c2>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8002f24:	6820      	ldr	r0, [r4, #0]
 8002f26:	f001 fa3c 	bl	80043a2 <USB_ReadInterrupts>
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	f000 814f 	beq.w	80031ce <HAL_PCD_IRQHandler+0x2c2>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f30:	6820      	ldr	r0, [r4, #0]
 8002f32:	f001 fa36 	bl	80043a2 <USB_ReadInterrupts>
 8002f36:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f38:	bf48      	it	mi
 8002f3a:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f3c:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f3e:	bf42      	ittt	mi
 8002f40:	6953      	ldrmi	r3, [r2, #20]
 8002f42:	f003 0302 	andmi.w	r3, r3, #2
 8002f46:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f48:	f001 fa2b 	bl	80043a2 <USB_ReadInterrupts>
 8002f4c:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8002f50:	d00c      	beq.n	8002f6c <HAL_PCD_IRQHandler+0x60>
    {
      epnum = 0;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f52:	6820      	ldr	r0, [r4, #0]
 8002f54:	f001 fa29 	bl	80043aa <USB_ReadDevAllOutEpInterrupt>
 8002f58:	f507 6930 	add.w	r9, r7, #2816	; 0xb00
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	46a3      	mov	fp, r4
      
      while ( ep_intr )
 8002f60:	464e      	mov	r6, r9
      epnum = 0;
 8002f62:	2500      	movs	r5, #0
      while ( ep_intr )
 8002f64:	f1b8 0f00 	cmp.w	r8, #0
 8002f68:	f040 8134 	bne.w	80031d4 <HAL_PCD_IRQHandler+0x2c8>
        epnum++;
        ep_intr >>= 1;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f6c:	6820      	ldr	r0, [r4, #0]
 8002f6e:	f001 fa18 	bl	80043a2 <USB_ReadInterrupts>
 8002f72:	0342      	lsls	r2, r0, #13
 8002f74:	d50b      	bpl.n	8002f8e <HAL_PCD_IRQHandler+0x82>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f76:	6820      	ldr	r0, [r4, #0]
 8002f78:	f001 fa1f 	bl	80043ba <USB_ReadDevAllInEpInterrupt>
 8002f7c:	4626      	mov	r6, r4
 8002f7e:	4683      	mov	fp, r0
 8002f80:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      
      epnum = 0;
 8002f84:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8002f86:	f1bb 0f00 	cmp.w	fp, #0
 8002f8a:	f040 81a1 	bne.w	80032d0 <HAL_PCD_IRQHandler+0x3c4>
        ep_intr >>= 1;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f8e:	6820      	ldr	r0, [r4, #0]
 8002f90:	f001 fa07 	bl	80043a2 <USB_ReadInterrupts>
 8002f94:	2800      	cmp	r0, #0
 8002f96:	da15      	bge.n	8002fc4 <HAL_PCD_IRQHandler+0xb8>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f98:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8002f9c:	f023 0301 	bic.w	r3, r3, #1
 8002fa0:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
      
      if(hpcd->LPM_State == LPM_L1)
 8002fa4:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	f040 822c 	bne.w	8003406 <HAL_PCD_IRQHandler+0x4fa>
      {
        hpcd->LPM_State = LPM_L0;
 8002fae:	2100      	movs	r1, #0
 8002fb0:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f000 fb94 	bl	80036e2 <HAL_PCDEx_LPM_Callback>
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002fba:	6822      	ldr	r2, [r4, #0]
 8002fbc:	6953      	ldr	r3, [r2, #20]
 8002fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fc2:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fc4:	6820      	ldr	r0, [r4, #0]
 8002fc6:	f001 f9ec 	bl	80043a2 <USB_ReadInterrupts>
 8002fca:	0503      	lsls	r3, r0, #20
 8002fcc:	d50b      	bpl.n	8002fe6 <HAL_PCD_IRQHandler+0xda>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fce:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002fd2:	07de      	lsls	r6, r3, #31
 8002fd4:	d502      	bpl.n	8002fdc <HAL_PCD_IRQHandler+0xd0>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f7ff fe20 	bl	8002c1c <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002fdc:	6822      	ldr	r2, [r4, #0]
 8002fde:	6953      	ldr	r3, [r2, #20]
 8002fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe4:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle LPM Interrupt */ 
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002fe6:	6820      	ldr	r0, [r4, #0]
 8002fe8:	f001 f9db 	bl	80043a2 <USB_ReadInterrupts>
 8002fec:	0100      	lsls	r0, r0, #4
 8002fee:	d514      	bpl.n	800301a <HAL_PCD_IRQHandler+0x10e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
 8002ff0:	6823      	ldr	r3, [r4, #0]
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002ff8:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8002ffa:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 8002ffe:	2a00      	cmp	r2, #0
 8003000:	f040 8205 	bne.w	800340e <HAL_PCD_IRQHandler+0x502>
      {   
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8003006:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8003008:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 800300c:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8003010:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003014:	4620      	mov	r0, r4
 8003016:	f000 fb64 	bl	80036e2 <HAL_PCDEx_LPM_Callback>
        HAL_PCD_SuspendCallback(hpcd);
      }
    }
    
    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800301a:	6820      	ldr	r0, [r4, #0]
 800301c:	f001 f9c1 	bl	80043a2 <USB_ReadInterrupts>
 8003020:	04c1      	lsls	r1, r0, #19
 8003022:	d537      	bpl.n	8003094 <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8003024:	f507 6600 	add.w	r6, r7, #2048	; 0x800
 8003028:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 800302a:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 8003032:	2100      	movs	r1, #0
 8003034:	f000 ffde 	bl	8003ff4 <USB_FlushTxFifo>
      
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8003038:	6861      	ldr	r1, [r4, #4]
 800303a:	f507 6310 	add.w	r3, r7, #2304	; 0x900
      {
        USBx_INEP(index)->DIEPINT = 0xFF;
 800303e:	22ff      	movs	r2, #255	; 0xff
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8003040:	9802      	ldr	r0, [sp, #8]
 8003042:	4288      	cmp	r0, r1
 8003044:	f040 81e7 	bne.w	8003416 <HAL_PCD_IRQHandler+0x50a>
        USBx_OUTEP(index)->DOEPINT = 0xFF;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8003048:	f04f 33ff 	mov.w	r3, #4294967295
 800304c:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 800304e:	69f3      	ldr	r3, [r6, #28]
 8003050:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003054:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8003056:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 81e4 	beq.w	8003426 <HAL_PCD_IRQHandler+0x51a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 800305e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8003062:	f043 030b 	orr.w	r3, r3, #11
 8003066:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 800306a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800306c:	f043 030b 	orr.w	r3, r3, #11
 8003070:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003072:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003076:	7c21      	ldrb	r1, [r4, #16]
 8003078:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800307a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800307e:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003082:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8003086:	f001 f9d9 	bl	800443c <USB_EP0_OutStart>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800308a:	6822      	ldr	r2, [r4, #0]
 800308c:	6953      	ldr	r3, [r2, #20]
 800308e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003092:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003094:	6820      	ldr	r0, [r4, #0]
 8003096:	f001 f984 	bl	80043a2 <USB_ReadInterrupts>
 800309a:	0482      	lsls	r2, r0, #18
 800309c:	d520      	bpl.n	80030e0 <HAL_PCD_IRQHandler+0x1d4>
    {
      USB_ActivateSetup(hpcd->Instance);
 800309e:	6820      	ldr	r0, [r4, #0]
 80030a0:	f001 f9b1 	bl	8004406 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80030a4:	6822      	ldr	r2, [r4, #0]
 80030a6:	68d3      	ldr	r3, [r2, #12]
 80030a8:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80030ac:	60d3      	str	r3, [r2, #12]
      
      hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 80030ae:	2303      	movs	r3, #3
 80030b0:	60e3      	str	r3, [r4, #12]
      hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ; 
 80030b2:	2340      	movs	r3, #64	; 0x40
 80030b4:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */

      /* Get hclk frequency value */
      hclk = HAL_RCC_GetHCLKFreq();
 80030b6:	f000 fe33 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
    
      if((hclk >= 14200000)&&(hclk < 15000000))
 80030ba:	4b82      	ldr	r3, [pc, #520]	; (80032c4 <HAL_PCD_IRQHandler+0x3b8>)
 80030bc:	4a82      	ldr	r2, [pc, #520]	; (80032c8 <HAL_PCD_IRQHandler+0x3bc>)
 80030be:	4403      	add	r3, r0
 80030c0:	4293      	cmp	r3, r2
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	f200 81b8 	bhi.w	8003438 <HAL_PCD_IRQHandler+0x52c>
      {
        /* hclk Clock Range between 14.2-15 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
      }
      
      else /* if(hclk >= 32000000) */
      {
        /* hclk Clock Range between 32-80 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 80030ce:	60da      	str	r2, [r3, #12]
      }  
      
      HAL_PCD_ResetCallback(hpcd);
 80030d0:	4620      	mov	r0, r4
 80030d2:	f7ff fd96 	bl	8002c02 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030d6:	6822      	ldr	r2, [r4, #0]
 80030d8:	6953      	ldr	r3, [r2, #20]
 80030da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030de:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030e0:	6820      	ldr	r0, [r4, #0]
 80030e2:	f001 f95e 	bl	80043a2 <USB_ReadInterrupts>
 80030e6:	06c3      	lsls	r3, r0, #27
 80030e8:	d52b      	bpl.n	8003142 <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030ea:	6822      	ldr	r2, [r4, #0]
 80030ec:	6993      	ldr	r3, [r2, #24]
 80030ee:	f023 0310 	bic.w	r3, r3, #16
 80030f2:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 80030f4:	6a3e      	ldr	r6, [r7, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80030f6:	f3c6 4343 	ubfx	r3, r6, #17, #4
 80030fa:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80030fc:	f006 090f 	and.w	r9, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003100:	f040 81ea 	bne.w	80034d8 <HAL_PCD_IRQHandler+0x5cc>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8003104:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003108:	421e      	tst	r6, r3
 800310a:	d015      	beq.n	8003138 <HAL_PCD_IRQHandler+0x22c>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 800310c:	f04f 081c 	mov.w	r8, #28
 8003110:	fb08 4809 	mla	r8, r8, r9, r4
 8003114:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8003118:	4632      	mov	r2, r6
 800311a:	f8d8 11ec 	ldr.w	r1, [r8, #492]	; 0x1ec
 800311e:	4638      	mov	r0, r7
 8003120:	f001 f8e7 	bl	80042f2 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003124:	f8d8 31ec 	ldr.w	r3, [r8, #492]	; 0x1ec
 8003128:	4433      	add	r3, r6
 800312a:	f8c8 31ec 	str.w	r3, [r8, #492]	; 0x1ec
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800312e:	f8d8 31f8 	ldr.w	r3, [r8, #504]	; 0x1f8
 8003132:	441e      	add	r6, r3
 8003134:	f8c8 61f8 	str.w	r6, [r8, #504]	; 0x1f8
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003138:	6822      	ldr	r2, [r4, #0]
 800313a:	6993      	ldr	r3, [r2, #24]
 800313c:	f043 0310 	orr.w	r3, r3, #16
 8003140:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003142:	6820      	ldr	r0, [r4, #0]
 8003144:	f001 f92d 	bl	80043a2 <USB_ReadInterrupts>
 8003148:	0707      	lsls	r7, r0, #28
 800314a:	d507      	bpl.n	800315c <HAL_PCD_IRQHandler+0x250>
    {
      HAL_PCD_SOFCallback(hpcd);
 800314c:	4620      	mov	r0, r4
 800314e:	f7ff fd54 	bl	8002bfa <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003152:	6822      	ldr	r2, [r4, #0]
 8003154:	6953      	ldr	r3, [r2, #20]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800315c:	6820      	ldr	r0, [r4, #0]
 800315e:	f001 f920 	bl	80043a2 <USB_ReadInterrupts>
 8003162:	02c6      	lsls	r6, r0, #11
 8003164:	d508      	bpl.n	8003178 <HAL_PCD_IRQHandler+0x26c>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8003166:	b2e9      	uxtb	r1, r5
 8003168:	4620      	mov	r0, r4
 800316a:	f7ff fd63 	bl	8002c34 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800316e:	6822      	ldr	r2, [r4, #0]
 8003170:	6953      	ldr	r3, [r2, #20]
 8003172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003176:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003178:	6820      	ldr	r0, [r4, #0]
 800317a:	f001 f912 	bl	80043a2 <USB_ReadInterrupts>
 800317e:	0280      	lsls	r0, r0, #10
 8003180:	d508      	bpl.n	8003194 <HAL_PCD_IRQHandler+0x288>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8003182:	b2e9      	uxtb	r1, r5
 8003184:	4620      	mov	r0, r4
 8003186:	f7ff fd51 	bl	8002c2c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800318a:	6822      	ldr	r2, [r4, #0]
 800318c:	6953      	ldr	r3, [r2, #20]
 800318e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003192:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003194:	6820      	ldr	r0, [r4, #0]
 8003196:	f001 f904 	bl	80043a2 <USB_ReadInterrupts>
 800319a:	0041      	lsls	r1, r0, #1
 800319c:	d507      	bpl.n	80031ae <HAL_PCD_IRQHandler+0x2a2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 800319e:	4620      	mov	r0, r4
 80031a0:	f7ff fd4c 	bl	8002c3c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80031a4:	6822      	ldr	r2, [r4, #0]
 80031a6:	6953      	ldr	r3, [r2, #20]
 80031a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031ac:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80031ae:	6820      	ldr	r0, [r4, #0]
 80031b0:	f001 f8f7 	bl	80043a2 <USB_ReadInterrupts>
 80031b4:	0742      	lsls	r2, r0, #29
 80031b6:	d50a      	bpl.n	80031ce <HAL_PCD_IRQHandler+0x2c2>
    {
      temp = hpcd->Instance->GOTGINT;
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031bc:	076b      	lsls	r3, r5, #29
 80031be:	d502      	bpl.n	80031c6 <HAL_PCD_IRQHandler+0x2ba>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 80031c0:	4620      	mov	r0, r4
 80031c2:	f7ff fd3f 	bl	8002c44 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	4315      	orrs	r5, r2
 80031cc:	605d      	str	r5, [r3, #4]
    }
  }
}
 80031ce:	b007      	add	sp, #28
 80031d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1)
 80031d4:	f018 0f01 	tst.w	r8, #1
 80031d8:	d049      	beq.n	800326e <HAL_PCD_IRQHandler+0x362>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 80031da:	b2ea      	uxtb	r2, r5
 80031dc:	4611      	mov	r1, r2
 80031de:	6820      	ldr	r0, [r4, #0]
 80031e0:	9203      	str	r2, [sp, #12]
 80031e2:	f001 f8f2 	bl	80043ca <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031e6:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 80031ea:	4682      	mov	sl, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031ec:	d032      	beq.n	8003254 <HAL_PCD_IRQHandler+0x348>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031ee:	2101      	movs	r1, #1
 80031f0:	60b1      	str	r1, [r6, #8]
            if (USBx->GSNPSID == USB_OTG_CORE_ID_310A)
 80031f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031f4:	4b35      	ldr	r3, [pc, #212]	; (80032cc <HAL_PCD_IRQHandler+0x3c0>)
 80031f6:	9a03      	ldr	r2, [sp, #12]
 80031f8:	4299      	cmp	r1, r3
 80031fa:	d13f      	bne.n	800327c <HAL_PCD_IRQHandler+0x370>
              if (!(USBx_OUTEP(0)->DOEPINT & (0x1 << 15)))
 80031fc:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8003200:	0409      	lsls	r1, r1, #16
 8003202:	d41f      	bmi.n	8003244 <HAL_PCD_IRQHandler+0x338>
                  if (hpcd->Init.dma_enable == 1)
 8003204:	6921      	ldr	r1, [r4, #16]
 8003206:	2901      	cmp	r1, #1
 8003208:	d10c      	bne.n	8003224 <HAL_PCD_IRQHandler+0x318>
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800320a:	6931      	ldr	r1, [r6, #16]
                                                 hpcd->OUT_ep[epnum].maxpacket -
 800320c:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003210:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                                 hpcd->OUT_ep[epnum].maxpacket -
 8003214:	1a41      	subs	r1, r0, r1
                  	hpcd->OUT_ep[epnum].xfer_count =
 8003216:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                    hpcd->OUT_ep[epnum].xfer_buff +=
 800321a:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 800321e:	4408      	add	r0, r1
 8003220:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
                HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8003224:	4611      	mov	r1, r2
 8003226:	4620      	mov	r0, r4
 8003228:	f7ff fcd6 	bl	8002bd8 <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 800322c:	6921      	ldr	r1, [r4, #16]
 800322e:	2901      	cmp	r1, #1
 8003230:	d108      	bne.n	8003244 <HAL_PCD_IRQHandler+0x338>
                  if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 8003232:	b93d      	cbnz	r5, 8003244 <HAL_PCD_IRQHandler+0x338>
 8003234:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 8003238:	b922      	cbnz	r2, 8003244 <HAL_PCD_IRQHandler+0x338>
                    USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 800323a:	f504 7262 	add.w	r2, r4, #904	; 0x388
 800323e:	6820      	ldr	r0, [r4, #0]
 8003240:	f001 f8fc 	bl	800443c <USB_EP0_OutStart>
              USBx_OUTEP(0)->DOEPINT |= (0x1 << 15) | (0x1 << 5);
 8003244:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8003248:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800324c:	f042 0220 	orr.w	r2, r2, #32
 8003250:	f8c9 2008 	str.w	r2, [r9, #8]
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003254:	f01a 0f08 	tst.w	sl, #8
 8003258:	d004      	beq.n	8003264 <HAL_PCD_IRQHandler+0x358>
            HAL_PCD_SetupStageCallback(hpcd);
 800325a:	4620      	mov	r0, r4
 800325c:	f7ff fcb6 	bl	8002bcc <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003260:	2308      	movs	r3, #8
 8003262:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003264:	f01a 0f10 	tst.w	sl, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003268:	bf1c      	itt	ne
 800326a:	2310      	movne	r3, #16
 800326c:	60b3      	strne	r3, [r6, #8]
        epnum++;
 800326e:	3501      	adds	r5, #1
        ep_intr >>= 1;
 8003270:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8003274:	3620      	adds	r6, #32
 8003276:	f10b 0b1c 	add.w	fp, fp, #28
 800327a:	e673      	b.n	8002f64 <HAL_PCD_IRQHandler+0x58>
              if (hpcd->Init.dma_enable == 1)
 800327c:	6921      	ldr	r1, [r4, #16]
 800327e:	2901      	cmp	r1, #1
 8003280:	d10c      	bne.n	800329c <HAL_PCD_IRQHandler+0x390>
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003282:	6931      	ldr	r1, [r6, #16]
                                               hpcd->OUT_ep[epnum].maxpacket -
 8003284:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003288:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                               hpcd->OUT_ep[epnum].maxpacket -
 800328c:	1a41      	subs	r1, r0, r1
                hpcd->OUT_ep[epnum].xfer_count =
 800328e:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8003292:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 8003296:	4408      	add	r0, r1
 8003298:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
              HAL_PCD_DataOutStageCallback(hpcd, epnum);
 800329c:	4611      	mov	r1, r2
 800329e:	4620      	mov	r0, r4
 80032a0:	f7ff fc9a 	bl	8002bd8 <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 80032a4:	6921      	ldr	r1, [r4, #16]
 80032a6:	2901      	cmp	r1, #1
 80032a8:	d1d4      	bne.n	8003254 <HAL_PCD_IRQHandler+0x348>
                if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 80032aa:	2d00      	cmp	r5, #0
 80032ac:	d1d2      	bne.n	8003254 <HAL_PCD_IRQHandler+0x348>
 80032ae:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 80032b2:	2a00      	cmp	r2, #0
 80032b4:	d1ce      	bne.n	8003254 <HAL_PCD_IRQHandler+0x348>
                  USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 80032b6:	f504 7262 	add.w	r2, r4, #904	; 0x388
 80032ba:	6820      	ldr	r0, [r4, #0]
 80032bc:	f001 f8be 	bl	800443c <USB_EP0_OutStart>
 80032c0:	e7c8      	b.n	8003254 <HAL_PCD_IRQHandler+0x348>
 80032c2:	bf00      	nop
 80032c4:	ff275340 	.word	0xff275340
 80032c8:	000c34ff 	.word	0x000c34ff
 80032cc:	4f54310a 	.word	0x4f54310a
        if (ep_intr & 0x1) /* In ITR */
 80032d0:	f01b 0f01 	tst.w	fp, #1
 80032d4:	d074      	beq.n	80033c0 <HAL_PCD_IRQHandler+0x4b4>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80032d6:	fa5f fa85 	uxtb.w	sl, r5
 80032da:	4651      	mov	r1, sl
 80032dc:	6820      	ldr	r0, [r4, #0]
 80032de:	f001 f87e 	bl	80043de <USB_ReadDevInEPInterrupt>
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032e2:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80032e6:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032e8:	d020      	beq.n	800332c <HAL_PCD_IRQHandler+0x420>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032ea:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
            fifoemptymsk = 0x1 << epnum;
 80032ee:	2101      	movs	r1, #1
 80032f0:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032f2:	ea23 0301 	bic.w	r3, r3, r1
 80032f6:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80032fa:	2301      	movs	r3, #1
 80032fc:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1)
 8003300:	6923      	ldr	r3, [r4, #16]
 8003302:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8003304:	bf01      	itttt	eq
 8003306:	6cb3      	ldreq	r3, [r6, #72]	; 0x48
 8003308:	6c72      	ldreq	r2, [r6, #68]	; 0x44
 800330a:	189b      	addeq	r3, r3, r2
 800330c:	64b3      	streq	r3, [r6, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 800330e:	4651      	mov	r1, sl
 8003310:	4620      	mov	r0, r4
 8003312:	f7ff fc6a 	bl	8002bea <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1)
 8003316:	6921      	ldr	r1, [r4, #16]
 8003318:	2901      	cmp	r1, #1
 800331a:	d107      	bne.n	800332c <HAL_PCD_IRQHandler+0x420>
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 800331c:	b935      	cbnz	r5, 800332c <HAL_PCD_IRQHandler+0x420>
 800331e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003320:	b923      	cbnz	r3, 800332c <HAL_PCD_IRQHandler+0x420>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8003322:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8003326:	6820      	ldr	r0, [r4, #0]
 8003328:	f001 f888 	bl	800443c <USB_EP0_OutStart>
          if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800332c:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003330:	bf1c      	itt	ne
 8003332:	2308      	movne	r3, #8
 8003334:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003338:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800333c:	bf1c      	itt	ne
 800333e:	2310      	movne	r3, #16
 8003340:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003344:	f018 0f40 	tst.w	r8, #64	; 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003348:	bf1c      	itt	ne
 800334a:	2340      	movne	r3, #64	; 0x40
 800334c:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003350:	f018 0f02 	tst.w	r8, #2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003354:	bf1c      	itt	ne
 8003356:	2302      	movne	r3, #2
 8003358:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800335c:	f018 0f80 	tst.w	r8, #128	; 0x80
 8003360:	d02e      	beq.n	80033c0 <HAL_PCD_IRQHandler+0x4b4>
  * @param  epnum: endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	9303      	str	r3, [sp, #12]
  int32_t len = 0U;
  uint32_t len32b = 0;
  uint32_t fifoemptymsk = 0;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8003366:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8003368:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800336a:	eba3 0802 	sub.w	r8, r3, r2
 800336e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8003370:	4598      	cmp	r8, r3
 8003372:	bf28      	it	cs
 8003374:	4698      	movcs	r8, r3
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3) / 4;
 8003376:	f108 0303 	add.w	r3, r8, #3
 800337a:	2204      	movs	r2, #4
 800337c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003380:	9304      	str	r3, [sp, #16]
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8003382:	9b03      	ldr	r3, [sp, #12]
 8003384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003388:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 800338c:	9305      	str	r3, [sp, #20]
 800338e:	9b05      	ldr	r3, [sp, #20]
 8003390:	9a04      	ldr	r2, [sp, #16]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	b29b      	uxth	r3, r3
 8003396:	4293      	cmp	r3, r2
 8003398:	d904      	bls.n	80033a4 <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 800339a:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800339c:	6d33      	ldr	r3, [r6, #80]	; 0x50
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800339e:	4293      	cmp	r3, r2
 80033a0:	d900      	bls.n	80033a4 <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 80033a2:	b9a3      	cbnz	r3, 80033ce <HAL_PCD_IRQHandler+0x4c2>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0)
 80033a4:	f1b8 0f00 	cmp.w	r8, #0
 80033a8:	dc0a      	bgt.n	80033c0 <HAL_PCD_IRQHandler+0x4b4>
  {
    fifoemptymsk = 0x1 << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033aa:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = 0x1 << epnum;
 80033ac:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033ae:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 80033b2:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1 << epnum;
 80033b6:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033b8:	ea23 0302 	bic.w	r3, r3, r2
 80033bc:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        epnum++;
 80033c0:	3501      	adds	r5, #1
        ep_intr >>= 1;
 80033c2:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 80033c6:	361c      	adds	r6, #28
 80033c8:	f109 0920 	add.w	r9, r9, #32
 80033cc:	e5db      	b.n	8002f86 <HAL_PCD_IRQHandler+0x7a>
    len = ep->xfer_len - ep->xfer_count;
 80033ce:	eba3 0802 	sub.w	r8, r3, r2
 80033d2:	6c73      	ldr	r3, [r6, #68]	; 0x44
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80033d4:	9803      	ldr	r0, [sp, #12]
 80033d6:	4598      	cmp	r8, r3
 80033d8:	bf28      	it	cs
 80033da:	4698      	movcs	r8, r3
    len32b = (len + 3) / 4;
 80033dc:	2204      	movs	r2, #4
 80033de:	f108 0303 	add.w	r3, r8, #3
 80033e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80033e6:	9304      	str	r3, [sp, #16]
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80033e8:	7c23      	ldrb	r3, [r4, #16]
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	4652      	mov	r2, sl
 80033ee:	fa1f f388 	uxth.w	r3, r8
 80033f2:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80033f4:	f000 ff6c 	bl	80042d0 <USB_WritePacket>
    ep->xfer_buff  += len;
 80033f8:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80033fa:	4443      	add	r3, r8
 80033fc:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 80033fe:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8003400:	4443      	add	r3, r8
 8003402:	6573      	str	r3, [r6, #84]	; 0x54
 8003404:	e7c3      	b.n	800338e <HAL_PCD_IRQHandler+0x482>
        HAL_PCD_ResumeCallback(hpcd);
 8003406:	4620      	mov	r0, r4
 8003408:	f7ff fc0c 	bl	8002c24 <HAL_PCD_ResumeCallback>
 800340c:	e5d5      	b.n	8002fba <HAL_PCD_IRQHandler+0xae>
        HAL_PCD_SuspendCallback(hpcd);
 800340e:	4620      	mov	r0, r4
 8003410:	f7ff fc04 	bl	8002c1c <HAL_PCD_SuspendCallback>
 8003414:	e601      	b.n	800301a <HAL_PCD_IRQHandler+0x10e>
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8003416:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(index)->DIEPINT = 0xFF;
 8003418:	609a      	str	r2, [r3, #8]
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 800341a:	3001      	adds	r0, #1
        USBx_OUTEP(index)->DOEPINT = 0xFF;
 800341c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8003420:	9002      	str	r0, [sp, #8]
 8003422:	3320      	adds	r3, #32
 8003424:	e60c      	b.n	8003040 <HAL_PCD_IRQHandler+0x134>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8003426:	6973      	ldr	r3, [r6, #20]
 8003428:	f043 030b 	orr.w	r3, r3, #11
 800342c:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 800342e:	6933      	ldr	r3, [r6, #16]
 8003430:	f043 030b 	orr.w	r3, r3, #11
 8003434:	6133      	str	r3, [r6, #16]
 8003436:	e61c      	b.n	8003072 <HAL_PCD_IRQHandler+0x166>
      else if((hclk >= 15000000)&&(hclk < 16000000))
 8003438:	4a2f      	ldr	r2, [pc, #188]	; (80034f8 <HAL_PCD_IRQHandler+0x5ec>)
 800343a:	4930      	ldr	r1, [pc, #192]	; (80034fc <HAL_PCD_IRQHandler+0x5f0>)
 800343c:	4402      	add	r2, r0
 800343e:	428a      	cmp	r2, r1
 8003440:	d803      	bhi.n	800344a <HAL_PCD_IRQHandler+0x53e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003448:	e641      	b.n	80030ce <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 16000000)&&(hclk < 17200000))
 800344a:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 800344e:	492c      	ldr	r1, [pc, #176]	; (8003500 <HAL_PCD_IRQHandler+0x5f4>)
 8003450:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8003454:	428a      	cmp	r2, r1
 8003456:	d803      	bhi.n	8003460 <HAL_PCD_IRQHandler+0x554>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 800345e:	e636      	b.n	80030ce <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 17200000)&&(hclk < 18500000))
 8003460:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8003464:	4927      	ldr	r1, [pc, #156]	; (8003504 <HAL_PCD_IRQHandler+0x5f8>)
 8003466:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 800346a:	428a      	cmp	r2, r1
 800346c:	d803      	bhi.n	8003476 <HAL_PCD_IRQHandler+0x56a>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003474:	e62b      	b.n	80030ce <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 18500000)&&(hclk < 20000000))
 8003476:	4a24      	ldr	r2, [pc, #144]	; (8003508 <HAL_PCD_IRQHandler+0x5fc>)
 8003478:	4924      	ldr	r1, [pc, #144]	; (800350c <HAL_PCD_IRQHandler+0x600>)
 800347a:	4402      	add	r2, r0
 800347c:	428a      	cmp	r2, r1
 800347e:	d803      	bhi.n	8003488 <HAL_PCD_IRQHandler+0x57c>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8003486:	e622      	b.n	80030ce <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 20000000)&&(hclk < 21800000))
 8003488:	4a21      	ldr	r2, [pc, #132]	; (8003510 <HAL_PCD_IRQHandler+0x604>)
 800348a:	4922      	ldr	r1, [pc, #136]	; (8003514 <HAL_PCD_IRQHandler+0x608>)
 800348c:	4402      	add	r2, r0
 800348e:	428a      	cmp	r2, r1
 8003490:	d803      	bhi.n	800349a <HAL_PCD_IRQHandler+0x58e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8003498:	e619      	b.n	80030ce <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 21800000)&&(hclk < 24000000))
 800349a:	4a1f      	ldr	r2, [pc, #124]	; (8003518 <HAL_PCD_IRQHandler+0x60c>)
 800349c:	491f      	ldr	r1, [pc, #124]	; (800351c <HAL_PCD_IRQHandler+0x610>)
 800349e:	4402      	add	r2, r0
 80034a0:	428a      	cmp	r2, r1
 80034a2:	d803      	bhi.n	80034ac <HAL_PCD_IRQHandler+0x5a0>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80034aa:	e610      	b.n	80030ce <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 24000000)&&(hclk < 27700000))
 80034ac:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 80034b0:	491b      	ldr	r1, [pc, #108]	; (8003520 <HAL_PCD_IRQHandler+0x614>)
 80034b2:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 80034b6:	428a      	cmp	r2, r1
 80034b8:	d803      	bhi.n	80034c2 <HAL_PCD_IRQHandler+0x5b6>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034c0:	e605      	b.n	80030ce <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 27700000)&&(hclk < 32000000))
 80034c2:	4a18      	ldr	r2, [pc, #96]	; (8003524 <HAL_PCD_IRQHandler+0x618>)
 80034c4:	4918      	ldr	r1, [pc, #96]	; (8003528 <HAL_PCD_IRQHandler+0x61c>)
 80034c6:	4402      	add	r2, r0
 80034c8:	428a      	cmp	r2, r1
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	bf94      	ite	ls
 80034ce:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 80034d2:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 80034d6:	e5fa      	b.n	80030ce <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80034d8:	2b06      	cmp	r3, #6
 80034da:	f47f ae2d 	bne.w	8003138 <HAL_PCD_IRQHandler+0x22c>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 80034de:	2208      	movs	r2, #8
 80034e0:	f504 7162 	add.w	r1, r4, #904	; 0x388
 80034e4:	4638      	mov	r0, r7
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034e6:	f04f 081c 	mov.w	r8, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 80034ea:	f000 ff02 	bl	80042f2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034ee:	fb08 4809 	mla	r8, r8, r9, r4
 80034f2:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80034f6:	e61a      	b.n	800312e <HAL_PCD_IRQHandler+0x222>
 80034f8:	ff1b1e40 	.word	0xff1b1e40
 80034fc:	000f423f 	.word	0x000f423f
 8003500:	00124f7f 	.word	0x00124f7f
 8003504:	0013d61f 	.word	0x0013d61f
 8003508:	fee5b660 	.word	0xfee5b660
 800350c:	0016e35f 	.word	0x0016e35f
 8003510:	feced300 	.word	0xfeced300
 8003514:	001b773f 	.word	0x001b773f
 8003518:	feb35bc0 	.word	0xfeb35bc0
 800351c:	002191bf 	.word	0x002191bf
 8003520:	0038751f 	.word	0x0038751f
 8003524:	fe5954e0 	.word	0xfe5954e0
 8003528:	00419cdf 	.word	0x00419cdf

0800352c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 800352c:	f890 2384 	ldrb.w	r2, [r0, #900]	; 0x384
 8003530:	2a01      	cmp	r2, #1
{
 8003532:	b510      	push	{r4, lr}
 8003534:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8003536:	d00b      	beq.n	8003550 <HAL_PCD_SetAddress+0x24>
 8003538:	2201      	movs	r2, #1
 800353a:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  hpcd->USB_Address = address;
 800353e:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  USB_SetDevAddress(hpcd->Instance, address);
 8003542:	6800      	ldr	r0, [r0, #0]
 8003544:	f000 ff1d 	bl	8004382 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8003548:	2000      	movs	r0, #0
 800354a:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800354e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8003550:	2002      	movs	r0, #2
}
 8003552:	bd10      	pop	{r4, pc}

08003554 <HAL_PCD_EP_Open>:
{
 8003554:	b570      	push	{r4, r5, r6, lr}
 8003556:	4604      	mov	r4, r0
  if ((ep_addr & 0x80) == 0x80)
 8003558:	b248      	sxtb	r0, r1
 800355a:	2800      	cmp	r0, #0
 800355c:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8003560:	f04f 051c 	mov.w	r5, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003564:	bfb5      	itete	lt
 8003566:	fb05 4106 	mlalt	r1, r5, r6, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800356a:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800356e:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003570:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 8003574:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7F;
 8003576:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8003578:	7048      	strb	r0, [r1, #1]
  ep->type = ep_type;
 800357a:	70cb      	strb	r3, [r1, #3]
  __HAL_LOCK(hpcd);
 800357c:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->maxpacket = ep_mps;
 8003580:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd);
 8003582:	2b01      	cmp	r3, #1
 8003584:	d009      	beq.n	800359a <HAL_PCD_EP_Open+0x46>
 8003586:	2301      	movs	r3, #1
 8003588:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_ActivateEndpoint(hpcd->Instance , ep);
 800358c:	6820      	ldr	r0, [r4, #0]
 800358e:	f000 fd43 	bl	8004018 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003592:	2000      	movs	r0, #0
 8003594:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return ret;
 8003598:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 800359a:	2002      	movs	r0, #2
}
 800359c:	bd70      	pop	{r4, r5, r6, pc}

0800359e <HAL_PCD_EP_Receive>:
{
 800359e:	b570      	push	{r4, r5, r6, lr}
 80035a0:	4604      	mov	r4, r0
 80035a2:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 80035a6:	201c      	movs	r0, #28
 80035a8:	fb00 4506 	mla	r5, r0, r6, r4
  ep->xfer_len = len;
 80035ac:	f8c5 31f4 	str.w	r3, [r5, #500]	; 0x1f4
  ep->xfer_count = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8c5 31f8 	str.w	r3, [r5, #504]	; 0x1f8
  ep->is_in = 0;
 80035b6:	f885 31e1 	strb.w	r3, [r5, #481]	; 0x1e1
  __HAL_LOCK(hpcd);
 80035ba:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->xfer_buff = pBuf;  
 80035be:	f8c5 21ec 	str.w	r2, [r5, #492]	; 0x1ec
  __HAL_LOCK(hpcd);
 80035c2:	2b01      	cmp	r3, #1
  ep->num = ep_addr & 0x7F;
 80035c4:	f885 61e0 	strb.w	r6, [r5, #480]	; 0x1e0
  __HAL_LOCK(hpcd);
 80035c8:	d011      	beq.n	80035ee <HAL_PCD_EP_Receive+0x50>
 80035ca:	6922      	ldr	r2, [r4, #16]
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80035cc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80035ce:	2301      	movs	r3, #1
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80035d0:	f505 71f0 	add.w	r1, r5, #480	; 0x1e0
  __HAL_LOCK(hpcd);
 80035d4:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80035d8:	b2d2      	uxtb	r2, r2
  if ((ep_addr & 0x7F) == 0 )
 80035da:	b92e      	cbnz	r6, 80035e8 <HAL_PCD_EP_Receive+0x4a>
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80035dc:	f000 fe14 	bl	8004208 <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 80035e0:	2000      	movs	r0, #0
 80035e2:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80035e6:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80035e8:	f000 fd56 	bl	8004098 <USB_EPStartXfer>
 80035ec:	e7f8      	b.n	80035e0 <HAL_PCD_EP_Receive+0x42>
  __HAL_LOCK(hpcd);
 80035ee:	2002      	movs	r0, #2
}
 80035f0:	bd70      	pop	{r4, r5, r6, pc}

080035f2 <HAL_PCD_EP_Transmit>:
{
 80035f2:	b570      	push	{r4, r5, r6, lr}
 80035f4:	4604      	mov	r4, r0
 80035f6:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 80035fa:	201c      	movs	r0, #28
 80035fc:	fb00 4506 	mla	r5, r0, r6, r4
 8003600:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 8003602:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_LOCK(hpcd);
 8003604:	f894 2384 	ldrb.w	r2, [r4, #900]	; 0x384
  ep->num = ep_addr & 0x7F;
 8003608:	f885 603c 	strb.w	r6, [r5, #60]	; 0x3c
  ep->xfer_count = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1;
 8003610:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8003612:	429a      	cmp	r2, r3
  ep->is_in = 1;
 8003614:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_LOCK(hpcd);
 8003618:	d010      	beq.n	800363c <HAL_PCD_EP_Transmit+0x4a>
 800361a:	6922      	ldr	r2, [r4, #16]
 800361c:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003620:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	6820      	ldr	r0, [r4, #0]
  if ((ep_addr & 0x7F) == 0 )
 8003628:	b92e      	cbnz	r6, 8003636 <HAL_PCD_EP_Transmit+0x44>
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 800362a:	f000 fded 	bl	8004208 <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 800362e:	2000      	movs	r0, #0
 8003630:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8003634:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep,  hpcd->Init.dma_enable);
 8003636:	f000 fd2f 	bl	8004098 <USB_EPStartXfer>
 800363a:	e7f8      	b.n	800362e <HAL_PCD_EP_Transmit+0x3c>
  __HAL_LOCK(hpcd);
 800363c:	2002      	movs	r0, #2
}
 800363e:	bd70      	pop	{r4, r5, r6, pc}

08003640 <HAL_PCD_EP_SetStall>:
{
 8003640:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8003642:	b24b      	sxtb	r3, r1
 8003644:	2b00      	cmp	r3, #0
 8003646:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800364a:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800364e:	bfb5      	itete	lt
 8003650:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8003654:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003658:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 800365a:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_stall = 1;
 800365e:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003660:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8003662:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1;
 8003664:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8003666:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003668:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 800366a:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 800366e:	4293      	cmp	r3, r2
{
 8003670:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003672:	d00f      	beq.n	8003694 <HAL_PCD_EP_SetStall+0x54>
 8003674:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  USB_EPSetStall(hpcd->Instance , ep);
 8003678:	6800      	ldr	r0, [r0, #0]
 800367a:	f000 fe4a 	bl	8004312 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 800367e:	b92d      	cbnz	r5, 800368c <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance,  hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003680:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8003684:	7c21      	ldrb	r1, [r4, #16]
 8003686:	6820      	ldr	r0, [r4, #0]
 8003688:	f000 fed8 	bl	800443c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 800368c:	2000      	movs	r0, #0
 800368e:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8003692:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003694:	2002      	movs	r0, #2
}
 8003696:	bd38      	pop	{r3, r4, r5, pc}

08003698 <HAL_PCD_EP_ClrStall>:
{
 8003698:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 800369a:	b24b      	sxtb	r3, r1
 800369c:	2b00      	cmp	r3, #0
{
 800369e:	4605      	mov	r5, r0
 80036a0:	f04f 021c 	mov.w	r2, #28
 80036a4:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80036a8:	bfb5      	itete	lt
 80036aa:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 80036ae:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80036b2:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 80036b4:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80036b8:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 80036ba:	2400      	movs	r4, #0
 80036bc:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80036be:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80036c0:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80036c2:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d009      	beq.n	80036de <HAL_PCD_EP_ClrStall+0x46>
 80036ca:	2301      	movs	r3, #1
 80036cc:	f885 3384 	strb.w	r3, [r5, #900]	; 0x384
  USB_EPClearStall(hpcd->Instance , ep);
 80036d0:	6828      	ldr	r0, [r5, #0]
 80036d2:	f000 fe3d 	bl	8004350 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80036d6:	f885 4384 	strb.w	r4, [r5, #900]	; 0x384
  return HAL_OK;
 80036da:	4620      	mov	r0, r4
 80036dc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80036de:	2002      	movs	r0, #2
}
 80036e0:	bd38      	pop	{r3, r4, r5, pc}

080036e2 <HAL_PCDEx_LPM_Callback>:
 80036e2:	4770      	bx	lr

080036e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036e4:	4b02      	ldr	r3, [pc, #8]	; (80036f0 <HAL_PWREx_GetVoltageRange+0xc>)
 80036e6:	6818      	ldr	r0, [r3, #0]
}
 80036e8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40007000 	.word	0x40007000

080036f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036f6:	4d1e      	ldr	r5, [pc, #120]	; (8003770 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80036f8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80036fa:	00da      	lsls	r2, r3, #3
{
 80036fc:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036fe:	d518      	bpl.n	8003732 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003700:	f7ff fff0 	bl	80036e4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003704:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003708:	d123      	bne.n	8003752 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800370a:	2c80      	cmp	r4, #128	; 0x80
 800370c:	d929      	bls.n	8003762 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800370e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003710:	bf8c      	ite	hi
 8003712:	2002      	movhi	r0, #2
 8003714:	2001      	movls	r0, #1
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8003716:	4a17      	ldr	r2, [pc, #92]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8003718:	6813      	ldr	r3, [r2, #0]
 800371a:	f023 0307 	bic.w	r3, r3, #7
 800371e:	4303      	orrs	r3, r0
 8003720:	6013      	str	r3, [r2, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003722:	6813      	ldr	r3, [r2, #0]
 8003724:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8003728:	1a18      	subs	r0, r3, r0
 800372a:	bf18      	it	ne
 800372c:	2001      	movne	r0, #1
 800372e:	b003      	add	sp, #12
 8003730:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003732:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003738:	65ab      	str	r3, [r5, #88]	; 0x58
 800373a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800373c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003740:	9301      	str	r3, [sp, #4]
 8003742:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003744:	f7ff ffce 	bl	80036e4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003748:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800374a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374e:	65ab      	str	r3, [r5, #88]	; 0x58
 8003750:	e7d8      	b.n	8003704 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8003752:	2c80      	cmp	r4, #128	; 0x80
 8003754:	d807      	bhi.n	8003766 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8003756:	d008      	beq.n	800376a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7) 
 8003758:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 800375c:	4258      	negs	r0, r3
 800375e:	4158      	adcs	r0, r3
 8003760:	e7d9      	b.n	8003716 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003762:	2000      	movs	r0, #0
 8003764:	e7d7      	b.n	8003716 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8003766:	2003      	movs	r0, #3
 8003768:	e7d5      	b.n	8003716 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800376a:	2002      	movs	r0, #2
 800376c:	e7d3      	b.n	8003716 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	40022000 	.word	0x40022000

08003778 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8003778:	4b46      	ldr	r3, [pc, #280]	; (8003894 <HAL_RCC_GetSysClockFreq+0x11c>)
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	f012 0f0c 	tst.w	r2, #12
{
 8003780:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8003782:	d009      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800378a:	2a0c      	cmp	r2, #12
 800378c:	d148      	bne.n	8003820 <HAL_RCC_GetSysClockFreq+0xa8>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	f002 0203 	and.w	r2, r2, #3
 8003794:	2a01      	cmp	r2, #1
 8003796:	d143      	bne.n	8003820 <HAL_RCC_GetSysClockFreq+0xa8>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	0712      	lsls	r2, r2, #28
 800379c:	d437      	bmi.n	800380e <HAL_RCC_GetSysClockFreq+0x96>
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 800379e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80037a6:	fa91 f1a1 	rbit	r1, r1
 80037aa:	fab1 f181 	clz	r1, r1
 80037ae:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 80037b2:	40ca      	lsrs	r2, r1
    msirange = MSIRangeTable[msirange];
 80037b4:	4938      	ldr	r1, [pc, #224]	; (8003898 <HAL_RCC_GetSysClockFreq+0x120>)
 80037b6:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80037ba:	689a      	ldr	r2, [r3, #8]
      sysclockfreq = msirange;
 80037bc:	f012 0f0c 	tst.w	r2, #12
 80037c0:	bf0c      	ite	eq
 80037c2:	4620      	moveq	r0, r4
 80037c4:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	f002 020c 	and.w	r2, r2, #12
 80037cc:	2a0c      	cmp	r2, #12
 80037ce:	d154      	bne.n	800387a <HAL_RCC_GetSysClockFreq+0x102>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80037d0:	68da      	ldr	r2, [r3, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 80037d2:	68d8      	ldr	r0, [r3, #12]
 80037d4:	2170      	movs	r1, #112	; 0x70
 80037d6:	fa91 f1a1 	rbit	r1, r1
 80037da:	fab1 f181 	clz	r1, r1
 80037de:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80037e2:	40c8      	lsrs	r0, r1
 80037e4:	1c41      	adds	r1, r0, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80037e6:	f002 0003 	and.w	r0, r2, #3
    switch (pllsource)
 80037ea:	2802      	cmp	r0, #2
 80037ec:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80037f0:	d028      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0xcc>
 80037f2:	2803      	cmp	r0, #3
 80037f4:	d042      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0x104>
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80037f6:	68d8      	ldr	r0, [r3, #12]
 80037f8:	fa92 f2a2 	rbit	r2, r2
 80037fc:	fab2 f282 	clz	r2, r2
 8003800:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 8003804:	40d0      	lsrs	r0, r2
 8003806:	fbb4 f1f1 	udiv	r1, r4, r1
 800380a:	4348      	muls	r0, r1
      break;
 800380c:	e027      	b.n	800385e <HAL_RCC_GetSysClockFreq+0xe6>
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	21f0      	movs	r1, #240	; 0xf0
 8003812:	fa91 f1a1 	rbit	r1, r1
 8003816:	fab1 f181 	clz	r1, r1
 800381a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800381e:	e7c8      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x3a>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	f002 020c 	and.w	r2, r2, #12
 8003826:	2a04      	cmp	r2, #4
 8003828:	d007      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0xc2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	f002 020c 	and.w	r2, r2, #12
 8003830:	2a08      	cmp	r2, #8
 8003832:	d104      	bne.n	800383e <HAL_RCC_GetSysClockFreq+0xc6>
    sysclockfreq = HSE_VALUE;
 8003834:	4819      	ldr	r0, [pc, #100]	; (800389c <HAL_RCC_GetSysClockFreq+0x124>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8003836:	2400      	movs	r4, #0
 8003838:	e7c5      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 800383a:	4819      	ldr	r0, [pc, #100]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x128>)
 800383c:	e7fb      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0xbe>
  uint32_t sysclockfreq = 0U;
 800383e:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8003840:	4604      	mov	r4, r0
 8003842:	e7c0      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8003844:	68d8      	ldr	r0, [r3, #12]
 8003846:	fa92 f2a2 	rbit	r2, r2
 800384a:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 800384e:	fab2 f282 	clz	r2, r2
 8003852:	fa20 f202 	lsr.w	r2, r0, r2
 8003856:	4812      	ldr	r0, [pc, #72]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x128>)
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8003858:	fbb0 f0f1 	udiv	r0, r0, r1
 800385c:	4350      	muls	r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003864:	fa92 f2a2 	rbit	r2, r2
 8003868:	fab2 f282 	clz	r2, r2
 800386c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003870:	40d3      	lsrs	r3, r2
 8003872:	3301      	adds	r3, #1
 8003874:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8003876:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800387a:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 800387c:	68d8      	ldr	r0, [r3, #12]
 800387e:	fa92 f2a2 	rbit	r2, r2
 8003882:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 8003886:	fab2 f282 	clz	r2, r2
 800388a:	fa20 f202 	lsr.w	r2, r0, r2
 800388e:	4803      	ldr	r0, [pc, #12]	; (800389c <HAL_RCC_GetSysClockFreq+0x124>)
 8003890:	e7e2      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0xe0>
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000
 8003898:	08004abc 	.word	0x08004abc
 800389c:	007a1200 	.word	0x007a1200
 80038a0:	00f42400 	.word	0x00f42400

080038a4 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038a4:	6803      	ldr	r3, [r0, #0]
{
 80038a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80038aa:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038ac:	06d8      	lsls	r0, r3, #27
 80038ae:	d541      	bpl.n	8003934 <HAL_RCC_OscConfig+0x90>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80038b0:	4ca5      	ldr	r4, [pc, #660]	; (8003b48 <HAL_RCC_OscConfig+0x2a4>)
 80038b2:	68a3      	ldr	r3, [r4, #8]
 80038b4:	f013 0f0c 	tst.w	r3, #12
 80038b8:	d166      	bne.n	8003988 <HAL_RCC_OscConfig+0xe4>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	0799      	lsls	r1, r3, #30
 80038be:	d505      	bpl.n	80038cc <HAL_RCC_OscConfig+0x28>
 80038c0:	69ab      	ldr	r3, [r5, #24]
 80038c2:	b91b      	cbnz	r3, 80038cc <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 80038c4:	2001      	movs	r0, #1
}
 80038c6:	b002      	add	sp, #8
 80038c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	6a28      	ldr	r0, [r5, #32]
 80038d0:	071a      	lsls	r2, r3, #28
 80038d2:	bf56      	itet	pl
 80038d4:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80038d8:	6823      	ldrmi	r3, [r4, #0]
 80038da:	091b      	lsrpl	r3, r3, #4
 80038dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038e0:	4283      	cmp	r3, r0
 80038e2:	d23c      	bcs.n	800395e <HAL_RCC_OscConfig+0xba>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038e4:	f7ff ff06 	bl	80036f4 <RCC_SetFlashLatencyFromMSIRange>
 80038e8:	2800      	cmp	r0, #0
 80038ea:	d1eb      	bne.n	80038c4 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	f043 0308 	orr.w	r3, r3, #8
 80038f2:	6023      	str	r3, [r4, #0]
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	6a2a      	ldr	r2, [r5, #32]
 80038f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038fc:	4313      	orrs	r3, r2
 80038fe:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003900:	6863      	ldr	r3, [r4, #4]
 8003902:	69ea      	ldr	r2, [r5, #28]
 8003904:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003908:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800390c:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800390e:	f7ff ff33 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8003912:	68a3      	ldr	r3, [r4, #8]
 8003914:	22f0      	movs	r2, #240	; 0xf0
 8003916:	fa92 f2a2 	rbit	r2, r2
 800391a:	fab2 f282 	clz	r2, r2
 800391e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003922:	40d3      	lsrs	r3, r2
 8003924:	4a89      	ldr	r2, [pc, #548]	; (8003b4c <HAL_RCC_OscConfig+0x2a8>)
 8003926:	5cd3      	ldrb	r3, [r2, r3]
 8003928:	40d8      	lsrs	r0, r3
 800392a:	4b89      	ldr	r3, [pc, #548]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 800392c:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800392e:	2000      	movs	r0, #0
 8003930:	f7ff fa14 	bl	8002d5c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003934:	682b      	ldr	r3, [r5, #0]
 8003936:	07de      	lsls	r6, r3, #31
 8003938:	d45b      	bmi.n	80039f2 <HAL_RCC_OscConfig+0x14e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393a:	682b      	ldr	r3, [r5, #0]
 800393c:	079c      	lsls	r4, r3, #30
 800393e:	f100 80a3 	bmi.w	8003a88 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003942:	682b      	ldr	r3, [r5, #0]
 8003944:	0719      	lsls	r1, r3, #28
 8003946:	f100 80e7 	bmi.w	8003b18 <HAL_RCC_OscConfig+0x274>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800394a:	682b      	ldr	r3, [r5, #0]
 800394c:	075a      	lsls	r2, r3, #29
 800394e:	f100 8115 	bmi.w	8003b7c <HAL_RCC_OscConfig+0x2d8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003952:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003954:	2a00      	cmp	r2, #0
 8003956:	f040 817c 	bne.w	8003c52 <HAL_RCC_OscConfig+0x3ae>
  return HAL_OK;
 800395a:	2000      	movs	r0, #0
 800395c:	e7b3      	b.n	80038c6 <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	f043 0308 	orr.w	r3, r3, #8
 8003964:	6023      	str	r3, [r4, #0]
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800396c:	4303      	orrs	r3, r0
 800396e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003970:	6863      	ldr	r3, [r4, #4]
 8003972:	69ea      	ldr	r2, [r5, #28]
 8003974:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003978:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800397c:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800397e:	f7ff feb9 	bl	80036f4 <RCC_SetFlashLatencyFromMSIRange>
 8003982:	2800      	cmp	r0, #0
 8003984:	d0c3      	beq.n	800390e <HAL_RCC_OscConfig+0x6a>
 8003986:	e79d      	b.n	80038c4 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003988:	69ab      	ldr	r3, [r5, #24]
 800398a:	b313      	cbz	r3, 80039d2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_ENABLE();
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003994:	f7ff fa0a 	bl	8002dac <HAL_GetTick>
 8003998:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	079b      	lsls	r3, r3, #30
 800399e:	d511      	bpl.n	80039c4 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	f043 0308 	orr.w	r3, r3, #8
 80039a6:	6023      	str	r3, [r4, #0]
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	6a2a      	ldr	r2, [r5, #32]
 80039ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039b0:	4313      	orrs	r3, r2
 80039b2:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039b4:	6863      	ldr	r3, [r4, #4]
 80039b6:	69ea      	ldr	r2, [r5, #28]
 80039b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80039c0:	6063      	str	r3, [r4, #4]
 80039c2:	e7b7      	b.n	8003934 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039c4:	f7ff f9f2 	bl	8002dac <HAL_GetTick>
 80039c8:	1b80      	subs	r0, r0, r6
 80039ca:	2802      	cmp	r0, #2
 80039cc:	d9e5      	bls.n	800399a <HAL_RCC_OscConfig+0xf6>
            return HAL_TIMEOUT;
 80039ce:	2003      	movs	r0, #3
 80039d0:	e779      	b.n	80038c6 <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80039da:	f7ff f9e7 	bl	8002dac <HAL_GetTick>
 80039de:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	079f      	lsls	r7, r3, #30
 80039e4:	d5a6      	bpl.n	8003934 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039e6:	f7ff f9e1 	bl	8002dac <HAL_GetTick>
 80039ea:	1b80      	subs	r0, r0, r6
 80039ec:	2802      	cmp	r0, #2
 80039ee:	d9f7      	bls.n	80039e0 <HAL_RCC_OscConfig+0x13c>
 80039f0:	e7ed      	b.n	80039ce <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80039f2:	4c55      	ldr	r4, [pc, #340]	; (8003b48 <HAL_RCC_OscConfig+0x2a4>)
 80039f4:	68a3      	ldr	r3, [r4, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d009      	beq.n	8003a12 <HAL_RCC_OscConfig+0x16e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039fe:	68a3      	ldr	r3, [r4, #8]
 8003a00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8003a04:	2b0c      	cmp	r3, #12
 8003a06:	d10b      	bne.n	8003a20 <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a08:	68e3      	ldr	r3, [r4, #12]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d106      	bne.n	8003a20 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	0398      	lsls	r0, r3, #14
 8003a16:	d590      	bpl.n	800393a <HAL_RCC_OscConfig+0x96>
 8003a18:	686b      	ldr	r3, [r5, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d18d      	bne.n	800393a <HAL_RCC_OscConfig+0x96>
 8003a1e:	e751      	b.n	80038c4 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a20:	686b      	ldr	r3, [r5, #4]
 8003a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a26:	d110      	bne.n	8003a4a <HAL_RCC_OscConfig+0x1a6>
 8003a28:	6823      	ldr	r3, [r4, #0]
 8003a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003a30:	f7ff f9bc 	bl	8002dac <HAL_GetTick>
 8003a34:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	0399      	lsls	r1, r3, #14
 8003a3a:	f53f af7e 	bmi.w	800393a <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a3e:	f7ff f9b5 	bl	8002dac <HAL_GetTick>
 8003a42:	1b80      	subs	r0, r0, r6
 8003a44:	2864      	cmp	r0, #100	; 0x64
 8003a46:	d9f6      	bls.n	8003a36 <HAL_RCC_OscConfig+0x192>
 8003a48:	e7c1      	b.n	80039ce <HAL_RCC_OscConfig+0x12a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a4e:	d104      	bne.n	8003a5a <HAL_RCC_OscConfig+0x1b6>
 8003a50:	6823      	ldr	r3, [r4, #0]
 8003a52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a56:	6023      	str	r3, [r4, #0]
 8003a58:	e7e6      	b.n	8003a28 <HAL_RCC_OscConfig+0x184>
 8003a5a:	6822      	ldr	r2, [r4, #0]
 8003a5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a60:	6022      	str	r2, [r4, #0]
 8003a62:	6822      	ldr	r2, [r4, #0]
 8003a64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a68:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e0      	bne.n	8003a30 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8003a6e:	f7ff f99d 	bl	8002dac <HAL_GetTick>
 8003a72:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	039a      	lsls	r2, r3, #14
 8003a78:	f57f af5f 	bpl.w	800393a <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a7c:	f7ff f996 	bl	8002dac <HAL_GetTick>
 8003a80:	1b80      	subs	r0, r0, r6
 8003a82:	2864      	cmp	r0, #100	; 0x64
 8003a84:	d9f6      	bls.n	8003a74 <HAL_RCC_OscConfig+0x1d0>
 8003a86:	e7a2      	b.n	80039ce <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8003a88:	4c2f      	ldr	r4, [pc, #188]	; (8003b48 <HAL_RCC_OscConfig+0x2a4>)
 8003a8a:	68a3      	ldr	r3, [r4, #8]
 8003a8c:	f003 030c 	and.w	r3, r3, #12
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d009      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x204>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a94:	68a3      	ldr	r3, [r4, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8003a9a:	2b0c      	cmp	r3, #12
 8003a9c:	d119      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x22e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a9e:	68e3      	ldr	r3, [r4, #12]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d114      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x22e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	055b      	lsls	r3, r3, #21
 8003aac:	d503      	bpl.n	8003ab6 <HAL_RCC_OscConfig+0x212>
 8003aae:	68eb      	ldr	r3, [r5, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f43f af07 	beq.w	80038c4 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab6:	6861      	ldr	r1, [r4, #4]
 8003ab8:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8003abc:	fa93 f3a3 	rbit	r3, r3
 8003ac0:	fab3 f283 	clz	r2, r3
 8003ac4:	692b      	ldr	r3, [r5, #16]
 8003ac6:	4093      	lsls	r3, r2
 8003ac8:	f021 52f8 	bic.w	r2, r1, #520093696	; 0x1f000000
 8003acc:	4313      	orrs	r3, r2
 8003ace:	6063      	str	r3, [r4, #4]
 8003ad0:	e737      	b.n	8003942 <HAL_RCC_OscConfig+0x9e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ad2:	68eb      	ldr	r3, [r5, #12]
 8003ad4:	b17b      	cbz	r3, 8003af6 <HAL_RCC_OscConfig+0x252>
        __HAL_RCC_HSI_ENABLE();
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003adc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003ade:	f7ff f965 	bl	8002dac <HAL_GetTick>
 8003ae2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	055f      	lsls	r7, r3, #21
 8003ae8:	d4e5      	bmi.n	8003ab6 <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aea:	f7ff f95f 	bl	8002dac <HAL_GetTick>
 8003aee:	1b80      	subs	r0, r0, r6
 8003af0:	2802      	cmp	r0, #2
 8003af2:	d9f7      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x240>
 8003af4:	e76b      	b.n	80039ce <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_DISABLE();
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003afc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003afe:	f7ff f955 	bl	8002dac <HAL_GetTick>
 8003b02:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	0558      	lsls	r0, r3, #21
 8003b08:	f57f af1b 	bpl.w	8003942 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b0c:	f7ff f94e 	bl	8002dac <HAL_GetTick>
 8003b10:	1b80      	subs	r0, r0, r6
 8003b12:	2802      	cmp	r0, #2
 8003b14:	d9f6      	bls.n	8003b04 <HAL_RCC_OscConfig+0x260>
 8003b16:	e75a      	b.n	80039ce <HAL_RCC_OscConfig+0x12a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b18:	696b      	ldr	r3, [r5, #20]
 8003b1a:	4c0b      	ldr	r4, [pc, #44]	; (8003b48 <HAL_RCC_OscConfig+0x2a4>)
 8003b1c:	b1d3      	cbz	r3, 8003b54 <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_LSI_ENABLE();
 8003b1e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003b2a:	f7ff f93f 	bl	8002dac <HAL_GetTick>
 8003b2e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8003b30:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003b34:	079b      	lsls	r3, r3, #30
 8003b36:	f53f af08 	bmi.w	800394a <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b3a:	f7ff f937 	bl	8002dac <HAL_GetTick>
 8003b3e:	1b80      	subs	r0, r0, r6
 8003b40:	2802      	cmp	r0, #2
 8003b42:	d9f5      	bls.n	8003b30 <HAL_RCC_OscConfig+0x28c>
 8003b44:	e743      	b.n	80039ce <HAL_RCC_OscConfig+0x12a>
 8003b46:	bf00      	nop
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	08004aaa 	.word	0x08004aaa
 8003b50:	20000008 	.word	0x20000008
      __HAL_RCC_LSI_DISABLE();
 8003b54:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003b60:	f7ff f924 	bl	8002dac <HAL_GetTick>
 8003b64:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8003b66:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003b6a:	079f      	lsls	r7, r3, #30
 8003b6c:	f57f aeed 	bpl.w	800394a <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b70:	f7ff f91c 	bl	8002dac <HAL_GetTick>
 8003b74:	1b80      	subs	r0, r0, r6
 8003b76:	2802      	cmp	r0, #2
 8003b78:	d9f5      	bls.n	8003b66 <HAL_RCC_OscConfig+0x2c2>
 8003b7a:	e728      	b.n	80039ce <HAL_RCC_OscConfig+0x12a>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b7c:	4c66      	ldr	r4, [pc, #408]	; (8003d18 <HAL_RCC_OscConfig+0x474>)
 8003b7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b80:	00de      	lsls	r6, r3, #3
 8003b82:	d427      	bmi.n	8003bd4 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003b96:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b98:	4e60      	ldr	r6, [pc, #384]	; (8003d1c <HAL_RCC_OscConfig+0x478>)
 8003b9a:	6833      	ldr	r3, [r6, #0]
 8003b9c:	05d8      	lsls	r0, r3, #23
 8003b9e:	d51b      	bpl.n	8003bd8 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba0:	68ab      	ldr	r3, [r5, #8]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d129      	bne.n	8003bfa <HAL_RCC_OscConfig+0x356>
 8003ba6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003bb2:	f7ff f8fb 	bl	8002dac <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003bba:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8003bbc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003bc0:	079a      	lsls	r2, r3, #30
 8003bc2:	d540      	bpl.n	8003c46 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8003bc4:	2f00      	cmp	r7, #0
 8003bc6:	f43f aec4 	beq.w	8003952 <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	65a3      	str	r3, [r4, #88]	; 0x58
 8003bd2:	e6be      	b.n	8003952 <HAL_RCC_OscConfig+0xae>
    FlagStatus       pwrclkchanged = RESET;
 8003bd4:	2700      	movs	r7, #0
 8003bd6:	e7df      	b.n	8003b98 <HAL_RCC_OscConfig+0x2f4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bd8:	6833      	ldr	r3, [r6, #0]
 8003bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bde:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003be0:	f7ff f8e4 	bl	8002dac <HAL_GetTick>
 8003be4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003be6:	6833      	ldr	r3, [r6, #0]
 8003be8:	05d9      	lsls	r1, r3, #23
 8003bea:	d4d9      	bmi.n	8003ba0 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bec:	f7ff f8de 	bl	8002dac <HAL_GetTick>
 8003bf0:	eba0 0008 	sub.w	r0, r0, r8
 8003bf4:	2802      	cmp	r0, #2
 8003bf6:	d9f6      	bls.n	8003be6 <HAL_RCC_OscConfig+0x342>
 8003bf8:	e6e9      	b.n	80039ce <HAL_RCC_OscConfig+0x12a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bfa:	2b05      	cmp	r3, #5
 8003bfc:	d106      	bne.n	8003c0c <HAL_RCC_OscConfig+0x368>
 8003bfe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003c02:	f043 0304 	orr.w	r3, r3, #4
 8003c06:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8003c0a:	e7cc      	b.n	8003ba6 <HAL_RCC_OscConfig+0x302>
 8003c0c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003c10:	f022 0201 	bic.w	r2, r2, #1
 8003c14:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8003c18:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003c1c:	f022 0204 	bic.w	r2, r2, #4
 8003c20:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1c4      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x30e>
      tickstart = HAL_GetTick();
 8003c28:	f7ff f8c0 	bl	8002dac <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003c30:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8003c32:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003c36:	079b      	lsls	r3, r3, #30
 8003c38:	d5c4      	bpl.n	8003bc4 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7ff f8b7 	bl	8002dac <HAL_GetTick>
 8003c3e:	1b80      	subs	r0, r0, r6
 8003c40:	4540      	cmp	r0, r8
 8003c42:	d9f6      	bls.n	8003c32 <HAL_RCC_OscConfig+0x38e>
 8003c44:	e6c3      	b.n	80039ce <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c46:	f7ff f8b1 	bl	8002dac <HAL_GetTick>
 8003c4a:	1b80      	subs	r0, r0, r6
 8003c4c:	4540      	cmp	r0, r8
 8003c4e:	d9b5      	bls.n	8003bbc <HAL_RCC_OscConfig+0x318>
 8003c50:	e6bd      	b.n	80039ce <HAL_RCC_OscConfig+0x12a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c52:	4c31      	ldr	r4, [pc, #196]	; (8003d18 <HAL_RCC_OscConfig+0x474>)
 8003c54:	68a3      	ldr	r3, [r4, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b0c      	cmp	r3, #12
 8003c5c:	f43f ae32 	beq.w	80038c4 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8003c60:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c62:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8003c64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c68:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c6a:	d137      	bne.n	8003cdc <HAL_RCC_OscConfig+0x438>
        tickstart = HAL_GetTick();
 8003c6c:	f7ff f89e 	bl	8002dac <HAL_GetTick>
 8003c70:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	019f      	lsls	r7, r3, #6
 8003c76:	d42b      	bmi.n	8003cd0 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c78:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003c7a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003c7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003c80:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003c82:	3a01      	subs	r2, #1
 8003c84:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003c88:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8003c8a:	0912      	lsrs	r2, r2, #4
 8003c8c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8003c90:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003c92:	0852      	lsrs	r2, r2, #1
 8003c94:	3a01      	subs	r2, #1
 8003c96:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003c9a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003c9c:	0852      	lsrs	r2, r2, #1
 8003c9e:	3a01      	subs	r2, #1
 8003ca0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003ca4:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cac:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cae:	68e3      	ldr	r3, [r4, #12]
 8003cb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb4:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8003cb6:	f7ff f879 	bl	8002dac <HAL_GetTick>
 8003cba:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	0198      	lsls	r0, r3, #6
 8003cc0:	f53f ae4b 	bmi.w	800395a <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc4:	f7ff f872 	bl	8002dac <HAL_GetTick>
 8003cc8:	1b40      	subs	r0, r0, r5
 8003cca:	2802      	cmp	r0, #2
 8003ccc:	d9f6      	bls.n	8003cbc <HAL_RCC_OscConfig+0x418>
 8003cce:	e67e      	b.n	80039ce <HAL_RCC_OscConfig+0x12a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd0:	f7ff f86c 	bl	8002dac <HAL_GetTick>
 8003cd4:	1b80      	subs	r0, r0, r6
 8003cd6:	2802      	cmp	r0, #2
 8003cd8:	d9cb      	bls.n	8003c72 <HAL_RCC_OscConfig+0x3ce>
 8003cda:	e678      	b.n	80039ce <HAL_RCC_OscConfig+0x12a>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	0119      	lsls	r1, r3, #4
 8003ce0:	d406      	bmi.n	8003cf0 <HAL_RCC_OscConfig+0x44c>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8003ce2:	6823      	ldr	r3, [r4, #0]
           && 
 8003ce4:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ce6:	bf5e      	ittt	pl
 8003ce8:	68e3      	ldrpl	r3, [r4, #12]
 8003cea:	f023 0303 	bicpl.w	r3, r3, #3
 8003cee:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003cf0:	68e3      	ldr	r3, [r4, #12]
 8003cf2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfa:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8003cfc:	f7ff f856 	bl	8002dac <HAL_GetTick>
 8003d00:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	019b      	lsls	r3, r3, #6
 8003d06:	f57f ae28 	bpl.w	800395a <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0a:	f7ff f84f 	bl	8002dac <HAL_GetTick>
 8003d0e:	1b40      	subs	r0, r0, r5
 8003d10:	2802      	cmp	r0, #2
 8003d12:	d9f6      	bls.n	8003d02 <HAL_RCC_OscConfig+0x45e>
 8003d14:	e65b      	b.n	80039ce <HAL_RCC_OscConfig+0x12a>
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	40007000 	.word	0x40007000

08003d20 <HAL_RCC_GetHCLKFreq>:
}
 8003d20:	4b01      	ldr	r3, [pc, #4]	; (8003d28 <HAL_RCC_GetHCLKFreq+0x8>)
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20000008 	.word	0x20000008

08003d2c <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003d2c:	4a02      	ldr	r2, [pc, #8]	; (8003d38 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8003d2e:	6813      	ldr	r3, [r2, #0]
 8003d30:	f043 0304 	orr.w	r3, r3, #4
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	4770      	bx	lr
 8003d38:	40021000 	.word	0x40021000

08003d3c <HAL_SD_XferCpltCallback>:
 8003d3c:	4770      	bx	lr

08003d3e <HAL_SD_XferErrorCallback>:
 8003d3e:	4770      	bx	lr

08003d40 <HAL_SD_IRQHandler>:
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{  
  /* Check for SDMMC interrupt flags */
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 8003d40:	6803      	ldr	r3, [r0, #0]
 8003d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d44:	05d2      	lsls	r2, r2, #23
{  
 8003d46:	b510      	push	{r4, lr}
 8003d48:	4604      	mov	r4, r0
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 8003d4a:	d510      	bpl.n	8003d6e <HAL_SD_IRQHandler+0x2e>
  {
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_IT_DATAEND);  
 8003d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d50:	639a      	str	r2, [r3, #56]	; 0x38
      
    /* SD transfer is complete */
    hsd->SdTransferCplt = 1;
 8003d52:	2301      	movs	r3, #1
 8003d54:	6483      	str	r3, [r0, #72]	; 0x48

    /* No transfer error */ 
    hsd->SdTransferErr  = SD_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	64c3      	str	r3, [r0, #76]	; 0x4c

    HAL_SD_XferCpltCallback(hsd);  
 8003d5a:	f7ff ffef 	bl	8003d3c <HAL_SD_XferCpltCallback>
  {
    /* No error flag set */
  }  

  /* Disable all SDMMC peripheral interrupt sources */
  __HAL_SD_SDMMC_DISABLE_IT(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_DATAEND  |\
 8003d5e:	6822      	ldr	r2, [r4, #0]
 8003d60:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003d62:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003d66:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003d6a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003d6c:	bd10      	pop	{r4, pc}
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL))
 8003d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d70:	0791      	lsls	r1, r2, #30
 8003d72:	d505      	bpl.n	8003d80 <HAL_SD_IRQHandler+0x40>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8003d74:	2202      	movs	r2, #2
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_CRC_FAIL;
 8003d78:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 8003d7a:	f7ff ffe0 	bl	8003d3e <HAL_SD_XferErrorCallback>
 8003d7e:	e7ee      	b.n	8003d5e <HAL_SD_IRQHandler+0x1e>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT))
 8003d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d82:	0712      	lsls	r2, r2, #28
 8003d84:	d504      	bpl.n	8003d90 <HAL_SD_IRQHandler+0x50>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8003d86:	2208      	movs	r2, #8
 8003d88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_TIMEOUT;
 8003d8a:	2304      	movs	r3, #4
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 8003d8c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003d8e:	e7f4      	b.n	8003d7a <HAL_SD_IRQHandler+0x3a>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_RXOVERR))
 8003d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d92:	0691      	lsls	r1, r2, #26
 8003d94:	d503      	bpl.n	8003d9e <HAL_SD_IRQHandler+0x5e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8003d96:	2220      	movs	r2, #32
 8003d98:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_RX_OVERRUN;
 8003d9a:	2306      	movs	r3, #6
 8003d9c:	e7f6      	b.n	8003d8c <HAL_SD_IRQHandler+0x4c>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_TXUNDERR))
 8003d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003da0:	06d2      	lsls	r2, r2, #27
 8003da2:	d5dc      	bpl.n	8003d5e <HAL_SD_IRQHandler+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_TXUNDERR);
 8003da4:	2210      	movs	r2, #16
 8003da6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 8003da8:	2305      	movs	r3, #5
 8003daa:	e7ef      	b.n	8003d8c <HAL_SD_IRQHandler+0x4c>

08003dac <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003db0:	680a      	ldr	r2, [r1, #0]
 8003db2:	fa92 f4a2 	rbit	r4, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003db6:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003dba:	fab4 f484 	clz	r4, r4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003dbe:	2503      	movs	r5, #3
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003dc0:	270f      	movs	r7, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003dc2:	fa32 f304 	lsrs.w	r3, r2, r4
 8003dc6:	d10d      	bne.n	8003de4 <LL_GPIO_Init+0x38>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003dc8:	684b      	ldr	r3, [r1, #4]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d806      	bhi.n	8003dde <LL_GPIO_Init+0x32>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003dd0:	6843      	ldr	r3, [r0, #4]
 8003dd2:	68c9      	ldr	r1, [r1, #12]
 8003dd4:	ea23 0302 	bic.w	r3, r3, r2
 8003dd8:	434a      	muls	r2, r1
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8003dde:	2001      	movs	r0, #1
 8003de0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003de4:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 8003de8:	4013      	ands	r3, r2
 8003dea:	d069      	beq.n	8003ec0 <LL_GPIO_Init+0x114>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003dec:	f8d1 8004 	ldr.w	r8, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003df0:	f8d0 9000 	ldr.w	r9, [r0]
 8003df4:	fa93 fca3 	rbit	ip, r3
 8003df8:	fabc fc8c 	clz	ip, ip
 8003dfc:	fa93 f6a3 	rbit	r6, r3
 8003e00:	fab6 f686 	clz	r6, r6
 8003e04:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003e08:	fa05 fc0c 	lsl.w	ip, r5, ip
 8003e0c:	0076      	lsls	r6, r6, #1
 8003e0e:	ea29 0c0c 	bic.w	ip, r9, ip
 8003e12:	fa08 f606 	lsl.w	r6, r8, r6
 8003e16:	ea4c 0606 	orr.w	r6, ip, r6
 8003e1a:	6006      	str	r6, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003e1c:	f108 36ff 	add.w	r6, r8, #4294967295
 8003e20:	2e01      	cmp	r6, #1
 8003e22:	d816      	bhi.n	8003e52 <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8003e24:	6886      	ldr	r6, [r0, #8]
 8003e26:	fa93 fca3 	rbit	ip, r3
 8003e2a:	fabc fc8c 	clz	ip, ip
 8003e2e:	fa93 f9a3 	rbit	r9, r3
 8003e32:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003e36:	fa05 fc0c 	lsl.w	ip, r5, ip
 8003e3a:	ea26 0c0c 	bic.w	ip, r6, ip
 8003e3e:	fab9 f989 	clz	r9, r9
 8003e42:	688e      	ldr	r6, [r1, #8]
 8003e44:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8003e48:	fa06 f609 	lsl.w	r6, r6, r9
 8003e4c:	ea4c 0606 	orr.w	r6, ip, r6
 8003e50:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003e52:	68c6      	ldr	r6, [r0, #12]
 8003e54:	fa93 fca3 	rbit	ip, r3
 8003e58:	fabc fc8c 	clz	ip, ip
 8003e5c:	fa93 f9a3 	rbit	r9, r3
 8003e60:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003e64:	fa05 fc0c 	lsl.w	ip, r5, ip
 8003e68:	ea26 0c0c 	bic.w	ip, r6, ip
 8003e6c:	fab9 f989 	clz	r9, r9
 8003e70:	690e      	ldr	r6, [r1, #16]
 8003e72:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8003e76:	fa06 f609 	lsl.w	r6, r6, r9
 8003e7a:	ea4c 0606 	orr.w	r6, ip, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003e7e:	f1b8 0f02 	cmp.w	r8, #2
 8003e82:	60c6      	str	r6, [r0, #12]
 8003e84:	d11c      	bne.n	8003ec0 <LL_GPIO_Init+0x114>
 8003e86:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003e8a:	fab6 f686 	clz	r6, r6
 8003e8e:	2e07      	cmp	r6, #7
 8003e90:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8003e94:	dc16      	bgt.n	8003ec4 <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003e96:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8003e9a:	fa93 f6a3 	rbit	r6, r3
 8003e9e:	fab6 f686 	clz	r6, r6
 8003ea2:	fa93 f3a3 	rbit	r3, r3
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	00b6      	lsls	r6, r6, #2
 8003eac:	fa07 f606 	lsl.w	r6, r7, r6
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	ea28 0606 	bic.w	r6, r8, r6
 8003eb6:	fa0c fc03 	lsl.w	ip, ip, r3
 8003eba:	ea46 060c 	orr.w	r6, r6, ip
 8003ebe:	6206      	str	r6, [r0, #32]
    pinpos++;
 8003ec0:	3401      	adds	r4, #1
 8003ec2:	e77e      	b.n	8003dc2 <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003ec4:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 8003ec8:	0a1b      	lsrs	r3, r3, #8
 8003eca:	fa93 f6a3 	rbit	r6, r3
 8003ece:	fab6 f686 	clz	r6, r6
 8003ed2:	fa93 f3a3 	rbit	r3, r3
 8003ed6:	fab3 f383 	clz	r3, r3
 8003eda:	00b6      	lsls	r6, r6, #2
 8003edc:	fa07 f606 	lsl.w	r6, r7, r6
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	ea28 0606 	bic.w	r6, r8, r6
 8003ee6:	fa0c f303 	lsl.w	r3, ip, r3
 8003eea:	4333      	orrs	r3, r6
 8003eec:	6243      	str	r3, [r0, #36]	; 0x24
 8003eee:	e7e7      	b.n	8003ec0 <LL_GPIO_Init+0x114>

08003ef0 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8003ef0:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8003ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ef6:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8003ef8:	68c3      	ldr	r3, [r0, #12]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8003efa:	065a      	lsls	r2, r3, #25
 8003efc:	d41c      	bmi.n	8003f38 <LL_RTC_EnterInitMode+0x48>
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8003efe:	f04f 33ff 	mov.w	r3, #4294967295
 8003f02:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8003f04:	68c3      	ldr	r3, [r0, #12]
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8003f06:	490d      	ldr	r1, [pc, #52]	; (8003f3c <LL_RTC_EnterInitMode+0x4c>)
 8003f08:	f3c3 1380 	ubfx	r3, r3, #6, #1
  ErrorStatus status = SUCCESS;
 8003f0c:	2201      	movs	r2, #1
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 8003f0e:	9c01      	ldr	r4, [sp, #4]
 8003f10:	b104      	cbz	r4, 8003f14 <LL_RTC_EnterInitMode+0x24>
 8003f12:	b113      	cbz	r3, 8003f1a <LL_RTC_EnterInitMode+0x2a>
        status = ERROR;
      }
    }
  }
  return status;
}
 8003f14:	4610      	mov	r0, r2
 8003f16:	b002      	add	sp, #8
 8003f18:	bd10      	pop	{r4, pc}
 8003f1a:	680b      	ldr	r3, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8003f1c:	03db      	lsls	r3, r3, #15
        timeout --;
 8003f1e:	bf42      	ittt	mi
 8003f20:	9b01      	ldrmi	r3, [sp, #4]
 8003f22:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8003f26:	9301      	strmi	r3, [sp, #4]
 8003f28:	68c3      	ldr	r3, [r0, #12]
      if (timeout == 0U)
 8003f2a:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 8003f2c:	2c00      	cmp	r4, #0
 8003f2e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003f32:	bf08      	it	eq
 8003f34:	2200      	moveq	r2, #0
 8003f36:	e7ea      	b.n	8003f0e <LL_RTC_EnterInitMode+0x1e>
  ErrorStatus status = SUCCESS;
 8003f38:	2201      	movs	r2, #1
 8003f3a:	e7eb      	b.n	8003f14 <LL_RTC_EnterInitMode+0x24>
 8003f3c:	e000e010 	.word	0xe000e010

08003f40 <LL_RTC_Init>:
{
 8003f40:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8003f42:	23ca      	movs	r3, #202	; 0xca
 8003f44:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8003f46:	2353      	movs	r3, #83	; 0x53
 8003f48:	6243      	str	r3, [r0, #36]	; 0x24
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	460d      	mov	r5, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8003f4e:	f7ff ffcf 	bl	8003ef0 <LL_RTC_EnterInitMode>
 8003f52:	b1f0      	cbz	r0, 8003f92 <LL_RTC_Init+0x52>
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8003f54:	68a3      	ldr	r3, [r4, #8]
 8003f56:	682a      	ldr	r2, [r5, #0]
 8003f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8003f60:	6923      	ldr	r3, [r4, #16]
 8003f62:	68aa      	ldr	r2, [r5, #8]
 8003f64:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	6123      	str	r3, [r4, #16]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_POSITION_PRER_PREDIV_A);
 8003f70:	6921      	ldr	r1, [r4, #16]
 8003f72:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
 8003f76:	fa93 f3a3 	rbit	r3, r3
 8003f7a:	fab3 f283 	clz	r2, r3
 8003f7e:	686b      	ldr	r3, [r5, #4]
 8003f80:	4093      	lsls	r3, r2
 8003f82:	f421 02fe 	bic.w	r2, r1, #8323072	; 0x7f0000
 8003f86:	4313      	orrs	r3, r2
 8003f88:	6123      	str	r3, [r4, #16]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8003f8a:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8003f8e:	60e3      	str	r3, [r4, #12]
    status = SUCCESS;
 8003f90:	2001      	movs	r0, #1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8003f92:	23ff      	movs	r3, #255	; 0xff
 8003f94:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003f96:	bd38      	pop	{r3, r4, r5, pc}

08003f98 <LL_SPI_Init>:
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8003f98:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003f9a:	065b      	lsls	r3, r3, #25
{
 8003f9c:	b570      	push	{r4, r5, r6, lr}
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003f9e:	d426      	bmi.n	8003fee <LL_SPI_Init+0x56>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003fa0:	e891 0048 	ldmia.w	r1, {r3, r6}
 8003fa4:	4333      	orrs	r3, r6
 8003fa6:	68ce      	ldr	r6, [r1, #12]
 8003fa8:	694d      	ldr	r5, [r1, #20]
 8003faa:	6804      	ldr	r4, [r0, #0]
 8003fac:	6a0a      	ldr	r2, [r1, #32]
 8003fae:	4333      	orrs	r3, r6
 8003fb0:	690e      	ldr	r6, [r1, #16]
 8003fb2:	4333      	orrs	r3, r6
 8003fb4:	698e      	ldr	r6, [r1, #24]
 8003fb6:	432b      	orrs	r3, r5
 8003fb8:	4333      	orrs	r3, r6
 8003fba:	69ce      	ldr	r6, [r1, #28]
 8003fbc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8003fc0:	4333      	orrs	r3, r6
 8003fc2:	f024 04bf 	bic.w	r4, r4, #191	; 0xbf
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	4323      	orrs	r3, r4
 8003fca:	6003      	str	r3, [r0, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8003fcc:	6844      	ldr	r4, [r0, #4]
 8003fce:	688b      	ldr	r3, [r1, #8]
 8003fd0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
 8003fd4:	ea43 4315 	orr.w	r3, r3, r5, lsr #16
 8003fd8:	f024 0404 	bic.w	r4, r4, #4
 8003fdc:	4323      	orrs	r3, r4

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003fde:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    MODIFY_REG(SPIx->CR2,
 8003fe2:	6043      	str	r3, [r0, #4]
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003fe4:	d101      	bne.n	8003fea <LL_SPI_Init+0x52>
 8003fe6:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003fe8:	6103      	str	r3, [r0, #16]
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 8003fea:	2001      	movs	r0, #1
  }

  return status;
}
 8003fec:	bd70      	pop	{r4, r5, r6, pc}
  ErrorStatus status = ERROR;
 8003fee:	2000      	movs	r0, #0
 8003ff0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ff4 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8003ff4:	0189      	lsls	r1, r1, #6
 8003ff6:	f041 0120 	orr.w	r1, r1, #32
 8003ffa:	4a06      	ldr	r2, [pc, #24]	; (8004014 <USB_FlushTxFifo+0x20>)
 8003ffc:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000)
 8003ffe:	3a01      	subs	r2, #1
 8004000:	d005      	beq.n	800400e <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004002:	6903      	ldr	r3, [r0, #16]
 8004004:	f013 0320 	ands.w	r3, r3, #32
 8004008:	d1f9      	bne.n	8003ffe <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 800400a:	4618      	mov	r0, r3
 800400c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800400e:	2003      	movs	r0, #3
}
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	00030d41 	.word	0x00030d41

08004018 <USB_ActivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004018:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1)
 800401a:	784b      	ldrb	r3, [r1, #1]
 800401c:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 800401e:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8004022:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 8004026:	2b01      	cmp	r3, #1
 8004028:	d11b      	bne.n	8004062 <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 800402a:	40a3      	lsls	r3, r4
 800402c:	b29b      	uxth	r3, r3
 800402e:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8004030:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8004034:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8004036:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	0412      	lsls	r2, r2, #16
 800403e:	d40e      	bmi.n	800405e <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8004040:	688a      	ldr	r2, [r1, #8]
 8004042:	78c8      	ldrb	r0, [r1, #3]
 8004044:	681d      	ldr	r5, [r3, #0]
 8004046:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800404a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800404e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004052:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 8004056:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 800405a:	4328      	orrs	r0, r5
 800405c:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 800405e:	2000      	movs	r0, #0
 8004060:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8004062:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004066:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8004068:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 800406c:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 800406e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8004072:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8004074:	6803      	ldr	r3, [r0, #0]
 8004076:	041b      	lsls	r3, r3, #16
 8004078:	d4f1      	bmi.n	800405e <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 800407a:	688b      	ldr	r3, [r1, #8]
 800407c:	78c9      	ldrb	r1, [r1, #3]
 800407e:	6802      	ldr	r2, [r0, #0]
 8004080:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800408c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8004090:	4313      	orrs	r3, r2
 8004092:	6003      	str	r3, [r0, #0]
 8004094:	e7e3      	b.n	800405e <USB_ActivateEndpoint+0x46>
	...

08004098 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 800409a:	784b      	ldrb	r3, [r1, #1]
 800409c:	780c      	ldrb	r4, [r1, #0]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	694b      	ldr	r3, [r1, #20]
 80040a2:	d163      	bne.n	800416c <USB_EPStartXfer+0xd4>
 80040a4:	2520      	movs	r5, #32
 80040a6:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80040aa:	fb15 6404 	smlabb	r4, r5, r4, r6
 80040ae:	6925      	ldr	r5, [r4, #16]
    if (ep->xfer_len == 0)
 80040b0:	bb73      	cbnz	r3, 8004110 <USB_EPStartXfer+0x78>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80040b2:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80040b6:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80040ba:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 80040bc:	6925      	ldr	r5, [r4, #16]
 80040be:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80040c2:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80040c4:	6925      	ldr	r5, [r4, #16]
 80040c6:	0ced      	lsrs	r5, r5, #19
 80040c8:	04ed      	lsls	r5, r5, #19
 80040ca:	6125      	str	r5, [r4, #16]
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
      }       
    }
      if (ep->type != EP_TYPE_ISOC)
 80040cc:	78cf      	ldrb	r7, [r1, #3]
 80040ce:	780d      	ldrb	r5, [r1, #0]
 80040d0:	2f01      	cmp	r7, #1
 80040d2:	f000 8089 	beq.w	80041e8 <USB_EPStartXfer+0x150>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 80040d6:	b14b      	cbz	r3, 80040ec <USB_EPStartXfer+0x54>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 80040d8:	f8d0 c834 	ldr.w	ip, [r0, #2100]	; 0x834
 80040dc:	2401      	movs	r4, #1
 80040de:	40ac      	lsls	r4, r5
 80040e0:	ea44 040c 	orr.w	r4, r4, ip
 80040e4:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 80040e8:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040ec:	780d      	ldrb	r5, [r1, #0]
 80040ee:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 80040f2:	2f01      	cmp	r7, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040f4:	6834      	ldr	r4, [r6, #0]
 80040f6:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80040fa:	6034      	str	r4, [r6, #0]
    if (ep->type == EP_TYPE_ISOC)
 80040fc:	d105      	bne.n	800410a <USB_EPStartXfer+0x72>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 80040fe:	9200      	str	r2, [sp, #0]
 8004100:	b29b      	uxth	r3, r3
 8004102:	462a      	mov	r2, r5
 8004104:	68c9      	ldr	r1, [r1, #12]
 8004106:	f000 f8e3 	bl	80042d0 <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 800410a:	2000      	movs	r0, #0
 800410c:	b003      	add	sp, #12
 800410e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004110:	0ced      	lsrs	r5, r5, #19
 8004112:	04ed      	lsls	r5, r5, #19
 8004114:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8004116:	6925      	ldr	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8004118:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800411a:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800411e:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8004122:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8004124:	19dd      	adds	r5, r3, r7
 8004126:	3d01      	subs	r5, #1
 8004128:	fbb5 f7f7 	udiv	r7, r5, r7
 800412c:	4d35      	ldr	r5, [pc, #212]	; (8004204 <USB_EPStartXfer+0x16c>)
 800412e:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8004132:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 8004136:	ea45 050e 	orr.w	r5, r5, lr
 800413a:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800413c:	6927      	ldr	r7, [r4, #16]
 800413e:	f3c3 0512 	ubfx	r5, r3, #0, #19
 8004142:	433d      	orrs	r5, r7
 8004144:	6125      	str	r5, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8004146:	78cd      	ldrb	r5, [r1, #3]
 8004148:	2d01      	cmp	r5, #1
 800414a:	d1bf      	bne.n	80040cc <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 800414c:	6925      	ldr	r5, [r4, #16]
 800414e:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8004152:	6125      	str	r5, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
 8004154:	6925      	ldr	r5, [r4, #16]
 8004156:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800415a:	6125      	str	r5, [r4, #16]
 800415c:	e7b6      	b.n	80040cc <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800415e:	fb14 6405 	smlabb	r4, r4, r5, r6
 8004162:	6825      	ldr	r5, [r4, #0]
 8004164:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004168:	6025      	str	r5, [r4, #0]
 800416a:	e7bf      	b.n	80040ec <USB_EPStartXfer+0x54>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 800416c:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8004170:	eb02 1244 	add.w	r2, r2, r4, lsl #5
 8004174:	6914      	ldr	r4, [r2, #16]
 8004176:	0ce4      	lsrs	r4, r4, #19
 8004178:	04e4      	lsls	r4, r4, #19
 800417a:	6114      	str	r4, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800417c:	6914      	ldr	r4, [r2, #16]
 800417e:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8004182:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8004186:	6114      	str	r4, [r2, #16]
 8004188:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0)
 800418a:	b9db      	cbnz	r3, 80041c4 <USB_EPStartXfer+0x12c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800418c:	6913      	ldr	r3, [r2, #16]
 800418e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004192:	431c      	orrs	r4, r3
 8004194:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;      
 8004196:	6913      	ldr	r3, [r2, #16]
 8004198:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800419c:	6113      	str	r3, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 800419e:	78cb      	ldrb	r3, [r1, #3]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d10a      	bne.n	80041ba <USB_EPStartXfer+0x122>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 80041a4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80041a8:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80041ac:	6813      	ldr	r3, [r2, #0]
 80041ae:	bf0c      	ite	eq
 80041b0:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80041b4:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80041b8:	6013      	str	r3, [r2, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80041ba:	6813      	ldr	r3, [r2, #0]
 80041bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041c0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80041c2:	e7a2      	b.n	800410a <USB_EPStartXfer+0x72>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 80041c4:	4d0f      	ldr	r5, [pc, #60]	; (8004204 <USB_EPStartXfer+0x16c>)
 80041c6:	6916      	ldr	r6, [r2, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket; 
 80041c8:	4423      	add	r3, r4
 80041ca:	3b01      	subs	r3, #1
 80041cc:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 80041d0:	ea05 45c3 	and.w	r5, r5, r3, lsl #19
 80041d4:	4335      	orrs	r5, r6
 80041d6:	6115      	str	r5, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt)); 
 80041d8:	b29b      	uxth	r3, r3
 80041da:	6915      	ldr	r5, [r2, #16]
 80041dc:	435c      	muls	r4, r3
 80041de:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80041e2:	432c      	orrs	r4, r5
 80041e4:	6114      	str	r4, [r2, #16]
 80041e6:	e7da      	b.n	800419e <USB_EPStartXfer+0x106>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 80041e8:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 80041ec:	f414 7f80 	tst.w	r4, #256	; 0x100
 80041f0:	f04f 0420 	mov.w	r4, #32
 80041f4:	d0b3      	beq.n	800415e <USB_EPStartXfer+0xc6>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041f6:	fb14 6405 	smlabb	r4, r4, r5, r6
 80041fa:	6825      	ldr	r5, [r4, #0]
 80041fc:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8004200:	6025      	str	r5, [r4, #0]
 8004202:	e773      	b.n	80040ec <USB_EPStartXfer+0x54>
 8004204:	1ff80000 	.word	0x1ff80000

08004208 <USB_EP0StartXfer>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8004208:	784b      	ldrb	r3, [r1, #1]
 800420a:	2b01      	cmp	r3, #1
{
 800420c:	b530      	push	{r4, r5, lr}
 800420e:	780b      	ldrb	r3, [r1, #0]
 8004210:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1)
 8004212:	d13e      	bne.n	8004292 <USB_EP0StartXfer+0x8a>
 8004214:	2220      	movs	r2, #32
 8004216:	f500 6410 	add.w	r4, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800421a:	fb12 4303 	smlabb	r3, r2, r3, r4
 800421e:	691a      	ldr	r2, [r3, #16]
    if (ep->xfer_len == 0)
 8004220:	b9fd      	cbnz	r5, 8004262 <USB_EP0StartXfer+0x5a>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8004222:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8004226:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 800422a:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004232:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	0cd2      	lsrs	r2, r2, #19
 8004238:	04d2      	lsls	r2, r2, #19
 800423a:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0)
 800423c:	694b      	ldr	r3, [r1, #20]
 800423e:	b13b      	cbz	r3, 8004250 <USB_EP0StartXfer+0x48>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1 << (ep->num);
 8004240:	780d      	ldrb	r5, [r1, #0]
 8004242:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8004246:	2301      	movs	r3, #1
 8004248:	40ab      	lsls	r3, r5
 800424a:	4313      	orrs	r3, r2
 800424c:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 8004250:	780b      	ldrb	r3, [r1, #0]
 8004252:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800425c:	601a      	str	r2, [r3, #0]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 800425e:	2000      	movs	r0, #0
 8004260:	bd30      	pop	{r4, r5, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004262:	0cd2      	lsrs	r2, r2, #19
 8004264:	04d2      	lsls	r2, r2, #19
 8004266:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 800426e:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8004272:	611a      	str	r2, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8004274:	688a      	ldr	r2, [r1, #8]
 8004276:	4295      	cmp	r5, r2
        ep->xfer_len = ep->maxpacket;
 8004278:	bf88      	it	hi
 800427a:	614a      	strhi	r2, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004282:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8004284:	694a      	ldr	r2, [r1, #20]
 8004286:	691d      	ldr	r5, [r3, #16]
 8004288:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800428c:	432a      	orrs	r2, r5
 800428e:	611a      	str	r2, [r3, #16]
 8004290:	e7d4      	b.n	800423c <USB_EP0StartXfer+0x34>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8004292:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8004296:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800429a:	6903      	ldr	r3, [r0, #16]
 800429c:	0cdb      	lsrs	r3, r3, #19
 800429e:	04db      	lsls	r3, r3, #19
 80042a0:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80042a2:	6903      	ldr	r3, [r0, #16]
 80042a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042ac:	6103      	str	r3, [r0, #16]
 80042ae:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0)
 80042b0:	b105      	cbz	r5, 80042b4 <USB_EP0StartXfer+0xac>
      ep->xfer_len = ep->maxpacket;
 80042b2:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 80042b4:	6902      	ldr	r2, [r0, #16]
 80042b6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80042ba:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80042bc:	6902      	ldr	r2, [r0, #16]
 80042be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c2:	4313      	orrs	r3, r2
 80042c4:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 80042c6:	6803      	ldr	r3, [r0, #0]
 80042c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042cc:	6003      	str	r3, [r0, #0]
 80042ce:	e7c6      	b.n	800425e <USB_EP0StartXfer+0x56>

080042d0 <USB_WritePacket>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  uint32_t count32b= 0 , index= 0;
  count32b =  (len + 3) / 4;
 80042d0:	3303      	adds	r3, #3
  for (index = 0; index < count32b; index++, src += 4)
  {
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80042d2:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
{
 80042d6:	b510      	push	{r4, lr}
  count32b =  (len + 3) / 4;
 80042d8:	109b      	asrs	r3, r3, #2
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80042da:	eb00 3202 	add.w	r2, r0, r2, lsl #12
  for (index = 0; index < count32b; index++, src += 4)
 80042de:	2400      	movs	r4, #0
 80042e0:	429c      	cmp	r4, r3
 80042e2:	d101      	bne.n	80042e8 <USB_WritePacket+0x18>
  }
  return HAL_OK;
}
 80042e4:	2000      	movs	r0, #0
 80042e6:	bd10      	pop	{r4, pc}
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80042e8:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 80042ec:	6010      	str	r0, [r2, #0]
  for (index = 0; index < count32b; index++, src += 4)
 80042ee:	3401      	adds	r4, #1
 80042f0:	e7f6      	b.n	80042e0 <USB_WritePacket+0x10>

080042f2 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80042f2:	b510      	push	{r4, lr}
  uint32_t index=0;
  uint32_t count32b = (len + 3) / 4;
 80042f4:	3203      	adds	r2, #3
 80042f6:	1092      	asrs	r2, r2, #2
  
  for ( index = 0; index < count32b; index++, dest += 4 )
 80042f8:	2300      	movs	r3, #0
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 80042fa:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( index = 0; index < count32b; index++, dest += 4 )
 80042fe:	4293      	cmp	r3, r2
 8004300:	d102      	bne.n	8004308 <USB_ReadPacket+0x16>
    
  }
  return ((void *)dest);
}
 8004302:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8004306:	bd10      	pop	{r4, pc}
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8004308:	6804      	ldr	r4, [r0, #0]
 800430a:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  for ( index = 0; index < count32b; index++, dest += 4 )
 800430e:	3301      	adds	r3, #1
 8004310:	e7f5      	b.n	80042fe <USB_ReadPacket+0xc>

08004312 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8004312:	784b      	ldrb	r3, [r1, #1]
 8004314:	780a      	ldrb	r2, [r1, #0]
 8004316:	2b01      	cmp	r3, #1
 8004318:	f04f 0320 	mov.w	r3, #32
 800431c:	d10b      	bne.n	8004336 <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 800431e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8004322:	fb13 0002 	smlabb	r0, r3, r2, r0
 8004326:	6803      	ldr	r3, [r0, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	db0b      	blt.n	8004344 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 800432c:	6803      	ldr	r3, [r0, #0]
 800432e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004332:	6003      	str	r3, [r0, #0]
 8004334:	e006      	b.n	8004344 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 8004336:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800433a:	fb13 0002 	smlabb	r0, r3, r2, r0
 800433e:	6803      	ldr	r3, [r0, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	daf3      	bge.n	800432c <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004344:	6803      	ldr	r3, [r0, #0]
 8004346:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800434a:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 800434c:	2000      	movs	r0, #0
 800434e:	4770      	bx	lr

08004350 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8004350:	784b      	ldrb	r3, [r1, #1]
 8004352:	780a      	ldrb	r2, [r1, #0]
 8004354:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004356:	bf0c      	ite	eq
 8004358:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800435c:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8004360:	2320      	movs	r3, #32
 8004362:	fb13 0002 	smlabb	r0, r3, r2, r0
 8004366:	6803      	ldr	r3, [r0, #0]
 8004368:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800436c:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800436e:	78cb      	ldrb	r3, [r1, #3]
 8004370:	3b02      	subs	r3, #2
 8004372:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004374:	bf9e      	ittt	ls
 8004376:	6803      	ldrls	r3, [r0, #0]
 8004378:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 800437c:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 800437e:	2000      	movs	r0, #0
 8004380:	4770      	bx	lr

08004382 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8004382:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004386:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800438a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 800438e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004392:	0109      	lsls	r1, r1, #4
 8004394:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8004398:	4319      	orrs	r1, r3
 800439a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 800439e:	2000      	movs	r0, #0
 80043a0:	4770      	bx	lr

080043a2 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->GINTSTS;
 80043a2:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80043a4:	6980      	ldr	r0, [r0, #24]
  return tmpreg;  
}
 80043a6:	4010      	ands	r0, r2
 80043a8:	4770      	bx	lr

080043aa <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 80043aa:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80043ae:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80043b2:	69c0      	ldr	r0, [r0, #28]
 80043b4:	4018      	ands	r0, r3
  return ((tmpreg & 0xffff0000) >> 16);
}
 80043b6:	0c00      	lsrs	r0, r0, #16
 80043b8:	4770      	bx	lr

080043ba <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 80043ba:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80043be:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80043c2:	69c0      	ldr	r0, [r0, #28]
 80043c4:	4018      	ands	r0, r3
  return ((tmpreg & 0xFFFF));
}
 80043c6:	b280      	uxth	r0, r0
 80043c8:	4770      	bx	lr

080043ca <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t tmpreg;
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 80043ca:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80043ce:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80043d2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 80043d6:	688a      	ldr	r2, [r1, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80043d8:	6940      	ldr	r0, [r0, #20]
  return tmpreg;
}
 80043da:	4010      	ands	r0, r2
 80043dc:	4770      	bx	lr

080043de <USB_ReadDevInEPInterrupt>:
  * @param  epnum: endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 80043de:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, msk = 0, emp = 0;
  
  msk = USBx_DEVICE->DIEPMSK;
 80043e0:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80043e4:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1) << 7;
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 80043e8:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1) << 7;
 80043ec:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 80043ee:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1) << 7;
 80043f2:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 80043f4:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1) << 7;
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	4323      	orrs	r3, r4
  return tmpreg;
}
 80043fa:	4018      	ands	r0, r3
 80043fc:	bd10      	pop	{r4, pc}

080043fe <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1);
 80043fe:	6940      	ldr	r0, [r0, #20]
}
 8004400:	f000 0001 	and.w	r0, r0, #1
 8004404:	4770      	bx	lr

08004406 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004406:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800440a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800440e:	f023 0307 	bic.w	r3, r3, #7
 8004412:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004416:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	f002 0206 	and.w	r2, r2, #6
 8004420:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 8004422:	bf02      	ittt	eq
 8004424:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8004428:	f042 0203 	orreq.w	r2, r2, #3
 800442c:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004436:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8004438:	2000      	movs	r0, #0
 800443a:	4770      	bx	lr

0800443c <USB_EP0_OutStart>:
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(psetup);

  USBx_OUTEP(0)->DOEPTSIZ = 0;
 800443c:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8004440:	2000      	movs	r0, #0
 8004442:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800444a:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	f042 0218 	orr.w	r2, r2, #24
 8004452:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 800445a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
}
 800445c:	4770      	bx	lr
	...

08004460 <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004460:	4b08      	ldr	r3, [pc, #32]	; (8004484 <LL_mDelay+0x24>)
{
 8004462:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004468:	9b01      	ldr	r3, [sp, #4]
    Delay++;
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <LL_mDelay+0x24>)
  if (Delay < LL_MAX_DELAY)
 800446c:	1c41      	adds	r1, r0, #1
    Delay++;
 800446e:	bf18      	it	ne
 8004470:	3001      	addne	r0, #1
  while (Delay)
 8004472:	b908      	cbnz	r0, 8004478 <LL_mDelay+0x18>
    {
      Delay--;
    }
  }
}
 8004474:	b002      	add	sp, #8
 8004476:	4770      	bx	lr
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	03d2      	lsls	r2, r2, #15
      Delay--;
 800447c:	bf48      	it	mi
 800447e:	f100 30ff 	addmi.w	r0, r0, #4294967295
 8004482:	e7f6      	b.n	8004472 <LL_mDelay+0x12>
 8004484:	e000e010 	.word	0xe000e010

08004488 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004488:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800448a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800448e:	b90b      	cbnz	r3, 8004494 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004490:	2002      	movs	r0, #2
 8004492:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4798      	blx	r3
 8004498:	2800      	cmp	r0, #0
 800449a:	d1f9      	bne.n	8004490 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800449c:	bd08      	pop	{r3, pc}

0800449e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800449e:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80044a0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	4798      	blx	r3
  return USBD_OK;
}
 80044a8:	2000      	movs	r0, #0
 80044aa:	bd08      	pop	{r3, pc}

080044ac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80044b0:	f500 7502 	add.w	r5, r0, #520	; 0x208
 80044b4:	4628      	mov	r0, r5
 80044b6:	f000 fa76 	bl	80049a6 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80044ba:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80044bc:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80044c0:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80044c4:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80044c8:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80044cc:	f001 031f 	and.w	r3, r1, #31
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d00e      	beq.n	80044f2 <USBD_LL_SetupStage+0x46>
 80044d4:	d307      	bcc.n	80044e6 <USBD_LL_SetupStage+0x3a>
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d010      	beq.n	80044fc <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80044da:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80044de:	4620      	mov	r0, r4
 80044e0:	f7fe fbbe 	bl	8002c60 <USBD_LL_StallEP>
    break;
 80044e4:	e003      	b.n	80044ee <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80044e6:	4629      	mov	r1, r5
 80044e8:	4620      	mov	r0, r4
 80044ea:	f000 f8e7 	bl	80046bc <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80044ee:	2000      	movs	r0, #0
 80044f0:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80044f2:	4629      	mov	r1, r5
 80044f4:	4620      	mov	r0, r4
 80044f6:	f000 f9db 	bl	80048b0 <USBD_StdItfReq>
    break;
 80044fa:	e7f8      	b.n	80044ee <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 80044fc:	4629      	mov	r1, r5
 80044fe:	4620      	mov	r0, r4
 8004500:	f000 f9ee 	bl	80048e0 <USBD_StdEPReq>
    break;
 8004504:	e7f3      	b.n	80044ee <USBD_LL_SetupStage+0x42>

08004506 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8004506:	b538      	push	{r3, r4, r5, lr}
 8004508:	4604      	mov	r4, r0
 800450a:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800450c:	bb11      	cbnz	r1, 8004554 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800450e:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8004512:	2b03      	cmp	r3, #3
 8004514:	d10f      	bne.n	8004536 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8004516:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800451a:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 800451e:	4293      	cmp	r3, r2
 8004520:	d90b      	bls.n	800453a <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8004522:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8004524:	429a      	cmp	r2, r3
 8004526:	bf28      	it	cs
 8004528:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800452a:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 800452e:	b292      	uxth	r2, r2
 8004530:	4629      	mov	r1, r5
 8004532:	f000 fa61 	bl	80049f8 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8004536:	2000      	movs	r0, #0
 8004538:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800453a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	b123      	cbz	r3, 800454c <USBD_LL_DataOutStage+0x46>
 8004542:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004546:	2a03      	cmp	r2, #3
 8004548:	d100      	bne.n	800454c <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 800454a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800454c:	4620      	mov	r0, r4
 800454e:	f000 fa5b 	bl	8004a08 <USBD_CtlSendStatus>
 8004552:	e7f0      	b.n	8004536 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8004554:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0eb      	beq.n	8004536 <USBD_LL_DataOutStage+0x30>
 800455e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004562:	2a03      	cmp	r2, #3
 8004564:	d1e7      	bne.n	8004536 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8004566:	4798      	blx	r3
 8004568:	e7e5      	b.n	8004536 <USBD_LL_DataOutStage+0x30>

0800456a <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800456a:	b570      	push	{r4, r5, r6, lr}
 800456c:	4613      	mov	r3, r2
 800456e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8004570:	460e      	mov	r6, r1
 8004572:	2900      	cmp	r1, #0
 8004574:	d13d      	bne.n	80045f2 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004576:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800457a:	2a02      	cmp	r2, #2
 800457c:	d10f      	bne.n	800459e <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 800457e:	69c5      	ldr	r5, [r0, #28]
 8004580:	6a02      	ldr	r2, [r0, #32]
 8004582:	4295      	cmp	r5, r2
 8004584:	d914      	bls.n	80045b0 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8004586:	1aaa      	subs	r2, r5, r2
 8004588:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800458a:	4619      	mov	r1, r3
 800458c:	b292      	uxth	r2, r2
 800458e:	f000 fa2b 	bl	80049e8 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004592:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004594:	461a      	mov	r2, r3
 8004596:	4619      	mov	r1, r3
 8004598:	4620      	mov	r0, r4
 800459a:	f7fe fb90 	bl	8002cbe <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800459e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d102      	bne.n	80045ac <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80045ac:	2000      	movs	r0, #0
 80045ae:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80045b0:	6983      	ldr	r3, [r0, #24]
 80045b2:	fbb3 f5f2 	udiv	r5, r3, r2
 80045b6:	fb02 3515 	mls	r5, r2, r5, r3
 80045ba:	b965      	cbnz	r5, 80045d6 <USBD_LL_DataInStage+0x6c>
 80045bc:	429a      	cmp	r2, r3
 80045be:	d80a      	bhi.n	80045d6 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80045c0:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d206      	bcs.n	80045d6 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80045c8:	462a      	mov	r2, r5
 80045ca:	f000 fa0d 	bl	80049e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80045ce:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80045d2:	462b      	mov	r3, r5
 80045d4:	e7de      	b.n	8004594 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80045d6:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	b12b      	cbz	r3, 80045ea <USBD_LL_DataInStage+0x80>
 80045de:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80045e2:	2a03      	cmp	r2, #3
 80045e4:	d101      	bne.n	80045ea <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80045e6:	4620      	mov	r0, r4
 80045e8:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80045ea:	4620      	mov	r0, r4
 80045ec:	f000 fa17 	bl	8004a1e <USBD_CtlReceiveStatus>
 80045f0:	e7d5      	b.n	800459e <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 80045f2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0d7      	beq.n	80045ac <USBD_LL_DataInStage+0x42>
 80045fc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004600:	2a03      	cmp	r2, #3
 8004602:	d1d3      	bne.n	80045ac <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8004604:	4798      	blx	r3
 8004606:	e7d1      	b.n	80045ac <USBD_LL_DataInStage+0x42>

08004608 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004608:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800460a:	2200      	movs	r2, #0
{
 800460c:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 800460e:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004610:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8004612:	2340      	movs	r3, #64	; 0x40
 8004614:	f7fe fb1a 	bl	8002c4c <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004618:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800461a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 800461e:	2200      	movs	r2, #0
 8004620:	2180      	movs	r1, #128	; 0x80
 8004622:	4620      	mov	r0, r4
 8004624:	f7fe fb12 	bl	8002c4c <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004628:	2301      	movs	r3, #1
 800462a:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800462e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004632:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8004634:	b12b      	cbz	r3, 8004642 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004636:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800463a:	7921      	ldrb	r1, [r4, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	4620      	mov	r0, r4
 8004640:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8004642:	2000      	movs	r0, #0
 8004644:	bd38      	pop	{r3, r4, r5, pc}

08004646 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004646:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8004648:	2000      	movs	r0, #0
 800464a:	4770      	bx	lr

0800464c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800464c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004650:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004654:	2304      	movs	r3, #4
 8004656:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800465a:	2000      	movs	r0, #0
 800465c:	4770      	bx	lr

0800465e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 800465e:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8004662:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8004666:	2000      	movs	r0, #0
 8004668:	4770      	bx	lr

0800466a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800466a:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800466c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004670:	2a03      	cmp	r2, #3
 8004672:	d104      	bne.n	800467e <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8004674:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	b103      	cbz	r3, 800467e <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800467c:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800467e:	2000      	movs	r0, #0
 8004680:	bd08      	pop	{r3, pc}

08004682 <USBD_LL_IsoINIncomplete>:
 8004682:	2000      	movs	r0, #0
 8004684:	4770      	bx	lr

08004686 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8004686:	2000      	movs	r0, #0
 8004688:	4770      	bx	lr

0800468a <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 800468a:	2000      	movs	r0, #0
 800468c:	4770      	bx	lr

0800468e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800468e:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004690:	2201      	movs	r2, #1
 8004692:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004696:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 800469a:	7901      	ldrb	r1, [r0, #4]
 800469c:	6852      	ldr	r2, [r2, #4]
 800469e:	4790      	blx	r2
   
  return USBD_OK;
}
 80046a0:	2000      	movs	r0, #0
 80046a2:	bd08      	pop	{r3, pc}

080046a4 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80046a4:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 80046a6:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80046a8:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80046aa:	f7fe fad9 	bl	8002c60 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80046ae:	4620      	mov	r0, r4
 80046b0:	2100      	movs	r1, #0
}
 80046b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80046b6:	f7fe bad3 	b.w	8002c60 <USBD_LL_StallEP>
	...

080046bc <USBD_StdDevReq>:
{
 80046bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80046be:	784b      	ldrb	r3, [r1, #1]
{
 80046c0:	4604      	mov	r4, r0
 80046c2:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80046c4:	2b09      	cmp	r3, #9
 80046c6:	d879      	bhi.n	80047bc <USBD_StdDevReq+0x100>
 80046c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80046cc:	00e500c9 	.word	0x00e500c9
 80046d0:	00d90078 	.word	0x00d90078
 80046d4:	006d0078 	.word	0x006d0078
 80046d8:	0078000a 	.word	0x0078000a
 80046dc:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 80046e0:	884b      	ldrh	r3, [r1, #2]
 80046e2:	0a1a      	lsrs	r2, r3, #8
 80046e4:	3a01      	subs	r2, #1
 80046e6:	2a06      	cmp	r2, #6
 80046e8:	d868      	bhi.n	80047bc <USBD_StdDevReq+0x100>
 80046ea:	e8df f002 	tbb	[pc, r2]
 80046ee:	1c04      	.short	0x1c04
 80046f0:	49676729 	.word	0x49676729
 80046f4:	52          	.byte	0x52
 80046f5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80046f6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80046fa:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80046fc:	7c20      	ldrb	r0, [r4, #16]
 80046fe:	f10d 0106 	add.w	r1, sp, #6
 8004702:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8004704:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004708:	2a00      	cmp	r2, #0
 800470a:	d067      	beq.n	80047dc <USBD_StdDevReq+0x120>
 800470c:	88eb      	ldrh	r3, [r5, #6]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d064      	beq.n	80047dc <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8004712:	429a      	cmp	r2, r3
 8004714:	bf28      	it	cs
 8004716:	461a      	movcs	r2, r3
 8004718:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800471c:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 800471e:	4620      	mov	r0, r4
 8004720:	f000 f955 	bl	80049ce <USBD_CtlSendData>
 8004724:	e05a      	b.n	80047dc <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8004726:	7c02      	ldrb	r2, [r0, #16]
 8004728:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800472c:	b932      	cbnz	r2, 800473c <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800472e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004730:	f10d 0006 	add.w	r0, sp, #6
 8004734:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004736:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004738:	7043      	strb	r3, [r0, #1]
 800473a:	e7e3      	b.n	8004704 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	e7f7      	b.n	8004730 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b05      	cmp	r3, #5
 8004744:	d83a      	bhi.n	80047bc <USBD_StdDevReq+0x100>
 8004746:	e8df f003 	tbb	[pc, r3]
 800474a:	0703      	.short	0x0703
 800474c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8004750:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	e7d1      	b.n	80046fc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004758:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	e7cd      	b.n	80046fc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004760:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	e7c9      	b.n	80046fc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004768:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	e7c5      	b.n	80046fc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004770:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	e7c1      	b.n	80046fc <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004778:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	e7bd      	b.n	80046fc <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004780:	7c03      	ldrb	r3, [r0, #16]
 8004782:	b9db      	cbnz	r3, 80047bc <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004784:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004788:	f10d 0006 	add.w	r0, sp, #6
 800478c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478e:	4798      	blx	r3
 8004790:	e7b8      	b.n	8004704 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004792:	7c03      	ldrb	r3, [r0, #16]
 8004794:	b993      	cbnz	r3, 80047bc <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004796:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800479a:	f10d 0006 	add.w	r0, sp, #6
 800479e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80047a2:	2307      	movs	r3, #7
 80047a4:	e7c8      	b.n	8004738 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80047a6:	888b      	ldrh	r3, [r1, #4]
 80047a8:	b943      	cbnz	r3, 80047bc <USBD_StdDevReq+0x100>
 80047aa:	88cb      	ldrh	r3, [r1, #6]
 80047ac:	b933      	cbnz	r3, 80047bc <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80047ae:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80047b2:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80047b4:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80047b6:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80047ba:	d103      	bne.n	80047c4 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 80047bc:	4620      	mov	r0, r4
 80047be:	f7ff ff71 	bl	80046a4 <USBD_CtlError.constprop.0>
    break;
 80047c2:	e00b      	b.n	80047dc <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 80047c4:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80047c8:	4629      	mov	r1, r5
 80047ca:	f7fe fa6a 	bl	8002ca2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80047ce:	4620      	mov	r0, r4
 80047d0:	f000 f91a 	bl	8004a08 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80047d4:	b12d      	cbz	r5, 80047e2 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80047d6:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80047d8:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80047dc:	2000      	movs	r0, #0
 80047de:	b003      	add	sp, #12
 80047e0:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80047e2:	2301      	movs	r3, #1
 80047e4:	e7f8      	b.n	80047d8 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 80047e6:	7889      	ldrb	r1, [r1, #2]
 80047e8:	4d30      	ldr	r5, [pc, #192]	; (80048ac <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80047ea:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80047ec:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80047ee:	d8e5      	bhi.n	80047bc <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 80047f0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d00c      	beq.n	8004812 <USBD_StdDevReq+0x156>
 80047f8:	2b03      	cmp	r3, #3
 80047fa:	d1df      	bne.n	80047bc <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 80047fc:	b9b1      	cbnz	r1, 800482c <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80047fe:	2302      	movs	r3, #2
 8004800:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8004804:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8004806:	f7ff fe4a 	bl	800449e <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 800480a:	4620      	mov	r0, r4
 800480c:	f000 f8fc 	bl	8004a08 <USBD_CtlSendStatus>
 8004810:	e7e4      	b.n	80047dc <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8004812:	2900      	cmp	r1, #0
 8004814:	d0f9      	beq.n	800480a <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8004816:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004818:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800481a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800481c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004820:	4620      	mov	r0, r4
 8004822:	f7ff fe31 	bl	8004488 <USBD_SetClassConfig>
 8004826:	2802      	cmp	r0, #2
 8004828:	d1ef      	bne.n	800480a <USBD_StdDevReq+0x14e>
 800482a:	e7c7      	b.n	80047bc <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 800482c:	6841      	ldr	r1, [r0, #4]
 800482e:	2901      	cmp	r1, #1
 8004830:	d0eb      	beq.n	800480a <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8004832:	b2c9      	uxtb	r1, r1
 8004834:	f7ff fe33 	bl	800449e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004838:	7829      	ldrb	r1, [r5, #0]
 800483a:	6061      	str	r1, [r4, #4]
 800483c:	e7f0      	b.n	8004820 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800483e:	88ca      	ldrh	r2, [r1, #6]
 8004840:	2a01      	cmp	r2, #1
 8004842:	d1bb      	bne.n	80047bc <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8004844:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004848:	2b02      	cmp	r3, #2
 800484a:	d003      	beq.n	8004854 <USBD_StdDevReq+0x198>
 800484c:	2b03      	cmp	r3, #3
 800484e:	d1b5      	bne.n	80047bc <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8004850:	1d01      	adds	r1, r0, #4
 8004852:	e764      	b.n	800471e <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8004854:	4601      	mov	r1, r0
 8004856:	2300      	movs	r3, #0
 8004858:	f841 3f08 	str.w	r3, [r1, #8]!
 800485c:	e75f      	b.n	800471e <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800485e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004862:	3b02      	subs	r3, #2
 8004864:	2b01      	cmp	r3, #1
 8004866:	d8a9      	bhi.n	80047bc <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8004868:	2301      	movs	r3, #1
 800486a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800486c:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8004870:	b10b      	cbz	r3, 8004876 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8004872:	2303      	movs	r3, #3
 8004874:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8004876:	2202      	movs	r2, #2
 8004878:	f104 010c 	add.w	r1, r4, #12
 800487c:	e74f      	b.n	800471e <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800487e:	884b      	ldrh	r3, [r1, #2]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d1ab      	bne.n	80047dc <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8004884:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8004888:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800488c:	4629      	mov	r1, r5
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	4620      	mov	r0, r4
 8004892:	4798      	blx	r3
 8004894:	e7b9      	b.n	800480a <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8004896:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800489a:	3b02      	subs	r3, #2
 800489c:	2b01      	cmp	r3, #1
 800489e:	d88d      	bhi.n	80047bc <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80048a0:	884b      	ldrh	r3, [r1, #2]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d19a      	bne.n	80047dc <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80048a6:	2300      	movs	r3, #0
 80048a8:	e7ec      	b.n	8004884 <USBD_StdDevReq+0x1c8>
 80048aa:	bf00      	nop
 80048ac:	20000040 	.word	0x20000040

080048b0 <USBD_StdItfReq>:
{
 80048b0:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80048b2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80048b6:	2b03      	cmp	r3, #3
{
 80048b8:	4604      	mov	r4, r0
 80048ba:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80048bc:	d10d      	bne.n	80048da <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80048be:	790b      	ldrb	r3, [r1, #4]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d80a      	bhi.n	80048da <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80048c4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80048cc:	88eb      	ldrh	r3, [r5, #6]
 80048ce:	b913      	cbnz	r3, 80048d6 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80048d0:	4620      	mov	r0, r4
 80048d2:	f000 f899 	bl	8004a08 <USBD_CtlSendStatus>
}
 80048d6:	2000      	movs	r0, #0
 80048d8:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80048da:	f7ff fee3 	bl	80046a4 <USBD_CtlError.constprop.0>
    break;
 80048de:	e7fa      	b.n	80048d6 <USBD_StdItfReq+0x26>

080048e0 <USBD_StdEPReq>:
{
 80048e0:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80048e2:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 80048e4:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80048e6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80048ea:	2a20      	cmp	r2, #32
{
 80048ec:	4604      	mov	r4, r0
 80048ee:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80048f0:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 80048f2:	d105      	bne.n	8004900 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 80048f4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	4798      	blx	r3
}
 80048fc:	2000      	movs	r0, #0
 80048fe:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8004900:	784a      	ldrb	r2, [r1, #1]
 8004902:	2a01      	cmp	r2, #1
 8004904:	d01c      	beq.n	8004940 <USBD_StdEPReq+0x60>
 8004906:	d32a      	bcc.n	800495e <USBD_StdEPReq+0x7e>
 8004908:	2a03      	cmp	r2, #3
 800490a:	d1f7      	bne.n	80048fc <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 800490c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004910:	2a02      	cmp	r2, #2
 8004912:	d040      	beq.n	8004996 <USBD_StdEPReq+0xb6>
 8004914:	2a03      	cmp	r2, #3
 8004916:	d002      	beq.n	800491e <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8004918:	f7ff fec4 	bl	80046a4 <USBD_CtlError.constprop.0>
      break;
 800491c:	e7ee      	b.n	80048fc <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800491e:	884a      	ldrh	r2, [r1, #2]
 8004920:	b922      	cbnz	r2, 800492c <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004922:	065e      	lsls	r6, r3, #25
 8004924:	d002      	beq.n	800492c <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8004926:	4619      	mov	r1, r3
 8004928:	f7fe f99a 	bl	8002c60 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 800492c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004930:	4629      	mov	r1, r5
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4620      	mov	r0, r4
 8004936:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004938:	4620      	mov	r0, r4
 800493a:	f000 f865 	bl	8004a08 <USBD_CtlSendStatus>
 800493e:	e7dd      	b.n	80048fc <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8004940:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004944:	2a02      	cmp	r2, #2
 8004946:	d026      	beq.n	8004996 <USBD_StdEPReq+0xb6>
 8004948:	2a03      	cmp	r2, #3
 800494a:	d1e5      	bne.n	8004918 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800494c:	884a      	ldrh	r2, [r1, #2]
 800494e:	2a00      	cmp	r2, #0
 8004950:	d1d4      	bne.n	80048fc <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8004952:	0659      	lsls	r1, r3, #25
 8004954:	d0f0      	beq.n	8004938 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8004956:	4619      	mov	r1, r3
 8004958:	f7fe f989 	bl	8002c6e <USBD_LL_ClearStallEP>
 800495c:	e7e6      	b.n	800492c <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 800495e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004962:	2a02      	cmp	r2, #2
 8004964:	d017      	beq.n	8004996 <USBD_StdEPReq+0xb6>
 8004966:	2a03      	cmp	r2, #3
 8004968:	d1d6      	bne.n	8004918 <USBD_StdEPReq+0x38>
 800496a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800496e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8004972:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004976:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004978:	bf14      	ite	ne
 800497a:	3514      	addne	r5, #20
 800497c:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004980:	f7fe f97c 	bl	8002c7c <USBD_LL_IsStallEP>
 8004984:	b168      	cbz	r0, 80049a2 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8004986:	2301      	movs	r3, #1
 8004988:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 800498a:	2202      	movs	r2, #2
 800498c:	4629      	mov	r1, r5
 800498e:	4620      	mov	r0, r4
 8004990:	f000 f81d 	bl	80049ce <USBD_CtlSendData>
      break;
 8004994:	e7b2      	b.n	80048fc <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8004996:	065a      	lsls	r2, r3, #25
 8004998:	d0b0      	beq.n	80048fc <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 800499a:	4619      	mov	r1, r3
 800499c:	f7fe f960 	bl	8002c60 <USBD_LL_StallEP>
 80049a0:	e7ac      	b.n	80048fc <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 80049a2:	6028      	str	r0, [r5, #0]
 80049a4:	e7f1      	b.n	800498a <USBD_StdEPReq+0xaa>

080049a6 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80049a6:	780b      	ldrb	r3, [r1, #0]
 80049a8:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80049aa:	784b      	ldrb	r3, [r1, #1]
 80049ac:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80049ae:	78ca      	ldrb	r2, [r1, #3]
 80049b0:	788b      	ldrb	r3, [r1, #2]
 80049b2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80049b6:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80049b8:	794a      	ldrb	r2, [r1, #5]
 80049ba:	790b      	ldrb	r3, [r1, #4]
 80049bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80049c0:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80049c2:	79ca      	ldrb	r2, [r1, #7]
 80049c4:	798b      	ldrb	r3, [r1, #6]
 80049c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80049ca:	80c3      	strh	r3, [r0, #6]
 80049cc:	4770      	bx	lr

080049ce <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80049ce:	b510      	push	{r4, lr}
 80049d0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80049d2:	2202      	movs	r2, #2
 80049d4:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80049d8:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80049da:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80049dc:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80049de:	2100      	movs	r1, #0
 80049e0:	f7fe f966 	bl	8002cb0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80049e4:	2000      	movs	r0, #0
 80049e6:	bd10      	pop	{r4, pc}

080049e8 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80049e8:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80049ea:	4613      	mov	r3, r2
 80049ec:	460a      	mov	r2, r1
 80049ee:	2100      	movs	r1, #0
 80049f0:	f7fe f95e 	bl	8002cb0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80049f4:	2000      	movs	r0, #0
 80049f6:	bd08      	pop	{r3, pc}

080049f8 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80049f8:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80049fa:	4613      	mov	r3, r2
 80049fc:	460a      	mov	r2, r1
 80049fe:	2100      	movs	r1, #0
 8004a00:	f7fe f95d 	bl	8002cbe <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8004a04:	2000      	movs	r0, #0
 8004a06:	bd08      	pop	{r3, pc}

08004a08 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8004a08:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004a10:	2300      	movs	r3, #0
 8004a12:	461a      	mov	r2, r3
 8004a14:	4619      	mov	r1, r3
 8004a16:	f7fe f94b 	bl	8002cb0 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	bd08      	pop	{r3, pc}

08004a1e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8004a1e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8004a20:	2305      	movs	r3, #5
 8004a22:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8004a26:	2300      	movs	r3, #0
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	f7fe f947 	bl	8002cbe <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8004a30:	2000      	movs	r0, #0
 8004a32:	bd08      	pop	{r3, pc}

08004a34 <__libc_init_array>:
 8004a34:	b570      	push	{r4, r5, r6, lr}
 8004a36:	4e0d      	ldr	r6, [pc, #52]	; (8004a6c <__libc_init_array+0x38>)
 8004a38:	4c0d      	ldr	r4, [pc, #52]	; (8004a70 <__libc_init_array+0x3c>)
 8004a3a:	1ba4      	subs	r4, r4, r6
 8004a3c:	10a4      	asrs	r4, r4, #2
 8004a3e:	2500      	movs	r5, #0
 8004a40:	42a5      	cmp	r5, r4
 8004a42:	d109      	bne.n	8004a58 <__libc_init_array+0x24>
 8004a44:	4e0b      	ldr	r6, [pc, #44]	; (8004a74 <__libc_init_array+0x40>)
 8004a46:	4c0c      	ldr	r4, [pc, #48]	; (8004a78 <__libc_init_array+0x44>)
 8004a48:	f000 f820 	bl	8004a8c <_init>
 8004a4c:	1ba4      	subs	r4, r4, r6
 8004a4e:	10a4      	asrs	r4, r4, #2
 8004a50:	2500      	movs	r5, #0
 8004a52:	42a5      	cmp	r5, r4
 8004a54:	d105      	bne.n	8004a62 <__libc_init_array+0x2e>
 8004a56:	bd70      	pop	{r4, r5, r6, pc}
 8004a58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a5c:	4798      	blx	r3
 8004a5e:	3501      	adds	r5, #1
 8004a60:	e7ee      	b.n	8004a40 <__libc_init_array+0xc>
 8004a62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a66:	4798      	blx	r3
 8004a68:	3501      	adds	r5, #1
 8004a6a:	e7f2      	b.n	8004a52 <__libc_init_array+0x1e>
 8004a6c:	08004aec 	.word	0x08004aec
 8004a70:	08004aec 	.word	0x08004aec
 8004a74:	08004aec 	.word	0x08004aec
 8004a78:	08004af0 	.word	0x08004af0

08004a7c <strcpy>:
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a82:	f803 2b01 	strb.w	r2, [r3], #1
 8004a86:	2a00      	cmp	r2, #0
 8004a88:	d1f9      	bne.n	8004a7e <strcpy+0x2>
 8004a8a:	4770      	bx	lr

08004a8c <_init>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	bf00      	nop
 8004a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a92:	bc08      	pop	{r3}
 8004a94:	469e      	mov	lr, r3
 8004a96:	4770      	bx	lr

08004a98 <_fini>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	bf00      	nop
 8004a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9e:	bc08      	pop	{r3}
 8004aa0:	469e      	mov	lr, r3
 8004aa2:	4770      	bx	lr
