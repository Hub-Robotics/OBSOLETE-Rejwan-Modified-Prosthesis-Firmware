
Exo_Prosthesis_Univ_June.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b380  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800b510  0800b510  0001b510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ba1c  0800ba1c  0001ba1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ba24  0800ba24  0001ba24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ba28  0800ba28  0001ba28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000046c  20000000  0800ba2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  0002046c  2**0
                  CONTENTS
  8 .bss          0000a8d8  20000470  20000470  00020470  2**3
                  ALLOC
  9 ._user_heap_stack 00003000  2000ad48  2000ad48  00020470  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002046c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00053ba3  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000089c1  00000000  00000000  0007403f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001b09f  00000000  00000000  0007ca00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001dc0  00000000  00000000  00097aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00003510  00000000  00000000  00099860  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000166af  00000000  00000000  0009cd70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000abc8  00000000  00000000  000b341f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000bdfe7  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005f64  00000000  00000000  000be064  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000df  00000000  00000000  000c3fc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000470 	.word	0x20000470
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b4f8 	.word	0x0800b4f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000474 	.word	0x20000474
 80001cc:	0800b4f8 	.word	0x0800b4f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8000590:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 8000592:	2301      	movs	r3, #1
  
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8000594:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __IO uint8_t status = SD_PRESENT;
 800059c:	f88d 3007 	strb.w	r3, [sp, #7]
  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80005a0:	f004 f876 	bl	8004690 <HAL_GPIO_ReadPin>
 80005a4:	b110      	cbz	r0, 80005ac <BSP_SD_IsDetected+0x1c>
  {
   status = SD_NOT_PRESENT;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  return status;
 80005ac:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80005b0:	b003      	add	sp, #12
 80005b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080005b8 <BSP_SD_IRQHandler>:
  * @brief  Handles SD card interrupt request.
  * @retval None
  */
void BSP_SD_IRQHandler(void)
{
  HAL_SD_IRQHandler(&uSdHandle);
 80005b8:	4801      	ldr	r0, [pc, #4]	; (80005c0 <BSP_SD_IRQHandler+0x8>)
 80005ba:	f005 bb01 	b.w	8005bc0 <HAL_SD_IRQHandler>
 80005be:	bf00      	nop
 80005c0:	200085f8 	.word	0x200085f8

080005c4 <BSP_SD_DMA_Tx_IRQHandler>:
  * @brief  Handles SD DMA Tx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Tx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmatx);
 80005c4:	4b01      	ldr	r3, [pc, #4]	; (80005cc <BSP_SD_DMA_Tx_IRQHandler+0x8>)
 80005c6:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80005c8:	f003 bf3e 	b.w	8004448 <HAL_DMA_IRQHandler>
 80005cc:	200085f8 	.word	0x200085f8

080005d0 <BSP_SD_DMA_Rx_IRQHandler>:
  * @brief  Handles SD DMA Rx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Rx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <BSP_SD_DMA_Rx_IRQHandler+0x8>)
 80005d2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80005d4:	f003 bf38 	b.w	8004448 <HAL_DMA_IRQHandler>
 80005d8:	200085f8 	.word	0x200085f8

080005dc <BSP_SD_GetStatus>:
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  *            @arg  SD_TRANSFER_ERROR: Data transfer error 
  */
HAL_SD_TransferStateTypedef BSP_SD_GetStatus(void)
{
  return(HAL_SD_GetStatus(&uSdHandle));
 80005dc:	4801      	ldr	r0, [pc, #4]	; (80005e4 <BSP_SD_GetStatus+0x8>)
 80005de:	f005 bf3d 	b.w	800645c <HAL_SD_GetStatus>
 80005e2:	bf00      	nop
 80005e4:	200085f8 	.word	0x200085f8

080005e8 <BSP_SD_GetCardInfo>:
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypedef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_Get_CardInfo(&uSdHandle, CardInfo);
 80005e8:	4601      	mov	r1, r0
 80005ea:	4801      	ldr	r0, [pc, #4]	; (80005f0 <BSP_SD_GetCardInfo+0x8>)
 80005ec:	f005 bb48 	b.w	8005c80 <HAL_SD_Get_CardInfo>
 80005f0:	200085f8 	.word	0x200085f8

080005f4 <SD_DMAConfigRx>:
  * @brief Configure the DMA to receive data from the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 80005f4:	b510      	push	{r4, lr}
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Configure DMA Rx parameters */
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80005f6:	4c15      	ldr	r4, [pc, #84]	; (800064c <SD_DMAConfigRx+0x58>)
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_rx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 80005f8:	6584      	str	r4, [r0, #88]	; 0x58
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80005fa:	2307      	movs	r3, #7
 80005fc:	6063      	str	r3, [r4, #4]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80005fe:	2300      	movs	r3, #0
 8000600:	60a3      	str	r3, [r4, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000602:	60e3      	str	r3, [r4, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	6123      	str	r3, [r4, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800060c:	6163      	str	r3, [r4, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800060e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000612:	61a3      	str	r3, [r4, #24]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8000614:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000618:	6223      	str	r3, [r4, #32]
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 800061a:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_rx.Instance = DMA2_Channel4;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <SD_DMAConfigRx+0x5c>)
 800061e:	6023      	str	r3, [r4, #0]

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_rx);
 8000620:	4620      	mov	r0, r4
 8000622:	f003 fef3 	bl	800440c <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_rx);
 8000626:	4620      	mov	r0, r4
 8000628:	f003 fe6a 	bl	8004300 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_rx);
 800062c:	4620      	mov	r0, r4
 800062e:	f003 fdf7 	bl	8004220 <HAL_DMA_Init>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <SD_DMAConfigRx+0x60>)
 8000634:	2230      	movs	r2, #48	; 0x30
 8000636:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);

  return (status != HAL_OK? SD_ERROR : SD_OK);
 800063a:	2800      	cmp	r0, #0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800063c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000640:	605a      	str	r2, [r3, #4]
}
 8000642:	bf14      	ite	ne
 8000644:	2029      	movne	r0, #41	; 0x29
 8000646:	2000      	moveq	r0, #0
 8000648:	bd10      	pop	{r4, pc}
 800064a:	bf00      	nop
 800064c:	2000048c 	.word	0x2000048c
 8000650:	40020444 	.word	0x40020444
 8000654:	e000e100 	.word	0xe000e100

08000658 <BSP_SD_ReadBlocks_DMA>:
{
 8000658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uSdHandle.hdmatx = NULL;
 800065a:	4c10      	ldr	r4, [pc, #64]	; (800069c <BSP_SD_ReadBlocks_DMA+0x44>)
{
 800065c:	4605      	mov	r5, r0
 800065e:	461f      	mov	r7, r3
  state = ((SD_DMAConfigRx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8000660:	4620      	mov	r0, r4
  uSdHandle.hdmatx = NULL;
 8000662:	2300      	movs	r3, #0
{
 8000664:	4616      	mov	r6, r2
  uSdHandle.hdmatx = NULL;
 8000666:	65e3      	str	r3, [r4, #92]	; 0x5c
  state = ((SD_DMAConfigRx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8000668:	f7ff ffc4 	bl	80005f4 <SD_DMAConfigRx>
  if(state == MSD_OK)
 800066c:	b998      	cbnz	r0, 8000696 <BSP_SD_ReadBlocks_DMA+0x3e>
    state = ((HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 800066e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	9b08      	ldr	r3, [sp, #32]
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	4632      	mov	r2, r6
 8000678:	463b      	mov	r3, r7
 800067a:	4629      	mov	r1, r5
 800067c:	4620      	mov	r0, r4
 800067e:	f005 f9a5 	bl	80059cc <HAL_SD_ReadBlocks_DMA>
    if(state == MSD_OK)
 8000682:	b940      	cbnz	r0, 8000696 <BSP_SD_ReadBlocks_DMA+0x3e>
      state = ((HAL_SD_CheckReadOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 8000684:	4906      	ldr	r1, [pc, #24]	; (80006a0 <BSP_SD_ReadBlocks_DMA+0x48>)
 8000686:	4620      	mov	r0, r4
 8000688:	f005 feb7 	bl	80063fa <HAL_SD_CheckReadOperation>
 800068c:	3000      	adds	r0, #0
 800068e:	bf18      	it	ne
 8000690:	2001      	movne	r0, #1
}
 8000692:	b003      	add	sp, #12
 8000694:	bdf0      	pop	{r4, r5, r6, r7, pc}
    state = ((HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 8000696:	2001      	movs	r0, #1
 8000698:	e7fb      	b.n	8000692 <BSP_SD_ReadBlocks_DMA+0x3a>
 800069a:	bf00      	nop
 800069c:	200085f8 	.word	0x200085f8
 80006a0:	00989680 	.word	0x00989680

080006a4 <SD_DMAConfigTx>:
  * @brief Configure the DMA to transmit data to the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 80006a4:	b510      	push	{r4, lr}
  static DMA_HandleTypeDef hdma_tx;
  HAL_StatusTypeDef status;

  /* Configure DMA Tx parameters */
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 80006a6:	4c15      	ldr	r4, [pc, #84]	; (80006fc <SD_DMAConfigTx+0x58>)
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_tx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 80006a8:	65c4      	str	r4, [r0, #92]	; 0x5c
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 80006aa:	2307      	movs	r3, #7
 80006ac:	6063      	str	r3, [r4, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80006ae:	2310      	movs	r3, #16
 80006b0:	60a3      	str	r3, [r4, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60e3      	str	r3, [r4, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	6123      	str	r3, [r4, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006be:	6163      	str	r3, [r4, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80006c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006c4:	61a3      	str	r3, [r4, #24]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80006c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80006ca:	6223      	str	r3, [r4, #32]
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 80006cc:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_tx.Instance = DMA2_Channel4;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <SD_DMAConfigTx+0x5c>)
 80006d0:	6023      	str	r3, [r4, #0]

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_tx);
 80006d2:	4620      	mov	r0, r4
 80006d4:	f003 fe9a 	bl	800440c <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_tx);
 80006d8:	4620      	mov	r0, r4
 80006da:	f003 fe11 	bl	8004300 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_tx);
 80006de:	4620      	mov	r0, r4
 80006e0:	f003 fd9e 	bl	8004220 <HAL_DMA_Init>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <SD_DMAConfigTx+0x60>)
 80006e6:	2230      	movs	r2, #48	; 0x30
 80006e8:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);

  return (status != HAL_OK? SD_ERROR : SD_OK);
 80006ec:	2800      	cmp	r0, #0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006f2:	605a      	str	r2, [r3, #4]
}
 80006f4:	bf14      	ite	ne
 80006f6:	2029      	movne	r0, #41	; 0x29
 80006f8:	2000      	moveq	r0, #0
 80006fa:	bd10      	pop	{r4, pc}
 80006fc:	200004d4 	.word	0x200004d4
 8000700:	40020444 	.word	0x40020444
 8000704:	e000e100 	.word	0xe000e100

08000708 <BSP_SD_Init>:
{
 8000708:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef gpioinitstruct = {0};
 800070a:	2214      	movs	r2, #20
{
 800070c:	b08a      	sub	sp, #40	; 0x28
  uSdHandle.Instance = SDMMC1;
 800070e:	4c37      	ldr	r4, [pc, #220]	; (80007ec <BSP_SD_Init+0xe4>)
 8000710:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <BSP_SD_Init+0xe8>)
 8000712:	6023      	str	r3, [r4, #0]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8000714:	2100      	movs	r1, #0
  uSdHandle.Init.ClockDiv            = 1;    // Checked by Masudul,
 8000716:	2501      	movs	r5, #1
  GPIO_InitTypeDef gpioinitstruct = {0};
 8000718:	eb0d 0002 	add.w	r0, sp, r2
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800071c:	6061      	str	r1, [r4, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800071e:	60a1      	str	r1, [r4, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000720:	60e1      	str	r1, [r4, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8000722:	6121      	str	r1, [r4, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000724:	6161      	str	r1, [r4, #20]
  uSdHandle.Init.ClockDiv            = 1;    // Checked by Masudul,
 8000726:	61a5      	str	r5, [r4, #24]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8000728:	f009 fdad 	bl	800a286 <memset>
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800072c:	4b31      	ldr	r3, [pc, #196]	; (80007f4 <BSP_SD_Init+0xec>)
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 800072e:	4832      	ldr	r0, [pc, #200]	; (80007f8 <BSP_SD_Init+0xf0>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000730:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000732:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000736:	661a      	str	r2, [r3, #96]	; 0x60
 8000738:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800073a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800073e:	9200      	str	r2, [sp, #0]
 8000740:	9a00      	ldr	r2, [sp, #0]
  __DMAx_TxRx_CLK_ENABLE();
 8000742:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000744:	f042 0202 	orr.w	r2, r2, #2
 8000748:	649a      	str	r2, [r3, #72]	; 0x48
 800074a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800074c:	f002 0202 	and.w	r2, r2, #2
 8000750:	9201      	str	r2, [sp, #4]
 8000752:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000754:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000756:	f042 0204 	orr.w	r2, r2, #4
 800075a:	64da      	str	r2, [r3, #76]	; 0x4c
 800075c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800075e:	f002 0204 	and.w	r2, r2, #4
 8000762:	9202      	str	r2, [sp, #8]
 8000764:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000768:	f042 0208 	orr.w	r2, r2, #8
 800076c:	64da      	str	r2, [r3, #76]	; 0x4c
 800076e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000770:	f002 0208 	and.w	r2, r2, #8
 8000774:	9203      	str	r2, [sp, #12]
 8000776:	9a03      	ldr	r2, [sp, #12]
  __SD_DETECT_GPIO_CLK_ENABLE();
 8000778:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800077a:	432a      	orrs	r2, r5
 800077c:	64da      	str	r2, [r3, #76]	; 0x4c
 800077e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  gpioinitstruct.Pull      = GPIO_PULLUP;
 8000780:	9507      	str	r5, [sp, #28]
  __SD_DETECT_GPIO_CLK_ENABLE();
 8000782:	402b      	ands	r3, r5
 8000784:	9304      	str	r3, [sp, #16]
 8000786:	9b04      	ldr	r3, [sp, #16]
 8000788:	4d1c      	ldr	r5, [pc, #112]	; (80007fc <BSP_SD_Init+0xf4>)
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	9308      	str	r3, [sp, #32]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 8000792:	230c      	movs	r3, #12
 8000794:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8000796:	a905      	add	r1, sp, #20
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8000798:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800079c:	9305      	str	r3, [sp, #20]
 800079e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80007a2:	f003 fe99 	bl	80044d8 <HAL_GPIO_Init>
  gpioinitstruct.Pin = GPIO_PIN_2;
 80007a6:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80007a8:	4815      	ldr	r0, [pc, #84]	; (8000800 <BSP_SD_Init+0xf8>)
  gpioinitstruct.Pin = GPIO_PIN_2;
 80007aa:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80007ac:	a905      	add	r1, sp, #20
 80007ae:	f003 fe93 	bl	80044d8 <HAL_GPIO_Init>
 80007b2:	606e      	str	r6, [r5, #4]
  if((SD_DMAConfigTx(&uSdHandle) == SD_OK) )
 80007b4:	4620      	mov	r0, r4
 80007b6:	f7ff ff75 	bl	80006a4 <SD_DMAConfigTx>
 80007ba:	b900      	cbnz	r0, 80007be <BSP_SD_Init+0xb6>
 80007bc:	606e      	str	r6, [r5, #4]
  if(BSP_SD_IsDetected() != SD_PRESENT)
 80007be:	f7ff fee7 	bl	8000590 <BSP_SD_IsDetected>
 80007c2:	2801      	cmp	r0, #1
 80007c4:	d002      	beq.n	80007cc <BSP_SD_Init+0xc4>
    return MSD_ERROR;
 80007c6:	2001      	movs	r0, #1
}
 80007c8:	b00a      	add	sp, #40	; 0x28
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
  if(HAL_SD_Init(&uSdHandle, &uSdCardInfo) != SD_OK)
 80007cc:	490d      	ldr	r1, [pc, #52]	; (8000804 <BSP_SD_Init+0xfc>)
 80007ce:	4807      	ldr	r0, [pc, #28]	; (80007ec <BSP_SD_Init+0xe4>)
 80007d0:	f005 fb90 	bl	8005ef4 <HAL_SD_Init>
 80007d4:	2800      	cmp	r0, #0
 80007d6:	d1f6      	bne.n	80007c6 <BSP_SD_Init+0xbe>
    if(HAL_SD_WideBusOperation_Config(&uSdHandle, SDMMC_BUS_WIDE_4B) != SD_OK)
 80007d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <BSP_SD_Init+0xe4>)
 80007de:	f005 fd61 	bl	80062a4 <HAL_SD_WideBusOperation_Config>
    return MSD_ERROR;
 80007e2:	3000      	adds	r0, #0
 80007e4:	bf18      	it	ne
 80007e6:	2001      	movne	r0, #1
 80007e8:	e7ee      	b.n	80007c8 <BSP_SD_Init+0xc0>
 80007ea:	bf00      	nop
 80007ec:	200085f8 	.word	0x200085f8
 80007f0:	40012800 	.word	0x40012800
 80007f4:	40021000 	.word	0x40021000
 80007f8:	48000800 	.word	0x48000800
 80007fc:	e000e100 	.word	0xe000e100
 8000800:	48000c00 	.word	0x48000c00
 8000804:	20000520 	.word	0x20000520

08000808 <BSP_SD_WriteBlocks_DMA>:
{
 8000808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uSdHandle.hdmarx = NULL;
 800080a:	4c10      	ldr	r4, [pc, #64]	; (800084c <BSP_SD_WriteBlocks_DMA+0x44>)
{
 800080c:	4605      	mov	r5, r0
 800080e:	461f      	mov	r7, r3
  state = ((SD_DMAConfigTx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8000810:	4620      	mov	r0, r4
  uSdHandle.hdmarx = NULL;
 8000812:	2300      	movs	r3, #0
{
 8000814:	4616      	mov	r6, r2
  uSdHandle.hdmarx = NULL;
 8000816:	65a3      	str	r3, [r4, #88]	; 0x58
  state = ((SD_DMAConfigTx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8000818:	f7ff ff44 	bl	80006a4 <SD_DMAConfigTx>
  if(state == MSD_OK)
 800081c:	b998      	cbnz	r0, 8000846 <BSP_SD_WriteBlocks_DMA+0x3e>
    state = ((HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 800081e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	9b08      	ldr	r3, [sp, #32]
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	4632      	mov	r2, r6
 8000828:	463b      	mov	r3, r7
 800082a:	4629      	mov	r1, r5
 800082c:	4620      	mov	r0, r4
 800082e:	f005 f947 	bl	8005ac0 <HAL_SD_WriteBlocks_DMA>
    if(state == MSD_OK)
 8000832:	b940      	cbnz	r0, 8000846 <BSP_SD_WriteBlocks_DMA+0x3e>
      state = ((HAL_SD_CheckWriteOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 8000834:	4906      	ldr	r1, [pc, #24]	; (8000850 <BSP_SD_WriteBlocks_DMA+0x48>)
 8000836:	4620      	mov	r0, r4
 8000838:	f005 fe35 	bl	80064a6 <HAL_SD_CheckWriteOperation>
 800083c:	3000      	adds	r0, #0
 800083e:	bf18      	it	ne
 8000840:	2001      	movne	r0, #1
}
 8000842:	b003      	add	sp, #12
 8000844:	bdf0      	pop	{r4, r5, r6, r7, pc}
    state = ((HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 8000846:	2001      	movs	r0, #1
 8000848:	e7fb      	b.n	8000842 <BSP_SD_WriteBlocks_DMA+0x3a>
 800084a:	bf00      	nop
 800084c:	200085f8 	.word	0x200085f8
 8000850:	00989680 	.word	0x00989680

08000854 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8000854:	2000      	movs	r0, #0
 8000856:	4770      	bx	lr

08000858 <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <LL_AHB2_GRP1_EnableClock+0x18>)
 800085a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800085c:	4302      	orrs	r2, r0
 800085e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8000862:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000864:	4018      	ands	r0, r3
 8000866:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000868:	9b01      	ldr	r3, [sp, #4]
}
 800086a:	b002      	add	sp, #8
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000

08000874 <MX_GPIO_Init>:
LL_GPIO_InitTypeDef GPIO_InitStruct;



void MX_GPIO_Init(void)
{
 8000874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}



  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000878:	2004      	movs	r0, #4
 800087a:	f7ff ffed 	bl	8000858 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 800087e:	2080      	movs	r0, #128	; 0x80
 8000880:	f7ff ffea 	bl	8000858 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000884:	2001      	movs	r0, #1
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);

  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 8000886:	4c77      	ldr	r4, [pc, #476]	; (8000a64 <MX_GPIO_Init+0x1f0>)
  GPIO_InitStruct.Pin = LED_B_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	4f77      	ldr	r7, [pc, #476]	; (8000a68 <MX_GPIO_Init+0x1f4>)
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800088a:	f7ff ffe5 	bl	8000858 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800088e:	2002      	movs	r0, #2
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8000890:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
 8000894:	f7ff ffe0 	bl	8000858 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8000898:	2008      	movs	r0, #8
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800089a:	f04f 0a00 	mov.w	sl, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800089e:	2501      	movs	r5, #1
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80008a0:	f7ff ffda 	bl	8000858 <LL_AHB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 80008a4:	260c      	movs	r6, #12
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	4621      	mov	r1, r4
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LED_B_PIN;
 80008ac:	f04f 0b80 	mov.w	fp, #128	; 0x80
  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 80008b0:	6026      	str	r6, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008b2:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008b4:	f8c4 a008 	str.w	sl, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008b8:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008bc:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f006 f994 	bl	8006bec <LL_GPIO_Init>
 80008c4:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	4621      	mov	r1, r4
 80008ca:	4638      	mov	r0, r7
  LL_GPIO_ResetOutputPin(GPIOB, LED_B_PIN);

  GPIO_InitStruct.Pin = USB_CONNECTIVITY;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80008cc:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pin = LED_B_PIN;
 80008d0:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008d4:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008d6:	f8c4 a008 	str.w	sl, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008da:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008de:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f006 f983 	bl	8006bec <LL_GPIO_Init>
 80008e6:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
  GPIO_InitStruct.Pin = USB_CONNECTIVITY;
 80008ea:	f44f 7200 	mov.w	r2, #512	; 0x200
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 80008ee:	4621      	mov	r1, r4
 80008f0:	4640      	mov	r0, r8

  /**/
  GPIO_InitStruct.Pin = ENC1_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2603      	movs	r6, #3
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80008f4:	e884 0404 	stmia.w	r4, {r2, sl}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80008f8:	f8c4 9010 	str.w	r9, [r4, #16]
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 80008fc:	f006 f976 	bl	8006bec <LL_GPIO_Init>
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC1_CS_GPIO_PORT, &GPIO_InitStruct);
 8000900:	4621      	mov	r1, r4
 8000902:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = ENC1_CS_PIN;
 8000904:	f8c4 9000 	str.w	r9, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000908:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800090c:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000910:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(ENC1_CS_GPIO_PORT, &GPIO_InitStruct);
 8000914:	f006 f96a 	bl	8006bec <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ENC1_SCLK_PIN;
 8000918:	f44f 6280 	mov.w	r2, #1024	; 0x400
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC1_SCLK_GPIO_PORT, &GPIO_InitStruct);
 800091c:	4621      	mov	r1, r4
 800091e:	4638      	mov	r0, r7
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000920:	e884 0464 	stmia.w	r4, {r2, r5, r6, sl}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000924:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(ENC1_SCLK_GPIO_PORT, &GPIO_InitStruct);
 8000928:	f006 f960 	bl	8006bec <LL_GPIO_Init>

  GPIO_InitStruct.Pin =  ENC1_DATA_PIN;
 800092c:	2204      	movs	r2, #4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(ENC1_DATA_GPIO_PORT, &GPIO_InitStruct);
 800092e:	4621      	mov	r1, r4
 8000930:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000932:	e884 0404 	stmia.w	r4, {r2, sl}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000936:	f8c4 9010 	str.w	r9, [r4, #16]
  LL_GPIO_Init(ENC1_DATA_GPIO_PORT, &GPIO_InitStruct);
 800093a:	f006 f957 	bl	8006bec <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ENC2_CS_PIN;
 800093e:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 8000940:	4621      	mov	r1, r4
 8000942:	484a      	ldr	r0, [pc, #296]	; (8000a6c <MX_GPIO_Init+0x1f8>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000944:	f8c4 a010 	str.w	sl, [r4, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000948:	e884 0468 	stmia.w	r4, {r3, r5, r6, sl}
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 800094c:	f006 f94e 	bl	8006bec <LL_GPIO_Init>

  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(ENC2_DATA_GPIO_PORT, &GPIO_InitStruct);
 8000950:	4621      	mov	r1, r4
 8000952:	4846      	ldr	r0, [pc, #280]	; (8000a6c <MX_GPIO_Init+0x1f8>)
  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
 8000954:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000958:	f8c4 a004 	str.w	sl, [r4, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800095c:	f8c4 9010 	str.w	r9, [r4, #16]
  LL_GPIO_Init(ENC2_DATA_GPIO_PORT, &GPIO_InitStruct);
 8000960:	f006 f944 	bl	8006bec <LL_GPIO_Init>
  GPIO_InitStruct.Pin = ENC2_SCLK_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC2_SCLK_GPIO_PORT, &GPIO_InitStruct);
 8000964:	4621      	mov	r1, r4
 8000966:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = ENC2_SCLK_PIN;
 8000968:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800096c:	6065      	str	r5, [r4, #4]



  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 800096e:	f44f 7b80 	mov.w	fp, #256	; 0x100
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000974:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000978:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(ENC2_SCLK_GPIO_PORT, &GPIO_InitStruct);
 800097c:	f006 f936 	bl	8006bec <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI1_CS_GPIO_PORT, &GPIO_InitStruct);
 8000980:	4621      	mov	r1, r4
 8000982:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 8000984:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000988:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800098c:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000990:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(SPI1_CS_GPIO_PORT, &GPIO_InitStruct);
 8000994:	f006 f92a 	bl	8006bec <LL_GPIO_Init>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000998:	f8c8 b018 	str.w	fp, [r8, #24]
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 800099c:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
 800099e:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 80009a2:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
 80009a4:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009a8:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80009aa:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009ac:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009b0:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 80009b4:	f006 f91a 	bl	8006bec <LL_GPIO_Init>
 80009b8:	f8c7 b018 	str.w	fp, [r7, #24]
  GPIO_InitStruct.Pin = SPI3_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 80009bc:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8000a70 <MX_GPIO_Init+0x1fc>
  GPIO_InitStruct.Pin = SPI3_CS_PIN;
 80009c0:	6025      	str	r5, [r4, #0]
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 80009c2:	4621      	mov	r1, r4
 80009c4:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009c6:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009ca:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009ce:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 80009d2:	f006 f90b 	bl	8006bec <LL_GPIO_Init>
 80009d6:	f8cb 5018 	str.w	r5, [fp, #24]
  LL_GPIO_SetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN);

  GPIO_InitStruct.Pin = SPI1_IMU2_CS_Pin;
 80009da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI1_IMU2_CS_GPIO_Port, &GPIO_InitStruct);
 80009de:	4621      	mov	r1, r4
 80009e0:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = SPI1_IMU2_CS_Pin;
 80009e2:	6022      	str	r2, [r4, #0]
 80009e4:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009e6:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80009e8:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009ea:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009ee:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(SPI1_IMU2_CS_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f006 f8fb 	bl	8006bec <LL_GPIO_Init>
 80009f6:	9a01      	ldr	r2, [sp, #4]
 80009f8:	f8c8 2018 	str.w	r2, [r8, #24]
  GPIO_InitStruct.Pin = SPI3_IMU5_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 80009fc:	4621      	mov	r1, r4
 80009fe:	4658      	mov	r0, fp
 8000a00:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Pin = SPI3_IMU5_CS_Pin;
 8000a02:	f8c4 9000 	str.w	r9, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a06:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000a08:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a0a:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a0e:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f006 f8eb 	bl	8006bec <LL_GPIO_Init>
  LL_GPIO_SetOutputPin(SPI3_IMU5_CS_GPIO_Port, SPI3_IMU5_CS_Pin);


  /**/
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
 8000a16:	9a01      	ldr	r2, [sp, #4]
 8000a18:	f8cb 9018 	str.w	r9, [fp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 8000a1c:	4621      	mov	r1, r4
 8000a1e:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a20:	e884 0404 	stmia.w	r4, {r2, sl}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000a24:	f8c4 9010 	str.w	r9, [r4, #16]
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 8000a28:	f006 f8e0 	bl	8006bec <LL_GPIO_Init>

  /**/

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;   // Portable IMU2 CS Pin
 8000a2c:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2e:	4621      	mov	r1, r4
 8000a30:	4638      	mov	r0, r7
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a32:	e884 0468 	stmia.w	r4, {r3, r5, r6, sl}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a36:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	f006 f8d7 	bl	8006bec <LL_GPIO_Init>
 8000a3e:	2340      	movs	r3, #64	; 0x40
 8000a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;   // Portable IMU3 CS Pin
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a42:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;   // Portable IMU3 CS Pin
 8000a44:	2710      	movs	r7, #16
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a46:	4809      	ldr	r0, [pc, #36]	; (8000a6c <MX_GPIO_Init+0x1f8>)
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;   // Portable IMU3 CS Pin
 8000a48:	6027      	str	r7, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a4a:	6065      	str	r5, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a4e:	f8c4 a00c 	str.w	sl, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a52:	f8c4 a010 	str.w	sl, [r4, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	f006 f8c9 	bl	8006bec <LL_GPIO_Init>
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <MX_GPIO_Init+0x1f8>)
 8000a5c:	619f      	str	r7, [r3, #24]
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_4);

}
 8000a5e:	b003      	add	sp, #12
 8000a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a64:	2000865c 	.word	0x2000865c
 8000a68:	48000400 	.word	0x48000400
 8000a6c:	48000800 	.word	0x48000800
 8000a70:	48001c00 	.word	0x48001c00

08000a74 <RED_LED_OFF>:
 8000a74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a78:	2208      	movs	r2, #8
 8000a7a:	619a      	str	r2, [r3, #24]
 8000a7c:	4770      	bx	lr

08000a7e <GREEN_LED_OFF>:
 8000a7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a82:	2204      	movs	r2, #4
 8000a84:	619a      	str	r2, [r3, #24]
 8000a86:	4770      	bx	lr

08000a88 <BLUE_LED_OFF>:
 8000a88:	4b01      	ldr	r3, [pc, #4]	; (8000a90 <BLUE_LED_OFF+0x8>)
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	619a      	str	r2, [r3, #24]
 8000a8e:	4770      	bx	lr
 8000a90:	48000400 	.word	0x48000400

08000a94 <ALL_LED_OFF>:
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <ALL_LED_OFF+0x14>)
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	619a      	str	r2, [r3, #24]
 8000a9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	619a      	str	r2, [r3, #24]
 8000aa2:	2208      	movs	r2, #8
 8000aa4:	619a      	str	r2, [r3, #24]
 8000aa6:	4770      	bx	lr
 8000aa8:	48000400 	.word	0x48000400

08000aac <ALL_LED_ON>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <ALL_LED_ON+0x14>)
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	629a      	str	r2, [r3, #40]	; 0x28
 8000ab2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	629a      	str	r2, [r3, #40]	; 0x28
 8000aba:	2208      	movs	r2, #8
 8000abc:	629a      	str	r2, [r3, #40]	; 0x28
 8000abe:	4770      	bx	lr
 8000ac0:	48000400 	.word	0x48000400

08000ac4 <GREEN_LED_ONLY>:
 8000ac4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ac8:	2204      	movs	r2, #4
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000acc:	4a02      	ldr	r2, [pc, #8]	; (8000ad8 <GREEN_LED_ONLY+0x14>)
 8000ace:	2180      	movs	r1, #128	; 0x80
 8000ad0:	6191      	str	r1, [r2, #24]
 8000ad2:	2208      	movs	r2, #8
 8000ad4:	619a      	str	r2, [r3, #24]
 8000ad6:	4770      	bx	lr
 8000ad8:	48000400 	.word	0x48000400

08000adc <RED_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8000adc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ae0:	2208      	movs	r2, #8
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ae4:	4a02      	ldr	r2, [pc, #8]	; (8000af0 <RED_LED_ONLY+0x14>)
 8000ae6:	2180      	movs	r1, #128	; 0x80
 8000ae8:	6191      	str	r1, [r2, #24]
 8000aea:	2204      	movs	r2, #4
 8000aec:	619a      	str	r2, [r3, #24]
 8000aee:	4770      	bx	lr
 8000af0:	48000400 	.word	0x48000400

08000af4 <BLUE_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <BLUE_LED_ONLY+0x14>)
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000afa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000afe:	2204      	movs	r2, #4
 8000b00:	619a      	str	r2, [r3, #24]
 8000b02:	2208      	movs	r2, #8
 8000b04:	619a      	str	r2, [r3, #24]
 8000b06:	4770      	bx	lr
 8000b08:	48000400 	.word	0x48000400

08000b0c <VIOLET_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <VIOLET_LED_ONLY+0x14>)
 8000b0e:	2280      	movs	r2, #128	; 0x80
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000b12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b16:	2204      	movs	r2, #4
 8000b18:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b1a:	2208      	movs	r2, #8
 8000b1c:	629a      	str	r2, [r3, #40]	; 0x28
 8000b1e:	4770      	bx	lr
 8000b20:	48000400 	.word	0x48000400

08000b24 <SD_POWER_ON>:
 8000b24:	4770      	bx	lr

08000b26 <SD_POWER_OFF>:
void SD_POWER_ON(void)
{

}
void SD_POWER_OFF(void)
{
 8000b26:	4770      	bx	lr

08000b28 <main>:




int main(void){
	Pros_state =  LP_STOP;                                    // Default state after power ON reset
 8000b28:	4c64      	ldr	r4, [pc, #400]	; (8000cbc <main+0x194>)
int main(void){
 8000b2a:	b580      	push	{r7, lr}
	Pros_state =  LP_STOP;                                    // Default state after power ON reset
 8000b2c:	2501      	movs	r5, #1
 8000b2e:	7025      	strb	r5, [r4, #0]
	SystemClock_Config_MSI_80MHz();	                        // Configure the system clock to 48 MHz from MSI, PLL disabled for power saving
 8000b30:	f002 fafe 	bl	8003130 <SystemClock_Config_MSI_80MHz>

	// If RTC is previously configured and running via backup battery i.e. BackUp Register Data is available, No need to update RTC time again
 if (RTC_BAK_GetRegister(RTC, 0x01) != RTC_BKP_DATE_TIME_UPDTATED) //    0x01 value was arbitrarily set from previous Configure_RTC_Calendar()
 8000b34:	4629      	mov	r1, r5
 8000b36:	4862      	ldr	r0, [pc, #392]	; (8000cc0 <main+0x198>)
 8000b38:	f000 fe0a 	bl	8001750 <RTC_BAK_GetRegister>
 8000b3c:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8000b40:	4298      	cmp	r0, r3
 8000b42:	d001      	beq.n	8000b48 <main+0x20>
	  {
			MX_RTC_Init();   // Set RTC clock source and parameters
 8000b44:	f000 fd72 	bl	800162c <MX_RTC_Init>
	  }

  MX_GPIO_Init();
 8000b48:	f7ff fe94 	bl	8000874 <MX_GPIO_Init>
  HAL_Init();                 // Reset of all peripherals, Initializes the Flash interface and the Systick.
 8000b4c:	f003 fac4 	bl	80040d8 <HAL_Init>



    DFU_Bypass();
 8000b50:	f000 fb0e 	bl	8001170 <DFU_Bypass>
    Configure_USART_1();  // Debug with PC
 8000b54:	f001 fa72 	bl	800203c <Configure_USART_1>
    sprintf(PrintBuf,"Hello");
 8000b58:	495a      	ldr	r1, [pc, #360]	; (8000cc4 <main+0x19c>)
 8000b5a:	485b      	ldr	r0, [pc, #364]	; (8000cc8 <main+0x1a0>)
					case Dormant_Idle_Stop:             // Idle Lowest Power Stop Mode with no Data log (only wait for USB connectivity)

					  	                        EnterStop();   // Enter Stop Mode
												 // Wake Up after STOP Mode only by USB EXTI Int

												if (USB_Present_ == 1)                     // After detecting USB attachment via EXTI_5 int
 8000b5c:	4d5b      	ldr	r5, [pc, #364]	; (8000ccc <main+0x1a4>)
						   Data_log_Start_Resume=0;
 8000b5e:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8000cec <main+0x1c4>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8000b62:	4f5b      	ldr	r7, [pc, #364]	; (8000cd0 <main+0x1a8>)
    sprintf(PrintBuf,"Hello");
 8000b64:	f009 fca4 	bl	800a4b0 <strcpy>
    USART1_wr_print(PrintBuf,sizeof(PrintBuf));
 8000b68:	2132      	movs	r1, #50	; 0x32
 8000b6a:	4857      	ldr	r0, [pc, #348]	; (8000cc8 <main+0x1a0>)
 8000b6c:	f001 faa0 	bl	80020b0 <USART1_wr_print>
    P_IMU3_SPI2_Initialization_at_reset();   //IMU3-_SPI2
 8000b70:	f002 f928 	bl	8002dc4 <P_IMU3_SPI2_Initialization_at_reset>
  sprintf(PrintBuf,"Hello");
 8000b74:	4953      	ldr	r1, [pc, #332]	; (8000cc4 <main+0x19c>)
 8000b76:	4854      	ldr	r0, [pc, #336]	; (8000cc8 <main+0x1a0>)
 8000b78:	f009 fc9a 	bl	800a4b0 <strcpy>
 USART1_wr_print(PrintBuf,sizeof(PrintBuf));
 8000b7c:	2132      	movs	r1, #50	; 0x32
 8000b7e:	4852      	ldr	r0, [pc, #328]	; (8000cc8 <main+0x1a0>)
 8000b80:	f001 fa96 	bl	80020b0 <USART1_wr_print>
 P_IMU4_SPI3_Initialization_at_reset();   //IMU4-5_SPI3
 8000b84:	f002 f89c 	bl	8002cc0 <P_IMU4_SPI3_Initialization_at_reset>
  sprintf(PrintBuf,"Hello3");
 8000b88:	4952      	ldr	r1, [pc, #328]	; (8000cd4 <main+0x1ac>)
 8000b8a:	484f      	ldr	r0, [pc, #316]	; (8000cc8 <main+0x1a0>)
 8000b8c:	f009 fc90 	bl	800a4b0 <strcpy>
  USART1_wr_print(PrintBuf,sizeof(PrintBuf));
 8000b90:	2132      	movs	r1, #50	; 0x32
 8000b92:	484d      	ldr	r0, [pc, #308]	; (8000cc8 <main+0x1a0>)
 8000b94:	f001 fa8c 	bl	80020b0 <USART1_wr_print>
  P_IMU1_SPI1_Initialization_at_reset(); //IMU1-2__SPI1  (only IMU1 configured)
 8000b98:	f002 f810 	bl	8002bbc <P_IMU1_SPI1_Initialization_at_reset>
  P_ADC_Sensor_GPIO_Init(); //ADC GPIOs
 8000b9c:	f000 ffe0 	bl	8001b60 <P_ADC_Sensor_GPIO_Init>
  USB_PA9_EXTI_conf();         // USB connectivity pin detect Interrupt // Data_Pause_Resume_PC0_EXTI_conf();
 8000ba0:	f000 fdda 	bl	8001758 <USB_PA9_EXTI_conf>
  Configure_LPTIM2_Int(); // Configured LPTIM2 but not started. To be started before going to Loop
 8000ba4:	f002 fb34 	bl	8003210 <Configure_LPTIM2_Int>
  Configure_Interrupt();       // Re-arrange NVIC interrupt priority
 8000ba8:	f000 fa90 	bl	80010cc <Configure_Interrupt>
  Power_on_reset();            // Following reset is found by troubleshooting
 8000bac:	f000 fa80 	bl	80010b0 <Power_on_reset>
  AIM_DataStart_at_Reset();
 8000bb0:	f001 fd80 	bl	80026b4 <AIM_DataStart_at_Reset>
  GREEN_LED_ONLY();
 8000bb4:	f7ff ff86 	bl	8000ac4 <GREEN_LED_ONLY>
				  switch(Pros_state) {
 8000bb8:	7823      	ldrb	r3, [r4, #0]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	2b06      	cmp	r3, #6
 8000bbe:	d8fd      	bhi.n	8000bbc <main+0x94>
 8000bc0:	a201      	add	r2, pc, #4	; (adr r2, 8000bc8 <main+0xa0>)
 8000bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc6:	bf00      	nop
 8000bc8:	08000be5 	.word	0x08000be5
 8000bcc:	08000c1f 	.word	0x08000c1f
 8000bd0:	08000bbd 	.word	0x08000bbd
 8000bd4:	08000ca1 	.word	0x08000ca1
 8000bd8:	08000c3d 	.word	0x08000c3d
 8000bdc:	08000ca7 	.word	0x08000ca7
 8000be0:	08000c59 	.word	0x08000c59
						EnterStop();   // Enter Stop Mode
 8000be4:	f002 fa8e 	bl	8003104 <EnterStop>
						if (USB_Present_ == 1)                     // After detecting USB attachment via EXTI_5 int
 8000be8:	782b      	ldrb	r3, [r5, #0]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d104      	bne.n	8000bf8 <main+0xd0>
													 Pros_state = USB_MSC_VCP_Mode;                   // Next State USB_MSC_Mode Mode
 8000bee:	2304      	movs	r3, #4
 8000bf0:	7023      	strb	r3, [r4, #0]
													 USB_Present_ = 0;                           // Reset Flag to avoid looping
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	702b      	strb	r3, [r5, #0]
 8000bf6:	e7df      	b.n	8000bb8 <main+0x90>
						 else if (FATAL_Error == 1)                      // Triggered from Error_Handler
 8000bf8:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <main+0x1b0>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d105      	bne.n	8000c0c <main+0xe4>
								FATAL_Error = 0;                            // Reset Flag to avoid looping
 8000c00:	4b35      	ldr	r3, [pc, #212]	; (8000cd8 <main+0x1b0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
								 Pros_state = Fatal_Error_State;             // Next State Fatal_Error_State
 8000c06:	2307      	movs	r3, #7
							 Pros_state = Dormant_Idle_Stop;                       // Stay Dormant Mode if no external events
 8000c08:	7023      	strb	r3, [r4, #0]
 8000c0a:	e7d5      	b.n	8000bb8 <main+0x90>
						 else if (SD_write_Flag == 1)                    // When BUffer full to store in SD card
 8000c0c:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <main+0x1b4>)
 8000c0e:	781a      	ldrb	r2, [r3, #0]
 8000c10:	2a01      	cmp	r2, #1
 8000c12:	d111      	bne.n	8000c38 <main+0x110>
							Pros_state = Sensor_FATFS_Write;              // Next State Sensor_FATFS_Write Mode
 8000c14:	2202      	movs	r2, #2
 8000c16:	7022      	strb	r2, [r4, #0]
							SD_write_Flag = 0;                           // Reset Flag to avoid looping
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	e7cc      	b.n	8000bb8 <main+0x90>
						Battery_ADC_Value=2500;
 8000c1e:	4b30      	ldr	r3, [pc, #192]	; (8000ce0 <main+0x1b8>)
 8000c20:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000c24:	801a      	strh	r2, [r3, #0]
	   									SD_Sensor_write();                   // Write Sensor Buffer to SD card
 8000c26:	f001 fd05 	bl	8002634 <SD_Sensor_write>
		                                     if (USB_Present_ == 1)          // If USB attachment detected here via EXTI_5 int
 8000c2a:	782b      	ldrb	r3, [r5, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d0de      	beq.n	8000bee <main+0xc6>
		            						 else if (FATAL_Error == 1)                      // Triggered from Error_Handler
 8000c30:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <main+0x1b0>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d0e3      	beq.n	8000c00 <main+0xd8>
							 Pros_state = LP_STOP;                       // Return to Low Power Mode Data collection
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e7e5      	b.n	8000c08 <main+0xe0>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c3c:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <main+0x1bc>)
 8000c3e:	2204      	movs	r2, #4
 8000c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							ALL_LED_OFF();
 8000c44:	f7ff ff26 	bl	8000a94 <ALL_LED_OFF>
							Shut_Down_SD();
 8000c48:	f000 fcd4 	bl	80015f4 <Shut_Down_SD>
							Reset_Variables_for_LowBattery();
 8000c4c:	f000 fac6 	bl	80011dc <Reset_Variables_for_LowBattery>
							Prepare_Goto_Dormant_Mode();
 8000c50:	f000 faba 	bl	80011c8 <Prepare_Goto_Dormant_Mode>
							 Pros_state = Dormant_Idle_Stop;                       // Stay Dormant Mode if no external events
 8000c54:	2306      	movs	r3, #6
 8000c56:	e7d7      	b.n	8000c08 <main+0xe0>
						   RED_LED_ONLY();
 8000c58:	f7ff ff40 	bl	8000adc <RED_LED_ONLY>
						   FATFS_Logstart_Delete();
 8000c5c:	f000 fb7c 	bl	8001358 <FATFS_Logstart_Delete>
						   SD_write_Flag = 0;
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <main+0x1b4>)
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_DisableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8000c62:	4a21      	ldr	r2, [pc, #132]	; (8000ce8 <main+0x1c0>)
						   Data_log_Start_Resume=0;
 8000c64:	2600      	movs	r6, #0
						   SD_write_Flag = 0;
 8000c66:	701e      	strb	r6, [r3, #0]
 8000c68:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <main+0x1bc>)
						   Data_log_Start_Resume=0;
 8000c6a:	f888 6000 	strb.w	r6, [r8]
 8000c6e:	f04f 0904 	mov.w	r9, #4
 8000c72:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
 8000c76:	6893      	ldr	r3, [r2, #8]
 8000c78:	f023 0302 	bic.w	r3, r3, #2
 8000c7c:	6093      	str	r3, [r2, #8]
						   SD_POWER_OFF();
 8000c7e:	f7ff ff52 	bl	8000b26 <SD_POWER_OFF>
 8000c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c88:	64fb      	str	r3, [r7, #76]	; 0x4c
	                        EnterStop();   // Enter Stop Mode
 8000c8a:	f002 fa3b 	bl	8003104 <EnterStop>
						if (USB_Present_ == 1)                     // After detecting USB attachment via EXTI_5 int
 8000c8e:	782b      	ldrb	r3, [r5, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d1df      	bne.n	8000c54 <main+0x12c>
						 Pros_state = USB_MSC_VCP_Mode;               // Next State USB_MSC_Mode Mode
 8000c94:	f884 9000 	strb.w	r9, [r4]
						 USB_Present_ = 0;                           // Reset Flag to avoid looping
 8000c98:	702e      	strb	r6, [r5, #0]
												 {
												 Pros_state = USB_MSC_VCP_Mode;               // Next State USB_MSC_Mode Mode
												 USB_Present_ = 0;                           // Reset Flag to avoid looping
												 SD_POWER_ON();               				// Power on SD CARD
 8000c9a:	f7ff ff43 	bl	8000b24 <SD_POWER_ON>
 8000c9e:	e78b      	b.n	8000bb8 <main+0x90>
						USB_Init_Start();            // Initialize USB and Stay USB mode as long as USB cable connected
 8000ca0:	f001 fc60 	bl	8002564 <USB_Init_Start>
  					    break;
 8000ca4:	e788      	b.n	8000bb8 <main+0x90>
					  	                        EnterStop();   // Enter Stop Mode
 8000ca6:	f002 fa2d 	bl	8003104 <EnterStop>
												if (USB_Present_ == 1)                     // After detecting USB attachment via EXTI_5 int
 8000caa:	782b      	ldrb	r3, [r5, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d1d1      	bne.n	8000c54 <main+0x12c>
												 Pros_state = USB_MSC_VCP_Mode;               // Next State USB_MSC_Mode Mode
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	7023      	strb	r3, [r4, #0]
												 USB_Present_ = 0;                           // Reset Flag to avoid looping
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	702b      	strb	r3, [r5, #0]
 8000cb8:	e7ef      	b.n	8000c9a <main+0x172>
 8000cba:	bf00      	nop
 8000cbc:	20008658 	.word	0x20008658
 8000cc0:	40002800 	.word	0x40002800
 8000cc4:	0800b51c 	.word	0x0800b51c
 8000cc8:	2000890c 	.word	0x2000890c
 8000ccc:	20000580 	.word	0x20000580
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	0800b522 	.word	0x0800b522
 8000cd8:	20008c98 	.word	0x20008c98
 8000cdc:	2000868c 	.word	0x2000868c
 8000ce0:	20008c74 	.word	0x20008c74
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	40009400 	.word	0x40009400
 8000cec:	20008681 	.word	0x20008681

08000cf0 <LPTIM2_IRQHandler>:
  return (READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == (LPTIM_ISR_ARRM));
 8000cf0:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <LPTIM2_IRQHandler+0xa4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]

}

void LPTIM2_IRQHandler(void)   // Response of 10ms LPTIM interrupt
{
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)	// auto reload match interrupt has occured
 8000cf4:	079b      	lsls	r3, r3, #30
{
 8000cf6:	b570      	push	{r4, r5, r6, lr}
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)	// auto reload match interrupt has occured
 8000cf8:	d543      	bpl.n	8000d82 <LPTIM2_IRQHandler+0x92>
	{
		if (Data_log_Start_Resume == 1)   // Sensor Start Flag from VCP command / FATFS SD card file
 8000cfa:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <LPTIM2_IRQHandler+0xa8>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d13a      	bne.n	8000d78 <LPTIM2_IRQHandler+0x88>
		{
			F_Sensor_ADC_Store();
 8000d02:	f001 f83d 	bl	8001d80 <F_Sensor_ADC_Store>
			Mag_Enc1_Store();
 8000d06:	f002 f869 	bl	8002ddc <Mag_Enc1_Store>
			Mag_Enc2_Store();
 8000d0a:	f002 f8ad 	bl	8002e68 <Mag_Enc2_Store>
			MPU_9D_store_IMU4_SPI3();
 8000d0e:	f001 fda5 	bl	800285c <MPU_9D_store_IMU4_SPI3>
			MPU_9D_store_IMU3_SPI2();
 8000d12:	f001 fe3f 	bl	8002994 <MPU_9D_store_IMU3_SPI2>
			MPU_9D_store_IMU1_SPI1();
 8000d16:	f001 fcfb 	bl	8002710 <MPU_9D_store_IMU1_SPI1>

			if (Sub_cnt == 5)
 8000d1a:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <LPTIM2_IRQHandler+0xac>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	2a05      	cmp	r2, #5
 8000d20:	d118      	bne.n	8000d54 <LPTIM2_IRQHandler+0x64>
			{

				BSbuffer[s_flag].RTC_Time = (uint32_t)(RTC->TR & 0x007F7F7F);
 8000d22:	4d1f      	ldr	r5, [pc, #124]	; (8000da0 <LPTIM2_IRQHandler+0xb0>)
 8000d24:	4c1f      	ldr	r4, [pc, #124]	; (8000da4 <LPTIM2_IRQHandler+0xb4>)
 8000d26:	7828      	ldrb	r0, [r5, #0]
 8000d28:	491f      	ldr	r1, [pc, #124]	; (8000da8 <LPTIM2_IRQHandler+0xb8>)
 8000d2a:	6822      	ldr	r2, [r4, #0]
 8000d2c:	eb01 3080 	add.w	r0, r1, r0, lsl #14
 8000d30:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 8000d34:	f643 76f8 	movw	r6, #16376	; 0x3ff8
 8000d38:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8000d3c:	5182      	str	r2, [r0, r6]
				BSbuffer[s_flag].RTC_Date= (uint32_t)(RTC->DR & 0x00FFFF3F);
 8000d3e:	7828      	ldrb	r0, [r5, #0]
 8000d40:	6862      	ldr	r2, [r4, #4]
 8000d42:	eb01 3180 	add.w	r1, r1, r0, lsl #14
 8000d46:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000d4a:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 8000d4e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000d52:	500a      	str	r2, [r1, r0]

			}

// Switching Buffer code starts here
			if(Sub_cnt==Highest_sensor_count)   // Total samples to be stored in a 16KB buffer
 8000d54:	6819      	ldr	r1, [r3, #0]
 8000d56:	f240 1207 	movw	r2, #263	; 0x107
 8000d5a:	4291      	cmp	r1, r2
 8000d5c:	d115      	bne.n	8000d8a <LPTIM2_IRQHandler+0x9a>
			{
				Sub_cnt=0;           // Reset Counter of sensor element
 8000d5e:	2100      	movs	r1, #0
 8000d60:	6019      	str	r1, [r3, #0]
				SD_write_Flag = 1;   // Flag set to write filled buffer content
 8000d62:	4b12      	ldr	r3, [pc, #72]	; (8000dac <LPTIM2_IRQHandler+0xbc>)
 8000d64:	4812      	ldr	r0, [pc, #72]	; (8000db0 <LPTIM2_IRQHandler+0xc0>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
				// Changing Buffer
				if (s_flag==0)       // if current storgae_buffer was 0
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <LPTIM2_IRQHandler+0xb0>)
 8000d6c:	781c      	ldrb	r4, [r3, #0]
 8000d6e:	f004 05ff 	and.w	r5, r4, #255	; 0xff
 8000d72:	b93c      	cbnz	r4, 8000d84 <LPTIM2_IRQHandler+0x94>
				{
					w_flag=0;            // write_buffer to be saved in SD card = 0
 8000d74:	7005      	strb	r5, [r0, #0]
					s_flag=1;            // current storgae_buffer is set 1
 8000d76:	701a      	strb	r2, [r3, #0]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <LPTIM2_IRQHandler+0xa4>)
 8000d7a:	6853      	ldr	r3, [r2, #4]
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	6053      	str	r3, [r2, #4]
 8000d82:	bd70      	pop	{r4, r5, r6, pc}
				}
				else                    // if current storgae_buffer was 1
				{
					w_flag=1;           // write_buffer to be saved in SD card = 1
 8000d84:	7002      	strb	r2, [r0, #0]
					s_flag=0;           // current storgae_buffer is set 0
 8000d86:	7019      	strb	r1, [r3, #0]
 8000d88:	e7f6      	b.n	8000d78 <LPTIM2_IRQHandler+0x88>
				}

			}
			else
			{
				Sub_cnt++;              // Increment Counter of sensor element
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	3201      	adds	r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	e7f2      	b.n	8000d78 <LPTIM2_IRQHandler+0x88>
 8000d92:	bf00      	nop
 8000d94:	40009400 	.word	0x40009400
 8000d98:	20008681 	.word	0x20008681
 8000d9c:	2000057c 	.word	0x2000057c
 8000da0:	20000581 	.word	0x20000581
 8000da4:	40002800 	.word	0x40002800
 8000da8:	200005c4 	.word	0x200005c4
 8000dac:	2000868c 	.word	0x2000868c
 8000db0:	20000000 	.word	0x20000000

08000db4 <EXTI9_5_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine));
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <EXTI9_5_IRQHandler+0x18>)
 8000db6:	695a      	ldr	r2, [r3, #20]

}

void EXTI9_5_IRQHandler(void)       // Interrupt from USB connectivity PIN PA9
{
if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8000db8:	0592      	lsls	r2, r2, #22
 8000dba:	d505      	bpl.n	8000dc8 <EXTI9_5_IRQHandler+0x14>
{
USB_Present_=1;         // USB present
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <EXTI9_5_IRQHandler+0x1c>)
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	7011      	strb	r1, [r2, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc6:	615a      	str	r2, [r3, #20]
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40010400 	.word	0x40010400
 8000dd0:	20000580 	.word	0x20000580

08000dd4 <NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd4:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000dd8:	4905      	ldr	r1, [pc, #20]	; (8000df0 <NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ddc:	68ca      	ldr	r2, [r1, #12]
 8000dde:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000de2:	4313      	orrs	r3, r2
 8000de4:	60cb      	str	r3, [r1, #12]
 8000de6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8000dea:	bf00      	nop
 8000dec:	e7fd      	b.n	8000dea <NVIC_SystemReset+0x16>
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00
 8000df4:	05fa0004 	.word	0x05fa0004

08000df8 <LL_ADC_REG_StartConversion>:
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000df8:	6883      	ldr	r3, [r0, #8]
 8000dfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000dfe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6083      	str	r3, [r0, #8]
 8000e08:	4770      	bx	lr
	...

08000e0c <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <LL_AHB2_GRP1_EnableClock+0x18>)
 8000e0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e10:	4302      	orrs	r2, r0
 8000e12:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8000e16:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e18:	4018      	ands	r0, r3
 8000e1a:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000e1c:	9b01      	ldr	r3, [sp, #4]
}
 8000e1e:	b002      	add	sp, #8
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000

08000e28 <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <LL_APB2_GRP1_EnableClock+0x18>)
 8000e2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e2c:	4302      	orrs	r2, r0
 8000e2e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 8000e32:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e34:	4018      	ands	r0, r3
 8000e36:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8000e38:	9b01      	ldr	r3, [sp, #4]
}
 8000e3a:	b002      	add	sp, #8
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40021000 	.word	0x40021000

08000e44 <LL_GPIO_SetPinMode>:
{
 8000e44:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000e46:	6803      	ldr	r3, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e48:	fa91 f4a1 	rbit	r4, r1
 8000e4c:	fab4 f484 	clz	r4, r4
 8000e50:	fa91 f1a1 	rbit	r1, r1
 8000e54:	2503      	movs	r5, #3
 8000e56:	fab1 f181 	clz	r1, r1
 8000e5a:	0064      	lsls	r4, r4, #1
 8000e5c:	fa05 f404 	lsl.w	r4, r5, r4
 8000e60:	0049      	lsls	r1, r1, #1
 8000e62:	ea23 0304 	bic.w	r3, r3, r4
 8000e66:	fa02 f101 	lsl.w	r1, r2, r1
 8000e6a:	4319      	orrs	r1, r3
 8000e6c:	6001      	str	r1, [r0, #0]
 8000e6e:	bd30      	pop	{r4, r5, pc}

08000e70 <LL_ADC_REG_SetSequencerRanks>:
{
 8000e70:	b530      	push	{r4, r5, lr}
 8000e72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e76:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000e7a:	fab3 f383 	clz	r3, r3
 8000e7e:	f401 7440 	and.w	r4, r1, #768	; 0x300
 8000e82:	40dc      	lsrs	r4, r3
 8000e84:	3030      	adds	r0, #48	; 0x30
  MODIFY_REG(*preg,
 8000e86:	f001 011f 	and.w	r1, r1, #31
 8000e8a:	231f      	movs	r3, #31
 8000e8c:	fa03 f501 	lsl.w	r5, r3, r1
 8000e90:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8000e94:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000e98:	f1c1 011a 	rsb	r1, r1, #26
 8000e9c:	ea23 0305 	bic.w	r3, r3, r5
 8000ea0:	fa22 f101 	lsr.w	r1, r2, r1
 8000ea4:	4319      	orrs	r1, r3
 8000ea6:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 8000eaa:	bd30      	pop	{r4, r5, pc}

08000eac <LL_ADC_SetChannelSamplingTime>:
{
 8000eac:	b570      	push	{r4, r5, r6, lr}
 8000eae:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000eb2:	fa96 f6a6 	rbit	r6, r6
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000eb6:	fab6 f386 	clz	r3, r6
 8000eba:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 8000ebe:	40de      	lsrs	r6, r3
 8000ec0:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 8000ec2:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8000ec6:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8000eca:	fa93 f5a3 	rbit	r5, r3
 8000ece:	fab5 f585 	clz	r5, r5
 8000ed2:	fa93 f3a3 	rbit	r3, r3
 8000ed6:	2407      	movs	r4, #7
 8000ed8:	fa21 f505 	lsr.w	r5, r1, r5
 8000edc:	fa04 f505 	lsl.w	r5, r4, r5
 8000ee0:	fab3 f383 	clz	r3, r3
 8000ee4:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8000ee8:	40d9      	lsrs	r1, r3
 8000eea:	ea24 0405 	bic.w	r4, r4, r5
 8000eee:	fa02 f101 	lsl.w	r1, r2, r1
 8000ef2:	4321      	orrs	r1, r4
 8000ef4:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 8000ef8:	bd70      	pop	{r4, r5, r6, pc}

08000efa <LL_GPIO_SetAFPin_0_7>:
{
 8000efa:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000efc:	6a03      	ldr	r3, [r0, #32]
 8000efe:	fa91 f4a1 	rbit	r4, r1
 8000f02:	fab4 f484 	clz	r4, r4
 8000f06:	fa91 f1a1 	rbit	r1, r1
 8000f0a:	250f      	movs	r5, #15
 8000f0c:	fab1 f181 	clz	r1, r1
 8000f10:	00a4      	lsls	r4, r4, #2
 8000f12:	fa05 f404 	lsl.w	r4, r5, r4
 8000f16:	0089      	lsls	r1, r1, #2
 8000f18:	ea23 0304 	bic.w	r3, r3, r4
 8000f1c:	fa02 f101 	lsl.w	r1, r2, r1
 8000f20:	4319      	orrs	r1, r3
 8000f22:	6201      	str	r1, [r0, #32]
 8000f24:	bd30      	pop	{r4, r5, pc}

08000f26 <LL_GPIO_SetPinPull>:
{
 8000f26:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000f28:	68c3      	ldr	r3, [r0, #12]
 8000f2a:	fa91 f4a1 	rbit	r4, r1
 8000f2e:	fab4 f484 	clz	r4, r4
 8000f32:	fa91 f1a1 	rbit	r1, r1
 8000f36:	2503      	movs	r5, #3
 8000f38:	fab1 f181 	clz	r1, r1
 8000f3c:	0064      	lsls	r4, r4, #1
 8000f3e:	fa05 f404 	lsl.w	r4, r5, r4
 8000f42:	0049      	lsls	r1, r1, #1
 8000f44:	ea23 0304 	bic.w	r3, r3, r4
 8000f48:	fa02 f101 	lsl.w	r1, r2, r1
 8000f4c:	4319      	orrs	r1, r3
 8000f4e:	60c1      	str	r1, [r0, #12]
 8000f50:	bd30      	pop	{r4, r5, pc}

08000f52 <LL_GPIO_SetPinSpeed.constprop.6>:
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 8000f52:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000f54:	6882      	ldr	r2, [r0, #8]
 8000f56:	fa91 f3a1 	rbit	r3, r1
 8000f5a:	fab3 f383 	clz	r3, r3
 8000f5e:	fa91 f1a1 	rbit	r1, r1
 8000f62:	2403      	movs	r4, #3
 8000f64:	fab1 f181 	clz	r1, r1
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa04 f303 	lsl.w	r3, r4, r3
 8000f6e:	0049      	lsls	r1, r1, #1
 8000f70:	ea22 0303 	bic.w	r3, r2, r3
 8000f74:	fa04 f101 	lsl.w	r1, r4, r1
 8000f78:	4319      	orrs	r1, r3
 8000f7a:	6081      	str	r1, [r0, #8]
 8000f7c:	bd10      	pop	{r4, pc}
	...

08000f80 <LL_RTC_DATE_GetDay.constprop.8>:
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetDay(RTC_TypeDef *RTCx)
{
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <LL_RTC_DATE_GetDay.constprop.8+0x2c>)
 8000f82:	2030      	movs	r0, #48	; 0x30
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	fa90 f0a0 	rbit	r0, r0
 8000f8a:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 8000f8c:	fab0 f080 	clz	r0, r0
 8000f90:	fa92 f2a2 	rbit	r2, r2
 8000f94:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8000f98:	fab2 f282 	clz	r2, r2
 8000f9c:	f003 030f 	and.w	r3, r3, #15
 8000fa0:	fa21 f000 	lsr.w	r0, r1, r0
 8000fa4:	40d3      	lsrs	r3, r2
}
 8000fa6:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8000faa:	4770      	bx	lr
 8000fac:	40002800 	.word	0x40002800

08000fb0 <LL_RTC_DATE_GetMonth.constprop.9>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <LL_RTC_DATE_GetMonth.constprop.9+0x30>)
 8000fb2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	fa90 f0a0 	rbit	r0, r0
 8000fbc:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 8000fc0:	fab0 f080 	clz	r0, r0
 8000fc4:	fa92 f2a2 	rbit	r2, r2
 8000fc8:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 8000fcc:	fab2 f282 	clz	r2, r2
 8000fd0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000fd4:	fa21 f000 	lsr.w	r0, r1, r0
 8000fd8:	40d3      	lsrs	r3, r2
}
 8000fda:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8000fde:	4770      	bx	lr
 8000fe0:	40002800 	.word	0x40002800

08000fe4 <LL_RTC_DATE_GetYear.constprop.10>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <LL_RTC_DATE_GetYear.constprop.10+0x30>)
 8000fe6:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	fa90 f0a0 	rbit	r0, r0
 8000ff0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 8000ff4:	fab0 f080 	clz	r0, r0
 8000ff8:	fa92 f2a2 	rbit	r2, r2
 8000ffc:	f403 0170 	and.w	r1, r3, #15728640	; 0xf00000
 8001000:	fab2 f282 	clz	r2, r2
 8001004:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001008:	fa21 f000 	lsr.w	r0, r1, r0
 800100c:	40d3      	lsrs	r3, r2
}
 800100e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8001012:	4770      	bx	lr
 8001014:	40002800 	.word	0x40002800

08001018 <LL_RTC_TIME_GetSecond.constprop.11>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <LL_RTC_TIME_GetSecond.constprop.11+0x2c>)
 800101a:	2070      	movs	r0, #112	; 0x70
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	fa90 f0a0 	rbit	r0, r0
 8001022:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 8001024:	fab0 f080 	clz	r0, r0
 8001028:	fa92 f2a2 	rbit	r2, r2
 800102c:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8001030:	fab2 f282 	clz	r2, r2
 8001034:	f003 030f 	and.w	r3, r3, #15
 8001038:	fa21 f000 	lsr.w	r0, r1, r0
 800103c:	40d3      	lsrs	r3, r2
}
 800103e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8001042:	4770      	bx	lr
 8001044:	40002800 	.word	0x40002800

08001048 <LL_RTC_TIME_GetMinute.constprop.12>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <LL_RTC_TIME_GetMinute.constprop.12+0x30>)
 800104a:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	fa90 f0a0 	rbit	r0, r0
 8001054:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 8001058:	fab0 f080 	clz	r0, r0
 800105c:	fa92 f2a2 	rbit	r2, r2
 8001060:	f403 41e0 	and.w	r1, r3, #28672	; 0x7000
 8001064:	fab2 f282 	clz	r2, r2
 8001068:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800106c:	fa21 f000 	lsr.w	r0, r1, r0
 8001070:	40d3      	lsrs	r3, r2
}
 8001072:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8001076:	4770      	bx	lr
 8001078:	40002800 	.word	0x40002800

0800107c <LL_RTC_TIME_GetHour.constprop.13>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <LL_RTC_TIME_GetHour.constprop.13+0x30>)
 800107e:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	fa90 f0a0 	rbit	r0, r0
 8001088:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 800108c:	fab0 f080 	clz	r0, r0
 8001090:	fa92 f2a2 	rbit	r2, r2
 8001094:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
 8001098:	fab2 f282 	clz	r2, r2
 800109c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80010a0:	fa21 f000 	lsr.w	r0, r1, r0
 80010a4:	40d3      	lsrs	r3, r2
}
 80010a6:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 80010aa:	4770      	bx	lr
 80010ac:	40002800 	.word	0x40002800

080010b0 <Power_on_reset>:

}


void Power_on_reset(void)
{
 80010b0:	b508      	push	{r3, lr}
	  if (*Reset_Ram_Key_Address != Reset_Key_Value)
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <Power_on_reset+0x14>)
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <Power_on_reset+0x18>)
 80010b6:	6819      	ldr	r1, [r3, #0]
 80010b8:	4291      	cmp	r1, r2
 80010ba:	d002      	beq.n	80010c2 <Power_on_reset+0x12>
	  {
	      *Reset_Ram_Key_Address = Reset_Key_Value;
 80010bc:	601a      	str	r2, [r3, #0]
		   NVIC_SystemReset();
 80010be:	f7ff fe89 	bl	8000dd4 <NVIC_SystemReset>
 80010c2:	bd08      	pop	{r3, pc}
 80010c4:	20017ef0 	.word	0x20017ef0
 80010c8:	deadbeef 	.word	0xdeadbeef

080010cc <Configure_Interrupt>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <Configure_Interrupt+0x2c>)
 80010ce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010d4:	041b      	lsls	r3, r3, #16
 80010d6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
 80010d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80010e0:	60d3      	str	r3, [r2, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <Configure_Interrupt+0x30>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
 80010ea:	2220      	movs	r2, #32
 80010ec:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
 80010f0:	2210      	movs	r2, #16
 80010f2:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00
 80010fc:	e000e100 	.word	0xe000e100

08001100 <Shut_Down_USB>:
  * @rmtoll CR2          USV           LL_PWR_DisableVddUSB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableVddUSB(void)
{
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 8001100:	4a0a      	ldr	r2, [pc, #40]	; (800112c <Shut_Down_USB+0x2c>)
 8001102:	6853      	ldr	r3, [r2, #4]
		f_mount(0, "", 0); 		                //  unmount FATFS file (of running sensor storage file)
		FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
}

void Shut_Down_USB(void)
{
 8001104:	b510      	push	{r4, lr}
 8001106:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

	LL_PWR_DisableVddUSB();                               // Disable VDDUSB supply for USB
	USB_Present_=0;                                      // reset the USB present flag to be set by EXTI interrupt

	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 800110a:	4c09      	ldr	r4, [pc, #36]	; (8001130 <Shut_Down_USB+0x30>)
 800110c:	6053      	str	r3, [r2, #4]
	USB_Present_=0;                                      // reset the USB present flag to be set by EXTI interrupt
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <Shut_Down_USB+0x34>)
 8001110:	2200      	movs	r2, #0
	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 8001112:	4620      	mov	r0, r4
	USB_Present_=0;                                      // reset the USB present flag to be set by EXTI interrupt
 8001114:	701a      	strb	r2, [r3, #0]
	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 8001116:	f007 f8d8 	bl	80082ca <USBD_Stop>
	USBD_DeInit(&USBD_Device);               // De-Initialize the device library
 800111a:	4620      	mov	r0, r4
 800111c:	f007 f8b7 	bl	800828e <USBD_DeInit>
	__HAL_RCC_USB_OTG_FS_CLK_DISABLE();      // Disable USB Clock
 8001120:	4a05      	ldr	r2, [pc, #20]	; (8001138 <Shut_Down_USB+0x38>)
 8001122:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001124:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	bd10      	pop	{r4, pc}
 800112c:	40007000 	.word	0x40007000
 8001130:	200086a4 	.word	0x200086a4
 8001134:	20000580 	.word	0x20000580
 8001138:	40021000 	.word	0x40021000

0800113c <USB_Clock_Ready>:
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <USB_Clock_Ready+0x2c>)
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
}


void USB_Clock_Ready(void)
{
 8001144:	b082      	sub	sp, #8
 8001146:	605a      	str	r2, [r3, #4]
  * @rmtoll CR2          USV           LL_PWR_IsEnabledVddUSB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledVddUSB(void)
{
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 8001148:	685a      	ldr	r2, [r3, #4]
	LL_PWR_EnableVddUSB();                                  // Enable VDDUSB supply for USB
		while(!LL_PWR_IsEnabledVddUSB());                       // Wait for VDDUSB supply to activate
 800114a:	0552      	lsls	r2, r2, #21
 800114c:	d5fc      	bpl.n	8001148 <USB_Clock_Ready+0xc>
		__HAL_RCC_USB_OTG_FS_CLK_ENABLE();     // Enable USB Clock
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <USB_Clock_Ready+0x30>)
 8001150:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001152:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001156:	64da      	str	r2, [r3, #76]	; 0x4c
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	9b01      	ldr	r3, [sp, #4]
}
 8001162:	b002      	add	sp, #8
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40007000 	.word	0x40007000
 800116c:	40021000 	.word	0x40021000

08001170 <DFU_Bypass>:
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001170:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
void DFU_Bypass(void)
{

	uint32_t i=0;

    check=LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY);
 8001174:	4810      	ldr	r0, [pc, #64]	; (80011b8 <DFU_Bypass+0x48>)
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	f402 7100 	and.w	r1, r2, #512	; 0x200
 800117c:	f3c2 2240 	ubfx	r2, r2, #9, #1
{
 8001180:	b570      	push	{r4, r5, r6, lr}
    check=LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY);
 8001182:	6002      	str	r2, [r0, #0]
 8001184:	691a      	ldr	r2, [r3, #16]
   // if(check == 1)
    //	 CYAN_LED_ONLY();
    while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));  // Wait until USB cable disconnect from Charger
 8001186:	0592      	lsls	r2, r2, #22
 8001188:	d4fc      	bmi.n	8001184 <DFU_Bypass+0x14>
	  if (*LP_Ram_Key_Address != Reset_Key_Value)
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <DFU_Bypass+0x4c>)
 800118c:	4c0c      	ldr	r4, [pc, #48]	; (80011c0 <DFU_Bypass+0x50>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	42a2      	cmp	r2, r4
 8001192:	d010      	beq.n	80011b6 <DFU_Bypass+0x46>
	  {
	      *LP_Ram_Key_Address = Reset_Key_Value;
 8001194:	601c      	str	r4, [r3, #0]
    if(check == 1)
 8001196:	b171      	cbz	r1, 80011b6 <DFU_Bypass+0x46>
 8001198:	2505      	movs	r5, #5
 800119a:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
    {
	  /* Toggle IO in during 2s (10*200ms) */
	  for(i =0; i<5; i++)
	  {
	 //   LL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
	    LL_mDelay(200);
 800119e:	20c8      	movs	r0, #200	; 0xc8
 80011a0:	f006 fbd4 	bl	800794c <LL_mDelay>
 80011a4:	6933      	ldr	r3, [r6, #16]
	    if (LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY))
 80011a6:	059b      	lsls	r3, r3, #22
 80011a8:	d503      	bpl.n	80011b2 <DFU_Bypass+0x42>
	    {
	    	 *Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <DFU_Bypass+0x54>)
 80011ac:	601c      	str	r4, [r3, #0]
	    	  NVIC_SystemReset();        // System reset
 80011ae:	f7ff fe11 	bl	8000dd4 <NVIC_SystemReset>
	  for(i =0; i<5; i++)
 80011b2:	3d01      	subs	r5, #1
 80011b4:	d1f3      	bne.n	800119e <DFU_Bypass+0x2e>
 80011b6:	bd70      	pop	{r4, r5, r6, pc}
 80011b8:	20008a28 	.word	0x20008a28
 80011bc:	20017cf0 	.word	0x20017cf0
 80011c0:	deadbeef 	.word	0xdeadbeef
 80011c4:	20017ff0 	.word	0x20017ff0

080011c8 <Prepare_Goto_Dormant_Mode>:
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 80011c8:	4a03      	ldr	r2, [pc, #12]	; (80011d8 <Prepare_Goto_Dormant_Mode+0x10>)
 80011ca:	6893      	ldr	r3, [r2, #8]
 80011cc:	f023 0302 	bic.w	r3, r3, #2
 80011d0:	6093      	str	r3, [r2, #8]


void Prepare_Goto_Dormant_Mode(void)
{
	LL_LPTIM_DisableIT_ARRM(LPTIM2);                           // Disable auto reload match interrupt of LPTIM2
	SD_POWER_OFF();               // Power off SD CARD
 80011d2:	f7ff bca8 	b.w	8000b26 <SD_POWER_OFF>
 80011d6:	bf00      	nop
 80011d8:	40009400 	.word	0x40009400

080011dc <Reset_Variables_for_LowBattery>:

}

void Reset_Variables_for_LowBattery(void)          // Reset all variables needed to Sensor logging in Double Buffer System
{
 80011dc:	b508      	push	{r3, lr}

	SD_write_Flag = 0;
 80011de:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <Reset_Variables_for_LowBattery+0xc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
#ifdef Bottle_Device
  //ALL_LED_OFF();
#else
  NVIC_SystemReset();
 80011e4:	f7ff fdf6 	bl	8000dd4 <NVIC_SystemReset>
 80011e8:	2000868c 	.word	0x2000868c

080011ec <GetNextIndex>:

}


int GetNextIndex(char *path)  // Read SD card content to save next value in auto increment format
{
 80011ec:	b530      	push	{r4, r5, lr}
 80011ee:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
DIR dir;
FILINFO fno;
int i, index = -1;

if (f_opendir(&dir, path) == FR_OK)
 80011f2:	4601      	mov	r1, r0
 80011f4:	a808      	add	r0, sp, #32
 80011f6:	f008 fed2 	bl	8009f9e <f_opendir>
 80011fa:	f04f 34ff 	mov.w	r4, #4294967295
 80011fe:	b9e0      	cbnz	r0, 800123a <GetNextIndex+0x4e>
while(1)
{
  if ((f_readdir(&dir,  &fno) !=  FR_OK) || (fno.fname[0] == 0))
    break;

  if ((strstr(fno.fname, ".BIN") != NULL) && (sscanf(fno.fname, "%d", &i) == 1))   // Searcing for .BIN file and determining highest index
 8001200:	4d10      	ldr	r5, [pc, #64]	; (8001244 <GetNextIndex+0x58>)
  if ((f_readdir(&dir,  &fno) !=  FR_OK) || (fno.fname[0] == 0))
 8001202:	a902      	add	r1, sp, #8
 8001204:	a808      	add	r0, sp, #32
 8001206:	f008 ff18 	bl	800a03a <f_readdir>
 800120a:	b9b0      	cbnz	r0, 800123a <GetNextIndex+0x4e>
 800120c:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8001210:	b19b      	cbz	r3, 800123a <GetNextIndex+0x4e>
  if ((strstr(fno.fname, ".BIN") != NULL) && (sscanf(fno.fname, "%d", &i) == 1))   // Searcing for .BIN file and determining highest index
 8001212:	4629      	mov	r1, r5
 8001214:	f10d 0011 	add.w	r0, sp, #17
 8001218:	f009 f952 	bl	800a4c0 <strstr>
 800121c:	2800      	cmp	r0, #0
 800121e:	d0f0      	beq.n	8001202 <GetNextIndex+0x16>
 8001220:	aa01      	add	r2, sp, #4
 8001222:	4909      	ldr	r1, [pc, #36]	; (8001248 <GetNextIndex+0x5c>)
 8001224:	f10d 0011 	add.w	r0, sp, #17
 8001228:	f009 f916 	bl	800a458 <siscanf>
 800122c:	2801      	cmp	r0, #1
 800122e:	d1e8      	bne.n	8001202 <GetNextIndex+0x16>
 8001230:	9b01      	ldr	r3, [sp, #4]
 8001232:	429c      	cmp	r4, r3
 8001234:	bfb8      	it	lt
 8001236:	461c      	movlt	r4, r3
 8001238:	e7e3      	b.n	8001202 <GetNextIndex+0x16>
    if (i > index) index = i;
}
}
return(index+1);
}
 800123a:	1c60      	adds	r0, r4, #1
 800123c:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8001240:	bd30      	pop	{r4, r5, pc}
 8001242:	bf00      	nop
 8001244:	0800b557 	.word	0x0800b557
 8001248:	0800b550 	.word	0x0800b550

0800124c <Try_FATFS_Mount>:
	return 0;
}

void Try_FATFS_Mount(void)
{
	  if (Fat_mnt_fail == 1)
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <Try_FATFS_Mount+0x44>)
{
 800124e:	b510      	push	{r4, lr}
	  if (Fat_mnt_fail == 1)
 8001250:	681c      	ldr	r4, [r3, #0]
 8001252:	2c01      	cmp	r4, #1
 8001254:	d11a      	bne.n	800128c <Try_FATFS_Mount+0x40>
	  {
		  Fat_mnt_fail=0;
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
		  SD_POWER_OFF();
 800125a:	f7ff fc64 	bl	8000b26 <SD_POWER_OFF>
		  delay_us(10000); // wait 10 msec
 800125e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001262:	f001 ff23 	bl	80030ac <delay_us>
		  SD_POWER_ON();
 8001266:	f7ff fc5d 	bl	8000b24 <SD_POWER_ON>
		  delay_us(1000000); // wait 1 sec
 800126a:	480a      	ldr	r0, [pc, #40]	; (8001294 <Try_FATFS_Mount+0x48>)
 800126c:	f001 ff1e 	bl	80030ac <delay_us>
		  //Retry FATFS link

		  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8001270:	4909      	ldr	r1, [pc, #36]	; (8001298 <Try_FATFS_Mount+0x4c>)
 8001272:	480a      	ldr	r0, [pc, #40]	; (800129c <Try_FATFS_Mount+0x50>)
 8001274:	f008 ffa8 	bl	800a1c8 <FATFS_LinkDriver>
 8001278:	b928      	cbnz	r0, 8001286 <Try_FATFS_Mount+0x3a>
		 		{
		 			 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 800127a:	4622      	mov	r2, r4
 800127c:	4906      	ldr	r1, [pc, #24]	; (8001298 <Try_FATFS_Mount+0x4c>)
 800127e:	4808      	ldr	r0, [pc, #32]	; (80012a0 <Try_FATFS_Mount+0x54>)
 8001280:	f008 fad0 	bl	8009824 <f_mount>
 8001284:	b110      	cbz	r0, 800128c <Try_FATFS_Mount+0x40>
		 			 {
		 				Skip_FATFS=1;
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <Try_FATFS_Mount+0x58>)
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]
 800128c:	bd10      	pop	{r4, pc}
 800128e:	bf00      	nop
 8001290:	20008940 	.word	0x20008940
 8001294:	000f4240 	.word	0x000f4240
 8001298:	20008a35 	.word	0x20008a35
 800129c:	0800b7bc 	.word	0x0800b7bc
 80012a0:	20008a44 	.word	0x20008a44
 80012a4:	20008c99 	.word	0x20008c99

080012a8 <file_reopen_sync>:
	  }

}

void file_reopen_sync(void)
{
 80012a8:	b508      	push	{r3, lr}
	f_close(&MyFile);
 80012aa:	4807      	ldr	r0, [pc, #28]	; (80012c8 <file_reopen_sync+0x20>)
 80012ac:	f008 fd17 	bl	8009cde <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 80012b0:	2212      	movs	r2, #18
 80012b2:	4906      	ldr	r1, [pc, #24]	; (80012cc <file_reopen_sync+0x24>)
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <file_reopen_sync+0x20>)
 80012b6:	f008 faeb 	bl	8009890 <f_open>
	if(res != FR_OK)
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <file_reopen_sync+0x28>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b113      	cbz	r3, 80012c6 <file_reopen_sync+0x1e>
						{
							Fat_sync_read_fail=1;
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <file_reopen_sync+0x2c>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	bd08      	pop	{r3, pc}
 80012c8:	20008ca4 	.word	0x20008ca4
 80012cc:	20008988 	.word	0x20008988
 80012d0:	20008f26 	.word	0x20008f26
 80012d4:	20008948 	.word	0x20008948

080012d8 <file_reopen>:
						}
}

void file_reopen(void)
{
 80012d8:	b508      	push	{r3, lr}
	f_close(&MyFile);
 80012da:	4807      	ldr	r0, [pc, #28]	; (80012f8 <file_reopen+0x20>)
 80012dc:	f008 fcff 	bl	8009cde <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 80012e0:	2212      	movs	r2, #18
 80012e2:	4906      	ldr	r1, [pc, #24]	; (80012fc <file_reopen+0x24>)
 80012e4:	4804      	ldr	r0, [pc, #16]	; (80012f8 <file_reopen+0x20>)
 80012e6:	f008 fad3 	bl	8009890 <f_open>
	if(res != FR_OK)
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <file_reopen+0x28>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b113      	cbz	r3, 80012f6 <file_reopen+0x1e>
						{
							Fat_write_read_fail=1;
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <file_reopen+0x2c>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	bd08      	pop	{r3, pc}
 80012f8:	20008ca4 	.word	0x20008ca4
 80012fc:	20008988 	.word	0x20008988
 8001300:	20008f26 	.word	0x20008f26
 8001304:	20008944 	.word	0x20008944

08001308 <file_mnt_reopen>:
						}
}

void file_mnt_reopen(void)
{
 8001308:	b508      	push	{r3, lr}
	  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 800130a:	490c      	ldr	r1, [pc, #48]	; (800133c <file_mnt_reopen+0x34>)
 800130c:	480c      	ldr	r0, [pc, #48]	; (8001340 <file_mnt_reopen+0x38>)
 800130e:	f008 ff5b 	bl	800a1c8 <FATFS_LinkDriver>
 8001312:	b928      	cbnz	r0, 8001320 <file_mnt_reopen+0x18>
		{
			 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 8001314:	2201      	movs	r2, #1
 8001316:	4909      	ldr	r1, [pc, #36]	; (800133c <file_mnt_reopen+0x34>)
 8001318:	480a      	ldr	r0, [pc, #40]	; (8001344 <file_mnt_reopen+0x3c>)
 800131a:	f008 fa83 	bl	8009824 <f_mount>
 800131e:	b118      	cbz	r0, 8001328 <file_mnt_reopen+0x20>
			 {
				 Fat_read_mnt_fail=1;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <file_mnt_reopen+0x40>)
 8001322:	2201      	movs	r2, #1
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	bd08      	pop	{r3, pc}
			 }
			 else  // Good to Go
			 {
				 res= f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8001328:	2212      	movs	r2, #18
 800132a:	4908      	ldr	r1, [pc, #32]	; (800134c <file_mnt_reopen+0x44>)
 800132c:	4808      	ldr	r0, [pc, #32]	; (8001350 <file_mnt_reopen+0x48>)
 800132e:	f008 faaf 	bl	8009890 <f_open>
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <file_mnt_reopen+0x4c>)
 8001334:	7018      	strb	r0, [r3, #0]
					if(res != FR_OK)
 8001336:	2800      	cmp	r0, #0
 8001338:	d1f2      	bne.n	8001320 <file_mnt_reopen+0x18>
 800133a:	bd08      	pop	{r3, pc}
 800133c:	20008a35 	.word	0x20008a35
 8001340:	0800b7bc 	.word	0x0800b7bc
 8001344:	20008a44 	.word	0x20008a44
 8001348:	200089ec 	.word	0x200089ec
 800134c:	20008988 	.word	0x20008988
 8001350:	20008ca4 	.word	0x20008ca4
 8001354:	20008f26 	.word	0x20008f26

08001358 <FATFS_Logstart_Delete>:
		 delay_us(100);
			 }
}

void FATFS_Logstart_Delete(void)
{
 8001358:	b508      	push	{r3, lr}

  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 800135a:	490d      	ldr	r1, [pc, #52]	; (8001390 <FATFS_Logstart_Delete+0x38>)
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <FATFS_Logstart_Delete+0x3c>)
 800135e:	f008 ff33 	bl	800a1c8 <FATFS_LinkDriver>
 8001362:	b958      	cbnz	r0, 800137c <FATFS_Logstart_Delete+0x24>
	{
		 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 8001364:	2201      	movs	r2, #1
 8001366:	490a      	ldr	r1, [pc, #40]	; (8001390 <FATFS_Logstart_Delete+0x38>)
 8001368:	480b      	ldr	r0, [pc, #44]	; (8001398 <FATFS_Logstart_Delete+0x40>)
 800136a:	f008 fa5b 	bl	8009824 <f_mount>
 800136e:	b910      	cbnz	r0, 8001376 <FATFS_Logstart_Delete+0x1e>
	//		 RED_LED_ON();
		 }

    	 else
			 {
			  if (f_unlink ("LogStart.txt") == FR_OK) {    // If LogStart.txt file present, delete the file
 8001370:	480a      	ldr	r0, [pc, #40]	; (800139c <FATFS_Logstart_Delete+0x44>)
 8001372:	f008 fe8d 	bl	800a090 <f_unlink>
					  }
			 }
		 delay_us(100);
 8001376:	2064      	movs	r0, #100	; 0x64
 8001378:	f001 fe98 	bl	80030ac <delay_us>
			 }
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 800137c:	2200      	movs	r2, #0
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <FATFS_Logstart_Delete+0x48>)
 8001380:	4610      	mov	r0, r2
 8001382:	f008 fa4f 	bl	8009824 <f_mount>
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 8001386:	4802      	ldr	r0, [pc, #8]	; (8001390 <FATFS_Logstart_Delete+0x38>)
}
 8001388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 800138c:	f008 bf38 	b.w	800a200 <FATFS_UnLinkDriver>
 8001390:	20008a35 	.word	0x20008a35
 8001394:	0800b7bc 	.word	0x0800b7bc
 8001398:	20008a44 	.word	0x20008a44
 800139c:	0800b543 	.word	0x0800b543
 80013a0:	0800b6e7 	.word	0x0800b6e7

080013a4 <FATFS_Logstart_Ready>:

void FATFS_Logstart_Ready(void)
{
 80013a4:	b508      	push	{r3, lr}

  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 80013a6:	4910      	ldr	r1, [pc, #64]	; (80013e8 <FATFS_Logstart_Ready+0x44>)
 80013a8:	4810      	ldr	r0, [pc, #64]	; (80013ec <FATFS_Logstart_Ready+0x48>)
 80013aa:	f008 ff0d 	bl	800a1c8 <FATFS_LinkDriver>
 80013ae:	b988      	cbnz	r0, 80013d4 <FATFS_Logstart_Ready+0x30>
	{
		 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 80013b0:	2201      	movs	r2, #1
 80013b2:	490d      	ldr	r1, [pc, #52]	; (80013e8 <FATFS_Logstart_Ready+0x44>)
 80013b4:	480e      	ldr	r0, [pc, #56]	; (80013f0 <FATFS_Logstart_Ready+0x4c>)
 80013b6:	f008 fa35 	bl	8009824 <f_mount>
 80013ba:	b940      	cbnz	r0, 80013ce <FATFS_Logstart_Ready+0x2a>

		 }

    	 else
			 {
			 if(f_open(&MyFile, "LogStart.txt", FA_OPEN_ALWAYS | FA_WRITE) != FR_OK) // Create and Open a new text file object with write access
 80013bc:	2212      	movs	r2, #18
 80013be:	490d      	ldr	r1, [pc, #52]	; (80013f4 <FATFS_Logstart_Ready+0x50>)
 80013c0:	480d      	ldr	r0, [pc, #52]	; (80013f8 <FATFS_Logstart_Ready+0x54>)
 80013c2:	f008 fa65 	bl	8009890 <f_open>
 80013c6:	b910      	cbnz	r0, 80013ce <FATFS_Logstart_Ready+0x2a>

				 }
				 else
				 {

					f_close(&MyFile);
 80013c8:	480b      	ldr	r0, [pc, #44]	; (80013f8 <FATFS_Logstart_Ready+0x54>)
 80013ca:	f008 fc88 	bl	8009cde <f_close>
				 }
			 }
		 delay_us(100);
 80013ce:	2064      	movs	r0, #100	; 0x64
 80013d0:	f001 fe6c 	bl	80030ac <delay_us>
			 }
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 80013d4:	2200      	movs	r2, #0
 80013d6:	4909      	ldr	r1, [pc, #36]	; (80013fc <FATFS_Logstart_Ready+0x58>)
 80013d8:	4610      	mov	r0, r2
 80013da:	f008 fa23 	bl	8009824 <f_mount>
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 80013de:	4802      	ldr	r0, [pc, #8]	; (80013e8 <FATFS_Logstart_Ready+0x44>)
}
 80013e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 80013e4:	f008 bf0c 	b.w	800a200 <FATFS_UnLinkDriver>
 80013e8:	20008a35 	.word	0x20008a35
 80013ec:	0800b7bc 	.word	0x0800b7bc
 80013f0:	20008a44 	.word	0x20008a44
 80013f4:	0800b543 	.word	0x0800b543
 80013f8:	20008ca4 	.word	0x20008ca4
 80013fc:	0800b6e7 	.word	0x0800b6e7

08001400 <USB_MSC_Init_Start>:
	 }
#endif
}

void USB_MSC_Init_Start(void)                                 // Initialize USB MSC mode
{
 8001400:	b510      	push	{r4, lr}
	USBD_Init(&USBD_Device, &MSC_Desc, 0);                   // USB MSC initialization
 8001402:	4c0b      	ldr	r4, [pc, #44]	; (8001430 <USB_MSC_Init_Start+0x30>)
 8001404:	490b      	ldr	r1, [pc, #44]	; (8001434 <USB_MSC_Init_Start+0x34>)
 8001406:	2200      	movs	r2, #0
 8001408:	4620      	mov	r0, r4
 800140a:	f006 ff24 	bl	8008256 <USBD_Init>
	USBD_RegisterClass(&USBD_Device, USBD_MSC_CLASS);        // USB class registration
 800140e:	490a      	ldr	r1, [pc, #40]	; (8001438 <USB_MSC_Init_Start+0x38>)
 8001410:	4620      	mov	r0, r4
 8001412:	f006 ff4e 	bl	80082b2 <USBD_RegisterClass>
	USBD_MSC_RegisterStorage(&USBD_Device, &USBD_DISK_fops); // Storage call backs
 8001416:	4909      	ldr	r1, [pc, #36]	; (800143c <USB_MSC_Init_Start+0x3c>)
 8001418:	4620      	mov	r0, r4
 800141a:	f006 fb74 	bl	8007b06 <USBD_MSC_RegisterStorage>
	USBD_Start(&USBD_Device);                                // Start USB MSC
 800141e:	4620      	mov	r0, r4
 8001420:	f006 ff4e 	bl	80082c0 <USBD_Start>

	delay_us(1000000);
 8001424:	4806      	ldr	r0, [pc, #24]	; (8001440 <USB_MSC_Init_Start+0x40>)


}
 8001426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(1000000);
 800142a:	f001 be3f 	b.w	80030ac <delay_us>
 800142e:	bf00      	nop
 8001430:	200086a4 	.word	0x200086a4
 8001434:	20000008 	.word	0x20000008
 8001438:	200001f4 	.word	0x200001f4
 800143c:	200001d4 	.word	0x200001d4
 8001440:	000f4240 	.word	0x000f4240

08001444 <USB_VCP_Init_Start>:

void USB_VCP_Init_Start(void)
{
 8001444:	b510      	push	{r4, lr}
	   USBD_Init(&USBD_Device, &VCP_Desc, 0);                   // USB VCP initialization
 8001446:	4c0b      	ldr	r4, [pc, #44]	; (8001474 <USB_VCP_Init_Start+0x30>)
 8001448:	490b      	ldr	r1, [pc, #44]	; (8001478 <USB_VCP_Init_Start+0x34>)
 800144a:	2200      	movs	r2, #0
 800144c:	4620      	mov	r0, r4
 800144e:	f006 ff02 	bl	8008256 <USBD_Init>
	   USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);        // USB class registration
 8001452:	490a      	ldr	r1, [pc, #40]	; (800147c <USB_VCP_Init_Start+0x38>)
 8001454:	4620      	mov	r0, r4
 8001456:	f006 ff2c 	bl	80082b2 <USBD_RegisterClass>
	   USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops); // VCP CDC call backs
 800145a:	4909      	ldr	r1, [pc, #36]	; (8001480 <USB_VCP_Init_Start+0x3c>)
 800145c:	4620      	mov	r0, r4
 800145e:	f002 fb93 	bl	8003b88 <USBD_CDC_RegisterInterface>
	   USBD_Start(&USBD_Device);                                 // Start USB VCP
 8001462:	4620      	mov	r0, r4
 8001464:	f006 ff2c 	bl	80082c0 <USBD_Start>
	   delay_us(1000000);
 8001468:	4806      	ldr	r0, [pc, #24]	; (8001484 <USB_VCP_Init_Start+0x40>)
}
 800146a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	   delay_us(1000000);
 800146e:	f001 be1d 	b.w	80030ac <delay_us>
 8001472:	bf00      	nop
 8001474:	200086a4 	.word	0x200086a4
 8001478:	2000006c 	.word	0x2000006c
 800147c:	200000b4 	.word	0x200000b4
 8001480:	200001c4 	.word	0x200001c4
 8001484:	000f4240 	.word	0x000f4240

08001488 <Read_RTC_Timestamp>:
          2000 + __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC)));
}


void Read_RTC_Timestamp(void)               // Read RTC timestamp and store in variables
{
 8001488:	b510      	push	{r4, lr}
// read RTC time in BCD format from registers and save in .BIN/.DEC format

Hour = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 800148a:	f7ff fdf7 	bl	800107c <LL_RTC_TIME_GetHour.constprop.13>
 800148e:	4604      	mov	r4, r0
 8001490:	f7ff fdf4 	bl	800107c <LL_RTC_TIME_GetHour.constprop.13>
 8001494:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8001498:	4a2b      	ldr	r2, [pc, #172]	; (8001548 <Read_RTC_Timestamp+0xc0>)
 800149a:	f000 000f 	and.w	r0, r0, #15
 800149e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014a2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80014a6:	7013      	strb	r3, [r2, #0]
Min = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 80014a8:	f7ff fdce 	bl	8001048 <LL_RTC_TIME_GetMinute.constprop.12>
 80014ac:	4604      	mov	r4, r0
 80014ae:	f7ff fdcb 	bl	8001048 <LL_RTC_TIME_GetMinute.constprop.12>
 80014b2:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80014b6:	4a25      	ldr	r2, [pc, #148]	; (800154c <Read_RTC_Timestamp+0xc4>)
 80014b8:	f000 000f 	and.w	r0, r0, #15
 80014bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014c0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80014c4:	7013      	strb	r3, [r2, #0]
Sec =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80014c6:	f7ff fda7 	bl	8001018 <LL_RTC_TIME_GetSecond.constprop.11>
 80014ca:	4604      	mov	r4, r0
 80014cc:	f7ff fda4 	bl	8001018 <LL_RTC_TIME_GetSecond.constprop.11>
 80014d0:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80014d4:	4a1e      	ldr	r2, [pc, #120]	; (8001550 <Read_RTC_Timestamp+0xc8>)
 80014d6:	f000 000f 	and.w	r0, r0, #15
 80014da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014de:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80014e2:	7013      	strb	r3, [r2, #0]

Mon =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 80014e4:	f7ff fd64 	bl	8000fb0 <LL_RTC_DATE_GetMonth.constprop.9>
 80014e8:	4604      	mov	r4, r0
 80014ea:	f7ff fd61 	bl	8000fb0 <LL_RTC_DATE_GetMonth.constprop.9>
 80014ee:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80014f2:	4a18      	ldr	r2, [pc, #96]	; (8001554 <Read_RTC_Timestamp+0xcc>)
 80014f4:	f000 000f 	and.w	r0, r0, #15
 80014f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014fc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001500:	7013      	strb	r3, [r2, #0]
Day = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 8001502:	f7ff fd3d 	bl	8000f80 <LL_RTC_DATE_GetDay.constprop.8>
 8001506:	4604      	mov	r4, r0
 8001508:	f7ff fd3a 	bl	8000f80 <LL_RTC_DATE_GetDay.constprop.8>
 800150c:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8001510:	4a11      	ldr	r2, [pc, #68]	; (8001558 <Read_RTC_Timestamp+0xd0>)
 8001512:	f000 000f 	and.w	r0, r0, #15
 8001516:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800151a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800151e:	7013      	strb	r3, [r2, #0]
Year =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 8001520:	f7ff fd60 	bl	8000fe4 <LL_RTC_DATE_GetYear.constprop.10>
 8001524:	4604      	mov	r4, r0
 8001526:	f7ff fd5d 	bl	8000fe4 <LL_RTC_DATE_GetYear.constprop.10>
 800152a:	f3c4 1303 	ubfx	r3, r4, #4, #4
 800152e:	4a0b      	ldr	r2, [pc, #44]	; (800155c <Read_RTC_Timestamp+0xd4>)
 8001530:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001534:	f000 000f 	and.w	r0, r0, #15
 8001538:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800153c:	7013      	strb	r3, [r2, #0]

// Releasing RTC registers (Time and Date registers); necessary for RTC read/write operation
(void)RTC->DR;
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <Read_RTC_Timestamp+0xd8>)
 8001540:	685a      	ldr	r2, [r3, #4]
(void)RTC->TR;
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	bd10      	pop	{r4, pc}
 8001546:	bf00      	nop
 8001548:	2000899a 	.word	0x2000899a
 800154c:	20008958 	.word	0x20008958
 8001550:	200089a4 	.word	0x200089a4
 8001554:	20008c88 	.word	0x20008c88
 8001558:	20008c76 	.word	0x20008c76
 800155c:	20008ca1 	.word	0x20008ca1
 8001560:	40002800 	.word	0x40002800

08001564 <update_FATFS_time>:
{
 8001564:	b508      	push	{r3, lr}
	Read_RTC_Timestamp();                                   // Read RTC time-stamps and store in variables
 8001566:	f7ff ff8f 	bl	8001488 <Read_RTC_Timestamp>
	fno.fdate = (WORD)(((Year+20) << 9) | Mon << 5 | Day);  // Update File time with the data log starting time
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <update_FATFS_time+0x44>)
 800156c:	490f      	ldr	r1, [pc, #60]	; (80015ac <update_FATFS_time+0x48>)
 800156e:	781a      	ldrb	r2, [r3, #0]
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <update_FATFS_time+0x4c>)
	f_utime(FILE_NAME_STRING, &fno);                        // Update RTC time on FATFS file header
 8001572:	4810      	ldr	r0, [pc, #64]	; (80015b4 <update_FATFS_time+0x50>)
	fno.fdate = (WORD)(((Year+20) << 9) | Mon << 5 | Day);  // Update File time with the data log starting time
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800157a:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <update_FATFS_time+0x54>)
 800157c:	7812      	ldrb	r2, [r2, #0]
 800157e:	3214      	adds	r2, #20
 8001580:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8001584:	808b      	strh	r3, [r1, #4]
    fno.ftime = (WORD)(Hour <<11 |  Min<<5 | Sec/2 );       // Extracting values from RTC registers
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <update_FATFS_time+0x58>)
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <update_FATFS_time+0x5c>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	015b      	lsls	r3, r3, #5
 8001590:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 8001594:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <update_FATFS_time+0x60>)
 8001596:	7812      	ldrb	r2, [r2, #0]
 8001598:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 800159c:	80cb      	strh	r3, [r1, #6]
}
 800159e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	f_utime(FILE_NAME_STRING, &fno);                        // Update RTC time on FATFS file header
 80015a2:	f008 bdc6 	b.w	800a132 <f_utime>
 80015a6:	bf00      	nop
 80015a8:	20008c88 	.word	0x20008c88
 80015ac:	2000896c 	.word	0x2000896c
 80015b0:	20008c76 	.word	0x20008c76
 80015b4:	20008988 	.word	0x20008988
 80015b8:	20008ca1 	.word	0x20008ca1
 80015bc:	2000899a 	.word	0x2000899a
 80015c0:	20008958 	.word	0x20008958
 80015c4:	200089a4 	.word	0x200089a4

080015c8 <File_Close_Update_Unlink>:
{
 80015c8:	b508      	push	{r3, lr}
	f_close(&MyFile);                       // Close previous running file
 80015ca:	4807      	ldr	r0, [pc, #28]	; (80015e8 <File_Close_Update_Unlink+0x20>)
 80015cc:	f008 fb87 	bl	8009cde <f_close>
	update_FATFS_time();                    // Write RTC time-stamp on File header/properties of last FATFS file to visualize in PC
 80015d0:	f7ff ffc8 	bl	8001564 <update_FATFS_time>
	f_mount(0, "", 0); 		                //  unmount FATFS file (of running sensor storage file)
 80015d4:	2200      	movs	r2, #0
 80015d6:	4905      	ldr	r1, [pc, #20]	; (80015ec <File_Close_Update_Unlink+0x24>)
 80015d8:	4610      	mov	r0, r2
 80015da:	f008 f923 	bl	8009824 <f_mount>
	FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
 80015de:	4804      	ldr	r0, [pc, #16]	; (80015f0 <File_Close_Update_Unlink+0x28>)
}
 80015e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);             //  unlink SD card driver (of running sensor storage file)
 80015e4:	f008 be0c 	b.w	800a200 <FATFS_UnLinkDriver>
 80015e8:	20008ca4 	.word	0x20008ca4
 80015ec:	0800b6e7 	.word	0x0800b6e7
 80015f0:	20008a35 	.word	0x20008a35

080015f4 <Shut_Down_SD>:
 80015f4:	f7ff bfe8 	b.w	80015c8 <File_Close_Update_Unlink>

080015f8 <Enter_RTC_InitMode>:
}

void Enter_RTC_InitMode(void)      // Function needed before writing on RTC registers
{
  RTC->ISR = RTC_INIT_MASK;                                // Enter Init Mode
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <Enter_RTC_InitMode+0x10>)
 80015fa:	f04f 32ff 	mov.w	r2, #4294967295
 80015fe:	60da      	str	r2, [r3, #12]
  while(((RTC->ISR) & RTC_ISR_INITF) != (RTC_ISR_INITF)); // Wait to enter Init mode
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	0652      	lsls	r2, r2, #25
 8001604:	d5fc      	bpl.n	8001600 <Enter_RTC_InitMode+0x8>
}
 8001606:	4770      	bx	lr
 8001608:	40002800 	.word	0x40002800

0800160c <Exit_RTC_InitMode>:

void Exit_RTC_InitMode(void)      // Function needed after writing on RTC registers
{
  RTC->ISR = (uint32_t)~RTC_ISR_INIT; // Disable RTC init mode
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <Exit_RTC_InitMode+0x1c>)
 800160e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001612:	60da      	str	r2, [r3, #12]

	// Wait for synchro. Needed only if Shadow registers is enabled
	WRITE_REG(RTC->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTC->ISR & RTC_ISR_INIT))); // Clear RTC sync flag
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800161a:	f062 02a0 	orn	r2, r2, #160	; 0xa0
 800161e:	60da      	str	r2, [r3, #12]
	while(((RTC->ISR) & RTC_ISR_RSF) != (RTC_ISR_RSF));  // Wait the registers to be synchronised
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	0692      	lsls	r2, r2, #26
 8001624:	d5fc      	bpl.n	8001620 <Exit_RTC_InitMode+0x14>
}
 8001626:	4770      	bx	lr
 8001628:	40002800 	.word	0x40002800

0800162c <MX_RTC_Init>:

void MX_RTC_Init(void)                           // RTC initialization after Power on reset
{
 800162c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800162e:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <MX_RTC_Init+0xa8>)
 8001630:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001634:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001638:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800163c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001640:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001644:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001648:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800164c:	f042 0201 	orr.w	r2, r2, #1
 8001650:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001654:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  LL_RTC_InitTypeDef RTC_InitStruct;

  LL_RCC_ForceBackupDomainReset();               // Reset Backup domain registers
  LL_RCC_ReleaseBackupDomainReset();
  LL_RCC_LSE_Enable();                          // Configure LSE as RTC source clock
  while (LL_RCC_LSE_IsReady() != 1);
 8001658:	0792      	lsls	r2, r2, #30
 800165a:	d5fb      	bpl.n	8001654 <MX_RTC_Init+0x28>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800165c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
  LL_RCC_EnableRTC();                           // RTC clock

  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
  LL_RTC_Init(RTC, &RTC_InitStruct);           // Initialize RTC with default configurations
 8001660:	4c1d      	ldr	r4, [pc, #116]	; (80016d8 <MX_RTC_Init+0xac>)
 8001662:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800166a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800166e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8001672:	a904      	add	r1, sp, #16
 8001674:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001678:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800167c:	2300      	movs	r3, #0
 800167e:	f841 3d0c 	str.w	r3, [r1, #-12]!
  LL_RTC_Init(RTC, &RTC_InitStruct);           // Initialize RTC with default configurations
 8001682:	4620      	mov	r0, r4
 8001684:	f005 fc2c 	bl	8006ee0 <LL_RTC_Init>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001688:	23ca      	movs	r3, #202	; 0xca
 800168a:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800168c:	2353      	movs	r3, #83	; 0x53
 800168e:	6263      	str	r3, [r4, #36]	; 0x24


    LL_RTC_DisableWriteProtection(RTC);
    Enter_RTC_InitMode();                         // Enter RTC initialization mode to set parameters
 8001690:	f7ff ffb2 	bl	80015f8 <Enter_RTC_InitMode>

    // Calender set up
    MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_A, 0x7F << RTC_POSITION_PRER_PREDIV_A);  // ASYNC prediv= 0x7F
 8001694:	6923      	ldr	r3, [r4, #16]
 8001696:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800169a:	fa92 f2a2 	rbit	r2, r2
 800169e:	217f      	movs	r1, #127	; 0x7f
 80016a0:	fab2 f282 	clz	r2, r2
 80016a4:	fa01 f202 	lsl.w	r2, r1, r2
 80016a8:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80016ac:	4313      	orrs	r3, r2
 80016ae:	6123      	str	r3, [r4, #16]
  	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_S, 0xFF);                                // SYNC prediv= 0xFF
 80016b0:	6923      	ldr	r3, [r4, #16]
 80016b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80016b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80016ba:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80016be:	6123      	str	r3, [r4, #16]

  	Exit_RTC_InitMode();
 80016c0:	f7ff ffa4 	bl	800160c <Exit_RTC_InitMode>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80016c4:	23ff      	movs	r3, #255	; 0xff
 80016c6:	6263      	str	r3, [r4, #36]	; 0x24

  tmp = (uint32_t)(&(RTCx->BKP0R));
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <MX_RTC_Init+0xb0>)
 80016ca:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80016ce:	605a      	str	r2, [r3, #4]
}
 80016d0:	b004      	add	sp, #16
 80016d2:	bd10      	pop	{r4, pc}
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40002800 	.word	0x40002800
 80016dc:	40002850 	.word	0x40002850

080016e0 <Set_RTC_Calendar>:
{
 80016e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80016e2:	4c19      	ldr	r4, [pc, #100]	; (8001748 <Set_RTC_Calendar+0x68>)
 80016e4:	460f      	mov	r7, r1
 80016e6:	4619      	mov	r1, r3
 80016e8:	23ca      	movs	r3, #202	; 0xca
 80016ea:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80016ec:	2353      	movs	r3, #83	; 0x53
 80016ee:	b085      	sub	sp, #20
 80016f0:	6263      	str	r3, [r4, #36]	; 0x24
 80016f2:	4606      	mov	r6, r0
 80016f4:	4615      	mov	r5, r2
  Enter_RTC_InitMode();
 80016f6:	f7ff ff7f 	bl	80015f8 <Enter_RTC_InitMode>
  RTC_TimeStruct.Minutes = Min;
 80016fa:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  RTC_TimeStruct.Hours = Hour;
 80016fe:	f88d 100c 	strb.w	r1, [sp, #12]
  RTC_TimeStruct.Minutes = Min;
 8001702:	f88d 300d 	strb.w	r3, [sp, #13]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 8001706:	aa02      	add	r2, sp, #8
  RTC_TimeStruct.Seconds = Sec;
 8001708:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800170c:	f88d 300e 	strb.w	r3, [sp, #14]
  LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 8001710:	2100      	movs	r1, #0
 8001712:	4620      	mov	r0, r4
 8001714:	f005 fc54 	bl	8006fc0 <LL_RTC_TIME_Init>
  RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;          // Default value
 8001718:	2301      	movs	r3, #1
  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 800171a:	aa01      	add	r2, sp, #4
 800171c:	2100      	movs	r1, #0
 800171e:	4620      	mov	r0, r4
  RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;          // Default value
 8001720:	f88d 3004 	strb.w	r3, [sp, #4]
  RTC_DateStruct.Month = Month;
 8001724:	f88d 7005 	strb.w	r7, [sp, #5]
  RTC_DateStruct.Year = Year;
 8001728:	f88d 6007 	strb.w	r6, [sp, #7]
  RTC_DateStruct.Day = Day;
 800172c:	f88d 5006 	strb.w	r5, [sp, #6]
  LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8001730:	f005 fc8a 	bl	8007048 <LL_RTC_DATE_Init>
  Exit_RTC_InitMode();
 8001734:	f7ff ff6a 	bl	800160c <Exit_RTC_InitMode>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001738:	23ff      	movs	r3, #255	; 0xff
 800173a:	6263      	str	r3, [r4, #36]	; 0x24
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <Set_RTC_Calendar+0x6c>)
 800173e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001742:	605a      	str	r2, [r3, #4]
}
 8001744:	b005      	add	sp, #20
 8001746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001748:	40002800 	.word	0x40002800
 800174c:	40002850 	.word	0x40002850

08001750 <RTC_BAK_GetRegister>:
// Valid register value indicates RTC is enabled and running
uint32_t RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
  register uint32_t tmp = 0U;

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8001750:	3050      	adds	r0, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8001752:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
}
 8001756:	4770      	bx	lr

08001758 <USB_PA9_EXTI_conf>:
  LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_10);                        // Interrupt configured for falling edge
}


void USB_PA9_EXTI_conf(void)                                              // PA9 EXTI pin interrupt configuration for USB connectivity Sense
{
 8001758:	b508      	push	{r3, lr}
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <USB_PA9_EXTI_conf+0x34>)
 800175c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001760:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(EXTI9_5_IRQn);                                           // Enabling External GPIO pin interrupt (EXTI9-5) for USB connectivity PA10 Pin
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);                   // Enable Sysconfig clock to enable EXTI pin interrupts
 8001762:	2001      	movs	r0, #1
 8001764:	f7ff fb60 	bl	8000e28 <LL_APB2_GRP1_EnableClock>
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001768:	4a09      	ldr	r2, [pc, #36]	; (8001790 <USB_PA9_EXTI_conf+0x38>)
 800176a:	6913      	ldr	r3, [r2, #16]
 800176c:	21f0      	movs	r1, #240	; 0xf0
 800176e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001772:	fa91 f1a1 	rbit	r1, r1
 8001776:	6113      	str	r3, [r2, #16]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <USB_PA9_EXTI_conf+0x3c>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001780:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	bd08      	pop	{r3, pc}
 800178c:	e000e100 	.word	0xe000e100
 8001790:	40010000 	.word	0x40010000
 8001794:	40010400 	.word	0x40010400

08001798 <P_IMU4_SPI3_Init>:
	//}
}


void P_IMU4_SPI3_Init(void)
{
 8001798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LL_SPI_InitTypeDef SPI_InitStruct;

  LL_GPIO_InitTypeDef GPIO_InitStruct;

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800179c:	2004      	movs	r0, #4
{
 800179e:	b093      	sub	sp, #76	; 0x4c
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80017a0:	f7ff fb34 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80017a4:	2002      	movs	r0, #2
 80017a6:	f7ff fb31 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017aa:	4b34      	ldr	r3, [pc, #208]	; (800187c <P_IMU4_SPI3_Init+0xe4>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
  LL_GPIO_Init(SPI3_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 80017ac:	4e34      	ldr	r6, [pc, #208]	; (8001880 <P_IMU4_SPI3_Init+0xe8>)
 80017ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017b4:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
  GPIO_InitStruct.Pin = SPI3_SCK_IMU_PIN;
 80017b8:	f04f 0908 	mov.w	r9, #8
 80017bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017c0:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017c2:	2502      	movs	r5, #2
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80017c8:	2706      	movs	r7, #6
 80017ca:	9301      	str	r3, [sp, #4]
  LL_GPIO_Init(SPI3_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 80017cc:	eb0d 0109 	add.w	r1, sp, r9
 80017d0:	4630      	mov	r0, r6
  (void)tmpreg;
 80017d2:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017d4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017d6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = SPI3_SCK_IMU_PIN;
 80017d8:	f8cd 9008 	str.w	r9, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017dc:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80017e2:	9707      	str	r7, [sp, #28]
  LL_GPIO_Init(SPI3_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 80017e4:	f005 fa02 	bl	8006bec <LL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI3_MISO_IMU_PIN;
 80017e8:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
  LL_GPIO_Init(SPI3_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 80017ea:	eb0d 0109 	add.w	r1, sp, r9
 80017ee:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = SPI3_MISO_IMU_PIN;
 80017f0:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017f2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017f4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017f6:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80017fc:	9707      	str	r7, [sp, #28]
  LL_GPIO_Init(SPI3_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 80017fe:	f005 f9f5 	bl	8006bec <LL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI3_MOSI_IMU_PIN;
 8001802:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
  LL_GPIO_Init(SPI3_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001804:	eb0d 0109 	add.w	r1, sp, r9
 8001808:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = SPI3_MOSI_IMU_PIN;
 800180a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800180c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800180e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001810:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001812:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001816:	9707      	str	r7, [sp, #28]
  LL_GPIO_Init(SPI3_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001818:	f005 f9e8 	bl	8006bec <LL_GPIO_Init>


  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800181c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001820:	9309      	str	r3, [sp, #36]	; 0x24
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001822:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001826:	9408      	str	r4, [sp, #32]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001828:	930a      	str	r3, [sp, #40]	; 0x28
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;

  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800182a:	940f      	str	r4, [sp, #60]	; 0x3c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800182c:	9410      	str	r4, [sp, #64]	; 0x40
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800182e:	2301      	movs	r3, #1
  SPI_InitStruct.CRCPoly = 7;
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001830:	4c14      	ldr	r4, [pc, #80]	; (8001884 <P_IMU4_SPI3_Init+0xec>)
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001832:	930c      	str	r3, [sp, #48]	; 0x30
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001838:	930d      	str	r3, [sp, #52]	; 0x34
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 800183a:	a908      	add	r1, sp, #32
  SPI_InitStruct.CRCPoly = 7;
 800183c:	2307      	movs	r3, #7
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 800183e:	4620      	mov	r0, r4
  SPI_InitStruct.CRCPoly = 7;
 8001840:	9311      	str	r3, [sp, #68]	; 0x44
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001842:	950b      	str	r5, [sp, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001844:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001848:	f005 fc9e 	bl	8007188 <LL_SPI_Init>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800184c:	6863      	ldr	r3, [r4, #4]
 800184e:	f023 0308 	bic.w	r3, r3, #8
 8001852:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8001854:	6863      	ldr	r3, [r4, #4]
 8001856:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800185a:	6063      	str	r3, [r4, #4]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_RXNE(SPI_TypeDef *SPIx)
{
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 800185c:	6863      	ldr	r3, [r4, #4]
 800185e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001862:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800186a:	6023      	str	r3, [r4, #0]

  LL_SPI_SetRxFIFOThreshold(SPI3,LL_SPI_RX_FIFO_TH_QUARTER);
  LL_SPI_DisableIT_RXNE(SPI3);
  LL_SPI_Enable(SPI3);

  delay_us(10000);
 800186c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001870:	f001 fc1c 	bl	80030ac <delay_us>

}
 8001874:	b013      	add	sp, #76	; 0x4c
 8001876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	48000400 	.word	0x48000400
 8001884:	40003c00 	.word	0x40003c00

08001888 <Wait_for_ADC_timeout_While_Datalog>:
	         }
}

void Wait_for_ADC_timeout_While_Datalog(void)   // During Timer_Interrupt for Data logging, Involved Volatile variables
{
	ADC_TimeOut_Count_Buf++;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <Wait_for_ADC_timeout_While_Datalog+0x1c>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	3201      	adds	r2, #1
 800188e:	601a      	str	r2, [r3, #0]
	if( ADC_TimeOut_Count_Buf > ADC_TimeOut_Limit_Buf) // 100ms= 48000*ADC_TimeOut_MS_value)
 8001890:	6819      	ldr	r1, [r3, #0]
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <Wait_for_ADC_timeout_While_Datalog+0x20>)
 8001894:	4291      	cmp	r1, r2
 8001896:	d904      	bls.n	80018a2 <Wait_for_ADC_timeout_While_Datalog+0x1a>
	         {
		ADC_TimeOut_Count_Buf=0;
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
		ADC_Error_Buf=1;
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <Wait_for_ADC_timeout_While_Datalog+0x24>)
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
 80018a2:	4770      	bx	lr
 80018a4:	20008968 	.word	0x20008968
 80018a8:	00493e00 	.word	0x00493e00
 80018ac:	20008f27 	.word	0x20008f27

080018b0 <Wait_for_ADC_TimeOut_>:
	         }
}

void Wait_for_ADC_TimeOut_ (void)
{
	ADC_TimeOut_Count++;
 80018b0:	4a06      	ldr	r2, [pc, #24]	; (80018cc <Wait_for_ADC_TimeOut_+0x1c>)
	if( ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 80018b2:	4907      	ldr	r1, [pc, #28]	; (80018d0 <Wait_for_ADC_TimeOut_+0x20>)
	ADC_TimeOut_Count++;
 80018b4:	6813      	ldr	r3, [r2, #0]
 80018b6:	3301      	adds	r3, #1
	if( ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 80018b8:	428b      	cmp	r3, r1
	         {
		ADC_TimeOut_Count=0;
 80018ba:	bf83      	ittte	hi
 80018bc:	2300      	movhi	r3, #0
 80018be:	6013      	strhi	r3, [r2, #0]
		ADC_Error=1;
 80018c0:	4b04      	ldrhi	r3, [pc, #16]	; (80018d4 <Wait_for_ADC_TimeOut_+0x24>)
	ADC_TimeOut_Count++;
 80018c2:	6013      	strls	r3, [r2, #0]
		ADC_Error=1;
 80018c4:	bf84      	itt	hi
 80018c6:	2201      	movhi	r2, #1
 80018c8:	701a      	strbhi	r2, [r3, #0]
 80018ca:	4770      	bx	lr
 80018cc:	20008f28 	.word	0x20008f28
 80018d0:	00493e00 	.word	0x00493e00
 80018d4:	20008f1e 	.word	0x20008f1e

080018d8 <P_Activate_ADC2>:
{
 80018d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 80018da:	2300      	movs	r3, #0
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018dc:	482c      	ldr	r0, [pc, #176]	; (8001990 <P_Activate_ADC2+0xb8>)
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / 100000) /10);
 80018e2:	4a2c      	ldr	r2, [pc, #176]	; (8001994 <P_Activate_ADC2+0xbc>)
 80018e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018ec:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 80018ee:	6883      	ldr	r3, [r0, #8]
 80018f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6083      	str	r3, [r0, #8]
 80018fe:	4b26      	ldr	r3, [pc, #152]	; (8001998 <P_Activate_ADC2+0xc0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	fbb3 f3f2 	udiv	r3, r3, r2
 8001906:	220a      	movs	r2, #10
 8001908:	4353      	muls	r3, r2
 800190a:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800190e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8001910:	9a01      	ldr	r2, [sp, #4]
 8001912:	2a00      	cmp	r2, #0
 8001914:	d12f      	bne.n	8001976 <P_Activate_ADC2+0x9e>
  MODIFY_REG(ADCx->CR,
 8001916:	6883      	ldr	r3, [r0, #8]
    ADC_TimeOut_Count=0;
 8001918:	4d20      	ldr	r5, [pc, #128]	; (800199c <P_Activate_ADC2+0xc4>)
    ADC_Error=0;
 800191a:	4c21      	ldr	r4, [pc, #132]	; (80019a0 <P_Activate_ADC2+0xc8>)
 800191c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001920:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001924:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001928:	6083      	str	r3, [r0, #8]
 800192a:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
    ADC_TimeOut_Count=0;
 800192e:	602a      	str	r2, [r5, #0]
    ADC_Error=0;
 8001930:	7022      	strb	r2, [r4, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8001932:	6883      	ldr	r3, [r0, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC2) == 0) && !Error_preceding&& (ADC_Error==0))
 8001934:	2b00      	cmp	r3, #0
 8001936:	db04      	blt.n	8001942 <P_Activate_ADC2+0x6a>
 8001938:	6933      	ldr	r3, [r6, #16]
 800193a:	0599      	lsls	r1, r3, #22
 800193c:	d401      	bmi.n	8001942 <P_Activate_ADC2+0x6a>
 800193e:	7823      	ldrb	r3, [r4, #0]
 8001940:	b1e3      	cbz	r3, 800197c <P_Activate_ADC2+0xa4>
    wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES;   // ADC Delay calculations
 8001942:	2380      	movs	r3, #128	; 0x80
      wait_loop_index--;
 8001944:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8001946:	9a01      	ldr	r2, [sp, #4]
 8001948:	b9da      	cbnz	r2, 8001982 <P_Activate_ADC2+0xaa>
  MODIFY_REG(ADCx->CR,
 800194a:	6883      	ldr	r3, [r0, #8]
 800194c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001950:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6083      	str	r3, [r0, #8]
    ADC_TimeOut_Count=0;
 800195a:	602a      	str	r2, [r5, #0]
    ADC_Error=0;
 800195c:	7022      	strb	r2, [r4, #0]
 800195e:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8001962:	6803      	ldr	r3, [r0, #0]
    while ((LL_ADC_IsActiveFlag_ADRDY(ADC2) == 0)&& !Error_preceding&& (ADC_Error==0))
 8001964:	07da      	lsls	r2, r3, #31
 8001966:	d404      	bmi.n	8001972 <P_Activate_ADC2+0x9a>
 8001968:	692b      	ldr	r3, [r5, #16]
 800196a:	059b      	lsls	r3, r3, #22
 800196c:	d401      	bmi.n	8001972 <P_Activate_ADC2+0x9a>
 800196e:	7823      	ldrb	r3, [r4, #0]
 8001970:	b153      	cbz	r3, 8001988 <P_Activate_ADC2+0xb0>
}
 8001972:	b002      	add	sp, #8
 8001974:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 8001976:	9b01      	ldr	r3, [sp, #4]
 8001978:	3b01      	subs	r3, #1
 800197a:	e7c8      	b.n	800190e <P_Activate_ADC2+0x36>
  	  Wait_for_ADC_TimeOut_();
 800197c:	f7ff ff98 	bl	80018b0 <Wait_for_ADC_TimeOut_>
 8001980:	e7d7      	b.n	8001932 <P_Activate_ADC2+0x5a>
      wait_loop_index--;
 8001982:	9b01      	ldr	r3, [sp, #4]
 8001984:	3b01      	subs	r3, #1
 8001986:	e7dd      	b.n	8001944 <P_Activate_ADC2+0x6c>
  	  Wait_for_ADC_TimeOut_();
 8001988:	f7ff ff92 	bl	80018b0 <Wait_for_ADC_TimeOut_>
 800198c:	e7e9      	b.n	8001962 <P_Activate_ADC2+0x8a>
 800198e:	bf00      	nop
 8001990:	50040100 	.word	0x50040100
 8001994:	000186a0 	.word	0x000186a0
 8001998:	20000004 	.word	0x20000004
 800199c:	20008f28 	.word	0x20008f28
 80019a0:	20008f1e 	.word	0x20008f1e

080019a4 <P_Activate_ADC1>:
{
 80019a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019aa:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <P_Activate_ADC1+0xbc>)
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / 100000) /10);
 80019ac:	492d      	ldr	r1, [pc, #180]	; (8001a64 <P_Activate_ADC1+0xc0>)
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 80019b4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80019b8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80019c0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80019c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	4a27      	ldr	r2, [pc, #156]	; (8001a68 <P_Activate_ADC1+0xc4>)
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	fbb2 f2f1 	udiv	r2, r2, r1
 80019d2:	210a      	movs	r1, #10
 80019d4:	434a      	muls	r2, r1
 80019d6:	fbb2 f2f1 	udiv	r2, r2, r1
      wait_loop_index--;
 80019da:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 80019dc:	9901      	ldr	r1, [sp, #4]
 80019de:	2900      	cmp	r1, #0
 80019e0:	d132      	bne.n	8001a48 <P_Activate_ADC1+0xa4>
  MODIFY_REG(ADCx->CR,
 80019e2:	689a      	ldr	r2, [r3, #8]
    ADC_TimeOut_Count=0;
 80019e4:	4c21      	ldr	r4, [pc, #132]	; (8001a6c <P_Activate_ADC1+0xc8>)
    ADC_Error=0;
 80019e6:	4822      	ldr	r0, [pc, #136]	; (8001a70 <P_Activate_ADC1+0xcc>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80019e8:	4d1d      	ldr	r5, [pc, #116]	; (8001a60 <P_Activate_ADC1+0xbc>)
  MODIFY_REG(ADCx->CR,
 80019ea:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80019ee:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80019f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
    ADC_TimeOut_Count=0;
 80019fc:	6021      	str	r1, [r4, #0]
    ADC_Error=0;
 80019fe:	7001      	strb	r1, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8001a00:	68ab      	ldr	r3, [r5, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC1) == 0) && !Error_preceding&& (ADC_Error==0))
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db04      	blt.n	8001a10 <P_Activate_ADC1+0x6c>
 8001a06:	6933      	ldr	r3, [r6, #16]
 8001a08:	0599      	lsls	r1, r3, #22
 8001a0a:	d401      	bmi.n	8001a10 <P_Activate_ADC1+0x6c>
 8001a0c:	7803      	ldrb	r3, [r0, #0]
 8001a0e:	b1f3      	cbz	r3, 8001a4e <P_Activate_ADC1+0xaa>
    wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES;   // ADC Delay calculations
 8001a10:	2380      	movs	r3, #128	; 0x80
      wait_loop_index--;
 8001a12:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8001a14:	9901      	ldr	r1, [sp, #4]
 8001a16:	b9e9      	cbnz	r1, 8001a54 <P_Activate_ADC1+0xb0>
  MODIFY_REG(ADCx->CR,
 8001a18:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <P_Activate_ADC1+0xbc>)
 8001a1a:	6893      	ldr	r3, [r2, #8]
 8001a1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6093      	str	r3, [r2, #8]
 8001a2a:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
    ADC_TimeOut_Count=0;
 8001a2e:	6021      	str	r1, [r4, #0]
    ADC_Error=0;
 8001a30:	7001      	strb	r1, [r0, #0]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8001a32:	4614      	mov	r4, r2
 8001a34:	6823      	ldr	r3, [r4, #0]
    while ((LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)&& !Error_preceding&& (ADC_Error==0))
 8001a36:	07da      	lsls	r2, r3, #31
 8001a38:	d404      	bmi.n	8001a44 <P_Activate_ADC1+0xa0>
 8001a3a:	692b      	ldr	r3, [r5, #16]
 8001a3c:	059b      	lsls	r3, r3, #22
 8001a3e:	d401      	bmi.n	8001a44 <P_Activate_ADC1+0xa0>
 8001a40:	7803      	ldrb	r3, [r0, #0]
 8001a42:	b153      	cbz	r3, 8001a5a <P_Activate_ADC1+0xb6>
}
 8001a44:	b002      	add	sp, #8
 8001a46:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 8001a48:	9a01      	ldr	r2, [sp, #4]
 8001a4a:	3a01      	subs	r2, #1
 8001a4c:	e7c5      	b.n	80019da <P_Activate_ADC1+0x36>
  	  Wait_for_ADC_TimeOut_();
 8001a4e:	f7ff ff2f 	bl	80018b0 <Wait_for_ADC_TimeOut_>
 8001a52:	e7d5      	b.n	8001a00 <P_Activate_ADC1+0x5c>
      wait_loop_index--;
 8001a54:	9b01      	ldr	r3, [sp, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	e7db      	b.n	8001a12 <P_Activate_ADC1+0x6e>
  	  Wait_for_ADC_TimeOut_();
 8001a5a:	f7ff ff29 	bl	80018b0 <Wait_for_ADC_TimeOut_>
 8001a5e:	e7e9      	b.n	8001a34 <P_Activate_ADC1+0x90>
 8001a60:	50040000 	.word	0x50040000
 8001a64:	000186a0 	.word	0x000186a0
 8001a68:	20000004 	.word	0x20000004
 8001a6c:	20008f28 	.word	0x20008f28
 8001a70:	20008f1e 	.word	0x20008f1e

08001a74 <P_ADC1_conf_strain>:
  SET_BIT(RCC->AHB2RSTR, Periphs);
 8001a74:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <P_ADC1_conf_strain+0xd8>)
 8001a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
{
 8001a7c:	b570      	push	{r4, r5, r6, lr}
 8001a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 8001a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a82:	4d33      	ldr	r5, [pc, #204]	; (8001b50 <P_ADC1_conf_strain+0xdc>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8001a84:	4c33      	ldr	r4, [pc, #204]	; (8001b54 <P_ADC1_conf_strain+0xe0>)
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);   // FSR1=PC2=Ch3=ADC1
 8001a86:	4e34      	ldr	r6, [pc, #208]	; (8001b58 <P_ADC1_conf_strain+0xe4>)
 8001a88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a8c:	62da      	str	r2, [r3, #44]	; 0x2c
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8001a8e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a92:	f7ff f9bb 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a96:	68ab      	ldr	r3, [r5, #8]
 8001a98:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa0:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8001aa2:	68e3      	ldr	r3, [r4, #12]
 8001aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa8:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 8001aaa:	68e3      	ldr	r3, [r4, #12]
 8001aac:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8001ab0:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 8001ab2:	68e3      	ldr	r3, [r4, #12]
 8001ab4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ab8:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 8001aba:	68e3      	ldr	r3, [r4, #12]
 8001abc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ac0:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001ac2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ac4:	f023 030f 	bic.w	r3, r3, #15
 8001ac8:	6323      	str	r3, [r4, #48]	; 0x30
    LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);   // FSR1=PC2=Ch3=ADC1
 8001aca:	4632      	mov	r2, r6
 8001acc:	4620      	mov	r0, r4
 8001ace:	2106      	movs	r1, #6
 8001ad0:	f7ff f9ce 	bl	8000e70 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_640CYCLES_5);
 8001ad4:	4631      	mov	r1, r6
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	2207      	movs	r2, #7
 8001ada:	f7ff f9e7 	bl	8000eac <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ade:	68ab      	ldr	r3, [r5, #8]
 8001ae0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae8:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8001aea:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8001aee:	4d1b      	ldr	r5, [pc, #108]	; (8001b5c <P_ADC1_conf_strain+0xe8>)
 8001af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af4:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 8001af8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8001afc:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8001b00:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 8001b04:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8001b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b0c:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 8001b10:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8001b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b18:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001b1c:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8001b20:	f023 030f 	bic.w	r3, r3, #15
 8001b24:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8001b28:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8001b2c:	462a      	mov	r2, r5
 8001b2e:	4620      	mov	r0, r4
 8001b30:	2106      	movs	r1, #6
 8001b32:	f7ff f99d 	bl	8000e70 <LL_ADC_REG_SetSequencerRanks>
    LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_640CYCLES_5); // FSR2=PC3=Ch4=ADC2
 8001b36:	4629      	mov	r1, r5
 8001b38:	4620      	mov	r0, r4
 8001b3a:	2207      	movs	r2, #7
 8001b3c:	f7ff f9b6 	bl	8000eac <LL_ADC_SetChannelSamplingTime>
    P_Activate_ADC2();
 8001b40:	f7ff feca 	bl	80018d8 <P_Activate_ADC2>
}
 8001b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    P_Activate_ADC1();
 8001b48:	f7ff bf2c 	b.w	80019a4 <P_Activate_ADC1>
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	50040300 	.word	0x50040300
 8001b54:	50040000 	.word	0x50040000
 8001b58:	0c900008 	.word	0x0c900008
 8001b5c:	10c00010 	.word	0x10c00010

08001b60 <P_ADC_Sensor_GPIO_Init>:
{
 8001b60:	b510      	push	{r4, lr}
LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_2, LL_GPIO_MODE_ANALOG);
 8001b62:	4c0d      	ldr	r4, [pc, #52]	; (8001b98 <P_ADC_Sensor_GPIO_Init+0x38>)
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001b64:	2004      	movs	r0, #4
 8001b66:	f7ff f951 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_2, LL_GPIO_MODE_ANALOG);
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	2104      	movs	r1, #4
 8001b70:	f7ff f968 	bl	8000e44 <LL_GPIO_SetPinMode>
  SET_BIT(GPIOx->ASCR, PinMask);
 8001b74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	62e3      	str	r3, [r4, #44]	; 0x2c
LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_3, LL_GPIO_MODE_ANALOG);
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	2203      	movs	r2, #3
 8001b80:	2108      	movs	r1, #8
 8001b82:	f7ff f95f 	bl	8000e44 <LL_GPIO_SetPinMode>
 8001b86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b88:	f043 0308 	orr.w	r3, r3, #8
 8001b8c:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8001b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  P_ADC1_conf_strain();
 8001b92:	f7ff bf6f 	b.w	8001a74 <P_ADC1_conf_strain>
 8001b96:	bf00      	nop
 8001b98:	48000800 	.word	0x48000800

08001b9c <WriteReg3>:

LL_GPIO_SetOutputPin(MPU_CS_GPIO_PORT, MPU_CS_PIN); // PA4 CS SET Active Low
return temp_val;
}

unsigned int WriteReg3(uint8_t adress, uint8_t data){
 8001b9c:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(GPIOx->BRR, PinMask);
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <WriteReg3+0x48>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28
 8001ba4:	4605      	mov	r5, r0
	 unsigned int temp_val;
LL_GPIO_ResetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN); // PA4 CS RESET Active Low
delay_us(10);
 8001ba6:	200a      	movs	r0, #10
unsigned int WriteReg3(uint8_t adress, uint8_t data){
 8001ba8:	460c      	mov	r4, r1
delay_us(10);
 8001baa:	f001 fa7f 	bl	80030ac <delay_us>
while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001bae:	4a0e      	ldr	r2, [pc, #56]	; (8001be8 <WriteReg3+0x4c>)
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	6891      	ldr	r1, [r2, #8]
 8001bb4:	0789      	lsls	r1, r1, #30
 8001bb6:	d5fc      	bpl.n	8001bb2 <WriteReg3+0x16>
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001bb8:	7315      	strb	r5, [r2, #12]
LL_SPI_TransmitData8(SPI3,adress);
while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	07d0      	lsls	r0, r2, #31
 8001bbe:	d5fc      	bpl.n	8001bba <WriteReg3+0x1e>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001bc0:	68da      	ldr	r2, [r3, #12]
LL_SPI_ReceiveData8(SPI3);

while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	0791      	lsls	r1, r2, #30
 8001bc6:	d5fc      	bpl.n	8001bc2 <WriteReg3+0x26>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001bc8:	731c      	strb	r4, [r3, #12]
LL_SPI_TransmitData8(SPI3,data);
while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <WriteReg3+0x4c>)
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	07d2      	lsls	r2, r2, #31
 8001bd0:	d5fc      	bpl.n	8001bcc <WriteReg3+0x30>
temp_val=LL_SPI_ReceiveData8(SPI3);
delay_us(5);
 8001bd2:	2005      	movs	r0, #5
  return (uint8_t)(READ_REG(SPIx->DR));
 8001bd4:	68dc      	ldr	r4, [r3, #12]
 8001bd6:	f001 fa69 	bl	80030ac <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001bda:	4b02      	ldr	r3, [pc, #8]	; (8001be4 <WriteReg3+0x48>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	619a      	str	r2, [r3, #24]
LL_GPIO_SetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN); // PA4 CS SET Active Low
return temp_val;
}
 8001be0:	b2e0      	uxtb	r0, r4
 8001be2:	bd38      	pop	{r3, r4, r5, pc}
 8001be4:	48001c00 	.word	0x48001c00
 8001be8:	40003c00 	.word	0x40003c00

08001bec <WriteReg1>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001bec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001bf0:	f44f 7280 	mov.w	r2, #256	; 0x100


unsigned int WriteReg1(uint8_t adress, uint8_t data){
 8001bf4:	b510      	push	{r4, lr}
 8001bf6:	629a      	str	r2, [r3, #40]	; 0x28
	 unsigned int temp_val;
LL_GPIO_ResetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);

while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001bf8:	4a0c      	ldr	r2, [pc, #48]	; (8001c2c <WriteReg1+0x40>)
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	6894      	ldr	r4, [r2, #8]
 8001bfe:	07a4      	lsls	r4, r4, #30
 8001c00:	d5fc      	bpl.n	8001bfc <WriteReg1+0x10>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001c02:	7310      	strb	r0, [r2, #12]
LL_SPI_TransmitData8(SPI1,adress);
while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	07d4      	lsls	r4, r2, #31
 8001c08:	d5fc      	bpl.n	8001c04 <WriteReg1+0x18>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001c0a:	68da      	ldr	r2, [r3, #12]
LL_SPI_ReceiveData8(SPI1);

while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	0790      	lsls	r0, r2, #30
 8001c10:	d5fc      	bpl.n	8001c0c <WriteReg1+0x20>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001c12:	7319      	strb	r1, [r3, #12]
LL_SPI_TransmitData8(SPI1,data);
while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <WriteReg1+0x40>)
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	07d2      	lsls	r2, r2, #31
 8001c1a:	d5fc      	bpl.n	8001c16 <WriteReg1+0x2a>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001c1c:	68d8      	ldr	r0, [r3, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001c1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c26:	619a      	str	r2, [r3, #24]
temp_val=LL_SPI_ReceiveData8(SPI1);

LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);
return temp_val;
}
 8001c28:	b2c0      	uxtb	r0, r0
 8001c2a:	bd10      	pop	{r4, pc}
 8001c2c:	40013000 	.word	0x40013000

08001c30 <WriteReg2>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001c30:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <WriteReg2+0x3c>)
 8001c32:	f44f 5280 	mov.w	r2, #4096	; 0x1000


unsigned int WriteReg2(uint8_t adress, uint8_t data){
 8001c36:	b510      	push	{r4, lr}
 8001c38:	629a      	str	r2, [r3, #40]	; 0x28
	 unsigned int temp_val;
LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_PORT, SPI2_CS_PIN);

while(!(SPI2->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001c3a:	4a0d      	ldr	r2, [pc, #52]	; (8001c70 <WriteReg2+0x40>)
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	6894      	ldr	r4, [r2, #8]
 8001c40:	07a4      	lsls	r4, r4, #30
 8001c42:	d5fc      	bpl.n	8001c3e <WriteReg2+0xe>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001c44:	7310      	strb	r0, [r2, #12]
LL_SPI_TransmitData8(SPI2,adress);
while(!(SPI2->SR & SPI_SR_RXNE)); //data received?
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	07d4      	lsls	r4, r2, #31
 8001c4a:	d5fc      	bpl.n	8001c46 <WriteReg2+0x16>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001c4c:	68da      	ldr	r2, [r3, #12]
LL_SPI_ReceiveData8(SPI2);

while(!(SPI2->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	0790      	lsls	r0, r2, #30
 8001c52:	d5fc      	bpl.n	8001c4e <WriteReg2+0x1e>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001c54:	7319      	strb	r1, [r3, #12]
LL_SPI_TransmitData8(SPI2,data);
while(!(SPI2->SR & SPI_SR_RXNE)); //data received?
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <WriteReg2+0x40>)
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	07d2      	lsls	r2, r2, #31
 8001c5c:	d5fc      	bpl.n	8001c58 <WriteReg2+0x28>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001c5e:	68d8      	ldr	r0, [r3, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001c60:	4b02      	ldr	r3, [pc, #8]	; (8001c6c <WriteReg2+0x3c>)
 8001c62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c66:	619a      	str	r2, [r3, #24]
temp_val=LL_SPI_ReceiveData8(SPI2);

LL_GPIO_SetOutputPin(SPI2_CS_GPIO_PORT, SPI2_CS_PIN); // PA4 CS SET Active Low
return temp_val;
}
 8001c68:	b2c0      	uxtb	r0, r0
 8001c6a:	bd10      	pop	{r4, pc}
 8001c6c:	48000400 	.word	0x48000400
 8001c70:	40003800 	.word	0x40003800

08001c74 <ReadRegs1>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001c74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);  // PC4 CS SET Active Low

}

void ReadRegs1( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
 8001c78:	b530      	push	{r4, r5, lr}
 8001c7a:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001c7e:	629c      	str	r4, [r3, #40]	; 0x28
	unsigned int  i = 0;
	LL_GPIO_ResetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN); // PA4 CS RESET Active Low

	while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001c80:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <ReadRegs1+0x50>)
 8001c82:	461c      	mov	r4, r3
 8001c84:	689d      	ldr	r5, [r3, #8]
 8001c86:	07ad      	lsls	r5, r5, #30
 8001c88:	d5fc      	bpl.n	8001c84 <ReadRegs1+0x10>
	LL_SPI_TransmitData8(SPI1,(ReadAddr | 0x80));  // (Starting Address 0x22 | 0x80); MSB is '1' for 0x80, next 7 bit Address of register to write 0x22
 8001c8a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001c8e:	7318      	strb	r0, [r3, #12]
	while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8001c90:	68a3      	ldr	r3, [r4, #8]
 8001c92:	07db      	lsls	r3, r3, #31
 8001c94:	d5fc      	bpl.n	8001c90 <ReadRegs1+0x1c>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001c96:	68e3      	ldr	r3, [r4, #12]
	LL_SPI_ReceiveData8(SPI1);

	for (i = 0; i < Bytes; i++)
	{
			  while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <ReadRegs1+0x50>)
 8001c9a:	440a      	add	r2, r1
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001c9c:	2000      	movs	r0, #0
	for (i = 0; i < Bytes; i++)
 8001c9e:	4291      	cmp	r1, r2
 8001ca0:	d105      	bne.n	8001cae <ReadRegs1+0x3a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001ca2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ca6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001caa:	619a      	str	r2, [r3, #24]
 8001cac:	bd30      	pop	{r4, r5, pc}
			  while(!(SPI1->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001cae:	689c      	ldr	r4, [r3, #8]
 8001cb0:	07a5      	lsls	r5, r4, #30
 8001cb2:	d5fc      	bpl.n	8001cae <ReadRegs1+0x3a>
 8001cb4:	7318      	strb	r0, [r3, #12]
			  LL_SPI_TransmitData8(SPI1,0x00);

				while(!(SPI1->SR & SPI_SR_RXNE)); //data received?
 8001cb6:	689c      	ldr	r4, [r3, #8]
 8001cb8:	07e4      	lsls	r4, r4, #31
 8001cba:	d5fc      	bpl.n	8001cb6 <ReadRegs1+0x42>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001cbc:	68dc      	ldr	r4, [r3, #12]
 8001cbe:	f801 4b01 	strb.w	r4, [r1], #1
 8001cc2:	e7ec      	b.n	8001c9e <ReadRegs1+0x2a>
 8001cc4:	40013000 	.word	0x40013000

08001cc8 <ReadRegs3>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001cc8:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <ReadRegs3+0x5c>)


}

void ReadRegs3( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
 8001cca:	b570      	push	{r4, r5, r6, lr}
 8001ccc:	4615      	mov	r5, r2
 8001cce:	2201      	movs	r2, #1
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
 8001cd2:	4606      	mov	r6, r0
	unsigned int  i = 0;
	LL_GPIO_ResetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN); // PA4 CS RESET Active Low
	delay_us(10);
 8001cd4:	200a      	movs	r0, #10
{
 8001cd6:	460c      	mov	r4, r1
	delay_us(10);
 8001cd8:	f001 f9e8 	bl	80030ac <delay_us>
	while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <ReadRegs3+0x60>)
 8001cde:	461a      	mov	r2, r3
 8001ce0:	6899      	ldr	r1, [r3, #8]
 8001ce2:	0789      	lsls	r1, r1, #30
 8001ce4:	d5fc      	bpl.n	8001ce0 <ReadRegs3+0x18>
	LL_SPI_TransmitData8(SPI3,(ReadAddr | 0x80));  // (Starting Address 0x22 | 0x80); MSB is '1' for 0x80, next 7 bit Address of register to write 0x22
 8001ce6:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001cea:	731e      	strb	r6, [r3, #12]
	while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8001cec:	6893      	ldr	r3, [r2, #8]
 8001cee:	07de      	lsls	r6, r3, #31
 8001cf0:	d5fc      	bpl.n	8001cec <ReadRegs3+0x24>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001cf2:	68d3      	ldr	r3, [r2, #12]
	LL_SPI_ReceiveData8(SPI3);

	for (i = 0; i < Bytes; i++)
	{
			  while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <ReadRegs3+0x60>)
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	4425      	add	r5, r4
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001cfa:	2200      	movs	r2, #0
	for (i = 0; i < Bytes; i++)
 8001cfc:	42a9      	cmp	r1, r5
 8001cfe:	d106      	bne.n	8001d0e <ReadRegs3+0x46>

				while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
				ReadBuf[i]= LL_SPI_ReceiveData8(SPI3);

		}
	delay_us(5);
 8001d00:	2005      	movs	r0, #5
 8001d02:	f001 f9d3 	bl	80030ac <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <ReadRegs3+0x5c>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	619a      	str	r2, [r3, #24]
 8001d0c:	bd70      	pop	{r4, r5, r6, pc}
			  while(!(SPI3->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001d0e:	6898      	ldr	r0, [r3, #8]
 8001d10:	0784      	lsls	r4, r0, #30
 8001d12:	d5fc      	bpl.n	8001d0e <ReadRegs3+0x46>
 8001d14:	731a      	strb	r2, [r3, #12]
				while(!(SPI3->SR & SPI_SR_RXNE)); //data received?
 8001d16:	6898      	ldr	r0, [r3, #8]
 8001d18:	07c0      	lsls	r0, r0, #31
 8001d1a:	d5fc      	bpl.n	8001d16 <ReadRegs3+0x4e>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001d1c:	68d8      	ldr	r0, [r3, #12]
 8001d1e:	f801 0b01 	strb.w	r0, [r1], #1
 8001d22:	e7eb      	b.n	8001cfc <ReadRegs3+0x34>
 8001d24:	48001c00 	.word	0x48001c00
 8001d28:	40003c00 	.word	0x40003c00

08001d2c <ReadRegs2>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <ReadRegs2+0x4c>)

}


void ReadRegs2( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
 8001d2e:	b530      	push	{r4, r5, lr}
 8001d30:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001d34:	629c      	str	r4, [r3, #40]	; 0x28
	unsigned int  i = 0;
	LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_PORT, SPI2_CS_PIN); // PA4 CS RESET Active Low

	while(!(SPI2->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <ReadRegs2+0x50>)
 8001d38:	461c      	mov	r4, r3
 8001d3a:	689d      	ldr	r5, [r3, #8]
 8001d3c:	07ad      	lsls	r5, r5, #30
 8001d3e:	d5fc      	bpl.n	8001d3a <ReadRegs2+0xe>
	LL_SPI_TransmitData8(SPI2,(ReadAddr | 0x80));  // (Starting Address 0x22 | 0x80); MSB is '1' for 0x80, next 7 bit Address of register to write 0x22
 8001d40:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001d44:	7318      	strb	r0, [r3, #12]
	while(!(SPI2->SR & SPI_SR_RXNE)); //data received?
 8001d46:	68a3      	ldr	r3, [r4, #8]
 8001d48:	07db      	lsls	r3, r3, #31
 8001d4a:	d5fc      	bpl.n	8001d46 <ReadRegs2+0x1a>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001d4c:	68e3      	ldr	r3, [r4, #12]
	LL_SPI_ReceiveData8(SPI2);

	for (i = 0; i < Bytes; i++)
	{
			  while(!(SPI2->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <ReadRegs2+0x50>)
 8001d50:	440a      	add	r2, r1
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001d52:	2000      	movs	r0, #0
	for (i = 0; i < Bytes; i++)
 8001d54:	4291      	cmp	r1, r2
 8001d56:	d104      	bne.n	8001d62 <ReadRegs2+0x36>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001d58:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <ReadRegs2+0x4c>)
 8001d5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d5e:	619a      	str	r2, [r3, #24]
 8001d60:	bd30      	pop	{r4, r5, pc}
			  while(!(SPI2->SR & SPI_SR_TXE)); //transmit buffer empty?
 8001d62:	689c      	ldr	r4, [r3, #8]
 8001d64:	07a5      	lsls	r5, r4, #30
 8001d66:	d5fc      	bpl.n	8001d62 <ReadRegs2+0x36>
 8001d68:	7318      	strb	r0, [r3, #12]
			  LL_SPI_TransmitData8(SPI2,0x00);

				while(!(SPI2->SR & SPI_SR_RXNE)); //data received?
 8001d6a:	689c      	ldr	r4, [r3, #8]
 8001d6c:	07e4      	lsls	r4, r4, #31
 8001d6e:	d5fc      	bpl.n	8001d6a <ReadRegs2+0x3e>
  return (uint8_t)(READ_REG(SPIx->DR));
 8001d70:	68dc      	ldr	r4, [r3, #12]
 8001d72:	f801 4b01 	strb.w	r4, [r1], #1
 8001d76:	e7ed      	b.n	8001d54 <ReadRegs2+0x28>
 8001d78:	48000400 	.word	0x48000400
 8001d7c:	40003800 	.word	0x40003800

08001d80 <F_Sensor_ADC_Store>:
}


//Toe: ADC1_Ch3_PC2=ADC1  Heel: ADC2_Ch4_PC3=ADC2
void F_Sensor_ADC_Store(void)
{
 8001d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	  LL_ADC_REG_StartConversion(ADC2);
 8001d82:	4825      	ldr	r0, [pc, #148]	; (8001e18 <F_Sensor_ADC_Store+0x98>)
	  ADC_TimeOut_Count_Buf=0;
 8001d84:	4d25      	ldr	r5, [pc, #148]	; (8001e1c <F_Sensor_ADC_Store+0x9c>)
	  ADC_Error_Buf=0;
 8001d86:	4c26      	ldr	r4, [pc, #152]	; (8001e20 <F_Sensor_ADC_Store+0xa0>)
	  LL_ADC_REG_StartConversion(ADC2);
 8001d88:	f7ff f836 	bl	8000df8 <LL_ADC_REG_StartConversion>
	  ADC_TimeOut_Count_Buf=0;
 8001d8c:	2300      	movs	r3, #0
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001d8e:	4822      	ldr	r0, [pc, #136]	; (8001e18 <F_Sensor_ADC_Store+0x98>)
 8001d90:	602b      	str	r3, [r5, #0]
	  ADC_Error_Buf=0;
 8001d92:	7023      	strb	r3, [r4, #0]
 8001d94:	6803      	ldr	r3, [r0, #0]
	  while ((LL_ADC_IsActiveFlag_EOC(ADC2) == 0))
 8001d96:	075a      	lsls	r2, r3, #29
 8001d98:	d537      	bpl.n	8001e0a <F_Sensor_ADC_Store+0x8a>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001d9a:	2304      	movs	r3, #4
	  {
		  Wait_for_ADC_timeout_While_Datalog();
	  }
	  LL_ADC_ClearFlag_EOC(ADC2);
	  BSbuffer[s_flag].Flex2[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC2), LL_ADC_RESOLUTION_12B);  // Toe
 8001d9c:	4f21      	ldr	r7, [pc, #132]	; (8001e24 <F_Sensor_ADC_Store+0xa4>)
 8001d9e:	4e22      	ldr	r6, [pc, #136]	; (8001e28 <F_Sensor_ADC_Store+0xa8>)
 8001da0:	6003      	str	r3, [r0, #0]
 8001da2:	f897 e000 	ldrb.w	lr, [r7]
 8001da6:	6833      	ldr	r3, [r6, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001da8:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8001daa:	4920      	ldr	r1, [pc, #128]	; (8001e2c <F_Sensor_ADC_Store+0xac>)
 8001dac:	eb03 334e 	add.w	r3, r3, lr, lsl #13
 8001db0:	f503 53e7 	add.w	r3, r3, #7392	; 0x1ce0
 8001db4:	3304      	adds	r3, #4
 8001db6:	b280      	uxth	r0, r0
 8001db8:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8001dbc:	4342      	muls	r2, r0
 8001dbe:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001dc2:	fbb2 f2f0 	udiv	r2, r2, r0
	  LL_ADC_REG_StartConversion(ADC1);
 8001dc6:	481a      	ldr	r0, [pc, #104]	; (8001e30 <F_Sensor_ADC_Store+0xb0>)
	  BSbuffer[s_flag].Flex2[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC2), LL_ADC_RESOLUTION_12B);  // Toe
 8001dc8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  LL_ADC_REG_StartConversion(ADC1);
 8001dcc:	f7ff f814 	bl	8000df8 <LL_ADC_REG_StartConversion>
	  ADC_TimeOut_Count_Buf=0;
 8001dd0:	2300      	movs	r3, #0
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001dd2:	4817      	ldr	r0, [pc, #92]	; (8001e30 <F_Sensor_ADC_Store+0xb0>)
 8001dd4:	602b      	str	r3, [r5, #0]
	  ADC_Error_Buf=0;
 8001dd6:	7023      	strb	r3, [r4, #0]
 8001dd8:	460c      	mov	r4, r1
 8001dda:	6803      	ldr	r3, [r0, #0]
	  while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0))
 8001ddc:	075b      	lsls	r3, r3, #29
 8001dde:	d517      	bpl.n	8001e10 <F_Sensor_ADC_Store+0x90>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001de0:	2304      	movs	r3, #4
 8001de2:	6003      	str	r3, [r0, #0]
	  {
		  Wait_for_ADC_timeout_While_Datalog();
	  }
	  LL_ADC_ClearFlag_EOC(ADC1);
	  BSbuffer[s_flag].Flex1[Sub_cnt]= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC1), LL_ADC_RESOLUTION_12B);  //Heel
 8001de4:	7839      	ldrb	r1, [r7, #0]
 8001de6:	6833      	ldr	r3, [r6, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001de8:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8001dea:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 8001dee:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 8001df2:	331c      	adds	r3, #28
 8001df4:	b280      	uxth	r0, r0
 8001df6:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8001dfa:	4342      	muls	r2, r0
 8001dfc:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001e00:	fbb2 f2f1 	udiv	r2, r2, r1
 8001e04:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
 8001e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  Wait_for_ADC_timeout_While_Datalog();
 8001e0a:	f7ff fd3d 	bl	8001888 <Wait_for_ADC_timeout_While_Datalog>
 8001e0e:	e7c1      	b.n	8001d94 <F_Sensor_ADC_Store+0x14>
		  Wait_for_ADC_timeout_While_Datalog();
 8001e10:	f7ff fd3a 	bl	8001888 <Wait_for_ADC_timeout_While_Datalog>
 8001e14:	e7e1      	b.n	8001dda <F_Sensor_ADC_Store+0x5a>
 8001e16:	bf00      	nop
 8001e18:	50040100 	.word	0x50040100
 8001e1c:	20008968 	.word	0x20008968
 8001e20:	20008f27 	.word	0x20008f27
 8001e24:	20000581 	.word	0x20000581
 8001e28:	2000057c 	.word	0x2000057c
 8001e2c:	200005c4 	.word	0x200005c4
 8001e30:	50040000 	.word	0x50040000

08001e34 <ACC_GPIO_INIT>:
}



void ACC_GPIO_INIT(void)
{
 8001e34:	b510      	push	{r4, lr}
	// Configure SCK Pin connected to PA5, MISO PA6, MOSI PA7
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_5, LL_GPIO_MODE_ALTERNATE);
 8001e36:	2202      	movs	r2, #2
 8001e38:	2120      	movs	r1, #32
 8001e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001e3e:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
 8001e42:	f7fe ffff 	bl	8000e44 <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_5, LL_GPIO_AF_5);
 8001e46:	2205      	movs	r2, #5
 8001e48:	2120      	movs	r1, #32
 8001e4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e4e:	f7ff f854 	bl	8000efa <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_5, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8001e52:	2120      	movs	r1, #32
 8001e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e58:	f7ff f87b 	bl	8000f52 <LL_GPIO_SetPinSpeed.constprop.6>
 8001e5c:	6863      	ldr	r3, [r4, #4]
 8001e5e:	f023 0320 	bic.w	r3, r3, #32
 8001e62:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_5, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_5, LL_GPIO_PULL_NO);
 8001e64:	4620      	mov	r0, r4
 8001e66:	2200      	movs	r2, #0
 8001e68:	2120      	movs	r1, #32
 8001e6a:	f7ff f85c 	bl	8000f26 <LL_GPIO_SetPinPull>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 8001e6e:	4620      	mov	r0, r4
 8001e70:	2202      	movs	r2, #2
 8001e72:	2140      	movs	r1, #64	; 0x40
 8001e74:	f7fe ffe6 	bl	8000e44 <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_6, LL_GPIO_AF_5);
 8001e78:	2205      	movs	r2, #5
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	2140      	movs	r1, #64	; 0x40
 8001e7e:	f7ff f83c 	bl	8000efa <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8001e82:	4620      	mov	r0, r4
 8001e84:	2140      	movs	r1, #64	; 0x40
 8001e86:	f7ff f864 	bl	8000f52 <LL_GPIO_SetPinSpeed.constprop.6>
 8001e8a:	6863      	ldr	r3, [r4, #4]
 8001e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e90:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_6, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_6 , LL_GPIO_PULL_NO);
 8001e92:	4620      	mov	r0, r4
 8001e94:	2200      	movs	r2, #0
 8001e96:	2140      	movs	r1, #64	; 0x40
 8001e98:	f7ff f845 	bl	8000f26 <LL_GPIO_SetPinPull>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_ALTERNATE);
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	2180      	movs	r1, #128	; 0x80
 8001ea2:	f7fe ffcf 	bl	8000e44 <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_7, LL_GPIO_AF_5);
 8001ea6:	2205      	movs	r2, #5
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	2180      	movs	r1, #128	; 0x80
 8001eac:	f7ff f825 	bl	8000efa <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_7, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	2180      	movs	r1, #128	; 0x80
 8001eb4:	f7ff f84d 	bl	8000f52 <LL_GPIO_SetPinSpeed.constprop.6>
 8001eb8:	6863      	ldr	r3, [r4, #4]
 8001eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ebe:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_7, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_7, LL_GPIO_PULL_NO);
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2180      	movs	r1, #128	; 0x80
}
 8001ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_7, LL_GPIO_PULL_NO);
 8001eca:	f7ff b82c 	b.w	8000f26 <LL_GPIO_SetPinPull>
	...

08001ed0 <P_IMU1_SPI1_Init>:
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_15, LL_GPIO_PULL_NO);
}


void P_IMU1_SPI1_Init(void)  //MPU9250
{
 8001ed0:	b508      	push	{r3, lr}

LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001ed2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ed6:	f7fe ffa7 	bl	8000e28 <LL_APB2_GRP1_EnableClock>

ACC_GPIO_INIT();
 8001eda:	f7ff ffab 	bl	8001e34 <ACC_GPIO_INIT>
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8001ede:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <P_IMU1_SPI1_Init+0x7c>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8001ee6:	f042 0208 	orr.w	r2, r2, #8
 8001eea:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8001ef2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	f042 0202 	orr.w	r2, r2, #2
 8001f02:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f0a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001f12:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001f16:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f1e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	f022 0204 	bic.w	r2, r2, #4
 8001f26:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f2e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	f442 7282 	orr.w	r2, r2, #260	; 0x104
 8001f36:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f3e:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	f042 0208 	orr.w	r2, r2, #8
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	bd08      	pop	{r3, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40013000 	.word	0x40013000

08001f50 <P_IMU3_SPI2_Init>:



/* SPI2 init function */
void P_IMU3_SPI2_Init(void)
{
 8001f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LL_SPI_InitTypeDef SPI_InitStruct;

  LL_GPIO_InitTypeDef GPIO_InitStruct;

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001f54:	2004      	movs	r0, #4
{
 8001f56:	b092      	sub	sp, #72	; 0x48
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001f58:	f7fe ff58 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001f5c:	2002      	movs	r0, #2
 8001f5e:	f7fe ff55 	bl	8000e0c <LL_AHB2_GRP1_EnableClock>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f62:	4b33      	ldr	r3, [pc, #204]	; (8002030 <P_IMU3_SPI2_Init+0xe0>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
  LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001f64:	4e33      	ldr	r6, [pc, #204]	; (8002034 <P_IMU3_SPI2_Init+0xe4>)
 8001f66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f6c:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f74:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f76:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f78:	2502      	movs	r5, #2
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001f7e:	2705      	movs	r7, #5
  (void)tmpreg;
 8001f80:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f82:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = SPI2_SCK_IMU_PIN;
 8001f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001f88:	a902      	add	r1, sp, #8
 8001f8a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = SPI2_SCK_IMU_PIN;
 8001f8c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f8e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f90:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001f96:	9707      	str	r7, [sp, #28]
  LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001f98:	f004 fe28 	bl	8006bec <LL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI2_MISO_IMU_PIN;
 8001f9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
  LL_GPIO_Init(SPI2_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001fa0:	a902      	add	r1, sp, #8
 8001fa2:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = SPI2_MISO_IMU_PIN;
 8001fa4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fa6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fa8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001faa:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001fac:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001fb0:	9707      	str	r7, [sp, #28]
  LL_GPIO_Init(SPI2_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001fb2:	f004 fe1b 	bl	8006bec <LL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI2_MOSI_IMU_PIN;
 8001fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
  LL_GPIO_Init(SPI2_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001fba:	a902      	add	r1, sp, #8
 8001fbc:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = SPI2_MOSI_IMU_PIN;
 8001fbe:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fc0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fc2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fc4:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc6:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001fca:	9707      	str	r7, [sp, #28]
  LL_GPIO_Init(SPI2_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 8001fcc:	f004 fe0e 	bl	8006bec <LL_GPIO_Init>


  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001fd0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001fd4:	9309      	str	r3, [sp, #36]	; 0x24
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001fd6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001fda:	930a      	str	r3, [sp, #40]	; 0x28
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001fdc:	2301      	movs	r3, #1
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001fde:	9408      	str	r4, [sp, #32]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001fe0:	930c      	str	r3, [sp, #48]	; 0x30
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;

  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001fe2:	940f      	str	r4, [sp, #60]	; 0x3c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001fe4:	9410      	str	r4, [sp, #64]	; 0x40
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
  SPI_InitStruct.CRCPoly = 7;
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001fea:	4c13      	ldr	r4, [pc, #76]	; (8002038 <P_IMU3_SPI2_Init+0xe8>)
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001fec:	930d      	str	r3, [sp, #52]	; 0x34
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8001fee:	2308      	movs	r3, #8
 8001ff0:	930e      	str	r3, [sp, #56]	; 0x38
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001ff2:	a908      	add	r1, sp, #32
  SPI_InitStruct.CRCPoly = 7;
 8001ff4:	2307      	movs	r3, #7
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001ff6:	4620      	mov	r0, r4
  SPI_InitStruct.CRCPoly = 7;
 8001ff8:	9311      	str	r3, [sp, #68]	; 0x44
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001ffa:	950b      	str	r5, [sp, #44]	; 0x2c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001ffc:	f005 f8c4 	bl	8007188 <LL_SPI_Init>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8002000:	6863      	ldr	r3, [r4, #4]
 8002002:	f023 0308 	bic.w	r3, r3, #8
 8002006:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8002008:	6863      	ldr	r3, [r4, #4]
 800200a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800200e:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8002010:	6863      	ldr	r3, [r4, #4]
 8002012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002016:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800201e:	6023      	str	r3, [r4, #0]

  LL_SPI_SetRxFIFOThreshold(SPI2,LL_SPI_RX_FIFO_TH_QUARTER);
  LL_SPI_DisableIT_RXNE(SPI2);
  LL_SPI_Enable(SPI2);

  delay_us(10000);
 8002020:	f242 7010 	movw	r0, #10000	; 0x2710
 8002024:	f001 f842 	bl	80030ac <delay_us>

}
 8002028:	b012      	add	sp, #72	; 0x48
 800202a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	48000400 	.word	0x48000400
 8002038:	40003800 	.word	0x40003800

0800203c <Configure_USART_1>:


void Configure_USART_1(void)   // USART1: PB6-Tx, (PA10-Rx disabled)
{
 800203c:	b510      	push	{r4, lr}

// Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up
LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 800203e:	4c18      	ldr	r4, [pc, #96]	; (80020a0 <Configure_USART_1+0x64>)
 8002040:	2202      	movs	r2, #2
 8002042:	2140      	movs	r1, #64	; 0x40
 8002044:	4620      	mov	r0, r4
 8002046:	f7fe fefd 	bl	8000e44 <LL_GPIO_SetPinMode>
LL_GPIO_SetAFPin_0_7(GPIOB, LL_GPIO_PIN_6, LL_GPIO_AF_7);
 800204a:	2207      	movs	r2, #7
 800204c:	2140      	movs	r1, #64	; 0x40
 800204e:	4620      	mov	r0, r4
 8002050:	f7fe ff53 	bl	8000efa <LL_GPIO_SetAFPin_0_7>
LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8002054:	2140      	movs	r1, #64	; 0x40
 8002056:	4620      	mov	r0, r4
 8002058:	f7fe ff7b 	bl	8000f52 <LL_GPIO_SetPinSpeed.constprop.6>
 800205c:	6863      	ldr	r3, [r4, #4]
 800205e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002062:	6063      	str	r3, [r4, #4]
LL_GPIO_SetPinOutputType(GPIOB, LL_GPIO_PIN_6, LL_GPIO_OUTPUT_PUSHPULL);
LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_UP);
 8002064:	2201      	movs	r2, #1
 8002066:	2140      	movs	r1, #64	; 0x40
 8002068:	4620      	mov	r0, r4
 800206a:	f7fe ff5c 	bl	8000f26 <LL_GPIO_SetPinPull>

RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1 clock enable, Clock source Default peripheral clock PCLK2, APB2
 800206e:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <Configure_USART_1+0x68>)
 8002070:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002076:	6613      	str	r3, [r2, #96]	; 0x60

// Default parameter: 8 data bit, 1 start bit, 1 stop bit, no parity, no hardware flow control

MODIFY_REG(USART1->CR1, USART_CR1_RE | USART_CR1_TE, (USART_CR1_TE |USART_CR1_RE));  // TX/RX direction BidirecttionalLL_USART_DIRECTION_TX_RX
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <Configure_USART_1+0x6c>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	f042 020c 	orr.w	r2, r2, #12
 8002080:	601a      	str	r2, [r3, #0]

USART1->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(SystemCoreClock, 115200));  // Baud rate 115200
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <Configure_USART_1+0x70>)
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800208a:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 800208e:	fbb2 f2f1 	udiv	r2, r2, r1
 8002092:	60da      	str	r2, [r3, #12]

USART1->CR1|= USART_CR1_UE;  // Unable USART1
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	bd10      	pop	{r4, pc}
 800209e:	bf00      	nop
 80020a0:	48000400 	.word	0x48000400
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40013800 	.word	0x40013800
 80020ac:	20000004 	.word	0x20000004

080020b0 <USART1_wr_print>:

void USART1_wr_print(uint8_t *buffer, uint32_t nBytes)
{
for (int i=0;i<nBytes;i++)
{
while(!(USART1->ISR & USART_ISR_TXE));
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <USART1_wr_print+0x28>)
 80020b2:	4401      	add	r1, r0
for (int i=0;i<nBytes;i++)
 80020b4:	4288      	cmp	r0, r1
 80020b6:	d100      	bne.n	80020ba <USART1_wr_print+0xa>
USART1->TDR= buffer[i]& 0xFF;

while(!(USART1->ISR & USART_ISR_TC));
USART1->ISR &= ~USART_ISR_TC;
}
}
 80020b8:	4770      	bx	lr
while(!(USART1->ISR & USART_ISR_TXE));
 80020ba:	69da      	ldr	r2, [r3, #28]
 80020bc:	0612      	lsls	r2, r2, #24
 80020be:	d5fc      	bpl.n	80020ba <USART1_wr_print+0xa>
USART1->TDR= buffer[i]& 0xFF;
 80020c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020c4:	851a      	strh	r2, [r3, #40]	; 0x28
while(!(USART1->ISR & USART_ISR_TC));
 80020c6:	69da      	ldr	r2, [r3, #28]
 80020c8:	0652      	lsls	r2, r2, #25
 80020ca:	d5fc      	bpl.n	80020c6 <USART1_wr_print+0x16>
USART1->ISR &= ~USART_ISR_TC;
 80020cc:	69da      	ldr	r2, [r3, #28]
 80020ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d2:	61da      	str	r2, [r3, #28]
 80020d4:	e7ee      	b.n	80020b4 <USART1_wr_print+0x4>
 80020d6:	bf00      	nop
 80020d8:	40013800 	.word	0x40013800

080020dc <Clear_ErrorTimestamp_Buffer>:

int FPGA_Loop_Error_cnt;

void Clear_ErrorTimestamp_Buffer(void)
{
	ErrorCodeBuf=0;
 80020dc:	4a02      	ldr	r2, [pc, #8]	; (80020e8 <Clear_ErrorTimestamp_Buffer+0xc>)
 80020de:	2300      	movs	r3, #0
 80020e0:	7013      	strb	r3, [r2, #0]
	ErrorTimeStampBuf=0;
 80020e2:	4a02      	ldr	r2, [pc, #8]	; (80020ec <Clear_ErrorTimestamp_Buffer+0x10>)
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4770      	bx	lr
 80020e8:	20008698 	.word	0x20008698
 80020ec:	2000869c 	.word	0x2000869c

080020f0 <Reset_All>:
{
 80020f0:	b508      	push	{r3, lr}
	last_file=0;
 80020f2:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <Reset_All+0x38>)
 80020f4:	2100      	movs	r1, #0
 80020f6:	6019      	str	r1, [r3, #0]
	Sub_cnt=0;                // Array Index count in a single buffer to store values
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <Reset_All+0x3c>)
 80020fa:	6019      	str	r1, [r3, #0]
	w_flag=1;                 // Buffer write flag to be written in FATFS file (1=Buffer1, 0=Buffer0)
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <Reset_All+0x40>)
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
	s_flag=0;                 // Buffer Store flag to be stored/filled by sensor values in interrupt (1=Buffer1, 0=Buffer0)
 8002102:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <Reset_All+0x44>)
 8002104:	7019      	strb	r1, [r3, #0]
	SD_write_Flag = 0;        // Flag to indicates whether a buffer a full and ready to write in SD card
 8002106:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <Reset_All+0x48>)
 8002108:	7019      	strb	r1, [r3, #0]
	SD_Write_Count = 0;       // Number of SD write. If reach a predefined value, f_sync() operation will update FATFS files.
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <Reset_All+0x4c>)
 800210c:	7019      	strb	r1, [r3, #0]
	Clear_ErrorTimestamp_Buffer();
 800210e:	f7ff ffe5 	bl	80020dc <Clear_ErrorTimestamp_Buffer>
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <Reset_All+0x50>)
	Error_reg_log.Error[indxE]=0;
 8002114:	460a      	mov	r2, r1
 8002116:	f1a3 0008 	sub.w	r0, r3, #8
 800211a:	540a      	strb	r2, [r1, r0]
	for(int indxE=0;indxE<10;indxE++)
 800211c:	3101      	adds	r1, #1
 800211e:	290a      	cmp	r1, #10
	Error_reg_log.ErrorTime[indxE]=0;
 8002120:	f843 2f04 	str.w	r2, [r3, #4]!
	for(int indxE=0;indxE<10;indxE++)
 8002124:	d1f9      	bne.n	800211a <Reset_All+0x2a>
}
 8002126:	bd08      	pop	{r3, pc}
 8002128:	20008c9c 	.word	0x20008c9c
 800212c:	2000057c 	.word	0x2000057c
 8002130:	20000000 	.word	0x20000000
 8002134:	20000581 	.word	0x20000581
 8002138:	2000868c 	.word	0x2000868c
 800213c:	20000578 	.word	0x20000578
 8002140:	200085cc 	.word	0x200085cc

08002144 <Save_ErrorTimestamp_Buffer>:
}

void Save_ErrorTimestamp_Buffer(uint8_t ErrorCode)
{
 8002144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ErrorCodeBuf=ErrorCode;
 8002146:	4b21      	ldr	r3, [pc, #132]	; (80021cc <Save_ErrorTimestamp_Buffer+0x88>)
{
 8002148:	4606      	mov	r6, r0
	ErrorCodeBuf=ErrorCode;
 800214a:	7018      	strb	r0, [r3, #0]
	ErrorTimeStampBuf=__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))*10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800214c:	f7fe ff96 	bl	800107c <LL_RTC_TIME_GetHour.constprop.13>
 8002150:	4604      	mov	r4, r0
 8002152:	f7fe ff93 	bl	800107c <LL_RTC_TIME_GetHour.constprop.13>
 8002156:	4605      	mov	r5, r0
 8002158:	f7fe ff76 	bl	8001048 <LL_RTC_TIME_GetMinute.constprop.12>
 800215c:	f3c4 1403 	ubfx	r4, r4, #4, #4
 8002160:	4607      	mov	r7, r0
 8002162:	f7fe ff71 	bl	8001048 <LL_RTC_TIME_GetMinute.constprop.12>
 8002166:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800216a:	f005 040f 	and.w	r4, r5, #15
 800216e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8002172:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8002176:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800217a:	f000 000f 	and.w	r0, r0, #15
 800217e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8002182:	b2c0      	uxtb	r0, r0
 8002184:	2364      	movs	r3, #100	; 0x64
 8002186:	fb10 f003 	smulbb	r0, r0, r3
 800218a:	b2e4      	uxtb	r4, r4
 800218c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002190:	fb03 0404 	mla	r4, r3, r4, r0
 8002194:	f7fe ff40 	bl	8001018 <LL_RTC_TIME_GetSecond.constprop.11>
 8002198:	4605      	mov	r5, r0
 800219a:	f7fe ff3d 	bl	8001018 <LL_RTC_TIME_GetSecond.constprop.11>
 800219e:	f3c5 1303 	ubfx	r3, r5, #4, #4
 80021a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80021a6:	f000 000f 	and.w	r0, r0, #15
 80021aa:	eb00 0043 	add.w	r0, r0, r3, lsl #1

	Error_reg_log.Error[Error_indx]=ErrorCode;
 80021ae:	4908      	ldr	r1, [pc, #32]	; (80021d0 <Save_ErrorTimestamp_Buffer+0x8c>)
	ErrorTimeStampBuf=__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))*10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <Save_ErrorTimestamp_Buffer+0x90>)
	Error_reg_log.Error[Error_indx]=ErrorCode;
 80021b2:	4a09      	ldr	r2, [pc, #36]	; (80021d8 <Save_ErrorTimestamp_Buffer+0x94>)
	ErrorTimeStampBuf=__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))*10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80021b4:	fa54 f480 	uxtab	r4, r4, r0
 80021b8:	601c      	str	r4, [r3, #0]
	Error_reg_log.Error[Error_indx]=ErrorCode;
 80021ba:	780b      	ldrb	r3, [r1, #0]
 80021bc:	54d6      	strb	r6, [r2, r3]
	Error_reg_log.ErrorTime[Error_indx]=ErrorTimeStampBuf;
 80021be:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Error_indx++;
 80021c2:	3301      	adds	r3, #1
 80021c4:	700b      	strb	r3, [r1, #0]
	Error_reg_log.ErrorTime[Error_indx]=ErrorTimeStampBuf;
 80021c6:	60d4      	str	r4, [r2, #12]
	Error_indx++;
 80021c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20008698 	.word	0x20008698
 80021d0:	2000899e 	.word	0x2000899e
 80021d4:	2000869c 	.word	0x2000869c
 80021d8:	200085c4 	.word	0x200085c4

080021dc <AIM_Error_Handler>:
}

void AIM_Error_Handler(int AIM_Error_Code)
{
    switch(AIM_Error_Code) {
 80021dc:	3801      	subs	r0, #1
{
 80021de:	b510      	push	{r4, lr}
    switch(AIM_Error_Code) {
 80021e0:	280f      	cmp	r0, #15
 80021e2:	d862      	bhi.n	80022aa <AIM_Error_Handler+0xce>
 80021e4:	e8df f000 	tbb	[pc, r0]
 80021e8:	392e611e 	.word	0x392e611e
 80021ec:	4661610f 	.word	0x4661610f
 80021f0:	54616161 	.word	0x54616161
 80021f4:	08616161 	.word	0x08616161

	case FPGA_SPI_R_Error:
		Save_ErrorTimestamp_Buffer(FPGA_SPI_R_Error);
 80021f8:	2010      	movs	r0, #16
 80021fa:	f7ff ffa3 	bl	8002144 <Save_ErrorTimestamp_Buffer>
		FATAL_Error = 1;
 80021fe:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <AIM_Error_Handler+0xd0>)
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]

	break;
 8002204:	bd10      	pop	{r4, pc}

			case f_write_E:
				file_reopen();
 8002206:	f7ff f867 	bl	80012d8 <file_reopen>
				if (Fat_write_read_fail==1) // Could not solve write issue by reopening file
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <AIM_Error_Handler+0xd4>)
 800220c:	681c      	ldr	r4, [r3, #0]
 800220e:	2c01      	cmp	r4, #1
 8002210:	d14b      	bne.n	80022aa <AIM_Error_Handler+0xce>
								  {
									   Fat_read_mnt_fail=0;
 8002212:	4b28      	ldr	r3, [pc, #160]	; (80022b4 <AIM_Error_Handler+0xd8>)
 8002214:	2200      	movs	r2, #0
										Save_ErrorTimestamp_Buffer(f_write_E);
 8002216:	2005      	movs	r0, #5
									   Fat_read_mnt_fail=0;
 8002218:	601a      	str	r2, [r3, #0]
										Save_ErrorTimestamp_Buffer(f_write_E);
 800221a:	f7ff ff93 	bl	8002144 <Save_ErrorTimestamp_Buffer>
										File_Sensor_write_issue=1;
 800221e:	4b26      	ldr	r3, [pc, #152]	; (80022b8 <AIM_Error_Handler+0xdc>)
				file_reopen_sync();
				if (Fat_sync_read_fail==1) // Could not solve write issue by reopening file
								  {
										Fat_sync_read_fail=0;
										Save_ErrorTimestamp_Buffer(f_sync_E);
										File_Sensor_close_issue=1;
 8002220:	701c      	strb	r4, [r3, #0]
 8002222:	e018      	b.n	8002256 <AIM_Error_Handler+0x7a>
				file_mnt_reopen();
 8002224:	f7ff f870 	bl	8001308 <file_mnt_reopen>
				  if (Fat_read_mnt_fail==1) // Could not solve read issue by FATFS mount
 8002228:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <AIM_Error_Handler+0xd8>)
 800222a:	681c      	ldr	r4, [r3, #0]
 800222c:	2c01      	cmp	r4, #1
 800222e:	d13c      	bne.n	80022aa <AIM_Error_Handler+0xce>
					  Fat_read_mnt_fail=0;
 8002230:	2200      	movs	r2, #0
						Save_ErrorTimestamp_Buffer(f_open_E);
 8002232:	4620      	mov	r0, r4
					  Fat_read_mnt_fail=0;
 8002234:	601a      	str	r2, [r3, #0]
						Save_ErrorTimestamp_Buffer(f_open_E);
 8002236:	f7ff ff85 	bl	8002144 <Save_ErrorTimestamp_Buffer>
						FATAL_Error = 1;
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <AIM_Error_Handler+0xd0>)
 800223c:	701c      	strb	r4, [r3, #0]
						Skip_FATFS =1;
 800223e:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <AIM_Error_Handler+0xe0>)
										FATAL_Error = 1;
 8002240:	701c      	strb	r4, [r3, #0]
 8002242:	bd10      	pop	{r4, pc}
				Try_FATFS_Mount();
 8002244:	f7ff f802 	bl	800124c <Try_FATFS_Mount>
				if (Skip_FATFS==1)  // Could not solve FATFS mount
 8002248:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <AIM_Error_Handler+0xe0>)
 800224a:	781c      	ldrb	r4, [r3, #0]
 800224c:	2c01      	cmp	r4, #1
 800224e:	d12c      	bne.n	80022aa <AIM_Error_Handler+0xce>
				Save_ErrorTimestamp_Buffer(f_mount_E);
 8002250:	2003      	movs	r0, #3
 8002252:	f7ff ff77 	bl	8002144 <Save_ErrorTimestamp_Buffer>
										FATAL_Error = 1;
 8002256:	4b15      	ldr	r3, [pc, #84]	; (80022ac <AIM_Error_Handler+0xd0>)
 8002258:	e7f2      	b.n	8002240 <AIM_Error_Handler+0x64>
				file_reopen_sync();
 800225a:	f7ff f825 	bl	80012a8 <file_reopen_sync>
				if (Fat_sync_read_fail==1) // Could not solve write issue by reopening file
 800225e:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <AIM_Error_Handler+0xe4>)
 8002260:	681c      	ldr	r4, [r3, #0]
 8002262:	2c01      	cmp	r4, #1
 8002264:	d121      	bne.n	80022aa <AIM_Error_Handler+0xce>
										Fat_sync_read_fail=0;
 8002266:	2200      	movs	r2, #0
										Save_ErrorTimestamp_Buffer(f_sync_E);
 8002268:	2004      	movs	r0, #4
										Fat_sync_read_fail=0;
 800226a:	601a      	str	r2, [r3, #0]
										Save_ErrorTimestamp_Buffer(f_sync_E);
 800226c:	f7ff ff6a 	bl	8002144 <Save_ErrorTimestamp_Buffer>
										File_Sensor_close_issue=1;
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <AIM_Error_Handler+0xe8>)
 8002272:	e7d5      	b.n	8002220 <AIM_Error_Handler+0x44>

			break;

			case SPI_Acc_Error :

				if (SPI_ErrorCnt>3)
 8002274:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <AIM_Error_Handler+0xec>)
 8002276:	7813      	ldrb	r3, [r2, #0]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d914      	bls.n	80022a6 <AIM_Error_Handler+0xca>
				{
				SPI_ErrorCnt=0;
 800227c:	2300      	movs	r3, #0
 800227e:	7013      	strb	r3, [r2, #0]
				FATAL_Error = 1;
 8002280:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <AIM_Error_Handler+0xd0>)
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
				Save_ErrorTimestamp_Buffer(SPI_Acc_Error);
 8002286:	2008      	movs	r0, #8
		    default :

		    break;

    }
}
 8002288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				Save_ErrorTimestamp_Buffer(ADC_R_Error);
 800228c:	f7ff bf5a 	b.w	8002144 <Save_ErrorTimestamp_Buffer>
				if (ADC_ErrorCnt>3)
 8002290:	4a0e      	ldr	r2, [pc, #56]	; (80022cc <AIM_Error_Handler+0xf0>)
 8002292:	7813      	ldrb	r3, [r2, #0]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d906      	bls.n	80022a6 <AIM_Error_Handler+0xca>
				ADC_ErrorCnt=0;
 8002298:	2300      	movs	r3, #0
 800229a:	7013      	strb	r3, [r2, #0]
				FATAL_Error = 1;
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <AIM_Error_Handler+0xd0>)
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
				Save_ErrorTimestamp_Buffer(ADC_R_Error);
 80022a2:	200c      	movs	r0, #12
 80022a4:	e7f0      	b.n	8002288 <AIM_Error_Handler+0xac>
				ADC_ErrorCnt++;
 80022a6:	3301      	adds	r3, #1
 80022a8:	7013      	strb	r3, [r2, #0]
 80022aa:	bd10      	pop	{r4, pc}
 80022ac:	20008c98 	.word	0x20008c98
 80022b0:	20008944 	.word	0x20008944
 80022b4:	200089ec 	.word	0x200089ec
 80022b8:	20008964 	.word	0x20008964
 80022bc:	20008c99 	.word	0x20008c99
 80022c0:	20008948 	.word	0x20008948
 80022c4:	20008a2e 	.word	0x20008a2e
 80022c8:	20008f2c 	.word	0x20008f2c
 80022cc:	20008ca0 	.word	0x20008ca0

080022d0 <FATFS_Init>:
{
 80022d0:	b510      	push	{r4, lr}
	  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 80022d2:	490b      	ldr	r1, [pc, #44]	; (8002300 <FATFS_Init+0x30>)
 80022d4:	480b      	ldr	r0, [pc, #44]	; (8002304 <FATFS_Init+0x34>)
 80022d6:	4c0c      	ldr	r4, [pc, #48]	; (8002308 <FATFS_Init+0x38>)
 80022d8:	f007 ff76 	bl	800a1c8 <FATFS_LinkDriver>
 80022dc:	b928      	cbnz	r0, 80022ea <FATFS_Init+0x1a>
			 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 80022de:	2201      	movs	r2, #1
 80022e0:	4907      	ldr	r1, [pc, #28]	; (8002300 <FATFS_Init+0x30>)
 80022e2:	480a      	ldr	r0, [pc, #40]	; (800230c <FATFS_Init+0x3c>)
 80022e4:	f007 fa9e 	bl	8009824 <f_mount>
 80022e8:	b108      	cbz	r0, 80022ee <FATFS_Init+0x1e>
				 Fat_mnt_fail=1;
 80022ea:	2301      	movs	r3, #1
 80022ec:	6023      	str	r3, [r4, #0]
	  if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d104      	bne.n	80022fe <FATFS_Init+0x2e>
		  AIM_Error_Handler(f_mount_E);
 80022f4:	2003      	movs	r0, #3
}
 80022f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		  AIM_Error_Handler(f_mount_E);
 80022fa:	f7ff bf6f 	b.w	80021dc <AIM_Error_Handler>
 80022fe:	bd10      	pop	{r4, pc}
 8002300:	20008a35 	.word	0x20008a35
 8002304:	0800b7bc 	.word	0x0800b7bc
 8002308:	20008940 	.word	0x20008940
 800230c:	20008a44 	.word	0x20008a44

08002310 <Check_SD_Command_File>:
{
 8002310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  Data_log_Start_Resume = 0;
 8002312:	4c31      	ldr	r4, [pc, #196]	; (80023d8 <Check_SD_Command_File+0xc8>)
	 if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8002314:	4931      	ldr	r1, [pc, #196]	; (80023dc <Check_SD_Command_File+0xcc>)
 8002316:	4832      	ldr	r0, [pc, #200]	; (80023e0 <Check_SD_Command_File+0xd0>)
 8002318:	4e32      	ldr	r6, [pc, #200]	; (80023e4 <Check_SD_Command_File+0xd4>)
	  Data_log_Start_Resume = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	7023      	strb	r3, [r4, #0]
	 if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 800231e:	f007 ff53 	bl	800a1c8 <FATFS_LinkDriver>
 8002322:	b930      	cbnz	r0, 8002332 <Check_SD_Command_File+0x22>
	 if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK)  // Register the file system object to the FatFs module
 8002324:	2201      	movs	r2, #1
 8002326:	492d      	ldr	r1, [pc, #180]	; (80023dc <Check_SD_Command_File+0xcc>)
 8002328:	482f      	ldr	r0, [pc, #188]	; (80023e8 <Check_SD_Command_File+0xd8>)
 800232a:	f007 fa7b 	bl	8009824 <f_mount>
 800232e:	4605      	mov	r5, r0
 8002330:	b148      	cbz	r0, 8002346 <Check_SD_Command_File+0x36>
		 Fat_mnt_fail=1;
 8002332:	2301      	movs	r3, #1
 8002334:	6033      	str	r3, [r6, #0]
	  if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 8002336:	6833      	ldr	r3, [r6, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d14b      	bne.n	80023d4 <Check_SD_Command_File+0xc4>
		  AIM_Error_Handler(f_mount_E);
 800233c:	2003      	movs	r0, #3
}
 800233e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		  AIM_Error_Handler(f_mount_E);
 8002342:	f7ff bf4b 	b.w	80021dc <AIM_Error_Handler>
		 if(f_open(&MyFile, "EnterDFU.txt", FA_READ) != FR_OK) // Check the presence of EnterDFU.txt file
 8002346:	2201      	movs	r2, #1
 8002348:	4928      	ldr	r1, [pc, #160]	; (80023ec <Check_SD_Command_File+0xdc>)
 800234a:	4829      	ldr	r0, [pc, #164]	; (80023f0 <Check_SD_Command_File+0xe0>)
 800234c:	f007 faa0 	bl	8009890 <f_open>
 8002350:	4607      	mov	r7, r0
 8002352:	b360      	cbz	r0, 80023ae <Check_SD_Command_File+0x9e>
			   if(f_open(&MyFile, "EnterVCP.txt", FA_READ) != FR_OK) // Check the presence of EnterVCP.txt file
 8002354:	2201      	movs	r2, #1
 8002356:	4927      	ldr	r1, [pc, #156]	; (80023f4 <Check_SD_Command_File+0xe4>)
 8002358:	4825      	ldr	r0, [pc, #148]	; (80023f0 <Check_SD_Command_File+0xe0>)
 800235a:	f007 fa99 	bl	8009890 <f_open>
 800235e:	b1f0      	cbz	r0, 800239e <Check_SD_Command_File+0x8e>
					 if (Logstart_Delete ==1)
 8002360:	4b25      	ldr	r3, [pc, #148]	; (80023f8 <Check_SD_Command_File+0xe8>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2a01      	cmp	r2, #1
 8002366:	d104      	bne.n	8002372 <Check_SD_Command_File+0x62>
								  if (f_unlink ("LogStart.txt") == FR_OK) {    // If LogStart.txt file present, delete the file
 8002368:	4824      	ldr	r0, [pc, #144]	; (80023fc <Check_SD_Command_File+0xec>)
						 Logstart_Delete=0;
 800236a:	601d      	str	r5, [r3, #0]
					  if (f_unlink ("EnterVCP.txt") == FR_OK) {    // If EnterVCP.txt file present, delete the file
 800236c:	f007 fe90 	bl	800a090 <f_unlink>
 8002370:	e006      	b.n	8002380 <Check_SD_Command_File+0x70>
				   if(f_open(&MyFile, "LogStart.txt", FA_READ) != FR_OK) // Check the presence of LogStart.txt file
 8002372:	2201      	movs	r2, #1
 8002374:	4921      	ldr	r1, [pc, #132]	; (80023fc <Check_SD_Command_File+0xec>)
 8002376:	481e      	ldr	r0, [pc, #120]	; (80023f0 <Check_SD_Command_File+0xe0>)
 8002378:	f007 fa8a 	bl	8009890 <f_open>
 800237c:	b148      	cbz	r0, 8002392 <Check_SD_Command_File+0x82>
					   Data_log_Start_Resume = 0;          // Data Log Stops
 800237e:	7025      	strb	r5, [r4, #0]
			f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 8002380:	2200      	movs	r2, #0
 8002382:	491f      	ldr	r1, [pc, #124]	; (8002400 <Check_SD_Command_File+0xf0>)
 8002384:	4610      	mov	r0, r2
 8002386:	f007 fa4d 	bl	8009824 <f_mount>
			FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 800238a:	4814      	ldr	r0, [pc, #80]	; (80023dc <Check_SD_Command_File+0xcc>)
 800238c:	f007 ff38 	bl	800a200 <FATFS_UnLinkDriver>
 8002390:	e7d1      	b.n	8002336 <Check_SD_Command_File+0x26>
					   Data_log_Start_Resume = 1;          // Data Log Starts/Resume
 8002392:	2301      	movs	r3, #1
					   f_close(&MyFile);
 8002394:	4816      	ldr	r0, [pc, #88]	; (80023f0 <Check_SD_Command_File+0xe0>)
					   Data_log_Start_Resume = 1;          // Data Log Starts/Resume
 8002396:	7023      	strb	r3, [r4, #0]
					   f_close(&MyFile);
 8002398:	f007 fca1 	bl	8009cde <f_close>
 800239c:	e7f0      	b.n	8002380 <Check_SD_Command_File+0x70>
				     USB_Mode = 0;                       // USB VCP mode in Next USB Connectivity
 800239e:	4b19      	ldr	r3, [pc, #100]	; (8002404 <Check_SD_Command_File+0xf4>)
				     Data_log_Start_Resume = 0;          // Data Log Stops
 80023a0:	7020      	strb	r0, [r4, #0]
				     USB_Mode = 0;                       // USB VCP mode in Next USB Connectivity
 80023a2:	7018      	strb	r0, [r3, #0]
					 f_close(&MyFile);
 80023a4:	4812      	ldr	r0, [pc, #72]	; (80023f0 <Check_SD_Command_File+0xe0>)
 80023a6:	f007 fc9a 	bl	8009cde <f_close>
					  if (f_unlink ("EnterVCP.txt") == FR_OK) {    // If EnterVCP.txt file present, delete the file
 80023aa:	4812      	ldr	r0, [pc, #72]	; (80023f4 <Check_SD_Command_File+0xe4>)
 80023ac:	e7de      	b.n	800236c <Check_SD_Command_File+0x5c>
			 f_close(&MyFile);
 80023ae:	4810      	ldr	r0, [pc, #64]	; (80023f0 <Check_SD_Command_File+0xe0>)
 80023b0:	f007 fc95 	bl	8009cde <f_close>
			  if (f_unlink ("EnterDFU.txt") == FR_OK) {    // If EnterDFU.txt file present, delete the file
 80023b4:	480d      	ldr	r0, [pc, #52]	; (80023ec <Check_SD_Command_File+0xdc>)
 80023b6:	f007 fe6b 	bl	800a090 <f_unlink>
				f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 80023ba:	463a      	mov	r2, r7
 80023bc:	4910      	ldr	r1, [pc, #64]	; (8002400 <Check_SD_Command_File+0xf0>)
 80023be:	4638      	mov	r0, r7
 80023c0:	f007 fa30 	bl	8009824 <f_mount>
				FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 80023c4:	4805      	ldr	r0, [pc, #20]	; (80023dc <Check_SD_Command_File+0xcc>)
 80023c6:	f007 ff1b 	bl	800a200 <FATFS_UnLinkDriver>
			*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 80023ca:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <Check_SD_Command_File+0xf8>)
 80023cc:	4a0f      	ldr	r2, [pc, #60]	; (800240c <Check_SD_Command_File+0xfc>)
 80023ce:	601a      	str	r2, [r3, #0]
			 NVIC_SystemReset();        // System reset
 80023d0:	f7fe fd00 	bl	8000dd4 <NVIC_SystemReset>
 80023d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20008681 	.word	0x20008681
 80023dc:	20008a35 	.word	0x20008a35
 80023e0:	0800b7bc 	.word	0x0800b7bc
 80023e4:	20008940 	.word	0x20008940
 80023e8:	20008a44 	.word	0x20008a44
 80023ec:	0800b529 	.word	0x0800b529
 80023f0:	20008ca4 	.word	0x20008ca4
 80023f4:	0800b536 	.word	0x0800b536
 80023f8:	20009438 	.word	0x20009438
 80023fc:	0800b543 	.word	0x0800b543
 8002400:	0800b6e7 	.word	0x0800b6e7
 8002404:	20008f64 	.word	0x20008f64
 8002408:	20017ff0 	.word	0x20017ff0
 800240c:	deadbeef 	.word	0xdeadbeef

08002410 <Execute_VCP_Command>:
	 if (EnterReset_Create ==1)
 8002410:	4a10      	ldr	r2, [pc, #64]	; (8002454 <Execute_VCP_Command+0x44>)
 8002412:	6811      	ldr	r1, [r2, #0]
{
 8002414:	b538      	push	{r3, r4, r5, lr}
	  Data_log_Start_Resume = 0;
 8002416:	4c10      	ldr	r4, [pc, #64]	; (8002458 <Execute_VCP_Command+0x48>)
 8002418:	2300      	movs	r3, #0
	 if (EnterReset_Create ==1)
 800241a:	2901      	cmp	r1, #1
	  Data_log_Start_Resume = 0;
 800241c:	7023      	strb	r3, [r4, #0]
	 if (EnterReset_Create ==1)
 800241e:	d102      	bne.n	8002426 <Execute_VCP_Command+0x16>
		 EnterReset_Create =0;
 8002420:	6013      	str	r3, [r2, #0]
			NVIC_SystemReset();    // System reset
 8002422:	f7fe fcd7 	bl	8000dd4 <NVIC_SystemReset>
	 if (EnterDFU_Create ==1)
 8002426:	4a0d      	ldr	r2, [pc, #52]	; (800245c <Execute_VCP_Command+0x4c>)
 8002428:	6811      	ldr	r1, [r2, #0]
 800242a:	2901      	cmp	r1, #1
 800242c:	d104      	bne.n	8002438 <Execute_VCP_Command+0x28>
		    EnterDFU_Create =0;
 800242e:	6013      	str	r3, [r2, #0]
			*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <Execute_VCP_Command+0x50>)
 8002432:	4a0c      	ldr	r2, [pc, #48]	; (8002464 <Execute_VCP_Command+0x54>)
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	e7f4      	b.n	8002422 <Execute_VCP_Command+0x12>
	 if (Logstart_Create ==1)
 8002438:	4a0b      	ldr	r2, [pc, #44]	; (8002468 <Execute_VCP_Command+0x58>)
 800243a:	6815      	ldr	r5, [r2, #0]
 800243c:	2d01      	cmp	r5, #1
 800243e:	d107      	bne.n	8002450 <Execute_VCP_Command+0x40>
		 Logstart_Create=0;
 8002440:	6013      	str	r3, [r2, #0]
		 FATFS_Logstart_Ready();
 8002442:	f7fe ffaf 	bl	80013a4 <FATFS_Logstart_Ready>
		 Data_log_Start_Resume = 1;
 8002446:	7025      	strb	r5, [r4, #0]
}
 8002448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		 Check_SD_Command_File();
 800244c:	f7ff bf60 	b.w	8002310 <Check_SD_Command_File>
 8002450:	bd38      	pop	{r3, r4, r5, pc}
 8002452:	bf00      	nop
 8002454:	20009d24 	.word	0x20009d24
 8002458:	20008681 	.word	0x20008681
 800245c:	2000a914 	.word	0x2000a914
 8002460:	20017ff0 	.word	0x20017ff0
 8002464:	deadbeef 	.word	0xdeadbeef
 8002468:	200094b4 	.word	0x200094b4

0800246c <Open_File_For_Sensor_Write>:
{
 800246c:	b538      	push	{r3, r4, r5, lr}
	if (Skip_FATFS==0)
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <Open_File_For_Sensor_Write+0x58>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	bb2b      	cbnz	r3, 80024c0 <Open_File_For_Sensor_Write+0x54>
	last_file=GetNextIndex("");
 8002474:	4814      	ldr	r0, [pc, #80]	; (80024c8 <Open_File_For_Sensor_Write+0x5c>)
		res= f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8002476:	4c15      	ldr	r4, [pc, #84]	; (80024cc <Open_File_For_Sensor_Write+0x60>)
 8002478:	4d15      	ldr	r5, [pc, #84]	; (80024d0 <Open_File_For_Sensor_Write+0x64>)
	last_file=GetNextIndex("");
 800247a:	f7fe feb7 	bl	80011ec <GetNextIndex>
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <Open_File_For_Sensor_Write+0x68>)
	sprintf(FILE_NAME_STRING, "%06d.BIN",last_file);
 8002480:	4915      	ldr	r1, [pc, #84]	; (80024d8 <Open_File_For_Sensor_Write+0x6c>)
	last_file=GetNextIndex("");
 8002482:	6018      	str	r0, [r3, #0]
 8002484:	4602      	mov	r2, r0
	sprintf(FILE_NAME_STRING, "%06d.BIN",last_file);
 8002486:	4815      	ldr	r0, [pc, #84]	; (80024dc <Open_File_For_Sensor_Write+0x70>)
 8002488:	f007 ffc2 	bl	800a410 <siprintf>
		res= f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 800248c:	2212      	movs	r2, #18
 800248e:	4913      	ldr	r1, [pc, #76]	; (80024dc <Open_File_For_Sensor_Write+0x70>)
 8002490:	4620      	mov	r0, r4
 8002492:	f007 f9fd 	bl	8009890 <f_open>
 8002496:	7028      	strb	r0, [r5, #0]
		if(res != FR_OK) // Create and Open a new text file object with write access
 8002498:	b140      	cbz	r0, 80024ac <Open_File_For_Sensor_Write+0x40>
			        AIM_Error_Handler(f_open_E);
 800249a:	2001      	movs	r0, #1
 800249c:	f7ff fe9e 	bl	80021dc <AIM_Error_Handler>
				 delay_us(1000);  // Arbitrary delay to complete FATFS SD write
 80024a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 80024a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				 delay_us(1000);  // Arbitrary delay to complete FATFS SD write
 80024a8:	f000 be00 	b.w	80030ac <delay_us>
							f_lseek(&MyFile, MyFile.fsize);   // Increase File Size when big file to write
 80024ac:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 80024b0:	4620      	mov	r0, r4
 80024b2:	f007 fc25 	bl	8009d00 <f_lseek>
							 res= f_sync(&MyFile);
 80024b6:	4620      	mov	r0, r4
 80024b8:	f007 fbb1 	bl	8009c1e <f_sync>
 80024bc:	7028      	strb	r0, [r5, #0]
 80024be:	e7ef      	b.n	80024a0 <Open_File_For_Sensor_Write+0x34>
 80024c0:	bd38      	pop	{r3, r4, r5, pc}
 80024c2:	bf00      	nop
 80024c4:	20008c99 	.word	0x20008c99
 80024c8:	0800b6e7 	.word	0x0800b6e7
 80024cc:	20008ca4 	.word	0x20008ca4
 80024d0:	20008f26 	.word	0x20008f26
 80024d4:	20008c9c 	.word	0x20008c9c
 80024d8:	0800b553 	.word	0x0800b553
 80024dc:	20008988 	.word	0x20008988

080024e0 <Datalog_Sensor_Initialization>:
{
 80024e0:	b508      	push	{r3, lr}
		 FATFS_Init();
 80024e2:	f7ff fef5 	bl	80022d0 <FATFS_Init>
		Open_File_For_Sensor_Write();
 80024e6:	f7ff ffc1 	bl	800246c <Open_File_For_Sensor_Write>
		if (Skip_FATFS==0)
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <Datalog_Sensor_Initialization+0x1c>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	b91b      	cbnz	r3, 80024f8 <Datalog_Sensor_Initialization+0x18>
}
 80024f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Reset_All();                       // Reset All Buffer parameters for FATFS SDIO write
 80024f4:	f7ff bdfc 	b.w	80020f0 <Reset_All>
 80024f8:	bd08      	pop	{r3, pc}
 80024fa:	bf00      	nop
 80024fc:	20008c99 	.word	0x20008c99

08002500 <Prepare_Data_Log_State>:
{
 8002500:	b510      	push	{r4, lr}
	   if (Skip_FATFS==0)   // If there's no FATFS SD error
 8002502:	4c11      	ldr	r4, [pc, #68]	; (8002548 <Prepare_Data_Log_State+0x48>)
 8002504:	7821      	ldrb	r1, [r4, #0]
 8002506:	b9f1      	cbnz	r1, 8002546 <Prepare_Data_Log_State+0x46>
		   Battery_ADC_Value=2500;
 8002508:	4b10      	ldr	r3, [pc, #64]	; (800254c <Prepare_Data_Log_State+0x4c>)
 800250a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800250e:	801a      	strh	r2, [r3, #0]
 if (Data_log_Start_Resume == 1)       // Continue Data Log after USB disconnect
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <Prepare_Data_Log_State+0x50>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d10c      	bne.n	8002532 <Prepare_Data_Log_State+0x32>
	 Datalog_Sensor_Initialization();
 8002518:	f7ff ffe2 	bl	80024e0 <Datalog_Sensor_Initialization>
   if (Skip_FATFS==0)   // If there's no FATFS SD error
 800251c:	7823      	ldrb	r3, [r4, #0]
 800251e:	b993      	cbnz	r3, 8002546 <Prepare_Data_Log_State+0x46>
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8002520:	4a0c      	ldr	r2, [pc, #48]	; (8002554 <Prepare_Data_Log_State+0x54>)
 8002522:	6893      	ldr	r3, [r2, #8]
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	6093      	str	r3, [r2, #8]
 800252a:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <Prepare_Data_Log_State+0x58>)
 800252c:	2204      	movs	r2, #4
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	bd10      	pop	{r4, pc}
	else if (VCP_Bypass==1)
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <Prepare_Data_Log_State+0x5c>)
 8002534:	7813      	ldrb	r3, [r2, #0]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d103      	bne.n	8002542 <Prepare_Data_Log_State+0x42>
		VCP_Bypass= 0;
 800253a:	7011      	strb	r1, [r2, #0]
		Pros_state = LP_STOP;
 800253c:	4a08      	ldr	r2, [pc, #32]	; (8002560 <Prepare_Data_Log_State+0x60>)
 800253e:	7013      	strb	r3, [r2, #0]
 8002540:	bd10      	pop	{r4, pc}
  NVIC_SystemReset();
 8002542:	f7fe fc47 	bl	8000dd4 <NVIC_SystemReset>
 8002546:	bd10      	pop	{r4, pc}
 8002548:	20008c99 	.word	0x20008c99
 800254c:	20008c74 	.word	0x20008c74
 8002550:	20008681 	.word	0x20008681
 8002554:	40009400 	.word	0x40009400
 8002558:	e000e100 	.word	0xe000e100
 800255c:	20008a41 	.word	0x20008a41
 8002560:	20008658 	.word	0x20008658

08002564 <USB_Init_Start>:
{
 8002564:	b570      	push	{r4, r5, r6, lr}
	SD_POWER_ON();
 8002566:	f7fe fadd 	bl	8000b24 <SD_POWER_ON>
	 Pros_state = LP_STOP;                  // Next state
 800256a:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <USB_Init_Start+0xb0>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800256c:	492a      	ldr	r1, [pc, #168]	; (8002618 <USB_Init_Start+0xb4>)
	if (Data_log_Start_Resume == 1 )    // If Data log was in operation
 800256e:	4d2b      	ldr	r5, [pc, #172]	; (800261c <USB_Init_Start+0xb8>)
	 Pros_state = LP_STOP;                  // Next state
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
 8002574:	2304      	movs	r3, #4
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	 USB_Clock_Ready();
 800257a:	f7fe fddf 	bl	800113c <USB_Clock_Ready>
 800257e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002582:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if (Data_log_Start_Resume == 1 )    // If Data log was in operation
 8002586:	782a      	ldrb	r2, [r5, #0]
 8002588:	2a01      	cmp	r2, #1
 800258a:	d101      	bne.n	8002590 <USB_Init_Start+0x2c>
		File_Close_Update_Unlink();
 800258c:	f7ff f81c 	bl	80015c8 <File_Close_Update_Unlink>
	if (USB_Mode == 1)               // USB MSC Mode  // Default: USB VCP mode (0), MSC (1)
 8002590:	4e23      	ldr	r6, [pc, #140]	; (8002620 <USB_Init_Start+0xbc>)
	Data_log_Start_Resume = 0;
 8002592:	2400      	movs	r4, #0
 8002594:	702c      	strb	r4, [r5, #0]
    HAL_ResumeTick();                                       // Before entering USB mode, SYS_tick needs to enable
 8002596:	f001 fdcd 	bl	8004134 <HAL_ResumeTick>
	if (USB_Mode == 1)               // USB MSC Mode  // Default: USB VCP mode (0), MSC (1)
 800259a:	7833      	ldrb	r3, [r6, #0]
 800259c:	4d21      	ldr	r5, [pc, #132]	; (8002624 <USB_Init_Start+0xc0>)
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d116      	bne.n	80025d0 <USB_Init_Start+0x6c>
		VIOLET_LED_ONLY();
 80025a2:	f7fe fab3 	bl	8000b0c <VIOLET_LED_ONLY>
		USB_Mode = 0;               // Next mode default USB VCP
 80025a6:	7034      	strb	r4, [r6, #0]
		USB_MSC_Init_Start();
 80025a8:	f7fe ff2a 	bl	8001400 <USB_MSC_Init_Start>
		 FATAL_Error = 0;
 80025ac:	702c      	strb	r4, [r5, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80025ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80025b2:	6914      	ldr	r4, [r2, #16]
		while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));       // Stay USB mode until USB connectivity available PA9
 80025b4:	f414 7400 	ands.w	r4, r4, #512	; 0x200
 80025b8:	d1fb      	bne.n	80025b2 <USB_Init_Start+0x4e>
		Shut_Down_USB();
 80025ba:	f7fe fda1 	bl	8001100 <Shut_Down_USB>
		Enter_Into_DFU=0;
 80025be:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <USB_Init_Start+0xc4>)
 80025c0:	701c      	strb	r4, [r3, #0]
		 Prepare_Data_Log_State();           // Prepare for Data collection
 80025c2:	f7ff ff9d 	bl	8002500 <Prepare_Data_Log_State>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80025c6:	4b14      	ldr	r3, [pc, #80]	; (8002618 <USB_Init_Start+0xb4>)
 80025c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	bd70      	pop	{r4, r5, r6, pc}
  USB_VCP_Init_Start();
 80025d0:	f7fe ff38 	bl	8001444 <USB_VCP_Init_Start>
		if (Battey_Charge_Mode(&USBD_Device) == USBD_OK)   // USB Battery charging mode
 80025d4:	4815      	ldr	r0, [pc, #84]	; (800262c <USB_Init_Start+0xc8>)
 80025d6:	f005 fe53 	bl	8008280 <Battey_Charge_Mode>
 80025da:	b950      	cbnz	r0, 80025f2 <USB_Init_Start+0x8e>
			    FATAL_Error = 0;
 80025dc:	7028      	strb	r0, [r5, #0]
 80025de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80025e2:	6913      	ldr	r3, [r2, #16]
				while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));
 80025e4:	059b      	lsls	r3, r3, #22
 80025e6:	d4fc      	bmi.n	80025e2 <USB_Init_Start+0x7e>
				Shut_Down_USB();
 80025e8:	f7fe fd8a 	bl	8001100 <Shut_Down_USB>
				Check_SD_Command_File();
 80025ec:	f7ff fe90 	bl	8002310 <Check_SD_Command_File>
 80025f0:	e7e7      	b.n	80025c2 <USB_Init_Start+0x5e>
			 ALL_LED_ON();
 80025f2:	f7fe fa5b 	bl	8000aac <ALL_LED_ON>
			 FATAL_Error = 0;
 80025f6:	702c      	strb	r4, [r5, #0]
 80025f8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80025fc:	6914      	ldr	r4, [r2, #16]
		while(LL_GPIO_IsInputPinSet(GPIOA,USB_CONNECTIVITY));       // Stay USB mode until USB connectivity available PA9
 80025fe:	f414 7400 	ands.w	r4, r4, #512	; 0x200
 8002602:	d1fb      	bne.n	80025fc <USB_Init_Start+0x98>
		Shut_Down_USB();
 8002604:	f7fe fd7c 	bl	8001100 <Shut_Down_USB>
		VCP_continue = 0;                     // Variable reset, aviod looping
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <USB_Init_Start+0xcc>)
 800260a:	701c      	strb	r4, [r3, #0]
		Execute_VCP_Command();
 800260c:	f7ff ff00 	bl	8002410 <Execute_VCP_Command>
 8002610:	e7d7      	b.n	80025c2 <USB_Init_Start+0x5e>
 8002612:	bf00      	nop
 8002614:	20008658 	.word	0x20008658
 8002618:	e000e100 	.word	0xe000e100
 800261c:	20008681 	.word	0x20008681
 8002620:	20008f64 	.word	0x20008f64
 8002624:	20008c98 	.word	0x20008c98
 8002628:	20008a42 	.word	0x20008a42
 800262c:	200086a4 	.word	0x200086a4
 8002630:	200089ce 	.word	0x200089ce

08002634 <SD_Sensor_write>:
{
 8002634:	b538      	push	{r3, r4, r5, lr}
	 res= f_write(&MyFile, &BSbuffer[w_flag], (8192*2), &BytesWritten2);
 8002636:	4b17      	ldr	r3, [pc, #92]	; (8002694 <SD_Sensor_write+0x60>)
 8002638:	4917      	ldr	r1, [pc, #92]	; (8002698 <SD_Sensor_write+0x64>)
 800263a:	7818      	ldrb	r0, [r3, #0]
 800263c:	4b17      	ldr	r3, [pc, #92]	; (800269c <SD_Sensor_write+0x68>)
 800263e:	4c18      	ldr	r4, [pc, #96]	; (80026a0 <SD_Sensor_write+0x6c>)
 8002640:	eb01 3180 	add.w	r1, r1, r0, lsl #14
 8002644:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002648:	4816      	ldr	r0, [pc, #88]	; (80026a4 <SD_Sensor_write+0x70>)
 800264a:	f007 f9f9 	bl	8009a40 <f_write>
 800264e:	7020      	strb	r0, [r4, #0]
	 if(res!= FR_OK)   // Write the sensor Buffer content to .BIN file
 8002650:	b1b8      	cbz	r0, 8002682 <SD_Sensor_write+0x4e>
	 AIM_Error_Handler(f_write_E);
 8002652:	2005      	movs	r0, #5
 8002654:	f7ff fdc2 	bl	80021dc <AIM_Error_Handler>
	 if (File_Sensor_write_issue==0)
 8002658:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <SD_Sensor_write+0x74>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	b9c3      	cbnz	r3, 8002690 <SD_Sensor_write+0x5c>
	 if(SD_Write_Count ==SD_cnt_limit)                                          // After 50 SD card write, File Sync (176 write*20.45 sec = 60 minute
 800265e:	4a13      	ldr	r2, [pc, #76]	; (80026ac <SD_Sensor_write+0x78>)
 8002660:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <SD_Sensor_write+0x7c>)
 8002662:	7811      	ldrb	r1, [r2, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4299      	cmp	r1, r3
 8002668:	4615      	mov	r5, r2
 800266a:	d10d      	bne.n	8002688 <SD_Sensor_write+0x54>
		 res= f_sync(&MyFile);
 800266c:	480d      	ldr	r0, [pc, #52]	; (80026a4 <SD_Sensor_write+0x70>)
 800266e:	f007 fad6 	bl	8009c1e <f_sync>
 8002672:	7020      	strb	r0, [r4, #0]
		 if(res != FR_OK)
 8002674:	b110      	cbz	r0, 800267c <SD_Sensor_write+0x48>
			 AIM_Error_Handler(f_sync_E);
 8002676:	2004      	movs	r0, #4
 8002678:	f7ff fdb0 	bl	80021dc <AIM_Error_Handler>
				SD_Write_Count = 0;                                        // Reset SD write counters
 800267c:	2300      	movs	r3, #0
 800267e:	702b      	strb	r3, [r5, #0]
 8002680:	bd38      	pop	{r3, r4, r5, pc}
	 GREEN_LED_OFF();               // Sensor write Completed
 8002682:	f7fe f9fc 	bl	8000a7e <GREEN_LED_OFF>
 8002686:	e7e7      	b.n	8002658 <SD_Sensor_write+0x24>
				SD_Write_Count++;                                          // Increment SD write counter
 8002688:	7813      	ldrb	r3, [r2, #0]
 800268a:	3301      	adds	r3, #1
 800268c:	b2db      	uxtb	r3, r3
 800268e:	7013      	strb	r3, [r2, #0]
 8002690:	bd38      	pop	{r3, r4, r5, pc}
 8002692:	bf00      	nop
 8002694:	20000000 	.word	0x20000000
 8002698:	200005c4 	.word	0x200005c4
 800269c:	200089a0 	.word	0x200089a0
 80026a0:	20008f26 	.word	0x20008f26
 80026a4:	20008ca4 	.word	0x20008ca4
 80026a8:	20008964 	.word	0x20008964
 80026ac:	20000578 	.word	0x20000578
 80026b0:	20008904 	.word	0x20008904

080026b4 <AIM_DataStart_at_Reset>:



void AIM_DataStart_at_Reset(void)
{
 80026b4:	b510      	push	{r4, lr}
	SD_POWER_ON();
 80026b6:	f7fe fa35 	bl	8000b24 <SD_POWER_ON>
	SD_cnt_limit=3;                    // After 50 write, File will Sync
 80026ba:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <AIM_DataStart_at_Reset+0x44>)
 80026bc:	2203      	movs	r2, #3
 80026be:	601a      	str	r2, [r3, #0]
	 Data_log_Start_Resume = 1;
 80026c0:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <AIM_DataStart_at_Reset+0x48>)
 80026c2:	2401      	movs	r4, #1
 80026c4:	701c      	strb	r4, [r3, #0]
		FATFS_Init();
 80026c6:	f7ff fe03 	bl	80022d0 <FATFS_Init>
		Open_File_For_Sensor_Write();
 80026ca:	f7ff fecf 	bl	800246c <Open_File_For_Sensor_Write>
	Reset_All();
 80026ce:	f7ff fd0f 	bl	80020f0 <Reset_All>
	  Start_LPTIMCounter2(0xFF);
 80026d2:	20ff      	movs	r0, #255	; 0xff
 80026d4:	f000 fcf4 	bl	80030c0 <Start_LPTIMCounter2>
 80026d8:	4a09      	ldr	r2, [pc, #36]	; (8002700 <AIM_DataStart_at_Reset+0x4c>)
 80026da:	6893      	ldr	r3, [r2, #8]
 80026dc:	f043 0302 	orr.w	r3, r3, #2
 80026e0:	6093      	str	r3, [r2, #8]
 80026e2:	4b08      	ldr	r3, [pc, #32]	; (8002704 <AIM_DataStart_at_Reset+0x50>)
 80026e4:	2204      	movs	r2, #4
 80026e6:	609a      	str	r2, [r3, #8]
		LL_LPTIM_EnableIT_ARRM(LPTIM2);
		NVIC_EnableIRQ(LPTIM2_IRQn);
	Pros_state = LP_STOP;
 80026e8:	4a07      	ldr	r2, [pc, #28]	; (8002708 <AIM_DataStart_at_Reset+0x54>)
 80026ea:	7014      	strb	r4, [r2, #0]
	USB_Mode = 1;
 80026ec:	4a07      	ldr	r2, [pc, #28]	; (800270c <AIM_DataStart_at_Reset+0x58>)
 80026ee:	7014      	strb	r4, [r2, #0]
 80026f0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	bd10      	pop	{r4, pc}
 80026f8:	20008904 	.word	0x20008904
 80026fc:	20008681 	.word	0x20008681
 8002700:	40009400 	.word	0x40009400
 8002704:	e000e100 	.word	0xe000e100
 8002708:	20008658 	.word	0x20008658
 800270c:	20008f64 	.word	0x20008f64

08002710 <MPU_9D_store_IMU1_SPI1>:
    BSbuffer[s_flag].MY[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
    BSbuffer[s_flag].MZ[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
}

void MPU_9D_store_IMU1_SPI1(void)
{
 8002710:	b530      	push	{r4, r5, lr}
    uint8_t response[21];
    WriteReg1(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 8002712:	218c      	movs	r1, #140	; 0x8c
{
 8002714:	b087      	sub	sp, #28
    WriteReg1(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 8002716:	2025      	movs	r0, #37	; 0x25
 8002718:	f7ff fa68 	bl	8001bec <WriteReg1>
    WriteReg1(MPUREG_I2C_SLV0_REG, AK8963_HXL);                // I2C slave 0 register address from where to begin data transfer
 800271c:	2103      	movs	r1, #3
 800271e:	2026      	movs	r0, #38	; 0x26
 8002720:	f7ff fa64 	bl	8001bec <WriteReg1>
    WriteReg1(MPUREG_I2C_SLV0_CTRL, 0x87);                     // Read 7 bytes from the magnetometer
 8002724:	2187      	movs	r1, #135	; 0x87
 8002726:	2027      	movs	r0, #39	; 0x27
 8002728:	f7ff fa60 	bl	8001bec <WriteReg1>

    ReadRegs1(MPUREG_ACCEL_XOUT_H,response,21);
 800272c:	4669      	mov	r1, sp
 800272e:	2215      	movs	r2, #21
 8002730:	203b      	movs	r0, #59	; 0x3b
 8002732:	f7ff fa9f 	bl	8001c74 <ReadRegs1>

    BSbuffer[s_flag].X1[Sub_cnt]=((int16_t)response[0]<<8)|response[1];
 8002736:	4946      	ldr	r1, [pc, #280]	; (8002850 <MPU_9D_store_IMU1_SPI1+0x140>)
 8002738:	4a46      	ldr	r2, [pc, #280]	; (8002854 <MPU_9D_store_IMU1_SPI1+0x144>)
 800273a:	780c      	ldrb	r4, [r1, #0]
 800273c:	6810      	ldr	r0, [r2, #0]
 800273e:	f89d 5000 	ldrb.w	r5, [sp]
 8002742:	4b45      	ldr	r3, [pc, #276]	; (8002858 <MPU_9D_store_IMU1_SPI1+0x148>)
 8002744:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002748:	f500 5094 	add.w	r0, r0, #4736	; 0x1280
 800274c:	f89d 4001 	ldrb.w	r4, [sp, #1]
 8002750:	3014      	adds	r0, #20
 8002752:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002756:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].Y1[Sub_cnt]=((int16_t)response[2]<<8)|response[3];
 800275a:	780c      	ldrb	r4, [r1, #0]
 800275c:	6810      	ldr	r0, [r2, #0]
 800275e:	f89d 5002 	ldrb.w	r5, [sp, #2]
 8002762:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002766:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 800276a:	f89d 4003 	ldrb.w	r4, [sp, #3]
 800276e:	301c      	adds	r0, #28
 8002770:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002774:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].Z1[Sub_cnt]=((int16_t)response[4]<<8)|response[5];
 8002778:	780c      	ldrb	r4, [r1, #0]
 800277a:	6810      	ldr	r0, [r2, #0]
 800277c:	f89d 5004 	ldrb.w	r5, [sp, #4]
 8002780:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002784:	f500 50a5 	add.w	r0, r0, #5280	; 0x14a0
 8002788:	f89d 4005 	ldrb.w	r4, [sp, #5]
 800278c:	3004      	adds	r0, #4
 800278e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002792:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GX1[Sub_cnt]=((int16_t)response[8]<<8)|response[9];
 8002796:	780c      	ldrb	r4, [r1, #0]
 8002798:	6810      	ldr	r0, [r2, #0]
 800279a:	f89d 5008 	ldrb.w	r5, [sp, #8]
 800279e:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80027a2:	f500 50ad 	add.w	r0, r0, #5536	; 0x15a0
 80027a6:	f89d 4009 	ldrb.w	r4, [sp, #9]
 80027aa:	300c      	adds	r0, #12
 80027ac:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80027b0:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GY1[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 80027b4:	780c      	ldrb	r4, [r1, #0]
 80027b6:	6810      	ldr	r0, [r2, #0]
 80027b8:	f89d 500a 	ldrb.w	r5, [sp, #10]
 80027bc:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80027c0:	f500 50b5 	add.w	r0, r0, #5792	; 0x16a0
 80027c4:	f89d 400b 	ldrb.w	r4, [sp, #11]
 80027c8:	3014      	adds	r0, #20
 80027ca:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80027ce:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GZ1[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 80027d2:	780c      	ldrb	r4, [r1, #0]
 80027d4:	6810      	ldr	r0, [r2, #0]
 80027d6:	f89d 500c 	ldrb.w	r5, [sp, #12]
 80027da:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80027de:	f500 50bd 	add.w	r0, r0, #6048	; 0x17a0
 80027e2:	f89d 400d 	ldrb.w	r4, [sp, #13]
 80027e6:	301c      	adds	r0, #28
 80027e8:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80027ec:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].MX1[Sub_cnt]=((int16_t)response[15]<<8)|response[14];
 80027f0:	780c      	ldrb	r4, [r1, #0]
 80027f2:	6810      	ldr	r0, [r2, #0]
 80027f4:	f89d 500f 	ldrb.w	r5, [sp, #15]
 80027f8:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80027fc:	f500 50c6 	add.w	r0, r0, #6336	; 0x18c0
 8002800:	f89d 400e 	ldrb.w	r4, [sp, #14]
 8002804:	3004      	adds	r0, #4
 8002806:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800280a:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].MY1[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
 800280e:	780c      	ldrb	r4, [r1, #0]
 8002810:	6810      	ldr	r0, [r2, #0]
 8002812:	f89d 5011 	ldrb.w	r5, [sp, #17]
    BSbuffer[s_flag].MZ1[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
 8002816:	7809      	ldrb	r1, [r1, #0]
 8002818:	6812      	ldr	r2, [r2, #0]
    BSbuffer[s_flag].MY1[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
 800281a:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 800281e:	f500 50ce 	add.w	r0, r0, #6592	; 0x19c0
 8002822:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8002826:	300c      	adds	r0, #12
 8002828:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    BSbuffer[s_flag].MZ1[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
 800282c:	eb02 3241 	add.w	r2, r2, r1, lsl #13
    BSbuffer[s_flag].MY1[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
 8002830:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].MZ1[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
 8002834:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8002838:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800283c:	f502 52d6 	add.w	r2, r2, #6848	; 0x1ac0
 8002840:	3214      	adds	r2, #20
 8002842:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002846:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 800284a:	b007      	add	sp, #28
 800284c:	bd30      	pop	{r4, r5, pc}
 800284e:	bf00      	nop
 8002850:	20000581 	.word	0x20000581
 8002854:	2000057c 	.word	0x2000057c
 8002858:	200005c4 	.word	0x200005c4

0800285c <MPU_9D_store_IMU4_SPI3>:

void MPU_9D_store_IMU4_SPI3(void)
{
 800285c:	b530      	push	{r4, r5, lr}
    uint8_t response[21];
    WriteReg3(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 800285e:	218c      	movs	r1, #140	; 0x8c
{
 8002860:	b087      	sub	sp, #28
    WriteReg3(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 8002862:	2025      	movs	r0, #37	; 0x25
 8002864:	f7ff f99a 	bl	8001b9c <WriteReg3>
    WriteReg3(MPUREG_I2C_SLV0_REG, AK8963_HXL);                // I2C slave 0 register address from where to begin data transfer
 8002868:	2103      	movs	r1, #3
 800286a:	2026      	movs	r0, #38	; 0x26
 800286c:	f7ff f996 	bl	8001b9c <WriteReg3>
    WriteReg3(MPUREG_I2C_SLV0_CTRL, 0x87);                     // Read 7 bytes from the magnetometer
 8002870:	2187      	movs	r1, #135	; 0x87
 8002872:	2027      	movs	r0, #39	; 0x27
 8002874:	f7ff f992 	bl	8001b9c <WriteReg3>

    ReadRegs3(MPUREG_ACCEL_XOUT_H,response,21);
 8002878:	4669      	mov	r1, sp
 800287a:	2215      	movs	r2, #21
 800287c:	203b      	movs	r0, #59	; 0x3b
 800287e:	f7ff fa23 	bl	8001cc8 <ReadRegs3>

    BSbuffer[s_flag].X[Sub_cnt]=((int16_t)response[0]<<8)|response[1];
 8002882:	4941      	ldr	r1, [pc, #260]	; (8002988 <MPU_9D_store_IMU4_SPI3+0x12c>)
 8002884:	4a41      	ldr	r2, [pc, #260]	; (800298c <MPU_9D_store_IMU4_SPI3+0x130>)
 8002886:	780c      	ldrb	r4, [r1, #0]
 8002888:	6810      	ldr	r0, [r2, #0]
 800288a:	f89d 5000 	ldrb.w	r5, [sp]
 800288e:	4b40      	ldr	r3, [pc, #256]	; (8002990 <MPU_9D_store_IMU4_SPI3+0x134>)
 8002890:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002894:	f89d 4001 	ldrb.w	r4, [sp, #1]
 8002898:	3004      	adds	r0, #4
 800289a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800289e:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].Y[Sub_cnt]=((int16_t)response[2]<<8)|response[3];
 80028a2:	780c      	ldrb	r4, [r1, #0]
 80028a4:	6810      	ldr	r0, [r2, #0]
 80028a6:	f89d 5002 	ldrb.w	r5, [sp, #2]
 80028aa:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80028ae:	f89d 4003 	ldrb.w	r4, [sp, #3]
 80028b2:	f500 7086 	add.w	r0, r0, #268	; 0x10c
 80028b6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80028ba:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].Z[Sub_cnt]=((int16_t)response[4]<<8)|response[5];
 80028be:	780c      	ldrb	r4, [r1, #0]
 80028c0:	6810      	ldr	r0, [r2, #0]
 80028c2:	f89d 5004 	ldrb.w	r5, [sp, #4]
 80028c6:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80028ca:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80028ce:	f500 7005 	add.w	r0, r0, #532	; 0x214
 80028d2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80028d6:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GX[Sub_cnt]=((int16_t)response[8]<<8)|response[9];
 80028da:	780c      	ldrb	r4, [r1, #0]
 80028dc:	6810      	ldr	r0, [r2, #0]
 80028de:	f89d 5008 	ldrb.w	r5, [sp, #8]
 80028e2:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80028e6:	f89d 4009 	ldrb.w	r4, [sp, #9]
 80028ea:	f500 7047 	add.w	r0, r0, #796	; 0x31c
 80028ee:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80028f2:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GY[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 80028f6:	780c      	ldrb	r4, [r1, #0]
 80028f8:	6810      	ldr	r0, [r2, #0]
 80028fa:	f89d 500a 	ldrb.w	r5, [sp, #10]
 80028fe:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002902:	f89d 400b 	ldrb.w	r4, [sp, #11]
 8002906:	f200 4024 	addw	r0, r0, #1060	; 0x424
 800290a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800290e:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GZ[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 8002912:	780c      	ldrb	r4, [r1, #0]
 8002914:	6810      	ldr	r0, [r2, #0]
 8002916:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800291a:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 800291e:	f89d 400d 	ldrb.w	r4, [sp, #13]
 8002922:	f200 502c 	addw	r0, r0, #1324	; 0x52c
 8002926:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800292a:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].MX[Sub_cnt]=((int16_t)response[15]<<8)|response[14];
 800292e:	780c      	ldrb	r4, [r1, #0]
 8002930:	6810      	ldr	r0, [r2, #0]
 8002932:	f89d 500f 	ldrb.w	r5, [sp, #15]
 8002936:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 800293a:	f89d 400e 	ldrb.w	r4, [sp, #14]
 800293e:	f200 6034 	addw	r0, r0, #1588	; 0x634
 8002942:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002946:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].MY[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
 800294a:	780c      	ldrb	r4, [r1, #0]
 800294c:	6810      	ldr	r0, [r2, #0]
 800294e:	f89d 5011 	ldrb.w	r5, [sp, #17]
    BSbuffer[s_flag].MZ[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
 8002952:	7809      	ldrb	r1, [r1, #0]
 8002954:	6812      	ldr	r2, [r2, #0]
    BSbuffer[s_flag].MY[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
 8002956:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 800295a:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800295e:	f200 703c 	addw	r0, r0, #1852	; 0x73c
 8002962:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002966:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].MZ[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
 800296a:	eb02 3241 	add.w	r2, r2, r1, lsl #13
 800296e:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8002972:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8002976:	f602 0244 	addw	r2, r2, #2116	; 0x844
 800297a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800297e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8002982:	b007      	add	sp, #28
 8002984:	bd30      	pop	{r4, r5, pc}
 8002986:	bf00      	nop
 8002988:	20000581 	.word	0x20000581
 800298c:	2000057c 	.word	0x2000057c
 8002990:	200005c4 	.word	0x200005c4

08002994 <MPU_9D_store_IMU3_SPI2>:

void MPU_9D_store_IMU3_SPI2(void)
{
 8002994:	b530      	push	{r4, r5, lr}
    uint8_t response[21];
    WriteReg2(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 8002996:	218c      	movs	r1, #140	; 0x8c
{
 8002998:	b087      	sub	sp, #28
    WriteReg2(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 800299a:	2025      	movs	r0, #37	; 0x25
 800299c:	f7ff f948 	bl	8001c30 <WriteReg2>
    WriteReg2(MPUREG_I2C_SLV0_REG, AK8963_HXL);                // I2C slave 0 register address from where to begin data transfer
 80029a0:	2103      	movs	r1, #3
 80029a2:	2026      	movs	r0, #38	; 0x26
 80029a4:	f7ff f944 	bl	8001c30 <WriteReg2>
    WriteReg2(MPUREG_I2C_SLV0_CTRL, 0x87);                     // Read 7 bytes from the magnetometer
 80029a8:	2187      	movs	r1, #135	; 0x87
 80029aa:	2027      	movs	r0, #39	; 0x27
 80029ac:	f7ff f940 	bl	8001c30 <WriteReg2>

    ReadRegs2(MPUREG_ACCEL_XOUT_H,response,21);
 80029b0:	4669      	mov	r1, sp
 80029b2:	2215      	movs	r2, #21
 80029b4:	203b      	movs	r0, #59	; 0x3b
 80029b6:	f7ff f9b9 	bl	8001d2c <ReadRegs2>

    BSbuffer[s_flag].X2[Sub_cnt]=((int16_t)response[0]<<8)|response[1];
 80029ba:	4942      	ldr	r1, [pc, #264]	; (8002ac4 <MPU_9D_store_IMU3_SPI2+0x130>)
 80029bc:	4a42      	ldr	r2, [pc, #264]	; (8002ac8 <MPU_9D_store_IMU3_SPI2+0x134>)
 80029be:	780c      	ldrb	r4, [r1, #0]
 80029c0:	6810      	ldr	r0, [r2, #0]
 80029c2:	f89d 5000 	ldrb.w	r5, [sp]
 80029c6:	4b41      	ldr	r3, [pc, #260]	; (8002acc <MPU_9D_store_IMU3_SPI2+0x138>)
 80029c8:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80029cc:	f89d 4001 	ldrb.w	r4, [sp, #1]
 80029d0:	f600 104c 	addw	r0, r0, #2380	; 0x94c
 80029d4:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80029d8:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].Y2[Sub_cnt]=((int16_t)response[2]<<8)|response[3];
 80029dc:	780c      	ldrb	r4, [r1, #0]
 80029de:	6810      	ldr	r0, [r2, #0]
 80029e0:	f89d 5002 	ldrb.w	r5, [sp, #2]
 80029e4:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 80029e8:	f89d 4003 	ldrb.w	r4, [sp, #3]
 80029ec:	f600 2054 	addw	r0, r0, #2644	; 0xa54
 80029f0:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80029f4:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].Z2[Sub_cnt]=((int16_t)response[4]<<8)|response[5];
 80029f8:	780c      	ldrb	r4, [r1, #0]
 80029fa:	6810      	ldr	r0, [r2, #0]
 80029fc:	f89d 5004 	ldrb.w	r5, [sp, #4]
 8002a00:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002a04:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8002a08:	f600 305c 	addw	r0, r0, #2908	; 0xb5c
 8002a0c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002a10:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GX2[Sub_cnt]=((int16_t)response[8]<<8)|response[9];
 8002a14:	780c      	ldrb	r4, [r1, #0]
 8002a16:	6810      	ldr	r0, [r2, #0]
 8002a18:	f89d 5008 	ldrb.w	r5, [sp, #8]
 8002a1c:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002a20:	f89d 4009 	ldrb.w	r4, [sp, #9]
 8002a24:	f600 4064 	addw	r0, r0, #3172	; 0xc64
 8002a28:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002a2c:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GY2[Sub_cnt]=((int16_t)response[10]<<8)|response[11];
 8002a30:	780c      	ldrb	r4, [r1, #0]
 8002a32:	6810      	ldr	r0, [r2, #0]
 8002a34:	f89d 500a 	ldrb.w	r5, [sp, #10]
 8002a38:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002a3c:	f89d 400b 	ldrb.w	r4, [sp, #11]
 8002a40:	f600 506c 	addw	r0, r0, #3436	; 0xd6c
 8002a44:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002a48:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].GZ2[Sub_cnt]=((int16_t)response[12]<<8)|response[13];
 8002a4c:	780c      	ldrb	r4, [r1, #0]
 8002a4e:	6810      	ldr	r0, [r2, #0]
 8002a50:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8002a54:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002a58:	f89d 400d 	ldrb.w	r4, [sp, #13]
 8002a5c:	f600 6074 	addw	r0, r0, #3700	; 0xe74
 8002a60:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002a64:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].MX2[Sub_cnt]=((int16_t)response[15]<<8)|response[14];
 8002a68:	780c      	ldrb	r4, [r1, #0]
 8002a6a:	6810      	ldr	r0, [r2, #0]
 8002a6c:	f89d 500f 	ldrb.w	r5, [sp, #15]
 8002a70:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002a74:	f89d 400e 	ldrb.w	r4, [sp, #14]
 8002a78:	f600 707c 	addw	r0, r0, #3964	; 0xf7c
 8002a7c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002a80:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].MY2[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
 8002a84:	780c      	ldrb	r4, [r1, #0]
 8002a86:	6810      	ldr	r0, [r2, #0]
 8002a88:	f89d 5011 	ldrb.w	r5, [sp, #17]
    BSbuffer[s_flag].MZ2[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
 8002a8c:	7809      	ldrb	r1, [r1, #0]
 8002a8e:	6812      	ldr	r2, [r2, #0]
    BSbuffer[s_flag].MY2[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
 8002a90:	eb00 3044 	add.w	r0, r0, r4, lsl #13
 8002a94:	f500 5084 	add.w	r0, r0, #4224	; 0x1080
 8002a98:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8002a9c:	3004      	adds	r0, #4
 8002a9e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    BSbuffer[s_flag].MZ2[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
 8002aa2:	eb02 3241 	add.w	r2, r2, r1, lsl #13
    BSbuffer[s_flag].MY2[Sub_cnt]=((int16_t)response[17]<<8)|response[16];
 8002aa6:	f823 4010 	strh.w	r4, [r3, r0, lsl #1]
    BSbuffer[s_flag].MZ2[Sub_cnt]=((int16_t)response[19]<<8)|response[18];
 8002aaa:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8002aae:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8002ab2:	f502 528c 	add.w	r2, r2, #4480	; 0x1180
 8002ab6:	320c      	adds	r2, #12
 8002ab8:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002abc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 8002ac0:	b007      	add	sp, #28
 8002ac2:	bd30      	pop	{r4, r5, pc}
 8002ac4:	20000581 	.word	0x20000581
 8002ac8:	2000057c 	.word	0x2000057c
 8002acc:	200005c4 	.word	0x200005c4

08002ad0 <MPU1_SPI1_init>:
        mag_data[i-7] = data * Magnetometer_ASA[i-7];
    }
}

void MPU1_SPI1_init(void)
{
 8002ad0:	b530      	push	{r4, r5, lr}
 8002ad2:	b08b      	sub	sp, #44	; 0x2c
	float temp[3];
	uint8_t i = 0;
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = {
 8002ad4:	226b      	movs	r2, #107	; 0x6b
 8002ad6:	f88d 2005 	strb.w	r2, [sp, #5]
 8002ada:	f88d 2007 	strb.w	r2, [sp, #7]
 8002ade:	226c      	movs	r2, #108	; 0x6c
 8002ae0:	f88d 2009 	strb.w	r2, [sp, #9]
 8002ae4:	4a33      	ldr	r2, [pc, #204]	; (8002bb4 <MPU1_SPI1_init+0xe4>)
 8002ae6:	7812      	ldrb	r2, [r2, #0]
 8002ae8:	f88d 200a 	strb.w	r2, [sp, #10]
 8002aec:	221a      	movs	r2, #26
 8002aee:	f88d 200b 	strb.w	r2, [sp, #11]
 8002af2:	221b      	movs	r2, #27
 8002af4:	f88d 200d 	strb.w	r2, [sp, #13]
 8002af8:	221c      	movs	r2, #28
 8002afa:	f88d 200f 	strb.w	r2, [sp, #15]
 8002afe:	4a2e      	ldr	r2, [pc, #184]	; (8002bb8 <MPU1_SPI1_init+0xe8>)
 8002b00:	7812      	ldrb	r2, [r2, #0]
 8002b02:	f88d 2010 	strb.w	r2, [sp, #16]
 8002b06:	221d      	movs	r2, #29
 8002b08:	f88d 2011 	strb.w	r2, [sp, #17]
 8002b0c:	2212      	movs	r2, #18
 8002b0e:	f88d 2012 	strb.w	r2, [sp, #18]
 8002b12:	2237      	movs	r2, #55	; 0x37
 8002b14:	f88d 2013 	strb.w	r2, [sp, #19]
 8002b18:	2230      	movs	r2, #48	; 0x30
 8002b1a:	f88d 2014 	strb.w	r2, [sp, #20]
 8002b1e:	226a      	movs	r2, #106	; 0x6a
 8002b20:	f88d 2015 	strb.w	r2, [sp, #21]
 8002b24:	220d      	movs	r2, #13
 8002b26:	f88d 2016 	strb.w	r2, [sp, #22]
 8002b2a:	2224      	movs	r2, #36	; 0x24
 8002b2c:	f88d 2017 	strb.w	r2, [sp, #23]
 8002b30:	220c      	movs	r2, #12
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	f88d 2018 	strb.w	r2, [sp, #24]
 8002b38:	2225      	movs	r2, #37	; 0x25
 8002b3a:	f88d 3004 	strb.w	r3, [sp, #4]
 8002b3e:	f88d 2019 	strb.w	r2, [sp, #25]
 8002b42:	2301      	movs	r3, #1
 8002b44:	220b      	movs	r2, #11
 8002b46:	2400      	movs	r4, #0
 8002b48:	2026      	movs	r0, #38	; 0x26
 8002b4a:	f88d 3006 	strb.w	r3, [sp, #6]
 8002b4e:	f88d 201a 	strb.w	r2, [sp, #26]
 8002b52:	f88d 301c 	strb.w	r3, [sp, #28]
 8002b56:	2163      	movs	r1, #99	; 0x63
 8002b58:	2281      	movs	r2, #129	; 0x81
 8002b5a:	2327      	movs	r3, #39	; 0x27
 8002b5c:	250a      	movs	r5, #10
 8002b5e:	f88d 001b 	strb.w	r0, [sp, #27]
 8002b62:	f88d 5020 	strb.w	r5, [sp, #32]
 8002b66:	f88d 4008 	strb.w	r4, [sp, #8]
 8002b6a:	f88d 400c 	strb.w	r4, [sp, #12]
 8002b6e:	f88d 400e 	strb.w	r4, [sp, #14]
 8002b72:	f88d 101d 	strb.w	r1, [sp, #29]
 8002b76:	f88d 201e 	strb.w	r2, [sp, #30]
 8002b7a:	f88d 301f 	strb.w	r3, [sp, #31]
 8002b7e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8002b82:	2016      	movs	r0, #22
 8002b84:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8002b88:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 8002b8c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8002b90:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25

	};


    for(i = 0; i < MPU_InitRegNum; i++) {
        WriteReg1(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 8002b94:	ad01      	add	r5, sp, #4
 8002b96:	192b      	adds	r3, r5, r4
 8002b98:	5d29      	ldrb	r1, [r5, r4]
 8002b9a:	7858      	ldrb	r0, [r3, #1]
 8002b9c:	f7ff f826 	bl	8001bec <WriteReg1>
 8002ba0:	3402      	adds	r4, #2
        delay_us(1000);  // I2C must slow down the write speed, otherwise it won't work
 8002ba2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ba6:	f000 fa81 	bl	80030ac <delay_us>
    for(i = 0; i < MPU_InitRegNum; i++) {
 8002baa:	2c22      	cmp	r4, #34	; 0x22
 8002bac:	d1f3      	bne.n	8002b96 <MPU1_SPI1_init+0xc6>

 //   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
 //   return 0;


}
 8002bae:	b00b      	add	sp, #44	; 0x2c
 8002bb0:	bd30      	pop	{r4, r5, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000001 	.word	0x20000001
 8002bb8:	20000002 	.word	0x20000002

08002bbc <P_IMU1_SPI1_Initialization_at_reset>:
{
 8002bbc:	b508      	push	{r3, lr}
	P_IMU1_SPI1_Init();         // Accelerometer Chip Initialization
 8002bbe:	f7ff f987 	bl	8001ed0 <P_IMU1_SPI1_Init>
	delay_us(7000);         // Arbitrary delay after SPI initialization
 8002bc2:	f641 3058 	movw	r0, #7000	; 0x1b58
 8002bc6:	f000 fa71 	bl	80030ac <delay_us>
}
 8002bca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MPU1_SPI1_init();
 8002bce:	f7ff bf7f 	b.w	8002ad0 <MPU1_SPI1_init>
	...

08002bd4 <MPU4_SPI3_init>:

void MPU4_SPI3_init(void)
{
 8002bd4:	b530      	push	{r4, r5, lr}
 8002bd6:	b08b      	sub	sp, #44	; 0x2c
//	float temp[3];
	uint8_t i = 0;
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = {
 8002bd8:	226b      	movs	r2, #107	; 0x6b
 8002bda:	f88d 2005 	strb.w	r2, [sp, #5]
 8002bde:	f88d 2007 	strb.w	r2, [sp, #7]
 8002be2:	226c      	movs	r2, #108	; 0x6c
 8002be4:	f88d 2009 	strb.w	r2, [sp, #9]
 8002be8:	4a33      	ldr	r2, [pc, #204]	; (8002cb8 <MPU4_SPI3_init+0xe4>)
 8002bea:	7812      	ldrb	r2, [r2, #0]
 8002bec:	f88d 200a 	strb.w	r2, [sp, #10]
 8002bf0:	221a      	movs	r2, #26
 8002bf2:	f88d 200b 	strb.w	r2, [sp, #11]
 8002bf6:	221b      	movs	r2, #27
 8002bf8:	f88d 200d 	strb.w	r2, [sp, #13]
 8002bfc:	221c      	movs	r2, #28
 8002bfe:	f88d 200f 	strb.w	r2, [sp, #15]
 8002c02:	4a2e      	ldr	r2, [pc, #184]	; (8002cbc <MPU4_SPI3_init+0xe8>)
 8002c04:	7812      	ldrb	r2, [r2, #0]
 8002c06:	f88d 2010 	strb.w	r2, [sp, #16]
 8002c0a:	221d      	movs	r2, #29
 8002c0c:	f88d 2011 	strb.w	r2, [sp, #17]
 8002c10:	2212      	movs	r2, #18
 8002c12:	f88d 2012 	strb.w	r2, [sp, #18]
 8002c16:	2237      	movs	r2, #55	; 0x37
 8002c18:	f88d 2013 	strb.w	r2, [sp, #19]
 8002c1c:	2230      	movs	r2, #48	; 0x30
 8002c1e:	f88d 2014 	strb.w	r2, [sp, #20]
 8002c22:	226a      	movs	r2, #106	; 0x6a
 8002c24:	f88d 2015 	strb.w	r2, [sp, #21]
 8002c28:	220d      	movs	r2, #13
 8002c2a:	f88d 2016 	strb.w	r2, [sp, #22]
 8002c2e:	2224      	movs	r2, #36	; 0x24
 8002c30:	f88d 2017 	strb.w	r2, [sp, #23]
 8002c34:	220c      	movs	r2, #12
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	f88d 2018 	strb.w	r2, [sp, #24]
 8002c3c:	2225      	movs	r2, #37	; 0x25
 8002c3e:	f88d 3004 	strb.w	r3, [sp, #4]
 8002c42:	f88d 2019 	strb.w	r2, [sp, #25]
 8002c46:	2301      	movs	r3, #1
 8002c48:	220b      	movs	r2, #11
 8002c4a:	2400      	movs	r4, #0
 8002c4c:	2026      	movs	r0, #38	; 0x26
 8002c4e:	f88d 3006 	strb.w	r3, [sp, #6]
 8002c52:	f88d 201a 	strb.w	r2, [sp, #26]
 8002c56:	f88d 301c 	strb.w	r3, [sp, #28]
 8002c5a:	2163      	movs	r1, #99	; 0x63
 8002c5c:	2281      	movs	r2, #129	; 0x81
 8002c5e:	2327      	movs	r3, #39	; 0x27
 8002c60:	250a      	movs	r5, #10
 8002c62:	f88d 001b 	strb.w	r0, [sp, #27]
 8002c66:	f88d 5020 	strb.w	r5, [sp, #32]
 8002c6a:	f88d 4008 	strb.w	r4, [sp, #8]
 8002c6e:	f88d 400c 	strb.w	r4, [sp, #12]
 8002c72:	f88d 400e 	strb.w	r4, [sp, #14]
 8002c76:	f88d 101d 	strb.w	r1, [sp, #29]
 8002c7a:	f88d 201e 	strb.w	r2, [sp, #30]
 8002c7e:	f88d 301f 	strb.w	r3, [sp, #31]
 8002c82:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8002c86:	2016      	movs	r0, #22
 8002c88:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8002c8c:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 8002c90:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8002c94:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25

	};

//	 LED_Nucleo_OFF();
    for(i = 0; i < MPU_InitRegNum; i++) {
        WriteReg3(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 8002c98:	ad01      	add	r5, sp, #4
 8002c9a:	192b      	adds	r3, r5, r4
 8002c9c:	5d29      	ldrb	r1, [r5, r4]
 8002c9e:	7858      	ldrb	r0, [r3, #1]
 8002ca0:	f7fe ff7c 	bl	8001b9c <WriteReg3>
 8002ca4:	3402      	adds	r4, #2
        delay_us(1000);  // I2C must slow down the write speed, otherwise it won't work
 8002ca6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002caa:	f000 f9ff 	bl	80030ac <delay_us>
    for(i = 0; i < MPU_InitRegNum; i++) {
 8002cae:	2c22      	cmp	r4, #34	; 0x22
 8002cb0:	d1f3      	bne.n	8002c9a <MPU4_SPI3_init+0xc6>

 //   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
 //   return 0;


}
 8002cb2:	b00b      	add	sp, #44	; 0x2c
 8002cb4:	bd30      	pop	{r4, r5, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000001 	.word	0x20000001
 8002cbc:	20000002 	.word	0x20000002

08002cc0 <P_IMU4_SPI3_Initialization_at_reset>:
{
 8002cc0:	b508      	push	{r3, lr}
	P_IMU4_SPI3_Init();         // Accelerometer Chip Initialization
 8002cc2:	f7fe fd69 	bl	8001798 <P_IMU4_SPI3_Init>
	delay_us(7000);         // Arbitrary delay after SPI initialization
 8002cc6:	f641 3058 	movw	r0, #7000	; 0x1b58
 8002cca:	f000 f9ef 	bl	80030ac <delay_us>
}
 8002cce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MPU4_SPI3_init();
 8002cd2:	f7ff bf7f 	b.w	8002bd4 <MPU4_SPI3_init>
	...

08002cd8 <MPU3_SPI2_init>:

void MPU3_SPI2_init(void)
{
 8002cd8:	b530      	push	{r4, r5, lr}
 8002cda:	b08b      	sub	sp, #44	; 0x2c
	float temp[3];
	uint8_t i = 0;
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = {
 8002cdc:	226b      	movs	r2, #107	; 0x6b
 8002cde:	f88d 2005 	strb.w	r2, [sp, #5]
 8002ce2:	f88d 2007 	strb.w	r2, [sp, #7]
 8002ce6:	226c      	movs	r2, #108	; 0x6c
 8002ce8:	f88d 2009 	strb.w	r2, [sp, #9]
 8002cec:	4a33      	ldr	r2, [pc, #204]	; (8002dbc <MPU3_SPI2_init+0xe4>)
 8002cee:	7812      	ldrb	r2, [r2, #0]
 8002cf0:	f88d 200a 	strb.w	r2, [sp, #10]
 8002cf4:	221a      	movs	r2, #26
 8002cf6:	f88d 200b 	strb.w	r2, [sp, #11]
 8002cfa:	221b      	movs	r2, #27
 8002cfc:	f88d 200d 	strb.w	r2, [sp, #13]
 8002d00:	221c      	movs	r2, #28
 8002d02:	f88d 200f 	strb.w	r2, [sp, #15]
 8002d06:	4a2e      	ldr	r2, [pc, #184]	; (8002dc0 <MPU3_SPI2_init+0xe8>)
 8002d08:	7812      	ldrb	r2, [r2, #0]
 8002d0a:	f88d 2010 	strb.w	r2, [sp, #16]
 8002d0e:	221d      	movs	r2, #29
 8002d10:	f88d 2011 	strb.w	r2, [sp, #17]
 8002d14:	2212      	movs	r2, #18
 8002d16:	f88d 2012 	strb.w	r2, [sp, #18]
 8002d1a:	2237      	movs	r2, #55	; 0x37
 8002d1c:	f88d 2013 	strb.w	r2, [sp, #19]
 8002d20:	2230      	movs	r2, #48	; 0x30
 8002d22:	f88d 2014 	strb.w	r2, [sp, #20]
 8002d26:	226a      	movs	r2, #106	; 0x6a
 8002d28:	f88d 2015 	strb.w	r2, [sp, #21]
 8002d2c:	220d      	movs	r2, #13
 8002d2e:	f88d 2016 	strb.w	r2, [sp, #22]
 8002d32:	2224      	movs	r2, #36	; 0x24
 8002d34:	f88d 2017 	strb.w	r2, [sp, #23]
 8002d38:	220c      	movs	r2, #12
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	f88d 2018 	strb.w	r2, [sp, #24]
 8002d40:	2225      	movs	r2, #37	; 0x25
 8002d42:	f88d 3004 	strb.w	r3, [sp, #4]
 8002d46:	f88d 2019 	strb.w	r2, [sp, #25]
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	220b      	movs	r2, #11
 8002d4e:	2400      	movs	r4, #0
 8002d50:	2026      	movs	r0, #38	; 0x26
 8002d52:	f88d 3006 	strb.w	r3, [sp, #6]
 8002d56:	f88d 201a 	strb.w	r2, [sp, #26]
 8002d5a:	f88d 301c 	strb.w	r3, [sp, #28]
 8002d5e:	2163      	movs	r1, #99	; 0x63
 8002d60:	2281      	movs	r2, #129	; 0x81
 8002d62:	2327      	movs	r3, #39	; 0x27
 8002d64:	250a      	movs	r5, #10
 8002d66:	f88d 001b 	strb.w	r0, [sp, #27]
 8002d6a:	f88d 5020 	strb.w	r5, [sp, #32]
 8002d6e:	f88d 4008 	strb.w	r4, [sp, #8]
 8002d72:	f88d 400c 	strb.w	r4, [sp, #12]
 8002d76:	f88d 400e 	strb.w	r4, [sp, #14]
 8002d7a:	f88d 101d 	strb.w	r1, [sp, #29]
 8002d7e:	f88d 201e 	strb.w	r2, [sp, #30]
 8002d82:	f88d 301f 	strb.w	r3, [sp, #31]
 8002d86:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8002d8a:	2016      	movs	r0, #22
 8002d8c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8002d90:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 8002d94:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8002d98:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25

	};


    for(i = 0; i < MPU_InitRegNum; i++) {
        WriteReg2(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 8002d9c:	ad01      	add	r5, sp, #4
 8002d9e:	192b      	adds	r3, r5, r4
 8002da0:	5d29      	ldrb	r1, [r5, r4]
 8002da2:	7858      	ldrb	r0, [r3, #1]
 8002da4:	f7fe ff44 	bl	8001c30 <WriteReg2>
 8002da8:	3402      	adds	r4, #2
        delay_us(1000);  // I2C must slow down the write speed, otherwise it won't work
 8002daa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dae:	f000 f97d 	bl	80030ac <delay_us>
    for(i = 0; i < MPU_InitRegNum; i++) {
 8002db2:	2c22      	cmp	r4, #34	; 0x22
 8002db4:	d1f3      	bne.n	8002d9e <MPU3_SPI2_init+0xc6>

 //   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
 //   return 0;


}
 8002db6:	b00b      	add	sp, #44	; 0x2c
 8002db8:	bd30      	pop	{r4, r5, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000001 	.word	0x20000001
 8002dc0:	20000002 	.word	0x20000002

08002dc4 <P_IMU3_SPI2_Initialization_at_reset>:
{
 8002dc4:	b508      	push	{r3, lr}
	P_IMU3_SPI2_Init();         // Accelerometer Chip Initialization
 8002dc6:	f7ff f8c3 	bl	8001f50 <P_IMU3_SPI2_Init>
	delay_us(7000);         // Arbitrary delay after SPI initialization
 8002dca:	f641 3058 	movw	r0, #7000	; 0x1b58
 8002dce:	f000 f96d 	bl	80030ac <delay_us>
}
 8002dd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MPU3_SPI2_init();
 8002dd6:	f7ff bf7f 	b.w	8002cd8 <MPU3_SPI2_init>
	...

08002ddc <Mag_Enc1_Store>:
//	}
	return tempPosition;
}

void Mag_Enc1_Store(void)
{
 8002ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  WRITE_REG(GPIOx->BRR, PinMask);
 8002de0:	4c1d      	ldr	r4, [pc, #116]	; (8002e58 <Mag_Enc1_Store+0x7c>)
 8002de2:	2302      	movs	r3, #2
 8002de4:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8002de8:	62a3      	str	r3, [r4, #40]	; 0x28
	uint8_t tempRead = 0;
	uint8_t Flags[6];
	LL_GPIO_ResetOutputPin(ENC1_CS_GPIO_PORT, ENC1_CS_PIN);

	// Sensor feeds out position MSB first
	for(i = 11; i >= 0; i--)
 8002dea:	250b      	movs	r5, #11
	int tempPosition = 0;
 8002dec:	2600      	movs	r6, #0
 8002dee:	46b8      	mov	r8, r7
	{
		LL_GPIO_ResetOutputPin(ENC1_SCLK_GPIO_PORT, ENC1_SCLK_PIN);
		delay_us(10);
 8002df0:	200a      	movs	r0, #10
 8002df2:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 8002df6:	f000 f959 	bl	80030ac <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002dfa:	61a7      	str	r7, [r4, #24]

		LL_GPIO_SetOutputPin(ENC1_SCLK_GPIO_PORT, ENC1_SCLK_PIN);
		delay_us(10);
 8002dfc:	200a      	movs	r0, #10
 8002dfe:	f000 f955 	bl	80030ac <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002e02:	6923      	ldr	r3, [r4, #16]
 8002e04:	f3c3 0380 	ubfx	r3, r3, #2, #1

		tempRead = LL_GPIO_IsInputPinSet(ENC1_DATA_GPIO_PORT,ENC1_DATA_PIN) &0x01;
		tempPosition |= (tempRead)<<i;
 8002e08:	40ab      	lsls	r3, r5
	for(i = 11; i >= 0; i--)
 8002e0a:	f115 35ff 	adds.w	r5, r5, #4294967295
		tempPosition |= (tempRead)<<i;
 8002e0e:	ea46 0603 	orr.w	r6, r6, r3
	for(i = 11; i >= 0; i--)
 8002e12:	d2ed      	bcs.n	8002df0 <Mag_Enc1_Store+0x14>
  WRITE_REG(GPIOx->BRR, PinMask);
 8002e14:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8002e18:	4c0f      	ldr	r4, [pc, #60]	; (8002e58 <Mag_Enc1_Store+0x7c>)
 8002e1a:	2506      	movs	r5, #6
 8002e1c:	46b8      	mov	r8, r7
	}

	for(i = 0; i < 6; i++)
	{
		LL_GPIO_ResetOutputPin(ENC1_SCLK_GPIO_PORT, ENC1_SCLK_PIN);
		delay_us(10);
 8002e1e:	200a      	movs	r0, #10
 8002e20:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
 8002e24:	f000 f942 	bl	80030ac <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002e28:	61a7      	str	r7, [r4, #24]

		LL_GPIO_SetOutputPin(ENC1_SCLK_GPIO_PORT, ENC1_SCLK_PIN);
		delay_us(10);
 8002e2a:	200a      	movs	r0, #10
 8002e2c:	f000 f93e 	bl	80030ac <delay_us>
	for(i = 0; i < 6; i++)
 8002e30:	3d01      	subs	r5, #1
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002e32:	6923      	ldr	r3, [r4, #16]
 8002e34:	d1f3      	bne.n	8002e1e <Mag_Enc1_Store+0x42>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002e36:	2302      	movs	r3, #2
 8002e38:	61a3      	str	r3, [r4, #24]
		Flags[i] |= (tempRead)<<i;
	}

	LL_GPIO_SetOutputPin(ENC1_CS_GPIO_PORT, ENC1_CS_PIN);

	BSbuffer[s_flag].Enc1[Sub_cnt]=tempPosition;
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <Mag_Enc1_Store+0x80>)
 8002e3c:	781a      	ldrb	r2, [r3, #0]
 8002e3e:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <Mag_Enc1_Store+0x84>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8002e46:	f503 53ef 	add.w	r3, r3, #7648	; 0x1de0
 8002e4a:	330c      	adds	r3, #12
 8002e4c:	4a05      	ldr	r2, [pc, #20]	; (8002e64 <Mag_Enc1_Store+0x88>)
 8002e4e:	f822 6013 	strh.w	r6, [r2, r3, lsl #1]
 8002e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e56:	bf00      	nop
 8002e58:	48000400 	.word	0x48000400
 8002e5c:	20000581 	.word	0x20000581
 8002e60:	2000057c 	.word	0x2000057c
 8002e64:	200005c4 	.word	0x200005c4

08002e68 <Mag_Enc2_Store>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8002e68:	4b1e      	ldr	r3, [pc, #120]	; (8002ee4 <Mag_Enc2_Store+0x7c>)
}

void Mag_Enc2_Store(void)
{
 8002e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e6e:	2240      	movs	r2, #64	; 0x40
 8002e70:	2780      	movs	r7, #128	; 0x80
 8002e72:	4e1d      	ldr	r6, [pc, #116]	; (8002ee8 <Mag_Enc2_Store+0x80>)
 8002e74:	629a      	str	r2, [r3, #40]	; 0x28
	uint8_t tempRead = 0;
	uint8_t Flags[6];
	LL_GPIO_ResetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	// Sensor feeds out position MSB first
	for(i = 11; i >= 0; i--)
 8002e76:	240b      	movs	r4, #11
	int tempPosition = 0;
 8002e78:	2500      	movs	r5, #0
 8002e7a:	46b8      	mov	r8, r7
	{
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8002e7c:	200a      	movs	r0, #10
 8002e7e:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 8002e82:	f000 f913 	bl	80030ac <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002e86:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8002e88:	200a      	movs	r0, #10
 8002e8a:	f000 f90f 	bl	80030ac <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <Mag_Enc2_Store+0x7c>)
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f3c3 13c0 	ubfx	r3, r3, #7, #1

		tempRead = LL_GPIO_IsInputPinSet(ENC2_DATA_GPIO_PORT,ENC2_DATA_PIN) &0x01;
		tempPosition |= (tempRead)<<i;
 8002e96:	40a3      	lsls	r3, r4
	for(i = 11; i >= 0; i--)
 8002e98:	f114 34ff 	adds.w	r4, r4, #4294967295
		tempPosition |= (tempRead)<<i;
 8002e9c:	ea45 0503 	orr.w	r5, r5, r3
	for(i = 11; i >= 0; i--)
 8002ea0:	d2ec      	bcs.n	8002e7c <Mag_Enc2_Store+0x14>
  WRITE_REG(GPIOx->BRR, PinMask);
 8002ea2:	2780      	movs	r7, #128	; 0x80
 8002ea4:	4e10      	ldr	r6, [pc, #64]	; (8002ee8 <Mag_Enc2_Store+0x80>)
 8002ea6:	2406      	movs	r4, #6
 8002ea8:	46b8      	mov	r8, r7
	}

	for(i = 0; i < 6; i++)
	{
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8002eaa:	200a      	movs	r0, #10
 8002eac:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 8002eb0:	f000 f8fc 	bl	80030ac <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002eb4:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8002eb6:	200a      	movs	r0, #10
 8002eb8:	f000 f8f8 	bl	80030ac <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002ebc:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <Mag_Enc2_Store+0x7c>)
	for(i = 0; i < 6; i++)
 8002ebe:	3c01      	subs	r4, #1
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	d1f2      	bne.n	8002eaa <Mag_Enc2_Store+0x42>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002ec4:	2240      	movs	r2, #64	; 0x40
 8002ec6:	619a      	str	r2, [r3, #24]
		Flags[i] |= (tempRead)<<i;
	}

	LL_GPIO_SetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	BSbuffer[s_flag].Enc2[Sub_cnt]=tempPosition;
 8002ec8:	4b08      	ldr	r3, [pc, #32]	; (8002eec <Mag_Enc2_Store+0x84>)
 8002eca:	781a      	ldrb	r2, [r3, #0]
 8002ecc:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <Mag_Enc2_Store+0x88>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8002ed4:	f503 53f7 	add.w	r3, r3, #7904	; 0x1ee0
 8002ed8:	3314      	adds	r3, #20
 8002eda:	4a06      	ldr	r2, [pc, #24]	; (8002ef4 <Mag_Enc2_Store+0x8c>)
 8002edc:	f822 5013 	strh.w	r5, [r2, r3, lsl #1]
 8002ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ee4:	48000800 	.word	0x48000800
 8002ee8:	48000400 	.word	0x48000400
 8002eec:	20000581 	.word	0x20000581
 8002ef0:	2000057c 	.word	0x2000057c
 8002ef4:	200005c4 	.word	0x200005c4

08002ef8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef8:	4b21      	ldr	r3, [pc, #132]	; (8002f80 <HAL_MspInit+0x88>)
{
 8002efa:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	661a      	str	r2, [r3, #96]	; 0x60
 8002f04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f06:	f002 0201 	and.w	r2, r2, #1
 8002f0a:	9200      	str	r2, [sp, #0]
 8002f0c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f0e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f14:	659a      	str	r2, [r3, #88]	; 0x58
 8002f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f1e:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f20:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f22:	f001 f90f 	bl	8004144 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002f26:	2200      	movs	r2, #0
 8002f28:	4611      	mov	r1, r2
 8002f2a:	f06f 000b 	mvn.w	r0, #11
 8002f2e:	f001 f91b 	bl	8004168 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002f32:	2200      	movs	r2, #0
 8002f34:	4611      	mov	r1, r2
 8002f36:	f06f 000a 	mvn.w	r0, #10
 8002f3a:	f001 f915 	bl	8004168 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	4611      	mov	r1, r2
 8002f42:	f06f 0009 	mvn.w	r0, #9
 8002f46:	f001 f90f 	bl	8004168 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	f06f 0004 	mvn.w	r0, #4
 8002f52:	f001 f909 	bl	8004168 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002f56:	2200      	movs	r2, #0
 8002f58:	4611      	mov	r1, r2
 8002f5a:	f06f 0003 	mvn.w	r0, #3
 8002f5e:	f001 f903 	bl	8004168 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002f62:	2200      	movs	r2, #0
 8002f64:	4611      	mov	r1, r2
 8002f66:	f06f 0001 	mvn.w	r0, #1
 8002f6a:	f001 f8fd 	bl	8004168 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	4611      	mov	r1, r2
 8002f72:	f04f 30ff 	mov.w	r0, #4294967295
 8002f76:	f001 f8f7 	bl	8004168 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f7a:	b003      	add	sp, #12
 8002f7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f80:	40021000 	.word	0x40021000

08002f84 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002f84:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 8002f86:	6802      	ldr	r2, [r0, #0]
 8002f88:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <HAL_SD_MspInit+0x5c>)
 8002f8a:	429a      	cmp	r2, r3
{
 8002f8c:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 8002f8e:	d124      	bne.n	8002fda <HAL_SD_MspInit+0x56>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002f90:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f94:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002f96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f98:	4812      	ldr	r0, [pc, #72]	; (8002fe4 <HAL_SD_MspInit+0x60>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002f9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f9e:	661a      	str	r2, [r3, #96]	; 0x60
 8002fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa2:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8002fae:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb2:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002fb4:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fb6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8002fb8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fbc:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002fbe:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fc0:	f001 fa8a 	bl	80044d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fc4:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fc6:	eb0d 0103 	add.w	r1, sp, r3
 8002fca:	4807      	ldr	r0, [pc, #28]	; (8002fe8 <HAL_SD_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fcc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fce:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002fd4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fd6:	f001 fa7f 	bl	80044d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002fda:	b007      	add	sp, #28
 8002fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40012800 	.word	0x40012800
 8002fe4:	48000800 	.word	0x48000800
 8002fe8:	48000c00 	.word	0x48000c00

08002fec <NMI_Handler>:
 8002fec:	4770      	bx	lr

08002fee <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002fee:	e7fe      	b.n	8002fee <HardFault_Handler>

08002ff0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002ff0:	e7fe      	b.n	8002ff0 <MemManage_Handler>

08002ff2 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002ff2:	e7fe      	b.n	8002ff2 <BusFault_Handler>

08002ff4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002ff4:	e7fe      	b.n	8002ff4 <UsageFault_Handler>

08002ff6 <SVC_Handler>:
 8002ff6:	4770      	bx	lr

08002ff8 <DebugMon_Handler>:
 8002ff8:	4770      	bx	lr

08002ffa <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002ffa:	4770      	bx	lr

08002ffc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002ffc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ffe:	f001 f877 	bl	80040f0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003002:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003006:	f001 b906 	b.w	8004216 <HAL_SYSTICK_IRQHandler>
	...

0800300c <OTG_FS_IRQHandler>:
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  // ES HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
	HAL_PCD_IRQHandler(&hpcd);
 800300c:	4801      	ldr	r0, [pc, #4]	; (8003014 <OTG_FS_IRQHandler+0x8>)
 800300e:	f001 bc09 	b.w	8004824 <HAL_PCD_IRQHandler>
 8003012:	bf00      	nop
 8003014:	20008f68 	.word	0x20008f68

08003018 <DMA2_Channel4_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Channel4_IRQHandler(void)
{
  if((uSdHandle.SdOperation == SD_READ_MULTIPLE_BLOCK) || (uSdHandle.SdOperation == SD_READ_SINGLE_BLOCK))
 8003018:	4b04      	ldr	r3, [pc, #16]	; (800302c <DMA2_Channel4_IRQHandler+0x14>)
 800301a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800301c:	2a01      	cmp	r2, #1
 800301e:	d001      	beq.n	8003024 <DMA2_Channel4_IRQHandler+0xc>
 8003020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003022:	b90b      	cbnz	r3, 8003028 <DMA2_Channel4_IRQHandler+0x10>
  {
    BSP_SD_DMA_Rx_IRQHandler();
 8003024:	f7fd bad4 	b.w	80005d0 <BSP_SD_DMA_Rx_IRQHandler>
  }
  else
  {
    BSP_SD_DMA_Tx_IRQHandler();
 8003028:	f7fd bacc 	b.w	80005c4 <BSP_SD_DMA_Tx_IRQHandler>
 800302c:	200085f8 	.word	0x200085f8

08003030 <SDMMC1_IRQHandler>:
  * @param  None
  * @retval None
  */
void SDMMC1_IRQHandler(void)
{
  BSP_SD_IRQHandler();
 8003030:	f7fd bac2 	b.w	80005b8 <BSP_SD_IRQHandler>

08003034 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003034:	490f      	ldr	r1, [pc, #60]	; (8003074 <SystemInit+0x40>)
 8003036:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800303a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003042:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <SystemInit+0x44>)
 8003044:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003046:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003048:	f042 0201 	orr.w	r2, r2, #1
 800304c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800304e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003056:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800305a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800305c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003060:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003068:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800306a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800306c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003070:	608b      	str	r3, [r1, #8]
 8003072:	4770      	bx	lr
 8003074:	e000ed00 	.word	0xe000ed00
 8003078:	40021000 	.word	0x40021000

0800307c <LL_APB1_GRP1_EnableClock>:
  SET_BIT(RCC->APB1ENR1, Periphs);
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <LL_APB1_GRP1_EnableClock+0x18>)
 800307e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003080:	4302      	orrs	r2, r0
 8003082:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 8003086:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003088:	4018      	ands	r0, r3
 800308a:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800308c:	9b01      	ldr	r3, [sp, #4]
}
 800308e:	b002      	add	sp, #8
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000

08003098 <LL_RCC_SetUSBClockSource.constprop.3>:
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, USBxSource);
 8003098:	4a03      	ldr	r2, [pc, #12]	; (80030a8 <LL_RCC_SetUSBClockSource.constprop.3+0x10>)
 800309a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800309e:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80030a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80030a6:	4770      	bx	lr
 80030a8:	40021000 	.word	0x40021000

080030ac <delay_us>:
extern uint8_t USB_Mode;
extern uint8_t Enter_Into_DFU,MSC_continue,VCP_continue;

void delay_us(uint32_t us){
    uint32_t i,k;
    for(k=0;k<us;k++)
 80030ac:	2300      	movs	r3, #0
 80030ae:	4283      	cmp	r3, r0
 80030b0:	d100      	bne.n	80030b4 <delay_us+0x8>
    {
    	for(i=0;i<11;i++)
         __NOP();  // Timed at 48 MHz clock
    }
}
 80030b2:	4770      	bx	lr
 80030b4:	220b      	movs	r2, #11
  __ASM volatile ("nop");
 80030b6:	bf00      	nop
    	for(i=0;i<11;i++)
 80030b8:	3a01      	subs	r2, #1
 80030ba:	d1fc      	bne.n	80030b6 <delay_us+0xa>
    for(k=0;k<us;k++)
 80030bc:	3301      	adds	r3, #1
 80030be:	e7f6      	b.n	80030ae <delay_us+0x2>

080030c0 <Start_LPTIMCounter2>:
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 80030c0:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <Start_LPTIMCounter2+0x24>)
 80030c2:	6913      	ldr	r3, [r2, #16]
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	6113      	str	r3, [r2, #16]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 80030ca:	6993      	ldr	r3, [r2, #24]
 80030cc:	0c1b      	lsrs	r3, r3, #16
 80030ce:	041b      	lsls	r3, r3, #16
 80030d0:	4318      	orrs	r0, r3
 80030d2:	6190      	str	r0, [r2, #24]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 80030d4:	6913      	ldr	r3, [r2, #16]
 80030d6:	f023 0306 	bic.w	r3, r3, #6
 80030da:	f043 0304 	orr.w	r3, r3, #4
 80030de:	6113      	str	r3, [r2, #16]
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40009400 	.word	0x40009400

080030e8 <LSE_ON>:
	/* Following 2lines are necessary before LSE
	RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN; // PWR clock is necessary for LSE
	PWR->CR1 |= PWR_CR1_DBP;  // Enable Backup access
	*/

	RCC->BDCR |= RCC_BDCR_LSEON;  // LSE ON
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <LSE_ON+0x18>)
 80030ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	while(((RCC->BDCR) & RCC_BDCR_LSERDY) != (RCC_BDCR_LSERDY)); // wait for LSE to get ready
 80030f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80030fa:	0792      	lsls	r2, r2, #30
 80030fc:	d5fb      	bpl.n	80030f6 <LSE_ON+0xe>

}
 80030fe:	4770      	bx	lr
 8003100:	40021000 	.word	0x40021000

08003104 <EnterStop>:
	{
	}
}

void EnterStop(void) // Enter Stop Mode
{
 8003104:	b508      	push	{r3, lr}
	HAL_SuspendTick();  // Before entering STOP mode, SYS_tick needs to disable
 8003106:	f001 f80d 	bl	8004124 <HAL_SuspendTick>
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 800310a:	4a07      	ldr	r2, [pc, #28]	; (8003128 <EnterStop+0x24>)
 800310c:	6813      	ldr	r3, [r2, #0]
 800310e:	f023 0307 	bic.w	r3, r3, #7
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6013      	str	r3, [r2, #0]
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003118:	4a04      	ldr	r2, [pc, #16]	; (800312c <EnterStop+0x28>)
 800311a:	6913      	ldr	r3, [r2, #16]
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 8003122:	bf30      	wfi
 8003124:	bd08      	pop	{r3, pc}
 8003126:	bf00      	nop
 8003128:	40007000 	.word	0x40007000
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <SystemClock_Config_MSI_80MHz>:
*            PLL_R                          = 4
*            Flash Latency(WS)              = 4
*/

void SystemClock_Config_MSI_80MHz(void)
{
 8003130:	b510      	push	{r4, lr}
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 8003132:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
{
 8003136:	b092      	sub	sp, #72	; 0x48
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 8003138:	f7ff ffa0 	bl	800307c <LL_APB1_GRP1_EnableClock>
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800313c:	4b31      	ldr	r3, [pc, #196]	; (8003204 <SystemClock_Config_MSI_80MHz+0xd4>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003144:	601a      	str	r2, [r3, #0]
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800314c:	605a      	str	r2, [r3, #4]
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 800314e:	685a      	ldr	r2, [r3, #4]
	  LL_PWR_EnableBkUpAccess();                              // Enable Backup access (needed for LSE clock)
	  LL_PWR_EnableVddUSB();                                  // Enable VDDUSB supply for USB
	  while(!LL_PWR_IsEnabledVddUSB());                       // Wait for VDDUSB supply to activate
 8003150:	0552      	lsls	r2, r2, #21
 8003152:	d5fc      	bpl.n	800314e <SystemClock_Config_MSI_80MHz+0x1e>

	  /* Enable MSI Oscillator and activate PLL with MSI as source */
	  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8003154:	2310      	movs	r3, #16
 8003156:	9301      	str	r3, [sp, #4]
	  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8003158:	2301      	movs	r3, #1
 800315a:	9307      	str	r3, [sp, #28]
	//  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
	  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 800315c:	930c      	str	r3, [sp, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLM            = 6;
 800315e:	2306      	movs	r3, #6
 8003160:	930d      	str	r3, [sp, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLN            = 40;
 8003162:	2328      	movs	r3, #40	; 0x28
 8003164:	930e      	str	r3, [sp, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 8003166:	2307      	movs	r3, #7
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
	  RCC_OscInitStruct.PLL.PLLR            = 4;

	  HAL_RCC_OscConfig(&RCC_OscInitStruct);

	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8003168:	4c27      	ldr	r4, [pc, #156]	; (8003208 <SystemClock_Config_MSI_80MHz+0xd8>)
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 800316a:	930f      	str	r3, [sp, #60]	; 0x3c
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 800316c:	22b0      	movs	r2, #176	; 0xb0
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 800316e:	2304      	movs	r3, #4
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8003170:	9209      	str	r2, [sp, #36]	; 0x24
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003172:	eb0d 0003 	add.w	r0, sp, r3
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8003176:	2202      	movs	r2, #2
 8003178:	920b      	str	r2, [sp, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 800317a:	9310      	str	r3, [sp, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLR            = 4;
 800317c:	9311      	str	r3, [sp, #68]	; 0x44
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800317e:	f002 f8a5 	bl	80052cc <HAL_RCC_OscConfig>
	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8003182:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003186:	f023 0320 	bic.w	r3, r3, #32
 800318a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	  CLEAR_BIT(RCC->CIER, (RCC_IT_LSECSS));
 800318e:	69a3      	ldr	r3, [r4, #24]
 8003190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003194:	61a3      	str	r3, [r4, #24]

	  LSE_ON();                                                     //Start LSE for RTC and LPTIM timer
 8003196:	f7ff ffa7 	bl	80030e8 <LSE_ON>
	  HAL_RCCEx_EnableMSIPLLMode();
 800319a:	f002 fb0b 	bl	80057b4 <HAL_RCCEx_EnableMSIPLLMode>


	  LL_RCC_SetSDMMCClockSource(LL_RCC_SDMMC1_CLKSOURCE_MSI);
 800319e:	f7ff ff7b 	bl	8003098 <LL_RCC_SetUSBClockSource.constprop.3>
	  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_MSI);
 80031a2:	f7ff ff79 	bl	8003098 <LL_RCC_SetUSBClockSource.constprop.3>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80031a6:	68a3      	ldr	r3, [r4, #8]
 80031a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ac:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80031ae:	68a3      	ldr	r3, [r4, #8]
 80031b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80031b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031b8:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80031ba:	68a3      	ldr	r3, [r4, #8]
 80031bc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80031c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031c4:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80031c6:	68a3      	ldr	r3, [r4, #8]
 80031c8:	f023 0303 	bic.w	r3, r3, #3
 80031cc:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_FLASH_LATENCY_4
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80031ce:	4b0f      	ldr	r3, [pc, #60]	; (800320c <SystemClock_Config_MSI_80MHz+0xdc>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	f022 0207 	bic.w	r2, r2, #7
 80031d6:	f042 0204 	orr.w	r2, r2, #4
 80031da:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_3
  *         @arg @ref LL_FLASH_LATENCY_4
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	f002 0207 	and.w	r2, r2, #7
	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2); //1
	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);

	  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
	  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4);
 80031e2:	2a04      	cmp	r2, #4
 80031e4:	d1fa      	bne.n	80031dc <SystemClock_Config_MSI_80MHz+0xac>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80031e6:	68a3      	ldr	r3, [r4, #8]
 80031e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80031ec:	60a3      	str	r3, [r4, #8]

	  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_MSI);  // MSI clock is set as default clock after wake up from Stop
	  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();               // Disable USB clock to save power
 80031ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80031f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031f4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80031f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80031f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	9b00      	ldr	r3, [sp, #0]

		}
 8003200:	b012      	add	sp, #72	; 0x48
 8003202:	bd10      	pop	{r4, pc}
 8003204:	40007000 	.word	0x40007000
 8003208:	40021000 	.word	0x40021000
 800320c:	40022000 	.word	0x40022000

08003210 <Configure_LPTIM2_Int>:
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003210:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <Configure_LPTIM2_Int+0x40>)
 8003212:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003216:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 800321a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SET_BIT(RCC->APB1ENR2, Periphs);
 800321e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003220:	f042 0220 	orr.w	r2, r2, #32
 8003224:	65da      	str	r2, [r3, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c

		}

//Configure LPTIM2 to generate the XX Hz interrupt
void Configure_LPTIM2_Int(void)
{
 8003228:	b082      	sub	sp, #8
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003230:	9b01      	ldr	r3, [sp, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <Configure_LPTIM2_Int+0x44>)
 8003234:	2204      	movs	r2, #4
 8003236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <Configure_LPTIM2_Int+0x48>)
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	f022 0202 	bic.w	r2, r2, #2
 8003242:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	f022 0201 	bic.w	r2, r2, #1
 800324a:	611a      	str	r2, [r3, #16]
	LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);     // Enable LPTIM2 Clock
	NVIC_DisableIRQ(LPTIM2_IRQn);
	LL_LPTIM_DisableIT_ARRM(LPTIM2);                           // Enable auto reload match interrupt (ARRMIE).
	LL_LPTIM_Disable(LPTIM2);                                // LPTIM2 disable if needed

}
 800324c:	b002      	add	sp, #8
 800324e:	4770      	bx	lr
 8003250:	40021000 	.word	0x40021000
 8003254:	e000e100 	.word	0xe000e100
 8003258:	40009400 	.word	0x40009400

0800325c <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800325c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800325e:	4c1d      	ldr	r4, [pc, #116]	; (80032d4 <HAL_PCD_MspInit+0x78>)
 8003260:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003268:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 800326a:	b088      	sub	sp, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8003274:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003278:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327a:	2302      	movs	r3, #2
 800327c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003280:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003282:	260a      	movs	r6, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8003284:	a903      	add	r1, sp, #12
 8003286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800328a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800328e:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8003290:	f001 f922 	bl	80044d8 <HAL_GPIO_Init>
  
  /* Configure VBUS Pin */

  
  /* Configure ID pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003298:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800329a:	2312      	movs	r3, #18
 800329c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032a0:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032a6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80032a8:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032aa:	f001 f915 	bl	80044d8 <HAL_GPIO_Init>
  
  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80032ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80032b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032b4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80032b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80032b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032bc:	9302      	str	r3, [sp, #8]
  
  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 80032be:	462a      	mov	r2, r5
 80032c0:	2107      	movs	r1, #7
 80032c2:	2043      	movs	r0, #67	; 0x43
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80032c4:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 80032c6:	f000 ff4f 	bl	8004168 <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80032ca:	2043      	movs	r0, #67	; 0x43
 80032cc:	f000 ff80 	bl	80041d0 <HAL_NVIC_EnableIRQ>
    
}
 80032d0:	b008      	add	sp, #32
 80032d2:	bd70      	pop	{r4, r5, r6, pc}
 80032d4:	40021000 	.word	0x40021000

080032d8 <HAL_PCD_MspDeInit>:
  * @retval None
  */
void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)
{  
  /* Disable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 80032d8:	4b04      	ldr	r3, [pc, #16]	; (80032ec <HAL_PCD_MspDeInit+0x14>)
 80032da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032e0:	64da      	str	r2, [r3, #76]	; 0x4c
  __HAL_RCC_SYSCFG_CLK_DISABLE(); 
 80032e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032e4:	f022 0201 	bic.w	r2, r2, #1
 80032e8:	661a      	str	r2, [r3, #96]	; 0x60
 80032ea:	4770      	bx	lr
 80032ec:	40021000 	.word	0x40021000

080032f0 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80032f0:	f500 7162 	add.w	r1, r0, #904	; 0x388
 80032f4:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80032f8:	f005 b805 	b.w	8008306 <USBD_LL_SetupStage>

080032fc <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80032fc:	231c      	movs	r3, #28
 80032fe:	fb03 0301 	mla	r3, r3, r1, r0
 8003302:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003306:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 800330a:	f005 b829 	b.w	8008360 <USBD_LL_DataOutStage>

0800330e <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800330e:	231c      	movs	r3, #28
 8003310:	fb03 0301 	mla	r3, r3, r1, r0
 8003314:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003318:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800331a:	f005 b853 	b.w	80083c4 <USBD_LL_DataInStage>

0800331e <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 800331e:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003322:	f005 b8cf 	b.w	80084c4 <USBD_LL_SOF>

08003326 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8003326:	b510      	push	{r4, lr}
 8003328:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 800332a:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800332e:	f005 f898 	bl	8008462 <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8003332:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 8003336:	2101      	movs	r1, #1
}
 8003338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800333c:	f005 b8b0 	b.w	80084a0 <USBD_LL_SetSpeed>

08003340 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
  USBD_LL_Suspend(hpcd->pData);
 8003340:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003344:	f005 b8af 	b.w	80084a6 <USBD_LL_Suspend>

08003348 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 8003348:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800334c:	f005 b8b4 	b.w	80084b8 <USBD_LL_Resume>

08003350 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8003350:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003354:	f005 b8c4 	b.w	80084e0 <USBD_LL_IsoOUTIncomplete>

08003358 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8003358:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800335c:	f005 b8be 	b.w	80084dc <USBD_LL_IsoINIncomplete>

08003360 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 8003360:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8003364:	f005 b8be 	b.w	80084e4 <USBD_LL_DevConnected>

08003368 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 8003368:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800336c:	f005 b8bc 	b.w	80084e8 <USBD_LL_DevDisconnected>

08003370 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 8003372:	4c15      	ldr	r4, [pc, #84]	; (80033c8 <USBD_LL_Init+0x58>)
  hpcd.Init.dev_endpoints = 5;
  hpcd.Init.use_dedicated_ep1 = 0;
 8003374:	2500      	movs	r5, #0
  hpcd.Init.dev_endpoints = 5;
 8003376:	2305      	movs	r3, #5
 8003378:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hpcd.Init.ep0_mps = 0x40;
  hpcd.Init.dma_enable = 0;
  hpcd.Init.low_power_enable = 0;
  hpcd.Init.lpm_enable = 0;
  hpcd.Init.battery_charging_enable = 0;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800337c:	2601      	movs	r6, #1
  hpcd.Init.Sof_enable = 0;
  hpcd.Init.speed = PCD_SPEED_FULL;
  hpcd.Init.vbus_sensing_enable = 0;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 800337e:	f8c4 03c8 	str.w	r0, [r4, #968]	; 0x3c8
  hpcd.Init.ep0_mps = 0x40;
 8003382:	2740      	movs	r7, #64	; 0x40
  pdev->pData = &hpcd;
 8003384:	f8c0 4220 	str.w	r4, [r0, #544]	; 0x220
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 8003388:	4620      	mov	r0, r4
  hpcd.Init.dev_endpoints = 5;
 800338a:	e884 000c 	stmia.w	r4, {r2, r3}
  hpcd.Init.use_dedicated_ep1 = 0;
 800338e:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;
 8003390:	6167      	str	r7, [r4, #20]
  hpcd.Init.dma_enable = 0;
 8003392:	6125      	str	r5, [r4, #16]
  hpcd.Init.low_power_enable = 0;
 8003394:	6225      	str	r5, [r4, #32]
  hpcd.Init.lpm_enable = 0;
 8003396:	6265      	str	r5, [r4, #36]	; 0x24
  hpcd.Init.battery_charging_enable = 0;
 8003398:	62a5      	str	r5, [r4, #40]	; 0x28
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800339a:	61a6      	str	r6, [r4, #24]
  hpcd.Init.Sof_enable = 0;
 800339c:	61e5      	str	r5, [r4, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800339e:	60e6      	str	r6, [r4, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 80033a0:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_PCD_Init(&hpcd);
 80033a2:	f001 f97b 	bl	800469c <HAL_PCD_Init>
  
  /* Configure EPs FIFOs */
  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 80033a6:	2180      	movs	r1, #128	; 0x80
 80033a8:	4620      	mov	r0, r4
 80033aa:	f001 fe8c 	bl	80050c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 80033ae:	463a      	mov	r2, r7
 80033b0:	4629      	mov	r1, r5
 80033b2:	4620      	mov	r0, r4
 80033b4:	f001 fe66 	bl	8005084 <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x80);
 80033b8:	2280      	movs	r2, #128	; 0x80
 80033ba:	4631      	mov	r1, r6
 80033bc:	4620      	mov	r0, r4
 80033be:	f001 fe61 	bl	8005084 <HAL_PCDEx_SetTxFiFo>

  return USBD_OK;
}
 80033c2:	4628      	mov	r0, r5
 80033c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20008f68 	.word	0x20008f68

080033cc <USBD_LL_DeInit>:
  * @brief  De-Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 80033cc:	b508      	push	{r3, lr}
  HAL_PCD_DeInit(pdev->pData);
 80033ce:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80033d2:	f001 fa15 	bl	8004800 <HAL_PCD_DeInit>
  return USBD_OK;
}
 80033d6:	2000      	movs	r0, #0
 80033d8:	bd08      	pop	{r3, pc}

080033da <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80033da:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 80033dc:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80033e0:	f001 f9e1 	bl	80047a6 <HAL_PCD_Start>
  return USBD_OK;
}
 80033e4:	2000      	movs	r0, #0
 80033e6:	bd08      	pop	{r3, pc}

080033e8 <USBD_LL_Stop>:
  * @brief  Stops the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80033e8:	b508      	push	{r3, lr}
  HAL_PCD_Stop(pdev->pData);
 80033ea:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80033ee:	f001 f9ef 	bl	80047d0 <HAL_PCD_Stop>
  return USBD_OK;
}
 80033f2:	2000      	movs	r0, #0
 80033f4:	bd08      	pop	{r3, pc}

080033f6 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 80033f6:	b510      	push	{r4, lr}
 80033f8:	461c      	mov	r4, r3
  HAL_PCD_EP_Open(pdev->pData,
 80033fa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80033fe:	4613      	mov	r3, r2
 8003400:	4622      	mov	r2, r4
 8003402:	f001 fd33 	bl	8004e6c <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 8003406:	2000      	movs	r0, #0
 8003408:	bd10      	pop	{r4, pc}

0800340a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800340a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800340c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003410:	f001 fd51 	bl	8004eb6 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 8003414:	2000      	movs	r0, #0
 8003416:	bd08      	pop	{r3, pc}

08003418 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003418:	b508      	push	{r3, lr}
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800341a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800341e:	f001 fe17 	bl	8005050 <HAL_PCD_EP_Flush>
  return USBD_OK;
}
 8003422:	2000      	movs	r0, #0
 8003424:	bd08      	pop	{r3, pc}

08003426 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003426:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003428:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800342c:	f001 fdbf 	bl	8004fae <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8003430:	2000      	movs	r0, #0
 8003432:	bd08      	pop	{r3, pc}

08003434 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003434:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003436:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800343a:	f001 fde4 	bl	8005006 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 800343e:	2000      	movs	r0, #0
 8003440:	bd08      	pop	{r3, pc}

08003442 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003442:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003446:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 800344a:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800344e:	bf1b      	ittet	ne
 8003450:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8003454:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003458:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800345c:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003460:	bf08      	it	eq
 8003462:	f891 01e2 	ldrbeq.w	r0, [r1, #482]	; 0x1e2
  }
}
 8003466:	4770      	bx	lr

08003468 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8003468:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800346a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800346e:	f001 fce9 	bl	8004e44 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8003472:	2000      	movs	r0, #0
 8003474:	bd08      	pop	{r3, pc}

08003476 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8003476:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003478:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800347c:	f001 fd70 	bl	8004f60 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8003480:	2000      	movs	r0, #0
 8003482:	bd08      	pop	{r3, pc}

08003484 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8003484:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003486:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800348a:	f001 fd37 	bl	8004efc <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 800348e:	2000      	movs	r0, #0
 8003490:	bd08      	pop	{r3, pc}

08003492 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003492:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8003494:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003498:	f001 fd5a 	bl	8004f50 <HAL_PCD_EP_GetRxCount>
}
 800349c:	bd08      	pop	{r3, pc}
	...

080034a0 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc_VCP);
 80034a0:	2312      	movs	r3, #18
 80034a2:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc_VCP;
}
 80034a4:	4800      	ldr	r0, [pc, #0]	; (80034a8 <USBD_VCP_DeviceDescriptor+0x8>)
 80034a6:	4770      	bx	lr
 80034a8:	20000038 	.word	0x20000038

080034ac <USBD_MSC_DeviceDescriptor>:

uint8_t *USBD_MSC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 80034ac:	2312      	movs	r3, #18
 80034ae:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc;
}
 80034b0:	4800      	ldr	r0, [pc, #0]	; (80034b4 <USBD_MSC_DeviceDescriptor+0x8>)
 80034b2:	4770      	bx	lr
 80034b4:	20000024 	.word	0x20000024

080034b8 <USBD_MSC_LangIDStrDescriptor>:
  return (uint8_t*)USBD_LangIDDesc;
}

uint8_t *USBD_MSC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 80034b8:	2304      	movs	r3, #4
 80034ba:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 80034bc:	4800      	ldr	r0, [pc, #0]	; (80034c0 <USBD_MSC_LangIDStrDescriptor+0x8>)
 80034be:	4770      	bx	lr
 80034c0:	2000004c 	.word	0x2000004c

080034c4 <IntToUnicode>:
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80034c4:	2300      	movs	r3, #0
{
 80034c6:	b530      	push	{r4, r5, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80034c8:	461d      	mov	r5, r3
  for( idx = 0 ; idx < len ; idx ++)
 80034ca:	b2dc      	uxtb	r4, r3
 80034cc:	42a2      	cmp	r2, r4
 80034ce:	d800      	bhi.n	80034d2 <IntToUnicode+0xe>
  }
}
 80034d0:	bd30      	pop	{r4, r5, pc}
    if( ((value >> 28)) < 0xA )
 80034d2:	0f04      	lsrs	r4, r0, #28
 80034d4:	2c09      	cmp	r4, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 80034d6:	bf94      	ite	ls
 80034d8:	3430      	addls	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 80034da:	3437      	addhi	r4, #55	; 0x37
 80034dc:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 80034e0:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 80034e4:	0100      	lsls	r0, r0, #4
    pbuf[ 2* idx + 1] = 0;
 80034e6:	7065      	strb	r5, [r4, #1]
 80034e8:	3301      	adds	r3, #1
 80034ea:	e7ee      	b.n	80034ca <IntToUnicode+0x6>

080034ec <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80034ec:	231a      	movs	r3, #26
{
 80034ee:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80034f0:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)VCP_DEVICE_ID1;
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <USBD_VCP_SerialStrDescriptor+0x2c>)
 80034f4:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)VCP_DEVICE_ID3;
 80034f6:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80034f8:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80034fa:	18c0      	adds	r0, r0, r3
 80034fc:	d00a      	beq.n	8003514 <USBD_VCP_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)VCP_DEVICE_ID2;
 80034fe:	4b07      	ldr	r3, [pc, #28]	; (800351c <USBD_VCP_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8003500:	4907      	ldr	r1, [pc, #28]	; (8003520 <USBD_VCP_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)VCP_DEVICE_ID2;
 8003502:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8003504:	2208      	movs	r2, #8
 8003506:	f7ff ffdd 	bl	80034c4 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800350a:	2204      	movs	r2, #4
 800350c:	4905      	ldr	r1, [pc, #20]	; (8003524 <USBD_VCP_SerialStrDescriptor+0x38>)
 800350e:	4620      	mov	r0, r4
 8003510:	f7ff ffd8 	bl	80034c4 <IntToUnicode>
}
 8003514:	4804      	ldr	r0, [pc, #16]	; (8003528 <USBD_VCP_SerialStrDescriptor+0x3c>)
 8003516:	bd10      	pop	{r4, pc}
 8003518:	1fff7a30 	.word	0x1fff7a30
 800351c:	1fff7a34 	.word	0x1fff7a34
 8003520:	20000052 	.word	0x20000052
 8003524:	20000062 	.word	0x20000062
 8003528:	20000050 	.word	0x20000050

0800352c <USBD_MSC_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800352c:	231a      	movs	r3, #26
{
 800352e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003530:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8003532:	4b09      	ldr	r3, [pc, #36]	; (8003558 <USBD_MSC_SerialStrDescriptor+0x2c>)
 8003534:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 8003536:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8003538:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800353a:	18c0      	adds	r0, r0, r3
 800353c:	d00a      	beq.n	8003554 <USBD_MSC_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800353e:	4b07      	ldr	r3, [pc, #28]	; (800355c <USBD_MSC_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8003540:	4907      	ldr	r1, [pc, #28]	; (8003560 <USBD_MSC_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8003542:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8003544:	2208      	movs	r2, #8
 8003546:	f7ff ffbd 	bl	80034c4 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800354a:	2204      	movs	r2, #4
 800354c:	4905      	ldr	r1, [pc, #20]	; (8003564 <USBD_MSC_SerialStrDescriptor+0x38>)
 800354e:	4620      	mov	r0, r4
 8003550:	f7ff ffb8 	bl	80034c4 <IntToUnicode>
}
 8003554:	4804      	ldr	r0, [pc, #16]	; (8003568 <USBD_MSC_SerialStrDescriptor+0x3c>)
 8003556:	bd10      	pop	{r4, pc}
 8003558:	1fff7a10 	.word	0x1fff7a10
 800355c:	1fff7a14 	.word	0x1fff7a14
 8003560:	20000052 	.word	0x20000052
 8003564:	20000062 	.word	0x20000062
 8003568:	20000050 	.word	0x20000050

0800356c <USBD_VCP_ProductStrDescriptor>:
{
 800356c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING_VCP, USBD_StrDesc, length);
 800356e:	4c04      	ldr	r4, [pc, #16]	; (8003580 <USBD_VCP_ProductStrDescriptor+0x14>)
 8003570:	4804      	ldr	r0, [pc, #16]	; (8003584 <USBD_VCP_ProductStrDescriptor+0x18>)
 8003572:	460a      	mov	r2, r1
 8003574:	4621      	mov	r1, r4
 8003576:	f005 f961 	bl	800883c <USBD_GetString>
}
 800357a:	4620      	mov	r0, r4
 800357c:	bd10      	pop	{r4, pc}
 800357e:	bf00      	nop
 8003580:	20009334 	.word	0x20009334
 8003584:	0800b601 	.word	0x0800b601

08003588 <USBD_MSC_ProductStrDescriptor>:
{
 8003588:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800358a:	4c04      	ldr	r4, [pc, #16]	; (800359c <USBD_MSC_ProductStrDescriptor+0x14>)
 800358c:	4804      	ldr	r0, [pc, #16]	; (80035a0 <USBD_MSC_ProductStrDescriptor+0x18>)
 800358e:	460a      	mov	r2, r1
 8003590:	4621      	mov	r1, r4
 8003592:	f005 f953 	bl	800883c <USBD_GetString>
}
 8003596:	4620      	mov	r0, r4
 8003598:	bd10      	pop	{r4, pc}
 800359a:	bf00      	nop
 800359c:	20009334 	.word	0x20009334
 80035a0:	0800b5d0 	.word	0x0800b5d0

080035a4 <USBD_MSC_ManufacturerStrDescriptor>:
{
 80035a4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80035a6:	4c04      	ldr	r4, [pc, #16]	; (80035b8 <USBD_MSC_ManufacturerStrDescriptor+0x14>)
 80035a8:	4804      	ldr	r0, [pc, #16]	; (80035bc <USBD_MSC_ManufacturerStrDescriptor+0x18>)
 80035aa:	460a      	mov	r2, r1
 80035ac:	4621      	mov	r1, r4
 80035ae:	f005 f945 	bl	800883c <USBD_GetString>
}
 80035b2:	4620      	mov	r0, r4
 80035b4:	bd10      	pop	{r4, pc}
 80035b6:	bf00      	nop
 80035b8:	20009334 	.word	0x20009334
 80035bc:	0800b5bd 	.word	0x0800b5bd

080035c0 <USBD_VCP_ConfigStrDescriptor>:
{
 80035c0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING_VCP, USBD_StrDesc, length);
 80035c2:	4c04      	ldr	r4, [pc, #16]	; (80035d4 <USBD_VCP_ConfigStrDescriptor+0x14>)
 80035c4:	4804      	ldr	r0, [pc, #16]	; (80035d8 <USBD_VCP_ConfigStrDescriptor+0x18>)
 80035c6:	460a      	mov	r2, r1
 80035c8:	4621      	mov	r1, r4
 80035ca:	f005 f937 	bl	800883c <USBD_GetString>
}
 80035ce:	4620      	mov	r0, r4
 80035d0:	bd10      	pop	{r4, pc}
 80035d2:	bf00      	nop
 80035d4:	20009334 	.word	0x20009334
 80035d8:	0800b5e8 	.word	0x0800b5e8

080035dc <USBD_MSC_ConfigStrDescriptor>:
{
 80035dc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 80035de:	4c04      	ldr	r4, [pc, #16]	; (80035f0 <USBD_MSC_ConfigStrDescriptor+0x14>)
 80035e0:	4804      	ldr	r0, [pc, #16]	; (80035f4 <USBD_MSC_ConfigStrDescriptor+0x18>)
 80035e2:	460a      	mov	r2, r1
 80035e4:	4621      	mov	r1, r4
 80035e6:	f005 f929 	bl	800883c <USBD_GetString>
}
 80035ea:	4620      	mov	r0, r4
 80035ec:	bd10      	pop	{r4, pc}
 80035ee:	bf00      	nop
 80035f0:	20009334 	.word	0x20009334
 80035f4:	0800b5a4 	.word	0x0800b5a4

080035f8 <USBD_VCP_InterfaceStrDescriptor>:
{
 80035f8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING_VCP, USBD_StrDesc, length);
 80035fa:	4c04      	ldr	r4, [pc, #16]	; (800360c <USBD_VCP_InterfaceStrDescriptor+0x14>)
 80035fc:	4804      	ldr	r0, [pc, #16]	; (8003610 <USBD_VCP_InterfaceStrDescriptor+0x18>)
 80035fe:	460a      	mov	r2, r1
 8003600:	4621      	mov	r1, r4
 8003602:	f005 f91b 	bl	800883c <USBD_GetString>
}
 8003606:	4620      	mov	r0, r4
 8003608:	bd10      	pop	{r4, pc}
 800360a:	bf00      	nop
 800360c:	20009334 	.word	0x20009334
 8003610:	0800b5f3 	.word	0x0800b5f3

08003614 <USBD_MSC_InterfaceStrDescriptor>:
{
 8003614:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8003616:	4c04      	ldr	r4, [pc, #16]	; (8003628 <USBD_MSC_InterfaceStrDescriptor+0x14>)
 8003618:	4804      	ldr	r0, [pc, #16]	; (800362c <USBD_MSC_InterfaceStrDescriptor+0x18>)
 800361a:	460a      	mov	r2, r1
 800361c:	4621      	mov	r1, r4
 800361e:	f005 f90d 	bl	800883c <USBD_GetString>
}
 8003622:	4620      	mov	r0, r4
 8003624:	bd10      	pop	{r4, pc}
 8003626:	bf00      	nop
 8003628:	20009334 	.word	0x20009334
 800362c:	0800b5af 	.word	0x0800b5af

08003630 <USBD_VCP_LangIDStrDescriptor>:
 8003630:	2304      	movs	r3, #4
 8003632:	800b      	strh	r3, [r1, #0]
 8003634:	4800      	ldr	r0, [pc, #0]	; (8003638 <USBD_VCP_LangIDStrDescriptor+0x8>)
 8003636:	4770      	bx	lr
 8003638:	2000004c 	.word	0x2000004c

0800363c <USBD_VCP_ManufacturerStrDescriptor>:
 800363c:	b510      	push	{r4, lr}
 800363e:	4c04      	ldr	r4, [pc, #16]	; (8003650 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8003640:	4804      	ldr	r0, [pc, #16]	; (8003654 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
 8003642:	460a      	mov	r2, r1
 8003644:	4621      	mov	r1, r4
 8003646:	f005 f8f9 	bl	800883c <USBD_GetString>
 800364a:	4620      	mov	r0, r4
 800364c:	bd10      	pop	{r4, pc}
 800364e:	bf00      	nop
 8003650:	20009334 	.word	0x20009334
 8003654:	0800b5bd 	.word	0x0800b5bd

08003658 <STORAGE_IsWriteProtected>:
  * @retval Status (0: write enabled / -1: otherwise)
  */
int8_t STORAGE_IsWriteProtected(uint8_t lun)
{
  return 0;
}
 8003658:	2000      	movs	r0, #0
 800365a:	4770      	bx	lr

0800365c <STORAGE_GetMaxLun>:
  * @retval Lun(s) number
  */
int8_t STORAGE_GetMaxLun(void)
{
  return(STORAGE_LUN_NBR - 1);
}
 800365c:	2000      	movs	r0, #0
 800365e:	4770      	bx	lr

08003660 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003660:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

  if(pdev->pClassData != NULL)
 8003664:	b11b      	cbz	r3, 800366e <USBD_CDC_DataIn+0xe>
  {

    hcdc->TxState = 0;
 8003666:	2000      	movs	r0, #0
 8003668:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 800366c:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 800366e:	2002      	movs	r0, #2
  }
}
 8003670:	4770      	bx	lr

08003672 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003672:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{
 8003676:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003678:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800367c:	b15b      	cbz	r3, 8003696 <USBD_CDC_EP0_RxReady+0x24>
 800367e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003682:	28ff      	cmp	r0, #255	; 0xff
 8003684:	d007      	beq.n	8003696 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800368c:	4621      	mov	r1, r4
 800368e:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF;
 8003690:	23ff      	movs	r3, #255	; 0xff
 8003692:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003696:	2000      	movs	r0, #0
 8003698:	bd10      	pop	{r4, pc}
	...

0800369c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800369c:	2343      	movs	r3, #67	; 0x43
 800369e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80036a0:	4800      	ldr	r0, [pc, #0]	; (80036a4 <USBD_CDC_GetFSCfgDesc+0x8>)
 80036a2:	4770      	bx	lr
 80036a4:	200000ec 	.word	0x200000ec

080036a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80036a8:	2343      	movs	r3, #67	; 0x43
 80036aa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80036ac:	4800      	ldr	r0, [pc, #0]	; (80036b0 <USBD_CDC_GetHSCfgDesc+0x8>)
 80036ae:	4770      	bx	lr
 80036b0:	20000130 	.word	0x20000130

080036b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80036b4:	2343      	movs	r3, #67	; 0x43
 80036b6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80036b8:	4800      	ldr	r0, [pc, #0]	; (80036bc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80036ba:	4770      	bx	lr
 80036bc:	20000180 	.word	0x20000180

080036c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80036c0:	230a      	movs	r3, #10
 80036c2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80036c4:	4800      	ldr	r0, [pc, #0]	; (80036c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80036c6:	4770      	bx	lr
 80036c8:	20000174 	.word	0x20000174

080036cc <STORAGE_Init>:
{
 80036cc:	b508      	push	{r3, lr}
  BSP_SD_Init();
 80036ce:	f7fd f81b 	bl	8000708 <BSP_SD_Init>
}
 80036d2:	2000      	movs	r0, #0
 80036d4:	bd08      	pop	{r3, pc}

080036d6 <STORAGE_GetCapacity>:
{
 80036d6:	b530      	push	{r4, r5, lr}
 80036d8:	b097      	sub	sp, #92	; 0x5c
 80036da:	460d      	mov	r5, r1
 80036dc:	4614      	mov	r4, r2
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 80036de:	f7fc ff57 	bl	8000590 <BSP_SD_IsDetected>
 80036e2:	b178      	cbz	r0, 8003704 <STORAGE_GetCapacity+0x2e>
    BSP_SD_GetCardInfo(&info);
 80036e4:	4668      	mov	r0, sp
 80036e6:	f7fc ff7f 	bl	80005e8 <BSP_SD_GetCardInfo>
    *block_num = (info.CardCapacity)/STORAGE_BLK_SIZ  - 1;
 80036ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80036ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80036ee:	0a5b      	lsrs	r3, r3, #9
 80036f0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80036f4:	3b01      	subs	r3, #1
 80036f6:	602b      	str	r3, [r5, #0]
    *block_size = STORAGE_BLK_SIZ;
 80036f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036fc:	8023      	strh	r3, [r4, #0]
    ret = 0;
 80036fe:	2000      	movs	r0, #0
}
 8003700:	b017      	add	sp, #92	; 0x5c
 8003702:	bd30      	pop	{r4, r5, pc}
  int8_t ret = -1;  
 8003704:	f04f 30ff 	mov.w	r0, #4294967295
 8003708:	e7fa      	b.n	8003700 <STORAGE_GetCapacity+0x2a>

0800370a <STORAGE_Read>:
{
 800370a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800370c:	460c      	mov	r4, r1
 800370e:	4615      	mov	r5, r2
 8003710:	461e      	mov	r6, r3
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8003712:	f7fc ff3d 	bl	8000590 <BSP_SD_IsDetected>
 8003716:	b158      	cbz	r0, 8003730 <STORAGE_Read+0x26>
    BSP_SD_ReadBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 8003718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	9601      	str	r6, [sp, #4]
 8003720:	026a      	lsls	r2, r5, #9
 8003722:	2300      	movs	r3, #0
 8003724:	4620      	mov	r0, r4
 8003726:	f7fc ff97 	bl	8000658 <BSP_SD_ReadBlocks_DMA>
    ret = 0;
 800372a:	2000      	movs	r0, #0
}
 800372c:	b002      	add	sp, #8
 800372e:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;  
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	e7fa      	b.n	800372c <STORAGE_Read+0x22>

08003736 <STORAGE_Write>:
{
 8003736:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003738:	460c      	mov	r4, r1
 800373a:	4615      	mov	r5, r2
 800373c:	461e      	mov	r6, r3
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800373e:	f7fc ff27 	bl	8000590 <BSP_SD_IsDetected>
 8003742:	b158      	cbz	r0, 800375c <STORAGE_Write+0x26>
    BSP_SD_WriteBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 8003744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	9601      	str	r6, [sp, #4]
 800374c:	026a      	lsls	r2, r5, #9
 800374e:	2300      	movs	r3, #0
 8003750:	4620      	mov	r0, r4
 8003752:	f7fd f859 	bl	8000808 <BSP_SD_WriteBlocks_DMA>
    ret = 0;
 8003756:	2000      	movs	r0, #0
}
 8003758:	b002      	add	sp, #8
 800375a:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;  
 800375c:	f04f 30ff 	mov.w	r0, #4294967295
 8003760:	e7fa      	b.n	8003758 <STORAGE_Write+0x22>

08003762 <USBD_CDC_DataOut>:
{
 8003762:	b538      	push	{r3, r4, r5, lr}
 8003764:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003766:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800376a:	f7ff fe92 	bl	8003492 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800376e:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003772:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8003776:	b14b      	cbz	r3, 800378c <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003778:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800377c:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8003786:	4798      	blx	r3
    return USBD_OK;
 8003788:	2000      	movs	r0, #0
 800378a:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800378c:	2002      	movs	r0, #2
}
 800378e:	bd38      	pop	{r3, r4, r5, pc}

08003790 <USBD_CDC_Setup>:
{
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003792:	780f      	ldrb	r7, [r1, #0]
 8003794:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8003798:	4606      	mov	r6, r0
 800379a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800379c:	d023      	beq.n	80037e6 <USBD_CDC_Setup+0x56>
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d119      	bne.n	80037d6 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 80037a2:	88ca      	ldrh	r2, [r1, #6]
 80037a4:	784b      	ldrb	r3, [r1, #1]
 80037a6:	b1c2      	cbz	r2, 80037da <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 80037a8:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80037aa:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 80037ae:	d50b      	bpl.n	80037c8 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80037b0:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 80037b4:	4618      	mov	r0, r3
 80037b6:	688f      	ldr	r7, [r1, #8]
 80037b8:	4629      	mov	r1, r5
 80037ba:	47b8      	blx	r7
          USBD_CtlSendData (pdev,
 80037bc:	88e2      	ldrh	r2, [r4, #6]
 80037be:	4629      	mov	r1, r5
 80037c0:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 80037c2:	f005 f857 	bl	8008874 <USBD_CtlSendData>
      break;
 80037c6:	e006      	b.n	80037d6 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 80037c8:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80037cc:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev,
 80037d0:	4629      	mov	r1, r5
 80037d2:	f005 f864 	bl	800889e <USBD_CtlPrepareRx>
}
 80037d6:	2000      	movs	r0, #0
 80037d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80037da:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80037de:	6884      	ldr	r4, [r0, #8]
 80037e0:	4618      	mov	r0, r3
 80037e2:	47a0      	blx	r4
 80037e4:	e7f7      	b.n	80037d6 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 80037e6:	784b      	ldrb	r3, [r1, #1]
 80037e8:	2b0a      	cmp	r3, #10
 80037ea:	d1f4      	bne.n	80037d6 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 80037ec:	2201      	movs	r2, #1
 80037ee:	4901      	ldr	r1, [pc, #4]	; (80037f4 <USBD_CDC_Setup+0x64>)
 80037f0:	e7e7      	b.n	80037c2 <USBD_CDC_Setup+0x32>
 80037f2:	bf00      	nop
 80037f4:	20000588 	.word	0x20000588

080037f8 <USBD_CDC_DeInit>:
{
 80037f8:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 80037fa:	2183      	movs	r1, #131	; 0x83
{
 80037fc:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 80037fe:	f7ff fe04 	bl	800340a <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8003802:	2103      	movs	r1, #3
 8003804:	4620      	mov	r0, r4
 8003806:	f7ff fe00 	bl	800340a <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800380a:	2182      	movs	r1, #130	; 0x82
 800380c:	4620      	mov	r0, r4
 800380e:	f7ff fdfc 	bl	800340a <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8003812:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8003816:	b153      	cbz	r3, 800382e <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003818:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003820:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8003824:	f006 fd1c 	bl	800a260 <free>
    pdev->pClassData = NULL;
 8003828:	2300      	movs	r3, #0
 800382a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800382e:	2000      	movs	r0, #0
 8003830:	bd10      	pop	{r4, pc}

08003832 <USBD_CDC_Init>:
{
 8003832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003834:	7c03      	ldrb	r3, [r0, #16]
{
 8003836:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003838:	bb7b      	cbnz	r3, 800389a <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 800383a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800383e:	2202      	movs	r2, #2
 8003840:	2183      	movs	r1, #131	; 0x83
 8003842:	f7ff fdd8 	bl	80033f6 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8003846:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 800384a:	2202      	movs	r2, #2
 800384c:	2103      	movs	r1, #3
 800384e:	4620      	mov	r0, r4
 8003850:	f7ff fdd1 	bl	80033f6 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8003854:	2308      	movs	r3, #8
 8003856:	2203      	movs	r2, #3
 8003858:	2182      	movs	r1, #130	; 0x82
 800385a:	4620      	mov	r0, r4
 800385c:	f7ff fdcb 	bl	80033f6 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003860:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003864:	f006 fcf4 	bl	800a250 <malloc>
 8003868:	4606      	mov	r6, r0
 800386a:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800386e:	b320      	cbz	r0, 80038ba <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003870:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003878:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 800387a:	2500      	movs	r5, #0
 800387c:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8003880:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003884:	b987      	cbnz	r7, 80038a8 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8003886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800388a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800388e:	2103      	movs	r1, #3
 8003890:	4620      	mov	r0, r4
 8003892:	f7ff fdf7 	bl	8003484 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8003896:	4638      	mov	r0, r7
 8003898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 800389a:	2340      	movs	r3, #64	; 0x40
 800389c:	2202      	movs	r2, #2
 800389e:	2183      	movs	r1, #131	; 0x83
 80038a0:	f7ff fda9 	bl	80033f6 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80038a4:	2340      	movs	r3, #64	; 0x40
 80038a6:	e7d0      	b.n	800384a <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 80038a8:	2340      	movs	r3, #64	; 0x40
 80038aa:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80038ae:	2103      	movs	r1, #3
 80038b0:	4620      	mov	r0, r4
 80038b2:	f7ff fde7 	bl	8003484 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80038b6:	4628      	mov	r0, r5
 80038b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1;
 80038ba:	2001      	movs	r0, #1
}
 80038bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038c0 <CDC_Itf_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
 80038c0:	b508      	push	{r3, lr}
  /* DeInitialize the UART peripheral */
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 80038c2:	4802      	ldr	r0, [pc, #8]	; (80038cc <CDC_Itf_DeInit+0xc>)
 80038c4:	f002 feb2 	bl	800662c <HAL_UART_DeInit>
  {
    /* Initialization Error */
 //   Error_Handler();
 }
  return (USBD_OK);
}
 80038c8:	2000      	movs	r0, #0
 80038ca:	bd08      	pop	{r3, pc}
 80038cc:	20009444 	.word	0x20009444

080038d0 <CDC_Itf_Init>:
{
 80038d0:	b570      	push	{r4, r5, r6, lr}
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 80038d2:	4a18      	ldr	r2, [pc, #96]	; (8003934 <CDC_Itf_Init+0x64>)
  UartHandle.Instance          = USARTx;
 80038d4:	4c18      	ldr	r4, [pc, #96]	; (8003938 <CDC_Itf_Init+0x68>)
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 80038d6:	4e19      	ldr	r6, [pc, #100]	; (800393c <CDC_Itf_Init+0x6c>)
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 80038d8:	2500      	movs	r5, #0
 80038da:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80038de:	e884 002c 	stmia.w	r4, {r2, r3, r5}
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 80038e2:	4620      	mov	r0, r4
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80038e4:	230c      	movs	r3, #12
 80038e6:	6163      	str	r3, [r4, #20]
  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 80038e8:	60e5      	str	r5, [r4, #12]
  UartHandle.Init.Parity       = UART_PARITY_NONE;
 80038ea:	6125      	str	r5, [r4, #16]
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80038ec:	61a5      	str	r5, [r4, #24]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 80038ee:	f003 f94b 	bl	8006b88 <HAL_UART_Init>
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 80038f2:	2201      	movs	r2, #1
 80038f4:	4631      	mov	r1, r6
 80038f6:	4620      	mov	r0, r4


static void TIM_Config(void)
{
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 80038f8:	4c11      	ldr	r4, [pc, #68]	; (8003940 <CDC_Itf_Init+0x70>)
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 80038fa:	f002 feb1 	bl	8006660 <HAL_UART_Receive_IT>
  TimHandle.Instance = TIMx;
 80038fe:	4b11      	ldr	r3, [pc, #68]	; (8003944 <CDC_Itf_Init+0x74>)
 8003900:	6023      	str	r3, [r4, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 8003902:	f241 3387 	movw	r3, #4999	; 0x1387
 8003906:	60e3      	str	r3, [r4, #12]
  TimHandle.Init.Prescaler = 84-1;
  TimHandle.Init.ClockDivision = 0;
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8003908:	4620      	mov	r0, r4
  TimHandle.Init.Prescaler = 84-1;
 800390a:	2353      	movs	r3, #83	; 0x53
 800390c:	6063      	str	r3, [r4, #4]
  TimHandle.Init.ClockDivision = 0;
 800390e:	6125      	str	r5, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003910:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8003912:	f002 fe6f 	bl	80065f4 <HAL_TIM_Base_Init>
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8003916:	4620      	mov	r0, r4
 8003918:	f002 fdfe 	bl	8006518 <HAL_TIM_Base_Start_IT>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800391c:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <CDC_Itf_Init+0x78>)
  hcdc->RxBuffer = pbuff;
 800391e:	4a0b      	ldr	r2, [pc, #44]	; (800394c <CDC_Itf_Init+0x7c>)
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003920:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
}
 8003924:	4628      	mov	r0, r5
  hcdc->TxBuffer = pbuff;
 8003926:	f8c3 6208 	str.w	r6, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800392a:	f8c3 5210 	str.w	r5, [r3, #528]	; 0x210
  hcdc->RxBuffer = pbuff;
 800392e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8003932:	bd70      	pop	{r4, r5, r6, pc}
 8003934:	40013800 	.word	0x40013800
 8003938:	20009444 	.word	0x20009444
 800393c:	2000951d 	.word	0x2000951d
 8003940:	2000a91c 	.word	0x2000a91c
 8003944:	40000400 	.word	0x40000400
 8003948:	200086a4 	.word	0x200086a4
 800394c:	2000a110 	.word	0x2000a110

08003950 <STORAGE_IsReady>:
{
 8003950:	b510      	push	{r4, lr}
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8003952:	f7fc fe1d 	bl	8000590 <BSP_SD_IsDetected>
 8003956:	4c0b      	ldr	r4, [pc, #44]	; (8003984 <STORAGE_IsReady+0x34>)
    if(prev_status < 0)
 8003958:	f994 3000 	ldrsb.w	r3, [r4]
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800395c:	b160      	cbz	r0, 8003978 <STORAGE_IsReady+0x28>
    if(prev_status < 0)
 800395e:	2b00      	cmp	r3, #0
 8003960:	da03      	bge.n	800396a <STORAGE_IsReady+0x1a>
      BSP_SD_Init();
 8003962:	f7fc fed1 	bl	8000708 <BSP_SD_Init>
      prev_status = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	7023      	strb	r3, [r4, #0]
    if(BSP_SD_GetStatus() == SD_TRANSFER_OK)
 800396a:	f7fc fe37 	bl	80005dc <BSP_SD_GetStatus>
 800396e:	3000      	adds	r0, #0
 8003970:	bf18      	it	ne
 8003972:	2001      	movne	r0, #1
 8003974:	4240      	negs	r0, r0
 8003976:	bd10      	pop	{r4, pc}
  else if(prev_status == 0)
 8003978:	b90b      	cbnz	r3, 800397e <STORAGE_IsReady+0x2e>
    prev_status = -1;
 800397a:	23ff      	movs	r3, #255	; 0xff
 800397c:	7023      	strb	r3, [r4, #0]
  int8_t ret = -1;
 800397e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003982:	bd10      	pop	{r4, pc}
 8003984:	20000589 	.word	0x20000589

08003988 <CDC_Itf_Control>:
  switch (cmd)
 8003988:	2820      	cmp	r0, #32
{
 800398a:	b538      	push	{r3, r4, r5, lr}
  switch (cmd)
 800398c:	d003      	beq.n	8003996 <CDC_Itf_Control+0xe>
 800398e:	2821      	cmp	r0, #33	; 0x21
 8003990:	d048      	beq.n	8003a24 <CDC_Itf_Control+0x9c>
}
 8003992:	2000      	movs	r0, #0
 8003994:	bd38      	pop	{r3, r4, r5, pc}
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8003996:	4c2c      	ldr	r4, [pc, #176]	; (8003a48 <CDC_Itf_Control+0xc0>)
 8003998:	680b      	ldr	r3, [r1, #0]
 800399a:	6023      	str	r3, [r4, #0]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 800399c:	4d2b      	ldr	r5, [pc, #172]	; (8003a4c <CDC_Itf_Control+0xc4>)
    LineCoding.format     = pbuf[4];
 800399e:	790b      	ldrb	r3, [r1, #4]
 80039a0:	7123      	strb	r3, [r4, #4]
    LineCoding.paritytype = pbuf[5];
 80039a2:	794b      	ldrb	r3, [r1, #5]
 80039a4:	7163      	strb	r3, [r4, #5]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 80039a6:	4628      	mov	r0, r5
    LineCoding.datatype   = pbuf[6];
 80039a8:	798b      	ldrb	r3, [r1, #6]
 80039aa:	71a3      	strb	r3, [r4, #6]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 80039ac:	f002 fe3e 	bl	800662c <HAL_UART_DeInit>
  switch (LineCoding.format)
 80039b0:	7923      	ldrb	r3, [r4, #4]
 80039b2:	4628      	mov	r0, r5
 80039b4:	b12b      	cbz	r3, 80039c2 <CDC_Itf_Control+0x3a>
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d001      	beq.n	80039be <CDC_Itf_Control+0x36>
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e001      	b.n	80039c2 <CDC_Itf_Control+0x3a>
    UartHandle.Init.StopBits = UART_STOPBITS_2;
 80039be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  switch (LineCoding.paritytype)
 80039c2:	7962      	ldrb	r2, [r4, #5]
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 80039c4:	60c3      	str	r3, [r0, #12]
  switch (LineCoding.paritytype)
 80039c6:	2a01      	cmp	r2, #1
 80039c8:	d020      	beq.n	8003a0c <CDC_Itf_Control+0x84>
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	d301      	bcc.n	80039d4 <CDC_Itf_Control+0x4c>
 80039d0:	2a02      	cmp	r2, #2
 80039d2:	d01e      	beq.n	8003a12 <CDC_Itf_Control+0x8a>
  switch (LineCoding.datatype)
 80039d4:	79a2      	ldrb	r2, [r4, #6]
    UartHandle.Init.Parity = UART_PARITY_NONE;
 80039d6:	6103      	str	r3, [r0, #16]
  switch (LineCoding.datatype)
 80039d8:	2a07      	cmp	r2, #7
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	d001      	beq.n	80039e4 <CDC_Itf_Control+0x5c>
 80039e0:	2a08      	cmp	r2, #8
 80039e2:	d019      	beq.n	8003a18 <CDC_Itf_Control+0x90>
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80039e4:	6083      	str	r3, [r0, #8]
  UartHandle.Init.BaudRate     = LineCoding.bitrate;
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	6043      	str	r3, [r0, #4]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80039ea:	220c      	movs	r2, #12
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80039ec:	2300      	movs	r3, #0
 80039ee:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80039f0:	6142      	str	r2, [r0, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80039f2:	61c3      	str	r3, [r0, #28]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 80039f4:	4815      	ldr	r0, [pc, #84]	; (8003a4c <CDC_Itf_Control+0xc4>)
 80039f6:	f003 f8c7 	bl	8006b88 <HAL_UART_Init>
 HAL_UART_Receive_IT(&UartHandle, (uint8_t *)(UserTxBuffer + UserTxBufPtrIn), 1);
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <CDC_Itf_Control+0xc8>)
 80039fc:	4915      	ldr	r1, [pc, #84]	; (8003a54 <CDC_Itf_Control+0xcc>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4812      	ldr	r0, [pc, #72]	; (8003a4c <CDC_Itf_Control+0xc4>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	4419      	add	r1, r3
 8003a06:	f002 fe2b 	bl	8006660 <HAL_UART_Receive_IT>
 8003a0a:	e7c2      	b.n	8003992 <CDC_Itf_Control+0xa>
    UartHandle.Init.Parity = UART_PARITY_ODD;
 8003a0c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a10:	e7e0      	b.n	80039d4 <CDC_Itf_Control+0x4c>
    UartHandle.Init.Parity = UART_PARITY_EVEN;
 8003a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a16:	e7dd      	b.n	80039d4 <CDC_Itf_Control+0x4c>
    if(UartHandle.Init.Parity == UART_PARITY_NONE)
 8003a18:	6903      	ldr	r3, [r0, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0e2      	beq.n	80039e4 <CDC_Itf_Control+0x5c>
      UartHandle.Init.WordLength = UART_WORDLENGTH_9B;
 8003a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a22:	e7df      	b.n	80039e4 <CDC_Itf_Control+0x5c>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8003a24:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <CDC_Itf_Control+0xc0>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	0a12      	lsrs	r2, r2, #8
 8003a2e:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8003a30:	885a      	ldrh	r2, [r3, #2]
 8003a32:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8003a34:	78da      	ldrb	r2, [r3, #3]
 8003a36:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 8003a38:	791a      	ldrb	r2, [r3, #4]
 8003a3a:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 8003a3c:	795a      	ldrb	r2, [r3, #5]
 8003a3e:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;
 8003a40:	799b      	ldrb	r3, [r3, #6]
 8003a42:	718b      	strb	r3, [r1, #6]
    break;
 8003a44:	e7a5      	b.n	8003992 <CDC_Itf_Control+0xa>
 8003a46:	bf00      	nop
 8003a48:	20000088 	.word	0x20000088
 8003a4c:	20009444 	.word	0x20009444
 8003a50:	20000584 	.word	0x20000584
 8003a54:	2000951d 	.word	0x2000951d

08003a58 <LL_RTC_DATE_GetDay.constprop.2>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <LL_RTC_DATE_GetDay.constprop.2+0x2c>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5a:	2030      	movs	r0, #48	; 0x30
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	fa90 f0a0 	rbit	r0, r0
 8003a62:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 8003a64:	fab0 f080 	clz	r0, r0
 8003a68:	fa92 f2a2 	rbit	r2, r2
 8003a6c:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8003a70:	fab2 f282 	clz	r2, r2
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	fa21 f000 	lsr.w	r0, r1, r0
 8003a7c:	40d3      	lsrs	r3, r2
}
 8003a7e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8003a82:	4770      	bx	lr
 8003a84:	40002800 	.word	0x40002800

08003a88 <LL_RTC_DATE_GetMonth.constprop.3>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <LL_RTC_DATE_GetMonth.constprop.3+0x30>)
 8003a8a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	fa90 f0a0 	rbit	r0, r0
 8003a94:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 8003a98:	fab0 f080 	clz	r0, r0
 8003a9c:	fa92 f2a2 	rbit	r2, r2
 8003aa0:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 8003aa4:	fab2 f282 	clz	r2, r2
 8003aa8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003aac:	fa21 f000 	lsr.w	r0, r1, r0
 8003ab0:	40d3      	lsrs	r3, r2
}
 8003ab2:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8003ab6:	4770      	bx	lr
 8003ab8:	40002800 	.word	0x40002800

08003abc <LL_RTC_DATE_GetYear.constprop.4>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <LL_RTC_DATE_GetYear.constprop.4+0x30>)
 8003abe:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	fa90 f0a0 	rbit	r0, r0
 8003ac8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 8003acc:	fab0 f080 	clz	r0, r0
 8003ad0:	fa92 f2a2 	rbit	r2, r2
 8003ad4:	f403 0170 	and.w	r1, r3, #15728640	; 0xf00000
 8003ad8:	fab2 f282 	clz	r2, r2
 8003adc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003ae0:	fa21 f000 	lsr.w	r0, r1, r0
 8003ae4:	40d3      	lsrs	r3, r2
}
 8003ae6:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8003aea:	4770      	bx	lr
 8003aec:	40002800 	.word	0x40002800

08003af0 <LL_RTC_TIME_GetSecond.constprop.5>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <LL_RTC_TIME_GetSecond.constprop.5+0x2c>)
 8003af2:	2070      	movs	r0, #112	; 0x70
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	fa90 f0a0 	rbit	r0, r0
 8003afa:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 8003afc:	fab0 f080 	clz	r0, r0
 8003b00:	fa92 f2a2 	rbit	r2, r2
 8003b04:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8003b08:	fab2 f282 	clz	r2, r2
 8003b0c:	f003 030f 	and.w	r3, r3, #15
 8003b10:	fa21 f000 	lsr.w	r0, r1, r0
 8003b14:	40d3      	lsrs	r3, r2
}
 8003b16:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8003b1a:	4770      	bx	lr
 8003b1c:	40002800 	.word	0x40002800

08003b20 <LL_RTC_TIME_GetMinute.constprop.6>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 8003b20:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <LL_RTC_TIME_GetMinute.constprop.6+0x30>)
 8003b22:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	fa90 f0a0 	rbit	r0, r0
 8003b2c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 8003b30:	fab0 f080 	clz	r0, r0
 8003b34:	fa92 f2a2 	rbit	r2, r2
 8003b38:	f403 41e0 	and.w	r1, r3, #28672	; 0x7000
 8003b3c:	fab2 f282 	clz	r2, r2
 8003b40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b44:	fa21 f000 	lsr.w	r0, r1, r0
 8003b48:	40d3      	lsrs	r3, r2
}
 8003b4a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8003b4e:	4770      	bx	lr
 8003b50:	40002800 	.word	0x40002800

08003b54 <LL_RTC_TIME_GetHour.constprop.7>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <LL_RTC_TIME_GetHour.constprop.7+0x30>)
 8003b56:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	fa90 f0a0 	rbit	r0, r0
 8003b60:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 8003b64:	fab0 f080 	clz	r0, r0
 8003b68:	fa92 f2a2 	rbit	r2, r2
 8003b6c:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
 8003b70:	fab2 f282 	clz	r2, r2
 8003b74:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003b78:	fa21 f000 	lsr.w	r0, r1, r0
 8003b7c:	40d3      	lsrs	r3, r2
}
 8003b7e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8003b82:	4770      	bx	lr
 8003b84:	40002800 	.word	0x40002800

08003b88 <USBD_CDC_RegisterInterface>:
  if(fops != NULL)
 8003b88:	b119      	cbz	r1, 8003b92 <USBD_CDC_RegisterInterface+0xa>
    pdev->pUserData= fops;
 8003b8a:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;
 8003b8e:	2000      	movs	r0, #0
 8003b90:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003b92:	2002      	movs	r0, #2
}
 8003b94:	4770      	bx	lr

08003b96 <USBD_CDC_TransmitPacket>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003b96:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 8003b9a:	b510      	push	{r4, lr}
  if(pdev->pClassData != NULL)
 8003b9c:	b172      	cbz	r2, 8003bbc <USBD_CDC_TransmitPacket+0x26>
    if(hcdc->TxState == 0)
 8003b9e:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	b964      	cbnz	r4, 8003bc0 <USBD_CDC_TransmitPacket+0x2a>
      hcdc->TxState = 1;
 8003ba6:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      USBD_LL_Transmit(pdev,
 8003baa:	2183      	movs	r1, #131	; 0x83
 8003bac:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8003bb0:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8003bb4:	f7ff fc5f 	bl	8003476 <USBD_LL_Transmit>
      return USBD_OK;
 8003bb8:	4620      	mov	r0, r4
 8003bba:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003bbc:	2002      	movs	r0, #2
 8003bbe:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8003bc0:	4618      	mov	r0, r3
}
 8003bc2:	bd10      	pop	{r4, pc}

08003bc4 <USBD_CDC_ReceivePacket>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003bc4:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 8003bc8:	b510      	push	{r4, lr}
  if(pdev->pClassData != NULL)
 8003bca:	b162      	cbz	r2, 8003be6 <USBD_CDC_ReceivePacket+0x22>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003bcc:	7c04      	ldrb	r4, [r0, #16]
 8003bce:	b944      	cbnz	r4, 8003be2 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8003bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
      USBD_LL_PrepareReceive(pdev,
 8003bd4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003bd8:	2103      	movs	r1, #3
 8003bda:	f7ff fc53 	bl	8003484 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8003bde:	2000      	movs	r0, #0
 8003be0:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003be2:	2340      	movs	r3, #64	; 0x40
 8003be4:	e7f6      	b.n	8003bd4 <USBD_CDC_ReceivePacket+0x10>
    return USBD_FAIL;
 8003be6:	2002      	movs	r0, #2
}
 8003be8:	bd10      	pop	{r4, pc}
	...

08003bec <CDC_Itf_Receive>:
{
 8003bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
BuffLength=0;
 8003bf0:	4dc1      	ldr	r5, [pc, #772]	; (8003ef8 <CDC_Itf_Receive+0x30c>)
 8003bf2:	4cc2      	ldr	r4, [pc, #776]	; (8003efc <CDC_Itf_Receive+0x310>)
 8003bf4:	2300      	movs	r3, #0
{
 8003bf6:	b087      	sub	sp, #28
BuffLength=0;
 8003bf8:	602b      	str	r3, [r5, #0]
for (i = 0; i < *Len; i++)
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	680e      	ldr	r6, [r1, #0]
 8003bfe:	1a13      	subs	r3, r2, r0
 8003c00:	429e      	cmp	r6, r3
 8003c02:	f200 8089 	bhi.w	8003d18 <CDC_Itf_Receive+0x12c>
if (TempUserBuffer[0] == 'g')
 8003c06:	7823      	ldrb	r3, [r4, #0]
 8003c08:	2b67      	cmp	r3, #103	; 0x67
 8003c0a:	f040 808c 	bne.w	8003d26 <CDC_Itf_Receive+0x13a>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8003c0e:	f894 c002 	ldrb.w	ip, [r4, #2]
 8003c12:	78e3      	ldrb	r3, [r4, #3]
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8003c14:	f894 e006 	ldrb.w	lr, [r4, #6]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8003c18:	7ae2      	ldrb	r2, [r4, #11]
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8003c1a:	7be1      	ldrb	r1, [r4, #15]
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8003c1c:	7ce0      	ldrb	r0, [r4, #19]
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8003c1e:	f894 a016 	ldrb.w	sl, [r4, #22]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8003c22:	f8df b324 	ldr.w	fp, [pc, #804]	; 8003f48 <CDC_Itf_Receive+0x35c>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8003c26:	4fb6      	ldr	r7, [pc, #728]	; (8003f00 <CDC_Itf_Receive+0x314>)
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8003c28:	4eb6      	ldr	r6, [pc, #728]	; (8003f04 <CDC_Itf_Receive+0x318>)
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8003c2a:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8003f4c <CDC_Itf_Receive+0x360>
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8003c2e:	f8df 8320 	ldr.w	r8, [pc, #800]	; 8003f50 <CDC_Itf_Receive+0x364>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8003c32:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003c36:	3b30      	subs	r3, #48	; 0x30
 8003c38:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003c3c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8003c40:	79e3      	ldrb	r3, [r4, #7]
 8003c42:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003c46:	3b30      	subs	r3, #48	; 0x30
 8003c48:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8003c4c:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8003c50:	7aa3      	ldrb	r3, [r4, #10]
 8003c52:	3b30      	subs	r3, #48	; 0x30
 8003c54:	3a30      	subs	r2, #48	; 0x30
 8003c56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c5a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8003c5e:	7ba2      	ldrb	r2, [r4, #14]
 8003c60:	3a30      	subs	r2, #48	; 0x30
 8003c62:	3930      	subs	r1, #48	; 0x30
 8003c64:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003c68:	eb01 0242 	add.w	r2, r1, r2, lsl #1
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8003c6c:	7ca1      	ldrb	r1, [r4, #18]
 8003c6e:	3930      	subs	r1, #48	; 0x30
 8003c70:	3830      	subs	r0, #48	; 0x30
 8003c72:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003c76:	eb00 0141 	add.w	r1, r0, r1, lsl #1
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8003c7a:	7de0      	ldrb	r0, [r4, #23]
 8003c7c:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 8003c80:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8003c84:	3830      	subs	r0, #48	; 0x30
 8003c86:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 8003c8a:	f8df a294 	ldr.w	sl, [pc, #660]	; 8003f20 <CDC_Itf_Receive+0x334>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8003c8e:	fa5f fc8c 	uxtb.w	ip, ip
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8003c92:	fa5f fe8e 	uxtb.w	lr, lr
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8003c96:	b2db      	uxtb	r3, r3
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8003c98:	b2d2      	uxtb	r2, r2
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8003c9a:	b2c9      	uxtb	r1, r1
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8003c9c:	b2c0      	uxtb	r0, r0
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8003c9e:	f887 c000 	strb.w	ip, [r7]
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8003ca2:	f886 e000 	strb.w	lr, [r6]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8003ca6:	f88b 3000 	strb.w	r3, [fp]
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8003caa:	f889 2000 	strb.w	r2, [r9]
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8003cae:	f888 1000 	strb.w	r1, [r8]
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8003cb2:	f88a 0000 	strb.w	r0, [sl]
Set_RTC_Calendar(RTC_Y, RTC_Mo , RTC_D, RTC_H, RTC_Mi, RTC_S);  // Set Device RTC with received Values
 8003cb6:	f8cd c004 	str.w	ip, [sp, #4]
 8003cba:	f8cd e000 	str.w	lr, [sp]
 8003cbe:	f7fd fd0f 	bl	80016e0 <Set_RTC_Calendar>
UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Timestamp Received :%d:%d:%d_%d/%d/%d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);//
 8003cc2:	f89a 2000 	ldrb.w	r2, [sl]
 8003cc6:	f89b 3000 	ldrb.w	r3, [fp]
 8003cca:	9204      	str	r2, [sp, #16]
 8003ccc:	f899 2000 	ldrb.w	r2, [r9]
 8003cd0:	9203      	str	r2, [sp, #12]
 8003cd2:	f898 2000 	ldrb.w	r2, [r8]
 8003cd6:	9202      	str	r2, [sp, #8]
 8003cd8:	783a      	ldrb	r2, [r7, #0]
 8003cda:	f8df b250 	ldr.w	fp, [pc, #592]	; 8003f2c <CDC_Itf_Receive+0x340>
 8003cde:	9201      	str	r2, [sp, #4]
 8003ce0:	7832      	ldrb	r2, [r6, #0]
 8003ce2:	9200      	str	r2, [sp, #0]
 8003ce4:	4988      	ldr	r1, [pc, #544]	; (8003f08 <CDC_Itf_Receive+0x31c>)
 8003ce6:	4a89      	ldr	r2, [pc, #548]	; (8003f0c <CDC_Itf_Receive+0x320>)
 8003ce8:	4658      	mov	r0, fp
 8003cea:	f006 fb91 	bl	800a410 <siprintf>
 8003cee:	4a88      	ldr	r2, [pc, #544]	; (8003f10 <CDC_Itf_Receive+0x324>)
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003cf4:	4887      	ldr	r0, [pc, #540]	; (8003f14 <CDC_Itf_Receive+0x328>)
 8003cf6:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8003d00:	f8c2 b208 	str.w	fp, [r2, #520]	; 0x208
USBD_CDC_TransmitPacket(&USBD_Device);//
 8003d04:	f7ff ff47 	bl	8003b96 <USBD_CDC_TransmitPacket>
TempUserBuffer[0] = 0;        // Clear 1st Character to avoid code conflict
 8003d08:	2300      	movs	r3, #0
USB_Mode = 1;                 // USB VCP Mode in next USB connectivity
 8003d0a:	4a83      	ldr	r2, [pc, #524]	; (8003f18 <CDC_Itf_Receive+0x32c>)
TempUserBuffer[0] = 0;        // Clear 1st Character to avoid code conflict
 8003d0c:	7023      	strb	r3, [r4, #0]
USB_Mode = 1;                 // USB VCP Mode in next USB connectivity
 8003d0e:	2301      	movs	r3, #1
 8003d10:	7013      	strb	r3, [r2, #0]
Logstart_Create=1;
 8003d12:	4a82      	ldr	r2, [pc, #520]	; (8003f1c <CDC_Itf_Receive+0x330>)
	*LP_Ram_Key_Address = 0;
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e011      	b.n	8003d3c <CDC_Itf_Receive+0x150>
TempUserBuffer[BuffLength] = Buf[i];
 8003d18:	682b      	ldr	r3, [r5, #0]
 8003d1a:	f812 6b01 	ldrb.w	r6, [r2], #1
 8003d1e:	54e6      	strb	r6, [r4, r3]
BuffLength++;
 8003d20:	3301      	adds	r3, #1
 8003d22:	602b      	str	r3, [r5, #0]
 8003d24:	e76a      	b.n	8003bfc <CDC_Itf_Receive+0x10>
else if (TempUserBuffer[0] == 'o')   // Turn off All LED
 8003d26:	2b6f      	cmp	r3, #111	; 0x6f
 8003d28:	f04f 0600 	mov.w	r6, #0
 8003d2c:	d114      	bne.n	8003d58 <CDC_Itf_Receive+0x16c>
RED_LED_OFF();
 8003d2e:	f7fc fea1 	bl	8000a74 <RED_LED_OFF>
GREEN_LED_OFF();
 8003d32:	f7fc fea4 	bl	8000a7e <GREEN_LED_OFF>
BLUE_LED_OFF();
 8003d36:	f7fc fea7 	bl	8000a88 <BLUE_LED_OFF>
TempUserBuffer[0] = 0;         // Clear 1st Character to avoid code conflict
 8003d3a:	7026      	strb	r6, [r4, #0]
for (i = 0; i < BuffLength; i++) // Buffer Empty
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	682a      	ldr	r2, [r5, #0]
TempUserBuffer[i] = 0;//
 8003d40:	496e      	ldr	r1, [pc, #440]	; (8003efc <CDC_Itf_Receive+0x310>)
 8003d42:	4618      	mov	r0, r3
for (i = 0; i < BuffLength; i++) // Buffer Empty
 8003d44:	4293      	cmp	r3, r2
 8003d46:	f040 8154 	bne.w	8003ff2 <CDC_Itf_Receive+0x406>
USBD_CDC_ReceivePacket(&USBD_Device);   // Ready for Next packet receive
 8003d4a:	4872      	ldr	r0, [pc, #456]	; (8003f14 <CDC_Itf_Receive+0x328>)
 8003d4c:	f7ff ff3a 	bl	8003bc4 <USBD_CDC_ReceivePacket>
}
 8003d50:	2000      	movs	r0, #0
 8003d52:	b007      	add	sp, #28
 8003d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
else if (TempUserBuffer[0] == 'B')   // Turn on BLUE LED
 8003d58:	2b42      	cmp	r3, #66	; 0x42
 8003d5a:	d102      	bne.n	8003d62 <CDC_Itf_Receive+0x176>
BLUE_LED_ONLY();
 8003d5c:	f7fc feca 	bl	8000af4 <BLUE_LED_ONLY>
 8003d60:	e7eb      	b.n	8003d3a <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'b')  // Turn off BLUE LED
 8003d62:	2b62      	cmp	r3, #98	; 0x62
 8003d64:	d104      	bne.n	8003d70 <CDC_Itf_Receive+0x184>
ALL_LED_OFF();
 8003d66:	f7fc fe95 	bl	8000a94 <ALL_LED_OFF>
	TempUserBuffer[0] = 0;       // Clear 1st Character to avoid code conflict
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	7023      	strb	r3, [r4, #0]
 8003d6e:	e7e5      	b.n	8003d3c <CDC_Itf_Receive+0x150>
else if (TempUserBuffer[0] == 'E')  // Turn on Green LED
 8003d70:	2b45      	cmp	r3, #69	; 0x45
 8003d72:	d102      	bne.n	8003d7a <CDC_Itf_Receive+0x18e>
GREEN_LED_ONLY();
 8003d74:	f7fc fea6 	bl	8000ac4 <GREEN_LED_ONLY>
 8003d78:	e7df      	b.n	8003d3a <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'e')  // Turn off Green LED
 8003d7a:	2b65      	cmp	r3, #101	; 0x65
 8003d7c:	d0f3      	beq.n	8003d66 <CDC_Itf_Receive+0x17a>
else if (TempUserBuffer[0] == 'F')  // Turn on RED LED
 8003d7e:	2b46      	cmp	r3, #70	; 0x46
 8003d80:	d102      	bne.n	8003d88 <CDC_Itf_Receive+0x19c>
RED_LED_ONLY();
 8003d82:	f7fc feab 	bl	8000adc <RED_LED_ONLY>
 8003d86:	e7d8      	b.n	8003d3a <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'f')  // Turn off RED LED
 8003d88:	2b66      	cmp	r3, #102	; 0x66
 8003d8a:	d0ec      	beq.n	8003d66 <CDC_Itf_Receive+0x17a>
else if (TempUserBuffer[0] == 'l')  // Turn on White LED
 8003d8c:	2b6c      	cmp	r3, #108	; 0x6c
 8003d8e:	d102      	bne.n	8003d96 <CDC_Itf_Receive+0x1aa>
ALL_LED_ON();
 8003d90:	f7fc fe8c 	bl	8000aac <ALL_LED_ON>
 8003d94:	e7e9      	b.n	8003d6a <CDC_Itf_Receive+0x17e>
else if (TempUserBuffer[0] == 'r')   // Read Device RTC Timestamp
 8003d96:	2b72      	cmp	r3, #114	; 0x72
 8003d98:	f040 8086 	bne.w	8003ea8 <CDC_Itf_Receive+0x2bc>
	RTC_H = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8003d9c:	f7ff feda 	bl	8003b54 <LL_RTC_TIME_GetHour.constprop.7>
 8003da0:	4606      	mov	r6, r0
 8003da2:	f7ff fed7 	bl	8003b54 <LL_RTC_TIME_GetHour.constprop.7>
 8003da6:	f3c6 1303 	ubfx	r3, r6, #4, #4
 8003daa:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8003f48 <CDC_Itf_Receive+0x35c>
	RTC_Mi = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8003dae:	4e55      	ldr	r6, [pc, #340]	; (8003f04 <CDC_Itf_Receive+0x318>)
	RTC_H = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8003db0:	f000 000f 	and.w	r0, r0, #15
 8003db4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003db8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003dbc:	f88a 3000 	strb.w	r3, [sl]
	RTC_Mi = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8003dc0:	f7ff feae 	bl	8003b20 <LL_RTC_TIME_GetMinute.constprop.6>
 8003dc4:	4607      	mov	r7, r0
 8003dc6:	f7ff feab 	bl	8003b20 <LL_RTC_TIME_GetMinute.constprop.6>
 8003dca:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8003dce:	f000 000f 	and.w	r0, r0, #15
 8003dd2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003dd6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003dda:	7033      	strb	r3, [r6, #0]
	RTC_S =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8003ddc:	f7ff fe88 	bl	8003af0 <LL_RTC_TIME_GetSecond.constprop.5>
 8003de0:	4680      	mov	r8, r0
 8003de2:	f7ff fe85 	bl	8003af0 <LL_RTC_TIME_GetSecond.constprop.5>
 8003de6:	f3c8 1303 	ubfx	r3, r8, #4, #4
 8003dea:	4f45      	ldr	r7, [pc, #276]	; (8003f00 <CDC_Itf_Receive+0x314>)
	RTC_Mo =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 8003dec:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8003f50 <CDC_Itf_Receive+0x364>
	RTC_S =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8003df0:	f000 000f 	and.w	r0, r0, #15
 8003df4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003df8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003dfc:	703b      	strb	r3, [r7, #0]
	RTC_Mo =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 8003dfe:	f7ff fe43 	bl	8003a88 <LL_RTC_DATE_GetMonth.constprop.3>
 8003e02:	4681      	mov	r9, r0
 8003e04:	f7ff fe40 	bl	8003a88 <LL_RTC_DATE_GetMonth.constprop.3>
 8003e08:	f3c9 1303 	ubfx	r3, r9, #4, #4
 8003e0c:	f000 000f 	and.w	r0, r0, #15
 8003e10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e14:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003e18:	f888 3000 	strb.w	r3, [r8]
	RTC_D = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 8003e1c:	f7ff fe1c 	bl	8003a58 <LL_RTC_DATE_GetDay.constprop.2>
 8003e20:	4683      	mov	fp, r0
 8003e22:	f7ff fe19 	bl	8003a58 <LL_RTC_DATE_GetDay.constprop.2>
 8003e26:	f3cb 1303 	ubfx	r3, fp, #4, #4
 8003e2a:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8003f4c <CDC_Itf_Receive+0x360>
 8003e2e:	f000 000f 	and.w	r0, r0, #15
 8003e32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e36:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003e3a:	f889 3000 	strb.w	r3, [r9]
	RTC_Y =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 8003e3e:	f7ff fe3d 	bl	8003abc <LL_RTC_DATE_GetYear.constprop.4>
 8003e42:	4683      	mov	fp, r0
 8003e44:	f7ff fe3a 	bl	8003abc <LL_RTC_DATE_GetYear.constprop.4>
 8003e48:	f3cb 1303 	ubfx	r3, fp, #4, #4
 8003e4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e50:	f000 000f 	and.w	r0, r0, #15
 8003e54:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8003e58:	4b31      	ldr	r3, [pc, #196]	; (8003f20 <CDC_Itf_Receive+0x334>)
		UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\nCurrent Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);
 8003e5a:	4932      	ldr	r1, [pc, #200]	; (8003f24 <CDC_Itf_Receive+0x338>)
	RTC_Y =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 8003e5c:	b2c0      	uxtb	r0, r0
 8003e5e:	7018      	strb	r0, [r3, #0]
	(void)RTC->DR;
 8003e60:	4b31      	ldr	r3, [pc, #196]	; (8003f28 <CDC_Itf_Receive+0x33c>)
 8003e62:	685a      	ldr	r2, [r3, #4]
	(void)RTC->TR;
 8003e64:	681b      	ldr	r3, [r3, #0]
		UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\nCurrent Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);
 8003e66:	f89a 3000 	ldrb.w	r3, [sl]
 8003e6a:	9004      	str	r0, [sp, #16]
 8003e6c:	f899 2000 	ldrb.w	r2, [r9]
 8003e70:	9203      	str	r2, [sp, #12]
 8003e72:	f898 2000 	ldrb.w	r2, [r8]
 8003e76:	9202      	str	r2, [sp, #8]
 8003e78:	783a      	ldrb	r2, [r7, #0]
 8003e7a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8003f2c <CDC_Itf_Receive+0x340>
 8003e7e:	9201      	str	r2, [sp, #4]
 8003e80:	7832      	ldrb	r2, [r6, #0]
 8003e82:	9200      	str	r2, [sp, #0]
 8003e84:	4650      	mov	r0, sl
 8003e86:	4a21      	ldr	r2, [pc, #132]	; (8003f0c <CDC_Itf_Receive+0x320>)
 8003e88:	f006 fac2 	bl	800a410 <siprintf>
 8003e8c:	4a20      	ldr	r2, [pc, #128]	; (8003f10 <CDC_Itf_Receive+0x324>)
 8003e8e:	4603      	mov	r3, r0
 8003e90:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003e92:	4820      	ldr	r0, [pc, #128]	; (8003f14 <CDC_Itf_Receive+0x328>)
 8003e94:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8003e98:	b2db      	uxtb	r3, r3
  hcdc->TxBuffer = pbuff;
 8003e9a:	f8c2 a208 	str.w	sl, [r2, #520]	; 0x208
  hcdc->TxLength = length;
 8003e9e:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
	USBD_CDC_TransmitPacket(&USBD_Device);//
 8003ea2:	f7ff fe78 	bl	8003b96 <USBD_CDC_TransmitPacket>
 8003ea6:	e760      	b.n	8003d6a <CDC_Itf_Receive+0x17e>
else if (TempUserBuffer[0] == 'U')    // USB MSC in next USB connectivity
 8003ea8:	2b55      	cmp	r3, #85	; 0x55
 8003eaa:	d153      	bne.n	8003f54 <CDC_Itf_Receive+0x368>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n Return to USB MSC Mode after USB reconnect..\r\n\r\n",software_vr);
 8003eac:	4e1f      	ldr	r6, [pc, #124]	; (8003f2c <CDC_Itf_Receive+0x340>)
 8003eae:	4920      	ldr	r1, [pc, #128]	; (8003f30 <CDC_Itf_Receive+0x344>)
 8003eb0:	4a16      	ldr	r2, [pc, #88]	; (8003f0c <CDC_Itf_Receive+0x320>)
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	f006 faac 	bl	800a410 <siprintf>
 8003eb8:	4a15      	ldr	r2, [pc, #84]	; (8003f10 <CDC_Itf_Receive+0x324>)
 8003eba:	4603      	mov	r3, r0
 8003ebc:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003ebe:	4815      	ldr	r0, [pc, #84]	; (8003f14 <CDC_Itf_Receive+0x328>)
 8003ec0:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8003eca:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);//
 8003ece:	f7ff fe62 	bl	8003b96 <USBD_CDC_TransmitPacket>
	USB_Mode = 1;                    // USB MSC Mode
 8003ed2:	4911      	ldr	r1, [pc, #68]	; (8003f18 <CDC_Itf_Receive+0x32c>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	700a      	strb	r2, [r1, #0]
	Logstart_Delete=1;
 8003ed8:	4916      	ldr	r1, [pc, #88]	; (8003f34 <CDC_Itf_Receive+0x348>)
 8003eda:	600a      	str	r2, [r1, #0]
	EnterReset_Create=0;
 8003edc:	4916      	ldr	r1, [pc, #88]	; (8003f38 <CDC_Itf_Receive+0x34c>)
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 8003ede:	2300      	movs	r3, #0
	EnterReset_Create=0;
 8003ee0:	600b      	str	r3, [r1, #0]
	EnterDFU_Create=0;
 8003ee2:	4916      	ldr	r1, [pc, #88]	; (8003f3c <CDC_Itf_Receive+0x350>)
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 8003ee4:	7023      	strb	r3, [r4, #0]
	EnterDFU_Create=0;
 8003ee6:	600b      	str	r3, [r1, #0]
	Logstart_Create=1;
 8003ee8:	490c      	ldr	r1, [pc, #48]	; (8003f1c <CDC_Itf_Receive+0x330>)
 8003eea:	600a      	str	r2, [r1, #0]
	 VCP_Bypass=1;
 8003eec:	4914      	ldr	r1, [pc, #80]	; (8003f40 <CDC_Itf_Receive+0x354>)
 8003eee:	700a      	strb	r2, [r1, #0]
	 Data_log_Start_Resume = 0;
 8003ef0:	4a14      	ldr	r2, [pc, #80]	; (8003f44 <CDC_Itf_Receive+0x358>)
 8003ef2:	7013      	strb	r3, [r2, #0]
 8003ef4:	e722      	b.n	8003d3c <CDC_Itf_Receive+0x150>
 8003ef6:	bf00      	nop
 8003ef8:	20009440 	.word	0x20009440
 8003efc:	2000a958 	.word	0x2000a958
 8003f00:	2000a910 	.word	0x2000a910
 8003f04:	2000a911 	.word	0x2000a911
 8003f08:	0800b622 	.word	0x0800b622
 8003f0c:	0002c314 	.word	0x0002c314
 8003f10:	2000a912 	.word	0x2000a912
 8003f14:	200086a4 	.word	0x200086a4
 8003f18:	20008f64 	.word	0x20008f64
 8003f1c:	200094b4 	.word	0x200094b4
 8003f20:	2000951c 	.word	0x2000951c
 8003f24:	0800b65e 	.word	0x0800b65e
 8003f28:	40002800 	.word	0x40002800
 8003f2c:	20009d28 	.word	0x20009d28
 8003f30:	0800b6a3 	.word	0x0800b6a3
 8003f34:	20009438 	.word	0x20009438
 8003f38:	20009d24 	.word	0x20009d24
 8003f3c:	2000a914 	.word	0x2000a914
 8003f40:	20008a41 	.word	0x20008a41
 8003f44:	20008681 	.word	0x20008681
 8003f48:	2000943c 	.word	0x2000943c
 8003f4c:	2000a918 	.word	0x2000a918
 8003f50:	20009434 	.word	0x20009434
else if (TempUserBuffer[0] == 'Z')    // Reset Device
 8003f54:	2b5a      	cmp	r3, #90	; 0x5a
 8003f56:	d118      	bne.n	8003f8a <CDC_Itf_Receive+0x39e>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to reset AIM device..\r\n",software_vr);
 8003f58:	4e27      	ldr	r6, [pc, #156]	; (8003ff8 <CDC_Itf_Receive+0x40c>)
 8003f5a:	4a28      	ldr	r2, [pc, #160]	; (8003ffc <CDC_Itf_Receive+0x410>)
 8003f5c:	4928      	ldr	r1, [pc, #160]	; (8004000 <CDC_Itf_Receive+0x414>)
 8003f5e:	4630      	mov	r0, r6
 8003f60:	f006 fa56 	bl	800a410 <siprintf>
 8003f64:	4a27      	ldr	r2, [pc, #156]	; (8004004 <CDC_Itf_Receive+0x418>)
 8003f66:	4603      	mov	r3, r0
 8003f68:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003f6a:	4827      	ldr	r0, [pc, #156]	; (8004008 <CDC_Itf_Receive+0x41c>)
 8003f6c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8003f76:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 8003f7a:	f7ff fe0c 	bl	8003b96 <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 8003f7e:	2300      	movs	r3, #0
 8003f80:	7023      	strb	r3, [r4, #0]
	EnterReset_Create=1;
 8003f82:	4b22      	ldr	r3, [pc, #136]	; (800400c <CDC_Itf_Receive+0x420>)
 8003f84:	2201      	movs	r2, #1
	EnterDFU_Create=1;
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	e6d8      	b.n	8003d3c <CDC_Itf_Receive+0x150>
else if (TempUserBuffer[0] == 'X')     // Enter DFU mode for firmware Update
 8003f8a:	2b58      	cmp	r3, #88	; 0x58
 8003f8c:	d117      	bne.n	8003fbe <CDC_Itf_Receive+0x3d2>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to enter Firmware update Mode..\r\n",software_vr);
 8003f8e:	4e1a      	ldr	r6, [pc, #104]	; (8003ff8 <CDC_Itf_Receive+0x40c>)
 8003f90:	4a1a      	ldr	r2, [pc, #104]	; (8003ffc <CDC_Itf_Receive+0x410>)
 8003f92:	491f      	ldr	r1, [pc, #124]	; (8004010 <CDC_Itf_Receive+0x424>)
 8003f94:	4630      	mov	r0, r6
 8003f96:	f006 fa3b 	bl	800a410 <siprintf>
 8003f9a:	4a1a      	ldr	r2, [pc, #104]	; (8004004 <CDC_Itf_Receive+0x418>)
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003fa0:	4819      	ldr	r0, [pc, #100]	; (8004008 <CDC_Itf_Receive+0x41c>)
 8003fa2:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8003fac:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 8003fb0:	f7ff fdf1 	bl	8003b96 <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	7023      	strb	r3, [r4, #0]
	EnterDFU_Create=1;
 8003fb8:	2201      	movs	r2, #1
 8003fba:	4b16      	ldr	r3, [pc, #88]	; (8004014 <CDC_Itf_Receive+0x428>)
 8003fbc:	e7e3      	b.n	8003f86 <CDC_Itf_Receive+0x39a>
else if (TempUserBuffer[0] == 'Y')     // Enter DFU mode for firmware Update
 8003fbe:	2b59      	cmp	r3, #89	; 0x59
 8003fc0:	f47f aebc 	bne.w	8003d3c <CDC_Itf_Receive+0x150>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n LP_RAM reset..\r\n",software_vr);
 8003fc4:	4e0c      	ldr	r6, [pc, #48]	; (8003ff8 <CDC_Itf_Receive+0x40c>)
 8003fc6:	4a0d      	ldr	r2, [pc, #52]	; (8003ffc <CDC_Itf_Receive+0x410>)
 8003fc8:	4913      	ldr	r1, [pc, #76]	; (8004018 <CDC_Itf_Receive+0x42c>)
 8003fca:	4630      	mov	r0, r6
 8003fcc:	f006 fa20 	bl	800a410 <siprintf>
 8003fd0:	4a0c      	ldr	r2, [pc, #48]	; (8004004 <CDC_Itf_Receive+0x418>)
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003fd6:	480c      	ldr	r0, [pc, #48]	; (8004008 <CDC_Itf_Receive+0x41c>)
 8003fd8:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8003fe2:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 8003fe6:	f7ff fdd6 	bl	8003b96 <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 8003fea:	2300      	movs	r3, #0
 8003fec:	7023      	strb	r3, [r4, #0]
	*LP_Ram_Key_Address = 0;
 8003fee:	4a0b      	ldr	r2, [pc, #44]	; (800401c <CDC_Itf_Receive+0x430>)
 8003ff0:	e690      	b.n	8003d14 <CDC_Itf_Receive+0x128>
TempUserBuffer[i] = 0;//
 8003ff2:	5458      	strb	r0, [r3, r1]
for (i = 0; i < BuffLength; i++) // Buffer Empty
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	e6a5      	b.n	8003d44 <CDC_Itf_Receive+0x158>
 8003ff8:	20009d28 	.word	0x20009d28
 8003ffc:	0002c314 	.word	0x0002c314
 8004000:	0800b6e8 	.word	0x0800b6e8
 8004004:	2000a912 	.word	0x2000a912
 8004008:	200086a4 	.word	0x200086a4
 800400c:	20009d24 	.word	0x20009d24
 8004010:	0800b726 	.word	0x0800b726
 8004014:	2000a914 	.word	0x2000a914
 8004018:	0800b76e 	.word	0x0800b76e
 800401c:	20017cf0 	.word	0x20017cf0

08004020 <Reboot_Handler>:
    .section	.text.Reboot_Handler
	//.weak	Reboot_Handler
	.type	Reboot_Handler, %function
Reboot_Handler:

               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 8004020:	4805      	ldr	r0, [pc, #20]	; (8004038 <Reboot_Handler+0x18>)
                LDR     R1, =0x00000001 // ENABLE SYSCFG CLOCK
 8004022:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 8004024:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 8004026:	4805      	ldr	r0, [pc, #20]	; (800403c <Reboot_Handler+0x1c>)
                LDR     R1, =0x00000001 // MAP ROM AT ZERO
 8004028:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 800402a:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 800402c:	4804      	ldr	r0, [pc, #16]	; (8004040 <Reboot_Handler+0x20>)
                LDR     SP,[R0, #0]     // SP @ +0
 800402e:	f8d0 d000 	ldr.w	sp, [r0]
                LDR     R0,[R0, #4]    //  PC @ +4
 8004032:	6840      	ldr	r0, [r0, #4]
                BX      R0
 8004034:	4700      	bx	r0
 8004036:	0000      	.short	0x0000
               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 8004038:	40021060 	.word	0x40021060
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 800403c:	40010000 	.word	0x40010000
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 8004040:	1fff0000 	.word	0x1fff0000

08004044 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 8004044:	4811      	ldr	r0, [pc, #68]	; (800408c <LoopForever+0x4>)
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 8004046:	4912      	ldr	r1, [pc, #72]	; (8004090 <LoopForever+0x8>)
                LDR     R2, [R0, #0]
 8004048:	6802      	ldr	r2, [r0, #0]
                STR     R0, [R0, #0]     // Invalidate Bootloader_Key_Value
 800404a:	6000      	str	r0, [r0, #0]
                // zero data at Bootloader_Ram_Key_Address to avoid looping in DFU Mode

                CMP     R2, R1
 800404c:	428a      	cmp	r2, r1
                BEQ     Reboot_Handler    // Jump to DfuModeEntry Lable if Bootloader_Key_Value matches
 800404e:	f43f afe7 	beq.w	8004020 <Reboot_Handler>

                // Conitnue without entering DFU Mode


  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004052:	f8df d040 	ldr.w	sp, [pc, #64]	; 8004094 <LoopForever+0xc>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004056:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004058:	e003      	b.n	8004062 <LoopCopyDataInit>

0800405a <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800405a:	4b0f      	ldr	r3, [pc, #60]	; (8004098 <LoopForever+0x10>)
	ldr	r3, [r3, r1]
 800405c:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800405e:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004060:	3104      	adds	r1, #4

08004062 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004062:	480e      	ldr	r0, [pc, #56]	; (800409c <LoopForever+0x14>)
	ldr	r3, =_edata
 8004064:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <LoopForever+0x18>)
	adds	r2, r0, r1
 8004066:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004068:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800406a:	d3f6      	bcc.n	800405a <CopyDataInit>
	ldr	r2, =_sbss
 800406c:	4a0d      	ldr	r2, [pc, #52]	; (80040a4 <LoopForever+0x1c>)
	b	LoopFillZerobss
 800406e:	e002      	b.n	8004076 <LoopFillZerobss>

08004070 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004070:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004072:	f842 3b04 	str.w	r3, [r2], #4

08004076 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004076:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <LoopForever+0x20>)
	cmp	r2, r3
 8004078:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800407a:	d3f9      	bcc.n	8004070 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800407c:	f7fe ffda 	bl	8003034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004080:	f006 f8c2 	bl	800a208 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004084:	f7fc fd50 	bl	8000b28 <main>

08004088 <LoopForever>:

LoopForever:
    b LoopForever
 8004088:	e7fe      	b.n	8004088 <LoopForever>
 800408a:	0000      	.short	0x0000
                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 800408c:	20017ff0 	.word	0x20017ff0
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 8004090:	deadbeef 	.word	0xdeadbeef
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004094:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004098:	0800ba2c 	.word	0x0800ba2c
	ldr	r0, =_sdata
 800409c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80040a0:	2000046c 	.word	0x2000046c
	ldr	r2, =_sbss
 80040a4:	20000470 	.word	0x20000470
	ldr	r3, = _ebss
 80040a8:	2000ad48 	.word	0x2000ad48

080040ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040ac:	e7fe      	b.n	80040ac <ADC1_2_IRQHandler>
	...

080040b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040b0:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80040b2:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <HAL_InitTick+0x24>)
{
 80040b4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80040b6:	6818      	ldr	r0, [r3, #0]
 80040b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80040c0:	f000 f892 	bl	80041e8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80040c4:	2200      	movs	r2, #0
 80040c6:	4621      	mov	r1, r4
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	f000 f84c 	bl	8004168 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80040d0:	2000      	movs	r0, #0
 80040d2:	bd10      	pop	{r4, pc}
 80040d4:	20000004 	.word	0x20000004

080040d8 <HAL_Init>:
{
 80040d8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040da:	2003      	movs	r0, #3
 80040dc:	f000 f832 	bl	8004144 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80040e0:	2000      	movs	r0, #0
 80040e2:	f7ff ffe5 	bl	80040b0 <HAL_InitTick>
  HAL_MspInit();
 80040e6:	f7fe ff07 	bl	8002ef8 <HAL_MspInit>
}
 80040ea:	2000      	movs	r0, #0
 80040ec:	bd08      	pop	{r3, pc}
	...

080040f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80040f0:	4a02      	ldr	r2, [pc, #8]	; (80040fc <HAL_IncTick+0xc>)
 80040f2:	6813      	ldr	r3, [r2, #0]
 80040f4:	3301      	adds	r3, #1
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	2000ad40 	.word	0x2000ad40

08004100 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004100:	4b01      	ldr	r3, [pc, #4]	; (8004108 <HAL_GetTick+0x8>)
 8004102:	6818      	ldr	r0, [r3, #0]
}
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	2000ad40 	.word	0x2000ad40

0800410c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800410c:	b538      	push	{r3, r4, r5, lr}
 800410e:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8004110:	f7ff fff6 	bl	8004100 <HAL_GetTick>
 8004114:	4605      	mov	r5, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8004116:	f7ff fff3 	bl	8004100 <HAL_GetTick>
 800411a:	1b40      	subs	r0, r0, r5
 800411c:	42a0      	cmp	r0, r4
 800411e:	d3fa      	bcc.n	8004116 <HAL_Delay+0xa>
  {
  }
}
 8004120:	bd38      	pop	{r3, r4, r5, pc}
	...

08004124 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004124:	4a02      	ldr	r2, [pc, #8]	; (8004130 <HAL_SuspendTick+0xc>)
 8004126:	6813      	ldr	r3, [r2, #0]
 8004128:	f023 0302 	bic.w	r3, r3, #2
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4770      	bx	lr
 8004130:	e000e010 	.word	0xe000e010

08004134 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8004134:	4a02      	ldr	r2, [pc, #8]	; (8004140 <HAL_ResumeTick+0xc>)
 8004136:	6813      	ldr	r3, [r2, #0]
 8004138:	f043 0302 	orr.w	r3, r3, #2
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	4770      	bx	lr
 8004140:	e000e010 	.word	0xe000e010

08004144 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004144:	4a07      	ldr	r2, [pc, #28]	; (8004164 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004146:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004148:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800414c:	041b      	lsls	r3, r3, #16
 800414e:	0c1b      	lsrs	r3, r3, #16
 8004150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8004154:	0200      	lsls	r0, r0, #8
 8004156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800415a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800415e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004160:	60d3      	str	r3, [r2, #12]
 8004162:	4770      	bx	lr
 8004164:	e000ed00 	.word	0xe000ed00

08004168 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004168:	4b17      	ldr	r3, [pc, #92]	; (80041c8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800416a:	b530      	push	{r4, r5, lr}
 800416c:	68dc      	ldr	r4, [r3, #12]
 800416e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004172:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004176:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004178:	2b04      	cmp	r3, #4
 800417a:	bf28      	it	cs
 800417c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800417e:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004180:	f04f 0501 	mov.w	r5, #1
 8004184:	fa05 f303 	lsl.w	r3, r5, r3
 8004188:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800418c:	bf8c      	ite	hi
 800418e:	3c03      	subhi	r4, #3
 8004190:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004192:	4019      	ands	r1, r3
 8004194:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004196:	fa05 f404 	lsl.w	r4, r5, r4
 800419a:	3c01      	subs	r4, #1
 800419c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800419e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a0:	ea42 0201 	orr.w	r2, r2, r1
 80041a4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041a8:	bfaf      	iteee	ge
 80041aa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ae:	f000 000f 	andlt.w	r0, r0, #15
 80041b2:	4b06      	ldrlt	r3, [pc, #24]	; (80041cc <HAL_NVIC_SetPriority+0x64>)
 80041b4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b6:	bfa5      	ittet	ge
 80041b8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80041bc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041be:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041c0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80041c4:	bd30      	pop	{r4, r5, pc}
 80041c6:	bf00      	nop
 80041c8:	e000ed00 	.word	0xe000ed00
 80041cc:	e000ed14 	.word	0xe000ed14

080041d0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80041d0:	0942      	lsrs	r2, r0, #5
 80041d2:	2301      	movs	r3, #1
 80041d4:	f000 001f 	and.w	r0, r0, #31
 80041d8:	fa03 f000 	lsl.w	r0, r3, r0
 80041dc:	4b01      	ldr	r3, [pc, #4]	; (80041e4 <HAL_NVIC_EnableIRQ+0x14>)
 80041de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80041e2:	4770      	bx	lr
 80041e4:	e000e100 	.word	0xe000e100

080041e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041e8:	3801      	subs	r0, #1
 80041ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80041ee:	d20a      	bcs.n	8004206 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f2:	4a07      	ldr	r2, [pc, #28]	; (8004210 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041f4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f6:	21f0      	movs	r1, #240	; 0xf0
 80041f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041fe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004200:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004206:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	e000e010 	.word	0xe000e010
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8004214:	4770      	bx	lr

08004216 <HAL_SYSTICK_IRQHandler>:
{
 8004216:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004218:	f7ff fffc 	bl	8004214 <HAL_SYSTICK_Callback>
 800421c:	bd08      	pop	{r3, pc}
	...

08004220 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004220:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004222:	2800      	cmp	r0, #0
 8004224:	d05b      	beq.n	80042de <HAL_DMA_Init+0xbe>
  {
    assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
  }
  
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004226:	6801      	ldr	r1, [r0, #0]
 8004228:	4b2e      	ldr	r3, [pc, #184]	; (80042e4 <HAL_DMA_Init+0xc4>)
 800422a:	4299      	cmp	r1, r3
 800422c:	f04f 0414 	mov.w	r4, #20
 8004230:	d841      	bhi.n	80042b6 <HAL_DMA_Init+0x96>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004232:	4a2d      	ldr	r2, [pc, #180]	; (80042e8 <HAL_DMA_Init+0xc8>)
 8004234:	440a      	add	r2, r1
 8004236:	fbb2 f2f4 	udiv	r2, r2, r4
 800423a:	0092      	lsls	r2, r2, #2
 800423c:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800423e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8004242:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004244:	2302      	movs	r3, #2
 8004246:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800424a:	6884      	ldr	r4, [r0, #8]
 800424c:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800424e:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8004250:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8004252:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004254:	432b      	orrs	r3, r5
 8004256:	6945      	ldr	r5, [r0, #20]
 8004258:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800425a:	6985      	ldr	r5, [r0, #24]
 800425c:	432b      	orrs	r3, r5
 800425e:	69c5      	ldr	r5, [r0, #28]
 8004260:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8004262:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004264:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8004268:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 800426c:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800426e:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004270:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8004274:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004276:	d011      	beq.n	800429c <HAL_DMA_Init+0x7c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004278:	4b1c      	ldr	r3, [pc, #112]	; (80042ec <HAL_DMA_Init+0xcc>)
 800427a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800427c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800427e:	429a      	cmp	r2, r3
 8004280:	f04f 030f 	mov.w	r3, #15
 8004284:	d11f      	bne.n	80042c6 <HAL_DMA_Init+0xa6>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 8004286:	491a      	ldr	r1, [pc, #104]	; (80042f0 <HAL_DMA_Init+0xd0>)
 8004288:	680a      	ldr	r2, [r1, #0]
 800428a:	40a3      	lsls	r3, r4
 800428c:	ea22 0303 	bic.w	r3, r2, r3
 8004290:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 8004292:	6842      	ldr	r2, [r0, #4]
 8004294:	680b      	ldr	r3, [r1, #0]
 8004296:	40a2      	lsls	r2, r4
 8004298:	431a      	orrs	r2, r3
 800429a:	600a      	str	r2, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
    }
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800429c:	2300      	movs	r3, #0

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800429e:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042a0:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 80042a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80042a4:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80042a6:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80042a8:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State  = HAL_DMA_STATE_READY;
 80042aa:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042ae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  return HAL_OK;
 80042b2:	4618      	mov	r0, r3
 80042b4:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80042b6:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <HAL_DMA_Init+0xd4>)
 80042b8:	440b      	add	r3, r1
 80042ba:	fbb3 f3f4 	udiv	r3, r3, r4
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80042c2:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <HAL_DMA_Init+0xd8>)
 80042c4:	e7bd      	b.n	8004242 <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 80042c6:	490d      	ldr	r1, [pc, #52]	; (80042fc <HAL_DMA_Init+0xdc>)
 80042c8:	680a      	ldr	r2, [r1, #0]
 80042ca:	40a3      	lsls	r3, r4
 80042cc:	ea22 0303 	bic.w	r3, r2, r3
 80042d0:	600b      	str	r3, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 80042d2:	6843      	ldr	r3, [r0, #4]
 80042d4:	680a      	ldr	r2, [r1, #0]
 80042d6:	40a3      	lsls	r3, r4
 80042d8:	4313      	orrs	r3, r2
 80042da:	600b      	str	r3, [r1, #0]
 80042dc:	e7de      	b.n	800429c <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 80042de:	2001      	movs	r0, #1
}
 80042e0:	bd30      	pop	{r4, r5, pc}
 80042e2:	bf00      	nop
 80042e4:	40020407 	.word	0x40020407
 80042e8:	bffdfff8 	.word	0xbffdfff8
 80042ec:	40020000 	.word	0x40020000
 80042f0:	400200a8 	.word	0x400200a8
 80042f4:	bffdfbf8 	.word	0xbffdfbf8
 80042f8:	40020400 	.word	0x40020400
 80042fc:	400204a8 	.word	0x400204a8

08004300 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004300:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004302:	2800      	cmp	r0, #0
 8004304:	d034      	beq.n	8004370 <HAL_DMA_DeInit+0x70>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004306:	6801      	ldr	r1, [r0, #0]
 8004308:	680b      	ldr	r3, [r1, #0]
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	600b      	str	r3, [r1, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	600b      	str	r3, [r1, #0]

  /* Calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004314:	4b17      	ldr	r3, [pc, #92]	; (8004374 <HAL_DMA_DeInit+0x74>)
 8004316:	4299      	cmp	r1, r3
 8004318:	f04f 0414 	mov.w	r4, #20
 800431c:	d820      	bhi.n	8004360 <HAL_DMA_DeInit+0x60>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800431e:	4a16      	ldr	r2, [pc, #88]	; (8004378 <HAL_DMA_DeInit+0x78>)
 8004320:	440a      	add	r2, r1
 8004322:	fbb2 f2f4 	udiv	r2, r2, r4
 8004326:	0092      	lsls	r2, r2, #2
 8004328:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800432a:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 800432e:	6403      	str	r3, [r0, #64]	; 0x40
  }
  

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004330:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004332:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004334:	2301      	movs	r3, #1
 8004336:	408b      	lsls	r3, r1
 8004338:	6053      	str	r3, [r2, #4]

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 800433a:	4b10      	ldr	r3, [pc, #64]	; (800437c <HAL_DMA_DeInit+0x7c>)
 800433c:	429a      	cmp	r2, r3
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 800433e:	bf0c      	ite	eq
 8004340:	4c0f      	ldreq	r4, [pc, #60]	; (8004380 <HAL_DMA_DeInit+0x80>)
  }
  else  
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 8004342:	4c10      	ldrne	r4, [pc, #64]	; (8004384 <HAL_DMA_DeInit+0x84>)
 8004344:	230f      	movs	r3, #15
 8004346:	6822      	ldr	r2, [r4, #0]
 8004348:	408b      	lsls	r3, r1
 800434a:	ea22 0303 	bic.w	r3, r2, r3
 800434e:	6023      	str	r3, [r4, #0]
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004350:	2300      	movs	r3, #0
 8004352:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004354:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_RESET;
 8004358:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

  return HAL_OK;
 800435c:	4618      	mov	r0, r3
 800435e:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004360:	4b09      	ldr	r3, [pc, #36]	; (8004388 <HAL_DMA_DeInit+0x88>)
 8004362:	440b      	add	r3, r1
 8004364:	fbb3 f3f4 	udiv	r3, r3, r4
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800436c:	4b07      	ldr	r3, [pc, #28]	; (800438c <HAL_DMA_DeInit+0x8c>)
 800436e:	e7de      	b.n	800432e <HAL_DMA_DeInit+0x2e>
    return HAL_ERROR;
 8004370:	2001      	movs	r0, #1
}
 8004372:	bd10      	pop	{r4, pc}
 8004374:	40020407 	.word	0x40020407
 8004378:	bffdfff8 	.word	0xbffdfff8
 800437c:	40020000 	.word	0x40020000
 8004380:	400200a8 	.word	0x400200a8
 8004384:	400204a8 	.word	0x400204a8
 8004388:	bffdfbf8 	.word	0xbffdfbf8
 800438c:	40020400 	.word	0x40020400

08004390 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004390:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004392:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8004396:	2c01      	cmp	r4, #1
 8004398:	d036      	beq.n	8004408 <HAL_DMA_Start_IT+0x78>
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800439a:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 800439e:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80043a0:	b2ed      	uxtb	r5, r5
 80043a2:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 80043a4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 80043a8:	f04f 0600 	mov.w	r6, #0
 80043ac:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 80043b0:	d128      	bne.n	8004404 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043b2:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043b6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043b8:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80043ba:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80043bc:	6c47      	ldr	r7, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 80043be:	f026 0601 	bic.w	r6, r6, #1
 80043c2:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80043c4:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80043c6:	40bd      	lsls	r5, r7
 80043c8:	6075      	str	r5, [r6, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043ca:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043cc:	6883      	ldr	r3, [r0, #8]
 80043ce:	6805      	ldr	r5, [r0, #0]
 80043d0:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80043d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043d4:	bf0b      	itete	eq
 80043d6:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80043d8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80043da:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80043dc:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80043de:	b14b      	cbz	r3, 80043f4 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80043e6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80043e8:	682b      	ldr	r3, [r5, #0]
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043f0:	2000      	movs	r0, #0
 80043f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	f023 0304 	bic.w	r3, r3, #4
 80043fa:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	f043 030a 	orr.w	r3, r3, #10
 8004402:	e7f0      	b.n	80043e6 <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 8004404:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8004408:	2002      	movs	r0, #2
}
 800440a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800440c <HAL_DMA_Abort>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800440c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004410:	2b02      	cmp	r3, #2
 8004412:	d003      	beq.n	800441c <HAL_DMA_Abort+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004414:	2304      	movs	r3, #4
 8004416:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8004418:	2001      	movs	r0, #1
 800441a:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800441c:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800441e:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	f022 020e 	bic.w	r2, r2, #14
 8004426:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	f022 0201 	bic.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004430:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004432:	2201      	movs	r2, #1
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);      
 800443a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 800443c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);      
 8004440:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 8004444:	4618      	mov	r0, r3
}
 8004446:	4770      	bx	lr

08004448 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004448:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800444a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 800444c:	6803      	ldr	r3, [r0, #0]
{
 800444e:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004450:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004452:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004454:	2404      	movs	r4, #4
 8004456:	4094      	lsls	r4, r2
 8004458:	4226      	tst	r6, r4
 800445a:	d00e      	beq.n	800447a <HAL_DMA_IRQHandler+0x32>
 800445c:	f015 0f04 	tst.w	r5, #4
 8004460:	d00b      	beq.n	800447a <HAL_DMA_IRQHandler+0x32>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004466:	bf5e      	ittt	pl
 8004468:	681a      	ldrpl	r2, [r3, #0]
 800446a:	f022 0204 	bicpl.w	r2, r2, #4
 800446e:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8004470:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8004472:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8004474:	b373      	cbz	r3, 80044d4 <HAL_DMA_IRQHandler+0x8c>
}
 8004476:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8004478:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800447a:	2402      	movs	r4, #2
 800447c:	4094      	lsls	r4, r2
 800447e:	4226      	tst	r6, r4
 8004480:	d012      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x60>
 8004482:	f015 0f02 	tst.w	r5, #2
 8004486:	d00f      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	0695      	lsls	r5, r2, #26
 800448c:	d406      	bmi.n	800449c <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	f022 020a 	bic.w	r2, r2, #10
 8004494:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004496:	2301      	movs	r3, #1
 8004498:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800449c:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 800449e:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80044a0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 80044a4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80044a6:	e7e5      	b.n	8004474 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80044a8:	2408      	movs	r4, #8
 80044aa:	4094      	lsls	r4, r2
 80044ac:	4234      	tst	r4, r6
 80044ae:	d011      	beq.n	80044d4 <HAL_DMA_IRQHandler+0x8c>
 80044b0:	072c      	lsls	r4, r5, #28
 80044b2:	d50f      	bpl.n	80044d4 <HAL_DMA_IRQHandler+0x8c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044b4:	681c      	ldr	r4, [r3, #0]
 80044b6:	f024 040e 	bic.w	r4, r4, #14
 80044ba:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80044bc:	2301      	movs	r3, #1
 80044be:	fa03 f202 	lsl.w	r2, r3, r2
 80044c2:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044c4:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80044c6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80044ca:	2300      	movs	r3, #0
 80044cc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 80044d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80044d2:	e7cf      	b.n	8004474 <HAL_DMA_IRQHandler+0x2c>
}
 80044d4:	bc70      	pop	{r4, r5, r6}
 80044d6:	4770      	bx	lr

080044d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044dc:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80044de:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044e0:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800468c <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80044e4:	4c67      	ldr	r4, [pc, #412]	; (8004684 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 80044e6:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 80044e8:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80044ea:	9a01      	ldr	r2, [sp, #4]
 80044ec:	40da      	lsrs	r2, r3
 80044ee:	d102      	bne.n	80044f6 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 80044f0:	b005      	add	sp, #20
 80044f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80044f6:	2601      	movs	r6, #1
    if(iocurrent)
 80044f8:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80044fa:	409e      	lsls	r6, r3
    if(iocurrent)
 80044fc:	ea12 0e06 	ands.w	lr, r2, r6
 8004500:	f000 80b1 	beq.w	8004666 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004504:	684a      	ldr	r2, [r1, #4]
 8004506:	f022 0710 	bic.w	r7, r2, #16
 800450a:	2f02      	cmp	r7, #2
 800450c:	d116      	bne.n	800453c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 800450e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8004512:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004516:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800451a:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800451e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8004522:	f04f 0c0f 	mov.w	ip, #15
 8004526:	fa0c fc0a 	lsl.w	ip, ip, sl
 800452a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800452e:	690d      	ldr	r5, [r1, #16]
 8004530:	fa05 f50a 	lsl.w	r5, r5, sl
 8004534:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8004538:	f8c9 5020 	str.w	r5, [r9, #32]
 800453c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8004540:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8004542:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8004546:	fa05 f50c 	lsl.w	r5, r5, ip
 800454a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800454c:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8004550:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004554:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004558:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800455a:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800455e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8004560:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004564:	d811      	bhi.n	800458a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8004566:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8004568:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 800456c:	68cf      	ldr	r7, [r1, #12]
 800456e:	fa07 f70c 	lsl.w	r7, r7, ip
 8004572:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8004576:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004578:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800457a:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800457e:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8004582:	409f      	lsls	r7, r3
 8004584:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8004588:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800458a:	f1ba 0f03 	cmp.w	sl, #3
 800458e:	d107      	bne.n	80045a0 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8004590:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004592:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004596:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 800459a:	409f      	lsls	r7, r3
 800459c:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 800459e:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80045a0:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80045a2:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80045a4:	688e      	ldr	r6, [r1, #8]
 80045a6:	fa06 f60c 	lsl.w	r6, r6, ip
 80045aa:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80045ac:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045ae:	00d5      	lsls	r5, r2, #3
 80045b0:	d559      	bpl.n	8004666 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045b2:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80045b6:	f045 0501 	orr.w	r5, r5, #1
 80045ba:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 80045be:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80045c2:	f023 0603 	bic.w	r6, r3, #3
 80045c6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80045ca:	f005 0501 	and.w	r5, r5, #1
 80045ce:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80045d2:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045d4:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045d8:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80045da:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045dc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80045e0:	270f      	movs	r7, #15
 80045e2:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80045e6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045ea:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80045ee:	d03c      	beq.n	800466a <HAL_GPIO_Init+0x192>
 80045f0:	4d25      	ldr	r5, [pc, #148]	; (8004688 <HAL_GPIO_Init+0x1b0>)
 80045f2:	42a8      	cmp	r0, r5
 80045f4:	d03b      	beq.n	800466e <HAL_GPIO_Init+0x196>
 80045f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045fa:	42a8      	cmp	r0, r5
 80045fc:	d039      	beq.n	8004672 <HAL_GPIO_Init+0x19a>
 80045fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004602:	42a8      	cmp	r0, r5
 8004604:	d037      	beq.n	8004676 <HAL_GPIO_Init+0x19e>
 8004606:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800460a:	42a8      	cmp	r0, r5
 800460c:	d035      	beq.n	800467a <HAL_GPIO_Init+0x1a2>
 800460e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004612:	42a8      	cmp	r0, r5
 8004614:	d033      	beq.n	800467e <HAL_GPIO_Init+0x1a6>
 8004616:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800461a:	42a8      	cmp	r0, r5
 800461c:	bf14      	ite	ne
 800461e:	2507      	movne	r5, #7
 8004620:	2506      	moveq	r5, #6
 8004622:	fa05 f50c 	lsl.w	r5, r5, ip
 8004626:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8004628:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 800462a:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800462c:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004630:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 8004632:	bf54      	ite	pl
 8004634:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8004636:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 800463a:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 800463c:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800463e:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 8004640:	bf54      	ite	pl
 8004642:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8004644:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8004648:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 800464a:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800464c:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 800464e:	bf54      	ite	pl
 8004650:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8004652:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8004656:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8004658:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800465a:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 800465c:	bf54      	ite	pl
 800465e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8004660:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8004664:	60e5      	str	r5, [r4, #12]
    position++;
 8004666:	3301      	adds	r3, #1
 8004668:	e73f      	b.n	80044ea <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800466a:	2500      	movs	r5, #0
 800466c:	e7d9      	b.n	8004622 <HAL_GPIO_Init+0x14a>
 800466e:	2501      	movs	r5, #1
 8004670:	e7d7      	b.n	8004622 <HAL_GPIO_Init+0x14a>
 8004672:	2502      	movs	r5, #2
 8004674:	e7d5      	b.n	8004622 <HAL_GPIO_Init+0x14a>
 8004676:	2503      	movs	r5, #3
 8004678:	e7d3      	b.n	8004622 <HAL_GPIO_Init+0x14a>
 800467a:	2504      	movs	r5, #4
 800467c:	e7d1      	b.n	8004622 <HAL_GPIO_Init+0x14a>
 800467e:	2505      	movs	r5, #5
 8004680:	e7cf      	b.n	8004622 <HAL_GPIO_Init+0x14a>
 8004682:	bf00      	nop
 8004684:	40010400 	.word	0x40010400
 8004688:	48000400 	.word	0x48000400
 800468c:	40021000 	.word	0x40021000

08004690 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004690:	6903      	ldr	r3, [r0, #16]
 8004692:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004694:	bf14      	ite	ne
 8004696:	2001      	movne	r0, #1
 8004698:	2000      	moveq	r0, #0
 800469a:	4770      	bx	lr

0800469c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80046a0:	4604      	mov	r4, r0
{
 80046a2:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 80046a4:	2800      	cmp	r0, #0
 80046a6:	d07c      	beq.n	80047a2 <HAL_PCD_Init+0x106>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  
  if(hpcd->State == HAL_PCD_STATE_RESET)
 80046a8:	f890 3385 	ldrb.w	r3, [r0, #901]	; 0x385
 80046ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80046b0:	b91b      	cbnz	r3, 80046ba <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80046b2:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046b6:	f7fe fdd1 	bl	800325c <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046ba:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80046bc:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 80046be:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80046c2:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  __HAL_PCD_DISABLE(hpcd);
 80046c6:	f002 fda6 	bl	8007216 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80046ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046cc:	466e      	mov	r6, sp
 80046ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80046d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80046d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80046d8:	e886 0003 	stmia.w	r6, {r0, r1}
 80046dc:	f104 0804 	add.w	r8, r4, #4
 80046e0:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80046e4:	6820      	ldr	r0, [r4, #0]
 80046e6:	f002 fd7c 	bl	80071e2 <USB_CoreInit>

  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80046ea:	2100      	movs	r1, #0
 80046ec:	6820      	ldr	r0, [r4, #0]
 80046ee:	f002 fd98 	bl	8007222 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80046f2:	2200      	movs	r2, #0
 80046f4:	6860      	ldr	r0, [r4, #4]
 80046f6:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80046fa:	f104 0510 	add.w	r5, r4, #16
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 80046fe:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8004700:	4611      	mov	r1, r2
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004702:	4282      	cmp	r2, r0
 8004704:	f103 031c 	add.w	r3, r3, #28
 8004708:	d13b      	bne.n	8004782 <HAL_PCD_Init+0xe6>
 800470a:	2200      	movs	r2, #0
 800470c:	4623      	mov	r3, r4
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 800470e:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8004710:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
    hpcd->IN_ep[index].tx_fifo_num = index;
 8004714:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (index = 0; index < 15 ; index++)
 8004718:	3201      	adds	r2, #1
 800471a:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0;
 800471c:	f883 71e1 	strb.w	r7, [r3, #481]	; 0x1e1
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8004720:	f883 71e3 	strb.w	r7, [r3, #483]	; 0x1e3
    hpcd->OUT_ep[index].maxpacket = 0;
 8004724:	f8c3 71e8 	str.w	r7, [r3, #488]	; 0x1e8
    hpcd->OUT_ep[index].xfer_buff = 0;
 8004728:	f8c3 71ec 	str.w	r7, [r3, #492]	; 0x1ec
    hpcd->OUT_ep[index].xfer_len = 0;
 800472c:	f8c3 71f4 	str.w	r7, [r3, #500]	; 0x1f4
 8004730:	f103 031c 	add.w	r3, r3, #28
  for (index = 0; index < 15 ; index++)
 8004734:	d1ec      	bne.n	8004710 <HAL_PCD_Init+0x74>
  }

  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8004736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004738:	466e      	mov	r6, sp
 800473a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800473c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800473e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004740:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004744:	e886 0003 	stmia.w	r6, {r0, r1}
 8004748:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800474c:	6820      	ldr	r0, [r4, #0]
 800474e:	f002 fd7f 	bl	8007250 <USB_DevInit>

  hpcd->USB_Address = 0;
  
  hpcd->State= HAL_PCD_STATE_READY;
 8004752:	2301      	movs	r3, #1
  hpcd->USB_Address = 0;
 8004754:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State= HAL_PCD_STATE_READY;
 8004758:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  
   /* Activate LPM */
  if (hpcd->Init.lpm_enable ==1)
 800475c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800475e:	2b01      	cmp	r3, #1
 8004760:	d102      	bne.n	8004768 <HAL_PCD_Init+0xcc>
  {
    HAL_PCDEx_ActivateLPM(hpcd);
 8004762:	4620      	mov	r0, r4
 8004764:	f000 fcb3 	bl	80050ce <HAL_PCDEx_ActivateLPM>
  }  
  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable ==1)
 8004768:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800476a:	2b01      	cmp	r3, #1
 800476c:	d102      	bne.n	8004774 <HAL_PCD_Init+0xd8>
  {
    HAL_PCDEx_ActivateBCD(hpcd);
 800476e:	4620      	mov	r0, r4
 8004770:	f000 fcc0 	bl	80050f4 <HAL_PCDEx_ActivateBCD>
  }
  USB_DevDisconnect (hpcd->Instance);  
 8004774:	6820      	ldr	r0, [r4, #0]
 8004776:	f003 f84b 	bl	8007810 <USB_DevDisconnect>
  return HAL_OK;
 800477a:	2000      	movs	r0, #0
}
 800477c:	b00a      	add	sp, #40	; 0x28
 800477e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hpcd->IN_ep[index].num = index;
 8004782:	f803 2c1c 	strb.w	r2, [r3, #-28]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8004786:	f823 2c16 	strh.w	r2, [r3, #-22]
    hpcd->IN_ep[index].is_in = 1;
 800478a:	f803 6c1b 	strb.w	r6, [r3, #-27]
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800478e:	f803 1c19 	strb.w	r1, [r3, #-25]
    hpcd->IN_ep[index].maxpacket =  0;
 8004792:	f843 1c14 	str.w	r1, [r3, #-20]
    hpcd->IN_ep[index].xfer_buff = 0;
 8004796:	f843 1c10 	str.w	r1, [r3, #-16]
    hpcd->IN_ep[index].xfer_len = 0;
 800479a:	f843 1c08 	str.w	r1, [r3, #-8]
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 800479e:	3201      	adds	r2, #1
 80047a0:	e7af      	b.n	8004702 <HAL_PCD_Init+0x66>
    return HAL_ERROR;
 80047a2:	2001      	movs	r0, #1
 80047a4:	e7ea      	b.n	800477c <HAL_PCD_Init+0xe0>

080047a6 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 80047a6:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 80047aa:	2b01      	cmp	r3, #1
{ 
 80047ac:	b510      	push	{r4, lr}
 80047ae:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80047b0:	d00c      	beq.n	80047cc <HAL_PCD_Start+0x26>
 80047b2:	2301      	movs	r3, #1
 80047b4:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  USB_DevConnect (hpcd->Instance);
 80047b8:	6800      	ldr	r0, [r0, #0]
 80047ba:	f003 f81d 	bl	80077f8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80047be:	6820      	ldr	r0, [r4, #0]
 80047c0:	f002 fd23 	bl	800720a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 80047c4:	2000      	movs	r0, #0
 80047c6:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80047ca:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80047cc:	2002      	movs	r0, #2
}
 80047ce:	bd10      	pop	{r4, pc}

080047d0 <HAL_PCD_Stop>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 80047d0:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 80047d4:	2b01      	cmp	r3, #1
{ 
 80047d6:	b510      	push	{r4, lr}
 80047d8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80047da:	d00f      	beq.n	80047fc <HAL_PCD_Stop+0x2c>
 80047dc:	2301      	movs	r3, #1
 80047de:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  __HAL_PCD_DISABLE(hpcd);
 80047e2:	6800      	ldr	r0, [r0, #0]
 80047e4:	f002 fd17 	bl	8007216 <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 80047e8:	6820      	ldr	r0, [r4, #0]
 80047ea:	f002 ffd4 	bl	8007796 <USB_StopDevice>
  USB_DevDisconnect (hpcd->Instance);
 80047ee:	6820      	ldr	r0, [r4, #0]
 80047f0:	f003 f80e 	bl	8007810 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd); 
 80047f4:	2000      	movs	r0, #0
 80047f6:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
 80047fa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80047fc:	2002      	movs	r0, #2
  return HAL_OK;
}
 80047fe:	bd10      	pop	{r4, pc}

08004800 <HAL_PCD_DeInit>:
{
 8004800:	b510      	push	{r4, lr}
  if(hpcd == NULL)
 8004802:	4604      	mov	r4, r0
 8004804:	b158      	cbz	r0, 800481e <HAL_PCD_DeInit+0x1e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004806:	2303      	movs	r3, #3
 8004808:	f880 3385 	strb.w	r3, [r0, #901]	; 0x385
  HAL_PCD_Stop(hpcd);
 800480c:	f7ff ffe0 	bl	80047d0 <HAL_PCD_Stop>
  HAL_PCD_MspDeInit(hpcd);
 8004810:	4620      	mov	r0, r4
 8004812:	f7fe fd61 	bl	80032d8 <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET; 
 8004816:	2000      	movs	r0, #0
 8004818:	f884 0385 	strb.w	r0, [r4, #901]	; 0x385
  return HAL_OK;
 800481c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800481e:	2001      	movs	r0, #1
}
 8004820:	bd10      	pop	{r4, pc}
	...

08004824 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004828:	6807      	ldr	r7, [r0, #0]
{
 800482a:	b087      	sub	sp, #28
 800482c:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep = NULL;
  uint32_t hclk = 80000000;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800482e:	4638      	mov	r0, r7
 8004830:	f003 f828 	bl	8007884 <USB_GetMode>
 8004834:	9002      	str	r0, [sp, #8]
 8004836:	2800      	cmp	r0, #0
 8004838:	f040 8155 	bne.w	8004ae6 <HAL_PCD_IRQHandler+0x2c2>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 800483c:	6820      	ldr	r0, [r4, #0]
 800483e:	f002 fff3 	bl	8007828 <USB_ReadInterrupts>
 8004842:	2800      	cmp	r0, #0
 8004844:	f000 814f 	beq.w	8004ae6 <HAL_PCD_IRQHandler+0x2c2>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004848:	6820      	ldr	r0, [r4, #0]
 800484a:	f002 ffed 	bl	8007828 <USB_ReadInterrupts>
 800484e:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004850:	bf48      	it	mi
 8004852:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004854:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004856:	bf42      	ittt	mi
 8004858:	6953      	ldrmi	r3, [r2, #20]
 800485a:	f003 0302 	andmi.w	r3, r3, #2
 800485e:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004860:	f002 ffe2 	bl	8007828 <USB_ReadInterrupts>
 8004864:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8004868:	d00c      	beq.n	8004884 <HAL_PCD_IRQHandler+0x60>
    {
      epnum = 0;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800486a:	6820      	ldr	r0, [r4, #0]
 800486c:	f002 ffe0 	bl	8007830 <USB_ReadDevAllOutEpInterrupt>
 8004870:	f507 6930 	add.w	r9, r7, #2816	; 0xb00
 8004874:	4680      	mov	r8, r0
 8004876:	46a3      	mov	fp, r4
      
      while ( ep_intr )
 8004878:	464e      	mov	r6, r9
      epnum = 0;
 800487a:	2500      	movs	r5, #0
      while ( ep_intr )
 800487c:	f1b8 0f00 	cmp.w	r8, #0
 8004880:	f040 8134 	bne.w	8004aec <HAL_PCD_IRQHandler+0x2c8>
        epnum++;
        ep_intr >>= 1;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004884:	6820      	ldr	r0, [r4, #0]
 8004886:	f002 ffcf 	bl	8007828 <USB_ReadInterrupts>
 800488a:	0342      	lsls	r2, r0, #13
 800488c:	d50b      	bpl.n	80048a6 <HAL_PCD_IRQHandler+0x82>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800488e:	6820      	ldr	r0, [r4, #0]
 8004890:	f002 ffd6 	bl	8007840 <USB_ReadDevAllInEpInterrupt>
 8004894:	4626      	mov	r6, r4
 8004896:	4683      	mov	fp, r0
 8004898:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      
      epnum = 0;
 800489c:	2500      	movs	r5, #0
      
      while ( ep_intr )
 800489e:	f1bb 0f00 	cmp.w	fp, #0
 80048a2:	f040 81a1 	bne.w	8004be8 <HAL_PCD_IRQHandler+0x3c4>
        ep_intr >>= 1;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80048a6:	6820      	ldr	r0, [r4, #0]
 80048a8:	f002 ffbe 	bl	8007828 <USB_ReadInterrupts>
 80048ac:	2800      	cmp	r0, #0
 80048ae:	da15      	bge.n	80048dc <HAL_PCD_IRQHandler+0xb8>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048b0:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80048b4:	f023 0301 	bic.w	r3, r3, #1
 80048b8:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
      
      if(hpcd->LPM_State == LPM_L1)
 80048bc:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	f040 822c 	bne.w	8004d1e <HAL_PCD_IRQHandler+0x4fa>
      {
        hpcd->LPM_State = LPM_L0;
 80048c6:	2100      	movs	r1, #0
 80048c8:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80048cc:	4620      	mov	r0, r4
 80048ce:	f000 fc1b 	bl	8005108 <HAL_PCDEx_LPM_Callback>
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	6953      	ldr	r3, [r2, #20]
 80048d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048da:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	f002 ffa3 	bl	8007828 <USB_ReadInterrupts>
 80048e2:	0503      	lsls	r3, r0, #20
 80048e4:	d50b      	bpl.n	80048fe <HAL_PCD_IRQHandler+0xda>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80048e6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80048ea:	07de      	lsls	r6, r3, #31
 80048ec:	d502      	bpl.n	80048f4 <HAL_PCD_IRQHandler+0xd0>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 80048ee:	4620      	mov	r0, r4
 80048f0:	f7fe fd26 	bl	8003340 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80048f4:	6822      	ldr	r2, [r4, #0]
 80048f6:	6953      	ldr	r3, [r2, #20]
 80048f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048fc:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle LPM Interrupt */ 
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80048fe:	6820      	ldr	r0, [r4, #0]
 8004900:	f002 ff92 	bl	8007828 <USB_ReadInterrupts>
 8004904:	0100      	lsls	r0, r0, #4
 8004906:	d514      	bpl.n	8004932 <HAL_PCD_IRQHandler+0x10e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	695a      	ldr	r2, [r3, #20]
 800490c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004910:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8004912:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 8004916:	2a00      	cmp	r2, #0
 8004918:	f040 8205 	bne.w	8004d26 <HAL_PCD_IRQHandler+0x502>
      {   
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 800491c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 800491e:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8004920:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8004924:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8004928:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800492c:	4620      	mov	r0, r4
 800492e:	f000 fbeb 	bl	8005108 <HAL_PCDEx_LPM_Callback>
        HAL_PCD_SuspendCallback(hpcd);
      }
    }
    
    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004932:	6820      	ldr	r0, [r4, #0]
 8004934:	f002 ff78 	bl	8007828 <USB_ReadInterrupts>
 8004938:	04c1      	lsls	r1, r0, #19
 800493a:	d537      	bpl.n	80049ac <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 800493c:	f507 6600 	add.w	r6, r7, #2048	; 0x800
 8004940:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 8004942:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8004944:	f023 0301 	bic.w	r3, r3, #1
 8004948:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 800494a:	2100      	movs	r1, #0
 800494c:	f002 fd18 	bl	8007380 <USB_FlushTxFifo>
      
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004950:	6861      	ldr	r1, [r4, #4]
 8004952:	f507 6310 	add.w	r3, r7, #2304	; 0x900
      {
        USBx_INEP(index)->DIEPINT = 0xFF;
 8004956:	22ff      	movs	r2, #255	; 0xff
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004958:	9802      	ldr	r0, [sp, #8]
 800495a:	4288      	cmp	r0, r1
 800495c:	f040 81e7 	bne.w	8004d2e <HAL_PCD_IRQHandler+0x50a>
        USBx_OUTEP(index)->DOEPINT = 0xFF;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8004960:	f04f 33ff 	mov.w	r3, #4294967295
 8004964:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 8004966:	69f3      	ldr	r3, [r6, #28]
 8004968:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800496c:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 800496e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 81e4 	beq.w	8004d3e <HAL_PCD_IRQHandler+0x51a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8004976:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 800497a:	f043 030b 	orr.w	r3, r3, #11
 800497e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8004982:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8004984:	f043 030b 	orr.w	r3, r3, #11
 8004988:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800498a:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800498e:	7c21      	ldrb	r1, [r4, #16]
 8004990:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004992:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004996:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800499a:	f504 7262 	add.w	r2, r4, #904	; 0x388
 800499e:	f002 ff90 	bl	80078c2 <USB_EP0_OutStart>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80049a2:	6822      	ldr	r2, [r4, #0]
 80049a4:	6953      	ldr	r3, [r2, #20]
 80049a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049aa:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80049ac:	6820      	ldr	r0, [r4, #0]
 80049ae:	f002 ff3b 	bl	8007828 <USB_ReadInterrupts>
 80049b2:	0482      	lsls	r2, r0, #18
 80049b4:	d520      	bpl.n	80049f8 <HAL_PCD_IRQHandler+0x1d4>
    {
      USB_ActivateSetup(hpcd->Instance);
 80049b6:	6820      	ldr	r0, [r4, #0]
 80049b8:	f002 ff68 	bl	800788c <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80049bc:	6822      	ldr	r2, [r4, #0]
 80049be:	68d3      	ldr	r3, [r2, #12]
 80049c0:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80049c4:	60d3      	str	r3, [r2, #12]
      
      hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 80049c6:	2303      	movs	r3, #3
 80049c8:	60e3      	str	r3, [r4, #12]
      hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ; 
 80049ca:	2340      	movs	r3, #64	; 0x40
 80049cc:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */

      /* Get hclk frequency value */
      hclk = HAL_RCC_GetHCLKFreq();
 80049ce:	f000 febb 	bl	8005748 <HAL_RCC_GetHCLKFreq>
    
      if((hclk >= 14200000)&&(hclk < 15000000))
 80049d2:	4b82      	ldr	r3, [pc, #520]	; (8004bdc <HAL_PCD_IRQHandler+0x3b8>)
 80049d4:	4a82      	ldr	r2, [pc, #520]	; (8004be0 <HAL_PCD_IRQHandler+0x3bc>)
 80049d6:	4403      	add	r3, r0
 80049d8:	4293      	cmp	r3, r2
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	f200 81b8 	bhi.w	8004d50 <HAL_PCD_IRQHandler+0x52c>
      {
        /* hclk Clock Range between 14.2-15 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
      }
      
      else /* if(hclk >= 32000000) */
      {
        /* hclk Clock Range between 32-80 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 80049e6:	60da      	str	r2, [r3, #12]
      }  
      
      HAL_PCD_ResetCallback(hpcd);
 80049e8:	4620      	mov	r0, r4
 80049ea:	f7fe fc9c 	bl	8003326 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80049ee:	6822      	ldr	r2, [r4, #0]
 80049f0:	6953      	ldr	r3, [r2, #20]
 80049f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049f6:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80049f8:	6820      	ldr	r0, [r4, #0]
 80049fa:	f002 ff15 	bl	8007828 <USB_ReadInterrupts>
 80049fe:	06c3      	lsls	r3, r0, #27
 8004a00:	d52b      	bpl.n	8004a5a <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a02:	6822      	ldr	r2, [r4, #0]
 8004a04:	6993      	ldr	r3, [r2, #24]
 8004a06:	f023 0310 	bic.w	r3, r3, #16
 8004a0a:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8004a0c:	6a3e      	ldr	r6, [r7, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004a0e:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8004a12:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004a14:	f006 090f 	and.w	r9, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004a18:	f040 81ea 	bne.w	8004df0 <HAL_PCD_IRQHandler+0x5cc>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8004a1c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004a20:	421e      	tst	r6, r3
 8004a22:	d015      	beq.n	8004a50 <HAL_PCD_IRQHandler+0x22c>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8004a24:	f04f 081c 	mov.w	r8, #28
 8004a28:	fb08 4809 	mla	r8, r8, r9, r4
 8004a2c:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8004a30:	4632      	mov	r2, r6
 8004a32:	f8d8 11ec 	ldr.w	r1, [r8, #492]	; 0x1ec
 8004a36:	4638      	mov	r0, r7
 8004a38:	f002 fe65 	bl	8007706 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a3c:	f8d8 31ec 	ldr.w	r3, [r8, #492]	; 0x1ec
 8004a40:	4433      	add	r3, r6
 8004a42:	f8c8 31ec 	str.w	r3, [r8, #492]	; 0x1ec
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a46:	f8d8 31f8 	ldr.w	r3, [r8, #504]	; 0x1f8
 8004a4a:	441e      	add	r6, r3
 8004a4c:	f8c8 61f8 	str.w	r6, [r8, #504]	; 0x1f8
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a50:	6822      	ldr	r2, [r4, #0]
 8004a52:	6993      	ldr	r3, [r2, #24]
 8004a54:	f043 0310 	orr.w	r3, r3, #16
 8004a58:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004a5a:	6820      	ldr	r0, [r4, #0]
 8004a5c:	f002 fee4 	bl	8007828 <USB_ReadInterrupts>
 8004a60:	0707      	lsls	r7, r0, #28
 8004a62:	d507      	bpl.n	8004a74 <HAL_PCD_IRQHandler+0x250>
    {
      HAL_PCD_SOFCallback(hpcd);
 8004a64:	4620      	mov	r0, r4
 8004a66:	f7fe fc5a 	bl	800331e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004a6a:	6822      	ldr	r2, [r4, #0]
 8004a6c:	6953      	ldr	r3, [r2, #20]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004a74:	6820      	ldr	r0, [r4, #0]
 8004a76:	f002 fed7 	bl	8007828 <USB_ReadInterrupts>
 8004a7a:	02c6      	lsls	r6, r0, #11
 8004a7c:	d508      	bpl.n	8004a90 <HAL_PCD_IRQHandler+0x26c>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8004a7e:	b2e9      	uxtb	r1, r5
 8004a80:	4620      	mov	r0, r4
 8004a82:	f7fe fc69 	bl	8003358 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a86:	6822      	ldr	r2, [r4, #0]
 8004a88:	6953      	ldr	r3, [r2, #20]
 8004a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a8e:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004a90:	6820      	ldr	r0, [r4, #0]
 8004a92:	f002 fec9 	bl	8007828 <USB_ReadInterrupts>
 8004a96:	0280      	lsls	r0, r0, #10
 8004a98:	d508      	bpl.n	8004aac <HAL_PCD_IRQHandler+0x288>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8004a9a:	b2e9      	uxtb	r1, r5
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f7fe fc57 	bl	8003350 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004aa2:	6822      	ldr	r2, [r4, #0]
 8004aa4:	6953      	ldr	r3, [r2, #20]
 8004aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aaa:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004aac:	6820      	ldr	r0, [r4, #0]
 8004aae:	f002 febb 	bl	8007828 <USB_ReadInterrupts>
 8004ab2:	0041      	lsls	r1, r0, #1
 8004ab4:	d507      	bpl.n	8004ac6 <HAL_PCD_IRQHandler+0x2a2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f7fe fc52 	bl	8003360 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004abc:	6822      	ldr	r2, [r4, #0]
 8004abe:	6953      	ldr	r3, [r2, #20]
 8004ac0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ac4:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	f002 feae 	bl	8007828 <USB_ReadInterrupts>
 8004acc:	0742      	lsls	r2, r0, #29
 8004ace:	d50a      	bpl.n	8004ae6 <HAL_PCD_IRQHandler+0x2c2>
    {
      temp = hpcd->Instance->GOTGINT;
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ad4:	076b      	lsls	r3, r5, #29
 8004ad6:	d502      	bpl.n	8004ade <HAL_PCD_IRQHandler+0x2ba>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f7fe fc45 	bl	8003368 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	4315      	orrs	r5, r2
 8004ae4:	605d      	str	r5, [r3, #4]
    }
  }
}
 8004ae6:	b007      	add	sp, #28
 8004ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1)
 8004aec:	f018 0f01 	tst.w	r8, #1
 8004af0:	d049      	beq.n	8004b86 <HAL_PCD_IRQHandler+0x362>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8004af2:	b2ea      	uxtb	r2, r5
 8004af4:	4611      	mov	r1, r2
 8004af6:	6820      	ldr	r0, [r4, #0]
 8004af8:	9203      	str	r2, [sp, #12]
 8004afa:	f002 fea9 	bl	8007850 <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004afe:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8004b02:	4682      	mov	sl, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004b04:	d032      	beq.n	8004b6c <HAL_PCD_IRQHandler+0x348>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004b06:	2101      	movs	r1, #1
 8004b08:	60b1      	str	r1, [r6, #8]
            if (USBx->GSNPSID == USB_OTG_CORE_ID_310A)
 8004b0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b0c:	4b35      	ldr	r3, [pc, #212]	; (8004be4 <HAL_PCD_IRQHandler+0x3c0>)
 8004b0e:	9a03      	ldr	r2, [sp, #12]
 8004b10:	4299      	cmp	r1, r3
 8004b12:	d13f      	bne.n	8004b94 <HAL_PCD_IRQHandler+0x370>
              if (!(USBx_OUTEP(0)->DOEPINT & (0x1 << 15)))
 8004b14:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8004b18:	0409      	lsls	r1, r1, #16
 8004b1a:	d41f      	bmi.n	8004b5c <HAL_PCD_IRQHandler+0x338>
                  if (hpcd->Init.dma_enable == 1)
 8004b1c:	6921      	ldr	r1, [r4, #16]
 8004b1e:	2901      	cmp	r1, #1
 8004b20:	d10c      	bne.n	8004b3c <HAL_PCD_IRQHandler+0x318>
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b22:	6931      	ldr	r1, [r6, #16]
                                                 hpcd->OUT_ep[epnum].maxpacket -
 8004b24:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b28:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                                 hpcd->OUT_ep[epnum].maxpacket -
 8004b2c:	1a41      	subs	r1, r0, r1
                  	hpcd->OUT_ep[epnum].xfer_count =
 8004b2e:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                    hpcd->OUT_ep[epnum].xfer_buff +=
 8004b32:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 8004b36:	4408      	add	r0, r1
 8004b38:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
                HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f7fe fbdc 	bl	80032fc <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 8004b44:	6921      	ldr	r1, [r4, #16]
 8004b46:	2901      	cmp	r1, #1
 8004b48:	d108      	bne.n	8004b5c <HAL_PCD_IRQHandler+0x338>
                  if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 8004b4a:	b93d      	cbnz	r5, 8004b5c <HAL_PCD_IRQHandler+0x338>
 8004b4c:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 8004b50:	b922      	cbnz	r2, 8004b5c <HAL_PCD_IRQHandler+0x338>
                    USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8004b52:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8004b56:	6820      	ldr	r0, [r4, #0]
 8004b58:	f002 feb3 	bl	80078c2 <USB_EP0_OutStart>
              USBx_OUTEP(0)->DOEPINT |= (0x1 << 15) | (0x1 << 5);
 8004b5c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8004b60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b64:	f042 0220 	orr.w	r2, r2, #32
 8004b68:	f8c9 2008 	str.w	r2, [r9, #8]
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004b6c:	f01a 0f08 	tst.w	sl, #8
 8004b70:	d004      	beq.n	8004b7c <HAL_PCD_IRQHandler+0x358>
            HAL_PCD_SetupStageCallback(hpcd);
 8004b72:	4620      	mov	r0, r4
 8004b74:	f7fe fbbc 	bl	80032f0 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004b78:	2308      	movs	r3, #8
 8004b7a:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004b7c:	f01a 0f10 	tst.w	sl, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004b80:	bf1c      	itt	ne
 8004b82:	2310      	movne	r3, #16
 8004b84:	60b3      	strne	r3, [r6, #8]
        epnum++;
 8004b86:	3501      	adds	r5, #1
        ep_intr >>= 1;
 8004b88:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8004b8c:	3620      	adds	r6, #32
 8004b8e:	f10b 0b1c 	add.w	fp, fp, #28
 8004b92:	e673      	b.n	800487c <HAL_PCD_IRQHandler+0x58>
              if (hpcd->Init.dma_enable == 1)
 8004b94:	6921      	ldr	r1, [r4, #16]
 8004b96:	2901      	cmp	r1, #1
 8004b98:	d10c      	bne.n	8004bb4 <HAL_PCD_IRQHandler+0x390>
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b9a:	6931      	ldr	r1, [r6, #16]
                                               hpcd->OUT_ep[epnum].maxpacket -
 8004b9c:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ba0:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                               hpcd->OUT_ep[epnum].maxpacket -
 8004ba4:	1a41      	subs	r1, r0, r1
                hpcd->OUT_ep[epnum].xfer_count =
 8004ba6:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8004baa:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 8004bae:	4408      	add	r0, r1
 8004bb0:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
              HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7fe fba0 	bl	80032fc <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 8004bbc:	6921      	ldr	r1, [r4, #16]
 8004bbe:	2901      	cmp	r1, #1
 8004bc0:	d1d4      	bne.n	8004b6c <HAL_PCD_IRQHandler+0x348>
                if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 8004bc2:	2d00      	cmp	r5, #0
 8004bc4:	d1d2      	bne.n	8004b6c <HAL_PCD_IRQHandler+0x348>
 8004bc6:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 8004bca:	2a00      	cmp	r2, #0
 8004bcc:	d1ce      	bne.n	8004b6c <HAL_PCD_IRQHandler+0x348>
                  USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8004bce:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8004bd2:	6820      	ldr	r0, [r4, #0]
 8004bd4:	f002 fe75 	bl	80078c2 <USB_EP0_OutStart>
 8004bd8:	e7c8      	b.n	8004b6c <HAL_PCD_IRQHandler+0x348>
 8004bda:	bf00      	nop
 8004bdc:	ff275340 	.word	0xff275340
 8004be0:	000c34ff 	.word	0x000c34ff
 8004be4:	4f54310a 	.word	0x4f54310a
        if (ep_intr & 0x1) /* In ITR */
 8004be8:	f01b 0f01 	tst.w	fp, #1
 8004bec:	d074      	beq.n	8004cd8 <HAL_PCD_IRQHandler+0x4b4>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8004bee:	fa5f fa85 	uxtb.w	sl, r5
 8004bf2:	4651      	mov	r1, sl
 8004bf4:	6820      	ldr	r0, [r4, #0]
 8004bf6:	f002 fe35 	bl	8007864 <USB_ReadDevInEPInterrupt>
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004bfa:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8004bfe:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004c00:	d020      	beq.n	8004c44 <HAL_PCD_IRQHandler+0x420>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c02:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
            fifoemptymsk = 0x1 << epnum;
 8004c06:	2101      	movs	r1, #1
 8004c08:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c0a:	ea23 0301 	bic.w	r3, r3, r1
 8004c0e:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004c12:	2301      	movs	r3, #1
 8004c14:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1)
 8004c18:	6923      	ldr	r3, [r4, #16]
 8004c1a:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8004c1c:	bf01      	itttt	eq
 8004c1e:	6cb3      	ldreq	r3, [r6, #72]	; 0x48
 8004c20:	6c72      	ldreq	r2, [r6, #68]	; 0x44
 8004c22:	189b      	addeq	r3, r3, r2
 8004c24:	64b3      	streq	r3, [r6, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8004c26:	4651      	mov	r1, sl
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f7fe fb70 	bl	800330e <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1)
 8004c2e:	6921      	ldr	r1, [r4, #16]
 8004c30:	2901      	cmp	r1, #1
 8004c32:	d107      	bne.n	8004c44 <HAL_PCD_IRQHandler+0x420>
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 8004c34:	b935      	cbnz	r5, 8004c44 <HAL_PCD_IRQHandler+0x420>
 8004c36:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004c38:	b923      	cbnz	r3, 8004c44 <HAL_PCD_IRQHandler+0x420>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8004c3a:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8004c3e:	6820      	ldr	r0, [r4, #0]
 8004c40:	f002 fe3f 	bl	80078c2 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004c44:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004c48:	bf1c      	itt	ne
 8004c4a:	2308      	movne	r3, #8
 8004c4c:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004c50:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004c54:	bf1c      	itt	ne
 8004c56:	2310      	movne	r3, #16
 8004c58:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004c5c:	f018 0f40 	tst.w	r8, #64	; 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004c60:	bf1c      	itt	ne
 8004c62:	2340      	movne	r3, #64	; 0x40
 8004c64:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004c68:	f018 0f02 	tst.w	r8, #2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004c6c:	bf1c      	itt	ne
 8004c6e:	2302      	movne	r3, #2
 8004c70:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c74:	f018 0f80 	tst.w	r8, #128	; 0x80
 8004c78:	d02e      	beq.n	8004cd8 <HAL_PCD_IRQHandler+0x4b4>
  * @param  epnum: endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	9303      	str	r3, [sp, #12]
  int32_t len = 0U;
  uint32_t len32b = 0;
  uint32_t fifoemptymsk = 0;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8004c7e:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8004c80:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8004c82:	eba3 0802 	sub.w	r8, r3, r2
 8004c86:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8004c88:	4598      	cmp	r8, r3
 8004c8a:	bf28      	it	cs
 8004c8c:	4698      	movcs	r8, r3
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3) / 4;
 8004c8e:	f108 0303 	add.w	r3, r8, #3
 8004c92:	2204      	movs	r2, #4
 8004c94:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c98:	9304      	str	r3, [sp, #16]
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004c9a:	9b03      	ldr	r3, [sp, #12]
 8004c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8004ca4:	9305      	str	r3, [sp, #20]
 8004ca6:	9b05      	ldr	r3, [sp, #20]
 8004ca8:	9a04      	ldr	r2, [sp, #16]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d904      	bls.n	8004cbc <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 8004cb2:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8004cb4:	6d33      	ldr	r3, [r6, #80]	; 0x50
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d900      	bls.n	8004cbc <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 8004cba:	b9a3      	cbnz	r3, 8004ce6 <HAL_PCD_IRQHandler+0x4c2>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0)
 8004cbc:	f1b8 0f00 	cmp.w	r8, #0
 8004cc0:	dc0a      	bgt.n	8004cd8 <HAL_PCD_IRQHandler+0x4b4>
  {
    fifoemptymsk = 0x1 << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cc2:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = 0x1 << epnum;
 8004cc4:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cc6:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 8004cca:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1 << epnum;
 8004cce:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cd0:	ea23 0302 	bic.w	r3, r3, r2
 8004cd4:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        epnum++;
 8004cd8:	3501      	adds	r5, #1
        ep_intr >>= 1;
 8004cda:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8004cde:	361c      	adds	r6, #28
 8004ce0:	f109 0920 	add.w	r9, r9, #32
 8004ce4:	e5db      	b.n	800489e <HAL_PCD_IRQHandler+0x7a>
    len = ep->xfer_len - ep->xfer_count;
 8004ce6:	eba3 0802 	sub.w	r8, r3, r2
 8004cea:	6c73      	ldr	r3, [r6, #68]	; 0x44
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8004cec:	9803      	ldr	r0, [sp, #12]
 8004cee:	4598      	cmp	r8, r3
 8004cf0:	bf28      	it	cs
 8004cf2:	4698      	movcs	r8, r3
    len32b = (len + 3) / 4;
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	f108 0303 	add.w	r3, r8, #3
 8004cfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cfe:	9304      	str	r3, [sp, #16]
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8004d00:	7c23      	ldrb	r3, [r4, #16]
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	4652      	mov	r2, sl
 8004d06:	fa1f f388 	uxth.w	r3, r8
 8004d0a:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8004d0c:	f002 fcea 	bl	80076e4 <USB_WritePacket>
    ep->xfer_buff  += len;
 8004d10:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8004d12:	4443      	add	r3, r8
 8004d14:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 8004d16:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8004d18:	4443      	add	r3, r8
 8004d1a:	6573      	str	r3, [r6, #84]	; 0x54
 8004d1c:	e7c3      	b.n	8004ca6 <HAL_PCD_IRQHandler+0x482>
        HAL_PCD_ResumeCallback(hpcd);
 8004d1e:	4620      	mov	r0, r4
 8004d20:	f7fe fb12 	bl	8003348 <HAL_PCD_ResumeCallback>
 8004d24:	e5d5      	b.n	80048d2 <HAL_PCD_IRQHandler+0xae>
        HAL_PCD_SuspendCallback(hpcd);
 8004d26:	4620      	mov	r0, r4
 8004d28:	f7fe fb0a 	bl	8003340 <HAL_PCD_SuspendCallback>
 8004d2c:	e601      	b.n	8004932 <HAL_PCD_IRQHandler+0x10e>
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004d2e:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(index)->DIEPINT = 0xFF;
 8004d30:	609a      	str	r2, [r3, #8]
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004d32:	3001      	adds	r0, #1
        USBx_OUTEP(index)->DOEPINT = 0xFF;
 8004d34:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004d38:	9002      	str	r0, [sp, #8]
 8004d3a:	3320      	adds	r3, #32
 8004d3c:	e60c      	b.n	8004958 <HAL_PCD_IRQHandler+0x134>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8004d3e:	6973      	ldr	r3, [r6, #20]
 8004d40:	f043 030b 	orr.w	r3, r3, #11
 8004d44:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8004d46:	6933      	ldr	r3, [r6, #16]
 8004d48:	f043 030b 	orr.w	r3, r3, #11
 8004d4c:	6133      	str	r3, [r6, #16]
 8004d4e:	e61c      	b.n	800498a <HAL_PCD_IRQHandler+0x166>
      else if((hclk >= 15000000)&&(hclk < 16000000))
 8004d50:	4a2f      	ldr	r2, [pc, #188]	; (8004e10 <HAL_PCD_IRQHandler+0x5ec>)
 8004d52:	4930      	ldr	r1, [pc, #192]	; (8004e14 <HAL_PCD_IRQHandler+0x5f0>)
 8004d54:	4402      	add	r2, r0
 8004d56:	428a      	cmp	r2, r1
 8004d58:	d803      	bhi.n	8004d62 <HAL_PCD_IRQHandler+0x53e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8004d60:	e641      	b.n	80049e6 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 16000000)&&(hclk < 17200000))
 8004d62:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8004d66:	492c      	ldr	r1, [pc, #176]	; (8004e18 <HAL_PCD_IRQHandler+0x5f4>)
 8004d68:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8004d6c:	428a      	cmp	r2, r1
 8004d6e:	d803      	bhi.n	8004d78 <HAL_PCD_IRQHandler+0x554>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8004d76:	e636      	b.n	80049e6 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 17200000)&&(hclk < 18500000))
 8004d78:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8004d7c:	4927      	ldr	r1, [pc, #156]	; (8004e1c <HAL_PCD_IRQHandler+0x5f8>)
 8004d7e:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8004d82:	428a      	cmp	r2, r1
 8004d84:	d803      	bhi.n	8004d8e <HAL_PCD_IRQHandler+0x56a>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004d8c:	e62b      	b.n	80049e6 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 18500000)&&(hclk < 20000000))
 8004d8e:	4a24      	ldr	r2, [pc, #144]	; (8004e20 <HAL_PCD_IRQHandler+0x5fc>)
 8004d90:	4924      	ldr	r1, [pc, #144]	; (8004e24 <HAL_PCD_IRQHandler+0x600>)
 8004d92:	4402      	add	r2, r0
 8004d94:	428a      	cmp	r2, r1
 8004d96:	d803      	bhi.n	8004da0 <HAL_PCD_IRQHandler+0x57c>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8004d9e:	e622      	b.n	80049e6 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 20000000)&&(hclk < 21800000))
 8004da0:	4a21      	ldr	r2, [pc, #132]	; (8004e28 <HAL_PCD_IRQHandler+0x604>)
 8004da2:	4922      	ldr	r1, [pc, #136]	; (8004e2c <HAL_PCD_IRQHandler+0x608>)
 8004da4:	4402      	add	r2, r0
 8004da6:	428a      	cmp	r2, r1
 8004da8:	d803      	bhi.n	8004db2 <HAL_PCD_IRQHandler+0x58e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8004db0:	e619      	b.n	80049e6 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 21800000)&&(hclk < 24000000))
 8004db2:	4a1f      	ldr	r2, [pc, #124]	; (8004e30 <HAL_PCD_IRQHandler+0x60c>)
 8004db4:	491f      	ldr	r1, [pc, #124]	; (8004e34 <HAL_PCD_IRQHandler+0x610>)
 8004db6:	4402      	add	r2, r0
 8004db8:	428a      	cmp	r2, r1
 8004dba:	d803      	bhi.n	8004dc4 <HAL_PCD_IRQHandler+0x5a0>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8004dc2:	e610      	b.n	80049e6 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 24000000)&&(hclk < 27700000))
 8004dc4:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8004dc8:	491b      	ldr	r1, [pc, #108]	; (8004e38 <HAL_PCD_IRQHandler+0x614>)
 8004dca:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8004dce:	428a      	cmp	r2, r1
 8004dd0:	d803      	bhi.n	8004dda <HAL_PCD_IRQHandler+0x5b6>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dd8:	e605      	b.n	80049e6 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 27700000)&&(hclk < 32000000))
 8004dda:	4a18      	ldr	r2, [pc, #96]	; (8004e3c <HAL_PCD_IRQHandler+0x618>)
 8004ddc:	4918      	ldr	r1, [pc, #96]	; (8004e40 <HAL_PCD_IRQHandler+0x61c>)
 8004dde:	4402      	add	r2, r0
 8004de0:	428a      	cmp	r2, r1
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	bf94      	ite	ls
 8004de6:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8004dea:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8004dee:	e5fa      	b.n	80049e6 <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004df0:	2b06      	cmp	r3, #6
 8004df2:	f47f ae2d 	bne.w	8004a50 <HAL_PCD_IRQHandler+0x22c>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8004df6:	2208      	movs	r2, #8
 8004df8:	f504 7162 	add.w	r1, r4, #904	; 0x388
 8004dfc:	4638      	mov	r0, r7
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dfe:	f04f 081c 	mov.w	r8, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8004e02:	f002 fc80 	bl	8007706 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e06:	fb08 4809 	mla	r8, r8, r9, r4
 8004e0a:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8004e0e:	e61a      	b.n	8004a46 <HAL_PCD_IRQHandler+0x222>
 8004e10:	ff1b1e40 	.word	0xff1b1e40
 8004e14:	000f423f 	.word	0x000f423f
 8004e18:	00124f7f 	.word	0x00124f7f
 8004e1c:	0013d61f 	.word	0x0013d61f
 8004e20:	fee5b660 	.word	0xfee5b660
 8004e24:	0016e35f 	.word	0x0016e35f
 8004e28:	feced300 	.word	0xfeced300
 8004e2c:	001b773f 	.word	0x001b773f
 8004e30:	feb35bc0 	.word	0xfeb35bc0
 8004e34:	002191bf 	.word	0x002191bf
 8004e38:	0038751f 	.word	0x0038751f
 8004e3c:	fe5954e0 	.word	0xfe5954e0
 8004e40:	00419cdf 	.word	0x00419cdf

08004e44 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8004e44:	f890 2384 	ldrb.w	r2, [r0, #900]	; 0x384
 8004e48:	2a01      	cmp	r2, #1
{
 8004e4a:	b510      	push	{r4, lr}
 8004e4c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8004e4e:	d00b      	beq.n	8004e68 <HAL_PCD_SetAddress+0x24>
 8004e50:	2201      	movs	r2, #1
 8004e52:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  hpcd->USB_Address = address;
 8004e56:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  USB_SetDevAddress(hpcd->Instance, address);
 8004e5a:	6800      	ldr	r0, [r0, #0]
 8004e5c:	f002 fcbc 	bl	80077d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8004e60:	2000      	movs	r0, #0
 8004e62:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8004e66:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8004e68:	2002      	movs	r0, #2
}
 8004e6a:	bd10      	pop	{r4, pc}

08004e6c <HAL_PCD_EP_Open>:
{
 8004e6c:	b570      	push	{r4, r5, r6, lr}
 8004e6e:	4604      	mov	r4, r0
  if ((ep_addr & 0x80) == 0x80)
 8004e70:	b248      	sxtb	r0, r1
 8004e72:	2800      	cmp	r0, #0
 8004e74:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8004e78:	f04f 051c 	mov.w	r5, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004e7c:	bfb5      	itete	lt
 8004e7e:	fb05 4106 	mlalt	r1, r5, r6, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004e82:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004e86:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004e88:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 8004e8c:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7F;
 8004e8e:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8004e90:	7048      	strb	r0, [r1, #1]
  ep->type = ep_type;
 8004e92:	70cb      	strb	r3, [r1, #3]
  __HAL_LOCK(hpcd);
 8004e94:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->maxpacket = ep_mps;
 8004e98:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd);
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d009      	beq.n	8004eb2 <HAL_PCD_EP_Open+0x46>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8004ea4:	6820      	ldr	r0, [r4, #0]
 8004ea6:	f002 fa94 	bl	80073d2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004eaa:	2000      	movs	r0, #0
 8004eac:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return ret;
 8004eb0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8004eb2:	2002      	movs	r0, #2
}
 8004eb4:	bd70      	pop	{r4, r5, r6, pc}

08004eb6 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 8004eb6:	b24b      	sxtb	r3, r1
 8004eb8:	2b00      	cmp	r3, #0
{  
 8004eba:	b510      	push	{r4, lr}
 8004ebc:	f04f 021c 	mov.w	r2, #28
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004ec6:	bfb5      	itete	lt
 8004ec8:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004ecc:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004ed0:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004ed2:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 8004ed6:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8004ed8:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8004eda:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8004edc:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d009      	beq.n	8004ef8 <HAL_PCD_EP_Close+0x42>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8004eea:	6820      	ldr	r0, [r4, #0]
 8004eec:	f002 fab0 	bl	8007450 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8004ef6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8004ef8:	2002      	movs	r0, #2
}
 8004efa:	bd10      	pop	{r4, pc}

08004efc <HAL_PCD_EP_Receive>:
{
 8004efc:	b570      	push	{r4, r5, r6, lr}
 8004efe:	4604      	mov	r4, r0
 8004f00:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 8004f04:	201c      	movs	r0, #28
 8004f06:	fb00 4506 	mla	r5, r0, r6, r4
  ep->xfer_len = len;
 8004f0a:	f8c5 31f4 	str.w	r3, [r5, #500]	; 0x1f4
  ep->xfer_count = 0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f8c5 31f8 	str.w	r3, [r5, #504]	; 0x1f8
  ep->is_in = 0;
 8004f14:	f885 31e1 	strb.w	r3, [r5, #481]	; 0x1e1
  __HAL_LOCK(hpcd);
 8004f18:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->xfer_buff = pBuf;  
 8004f1c:	f8c5 21ec 	str.w	r2, [r5, #492]	; 0x1ec
  __HAL_LOCK(hpcd);
 8004f20:	2b01      	cmp	r3, #1
  ep->num = ep_addr & 0x7F;
 8004f22:	f885 61e0 	strb.w	r6, [r5, #480]	; 0x1e0
  __HAL_LOCK(hpcd);
 8004f26:	d011      	beq.n	8004f4c <HAL_PCD_EP_Receive+0x50>
 8004f28:	6922      	ldr	r2, [r4, #16]
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004f2a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004f2c:	2301      	movs	r3, #1
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004f2e:	f505 71f0 	add.w	r1, r5, #480	; 0x1e0
  __HAL_LOCK(hpcd);
 8004f32:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004f36:	b2d2      	uxtb	r2, r2
  if ((ep_addr & 0x7F) == 0 )
 8004f38:	b92e      	cbnz	r6, 8004f46 <HAL_PCD_EP_Receive+0x4a>
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004f3a:	f002 fb6f 	bl	800761c <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 8004f3e:	2000      	movs	r0, #0
 8004f40:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8004f44:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004f46:	f002 fab1 	bl	80074ac <USB_EPStartXfer>
 8004f4a:	e7f8      	b.n	8004f3e <HAL_PCD_EP_Receive+0x42>
  __HAL_LOCK(hpcd);
 8004f4c:	2002      	movs	r0, #2
}
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}

08004f50 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8004f50:	231c      	movs	r3, #28
 8004f52:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004f56:	fb03 0101 	mla	r1, r3, r1, r0
}
 8004f5a:	f8b1 01f8 	ldrh.w	r0, [r1, #504]	; 0x1f8
 8004f5e:	4770      	bx	lr

08004f60 <HAL_PCD_EP_Transmit>:
{
 8004f60:	b570      	push	{r4, r5, r6, lr}
 8004f62:	4604      	mov	r4, r0
 8004f64:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 8004f68:	201c      	movs	r0, #28
 8004f6a:	fb00 4506 	mla	r5, r0, r6, r4
 8004f6e:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 8004f70:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_LOCK(hpcd);
 8004f72:	f894 2384 	ldrb.w	r2, [r4, #900]	; 0x384
  ep->num = ep_addr & 0x7F;
 8004f76:	f885 603c 	strb.w	r6, [r5, #60]	; 0x3c
  ep->xfer_count = 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1;
 8004f7e:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8004f80:	429a      	cmp	r2, r3
  ep->is_in = 1;
 8004f82:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_LOCK(hpcd);
 8004f86:	d010      	beq.n	8004faa <HAL_PCD_EP_Transmit+0x4a>
 8004f88:	6922      	ldr	r2, [r4, #16]
 8004f8a:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004f8e:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	6820      	ldr	r0, [r4, #0]
  if ((ep_addr & 0x7F) == 0 )
 8004f96:	b92e      	cbnz	r6, 8004fa4 <HAL_PCD_EP_Transmit+0x44>
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 8004f98:	f002 fb40 	bl	800761c <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8004fa2:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep,  hpcd->Init.dma_enable);
 8004fa4:	f002 fa82 	bl	80074ac <USB_EPStartXfer>
 8004fa8:	e7f8      	b.n	8004f9c <HAL_PCD_EP_Transmit+0x3c>
  __HAL_LOCK(hpcd);
 8004faa:	2002      	movs	r0, #2
}
 8004fac:	bd70      	pop	{r4, r5, r6, pc}

08004fae <HAL_PCD_EP_SetStall>:
{
 8004fae:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8004fb0:	b24b      	sxtb	r3, r1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004fb8:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004fbc:	bfb5      	itete	lt
 8004fbe:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8004fc2:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004fc6:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 8004fc8:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_stall = 1;
 8004fcc:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8004fce:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8004fd0:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1;
 8004fd2:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8004fd4:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8004fd6:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8004fd8:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8004fdc:	4293      	cmp	r3, r2
{
 8004fde:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004fe0:	d00f      	beq.n	8005002 <HAL_PCD_EP_SetStall+0x54>
 8004fe2:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  USB_EPSetStall(hpcd->Instance , ep);
 8004fe6:	6800      	ldr	r0, [r0, #0]
 8004fe8:	f002 fb9d 	bl	8007726 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8004fec:	b92d      	cbnz	r5, 8004ffa <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance,  hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004fee:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8004ff2:	7c21      	ldrb	r1, [r4, #16]
 8004ff4:	6820      	ldr	r0, [r4, #0]
 8004ff6:	f002 fc64 	bl	80078c2 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8005000:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8005002:	2002      	movs	r0, #2
}
 8005004:	bd38      	pop	{r3, r4, r5, pc}

08005006 <HAL_PCD_EP_ClrStall>:
{
 8005006:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8005008:	b24b      	sxtb	r3, r1
 800500a:	2b00      	cmp	r3, #0
{
 800500c:	4605      	mov	r5, r0
 800500e:	f04f 021c 	mov.w	r2, #28
 8005012:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8005016:	bfb5      	itete	lt
 8005018:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 800501c:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8005020:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 8005022:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8005026:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 8005028:	2400      	movs	r4, #0
 800502a:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 800502c:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800502e:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8005030:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
 8005034:	2b01      	cmp	r3, #1
 8005036:	d009      	beq.n	800504c <HAL_PCD_EP_ClrStall+0x46>
 8005038:	2301      	movs	r3, #1
 800503a:	f885 3384 	strb.w	r3, [r5, #900]	; 0x384
  USB_EPClearStall(hpcd->Instance , ep);
 800503e:	6828      	ldr	r0, [r5, #0]
 8005040:	f002 fb90 	bl	8007764 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8005044:	f885 4384 	strb.w	r4, [r5, #900]	; 0x384
  return HAL_OK;
 8005048:	4620      	mov	r0, r4
 800504a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 800504c:	2002      	movs	r0, #2
}
 800504e:	bd38      	pop	{r3, r4, r5, pc}

08005050 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd); 
 8005050:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8005054:	2b01      	cmp	r3, #1
{
 8005056:	b510      	push	{r4, lr}
 8005058:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 800505a:	d011      	beq.n	8005080 <HAL_PCD_EP_Flush+0x30>
 800505c:	2301      	movs	r3, #1
 800505e:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  if ((ep_addr & 0x80) == 0x80)
 8005062:	060b      	lsls	r3, r1, #24
 8005064:	d508      	bpl.n	8005078 <HAL_PCD_EP_Flush+0x28>
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 8005066:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800506a:	6800      	ldr	r0, [r0, #0]
 800506c:	f002 f988 	bl	8007380 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd); 
 8005070:	2000      	movs	r0, #0
 8005072:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8005076:	bd10      	pop	{r4, pc}
    USB_FlushRxFifo(hpcd->Instance);
 8005078:	6800      	ldr	r0, [r0, #0]
 800507a:	f002 f993 	bl	80073a4 <USB_FlushRxFifo>
 800507e:	e7f7      	b.n	8005070 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd); 
 8005080:	2002      	movs	r0, #2
}
 8005082:	bd10      	pop	{r4, pc}

08005084 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005084:	6800      	ldr	r0, [r0, #0]
{
 8005086:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005088:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 800508a:	b921      	cbnz	r1, 8005096 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (size << 16) | Tx_Offset;
 800508c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005090:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
  }
  
  return HAL_OK;
}
 8005092:	2000      	movs	r0, #0
 8005094:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005096:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (index = 0; index < (fifo - 1); index++)
 8005098:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800509a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (index = 0; index < (fifo - 1); index++)
 800509e:	1e4e      	subs	r6, r1, #1
 80050a0:	b2ec      	uxtb	r4, r5
 80050a2:	42b4      	cmp	r4, r6
 80050a4:	f105 0501 	add.w	r5, r5, #1
 80050a8:	db06      	blt.n	80050b8 <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
 80050aa:	313f      	adds	r1, #63	; 0x3f
 80050ac:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80050b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050b4:	6043      	str	r3, [r0, #4]
 80050b6:	e7ec      	b.n	8005092 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[index] >> 16);
 80050b8:	3440      	adds	r4, #64	; 0x40
 80050ba:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80050be:	6864      	ldr	r4, [r4, #4]
 80050c0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80050c4:	e7ec      	b.n	80050a0 <HAL_PCDEx_SetTxFiFo+0x1c>

080050c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80050c6:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 80050c8:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80050ca:	6259      	str	r1, [r3, #36]	; 0x24
}
 80050cc:	4770      	bx	lr

080050ce <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80050ce:	6802      	ldr	r2, [r0, #0]
{
 80050d0:	4603      	mov	r3, r0
  
  hpcd->lpm_active = ENABLE;
 80050d2:	2101      	movs	r1, #1
 80050d4:	f8c0 13c0 	str.w	r1, [r0, #960]	; 0x3c0
  hpcd->LPM_State = LPM_L0;
 80050d8:	2000      	movs	r0, #0
 80050da:	f883 03b8 	strb.w	r0, [r3, #952]	; 0x3b8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80050de:	6993      	ldr	r3, [r2, #24]
 80050e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050e4:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80050e6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80050e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ec:	f043 0303 	orr.w	r3, r3, #3
 80050f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;  
}
 80050f2:	4770      	bx	lr

080050f4 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80050f4:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = ENABLE; 
 80050f6:	2301      	movs	r3, #1
 80050f8:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 80050fc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80050fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005102:	6393      	str	r3, [r2, #56]	; 0x38
  
  return HAL_OK;  
}
 8005104:	2000      	movs	r0, #0
 8005106:	4770      	bx	lr

08005108 <HAL_PCDEx_LPM_Callback>:
 8005108:	4770      	bx	lr
	...

0800510c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 800510c:	4b02      	ldr	r3, [pc, #8]	; (8005118 <HAL_PWREx_GetVoltageRange+0xc>)
 800510e:	6818      	ldr	r0, [r3, #0]
}
 8005110:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40007000 	.word	0x40007000

0800511c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800511c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800511e:	4d1e      	ldr	r5, [pc, #120]	; (8005198 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8005120:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005122:	00da      	lsls	r2, r3, #3
{
 8005124:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005126:	d518      	bpl.n	800515a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005128:	f7ff fff0 	bl	800510c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800512c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005130:	d123      	bne.n	800517a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005132:	2c80      	cmp	r4, #128	; 0x80
 8005134:	d929      	bls.n	800518a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005136:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005138:	bf8c      	ite	hi
 800513a:	2002      	movhi	r0, #2
 800513c:	2001      	movls	r0, #1
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 800513e:	4a17      	ldr	r2, [pc, #92]	; (800519c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8005140:	6813      	ldr	r3, [r2, #0]
 8005142:	f023 0307 	bic.w	r3, r3, #7
 8005146:	4303      	orrs	r3, r0
 8005148:	6013      	str	r3, [r2, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800514a:	6813      	ldr	r3, [r2, #0]
 800514c:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8005150:	1a18      	subs	r0, r3, r0
 8005152:	bf18      	it	ne
 8005154:	2001      	movne	r0, #1
 8005156:	b003      	add	sp, #12
 8005158:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800515a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800515c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005160:	65ab      	str	r3, [r5, #88]	; 0x58
 8005162:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800516c:	f7ff ffce 	bl	800510c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8005170:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005172:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005176:	65ab      	str	r3, [r5, #88]	; 0x58
 8005178:	e7d8      	b.n	800512c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800517a:	2c80      	cmp	r4, #128	; 0x80
 800517c:	d807      	bhi.n	800518e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800517e:	d008      	beq.n	8005192 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7) 
 8005180:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8005184:	4258      	negs	r0, r3
 8005186:	4158      	adcs	r0, r3
 8005188:	e7d9      	b.n	800513e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800518a:	2000      	movs	r0, #0
 800518c:	e7d7      	b.n	800513e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800518e:	2003      	movs	r0, #3
 8005190:	e7d5      	b.n	800513e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8005192:	2002      	movs	r0, #2
 8005194:	e7d3      	b.n	800513e <RCC_SetFlashLatencyFromMSIRange+0x22>
 8005196:	bf00      	nop
 8005198:	40021000 	.word	0x40021000
 800519c:	40022000 	.word	0x40022000

080051a0 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80051a0:	4b46      	ldr	r3, [pc, #280]	; (80052bc <HAL_RCC_GetSysClockFreq+0x11c>)
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	f012 0f0c 	tst.w	r2, #12
{
 80051a8:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80051aa:	d009      	beq.n	80051c0 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80051b2:	2a0c      	cmp	r2, #12
 80051b4:	d148      	bne.n	8005248 <HAL_RCC_GetSysClockFreq+0xa8>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	f002 0203 	and.w	r2, r2, #3
 80051bc:	2a01      	cmp	r2, #1
 80051be:	d143      	bne.n	8005248 <HAL_RCC_GetSysClockFreq+0xa8>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	0712      	lsls	r2, r2, #28
 80051c4:	d437      	bmi.n	8005236 <HAL_RCC_GetSysClockFreq+0x96>
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 80051c6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80051ca:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80051ce:	fa91 f1a1 	rbit	r1, r1
 80051d2:	fab1 f181 	clz	r1, r1
 80051d6:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 80051da:	40ca      	lsrs	r2, r1
    msirange = MSIRangeTable[msirange];
 80051dc:	4938      	ldr	r1, [pc, #224]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x120>)
 80051de:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80051e2:	689a      	ldr	r2, [r3, #8]
      sysclockfreq = msirange;
 80051e4:	f012 0f0c 	tst.w	r2, #12
 80051e8:	bf0c      	ite	eq
 80051ea:	4620      	moveq	r0, r4
 80051ec:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	f002 020c 	and.w	r2, r2, #12
 80051f4:	2a0c      	cmp	r2, #12
 80051f6:	d154      	bne.n	80052a2 <HAL_RCC_GetSysClockFreq+0x102>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80051f8:	68da      	ldr	r2, [r3, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 80051fa:	68d8      	ldr	r0, [r3, #12]
 80051fc:	2170      	movs	r1, #112	; 0x70
 80051fe:	fa91 f1a1 	rbit	r1, r1
 8005202:	fab1 f181 	clz	r1, r1
 8005206:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800520a:	40c8      	lsrs	r0, r1
 800520c:	1c41      	adds	r1, r0, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800520e:	f002 0003 	and.w	r0, r2, #3
    switch (pllsource)
 8005212:	2802      	cmp	r0, #2
 8005214:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8005218:	d028      	beq.n	800526c <HAL_RCC_GetSysClockFreq+0xcc>
 800521a:	2803      	cmp	r0, #3
 800521c:	d042      	beq.n	80052a4 <HAL_RCC_GetSysClockFreq+0x104>
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 800521e:	68d8      	ldr	r0, [r3, #12]
 8005220:	fa92 f2a2 	rbit	r2, r2
 8005224:	fab2 f282 	clz	r2, r2
 8005228:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 800522c:	40d0      	lsrs	r0, r2
 800522e:	fbb4 f1f1 	udiv	r1, r4, r1
 8005232:	4348      	muls	r0, r1
      break;
 8005234:	e027      	b.n	8005286 <HAL_RCC_GetSysClockFreq+0xe6>
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	21f0      	movs	r1, #240	; 0xf0
 800523a:	fa91 f1a1 	rbit	r1, r1
 800523e:	fab1 f181 	clz	r1, r1
 8005242:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005246:	e7c8      	b.n	80051da <HAL_RCC_GetSysClockFreq+0x3a>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	f002 020c 	and.w	r2, r2, #12
 800524e:	2a04      	cmp	r2, #4
 8005250:	d007      	beq.n	8005262 <HAL_RCC_GetSysClockFreq+0xc2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	f002 020c 	and.w	r2, r2, #12
 8005258:	2a08      	cmp	r2, #8
 800525a:	d104      	bne.n	8005266 <HAL_RCC_GetSysClockFreq+0xc6>
    sysclockfreq = HSE_VALUE;
 800525c:	4819      	ldr	r0, [pc, #100]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x124>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800525e:	2400      	movs	r4, #0
 8005260:	e7c5      	b.n	80051ee <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8005262:	4819      	ldr	r0, [pc, #100]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x128>)
 8005264:	e7fb      	b.n	800525e <HAL_RCC_GetSysClockFreq+0xbe>
  uint32_t sysclockfreq = 0U;
 8005266:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8005268:	4604      	mov	r4, r0
 800526a:	e7c0      	b.n	80051ee <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 800526c:	68d8      	ldr	r0, [r3, #12]
 800526e:	fa92 f2a2 	rbit	r2, r2
 8005272:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 8005276:	fab2 f282 	clz	r2, r2
 800527a:	fa20 f202 	lsr.w	r2, r0, r2
 800527e:	4812      	ldr	r0, [pc, #72]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x128>)
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8005280:	fbb0 f0f1 	udiv	r0, r0, r1
 8005284:	4350      	muls	r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800528c:	fa92 f2a2 	rbit	r2, r2
 8005290:	fab2 f282 	clz	r2, r2
 8005294:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005298:	40d3      	lsrs	r3, r2
 800529a:	3301      	adds	r3, #1
 800529c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800529e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80052a2:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80052a4:	68d8      	ldr	r0, [r3, #12]
 80052a6:	fa92 f2a2 	rbit	r2, r2
 80052aa:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 80052ae:	fab2 f282 	clz	r2, r2
 80052b2:	fa20 f202 	lsr.w	r2, r0, r2
 80052b6:	4803      	ldr	r0, [pc, #12]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x124>)
 80052b8:	e7e2      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0xe0>
 80052ba:	bf00      	nop
 80052bc:	40021000 	.word	0x40021000
 80052c0:	0800b574 	.word	0x0800b574
 80052c4:	007a1200 	.word	0x007a1200
 80052c8:	00f42400 	.word	0x00f42400

080052cc <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052cc:	6803      	ldr	r3, [r0, #0]
{
 80052ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80052d2:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052d4:	06d8      	lsls	r0, r3, #27
 80052d6:	d541      	bpl.n	800535c <HAL_RCC_OscConfig+0x90>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80052d8:	4ca5      	ldr	r4, [pc, #660]	; (8005570 <HAL_RCC_OscConfig+0x2a4>)
 80052da:	68a3      	ldr	r3, [r4, #8]
 80052dc:	f013 0f0c 	tst.w	r3, #12
 80052e0:	d166      	bne.n	80053b0 <HAL_RCC_OscConfig+0xe4>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	0799      	lsls	r1, r3, #30
 80052e6:	d505      	bpl.n	80052f4 <HAL_RCC_OscConfig+0x28>
 80052e8:	69ab      	ldr	r3, [r5, #24]
 80052ea:	b91b      	cbnz	r3, 80052f4 <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 80052ec:	2001      	movs	r0, #1
}
 80052ee:	b002      	add	sp, #8
 80052f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	6a28      	ldr	r0, [r5, #32]
 80052f8:	071a      	lsls	r2, r3, #28
 80052fa:	bf56      	itet	pl
 80052fc:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8005300:	6823      	ldrmi	r3, [r4, #0]
 8005302:	091b      	lsrpl	r3, r3, #4
 8005304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005308:	4283      	cmp	r3, r0
 800530a:	d23c      	bcs.n	8005386 <HAL_RCC_OscConfig+0xba>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800530c:	f7ff ff06 	bl	800511c <RCC_SetFlashLatencyFromMSIRange>
 8005310:	2800      	cmp	r0, #0
 8005312:	d1eb      	bne.n	80052ec <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005314:	6823      	ldr	r3, [r4, #0]
 8005316:	f043 0308 	orr.w	r3, r3, #8
 800531a:	6023      	str	r3, [r4, #0]
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	6a2a      	ldr	r2, [r5, #32]
 8005320:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005324:	4313      	orrs	r3, r2
 8005326:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005328:	6863      	ldr	r3, [r4, #4]
 800532a:	69ea      	ldr	r2, [r5, #28]
 800532c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005330:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005334:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8005336:	f7ff ff33 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 800533a:	68a3      	ldr	r3, [r4, #8]
 800533c:	22f0      	movs	r2, #240	; 0xf0
 800533e:	fa92 f2a2 	rbit	r2, r2
 8005342:	fab2 f282 	clz	r2, r2
 8005346:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800534a:	40d3      	lsrs	r3, r2
 800534c:	4a89      	ldr	r2, [pc, #548]	; (8005574 <HAL_RCC_OscConfig+0x2a8>)
 800534e:	5cd3      	ldrb	r3, [r2, r3]
 8005350:	40d8      	lsrs	r0, r3
 8005352:	4b89      	ldr	r3, [pc, #548]	; (8005578 <HAL_RCC_OscConfig+0x2ac>)
 8005354:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8005356:	2000      	movs	r0, #0
 8005358:	f7fe feaa 	bl	80040b0 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	07de      	lsls	r6, r3, #31
 8005360:	d45b      	bmi.n	800541a <HAL_RCC_OscConfig+0x14e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005362:	682b      	ldr	r3, [r5, #0]
 8005364:	079c      	lsls	r4, r3, #30
 8005366:	f100 80a3 	bmi.w	80054b0 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800536a:	682b      	ldr	r3, [r5, #0]
 800536c:	0719      	lsls	r1, r3, #28
 800536e:	f100 80e7 	bmi.w	8005540 <HAL_RCC_OscConfig+0x274>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005372:	682b      	ldr	r3, [r5, #0]
 8005374:	075a      	lsls	r2, r3, #29
 8005376:	f100 8115 	bmi.w	80055a4 <HAL_RCC_OscConfig+0x2d8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800537a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800537c:	2a00      	cmp	r2, #0
 800537e:	f040 817c 	bne.w	800567a <HAL_RCC_OscConfig+0x3ae>
  return HAL_OK;
 8005382:	2000      	movs	r0, #0
 8005384:	e7b3      	b.n	80052ee <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	f043 0308 	orr.w	r3, r3, #8
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005394:	4303      	orrs	r3, r0
 8005396:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005398:	6863      	ldr	r3, [r4, #4]
 800539a:	69ea      	ldr	r2, [r5, #28]
 800539c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80053a4:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053a6:	f7ff feb9 	bl	800511c <RCC_SetFlashLatencyFromMSIRange>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	d0c3      	beq.n	8005336 <HAL_RCC_OscConfig+0x6a>
 80053ae:	e79d      	b.n	80052ec <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053b0:	69ab      	ldr	r3, [r5, #24]
 80053b2:	b313      	cbz	r3, 80053fa <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_ENABLE();
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	f043 0301 	orr.w	r3, r3, #1
 80053ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80053bc:	f7fe fea0 	bl	8004100 <HAL_GetTick>
 80053c0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	079b      	lsls	r3, r3, #30
 80053c6:	d511      	bpl.n	80053ec <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	f043 0308 	orr.w	r3, r3, #8
 80053ce:	6023      	str	r3, [r4, #0]
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	6a2a      	ldr	r2, [r5, #32]
 80053d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053d8:	4313      	orrs	r3, r2
 80053da:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053dc:	6863      	ldr	r3, [r4, #4]
 80053de:	69ea      	ldr	r2, [r5, #28]
 80053e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80053e8:	6063      	str	r3, [r4, #4]
 80053ea:	e7b7      	b.n	800535c <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053ec:	f7fe fe88 	bl	8004100 <HAL_GetTick>
 80053f0:	1b80      	subs	r0, r0, r6
 80053f2:	2802      	cmp	r0, #2
 80053f4:	d9e5      	bls.n	80053c2 <HAL_RCC_OscConfig+0xf6>
            return HAL_TIMEOUT;
 80053f6:	2003      	movs	r0, #3
 80053f8:	e779      	b.n	80052ee <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	f023 0301 	bic.w	r3, r3, #1
 8005400:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005402:	f7fe fe7d 	bl	8004100 <HAL_GetTick>
 8005406:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	079f      	lsls	r7, r3, #30
 800540c:	d5a6      	bpl.n	800535c <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800540e:	f7fe fe77 	bl	8004100 <HAL_GetTick>
 8005412:	1b80      	subs	r0, r0, r6
 8005414:	2802      	cmp	r0, #2
 8005416:	d9f7      	bls.n	8005408 <HAL_RCC_OscConfig+0x13c>
 8005418:	e7ed      	b.n	80053f6 <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 800541a:	4c55      	ldr	r4, [pc, #340]	; (8005570 <HAL_RCC_OscConfig+0x2a4>)
 800541c:	68a3      	ldr	r3, [r4, #8]
 800541e:	f003 030c 	and.w	r3, r3, #12
 8005422:	2b08      	cmp	r3, #8
 8005424:	d009      	beq.n	800543a <HAL_RCC_OscConfig+0x16e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005426:	68a3      	ldr	r3, [r4, #8]
 8005428:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 800542c:	2b0c      	cmp	r3, #12
 800542e:	d10b      	bne.n	8005448 <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005430:	68e3      	ldr	r3, [r4, #12]
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	2b03      	cmp	r3, #3
 8005438:	d106      	bne.n	8005448 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	0398      	lsls	r0, r3, #14
 800543e:	d590      	bpl.n	8005362 <HAL_RCC_OscConfig+0x96>
 8005440:	686b      	ldr	r3, [r5, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d18d      	bne.n	8005362 <HAL_RCC_OscConfig+0x96>
 8005446:	e751      	b.n	80052ec <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005448:	686b      	ldr	r3, [r5, #4]
 800544a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544e:	d110      	bne.n	8005472 <HAL_RCC_OscConfig+0x1a6>
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005456:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005458:	f7fe fe52 	bl	8004100 <HAL_GetTick>
 800545c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	0399      	lsls	r1, r3, #14
 8005462:	f53f af7e 	bmi.w	8005362 <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005466:	f7fe fe4b 	bl	8004100 <HAL_GetTick>
 800546a:	1b80      	subs	r0, r0, r6
 800546c:	2864      	cmp	r0, #100	; 0x64
 800546e:	d9f6      	bls.n	800545e <HAL_RCC_OscConfig+0x192>
 8005470:	e7c1      	b.n	80053f6 <HAL_RCC_OscConfig+0x12a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005472:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005476:	d104      	bne.n	8005482 <HAL_RCC_OscConfig+0x1b6>
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800547e:	6023      	str	r3, [r4, #0]
 8005480:	e7e6      	b.n	8005450 <HAL_RCC_OscConfig+0x184>
 8005482:	6822      	ldr	r2, [r4, #0]
 8005484:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005488:	6022      	str	r2, [r4, #0]
 800548a:	6822      	ldr	r2, [r4, #0]
 800548c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005490:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1e0      	bne.n	8005458 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8005496:	f7fe fe33 	bl	8004100 <HAL_GetTick>
 800549a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	039a      	lsls	r2, r3, #14
 80054a0:	f57f af5f 	bpl.w	8005362 <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054a4:	f7fe fe2c 	bl	8004100 <HAL_GetTick>
 80054a8:	1b80      	subs	r0, r0, r6
 80054aa:	2864      	cmp	r0, #100	; 0x64
 80054ac:	d9f6      	bls.n	800549c <HAL_RCC_OscConfig+0x1d0>
 80054ae:	e7a2      	b.n	80053f6 <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80054b0:	4c2f      	ldr	r4, [pc, #188]	; (8005570 <HAL_RCC_OscConfig+0x2a4>)
 80054b2:	68a3      	ldr	r3, [r4, #8]
 80054b4:	f003 030c 	and.w	r3, r3, #12
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d009      	beq.n	80054d0 <HAL_RCC_OscConfig+0x204>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80054bc:	68a3      	ldr	r3, [r4, #8]
 80054be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80054c2:	2b0c      	cmp	r3, #12
 80054c4:	d119      	bne.n	80054fa <HAL_RCC_OscConfig+0x22e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80054c6:	68e3      	ldr	r3, [r4, #12]
 80054c8:	f003 0303 	and.w	r3, r3, #3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d114      	bne.n	80054fa <HAL_RCC_OscConfig+0x22e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	055b      	lsls	r3, r3, #21
 80054d4:	d503      	bpl.n	80054de <HAL_RCC_OscConfig+0x212>
 80054d6:	68eb      	ldr	r3, [r5, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f43f af07 	beq.w	80052ec <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054de:	6861      	ldr	r1, [r4, #4]
 80054e0:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 80054e4:	fa93 f3a3 	rbit	r3, r3
 80054e8:	fab3 f283 	clz	r2, r3
 80054ec:	692b      	ldr	r3, [r5, #16]
 80054ee:	4093      	lsls	r3, r2
 80054f0:	f021 52f8 	bic.w	r2, r1, #520093696	; 0x1f000000
 80054f4:	4313      	orrs	r3, r2
 80054f6:	6063      	str	r3, [r4, #4]
 80054f8:	e737      	b.n	800536a <HAL_RCC_OscConfig+0x9e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054fa:	68eb      	ldr	r3, [r5, #12]
 80054fc:	b17b      	cbz	r3, 800551e <HAL_RCC_OscConfig+0x252>
        __HAL_RCC_HSI_ENABLE();
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005504:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005506:	f7fe fdfb 	bl	8004100 <HAL_GetTick>
 800550a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	055f      	lsls	r7, r3, #21
 8005510:	d4e5      	bmi.n	80054de <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005512:	f7fe fdf5 	bl	8004100 <HAL_GetTick>
 8005516:	1b80      	subs	r0, r0, r6
 8005518:	2802      	cmp	r0, #2
 800551a:	d9f7      	bls.n	800550c <HAL_RCC_OscConfig+0x240>
 800551c:	e76b      	b.n	80053f6 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_DISABLE();
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005524:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005526:	f7fe fdeb 	bl	8004100 <HAL_GetTick>
 800552a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	0558      	lsls	r0, r3, #21
 8005530:	f57f af1b 	bpl.w	800536a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005534:	f7fe fde4 	bl	8004100 <HAL_GetTick>
 8005538:	1b80      	subs	r0, r0, r6
 800553a:	2802      	cmp	r0, #2
 800553c:	d9f6      	bls.n	800552c <HAL_RCC_OscConfig+0x260>
 800553e:	e75a      	b.n	80053f6 <HAL_RCC_OscConfig+0x12a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005540:	696b      	ldr	r3, [r5, #20]
 8005542:	4c0b      	ldr	r4, [pc, #44]	; (8005570 <HAL_RCC_OscConfig+0x2a4>)
 8005544:	b1d3      	cbz	r3, 800557c <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_LSI_ENABLE();
 8005546:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800554a:	f043 0301 	orr.w	r3, r3, #1
 800554e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005552:	f7fe fdd5 	bl	8004100 <HAL_GetTick>
 8005556:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8005558:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800555c:	079b      	lsls	r3, r3, #30
 800555e:	f53f af08 	bmi.w	8005372 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005562:	f7fe fdcd 	bl	8004100 <HAL_GetTick>
 8005566:	1b80      	subs	r0, r0, r6
 8005568:	2802      	cmp	r0, #2
 800556a:	d9f5      	bls.n	8005558 <HAL_RCC_OscConfig+0x28c>
 800556c:	e743      	b.n	80053f6 <HAL_RCC_OscConfig+0x12a>
 800556e:	bf00      	nop
 8005570:	40021000 	.word	0x40021000
 8005574:	0800b55c 	.word	0x0800b55c
 8005578:	20000004 	.word	0x20000004
      __HAL_RCC_LSI_DISABLE();
 800557c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005580:	f023 0301 	bic.w	r3, r3, #1
 8005584:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005588:	f7fe fdba 	bl	8004100 <HAL_GetTick>
 800558c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800558e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005592:	079f      	lsls	r7, r3, #30
 8005594:	f57f aeed 	bpl.w	8005372 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005598:	f7fe fdb2 	bl	8004100 <HAL_GetTick>
 800559c:	1b80      	subs	r0, r0, r6
 800559e:	2802      	cmp	r0, #2
 80055a0:	d9f5      	bls.n	800558e <HAL_RCC_OscConfig+0x2c2>
 80055a2:	e728      	b.n	80053f6 <HAL_RCC_OscConfig+0x12a>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80055a4:	4c66      	ldr	r4, [pc, #408]	; (8005740 <HAL_RCC_OscConfig+0x474>)
 80055a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055a8:	00de      	lsls	r6, r3, #3
 80055aa:	d427      	bmi.n	80055fc <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b2:	65a3      	str	r3, [r4, #88]	; 0x58
 80055b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80055be:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055c0:	4e60      	ldr	r6, [pc, #384]	; (8005744 <HAL_RCC_OscConfig+0x478>)
 80055c2:	6833      	ldr	r3, [r6, #0]
 80055c4:	05d8      	lsls	r0, r3, #23
 80055c6:	d51b      	bpl.n	8005600 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055c8:	68ab      	ldr	r3, [r5, #8]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d129      	bne.n	8005622 <HAL_RCC_OscConfig+0x356>
 80055ce:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80055d2:	f043 0301 	orr.w	r3, r3, #1
 80055d6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80055da:	f7fe fd91 	bl	8004100 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055de:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80055e2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80055e4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80055e8:	079a      	lsls	r2, r3, #30
 80055ea:	d540      	bpl.n	800566e <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 80055ec:	2f00      	cmp	r7, #0
 80055ee:	f43f aec4 	beq.w	800537a <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_PWR_CLK_DISABLE();
 80055f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80055fa:	e6be      	b.n	800537a <HAL_RCC_OscConfig+0xae>
    FlagStatus       pwrclkchanged = RESET;
 80055fc:	2700      	movs	r7, #0
 80055fe:	e7df      	b.n	80055c0 <HAL_RCC_OscConfig+0x2f4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005600:	6833      	ldr	r3, [r6, #0]
 8005602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005606:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005608:	f7fe fd7a 	bl	8004100 <HAL_GetTick>
 800560c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800560e:	6833      	ldr	r3, [r6, #0]
 8005610:	05d9      	lsls	r1, r3, #23
 8005612:	d4d9      	bmi.n	80055c8 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005614:	f7fe fd74 	bl	8004100 <HAL_GetTick>
 8005618:	eba0 0008 	sub.w	r0, r0, r8
 800561c:	2802      	cmp	r0, #2
 800561e:	d9f6      	bls.n	800560e <HAL_RCC_OscConfig+0x342>
 8005620:	e6e9      	b.n	80053f6 <HAL_RCC_OscConfig+0x12a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005622:	2b05      	cmp	r3, #5
 8005624:	d106      	bne.n	8005634 <HAL_RCC_OscConfig+0x368>
 8005626:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800562a:	f043 0304 	orr.w	r3, r3, #4
 800562e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8005632:	e7cc      	b.n	80055ce <HAL_RCC_OscConfig+0x302>
 8005634:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8005640:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005644:	f022 0204 	bic.w	r2, r2, #4
 8005648:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1c4      	bne.n	80055da <HAL_RCC_OscConfig+0x30e>
      tickstart = HAL_GetTick();
 8005650:	f7fe fd56 	bl	8004100 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005654:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005658:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800565a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800565e:	079b      	lsls	r3, r3, #30
 8005660:	d5c4      	bpl.n	80055ec <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005662:	f7fe fd4d 	bl	8004100 <HAL_GetTick>
 8005666:	1b80      	subs	r0, r0, r6
 8005668:	4540      	cmp	r0, r8
 800566a:	d9f6      	bls.n	800565a <HAL_RCC_OscConfig+0x38e>
 800566c:	e6c3      	b.n	80053f6 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800566e:	f7fe fd47 	bl	8004100 <HAL_GetTick>
 8005672:	1b80      	subs	r0, r0, r6
 8005674:	4540      	cmp	r0, r8
 8005676:	d9b5      	bls.n	80055e4 <HAL_RCC_OscConfig+0x318>
 8005678:	e6bd      	b.n	80053f6 <HAL_RCC_OscConfig+0x12a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800567a:	4c31      	ldr	r4, [pc, #196]	; (8005740 <HAL_RCC_OscConfig+0x474>)
 800567c:	68a3      	ldr	r3, [r4, #8]
 800567e:	f003 030c 	and.w	r3, r3, #12
 8005682:	2b0c      	cmp	r3, #12
 8005684:	f43f ae32 	beq.w	80052ec <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8005688:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800568a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800568c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005690:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005692:	d137      	bne.n	8005704 <HAL_RCC_OscConfig+0x438>
        tickstart = HAL_GetTick();
 8005694:	f7fe fd34 	bl	8004100 <HAL_GetTick>
 8005698:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	019f      	lsls	r7, r3, #6
 800569e:	d42b      	bmi.n	80056f8 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056a0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80056a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80056a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80056a8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80056aa:	3a01      	subs	r2, #1
 80056ac:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80056b0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80056b2:	0912      	lsrs	r2, r2, #4
 80056b4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80056b8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80056ba:	0852      	lsrs	r2, r2, #1
 80056bc:	3a01      	subs	r2, #1
 80056be:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80056c2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80056c4:	0852      	lsrs	r2, r2, #1
 80056c6:	3a01      	subs	r2, #1
 80056c8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80056cc:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056d4:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056d6:	68e3      	ldr	r3, [r4, #12]
 80056d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056dc:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80056de:	f7fe fd0f 	bl	8004100 <HAL_GetTick>
 80056e2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	0198      	lsls	r0, r3, #6
 80056e8:	f53f ae4b 	bmi.w	8005382 <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ec:	f7fe fd08 	bl	8004100 <HAL_GetTick>
 80056f0:	1b40      	subs	r0, r0, r5
 80056f2:	2802      	cmp	r0, #2
 80056f4:	d9f6      	bls.n	80056e4 <HAL_RCC_OscConfig+0x418>
 80056f6:	e67e      	b.n	80053f6 <HAL_RCC_OscConfig+0x12a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f8:	f7fe fd02 	bl	8004100 <HAL_GetTick>
 80056fc:	1b80      	subs	r0, r0, r6
 80056fe:	2802      	cmp	r0, #2
 8005700:	d9cb      	bls.n	800569a <HAL_RCC_OscConfig+0x3ce>
 8005702:	e678      	b.n	80053f6 <HAL_RCC_OscConfig+0x12a>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	0119      	lsls	r1, r3, #4
 8005708:	d406      	bmi.n	8005718 <HAL_RCC_OscConfig+0x44c>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800570a:	6823      	ldr	r3, [r4, #0]
           && 
 800570c:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800570e:	bf5e      	ittt	pl
 8005710:	68e3      	ldrpl	r3, [r4, #12]
 8005712:	f023 0303 	bicpl.w	r3, r3, #3
 8005716:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005718:	68e3      	ldr	r3, [r4, #12]
 800571a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800571e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005722:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8005724:	f7fe fcec 	bl	8004100 <HAL_GetTick>
 8005728:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	019b      	lsls	r3, r3, #6
 800572e:	f57f ae28 	bpl.w	8005382 <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005732:	f7fe fce5 	bl	8004100 <HAL_GetTick>
 8005736:	1b40      	subs	r0, r0, r5
 8005738:	2802      	cmp	r0, #2
 800573a:	d9f6      	bls.n	800572a <HAL_RCC_OscConfig+0x45e>
 800573c:	e65b      	b.n	80053f6 <HAL_RCC_OscConfig+0x12a>
 800573e:	bf00      	nop
 8005740:	40021000 	.word	0x40021000
 8005744:	40007000 	.word	0x40007000

08005748 <HAL_RCC_GetHCLKFreq>:
}
 8005748:	4b01      	ldr	r3, [pc, #4]	; (8005750 <HAL_RCC_GetHCLKFreq+0x8>)
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	20000004 	.word	0x20000004

08005754 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8005754:	4b08      	ldr	r3, [pc, #32]	; (8005778 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005756:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	fa92 f2a2 	rbit	r2, r2
 8005760:	fab2 f282 	clz	r2, r2
 8005764:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005768:	40d3      	lsrs	r3, r2
 800576a:	4a04      	ldr	r2, [pc, #16]	; (800577c <HAL_RCC_GetPCLK1Freq+0x28>)
 800576c:	5cd3      	ldrb	r3, [r2, r3]
 800576e:	4a04      	ldr	r2, [pc, #16]	; (8005780 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8005770:	6810      	ldr	r0, [r2, #0]
}
 8005772:	40d8      	lsrs	r0, r3
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40021000 	.word	0x40021000
 800577c:	0800b56c 	.word	0x0800b56c
 8005780:	20000004 	.word	0x20000004

08005784 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8005784:	4b08      	ldr	r3, [pc, #32]	; (80057a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005786:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	fa92 f2a2 	rbit	r2, r2
 8005790:	fab2 f282 	clz	r2, r2
 8005794:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005798:	40d3      	lsrs	r3, r2
 800579a:	4a04      	ldr	r2, [pc, #16]	; (80057ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800579c:	5cd3      	ldrb	r3, [r2, r3]
 800579e:	4a04      	ldr	r2, [pc, #16]	; (80057b0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80057a0:	6810      	ldr	r0, [r2, #0]
}
 80057a2:	40d8      	lsrs	r0, r3
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40021000 	.word	0x40021000
 80057ac:	0800b56c 	.word	0x0800b56c
 80057b0:	20000004 	.word	0x20000004

080057b4 <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80057b4:	4a02      	ldr	r2, [pc, #8]	; (80057c0 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80057b6:	6813      	ldr	r3, [r2, #0]
 80057b8:	f043 0304 	orr.w	r3, r3, #4
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	4770      	bx	lr
 80057c0:	40021000 	.word	0x40021000

080057c4 <SD_CmdResp2Error>:
  */
static HAL_SD_ErrorTypedef SD_CmdResp2Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 80057c4:	6803      	ldr	r3, [r0, #0]
 80057c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057c8:	f012 0f45 	tst.w	r2, #69	; 0x45
 80057cc:	d0fb      	beq.n	80057c6 <SD_CmdResp2Error+0x2>
  {
  }
    
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 80057ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057d0:	0752      	lsls	r2, r2, #29
 80057d2:	d503      	bpl.n	80057dc <SD_CmdResp2Error+0x18>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 80057d4:	2204      	movs	r2, #4
 80057d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 80057d8:	2003      	movs	r0, #3
 80057da:	4770      	bx	lr
  }
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 80057dc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80057de:	f010 0001 	ands.w	r0, r0, #1
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 80057e2:	bf15      	itete	ne
 80057e4:	2001      	movne	r0, #1
  {
    /* No error flag set */
  }  
  
  /* Clear all the static flags */
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057e6:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 80057ea:	6398      	strne	r0, [r3, #56]	; 0x38
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057ec:	639a      	streq	r2, [r3, #56]	; 0x38
  
  return errorstate;
}
 80057ee:	4770      	bx	lr

080057f0 <SD_CmdResp1Error>:
{
 80057f0:	b570      	push	{r4, r5, r6, lr}
 80057f2:	4605      	mov	r5, r0
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 80057f4:	6800      	ldr	r0, [r0, #0]
{
 80057f6:	460e      	mov	r6, r1
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 80057f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80057fa:	f013 0f45 	tst.w	r3, #69	; 0x45
 80057fe:	d0fb      	beq.n	80057f8 <SD_CmdResp1Error+0x8>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8005800:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005802:	075b      	lsls	r3, r3, #29
 8005804:	d503      	bpl.n	800580e <SD_CmdResp1Error+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8005806:	2304      	movs	r3, #4
 8005808:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 800580a:	2003      	movs	r0, #3
 800580c:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 800580e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005810:	f014 0401 	ands.w	r4, r4, #1
 8005814:	d003      	beq.n	800581e <SD_CmdResp1Error+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8005816:	2301      	movs	r3, #1
 8005818:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 800581a:	4618      	mov	r0, r3
 800581c:	bd70      	pop	{r4, r5, r6, pc}
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 800581e:	f001 fc94 	bl	800714a <SDMMC_GetCommandResponse>
 8005822:	42b0      	cmp	r0, r6
 8005824:	d001      	beq.n	800582a <SD_CmdResp1Error+0x3a>
    return errorstate;
 8005826:	2010      	movs	r0, #16
 8005828:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800582a:	6828      	ldr	r0, [r5, #0]
 800582c:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005830:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005832:	4621      	mov	r1, r4
 8005834:	f001 fc8c 	bl	8007150 <SDMMC_GetResponse>
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8005838:	4b27      	ldr	r3, [pc, #156]	; (80058d8 <SD_CmdResp1Error+0xe8>)
 800583a:	4003      	ands	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0ec      	beq.n	800581a <SD_CmdResp1Error+0x2a>
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 8005840:	2800      	cmp	r0, #0
 8005842:	db27      	blt.n	8005894 <SD_CmdResp1Error+0xa4>
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 8005844:	0045      	lsls	r5, r0, #1
 8005846:	d427      	bmi.n	8005898 <SD_CmdResp1Error+0xa8>
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 8005848:	0084      	lsls	r4, r0, #2
 800584a:	d427      	bmi.n	800589c <SD_CmdResp1Error+0xac>
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 800584c:	00c1      	lsls	r1, r0, #3
 800584e:	d427      	bmi.n	80058a0 <SD_CmdResp1Error+0xb0>
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 8005850:	0102      	lsls	r2, r0, #4
 8005852:	d427      	bmi.n	80058a4 <SD_CmdResp1Error+0xb4>
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 8005854:	0143      	lsls	r3, r0, #5
 8005856:	d427      	bmi.n	80058a8 <SD_CmdResp1Error+0xb8>
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 8005858:	01c6      	lsls	r6, r0, #7
 800585a:	d427      	bmi.n	80058ac <SD_CmdResp1Error+0xbc>
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 800585c:	0205      	lsls	r5, r0, #8
 800585e:	d427      	bmi.n	80058b0 <SD_CmdResp1Error+0xc0>
  if((response_r1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 8005860:	0244      	lsls	r4, r0, #9
 8005862:	d4e0      	bmi.n	8005826 <SD_CmdResp1Error+0x36>
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 8005864:	0281      	lsls	r1, r0, #10
 8005866:	d425      	bmi.n	80058b4 <SD_CmdResp1Error+0xc4>
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 8005868:	02c2      	lsls	r2, r0, #11
 800586a:	d425      	bmi.n	80058b8 <SD_CmdResp1Error+0xc8>
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 800586c:	0303      	lsls	r3, r0, #12
 800586e:	d425      	bmi.n	80058bc <SD_CmdResp1Error+0xcc>
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 8005870:	0346      	lsls	r6, r0, #13
 8005872:	d425      	bmi.n	80058c0 <SD_CmdResp1Error+0xd0>
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 8005874:	0385      	lsls	r5, r0, #14
 8005876:	d425      	bmi.n	80058c4 <SD_CmdResp1Error+0xd4>
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 8005878:	03c4      	lsls	r4, r0, #15
 800587a:	d425      	bmi.n	80058c8 <SD_CmdResp1Error+0xd8>
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 800587c:	0401      	lsls	r1, r0, #16
 800587e:	d425      	bmi.n	80058cc <SD_CmdResp1Error+0xdc>
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 8005880:	0442      	lsls	r2, r0, #17
 8005882:	d425      	bmi.n	80058d0 <SD_CmdResp1Error+0xe0>
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 8005884:	0483      	lsls	r3, r0, #18
 8005886:	d425      	bmi.n	80058d4 <SD_CmdResp1Error+0xe4>
    return(SD_AKE_SEQ_ERROR);
 8005888:	f010 0f08 	tst.w	r0, #8
 800588c:	bf0c      	ite	eq
 800588e:	2000      	moveq	r0, #0
 8005890:	201a      	movne	r0, #26
 8005892:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ADDR_OUT_OF_RANGE);
 8005894:	201c      	movs	r0, #28
 8005896:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ADDR_MISALIGNED);
 8005898:	2009      	movs	r0, #9
 800589a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_BLOCK_LEN_ERR);
 800589c:	200a      	movs	r0, #10
 800589e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ERASE_SEQ_ERR);
 80058a0:	200b      	movs	r0, #11
 80058a2:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_BAD_ERASE_PARAM);
 80058a4:	200c      	movs	r0, #12
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_WRITE_PROT_VIOLATION);
 80058a8:	200d      	movs	r0, #13
 80058aa:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_LOCK_UNLOCK_FAILED);
 80058ac:	200e      	movs	r0, #14
 80058ae:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_COM_CRC_FAILED);
 80058b0:	200f      	movs	r0, #15
 80058b2:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CARD_ECC_FAILED);
 80058b4:	2011      	movs	r0, #17
 80058b6:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CC_ERROR);
 80058b8:	2012      	movs	r0, #18
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_GENERAL_UNKNOWN_ERROR);
 80058bc:	2013      	movs	r0, #19
 80058be:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_STREAM_READ_UNDERRUN);
 80058c0:	2014      	movs	r0, #20
 80058c2:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_STREAM_WRITE_OVERRUN);
 80058c4:	2015      	movs	r0, #21
 80058c6:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CID_CSD_OVERWRITE);
 80058c8:	2016      	movs	r0, #22
 80058ca:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_WP_ERASE_SKIP);
 80058cc:	2017      	movs	r0, #23
 80058ce:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CARD_ECC_DISABLED);
 80058d0:	2018      	movs	r0, #24
 80058d2:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ERASE_RESET);
 80058d4:	2019      	movs	r0, #25
}
 80058d6:	bd70      	pop	{r4, r5, r6, pc}
 80058d8:	fdffe008 	.word	0xfdffe008

080058dc <SD_FindSCR>:
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80058dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e0:	b08e      	sub	sp, #56	; 0x38
  SDMMC_CmdInitTypeDef  sdmmc_cmdinitstructure;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 80058e2:	2300      	movs	r3, #0
  
  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 80058e4:	2410      	movs	r4, #16
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80058e6:	2240      	movs	r2, #64	; 0x40
{
 80058e8:	4606      	mov	r6, r0
  uint32_t tempscr[2] = {0, 0};
 80058ea:	9301      	str	r3, [sp, #4]
 80058ec:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80058ee:	9306      	str	r3, [sp, #24]
{
 80058f0:	460d      	mov	r5, r1
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80058f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80058f6:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
 80058f8:	2708      	movs	r7, #8
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80058fa:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 80058fc:	9404      	str	r4, [sp, #16]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80058fe:	9205      	str	r2, [sp, #20]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005900:	9307      	str	r3, [sp, #28]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
 8005902:	9703      	str	r7, [sp, #12]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005904:	f001 fc0f 	bl	8007126 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8005908:	4621      	mov	r1, r4
 800590a:	4630      	mov	r0, r6
 800590c:	f7ff ff70 	bl	80057f0 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8005910:	4604      	mov	r4, r0
 8005912:	2800      	cmp	r0, #0
 8005914:	d138      	bne.n	8005988 <SD_FindSCR+0xac>
  {
    return errorstate;
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8005916:	6a73      	ldr	r3, [r6, #36]	; 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005918:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 800591a:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800591c:	2437      	movs	r4, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800591e:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8005920:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8005922:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005924:	f001 fbff 	bl	8007126 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8005928:	4621      	mov	r1, r4
 800592a:	4630      	mov	r0, r6
 800592c:	f7ff ff60 	bl	80057f0 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8005930:	4604      	mov	r4, r0
 8005932:	bb48      	cbnz	r0, 8005988 <SD_FindSCR+0xac>
  {
    return errorstate;
  }
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8005934:	f04f 33ff 	mov.w	r3, #4294967295
 8005938:	9308      	str	r3, [sp, #32]
  sdmmc_datainitstructure.DataLength    = 8;
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800593a:	2330      	movs	r3, #48	; 0x30
 800593c:	930a      	str	r3, [sp, #40]	; 0x28
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800593e:	2302      	movs	r3, #2
 8005940:	930b      	str	r3, [sp, #44]	; 0x2c
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005942:	900c      	str	r0, [sp, #48]	; 0x30
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005944:	2301      	movs	r3, #1
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8005946:	a908      	add	r1, sp, #32
 8005948:	6830      	ldr	r0, [r6, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800594a:	930d      	str	r3, [sp, #52]	; 0x34
  sdmmc_datainitstructure.DataLength    = 8;
 800594c:	9709      	str	r7, [sp, #36]	; 0x24
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 800594e:	f001 fc09 	bl	8007164 <SDMMC_DataConfig>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  sdmmc_cmdinitstructure.Argument         = 0;
 8005952:	9403      	str	r4, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005954:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8005956:	2433      	movs	r4, #51	; 0x33
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005958:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 800595a:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800595c:	f001 fbe3 	bl	8007126 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SD_APP_SEND_SCR);
 8005960:	4621      	mov	r1, r4
 8005962:	4630      	mov	r0, r6
 8005964:	f7ff ff44 	bl	80057f0 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8005968:	4604      	mov	r4, r0
 800596a:	b968      	cbnz	r0, 8005988 <SD_FindSCR+0xac>
 800596c:	466f      	mov	r7, sp
  {
    return errorstate;
  }
  
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800596e:	f240 482a 	movw	r8, #1066	; 0x42a
 8005972:	6830      	ldr	r0, [r6, #0]
 8005974:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005976:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800597a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800597c:	d008      	beq.n	8005990 <SD_FindSCR+0xb4>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
      index++;
    }
  }
  
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800597e:	0719      	lsls	r1, r3, #28
 8005980:	d50d      	bpl.n	800599e <SD_FindSCR+0xc2>
  {
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005982:	2308      	movs	r3, #8
 8005984:	6383      	str	r3, [r0, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
    
    return errorstate;
 8005986:	2404      	movs	r4, #4
  
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
    ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
  
  return errorstate;
}
 8005988:	4620      	mov	r0, r4
 800598a:	b00e      	add	sp, #56	; 0x38
 800598c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8005990:	029b      	lsls	r3, r3, #10
 8005992:	d5ef      	bpl.n	8005974 <SD_FindSCR+0x98>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8005994:	f001 fbbc 	bl	8007110 <SDMMC_ReadFIFO>
 8005998:	f847 0f04 	str.w	r0, [r7, #4]!
 800599c:	e7e9      	b.n	8005972 <SD_FindSCR+0x96>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800599e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80059a0:	079a      	lsls	r2, r3, #30
 80059a2:	d502      	bpl.n	80059aa <SD_FindSCR+0xce>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80059a4:	2402      	movs	r4, #2
 80059a6:	6384      	str	r4, [r0, #56]	; 0x38
    return errorstate;
 80059a8:	e7ee      	b.n	8005988 <SD_FindSCR+0xac>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80059aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80059ac:	069b      	lsls	r3, r3, #26
 80059ae:	d503      	bpl.n	80059b8 <SD_FindSCR+0xdc>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80059b0:	2320      	movs	r3, #32
 80059b2:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 80059b4:	2406      	movs	r4, #6
 80059b6:	e7e7      	b.n	8005988 <SD_FindSCR+0xac>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059b8:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80059bc:	6383      	str	r3, [r0, #56]	; 0x38
 80059be:	9b01      	ldr	r3, [sp, #4]
 80059c0:	ba1b      	rev	r3, r3
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 80059c2:	606b      	str	r3, [r5, #4]
 80059c4:	9b02      	ldr	r3, [sp, #8]
 80059c6:	ba1b      	rev	r3, r3
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 80059c8:	602b      	str	r3, [r5, #0]
  return errorstate;
 80059ca:	e7dd      	b.n	8005988 <SD_FindSCR+0xac>

080059cc <HAL_SD_ReadBlocks_DMA>:
{
 80059cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059d0:	b08d      	sub	sp, #52	; 0x34
  hsd->Instance->DCTRL = 0;
 80059d2:	6806      	ldr	r6, [r0, #0]
{
 80059d4:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80059d6:	9d14      	ldr	r5, [sp, #80]	; 0x50
  if(NumberOfBlocks > 1)
 80059d8:	2f01      	cmp	r7, #1
{
 80059da:	4699      	mov	r9, r3
  hsd->Instance->DCTRL = 0;
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	62f3      	str	r3, [r6, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 80059e2:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 80059e4:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK; 
 80059e6:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdOperation = SD_READ_MULTIPLE_BLOCK;
 80059e8:	bf88      	it	hi
 80059ea:	2301      	movhi	r3, #1
    hsd->SdOperation = SD_READ_SINGLE_BLOCK;
 80059ec:	6543      	str	r3, [r0, #84]	; 0x54
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 80059ee:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80059f0:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 80059f4:	63f3      	str	r3, [r6, #60]	; 0x3c
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 80059f6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
{
 80059f8:	4604      	mov	r4, r0
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 80059fa:	f043 0308 	orr.w	r3, r3, #8
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 80059fe:	6d80      	ldr	r0, [r0, #88]	; 0x58
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8005a00:	62f3      	str	r3, [r6, #44]	; 0x2c
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 8005a02:	4b2d      	ldr	r3, [pc, #180]	; (8005ab8 <HAL_SD_ReadBlocks_DMA+0xec>)
 8005a04:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 8005a06:	4690      	mov	r8, r2
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 8005a08:	4b2c      	ldr	r3, [pc, #176]	; (8005abc <HAL_SD_ReadBlocks_DMA+0xf0>)
  hsd->hdmarx->Instance->CCR &= ~DMA_MEMORY_TO_PERIPH;
 8005a0a:	6802      	ldr	r2, [r0, #0]
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 8005a0c:	6343      	str	r3, [r0, #52]	; 0x34
  hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	6083      	str	r3, [r0, #8]
  hsd->hdmarx->Instance->CCR &= ~DMA_MEMORY_TO_PERIPH;
 8005a12:	6813      	ldr	r3, [r2, #0]
 8005a14:	f023 0310 	bic.w	r3, r3, #16
 8005a18:	6013      	str	r3, [r2, #0]
  HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pReadBuffer, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 8005a1a:	fb05 f307 	mul.w	r3, r5, r7
 8005a1e:	460a      	mov	r2, r1
 8005a20:	089b      	lsrs	r3, r3, #2
 8005a22:	f106 0180 	add.w	r1, r6, #128	; 0x80
 8005a26:	f7fe fcb3 	bl	8004390 <HAL_DMA_Start_IT>
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8005a2a:	6a23      	ldr	r3, [r4, #32]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005a2c:	6820      	ldr	r0, [r4, #0]
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8005a2e:	2b02      	cmp	r3, #2
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005a30:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005a34:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a36:	f04f 0300 	mov.w	r3, #0
    ReadAddr /= 512;
 8005a3a:	bf04      	itt	eq
 8005a3c:	ea4f 2858 	moveq.w	r8, r8, lsr #9
    BlockSize = 512;
 8005a40:	f44f 7500 	moveq.w	r5, #512	; 0x200
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005a44:	f04f 0610 	mov.w	r6, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a48:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005a4a:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    ReadAddr /= 512;
 8005a50:	bf08      	it	eq
 8005a52:	ea48 58c9 	orreq.w	r8, r8, r9, lsl #23
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8005a56:	9501      	str	r5, [sp, #4]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005a58:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005a5a:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005a5c:	f001 fb63 	bl	8007126 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8005a60:	4631      	mov	r1, r6
 8005a62:	4620      	mov	r0, r4
 8005a64:	f7ff fec4 	bl	80057f0 <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 8005a68:	bb10      	cbnz	r0, 8005ab0 <HAL_SD_ReadBlocks_DMA+0xe4>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8005a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6e:	9206      	str	r2, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005a70:	2290      	movs	r2, #144	; 0x90
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005a72:	2301      	movs	r3, #1
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005a74:	9208      	str	r2, [sp, #32]
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005a76:	900a      	str	r0, [sp, #40]	; 0x28
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005a78:	2202      	movs	r2, #2
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8005a7a:	a906      	add	r1, sp, #24
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8005a7c:	437d      	muls	r5, r7
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8005a7e:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005a80:	930b      	str	r3, [sp, #44]	; 0x2c
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005a82:	9209      	str	r2, [sp, #36]	; 0x24
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8005a84:	9507      	str	r5, [sp, #28]
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8005a86:	f001 fb6d 	bl	8007164 <SDMMC_DataConfig>
  if(NumberOfBlocks > 1)
 8005a8a:	2f01      	cmp	r7, #1
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 8005a8c:	bf8c      	ite	hi
 8005a8e:	2312      	movhi	r3, #18
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 8005a90:	2311      	movls	r3, #17
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005a92:	a901      	add	r1, sp, #4
 8005a94:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 8005a96:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)ReadAddr;
 8005a98:	f8cd 8004 	str.w	r8, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005a9c:	f001 fb43 	bl	8007126 <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 8005aa0:	2f01      	cmp	r7, #1
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_MULT_BLOCK);
 8005aa2:	bf8c      	ite	hi
 8005aa4:	2112      	movhi	r1, #18
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_SINGLE_BLOCK);
 8005aa6:	2111      	movls	r1, #17
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f7ff fea1 	bl	80057f0 <SD_CmdResp1Error>
  hsd->SdTransferErr = errorstate;
 8005aae:	64e0      	str	r0, [r4, #76]	; 0x4c
}
 8005ab0:	b00d      	add	sp, #52	; 0x34
 8005ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ab6:	bf00      	nop
 8005ab8:	08005c2f 	.word	0x08005c2f
 8005abc:	08005c4b 	.word	0x08005c4b

08005ac0 <HAL_SD_WriteBlocks_DMA>:
{
 8005ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac4:	b08c      	sub	sp, #48	; 0x30
 8005ac6:	4617      	mov	r7, r2
 8005ac8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  hsd->Instance->DCTRL = 0;
 8005aca:	6802      	ldr	r2, [r0, #0]
{
 8005acc:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  if(NumberOfBlocks > 1)
 8005ad0:	2e01      	cmp	r6, #1
{
 8005ad2:	461d      	mov	r5, r3
  hsd->Instance->DCTRL = 0;
 8005ad4:	f04f 0300 	mov.w	r3, #0
 8005ad8:	62d3      	str	r3, [r2, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 8005ada:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 8005adc:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK;
 8005ade:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdOperation = SD_WRITE_MULTIPLE_BLOCK;
 8005ae0:	bf8c      	ite	hi
 8005ae2:	2303      	movhi	r3, #3
    hsd->SdOperation = SD_WRITE_SINGLE_BLOCK;
 8005ae4:	2302      	movls	r3, #2
 8005ae6:	6543      	str	r3, [r0, #84]	; 0x54
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8005ae8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
{
 8005aea:	4604      	mov	r4, r0
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8005aec:	f443 738d 	orr.w	r3, r3, #282	; 0x11a
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8005af0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8005af2:	63d3      	str	r3, [r2, #60]	; 0x3c
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8005af4:	4b2f      	ldr	r3, [pc, #188]	; (8005bb4 <HAL_SD_WriteBlocks_DMA+0xf4>)
  hsd->hdmatx->Instance->CCR |= DMA_MEMORY_TO_PERIPH;
 8005af6:	f8d0 e000 	ldr.w	lr, [r0]
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8005afa:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsd->hdmatx->XferErrorCallback = SD_DMA_TxError;
 8005afc:	4b2e      	ldr	r3, [pc, #184]	; (8005bb8 <HAL_SD_WriteBlocks_DMA+0xf8>)
 8005afe:	6343      	str	r3, [r0, #52]	; 0x34
  hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b00:	2310      	movs	r3, #16
 8005b02:	6083      	str	r3, [r0, #8]
  hsd->hdmatx->Instance->CCR |= DMA_MEMORY_TO_PERIPH;
 8005b04:	f8de 3000 	ldr.w	r3, [lr]
 8005b08:	f043 0310 	orr.w	r3, r3, #16
 8005b0c:	f8ce 3000 	str.w	r3, [lr]
  HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pWriteBuffer, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 8005b10:	fb08 f306 	mul.w	r3, r8, r6
 8005b14:	3280      	adds	r2, #128	; 0x80
 8005b16:	089b      	lsrs	r3, r3, #2
 8005b18:	f7fe fc3a 	bl	8004390 <HAL_DMA_Start_IT>
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8005b1c:	6820      	ldr	r0, [r4, #0]
 8005b1e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005b20:	f043 0308 	orr.w	r3, r3, #8
 8005b24:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8005b26:	6a23      	ldr	r3, [r4, #32]
 8005b28:	2b02      	cmp	r3, #2
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005b2a:	f04f 0340 	mov.w	r3, #64	; 0x40
    WriteAddr /= 512;
 8005b2e:	bf08      	it	eq
 8005b30:	0a7f      	lsreq	r7, r7, #9
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005b32:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b34:	f04f 0300 	mov.w	r3, #0
    WriteAddr /= 512;
 8005b38:	bf04      	itt	eq
 8005b3a:	ea47 57c5 	orreq.w	r7, r7, r5, lsl #23
    BlockSize = 512;
 8005b3e:	f44f 7800 	moveq.w	r8, #512	; 0x200
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005b42:	2510      	movs	r5, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b44:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005b46:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005b4c:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005b4e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8005b50:	f8cd 8004 	str.w	r8, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005b54:	f001 fae7 	bl	8007126 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8005b58:	4629      	mov	r1, r5
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f7ff fe48 	bl	80057f0 <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 8005b60:	4605      	mov	r5, r0
 8005b62:	bb18      	cbnz	r0, 8005bac <HAL_SD_WriteBlocks_DMA+0xec>
  if(NumberOfBlocks <= 1)
 8005b64:	2e01      	cmp	r6, #1
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 8005b66:	bf94      	ite	ls
 8005b68:	2318      	movls	r3, #24
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8005b6a:	2319      	movhi	r3, #25
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005b6c:	a901      	add	r1, sp, #4
 8005b6e:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8005b70:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
 8005b72:	9701      	str	r7, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005b74:	f001 fad7 	bl	8007126 <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 8005b78:	2e01      	cmp	r6, #1
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_MULT_BLOCK);
 8005b7a:	bf8c      	ite	hi
 8005b7c:	2119      	movhi	r1, #25
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_SINGLE_BLOCK);
 8005b7e:	2118      	movls	r1, #24
 8005b80:	4620      	mov	r0, r4
 8005b82:	f7ff fe35 	bl	80057f0 <SD_CmdResp1Error>
 8005b86:	4605      	mov	r5, r0
  if (errorstate != SD_OK)
 8005b88:	b980      	cbnz	r0, 8005bac <HAL_SD_WriteBlocks_DMA+0xec>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8005b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b8e:	9306      	str	r3, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005b90:	2390      	movs	r3, #144	; 0x90
 8005b92:	9308      	str	r3, [sp, #32]
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005b94:	9009      	str	r0, [sp, #36]	; 0x24
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005b96:	900a      	str	r0, [sp, #40]	; 0x28
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005b98:	2301      	movs	r3, #1
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8005b9a:	fb06 f608 	mul.w	r6, r6, r8
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8005b9e:	a906      	add	r1, sp, #24
 8005ba0:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8005ba2:	9607      	str	r6, [sp, #28]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005ba4:	930b      	str	r3, [sp, #44]	; 0x2c
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8005ba6:	f001 fadd 	bl	8007164 <SDMMC_DataConfig>
  hsd->SdTransferErr = errorstate;
 8005baa:	64e5      	str	r5, [r4, #76]	; 0x4c
}
 8005bac:	4628      	mov	r0, r5
 8005bae:	b00c      	add	sp, #48	; 0x30
 8005bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb4:	08005c59 	.word	0x08005c59
 8005bb8:	08005c75 	.word	0x08005c75

08005bbc <HAL_SD_XferCpltCallback>:
 8005bbc:	4770      	bx	lr

08005bbe <HAL_SD_XferErrorCallback>:
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_SD_IRQHandler>:
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 8005bc0:	6803      	ldr	r3, [r0, #0]
 8005bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bc4:	05d2      	lsls	r2, r2, #23
{  
 8005bc6:	b510      	push	{r4, lr}
 8005bc8:	4604      	mov	r4, r0
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 8005bca:	d510      	bpl.n	8005bee <HAL_SD_IRQHandler+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_IT_DATAEND);  
 8005bcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bd0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferCplt = 1;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdTransferErr  = SD_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_SD_XferCpltCallback(hsd);  
 8005bda:	f7ff ffef 	bl	8005bbc <HAL_SD_XferCpltCallback>
  __HAL_SD_SDMMC_DISABLE_IT(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_DATAEND  |\
 8005bde:	6822      	ldr	r2, [r4, #0]
 8005be0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005be2:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8005be6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005bea:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005bec:	bd10      	pop	{r4, pc}
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL))
 8005bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf0:	0791      	lsls	r1, r2, #30
 8005bf2:	d505      	bpl.n	8005c00 <HAL_SD_IRQHandler+0x40>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_CRC_FAIL;
 8005bf8:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 8005bfa:	f7ff ffe0 	bl	8005bbe <HAL_SD_XferErrorCallback>
 8005bfe:	e7ee      	b.n	8005bde <HAL_SD_IRQHandler+0x1e>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT))
 8005c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c02:	0712      	lsls	r2, r2, #28
 8005c04:	d504      	bpl.n	8005c10 <HAL_SD_IRQHandler+0x50>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005c06:	2208      	movs	r2, #8
 8005c08:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_TIMEOUT;
 8005c0a:	2304      	movs	r3, #4
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 8005c0c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005c0e:	e7f4      	b.n	8005bfa <HAL_SD_IRQHandler+0x3a>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_RXOVERR))
 8005c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c12:	0691      	lsls	r1, r2, #26
 8005c14:	d503      	bpl.n	8005c1e <HAL_SD_IRQHandler+0x5e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005c16:	2220      	movs	r2, #32
 8005c18:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_RX_OVERRUN;
 8005c1a:	2306      	movs	r3, #6
 8005c1c:	e7f6      	b.n	8005c0c <HAL_SD_IRQHandler+0x4c>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_TXUNDERR))
 8005c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c20:	06d2      	lsls	r2, r2, #27
 8005c22:	d5dc      	bpl.n	8005bde <HAL_SD_IRQHandler+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_TXUNDERR);
 8005c24:	2210      	movs	r2, #16
 8005c26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 8005c28:	2305      	movs	r3, #5
 8005c2a:	e7ef      	b.n	8005c0c <HAL_SD_IRQHandler+0x4c>

08005c2c <HAL_SD_DMA_RxCpltCallback>:
 8005c2c:	4770      	bx	lr

08005c2e <SD_DMA_RxCplt>:
{
 8005c2e:	b510      	push	{r4, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8005c30:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hsd->DmaTransferCplt = 1;
 8005c32:	2301      	movs	r3, #1
 8005c34:	6523      	str	r3, [r4, #80]	; 0x50
  while(hsd->SdTransferCplt == 0)
 8005c36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0fc      	beq.n	8005c36 <SD_DMA_RxCplt+0x8>
  HAL_DMA_Abort(hdma);
 8005c3c:	f7fe fbe6 	bl	800440c <HAL_DMA_Abort>
  HAL_SD_DMA_RxCpltCallback(hsd->hdmarx);   
 8005c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c42:	f7ff fff3 	bl	8005c2c <HAL_SD_DMA_RxCpltCallback>
 8005c46:	bd10      	pop	{r4, pc}

08005c48 <HAL_SD_DMA_RxErrorCallback>:
 8005c48:	4770      	bx	lr

08005c4a <SD_DMA_RxError>:
{
 8005c4a:	b508      	push	{r3, lr}
  HAL_SD_DMA_RxErrorCallback(hsd->hdmarx);
 8005c4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005c4e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005c50:	f7ff fffa 	bl	8005c48 <HAL_SD_DMA_RxErrorCallback>
 8005c54:	bd08      	pop	{r3, pc}

08005c56 <HAL_SD_DMA_TxCpltCallback>:
 8005c56:	4770      	bx	lr

08005c58 <SD_DMA_TxCplt>:
{
 8005c58:	b510      	push	{r4, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8005c5a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hsd->DmaTransferCplt = 1;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	6523      	str	r3, [r4, #80]	; 0x50
  while(hsd->SdTransferCplt == 0)
 8005c60:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0fc      	beq.n	8005c60 <SD_DMA_TxCplt+0x8>
  HAL_DMA_Abort(hdma);
 8005c66:	f7fe fbd1 	bl	800440c <HAL_DMA_Abort>
  HAL_SD_DMA_TxCpltCallback(hsd->hdmatx);  
 8005c6a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005c6c:	f7ff fff3 	bl	8005c56 <HAL_SD_DMA_TxCpltCallback>
 8005c70:	bd10      	pop	{r4, pc}

08005c72 <HAL_SD_DMA_TxErrorCallback>:
{
 8005c72:	4770      	bx	lr

08005c74 <SD_DMA_TxError>:
{
 8005c74:	b508      	push	{r3, lr}
  HAL_SD_DMA_TxErrorCallback(hsd->hdmatx);
 8005c76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005c78:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8005c7a:	f7ff fffa 	bl	8005c72 <HAL_SD_DMA_TxErrorCallback>
 8005c7e:	bd08      	pop	{r3, pc}

08005c80 <HAL_SD_Get_CardInfo>:
{
 8005c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 8005c84:	6a05      	ldr	r5, [r0, #32]
 8005c86:	f881 5056 	strb.w	r5, [r1, #86]	; 0x56
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
 8005c8a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005c8c:	f8a1 3054 	strh.w	r3, [r1, #84]	; 0x54
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
 8005c90:	6a83      	ldr	r3, [r0, #40]	; 0x28
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8005c92:	0f9a      	lsrs	r2, r3, #30
 8005c94:	700a      	strb	r2, [r1, #0]
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8005c96:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8005c9a:	704a      	strb	r2, [r1, #1]
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03;
 8005c9c:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8005ca0:	708a      	strb	r2, [r1, #2]
  pCardInfo->SD_csd.TAAC = (uint8_t)tmp;
 8005ca2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005ca6:	70ca      	strb	r2, [r1, #3]
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 8005ca8:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8005cac:	b2db      	uxtb	r3, r3
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 8005cae:	710a      	strb	r2, [r1, #4]
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8005cb0:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
 8005cb2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005cb4:	0e13      	lsrs	r3, r2, #24
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
 8005cb6:	011b      	lsls	r3, r3, #4
 8005cb8:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8005cba:	88cb      	ldrh	r3, [r1, #6]
{
 8005cbc:	4604      	mov	r4, r0
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f3c2 5003 	ubfx	r0, r2, #20, #4
 8005cc4:	4303      	orrs	r3, r0
 8005cc6:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8005cc8:	f3c2 4303 	ubfx	r3, r2, #16, #4
 8005ccc:	720b      	strb	r3, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00) >> 8;
 8005cce:	f3c2 2307 	ubfx	r3, r2, #8, #8
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8005cd2:	09d8      	lsrs	r0, r3, #7
 8005cd4:	7248      	strb	r0, [r1, #9]
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8005cd6:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8005cda:	7288      	strb	r0, [r1, #10]
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8005cdc:	f3c3 1040 	ubfx	r0, r3, #5, #1
 8005ce0:	72c8      	strb	r0, [r1, #11]
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8005ce2:	f3c3 1000 	ubfx	r0, r3, #4, #1
 8005ce6:	7308      	strb	r0, [r1, #12]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 8005ce8:	2d01      	cmp	r5, #1
  pCardInfo->SD_csd.Reserved2       = 0; /*!< Reserved */
 8005cea:	f04f 0000 	mov.w	r0, #0
 8005cee:	7348      	strb	r0, [r1, #13]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 8005cf0:	f200 80dc 	bhi.w	8005eac <HAL_SD_Get_CardInfo+0x22c>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 8005cf4:	029b      	lsls	r3, r3, #10
 8005cf6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cfa:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 8005cfc:	690b      	ldr	r3, [r1, #16]
 8005cfe:	0092      	lsls	r2, r2, #2
 8005d00:	f402 727f 	and.w	r2, r2, #1020	; 0x3fc
 8005d04:	431a      	orrs	r2, r3
 8005d06:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8005d08:	690b      	ldr	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 8005d0a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8005d0c:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8005d10:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8005d12:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8005d16:	750b      	strb	r3, [r1, #20]
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 8005d18:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8005d1c:	754b      	strb	r3, [r1, #21]
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8005d1e:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8005d22:	758b      	strb	r3, [r1, #22]
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8005d24:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8005d28:	75cb      	strb	r3, [r1, #23]
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
 8005d2a:	0bd3      	lsrs	r3, r2, #15
 8005d2c:	f003 0306 	and.w	r3, r3, #6
 8005d30:	760b      	strb	r3, [r1, #24]
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 8005d32:	7e0d      	ldrb	r5, [r1, #24]
 8005d34:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8005d38:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8005d3c:	432a      	orrs	r2, r5
 8005d3e:	760a      	strb	r2, [r1, #24]
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 8005d40:	690d      	ldr	r5, [r1, #16]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 8005d42:	7e0f      	ldrb	r7, [r1, #24]
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8005d44:	7a0a      	ldrb	r2, [r1, #8]
 8005d46:	2601      	movs	r6, #1
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 8005d48:	3702      	adds	r7, #2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8005d4a:	fa06 f202 	lsl.w	r2, r6, r2
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 8005d4e:	40be      	lsls	r6, r7
 8005d50:	ea4f 79e6 	mov.w	r9, r6, asr #31
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8005d54:	fba6 6702 	umull	r6, r7, r6, r2
 8005d58:	fb02 7709 	mla	r7, r2, r9, r7
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8005d5c:	650a      	str	r2, [r1, #80]	; 0x50
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 8005d5e:	1c6a      	adds	r2, r5, #1
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8005d60:	fba6 8902 	umull	r8, r9, r6, r2
 8005d64:	fb02 9907 	mla	r9, r2, r7, r9
 8005d68:	e9c1 8912 	strd	r8, r9, [r1, #72]	; 0x48
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8005d6c:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8005d76:	764a      	strb	r2, [r1, #25]
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 8005d78:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8005d7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 8005d7c:	7e8a      	ldrb	r2, [r1, #26]
 8005d7e:	f3c3 15c0 	ubfx	r5, r3, #7, #1
 8005d82:	432a      	orrs	r2, r5
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8005d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 8005d88:	768a      	strb	r2, [r1, #26]
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8005d8a:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000) >> 24);
 8005d8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 8005d8e:	0fda      	lsrs	r2, r3, #31
 8005d90:	770a      	strb	r2, [r1, #28]
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60) >> 5;
 8005d92:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8005d96:	774a      	strb	r2, [r1, #29]
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1C) >> 2;
 8005d98:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8005d9c:	778a      	strb	r2, [r1, #30]
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03) << 2;
 8005d9e:	0d9a      	lsrs	r2, r3, #22
 8005da0:	f002 020c 	and.w	r2, r2, #12
 8005da4:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8005da6:	7fca      	ldrb	r2, [r1, #31]
 8005da8:	f3c3 5581 	ubfx	r5, r3, #22, #2
 8005dac:	432a      	orrs	r2, r5
 8005dae:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8005db0:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8005db4:	f881 2020 	strb.w	r2, [r1, #32]
  pCardInfo->SD_csd.Reserved3           = 0;
 8005db8:	2200      	movs	r2, #0
 8005dba:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 8005dbe:	f3c3 4200 	ubfx	r2, r3, #16, #1
 8005dc2:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 8005dc6:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8005dca:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40) >> 6;
 8005dce:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8005dd2:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20) >> 5;
 8005dd6:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8005dda:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10) >> 4;
 8005dde:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8005de2:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
 8005de6:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8005dea:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCardInfo->SD_csd.Reserved4 = 1;
 8005dee:	2501      	movs	r5, #1
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 8005df0:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 8005df4:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 8005df8:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 8005dfc:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCardInfo->SD_csd.Reserved4 = 1;
 8005e00:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
  tmp = (uint8_t)((hsd->CID[0] & 0xFF000000) >> 24);
 8005e04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e06:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ManufacturerID = tmp;
 8005e08:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
 8005e0c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005e10:	0212      	lsls	r2, r2, #8
 8005e12:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 8005e14:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 8005e16:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8005e1a:	b292      	uxth	r2, r2
 8005e1c:	4332      	orrs	r2, r6
 8005e1e:	061b      	lsls	r3, r3, #24
 8005e20:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
 8005e22:	630b      	str	r3, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 8005e24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 8005e26:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 8005e28:	0e1e      	lsrs	r6, r3, #24
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 8005e2a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8005e2e:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
 8005e30:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8005e32:	0a1a      	lsrs	r2, r3, #8
 8005e34:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8005e38:	4332      	orrs	r2, r6
 8005e3a:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp;
 8005e3c:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8005e3e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005e42:	4332      	orrs	r2, r6
  tmp = (uint8_t)(hsd->CID[1] & 0x000000FF);
 8005e44:	b2db      	uxtb	r3, r3
  pCardInfo->SD_cid.ProdName1 |= tmp;
 8005e46:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName2 = tmp;
 8005e48:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
  tmp = (uint8_t)((hsd->CID[2] & 0xFF000000) >> 24);
 8005e4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e4e:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ProdRev = tmp;
 8005e50:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
  tmp = (uint8_t)((hsd->CID[2] & 0x00FF0000) >> 16);
 8005e54:	0c1a      	lsrs	r2, r3, #16
 8005e56:	0612      	lsls	r2, r2, #24
  pCardInfo->SD_cid.ProdSN = tmp << 24;
 8005e58:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 8005e5a:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8005e5c:	021a      	lsls	r2, r3, #8
 8005e5e:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8005e62:	4332      	orrs	r2, r6
 8005e64:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 8005e66:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8005e68:	021b      	lsls	r3, r3, #8
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	638b      	str	r3, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp;
 8005e70:	6b8a      	ldr	r2, [r1, #56]	; 0x38
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
 8005e72:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCardInfo->SD_cid.ProdSN |= tmp;
 8005e74:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8005e78:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 8005e7a:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 8005e7e:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8005e82:	4322      	orrs	r2, r4
 8005e84:	f881 203c 	strb.w	r2, [r1, #60]	; 0x3c
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 8005e88:	0a1a      	lsrs	r2, r3, #8
 8005e8a:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8005e8e:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8005e90:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8005e92:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8005e96:	b292      	uxth	r2, r2
 8005e98:	4322      	orrs	r2, r4
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 8005e9a:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8005e9e:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 8005ea0:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
  pCardInfo->SD_cid.Reserved2 = 1;
 8005ea4:	f881 5041 	strb.w	r5, [r1, #65]	; 0x41
}
 8005ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8005eac:	2d02      	cmp	r5, #2
 8005eae:	d11f      	bne.n	8005ef0 <HAL_SD_Get_CardInfo+0x270>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 8005eb0:	0412      	lsls	r2, r2, #16
 8005eb2:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 8005eb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 8005eb8:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 8005eba:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 8005ebc:	0e1d      	lsrs	r5, r3, #24
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 8005ebe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005ec2:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 8005ec4:	690d      	ldr	r5, [r1, #16]
 8005ec6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005eca:	432a      	orrs	r2, r5
 8005ecc:	610a      	str	r2, [r1, #16]
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 8005ece:	690e      	ldr	r6, [r1, #16]
 8005ed0:	2700      	movs	r7, #0
 8005ed2:	3601      	adds	r6, #1
 8005ed4:	f147 0700 	adc.w	r7, r7, #0
 8005ed8:	04fa      	lsls	r2, r7, #19
 8005eda:	ea42 3256 	orr.w	r2, r2, r6, lsr #13
 8005ede:	64ca      	str	r2, [r1, #76]	; 0x4c
 8005ee0:	04f6      	lsls	r6, r6, #19
    pCardInfo->CardBlockSize = 512;    
 8005ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ee6:	f3c3 2307 	ubfx	r3, r3, #8, #8
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 8005eea:	648e      	str	r6, [r1, #72]	; 0x48
    pCardInfo->CardBlockSize = 512;    
 8005eec:	650a      	str	r2, [r1, #80]	; 0x50
 8005eee:	e73d      	b.n	8005d6c <HAL_SD_Get_CardInfo+0xec>
    errorstate = SD_ERROR;
 8005ef0:	2029      	movs	r0, #41	; 0x29
 8005ef2:	e73b      	b.n	8005d6c <HAL_SD_Get_CardInfo+0xec>

08005ef4 <HAL_SD_Init>:
{ 
 8005ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef8:	b091      	sub	sp, #68	; 0x44
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 8005efa:	2500      	movs	r5, #0
{ 
 8005efc:	4604      	mov	r4, r0
 8005efe:	460e      	mov	r6, r1
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 8005f00:	f88d 5012 	strb.w	r5, [sp, #18]
  HAL_SD_MspInit(hsd);
 8005f04:	f7fd f83e 	bl	8002f84 <HAL_SD_MspInit>
  tmpinit.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005f08:	2376      	movs	r3, #118	; 0x76
 8005f0a:	930f      	str	r3, [sp, #60]	; 0x3c
  tmpinit.BusWide             = SDMMC_BUS_WIDE_1B;
 8005f0c:	950d      	str	r5, [sp, #52]	; 0x34
  tmpinit.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005f0e:	950e      	str	r5, [sp, #56]	; 0x38
  SDMMC_Init(hsd->Instance, tmpinit);
 8005f10:	ab10      	add	r3, sp, #64	; 0x40
 8005f12:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8005f16:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  tmpinit.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005f1a:	950a      	str	r5, [sp, #40]	; 0x28
  tmpinit.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005f1c:	950b      	str	r5, [sp, #44]	; 0x2c
  tmpinit.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005f1e:	950c      	str	r5, [sp, #48]	; 0x30
  SDMMC_Init(hsd->Instance, tmpinit);
 8005f20:	ab0a      	add	r3, sp, #40	; 0x28
 8005f22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f24:	6820      	ldr	r0, [r4, #0]
 8005f26:	f001 f8d7 	bl	80070d8 <SDMMC_Init>
  __HAL_SD_SDMMC_DISABLE(hsd); 
 8005f2a:	6820      	ldr	r0, [r4, #0]
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
 8005f2c:	f88d 5013 	strb.w	r5, [sp, #19]
  __HAL_SD_SDMMC_DISABLE(hsd); 
 8005f30:	6843      	ldr	r3, [r0, #4]
 8005f32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f36:	6043      	str	r3, [r0, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8005f38:	f001 f8ed 	bl	8007116 <SDMMC_PowerState_ON>
  HAL_Delay(1);
 8005f3c:	2001      	movs	r0, #1
 8005f3e:	f7fe f8e5 	bl	800410c <HAL_Delay>
  __HAL_SD_SDMMC_ENABLE(hsd);
 8005f42:	6820      	ldr	r0, [r4, #0]
 8005f44:	6843      	ldr	r3, [r0, #4]
 8005f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f4a:	6043      	str	r3, [r0, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005f4c:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f52:	9309      	str	r3, [sp, #36]	; 0x24
  sdmmc_cmdinitstructure.Argument         = 0;
 8005f54:	9505      	str	r5, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
 8005f56:	9506      	str	r5, [sp, #24]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_NO;
 8005f58:	9507      	str	r5, [sp, #28]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f5a:	9508      	str	r5, [sp, #32]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005f5c:	f001 f8e3 	bl	8007126 <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8005f60:	6820      	ldr	r0, [r4, #0]
 8005f62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005f68:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 8005f6c:	b123      	cbz	r3, 8005f78 <HAL_SD_Init+0x84>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f6e:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005f72:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 8005f74:	2300      	movs	r3, #0
 8005f76:	e005      	b.n	8005f84 <HAL_SD_Init+0x90>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8005f78:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while((timeout > 0) && (!tmp))
 8005f7a:	3a01      	subs	r2, #1
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8005f7c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 8005f80:	d1f4      	bne.n	8005f6c <HAL_SD_Init+0x78>
    return errorstate;
 8005f82:	2303      	movs	r3, #3
  errorstate = SD_CmdError(hsd);
 8005f84:	f88d 3013 	strb.w	r3, [sp, #19]
  if(errorstate != SD_OK)
 8005f88:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8005f8c:	b18b      	cbz	r3, 8005fb2 <HAL_SD_Init+0xbe>
  return errorstate;
 8005f8e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8005f92:	b2db      	uxtb	r3, r3
  errorstate = SD_PowerON(hsd); 
 8005f94:	f88d 3012 	strb.w	r3, [sp, #18]
  if(errorstate != SD_OK)     
 8005f98:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8005f9c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 80b1 	beq.w	8006108 <HAL_SD_Init+0x214>
  return errorstate;
 8005fa6:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8005faa:	b2c0      	uxtb	r0, r0
}
 8005fac:	b011      	add	sp, #68	; 0x44
 8005fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sdmmc_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
 8005fb2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005fb6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_SDMMC_SEND_IF_COND;
 8005fb8:	2308      	movs	r3, #8
 8005fba:	9306      	str	r3, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005fbc:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005fbe:	2340      	movs	r3, #64	; 0x40
 8005fc0:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005fc2:	f001 f8b0 	bl	8007126 <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT); 
 8005fc6:	6820      	ldr	r0, [r4, #0]
 8005fc8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005fca:	f013 0f45 	tst.w	r3, #69	; 0x45
 8005fce:	bf14      	ite	ne
 8005fd0:	2301      	movne	r3, #1
 8005fd2:	2300      	moveq	r3, #0
  uint32_t timeout = SDMMC_CMD0TIMEOUT, tmp;
 8005fd4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  while((!tmp) && (timeout > 0))
 8005fd8:	b90b      	cbnz	r3, 8005fde <HAL_SD_Init+0xea>
 8005fda:	2a00      	cmp	r2, #0
 8005fdc:	d17c      	bne.n	80060d8 <HAL_SD_Init+0x1e4>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT); 
 8005fde:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if((timeout == 0) || tmp)
 8005fe0:	b112      	cbz	r2, 8005fe8 <HAL_SD_Init+0xf4>
 8005fe2:	f013 0304 	ands.w	r3, r3, #4
 8005fe6:	d07f      	beq.n	80060e8 <HAL_SD_Init+0x1f4>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8005fe8:	2304      	movs	r3, #4
 8005fea:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8005fec:	2303      	movs	r3, #3
  errorstate = SD_CmdResp7Error(hsd);
 8005fee:	f88d 3013 	strb.w	r3, [sp, #19]
  if (errorstate == SD_OK)
 8005ff2:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2a00      	cmp	r2, #0
 8005ffa:	d17c      	bne.n	80060f6 <HAL_SD_Init+0x202>
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	6222      	str	r2, [r4, #32]
    sdtype        = SD_HIGH_CAPACITY;
 8006000:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006004:	2537      	movs	r5, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006006:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Argument         = 0;
 8006008:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800600a:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800600c:	f001 f88b 	bl	8007126 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8006010:	4629      	mov	r1, r5
 8006012:	4620      	mov	r0, r4
 8006014:	f7ff fbec 	bl	80057f0 <SD_CmdResp1Error>
 8006018:	f88d 0013 	strb.w	r0, [sp, #19]
  if(errorstate == SD_OK)
 800601c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006020:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1b2      	bne.n	8005f8e <HAL_SD_Init+0x9a>
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 8006028:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
      sdmmc_cmdinitstructure.Argument         = 0;
 800602c:	46a8      	mov	r8, r5
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 800602e:	f447 1780 	orr.w	r7, r7, #1048576	; 0x100000
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006032:	f04f 0b37 	mov.w	fp, #55	; 0x37
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006036:	a905      	add	r1, sp, #20
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006038:	f04f 0a40 	mov.w	sl, #64	; 0x40
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800603c:	f44f 6980 	mov.w	r9, #1024	; 0x400
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006040:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = 0;
 8006042:	f8cd 8014 	str.w	r8, [sp, #20]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006046:	f8cd b018 	str.w	fp, [sp, #24]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800604a:	f8cd a01c 	str.w	sl, [sp, #28]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800604e:	f8cd 8020 	str.w	r8, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006052:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006056:	f001 f866 	bl	8007126 <SDMMC_SendCommand>
      errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800605a:	4659      	mov	r1, fp
 800605c:	4620      	mov	r0, r4
 800605e:	f7ff fbc7 	bl	80057f0 <SD_CmdResp1Error>
 8006062:	f88d 0013 	strb.w	r0, [sp, #19]
      if(errorstate != SD_OK)
 8006066:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800606a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800606e:	2b00      	cmp	r3, #0
 8006070:	d18d      	bne.n	8005f8e <HAL_SD_Init+0x9a>
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 8006072:	2329      	movs	r3, #41	; 0x29
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006074:	a905      	add	r1, sp, #20
 8006076:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 8006078:	9705      	str	r7, [sp, #20]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 800607a:	9306      	str	r3, [sp, #24]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800607c:	f8cd a01c 	str.w	sl, [sp, #28]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006080:	9208      	str	r2, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006082:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006086:	f001 f84e 	bl	8007126 <SDMMC_SendCommand>
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 800608a:	6820      	ldr	r0, [r4, #0]
 800608c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800608e:	f013 0f45 	tst.w	r3, #69	; 0x45
 8006092:	d0fb      	beq.n	800608c <HAL_SD_Init+0x198>
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8006094:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006096:	f013 0304 	ands.w	r3, r3, #4
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 800609a:	bf1b      	ittet	ne
 800609c:	2304      	movne	r3, #4
 800609e:	6383      	strne	r3, [r0, #56]	; 0x38
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060a0:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    return errorstate;
 80060a4:	2303      	movne	r3, #3
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060a6:	bf08      	it	eq
 80060a8:	6382      	streq	r2, [r0, #56]	; 0x38
      errorstate = SD_CmdResp3Error(hsd);
 80060aa:	f88d 3013 	strb.w	r3, [sp, #19]
      if(errorstate != SD_OK)
 80060ae:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80060b2:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f47f af69 	bne.w	8005f8e <HAL_SD_Init+0x9a>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80060bc:	f001 f848 	bl	8007150 <SDMMC_GetResponse>
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 80060c0:	2800      	cmp	r0, #0
      count++;
 80060c2:	f105 0501 	add.w	r5, r5, #1
 80060c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 80060ca:	db16      	blt.n	80060fa <HAL_SD_Init+0x206>
 80060cc:	429d      	cmp	r5, r3
 80060ce:	d1b0      	bne.n	8006032 <HAL_SD_Init+0x13e>
      errorstate = SD_INVALID_VOLTRANGE;
 80060d0:	231b      	movs	r3, #27
 80060d2:	f88d 3013 	strb.w	r3, [sp, #19]
 80060d6:	e75a      	b.n	8005f8e <HAL_SD_Init+0x9a>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT);
 80060d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80060da:	f013 0f45 	tst.w	r3, #69	; 0x45
 80060de:	bf14      	ite	ne
 80060e0:	2301      	movne	r3, #1
 80060e2:	2300      	moveq	r3, #0
    timeout--;
 80060e4:	3a01      	subs	r2, #1
 80060e6:	e777      	b.n	8005fd8 <HAL_SD_Init+0xe4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDREND))
 80060e8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80060ea:	0652      	lsls	r2, r2, #25
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CMDREND);
 80060ec:	bf46      	itte	mi
 80060ee:	2240      	movmi	r2, #64	; 0x40
 80060f0:	6382      	strmi	r2, [r0, #56]	; 0x38
  return errorstate;
 80060f2:	2329      	movpl	r3, #41	; 0x29
 80060f4:	e77b      	b.n	8005fee <HAL_SD_Init+0xfa>
  uint32_t sdtype = SD_STD_CAPACITY;
 80060f6:	461f      	mov	r7, r3
 80060f8:	e784      	b.n	8006004 <HAL_SD_Init+0x110>
    if(count >= SD_MAX_VOLT_TRIAL)
 80060fa:	429d      	cmp	r5, r3
 80060fc:	d0e8      	beq.n	80060d0 <HAL_SD_Init+0x1dc>
    if((response & SD_HIGH_CAPACITY) == SD_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80060fe:	0047      	lsls	r7, r0, #1
      hsd->CardType = HIGH_CAPACITY_SD_CARD;
 8006100:	bf44      	itt	mi
 8006102:	2302      	movmi	r3, #2
 8006104:	6223      	strmi	r3, [r4, #32]
 8006106:	e742      	b.n	8005f8e <HAL_SD_Init+0x9a>
  if(SDMMC_GetPowerState(hsd->Instance) == 0) /* Power off */
 8006108:	6820      	ldr	r0, [r4, #0]
 800610a:	f001 f808 	bl	800711e <SDMMC_GetPowerState>
 800610e:	2800      	cmp	r0, #0
 8006110:	f000 80c2 	beq.w	8006298 <HAL_SD_Init+0x3a4>
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8006114:	6a23      	ldr	r3, [r4, #32]
 8006116:	2b04      	cmp	r3, #4
 8006118:	d026      	beq.n	8006168 <HAL_SD_Init+0x274>
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
 800611a:	2302      	movs	r3, #2
 800611c:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 800611e:	23c0      	movs	r3, #192	; 0xc0
 8006120:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006122:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006124:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006128:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Argument         = 0;
 800612a:	9505      	str	r5, [sp, #20]
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800612c:	9508      	str	r5, [sp, #32]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800612e:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006130:	f000 fff9 	bl	8007126 <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 8006134:	4620      	mov	r0, r4
 8006136:	f7ff fb45 	bl	80057c4 <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 800613a:	4605      	mov	r5, r0
 800613c:	2800      	cmp	r0, #0
 800613e:	d155      	bne.n	80061ec <HAL_SD_Init+0x2f8>
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006140:	4601      	mov	r1, r0
 8006142:	6820      	ldr	r0, [r4, #0]
 8006144:	f001 f804 	bl	8007150 <SDMMC_GetResponse>
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006148:	2104      	movs	r1, #4
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800614a:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800614c:	6820      	ldr	r0, [r4, #0]
 800614e:	f000 ffff 	bl	8007150 <SDMMC_GetResponse>
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006152:	2108      	movs	r1, #8
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006154:	63e0      	str	r0, [r4, #60]	; 0x3c
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006156:	6820      	ldr	r0, [r4, #0]
 8006158:	f000 fffa 	bl	8007150 <SDMMC_GetResponse>
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800615c:	210c      	movs	r1, #12
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800615e:	6420      	str	r0, [r4, #64]	; 0x40
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006160:	6820      	ldr	r0, [r4, #0]
 8006162:	f000 fff5 	bl	8007150 <SDMMC_GetResponse>
 8006166:	6460      	str	r0, [r4, #68]	; 0x44
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8006168:	6a23      	ldr	r3, [r4, #32]
 800616a:	2b02      	cmp	r3, #2
 800616c:	d92b      	bls.n	80061c6 <HAL_SD_Init+0x2d2>
 800616e:	2b06      	cmp	r3, #6
 8006170:	d029      	beq.n	80061c6 <HAL_SD_Init+0x2d2>
  uint16_t sd_rca = 1;
 8006172:	2001      	movs	r0, #1
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8006174:	6a23      	ldr	r3, [r4, #32]
 8006176:	2b04      	cmp	r3, #4
 8006178:	f000 8092 	beq.w	80062a0 <HAL_SD_Init+0x3ac>
    hsd->RCA = sd_rca;
 800617c:	6260      	str	r0, [r4, #36]	; 0x24
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 800617e:	2309      	movs	r3, #9
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006180:	0400      	lsls	r0, r0, #16
 8006182:	9005      	str	r0, [sp, #20]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 8006184:	9306      	str	r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006186:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8006188:	23c0      	movs	r3, #192	; 0xc0
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800618a:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 800618c:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800618e:	f000 ffca 	bl	8007126 <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 8006192:	4620      	mov	r0, r4
 8006194:	f7ff fb16 	bl	80057c4 <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 8006198:	4605      	mov	r5, r0
 800619a:	bb38      	cbnz	r0, 80061ec <HAL_SD_Init+0x2f8>
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800619c:	4601      	mov	r1, r0
 800619e:	6820      	ldr	r0, [r4, #0]
 80061a0:	f000 ffd6 	bl	8007150 <SDMMC_GetResponse>
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80061a4:	2104      	movs	r1, #4
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80061a6:	62a0      	str	r0, [r4, #40]	; 0x28
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80061a8:	6820      	ldr	r0, [r4, #0]
 80061aa:	f000 ffd1 	bl	8007150 <SDMMC_GetResponse>
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80061ae:	2108      	movs	r1, #8
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80061b0:	62e0      	str	r0, [r4, #44]	; 0x2c
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80061b2:	6820      	ldr	r0, [r4, #0]
 80061b4:	f000 ffcc 	bl	8007150 <SDMMC_GetResponse>
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80061b8:	210c      	movs	r1, #12
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80061ba:	6320      	str	r0, [r4, #48]	; 0x30
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80061bc:	6820      	ldr	r0, [r4, #0]
 80061be:	f000 ffc7 	bl	8007150 <SDMMC_GetResponse>
 80061c2:	6360      	str	r0, [r4, #52]	; 0x34
 80061c4:	e012      	b.n	80061ec <HAL_SD_Init+0x2f8>
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
 80061c6:	2303      	movs	r3, #3
 80061c8:	9306      	str	r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80061ca:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80061cc:	2340      	movs	r3, #64	; 0x40
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80061ce:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80061d0:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80061d2:	f000 ffa8 	bl	8007126 <SDMMC_SendCommand>
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 80061d6:	6820      	ldr	r0, [r4, #0]
 80061d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80061da:	f013 0f45 	tst.w	r3, #69	; 0x45
 80061de:	d0fb      	beq.n	80061d8 <HAL_SD_Init+0x2e4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 80061e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80061e2:	075d      	lsls	r5, r3, #29
 80061e4:	d536      	bpl.n	8006254 <HAL_SD_Init+0x360>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 80061e6:	2304      	movs	r3, #4
 80061e8:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 80061ea:	2503      	movs	r5, #3
  errorstate = SD_Initialize_Cards(hsd);
 80061ec:	f88d 5012 	strb.w	r5, [sp, #18]
  if (errorstate != SD_OK)
 80061f0:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f47f aed6 	bne.w	8005fa6 <HAL_SD_Init+0xb2>
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
 80061fa:	4631      	mov	r1, r6
 80061fc:	4620      	mov	r0, r4
 80061fe:	f7ff fd3f 	bl	8005c80 <HAL_SD_Get_CardInfo>
 8006202:	f88d 0012 	strb.w	r0, [sp, #18]
  if (errorstate == SD_OK)
 8006206:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800620a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800620e:	b9ab      	cbnz	r3, 800623c <HAL_SD_Init+0x348>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8006210:	f8b6 3054 	ldrh.w	r3, [r6, #84]	; 0x54
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006214:	6820      	ldr	r0, [r4, #0]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006216:	9208      	str	r2, [sp, #32]
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8006218:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.Argument         = (uint32_t)addr;
 800621a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800621c:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 800621e:	2507      	movs	r5, #7
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006220:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006222:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006228:	9309      	str	r3, [sp, #36]	; 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 800622a:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800622c:	f000 ff7b 	bl	8007126 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEL_DESEL_CARD);
 8006230:	4629      	mov	r1, r5
 8006232:	4620      	mov	r0, r4
 8006234:	f7ff fadc 	bl	80057f0 <SD_CmdResp1Error>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8006238:	f88d 0012 	strb.w	r0, [sp, #18]
  SDMMC_Init(hsd->Instance, hsd->Init);   
 800623c:	f104 0310 	add.w	r3, r4, #16
 8006240:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006244:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006248:	1d23      	adds	r3, r4, #4
 800624a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800624c:	6820      	ldr	r0, [r4, #0]
 800624e:	f000 ff43 	bl	80070d8 <SDMMC_Init>
 8006252:	e6a8      	b.n	8005fa6 <HAL_SD_Init+0xb2>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 8006254:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8006256:	f015 0501 	ands.w	r5, r5, #1
 800625a:	d002      	beq.n	8006262 <HAL_SD_Init+0x36e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 800625c:	2501      	movs	r5, #1
 800625e:	6385      	str	r5, [r0, #56]	; 0x38
 8006260:	e7c4      	b.n	80061ec <HAL_SD_Init+0x2f8>
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 8006262:	f000 ff72 	bl	800714a <SDMMC_GetCommandResponse>
 8006266:	2803      	cmp	r0, #3
 8006268:	d001      	beq.n	800626e <HAL_SD_Init+0x37a>
    return errorstate;
 800626a:	2510      	movs	r5, #16
 800626c:	e7be      	b.n	80061ec <HAL_SD_Init+0x2f8>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800626e:	6820      	ldr	r0, [r4, #0]
 8006270:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006274:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006276:	4629      	mov	r1, r5
 8006278:	f000 ff6a 	bl	8007150 <SDMMC_GetResponse>
  if((response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)) == SD_ALLZERO)
 800627c:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8006280:	d101      	bne.n	8006286 <HAL_SD_Init+0x392>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006282:	0c00      	lsrs	r0, r0, #16
 8006284:	e776      	b.n	8006174 <HAL_SD_Init+0x280>
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
 8006286:	0481      	lsls	r1, r0, #18
 8006288:	d408      	bmi.n	800629c <HAL_SD_Init+0x3a8>
  if((response_r1 & SD_R6_ILLEGAL_CMD) == SD_R6_ILLEGAL_CMD)
 800628a:	0442      	lsls	r2, r0, #17
 800628c:	d4ed      	bmi.n	800626a <HAL_SD_Init+0x376>
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
 800628e:	0403      	lsls	r3, r0, #16
 8006290:	f57f af6f 	bpl.w	8006172 <HAL_SD_Init+0x27e>
    return(SD_COM_CRC_FAILED);
 8006294:	250f      	movs	r5, #15
 8006296:	e7a9      	b.n	80061ec <HAL_SD_Init+0x2f8>
    return errorstate;
 8006298:	2525      	movs	r5, #37	; 0x25
 800629a:	e7a7      	b.n	80061ec <HAL_SD_Init+0x2f8>
    return(SD_GENERAL_UNKNOWN_ERROR);
 800629c:	2513      	movs	r5, #19
 800629e:	e7a5      	b.n	80061ec <HAL_SD_Init+0x2f8>
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 80062a0:	2500      	movs	r5, #0
 80062a2:	e7a3      	b.n	80061ec <HAL_SD_Init+0x2f8>

080062a4 <HAL_SD_WideBusOperation_Config>:
{
 80062a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hsd->CardType == MULTIMEDIA_CARD)
 80062a6:	6a03      	ldr	r3, [r0, #32]
 80062a8:	2b03      	cmp	r3, #3
{
 80062aa:	b08d      	sub	sp, #52	; 0x34
 80062ac:	4605      	mov	r5, r0
 80062ae:	460e      	mov	r6, r1
  if (hsd->CardType == MULTIMEDIA_CARD)
 80062b0:	f000 8088 	beq.w	80063c4 <HAL_SD_WideBusOperation_Config+0x120>
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	f200 8083 	bhi.w	80063c0 <HAL_SD_WideBusOperation_Config+0x11c>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80062ba:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80062be:	f000 8081 	beq.w	80063c4 <HAL_SD_WideBusOperation_Config+0x120>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80062c2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80062c6:	d14c      	bne.n	8006362 <HAL_SD_WideBusOperation_Config+0xbe>
  uint32_t scr[2] = {0, 0};
 80062c8:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 80062ca:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 80062cc:	9104      	str	r1, [sp, #16]
 80062ce:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 80062d0:	f000 ff3e 	bl	8007150 <SDMMC_GetResponse>
 80062d4:	0180      	lsls	r0, r0, #6
 80062d6:	d46d      	bmi.n	80063b4 <HAL_SD_WideBusOperation_Config+0x110>
  errorstate = SD_FindSCR(hsd, scr);
 80062d8:	a904      	add	r1, sp, #16
 80062da:	4628      	mov	r0, r5
 80062dc:	f7ff fafe 	bl	80058dc <SD_FindSCR>
  if(errorstate != SD_OK)
 80062e0:	4604      	mov	r4, r0
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d167      	bne.n	80063b6 <HAL_SD_WideBusOperation_Config+0x112>
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 80062e6:	9b05      	ldr	r3, [sp, #20]
 80062e8:	0359      	lsls	r1, r3, #13
 80062ea:	d567      	bpl.n	80063bc <HAL_SD_WideBusOperation_Config+0x118>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80062ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80062ee:	9009      	str	r0, [sp, #36]	; 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80062f0:	041b      	lsls	r3, r3, #16
 80062f2:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80062f4:	2340      	movs	r3, #64	; 0x40
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80062f6:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80062f8:	9308      	str	r3, [sp, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80062fa:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80062fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006300:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006302:	930a      	str	r3, [sp, #40]	; 0x28
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006304:	9707      	str	r7, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006306:	f000 ff0e 	bl	8007126 <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800630a:	4639      	mov	r1, r7
 800630c:	4628      	mov	r0, r5
 800630e:	f7ff fa6f 	bl	80057f0 <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 8006312:	4604      	mov	r4, r0
 8006314:	2800      	cmp	r0, #0
 8006316:	d14e      	bne.n	80063b6 <HAL_SD_WideBusOperation_Config+0x112>
    sdmmc_cmdinitstructure.Argument         = 2;
 8006318:	2302      	movs	r3, #2
 800631a:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 800631c:	2406      	movs	r4, #6
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800631e:	a906      	add	r1, sp, #24
 8006320:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8006322:	9407      	str	r4, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006324:	f000 feff 	bl	8007126 <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 8006328:	4621      	mov	r1, r4
 800632a:	4628      	mov	r0, r5
 800632c:	f7ff fa60 	bl	80057f0 <SD_CmdResp1Error>
 8006330:	4604      	mov	r4, r0
    if (errorstate == SD_OK)
 8006332:	2800      	cmp	r0, #0
 8006334:	d13f      	bne.n	80063b6 <HAL_SD_WideBusOperation_Config+0x112>
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
 8006336:	686b      	ldr	r3, [r5, #4]
 8006338:	9306      	str	r3, [sp, #24]
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
 800633a:	68ab      	ldr	r3, [r5, #8]
 800633c:	9307      	str	r3, [sp, #28]
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800633e:	68eb      	ldr	r3, [r5, #12]
 8006340:	9308      	str	r3, [sp, #32]
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006342:	696b      	ldr	r3, [r5, #20]
 8006344:	930a      	str	r3, [sp, #40]	; 0x28
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
 8006346:	69ab      	ldr	r3, [r5, #24]
 8006348:	930b      	str	r3, [sp, #44]	; 0x2c
      tmpinit.BusWide             = WideMode;
 800634a:	9609      	str	r6, [sp, #36]	; 0x24
      SDMMC_Init(hsd->Instance, tmpinit);
 800634c:	ab0c      	add	r3, sp, #48	; 0x30
 800634e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006352:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006356:	ab06      	add	r3, sp, #24
 8006358:	cb0e      	ldmia	r3, {r1, r2, r3}
 800635a:	6828      	ldr	r0, [r5, #0]
 800635c:	f000 febc 	bl	80070d8 <SDMMC_Init>
 8006360:	e029      	b.n	80063b6 <HAL_SD_WideBusOperation_Config+0x112>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006362:	2900      	cmp	r1, #0
 8006364:	d130      	bne.n	80063c8 <HAL_SD_WideBusOperation_Config+0x124>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8006366:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8006368:	9104      	str	r1, [sp, #16]
 800636a:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 800636c:	f000 fef0 	bl	8007150 <SDMMC_GetResponse>
 8006370:	0182      	lsls	r2, r0, #6
 8006372:	d41f      	bmi.n	80063b4 <HAL_SD_WideBusOperation_Config+0x110>
  errorstate = SD_FindSCR(hsd, scr);
 8006374:	a904      	add	r1, sp, #16
 8006376:	4628      	mov	r0, r5
 8006378:	f7ff fab0 	bl	80058dc <SD_FindSCR>
  if(errorstate != SD_OK)
 800637c:	4604      	mov	r4, r0
 800637e:	b9d0      	cbnz	r0, 80063b6 <HAL_SD_WideBusOperation_Config+0x112>
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 8006380:	9b05      	ldr	r3, [sp, #20]
 8006382:	03db      	lsls	r3, r3, #15
 8006384:	d51a      	bpl.n	80063bc <HAL_SD_WideBusOperation_Config+0x118>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006386:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006388:	9009      	str	r0, [sp, #36]	; 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800638a:	041b      	lsls	r3, r3, #16
 800638c:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800638e:	2340      	movs	r3, #64	; 0x40
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006390:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006392:	9308      	str	r3, [sp, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006394:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006396:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800639a:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800639c:	930a      	str	r3, [sp, #40]	; 0x28
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800639e:	9707      	str	r7, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80063a0:	f000 fec1 	bl	8007126 <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80063a4:	4639      	mov	r1, r7
 80063a6:	4628      	mov	r0, r5
 80063a8:	f7ff fa22 	bl	80057f0 <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 80063ac:	4604      	mov	r4, r0
 80063ae:	b910      	cbnz	r0, 80063b6 <HAL_SD_WideBusOperation_Config+0x112>
    sdmmc_cmdinitstructure.Argument         = 0;
 80063b0:	9006      	str	r0, [sp, #24]
 80063b2:	e7b3      	b.n	800631c <HAL_SD_WideBusOperation_Config+0x78>
    return errorstate;
 80063b4:	240e      	movs	r4, #14
}
 80063b6:	4620      	mov	r0, r4
 80063b8:	b00d      	add	sp, #52	; 0x34
 80063ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return errorstate;
 80063bc:	2425      	movs	r4, #37	; 0x25
 80063be:	e7fa      	b.n	80063b6 <HAL_SD_WideBusOperation_Config+0x112>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 80063c0:	2400      	movs	r4, #0
 80063c2:	e7f8      	b.n	80063b6 <HAL_SD_WideBusOperation_Config+0x112>
    return errorstate;
 80063c4:	2427      	movs	r4, #39	; 0x27
 80063c6:	e7f6      	b.n	80063b6 <HAL_SD_WideBusOperation_Config+0x112>
      errorstate = SD_INVALID_PARAMETER;
 80063c8:	2426      	movs	r4, #38	; 0x26
 80063ca:	e7f4      	b.n	80063b6 <HAL_SD_WideBusOperation_Config+0x112>

080063cc <HAL_SD_StopTransfer>:
{
 80063cc:	b530      	push	{r4, r5, lr}
 80063ce:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Argument         = 0;
 80063d0:	2300      	movs	r3, #0
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80063d2:	2240      	movs	r2, #64	; 0x40
{
 80063d4:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.Argument         = 0;
 80063d6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 80063d8:	250c      	movs	r5, #12
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80063da:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80063dc:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80063de:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80063e2:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80063e4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80063e6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 80063e8:	9502      	str	r5, [sp, #8]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80063ea:	f000 fe9c 	bl	8007126 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_STOP_TRANSMISSION);
 80063ee:	4629      	mov	r1, r5
 80063f0:	4620      	mov	r0, r4
 80063f2:	f7ff f9fd 	bl	80057f0 <SD_CmdResp1Error>
}
 80063f6:	b007      	add	sp, #28
 80063f8:	bd30      	pop	{r4, r5, pc}

080063fa <HAL_SD_CheckReadOperation>:
{
 80063fa:	b538      	push	{r3, r4, r5, lr}
 80063fc:	4604      	mov	r4, r0
 80063fe:	460d      	mov	r5, r1
  tmp1 = hsd->DmaTransferCplt; 
 8006400:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 8006402:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8006404:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  uint32_t timeout = Timeout;
 8006406:	462a      	mov	r2, r5
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8006408:	b2db      	uxtb	r3, r3
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 800640a:	4208      	tst	r0, r1
 800640c:	d100      	bne.n	8006410 <HAL_SD_CheckReadOperation+0x16>
 800640e:	b1b3      	cbz	r3, 800643e <HAL_SD_CheckReadOperation+0x44>
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXACT)) && (timeout > 0))
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006414:	0492      	lsls	r2, r2, #18
 8006416:	d500      	bpl.n	800641a <HAL_SD_CheckReadOperation+0x20>
 8006418:	b9cd      	cbnz	r5, 800644e <HAL_SD_CheckReadOperation+0x54>
  if (hsd->SdOperation == SD_READ_MULTIPLE_BLOCK)
 800641a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800641c:	2b01      	cmp	r3, #1
 800641e:	d118      	bne.n	8006452 <HAL_SD_CheckReadOperation+0x58>
    errorstate = HAL_SD_StopTransfer(hsd);
 8006420:	4620      	mov	r0, r4
 8006422:	f7ff ffd3 	bl	80063cc <HAL_SD_StopTransfer>
  if ((timeout == 0) && (errorstate == SD_OK))
 8006426:	b90d      	cbnz	r5, 800642c <HAL_SD_CheckReadOperation+0x32>
 8006428:	b900      	cbnz	r0, 800642c <HAL_SD_CheckReadOperation+0x32>
    errorstate = SD_DATA_TIMEOUT;
 800642a:	2004      	movs	r0, #4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006432:	639a      	str	r2, [r3, #56]	; 0x38
  if (hsd->SdTransferErr != SD_OK)
 8006434:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006436:	b183      	cbz	r3, 800645a <HAL_SD_CheckReadOperation+0x60>
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 8006438:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800643a:	b2c0      	uxtb	r0, r0
 800643c:	bd38      	pop	{r3, r4, r5, pc}
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 800643e:	2a00      	cmp	r2, #0
 8006440:	d0e6      	beq.n	8006410 <HAL_SD_CheckReadOperation+0x16>
    tmp1 = hsd->DmaTransferCplt; 
 8006442:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 8006444:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 8006446:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 8006448:	3a01      	subs	r2, #1
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 800644a:	b2db      	uxtb	r3, r3
 800644c:	e7dd      	b.n	800640a <HAL_SD_CheckReadOperation+0x10>
    timeout--;  
 800644e:	3d01      	subs	r5, #1
 8006450:	e7df      	b.n	8006412 <HAL_SD_CheckReadOperation+0x18>
  if ((timeout == 0) && (errorstate == SD_OK))
 8006452:	2d00      	cmp	r5, #0
 8006454:	d0e9      	beq.n	800642a <HAL_SD_CheckReadOperation+0x30>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8006456:	2000      	movs	r0, #0
 8006458:	e7e8      	b.n	800642c <HAL_SD_CheckReadOperation+0x32>
}
 800645a:	bd38      	pop	{r3, r4, r5, pc}

0800645c <HAL_SD_GetStatus>:
{
 800645c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800645e:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8006460:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006462:	041b      	lsls	r3, r3, #16
 8006464:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006466:	2340      	movs	r3, #64	; 0x40
 8006468:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800646a:	2300      	movs	r3, #0
{
 800646c:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 800646e:	250d      	movs	r5, #13
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006470:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006472:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006474:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006478:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800647a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 800647c:	9502      	str	r5, [sp, #8]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800647e:	f000 fe52 	bl	8007126 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEND_STATUS);
 8006482:	4629      	mov	r1, r5
 8006484:	4620      	mov	r0, r4
 8006486:	f7ff f9b3 	bl	80057f0 <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 800648a:	4601      	mov	r1, r0
 800648c:	b948      	cbnz	r0, 80064a2 <HAL_SD_GetStatus+0x46>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800648e:	6820      	ldr	r0, [r4, #0]
 8006490:	f000 fe5e 	bl	8007150 <SDMMC_GetResponse>
  if (cardstate == SD_CARD_TRANSFER)
 8006494:	f3c0 2043 	ubfx	r0, r0, #9, #4
    return SD_TRANSFER_OK;
 8006498:	3804      	subs	r0, #4
 800649a:	bf18      	it	ne
 800649c:	2001      	movne	r0, #1
}
 800649e:	b007      	add	sp, #28
 80064a0:	bd30      	pop	{r4, r5, pc}
    return SD_TRANSFER_ERROR;
 80064a2:	2002      	movs	r0, #2
 80064a4:	e7fb      	b.n	800649e <HAL_SD_GetStatus+0x42>

080064a6 <HAL_SD_CheckWriteOperation>:
{
 80064a6:	b570      	push	{r4, r5, r6, lr}
 80064a8:	4604      	mov	r4, r0
 80064aa:	460e      	mov	r6, r1
  tmp1 = hsd->DmaTransferCplt; 
 80064ac:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 80064ae:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 80064b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  uint32_t timeout = Timeout;
 80064b2:	4632      	mov	r2, r6
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 80064b4:	b2db      	uxtb	r3, r3
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 80064b6:	4208      	tst	r0, r1
 80064b8:	d100      	bne.n	80064bc <HAL_SD_CheckWriteOperation+0x16>
 80064ba:	b1c3      	cbz	r3, 80064ee <HAL_SD_CheckWriteOperation+0x48>
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXACT))  && (timeout > 0))
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064c0:	04d2      	lsls	r2, r2, #19
 80064c2:	d500      	bpl.n	80064c6 <HAL_SD_CheckWriteOperation+0x20>
 80064c4:	b9de      	cbnz	r6, 80064fe <HAL_SD_CheckWriteOperation+0x58>
  if (hsd->SdOperation == SD_WRITE_MULTIPLE_BLOCK)
 80064c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80064c8:	2b03      	cmp	r3, #3
 80064ca:	d120      	bne.n	800650e <HAL_SD_CheckWriteOperation+0x68>
    errorstate = HAL_SD_StopTransfer(hsd);
 80064cc:	4620      	mov	r0, r4
 80064ce:	f7ff ff7d 	bl	80063cc <HAL_SD_StopTransfer>
 80064d2:	4605      	mov	r5, r0
  if ((timeout == 0) && (errorstate == SD_OK))
 80064d4:	b90e      	cbnz	r6, 80064da <HAL_SD_CheckWriteOperation+0x34>
 80064d6:	b900      	cbnz	r0, 80064da <HAL_SD_CheckWriteOperation+0x34>
    errorstate = SD_DATA_TIMEOUT;
 80064d8:	2504      	movs	r5, #4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80064e0:	639a      	str	r2, [r3, #56]	; 0x38
  if (hsd->SdTransferErr != SD_OK)
 80064e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80064e4:	b16b      	cbz	r3, 8006502 <HAL_SD_CheckWriteOperation+0x5c>
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 80064e6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80064e8:	b2ed      	uxtb	r5, r5
}
 80064ea:	4628      	mov	r0, r5
 80064ec:	bd70      	pop	{r4, r5, r6, pc}
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 80064ee:	2a00      	cmp	r2, #0
 80064f0:	d0e4      	beq.n	80064bc <HAL_SD_CheckWriteOperation+0x16>
    tmp1 = hsd->DmaTransferCplt; 
 80064f2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 80064f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 80064f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 80064f8:	3a01      	subs	r2, #1
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	e7db      	b.n	80064b6 <HAL_SD_CheckWriteOperation+0x10>
    timeout--;  
 80064fe:	3e01      	subs	r6, #1
 8006500:	e7dd      	b.n	80064be <HAL_SD_CheckWriteOperation+0x18>
  while(HAL_SD_GetStatus(hsd) != SD_TRANSFER_OK)
 8006502:	4620      	mov	r0, r4
 8006504:	f7ff ffaa 	bl	800645c <HAL_SD_GetStatus>
 8006508:	2800      	cmp	r0, #0
 800650a:	d1fa      	bne.n	8006502 <HAL_SD_CheckWriteOperation+0x5c>
 800650c:	e7ed      	b.n	80064ea <HAL_SD_CheckWriteOperation+0x44>
  if ((timeout == 0) && (errorstate == SD_OK))
 800650e:	2e00      	cmp	r6, #0
 8006510:	d0e2      	beq.n	80064d8 <HAL_SD_CheckWriteOperation+0x32>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8006512:	2500      	movs	r5, #0
 8006514:	e7e1      	b.n	80064da <HAL_SD_CheckWriteOperation+0x34>

08006516 <HAL_TIM_Base_MspInit>:
 8006516:	4770      	bx	lr

08006518 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006518:	6803      	ldr	r3, [r0, #0]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	f042 0201 	orr.w	r2, r2, #1
 8006520:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	f042 0201 	orr.w	r2, r2, #1
 8006528:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800652a:	2000      	movs	r0, #0
 800652c:	4770      	bx	lr
	...

08006530 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006530:	4a2e      	ldr	r2, [pc, #184]	; (80065ec <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8006532:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006534:	4290      	cmp	r0, r2
 8006536:	d012      	beq.n	800655e <TIM_Base_SetConfig+0x2e>
 8006538:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800653c:	d00f      	beq.n	800655e <TIM_Base_SetConfig+0x2e>
 800653e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006542:	4290      	cmp	r0, r2
 8006544:	d00b      	beq.n	800655e <TIM_Base_SetConfig+0x2e>
 8006546:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800654a:	4290      	cmp	r0, r2
 800654c:	d007      	beq.n	800655e <TIM_Base_SetConfig+0x2e>
 800654e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006552:	4290      	cmp	r0, r2
 8006554:	d003      	beq.n	800655e <TIM_Base_SetConfig+0x2e>
 8006556:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800655a:	4290      	cmp	r0, r2
 800655c:	d119      	bne.n	8006592 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800655e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006564:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006566:	4a21      	ldr	r2, [pc, #132]	; (80065ec <TIM_Base_SetConfig+0xbc>)
 8006568:	4290      	cmp	r0, r2
 800656a:	d01d      	beq.n	80065a8 <TIM_Base_SetConfig+0x78>
 800656c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006570:	d01a      	beq.n	80065a8 <TIM_Base_SetConfig+0x78>
 8006572:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006576:	4290      	cmp	r0, r2
 8006578:	d016      	beq.n	80065a8 <TIM_Base_SetConfig+0x78>
 800657a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800657e:	4290      	cmp	r0, r2
 8006580:	d012      	beq.n	80065a8 <TIM_Base_SetConfig+0x78>
 8006582:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006586:	4290      	cmp	r0, r2
 8006588:	d00e      	beq.n	80065a8 <TIM_Base_SetConfig+0x78>
 800658a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800658e:	4290      	cmp	r0, r2
 8006590:	d00a      	beq.n	80065a8 <TIM_Base_SetConfig+0x78>
 8006592:	4a17      	ldr	r2, [pc, #92]	; (80065f0 <TIM_Base_SetConfig+0xc0>)
 8006594:	4290      	cmp	r0, r2
 8006596:	d007      	beq.n	80065a8 <TIM_Base_SetConfig+0x78>
 8006598:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800659c:	4290      	cmp	r0, r2
 800659e:	d003      	beq.n	80065a8 <TIM_Base_SetConfig+0x78>
 80065a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065a4:	4290      	cmp	r0, r2
 80065a6:	d103      	bne.n	80065b0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065a8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80065aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ae:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80065b0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065b2:	688b      	ldr	r3, [r1, #8]
 80065b4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80065b6:	680b      	ldr	r3, [r1, #0]
 80065b8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065ba:	4b0c      	ldr	r3, [pc, #48]	; (80065ec <TIM_Base_SetConfig+0xbc>)
 80065bc:	4298      	cmp	r0, r3
 80065be:	d00f      	beq.n	80065e0 <TIM_Base_SetConfig+0xb0>
 80065c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c4:	4298      	cmp	r0, r3
 80065c6:	d00b      	beq.n	80065e0 <TIM_Base_SetConfig+0xb0>
 80065c8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80065cc:	4298      	cmp	r0, r3
 80065ce:	d007      	beq.n	80065e0 <TIM_Base_SetConfig+0xb0>
 80065d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065d4:	4298      	cmp	r0, r3
 80065d6:	d003      	beq.n	80065e0 <TIM_Base_SetConfig+0xb0>
 80065d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065dc:	4298      	cmp	r0, r3
 80065de:	d101      	bne.n	80065e4 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065e0:	690b      	ldr	r3, [r1, #16]
 80065e2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065e4:	2301      	movs	r3, #1
 80065e6:	6143      	str	r3, [r0, #20]
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	40012c00 	.word	0x40012c00
 80065f0:	40014000 	.word	0x40014000

080065f4 <HAL_TIM_Base_Init>:
{
 80065f4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80065f6:	4604      	mov	r4, r0
 80065f8:	b1a0      	cbz	r0, 8006624 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80065fa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80065fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006602:	b91b      	cbnz	r3, 800660c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006604:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8006608:	f7ff ff85 	bl	8006516 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800660c:	2302      	movs	r3, #2
 800660e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006612:	6820      	ldr	r0, [r4, #0]
 8006614:	1d21      	adds	r1, r4, #4
 8006616:	f7ff ff8b 	bl	8006530 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800661a:	2301      	movs	r3, #1
 800661c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8006620:	2000      	movs	r0, #0
 8006622:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006624:	2001      	movs	r0, #1
}
 8006626:	bd10      	pop	{r4, pc}

08006628 <HAL_UART_MspInit>:
 8006628:	4770      	bx	lr

0800662a <HAL_UART_MspDeInit>:
 800662a:	4770      	bx	lr

0800662c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800662c:	b538      	push	{r3, r4, r5, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 800662e:	4605      	mov	r5, r0
 8006630:	b1a0      	cbz	r0, 800665c <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->State = HAL_UART_STATE_BUSY;
 8006632:	2302      	movs	r3, #2
 8006634:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006638:	6803      	ldr	r3, [r0, #0]
 800663a:	681a      	ldr	r2, [r3, #0]

  huart->Instance->CR1 = 0x0;
 800663c:	2400      	movs	r4, #0
  __HAL_UART_DISABLE(huart);
 800663e:	f022 0201 	bic.w	r2, r2, #1
 8006642:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0;
 8006644:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8006646:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8006648:	609c      	str	r4, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800664a:	f7ff ffee 	bl	800662a <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800664e:	66ec      	str	r4, [r5, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8006650:	f885 4068 	strb.w	r4, [r5, #104]	; 0x68
  huart->State = HAL_UART_STATE_RESET;
 8006654:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69

  return HAL_OK;
 8006658:	4620      	mov	r0, r4
 800665a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800665c:	2001      	movs	r0, #1
}
 800665e:	bd38      	pop	{r3, r4, r5, pc}

08006660 <HAL_UART_Receive_IT>:
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8006660:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8006664:	2b01      	cmp	r3, #1
 8006666:	d003      	beq.n	8006670 <HAL_UART_Receive_IT+0x10>
 8006668:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800666c:	2b12      	cmp	r3, #18
 800666e:	d147      	bne.n	8006700 <HAL_UART_Receive_IT+0xa0>
  {
    if((pData == NULL ) || (Size == 0))
 8006670:	2900      	cmp	r1, #0
 8006672:	d043      	beq.n	80066fc <HAL_UART_Receive_IT+0x9c>
 8006674:	2a00      	cmp	r2, #0
 8006676:	d041      	beq.n	80066fc <HAL_UART_Receive_IT+0x9c>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006678:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800667c:	2b01      	cmp	r3, #1
 800667e:	d03f      	beq.n	8006700 <HAL_UART_Receive_IT+0xa0>
 8006680:	2301      	movs	r3, #1
 8006682:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006686:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8006688:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 800668a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 800668e:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8006692:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8006696:	d123      	bne.n	80066e0 <HAL_UART_Receive_IT+0x80>
 8006698:	6903      	ldr	r3, [r0, #16]
 800669a:	b9fb      	cbnz	r3, 80066dc <HAL_UART_Receive_IT+0x7c>
 800669c:	f240 13ff 	movw	r3, #511	; 0x1ff
 80066a0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a4:	2300      	movs	r3, #0
 80066a6:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80066a8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80066ac:	6802      	ldr	r2, [r0, #0]
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80066ae:	2b12      	cmp	r3, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80066b0:	bf0c      	ite	eq
 80066b2:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 80066b4:	2322      	movne	r3, #34	; 0x22
 80066b6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80066ba:	6813      	ldr	r3, [r2, #0]
 80066bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066c0:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80066c2:	6893      	ldr	r3, [r2, #8]
 80066c4:	f043 0301 	orr.w	r3, r3, #1
 80066c8:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066ca:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(huart);
 80066cc:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066ce:	f041 0120 	orr.w	r1, r1, #32
    __HAL_UNLOCK(huart);
 80066d2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066d6:	6011      	str	r1, [r2, #0]

    return HAL_OK;
 80066d8:	4618      	mov	r0, r3
 80066da:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80066dc:	23ff      	movs	r3, #255	; 0xff
 80066de:	e7df      	b.n	80066a0 <HAL_UART_Receive_IT+0x40>
 80066e0:	b923      	cbnz	r3, 80066ec <HAL_UART_Receive_IT+0x8c>
 80066e2:	6903      	ldr	r3, [r0, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d0f9      	beq.n	80066dc <HAL_UART_Receive_IT+0x7c>
 80066e8:	237f      	movs	r3, #127	; 0x7f
 80066ea:	e7d9      	b.n	80066a0 <HAL_UART_Receive_IT+0x40>
 80066ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066f0:	d1d8      	bne.n	80066a4 <HAL_UART_Receive_IT+0x44>
 80066f2:	6903      	ldr	r3, [r0, #16]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0f7      	beq.n	80066e8 <HAL_UART_Receive_IT+0x88>
 80066f8:	233f      	movs	r3, #63	; 0x3f
 80066fa:	e7d1      	b.n	80066a0 <HAL_UART_Receive_IT+0x40>
      return HAL_ERROR;
 80066fc:	2001      	movs	r0, #1
 80066fe:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006700:	2002      	movs	r0, #2
  }
}
 8006702:	4770      	bx	lr

08006704 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8006708:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800670a:	6921      	ldr	r1, [r4, #16]
 800670c:	68a3      	ldr	r3, [r4, #8]
 800670e:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006710:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006712:	430b      	orrs	r3, r1
 8006714:	6961      	ldr	r1, [r4, #20]
 8006716:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006718:	49b0      	ldr	r1, [pc, #704]	; (80069dc <UART_SetConfig+0x2d8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800671a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800671c:	4001      	ands	r1, r0
 800671e:	430b      	orrs	r3, r1
 8006720:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006722:	686b      	ldr	r3, [r5, #4]
 8006724:	68e1      	ldr	r1, [r4, #12]
 8006726:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800672a:	430b      	orrs	r3, r1
 800672c:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800672e:	4bac      	ldr	r3, [pc, #688]	; (80069e0 <UART_SetConfig+0x2dc>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006730:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006732:	429d      	cmp	r5, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006734:	bf1c      	itt	ne
 8006736:	6a23      	ldrne	r3, [r4, #32]
 8006738:	4319      	orrne	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800673a:	68ab      	ldr	r3, [r5, #8]
 800673c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006740:	430b      	orrs	r3, r1
 8006742:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006744:	4ba7      	ldr	r3, [pc, #668]	; (80069e4 <UART_SetConfig+0x2e0>)
 8006746:	429d      	cmp	r5, r3
 8006748:	d118      	bne.n	800677c <UART_SetConfig+0x78>
 800674a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800674e:	49a6      	ldr	r1, [pc, #664]	; (80069e8 <UART_SetConfig+0x2e4>)
 8006750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006754:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006758:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800675c:	5ccb      	ldrb	r3, [r1, r3]
 800675e:	f040 80c6 	bne.w	80068ee <UART_SetConfig+0x1ea>
  {
    switch (clocksource)
 8006762:	2b08      	cmp	r3, #8
 8006764:	d828      	bhi.n	80067b8 <UART_SetConfig+0xb4>
 8006766:	e8df f013 	tbh	[pc, r3, lsl #1]
 800676a:	011a      	.short	0x011a
 800676c:	012f00bf 	.word	0x012f00bf
 8006770:	01140027 	.word	0x01140027
 8006774:	00270027 	.word	0x00270027
 8006778:	00330027 	.word	0x00330027
  UART_GETCLOCKSOURCE(huart, clocksource);
 800677c:	4b9b      	ldr	r3, [pc, #620]	; (80069ec <UART_SetConfig+0x2e8>)
 800677e:	429d      	cmp	r5, r3
 8006780:	d107      	bne.n	8006792 <UART_SetConfig+0x8e>
 8006782:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8006786:	499a      	ldr	r1, [pc, #616]	; (80069f0 <UART_SetConfig+0x2ec>)
 8006788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678c:	f003 030c 	and.w	r3, r3, #12
 8006790:	e7e2      	b.n	8006758 <UART_SetConfig+0x54>
 8006792:	4b98      	ldr	r3, [pc, #608]	; (80069f4 <UART_SetConfig+0x2f0>)
 8006794:	429d      	cmp	r5, r3
 8006796:	d120      	bne.n	80067da <UART_SetConfig+0xd6>
 8006798:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800679c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067a4:	2b10      	cmp	r3, #16
 80067a6:	f000 80f1 	beq.w	800698c <UART_SetConfig+0x288>
 80067aa:	d808      	bhi.n	80067be <UART_SetConfig+0xba>
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 80f3 	beq.w	8006998 <UART_SetConfig+0x294>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067b2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80067b6:	d134      	bne.n	8006822 <UART_SetConfig+0x11e>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80067b8:	2201      	movs	r2, #1
  uint16_t usartdiv                   = 0x0000;
 80067ba:	2300      	movs	r3, #0
 80067bc:	e0f9      	b.n	80069b2 <UART_SetConfig+0x2ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067be:	2b20      	cmp	r3, #32
 80067c0:	f000 80ff 	beq.w	80069c2 <UART_SetConfig+0x2be>
 80067c4:	2b30      	cmp	r3, #48	; 0x30
 80067c6:	d1f4      	bne.n	80067b2 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067c8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80067cc:	f040 80c1 	bne.w	8006952 <UART_SetConfig+0x24e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80067d0:	6860      	ldr	r0, [r4, #4]
 80067d2:	0843      	lsrs	r3, r0, #1
 80067d4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80067d8:	e0fc      	b.n	80069d4 <UART_SetConfig+0x2d0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067da:	4b87      	ldr	r3, [pc, #540]	; (80069f8 <UART_SetConfig+0x2f4>)
 80067dc:	429d      	cmp	r5, r3
 80067de:	d122      	bne.n	8006826 <UART_SetConfig+0x122>
 80067e0:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80067e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067ec:	2b40      	cmp	r3, #64	; 0x40
 80067ee:	f000 80c0 	beq.w	8006972 <UART_SetConfig+0x26e>
 80067f2:	d806      	bhi.n	8006802 <UART_SetConfig+0xfe>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 80b1 	beq.w	800695c <UART_SetConfig+0x258>
  if(UART_INSTANCE_LOWPOWER(huart))
 80067fa:	4b79      	ldr	r3, [pc, #484]	; (80069e0 <UART_SetConfig+0x2dc>)
 80067fc:	429d      	cmp	r5, r3
 80067fe:	d1d8      	bne.n	80067b2 <UART_SetConfig+0xae>
 8006800:	e00f      	b.n	8006822 <UART_SetConfig+0x11e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006802:	2b80      	cmp	r3, #128	; 0x80
 8006804:	f000 80bc 	beq.w	8006980 <UART_SetConfig+0x27c>
 8006808:	2bc0      	cmp	r3, #192	; 0xc0
 800680a:	d1f6      	bne.n	80067fa <UART_SetConfig+0xf6>
  if(UART_INSTANCE_LOWPOWER(huart))
 800680c:	4b74      	ldr	r3, [pc, #464]	; (80069e0 <UART_SetConfig+0x2dc>)
 800680e:	429d      	cmp	r5, r3
 8006810:	d1da      	bne.n	80067c8 <UART_SetConfig+0xc4>
 8006812:	2308      	movs	r3, #8
      tmpreg = (uint32_t) LSE_VALUE;
 8006814:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8006818:	6862      	ldr	r2, [r4, #4]
 800681a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800681e:	4281      	cmp	r1, r0
 8006820:	d92b      	bls.n	800687a <UART_SetConfig+0x176>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8006822:	2201      	movs	r2, #1
      break;
    }
  }

  return ret;
 8006824:	e04b      	b.n	80068be <UART_SetConfig+0x1ba>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006826:	4b75      	ldr	r3, [pc, #468]	; (80069fc <UART_SetConfig+0x2f8>)
 8006828:	429d      	cmp	r5, r3
 800682a:	d111      	bne.n	8006850 <UART_SetConfig+0x14c>
 800682c:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8006830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683c:	f000 8099 	beq.w	8006972 <UART_SetConfig+0x26e>
 8006840:	d9d8      	bls.n	80067f4 <UART_SetConfig+0xf0>
 8006842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006846:	f000 809b 	beq.w	8006980 <UART_SetConfig+0x27c>
 800684a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800684e:	e7dc      	b.n	800680a <UART_SetConfig+0x106>
 8006850:	4b63      	ldr	r3, [pc, #396]	; (80069e0 <UART_SetConfig+0x2dc>)
 8006852:	429d      	cmp	r5, r3
 8006854:	d1ad      	bne.n	80067b2 <UART_SetConfig+0xae>
 8006856:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800685a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800685e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006866:	f000 8084 	beq.w	8006972 <UART_SetConfig+0x26e>
 800686a:	d9c3      	bls.n	80067f4 <UART_SetConfig+0xf0>
 800686c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006870:	f000 8086 	beq.w	8006980 <UART_SetConfig+0x27c>
 8006874:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006878:	e7c7      	b.n	800680a <UART_SetConfig+0x106>
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800687a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800687e:	d8d0      	bhi.n	8006822 <UART_SetConfig+0x11e>
        switch (clocksource)
 8006880:	2b08      	cmp	r3, #8
 8006882:	d82f      	bhi.n	80068e4 <UART_SetConfig+0x1e0>
 8006884:	e8df f003 	tbb	[pc, r3]
 8006888:	2e1d2e05 	.word	0x2e1d2e05
 800688c:	2e2e2e25 	.word	0x2e2e2e25
 8006890:	28          	.byte	0x28
 8006891:	00          	.byte	0x00
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006892:	f7fe ff5f 	bl	8005754 <HAL_RCC_GetPCLK1Freq>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006896:	6862      	ldr	r2, [r4, #4]
 8006898:	f44f 7180 	mov.w	r1, #256	; 0x100
 800689c:	0856      	lsrs	r6, r2, #1
 800689e:	2700      	movs	r7, #0
 80068a0:	fbe1 6700 	umlal	r6, r7, r1, r0
 80068a4:	2300      	movs	r3, #0
 80068a6:	4630      	mov	r0, r6
 80068a8:	4639      	mov	r1, r7
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80068aa:	f7f9 fce9 	bl	8000280 <__aeabi_uldivmod>
          break;
 80068ae:	2200      	movs	r2, #0
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 80068b0:	4b53      	ldr	r3, [pc, #332]	; (8006a00 <UART_SetConfig+0x2fc>)
 80068b2:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80068b6:	4299      	cmp	r1, r3
 80068b8:	d8b3      	bhi.n	8006822 <UART_SetConfig+0x11e>
           huart->Instance->BRR = tmpreg;
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	60d8      	str	r0, [r3, #12]

}
 80068be:	4610      	mov	r0, r2
 80068c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80068c2:	4850      	ldr	r0, [pc, #320]	; (8006a04 <UART_SetConfig+0x300>)
 80068c4:	0855      	lsrs	r5, r2, #1
 80068c6:	2300      	movs	r3, #0
 80068c8:	2100      	movs	r1, #0
 80068ca:	1940      	adds	r0, r0, r5
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80068cc:	f141 0100 	adc.w	r1, r1, #0
 80068d0:	e7eb      	b.n	80068aa <UART_SetConfig+0x1a6>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80068d2:	f7fe fc65 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 80068d6:	e7de      	b.n	8006896 <UART_SetConfig+0x192>
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80068d8:	0850      	lsrs	r0, r2, #1
 80068da:	2100      	movs	r1, #0
 80068dc:	2300      	movs	r3, #0
 80068de:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80068e2:	e7f3      	b.n	80068cc <UART_SetConfig+0x1c8>
            ret = HAL_ERROR;
 80068e4:	2201      	movs	r2, #1
 80068e6:	e7e3      	b.n	80068b0 <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80068e8:	f7fe ff4c 	bl	8005784 <HAL_RCC_GetPCLK2Freq>
 80068ec:	e059      	b.n	80069a2 <UART_SetConfig+0x29e>
    switch (clocksource)
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	d897      	bhi.n	8006822 <UART_SetConfig+0x11e>
 80068f2:	a201      	add	r2, pc, #4	; (adr r2, 80068f8 <UART_SetConfig+0x1f4>)
 80068f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f8:	0800691d 	.word	0x0800691d
 80068fc:	08006931 	.word	0x08006931
 8006900:	08006937 	.word	0x08006937
 8006904:	08006823 	.word	0x08006823
 8006908:	0800694d 	.word	0x0800694d
 800690c:	08006823 	.word	0x08006823
 8006910:	08006823 	.word	0x08006823
 8006914:	08006823 	.word	0x08006823
 8006918:	08006953 	.word	0x08006953
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800691c:	f7fe ff1a 	bl	8005754 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006920:	6863      	ldr	r3, [r4, #4]
 8006922:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006926:	fbb0 f0f3 	udiv	r0, r0, r3
 800692a:	b280      	uxth	r0, r0
 800692c:	60e8      	str	r0, [r5, #12]
 800692e:	e01e      	b.n	800696e <UART_SetConfig+0x26a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006930:	f7fe ff28 	bl	8005784 <HAL_RCC_GetPCLK2Freq>
 8006934:	e7f4      	b.n	8006920 <UART_SetConfig+0x21c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006936:	6862      	ldr	r2, [r4, #4]
 8006938:	0853      	lsrs	r3, r2, #1
 800693a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800693e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006942:	fbb3 f3f2 	udiv	r3, r3, r2
 8006946:	b29b      	uxth	r3, r3
 8006948:	60eb      	str	r3, [r5, #12]
 800694a:	e010      	b.n	800696e <UART_SetConfig+0x26a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800694c:	f7fe fc28 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 8006950:	e7e6      	b.n	8006920 <UART_SetConfig+0x21c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006952:	6862      	ldr	r2, [r4, #4]
 8006954:	0853      	lsrs	r3, r2, #1
 8006956:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800695a:	e7f2      	b.n	8006942 <UART_SetConfig+0x23e>
  if(UART_INSTANCE_LOWPOWER(huart))
 800695c:	4b20      	ldr	r3, [pc, #128]	; (80069e0 <UART_SetConfig+0x2dc>)
 800695e:	429d      	cmp	r5, r3
 8006960:	d11a      	bne.n	8006998 <UART_SetConfig+0x294>
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8006962:	f7fe fef7 	bl	8005754 <HAL_RCC_GetPCLK1Freq>
      break;
 8006966:	2300      	movs	r3, #0
    if (tmpreg != 0)
 8006968:	2800      	cmp	r0, #0
 800696a:	f47f af55 	bne.w	8006818 <UART_SetConfig+0x114>
  HAL_StatusTypeDef ret               = HAL_OK;
 800696e:	2200      	movs	r2, #0
      break;
 8006970:	e7a5      	b.n	80068be <UART_SetConfig+0x1ba>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006972:	4b1b      	ldr	r3, [pc, #108]	; (80069e0 <UART_SetConfig+0x2dc>)
 8006974:	429d      	cmp	r5, r3
 8006976:	d109      	bne.n	800698c <UART_SetConfig+0x288>
      tmpreg = HAL_RCC_GetSysClockFreq();
 8006978:	f7fe fc12 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
      break;
 800697c:	2304      	movs	r3, #4
 800697e:	e7f3      	b.n	8006968 <UART_SetConfig+0x264>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006980:	4b17      	ldr	r3, [pc, #92]	; (80069e0 <UART_SetConfig+0x2dc>)
 8006982:	429d      	cmp	r5, r3
 8006984:	d11d      	bne.n	80069c2 <UART_SetConfig+0x2be>
 8006986:	2302      	movs	r3, #2
      tmpreg = (uint32_t) HSI_VALUE;
 8006988:	481f      	ldr	r0, [pc, #124]	; (8006a08 <UART_SetConfig+0x304>)
 800698a:	e745      	b.n	8006818 <UART_SetConfig+0x114>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800698c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006990:	d1dc      	bne.n	800694c <UART_SetConfig+0x248>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006992:	f7fe fc05 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 8006996:	e004      	b.n	80069a2 <UART_SetConfig+0x29e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006998:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800699c:	d1be      	bne.n	800691c <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800699e:	f7fe fed9 	bl	8005754 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80069a2:	6861      	ldr	r1, [r4, #4]
 80069a4:	084a      	lsrs	r2, r1, #1
 80069a6:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80069aa:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80069ae:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80069b0:	2200      	movs	r2, #0
    brrtemp = usartdiv & 0xFFF0;
 80069b2:	f023 010f 	bic.w	r1, r3, #15
    huart->Instance->BRR = brrtemp;
 80069b6:	6820      	ldr	r0, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80069b8:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80069bc:	430b      	orrs	r3, r1
 80069be:	60c3      	str	r3, [r0, #12]
 80069c0:	e77d      	b.n	80068be <UART_SetConfig+0x1ba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069c2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80069c6:	d1b6      	bne.n	8006936 <UART_SetConfig+0x232>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80069c8:	6860      	ldr	r0, [r4, #4]
 80069ca:	0843      	lsrs	r3, r0, #1
 80069cc:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80069d0:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80069d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80069d8:	e7e9      	b.n	80069ae <UART_SetConfig+0x2aa>
 80069da:	bf00      	nop
 80069dc:	efff69f3 	.word	0xefff69f3
 80069e0:	40008000 	.word	0x40008000
 80069e4:	40013800 	.word	0x40013800
 80069e8:	0800b793 	.word	0x0800b793
 80069ec:	40004400 	.word	0x40004400
 80069f0:	0800b797 	.word	0x0800b797
 80069f4:	40004800 	.word	0x40004800
 80069f8:	40004c00 	.word	0x40004c00
 80069fc:	40005000 	.word	0x40005000
 8006a00:	000ffcff 	.word	0x000ffcff
 8006a04:	f4240000 	.word	0xf4240000
 8006a08:	00f42400 	.word	0x00f42400

08006a0c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006a0e:	07da      	lsls	r2, r3, #31
{
 8006a10:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a12:	d506      	bpl.n	8006a22 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a14:	6801      	ldr	r1, [r0, #0]
 8006a16:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8006a18:	684a      	ldr	r2, [r1, #4]
 8006a1a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006a1e:	4322      	orrs	r2, r4
 8006a20:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a22:	079c      	lsls	r4, r3, #30
 8006a24:	d506      	bpl.n	8006a34 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a26:	6801      	ldr	r1, [r0, #0]
 8006a28:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006a2a:	684a      	ldr	r2, [r1, #4]
 8006a2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a30:	4322      	orrs	r2, r4
 8006a32:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a34:	0759      	lsls	r1, r3, #29
 8006a36:	d506      	bpl.n	8006a46 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a38:	6801      	ldr	r1, [r0, #0]
 8006a3a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006a3c:	684a      	ldr	r2, [r1, #4]
 8006a3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a42:	4322      	orrs	r2, r4
 8006a44:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a46:	071a      	lsls	r2, r3, #28
 8006a48:	d506      	bpl.n	8006a58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a4a:	6801      	ldr	r1, [r0, #0]
 8006a4c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006a4e:	684a      	ldr	r2, [r1, #4]
 8006a50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a54:	4322      	orrs	r2, r4
 8006a56:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a58:	06dc      	lsls	r4, r3, #27
 8006a5a:	d506      	bpl.n	8006a6a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a5c:	6801      	ldr	r1, [r0, #0]
 8006a5e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006a60:	688a      	ldr	r2, [r1, #8]
 8006a62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a66:	4322      	orrs	r2, r4
 8006a68:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a6a:	0699      	lsls	r1, r3, #26
 8006a6c:	d506      	bpl.n	8006a7c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a6e:	6801      	ldr	r1, [r0, #0]
 8006a70:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006a72:	688a      	ldr	r2, [r1, #8]
 8006a74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a78:	4322      	orrs	r2, r4
 8006a7a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a7c:	065a      	lsls	r2, r3, #25
 8006a7e:	d50f      	bpl.n	8006aa0 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a80:	6801      	ldr	r1, [r0, #0]
 8006a82:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006a84:	684a      	ldr	r2, [r1, #4]
 8006a86:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006a8a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a8c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a90:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a92:	d105      	bne.n	8006aa0 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a94:	684a      	ldr	r2, [r1, #4]
 8006a96:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006a98:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006a9c:	4322      	orrs	r2, r4
 8006a9e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aa0:	061b      	lsls	r3, r3, #24
 8006aa2:	d506      	bpl.n	8006ab2 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aa4:	6802      	ldr	r2, [r0, #0]
 8006aa6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006aa8:	6853      	ldr	r3, [r2, #4]
 8006aaa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006aae:	430b      	orrs	r3, r1
 8006ab0:	6053      	str	r3, [r2, #4]
 8006ab2:	bd10      	pop	{r4, pc}

08006ab4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8006ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab8:	4604      	mov	r4, r0
 8006aba:	460e      	mov	r6, r1
 8006abc:	4690      	mov	r8, r2
 8006abe:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8006ac0:	f7fd fb1e 	bl	8004100 <HAL_GetTick>
 8006ac4:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 8006ac6:	f1b8 0f00 	cmp.w	r8, #0
 8006aca:	d02f      	beq.n	8006b2c <UART_WaitOnFlagUntilTimeout+0x78>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8006acc:	6822      	ldr	r2, [r4, #0]
 8006ace:	69d3      	ldr	r3, [r2, #28]
 8006ad0:	ea36 0303 	bics.w	r3, r6, r3
 8006ad4:	d12f      	bne.n	8006b36 <UART_WaitOnFlagUntilTimeout+0x82>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006ad6:	1c6b      	adds	r3, r5, #1
 8006ad8:	d0f9      	beq.n	8006ace <UART_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8006ada:	b145      	cbz	r5, 8006aee <UART_WaitOnFlagUntilTimeout+0x3a>
 8006adc:	f7fd fb10 	bl	8004100 <HAL_GetTick>
 8006ae0:	1bc0      	subs	r0, r0, r7
 8006ae2:	4285      	cmp	r5, r0
 8006ae4:	d2f2      	bcs.n	8006acc <UART_WaitOnFlagUntilTimeout+0x18>
 8006ae6:	e002      	b.n	8006aee <UART_WaitOnFlagUntilTimeout+0x3a>
      if(Timeout != HAL_MAX_DELAY)
 8006ae8:	1c69      	adds	r1, r5, #1
 8006aea:	d020      	beq.n	8006b2e <UART_WaitOnFlagUntilTimeout+0x7a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8006aec:	b9cd      	cbnz	r5, 8006b22 <UART_WaitOnFlagUntilTimeout+0x6e>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006af6:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	f022 0220 	bic.w	r2, r2, #32
 8006afe:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b06:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b08:	689a      	ldr	r2, [r3, #8]
 8006b0a:	f022 0201 	bic.w	r2, r2, #1
 8006b0e:	609a      	str	r2, [r3, #8]

          huart->State= HAL_UART_STATE_READY;
 8006b10:	2301      	movs	r3, #1
 8006b12:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b16:	2300      	movs	r3, #0
 8006b18:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68

          return HAL_TIMEOUT;
 8006b1c:	2003      	movs	r0, #3
 8006b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8006b22:	f7fd faed 	bl	8004100 <HAL_GetTick>
 8006b26:	1bc0      	subs	r0, r0, r7
 8006b28:	4285      	cmp	r5, r0
 8006b2a:	d3e0      	bcc.n	8006aee <UART_WaitOnFlagUntilTimeout+0x3a>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8006b2c:	6822      	ldr	r2, [r4, #0]
 8006b2e:	69d3      	ldr	r3, [r2, #28]
 8006b30:	ea36 0303 	bics.w	r3, r6, r3
 8006b34:	d1d8      	bne.n	8006ae8 <UART_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 8006b36:	2000      	movs	r0, #0
 8006b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006b3c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b3c:	2200      	movs	r2, #0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b3e:	6803      	ldr	r3, [r0, #0]
{
 8006b40:	b510      	push	{r4, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b42:	66c2      	str	r2, [r0, #108]	; 0x6c
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	0719      	lsls	r1, r3, #28
{
 8006b48:	4604      	mov	r4, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b4a:	d413      	bmi.n	8006b74 <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	075b      	lsls	r3, r3, #29
 8006b52:	d508      	bpl.n	8006b66 <UART_CheckIdleState+0x2a>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f7ff ffa8 	bl	8006ab4 <UART_WaitOnFlagUntilTimeout>
 8006b64:	b970      	cbnz	r0, 8006b84 <UART_CheckIdleState+0x48>
  huart->State= HAL_UART_STATE_READY;
 8006b66:	2301      	movs	r3, #1
  __HAL_UNLOCK(huart);
 8006b68:	2000      	movs	r0, #0
  huart->State= HAL_UART_STATE_READY;
 8006b6a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8006b6e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  return HAL_OK;
 8006b72:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b78:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b7c:	f7ff ff9a 	bl	8006ab4 <UART_WaitOnFlagUntilTimeout>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d0e3      	beq.n	8006b4c <UART_CheckIdleState+0x10>
      return HAL_TIMEOUT;
 8006b84:	2003      	movs	r0, #3
 8006b86:	bd10      	pop	{r4, pc}

08006b88 <HAL_UART_Init>:
{
 8006b88:	b510      	push	{r4, lr}
  if(huart == NULL)
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	b360      	cbz	r0, 8006be8 <HAL_UART_Init+0x60>
  if(huart->State == HAL_UART_STATE_RESET)
 8006b8e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8006b92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006b96:	b91b      	cbnz	r3, 8006ba0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8006b98:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8006b9c:	f7ff fd44 	bl	8006628 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006ba0:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8006ba8:	6813      	ldr	r3, [r2, #0]
 8006baa:	f023 0301 	bic.w	r3, r3, #1
 8006bae:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f7ff fda7 	bl	8006704 <UART_SetConfig>
 8006bb6:	2801      	cmp	r0, #1
 8006bb8:	d016      	beq.n	8006be8 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bbc:	b113      	cbz	r3, 8006bc4 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f7ff ff24 	bl	8006a0c <UART_AdvFeatureConfig>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8006bc4:	6823      	ldr	r3, [r4, #0]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bcc:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bd4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8006bdc:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8006bde:	601a      	str	r2, [r3, #0]
}
 8006be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8006be4:	f7ff bfaa 	b.w	8006b3c <UART_CheckIdleState>
}
 8006be8:	2001      	movs	r0, #1
 8006bea:	bd10      	pop	{r4, pc}

08006bec <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006bf0:	680a      	ldr	r2, [r1, #0]
 8006bf2:	fa92 f4a2 	rbit	r4, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006bf6:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006bfa:	fab4 f484 	clz	r4, r4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006bfe:	2503      	movs	r5, #3
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006c00:	270f      	movs	r7, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006c02:	fa32 f304 	lsrs.w	r3, r2, r4
 8006c06:	d10d      	bne.n	8006c24 <LL_GPIO_Init+0x38>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006c08:	684b      	ldr	r3, [r1, #4]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d806      	bhi.n	8006c1e <LL_GPIO_Init+0x32>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006c10:	6843      	ldr	r3, [r0, #4]
 8006c12:	68c9      	ldr	r1, [r1, #12]
 8006c14:	ea23 0302 	bic.w	r3, r3, r2
 8006c18:	434a      	muls	r2, r1
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8006c1e:	2001      	movs	r0, #1
 8006c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006c24:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	d069      	beq.n	8006d00 <LL_GPIO_Init+0x114>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006c2c:	f8d1 8004 	ldr.w	r8, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006c30:	f8d0 9000 	ldr.w	r9, [r0]
 8006c34:	fa93 fca3 	rbit	ip, r3
 8006c38:	fabc fc8c 	clz	ip, ip
 8006c3c:	fa93 f6a3 	rbit	r6, r3
 8006c40:	fab6 f686 	clz	r6, r6
 8006c44:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006c48:	fa05 fc0c 	lsl.w	ip, r5, ip
 8006c4c:	0076      	lsls	r6, r6, #1
 8006c4e:	ea29 0c0c 	bic.w	ip, r9, ip
 8006c52:	fa08 f606 	lsl.w	r6, r8, r6
 8006c56:	ea4c 0606 	orr.w	r6, ip, r6
 8006c5a:	6006      	str	r6, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006c5c:	f108 36ff 	add.w	r6, r8, #4294967295
 8006c60:	2e01      	cmp	r6, #1
 8006c62:	d816      	bhi.n	8006c92 <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006c64:	6886      	ldr	r6, [r0, #8]
 8006c66:	fa93 fca3 	rbit	ip, r3
 8006c6a:	fabc fc8c 	clz	ip, ip
 8006c6e:	fa93 f9a3 	rbit	r9, r3
 8006c72:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006c76:	fa05 fc0c 	lsl.w	ip, r5, ip
 8006c7a:	ea26 0c0c 	bic.w	ip, r6, ip
 8006c7e:	fab9 f989 	clz	r9, r9
 8006c82:	688e      	ldr	r6, [r1, #8]
 8006c84:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8006c88:	fa06 f609 	lsl.w	r6, r6, r9
 8006c8c:	ea4c 0606 	orr.w	r6, ip, r6
 8006c90:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006c92:	68c6      	ldr	r6, [r0, #12]
 8006c94:	fa93 fca3 	rbit	ip, r3
 8006c98:	fabc fc8c 	clz	ip, ip
 8006c9c:	fa93 f9a3 	rbit	r9, r3
 8006ca0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006ca4:	fa05 fc0c 	lsl.w	ip, r5, ip
 8006ca8:	ea26 0c0c 	bic.w	ip, r6, ip
 8006cac:	fab9 f989 	clz	r9, r9
 8006cb0:	690e      	ldr	r6, [r1, #16]
 8006cb2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8006cb6:	fa06 f609 	lsl.w	r6, r6, r9
 8006cba:	ea4c 0606 	orr.w	r6, ip, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006cbe:	f1b8 0f02 	cmp.w	r8, #2
 8006cc2:	60c6      	str	r6, [r0, #12]
 8006cc4:	d11c      	bne.n	8006d00 <LL_GPIO_Init+0x114>
 8006cc6:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006cca:	fab6 f686 	clz	r6, r6
 8006cce:	2e07      	cmp	r6, #7
 8006cd0:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8006cd4:	dc16      	bgt.n	8006d04 <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006cd6:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8006cda:	fa93 f6a3 	rbit	r6, r3
 8006cde:	fab6 f686 	clz	r6, r6
 8006ce2:	fa93 f3a3 	rbit	r3, r3
 8006ce6:	fab3 f383 	clz	r3, r3
 8006cea:	00b6      	lsls	r6, r6, #2
 8006cec:	fa07 f606 	lsl.w	r6, r7, r6
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	ea28 0606 	bic.w	r6, r8, r6
 8006cf6:	fa0c fc03 	lsl.w	ip, ip, r3
 8006cfa:	ea46 060c 	orr.w	r6, r6, ip
 8006cfe:	6206      	str	r6, [r0, #32]
    pinpos++;
 8006d00:	3401      	adds	r4, #1
 8006d02:	e77e      	b.n	8006c02 <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006d04:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 8006d08:	0a1b      	lsrs	r3, r3, #8
 8006d0a:	fa93 f6a3 	rbit	r6, r3
 8006d0e:	fab6 f686 	clz	r6, r6
 8006d12:	fa93 f3a3 	rbit	r3, r3
 8006d16:	fab3 f383 	clz	r3, r3
 8006d1a:	00b6      	lsls	r6, r6, #2
 8006d1c:	fa07 f606 	lsl.w	r6, r7, r6
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	ea28 0606 	bic.w	r6, r8, r6
 8006d26:	fa0c f303 	lsl.w	r3, ip, r3
 8006d2a:	4333      	orrs	r3, r6
 8006d2c:	6243      	str	r3, [r0, #36]	; 0x24
 8006d2e:	e7e7      	b.n	8006d00 <LL_GPIO_Init+0x114>

08006d30 <LL_RTC_TIME_Config>:
{
 8006d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d34:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006d38:	f44f 1740 	mov.w	r7, #3145728	; 0x300000
 8006d3c:	fa97 f7a7 	rbit	r7, r7
 8006d40:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8006d44:	fab7 f787 	clz	r7, r7
 8006d48:	fa94 f4a4 	rbit	r4, r4
 8006d4c:	f44f 46e0 	mov.w	r6, #28672	; 0x7000
 8006d50:	fab4 fa84 	clz	sl, r4
 8006d54:	fa96 f6a6 	rbit	r6, r6
 8006d58:	f44f 6970 	mov.w	r9, #3840	; 0xf00
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8006d5c:	fab6 f686 	clz	r6, r6
 8006d60:	fa99 f9a9 	rbit	r9, r9
 8006d64:	2570      	movs	r5, #112	; 0x70
 8006d66:	fab9 f989 	clz	r9, r9
 8006d6a:	fa95 f5a5 	rbit	r5, r5
 8006d6e:	f04f 080f 	mov.w	r8, #15
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8006d72:	fab5 f585 	clz	r5, r5
 8006d76:	fa98 f8a8 	rbit	r8, r8
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8006d7a:	f8d0 e000 	ldr.w	lr, [r0]
 8006d7e:	f02e 1e7f 	bic.w	lr, lr, #8323199	; 0x7f007f
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8006d82:	f002 040f 	and.w	r4, r2, #15
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8006d86:	f42e 4efe 	bic.w	lr, lr, #32512	; 0x7f00
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8006d8a:	fa04 f40a 	lsl.w	r4, r4, sl
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8006d8e:	ea4e 0101 	orr.w	r1, lr, r1
 8006d92:	4321      	orrs	r1, r4
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8006d94:	f003 040f 	and.w	r4, r3, #15
 8006d98:	fa04 f909 	lsl.w	r9, r4, r9
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8006d9c:	fab8 f888 	clz	r8, r8
 8006da0:	f00c 040f 	and.w	r4, ip, #15
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8006da4:	ea41 0109 	orr.w	r1, r1, r9
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8006da8:	fa04 f808 	lsl.w	r8, r4, r8
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8006dac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006db0:	3f04      	subs	r7, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8006db2:	ea41 0108 	orr.w	r1, r1, r8
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8006db6:	40ba      	lsls	r2, r7
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8006db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dbc:	3e04      	subs	r6, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8006dbe:	430a      	orrs	r2, r1
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8006dc0:	40b3      	lsls	r3, r6
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8006dc2:	f00c 0cf0 	and.w	ip, ip, #240	; 0xf0
 8006dc6:	3d04      	subs	r5, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8006dc8:	4313      	orrs	r3, r2
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8006dca:	fa0c f505 	lsl.w	r5, ip, r5
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8006dce:	432b      	orrs	r3, r5
 8006dd0:	6003      	str	r3, [r0, #0]
 8006dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006dd8 <LL_RTC_DATE_Config>:
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  * @param  Year Value between Min_Data=0x00 and Max_Data=0x99
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DATE_Config(RTC_TypeDef *RTCx, uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 8006dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ddc:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8006de0:	f44f 4a60 	mov.w	sl, #57344	; 0xe000
 8006de4:	fa9a faaa 	rbit	sl, sl
 8006de8:	f44f 0770 	mov.w	r7, #15728640	; 0xf00000
  register uint32_t temp = 0U;

  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 8006dec:	faba fa8a 	clz	sl, sl
 8006df0:	fa97 f7a7 	rbit	r7, r7
 8006df4:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8006df8:	fab7 f787 	clz	r7, r7
 8006dfc:	fa94 f4a4 	rbit	r4, r4
 8006e00:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8006e04:	fab4 fb84 	clz	fp, r4
 8006e08:	fa96 f6a6 	rbit	r6, r6
 8006e0c:	f44f 6870 	mov.w	r8, #3840	; 0xf00
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8006e10:	fab6 f686 	clz	r6, r6
 8006e14:	fa98 f8a8 	rbit	r8, r8
 8006e18:	2530      	movs	r5, #48	; 0x30
 8006e1a:	fab8 f888 	clz	r8, r8
 8006e1e:	fa95 f5a5 	rbit	r5, r5
 8006e22:	f04f 0c0f 	mov.w	ip, #15
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8006e26:	fab5 f585 	clz	r5, r5
 8006e2a:	fa9c fcac 	rbit	ip, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8006e2e:	f00e 040f 	and.w	r4, lr, #15
 8006e32:	fa04 f40b 	lsl.w	r4, r4, fp
  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 8006e36:	fa01 f10a 	lsl.w	r1, r1, sl

  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8006e3a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8006e3e:	4321      	orrs	r1, r4
 8006e40:	4c12      	ldr	r4, [pc, #72]	; (8006e8c <LL_RTC_DATE_Config+0xb4>)
 8006e42:	ea09 0404 	and.w	r4, r9, r4
 8006e46:	4321      	orrs	r1, r4
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8006e48:	f003 040f 	and.w	r4, r3, #15
 8006e4c:	fa04 f808 	lsl.w	r8, r4, r8
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8006e50:	fabc fc8c 	clz	ip, ip
 8006e54:	f002 040f 	and.w	r4, r2, #15
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8006e58:	ea41 0108 	orr.w	r1, r1, r8
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8006e5c:	fa04 fc0c 	lsl.w	ip, r4, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8006e60:	f00e 0ef0 	and.w	lr, lr, #240	; 0xf0
 8006e64:	3f04      	subs	r7, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8006e66:	ea41 010c 	orr.w	r1, r1, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8006e6a:	fa0e f707 	lsl.w	r7, lr, r7
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8006e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e72:	3e04      	subs	r6, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8006e74:	4339      	orrs	r1, r7
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8006e76:	40b3      	lsls	r3, r6
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8006e78:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006e7c:	3d04      	subs	r5, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8006e7e:	430b      	orrs	r3, r1
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8006e80:	40aa      	lsls	r2, r5
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8006e82:	431a      	orrs	r2, r3
 8006e84:	6042      	str	r2, [r0, #4]
 8006e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e8a:	bf00      	nop
 8006e8c:	ff0000c0 	.word	0xff0000c0

08006e90 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8006e90:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8006e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e96:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8006e98:	68c3      	ldr	r3, [r0, #12]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8006e9a:	065a      	lsls	r2, r3, #25
 8006e9c:	d41c      	bmi.n	8006ed8 <LL_RTC_EnterInitMode+0x48>
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8006e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea2:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8006ea4:	68c3      	ldr	r3, [r0, #12]
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8006ea6:	490d      	ldr	r1, [pc, #52]	; (8006edc <LL_RTC_EnterInitMode+0x4c>)
 8006ea8:	f3c3 1380 	ubfx	r3, r3, #6, #1
  ErrorStatus status = SUCCESS;
 8006eac:	2201      	movs	r2, #1
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 8006eae:	9c01      	ldr	r4, [sp, #4]
 8006eb0:	b104      	cbz	r4, 8006eb4 <LL_RTC_EnterInitMode+0x24>
 8006eb2:	b113      	cbz	r3, 8006eba <LL_RTC_EnterInitMode+0x2a>
        status = ERROR;
      }
    }
  }
  return status;
}
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	b002      	add	sp, #8
 8006eb8:	bd10      	pop	{r4, pc}
 8006eba:	680b      	ldr	r3, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8006ebc:	03db      	lsls	r3, r3, #15
        timeout --;
 8006ebe:	bf42      	ittt	mi
 8006ec0:	9b01      	ldrmi	r3, [sp, #4]
 8006ec2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8006ec6:	9301      	strmi	r3, [sp, #4]
 8006ec8:	68c3      	ldr	r3, [r0, #12]
      if (timeout == 0U)
 8006eca:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 8006ecc:	2c00      	cmp	r4, #0
 8006ece:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006ed2:	bf08      	it	eq
 8006ed4:	2200      	moveq	r2, #0
 8006ed6:	e7ea      	b.n	8006eae <LL_RTC_EnterInitMode+0x1e>
  ErrorStatus status = SUCCESS;
 8006ed8:	2201      	movs	r2, #1
 8006eda:	e7eb      	b.n	8006eb4 <LL_RTC_EnterInitMode+0x24>
 8006edc:	e000e010 	.word	0xe000e010

08006ee0 <LL_RTC_Init>:
{
 8006ee0:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8006ee2:	23ca      	movs	r3, #202	; 0xca
 8006ee4:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8006ee6:	2353      	movs	r3, #83	; 0x53
 8006ee8:	6243      	str	r3, [r0, #36]	; 0x24
 8006eea:	4604      	mov	r4, r0
 8006eec:	460d      	mov	r5, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8006eee:	f7ff ffcf 	bl	8006e90 <LL_RTC_EnterInitMode>
 8006ef2:	b1f0      	cbz	r0, 8006f32 <LL_RTC_Init+0x52>
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8006ef4:	68a3      	ldr	r3, [r4, #8]
 8006ef6:	682a      	ldr	r2, [r5, #0]
 8006ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8006f00:	6923      	ldr	r3, [r4, #16]
 8006f02:	68aa      	ldr	r2, [r5, #8]
 8006f04:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006f08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	6123      	str	r3, [r4, #16]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_POSITION_PRER_PREDIV_A);
 8006f10:	6921      	ldr	r1, [r4, #16]
 8006f12:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
 8006f16:	fa93 f3a3 	rbit	r3, r3
 8006f1a:	fab3 f283 	clz	r2, r3
 8006f1e:	686b      	ldr	r3, [r5, #4]
 8006f20:	4093      	lsls	r3, r2
 8006f22:	f421 02fe 	bic.w	r2, r1, #8323072	; 0x7f0000
 8006f26:	4313      	orrs	r3, r2
 8006f28:	6123      	str	r3, [r4, #16]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8006f2a:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8006f2e:	60e3      	str	r3, [r4, #12]
    status = SUCCESS;
 8006f30:	2001      	movs	r0, #1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8006f32:	23ff      	movs	r3, #255	; 0xff
 8006f34:	6263      	str	r3, [r4, #36]	; 0x24
}
 8006f36:	bd38      	pop	{r3, r4, r5, pc}

08006f38 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8006f38:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8006f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f3e:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8006f40:	68c3      	ldr	r3, [r0, #12]
 8006f42:	491e      	ldr	r1, [pc, #120]	; (8006fbc <LL_RTC_WaitForSynchro+0x84>)
 8006f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f48:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 8006f4c:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8006f4e:	68c2      	ldr	r2, [r0, #12]
  ErrorStatus status = SUCCESS;
 8006f50:	2301      	movs	r3, #1
 8006f52:	f3c2 1240 	ubfx	r2, r2, #5, #1
  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
  while ((timeout != 0U) && (tmp != 0U))
 8006f56:	9c01      	ldr	r4, [sp, #4]
 8006f58:	b91c      	cbnz	r4, 8006f62 <LL_RTC_WaitForSynchro+0x2a>
    {
      status = ERROR;
    }
  }

  if (status != ERROR)
 8006f5a:	b99b      	cbnz	r3, 8006f84 <LL_RTC_WaitForSynchro+0x4c>
      }
    }
  }

  return (status);
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	b002      	add	sp, #8
 8006f60:	bd10      	pop	{r4, pc}
  while ((timeout != 0U) && (tmp != 0U))
 8006f62:	2a00      	cmp	r2, #0
 8006f64:	d0f9      	beq.n	8006f5a <LL_RTC_WaitForSynchro+0x22>
 8006f66:	680a      	ldr	r2, [r1, #0]
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8006f68:	03d4      	lsls	r4, r2, #15
      timeout--;
 8006f6a:	bf42      	ittt	mi
 8006f6c:	9a01      	ldrmi	r2, [sp, #4]
 8006f6e:	f102 32ff 	addmi.w	r2, r2, #4294967295
 8006f72:	9201      	strmi	r2, [sp, #4]
 8006f74:	68c2      	ldr	r2, [r0, #12]
    if (timeout == 0U)
 8006f76:	9c01      	ldr	r4, [sp, #4]
      status = ERROR;
 8006f78:	2c00      	cmp	r4, #0
 8006f7a:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8006f7e:	bf08      	it	eq
 8006f80:	2300      	moveq	r3, #0
 8006f82:	e7e8      	b.n	8006f56 <LL_RTC_WaitForSynchro+0x1e>
    timeout = RTC_SYNCHRO_TIMEOUT;
 8006f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f88:	9201      	str	r2, [sp, #4]
 8006f8a:	68c2      	ldr	r2, [r0, #12]
 8006f8c:	490b      	ldr	r1, [pc, #44]	; (8006fbc <LL_RTC_WaitForSynchro+0x84>)
 8006f8e:	f3c2 1240 	ubfx	r2, r2, #5, #1
    while ((timeout != 0U) && (tmp != 1U))
 8006f92:	9c01      	ldr	r4, [sp, #4]
 8006f94:	2c00      	cmp	r4, #0
 8006f96:	d0e1      	beq.n	8006f5c <LL_RTC_WaitForSynchro+0x24>
 8006f98:	2a00      	cmp	r2, #0
 8006f9a:	d1df      	bne.n	8006f5c <LL_RTC_WaitForSynchro+0x24>
 8006f9c:	680a      	ldr	r2, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8006f9e:	03d2      	lsls	r2, r2, #15
        timeout--;
 8006fa0:	bf42      	ittt	mi
 8006fa2:	9a01      	ldrmi	r2, [sp, #4]
 8006fa4:	f102 32ff 	addmi.w	r2, r2, #4294967295
 8006fa8:	9201      	strmi	r2, [sp, #4]
 8006faa:	68c2      	ldr	r2, [r0, #12]
      if (timeout == 0U)
 8006fac:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 8006fae:	2c00      	cmp	r4, #0
 8006fb0:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8006fb4:	bf08      	it	eq
 8006fb6:	2300      	moveq	r3, #0
 8006fb8:	e7eb      	b.n	8006f92 <LL_RTC_WaitForSynchro+0x5a>
 8006fba:	bf00      	nop
 8006fbc:	e000e010 	.word	0xe000e010

08006fc0 <LL_RTC_TIME_Init>:
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8006fc0:	6883      	ldr	r3, [r0, #8]
{
 8006fc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fc4:	4615      	mov	r5, r2
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8006fc6:	065a      	lsls	r2, r3, #25
      RTC_TimeStruct->TimeFormat = 0x00U;
 8006fc8:	bf5c      	itt	pl
 8006fca:	2300      	movpl	r3, #0
 8006fcc:	602b      	strpl	r3, [r5, #0]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8006fce:	23ca      	movs	r3, #202	; 0xca
 8006fd0:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8006fd2:	2353      	movs	r3, #83	; 0x53
 8006fd4:	6243      	str	r3, [r0, #36]	; 0x24
{
 8006fd6:	4604      	mov	r4, r0
  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8006fd8:	460e      	mov	r6, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8006fda:	f7ff ff59 	bl	8006e90 <LL_RTC_EnterInitMode>
 8006fde:	b190      	cbz	r0, 8007006 <LL_RTC_TIME_Init+0x46>
 8006fe0:	796b      	ldrb	r3, [r5, #5]
 8006fe2:	792a      	ldrb	r2, [r5, #4]
 8006fe4:	79a8      	ldrb	r0, [r5, #6]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8006fe6:	b196      	cbz	r6, 800700e <LL_RTC_TIME_Init+0x4e>
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8006fe8:	9000      	str	r0, [sp, #0]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8006fea:	6829      	ldr	r1, [r5, #0]
 8006fec:	4620      	mov	r0, r4
 8006fee:	f7ff fe9f 	bl	8006d30 <LL_RTC_TIME_Config>
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8006ff2:	4b14      	ldr	r3, [pc, #80]	; (8007044 <LL_RTC_TIME_Init+0x84>)
 8006ff4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ff8:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8006ffa:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8006ffc:	069b      	lsls	r3, r3, #26
 8006ffe:	d41e      	bmi.n	800703e <LL_RTC_TIME_Init+0x7e>
      status = LL_RTC_WaitForSynchro(RTCx);
 8007000:	4620      	mov	r0, r4
 8007002:	f7ff ff99 	bl	8006f38 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8007006:	23ff      	movs	r3, #255	; 0xff
 8007008:	6263      	str	r3, [r4, #36]	; 0x24
}
 800700a:	b002      	add	sp, #8
 800700c:	bd70      	pop	{r4, r5, r6, pc}
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 800700e:	210a      	movs	r1, #10
 8007010:	fbb3 f6f1 	udiv	r6, r3, r1
 8007014:	fb01 3316 	mls	r3, r1, r6, r3
 8007018:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 800701c:	fbb2 f6f1 	udiv	r6, r2, r1
 8007020:	fb01 2216 	mls	r2, r1, r6, r2
 8007024:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 8007028:	fbb0 f6f1 	udiv	r6, r0, r1
 800702c:	fb01 0116 	mls	r1, r1, r6, r0
 8007030:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8007034:	b2c9      	uxtb	r1, r1
 8007036:	9100      	str	r1, [sp, #0]
 8007038:	b2db      	uxtb	r3, r3
 800703a:	b2d2      	uxtb	r2, r2
 800703c:	e7d5      	b.n	8006fea <LL_RTC_TIME_Init+0x2a>
      status = SUCCESS;
 800703e:	2001      	movs	r0, #1
 8007040:	e7e1      	b.n	8007006 <LL_RTC_TIME_Init+0x46>
 8007042:	bf00      	nop
 8007044:	40002800 	.word	0x40002800

08007048 <LL_RTC_DATE_Init>:
{
 8007048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800704a:	4604      	mov	r4, r0
 800704c:	4616      	mov	r6, r2
  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 800704e:	460f      	mov	r7, r1
 8007050:	b931      	cbnz	r1, 8007060 <LL_RTC_DATE_Init+0x18>
 8007052:	7853      	ldrb	r3, [r2, #1]
 8007054:	06da      	lsls	r2, r3, #27
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 8007056:	bf42      	ittt	mi
 8007058:	f023 0310 	bicmi.w	r3, r3, #16
 800705c:	330a      	addmi	r3, #10
 800705e:	7073      	strbmi	r3, [r6, #1]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8007060:	23ca      	movs	r3, #202	; 0xca
 8007062:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8007064:	2353      	movs	r3, #83	; 0x53
 8007066:	6263      	str	r3, [r4, #36]	; 0x24
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8007068:	4620      	mov	r0, r4
 800706a:	f7ff ff11 	bl	8006e90 <LL_RTC_EnterInitMode>
 800706e:	b198      	cbz	r0, 8007098 <LL_RTC_DATE_Init+0x50>
 8007070:	7873      	ldrb	r3, [r6, #1]
 8007072:	78b5      	ldrb	r5, [r6, #2]
 8007074:	7831      	ldrb	r1, [r6, #0]
 8007076:	78f6      	ldrb	r6, [r6, #3]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8007078:	b197      	cbz	r7, 80070a0 <LL_RTC_DATE_Init+0x58>
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 800707a:	9600      	str	r6, [sp, #0]
 800707c:	462a      	mov	r2, r5
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800707e:	4620      	mov	r0, r4
 8007080:	f7ff feaa 	bl	8006dd8 <LL_RTC_DATE_Config>
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8007084:	4b13      	ldr	r3, [pc, #76]	; (80070d4 <LL_RTC_DATE_Init+0x8c>)
 8007086:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800708a:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 800708c:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 800708e:	069b      	lsls	r3, r3, #26
 8007090:	d41e      	bmi.n	80070d0 <LL_RTC_DATE_Init+0x88>
      status = LL_RTC_WaitForSynchro(RTCx);
 8007092:	4620      	mov	r0, r4
 8007094:	f7ff ff50 	bl	8006f38 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8007098:	23ff      	movs	r3, #255	; 0xff
 800709a:	6263      	str	r3, [r4, #36]	; 0x24
}
 800709c:	b003      	add	sp, #12
 800709e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 80070a0:	200a      	movs	r0, #10
 80070a2:	fbb3 f2f0 	udiv	r2, r3, r0
 80070a6:	fb00 3312 	mls	r3, r0, r2, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80070aa:	fbb5 f7f0 	udiv	r7, r5, r0
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 80070ae:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80070b2:	fb00 5217 	mls	r2, r0, r7, r5
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 80070b6:	fbb6 f5f0 	udiv	r5, r6, r0
 80070ba:	fb00 6015 	mls	r0, r0, r5, r6
 80070be:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80070c2:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 80070c6:	b2c0      	uxtb	r0, r0
 80070c8:	9000      	str	r0, [sp, #0]
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	b2d2      	uxtb	r2, r2
 80070ce:	e7d6      	b.n	800707e <LL_RTC_DATE_Init+0x36>
      status = SUCCESS;
 80070d0:	2001      	movs	r0, #1
 80070d2:	e7e1      	b.n	8007098 <LL_RTC_DATE_Init+0x50>
 80070d4:	40002800 	.word	0x40002800

080070d8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80070d8:	b084      	sub	sp, #16
 80070da:	b510      	push	{r4, lr}
 80070dc:	ac03      	add	r4, sp, #12
 80070de:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 80070e2:	9904      	ldr	r1, [sp, #16]
 80070e4:	9b03      	ldr	r3, [sp, #12]
 80070e6:	6842      	ldr	r2, [r0, #4]
 80070e8:	430b      	orrs	r3, r1
 80070ea:	9905      	ldr	r1, [sp, #20]
 80070ec:	430b      	orrs	r3, r1
 80070ee:	9906      	ldr	r1, [sp, #24]
 80070f0:	430b      	orrs	r3, r1
 80070f2:	9907      	ldr	r1, [sp, #28]
 80070f4:	430b      	orrs	r3, r1
 80070f6:	9908      	ldr	r1, [sp, #32]
                                              Init.BusWide             |\
                                              Init.HardwareFlowControl |\
                                              Init.ClockDiv);  

  return HAL_OK;
}
 80070f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 80070fc:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 8007100:	430b      	orrs	r3, r1
 8007102:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8007106:	4313      	orrs	r3, r2
 8007108:	6043      	str	r3, [r0, #4]
}
 800710a:	b004      	add	sp, #16
 800710c:	2000      	movs	r0, #0
 800710e:	4770      	bx	lr

08007110 <SDMMC_ReadFIFO>:
 8007110:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8007114:	4770      	bx	lr

08007116 <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007116:	2303      	movs	r3, #3
 8007118:	6003      	str	r3, [r0, #0]
  
  return HAL_OK; 
}
 800711a:	2000      	movs	r0, #0
 800711c:	4770      	bx	lr

0800711e <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800711e:	6800      	ldr	r0, [r0, #0]
}
 8007120:	f000 0003 	and.w	r0, r0, #3
 8007124:	4770      	bx	lr

08007126 <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007126:	680b      	ldr	r3, [r1, #0]
 8007128:	6083      	str	r3, [r0, #8]

  /* Set SDMMC command parameters */
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800712a:	68c3      	ldr	r3, [r0, #12]
 800712c:	684a      	ldr	r2, [r1, #4]
 800712e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007132:	f023 030f 	bic.w	r3, r3, #15
 8007136:	4313      	orrs	r3, r2
 8007138:	688a      	ldr	r2, [r1, #8]
 800713a:	4313      	orrs	r3, r2
 800713c:	68ca      	ldr	r2, [r1, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	690a      	ldr	r2, [r1, #16]
 8007142:	4313      	orrs	r3, r2
 8007144:	60c3      	str	r3, [r0, #12]
                                          Command->Response         |\
                                          Command->WaitForInterrupt |\
                                          Command->CPSM); 
  
  return HAL_OK;  
}
 8007146:	2000      	movs	r0, #0
 8007148:	4770      	bx	lr

0800714a <SDMMC_GetCommandResponse>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
  return (uint8_t)(SDMMCx->RESPCMD);
 800714a:	6900      	ldr	r0, [r0, #16]
}
 800714c:	b2c0      	uxtb	r0, r0
 800714e:	4770      	bx	lr

08007150 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007150:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8007152:	3014      	adds	r0, #20
 8007154:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 8007156:	2300      	movs	r3, #0
 8007158:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800715a:	9101      	str	r1, [sp, #4]
  
  return (*(__IO uint32_t *) tmp);
 800715c:	9b01      	ldr	r3, [sp, #4]
 800715e:	6818      	ldr	r0, [r3, #0]
}  
 8007160:	b002      	add	sp, #8
 8007162:	4770      	bx	lr

08007164 <SDMMC_DataConfig>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007164:	680b      	ldr	r3, [r1, #0]
 8007166:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007168:	684b      	ldr	r3, [r1, #4]
 800716a:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 800716c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800716e:	688a      	ldr	r2, [r1, #8]
 8007170:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 8007174:	4313      	orrs	r3, r2
 8007176:	68ca      	ldr	r2, [r1, #12]
 8007178:	4313      	orrs	r3, r2
 800717a:	690a      	ldr	r2, [r1, #16]
 800717c:	4313      	orrs	r3, r2
 800717e:	694a      	ldr	r2, [r1, #20]
 8007180:	4313      	orrs	r3, r2
 8007182:	62c3      	str	r3, [r0, #44]	; 0x2c
                                              Data->TransferMode  |\
                                              Data->DPSM);

  return HAL_OK;

}
 8007184:	2000      	movs	r0, #0
 8007186:	4770      	bx	lr

08007188 <LL_SPI_Init>:
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8007188:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800718a:	065b      	lsls	r3, r3, #25
{
 800718c:	b570      	push	{r4, r5, r6, lr}
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800718e:	d426      	bmi.n	80071de <LL_SPI_Init+0x56>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8007190:	e891 0048 	ldmia.w	r1, {r3, r6}
 8007194:	4333      	orrs	r3, r6
 8007196:	68ce      	ldr	r6, [r1, #12]
 8007198:	694d      	ldr	r5, [r1, #20]
 800719a:	6804      	ldr	r4, [r0, #0]
 800719c:	6a0a      	ldr	r2, [r1, #32]
 800719e:	4333      	orrs	r3, r6
 80071a0:	690e      	ldr	r6, [r1, #16]
 80071a2:	4333      	orrs	r3, r6
 80071a4:	698e      	ldr	r6, [r1, #24]
 80071a6:	432b      	orrs	r3, r5
 80071a8:	4333      	orrs	r3, r6
 80071aa:	69ce      	ldr	r6, [r1, #28]
 80071ac:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80071b0:	4333      	orrs	r3, r6
 80071b2:	f024 04bf 	bic.w	r4, r4, #191	; 0xbf
 80071b6:	4313      	orrs	r3, r2
 80071b8:	4323      	orrs	r3, r4
 80071ba:	6003      	str	r3, [r0, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80071bc:	6844      	ldr	r4, [r0, #4]
 80071be:	688b      	ldr	r3, [r1, #8]
 80071c0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
 80071c4:	ea43 4315 	orr.w	r3, r3, r5, lsr #16
 80071c8:	f024 0404 	bic.w	r4, r4, #4
 80071cc:	4323      	orrs	r3, r4

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80071ce:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    MODIFY_REG(SPIx->CR2,
 80071d2:	6043      	str	r3, [r0, #4]
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80071d4:	d101      	bne.n	80071da <LL_SPI_Init+0x52>
 80071d6:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80071d8:	6103      	str	r3, [r0, #16]
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 80071da:	2001      	movs	r0, #1
  }

  return status;
}
 80071dc:	bd70      	pop	{r4, r5, r6, pc}
  ErrorStatus status = ERROR;
 80071de:	2000      	movs	r0, #0
 80071e0:	bd70      	pop	{r4, r5, r6, pc}

080071e2 <USB_CoreInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071e2:	b084      	sub	sp, #16
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	ad05      	add	r5, sp, #20
 80071e8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071ec:	68c3      	ldr	r3, [r0, #12]
 80071ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
{
 80071f2:	4604      	mov	r4, r0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071f4:	60c3      	str	r3, [r0, #12]
  
  /* Reset after a PHY select and set Host mode */
  USB_CoreReset(USBx);
 80071f6:	f000 fb75 	bl	80078e4 <USB_CoreReset>
  
  /* Deactivate the power down*/
  USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80071fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80071fe:	63a3      	str	r3, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8007200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007204:	2000      	movs	r0, #0
 8007206:	b004      	add	sp, #16
 8007208:	4770      	bx	lr

0800720a <USB_EnableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800720a:	6883      	ldr	r3, [r0, #8]
 800720c:	f043 0301 	orr.w	r3, r3, #1
 8007210:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8007212:	2000      	movs	r0, #0
 8007214:	4770      	bx	lr

08007216 <USB_DisableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007216:	6883      	ldr	r3, [r0, #8]
 8007218:	f023 0301 	bic.w	r3, r3, #1
 800721c:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 800721e:	2000      	movs	r0, #0
 8007220:	4770      	bx	lr

08007222 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_ModeTypeDef mode)
{
 8007222:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8007224:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_HOST_MODE)
 8007226:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8007228:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800722c:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_HOST_MODE)
 800722e:	d108      	bne.n	8007242 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8007230:	68c3      	ldr	r3, [r0, #12]
 8007232:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007236:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50);
 8007238:	2032      	movs	r0, #50	; 0x32
 800723a:	f7fc ff67 	bl	800410c <HAL_Delay>
  
  return HAL_OK;
}
 800723e:	2000      	movs	r0, #0
 8007240:	bd08      	pop	{r3, pc}
  else if ( mode == USB_DEVICE_MODE)
 8007242:	2900      	cmp	r1, #0
 8007244:	d1f8      	bne.n	8007238 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8007246:	68c3      	ldr	r3, [r0, #12]
 8007248:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800724c:	60c3      	str	r3, [r0, #12]
 800724e:	e7f3      	b.n	8007238 <USB_SetCurrentMode+0x16>

08007250 <USB_DevInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007250:	b084      	sub	sp, #16
 8007252:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007256:	4604      	mov	r4, r0
 8007258:	a809      	add	r0, sp, #36	; 0x24
 800725a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t index = 0;

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800725e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007260:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8007262:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8007266:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800726a:	4689      	mov	r9, r1
 800726c:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 800726e:	b95f      	cbnz	r7, 8007288 <USB_DevInit+0x38>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8007270:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007272:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007276:	63a3      	str	r3, [r4, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800727e:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007286:	6023      	str	r3, [r4, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 8007288:	2500      	movs	r5, #0
 800728a:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800728e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8007292:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  /* Set Full speed phy */
  USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8007296:	2103      	movs	r1, #3
 8007298:	4620      	mov	r0, r4
 800729a:	f000 f893 	bl	80073c4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 800729e:	2110      	movs	r1, #16
 80072a0:	4620      	mov	r0, r4
 80072a2:	f000 f86d 	bl	8007380 <USB_FlushTxFifo>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80072a6:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  USB_FlushRxFifo(USBx);
 80072aa:	4620      	mov	r0, r4
 80072ac:	f000 f87a 	bl	80073a4 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
  USBx_DEVICE->DOEPMSK = 0;
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80072b0:	f04f 33ff 	mov.w	r3, #4294967295
  USBx_DEVICE->DIEPMSK = 0;
 80072b4:	6135      	str	r5, [r6, #16]
 80072b6:	462a      	mov	r2, r5
  USBx_DEVICE->DOEPMSK = 0;
 80072b8:	6175      	str	r5, [r6, #20]
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80072ba:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80072be:	61b3      	str	r3, [r6, #24]
    {
      USBx_INEP(index)->DIEPCTL = 0;
    }
    
    USBx_INEP(index)->DIEPTSIZ = 0;
    USBx_INEP(index)->DIEPINT  = 0xFF;
 80072c0:	20ff      	movs	r0, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0;
 80072c2:	61f5      	str	r5, [r6, #28]
 80072c4:	f504 6310 	add.w	r3, r4, #2304	; 0x900
  for (index = 0; index < cfg.dev_endpoints; index++)
 80072c8:	454d      	cmp	r5, r9
 80072ca:	d13c      	bne.n	8007346 <USB_DevInit+0xf6>
 80072cc:	2200      	movs	r2, #0
 80072ce:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 80072d2:	4611      	mov	r1, r2
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80072d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    {
      USBx_OUTEP(index)->DOEPCTL = 0;
    }
    
    USBx_OUTEP(index)->DOEPTSIZ = 0;
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 80072d8:	f04f 0eff 	mov.w	lr, #255	; 0xff
  for (index = 0; index < cfg.dev_endpoints; index++)
 80072dc:	4295      	cmp	r5, r2
 80072de:	d13e      	bne.n	800735e <USB_DevInit+0x10e>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80072e0:	6933      	ldr	r3, [r6, #16]
  
  if (cfg.dma_enable == 1)
 80072e2:	f1b8 0f01 	cmp.w	r8, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80072e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072ea:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 80072ec:	d108      	bne.n	8007300 <USB_DevInit+0xb0>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80072ee:	4b22      	ldr	r3, [pc, #136]	; (8007378 <USB_DevInit+0x128>)
 80072f0:	6333      	str	r3, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 80072f2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80072f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072f8:	f043 0303 	orr.w	r3, r3, #3
 80072fc:	6333      	str	r3, [r6, #48]	; 0x30
    
    index= USBx_DEVICE->DTHRCTL;
 80072fe:	6b33      	ldr	r3, [r6, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 8007300:	2300      	movs	r3, #0
 8007302:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 8007304:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8007308:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 800730a:	f1b8 0f00 	cmp.w	r8, #0
 800730e:	d103      	bne.n	8007318 <USB_DevInit+0xc8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8007310:	69a3      	ldr	r3, [r4, #24]
 8007312:	f043 0310 	orr.w	r3, r3, #16
 8007316:	61a3      	str	r3, [r4, #24]
  }

    /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8007318:	69a2      	ldr	r2, [r4, #24]
 800731a:	4b18      	ldr	r3, [pc, #96]	; (800737c <USB_DevInit+0x12c>)
 800731c:	4313      	orrs	r3, r2
 800731e:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 8007320:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007322:	b11b      	cbz	r3, 800732c <USB_DevInit+0xdc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007324:	69a3      	ldr	r3, [r4, #24]
 8007326:	f043 0308 	orr.w	r3, r3, #8
 800732a:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 800732c:	2f01      	cmp	r7, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 800732e:	bf01      	itttt	eq
 8007330:	69a3      	ldreq	r3, [r4, #24]
 8007332:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8007336:	f043 0304 	orreq.w	r3, r3, #4
 800733a:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 800733c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007340:	2000      	movs	r0, #0
 8007342:	b004      	add	sp, #16
 8007344:	4770      	bx	lr
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007346:	f8d3 e000 	ldr.w	lr, [r3]
 800734a:	f1be 0f00 	cmp.w	lr, #0
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800734e:	bfb4      	ite	lt
 8007350:	6019      	strlt	r1, [r3, #0]
      USBx_INEP(index)->DIEPCTL = 0;
 8007352:	601a      	strge	r2, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8007354:	3501      	adds	r5, #1
    USBx_INEP(index)->DIEPTSIZ = 0;
 8007356:	611a      	str	r2, [r3, #16]
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8007358:	6098      	str	r0, [r3, #8]
 800735a:	3320      	adds	r3, #32
 800735c:	e7b4      	b.n	80072c8 <USB_DevInit+0x78>
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800735e:	f8d3 c000 	ldr.w	ip, [r3]
 8007362:	f1bc 0f00 	cmp.w	ip, #0
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8007366:	bfb4      	ite	lt
 8007368:	6018      	strlt	r0, [r3, #0]
      USBx_OUTEP(index)->DOEPCTL = 0;
 800736a:	6019      	strge	r1, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 800736c:	3201      	adds	r2, #1
    USBx_OUTEP(index)->DOEPTSIZ = 0;
 800736e:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8007370:	f8c3 e008 	str.w	lr, [r3, #8]
 8007374:	3320      	adds	r3, #32
 8007376:	e7b1      	b.n	80072dc <USB_DevInit+0x8c>
 8007378:	00800100 	.word	0x00800100
 800737c:	803c3800 	.word	0x803c3800

08007380 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8007380:	0189      	lsls	r1, r1, #6
 8007382:	f041 0120 	orr.w	r1, r1, #32
 8007386:	4a06      	ldr	r2, [pc, #24]	; (80073a0 <USB_FlushTxFifo+0x20>)
 8007388:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000)
 800738a:	3a01      	subs	r2, #1
 800738c:	d005      	beq.n	800739a <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800738e:	6903      	ldr	r3, [r0, #16]
 8007390:	f013 0320 	ands.w	r3, r3, #32
 8007394:	d1f9      	bne.n	800738a <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8007396:	4618      	mov	r0, r3
 8007398:	4770      	bx	lr
      return HAL_TIMEOUT;
 800739a:	2003      	movs	r0, #3
}
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	00030d41 	.word	0x00030d41

080073a4 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80073a4:	2310      	movs	r3, #16
 80073a6:	4a06      	ldr	r2, [pc, #24]	; (80073c0 <USB_FlushRxFifo+0x1c>)
 80073a8:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80073aa:	3a01      	subs	r2, #1
 80073ac:	d005      	beq.n	80073ba <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80073ae:	6903      	ldr	r3, [r0, #16]
 80073b0:	f013 0310 	ands.w	r3, r3, #16
 80073b4:	d1f9      	bne.n	80073aa <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 80073b6:	4618      	mov	r0, r3
 80073b8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80073ba:	2003      	movs	r0, #3
}
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	00030d41 	.word	0x00030d41

080073c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 80073c4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80073c8:	4319      	orrs	r1, r3
 80073ca:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 80073ce:	2000      	movs	r0, #0
 80073d0:	4770      	bx	lr

080073d2 <USB_ActivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073d2:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1)
 80073d4:	784b      	ldrb	r3, [r1, #1]
 80073d6:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 80073d8:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 80073dc:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d11b      	bne.n	800741c <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 80073e4:	40a3      	lsls	r3, r4
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 80073ea:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 80073ee:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 80073f0:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	0412      	lsls	r2, r2, #16
 80073f8:	d40e      	bmi.n	8007418 <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 80073fa:	688a      	ldr	r2, [r1, #8]
 80073fc:	78c8      	ldrb	r0, [r1, #3]
 80073fe:	681d      	ldr	r5, [r3, #0]
 8007400:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8007404:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007408:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800740c:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 8007410:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8007414:	4328      	orrs	r0, r5
 8007416:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8007418:	2000      	movs	r0, #0
 800741a:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 800741c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007420:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8007422:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8007426:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8007428:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 800742c:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 800742e:	6803      	ldr	r3, [r0, #0]
 8007430:	041b      	lsls	r3, r3, #16
 8007432:	d4f1      	bmi.n	8007418 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8007434:	688b      	ldr	r3, [r1, #8]
 8007436:	78c9      	ldrb	r1, [r1, #3]
 8007438:	6802      	ldr	r2, [r0, #0]
 800743a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800743e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007446:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800744a:	4313      	orrs	r3, r2
 800744c:	6003      	str	r3, [r0, #0]
 800744e:	e7e3      	b.n	8007418 <USB_ActivateEndpoint+0x46>

08007450 <USB_DeactivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007450:	b510      	push	{r4, lr}
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8007452:	784b      	ldrb	r3, [r1, #1]
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8007454:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8007458:	7809      	ldrb	r1, [r1, #0]
 800745a:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 800745e:	2b01      	cmp	r3, #1
 8007460:	d111      	bne.n	8007486 <USB_DeactivateEndpoint+0x36>
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8007462:	408b      	lsls	r3, r1
 8007464:	b29b      	uxth	r3, r3
 8007466:	43db      	mvns	r3, r3
 8007468:	401c      	ands	r4, r3
 800746a:	63d4      	str	r4, [r2, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 800746c:	69d4      	ldr	r4, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 800746e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8007472:	4023      	ands	r3, r4
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8007474:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8007478:	61d3      	str	r3, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 800747a:	6803      	ldr	r3, [r0, #0]
 800747c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007480:	6003      	str	r3, [r0, #0]
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
  }
  return HAL_OK;
}
 8007482:	2000      	movs	r0, #0
 8007484:	bd10      	pop	{r4, pc}
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8007486:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800748a:	408b      	lsls	r3, r1
 800748c:	43db      	mvns	r3, r3
 800748e:	401c      	ands	r4, r3
 8007490:	63d4      	str	r4, [r2, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8007492:	69d4      	ldr	r4, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8007494:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8007498:	4023      	ands	r3, r4
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 800749a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 800749e:	61d3      	str	r3, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 80074a0:	6803      	ldr	r3, [r0, #0]
 80074a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074a6:	6003      	str	r3, [r0, #0]
 80074a8:	e7eb      	b.n	8007482 <USB_DeactivateEndpoint+0x32>
	...

080074ac <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80074ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 80074ae:	784b      	ldrb	r3, [r1, #1]
 80074b0:	780c      	ldrb	r4, [r1, #0]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	694b      	ldr	r3, [r1, #20]
 80074b6:	d163      	bne.n	8007580 <USB_EPStartXfer+0xd4>
 80074b8:	2520      	movs	r5, #32
 80074ba:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80074be:	fb15 6404 	smlabb	r4, r5, r4, r6
 80074c2:	6925      	ldr	r5, [r4, #16]
    if (ep->xfer_len == 0)
 80074c4:	bb73      	cbnz	r3, 8007524 <USB_EPStartXfer+0x78>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80074c6:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80074ca:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80074ce:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 80074d0:	6925      	ldr	r5, [r4, #16]
 80074d2:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80074d6:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80074d8:	6925      	ldr	r5, [r4, #16]
 80074da:	0ced      	lsrs	r5, r5, #19
 80074dc:	04ed      	lsls	r5, r5, #19
 80074de:	6125      	str	r5, [r4, #16]
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
      }       
    }
      if (ep->type != EP_TYPE_ISOC)
 80074e0:	78cf      	ldrb	r7, [r1, #3]
 80074e2:	780d      	ldrb	r5, [r1, #0]
 80074e4:	2f01      	cmp	r7, #1
 80074e6:	f000 8089 	beq.w	80075fc <USB_EPStartXfer+0x150>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 80074ea:	b14b      	cbz	r3, 8007500 <USB_EPStartXfer+0x54>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 80074ec:	f8d0 c834 	ldr.w	ip, [r0, #2100]	; 0x834
 80074f0:	2401      	movs	r4, #1
 80074f2:	40ac      	lsls	r4, r5
 80074f4:	ea44 040c 	orr.w	r4, r4, ip
 80074f8:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 80074fc:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007500:	780d      	ldrb	r5, [r1, #0]
 8007502:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 8007506:	2f01      	cmp	r7, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007508:	6834      	ldr	r4, [r6, #0]
 800750a:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 800750e:	6034      	str	r4, [r6, #0]
    if (ep->type == EP_TYPE_ISOC)
 8007510:	d105      	bne.n	800751e <USB_EPStartXfer+0x72>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8007512:	9200      	str	r2, [sp, #0]
 8007514:	b29b      	uxth	r3, r3
 8007516:	462a      	mov	r2, r5
 8007518:	68c9      	ldr	r1, [r1, #12]
 800751a:	f000 f8e3 	bl	80076e4 <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 800751e:	2000      	movs	r0, #0
 8007520:	b003      	add	sp, #12
 8007522:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007524:	0ced      	lsrs	r5, r5, #19
 8007526:	04ed      	lsls	r5, r5, #19
 8007528:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800752a:	6925      	ldr	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 800752c:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800752e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8007532:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8007536:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8007538:	19dd      	adds	r5, r3, r7
 800753a:	3d01      	subs	r5, #1
 800753c:	fbb5 f7f7 	udiv	r7, r5, r7
 8007540:	4d35      	ldr	r5, [pc, #212]	; (8007618 <USB_EPStartXfer+0x16c>)
 8007542:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8007546:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 800754a:	ea45 050e 	orr.w	r5, r5, lr
 800754e:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8007550:	6927      	ldr	r7, [r4, #16]
 8007552:	f3c3 0512 	ubfx	r5, r3, #0, #19
 8007556:	433d      	orrs	r5, r7
 8007558:	6125      	str	r5, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 800755a:	78cd      	ldrb	r5, [r1, #3]
 800755c:	2d01      	cmp	r5, #1
 800755e:	d1bf      	bne.n	80074e0 <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8007560:	6925      	ldr	r5, [r4, #16]
 8007562:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8007566:	6125      	str	r5, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
 8007568:	6925      	ldr	r5, [r4, #16]
 800756a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800756e:	6125      	str	r5, [r4, #16]
 8007570:	e7b6      	b.n	80074e0 <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007572:	fb14 6405 	smlabb	r4, r4, r5, r6
 8007576:	6825      	ldr	r5, [r4, #0]
 8007578:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800757c:	6025      	str	r5, [r4, #0]
 800757e:	e7bf      	b.n	8007500 <USB_EPStartXfer+0x54>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8007580:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8007584:	eb02 1244 	add.w	r2, r2, r4, lsl #5
 8007588:	6914      	ldr	r4, [r2, #16]
 800758a:	0ce4      	lsrs	r4, r4, #19
 800758c:	04e4      	lsls	r4, r4, #19
 800758e:	6114      	str	r4, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8007590:	6914      	ldr	r4, [r2, #16]
 8007592:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007596:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800759a:	6114      	str	r4, [r2, #16]
 800759c:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0)
 800759e:	b9db      	cbnz	r3, 80075d8 <USB_EPStartXfer+0x12c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80075a0:	6913      	ldr	r3, [r2, #16]
 80075a2:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80075a6:	431c      	orrs	r4, r3
 80075a8:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;      
 80075aa:	6913      	ldr	r3, [r2, #16]
 80075ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075b0:	6113      	str	r3, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 80075b2:	78cb      	ldrb	r3, [r1, #3]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d10a      	bne.n	80075ce <USB_EPStartXfer+0x122>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 80075b8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80075bc:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80075c0:	6813      	ldr	r3, [r2, #0]
 80075c2:	bf0c      	ite	eq
 80075c4:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80075c8:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80075cc:	6013      	str	r3, [r2, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075ce:	6813      	ldr	r3, [r2, #0]
 80075d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075d4:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80075d6:	e7a2      	b.n	800751e <USB_EPStartXfer+0x72>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 80075d8:	4d0f      	ldr	r5, [pc, #60]	; (8007618 <USB_EPStartXfer+0x16c>)
 80075da:	6916      	ldr	r6, [r2, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket; 
 80075dc:	4423      	add	r3, r4
 80075de:	3b01      	subs	r3, #1
 80075e0:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 80075e4:	ea05 45c3 	and.w	r5, r5, r3, lsl #19
 80075e8:	4335      	orrs	r5, r6
 80075ea:	6115      	str	r5, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt)); 
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	6915      	ldr	r5, [r2, #16]
 80075f0:	435c      	muls	r4, r3
 80075f2:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80075f6:	432c      	orrs	r4, r5
 80075f8:	6114      	str	r4, [r2, #16]
 80075fa:	e7da      	b.n	80075b2 <USB_EPStartXfer+0x106>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 80075fc:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8007600:	f414 7f80 	tst.w	r4, #256	; 0x100
 8007604:	f04f 0420 	mov.w	r4, #32
 8007608:	d0b3      	beq.n	8007572 <USB_EPStartXfer+0xc6>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800760a:	fb14 6405 	smlabb	r4, r4, r5, r6
 800760e:	6825      	ldr	r5, [r4, #0]
 8007610:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8007614:	6025      	str	r5, [r4, #0]
 8007616:	e773      	b.n	8007500 <USB_EPStartXfer+0x54>
 8007618:	1ff80000 	.word	0x1ff80000

0800761c <USB_EP0StartXfer>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  /* IN endpoint */
  if (ep->is_in == 1)
 800761c:	784b      	ldrb	r3, [r1, #1]
 800761e:	2b01      	cmp	r3, #1
{
 8007620:	b530      	push	{r4, r5, lr}
 8007622:	780b      	ldrb	r3, [r1, #0]
 8007624:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1)
 8007626:	d13e      	bne.n	80076a6 <USB_EP0StartXfer+0x8a>
 8007628:	2220      	movs	r2, #32
 800762a:	f500 6410 	add.w	r4, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800762e:	fb12 4303 	smlabb	r3, r2, r3, r4
 8007632:	691a      	ldr	r2, [r3, #16]
    if (ep->xfer_len == 0)
 8007634:	b9fd      	cbnz	r5, 8007676 <USB_EP0StartXfer+0x5a>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8007636:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 800763a:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 800763e:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8007640:	691a      	ldr	r2, [r3, #16]
 8007642:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007646:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8007648:	691a      	ldr	r2, [r3, #16]
 800764a:	0cd2      	lsrs	r2, r2, #19
 800764c:	04d2      	lsls	r2, r2, #19
 800764e:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0)
 8007650:	694b      	ldr	r3, [r1, #20]
 8007652:	b13b      	cbz	r3, 8007664 <USB_EP0StartXfer+0x48>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1 << (ep->num);
 8007654:	780d      	ldrb	r5, [r1, #0]
 8007656:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800765a:	2301      	movs	r3, #1
 800765c:	40ab      	lsls	r3, r5
 800765e:	4313      	orrs	r3, r2
 8007660:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 8007664:	780b      	ldrb	r3, [r1, #0]
 8007666:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8007670:	601a      	str	r2, [r3, #0]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8007672:	2000      	movs	r0, #0
 8007674:	bd30      	pop	{r4, r5, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007676:	0cd2      	lsrs	r2, r2, #19
 8007678:	04d2      	lsls	r2, r2, #19
 800767a:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800767c:	691a      	ldr	r2, [r3, #16]
 800767e:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007682:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8007686:	611a      	str	r2, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8007688:	688a      	ldr	r2, [r1, #8]
 800768a:	4295      	cmp	r5, r2
        ep->xfer_len = ep->maxpacket;
 800768c:	bf88      	it	hi
 800768e:	614a      	strhi	r2, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8007690:	691a      	ldr	r2, [r3, #16]
 8007692:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007696:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8007698:	694a      	ldr	r2, [r1, #20]
 800769a:	691d      	ldr	r5, [r3, #16]
 800769c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80076a0:	432a      	orrs	r2, r5
 80076a2:	611a      	str	r2, [r3, #16]
 80076a4:	e7d4      	b.n	8007650 <USB_EP0StartXfer+0x34>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80076a6:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 80076aa:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80076ae:	6903      	ldr	r3, [r0, #16]
 80076b0:	0cdb      	lsrs	r3, r3, #19
 80076b2:	04db      	lsls	r3, r3, #19
 80076b4:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80076b6:	6903      	ldr	r3, [r0, #16]
 80076b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076c0:	6103      	str	r3, [r0, #16]
 80076c2:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0)
 80076c4:	b105      	cbz	r5, 80076c8 <USB_EP0StartXfer+0xac>
      ep->xfer_len = ep->maxpacket;
 80076c6:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 80076c8:	6902      	ldr	r2, [r0, #16]
 80076ca:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80076ce:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 80076d0:	6902      	ldr	r2, [r0, #16]
 80076d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076d6:	4313      	orrs	r3, r2
 80076d8:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 80076da:	6803      	ldr	r3, [r0, #0]
 80076dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076e0:	6003      	str	r3, [r0, #0]
 80076e2:	e7c6      	b.n	8007672 <USB_EP0StartXfer+0x56>

080076e4 <USB_WritePacket>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  uint32_t count32b= 0 , index= 0;
  count32b =  (len + 3) / 4;
 80076e4:	3303      	adds	r3, #3
  for (index = 0; index < count32b; index++, src += 4)
  {
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80076e6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
{
 80076ea:	b510      	push	{r4, lr}
  count32b =  (len + 3) / 4;
 80076ec:	109b      	asrs	r3, r3, #2
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80076ee:	eb00 3202 	add.w	r2, r0, r2, lsl #12
  for (index = 0; index < count32b; index++, src += 4)
 80076f2:	2400      	movs	r4, #0
 80076f4:	429c      	cmp	r4, r3
 80076f6:	d101      	bne.n	80076fc <USB_WritePacket+0x18>
  }
  return HAL_OK;
}
 80076f8:	2000      	movs	r0, #0
 80076fa:	bd10      	pop	{r4, pc}
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80076fc:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8007700:	6010      	str	r0, [r2, #0]
  for (index = 0; index < count32b; index++, src += 4)
 8007702:	3401      	adds	r4, #1
 8007704:	e7f6      	b.n	80076f4 <USB_WritePacket+0x10>

08007706 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007706:	b510      	push	{r4, lr}
  uint32_t index=0;
  uint32_t count32b = (len + 3) / 4;
 8007708:	3203      	adds	r2, #3
 800770a:	1092      	asrs	r2, r2, #2
  
  for ( index = 0; index < count32b; index++, dest += 4 )
 800770c:	2300      	movs	r3, #0
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 800770e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( index = 0; index < count32b; index++, dest += 4 )
 8007712:	4293      	cmp	r3, r2
 8007714:	d102      	bne.n	800771c <USB_ReadPacket+0x16>
    
  }
  return ((void *)dest);
}
 8007716:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800771a:	bd10      	pop	{r4, pc}
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 800771c:	6804      	ldr	r4, [r0, #0]
 800771e:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  for ( index = 0; index < count32b; index++, dest += 4 )
 8007722:	3301      	adds	r3, #1
 8007724:	e7f5      	b.n	8007712 <USB_ReadPacket+0xc>

08007726 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8007726:	784b      	ldrb	r3, [r1, #1]
 8007728:	780a      	ldrb	r2, [r1, #0]
 800772a:	2b01      	cmp	r3, #1
 800772c:	f04f 0320 	mov.w	r3, #32
 8007730:	d10b      	bne.n	800774a <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 8007732:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8007736:	fb13 0002 	smlabb	r0, r3, r2, r0
 800773a:	6803      	ldr	r3, [r0, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	db0b      	blt.n	8007758 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8007740:	6803      	ldr	r3, [r0, #0]
 8007742:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007746:	6003      	str	r3, [r0, #0]
 8007748:	e006      	b.n	8007758 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 800774a:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800774e:	fb13 0002 	smlabb	r0, r3, r2, r0
 8007752:	6803      	ldr	r3, [r0, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	daf3      	bge.n	8007740 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007758:	6803      	ldr	r3, [r0, #0]
 800775a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800775e:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8007760:	2000      	movs	r0, #0
 8007762:	4770      	bx	lr

08007764 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8007764:	784b      	ldrb	r3, [r1, #1]
 8007766:	780a      	ldrb	r2, [r1, #0]
 8007768:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800776a:	bf0c      	ite	eq
 800776c:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007770:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8007774:	2320      	movs	r3, #32
 8007776:	fb13 0002 	smlabb	r0, r3, r2, r0
 800777a:	6803      	ldr	r3, [r0, #0]
 800777c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007780:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8007782:	78cb      	ldrb	r3, [r1, #3]
 8007784:	3b02      	subs	r3, #2
 8007786:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007788:	bf9e      	ittt	ls
 800778a:	6803      	ldrls	r3, [r0, #0]
 800778c:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8007790:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8007792:	2000      	movs	r0, #0
 8007794:	4770      	bx	lr

08007796 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the USB device mode
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 8007796:	b538      	push	{r3, r4, r5, lr}
 8007798:	f500 612e 	add.w	r1, r0, #2784	; 0xae0
 800779c:	4604      	mov	r4, r0
 800779e:	f500 6310 	add.w	r3, r0, #2304	; 0x900
  uint32_t index;
  
  /* Clear Pending interrupt */
  for (index = 0; index < 15 ; index++)
  {
    USBx_INEP(index)->DIEPINT  = 0xFF;
 80077a2:	22ff      	movs	r2, #255	; 0xff
 80077a4:	609a      	str	r2, [r3, #8]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 80077a6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80077aa:	3320      	adds	r3, #32
  for (index = 0; index < 15 ; index++)
 80077ac:	428b      	cmp	r3, r1
 80077ae:	d1f9      	bne.n	80077a4 <USB_StopDevice+0xe>
  }
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
  
  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0;
 80077b0:	2500      	movs	r5, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80077b2:	f04f 32ff 	mov.w	r2, #4294967295
 80077b6:	f8c4 2818 	str.w	r2, [r4, #2072]	; 0x818
  USBx_DEVICE->DOEPMSK  = 0;
  USBx_DEVICE->DAINTMSK = 0;
  
  /* Flush the FIFO */
  USB_FlushRxFifo(USBx);
 80077ba:	4620      	mov	r0, r4
  USBx_DEVICE->DIEPMSK  = 0;
 80077bc:	f8c4 5810 	str.w	r5, [r4, #2064]	; 0x810
  USBx_DEVICE->DOEPMSK  = 0;
 80077c0:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
  USBx_DEVICE->DAINTMSK = 0;
 80077c4:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
  USB_FlushRxFifo(USBx);
 80077c8:	f7ff fdec 	bl	80073a4 <USB_FlushRxFifo>
  USB_FlushTxFifo(USBx ,  0x10 );  
 80077cc:	2110      	movs	r1, #16
 80077ce:	4620      	mov	r0, r4
 80077d0:	f7ff fdd6 	bl	8007380 <USB_FlushTxFifo>
  
  return HAL_OK;
}
 80077d4:	4628      	mov	r0, r5
 80077d6:	bd38      	pop	{r3, r4, r5, pc}

080077d8 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 80077d8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80077dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80077e0:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 80077e4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80077e8:	0109      	lsls	r1, r1, #4
 80077ea:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80077ee:	4319      	orrs	r1, r3
 80077f0:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 80077f4:	2000      	movs	r0, #0
 80077f6:	4770      	bx	lr

080077f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 80077f8:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ; 
 80077fa:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80077fe:	f023 0302 	bic.w	r3, r3, #2
 8007802:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8007806:	2003      	movs	r0, #3
 8007808:	f7fc fc80 	bl	800410c <HAL_Delay>
  
  return HAL_OK;  
}
 800780c:	2000      	movs	r0, #0
 800780e:	bd08      	pop	{r3, pc}

08007810 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8007810:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ; 
 8007812:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8007816:	f043 0302 	orr.w	r3, r3, #2
 800781a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 800781e:	2003      	movs	r0, #3
 8007820:	f7fc fc74 	bl	800410c <HAL_Delay>
  
  return HAL_OK;  
}
 8007824:	2000      	movs	r0, #0
 8007826:	bd08      	pop	{r3, pc}

08007828 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->GINTSTS;
 8007828:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800782a:	6980      	ldr	r0, [r0, #24]
  return tmpreg;  
}
 800782c:	4010      	ands	r0, r2
 800782e:	4770      	bx	lr

08007830 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 8007830:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007834:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007838:	69c0      	ldr	r0, [r0, #28]
 800783a:	4018      	ands	r0, r3
  return ((tmpreg & 0xffff0000) >> 16);
}
 800783c:	0c00      	lsrs	r0, r0, #16
 800783e:	4770      	bx	lr

08007840 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 8007840:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007844:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007848:	69c0      	ldr	r0, [r0, #28]
 800784a:	4018      	ands	r0, r3
  return ((tmpreg & 0xFFFF));
}
 800784c:	b280      	uxth	r0, r0
 800784e:	4770      	bx	lr

08007850 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t tmpreg;
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8007850:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8007854:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007858:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 800785c:	688a      	ldr	r2, [r1, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800785e:	6940      	ldr	r0, [r0, #20]
  return tmpreg;
}
 8007860:	4010      	ands	r0, r2
 8007862:	4770      	bx	lr

08007864 <USB_ReadDevInEPInterrupt>:
  * @param  epnum: endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8007864:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, msk = 0, emp = 0;
  
  msk = USBx_DEVICE->DIEPMSK;
 8007866:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800786a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1) << 7;
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 800786e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1) << 7;
 8007872:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8007874:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1) << 7;
 8007878:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 800787a:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1) << 7;
 800787c:	b2db      	uxtb	r3, r3
 800787e:	4323      	orrs	r3, r4
  return tmpreg;
}
 8007880:	4018      	ands	r0, r3
 8007882:	bd10      	pop	{r4, pc}

08007884 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1);
 8007884:	6940      	ldr	r0, [r0, #20]
}
 8007886:	f000 0001 	and.w	r0, r0, #1
 800788a:	4770      	bx	lr

0800788c <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800788c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007890:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007894:	f023 0307 	bic.w	r3, r3, #7
 8007898:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800789c:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80078a0:	689a      	ldr	r2, [r3, #8]
 80078a2:	f002 0206 	and.w	r2, r2, #6
 80078a6:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 80078a8:	bf02      	ittt	eq
 80078aa:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 80078ae:	f042 0203 	orreq.w	r2, r2, #3
 80078b2:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 80078be:	2000      	movs	r0, #0
 80078c0:	4770      	bx	lr

080078c2 <USB_EP0_OutStart>:
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(psetup);

  USBx_OUTEP(0)->DOEPTSIZ = 0;
 80078c2:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80078c6:	2000      	movs	r0, #0
 80078c8:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 80078ca:	691a      	ldr	r2, [r3, #16]
 80078cc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80078d0:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 80078d2:	691a      	ldr	r2, [r3, #16]
 80078d4:	f042 0218 	orr.w	r2, r2, #24
 80078d8:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80078da:	691a      	ldr	r2, [r3, #16]
 80078dc:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 80078e0:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
}
 80078e2:	4770      	bx	lr

080078e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80078ec:	2300      	movs	r3, #0
 80078ee:	60fb      	str	r3, [r7, #12]
  
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3301      	adds	r3, #1
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4a13      	ldr	r2, [pc, #76]	; (8007948 <USB_CoreReset+0x64>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d901      	bls.n	8007902 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e01b      	b.n	800793a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	daf2      	bge.n	80078f0 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 800790a:	2300      	movs	r3, #0
 800790c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	f043 0201 	orr.w	r2, r3, #1
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	3301      	adds	r3, #1
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	4a09      	ldr	r2, [pc, #36]	; (8007948 <USB_CoreReset+0x64>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d901      	bls.n	800792c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e006      	b.n	800793a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b01      	cmp	r3, #1
 8007936:	d0f0      	beq.n	800791a <USB_CoreReset+0x36>
  
  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	00030d40 	.word	0x00030d40

0800794c <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800794c:	4b08      	ldr	r3, [pc, #32]	; (8007970 <LL_mDelay+0x24>)
{
 800794e:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8007954:	9b01      	ldr	r3, [sp, #4]
    Delay++;
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8007956:	4b06      	ldr	r3, [pc, #24]	; (8007970 <LL_mDelay+0x24>)
  if (Delay < LL_MAX_DELAY)
 8007958:	1c41      	adds	r1, r0, #1
    Delay++;
 800795a:	bf18      	it	ne
 800795c:	3001      	addne	r0, #1
  while (Delay)
 800795e:	b908      	cbnz	r0, 8007964 <LL_mDelay+0x18>
    {
      Delay--;
    }
  }
}
 8007960:	b002      	add	sp, #8
 8007962:	4770      	bx	lr
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	03d2      	lsls	r2, r2, #15
      Delay--;
 8007968:	bf48      	it	mi
 800796a:	f100 30ff 	addmi.w	r0, r0, #4294967295
 800796e:	e7f6      	b.n	800795e <LL_mDelay+0x12>
 8007970:	e000e010 	.word	0xe000e010

08007974 <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8007974:	2320      	movs	r3, #32
 8007976:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8007978:	4800      	ldr	r0, [pc, #0]	; (800797c <USBD_MSC_GetHSCfgDesc+0x8>)
 800797a:	4770      	bx	lr
 800797c:	2000024c 	.word	0x2000024c

08007980 <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8007980:	2320      	movs	r3, #32
 8007982:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8007984:	4800      	ldr	r0, [pc, #0]	; (8007988 <USBD_MSC_GetFSCfgDesc+0x8>)
 8007986:	4770      	bx	lr
 8007988:	2000022c 	.word	0x2000022c

0800798c <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 800798c:	2320      	movs	r3, #32
 800798e:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8007990:	4800      	ldr	r0, [pc, #0]	; (8007994 <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 8007992:	4770      	bx	lr
 8007994:	20000278 	.word	0x20000278

08007998 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8007998:	230a      	movs	r3, #10
 800799a:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 800799c:	4800      	ldr	r0, [pc, #0]	; (80079a0 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 800799e:	4770      	bx	lr
 80079a0:	2000026c 	.word	0x2000026c

080079a4 <USBD_MSC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80079a4:	7c03      	ldrb	r3, [r0, #16]
{
 80079a6:	b510      	push	{r4, lr}
 80079a8:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80079aa:	b9c3      	cbnz	r3, 80079de <USBD_MSC_Init+0x3a>
    USBD_LL_OpenEP(pdev,
 80079ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079b0:	2202      	movs	r2, #2
 80079b2:	2101      	movs	r1, #1
 80079b4:	f7fb fd1f 	bl	80033f6 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80079b8:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 80079bc:	2202      	movs	r2, #2
 80079be:	2181      	movs	r1, #129	; 0x81
 80079c0:	4620      	mov	r0, r4
 80079c2:	f7fb fd18 	bl	80033f6 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 80079c6:	f242 006c 	movw	r0, #8300	; 0x206c
 80079ca:	f002 fc41 	bl	800a250 <malloc>
 80079ce:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 80079d2:	b158      	cbz	r0, 80079ec <USBD_MSC_Init+0x48>
    MSC_BOT_Init(pdev); 
 80079d4:	4620      	mov	r0, r4
 80079d6:	f000 f8be 	bl	8007b56 <MSC_BOT_Init>
    ret = 0;
 80079da:	2000      	movs	r0, #0
 80079dc:	bd10      	pop	{r4, pc}
    USBD_LL_OpenEP(pdev,
 80079de:	2340      	movs	r3, #64	; 0x40
 80079e0:	2202      	movs	r2, #2
 80079e2:	2101      	movs	r1, #1
 80079e4:	f7fb fd07 	bl	80033f6 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80079e8:	2340      	movs	r3, #64	; 0x40
 80079ea:	e7e7      	b.n	80079bc <USBD_MSC_Init+0x18>
    ret = 1; 
 80079ec:	2001      	movs	r0, #1
}
 80079ee:	bd10      	pop	{r4, pc}

080079f0 <USBD_MSC_DeInit>:
{
 80079f0:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 80079f2:	2101      	movs	r1, #1
{
 80079f4:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 80079f6:	f7fb fd08 	bl	800340a <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80079fa:	2181      	movs	r1, #129	; 0x81
 80079fc:	4620      	mov	r0, r4
 80079fe:	f7fb fd04 	bl	800340a <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 8007a02:	4620      	mov	r0, r4
 8007a04:	f000 f8d6 	bl	8007bb4 <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 8007a08:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8007a0c:	b120      	cbz	r0, 8007a18 <USBD_MSC_DeInit+0x28>
    USBD_free(pdev->pClassData);
 8007a0e:	f002 fc27 	bl	800a260 <free>
    pdev->pClassData  = NULL; 
 8007a12:	2300      	movs	r3, #0
 8007a14:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8007a18:	2000      	movs	r0, #0
 8007a1a:	bd10      	pop	{r4, pc}

08007a1c <USBD_MSC_Setup>:
{
 8007a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a20:	780b      	ldrb	r3, [r1, #0]
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8007a22:	f8d0 8218 	ldr.w	r8, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a26:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a2e:	d02d      	beq.n	8007a8c <USBD_MSC_Setup+0x70>
 8007a30:	2c20      	cmp	r4, #32
 8007a32:	d14a      	bne.n	8007aca <USBD_MSC_Setup+0xae>
    switch (req->bRequest)
 8007a34:	784a      	ldrb	r2, [r1, #1]
 8007a36:	2afe      	cmp	r2, #254	; 0xfe
 8007a38:	d005      	beq.n	8007a46 <USBD_MSC_Setup+0x2a>
 8007a3a:	2aff      	cmp	r2, #255	; 0xff
 8007a3c:	d019      	beq.n	8007a72 <USBD_MSC_Setup+0x56>
       USBD_CtlError(pdev , req);
 8007a3e:	f000 fef2 	bl	8008826 <USBD_CtlError>
       return USBD_FAIL; 
 8007a42:	2402      	movs	r4, #2
 8007a44:	e01f      	b.n	8007a86 <USBD_MSC_Setup+0x6a>
      if((req->wValue  == 0) && 
 8007a46:	884c      	ldrh	r4, [r1, #2]
 8007a48:	b984      	cbnz	r4, 8007a6c <USBD_MSC_Setup+0x50>
 8007a4a:	88cf      	ldrh	r7, [r1, #6]
 8007a4c:	2f01      	cmp	r7, #1
 8007a4e:	d10d      	bne.n	8007a6c <USBD_MSC_Setup+0x50>
         (req->wLength == 1) &&
 8007a50:	061a      	lsls	r2, r3, #24
 8007a52:	d50b      	bpl.n	8007a6c <USBD_MSC_Setup+0x50>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8007a54:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	4798      	blx	r3
        USBD_CtlSendData (pdev,
 8007a5c:	463a      	mov	r2, r7
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8007a5e:	f8c8 0000 	str.w	r0, [r8]
        USBD_CtlSendData (pdev,
 8007a62:	4641      	mov	r1, r8
 8007a64:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8007a66:	f000 ff05 	bl	8008874 <USBD_CtlSendData>
      break;
 8007a6a:	e00c      	b.n	8007a86 <USBD_MSC_Setup+0x6a>
         USBD_CtlError(pdev , req);
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	4630      	mov	r0, r6
 8007a70:	e7e5      	b.n	8007a3e <USBD_MSC_Setup+0x22>
      if((req->wValue  == 0) && 
 8007a72:	884a      	ldrh	r2, [r1, #2]
 8007a74:	2a00      	cmp	r2, #0
 8007a76:	d1f9      	bne.n	8007a6c <USBD_MSC_Setup+0x50>
 8007a78:	88cc      	ldrh	r4, [r1, #6]
 8007a7a:	2c00      	cmp	r4, #0
 8007a7c:	d1f6      	bne.n	8007a6c <USBD_MSC_Setup+0x50>
         (req->wLength == 0) &&
 8007a7e:	061b      	lsls	r3, r3, #24
 8007a80:	d4f4      	bmi.n	8007a6c <USBD_MSC_Setup+0x50>
         MSC_BOT_Reset(pdev);
 8007a82:	f000 f88b 	bl	8007b9c <MSC_BOT_Reset>
}
 8007a86:	4620      	mov	r0, r4
 8007a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8007a8c:	784f      	ldrb	r7, [r1, #1]
 8007a8e:	2f0a      	cmp	r7, #10
 8007a90:	d01d      	beq.n	8007ace <USBD_MSC_Setup+0xb2>
 8007a92:	2f0b      	cmp	r7, #11
 8007a94:	d01f      	beq.n	8007ad6 <USBD_MSC_Setup+0xba>
 8007a96:	2f01      	cmp	r7, #1
 8007a98:	d1f5      	bne.n	8007a86 <USBD_MSC_Setup+0x6a>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8007a9a:	7909      	ldrb	r1, [r1, #4]
 8007a9c:	f7fb fcbc 	bl	8003418 <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8007aa0:	7929      	ldrb	r1, [r5, #4]
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f7fb fcb1 	bl	800340a <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 8007aa8:	f995 3004 	ldrsb.w	r3, [r5, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	7c33      	ldrb	r3, [r6, #16]
 8007ab0:	da17      	bge.n	8007ae2 <USBD_MSC_Setup+0xc6>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8007ab2:	b9a3      	cbnz	r3, 8007ade <USBD_MSC_Setup+0xc2>
          USBD_LL_OpenEP(pdev,
 8007ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8007ab8:	2202      	movs	r2, #2
 8007aba:	2181      	movs	r1, #129	; 0x81
          USBD_LL_OpenEP(pdev,
 8007abc:	4630      	mov	r0, r6
 8007abe:	f7fb fc9a 	bl	80033f6 <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8007ac2:	7929      	ldrb	r1, [r5, #4]
 8007ac4:	4630      	mov	r0, r6
 8007ac6:	f000 f931 	bl	8007d2c <MSC_BOT_CplClrFeature>
  return 0;
 8007aca:	2400      	movs	r4, #0
 8007acc:	e7db      	b.n	8007a86 <USBD_MSC_Setup+0x6a>
      USBD_CtlSendData (pdev,
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f108 0104 	add.w	r1, r8, #4
 8007ad4:	e7c7      	b.n	8007a66 <USBD_MSC_Setup+0x4a>
      hmsc->interface = (uint8_t)(req->wValue);
 8007ad6:	788b      	ldrb	r3, [r1, #2]
 8007ad8:	f8c8 3004 	str.w	r3, [r8, #4]
      break;
 8007adc:	e7d3      	b.n	8007a86 <USBD_MSC_Setup+0x6a>
          USBD_LL_OpenEP(pdev,
 8007ade:	2340      	movs	r3, #64	; 0x40
 8007ae0:	e7ea      	b.n	8007ab8 <USBD_MSC_Setup+0x9c>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8007ae2:	b923      	cbnz	r3, 8007aee <USBD_MSC_Setup+0xd2>
          USBD_LL_OpenEP(pdev,
 8007ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8007ae8:	2202      	movs	r2, #2
 8007aea:	4639      	mov	r1, r7
 8007aec:	e7e6      	b.n	8007abc <USBD_MSC_Setup+0xa0>
 8007aee:	2340      	movs	r3, #64	; 0x40
 8007af0:	e7fa      	b.n	8007ae8 <USBD_MSC_Setup+0xcc>

08007af2 <USBD_MSC_DataIn>:
{
 8007af2:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8007af4:	f000 f882 	bl	8007bfc <MSC_BOT_DataIn>
}
 8007af8:	2000      	movs	r0, #0
 8007afa:	bd08      	pop	{r3, pc}

08007afc <USBD_MSC_DataOut>:
{
 8007afc:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 8007afe:	f000 f89b 	bl	8007c38 <MSC_BOT_DataOut>
}
 8007b02:	2000      	movs	r0, #0
 8007b04:	bd08      	pop	{r3, pc}

08007b06 <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8007b06:	b109      	cbz	r1, 8007b0c <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData= fops;
 8007b08:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
  }
  return 0;
}
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	4770      	bx	lr

08007b10 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8007b10:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  if ((hmsc->cbw.bmFlags == 0) && 
 8007b12:	f242 0318 	movw	r3, #8216	; 0x2018
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007b16:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0) && 
 8007b1a:	5ce3      	ldrb	r3, [r4, r3]
{
 8007b1c:	4605      	mov	r5, r0
  if ((hmsc->cbw.bmFlags == 0) && 
 8007b1e:	b943      	cbnz	r3, 8007b32 <MSC_BOT_Abort+0x22>
      (hmsc->cbw.dDataLength != 0) &&
 8007b20:	f242 0314 	movw	r3, #8212	; 0x2014
  if ((hmsc->cbw.bmFlags == 0) && 
 8007b24:	58e3      	ldr	r3, [r4, r3]
 8007b26:	b123      	cbz	r3, 8007b32 <MSC_BOT_Abort+0x22>
      (hmsc->cbw.dDataLength != 0) &&
 8007b28:	7a63      	ldrb	r3, [r4, #9]
 8007b2a:	b913      	cbnz	r3, 8007b32 <MSC_BOT_Abort+0x22>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	f7fb fc7a 	bl	8003426 <USBD_LL_StallEP>
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007b32:	2181      	movs	r1, #129	; 0x81
 8007b34:	4628      	mov	r0, r5
 8007b36:	f7fb fc76 	bl	8003426 <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007b3a:	7a63      	ldrb	r3, [r4, #9]
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d109      	bne.n	8007b54 <MSC_BOT_Abort+0x44>
  {
    USBD_LL_PrepareReceive (pdev,
 8007b40:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8007b44:	4628      	mov	r0, r5
 8007b46:	231f      	movs	r3, #31
 8007b48:	320c      	adds	r2, #12
 8007b4a:	2101      	movs	r1, #1
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
                      USBD_BOT_CBW_LENGTH);    
  }
}
 8007b4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    USBD_LL_PrepareReceive (pdev,
 8007b50:	f7fb bc98 	b.w	8003484 <USBD_LL_PrepareReceive>
 8007b54:	bd70      	pop	{r4, r5, r6, pc}

08007b56 <MSC_BOT_Init>:
{
 8007b56:	b570      	push	{r4, r5, r6, lr}
  hmsc->scsi_sense_tail = 0;
 8007b58:	f242 035d 	movw	r3, #8285	; 0x205d
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007b5c:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
{
 8007b60:	4604      	mov	r4, r0
  hmsc->bot_state  = USBD_BOT_IDLE;
 8007b62:	2000      	movs	r0, #0
 8007b64:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8007b66:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0;
 8007b68:	54e8      	strb	r0, [r5, r3]
  hmsc->scsi_sense_head = 0;
 8007b6a:	f242 035c 	movw	r3, #8284	; 0x205c
 8007b6e:	54e8      	strb	r0, [r5, r3]
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 8007b70:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8007b78:	2101      	movs	r1, #1
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f7fb fc4c 	bl	8003418 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8007b80:	2181      	movs	r1, #129	; 0x81
 8007b82:	4620      	mov	r0, r4
 8007b84:	f7fb fc48 	bl	8003418 <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev,
 8007b88:	f505 5200 	add.w	r2, r5, #8192	; 0x2000
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	231f      	movs	r3, #31
 8007b90:	320c      	adds	r2, #12
 8007b92:	2101      	movs	r1, #1
}
 8007b94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 8007b98:	f7fb bc74 	b.w	8003484 <USBD_LL_PrepareReceive>

08007b9c <MSC_BOT_Reset>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007b9c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8007ba0:	2300      	movs	r3, #0
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8007ba2:	2101      	movs	r1, #1
  hmsc->bot_state  = USBD_BOT_IDLE;
 8007ba4:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8007ba6:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev,
 8007ba8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8007bac:	231f      	movs	r3, #31
 8007bae:	320c      	adds	r2, #12
 8007bb0:	f7fb bc68 	b.w	8003484 <USBD_LL_PrepareReceive>

08007bb4 <MSC_BOT_DeInit>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 8007bb4:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8007bb8:	2200      	movs	r2, #0
 8007bba:	721a      	strb	r2, [r3, #8]
 8007bbc:	4770      	bx	lr
	...

08007bc0 <MSC_BOT_SendCSW>:
{
 8007bc0:	b570      	push	{r4, r5, r6, lr}
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007bc2:	f242 022c 	movw	r2, #8236	; 0x202c
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007bc6:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007bca:	4b0b      	ldr	r3, [pc, #44]	; (8007bf8 <MSC_BOT_SendCSW+0x38>)
 8007bcc:	50a3      	str	r3, [r4, r2]
  hmsc->csw.bStatus = CSW_Status;
 8007bce:	f242 0338 	movw	r3, #8248	; 0x2038
  USBD_LL_Transmit (pdev, 
 8007bd2:	4422      	add	r2, r4
  hmsc->csw.bStatus = CSW_Status;
 8007bd4:	54e1      	strb	r1, [r4, r3]
  hmsc->bot_state = USBD_BOT_IDLE;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, 
 8007bda:	2181      	movs	r1, #129	; 0x81
 8007bdc:	230d      	movs	r3, #13
{
 8007bde:	4605      	mov	r5, r0
  USBD_LL_Transmit (pdev, 
 8007be0:	f7fb fc49 	bl	8003476 <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev,
 8007be4:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8007be8:	4628      	mov	r0, r5
 8007bea:	231f      	movs	r3, #31
 8007bec:	320c      	adds	r2, #12
 8007bee:	2101      	movs	r1, #1
}
 8007bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 8007bf4:	f7fb bc46 	b.w	8003484 <USBD_LL_PrepareReceive>
 8007bf8:	53425355 	.word	0x53425355

08007bfc <MSC_BOT_DataIn>:
{
 8007bfc:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8007bfe:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8007c02:	7a1a      	ldrb	r2, [r3, #8]
 8007c04:	2a02      	cmp	r2, #2
{
 8007c06:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 8007c08:	d003      	beq.n	8007c12 <MSC_BOT_DataIn+0x16>
 8007c0a:	d314      	bcc.n	8007c36 <MSC_BOT_DataIn+0x3a>
 8007c0c:	2a04      	cmp	r2, #4
 8007c0e:	d910      	bls.n	8007c32 <MSC_BOT_DataIn+0x36>
 8007c10:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 8007c12:	f242 0119 	movw	r1, #8217	; 0x2019
 8007c16:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8007c1a:	321b      	adds	r2, #27
 8007c1c:	5c59      	ldrb	r1, [r3, r1]
 8007c1e:	f000 f8b3 	bl	8007d88 <SCSI_ProcessCmd>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	da07      	bge.n	8007c36 <MSC_BOT_DataIn+0x3a>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8007c26:	2101      	movs	r1, #1
 8007c28:	4620      	mov	r0, r4
}
 8007c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8007c2e:	f7ff bfc7 	b.w	8007bc0 <MSC_BOT_SendCSW>
 8007c32:	2100      	movs	r1, #0
 8007c34:	e7f9      	b.n	8007c2a <MSC_BOT_DataIn+0x2e>
 8007c36:	bd10      	pop	{r4, pc}

08007c38 <MSC_BOT_DataOut>:
{
 8007c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8007c3c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8007c40:	7a26      	ldrb	r6, [r4, #8]
{
 8007c42:	4605      	mov	r5, r0
  switch (hmsc->bot_state)
 8007c44:	b11e      	cbz	r6, 8007c4e <MSC_BOT_DataOut+0x16>
 8007c46:	2e01      	cmp	r6, #1
 8007c48:	d062      	beq.n	8007d10 <MSC_BOT_DataOut+0xd8>
 8007c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007c4e:	f242 0310 	movw	r3, #8208	; 0x2010
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007c52:	f242 0814 	movw	r8, #8212	; 0x2014
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007c56:	58e2      	ldr	r2, [r4, r3]
 8007c58:	f242 0330 	movw	r3, #8240	; 0x2030
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007c5c:	f242 0734 	movw	r7, #8244	; 0x2034
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007c60:	50e2      	str	r2, [r4, r3]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007c62:	f854 3008 	ldr.w	r3, [r4, r8]
 8007c66:	51e3      	str	r3, [r4, r7]
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007c68:	2101      	movs	r1, #1
 8007c6a:	f7fb fc12 	bl	8003492 <USBD_LL_GetRxDataSize>
 8007c6e:	281f      	cmp	r0, #31
 8007c70:	d110      	bne.n	8007c94 <MSC_BOT_DataOut+0x5c>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8007c72:	f242 030c 	movw	r3, #8204	; 0x200c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007c76:	58e2      	ldr	r2, [r4, r3]
 8007c78:	4b2b      	ldr	r3, [pc, #172]	; (8007d28 <MSC_BOT_DataOut+0xf0>)
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d10a      	bne.n	8007c94 <MSC_BOT_DataOut+0x5c>
        (hmsc->cbw.bLUN > 1) || 
 8007c7e:	f242 0319 	movw	r3, #8217	; 0x2019
 8007c82:	5ce1      	ldrb	r1, [r4, r3]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8007c84:	2901      	cmp	r1, #1
 8007c86:	d805      	bhi.n	8007c94 <MSC_BOT_DataOut+0x5c>
          (hmsc->cbw.bCBLength < 1) || 
 8007c88:	f242 031a 	movw	r3, #8218	; 0x201a
        (hmsc->cbw.bLUN > 1) || 
 8007c8c:	5ce3      	ldrb	r3, [r4, r3]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	2b0f      	cmp	r3, #15
 8007c92:	d90e      	bls.n	8007cb2 <MSC_BOT_DataOut+0x7a>
    SCSI_SenseCode(pdev,
 8007c94:	f242 0119 	movw	r1, #8217	; 0x2019
 8007c98:	2320      	movs	r3, #32
 8007c9a:	2205      	movs	r2, #5
 8007c9c:	5c61      	ldrb	r1, [r4, r1]
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	f000 fac2 	bl	8008228 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	7263      	strb	r3, [r4, #9]
        MSC_BOT_Abort(pdev);
 8007ca8:	4628      	mov	r0, r5
}
 8007caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MSC_BOT_Abort(pdev);
 8007cae:	f7ff bf2f 	b.w	8007b10 <MSC_BOT_Abort>
    if(SCSI_ProcessCmd(pdev,
 8007cb2:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8007cb6:	321b      	adds	r2, #27
 8007cb8:	4628      	mov	r0, r5
 8007cba:	f000 f865 	bl	8007d88 <SCSI_ProcessCmd>
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	7a23      	ldrb	r3, [r4, #8]
 8007cc2:	da07      	bge.n	8007cd4 <MSC_BOT_DataOut+0x9c>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8007cc4:	2b05      	cmp	r3, #5
 8007cc6:	d1ef      	bne.n	8007ca8 <MSC_BOT_DataOut+0x70>
       MSC_BOT_SendCSW (pdev,
 8007cc8:	2101      	movs	r1, #1
        MSC_BOT_SendCSW (pdev,
 8007cca:	4628      	mov	r0, r5
}
 8007ccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MSC_BOT_SendCSW (pdev,
 8007cd0:	f7ff bf76 	b.w	8007bc0 <MSC_BOT_SendCSW>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d924      	bls.n	8007d24 <MSC_BOT_DataOut+0xec>
      if (hmsc->bot_data_length > 0)
 8007cda:	8961      	ldrh	r1, [r4, #10]
 8007cdc:	2900      	cmp	r1, #0
 8007cde:	d0f4      	beq.n	8007cca <MSC_BOT_DataOut+0x92>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007ce0:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
  len = MIN (hmsc->cbw.dDataLength, len);
 8007ce4:	f852 3008 	ldr.w	r3, [r2, r8]
 8007ce8:	4299      	cmp	r1, r3
 8007cea:	bf28      	it	cs
 8007cec:	4619      	movcs	r1, r3
  hmsc->csw.dDataResidue -= len;
 8007cee:	59d3      	ldr	r3, [r2, r7]
 8007cf0:	1a5b      	subs	r3, r3, r1
 8007cf2:	51d3      	str	r3, [r2, r7]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007cf4:	f242 0338 	movw	r3, #8248	; 0x2038
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8007cf8:	4628      	mov	r0, r5
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007cfa:	54d6      	strb	r6, [r2, r3]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8007cfc:	2304      	movs	r3, #4
 8007cfe:	7213      	strb	r3, [r2, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8007d00:	b28b      	uxth	r3, r1
 8007d02:	f104 020c 	add.w	r2, r4, #12
 8007d06:	2181      	movs	r1, #129	; 0x81
}
 8007d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8007d0c:	f7fb bbb3 	b.w	8003476 <USBD_LL_Transmit>
    if(SCSI_ProcessCmd(pdev,
 8007d10:	f242 0319 	movw	r3, #8217	; 0x2019
 8007d14:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8007d18:	321b      	adds	r2, #27
 8007d1a:	5ce1      	ldrb	r1, [r4, r3]
 8007d1c:	f000 f834 	bl	8007d88 <SCSI_ProcessCmd>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	dbd1      	blt.n	8007cc8 <MSC_BOT_DataOut+0x90>
 8007d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d28:	43425355 	.word	0x43425355

08007d2c <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007d2c:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007d2e:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 8007d32:	7a63      	ldrb	r3, [r4, #9]
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d105      	bne.n	8007d44 <MSC_BOT_CplClrFeature+0x18>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007d38:	2181      	movs	r1, #129	; 0x81
 8007d3a:	f7fb fb74 	bl	8003426 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 8007d3e:	2300      	movs	r3, #0
 8007d40:	7263      	strb	r3, [r4, #9]
 8007d42:	bd10      	pop	{r4, pc}
  }
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8007d44:	060a      	lsls	r2, r1, #24
 8007d46:	d506      	bpl.n	8007d56 <MSC_BOT_CplClrFeature+0x2a>
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d004      	beq.n	8007d56 <MSC_BOT_CplClrFeature+0x2a>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8007d4c:	2101      	movs	r1, #1
  }
  
}
 8007d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8007d52:	f7ff bf35 	b.w	8007bc0 <MSC_BOT_SendCSW>
 8007d56:	bd10      	pop	{r4, pc}

08007d58 <SCSI_SenseCode.constprop.8>:
* @param  sKey: Sense Key
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
 8007d58:	b570      	push	{r4, r5, r6, lr}
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007d5a:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8007d5e:	f242 055d 	movw	r5, #8285	; 0x205d
 8007d62:	f242 063c 	movw	r6, #8252	; 0x203c
 8007d66:	5d43      	ldrb	r3, [r0, r5]
 8007d68:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
  hmsc->scsi_sense_tail++;
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8007d70:	55a1      	strb	r1, [r4, r6]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007d72:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8007d74:	f504 5401 	add.w	r4, r4, #8256	; 0x2040
 8007d78:	ea4f 2202 	mov.w	r2, r2, lsl #8
  {
    hmsc->scsi_sense_tail = 0;
 8007d7c:	bf08      	it	eq
 8007d7e:	2300      	moveq	r3, #0
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8007d80:	6022      	str	r2, [r4, #0]
    hmsc->scsi_sense_tail = 0;
 8007d82:	5543      	strb	r3, [r0, r5]
 8007d84:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d88 <SCSI_ProcessCmd>:
{
 8007d88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (params[0])
 8007d8c:	7813      	ldrb	r3, [r2, #0]
 8007d8e:	2b1e      	cmp	r3, #30
{
 8007d90:	4605      	mov	r5, r0
 8007d92:	460c      	mov	r4, r1
 8007d94:	4617      	mov	r7, r2
  switch (params[0])
 8007d96:	d00f      	beq.n	8007db8 <SCSI_ProcessCmd+0x30>
 8007d98:	d813      	bhi.n	8007dc2 <SCSI_ProcessCmd+0x3a>
 8007d9a:	2b12      	cmp	r3, #18
 8007d9c:	f000 80b4 	beq.w	8007f08 <SCSI_ProcessCmd+0x180>
 8007da0:	d805      	bhi.n	8007dae <SCSI_ProcessCmd+0x26>
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d060      	beq.n	8007e68 <SCSI_ProcessCmd+0xe0>
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d07b      	beq.n	8007ea2 <SCSI_ProcessCmd+0x11a>
    SCSI_SenseCode(pdev, 
 8007daa:	2220      	movs	r2, #32
 8007dac:	e14a      	b.n	8008044 <SCSI_ProcessCmd+0x2bc>
  switch (params[0])
 8007dae:	2b1a      	cmp	r3, #26
 8007db0:	f000 80c8 	beq.w	8007f44 <SCSI_ProcessCmd+0x1bc>
 8007db4:	2b1b      	cmp	r3, #27
 8007db6:	d1f8      	bne.n	8007daa <SCSI_ProcessCmd+0x22>
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
  hmsc->bot_data_length = 0;
 8007db8:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8007dbc:	2400      	movs	r4, #0
                            hmsc->scsi_blk_addr, 
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */      
  }
  hmsc->bot_data_length = 0;
 8007dbe:	815c      	strh	r4, [r3, #10]
 8007dc0:	e06b      	b.n	8007e9a <SCSI_ProcessCmd+0x112>
  switch (params[0])
 8007dc2:	2b28      	cmp	r3, #40	; 0x28
 8007dc4:	f000 810b 	beq.w	8007fde <SCSI_ProcessCmd+0x256>
 8007dc8:	d828      	bhi.n	8007e1c <SCSI_ProcessCmd+0x94>
 8007dca:	2b23      	cmp	r3, #35	; 0x23
 8007dcc:	f000 80d8 	beq.w	8007f80 <SCSI_ProcessCmd+0x1f8>
 8007dd0:	2b25      	cmp	r3, #37	; 0x25
 8007dd2:	d1ea      	bne.n	8007daa <SCSI_ProcessCmd+0x22>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007dd4:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8007dd8:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8007ddc:	f242 075e 	movw	r7, #8286	; 0x205e
 8007de0:	f242 0860 	movw	r8, #8288	; 0x2060
 8007de4:	4620      	mov	r0, r4
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	19f2      	adds	r2, r6, r7
 8007dea:	eb06 0108 	add.w	r1, r6, r8
 8007dee:	4798      	blx	r3
 8007df0:	4604      	mov	r4, r0
 8007df2:	2800      	cmp	r0, #0
 8007df4:	f040 80d9 	bne.w	8007faa <SCSI_ProcessCmd+0x222>
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 8007df8:	f856 3008 	ldr.w	r3, [r6, r8]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	0e1a      	lsrs	r2, r3, #24
 8007e00:	7332      	strb	r2, [r6, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 8007e02:	0c1a      	lsrs	r2, r3, #16
 8007e04:	7372      	strb	r2, [r6, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 8007e06:	0a1a      	lsrs	r2, r3, #8
 8007e08:	73b2      	strb	r2, [r6, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 8007e0a:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007e0c:	5bf3      	ldrh	r3, [r6, r7]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8007e0e:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007e10:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007e12:	7430      	strb	r0, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007e14:	7470      	strb	r0, [r6, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007e16:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data_length = 8;
 8007e18:	2308      	movs	r3, #8
 8007e1a:	e0de      	b.n	8007fda <SCSI_ProcessCmd+0x252>
  switch (params[0])
 8007e1c:	2b2f      	cmp	r3, #47	; 0x2f
 8007e1e:	f000 81ac 	beq.w	800817a <SCSI_ProcessCmd+0x3f2>
 8007e22:	2b5a      	cmp	r3, #90	; 0x5a
 8007e24:	f000 809d 	beq.w	8007f62 <SCSI_ProcessCmd+0x1da>
 8007e28:	2b2a      	cmp	r3, #42	; 0x2a
 8007e2a:	d1be      	bne.n	8007daa <SCSI_ProcessCmd+0x22>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8007e2c:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007e30:	7a33      	ldrb	r3, [r6, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f040 815e 	bne.w	80080f4 <SCSI_ProcessCmd+0x36c>
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 8007e38:	f242 0318 	movw	r3, #8216	; 0x2018
 8007e3c:	56f3      	ldrsb	r3, [r6, r3]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	dbb3      	blt.n	8007daa <SCSI_ProcessCmd+0x22>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8007e42:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8007e46:	4608      	mov	r0, r1
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	4798      	blx	r3
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	f040 80ac 	bne.w	8007faa <SCSI_ProcessCmd+0x222>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 8007e52:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8007e56:	4620      	mov	r0, r4
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	4798      	blx	r3
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f000 810d 	beq.w	800807e <SCSI_ProcessCmd+0x2f6>
      SCSI_SenseCode(pdev,
 8007e64:	2227      	movs	r2, #39	; 0x27
 8007e66:	e0a1      	b.n	8007fac <SCSI_ProcessCmd+0x224>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8007e68:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if (hmsc->cbw.dDataLength != 0)
 8007e6c:	f242 0314 	movw	r3, #8212	; 0x2014
 8007e70:	58f3      	ldr	r3, [r6, r3]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d199      	bne.n	8007daa <SCSI_ProcessCmd+0x22>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8007e76:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8007e7a:	4608      	mov	r0, r1
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	4798      	blx	r3
 8007e80:	4604      	mov	r4, r0
 8007e82:	b148      	cbz	r0, 8007e98 <SCSI_ProcessCmd+0x110>
    SCSI_SenseCode(pdev,
 8007e84:	223a      	movs	r2, #58	; 0x3a
 8007e86:	2102      	movs	r1, #2
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f7ff ff65 	bl	8007d58 <SCSI_SenseCode.constprop.8>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007e8e:	2305      	movs	r3, #5
 8007e90:	7233      	strb	r3, [r6, #8]
    return -1;
 8007e92:	f04f 34ff 	mov.w	r4, #4294967295
 8007e96:	e000      	b.n	8007e9a <SCSI_ProcessCmd+0x112>
  hmsc->bot_data_length = 0;
 8007e98:	8170      	strh	r0, [r6, #10]
}
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	b003      	add	sp, #12
 8007e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea2:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
    hmsc->bot_data[i] = 0;
 8007ea6:	2400      	movs	r4, #0
 8007ea8:	f103 020c 	add.w	r2, r3, #12
 8007eac:	f103 011e 	add.w	r1, r3, #30
 8007eb0:	f802 4b01 	strb.w	r4, [r2], #1
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 8007eb4:	428a      	cmp	r2, r1
 8007eb6:	d1fb      	bne.n	8007eb0 <SCSI_ProcessCmd+0x128>
  hmsc->bot_data[0]	= 0x70;		
 8007eb8:	2270      	movs	r2, #112	; 0x70
 8007eba:	731a      	strb	r2, [r3, #12]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8007ebc:	f242 005c 	movw	r0, #8284	; 0x205c
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8007ec0:	220c      	movs	r2, #12
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8007ec2:	f242 015d 	movw	r1, #8285	; 0x205d
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8007ec6:	74da      	strb	r2, [r3, #19]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8007ec8:	5c1a      	ldrb	r2, [r3, r0]
 8007eca:	5c59      	ldrb	r1, [r3, r1]
 8007ecc:	4291      	cmp	r1, r2
 8007ece:	d013      	beq.n	8007ef8 <SCSI_ProcessCmd+0x170>
 8007ed0:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 8007ed4:	f242 053c 	movw	r5, #8252	; 0x203c
    hmsc->scsi_sense_head++;
 8007ed8:	3201      	adds	r2, #1
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 8007eda:	5d4d      	ldrb	r5, [r1, r5]
 8007edc:	739d      	strb	r5, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 8007ede:	f242 0541 	movw	r5, #8257	; 0x2041
    hmsc->scsi_sense_head++;
 8007ee2:	b2d2      	uxtb	r2, r2
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 8007ee4:	5d4d      	ldrb	r5, [r1, r5]
 8007ee6:	761d      	strb	r5, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 8007ee8:	f501 5101 	add.w	r1, r1, #8256	; 0x2040
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007eec:	2a04      	cmp	r2, #4
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 8007eee:	7809      	ldrb	r1, [r1, #0]
 8007ef0:	7659      	strb	r1, [r3, #25]
    hmsc->scsi_sense_head++;
 8007ef2:	bf14      	ite	ne
 8007ef4:	541a      	strbne	r2, [r3, r0]
      hmsc->scsi_sense_head = 0;
 8007ef6:	541c      	strbeq	r4, [r3, r0]
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 8007ef8:	2212      	movs	r2, #18
 8007efa:	815a      	strh	r2, [r3, #10]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007efc:	793a      	ldrb	r2, [r7, #4]
 8007efe:	2a12      	cmp	r2, #18
    hmsc->bot_data_length = params[4];
 8007f00:	bf98      	it	ls
 8007f02:	815a      	strhls	r2, [r3, #10]
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
  }
  
  return 0;
 8007f04:	2400      	movs	r4, #0
 8007f06:	e7c8      	b.n	8007e9a <SCSI_ProcessCmd+0x112>
  if (params[1] & 0x01)/*Evpd is set*/
 8007f08:	787b      	ldrb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007f0a:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  if (params[1] & 0x01)/*Evpd is set*/
 8007f0e:	07db      	lsls	r3, r3, #31
 8007f10:	d415      	bmi.n	8007f3e <SCSI_ProcessCmd+0x1b6>
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8007f12:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
 8007f1c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007f20:	7939      	ldrb	r1, [r7, #4]
    len = pPage[4] + 5;
 8007f22:	7923      	ldrb	r3, [r4, #4]
 8007f24:	3305      	adds	r3, #5
 8007f26:	428b      	cmp	r3, r1
 8007f28:	bf28      	it	cs
 8007f2a:	460b      	movcs	r3, r1
  hmsc->bot_data_length = len;
 8007f2c:	8153      	strh	r3, [r2, #10]
  while (len) 
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d0e8      	beq.n	8007f04 <SCSI_ProcessCmd+0x17c>
    len--;
 8007f32:	3b01      	subs	r3, #1
 8007f34:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pPage[len];
 8007f36:	18d1      	adds	r1, r2, r3
 8007f38:	5ce0      	ldrb	r0, [r4, r3]
 8007f3a:	7308      	strb	r0, [r1, #12]
 8007f3c:	e7f7      	b.n	8007f2e <SCSI_ProcessCmd+0x1a6>
    len = LENGTH_INQUIRY_PAGE00;
 8007f3e:	2307      	movs	r3, #7
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 8007f40:	4cb6      	ldr	r4, [pc, #728]	; (800821c <SCSI_ProcessCmd+0x494>)
 8007f42:	e7f3      	b.n	8007f2c <SCSI_ProcessCmd+0x1a4>
 8007f44:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8007f48:	49b5      	ldr	r1, [pc, #724]	; (8008220 <SCSI_ProcessCmd+0x498>)
  hmsc->bot_data_length = len;
 8007f4a:	2208      	movs	r2, #8
 8007f4c:	815a      	strh	r2, [r3, #10]
 8007f4e:	f103 0213 	add.w	r2, r3, #19
 8007f52:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8007f54:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8007f58:	f802 0901 	strb.w	r0, [r2], #-1
  while (len) 
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d1f9      	bne.n	8007f54 <SCSI_ProcessCmd+0x1cc>
 8007f60:	e7d0      	b.n	8007f04 <SCSI_ProcessCmd+0x17c>
 8007f62:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8007f66:	49af      	ldr	r1, [pc, #700]	; (8008224 <SCSI_ProcessCmd+0x49c>)
  hmsc->bot_data_length = len;
 8007f68:	2208      	movs	r2, #8
 8007f6a:	815a      	strh	r2, [r3, #10]
 8007f6c:	f103 0213 	add.w	r2, r3, #19
 8007f70:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8007f72:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8007f76:	f802 0901 	strb.w	r0, [r2], #-1
  while (len) 
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d1f9      	bne.n	8007f72 <SCSI_ProcessCmd+0x1ea>
 8007f7e:	e7c1      	b.n	8007f04 <SCSI_ProcessCmd+0x17c>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8007f80:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
    hmsc->bot_data[i] = 0;
 8007f84:	2100      	movs	r1, #0
 8007f86:	f106 030c 	add.w	r3, r6, #12
 8007f8a:	f106 0218 	add.w	r2, r6, #24
 8007f8e:	f803 1b01 	strb.w	r1, [r3], #1
  for(i=0 ; i < 12 ; i++) 
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d1fb      	bne.n	8007f8e <SCSI_ProcessCmd+0x206>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 8007f96:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f10d 0202 	add.w	r2, sp, #2
 8007fa2:	a901      	add	r1, sp, #4
 8007fa4:	4798      	blx	r3
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	b118      	cbz	r0, 8007fb2 <SCSI_ProcessCmd+0x22a>
    SCSI_SenseCode(pdev,
 8007faa:	223a      	movs	r2, #58	; 0x3a
      SCSI_SenseCode(pdev,
 8007fac:	2102      	movs	r1, #2
    SCSI_SenseCode(pdev, 
 8007fae:	4628      	mov	r0, r5
 8007fb0:	e0eb      	b.n	800818a <SCSI_ProcessCmd+0x402>
    hmsc->bot_data[3] = 0x08;
 8007fb2:	2308      	movs	r3, #8
 8007fb4:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8007fb6:	9b01      	ldr	r3, [sp, #4]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007fb8:	7570      	strb	r0, [r6, #21]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	0e1a      	lsrs	r2, r3, #24
 8007fbe:	7432      	strb	r2, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 8007fc0:	0c1a      	lsrs	r2, r3, #16
 8007fc2:	7472      	strb	r2, [r6, #17]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 8007fc4:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 8007fc6:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[8] = 0x02;
 8007fc8:	2302      	movs	r3, #2
 8007fca:	7533      	strb	r3, [r6, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007fcc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 8007fd0:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007fd2:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007fd4:	75f3      	strb	r3, [r6, #23]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007fd6:	75b2      	strb	r2, [r6, #22]
    hmsc->bot_data_length = 12;
 8007fd8:	230c      	movs	r3, #12
    hmsc->bot_data_length = 8;
 8007fda:	8173      	strh	r3, [r6, #10]
 8007fdc:	e75d      	b.n	8007e9a <SCSI_ProcessCmd+0x112>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8007fde:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 8007fe2:	7a33      	ldrb	r3, [r6, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f040 80f1 	bne.w	80081cc <SCSI_ProcessCmd+0x444>
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 8007fea:	f242 0318 	movw	r3, #8216	; 0x2018
 8007fee:	56f3      	ldrsb	r3, [r6, r3]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f6bf aeda 	bge.w	8007daa <SCSI_ProcessCmd+0x22>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8007ff6:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8007ffa:	4608      	mov	r0, r1
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	4798      	blx	r3
 8008000:	2800      	cmp	r0, #0
 8008002:	d1d2      	bne.n	8007faa <SCSI_ProcessCmd+0x222>
      (params[3] << 16) | \
 8008004:	78fb      	ldrb	r3, [r7, #3]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008006:	78ba      	ldrb	r2, [r7, #2]
      (params[3] << 16) | \
 8008008:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800800a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
          params[5];
 800800e:	797a      	ldrb	r2, [r7, #5]
        (params[4] <<  8) | \
 8008010:	4313      	orrs	r3, r2
 8008012:	793a      	ldrb	r2, [r7, #4]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008014:	f242 0e64 	movw	lr, #8292	; 0x2064
        (params[4] <<  8) | \
 8008018:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800801c:	f846 300e 	str.w	r3, [r6, lr]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8008020:	79fa      	ldrb	r2, [r7, #7]
      params[8];  
 8008022:	7a39      	ldrb	r1, [r7, #8]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8008024:	f242 0c60 	movw	ip, #8288	; 0x2060
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8008028:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 800802c:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 8008030:	f852 200c 	ldr.w	r2, [r2, ip]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8008034:	f242 0068 	movw	r0, #8296	; 0x2068
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8008038:	185f      	adds	r7, r3, r1
 800803a:	4297      	cmp	r7, r2
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 800803c:	5031      	str	r1, [r6, r0]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 800803e:	f240 80b5 	bls.w	80081ac <SCSI_ProcessCmd+0x424>
    SCSI_SenseCode(pdev,
 8008042:	2221      	movs	r2, #33	; 0x21
    SCSI_SenseCode(pdev, 
 8008044:	2105      	movs	r1, #5
 8008046:	e7b2      	b.n	8007fae <SCSI_ProcessCmd+0x226>
  USBD_LL_Transmit (pdev, 
 8008048:	b2bb      	uxth	r3, r7
 800804a:	4652      	mov	r2, sl
 800804c:	2181      	movs	r1, #129	; 0x81
 800804e:	4628      	mov	r0, r5
 8008050:	f7fb fa11 	bl	8003476 <USBD_LL_Transmit>
  hmsc->scsi_blk_addr   += len; 
 8008054:	f856 3009 	ldr.w	r3, [r6, r9]
  hmsc->scsi_blk_len    -= len;  
 8008058:	f856 4008 	ldr.w	r4, [r6, r8]
  hmsc->csw.dDataResidue -= len;
 800805c:	f242 0234 	movw	r2, #8244	; 0x2034
  hmsc->scsi_blk_addr   += len; 
 8008060:	443b      	add	r3, r7
 8008062:	f846 3009 	str.w	r3, [r6, r9]
  hmsc->csw.dDataResidue -= len;
 8008066:	58b3      	ldr	r3, [r6, r2]
  hmsc->scsi_blk_len    -= len;  
 8008068:	1be4      	subs	r4, r4, r7
  hmsc->csw.dDataResidue -= len;
 800806a:	1bdf      	subs	r7, r3, r7
  hmsc->scsi_blk_len    -= len;  
 800806c:	f846 4008 	str.w	r4, [r6, r8]
  hmsc->csw.dDataResidue -= len;
 8008070:	50b7      	str	r7, [r6, r2]
  if (hmsc->scsi_blk_len == 0)
 8008072:	2c00      	cmp	r4, #0
 8008074:	f47f af46 	bne.w	8007f04 <SCSI_ProcessCmd+0x17c>
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8008078:	2303      	movs	r3, #3
 800807a:	7233      	strb	r3, [r6, #8]
 800807c:	e70d      	b.n	8007e9a <SCSI_ProcessCmd+0x112>
      (params[3] << 16) | \
 800807e:	78fa      	ldrb	r2, [r7, #3]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008080:	78bb      	ldrb	r3, [r7, #2]
      (params[3] << 16) | \
 8008082:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008084:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
          params[5];
 8008088:	797b      	ldrb	r3, [r7, #5]
        (params[4] <<  8) | \
 800808a:	431a      	orrs	r2, r3
 800808c:	793b      	ldrb	r3, [r7, #4]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800808e:	f242 0e64 	movw	lr, #8292	; 0x2064
        (params[4] <<  8) | \
 8008092:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8008096:	f846 200e 	str.w	r2, [r6, lr]
      params[8];  
 800809a:	7a3b      	ldrb	r3, [r7, #8]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 800809c:	79f9      	ldrb	r1, [r7, #7]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 800809e:	f242 0c60 	movw	ip, #8288	; 0x2060
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80080a2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80080a6:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 80080aa:	f853 300c 	ldr.w	r3, [r3, ip]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80080ae:	f242 0068 	movw	r0, #8296	; 0x2068
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80080b2:	1857      	adds	r7, r2, r1
 80080b4:	429f      	cmp	r7, r3
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80080b6:	5031      	str	r1, [r6, r0]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80080b8:	d8c3      	bhi.n	8008042 <SCSI_ProcessCmd+0x2ba>
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80080ba:	f242 035e 	movw	r3, #8286	; 0x205e
 80080be:	5af3      	ldrh	r3, [r6, r3]
 80080c0:	435a      	muls	r2, r3
 80080c2:	f846 200e 	str.w	r2, [r6, lr]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80080c6:	f242 0214 	movw	r2, #8212	; 0x2014
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80080ca:	434b      	muls	r3, r1
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80080cc:	58b2      	ldr	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80080ce:	5033      	str	r3, [r6, r0]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	f47f ae6a 	bne.w	8007daa <SCSI_ProcessCmd+0x22>
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 80080d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 80080da:	f04f 0101 	mov.w	r1, #1
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 80080de:	bf28      	it	cs
 80080e0:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 80080e4:	7231      	strb	r1, [r6, #8]
    USBD_LL_PrepareReceive (pdev,
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	f106 020c 	add.w	r2, r6, #12
 80080ec:	4628      	mov	r0, r5
 80080ee:	f7fb f9c9 	bl	8003484 <USBD_LL_PrepareReceive>
 80080f2:	e6d2      	b.n	8007e9a <SCSI_ProcessCmd+0x112>
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80080f4:	f242 0968 	movw	r9, #8296	; 0x2068
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 80080f8:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80080fc:	f856 7009 	ldr.w	r7, [r6, r9]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8008100:	f8d0 b014 	ldr.w	fp, [r0, #20]
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8008104:	f242 035e 	movw	r3, #8286	; 0x205e
 8008108:	f242 0a64 	movw	sl, #8292	; 0x2064
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 800810c:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
                              hmsc->bot_data, 
 8008110:	f106 080c 	add.w	r8, r6, #12
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8008114:	bf28      	it	cs
 8008116:	f44f 5700 	movcs.w	r7, #8192	; 0x2000
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 800811a:	5af2      	ldrh	r2, [r6, r3]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 800811c:	f856 100a 	ldr.w	r1, [r6, sl]
                              len / hmsc->scsi_blk_size) < 0)
 8008120:	fbb7 f3f2 	udiv	r3, r7, r2
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8008124:	4620      	mov	r0, r4
 8008126:	fbb1 f2f2 	udiv	r2, r1, r2
 800812a:	b29b      	uxth	r3, r3
 800812c:	4641      	mov	r1, r8
 800812e:	47d8      	blx	fp
 8008130:	2800      	cmp	r0, #0
 8008132:	da01      	bge.n	8008138 <SCSI_ProcessCmd+0x3b0>
    SCSI_SenseCode(pdev,
 8008134:	2203      	movs	r2, #3
 8008136:	e06e      	b.n	8008216 <SCSI_ProcessCmd+0x48e>
  hmsc->scsi_blk_addr  += len; 
 8008138:	f856 300a 	ldr.w	r3, [r6, sl]
  hmsc->csw.dDataResidue -= len;
 800813c:	f242 0134 	movw	r1, #8244	; 0x2034
  hmsc->scsi_blk_addr  += len; 
 8008140:	443b      	add	r3, r7
 8008142:	f846 300a 	str.w	r3, [r6, sl]
  hmsc->csw.dDataResidue -= len;
 8008146:	5872      	ldr	r2, [r6, r1]
  hmsc->scsi_blk_len   -= len; 
 8008148:	f856 3009 	ldr.w	r3, [r6, r9]
 800814c:	1bdb      	subs	r3, r3, r7
  hmsc->csw.dDataResidue -= len;
 800814e:	1bd7      	subs	r7, r2, r7
  hmsc->scsi_blk_len   -= len; 
 8008150:	f846 3009 	str.w	r3, [r6, r9]
  hmsc->csw.dDataResidue -= len;
 8008154:	5077      	str	r7, [r6, r1]
  if (hmsc->scsi_blk_len == 0)
 8008156:	b923      	cbnz	r3, 8008162 <SCSI_ProcessCmd+0x3da>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8008158:	2100      	movs	r1, #0
 800815a:	4628      	mov	r0, r5
 800815c:	f7ff fd30 	bl	8007bc0 <MSC_BOT_SendCSW>
 8008160:	e6d0      	b.n	8007f04 <SCSI_ProcessCmd+0x17c>
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 8008162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008166:	bf28      	it	cs
 8008168:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    USBD_LL_PrepareReceive (pdev,
 800816c:	b29b      	uxth	r3, r3
 800816e:	4642      	mov	r2, r8
 8008170:	2101      	movs	r1, #1
 8008172:	4628      	mov	r0, r5
 8008174:	f7fb f986 	bl	8003484 <USBD_LL_PrepareReceive>
 8008178:	e6c4      	b.n	8007f04 <SCSI_ProcessCmd+0x17c>
  if ((params[1]& 0x02) == 0x02) 
 800817a:	7854      	ldrb	r4, [r2, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 800817c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  if ((params[1]& 0x02) == 0x02) 
 8008180:	f014 0402 	ands.w	r4, r4, #2
 8008184:	d004      	beq.n	8008190 <SCSI_ProcessCmd+0x408>
    SCSI_SenseCode (pdev,
 8008186:	2224      	movs	r2, #36	; 0x24
 8008188:	2105      	movs	r1, #5
    SCSI_SenseCode(pdev, 
 800818a:	f7ff fde5 	bl	8007d58 <SCSI_SenseCode.constprop.8>
 800818e:	e680      	b.n	8007e92 <SCSI_ProcessCmd+0x10a>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8008190:	f242 0268 	movw	r2, #8296	; 0x2068
  if(SCSI_CheckAddressRange(pdev,
 8008194:	f242 0164 	movw	r1, #8292	; 0x2064
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8008198:	5a9a      	ldrh	r2, [r3, r2]
 800819a:	5859      	ldr	r1, [r3, r1]
 800819c:	440a      	add	r2, r1
 800819e:	f242 0160 	movw	r1, #8288	; 0x2060
 80081a2:	5859      	ldr	r1, [r3, r1]
 80081a4:	428a      	cmp	r2, r1
 80081a6:	f67f ae0a 	bls.w	8007dbe <SCSI_ProcessCmd+0x36>
 80081aa:	e74a      	b.n	8008042 <SCSI_ProcessCmd+0x2ba>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 80081ac:	2202      	movs	r2, #2
 80081ae:	7232      	strb	r2, [r6, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80081b0:	f242 025e 	movw	r2, #8286	; 0x205e
 80081b4:	5ab2      	ldrh	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80081b6:	4351      	muls	r1, r2
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80081b8:	4353      	muls	r3, r2
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80081ba:	f242 0214 	movw	r2, #8212	; 0x2014
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80081be:	f846 300e 	str.w	r3, [r6, lr]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80081c2:	58b2      	ldr	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80081c4:	5031      	str	r1, [r6, r0]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80081c6:	4291      	cmp	r1, r2
 80081c8:	f47f adef 	bne.w	8007daa <SCSI_ProcessCmd+0x22>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 80081cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081d0:	8173      	strh	r3, [r6, #10]
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80081d2:	f242 0868 	movw	r8, #8296	; 0x2068
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 80081d6:	f8d5 6218 	ldr.w	r6, [r5, #536]	; 0x218
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 80081da:	f8d5 021c 	ldr.w	r0, [r5, #540]	; 0x21c
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80081de:	f856 7008 	ldr.w	r7, [r6, r8]
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 80081e2:	f8d0 b010 	ldr.w	fp, [r0, #16]
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80081e6:	429f      	cmp	r7, r3
 80081e8:	bf28      	it	cs
 80081ea:	461f      	movcs	r7, r3
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 80081ec:	f242 0964 	movw	r9, #8292	; 0x2064
 80081f0:	f242 035e 	movw	r3, #8286	; 0x205e
                              hmsc->bot_data, 
 80081f4:	f106 0a0c 	add.w	sl, r6, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 80081f8:	5af2      	ldrh	r2, [r6, r3]
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 80081fa:	f856 1009 	ldr.w	r1, [r6, r9]
                              len / hmsc->scsi_blk_size) < 0)
 80081fe:	fbb7 f3f2 	udiv	r3, r7, r2
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8008202:	4620      	mov	r0, r4
 8008204:	fbb1 f2f2 	udiv	r2, r1, r2
 8008208:	b29b      	uxth	r3, r3
 800820a:	4651      	mov	r1, sl
 800820c:	47d8      	blx	fp
 800820e:	2800      	cmp	r0, #0
 8008210:	f6bf af1a 	bge.w	8008048 <SCSI_ProcessCmd+0x2c0>
    SCSI_SenseCode(pdev,
 8008214:	2211      	movs	r2, #17
    SCSI_SenseCode(pdev,
 8008216:	2104      	movs	r1, #4
 8008218:	e6c9      	b.n	8007fae <SCSI_ProcessCmd+0x226>
 800821a:	bf00      	nop
 800821c:	0800b7b4 	.word	0x0800b7b4
 8008220:	0800b7b4 	.word	0x0800b7b4
 8008224:	0800b7ac 	.word	0x0800b7ac

08008228 <SCSI_SenseCode>:
{
 8008228:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800822a:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800822e:	f242 055d 	movw	r5, #8285	; 0x205d
 8008232:	f242 063c 	movw	r6, #8252	; 0x203c
 8008236:	5d41      	ldrb	r1, [r0, r5]
 8008238:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
  hmsc->scsi_sense_tail++;
 800823c:	3101      	adds	r1, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800823e:	55a2      	strb	r2, [r4, r6]
  hmsc->scsi_sense_tail++;
 8008240:	b2c9      	uxtb	r1, r1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8008242:	f504 5401 	add.w	r4, r4, #8256	; 0x2040
 8008246:	021b      	lsls	r3, r3, #8
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8008248:	2904      	cmp	r1, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 800824a:	6023      	str	r3, [r4, #0]
    hmsc->scsi_sense_tail = 0;
 800824c:	bf0a      	itet	eq
 800824e:	2300      	moveq	r3, #0
  hmsc->scsi_sense_tail++;
 8008250:	5541      	strbne	r1, [r0, r5]
    hmsc->scsi_sense_tail = 0;
 8008252:	5543      	strbeq	r3, [r0, r5]
 8008254:	bd70      	pop	{r4, r5, r6, pc}

08008256 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008256:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8008258:	b180      	cbz	r0, 800827c <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800825a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800825e:	b113      	cbz	r3, 8008266 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8008260:	2300      	movs	r3, #0
 8008262:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8008266:	b109      	cbz	r1, 800826c <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8008268:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800826c:	2301      	movs	r3, #1
 800826e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8008272:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008274:	f7fb f87c 	bl	8003370 <USBD_LL_Init>

  return USBD_OK;
 8008278:	2000      	movs	r0, #0
 800827a:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800827c:	2002      	movs	r0, #2
}
 800827e:	bd08      	pop	{r3, pc}

08008280 <Battey_Charge_Mode>:

USBD_StatusTypeDef Battey_Charge_Mode(USBD_HandleTypeDef *pdev)
{
	if ( pdev->dev_state  == USBD_STATE_DEFAULT)
 8008280:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8008284:	2b01      	cmp	r3, #1
		return USBD_OK;
	else
		return USBD_FAIL;

}
 8008286:	bf14      	ite	ne
 8008288:	2002      	movne	r0, #2
 800828a:	2000      	moveq	r0, #0
 800828c:	4770      	bx	lr

0800828e <USBD_DeInit>:
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
  /* Set Default State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800828e:	2301      	movs	r3, #1
{
 8008290:	b510      	push	{r4, lr}
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8008292:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008296:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800829a:	7901      	ldrb	r1, [r0, #4]
 800829c:	685b      	ldr	r3, [r3, #4]
{
 800829e:	4604      	mov	r4, r0
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80082a0:	4798      	blx	r3
  
    /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 80082a2:	4620      	mov	r0, r4
 80082a4:	f7fb f8a0 	bl	80033e8 <USBD_LL_Stop>
  
  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 80082a8:	4620      	mov	r0, r4
 80082aa:	f7fb f88f 	bl	80033cc <USBD_LL_DeInit>
  
  return USBD_OK;
}
 80082ae:	2000      	movs	r0, #0
 80082b0:	bd10      	pop	{r4, pc}

080082b2 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80082b2:	b119      	cbz	r1, 80082bc <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80082b4:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 80082b8:	2000      	movs	r0, #0
 80082ba:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80082bc:	2002      	movs	r0, #2
  }
  
  return status;
}
 80082be:	4770      	bx	lr

080082c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80082c0:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80082c2:	f7fb f88a 	bl	80033da <USBD_LL_Start>
  
  return USBD_OK;  
}
 80082c6:	2000      	movs	r0, #0
 80082c8:	bd08      	pop	{r3, pc}

080082ca <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
{
 80082ca:	b510      	push	{r4, lr}
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80082cc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80082d0:	7901      	ldrb	r1, [r0, #4]
 80082d2:	685b      	ldr	r3, [r3, #4]
{
 80082d4:	4604      	mov	r4, r0
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80082d6:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 80082d8:	4620      	mov	r0, r4
 80082da:	f7fb f885 	bl	80033e8 <USBD_LL_Stop>
  
  return USBD_OK;  
}
 80082de:	2000      	movs	r0, #0
 80082e0:	bd10      	pop	{r4, pc}

080082e2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082e2:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 80082e4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80082e8:	b90b      	cbnz	r3, 80082ee <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80082ea:	2002      	movs	r0, #2
 80082ec:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4798      	blx	r3
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d1f9      	bne.n	80082ea <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80082f6:	bd08      	pop	{r3, pc}

080082f8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082f8:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80082fa:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	4798      	blx	r3
  return USBD_OK;
}
 8008302:	2000      	movs	r0, #0
 8008304:	bd08      	pop	{r3, pc}

08008306 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008306:	b538      	push	{r3, r4, r5, lr}
 8008308:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800830a:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800830e:	4628      	mov	r0, r5
 8008310:	f000 fa75 	bl	80087fe <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8008314:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8008316:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 800831a:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800831e:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8008322:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8008326:	f001 031f 	and.w	r3, r1, #31
 800832a:	2b01      	cmp	r3, #1
 800832c:	d00e      	beq.n	800834c <USBD_LL_SetupStage+0x46>
 800832e:	d307      	bcc.n	8008340 <USBD_LL_SetupStage+0x3a>
 8008330:	2b02      	cmp	r3, #2
 8008332:	d010      	beq.n	8008356 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8008334:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8008338:	4620      	mov	r0, r4
 800833a:	f7fb f874 	bl	8003426 <USBD_LL_StallEP>
    break;
 800833e:	e003      	b.n	8008348 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8008340:	4629      	mov	r1, r5
 8008342:	4620      	mov	r0, r4
 8008344:	f000 f8e6 	bl	8008514 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8008348:	2000      	movs	r0, #0
 800834a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800834c:	4629      	mov	r1, r5
 800834e:	4620      	mov	r0, r4
 8008350:	f000 f9da 	bl	8008708 <USBD_StdItfReq>
    break;
 8008354:	e7f8      	b.n	8008348 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8008356:	4629      	mov	r1, r5
 8008358:	4620      	mov	r0, r4
 800835a:	f000 f9ed 	bl	8008738 <USBD_StdEPReq>
    break;
 800835e:	e7f3      	b.n	8008348 <USBD_LL_SetupStage+0x42>

08008360 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4604      	mov	r4, r0
 8008364:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8008366:	bb11      	cbnz	r1, 80083ae <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008368:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800836c:	2b03      	cmp	r3, #3
 800836e:	d10f      	bne.n	8008390 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8008370:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8008374:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8008378:	4293      	cmp	r3, r2
 800837a:	d90b      	bls.n	8008394 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 800837c:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800837e:	429a      	cmp	r2, r3
 8008380:	bf28      	it	cs
 8008382:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8008384:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8008388:	b292      	uxth	r2, r2
 800838a:	4629      	mov	r1, r5
 800838c:	f000 fa96 	bl	80088bc <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8008390:	2000      	movs	r0, #0
 8008392:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8008394:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	b123      	cbz	r3, 80083a6 <USBD_LL_DataOutStage+0x46>
 800839c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80083a0:	2a03      	cmp	r2, #3
 80083a2:	d100      	bne.n	80083a6 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 80083a4:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80083a6:	4620      	mov	r0, r4
 80083a8:	f000 fa90 	bl	80088cc <USBD_CtlSendStatus>
 80083ac:	e7f0      	b.n	8008390 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 80083ae:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d0eb      	beq.n	8008390 <USBD_LL_DataOutStage+0x30>
 80083b8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80083bc:	2a03      	cmp	r2, #3
 80083be:	d1e7      	bne.n	8008390 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 80083c0:	4798      	blx	r3
 80083c2:	e7e5      	b.n	8008390 <USBD_LL_DataOutStage+0x30>

080083c4 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	4613      	mov	r3, r2
 80083c8:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80083ca:	460e      	mov	r6, r1
 80083cc:	2900      	cmp	r1, #0
 80083ce:	d13d      	bne.n	800844c <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80083d0:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80083d4:	2a02      	cmp	r2, #2
 80083d6:	d10f      	bne.n	80083f8 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 80083d8:	69c5      	ldr	r5, [r0, #28]
 80083da:	6a02      	ldr	r2, [r0, #32]
 80083dc:	4295      	cmp	r5, r2
 80083de:	d914      	bls.n	800840a <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 80083e0:	1aaa      	subs	r2, r5, r2
 80083e2:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 80083e4:	4619      	mov	r1, r3
 80083e6:	b292      	uxth	r2, r2
 80083e8:	f000 fa51 	bl	800888e <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80083ec:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80083ee:	461a      	mov	r2, r3
 80083f0:	4619      	mov	r1, r3
 80083f2:	4620      	mov	r0, r4
 80083f4:	f7fb f846 	bl	8003484 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80083f8:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d102      	bne.n	8008406 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8008400:	2300      	movs	r3, #0
 8008402:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8008406:	2000      	movs	r0, #0
 8008408:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800840a:	6983      	ldr	r3, [r0, #24]
 800840c:	fbb3 f5f2 	udiv	r5, r3, r2
 8008410:	fb02 3515 	mls	r5, r2, r5, r3
 8008414:	b965      	cbnz	r5, 8008430 <USBD_LL_DataInStage+0x6c>
 8008416:	429a      	cmp	r2, r3
 8008418:	d80a      	bhi.n	8008430 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 800841a:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 800841e:	4293      	cmp	r3, r2
 8008420:	d206      	bcs.n	8008430 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8008422:	462a      	mov	r2, r5
 8008424:	f000 fa33 	bl	800888e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8008428:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 800842c:	462b      	mov	r3, r5
 800842e:	e7de      	b.n	80083ee <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008430:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	b12b      	cbz	r3, 8008444 <USBD_LL_DataInStage+0x80>
 8008438:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 800843c:	2a03      	cmp	r2, #3
 800843e:	d101      	bne.n	8008444 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8008440:	4620      	mov	r0, r4
 8008442:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8008444:	4620      	mov	r0, r4
 8008446:	f000 fa4c 	bl	80088e2 <USBD_CtlReceiveStatus>
 800844a:	e7d5      	b.n	80083f8 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 800844c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d0d7      	beq.n	8008406 <USBD_LL_DataInStage+0x42>
 8008456:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800845a:	2a03      	cmp	r2, #3
 800845c:	d1d3      	bne.n	8008406 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 800845e:	4798      	blx	r3
 8008460:	e7d1      	b.n	8008406 <USBD_LL_DataInStage+0x42>

08008462 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008462:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8008464:	2200      	movs	r2, #0
{
 8008466:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8008468:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800846a:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 800846c:	2340      	movs	r3, #64	; 0x40
 800846e:	f7fa ffc2 	bl	80033f6 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8008472:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008474:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8008478:	2200      	movs	r2, #0
 800847a:	2180      	movs	r1, #128	; 0x80
 800847c:	4620      	mov	r0, r4
 800847e:	f7fa ffba 	bl	80033f6 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008482:	2301      	movs	r3, #1
 8008484:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8008488:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800848c:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800848e:	b12b      	cbz	r3, 800849c <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8008490:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8008494:	7921      	ldrb	r1, [r4, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	4620      	mov	r0, r4
 800849a:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800849c:	2000      	movs	r0, #0
 800849e:	bd38      	pop	{r3, r4, r5, pc}

080084a0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80084a0:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80084a2:	2000      	movs	r0, #0
 80084a4:	4770      	bx	lr

080084a6 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80084a6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80084aa:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80084ae:	2304      	movs	r3, #4
 80084b0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80084b4:	2000      	movs	r0, #0
 80084b6:	4770      	bx	lr

080084b8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80084b8:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 80084bc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80084c0:	2000      	movs	r0, #0
 80084c2:	4770      	bx	lr

080084c4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80084c4:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80084ca:	2a03      	cmp	r2, #3
 80084cc:	d104      	bne.n	80084d8 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 80084ce:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80084d2:	69db      	ldr	r3, [r3, #28]
 80084d4:	b103      	cbz	r3, 80084d8 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80084d6:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80084d8:	2000      	movs	r0, #0
 80084da:	bd08      	pop	{r3, pc}

080084dc <USBD_LL_IsoINIncomplete>:
 80084dc:	2000      	movs	r0, #0
 80084de:	4770      	bx	lr

080084e0 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 80084e0:	2000      	movs	r0, #0
 80084e2:	4770      	bx	lr

080084e4 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 80084e4:	2000      	movs	r0, #0
 80084e6:	4770      	bx	lr

080084e8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80084e8:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084ea:	2201      	movs	r2, #1
 80084ec:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80084f0:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 80084f4:	7901      	ldrb	r1, [r0, #4]
 80084f6:	6852      	ldr	r2, [r2, #4]
 80084f8:	4790      	blx	r2
   
  return USBD_OK;
}
 80084fa:	2000      	movs	r0, #0
 80084fc:	bd08      	pop	{r3, pc}

080084fe <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80084fe:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8008500:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8008502:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8008504:	f7fa ff8f 	bl	8003426 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8008508:	4620      	mov	r0, r4
 800850a:	2100      	movs	r1, #0
}
 800850c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8008510:	f7fa bf89 	b.w	8003426 <USBD_LL_StallEP>

08008514 <USBD_StdDevReq>:
{
 8008514:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8008516:	784b      	ldrb	r3, [r1, #1]
{
 8008518:	4604      	mov	r4, r0
 800851a:	460d      	mov	r5, r1
  switch (req->bRequest) 
 800851c:	2b09      	cmp	r3, #9
 800851e:	d879      	bhi.n	8008614 <USBD_StdDevReq+0x100>
 8008520:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008524:	00e500c9 	.word	0x00e500c9
 8008528:	00d90078 	.word	0x00d90078
 800852c:	006d0078 	.word	0x006d0078
 8008530:	0078000a 	.word	0x0078000a
 8008534:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8008538:	884b      	ldrh	r3, [r1, #2]
 800853a:	0a1a      	lsrs	r2, r3, #8
 800853c:	3a01      	subs	r2, #1
 800853e:	2a06      	cmp	r2, #6
 8008540:	d868      	bhi.n	8008614 <USBD_StdDevReq+0x100>
 8008542:	e8df f002 	tbb	[pc, r2]
 8008546:	1c04      	.short	0x1c04
 8008548:	49676729 	.word	0x49676729
 800854c:	52          	.byte	0x52
 800854d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800854e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8008552:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8008554:	7c20      	ldrb	r0, [r4, #16]
 8008556:	f10d 0106 	add.w	r1, sp, #6
 800855a:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800855c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008560:	2a00      	cmp	r2, #0
 8008562:	d067      	beq.n	8008634 <USBD_StdDevReq+0x120>
 8008564:	88eb      	ldrh	r3, [r5, #6]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d064      	beq.n	8008634 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800856a:	429a      	cmp	r2, r3
 800856c:	bf28      	it	cs
 800856e:	461a      	movcs	r2, r3
 8008570:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8008574:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 8008576:	4620      	mov	r0, r4
 8008578:	f000 f97c 	bl	8008874 <USBD_CtlSendData>
 800857c:	e05a      	b.n	8008634 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800857e:	7c02      	ldrb	r2, [r0, #16]
 8008580:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008584:	b932      	cbnz	r2, 8008594 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008588:	f10d 0006 	add.w	r0, sp, #6
 800858c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800858e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008590:	7043      	strb	r3, [r0, #1]
 8008592:	e7e3      	b.n	800855c <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008596:	e7f7      	b.n	8008588 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b05      	cmp	r3, #5
 800859c:	d83a      	bhi.n	8008614 <USBD_StdDevReq+0x100>
 800859e:	e8df f003 	tbb	[pc, r3]
 80085a2:	0703      	.short	0x0703
 80085a4:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80085a8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	e7d1      	b.n	8008554 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085b0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	e7cd      	b.n	8008554 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085b8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	e7c9      	b.n	8008554 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085c0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	e7c5      	b.n	8008554 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085c8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	e7c1      	b.n	8008554 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085d0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	e7bd      	b.n	8008554 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80085d8:	7c03      	ldrb	r3, [r0, #16]
 80085da:	b9db      	cbnz	r3, 8008614 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80085dc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80085e0:	f10d 0006 	add.w	r0, sp, #6
 80085e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e6:	4798      	blx	r3
 80085e8:	e7b8      	b.n	800855c <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80085ea:	7c03      	ldrb	r3, [r0, #16]
 80085ec:	b993      	cbnz	r3, 8008614 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80085ee:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80085f2:	f10d 0006 	add.w	r0, sp, #6
 80085f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80085fa:	2307      	movs	r3, #7
 80085fc:	e7c8      	b.n	8008590 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80085fe:	888b      	ldrh	r3, [r1, #4]
 8008600:	b943      	cbnz	r3, 8008614 <USBD_StdDevReq+0x100>
 8008602:	88cb      	ldrh	r3, [r1, #6]
 8008604:	b933      	cbnz	r3, 8008614 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8008606:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800860a:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800860c:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800860e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8008612:	d103      	bne.n	800861c <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8008614:	4620      	mov	r0, r4
 8008616:	f7ff ff72 	bl	80084fe <USBD_CtlError.constprop.0>
    break;
 800861a:	e00b      	b.n	8008634 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 800861c:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8008620:	4629      	mov	r1, r5
 8008622:	f7fa ff21 	bl	8003468 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8008626:	4620      	mov	r0, r4
 8008628:	f000 f950 	bl	80088cc <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 800862c:	b12d      	cbz	r5, 800863a <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800862e:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8008630:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8008634:	2000      	movs	r0, #0
 8008636:	b003      	add	sp, #12
 8008638:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800863a:	2301      	movs	r3, #1
 800863c:	e7f8      	b.n	8008630 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 800863e:	7889      	ldrb	r1, [r1, #2]
 8008640:	4d30      	ldr	r5, [pc, #192]	; (8008704 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8008642:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8008644:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8008646:	d8e5      	bhi.n	8008614 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8008648:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800864c:	2b02      	cmp	r3, #2
 800864e:	d00c      	beq.n	800866a <USBD_StdDevReq+0x156>
 8008650:	2b03      	cmp	r3, #3
 8008652:	d1df      	bne.n	8008614 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8008654:	b9b1      	cbnz	r1, 8008684 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008656:	2302      	movs	r3, #2
 8008658:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800865c:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800865e:	f7ff fe4b 	bl	80082f8 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8008662:	4620      	mov	r0, r4
 8008664:	f000 f932 	bl	80088cc <USBD_CtlSendStatus>
 8008668:	e7e4      	b.n	8008634 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800866a:	2900      	cmp	r1, #0
 800866c:	d0f9      	beq.n	8008662 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 800866e:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008670:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8008672:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008674:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8008678:	4620      	mov	r0, r4
 800867a:	f7ff fe32 	bl	80082e2 <USBD_SetClassConfig>
 800867e:	2802      	cmp	r0, #2
 8008680:	d1ef      	bne.n	8008662 <USBD_StdDevReq+0x14e>
 8008682:	e7c7      	b.n	8008614 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8008684:	6841      	ldr	r1, [r0, #4]
 8008686:	2901      	cmp	r1, #1
 8008688:	d0eb      	beq.n	8008662 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800868a:	b2c9      	uxtb	r1, r1
 800868c:	f7ff fe34 	bl	80082f8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008690:	7829      	ldrb	r1, [r5, #0]
 8008692:	6061      	str	r1, [r4, #4]
 8008694:	e7f0      	b.n	8008678 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8008696:	88ca      	ldrh	r2, [r1, #6]
 8008698:	2a01      	cmp	r2, #1
 800869a:	d1bb      	bne.n	8008614 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 800869c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d003      	beq.n	80086ac <USBD_StdDevReq+0x198>
 80086a4:	2b03      	cmp	r3, #3
 80086a6:	d1b5      	bne.n	8008614 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 80086a8:	1d01      	adds	r1, r0, #4
 80086aa:	e764      	b.n	8008576 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 80086ac:	4601      	mov	r1, r0
 80086ae:	2300      	movs	r3, #0
 80086b0:	f841 3f08 	str.w	r3, [r1, #8]!
 80086b4:	e75f      	b.n	8008576 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 80086b6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80086ba:	3b02      	subs	r3, #2
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d8a9      	bhi.n	8008614 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80086c0:	2301      	movs	r3, #1
 80086c2:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80086c4:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80086c8:	b10b      	cbz	r3, 80086ce <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80086ca:	2303      	movs	r3, #3
 80086cc:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 80086ce:	2202      	movs	r2, #2
 80086d0:	f104 010c 	add.w	r1, r4, #12
 80086d4:	e74f      	b.n	8008576 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086d6:	884b      	ldrh	r3, [r1, #2]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d1ab      	bne.n	8008634 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80086dc:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80086e0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80086e4:	4629      	mov	r1, r5
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	4620      	mov	r0, r4
 80086ea:	4798      	blx	r3
 80086ec:	e7b9      	b.n	8008662 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 80086ee:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80086f2:	3b02      	subs	r3, #2
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d88d      	bhi.n	8008614 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80086f8:	884b      	ldrh	r3, [r1, #2]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d19a      	bne.n	8008634 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80086fe:	2300      	movs	r3, #0
 8008700:	e7ec      	b.n	80086dc <USBD_StdDevReq+0x1c8>
 8008702:	bf00      	nop
 8008704:	2000058a 	.word	0x2000058a

08008708 <USBD_StdItfReq>:
{
 8008708:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800870a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800870e:	2b03      	cmp	r3, #3
{
 8008710:	4604      	mov	r4, r0
 8008712:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8008714:	d10d      	bne.n	8008732 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8008716:	790b      	ldrb	r3, [r1, #4]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d80a      	bhi.n	8008732 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 800871c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8008724:	88eb      	ldrh	r3, [r5, #6]
 8008726:	b913      	cbnz	r3, 800872e <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8008728:	4620      	mov	r0, r4
 800872a:	f000 f8cf 	bl	80088cc <USBD_CtlSendStatus>
}
 800872e:	2000      	movs	r0, #0
 8008730:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8008732:	f7ff fee4 	bl	80084fe <USBD_CtlError.constprop.0>
    break;
 8008736:	e7fa      	b.n	800872e <USBD_StdItfReq+0x26>

08008738 <USBD_StdEPReq>:
{
 8008738:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 800873a:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 800873c:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 800873e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8008742:	2a20      	cmp	r2, #32
{
 8008744:	4604      	mov	r4, r0
 8008746:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8008748:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 800874a:	d105      	bne.n	8008758 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 800874c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	4798      	blx	r3
}
 8008754:	2000      	movs	r0, #0
 8008756:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8008758:	784a      	ldrb	r2, [r1, #1]
 800875a:	2a01      	cmp	r2, #1
 800875c:	d01c      	beq.n	8008798 <USBD_StdEPReq+0x60>
 800875e:	d32a      	bcc.n	80087b6 <USBD_StdEPReq+0x7e>
 8008760:	2a03      	cmp	r2, #3
 8008762:	d1f7      	bne.n	8008754 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8008764:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8008768:	2a02      	cmp	r2, #2
 800876a:	d040      	beq.n	80087ee <USBD_StdEPReq+0xb6>
 800876c:	2a03      	cmp	r2, #3
 800876e:	d002      	beq.n	8008776 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8008770:	f7ff fec5 	bl	80084fe <USBD_CtlError.constprop.0>
      break;
 8008774:	e7ee      	b.n	8008754 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8008776:	884a      	ldrh	r2, [r1, #2]
 8008778:	b922      	cbnz	r2, 8008784 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800877a:	065e      	lsls	r6, r3, #25
 800877c:	d002      	beq.n	8008784 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800877e:	4619      	mov	r1, r3
 8008780:	f7fa fe51 	bl	8003426 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8008784:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8008788:	4629      	mov	r1, r5
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	4620      	mov	r0, r4
 800878e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8008790:	4620      	mov	r0, r4
 8008792:	f000 f89b 	bl	80088cc <USBD_CtlSendStatus>
 8008796:	e7dd      	b.n	8008754 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8008798:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800879c:	2a02      	cmp	r2, #2
 800879e:	d026      	beq.n	80087ee <USBD_StdEPReq+0xb6>
 80087a0:	2a03      	cmp	r2, #3
 80087a2:	d1e5      	bne.n	8008770 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80087a4:	884a      	ldrh	r2, [r1, #2]
 80087a6:	2a00      	cmp	r2, #0
 80087a8:	d1d4      	bne.n	8008754 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80087aa:	0659      	lsls	r1, r3, #25
 80087ac:	d0f0      	beq.n	8008790 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80087ae:	4619      	mov	r1, r3
 80087b0:	f7fa fe40 	bl	8003434 <USBD_LL_ClearStallEP>
 80087b4:	e7e6      	b.n	8008784 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80087b6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80087ba:	2a02      	cmp	r2, #2
 80087bc:	d017      	beq.n	80087ee <USBD_StdEPReq+0xb6>
 80087be:	2a03      	cmp	r2, #3
 80087c0:	d1d6      	bne.n	8008770 <USBD_StdEPReq+0x38>
 80087c2:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80087c6:	f016 0f80 	tst.w	r6, #128	; 0x80
 80087ca:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80087ce:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80087d0:	bf14      	ite	ne
 80087d2:	3514      	addne	r5, #20
 80087d4:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80087d8:	f7fa fe33 	bl	8003442 <USBD_LL_IsStallEP>
 80087dc:	b168      	cbz	r0, 80087fa <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 80087de:	2301      	movs	r3, #1
 80087e0:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 80087e2:	2202      	movs	r2, #2
 80087e4:	4629      	mov	r1, r5
 80087e6:	4620      	mov	r0, r4
 80087e8:	f000 f844 	bl	8008874 <USBD_CtlSendData>
      break;
 80087ec:	e7b2      	b.n	8008754 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 80087ee:	065a      	lsls	r2, r3, #25
 80087f0:	d0b0      	beq.n	8008754 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 80087f2:	4619      	mov	r1, r3
 80087f4:	f7fa fe17 	bl	8003426 <USBD_LL_StallEP>
 80087f8:	e7ac      	b.n	8008754 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 80087fa:	6028      	str	r0, [r5, #0]
 80087fc:	e7f1      	b.n	80087e2 <USBD_StdEPReq+0xaa>

080087fe <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80087fe:	780b      	ldrb	r3, [r1, #0]
 8008800:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008802:	784b      	ldrb	r3, [r1, #1]
 8008804:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008806:	78ca      	ldrb	r2, [r1, #3]
 8008808:	788b      	ldrb	r3, [r1, #2]
 800880a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800880e:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008810:	794a      	ldrb	r2, [r1, #5]
 8008812:	790b      	ldrb	r3, [r1, #4]
 8008814:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008818:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800881a:	79ca      	ldrb	r2, [r1, #7]
 800881c:	798b      	ldrb	r3, [r1, #6]
 800881e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008822:	80c3      	strh	r3, [r0, #6]
 8008824:	4770      	bx	lr

08008826 <USBD_CtlError>:
{
 8008826:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 8008828:	2180      	movs	r1, #128	; 0x80
{
 800882a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800882c:	f7fa fdfb 	bl	8003426 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8008830:	4620      	mov	r0, r4
 8008832:	2100      	movs	r1, #0
}
 8008834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8008838:	f7fa bdf5 	b.w	8003426 <USBD_LL_StallEP>

0800883c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800883c:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 800883e:	b188      	cbz	r0, 8008864 <USBD_GetString+0x28>
 8008840:	4605      	mov	r5, r0
 8008842:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8008844:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2c00      	cmp	r4, #0
 800884c:	d1f9      	bne.n	8008842 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800884e:	005b      	lsls	r3, r3, #1
 8008850:	3302      	adds	r3, #2
 8008852:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8008854:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8008856:	2303      	movs	r3, #3
 8008858:	704b      	strb	r3, [r1, #1]
 800885a:	3801      	subs	r0, #1
 800885c:	2302      	movs	r3, #2
    while (*desc != '\0') 
 800885e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008862:	b905      	cbnz	r5, 8008866 <USBD_GetString+0x2a>
 8008864:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8008866:	1c5a      	adds	r2, r3, #1
 8008868:	b2d2      	uxtb	r2, r2
 800886a:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 800886c:	3302      	adds	r3, #2
 800886e:	b2db      	uxtb	r3, r3
 8008870:	548c      	strb	r4, [r1, r2]
 8008872:	e7f4      	b.n	800885e <USBD_GetString+0x22>

08008874 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8008874:	b510      	push	{r4, lr}
 8008876:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8008878:	2202      	movs	r2, #2
 800887a:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800887e:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8008880:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8008882:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8008884:	2100      	movs	r1, #0
 8008886:	f7fa fdf6 	bl	8003476 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800888a:	2000      	movs	r0, #0
 800888c:	bd10      	pop	{r4, pc}

0800888e <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800888e:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8008890:	4613      	mov	r3, r2
 8008892:	460a      	mov	r2, r1
 8008894:	2100      	movs	r1, #0
 8008896:	f7fa fdee 	bl	8003476 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800889a:	2000      	movs	r0, #0
 800889c:	bd08      	pop	{r3, pc}

0800889e <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800889e:	b510      	push	{r4, lr}
 80088a0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80088a2:	2203      	movs	r2, #3
 80088a4:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80088a8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80088ac:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80088ae:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 80088b2:	2100      	movs	r1, #0
 80088b4:	f7fa fde6 	bl	8003484 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80088b8:	2000      	movs	r0, #0
 80088ba:	bd10      	pop	{r4, pc}

080088bc <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80088bc:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80088be:	4613      	mov	r3, r2
 80088c0:	460a      	mov	r2, r1
 80088c2:	2100      	movs	r1, #0
 80088c4:	f7fa fdde 	bl	8003484 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80088c8:	2000      	movs	r0, #0
 80088ca:	bd08      	pop	{r3, pc}

080088cc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80088cc:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80088ce:	2304      	movs	r3, #4
 80088d0:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80088d4:	2300      	movs	r3, #0
 80088d6:	461a      	mov	r2, r3
 80088d8:	4619      	mov	r1, r3
 80088da:	f7fa fdcc 	bl	8003476 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80088de:	2000      	movs	r0, #0
 80088e0:	bd08      	pop	{r3, pc}

080088e2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80088e2:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80088e4:	2305      	movs	r3, #5
 80088e6:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80088ea:	2300      	movs	r3, #0
 80088ec:	461a      	mov	r2, r3
 80088ee:	4619      	mov	r1, r3
 80088f0:	f7fa fdc8 	bl	8003484 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80088f4:	2000      	movs	r0, #0
 80088f6:	bd08      	pop	{r3, pc}

080088f8 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80088f8:	4b03      	ldr	r3, [pc, #12]	; (8008908 <disk_status+0x10>)
 80088fa:	181a      	adds	r2, r3, r0
 80088fc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008900:	7a10      	ldrb	r0, [r2, #8]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	4718      	bx	r3
 8008908:	200005ac 	.word	0x200005ac

0800890c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 800890c:	4b06      	ldr	r3, [pc, #24]	; (8008928 <disk_initialize+0x1c>)
 800890e:	5c1a      	ldrb	r2, [r3, r0]
 8008910:	b942      	cbnz	r2, 8008924 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8008912:	2201      	movs	r2, #1
 8008914:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008916:	181a      	adds	r2, r3, r0
 8008918:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800891c:	7a10      	ldrb	r0, [r2, #8]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4718      	bx	r3
  }
  return stat;
}
 8008924:	2000      	movs	r0, #0
 8008926:	4770      	bx	lr
 8008928:	200005ac 	.word	0x200005ac

0800892c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800892c:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800892e:	4c05      	ldr	r4, [pc, #20]	; (8008944 <disk_read+0x18>)
 8008930:	1825      	adds	r5, r4, r0
 8008932:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008936:	6860      	ldr	r0, [r4, #4]
 8008938:	6884      	ldr	r4, [r0, #8]
 800893a:	7a28      	ldrb	r0, [r5, #8]
 800893c:	46a4      	mov	ip, r4
  return res;
}
 800893e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008940:	4760      	bx	ip
 8008942:	bf00      	nop
 8008944:	200005ac 	.word	0x200005ac

08008948 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008948:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800894a:	4c05      	ldr	r4, [pc, #20]	; (8008960 <disk_write+0x18>)
 800894c:	1825      	adds	r5, r4, r0
 800894e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008952:	6860      	ldr	r0, [r4, #4]
 8008954:	68c4      	ldr	r4, [r0, #12]
 8008956:	7a28      	ldrb	r0, [r5, #8]
 8008958:	46a4      	mov	ip, r4
  return res;
}
 800895a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800895c:	4760      	bx	ip
 800895e:	bf00      	nop
 8008960:	200005ac 	.word	0x200005ac

08008964 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008964:	4b05      	ldr	r3, [pc, #20]	; (800897c <disk_ioctl+0x18>)
{
 8008966:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008968:	181c      	adds	r4, r3, r0
 800896a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800896e:	7a20      	ldrb	r0, [r4, #8]
 8008970:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8008972:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	4718      	bx	r3
 800897a:	bf00      	nop
 800897c:	200005ac 	.word	0x200005ac

08008980 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008980:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8008982:	4c06      	ldr	r4, [pc, #24]	; (800899c <SD_initialize+0x1c>)
 8008984:	2301      	movs	r3, #1
 8008986:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8008988:	f7f7 febe 	bl	8000708 <BSP_SD_Init>
 800898c:	4623      	mov	r3, r4
 800898e:	b918      	cbnz	r0, 8008998 <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 8008990:	7822      	ldrb	r2, [r4, #0]
 8008992:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008996:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8008998:	7818      	ldrb	r0, [r3, #0]
}
 800899a:	bd10      	pop	{r4, pc}
 800899c:	20000298 	.word	0x20000298

080089a0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80089a0:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80089a2:	4c06      	ldr	r4, [pc, #24]	; (80089bc <SD_status+0x1c>)
 80089a4:	2301      	movs	r3, #1
 80089a6:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetStatus() == MSD_OK)
 80089a8:	f7f7 fe18 	bl	80005dc <BSP_SD_GetStatus>
 80089ac:	4623      	mov	r3, r4
 80089ae:	b918      	cbnz	r0, 80089b8 <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 80089b0:	7822      	ldrb	r2, [r4, #0]
 80089b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80089b6:	7022      	strb	r2, [r4, #0]
  }
  
  return Stat;
 80089b8:	7818      	ldrb	r0, [r3, #0]
}
 80089ba:	bd10      	pop	{r4, pc}
 80089bc:	20000298 	.word	0x20000298

080089c0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80089c0:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80089c2:	9301      	str	r3, [sp, #4]
 80089c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	0252      	lsls	r2, r2, #9
 80089cc:	2300      	movs	r3, #0
 80089ce:	4608      	mov	r0, r1
 80089d0:	f7f7 fe42 	bl	8000658 <BSP_SD_ReadBlocks_DMA>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 80089d4:	3000      	adds	r0, #0
 80089d6:	bf18      	it	ne
 80089d8:	2001      	movne	r0, #1
 80089da:	b003      	add	sp, #12
 80089dc:	f85d fb04 	ldr.w	pc, [sp], #4

080089e0 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80089e0:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80089e2:	9301      	str	r3, [sp, #4]
 80089e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	0252      	lsls	r2, r2, #9
 80089ec:	2300      	movs	r3, #0
 80089ee:	4608      	mov	r0, r1
 80089f0:	f7f7 ff0a 	bl	8000808 <BSP_SD_WriteBlocks_DMA>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 80089f4:	3000      	adds	r0, #0
 80089f6:	bf18      	it	ne
 80089f8:	2001      	movne	r0, #1
 80089fa:	b003      	add	sp, #12
 80089fc:	f85d fb04 	ldr.w	pc, [sp], #4

08008a00 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008a00:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008a02:	4b12      	ldr	r3, [pc, #72]	; (8008a4c <SD_ioctl+0x4c>)
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	07db      	lsls	r3, r3, #31
{
 8008a08:	b096      	sub	sp, #88	; 0x58
 8008a0a:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008a0c:	d41c      	bmi.n	8008a48 <SD_ioctl+0x48>
  
  switch (cmd)
 8008a0e:	2903      	cmp	r1, #3
 8008a10:	d803      	bhi.n	8008a1a <SD_ioctl+0x1a>
 8008a12:	e8df f001 	tbb	[pc, r1]
 8008a16:	050e      	.short	0x050e
 8008a18:	1410      	.short	0x1410
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = BLOCK_SIZE;
    break;
  
  default:
    res = RES_PARERR;
 8008a1a:	2004      	movs	r0, #4
  }
  
  return res;
}
 8008a1c:	b016      	add	sp, #88	; 0x58
 8008a1e:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8008a20:	4668      	mov	r0, sp
 8008a22:	f7f7 fde1 	bl	80005e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.CardCapacity / BLOCK_SIZE;
 8008a26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a2a:	0a5b      	lsrs	r3, r3, #9
 8008a2c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008a30:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8008a32:	2000      	movs	r0, #0
 8008a34:	e7f2      	b.n	8008a1c <SD_ioctl+0x1c>
    *(WORD*)buff = BLOCK_SIZE;
 8008a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a3a:	8013      	strh	r3, [r2, #0]
 8008a3c:	e7f9      	b.n	8008a32 <SD_ioctl+0x32>
    *(DWORD*)buff = BLOCK_SIZE;
 8008a3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a42:	6013      	str	r3, [r2, #0]
  DRESULT res = RES_ERROR;
 8008a44:	2001      	movs	r0, #1
    break;
 8008a46:	e7e9      	b.n	8008a1c <SD_ioctl+0x1c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008a48:	2003      	movs	r0, #3
 8008a4a:	e7e7      	b.n	8008a1c <SD_ioctl+0x1c>
 8008a4c:	20000298 	.word	0x20000298

08008a50 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008a50:	3801      	subs	r0, #1
 8008a52:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8008a54:	4291      	cmp	r1, r2
 8008a56:	d100      	bne.n	8008a5a <mem_cpy+0xa>
		*d++ = *s++;
}
 8008a58:	4770      	bx	lr
		*d++ = *s++;
 8008a5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a5e:	f800 3f01 	strb.w	r3, [r0, #1]!
 8008a62:	e7f7      	b.n	8008a54 <mem_cpy+0x4>

08008a64 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008a64:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8008a66:	4290      	cmp	r0, r2
 8008a68:	d100      	bne.n	8008a6c <mem_set+0x8>
		*d++ = (BYTE)val;
}
 8008a6a:	4770      	bx	lr
		*d++ = (BYTE)val;
 8008a6c:	f800 1b01 	strb.w	r1, [r0], #1
 8008a70:	e7f9      	b.n	8008a66 <mem_set+0x2>
	...

08008a74 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008a74:	4a17      	ldr	r2, [pc, #92]	; (8008ad4 <chk_lock+0x60>)
 8008a76:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008a78:	2400      	movs	r4, #0
 8008a7a:	4623      	mov	r3, r4
 8008a7c:	4616      	mov	r6, r2
		if (Files[i].fs) {	/* Existing entry */
 8008a7e:	6815      	ldr	r5, [r2, #0]
 8008a80:	b1c5      	cbz	r5, 8008ab4 <chk_lock+0x40>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008a82:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
 8008a86:	42bd      	cmp	r5, r7
 8008a88:	d115      	bne.n	8008ab6 <chk_lock+0x42>
 8008a8a:	6857      	ldr	r7, [r2, #4]
 8008a8c:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8008a90:	42af      	cmp	r7, r5
 8008a92:	d110      	bne.n	8008ab6 <chk_lock+0x42>
				Files[i].clu == dp->sclust &&
 8008a94:	8917      	ldrh	r7, [r2, #8]
 8008a96:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8008a9a:	42af      	cmp	r7, r5
 8008a9c:	d10b      	bne.n	8008ab6 <chk_lock+0x42>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008a9e:	b9b9      	cbnz	r1, 8008ad0 <chk_lock+0x5c>
 8008aa0:	220c      	movs	r2, #12
 8008aa2:	fb02 6303 	mla	r3, r2, r3, r6
 8008aa6:	895b      	ldrh	r3, [r3, #10]
 8008aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aac:	bf14      	ite	ne
 8008aae:	2000      	movne	r0, #0
 8008ab0:	2010      	moveq	r0, #16
 8008ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8008ab4:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	f102 020c 	add.w	r2, r2, #12
 8008abe:	d1de      	bne.n	8008a7e <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008ac0:	b10c      	cbz	r4, 8008ac6 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008ac2:	2000      	movs	r0, #0
 8008ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008ac6:	2902      	cmp	r1, #2
 8008ac8:	bf0c      	ite	eq
 8008aca:	2000      	moveq	r0, #0
 8008acc:	2012      	movne	r0, #18
 8008ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008ad0:	2010      	movs	r0, #16
 8008ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ad4:	20000590 	.word	0x20000590

08008ad8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ada:	4c20      	ldr	r4, [pc, #128]	; (8008b5c <inc_lock+0x84>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8008adc:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	4622      	mov	r2, r4
		if (Files[i].fs == dp->fs &&
 8008ae4:	6825      	ldr	r5, [r4, #0]
 8008ae6:	42b5      	cmp	r5, r6
 8008ae8:	d109      	bne.n	8008afe <inc_lock+0x26>
 8008aea:	6867      	ldr	r7, [r4, #4]
 8008aec:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8008af0:	42af      	cmp	r7, r5
 8008af2:	d104      	bne.n	8008afe <inc_lock+0x26>
			Files[i].clu == dp->sclust &&
 8008af4:	8927      	ldrh	r7, [r4, #8]
 8008af6:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8008afa:	42af      	cmp	r7, r5
 8008afc:	d022      	beq.n	8008b44 <inc_lock+0x6c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008afe:	3301      	adds	r3, #1
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	f104 040c 	add.w	r4, r4, #12
 8008b06:	d1ed      	bne.n	8008ae4 <inc_lock+0xc>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008b08:	6813      	ldr	r3, [r2, #0]
 8008b0a:	b113      	cbz	r3, 8008b12 <inc_lock+0x3a>
 8008b0c:	68d3      	ldr	r3, [r2, #12]
 8008b0e:	bb1b      	cbnz	r3, 8008b58 <inc_lock+0x80>
 8008b10:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 8008b12:	240c      	movs	r4, #12
 8008b14:	435c      	muls	r4, r3
 8008b16:	1915      	adds	r5, r2, r4
 8008b18:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 8008b1a:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 8008b1e:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
 8008b22:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 8008b24:	2000      	movs	r0, #0
		Files[i].clu = dp->sclust;
 8008b26:	606c      	str	r4, [r5, #4]
		Files[i].ctr = 0;
 8008b28:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008b2a:	b991      	cbnz	r1, 8008b52 <inc_lock+0x7a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008b2c:	210c      	movs	r1, #12
 8008b2e:	fb01 2103 	mla	r1, r1, r3, r2
 8008b32:	8949      	ldrh	r1, [r1, #10]
 8008b34:	3101      	adds	r1, #1
 8008b36:	b289      	uxth	r1, r1
 8008b38:	200c      	movs	r0, #12
 8008b3a:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 8008b3e:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008b40:	8151      	strh	r1, [r2, #10]
	return i + 1;
 8008b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008b44:	2900      	cmp	r1, #0
 8008b46:	d0f1      	beq.n	8008b2c <inc_lock+0x54>
 8008b48:	210c      	movs	r1, #12
 8008b4a:	fb01 2103 	mla	r1, r1, r3, r2
 8008b4e:	8949      	ldrh	r1, [r1, #10]
 8008b50:	b911      	cbnz	r1, 8008b58 <inc_lock+0x80>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008b52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008b56:	e7ef      	b.n	8008b38 <inc_lock+0x60>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008b58:	2000      	movs	r0, #0
 8008b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b5c:	20000590 	.word	0x20000590

08008b60 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008b60:	b530      	push	{r4, r5, lr}
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008b62:	1e45      	subs	r5, r0, #1
 8008b64:	2d01      	cmp	r5, #1
 8008b66:	d811      	bhi.n	8008b8c <dec_lock+0x2c>
		n = Files[i].ctr;
 8008b68:	490a      	ldr	r1, [pc, #40]	; (8008b94 <dec_lock+0x34>)
 8008b6a:	220c      	movs	r2, #12
 8008b6c:	fb02 1305 	mla	r3, r2, r5, r1
 8008b70:	895c      	ldrh	r4, [r3, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n) n--;					/* Decrement read mode open count */
 8008b72:	f424 7380 	bic.w	r3, r4, #256	; 0x100
 8008b76:	b298      	uxth	r0, r3
 8008b78:	b108      	cbz	r0, 8008b7e <dec_lock+0x1e>
 8008b7a:	3c01      	subs	r4, #1
 8008b7c:	b2a0      	uxth	r0, r4
		Files[i].ctr = n;
 8008b7e:	fb02 f305 	mul.w	r3, r2, r5
 8008b82:	18ca      	adds	r2, r1, r3
 8008b84:	8150      	strh	r0, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008b86:	b918      	cbnz	r0, 8008b90 <dec_lock+0x30>
 8008b88:	50c8      	str	r0, [r1, r3]
 8008b8a:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008b8c:	2002      	movs	r0, #2
 8008b8e:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
 8008b90:	2000      	movs	r0, #0
	}
	return res;
}
 8008b92:	bd30      	pop	{r4, r5, pc}
 8008b94:	20000590 	.word	0x20000590

08008b98 <clmt_clust>:
)
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008b98:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008b9c:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008ba0:	3304      	adds	r3, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008ba2:	0a49      	lsrs	r1, r1, #9
 8008ba4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8008ba8:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008bac:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 8008bae:	b130      	cbz	r0, 8008bbe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008bb0:	4281      	cmp	r1, r0
 8008bb2:	d302      	bcc.n	8008bba <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8008bb4:	1a09      	subs	r1, r1, r0
 8008bb6:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008bb8:	e7f8      	b.n	8008bac <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8008bba:	6858      	ldr	r0, [r3, #4]
 8008bbc:	4408      	add	r0, r1
}
 8008bbe:	4770      	bx	lr

08008bc0 <get_fileinfo>:
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
	if (dp->sect) {		/* Get SFN */
 8008bc0:	f8d0 2210 	ldr.w	r2, [r0, #528]	; 0x210
{
 8008bc4:	b570      	push	{r4, r5, r6, lr}
	p = fno->fname;
 8008bc6:	f101 0309 	add.w	r3, r1, #9
	if (dp->sect) {		/* Get SFN */
 8008bca:	b322      	cbz	r2, 8008c16 <get_fileinfo+0x56>
		dir = dp->dir;
 8008bcc:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
		i = 0;
 8008bd0:	2400      	movs	r4, #0
 8008bd2:	1e55      	subs	r5, r2, #1
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
			if (c == ' ') continue;				/* Skip padding spaces */
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8008bd4:	262e      	movs	r6, #46	; 0x2e
			c = (TCHAR)dir[i++];
 8008bd6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
			if (c == ' ') continue;				/* Skip padding spaces */
 8008bda:	2820      	cmp	r0, #32
			c = (TCHAR)dir[i++];
 8008bdc:	f104 0401 	add.w	r4, r4, #1
			if (c == ' ') continue;				/* Skip padding spaces */
 8008be0:	d009      	beq.n	8008bf6 <get_fileinfo+0x36>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008be2:	2805      	cmp	r0, #5
 8008be4:	bf08      	it	eq
 8008be6:	20e5      	moveq	r0, #229	; 0xe5
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8008be8:	2c09      	cmp	r4, #9
 8008bea:	bf04      	itt	eq
 8008bec:	701e      	strbeq	r6, [r3, #0]
 8008bee:	3301      	addeq	r3, #1
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	f803 0c01 	strb.w	r0, [r3, #-1]
		while (i < 11) {		/* Copy name body and extension */
 8008bf6:	2c0b      	cmp	r4, #11
 8008bf8:	d1ed      	bne.n	8008bd6 <get_fileinfo+0x16>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8008bfa:	7ad0      	ldrb	r0, [r2, #11]
 8008bfc:	7208      	strb	r0, [r1, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8008bfe:	69d0      	ldr	r0, [r2, #28]
 8008c00:	6008      	str	r0, [r1, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8008c02:	7e54      	ldrb	r4, [r2, #25]
 8008c04:	7e10      	ldrb	r0, [r2, #24]
 8008c06:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8008c0a:	8088      	strh	r0, [r1, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8008c0c:	7dd0      	ldrb	r0, [r2, #23]
 8008c0e:	7d92      	ldrb	r2, [r2, #22]
 8008c10:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008c14:	80ca      	strh	r2, [r1, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8008c16:	2200      	movs	r2, #0
 8008c18:	701a      	strb	r2, [r3, #0]
 8008c1a:	bd70      	pop	{r4, r5, r6, pc}

08008c1c <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008c1c:	6802      	ldr	r2, [r0, #0]
{
 8008c1e:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8008c20:	b152      	cbz	r2, 8008c38 <get_ldnumber+0x1c>
 8008c22:	4611      	mov	r1, r2
 8008c24:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c2a:	2c20      	cmp	r4, #32
 8008c2c:	d90c      	bls.n	8008c48 <get_ldnumber+0x2c>
 8008c2e:	2c3a      	cmp	r4, #58	; 0x3a
 8008c30:	d1f8      	bne.n	8008c24 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8008c32:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008c34:	428b      	cmp	r3, r1
 8008c36:	d002      	beq.n	8008c3e <get_ldnumber+0x22>
	int vol = -1;
 8008c38:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8008c3c:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008c3e:	7812      	ldrb	r2, [r2, #0]
 8008c40:	2a30      	cmp	r2, #48	; 0x30
 8008c42:	d1f9      	bne.n	8008c38 <get_ldnumber+0x1c>
					*path = ++tt;
 8008c44:	3301      	adds	r3, #1
 8008c46:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8008c48:	2000      	movs	r0, #0
 8008c4a:	bd10      	pop	{r4, pc}

08008c4c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008c4c:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008c4e:	b190      	cbz	r0, 8008c76 <validate+0x2a>
 8008c50:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8008c54:	b17b      	cbz	r3, 8008c76 <validate+0x2a>
 8008c56:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 8008c5a:	b162      	cbz	r2, 8008c76 <validate+0x2a>
 8008c5c:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 8008c60:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 8008c64:	4291      	cmp	r1, r2
 8008c66:	d106      	bne.n	8008c76 <validate+0x2a>
 8008c68:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008c6c:	f7ff fe44 	bl	80088f8 <disk_status>
 8008c70:	f010 0001 	ands.w	r0, r0, #1
 8008c74:	d000      	beq.n	8008c78 <validate+0x2c>
		return FR_INVALID_OBJECT;
 8008c76:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 8008c78:	bd08      	pop	{r3, pc}

08008c7a <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 8008c7a:	7eca      	ldrb	r2, [r1, #27]
 8008c7c:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 8008c7e:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8008c80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8008c84:	bf01      	itttt	eq
 8008c86:	7d48      	ldrbeq	r0, [r1, #21]
 8008c88:	7d0a      	ldrbeq	r2, [r1, #20]
 8008c8a:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8008c8e:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	4770      	bx	lr

08008c96 <sync_window.part.2>:
FRESULT sync_window (
 8008c96:	b570      	push	{r4, r5, r6, lr}
		wsect = fs->winsect;	/* Current sector number */
 8008c98:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
FRESULT sync_window (
 8008c9c:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8008c9e:	4601      	mov	r1, r0
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	462a      	mov	r2, r5
 8008ca4:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8008ca8:	f7ff fe4e 	bl	8008948 <disk_write>
 8008cac:	b9d0      	cbnz	r0, 8008ce4 <sync_window.part.2+0x4e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008cae:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 8008cb2:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
			fs->wflag = 0;
 8008cb6:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008cba:	1aeb      	subs	r3, r5, r3
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d301      	bcc.n	8008cc4 <sync_window.part.2+0x2e>
	FRESULT res = FR_OK;
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008cc4:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 8008cc8:	2e01      	cmp	r6, #1
 8008cca:	d9f9      	bls.n	8008cc0 <sync_window.part.2+0x2a>
					wsect += fs->fsize;
 8008ccc:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008cd0:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 8008cd4:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008cd6:	462a      	mov	r2, r5
 8008cd8:	2301      	movs	r3, #1
 8008cda:	4621      	mov	r1, r4
 8008cdc:	f7ff fe34 	bl	8008948 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008ce0:	3e01      	subs	r6, #1
 8008ce2:	e7f1      	b.n	8008cc8 <sync_window.part.2+0x32>
			res = FR_DISK_ERR;
 8008ce4:	2001      	movs	r0, #1
}
 8008ce6:	bd70      	pop	{r4, r5, r6, pc}

08008ce8 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008ce8:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8008cec:	b10b      	cbz	r3, 8008cf2 <sync_window+0xa>
 8008cee:	f7ff bfd2 	b.w	8008c96 <sync_window.part.2>
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	4770      	bx	lr

08008cf6 <sync_fs>:
{
 8008cf6:	b538      	push	{r3, r4, r5, lr}
 8008cf8:	4604      	mov	r4, r0
	res = sync_window(fs);
 8008cfa:	f7ff fff5 	bl	8008ce8 <sync_window>
 8008cfe:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8008d00:	2800      	cmp	r0, #0
 8008d02:	d154      	bne.n	8008dae <sync_fs+0xb8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008d04:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8008d08:	2b03      	cmp	r3, #3
 8008d0a:	d147      	bne.n	8008d9c <sync_fs+0xa6>
 8008d0c:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d143      	bne.n	8008d9c <sync_fs+0xa6>
			mem_set(fs->win.d8, 0, SS(fs));
 8008d14:	4601      	mov	r1, r0
 8008d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f7ff fea2 	bl	8008a64 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8008d20:	2255      	movs	r2, #85	; 0x55
 8008d22:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
 8008d26:	22aa      	movs	r2, #170	; 0xaa
 8008d28:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8008d2c:	2252      	movs	r2, #82	; 0x52
 8008d2e:	7022      	strb	r2, [r4, #0]
 8008d30:	7062      	strb	r2, [r4, #1]
 8008d32:	2261      	movs	r2, #97	; 0x61
 8008d34:	70a2      	strb	r2, [r4, #2]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8008d36:	f884 21e7 	strb.w	r2, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8008d3a:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8008d3e:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8008d42:	2141      	movs	r1, #65	; 0x41
 8008d44:	70e1      	strb	r1, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8008d46:	f884 11e6 	strb.w	r1, [r4, #486]	; 0x1e6
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8008d4a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008d4e:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 8008d52:	0c11      	lsrs	r1, r2, #16
 8008d54:	0e12      	lsrs	r2, r2, #24
 8008d56:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8008d5a:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8008d5e:	f884 11ea 	strb.w	r1, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8008d62:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008d66:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 8008d6a:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 8008d6e:	0c11      	lsrs	r1, r2, #16
 8008d70:	0e12      	lsrs	r2, r2, #24
 8008d72:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 8008d76:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8008d7a:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8008d7e:	2072      	movs	r0, #114	; 0x72
			fs->winsect = fs->volbase + 1;
 8008d80:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8008d82:	f884 01e4 	strb.w	r0, [r4, #484]	; 0x1e4
 8008d86:	f884 01e5 	strb.w	r0, [r4, #485]	; 0x1e5
			fs->winsect = fs->volbase + 1;
 8008d8a:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8008d8e:	4621      	mov	r1, r4
 8008d90:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8008d94:	f7ff fdd8 	bl	8008948 <disk_write>
			fs->fsi_flag = 0;
 8008d98:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	4611      	mov	r1, r2
 8008da0:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8008da4:	f7ff fdde 	bl	8008964 <disk_ioctl>
 8008da8:	3000      	adds	r0, #0
 8008daa:	bf18      	it	ne
 8008dac:	2001      	movne	r0, #1
}
 8008dae:	bd38      	pop	{r3, r4, r5, pc}

08008db0 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008db0:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8008db4:	428b      	cmp	r3, r1
{
 8008db6:	b570      	push	{r4, r5, r6, lr}
 8008db8:	4606      	mov	r6, r0
 8008dba:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008dbc:	d013      	beq.n	8008de6 <move_window+0x36>
		res = sync_window(fs);		/* Write-back changes */
 8008dbe:	f7ff ff93 	bl	8008ce8 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	b968      	cbnz	r0, 8008de2 <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8008dc6:	462a      	mov	r2, r5
 8008dc8:	2301      	movs	r3, #1
 8008dca:	4631      	mov	r1, r6
 8008dcc:	f896 0201 	ldrb.w	r0, [r6, #513]	; 0x201
 8008dd0:	f7ff fdac 	bl	800892c <disk_read>
 8008dd4:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8008dd6:	bf1c      	itt	ne
 8008dd8:	f04f 35ff 	movne.w	r5, #4294967295
 8008ddc:	2401      	movne	r4, #1
			fs->winsect = sector;
 8008dde:	f8c6 522c 	str.w	r5, [r6, #556]	; 0x22c
}
 8008de2:	4620      	mov	r0, r4
 8008de4:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8008de6:	2400      	movs	r4, #0
 8008de8:	e7fb      	b.n	8008de2 <move_window+0x32>
	...

08008dec <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008dec:	2300      	movs	r3, #0
{
 8008dee:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008df0:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 8008df4:	f04f 33ff 	mov.w	r3, #4294967295
 8008df8:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
{
 8008dfc:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8008dfe:	f7ff ffd7 	bl	8008db0 <move_window>
 8008e02:	b9c0      	cbnz	r0, 8008e36 <check_fs+0x4a>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8008e04:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8008e08:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8008e0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e10:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d110      	bne.n	8008e3a <check_fs+0x4e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8008e18:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8008e1c:	4a08      	ldr	r2, [pc, #32]	; (8008e40 <check_fs+0x54>)
 8008e1e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d00a      	beq.n	8008e3c <check_fs+0x50>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008e26:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 8008e2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 8008e2e:	1a80      	subs	r0, r0, r2
 8008e30:	bf18      	it	ne
 8008e32:	2001      	movne	r0, #1
 8008e34:	bd10      	pop	{r4, pc}
 8008e36:	2003      	movs	r0, #3
 8008e38:	bd10      	pop	{r4, pc}
		return 2;
 8008e3a:	2002      	movs	r0, #2
}
 8008e3c:	bd10      	pop	{r4, pc}
 8008e3e:	bf00      	nop
 8008e40:	00544146 	.word	0x00544146

08008e44 <find_volume>:
{
 8008e44:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	6003      	str	r3, [r0, #0]
{
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	4607      	mov	r7, r0
	vol = get_ldnumber(path);
 8008e4e:	4608      	mov	r0, r1
{
 8008e50:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8008e52:	f7ff fee3 	bl	8008c1c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008e56:	1e06      	subs	r6, r0, #0
 8008e58:	f2c0 8123 	blt.w	80090a2 <find_volume+0x25e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008e5c:	4b95      	ldr	r3, [pc, #596]	; (80090b4 <find_volume+0x270>)
 8008e5e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008e62:	2c00      	cmp	r4, #0
 8008e64:	f000 811f 	beq.w	80090a6 <find_volume+0x262>
	*rfs = fs;							/* Return pointer to the file system object */
 8008e68:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008e6a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8008e6e:	b173      	cbz	r3, 8008e8e <find_volume+0x4a>
		stat = disk_status(fs->drv);
 8008e70:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8008e74:	f7ff fd40 	bl	80088f8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008e78:	07c7      	lsls	r7, r0, #31
 8008e7a:	d408      	bmi.n	8008e8e <find_volume+0x4a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8008e7c:	2d00      	cmp	r5, #0
 8008e7e:	f000 8114 	beq.w	80090aa <find_volume+0x266>
 8008e82:	f010 0004 	ands.w	r0, r0, #4
 8008e86:	d000      	beq.n	8008e8a <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8008e88:	200a      	movs	r0, #10
}
 8008e8a:	b005      	add	sp, #20
 8008e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8008e8e:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008e90:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8008e92:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008e96:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008e9a:	f7ff fd37 	bl	800890c <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8008e9e:	07c1      	lsls	r1, r0, #31
 8008ea0:	f100 8105 	bmi.w	80090ae <find_volume+0x26a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8008ea4:	b10d      	cbz	r5, 8008eaa <find_volume+0x66>
 8008ea6:	0742      	lsls	r2, r0, #29
 8008ea8:	d4ee      	bmi.n	8008e88 <find_volume+0x44>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008eaa:	2100      	movs	r1, #0
 8008eac:	4620      	mov	r0, r4
 8008eae:	f7ff ff9d 	bl	8008dec <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008eb2:	2801      	cmp	r0, #1
 8008eb4:	f040 80dc 	bne.w	8009070 <find_volume+0x22c>
 8008eb8:	f504 71e3 	add.w	r1, r4, #454	; 0x1c6
 8008ebc:	2200      	movs	r2, #0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008ebe:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8008ec2:	b103      	cbz	r3, 8008ec6 <find_volume+0x82>
 8008ec4:	680b      	ldr	r3, [r1, #0]
 8008ec6:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008eca:	3201      	adds	r2, #1
 8008ecc:	2a04      	cmp	r2, #4
 8008ece:	f101 0110 	add.w	r1, r1, #16
 8008ed2:	d1f4      	bne.n	8008ebe <find_volume+0x7a>
 8008ed4:	2600      	movs	r6, #0
			bsect = br[i];
 8008ed6:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008eda:	2d00      	cmp	r5, #0
 8008edc:	f000 80bf 	beq.w	800905e <find_volume+0x21a>
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f7ff ff82 	bl	8008dec <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	f040 80b9 	bne.w	8009060 <find_volume+0x21c>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008eee:	7b22      	ldrb	r2, [r4, #12]
 8008ef0:	7ae3      	ldrb	r3, [r4, #11]
 8008ef2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008efa:	f040 80bc 	bne.w	8009076 <find_volume+0x232>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008efe:	7de3      	ldrb	r3, [r4, #23]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008f00:	7c20      	ldrb	r0, [r4, #16]
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008f02:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008f04:	f884 0203 	strb.w	r0, [r4, #515]	; 0x203
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8008f08:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008f0c:	f100 33ff 	add.w	r3, r0, #4294967295
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8008f10:	bf08      	it	eq
 8008f12:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 8008f14:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	f200 80ac 	bhi.w	8009076 <find_volume+0x232>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8008f1e:	7b66      	ldrb	r6, [r4, #13]
 8008f20:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8008f24:	2e00      	cmp	r6, #0
 8008f26:	f000 80a6 	beq.w	8009076 <find_volume+0x232>
 8008f2a:	1e73      	subs	r3, r6, #1
 8008f2c:	4233      	tst	r3, r6
 8008f2e:	f040 80a2 	bne.w	8009076 <find_volume+0x232>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008f32:	7ca3      	ldrb	r3, [r4, #18]
 8008f34:	7c67      	ldrb	r7, [r4, #17]
 8008f36:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8008f3a:	073b      	lsls	r3, r7, #28
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008f3c:	f8a4 7208 	strh.w	r7, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8008f40:	f040 8099 	bne.w	8009076 <find_volume+0x232>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8008f44:	7d22      	ldrb	r2, [r4, #20]
 8008f46:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8008f48:	f894 e00f 	ldrb.w	lr, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8008f4c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8008f50:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8008f52:	bf08      	it	eq
 8008f54:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8008f56:	ea52 220e 	orrs.w	r2, r2, lr, lsl #8
 8008f5a:	f000 808c 	beq.w	8009076 <find_volume+0x232>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8008f5e:	fb01 fe00 	mul.w	lr, r1, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8008f62:	eb02 1017 	add.w	r0, r2, r7, lsr #4
 8008f66:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008f68:	4283      	cmp	r3, r0
 8008f6a:	f0c0 8084 	bcc.w	8009076 <find_volume+0x232>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008f6e:	1a1b      	subs	r3, r3, r0
 8008f70:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d07e      	beq.n	8009076 <find_volume+0x232>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008f78:	f640 76f5 	movw	r6, #4085	; 0xff5
 8008f7c:	42b3      	cmp	r3, r6
 8008f7e:	d97e      	bls.n	800907e <find_volume+0x23a>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008f80:	f64f 76f5 	movw	r6, #65525	; 0xfff5
 8008f84:	42b3      	cmp	r3, r6
 8008f86:	bf94      	ite	ls
 8008f88:	2602      	movls	r6, #2
 8008f8a:	2603      	movhi	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008f8c:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008f8e:	442a      	add	r2, r5
	fs->database = bsect + sysect;						/* Data start sector */
 8008f90:	4428      	add	r0, r5
	if (fmt == FS_FAT32) {
 8008f92:	2e03      	cmp	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008f94:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8008f98:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008f9c:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8008fa0:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8008fa4:	d16d      	bne.n	8009082 <find_volume+0x23e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008fa6:	2f00      	cmp	r7, #0
 8008fa8:	d165      	bne.n	8009076 <find_volume+0x232>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8008faa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008fac:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8008fb0:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8008fb2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008fb6:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 8008fba:	d35c      	bcc.n	8009076 <find_volume+0x232>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc0:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 8008fc4:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008fc8:	2e03      	cmp	r6, #3
	fs->fsi_flag = 0x80;
 8008fca:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008fce:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008fd2:	d12d      	bne.n	8009030 <find_volume+0x1ec>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8008fd4:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8008fd8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8008fdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d125      	bne.n	8009030 <find_volume+0x1ec>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008fe4:	1c69      	adds	r1, r5, #1
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f7ff fee2 	bl	8008db0 <move_window>
 8008fec:	bb00      	cbnz	r0, 8009030 <find_volume+0x1ec>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008fee:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8008ff2:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 8008ff6:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008ffa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ffe:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8009002:	4293      	cmp	r3, r2
 8009004:	d114      	bne.n	8009030 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8009006:	6822      	ldr	r2, [r4, #0]
 8009008:	4b2b      	ldr	r3, [pc, #172]	; (80090b8 <find_volume+0x274>)
 800900a:	429a      	cmp	r2, r3
 800900c:	d110      	bne.n	8009030 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800900e:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8009012:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 8009016:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800901a:	3320      	adds	r3, #32
 800901c:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800901e:	bf01      	itttt	eq
 8009020:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 8009024:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8009028:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 800902c:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 8009030:	4a22      	ldr	r2, [pc, #136]	; (80090bc <find_volume+0x278>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8009032:	f884 6200 	strb.w	r6, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8009036:	8813      	ldrh	r3, [r2, #0]
 8009038:	3301      	adds	r3, #1
 800903a:	b29b      	uxth	r3, r3
 800903c:	8013      	strh	r3, [r2, #0]
 800903e:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009042:	4b1f      	ldr	r3, [pc, #124]	; (80090c0 <find_volume+0x27c>)
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	4294      	cmp	r4, r2
 8009048:	bf04      	itt	eq
 800904a:	2200      	moveq	r2, #0
 800904c:	601a      	streq	r2, [r3, #0]
 800904e:	68da      	ldr	r2, [r3, #12]
 8009050:	4294      	cmp	r4, r2
 8009052:	f04f 0000 	mov.w	r0, #0
 8009056:	f47f af18 	bne.w	8008e8a <find_volume+0x46>
 800905a:	60d8      	str	r0, [r3, #12]
 800905c:	e715      	b.n	8008e8a <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800905e:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8009060:	3601      	adds	r6, #1
 8009062:	2e04      	cmp	r6, #4
 8009064:	f47f af37 	bne.w	8008ed6 <find_volume+0x92>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009068:	2803      	cmp	r0, #3
 800906a:	d104      	bne.n	8009076 <find_volume+0x232>
 800906c:	2001      	movs	r0, #1
 800906e:	e70c      	b.n	8008e8a <find_volume+0x46>
 8009070:	2803      	cmp	r0, #3
 8009072:	d0fb      	beq.n	800906c <find_volume+0x228>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8009074:	b108      	cbz	r0, 800907a <find_volume+0x236>
 8009076:	200d      	movs	r0, #13
 8009078:	e707      	b.n	8008e8a <find_volume+0x46>
	bsect = 0;
 800907a:	4605      	mov	r5, r0
 800907c:	e737      	b.n	8008eee <find_volume+0xaa>
	fmt = FS_FAT12;
 800907e:	2601      	movs	r6, #1
 8009080:	e784      	b.n	8008f8c <find_volume+0x148>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009082:	2f00      	cmp	r7, #0
 8009084:	d0f7      	beq.n	8009076 <find_volume+0x232>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8009086:	4472      	add	r2, lr
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009088:	2e02      	cmp	r6, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800908a:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 800908e:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009092:	bf1b      	ittet	ne
 8009094:	18d2      	addne	r2, r2, r3
 8009096:	f003 0301 	andne.w	r3, r3, #1
 800909a:	4613      	moveq	r3, r2
 800909c:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 80090a0:	e787      	b.n	8008fb2 <find_volume+0x16e>
	if (vol < 0) return FR_INVALID_DRIVE;
 80090a2:	200b      	movs	r0, #11
 80090a4:	e6f1      	b.n	8008e8a <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80090a6:	200c      	movs	r0, #12
 80090a8:	e6ef      	b.n	8008e8a <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 80090aa:	4628      	mov	r0, r5
 80090ac:	e6ed      	b.n	8008e8a <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80090ae:	2003      	movs	r0, #3
 80090b0:	e6eb      	b.n	8008e8a <find_volume+0x46>
 80090b2:	bf00      	nop
 80090b4:	2000058c 	.word	0x2000058c
 80090b8:	41615252 	.word	0x41615252
 80090bc:	200005a8 	.word	0x200005a8
 80090c0:	20000590 	.word	0x20000590

080090c4 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80090c4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
	clst -= 2;
 80090c8:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80090ca:	3b02      	subs	r3, #2
 80090cc:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 80090ce:	bf3d      	ittte	cc
 80090d0:	f890 3202 	ldrbcc.w	r3, [r0, #514]	; 0x202
 80090d4:	f8d0 0228 	ldrcc.w	r0, [r0, #552]	; 0x228
 80090d8:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80090dc:	2000      	movcs	r0, #0
}
 80090de:	4770      	bx	lr

080090e0 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80090e0:	2901      	cmp	r1, #1
{
 80090e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e4:	4606      	mov	r6, r0
 80090e6:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80090e8:	d959      	bls.n	800919e <get_fat+0xbe>
 80090ea:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80090ee:	4299      	cmp	r1, r3
 80090f0:	d255      	bcs.n	800919e <get_fat+0xbe>
		switch (fs->fs_type) {
 80090f2:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d027      	beq.n	800914a <get_fat+0x6a>
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d036      	beq.n	800916c <get_fat+0x8c>
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d14d      	bne.n	800919e <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 8009102:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009106:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800910a:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 800910e:	f7ff fe4f 	bl	8008db0 <move_window>
 8009112:	b110      	cbz	r0, 800911a <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009114:	f04f 30ff 	mov.w	r0, #4294967295
 8009118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800911a:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 800911e:	1c67      	adds	r7, r4, #1
 8009120:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009124:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8009128:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 800912a:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800912c:	f7ff fe40 	bl	8008db0 <move_window>
 8009130:	2800      	cmp	r0, #0
 8009132:	d1ef      	bne.n	8009114 <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8009134:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8009138:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800913a:	5df0      	ldrb	r0, [r6, r7]
 800913c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8009140:	bf4c      	ite	mi
 8009142:	0900      	lsrmi	r0, r0, #4
 8009144:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8009148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800914a:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800914e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8009152:	f7ff fe2d 	bl	8008db0 <move_window>
 8009156:	2800      	cmp	r0, #0
 8009158:	d1dc      	bne.n	8009114 <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800915a:	006d      	lsls	r5, r5, #1
 800915c:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 8009160:	1973      	adds	r3, r6, r5
 8009162:	5d70      	ldrb	r0, [r6, r5]
 8009164:	785b      	ldrb	r3, [r3, #1]
 8009166:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800916a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800916c:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8009170:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8009174:	f7ff fe1c 	bl	8008db0 <move_window>
 8009178:	2800      	cmp	r0, #0
 800917a:	d1cb      	bne.n	8009114 <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800917c:	00ad      	lsls	r5, r5, #2
 800917e:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8009182:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8009184:	7898      	ldrb	r0, [r3, #2]
 8009186:	78da      	ldrb	r2, [r3, #3]
 8009188:	785b      	ldrb	r3, [r3, #1]
 800918a:	0400      	lsls	r0, r0, #16
 800918c:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8009190:	5d72      	ldrb	r2, [r6, r5]
 8009192:	4310      	orrs	r0, r2
 8009194:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8009198:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800919c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 800919e:	2001      	movs	r0, #1
}
 80091a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091a2 <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80091a2:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
{
 80091a6:	b570      	push	{r4, r5, r6, lr}
 80091a8:	4604      	mov	r4, r0
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80091aa:	2a01      	cmp	r2, #1
{
 80091ac:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 80091ae:	f8a4 1206 	strh.w	r1, [r4, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80091b2:	d101      	bne.n	80091b8 <dir_sdi+0x16>
		return FR_INT_ERR;
 80091b4:	2002      	movs	r0, #2
 80091b6:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80091b8:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 80091bc:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 80091c0:	428a      	cmp	r2, r1
 80091c2:	d2f7      	bcs.n	80091b4 <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80091c4:	b9f2      	cbnz	r2, 8009204 <dir_sdi+0x62>
 80091c6:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 80091ca:	2903      	cmp	r1, #3
 80091cc:	d102      	bne.n	80091d4 <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 80091ce:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80091d2:	b9c1      	cbnz	r1, 8009206 <dir_sdi+0x64>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80091d4:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 80091d8:	428d      	cmp	r5, r1
 80091da:	d2eb      	bcs.n	80091b4 <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 80091dc:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 80091e0:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d0e5      	beq.n	80091b4 <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80091e8:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80091ec:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80091f0:	f005 050f 	and.w	r5, r5, #15
 80091f4:	eb03 1545 	add.w	r5, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80091f8:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80091fc:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 8009200:	2000      	movs	r0, #0
 8009202:	bd70      	pop	{r4, r5, r6, pc}
 8009204:	4611      	mov	r1, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8009206:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
		while (idx >= ic) {	/* Follow cluster chain */
 800920a:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800920c:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 800920e:	42b5      	cmp	r5, r6
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8009210:	4611      	mov	r1, r2
 8009212:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
		while (idx >= ic) {	/* Follow cluster chain */
 8009216:	d202      	bcs.n	800921e <dir_sdi+0x7c>
		sect = clust2sect(dp->fs, clst);
 8009218:	f7ff ff54 	bl	80090c4 <clust2sect>
 800921c:	e7e0      	b.n	80091e0 <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800921e:	f7ff ff5f 	bl	80090e0 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009222:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8009224:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009226:	d009      	beq.n	800923c <dir_sdi+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8009228:	2801      	cmp	r0, #1
 800922a:	d9c3      	bls.n	80091b4 <dir_sdi+0x12>
 800922c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8009230:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009234:	4298      	cmp	r0, r3
 8009236:	d2bd      	bcs.n	80091b4 <dir_sdi+0x12>
			idx -= ic;
 8009238:	1bad      	subs	r5, r5, r6
 800923a:	e7e8      	b.n	800920e <dir_sdi+0x6c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800923c:	2001      	movs	r0, #1
}
 800923e:	bd70      	pop	{r4, r5, r6, pc}

08009240 <dir_remove>:
{
 8009240:	b510      	push	{r4, lr}
	res = dir_sdi(dp, dp->index);
 8009242:	f8b0 1206 	ldrh.w	r1, [r0, #518]	; 0x206
{
 8009246:	4604      	mov	r4, r0
	res = dir_sdi(dp, dp->index);
 8009248:	f7ff ffab 	bl	80091a2 <dir_sdi>
	if (res == FR_OK) {
 800924c:	4603      	mov	r3, r0
 800924e:	b9b0      	cbnz	r0, 800927e <dir_remove+0x3e>
		res = move_window(dp->fs, dp->sect);
 8009250:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8009254:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009258:	f7ff fdaa 	bl	8008db0 <move_window>
		if (res == FR_OK) {
 800925c:	4603      	mov	r3, r0
 800925e:	b970      	cbnz	r0, 800927e <dir_remove+0x3e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 8009260:	4601      	mov	r1, r0
 8009262:	2220      	movs	r2, #32
 8009264:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 8009268:	f7ff fbfc 	bl	8008a64 <mem_set>
			*dp->dir = DDEM;
 800926c:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8009270:	21e5      	movs	r1, #229	; 0xe5
 8009272:	7011      	strb	r1, [r2, #0]
			dp->fs->wflag = 1;
 8009274:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8009278:	2101      	movs	r1, #1
 800927a:	f882 1204 	strb.w	r1, [r2, #516]	; 0x204
}
 800927e:	4618      	mov	r0, r3
 8009280:	bd10      	pop	{r4, pc}

08009282 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009282:	2901      	cmp	r1, #1
{
 8009284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009288:	4605      	mov	r5, r0
 800928a:	460c      	mov	r4, r1
 800928c:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800928e:	d96f      	bls.n	8009370 <put_fat+0xee>
 8009290:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009294:	4299      	cmp	r1, r3
 8009296:	d26b      	bcs.n	8009370 <put_fat+0xee>
		switch (fs->fs_type) {
 8009298:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 800929c:	2b02      	cmp	r3, #2
 800929e:	d03d      	beq.n	800931c <put_fat+0x9a>
 80092a0:	2b03      	cmp	r3, #3
 80092a2:	d04b      	beq.n	800933c <put_fat+0xba>
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d163      	bne.n	8009370 <put_fat+0xee>
			bc = (UINT)clst; bc += bc / 2;
 80092a8:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80092ac:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80092b0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80092b4:	f7ff fd7c 	bl	8008db0 <move_window>
			if (res != FR_OK) break;
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d15a      	bne.n	8009372 <put_fat+0xf0>
			p = &fs->win.d8[bc++ % SS(fs)];
 80092bc:	f107 0801 	add.w	r8, r7, #1
 80092c0:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80092c4:	f014 0401 	ands.w	r4, r4, #1
 80092c8:	bf1f      	itttt	ne
 80092ca:	5deb      	ldrbne	r3, [r5, r7]
 80092cc:	f003 020f 	andne.w	r2, r3, #15
 80092d0:	0133      	lslne	r3, r6, #4
 80092d2:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 80092d6:	bf14      	ite	ne
 80092d8:	4313      	orrne	r3, r2
 80092da:	b2f3      	uxtbeq	r3, r6
 80092dc:	55eb      	strb	r3, [r5, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80092de:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
			fs->wflag = 1;
 80092e2:	2301      	movs	r3, #1
 80092e4:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80092e8:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80092ec:	4628      	mov	r0, r5
 80092ee:	f7ff fd5f 	bl	8008db0 <move_window>
			if (res != FR_OK) break;
 80092f2:	bbf0      	cbnz	r0, 8009372 <put_fat+0xf0>
			p = &fs->win.d8[bc % SS(fs)];
 80092f4:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80092f8:	b144      	cbz	r4, 800930c <put_fat+0x8a>
 80092fa:	f3c6 1207 	ubfx	r2, r6, #4, #8
 80092fe:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 8009302:	2301      	movs	r3, #1
 8009304:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 8009308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800930c:	f815 2008 	ldrb.w	r2, [r5, r8]
 8009310:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8009314:	f022 020f 	bic.w	r2, r2, #15
 8009318:	4332      	orrs	r2, r6
 800931a:	e7f0      	b.n	80092fe <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800931c:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8009320:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8009324:	f7ff fd44 	bl	8008db0 <move_window>
			if (res != FR_OK) break;
 8009328:	bb18      	cbnz	r0, 8009372 <put_fat+0xf0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800932a:	0064      	lsls	r4, r4, #1
 800932c:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 8009330:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8009334:	552e      	strb	r6, [r5, r4]
 8009336:	442c      	add	r4, r5
 8009338:	7062      	strb	r2, [r4, #1]
 800933a:	e7e2      	b.n	8009302 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800933c:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8009340:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8009344:	f7ff fd34 	bl	8008db0 <move_window>
			if (res != FR_OK) break;
 8009348:	b998      	cbnz	r0, 8009372 <put_fat+0xf0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800934a:	00a4      	lsls	r4, r4, #2
 800934c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8009350:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 8009352:	78cb      	ldrb	r3, [r1, #3]
 8009354:	061b      	lsls	r3, r3, #24
 8009356:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800935a:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 800935e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8009362:	552a      	strb	r2, [r5, r4]
 8009364:	704b      	strb	r3, [r1, #1]
 8009366:	0c13      	lsrs	r3, r2, #16
 8009368:	0e12      	lsrs	r2, r2, #24
 800936a:	708b      	strb	r3, [r1, #2]
 800936c:	70ca      	strb	r2, [r1, #3]
 800936e:	e7c8      	b.n	8009302 <put_fat+0x80>
			res = FR_INT_ERR;
 8009370:	2002      	movs	r0, #2
}
 8009372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009376 <create_chain>:
{
 8009376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009378:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 800937a:	460f      	mov	r7, r1
 800937c:	b989      	cbnz	r1, 80093a2 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 800937e:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8009382:	b1fe      	cbz	r6, 80093c4 <create_chain+0x4e>
 8009384:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009388:	429e      	cmp	r6, r3
 800938a:	bf28      	it	cs
 800938c:	2601      	movcs	r6, #1
 800938e:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8009390:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		ncl++;							/* Next cluster */
 8009394:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8009396:	429c      	cmp	r4, r3
 8009398:	d317      	bcc.n	80093ca <create_chain+0x54>
			if (ncl > scl) return 0;	/* No free cluster */
 800939a:	2e01      	cmp	r6, #1
 800939c:	d814      	bhi.n	80093c8 <create_chain+0x52>
 800939e:	2400      	movs	r4, #0
 80093a0:	e008      	b.n	80093b4 <create_chain+0x3e>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80093a2:	f7ff fe9d 	bl	80090e0 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 80093a6:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80093a8:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 80093aa:	d93b      	bls.n	8009424 <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80093ac:	3001      	adds	r0, #1
 80093ae:	d103      	bne.n	80093b8 <create_chain+0x42>
			ncl = 2;
 80093b0:	f04f 34ff 	mov.w	r4, #4294967295
}
 80093b4:	4620      	mov	r0, r4
 80093b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80093b8:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80093bc:	429c      	cmp	r4, r3
 80093be:	d3f9      	bcc.n	80093b4 <create_chain+0x3e>
 80093c0:	463e      	mov	r6, r7
 80093c2:	e7e4      	b.n	800938e <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80093c4:	2601      	movs	r6, #1
 80093c6:	e7e2      	b.n	800938e <create_chain+0x18>
			ncl = 2;
 80093c8:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80093ca:	4621      	mov	r1, r4
 80093cc:	4628      	mov	r0, r5
 80093ce:	f7ff fe87 	bl	80090e0 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 80093d2:	b130      	cbz	r0, 80093e2 <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80093d4:	1c41      	adds	r1, r0, #1
 80093d6:	d0eb      	beq.n	80093b0 <create_chain+0x3a>
 80093d8:	2801      	cmp	r0, #1
 80093da:	d023      	beq.n	8009424 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 80093dc:	42b4      	cmp	r4, r6
 80093de:	d1d7      	bne.n	8009390 <create_chain+0x1a>
 80093e0:	e7dd      	b.n	800939e <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80093e2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80093e6:	4621      	mov	r1, r4
 80093e8:	4628      	mov	r0, r5
 80093ea:	f7ff ff4a 	bl	8009282 <put_fat>
	if (res == FR_OK && clst != 0) {
 80093ee:	b9b8      	cbnz	r0, 8009420 <create_chain+0xaa>
 80093f0:	b97f      	cbnz	r7, 8009412 <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 80093f2:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 80093f6:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 80093fa:	1c5a      	adds	r2, r3, #1
 80093fc:	d0da      	beq.n	80093b4 <create_chain+0x3e>
			fs->free_clust--;
 80093fe:	3b01      	subs	r3, #1
 8009400:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 8009404:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 8009408:	f043 0301 	orr.w	r3, r3, #1
 800940c:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 8009410:	e7d0      	b.n	80093b4 <create_chain+0x3e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8009412:	4622      	mov	r2, r4
 8009414:	4639      	mov	r1, r7
 8009416:	4628      	mov	r0, r5
 8009418:	f7ff ff33 	bl	8009282 <put_fat>
	if (res == FR_OK) {
 800941c:	2800      	cmp	r0, #0
 800941e:	d0e8      	beq.n	80093f2 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8009420:	2801      	cmp	r0, #1
 8009422:	d0c5      	beq.n	80093b0 <create_chain+0x3a>
 8009424:	2401      	movs	r4, #1
 8009426:	e7c5      	b.n	80093b4 <create_chain+0x3e>

08009428 <dir_next>:
{
 8009428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 800942c:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 8009430:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009432:	b2b3      	uxth	r3, r6
{
 8009434:	4604      	mov	r4, r0
 8009436:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009438:	b913      	cbnz	r3, 8009440 <dir_next+0x18>
		return FR_NO_FILE;
 800943a:	2004      	movs	r0, #4
 800943c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009440:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8009444:	2b00      	cmp	r3, #0
 8009446:	d0f8      	beq.n	800943a <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8009448:	f016 080f 	ands.w	r8, r6, #15
 800944c:	d10b      	bne.n	8009466 <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 800944e:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 8009452:	3301      	adds	r3, #1
 8009454:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 8009458:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		if (!dp->clust) {		/* Static table */
 800945c:	b971      	cbnz	r1, 800947c <dir_next+0x54>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800945e:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 8009462:	429e      	cmp	r6, r3
 8009464:	d2e9      	bcs.n	800943a <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8009466:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->index = (WORD)i;	/* Current index */
 800946a:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800946e:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8009472:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 8009476:	2000      	movs	r0, #0
 8009478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800947c:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 8009480:	3f01      	subs	r7, #1
 8009482:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 8009486:	d1ee      	bne.n	8009466 <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8009488:	f7ff fe2a 	bl	80090e0 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 800948c:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800948e:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 8009490:	d802      	bhi.n	8009498 <dir_next+0x70>
 8009492:	2002      	movs	r0, #2
 8009494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009498:	1c42      	adds	r2, r0, #1
 800949a:	d102      	bne.n	80094a2 <dir_next+0x7a>
 800949c:	2001      	movs	r0, #1
 800949e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80094a2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80094a6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80094aa:	429d      	cmp	r5, r3
 80094ac:	d32f      	bcc.n	800950e <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80094ae:	f1b9 0f00 	cmp.w	r9, #0
 80094b2:	d0c2      	beq.n	800943a <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80094b4:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 80094b8:	f7ff ff5d 	bl	8009376 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80094bc:	4605      	mov	r5, r0
 80094be:	2800      	cmp	r0, #0
 80094c0:	d03e      	beq.n	8009540 <dir_next+0x118>
					if (clst == 1) return FR_INT_ERR;
 80094c2:	2801      	cmp	r0, #1
 80094c4:	d0e5      	beq.n	8009492 <dir_next+0x6a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80094c6:	1c43      	adds	r3, r0, #1
 80094c8:	d0e8      	beq.n	800949c <dir_next+0x74>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80094ca:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80094ce:	f7ff fc0b 	bl	8008ce8 <sync_window>
 80094d2:	4601      	mov	r1, r0
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d1e1      	bne.n	800949c <dir_next+0x74>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80094d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094dc:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80094e0:	f7ff fac0 	bl	8008a64 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80094e4:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 80094e8:	4629      	mov	r1, r5
 80094ea:	4610      	mov	r0, r2
 80094ec:	f7ff fdea 	bl	80090c4 <clust2sect>
						dp->fs->wflag = 1;
 80094f0:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80094f4:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80094f8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80094fc:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8009500:	429f      	cmp	r7, r3
 8009502:	d30e      	bcc.n	8009522 <dir_next+0xfa>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8009504:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8009508:	1bdf      	subs	r7, r3, r7
 800950a:	f8c0 722c 	str.w	r7, [r0, #556]	; 0x22c
				dp->clust = clst;				/* Initialize data for new cluster */
 800950e:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8009512:	4629      	mov	r1, r5
 8009514:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009518:	f7ff fdd4 	bl	80090c4 <clust2sect>
 800951c:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 8009520:	e7a1      	b.n	8009466 <dir_next+0x3e>
						dp->fs->wflag = 1;
 8009522:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
 8009526:	f7ff fbb6 	bl	8008c96 <sync_window.part.2>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800952a:	2800      	cmp	r0, #0
 800952c:	d1b6      	bne.n	800949c <dir_next+0x74>
						dp->fs->winsect++;
 800952e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8009532:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 8009536:	3301      	adds	r3, #1
 8009538:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800953c:	3701      	adds	r7, #1
 800953e:	e7db      	b.n	80094f8 <dir_next+0xd0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009540:	2007      	movs	r0, #7
}
 8009542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08009548 <follow_path>:
{
 8009548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800954c:	780b      	ldrb	r3, [r1, #0]
 800954e:	2b2f      	cmp	r3, #47	; 0x2f
{
 8009550:	4604      	mov	r4, r0
 8009552:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8009554:	d001      	beq.n	800955a <follow_path+0x12>
 8009556:	2b5c      	cmp	r3, #92	; 0x5c
 8009558:	d100      	bne.n	800955c <follow_path+0x14>
		path++;
 800955a:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 800955c:	2600      	movs	r6, #0
 800955e:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009562:	782b      	ldrb	r3, [r5, #0]
 8009564:	2b1f      	cmp	r3, #31
 8009566:	d936      	bls.n	80095d6 <follow_path+0x8e>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009568:	4e5f      	ldr	r6, [pc, #380]	; (80096e8 <follow_path+0x1a0>)
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800956a:	782b      	ldrb	r3, [r5, #0]
 800956c:	2b2f      	cmp	r3, #47	; 0x2f
 800956e:	46a8      	mov	r8, r5
 8009570:	f105 0501 	add.w	r5, r5, #1
 8009574:	d0f9      	beq.n	800956a <follow_path+0x22>
 8009576:	2b5c      	cmp	r3, #92	; 0x5c
 8009578:	d0f7      	beq.n	800956a <follow_path+0x22>
	sfn = dp->fn;
 800957a:	f8d4 7218 	ldr.w	r7, [r4, #536]	; 0x218
	mem_set(sfn, ' ', 11);
 800957e:	220b      	movs	r2, #11
 8009580:	2120      	movs	r1, #32
 8009582:	4638      	mov	r0, r7
 8009584:	f7ff fa6e 	bl	8008a64 <mem_set>
	si = i = b = 0; ni = 8;
 8009588:	f04f 0e00 	mov.w	lr, #0
 800958c:	f108 39ff 	add.w	r9, r8, #4294967295
 8009590:	46f4      	mov	ip, lr
 8009592:	2108      	movs	r1, #8
 8009594:	4672      	mov	r2, lr
		c = (BYTE)p[si++];
 8009596:	f819 3f01 	ldrb.w	r3, [r9, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800959a:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 800959c:	f10c 0c01 	add.w	ip, ip, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80095a0:	d928      	bls.n	80095f4 <follow_path+0xac>
 80095a2:	2b2f      	cmp	r3, #47	; 0x2f
 80095a4:	d026      	beq.n	80095f4 <follow_path+0xac>
 80095a6:	2b5c      	cmp	r3, #92	; 0x5c
 80095a8:	d024      	beq.n	80095f4 <follow_path+0xac>
		if (c == '.' || i >= ni) {
 80095aa:	2b2e      	cmp	r3, #46	; 0x2e
 80095ac:	f000 8085 	beq.w	80096ba <follow_path+0x172>
 80095b0:	4571      	cmp	r1, lr
 80095b2:	d90d      	bls.n	80095d0 <follow_path+0x88>
		if (c >= 0x80) {				/* Extended character? */
 80095b4:	0618      	lsls	r0, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80095b6:	bf48      	it	mi
 80095b8:	3b80      	submi	r3, #128	; 0x80
 80095ba:	4d4c      	ldr	r5, [pc, #304]	; (80096ec <follow_path+0x1a4>)
 80095bc:	bf44      	itt	mi
 80095be:	5cf3      	ldrbmi	r3, [r6, r3]
			b |= 3;						/* Eliminate NT flag */
 80095c0:	f042 0203 	orrmi.w	r2, r2, #3
	while (*str && *str != chr) str++;
 80095c4:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d07d      	beq.n	80096c8 <follow_path+0x180>
 80095cc:	4283      	cmp	r3, r0
 80095ce:	d1f9      	bne.n	80095c4 <follow_path+0x7c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80095d0:	2006      	movs	r0, #6
	return res;
 80095d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, 0);
 80095d6:	4631      	mov	r1, r6
 80095d8:	4620      	mov	r0, r4
 80095da:	f7ff fde2 	bl	80091a2 <dir_sdi>
		dp->dir = 0;
 80095de:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
 80095e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				b |= 2;
 80095e6:	f042 0202 	orr.w	r2, r2, #2
			sfn[i++] = c;
 80095ea:	f807 300e 	strb.w	r3, [r7, lr]
 80095ee:	f10e 0e01 	add.w	lr, lr, #1
 80095f2:	e7d0      	b.n	8009596 <follow_path+0x4e>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80095f4:	2b21      	cmp	r3, #33	; 0x21
	*path = &p[si];						/* Return pointer to the next segment */
 80095f6:	eb08 050c 	add.w	r5, r8, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80095fa:	bf34      	ite	cc
 80095fc:	2304      	movcc	r3, #4
 80095fe:	2300      	movcs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8009600:	f1be 0f00 	cmp.w	lr, #0
 8009604:	d0e4      	beq.n	80095d0 <follow_path+0x88>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8009606:	7838      	ldrb	r0, [r7, #0]
 8009608:	28e5      	cmp	r0, #229	; 0xe5
 800960a:	bf04      	itt	eq
 800960c:	2005      	moveq	r0, #5
 800960e:	7038      	strbeq	r0, [r7, #0]
	if (ni == 8) b <<= 2;
 8009610:	2908      	cmp	r1, #8
 8009612:	bf04      	itt	eq
 8009614:	0092      	lsleq	r2, r2, #2
 8009616:	b2d2      	uxtbeq	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8009618:	f002 0103 	and.w	r1, r2, #3
 800961c:	2901      	cmp	r1, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800961e:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8009622:	bf08      	it	eq
 8009624:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8009628:	2a04      	cmp	r2, #4
 800962a:	bf08      	it	eq
 800962c:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8009630:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009632:	2100      	movs	r1, #0
 8009634:	4620      	mov	r0, r4
 8009636:	f7ff fdb4 	bl	80091a2 <dir_sdi>
	if (res != FR_OK) return res;
 800963a:	b9f8      	cbnz	r0, 800967c <follow_path+0x134>
		res = move_window(dp->fs, dp->sect);
 800963c:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8009640:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009644:	f7ff fbb4 	bl	8008db0 <move_window>
		if (res != FR_OK) break;
 8009648:	b9c0      	cbnz	r0, 800967c <follow_path+0x134>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800964a:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800964e:	7813      	ldrb	r3, [r2, #0]
 8009650:	b19b      	cbz	r3, 800967a <follow_path+0x132>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8009652:	7ad3      	ldrb	r3, [r2, #11]
 8009654:	0719      	lsls	r1, r3, #28
 8009656:	d40b      	bmi.n	8009670 <follow_path+0x128>
 8009658:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800965c:	f103 0e0b 	add.w	lr, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009660:	4573      	cmp	r3, lr
 8009662:	d00b      	beq.n	800967c <follow_path+0x134>
 8009664:	f812 7b01 	ldrb.w	r7, [r2], #1
 8009668:	f813 1b01 	ldrb.w	r1, [r3], #1
 800966c:	428f      	cmp	r7, r1
 800966e:	d0f7      	beq.n	8009660 <follow_path+0x118>
		res = dir_next(dp, 0);		/* Next entry */
 8009670:	2100      	movs	r1, #0
 8009672:	4620      	mov	r0, r4
 8009674:	f7ff fed8 	bl	8009428 <dir_next>
 8009678:	e7df      	b.n	800963a <follow_path+0xf2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800967a:	2004      	movs	r0, #4
			ns = dp->fn[NSFLAG];
 800967c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8009680:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009682:	b138      	cbz	r0, 8009694 <follow_path+0x14c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009684:	2804      	cmp	r0, #4
 8009686:	d12c      	bne.n	80096e2 <follow_path+0x19a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009688:	f013 0f04 	tst.w	r3, #4
 800968c:	bf08      	it	eq
 800968e:	2005      	moveq	r0, #5
 8009690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009694:	075a      	lsls	r2, r3, #29
 8009696:	d424      	bmi.n	80096e2 <follow_path+0x19a>
			dir = dp->dir;						/* Follow the sub-directory */
 8009698:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800969c:	7acb      	ldrb	r3, [r1, #11]
 800969e:	06db      	lsls	r3, r3, #27
 80096a0:	d508      	bpl.n	80096b4 <follow_path+0x16c>
			dp->sclust = ld_clust(dp->fs, dir);
 80096a2:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80096a6:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 80096aa:	f7ff fae6 	bl	8008c7a <ld_clust.isra.0>
 80096ae:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80096b2:	e75a      	b.n	800956a <follow_path+0x22>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80096b4:	2005      	movs	r0, #5
 80096b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80096ba:	2908      	cmp	r1, #8
 80096bc:	d188      	bne.n	80095d0 <follow_path+0x88>
			b <<= 2; continue;
 80096be:	0092      	lsls	r2, r2, #2
			i = 8; ni = 11;
 80096c0:	468e      	mov	lr, r1
			b <<= 2; continue;
 80096c2:	b2d2      	uxtb	r2, r2
			i = 8; ni = 11;
 80096c4:	210b      	movs	r1, #11
 80096c6:	e766      	b.n	8009596 <follow_path+0x4e>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80096c8:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 80096cc:	2819      	cmp	r0, #25
 80096ce:	d98a      	bls.n	80095e6 <follow_path+0x9e>
				if (IsLower(c)) {		/* ASCII small capital? */
 80096d0:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 80096d4:	2819      	cmp	r0, #25
					b |= 1; c -= 0x20;
 80096d6:	bf9e      	ittt	ls
 80096d8:	3b20      	subls	r3, #32
 80096da:	f042 0201 	orrls.w	r2, r2, #1
 80096de:	b2db      	uxtbls	r3, r3
 80096e0:	e783      	b.n	80095ea <follow_path+0xa2>
}
 80096e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096e6:	bf00      	nop
 80096e8:	0800b7d0 	.word	0x0800b7d0
 80096ec:	0800b84f 	.word	0x0800b84f

080096f0 <dir_read.constprop.13>:
FRESULT dir_read (
 80096f0:	b510      	push	{r4, lr}
 80096f2:	4604      	mov	r4, r0
	res = FR_NO_FILE;
 80096f4:	2004      	movs	r0, #4
	while (dp->sect) {
 80096f6:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 80096fa:	b909      	cbnz	r1, 8009700 <dir_read.constprop.13+0x10>
	if (res != FR_OK) dp->sect = 0;
 80096fc:	b1b0      	cbz	r0, 800972c <dir_read.constprop.13+0x3c>
 80096fe:	e01d      	b.n	800973c <dir_read.constprop.13+0x4c>
		res = move_window(dp->fs, dp->sect);
 8009700:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009704:	f7ff fb54 	bl	8008db0 <move_window>
		if (res != FR_OK) break;
 8009708:	b9c0      	cbnz	r0, 800973c <dir_read.constprop.13+0x4c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800970a:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		c = dir[DIR_Name];
 800970e:	7813      	ldrb	r3, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009710:	b1c3      	cbz	r3, 8009744 <dir_read.constprop.13+0x54>
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8009712:	2be5      	cmp	r3, #229	; 0xe5
 8009714:	d00c      	beq.n	8009730 <dir_read.constprop.13+0x40>
 8009716:	2b2e      	cmp	r3, #46	; 0x2e
 8009718:	d00a      	beq.n	8009730 <dir_read.constprop.13+0x40>
		a = dir[DIR_Attr] & AM_MASK;
 800971a:	7ad3      	ldrb	r3, [r2, #11]
 800971c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8009720:	2b0f      	cmp	r3, #15
 8009722:	d005      	beq.n	8009730 <dir_read.constprop.13+0x40>
 8009724:	f023 0320 	bic.w	r3, r3, #32
 8009728:	2b08      	cmp	r3, #8
 800972a:	d001      	beq.n	8009730 <dir_read.constprop.13+0x40>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800972c:	2000      	movs	r0, #0
 800972e:	bd10      	pop	{r4, pc}
		res = dir_next(dp, 0);				/* Next entry */
 8009730:	2100      	movs	r1, #0
 8009732:	4620      	mov	r0, r4
 8009734:	f7ff fe78 	bl	8009428 <dir_next>
		if (res != FR_OK) break;
 8009738:	2800      	cmp	r0, #0
 800973a:	d0dc      	beq.n	80096f6 <dir_read.constprop.13+0x6>
	if (res != FR_OK) dp->sect = 0;
 800973c:	2300      	movs	r3, #0
 800973e:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
}
 8009742:	bd10      	pop	{r4, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009744:	2004      	movs	r0, #4
 8009746:	e7f9      	b.n	800973c <dir_read.constprop.13+0x4c>

08009748 <dir_register>:
{
 8009748:	b538      	push	{r3, r4, r5, lr}
	res = dir_sdi(dp, 0);
 800974a:	2100      	movs	r1, #0
{
 800974c:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 800974e:	f7ff fd28 	bl	80091a2 <dir_sdi>
	if (res == FR_OK) {
 8009752:	4604      	mov	r4, r0
 8009754:	bb78      	cbnz	r0, 80097b6 <dir_register+0x6e>
			res = move_window(dp->fs, dp->sect);
 8009756:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 800975a:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 800975e:	f7ff fb27 	bl	8008db0 <move_window>
			if (res != FR_OK) break;
 8009762:	4604      	mov	r4, r0
 8009764:	bb38      	cbnz	r0, 80097b6 <dir_register+0x6e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8009766:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	2be5      	cmp	r3, #229	; 0xe5
 800976e:	d11b      	bne.n	80097a8 <dir_register+0x60>
		res = move_window(dp->fs, dp->sect);
 8009770:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8009774:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8009778:	f7ff fb1a 	bl	8008db0 <move_window>
		if (res == FR_OK) {
 800977c:	4604      	mov	r4, r0
 800977e:	b988      	cbnz	r0, 80097a4 <dir_register+0x5c>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8009780:	4601      	mov	r1, r0
 8009782:	2220      	movs	r2, #32
 8009784:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 8009788:	f7ff f96c 	bl	8008a64 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800978c:	220b      	movs	r2, #11
 800978e:	f8d5 1218 	ldr.w	r1, [r5, #536]	; 0x218
 8009792:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 8009796:	f7ff f95b 	bl	8008a50 <mem_cpy>
			dp->fs->wflag = 1;
 800979a:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 80097a4:	4620      	mov	r0, r4
 80097a6:	bd38      	pop	{r3, r4, r5, pc}
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d0e1      	beq.n	8009770 <dir_register+0x28>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80097ac:	2101      	movs	r1, #1
 80097ae:	4628      	mov	r0, r5
 80097b0:	f7ff fe3a 	bl	8009428 <dir_next>
 80097b4:	e7cd      	b.n	8009752 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80097b6:	2c04      	cmp	r4, #4
 80097b8:	bf08      	it	eq
 80097ba:	2407      	moveq	r4, #7
 80097bc:	e7f2      	b.n	80097a4 <dir_register+0x5c>

080097be <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80097be:	2901      	cmp	r1, #1
{
 80097c0:	b570      	push	{r4, r5, r6, lr}
 80097c2:	4604      	mov	r4, r0
 80097c4:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80097c6:	d801      	bhi.n	80097cc <remove_chain+0xe>
		res = FR_INT_ERR;
 80097c8:	2002      	movs	r0, #2
 80097ca:	bd70      	pop	{r4, r5, r6, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80097cc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80097d0:	4299      	cmp	r1, r3
 80097d2:	d2f9      	bcs.n	80097c8 <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80097d4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80097d8:	429d      	cmp	r5, r3
 80097da:	d205      	bcs.n	80097e8 <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80097dc:	4629      	mov	r1, r5
 80097de:	4620      	mov	r0, r4
 80097e0:	f7ff fc7e 	bl	80090e0 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 80097e4:	4606      	mov	r6, r0
 80097e6:	b908      	cbnz	r0, 80097ec <remove_chain+0x2e>
		res = FR_INT_ERR;
 80097e8:	2000      	movs	r0, #0
 80097ea:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80097ec:	2801      	cmp	r0, #1
 80097ee:	d0eb      	beq.n	80097c8 <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80097f0:	1c41      	adds	r1, r0, #1
 80097f2:	d014      	beq.n	800981e <remove_chain+0x60>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80097f4:	2200      	movs	r2, #0
 80097f6:	4629      	mov	r1, r5
 80097f8:	4620      	mov	r0, r4
 80097fa:	f7ff fd42 	bl	8009282 <put_fat>
			if (res != FR_OK) break;
 80097fe:	b978      	cbnz	r0, 8009820 <remove_chain+0x62>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8009800:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8009804:	1c5a      	adds	r2, r3, #1
 8009806:	d008      	beq.n	800981a <remove_chain+0x5c>
				fs->free_clust++;
 8009808:	3301      	adds	r3, #1
 800980a:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
				fs->fsi_flag |= 1;
 800980e:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8009812:	f043 0301 	orr.w	r3, r3, #1
 8009816:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
{
 800981a:	4635      	mov	r5, r6
 800981c:	e7da      	b.n	80097d4 <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800981e:	2001      	movs	r0, #1
}
 8009820:	bd70      	pop	{r4, r5, r6, pc}
	...

08009824 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009824:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009826:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009828:	a804      	add	r0, sp, #16
{
 800982a:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 800982c:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8009830:	4616      	mov	r6, r2


	vol = get_ldnumber(&rp);
 8009832:	f7ff f9f3 	bl	8008c1c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8009836:	1e05      	subs	r5, r0, #0
 8009838:	db21      	blt.n	800987e <f_mount+0x5a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800983a:	4913      	ldr	r1, [pc, #76]	; (8009888 <f_mount+0x64>)
 800983c:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8009840:	b164      	cbz	r4, 800985c <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009842:	4b12      	ldr	r3, [pc, #72]	; (800988c <f_mount+0x68>)
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	4294      	cmp	r4, r2
 8009848:	bf04      	itt	eq
 800984a:	2200      	moveq	r2, #0
 800984c:	601a      	streq	r2, [r3, #0]
 800984e:	68da      	ldr	r2, [r3, #12]
 8009850:	2000      	movs	r0, #0
 8009852:	4294      	cmp	r4, r2
 8009854:	bf08      	it	eq
 8009856:	60d8      	streq	r0, [r3, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009858:	f884 0200 	strb.w	r0, [r4, #512]	; 0x200
	}

	if (fs) {
 800985c:	9801      	ldr	r0, [sp, #4]
 800985e:	b110      	cbz	r0, 8009866 <f_mount+0x42>
		fs->fs_type = 0;				/* Clear new fs object */
 8009860:	2300      	movs	r3, #0
 8009862:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009866:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800986a:	b130      	cbz	r0, 800987a <f_mount+0x56>
 800986c:	2e01      	cmp	r6, #1
 800986e:	d108      	bne.n	8009882 <f_mount+0x5e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8009870:	2200      	movs	r2, #0
 8009872:	4669      	mov	r1, sp
 8009874:	a801      	add	r0, sp, #4
 8009876:	f7ff fae5 	bl	8008e44 <find_volume>
	LEAVE_FF(fs, res);
}
 800987a:	b004      	add	sp, #16
 800987c:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800987e:	200b      	movs	r0, #11
 8009880:	e7fb      	b.n	800987a <f_mount+0x56>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009882:	2000      	movs	r0, #0
 8009884:	e7f9      	b.n	800987a <f_mount+0x56>
 8009886:	bf00      	nop
 8009888:	2000058c 	.word	0x2000058c
 800988c:	20000590 	.word	0x20000590

08009890 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009894:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8009898:	4690      	mov	r8, r2
 800989a:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800989c:	4605      	mov	r5, r0
 800989e:	2800      	cmp	r0, #0
 80098a0:	f000 80a6 	beq.w	80099f0 <f_open+0x160>
	fp->fs = 0;			/* Clear file object */
 80098a4:	2300      	movs	r3, #0
 80098a6:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80098aa:	f002 021e 	and.w	r2, r2, #30
 80098ae:	a901      	add	r1, sp, #4
 80098b0:	a886      	add	r0, sp, #536	; 0x218
 80098b2:	f7ff fac7 	bl	8008e44 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80098b6:	4606      	mov	r6, r0
 80098b8:	2800      	cmp	r0, #0
 80098ba:	f040 8094 	bne.w	80099e6 <f_open+0x156>
		INIT_BUF(dj);
 80098be:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 80098c0:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 80098c2:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 80098c4:	a806      	add	r0, sp, #24
 80098c6:	f7ff fe3f 	bl	8009548 <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80098ca:	f008 071f 	and.w	r7, r8, #31
		dir = dj.dir;
 80098ce:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80098d0:	b948      	cbnz	r0, 80098e6 <f_open+0x56>
			if (!dir)	/* Default directory itself */
 80098d2:	2c00      	cmp	r4, #0
 80098d4:	d05b      	beq.n	800998e <f_open+0xfe>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80098d6:	f017 0f1e 	tst.w	r7, #30
 80098da:	bf14      	ite	ne
 80098dc:	2101      	movne	r1, #1
 80098de:	2100      	moveq	r1, #0
 80098e0:	a806      	add	r0, sp, #24
 80098e2:	f7ff f8c7 	bl	8008a74 <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80098e6:	f018 0f1c 	tst.w	r8, #28
 80098ea:	d05b      	beq.n	80099a4 <f_open+0x114>
			if (res != FR_OK) {					/* No file, create new */
 80098ec:	2800      	cmp	r0, #0
 80098ee:	d050      	beq.n	8009992 <f_open+0x102>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80098f0:	2804      	cmp	r0, #4
 80098f2:	d14a      	bne.n	800998a <f_open+0xfa>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80098f4:	4b51      	ldr	r3, [pc, #324]	; (8009a3c <f_open+0x1ac>)
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	b11a      	cbz	r2, 8009902 <f_open+0x72>
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f040 809b 	bne.w	8009a38 <f_open+0x1a8>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009902:	a806      	add	r0, sp, #24
 8009904:	f7ff ff20 	bl	8009748 <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009908:	2800      	cmp	r0, #0
 800990a:	d13e      	bne.n	800998a <f_open+0xfa>
				dir = dj.dir;					/* New entry */
 800990c:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800990e:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009912:	073b      	lsls	r3, r7, #28
 8009914:	d550      	bpl.n	80099b8 <f_open+0x128>
				dw = GET_FATTIME();				/* Created time */
 8009916:	f7f6 ff9d 	bl	8000854 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 800991a:	f3c0 2307 	ubfx	r3, r0, #8, #8
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800991e:	f04f 0800 	mov.w	r8, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 8009922:	73a0      	strb	r0, [r4, #14]
 8009924:	73e3      	strb	r3, [r4, #15]
 8009926:	0c03      	lsrs	r3, r0, #16
 8009928:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800992a:	f884 800b 	strb.w	r8, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800992e:	f884 801c 	strb.w	r8, [r4, #28]
 8009932:	f884 801d 	strb.w	r8, [r4, #29]
 8009936:	f884 801e 	strb.w	r8, [r4, #30]
 800993a:	f884 801f 	strb.w	r8, [r4, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800993e:	7423      	strb	r3, [r4, #16]
 8009940:	7460      	strb	r0, [r4, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8009942:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8009944:	4621      	mov	r1, r4
 8009946:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800994a:	f7ff f996 	bl	8008c7a <ld_clust.isra.0>
	ST_WORD(dir + DIR_FstClusLO, cl);
 800994e:	f884 801a 	strb.w	r8, [r4, #26]
 8009952:	f884 801b 	strb.w	r8, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8009956:	f884 8014 	strb.w	r8, [r4, #20]
 800995a:	f884 8015 	strb.w	r8, [r4, #21]
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 800995e:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8009960:	2201      	movs	r2, #1
 8009962:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8009966:	4680      	mov	r8, r0
 8009968:	b330      	cbz	r0, 80099b8 <f_open+0x128>
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
 800996a:	4601      	mov	r1, r0
 800996c:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 800996e:	f8d3 922c 	ldr.w	r9, [r3, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 8009972:	f7ff ff24 	bl	80097be <remove_chain>
					if (res == FR_OK) {
 8009976:	b940      	cbnz	r0, 800998a <f_open+0xfa>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8009978:	9886      	ldr	r0, [sp, #536]	; 0x218
 800997a:	f108 33ff 	add.w	r3, r8, #4294967295
 800997e:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8009982:	4649      	mov	r1, r9
 8009984:	f7ff fa14 	bl	8008db0 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 8009988:	b1b0      	cbz	r0, 80099b8 <f_open+0x128>
					res = FR_DENIED;
 800998a:	4606      	mov	r6, r0
 800998c:	e02b      	b.n	80099e6 <f_open+0x156>
				res = FR_INVALID_NAME;
 800998e:	2006      	movs	r0, #6
 8009990:	e7a9      	b.n	80098e6 <f_open+0x56>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009992:	7ae3      	ldrb	r3, [r4, #11]
 8009994:	f013 0f11 	tst.w	r3, #17
 8009998:	d12e      	bne.n	80099f8 <f_open+0x168>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800999a:	f018 0f04 	tst.w	r8, #4
 800999e:	d0b8      	beq.n	8009912 <f_open+0x82>
						res = FR_EXIST;
 80099a0:	2608      	movs	r6, #8
 80099a2:	e020      	b.n	80099e6 <f_open+0x156>
			if (res == FR_OK) {					/* Follow succeeded */
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d1f0      	bne.n	800998a <f_open+0xfa>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80099a8:	7ae3      	ldrb	r3, [r4, #11]
 80099aa:	06d8      	lsls	r0, r3, #27
 80099ac:	d422      	bmi.n	80099f4 <f_open+0x164>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80099ae:	f018 0f02 	tst.w	r8, #2
 80099b2:	d001      	beq.n	80099b8 <f_open+0x128>
 80099b4:	07da      	lsls	r2, r3, #31
 80099b6:	d41f      	bmi.n	80099f8 <f_open+0x168>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80099b8:	073b      	lsls	r3, r7, #28
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80099ba:	9b86      	ldr	r3, [sp, #536]	; 0x218
				mode |= FA__WRITTEN;
 80099bc:	bf48      	it	mi
 80099be:	f047 0720 	orrmi.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80099c2:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80099c6:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
			fp->dir_ptr = dir;
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80099ca:	f017 0ffe 	tst.w	r7, #254	; 0xfe
			fp->dir_ptr = dir;
 80099ce:	f8c5 4220 	str.w	r4, [r5, #544]	; 0x220
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80099d2:	bf14      	ite	ne
 80099d4:	2101      	movne	r1, #1
 80099d6:	2100      	moveq	r1, #0
 80099d8:	a806      	add	r0, sp, #24
 80099da:	f7ff f87d 	bl	8008ad8 <inc_lock>
 80099de:	f8c5 0228 	str.w	r0, [r5, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80099e2:	b958      	cbnz	r0, 80099fc <f_open+0x16c>
 80099e4:	2602      	movs	r6, #2
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 80099e6:	4630      	mov	r0, r6
 80099e8:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80099ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!fp) return FR_INVALID_OBJECT;
 80099f0:	2609      	movs	r6, #9
 80099f2:	e7f8      	b.n	80099e6 <f_open+0x156>
					res = FR_NO_FILE;
 80099f4:	2604      	movs	r6, #4
 80099f6:	e7f6      	b.n	80099e6 <f_open+0x156>
					res = FR_DENIED;
 80099f8:	2607      	movs	r6, #7
 80099fa:	e7f4      	b.n	80099e6 <f_open+0x156>
			fp->flag = mode;					/* File access mode */
 80099fc:	f885 7206 	strb.w	r7, [r5, #518]	; 0x206
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8009a00:	f8dd 8218 	ldr.w	r8, [sp, #536]	; 0x218
			fp->err = 0;						/* Clear error flag */
 8009a04:	2700      	movs	r7, #0
 8009a06:	f885 7207 	strb.w	r7, [r5, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8009a0a:	f898 0200 	ldrb.w	r0, [r8, #512]	; 0x200
 8009a0e:	4621      	mov	r1, r4
 8009a10:	f7ff f933 	bl	8008c7a <ld_clust.isra.0>
 8009a14:	f8c5 0210 	str.w	r0, [r5, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8009a18:	69e3      	ldr	r3, [r4, #28]
 8009a1a:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
			fp->id = fp->fs->id;
 8009a1e:	f8b8 3206 	ldrh.w	r3, [r8, #518]	; 0x206
			fp->fptr = 0;						/* File pointer */
 8009a22:	f8c5 7208 	str.w	r7, [r5, #520]	; 0x208
			fp->dsect = 0;
 8009a26:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 8009a2a:	f8c5 7224 	str.w	r7, [r5, #548]	; 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 8009a2e:	f8c5 8200 	str.w	r8, [r5, #512]	; 0x200
			fp->id = fp->fs->id;
 8009a32:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
 8009a36:	e7d6      	b.n	80099e6 <f_open+0x156>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009a38:	2012      	movs	r0, #18
 8009a3a:	e7a6      	b.n	800998a <f_open+0xfa>
 8009a3c:	20000590 	.word	0x20000590

08009a40 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009a40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a44:	469b      	mov	fp, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8009a46:	2300      	movs	r3, #0
 8009a48:	f8cb 3000 	str.w	r3, [fp]
{
 8009a4c:	4604      	mov	r4, r0
 8009a4e:	4689      	mov	r9, r1
 8009a50:	4617      	mov	r7, r2

	res = validate(fp);						/* Check validity */
 8009a52:	f7ff f8fb 	bl	8008c4c <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009a56:	4606      	mov	r6, r0
 8009a58:	bb50      	cbnz	r0, 8009ab0 <f_write+0x70>
	if (fp->err)							/* Check error */
 8009a5a:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f040 80d9 	bne.w	8009c16 <f_write+0x1d6>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8009a64:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009a68:	0799      	lsls	r1, r3, #30
 8009a6a:	f140 80d6 	bpl.w	8009c1a <f_write+0x1da>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8009a6e:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009a72:	42df      	cmn	r7, r3
 8009a74:	f0c0 8083 	bcc.w	8009b7e <f_write+0x13e>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8009a78:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009a7c:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8009a80:	4293      	cmp	r3, r2
 8009a82:	f200 80c5 	bhi.w	8009c10 <f_write+0x1d0>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8009a86:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009a8a:	f043 0320 	orr.w	r3, r3, #32
 8009a8e:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8009a92:	e00d      	b.n	8009ab0 <f_write+0x70>
					if (fp->cltbl)
 8009a94:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8009a98:	b173      	cbz	r3, 8009ab8 <f_write+0x78>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f7ff f87c 	bl	8008b98 <clmt_clust>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009aa0:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	d0e8      	beq.n	8009a78 <f_write+0x38>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009aa6:	2901      	cmp	r1, #1
 8009aa8:	d109      	bne.n	8009abe <f_write+0x7e>
 8009aaa:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009aac:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207

	LEAVE_FF(fp->fs, FR_OK);
}
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	b003      	add	sp, #12
 8009ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009ab8:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8009abc:	e07a      	b.n	8009bb4 <f_write+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009abe:	1c4a      	adds	r2, r1, #1
 8009ac0:	d101      	bne.n	8009ac6 <f_write+0x86>
 8009ac2:	2601      	movs	r6, #1
 8009ac4:	e7f2      	b.n	8009aac <f_write+0x6c>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8009ac6:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
				fp->clust = clst;			/* Update current cluster */
 8009aca:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8009ace:	b90b      	cbnz	r3, 8009ad4 <f_write+0x94>
 8009ad0:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8009ad4:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009ad8:	065b      	lsls	r3, r3, #25
 8009ada:	d511      	bpl.n	8009b00 <f_write+0xc0>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009adc:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009ae0:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8009ae4:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8009ae8:	2301      	movs	r3, #1
 8009aea:	4621      	mov	r1, r4
 8009aec:	f7fe ff2c 	bl	8008948 <disk_write>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d1e6      	bne.n	8009ac2 <f_write+0x82>
				fp->flag &= ~FA__DIRTY;
 8009af4:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009afc:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009b00:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 8009b04:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8009b08:	4650      	mov	r0, sl
 8009b0a:	f7ff fadb 	bl	80090c4 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d0cb      	beq.n	8009aaa <f_write+0x6a>
			sect += csect;
 8009b12:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009b14:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8009b16:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009b1a:	d04e      	beq.n	8009bba <f_write+0x17a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009b1c:	9a01      	ldr	r2, [sp, #4]
 8009b1e:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8009b22:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009b26:	442a      	add	r2, r5
 8009b28:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 8009b2a:	bf84      	itt	hi
 8009b2c:	9a01      	ldrhi	r2, [sp, #4]
 8009b2e:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8009b30:	462b      	mov	r3, r5
 8009b32:	4642      	mov	r2, r8
 8009b34:	4649      	mov	r1, r9
 8009b36:	f7fe ff07 	bl	8008948 <disk_write>
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	d1c1      	bne.n	8009ac2 <f_write+0x82>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009b3e:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 8009b42:	eba1 0108 	sub.w	r1, r1, r8
 8009b46:	428d      	cmp	r5, r1
 8009b48:	d90c      	bls.n	8009b64 <f_write+0x124>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8009b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b4e:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8009b52:	4620      	mov	r0, r4
 8009b54:	f7fe ff7c 	bl	8008a50 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8009b58:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b60:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8009b64:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8009b66:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009b6a:	442b      	add	r3, r5
 8009b6c:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8009b70:	f8db 3000 	ldr.w	r3, [fp]
 8009b74:	442b      	add	r3, r5
 8009b76:	44a9      	add	r9, r5
 8009b78:	f8cb 3000 	str.w	r3, [fp]
 8009b7c:	1b7f      	subs	r7, r7, r5
	for ( ;  btw;							/* Repeat until all data written */
 8009b7e:	2f00      	cmp	r7, #0
 8009b80:	f43f af7a 	beq.w	8009a78 <f_write+0x38>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8009b84:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 8009b88:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8009b8c:	bb5b      	cbnz	r3, 8009be6 <f_write+0x1a6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009b8e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009b92:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8009b96:	3b01      	subs	r3, #1
 8009b98:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 8009b9c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8009ba0:	9301      	str	r3, [sp, #4]
 8009ba2:	d197      	bne.n	8009ad4 <f_write+0x94>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009ba4:	2900      	cmp	r1, #0
 8009ba6:	f47f af75 	bne.w	8009a94 <f_write+0x54>
					clst = fp->sclust;		/* Follow from the origin */
 8009baa:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 8009bae:	2900      	cmp	r1, #0
 8009bb0:	f47f af79 	bne.w	8009aa6 <f_write+0x66>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009bb4:	f7ff fbdf 	bl	8009376 <create_chain>
 8009bb8:	e772      	b.n	8009aa0 <f_write+0x60>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8009bba:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8009bbe:	4598      	cmp	r8, r3
 8009bc0:	d00f      	beq.n	8009be2 <f_write+0x1a2>
				if (fp->fptr < fp->fsize &&
 8009bc2:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 8009bc6:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d209      	bcs.n	8009be2 <f_write+0x1a2>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8009bce:	2301      	movs	r3, #1
 8009bd0:	4642      	mov	r2, r8
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 8009bd8:	f7fe fea8 	bl	800892c <disk_read>
				if (fp->fptr < fp->fsize &&
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	f47f af70 	bne.w	8009ac2 <f_write+0x82>
			fp->dsect = sect;
 8009be2:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8009be6:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 8009bea:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8009bee:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 8009bf2:	42bd      	cmp	r5, r7
 8009bf4:	bf28      	it	cs
 8009bf6:	463d      	movcs	r5, r7
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8009bf8:	462a      	mov	r2, r5
 8009bfa:	4649      	mov	r1, r9
 8009bfc:	4420      	add	r0, r4
 8009bfe:	f7fe ff27 	bl	8008a50 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8009c02:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c0a:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8009c0e:	e7aa      	b.n	8009b66 <f_write+0x126>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8009c10:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 8009c14:	e737      	b.n	8009a86 <f_write+0x46>
 8009c16:	461e      	mov	r6, r3
 8009c18:	e74a      	b.n	8009ab0 <f_write+0x70>
		LEAVE_FF(fp->fs, FR_DENIED);
 8009c1a:	2607      	movs	r6, #7
 8009c1c:	e748      	b.n	8009ab0 <f_write+0x70>

08009c1e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009c1e:	b570      	push	{r4, r5, r6, lr}
 8009c20:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8009c22:	f7ff f813 	bl	8008c4c <validate>
	if (res == FR_OK) {
 8009c26:	2800      	cmp	r0, #0
 8009c28:	d158      	bne.n	8009cdc <f_sync+0xbe>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8009c2a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009c2e:	069a      	lsls	r2, r3, #26
 8009c30:	d554      	bpl.n	8009cdc <f_sync+0xbe>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8009c32:	065b      	lsls	r3, r3, #25
 8009c34:	d511      	bpl.n	8009c5a <f_sync+0x3c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009c36:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009c3a:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8009c3e:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8009c42:	2301      	movs	r3, #1
 8009c44:	4621      	mov	r1, r4
 8009c46:	f7fe fe7f 	bl	8008948 <disk_write>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	d145      	bne.n	8009cda <f_sync+0xbc>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 8009c4e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c56:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8009c5a:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 8009c5e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009c62:	f7ff f8a5 	bl	8008db0 <move_window>
 8009c66:	4606      	mov	r6, r0
			if (res == FR_OK) {
 8009c68:	bbc0      	cbnz	r0, 8009cdc <f_sync+0xbe>
				dir = fp->dir_ptr;
 8009c6a:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8009c6e:	7aeb      	ldrb	r3, [r5, #11]
 8009c70:	f043 0320 	orr.w	r3, r3, #32
 8009c74:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8009c76:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8009c7a:	772b      	strb	r3, [r5, #28]
 8009c7c:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 8009c80:	0a1b      	lsrs	r3, r3, #8
 8009c82:	776b      	strb	r3, [r5, #29]
 8009c84:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8009c88:	77ab      	strb	r3, [r5, #30]
 8009c8a:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 8009c8e:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8009c90:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 8009c94:	76ab      	strb	r3, [r5, #26]
 8009c96:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8009c9a:	0c1b      	lsrs	r3, r3, #16
 8009c9c:	752b      	strb	r3, [r5, #20]
 8009c9e:	0a1b      	lsrs	r3, r3, #8
 8009ca0:	756b      	strb	r3, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8009ca2:	76ea      	strb	r2, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 8009ca4:	f7f6 fdd6 	bl	8000854 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009ca8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009cac:	75a8      	strb	r0, [r5, #22]
 8009cae:	75eb      	strb	r3, [r5, #23]
 8009cb0:	0c03      	lsrs	r3, r0, #16
 8009cb2:	0e00      	lsrs	r0, r0, #24
 8009cb4:	762b      	strb	r3, [r5, #24]
 8009cb6:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8009cb8:	74ae      	strb	r6, [r5, #18]
 8009cba:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 8009cbc:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 8009cc0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 8009cc4:	f023 0320 	bic.w	r3, r3, #32
 8009cc8:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 8009cd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 8009cd6:	f7ff b80e 	b.w	8008cf6 <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8009cda:	2001      	movs	r0, #1
}
 8009cdc:	bd70      	pop	{r4, r5, r6, pc}

08009cde <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8009cde:	b510      	push	{r4, lr}
 8009ce0:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009ce2:	f7ff ff9c 	bl	8009c1e <f_sync>
	if (res == FR_OK)
 8009ce6:	b950      	cbnz	r0, 8009cfe <f_close+0x20>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f7fe ffaf 	bl	8008c4c <validate>
		if (res == FR_OK) {
 8009cee:	b930      	cbnz	r0, 8009cfe <f_close+0x20>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8009cf0:	f8d4 0228 	ldr.w	r0, [r4, #552]	; 0x228
 8009cf4:	f7fe ff34 	bl	8008b60 <dec_lock>
			if (res == FR_OK)
 8009cf8:	b908      	cbnz	r0, 8009cfe <f_close+0x20>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8009cfa:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8009cfe:	bd10      	pop	{r4, pc}

08009d00 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8009d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	4604      	mov	r4, r0
 8009d06:	460d      	mov	r5, r1
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8009d08:	f7fe ffa0 	bl	8008c4c <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009d0c:	4606      	mov	r6, r0
 8009d0e:	bb10      	cbnz	r0, 8009d56 <f_lseek+0x56>
	if (fp->err)						/* Check error */
 8009d10:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	f040 813e 	bne.w	8009f96 <f_lseek+0x296>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009d1a:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f000 8087 	beq.w	8009e32 <f_lseek+0x132>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009d24:	1c6a      	adds	r2, r5, #1
 8009d26:	d13d      	bne.n	8009da4 <f_lseek+0xa4>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
			cl = fp->sclust;			/* Top of the chain */
 8009d28:	f8d4 7210 	ldr.w	r7, [r4, #528]	; 0x210
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009d2c:	f8d3 b000 	ldr.w	fp, [r3]
 8009d30:	f103 0a04 	add.w	sl, r3, #4
 8009d34:	2502      	movs	r5, #2
			if (cl) {
 8009d36:	b35f      	cbz	r7, 8009d90 <f_lseek+0x90>
 8009d38:	46b8      	mov	r8, r7
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009d3a:	f04f 0900 	mov.w	r9, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(fp->fs, cl);
 8009d3e:	4641      	mov	r1, r8
 8009d40:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009d44:	f7ff f9cc 	bl	80090e0 <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8009d48:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 8009d4a:	f109 0901 	add.w	r9, r9, #1
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8009d4e:	d807      	bhi.n	8009d60 <f_lseek+0x60>
 8009d50:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009d52:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
 8009d56:	4630      	mov	r0, r6
 8009d58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d5c:	4607      	mov	r7, r0
 8009d5e:	e7eb      	b.n	8009d38 <f_lseek+0x38>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d101      	bne.n	8009d68 <f_lseek+0x68>
 8009d64:	2601      	movs	r6, #1
 8009d66:	e7f4      	b.n	8009d52 <f_lseek+0x52>
					} while (cl == pcl + 1);
 8009d68:	f108 0301 	add.w	r3, r8, #1
 8009d6c:	4298      	cmp	r0, r3
 8009d6e:	4680      	mov	r8, r0
 8009d70:	d0e5      	beq.n	8009d3e <f_lseek+0x3e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009d72:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009d74:	45ab      	cmp	fp, r5
						*tbl++ = ncl; *tbl++ = tcl;
 8009d76:	bf21      	itttt	cs
 8009d78:	4653      	movcs	r3, sl
 8009d7a:	f843 9b08 	strcs.w	r9, [r3], #8
 8009d7e:	f8ca 7004 	strcs.w	r7, [sl, #4]
 8009d82:	469a      	movcs	sl, r3
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8009d84:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8009d88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009d8c:	4298      	cmp	r0, r3
 8009d8e:	d3e5      	bcc.n	8009d5c <f_lseek+0x5c>
			*fp->cltbl = ulen;	/* Number of items used */
 8009d90:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
			if (ulen <= tlen)
 8009d94:	455d      	cmp	r5, fp
			*fp->cltbl = ulen;	/* Number of items used */
 8009d96:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen)
 8009d98:	f200 80ff 	bhi.w	8009f9a <f_lseek+0x29a>
				*tbl = 0;		/* Terminate table */
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	f8ca 3000 	str.w	r3, [sl]
 8009da2:	e7d8      	b.n	8009d56 <f_lseek+0x56>
 8009da4:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
 8009da8:	4285      	cmp	r5, r0
 8009daa:	bf28      	it	cs
 8009dac:	4605      	movcs	r5, r0
			fp->fptr = ofs;				/* Set file pointer */
 8009dae:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
			if (ofs) {
 8009db2:	2d00      	cmp	r5, #0
 8009db4:	d0cf      	beq.n	8009d56 <f_lseek+0x56>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009db6:	f105 38ff 	add.w	r8, r5, #4294967295
 8009dba:	4641      	mov	r1, r8
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	f7fe feeb 	bl	8008b98 <clmt_clust>
				dsc = clust2sect(fp->fs, fp->clust);
 8009dc2:	f8d4 7200 	ldr.w	r7, [r4, #512]	; 0x200
				fp->clust = clmt_clust(fp, ofs - 1);
 8009dc6:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
 8009dca:	4601      	mov	r1, r0
				dsc = clust2sect(fp->fs, fp->clust);
 8009dcc:	4638      	mov	r0, r7
 8009dce:	f7ff f979 	bl	80090c4 <clust2sect>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	d0bc      	beq.n	8009d50 <f_lseek+0x50>
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009dd6:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8009dda:	2d00      	cmp	r5, #0
 8009ddc:	d0bb      	beq.n	8009d56 <f_lseek+0x56>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8009dde:	f897 5202 	ldrb.w	r5, [r7, #514]	; 0x202
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009de2:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8009de6:	3d01      	subs	r5, #1
 8009de8:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 8009dec:	4405      	add	r5, r0
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009dee:	4295      	cmp	r5, r2
 8009df0:	d0b1      	beq.n	8009d56 <f_lseek+0x56>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8009df2:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009df6:	0659      	lsls	r1, r3, #25
 8009df8:	d50d      	bpl.n	8009e16 <f_lseek+0x116>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	4621      	mov	r1, r4
 8009dfe:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 8009e02:	f7fe fda1 	bl	8008948 <disk_write>
 8009e06:	2800      	cmp	r0, #0
 8009e08:	d1ac      	bne.n	8009d64 <f_lseek+0x64>
						fp->flag &= ~FA__DIRTY;
 8009e0a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e12:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8009e16:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	462a      	mov	r2, r5
 8009e1e:	4621      	mov	r1, r4
 8009e20:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8009e24:	f7fe fd82 	bl	800892c <disk_read>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	d19b      	bne.n	8009d64 <f_lseek+0x64>
					fp->dsect = dsc;
 8009e2c:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 8009e30:	e791      	b.n	8009d56 <f_lseek+0x56>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8009e32:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8009e36:	429d      	cmp	r5, r3
 8009e38:	d905      	bls.n	8009e46 <f_lseek+0x146>
			 && !(fp->flag & FA_WRITE)
 8009e3a:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 8009e3e:	f012 0f02 	tst.w	r2, #2
 8009e42:	bf08      	it	eq
 8009e44:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 8009e46:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8009e48:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
		fp->fptr = nsect = 0;
 8009e4c:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
		if (ofs) {
 8009e50:	2d00      	cmp	r5, #0
 8009e52:	d13e      	bne.n	8009ed2 <f_lseek+0x1d2>
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8009e54:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009e58:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	f67f af7a 	bls.w	8009d56 <f_lseek+0x56>
			fp->fsize = fp->fptr;
 8009e62:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8009e66:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009e6a:	f043 0320 	orr.w	r3, r3, #32
 8009e6e:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8009e72:	e770      	b.n	8009d56 <f_lseek+0x56>
		fp->fptr = nsect = 0;
 8009e74:	2500      	movs	r5, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8009e76:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d0e8      	beq.n	8009e54 <f_lseek+0x154>
 8009e82:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8009e86:	4295      	cmp	r5, r2
 8009e88:	d0e4      	beq.n	8009e54 <f_lseek+0x154>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8009e8a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009e8e:	065b      	lsls	r3, r3, #25
 8009e90:	d510      	bpl.n	8009eb4 <f_lseek+0x1b4>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009e92:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009e96:	2301      	movs	r3, #1
 8009e98:	4621      	mov	r1, r4
 8009e9a:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8009e9e:	f7fe fd53 	bl	8008948 <disk_write>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	f47f af5e 	bne.w	8009d64 <f_lseek+0x64>
				fp->flag &= ~FA__DIRTY;
 8009ea8:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eb0:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8009eb4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009eb8:	2301      	movs	r3, #1
 8009eba:	462a      	mov	r2, r5
 8009ebc:	4621      	mov	r1, r4
 8009ebe:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8009ec2:	f7fe fd33 	bl	800892c <disk_read>
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	f47f af4c 	bne.w	8009d64 <f_lseek+0x64>
			fp->dsect = nsect;
 8009ecc:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 8009ed0:	e7c0      	b.n	8009e54 <f_lseek+0x154>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8009ed2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009ed6:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 8009eda:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 8009edc:	b32b      	cbz	r3, 8009f2a <f_lseek+0x22a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	1e6a      	subs	r2, r5, #1
 8009ee2:	fbb3 f1f7 	udiv	r1, r3, r7
 8009ee6:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 8009eea:	428a      	cmp	r2, r1
 8009eec:	d31d      	bcc.n	8009f2a <f_lseek+0x22a>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009eee:	427a      	negs	r2, r7
 8009ef0:	4013      	ands	r3, r2
				clst = fp->clust;
 8009ef2:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009ef6:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				ofs -= fp->fptr;
 8009efa:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 8009efc:	2900      	cmp	r1, #0
 8009efe:	d0b9      	beq.n	8009e74 <f_lseek+0x174>
				while (ofs > bcs) {						/* Cluster following loop */
 8009f00:	42bd      	cmp	r5, r7
 8009f02:	d823      	bhi.n	8009f4c <f_lseek+0x24c>
				fp->fptr += ofs;
 8009f04:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009f08:	442b      	add	r3, r5
 8009f0a:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8009f0e:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d0ae      	beq.n	8009e74 <f_lseek+0x174>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8009f16:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009f1a:	f7ff f8d3 	bl	80090c4 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	f43f af16 	beq.w	8009d50 <f_lseek+0x50>
					nsect += ofs / SS(fp->fs);
 8009f24:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 8009f28:	e7a5      	b.n	8009e76 <f_lseek+0x176>
				clst = fp->sclust;						/* start from the first cluster */
 8009f2a:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009f2e:	b951      	cbnz	r1, 8009f46 <f_lseek+0x246>
					clst = create_chain(fp->fs, 0);
 8009f30:	f7ff fa21 	bl	8009376 <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009f34:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 8009f36:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009f38:	f43f af0a 	beq.w	8009d50 <f_lseek+0x50>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009f3c:	1c42      	adds	r2, r0, #1
 8009f3e:	f43f af11 	beq.w	8009d64 <f_lseek+0x64>
					fp->sclust = clst;
 8009f42:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
				fp->clust = clst;
 8009f46:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
 8009f4a:	e7d7      	b.n	8009efc <f_lseek+0x1fc>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009f4c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8009f50:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009f54:	079b      	lsls	r3, r3, #30
 8009f56:	d505      	bpl.n	8009f64 <f_lseek+0x264>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8009f58:	f7ff fa0d 	bl	8009376 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 8009f5c:	4601      	mov	r1, r0
 8009f5e:	b920      	cbnz	r0, 8009f6a <f_lseek+0x26a>
 8009f60:	463d      	mov	r5, r7
 8009f62:	e7cf      	b.n	8009f04 <f_lseek+0x204>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8009f64:	f7ff f8bc 	bl	80090e0 <get_fat>
 8009f68:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009f6a:	1c4a      	adds	r2, r1, #1
 8009f6c:	f43f aefa 	beq.w	8009d64 <f_lseek+0x64>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8009f70:	2901      	cmp	r1, #1
 8009f72:	f67f aeed 	bls.w	8009d50 <f_lseek+0x50>
 8009f76:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8009f7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f7e:	4299      	cmp	r1, r3
 8009f80:	f4bf aee6 	bcs.w	8009d50 <f_lseek+0x50>
					fp->fptr += bcs;
 8009f84:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
					fp->clust = clst;
 8009f88:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
					fp->fptr += bcs;
 8009f8c:	443b      	add	r3, r7
 8009f8e:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
					ofs -= bcs;
 8009f92:	1bed      	subs	r5, r5, r7
 8009f94:	e7b4      	b.n	8009f00 <f_lseek+0x200>
 8009f96:	461e      	mov	r6, r3
 8009f98:	e6dd      	b.n	8009d56 <f_lseek+0x56>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009f9a:	2611      	movs	r6, #17
 8009f9c:	e6db      	b.n	8009d56 <f_lseek+0x56>

08009f9e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009f9e:	b530      	push	{r4, r5, lr}
 8009fa0:	b087      	sub	sp, #28
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8009fa2:	4605      	mov	r5, r0
{
 8009fa4:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d045      	beq.n	800a036 <f_opendir+0x98>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8009faa:	2200      	movs	r2, #0
 8009fac:	a901      	add	r1, sp, #4
 8009fae:	a802      	add	r0, sp, #8
 8009fb0:	f7fe ff48 	bl	8008e44 <find_volume>
	if (res == FR_OK) {
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	bb30      	cbnz	r0, 800a006 <f_opendir+0x68>
		dp->fs = fs;
 8009fb8:	9b02      	ldr	r3, [sp, #8]
 8009fba:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
		INIT_BUF(*dp);
 8009fbe:	ab03      	add	r3, sp, #12
 8009fc0:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8009fc4:	9901      	ldr	r1, [sp, #4]
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	f7ff fabe 	bl	8009548 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8009fcc:	4604      	mov	r4, r0
 8009fce:	b9b8      	cbnz	r0, 800a000 <f_opendir+0x62>
			if (dp->dir) {						/* It is not the origin directory itself */
 8009fd0:	f8d5 1214 	ldr.w	r1, [r5, #532]	; 0x214
 8009fd4:	b149      	cbz	r1, 8009fea <f_opendir+0x4c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8009fd6:	7acb      	ldrb	r3, [r1, #11]
 8009fd8:	06db      	lsls	r3, r3, #27
 8009fda:	d528      	bpl.n	800a02e <f_opendir+0x90>
					dp->sclust = ld_clust(fs, dp->dir);
 8009fdc:	9b02      	ldr	r3, [sp, #8]
 8009fde:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8009fe2:	f7fe fe4a 	bl	8008c7a <ld_clust.isra.0>
 8009fe6:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
				else							/* The object is a file */
					res = FR_NO_PATH;
			}
			if (res == FR_OK) {
				dp->id = fs->id;
 8009fea:	9b02      	ldr	r3, [sp, #8]
 8009fec:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8009ff0:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	f7ff f8d3 	bl	80091a2 <dir_sdi>
#if _FS_LOCK
				if (res == FR_OK) {
 8009ffc:	4604      	mov	r4, r0
 8009ffe:	b130      	cbz	r0, 800a00e <f_opendir+0x70>
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a000:	2c04      	cmp	r4, #4
 800a002:	bf08      	it	eq
 800a004:	2405      	moveq	r4, #5
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800a006:	2300      	movs	r3, #0
 800a008:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
 800a00c:	e009      	b.n	800a022 <f_opendir+0x84>
					if (dp->sclust) {
 800a00e:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 800a012:	b14b      	cbz	r3, 800a028 <f_opendir+0x8a>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800a014:	4621      	mov	r1, r4
 800a016:	4628      	mov	r0, r5
 800a018:	f7fe fd5e 	bl	8008ad8 <inc_lock>
 800a01c:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
						if (!dp->lockid)
 800a020:	b138      	cbz	r0, 800a032 <f_opendir+0x94>

	LEAVE_FF(fs, res);
}
 800a022:	4620      	mov	r0, r4
 800a024:	b007      	add	sp, #28
 800a026:	bd30      	pop	{r4, r5, pc}
						dp->lockid = 0;	/* Root directory need not to be locked */
 800a028:	f8c5 421c 	str.w	r4, [r5, #540]	; 0x21c
 800a02c:	e7f9      	b.n	800a022 <f_opendir+0x84>
					res = FR_NO_PATH;
 800a02e:	2405      	movs	r4, #5
 800a030:	e7e9      	b.n	800a006 <f_opendir+0x68>
							res = FR_TOO_MANY_OPEN_FILES;
 800a032:	2412      	movs	r4, #18
 800a034:	e7e7      	b.n	800a006 <f_opendir+0x68>
	if (!dp) return FR_INVALID_OBJECT;
 800a036:	2409      	movs	r4, #9
 800a038:	e7f3      	b.n	800a022 <f_opendir+0x84>

0800a03a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a03a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a03c:	4605      	mov	r5, r0
 800a03e:	460e      	mov	r6, r1
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 800a040:	f7fe fe04 	bl	8008c4c <validate>
	if (res == FR_OK) {
 800a044:	4604      	mov	r4, r0
 800a046:	b9e8      	cbnz	r0, 800a084 <f_readdir+0x4a>
		if (!fno) {
 800a048:	b92e      	cbnz	r6, 800a056 <f_readdir+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a04a:	4601      	mov	r1, r0
 800a04c:	4628      	mov	r0, r5
 800a04e:	f7ff f8a8 	bl	80091a2 <dir_sdi>
 800a052:	4604      	mov	r4, r0
 800a054:	e016      	b.n	800a084 <f_readdir+0x4a>
		} else {
			INIT_BUF(*dp);
 800a056:	ab01      	add	r3, sp, #4
 800a058:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 800a05c:	4628      	mov	r0, r5
 800a05e:	f7ff fb47 	bl	80096f0 <dir_read.constprop.13>
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800a062:	2804      	cmp	r0, #4
 800a064:	d111      	bne.n	800a08a <f_readdir+0x50>
				dp->sect = 0;
 800a066:	f8c5 4210 	str.w	r4, [r5, #528]	; 0x210
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
 800a06a:	4631      	mov	r1, r6
 800a06c:	4628      	mov	r0, r5
 800a06e:	f7fe fda7 	bl	8008bc0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a072:	2100      	movs	r1, #0
 800a074:	4628      	mov	r0, r5
 800a076:	f7ff f9d7 	bl	8009428 <dir_next>
				if (res == FR_NO_FILE) {
 800a07a:	2804      	cmp	r0, #4
 800a07c:	d1e9      	bne.n	800a052 <f_readdir+0x18>
					dp->sect = 0;
 800a07e:	2300      	movs	r3, #0
 800a080:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
}
 800a084:	4620      	mov	r0, r4
 800a086:	b004      	add	sp, #16
 800a088:	bd70      	pop	{r4, r5, r6, pc}
			if (res == FR_OK) {				/* A valid entry is found */
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d1e1      	bne.n	800a052 <f_readdir+0x18>
 800a08e:	e7ec      	b.n	800a06a <f_readdir+0x30>

0800a090 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800a090:	b530      	push	{r4, r5, lr}
 800a092:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
	DWORD dclst = 0;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 800a096:	2201      	movs	r2, #1
{
 800a098:	9001      	str	r0, [sp, #4]
	res = find_volume(&dj.fs, &path, 1);
 800a09a:	a901      	add	r1, sp, #4
 800a09c:	a886      	add	r0, sp, #536	; 0x218
 800a09e:	f7fe fed1 	bl	8008e44 <find_volume>
	if (res == FR_OK) {
 800a0a2:	b988      	cbnz	r0, 800a0c8 <f_unlink+0x38>
		INIT_BUF(dj);
 800a0a4:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);		/* Follow the file path */
 800a0a6:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800a0a8:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);		/* Follow the file path */
 800a0aa:	a806      	add	r0, sp, #24
 800a0ac:	f7ff fa4c 	bl	8009548 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
 800a0b0:	b950      	cbnz	r0, 800a0c8 <f_unlink+0x38>
 800a0b2:	2102      	movs	r1, #2
 800a0b4:	a806      	add	r0, sp, #24
 800a0b6:	f7fe fcdd 	bl	8008a74 <chk_lock>
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800a0ba:	b928      	cbnz	r0, 800a0c8 <f_unlink+0x38>
			dir = dj.dir;
 800a0bc:	998b      	ldr	r1, [sp, #556]	; 0x22c
			if (!dir) {
 800a0be:	b169      	cbz	r1, 800a0dc <f_unlink+0x4c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 800a0c0:	7acd      	ldrb	r5, [r1, #11]
 800a0c2:	07ea      	lsls	r2, r5, #31
 800a0c4:	d50c      	bpl.n	800a0e0 <f_unlink+0x50>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800a0c6:	2007      	movs	r0, #7
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
 800a0c8:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c
 800a0cc:	bd30      	pop	{r4, r5, pc}
					res = remove_chain(dj.fs, dclst);
 800a0ce:	4621      	mov	r1, r4
 800a0d0:	9886      	ldr	r0, [sp, #536]	; 0x218
 800a0d2:	f7ff fb74 	bl	80097be <remove_chain>
				if (res == FR_OK) res = sync_fs(dj.fs);
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d1f6      	bne.n	800a0c8 <f_unlink+0x38>
 800a0da:	e026      	b.n	800a12a <f_unlink+0x9a>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800a0dc:	2006      	movs	r0, #6
 800a0de:	e7f3      	b.n	800a0c8 <f_unlink+0x38>
				dclst = ld_clust(dj.fs, dir);
 800a0e0:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800a0e2:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800a0e6:	f7fe fdc8 	bl	8008c7a <ld_clust.isra.0>
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	b1b0      	cbz	r0, 800a11c <f_unlink+0x8c>
 800a0ee:	06eb      	lsls	r3, r5, #27
 800a0f0:	d514      	bpl.n	800a11c <f_unlink+0x8c>
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 800a0f2:	a906      	add	r1, sp, #24
 800a0f4:	a88e      	add	r0, sp, #568	; 0x238
 800a0f6:	f44f 7208 	mov.w	r2, #544	; 0x220
 800a0fa:	f7fe fca9 	bl	8008a50 <mem_cpy>
						res = dir_sdi(&sdj, 2);
 800a0fe:	2102      	movs	r1, #2
 800a100:	a88e      	add	r0, sp, #568	; 0x238
						sdj.sclust = dclst;
 800a102:	f8cd 4440 	str.w	r4, [sp, #1088]	; 0x440
						res = dir_sdi(&sdj, 2);
 800a106:	f7ff f84c 	bl	80091a2 <dir_sdi>
						if (res == FR_OK) {
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d1dc      	bne.n	800a0c8 <f_unlink+0x38>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 800a10e:	a88e      	add	r0, sp, #568	; 0x238
 800a110:	f7ff faee 	bl	80096f0 <dir_read.constprop.13>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 800a114:	2800      	cmp	r0, #0
 800a116:	d0d6      	beq.n	800a0c6 <f_unlink+0x36>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 800a118:	2804      	cmp	r0, #4
 800a11a:	d1d5      	bne.n	800a0c8 <f_unlink+0x38>
				res = dir_remove(&dj);		/* Remove the directory entry */
 800a11c:	a806      	add	r0, sp, #24
 800a11e:	f7ff f88f 	bl	8009240 <dir_remove>
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 800a122:	2800      	cmp	r0, #0
 800a124:	d1d0      	bne.n	800a0c8 <f_unlink+0x38>
 800a126:	2c00      	cmp	r4, #0
 800a128:	d1d1      	bne.n	800a0ce <f_unlink+0x3e>
				if (res == FR_OK) res = sync_fs(dj.fs);
 800a12a:	9886      	ldr	r0, [sp, #536]	; 0x218
 800a12c:	f7fe fde3 	bl	8008cf6 <sync_fs>
 800a130:	e7ca      	b.n	800a0c8 <f_unlink+0x38>

0800a132 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the time stamp to be set */
)
{
 800a132:	b510      	push	{r4, lr}
 800a134:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800a138:	460c      	mov	r4, r1
 800a13a:	9001      	str	r0, [sp, #4]
	BYTE *dir;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 800a13c:	2201      	movs	r2, #1
 800a13e:	a901      	add	r1, sp, #4
 800a140:	a886      	add	r0, sp, #536	; 0x218
 800a142:	f7fe fe7f 	bl	8008e44 <find_volume>
	if (res == FR_OK) {
 800a146:	b9c0      	cbnz	r0, 800a17a <f_utime+0x48>
		INIT_BUF(dj);
 800a148:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 800a14a:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800a14c:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 800a14e:	a806      	add	r0, sp, #24
 800a150:	f7ff f9fa 	bl	8009548 <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
 800a154:	b988      	cbnz	r0, 800a17a <f_utime+0x48>
			dir = dj.dir;
 800a156:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
			if (!dir) {					/* Root directory */
 800a158:	b193      	cbz	r3, 800a180 <f_utime+0x4e>
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir + DIR_WrtTime, fno->ftime);
 800a15a:	88e2      	ldrh	r2, [r4, #6]
 800a15c:	759a      	strb	r2, [r3, #22]
 800a15e:	88e2      	ldrh	r2, [r4, #6]
 800a160:	0a12      	lsrs	r2, r2, #8
 800a162:	75da      	strb	r2, [r3, #23]
				ST_WORD(dir + DIR_WrtDate, fno->fdate);
 800a164:	88a2      	ldrh	r2, [r4, #4]
 800a166:	761a      	strb	r2, [r3, #24]
 800a168:	88a2      	ldrh	r2, [r4, #4]
 800a16a:	0a12      	lsrs	r2, r2, #8
 800a16c:	765a      	strb	r2, [r3, #25]
				dj.fs->wflag = 1;
 800a16e:	9886      	ldr	r0, [sp, #536]	; 0x218
 800a170:	2301      	movs	r3, #1
 800a172:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
				res = sync_fs(dj.fs);
 800a176:	f7fe fdbe 	bl	8008cf6 <sync_fs>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
 800a17a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800a17e:	bd10      	pop	{r4, pc}
				res = FR_INVALID_NAME;
 800a180:	2006      	movs	r0, #6
 800a182:	e7fa      	b.n	800a17a <f_utime+0x48>

0800a184 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a184:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 800a186:	4b0f      	ldr	r3, [pc, #60]	; (800a1c4 <FATFS_LinkDriverEx+0x40>)
 800a188:	7a5c      	ldrb	r4, [r3, #9]
 800a18a:	2c01      	cmp	r4, #1
 800a18c:	d818      	bhi.n	800a1c0 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a18e:	7a5d      	ldrb	r5, [r3, #9]
 800a190:	b2ed      	uxtb	r5, r5
 800a192:	2400      	movs	r4, #0
 800a194:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 800a196:	7a5d      	ldrb	r5, [r3, #9]
 800a198:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a19c:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 800a19e:	7a58      	ldrb	r0, [r3, #9]
 800a1a0:	4418      	add	r0, r3
 800a1a2:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800a1a4:	7a5a      	ldrb	r2, [r3, #9]
 800a1a6:	b2d2      	uxtb	r2, r2
 800a1a8:	1c50      	adds	r0, r2, #1
 800a1aa:	b2c0      	uxtb	r0, r0
 800a1ac:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 800a1ae:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800a1b0:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 800a1b2:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800a1b4:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800a1b6:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800a1b8:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800a1ba:	70cc      	strb	r4, [r1, #3]
 800a1bc:	4620      	mov	r0, r4
 800a1be:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800a1c0:	2001      	movs	r0, #1
    ret = 0;
  }
  
  return ret;
}
 800a1c2:	bd30      	pop	{r4, r5, pc}
 800a1c4:	200005ac 	.word	0x200005ac

0800a1c8 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f7ff bfdb 	b.w	800a184 <FATFS_LinkDriverEx>
	...

0800a1d0 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{ 
  uint8_t DiskNum = 0;
  uint8_t ret = 1;
  
  if(disk.nbr >= 1)
 800a1d0:	4a0a      	ldr	r2, [pc, #40]	; (800a1fc <FATFS_UnLinkDriverEx+0x2c>)
 800a1d2:	7a53      	ldrb	r3, [r2, #9]
 800a1d4:	b17b      	cbz	r3, 800a1f6 <FATFS_UnLinkDriverEx+0x26>
  {    
    DiskNum = path[0] - '0';
 800a1d6:	7803      	ldrb	r3, [r0, #0]
 800a1d8:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800a1e0:	6848      	ldr	r0, [r1, #4]
 800a1e2:	b140      	cbz	r0, 800a1f6 <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 800a1e4:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 800a1e6:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 800a1e8:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 800a1ea:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 800a1ec:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	7253      	strb	r3, [r2, #9]
 800a1f4:	4770      	bx	lr
  uint8_t ret = 1;
 800a1f6:	2001      	movs	r0, #1
      ret = 0;
    }
  }
  
  return ret;
}
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	200005ac 	.word	0x200005ac

0800a200 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path  
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{ 
  return FATFS_UnLinkDriverEx(path, 0);
 800a200:	2100      	movs	r1, #0
 800a202:	f7ff bfe5 	b.w	800a1d0 <FATFS_UnLinkDriverEx>
	...

0800a208 <__libc_init_array>:
 800a208:	b570      	push	{r4, r5, r6, lr}
 800a20a:	4e0d      	ldr	r6, [pc, #52]	; (800a240 <__libc_init_array+0x38>)
 800a20c:	4c0d      	ldr	r4, [pc, #52]	; (800a244 <__libc_init_array+0x3c>)
 800a20e:	1ba4      	subs	r4, r4, r6
 800a210:	10a4      	asrs	r4, r4, #2
 800a212:	2500      	movs	r5, #0
 800a214:	42a5      	cmp	r5, r4
 800a216:	d109      	bne.n	800a22c <__libc_init_array+0x24>
 800a218:	4e0b      	ldr	r6, [pc, #44]	; (800a248 <__libc_init_array+0x40>)
 800a21a:	4c0c      	ldr	r4, [pc, #48]	; (800a24c <__libc_init_array+0x44>)
 800a21c:	f001 f96c 	bl	800b4f8 <_init>
 800a220:	1ba4      	subs	r4, r4, r6
 800a222:	10a4      	asrs	r4, r4, #2
 800a224:	2500      	movs	r5, #0
 800a226:	42a5      	cmp	r5, r4
 800a228:	d105      	bne.n	800a236 <__libc_init_array+0x2e>
 800a22a:	bd70      	pop	{r4, r5, r6, pc}
 800a22c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a230:	4798      	blx	r3
 800a232:	3501      	adds	r5, #1
 800a234:	e7ee      	b.n	800a214 <__libc_init_array+0xc>
 800a236:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a23a:	4798      	blx	r3
 800a23c:	3501      	adds	r5, #1
 800a23e:	e7f2      	b.n	800a226 <__libc_init_array+0x1e>
 800a240:	0800ba24 	.word	0x0800ba24
 800a244:	0800ba24 	.word	0x0800ba24
 800a248:	0800ba24 	.word	0x0800ba24
 800a24c:	0800ba28 	.word	0x0800ba28

0800a250 <malloc>:
 800a250:	4b02      	ldr	r3, [pc, #8]	; (800a25c <malloc+0xc>)
 800a252:	4601      	mov	r1, r0
 800a254:	6818      	ldr	r0, [r3, #0]
 800a256:	f000 b86d 	b.w	800a334 <_malloc_r>
 800a25a:	bf00      	nop
 800a25c:	2000029c 	.word	0x2000029c

0800a260 <free>:
 800a260:	4b02      	ldr	r3, [pc, #8]	; (800a26c <free+0xc>)
 800a262:	4601      	mov	r1, r0
 800a264:	6818      	ldr	r0, [r3, #0]
 800a266:	f000 b817 	b.w	800a298 <_free_r>
 800a26a:	bf00      	nop
 800a26c:	2000029c 	.word	0x2000029c

0800a270 <memcpy>:
 800a270:	b510      	push	{r4, lr}
 800a272:	1e43      	subs	r3, r0, #1
 800a274:	440a      	add	r2, r1
 800a276:	4291      	cmp	r1, r2
 800a278:	d100      	bne.n	800a27c <memcpy+0xc>
 800a27a:	bd10      	pop	{r4, pc}
 800a27c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a280:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a284:	e7f7      	b.n	800a276 <memcpy+0x6>

0800a286 <memset>:
 800a286:	4402      	add	r2, r0
 800a288:	4603      	mov	r3, r0
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d100      	bne.n	800a290 <memset+0xa>
 800a28e:	4770      	bx	lr
 800a290:	f803 1b01 	strb.w	r1, [r3], #1
 800a294:	e7f9      	b.n	800a28a <memset+0x4>
	...

0800a298 <_free_r>:
 800a298:	b538      	push	{r3, r4, r5, lr}
 800a29a:	4605      	mov	r5, r0
 800a29c:	2900      	cmp	r1, #0
 800a29e:	d045      	beq.n	800a32c <_free_r+0x94>
 800a2a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2a4:	1f0c      	subs	r4, r1, #4
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	bfb8      	it	lt
 800a2aa:	18e4      	addlt	r4, r4, r3
 800a2ac:	f000 f923 	bl	800a4f6 <__malloc_lock>
 800a2b0:	4a1f      	ldr	r2, [pc, #124]	; (800a330 <_free_r+0x98>)
 800a2b2:	6813      	ldr	r3, [r2, #0]
 800a2b4:	4610      	mov	r0, r2
 800a2b6:	b933      	cbnz	r3, 800a2c6 <_free_r+0x2e>
 800a2b8:	6063      	str	r3, [r4, #4]
 800a2ba:	6014      	str	r4, [r2, #0]
 800a2bc:	4628      	mov	r0, r5
 800a2be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2c2:	f000 b919 	b.w	800a4f8 <__malloc_unlock>
 800a2c6:	42a3      	cmp	r3, r4
 800a2c8:	d90c      	bls.n	800a2e4 <_free_r+0x4c>
 800a2ca:	6821      	ldr	r1, [r4, #0]
 800a2cc:	1862      	adds	r2, r4, r1
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	bf04      	itt	eq
 800a2d2:	681a      	ldreq	r2, [r3, #0]
 800a2d4:	685b      	ldreq	r3, [r3, #4]
 800a2d6:	6063      	str	r3, [r4, #4]
 800a2d8:	bf04      	itt	eq
 800a2da:	1852      	addeq	r2, r2, r1
 800a2dc:	6022      	streq	r2, [r4, #0]
 800a2de:	6004      	str	r4, [r0, #0]
 800a2e0:	e7ec      	b.n	800a2bc <_free_r+0x24>
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	685a      	ldr	r2, [r3, #4]
 800a2e6:	b10a      	cbz	r2, 800a2ec <_free_r+0x54>
 800a2e8:	42a2      	cmp	r2, r4
 800a2ea:	d9fa      	bls.n	800a2e2 <_free_r+0x4a>
 800a2ec:	6819      	ldr	r1, [r3, #0]
 800a2ee:	1858      	adds	r0, r3, r1
 800a2f0:	42a0      	cmp	r0, r4
 800a2f2:	d10b      	bne.n	800a30c <_free_r+0x74>
 800a2f4:	6820      	ldr	r0, [r4, #0]
 800a2f6:	4401      	add	r1, r0
 800a2f8:	1858      	adds	r0, r3, r1
 800a2fa:	4282      	cmp	r2, r0
 800a2fc:	6019      	str	r1, [r3, #0]
 800a2fe:	d1dd      	bne.n	800a2bc <_free_r+0x24>
 800a300:	6810      	ldr	r0, [r2, #0]
 800a302:	6852      	ldr	r2, [r2, #4]
 800a304:	605a      	str	r2, [r3, #4]
 800a306:	4401      	add	r1, r0
 800a308:	6019      	str	r1, [r3, #0]
 800a30a:	e7d7      	b.n	800a2bc <_free_r+0x24>
 800a30c:	d902      	bls.n	800a314 <_free_r+0x7c>
 800a30e:	230c      	movs	r3, #12
 800a310:	602b      	str	r3, [r5, #0]
 800a312:	e7d3      	b.n	800a2bc <_free_r+0x24>
 800a314:	6820      	ldr	r0, [r4, #0]
 800a316:	1821      	adds	r1, r4, r0
 800a318:	428a      	cmp	r2, r1
 800a31a:	bf04      	itt	eq
 800a31c:	6811      	ldreq	r1, [r2, #0]
 800a31e:	6852      	ldreq	r2, [r2, #4]
 800a320:	6062      	str	r2, [r4, #4]
 800a322:	bf04      	itt	eq
 800a324:	1809      	addeq	r1, r1, r0
 800a326:	6021      	streq	r1, [r4, #0]
 800a328:	605c      	str	r4, [r3, #4]
 800a32a:	e7c7      	b.n	800a2bc <_free_r+0x24>
 800a32c:	bd38      	pop	{r3, r4, r5, pc}
 800a32e:	bf00      	nop
 800a330:	200005b8 	.word	0x200005b8

0800a334 <_malloc_r>:
 800a334:	b570      	push	{r4, r5, r6, lr}
 800a336:	1ccd      	adds	r5, r1, #3
 800a338:	f025 0503 	bic.w	r5, r5, #3
 800a33c:	3508      	adds	r5, #8
 800a33e:	2d0c      	cmp	r5, #12
 800a340:	bf38      	it	cc
 800a342:	250c      	movcc	r5, #12
 800a344:	2d00      	cmp	r5, #0
 800a346:	4606      	mov	r6, r0
 800a348:	db01      	blt.n	800a34e <_malloc_r+0x1a>
 800a34a:	42a9      	cmp	r1, r5
 800a34c:	d903      	bls.n	800a356 <_malloc_r+0x22>
 800a34e:	230c      	movs	r3, #12
 800a350:	6033      	str	r3, [r6, #0]
 800a352:	2000      	movs	r0, #0
 800a354:	bd70      	pop	{r4, r5, r6, pc}
 800a356:	f000 f8ce 	bl	800a4f6 <__malloc_lock>
 800a35a:	4a23      	ldr	r2, [pc, #140]	; (800a3e8 <_malloc_r+0xb4>)
 800a35c:	6814      	ldr	r4, [r2, #0]
 800a35e:	4621      	mov	r1, r4
 800a360:	b991      	cbnz	r1, 800a388 <_malloc_r+0x54>
 800a362:	4c22      	ldr	r4, [pc, #136]	; (800a3ec <_malloc_r+0xb8>)
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	b91b      	cbnz	r3, 800a370 <_malloc_r+0x3c>
 800a368:	4630      	mov	r0, r6
 800a36a:	f000 f841 	bl	800a3f0 <_sbrk_r>
 800a36e:	6020      	str	r0, [r4, #0]
 800a370:	4629      	mov	r1, r5
 800a372:	4630      	mov	r0, r6
 800a374:	f000 f83c 	bl	800a3f0 <_sbrk_r>
 800a378:	1c43      	adds	r3, r0, #1
 800a37a:	d126      	bne.n	800a3ca <_malloc_r+0x96>
 800a37c:	230c      	movs	r3, #12
 800a37e:	6033      	str	r3, [r6, #0]
 800a380:	4630      	mov	r0, r6
 800a382:	f000 f8b9 	bl	800a4f8 <__malloc_unlock>
 800a386:	e7e4      	b.n	800a352 <_malloc_r+0x1e>
 800a388:	680b      	ldr	r3, [r1, #0]
 800a38a:	1b5b      	subs	r3, r3, r5
 800a38c:	d41a      	bmi.n	800a3c4 <_malloc_r+0x90>
 800a38e:	2b0b      	cmp	r3, #11
 800a390:	d90f      	bls.n	800a3b2 <_malloc_r+0x7e>
 800a392:	600b      	str	r3, [r1, #0]
 800a394:	50cd      	str	r5, [r1, r3]
 800a396:	18cc      	adds	r4, r1, r3
 800a398:	4630      	mov	r0, r6
 800a39a:	f000 f8ad 	bl	800a4f8 <__malloc_unlock>
 800a39e:	f104 000b 	add.w	r0, r4, #11
 800a3a2:	1d23      	adds	r3, r4, #4
 800a3a4:	f020 0007 	bic.w	r0, r0, #7
 800a3a8:	1ac3      	subs	r3, r0, r3
 800a3aa:	d01b      	beq.n	800a3e4 <_malloc_r+0xb0>
 800a3ac:	425a      	negs	r2, r3
 800a3ae:	50e2      	str	r2, [r4, r3]
 800a3b0:	bd70      	pop	{r4, r5, r6, pc}
 800a3b2:	428c      	cmp	r4, r1
 800a3b4:	bf0d      	iteet	eq
 800a3b6:	6863      	ldreq	r3, [r4, #4]
 800a3b8:	684b      	ldrne	r3, [r1, #4]
 800a3ba:	6063      	strne	r3, [r4, #4]
 800a3bc:	6013      	streq	r3, [r2, #0]
 800a3be:	bf18      	it	ne
 800a3c0:	460c      	movne	r4, r1
 800a3c2:	e7e9      	b.n	800a398 <_malloc_r+0x64>
 800a3c4:	460c      	mov	r4, r1
 800a3c6:	6849      	ldr	r1, [r1, #4]
 800a3c8:	e7ca      	b.n	800a360 <_malloc_r+0x2c>
 800a3ca:	1cc4      	adds	r4, r0, #3
 800a3cc:	f024 0403 	bic.w	r4, r4, #3
 800a3d0:	42a0      	cmp	r0, r4
 800a3d2:	d005      	beq.n	800a3e0 <_malloc_r+0xac>
 800a3d4:	1a21      	subs	r1, r4, r0
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f000 f80a 	bl	800a3f0 <_sbrk_r>
 800a3dc:	3001      	adds	r0, #1
 800a3de:	d0cd      	beq.n	800a37c <_malloc_r+0x48>
 800a3e0:	6025      	str	r5, [r4, #0]
 800a3e2:	e7d9      	b.n	800a398 <_malloc_r+0x64>
 800a3e4:	bd70      	pop	{r4, r5, r6, pc}
 800a3e6:	bf00      	nop
 800a3e8:	200005b8 	.word	0x200005b8
 800a3ec:	200005bc 	.word	0x200005bc

0800a3f0 <_sbrk_r>:
 800a3f0:	b538      	push	{r3, r4, r5, lr}
 800a3f2:	4c06      	ldr	r4, [pc, #24]	; (800a40c <_sbrk_r+0x1c>)
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	4605      	mov	r5, r0
 800a3f8:	4608      	mov	r0, r1
 800a3fa:	6023      	str	r3, [r4, #0]
 800a3fc:	f001 f86e 	bl	800b4dc <_sbrk>
 800a400:	1c43      	adds	r3, r0, #1
 800a402:	d102      	bne.n	800a40a <_sbrk_r+0x1a>
 800a404:	6823      	ldr	r3, [r4, #0]
 800a406:	b103      	cbz	r3, 800a40a <_sbrk_r+0x1a>
 800a408:	602b      	str	r3, [r5, #0]
 800a40a:	bd38      	pop	{r3, r4, r5, pc}
 800a40c:	2000ad44 	.word	0x2000ad44

0800a410 <siprintf>:
 800a410:	b40e      	push	{r1, r2, r3}
 800a412:	b500      	push	{lr}
 800a414:	b09c      	sub	sp, #112	; 0x70
 800a416:	f44f 7102 	mov.w	r1, #520	; 0x208
 800a41a:	ab1d      	add	r3, sp, #116	; 0x74
 800a41c:	f8ad 1014 	strh.w	r1, [sp, #20]
 800a420:	9002      	str	r0, [sp, #8]
 800a422:	9006      	str	r0, [sp, #24]
 800a424:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a428:	480a      	ldr	r0, [pc, #40]	; (800a454 <siprintf+0x44>)
 800a42a:	9104      	str	r1, [sp, #16]
 800a42c:	9107      	str	r1, [sp, #28]
 800a42e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a432:	f853 2b04 	ldr.w	r2, [r3], #4
 800a436:	f8ad 1016 	strh.w	r1, [sp, #22]
 800a43a:	6800      	ldr	r0, [r0, #0]
 800a43c:	9301      	str	r3, [sp, #4]
 800a43e:	a902      	add	r1, sp, #8
 800a440:	f000 f8b6 	bl	800a5b0 <_svfiprintf_r>
 800a444:	9b02      	ldr	r3, [sp, #8]
 800a446:	2200      	movs	r2, #0
 800a448:	701a      	strb	r2, [r3, #0]
 800a44a:	b01c      	add	sp, #112	; 0x70
 800a44c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a450:	b003      	add	sp, #12
 800a452:	4770      	bx	lr
 800a454:	2000029c 	.word	0x2000029c

0800a458 <siscanf>:
 800a458:	b40e      	push	{r1, r2, r3}
 800a45a:	b530      	push	{r4, r5, lr}
 800a45c:	b09c      	sub	sp, #112	; 0x70
 800a45e:	ac1f      	add	r4, sp, #124	; 0x7c
 800a460:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a464:	f854 5b04 	ldr.w	r5, [r4], #4
 800a468:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a46c:	9002      	str	r0, [sp, #8]
 800a46e:	9006      	str	r0, [sp, #24]
 800a470:	f7f5 feae 	bl	80001d0 <strlen>
 800a474:	4b0b      	ldr	r3, [pc, #44]	; (800a4a4 <siscanf+0x4c>)
 800a476:	9003      	str	r0, [sp, #12]
 800a478:	9007      	str	r0, [sp, #28]
 800a47a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a47c:	480a      	ldr	r0, [pc, #40]	; (800a4a8 <siscanf+0x50>)
 800a47e:	9401      	str	r4, [sp, #4]
 800a480:	2300      	movs	r3, #0
 800a482:	930f      	str	r3, [sp, #60]	; 0x3c
 800a484:	9314      	str	r3, [sp, #80]	; 0x50
 800a486:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a48a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a48e:	462a      	mov	r2, r5
 800a490:	4623      	mov	r3, r4
 800a492:	a902      	add	r1, sp, #8
 800a494:	6800      	ldr	r0, [r0, #0]
 800a496:	f000 f9d9 	bl	800a84c <__ssvfiscanf_r>
 800a49a:	b01c      	add	sp, #112	; 0x70
 800a49c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4a0:	b003      	add	sp, #12
 800a4a2:	4770      	bx	lr
 800a4a4:	0800a4ad 	.word	0x0800a4ad
 800a4a8:	2000029c 	.word	0x2000029c

0800a4ac <__seofread>:
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	4770      	bx	lr

0800a4b0 <strcpy>:
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4b6:	f803 2b01 	strb.w	r2, [r3], #1
 800a4ba:	2a00      	cmp	r2, #0
 800a4bc:	d1f9      	bne.n	800a4b2 <strcpy+0x2>
 800a4be:	4770      	bx	lr

0800a4c0 <strstr>:
 800a4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4c2:	7803      	ldrb	r3, [r0, #0]
 800a4c4:	b133      	cbz	r3, 800a4d4 <strstr+0x14>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	1c5e      	adds	r6, r3, #1
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	b933      	cbnz	r3, 800a4de <strstr+0x1e>
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4d4:	780b      	ldrb	r3, [r1, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	bf18      	it	ne
 800a4da:	2000      	movne	r0, #0
 800a4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4de:	1e4d      	subs	r5, r1, #1
 800a4e0:	1e44      	subs	r4, r0, #1
 800a4e2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a4e6:	2a00      	cmp	r2, #0
 800a4e8:	d0f3      	beq.n	800a4d2 <strstr+0x12>
 800a4ea:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800a4ee:	4297      	cmp	r7, r2
 800a4f0:	4633      	mov	r3, r6
 800a4f2:	d0f6      	beq.n	800a4e2 <strstr+0x22>
 800a4f4:	e7e8      	b.n	800a4c8 <strstr+0x8>

0800a4f6 <__malloc_lock>:
 800a4f6:	4770      	bx	lr

0800a4f8 <__malloc_unlock>:
 800a4f8:	4770      	bx	lr

0800a4fa <__ssputs_r>:
 800a4fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4fe:	688e      	ldr	r6, [r1, #8]
 800a500:	429e      	cmp	r6, r3
 800a502:	4682      	mov	sl, r0
 800a504:	460c      	mov	r4, r1
 800a506:	4691      	mov	r9, r2
 800a508:	4698      	mov	r8, r3
 800a50a:	d835      	bhi.n	800a578 <__ssputs_r+0x7e>
 800a50c:	898a      	ldrh	r2, [r1, #12]
 800a50e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a512:	d031      	beq.n	800a578 <__ssputs_r+0x7e>
 800a514:	6825      	ldr	r5, [r4, #0]
 800a516:	6909      	ldr	r1, [r1, #16]
 800a518:	1a6f      	subs	r7, r5, r1
 800a51a:	6965      	ldr	r5, [r4, #20]
 800a51c:	2302      	movs	r3, #2
 800a51e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a522:	fb95 f5f3 	sdiv	r5, r5, r3
 800a526:	f108 0301 	add.w	r3, r8, #1
 800a52a:	443b      	add	r3, r7
 800a52c:	429d      	cmp	r5, r3
 800a52e:	bf38      	it	cc
 800a530:	461d      	movcc	r5, r3
 800a532:	0553      	lsls	r3, r2, #21
 800a534:	d531      	bpl.n	800a59a <__ssputs_r+0xa0>
 800a536:	4629      	mov	r1, r5
 800a538:	f7ff fefc 	bl	800a334 <_malloc_r>
 800a53c:	4606      	mov	r6, r0
 800a53e:	b950      	cbnz	r0, 800a556 <__ssputs_r+0x5c>
 800a540:	230c      	movs	r3, #12
 800a542:	f8ca 3000 	str.w	r3, [sl]
 800a546:	89a3      	ldrh	r3, [r4, #12]
 800a548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a54c:	81a3      	strh	r3, [r4, #12]
 800a54e:	f04f 30ff 	mov.w	r0, #4294967295
 800a552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a556:	463a      	mov	r2, r7
 800a558:	6921      	ldr	r1, [r4, #16]
 800a55a:	f7ff fe89 	bl	800a270 <memcpy>
 800a55e:	89a3      	ldrh	r3, [r4, #12]
 800a560:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a568:	81a3      	strh	r3, [r4, #12]
 800a56a:	6126      	str	r6, [r4, #16]
 800a56c:	6165      	str	r5, [r4, #20]
 800a56e:	443e      	add	r6, r7
 800a570:	1bed      	subs	r5, r5, r7
 800a572:	6026      	str	r6, [r4, #0]
 800a574:	60a5      	str	r5, [r4, #8]
 800a576:	4646      	mov	r6, r8
 800a578:	4546      	cmp	r6, r8
 800a57a:	bf28      	it	cs
 800a57c:	4646      	movcs	r6, r8
 800a57e:	4632      	mov	r2, r6
 800a580:	4649      	mov	r1, r9
 800a582:	6820      	ldr	r0, [r4, #0]
 800a584:	f000 ff54 	bl	800b430 <memmove>
 800a588:	68a3      	ldr	r3, [r4, #8]
 800a58a:	1b9b      	subs	r3, r3, r6
 800a58c:	60a3      	str	r3, [r4, #8]
 800a58e:	6823      	ldr	r3, [r4, #0]
 800a590:	441e      	add	r6, r3
 800a592:	6026      	str	r6, [r4, #0]
 800a594:	2000      	movs	r0, #0
 800a596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a59a:	462a      	mov	r2, r5
 800a59c:	f000 ff62 	bl	800b464 <_realloc_r>
 800a5a0:	4606      	mov	r6, r0
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d1e1      	bne.n	800a56a <__ssputs_r+0x70>
 800a5a6:	6921      	ldr	r1, [r4, #16]
 800a5a8:	4650      	mov	r0, sl
 800a5aa:	f7ff fe75 	bl	800a298 <_free_r>
 800a5ae:	e7c7      	b.n	800a540 <__ssputs_r+0x46>

0800a5b0 <_svfiprintf_r>:
 800a5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b4:	b09d      	sub	sp, #116	; 0x74
 800a5b6:	4680      	mov	r8, r0
 800a5b8:	9303      	str	r3, [sp, #12]
 800a5ba:	898b      	ldrh	r3, [r1, #12]
 800a5bc:	061c      	lsls	r4, r3, #24
 800a5be:	460d      	mov	r5, r1
 800a5c0:	4616      	mov	r6, r2
 800a5c2:	d50f      	bpl.n	800a5e4 <_svfiprintf_r+0x34>
 800a5c4:	690b      	ldr	r3, [r1, #16]
 800a5c6:	b96b      	cbnz	r3, 800a5e4 <_svfiprintf_r+0x34>
 800a5c8:	2140      	movs	r1, #64	; 0x40
 800a5ca:	f7ff feb3 	bl	800a334 <_malloc_r>
 800a5ce:	6028      	str	r0, [r5, #0]
 800a5d0:	6128      	str	r0, [r5, #16]
 800a5d2:	b928      	cbnz	r0, 800a5e0 <_svfiprintf_r+0x30>
 800a5d4:	230c      	movs	r3, #12
 800a5d6:	f8c8 3000 	str.w	r3, [r8]
 800a5da:	f04f 30ff 	mov.w	r0, #4294967295
 800a5de:	e0c5      	b.n	800a76c <_svfiprintf_r+0x1bc>
 800a5e0:	2340      	movs	r3, #64	; 0x40
 800a5e2:	616b      	str	r3, [r5, #20]
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a5e8:	2320      	movs	r3, #32
 800a5ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5ee:	2330      	movs	r3, #48	; 0x30
 800a5f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5f4:	f04f 0b01 	mov.w	fp, #1
 800a5f8:	4637      	mov	r7, r6
 800a5fa:	463c      	mov	r4, r7
 800a5fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a600:	2b00      	cmp	r3, #0
 800a602:	d13c      	bne.n	800a67e <_svfiprintf_r+0xce>
 800a604:	ebb7 0a06 	subs.w	sl, r7, r6
 800a608:	d00b      	beq.n	800a622 <_svfiprintf_r+0x72>
 800a60a:	4653      	mov	r3, sl
 800a60c:	4632      	mov	r2, r6
 800a60e:	4629      	mov	r1, r5
 800a610:	4640      	mov	r0, r8
 800a612:	f7ff ff72 	bl	800a4fa <__ssputs_r>
 800a616:	3001      	adds	r0, #1
 800a618:	f000 80a3 	beq.w	800a762 <_svfiprintf_r+0x1b2>
 800a61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a61e:	4453      	add	r3, sl
 800a620:	9309      	str	r3, [sp, #36]	; 0x24
 800a622:	783b      	ldrb	r3, [r7, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 809c 	beq.w	800a762 <_svfiprintf_r+0x1b2>
 800a62a:	2300      	movs	r3, #0
 800a62c:	f04f 32ff 	mov.w	r2, #4294967295
 800a630:	9304      	str	r3, [sp, #16]
 800a632:	9307      	str	r3, [sp, #28]
 800a634:	9205      	str	r2, [sp, #20]
 800a636:	9306      	str	r3, [sp, #24]
 800a638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a63c:	931a      	str	r3, [sp, #104]	; 0x68
 800a63e:	2205      	movs	r2, #5
 800a640:	7821      	ldrb	r1, [r4, #0]
 800a642:	4850      	ldr	r0, [pc, #320]	; (800a784 <_svfiprintf_r+0x1d4>)
 800a644:	f7f5 fdcc 	bl	80001e0 <memchr>
 800a648:	1c67      	adds	r7, r4, #1
 800a64a:	9b04      	ldr	r3, [sp, #16]
 800a64c:	b9d8      	cbnz	r0, 800a686 <_svfiprintf_r+0xd6>
 800a64e:	06d9      	lsls	r1, r3, #27
 800a650:	bf44      	itt	mi
 800a652:	2220      	movmi	r2, #32
 800a654:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a658:	071a      	lsls	r2, r3, #28
 800a65a:	bf44      	itt	mi
 800a65c:	222b      	movmi	r2, #43	; 0x2b
 800a65e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a662:	7822      	ldrb	r2, [r4, #0]
 800a664:	2a2a      	cmp	r2, #42	; 0x2a
 800a666:	d016      	beq.n	800a696 <_svfiprintf_r+0xe6>
 800a668:	9a07      	ldr	r2, [sp, #28]
 800a66a:	2100      	movs	r1, #0
 800a66c:	200a      	movs	r0, #10
 800a66e:	4627      	mov	r7, r4
 800a670:	3401      	adds	r4, #1
 800a672:	783b      	ldrb	r3, [r7, #0]
 800a674:	3b30      	subs	r3, #48	; 0x30
 800a676:	2b09      	cmp	r3, #9
 800a678:	d951      	bls.n	800a71e <_svfiprintf_r+0x16e>
 800a67a:	b1c9      	cbz	r1, 800a6b0 <_svfiprintf_r+0x100>
 800a67c:	e011      	b.n	800a6a2 <_svfiprintf_r+0xf2>
 800a67e:	2b25      	cmp	r3, #37	; 0x25
 800a680:	d0c0      	beq.n	800a604 <_svfiprintf_r+0x54>
 800a682:	4627      	mov	r7, r4
 800a684:	e7b9      	b.n	800a5fa <_svfiprintf_r+0x4a>
 800a686:	4a3f      	ldr	r2, [pc, #252]	; (800a784 <_svfiprintf_r+0x1d4>)
 800a688:	1a80      	subs	r0, r0, r2
 800a68a:	fa0b f000 	lsl.w	r0, fp, r0
 800a68e:	4318      	orrs	r0, r3
 800a690:	9004      	str	r0, [sp, #16]
 800a692:	463c      	mov	r4, r7
 800a694:	e7d3      	b.n	800a63e <_svfiprintf_r+0x8e>
 800a696:	9a03      	ldr	r2, [sp, #12]
 800a698:	1d11      	adds	r1, r2, #4
 800a69a:	6812      	ldr	r2, [r2, #0]
 800a69c:	9103      	str	r1, [sp, #12]
 800a69e:	2a00      	cmp	r2, #0
 800a6a0:	db01      	blt.n	800a6a6 <_svfiprintf_r+0xf6>
 800a6a2:	9207      	str	r2, [sp, #28]
 800a6a4:	e004      	b.n	800a6b0 <_svfiprintf_r+0x100>
 800a6a6:	4252      	negs	r2, r2
 800a6a8:	f043 0302 	orr.w	r3, r3, #2
 800a6ac:	9207      	str	r2, [sp, #28]
 800a6ae:	9304      	str	r3, [sp, #16]
 800a6b0:	783b      	ldrb	r3, [r7, #0]
 800a6b2:	2b2e      	cmp	r3, #46	; 0x2e
 800a6b4:	d10e      	bne.n	800a6d4 <_svfiprintf_r+0x124>
 800a6b6:	787b      	ldrb	r3, [r7, #1]
 800a6b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a6ba:	f107 0101 	add.w	r1, r7, #1
 800a6be:	d132      	bne.n	800a726 <_svfiprintf_r+0x176>
 800a6c0:	9b03      	ldr	r3, [sp, #12]
 800a6c2:	1d1a      	adds	r2, r3, #4
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	9203      	str	r2, [sp, #12]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	bfb8      	it	lt
 800a6cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6d0:	3702      	adds	r7, #2
 800a6d2:	9305      	str	r3, [sp, #20]
 800a6d4:	4c2c      	ldr	r4, [pc, #176]	; (800a788 <_svfiprintf_r+0x1d8>)
 800a6d6:	7839      	ldrb	r1, [r7, #0]
 800a6d8:	2203      	movs	r2, #3
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f7f5 fd80 	bl	80001e0 <memchr>
 800a6e0:	b138      	cbz	r0, 800a6f2 <_svfiprintf_r+0x142>
 800a6e2:	2340      	movs	r3, #64	; 0x40
 800a6e4:	1b00      	subs	r0, r0, r4
 800a6e6:	fa03 f000 	lsl.w	r0, r3, r0
 800a6ea:	9b04      	ldr	r3, [sp, #16]
 800a6ec:	4303      	orrs	r3, r0
 800a6ee:	9304      	str	r3, [sp, #16]
 800a6f0:	3701      	adds	r7, #1
 800a6f2:	7839      	ldrb	r1, [r7, #0]
 800a6f4:	4825      	ldr	r0, [pc, #148]	; (800a78c <_svfiprintf_r+0x1dc>)
 800a6f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6fa:	2206      	movs	r2, #6
 800a6fc:	1c7e      	adds	r6, r7, #1
 800a6fe:	f7f5 fd6f 	bl	80001e0 <memchr>
 800a702:	2800      	cmp	r0, #0
 800a704:	d035      	beq.n	800a772 <_svfiprintf_r+0x1c2>
 800a706:	4b22      	ldr	r3, [pc, #136]	; (800a790 <_svfiprintf_r+0x1e0>)
 800a708:	b9fb      	cbnz	r3, 800a74a <_svfiprintf_r+0x19a>
 800a70a:	9b03      	ldr	r3, [sp, #12]
 800a70c:	3307      	adds	r3, #7
 800a70e:	f023 0307 	bic.w	r3, r3, #7
 800a712:	3308      	adds	r3, #8
 800a714:	9303      	str	r3, [sp, #12]
 800a716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a718:	444b      	add	r3, r9
 800a71a:	9309      	str	r3, [sp, #36]	; 0x24
 800a71c:	e76c      	b.n	800a5f8 <_svfiprintf_r+0x48>
 800a71e:	fb00 3202 	mla	r2, r0, r2, r3
 800a722:	2101      	movs	r1, #1
 800a724:	e7a3      	b.n	800a66e <_svfiprintf_r+0xbe>
 800a726:	2300      	movs	r3, #0
 800a728:	9305      	str	r3, [sp, #20]
 800a72a:	4618      	mov	r0, r3
 800a72c:	240a      	movs	r4, #10
 800a72e:	460f      	mov	r7, r1
 800a730:	3101      	adds	r1, #1
 800a732:	783a      	ldrb	r2, [r7, #0]
 800a734:	3a30      	subs	r2, #48	; 0x30
 800a736:	2a09      	cmp	r2, #9
 800a738:	d903      	bls.n	800a742 <_svfiprintf_r+0x192>
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d0ca      	beq.n	800a6d4 <_svfiprintf_r+0x124>
 800a73e:	9005      	str	r0, [sp, #20]
 800a740:	e7c8      	b.n	800a6d4 <_svfiprintf_r+0x124>
 800a742:	fb04 2000 	mla	r0, r4, r0, r2
 800a746:	2301      	movs	r3, #1
 800a748:	e7f1      	b.n	800a72e <_svfiprintf_r+0x17e>
 800a74a:	ab03      	add	r3, sp, #12
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	462a      	mov	r2, r5
 800a750:	4b10      	ldr	r3, [pc, #64]	; (800a794 <_svfiprintf_r+0x1e4>)
 800a752:	a904      	add	r1, sp, #16
 800a754:	4640      	mov	r0, r8
 800a756:	f3af 8000 	nop.w
 800a75a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a75e:	4681      	mov	r9, r0
 800a760:	d1d9      	bne.n	800a716 <_svfiprintf_r+0x166>
 800a762:	89ab      	ldrh	r3, [r5, #12]
 800a764:	065b      	lsls	r3, r3, #25
 800a766:	f53f af38 	bmi.w	800a5da <_svfiprintf_r+0x2a>
 800a76a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a76c:	b01d      	add	sp, #116	; 0x74
 800a76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a772:	ab03      	add	r3, sp, #12
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	462a      	mov	r2, r5
 800a778:	4b06      	ldr	r3, [pc, #24]	; (800a794 <_svfiprintf_r+0x1e4>)
 800a77a:	a904      	add	r1, sp, #16
 800a77c:	4640      	mov	r0, r8
 800a77e:	f000 fa2f 	bl	800abe0 <_printf_i>
 800a782:	e7ea      	b.n	800a75a <_svfiprintf_r+0x1aa>
 800a784:	0800b85f 	.word	0x0800b85f
 800a788:	0800b865 	.word	0x0800b865
 800a78c:	0800b869 	.word	0x0800b869
 800a790:	00000000 	.word	0x00000000
 800a794:	0800a4fb 	.word	0x0800a4fb

0800a798 <_sungetc_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	1c4b      	adds	r3, r1, #1
 800a79c:	4614      	mov	r4, r2
 800a79e:	d103      	bne.n	800a7a8 <_sungetc_r+0x10>
 800a7a0:	f04f 35ff 	mov.w	r5, #4294967295
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	bd38      	pop	{r3, r4, r5, pc}
 800a7a8:	8993      	ldrh	r3, [r2, #12]
 800a7aa:	f023 0320 	bic.w	r3, r3, #32
 800a7ae:	8193      	strh	r3, [r2, #12]
 800a7b0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800a7b2:	6852      	ldr	r2, [r2, #4]
 800a7b4:	b2cd      	uxtb	r5, r1
 800a7b6:	b18b      	cbz	r3, 800a7dc <_sungetc_r+0x44>
 800a7b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	da08      	bge.n	800a7d0 <_sungetc_r+0x38>
 800a7be:	6823      	ldr	r3, [r4, #0]
 800a7c0:	1e5a      	subs	r2, r3, #1
 800a7c2:	6022      	str	r2, [r4, #0]
 800a7c4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a7c8:	6863      	ldr	r3, [r4, #4]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	6063      	str	r3, [r4, #4]
 800a7ce:	e7e9      	b.n	800a7a4 <_sungetc_r+0xc>
 800a7d0:	4621      	mov	r1, r4
 800a7d2:	f000 fdcf 	bl	800b374 <__submore>
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	d0f1      	beq.n	800a7be <_sungetc_r+0x26>
 800a7da:	e7e1      	b.n	800a7a0 <_sungetc_r+0x8>
 800a7dc:	6921      	ldr	r1, [r4, #16]
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	b151      	cbz	r1, 800a7f8 <_sungetc_r+0x60>
 800a7e2:	4299      	cmp	r1, r3
 800a7e4:	d208      	bcs.n	800a7f8 <_sungetc_r+0x60>
 800a7e6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a7ea:	428d      	cmp	r5, r1
 800a7ec:	d104      	bne.n	800a7f8 <_sungetc_r+0x60>
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	3201      	adds	r2, #1
 800a7f2:	6023      	str	r3, [r4, #0]
 800a7f4:	6062      	str	r2, [r4, #4]
 800a7f6:	e7d5      	b.n	800a7a4 <_sungetc_r+0xc>
 800a7f8:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a7fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7fe:	6363      	str	r3, [r4, #52]	; 0x34
 800a800:	2303      	movs	r3, #3
 800a802:	63a3      	str	r3, [r4, #56]	; 0x38
 800a804:	4623      	mov	r3, r4
 800a806:	6422      	str	r2, [r4, #64]	; 0x40
 800a808:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a80c:	6023      	str	r3, [r4, #0]
 800a80e:	2301      	movs	r3, #1
 800a810:	e7dc      	b.n	800a7cc <_sungetc_r+0x34>

0800a812 <__ssrefill_r>:
 800a812:	b510      	push	{r4, lr}
 800a814:	460c      	mov	r4, r1
 800a816:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a818:	b169      	cbz	r1, 800a836 <__ssrefill_r+0x24>
 800a81a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a81e:	4299      	cmp	r1, r3
 800a820:	d001      	beq.n	800a826 <__ssrefill_r+0x14>
 800a822:	f7ff fd39 	bl	800a298 <_free_r>
 800a826:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a828:	6063      	str	r3, [r4, #4]
 800a82a:	2000      	movs	r0, #0
 800a82c:	6360      	str	r0, [r4, #52]	; 0x34
 800a82e:	b113      	cbz	r3, 800a836 <__ssrefill_r+0x24>
 800a830:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a832:	6023      	str	r3, [r4, #0]
 800a834:	bd10      	pop	{r4, pc}
 800a836:	6923      	ldr	r3, [r4, #16]
 800a838:	6023      	str	r3, [r4, #0]
 800a83a:	2300      	movs	r3, #0
 800a83c:	6063      	str	r3, [r4, #4]
 800a83e:	89a3      	ldrh	r3, [r4, #12]
 800a840:	f043 0320 	orr.w	r3, r3, #32
 800a844:	81a3      	strh	r3, [r4, #12]
 800a846:	f04f 30ff 	mov.w	r0, #4294967295
 800a84a:	bd10      	pop	{r4, pc}

0800a84c <__ssvfiscanf_r>:
 800a84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a850:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800a854:	f10d 080c 	add.w	r8, sp, #12
 800a858:	9301      	str	r3, [sp, #4]
 800a85a:	2300      	movs	r3, #0
 800a85c:	9346      	str	r3, [sp, #280]	; 0x118
 800a85e:	9347      	str	r3, [sp, #284]	; 0x11c
 800a860:	4ba0      	ldr	r3, [pc, #640]	; (800aae4 <__ssvfiscanf_r+0x298>)
 800a862:	93a2      	str	r3, [sp, #648]	; 0x288
 800a864:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800aaec <__ssvfiscanf_r+0x2a0>
 800a868:	4b9f      	ldr	r3, [pc, #636]	; (800aae8 <__ssvfiscanf_r+0x29c>)
 800a86a:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800a86e:	4606      	mov	r6, r0
 800a870:	460c      	mov	r4, r1
 800a872:	93a3      	str	r3, [sp, #652]	; 0x28c
 800a874:	4692      	mov	sl, r2
 800a876:	270a      	movs	r7, #10
 800a878:	f89a 3000 	ldrb.w	r3, [sl]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f000 812f 	beq.w	800aae0 <__ssvfiscanf_r+0x294>
 800a882:	f000 fdb5 	bl	800b3f0 <__locale_ctype_ptr>
 800a886:	f89a b000 	ldrb.w	fp, [sl]
 800a88a:	4458      	add	r0, fp
 800a88c:	7843      	ldrb	r3, [r0, #1]
 800a88e:	f013 0308 	ands.w	r3, r3, #8
 800a892:	d143      	bne.n	800a91c <__ssvfiscanf_r+0xd0>
 800a894:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800a898:	f10a 0501 	add.w	r5, sl, #1
 800a89c:	f040 8099 	bne.w	800a9d2 <__ssvfiscanf_r+0x186>
 800a8a0:	9345      	str	r3, [sp, #276]	; 0x114
 800a8a2:	9343      	str	r3, [sp, #268]	; 0x10c
 800a8a4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a8a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a8aa:	d103      	bne.n	800a8b4 <__ssvfiscanf_r+0x68>
 800a8ac:	2310      	movs	r3, #16
 800a8ae:	9343      	str	r3, [sp, #268]	; 0x10c
 800a8b0:	f10a 0502 	add.w	r5, sl, #2
 800a8b4:	7829      	ldrb	r1, [r5, #0]
 800a8b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a8ba:	2a09      	cmp	r2, #9
 800a8bc:	46aa      	mov	sl, r5
 800a8be:	f105 0501 	add.w	r5, r5, #1
 800a8c2:	d941      	bls.n	800a948 <__ssvfiscanf_r+0xfc>
 800a8c4:	2203      	movs	r2, #3
 800a8c6:	4889      	ldr	r0, [pc, #548]	; (800aaec <__ssvfiscanf_r+0x2a0>)
 800a8c8:	f7f5 fc8a 	bl	80001e0 <memchr>
 800a8cc:	b138      	cbz	r0, 800a8de <__ssvfiscanf_r+0x92>
 800a8ce:	eba0 0309 	sub.w	r3, r0, r9
 800a8d2:	2001      	movs	r0, #1
 800a8d4:	4098      	lsls	r0, r3
 800a8d6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a8d8:	4318      	orrs	r0, r3
 800a8da:	9043      	str	r0, [sp, #268]	; 0x10c
 800a8dc:	46aa      	mov	sl, r5
 800a8de:	f89a 3000 	ldrb.w	r3, [sl]
 800a8e2:	2b67      	cmp	r3, #103	; 0x67
 800a8e4:	f10a 0501 	add.w	r5, sl, #1
 800a8e8:	d84a      	bhi.n	800a980 <__ssvfiscanf_r+0x134>
 800a8ea:	2b65      	cmp	r3, #101	; 0x65
 800a8ec:	f080 80b7 	bcs.w	800aa5e <__ssvfiscanf_r+0x212>
 800a8f0:	2b47      	cmp	r3, #71	; 0x47
 800a8f2:	d82f      	bhi.n	800a954 <__ssvfiscanf_r+0x108>
 800a8f4:	2b45      	cmp	r3, #69	; 0x45
 800a8f6:	f080 80b2 	bcs.w	800aa5e <__ssvfiscanf_r+0x212>
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	f000 8082 	beq.w	800aa04 <__ssvfiscanf_r+0x1b8>
 800a900:	2b25      	cmp	r3, #37	; 0x25
 800a902:	d066      	beq.n	800a9d2 <__ssvfiscanf_r+0x186>
 800a904:	2303      	movs	r3, #3
 800a906:	9349      	str	r3, [sp, #292]	; 0x124
 800a908:	9744      	str	r7, [sp, #272]	; 0x110
 800a90a:	e045      	b.n	800a998 <__ssvfiscanf_r+0x14c>
 800a90c:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800a90e:	3101      	adds	r1, #1
 800a910:	9147      	str	r1, [sp, #284]	; 0x11c
 800a912:	6861      	ldr	r1, [r4, #4]
 800a914:	3301      	adds	r3, #1
 800a916:	3901      	subs	r1, #1
 800a918:	6061      	str	r1, [r4, #4]
 800a91a:	6023      	str	r3, [r4, #0]
 800a91c:	6863      	ldr	r3, [r4, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	dd0b      	ble.n	800a93a <__ssvfiscanf_r+0xee>
 800a922:	f000 fd65 	bl	800b3f0 <__locale_ctype_ptr>
 800a926:	6823      	ldr	r3, [r4, #0]
 800a928:	7819      	ldrb	r1, [r3, #0]
 800a92a:	4408      	add	r0, r1
 800a92c:	7841      	ldrb	r1, [r0, #1]
 800a92e:	070d      	lsls	r5, r1, #28
 800a930:	d4ec      	bmi.n	800a90c <__ssvfiscanf_r+0xc0>
 800a932:	f10a 0501 	add.w	r5, sl, #1
 800a936:	46aa      	mov	sl, r5
 800a938:	e79e      	b.n	800a878 <__ssvfiscanf_r+0x2c>
 800a93a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a93c:	4621      	mov	r1, r4
 800a93e:	4630      	mov	r0, r6
 800a940:	4798      	blx	r3
 800a942:	2800      	cmp	r0, #0
 800a944:	d0ed      	beq.n	800a922 <__ssvfiscanf_r+0xd6>
 800a946:	e7f4      	b.n	800a932 <__ssvfiscanf_r+0xe6>
 800a948:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a94a:	fb07 1303 	mla	r3, r7, r3, r1
 800a94e:	3b30      	subs	r3, #48	; 0x30
 800a950:	9345      	str	r3, [sp, #276]	; 0x114
 800a952:	e7af      	b.n	800a8b4 <__ssvfiscanf_r+0x68>
 800a954:	2b5b      	cmp	r3, #91	; 0x5b
 800a956:	d061      	beq.n	800aa1c <__ssvfiscanf_r+0x1d0>
 800a958:	d80c      	bhi.n	800a974 <__ssvfiscanf_r+0x128>
 800a95a:	2b58      	cmp	r3, #88	; 0x58
 800a95c:	d1d2      	bne.n	800a904 <__ssvfiscanf_r+0xb8>
 800a95e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a964:	9243      	str	r2, [sp, #268]	; 0x10c
 800a966:	2210      	movs	r2, #16
 800a968:	9244      	str	r2, [sp, #272]	; 0x110
 800a96a:	2b6f      	cmp	r3, #111	; 0x6f
 800a96c:	bfb4      	ite	lt
 800a96e:	2303      	movlt	r3, #3
 800a970:	2304      	movge	r3, #4
 800a972:	e010      	b.n	800a996 <__ssvfiscanf_r+0x14a>
 800a974:	2b63      	cmp	r3, #99	; 0x63
 800a976:	d05c      	beq.n	800aa32 <__ssvfiscanf_r+0x1e6>
 800a978:	2b64      	cmp	r3, #100	; 0x64
 800a97a:	d1c3      	bne.n	800a904 <__ssvfiscanf_r+0xb8>
 800a97c:	9744      	str	r7, [sp, #272]	; 0x110
 800a97e:	e7f4      	b.n	800a96a <__ssvfiscanf_r+0x11e>
 800a980:	2b70      	cmp	r3, #112	; 0x70
 800a982:	d042      	beq.n	800aa0a <__ssvfiscanf_r+0x1be>
 800a984:	d81d      	bhi.n	800a9c2 <__ssvfiscanf_r+0x176>
 800a986:	2b6e      	cmp	r3, #110	; 0x6e
 800a988:	d059      	beq.n	800aa3e <__ssvfiscanf_r+0x1f2>
 800a98a:	d843      	bhi.n	800aa14 <__ssvfiscanf_r+0x1c8>
 800a98c:	2b69      	cmp	r3, #105	; 0x69
 800a98e:	d1b9      	bne.n	800a904 <__ssvfiscanf_r+0xb8>
 800a990:	2300      	movs	r3, #0
 800a992:	9344      	str	r3, [sp, #272]	; 0x110
 800a994:	2303      	movs	r3, #3
 800a996:	9349      	str	r3, [sp, #292]	; 0x124
 800a998:	6863      	ldr	r3, [r4, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	dd61      	ble.n	800aa62 <__ssvfiscanf_r+0x216>
 800a99e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a9a0:	0659      	lsls	r1, r3, #25
 800a9a2:	d56f      	bpl.n	800aa84 <__ssvfiscanf_r+0x238>
 800a9a4:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	dc7c      	bgt.n	800aaa4 <__ssvfiscanf_r+0x258>
 800a9aa:	ab01      	add	r3, sp, #4
 800a9ac:	4622      	mov	r2, r4
 800a9ae:	a943      	add	r1, sp, #268	; 0x10c
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	f000 fa35 	bl	800ae20 <_scanf_chars>
 800a9b6:	2801      	cmp	r0, #1
 800a9b8:	f000 8092 	beq.w	800aae0 <__ssvfiscanf_r+0x294>
 800a9bc:	2802      	cmp	r0, #2
 800a9be:	d1ba      	bne.n	800a936 <__ssvfiscanf_r+0xea>
 800a9c0:	e01d      	b.n	800a9fe <__ssvfiscanf_r+0x1b2>
 800a9c2:	2b75      	cmp	r3, #117	; 0x75
 800a9c4:	d0da      	beq.n	800a97c <__ssvfiscanf_r+0x130>
 800a9c6:	2b78      	cmp	r3, #120	; 0x78
 800a9c8:	d0c9      	beq.n	800a95e <__ssvfiscanf_r+0x112>
 800a9ca:	2b73      	cmp	r3, #115	; 0x73
 800a9cc:	d19a      	bne.n	800a904 <__ssvfiscanf_r+0xb8>
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	e7e1      	b.n	800a996 <__ssvfiscanf_r+0x14a>
 800a9d2:	6863      	ldr	r3, [r4, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	dd0c      	ble.n	800a9f2 <__ssvfiscanf_r+0x1a6>
 800a9d8:	6823      	ldr	r3, [r4, #0]
 800a9da:	781a      	ldrb	r2, [r3, #0]
 800a9dc:	4593      	cmp	fp, r2
 800a9de:	d17f      	bne.n	800aae0 <__ssvfiscanf_r+0x294>
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	6862      	ldr	r2, [r4, #4]
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a9e8:	3a01      	subs	r2, #1
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	6062      	str	r2, [r4, #4]
 800a9ee:	9347      	str	r3, [sp, #284]	; 0x11c
 800a9f0:	e7a1      	b.n	800a936 <__ssvfiscanf_r+0xea>
 800a9f2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a9f4:	4621      	mov	r1, r4
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	4798      	blx	r3
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	d0ec      	beq.n	800a9d8 <__ssvfiscanf_r+0x18c>
 800a9fe:	9846      	ldr	r0, [sp, #280]	; 0x118
 800aa00:	2800      	cmp	r0, #0
 800aa02:	d163      	bne.n	800aacc <__ssvfiscanf_r+0x280>
 800aa04:	f04f 30ff 	mov.w	r0, #4294967295
 800aa08:	e066      	b.n	800aad8 <__ssvfiscanf_r+0x28c>
 800aa0a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800aa0c:	f042 0220 	orr.w	r2, r2, #32
 800aa10:	9243      	str	r2, [sp, #268]	; 0x10c
 800aa12:	e7a4      	b.n	800a95e <__ssvfiscanf_r+0x112>
 800aa14:	2308      	movs	r3, #8
 800aa16:	9344      	str	r3, [sp, #272]	; 0x110
 800aa18:	2304      	movs	r3, #4
 800aa1a:	e7bc      	b.n	800a996 <__ssvfiscanf_r+0x14a>
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	4640      	mov	r0, r8
 800aa20:	f000 fb56 	bl	800b0d0 <__sccl>
 800aa24:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800aa26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa2a:	9343      	str	r3, [sp, #268]	; 0x10c
 800aa2c:	4605      	mov	r5, r0
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e7b1      	b.n	800a996 <__ssvfiscanf_r+0x14a>
 800aa32:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800aa34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa38:	9343      	str	r3, [sp, #268]	; 0x10c
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	e7ab      	b.n	800a996 <__ssvfiscanf_r+0x14a>
 800aa3e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800aa40:	06d0      	lsls	r0, r2, #27
 800aa42:	f53f af78 	bmi.w	800a936 <__ssvfiscanf_r+0xea>
 800aa46:	f012 0f01 	tst.w	r2, #1
 800aa4a:	9a01      	ldr	r2, [sp, #4]
 800aa4c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800aa4e:	f102 0104 	add.w	r1, r2, #4
 800aa52:	9101      	str	r1, [sp, #4]
 800aa54:	6812      	ldr	r2, [r2, #0]
 800aa56:	bf14      	ite	ne
 800aa58:	8013      	strhne	r3, [r2, #0]
 800aa5a:	6013      	streq	r3, [r2, #0]
 800aa5c:	e76b      	b.n	800a936 <__ssvfiscanf_r+0xea>
 800aa5e:	2305      	movs	r3, #5
 800aa60:	e799      	b.n	800a996 <__ssvfiscanf_r+0x14a>
 800aa62:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800aa64:	4621      	mov	r1, r4
 800aa66:	4630      	mov	r0, r6
 800aa68:	4798      	blx	r3
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d097      	beq.n	800a99e <__ssvfiscanf_r+0x152>
 800aa6e:	e7c6      	b.n	800a9fe <__ssvfiscanf_r+0x1b2>
 800aa70:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800aa72:	3201      	adds	r2, #1
 800aa74:	9247      	str	r2, [sp, #284]	; 0x11c
 800aa76:	6862      	ldr	r2, [r4, #4]
 800aa78:	3a01      	subs	r2, #1
 800aa7a:	2a00      	cmp	r2, #0
 800aa7c:	6062      	str	r2, [r4, #4]
 800aa7e:	dd0a      	ble.n	800aa96 <__ssvfiscanf_r+0x24a>
 800aa80:	3301      	adds	r3, #1
 800aa82:	6023      	str	r3, [r4, #0]
 800aa84:	f000 fcb4 	bl	800b3f0 <__locale_ctype_ptr>
 800aa88:	6823      	ldr	r3, [r4, #0]
 800aa8a:	781a      	ldrb	r2, [r3, #0]
 800aa8c:	4410      	add	r0, r2
 800aa8e:	7842      	ldrb	r2, [r0, #1]
 800aa90:	0712      	lsls	r2, r2, #28
 800aa92:	d4ed      	bmi.n	800aa70 <__ssvfiscanf_r+0x224>
 800aa94:	e786      	b.n	800a9a4 <__ssvfiscanf_r+0x158>
 800aa96:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800aa98:	4621      	mov	r1, r4
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	4798      	blx	r3
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	d0f0      	beq.n	800aa84 <__ssvfiscanf_r+0x238>
 800aaa2:	e7ac      	b.n	800a9fe <__ssvfiscanf_r+0x1b2>
 800aaa4:	2b04      	cmp	r3, #4
 800aaa6:	dc06      	bgt.n	800aab6 <__ssvfiscanf_r+0x26a>
 800aaa8:	ab01      	add	r3, sp, #4
 800aaaa:	4622      	mov	r2, r4
 800aaac:	a943      	add	r1, sp, #268	; 0x10c
 800aaae:	4630      	mov	r0, r6
 800aab0:	f000 fa1a 	bl	800aee8 <_scanf_i>
 800aab4:	e77f      	b.n	800a9b6 <__ssvfiscanf_r+0x16a>
 800aab6:	4b0e      	ldr	r3, [pc, #56]	; (800aaf0 <__ssvfiscanf_r+0x2a4>)
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f43f af3c 	beq.w	800a936 <__ssvfiscanf_r+0xea>
 800aabe:	ab01      	add	r3, sp, #4
 800aac0:	4622      	mov	r2, r4
 800aac2:	a943      	add	r1, sp, #268	; 0x10c
 800aac4:	4630      	mov	r0, r6
 800aac6:	f3af 8000 	nop.w
 800aaca:	e774      	b.n	800a9b6 <__ssvfiscanf_r+0x16a>
 800aacc:	89a3      	ldrh	r3, [r4, #12]
 800aace:	f013 0f40 	tst.w	r3, #64	; 0x40
 800aad2:	bf18      	it	ne
 800aad4:	f04f 30ff 	movne.w	r0, #4294967295
 800aad8:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 800aadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae0:	9846      	ldr	r0, [sp, #280]	; 0x118
 800aae2:	e7f9      	b.n	800aad8 <__ssvfiscanf_r+0x28c>
 800aae4:	0800a799 	.word	0x0800a799
 800aae8:	0800a813 	.word	0x0800a813
 800aaec:	0800b865 	.word	0x0800b865
 800aaf0:	00000000 	.word	0x00000000

0800aaf4 <_printf_common>:
 800aaf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaf8:	4691      	mov	r9, r2
 800aafa:	461f      	mov	r7, r3
 800aafc:	688a      	ldr	r2, [r1, #8]
 800aafe:	690b      	ldr	r3, [r1, #16]
 800ab00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab04:	4293      	cmp	r3, r2
 800ab06:	bfb8      	it	lt
 800ab08:	4613      	movlt	r3, r2
 800ab0a:	f8c9 3000 	str.w	r3, [r9]
 800ab0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab12:	4606      	mov	r6, r0
 800ab14:	460c      	mov	r4, r1
 800ab16:	b112      	cbz	r2, 800ab1e <_printf_common+0x2a>
 800ab18:	3301      	adds	r3, #1
 800ab1a:	f8c9 3000 	str.w	r3, [r9]
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	0699      	lsls	r1, r3, #26
 800ab22:	bf42      	ittt	mi
 800ab24:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ab28:	3302      	addmi	r3, #2
 800ab2a:	f8c9 3000 	strmi.w	r3, [r9]
 800ab2e:	6825      	ldr	r5, [r4, #0]
 800ab30:	f015 0506 	ands.w	r5, r5, #6
 800ab34:	d107      	bne.n	800ab46 <_printf_common+0x52>
 800ab36:	f104 0a19 	add.w	sl, r4, #25
 800ab3a:	68e3      	ldr	r3, [r4, #12]
 800ab3c:	f8d9 2000 	ldr.w	r2, [r9]
 800ab40:	1a9b      	subs	r3, r3, r2
 800ab42:	429d      	cmp	r5, r3
 800ab44:	db29      	blt.n	800ab9a <_printf_common+0xa6>
 800ab46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ab4a:	6822      	ldr	r2, [r4, #0]
 800ab4c:	3300      	adds	r3, #0
 800ab4e:	bf18      	it	ne
 800ab50:	2301      	movne	r3, #1
 800ab52:	0692      	lsls	r2, r2, #26
 800ab54:	d42e      	bmi.n	800abb4 <_printf_common+0xc0>
 800ab56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab5a:	4639      	mov	r1, r7
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	47c0      	blx	r8
 800ab60:	3001      	adds	r0, #1
 800ab62:	d021      	beq.n	800aba8 <_printf_common+0xb4>
 800ab64:	6823      	ldr	r3, [r4, #0]
 800ab66:	68e5      	ldr	r5, [r4, #12]
 800ab68:	f8d9 2000 	ldr.w	r2, [r9]
 800ab6c:	f003 0306 	and.w	r3, r3, #6
 800ab70:	2b04      	cmp	r3, #4
 800ab72:	bf08      	it	eq
 800ab74:	1aad      	subeq	r5, r5, r2
 800ab76:	68a3      	ldr	r3, [r4, #8]
 800ab78:	6922      	ldr	r2, [r4, #16]
 800ab7a:	bf0c      	ite	eq
 800ab7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab80:	2500      	movne	r5, #0
 800ab82:	4293      	cmp	r3, r2
 800ab84:	bfc4      	itt	gt
 800ab86:	1a9b      	subgt	r3, r3, r2
 800ab88:	18ed      	addgt	r5, r5, r3
 800ab8a:	f04f 0900 	mov.w	r9, #0
 800ab8e:	341a      	adds	r4, #26
 800ab90:	454d      	cmp	r5, r9
 800ab92:	d11b      	bne.n	800abcc <_printf_common+0xd8>
 800ab94:	2000      	movs	r0, #0
 800ab96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	4652      	mov	r2, sl
 800ab9e:	4639      	mov	r1, r7
 800aba0:	4630      	mov	r0, r6
 800aba2:	47c0      	blx	r8
 800aba4:	3001      	adds	r0, #1
 800aba6:	d103      	bne.n	800abb0 <_printf_common+0xbc>
 800aba8:	f04f 30ff 	mov.w	r0, #4294967295
 800abac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb0:	3501      	adds	r5, #1
 800abb2:	e7c2      	b.n	800ab3a <_printf_common+0x46>
 800abb4:	18e1      	adds	r1, r4, r3
 800abb6:	1c5a      	adds	r2, r3, #1
 800abb8:	2030      	movs	r0, #48	; 0x30
 800abba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800abbe:	4422      	add	r2, r4
 800abc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800abc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abc8:	3302      	adds	r3, #2
 800abca:	e7c4      	b.n	800ab56 <_printf_common+0x62>
 800abcc:	2301      	movs	r3, #1
 800abce:	4622      	mov	r2, r4
 800abd0:	4639      	mov	r1, r7
 800abd2:	4630      	mov	r0, r6
 800abd4:	47c0      	blx	r8
 800abd6:	3001      	adds	r0, #1
 800abd8:	d0e6      	beq.n	800aba8 <_printf_common+0xb4>
 800abda:	f109 0901 	add.w	r9, r9, #1
 800abde:	e7d7      	b.n	800ab90 <_printf_common+0x9c>

0800abe0 <_printf_i>:
 800abe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abe4:	4617      	mov	r7, r2
 800abe6:	7e0a      	ldrb	r2, [r1, #24]
 800abe8:	b085      	sub	sp, #20
 800abea:	2a6e      	cmp	r2, #110	; 0x6e
 800abec:	4698      	mov	r8, r3
 800abee:	4606      	mov	r6, r0
 800abf0:	460c      	mov	r4, r1
 800abf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abf4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800abf8:	f000 80bc 	beq.w	800ad74 <_printf_i+0x194>
 800abfc:	d81a      	bhi.n	800ac34 <_printf_i+0x54>
 800abfe:	2a63      	cmp	r2, #99	; 0x63
 800ac00:	d02e      	beq.n	800ac60 <_printf_i+0x80>
 800ac02:	d80a      	bhi.n	800ac1a <_printf_i+0x3a>
 800ac04:	2a00      	cmp	r2, #0
 800ac06:	f000 80c8 	beq.w	800ad9a <_printf_i+0x1ba>
 800ac0a:	2a58      	cmp	r2, #88	; 0x58
 800ac0c:	f000 808a 	beq.w	800ad24 <_printf_i+0x144>
 800ac10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac14:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800ac18:	e02a      	b.n	800ac70 <_printf_i+0x90>
 800ac1a:	2a64      	cmp	r2, #100	; 0x64
 800ac1c:	d001      	beq.n	800ac22 <_printf_i+0x42>
 800ac1e:	2a69      	cmp	r2, #105	; 0x69
 800ac20:	d1f6      	bne.n	800ac10 <_printf_i+0x30>
 800ac22:	6821      	ldr	r1, [r4, #0]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	f011 0f80 	tst.w	r1, #128	; 0x80
 800ac2a:	d023      	beq.n	800ac74 <_printf_i+0x94>
 800ac2c:	1d11      	adds	r1, r2, #4
 800ac2e:	6019      	str	r1, [r3, #0]
 800ac30:	6813      	ldr	r3, [r2, #0]
 800ac32:	e027      	b.n	800ac84 <_printf_i+0xa4>
 800ac34:	2a73      	cmp	r2, #115	; 0x73
 800ac36:	f000 80b4 	beq.w	800ada2 <_printf_i+0x1c2>
 800ac3a:	d808      	bhi.n	800ac4e <_printf_i+0x6e>
 800ac3c:	2a6f      	cmp	r2, #111	; 0x6f
 800ac3e:	d02a      	beq.n	800ac96 <_printf_i+0xb6>
 800ac40:	2a70      	cmp	r2, #112	; 0x70
 800ac42:	d1e5      	bne.n	800ac10 <_printf_i+0x30>
 800ac44:	680a      	ldr	r2, [r1, #0]
 800ac46:	f042 0220 	orr.w	r2, r2, #32
 800ac4a:	600a      	str	r2, [r1, #0]
 800ac4c:	e003      	b.n	800ac56 <_printf_i+0x76>
 800ac4e:	2a75      	cmp	r2, #117	; 0x75
 800ac50:	d021      	beq.n	800ac96 <_printf_i+0xb6>
 800ac52:	2a78      	cmp	r2, #120	; 0x78
 800ac54:	d1dc      	bne.n	800ac10 <_printf_i+0x30>
 800ac56:	2278      	movs	r2, #120	; 0x78
 800ac58:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800ac5c:	496e      	ldr	r1, [pc, #440]	; (800ae18 <_printf_i+0x238>)
 800ac5e:	e064      	b.n	800ad2a <_printf_i+0x14a>
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800ac66:	1d11      	adds	r1, r2, #4
 800ac68:	6019      	str	r1, [r3, #0]
 800ac6a:	6813      	ldr	r3, [r2, #0]
 800ac6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac70:	2301      	movs	r3, #1
 800ac72:	e0a3      	b.n	800adbc <_printf_i+0x1dc>
 800ac74:	f011 0f40 	tst.w	r1, #64	; 0x40
 800ac78:	f102 0104 	add.w	r1, r2, #4
 800ac7c:	6019      	str	r1, [r3, #0]
 800ac7e:	d0d7      	beq.n	800ac30 <_printf_i+0x50>
 800ac80:	f9b2 3000 	ldrsh.w	r3, [r2]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	da03      	bge.n	800ac90 <_printf_i+0xb0>
 800ac88:	222d      	movs	r2, #45	; 0x2d
 800ac8a:	425b      	negs	r3, r3
 800ac8c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ac90:	4962      	ldr	r1, [pc, #392]	; (800ae1c <_printf_i+0x23c>)
 800ac92:	220a      	movs	r2, #10
 800ac94:	e017      	b.n	800acc6 <_printf_i+0xe6>
 800ac96:	6820      	ldr	r0, [r4, #0]
 800ac98:	6819      	ldr	r1, [r3, #0]
 800ac9a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800ac9e:	d003      	beq.n	800aca8 <_printf_i+0xc8>
 800aca0:	1d08      	adds	r0, r1, #4
 800aca2:	6018      	str	r0, [r3, #0]
 800aca4:	680b      	ldr	r3, [r1, #0]
 800aca6:	e006      	b.n	800acb6 <_printf_i+0xd6>
 800aca8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800acac:	f101 0004 	add.w	r0, r1, #4
 800acb0:	6018      	str	r0, [r3, #0]
 800acb2:	d0f7      	beq.n	800aca4 <_printf_i+0xc4>
 800acb4:	880b      	ldrh	r3, [r1, #0]
 800acb6:	4959      	ldr	r1, [pc, #356]	; (800ae1c <_printf_i+0x23c>)
 800acb8:	2a6f      	cmp	r2, #111	; 0x6f
 800acba:	bf14      	ite	ne
 800acbc:	220a      	movne	r2, #10
 800acbe:	2208      	moveq	r2, #8
 800acc0:	2000      	movs	r0, #0
 800acc2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800acc6:	6865      	ldr	r5, [r4, #4]
 800acc8:	60a5      	str	r5, [r4, #8]
 800acca:	2d00      	cmp	r5, #0
 800accc:	f2c0 809c 	blt.w	800ae08 <_printf_i+0x228>
 800acd0:	6820      	ldr	r0, [r4, #0]
 800acd2:	f020 0004 	bic.w	r0, r0, #4
 800acd6:	6020      	str	r0, [r4, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d13f      	bne.n	800ad5c <_printf_i+0x17c>
 800acdc:	2d00      	cmp	r5, #0
 800acde:	f040 8095 	bne.w	800ae0c <_printf_i+0x22c>
 800ace2:	4675      	mov	r5, lr
 800ace4:	2a08      	cmp	r2, #8
 800ace6:	d10b      	bne.n	800ad00 <_printf_i+0x120>
 800ace8:	6823      	ldr	r3, [r4, #0]
 800acea:	07da      	lsls	r2, r3, #31
 800acec:	d508      	bpl.n	800ad00 <_printf_i+0x120>
 800acee:	6923      	ldr	r3, [r4, #16]
 800acf0:	6862      	ldr	r2, [r4, #4]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	bfde      	ittt	le
 800acf6:	2330      	movle	r3, #48	; 0x30
 800acf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800acfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad00:	ebae 0305 	sub.w	r3, lr, r5
 800ad04:	6123      	str	r3, [r4, #16]
 800ad06:	f8cd 8000 	str.w	r8, [sp]
 800ad0a:	463b      	mov	r3, r7
 800ad0c:	aa03      	add	r2, sp, #12
 800ad0e:	4621      	mov	r1, r4
 800ad10:	4630      	mov	r0, r6
 800ad12:	f7ff feef 	bl	800aaf4 <_printf_common>
 800ad16:	3001      	adds	r0, #1
 800ad18:	d155      	bne.n	800adc6 <_printf_i+0x1e6>
 800ad1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1e:	b005      	add	sp, #20
 800ad20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad24:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800ad28:	493c      	ldr	r1, [pc, #240]	; (800ae1c <_printf_i+0x23c>)
 800ad2a:	6822      	ldr	r2, [r4, #0]
 800ad2c:	6818      	ldr	r0, [r3, #0]
 800ad2e:	f012 0f80 	tst.w	r2, #128	; 0x80
 800ad32:	f100 0504 	add.w	r5, r0, #4
 800ad36:	601d      	str	r5, [r3, #0]
 800ad38:	d001      	beq.n	800ad3e <_printf_i+0x15e>
 800ad3a:	6803      	ldr	r3, [r0, #0]
 800ad3c:	e002      	b.n	800ad44 <_printf_i+0x164>
 800ad3e:	0655      	lsls	r5, r2, #25
 800ad40:	d5fb      	bpl.n	800ad3a <_printf_i+0x15a>
 800ad42:	8803      	ldrh	r3, [r0, #0]
 800ad44:	07d0      	lsls	r0, r2, #31
 800ad46:	bf44      	itt	mi
 800ad48:	f042 0220 	orrmi.w	r2, r2, #32
 800ad4c:	6022      	strmi	r2, [r4, #0]
 800ad4e:	b91b      	cbnz	r3, 800ad58 <_printf_i+0x178>
 800ad50:	6822      	ldr	r2, [r4, #0]
 800ad52:	f022 0220 	bic.w	r2, r2, #32
 800ad56:	6022      	str	r2, [r4, #0]
 800ad58:	2210      	movs	r2, #16
 800ad5a:	e7b1      	b.n	800acc0 <_printf_i+0xe0>
 800ad5c:	4675      	mov	r5, lr
 800ad5e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad62:	fb02 3310 	mls	r3, r2, r0, r3
 800ad66:	5ccb      	ldrb	r3, [r1, r3]
 800ad68:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	d1f5      	bne.n	800ad5e <_printf_i+0x17e>
 800ad72:	e7b7      	b.n	800ace4 <_printf_i+0x104>
 800ad74:	6808      	ldr	r0, [r1, #0]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	6949      	ldr	r1, [r1, #20]
 800ad7a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800ad7e:	d004      	beq.n	800ad8a <_printf_i+0x1aa>
 800ad80:	1d10      	adds	r0, r2, #4
 800ad82:	6018      	str	r0, [r3, #0]
 800ad84:	6813      	ldr	r3, [r2, #0]
 800ad86:	6019      	str	r1, [r3, #0]
 800ad88:	e007      	b.n	800ad9a <_printf_i+0x1ba>
 800ad8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad8e:	f102 0004 	add.w	r0, r2, #4
 800ad92:	6018      	str	r0, [r3, #0]
 800ad94:	6813      	ldr	r3, [r2, #0]
 800ad96:	d0f6      	beq.n	800ad86 <_printf_i+0x1a6>
 800ad98:	8019      	strh	r1, [r3, #0]
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	6123      	str	r3, [r4, #16]
 800ad9e:	4675      	mov	r5, lr
 800ada0:	e7b1      	b.n	800ad06 <_printf_i+0x126>
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	1d11      	adds	r1, r2, #4
 800ada6:	6019      	str	r1, [r3, #0]
 800ada8:	6815      	ldr	r5, [r2, #0]
 800adaa:	6862      	ldr	r2, [r4, #4]
 800adac:	2100      	movs	r1, #0
 800adae:	4628      	mov	r0, r5
 800adb0:	f7f5 fa16 	bl	80001e0 <memchr>
 800adb4:	b108      	cbz	r0, 800adba <_printf_i+0x1da>
 800adb6:	1b40      	subs	r0, r0, r5
 800adb8:	6060      	str	r0, [r4, #4]
 800adba:	6863      	ldr	r3, [r4, #4]
 800adbc:	6123      	str	r3, [r4, #16]
 800adbe:	2300      	movs	r3, #0
 800adc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adc4:	e79f      	b.n	800ad06 <_printf_i+0x126>
 800adc6:	6923      	ldr	r3, [r4, #16]
 800adc8:	462a      	mov	r2, r5
 800adca:	4639      	mov	r1, r7
 800adcc:	4630      	mov	r0, r6
 800adce:	47c0      	blx	r8
 800add0:	3001      	adds	r0, #1
 800add2:	d0a2      	beq.n	800ad1a <_printf_i+0x13a>
 800add4:	6823      	ldr	r3, [r4, #0]
 800add6:	079b      	lsls	r3, r3, #30
 800add8:	d507      	bpl.n	800adea <_printf_i+0x20a>
 800adda:	2500      	movs	r5, #0
 800addc:	f104 0919 	add.w	r9, r4, #25
 800ade0:	68e3      	ldr	r3, [r4, #12]
 800ade2:	9a03      	ldr	r2, [sp, #12]
 800ade4:	1a9b      	subs	r3, r3, r2
 800ade6:	429d      	cmp	r5, r3
 800ade8:	db05      	blt.n	800adf6 <_printf_i+0x216>
 800adea:	68e0      	ldr	r0, [r4, #12]
 800adec:	9b03      	ldr	r3, [sp, #12]
 800adee:	4298      	cmp	r0, r3
 800adf0:	bfb8      	it	lt
 800adf2:	4618      	movlt	r0, r3
 800adf4:	e793      	b.n	800ad1e <_printf_i+0x13e>
 800adf6:	2301      	movs	r3, #1
 800adf8:	464a      	mov	r2, r9
 800adfa:	4639      	mov	r1, r7
 800adfc:	4630      	mov	r0, r6
 800adfe:	47c0      	blx	r8
 800ae00:	3001      	adds	r0, #1
 800ae02:	d08a      	beq.n	800ad1a <_printf_i+0x13a>
 800ae04:	3501      	adds	r5, #1
 800ae06:	e7eb      	b.n	800ade0 <_printf_i+0x200>
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d1a7      	bne.n	800ad5c <_printf_i+0x17c>
 800ae0c:	780b      	ldrb	r3, [r1, #0]
 800ae0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae16:	e765      	b.n	800ace4 <_printf_i+0x104>
 800ae18:	0800b881 	.word	0x0800b881
 800ae1c:	0800b870 	.word	0x0800b870

0800ae20 <_scanf_chars>:
 800ae20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae24:	4615      	mov	r5, r2
 800ae26:	688a      	ldr	r2, [r1, #8]
 800ae28:	4680      	mov	r8, r0
 800ae2a:	460c      	mov	r4, r1
 800ae2c:	b932      	cbnz	r2, 800ae3c <_scanf_chars+0x1c>
 800ae2e:	698a      	ldr	r2, [r1, #24]
 800ae30:	2a00      	cmp	r2, #0
 800ae32:	bf0c      	ite	eq
 800ae34:	2201      	moveq	r2, #1
 800ae36:	f04f 32ff 	movne.w	r2, #4294967295
 800ae3a:	608a      	str	r2, [r1, #8]
 800ae3c:	6822      	ldr	r2, [r4, #0]
 800ae3e:	06d1      	lsls	r1, r2, #27
 800ae40:	bf5f      	itttt	pl
 800ae42:	681a      	ldrpl	r2, [r3, #0]
 800ae44:	1d11      	addpl	r1, r2, #4
 800ae46:	6019      	strpl	r1, [r3, #0]
 800ae48:	6817      	ldrpl	r7, [r2, #0]
 800ae4a:	2600      	movs	r6, #0
 800ae4c:	69a3      	ldr	r3, [r4, #24]
 800ae4e:	b1db      	cbz	r3, 800ae88 <_scanf_chars+0x68>
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d107      	bne.n	800ae64 <_scanf_chars+0x44>
 800ae54:	682b      	ldr	r3, [r5, #0]
 800ae56:	6962      	ldr	r2, [r4, #20]
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	5cd3      	ldrb	r3, [r2, r3]
 800ae5c:	b9a3      	cbnz	r3, 800ae88 <_scanf_chars+0x68>
 800ae5e:	2e00      	cmp	r6, #0
 800ae60:	d132      	bne.n	800aec8 <_scanf_chars+0xa8>
 800ae62:	e006      	b.n	800ae72 <_scanf_chars+0x52>
 800ae64:	2b02      	cmp	r3, #2
 800ae66:	d007      	beq.n	800ae78 <_scanf_chars+0x58>
 800ae68:	2e00      	cmp	r6, #0
 800ae6a:	d12d      	bne.n	800aec8 <_scanf_chars+0xa8>
 800ae6c:	69a3      	ldr	r3, [r4, #24]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d12a      	bne.n	800aec8 <_scanf_chars+0xa8>
 800ae72:	2001      	movs	r0, #1
 800ae74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae78:	f000 faba 	bl	800b3f0 <__locale_ctype_ptr>
 800ae7c:	682b      	ldr	r3, [r5, #0]
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	4418      	add	r0, r3
 800ae82:	7843      	ldrb	r3, [r0, #1]
 800ae84:	071b      	lsls	r3, r3, #28
 800ae86:	d4ef      	bmi.n	800ae68 <_scanf_chars+0x48>
 800ae88:	6823      	ldr	r3, [r4, #0]
 800ae8a:	06da      	lsls	r2, r3, #27
 800ae8c:	bf5e      	ittt	pl
 800ae8e:	682b      	ldrpl	r3, [r5, #0]
 800ae90:	781b      	ldrbpl	r3, [r3, #0]
 800ae92:	703b      	strbpl	r3, [r7, #0]
 800ae94:	682a      	ldr	r2, [r5, #0]
 800ae96:	686b      	ldr	r3, [r5, #4]
 800ae98:	f102 0201 	add.w	r2, r2, #1
 800ae9c:	602a      	str	r2, [r5, #0]
 800ae9e:	68a2      	ldr	r2, [r4, #8]
 800aea0:	f103 33ff 	add.w	r3, r3, #4294967295
 800aea4:	f102 32ff 	add.w	r2, r2, #4294967295
 800aea8:	606b      	str	r3, [r5, #4]
 800aeaa:	f106 0601 	add.w	r6, r6, #1
 800aeae:	bf58      	it	pl
 800aeb0:	3701      	addpl	r7, #1
 800aeb2:	60a2      	str	r2, [r4, #8]
 800aeb4:	b142      	cbz	r2, 800aec8 <_scanf_chars+0xa8>
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	dcc8      	bgt.n	800ae4c <_scanf_chars+0x2c>
 800aeba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aebe:	4629      	mov	r1, r5
 800aec0:	4640      	mov	r0, r8
 800aec2:	4798      	blx	r3
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d0c1      	beq.n	800ae4c <_scanf_chars+0x2c>
 800aec8:	6823      	ldr	r3, [r4, #0]
 800aeca:	f013 0310 	ands.w	r3, r3, #16
 800aece:	d105      	bne.n	800aedc <_scanf_chars+0xbc>
 800aed0:	68e2      	ldr	r2, [r4, #12]
 800aed2:	3201      	adds	r2, #1
 800aed4:	60e2      	str	r2, [r4, #12]
 800aed6:	69a2      	ldr	r2, [r4, #24]
 800aed8:	b102      	cbz	r2, 800aedc <_scanf_chars+0xbc>
 800aeda:	703b      	strb	r3, [r7, #0]
 800aedc:	6923      	ldr	r3, [r4, #16]
 800aede:	441e      	add	r6, r3
 800aee0:	6126      	str	r6, [r4, #16]
 800aee2:	2000      	movs	r0, #0
 800aee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aee8 <_scanf_i>:
 800aee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeec:	469a      	mov	sl, r3
 800aeee:	4b74      	ldr	r3, [pc, #464]	; (800b0c0 <_scanf_i+0x1d8>)
 800aef0:	460c      	mov	r4, r1
 800aef2:	4683      	mov	fp, r0
 800aef4:	4616      	mov	r6, r2
 800aef6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aefa:	b087      	sub	sp, #28
 800aefc:	ab03      	add	r3, sp, #12
 800aefe:	68a7      	ldr	r7, [r4, #8]
 800af00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800af04:	4b6f      	ldr	r3, [pc, #444]	; (800b0c4 <_scanf_i+0x1dc>)
 800af06:	69a1      	ldr	r1, [r4, #24]
 800af08:	4a6f      	ldr	r2, [pc, #444]	; (800b0c8 <_scanf_i+0x1e0>)
 800af0a:	2903      	cmp	r1, #3
 800af0c:	bf18      	it	ne
 800af0e:	461a      	movne	r2, r3
 800af10:	1e7b      	subs	r3, r7, #1
 800af12:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800af16:	bf84      	itt	hi
 800af18:	f240 135d 	movwhi	r3, #349	; 0x15d
 800af1c:	60a3      	strhi	r3, [r4, #8]
 800af1e:	6823      	ldr	r3, [r4, #0]
 800af20:	9200      	str	r2, [sp, #0]
 800af22:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800af26:	bf88      	it	hi
 800af28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800af2c:	f104 091c 	add.w	r9, r4, #28
 800af30:	6023      	str	r3, [r4, #0]
 800af32:	bf8c      	ite	hi
 800af34:	197f      	addhi	r7, r7, r5
 800af36:	2700      	movls	r7, #0
 800af38:	464b      	mov	r3, r9
 800af3a:	f04f 0800 	mov.w	r8, #0
 800af3e:	9301      	str	r3, [sp, #4]
 800af40:	6831      	ldr	r1, [r6, #0]
 800af42:	ab03      	add	r3, sp, #12
 800af44:	2202      	movs	r2, #2
 800af46:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800af4a:	7809      	ldrb	r1, [r1, #0]
 800af4c:	f7f5 f948 	bl	80001e0 <memchr>
 800af50:	9b01      	ldr	r3, [sp, #4]
 800af52:	b328      	cbz	r0, 800afa0 <_scanf_i+0xb8>
 800af54:	f1b8 0f01 	cmp.w	r8, #1
 800af58:	d156      	bne.n	800b008 <_scanf_i+0x120>
 800af5a:	6862      	ldr	r2, [r4, #4]
 800af5c:	b92a      	cbnz	r2, 800af6a <_scanf_i+0x82>
 800af5e:	2208      	movs	r2, #8
 800af60:	6062      	str	r2, [r4, #4]
 800af62:	6822      	ldr	r2, [r4, #0]
 800af64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af68:	6022      	str	r2, [r4, #0]
 800af6a:	6822      	ldr	r2, [r4, #0]
 800af6c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800af70:	6022      	str	r2, [r4, #0]
 800af72:	68a2      	ldr	r2, [r4, #8]
 800af74:	1e51      	subs	r1, r2, #1
 800af76:	60a1      	str	r1, [r4, #8]
 800af78:	b192      	cbz	r2, 800afa0 <_scanf_i+0xb8>
 800af7a:	6832      	ldr	r2, [r6, #0]
 800af7c:	1c51      	adds	r1, r2, #1
 800af7e:	6031      	str	r1, [r6, #0]
 800af80:	7812      	ldrb	r2, [r2, #0]
 800af82:	701a      	strb	r2, [r3, #0]
 800af84:	1c5d      	adds	r5, r3, #1
 800af86:	6873      	ldr	r3, [r6, #4]
 800af88:	3b01      	subs	r3, #1
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	6073      	str	r3, [r6, #4]
 800af8e:	dc06      	bgt.n	800af9e <_scanf_i+0xb6>
 800af90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800af94:	4631      	mov	r1, r6
 800af96:	4658      	mov	r0, fp
 800af98:	4798      	blx	r3
 800af9a:	2800      	cmp	r0, #0
 800af9c:	d176      	bne.n	800b08c <_scanf_i+0x1a4>
 800af9e:	462b      	mov	r3, r5
 800afa0:	f108 0801 	add.w	r8, r8, #1
 800afa4:	f1b8 0f03 	cmp.w	r8, #3
 800afa8:	d1c9      	bne.n	800af3e <_scanf_i+0x56>
 800afaa:	6862      	ldr	r2, [r4, #4]
 800afac:	b90a      	cbnz	r2, 800afb2 <_scanf_i+0xca>
 800afae:	220a      	movs	r2, #10
 800afb0:	6062      	str	r2, [r4, #4]
 800afb2:	6862      	ldr	r2, [r4, #4]
 800afb4:	4945      	ldr	r1, [pc, #276]	; (800b0cc <_scanf_i+0x1e4>)
 800afb6:	6960      	ldr	r0, [r4, #20]
 800afb8:	9301      	str	r3, [sp, #4]
 800afba:	1a89      	subs	r1, r1, r2
 800afbc:	f000 f888 	bl	800b0d0 <__sccl>
 800afc0:	9b01      	ldr	r3, [sp, #4]
 800afc2:	f04f 0800 	mov.w	r8, #0
 800afc6:	461d      	mov	r5, r3
 800afc8:	68a3      	ldr	r3, [r4, #8]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d038      	beq.n	800b040 <_scanf_i+0x158>
 800afce:	6831      	ldr	r1, [r6, #0]
 800afd0:	6960      	ldr	r0, [r4, #20]
 800afd2:	780a      	ldrb	r2, [r1, #0]
 800afd4:	5c80      	ldrb	r0, [r0, r2]
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d032      	beq.n	800b040 <_scanf_i+0x158>
 800afda:	2a30      	cmp	r2, #48	; 0x30
 800afdc:	6822      	ldr	r2, [r4, #0]
 800afde:	d121      	bne.n	800b024 <_scanf_i+0x13c>
 800afe0:	0510      	lsls	r0, r2, #20
 800afe2:	d51f      	bpl.n	800b024 <_scanf_i+0x13c>
 800afe4:	f108 0801 	add.w	r8, r8, #1
 800afe8:	b117      	cbz	r7, 800aff0 <_scanf_i+0x108>
 800afea:	3301      	adds	r3, #1
 800afec:	3f01      	subs	r7, #1
 800afee:	60a3      	str	r3, [r4, #8]
 800aff0:	6873      	ldr	r3, [r6, #4]
 800aff2:	3b01      	subs	r3, #1
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	6073      	str	r3, [r6, #4]
 800aff8:	dd1b      	ble.n	800b032 <_scanf_i+0x14a>
 800affa:	6833      	ldr	r3, [r6, #0]
 800affc:	3301      	adds	r3, #1
 800affe:	6033      	str	r3, [r6, #0]
 800b000:	68a3      	ldr	r3, [r4, #8]
 800b002:	3b01      	subs	r3, #1
 800b004:	60a3      	str	r3, [r4, #8]
 800b006:	e7df      	b.n	800afc8 <_scanf_i+0xe0>
 800b008:	f1b8 0f02 	cmp.w	r8, #2
 800b00c:	d1b1      	bne.n	800af72 <_scanf_i+0x8a>
 800b00e:	6822      	ldr	r2, [r4, #0]
 800b010:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b014:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b018:	d1c2      	bne.n	800afa0 <_scanf_i+0xb8>
 800b01a:	2110      	movs	r1, #16
 800b01c:	6061      	str	r1, [r4, #4]
 800b01e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b022:	e7a5      	b.n	800af70 <_scanf_i+0x88>
 800b024:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b028:	6022      	str	r2, [r4, #0]
 800b02a:	780b      	ldrb	r3, [r1, #0]
 800b02c:	702b      	strb	r3, [r5, #0]
 800b02e:	3501      	adds	r5, #1
 800b030:	e7de      	b.n	800aff0 <_scanf_i+0x108>
 800b032:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b036:	4631      	mov	r1, r6
 800b038:	4658      	mov	r0, fp
 800b03a:	4798      	blx	r3
 800b03c:	2800      	cmp	r0, #0
 800b03e:	d0df      	beq.n	800b000 <_scanf_i+0x118>
 800b040:	6823      	ldr	r3, [r4, #0]
 800b042:	05d9      	lsls	r1, r3, #23
 800b044:	d50c      	bpl.n	800b060 <_scanf_i+0x178>
 800b046:	454d      	cmp	r5, r9
 800b048:	d908      	bls.n	800b05c <_scanf_i+0x174>
 800b04a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b04e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b052:	4632      	mov	r2, r6
 800b054:	4658      	mov	r0, fp
 800b056:	4798      	blx	r3
 800b058:	1e6f      	subs	r7, r5, #1
 800b05a:	463d      	mov	r5, r7
 800b05c:	454d      	cmp	r5, r9
 800b05e:	d02c      	beq.n	800b0ba <_scanf_i+0x1d2>
 800b060:	6822      	ldr	r2, [r4, #0]
 800b062:	f012 0210 	ands.w	r2, r2, #16
 800b066:	d11e      	bne.n	800b0a6 <_scanf_i+0x1be>
 800b068:	702a      	strb	r2, [r5, #0]
 800b06a:	6863      	ldr	r3, [r4, #4]
 800b06c:	9e00      	ldr	r6, [sp, #0]
 800b06e:	4649      	mov	r1, r9
 800b070:	4658      	mov	r0, fp
 800b072:	47b0      	blx	r6
 800b074:	6822      	ldr	r2, [r4, #0]
 800b076:	f8da 3000 	ldr.w	r3, [sl]
 800b07a:	f012 0f20 	tst.w	r2, #32
 800b07e:	d008      	beq.n	800b092 <_scanf_i+0x1aa>
 800b080:	1d1a      	adds	r2, r3, #4
 800b082:	f8ca 2000 	str.w	r2, [sl]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6018      	str	r0, [r3, #0]
 800b08a:	e009      	b.n	800b0a0 <_scanf_i+0x1b8>
 800b08c:	f04f 0800 	mov.w	r8, #0
 800b090:	e7d6      	b.n	800b040 <_scanf_i+0x158>
 800b092:	07d2      	lsls	r2, r2, #31
 800b094:	d5f4      	bpl.n	800b080 <_scanf_i+0x198>
 800b096:	1d1a      	adds	r2, r3, #4
 800b098:	f8ca 2000 	str.w	r2, [sl]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	8018      	strh	r0, [r3, #0]
 800b0a0:	68e3      	ldr	r3, [r4, #12]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	60e3      	str	r3, [r4, #12]
 800b0a6:	eba5 0509 	sub.w	r5, r5, r9
 800b0aa:	44a8      	add	r8, r5
 800b0ac:	6925      	ldr	r5, [r4, #16]
 800b0ae:	4445      	add	r5, r8
 800b0b0:	6125      	str	r5, [r4, #16]
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	b007      	add	sp, #28
 800b0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ba:	2001      	movs	r0, #1
 800b0bc:	e7fa      	b.n	800b0b4 <_scanf_i+0x1cc>
 800b0be:	bf00      	nop
 800b0c0:	0800b510 	.word	0x0800b510
 800b0c4:	0800b351 	.word	0x0800b351
 800b0c8:	0800b231 	.word	0x0800b231
 800b0cc:	0800b8a2 	.word	0x0800b8a2

0800b0d0 <__sccl>:
 800b0d0:	b570      	push	{r4, r5, r6, lr}
 800b0d2:	780b      	ldrb	r3, [r1, #0]
 800b0d4:	2b5e      	cmp	r3, #94	; 0x5e
 800b0d6:	bf13      	iteet	ne
 800b0d8:	1c4a      	addne	r2, r1, #1
 800b0da:	1c8a      	addeq	r2, r1, #2
 800b0dc:	784b      	ldrbeq	r3, [r1, #1]
 800b0de:	2100      	movne	r1, #0
 800b0e0:	bf08      	it	eq
 800b0e2:	2101      	moveq	r1, #1
 800b0e4:	1e44      	subs	r4, r0, #1
 800b0e6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800b0ea:	f804 1f01 	strb.w	r1, [r4, #1]!
 800b0ee:	42a5      	cmp	r5, r4
 800b0f0:	d1fb      	bne.n	800b0ea <__sccl+0x1a>
 800b0f2:	b913      	cbnz	r3, 800b0fa <__sccl+0x2a>
 800b0f4:	3a01      	subs	r2, #1
 800b0f6:	4610      	mov	r0, r2
 800b0f8:	bd70      	pop	{r4, r5, r6, pc}
 800b0fa:	f081 0401 	eor.w	r4, r1, #1
 800b0fe:	54c4      	strb	r4, [r0, r3]
 800b100:	4611      	mov	r1, r2
 800b102:	780d      	ldrb	r5, [r1, #0]
 800b104:	2d2d      	cmp	r5, #45	; 0x2d
 800b106:	f101 0201 	add.w	r2, r1, #1
 800b10a:	d006      	beq.n	800b11a <__sccl+0x4a>
 800b10c:	2d5d      	cmp	r5, #93	; 0x5d
 800b10e:	d0f2      	beq.n	800b0f6 <__sccl+0x26>
 800b110:	b90d      	cbnz	r5, 800b116 <__sccl+0x46>
 800b112:	460a      	mov	r2, r1
 800b114:	e7ef      	b.n	800b0f6 <__sccl+0x26>
 800b116:	462b      	mov	r3, r5
 800b118:	e7f1      	b.n	800b0fe <__sccl+0x2e>
 800b11a:	784e      	ldrb	r6, [r1, #1]
 800b11c:	2e5d      	cmp	r6, #93	; 0x5d
 800b11e:	d0fa      	beq.n	800b116 <__sccl+0x46>
 800b120:	42b3      	cmp	r3, r6
 800b122:	dcf8      	bgt.n	800b116 <__sccl+0x46>
 800b124:	3102      	adds	r1, #2
 800b126:	3301      	adds	r3, #1
 800b128:	429e      	cmp	r6, r3
 800b12a:	54c4      	strb	r4, [r0, r3]
 800b12c:	dcfb      	bgt.n	800b126 <__sccl+0x56>
 800b12e:	e7e8      	b.n	800b102 <__sccl+0x32>

0800b130 <_strtol_l.isra.0>:
 800b130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b134:	4680      	mov	r8, r0
 800b136:	4689      	mov	r9, r1
 800b138:	4692      	mov	sl, r2
 800b13a:	461f      	mov	r7, r3
 800b13c:	468b      	mov	fp, r1
 800b13e:	465d      	mov	r5, fp
 800b140:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b142:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b146:	f000 f950 	bl	800b3ea <__locale_ctype_ptr_l>
 800b14a:	4420      	add	r0, r4
 800b14c:	7846      	ldrb	r6, [r0, #1]
 800b14e:	f016 0608 	ands.w	r6, r6, #8
 800b152:	d10b      	bne.n	800b16c <_strtol_l.isra.0+0x3c>
 800b154:	2c2d      	cmp	r4, #45	; 0x2d
 800b156:	d10b      	bne.n	800b170 <_strtol_l.isra.0+0x40>
 800b158:	782c      	ldrb	r4, [r5, #0]
 800b15a:	2601      	movs	r6, #1
 800b15c:	f10b 0502 	add.w	r5, fp, #2
 800b160:	b167      	cbz	r7, 800b17c <_strtol_l.isra.0+0x4c>
 800b162:	2f10      	cmp	r7, #16
 800b164:	d114      	bne.n	800b190 <_strtol_l.isra.0+0x60>
 800b166:	2c30      	cmp	r4, #48	; 0x30
 800b168:	d00a      	beq.n	800b180 <_strtol_l.isra.0+0x50>
 800b16a:	e011      	b.n	800b190 <_strtol_l.isra.0+0x60>
 800b16c:	46ab      	mov	fp, r5
 800b16e:	e7e6      	b.n	800b13e <_strtol_l.isra.0+0xe>
 800b170:	2c2b      	cmp	r4, #43	; 0x2b
 800b172:	bf04      	itt	eq
 800b174:	782c      	ldrbeq	r4, [r5, #0]
 800b176:	f10b 0502 	addeq.w	r5, fp, #2
 800b17a:	e7f1      	b.n	800b160 <_strtol_l.isra.0+0x30>
 800b17c:	2c30      	cmp	r4, #48	; 0x30
 800b17e:	d127      	bne.n	800b1d0 <_strtol_l.isra.0+0xa0>
 800b180:	782b      	ldrb	r3, [r5, #0]
 800b182:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b186:	2b58      	cmp	r3, #88	; 0x58
 800b188:	d14b      	bne.n	800b222 <_strtol_l.isra.0+0xf2>
 800b18a:	786c      	ldrb	r4, [r5, #1]
 800b18c:	2710      	movs	r7, #16
 800b18e:	3502      	adds	r5, #2
 800b190:	2e00      	cmp	r6, #0
 800b192:	bf0c      	ite	eq
 800b194:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b198:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b19c:	2200      	movs	r2, #0
 800b19e:	fbb1 fef7 	udiv	lr, r1, r7
 800b1a2:	4610      	mov	r0, r2
 800b1a4:	fb07 1c1e 	mls	ip, r7, lr, r1
 800b1a8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b1ac:	2b09      	cmp	r3, #9
 800b1ae:	d811      	bhi.n	800b1d4 <_strtol_l.isra.0+0xa4>
 800b1b0:	461c      	mov	r4, r3
 800b1b2:	42a7      	cmp	r7, r4
 800b1b4:	dd1d      	ble.n	800b1f2 <_strtol_l.isra.0+0xc2>
 800b1b6:	1c53      	adds	r3, r2, #1
 800b1b8:	d007      	beq.n	800b1ca <_strtol_l.isra.0+0x9a>
 800b1ba:	4586      	cmp	lr, r0
 800b1bc:	d316      	bcc.n	800b1ec <_strtol_l.isra.0+0xbc>
 800b1be:	d101      	bne.n	800b1c4 <_strtol_l.isra.0+0x94>
 800b1c0:	45a4      	cmp	ip, r4
 800b1c2:	db13      	blt.n	800b1ec <_strtol_l.isra.0+0xbc>
 800b1c4:	fb00 4007 	mla	r0, r0, r7, r4
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b1ce:	e7eb      	b.n	800b1a8 <_strtol_l.isra.0+0x78>
 800b1d0:	270a      	movs	r7, #10
 800b1d2:	e7dd      	b.n	800b190 <_strtol_l.isra.0+0x60>
 800b1d4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b1d8:	2b19      	cmp	r3, #25
 800b1da:	d801      	bhi.n	800b1e0 <_strtol_l.isra.0+0xb0>
 800b1dc:	3c37      	subs	r4, #55	; 0x37
 800b1de:	e7e8      	b.n	800b1b2 <_strtol_l.isra.0+0x82>
 800b1e0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b1e4:	2b19      	cmp	r3, #25
 800b1e6:	d804      	bhi.n	800b1f2 <_strtol_l.isra.0+0xc2>
 800b1e8:	3c57      	subs	r4, #87	; 0x57
 800b1ea:	e7e2      	b.n	800b1b2 <_strtol_l.isra.0+0x82>
 800b1ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f0:	e7eb      	b.n	800b1ca <_strtol_l.isra.0+0x9a>
 800b1f2:	1c53      	adds	r3, r2, #1
 800b1f4:	d108      	bne.n	800b208 <_strtol_l.isra.0+0xd8>
 800b1f6:	2322      	movs	r3, #34	; 0x22
 800b1f8:	f8c8 3000 	str.w	r3, [r8]
 800b1fc:	4608      	mov	r0, r1
 800b1fe:	f1ba 0f00 	cmp.w	sl, #0
 800b202:	d107      	bne.n	800b214 <_strtol_l.isra.0+0xe4>
 800b204:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b208:	b106      	cbz	r6, 800b20c <_strtol_l.isra.0+0xdc>
 800b20a:	4240      	negs	r0, r0
 800b20c:	f1ba 0f00 	cmp.w	sl, #0
 800b210:	d00c      	beq.n	800b22c <_strtol_l.isra.0+0xfc>
 800b212:	b122      	cbz	r2, 800b21e <_strtol_l.isra.0+0xee>
 800b214:	3d01      	subs	r5, #1
 800b216:	f8ca 5000 	str.w	r5, [sl]
 800b21a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b21e:	464d      	mov	r5, r9
 800b220:	e7f9      	b.n	800b216 <_strtol_l.isra.0+0xe6>
 800b222:	2430      	movs	r4, #48	; 0x30
 800b224:	2f00      	cmp	r7, #0
 800b226:	d1b3      	bne.n	800b190 <_strtol_l.isra.0+0x60>
 800b228:	2708      	movs	r7, #8
 800b22a:	e7b1      	b.n	800b190 <_strtol_l.isra.0+0x60>
 800b22c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b230 <_strtol_r>:
 800b230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b232:	4c06      	ldr	r4, [pc, #24]	; (800b24c <_strtol_r+0x1c>)
 800b234:	4d06      	ldr	r5, [pc, #24]	; (800b250 <_strtol_r+0x20>)
 800b236:	6824      	ldr	r4, [r4, #0]
 800b238:	6a24      	ldr	r4, [r4, #32]
 800b23a:	2c00      	cmp	r4, #0
 800b23c:	bf08      	it	eq
 800b23e:	462c      	moveq	r4, r5
 800b240:	9400      	str	r4, [sp, #0]
 800b242:	f7ff ff75 	bl	800b130 <_strtol_l.isra.0>
 800b246:	b003      	add	sp, #12
 800b248:	bd30      	pop	{r4, r5, pc}
 800b24a:	bf00      	nop
 800b24c:	2000029c 	.word	0x2000029c
 800b250:	20000300 	.word	0x20000300

0800b254 <_strtoul_l.isra.0>:
 800b254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b258:	4680      	mov	r8, r0
 800b25a:	4689      	mov	r9, r1
 800b25c:	4692      	mov	sl, r2
 800b25e:	461e      	mov	r6, r3
 800b260:	460f      	mov	r7, r1
 800b262:	463d      	mov	r5, r7
 800b264:	9808      	ldr	r0, [sp, #32]
 800b266:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b26a:	f000 f8be 	bl	800b3ea <__locale_ctype_ptr_l>
 800b26e:	4420      	add	r0, r4
 800b270:	7843      	ldrb	r3, [r0, #1]
 800b272:	f013 0308 	ands.w	r3, r3, #8
 800b276:	d10a      	bne.n	800b28e <_strtoul_l.isra.0+0x3a>
 800b278:	2c2d      	cmp	r4, #45	; 0x2d
 800b27a:	d10a      	bne.n	800b292 <_strtoul_l.isra.0+0x3e>
 800b27c:	782c      	ldrb	r4, [r5, #0]
 800b27e:	2301      	movs	r3, #1
 800b280:	1cbd      	adds	r5, r7, #2
 800b282:	b15e      	cbz	r6, 800b29c <_strtoul_l.isra.0+0x48>
 800b284:	2e10      	cmp	r6, #16
 800b286:	d113      	bne.n	800b2b0 <_strtoul_l.isra.0+0x5c>
 800b288:	2c30      	cmp	r4, #48	; 0x30
 800b28a:	d009      	beq.n	800b2a0 <_strtoul_l.isra.0+0x4c>
 800b28c:	e010      	b.n	800b2b0 <_strtoul_l.isra.0+0x5c>
 800b28e:	462f      	mov	r7, r5
 800b290:	e7e7      	b.n	800b262 <_strtoul_l.isra.0+0xe>
 800b292:	2c2b      	cmp	r4, #43	; 0x2b
 800b294:	bf04      	itt	eq
 800b296:	782c      	ldrbeq	r4, [r5, #0]
 800b298:	1cbd      	addeq	r5, r7, #2
 800b29a:	e7f2      	b.n	800b282 <_strtoul_l.isra.0+0x2e>
 800b29c:	2c30      	cmp	r4, #48	; 0x30
 800b29e:	d125      	bne.n	800b2ec <_strtoul_l.isra.0+0x98>
 800b2a0:	782a      	ldrb	r2, [r5, #0]
 800b2a2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b2a6:	2a58      	cmp	r2, #88	; 0x58
 800b2a8:	d14a      	bne.n	800b340 <_strtoul_l.isra.0+0xec>
 800b2aa:	786c      	ldrb	r4, [r5, #1]
 800b2ac:	2610      	movs	r6, #16
 800b2ae:	3502      	adds	r5, #2
 800b2b0:	f04f 31ff 	mov.w	r1, #4294967295
 800b2b4:	2700      	movs	r7, #0
 800b2b6:	fbb1 f1f6 	udiv	r1, r1, r6
 800b2ba:	fb06 fe01 	mul.w	lr, r6, r1
 800b2be:	ea6f 0e0e 	mvn.w	lr, lr
 800b2c2:	4638      	mov	r0, r7
 800b2c4:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800b2c8:	2a09      	cmp	r2, #9
 800b2ca:	d811      	bhi.n	800b2f0 <_strtoul_l.isra.0+0x9c>
 800b2cc:	4614      	mov	r4, r2
 800b2ce:	42a6      	cmp	r6, r4
 800b2d0:	dd1d      	ble.n	800b30e <_strtoul_l.isra.0+0xba>
 800b2d2:	2f00      	cmp	r7, #0
 800b2d4:	db18      	blt.n	800b308 <_strtoul_l.isra.0+0xb4>
 800b2d6:	4281      	cmp	r1, r0
 800b2d8:	d316      	bcc.n	800b308 <_strtoul_l.isra.0+0xb4>
 800b2da:	d101      	bne.n	800b2e0 <_strtoul_l.isra.0+0x8c>
 800b2dc:	45a6      	cmp	lr, r4
 800b2de:	db13      	blt.n	800b308 <_strtoul_l.isra.0+0xb4>
 800b2e0:	fb00 4006 	mla	r0, r0, r6, r4
 800b2e4:	2701      	movs	r7, #1
 800b2e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2ea:	e7eb      	b.n	800b2c4 <_strtoul_l.isra.0+0x70>
 800b2ec:	260a      	movs	r6, #10
 800b2ee:	e7df      	b.n	800b2b0 <_strtoul_l.isra.0+0x5c>
 800b2f0:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800b2f4:	2a19      	cmp	r2, #25
 800b2f6:	d801      	bhi.n	800b2fc <_strtoul_l.isra.0+0xa8>
 800b2f8:	3c37      	subs	r4, #55	; 0x37
 800b2fa:	e7e8      	b.n	800b2ce <_strtoul_l.isra.0+0x7a>
 800b2fc:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800b300:	2a19      	cmp	r2, #25
 800b302:	d804      	bhi.n	800b30e <_strtoul_l.isra.0+0xba>
 800b304:	3c57      	subs	r4, #87	; 0x57
 800b306:	e7e2      	b.n	800b2ce <_strtoul_l.isra.0+0x7a>
 800b308:	f04f 37ff 	mov.w	r7, #4294967295
 800b30c:	e7eb      	b.n	800b2e6 <_strtoul_l.isra.0+0x92>
 800b30e:	2f00      	cmp	r7, #0
 800b310:	da09      	bge.n	800b326 <_strtoul_l.isra.0+0xd2>
 800b312:	2322      	movs	r3, #34	; 0x22
 800b314:	f8c8 3000 	str.w	r3, [r8]
 800b318:	f04f 30ff 	mov.w	r0, #4294967295
 800b31c:	f1ba 0f00 	cmp.w	sl, #0
 800b320:	d107      	bne.n	800b332 <_strtoul_l.isra.0+0xde>
 800b322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b326:	b103      	cbz	r3, 800b32a <_strtoul_l.isra.0+0xd6>
 800b328:	4240      	negs	r0, r0
 800b32a:	f1ba 0f00 	cmp.w	sl, #0
 800b32e:	d00c      	beq.n	800b34a <_strtoul_l.isra.0+0xf6>
 800b330:	b127      	cbz	r7, 800b33c <_strtoul_l.isra.0+0xe8>
 800b332:	3d01      	subs	r5, #1
 800b334:	f8ca 5000 	str.w	r5, [sl]
 800b338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b33c:	464d      	mov	r5, r9
 800b33e:	e7f9      	b.n	800b334 <_strtoul_l.isra.0+0xe0>
 800b340:	2430      	movs	r4, #48	; 0x30
 800b342:	2e00      	cmp	r6, #0
 800b344:	d1b4      	bne.n	800b2b0 <_strtoul_l.isra.0+0x5c>
 800b346:	2608      	movs	r6, #8
 800b348:	e7b2      	b.n	800b2b0 <_strtoul_l.isra.0+0x5c>
 800b34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800b350 <_strtoul_r>:
 800b350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b352:	4c06      	ldr	r4, [pc, #24]	; (800b36c <_strtoul_r+0x1c>)
 800b354:	4d06      	ldr	r5, [pc, #24]	; (800b370 <_strtoul_r+0x20>)
 800b356:	6824      	ldr	r4, [r4, #0]
 800b358:	6a24      	ldr	r4, [r4, #32]
 800b35a:	2c00      	cmp	r4, #0
 800b35c:	bf08      	it	eq
 800b35e:	462c      	moveq	r4, r5
 800b360:	9400      	str	r4, [sp, #0]
 800b362:	f7ff ff77 	bl	800b254 <_strtoul_l.isra.0>
 800b366:	b003      	add	sp, #12
 800b368:	bd30      	pop	{r4, r5, pc}
 800b36a:	bf00      	nop
 800b36c:	2000029c 	.word	0x2000029c
 800b370:	20000300 	.word	0x20000300

0800b374 <__submore>:
 800b374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b378:	460c      	mov	r4, r1
 800b37a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b37c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b380:	4299      	cmp	r1, r3
 800b382:	d11e      	bne.n	800b3c2 <__submore+0x4e>
 800b384:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b388:	f7fe ffd4 	bl	800a334 <_malloc_r>
 800b38c:	b918      	cbnz	r0, 800b396 <__submore+0x22>
 800b38e:	f04f 30ff 	mov.w	r0, #4294967295
 800b392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b39a:	63a3      	str	r3, [r4, #56]	; 0x38
 800b39c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b3a0:	6360      	str	r0, [r4, #52]	; 0x34
 800b3a2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b3a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b3aa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b3ae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b3b2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b3b6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b3ba:	6020      	str	r0, [r4, #0]
 800b3bc:	2000      	movs	r0, #0
 800b3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b3c4:	0077      	lsls	r7, r6, #1
 800b3c6:	463a      	mov	r2, r7
 800b3c8:	f000 f84c 	bl	800b464 <_realloc_r>
 800b3cc:	4605      	mov	r5, r0
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d0dd      	beq.n	800b38e <__submore+0x1a>
 800b3d2:	eb00 0806 	add.w	r8, r0, r6
 800b3d6:	4601      	mov	r1, r0
 800b3d8:	4632      	mov	r2, r6
 800b3da:	4640      	mov	r0, r8
 800b3dc:	f7fe ff48 	bl	800a270 <memcpy>
 800b3e0:	f8c4 8000 	str.w	r8, [r4]
 800b3e4:	6365      	str	r5, [r4, #52]	; 0x34
 800b3e6:	63a7      	str	r7, [r4, #56]	; 0x38
 800b3e8:	e7e8      	b.n	800b3bc <__submore+0x48>

0800b3ea <__locale_ctype_ptr_l>:
 800b3ea:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b3ee:	4770      	bx	lr

0800b3f0 <__locale_ctype_ptr>:
 800b3f0:	4b04      	ldr	r3, [pc, #16]	; (800b404 <__locale_ctype_ptr+0x14>)
 800b3f2:	4a05      	ldr	r2, [pc, #20]	; (800b408 <__locale_ctype_ptr+0x18>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	6a1b      	ldr	r3, [r3, #32]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	bf08      	it	eq
 800b3fc:	4613      	moveq	r3, r2
 800b3fe:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800b402:	4770      	bx	lr
 800b404:	2000029c 	.word	0x2000029c
 800b408:	20000300 	.word	0x20000300

0800b40c <__ascii_mbtowc>:
 800b40c:	b082      	sub	sp, #8
 800b40e:	b901      	cbnz	r1, 800b412 <__ascii_mbtowc+0x6>
 800b410:	a901      	add	r1, sp, #4
 800b412:	b142      	cbz	r2, 800b426 <__ascii_mbtowc+0x1a>
 800b414:	b14b      	cbz	r3, 800b42a <__ascii_mbtowc+0x1e>
 800b416:	7813      	ldrb	r3, [r2, #0]
 800b418:	600b      	str	r3, [r1, #0]
 800b41a:	7812      	ldrb	r2, [r2, #0]
 800b41c:	1c10      	adds	r0, r2, #0
 800b41e:	bf18      	it	ne
 800b420:	2001      	movne	r0, #1
 800b422:	b002      	add	sp, #8
 800b424:	4770      	bx	lr
 800b426:	4610      	mov	r0, r2
 800b428:	e7fb      	b.n	800b422 <__ascii_mbtowc+0x16>
 800b42a:	f06f 0001 	mvn.w	r0, #1
 800b42e:	e7f8      	b.n	800b422 <__ascii_mbtowc+0x16>

0800b430 <memmove>:
 800b430:	4288      	cmp	r0, r1
 800b432:	b510      	push	{r4, lr}
 800b434:	eb01 0302 	add.w	r3, r1, r2
 800b438:	d803      	bhi.n	800b442 <memmove+0x12>
 800b43a:	1e42      	subs	r2, r0, #1
 800b43c:	4299      	cmp	r1, r3
 800b43e:	d10c      	bne.n	800b45a <memmove+0x2a>
 800b440:	bd10      	pop	{r4, pc}
 800b442:	4298      	cmp	r0, r3
 800b444:	d2f9      	bcs.n	800b43a <memmove+0xa>
 800b446:	1881      	adds	r1, r0, r2
 800b448:	1ad2      	subs	r2, r2, r3
 800b44a:	42d3      	cmn	r3, r2
 800b44c:	d100      	bne.n	800b450 <memmove+0x20>
 800b44e:	bd10      	pop	{r4, pc}
 800b450:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b454:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b458:	e7f7      	b.n	800b44a <memmove+0x1a>
 800b45a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b45e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b462:	e7eb      	b.n	800b43c <memmove+0xc>

0800b464 <_realloc_r>:
 800b464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b466:	4607      	mov	r7, r0
 800b468:	4614      	mov	r4, r2
 800b46a:	460e      	mov	r6, r1
 800b46c:	b921      	cbnz	r1, 800b478 <_realloc_r+0x14>
 800b46e:	4611      	mov	r1, r2
 800b470:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b474:	f7fe bf5e 	b.w	800a334 <_malloc_r>
 800b478:	b922      	cbnz	r2, 800b484 <_realloc_r+0x20>
 800b47a:	f7fe ff0d 	bl	800a298 <_free_r>
 800b47e:	4625      	mov	r5, r4
 800b480:	4628      	mov	r0, r5
 800b482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b484:	f000 f821 	bl	800b4ca <_malloc_usable_size_r>
 800b488:	4284      	cmp	r4, r0
 800b48a:	d90f      	bls.n	800b4ac <_realloc_r+0x48>
 800b48c:	4621      	mov	r1, r4
 800b48e:	4638      	mov	r0, r7
 800b490:	f7fe ff50 	bl	800a334 <_malloc_r>
 800b494:	4605      	mov	r5, r0
 800b496:	2800      	cmp	r0, #0
 800b498:	d0f2      	beq.n	800b480 <_realloc_r+0x1c>
 800b49a:	4631      	mov	r1, r6
 800b49c:	4622      	mov	r2, r4
 800b49e:	f7fe fee7 	bl	800a270 <memcpy>
 800b4a2:	4631      	mov	r1, r6
 800b4a4:	4638      	mov	r0, r7
 800b4a6:	f7fe fef7 	bl	800a298 <_free_r>
 800b4aa:	e7e9      	b.n	800b480 <_realloc_r+0x1c>
 800b4ac:	4635      	mov	r5, r6
 800b4ae:	e7e7      	b.n	800b480 <_realloc_r+0x1c>

0800b4b0 <__ascii_wctomb>:
 800b4b0:	b149      	cbz	r1, 800b4c6 <__ascii_wctomb+0x16>
 800b4b2:	2aff      	cmp	r2, #255	; 0xff
 800b4b4:	bf85      	ittet	hi
 800b4b6:	238a      	movhi	r3, #138	; 0x8a
 800b4b8:	6003      	strhi	r3, [r0, #0]
 800b4ba:	700a      	strbls	r2, [r1, #0]
 800b4bc:	f04f 30ff 	movhi.w	r0, #4294967295
 800b4c0:	bf98      	it	ls
 800b4c2:	2001      	movls	r0, #1
 800b4c4:	4770      	bx	lr
 800b4c6:	4608      	mov	r0, r1
 800b4c8:	4770      	bx	lr

0800b4ca <_malloc_usable_size_r>:
 800b4ca:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	f1a0 0004 	sub.w	r0, r0, #4
 800b4d4:	bfbc      	itt	lt
 800b4d6:	580b      	ldrlt	r3, [r1, r0]
 800b4d8:	18c0      	addlt	r0, r0, r3
 800b4da:	4770      	bx	lr

0800b4dc <_sbrk>:
 800b4dc:	4b04      	ldr	r3, [pc, #16]	; (800b4f0 <_sbrk+0x14>)
 800b4de:	6819      	ldr	r1, [r3, #0]
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	b909      	cbnz	r1, 800b4e8 <_sbrk+0xc>
 800b4e4:	4903      	ldr	r1, [pc, #12]	; (800b4f4 <_sbrk+0x18>)
 800b4e6:	6019      	str	r1, [r3, #0]
 800b4e8:	6818      	ldr	r0, [r3, #0]
 800b4ea:	4402      	add	r2, r0
 800b4ec:	601a      	str	r2, [r3, #0]
 800b4ee:	4770      	bx	lr
 800b4f0:	200005c0 	.word	0x200005c0
 800b4f4:	2000ad48 	.word	0x2000ad48

0800b4f8 <_init>:
 800b4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fa:	bf00      	nop
 800b4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4fe:	bc08      	pop	{r3}
 800b500:	469e      	mov	lr, r3
 800b502:	4770      	bx	lr

0800b504 <_fini>:
 800b504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b506:	bf00      	nop
 800b508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b50a:	bc08      	pop	{r3}
 800b50c:	469e      	mov	lr, r3
 800b50e:	4770      	bx	lr
