
knee_can_impedance_position_control_new_store_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017808  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  08017998  08017998  00027998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017fe0  08017fe0  00027fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017fe8  08017fe8  00027fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017fec  08017fec  00027fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000047c  20000000  08017ff0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  0003047c  2**0
                  CONTENTS
  8 .bss          0000aba4  20000480  20000480  00030480  2**3
                  ALLOC
  9 ._user_heap_stack 00000400  2000b024  2000b024  00030480  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003047c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0004d8e2  00000000  00000000  000304ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000836e  00000000  00000000  0007dd8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002b00  00000000  00000000  00086100  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001b3eb  00000000  00000000  00088c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000b7d4  00000000  00000000  000a3feb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000af7bf  2**0
                  CONTENTS, READONLY
 17 .debug_ranges 00002808  00000000  00000000  000af840  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame  0000c110  00000000  00000000  000b2048  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000000df  00000000  00000000  000be158  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000480 	.word	0x20000480
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017980 	.word	0x08017980

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000484 	.word	0x20000484
 80001cc:	08017980 	.word	0x08017980

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b97a 	b.w	8000f4c <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	460d      	mov	r5, r1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	9e08      	ldr	r6, [sp, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d151      	bne.n	8000d24 <__udivmoddi4+0xb4>
 8000c80:	428a      	cmp	r2, r1
 8000c82:	4617      	mov	r7, r2
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0xf2>
 8000c86:	fab2 fe82 	clz	lr, r2
 8000c8a:	f1be 0f00 	cmp.w	lr, #0
 8000c8e:	d00b      	beq.n	8000ca8 <__udivmoddi4+0x38>
 8000c90:	f1ce 0c20 	rsb	ip, lr, #32
 8000c94:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c98:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c9c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ca0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ca4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ca8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cac:	0c25      	lsrs	r5, r4, #16
 8000cae:	fbbc f8fa 	udiv	r8, ip, sl
 8000cb2:	fa1f f987 	uxth.w	r9, r7
 8000cb6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cbe:	fb08 f309 	mul.w	r3, r8, r9
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x6c>
 8000cc6:	19ed      	adds	r5, r5, r7
 8000cc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ccc:	f080 8123 	bcs.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	f240 8120 	bls.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	443d      	add	r5, r7
 8000cdc:	1aed      	subs	r5, r5, r3
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ce4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ce8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cec:	fb00 f909 	mul.w	r9, r0, r9
 8000cf0:	45a1      	cmp	r9, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x98>
 8000cf4:	19e4      	adds	r4, r4, r7
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 810a 	bcs.w	8000f12 <__udivmoddi4+0x2a2>
 8000cfe:	45a1      	cmp	r9, r4
 8000d00:	f240 8107 	bls.w	8000f12 <__udivmoddi4+0x2a2>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	eba4 0409 	sub.w	r4, r4, r9
 8000d0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d10:	2100      	movs	r1, #0
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d061      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d16:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	6034      	str	r4, [r6, #0]
 8000d1e:	6073      	str	r3, [r6, #4]
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0xc8>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d054      	beq.n	8000dd6 <__udivmoddi4+0x166>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	f040 808e 	bne.w	8000e5e <__udivmoddi4+0x1ee>
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xdc>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2d0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	46ac      	mov	ip, r5
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d03f      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d5a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	b912      	cbnz	r2, 8000d6a <__udivmoddi4+0xfa>
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d6a:	fab7 fe87 	clz	lr, r7
 8000d6e:	f1be 0f00 	cmp.w	lr, #0
 8000d72:	d134      	bne.n	8000dde <__udivmoddi4+0x16e>
 8000d74:	1beb      	subs	r3, r5, r7
 8000d76:	0c3a      	lsrs	r2, r7, #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d82:	0c25      	lsrs	r5, r4, #16
 8000d84:	fb02 3318 	mls	r3, r2, r8, r3
 8000d88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d8c:	fb0c f308 	mul.w	r3, ip, r8
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x134>
 8000d94:	19ed      	adds	r5, r5, r7
 8000d96:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x132>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	f200 80d1 	bhi.w	8000f44 <__udivmoddi4+0x2d4>
 8000da2:	4680      	mov	r8, r0
 8000da4:	1aed      	subs	r5, r5, r3
 8000da6:	b2a3      	uxth	r3, r4
 8000da8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dac:	fb02 5510 	mls	r5, r2, r0, r5
 8000db0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000db4:	fb0c fc00 	mul.w	ip, ip, r0
 8000db8:	45a4      	cmp	ip, r4
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x15c>
 8000dbc:	19e4      	adds	r4, r4, r7
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x15a>
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	f200 80b8 	bhi.w	8000f3a <__udivmoddi4+0x2ca>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	eba4 040c 	sub.w	r4, r4, ip
 8000dd0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd4:	e79d      	b.n	8000d12 <__udivmoddi4+0xa2>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	f1ce 0420 	rsb	r4, lr, #32
 8000de2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000de6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dea:	fa20 f804 	lsr.w	r8, r0, r4
 8000dee:	0c3a      	lsrs	r2, r7, #16
 8000df0:	fa25 f404 	lsr.w	r4, r5, r4
 8000df4:	ea48 0803 	orr.w	r8, r8, r3
 8000df8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dfc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e00:	fb02 4411 	mls	r4, r2, r1, r4
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e0c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e10:	42ab      	cmp	r3, r5
 8000e12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e16:	d909      	bls.n	8000e2c <__udivmoddi4+0x1bc>
 8000e18:	19ed      	adds	r5, r5, r7
 8000e1a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e1e:	f080 808a 	bcs.w	8000f36 <__udivmoddi4+0x2c6>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	f240 8087 	bls.w	8000f36 <__udivmoddi4+0x2c6>
 8000e28:	3902      	subs	r1, #2
 8000e2a:	443d      	add	r5, r7
 8000e2c:	1aeb      	subs	r3, r5, r3
 8000e2e:	fa1f f588 	uxth.w	r5, r8
 8000e32:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e36:	fb02 3310 	mls	r3, r2, r0, r3
 8000e3a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e3e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1e6>
 8000e46:	19ed      	adds	r5, r5, r7
 8000e48:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4c:	d26f      	bcs.n	8000f2e <__udivmoddi4+0x2be>
 8000e4e:	42ab      	cmp	r3, r5
 8000e50:	d96d      	bls.n	8000f2e <__udivmoddi4+0x2be>
 8000e52:	3802      	subs	r0, #2
 8000e54:	443d      	add	r5, r7
 8000e56:	1aeb      	subs	r3, r5, r3
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	e78f      	b.n	8000d7e <__udivmoddi4+0x10e>
 8000e5e:	f1c1 0720 	rsb	r7, r1, #32
 8000e62:	fa22 f807 	lsr.w	r8, r2, r7
 8000e66:	408b      	lsls	r3, r1
 8000e68:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6c:	ea48 0303 	orr.w	r3, r8, r3
 8000e70:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e7e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e82:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e86:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e8a:	fa1f f883 	uxth.w	r8, r3
 8000e8e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e92:	fb09 f408 	mul.w	r4, r9, r8
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x244>
 8000ea2:	18ed      	adds	r5, r5, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	d243      	bcs.n	8000f32 <__udivmoddi4+0x2c2>
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	d941      	bls.n	8000f32 <__udivmoddi4+0x2c2>
 8000eae:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb2:	441d      	add	r5, r3
 8000eb4:	1b2d      	subs	r5, r5, r4
 8000eb6:	fa1f fe8e 	uxth.w	lr, lr
 8000eba:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ebe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ec2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ec6:	fb00 f808 	mul.w	r8, r0, r8
 8000eca:	45a0      	cmp	r8, r4
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x26e>
 8000ece:	18e4      	adds	r4, r4, r3
 8000ed0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ed4:	d229      	bcs.n	8000f2a <__udivmoddi4+0x2ba>
 8000ed6:	45a0      	cmp	r8, r4
 8000ed8:	d927      	bls.n	8000f2a <__udivmoddi4+0x2ba>
 8000eda:	3802      	subs	r0, #2
 8000edc:	441c      	add	r4, r3
 8000ede:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	454c      	cmp	r4, r9
 8000eec:	46c6      	mov	lr, r8
 8000eee:	464d      	mov	r5, r9
 8000ef0:	d315      	bcc.n	8000f1e <__udivmoddi4+0x2ae>
 8000ef2:	d012      	beq.n	8000f1a <__udivmoddi4+0x2aa>
 8000ef4:	b156      	cbz	r6, 8000f0c <__udivmoddi4+0x29c>
 8000ef6:	ebba 030e 	subs.w	r3, sl, lr
 8000efa:	eb64 0405 	sbc.w	r4, r4, r5
 8000efe:	fa04 f707 	lsl.w	r7, r4, r7
 8000f02:	40cb      	lsrs	r3, r1
 8000f04:	431f      	orrs	r7, r3
 8000f06:	40cc      	lsrs	r4, r1
 8000f08:	6037      	str	r7, [r6, #0]
 8000f0a:	6074      	str	r4, [r6, #4]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	4618      	mov	r0, r3
 8000f14:	e6f8      	b.n	8000d08 <__udivmoddi4+0x98>
 8000f16:	4690      	mov	r8, r2
 8000f18:	e6e0      	b.n	8000cdc <__udivmoddi4+0x6c>
 8000f1a:	45c2      	cmp	sl, r8
 8000f1c:	d2ea      	bcs.n	8000ef4 <__udivmoddi4+0x284>
 8000f1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f22:	eb69 0503 	sbc.w	r5, r9, r3
 8000f26:	3801      	subs	r0, #1
 8000f28:	e7e4      	b.n	8000ef4 <__udivmoddi4+0x284>
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	e7d7      	b.n	8000ede <__udivmoddi4+0x26e>
 8000f2e:	4640      	mov	r0, r8
 8000f30:	e791      	b.n	8000e56 <__udivmoddi4+0x1e6>
 8000f32:	4681      	mov	r9, r0
 8000f34:	e7be      	b.n	8000eb4 <__udivmoddi4+0x244>
 8000f36:	4601      	mov	r1, r0
 8000f38:	e778      	b.n	8000e2c <__udivmoddi4+0x1bc>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	443c      	add	r4, r7
 8000f3e:	e745      	b.n	8000dcc <__udivmoddi4+0x15c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xe6>
 8000f44:	f1a8 0802 	sub.w	r8, r8, #2
 8000f48:	443d      	add	r5, r7
 8000f4a:	e72b      	b.n	8000da4 <__udivmoddi4+0x134>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <EPOS4_data_framer>:
#include "EPOS4.h"
#include "time_functions.h"


//This is useful for later adding in functionality. Should work for any Client to Server SDO
void EPOS4_data_framer(uint8_t * data, uint16_t object, uint8_t subindex, uint32_t value){
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	817b      	strh	r3, [r7, #10]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	727b      	strb	r3, [r7, #9]
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2222      	movs	r2, #34	; 0x22
 8000f66:	701a      	strb	r2, [r3, #0]
    data[1] = (0x00 | object); //Index LowByte
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	897a      	ldrh	r2, [r7, #10]
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	701a      	strb	r2, [r3, #0]
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	3302      	adds	r3, #2
 8000f76:	897a      	ldrh	r2, [r7, #10]
 8000f78:	0a12      	lsrs	r2, r2, #8
 8000f7a:	b292      	uxth	r2, r2
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	701a      	strb	r2, [r3, #0]
    data[3] = subindex; //subindex
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	3303      	adds	r3, #3
 8000f84:	7a7a      	ldrb	r2, [r7, #9]
 8000f86:	701a      	strb	r2, [r3, #0]
    data[4] = (0x00 | value); //SDO Byte 0
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	701a      	strb	r2, [r3, #0]
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3305      	adds	r3, #5
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	0a12      	lsrs	r2, r2, #8
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	701a      	strb	r2, [r3, #0]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3306      	adds	r3, #6
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	0c12      	lsrs	r2, r2, #16
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	701a      	strb	r2, [r3, #0]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3307      	adds	r3, #7
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	0e12      	lsrs	r2, r2, #24
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	701a      	strb	r2, [r3, #0]
}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <EPOS4_set_operation_mode>:

void EPOS4_set_operation_mode(uint16_t CAN_ID, uint32_t mode){
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	6039      	str	r1, [r7, #0]
 8000fcc:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];
//    uint16_t object = 0x6060;
//    uint8_t subindex = 0x00;

    EPOS4_data_framer(data, 0x6060 , 0, mode);
 8000fce:	f107 0008 	add.w	r0, r7, #8
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f246 0160 	movw	r1, #24672	; 0x6060
 8000fda:	f7ff ffb9 	bl	8000f50 <EPOS4_data_framer>

    CAN_transmit(CAN_ID, 8, data);
 8000fde:	f107 0208 	add.w	r2, r7, #8
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	2108      	movs	r1, #8
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 fed3 	bl	8002d92 <CAN_transmit>
    delay_us(10000);
 8000fec:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ff0:	f005 fc30 	bl	8006854 <delay_us>
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <EPOS4_enable>:

void EPOS4_enable(uint16_t CAN_ID){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]

    uint8_t data[8];
//    uint16_t object = 0x6040;
//    int subindex = 0x00;
//    uint32_t value = 0x0006;
    EPOS4_data_framer(data, 0x6040, 0x00, 0x06);
 8001006:	f107 0008 	add.w	r0, r7, #8
 800100a:	2306      	movs	r3, #6
 800100c:	2200      	movs	r2, #0
 800100e:	f246 0140 	movw	r1, #24640	; 0x6040
 8001012:	f7ff ff9d 	bl	8000f50 <EPOS4_data_framer>

    CAN_transmit(CAN_ID, 8, data);
 8001016:	f107 0208 	add.w	r2, r7, #8
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	2108      	movs	r1, #8
 800101e:	4618      	mov	r0, r3
 8001020:	f001 feb7 	bl	8002d92 <CAN_transmit>
    delay_us(10000);
 8001024:	f242 7010 	movw	r0, #10000	; 0x2710
 8001028:	f005 fc14 	bl	8006854 <delay_us>

    EPOS4_enable2(CAN_ID);
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f804 	bl	800103c <EPOS4_enable2>
//

//    CAN_transmit(CAN_ID, data);
// delay_us(10000);

}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <EPOS4_enable2>:


void EPOS4_enable2(uint16_t CAN_ID){
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];
//    int object = 0x6040;
//    int subindex = 0x00;
//    int value = 0x000F;

    EPOS4_data_framer(data, 0x6040, 0x00, 0x0F);
 8001046:	f107 0008 	add.w	r0, r7, #8
 800104a:	230f      	movs	r3, #15
 800104c:	2200      	movs	r2, #0
 800104e:	f246 0140 	movw	r1, #24640	; 0x6040
 8001052:	f7ff ff7d 	bl	8000f50 <EPOS4_data_framer>
    CAN_transmit(CAN_ID, 8, data);
 8001056:	f107 0208 	add.w	r2, r7, #8
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	2108      	movs	r1, #8
 800105e:	4618      	mov	r0, r3
 8001060:	f001 fe97 	bl	8002d92 <CAN_transmit>
    delay_us(10000);
 8001064:	f242 7010 	movw	r0, #10000	; 0x2710
 8001068:	f005 fbf4 	bl	8006854 <delay_us>

}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <EPOS4_CST_apply_torque>:
    CAN_transmit(CAN_ID, 8, data);
    delay_us(10000);
}


void EPOS4_CST_apply_torque(uint16_t CAN_ID, uint32_t torque){
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	80fb      	strh	r3, [r7, #6]
//    }
//    else{
//
//    }

    EPOS4_data_framer(data, 0x6071, 0x00, torque);
 8001080:	f107 0008 	add.w	r0, r7, #8
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	f246 0171 	movw	r1, #24689	; 0x6071
 800108c:	f7ff ff60 	bl	8000f50 <EPOS4_data_framer>

    CAN_transmit(CAN_ID, 8, data);
 8001090:	f107 0208 	add.w	r2, r7, #8
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	2108      	movs	r1, #8
 8001098:	4618      	mov	r0, r3
 800109a:	f001 fe7a 	bl	8002d92 <CAN_transmit>
    delay_us(50); //1500
 800109e:	2032      	movs	r0, #50	; 0x32
 80010a0:	f005 fbd8 	bl	8006854 <delay_us>
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <EPOS4_clear_errors>:

    CAN_transmit(CAN_ID, 8, data);
    delay_us(1500);
}

void EPOS4_clear_errors(uint16_t CAN_ID){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[8];
//    int object = 0x6040;
//    int subindex = 0x00;
//    int value = 0x0080;
    EPOS4_data_framer(data, 0x6040, 0x00, 0x80);
 80010b6:	f107 0008 	add.w	r0, r7, #8
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	2200      	movs	r2, #0
 80010be:	f246 0140 	movw	r1, #24640	; 0x6040
 80010c2:	f7ff ff45 	bl	8000f50 <EPOS4_data_framer>

    CAN_transmit(CAN_ID, 8, data);
 80010c6:	f107 0208 	add.w	r2, r7, #8
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	2108      	movs	r1, #8
 80010ce:	4618      	mov	r0, r3
 80010d0:	f001 fe5f 	bl	8002d92 <CAN_transmit>
//    delay_us(200);
//    delay_us(1500); // testing by commenting it
}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <Impedance>:
    //3rd polynomial fit
    double poly_coefficient[4] = {2.22320112553112e-08,-9.47330958490815e-06,0.000674466762924094,0.0316020276371335}; //3rd order to 0 order
    return poly_coefficient[0]*pow(KneeAngle,3.0)+poly_coefficient[1]*pow(KneeAngle,2.0)+poly_coefficient[2]*KneeAngle+poly_coefficient[3];
}

double Impedance(double KneeAngle, double Knee_Velocity, double K1, double B, double Theta_E){
 80010dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010e0:	b08a      	sub	sp, #40	; 0x28
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	ed87 0b08 	vstr	d0, [r7, #32]
 80010e8:	ed87 1b06 	vstr	d1, [r7, #24]
 80010ec:	ed87 2b04 	vstr	d2, [r7, #16]
 80010f0:	ed87 3b02 	vstr	d3, [r7, #8]
 80010f4:	ed87 4b00 	vstr	d4, [r7]
    
    return -1*(K1*(Theta_E-KneeAngle)-B*Knee_Velocity);
 80010f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80010fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001100:	f7ff f8c2 	bl	8000288 <__aeabi_dsub>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001110:	f7ff fa6e 	bl	80005f0 <__aeabi_dmul>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4690      	mov	r8, r2
 800111a:	4699      	mov	r9, r3
 800111c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001120:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001124:	f7ff fa64 	bl	80005f0 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4640      	mov	r0, r8
 800112e:	4649      	mov	r1, r9
 8001130:	f7ff f8aa 	bl	8000288 <__aeabi_dsub>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4614      	mov	r4, r2
 800113a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800113e:	ec45 4b17 	vmov	d7, r4, r5
}
 8001142:	eeb0 0a47 	vmov.f32	s0, s14
 8001146:	eef0 0a67 	vmov.f32	s1, s15
 800114a:	3728      	adds	r7, #40	; 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001154 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800115e:	4909      	ldr	r1, [pc, #36]	; (8001184 <NVIC_EnableIRQ+0x30>)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	095b      	lsrs	r3, r3, #5
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	f002 021f 	and.w	r2, r2, #31
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e100 	.word	0xe000e100

08001188 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	da0b      	bge.n	80011b4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	490d      	ldr	r1, [pc, #52]	; (80011d4 <NVIC_SetPriority+0x4c>)
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	f003 030f 	and.w	r3, r3, #15
 80011a4:	3b04      	subs	r3, #4
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b2:	e009      	b.n	80011c8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	4908      	ldr	r1, [pc, #32]	; (80011d8 <NVIC_SetPriority+0x50>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00
 80011d8:	e000e100 	.word	0xe000e100

080011dc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status.
  */
uint8_t BSP_SD_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
  uint8_t state = MSD_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	71fb      	strb	r3, [r7, #7]

  /* uSD device interface configuration */
  uSdHandle.Instance = SDMMC1;
 80011e6:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <BSP_SD_Init+0x84>)
 80011e8:	4a1e      	ldr	r2, [pc, #120]	; (8001264 <BSP_SD_Init+0x88>)
 80011ea:	601a      	str	r2, [r3, #0]

  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80011ec:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <BSP_SD_Init+0x84>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80011f2:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <BSP_SD_Init+0x84>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <BSP_SD_Init+0x84>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <BSP_SD_Init+0x84>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <BSP_SD_Init+0x84>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = 1;    // Checked by Masudul,
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <BSP_SD_Init+0x84>)
 800120c:	2201      	movs	r2, #1
 800120e:	619a      	str	r2, [r3, #24]

  /* Check if the SD card is plugged in the slot */
  SD_MspInit();
 8001210:	f000 f8f4 	bl	80013fc <SD_MspInit>

  if(BSP_SD_IsDetected() != SD_PRESENT)
 8001214:	f000 f82a 	bl	800126c <BSP_SD_IsDetected>
 8001218:	4603      	mov	r3, r0
 800121a:	2b01      	cmp	r3, #1
 800121c:	d001      	beq.n	8001222 <BSP_SD_Init+0x46>
  {
    return MSD_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e019      	b.n	8001256 <BSP_SD_Init+0x7a>
  }

  /* HAL SD initialization */
  if(HAL_SD_Init(&uSdHandle, &uSdCardInfo) != SD_OK)
 8001222:	4911      	ldr	r1, [pc, #68]	; (8001268 <BSP_SD_Init+0x8c>)
 8001224:	480e      	ldr	r0, [pc, #56]	; (8001260 <BSP_SD_Init+0x84>)
 8001226:	f009 fe6f 	bl	800af08 <HAL_SD_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <BSP_SD_Init+0x58>
  {
    state = MSD_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	71fb      	strb	r3, [r7, #7]
  }

  /* Configure SD Bus width */
  if(state == MSD_OK)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10c      	bne.n	8001254 <BSP_SD_Init+0x78>
  {
    /* Enable wide operation */
    if(HAL_SD_WideBusOperation_Config(&uSdHandle, SDMMC_BUS_WIDE_4B) != SD_OK)
 800123a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800123e:	4808      	ldr	r0, [pc, #32]	; (8001260 <BSP_SD_Init+0x84>)
 8001240:	f00a fcf4 	bl	800bc2c <HAL_SD_WideBusOperation_Config>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d002      	beq.n	8001250 <BSP_SD_Init+0x74>
    {
      state = MSD_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	e001      	b.n	8001254 <BSP_SD_Init+0x78>
    }
    else
    {
      state = MSD_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	71fb      	strb	r3, [r7, #7]
    }
  }

  return  state;
 8001254:	79fb      	ldrb	r3, [r7, #7]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200088b8 	.word	0x200088b8
 8001264:	40012800 	.word	0x40012800
 8001268:	200004a0 	.word	0x200004a0

0800126c <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8001272:	2301      	movs	r3, #1
 8001274:	71fb      	strb	r3, [r7, #7]
  
//  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
//  {
//   status = SD_NOT_PRESENT;
//  }
  return status;
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	b2db      	uxtb	r3, r3
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <BSP_SD_ReadBlocks_DMA>:
  * @param  BlockSize: SD card data block size, that should be 512
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumOfBlocks)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af02      	add	r7, sp, #8
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	e9c7 2300 	strd	r2, r3, [r7]
  uint8_t state = MSD_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	75fb      	strb	r3, [r7, #23]
  
  /* Invalidate the dma tx handle*/
  uSdHandle.hdmatx = NULL;
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <BSP_SD_ReadBlocks_DMA+0x78>)
 800129a:	2200      	movs	r2, #0
 800129c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Prepare the dma channel for a read operation */
  state = ((SD_DMAConfigRx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 800129e:	4818      	ldr	r0, [pc, #96]	; (8001300 <BSP_SD_ReadBlocks_DMA+0x78>)
 80012a0:	f000 f924 	bl	80014ec <SD_DMAConfigRx>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	bf14      	ite	ne
 80012aa:	2301      	movne	r3, #1
 80012ac:	2300      	moveq	r3, #0
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	75fb      	strb	r3, [r7, #23]
  
  if(state == MSD_OK)
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d11e      	bne.n	80012f6 <BSP_SD_ReadBlocks_DMA+0x6e>
  {
    /* Read block(s) in DMA transfer mode */
    state = ((HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012c4:	68f9      	ldr	r1, [r7, #12]
 80012c6:	480e      	ldr	r0, [pc, #56]	; (8001300 <BSP_SD_ReadBlocks_DMA+0x78>)
 80012c8:	f009 fe92 	bl	800aff0 <HAL_SD_ReadBlocks_DMA>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	bf14      	ite	ne
 80012d2:	2301      	movne	r3, #1
 80012d4:	2300      	moveq	r3, #0
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	75fb      	strb	r3, [r7, #23]

    /* Wait until transfer is complete */
    if(state == MSD_OK)
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d10a      	bne.n	80012f6 <BSP_SD_ReadBlocks_DMA+0x6e>
    {
      state = ((HAL_SD_CheckReadOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 80012e0:	4908      	ldr	r1, [pc, #32]	; (8001304 <BSP_SD_ReadBlocks_DMA+0x7c>)
 80012e2:	4807      	ldr	r0, [pc, #28]	; (8001300 <BSP_SD_ReadBlocks_DMA+0x78>)
 80012e4:	f00a f82e 	bl	800b344 <HAL_SD_CheckReadOperation>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	bf14      	ite	ne
 80012ee:	2301      	movne	r3, #1
 80012f0:	2300      	moveq	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  return state; 
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200088b8 	.word	0x200088b8
 8001304:	00989680 	.word	0x00989680

08001308 <BSP_SD_WriteBlocks_DMA>:
  * @param  BlockSize: SD card data block size, that should be 512
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumOfBlocks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af02      	add	r7, sp, #8
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	e9c7 2300 	strd	r2, r3, [r7]
  uint8_t state = MSD_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	75fb      	strb	r3, [r7, #23]
  
  /* Invalidate the dma rx handle*/
  uSdHandle.hdmarx = NULL;
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <BSP_SD_WriteBlocks_DMA+0x78>)
 800131a:	2200      	movs	r2, #0
 800131c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Prepare the dma channel for a read operation */
  state = ((SD_DMAConfigTx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 800131e:	4818      	ldr	r0, [pc, #96]	; (8001380 <BSP_SD_WriteBlocks_DMA+0x78>)
 8001320:	f000 f92c 	bl	800157c <SD_DMAConfigTx>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf14      	ite	ne
 800132a:	2301      	movne	r3, #1
 800132c:	2300      	moveq	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	75fb      	strb	r3, [r7, #23]
  
  if(state == MSD_OK)
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d11e      	bne.n	8001376 <BSP_SD_WriteBlocks_DMA+0x6e>
  {
    /* Write block(s) in DMA transfer mode */
    state = ((HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001344:	68f9      	ldr	r1, [r7, #12]
 8001346:	480e      	ldr	r0, [pc, #56]	; (8001380 <BSP_SD_WriteBlocks_DMA+0x78>)
 8001348:	f009 ff24 	bl	800b194 <HAL_SD_WriteBlocks_DMA>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	bf14      	ite	ne
 8001352:	2301      	movne	r3, #1
 8001354:	2300      	moveq	r3, #0
 8001356:	b2db      	uxtb	r3, r3
 8001358:	75fb      	strb	r3, [r7, #23]

    /* Wait until transfer is complete */
    if(state == MSD_OK)
 800135a:	7dfb      	ldrb	r3, [r7, #23]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10a      	bne.n	8001376 <BSP_SD_WriteBlocks_DMA+0x6e>
    {
      state = ((HAL_SD_CheckWriteOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001360:	4908      	ldr	r1, [pc, #32]	; (8001384 <BSP_SD_WriteBlocks_DMA+0x7c>)
 8001362:	4807      	ldr	r0, [pc, #28]	; (8001380 <BSP_SD_WriteBlocks_DMA+0x78>)
 8001364:	f00a f84b 	bl	800b3fe <HAL_SD_CheckWriteOperation>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	bf14      	ite	ne
 800136e:	2301      	movne	r3, #1
 8001370:	2300      	moveq	r3, #0
 8001372:	b2db      	uxtb	r3, r3
 8001374:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  return state;
 8001376:	7dfb      	ldrb	r3, [r7, #23]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200088b8 	.word	0x200088b8
 8001384:	00989680 	.word	0x00989680

08001388 <BSP_SD_IRQHandler>:
/**
  * @brief  Handles SD card interrupt request.
  * @retval None
  */
void BSP_SD_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&uSdHandle);
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <BSP_SD_IRQHandler+0x10>)
 800138e:	f00a f89a 	bl	800b4c6 <HAL_SD_IRQHandler>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200088b8 	.word	0x200088b8

0800139c <BSP_SD_DMA_Tx_IRQHandler>:
/**
  * @brief  Handles SD DMA Tx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Tx_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(uSdHandle.hdmatx);
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <BSP_SD_DMA_Tx_IRQHandler+0x14>)
 80013a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a4:	4618      	mov	r0, r3
 80013a6:	f007 fb94 	bl	8008ad2 <HAL_DMA_IRQHandler>
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200088b8 	.word	0x200088b8

080013b4 <BSP_SD_DMA_Rx_IRQHandler>:
/**
  * @brief  Handles SD DMA Rx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Rx_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <BSP_SD_DMA_Rx_IRQHandler+0x14>)
 80013ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013bc:	4618      	mov	r0, r3
 80013be:	f007 fb88 	bl	8008ad2 <HAL_DMA_IRQHandler>
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200088b8 	.word	0x200088b8

080013cc <BSP_SD_GetStatus>:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  *            @arg  SD_TRANSFER_ERROR: Data transfer error 
  */
HAL_SD_TransferStateTypedef BSP_SD_GetStatus(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  return(HAL_SD_GetStatus(&uSdHandle));
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <BSP_SD_GetStatus+0x10>)
 80013d2:	f00a fcb7 	bl	800bd44 <HAL_SD_GetStatus>
 80013d6:	4603      	mov	r3, r0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200088b8 	.word	0x200088b8

080013e0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypedef *CardInfo)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_Get_CardInfo(&uSdHandle, CardInfo);
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4803      	ldr	r0, [pc, #12]	; (80013f8 <BSP_SD_GetCardInfo+0x18>)
 80013ec:	f00a f916 	bl	800b61c <HAL_SD_Get_CardInfo>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200088b8 	.word	0x200088b8

080013fc <SD_MspInit>:
/**
  * @brief  Initializes the SD MSP.
  * @retval None
  */
static void SD_MspInit(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpioinitstruct = {0};
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

  /* Enable SDMMC1 clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001412:	4a32      	ldr	r2, [pc, #200]	; (80014dc <SD_MspInit+0xe0>)
 8001414:	4b31      	ldr	r3, [pc, #196]	; (80014dc <SD_MspInit+0xe0>)
 8001416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001418:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800141c:	6613      	str	r3, [r2, #96]	; 0x60
 800141e:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <SD_MspInit+0xe0>)
 8001420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]

  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 800142a:	4a2c      	ldr	r2, [pc, #176]	; (80014dc <SD_MspInit+0xe0>)
 800142c:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <SD_MspInit+0xe0>)
 800142e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6493      	str	r3, [r2, #72]	; 0x48
 8001436:	4b29      	ldr	r3, [pc, #164]	; (80014dc <SD_MspInit+0xe0>)
 8001438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	4a26      	ldr	r2, [pc, #152]	; (80014dc <SD_MspInit+0xe0>)
 8001444:	4b25      	ldr	r3, [pc, #148]	; (80014dc <SD_MspInit+0xe0>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144e:	4b23      	ldr	r3, [pc, #140]	; (80014dc <SD_MspInit+0xe0>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145a:	4a20      	ldr	r2, [pc, #128]	; (80014dc <SD_MspInit+0xe0>)
 800145c:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <SD_MspInit+0xe0>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001460:	f043 0308 	orr.w	r3, r3, #8
 8001464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <SD_MspInit+0xe0>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __SD_DETECT_GPIO_CLK_ENABLE();
 8001472:	4a1a      	ldr	r2, [pc, #104]	; (80014dc <SD_MspInit+0xe0>)
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <SD_MspInit+0xe0>)
 8001476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <SD_MspInit+0xe0>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]

  /* Common GPIO configuration */
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	61bb      	str	r3, [r7, #24]
  gpioinitstruct.Pull      = GPIO_PULLUP;
 800148e:	2301      	movs	r3, #1
 8001490:	61fb      	str	r3, [r7, #28]
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	623b      	str	r3, [r7, #32]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 8001496:	230c      	movs	r3, #12
 8001498:	627b      	str	r3, [r7, #36]	; 0x24

  /* GPIOC configuration */
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800149a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800149e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	480e      	ldr	r0, [pc, #56]	; (80014e0 <SD_MspInit+0xe4>)
 80014a8:	f007 fbe4 	bl	8008c74 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpioinitstruct.Pin = GPIO_PIN_2;
 80014ac:	2304      	movs	r3, #4
 80014ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	480b      	ldr	r0, [pc, #44]	; (80014e4 <SD_MspInit+0xe8>)
 80014b8:	f007 fbdc 	bl	8008c74 <HAL_GPIO_Init>
  /* NVIC configuration for SDMMC1 interrupts */
//  HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
//  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);

//  NVIC_SetPriority(SDMMC1_IRQn, 1);
  NVIC_EnableIRQ(SDMMC1_IRQn);
 80014bc:	2031      	movs	r0, #49	; 0x31
 80014be:	f7ff fe49 	bl	8001154 <NVIC_EnableIRQ>

  /* DMA initialization should be done here but , as there is only one channel for RX and TX it is configured and done directly when required*/
  if((SD_DMAConfigTx(&uSdHandle) == SD_OK) )
 80014c2:	4809      	ldr	r0, [pc, #36]	; (80014e8 <SD_MspInit+0xec>)
 80014c4:	f000 f85a 	bl	800157c <SD_DMAConfigTx>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <SD_MspInit+0xd8>
		  {
	  NVIC_EnableIRQ(SDMMC1_IRQn);
 80014ce:	2031      	movs	r0, #49	; 0x31
 80014d0:	f7ff fe40 	bl	8001154 <NVIC_EnableIRQ>
		  }
}
 80014d4:	bf00      	nop
 80014d6:	3728      	adds	r7, #40	; 0x28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40021000 	.word	0x40021000
 80014e0:	48000800 	.word	0x48000800
 80014e4:	48000c00 	.word	0x48000c00
 80014e8:	200088b8 	.word	0x200088b8

080014ec <SD_DMAConfigRx>:
  * @brief Configure the DMA to receive data from the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]

  /* Configure DMA Rx parameters */
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <SD_DMAConfigRx+0x88>)
 80014fa:	2207      	movs	r2, #7
 80014fc:	605a      	str	r2, [r3, #4]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <SD_DMAConfigRx+0x88>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <SD_DMAConfigRx+0x88>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <SD_DMAConfigRx+0x88>)
 800150c:	2280      	movs	r2, #128	; 0x80
 800150e:	611a      	str	r2, [r3, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <SD_DMAConfigRx+0x88>)
 8001512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001516:	615a      	str	r2, [r3, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <SD_DMAConfigRx+0x88>)
 800151a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800151e:	619a      	str	r2, [r3, #24]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <SD_DMAConfigRx+0x88>)
 8001522:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001526:	621a      	str	r2, [r3, #32]

  hdma_rx.Instance = DMA2_Channel4;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <SD_DMAConfigRx+0x88>)
 800152a:	4a13      	ldr	r2, [pc, #76]	; (8001578 <SD_DMAConfigRx+0x8c>)
 800152c:	601a      	str	r2, [r3, #0]

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a10      	ldr	r2, [pc, #64]	; (8001574 <SD_DMAConfigRx+0x88>)
 8001532:	659a      	str	r2, [r3, #88]	; 0x58
 8001534:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <SD_DMAConfigRx+0x88>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6293      	str	r3, [r2, #40]	; 0x28

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_rx);
 800153a:	480e      	ldr	r0, [pc, #56]	; (8001574 <SD_DMAConfigRx+0x88>)
 800153c:	f007 fa90 	bl	8008a60 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_rx);
 8001540:	480c      	ldr	r0, [pc, #48]	; (8001574 <SD_DMAConfigRx+0x88>)
 8001542:	f007 f9ad 	bl	80088a0 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_rx);
 8001546:	480b      	ldr	r0, [pc, #44]	; (8001574 <SD_DMAConfigRx+0x88>)
 8001548:	f007 f8ec 	bl	8008724 <HAL_DMA_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]

  /* NVIC configuration for DMA transfer complete interrupt */
//  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 6, 0);
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
 8001550:	2103      	movs	r1, #3
 8001552:	203b      	movs	r0, #59	; 0x3b
 8001554:	f7ff fe18 	bl	8001188 <NVIC_SetPriority>
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001558:	203b      	movs	r0, #59	; 0x3b
 800155a:	f7ff fdfb 	bl	8001154 <NVIC_EnableIRQ>

  return (status != HAL_OK? SD_ERROR : SD_OK);
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SD_DMAConfigRx+0x7c>
 8001564:	2329      	movs	r3, #41	; 0x29
 8001566:	e000      	b.n	800156a <SD_DMAConfigRx+0x7e>
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200004f8 	.word	0x200004f8
 8001578:	40020444 	.word	0x40020444

0800157c <SD_DMAConfigTx>:
  * @brief Configure the DMA to transmit data to the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdma_tx;
  HAL_StatusTypeDef status;

  /* Configure DMA Tx parameters */
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <SD_DMAConfigTx+0x84>)
 8001586:	2207      	movs	r2, #7
 8001588:	605a      	str	r2, [r3, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <SD_DMAConfigTx+0x84>)
 800158c:	2210      	movs	r2, #16
 800158e:	609a      	str	r2, [r3, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <SD_DMAConfigTx+0x84>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <SD_DMAConfigTx+0x84>)
 8001598:	2280      	movs	r2, #128	; 0x80
 800159a:	611a      	str	r2, [r3, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <SD_DMAConfigTx+0x84>)
 800159e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a2:	615a      	str	r2, [r3, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <SD_DMAConfigTx+0x84>)
 80015a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015aa:	619a      	str	r2, [r3, #24]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <SD_DMAConfigTx+0x84>)
 80015ae:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80015b2:	621a      	str	r2, [r3, #32]

  hdma_tx.Instance = DMA2_Channel4;
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <SD_DMAConfigTx+0x84>)
 80015b6:	4a13      	ldr	r2, [pc, #76]	; (8001604 <SD_DMAConfigTx+0x88>)
 80015b8:	601a      	str	r2, [r3, #0]

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a10      	ldr	r2, [pc, #64]	; (8001600 <SD_DMAConfigTx+0x84>)
 80015be:	65da      	str	r2, [r3, #92]	; 0x5c
 80015c0:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <SD_DMAConfigTx+0x84>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6293      	str	r3, [r2, #40]	; 0x28

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_tx);
 80015c6:	480e      	ldr	r0, [pc, #56]	; (8001600 <SD_DMAConfigTx+0x84>)
 80015c8:	f007 fa4a 	bl	8008a60 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_tx);
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <SD_DMAConfigTx+0x84>)
 80015ce:	f007 f967 	bl	80088a0 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_tx);
 80015d2:	480b      	ldr	r0, [pc, #44]	; (8001600 <SD_DMAConfigTx+0x84>)
 80015d4:	f007 f8a6 	bl	8008724 <HAL_DMA_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	73fb      	strb	r3, [r7, #15]

  /* NVIC configuration for DMA transfer complete interrupt */
//  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 6, 0);
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
 80015dc:	2103      	movs	r1, #3
 80015de:	203b      	movs	r0, #59	; 0x3b
 80015e0:	f7ff fdd2 	bl	8001188 <NVIC_SetPriority>
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80015e4:	203b      	movs	r0, #59	; 0x3b
 80015e6:	f7ff fdb5 	bl	8001154 <NVIC_EnableIRQ>

  return (status != HAL_OK? SD_ERROR : SD_OK);
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SD_DMAConfigTx+0x78>
 80015f0:	2329      	movs	r3, #41	; 0x29
 80015f2:	e000      	b.n	80015f6 <SD_DMAConfigTx+0x7a>
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000540 	.word	0x20000540
 8001604:	40020444 	.word	0x40020444

08001608 <controller_impedance>:
// Greg end

//struct st_impedance controller_impedance(float angle, float knee_velocity,int ac_x, float current)

struct st_impedance controller_impedance(float angle, float knee_velocity,float Heel_pressure, float Toe_pressure,float IMU_acceleration,float hip_joint_angle)
{
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	61f8      	str	r0, [r7, #28]
 8001610:	ed87 0a06 	vstr	s0, [r7, #24]
 8001614:	edc7 0a05 	vstr	s1, [r7, #20]
 8001618:	ed87 1a04 	vstr	s2, [r7, #16]
 800161c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001620:	ed87 2a02 	vstr	s4, [r7, #8]
 8001624:	edc7 2a01 	vstr	s5, [r7, #4]

    switch (state)
 8001628:	4b6f      	ldr	r3, [pc, #444]	; (80017e8 <controller_impedance+0x1e0>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d002      	beq.n	8001636 <controller_impedance+0x2e>
 8001630:	2b01      	cmp	r3, #1
 8001632:	d051      	beq.n	80016d8 <controller_impedance+0xd0>
 8001634:	e0a1      	b.n	800177a <controller_impedance+0x172>
    case STANCE:
    	if(0) {
    		 state = SWING;
    	}
    	// Compute knee torque
    	d_torque = Impedance(angle, knee_velocity, ST_stiffness, ST_damping, ST_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 8001636:	69b8      	ldr	r0, [r7, #24]
 8001638:	f7fe ff86 	bl	8000548 <__aeabi_f2d>
 800163c:	4604      	mov	r4, r0
 800163e:	460d      	mov	r5, r1
 8001640:	6978      	ldr	r0, [r7, #20]
 8001642:	f7fe ff81 	bl	8000548 <__aeabi_f2d>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	ed9f 4b59 	vldr	d4, [pc, #356]	; 80017b0 <controller_impedance+0x1a8>
 800164e:	ed9f 3b5a 	vldr	d3, [pc, #360]	; 80017b8 <controller_impedance+0x1b0>
 8001652:	ed9f 2b5b 	vldr	d2, [pc, #364]	; 80017c0 <controller_impedance+0x1b8>
 8001656:	ec43 2b11 	vmov	d1, r2, r3
 800165a:	ec45 4b10 	vmov	d0, r4, r5
 800165e:	f7ff fd3d 	bl	80010dc <Impedance>
 8001662:	eeb0 7a40 	vmov.f32	s14, s0
 8001666:	eef0 7a60 	vmov.f32	s15, s1
 800166a:	4b60      	ldr	r3, [pc, #384]	; (80017ec <controller_impedance+0x1e4>)
 800166c:	ed83 7b00 	vstr	d7, [r3]

    	// Compute motor torque
    	CST_CMD_EPOS_contrl=(d_torque/(torque_const_kv100lite*gear_ratio_Chain_knee*peak_current))*1000;
 8001670:	4b5e      	ldr	r3, [pc, #376]	; (80017ec <controller_impedance+0x1e4>)
 8001672:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001676:	a354      	add	r3, pc, #336	; (adr r3, 80017c8 <controller_impedance+0x1c0>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7ff f8e2 	bl	8000844 <__aeabi_ddiv>
 8001680:	4603      	mov	r3, r0
 8001682:	460c      	mov	r4, r1
 8001684:	4618      	mov	r0, r3
 8001686:	4621      	mov	r1, r4
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	4b58      	ldr	r3, [pc, #352]	; (80017f0 <controller_impedance+0x1e8>)
 800168e:	f7fe ffaf 	bl	80005f0 <__aeabi_dmul>
 8001692:	4603      	mov	r3, r0
 8001694:	460c      	mov	r4, r1
 8001696:	4618      	mov	r0, r3
 8001698:	4621      	mov	r1, r4
 800169a:	f7ff fa59 	bl	8000b50 <__aeabi_d2iz>
 800169e:	4602      	mov	r2, r0
 80016a0:	4b54      	ldr	r3, [pc, #336]	; (80017f4 <controller_impedance+0x1ec>)
 80016a2:	601a      	str	r2, [r3, #0]

    	// Set motor torque limits
		if (CST_CMD_EPOS_contrl>=max_CST_CMD_EPOS) {
 80016a4:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <controller_impedance+0x1ec>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80016ac:	db04      	blt.n	80016b8 <controller_impedance+0xb0>
			CST_CMD_EPOS_contrl=max_CST_CMD_EPOS;
 80016ae:	4b51      	ldr	r3, [pc, #324]	; (80017f4 <controller_impedance+0x1ec>)
 80016b0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e007      	b.n	80016c8 <controller_impedance+0xc0>
		}
		else if (CST_CMD_EPOS_contrl<-max_CST_CMD_EPOS) {
 80016b8:	4b4e      	ldr	r3, [pc, #312]	; (80017f4 <controller_impedance+0x1ec>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
 80016c0:	da02      	bge.n	80016c8 <controller_impedance+0xc0>
			CST_CMD_EPOS_contrl=-max_CST_CMD_EPOS;
 80016c2:	4b4c      	ldr	r3, [pc, #304]	; (80017f4 <controller_impedance+0x1ec>)
 80016c4:	4a4c      	ldr	r2, [pc, #304]	; (80017f8 <controller_impedance+0x1f0>)
 80016c6:	601a      	str	r2, [r3, #0]
		}

		// Send motor torque command
		EPOS4_CST_apply_torque(0x601,CST_CMD_EPOS_contrl); //100 means 10% +ve is extension -ve is flexion
 80016c8:	4b4a      	ldr	r3, [pc, #296]	; (80017f4 <controller_impedance+0x1ec>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	f240 6001 	movw	r0, #1537	; 0x601
 80016d2:	f7ff fccf 	bl	8001074 <EPOS4_CST_apply_torque>

		break;
 80016d6:	e050      	b.n	800177a <controller_impedance+0x172>
    case SWING:
        	if(0) {
        		 state = STANCE;
        	}
        	// Compute knee torque
        	d_torque = Impedance(angle, knee_velocity, SW_stiffness, SW_damping, SW_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 80016d8:	69b8      	ldr	r0, [r7, #24]
 80016da:	f7fe ff35 	bl	8000548 <__aeabi_f2d>
 80016de:	4604      	mov	r4, r0
 80016e0:	460d      	mov	r5, r1
 80016e2:	6978      	ldr	r0, [r7, #20]
 80016e4:	f7fe ff30 	bl	8000548 <__aeabi_f2d>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	ed9f 4b38 	vldr	d4, [pc, #224]	; 80017d0 <controller_impedance+0x1c8>
 80016f0:	ed9f 3b39 	vldr	d3, [pc, #228]	; 80017d8 <controller_impedance+0x1d0>
 80016f4:	ed9f 2b3a 	vldr	d2, [pc, #232]	; 80017e0 <controller_impedance+0x1d8>
 80016f8:	ec43 2b11 	vmov	d1, r2, r3
 80016fc:	ec45 4b10 	vmov	d0, r4, r5
 8001700:	f7ff fcec 	bl	80010dc <Impedance>
 8001704:	eeb0 7a40 	vmov.f32	s14, s0
 8001708:	eef0 7a60 	vmov.f32	s15, s1
 800170c:	4b37      	ldr	r3, [pc, #220]	; (80017ec <controller_impedance+0x1e4>)
 800170e:	ed83 7b00 	vstr	d7, [r3]

        	// Compute motor torque
        	CST_CMD_EPOS_contrl=(d_torque/(torque_const_kv100lite*gear_ratio_Chain_knee*peak_current))*1000;
 8001712:	4b36      	ldr	r3, [pc, #216]	; (80017ec <controller_impedance+0x1e4>)
 8001714:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001718:	a32b      	add	r3, pc, #172	; (adr r3, 80017c8 <controller_impedance+0x1c0>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7ff f891 	bl	8000844 <__aeabi_ddiv>
 8001722:	4603      	mov	r3, r0
 8001724:	460c      	mov	r4, r1
 8001726:	4618      	mov	r0, r3
 8001728:	4621      	mov	r1, r4
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <controller_impedance+0x1e8>)
 8001730:	f7fe ff5e 	bl	80005f0 <__aeabi_dmul>
 8001734:	4603      	mov	r3, r0
 8001736:	460c      	mov	r4, r1
 8001738:	4618      	mov	r0, r3
 800173a:	4621      	mov	r1, r4
 800173c:	f7ff fa08 	bl	8000b50 <__aeabi_d2iz>
 8001740:	4602      	mov	r2, r0
 8001742:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <controller_impedance+0x1ec>)
 8001744:	601a      	str	r2, [r3, #0]

        	// Set knee torque limits
    		if (CST_CMD_EPOS_contrl>=max_CST_CMD_EPOS)
 8001746:	4b2b      	ldr	r3, [pc, #172]	; (80017f4 <controller_impedance+0x1ec>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800174e:	db04      	blt.n	800175a <controller_impedance+0x152>
    		{
    			CST_CMD_EPOS_contrl=max_CST_CMD_EPOS;
 8001750:	4b28      	ldr	r3, [pc, #160]	; (80017f4 <controller_impedance+0x1ec>)
 8001752:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e007      	b.n	800176a <controller_impedance+0x162>
    		}

    		else if (CST_CMD_EPOS_contrl<-max_CST_CMD_EPOS)
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <controller_impedance+0x1ec>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
 8001762:	da02      	bge.n	800176a <controller_impedance+0x162>
    		{
    			CST_CMD_EPOS_contrl=-max_CST_CMD_EPOS;
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <controller_impedance+0x1ec>)
 8001766:	4a24      	ldr	r2, [pc, #144]	; (80017f8 <controller_impedance+0x1f0>)
 8001768:	601a      	str	r2, [r3, #0]
    		}

    		// Send motor torque command
    		EPOS4_CST_apply_torque(0x601,CST_CMD_EPOS_contrl); //100 means 10% +ve is extension -ve is flexion
 800176a:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <controller_impedance+0x1ec>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4619      	mov	r1, r3
 8001770:	f240 6001 	movw	r0, #1537	; 0x601
 8001774:	f7ff fc7e 	bl	8001074 <EPOS4_CST_apply_torque>

    		break;
 8001778:	bf00      	nop
//
//        break;
    // Greg end comment
    }

    my_st_impedance.st = state;
 800177a:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <controller_impedance+0x1e0>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <controller_impedance+0x1f4>)
 8001782:	601a      	str	r2, [r3, #0]
    my_st_impedance.desired_torque = d_torque;
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <controller_impedance+0x1e4>)
 8001786:	cb18      	ldmia	r3, {r3, r4}
 8001788:	4618      	mov	r0, r3
 800178a:	4621      	mov	r1, r4
 800178c:	f7ff fa08 	bl	8000ba0 <__aeabi_d2f>
 8001790:	4602      	mov	r2, r0
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <controller_impedance+0x1f4>)
 8001794:	605a      	str	r2, [r3, #4]
    my_st_impedance.CST_CMD_now = CST_CMD_EPOS_contrl;
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <controller_impedance+0x1ec>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a18      	ldr	r2, [pc, #96]	; (80017fc <controller_impedance+0x1f4>)
 800179c:	6093      	str	r3, [r2, #8]
    return my_st_impedance;
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	4a16      	ldr	r2, [pc, #88]	; (80017fc <controller_impedance+0x1f4>)
 80017a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80017a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80017a8:	69f8      	ldr	r0, [r7, #28]
 80017aa:	3720      	adds	r7, #32
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bdb0      	pop	{r4, r5, r7, pc}
 80017b0:	8f5c28f6 	.word	0x8f5c28f6
 80017b4:	c013f5c2 	.word	0xc013f5c2
	...
 80017c4:	40040000 	.word	0x40040000
 80017c8:	66666666 	.word	0x66666666
 80017cc:	403e6666 	.word	0x403e6666
 80017d0:	00000000 	.word	0x00000000
 80017d4:	c0418000 	.word	0xc0418000
 80017d8:	9999999a 	.word	0x9999999a
 80017dc:	3fa99999 	.word	0x3fa99999
 80017e0:	cccccccd 	.word	0xcccccccd
 80017e4:	3fdccccc 	.word	0x3fdccccc
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000588 	.word	0x20000588
 80017f0:	408f4000 	.word	0x408f4000
 80017f4:	20000590 	.word	0x20000590
 80017f8:	fffffb50 	.word	0xfffffb50
 80017fc:	20008918 	.word	0x20008918

08001800 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8001804:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001818:	4908      	ldr	r1, [pc, #32]	; (800183c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800181c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4313      	orrs	r3, r2
 8001822:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4013      	ands	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800182e:	68fb      	ldr	r3, [r7, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	40021000 	.word	0x40021000

08001840 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	619a      	str	r2, [r3, #24]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <MX_GPIO_Init>:
LL_GPIO_InitTypeDef GPIO_InitStruct;



void MX_GPIO_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800187c:	2004      	movs	r0, #4
 800187e:	f7ff ffc7 	bl	8001810 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8001882:	2080      	movs	r0, #128	; 0x80
 8001884:	f7ff ffc4 	bl	8001810 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001888:	2001      	movs	r0, #1
 800188a:	f7ff ffc1 	bl	8001810 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800188e:	2002      	movs	r0, #2
 8001890:	f7ff ffbe 	bl	8001810 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8001894:	2008      	movs	r0, #8
 8001896:	f7ff ffbb 	bl	8001810 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 800189a:	4ba6      	ldr	r3, [pc, #664]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 800189c:	220c      	movs	r2, #12
 800189e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018a0:	4ba4      	ldr	r3, [pc, #656]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018a6:	4ba3      	ldr	r3, [pc, #652]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018ac:	4ba1      	ldr	r3, [pc, #644]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018b2:	4ba0      	ldr	r3, [pc, #640]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	499e      	ldr	r1, [pc, #632]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80018ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018be:	f00c f8db 	bl	800da78 <LL_GPIO_Init>
  LL_GPIO_ResetOutputPin(GPIOA, LED_G_PIN|LED_R_PIN);
 80018c2:	210c      	movs	r1, #12
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c8:	f7ff ffc8 	bl	800185c <LL_GPIO_ResetOutputPin>

  GPIO_InitStruct.Pin = LED_B_PIN;
 80018cc:	4b99      	ldr	r3, [pc, #612]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80018ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018d4:	4b97      	ldr	r3, [pc, #604]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018da:	4b96      	ldr	r3, [pc, #600]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018e0:	4b94      	ldr	r3, [pc, #592]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018e6:	4b93      	ldr	r3, [pc, #588]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	4991      	ldr	r1, [pc, #580]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80018ee:	4892      	ldr	r0, [pc, #584]	; (8001b38 <MX_GPIO_Init+0x2c0>)
 80018f0:	f00c f8c2 	bl	800da78 <LL_GPIO_Init>
  LL_GPIO_ResetOutputPin(GPIOB, LED_B_PIN);
 80018f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018f8:	488f      	ldr	r0, [pc, #572]	; (8001b38 <MX_GPIO_Init+0x2c0>)
 80018fa:	f7ff ffaf 	bl	800185c <LL_GPIO_ResetOutputPin>

  GPIO_InitStruct.Pin = USB_CONNECTIVITY;
 80018fe:	4b8d      	ldr	r3, [pc, #564]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001904:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001906:	4b8b      	ldr	r3, [pc, #556]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800190c:	4b89      	ldr	r3, [pc, #548]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 800190e:	2202      	movs	r2, #2
 8001910:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 8001912:	4988      	ldr	r1, [pc, #544]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001918:	f00c f8ae 	bl	800da78 <LL_GPIO_Init>
//  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
//  LL_GPIO_Init(ENC1_DATA_GPIO_PORT, &GPIO_InitStruct);
  // Greg end comment out

  GPIO_InitStruct.Pin = ENC2_CS_PIN;
 800191c:	4b85      	ldr	r3, [pc, #532]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 800191e:	2240      	movs	r2, #64	; 0x40
 8001920:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001922:	4b84      	ldr	r3, [pc, #528]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001924:	2201      	movs	r2, #1
 8001926:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	4b82      	ldr	r3, [pc, #520]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 800192a:	2203      	movs	r2, #3
 800192c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800192e:	4b81      	ldr	r3, [pc, #516]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001930:	2200      	movs	r2, #0
 8001932:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001934:	4b7f      	ldr	r3, [pc, #508]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 800193a:	497e      	ldr	r1, [pc, #504]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 800193c:	487f      	ldr	r0, [pc, #508]	; (8001b3c <MX_GPIO_Init+0x2c4>)
 800193e:	f00c f89b 	bl	800da78 <LL_GPIO_Init>

  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
 8001942:	4b7c      	ldr	r3, [pc, #496]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001944:	2280      	movs	r2, #128	; 0x80
 8001946:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001948:	4b7a      	ldr	r3, [pc, #488]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 800194a:	2200      	movs	r2, #0
 800194c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800194e:	4b79      	ldr	r3, [pc, #484]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001950:	2202      	movs	r2, #2
 8001952:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ENC2_DATA_GPIO_PORT, &GPIO_InitStruct);
 8001954:	4977      	ldr	r1, [pc, #476]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001956:	4879      	ldr	r0, [pc, #484]	; (8001b3c <MX_GPIO_Init+0x2c4>)
 8001958:	f00c f88e 	bl	800da78 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = ENC2_SCLK_PIN;
 800195c:	4b75      	ldr	r3, [pc, #468]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001962:	4b74      	ldr	r3, [pc, #464]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001964:	2201      	movs	r2, #1
 8001966:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	4b72      	ldr	r3, [pc, #456]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 800196a:	2203      	movs	r2, #3
 800196c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800196e:	4b71      	ldr	r3, [pc, #452]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001974:	4b6f      	ldr	r3, [pc, #444]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ENC2_SCLK_GPIO_PORT, &GPIO_InitStruct);
 800197a:	496e      	ldr	r1, [pc, #440]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 800197c:	486e      	ldr	r0, [pc, #440]	; (8001b38 <MX_GPIO_Init+0x2c0>)
 800197e:	f00c f87b 	bl	800da78 <LL_GPIO_Init>



  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 8001982:	4b6c      	ldr	r3, [pc, #432]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001988:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800198a:	4b6a      	ldr	r3, [pc, #424]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 800198c:	2201      	movs	r2, #1
 800198e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	4b68      	ldr	r3, [pc, #416]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001992:	2203      	movs	r2, #3
 8001994:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001996:	4b67      	ldr	r3, [pc, #412]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001998:	2200      	movs	r2, #0
 800199a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800199c:	4b65      	ldr	r3, [pc, #404]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SPI1_CS_GPIO_PORT, &GPIO_InitStruct);
 80019a2:	4964      	ldr	r1, [pc, #400]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80019a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a8:	f00c f866 	bl	800da78 <LL_GPIO_Init>
  LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);
 80019ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b4:	f7ff ff44 	bl	8001840 <LL_GPIO_SetOutputPin>

  GPIO_InitStruct.Pin = SPI2_CS_PIN;
 80019b8:	4b5e      	ldr	r3, [pc, #376]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80019ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019c0:	4b5c      	ldr	r3, [pc, #368]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	4b5b      	ldr	r3, [pc, #364]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80019c8:	2203      	movs	r2, #3
 80019ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019cc:	4b59      	ldr	r3, [pc, #356]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019d2:	4b58      	ldr	r3, [pc, #352]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 80019d8:	4956      	ldr	r1, [pc, #344]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80019da:	4857      	ldr	r0, [pc, #348]	; (8001b38 <MX_GPIO_Init+0x2c0>)
 80019dc:	f00c f84c 	bl	800da78 <LL_GPIO_Init>
  LL_GPIO_SetOutputPin(SPI2_CS_GPIO_PORT, SPI2_CS_PIN);
 80019e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e4:	4854      	ldr	r0, [pc, #336]	; (8001b38 <MX_GPIO_Init+0x2c0>)
 80019e6:	f7ff ff2b 	bl	8001840 <LL_GPIO_SetOutputPin>

  GPIO_InitStruct.Pin = SPI3_CS_PIN;
 80019ea:	4b52      	ldr	r3, [pc, #328]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019f0:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80019f6:	4b4f      	ldr	r3, [pc, #316]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80019f8:	2203      	movs	r2, #3
 80019fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019fc:	4b4d      	ldr	r3, [pc, #308]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a02:	4b4c      	ldr	r3, [pc, #304]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 8001a08:	494a      	ldr	r1, [pc, #296]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001a0a:	484d      	ldr	r0, [pc, #308]	; (8001b40 <MX_GPIO_Init+0x2c8>)
 8001a0c:	f00c f834 	bl	800da78 <LL_GPIO_Init>
  LL_GPIO_SetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN);
 8001a10:	2101      	movs	r1, #1
 8001a12:	484b      	ldr	r0, [pc, #300]	; (8001b40 <MX_GPIO_Init+0x2c8>)
 8001a14:	f7ff ff14 	bl	8001840 <LL_GPIO_SetOutputPin>

  GPIO_InitStruct.Pin = SPI1_IMU2_CS_Pin;
 8001a18:	4b46      	ldr	r3, [pc, #280]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001a1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a20:	4b44      	ldr	r3, [pc, #272]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001a28:	2203      	movs	r2, #3
 8001a2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a2c:	4b41      	ldr	r3, [pc, #260]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a32:	4b40      	ldr	r3, [pc, #256]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SPI1_IMU2_CS_GPIO_Port, &GPIO_InitStruct);
 8001a38:	493e      	ldr	r1, [pc, #248]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3e:	f00c f81b 	bl	800da78 <LL_GPIO_Init>
  LL_GPIO_SetOutputPin(SPI1_IMU2_CS_GPIO_Port, SPI1_IMU2_CS_Pin);
 8001a42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4a:	f7ff fef9 	bl	8001840 <LL_GPIO_SetOutputPin>

  GPIO_InitStruct.Pin = SPI3_IMU5_CS_Pin;
 8001a4e:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001a50:	2202      	movs	r2, #2
 8001a52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a54:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a60:	4b34      	ldr	r3, [pc, #208]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a66:	4b33      	ldr	r3, [pc, #204]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	4931      	ldr	r1, [pc, #196]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001a6e:	4834      	ldr	r0, [pc, #208]	; (8001b40 <MX_GPIO_Init+0x2c8>)
 8001a70:	f00c f802 	bl	800da78 <LL_GPIO_Init>
  LL_GPIO_SetOutputPin(SPI3_IMU5_CS_GPIO_Port, SPI3_IMU5_CS_Pin);
 8001a74:	2102      	movs	r1, #2
 8001a76:	4832      	ldr	r0, [pc, #200]	; (8001b40 <MX_GPIO_Init+0x2c8>)
 8001a78:	f7ff fee2 	bl	8001840 <LL_GPIO_SetOutputPin>


  /**/
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
 8001a7c:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001a7e:	2210      	movs	r2, #16
 8001a80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001a82:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001a88:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 8001a8e:	4929      	ldr	r1, [pc, #164]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001a90:	482a      	ldr	r0, [pc, #168]	; (8001b3c <MX_GPIO_Init+0x2c4>)
 8001a92:	f00b fff1 	bl	800da78 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001a96:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001a9e:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	4922      	ldr	r1, [pc, #136]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab0:	f00b ffe2 	bl	800da78 <LL_GPIO_Init>


  /**/
//
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;   // Portable IMU2 CS Pin
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001ab6:	2240      	movs	r2, #64	; 0x40
 8001ab8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001aba:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad2:	4918      	ldr	r1, [pc, #96]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001ad4:	4818      	ldr	r0, [pc, #96]	; (8001b38 <MX_GPIO_Init+0x2c0>)
 8001ad6:	f00b ffcf 	bl	800da78 <LL_GPIO_Init>
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8001ada:	2140      	movs	r1, #64	; 0x40
 8001adc:	4816      	ldr	r0, [pc, #88]	; (8001b38 <MX_GPIO_Init+0x2c0>)
 8001ade:	f7ff feaf 	bl	8001840 <LL_GPIO_SetOutputPin>


  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;   // Portable IMU3 CS Pin
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001ae4:	2210      	movs	r2, #16
 8001ae6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001af0:	2203      	movs	r2, #3
 8001af2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b00:	490c      	ldr	r1, [pc, #48]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001b02:	480e      	ldr	r0, [pc, #56]	; (8001b3c <MX_GPIO_Init+0x2c4>)
 8001b04:	f00b ffb8 	bl	800da78 <LL_GPIO_Init>
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_4);
 8001b08:	2110      	movs	r1, #16
 8001b0a:	480c      	ldr	r0, [pc, #48]	; (8001b3c <MX_GPIO_Init+0x2c4>)
 8001b0c:	f7ff fe98 	bl	8001840 <LL_GPIO_SetOutputPin>
//  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
//  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
//  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);

  // Measure interrupt speed
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001b20:	2203      	movs	r2, #3
 8001b22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b2a:	4b02      	ldr	r3, [pc, #8]	; (8001b34 <MX_GPIO_Init+0x2bc>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
 8001b30:	e008      	b.n	8001b44 <MX_GPIO_Init+0x2cc>
 8001b32:	bf00      	nop
 8001b34:	20008924 	.word	0x20008924
 8001b38:	48000400 	.word	0x48000400
 8001b3c:	48000800 	.word	0x48000800
 8001b40:	48001c00 	.word	0x48001c00
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b44:	4902      	ldr	r1, [pc, #8]	; (8001b50 <MX_GPIO_Init+0x2d8>)
 8001b46:	4803      	ldr	r0, [pc, #12]	; (8001b54 <MX_GPIO_Init+0x2dc>)
 8001b48:	f00b ff96 	bl	800da78 <LL_GPIO_Init>
  // Greg end
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20008924 	.word	0x20008924
 8001b54:	48000400 	.word	0x48000400

08001b58 <BLUE_LED_OFF>:
LL_GPIO_ResetOutputPin(GPIOB, LED_B_PIN);
#endif
}

void BLUE_LED_OFF(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
LL_GPIO_SetOutputPin(GPIOB, LED_B_PIN);
 8001b5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <BLUE_LED_OFF+0x14>)
 8001b62:	f7ff fe6d 	bl	8001840 <LL_GPIO_SetOutputPin>
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	48000400 	.word	0x48000400

08001b70 <ALL_LED_OFF>:

void ALL_LED_OFF(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
#ifdef LED_Signal_En
	LL_GPIO_SetOutputPin(GPIOB, LED_B_PIN);
 8001b74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b78:	4807      	ldr	r0, [pc, #28]	; (8001b98 <ALL_LED_OFF+0x28>)
 8001b7a:	f7ff fe61 	bl	8001840 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LED_G_PIN);
 8001b7e:	2104      	movs	r1, #4
 8001b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b84:	f7ff fe5c 	bl	8001840 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LED_R_PIN);
 8001b88:	2108      	movs	r1, #8
 8001b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8e:	f7ff fe57 	bl	8001840 <LL_GPIO_SetOutputPin>
#endif
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	48000400 	.word	0x48000400

08001b9c <ALL_LED_ON>:

void ALL_LED_ON(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
#ifdef LED_Signal_En
	LL_GPIO_ResetOutputPin(GPIOB, LED_B_PIN);
 8001ba0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ba4:	4807      	ldr	r0, [pc, #28]	; (8001bc4 <ALL_LED_ON+0x28>)
 8001ba6:	f7ff fe59 	bl	800185c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LED_G_PIN);
 8001baa:	2104      	movs	r1, #4
 8001bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb0:	f7ff fe54 	bl	800185c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LED_R_PIN);
 8001bb4:	2108      	movs	r1, #8
 8001bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bba:	f7ff fe4f 	bl	800185c <LL_GPIO_ResetOutputPin>
#endif
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	48000400 	.word	0x48000400

08001bc8 <GREEN_LED_ONLY>:

void GREEN_LED_ONLY(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
#ifdef LED_Signal_En
	LL_GPIO_ResetOutputPin(GPIOA, LED_G_PIN);
 8001bcc:	2104      	movs	r1, #4
 8001bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd2:	f7ff fe43 	bl	800185c <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LED_B_PIN);
 8001bd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bda:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <GREEN_LED_ONLY+0x28>)
 8001bdc:	f7ff fe30 	bl	8001840 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LED_R_PIN);
 8001be0:	2108      	movs	r1, #8
 8001be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be6:	f7ff fe2b 	bl	8001840 <LL_GPIO_SetOutputPin>
#endif
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	48000400 	.word	0x48000400

08001bf4 <RED_LED_OFF>:
//LL_GPIO_SetOutputPin(ENC1_CS_GPIO_PORT, LL_GPIO_PIN_8);  // YELLOW LED
	// Greg end comment out
}


void RED_LED_OFF(void){
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
	// Greg start comment out
//	LL_GPIO_ResetOutputPin(ENC1_CS_GPIO_PORT, LL_GPIO_PIN_11); // RED LED
	// Greg end comment out

}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <GREEN_LED_OFF>:

void GREEN_LED_OFF(void){
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
	// Greg start comment out
//	LL_GPIO_ResetOutputPin(ENC1_CS_GPIO_PORT, LL_GPIO_PIN_10); // GREEN LED
	// Greg end comment out
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <RED_LED_ONLY>:
}



void RED_LED_ONLY(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
#ifdef LED_Signal_En
	LL_GPIO_ResetOutputPin(GPIOA, LED_R_PIN);
 8001c14:	2108      	movs	r1, #8
 8001c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1a:	f7ff fe1f 	bl	800185c <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LED_B_PIN);
 8001c1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <RED_LED_ONLY+0x28>)
 8001c24:	f7ff fe0c 	bl	8001840 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LED_G_PIN);
 8001c28:	2104      	movs	r1, #4
 8001c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c2e:	f7ff fe07 	bl	8001840 <LL_GPIO_SetOutputPin>
#endif
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	48000400 	.word	0x48000400

08001c3c <BLUE_LED_ONLY>:

void BLUE_LED_ONLY(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
#ifdef LED_Signal_En
	LL_GPIO_ResetOutputPin(GPIOB, LED_B_PIN);
 8001c40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c44:	4807      	ldr	r0, [pc, #28]	; (8001c64 <BLUE_LED_ONLY+0x28>)
 8001c46:	f7ff fe09 	bl	800185c <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LED_G_PIN);
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c50:	f7ff fdf6 	bl	8001840 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LED_R_PIN);
 8001c54:	2108      	movs	r1, #8
 8001c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c5a:	f7ff fdf1 	bl	8001840 <LL_GPIO_SetOutputPin>
#endif
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	48000400 	.word	0x48000400

08001c68 <VIOLET_LED_ONLY>:

void VIOLET_LED_ONLY(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
#ifdef LED_Signal_En
	LL_GPIO_ResetOutputPin(GPIOB, LED_B_PIN);
 8001c6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c70:	4807      	ldr	r0, [pc, #28]	; (8001c90 <VIOLET_LED_ONLY+0x28>)
 8001c72:	f7ff fdf3 	bl	800185c <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LED_G_PIN);
 8001c76:	2104      	movs	r1, #4
 8001c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7c:	f7ff fde0 	bl	8001840 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LED_R_PIN);
 8001c80:	2108      	movs	r1, #8
 8001c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c86:	f7ff fde9 	bl	800185c <LL_GPIO_ResetOutputPin>
#endif
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	48000400 	.word	0x48000400

08001c94 <CYAN_LED_ONLY>:
	LL_GPIO_ResetOutputPin(GPIOA, LED_R_PIN);
#endif
}

void CYAN_LED_ONLY(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
#ifdef LED_Signal_En
	LL_GPIO_ResetOutputPin(GPIOB, LED_B_PIN);
 8001c98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c9c:	4807      	ldr	r0, [pc, #28]	; (8001cbc <CYAN_LED_ONLY+0x28>)
 8001c9e:	f7ff fddd 	bl	800185c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LED_G_PIN);
 8001ca2:	2104      	movs	r1, #4
 8001ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca8:	f7ff fdd8 	bl	800185c <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LED_R_PIN);
 8001cac:	2108      	movs	r1, #8
 8001cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb2:	f7ff fdd3 	bl	800185c <LL_GPIO_ResetOutputPin>
#endif
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	48000400 	.word	0x48000400

08001cc0 <SD_POWER_ON>:

/* SD CARD power pin */
void SD_POWER_ON(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <SD_POWER_OFF>:
void SD_POWER_OFF(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_GPIO_SetOutputPin>:
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	619a      	str	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_GPIO_ResetOutputPin>:
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	0000      	movs	r0, r0
	...

08001d18 <processKnee>:

struct imu_data AccelCal (struct imu_data imu_data_now);
// Greg end


void processKnee () {
 8001d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af02      	add	r7, sp, #8
	if (Data_log_Start_Resume == 1) // Sensor Start Flag from VCP command / FATFS SD card file
 8001d1e:	4b5e      	ldr	r3, [pc, #376]	; (8001e98 <processKnee+0x180>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	f040 835d 	bne.w	80023e2 <processKnee+0x6ca>
	{
		// Get knee angle in degrees
		float angle_now = knee_angle();
 8001d28:	f004 f866 	bl	8005df8 <knee_angle>
 8001d2c:	ed87 0a05 	vstr	s0, [r7, #20]

		// Initialize knee angle with first knee angle (used in hip  angle    computation)
		// Initialize IMU  angle with first knee angle (used in knee velocity computation)
		if (count == 1)
 8001d30:	4b5a      	ldr	r3, [pc, #360]	; (8001e9c <processKnee+0x184>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d113      	bne.n	8001d60 <processKnee+0x48>
		{
			angle_old      = angle_now;				// Units in degrees
 8001d38:	4a59      	ldr	r2, [pc, #356]	; (8001ea0 <processKnee+0x188>)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	6013      	str	r3, [r2, #0]
			imu_angle_past = angle_now / (rad2deg);	// Units in radians
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f7fe fc02 	bl	8000548 <__aeabi_f2d>
 8001d44:	a352      	add	r3, pc, #328	; (adr r3, 8001e90 <processKnee+0x178>)
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	f7fe fd7b 	bl	8000844 <__aeabi_ddiv>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	460c      	mov	r4, r1
 8001d52:	4618      	mov	r0, r3
 8001d54:	4621      	mov	r1, r4
 8001d56:	f7fe ff23 	bl	8000ba0 <__aeabi_d2f>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	4b51      	ldr	r3, [pc, #324]	; (8001ea4 <processKnee+0x18c>)
 8001d5e:	601a      	str	r2, [r3, #0]
		}

		// Compute knee velocity with practical differentiator (fc = 10 Hz, bilinear transformation used)
		// Units in degrees per second
		angular_velocity = (2*(angle_now - angle_old)+(2*tau-Ts)*angular_velocity) / (Ts+2*tau);
 8001d60:	4b4f      	ldr	r3, [pc, #316]	; (8001ea0 <processKnee+0x188>)
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d6e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d72:	4b4d      	ldr	r3, [pc, #308]	; (8001ea8 <processKnee+0x190>)
 8001d74:	edd3 7a00 	vldr	s15, [r3]
 8001d78:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d7c:	4b4b      	ldr	r3, [pc, #300]	; (8001eac <processKnee+0x194>)
 8001d7e:	edd3 7a00 	vldr	s15, [r3]
 8001d82:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d86:	4b4a      	ldr	r3, [pc, #296]	; (8001eb0 <processKnee+0x198>)
 8001d88:	edd3 7a00 	vldr	s15, [r3]
 8001d8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d90:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001d94:	4b44      	ldr	r3, [pc, #272]	; (8001ea8 <processKnee+0x190>)
 8001d96:	edd3 7a00 	vldr	s15, [r3]
 8001d9a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d9e:	4b43      	ldr	r3, [pc, #268]	; (8001eac <processKnee+0x194>)
 8001da0:	edd3 7a00 	vldr	s15, [r3]
 8001da4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dac:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <processKnee+0x198>)
 8001dae:	edc3 7a00 	vstr	s15, [r3]
		angle_old        = angle_now;
 8001db2:	4a3b      	ldr	r2, [pc, #236]	; (8001ea0 <processKnee+0x188>)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	6013      	str	r3, [r2, #0]

		// Filter load cell with 2nd order low-pass Butterworth (fc = 20 Hz)
		// Units in ADC values
		uint16_t Loadcell_top = Read_Loadcell1();
 8001db8:	f003 f9fe 	bl	80051b8 <Read_Loadcell1>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	827b      	strh	r3, [r7, #18]
		uint16_t Loadcell_bot = Read_Loadcell2();
 8001dc0:	f003 fa3a 	bl	8005238 <Read_Loadcell2>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	823b      	strh	r3, [r7, #16]
		if (count == 1)
 8001dc8:	4b34      	ldr	r3, [pc, #208]	; (8001e9c <processKnee+0x184>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d12c      	bne.n	8001e2a <processKnee+0x112>
		{
			Loadcell_top_filtered    = Loadcell_top;
 8001dd0:	8a7b      	ldrh	r3, [r7, #18]
 8001dd2:	ee07 3a90 	vmov	s15, r3
 8001dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dda:	4b36      	ldr	r3, [pc, #216]	; (8001eb4 <processKnee+0x19c>)
 8001ddc:	edc3 7a00 	vstr	s15, [r3]
			Loadcell_top_m2          = Loadcell_top;
 8001de0:	4a35      	ldr	r2, [pc, #212]	; (8001eb8 <processKnee+0x1a0>)
 8001de2:	8a7b      	ldrh	r3, [r7, #18]
 8001de4:	8013      	strh	r3, [r2, #0]
			Loadcell_top_filtered_m2 = Loadcell_top;
 8001de6:	8a7b      	ldrh	r3, [r7, #18]
 8001de8:	ee07 3a90 	vmov	s15, r3
 8001dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001df0:	4b32      	ldr	r3, [pc, #200]	; (8001ebc <processKnee+0x1a4>)
 8001df2:	edc3 7a00 	vstr	s15, [r3]

			Loadcell_bot_filtered    = Loadcell_bot;
 8001df6:	8a3b      	ldrh	r3, [r7, #16]
 8001df8:	ee07 3a90 	vmov	s15, r3
 8001dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e00:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <processKnee+0x1a8>)
 8001e02:	edc3 7a00 	vstr	s15, [r3]
			Loadcell_bot_m2          = Loadcell_bot;
 8001e06:	4a2f      	ldr	r2, [pc, #188]	; (8001ec4 <processKnee+0x1ac>)
 8001e08:	8a3b      	ldrh	r3, [r7, #16]
 8001e0a:	8013      	strh	r3, [r2, #0]
			Loadcell_bot_filtered_m2 = Loadcell_bot;
 8001e0c:	8a3b      	ldrh	r3, [r7, #16]
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e16:	4b2c      	ldr	r3, [pc, #176]	; (8001ec8 <processKnee+0x1b0>)
 8001e18:	edc3 7a00 	vstr	s15, [r3]

			count++;
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <processKnee+0x184>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	3301      	adds	r3, #1
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <processKnee+0x184>)
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	e139      	b.n	800209e <processKnee+0x386>
		}
		else if (count == 2)
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <processKnee+0x184>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d154      	bne.n	8001edc <processKnee+0x1c4>
		{
			Loadcell_top_filtered    = Loadcell_top;
 8001e32:	8a7b      	ldrh	r3, [r7, #18]
 8001e34:	ee07 3a90 	vmov	s15, r3
 8001e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <processKnee+0x19c>)
 8001e3e:	edc3 7a00 	vstr	s15, [r3]
			Loadcell_top_m1          = Loadcell_top;
 8001e42:	4a22      	ldr	r2, [pc, #136]	; (8001ecc <processKnee+0x1b4>)
 8001e44:	8a7b      	ldrh	r3, [r7, #18]
 8001e46:	8013      	strh	r3, [r2, #0]
			Loadcell_top_filtered_m1 = Loadcell_top;
 8001e48:	8a7b      	ldrh	r3, [r7, #18]
 8001e4a:	ee07 3a90 	vmov	s15, r3
 8001e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e52:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <processKnee+0x1b8>)
 8001e54:	edc3 7a00 	vstr	s15, [r3]

			Loadcell_bot_filtered    = Loadcell_bot;
 8001e58:	8a3b      	ldrh	r3, [r7, #16]
 8001e5a:	ee07 3a90 	vmov	s15, r3
 8001e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e62:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <processKnee+0x1a8>)
 8001e64:	edc3 7a00 	vstr	s15, [r3]
			Loadcell_bot_m1          = Loadcell_bot;
 8001e68:	4a1a      	ldr	r2, [pc, #104]	; (8001ed4 <processKnee+0x1bc>)
 8001e6a:	8a3b      	ldrh	r3, [r7, #16]
 8001e6c:	8013      	strh	r3, [r2, #0]
			Loadcell_bot_filtered_m1 = Loadcell_bot;
 8001e6e:	8a3b      	ldrh	r3, [r7, #16]
 8001e70:	ee07 3a90 	vmov	s15, r3
 8001e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e78:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <processKnee+0x1c0>)
 8001e7a:	edc3 7a00 	vstr	s15, [r3]

			count++;
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <processKnee+0x184>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	3301      	adds	r3, #1
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <processKnee+0x184>)
 8001e88:	701a      	strb	r2, [r3, #0]
 8001e8a:	e108      	b.n	800209e <processKnee+0x386>
 8001e8c:	f3af 8000 	nop.w
 8001e90:	b6774c14 	.word	0xb6774c14
 8001e94:	404ca5d7 	.word	0x404ca5d7
 8001e98:	20008971 	.word	0x20008971
 8001e9c:	20000001 	.word	0x20000001
 8001ea0:	20000598 	.word	0x20000598
 8001ea4:	20008944 	.word	0x20008944
 8001ea8:	20000004 	.word	0x20000004
 8001eac:	20000008 	.word	0x20000008
 8001eb0:	2000059c 	.word	0x2000059c
 8001eb4:	20008954 	.word	0x20008954
 8001eb8:	2000893c 	.word	0x2000893c
 8001ebc:	20008958 	.word	0x20008958
 8001ec0:	20008940 	.word	0x20008940
 8001ec4:	2000893e 	.word	0x2000893e
 8001ec8:	20008960 	.word	0x20008960
 8001ecc:	2000895c 	.word	0x2000895c
 8001ed0:	20008964 	.word	0x20008964
 8001ed4:	2000895e 	.word	0x2000895e
 8001ed8:	2000896c 	.word	0x2000896c
		}
		else
		{
			Loadcell_top_filtered    =    1.6556f * Loadcell_top_filtered_m1
 8001edc:	4bc8      	ldr	r3, [pc, #800]	; (8002200 <processKnee+0x4e8>)
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 8002204 <processKnee+0x4ec>
 8001ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eea:	ee17 0a90 	vmov	r0, s15
 8001eee:	f7fe fb2b 	bl	8000548 <__aeabi_f2d>
 8001ef2:	4604      	mov	r4, r0
 8001ef4:	460d      	mov	r5, r1
										- 0.7068 * Loadcell_top_filtered_m2 + 0.0128 * Loadcell_top
 8001ef6:	4bc4      	ldr	r3, [pc, #784]	; (8002208 <processKnee+0x4f0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fb24 	bl	8000548 <__aeabi_f2d>
 8001f00:	a3b5      	add	r3, pc, #724	; (adr r3, 80021d8 <processKnee+0x4c0>)
 8001f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f06:	f7fe fb73 	bl	80005f0 <__aeabi_dmul>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4620      	mov	r0, r4
 8001f10:	4629      	mov	r1, r5
 8001f12:	f7fe f9b9 	bl	8000288 <__aeabi_dsub>
 8001f16:	4603      	mov	r3, r0
 8001f18:	460c      	mov	r4, r1
 8001f1a:	4625      	mov	r5, r4
 8001f1c:	461c      	mov	r4, r3
 8001f1e:	8a7b      	ldrh	r3, [r7, #18]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe faff 	bl	8000524 <__aeabi_i2d>
 8001f26:	a3ae      	add	r3, pc, #696	; (adr r3, 80021e0 <processKnee+0x4c8>)
 8001f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2c:	f7fe fb60 	bl	80005f0 <__aeabi_dmul>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4620      	mov	r0, r4
 8001f36:	4629      	mov	r1, r5
 8001f38:	f7fe f9a8 	bl	800028c <__adddf3>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	460c      	mov	r4, r1
 8001f40:	4625      	mov	r5, r4
 8001f42:	461c      	mov	r4, r3
										+ 0.0256 * Loadcell_top_m1 + 0.0128 * Loadcell_top_m2;
 8001f44:	4bb1      	ldr	r3, [pc, #708]	; (800220c <processKnee+0x4f4>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe faeb 	bl	8000524 <__aeabi_i2d>
 8001f4e:	a3a6      	add	r3, pc, #664	; (adr r3, 80021e8 <processKnee+0x4d0>)
 8001f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f54:	f7fe fb4c 	bl	80005f0 <__aeabi_dmul>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	4629      	mov	r1, r5
 8001f60:	f7fe f994 	bl	800028c <__adddf3>
 8001f64:	4603      	mov	r3, r0
 8001f66:	460c      	mov	r4, r1
 8001f68:	4625      	mov	r5, r4
 8001f6a:	461c      	mov	r4, r3
 8001f6c:	4ba8      	ldr	r3, [pc, #672]	; (8002210 <processKnee+0x4f8>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fad7 	bl	8000524 <__aeabi_i2d>
 8001f76:	a39a      	add	r3, pc, #616	; (adr r3, 80021e0 <processKnee+0x4c8>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	f7fe fb38 	bl	80005f0 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4620      	mov	r0, r4
 8001f86:	4629      	mov	r1, r5
 8001f88:	f7fe f980 	bl	800028c <__adddf3>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	460c      	mov	r4, r1
 8001f90:	4618      	mov	r0, r3
 8001f92:	4621      	mov	r1, r4
 8001f94:	f7fe fe04 	bl	8000ba0 <__aeabi_d2f>
 8001f98:	4602      	mov	r2, r0
			Loadcell_top_filtered    =    1.6556f * Loadcell_top_filtered_m1
 8001f9a:	4b9e      	ldr	r3, [pc, #632]	; (8002214 <processKnee+0x4fc>)
 8001f9c:	601a      	str	r2, [r3, #0]
			Loadcell_top_m2          = Loadcell_top_m1;
 8001f9e:	4b9b      	ldr	r3, [pc, #620]	; (800220c <processKnee+0x4f4>)
 8001fa0:	881a      	ldrh	r2, [r3, #0]
 8001fa2:	4b9b      	ldr	r3, [pc, #620]	; (8002210 <processKnee+0x4f8>)
 8001fa4:	801a      	strh	r2, [r3, #0]
			Loadcell_top_m1          = Loadcell_top;
 8001fa6:	4a99      	ldr	r2, [pc, #612]	; (800220c <processKnee+0x4f4>)
 8001fa8:	8a7b      	ldrh	r3, [r7, #18]
 8001faa:	8013      	strh	r3, [r2, #0]
			Loadcell_top_filtered_m2 = Loadcell_top_filtered_m1;
 8001fac:	4b94      	ldr	r3, [pc, #592]	; (8002200 <processKnee+0x4e8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a95      	ldr	r2, [pc, #596]	; (8002208 <processKnee+0x4f0>)
 8001fb2:	6013      	str	r3, [r2, #0]
			Loadcell_top_filtered_m1 = Loadcell_top_filtered;
 8001fb4:	4b97      	ldr	r3, [pc, #604]	; (8002214 <processKnee+0x4fc>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a91      	ldr	r2, [pc, #580]	; (8002200 <processKnee+0x4e8>)
 8001fba:	6013      	str	r3, [r2, #0]

			Loadcell_bot_filtered    =    1.6556 * Loadcell_bot_filtered_m1
 8001fbc:	4b96      	ldr	r3, [pc, #600]	; (8002218 <processKnee+0x500>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fac1 	bl	8000548 <__aeabi_f2d>
 8001fc6:	a38a      	add	r3, pc, #552	; (adr r3, 80021f0 <processKnee+0x4d8>)
 8001fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fcc:	f7fe fb10 	bl	80005f0 <__aeabi_dmul>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	460c      	mov	r4, r1
 8001fd4:	4625      	mov	r5, r4
 8001fd6:	461c      	mov	r4, r3
										- 0.7068 * Loadcell_bot_filtered_m2 + 0.0128 * Loadcell_bot
 8001fd8:	4b90      	ldr	r3, [pc, #576]	; (800221c <processKnee+0x504>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fab3 	bl	8000548 <__aeabi_f2d>
 8001fe2:	a37d      	add	r3, pc, #500	; (adr r3, 80021d8 <processKnee+0x4c0>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe fb02 	bl	80005f0 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	4629      	mov	r1, r5
 8001ff4:	f7fe f948 	bl	8000288 <__aeabi_dsub>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	460c      	mov	r4, r1
 8001ffc:	4625      	mov	r5, r4
 8001ffe:	461c      	mov	r4, r3
 8002000:	8a3b      	ldrh	r3, [r7, #16]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fa8e 	bl	8000524 <__aeabi_i2d>
 8002008:	a375      	add	r3, pc, #468	; (adr r3, 80021e0 <processKnee+0x4c8>)
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200e:	f7fe faef 	bl	80005f0 <__aeabi_dmul>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4620      	mov	r0, r4
 8002018:	4629      	mov	r1, r5
 800201a:	f7fe f937 	bl	800028c <__adddf3>
 800201e:	4603      	mov	r3, r0
 8002020:	460c      	mov	r4, r1
 8002022:	4625      	mov	r5, r4
 8002024:	461c      	mov	r4, r3
										+ 0.0256 * Loadcell_bot_m1 + 0.0128 * Loadcell_bot_m2;
 8002026:	4b7e      	ldr	r3, [pc, #504]	; (8002220 <processKnee+0x508>)
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fa7a 	bl	8000524 <__aeabi_i2d>
 8002030:	a36d      	add	r3, pc, #436	; (adr r3, 80021e8 <processKnee+0x4d0>)
 8002032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002036:	f7fe fadb 	bl	80005f0 <__aeabi_dmul>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4620      	mov	r0, r4
 8002040:	4629      	mov	r1, r5
 8002042:	f7fe f923 	bl	800028c <__adddf3>
 8002046:	4603      	mov	r3, r0
 8002048:	460c      	mov	r4, r1
 800204a:	4625      	mov	r5, r4
 800204c:	461c      	mov	r4, r3
 800204e:	4b75      	ldr	r3, [pc, #468]	; (8002224 <processKnee+0x50c>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa66 	bl	8000524 <__aeabi_i2d>
 8002058:	a361      	add	r3, pc, #388	; (adr r3, 80021e0 <processKnee+0x4c8>)
 800205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205e:	f7fe fac7 	bl	80005f0 <__aeabi_dmul>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4620      	mov	r0, r4
 8002068:	4629      	mov	r1, r5
 800206a:	f7fe f90f 	bl	800028c <__adddf3>
 800206e:	4603      	mov	r3, r0
 8002070:	460c      	mov	r4, r1
 8002072:	4618      	mov	r0, r3
 8002074:	4621      	mov	r1, r4
 8002076:	f7fe fd93 	bl	8000ba0 <__aeabi_d2f>
 800207a:	4602      	mov	r2, r0
			Loadcell_bot_filtered    =    1.6556 * Loadcell_bot_filtered_m1
 800207c:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <processKnee+0x510>)
 800207e:	601a      	str	r2, [r3, #0]
			Loadcell_bot_m2          = Loadcell_bot_m1;
 8002080:	4b67      	ldr	r3, [pc, #412]	; (8002220 <processKnee+0x508>)
 8002082:	881a      	ldrh	r2, [r3, #0]
 8002084:	4b67      	ldr	r3, [pc, #412]	; (8002224 <processKnee+0x50c>)
 8002086:	801a      	strh	r2, [r3, #0]
			Loadcell_bot_m1          = Loadcell_bot;
 8002088:	4a65      	ldr	r2, [pc, #404]	; (8002220 <processKnee+0x508>)
 800208a:	8a3b      	ldrh	r3, [r7, #16]
 800208c:	8013      	strh	r3, [r2, #0]
			Loadcell_bot_filtered_m2 = Loadcell_bot_filtered_m1;
 800208e:	4b62      	ldr	r3, [pc, #392]	; (8002218 <processKnee+0x500>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a62      	ldr	r2, [pc, #392]	; (800221c <processKnee+0x504>)
 8002094:	6013      	str	r3, [r2, #0]
			Loadcell_bot_filtered_m1 = Loadcell_bot_filtered;
 8002096:	4b64      	ldr	r3, [pc, #400]	; (8002228 <processKnee+0x510>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a5f      	ldr	r2, [pc, #380]	; (8002218 <processKnee+0x500>)
 800209c:	6013      	str	r3, [r2, #0]
		}

		// Get raw IMU data in ADC values
		imu_data_now = IMU1_read();
 800209e:	4c63      	ldr	r4, [pc, #396]	; (800222c <processKnee+0x514>)
 80020a0:	463b      	mov	r3, r7
 80020a2:	4618      	mov	r0, r3
 80020a4:	f003 fbb0 	bl	8005808 <IMU1_read>
 80020a8:	4622      	mov	r2, r4
 80020aa:	463b      	mov	r3, r7
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	6859      	ldr	r1, [r3, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	6010      	str	r0, [r2, #0]
 80020b4:	6051      	str	r1, [r2, #4]
 80020b6:	6093      	str	r3, [r2, #8]

		// Calibrate accelerometer in ADC values
		imu_data_now = AccelCal(imu_data_now);
 80020b8:	4e5c      	ldr	r6, [pc, #368]	; (800222c <processKnee+0x514>)
 80020ba:	4638      	mov	r0, r7
 80020bc:	4b5b      	ldr	r3, [pc, #364]	; (800222c <processKnee+0x514>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	2100      	movs	r1, #0
 80020c2:	4611      	mov	r1, r2
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	2500      	movs	r5, #0
 80020c8:	4615      	mov	r5, r2
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2400      	movs	r4, #0
 80020ce:	461c      	mov	r4, r3
 80020d0:	462a      	mov	r2, r5
 80020d2:	4623      	mov	r3, r4
 80020d4:	f000 f9a8 	bl	8002428 <AccelCal>
 80020d8:	4632      	mov	r2, r6
 80020da:	463b      	mov	r3, r7
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	6859      	ldr	r1, [r3, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	6010      	str	r0, [r2, #0]
 80020e4:	6051      	str	r1, [r2, #4]
 80020e6:	6093      	str	r3, [r2, #8]

		// Remove offsets from gyro in ADC values
		imu_data_now.GX -= -60;
 80020e8:	4b50      	ldr	r3, [pc, #320]	; (800222c <processKnee+0x514>)
 80020ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	333c      	adds	r3, #60	; 0x3c
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	b21a      	sxth	r2, r3
 80020f6:	4b4d      	ldr	r3, [pc, #308]	; (800222c <processKnee+0x514>)
 80020f8:	80da      	strh	r2, [r3, #6]
		imu_data_now.GY -= -29;
 80020fa:	4b4c      	ldr	r3, [pc, #304]	; (800222c <processKnee+0x514>)
 80020fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002100:	b29b      	uxth	r3, r3
 8002102:	331d      	adds	r3, #29
 8002104:	b29b      	uxth	r3, r3
 8002106:	b21a      	sxth	r2, r3
 8002108:	4b48      	ldr	r3, [pc, #288]	; (800222c <processKnee+0x514>)
 800210a:	811a      	strh	r2, [r3, #8]
		imu_data_now.GZ -=  16;
 800210c:	4b47      	ldr	r3, [pc, #284]	; (800222c <processKnee+0x514>)
 800210e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b10      	subs	r3, #16
 8002116:	b29b      	uxth	r3, r3
 8002118:	b21a      	sxth	r2, r3
 800211a:	4b44      	ldr	r3, [pc, #272]	; (800222c <processKnee+0x514>)
 800211c:	815a      	strh	r2, [r3, #10]

		// Get accel data for heel strike if needed in ADC values
		IMU_acc = -imu_data_now.AY;
 800211e:	4b43      	ldr	r3, [pc, #268]	; (800222c <processKnee+0x514>)
 8002120:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002124:	425b      	negs	r3, r3
 8002126:	ee07 3a90 	vmov	s15, r3
 800212a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800212e:	4b40      	ldr	r3, [pc, #256]	; (8002230 <processKnee+0x518>)
 8002130:	edc3 7a00 	vstr	s15, [r3]

		// Compute hip angle using complementary filter
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);	// Units in radians
 8002134:	4b3f      	ldr	r3, [pc, #252]	; (8002234 <processKnee+0x51c>)
 8002136:	edd3 7a00 	vldr	s15, [r3]
 800213a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002238 <processKnee+0x520>
 800213e:	4b3b      	ldr	r3, [pc, #236]	; (800222c <processKnee+0x514>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	2000      	movs	r0, #0
 8002144:	4610      	mov	r0, r2
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	2100      	movs	r1, #0
 800214a:	4611      	mov	r1, r2
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2200      	movs	r2, #0
 8002150:	461a      	mov	r2, r3
 8002152:	eef0 0a47 	vmov.f32	s1, s14
 8002156:	eeb0 0a67 	vmov.f32	s0, s15
 800215a:	f003 fe71 	bl	8005e40 <IMU_orientation>
 800215e:	eef0 7a40 	vmov.f32	s15, s0
 8002162:	4b36      	ldr	r3, [pc, #216]	; (800223c <processKnee+0x524>)
 8002164:	edc3 7a00 	vstr	s15, [r3]
		imu_angle_past = imu_angle_now;											// Units in radians
 8002168:	4b34      	ldr	r3, [pc, #208]	; (800223c <processKnee+0x524>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a31      	ldr	r2, [pc, #196]	; (8002234 <processKnee+0x51c>)
 800216e:	6013      	str	r3, [r2, #0]
		hip_angle      = imu_angle_now*rad2deg - angle_now;						// Units in degrees
 8002170:	4b32      	ldr	r3, [pc, #200]	; (800223c <processKnee+0x524>)
 8002172:	edd3 7a00 	vldr	s15, [r3]
 8002176:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002240 <processKnee+0x528>
 800217a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800217e:	ee17 0a90 	vmov	r0, s15
 8002182:	f7fe f9e1 	bl	8000548 <__aeabi_f2d>
 8002186:	a31c      	add	r3, pc, #112	; (adr r3, 80021f8 <processKnee+0x4e0>)
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	f7fe fb5a 	bl	8000844 <__aeabi_ddiv>
 8002190:	4603      	mov	r3, r0
 8002192:	460c      	mov	r4, r1
 8002194:	4625      	mov	r5, r4
 8002196:	461c      	mov	r4, r3
 8002198:	6978      	ldr	r0, [r7, #20]
 800219a:	f7fe f9d5 	bl	8000548 <__aeabi_f2d>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4620      	mov	r0, r4
 80021a4:	4629      	mov	r1, r5
 80021a6:	f7fe f86f 	bl	8000288 <__aeabi_dsub>
 80021aa:	4603      	mov	r3, r0
 80021ac:	460c      	mov	r4, r1
 80021ae:	4618      	mov	r0, r3
 80021b0:	4621      	mov	r1, r4
 80021b2:	f7fe fcf5 	bl	8000ba0 <__aeabi_d2f>
 80021b6:	4602      	mov	r2, r0
 80021b8:	4b22      	ldr	r3, [pc, #136]	; (8002244 <processKnee+0x52c>)
 80021ba:	601a      	str	r2, [r3, #0]

		// Measure speed with oscope start
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_11);
 80021bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c0:	4821      	ldr	r0, [pc, #132]	; (8002248 <processKnee+0x530>)
 80021c2:	f7ff fd8b 	bl	8001cdc <LL_GPIO_SetOutputPin>

		// Command motor
		my_st_impedance = controller_impedance(angle_now, angular_velocity, Loadcell_bot_filtered, Loadcell_top_filtered, IMU_acc, hip_angle);
 80021c6:	4b21      	ldr	r3, [pc, #132]	; (800224c <processKnee+0x534>)
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <processKnee+0x510>)
 80021ce:	ed93 7a00 	vldr	s14, [r3]
 80021d2:	e03d      	b.n	8002250 <processKnee+0x538>
 80021d4:	f3af 8000 	nop.w
 80021d8:	089a0275 	.word	0x089a0275
 80021dc:	3fe69e1b 	.word	0x3fe69e1b
 80021e0:	eb1c432d 	.word	0xeb1c432d
 80021e4:	3f8a36e2 	.word	0x3f8a36e2
 80021e8:	eb1c432d 	.word	0xeb1c432d
 80021ec:	3f9a36e2 	.word	0x3f9a36e2
 80021f0:	6cf41f21 	.word	0x6cf41f21
 80021f4:	3ffa7d56 	.word	0x3ffa7d56
 80021f8:	2e48e8a7 	.word	0x2e48e8a7
 80021fc:	400921ff 	.word	0x400921ff
 8002200:	20008964 	.word	0x20008964
 8002204:	3fd3eab3 	.word	0x3fd3eab3
 8002208:	20008958 	.word	0x20008958
 800220c:	2000895c 	.word	0x2000895c
 8002210:	2000893c 	.word	0x2000893c
 8002214:	20008954 	.word	0x20008954
 8002218:	2000896c 	.word	0x2000896c
 800221c:	20008960 	.word	0x20008960
 8002220:	2000895e 	.word	0x2000895e
 8002224:	2000893e 	.word	0x2000893e
 8002228:	20008940 	.word	0x20008940
 800222c:	20008948 	.word	0x20008948
 8002230:	200005a0 	.word	0x200005a0
 8002234:	20008944 	.word	0x20008944
 8002238:	3b000000 	.word	0x3b000000
 800223c:	20008968 	.word	0x20008968
 8002240:	43340000 	.word	0x43340000
 8002244:	20000594 	.word	0x20000594
 8002248:	48000400 	.word	0x48000400
 800224c:	2000059c 	.word	0x2000059c
 8002250:	4b66      	ldr	r3, [pc, #408]	; (80023ec <processKnee+0x6d4>)
 8002252:	edd3 6a00 	vldr	s13, [r3]
 8002256:	4b66      	ldr	r3, [pc, #408]	; (80023f0 <processKnee+0x6d8>)
 8002258:	ed93 6a00 	vldr	s12, [r3]
 800225c:	4b65      	ldr	r3, [pc, #404]	; (80023f4 <processKnee+0x6dc>)
 800225e:	edd3 5a00 	vldr	s11, [r3]
 8002262:	4c65      	ldr	r4, [pc, #404]	; (80023f8 <processKnee+0x6e0>)
 8002264:	463b      	mov	r3, r7
 8002266:	eef0 2a65 	vmov.f32	s5, s11
 800226a:	eeb0 2a46 	vmov.f32	s4, s12
 800226e:	eef0 1a66 	vmov.f32	s3, s13
 8002272:	eeb0 1a47 	vmov.f32	s2, s14
 8002276:	eef0 0a67 	vmov.f32	s1, s15
 800227a:	ed97 0a05 	vldr	s0, [r7, #20]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff f9c2 	bl	8001608 <controller_impedance>
 8002284:	463b      	mov	r3, r7
 8002286:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800228a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		// Measure speed with oscope end
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_11);
 800228e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002292:	485a      	ldr	r0, [pc, #360]	; (80023fc <processKnee+0x6e4>)
 8002294:	f7ff fd30 	bl	8001cf8 <LL_GPIO_ResetOutputPin>
//		F_Sensor_ADC_Store();
//		Mag_Enc2_Store();

		// Store data
		// Data can only be stored as integers, so some scaling is done to help resolution
		Knee_data_storeIMU(imu_data_now.AX, imu_data_now.AY, imu_data_now.AZ, imu_data_now.GX, imu_data_now.GY, imu_data_now.GZ);
 8002298:	4b59      	ldr	r3, [pc, #356]	; (8002400 <processKnee+0x6e8>)
 800229a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800229e:	4618      	mov	r0, r3
 80022a0:	4b57      	ldr	r3, [pc, #348]	; (8002400 <processKnee+0x6e8>)
 80022a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022a6:	4619      	mov	r1, r3
 80022a8:	4b55      	ldr	r3, [pc, #340]	; (8002400 <processKnee+0x6e8>)
 80022aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022ae:	461c      	mov	r4, r3
 80022b0:	4b53      	ldr	r3, [pc, #332]	; (8002400 <processKnee+0x6e8>)
 80022b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80022b6:	461d      	mov	r5, r3
 80022b8:	4b51      	ldr	r3, [pc, #324]	; (8002400 <processKnee+0x6e8>)
 80022ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022be:	461a      	mov	r2, r3
 80022c0:	4b4f      	ldr	r3, [pc, #316]	; (8002400 <processKnee+0x6e8>)
 80022c2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	9200      	str	r2, [sp, #0]
 80022ca:	462b      	mov	r3, r5
 80022cc:	4622      	mov	r2, r4
 80022ce:	f003 faef 	bl	80058b0 <Knee_data_storeIMU>
		Knee_data_store(angle_now * 100, hip_angle * 100, Loadcell_top, Loadcell_top_filtered);
 80022d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80022d6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002404 <processKnee+0x6ec>
 80022da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022de:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80022e2:	4b44      	ldr	r3, [pc, #272]	; (80023f4 <processKnee+0x6dc>)
 80022e4:	edd3 7a00 	vldr	s15, [r3]
 80022e8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002404 <processKnee+0x6ec>
 80022ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80022f4:	8a7a      	ldrh	r2, [r7, #18]
 80022f6:	4b3d      	ldr	r3, [pc, #244]	; (80023ec <processKnee+0x6d4>)
 80022f8:	edd3 7a00 	vldr	s15, [r3]
 80022fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002300:	ee17 3a90 	vmov	r3, s15
 8002304:	ee17 1a10 	vmov	r1, s14
 8002308:	ee16 0a90 	vmov	r0, s13
 800230c:	f003 fb46 	bl	800599c <Knee_data_store>
		Knee_data_store1(Loadcell_bot, Loadcell_bot_filtered, my_st_impedance.desired_torque * 100, angular_velocity * 100);
 8002310:	8a38      	ldrh	r0, [r7, #16]
 8002312:	4b3d      	ldr	r3, [pc, #244]	; (8002408 <processKnee+0x6f0>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800231c:	4b36      	ldr	r3, [pc, #216]	; (80023f8 <processKnee+0x6e0>)
 800231e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002322:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002404 <processKnee+0x6ec>
 8002326:	ee67 7a87 	vmul.f32	s15, s15, s14
 800232a:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 800232e:	4b37      	ldr	r3, [pc, #220]	; (800240c <processKnee+0x6f4>)
 8002330:	edd3 7a00 	vldr	s15, [r3]
 8002334:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002404 <processKnee+0x6ec>
 8002338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800233c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002340:	ee17 3a90 	vmov	r3, s15
 8002344:	ee16 2a10 	vmov	r2, s12
 8002348:	ee16 1a90 	vmov	r1, s13
 800234c:	f003 fb7e 	bl	8005a4c <Knee_data_store1>
//        Knee_data_store2(15,16);    <-- this is commented out in sensor.c

		if (Sub_cnt == 5) {
 8002350:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <processKnee+0x6f8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b05      	cmp	r3, #5
 8002356:	d121      	bne.n	800239c <processKnee+0x684>
			//BSbuffer[s_flag].Blank1 = (uint8_t) (LL_GPIO_IsInputPinSet(GPIOA,LL_GPIO_PIN_10));
			BSbuffer[s_flag].RTC_Time = (uint32_t) (RTC->TR & 0x007F7F7F);
 8002358:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <processKnee+0x6fc>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	4618      	mov	r0, r3
 8002360:	4b2d      	ldr	r3, [pc, #180]	; (8002418 <processKnee+0x700>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 327f 	and.w	r2, r3, #2139062143	; 0x7f7f7f7f
 8002368:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 800236c:	492b      	ldr	r1, [pc, #172]	; (800241c <processKnee+0x704>)
 800236e:	0383      	lsls	r3, r0, #14
 8002370:	440b      	add	r3, r1
 8002372:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8002376:	3338      	adds	r3, #56	; 0x38
 8002378:	601a      	str	r2, [r3, #0]
			BSbuffer[s_flag].RTC_Date = (uint32_t) (RTC->DR & 0x00FFFF3F);
 800237a:	4b26      	ldr	r3, [pc, #152]	; (8002414 <processKnee+0x6fc>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	4618      	mov	r0, r3
 8002382:	4b25      	ldr	r3, [pc, #148]	; (8002418 <processKnee+0x700>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800238a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800238e:	4923      	ldr	r1, [pc, #140]	; (800241c <processKnee+0x704>)
 8002390:	0383      	lsls	r3, r0, #14
 8002392:	440b      	add	r3, r1
 8002394:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8002398:	333c      	adds	r3, #60	; 0x3c
 800239a:	601a      	str	r2, [r3, #0]

		}

		// Switching Buffer
		if (Sub_cnt == Highest_sensor_count)    // Total samples to be stored in a 16KB buffer
 800239c:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <processKnee+0x6f8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80023a4:	d118      	bne.n	80023d8 <processKnee+0x6c0>
		{
			Sub_cnt = 0;          // Reset Counter of sensor element
 80023a6:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <processKnee+0x6f8>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
			SD_write_Flag = 1;    // Flag set to write filled buffer content
 80023ac:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <processKnee+0x708>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
			// Changing Buffer
			if (s_flag == 0)    // if current storgae_buffer was 0
 80023b2:	4b18      	ldr	r3, [pc, #96]	; (8002414 <processKnee+0x6fc>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d106      	bne.n	80023ca <processKnee+0x6b2>
			{
				w_flag = 0;    // write_buffer to be saved in SD card = 0
 80023bc:	4b19      	ldr	r3, [pc, #100]	; (8002424 <processKnee+0x70c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
				s_flag = 1;    // current storgae_buffer is set 1
 80023c2:	4b14      	ldr	r3, [pc, #80]	; (8002414 <processKnee+0x6fc>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]
		else
		{
			Sub_cnt++;    // Increment Counter of sensor element
		}
	}
}
 80023c8:	e00b      	b.n	80023e2 <processKnee+0x6ca>
				w_flag = 1;    // write_buffer to be saved in SD card = 1
 80023ca:	4b16      	ldr	r3, [pc, #88]	; (8002424 <processKnee+0x70c>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
				s_flag = 0;    // current storgae_buffer is set 0
 80023d0:	4b10      	ldr	r3, [pc, #64]	; (8002414 <processKnee+0x6fc>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
}
 80023d6:	e004      	b.n	80023e2 <processKnee+0x6ca>
			Sub_cnt++;    // Increment Counter of sensor element
 80023d8:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <processKnee+0x6f8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	3301      	adds	r3, #1
 80023de:	4a0c      	ldr	r2, [pc, #48]	; (8002410 <processKnee+0x6f8>)
 80023e0:	6013      	str	r3, [r2, #0]
}
 80023e2:	bf00      	nop
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20008954 	.word	0x20008954
 80023f0:	200005a0 	.word	0x200005a0
 80023f4:	20000594 	.word	0x20000594
 80023f8:	20008918 	.word	0x20008918
 80023fc:	48000400 	.word	0x48000400
 8002400:	20008948 	.word	0x20008948
 8002404:	42c80000 	.word	0x42c80000
 8002408:	20008940 	.word	0x20008940
 800240c:	2000059c 	.word	0x2000059c
 8002410:	200005a8 	.word	0x200005a8
 8002414:	200005ac 	.word	0x200005ac
 8002418:	40002800 	.word	0x40002800
 800241c:	20000874 	.word	0x20000874
 8002420:	20008978 	.word	0x20008978
 8002424:	20000010 	.word	0x20000010

08002428 <AccelCal>:

struct imu_data AccelCal (struct imu_data imu_data_now)
{
 8002428:	b490      	push	{r4, r7}
 800242a:	b094      	sub	sp, #80	; 0x50
 800242c:	af00      	add	r7, sp, #0
 800242e:	6178      	str	r0, [r7, #20]
 8002430:	f107 0008 	add.w	r0, r7, #8
 8002434:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// Separate data in ADC values
	float ax = imu_data_now.AX;
 8002438:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800243c:	ee07 3a90 	vmov	s15, r3
 8002440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002444:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float ay = imu_data_now.AY;
 8002448:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800244c:	ee07 3a90 	vmov	s15, r3
 8002450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002454:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	float az = imu_data_now.AZ;
 8002458:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800245c:	ee07 3a90 	vmov	s15, r3
 8002460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002464:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

	// Accelerometer bias in ADV values
	float bx = 0.0198038816126119 * 4096;
 8002468:	4b71      	ldr	r3, [pc, #452]	; (8002630 <AccelCal+0x208>)
 800246a:	643b      	str	r3, [r7, #64]	; 0x40
	float by = 0.0223486211295295 * 4096;
 800246c:	4b71      	ldr	r3, [pc, #452]	; (8002634 <AccelCal+0x20c>)
 800246e:	63fb      	str	r3, [r7, #60]	; 0x3c
	float bz = 0.0296143940007433 * 4096;
 8002470:	4b71      	ldr	r3, [pc, #452]	; (8002638 <AccelCal+0x210>)
 8002472:	63bb      	str	r3, [r7, #56]	; 0x38

	// Sine/Cosine of Euler angles (1 = alpha, 2 = beta, 3 = gamma)
	float c1 = cos(-0.00991457347766541);
 8002474:	4b71      	ldr	r3, [pc, #452]	; (800263c <AccelCal+0x214>)
 8002476:	637b      	str	r3, [r7, #52]	; 0x34
	float c2 = cos(-0.00385752322363421);
 8002478:	4b71      	ldr	r3, [pc, #452]	; (8002640 <AccelCal+0x218>)
 800247a:	633b      	str	r3, [r7, #48]	; 0x30
	float c3 = cos(-0.009920754204949  );
 800247c:	4b71      	ldr	r3, [pc, #452]	; (8002644 <AccelCal+0x21c>)
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float s1 = sin(-0.00991457347766541);
 8002480:	4b71      	ldr	r3, [pc, #452]	; (8002648 <AccelCal+0x220>)
 8002482:	62bb      	str	r3, [r7, #40]	; 0x28
	float s2 = sin(-0.00385752322363421);
 8002484:	4b71      	ldr	r3, [pc, #452]	; (800264c <AccelCal+0x224>)
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
	float s3 = sin(-0.009920754204949  );
 8002488:	4b71      	ldr	r3, [pc, #452]	; (8002650 <AccelCal+0x228>)
 800248a:	623b      	str	r3, [r7, #32]

	// Scaling factor (helps with normalization)
	float n = 1.00509896445316;
 800248c:	4b71      	ldr	r3, [pc, #452]	; (8002654 <AccelCal+0x22c>)
 800248e:	61fb      	str	r3, [r7, #28]

	// Accelerometer calibration in radians
	imu_data_now.AX = n * ( ax*(c1*c3 - c2*s1*s3) + ay*(  -c3*s1 - c1*c2*s3) + az*( s2*s3) ) - bx;
 8002490:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002494:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800249c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80024a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80024ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024b4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80024b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024bc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024c0:	eef1 6a67 	vneg.f32	s13, s15
 80024c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024cc:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 80024d0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024d4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80024dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024e4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80024e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024f0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80024f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80024f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002504:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002508:	edd7 7a07 	vldr	s15, [r7, #28]
 800250c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002510:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800251c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002520:	88bb      	ldrh	r3, [r7, #4]
 8002522:	b21b      	sxth	r3, r3
 8002524:	813b      	strh	r3, [r7, #8]
	imu_data_now.AY = n * ( ax*(c1*s3 + c2*c3*s1) + ay*(c1*c2*c3 - s1*s3   ) + az*(-c3*s2) ) - by;
 8002526:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800252a:	edd7 7a08 	vldr	s15, [r7, #32]
 800252e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002532:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002536:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800253a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800253e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002546:	ee37 7a27 	vadd.f32	s14, s14, s15
 800254a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800254e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002552:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002556:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800255a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800255e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002562:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002566:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800256a:	edd7 7a08 	vldr	s15, [r7, #32]
 800256e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002572:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002576:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800257a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800257e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002582:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002586:	eef1 6a67 	vneg.f32	s13, s15
 800258a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800258e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002592:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800259a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800259e:	edd7 7a07 	vldr	s15, [r7, #28]
 80025a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025a6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80025aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025b2:	edc7 7a01 	vstr	s15, [r7, #4]
 80025b6:	88bb      	ldrh	r3, [r7, #4]
 80025b8:	b21b      	sxth	r3, r3
 80025ba:	817b      	strh	r3, [r7, #10]
	imu_data_now.AZ = n * ( ax*(        s1*s2   ) + ay*(           c1*s2   ) + az*( c2   ) ) - bz;
 80025bc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80025c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025c8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80025cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80025d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025dc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80025e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025e8:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80025ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80025fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002600:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002608:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800260c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002610:	88bb      	ldrh	r3, [r7, #4]
 8002612:	b21b      	sxth	r3, r3
 8002614:	81bb      	strh	r3, [r7, #12]

	// Return in radians
	return imu_data_now;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	461c      	mov	r4, r3
 800261a:	f107 0308 	add.w	r3, r7, #8
 800261e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002620:	6020      	str	r0, [r4, #0]
 8002622:	6061      	str	r1, [r4, #4]
 8002624:	60a2      	str	r2, [r4, #8]
}
 8002626:	6978      	ldr	r0, [r7, #20]
 8002628:	3750      	adds	r7, #80	; 0x50
 800262a:	46bd      	mov	sp, r7
 800262c:	bc90      	pop	{r4, r7}
 800262e:	4770      	bx	lr
 8002630:	42a23bc0 	.word	0x42a23bc0
 8002634:	42b71475 	.word	0x42b71475
 8002638:	42f299e3 	.word	0x42f299e3
 800263c:	3f7ffcc7 	.word	0x3f7ffcc7
 8002640:	3f7fff83 	.word	0x3f7fff83
 8002644:	3f7ffcc6 	.word	0x3f7ffcc6
 8002648:	bc22700e 	.word	0xbc22700e
 800264c:	bb7cce57 	.word	0xbb7cce57
 8002650:	bc2289fa 	.word	0xbc2289fa
 8002654:	3f80a715 	.word	0x3f80a715

08002658 <NVIC_DisableIRQ>:
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002662:	4909      	ldr	r1, [pc, #36]	; (8002688 <NVIC_DisableIRQ+0x30>)
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	79fa      	ldrb	r2, [r7, #7]
 800266c:	f002 021f 	and.w	r2, r2, #31
 8002670:	2001      	movs	r0, #1
 8002672:	fa00 f202 	lsl.w	r2, r0, r2
 8002676:	3320      	adds	r3, #32
 8002678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000e100 	.word	0xe000e100

0800268c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine));
 8002694:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	401a      	ands	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	429a      	cmp	r2, r3
 80026a0:	bf0c      	ite	eq
 80026a2:	2301      	moveq	r3, #1
 80026a4:	2300      	movne	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	40010400 	.word	0x40010400

080026b8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80026c0:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6153      	str	r3, [r2, #20]
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40010400 	.word	0x40010400

080026d8 <LL_LPTIM_ClearFLAG_ARRM>:
  * @rmtoll ICR          ARRMCF        LL_LPTIM_ClearFLAG_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_ClearFLAG_ARRM(LPTIM_TypeDef *LPTIMx)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f043 0202 	orr.w	r2, r3, #2
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	605a      	str	r2, [r3, #4]
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <LL_LPTIM_IsActiveFlag_ARRM>:
  * @rmtoll ISR          ARRM          LL_LPTIM_IsActiveFlag_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPTIM_IsActiveFlag_ARRM(LPTIM_TypeDef *LPTIMx)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == (LPTIM_ISR_ARRM));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b02      	cmp	r3, #2
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <LL_LPTIM_DisableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_DisableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_DisableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f023 0202 	bic.w	r2, r3, #2
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	609a      	str	r2, [r3, #8]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <LL_AHB2_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8002748:	4906      	ldr	r1, [pc, #24]	; (8002764 <LL_AHB2_GRP1_DisableClock+0x24>)
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <LL_AHB2_GRP1_DisableClock+0x24>)
 800274c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	43db      	mvns	r3, r3
 8002752:	4013      	ands	r3, r2
 8002754:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000

08002768 <main>:
// Greg start
uint8_t isProcessKneeRequired = 0;
// Greg end


int main(void) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
	Pros_state = LP_STOP;                  // Default state after power ON reset
 800276e:	4b90      	ldr	r3, [pc, #576]	; (80029b0 <main+0x248>)
 8002770:	2201      	movs	r2, #1
 8002772:	701a      	strb	r2, [r3, #0]
	SystemClock_Config_MSI_80MHz();	// Configure the system clock to 48 MHz from MSI, PLL disabled for power saving
 8002774:	f004 f8c8 	bl	8006908 <SystemClock_Config_MSI_80MHz>

	// If RTC is previously configured and running via backup battery i.e. BackUp Register Data is available, No need to update RTC time again
	if (RTC_BAK_GetRegister(RTC, 0x01) != RTC_BKP_DATE_TIME_UPDTATED) //    0x01 value was arbitrarily set from previous Configure_RTC_Calendar()
 8002778:	2101      	movs	r1, #1
 800277a:	488e      	ldr	r0, [pc, #568]	; (80029b4 <main+0x24c>)
 800277c:	f002 f978 	bl	8004a70 <RTC_BAK_GetRegister>
 8002780:	4602      	mov	r2, r0
 8002782:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8002786:	429a      	cmp	r2, r3
 8002788:	d001      	beq.n	800278e <main+0x26>
	{
		MX_RTC_Init();   // Set RTC clock source and parameters
 800278a:	f002 f8c9 	bl	8004920 <MX_RTC_Init>
	}

	MX_GPIO_Init();
 800278e:	f7ff f873 	bl	8001878 <MX_GPIO_Init>
	HAL_Init(); // Reset of all peripherals, Initializes the Flash interface and the Systick.
 8002792:	f005 fe36 	bl	8008402 <HAL_Init>

	DFU_Bypass();
 8002796:	f001 fbd3 	bl	8003f40 <DFU_Bypass>
	Configure_USART_1();  // Debug with PC
 800279a:	f002 fe2d 	bl	80053f8 <Configure_USART_1>
	sprintf(PrintBuf, "Hello");
 800279e:	4b86      	ldr	r3, [pc, #536]	; (80029b8 <main+0x250>)
 80027a0:	4a86      	ldr	r2, [pc, #536]	; (80029bc <main+0x254>)
 80027a2:	6810      	ldr	r0, [r2, #0]
 80027a4:	6018      	str	r0, [r3, #0]
 80027a6:	8892      	ldrh	r2, [r2, #4]
 80027a8:	809a      	strh	r2, [r3, #4]
	USART1_wr_print(PrintBuf, sizeof(PrintBuf));
 80027aa:	2132      	movs	r1, #50	; 0x32
 80027ac:	4882      	ldr	r0, [pc, #520]	; (80029b8 <main+0x250>)
 80027ae:	f002 fe67 	bl	8005480 <USART1_wr_print>
//IMU3   SPI2
//IMU4-5 SPI3
	/*Sensor Initialization starts here */

// P_IMU4_SPI3_Initialization_at_reset();   //IMU4-5_SPI3 //step1
	P_IMU1_SPI1_Initialization_at_reset(); //IMU1-2__SPI1  (only IMU1 configured)
 80027b2:	f002 fbcb 	bl	8004f4c <P_IMU1_SPI1_Initialization_at_reset>
	P_ADC_Sensor_GPIO_Init(); //ADC GPIOs //here we initialized the chip select pins as well
 80027b6:	f002 f985 	bl	8004ac4 <P_ADC_Sensor_GPIO_Init>

	/*CAN Bus SPI Initialization*/
//	MCP_SPI2_Initialization_at_reset();

	//Configure the mcp25625, CAN bus and SPI2
	CAN_configure();
 80027ba:	f000 fb33 	bl	8002e24 <CAN_configure>
	//CAN_mode();

	//Transmits a message over can
//clear state

	EPOS4_enable(CAN_ID);
 80027be:	4b80      	ldr	r3, [pc, #512]	; (80029c0 <main+0x258>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fc19 	bl	8000ffc <EPOS4_enable>
	//EPOS4_set_operation_mode(CAN_ID, 3); // this for velocity mode

	EPOS4_set_operation_mode(CAN_ID, 0x0A); // torque mode
 80027ca:	4b7d      	ldr	r3, [pc, #500]	; (80029c0 <main+0x258>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	210a      	movs	r1, #10
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fbf5 	bl	8000fc2 <EPOS4_set_operation_mode>
	EPOS4_clear_errors(CAN_ID);
 80027d8:	4b79      	ldr	r3, [pc, #484]	; (80029c0 <main+0x258>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fc64 	bl	80010ac <EPOS4_clear_errors>
	delay_us(1500);
 80027e4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80027e8:	f004 f834 	bl	8006854 <delay_us>

	EPOS4_enable(CAN_ID);
 80027ec:	4b74      	ldr	r3, [pc, #464]	; (80029c0 <main+0x258>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fc02 	bl	8000ffc <EPOS4_enable>
//EPOS4_enable2(CAN_ID);

	/* remove spikes from the beginning part*/
	for (int jj = 1; jj < 1000; ++jj);
 80027f8:	2301      	movs	r3, #1
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	e002      	b.n	8002804 <main+0x9c>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3301      	adds	r3, #1
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800280a:	dbf8      	blt.n	80027fe <main+0x96>

	USB_PA9_EXTI_conf(); // USB connectivity pin detect Interrupt // Data_Pause_Resume_PC0_EXTI_conf();
 800280c:	f002 f942 	bl	8004a94 <USB_PA9_EXTI_conf>

	Configure_LPTIM2_Int(); // Configured LPTIM2 but not started. To be started before going to Loop
 8002810:	f004 f8ea 	bl	80069e8 <Configure_LPTIM2_Int>
	Configure_Interrupt();       // Re-arrange NVIC interrupt priority
 8002814:	f001 f9fe 	bl	8003c14 <Configure_Interrupt>

	Power_on_reset();            // Following reset is found by troubleshooting
 8002818:	f001 f9ea 	bl	8003bf0 <Power_on_reset>

#ifdef AIM_Start_Data_Collection_on_Reset
	AIM_DataStart_at_Reset();
 800281c:	f002 ffc6 	bl	80057ac <AIM_DataStart_at_Reset>
	GREEN_LED_ONLY();
 8002820:	f7ff f9d2 	bl	8001bc8 <GREEN_LED_ONLY>
	// Note: Data collection is stopped in Power on Reset. Send the command from PC LabVIEW software in USB VCP Mode to start data collection.
	// Data collection will resume after USB disconnect.
	// Only way to stop Data collection is by accessing SD card from PC LabVIEW program

	while (1) {
		if (isProcessKneeRequired) {
 8002824:	4b67      	ldr	r3, [pc, #412]	; (80029c4 <main+0x25c>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d004      	beq.n	8002836 <main+0xce>
			processKnee();
 800282c:	f7ff fa74 	bl	8001d18 <processKnee>
			isProcessKneeRequired = 0;
 8002830:	4b64      	ldr	r3, [pc, #400]	; (80029c4 <main+0x25c>)
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
		}
		switch (Pros_state) {
 8002836:	4b5e      	ldr	r3, [pc, #376]	; (80029b0 <main+0x248>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	3b01      	subs	r3, #1
 800283c:	2b06      	cmp	r3, #6
 800283e:	f200 80b5 	bhi.w	80029ac <main+0x244>
 8002842:	a201      	add	r2, pc, #4	; (adr r2, 8002848 <main+0xe0>)
 8002844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002848:	08002865 	.word	0x08002865
 800284c:	080028b7 	.word	0x080028b7
 8002850:	080029ad 	.word	0x080029ad
 8002854:	0800297f 	.word	0x0800297f
 8002858:	0800290d 	.word	0x0800290d
 800285c:	08002985 	.word	0x08002985
 8002860:	0800292b 	.word	0x0800292b
		case LP_STOP:      // Default mode for data collection
			EnterStop();   // Enter Stop Mode
 8002864:	f004 f844 	bl	80068f0 <EnterStop>
			 {
			 Pros_state = Data_Log_Pause_Mode;               // Next State Data_Log_Pause_Mode Mode
			 DataLog_Pause_ = 0;                           // Reset Flag to avoid looping
			 }*/

			if (USB_Present_ == 1) // After detecting USB attachment via EXTI_5 int
 8002868:	4b57      	ldr	r3, [pc, #348]	; (80029c8 <main+0x260>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d106      	bne.n	8002880 <main+0x118>
					{
				Pros_state = USB_MSC_VCP_Mode;   // Next State USB_MSC_Mode Mode
 8002872:	4b4f      	ldr	r3, [pc, #316]	; (80029b0 <main+0x248>)
 8002874:	2204      	movs	r2, #4
 8002876:	701a      	strb	r2, [r3, #0]
				USB_Present_ = 0;                 // Reset Flag to avoid looping
 8002878:	4b53      	ldr	r3, [pc, #332]	; (80029c8 <main+0x260>)
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
			}

			else {
				Pros_state = LP_STOP; // Return to Low Power Mode Data collection
			}
			break;
 800287e:	e096      	b.n	80029ae <main+0x246>
			} else if (FATAL_Error == 1)         // Triggered from Error_Handler
 8002880:	4b52      	ldr	r3, [pc, #328]	; (80029cc <main+0x264>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d106      	bne.n	8002896 <main+0x12e>
				FATAL_Error = 0;                  // Reset Flag to avoid looping
 8002888:	4b50      	ldr	r3, [pc, #320]	; (80029cc <main+0x264>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
				Pros_state = Fatal_Error_State;  // Next State Fatal_Error_State
 800288e:	4b48      	ldr	r3, [pc, #288]	; (80029b0 <main+0x248>)
 8002890:	2207      	movs	r2, #7
 8002892:	701a      	strb	r2, [r3, #0]
			break;
 8002894:	e08b      	b.n	80029ae <main+0x246>
			} else if (SD_write_Flag == 1) // When BUffer full to store in SD card
 8002896:	4b4e      	ldr	r3, [pc, #312]	; (80029d0 <main+0x268>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b01      	cmp	r3, #1
 800289e:	d106      	bne.n	80028ae <main+0x146>
				Pros_state = Sensor_FATFS_Write; // Next State Sensor_FATFS_Write Mode
 80028a0:	4b43      	ldr	r3, [pc, #268]	; (80029b0 <main+0x248>)
 80028a2:	2202      	movs	r2, #2
 80028a4:	701a      	strb	r2, [r3, #0]
				SD_write_Flag = 0;                // Reset Flag to avoid looping
 80028a6:	4b4a      	ldr	r3, [pc, #296]	; (80029d0 <main+0x268>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
			break;
 80028ac:	e07f      	b.n	80029ae <main+0x246>
				Pros_state = LP_STOP; // Return to Low Power Mode Data collection
 80028ae:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <main+0x248>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
			break;
 80028b4:	e07b      	b.n	80029ae <main+0x246>

		case Sensor_FATFS_Write:

			Battery_ADC_Value = 2500;
 80028b6:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <main+0x26c>)
 80028b8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80028bc:	801a      	strh	r2, [r3, #0]
			if (Battery_ADC_Value < Battery_3200mV) // Battery Cut off Value 3.0V
 80028be:	4b45      	ldr	r3, [pc, #276]	; (80029d4 <main+0x26c>)
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	f640 0251 	movw	r2, #2129	; 0x851
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d803      	bhi.n	80028d2 <main+0x16a>
			{
				Pros_state = Low_Battery_Mode; // Prepare to enter Low_Battery_Mode mode
 80028ca:	4b39      	ldr	r3, [pc, #228]	; (80029b0 <main+0x248>)
 80028cc:	2205      	movs	r2, #5
 80028ce:	701a      	strb	r2, [r3, #0]
					Pros_state = Fatal_Error_State; // Next State Fatal_Error_State
				} else {
					Pros_state = LP_STOP; // Return to Low Power Mode Data collection
				}
			}
			break;
 80028d0:	e06d      	b.n	80029ae <main+0x246>
				SD_Sensor_write();             // Write Sensor Buffer to SD card
 80028d2:	f001 fea5 	bl	8004620 <SD_Sensor_write>
				if (USB_Present_ == 1) // If USB attachment detected here via EXTI_5 int
 80028d6:	4b3c      	ldr	r3, [pc, #240]	; (80029c8 <main+0x260>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d106      	bne.n	80028ee <main+0x186>
					Pros_state = USB_MSC_VCP_Mode; // Next State USB_MSC_Mode Mode
 80028e0:	4b33      	ldr	r3, [pc, #204]	; (80029b0 <main+0x248>)
 80028e2:	2204      	movs	r2, #4
 80028e4:	701a      	strb	r2, [r3, #0]
					USB_Present_ = 0;             // Reset Flag to avoid looping
 80028e6:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <main+0x260>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
			break;
 80028ec:	e05f      	b.n	80029ae <main+0x246>
				} else if (FATAL_Error == 1)     // Triggered from Error_Handler
 80028ee:	4b37      	ldr	r3, [pc, #220]	; (80029cc <main+0x264>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d106      	bne.n	8002904 <main+0x19c>
					FATAL_Error = 0;              // Reset Flag to avoid looping
 80028f6:	4b35      	ldr	r3, [pc, #212]	; (80029cc <main+0x264>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
					Pros_state = Fatal_Error_State; // Next State Fatal_Error_State
 80028fc:	4b2c      	ldr	r3, [pc, #176]	; (80029b0 <main+0x248>)
 80028fe:	2207      	movs	r2, #7
 8002900:	701a      	strb	r2, [r3, #0]
			break;
 8002902:	e054      	b.n	80029ae <main+0x246>
					Pros_state = LP_STOP; // Return to Low Power Mode Data collection
 8002904:	4b2a      	ldr	r3, [pc, #168]	; (80029b0 <main+0x248>)
 8002906:	2201      	movs	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]
			break;
 800290a:	e050      	b.n	80029ae <main+0x246>

		case Low_Battery_Mode:
			NVIC_DisableIRQ(LPTIM2_IRQn); // Disabling LPTIM2 Timer Interrupt to stop Data collection
 800290c:	2042      	movs	r0, #66	; 0x42
 800290e:	f7ff fea3 	bl	8002658 <NVIC_DisableIRQ>
			ALL_LED_OFF();
 8002912:	f7ff f92d 	bl	8001b70 <ALL_LED_OFF>
			Shut_Down_SD();
 8002916:	f001 fa53 	bl	8003dc0 <Shut_Down_SD>

			Reset_Variables_for_LowBattery();
 800291a:	f001 fc4f 	bl	80041bc <Reset_Variables_for_LowBattery>
			Prepare_Goto_Dormant_Mode();
 800291e:	f001 fc41 	bl	80041a4 <Prepare_Goto_Dormant_Mode>
			Pros_state = Dormant_Idle_Stop;       // Idle Lowest Power STOP Mode
 8002922:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <main+0x248>)
 8002924:	2206      	movs	r2, #6
 8002926:	701a      	strb	r2, [r3, #0]

			break;
 8002928:	e041      	b.n	80029ae <main+0x246>

		case Fatal_Error_State:
			RED_LED_ONLY();
 800292a:	f7ff f971 	bl	8001c10 <RED_LED_ONLY>

			FATFS_Logstart_Delete();
 800292e:	f001 fdd3 	bl	80044d8 <FATFS_Logstart_Delete>
			Data_log_Start_Resume = 0;
 8002932:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <main+0x270>)
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]

			SD_write_Flag = 0;
 8002938:	4b25      	ldr	r3, [pc, #148]	; (80029d0 <main+0x268>)
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
			NVIC_DisableIRQ(LPTIM2_IRQn);
 800293e:	2042      	movs	r0, #66	; 0x42
 8002940:	f7ff fe8a 	bl	8002658 <NVIC_DisableIRQ>

			LL_LPTIM_DisableIT_ARRM(LPTIM2);
 8002944:	4825      	ldr	r0, [pc, #148]	; (80029dc <main+0x274>)
 8002946:	f7ff feea 	bl	800271e <LL_LPTIM_DisableIT_ARRM>
			SD_POWER_OFF();
 800294a:	f7ff f9c0 	bl	8001cce <SD_POWER_OFF>
			LL_AHB2_GRP1_DisableClock(LL_AHB2_GRP1_PERIPH_ADC);
 800294e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002952:	f7ff fef5 	bl	8002740 <LL_AHB2_GRP1_DisableClock>

			EnterStop();   // Enter Stop Mode
 8002956:	f003 ffcb 	bl	80068f0 <EnterStop>
			// Wake Up after STOP Mode only by USB EXTI Int

			if (USB_Present_ == 1) // After detecting USB attachment via EXTI_5 int
 800295a:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <main+0x260>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d108      	bne.n	8002976 <main+0x20e>
					{
				Pros_state = USB_MSC_VCP_Mode;   // Next State USB_MSC_Mode Mode
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <main+0x248>)
 8002966:	2204      	movs	r2, #4
 8002968:	701a      	strb	r2, [r3, #0]
				USB_Present_ = 0;                 // Reset Flag to avoid looping
 800296a:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <main+0x260>)
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
				SD_POWER_ON();               				// Power on SD CARD
 8002970:	f7ff f9a6 	bl	8001cc0 <SD_POWER_ON>
			} else {
				Pros_state = Dormant_Idle_Stop; // Stay Dormant Mode if no external events
			}
			break;
 8002974:	e01b      	b.n	80029ae <main+0x246>
				Pros_state = Dormant_Idle_Stop; // Stay Dormant Mode if no external events
 8002976:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <main+0x248>)
 8002978:	2206      	movs	r2, #6
 800297a:	701a      	strb	r2, [r3, #0]
			break;
 800297c:	e017      	b.n	80029ae <main+0x246>

		case USB_MSC_VCP_Mode:

			USB_Init_Start(); // Initialize USB and Stay USB mode as long as USB cable connected
 800297e:	f001 fb61 	bl	8004044 <USB_Init_Start>

			break;
 8002982:	e014      	b.n	80029ae <main+0x246>

		case Dormant_Idle_Stop: // Idle Lowest Power Stop Mode with no Data log (only wait for USB connectivity)

			EnterStop();   // Enter Stop Mode
 8002984:	f003 ffb4 	bl	80068f0 <EnterStop>
			// Wake Up after STOP Mode only by USB EXTI Int

			if (USB_Present_ == 1) // After detecting USB attachment via EXTI_5 int
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <main+0x260>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b01      	cmp	r3, #1
 8002990:	d108      	bne.n	80029a4 <main+0x23c>
					{
				Pros_state = USB_MSC_VCP_Mode;   // Next State USB_MSC_Mode Mode
 8002992:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <main+0x248>)
 8002994:	2204      	movs	r2, #4
 8002996:	701a      	strb	r2, [r3, #0]
				USB_Present_ = 0;                 // Reset Flag to avoid looping
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <main+0x260>)
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
				SD_POWER_ON();               				// Power on SD CARD
 800299e:	f7ff f98f 	bl	8001cc0 <SD_POWER_ON>
			} else {
				Pros_state = Dormant_Idle_Stop; // Stay Dormant Mode if no external events
			}
			break;
 80029a2:	e004      	b.n	80029ae <main+0x246>
				Pros_state = Dormant_Idle_Stop; // Stay Dormant Mode if no external events
 80029a4:	4b02      	ldr	r3, [pc, #8]	; (80029b0 <main+0x248>)
 80029a6:	2206      	movs	r2, #6
 80029a8:	701a      	strb	r2, [r3, #0]
			break;
 80029aa:	e000      	b.n	80029ae <main+0x246>

		default:
			break;
 80029ac:	bf00      	nop
		if (isProcessKneeRequired) {
 80029ae:	e739      	b.n	8002824 <main+0xbc>
 80029b0:	200088b4 	.word	0x200088b4
 80029b4:	40002800 	.word	0x40002800
 80029b8:	20008bdc 	.word	0x20008bdc
 80029bc:	08017998 	.word	0x08017998
 80029c0:	2000000c 	.word	0x2000000c
 80029c4:	200005ae 	.word	0x200005ae
 80029c8:	200005a4 	.word	0x200005a4
 80029cc:	20008f70 	.word	0x20008f70
 80029d0:	20008978 	.word	0x20008978
 80029d4:	20008f4c 	.word	0x20008f4c
 80029d8:	20008971 	.word	0x20008971
 80029dc:	40009400 	.word	0x40009400

080029e0 <LPTIM2_IRQHandler>:
	}
}


void LPTIM2_IRQHandler(void)   // Response of 10ms LPTIM interrupt
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)    // auto reload match interrupt has occured
 80029e4:	4806      	ldr	r0, [pc, #24]	; (8002a00 <LPTIM2_IRQHandler+0x20>)
 80029e6:	f7ff fe87 	bl	80026f8 <LL_LPTIM_IsActiveFlag_ARRM>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <LPTIM2_IRQHandler+0x1c>
	{
		isProcessKneeRequired = 1;
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <LPTIM2_IRQHandler+0x24>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);    // Clear ARR interrupt flag
 80029f6:	4802      	ldr	r0, [pc, #8]	; (8002a00 <LPTIM2_IRQHandler+0x20>)
 80029f8:	f7ff fe6e 	bl	80026d8 <LL_LPTIM_ClearFLAG_ARRM>
	}
}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40009400 	.word	0x40009400
 8002a04:	200005ae 	.word	0x200005ae

08002a08 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)    // Interrupt from USB connectivity PIN PA9
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
	if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8002a0c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a10:	f7ff fe3c 	bl	800268c <LL_EXTI_IsActiveFlag_0_31>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d006      	beq.n	8002a28 <EXTI9_5_IRQHandler+0x20>
	{
		USB_Present_=1;                            // USB present
 8002a1a:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <EXTI9_5_IRQHandler+0x24>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
		LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_9);    // Clear interrupt
 8002a20:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a24:	f7ff fe48 	bl	80026b8 <LL_EXTI_ClearFlag_0_31>
	}
}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	200005a4 	.word	0x200005a4

08002a30 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	330c      	adds	r3, #12
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	701a      	strb	r2, [r3, #0]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_GPIO_SetOutputPin>:
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	619a      	str	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_GPIO_ResetOutputPin>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <clearChipSelect>:
#include "spi2.h"

static mcp25625_t can_tranceiver;

// CS is active low. This disables the chip
__STATIC_INLINE void clearChipSelect() {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(SPI2_CS_GPIO_PORT, SPI2_CS_PIN);
 8002a8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a90:	4802      	ldr	r0, [pc, #8]	; (8002a9c <clearChipSelect+0x14>)
 8002a92:	f7ff ffdd 	bl	8002a50 <LL_GPIO_SetOutputPin>
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	48000400 	.word	0x48000400

08002aa0 <setChipSelect>:

// CS is active low. This enables the chip.
__STATIC_INLINE void setChipSelect() {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SPI2_CS_GPIO_PORT, SPI2_CS_PIN);
 8002aa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002aa8:	4802      	ldr	r0, [pc, #8]	; (8002ab4 <setChipSelect+0x14>)
 8002aaa:	f7ff ffdf 	bl	8002a6c <LL_GPIO_ResetOutputPin>
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	48000400 	.word	0x48000400

08002ab8 <mcp25625_reset>:

void mcp25625_reset() {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
	setChipSelect();
 8002abe:	f7ff ffef 	bl	8002aa0 <setChipSelect>
	LL_SPI_TransmitData8(SPI2, CMD_RESET);
 8002ac2:	21c0      	movs	r1, #192	; 0xc0
 8002ac4:	480e      	ldr	r0, [pc, #56]	; (8002b00 <mcp25625_reset+0x48>)
 8002ac6:	f7ff ffb3 	bl	8002a30 <LL_SPI_TransmitData8>
	//while (!(SPI2->SR & SPI_SR_RXNE)) {} ;
	// wait for completion

	while ((SPI2->SR & SPI_SR_BSY)) {	}; 	// no longer busy
 8002aca:	bf00      	nop
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <mcp25625_reset+0x48>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f9      	bne.n	8002acc <mcp25625_reset+0x14>
	clearChipSelect();
 8002ad8:	f7ff ffd6 	bl	8002a88 <clearChipSelect>

	// clear receive fifo
	while ((SPI2->SR & SPI_SR_FRLVL)) {
 8002adc:	e002      	b.n	8002ae4 <mcp25625_reset+0x2c>
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <mcp25625_reset+0x48>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	71fb      	strb	r3, [r7, #7]
	while ((SPI2->SR & SPI_SR_FRLVL)) {
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <mcp25625_reset+0x48>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f6      	bne.n	8002ade <mcp25625_reset+0x26>
		(void)dummy;						// suppress unused variable warning
	};

	// reset requires a delay of 128 OSC1 clock cycles. That equals 12.8us.
	delay_us(50);
 8002af0:	2032      	movs	r0, #50	; 0x32
 8002af2:	f003 feaf 	bl	8006854 <delay_us>
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40003800 	.word	0x40003800

08002b04 <mcp25625_writeRegister>:
/*
 * Writing a register does not need to respect the CANINTF register
 */
void mcp25625_writeRegister(uint8_t reg, uint8_t value) {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	71fb      	strb	r3, [r7, #7]
 8002b10:	4613      	mov	r3, r2
 8002b12:	71bb      	strb	r3, [r7, #6]

	setChipSelect();
 8002b14:	f7ff ffc4 	bl	8002aa0 <setChipSelect>

	// 4 byte fifo, so this can all go through in one shot
	LL_SPI_TransmitData8(SPI2, CMD_WRITE);
 8002b18:	2102      	movs	r1, #2
 8002b1a:	4815      	ldr	r0, [pc, #84]	; (8002b70 <mcp25625_writeRegister+0x6c>)
 8002b1c:	f7ff ff88 	bl	8002a30 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, reg);
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	4619      	mov	r1, r3
 8002b24:	4812      	ldr	r0, [pc, #72]	; (8002b70 <mcp25625_writeRegister+0x6c>)
 8002b26:	f7ff ff83 	bl	8002a30 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, value);
 8002b2a:	79bb      	ldrb	r3, [r7, #6]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4810      	ldr	r0, [pc, #64]	; (8002b70 <mcp25625_writeRegister+0x6c>)
 8002b30:	f7ff ff7e 	bl	8002a30 <LL_SPI_TransmitData8>

	// wait for completion
	while ((SPI2->SR & SPI_SR_FTLVL)) {	}; 	//transmit fifo empty?
 8002b34:	bf00      	nop
 8002b36:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <mcp25625_writeRegister+0x6c>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f9      	bne.n	8002b36 <mcp25625_writeRegister+0x32>
	while ((SPI2->SR & SPI_SR_BSY)) {	}; 	// no longer busy
 8002b42:	bf00      	nop
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <mcp25625_writeRegister+0x6c>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1f9      	bne.n	8002b44 <mcp25625_writeRegister+0x40>
	clearChipSelect();
 8002b50:	f7ff ff9a 	bl	8002a88 <clearChipSelect>

	// clear receive fifo
	while ((SPI2->SR & SPI_SR_FRLVL)) {
 8002b54:	e002      	b.n	8002b5c <mcp25625_writeRegister+0x58>
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 8002b56:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <mcp25625_writeRegister+0x6c>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	73fb      	strb	r3, [r7, #15]
	while ((SPI2->SR & SPI_SR_FRLVL)) {
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <mcp25625_writeRegister+0x6c>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f6      	bne.n	8002b56 <mcp25625_writeRegister+0x52>
		(void)dummy;						// suppress unused variable warning
	};


}
 8002b68:	bf00      	nop
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40003800 	.word	0x40003800

08002b74 <mcp25625_readRegister>:

/*
 * Reading a register does not need to respect the CANINTF register
 */
uint8_t mcp25625_readRegister(uint8_t reg) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
	setChipSelect();
 8002b82:	f7ff ff8d 	bl	8002aa0 <setChipSelect>

	// 4 byte fifo, so this can all go through in one shot
	LL_SPI_TransmitData8(SPI2, CMD_READ);
 8002b86:	2103      	movs	r1, #3
 8002b88:	4814      	ldr	r0, [pc, #80]	; (8002bdc <mcp25625_readRegister+0x68>)
 8002b8a:	f7ff ff51 	bl	8002a30 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, reg);
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	4619      	mov	r1, r3
 8002b92:	4812      	ldr	r0, [pc, #72]	; (8002bdc <mcp25625_readRegister+0x68>)
 8002b94:	f7ff ff4c 	bl	8002a30 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(SPI2, 0x00); 		// dummy value to transfer the response
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4810      	ldr	r0, [pc, #64]	; (8002bdc <mcp25625_readRegister+0x68>)
 8002b9c:	f7ff ff48 	bl	8002a30 <LL_SPI_TransmitData8>

	// wait for completion
	while ((SPI2->SR & SPI_SR_FTLVL)) {	}; 	//transmit fifo empty?
 8002ba0:	bf00      	nop
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <mcp25625_readRegister+0x68>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f9      	bne.n	8002ba2 <mcp25625_readRegister+0x2e>
	while ((SPI2->SR & SPI_SR_BSY)) {	}; 	// no longer busy
 8002bae:	bf00      	nop
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <mcp25625_readRegister+0x68>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f9      	bne.n	8002bb0 <mcp25625_readRegister+0x3c>
	uint8_t dummy = SPI2->DR; 				// first byte is from cmd transfer
 8002bbc:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <mcp25625_readRegister+0x68>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	73bb      	strb	r3, [r7, #14]
	dummy = SPI2->DR;						// second byte is from address
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <mcp25625_readRegister+0x68>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	73bb      	strb	r3, [r7, #14]
	result = SPI2->DR;						// actual result value
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <mcp25625_readRegister+0x68>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	73fb      	strb	r3, [r7, #15]

	clearChipSelect();
 8002bce:	f7ff ff5b 	bl	8002a88 <clearChipSelect>

	(void)dummy;						// suppress unused variable warning
	return result;
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40003800 	.word	0x40003800

08002be0 <mcp25625_loadTXB>:

void mcp25625_loadTXB(uint8_t reg, uint8_t length, uint8_t * data) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	603a      	str	r2, [r7, #0]
 8002bea:	71fb      	strb	r3, [r7, #7]
 8002bec:	460b      	mov	r3, r1
 8002bee:	71bb      	strb	r3, [r7, #6]

	setChipSelect();
 8002bf0:	f7ff ff56 	bl	8002aa0 <setChipSelect>

	LL_SPI_TransmitData8(SPI2, reg);
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	481c      	ldr	r0, [pc, #112]	; (8002c6c <mcp25625_loadTXB+0x8c>)
 8002bfa:	f7ff ff19 	bl	8002a30 <LL_SPI_TransmitData8>
	for ( uint8_t i = 0; i < length; i++) {
 8002bfe:	2300      	movs	r3, #0
 8002c00:	73fb      	strb	r3, [r7, #15]
 8002c02:	e011      	b.n	8002c28 <mcp25625_loadTXB+0x48>
		while (!(SPI2->SR & SPI_SR_TXE)) {};
 8002c04:	bf00      	nop
 8002c06:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <mcp25625_loadTXB+0x8c>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f9      	beq.n	8002c06 <mcp25625_loadTXB+0x26>
		LL_SPI_TransmitData8(SPI2, data[i]);
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	4413      	add	r3, r2
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4813      	ldr	r0, [pc, #76]	; (8002c6c <mcp25625_loadTXB+0x8c>)
 8002c1e:	f7ff ff07 	bl	8002a30 <LL_SPI_TransmitData8>
	for ( uint8_t i = 0; i < length; i++) {
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	3301      	adds	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	79bb      	ldrb	r3, [r7, #6]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d3e9      	bcc.n	8002c04 <mcp25625_loadTXB+0x24>
	}

	// wait for completion
	while ((SPI2->SR & SPI_SR_FTLVL)) {	}; 	//transmit fifo empty?
 8002c30:	bf00      	nop
 8002c32:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <mcp25625_loadTXB+0x8c>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f9      	bne.n	8002c32 <mcp25625_loadTXB+0x52>
	while ((SPI2->SR & SPI_SR_BSY)) {	}; 	// no longer busy
 8002c3e:	bf00      	nop
 8002c40:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <mcp25625_loadTXB+0x8c>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f9      	bne.n	8002c40 <mcp25625_loadTXB+0x60>
	clearChipSelect();
 8002c4c:	f7ff ff1c 	bl	8002a88 <clearChipSelect>

	// clear receive fifo
	while ((SPI2->SR & SPI_SR_FRLVL)) {
 8002c50:	e002      	b.n	8002c58 <mcp25625_loadTXB+0x78>
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <mcp25625_loadTXB+0x8c>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	73bb      	strb	r3, [r7, #14]
	while ((SPI2->SR & SPI_SR_FRLVL)) {
 8002c58:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <mcp25625_loadTXB+0x8c>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1f6      	bne.n	8002c52 <mcp25625_loadTXB+0x72>
		(void)dummy;						// suppress unused variable warning
	};



}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40003800 	.word	0x40003800

08002c70 <getTXB0CTRL>:
}

/*
 * Abstraction for reading the TXB0CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB0CTRL() {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB0CTRL);
 8002c74:	2030      	movs	r0, #48	; 0x30
 8002c76:	f7ff ff7d 	bl	8002b74 <mcp25625_readRegister>
 8002c7a:	4603      	mov	r3, r0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <getTXB1CTRL>:

/*
 * Abstraction for reading the TXB1CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB1CTRL() {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB1CTRL);
 8002c84:	2040      	movs	r0, #64	; 0x40
 8002c86:	f7ff ff75 	bl	8002b74 <mcp25625_readRegister>
 8002c8a:	4603      	mov	r3, r0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <getTXB2CTRL>:

/*
 * Abstraction for reading the TXB2CTRL register
 */
__STATIC_INLINE txb_ctrl_t getTXB2CTRL() {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
	return (txb_ctrl_t)mcp25625_readRegister(TXB2CTRL);
 8002c94:	2050      	movs	r0, #80	; 0x50
 8002c96:	f7ff ff6d 	bl	8002b74 <mcp25625_readRegister>
 8002c9a:	4603      	mov	r3, r0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <loadTXB2>:
}

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB2(uint8_t * data) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB2_SIDH), 13, data);
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	210d      	movs	r1, #13
 8002cac:	2044      	movs	r0, #68	; 0x44
 8002cae:	f7ff ff97 	bl	8002be0 <mcp25625_loadTXB>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <loadTXB1>:

/* Abstraction for loading TXB1
 *
 */
__STATIC_INLINE void loadTXB1(uint8_t * data) {
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB1_SIDH), 13, data);
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	210d      	movs	r1, #13
 8002cc6:	2042      	movs	r0, #66	; 0x42
 8002cc8:	f7ff ff8a 	bl	8002be0 <mcp25625_loadTXB>
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <loadTXB0>:

/* Abstraction for loading TXB2
 *
 */
__STATIC_INLINE void loadTXB0(uint8_t * data) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB0_SIDH), 13, data);
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	210d      	movs	r1, #13
 8002ce0:	2040      	movs	r0, #64	; 0x40
 8002ce2:	f7ff ff7d 	bl	8002be0 <mcp25625_loadTXB>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <setTXREQ2>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ2() {
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB2CTRL, TXBCTRL_TXREQ);
 8002cf2:	210b      	movs	r1, #11
 8002cf4:	2050      	movs	r0, #80	; 0x50
 8002cf6:	f7ff ff05 	bl	8002b04 <mcp25625_writeRegister>
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <setTXREQ1>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ1() {
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB1CTRL, TXBCTRL_TXREQ);
 8002d02:	210b      	movs	r1, #11
 8002d04:	2040      	movs	r0, #64	; 0x40
 8002d06:	f7ff fefd 	bl	8002b04 <mcp25625_writeRegister>
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <setTXREQ0>:

/*
 * Abstraction for setting TXREQ
 */
__STATIC_INLINE void setTXREQ0() {
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	af00      	add	r7, sp, #0
	mcp25625_writeRegister(TXB0CTRL, TXBCTRL_TXREQ);
 8002d12:	210b      	movs	r1, #11
 8002d14:	2030      	movs	r0, #48	; 0x30
 8002d16:	f7ff fef5 	bl	8002b04 <mcp25625_writeRegister>
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <mcp25625_sendCAN>:

/*
 * This must respect the TXB Control registers. Read it first!
 * By default, higher number buffer registers have higher priority.
 */
void mcp25625_sendCAN(txbuff_t * buffer) {
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]

	txb_ctrl_t txb;

	txb = getTXB2CTRL();
 8002d26:	f7ff ffb3 	bl	8002c90 <getTXB2CTRL>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	733b      	strb	r3, [r7, #12]
	// check if already sending
	if (!txb.bits.TXREQ) {
 8002d2e:	7b3b      	ldrb	r3, [r7, #12]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <mcp25625_sendCAN+0x2a>
		// not sending, can load txb block
		loadTXB2(buffer->bytes);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ffaf 	bl	8002ca0 <loadTXB2>
		setTXREQ2();
 8002d42:	f7ff ffd4 	bl	8002cee <setTXREQ2>
		return; // once txbuffer is loaded, return
 8002d46:	e021      	b.n	8002d8c <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB1CTRL();
 8002d48:	f7ff ff9a 	bl	8002c80 <getTXB1CTRL>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	733b      	strb	r3, [r7, #12]
	// check if txb1 is already sending
	if (!txb.bits.TXREQ) {
 8002d50:	7b3b      	ldrb	r3, [r7, #12]
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d106      	bne.n	8002d6a <mcp25625_sendCAN+0x4c>
		// not sending, can load txb buffer
		loadTXB1(buffer->bytes);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff ffab 	bl	8002cba <loadTXB1>
		setTXREQ1();
 8002d64:	f7ff ffcb 	bl	8002cfe <setTXREQ1>
		return; //once tx buffer is loaded, return
 8002d68:	e010      	b.n	8002d8c <mcp25625_sendCAN+0x6e>
	}

	txb = getTXB0CTRL();
 8002d6a:	f7ff ff81 	bl	8002c70 <getTXB0CTRL>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	733b      	strb	r3, [r7, #12]
	// check if txb0 is already sending
	if (!txb.bits.TXREQ) {
 8002d72:	7b3b      	ldrb	r3, [r7, #12]
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <mcp25625_sendCAN+0x6e>
		// not sending, can load txb buffer
		loadTXB0(buffer->bytes);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ffa7 	bl	8002cd4 <loadTXB0>
		setTXREQ0();
 8002d86:	f7ff ffc2 	bl	8002d0e <setTXREQ0>
		return; // once tx buffer is loaded, return
 8002d8a:	bf00      	nop
	}
}
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <CAN_transmit>:

/*
 * callable entry function
 * IN: ID, length of message, pointer to message
 */
void CAN_transmit(uint16_t CAN_ID, uint8_t length, uint8_t * message) {
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	603a      	str	r2, [r7, #0]
 8002d9c:	80fb      	strh	r3, [r7, #6]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	717b      	strb	r3, [r7, #5]
	txbuff_t t;
	memset(&t, 0, sizeof(t));
 8002da2:	f107 0308 	add.w	r3, r7, #8
 8002da6:	220d      	movs	r2, #13
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f012 fa49 	bl	8015242 <memset>

	t.txb.SIDH = CAN_ID >> 3;
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	08db      	lsrs	r3, r3, #3
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	723b      	strb	r3, [r7, #8]
	t.txb.SIDL.value = (CAN_ID & 0x07) << 5;
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	015b      	lsls	r3, r3, #5
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	727b      	strb	r3, [r7, #9]
	t.txb.DLC.value = length;
 8002dc2:	797b      	ldrb	r3, [r7, #5]
 8002dc4:	733b      	strb	r3, [r7, #12]
	for (uint8_t i = 0; i < length; i++) {
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	75fb      	strb	r3, [r7, #23]
 8002dca:	e00c      	b.n	8002de6 <CAN_transmit+0x54>
		t.txb.data[i] = message[i];
 8002dcc:	7dfb      	ldrb	r3, [r7, #23]
 8002dce:	7dfa      	ldrb	r2, [r7, #23]
 8002dd0:	6839      	ldr	r1, [r7, #0]
 8002dd2:	440a      	add	r2, r1
 8002dd4:	7812      	ldrb	r2, [r2, #0]
 8002dd6:	f107 0118 	add.w	r1, r7, #24
 8002dda:	440b      	add	r3, r1
 8002ddc:	f803 2c0b 	strb.w	r2, [r3, #-11]
	for (uint8_t i = 0; i < length; i++) {
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	3301      	adds	r3, #1
 8002de4:	75fb      	strb	r3, [r7, #23]
 8002de6:	7dfa      	ldrb	r2, [r7, #23]
 8002de8:	797b      	ldrb	r3, [r7, #5]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d3ee      	bcc.n	8002dcc <CAN_transmit+0x3a>
	}

	mcp25625_sendCAN(&t);
 8002dee:	f107 0308 	add.w	r3, r7, #8
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff ff93 	bl	8002d1e <mcp25625_sendCAN>
}
 8002df8:	bf00      	nop
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <mcp25625_init>:

void mcp25625_init(void) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
	memset(&can_tranceiver, 0, sizeof(can_tranceiver));
 8002e04:	f240 2276 	movw	r2, #630	; 0x276
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4805      	ldr	r0, [pc, #20]	; (8002e20 <mcp25625_init+0x20>)
 8002e0c:	f012 fa19 	bl	8015242 <memset>
	spi2_init();
 8002e10:	f003 f9c8 	bl	80061a4 <spi2_init>
	clearChipSelect();
 8002e14:	f7ff fe38 	bl	8002a88 <clearChipSelect>
	mcp25625_reset();
 8002e18:	f7ff fe4e 	bl	8002ab8 <mcp25625_reset>

}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	200005b0 	.word	0x200005b0

08002e24 <CAN_configure>:

void CAN_configure() {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
	cnf1_t c1;
	cnf2_t c2;
	cnf3_t c3;
	canctrl_t canctrl;

	c1.value = 0xC0;
 8002e2a:	23c0      	movs	r3, #192	; 0xc0
 8002e2c:	733b      	strb	r3, [r7, #12]
	c2.value = 0x89;
 8002e2e:	2389      	movs	r3, #137	; 0x89
 8002e30:	723b      	strb	r3, [r7, #8]
	c3.value = 0x04;
 8002e32:	2304      	movs	r3, #4
 8002e34:	713b      	strb	r3, [r7, #4]
	canctrl.value = 0x08;
 8002e36:	2308      	movs	r3, #8
 8002e38:	703b      	strb	r3, [r7, #0]

	mcp25625_init();
 8002e3a:	f7ff ffe1 	bl	8002e00 <mcp25625_init>

	mcp25625_writeRegister(CNF1, c1.value);
 8002e3e:	7b3b      	ldrb	r3, [r7, #12]
 8002e40:	4619      	mov	r1, r3
 8002e42:	202a      	movs	r0, #42	; 0x2a
 8002e44:	f7ff fe5e 	bl	8002b04 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF2, c2.value);
 8002e48:	7a3b      	ldrb	r3, [r7, #8]
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	2029      	movs	r0, #41	; 0x29
 8002e4e:	f7ff fe59 	bl	8002b04 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF3, c3.value);
 8002e52:	793b      	ldrb	r3, [r7, #4]
 8002e54:	4619      	mov	r1, r3
 8002e56:	2028      	movs	r0, #40	; 0x28
 8002e58:	f7ff fe54 	bl	8002b04 <mcp25625_writeRegister>
	mcp25625_writeRegister(CANCTRL, canctrl.value);
 8002e5c:	783b      	ldrb	r3, [r7, #0]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	200f      	movs	r0, #15
 8002e62:	f7ff fe4f 	bl	8002b04 <mcp25625_writeRegister>

}
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <NVIC_SetPriorityGrouping>:
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <NVIC_SetPriorityGrouping+0x44>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ea2:	4a04      	ldr	r2, [pc, #16]	; (8002eb4 <NVIC_SetPriorityGrouping+0x44>)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	60d3      	str	r3, [r2, #12]
}
 8002ea8:	bf00      	nop
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <NVIC_EnableIRQ>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002ec2:	4909      	ldr	r1, [pc, #36]	; (8002ee8 <NVIC_EnableIRQ+0x30>)
 8002ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec8:	095b      	lsrs	r3, r3, #5
 8002eca:	79fa      	ldrb	r2, [r7, #7]
 8002ecc:	f002 021f 	and.w	r2, r2, #31
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	e000e100 	.word	0xe000e100

08002eec <NVIC_DisableIRQ>:
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002ef6:	4909      	ldr	r1, [pc, #36]	; (8002f1c <NVIC_DisableIRQ+0x30>)
 8002ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	79fa      	ldrb	r2, [r7, #7]
 8002f00:	f002 021f 	and.w	r2, r2, #31
 8002f04:	2001      	movs	r0, #1
 8002f06:	fa00 f202 	lsl.w	r2, r0, r2
 8002f0a:	3320      	adds	r3, #32
 8002f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000e100 	.word	0xe000e100

08002f20 <NVIC_SetPriority>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	6039      	str	r1, [r7, #0]
 8002f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	da0b      	bge.n	8002f4c <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f34:	490d      	ldr	r1, [pc, #52]	; (8002f6c <NVIC_SetPriority+0x4c>)
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	3b04      	subs	r3, #4
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	0112      	lsls	r2, r2, #4
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	440b      	add	r3, r1
 8002f48:	761a      	strb	r2, [r3, #24]
}
 8002f4a:	e009      	b.n	8002f60 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4c:	4908      	ldr	r1, [pc, #32]	; (8002f70 <NVIC_SetPriority+0x50>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	0112      	lsls	r2, r2, #4
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000ed00 	.word	0xe000ed00
 8002f70:	e000e100 	.word	0xe000e100

08002f74 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f78:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002f7c:	4905      	ldr	r1, [pc, #20]	; (8002f94 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <NVIC_SystemReset+0x20>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002f86:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <NVIC_SystemReset+0x24>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60cb      	str	r3, [r1, #12]
 8002f8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8002f90:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002f92:	e7fd      	b.n	8002f90 <NVIC_SystemReset+0x1c>
 8002f94:	e000ed00 	.word	0xe000ed00
 8002f98:	05fa0004 	.word	0x05fa0004

08002f9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	609a      	str	r2, [r3, #8]
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <LL_ADC_SetLowPowerMode>:
  *         @arg @ref LL_ADC_LP_MODE_NONE
  *         @arg @ref LL_ADC_LP_AUTOWAIT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetLowPowerMode(ADC_TypeDef *ADCx, uint32_t LowPowerMode)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	60da      	str	r2, [r3, #12]
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <LL_ADC_REG_SetTriggerSource>:
  *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO
  *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f423 627c 	bic.w	r2, r3, #4032	; 0xfc0
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	60da      	str	r2, [r3, #12]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	f023 020f 	bic.w	r2, r3, #15
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003034:	b490      	push	{r4, r7}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3330      	adds	r3, #48	; 0x30
 8003044:	4619      	mov	r1, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800304c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003050:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 800306a:	6822      	ldr	r2, [r4, #0]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f003 031f 	and.w	r3, r3, #31
 8003072:	211f      	movs	r1, #31
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	401a      	ands	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	f1c3 031a 	rsb	r3, r3, #26
 800308c:	fa21 f303 	lsr.w	r3, r1, r3
 8003090:	4313      	orrs	r3, r2
 8003092:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS - (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
}
 8003094:	bf00      	nop
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bc90      	pop	{r4, r7}
 800309c:	4770      	bx	lr

0800309e <LL_ADC_REG_SetContinuousMode>:
  *         @arg @ref LL_ADC_REG_CONV_SINGLE
  *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	60da      	str	r2, [r3, #12]
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <LL_ADC_REG_SetOverrun>:
  *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
  *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetOverrun(ADC_TypeDef *ADCx, uint32_t Overrun)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	60da      	str	r2, [r3, #12]
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80030ea:	b490      	push	{r4, r7}
 80030ec:	b08a      	sub	sp, #40	; 0x28
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	3314      	adds	r3, #20
 80030fa:	4619      	mov	r1, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8003102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	fa93 f3a3 	rbit	r3, r3
 800310e:	613b      	str	r3, [r7, #16]
  return(result);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	fa22 f303 	lsr.w	r3, r2, r3
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8003120:	6822      	ldr	r2, [r4, #0]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 8003128:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 800312c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	fa93 f3a3 	rbit	r3, r3
 8003134:	61bb      	str	r3, [r7, #24]
  return(result);
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	fab3 f383 	clz	r3, r3
 800313c:	fa21 f303 	lsr.w	r3, r1, r3
 8003140:	2107      	movs	r1, #7
 8003142:	fa01 f303 	lsl.w	r3, r1, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	401a      	ands	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f003 71f8 	and.w	r1, r3, #32505856	; 0x1f00000
 8003150:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	623b      	str	r3, [r7, #32]
  return(result);
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	fa21 f303 	lsr.w	r3, r1, r3
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	fa01 f303 	lsl.w	r3, r1, r3
 800316e:	4313      	orrs	r3, r2
 8003170:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8003172:	bf00      	nop
 8003174:	3728      	adds	r7, #40	; 0x28
 8003176:	46bd      	mov	sp, r7
 8003178:	bc90      	pop	{r4, r7}
 800317a:	4770      	bx	lr

0800317c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800318c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6093      	str	r3, [r2, #8]
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80031b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031dc:	f043 0201 	orr.w	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003202:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800320c:	4313      	orrs	r3, r2
 800320e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
}
 800323e:	4618      	mov	r0, r3
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800325a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800325e:	f043 0204 	orr.w	r2, r3, #4
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	b29b      	uxth	r3, r3
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	bf0c      	ite	eq
 80032a0:	2301      	moveq	r3, #1
 80032a2:	2300      	movne	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	bf0c      	ite	eq
 80032c6:	2301      	moveq	r3, #1
 80032c8:	2300      	movne	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2204      	movs	r2, #4
 80032e4:	601a      	str	r2, [r3, #0]
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <LL_EXTI_EnableIT_0_31>:
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80032fc:	4905      	ldr	r1, [pc, #20]	; (8003314 <LL_EXTI_EnableIT_0_31+0x20>)
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <LL_EXTI_EnableIT_0_31+0x20>)
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4313      	orrs	r3, r2
 8003306:	600b      	str	r3, [r1, #0]
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40010400 	.word	0x40010400

08003318 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003320:	4905      	ldr	r1, [pc, #20]	; (8003338 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4313      	orrs	r3, r2
 800332a:	608b      	str	r3, [r1, #8]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	40010400 	.word	0x40010400

0800333c <LL_LPTIM_EnableIT_ARRM>:
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f043 0202 	orr.w	r2, r3, #2
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	609a      	str	r2, [r3, #8]
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <LL_LPTIM_DisableIT_ARRM>:
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f023 0202 	bic.w	r2, r3, #2
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	609a      	str	r2, [r3, #8]
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003380:	4a06      	ldr	r2, [pc, #24]	; (800339c <LL_RCC_LSE_Enable+0x20>)
 8003382:	4b06      	ldr	r3, [pc, #24]	; (800339c <LL_RCC_LSE_Enable+0x20>)
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40021000 	.word	0x40021000

080033a0 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80033a4:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <LL_RCC_LSE_IsReady+0x24>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	bf0c      	ite	eq
 80033b2:	2301      	moveq	r3, #1
 80033b4:	2300      	movne	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000

080033c8 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80033d0:	4907      	ldr	r1, [pc, #28]	; (80033f0 <LL_RCC_SetRTCClockSource+0x28>)
 80033d2:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <LL_RCC_SetRTCClockSource+0x28>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	40021000 	.word	0x40021000

080033f4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80033f8:	4a06      	ldr	r2, [pc, #24]	; (8003414 <LL_RCC_EnableRTC+0x20>)
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <LL_RCC_EnableRTC+0x20>)
 80033fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003408:	bf00      	nop
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000

08003418 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800341c:	4a06      	ldr	r2, [pc, #24]	; (8003438 <LL_RCC_ForceBackupDomainReset+0x20>)
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <LL_RCC_ForceBackupDomainReset+0x20>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800342c:	bf00      	nop
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000

0800343c <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003440:	4a06      	ldr	r2, [pc, #24]	; (800345c <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8003442:	4b06      	ldr	r3, [pc, #24]	; (800345c <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000

08003460 <LL_AHB2_GRP1_EnableClock>:
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003468:	4908      	ldr	r1, [pc, #32]	; (800348c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800346a:	4b08      	ldr	r3, [pc, #32]	; (800348c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800346c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4313      	orrs	r3, r2
 8003472:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4013      	ands	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800347e:	68fb      	ldr	r3, [r7, #12]
}
 8003480:	bf00      	nop
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	40021000 	.word	0x40021000

08003490 <LL_AHB2_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_ForceReset(uint32_t Periphs)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2RSTR, Periphs);
 8003498:	4905      	ldr	r1, [pc, #20]	; (80034b0 <LL_AHB2_GRP1_ForceReset+0x20>)
 800349a:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <LL_AHB2_GRP1_ForceReset+0x20>)
 800349c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	40021000 	.word	0x40021000

080034b4 <LL_AHB2_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 80034bc:	4906      	ldr	r1, [pc, #24]	; (80034d8 <LL_AHB2_GRP1_ReleaseReset+0x24>)
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <LL_AHB2_GRP1_ReleaseReset+0x24>)
 80034c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	4013      	ands	r3, r2
 80034c8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000

080034dc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80034e4:	4908      	ldr	r1, [pc, #32]	; (8003508 <LL_APB2_GRP1_EnableClock+0x2c>)
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <LL_APB2_GRP1_EnableClock+0x2c>)
 80034e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <LL_APB2_GRP1_EnableClock+0x2c>)
 80034f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4013      	ands	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034fa:	68fb      	ldr	r3, [r7, #12]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	40021000 	.word	0x40021000

0800350c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800350c:	b490      	push	{r4, r7}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8003516:	4c11      	ldr	r4, [pc, #68]	; (800355c <LL_SYSCFG_SetEXTISource+0x50>)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	490f      	ldr	r1, [pc, #60]	; (800355c <LL_SYSCFG_SetEXTISource+0x50>)
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	3202      	adds	r2, #2
 8003524:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	0c12      	lsrs	r2, r2, #16
 800352c:	43d2      	mvns	r2, r2
 800352e:	4011      	ands	r1, r2
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	0c12      	lsrs	r2, r2, #16
 8003534:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	fa92 f2a2 	rbit	r2, r2
 800353c:	60ba      	str	r2, [r7, #8]
  return(result);
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	fab2 f282 	clz	r2, r2
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	fa00 f202 	lsl.w	r2, r0, r2
 800354a:	430a      	orrs	r2, r1
 800354c:	3302      	adds	r3, #2
 800354e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
 8003552:	bf00      	nop
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bc90      	pop	{r4, r7}
 800355a:	4770      	bx	lr
 800355c:	40010000 	.word	0x40010000

08003560 <LL_PWR_EnableVddUSB>:
  * @brief  Enable VDDUSB supply
  * @rmtoll CR2          USV           LL_PWR_EnableVddUSB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableVddUSB(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003564:	4a05      	ldr	r2, [pc, #20]	; (800357c <LL_PWR_EnableVddUSB+0x1c>)
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <LL_PWR_EnableVddUSB+0x1c>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800356e:	6053      	str	r3, [r2, #4]
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40007000 	.word	0x40007000

08003580 <LL_PWR_DisableVddUSB>:
  * @brief  Disable VDDUSB supply
  * @rmtoll CR2          USV           LL_PWR_DisableVddUSB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableVddUSB(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 8003584:	4a05      	ldr	r2, [pc, #20]	; (800359c <LL_PWR_DisableVddUSB+0x1c>)
 8003586:	4b05      	ldr	r3, [pc, #20]	; (800359c <LL_PWR_DisableVddUSB+0x1c>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800358e:	6053      	str	r3, [r2, #4]
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40007000 	.word	0x40007000

080035a0 <LL_PWR_IsEnabledVddUSB>:
  * @brief  Check if VDDUSB supply is enabled
  * @rmtoll CR2          USV           LL_PWR_IsEnabledVddUSB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledVddUSB(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 80035a4:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <LL_PWR_IsEnabledVddUSB+0x24>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b0:	bf0c      	ite	eq
 80035b2:	2301      	moveq	r3, #1
 80035b4:	2300      	movne	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40007000 	.word	0x40007000

080035c8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	22ff      	movs	r2, #255	; 0xff
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	22ca      	movs	r2, #202	; 0xca
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2253      	movs	r2, #83	; 0x53
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <LL_RTC_TIME_GetHour>:
  *         TR           HU            LL_RTC_TIME_GetHour
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x01 and Max_Data=0x12 or between Min_Data=0x00 and Max_Data=0x23
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetHour(RTC_TypeDef *RTCx)
{
 8003602:	b490      	push	{r4, r7}
 8003604:	b086      	sub	sp, #24
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;
 800360a:	2400      	movs	r4, #0

  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 147c 	and.w	r4, r3, #4128768	; 0x3f0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 8003614:	f404 1340 	and.w	r3, r4, #3145728	; 0x300000
 8003618:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800361c:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	fa92 f2a2 	rbit	r2, r2
 8003624:	60ba      	str	r2, [r7, #8]
  return(result);
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	fab2 f282 	clz	r2, r2
 800362c:	40d3      	lsrs	r3, r2
 800362e:	011a      	lsls	r2, r3, #4
 8003630:	f404 2370 	and.w	r3, r4, #983040	; 0xf0000
 8003634:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8003638:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	6979      	ldr	r1, [r7, #20]
 800363c:	fa91 f1a1 	rbit	r1, r1
 8003640:	6139      	str	r1, [r7, #16]
  return(result);
 8003642:	6939      	ldr	r1, [r7, #16]
 8003644:	fab1 f181 	clz	r1, r1
 8003648:	40cb      	lsrs	r3, r1
 800364a:	4313      	orrs	r3, r2
}
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bc90      	pop	{r4, r7}
 8003654:	4770      	bx	lr

08003656 <LL_RTC_TIME_GetMinute>:
  *         TR           MNU           LL_RTC_TIME_GetMinute
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x59
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetMinute(RTC_TypeDef *RTCx)
{
 8003656:	b490      	push	{r4, r7}
 8003658:	b086      	sub	sp, #24
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;
 800365e:	2400      	movs	r4, #0

  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 44fe 	and.w	r4, r3, #32512	; 0x7f00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 8003668:	f404 43e0 	and.w	r3, r4, #28672	; 0x7000
 800366c:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8003670:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	fa92 f2a2 	rbit	r2, r2
 8003678:	60ba      	str	r2, [r7, #8]
  return(result);
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	fab2 f282 	clz	r2, r2
 8003680:	40d3      	lsrs	r3, r2
 8003682:	011a      	lsls	r2, r3, #4
 8003684:	f404 6370 	and.w	r3, r4, #3840	; 0xf00
 8003688:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800368c:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	6979      	ldr	r1, [r7, #20]
 8003690:	fa91 f1a1 	rbit	r1, r1
 8003694:	6139      	str	r1, [r7, #16]
  return(result);
 8003696:	6939      	ldr	r1, [r7, #16]
 8003698:	fab1 f181 	clz	r1, r1
 800369c:	40cb      	lsrs	r3, r1
 800369e:	4313      	orrs	r3, r2
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc90      	pop	{r4, r7}
 80036a8:	4770      	bx	lr

080036aa <LL_RTC_TIME_GetSecond>:
  *         TR           SU            LL_RTC_TIME_GetSecond
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x59
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSecond(RTC_TypeDef *RTCx)
{
 80036aa:	b490      	push	{r4, r7}
 80036ac:	b086      	sub	sp, #24
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;
 80036b2:	2400      	movs	r4, #0

  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 047f 	and.w	r4, r3, #127	; 0x7f
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 80036bc:	f004 0370 	and.w	r3, r4, #112	; 0x70
 80036c0:	2270      	movs	r2, #112	; 0x70
 80036c2:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	fa92 f2a2 	rbit	r2, r2
 80036ca:	60ba      	str	r2, [r7, #8]
  return(result);
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	fab2 f282 	clz	r2, r2
 80036d2:	40d3      	lsrs	r3, r2
 80036d4:	011a      	lsls	r2, r3, #4
 80036d6:	f004 030f 	and.w	r3, r4, #15
 80036da:	210f      	movs	r1, #15
 80036dc:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	6979      	ldr	r1, [r7, #20]
 80036e0:	fa91 f1a1 	rbit	r1, r1
 80036e4:	6139      	str	r1, [r7, #16]
  return(result);
 80036e6:	6939      	ldr	r1, [r7, #16]
 80036e8:	fab1 f181 	clz	r1, r1
 80036ec:	40cb      	lsrs	r3, r1
 80036ee:	4313      	orrs	r3, r2
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc90      	pop	{r4, r7}
 80036f8:	4770      	bx	lr

080036fa <LL_RTC_DATE_GetYear>:
  *         DR           YU            LL_RTC_DATE_GetYear
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x99
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetYear(RTC_TypeDef *RTCx)
{
 80036fa:	b490      	push	{r4, r7}
 80036fc:	b086      	sub	sp, #24
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;
 8003702:	2400      	movs	r4, #0

  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 047f 	and.w	r4, r3, #16711680	; 0xff0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 800370c:	f404 0370 	and.w	r3, r4, #15728640	; 0xf00000
 8003710:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 8003714:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	fa92 f2a2 	rbit	r2, r2
 800371c:	60ba      	str	r2, [r7, #8]
  return(result);
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	fab2 f282 	clz	r2, r2
 8003724:	40d3      	lsrs	r3, r2
 8003726:	011a      	lsls	r2, r3, #4
 8003728:	f404 2370 	and.w	r3, r4, #983040	; 0xf0000
 800372c:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8003730:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	6979      	ldr	r1, [r7, #20]
 8003734:	fa91 f1a1 	rbit	r1, r1
 8003738:	6139      	str	r1, [r7, #16]
  return(result);
 800373a:	6939      	ldr	r1, [r7, #16]
 800373c:	fab1 f181 	clz	r1, r1
 8003740:	40cb      	lsrs	r3, r1
 8003742:	4313      	orrs	r3, r2
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bc90      	pop	{r4, r7}
 800374c:	4770      	bx	lr

0800374e <LL_RTC_DATE_GetMonth>:
  *         @arg @ref LL_RTC_MONTH_OCTOBER
  *         @arg @ref LL_RTC_MONTH_NOVEMBER
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetMonth(RTC_TypeDef *RTCx)
{
 800374e:	b490      	push	{r4, r7}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;
 8003756:	2400      	movs	r4, #0

  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 54f8 	and.w	r4, r3, #7936	; 0x1f00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 8003760:	f404 5380 	and.w	r3, r4, #4096	; 0x1000
 8003764:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003768:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	fa92 f2a2 	rbit	r2, r2
 8003770:	60ba      	str	r2, [r7, #8]
  return(result);
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	fab2 f282 	clz	r2, r2
 8003778:	40d3      	lsrs	r3, r2
 800377a:	011a      	lsls	r2, r3, #4
 800377c:	f404 6370 	and.w	r3, r4, #3840	; 0xf00
 8003780:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8003784:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	6979      	ldr	r1, [r7, #20]
 8003788:	fa91 f1a1 	rbit	r1, r1
 800378c:	6139      	str	r1, [r7, #16]
  return(result);
 800378e:	6939      	ldr	r1, [r7, #16]
 8003790:	fab1 f181 	clz	r1, r1
 8003794:	40cb      	lsrs	r3, r1
 8003796:	4313      	orrs	r3, r2
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bc90      	pop	{r4, r7}
 80037a0:	4770      	bx	lr

080037a2 <LL_RTC_DATE_GetDay>:
  *         DR           DU            LL_RTC_DATE_GetDay
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x01 and Max_Data=0x31
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetDay(RTC_TypeDef *RTCx)
{
 80037a2:	b490      	push	{r4, r7}
 80037a4:	b086      	sub	sp, #24
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;
 80037aa:	2400      	movs	r4, #0

  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 043f 	and.w	r4, r3, #63	; 0x3f
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 80037b4:	f004 0330 	and.w	r3, r4, #48	; 0x30
 80037b8:	2230      	movs	r2, #48	; 0x30
 80037ba:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	fa92 f2a2 	rbit	r2, r2
 80037c2:	60ba      	str	r2, [r7, #8]
  return(result);
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	fab2 f282 	clz	r2, r2
 80037ca:	40d3      	lsrs	r3, r2
 80037cc:	011a      	lsls	r2, r3, #4
 80037ce:	f004 030f 	and.w	r3, r4, #15
 80037d2:	210f      	movs	r1, #15
 80037d4:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	6979      	ldr	r1, [r7, #20]
 80037d8:	fa91 f1a1 	rbit	r1, r1
 80037dc:	6139      	str	r1, [r7, #16]
  return(result);
 80037de:	6939      	ldr	r1, [r7, #16]
 80037e0:	fab1 f181 	clz	r1, r1
 80037e4:	40cb      	lsrs	r3, r1
 80037e6:	4313      	orrs	r3, r2
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc90      	pop	{r4, r7}
 80037f0:	4770      	bx	lr

080037f2 <LL_SPI_Enable>:
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	601a      	str	r2, [r3, #0]
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <LL_SPI_SetMode>:
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f423 7282 	bic.w	r2, r3, #260	; 0x104
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	601a      	str	r2, [r3, #0]
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <LL_SPI_SetClockPhase>:
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 0201 	bic.w	r2, r3, #1
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	601a      	str	r2, [r3, #0]
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <LL_SPI_SetClockPolarity>:
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f023 0202 	bic.w	r2, r3, #2
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	601a      	str	r2, [r3, #0]
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <LL_SPI_SetBaudRatePrescaler>:
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	601a      	str	r2, [r3, #0]
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <LL_SPI_SetTransferBitOrder>:
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	601a      	str	r2, [r3, #0]
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <LL_SPI_SetTransferDirection>:
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f423 4244 	bic.w	r2, r3, #50176	; 0xc400
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <LL_SPI_SetDataWidth>:
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	605a      	str	r2, [r3, #4]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <LL_SPI_SetRxFIFOThreshold>:
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	605a      	str	r2, [r3, #4]
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <LL_SPI_SetNSSMode>:
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f023 0204 	bic.w	r2, r3, #4
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	0c1b      	lsrs	r3, r3, #16
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	605a      	str	r2, [r3, #4]
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <LL_SPI_EnableNSSPulseMgt>:
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f043 0208 	orr.w	r2, r3, #8
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	605a      	str	r2, [r3, #4]
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <LL_SPI_ReceiveData8>:
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	b2db      	uxtb	r3, r3
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <LL_SPI_TransmitData8>:
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	330c      	adds	r3, #12
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	701a      	strb	r2, [r3, #0]
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <LL_GPIO_SetPinMode>:
{
 80039d4:	b480      	push	{r7}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	fa93 f3a3 	rbit	r3, r3
 80039ee:	613b      	str	r3, [r7, #16]
  return(result);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	fab3 f383 	clz	r3, r3
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	2103      	movs	r1, #3
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	401a      	ands	r2, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	fa93 f3a3 	rbit	r3, r3
 8003a0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	fab3 f383 	clz	r3, r3
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	601a      	str	r2, [r3, #0]
}
 8003a22:	bf00      	nop
 8003a24:	3724      	adds	r7, #36	; 0x24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <LL_GPIO_SetPinOutputType>:
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b085      	sub	sp, #20
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	401a      	ands	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	fb01 f303 	mul.w	r3, r1, r3
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	605a      	str	r2, [r3, #4]
}
 8003a52:	bf00      	nop
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <LL_GPIO_SetPinSpeed>:
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b089      	sub	sp, #36	; 0x24
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	fa93 f3a3 	rbit	r3, r3
 8003a78:	613b      	str	r3, [r7, #16]
  return(result);
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	fab3 f383 	clz	r3, r3
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	2103      	movs	r1, #3
 8003a84:	fa01 f303 	lsl.w	r3, r1, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	401a      	ands	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	fab3 f383 	clz	r3, r3
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	609a      	str	r2, [r3, #8]
}
 8003aac:	bf00      	nop
 8003aae:	3724      	adds	r7, #36	; 0x24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <LL_GPIO_SetPinPull>:
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b089      	sub	sp, #36	; 0x24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	fa93 f3a3 	rbit	r3, r3
 8003ad2:	613b      	str	r3, [r7, #16]
  return(result);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	fab3 f383 	clz	r3, r3
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	2103      	movs	r1, #3
 8003ade:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	401a      	ands	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	fa93 f3a3 	rbit	r3, r3
 8003af0:	61bb      	str	r3, [r7, #24]
  return(result);
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	fab3 f383 	clz	r3, r3
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	fa01 f303 	lsl.w	r3, r1, r3
 8003b00:	431a      	orrs	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	60da      	str	r2, [r3, #12]
}
 8003b06:	bf00      	nop
 8003b08:	3724      	adds	r7, #36	; 0x24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <LL_GPIO_SetAFPin_0_7>:
{
 8003b12:	b480      	push	{r7}
 8003b14:	b089      	sub	sp, #36	; 0x24
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a1a      	ldr	r2, [r3, #32]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	fa93 f3a3 	rbit	r3, r3
 8003b2c:	613b      	str	r3, [r7, #16]
  return(result);
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	fab3 f383 	clz	r3, r3
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	210f      	movs	r1, #15
 8003b38:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	401a      	ands	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	fa93 f3a3 	rbit	r3, r3
 8003b4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	fab3 f383 	clz	r3, r3
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	621a      	str	r2, [r3, #32]
}
 8003b60:	bf00      	nop
 8003b62:	3724      	adds	r7, #36	; 0x24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <LL_GPIO_EnablePinAnalogControl>:
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <LL_GPIO_IsInputPinSet>:
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	401a      	ands	r2, r3
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	bf0c      	ite	eq
 8003ba6:	2301      	moveq	r3, #1
 8003ba8:	2300      	movne	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <LL_GPIO_SetOutputPin>:
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	619a      	str	r2, [r3, #24]
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <LL_GPIO_ResetOutputPin>:
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <Power_on_reset>:

	}

}

void Power_on_reset(void) {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
	if (*Reset_Ram_Key_Address != Reset_Key_Value) {
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <Power_on_reset+0x1c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a05      	ldr	r2, [pc, #20]	; (8003c10 <Power_on_reset+0x20>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d004      	beq.n	8003c08 <Power_on_reset+0x18>
		*Reset_Ram_Key_Address = Reset_Key_Value;
 8003bfe:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <Power_on_reset+0x1c>)
 8003c00:	4a03      	ldr	r2, [pc, #12]	; (8003c10 <Power_on_reset+0x20>)
 8003c02:	601a      	str	r2, [r3, #0]
		NVIC_SystemReset();
 8003c04:	f7ff f9b6 	bl	8002f74 <NVIC_SystemReset>
	}
}
 8003c08:	bf00      	nop
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20017ef0 	.word	0x20017ef0
 8003c10:	deadbeef 	.word	0xdeadbeef

08003c14 <Configure_Interrupt>:

void Configure_Interrupt(void) {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
	NVIC_SetPriorityGrouping(0x00); // If Group 00, only priority number Matters: Low Number high priority
 8003c18:	2000      	movs	r0, #0
 8003c1a:	f7ff f929 	bl	8002e70 <NVIC_SetPriorityGrouping>

	//  NVIC_SetPriority(EXTI0_IRQn,0);
	NVIC_SetPriority(EXTI9_5_IRQn, 0); // USB Detect, Low priority
 8003c1e:	2100      	movs	r1, #0
 8003c20:	2017      	movs	r0, #23
 8003c22:	f7ff f97d 	bl	8002f20 <NVIC_SetPriority>
	NVIC_SetPriority(SDMMC1_IRQn, 2);
 8003c26:	2102      	movs	r1, #2
 8003c28:	2031      	movs	r0, #49	; 0x31
 8003c2a:	f7ff f979 	bl	8002f20 <NVIC_SetPriority>
	NVIC_SetPriority(LPTIM2_IRQn, 1);
 8003c2e:	2101      	movs	r1, #1
 8003c30:	2042      	movs	r0, #66	; 0x42
 8003c32:	f7ff f975 	bl	8002f20 <NVIC_SetPriority>
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <FATFS_Init>:

void FATFS_Init(void) {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0

	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8003c40:	490f      	ldr	r1, [pc, #60]	; (8003c80 <FATFS_Init+0x44>)
 8003c42:	4810      	ldr	r0, [pc, #64]	; (8003c84 <FATFS_Init+0x48>)
 8003c44:	f011 fa68 	bl	8015118 <FATFS_LinkDriver>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10b      	bne.n	8003c66 <FATFS_Init+0x2a>
			{
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 8003c4e:	2201      	movs	r2, #1
 8003c50:	490b      	ldr	r1, [pc, #44]	; (8003c80 <FATFS_Init+0x44>)
 8003c52:	480d      	ldr	r0, [pc, #52]	; (8003c88 <FATFS_Init+0x4c>)
 8003c54:	f010 f8bc 	bl	8013dd0 <f_mount>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d006      	beq.n	8003c6c <FATFS_Init+0x30>
				{
			Fat_mnt_fail = 1;
 8003c5e:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <FATFS_Init+0x50>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e002      	b.n	8003c6c <FATFS_Init+0x30>
		}
	} else {
		Fat_mnt_fail = 1;
 8003c66:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <FATFS_Init+0x50>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
	}

	if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 8003c6c:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <FATFS_Init+0x50>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d102      	bne.n	8003c7a <FATFS_Init+0x3e>
			{
		AIM_Error_Handler(f_mount_E);
 8003c74:	2003      	movs	r0, #3
 8003c76:	f001 fcd5 	bl	8005624 <AIM_Error_Handler>
	}

}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20008d10 	.word	0x20008d10
 8003c84:	08017cfc 	.word	0x08017cfc
 8003c88:	20008d1c 	.word	0x20008d1c
 8003c8c:	20008c10 	.word	0x20008c10

08003c90 <Check_SD_Command_File>:

void Check_SD_Command_File(void) {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
	Data_log_Start_Resume = 0;
 8003c94:	4b3c      	ldr	r3, [pc, #240]	; (8003d88 <Check_SD_Command_File+0xf8>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8003c9a:	493c      	ldr	r1, [pc, #240]	; (8003d8c <Check_SD_Command_File+0xfc>)
 8003c9c:	483c      	ldr	r0, [pc, #240]	; (8003d90 <Check_SD_Command_File+0x100>)
 8003c9e:	f011 fa3b 	bl	8015118 <FATFS_LinkDriver>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d162      	bne.n	8003d6e <Check_SD_Command_File+0xde>
			{
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4938      	ldr	r1, [pc, #224]	; (8003d8c <Check_SD_Command_File+0xfc>)
 8003cac:	4839      	ldr	r0, [pc, #228]	; (8003d94 <Check_SD_Command_File+0x104>)
 8003cae:	f010 f88f 	bl	8013dd0 <f_mount>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <Check_SD_Command_File+0x30>
				{
			Fat_mnt_fail = 1;
 8003cb8:	4b37      	ldr	r3, [pc, #220]	; (8003d98 <Check_SD_Command_File+0x108>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	e059      	b.n	8003d74 <Check_SD_Command_File+0xe4>
		} else {
			if (f_open(&MyFile, "EnterDFU.txt", FA_READ) != FR_OK) // Check the presence of EnterDFU.txt file
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	4936      	ldr	r1, [pc, #216]	; (8003d9c <Check_SD_Command_File+0x10c>)
 8003cc4:	4836      	ldr	r0, [pc, #216]	; (8003da0 <Check_SD_Command_File+0x110>)
 8003cc6:	f010 f8cb 	bl	8013e60 <f_open>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d032      	beq.n	8003d36 <Check_SD_Command_File+0xa6>
					{
				if (f_open(&MyFile, "EnterVCP.txt", FA_READ) != FR_OK) // Check the presence of EnterVCP.txt file
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	4934      	ldr	r1, [pc, #208]	; (8003da4 <Check_SD_Command_File+0x114>)
 8003cd4:	4832      	ldr	r0, [pc, #200]	; (8003da0 <Check_SD_Command_File+0x110>)
 8003cd6:	f010 f8c3 	bl	8013e60 <f_open>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01d      	beq.n	8003d1c <Check_SD_Command_File+0x8c>
						{
					if (Logstart_Delete == 1) {
 8003ce0:	4b31      	ldr	r3, [pc, #196]	; (8003da8 <Check_SD_Command_File+0x118>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d106      	bne.n	8003cf6 <Check_SD_Command_File+0x66>
						Logstart_Delete = 0;
 8003ce8:	4b2f      	ldr	r3, [pc, #188]	; (8003da8 <Check_SD_Command_File+0x118>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
						if (f_unlink("LogStart.txt") == FR_OK) { // If LogStart.txt file present, delete the file
 8003cee:	482f      	ldr	r0, [pc, #188]	; (8003dac <Check_SD_Command_File+0x11c>)
 8003cf0:	f011 f876 	bl	8014de0 <f_unlink>
 8003cf4:	e032      	b.n	8003d5c <Check_SD_Command_File+0xcc>
						}
					}

					else {

						if (f_open(&MyFile, "LogStart.txt", FA_READ) != FR_OK) // Check the presence of LogStart.txt file
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	492c      	ldr	r1, [pc, #176]	; (8003dac <Check_SD_Command_File+0x11c>)
 8003cfa:	4829      	ldr	r0, [pc, #164]	; (8003da0 <Check_SD_Command_File+0x110>)
 8003cfc:	f010 f8b0 	bl	8013e60 <f_open>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <Check_SD_Command_File+0x7e>
								{
							Data_log_Start_Resume = 0;         // Data Log Stops
 8003d06:	4b20      	ldr	r3, [pc, #128]	; (8003d88 <Check_SD_Command_File+0xf8>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	e026      	b.n	8003d5c <Check_SD_Command_File+0xcc>
						} else {
							Data_log_Start_Resume = 1; // Data Log Starts/Resume
 8003d0e:	4b1e      	ldr	r3, [pc, #120]	; (8003d88 <Check_SD_Command_File+0xf8>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	701a      	strb	r2, [r3, #0]
							f_close(&MyFile);
 8003d14:	4822      	ldr	r0, [pc, #136]	; (8003da0 <Check_SD_Command_File+0x110>)
 8003d16:	f010 fd15 	bl	8014744 <f_close>
 8003d1a:	e01f      	b.n	8003d5c <Check_SD_Command_File+0xcc>
						}
					}
				} else {
					Data_log_Start_Resume = 0;          // Data Log Stops
 8003d1c:	4b1a      	ldr	r3, [pc, #104]	; (8003d88 <Check_SD_Command_File+0xf8>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	701a      	strb	r2, [r3, #0]

					USB_Mode = 0;       // USB VCP mode in Next USB Connectivity
 8003d22:	4b23      	ldr	r3, [pc, #140]	; (8003db0 <Check_SD_Command_File+0x120>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	701a      	strb	r2, [r3, #0]
					f_close(&MyFile);
 8003d28:	481d      	ldr	r0, [pc, #116]	; (8003da0 <Check_SD_Command_File+0x110>)
 8003d2a:	f010 fd0b 	bl	8014744 <f_close>
					if (f_unlink("EnterVCP.txt") == FR_OK) { // If EnterVCP.txt file present, delete the file
 8003d2e:	481d      	ldr	r0, [pc, #116]	; (8003da4 <Check_SD_Command_File+0x114>)
 8003d30:	f011 f856 	bl	8014de0 <f_unlink>
 8003d34:	e012      	b.n	8003d5c <Check_SD_Command_File+0xcc>
					}
				}
			} else {

				f_close(&MyFile);
 8003d36:	481a      	ldr	r0, [pc, #104]	; (8003da0 <Check_SD_Command_File+0x110>)
 8003d38:	f010 fd04 	bl	8014744 <f_close>
				if (f_unlink("EnterDFU.txt") == FR_OK) { // If EnterDFU.txt file present, delete the file
 8003d3c:	4817      	ldr	r0, [pc, #92]	; (8003d9c <Check_SD_Command_File+0x10c>)
 8003d3e:	f011 f84f 	bl	8014de0 <f_unlink>
				}
				f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 8003d42:	2200      	movs	r2, #0
 8003d44:	491b      	ldr	r1, [pc, #108]	; (8003db4 <Check_SD_Command_File+0x124>)
 8003d46:	2000      	movs	r0, #0
 8003d48:	f010 f842 	bl	8013dd0 <f_mount>
				FATFS_UnLinkDriver(SDPath); //  unlink SD card driver if necessary
 8003d4c:	480f      	ldr	r0, [pc, #60]	; (8003d8c <Check_SD_Command_File+0xfc>)
 8003d4e:	f011 fa2b 	bl	80151a8 <FATFS_UnLinkDriver>

				*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 8003d52:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <Check_SD_Command_File+0x128>)
 8003d54:	4a19      	ldr	r2, [pc, #100]	; (8003dbc <Check_SD_Command_File+0x12c>)
 8003d56:	601a      	str	r2, [r3, #0]
				NVIC_SystemReset();        // System reset
 8003d58:	f7ff f90c 	bl	8002f74 <NVIC_SystemReset>
			}
			f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	4915      	ldr	r1, [pc, #84]	; (8003db4 <Check_SD_Command_File+0x124>)
 8003d60:	2000      	movs	r0, #0
 8003d62:	f010 f835 	bl	8013dd0 <f_mount>
			FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 8003d66:	4809      	ldr	r0, [pc, #36]	; (8003d8c <Check_SD_Command_File+0xfc>)
 8003d68:	f011 fa1e 	bl	80151a8 <FATFS_UnLinkDriver>
 8003d6c:	e002      	b.n	8003d74 <Check_SD_Command_File+0xe4>
		}
	} else {
		Fat_mnt_fail = 1;
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <Check_SD_Command_File+0x108>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	601a      	str	r2, [r3, #0]
	}

	if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 8003d74:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <Check_SD_Command_File+0x108>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d102      	bne.n	8003d82 <Check_SD_Command_File+0xf2>
			{
		AIM_Error_Handler(f_mount_E);
 8003d7c:	2003      	movs	r0, #3
 8003d7e:	f001 fc51 	bl	8005624 <AIM_Error_Handler>
	}
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20008971 	.word	0x20008971
 8003d8c:	20008d10 	.word	0x20008d10
 8003d90:	08017cfc 	.word	0x08017cfc
 8003d94:	20008d1c 	.word	0x20008d1c
 8003d98:	20008c10 	.word	0x20008c10
 8003d9c:	080179a0 	.word	0x080179a0
 8003da0:	20008f7c 	.word	0x20008f7c
 8003da4:	080179b0 	.word	0x080179b0
 8003da8:	20009714 	.word	0x20009714
 8003dac:	080179c0 	.word	0x080179c0
 8003db0:	20009240 	.word	0x20009240
 8003db4:	080179d0 	.word	0x080179d0
 8003db8:	20017ff0 	.word	0x20017ff0
 8003dbc:	deadbeef 	.word	0xdeadbeef

08003dc0 <Shut_Down_SD>:

void Shut_Down_SD(void) {
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
	f_close(&MyFile);                       // Close previous running file
 8003dc4:	4807      	ldr	r0, [pc, #28]	; (8003de4 <Shut_Down_SD+0x24>)
 8003dc6:	f010 fcbd 	bl	8014744 <f_close>
	update_FATFS_time(); // Write RTC time-stamp on File header/properties of last FATFS file to visualize in PC
 8003dca:	f000 fbe7 	bl	800459c <update_FATFS_time>
	f_mount(0, "", 0); 	//  unmount FATFS file (of running sensor storage file)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	4905      	ldr	r1, [pc, #20]	; (8003de8 <Shut_Down_SD+0x28>)
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	f00f fffc 	bl	8013dd0 <f_mount>
	FATFS_UnLinkDriver(SDPath); //  unlink SD card driver (of running sensor storage file)
 8003dd8:	4804      	ldr	r0, [pc, #16]	; (8003dec <Shut_Down_SD+0x2c>)
 8003dda:	f011 f9e5 	bl	80151a8 <FATFS_UnLinkDriver>
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20008f7c 	.word	0x20008f7c
 8003de8:	080179d0 	.word	0x080179d0
 8003dec:	20008d10 	.word	0x20008d10

08003df0 <Shut_Down_USB>:

void Shut_Down_USB(void) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0

	LL_PWR_DisableVddUSB();                     // Disable VDDUSB supply for USB
 8003df4:	f7ff fbc4 	bl	8003580 <LL_PWR_DisableVddUSB>
	USB_Present_ = 0;  // reset the USB present flag to be set by EXTI interrupt
 8003df8:	4b08      	ldr	r3, [pc, #32]	; (8003e1c <Shut_Down_USB+0x2c>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	701a      	strb	r2, [r3, #0]

	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 8003dfe:	4808      	ldr	r0, [pc, #32]	; (8003e20 <Shut_Down_USB+0x30>)
 8003e00:	f00d f85a 	bl	8010eb8 <USBD_Stop>
	USBD_DeInit(&USBD_Device);               // De-Initialize the device library
 8003e04:	4806      	ldr	r0, [pc, #24]	; (8003e20 <Shut_Down_USB+0x30>)
 8003e06:	f00d f814 	bl	8010e32 <USBD_DeInit>
	__HAL_RCC_USB_OTG_FS_CLK_DISABLE()
 8003e0a:	4a06      	ldr	r2, [pc, #24]	; (8003e24 <Shut_Down_USB+0x34>)
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <Shut_Down_USB+0x34>)
 8003e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e14:	64d3      	str	r3, [r2, #76]	; 0x4c
	;      // Disable USB Clock
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200005a4 	.word	0x200005a4
 8003e20:	20008980 	.word	0x20008980
 8003e24:	40021000 	.word	0x40021000

08003e28 <File_Close_Update_Unlink>:

void File_Close_Update_Unlink(void) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
	f_close(&MyFile);                       // Close previous running file
 8003e2c:	4807      	ldr	r0, [pc, #28]	; (8003e4c <File_Close_Update_Unlink+0x24>)
 8003e2e:	f010 fc89 	bl	8014744 <f_close>
	update_FATFS_time(); // Write RTC time-stamp on File header/properties of last FATFS file to visualize in PC
 8003e32:	f000 fbb3 	bl	800459c <update_FATFS_time>
	f_mount(0, "", 0); 	//  unmount FATFS file (of running sensor storage file)
 8003e36:	2200      	movs	r2, #0
 8003e38:	4905      	ldr	r1, [pc, #20]	; (8003e50 <File_Close_Update_Unlink+0x28>)
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	f00f ffc8 	bl	8013dd0 <f_mount>
	FATFS_UnLinkDriver(SDPath); //  unlink SD card driver (of running sensor storage file)
 8003e40:	4804      	ldr	r0, [pc, #16]	; (8003e54 <File_Close_Update_Unlink+0x2c>)
 8003e42:	f011 f9b1 	bl	80151a8 <FATFS_UnLinkDriver>
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20008f7c 	.word	0x20008f7c
 8003e50:	080179d0 	.word	0x080179d0
 8003e54:	20008d10 	.word	0x20008d10

08003e58 <USB_Clock_Ready>:

void USB_Clock_Ready(void) {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
	LL_PWR_EnableVddUSB();                       // Enable VDDUSB supply for USB
 8003e5e:	f7ff fb7f 	bl	8003560 <LL_PWR_EnableVddUSB>
	while (!LL_PWR_IsEnabledVddUSB())
 8003e62:	bf00      	nop
 8003e64:	f7ff fb9c 	bl	80035a0 <LL_PWR_IsEnabledVddUSB>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0fa      	beq.n	8003e64 <USB_Clock_Ready+0xc>
		;                       // Wait for VDDUSB supply to activate
	__HAL_RCC_USB_OTG_FS_CLK_ENABLE()
 8003e6e:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <USB_Clock_Ready+0x38>)
 8003e70:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <USB_Clock_Ready+0x38>)
 8003e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e7a:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <USB_Clock_Ready+0x38>)
 8003e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e82:	607b      	str	r3, [r7, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
	;     // Enable USB Clock
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000

08003e94 <Datalog_Sensor_Initialization>:

void Datalog_Sensor_Initialization(void) {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0

	FATFS_Init();
 8003e98:	f7ff fed0 	bl	8003c3c <FATFS_Init>
	Open_File_For_Sensor_Write();
 8003e9c:	f000 fad6 	bl	800444c <Open_File_For_Sensor_Write>
	// Re-Initializing FATFS (UnixTimestamp .BIN file) and Left open for sensor write
	if (Skip_FATFS == 0) {
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <Datalog_Sensor_Initialization+0x1c>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <Datalog_Sensor_Initialization+0x18>
		Reset_All();         // Reset All Buffer parameters for FATFS SDIO write
 8003ea8:	f000 f994 	bl	80041d4 <Reset_All>
	}
}
 8003eac:	bf00      	nop
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20008f71 	.word	0x20008f71

08003eb4 <Prepare_Data_Log_State>:

void Prepare_Data_Log_State(void) {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
	if (Skip_FATFS == 0)   // If there's no FATFS SD error
 8003eb8:	4b1b      	ldr	r3, [pc, #108]	; (8003f28 <Prepare_Data_Log_State+0x74>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d130      	bne.n	8003f22 <Prepare_Data_Log_State+0x6e>
			{
//	Battery_Monitor_Voltage_check();
		Battery_ADC_Value = 2500;
 8003ec0:	4b1a      	ldr	r3, [pc, #104]	; (8003f2c <Prepare_Data_Log_State+0x78>)
 8003ec2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003ec6:	801a      	strh	r2, [r3, #0]
		if (Battery_ADC_Value < 2450)           // Battery high charge 3.8V 2400
 8003ec8:	4b18      	ldr	r3, [pc, #96]	; (8003f2c <Prepare_Data_Log_State+0x78>)
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	f640 1291 	movw	r2, #2449	; 0x991
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d803      	bhi.n	8003edc <Prepare_Data_Log_State+0x28>
				{

			Pros_state = Low_Battery_Mode; // Prepare to enter Low_Battery_Mode mode
 8003ed4:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <Prepare_Data_Log_State+0x7c>)
 8003ed6:	2205      	movs	r2, #5
 8003ed8:	701a      	strb	r2, [r3, #0]
				Pros_state = Dormant_Idle_Stop;
			}

		}
	}
}
 8003eda:	e022      	b.n	8003f22 <Prepare_Data_Log_State+0x6e>
			if (Data_log_Start_Resume == 1) // Continue Data Log after USB disconnect
 8003edc:	4b15      	ldr	r3, [pc, #84]	; (8003f34 <Prepare_Data_Log_State+0x80>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d10c      	bne.n	8003efe <Prepare_Data_Log_State+0x4a>
				Datalog_Sensor_Initialization();
 8003ee4:	f7ff ffd6 	bl	8003e94 <Datalog_Sensor_Initialization>
				if (Skip_FATFS == 0)   // If there's no FATFS SD error
 8003ee8:	4b0f      	ldr	r3, [pc, #60]	; (8003f28 <Prepare_Data_Log_State+0x74>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d118      	bne.n	8003f22 <Prepare_Data_Log_State+0x6e>
					LL_LPTIM_EnableIT_ARRM(LPTIM2);
 8003ef0:	4811      	ldr	r0, [pc, #68]	; (8003f38 <Prepare_Data_Log_State+0x84>)
 8003ef2:	f7ff fa23 	bl	800333c <LL_LPTIM_EnableIT_ARRM>
					NVIC_EnableIRQ(LPTIM2_IRQn); // Enabling LPTIM2 Timer 10ms Interrupt
 8003ef6:	2042      	movs	r0, #66	; 0x42
 8003ef8:	f7fe ffde 	bl	8002eb8 <NVIC_EnableIRQ>
}
 8003efc:	e011      	b.n	8003f22 <Prepare_Data_Log_State+0x6e>
			else if (VCP_Bypass == 1) {
 8003efe:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <Prepare_Data_Log_State+0x88>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d106      	bne.n	8003f14 <Prepare_Data_Log_State+0x60>
				VCP_Bypass = 0;
 8003f06:	4b0d      	ldr	r3, [pc, #52]	; (8003f3c <Prepare_Data_Log_State+0x88>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
				Pros_state = LP_STOP;
 8003f0c:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <Prepare_Data_Log_State+0x7c>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	701a      	strb	r2, [r3, #0]
}
 8003f12:	e006      	b.n	8003f22 <Prepare_Data_Log_State+0x6e>
				prepare_low_battery();
 8003f14:	f001 fae6 	bl	80054e4 <prepare_low_battery>
				Prepare_Goto_Dormant_Mode();
 8003f18:	f000 f944 	bl	80041a4 <Prepare_Goto_Dormant_Mode>
				Pros_state = Dormant_Idle_Stop;
 8003f1c:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <Prepare_Data_Log_State+0x7c>)
 8003f1e:	2206      	movs	r2, #6
 8003f20:	701a      	strb	r2, [r3, #0]
}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20008f71 	.word	0x20008f71
 8003f2c:	20008f4c 	.word	0x20008f4c
 8003f30:	200088b4 	.word	0x200088b4
 8003f34:	20008971 	.word	0x20008971
 8003f38:	40009400 	.word	0x40009400
 8003f3c:	20008d19 	.word	0x20008d19

08003f40 <DFU_Bypass>:
		}
#endif
	}
}
int check;
void DFU_Bypass(void) {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0

	uint32_t i = 0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	607b      	str	r3, [r7, #4]

	check = LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY);
 8003f4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f52:	f7ff fe1c 	bl	8003b8e <LL_GPIO_IsInputPinSet>
 8003f56:	4603      	mov	r3, r0
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4b1b      	ldr	r3, [pc, #108]	; (8003fc8 <DFU_Bypass+0x88>)
 8003f5c:	601a      	str	r2, [r3, #0]
	// if(check == 1)
	//	 CYAN_LED_ONLY();
	while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 8003f5e:	bf00      	nop
 8003f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f68:	f7ff fe11 	bl	8003b8e <LL_GPIO_IsInputPinSet>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f6      	bne.n	8003f60 <DFU_Bypass+0x20>
		;  // Wait until USB cable disconnect from Charger
	if (*LP_Ram_Key_Address != Reset_Key_Value) {
 8003f72:	4b16      	ldr	r3, [pc, #88]	; (8003fcc <DFU_Bypass+0x8c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a16      	ldr	r2, [pc, #88]	; (8003fd0 <DFU_Bypass+0x90>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d020      	beq.n	8003fbe <DFU_Bypass+0x7e>
		*LP_Ram_Key_Address = Reset_Key_Value;
 8003f7c:	4b13      	ldr	r3, [pc, #76]	; (8003fcc <DFU_Bypass+0x8c>)
 8003f7e:	4a14      	ldr	r2, [pc, #80]	; (8003fd0 <DFU_Bypass+0x90>)
 8003f80:	601a      	str	r2, [r3, #0]
		if (check == 1) {
 8003f82:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <DFU_Bypass+0x88>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d119      	bne.n	8003fbe <DFU_Bypass+0x7e>
			/* Toggle IO in during 2s (10*200ms) */
			for (i = 0; i < 5; i++) {
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	607b      	str	r3, [r7, #4]
 8003f8e:	e013      	b.n	8003fb8 <DFU_Bypass+0x78>
				//   LL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
				LL_mDelay(200);
 8003f90:	20c8      	movs	r0, #200	; 0xc8
 8003f92:	f00b fc71 	bl	800f878 <LL_mDelay>
				if (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY)) {
 8003f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f9e:	f7ff fdf6 	bl	8003b8e <LL_GPIO_IsInputPinSet>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d004      	beq.n	8003fb2 <DFU_Bypass+0x72>
					*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <DFU_Bypass+0x94>)
 8003faa:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <DFU_Bypass+0x90>)
 8003fac:	601a      	str	r2, [r3, #0]
					NVIC_SystemReset();        // System reset
 8003fae:	f7fe ffe1 	bl	8002f74 <NVIC_SystemReset>
			for (i = 0; i < 5; i++) {
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	607b      	str	r3, [r7, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d9e8      	bls.n	8003f90 <DFU_Bypass+0x50>
				}

			}
		}
	}
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20008d00 	.word	0x20008d00
 8003fcc:	20017cf0 	.word	0x20017cf0
 8003fd0:	deadbeef 	.word	0xdeadbeef
 8003fd4:	20017ff0 	.word	0x20017ff0

08003fd8 <Execute_VCP_Command>:
	EnterStop();   // Enter Stop Mode
	LL_EXTI_DisableFallingTrig_0_31(LL_EXTI_LINE_9);

}

void Execute_VCP_Command(void) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
	Data_log_Start_Resume = 0;
 8003fdc:	4b13      	ldr	r3, [pc, #76]	; (800402c <Execute_VCP_Command+0x54>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
	if (EnterReset_Create == 1) {
 8003fe2:	4b13      	ldr	r3, [pc, #76]	; (8004030 <Execute_VCP_Command+0x58>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d104      	bne.n	8003ff4 <Execute_VCP_Command+0x1c>
		EnterReset_Create = 0;
 8003fea:	4b11      	ldr	r3, [pc, #68]	; (8004030 <Execute_VCP_Command+0x58>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
		NVIC_SystemReset();    // System reset
 8003ff0:	f7fe ffc0 	bl	8002f74 <NVIC_SystemReset>
	}

	if (EnterDFU_Create == 1) {
 8003ff4:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <Execute_VCP_Command+0x5c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d107      	bne.n	800400c <Execute_VCP_Command+0x34>
		EnterDFU_Create = 0;
 8003ffc:	4b0d      	ldr	r3, [pc, #52]	; (8004034 <Execute_VCP_Command+0x5c>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
		*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 8004002:	4b0d      	ldr	r3, [pc, #52]	; (8004038 <Execute_VCP_Command+0x60>)
 8004004:	4a0d      	ldr	r2, [pc, #52]	; (800403c <Execute_VCP_Command+0x64>)
 8004006:	601a      	str	r2, [r3, #0]
		NVIC_SystemReset();    // System reset
 8004008:	f7fe ffb4 	bl	8002f74 <NVIC_SystemReset>
	}

	if (Logstart_Create == 1) {
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <Execute_VCP_Command+0x68>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d109      	bne.n	8004028 <Execute_VCP_Command+0x50>
		Logstart_Create = 0;
 8004014:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <Execute_VCP_Command+0x68>)
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
		FATFS_Logstart_Ready();
 800401a:	f000 fa89 	bl	8004530 <FATFS_Logstart_Ready>
		Data_log_Start_Resume = 1;
 800401e:	4b03      	ldr	r3, [pc, #12]	; (800402c <Execute_VCP_Command+0x54>)
 8004020:	2201      	movs	r2, #1
 8004022:	701a      	strb	r2, [r3, #0]
		Check_SD_Command_File();
 8004024:	f7ff fe34 	bl	8003c90 <Check_SD_Command_File>
	}
}
 8004028:	bf00      	nop
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20008971 	.word	0x20008971
 8004030:	2000a000 	.word	0x2000a000
 8004034:	2000abf0 	.word	0x2000abf0
 8004038:	20017ff0 	.word	0x20017ff0
 800403c:	deadbeef 	.word	0xdeadbeef
 8004040:	20009790 	.word	0x20009790

08004044 <USB_Init_Start>:

void USB_Init_Start(void) {
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
	SD_POWER_ON();
 8004048:	f7fd fe3a 	bl	8001cc0 <SD_POWER_ON>

	Pros_state = LP_STOP;                  // Next state
 800404c:	4b4c      	ldr	r3, [pc, #304]	; (8004180 <USB_Init_Start+0x13c>)
 800404e:	2201      	movs	r2, #1
 8004050:	701a      	strb	r2, [r3, #0]
	NVIC_DisableIRQ(LPTIM2_IRQn);         // Disabling LPTIM2 Timer Interrupt
 8004052:	2042      	movs	r0, #66	; 0x42
 8004054:	f7fe ff4a 	bl	8002eec <NVIC_DisableIRQ>
	USB_Clock_Ready();
 8004058:	f7ff fefe 	bl	8003e58 <USB_Clock_Ready>
	NVIC_DisableIRQ(EXTI9_5_IRQn); // Disabling External GPIO pin interrupt (EXTI9-5) for USB connectivity PA9 Pin
 800405c:	2017      	movs	r0, #23
 800405e:	f7fe ff45 	bl	8002eec <NVIC_DisableIRQ>

	if (Data_log_Start_Resume == 1)    // If Data log was in operation
 8004062:	4b48      	ldr	r3, [pc, #288]	; (8004184 <USB_Init_Start+0x140>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <USB_Init_Start+0x2a>
			{
		File_Close_Update_Unlink();
 800406a:	f7ff fedd 	bl	8003e28 <File_Close_Update_Unlink>

	}
	Data_log_Start_Resume = 0;
 800406e:	4b45      	ldr	r3, [pc, #276]	; (8004184 <USB_Init_Start+0x140>)
 8004070:	2200      	movs	r2, #0
 8004072:	701a      	strb	r2, [r3, #0]
	HAL_ResumeTick();      // Before entering USB mode, SYS_tick needs to enable
 8004074:	f004 fa2e 	bl	80084d4 <HAL_ResumeTick>

	if (USB_Mode == 1)    // USB MSC Mode  // Default: USB VCP mode (0), MSC (1)
 8004078:	4b43      	ldr	r3, [pc, #268]	; (8004188 <USB_Init_Start+0x144>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d12c      	bne.n	80040da <USB_Init_Start+0x96>
			{
		VIOLET_LED_ONLY();
 8004080:	f7fd fdf2 	bl	8001c68 <VIOLET_LED_ONLY>
		USB_Mode = 0;               // Next mode default USB VCP
 8004084:	4b40      	ldr	r3, [pc, #256]	; (8004188 <USB_Init_Start+0x144>)
 8004086:	2200      	movs	r2, #0
 8004088:	701a      	strb	r2, [r3, #0]
		USB_MSC_Init_Start();
 800408a:	f000 fb1d 	bl	80046c8 <USB_MSC_Init_Start>
		FATAL_Error = 0;
 800408e:	4b3f      	ldr	r3, [pc, #252]	; (800418c <USB_Init_Start+0x148>)
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]

		while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 8004094:	bf00      	nop
 8004096:	f44f 7100 	mov.w	r1, #512	; 0x200
 800409a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800409e:	f7ff fd76 	bl	8003b8e <LL_GPIO_IsInputPinSet>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f6      	bne.n	8004096 <USB_Init_Start+0x52>
			;       // Stay USB mode until USB connectivity available PA9
		ALL_LED_OFF();
 80040a8:	f7fd fd62 	bl	8001b70 <ALL_LED_OFF>
		// After USB Cable Disconnected from device
		Shut_Down_USB();
 80040ac:	f7ff fea0 	bl	8003df0 <Shut_Down_USB>
		//	Wait_for_DFU();
		Enter_Into_DFU = 0;
 80040b0:	4b37      	ldr	r3, [pc, #220]	; (8004190 <USB_Init_Start+0x14c>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	701a      	strb	r2, [r3, #0]
		if (Enter_Into_DFU == 1) {
 80040b6:	4b36      	ldr	r3, [pc, #216]	; (8004190 <USB_Init_Start+0x14c>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d107      	bne.n	80040ce <USB_Init_Start+0x8a>
			Enter_Into_DFU = 0;
 80040be:	4b34      	ldr	r3, [pc, #208]	; (8004190 <USB_Init_Start+0x14c>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
			*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 80040c4:	4b33      	ldr	r3, [pc, #204]	; (8004194 <USB_Init_Start+0x150>)
 80040c6:	4a34      	ldr	r2, [pc, #208]	; (8004198 <USB_Init_Start+0x154>)
 80040c8:	601a      	str	r2, [r3, #0]
			NVIC_SystemReset();        // System reset
 80040ca:	f7fe ff53 	bl	8002f74 <NVIC_SystemReset>
		}

		Prepare_Data_Log_State();
 80040ce:	f7ff fef1 	bl	8003eb4 <Prepare_Data_Log_State>
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80040d2:	2017      	movs	r0, #23
 80040d4:	f7fe fef0 	bl	8002eb8 <NVIC_EnableIRQ>
				Data_log_Start_Resume = 0;    // Data log stop
				Pros_state = USB_MSC_VCP_Mode;  // Goto USB Modes immediately
			}
		}
	}
}
 80040d8:	e050      	b.n	800417c <USB_Init_Start+0x138>
		CYAN_LED_ONLY();
 80040da:	f7fd fddb 	bl	8001c94 <CYAN_LED_ONLY>
		USB_VCP_Init_Start();
 80040de:	f000 fb15 	bl	800470c <USB_VCP_Init_Start>
		if (Battey_Charge_Mode(&USBD_Device) == USBD_OK) // USB Battery charging mode
 80040e2:	482e      	ldr	r0, [pc, #184]	; (800419c <USB_Init_Start+0x158>)
 80040e4:	f00c fe93 	bl	8010e0e <Battey_Charge_Mode>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d118      	bne.n	8004120 <USB_Init_Start+0xdc>
			FATAL_Error = 0;
 80040ee:	4b27      	ldr	r3, [pc, #156]	; (800418c <USB_Init_Start+0x148>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	701a      	strb	r2, [r3, #0]
			while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 80040f4:	bf00      	nop
 80040f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040fe:	f7ff fd46 	bl	8003b8e <LL_GPIO_IsInputPinSet>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f6      	bne.n	80040f6 <USB_Init_Start+0xb2>
			Shut_Down_USB();
 8004108:	f7ff fe72 	bl	8003df0 <Shut_Down_USB>
			ALL_LED_OFF();
 800410c:	f7fd fd30 	bl	8001b70 <ALL_LED_OFF>
			Check_SD_Command_File();
 8004110:	f7ff fdbe 	bl	8003c90 <Check_SD_Command_File>
			Prepare_Data_Log_State();
 8004114:	f7ff fece 	bl	8003eb4 <Prepare_Data_Log_State>
			NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004118:	2017      	movs	r0, #23
 800411a:	f7fe fecd 	bl	8002eb8 <NVIC_EnableIRQ>
}
 800411e:	e02d      	b.n	800417c <USB_Init_Start+0x138>
			FATAL_Error = 0;
 8004120:	4b1a      	ldr	r3, [pc, #104]	; (800418c <USB_Init_Start+0x148>)
 8004122:	2200      	movs	r2, #0
 8004124:	701a      	strb	r2, [r3, #0]
			while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 8004126:	bf00      	nop
 8004128:	f44f 7100 	mov.w	r1, #512	; 0x200
 800412c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004130:	f7ff fd2d 	bl	8003b8e <LL_GPIO_IsInputPinSet>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f6      	bne.n	8004128 <USB_Init_Start+0xe4>
			Shut_Down_USB();
 800413a:	f7ff fe59 	bl	8003df0 <Shut_Down_USB>
			ALL_LED_OFF();
 800413e:	f7fd fd17 	bl	8001b70 <ALL_LED_OFF>
			VCP_continue = 1;
 8004142:	4b17      	ldr	r3, [pc, #92]	; (80041a0 <USB_Init_Start+0x15c>)
 8004144:	2201      	movs	r2, #1
 8004146:	701a      	strb	r2, [r3, #0]
			if (VCP_continue == 1)   // Not USB MSC mode intended
 8004148:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <USB_Init_Start+0x15c>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d10a      	bne.n	8004166 <USB_Init_Start+0x122>
				VCP_continue = 0;               // Variable reset, aviod looping
 8004150:	4b13      	ldr	r3, [pc, #76]	; (80041a0 <USB_Init_Start+0x15c>)
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]
				Execute_VCP_Command();
 8004156:	f7ff ff3f 	bl	8003fd8 <Execute_VCP_Command>
				Prepare_Data_Log_State();         // Prepare for Data collection
 800415a:	f7ff feab 	bl	8003eb4 <Prepare_Data_Log_State>
				NVIC_EnableIRQ(EXTI9_5_IRQn); // USB PIN interrupt enable
 800415e:	2017      	movs	r0, #23
 8004160:	f7fe feaa 	bl	8002eb8 <NVIC_EnableIRQ>
}
 8004164:	e00a      	b.n	800417c <USB_Init_Start+0x138>
				ALL_LED_OFF();                           // Switch off USB Light
 8004166:	f7fd fd03 	bl	8001b70 <ALL_LED_OFF>
				USB_Mode = 0;                  // Next Mode USB MSC
 800416a:	4b07      	ldr	r3, [pc, #28]	; (8004188 <USB_Init_Start+0x144>)
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]
				Data_log_Start_Resume = 0;    // Data log stop
 8004170:	4b04      	ldr	r3, [pc, #16]	; (8004184 <USB_Init_Start+0x140>)
 8004172:	2200      	movs	r2, #0
 8004174:	701a      	strb	r2, [r3, #0]
				Pros_state = USB_MSC_VCP_Mode;  // Goto USB Modes immediately
 8004176:	4b02      	ldr	r3, [pc, #8]	; (8004180 <USB_Init_Start+0x13c>)
 8004178:	2204      	movs	r2, #4
 800417a:	701a      	strb	r2, [r3, #0]
}
 800417c:	bf00      	nop
 800417e:	bd80      	pop	{r7, pc}
 8004180:	200088b4 	.word	0x200088b4
 8004184:	20008971 	.word	0x20008971
 8004188:	20009240 	.word	0x20009240
 800418c:	20008f70 	.word	0x20008f70
 8004190:	20008d1a 	.word	0x20008d1a
 8004194:	20017ff0 	.word	0x20017ff0
 8004198:	deadbeef 	.word	0xdeadbeef
 800419c:	20008980 	.word	0x20008980
 80041a0:	20008ca0 	.word	0x20008ca0

080041a4 <Prepare_Goto_Dormant_Mode>:

void Prepare_Goto_Dormant_Mode(void) {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
	LL_LPTIM_DisableIT_ARRM(LPTIM2); // Disable auto reload match interrupt of LPTIM2
 80041a8:	4803      	ldr	r0, [pc, #12]	; (80041b8 <Prepare_Goto_Dormant_Mode+0x14>)
 80041aa:	f7ff f8d7 	bl	800335c <LL_LPTIM_DisableIT_ARRM>
	SD_POWER_OFF();               // Power off SD CARD
 80041ae:	f7fd fd8e 	bl	8001cce <SD_POWER_OFF>

}
 80041b2:	bf00      	nop
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40009400 	.word	0x40009400

080041bc <Reset_Variables_for_LowBattery>:

void Reset_Variables_for_LowBattery(void) // Reset all variables needed to Sensor logging in Double Buffer System
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0

	SD_write_Flag = 0;
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <Reset_Variables_for_LowBattery+0x14>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
	//ALL_LED_OFF();
#else
	// NVIC_SystemReset();
#endif

}
 80041c6:	bf00      	nop
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	20008978 	.word	0x20008978

080041d4 <Reset_All>:

void Reset_All(void) // Reset all variables needed to Sensor logging in Double Buffer System
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0

	last_file = 0;
 80041da:	4b16      	ldr	r3, [pc, #88]	; (8004234 <Reset_All+0x60>)
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]
	Sub_cnt = 0;         // Array Index count in a single buffer to store values
 80041e0:	4b15      	ldr	r3, [pc, #84]	; (8004238 <Reset_All+0x64>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
	w_flag = 1; // Buffer write flag to be written in FATFS file (1=Buffer1, 0=Buffer0)
 80041e6:	4b15      	ldr	r3, [pc, #84]	; (800423c <Reset_All+0x68>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	701a      	strb	r2, [r3, #0]
	s_flag = 0; // Buffer Store flag to be stored/filled by sensor values in interrupt (1=Buffer1, 0=Buffer0)
 80041ec:	4b14      	ldr	r3, [pc, #80]	; (8004240 <Reset_All+0x6c>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
	SD_write_Flag = 0; // Flag to indicates whether a buffer a full and ready to write in SD card
 80041f2:	4b14      	ldr	r3, [pc, #80]	; (8004244 <Reset_All+0x70>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	701a      	strb	r2, [r3, #0]
	SD_Write_Count = 0; // Number of SD write. If reach a predefined value, f_sync() operation will update FATFS files.
 80041f8:	4b13      	ldr	r3, [pc, #76]	; (8004248 <Reset_All+0x74>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	701a      	strb	r2, [r3, #0]

	// Debug Msg clear
	Clear_ErrorTimestamp_Buffer();
 80041fe:	f001 f979 	bl	80054f4 <Clear_ErrorTimestamp_Buffer>
	for (int indxE = 0; indxE < 10; indxE++) {
 8004202:	2300      	movs	r3, #0
 8004204:	607b      	str	r3, [r7, #4]
 8004206:	e00e      	b.n	8004226 <Reset_All+0x52>
		Error_reg_log.Error[indxE] = 0;
 8004208:	4a10      	ldr	r2, [pc, #64]	; (800424c <Reset_All+0x78>)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	2200      	movs	r2, #0
 8004210:	701a      	strb	r2, [r3, #0]
		Error_reg_log.ErrorTime[indxE] = 0;
 8004212:	4a0e      	ldr	r2, [pc, #56]	; (800424c <Reset_All+0x78>)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3302      	adds	r3, #2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	2200      	movs	r2, #0
 800421e:	605a      	str	r2, [r3, #4]
	for (int indxE = 0; indxE < 10; indxE++) {
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3301      	adds	r3, #1
 8004224:	607b      	str	r3, [r7, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b09      	cmp	r3, #9
 800422a:	dded      	ble.n	8004208 <Reset_All+0x34>
	}

}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20008f74 	.word	0x20008f74
 8004238:	200005a8 	.word	0x200005a8
 800423c:	20000010 	.word	0x20000010
 8004240:	200005ac 	.word	0x200005ac
 8004244:	20008978 	.word	0x20008978
 8004248:	200005ad 	.word	0x200005ad
 800424c:	20008878 	.word	0x20008878

08004250 <GetNextIndex>:

int GetNextIndex(char *path) // Read SD card content to save next value in auto increment format
{
 8004250:	b580      	push	{r7, lr}
 8004252:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8004256:	af00      	add	r7, sp, #0
 8004258:	1d3b      	adds	r3, r7, #4
 800425a:	6018      	str	r0, [r3, #0]
	DIR dir;
	FILINFO fno;
	int i, index = -1;
 800425c:	f04f 33ff 	mov.w	r3, #4294967295
 8004260:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

	if (f_opendir(&dir, path) == FR_OK) {
 8004264:	1d3b      	adds	r3, r7, #4
 8004266:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800426a:	6819      	ldr	r1, [r3, #0]
 800426c:	4610      	mov	r0, r2
 800426e:	f010 fcef 	bl	8014c50 <f_opendir>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d132      	bne.n	80042de <GetNextIndex+0x8e>

		while (1) {
			if ((f_readdir(&dir, &fno) != FR_OK) || (fno.fname[0] == 0))
 8004278:	f107 020c 	add.w	r2, r7, #12
 800427c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f010 fd66 	bl	8014d54 <f_readdir>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d127      	bne.n	80042de <GetNextIndex+0x8e>
 800428e:	f107 030c 	add.w	r3, r7, #12
 8004292:	7a5b      	ldrb	r3, [r3, #9]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d022      	beq.n	80042de <GetNextIndex+0x8e>
				break;

			if ((strstr(fno.fname, ".BIN") != NULL)
 8004298:	f107 030c 	add.w	r3, r7, #12
 800429c:	3309      	adds	r3, #9
 800429e:	4914      	ldr	r1, [pc, #80]	; (80042f0 <GetNextIndex+0xa0>)
 80042a0:	4618      	mov	r0, r3
 80042a2:	f011 f8e3 	bl	801546c <strstr>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0e5      	beq.n	8004278 <GetNextIndex+0x28>
					&& (sscanf(fno.fname, "%d", &i) == 1)) // Searcing for .BIN file and determining highest index
 80042ac:	f107 0208 	add.w	r2, r7, #8
 80042b0:	f107 030c 	add.w	r3, r7, #12
 80042b4:	3309      	adds	r3, #9
 80042b6:	490f      	ldr	r1, [pc, #60]	; (80042f4 <GetNextIndex+0xa4>)
 80042b8:	4618      	mov	r0, r3
 80042ba:	f011 f8ab 	bl	8015414 <siscanf>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d1d9      	bne.n	8004278 <GetNextIndex+0x28>
				if (i > index)
 80042c4:	f107 0308 	add.w	r3, r7, #8
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80042ce:	429a      	cmp	r2, r3
 80042d0:	ddd2      	ble.n	8004278 <GetNextIndex+0x28>
					index = i;
 80042d2:	f107 0308 	add.w	r3, r7, #8
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
			if ((f_readdir(&dir, &fno) != FR_OK) || (fno.fname[0] == 0))
 80042dc:	e7cc      	b.n	8004278 <GetNextIndex+0x28>
		}
	}
	return (index + 1);
 80042de:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80042e2:	3301      	adds	r3, #1
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	f507 7712 	add.w	r7, r7, #584	; 0x248
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	080179d4 	.word	0x080179d4
 80042f4:	080179dc 	.word	0x080179dc

080042f8 <Try_FATFS_Mount>:
		}
	}
	return 0;
}

void Try_FATFS_Mount(void) {
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
	if (Fat_mnt_fail == 1) {
 80042fc:	4b14      	ldr	r3, [pc, #80]	; (8004350 <Try_FATFS_Mount+0x58>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d123      	bne.n	800434c <Try_FATFS_Mount+0x54>
		Fat_mnt_fail = 0;
 8004304:	4b12      	ldr	r3, [pc, #72]	; (8004350 <Try_FATFS_Mount+0x58>)
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
		SD_POWER_OFF();
 800430a:	f7fd fce0 	bl	8001cce <SD_POWER_OFF>
		delay_us(10000); // wait 10 msec
 800430e:	f242 7010 	movw	r0, #10000	; 0x2710
 8004312:	f002 fa9f 	bl	8006854 <delay_us>
		SD_POWER_ON();
 8004316:	f7fd fcd3 	bl	8001cc0 <SD_POWER_ON>
		delay_us(1000000); // wait 1 sec
 800431a:	480e      	ldr	r0, [pc, #56]	; (8004354 <Try_FATFS_Mount+0x5c>)
 800431c:	f002 fa9a 	bl	8006854 <delay_us>
		//Retry FATFS link

		if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8004320:	490d      	ldr	r1, [pc, #52]	; (8004358 <Try_FATFS_Mount+0x60>)
 8004322:	480e      	ldr	r0, [pc, #56]	; (800435c <Try_FATFS_Mount+0x64>)
 8004324:	f010 fef8 	bl	8015118 <FATFS_LinkDriver>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10b      	bne.n	8004346 <Try_FATFS_Mount+0x4e>
				{
			if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 800432e:	2201      	movs	r2, #1
 8004330:	4909      	ldr	r1, [pc, #36]	; (8004358 <Try_FATFS_Mount+0x60>)
 8004332:	480b      	ldr	r0, [pc, #44]	; (8004360 <Try_FATFS_Mount+0x68>)
 8004334:	f00f fd4c 	bl	8013dd0 <f_mount>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d006      	beq.n	800434c <Try_FATFS_Mount+0x54>
					{
				Skip_FATFS = 1;
 800433e:	4b09      	ldr	r3, [pc, #36]	; (8004364 <Try_FATFS_Mount+0x6c>)
 8004340:	2201      	movs	r2, #1
 8004342:	701a      	strb	r2, [r3, #0]
		} else {
			Skip_FATFS = 1;
		}
	}

}
 8004344:	e002      	b.n	800434c <Try_FATFS_Mount+0x54>
			Skip_FATFS = 1;
 8004346:	4b07      	ldr	r3, [pc, #28]	; (8004364 <Try_FATFS_Mount+0x6c>)
 8004348:	2201      	movs	r2, #1
 800434a:	701a      	strb	r2, [r3, #0]
}
 800434c:	bf00      	nop
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20008c10 	.word	0x20008c10
 8004354:	000f4240 	.word	0x000f4240
 8004358:	20008d10 	.word	0x20008d10
 800435c:	08017cfc 	.word	0x08017cfc
 8004360:	20008d1c 	.word	0x20008d1c
 8004364:	20008f71 	.word	0x20008f71

08004368 <file_reopen_sync>:

void file_reopen_sync(void) {
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
	f_close(&MyFile);
 800436c:	4808      	ldr	r0, [pc, #32]	; (8004390 <file_reopen_sync+0x28>)
 800436e:	f010 f9e9 	bl	8014744 <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8004372:	2212      	movs	r2, #18
 8004374:	4907      	ldr	r1, [pc, #28]	; (8004394 <file_reopen_sync+0x2c>)
 8004376:	4806      	ldr	r0, [pc, #24]	; (8004390 <file_reopen_sync+0x28>)
 8004378:	f00f fd72 	bl	8013e60 <f_open>
	if (res != FR_OK) {
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <file_reopen_sync+0x30>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <file_reopen_sync+0x22>
		Fat_sync_read_fail = 1;
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <file_reopen_sync+0x34>)
 8004386:	2201      	movs	r2, #1
 8004388:	601a      	str	r2, [r3, #0]
	}
}
 800438a:	bf00      	nop
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20008f7c 	.word	0x20008f7c
 8004394:	20008c58 	.word	0x20008c58
 8004398:	20009202 	.word	0x20009202
 800439c:	20008c18 	.word	0x20008c18

080043a0 <file_reopen>:

void file_reopen(void) {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
	f_close(&MyFile);
 80043a4:	4808      	ldr	r0, [pc, #32]	; (80043c8 <file_reopen+0x28>)
 80043a6:	f010 f9cd 	bl	8014744 <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 80043aa:	2212      	movs	r2, #18
 80043ac:	4907      	ldr	r1, [pc, #28]	; (80043cc <file_reopen+0x2c>)
 80043ae:	4806      	ldr	r0, [pc, #24]	; (80043c8 <file_reopen+0x28>)
 80043b0:	f00f fd56 	bl	8013e60 <f_open>
	if (res != FR_OK) {
 80043b4:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <file_reopen+0x30>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <file_reopen+0x22>
		Fat_write_read_fail = 1;
 80043bc:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <file_reopen+0x34>)
 80043be:	2201      	movs	r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
	}
}
 80043c2:	bf00      	nop
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20008f7c 	.word	0x20008f7c
 80043cc:	20008c58 	.word	0x20008c58
 80043d0:	20009202 	.word	0x20009202
 80043d4:	20008c14 	.word	0x20008c14

080043d8 <file_mnt_reopen>:

void file_mnt_reopen(void) {
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 80043dc:	4914      	ldr	r1, [pc, #80]	; (8004430 <file_mnt_reopen+0x58>)
 80043de:	4815      	ldr	r0, [pc, #84]	; (8004434 <file_mnt_reopen+0x5c>)
 80043e0:	f010 fe9a 	bl	8015118 <FATFS_LinkDriver>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d11c      	bne.n	8004424 <file_mnt_reopen+0x4c>
			{
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 80043ea:	2201      	movs	r2, #1
 80043ec:	4910      	ldr	r1, [pc, #64]	; (8004430 <file_mnt_reopen+0x58>)
 80043ee:	4812      	ldr	r0, [pc, #72]	; (8004438 <file_mnt_reopen+0x60>)
 80043f0:	f00f fcee 	bl	8013dd0 <f_mount>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <file_mnt_reopen+0x2a>
				{
			Fat_read_mnt_fail = 1;
 80043fa:	4b10      	ldr	r3, [pc, #64]	; (800443c <file_mnt_reopen+0x64>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
		}
	} else {
		Fat_read_mnt_fail = 1;
	}

}
 8004400:	e013      	b.n	800442a <file_mnt_reopen+0x52>
			res = f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8004402:	2212      	movs	r2, #18
 8004404:	490e      	ldr	r1, [pc, #56]	; (8004440 <file_mnt_reopen+0x68>)
 8004406:	480f      	ldr	r0, [pc, #60]	; (8004444 <file_mnt_reopen+0x6c>)
 8004408:	f00f fd2a 	bl	8013e60 <f_open>
 800440c:	4603      	mov	r3, r0
 800440e:	461a      	mov	r2, r3
 8004410:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <file_mnt_reopen+0x70>)
 8004412:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {
 8004414:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <file_mnt_reopen+0x70>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d006      	beq.n	800442a <file_mnt_reopen+0x52>
				Fat_read_mnt_fail = 1;
 800441c:	4b07      	ldr	r3, [pc, #28]	; (800443c <file_mnt_reopen+0x64>)
 800441e:	2201      	movs	r2, #1
 8004420:	601a      	str	r2, [r3, #0]
}
 8004422:	e002      	b.n	800442a <file_mnt_reopen+0x52>
		Fat_read_mnt_fail = 1;
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <file_mnt_reopen+0x64>)
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]
}
 800442a:	bf00      	nop
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20008d10 	.word	0x20008d10
 8004434:	08017cfc 	.word	0x08017cfc
 8004438:	20008d1c 	.word	0x20008d1c
 800443c:	20008cc4 	.word	0x20008cc4
 8004440:	20008c58 	.word	0x20008c58
 8004444:	20008f7c 	.word	0x20008f7c
 8004448:	20009202 	.word	0x20009202

0800444c <Open_File_For_Sensor_Write>:
#define File_name_Autoincrement
void Open_File_For_Sensor_Write(void) {
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
	if (Skip_FATFS == 0) {
 8004450:	4b1a      	ldr	r3, [pc, #104]	; (80044bc <Open_File_For_Sensor_Write+0x70>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d12f      	bne.n	80044b8 <Open_File_For_Sensor_Write+0x6c>
#ifdef File_name_Autoincrement
		last_file = GetNextIndex("");
 8004458:	4819      	ldr	r0, [pc, #100]	; (80044c0 <Open_File_For_Sensor_Write+0x74>)
 800445a:	f7ff fef9 	bl	8004250 <GetNextIndex>
 800445e:	4602      	mov	r2, r0
 8004460:	4b18      	ldr	r3, [pc, #96]	; (80044c4 <Open_File_For_Sensor_Write+0x78>)
 8004462:	601a      	str	r2, [r3, #0]
		sprintf(FILE_NAME_STRING, "%06d.BIN", last_file);
 8004464:	4b17      	ldr	r3, [pc, #92]	; (80044c4 <Open_File_For_Sensor_Write+0x78>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	4917      	ldr	r1, [pc, #92]	; (80044c8 <Open_File_For_Sensor_Write+0x7c>)
 800446c:	4817      	ldr	r0, [pc, #92]	; (80044cc <Open_File_For_Sensor_Write+0x80>)
 800446e:	f010 ffad 	bl	80153cc <siprintf>

#else
		Convert_SD_FileName_Unix_Time(); // Read RTC time and store in Sensor Filename (UNIX format)
#endif

		res = f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8004472:	2212      	movs	r2, #18
 8004474:	4915      	ldr	r1, [pc, #84]	; (80044cc <Open_File_For_Sensor_Write+0x80>)
 8004476:	4816      	ldr	r0, [pc, #88]	; (80044d0 <Open_File_For_Sensor_Write+0x84>)
 8004478:	f00f fcf2 	bl	8013e60 <f_open>
 800447c:	4603      	mov	r3, r0
 800447e:	461a      	mov	r2, r3
 8004480:	4b14      	ldr	r3, [pc, #80]	; (80044d4 <Open_File_For_Sensor_Write+0x88>)
 8004482:	701a      	strb	r2, [r3, #0]
		if (res != FR_OK) // Create and Open a new text file object with write access
 8004484:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <Open_File_For_Sensor_Write+0x88>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <Open_File_For_Sensor_Write+0x48>
				{
			AIM_Error_Handler(f_open_E);
 800448c:	2001      	movs	r0, #1
 800448e:	f001 f8c9 	bl	8005624 <AIM_Error_Handler>
 8004492:	e00d      	b.n	80044b0 <Open_File_For_Sensor_Write+0x64>
		} else {
			f_lseek(&MyFile, MyFile.fsize); // Increase File Size when big file to write
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <Open_File_For_Sensor_Write+0x84>)
 8004496:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800449a:	4619      	mov	r1, r3
 800449c:	480c      	ldr	r0, [pc, #48]	; (80044d0 <Open_File_For_Sensor_Write+0x84>)
 800449e:	f010 f979 	bl	8014794 <f_lseek>
			res = f_sync(&MyFile);
 80044a2:	480b      	ldr	r0, [pc, #44]	; (80044d0 <Open_File_For_Sensor_Write+0x84>)
 80044a4:	f010 f894 	bl	80145d0 <f_sync>
 80044a8:	4603      	mov	r3, r0
 80044aa:	461a      	mov	r2, r3
 80044ac:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <Open_File_For_Sensor_Write+0x88>)
 80044ae:	701a      	strb	r2, [r3, #0]
		}
		delay_us(1000);  // Arbitrary delay to complete FATFS SD write
 80044b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044b4:	f002 f9ce 	bl	8006854 <delay_us>

	}
}
 80044b8:	bf00      	nop
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20008f71 	.word	0x20008f71
 80044c0:	080179d0 	.word	0x080179d0
 80044c4:	20008f74 	.word	0x20008f74
 80044c8:	080179e8 	.word	0x080179e8
 80044cc:	20008c58 	.word	0x20008c58
 80044d0:	20008f7c 	.word	0x20008f7c
 80044d4:	20009202 	.word	0x20009202

080044d8 <FATFS_Logstart_Delete>:
		}
		delay_us(100);
	}
}

void FATFS_Logstart_Delete(void) {
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0

	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 80044dc:	490f      	ldr	r1, [pc, #60]	; (800451c <FATFS_Logstart_Delete+0x44>)
 80044de:	4810      	ldr	r0, [pc, #64]	; (8004520 <FATFS_Logstart_Delete+0x48>)
 80044e0:	f010 fe1a 	bl	8015118 <FATFS_LinkDriver>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10d      	bne.n	8004506 <FATFS_Logstart_Delete+0x2e>
			{
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 80044ea:	2201      	movs	r2, #1
 80044ec:	490b      	ldr	r1, [pc, #44]	; (800451c <FATFS_Logstart_Delete+0x44>)
 80044ee:	480d      	ldr	r0, [pc, #52]	; (8004524 <FATFS_Logstart_Delete+0x4c>)
 80044f0:	f00f fc6e 	bl	8013dd0 <f_mount>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <FATFS_Logstart_Delete+0x28>
				{     // Initialization Error Debugging
			//		 RED_LED_ON();
		}

		else {
			if (f_unlink("LogStart.txt") == FR_OK) { // If LogStart.txt file present, delete the file
 80044fa:	480b      	ldr	r0, [pc, #44]	; (8004528 <FATFS_Logstart_Delete+0x50>)
 80044fc:	f010 fc70 	bl	8014de0 <f_unlink>
			}
		}
		delay_us(100);
 8004500:	2064      	movs	r0, #100	; 0x64
 8004502:	f002 f9a7 	bl	8006854 <delay_us>
	}
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 8004506:	2200      	movs	r2, #0
 8004508:	4908      	ldr	r1, [pc, #32]	; (800452c <FATFS_Logstart_Delete+0x54>)
 800450a:	2000      	movs	r0, #0
 800450c:	f00f fc60 	bl	8013dd0 <f_mount>
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 8004510:	4802      	ldr	r0, [pc, #8]	; (800451c <FATFS_Logstart_Delete+0x44>)
 8004512:	f010 fe49 	bl	80151a8 <FATFS_UnLinkDriver>
}
 8004516:	bf00      	nop
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20008d10 	.word	0x20008d10
 8004520:	08017cfc 	.word	0x08017cfc
 8004524:	20008d1c 	.word	0x20008d1c
 8004528:	080179c0 	.word	0x080179c0
 800452c:	080179d0 	.word	0x080179d0

08004530 <FATFS_Logstart_Ready>:

void FATFS_Logstart_Ready(void) {
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0

	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8004534:	4913      	ldr	r1, [pc, #76]	; (8004584 <FATFS_Logstart_Ready+0x54>)
 8004536:	4814      	ldr	r0, [pc, #80]	; (8004588 <FATFS_Logstart_Ready+0x58>)
 8004538:	f010 fdee 	bl	8015118 <FATFS_LinkDriver>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d115      	bne.n	800456e <FATFS_Logstart_Ready+0x3e>
			{
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 8004542:	2201      	movs	r2, #1
 8004544:	490f      	ldr	r1, [pc, #60]	; (8004584 <FATFS_Logstart_Ready+0x54>)
 8004546:	4811      	ldr	r0, [pc, #68]	; (800458c <FATFS_Logstart_Ready+0x5c>)
 8004548:	f00f fc42 	bl	8013dd0 <f_mount>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10a      	bne.n	8004568 <FATFS_Logstart_Ready+0x38>
				{     // Initialization Error Debugging

		}

		else {
			if (f_open(&MyFile, "LogStart.txt", FA_OPEN_ALWAYS | FA_WRITE)
 8004552:	2212      	movs	r2, #18
 8004554:	490e      	ldr	r1, [pc, #56]	; (8004590 <FATFS_Logstart_Ready+0x60>)
 8004556:	480f      	ldr	r0, [pc, #60]	; (8004594 <FATFS_Logstart_Ready+0x64>)
 8004558:	f00f fc82 	bl	8013e60 <f_open>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d102      	bne.n	8004568 <FATFS_Logstart_Ready+0x38>
					!= FR_OK) // Create and Open a new text file object with write access
					{

			} else {

				f_close(&MyFile);
 8004562:	480c      	ldr	r0, [pc, #48]	; (8004594 <FATFS_Logstart_Ready+0x64>)
 8004564:	f010 f8ee 	bl	8014744 <f_close>
			}
		}
		delay_us(100);
 8004568:	2064      	movs	r0, #100	; 0x64
 800456a:	f002 f973 	bl	8006854 <delay_us>
	}
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 800456e:	2200      	movs	r2, #0
 8004570:	4909      	ldr	r1, [pc, #36]	; (8004598 <FATFS_Logstart_Ready+0x68>)
 8004572:	2000      	movs	r0, #0
 8004574:	f00f fc2c 	bl	8013dd0 <f_mount>
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 8004578:	4802      	ldr	r0, [pc, #8]	; (8004584 <FATFS_Logstart_Ready+0x54>)
 800457a:	f010 fe15 	bl	80151a8 <FATFS_UnLinkDriver>
}
 800457e:	bf00      	nop
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	20008d10 	.word	0x20008d10
 8004588:	08017cfc 	.word	0x08017cfc
 800458c:	20008d1c 	.word	0x20008d1c
 8004590:	080179c0 	.word	0x080179c0
 8004594:	20008f7c 	.word	0x20008f7c
 8004598:	080179d0 	.word	0x080179d0

0800459c <update_FATFS_time>:

void update_FATFS_time(void) // After File close, write RTC time-stamp on File header to visualize in PC
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
	Read_RTC_Timestamp();         // Read RTC time-stamps and store in variables
 80045a0:	f000 f8d6 	bl	8004750 <Read_RTC_Timestamp>
	fno.fdate = (WORD) (((Year + 20) << 9) | Mon << 5 | Day); // Update File time with the data log starting time
 80045a4:	4b16      	ldr	r3, [pc, #88]	; (8004600 <update_FATFS_time+0x64>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	3314      	adds	r3, #20
 80045aa:	025b      	lsls	r3, r3, #9
 80045ac:	b21a      	sxth	r2, r3
 80045ae:	4b15      	ldr	r3, [pc, #84]	; (8004604 <update_FATFS_time+0x68>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	015b      	lsls	r3, r3, #5
 80045b4:	b21b      	sxth	r3, r3
 80045b6:	4313      	orrs	r3, r2
 80045b8:	b21a      	sxth	r2, r3
 80045ba:	4b13      	ldr	r3, [pc, #76]	; (8004608 <update_FATFS_time+0x6c>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	b21b      	sxth	r3, r3
 80045c0:	4313      	orrs	r3, r2
 80045c2:	b21b      	sxth	r3, r3
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	4b11      	ldr	r3, [pc, #68]	; (800460c <update_FATFS_time+0x70>)
 80045c8:	809a      	strh	r2, [r3, #4]
	fno.ftime = (WORD) (Hour << 11 | Min << 5 | Sec / 2); // Extracting values from RTC registers
 80045ca:	4b11      	ldr	r3, [pc, #68]	; (8004610 <update_FATFS_time+0x74>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	02db      	lsls	r3, r3, #11
 80045d0:	b21a      	sxth	r2, r3
 80045d2:	4b10      	ldr	r3, [pc, #64]	; (8004614 <update_FATFS_time+0x78>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	015b      	lsls	r3, r3, #5
 80045d8:	b21b      	sxth	r3, r3
 80045da:	4313      	orrs	r3, r2
 80045dc:	b21a      	sxth	r2, r3
 80045de:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <update_FATFS_time+0x7c>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	b21b      	sxth	r3, r3
 80045e8:	4313      	orrs	r3, r2
 80045ea:	b21b      	sxth	r3, r3
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	4b07      	ldr	r3, [pc, #28]	; (800460c <update_FATFS_time+0x70>)
 80045f0:	80da      	strh	r2, [r3, #6]
	f_utime(FILE_NAME_STRING, &fno);     // Update RTC time on FATFS file header
 80045f2:	4906      	ldr	r1, [pc, #24]	; (800460c <update_FATFS_time+0x70>)
 80045f4:	4809      	ldr	r0, [pc, #36]	; (800461c <update_FATFS_time+0x80>)
 80045f6:	f010 fccc 	bl	8014f92 <f_utime>
}
 80045fa:	bf00      	nop
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20008f79 	.word	0x20008f79
 8004604:	20008f60 	.word	0x20008f60
 8004608:	20008f4e 	.word	0x20008f4e
 800460c:	20008c3c 	.word	0x20008c3c
 8004610:	20008c6a 	.word	0x20008c6a
 8004614:	20008c28 	.word	0x20008c28
 8004618:	20008c74 	.word	0x20008c74
 800461c:	20008c58 	.word	0x20008c58

08004620 <SD_Sensor_write>:

void SD_Sensor_write(void)         // Storing Sensor Buffer values on FATFS file
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
#ifdef Bottle_Device
	//ALL_LED_OFF();
#else
#endif

	res = f_write(&MyFile, &BSbuffer[w_flag], (8192 * 2), &BytesWritten2);
 8004624:	4b20      	ldr	r3, [pc, #128]	; (80046a8 <SD_Sensor_write+0x88>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	039b      	lsls	r3, r3, #14
 800462c:	4a1f      	ldr	r2, [pc, #124]	; (80046ac <SD_Sensor_write+0x8c>)
 800462e:	1899      	adds	r1, r3, r2
 8004630:	4b1f      	ldr	r3, [pc, #124]	; (80046b0 <SD_Sensor_write+0x90>)
 8004632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004636:	481f      	ldr	r0, [pc, #124]	; (80046b4 <SD_Sensor_write+0x94>)
 8004638:	f00f fe1d 	bl	8014276 <f_write>
 800463c:	4603      	mov	r3, r0
 800463e:	461a      	mov	r2, r3
 8004640:	4b1d      	ldr	r3, [pc, #116]	; (80046b8 <SD_Sensor_write+0x98>)
 8004642:	701a      	strb	r2, [r3, #0]
	if (res != FR_OK)   // Write the sensor Buffer content to .BIN file
 8004644:	4b1c      	ldr	r3, [pc, #112]	; (80046b8 <SD_Sensor_write+0x98>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <SD_Sensor_write+0x34>
			{
		AIM_Error_Handler(f_write_E);
 800464c:	2005      	movs	r0, #5
 800464e:	f000 ffe9 	bl	8005624 <AIM_Error_Handler>
 8004652:	e001      	b.n	8004658 <SD_Sensor_write+0x38>
	} else {
		GREEN_LED_OFF();               // Sensor write Completed
 8004654:	f7fd fad5 	bl	8001c02 <GREEN_LED_OFF>
	}
#ifdef Bottle_Device
	f_sync(&MyFile);
#else

	if (File_Sensor_write_issue == 0) {
 8004658:	4b18      	ldr	r3, [pc, #96]	; (80046bc <SD_Sensor_write+0x9c>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d120      	bne.n	80046a2 <SD_Sensor_write+0x82>

		if (SD_Write_Count == SD_cnt_limit) // After 50 SD card write, File Sync (176 write*20.45 sec = 60 minute
 8004660:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <SD_Sensor_write+0xa0>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	461a      	mov	r2, r3
 8004668:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <SD_Sensor_write+0xa4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d111      	bne.n	8004694 <SD_Sensor_write+0x74>
				{
			res = f_sync(&MyFile);
 8004670:	4810      	ldr	r0, [pc, #64]	; (80046b4 <SD_Sensor_write+0x94>)
 8004672:	f00f ffad 	bl	80145d0 <f_sync>
 8004676:	4603      	mov	r3, r0
 8004678:	461a      	mov	r2, r3
 800467a:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <SD_Sensor_write+0x98>)
 800467c:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {
 800467e:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <SD_Sensor_write+0x98>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <SD_Sensor_write+0x6c>
				AIM_Error_Handler(f_sync_E);
 8004686:	2004      	movs	r0, #4
 8004688:	f000 ffcc 	bl	8005624 <AIM_Error_Handler>
			}
			// Sync file without closing
			SD_Write_Count = 0;                       // Reset SD write counters
 800468c:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <SD_Sensor_write+0xa0>)
 800468e:	2200      	movs	r2, #0
 8004690:	701a      	strb	r2, [r3, #0]
		} else {
			SD_Write_Count++;                      // Increment SD write counter
		}
	}
#endif
}
 8004692:	e006      	b.n	80046a2 <SD_Sensor_write+0x82>
			SD_Write_Count++;                      // Increment SD write counter
 8004694:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <SD_Sensor_write+0xa0>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	b2db      	uxtb	r3, r3
 800469a:	3301      	adds	r3, #1
 800469c:	b2da      	uxtb	r2, r3
 800469e:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <SD_Sensor_write+0xa0>)
 80046a0:	701a      	strb	r2, [r3, #0]
}
 80046a2:	bf00      	nop
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20000010 	.word	0x20000010
 80046ac:	20000874 	.word	0x20000874
 80046b0:	20008c70 	.word	0x20008c70
 80046b4:	20008f7c 	.word	0x20008f7c
 80046b8:	20009202 	.word	0x20009202
 80046bc:	20008c34 	.word	0x20008c34
 80046c0:	200005ad 	.word	0x200005ad
 80046c4:	20008bda 	.word	0x20008bda

080046c8 <USB_MSC_Init_Start>:

void USB_MSC_Init_Start(void)                         // Initialize USB MSC mode
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
	USBD_Init(&USBD_Device, &MSC_Desc, 0);             // USB MSC initialization
 80046cc:	2200      	movs	r2, #0
 80046ce:	490a      	ldr	r1, [pc, #40]	; (80046f8 <USB_MSC_Init_Start+0x30>)
 80046d0:	480a      	ldr	r0, [pc, #40]	; (80046fc <USB_MSC_Init_Start+0x34>)
 80046d2:	f00c fb71 	bl	8010db8 <USBD_Init>
	USBD_RegisterClass(&USBD_Device, USBD_MSC_CLASS);  // USB class registration
 80046d6:	490a      	ldr	r1, [pc, #40]	; (8004700 <USB_MSC_Init_Start+0x38>)
 80046d8:	4808      	ldr	r0, [pc, #32]	; (80046fc <USB_MSC_Init_Start+0x34>)
 80046da:	f00c fbc7 	bl	8010e6c <USBD_RegisterClass>
	USBD_MSC_RegisterStorage(&USBD_Device, &USBD_DISK_fops); // Storage call backs
 80046de:	4909      	ldr	r1, [pc, #36]	; (8004704 <USB_MSC_Init_Start+0x3c>)
 80046e0:	4806      	ldr	r0, [pc, #24]	; (80046fc <USB_MSC_Init_Start+0x34>)
 80046e2:	f00b fa6d 	bl	800fbc0 <USBD_MSC_RegisterStorage>
	USBD_Start(&USBD_Device);                                // Start USB MSC
 80046e6:	4805      	ldr	r0, [pc, #20]	; (80046fc <USB_MSC_Init_Start+0x34>)
 80046e8:	f00c fbda 	bl	8010ea0 <USBD_Start>

	delay_us(1000000);
 80046ec:	4806      	ldr	r0, [pc, #24]	; (8004708 <USB_MSC_Init_Start+0x40>)
 80046ee:	f002 f8b1 	bl	8006854 <delay_us>

}
 80046f2:	bf00      	nop
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000018 	.word	0x20000018
 80046fc:	20008980 	.word	0x20008980
 8004700:	20000204 	.word	0x20000204
 8004704:	200000bc 	.word	0x200000bc
 8004708:	000f4240 	.word	0x000f4240

0800470c <USB_VCP_Init_Start>:

void USB_VCP_Init_Start(void) {
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
	USBD_Init(&USBD_Device, &VCP_Desc, 0);             // USB VCP initialization
 8004710:	2200      	movs	r2, #0
 8004712:	490a      	ldr	r1, [pc, #40]	; (800473c <USB_VCP_Init_Start+0x30>)
 8004714:	480a      	ldr	r0, [pc, #40]	; (8004740 <USB_VCP_Init_Start+0x34>)
 8004716:	f00c fb4f 	bl	8010db8 <USBD_Init>
	USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);  // USB class registration
 800471a:	490a      	ldr	r1, [pc, #40]	; (8004744 <USB_VCP_Init_Start+0x38>)
 800471c:	4808      	ldr	r0, [pc, #32]	; (8004740 <USB_VCP_Init_Start+0x34>)
 800471e:	f00c fba5 	bl	8010e6c <USBD_RegisterClass>
	USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops); // VCP CDC call backs
 8004722:	4909      	ldr	r1, [pc, #36]	; (8004748 <USB_VCP_Init_Start+0x3c>)
 8004724:	4806      	ldr	r0, [pc, #24]	; (8004740 <USB_VCP_Init_Start+0x34>)
 8004726:	f003 f905 	bl	8007934 <USBD_CDC_RegisterInterface>
	USBD_Start(&USBD_Device);                                 // Start USB VCP
 800472a:	4805      	ldr	r0, [pc, #20]	; (8004740 <USB_VCP_Init_Start+0x34>)
 800472c:	f00c fbb8 	bl	8010ea0 <USBD_Start>
	delay_us(1000000);
 8004730:	4806      	ldr	r0, [pc, #24]	; (800474c <USB_VCP_Init_Start+0x40>)
 8004732:	f002 f88f 	bl	8006854 <delay_us>
}
 8004736:	bf00      	nop
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20000034 	.word	0x20000034
 8004740:	20008980 	.word	0x20008980
 8004744:	200000e8 	.word	0x200000e8
 8004748:	200001f4 	.word	0x200001f4
 800474c:	000f4240 	.word	0x000f4240

08004750 <Read_RTC_Timestamp>:
			__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC)),
			2000 + __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC)));
}

void Read_RTC_Timestamp(void)       // Read RTC timestamp and store in variables
{
 8004750:	b598      	push	{r3, r4, r7, lr}
 8004752:	af00      	add	r7, sp, #0
// read RTC time in BCD format from registers and save in .BIN/.DEC format

	Hour = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8004754:	4853      	ldr	r0, [pc, #332]	; (80048a4 <Read_RTC_Timestamp+0x154>)
 8004756:	f7fe ff54 	bl	8003602 <LL_RTC_TIME_GetHour>
 800475a:	4603      	mov	r3, r0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	111b      	asrs	r3, r3, #4
 8004760:	b2db      	uxtb	r3, r3
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	b2db      	uxtb	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	0092      	lsls	r2, r2, #2
 800476c:	4413      	add	r3, r2
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	b2dc      	uxtb	r4, r3
 8004772:	484c      	ldr	r0, [pc, #304]	; (80048a4 <Read_RTC_Timestamp+0x154>)
 8004774:	f7fe ff45 	bl	8003602 <LL_RTC_TIME_GetHour>
 8004778:	4603      	mov	r3, r0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f003 030f 	and.w	r3, r3, #15
 8004780:	b2db      	uxtb	r3, r3
 8004782:	4423      	add	r3, r4
 8004784:	b2da      	uxtb	r2, r3
 8004786:	4b48      	ldr	r3, [pc, #288]	; (80048a8 <Read_RTC_Timestamp+0x158>)
 8004788:	701a      	strb	r2, [r3, #0]
	Min = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 800478a:	4846      	ldr	r0, [pc, #280]	; (80048a4 <Read_RTC_Timestamp+0x154>)
 800478c:	f7fe ff63 	bl	8003656 <LL_RTC_TIME_GetMinute>
 8004790:	4603      	mov	r3, r0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	111b      	asrs	r3, r3, #4
 8004796:	b2db      	uxtb	r3, r3
 8004798:	f003 030f 	and.w	r3, r3, #15
 800479c:	b2db      	uxtb	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	0092      	lsls	r2, r2, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	b2dc      	uxtb	r4, r3
 80047a8:	483e      	ldr	r0, [pc, #248]	; (80048a4 <Read_RTC_Timestamp+0x154>)
 80047aa:	f7fe ff54 	bl	8003656 <LL_RTC_TIME_GetMinute>
 80047ae:	4603      	mov	r3, r0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	4423      	add	r3, r4
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	4b3b      	ldr	r3, [pc, #236]	; (80048ac <Read_RTC_Timestamp+0x15c>)
 80047be:	701a      	strb	r2, [r3, #0]
	Sec = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80047c0:	4838      	ldr	r0, [pc, #224]	; (80048a4 <Read_RTC_Timestamp+0x154>)
 80047c2:	f7fe ff72 	bl	80036aa <LL_RTC_TIME_GetSecond>
 80047c6:	4603      	mov	r3, r0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	111b      	asrs	r3, r3, #4
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	461a      	mov	r2, r3
 80047d6:	0092      	lsls	r2, r2, #2
 80047d8:	4413      	add	r3, r2
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	b2dc      	uxtb	r4, r3
 80047de:	4831      	ldr	r0, [pc, #196]	; (80048a4 <Read_RTC_Timestamp+0x154>)
 80047e0:	f7fe ff63 	bl	80036aa <LL_RTC_TIME_GetSecond>
 80047e4:	4603      	mov	r3, r0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	f003 030f 	and.w	r3, r3, #15
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	4423      	add	r3, r4
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	4b2f      	ldr	r3, [pc, #188]	; (80048b0 <Read_RTC_Timestamp+0x160>)
 80047f4:	701a      	strb	r2, [r3, #0]

	Mon = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 80047f6:	482b      	ldr	r0, [pc, #172]	; (80048a4 <Read_RTC_Timestamp+0x154>)
 80047f8:	f7fe ffa9 	bl	800374e <LL_RTC_DATE_GetMonth>
 80047fc:	4603      	mov	r3, r0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	111b      	asrs	r3, r3, #4
 8004802:	b2db      	uxtb	r3, r3
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	b2db      	uxtb	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	0092      	lsls	r2, r2, #2
 800480e:	4413      	add	r3, r2
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	b2dc      	uxtb	r4, r3
 8004814:	4823      	ldr	r0, [pc, #140]	; (80048a4 <Read_RTC_Timestamp+0x154>)
 8004816:	f7fe ff9a 	bl	800374e <LL_RTC_DATE_GetMonth>
 800481a:	4603      	mov	r3, r0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	b2db      	uxtb	r3, r3
 8004824:	4423      	add	r3, r4
 8004826:	b2da      	uxtb	r2, r3
 8004828:	4b22      	ldr	r3, [pc, #136]	; (80048b4 <Read_RTC_Timestamp+0x164>)
 800482a:	701a      	strb	r2, [r3, #0]
	Day = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 800482c:	481d      	ldr	r0, [pc, #116]	; (80048a4 <Read_RTC_Timestamp+0x154>)
 800482e:	f7fe ffb8 	bl	80037a2 <LL_RTC_DATE_GetDay>
 8004832:	4603      	mov	r3, r0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	111b      	asrs	r3, r3, #4
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	b2db      	uxtb	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	0092      	lsls	r2, r2, #2
 8004844:	4413      	add	r3, r2
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	b2dc      	uxtb	r4, r3
 800484a:	4816      	ldr	r0, [pc, #88]	; (80048a4 <Read_RTC_Timestamp+0x154>)
 800484c:	f7fe ffa9 	bl	80037a2 <LL_RTC_DATE_GetDay>
 8004850:	4603      	mov	r3, r0
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	b2db      	uxtb	r3, r3
 800485a:	4423      	add	r3, r4
 800485c:	b2da      	uxtb	r2, r3
 800485e:	4b16      	ldr	r3, [pc, #88]	; (80048b8 <Read_RTC_Timestamp+0x168>)
 8004860:	701a      	strb	r2, [r3, #0]
	Year = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 8004862:	4810      	ldr	r0, [pc, #64]	; (80048a4 <Read_RTC_Timestamp+0x154>)
 8004864:	f7fe ff49 	bl	80036fa <LL_RTC_DATE_GetYear>
 8004868:	4603      	mov	r3, r0
 800486a:	b2db      	uxtb	r3, r3
 800486c:	111b      	asrs	r3, r3, #4
 800486e:	b2db      	uxtb	r3, r3
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	b2db      	uxtb	r3, r3
 8004876:	461a      	mov	r2, r3
 8004878:	0092      	lsls	r2, r2, #2
 800487a:	4413      	add	r3, r2
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	b2dc      	uxtb	r4, r3
 8004880:	4808      	ldr	r0, [pc, #32]	; (80048a4 <Read_RTC_Timestamp+0x154>)
 8004882:	f7fe ff3a 	bl	80036fa <LL_RTC_DATE_GetYear>
 8004886:	4603      	mov	r3, r0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	b2db      	uxtb	r3, r3
 8004890:	4423      	add	r3, r4
 8004892:	b2da      	uxtb	r2, r3
 8004894:	4b09      	ldr	r3, [pc, #36]	; (80048bc <Read_RTC_Timestamp+0x16c>)
 8004896:	701a      	strb	r2, [r3, #0]

// Releasing RTC registers (Time and Date registers); necessary for RTC read/write operation
	(void) RTC->DR;
 8004898:	4b02      	ldr	r3, [pc, #8]	; (80048a4 <Read_RTC_Timestamp+0x154>)
 800489a:	685b      	ldr	r3, [r3, #4]
	(void) RTC->TR;
 800489c:	4b01      	ldr	r3, [pc, #4]	; (80048a4 <Read_RTC_Timestamp+0x154>)
 800489e:	681b      	ldr	r3, [r3, #0]
}
 80048a0:	bf00      	nop
 80048a2:	bd98      	pop	{r3, r4, r7, pc}
 80048a4:	40002800 	.word	0x40002800
 80048a8:	20008c6a 	.word	0x20008c6a
 80048ac:	20008c28 	.word	0x20008c28
 80048b0:	20008c74 	.word	0x20008c74
 80048b4:	20008f60 	.word	0x20008f60
 80048b8:	20008f4e 	.word	0x20008f4e
 80048bc:	20008f79 	.word	0x20008f79

080048c0 <Enter_RTC_InitMode>:

void Enter_RTC_InitMode(void) // Function needed before writing on RTC registers
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
	RTC->ISR = RTC_INIT_MASK;                                // Enter Init Mode
 80048c4:	4b07      	ldr	r3, [pc, #28]	; (80048e4 <Enter_RTC_InitMode+0x24>)
 80048c6:	f04f 32ff 	mov.w	r2, #4294967295
 80048ca:	60da      	str	r2, [r3, #12]
	while (((RTC->ISR) & RTC_ISR_INITF) != (RTC_ISR_INITF))
 80048cc:	bf00      	nop
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <Enter_RTC_InitMode+0x24>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d6:	2b40      	cmp	r3, #64	; 0x40
 80048d8:	d1f9      	bne.n	80048ce <Enter_RTC_InitMode+0xe>
		; // Wait to enter Init mode
}
 80048da:	bf00      	nop
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	40002800 	.word	0x40002800

080048e8 <Exit_RTC_InitMode>:

void Exit_RTC_InitMode(void)   // Function needed after writing on RTC registers
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
	RTC->ISR = (uint32_t) ~RTC_ISR_INIT; // Disable RTC init mode
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <Exit_RTC_InitMode+0x34>)
 80048ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048f2:	60da      	str	r2, [r3, #12]

	// Wait for synchro. Needed only if Shadow registers is enabled
	WRITE_REG(RTC->ISR,
 80048f4:	4a09      	ldr	r2, [pc, #36]	; (800491c <Exit_RTC_InitMode+0x34>)
 80048f6:	4b09      	ldr	r3, [pc, #36]	; (800491c <Exit_RTC_InitMode+0x34>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fe:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 8004902:	60d3      	str	r3, [r2, #12]
			(~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTC->ISR & RTC_ISR_INIT))); // Clear RTC sync flag
	while (((RTC->ISR) & RTC_ISR_RSF) != (RTC_ISR_RSF))
 8004904:	bf00      	nop
 8004906:	4b05      	ldr	r3, [pc, #20]	; (800491c <Exit_RTC_InitMode+0x34>)
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b20      	cmp	r3, #32
 8004910:	d1f9      	bne.n	8004906 <Exit_RTC_InitMode+0x1e>
		;  // Wait the registers to be synchronised
}
 8004912:	bf00      	nop
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	40002800 	.word	0x40002800

08004920 <MX_RTC_Init>:

void MX_RTC_Init(void)                // RTC initialization after Power on reset
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
	LL_RTC_InitTypeDef RTC_InitStruct;

	LL_RCC_ForceBackupDomainReset();            // Reset Backup domain registers
 8004926:	f7fe fd77 	bl	8003418 <LL_RCC_ForceBackupDomainReset>
	LL_RCC_ReleaseBackupDomainReset();
 800492a:	f7fe fd87 	bl	800343c <LL_RCC_ReleaseBackupDomainReset>
	LL_RCC_LSE_Enable();                    // Configure LSE as RTC source clock
 800492e:	f7fe fd25 	bl	800337c <LL_RCC_LSE_Enable>
	while (LL_RCC_LSE_IsReady() != 1)
 8004932:	bf00      	nop
 8004934:	f7fe fd34 	bl	80033a0 <LL_RCC_LSE_IsReady>
 8004938:	4603      	mov	r3, r0
 800493a:	2b01      	cmp	r3, #1
 800493c:	d1fa      	bne.n	8004934 <MX_RTC_Init+0x14>
		;
	LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
 800493e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004942:	f7fe fd41 	bl	80033c8 <LL_RCC_SetRTCClockSource>
	LL_RCC_EnableRTC();                           // RTC clock
 8004946:	f7fe fd55 	bl	80033f4 <LL_RCC_EnableRTC>

	RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 800494a:	2300      	movs	r3, #0
 800494c:	607b      	str	r3, [r7, #4]
	LL_RTC_Init(RTC, &RTC_InitStruct); // Initialize RTC with default configurations
 800494e:	1d3b      	adds	r3, r7, #4
 8004950:	4619      	mov	r1, r3
 8004952:	481a      	ldr	r0, [pc, #104]	; (80049bc <MX_RTC_Init+0x9c>)
 8004954:	f009 faee 	bl	800df34 <LL_RTC_Init>

	LL_RTC_DisableWriteProtection(RTC);
 8004958:	4818      	ldr	r0, [pc, #96]	; (80049bc <MX_RTC_Init+0x9c>)
 800495a:	f7fe fe42 	bl	80035e2 <LL_RTC_DisableWriteProtection>
	Enter_RTC_InitMode();     // Enter RTC initialization mode to set parameters
 800495e:	f7ff ffaf 	bl	80048c0 <Enter_RTC_InitMode>

	// Calender set up
	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_A,
 8004962:	4916      	ldr	r1, [pc, #88]	; (80049bc <MX_RTC_Init+0x9c>)
 8004964:	4b15      	ldr	r3, [pc, #84]	; (80049bc <MX_RTC_Init+0x9c>)
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800496c:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8004970:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	fa92 f2a2 	rbit	r2, r2
 8004978:	613a      	str	r2, [r7, #16]
  return(result);
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	fab2 f282 	clz	r2, r2
 8004980:	4610      	mov	r0, r2
 8004982:	227f      	movs	r2, #127	; 0x7f
 8004984:	4082      	lsls	r2, r0
 8004986:	4313      	orrs	r3, r2
 8004988:	610b      	str	r3, [r1, #16]
			0x7F << RTC_POSITION_PRER_PREDIV_A);  // ASYNC prediv= 0x7F
	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_S, 0xFF);         // SYNC prediv= 0xFF
 800498a:	4a0c      	ldr	r2, [pc, #48]	; (80049bc <MX_RTC_Init+0x9c>)
 800498c:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <MX_RTC_Init+0x9c>)
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004994:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004998:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 800499c:	6113      	str	r3, [r2, #16]

	Exit_RTC_InitMode();
 800499e:	f7ff ffa3 	bl	80048e8 <Exit_RTC_InitMode>
	LL_RTC_EnableWriteProtection(RTC);
 80049a2:	4806      	ldr	r0, [pc, #24]	; (80049bc <MX_RTC_Init+0x9c>)
 80049a4:	f7fe fe10 	bl	80035c8 <LL_RTC_EnableWriteProtection>

	RTC_BAK_SetRegister(RTC, 0x01, RTC_BKP_DATE_TIME_UPDTATED); // A dummy value is necessary to store to indicate RTC is configured
 80049a8:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80049ac:	2101      	movs	r1, #1
 80049ae:	4803      	ldr	r0, [pc, #12]	; (80049bc <MX_RTC_Init+0x9c>)
 80049b0:	f000 f84a 	bl	8004a48 <RTC_BAK_SetRegister>
}
 80049b4:	bf00      	nop
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40002800 	.word	0x40002800

080049c0 <Set_RTC_Calendar>:

void Set_RTC_Calendar(uint8_t Year, uint8_t Month, uint8_t Day, uint8_t Hour,
		uint8_t Min, uint8_t Sec) {
 80049c0:	b590      	push	{r4, r7, lr}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4604      	mov	r4, r0
 80049c8:	4608      	mov	r0, r1
 80049ca:	4611      	mov	r1, r2
 80049cc:	461a      	mov	r2, r3
 80049ce:	4623      	mov	r3, r4
 80049d0:	71fb      	strb	r3, [r7, #7]
 80049d2:	4603      	mov	r3, r0
 80049d4:	71bb      	strb	r3, [r7, #6]
 80049d6:	460b      	mov	r3, r1
 80049d8:	717b      	strb	r3, [r7, #5]
 80049da:	4613      	mov	r3, r2
 80049dc:	713b      	strb	r3, [r7, #4]
	LL_RTC_TimeTypeDef RTC_TimeStruct;
	LL_RTC_DateTypeDef RTC_DateStruct;

	// Enter RTC initialization mode to set parameters
	LL_RTC_DisableWriteProtection(RTC);
 80049de:	4819      	ldr	r0, [pc, #100]	; (8004a44 <Set_RTC_Calendar+0x84>)
 80049e0:	f7fe fdff 	bl	80035e2 <LL_RTC_DisableWriteProtection>
	Enter_RTC_InitMode();
 80049e4:	f7ff ff6c 	bl	80048c0 <Enter_RTC_InitMode>

	RTC_TimeStruct.Hours = Hour;
 80049e8:	793b      	ldrb	r3, [r7, #4]
 80049ea:	753b      	strb	r3, [r7, #20]
	RTC_TimeStruct.Minutes = Min;
 80049ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049f0:	757b      	strb	r3, [r7, #21]
	RTC_TimeStruct.Seconds = Sec;
 80049f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80049f6:	75bb      	strb	r3, [r7, #22]
	LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 80049f8:	f107 0310 	add.w	r3, r7, #16
 80049fc:	461a      	mov	r2, r3
 80049fe:	2100      	movs	r1, #0
 8004a00:	4810      	ldr	r0, [pc, #64]	; (8004a44 <Set_RTC_Calendar+0x84>)
 8004a02:	f009 fac7 	bl	800df94 <LL_RTC_TIME_Init>

	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;          // Default value
 8004a06:	2301      	movs	r3, #1
 8004a08:	733b      	strb	r3, [r7, #12]
	RTC_DateStruct.Month = Month;
 8004a0a:	79bb      	ldrb	r3, [r7, #6]
 8004a0c:	737b      	strb	r3, [r7, #13]
	RTC_DateStruct.Year = Year;
 8004a0e:	79fb      	ldrb	r3, [r7, #7]
 8004a10:	73fb      	strb	r3, [r7, #15]
	RTC_DateStruct.Day = Day;
 8004a12:	797b      	ldrb	r3, [r7, #5]
 8004a14:	73bb      	strb	r3, [r7, #14]
	LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8004a16:	f107 030c 	add.w	r3, r7, #12
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	4809      	ldr	r0, [pc, #36]	; (8004a44 <Set_RTC_Calendar+0x84>)
 8004a20:	f009 fb60 	bl	800e0e4 <LL_RTC_DATE_Init>

	Exit_RTC_InitMode();
 8004a24:	f7ff ff60 	bl	80048e8 <Exit_RTC_InitMode>
	LL_RTC_EnableWriteProtection(RTC);
 8004a28:	4806      	ldr	r0, [pc, #24]	; (8004a44 <Set_RTC_Calendar+0x84>)
 8004a2a:	f7fe fdcd 	bl	80035c8 <LL_RTC_EnableWriteProtection>
	RTC_BAK_SetRegister(RTC, 0x01, RTC_BKP_DATE_TIME_UPDTATED); // A dummy value is necessary to store to indicate RTC is configured
 8004a2e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8004a32:	2101      	movs	r1, #1
 8004a34:	4803      	ldr	r0, [pc, #12]	; (8004a44 <Set_RTC_Calendar+0x84>)
 8004a36:	f000 f807 	bl	8004a48 <RTC_BAK_SetRegister>
}
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd90      	pop	{r4, r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40002800 	.word	0x40002800

08004a48 <RTC_BAK_SetRegister>:

// Valid register value indicates RTC is enabled and running
void RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister,
		uint32_t Data) {
 8004a48:	b490      	push	{r4, r7}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
	register uint32_t tmp = 0U;

	tmp = (uint32_t) (&(RTCx->BKP0R));
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	3350      	adds	r3, #80	; 0x50
 8004a58:	461c      	mov	r4, r3
	tmp += (BackupRegister * 4U);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	441c      	add	r4, r3

	/* Write the specified register */
	*(__IO uint32_t *) tmp = (uint32_t) Data;
 8004a60:	4622      	mov	r2, r4
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6013      	str	r3, [r2, #0]
}
 8004a66:	bf00      	nop
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc90      	pop	{r4, r7}
 8004a6e:	4770      	bx	lr

08004a70 <RTC_BAK_GetRegister>:

// Valid register value indicates RTC is enabled and running
uint32_t RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister) {
 8004a70:	b490      	push	{r4, r7}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
	register uint32_t tmp = 0U;

	tmp = (uint32_t) (&(RTCx->BKP0R));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	3350      	adds	r3, #80	; 0x50
 8004a7e:	461c      	mov	r4, r3
	tmp += (BackupRegister * 4U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	441c      	add	r4, r3

	/* Read the specified register */
	return (*(__IO uint32_t *) tmp);
 8004a86:	4623      	mov	r3, r4
 8004a88:	681b      	ldr	r3, [r3, #0]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc90      	pop	{r4, r7}
 8004a92:	4770      	bx	lr

08004a94 <USB_PA9_EXTI_conf>:
	LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_10);    // Enable PA10 pin EXTI interrupt
	LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_10); // Interrupt configured for falling edge
}

void USB_PA9_EXTI_conf(void) // PA9 EXTI pin interrupt configuration for USB connectivity Sense
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
	NVIC_EnableIRQ(EXTI9_5_IRQn); // Enabling External GPIO pin interrupt (EXTI9-5) for USB connectivity PA10 Pin
 8004a98:	2017      	movs	r0, #23
 8004a9a:	f7fe fa0d 	bl	8002eb8 <NVIC_EnableIRQ>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG); // Enable Sysconfig clock to enable EXTI pin interrupts
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	f7fe fd1c 	bl	80034dc <LL_APB2_GRP1_EnableClock>
	LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE9); // Set PA9 pin EXTI interrupt in EXTI9-5 line
 8004aa4:	4906      	ldr	r1, [pc, #24]	; (8004ac0 <USB_PA9_EXTI_conf+0x2c>)
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	f7fe fd30 	bl	800350c <LL_SYSCFG_SetEXTISource>
	LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_9);      // Enable PA9 pin EXTI interrupt
 8004aac:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004ab0:	f7fe fc20 	bl	80032f4 <LL_EXTI_EnableIT_0_31>
	LL_EXTI_EnableRisingTrig_0_31(LL_EXTI_LINE_9); // Interrupt configured for Rising edge
 8004ab4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004ab8:	f7fe fc2e 	bl	8003318 <LL_EXTI_EnableRisingTrig_0_31>
}
 8004abc:	bf00      	nop
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	00f00002 	.word	0x00f00002

08004ac4 <P_ADC_Sensor_GPIO_Init>:

//Toe: ADC1_Ch3_PC2=ADC1_Flex1  Heel: ADC2_Ch4_PC3=ADC2_Flex2
void P_ADC_Sensor_GPIO_Init(void) {
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8004ac8:	2004      	movs	r0, #4
 8004aca:	f7fe fcc9 	bl	8003460 <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_2, LL_GPIO_MODE_ANALOG);
 8004ace:	2203      	movs	r2, #3
 8004ad0:	2104      	movs	r1, #4
 8004ad2:	4813      	ldr	r0, [pc, #76]	; (8004b20 <P_ADC_Sensor_GPIO_Init+0x5c>)
 8004ad4:	f7fe ff7e 	bl	80039d4 <LL_GPIO_SetPinMode>
	LL_GPIO_EnablePinAnalogControl(GPIOC, LL_GPIO_PIN_2);
 8004ad8:	2104      	movs	r1, #4
 8004ada:	4811      	ldr	r0, [pc, #68]	; (8004b20 <P_ADC_Sensor_GPIO_Init+0x5c>)
 8004adc:	f7ff f846 	bl	8003b6c <LL_GPIO_EnablePinAnalogControl>

	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_3, LL_GPIO_MODE_ANALOG);
 8004ae0:	2203      	movs	r2, #3
 8004ae2:	2108      	movs	r1, #8
 8004ae4:	480e      	ldr	r0, [pc, #56]	; (8004b20 <P_ADC_Sensor_GPIO_Init+0x5c>)
 8004ae6:	f7fe ff75 	bl	80039d4 <LL_GPIO_SetPinMode>
	LL_GPIO_EnablePinAnalogControl(GPIOC, LL_GPIO_PIN_3);
 8004aea:	2108      	movs	r1, #8
 8004aec:	480c      	ldr	r0, [pc, #48]	; (8004b20 <P_ADC_Sensor_GPIO_Init+0x5c>)
 8004aee:	f7ff f83d 	bl	8003b6c <LL_GPIO_EnablePinAnalogControl>

// LoadCell1

	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_1, LL_GPIO_MODE_ANALOG);
 8004af2:	2203      	movs	r2, #3
 8004af4:	2102      	movs	r1, #2
 8004af6:	480a      	ldr	r0, [pc, #40]	; (8004b20 <P_ADC_Sensor_GPIO_Init+0x5c>)
 8004af8:	f7fe ff6c 	bl	80039d4 <LL_GPIO_SetPinMode>
	LL_GPIO_EnablePinAnalogControl(GPIOC, LL_GPIO_PIN_1);
 8004afc:	2102      	movs	r1, #2
 8004afe:	4808      	ldr	r0, [pc, #32]	; (8004b20 <P_ADC_Sensor_GPIO_Init+0x5c>)
 8004b00:	f7ff f834 	bl	8003b6c <LL_GPIO_EnablePinAnalogControl>

	// LoadCell2

	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_0, LL_GPIO_MODE_ANALOG);
 8004b04:	2203      	movs	r2, #3
 8004b06:	2101      	movs	r1, #1
 8004b08:	4805      	ldr	r0, [pc, #20]	; (8004b20 <P_ADC_Sensor_GPIO_Init+0x5c>)
 8004b0a:	f7fe ff63 	bl	80039d4 <LL_GPIO_SetPinMode>
	LL_GPIO_EnablePinAnalogControl(GPIOC, LL_GPIO_PIN_0);
 8004b0e:	2101      	movs	r1, #1
 8004b10:	4803      	ldr	r0, [pc, #12]	; (8004b20 <P_ADC_Sensor_GPIO_Init+0x5c>)
 8004b12:	f7ff f82b 	bl	8003b6c <LL_GPIO_EnablePinAnalogControl>

	P_ADC1_conf_strain();
 8004b16:	f000 f805 	bl	8004b24 <P_ADC1_conf_strain>

}
 8004b1a:	bf00      	nop
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	48000800 	.word	0x48000800

08004b24 <P_ADC1_conf_strain>:
	Activate_ADC();
}

//Toe: ADC1_Ch3_PC2=ADC1_Flex1  Heel: ADC2_Ch4_PC3=ADC2_Flex2

void P_ADC1_conf_strain(void) {
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0

	LL_AHB2_GRP1_ForceReset(LL_AHB2_GRP1_PERIPH_ADC);
 8004b28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004b2c:	f7fe fcb0 	bl	8003490 <LL_AHB2_GRP1_ForceReset>
	LL_AHB2_GRP1_ReleaseReset(LL_AHB2_GRP1_PERIPH_ADC);
 8004b30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004b34:	f7fe fcbe 	bl	80034b4 <LL_AHB2_GRP1_ReleaseReset>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8004b38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004b3c:	f7fe fc90 	bl	8003460 <LL_AHB2_GRP1_EnableClock>

	//ADC1
	LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(ADC1),
 8004b40:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8004b44:	483f      	ldr	r0, [pc, #252]	; (8004c44 <P_ADC1_conf_strain+0x120>)
 8004b46:	f7fe fa29 	bl	8002f9c <LL_ADC_SetCommonClock>
			LL_ADC_CLOCK_SYNC_PCLK_DIV2);
	LL_ADC_SetLowPowerMode(ADC1, LL_ADC_LP_AUTOWAIT);
 8004b4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b4e:	483e      	ldr	r0, [pc, #248]	; (8004c48 <P_ADC1_conf_strain+0x124>)
 8004b50:	f7fe fa37 	bl	8002fc2 <LL_ADC_SetLowPowerMode>
	LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_SOFTWARE);
 8004b54:	2100      	movs	r1, #0
 8004b56:	483c      	ldr	r0, [pc, #240]	; (8004c48 <P_ADC1_conf_strain+0x124>)
 8004b58:	f7fe fa46 	bl	8002fe8 <LL_ADC_REG_SetTriggerSource>
	LL_ADC_REG_SetContinuousMode(ADC1, LL_ADC_REG_CONV_SINGLE);
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	483a      	ldr	r0, [pc, #232]	; (8004c48 <P_ADC1_conf_strain+0x124>)
 8004b60:	f7fe fa9d 	bl	800309e <LL_ADC_REG_SetContinuousMode>
	LL_ADC_REG_SetOverrun(ADC1, LL_ADC_REG_OVR_DATA_OVERWRITTEN);
 8004b64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b68:	4837      	ldr	r0, [pc, #220]	; (8004c48 <P_ADC1_conf_strain+0x124>)
 8004b6a:	f7fe faab 	bl	80030c4 <LL_ADC_REG_SetOverrun>

	LL_ADC_REG_SetSequencerLength(ADC1, LL_ADC_REG_SEQ_SCAN_DISABLE);
 8004b6e:	2100      	movs	r1, #0
 8004b70:	4835      	ldr	r0, [pc, #212]	; (8004c48 <P_ADC1_conf_strain+0x124>)
 8004b72:	f7fe fa4c 	bl	800300e <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3); // FSR1=PC2=Ch3=ADC1
 8004b76:	4a35      	ldr	r2, [pc, #212]	; (8004c4c <P_ADC1_conf_strain+0x128>)
 8004b78:	2106      	movs	r1, #6
 8004b7a:	4833      	ldr	r0, [pc, #204]	; (8004c48 <P_ADC1_conf_strain+0x124>)
 8004b7c:	f7fe fa5a 	bl	8003034 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3,
 8004b80:	2207      	movs	r2, #7
 8004b82:	4932      	ldr	r1, [pc, #200]	; (8004c4c <P_ADC1_conf_strain+0x128>)
 8004b84:	4830      	ldr	r0, [pc, #192]	; (8004c48 <P_ADC1_conf_strain+0x124>)
 8004b86:	f7fe fab0 	bl	80030ea <LL_ADC_SetChannelSamplingTime>
			LL_ADC_SAMPLINGTIME_640CYCLES_5);

	//ADC2

	LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(ADC2),
 8004b8a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8004b8e:	482d      	ldr	r0, [pc, #180]	; (8004c44 <P_ADC1_conf_strain+0x120>)
 8004b90:	f7fe fa04 	bl	8002f9c <LL_ADC_SetCommonClock>
			LL_ADC_CLOCK_SYNC_PCLK_DIV2);
	LL_ADC_SetLowPowerMode(ADC2, LL_ADC_LP_AUTOWAIT);
 8004b94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b98:	482d      	ldr	r0, [pc, #180]	; (8004c50 <P_ADC1_conf_strain+0x12c>)
 8004b9a:	f7fe fa12 	bl	8002fc2 <LL_ADC_SetLowPowerMode>
	LL_ADC_REG_SetTriggerSource(ADC2, LL_ADC_REG_TRIG_SOFTWARE);
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	482b      	ldr	r0, [pc, #172]	; (8004c50 <P_ADC1_conf_strain+0x12c>)
 8004ba2:	f7fe fa21 	bl	8002fe8 <LL_ADC_REG_SetTriggerSource>
	LL_ADC_REG_SetContinuousMode(ADC2, LL_ADC_REG_CONV_SINGLE);
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	4829      	ldr	r0, [pc, #164]	; (8004c50 <P_ADC1_conf_strain+0x12c>)
 8004baa:	f7fe fa78 	bl	800309e <LL_ADC_REG_SetContinuousMode>
	LL_ADC_REG_SetOverrun(ADC2, LL_ADC_REG_OVR_DATA_OVERWRITTEN);
 8004bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004bb2:	4827      	ldr	r0, [pc, #156]	; (8004c50 <P_ADC1_conf_strain+0x12c>)
 8004bb4:	f7fe fa86 	bl	80030c4 <LL_ADC_REG_SetOverrun>

	LL_ADC_REG_SetSequencerLength(ADC2, LL_ADC_REG_SEQ_SCAN_DISABLE);
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4825      	ldr	r0, [pc, #148]	; (8004c50 <P_ADC1_conf_strain+0x12c>)
 8004bbc:	f7fe fa27 	bl	800300e <LL_ADC_REG_SetSequencerLength>
	LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8004bc0:	4a24      	ldr	r2, [pc, #144]	; (8004c54 <P_ADC1_conf_strain+0x130>)
 8004bc2:	2106      	movs	r1, #6
 8004bc4:	4822      	ldr	r0, [pc, #136]	; (8004c50 <P_ADC1_conf_strain+0x12c>)
 8004bc6:	f7fe fa35 	bl	8003034 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4,
 8004bca:	2207      	movs	r2, #7
 8004bcc:	4921      	ldr	r1, [pc, #132]	; (8004c54 <P_ADC1_conf_strain+0x130>)
 8004bce:	4820      	ldr	r0, [pc, #128]	; (8004c50 <P_ADC1_conf_strain+0x12c>)
 8004bd0:	f7fe fa8b 	bl	80030ea <LL_ADC_SetChannelSamplingTime>
			LL_ADC_SAMPLINGTIME_640CYCLES_5); // FSR2=PC3=Ch4=ADC2

	//ADC3

	LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(ADC3),
 8004bd4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8004bd8:	481a      	ldr	r0, [pc, #104]	; (8004c44 <P_ADC1_conf_strain+0x120>)
 8004bda:	f7fe f9df 	bl	8002f9c <LL_ADC_SetCommonClock>
			LL_ADC_CLOCK_SYNC_PCLK_DIV2);
	LL_ADC_SetLowPowerMode(ADC3, LL_ADC_LP_AUTOWAIT);
 8004bde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004be2:	481d      	ldr	r0, [pc, #116]	; (8004c58 <P_ADC1_conf_strain+0x134>)
 8004be4:	f7fe f9ed 	bl	8002fc2 <LL_ADC_SetLowPowerMode>
	LL_ADC_REG_SetTriggerSource(ADC3, LL_ADC_REG_TRIG_SOFTWARE);
 8004be8:	2100      	movs	r1, #0
 8004bea:	481b      	ldr	r0, [pc, #108]	; (8004c58 <P_ADC1_conf_strain+0x134>)
 8004bec:	f7fe f9fc 	bl	8002fe8 <LL_ADC_REG_SetTriggerSource>
	LL_ADC_REG_SetContinuousMode(ADC3, LL_ADC_REG_CONV_SINGLE);
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4819      	ldr	r0, [pc, #100]	; (8004c58 <P_ADC1_conf_strain+0x134>)
 8004bf4:	f7fe fa53 	bl	800309e <LL_ADC_REG_SetContinuousMode>
	LL_ADC_REG_SetOverrun(ADC3, LL_ADC_REG_OVR_DATA_OVERWRITTEN);
 8004bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004bfc:	4816      	ldr	r0, [pc, #88]	; (8004c58 <P_ADC1_conf_strain+0x134>)
 8004bfe:	f7fe fa61 	bl	80030c4 <LL_ADC_REG_SetOverrun>

	LL_ADC_REG_SetSequencerLength(ADC3, LL_ADC_REG_SEQ_SCAN_DISABLE);
 8004c02:	2100      	movs	r1, #0
 8004c04:	4814      	ldr	r0, [pc, #80]	; (8004c58 <P_ADC1_conf_strain+0x134>)
 8004c06:	f7fe fa02 	bl	800300e <LL_ADC_REG_SetSequencerLength>

	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8004c0a:	4a14      	ldr	r2, [pc, #80]	; (8004c5c <P_ADC1_conf_strain+0x138>)
 8004c0c:	2106      	movs	r1, #6
 8004c0e:	4812      	ldr	r0, [pc, #72]	; (8004c58 <P_ADC1_conf_strain+0x134>)
 8004c10:	f7fe fa10 	bl	8003034 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_2,
 8004c14:	2207      	movs	r2, #7
 8004c16:	4911      	ldr	r1, [pc, #68]	; (8004c5c <P_ADC1_conf_strain+0x138>)
 8004c18:	480f      	ldr	r0, [pc, #60]	; (8004c58 <P_ADC1_conf_strain+0x134>)
 8004c1a:	f7fe fa66 	bl	80030ea <LL_ADC_SetChannelSamplingTime>
			LL_ADC_SAMPLINGTIME_640CYCLES_5); // Load1=PC1=Ch2

	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8004c1e:	4a10      	ldr	r2, [pc, #64]	; (8004c60 <P_ADC1_conf_strain+0x13c>)
 8004c20:	2106      	movs	r1, #6
 8004c22:	480d      	ldr	r0, [pc, #52]	; (8004c58 <P_ADC1_conf_strain+0x134>)
 8004c24:	f7fe fa06 	bl	8003034 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_1,
 8004c28:	2207      	movs	r2, #7
 8004c2a:	490d      	ldr	r1, [pc, #52]	; (8004c60 <P_ADC1_conf_strain+0x13c>)
 8004c2c:	480a      	ldr	r0, [pc, #40]	; (8004c58 <P_ADC1_conf_strain+0x134>)
 8004c2e:	f7fe fa5c 	bl	80030ea <LL_ADC_SetChannelSamplingTime>
			LL_ADC_SAMPLINGTIME_640CYCLES_5); // Load2=PC0=Ch1

	P_Activate_ADC3();
 8004c32:	f000 f817 	bl	8004c64 <P_Activate_ADC3>

	P_Activate_ADC2();
 8004c36:	f000 f891 	bl	8004d5c <P_Activate_ADC2>

	P_Activate_ADC1();
 8004c3a:	f000 f90b 	bl	8004e54 <P_Activate_ADC1>
}
 8004c3e:	bf00      	nop
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	50040300 	.word	0x50040300
 8004c48:	50040000 	.word	0x50040000
 8004c4c:	0c900008 	.word	0x0c900008
 8004c50:	50040100 	.word	0x50040100
 8004c54:	10c00010 	.word	0x10c00010
 8004c58:	50040200 	.word	0x50040200
 8004c5c:	08600004 	.word	0x08600004
 8004c60:	04300002 	.word	0x04300002

08004c64 <P_Activate_ADC3>:
			&& (ADC_Error == 0)) {
		Wait_for_ADC_TimeOut_();
	}
}

void P_Activate_ADC3(void) {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
	__IO uint32_t wait_loop_index = 0;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	607b      	str	r3, [r7, #4]
	LL_ADC_DisableDeepPowerDown(ADC3);
 8004c6e:	4835      	ldr	r0, [pc, #212]	; (8004d44 <P_Activate_ADC3+0xe0>)
 8004c70:	f7fe fa84 	bl	800317c <LL_ADC_DisableDeepPowerDown>
	LL_ADC_EnableInternalRegulator(ADC3);      // Enable internal ADC regulators
 8004c74:	4833      	ldr	r0, [pc, #204]	; (8004d44 <P_Activate_ADC3+0xe0>)
 8004c76:	f7fe fa93 	bl	80031a0 <LL_ADC_EnableInternalRegulator>

	wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US
			* (SystemCoreClock / 100000) / 10);
 8004c7a:	4b33      	ldr	r3, [pc, #204]	; (8004d48 <P_Activate_ADC3+0xe4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	4a32      	ldr	r2, [pc, #200]	; (8004d4c <P_Activate_ADC3+0xe8>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	09da      	lsrs	r2, r3, #7
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	461a      	mov	r2, r3
 8004c92:	4b2f      	ldr	r3, [pc, #188]	; (8004d50 <P_Activate_ADC3+0xec>)
 8004c94:	fba3 2302 	umull	r2, r3, r3, r2
 8004c98:	08db      	lsrs	r3, r3, #3
	wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US
 8004c9a:	607b      	str	r3, [r7, #4]
	while (wait_loop_index != 0) {
 8004c9c:	e002      	b.n	8004ca4 <P_Activate_ADC3+0x40>
		wait_loop_index--;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	607b      	str	r3, [r7, #4]
	while (wait_loop_index != 0) {
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f9      	bne.n	8004c9e <P_Activate_ADC3+0x3a>
	}

	LL_ADC_StartCalibration(ADC3, LL_ADC_SINGLE_ENDED); // ADC calibration single ended
 8004caa:	217f      	movs	r1, #127	; 0x7f
 8004cac:	4825      	ldr	r0, [pc, #148]	; (8004d44 <P_Activate_ADC3+0xe0>)
 8004cae:	f7fe fa9f 	bl	80031f0 <LL_ADC_StartCalibration>
	ADC_TimeOut_Count = 0;
 8004cb2:	4b28      	ldr	r3, [pc, #160]	; (8004d54 <P_Activate_ADC3+0xf0>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
	ADC_Error = 0;
 8004cb8:	4b27      	ldr	r3, [pc, #156]	; (8004d58 <P_Activate_ADC3+0xf4>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	701a      	strb	r2, [r3, #0]
	while ((LL_ADC_IsCalibrationOnGoing(ADC3) == 0) && !Error_preceding
 8004cbe:	e001      	b.n	8004cc4 <P_Activate_ADC3+0x60>
			&& (ADC_Error == 0)) {
		Wait_for_ADC_TimeOut_();
 8004cc0:	f000 f970 	bl	8004fa4 <Wait_for_ADC_TimeOut_>
	while ((LL_ADC_IsCalibrationOnGoing(ADC3) == 0) && !Error_preceding
 8004cc4:	481f      	ldr	r0, [pc, #124]	; (8004d44 <P_Activate_ADC3+0xe0>)
 8004cc6:	f7fe faac 	bl	8003222 <LL_ADC_IsCalibrationOnGoing>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10c      	bne.n	8004cea <P_Activate_ADC3+0x86>
 8004cd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cd8:	f7fe ff59 	bl	8003b8e <LL_GPIO_IsInputPinSet>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d103      	bne.n	8004cea <P_Activate_ADC3+0x86>
			&& (ADC_Error == 0)) {
 8004ce2:	4b1d      	ldr	r3, [pc, #116]	; (8004d58 <P_Activate_ADC3+0xf4>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0ea      	beq.n	8004cc0 <P_Activate_ADC3+0x5c>
	}

	wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES; // ADC Delay calculations
 8004cea:	2380      	movs	r3, #128	; 0x80
 8004cec:	607b      	str	r3, [r7, #4]
	while (wait_loop_index != 0) {
 8004cee:	e002      	b.n	8004cf6 <P_Activate_ADC3+0x92>
		wait_loop_index--;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	607b      	str	r3, [r7, #4]
	while (wait_loop_index != 0) {
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1f9      	bne.n	8004cf0 <P_Activate_ADC3+0x8c>
	}

	LL_ADC_Enable(ADC3);                             // ADC Enable
 8004cfc:	4811      	ldr	r0, [pc, #68]	; (8004d44 <P_Activate_ADC3+0xe0>)
 8004cfe:	f7fe fa63 	bl	80031c8 <LL_ADC_Enable>
	ADC_TimeOut_Count = 0;
 8004d02:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <P_Activate_ADC3+0xf0>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]
	ADC_Error = 0;
 8004d08:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <P_Activate_ADC3+0xf4>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	701a      	strb	r2, [r3, #0]
	while ((LL_ADC_IsActiveFlag_ADRDY(ADC3) == 0) && !Error_preceding
 8004d0e:	e001      	b.n	8004d14 <P_Activate_ADC3+0xb0>
			&& (ADC_Error == 0)) {
		Wait_for_ADC_TimeOut_();
 8004d10:	f000 f948 	bl	8004fa4 <Wait_for_ADC_TimeOut_>
	while ((LL_ADC_IsActiveFlag_ADRDY(ADC3) == 0) && !Error_preceding
 8004d14:	480b      	ldr	r0, [pc, #44]	; (8004d44 <P_Activate_ADC3+0xe0>)
 8004d16:	f7fe fab9 	bl	800328c <LL_ADC_IsActiveFlag_ADRDY>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10c      	bne.n	8004d3a <P_Activate_ADC3+0xd6>
 8004d20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d28:	f7fe ff31 	bl	8003b8e <LL_GPIO_IsInputPinSet>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d103      	bne.n	8004d3a <P_Activate_ADC3+0xd6>
			&& (ADC_Error == 0)) {
 8004d32:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <P_Activate_ADC3+0xf4>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0ea      	beq.n	8004d10 <P_Activate_ADC3+0xac>
	}
}
 8004d3a:	bf00      	nop
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	50040200 	.word	0x50040200
 8004d48:	20000014 	.word	0x20000014
 8004d4c:	0a7c5ac5 	.word	0x0a7c5ac5
 8004d50:	cccccccd 	.word	0xcccccccd
 8004d54:	20009204 	.word	0x20009204
 8004d58:	200091fa 	.word	0x200091fa

08004d5c <P_Activate_ADC2>:

void P_Activate_ADC2(void) {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
	__IO uint32_t wait_loop_index = 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	607b      	str	r3, [r7, #4]
	LL_ADC_DisableDeepPowerDown(ADC2);
 8004d66:	4835      	ldr	r0, [pc, #212]	; (8004e3c <P_Activate_ADC2+0xe0>)
 8004d68:	f7fe fa08 	bl	800317c <LL_ADC_DisableDeepPowerDown>
	LL_ADC_EnableInternalRegulator(ADC2);      // Enable internal ADC regulators
 8004d6c:	4833      	ldr	r0, [pc, #204]	; (8004e3c <P_Activate_ADC2+0xe0>)
 8004d6e:	f7fe fa17 	bl	80031a0 <LL_ADC_EnableInternalRegulator>

	wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US
			* (SystemCoreClock / 100000) / 10);
 8004d72:	4b33      	ldr	r3, [pc, #204]	; (8004e40 <P_Activate_ADC2+0xe4>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	4a32      	ldr	r2, [pc, #200]	; (8004e44 <P_Activate_ADC2+0xe8>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	09da      	lsrs	r2, r3, #7
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4b2f      	ldr	r3, [pc, #188]	; (8004e48 <P_Activate_ADC2+0xec>)
 8004d8c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d90:	08db      	lsrs	r3, r3, #3
	wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US
 8004d92:	607b      	str	r3, [r7, #4]
	while (wait_loop_index != 0) {
 8004d94:	e002      	b.n	8004d9c <P_Activate_ADC2+0x40>
		wait_loop_index--;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	607b      	str	r3, [r7, #4]
	while (wait_loop_index != 0) {
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f9      	bne.n	8004d96 <P_Activate_ADC2+0x3a>
	}

	LL_ADC_StartCalibration(ADC2, LL_ADC_SINGLE_ENDED); // ADC calibration single ended
 8004da2:	217f      	movs	r1, #127	; 0x7f
 8004da4:	4825      	ldr	r0, [pc, #148]	; (8004e3c <P_Activate_ADC2+0xe0>)
 8004da6:	f7fe fa23 	bl	80031f0 <LL_ADC_StartCalibration>
	ADC_TimeOut_Count = 0;
 8004daa:	4b28      	ldr	r3, [pc, #160]	; (8004e4c <P_Activate_ADC2+0xf0>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]
	ADC_Error = 0;
 8004db0:	4b27      	ldr	r3, [pc, #156]	; (8004e50 <P_Activate_ADC2+0xf4>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	701a      	strb	r2, [r3, #0]
	while ((LL_ADC_IsCalibrationOnGoing(ADC2) == 0) && !Error_preceding
 8004db6:	e001      	b.n	8004dbc <P_Activate_ADC2+0x60>
			&& (ADC_Error == 0)) {
		Wait_for_ADC_TimeOut_();
 8004db8:	f000 f8f4 	bl	8004fa4 <Wait_for_ADC_TimeOut_>
	while ((LL_ADC_IsCalibrationOnGoing(ADC2) == 0) && !Error_preceding
 8004dbc:	481f      	ldr	r0, [pc, #124]	; (8004e3c <P_Activate_ADC2+0xe0>)
 8004dbe:	f7fe fa30 	bl	8003222 <LL_ADC_IsCalibrationOnGoing>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10c      	bne.n	8004de2 <P_Activate_ADC2+0x86>
 8004dc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dd0:	f7fe fedd 	bl	8003b8e <LL_GPIO_IsInputPinSet>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d103      	bne.n	8004de2 <P_Activate_ADC2+0x86>
			&& (ADC_Error == 0)) {
 8004dda:	4b1d      	ldr	r3, [pc, #116]	; (8004e50 <P_Activate_ADC2+0xf4>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0ea      	beq.n	8004db8 <P_Activate_ADC2+0x5c>
	}

	wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES; // ADC Delay calculations
 8004de2:	2380      	movs	r3, #128	; 0x80
 8004de4:	607b      	str	r3, [r7, #4]
	while (wait_loop_index != 0) {
 8004de6:	e002      	b.n	8004dee <P_Activate_ADC2+0x92>
		wait_loop_index--;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	607b      	str	r3, [r7, #4]
	while (wait_loop_index != 0) {
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1f9      	bne.n	8004de8 <P_Activate_ADC2+0x8c>
	}

	LL_ADC_Enable(ADC2);                             // ADC Enable
 8004df4:	4811      	ldr	r0, [pc, #68]	; (8004e3c <P_Activate_ADC2+0xe0>)
 8004df6:	f7fe f9e7 	bl	80031c8 <LL_ADC_Enable>
	ADC_TimeOut_Count = 0;
 8004dfa:	4b14      	ldr	r3, [pc, #80]	; (8004e4c <P_Activate_ADC2+0xf0>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]
	ADC_Error = 0;
 8004e00:	4b13      	ldr	r3, [pc, #76]	; (8004e50 <P_Activate_ADC2+0xf4>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	701a      	strb	r2, [r3, #0]
	while ((LL_ADC_IsActiveFlag_ADRDY(ADC2) == 0) && !Error_preceding
 8004e06:	e001      	b.n	8004e0c <P_Activate_ADC2+0xb0>
			&& (ADC_Error == 0)) {
		Wait_for_ADC_TimeOut_();
 8004e08:	f000 f8cc 	bl	8004fa4 <Wait_for_ADC_TimeOut_>
	while ((LL_ADC_IsActiveFlag_ADRDY(ADC2) == 0) && !Error_preceding
 8004e0c:	480b      	ldr	r0, [pc, #44]	; (8004e3c <P_Activate_ADC2+0xe0>)
 8004e0e:	f7fe fa3d 	bl	800328c <LL_ADC_IsActiveFlag_ADRDY>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10c      	bne.n	8004e32 <P_Activate_ADC2+0xd6>
 8004e18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e20:	f7fe feb5 	bl	8003b8e <LL_GPIO_IsInputPinSet>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d103      	bne.n	8004e32 <P_Activate_ADC2+0xd6>
			&& (ADC_Error == 0)) {
 8004e2a:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <P_Activate_ADC2+0xf4>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0ea      	beq.n	8004e08 <P_Activate_ADC2+0xac>
	}
}
 8004e32:	bf00      	nop
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	50040100 	.word	0x50040100
 8004e40:	20000014 	.word	0x20000014
 8004e44:	0a7c5ac5 	.word	0x0a7c5ac5
 8004e48:	cccccccd 	.word	0xcccccccd
 8004e4c:	20009204 	.word	0x20009204
 8004e50:	200091fa 	.word	0x200091fa

08004e54 <P_Activate_ADC1>:

void P_Activate_ADC1(void) {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
	__IO uint32_t wait_loop_index = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	607b      	str	r3, [r7, #4]
	LL_ADC_DisableDeepPowerDown(ADC1);
 8004e5e:	4835      	ldr	r0, [pc, #212]	; (8004f34 <P_Activate_ADC1+0xe0>)
 8004e60:	f7fe f98c 	bl	800317c <LL_ADC_DisableDeepPowerDown>
	LL_ADC_EnableInternalRegulator(ADC1);      // Enable internal ADC regulators
 8004e64:	4833      	ldr	r0, [pc, #204]	; (8004f34 <P_Activate_ADC1+0xe0>)
 8004e66:	f7fe f99b 	bl	80031a0 <LL_ADC_EnableInternalRegulator>

	wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US
			* (SystemCoreClock / 100000) / 10);
 8004e6a:	4b33      	ldr	r3, [pc, #204]	; (8004f38 <P_Activate_ADC1+0xe4>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	095b      	lsrs	r3, r3, #5
 8004e70:	4a32      	ldr	r2, [pc, #200]	; (8004f3c <P_Activate_ADC1+0xe8>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	09da      	lsrs	r2, r3, #7
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	461a      	mov	r2, r3
 8004e82:	4b2f      	ldr	r3, [pc, #188]	; (8004f40 <P_Activate_ADC1+0xec>)
 8004e84:	fba3 2302 	umull	r2, r3, r3, r2
 8004e88:	08db      	lsrs	r3, r3, #3
	wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US
 8004e8a:	607b      	str	r3, [r7, #4]
	while (wait_loop_index != 0) {
 8004e8c:	e002      	b.n	8004e94 <P_Activate_ADC1+0x40>
		wait_loop_index--;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3b01      	subs	r3, #1
 8004e92:	607b      	str	r3, [r7, #4]
	while (wait_loop_index != 0) {
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f9      	bne.n	8004e8e <P_Activate_ADC1+0x3a>
	}

	LL_ADC_StartCalibration(ADC1, LL_ADC_SINGLE_ENDED); // ADC calibration single ended
 8004e9a:	217f      	movs	r1, #127	; 0x7f
 8004e9c:	4825      	ldr	r0, [pc, #148]	; (8004f34 <P_Activate_ADC1+0xe0>)
 8004e9e:	f7fe f9a7 	bl	80031f0 <LL_ADC_StartCalibration>
	ADC_TimeOut_Count = 0;
 8004ea2:	4b28      	ldr	r3, [pc, #160]	; (8004f44 <P_Activate_ADC1+0xf0>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]
	ADC_Error = 0;
 8004ea8:	4b27      	ldr	r3, [pc, #156]	; (8004f48 <P_Activate_ADC1+0xf4>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]
	while ((LL_ADC_IsCalibrationOnGoing(ADC1) == 0) && !Error_preceding
 8004eae:	e001      	b.n	8004eb4 <P_Activate_ADC1+0x60>
			&& (ADC_Error == 0)) {
		Wait_for_ADC_TimeOut_();
 8004eb0:	f000 f878 	bl	8004fa4 <Wait_for_ADC_TimeOut_>
	while ((LL_ADC_IsCalibrationOnGoing(ADC1) == 0) && !Error_preceding
 8004eb4:	481f      	ldr	r0, [pc, #124]	; (8004f34 <P_Activate_ADC1+0xe0>)
 8004eb6:	f7fe f9b4 	bl	8003222 <LL_ADC_IsCalibrationOnGoing>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10c      	bne.n	8004eda <P_Activate_ADC1+0x86>
 8004ec0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ec8:	f7fe fe61 	bl	8003b8e <LL_GPIO_IsInputPinSet>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d103      	bne.n	8004eda <P_Activate_ADC1+0x86>
			&& (ADC_Error == 0)) {
 8004ed2:	4b1d      	ldr	r3, [pc, #116]	; (8004f48 <P_Activate_ADC1+0xf4>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0ea      	beq.n	8004eb0 <P_Activate_ADC1+0x5c>
	}

	wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES; // ADC Delay calculations
 8004eda:	2380      	movs	r3, #128	; 0x80
 8004edc:	607b      	str	r3, [r7, #4]
	while (wait_loop_index != 0) {
 8004ede:	e002      	b.n	8004ee6 <P_Activate_ADC1+0x92>
		wait_loop_index--;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	607b      	str	r3, [r7, #4]
	while (wait_loop_index != 0) {
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f9      	bne.n	8004ee0 <P_Activate_ADC1+0x8c>
	}

	LL_ADC_Enable(ADC1);                             // ADC Enable
 8004eec:	4811      	ldr	r0, [pc, #68]	; (8004f34 <P_Activate_ADC1+0xe0>)
 8004eee:	f7fe f96b 	bl	80031c8 <LL_ADC_Enable>
	ADC_TimeOut_Count = 0;
 8004ef2:	4b14      	ldr	r3, [pc, #80]	; (8004f44 <P_Activate_ADC1+0xf0>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
	ADC_Error = 0;
 8004ef8:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <P_Activate_ADC1+0xf4>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	701a      	strb	r2, [r3, #0]
	while ((LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0) && !Error_preceding
 8004efe:	e001      	b.n	8004f04 <P_Activate_ADC1+0xb0>
			&& (ADC_Error == 0)) {
		Wait_for_ADC_TimeOut_();
 8004f00:	f000 f850 	bl	8004fa4 <Wait_for_ADC_TimeOut_>
	while ((LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0) && !Error_preceding
 8004f04:	480b      	ldr	r0, [pc, #44]	; (8004f34 <P_Activate_ADC1+0xe0>)
 8004f06:	f7fe f9c1 	bl	800328c <LL_ADC_IsActiveFlag_ADRDY>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10c      	bne.n	8004f2a <P_Activate_ADC1+0xd6>
 8004f10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f18:	f7fe fe39 	bl	8003b8e <LL_GPIO_IsInputPinSet>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d103      	bne.n	8004f2a <P_Activate_ADC1+0xd6>
			&& (ADC_Error == 0)) {
 8004f22:	4b09      	ldr	r3, [pc, #36]	; (8004f48 <P_Activate_ADC1+0xf4>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0ea      	beq.n	8004f00 <P_Activate_ADC1+0xac>
	}
}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	50040000 	.word	0x50040000
 8004f38:	20000014 	.word	0x20000014
 8004f3c:	0a7c5ac5 	.word	0x0a7c5ac5
 8004f40:	cccccccd 	.word	0xcccccccd
 8004f44:	20009204 	.word	0x20009204
 8004f48:	200091fa 	.word	0x200091fa

08004f4c <P_IMU1_SPI1_Initialization_at_reset>:
	delay_us(10000);

}

void P_IMU1_SPI1_Initialization_at_reset(void)       // IMU configurations
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
	P_IMU1_SPI1_Init();         // Accelerometer Chip Initialization
 8004f50:	f000 fa18 	bl	8005384 <P_IMU1_SPI1_Init>
	delay_us(7000);         // Arbitrary delay after SPI initialization
 8004f54:	f641 3058 	movw	r0, #7000	; 0x1b58
 8004f58:	f001 fc7c 	bl	8006854 <delay_us>

	MPU1_SPI1_init();
 8004f5c:	f000 fdd0 	bl	8005b00 <MPU1_SPI1_init>
	MPU2_SPI1_init();
 8004f60:	f000 fe4e 	bl	8005c00 <MPU2_SPI1_init>

}
 8004f64:	bf00      	nop
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <Wait_for_ADC_timeout_While_Datalog>:
		SPI_Error_Buf = 1;
	}
}

void Wait_for_ADC_timeout_While_Datalog(void) // During Timer_Interrupt for Data logging, Involved Volatile variables
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
	ADC_TimeOut_Count_Buf++;
 8004f6c:	4b0a      	ldr	r3, [pc, #40]	; (8004f98 <Wait_for_ADC_timeout_While_Datalog+0x30>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3301      	adds	r3, #1
 8004f72:	4a09      	ldr	r2, [pc, #36]	; (8004f98 <Wait_for_ADC_timeout_While_Datalog+0x30>)
 8004f74:	6013      	str	r3, [r2, #0]
	if (ADC_TimeOut_Count_Buf > ADC_TimeOut_Limit_Buf) // 100ms= 48000*ADC_TimeOut_MS_value)
 8004f76:	4b08      	ldr	r3, [pc, #32]	; (8004f98 <Wait_for_ADC_timeout_While_Datalog+0x30>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a08      	ldr	r2, [pc, #32]	; (8004f9c <Wait_for_ADC_timeout_While_Datalog+0x34>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d905      	bls.n	8004f8c <Wait_for_ADC_timeout_While_Datalog+0x24>
	{
		ADC_TimeOut_Count_Buf = 0;
 8004f80:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <Wait_for_ADC_timeout_While_Datalog+0x30>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
		ADC_Error_Buf = 1;
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <Wait_for_ADC_timeout_While_Datalog+0x38>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	701a      	strb	r2, [r3, #0]
	}
}
 8004f8c:	bf00      	nop
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	20008c38 	.word	0x20008c38
 8004f9c:	00493e00 	.word	0x00493e00
 8004fa0:	20009203 	.word	0x20009203

08004fa4 <Wait_for_ADC_TimeOut_>:
		SPI_TimeOut_Count = 0;
		SPI_Error = 1;
	}
}

void Wait_for_ADC_TimeOut_(void) {
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
	ADC_TimeOut_Count++;
 8004fa8:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <Wait_for_ADC_TimeOut_+0x30>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3301      	adds	r3, #1
 8004fae:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <Wait_for_ADC_TimeOut_+0x30>)
 8004fb0:	6013      	str	r3, [r2, #0]
	if (ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 8004fb2:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <Wait_for_ADC_TimeOut_+0x30>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a08      	ldr	r2, [pc, #32]	; (8004fd8 <Wait_for_ADC_TimeOut_+0x34>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d905      	bls.n	8004fc8 <Wait_for_ADC_TimeOut_+0x24>
	{
		ADC_TimeOut_Count = 0;
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <Wait_for_ADC_TimeOut_+0x30>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
		ADC_Error = 1;
 8004fc2:	4b06      	ldr	r3, [pc, #24]	; (8004fdc <Wait_for_ADC_TimeOut_+0x38>)
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	701a      	strb	r2, [r3, #0]
	}
}
 8004fc8:	bf00      	nop
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	20009204 	.word	0x20009204
 8004fd8:	00493e00 	.word	0x00493e00
 8004fdc:	200091fa 	.word	0x200091fa

08004fe0 <WriteReg1>:
	delay_us(5);
	LL_GPIO_SetOutputPin(SPI3_IMU5_CS_GPIO_Port, SPI3_IMU5_CS_Pin); // PA4 CS SET Active Low // for IMU5 changed here
	return temp_val;
}

unsigned int WriteReg1(uint8_t adress, uint8_t data) {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	460a      	mov	r2, r1
 8004fea:	71fb      	strb	r3, [r7, #7]
 8004fec:	4613      	mov	r3, r2
 8004fee:	71bb      	strb	r3, [r7, #6]
	unsigned int temp_val;
	LL_GPIO_ResetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);
 8004ff0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ff8:	f7fe fdec 	bl	8003bd4 <LL_GPIO_ResetOutputPin>

	while (!(SPI1->SR & SPI_SR_TXE))
 8004ffc:	bf00      	nop
 8004ffe:	4b1c      	ldr	r3, [pc, #112]	; (8005070 <WriteReg1+0x90>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f9      	beq.n	8004ffe <WriteReg1+0x1e>
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, adress);
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	4619      	mov	r1, r3
 800500e:	4818      	ldr	r0, [pc, #96]	; (8005070 <WriteReg1+0x90>)
 8005010:	f7fe fcd0 	bl	80039b4 <LL_SPI_TransmitData8>
	while (!(SPI1->SR & SPI_SR_RXNE))
 8005014:	bf00      	nop
 8005016:	4b16      	ldr	r3, [pc, #88]	; (8005070 <WriteReg1+0x90>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0f9      	beq.n	8005016 <WriteReg1+0x36>
		; //data received?
	LL_SPI_ReceiveData8(SPI1);
 8005022:	4813      	ldr	r0, [pc, #76]	; (8005070 <WriteReg1+0x90>)
 8005024:	f7fe fcb9 	bl	800399a <LL_SPI_ReceiveData8>

	while (!(SPI1->SR & SPI_SR_TXE))
 8005028:	bf00      	nop
 800502a:	4b11      	ldr	r3, [pc, #68]	; (8005070 <WriteReg1+0x90>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0f9      	beq.n	800502a <WriteReg1+0x4a>
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, data);
 8005036:	79bb      	ldrb	r3, [r7, #6]
 8005038:	4619      	mov	r1, r3
 800503a:	480d      	ldr	r0, [pc, #52]	; (8005070 <WriteReg1+0x90>)
 800503c:	f7fe fcba 	bl	80039b4 <LL_SPI_TransmitData8>
	while (!(SPI1->SR & SPI_SR_RXNE))
 8005040:	bf00      	nop
 8005042:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <WriteReg1+0x90>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0f9      	beq.n	8005042 <WriteReg1+0x62>
		; //data received?
	temp_val = LL_SPI_ReceiveData8(SPI1);
 800504e:	4808      	ldr	r0, [pc, #32]	; (8005070 <WriteReg1+0x90>)
 8005050:	f7fe fca3 	bl	800399a <LL_SPI_ReceiveData8>
 8005054:	4603      	mov	r3, r0
 8005056:	60fb      	str	r3, [r7, #12]

	LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);
 8005058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800505c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005060:	f7fe fdaa 	bl	8003bb8 <LL_GPIO_SetOutputPin>
	return temp_val;
 8005064:	68fb      	ldr	r3, [r7, #12]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40013000 	.word	0x40013000

08005074 <WriteReg1_imu2>:

unsigned int WriteReg1_imu2(uint8_t adress, uint8_t data) {
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	4603      	mov	r3, r0
 800507c:	460a      	mov	r2, r1
 800507e:	71fb      	strb	r3, [r7, #7]
 8005080:	4613      	mov	r3, r2
 8005082:	71bb      	strb	r3, [r7, #6]
	unsigned int temp_val;
	LL_GPIO_ResetOutputPin(SPI1_IMU2_CS_GPIO_Port, SPI1_IMU2_CS_Pin);
 8005084:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800508c:	f7fe fda2 	bl	8003bd4 <LL_GPIO_ResetOutputPin>

	while (!(SPI1->SR & SPI_SR_TXE))
 8005090:	bf00      	nop
 8005092:	4b1c      	ldr	r3, [pc, #112]	; (8005104 <WriteReg1_imu2+0x90>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f9      	beq.n	8005092 <WriteReg1_imu2+0x1e>
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, adress);
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	4619      	mov	r1, r3
 80050a2:	4818      	ldr	r0, [pc, #96]	; (8005104 <WriteReg1_imu2+0x90>)
 80050a4:	f7fe fc86 	bl	80039b4 <LL_SPI_TransmitData8>
	while (!(SPI1->SR & SPI_SR_RXNE))
 80050a8:	bf00      	nop
 80050aa:	4b16      	ldr	r3, [pc, #88]	; (8005104 <WriteReg1_imu2+0x90>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0f9      	beq.n	80050aa <WriteReg1_imu2+0x36>
		; //data received?
	LL_SPI_ReceiveData8(SPI1);
 80050b6:	4813      	ldr	r0, [pc, #76]	; (8005104 <WriteReg1_imu2+0x90>)
 80050b8:	f7fe fc6f 	bl	800399a <LL_SPI_ReceiveData8>

	while (!(SPI1->SR & SPI_SR_TXE))
 80050bc:	bf00      	nop
 80050be:	4b11      	ldr	r3, [pc, #68]	; (8005104 <WriteReg1_imu2+0x90>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f9      	beq.n	80050be <WriteReg1_imu2+0x4a>
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, data);
 80050ca:	79bb      	ldrb	r3, [r7, #6]
 80050cc:	4619      	mov	r1, r3
 80050ce:	480d      	ldr	r0, [pc, #52]	; (8005104 <WriteReg1_imu2+0x90>)
 80050d0:	f7fe fc70 	bl	80039b4 <LL_SPI_TransmitData8>
	while (!(SPI1->SR & SPI_SR_RXNE))
 80050d4:	bf00      	nop
 80050d6:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <WriteReg1_imu2+0x90>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0f9      	beq.n	80050d6 <WriteReg1_imu2+0x62>
		; //data received?
	temp_val = LL_SPI_ReceiveData8(SPI1);
 80050e2:	4808      	ldr	r0, [pc, #32]	; (8005104 <WriteReg1_imu2+0x90>)
 80050e4:	f7fe fc59 	bl	800399a <LL_SPI_ReceiveData8>
 80050e8:	4603      	mov	r3, r0
 80050ea:	60fb      	str	r3, [r7, #12]

	LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_IMU2_CS_Pin);
 80050ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050f4:	f7fe fd60 	bl	8003bb8 <LL_GPIO_SetOutputPin>
	return temp_val;
 80050f8:	68fb      	ldr	r3, [r7, #12]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	40013000 	.word	0x40013000

08005108 <ReadRegs1>:

	LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN); // PC4 CS SET Active Low

}

void ReadRegs1(uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes) {
 8005108:	b590      	push	{r4, r7, lr}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	73fb      	strb	r3, [r7, #15]
	unsigned int i = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	617b      	str	r3, [r7, #20]
	LL_GPIO_ResetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN); // PA4 CS RESET Active Low
 800511a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800511e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005122:	f7fe fd57 	bl	8003bd4 <LL_GPIO_ResetOutputPin>

	while (!(SPI1->SR & SPI_SR_TXE))
 8005126:	bf00      	nop
 8005128:	4b22      	ldr	r3, [pc, #136]	; (80051b4 <ReadRegs1+0xac>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0f9      	beq.n	8005128 <ReadRegs1+0x20>
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, (ReadAddr | 0x80)); // (Starting Address 0x22 | 0x80); MSB is '1' for 0x80, next 7 bit Address of register to write 0x22
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800513a:	b2db      	uxtb	r3, r3
 800513c:	4619      	mov	r1, r3
 800513e:	481d      	ldr	r0, [pc, #116]	; (80051b4 <ReadRegs1+0xac>)
 8005140:	f7fe fc38 	bl	80039b4 <LL_SPI_TransmitData8>
	while (!(SPI1->SR & SPI_SR_RXNE))
 8005144:	bf00      	nop
 8005146:	4b1b      	ldr	r3, [pc, #108]	; (80051b4 <ReadRegs1+0xac>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0f9      	beq.n	8005146 <ReadRegs1+0x3e>
		; //data received?
	LL_SPI_ReceiveData8(SPI1);
 8005152:	4818      	ldr	r0, [pc, #96]	; (80051b4 <ReadRegs1+0xac>)
 8005154:	f7fe fc21 	bl	800399a <LL_SPI_ReceiveData8>

	for (i = 0; i < Bytes; i++) {
 8005158:	2300      	movs	r3, #0
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	e01c      	b.n	8005198 <ReadRegs1+0x90>
		while (!(SPI1->SR & SPI_SR_TXE))
 800515e:	bf00      	nop
 8005160:	4b14      	ldr	r3, [pc, #80]	; (80051b4 <ReadRegs1+0xac>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0f9      	beq.n	8005160 <ReadRegs1+0x58>
			; //transmit buffer empty?
		LL_SPI_TransmitData8(SPI1, 0x00);
 800516c:	2100      	movs	r1, #0
 800516e:	4811      	ldr	r0, [pc, #68]	; (80051b4 <ReadRegs1+0xac>)
 8005170:	f7fe fc20 	bl	80039b4 <LL_SPI_TransmitData8>

		while (!(SPI1->SR & SPI_SR_RXNE))
 8005174:	bf00      	nop
 8005176:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <ReadRegs1+0xac>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f9      	beq.n	8005176 <ReadRegs1+0x6e>
			; //data received?
		ReadBuf[i] = LL_SPI_ReceiveData8(SPI1);
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	18d4      	adds	r4, r2, r3
 8005188:	480a      	ldr	r0, [pc, #40]	; (80051b4 <ReadRegs1+0xac>)
 800518a:	f7fe fc06 	bl	800399a <LL_SPI_ReceiveData8>
 800518e:	4603      	mov	r3, r0
 8005190:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < Bytes; i++) {
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	3301      	adds	r3, #1
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	429a      	cmp	r2, r3
 800519e:	d3de      	bcc.n	800515e <ReadRegs1+0x56>

	}

	LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN); // PC4 CS SET Active Low
 80051a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051a8:	f7fe fd06 	bl	8003bb8 <LL_GPIO_SetOutputPin>

}
 80051ac:	bf00      	nop
 80051ae:	371c      	adds	r7, #28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd90      	pop	{r4, r7, pc}
 80051b4:	40013000 	.word	0x40013000

080051b8 <Read_Loadcell1>:
//
//return Load1;
//	  // ADC3 Ch2 PC1 read
//}

int Read_Loadcell1(void) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
	int Load1;
	// ADC3 Ch1 PC0 read
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80051be:	4a18      	ldr	r2, [pc, #96]	; (8005220 <Read_Loadcell1+0x68>)
 80051c0:	2106      	movs	r1, #6
 80051c2:	4818      	ldr	r0, [pc, #96]	; (8005224 <Read_Loadcell1+0x6c>)
 80051c4:	f7fd ff36 	bl	8003034 <LL_ADC_REG_SetSequencerRanks>

	LL_ADC_REG_StartConversion(ADC2);
 80051c8:	4817      	ldr	r0, [pc, #92]	; (8005228 <Read_Loadcell1+0x70>)
 80051ca:	f7fe f83e 	bl	800324a <LL_ADC_REG_StartConversion>
	ADC_TimeOut_Count_Buf = 0;
 80051ce:	4b17      	ldr	r3, [pc, #92]	; (800522c <Read_Loadcell1+0x74>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]
	ADC_Error_Buf = 0;
 80051d4:	4b16      	ldr	r3, [pc, #88]	; (8005230 <Read_Loadcell1+0x78>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	701a      	strb	r2, [r3, #0]
	while ((LL_ADC_IsActiveFlag_EOC(ADC2) == 0)) {
 80051da:	e001      	b.n	80051e0 <Read_Loadcell1+0x28>
		Wait_for_ADC_timeout_While_Datalog();
 80051dc:	f7ff fec4 	bl	8004f68 <Wait_for_ADC_timeout_While_Datalog>
	while ((LL_ADC_IsActiveFlag_EOC(ADC2) == 0)) {
 80051e0:	4811      	ldr	r0, [pc, #68]	; (8005228 <Read_Loadcell1+0x70>)
 80051e2:	f7fe f866 	bl	80032b2 <LL_ADC_IsActiveFlag_EOC>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0f7      	beq.n	80051dc <Read_Loadcell1+0x24>
	}
	LL_ADC_ClearFlag_EOC(ADC2);
 80051ec:	480e      	ldr	r0, [pc, #56]	; (8005228 <Read_Loadcell1+0x70>)
 80051ee:	f7fe f873 	bl	80032d8 <LL_ADC_ClearFlag_EOC>
	Load1 = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI,
 80051f2:	480d      	ldr	r0, [pc, #52]	; (8005228 <Read_Loadcell1+0x70>)
 80051f4:	f7fe f83d 	bl	8003272 <LL_ADC_REG_ReadConversionData12>
 80051f8:	4603      	mov	r3, r0
 80051fa:	461a      	mov	r2, r3
 80051fc:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8005200:	fb03 f202 	mul.w	r2, r3, r2
 8005204:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <Read_Loadcell1+0x7c>)
 8005206:	fba3 1302 	umull	r1, r3, r3, r2
 800520a:	1ad2      	subs	r2, r2, r3
 800520c:	0852      	lsrs	r2, r2, #1
 800520e:	4413      	add	r3, r2
 8005210:	0adb      	lsrs	r3, r3, #11
 8005212:	607b      	str	r3, [r7, #4]
			LL_ADC_REG_ReadConversionData12(ADC2), LL_ADC_RESOLUTION_12B); // Toe

	return Load1;
 8005214:	687b      	ldr	r3, [r7, #4]
	// ADC3 Ch2 PC1 read
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	04300002 	.word	0x04300002
 8005224:	50040200 	.word	0x50040200
 8005228:	50040100 	.word	0x50040100
 800522c:	20008c38 	.word	0x20008c38
 8005230:	20009203 	.word	0x20009203
 8005234:	00100101 	.word	0x00100101

08005238 <Read_Loadcell2>:

int Read_Loadcell2(void) {
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
	int Load2;
	// ADC3 Ch1 PC0 read
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800523e:	4a18      	ldr	r2, [pc, #96]	; (80052a0 <Read_Loadcell2+0x68>)
 8005240:	2106      	movs	r1, #6
 8005242:	4818      	ldr	r0, [pc, #96]	; (80052a4 <Read_Loadcell2+0x6c>)
 8005244:	f7fd fef6 	bl	8003034 <LL_ADC_REG_SetSequencerRanks>

	LL_ADC_REG_StartConversion(ADC1);
 8005248:	4817      	ldr	r0, [pc, #92]	; (80052a8 <Read_Loadcell2+0x70>)
 800524a:	f7fd fffe 	bl	800324a <LL_ADC_REG_StartConversion>
	ADC_TimeOut_Count_Buf = 0;
 800524e:	4b17      	ldr	r3, [pc, #92]	; (80052ac <Read_Loadcell2+0x74>)
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
	ADC_Error_Buf = 0;
 8005254:	4b16      	ldr	r3, [pc, #88]	; (80052b0 <Read_Loadcell2+0x78>)
 8005256:	2200      	movs	r2, #0
 8005258:	701a      	strb	r2, [r3, #0]
	while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0)) {
 800525a:	e001      	b.n	8005260 <Read_Loadcell2+0x28>
		Wait_for_ADC_timeout_While_Datalog();
 800525c:	f7ff fe84 	bl	8004f68 <Wait_for_ADC_timeout_While_Datalog>
	while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0)) {
 8005260:	4811      	ldr	r0, [pc, #68]	; (80052a8 <Read_Loadcell2+0x70>)
 8005262:	f7fe f826 	bl	80032b2 <LL_ADC_IsActiveFlag_EOC>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0f7      	beq.n	800525c <Read_Loadcell2+0x24>
	}
	LL_ADC_ClearFlag_EOC(ADC1);
 800526c:	480e      	ldr	r0, [pc, #56]	; (80052a8 <Read_Loadcell2+0x70>)
 800526e:	f7fe f833 	bl	80032d8 <LL_ADC_ClearFlag_EOC>
	Load2 = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI,
 8005272:	480d      	ldr	r0, [pc, #52]	; (80052a8 <Read_Loadcell2+0x70>)
 8005274:	f7fd fffd 	bl	8003272 <LL_ADC_REG_ReadConversionData12>
 8005278:	4603      	mov	r3, r0
 800527a:	461a      	mov	r2, r3
 800527c:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8005280:	fb03 f202 	mul.w	r2, r3, r2
 8005284:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <Read_Loadcell2+0x7c>)
 8005286:	fba3 1302 	umull	r1, r3, r3, r2
 800528a:	1ad2      	subs	r2, r2, r3
 800528c:	0852      	lsrs	r2, r2, #1
 800528e:	4413      	add	r3, r2
 8005290:	0adb      	lsrs	r3, r3, #11
 8005292:	607b      	str	r3, [r7, #4]
			LL_ADC_REG_ReadConversionData12(ADC1), LL_ADC_RESOLUTION_12B); //Heel

	return Load2;
 8005294:	687b      	ldr	r3, [r7, #4]
	// ADC3 Ch2 PC1 read
}
 8005296:	4618      	mov	r0, r3
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	04300002 	.word	0x04300002
 80052a4:	50040200 	.word	0x50040200
 80052a8:	50040000 	.word	0x50040000
 80052ac:	20008c38 	.word	0x20008c38
 80052b0:	20009203 	.word	0x20009203
 80052b4:	00100101 	.word	0x00100101

080052b8 <ADC_Reset>:

void Battery_Monitor_Voltage_check(void) {

}

void ADC_Reset(void) {
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0

}
 80052bc:	bf00      	nop
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <ACC_GPIO_INIT>:
	LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE0); // Set PC0 pin EXTI interrupt in EXTI9-5 line
	LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_0);      // Enable PC0 pin EXTI interrupt
	LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_0); // Interrupt configured for Falling edge
}

void ACC_GPIO_INIT(void) {
 80052c6:	b580      	push	{r7, lr}
 80052c8:	af00      	add	r7, sp, #0
	// Configure SCK Pin connected to PA5, MISO PA6, MOSI PA7
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_5, LL_GPIO_MODE_ALTERNATE);
 80052ca:	2202      	movs	r2, #2
 80052cc:	2120      	movs	r1, #32
 80052ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052d2:	f7fe fb7f 	bl	80039d4 <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_5, LL_GPIO_AF_5);
 80052d6:	2205      	movs	r2, #5
 80052d8:	2120      	movs	r1, #32
 80052da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052de:	f7fe fc18 	bl	8003b12 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_5, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 80052e2:	2203      	movs	r2, #3
 80052e4:	2120      	movs	r1, #32
 80052e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052ea:	f7fe fbb8 	bl	8003a5e <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_5, LL_GPIO_OUTPUT_PUSHPULL);
 80052ee:	2200      	movs	r2, #0
 80052f0:	2120      	movs	r1, #32
 80052f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052f6:	f7fe fb9a 	bl	8003a2e <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_5, LL_GPIO_PULL_NO);
 80052fa:	2200      	movs	r2, #0
 80052fc:	2120      	movs	r1, #32
 80052fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005302:	f7fe fbd9 	bl	8003ab8 <LL_GPIO_SetPinPull>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 8005306:	2202      	movs	r2, #2
 8005308:	2140      	movs	r1, #64	; 0x40
 800530a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800530e:	f7fe fb61 	bl	80039d4 <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_6, LL_GPIO_AF_5);
 8005312:	2205      	movs	r2, #5
 8005314:	2140      	movs	r1, #64	; 0x40
 8005316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800531a:	f7fe fbfa 	bl	8003b12 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 800531e:	2203      	movs	r2, #3
 8005320:	2140      	movs	r1, #64	; 0x40
 8005322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005326:	f7fe fb9a 	bl	8003a5e <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_6, LL_GPIO_OUTPUT_PUSHPULL);
 800532a:	2200      	movs	r2, #0
 800532c:	2140      	movs	r1, #64	; 0x40
 800532e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005332:	f7fe fb7c 	bl	8003a2e <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 8005336:	2200      	movs	r2, #0
 8005338:	2140      	movs	r1, #64	; 0x40
 800533a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800533e:	f7fe fbbb 	bl	8003ab8 <LL_GPIO_SetPinPull>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_ALTERNATE);
 8005342:	2202      	movs	r2, #2
 8005344:	2180      	movs	r1, #128	; 0x80
 8005346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800534a:	f7fe fb43 	bl	80039d4 <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_7, LL_GPIO_AF_5);
 800534e:	2205      	movs	r2, #5
 8005350:	2180      	movs	r1, #128	; 0x80
 8005352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005356:	f7fe fbdc 	bl	8003b12 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_7, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 800535a:	2203      	movs	r2, #3
 800535c:	2180      	movs	r1, #128	; 0x80
 800535e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005362:	f7fe fb7c 	bl	8003a5e <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_7, LL_GPIO_OUTPUT_PUSHPULL);
 8005366:	2200      	movs	r2, #0
 8005368:	2180      	movs	r1, #128	; 0x80
 800536a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800536e:	f7fe fb5e 	bl	8003a2e <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_7, LL_GPIO_PULL_NO);
 8005372:	2200      	movs	r2, #0
 8005374:	2180      	movs	r1, #128	; 0x80
 8005376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800537a:	f7fe fb9d 	bl	8003ab8 <LL_GPIO_SetPinPull>
}
 800537e:	bf00      	nop
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <P_IMU1_SPI1_Init>:
	LL_GPIO_SetPinOutputType(GPIOB, LL_GPIO_PIN_15, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_15, LL_GPIO_PULL_NO);
}

void P_IMU1_SPI1_Init(void)  //MPU9250
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8005388:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800538c:	f7fe f8a6 	bl	80034dc <LL_APB2_GRP1_EnableClock>

	ACC_GPIO_INIT();
 8005390:	f7ff ff99 	bl	80052c6 <ACC_GPIO_INIT>

	LL_SPI_SetBaudRatePrescaler(SPI1, LL_SPI_BAUDRATEPRESCALER_DIV4); // Must need 8MHz for MPU 9250, Lets try with 6MHz
 8005394:	2108      	movs	r1, #8
 8005396:	4817      	ldr	r0, [pc, #92]	; (80053f4 <P_IMU1_SPI1_Init+0x70>)
 8005398:	f7fe fa74 	bl	8003884 <LL_SPI_SetBaudRatePrescaler>
	LL_SPI_SetTransferDirection(SPI1, LL_SPI_FULL_DUPLEX);
 800539c:	2100      	movs	r1, #0
 800539e:	4815      	ldr	r0, [pc, #84]	; (80053f4 <P_IMU1_SPI1_Init+0x70>)
 80053a0:	f7fe fa96 	bl	80038d0 <LL_SPI_SetTransferDirection>
	LL_SPI_SetClockPhase(SPI1, LL_SPI_PHASE_2EDGE);
 80053a4:	2101      	movs	r1, #1
 80053a6:	4813      	ldr	r0, [pc, #76]	; (80053f4 <P_IMU1_SPI1_Init+0x70>)
 80053a8:	f7fe fa46 	bl	8003838 <LL_SPI_SetClockPhase>
	LL_SPI_SetClockPolarity(SPI1, LL_SPI_POLARITY_HIGH);
 80053ac:	2102      	movs	r1, #2
 80053ae:	4811      	ldr	r0, [pc, #68]	; (80053f4 <P_IMU1_SPI1_Init+0x70>)
 80053b0:	f7fe fa55 	bl	800385e <LL_SPI_SetClockPolarity>
	LL_SPI_SetTransferBitOrder(SPI1, LL_SPI_MSB_FIRST);
 80053b4:	2100      	movs	r1, #0
 80053b6:	480f      	ldr	r0, [pc, #60]	; (80053f4 <P_IMU1_SPI1_Init+0x70>)
 80053b8:	f7fe fa77 	bl	80038aa <LL_SPI_SetTransferBitOrder>
	LL_SPI_SetDataWidth(SPI1, LL_SPI_DATAWIDTH_8BIT);
 80053bc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80053c0:	480c      	ldr	r0, [pc, #48]	; (80053f4 <P_IMU1_SPI1_Init+0x70>)
 80053c2:	f7fe fa98 	bl	80038f6 <LL_SPI_SetDataWidth>
	LL_SPI_SetNSSMode(SPI1, LL_SPI_NSS_SOFT);
 80053c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053ca:	480a      	ldr	r0, [pc, #40]	; (80053f4 <P_IMU1_SPI1_Init+0x70>)
 80053cc:	f7fe fab9 	bl	8003942 <LL_SPI_SetNSSMode>
	LL_SPI_SetRxFIFOThreshold(SPI1, LL_SPI_RX_FIFO_TH_QUARTER);
 80053d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80053d4:	4807      	ldr	r0, [pc, #28]	; (80053f4 <P_IMU1_SPI1_Init+0x70>)
 80053d6:	f7fe faa1 	bl	800391c <LL_SPI_SetRxFIFOThreshold>
	LL_SPI_SetMode(SPI1, LL_SPI_MODE_MASTER);
 80053da:	f44f 7182 	mov.w	r1, #260	; 0x104
 80053de:	4805      	ldr	r0, [pc, #20]	; (80053f4 <P_IMU1_SPI1_Init+0x70>)
 80053e0:	f7fe fa17 	bl	8003812 <LL_SPI_SetMode>
	LL_SPI_Enable(SPI1);
 80053e4:	4803      	ldr	r0, [pc, #12]	; (80053f4 <P_IMU1_SPI1_Init+0x70>)
 80053e6:	f7fe fa04 	bl	80037f2 <LL_SPI_Enable>
	LL_SPI_EnableNSSPulseMgt(SPI1);
 80053ea:	4802      	ldr	r0, [pc, #8]	; (80053f4 <P_IMU1_SPI1_Init+0x70>)
 80053ec:	f7fe fac5 	bl	800397a <LL_SPI_EnableNSSPulseMgt>

}
 80053f0:	bf00      	nop
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40013000 	.word	0x40013000

080053f8 <Configure_USART_1>:
	delay_us(10000);

}

void Configure_USART_1(void)   // USART1: PB6-Tx, (PA10-Rx disabled)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0

// Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 80053fc:	2202      	movs	r2, #2
 80053fe:	2140      	movs	r1, #64	; 0x40
 8005400:	481a      	ldr	r0, [pc, #104]	; (800546c <Configure_USART_1+0x74>)
 8005402:	f7fe fae7 	bl	80039d4 <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOB, LL_GPIO_PIN_6, LL_GPIO_AF_7);
 8005406:	2207      	movs	r2, #7
 8005408:	2140      	movs	r1, #64	; 0x40
 800540a:	4818      	ldr	r0, [pc, #96]	; (800546c <Configure_USART_1+0x74>)
 800540c:	f7fe fb81 	bl	8003b12 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8005410:	2203      	movs	r2, #3
 8005412:	2140      	movs	r1, #64	; 0x40
 8005414:	4815      	ldr	r0, [pc, #84]	; (800546c <Configure_USART_1+0x74>)
 8005416:	f7fe fb22 	bl	8003a5e <LL_GPIO_SetPinSpeed>
	LL_GPIO_SetPinOutputType(GPIOB, LL_GPIO_PIN_6, LL_GPIO_OUTPUT_PUSHPULL);
 800541a:	2200      	movs	r2, #0
 800541c:	2140      	movs	r1, #64	; 0x40
 800541e:	4813      	ldr	r0, [pc, #76]	; (800546c <Configure_USART_1+0x74>)
 8005420:	f7fe fb05 	bl	8003a2e <LL_GPIO_SetPinOutputType>
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_UP);
 8005424:	2201      	movs	r2, #1
 8005426:	2140      	movs	r1, #64	; 0x40
 8005428:	4810      	ldr	r0, [pc, #64]	; (800546c <Configure_USART_1+0x74>)
 800542a:	f7fe fb45 	bl	8003ab8 <LL_GPIO_SetPinPull>

	RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1 clock enable, Clock source Default peripheral clock PCLK2, APB2
 800542e:	4a10      	ldr	r2, [pc, #64]	; (8005470 <Configure_USART_1+0x78>)
 8005430:	4b0f      	ldr	r3, [pc, #60]	; (8005470 <Configure_USART_1+0x78>)
 8005432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005438:	6613      	str	r3, [r2, #96]	; 0x60

// Default parameter: 8 data bit, 1 start bit, 1 stop bit, no parity, no hardware flow control

	MODIFY_REG(USART1->CR1, USART_CR1_RE | USART_CR1_TE,
 800543a:	4a0e      	ldr	r2, [pc, #56]	; (8005474 <Configure_USART_1+0x7c>)
 800543c:	4b0d      	ldr	r3, [pc, #52]	; (8005474 <Configure_USART_1+0x7c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f043 030c 	orr.w	r3, r3, #12
 8005444:	6013      	str	r3, [r2, #0]
			(USART_CR1_TE |USART_CR1_RE)); // TX/RX direction BidirecttionalLL_USART_DIRECTION_TX_RX

	USART1->BRR =
 8005446:	4a0b      	ldr	r2, [pc, #44]	; (8005474 <Configure_USART_1+0x7c>)
			(uint16_t) (__LL_USART_DIV_SAMPLING16(SystemCoreClock, 115200)); // Baud rate 115200
 8005448:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <Configure_USART_1+0x80>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8005450:	490a      	ldr	r1, [pc, #40]	; (800547c <Configure_USART_1+0x84>)
 8005452:	fba1 1303 	umull	r1, r3, r1, r3
 8005456:	0c1b      	lsrs	r3, r3, #16
 8005458:	b29b      	uxth	r3, r3
	USART1->BRR =
 800545a:	60d3      	str	r3, [r2, #12]

	USART1->CR1 |= USART_CR1_UE;  // Unable USART1
 800545c:	4a05      	ldr	r2, [pc, #20]	; (8005474 <Configure_USART_1+0x7c>)
 800545e:	4b05      	ldr	r3, [pc, #20]	; (8005474 <Configure_USART_1+0x7c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f043 0301 	orr.w	r3, r3, #1
 8005466:	6013      	str	r3, [r2, #0]
}
 8005468:	bf00      	nop
 800546a:	bd80      	pop	{r7, pc}
 800546c:	48000400 	.word	0x48000400
 8005470:	40021000 	.word	0x40021000
 8005474:	40013800 	.word	0x40013800
 8005478:	20000014 	.word	0x20000014
 800547c:	91a2b3c5 	.word	0x91a2b3c5

08005480 <USART1_wr_print>:
		;
	return ((uint8_t) (USART1->RDR & 0xFF));

}

void USART1_wr_print(uint8_t *buffer, uint32_t nBytes) {
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < nBytes; i++) {
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	e01d      	b.n	80054cc <USART1_wr_print+0x4c>
		while (!(USART1->ISR & USART_ISR_TXE))
 8005490:	bf00      	nop
 8005492:	4b13      	ldr	r3, [pc, #76]	; (80054e0 <USART1_wr_print+0x60>)
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0f9      	beq.n	8005492 <USART1_wr_print+0x12>
			;
		USART1->TDR = buffer[i] & 0xFF;
 800549e:	4910      	ldr	r1, [pc, #64]	; (80054e0 <USART1_wr_print+0x60>)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	4413      	add	r3, r2
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	850b      	strh	r3, [r1, #40]	; 0x28

		while (!(USART1->ISR & USART_ISR_TC))
 80054ac:	bf00      	nop
 80054ae:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <USART1_wr_print+0x60>)
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f9      	beq.n	80054ae <USART1_wr_print+0x2e>
			;
		USART1->ISR &= ~USART_ISR_TC;
 80054ba:	4a09      	ldr	r2, [pc, #36]	; (80054e0 <USART1_wr_print+0x60>)
 80054bc:	4b08      	ldr	r3, [pc, #32]	; (80054e0 <USART1_wr_print+0x60>)
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c4:	61d3      	str	r3, [r2, #28]
	for (int i = 0; i < nBytes; i++) {
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	3301      	adds	r3, #1
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d3dd      	bcc.n	8005490 <USART1_wr_print+0x10>
	}
}
 80054d4:	bf00      	nop
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	40013800 	.word	0x40013800

080054e4 <prepare_low_battery>:
void FPGA_Programming_loop(void) {
	//  FPGA_POWER_ON();	 	 //Code for enabling FPGA programming
	//	 while(1);
}

void prepare_low_battery(void) {
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
#ifdef Bottle_Device
	//ALL_LED_OFF();
#else
//  NVIC_SystemReset();
#endif
}
 80054e8:	bf00      	nop
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
	...

080054f4 <Clear_ErrorTimestamp_Buffer>:
	}
}

int FPGA_Loop_Error_cnt;

void Clear_ErrorTimestamp_Buffer(void) {
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
	ErrorCodeBuf = 0;
 80054f8:	4b05      	ldr	r3, [pc, #20]	; (8005510 <Clear_ErrorTimestamp_Buffer+0x1c>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	701a      	strb	r2, [r3, #0]
	ErrorTimeStampBuf = 0;
 80054fe:	4b05      	ldr	r3, [pc, #20]	; (8005514 <Clear_ErrorTimestamp_Buffer+0x20>)
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]
}
 8005504:	bf00      	nop
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	20008979 	.word	0x20008979
 8005514:	2000897c 	.word	0x2000897c

08005518 <Save_ErrorTimestamp_Buffer>:

void Save_ErrorTimestamp_Buffer(uint8_t ErrorCode) {
 8005518:	b5b0      	push	{r4, r5, r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	4603      	mov	r3, r0
 8005520:	71fb      	strb	r3, [r7, #7]
	ErrorCodeBuf = ErrorCode;
 8005522:	4a3b      	ldr	r2, [pc, #236]	; (8005610 <Save_ErrorTimestamp_Buffer+0xf8>)
 8005524:	79fb      	ldrb	r3, [r7, #7]
 8005526:	7013      	strb	r3, [r2, #0]
	ErrorTimeStampBuf =
			__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))
 8005528:	483a      	ldr	r0, [pc, #232]	; (8005614 <Save_ErrorTimestamp_Buffer+0xfc>)
 800552a:	f7fe f86a 	bl	8003602 <LL_RTC_TIME_GetHour>
 800552e:	4603      	mov	r3, r0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	111b      	asrs	r3, r3, #4
 8005534:	b2db      	uxtb	r3, r3
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	b2db      	uxtb	r3, r3
 800553c:	461a      	mov	r2, r3
 800553e:	0092      	lsls	r2, r2, #2
 8005540:	4413      	add	r3, r2
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	b2dc      	uxtb	r4, r3
 8005546:	4833      	ldr	r0, [pc, #204]	; (8005614 <Save_ErrorTimestamp_Buffer+0xfc>)
 8005548:	f7fe f85b 	bl	8003602 <LL_RTC_TIME_GetHour>
 800554c:	4603      	mov	r3, r0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	b2db      	uxtb	r3, r3
 8005556:	4423      	add	r3, r4
 8005558:	b2db      	uxtb	r3, r3
 800555a:	461a      	mov	r2, r3
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800555c:	f242 7310 	movw	r3, #10000	; 0x2710
 8005560:	fb03 f402 	mul.w	r4, r3, r2
 8005564:	482b      	ldr	r0, [pc, #172]	; (8005614 <Save_ErrorTimestamp_Buffer+0xfc>)
 8005566:	f7fe f876 	bl	8003656 <LL_RTC_TIME_GetMinute>
 800556a:	4603      	mov	r3, r0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	111b      	asrs	r3, r3, #4
 8005570:	b2db      	uxtb	r3, r3
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	b2db      	uxtb	r3, r3
 8005578:	461a      	mov	r2, r3
 800557a:	0092      	lsls	r2, r2, #2
 800557c:	4413      	add	r3, r2
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	b2dd      	uxtb	r5, r3
 8005582:	4824      	ldr	r0, [pc, #144]	; (8005614 <Save_ErrorTimestamp_Buffer+0xfc>)
 8005584:	f7fe f867 	bl	8003656 <LL_RTC_TIME_GetMinute>
 8005588:	4603      	mov	r3, r0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	f003 030f 	and.w	r3, r3, #15
 8005590:	b2db      	uxtb	r3, r3
 8005592:	442b      	add	r3, r5
 8005594:	b2db      	uxtb	r3, r3
 8005596:	461a      	mov	r2, r3
 8005598:	2364      	movs	r3, #100	; 0x64
 800559a:	fb03 f302 	mul.w	r3, r3, r2
 800559e:	441c      	add	r4, r3
 80055a0:	481c      	ldr	r0, [pc, #112]	; (8005614 <Save_ErrorTimestamp_Buffer+0xfc>)
 80055a2:	f7fe f882 	bl	80036aa <LL_RTC_TIME_GetSecond>
 80055a6:	4603      	mov	r3, r0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	111b      	asrs	r3, r3, #4
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	461a      	mov	r2, r3
 80055b6:	0092      	lsls	r2, r2, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	b2dd      	uxtb	r5, r3
 80055be:	4815      	ldr	r0, [pc, #84]	; (8005614 <Save_ErrorTimestamp_Buffer+0xfc>)
 80055c0:	f7fe f873 	bl	80036aa <LL_RTC_TIME_GetSecond>
 80055c4:	4603      	mov	r3, r0
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	442b      	add	r3, r5
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	4423      	add	r3, r4
 80055d4:	461a      	mov	r2, r3
	ErrorTimeStampBuf =
 80055d6:	4b10      	ldr	r3, [pc, #64]	; (8005618 <Save_ErrorTimestamp_Buffer+0x100>)
 80055d8:	601a      	str	r2, [r3, #0]

	Error_reg_log.Error[Error_indx] = ErrorCode;
 80055da:	4b10      	ldr	r3, [pc, #64]	; (800561c <Save_ErrorTimestamp_Buffer+0x104>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	4619      	mov	r1, r3
 80055e0:	4a0f      	ldr	r2, [pc, #60]	; (8005620 <Save_ErrorTimestamp_Buffer+0x108>)
 80055e2:	79fb      	ldrb	r3, [r7, #7]
 80055e4:	5453      	strb	r3, [r2, r1]
	Error_reg_log.ErrorTime[Error_indx] = ErrorTimeStampBuf;
 80055e6:	4b0d      	ldr	r3, [pc, #52]	; (800561c <Save_ErrorTimestamp_Buffer+0x104>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	4b0a      	ldr	r3, [pc, #40]	; (8005618 <Save_ErrorTimestamp_Buffer+0x100>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	490b      	ldr	r1, [pc, #44]	; (8005620 <Save_ErrorTimestamp_Buffer+0x108>)
 80055f2:	1c83      	adds	r3, r0, #2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	440b      	add	r3, r1
 80055f8:	605a      	str	r2, [r3, #4]
	Error_indx++;
 80055fa:	4b08      	ldr	r3, [pc, #32]	; (800561c <Save_ErrorTimestamp_Buffer+0x104>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	3301      	adds	r3, #1
 8005600:	b2da      	uxtb	r2, r3
 8005602:	4b06      	ldr	r3, [pc, #24]	; (800561c <Save_ErrorTimestamp_Buffer+0x104>)
 8005604:	701a      	strb	r2, [r3, #0]
}
 8005606:	bf00      	nop
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bdb0      	pop	{r4, r5, r7, pc}
 800560e:	bf00      	nop
 8005610:	20008979 	.word	0x20008979
 8005614:	40002800 	.word	0x40002800
 8005618:	2000897c 	.word	0x2000897c
 800561c:	20008c6e 	.word	0x20008c6e
 8005620:	20008878 	.word	0x20008878

08005624 <AIM_Error_Handler>:

void AIM_Error_Handler(int AIM_Error_Code) {
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	switch (AIM_Error_Code) {
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3b01      	subs	r3, #1
 8005630:	2b0f      	cmp	r3, #15
 8005632:	f200 809c 	bhi.w	800576e <AIM_Error_Handler+0x14a>
 8005636:	a201      	add	r2, pc, #4	; (adr r2, 800563c <AIM_Error_Handler+0x18>)
 8005638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563c:	080056b1 	.word	0x080056b1
 8005640:	0800576f 	.word	0x0800576f
 8005644:	080056d7 	.word	0x080056d7
 8005648:	080056f1 	.word	0x080056f1
 800564c:	0800568b 	.word	0x0800568b
 8005650:	0800576f 	.word	0x0800576f
 8005654:	0800576f 	.word	0x0800576f
 8005658:	08005717 	.word	0x08005717
 800565c:	0800576f 	.word	0x0800576f
 8005660:	0800576f 	.word	0x0800576f
 8005664:	0800576f 	.word	0x0800576f
 8005668:	08005741 	.word	0x08005741
 800566c:	0800576f 	.word	0x0800576f
 8005670:	0800576f 	.word	0x0800576f
 8005674:	0800576f 	.word	0x0800576f
 8005678:	0800567d 	.word	0x0800567d

	case FPGA_SPI_R_Error:
		Save_ErrorTimestamp_Buffer(FPGA_SPI_R_Error);
 800567c:	2010      	movs	r0, #16
 800567e:	f7ff ff4b 	bl	8005518 <Save_ErrorTimestamp_Buffer>
		FATAL_Error = 1;
 8005682:	4b41      	ldr	r3, [pc, #260]	; (8005788 <AIM_Error_Handler+0x164>)
 8005684:	2201      	movs	r2, #1
 8005686:	701a      	strb	r2, [r3, #0]

		break;
 8005688:	e07a      	b.n	8005780 <AIM_Error_Handler+0x15c>

	case f_write_E:
		file_reopen();
 800568a:	f7fe fe89 	bl	80043a0 <file_reopen>
		if (Fat_write_read_fail == 1) // Could not solve write issue by reopening file
 800568e:	4b3f      	ldr	r3, [pc, #252]	; (800578c <AIM_Error_Handler+0x168>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d16d      	bne.n	8005772 <AIM_Error_Handler+0x14e>
				{
			Fat_read_mnt_fail = 0;
 8005696:	4b3e      	ldr	r3, [pc, #248]	; (8005790 <AIM_Error_Handler+0x16c>)
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(f_write_E);
 800569c:	2005      	movs	r0, #5
 800569e:	f7ff ff3b 	bl	8005518 <Save_ErrorTimestamp_Buffer>
			File_Sensor_write_issue = 1;
 80056a2:	4b3c      	ldr	r3, [pc, #240]	; (8005794 <AIM_Error_Handler+0x170>)
 80056a4:	2201      	movs	r2, #1
 80056a6:	701a      	strb	r2, [r3, #0]
			FATAL_Error = 1;
 80056a8:	4b37      	ldr	r3, [pc, #220]	; (8005788 <AIM_Error_Handler+0x164>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	701a      	strb	r2, [r3, #0]
		}

		break;
 80056ae:	e060      	b.n	8005772 <AIM_Error_Handler+0x14e>

	case f_open_E:

		file_mnt_reopen();
 80056b0:	f7fe fe92 	bl	80043d8 <file_mnt_reopen>
		if (Fat_read_mnt_fail == 1) // Could not solve read issue by FATFS mount
 80056b4:	4b36      	ldr	r3, [pc, #216]	; (8005790 <AIM_Error_Handler+0x16c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d15c      	bne.n	8005776 <AIM_Error_Handler+0x152>
				{
			Fat_read_mnt_fail = 0;
 80056bc:	4b34      	ldr	r3, [pc, #208]	; (8005790 <AIM_Error_Handler+0x16c>)
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(f_open_E);
 80056c2:	2001      	movs	r0, #1
 80056c4:	f7ff ff28 	bl	8005518 <Save_ErrorTimestamp_Buffer>
			FATAL_Error = 1;
 80056c8:	4b2f      	ldr	r3, [pc, #188]	; (8005788 <AIM_Error_Handler+0x164>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	701a      	strb	r2, [r3, #0]
			Skip_FATFS = 1;
 80056ce:	4b32      	ldr	r3, [pc, #200]	; (8005798 <AIM_Error_Handler+0x174>)
 80056d0:	2201      	movs	r2, #1
 80056d2:	701a      	strb	r2, [r3, #0]
		}

		break;
 80056d4:	e04f      	b.n	8005776 <AIM_Error_Handler+0x152>

	case f_mount_E:
		Try_FATFS_Mount();
 80056d6:	f7fe fe0f 	bl	80042f8 <Try_FATFS_Mount>
		if (Skip_FATFS == 1)  // Could not solve FATFS mount
 80056da:	4b2f      	ldr	r3, [pc, #188]	; (8005798 <AIM_Error_Handler+0x174>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d14b      	bne.n	800577a <AIM_Error_Handler+0x156>
				{
			Save_ErrorTimestamp_Buffer(f_mount_E);
 80056e2:	2003      	movs	r0, #3
 80056e4:	f7ff ff18 	bl	8005518 <Save_ErrorTimestamp_Buffer>
			FATAL_Error = 1;
 80056e8:	4b27      	ldr	r3, [pc, #156]	; (8005788 <AIM_Error_Handler+0x164>)
 80056ea:	2201      	movs	r2, #1
 80056ec:	701a      	strb	r2, [r3, #0]
		}
		break;
 80056ee:	e044      	b.n	800577a <AIM_Error_Handler+0x156>

	case f_sync_E:
		file_reopen_sync();
 80056f0:	f7fe fe3a 	bl	8004368 <file_reopen_sync>
		if (Fat_sync_read_fail == 1) // Could not solve write issue by reopening file
 80056f4:	4b29      	ldr	r3, [pc, #164]	; (800579c <AIM_Error_Handler+0x178>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d140      	bne.n	800577e <AIM_Error_Handler+0x15a>
				{
			Fat_sync_read_fail = 0;
 80056fc:	4b27      	ldr	r3, [pc, #156]	; (800579c <AIM_Error_Handler+0x178>)
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(f_sync_E);
 8005702:	2004      	movs	r0, #4
 8005704:	f7ff ff08 	bl	8005518 <Save_ErrorTimestamp_Buffer>
			File_Sensor_close_issue = 1;
 8005708:	4b25      	ldr	r3, [pc, #148]	; (80057a0 <AIM_Error_Handler+0x17c>)
 800570a:	2201      	movs	r2, #1
 800570c:	701a      	strb	r2, [r3, #0]
			FATAL_Error = 1;
 800570e:	4b1e      	ldr	r3, [pc, #120]	; (8005788 <AIM_Error_Handler+0x164>)
 8005710:	2201      	movs	r2, #1
 8005712:	701a      	strb	r2, [r3, #0]
		}

		break;
 8005714:	e033      	b.n	800577e <AIM_Error_Handler+0x15a>

	case SPI_Acc_Error:

		if (SPI_ErrorCnt > 3) {
 8005716:	4b23      	ldr	r3, [pc, #140]	; (80057a4 <AIM_Error_Handler+0x180>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b03      	cmp	r3, #3
 800571c:	d909      	bls.n	8005732 <AIM_Error_Handler+0x10e>
			SPI_ErrorCnt = 0;
 800571e:	4b21      	ldr	r3, [pc, #132]	; (80057a4 <AIM_Error_Handler+0x180>)
 8005720:	2200      	movs	r2, #0
 8005722:	701a      	strb	r2, [r3, #0]
			FATAL_Error = 1;
 8005724:	4b18      	ldr	r3, [pc, #96]	; (8005788 <AIM_Error_Handler+0x164>)
 8005726:	2201      	movs	r2, #1
 8005728:	701a      	strb	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(SPI_Acc_Error);
 800572a:	2008      	movs	r0, #8
 800572c:	f7ff fef4 	bl	8005518 <Save_ErrorTimestamp_Buffer>
		} else {
			SPI_ErrorCnt++;
		}
		break;
 8005730:	e026      	b.n	8005780 <AIM_Error_Handler+0x15c>
			SPI_ErrorCnt++;
 8005732:	4b1c      	ldr	r3, [pc, #112]	; (80057a4 <AIM_Error_Handler+0x180>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	3301      	adds	r3, #1
 8005738:	b2da      	uxtb	r2, r3
 800573a:	4b1a      	ldr	r3, [pc, #104]	; (80057a4 <AIM_Error_Handler+0x180>)
 800573c:	701a      	strb	r2, [r3, #0]
		break;
 800573e:	e01f      	b.n	8005780 <AIM_Error_Handler+0x15c>

	case ADC_R_Error:
		ADC_Reset();
 8005740:	f7ff fdba 	bl	80052b8 <ADC_Reset>
		if (ADC_ErrorCnt > 3) {
 8005744:	4b18      	ldr	r3, [pc, #96]	; (80057a8 <AIM_Error_Handler+0x184>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b03      	cmp	r3, #3
 800574a:	d909      	bls.n	8005760 <AIM_Error_Handler+0x13c>
			ADC_ErrorCnt = 0;
 800574c:	4b16      	ldr	r3, [pc, #88]	; (80057a8 <AIM_Error_Handler+0x184>)
 800574e:	2200      	movs	r2, #0
 8005750:	701a      	strb	r2, [r3, #0]
			FATAL_Error = 1;
 8005752:	4b0d      	ldr	r3, [pc, #52]	; (8005788 <AIM_Error_Handler+0x164>)
 8005754:	2201      	movs	r2, #1
 8005756:	701a      	strb	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(ADC_R_Error);
 8005758:	200c      	movs	r0, #12
 800575a:	f7ff fedd 	bl	8005518 <Save_ErrorTimestamp_Buffer>
		} else {
			ADC_ErrorCnt++;
		}

		break;
 800575e:	e00f      	b.n	8005780 <AIM_Error_Handler+0x15c>
			ADC_ErrorCnt++;
 8005760:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <AIM_Error_Handler+0x184>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	3301      	adds	r3, #1
 8005766:	b2da      	uxtb	r2, r3
 8005768:	4b0f      	ldr	r3, [pc, #60]	; (80057a8 <AIM_Error_Handler+0x184>)
 800576a:	701a      	strb	r2, [r3, #0]
		break;
 800576c:	e008      	b.n	8005780 <AIM_Error_Handler+0x15c>

	default:

		break;
 800576e:	bf00      	nop
 8005770:	e006      	b.n	8005780 <AIM_Error_Handler+0x15c>
		break;
 8005772:	bf00      	nop
 8005774:	e004      	b.n	8005780 <AIM_Error_Handler+0x15c>
		break;
 8005776:	bf00      	nop
 8005778:	e002      	b.n	8005780 <AIM_Error_Handler+0x15c>
		break;
 800577a:	bf00      	nop
 800577c:	e000      	b.n	8005780 <AIM_Error_Handler+0x15c>
		break;
 800577e:	bf00      	nop

	}
}
 8005780:	bf00      	nop
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	20008f70 	.word	0x20008f70
 800578c:	20008c14 	.word	0x20008c14
 8005790:	20008cc4 	.word	0x20008cc4
 8005794:	20008c34 	.word	0x20008c34
 8005798:	20008f71 	.word	0x20008f71
 800579c:	20008c18 	.word	0x20008c18
 80057a0:	20008d06 	.word	0x20008d06
 80057a4:	20009208 	.word	0x20009208
 80057a8:	20008f78 	.word	0x20008f78

080057ac <AIM_DataStart_at_Reset>:

void AIM_DataStart_at_Reset(void) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
	SD_POWER_ON();
 80057b0:	f7fc fa86 	bl	8001cc0 <SD_POWER_ON>
	SD_cnt_limit = 3;                    // After 50 write, File will Sync
 80057b4:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <AIM_DataStart_at_Reset+0x48>)
 80057b6:	2203      	movs	r2, #3
 80057b8:	601a      	str	r2, [r3, #0]
	Data_log_Start_Resume = 1;
 80057ba:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <AIM_DataStart_at_Reset+0x4c>)
 80057bc:	2201      	movs	r2, #1
 80057be:	701a      	strb	r2, [r3, #0]
	FATFS_Init();
 80057c0:	f7fe fa3c 	bl	8003c3c <FATFS_Init>
	Open_File_For_Sensor_Write();
 80057c4:	f7fe fe42 	bl	800444c <Open_File_For_Sensor_Write>
	Reset_All();
 80057c8:	f7fe fd04 	bl	80041d4 <Reset_All>
//	  Start_LPTIMCounter2(0x10); //0xFF //0x4032768
	// Greg end comment

	// Greg start
	// Start interrupt (speed = 32,768 Hz / hex_value, i.e. 0x40 = 64 so speed = 32,768/64 = 512 Hz)
	Start_LPTIMCounter2(0x40);
 80057cc:	2040      	movs	r0, #64	; 0x40
 80057ce:	f001 f85f 	bl	8006890 <Start_LPTIMCounter2>
	// Greg end

	LL_LPTIM_EnableIT_ARRM(LPTIM2);
 80057d2:	480a      	ldr	r0, [pc, #40]	; (80057fc <AIM_DataStart_at_Reset+0x50>)
 80057d4:	f7fd fdb2 	bl	800333c <LL_LPTIM_EnableIT_ARRM>
	NVIC_EnableIRQ(LPTIM2_IRQn);
 80057d8:	2042      	movs	r0, #66	; 0x42
 80057da:	f7fd fb6d 	bl	8002eb8 <NVIC_EnableIRQ>
	Pros_state = LP_STOP;
 80057de:	4b08      	ldr	r3, [pc, #32]	; (8005800 <AIM_DataStart_at_Reset+0x54>)
 80057e0:	2201      	movs	r2, #1
 80057e2:	701a      	strb	r2, [r3, #0]
	USB_Mode = 1;
 80057e4:	4b07      	ldr	r3, [pc, #28]	; (8005804 <AIM_DataStart_at_Reset+0x58>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	701a      	strb	r2, [r3, #0]
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 80057ea:	2017      	movs	r0, #23
 80057ec:	f7fd fb64 	bl	8002eb8 <NVIC_EnableIRQ>

}
 80057f0:	bf00      	nop
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	20008bda 	.word	0x20008bda
 80057f8:	20008971 	.word	0x20008971
 80057fc:	40009400 	.word	0x40009400
 8005800:	200088b4 	.word	0x200088b4
 8005804:	20009240 	.word	0x20009240

08005808 <IMU1_read>:
//    BSbuffer[s_flag].MZ1[Sub_cnt]=((int16_t)response[19]<<8)|response[18];

	return data_az;
}

struct imu_data IMU1_read(void) {
 8005808:	b590      	push	{r4, r7, lr}
 800580a:	b08d      	sub	sp, #52	; 0x34
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
	struct imu_data IMU1;
	uint8_t response[21];
	WriteReg1(MPUREG_I2C_SLV0_ADDR, AK8963_I2C_ADDR | READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 8005810:	218c      	movs	r1, #140	; 0x8c
 8005812:	2025      	movs	r0, #37	; 0x25
 8005814:	f7ff fbe4 	bl	8004fe0 <WriteReg1>
	WriteReg1(MPUREG_I2C_SLV0_REG, AK8963_HXL); // I2C slave 0 register address from where to begin data transfer
 8005818:	2103      	movs	r1, #3
 800581a:	2026      	movs	r0, #38	; 0x26
 800581c:	f7ff fbe0 	bl	8004fe0 <WriteReg1>
	WriteReg1(MPUREG_I2C_SLV0_CTRL, 0x87); // Read 7 bytes from the magnetometer
 8005820:	2187      	movs	r1, #135	; 0x87
 8005822:	2027      	movs	r0, #39	; 0x27
 8005824:	f7ff fbdc 	bl	8004fe0 <WriteReg1>

	ReadRegs1(MPUREG_ACCEL_XOUT_H, response, 21);
 8005828:	f107 030c 	add.w	r3, r7, #12
 800582c:	2215      	movs	r2, #21
 800582e:	4619      	mov	r1, r3
 8005830:	203b      	movs	r0, #59	; 0x3b
 8005832:	f7ff fc69 	bl	8005108 <ReadRegs1>

	IMU1.AX = ((int16_t) response[0] << 8) | response[1];
 8005836:	7b3b      	ldrb	r3, [r7, #12]
 8005838:	021b      	lsls	r3, r3, #8
 800583a:	b21a      	sxth	r2, r3
 800583c:	7b7b      	ldrb	r3, [r7, #13]
 800583e:	b21b      	sxth	r3, r3
 8005840:	4313      	orrs	r3, r2
 8005842:	b21b      	sxth	r3, r3
 8005844:	84bb      	strh	r3, [r7, #36]	; 0x24
	IMU1.AY = ((int16_t) response[2] << 8) | response[3];
 8005846:	7bbb      	ldrb	r3, [r7, #14]
 8005848:	021b      	lsls	r3, r3, #8
 800584a:	b21a      	sxth	r2, r3
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	b21b      	sxth	r3, r3
 8005850:	4313      	orrs	r3, r2
 8005852:	b21b      	sxth	r3, r3
 8005854:	84fb      	strh	r3, [r7, #38]	; 0x26
	IMU1.AZ = ((int16_t) response[4] << 8) | response[5];
 8005856:	7c3b      	ldrb	r3, [r7, #16]
 8005858:	021b      	lsls	r3, r3, #8
 800585a:	b21a      	sxth	r2, r3
 800585c:	7c7b      	ldrb	r3, [r7, #17]
 800585e:	b21b      	sxth	r3, r3
 8005860:	4313      	orrs	r3, r2
 8005862:	b21b      	sxth	r3, r3
 8005864:	853b      	strh	r3, [r7, #40]	; 0x28
	IMU1.GX = ((int16_t) response[8] << 8) | response[9];
 8005866:	7d3b      	ldrb	r3, [r7, #20]
 8005868:	021b      	lsls	r3, r3, #8
 800586a:	b21a      	sxth	r2, r3
 800586c:	7d7b      	ldrb	r3, [r7, #21]
 800586e:	b21b      	sxth	r3, r3
 8005870:	4313      	orrs	r3, r2
 8005872:	b21b      	sxth	r3, r3
 8005874:	857b      	strh	r3, [r7, #42]	; 0x2a
	IMU1.GY = ((int16_t) response[10] << 8) | response[11];
 8005876:	7dbb      	ldrb	r3, [r7, #22]
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	b21a      	sxth	r2, r3
 800587c:	7dfb      	ldrb	r3, [r7, #23]
 800587e:	b21b      	sxth	r3, r3
 8005880:	4313      	orrs	r3, r2
 8005882:	b21b      	sxth	r3, r3
 8005884:	85bb      	strh	r3, [r7, #44]	; 0x2c
	IMU1.GZ = ((int16_t) response[12] << 8) | response[13];
 8005886:	7e3b      	ldrb	r3, [r7, #24]
 8005888:	021b      	lsls	r3, r3, #8
 800588a:	b21a      	sxth	r2, r3
 800588c:	7e7b      	ldrb	r3, [r7, #25]
 800588e:	b21b      	sxth	r3, r3
 8005890:	4313      	orrs	r3, r2
 8005892:	b21b      	sxth	r3, r3
 8005894:	85fb      	strh	r3, [r7, #46]	; 0x2e

	return IMU1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	461c      	mov	r4, r3
 800589a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800589e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80058a0:	6020      	str	r0, [r4, #0]
 80058a2:	6061      	str	r1, [r4, #4]
 80058a4:	60a2      	str	r2, [r4, #8]
}
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	3734      	adds	r7, #52	; 0x34
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd90      	pop	{r4, r7, pc}
	...

080058b0 <Knee_data_storeIMU>:

void Knee_data_storeIMU(int value1, int value2, int value3, int value4,
		int value5, int value6) {
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	603b      	str	r3, [r7, #0]

	BSbuffer[s_flag].AX1[Sub_cnt] = value1;
 80058be:	4b34      	ldr	r3, [pc, #208]	; (8005990 <Knee_data_storeIMU+0xe0>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	461a      	mov	r2, r3
 80058c6:	4b33      	ldr	r3, [pc, #204]	; (8005994 <Knee_data_storeIMU+0xe4>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68f9      	ldr	r1, [r7, #12]
 80058cc:	b208      	sxth	r0, r1
 80058ce:	4932      	ldr	r1, [pc, #200]	; (8005998 <Knee_data_storeIMU+0xe8>)
 80058d0:	0352      	lsls	r2, r2, #13
 80058d2:	4413      	add	r3, r2
 80058d4:	3308      	adds	r3, #8
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	440b      	add	r3, r1
 80058da:	4602      	mov	r2, r0
 80058dc:	80da      	strh	r2, [r3, #6]
	BSbuffer[s_flag].AY1[Sub_cnt] = value2;
 80058de:	4b2c      	ldr	r3, [pc, #176]	; (8005990 <Knee_data_storeIMU+0xe0>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	461a      	mov	r2, r3
 80058e6:	4b2b      	ldr	r3, [pc, #172]	; (8005994 <Knee_data_storeIMU+0xe4>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	b208      	sxth	r0, r1
 80058ee:	492a      	ldr	r1, [pc, #168]	; (8005998 <Knee_data_storeIMU+0xe8>)
 80058f0:	0352      	lsls	r2, r2, #13
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80058f8:	4602      	mov	r2, r0
 80058fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	BSbuffer[s_flag].AZ1[Sub_cnt] = value3;
 80058fe:	4b24      	ldr	r3, [pc, #144]	; (8005990 <Knee_data_storeIMU+0xe0>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	b2db      	uxtb	r3, r3
 8005904:	461a      	mov	r2, r3
 8005906:	4b23      	ldr	r3, [pc, #140]	; (8005994 <Knee_data_storeIMU+0xe4>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	b208      	sxth	r0, r1
 800590e:	4922      	ldr	r1, [pc, #136]	; (8005998 <Knee_data_storeIMU+0xe8>)
 8005910:	0352      	lsls	r2, r2, #13
 8005912:	4413      	add	r3, r2
 8005914:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	440b      	add	r3, r1
 800591c:	4602      	mov	r2, r0
 800591e:	805a      	strh	r2, [r3, #2]
	BSbuffer[s_flag].GX1[Sub_cnt] = value4;
 8005920:	4b1b      	ldr	r3, [pc, #108]	; (8005990 <Knee_data_storeIMU+0xe0>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	b2db      	uxtb	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	4b1a      	ldr	r3, [pc, #104]	; (8005994 <Knee_data_storeIMU+0xe4>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6839      	ldr	r1, [r7, #0]
 800592e:	b208      	sxth	r0, r1
 8005930:	4919      	ldr	r1, [pc, #100]	; (8005998 <Knee_data_storeIMU+0xe8>)
 8005932:	0352      	lsls	r2, r2, #13
 8005934:	4413      	add	r3, r2
 8005936:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	440b      	add	r3, r1
 800593e:	4602      	mov	r2, r0
 8005940:	809a      	strh	r2, [r3, #4]
	BSbuffer[s_flag].GY1[Sub_cnt] = value5;
 8005942:	4b13      	ldr	r3, [pc, #76]	; (8005990 <Knee_data_storeIMU+0xe0>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	461a      	mov	r2, r3
 800594a:	4b12      	ldr	r3, [pc, #72]	; (8005994 <Knee_data_storeIMU+0xe4>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69b9      	ldr	r1, [r7, #24]
 8005950:	b208      	sxth	r0, r1
 8005952:	4911      	ldr	r1, [pc, #68]	; (8005998 <Knee_data_storeIMU+0xe8>)
 8005954:	0352      	lsls	r2, r2, #13
 8005956:	4413      	add	r3, r2
 8005958:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	440b      	add	r3, r1
 8005960:	4602      	mov	r2, r0
 8005962:	80da      	strh	r2, [r3, #6]
	BSbuffer[s_flag].GZ1[Sub_cnt] = value6;
 8005964:	4b0a      	ldr	r3, [pc, #40]	; (8005990 <Knee_data_storeIMU+0xe0>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	b2db      	uxtb	r3, r3
 800596a:	461a      	mov	r2, r3
 800596c:	4b09      	ldr	r3, [pc, #36]	; (8005994 <Knee_data_storeIMU+0xe4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	69f9      	ldr	r1, [r7, #28]
 8005972:	b208      	sxth	r0, r1
 8005974:	4908      	ldr	r1, [pc, #32]	; (8005998 <Knee_data_storeIMU+0xe8>)
 8005976:	0352      	lsls	r2, r2, #13
 8005978:	4413      	add	r3, r2
 800597a:	f503 6317 	add.w	r3, r3, #2416	; 0x970
 800597e:	4602      	mov	r2, r0
 8005980:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

}
 8005984:	bf00      	nop
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	200005ac 	.word	0x200005ac
 8005994:	200005a8 	.word	0x200005a8
 8005998:	20000874 	.word	0x20000874

0800599c <Knee_data_store>:
//	BSbuffer[s_flag].data8[Sub_cnt]=val8;
//
//
//}

void Knee_data_store(int val1, int val2, int val3, int val4) {
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	603b      	str	r3, [r7, #0]
	BSbuffer[s_flag].data1[Sub_cnt] = val1;
 80059aa:	4b25      	ldr	r3, [pc, #148]	; (8005a40 <Knee_data_store+0xa4>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	461a      	mov	r2, r3
 80059b2:	4b24      	ldr	r3, [pc, #144]	; (8005a44 <Knee_data_store+0xa8>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68f9      	ldr	r1, [r7, #12]
 80059b8:	b208      	sxth	r0, r1
 80059ba:	4923      	ldr	r1, [pc, #140]	; (8005a48 <Knee_data_store+0xac>)
 80059bc:	0352      	lsls	r2, r2, #13
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6335 	add.w	r3, r3, #2896	; 0xb50
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	440b      	add	r3, r1
 80059c8:	4602      	mov	r2, r0
 80059ca:	805a      	strh	r2, [r3, #2]
	BSbuffer[s_flag].data2[Sub_cnt] = val2;
 80059cc:	4b1c      	ldr	r3, [pc, #112]	; (8005a40 <Knee_data_store+0xa4>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	461a      	mov	r2, r3
 80059d4:	4b1b      	ldr	r3, [pc, #108]	; (8005a44 <Knee_data_store+0xa8>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68b9      	ldr	r1, [r7, #8]
 80059da:	b208      	sxth	r0, r1
 80059dc:	491a      	ldr	r1, [pc, #104]	; (8005a48 <Knee_data_store+0xac>)
 80059de:	0352      	lsls	r2, r2, #13
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6353 	add.w	r3, r3, #3376	; 0xd30
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	440b      	add	r3, r1
 80059ea:	4602      	mov	r2, r0
 80059ec:	809a      	strh	r2, [r3, #4]
	BSbuffer[s_flag].data3[Sub_cnt] = val3;
 80059ee:	4b14      	ldr	r3, [pc, #80]	; (8005a40 <Knee_data_store+0xa4>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	461a      	mov	r2, r3
 80059f6:	4b13      	ldr	r3, [pc, #76]	; (8005a44 <Knee_data_store+0xa8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	b208      	sxth	r0, r1
 80059fe:	4912      	ldr	r1, [pc, #72]	; (8005a48 <Knee_data_store+0xac>)
 8005a00:	0352      	lsls	r2, r2, #13
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6371 	add.w	r3, r3, #3856	; 0xf10
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	440b      	add	r3, r1
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	80da      	strh	r2, [r3, #6]
	BSbuffer[s_flag].data4[Sub_cnt] = val4;
 8005a10:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <Knee_data_store+0xa4>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	4b0a      	ldr	r3, [pc, #40]	; (8005a44 <Knee_data_store+0xa8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	b208      	sxth	r0, r1
 8005a20:	4909      	ldr	r1, [pc, #36]	; (8005a48 <Knee_data_store+0xac>)
 8005a22:	0352      	lsls	r2, r2, #13
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005a2a:	3314      	adds	r3, #20
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
//	BSbuffer[s_flag].data5[Sub_cnt]=val5;
//	BSbuffer[s_flag].data6[Sub_cnt]=val6;
//	BSbuffer[s_flag].data7[Sub_cnt]=val7;
//	BSbuffer[s_flag].data8[Sub_cnt]=val8;
}
 8005a32:	bf00      	nop
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	200005ac 	.word	0x200005ac
 8005a44:	200005a8 	.word	0x200005a8
 8005a48:	20000874 	.word	0x20000874

08005a4c <Knee_data_store1>:

void Knee_data_store1(int val5, int val6, int val7, int val8) {
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
//	BSbuffer[s_flag].data1[Sub_cnt]=val1;
//	BSbuffer[s_flag].data2[Sub_cnt]=val2;
//	BSbuffer[s_flag].data3[Sub_cnt]=val3;
//	BSbuffer[s_flag].data4[Sub_cnt]=val4;
	BSbuffer[s_flag].data5[Sub_cnt] = val5;
 8005a5a:	4b26      	ldr	r3, [pc, #152]	; (8005af4 <Knee_data_store1+0xa8>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	461a      	mov	r2, r3
 8005a62:	4b25      	ldr	r3, [pc, #148]	; (8005af8 <Knee_data_store1+0xac>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68f9      	ldr	r1, [r7, #12]
 8005a68:	b208      	sxth	r0, r1
 8005a6a:	4924      	ldr	r1, [pc, #144]	; (8005afc <Knee_data_store1+0xb0>)
 8005a6c:	0352      	lsls	r2, r2, #13
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8005a74:	3314      	adds	r3, #20
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	440b      	add	r3, r1
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	805a      	strh	r2, [r3, #2]
	BSbuffer[s_flag].data6[Sub_cnt] = val6;
 8005a7e:	4b1d      	ldr	r3, [pc, #116]	; (8005af4 <Knee_data_store1+0xa8>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	461a      	mov	r2, r3
 8005a86:	4b1c      	ldr	r3, [pc, #112]	; (8005af8 <Knee_data_store1+0xac>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68b9      	ldr	r1, [r7, #8]
 8005a8c:	b208      	sxth	r0, r1
 8005a8e:	491b      	ldr	r1, [pc, #108]	; (8005afc <Knee_data_store1+0xb0>)
 8005a90:	0352      	lsls	r2, r2, #13
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 53a5 	add.w	r3, r3, #5280	; 0x14a0
 8005a98:	3314      	adds	r3, #20
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	440b      	add	r3, r1
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	809a      	strh	r2, [r3, #4]
	BSbuffer[s_flag].data7[Sub_cnt] = val7;
 8005aa2:	4b14      	ldr	r3, [pc, #80]	; (8005af4 <Knee_data_store1+0xa8>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	4b13      	ldr	r3, [pc, #76]	; (8005af8 <Knee_data_store1+0xac>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	b208      	sxth	r0, r1
 8005ab2:	4912      	ldr	r1, [pc, #72]	; (8005afc <Knee_data_store1+0xb0>)
 8005ab4:	0352      	lsls	r2, r2, #13
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8005abc:	3314      	adds	r3, #20
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	440b      	add	r3, r1
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	80da      	strh	r2, [r3, #6]
	BSbuffer[s_flag].data8[Sub_cnt] = val8;
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <Knee_data_store1+0xa8>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	461a      	mov	r2, r3
 8005ace:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <Knee_data_store1+0xac>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	b208      	sxth	r0, r1
 8005ad6:	4909      	ldr	r1, [pc, #36]	; (8005afc <Knee_data_store1+0xb0>)
 8005ad8:	0352      	lsls	r2, r2, #13
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 53c3 	add.w	r3, r3, #6240	; 0x1860
 8005ae0:	3318      	adds	r3, #24
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8005ae8:	bf00      	nop
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	200005ac 	.word	0x200005ac
 8005af8:	200005a8 	.word	0x200005a8
 8005afc:	20000874 	.word	0x20000874

08005b00 <MPU1_SPI1_init>:
		data = (float) mag_data_raw[i - 7];
		mag_data[i - 7] = data * Magnetometer_ASA[i - 7];
	}
}

void MPU1_SPI1_init(void) {
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08e      	sub	sp, #56	; 0x38
 8005b04:	af00      	add	r7, sp, #0
	float temp[3];
	uint8_t i = 0;
 8005b06:	2300      	movs	r3, #0
 8005b08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = { { BIT_H_RESET,
 8005b0c:	2380      	movs	r3, #128	; 0x80
 8005b0e:	713b      	strb	r3, [r7, #4]
 8005b10:	236b      	movs	r3, #107	; 0x6b
 8005b12:	717b      	strb	r3, [r7, #5]
 8005b14:	2301      	movs	r3, #1
 8005b16:	71bb      	strb	r3, [r7, #6]
 8005b18:	236b      	movs	r3, #107	; 0x6b
 8005b1a:	71fb      	strb	r3, [r7, #7]
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	723b      	strb	r3, [r7, #8]
 8005b20:	236c      	movs	r3, #108	; 0x6c
 8005b22:	727b      	strb	r3, [r7, #9]
 8005b24:	4b34      	ldr	r3, [pc, #208]	; (8005bf8 <MPU1_SPI1_init+0xf8>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	72bb      	strb	r3, [r7, #10]
 8005b2a:	231a      	movs	r3, #26
 8005b2c:	72fb      	strb	r3, [r7, #11]
 8005b2e:	2310      	movs	r3, #16
 8005b30:	733b      	strb	r3, [r7, #12]
 8005b32:	231b      	movs	r3, #27
 8005b34:	737b      	strb	r3, [r7, #13]
 8005b36:	2310      	movs	r3, #16
 8005b38:	73bb      	strb	r3, [r7, #14]
 8005b3a:	231c      	movs	r3, #28
 8005b3c:	73fb      	strb	r3, [r7, #15]
 8005b3e:	4b2f      	ldr	r3, [pc, #188]	; (8005bfc <MPU1_SPI1_init+0xfc>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	743b      	strb	r3, [r7, #16]
 8005b44:	231d      	movs	r3, #29
 8005b46:	747b      	strb	r3, [r7, #17]
 8005b48:	2312      	movs	r3, #18
 8005b4a:	74bb      	strb	r3, [r7, #18]
 8005b4c:	2337      	movs	r3, #55	; 0x37
 8005b4e:	74fb      	strb	r3, [r7, #19]
 8005b50:	2330      	movs	r3, #48	; 0x30
 8005b52:	753b      	strb	r3, [r7, #20]
 8005b54:	236a      	movs	r3, #106	; 0x6a
 8005b56:	757b      	strb	r3, [r7, #21]
 8005b58:	230d      	movs	r3, #13
 8005b5a:	75bb      	strb	r3, [r7, #22]
 8005b5c:	2324      	movs	r3, #36	; 0x24
 8005b5e:	75fb      	strb	r3, [r7, #23]
 8005b60:	230c      	movs	r3, #12
 8005b62:	763b      	strb	r3, [r7, #24]
 8005b64:	2325      	movs	r3, #37	; 0x25
 8005b66:	767b      	strb	r3, [r7, #25]
 8005b68:	230b      	movs	r3, #11
 8005b6a:	76bb      	strb	r3, [r7, #26]
 8005b6c:	2326      	movs	r3, #38	; 0x26
 8005b6e:	76fb      	strb	r3, [r7, #27]
 8005b70:	2301      	movs	r3, #1
 8005b72:	773b      	strb	r3, [r7, #28]
 8005b74:	2363      	movs	r3, #99	; 0x63
 8005b76:	777b      	strb	r3, [r7, #29]
 8005b78:	2381      	movs	r3, #129	; 0x81
 8005b7a:	77bb      	strb	r3, [r7, #30]
 8005b7c:	2327      	movs	r3, #39	; 0x27
 8005b7e:	77fb      	strb	r3, [r7, #31]
 8005b80:	230a      	movs	r3, #10
 8005b82:	f887 3020 	strb.w	r3, [r7, #32]
 8005b86:	2326      	movs	r3, #38	; 0x26
 8005b88:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8005b8c:	2316      	movs	r3, #22
 8005b8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b92:	2363      	movs	r3, #99	; 0x63
 8005b94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b98:	2381      	movs	r3, #129	; 0x81
 8005b9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8005b9e:	2327      	movs	r3, #39	; 0x27
 8005ba0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#endif
			{ 0x81, MPUREG_I2C_SLV0_CTRL }  //Enable I2C and set 1 byte

	};

	for (i = 0; i < MPU_InitRegNum; i++) {
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005baa:	e01c      	b.n	8005be6 <MPU1_SPI1_init+0xe6>
		WriteReg1(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 8005bac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f813 2c33 	ldrb.w	r2, [r3, #-51]
 8005bbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005bc6:	440b      	add	r3, r1
 8005bc8:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4610      	mov	r0, r2
 8005bd0:	f7ff fa06 	bl	8004fe0 <WriteReg1>
		delay_us(1000); // I2C must slow down the write speed, otherwise it won't work
 8005bd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bd8:	f000 fe3c 	bl	8006854 <delay_us>
	for (i = 0; i < MPU_InitRegNum; i++) {
 8005bdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005be0:	3301      	adds	r3, #1
 8005be2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005be6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005bea:	2b10      	cmp	r3, #16
 8005bec:	d9de      	bls.n	8005bac <MPU1_SPI1_init+0xac>
	//   set_gyro_scale(BITS_FS_250DPS);

	//   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
	//   return 0;

}
 8005bee:	bf00      	nop
 8005bf0:	3738      	adds	r7, #56	; 0x38
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000012 	.word	0x20000012
 8005bfc:	20000013 	.word	0x20000013

08005c00 <MPU2_SPI1_init>:

void MPU2_SPI1_init(void) {
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08e      	sub	sp, #56	; 0x38
 8005c04:	af00      	add	r7, sp, #0
	float temp[3];
	uint8_t i = 0;
 8005c06:	2300      	movs	r3, #0
 8005c08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = { { BIT_H_RESET,
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	713b      	strb	r3, [r7, #4]
 8005c10:	236b      	movs	r3, #107	; 0x6b
 8005c12:	717b      	strb	r3, [r7, #5]
 8005c14:	2301      	movs	r3, #1
 8005c16:	71bb      	strb	r3, [r7, #6]
 8005c18:	236b      	movs	r3, #107	; 0x6b
 8005c1a:	71fb      	strb	r3, [r7, #7]
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	723b      	strb	r3, [r7, #8]
 8005c20:	236c      	movs	r3, #108	; 0x6c
 8005c22:	727b      	strb	r3, [r7, #9]
 8005c24:	4b34      	ldr	r3, [pc, #208]	; (8005cf8 <MPU2_SPI1_init+0xf8>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	72bb      	strb	r3, [r7, #10]
 8005c2a:	231a      	movs	r3, #26
 8005c2c:	72fb      	strb	r3, [r7, #11]
 8005c2e:	2310      	movs	r3, #16
 8005c30:	733b      	strb	r3, [r7, #12]
 8005c32:	231b      	movs	r3, #27
 8005c34:	737b      	strb	r3, [r7, #13]
 8005c36:	2310      	movs	r3, #16
 8005c38:	73bb      	strb	r3, [r7, #14]
 8005c3a:	231c      	movs	r3, #28
 8005c3c:	73fb      	strb	r3, [r7, #15]
 8005c3e:	4b2f      	ldr	r3, [pc, #188]	; (8005cfc <MPU2_SPI1_init+0xfc>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	743b      	strb	r3, [r7, #16]
 8005c44:	231d      	movs	r3, #29
 8005c46:	747b      	strb	r3, [r7, #17]
 8005c48:	2312      	movs	r3, #18
 8005c4a:	74bb      	strb	r3, [r7, #18]
 8005c4c:	2337      	movs	r3, #55	; 0x37
 8005c4e:	74fb      	strb	r3, [r7, #19]
 8005c50:	2330      	movs	r3, #48	; 0x30
 8005c52:	753b      	strb	r3, [r7, #20]
 8005c54:	236a      	movs	r3, #106	; 0x6a
 8005c56:	757b      	strb	r3, [r7, #21]
 8005c58:	230d      	movs	r3, #13
 8005c5a:	75bb      	strb	r3, [r7, #22]
 8005c5c:	2324      	movs	r3, #36	; 0x24
 8005c5e:	75fb      	strb	r3, [r7, #23]
 8005c60:	230c      	movs	r3, #12
 8005c62:	763b      	strb	r3, [r7, #24]
 8005c64:	2325      	movs	r3, #37	; 0x25
 8005c66:	767b      	strb	r3, [r7, #25]
 8005c68:	230b      	movs	r3, #11
 8005c6a:	76bb      	strb	r3, [r7, #26]
 8005c6c:	2326      	movs	r3, #38	; 0x26
 8005c6e:	76fb      	strb	r3, [r7, #27]
 8005c70:	2301      	movs	r3, #1
 8005c72:	773b      	strb	r3, [r7, #28]
 8005c74:	2363      	movs	r3, #99	; 0x63
 8005c76:	777b      	strb	r3, [r7, #29]
 8005c78:	2381      	movs	r3, #129	; 0x81
 8005c7a:	77bb      	strb	r3, [r7, #30]
 8005c7c:	2327      	movs	r3, #39	; 0x27
 8005c7e:	77fb      	strb	r3, [r7, #31]
 8005c80:	230a      	movs	r3, #10
 8005c82:	f887 3020 	strb.w	r3, [r7, #32]
 8005c86:	2326      	movs	r3, #38	; 0x26
 8005c88:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8005c8c:	2316      	movs	r3, #22
 8005c8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c92:	2363      	movs	r3, #99	; 0x63
 8005c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c98:	2381      	movs	r3, #129	; 0x81
 8005c9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8005c9e:	2327      	movs	r3, #39	; 0x27
 8005ca0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#endif
			{ 0x81, MPUREG_I2C_SLV0_CTRL }  //Enable I2C and set 1 byte

	};

	for (i = 0; i < MPU_InitRegNum; i++) {
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005caa:	e01c      	b.n	8005ce6 <MPU2_SPI1_init+0xe6>
		WriteReg1_imu2(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 8005cac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f813 2c33 	ldrb.w	r2, [r3, #-51]
 8005cbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005cc6:	440b      	add	r3, r1
 8005cc8:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	f7ff f9d0 	bl	8005074 <WriteReg1_imu2>
		delay_us(1000); // I2C must slow down the write speed, otherwise it won't work
 8005cd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005cd8:	f000 fdbc 	bl	8006854 <delay_us>
	for (i = 0; i < MPU_InitRegNum; i++) {
 8005cdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005ce6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005cea:	2b10      	cmp	r3, #16
 8005cec:	d9de      	bls.n	8005cac <MPU2_SPI1_init+0xac>
	//   set_gyro_scale(BITS_FS_250DPS);

	//   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
	//   return 0;

}
 8005cee:	bf00      	nop
 8005cf0:	3738      	adds	r7, #56	; 0x38
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000012 	.word	0x20000012
 8005cfc:	20000013 	.word	0x20000013

08005d00 <Enc2_GetPosition>:
	LL_GPIO_SetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	BSbuffer[s_flag].Enc2[Sub_cnt] = tempPosition;
}

int Enc2_GetPosition(void) {
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
	int DataPrecision = 12;
 8005d06:	230c      	movs	r3, #12
 8005d08:	60fb      	str	r3, [r7, #12]
	int tempPosition = 0;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	617b      	str	r3, [r7, #20]
	int i = 0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	613b      	str	r3, [r7, #16]
	uint8_t tempRead = 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	72fb      	strb	r3, [r7, #11]
	uint8_t Flags[6];

	LL_GPIO_ResetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);
 8005d16:	2140      	movs	r1, #64	; 0x40
 8005d18:	4834      	ldr	r0, [pc, #208]	; (8005dec <Enc2_GetPosition+0xec>)
 8005d1a:	f7fd ff5b 	bl	8003bd4 <LL_GPIO_ResetOutputPin>
	delay_us(1);
 8005d1e:	2001      	movs	r0, #1
 8005d20:	f000 fd98 	bl	8006854 <delay_us>
	// Sensor feeds out position MSB first
	for (i = DataPrecision - 1; i >= 0; i--) {
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	e020      	b.n	8005d6e <Enc2_GetPosition+0x6e>
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
 8005d2c:	2180      	movs	r1, #128	; 0x80
 8005d2e:	4830      	ldr	r0, [pc, #192]	; (8005df0 <Enc2_GetPosition+0xf0>)
 8005d30:	f7fd ff50 	bl	8003bd4 <LL_GPIO_ResetOutputPin>
		delay_us(1);
 8005d34:	2001      	movs	r0, #1
 8005d36:	f000 fd8d 	bl	8006854 <delay_us>

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
 8005d3a:	2180      	movs	r1, #128	; 0x80
 8005d3c:	482c      	ldr	r0, [pc, #176]	; (8005df0 <Enc2_GetPosition+0xf0>)
 8005d3e:	f7fd ff3b 	bl	8003bb8 <LL_GPIO_SetOutputPin>
		delay_us(1);
 8005d42:	2001      	movs	r0, #1
 8005d44:	f000 fd86 	bl	8006854 <delay_us>

		tempRead = LL_GPIO_IsInputPinSet(ENC2_DATA_GPIO_PORT, ENC2_DATA_PIN)
 8005d48:	2180      	movs	r1, #128	; 0x80
 8005d4a:	4828      	ldr	r0, [pc, #160]	; (8005dec <Enc2_GetPosition+0xec>)
 8005d4c:	f7fd ff1f 	bl	8003b8e <LL_GPIO_IsInputPinSet>
 8005d50:	4603      	mov	r3, r0
				& 0x01;
 8005d52:	b2db      	uxtb	r3, r3
		tempRead = LL_GPIO_IsInputPinSet(ENC2_DATA_GPIO_PORT, ENC2_DATA_PIN)
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	72fb      	strb	r3, [r7, #11]
		tempPosition |= (tempRead) << i;
 8005d5a:	7afa      	ldrb	r2, [r7, #11]
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]
	for (i = DataPrecision - 1; i >= 0; i--) {
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	613b      	str	r3, [r7, #16]
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	dadb      	bge.n	8005d2c <Enc2_GetPosition+0x2c>
	}

	for (i = 0; i < 6; i++) {
 8005d74:	2300      	movs	r3, #0
 8005d76:	613b      	str	r3, [r7, #16]
 8005d78:	e02b      	b.n	8005dd2 <Enc2_GetPosition+0xd2>
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
 8005d7a:	2180      	movs	r1, #128	; 0x80
 8005d7c:	481c      	ldr	r0, [pc, #112]	; (8005df0 <Enc2_GetPosition+0xf0>)
 8005d7e:	f7fd ff29 	bl	8003bd4 <LL_GPIO_ResetOutputPin>
		delay_us(1);
 8005d82:	2001      	movs	r0, #1
 8005d84:	f000 fd66 	bl	8006854 <delay_us>

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
 8005d88:	2180      	movs	r1, #128	; 0x80
 8005d8a:	4819      	ldr	r0, [pc, #100]	; (8005df0 <Enc2_GetPosition+0xf0>)
 8005d8c:	f7fd ff14 	bl	8003bb8 <LL_GPIO_SetOutputPin>
		delay_us(1);
 8005d90:	2001      	movs	r0, #1
 8005d92:	f000 fd5f 	bl	8006854 <delay_us>

		tempRead = LL_GPIO_IsInputPinSet(ENC2_DATA_GPIO_PORT, ENC2_DATA_PIN)
 8005d96:	2180      	movs	r1, #128	; 0x80
 8005d98:	4814      	ldr	r0, [pc, #80]	; (8005dec <Enc2_GetPosition+0xec>)
 8005d9a:	f7fd fef8 	bl	8003b8e <LL_GPIO_IsInputPinSet>
 8005d9e:	4603      	mov	r3, r0
				& 0x01;
 8005da0:	b2db      	uxtb	r3, r3
		tempRead = LL_GPIO_IsInputPinSet(ENC2_DATA_GPIO_PORT, ENC2_DATA_PIN)
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	72fb      	strb	r3, [r7, #11]
		Flags[i] |= (tempRead) << i;
 8005da8:	1d3a      	adds	r2, r7, #4
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	4413      	add	r3, r2
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	b25a      	sxtb	r2, r3
 8005db2:	7af9      	ldrb	r1, [r7, #11]
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dba:	b25b      	sxtb	r3, r3
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	b25b      	sxtb	r3, r3
 8005dc0:	b2d9      	uxtb	r1, r3
 8005dc2:	1d3a      	adds	r2, r7, #4
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	460a      	mov	r2, r1
 8005dca:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 6; i++) {
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	613b      	str	r3, [r7, #16]
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	2b05      	cmp	r3, #5
 8005dd6:	ddd0      	ble.n	8005d7a <Enc2_GetPosition+0x7a>
	}

	LL_GPIO_SetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);
 8005dd8:	2140      	movs	r1, #64	; 0x40
 8005dda:	4804      	ldr	r0, [pc, #16]	; (8005dec <Enc2_GetPosition+0xec>)
 8005ddc:	f7fd feec 	bl	8003bb8 <LL_GPIO_SetOutputPin>

	return tempPosition;
 8005de0:	697b      	ldr	r3, [r7, #20]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	48000800 	.word	0x48000800
 8005df0:	48000400 	.word	0x48000400
 8005df4:	00000000 	.word	0x00000000

08005df8 <knee_angle>:

float knee_angle(void) {
 8005df8:	b590      	push	{r4, r7, lr}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
//	float knee_position;
//knee_position= -(Enc2_GetPosition()*0.088)+125; //-(Enc2_GetPosition()*0.088-306); //-((Prosthesis_Data(:,36)*0.088)-306)
// Greg end comment

	// Greg end comment
	float knee_position = (Enc2_GetPosition() - 2249) * 0.088;
 8005dfe:	f7ff ff7f 	bl	8005d00 <Enc2_GetPosition>
 8005e02:	4603      	mov	r3, r0
 8005e04:	f6a3 03c9 	subw	r3, r3, #2249	; 0x8c9
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fa fb8b 	bl	8000524 <__aeabi_i2d>
 8005e0e:	a30a      	add	r3, pc, #40	; (adr r3, 8005e38 <knee_angle+0x40>)
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	f7fa fbec 	bl	80005f0 <__aeabi_dmul>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	4621      	mov	r1, r4
 8005e20:	f7fa febe 	bl	8000ba0 <__aeabi_d2f>
 8005e24:	4603      	mov	r3, r0
 8005e26:	607b      	str	r3, [r7, #4]
	// Greg start

	return knee_position;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	ee07 3a90 	vmov	s15, r3
}
 8005e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd90      	pop	{r4, r7, pc}
 8005e38:	020c49ba 	.word	0x020c49ba
 8005e3c:	3fb6872b 	.word	0x3fb6872b

08005e40 <IMU_orientation>:

float IMU_orientation(struct imu_data imuMyData, float last_angle, float dt_s)
{
 8005e40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005e44:	b096      	sub	sp, #88	; 0x58
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	f107 030c 	add.w	r3, r7, #12
 8005e4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005e50:	ed87 0a02 	vstr	s0, [r7, #8]
 8005e54:	edc7 0a01 	vstr	s1, [r7, #4]
	struct imu_angle gyro, accel, accel_angle, gyro_angle;
	float DEGREES_TO_RADIANS = 3.14159 / 180;
 8005e58:	4b93      	ldr	r3, [pc, #588]	; (80060a8 <IMU_orientation+0x268>)
 8005e5a:	657b      	str	r3, [r7, #84]	; 0x54

	// User defined constant for complementary filter (best value found from trial and error)
	float alpha = 0.002;
 8005e5c:	4b93      	ldr	r3, [pc, #588]	; (80060ac <IMU_orientation+0x26c>)
 8005e5e:	653b      	str	r3, [r7, #80]	; 0x50

	// Convert IMU to gs and rad/sec
	accel.x = (float) imuMyData.AX / 4096;
 8005e60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005e64:	ee07 3a90 	vmov	s15, r3
 8005e68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e6c:	eddf 6a90 	vldr	s13, [pc, #576]	; 80060b0 <IMU_orientation+0x270>
 8005e70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e74:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	accel.y = (float) imuMyData.AY / 4096;
 8005e78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e7c:	ee07 3a90 	vmov	s15, r3
 8005e80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e84:	eddf 6a8a 	vldr	s13, [pc, #552]	; 80060b0 <IMU_orientation+0x270>
 8005e88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e8c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	accel.z = (float) imuMyData.AZ / 4096;
 8005e90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005e94:	ee07 3a90 	vmov	s15, r3
 8005e98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e9c:	eddf 6a84 	vldr	s13, [pc, #528]	; 80060b0 <IMU_orientation+0x270>
 8005ea0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ea4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	gyro.x  = (float) imuMyData.GX / 32.8 * DEGREES_TO_RADIANS;
 8005ea8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005eac:	ee07 3a90 	vmov	s15, r3
 8005eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005eb4:	ee17 0a90 	vmov	r0, s15
 8005eb8:	f7fa fb46 	bl	8000548 <__aeabi_f2d>
 8005ebc:	a376      	add	r3, pc, #472	; (adr r3, 8006098 <IMU_orientation+0x258>)
 8005ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec2:	f7fa fcbf 	bl	8000844 <__aeabi_ddiv>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	460c      	mov	r4, r1
 8005eca:	4625      	mov	r5, r4
 8005ecc:	461c      	mov	r4, r3
 8005ece:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005ed0:	f7fa fb3a 	bl	8000548 <__aeabi_f2d>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4620      	mov	r0, r4
 8005eda:	4629      	mov	r1, r5
 8005edc:	f7fa fb88 	bl	80005f0 <__aeabi_dmul>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	f7fa fe5a 	bl	8000ba0 <__aeabi_d2f>
 8005eec:	4603      	mov	r3, r0
 8005eee:	643b      	str	r3, [r7, #64]	; 0x40
	gyro.y  = (float) imuMyData.GY / 32.8 * DEGREES_TO_RADIANS;
 8005ef0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005ef4:	ee07 3a90 	vmov	s15, r3
 8005ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005efc:	ee17 0a90 	vmov	r0, s15
 8005f00:	f7fa fb22 	bl	8000548 <__aeabi_f2d>
 8005f04:	a364      	add	r3, pc, #400	; (adr r3, 8006098 <IMU_orientation+0x258>)
 8005f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0a:	f7fa fc9b 	bl	8000844 <__aeabi_ddiv>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	460c      	mov	r4, r1
 8005f12:	4625      	mov	r5, r4
 8005f14:	461c      	mov	r4, r3
 8005f16:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005f18:	f7fa fb16 	bl	8000548 <__aeabi_f2d>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4620      	mov	r0, r4
 8005f22:	4629      	mov	r1, r5
 8005f24:	f7fa fb64 	bl	80005f0 <__aeabi_dmul>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	4621      	mov	r1, r4
 8005f30:	f7fa fe36 	bl	8000ba0 <__aeabi_d2f>
 8005f34:	4603      	mov	r3, r0
 8005f36:	647b      	str	r3, [r7, #68]	; 0x44
	gyro.z  = (float) imuMyData.GZ / 32.8 * DEGREES_TO_RADIANS;
 8005f38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005f3c:	ee07 3a90 	vmov	s15, r3
 8005f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f44:	ee17 0a90 	vmov	r0, s15
 8005f48:	f7fa fafe 	bl	8000548 <__aeabi_f2d>
 8005f4c:	a352      	add	r3, pc, #328	; (adr r3, 8006098 <IMU_orientation+0x258>)
 8005f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f52:	f7fa fc77 	bl	8000844 <__aeabi_ddiv>
 8005f56:	4603      	mov	r3, r0
 8005f58:	460c      	mov	r4, r1
 8005f5a:	4625      	mov	r5, r4
 8005f5c:	461c      	mov	r4, r3
 8005f5e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005f60:	f7fa faf2 	bl	8000548 <__aeabi_f2d>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4620      	mov	r0, r4
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	f7fa fb40 	bl	80005f0 <__aeabi_dmul>
 8005f70:	4603      	mov	r3, r0
 8005f72:	460c      	mov	r4, r1
 8005f74:	4618      	mov	r0, r3
 8005f76:	4621      	mov	r1, r4
 8005f78:	f7fa fe12 	bl	8000ba0 <__aeabi_d2f>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	64bb      	str	r3, [r7, #72]	; 0x48

	// Compute angle from accel
	accel_angle.z   = atan(accel.x / sqrt(pow(accel.y,2) + pow(accel.z,2)));
 8005f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fa fae0 	bl	8000548 <__aeabi_f2d>
 8005f88:	4604      	mov	r4, r0
 8005f8a:	460d      	mov	r5, r1
 8005f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fa fada 	bl	8000548 <__aeabi_f2d>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	ed9f 1b41 	vldr	d1, [pc, #260]	; 80060a0 <IMU_orientation+0x260>
 8005f9c:	ec43 2b10 	vmov	d0, r2, r3
 8005fa0:	f010 fc22 	bl	80167e8 <pow>
 8005fa4:	ec59 8b10 	vmov	r8, r9, d0
 8005fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fa facc 	bl	8000548 <__aeabi_f2d>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 80060a0 <IMU_orientation+0x260>
 8005fb8:	ec43 2b10 	vmov	d0, r2, r3
 8005fbc:	f010 fc14 	bl	80167e8 <pow>
 8005fc0:	ec53 2b10 	vmov	r2, r3, d0
 8005fc4:	4640      	mov	r0, r8
 8005fc6:	4649      	mov	r1, r9
 8005fc8:	f7fa f960 	bl	800028c <__adddf3>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	ec43 2b17 	vmov	d7, r2, r3
 8005fd4:	eeb0 0a47 	vmov.f32	s0, s14
 8005fd8:	eef0 0a67 	vmov.f32	s1, s15
 8005fdc:	f010 fd7c 	bl	8016ad8 <sqrt>
 8005fe0:	ec53 2b10 	vmov	r2, r3, d0
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	f7fa fc2c 	bl	8000844 <__aeabi_ddiv>
 8005fec:	4603      	mov	r3, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	ec44 3b17 	vmov	d7, r3, r4
 8005ff4:	eeb0 0a47 	vmov.f32	s0, s14
 8005ff8:	eef0 0a67 	vmov.f32	s1, s15
 8005ffc:	f010 fa44 	bl	8016488 <atan>
 8006000:	ec54 3b10 	vmov	r3, r4, d0
 8006004:	4618      	mov	r0, r3
 8006006:	4621      	mov	r1, r4
 8006008:	f7fa fdca 	bl	8000ba0 <__aeabi_d2f>
 800600c:	4603      	mov	r3, r0
 800600e:	633b      	str	r3, [r7, #48]	; 0x30

	// Compute change in angle from gyro (trapezoidal used)
	if (count == 1)
 8006010:	4b28      	ldr	r3, [pc, #160]	; (80060b4 <IMU_orientation+0x274>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d109      	bne.n	800602c <IMU_orientation+0x1ec>
	{
		gyro_angle.z = 0;
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	627b      	str	r3, [r7, #36]	; 0x24
		count++;
 800601e:	4b25      	ldr	r3, [pc, #148]	; (80060b4 <IMU_orientation+0x274>)
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	3301      	adds	r3, #1
 8006024:	b2da      	uxtb	r2, r3
 8006026:	4b23      	ldr	r3, [pc, #140]	; (80060b4 <IMU_orientation+0x274>)
 8006028:	701a      	strb	r2, [r3, #0]
 800602a:	e010      	b.n	800604e <IMU_orientation+0x20e>
	}
	else
	{
		gyro_angle.z = dt_s/2 * (gyro.z + last_gyro);
 800602c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006030:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006034:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006038:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800603c:	4b1e      	ldr	r3, [pc, #120]	; (80060b8 <IMU_orientation+0x278>)
 800603e:	edd3 7a00 	vldr	s15, [r3]
 8006042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}

	// Save gyro for next iteration
	last_gyro = gyro.z;
 800604e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006050:	4a19      	ldr	r2, [pc, #100]	; (80060b8 <IMU_orientation+0x278>)
 8006052:	6013      	str	r3, [r2, #0]

	// Compute angle using complementary filter
	float imu_angle = accel_angle.z*alpha + (1-alpha) * (gyro_angle.z + last_angle);
 8006054:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006058:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800605c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006064:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006068:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800606c:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8006070:	edd7 7a02 	vldr	s15, [r7, #8]
 8006074:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006078:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800607c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006080:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	// Return
	return imu_angle;
 8006084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006086:	ee07 3a90 	vmov	s15, r3
}
 800608a:	eeb0 0a67 	vmov.f32	s0, s15
 800608e:	3758      	adds	r7, #88	; 0x58
 8006090:	46bd      	mov	sp, r7
 8006092:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006096:	bf00      	nop
 8006098:	66666666 	.word	0x66666666
 800609c:	40406666 	.word	0x40406666
 80060a0:	00000000 	.word	0x00000000
 80060a4:	40000000 	.word	0x40000000
 80060a8:	3c8efa2d 	.word	0x3c8efa2d
 80060ac:	3b03126f 	.word	0x3b03126f
 80060b0:	45800000 	.word	0x45800000
 80060b4:	20000011 	.word	0x20000011
 80060b8:	20000828 	.word	0x20000828

080060bc <LL_AHB2_GRP1_EnableClock>:
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80060c4:	4908      	ldr	r1, [pc, #32]	; (80060e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80060c6:	4b08      	ldr	r3, [pc, #32]	; (80060e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80060c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80060d0:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80060d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4013      	ands	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80060da:	68fb      	ldr	r3, [r7, #12]
}
 80060dc:	bf00      	nop
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	40021000 	.word	0x40021000

080060ec <LL_APB1_GRP1_EnableClock>:
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80060f4:	4908      	ldr	r1, [pc, #32]	; (8006118 <LL_APB1_GRP1_EnableClock+0x2c>)
 80060f6:	4b08      	ldr	r3, [pc, #32]	; (8006118 <LL_APB1_GRP1_EnableClock+0x2c>)
 80060f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006100:	4b05      	ldr	r3, [pc, #20]	; (8006118 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006102:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4013      	ands	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800610a:	68fb      	ldr	r3, [r7, #12]
}
 800610c:	bf00      	nop
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	40021000 	.word	0x40021000

0800611c <LL_SPI_Enable>:
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	601a      	str	r2, [r3, #0]
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <LL_SPI_SetRxFIFOThreshold>:
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	431a      	orrs	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	605a      	str	r2, [r3, #4]
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <LL_SPI_DisableNSSPulseMgt>:
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f023 0208 	bic.w	r2, r3, #8
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	605a      	str	r2, [r3, #4]
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <LL_SPI_DisableIT_RXNE>:
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	605a      	str	r2, [r3, #4]
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
	...

080061a4 <spi2_init>:
 *      Author: brett
 */

#include "main.h"

void spi2_init() {
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b090      	sub	sp, #64	; 0x40
 80061a8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct;

		LL_GPIO_InitTypeDef GPIO_InitStruct;

		/* Peripheral clock enable */
		LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80061aa:	2004      	movs	r0, #4
 80061ac:	f7ff ff86 	bl	80060bc <LL_AHB2_GRP1_EnableClock>
		LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80061b0:	2002      	movs	r0, #2
 80061b2:	f7ff ff83 	bl	80060bc <LL_AHB2_GRP1_EnableClock>
		LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80061b6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80061ba:	f7ff ff97 	bl	80060ec <LL_APB1_GRP1_EnableClock>

		GPIO_InitStruct.Pin = SPI2_SCK_IMU_PIN;
 80061be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80061c2:	603b      	str	r3, [r7, #0]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80061c4:	2302      	movs	r3, #2
 80061c6:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80061c8:	2303      	movs	r3, #3
 80061ca:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80061cc:	2300      	movs	r3, #0
 80061ce:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80061d0:	2300      	movs	r3, #0
 80061d2:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80061d4:	2305      	movs	r3, #5
 80061d6:	617b      	str	r3, [r7, #20]
		LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 80061d8:	463b      	mov	r3, r7
 80061da:	4619      	mov	r1, r3
 80061dc:	482c      	ldr	r0, [pc, #176]	; (8006290 <spi2_init+0xec>)
 80061de:	f007 fc4b 	bl	800da78 <LL_GPIO_Init>

		GPIO_InitStruct.Pin = SPI2_MISO_IMU_PIN;
 80061e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061e6:	603b      	str	r3, [r7, #0]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80061e8:	2302      	movs	r3, #2
 80061ea:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80061ec:	2303      	movs	r3, #3
 80061ee:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80061f0:	2300      	movs	r3, #0
 80061f2:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80061f4:	2300      	movs	r3, #0
 80061f6:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80061f8:	2305      	movs	r3, #5
 80061fa:	617b      	str	r3, [r7, #20]
		LL_GPIO_Init(SPI2_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 80061fc:	463b      	mov	r3, r7
 80061fe:	4619      	mov	r1, r3
 8006200:	4823      	ldr	r0, [pc, #140]	; (8006290 <spi2_init+0xec>)
 8006202:	f007 fc39 	bl	800da78 <LL_GPIO_Init>

		GPIO_InitStruct.Pin = SPI2_MOSI_IMU_PIN;
 8006206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800620a:	603b      	str	r3, [r7, #0]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800620c:	2302      	movs	r3, #2
 800620e:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006210:	2303      	movs	r3, #3
 8006212:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006214:	2300      	movs	r3, #0
 8006216:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006218:	2300      	movs	r3, #0
 800621a:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800621c:	2305      	movs	r3, #5
 800621e:	617b      	str	r3, [r7, #20]
		LL_GPIO_Init(SPI2_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 8006220:	463b      	mov	r3, r7
 8006222:	4619      	mov	r1, r3
 8006224:	481a      	ldr	r0, [pc, #104]	; (8006290 <spi2_init+0xec>)
 8006226:	f007 fc27 	bl	800da78 <LL_GPIO_Init>

		SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800622a:	2300      	movs	r3, #0
 800622c:	61bb      	str	r3, [r7, #24]
		SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800622e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006232:	61fb      	str	r3, [r7, #28]
		SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8006234:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8006238:	623b      	str	r3, [r7, #32]
		/*Mode 3 (Mode 1,1) */
		SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH; /*Clock 1 when idle and 0 when active */
 800623a:	2302      	movs	r3, #2
 800623c:	627b      	str	r3, [r7, #36]	; 0x24
		SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE; //Second clock transition is the first data capture edge
 800623e:	2301      	movs	r3, #1
 8006240:	62bb      	str	r3, [r7, #40]	; 0x28
		SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8006242:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006246:	62fb      	str	r3, [r7, #44]	; 0x2c

		SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8006248:	2308      	movs	r3, #8
 800624a:	633b      	str	r3, [r7, #48]	; 0x30
		SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800624c:	2300      	movs	r3, #0
 800624e:	637b      	str	r3, [r7, #52]	; 0x34
		SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8006250:	2300      	movs	r3, #0
 8006252:	63bb      	str	r3, [r7, #56]	; 0x38
		SPI_InitStruct.CRCPoly = 7; //?
 8006254:	2307      	movs	r3, #7
 8006256:	63fb      	str	r3, [r7, #60]	; 0x3c
		LL_SPI_Init(SPI2, &SPI_InitStruct);
 8006258:	f107 0318 	add.w	r3, r7, #24
 800625c:	4619      	mov	r1, r3
 800625e:	480d      	ldr	r0, [pc, #52]	; (8006294 <spi2_init+0xf0>)
 8006260:	f008 f949 	bl	800e4f6 <LL_SPI_Init>

		LL_SPI_DisableNSSPulseMgt(SPI2);
 8006264:	480b      	ldr	r0, [pc, #44]	; (8006294 <spi2_init+0xf0>)
 8006266:	f7ff ff7c 	bl	8006162 <LL_SPI_DisableNSSPulseMgt>

		LL_SPI_SetRxFIFOThreshold(SPI2, LL_SPI_RX_FIFO_TH_QUARTER);
 800626a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800626e:	4809      	ldr	r0, [pc, #36]	; (8006294 <spi2_init+0xf0>)
 8006270:	f7ff ff64 	bl	800613c <LL_SPI_SetRxFIFOThreshold>
		LL_SPI_DisableIT_RXNE(SPI2);
 8006274:	4807      	ldr	r0, [pc, #28]	; (8006294 <spi2_init+0xf0>)
 8006276:	f7ff ff84 	bl	8006182 <LL_SPI_DisableIT_RXNE>
		LL_SPI_Enable(SPI2);
 800627a:	4806      	ldr	r0, [pc, #24]	; (8006294 <spi2_init+0xf0>)
 800627c:	f7ff ff4e 	bl	800611c <LL_SPI_Enable>

		delay_us(10000);
 8006280:	f242 7010 	movw	r0, #10000	; 0x2710
 8006284:	f000 fae6 	bl	8006854 <delay_us>
}
 8006288:	bf00      	nop
 800628a:	3740      	adds	r7, #64	; 0x40
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	48000400 	.word	0x48000400
 8006294:	40003800 	.word	0x40003800

08006298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800629e:	4a24      	ldr	r2, [pc, #144]	; (8006330 <HAL_MspInit+0x98>)
 80062a0:	4b23      	ldr	r3, [pc, #140]	; (8006330 <HAL_MspInit+0x98>)
 80062a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a4:	f043 0301 	orr.w	r3, r3, #1
 80062a8:	6613      	str	r3, [r2, #96]	; 0x60
 80062aa:	4b21      	ldr	r3, [pc, #132]	; (8006330 <HAL_MspInit+0x98>)
 80062ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	607b      	str	r3, [r7, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80062b6:	4a1e      	ldr	r2, [pc, #120]	; (8006330 <HAL_MspInit+0x98>)
 80062b8:	4b1d      	ldr	r3, [pc, #116]	; (8006330 <HAL_MspInit+0x98>)
 80062ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062c0:	6593      	str	r3, [r2, #88]	; 0x58
 80062c2:	4b1b      	ldr	r3, [pc, #108]	; (8006330 <HAL_MspInit+0x98>)
 80062c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062ce:	2003      	movs	r0, #3
 80062d0:	f002 f9da 	bl	8008688 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80062d4:	2200      	movs	r2, #0
 80062d6:	2100      	movs	r1, #0
 80062d8:	f06f 000b 	mvn.w	r0, #11
 80062dc:	f002 f9df 	bl	800869e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80062e0:	2200      	movs	r2, #0
 80062e2:	2100      	movs	r1, #0
 80062e4:	f06f 000a 	mvn.w	r0, #10
 80062e8:	f002 f9d9 	bl	800869e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80062ec:	2200      	movs	r2, #0
 80062ee:	2100      	movs	r1, #0
 80062f0:	f06f 0009 	mvn.w	r0, #9
 80062f4:	f002 f9d3 	bl	800869e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80062f8:	2200      	movs	r2, #0
 80062fa:	2100      	movs	r1, #0
 80062fc:	f06f 0004 	mvn.w	r0, #4
 8006300:	f002 f9cd 	bl	800869e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8006304:	2200      	movs	r2, #0
 8006306:	2100      	movs	r1, #0
 8006308:	f06f 0003 	mvn.w	r0, #3
 800630c:	f002 f9c7 	bl	800869e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8006310:	2200      	movs	r2, #0
 8006312:	2100      	movs	r1, #0
 8006314:	f06f 0001 	mvn.w	r0, #1
 8006318:	f002 f9c1 	bl	800869e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800631c:	2200      	movs	r2, #0
 800631e:	2100      	movs	r1, #0
 8006320:	f04f 30ff 	mov.w	r0, #4294967295
 8006324:	f002 f9bb 	bl	800869e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006328:	bf00      	nop
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	40021000 	.word	0x40021000

08006334 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b088      	sub	sp, #32
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a19      	ldr	r2, [pc, #100]	; (80063a8 <HAL_SD_MspInit+0x74>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d12c      	bne.n	80063a0 <HAL_SD_MspInit+0x6c>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8006346:	4a19      	ldr	r2, [pc, #100]	; (80063ac <HAL_SD_MspInit+0x78>)
 8006348:	4b18      	ldr	r3, [pc, #96]	; (80063ac <HAL_SD_MspInit+0x78>)
 800634a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800634c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006350:	6613      	str	r3, [r2, #96]	; 0x60
 8006352:	4b16      	ldr	r3, [pc, #88]	; (80063ac <HAL_SD_MspInit+0x78>)
 8006354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800635a:	60bb      	str	r3, [r7, #8]
 800635c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800635e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006362:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006364:	2302      	movs	r3, #2
 8006366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006368:	2300      	movs	r3, #0
 800636a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800636c:	2303      	movs	r3, #3
 800636e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8006370:	230c      	movs	r3, #12
 8006372:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006374:	f107 030c 	add.w	r3, r7, #12
 8006378:	4619      	mov	r1, r3
 800637a:	480d      	ldr	r0, [pc, #52]	; (80063b0 <HAL_SD_MspInit+0x7c>)
 800637c:	f002 fc7a 	bl	8008c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006380:	2304      	movs	r3, #4
 8006382:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006384:	2302      	movs	r3, #2
 8006386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006388:	2300      	movs	r3, #0
 800638a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800638c:	2303      	movs	r3, #3
 800638e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8006390:	230c      	movs	r3, #12
 8006392:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006394:	f107 030c 	add.w	r3, r7, #12
 8006398:	4619      	mov	r1, r3
 800639a:	4806      	ldr	r0, [pc, #24]	; (80063b4 <HAL_SD_MspInit+0x80>)
 800639c:	f002 fc6a 	bl	8008c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80063a0:	bf00      	nop
 80063a2:	3720      	adds	r7, #32
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	40012800 	.word	0x40012800
 80063ac:	40021000 	.word	0x40021000
 80063b0:	48000800 	.word	0x48000800
 80063b4:	48000c00 	.word	0x48000c00

080063b8 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80063b8:	b480      	push	{r7}
 80063ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80063bc:	bf00      	nop
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80063c6:	b480      	push	{r7}
 80063c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063ca:	e7fe      	b.n	80063ca <HardFault_Handler+0x4>

080063cc <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063d0:	e7fe      	b.n	80063d0 <MemManage_Handler+0x4>

080063d2 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80063d2:	b480      	push	{r7}
 80063d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063d6:	e7fe      	b.n	80063d6 <BusFault_Handler+0x4>

080063d8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80063d8:	b480      	push	{r7}
 80063da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063dc:	e7fe      	b.n	80063dc <UsageFault_Handler+0x4>

080063de <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80063de:	b480      	push	{r7}
 80063e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80063e2:	bf00      	nop
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063f0:	bf00      	nop
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80063fa:	b480      	push	{r7}
 80063fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80063fe:	bf00      	nop
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800640c:	f002 f822 	bl	8008454 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8006410:	f002 f97b 	bl	800870a <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006414:	bf00      	nop
 8006416:	bd80      	pop	{r7, pc}

08006418 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB OTG FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  // ES HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
	HAL_PCD_IRQHandler(&hpcd);
 800641c:	4802      	ldr	r0, [pc, #8]	; (8006428 <OTG_FS_IRQHandler+0x10>)
 800641e:	f002 ff57 	bl	80092d0 <HAL_PCD_IRQHandler>

  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006422:	bf00      	nop
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20009244 	.word	0x20009244

0800642c <DMA2_Channel4_IRQHandler>:
  * @brief  This function handles DMA2 Channel 4 interrupt request.
  * @param  None
  * @retval None
  */
void DMA2_Channel4_IRQHandler(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
  if((uSdHandle.SdOperation == SD_READ_MULTIPLE_BLOCK) || (uSdHandle.SdOperation == SD_READ_SINGLE_BLOCK))
 8006430:	4b07      	ldr	r3, [pc, #28]	; (8006450 <DMA2_Channel4_IRQHandler+0x24>)
 8006432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006434:	2b01      	cmp	r3, #1
 8006436:	d003      	beq.n	8006440 <DMA2_Channel4_IRQHandler+0x14>
 8006438:	4b05      	ldr	r3, [pc, #20]	; (8006450 <DMA2_Channel4_IRQHandler+0x24>)
 800643a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800643c:	2b00      	cmp	r3, #0
 800643e:	d102      	bne.n	8006446 <DMA2_Channel4_IRQHandler+0x1a>
  {
    BSP_SD_DMA_Rx_IRQHandler();
 8006440:	f7fa ffb8 	bl	80013b4 <BSP_SD_DMA_Rx_IRQHandler>
 8006444:	e001      	b.n	800644a <DMA2_Channel4_IRQHandler+0x1e>
  }
  else
  {
    BSP_SD_DMA_Tx_IRQHandler();
 8006446:	f7fa ffa9 	bl	800139c <BSP_SD_DMA_Tx_IRQHandler>
  }
}
 800644a:	bf00      	nop
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	200088b8 	.word	0x200088b8

08006454 <SDMMC1_IRQHandler>:
  * @brief  This function handles SDMMC1 interrupt request.
  * @param  None
  * @retval None
  */
void SDMMC1_IRQHandler(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  BSP_SD_IRQHandler();
 8006458:	f7fa ff96 	bl	8001388 <BSP_SD_IRQHandler>
}
 800645c:	bf00      	nop
 800645e:	bd80      	pop	{r7, pc}

08006460 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006464:	4a17      	ldr	r2, [pc, #92]	; (80064c4 <SystemInit+0x64>)
 8006466:	4b17      	ldr	r3, [pc, #92]	; (80064c4 <SystemInit+0x64>)
 8006468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006474:	4a14      	ldr	r2, [pc, #80]	; (80064c8 <SystemInit+0x68>)
 8006476:	4b14      	ldr	r3, [pc, #80]	; (80064c8 <SystemInit+0x68>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f043 0301 	orr.w	r3, r3, #1
 800647e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006480:	4b11      	ldr	r3, [pc, #68]	; (80064c8 <SystemInit+0x68>)
 8006482:	2200      	movs	r2, #0
 8006484:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8006486:	4a10      	ldr	r2, [pc, #64]	; (80064c8 <SystemInit+0x68>)
 8006488:	4b0f      	ldr	r3, [pc, #60]	; (80064c8 <SystemInit+0x68>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006490:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006494:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8006496:	4b0c      	ldr	r3, [pc, #48]	; (80064c8 <SystemInit+0x68>)
 8006498:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800649c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800649e:	4a0a      	ldr	r2, [pc, #40]	; (80064c8 <SystemInit+0x68>)
 80064a0:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <SystemInit+0x68>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80064aa:	4b07      	ldr	r3, [pc, #28]	; (80064c8 <SystemInit+0x68>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80064b0:	4b04      	ldr	r3, [pc, #16]	; (80064c4 <SystemInit+0x64>)
 80064b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80064b6:	609a      	str	r2, [r3, #8]
#endif
}
 80064b8:	bf00      	nop
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	e000ed00 	.word	0xe000ed00
 80064c8:	40021000 	.word	0x40021000

080064cc <NVIC_DisableIRQ>:
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	4603      	mov	r3, r0
 80064d4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80064d6:	4909      	ldr	r1, [pc, #36]	; (80064fc <NVIC_DisableIRQ+0x30>)
 80064d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064dc:	095b      	lsrs	r3, r3, #5
 80064de:	79fa      	ldrb	r2, [r7, #7]
 80064e0:	f002 021f 	and.w	r2, r2, #31
 80064e4:	2001      	movs	r0, #1
 80064e6:	fa00 f202 	lsl.w	r2, r0, r2
 80064ea:	3320      	adds	r3, #32
 80064ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	e000e100 	.word	0xe000e100

08006500 <LL_LPTIM_Enable>:
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f043 0201 	orr.w	r2, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	611a      	str	r2, [r3, #16]
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <LL_LPTIM_Disable>:
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f023 0201 	bic.w	r2, r3, #1
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	611a      	str	r2, [r3, #16]
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <LL_LPTIM_StartCounter>:
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f023 0206 	bic.w	r2, r3, #6
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	431a      	orrs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	611a      	str	r2, [r3, #16]
}
 800655a:	bf00      	nop
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <LL_LPTIM_SetAutoReload>:
{
 8006566:	b480      	push	{r7}
 8006568:	b083      	sub	sp, #12
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	0c1b      	lsrs	r3, r3, #16
 8006576:	041b      	lsls	r3, r3, #16
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	431a      	orrs	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	619a      	str	r2, [r3, #24]
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <LL_LPTIM_DisableIT_ARRM>:
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f023 0202 	bic.w	r2, r3, #2
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	609a      	str	r2, [r3, #8]
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <LL_RCC_SetSysClkSource>:
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80065b4:	4906      	ldr	r1, [pc, #24]	; (80065d0 <LL_RCC_SetSysClkSource+0x24>)
 80065b6:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <LL_RCC_SetSysClkSource+0x24>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f023 0203 	bic.w	r2, r3, #3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	608b      	str	r3, [r1, #8]
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	40021000 	.word	0x40021000

080065d4 <LL_RCC_SetAHBPrescaler>:
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80065dc:	4906      	ldr	r1, [pc, #24]	; (80065f8 <LL_RCC_SetAHBPrescaler+0x24>)
 80065de:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <LL_RCC_SetAHBPrescaler+0x24>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	608b      	str	r3, [r1, #8]
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	40021000 	.word	0x40021000

080065fc <LL_RCC_SetAPB1Prescaler>:
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006604:	4906      	ldr	r1, [pc, #24]	; (8006620 <LL_RCC_SetAPB1Prescaler+0x24>)
 8006606:	4b06      	ldr	r3, [pc, #24]	; (8006620 <LL_RCC_SetAPB1Prescaler+0x24>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4313      	orrs	r3, r2
 8006612:	608b      	str	r3, [r1, #8]
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	40021000 	.word	0x40021000

08006624 <LL_RCC_SetAPB2Prescaler>:
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800662c:	4906      	ldr	r1, [pc, #24]	; (8006648 <LL_RCC_SetAPB2Prescaler+0x24>)
 800662e:	4b06      	ldr	r3, [pc, #24]	; (8006648 <LL_RCC_SetAPB2Prescaler+0x24>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4313      	orrs	r3, r2
 800663a:	608b      	str	r3, [r1, #8]
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	40021000 	.word	0x40021000

0800664c <LL_RCC_SetClkAfterWakeFromStop>:
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8006654:	4906      	ldr	r1, [pc, #24]	; (8006670 <LL_RCC_SetClkAfterWakeFromStop+0x24>)
 8006656:	4b06      	ldr	r3, [pc, #24]	; (8006670 <LL_RCC_SetClkAfterWakeFromStop+0x24>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4313      	orrs	r3, r2
 8006662:	608b      	str	r3, [r1, #8]
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	40021000 	.word	0x40021000

08006674 <LL_RCC_SetLPTIMClockSource>:
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800667c:	4909      	ldr	r1, [pc, #36]	; (80066a4 <LL_RCC_SetLPTIMClockSource+0x30>)
 800667e:	4b09      	ldr	r3, [pc, #36]	; (80066a4 <LL_RCC_SetLPTIMClockSource+0x30>)
 8006680:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	0c1b      	lsrs	r3, r3, #16
 8006688:	041b      	lsls	r3, r3, #16
 800668a:	43db      	mvns	r3, r3
 800668c:	401a      	ands	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	041b      	lsls	r3, r3, #16
 8006692:	4313      	orrs	r3, r2
 8006694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	40021000 	.word	0x40021000

080066a8 <LL_RCC_SetSDMMCClockSource>:
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, SDMMCxSource);
 80066b0:	4907      	ldr	r1, [pc, #28]	; (80066d0 <LL_RCC_SetSDMMCClockSource+0x28>)
 80066b2:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <LL_RCC_SetSDMMCClockSource+0x28>)
 80066b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4313      	orrs	r3, r2
 80066c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	40021000 	.word	0x40021000

080066d4 <LL_RCC_SetUSBClockSource>:
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, USBxSource);
 80066dc:	4907      	ldr	r1, [pc, #28]	; (80066fc <LL_RCC_SetUSBClockSource+0x28>)
 80066de:	4b07      	ldr	r3, [pc, #28]	; (80066fc <LL_RCC_SetUSBClockSource+0x28>)
 80066e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	40021000 	.word	0x40021000

08006700 <LL_APB1_GRP1_EnableClock>:
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006708:	4908      	ldr	r1, [pc, #32]	; (800672c <LL_APB1_GRP1_EnableClock+0x2c>)
 800670a:	4b08      	ldr	r3, [pc, #32]	; (800672c <LL_APB1_GRP1_EnableClock+0x2c>)
 800670c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4313      	orrs	r3, r2
 8006712:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006714:	4b05      	ldr	r3, [pc, #20]	; (800672c <LL_APB1_GRP1_EnableClock+0x2c>)
 8006716:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4013      	ands	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800671e:	68fb      	ldr	r3, [r7, #12]
}
 8006720:	bf00      	nop
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	40021000 	.word	0x40021000

08006730 <LL_APB1_GRP2_EnableClock>:
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8006738:	4908      	ldr	r1, [pc, #32]	; (800675c <LL_APB1_GRP2_EnableClock+0x2c>)
 800673a:	4b08      	ldr	r3, [pc, #32]	; (800675c <LL_APB1_GRP2_EnableClock+0x2c>)
 800673c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4313      	orrs	r3, r2
 8006742:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8006744:	4b05      	ldr	r3, [pc, #20]	; (800675c <LL_APB1_GRP2_EnableClock+0x2c>)
 8006746:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4013      	ands	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800674e:	68fb      	ldr	r3, [r7, #12]
}
 8006750:	bf00      	nop
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	40021000 	.word	0x40021000

08006760 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_3
  *         @arg @ref LL_FLASH_LATENCY_4
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8006768:	4906      	ldr	r1, [pc, #24]	; (8006784 <LL_FLASH_SetLatency+0x24>)
 800676a:	4b06      	ldr	r3, [pc, #24]	; (8006784 <LL_FLASH_SetLatency+0x24>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f023 0207 	bic.w	r2, r3, #7
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4313      	orrs	r3, r2
 8006776:	600b      	str	r3, [r1, #0]
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	40022000 	.word	0x40022000

08006788 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_2
  *         @arg @ref LL_FLASH_LATENCY_3
  *         @arg @ref LL_FLASH_LATENCY_4
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800678c:	4b04      	ldr	r3, [pc, #16]	; (80067a0 <LL_FLASH_GetLatency+0x18>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0307 	and.w	r3, r3, #7
}
 8006794:	4618      	mov	r0, r3
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	40022000 	.word	0x40022000

080067a4 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80067a8:	4a05      	ldr	r2, [pc, #20]	; (80067c0 <LL_LPM_EnableDeepSleep+0x1c>)
 80067aa:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <LL_LPM_EnableDeepSleep+0x1c>)
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f043 0304 	orr.w	r3, r3, #4
 80067b2:	6113      	str	r3, [r2, #16]
}
 80067b4:	bf00      	nop
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	e000ed00 	.word	0xe000ed00

080067c4 <LL_PWR_EnableBkUpAccess>:
{
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067c8:	4a05      	ldr	r2, [pc, #20]	; (80067e0 <LL_PWR_EnableBkUpAccess+0x1c>)
 80067ca:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <LL_PWR_EnableBkUpAccess+0x1c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067d2:	6013      	str	r3, [r2, #0]
}
 80067d4:	bf00      	nop
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	40007000 	.word	0x40007000

080067e4 <LL_PWR_SetPowerMode>:
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 80067ec:	4906      	ldr	r1, [pc, #24]	; (8006808 <LL_PWR_SetPowerMode+0x24>)
 80067ee:	4b06      	ldr	r3, [pc, #24]	; (8006808 <LL_PWR_SetPowerMode+0x24>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f023 0207 	bic.w	r2, r3, #7
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	600b      	str	r3, [r1, #0]
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	40007000 	.word	0x40007000

0800680c <LL_PWR_EnableVddUSB>:
{
 800680c:	b480      	push	{r7}
 800680e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006810:	4a05      	ldr	r2, [pc, #20]	; (8006828 <LL_PWR_EnableVddUSB+0x1c>)
 8006812:	4b05      	ldr	r3, [pc, #20]	; (8006828 <LL_PWR_EnableVddUSB+0x1c>)
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800681a:	6053      	str	r3, [r2, #4]
}
 800681c:	bf00      	nop
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	40007000 	.word	0x40007000

0800682c <LL_PWR_IsEnabledVddUSB>:
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 8006830:	4b07      	ldr	r3, [pc, #28]	; (8006850 <LL_PWR_IsEnabledVddUSB+0x24>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800683c:	bf0c      	ite	eq
 800683e:	2301      	moveq	r3, #1
 8006840:	2300      	movne	r3, #0
 8006842:	b2db      	uxtb	r3, r3
}
 8006844:	4618      	mov	r0, r3
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40007000 	.word	0x40007000

08006854 <delay_us>:
//LPUART clock source can be HSI,LSE,PCLK,

extern uint8_t USB_Mode;
extern uint8_t Enter_Into_DFU,MSC_continue,VCP_continue;

void delay_us(uint32_t us){
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
    uint32_t i,k;
    for(k=0;k<us;k++)
 800685c:	2300      	movs	r3, #0
 800685e:	60bb      	str	r3, [r7, #8]
 8006860:	e00c      	b.n	800687c <delay_us+0x28>
    {
    	for(i=0;i<11;i++)
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	e003      	b.n	8006870 <delay_us+0x1c>
  __ASM volatile ("nop");
 8006868:	bf00      	nop
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3301      	adds	r3, #1
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b0a      	cmp	r3, #10
 8006874:	d9f8      	bls.n	8006868 <delay_us+0x14>
    for(k=0;k<us;k++)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	3301      	adds	r3, #1
 800687a:	60bb      	str	r3, [r7, #8]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	429a      	cmp	r2, r3
 8006882:	d3ee      	bcc.n	8006862 <delay_us+0xe>
         __NOP();  // Timed at 48 MHz clock
    }
}
 8006884:	bf00      	nop
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <Start_LPTIMCounter2>:
volatile uint32_t Low_Power_delay;



void Start_LPTIMCounter2(uint32_t Auto_reload)      //Start LPTIM2 with assigned auto-reload value
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
	LL_LPTIM_Enable(LPTIM2);                          // Enable LPTIM2
 8006898:	4807      	ldr	r0, [pc, #28]	; (80068b8 <Start_LPTIMCounter2+0x28>)
 800689a:	f7ff fe31 	bl	8006500 <LL_LPTIM_Enable>
    LL_LPTIM_SetAutoReload(LPTIM2, Auto_reload);      // ARR value= Desired time in sec* 32768
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	4805      	ldr	r0, [pc, #20]	; (80068b8 <Start_LPTIMCounter2+0x28>)
 80068a2:	f7ff fe60 	bl	8006566 <LL_LPTIM_SetAutoReload>
    LL_LPTIM_StartCounter(LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);  // Start the Counter
 80068a6:	2104      	movs	r1, #4
 80068a8:	4803      	ldr	r0, [pc, #12]	; (80068b8 <Start_LPTIMCounter2+0x28>)
 80068aa:	f7ff fe49 	bl	8006540 <LL_LPTIM_StartCounter>

}
 80068ae:	bf00      	nop
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	40009400 	.word	0x40009400

080068bc <LSE_ON>:
	NVIC_DisableIRQ(LPTIM1_IRQn);
	LL_LPTIM_Disable(LPTIM1);                          // Enable LPTIM2
}

void LSE_ON(void)
{
 80068bc:	b480      	push	{r7}
 80068be:	af00      	add	r7, sp, #0
	/* Following 2lines are necessary before LSE
	RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN; // PWR clock is necessary for LSE
	PWR->CR1 |= PWR_CR1_DBP;  // Enable Backup access
	*/

	RCC->BDCR |= RCC_BDCR_LSEON;  // LSE ON
 80068c0:	4a0a      	ldr	r2, [pc, #40]	; (80068ec <LSE_ON+0x30>)
 80068c2:	4b0a      	ldr	r3, [pc, #40]	; (80068ec <LSE_ON+0x30>)
 80068c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c8:	f043 0301 	orr.w	r3, r3, #1
 80068cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	while(((RCC->BDCR) & RCC_BDCR_LSERDY) != (RCC_BDCR_LSERDY)); // wait for LSE to get ready
 80068d0:	bf00      	nop
 80068d2:	4b06      	ldr	r3, [pc, #24]	; (80068ec <LSE_ON+0x30>)
 80068d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d1f8      	bne.n	80068d2 <LSE_ON+0x16>

}
 80068e0:	bf00      	nop
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	40021000 	.word	0x40021000

080068f0 <EnterStop>:
	{
	}
}

void EnterStop(void) // Enter Stop Mode
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
	HAL_SuspendTick();  // Before entering STOP mode, SYS_tick needs to disable
 80068f4:	f001 fdde 	bl	80084b4 <HAL_SuspendTick>
	LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);  // Enter Stop 1/2 Mode
 80068f8:	2001      	movs	r0, #1
 80068fa:	f7ff ff73 	bl	80067e4 <LL_PWR_SetPowerMode>
	LL_LPM_EnableDeepSleep();               // Set SLEEPDEEP bit of Cortex System Control Register
 80068fe:	f7ff ff51 	bl	80067a4 <LL_LPM_EnableDeepSleep>
  __ASM volatile ("wfi");
 8006902:	bf30      	wfi
	__WFI();                                // Request Wait For Interrupt

}
 8006904:	bf00      	nop
 8006906:	bd80      	pop	{r7, pc}

08006908 <SystemClock_Config_MSI_80MHz>:
*            PLL_R                          = 4
*            Flash Latency(WS)              = 4
*/

void SystemClock_Config_MSI_80MHz(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b092      	sub	sp, #72	; 0x48
 800690c:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 800690e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006912:	f7ff fef5 	bl	8006700 <LL_APB1_GRP1_EnableClock>
	  LL_PWR_EnableBkUpAccess();                              // Enable Backup access (needed for LSE clock)
 8006916:	f7ff ff55 	bl	80067c4 <LL_PWR_EnableBkUpAccess>
	  LL_PWR_EnableVddUSB();                                  // Enable VDDUSB supply for USB
 800691a:	f7ff ff77 	bl	800680c <LL_PWR_EnableVddUSB>
	  while(!LL_PWR_IsEnabledVddUSB());                       // Wait for VDDUSB supply to activate
 800691e:	bf00      	nop
 8006920:	f7ff ff84 	bl	800682c <LL_PWR_IsEnabledVddUSB>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0fa      	beq.n	8006920 <SystemClock_Config_MSI_80MHz+0x18>

	  /* Enable MSI Oscillator and activate PLL with MSI as source */
	  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 800692a:	2310      	movs	r3, #16
 800692c:	607b      	str	r3, [r7, #4]
	  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 800692e:	2301      	movs	r3, #1
 8006930:	61fb      	str	r3, [r7, #28]
	//  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8006932:	23b0      	movs	r3, #176	; 0xb0
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8006936:	2302      	movs	r3, #2
 8006938:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 800693a:	2301      	movs	r3, #1
 800693c:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLM            = 6;
 800693e:	2306      	movs	r3, #6
 8006940:	637b      	str	r3, [r7, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLN            = 40;
 8006942:	2328      	movs	r3, #40	; 0x28
 8006944:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 8006946:	2307      	movs	r3, #7
 8006948:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 800694a:	2304      	movs	r3, #4
 800694c:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLR            = 4;
 800694e:	2304      	movs	r3, #4
 8006950:	647b      	str	r3, [r7, #68]	; 0x44

	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8006952:	1d3b      	adds	r3, r7, #4
 8006954:	4618      	mov	r0, r3
 8006956:	f003 fd95 	bl	800a484 <HAL_RCC_OscConfig>

	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800695a:	4a22      	ldr	r2, [pc, #136]	; (80069e4 <SystemClock_Config_MSI_80MHz+0xdc>)
 800695c:	4b21      	ldr	r3, [pc, #132]	; (80069e4 <SystemClock_Config_MSI_80MHz+0xdc>)
 800695e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006962:	f023 0320 	bic.w	r3, r3, #32
 8006966:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	  CLEAR_BIT(RCC->CIER, (RCC_IT_LSECSS));
 800696a:	4a1e      	ldr	r2, [pc, #120]	; (80069e4 <SystemClock_Config_MSI_80MHz+0xdc>)
 800696c:	4b1d      	ldr	r3, [pc, #116]	; (80069e4 <SystemClock_Config_MSI_80MHz+0xdc>)
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006974:	6193      	str	r3, [r2, #24]

	  LSE_ON();                                                     //Start LSE for RTC and LPTIM timer
 8006976:	f7ff ffa1 	bl	80068bc <LSE_ON>
	  HAL_RCCEx_EnableMSIPLLMode();
 800697a:	f004 fab5 	bl	800aee8 <HAL_RCCEx_EnableMSIPLLMode>


	  LL_RCC_SetSDMMCClockSource(LL_RCC_SDMMC1_CLKSOURCE_MSI);
 800697e:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 8006982:	f7ff fe91 	bl	80066a8 <LL_RCC_SetSDMMCClockSource>
	  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_MSI);
 8006986:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
 800698a:	f7ff fea3 	bl	80066d4 <LL_RCC_SetUSBClockSource>
	  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800698e:	2000      	movs	r0, #0
 8006990:	f7ff fe20 	bl	80065d4 <LL_RCC_SetAHBPrescaler>
	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2); //1
 8006994:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006998:	f7ff fe30 	bl	80065fc <LL_RCC_SetAPB1Prescaler>
	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 800699c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80069a0:	f7ff fe40 	bl	8006624 <LL_RCC_SetAPB2Prescaler>
	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 80069a4:	2000      	movs	r0, #0
 80069a6:	f7ff fe01 	bl	80065ac <LL_RCC_SetSysClkSource>

	  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 80069aa:	2004      	movs	r0, #4
 80069ac:	f7ff fed8 	bl	8006760 <LL_FLASH_SetLatency>
	  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4);
 80069b0:	bf00      	nop
 80069b2:	f7ff fee9 	bl	8006788 <LL_FLASH_GetLatency>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d1fa      	bne.n	80069b2 <SystemClock_Config_MSI_80MHz+0xaa>

	  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_MSI);  // MSI clock is set as default clock after wake up from Stop
 80069bc:	2000      	movs	r0, #0
 80069be:	f7ff fe45 	bl	800664c <LL_RCC_SetClkAfterWakeFromStop>
	  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();               // Disable USB clock to save power
 80069c2:	4a08      	ldr	r2, [pc, #32]	; (80069e4 <SystemClock_Config_MSI_80MHz+0xdc>)
 80069c4:	4b07      	ldr	r3, [pc, #28]	; (80069e4 <SystemClock_Config_MSI_80MHz+0xdc>)
 80069c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069ce:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <SystemClock_Config_MSI_80MHz+0xdc>)
 80069d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	683b      	ldr	r3, [r7, #0]

		}
 80069da:	bf00      	nop
 80069dc:	3748      	adds	r7, #72	; 0x48
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	40021000 	.word	0x40021000

080069e8 <Configure_LPTIM2_Int>:

		}

//Configure LPTIM2 to generate the XX Hz interrupt
void Configure_LPTIM2_Int(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
	LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSE);  // SET LSE as LPTIM2 source
 80069ec:	f04f 1030 	mov.w	r0, #3145776	; 0x300030
 80069f0:	f7ff fe40 	bl	8006674 <LL_RCC_SetLPTIMClockSource>
	LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);     // Enable LPTIM2 Clock
 80069f4:	2020      	movs	r0, #32
 80069f6:	f7ff fe9b 	bl	8006730 <LL_APB1_GRP2_EnableClock>
	NVIC_DisableIRQ(LPTIM2_IRQn);
 80069fa:	2042      	movs	r0, #66	; 0x42
 80069fc:	f7ff fd66 	bl	80064cc <NVIC_DisableIRQ>
	LL_LPTIM_DisableIT_ARRM(LPTIM2);                           // Enable auto reload match interrupt (ARRMIE).
 8006a00:	4803      	ldr	r0, [pc, #12]	; (8006a10 <Configure_LPTIM2_Int+0x28>)
 8006a02:	f7ff fdc3 	bl	800658c <LL_LPTIM_DisableIT_ARRM>
	LL_LPTIM_Disable(LPTIM2);                                // LPTIM2 disable if needed
 8006a06:	4802      	ldr	r0, [pc, #8]	; (8006a10 <Configure_LPTIM2_Int+0x28>)
 8006a08:	f7ff fd8a 	bl	8006520 <LL_LPTIM_Disable>

}
 8006a0c:	bf00      	nop
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	40009400 	.word	0x40009400

08006a14 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08a      	sub	sp, #40	; 0x28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a1c:	4a22      	ldr	r2, [pc, #136]	; (8006aa8 <HAL_PCD_MspInit+0x94>)
 8006a1e:	4b22      	ldr	r3, [pc, #136]	; (8006aa8 <HAL_PCD_MspInit+0x94>)
 8006a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a22:	f043 0301 	orr.w	r3, r3, #1
 8006a26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a28:	4b1f      	ldr	r3, [pc, #124]	; (8006aa8 <HAL_PCD_MspInit+0x94>)
 8006a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	613b      	str	r3, [r7, #16]
 8006a32:	693b      	ldr	r3, [r7, #16]
  
  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8006a34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a42:	2303      	movs	r3, #3
 8006a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006a46:	230a      	movs	r3, #10
 8006a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8006a4a:	f107 0314 	add.w	r3, r7, #20
 8006a4e:	4619      	mov	r1, r3
 8006a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a54:	f002 f90e 	bl	8008c74 <HAL_GPIO_Init>
  
  /* Configure VBUS Pin */

  
  /* Configure ID pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a5e:	2312      	movs	r3, #18
 8006a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a62:	2301      	movs	r3, #1
 8006a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006a66:	230a      	movs	r3, #10
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a6a:	f107 0314 	add.w	r3, r7, #20
 8006a6e:	4619      	mov	r1, r3
 8006a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a74:	f002 f8fe 	bl	8008c74 <HAL_GPIO_Init>
  
  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006a78:	4a0b      	ldr	r2, [pc, #44]	; (8006aa8 <HAL_PCD_MspInit+0x94>)
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <HAL_PCD_MspInit+0x94>)
 8006a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a84:	4b08      	ldr	r3, [pc, #32]	; (8006aa8 <HAL_PCD_MspInit+0x94>)
 8006a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a8c:	60fb      	str	r3, [r7, #12]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
  
  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 8006a90:	2200      	movs	r2, #0
 8006a92:	2107      	movs	r1, #7
 8006a94:	2043      	movs	r0, #67	; 0x43
 8006a96:	f001 fe02 	bl	800869e <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006a9a:	2043      	movs	r0, #67	; 0x43
 8006a9c:	f001 fe1b 	bl	80086d6 <HAL_NVIC_EnableIRQ>
    
}
 8006aa0:	bf00      	nop
 8006aa2:	3728      	adds	r7, #40	; 0x28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40021000 	.word	0x40021000

08006aac <HAL_PCD_MspDeInit>:
  * @brief  De-Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)
{  
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Disable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 8006ab4:	4a08      	ldr	r2, [pc, #32]	; (8006ad8 <HAL_PCD_MspDeInit+0x2c>)
 8006ab6:	4b08      	ldr	r3, [pc, #32]	; (8006ad8 <HAL_PCD_MspDeInit+0x2c>)
 8006ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006abe:	64d3      	str	r3, [r2, #76]	; 0x4c
  __HAL_RCC_SYSCFG_CLK_DISABLE(); 
 8006ac0:	4a05      	ldr	r2, [pc, #20]	; (8006ad8 <HAL_PCD_MspDeInit+0x2c>)
 8006ac2:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <HAL_PCD_MspDeInit+0x2c>)
 8006ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ac6:	f023 0301 	bic.w	r3, r3, #1
 8006aca:	6613      	str	r3, [r2, #96]	; 0x60
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	40021000 	.word	0x40021000

08006adc <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8006af0:	4619      	mov	r1, r3
 8006af2:	4610      	mov	r0, r2
 8006af4:	f00a fa33 	bl	8010f5e <USBD_LL_SetupStage>
}
 8006af8:	bf00      	nop
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 8006b12:	78fa      	ldrb	r2, [r7, #3]
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	4613      	mov	r3, r2
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	1a9b      	subs	r3, r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	440b      	add	r3, r1
 8006b20:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	4619      	mov	r1, r3
 8006b2a:	f00a fa62 	bl	8010ff2 <USBD_LL_DataOutStage>
}
 8006b2e:	bf00      	nop
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b082      	sub	sp, #8
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 03c8 	ldr.w	r0, [r3, #968]	; 0x3c8
 8006b48:	78fa      	ldrb	r2, [r7, #3]
 8006b4a:	6879      	ldr	r1, [r7, #4]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	1a9b      	subs	r3, r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	440b      	add	r3, r1
 8006b56:	3348      	adds	r3, #72	; 0x48
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	78fb      	ldrb	r3, [r7, #3]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	f00a faa3 	bl	80110a8 <USBD_LL_DataInStage>
}
 8006b62:	bf00      	nop
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b082      	sub	sp, #8
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF(hpcd->pData);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f00a fb89 	bl	8011290 <USBD_LL_SOF>
}
 8006b7e:	bf00      	nop
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006b94:	4618      	mov	r0, r3
 8006b96:	f00a fb16 	bl	80111c6 <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f00a fb3e 	bl	8011224 <USBD_LL_SetSpeed>
}
 8006ba8:	bf00      	nop
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  USBD_LL_Suspend(hpcd->pData);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f00a fb40 	bl	8011244 <USBD_LL_Suspend>
}
 8006bc4:	bf00      	nop
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  USBD_LL_Resume(hpcd->pData);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f00a fb47 	bl	801126e <USBD_LL_Resume>
}
 8006be0:	bf00      	nop
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006bfa:	78fa      	ldrb	r2, [r7, #3]
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f00a fb6d 	bl	80112de <USBD_LL_IsoOUTIncomplete>
}
 8006c04:	bf00      	nop
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	460b      	mov	r3, r1
 8006c16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c1e:	78fa      	ldrb	r2, [r7, #3]
 8006c20:	4611      	mov	r1, r2
 8006c22:	4618      	mov	r0, r3
 8006c24:	f00a fb4e 	bl	80112c4 <USBD_LL_IsoINIncomplete>
}
 8006c28:	bf00      	nop
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected(hpcd->pData);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f00a fb5a 	bl	80112f8 <USBD_LL_DevConnected>
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected(hpcd->pData);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f00a fb57 	bl	801130e <USBD_LL_DevDisconnected>
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 8006c70:	4b21      	ldr	r3, [pc, #132]	; (8006cf8 <USBD_LL_Init+0x90>)
 8006c72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006c76:	601a      	str	r2, [r3, #0]
  hpcd.Init.dev_endpoints = 5;
 8006c78:	4b1f      	ldr	r3, [pc, #124]	; (8006cf8 <USBD_LL_Init+0x90>)
 8006c7a:	2205      	movs	r2, #5
 8006c7c:	605a      	str	r2, [r3, #4]
  hpcd.Init.use_dedicated_ep1 = 0;
 8006c7e:	4b1e      	ldr	r3, [pc, #120]	; (8006cf8 <USBD_LL_Init+0x90>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;
 8006c84:	4b1c      	ldr	r3, [pc, #112]	; (8006cf8 <USBD_LL_Init+0x90>)
 8006c86:	2240      	movs	r2, #64	; 0x40
 8006c88:	615a      	str	r2, [r3, #20]
  hpcd.Init.dma_enable = 0;
 8006c8a:	4b1b      	ldr	r3, [pc, #108]	; (8006cf8 <USBD_LL_Init+0x90>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	611a      	str	r2, [r3, #16]
  hpcd.Init.low_power_enable = 0;
 8006c90:	4b19      	ldr	r3, [pc, #100]	; (8006cf8 <USBD_LL_Init+0x90>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	621a      	str	r2, [r3, #32]
  hpcd.Init.lpm_enable = 0;
 8006c96:	4b18      	ldr	r3, [pc, #96]	; (8006cf8 <USBD_LL_Init+0x90>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd.Init.battery_charging_enable = 0;
 8006c9c:	4b16      	ldr	r3, [pc, #88]	; (8006cf8 <USBD_LL_Init+0x90>)
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006ca2:	4b15      	ldr	r3, [pc, #84]	; (8006cf8 <USBD_LL_Init+0x90>)
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	619a      	str	r2, [r3, #24]
  hpcd.Init.Sof_enable = 0;
 8006ca8:	4b13      	ldr	r3, [pc, #76]	; (8006cf8 <USBD_LL_Init+0x90>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	61da      	str	r2, [r3, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 8006cae:	4b12      	ldr	r3, [pc, #72]	; (8006cf8 <USBD_LL_Init+0x90>)
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	60da      	str	r2, [r3, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 8006cb4:	4b10      	ldr	r3, [pc, #64]	; (8006cf8 <USBD_LL_Init+0x90>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8006cba:	4a0f      	ldr	r2, [pc, #60]	; (8006cf8 <USBD_LL_Init+0x90>)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8c2 33c8 	str.w	r3, [r2, #968]	; 0x3c8
  pdev->pData = &hpcd;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a0c      	ldr	r2, [pc, #48]	; (8006cf8 <USBD_LL_Init+0x90>)
 8006cc6:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 8006cca:	480b      	ldr	r0, [pc, #44]	; (8006cf8 <USBD_LL_Init+0x90>)
 8006ccc:	f002 f97e 	bl	8008fcc <HAL_PCD_Init>
  
  /* Configure EPs FIFOs */
  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 8006cd0:	2180      	movs	r1, #128	; 0x80
 8006cd2:	4809      	ldr	r0, [pc, #36]	; (8006cf8 <USBD_LL_Init+0x90>)
 8006cd4:	f003 fb6e 	bl	800a3b4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 8006cd8:	2240      	movs	r2, #64	; 0x40
 8006cda:	2100      	movs	r1, #0
 8006cdc:	4806      	ldr	r0, [pc, #24]	; (8006cf8 <USBD_LL_Init+0x90>)
 8006cde:	f003 fb1c 	bl	800a31a <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x80);
 8006ce2:	2280      	movs	r2, #128	; 0x80
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	4804      	ldr	r0, [pc, #16]	; (8006cf8 <USBD_LL_Init+0x90>)
 8006ce8:	f003 fb17 	bl	800a31a <HAL_PCDEx_SetTxFiFo>

  return USBD_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20009244 	.word	0x20009244

08006cfc <USBD_LL_DeInit>:
  * @brief  De-Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  HAL_PCD_DeInit(pdev->pData);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f002 fa7b 	bl	8009206 <HAL_PCD_DeInit>
  return USBD_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b082      	sub	sp, #8
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start(pdev->pData);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f002 fa88 	bl	800923e <HAL_PCD_Start>
  return USBD_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_LL_Stop>:
  * @brief  Stops the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  HAL_PCD_Stop(pdev->pData);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006d46:	4618      	mov	r0, r3
 8006d48:	f002 fa9b 	bl	8009282 <HAL_PCD_Stop>
  return USBD_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b082      	sub	sp, #8
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	4608      	mov	r0, r1
 8006d60:	4611      	mov	r1, r2
 8006d62:	461a      	mov	r2, r3
 8006d64:	4603      	mov	r3, r0
 8006d66:	70fb      	strb	r3, [r7, #3]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	70bb      	strb	r3, [r7, #2]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open(pdev->pData,
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006d76:	78bb      	ldrb	r3, [r7, #2]
 8006d78:	883a      	ldrh	r2, [r7, #0]
 8006d7a:	78f9      	ldrb	r1, [r7, #3]
 8006d7c:	f002 fffd 	bl	8009d7a <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b082      	sub	sp, #8
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	460b      	mov	r3, r1
 8006d94:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006d9c:	78fa      	ldrb	r2, [r7, #3]
 8006d9e:	4611      	mov	r1, r2
 8006da0:	4618      	mov	r0, r3
 8006da2:	f003 f846 	bl	8009e32 <HAL_PCD_EP_Close>
  return USBD_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006dc2:	78fa      	ldrb	r2, [r7, #3]
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f003 f9ed 	bl	800a1a6 <HAL_PCD_EP_Flush>
  return USBD_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b082      	sub	sp, #8
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	460b      	mov	r3, r1
 8006de0:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006de8:	78fa      	ldrb	r2, [r7, #3]
 8006dea:	4611      	mov	r1, r2
 8006dec:	4618      	mov	r0, r3
 8006dee:	f003 f92e 	bl	800a04e <HAL_PCD_EP_SetStall>
  return USBD_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006e0e:	78fa      	ldrb	r2, [r7, #3]
 8006e10:	4611      	mov	r1, r2
 8006e12:	4618      	mov	r0, r3
 8006e14:	f003 f979 	bl	800a10a <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b085      	sub	sp, #20
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006e34:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006e36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	da0b      	bge.n	8006e56 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006e3e:	78fb      	ldrb	r3, [r7, #3]
 8006e40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e44:	68f9      	ldr	r1, [r7, #12]
 8006e46:	4613      	mov	r3, r2
 8006e48:	00db      	lsls	r3, r3, #3
 8006e4a:	1a9b      	subs	r3, r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	440b      	add	r3, r1
 8006e50:	333e      	adds	r3, #62	; 0x3e
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	e00b      	b.n	8006e6e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006e56:	78fb      	ldrb	r3, [r7, #3]
 8006e58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e5c:	68f9      	ldr	r1, [r7, #12]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	00db      	lsls	r3, r3, #3
 8006e62:	1a9b      	subs	r3, r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	440b      	add	r3, r1
 8006e68:	f503 73f1 	add.w	r3, r3, #482	; 0x1e2
 8006e6c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	460b      	mov	r3, r1
 8006e84:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006e8c:	78fa      	ldrb	r2, [r7, #3]
 8006e8e:	4611      	mov	r1, r2
 8006e90:	4618      	mov	r0, r3
 8006e92:	f002 ff4d 	bl	8009d30 <HAL_PCD_SetAddress>
  return USBD_OK; 
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	607a      	str	r2, [r7, #4]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	460b      	mov	r3, r1
 8006eae:	72fb      	strb	r3, [r7, #11]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006eba:	893b      	ldrh	r3, [r7, #8]
 8006ebc:	7af9      	ldrb	r1, [r7, #11]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	f003 f871 	bl	8009fa6 <HAL_PCD_EP_Transmit>
  return USBD_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	60f8      	str	r0, [r7, #12]
 8006ed6:	607a      	str	r2, [r7, #4]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	460b      	mov	r3, r1
 8006edc:	72fb      	strb	r3, [r7, #11]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006ee8:	893b      	ldrh	r3, [r7, #8]
 8006eea:	7af9      	ldrb	r1, [r7, #11]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	f002 ffed 	bl	8009ecc <HAL_PCD_EP_Receive>
  return USBD_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006f0e:	78fa      	ldrb	r2, [r7, #3]
 8006f10:	4611      	mov	r1, r2
 8006f12:	4618      	mov	r0, r3
 8006f14:	f003 f82e 	bl	8009f74 <HAL_PCD_EP_GetRxCount>
 8006f18:	4603      	mov	r3, r0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
	...

08006f24 <USBD_VCP_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	6039      	str	r1, [r7, #0]
 8006f2e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_DeviceDesc_VCP);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2212      	movs	r2, #18
 8006f34:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_DeviceDesc_VCP;
 8006f36:	4b03      	ldr	r3, [pc, #12]	; (8006f44 <USBD_VCP_DeviceDescriptor+0x20>)
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	20000064 	.word	0x20000064

08006f48 <USBD_MSC_DeviceDescriptor>:

uint8_t *USBD_MSC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	6039      	str	r1, [r7, #0]
 8006f52:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_DeviceDesc);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2212      	movs	r2, #18
 8006f58:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_DeviceDesc;
 8006f5a:	4b03      	ldr	r3, [pc, #12]	; (8006f68 <USBD_MSC_DeviceDescriptor+0x20>)
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	20000050 	.word	0x20000050

08006f6c <USBD_VCP_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	6039      	str	r1, [r7, #0]
 8006f76:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2204      	movs	r2, #4
 8006f7c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_LangIDDesc;
 8006f7e:	4b03      	ldr	r3, [pc, #12]	; (8006f8c <USBD_VCP_LangIDStrDescriptor+0x20>)
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	20000078 	.word	0x20000078

08006f90 <USBD_MSC_LangIDStrDescriptor>:

uint8_t *USBD_MSC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	4603      	mov	r3, r0
 8006f98:	6039      	str	r1, [r7, #0]
 8006f9a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);  
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2204      	movs	r2, #4
 8006fa0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_LangIDDesc;
 8006fa2:	4b03      	ldr	r3, [pc, #12]	; (8006fb0 <USBD_MSC_LangIDStrDescriptor+0x20>)
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	20000078 	.word	0x20000078

08006fb4 <USBD_VCP_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	6039      	str	r1, [r7, #0]
 8006fbe:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING_VCP, USBD_StrDesc, length);
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	4904      	ldr	r1, [pc, #16]	; (8006fd4 <USBD_VCP_ProductStrDescriptor+0x20>)
 8006fc4:	4804      	ldr	r0, [pc, #16]	; (8006fd8 <USBD_VCP_ProductStrDescriptor+0x24>)
 8006fc6:	f00a fdbc 	bl	8011b42 <USBD_GetString>
  return USBD_StrDesc;
 8006fca:	4b02      	ldr	r3, [pc, #8]	; (8006fd4 <USBD_VCP_ProductStrDescriptor+0x20>)
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	20009610 	.word	0x20009610
 8006fd8:	08017a44 	.word	0x08017a44

08006fdc <USBD_MSC_ProductStrDescriptor>:

uint8_t *USBD_MSC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	6039      	str	r1, [r7, #0]
 8006fe6:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)(uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	4904      	ldr	r1, [pc, #16]	; (8006ffc <USBD_MSC_ProductStrDescriptor+0x20>)
 8006fec:	4804      	ldr	r0, [pc, #16]	; (8007000 <USBD_MSC_ProductStrDescriptor+0x24>)
 8006fee:	f00a fda8 	bl	8011b42 <USBD_GetString>
  return USBD_StrDesc;
 8006ff2:	4b02      	ldr	r3, [pc, #8]	; (8006ffc <USBD_MSC_ProductStrDescriptor+0x20>)
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20009610 	.word	0x20009610
 8007000:	08017a68 	.word	0x08017a68

08007004 <USBD_VCP_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	4603      	mov	r3, r0
 800700c:	6039      	str	r1, [r7, #0]
 800700e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	4904      	ldr	r1, [pc, #16]	; (8007024 <USBD_VCP_ManufacturerStrDescriptor+0x20>)
 8007014:	4804      	ldr	r0, [pc, #16]	; (8007028 <USBD_VCP_ManufacturerStrDescriptor+0x24>)
 8007016:	f00a fd94 	bl	8011b42 <USBD_GetString>
  return USBD_StrDesc;
 800701a:	4b02      	ldr	r3, [pc, #8]	; (8007024 <USBD_VCP_ManufacturerStrDescriptor+0x20>)
}
 800701c:	4618      	mov	r0, r3
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	20009610 	.word	0x20009610
 8007028:	08017a80 	.word	0x08017a80

0800702c <USBD_MSC_ManufacturerStrDescriptor>:

uint8_t *USBD_MSC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	4603      	mov	r3, r0
 8007034:	6039      	str	r1, [r7, #0]
 8007036:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)(uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	4904      	ldr	r1, [pc, #16]	; (800704c <USBD_MSC_ManufacturerStrDescriptor+0x20>)
 800703c:	4804      	ldr	r0, [pc, #16]	; (8007050 <USBD_MSC_ManufacturerStrDescriptor+0x24>)
 800703e:	f00a fd80 	bl	8011b42 <USBD_GetString>
  return USBD_StrDesc;
 8007042:	4b02      	ldr	r3, [pc, #8]	; (800704c <USBD_MSC_ManufacturerStrDescriptor+0x20>)
}
 8007044:	4618      	mov	r0, r3
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	20009610 	.word	0x20009610
 8007050:	08017a80 	.word	0x08017a80

08007054 <USBD_VCP_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	6039      	str	r1, [r7, #0]
 800705e:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	221a      	movs	r2, #26
 8007064:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNumV();
 8007066:	f000 f895 	bl	8007194 <Get_SerialNumV>

  return (uint8_t*)USBD_StringSerial;
 800706a:	4b02      	ldr	r3, [pc, #8]	; (8007074 <USBD_VCP_SerialStrDescriptor+0x20>)
}
 800706c:	4618      	mov	r0, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	2000007c 	.word	0x2000007c

08007078 <USBD_MSC_SerialStrDescriptor>:

uint8_t *USBD_MSC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	4603      	mov	r3, r0
 8007080:	6039      	str	r1, [r7, #0]
 8007082:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	221a      	movs	r2, #26
 8007088:	801a      	strh	r2, [r3, #0]
  
  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 800708a:	f000 f857 	bl	800713c <Get_SerialNum>
  
  return (uint8_t*)USBD_StringSerial;
 800708e:	4b02      	ldr	r3, [pc, #8]	; (8007098 <USBD_MSC_SerialStrDescriptor+0x20>)
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	2000007c 	.word	0x2000007c

0800709c <USBD_VCP_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	4603      	mov	r3, r0
 80070a4:	6039      	str	r1, [r7, #0]
 80070a6:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING_VCP, USBD_StrDesc, length);
 80070a8:	683a      	ldr	r2, [r7, #0]
 80070aa:	4904      	ldr	r1, [pc, #16]	; (80070bc <USBD_VCP_ConfigStrDescriptor+0x20>)
 80070ac:	4804      	ldr	r0, [pc, #16]	; (80070c0 <USBD_VCP_ConfigStrDescriptor+0x24>)
 80070ae:	f00a fd48 	bl	8011b42 <USBD_GetString>
  return USBD_StrDesc;
 80070b2:	4b02      	ldr	r3, [pc, #8]	; (80070bc <USBD_VCP_ConfigStrDescriptor+0x20>)
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	20009610 	.word	0x20009610
 80070c0:	08017a94 	.word	0x08017a94

080070c4 <USBD_MSC_ConfigStrDescriptor>:

uint8_t *USBD_MSC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	4603      	mov	r3, r0
 80070cc:	6039      	str	r1, [r7, #0]
 80070ce:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)(uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	4904      	ldr	r1, [pc, #16]	; (80070e4 <USBD_MSC_ConfigStrDescriptor+0x20>)
 80070d4:	4804      	ldr	r0, [pc, #16]	; (80070e8 <USBD_MSC_ConfigStrDescriptor+0x24>)
 80070d6:	f00a fd34 	bl	8011b42 <USBD_GetString>
  return USBD_StrDesc;  
 80070da:	4b02      	ldr	r3, [pc, #8]	; (80070e4 <USBD_MSC_ConfigStrDescriptor+0x20>)
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	20009610 	.word	0x20009610
 80070e8:	08017aa0 	.word	0x08017aa0

080070ec <USBD_VCP_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	6039      	str	r1, [r7, #0]
 80070f6:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING_VCP, USBD_StrDesc, length);
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	4904      	ldr	r1, [pc, #16]	; (800710c <USBD_VCP_InterfaceStrDescriptor+0x20>)
 80070fc:	4804      	ldr	r0, [pc, #16]	; (8007110 <USBD_VCP_InterfaceStrDescriptor+0x24>)
 80070fe:	f00a fd20 	bl	8011b42 <USBD_GetString>
  return USBD_StrDesc;
 8007102:	4b02      	ldr	r3, [pc, #8]	; (800710c <USBD_VCP_InterfaceStrDescriptor+0x20>)
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20009610 	.word	0x20009610
 8007110:	08017aac 	.word	0x08017aac

08007114 <USBD_MSC_InterfaceStrDescriptor>:

uint8_t *USBD_MSC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	4603      	mov	r3, r0
 800711c:	6039      	str	r1, [r7, #0]
 800711e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)(uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	4904      	ldr	r1, [pc, #16]	; (8007134 <USBD_MSC_InterfaceStrDescriptor+0x20>)
 8007124:	4804      	ldr	r0, [pc, #16]	; (8007138 <USBD_MSC_InterfaceStrDescriptor+0x24>)
 8007126:	f00a fd0c 	bl	8011b42 <USBD_GetString>
  return USBD_StrDesc;  
 800712a:	4b02      	ldr	r3, [pc, #8]	; (8007134 <USBD_MSC_InterfaceStrDescriptor+0x20>)
}
 800712c:	4618      	mov	r0, r3
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	20009610 	.word	0x20009610
 8007138:	08017abc 	.word	0x08017abc

0800713c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8007142:	4b0f      	ldr	r3, [pc, #60]	; (8007180 <Get_SerialNum+0x44>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8007148:	4b0e      	ldr	r3, [pc, #56]	; (8007184 <Get_SerialNum+0x48>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 800714e:	4b0e      	ldr	r3, [pc, #56]	; (8007188 <Get_SerialNum+0x4c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	607b      	str	r3, [r7, #4]
  
  deviceserial0 += deviceserial2;
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4413      	add	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
  
  if (deviceserial0 != 0)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d009      	beq.n	8007176 <Get_SerialNum+0x3a>
  {
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8007162:	2208      	movs	r2, #8
 8007164:	4909      	ldr	r1, [pc, #36]	; (800718c <Get_SerialNum+0x50>)
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f000 f840 	bl	80071ec <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800716c:	2204      	movs	r2, #4
 800716e:	4908      	ldr	r1, [pc, #32]	; (8007190 <Get_SerialNum+0x54>)
 8007170:	68b8      	ldr	r0, [r7, #8]
 8007172:	f000 f83b 	bl	80071ec <IntToUnicode>
  }
}
 8007176:	bf00      	nop
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	1fff7a10 	.word	0x1fff7a10
 8007184:	1fff7a14 	.word	0x1fff7a14
 8007188:	1fff7a18 	.word	0x1fff7a18
 800718c:	2000007e 	.word	0x2000007e
 8007190:	2000008e 	.word	0x2000008e

08007194 <Get_SerialNumV>:

static void Get_SerialNumV(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t*)VCP_DEVICE_ID1;
 800719a:	4b0f      	ldr	r3, [pc, #60]	; (80071d8 <Get_SerialNumV+0x44>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t*)VCP_DEVICE_ID2;
 80071a0:	4b0e      	ldr	r3, [pc, #56]	; (80071dc <Get_SerialNumV+0x48>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t*)VCP_DEVICE_ID3;
 80071a6:	4b0e      	ldr	r3, [pc, #56]	; (80071e0 <Get_SerialNumV+0x4c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4413      	add	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d009      	beq.n	80071ce <Get_SerialNumV+0x3a>
  {
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 80071ba:	2208      	movs	r2, #8
 80071bc:	4909      	ldr	r1, [pc, #36]	; (80071e4 <Get_SerialNumV+0x50>)
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 f814 	bl	80071ec <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 80071c4:	2204      	movs	r2, #4
 80071c6:	4908      	ldr	r1, [pc, #32]	; (80071e8 <Get_SerialNumV+0x54>)
 80071c8:	68b8      	ldr	r0, [r7, #8]
 80071ca:	f000 f80f 	bl	80071ec <IntToUnicode>
  }
}
 80071ce:	bf00      	nop
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	1fff7a30 	.word	0x1fff7a30
 80071dc:	1fff7a34 	.word	0x1fff7a34
 80071e0:	1fff7a38 	.word	0x1fff7a38
 80071e4:	2000007e 	.word	0x2000007e
 80071e8:	2000008e 	.word	0x2000008e

080071ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	4613      	mov	r3, r2
 80071f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	75fb      	strb	r3, [r7, #23]
  
  for( idx = 0 ; idx < len ; idx ++)
 80071fe:	2300      	movs	r3, #0
 8007200:	75fb      	strb	r3, [r7, #23]
 8007202:	e027      	b.n	8007254 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	0f1b      	lsrs	r3, r3, #28
 8007208:	2b09      	cmp	r3, #9
 800720a:	d80b      	bhi.n	8007224 <IntToUnicode+0x38>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800720c:	7dfb      	ldrb	r3, [r7, #23]
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	461a      	mov	r2, r3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	4413      	add	r3, r2
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	0f12      	lsrs	r2, r2, #28
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	3230      	adds	r2, #48	; 0x30
 800721e:	b2d2      	uxtb	r2, r2
 8007220:	701a      	strb	r2, [r3, #0]
 8007222:	e00a      	b.n	800723a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8007224:	7dfb      	ldrb	r3, [r7, #23]
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	461a      	mov	r2, r3
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	4413      	add	r3, r2
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	0f12      	lsrs	r2, r2, #28
 8007232:	b2d2      	uxtb	r2, r2
 8007234:	3237      	adds	r2, #55	; 0x37
 8007236:	b2d2      	uxtb	r2, r2
 8007238:	701a      	strb	r2, [r3, #0]
    }
    
    value = value << 4;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	60fb      	str	r3, [r7, #12]
    
    pbuf[ 2* idx + 1] = 0;
 8007240:	7dfb      	ldrb	r3, [r7, #23]
 8007242:	005b      	lsls	r3, r3, #1
 8007244:	3301      	adds	r3, #1
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	4413      	add	r3, r2
 800724a:	2200      	movs	r2, #0
 800724c:	701a      	strb	r2, [r3, #0]
  for( idx = 0 ; idx < len ; idx ++)
 800724e:	7dfb      	ldrb	r3, [r7, #23]
 8007250:	3301      	adds	r3, #1
 8007252:	75fb      	strb	r3, [r7, #23]
 8007254:	7dfa      	ldrb	r2, [r7, #23]
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	429a      	cmp	r2, r3
 800725a:	d3d3      	bcc.n	8007204 <IntToUnicode+0x18>
  }
}
 800725c:	bf00      	nop
 800725e:	371c      	adds	r7, #28
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <LL_RTC_TIME_GetHour>:
{
 8007268:	b490      	push	{r4, r7}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;
 8007270:	2400      	movs	r4, #0
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 147c 	and.w	r4, r3, #4128768	; 0x3f0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 800727a:	f404 1340 	and.w	r3, r4, #3145728	; 0x300000
 800727e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8007282:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	fa92 f2a2 	rbit	r2, r2
 800728a:	60ba      	str	r2, [r7, #8]
  return(result);
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	fab2 f282 	clz	r2, r2
 8007292:	40d3      	lsrs	r3, r2
 8007294:	011a      	lsls	r2, r3, #4
 8007296:	f404 2370 	and.w	r3, r4, #983040	; 0xf0000
 800729a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800729e:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072a0:	6979      	ldr	r1, [r7, #20]
 80072a2:	fa91 f1a1 	rbit	r1, r1
 80072a6:	6139      	str	r1, [r7, #16]
  return(result);
 80072a8:	6939      	ldr	r1, [r7, #16]
 80072aa:	fab1 f181 	clz	r1, r1
 80072ae:	40cb      	lsrs	r3, r1
 80072b0:	4313      	orrs	r3, r2
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3718      	adds	r7, #24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bc90      	pop	{r4, r7}
 80072ba:	4770      	bx	lr

080072bc <LL_RTC_TIME_GetMinute>:
{
 80072bc:	b490      	push	{r4, r7}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;
 80072c4:	2400      	movs	r4, #0
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 44fe 	and.w	r4, r3, #32512	; 0x7f00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 80072ce:	f404 43e0 	and.w	r3, r4, #28672	; 0x7000
 80072d2:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80072d6:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	fa92 f2a2 	rbit	r2, r2
 80072de:	60ba      	str	r2, [r7, #8]
  return(result);
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	fab2 f282 	clz	r2, r2
 80072e6:	40d3      	lsrs	r3, r2
 80072e8:	011a      	lsls	r2, r3, #4
 80072ea:	f404 6370 	and.w	r3, r4, #3840	; 0xf00
 80072ee:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80072f2:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072f4:	6979      	ldr	r1, [r7, #20]
 80072f6:	fa91 f1a1 	rbit	r1, r1
 80072fa:	6139      	str	r1, [r7, #16]
  return(result);
 80072fc:	6939      	ldr	r1, [r7, #16]
 80072fe:	fab1 f181 	clz	r1, r1
 8007302:	40cb      	lsrs	r3, r1
 8007304:	4313      	orrs	r3, r2
}
 8007306:	4618      	mov	r0, r3
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bc90      	pop	{r4, r7}
 800730e:	4770      	bx	lr

08007310 <LL_RTC_TIME_GetSecond>:
{
 8007310:	b490      	push	{r4, r7}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;
 8007318:	2400      	movs	r4, #0
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 047f 	and.w	r4, r3, #127	; 0x7f
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 8007322:	f004 0370 	and.w	r3, r4, #112	; 0x70
 8007326:	2270      	movs	r2, #112	; 0x70
 8007328:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	fa92 f2a2 	rbit	r2, r2
 8007330:	60ba      	str	r2, [r7, #8]
  return(result);
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	fab2 f282 	clz	r2, r2
 8007338:	40d3      	lsrs	r3, r2
 800733a:	011a      	lsls	r2, r3, #4
 800733c:	f004 030f 	and.w	r3, r4, #15
 8007340:	210f      	movs	r1, #15
 8007342:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007344:	6979      	ldr	r1, [r7, #20]
 8007346:	fa91 f1a1 	rbit	r1, r1
 800734a:	6139      	str	r1, [r7, #16]
  return(result);
 800734c:	6939      	ldr	r1, [r7, #16]
 800734e:	fab1 f181 	clz	r1, r1
 8007352:	40cb      	lsrs	r3, r1
 8007354:	4313      	orrs	r3, r2
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bc90      	pop	{r4, r7}
 800735e:	4770      	bx	lr

08007360 <LL_RTC_DATE_GetYear>:
{
 8007360:	b490      	push	{r4, r7}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;
 8007368:	2400      	movs	r4, #0
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f403 047f 	and.w	r4, r3, #16711680	; 0xff0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 8007372:	f404 0370 	and.w	r3, r4, #15728640	; 0xf00000
 8007376:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800737a:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	fa92 f2a2 	rbit	r2, r2
 8007382:	60ba      	str	r2, [r7, #8]
  return(result);
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	fab2 f282 	clz	r2, r2
 800738a:	40d3      	lsrs	r3, r2
 800738c:	011a      	lsls	r2, r3, #4
 800738e:	f404 2370 	and.w	r3, r4, #983040	; 0xf0000
 8007392:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8007396:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007398:	6979      	ldr	r1, [r7, #20]
 800739a:	fa91 f1a1 	rbit	r1, r1
 800739e:	6139      	str	r1, [r7, #16]
  return(result);
 80073a0:	6939      	ldr	r1, [r7, #16]
 80073a2:	fab1 f181 	clz	r1, r1
 80073a6:	40cb      	lsrs	r3, r1
 80073a8:	4313      	orrs	r3, r2
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3718      	adds	r7, #24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bc90      	pop	{r4, r7}
 80073b2:	4770      	bx	lr

080073b4 <LL_RTC_DATE_GetMonth>:
{
 80073b4:	b490      	push	{r4, r7}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;
 80073bc:	2400      	movs	r4, #0
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f403 54f8 	and.w	r4, r3, #7936	; 0x1f00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 80073c6:	f404 5380 	and.w	r3, r4, #4096	; 0x1000
 80073ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80073ce:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	fa92 f2a2 	rbit	r2, r2
 80073d6:	60ba      	str	r2, [r7, #8]
  return(result);
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	fab2 f282 	clz	r2, r2
 80073de:	40d3      	lsrs	r3, r2
 80073e0:	011a      	lsls	r2, r3, #4
 80073e2:	f404 6370 	and.w	r3, r4, #3840	; 0xf00
 80073e6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80073ea:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073ec:	6979      	ldr	r1, [r7, #20]
 80073ee:	fa91 f1a1 	rbit	r1, r1
 80073f2:	6139      	str	r1, [r7, #16]
  return(result);
 80073f4:	6939      	ldr	r1, [r7, #16]
 80073f6:	fab1 f181 	clz	r1, r1
 80073fa:	40cb      	lsrs	r3, r1
 80073fc:	4313      	orrs	r3, r2
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	bc90      	pop	{r4, r7}
 8007406:	4770      	bx	lr

08007408 <LL_RTC_DATE_GetDay>:
{
 8007408:	b490      	push	{r4, r7}
 800740a:	b086      	sub	sp, #24
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;
 8007410:	2400      	movs	r4, #0
  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f003 043f 	and.w	r4, r3, #63	; 0x3f
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 800741a:	f004 0330 	and.w	r3, r4, #48	; 0x30
 800741e:	2230      	movs	r2, #48	; 0x30
 8007420:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	fa92 f2a2 	rbit	r2, r2
 8007428:	60ba      	str	r2, [r7, #8]
  return(result);
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	fab2 f282 	clz	r2, r2
 8007430:	40d3      	lsrs	r3, r2
 8007432:	011a      	lsls	r2, r3, #4
 8007434:	f004 030f 	and.w	r3, r4, #15
 8007438:	210f      	movs	r1, #15
 800743a:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800743c:	6979      	ldr	r1, [r7, #20]
 800743e:	fa91 f1a1 	rbit	r1, r1
 8007442:	6139      	str	r1, [r7, #16]
  return(result);
 8007444:	6939      	ldr	r1, [r7, #16]
 8007446:	fab1 f181 	clz	r1, r1
 800744a:	40cb      	lsrs	r3, r1
 800744c:	4313      	orrs	r3, r2
}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bc90      	pop	{r4, r7}
 8007456:	4770      	bx	lr

08007458 <STORAGE_Init>:
  * @brief  Initailizes the storage unit (medium)       
  * @param  lun: Logical unit number
  * @retval Status (0 : Ok / -1 : Error)
  */
int8_t STORAGE_Init(uint8_t lun)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	4603      	mov	r3, r0
 8007460:	71fb      	strb	r3, [r7, #7]
  BSP_SD_Init();
 8007462:	f7f9 febb 	bl	80011dc <BSP_SD_Init>
 // BSP_SD_ITConfig();
  return 0;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <STORAGE_GetCapacity>:
  * @param  block_num: Number of total block number
  * @param  block_size: Block size
  * @retval Status (0: Ok / -1: Error)
  */
int8_t STORAGE_GetCapacity(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8007470:	b5b0      	push	{r4, r5, r7, lr}
 8007472:	b09c      	sub	sp, #112	; 0x70
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	73fb      	strb	r3, [r7, #15]
  HAL_SD_CardInfoTypedef info;
  int8_t ret = -1;  
 800747e:	23ff      	movs	r3, #255	; 0xff
 8007480:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8007484:	f7f9 fef2 	bl	800126c <BSP_SD_IsDetected>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d015      	beq.n	80074ba <STORAGE_GetCapacity+0x4a>
  {
    BSP_SD_GetCardInfo(&info);
 800748e:	f107 0310 	add.w	r3, r7, #16
 8007492:	4618      	mov	r0, r3
 8007494:	f7f9 ffa4 	bl	80013e0 <BSP_SD_GetCardInfo>
    
    *block_num = (info.CardCapacity)/STORAGE_BLK_SIZ  - 1;
 8007498:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800749c:	0a54      	lsrs	r4, r2, #9
 800749e:	ea44 54c3 	orr.w	r4, r4, r3, lsl #23
 80074a2:	0a5d      	lsrs	r5, r3, #9
 80074a4:	4623      	mov	r3, r4
 80074a6:	1e5a      	subs	r2, r3, #1
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	601a      	str	r2, [r3, #0]
    *block_size = STORAGE_BLK_SIZ;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074b2:	801a      	strh	r2, [r3, #0]
    ret = 0;
 80074b4:	2300      	movs	r3, #0
 80074b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  return ret;
 80074ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3770      	adds	r7, #112	; 0x70
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080074c8 <STORAGE_IsReady>:
  * @brief  Checks whether the medium is ready.  
  * @param  lun: Logical unit number
  * @retval Status (0: Ok / -1: Error)
  */
int8_t STORAGE_IsReady(uint8_t lun)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	4603      	mov	r3, r0
 80074d0:	71fb      	strb	r3, [r7, #7]
  static int8_t prev_status = 0;
  int8_t ret = -1;
 80074d2:	23ff      	movs	r3, #255	; 0xff
 80074d4:	73fb      	strb	r3, [r7, #15]
  
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 80074d6:	f7f9 fec9 	bl	800126c <BSP_SD_IsDetected>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d011      	beq.n	8007504 <STORAGE_IsReady+0x3c>
  {
    if(prev_status < 0)
 80074e0:	4b0f      	ldr	r3, [pc, #60]	; (8007520 <STORAGE_IsReady+0x58>)
 80074e2:	f993 3000 	ldrsb.w	r3, [r3]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	da04      	bge.n	80074f4 <STORAGE_IsReady+0x2c>
    {
      BSP_SD_Init();
 80074ea:	f7f9 fe77 	bl	80011dc <BSP_SD_Init>
      prev_status = 0;
 80074ee:	4b0c      	ldr	r3, [pc, #48]	; (8007520 <STORAGE_IsReady+0x58>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	701a      	strb	r2, [r3, #0]
      
    }
    if(BSP_SD_GetStatus() == SD_TRANSFER_OK)
 80074f4:	f7f9 ff6a 	bl	80013cc <BSP_SD_GetStatus>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10a      	bne.n	8007514 <STORAGE_IsReady+0x4c>
    {
      ret = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	73fb      	strb	r3, [r7, #15]
 8007502:	e007      	b.n	8007514 <STORAGE_IsReady+0x4c>
    }
  }
  else if(prev_status == 0)
 8007504:	4b06      	ldr	r3, [pc, #24]	; (8007520 <STORAGE_IsReady+0x58>)
 8007506:	f993 3000 	ldrsb.w	r3, [r3]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d102      	bne.n	8007514 <STORAGE_IsReady+0x4c>
  {
    prev_status = -1;
 800750e:	4b04      	ldr	r3, [pc, #16]	; (8007520 <STORAGE_IsReady+0x58>)
 8007510:	22ff      	movs	r2, #255	; 0xff
 8007512:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 8007514:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	20000830 	.word	0x20000830

08007524 <STORAGE_IsWriteProtected>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number
  * @retval Status (0: write enabled / -1: otherwise)
  */
int8_t STORAGE_IsWriteProtected(uint8_t lun)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	4603      	mov	r3, r0
 800752c:	71fb      	strb	r3, [r7, #7]
  return 0;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <STORAGE_Read>:
  * @param  blk_addr: Logical block address
  * @param  blk_len: Blocks number
  * @retval Status (0: Ok / -1: Error)
  */
int8_t STORAGE_Read(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800753c:	b590      	push	{r4, r7, lr}
 800753e:	b089      	sub	sp, #36	; 0x24
 8007540:	af02      	add	r7, sp, #8
 8007542:	60b9      	str	r1, [r7, #8]
 8007544:	607a      	str	r2, [r7, #4]
 8007546:	461a      	mov	r2, r3
 8007548:	4603      	mov	r3, r0
 800754a:	73fb      	strb	r3, [r7, #15]
 800754c:	4613      	mov	r3, r2
 800754e:	81bb      	strh	r3, [r7, #12]
  int8_t ret = -1;  
 8007550:	23ff      	movs	r3, #255	; 0xff
 8007552:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8007554:	f7f9 fe8a 	bl	800126c <BSP_SD_IsDetected>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00f      	beq.n	800757e <STORAGE_Read+0x42>
  {  
    BSP_SD_ReadBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	025b      	lsls	r3, r3, #9
 8007562:	f04f 0400 	mov.w	r4, #0
 8007566:	89ba      	ldrh	r2, [r7, #12]
 8007568:	9201      	str	r2, [sp, #4]
 800756a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800756e:	9200      	str	r2, [sp, #0]
 8007570:	461a      	mov	r2, r3
 8007572:	4623      	mov	r3, r4
 8007574:	68b8      	ldr	r0, [r7, #8]
 8007576:	f7f9 fe87 	bl	8001288 <BSP_SD_ReadBlocks_DMA>
    ret = 0;
 800757a:	2300      	movs	r3, #0
 800757c:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800757e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007582:	4618      	mov	r0, r3
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	bd90      	pop	{r4, r7, pc}

0800758a <STORAGE_Write>:
  * @param  blk_addr: Logical block address
  * @param  blk_len: Blocks number
  * @retval Status (0 : Ok / -1 : Error)
  */
int8_t STORAGE_Write(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800758a:	b590      	push	{r4, r7, lr}
 800758c:	b089      	sub	sp, #36	; 0x24
 800758e:	af02      	add	r7, sp, #8
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	461a      	mov	r2, r3
 8007596:	4603      	mov	r3, r0
 8007598:	73fb      	strb	r3, [r7, #15]
 800759a:	4613      	mov	r3, r2
 800759c:	81bb      	strh	r3, [r7, #12]
  int8_t ret = -1;  
 800759e:	23ff      	movs	r3, #255	; 0xff
 80075a0:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 80075a2:	f7f9 fe63 	bl	800126c <BSP_SD_IsDetected>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00f      	beq.n	80075cc <STORAGE_Write+0x42>
  { 
    BSP_SD_WriteBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	025b      	lsls	r3, r3, #9
 80075b0:	f04f 0400 	mov.w	r4, #0
 80075b4:	89ba      	ldrh	r2, [r7, #12]
 80075b6:	9201      	str	r2, [sp, #4]
 80075b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075bc:	9200      	str	r2, [sp, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	4623      	mov	r3, r4
 80075c2:	68b8      	ldr	r0, [r7, #8]
 80075c4:	f7f9 fea0 	bl	8001308 <BSP_SD_WriteBlocks_DMA>
    ret = 0;
 80075c8:	2300      	movs	r3, #0
 80075ca:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80075cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	371c      	adds	r7, #28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd90      	pop	{r4, r7, pc}

080075d8 <STORAGE_GetMaxLun>:
  * @brief  Returns the Max Supported LUNs.   
  * @param  None
  * @retval Lun(s) number
  */
int8_t STORAGE_GetMaxLun(void)
{
 80075d8:	b480      	push	{r7}
 80075da:	af00      	add	r7, sp, #0
  return(STORAGE_LUN_NBR - 1);
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	460b      	mov	r3, r1
 80075f2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	7c1b      	ldrb	r3, [r3, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10e      	bne.n	800761e <USBD_CDC_Init+0x36>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8007600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007604:	2202      	movs	r2, #2
 8007606:	2183      	movs	r1, #131	; 0x83
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff fba4 	bl	8006d56 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800760e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007612:	2202      	movs	r2, #2
 8007614:	2103      	movs	r1, #3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7ff fb9d 	bl	8006d56 <USBD_LL_OpenEP>
 800761c:	e00b      	b.n	8007636 <USBD_CDC_Init+0x4e>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800761e:	2340      	movs	r3, #64	; 0x40
 8007620:	2202      	movs	r2, #2
 8007622:	2183      	movs	r1, #131	; 0x83
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7ff fb96 	bl	8006d56 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800762a:	2340      	movs	r3, #64	; 0x40
 800762c:	2202      	movs	r2, #2
 800762e:	2103      	movs	r1, #3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7ff fb90 	bl	8006d56 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8007636:	2308      	movs	r3, #8
 8007638:	2203      	movs	r2, #3
 800763a:	2182      	movs	r1, #130	; 0x82
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7ff fb8a 	bl	8006d56 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);


  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8007642:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007646:	f00d fde1 	bl	801520c <malloc>
 800764a:	4603      	mov	r3, r0
 800764c:	461a      	mov	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if(pdev->pClassData == NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800765a:	2b00      	cmp	r3, #0
 800765c:	d102      	bne.n	8007664 <USBD_CDC_Init+0x7c>
  {
    ret = 1;
 800765e:	2301      	movs	r3, #1
 8007660:	73fb      	strb	r3, [r7, #15]
 8007662:	e026      	b.n	80076b2 <USBD_CDC_Init+0xca>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800766a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState =0;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2200      	movs	r2, #0
 800767a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2200      	movs	r2, #0
 8007682:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	7c1b      	ldrb	r3, [r3, #16]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d109      	bne.n	80076a2 <USBD_CDC_Init+0xba>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007698:	2103      	movs	r1, #3
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7ff fc17 	bl	8006ece <USBD_LL_PrepareReceive>
 80076a0:	e007      	b.n	80076b2 <USBD_CDC_Init+0xca>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076a8:	2340      	movs	r3, #64	; 0x40
 80076aa:	2103      	movs	r1, #3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7ff fc0e 	bl	8006ece <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }


  }
  return ret;
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80076c8:	2300      	movs	r3, #0
 80076ca:	73fb      	strb	r3, [r7, #15]

  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 80076cc:	2183      	movs	r1, #131	; 0x83
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7ff fb5b 	bl	8006d8a <USBD_LL_CloseEP>
              CDC_IN_EP);

  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 80076d4:	2103      	movs	r1, #3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7ff fb57 	bl	8006d8a <USBD_LL_CloseEP>
              CDC_OUT_EP);

  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 80076dc:	2182      	movs	r1, #130	; 0x82
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7ff fb53 	bl	8006d8a <USBD_LL_CloseEP>
              CDC_CMD_EP);


  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00e      	beq.n	800770c <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80076fe:	4618      	mov	r0, r3
 8007700:	f00d fd8c 	bl	801521c <free>
    pdev->pClassData = NULL;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }

  return ret;
 800770c:	7bfb      	ldrb	r3, [r7, #15]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
	...

08007718 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007728:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007732:	2b00      	cmp	r3, #0
 8007734:	d03a      	beq.n	80077ac <USBD_CDC_Setup+0x94>
 8007736:	2b20      	cmp	r3, #32
 8007738:	d000      	beq.n	800773c <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }

  default:
    break;
 800773a:	e043      	b.n	80077c4 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	88db      	ldrh	r3, [r3, #6]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d029      	beq.n	8007798 <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	b25b      	sxtb	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	da11      	bge.n	8007772 <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800775a:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	88d2      	ldrh	r2, [r2, #6]
 8007760:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 8007762:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev,
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	88db      	ldrh	r3, [r3, #6]
 8007768:	461a      	mov	r2, r3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f00a fa44 	bl	8011bf8 <USBD_CtlSendData>
    break;
 8007770:	e029      	b.n	80077c6 <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	785a      	ldrb	r2, [r3, #1]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	88db      	ldrh	r3, [r3, #6]
 8007780:	b2da      	uxtb	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 8007788:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev,
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	88db      	ldrh	r3, [r3, #6]
 800778e:	461a      	mov	r2, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f00a fa5f 	bl	8011c54 <USBD_CtlPrepareRx>
    break;
 8007796:	e016      	b.n	80077c6 <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	7850      	ldrb	r0, [r2, #1]
 80077a4:	2200      	movs	r2, #0
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	4798      	blx	r3
    break;
 80077aa:	e00c      	b.n	80077c6 <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	785b      	ldrb	r3, [r3, #1]
 80077b0:	2b0a      	cmp	r3, #10
 80077b2:	d001      	beq.n	80077b8 <USBD_CDC_Setup+0xa0>
 80077b4:	2b0b      	cmp	r3, #11
      break;
 80077b6:	e005      	b.n	80077c4 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 80077b8:	2201      	movs	r2, #1
 80077ba:	4905      	ldr	r1, [pc, #20]	; (80077d0 <USBD_CDC_Setup+0xb8>)
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f00a fa1b 	bl	8011bf8 <USBD_CtlSendData>
      break;
 80077c2:	bf00      	nop
    break;
 80077c4:	bf00      	nop
  }
  return USBD_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	20000831 	.word	0x20000831

080077d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80077e6:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d005      	beq.n	80077fe <USBD_CDC_DataIn+0x2a>
  {

    hcdc->TxState = 0;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	e000      	b.n	8007800 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 80077fe:	2302      	movs	r3, #2
  }
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800781e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff fb69 	bl	8006efc <USBD_LL_GetRxDataSize>
 800782a:	4602      	mov	r2, r0
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00d      	beq.n	8007858 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007850:	4611      	mov	r1, r2
 8007852:	4798      	blx	r3

    return USBD_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	e000      	b.n	800785a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007858:	2302      	movs	r3, #2
  }
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007870:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007878:	2b00      	cmp	r3, #0
 800787a:	d015      	beq.n	80078a8 <USBD_CDC_EP0_RxReady+0x46>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007882:	2bff      	cmp	r3, #255	; 0xff
 8007884:	d010      	beq.n	80078a8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007894:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800789c:	b292      	uxth	r2, r2
 800789e:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	22ff      	movs	r2, #255	; 0xff
 80078a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2243      	movs	r2, #67	; 0x43
 80078c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80078c2:	4b03      	ldr	r3, [pc, #12]	; (80078d0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	20000164 	.word	0x20000164

080078d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2243      	movs	r2, #67	; 0x43
 80078e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80078e2:	4b03      	ldr	r3, [pc, #12]	; (80078f0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr
 80078f0:	20000120 	.word	0x20000120

080078f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2243      	movs	r2, #67	; 0x43
 8007900:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007902:	4b03      	ldr	r3, [pc, #12]	; (8007910 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007904:	4618      	mov	r0, r3
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	200001a8 	.word	0x200001a8

08007914 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	220a      	movs	r2, #10
 8007920:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007922:	4b03      	ldr	r3, [pc, #12]	; (8007930 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	200000dc 	.word	0x200000dc

08007934 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800793e:	2302      	movs	r3, #2
 8007940:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d005      	beq.n	8007954 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;
 8007950:	2300      	movs	r3, #0
 8007952:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007954:	7bfb      	ldrb	r3, [r7, #15]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3714      	adds	r7, #20
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007962:	b480      	push	{r7}
 8007964:	b087      	sub	sp, #28
 8007966:	af00      	add	r7, sp, #0
 8007968:	60f8      	str	r0, [r7, #12]
 800796a:	60b9      	str	r1, [r7, #8]
 800796c:	4613      	mov	r3, r2
 800796e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007976:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007980:	88fa      	ldrh	r2, [r7, #6]
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	371c      	adds	r7, #28
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8007996:	b480      	push	{r7}
 8007998:	b085      	sub	sp, #20
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80079a6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b084      	sub	sp, #16
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80079cc:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d017      	beq.n	8007a08 <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d110      	bne.n	8007a04 <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev,
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	2183      	movs	r1, #131	; 0x83
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7ff fa50 	bl	8006ea0 <USBD_LL_Transmit>

      return USBD_OK;
 8007a00:	2300      	movs	r3, #0
 8007a02:	e002      	b.n	8007a0a <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e000      	b.n	8007a0a <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 8007a08:	2302      	movs	r3, #2
  }
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007a20:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d017      	beq.n	8007a5c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	7c1b      	ldrb	r3, [r3, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d109      	bne.n	8007a48 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a3e:	2103      	movs	r1, #3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7ff fa44 	bl	8006ece <USBD_LL_PrepareReceive>
 8007a46:	e007      	b.n	8007a58 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a4e:	2340      	movs	r3, #64	; 0x40
 8007a50:	2103      	movs	r1, #3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7ff fa3b 	bl	8006ece <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	e000      	b.n	8007a5e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007a5c:	2302      	movs	r3, #2
  }
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <CDC_Itf_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Init(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
      - Word Length = 8 Bits
      - Stop Bit    = One Stop bit
      - Parity      = No parity
      - BaudRate    = 115200 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance          = USARTx;
 8007a6c:	4b17      	ldr	r3, [pc, #92]	; (8007acc <CDC_Itf_Init+0x64>)
 8007a6e:	4a18      	ldr	r2, [pc, #96]	; (8007ad0 <CDC_Itf_Init+0x68>)
 8007a70:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate     = 115200;
 8007a72:	4b16      	ldr	r3, [pc, #88]	; (8007acc <CDC_Itf_Init+0x64>)
 8007a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007a78:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8007a7a:	4b14      	ldr	r3, [pc, #80]	; (8007acc <CDC_Itf_Init+0x64>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 8007a80:	4b12      	ldr	r3, [pc, #72]	; (8007acc <CDC_Itf_Init+0x64>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity       = UART_PARITY_NONE;
 8007a86:	4b11      	ldr	r3, [pc, #68]	; (8007acc <CDC_Itf_Init+0x64>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8007a8c:	4b0f      	ldr	r3, [pc, #60]	; (8007acc <CDC_Itf_Init+0x64>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8007a92:	4b0e      	ldr	r3, [pc, #56]	; (8007acc <CDC_Itf_Init+0x64>)
 8007a94:	220c      	movs	r2, #12
 8007a96:	615a      	str	r2, [r3, #20]

  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8007a98:	480c      	ldr	r0, [pc, #48]	; (8007acc <CDC_Itf_Init+0x64>)
 8007a9a:	f005 f91f 	bl	800ccdc <HAL_UART_Init>
 //   Error_Handler();
  }

  /*##-2- Put UART peripheral in IT reception process ########################*/
  /* Any data received will be stored in "UserTxBuffer" buffer  */
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	490c      	ldr	r1, [pc, #48]	; (8007ad4 <CDC_Itf_Init+0x6c>)
 8007aa2:	480a      	ldr	r0, [pc, #40]	; (8007acc <CDC_Itf_Init+0x64>)
 8007aa4:	f005 f9b3 	bl	800ce0e <HAL_UART_Receive_IT>
    /* Transfer error in reception process */
  //  Error_Handler();
}

  /*##-3- Configure the TIM Base generation  #################################*/
  TIM_Config();
 8007aa8:	f000 fc48 	bl	800833c <TIM_Config>

  /*##-4- Start the TIM Base generation in interrupt mode ####################*/
  /* Start Channel1 */
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8007aac:	480a      	ldr	r0, [pc, #40]	; (8007ad8 <CDC_Itf_Init+0x70>)
 8007aae:	f005 f865 	bl	800cb7c <HAL_TIM_Base_Start_IT>
    /* Starting Error */
 //   Error_Handler();
  }

  /*##-5- Set Application Buffers ############################################*/
  USBD_CDC_SetTxBuffer(&USBD_Device, UserTxBuffer, 0);
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	4907      	ldr	r1, [pc, #28]	; (8007ad4 <CDC_Itf_Init+0x6c>)
 8007ab6:	4809      	ldr	r0, [pc, #36]	; (8007adc <CDC_Itf_Init+0x74>)
 8007ab8:	f7ff ff53 	bl	8007962 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&USBD_Device, UserRxBuffer);
 8007abc:	4908      	ldr	r1, [pc, #32]	; (8007ae0 <CDC_Itf_Init+0x78>)
 8007abe:	4807      	ldr	r0, [pc, #28]	; (8007adc <CDC_Itf_Init+0x74>)
 8007ac0:	f7ff ff69 	bl	8007996 <USBD_CDC_SetRxBuffer>

  return (USBD_OK);
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20009720 	.word	0x20009720
 8007ad0:	40013800 	.word	0x40013800
 8007ad4:	200097fc 	.word	0x200097fc
 8007ad8:	2000abf8 	.word	0x2000abf8
 8007adc:	20008980 	.word	0x20008980
 8007ae0:	2000a3ec 	.word	0x2000a3ec

08007ae4 <CDC_Itf_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	af00      	add	r7, sp, #0
  /* DeInitialize the UART peripheral */
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8007ae8:	4802      	ldr	r0, [pc, #8]	; (8007af4 <CDC_Itf_DeInit+0x10>)
 8007aea:	f005 f948 	bl	800cd7e <HAL_UART_DeInit>
  {
    /* Initialization Error */
 //   Error_Handler();
 }
  return (USBD_OK);
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	20009720 	.word	0x20009720

08007af8 <CDC_Itf_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	6039      	str	r1, [r7, #0]
 8007b02:	71fb      	strb	r3, [r7, #7]
 8007b04:	4613      	mov	r3, r2
 8007b06:	80bb      	strh	r3, [r7, #4]
  switch (cmd)
 8007b08:	79fb      	ldrb	r3, [r7, #7]
 8007b0a:	2b23      	cmp	r3, #35	; 0x23
 8007b0c:	f200 809a 	bhi.w	8007c44 <CDC_Itf_Control+0x14c>
 8007b10:	a201      	add	r2, pc, #4	; (adr r2, 8007b18 <CDC_Itf_Control+0x20>)
 8007b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b16:	bf00      	nop
 8007b18:	08007c45 	.word	0x08007c45
 8007b1c:	08007c45 	.word	0x08007c45
 8007b20:	08007c45 	.word	0x08007c45
 8007b24:	08007c45 	.word	0x08007c45
 8007b28:	08007c45 	.word	0x08007c45
 8007b2c:	08007c45 	.word	0x08007c45
 8007b30:	08007c45 	.word	0x08007c45
 8007b34:	08007c45 	.word	0x08007c45
 8007b38:	08007c45 	.word	0x08007c45
 8007b3c:	08007c45 	.word	0x08007c45
 8007b40:	08007c45 	.word	0x08007c45
 8007b44:	08007c45 	.word	0x08007c45
 8007b48:	08007c45 	.word	0x08007c45
 8007b4c:	08007c45 	.word	0x08007c45
 8007b50:	08007c45 	.word	0x08007c45
 8007b54:	08007c45 	.word	0x08007c45
 8007b58:	08007c45 	.word	0x08007c45
 8007b5c:	08007c45 	.word	0x08007c45
 8007b60:	08007c45 	.word	0x08007c45
 8007b64:	08007c45 	.word	0x08007c45
 8007b68:	08007c45 	.word	0x08007c45
 8007b6c:	08007c45 	.word	0x08007c45
 8007b70:	08007c45 	.word	0x08007c45
 8007b74:	08007c45 	.word	0x08007c45
 8007b78:	08007c45 	.word	0x08007c45
 8007b7c:	08007c45 	.word	0x08007c45
 8007b80:	08007c45 	.word	0x08007c45
 8007b84:	08007c45 	.word	0x08007c45
 8007b88:	08007c45 	.word	0x08007c45
 8007b8c:	08007c45 	.word	0x08007c45
 8007b90:	08007c45 	.word	0x08007c45
 8007b94:	08007c45 	.word	0x08007c45
 8007b98:	08007ba9 	.word	0x08007ba9
 8007b9c:	08007bf1 	.word	0x08007bf1
 8007ba0:	08007c45 	.word	0x08007c45
 8007ba4:	08007c45 	.word	0x08007c45
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	461a      	mov	r2, r3
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	021b      	lsls	r3, r3, #8
 8007bb6:	431a      	orrs	r2, r3
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	3302      	adds	r3, #2
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	041b      	lsls	r3, r3, #16
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8007bc0:	431a      	orrs	r2, r3
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	3303      	adds	r3, #3
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	061b      	lsls	r3, r3, #24
 8007bca:	4313      	orrs	r3, r2
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8007bcc:	461a      	mov	r2, r3
 8007bce:	4b20      	ldr	r3, [pc, #128]	; (8007c50 <CDC_Itf_Control+0x158>)
 8007bd0:	601a      	str	r2, [r3, #0]
    LineCoding.format     = pbuf[4];
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	791a      	ldrb	r2, [r3, #4]
 8007bd6:	4b1e      	ldr	r3, [pc, #120]	; (8007c50 <CDC_Itf_Control+0x158>)
 8007bd8:	711a      	strb	r2, [r3, #4]
    LineCoding.paritytype = pbuf[5];
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	795a      	ldrb	r2, [r3, #5]
 8007bde:	4b1c      	ldr	r3, [pc, #112]	; (8007c50 <CDC_Itf_Control+0x158>)
 8007be0:	715a      	strb	r2, [r3, #5]
    LineCoding.datatype   = pbuf[6];
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	799a      	ldrb	r2, [r3, #6]
 8007be6:	4b1a      	ldr	r3, [pc, #104]	; (8007c50 <CDC_Itf_Control+0x158>)
 8007be8:	719a      	strb	r2, [r3, #6]

    /* Set the new configuration */
    ComPort_Config();
 8007bea:	f000 fb35 	bl	8008258 <ComPort_Config>
    break;
 8007bee:	e02a      	b.n	8007c46 <CDC_Itf_Control+0x14e>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8007bf0:	4b17      	ldr	r3, [pc, #92]	; (8007c50 <CDC_Itf_Control+0x158>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	4a14      	ldr	r2, [pc, #80]	; (8007c50 <CDC_Itf_Control+0x158>)
 8007c00:	6812      	ldr	r2, [r2, #0]
 8007c02:	0a12      	lsrs	r2, r2, #8
 8007c04:	b2d2      	uxtb	r2, r2
 8007c06:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	3302      	adds	r3, #2
 8007c0c:	4a10      	ldr	r2, [pc, #64]	; (8007c50 <CDC_Itf_Control+0x158>)
 8007c0e:	6812      	ldr	r2, [r2, #0]
 8007c10:	0c12      	lsrs	r2, r2, #16
 8007c12:	b2d2      	uxtb	r2, r2
 8007c14:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	3303      	adds	r3, #3
 8007c1a:	4a0d      	ldr	r2, [pc, #52]	; (8007c50 <CDC_Itf_Control+0x158>)
 8007c1c:	6812      	ldr	r2, [r2, #0]
 8007c1e:	0e12      	lsrs	r2, r2, #24
 8007c20:	b2d2      	uxtb	r2, r2
 8007c22:	701a      	strb	r2, [r3, #0]
    pbuf[4] = LineCoding.format;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	3304      	adds	r3, #4
 8007c28:	4a09      	ldr	r2, [pc, #36]	; (8007c50 <CDC_Itf_Control+0x158>)
 8007c2a:	7912      	ldrb	r2, [r2, #4]
 8007c2c:	701a      	strb	r2, [r3, #0]
    pbuf[5] = LineCoding.paritytype;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	3305      	adds	r3, #5
 8007c32:	4a07      	ldr	r2, [pc, #28]	; (8007c50 <CDC_Itf_Control+0x158>)
 8007c34:	7952      	ldrb	r2, [r2, #5]
 8007c36:	701a      	strb	r2, [r3, #0]
    pbuf[6] = LineCoding.datatype;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	3306      	adds	r3, #6
 8007c3c:	4a04      	ldr	r2, [pc, #16]	; (8007c50 <CDC_Itf_Control+0x158>)
 8007c3e:	7992      	ldrb	r2, [r2, #6]
 8007c40:	701a      	strb	r2, [r3, #0]
    break;
 8007c42:	e000      	b.n	8007c46 <CDC_Itf_Control+0x14e>
  case CDC_SEND_BREAK:
     /* Add your code here */
    break;

  default:
    break;
 8007c44:	bf00      	nop
  }

  return (USBD_OK);
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	200001ec 	.word	0x200001ec

08007c54 <CDC_Itf_Receive>:
//	USBD_CDC_SetTxBuffer(&USBD_Device, UserBuffer,UserBufferSize);
//	USBD_CDC_TransmitPacket(&USBD_Device);
}

static int8_t CDC_Itf_Receive(uint8_t* Buf, uint32_t *Len)
{
 8007c54:	b5b0      	push	{r4, r5, r7, lr}
 8007c56:	b08a      	sub	sp, #40	; 0x28
 8007c58:	af06      	add	r7, sp, #24
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
BuffLength=0;
 8007c5e:	4b90      	ldr	r3, [pc, #576]	; (8007ea0 <CDC_Itf_Receive+0x24c>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	601a      	str	r2, [r3, #0]
uint32_t i;
for (i = 0; i < *Len; i++)
 8007c64:	2300      	movs	r3, #0
 8007c66:	60fb      	str	r3, [r7, #12]
 8007c68:	e00f      	b.n	8007c8a <CDC_Itf_Receive+0x36>
{
TempUserBuffer[BuffLength] = Buf[i];
 8007c6a:	4b8d      	ldr	r3, [pc, #564]	; (8007ea0 <CDC_Itf_Receive+0x24c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6879      	ldr	r1, [r7, #4]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	440a      	add	r2, r1
 8007c74:	7811      	ldrb	r1, [r2, #0]
 8007c76:	4a8b      	ldr	r2, [pc, #556]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007c78:	54d1      	strb	r1, [r2, r3]
BuffLength++;
 8007c7a:	4b89      	ldr	r3, [pc, #548]	; (8007ea0 <CDC_Itf_Receive+0x24c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	4a87      	ldr	r2, [pc, #540]	; (8007ea0 <CDC_Itf_Receive+0x24c>)
 8007c82:	6013      	str	r3, [r2, #0]
for (i = 0; i < *Len; i++)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	3301      	adds	r3, #1
 8007c88:	60fb      	str	r3, [r7, #12]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d8ea      	bhi.n	8007c6a <CDC_Itf_Receive+0x16>
}

if (TempUserBuffer[0] == 'g')
 8007c94:	4b83      	ldr	r3, [pc, #524]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b67      	cmp	r3, #103	; 0x67
 8007c9a:	f040 80ad 	bne.w	8007df8 <CDC_Itf_Receive+0x1a4>
{
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8007c9e:	4b81      	ldr	r3, [pc, #516]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007ca0:	789b      	ldrb	r3, [r3, #2]
 8007ca2:	3b30      	subs	r3, #48	; 0x30
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	0092      	lsls	r2, r2, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	005b      	lsls	r3, r3, #1
 8007cae:	b2da      	uxtb	r2, r3
 8007cb0:	4b7c      	ldr	r3, [pc, #496]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007cb2:	78db      	ldrb	r3, [r3, #3]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	3b30      	subs	r3, #48	; 0x30
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	4b7a      	ldr	r3, [pc, #488]	; (8007ea8 <CDC_Itf_Receive+0x254>)
 8007cbe:	701a      	strb	r2, [r3, #0]
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8007cc0:	4b78      	ldr	r3, [pc, #480]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007cc2:	799b      	ldrb	r3, [r3, #6]
 8007cc4:	3b30      	subs	r3, #48	; 0x30
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	0092      	lsls	r2, r2, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	005b      	lsls	r3, r3, #1
 8007cd0:	b2da      	uxtb	r2, r3
 8007cd2:	4b74      	ldr	r3, [pc, #464]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007cd4:	79db      	ldrb	r3, [r3, #7]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	3b30      	subs	r3, #48	; 0x30
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	4b73      	ldr	r3, [pc, #460]	; (8007eac <CDC_Itf_Receive+0x258>)
 8007ce0:	701a      	strb	r2, [r3, #0]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8007ce2:	4b70      	ldr	r3, [pc, #448]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007ce4:	7a9b      	ldrb	r3, [r3, #10]
 8007ce6:	3b30      	subs	r3, #48	; 0x30
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	461a      	mov	r2, r3
 8007cec:	0092      	lsls	r2, r2, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	005b      	lsls	r3, r3, #1
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	4b6b      	ldr	r3, [pc, #428]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007cf6:	7adb      	ldrb	r3, [r3, #11]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	3b30      	subs	r3, #48	; 0x30
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	4b6b      	ldr	r3, [pc, #428]	; (8007eb0 <CDC_Itf_Receive+0x25c>)
 8007d02:	701a      	strb	r2, [r3, #0]
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8007d04:	4b67      	ldr	r3, [pc, #412]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007d06:	7b9b      	ldrb	r3, [r3, #14]
 8007d08:	3b30      	subs	r3, #48	; 0x30
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	0092      	lsls	r2, r2, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	4b63      	ldr	r3, [pc, #396]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007d18:	7bdb      	ldrb	r3, [r3, #15]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	3b30      	subs	r3, #48	; 0x30
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	4b64      	ldr	r3, [pc, #400]	; (8007eb4 <CDC_Itf_Receive+0x260>)
 8007d24:	701a      	strb	r2, [r3, #0]
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8007d26:	4b5f      	ldr	r3, [pc, #380]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007d28:	7c9b      	ldrb	r3, [r3, #18]
 8007d2a:	3b30      	subs	r3, #48	; 0x30
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	461a      	mov	r2, r3
 8007d30:	0092      	lsls	r2, r2, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	005b      	lsls	r3, r3, #1
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	4b5a      	ldr	r3, [pc, #360]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007d3a:	7cdb      	ldrb	r3, [r3, #19]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	3b30      	subs	r3, #48	; 0x30
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	4b5c      	ldr	r3, [pc, #368]	; (8007eb8 <CDC_Itf_Receive+0x264>)
 8007d46:	701a      	strb	r2, [r3, #0]
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8007d48:	4b56      	ldr	r3, [pc, #344]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007d4a:	7d9b      	ldrb	r3, [r3, #22]
 8007d4c:	3b30      	subs	r3, #48	; 0x30
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	461a      	mov	r2, r3
 8007d52:	0092      	lsls	r2, r2, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	4b52      	ldr	r3, [pc, #328]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007d5c:	7ddb      	ldrb	r3, [r3, #23]
 8007d5e:	4413      	add	r3, r2
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	3b30      	subs	r3, #48	; 0x30
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	4b55      	ldr	r3, [pc, #340]	; (8007ebc <CDC_Itf_Receive+0x268>)
 8007d68:	701a      	strb	r2, [r3, #0]

Set_RTC_Calendar(RTC_Y, RTC_Mo , RTC_D, RTC_H, RTC_Mi, RTC_S);  // Set Device RTC with received Values
 8007d6a:	4b54      	ldr	r3, [pc, #336]	; (8007ebc <CDC_Itf_Receive+0x268>)
 8007d6c:	7818      	ldrb	r0, [r3, #0]
 8007d6e:	4b52      	ldr	r3, [pc, #328]	; (8007eb8 <CDC_Itf_Receive+0x264>)
 8007d70:	7819      	ldrb	r1, [r3, #0]
 8007d72:	4b50      	ldr	r3, [pc, #320]	; (8007eb4 <CDC_Itf_Receive+0x260>)
 8007d74:	781c      	ldrb	r4, [r3, #0]
 8007d76:	4b4e      	ldr	r3, [pc, #312]	; (8007eb0 <CDC_Itf_Receive+0x25c>)
 8007d78:	781d      	ldrb	r5, [r3, #0]
 8007d7a:	4b4c      	ldr	r3, [pc, #304]	; (8007eac <CDC_Itf_Receive+0x258>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	4a4a      	ldr	r2, [pc, #296]	; (8007ea8 <CDC_Itf_Receive+0x254>)
 8007d80:	7812      	ldrb	r2, [r2, #0]
 8007d82:	9201      	str	r2, [sp, #4]
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	462b      	mov	r3, r5
 8007d88:	4622      	mov	r2, r4
 8007d8a:	f7fc fe19 	bl	80049c0 <Set_RTC_Calendar>

// Reply to PC
UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Timestamp Received :%d:%d:%d_%d/%d/%d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);//
 8007d8e:	4b48      	ldr	r3, [pc, #288]	; (8007eb0 <CDC_Itf_Receive+0x25c>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	461d      	mov	r5, r3
 8007d94:	4b45      	ldr	r3, [pc, #276]	; (8007eac <CDC_Itf_Receive+0x258>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	4b43      	ldr	r3, [pc, #268]	; (8007ea8 <CDC_Itf_Receive+0x254>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4b45      	ldr	r3, [pc, #276]	; (8007eb8 <CDC_Itf_Receive+0x264>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	4618      	mov	r0, r3
 8007da6:	4b43      	ldr	r3, [pc, #268]	; (8007eb4 <CDC_Itf_Receive+0x260>)
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	461c      	mov	r4, r3
 8007dac:	4b43      	ldr	r3, [pc, #268]	; (8007ebc <CDC_Itf_Receive+0x268>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	9304      	str	r3, [sp, #16]
 8007db2:	9403      	str	r4, [sp, #12]
 8007db4:	9002      	str	r0, [sp, #8]
 8007db6:	9101      	str	r1, [sp, #4]
 8007db8:	9200      	str	r2, [sp, #0]
 8007dba:	462b      	mov	r3, r5
 8007dbc:	4a40      	ldr	r2, [pc, #256]	; (8007ec0 <CDC_Itf_Receive+0x26c>)
 8007dbe:	4941      	ldr	r1, [pc, #260]	; (8007ec4 <CDC_Itf_Receive+0x270>)
 8007dc0:	4841      	ldr	r0, [pc, #260]	; (8007ec8 <CDC_Itf_Receive+0x274>)
 8007dc2:	f00d fb03 	bl	80153cc <siprintf>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	4b40      	ldr	r3, [pc, #256]	; (8007ecc <CDC_Itf_Receive+0x278>)
 8007dcc:	701a      	strb	r2, [r3, #0]
USBD_CDC_SetTxBuffer(&USBD_Device, UserBuffer,UserBufferSize);//
 8007dce:	4b3f      	ldr	r3, [pc, #252]	; (8007ecc <CDC_Itf_Receive+0x278>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	493c      	ldr	r1, [pc, #240]	; (8007ec8 <CDC_Itf_Receive+0x274>)
 8007dd8:	483d      	ldr	r0, [pc, #244]	; (8007ed0 <CDC_Itf_Receive+0x27c>)
 8007dda:	f7ff fdc2 	bl	8007962 <USBD_CDC_SetTxBuffer>
USBD_CDC_TransmitPacket(&USBD_Device);//
 8007dde:	483c      	ldr	r0, [pc, #240]	; (8007ed0 <CDC_Itf_Receive+0x27c>)
 8007de0:	f7ff fded 	bl	80079be <USBD_CDC_TransmitPacket>

TempUserBuffer[0] = 0;        // Clear 1st Character to avoid code conflict
 8007de4:	4b2f      	ldr	r3, [pc, #188]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	701a      	strb	r2, [r3, #0]
//Data_log_Start_Resume = 1;    // Start Data collection after USB disconnect
USB_Mode = 1;                 // USB VCP Mode in next USB connectivity
 8007dea:	4b3a      	ldr	r3, [pc, #232]	; (8007ed4 <CDC_Itf_Receive+0x280>)
 8007dec:	2201      	movs	r2, #1
 8007dee:	701a      	strb	r2, [r3, #0]
Logstart_Create=1;
 8007df0:	4b39      	ldr	r3, [pc, #228]	; (8007ed8 <CDC_Itf_Receive+0x284>)
 8007df2:	2201      	movs	r2, #1
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	e207      	b.n	8008208 <CDC_Itf_Receive+0x5b4>
}

else if (TempUserBuffer[0] == 'o')   // Turn off All LED
 8007df8:	4b2a      	ldr	r3, [pc, #168]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2b6f      	cmp	r3, #111	; 0x6f
 8007dfe:	d109      	bne.n	8007e14 <CDC_Itf_Receive+0x1c0>
{
RED_LED_OFF();
 8007e00:	f7f9 fef8 	bl	8001bf4 <RED_LED_OFF>
GREEN_LED_OFF();
 8007e04:	f7f9 fefd 	bl	8001c02 <GREEN_LED_OFF>
BLUE_LED_OFF();
 8007e08:	f7f9 fea6 	bl	8001b58 <BLUE_LED_OFF>
TempUserBuffer[0] = 0;         // Clear 1st Character to avoid code conflict
 8007e0c:	4b25      	ldr	r3, [pc, #148]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	701a      	strb	r2, [r3, #0]
 8007e12:	e1f9      	b.n	8008208 <CDC_Itf_Receive+0x5b4>
}
else if (TempUserBuffer[0] == 'B')   // Turn on BLUE LED
 8007e14:	4b23      	ldr	r3, [pc, #140]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2b42      	cmp	r3, #66	; 0x42
 8007e1a:	d105      	bne.n	8007e28 <CDC_Itf_Receive+0x1d4>
{
BLUE_LED_ONLY();
 8007e1c:	f7f9 ff0e 	bl	8001c3c <BLUE_LED_ONLY>
TempUserBuffer[0] = 0;         // Clear 1st Character to avoid code conflict
 8007e20:	4b20      	ldr	r3, [pc, #128]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	701a      	strb	r2, [r3, #0]
 8007e26:	e1ef      	b.n	8008208 <CDC_Itf_Receive+0x5b4>
}
else if (TempUserBuffer[0] == 'b')  // Turn off BLUE LED
 8007e28:	4b1e      	ldr	r3, [pc, #120]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	2b62      	cmp	r3, #98	; 0x62
 8007e2e:	d105      	bne.n	8007e3c <CDC_Itf_Receive+0x1e8>
{

ALL_LED_OFF();
 8007e30:	f7f9 fe9e 	bl	8001b70 <ALL_LED_OFF>
TempUserBuffer[0] = 0;          // Clear 1st Character to avoid code conflict
 8007e34:	4b1b      	ldr	r3, [pc, #108]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	701a      	strb	r2, [r3, #0]
 8007e3a:	e1e5      	b.n	8008208 <CDC_Itf_Receive+0x5b4>
}
else if (TempUserBuffer[0] == 'E')  // Turn on Green LED
 8007e3c:	4b19      	ldr	r3, [pc, #100]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	2b45      	cmp	r3, #69	; 0x45
 8007e42:	d105      	bne.n	8007e50 <CDC_Itf_Receive+0x1fc>
{
GREEN_LED_ONLY();
 8007e44:	f7f9 fec0 	bl	8001bc8 <GREEN_LED_ONLY>
TempUserBuffer[0] = 0;           // Clear 1st Character to avoid code conflict
 8007e48:	4b16      	ldr	r3, [pc, #88]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	701a      	strb	r2, [r3, #0]
 8007e4e:	e1db      	b.n	8008208 <CDC_Itf_Receive+0x5b4>
}
else if (TempUserBuffer[0] == 'e')  // Turn off Green LED
 8007e50:	4b14      	ldr	r3, [pc, #80]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b65      	cmp	r3, #101	; 0x65
 8007e56:	d105      	bne.n	8007e64 <CDC_Itf_Receive+0x210>
{
ALL_LED_OFF();
 8007e58:	f7f9 fe8a 	bl	8001b70 <ALL_LED_OFF>
TempUserBuffer[0] = 0;          // Clear 1st Character to avoid code conflict
 8007e5c:	4b11      	ldr	r3, [pc, #68]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	701a      	strb	r2, [r3, #0]
 8007e62:	e1d1      	b.n	8008208 <CDC_Itf_Receive+0x5b4>
}
else if (TempUserBuffer[0] == 'F')  // Turn on RED LED
 8007e64:	4b0f      	ldr	r3, [pc, #60]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b46      	cmp	r3, #70	; 0x46
 8007e6a:	d105      	bne.n	8007e78 <CDC_Itf_Receive+0x224>
{
RED_LED_ONLY();
 8007e6c:	f7f9 fed0 	bl	8001c10 <RED_LED_ONLY>
TempUserBuffer[0] = 0;          // Clear 1st Character to avoid code conflict
 8007e70:	4b0c      	ldr	r3, [pc, #48]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	701a      	strb	r2, [r3, #0]
 8007e76:	e1c7      	b.n	8008208 <CDC_Itf_Receive+0x5b4>
}
else if (TempUserBuffer[0] == 'f')  // Turn off RED LED
 8007e78:	4b0a      	ldr	r3, [pc, #40]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	2b66      	cmp	r3, #102	; 0x66
 8007e7e:	d105      	bne.n	8007e8c <CDC_Itf_Receive+0x238>
{
ALL_LED_OFF();
 8007e80:	f7f9 fe76 	bl	8001b70 <ALL_LED_OFF>
TempUserBuffer[0] = 0;          // Clear 1st Character to avoid code conflict
 8007e84:	4b07      	ldr	r3, [pc, #28]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	701a      	strb	r2, [r3, #0]
 8007e8a:	e1bd      	b.n	8008208 <CDC_Itf_Receive+0x5b4>
}

else if (TempUserBuffer[0] == 'l')  // Turn on White LED
 8007e8c:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	2b6c      	cmp	r3, #108	; 0x6c
 8007e92:	d123      	bne.n	8007edc <CDC_Itf_Receive+0x288>
{
ALL_LED_ON();
 8007e94:	f7f9 fe82 	bl	8001b9c <ALL_LED_ON>
TempUserBuffer[0] = 0;          // Clear 1st Character to avoid code conflict
 8007e98:	4b02      	ldr	r3, [pc, #8]	; (8007ea4 <CDC_Itf_Receive+0x250>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	701a      	strb	r2, [r3, #0]
 8007e9e:	e1b3      	b.n	8008208 <CDC_Itf_Receive+0x5b4>
 8007ea0:	2000971c 	.word	0x2000971c
 8007ea4:	2000ac34 	.word	0x2000ac34
 8007ea8:	2000abec 	.word	0x2000abec
 8007eac:	2000abed 	.word	0x2000abed
 8007eb0:	20009718 	.word	0x20009718
 8007eb4:	2000abf4 	.word	0x2000abf4
 8007eb8:	20009710 	.word	0x20009710
 8007ebc:	200097f8 	.word	0x200097f8
 8007ec0:	0002c314 	.word	0x0002c314
 8007ec4:	08017ad0 	.word	0x08017ad0
 8007ec8:	2000a004 	.word	0x2000a004
 8007ecc:	2000abee 	.word	0x2000abee
 8007ed0:	20008980 	.word	0x20008980
 8007ed4:	20009240 	.word	0x20009240
 8007ed8:	20009790 	.word	0x20009790
}

else if (TempUserBuffer[0] == 'r')   // Read Device RTC Timestamp
 8007edc:	4ba4      	ldr	r3, [pc, #656]	; (8008170 <CDC_Itf_Receive+0x51c>)
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	2b72      	cmp	r3, #114	; 0x72
 8007ee2:	f040 80d5 	bne.w	8008090 <CDC_Itf_Receive+0x43c>
{
	RTC_H = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8007ee6:	48a3      	ldr	r0, [pc, #652]	; (8008174 <CDC_Itf_Receive+0x520>)
 8007ee8:	f7ff f9be 	bl	8007268 <LL_RTC_TIME_GetHour>
 8007eec:	4603      	mov	r3, r0
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	111b      	asrs	r3, r3, #4
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f003 030f 	and.w	r3, r3, #15
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	461a      	mov	r2, r3
 8007efc:	0092      	lsls	r2, r2, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	b2dc      	uxtb	r4, r3
 8007f04:	489b      	ldr	r0, [pc, #620]	; (8008174 <CDC_Itf_Receive+0x520>)
 8007f06:	f7ff f9af 	bl	8007268 <LL_RTC_TIME_GetHour>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	f003 030f 	and.w	r3, r3, #15
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	4423      	add	r3, r4
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	4b97      	ldr	r3, [pc, #604]	; (8008178 <CDC_Itf_Receive+0x524>)
 8007f1a:	701a      	strb	r2, [r3, #0]
	RTC_Mi = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8007f1c:	4895      	ldr	r0, [pc, #596]	; (8008174 <CDC_Itf_Receive+0x520>)
 8007f1e:	f7ff f9cd 	bl	80072bc <LL_RTC_TIME_GetMinute>
 8007f22:	4603      	mov	r3, r0
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	111b      	asrs	r3, r3, #4
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	f003 030f 	and.w	r3, r3, #15
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	461a      	mov	r2, r3
 8007f32:	0092      	lsls	r2, r2, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	b2dc      	uxtb	r4, r3
 8007f3a:	488e      	ldr	r0, [pc, #568]	; (8008174 <CDC_Itf_Receive+0x520>)
 8007f3c:	f7ff f9be 	bl	80072bc <LL_RTC_TIME_GetMinute>
 8007f40:	4603      	mov	r3, r0
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	f003 030f 	and.w	r3, r3, #15
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	4423      	add	r3, r4
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	4b8b      	ldr	r3, [pc, #556]	; (800817c <CDC_Itf_Receive+0x528>)
 8007f50:	701a      	strb	r2, [r3, #0]
	RTC_S =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8007f52:	4888      	ldr	r0, [pc, #544]	; (8008174 <CDC_Itf_Receive+0x520>)
 8007f54:	f7ff f9dc 	bl	8007310 <LL_RTC_TIME_GetSecond>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	111b      	asrs	r3, r3, #4
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	f003 030f 	and.w	r3, r3, #15
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	461a      	mov	r2, r3
 8007f68:	0092      	lsls	r2, r2, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	005b      	lsls	r3, r3, #1
 8007f6e:	b2dc      	uxtb	r4, r3
 8007f70:	4880      	ldr	r0, [pc, #512]	; (8008174 <CDC_Itf_Receive+0x520>)
 8007f72:	f7ff f9cd 	bl	8007310 <LL_RTC_TIME_GetSecond>
 8007f76:	4603      	mov	r3, r0
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	f003 030f 	and.w	r3, r3, #15
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	4423      	add	r3, r4
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	4b7e      	ldr	r3, [pc, #504]	; (8008180 <CDC_Itf_Receive+0x52c>)
 8007f86:	701a      	strb	r2, [r3, #0]
	RTC_Mo =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 8007f88:	487a      	ldr	r0, [pc, #488]	; (8008174 <CDC_Itf_Receive+0x520>)
 8007f8a:	f7ff fa13 	bl	80073b4 <LL_RTC_DATE_GetMonth>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	111b      	asrs	r3, r3, #4
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	0092      	lsls	r2, r2, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	005b      	lsls	r3, r3, #1
 8007fa4:	b2dc      	uxtb	r4, r3
 8007fa6:	4873      	ldr	r0, [pc, #460]	; (8008174 <CDC_Itf_Receive+0x520>)
 8007fa8:	f7ff fa04 	bl	80073b4 <LL_RTC_DATE_GetMonth>
 8007fac:	4603      	mov	r3, r0
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	f003 030f 	and.w	r3, r3, #15
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	4423      	add	r3, r4
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	4b72      	ldr	r3, [pc, #456]	; (8008184 <CDC_Itf_Receive+0x530>)
 8007fbc:	701a      	strb	r2, [r3, #0]
	RTC_D = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 8007fbe:	486d      	ldr	r0, [pc, #436]	; (8008174 <CDC_Itf_Receive+0x520>)
 8007fc0:	f7ff fa22 	bl	8007408 <LL_RTC_DATE_GetDay>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	111b      	asrs	r3, r3, #4
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	f003 030f 	and.w	r3, r3, #15
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	0092      	lsls	r2, r2, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	005b      	lsls	r3, r3, #1
 8007fda:	b2dc      	uxtb	r4, r3
 8007fdc:	4865      	ldr	r0, [pc, #404]	; (8008174 <CDC_Itf_Receive+0x520>)
 8007fde:	f7ff fa13 	bl	8007408 <LL_RTC_DATE_GetDay>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	f003 030f 	and.w	r3, r3, #15
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	4423      	add	r3, r4
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	4b65      	ldr	r3, [pc, #404]	; (8008188 <CDC_Itf_Receive+0x534>)
 8007ff2:	701a      	strb	r2, [r3, #0]
	RTC_Y =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 8007ff4:	485f      	ldr	r0, [pc, #380]	; (8008174 <CDC_Itf_Receive+0x520>)
 8007ff6:	f7ff f9b3 	bl	8007360 <LL_RTC_DATE_GetYear>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	111b      	asrs	r3, r3, #4
 8008000:	b2db      	uxtb	r3, r3
 8008002:	f003 030f 	and.w	r3, r3, #15
 8008006:	b2db      	uxtb	r3, r3
 8008008:	461a      	mov	r2, r3
 800800a:	0092      	lsls	r2, r2, #2
 800800c:	4413      	add	r3, r2
 800800e:	005b      	lsls	r3, r3, #1
 8008010:	b2dc      	uxtb	r4, r3
 8008012:	4858      	ldr	r0, [pc, #352]	; (8008174 <CDC_Itf_Receive+0x520>)
 8008014:	f7ff f9a4 	bl	8007360 <LL_RTC_DATE_GetYear>
 8008018:	4603      	mov	r3, r0
 800801a:	b2db      	uxtb	r3, r3
 800801c:	f003 030f 	and.w	r3, r3, #15
 8008020:	b2db      	uxtb	r3, r3
 8008022:	4423      	add	r3, r4
 8008024:	b2da      	uxtb	r2, r3
 8008026:	4b59      	ldr	r3, [pc, #356]	; (800818c <CDC_Itf_Receive+0x538>)
 8008028:	701a      	strb	r2, [r3, #0]

	// Releasing RTC registers (Time and Date registers); necessary for RTC read/write operation
	(void)RTC->DR;
 800802a:	4b52      	ldr	r3, [pc, #328]	; (8008174 <CDC_Itf_Receive+0x520>)
 800802c:	685b      	ldr	r3, [r3, #4]
	(void)RTC->TR;
 800802e:	4b51      	ldr	r3, [pc, #324]	; (8008174 <CDC_Itf_Receive+0x520>)
 8008030:	681b      	ldr	r3, [r3, #0]
		UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\nCurrent Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);
 8008032:	4b51      	ldr	r3, [pc, #324]	; (8008178 <CDC_Itf_Receive+0x524>)
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	461d      	mov	r5, r3
 8008038:	4b50      	ldr	r3, [pc, #320]	; (800817c <CDC_Itf_Receive+0x528>)
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	461a      	mov	r2, r3
 800803e:	4b50      	ldr	r3, [pc, #320]	; (8008180 <CDC_Itf_Receive+0x52c>)
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	4619      	mov	r1, r3
 8008044:	4b4f      	ldr	r3, [pc, #316]	; (8008184 <CDC_Itf_Receive+0x530>)
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	4618      	mov	r0, r3
 800804a:	4b4f      	ldr	r3, [pc, #316]	; (8008188 <CDC_Itf_Receive+0x534>)
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	461c      	mov	r4, r3
 8008050:	4b4e      	ldr	r3, [pc, #312]	; (800818c <CDC_Itf_Receive+0x538>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	9304      	str	r3, [sp, #16]
 8008056:	9403      	str	r4, [sp, #12]
 8008058:	9002      	str	r0, [sp, #8]
 800805a:	9101      	str	r1, [sp, #4]
 800805c:	9200      	str	r2, [sp, #0]
 800805e:	462b      	mov	r3, r5
 8008060:	4a4b      	ldr	r2, [pc, #300]	; (8008190 <CDC_Itf_Receive+0x53c>)
 8008062:	494c      	ldr	r1, [pc, #304]	; (8008194 <CDC_Itf_Receive+0x540>)
 8008064:	484c      	ldr	r0, [pc, #304]	; (8008198 <CDC_Itf_Receive+0x544>)
 8008066:	f00d f9b1 	bl	80153cc <siprintf>
 800806a:	4603      	mov	r3, r0
 800806c:	b2da      	uxtb	r2, r3
 800806e:	4b4b      	ldr	r3, [pc, #300]	; (800819c <CDC_Itf_Receive+0x548>)
 8008070:	701a      	strb	r2, [r3, #0]
	// UserBufferSize=sprintf((char*)UserBuffer,"Pros: Current Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\nPrevious Error List\r\n:ErrorCode_ErrorTimestamp\r\n :%d_%ld\r\n :%d_%ld\r\n :%d_%ld\r\n :%d_%ld\r\n :%d_%ld\r\n :%d_%ld\r\n :%d_%ld\r\n :%d_%ld\r\n :%d_%ld\r\n :%d_%ld.\r\n\r\n",RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y,Error_reg_log.Error[0],Error_reg_log.ErrorTime[0],Error_reg_log.Error[1],Error_reg_log.ErrorTime[1],Error_reg_log.Error[2],Error_reg_log.ErrorTime[2],Error_reg_log.Error[3],Error_reg_log.ErrorTime[3],Error_reg_log.Error[4],Error_reg_log.ErrorTime[4],Error_reg_log.Error[5],Error_reg_log.ErrorTime[5],Error_reg_log.Error[6],Error_reg_log.ErrorTime[6],Error_reg_log.Error[7],Error_reg_log.ErrorTime[7],Error_reg_log.Error[8],Error_reg_log.ErrorTime[8],Error_reg_log.Error[9],Error_reg_log.ErrorTime[9]);
	USBD_CDC_SetTxBuffer(&USBD_Device, UserBuffer,UserBufferSize);
 8008072:	4b4a      	ldr	r3, [pc, #296]	; (800819c <CDC_Itf_Receive+0x548>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	b29b      	uxth	r3, r3
 8008078:	461a      	mov	r2, r3
 800807a:	4947      	ldr	r1, [pc, #284]	; (8008198 <CDC_Itf_Receive+0x544>)
 800807c:	4848      	ldr	r0, [pc, #288]	; (80081a0 <CDC_Itf_Receive+0x54c>)
 800807e:	f7ff fc70 	bl	8007962 <USBD_CDC_SetTxBuffer>
	USBD_CDC_TransmitPacket(&USBD_Device);//
 8008082:	4847      	ldr	r0, [pc, #284]	; (80081a0 <CDC_Itf_Receive+0x54c>)
 8008084:	f7ff fc9b 	bl	80079be <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;       // Clear 1st Character to avoid code conflict
 8008088:	4b39      	ldr	r3, [pc, #228]	; (8008170 <CDC_Itf_Receive+0x51c>)
 800808a:	2200      	movs	r2, #0
 800808c:	701a      	strb	r2, [r3, #0]
 800808e:	e0bb      	b.n	8008208 <CDC_Itf_Receive+0x5b4>
}

else if (TempUserBuffer[0] == 'U')    // USB MSC in next USB connectivity
 8008090:	4b37      	ldr	r3, [pc, #220]	; (8008170 <CDC_Itf_Receive+0x51c>)
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	2b55      	cmp	r3, #85	; 0x55
 8008096:	d12c      	bne.n	80080f2 <CDC_Itf_Receive+0x49e>
{
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n Return to USB MSC Mode after USB reconnect..\r\n\r\n",software_vr);
 8008098:	4a3d      	ldr	r2, [pc, #244]	; (8008190 <CDC_Itf_Receive+0x53c>)
 800809a:	4942      	ldr	r1, [pc, #264]	; (80081a4 <CDC_Itf_Receive+0x550>)
 800809c:	483e      	ldr	r0, [pc, #248]	; (8008198 <CDC_Itf_Receive+0x544>)
 800809e:	f00d f995 	bl	80153cc <siprintf>
 80080a2:	4603      	mov	r3, r0
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	4b3d      	ldr	r3, [pc, #244]	; (800819c <CDC_Itf_Receive+0x548>)
 80080a8:	701a      	strb	r2, [r3, #0]
	USBD_CDC_SetTxBuffer(&USBD_Device, UserBuffer,UserBufferSize);
 80080aa:	4b3c      	ldr	r3, [pc, #240]	; (800819c <CDC_Itf_Receive+0x548>)
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	461a      	mov	r2, r3
 80080b2:	4939      	ldr	r1, [pc, #228]	; (8008198 <CDC_Itf_Receive+0x544>)
 80080b4:	483a      	ldr	r0, [pc, #232]	; (80081a0 <CDC_Itf_Receive+0x54c>)
 80080b6:	f7ff fc54 	bl	8007962 <USBD_CDC_SetTxBuffer>
	USBD_CDC_TransmitPacket(&USBD_Device);//
 80080ba:	4839      	ldr	r0, [pc, #228]	; (80081a0 <CDC_Itf_Receive+0x54c>)
 80080bc:	f7ff fc7f 	bl	80079be <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 80080c0:	4b2b      	ldr	r3, [pc, #172]	; (8008170 <CDC_Itf_Receive+0x51c>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	701a      	strb	r2, [r3, #0]
	USB_Mode = 1;                    // USB MSC Mode
 80080c6:	4b38      	ldr	r3, [pc, #224]	; (80081a8 <CDC_Itf_Receive+0x554>)
 80080c8:	2201      	movs	r2, #1
 80080ca:	701a      	strb	r2, [r3, #0]
	Logstart_Delete=1;
 80080cc:	4b37      	ldr	r3, [pc, #220]	; (80081ac <CDC_Itf_Receive+0x558>)
 80080ce:	2201      	movs	r2, #1
 80080d0:	601a      	str	r2, [r3, #0]
	EnterReset_Create=0;
 80080d2:	4b37      	ldr	r3, [pc, #220]	; (80081b0 <CDC_Itf_Receive+0x55c>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	601a      	str	r2, [r3, #0]
	EnterDFU_Create=0;
 80080d8:	4b36      	ldr	r3, [pc, #216]	; (80081b4 <CDC_Itf_Receive+0x560>)
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]
	Logstart_Create=1;
 80080de:	4b36      	ldr	r3, [pc, #216]	; (80081b8 <CDC_Itf_Receive+0x564>)
 80080e0:	2201      	movs	r2, #1
 80080e2:	601a      	str	r2, [r3, #0]
	 VCP_Bypass=1;
 80080e4:	4b35      	ldr	r3, [pc, #212]	; (80081bc <CDC_Itf_Receive+0x568>)
 80080e6:	2201      	movs	r2, #1
 80080e8:	701a      	strb	r2, [r3, #0]
	 Data_log_Start_Resume = 0;
 80080ea:	4b35      	ldr	r3, [pc, #212]	; (80081c0 <CDC_Itf_Receive+0x56c>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	701a      	strb	r2, [r3, #0]
 80080f0:	e08a      	b.n	8008208 <CDC_Itf_Receive+0x5b4>
}

else if (TempUserBuffer[0] == 'Z')    // Reset Device
 80080f2:	4b1f      	ldr	r3, [pc, #124]	; (8008170 <CDC_Itf_Receive+0x51c>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	2b5a      	cmp	r3, #90	; 0x5a
 80080f8:	d11a      	bne.n	8008130 <CDC_Itf_Receive+0x4dc>
{
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to reset AIM device..\r\n",software_vr);
 80080fa:	4a25      	ldr	r2, [pc, #148]	; (8008190 <CDC_Itf_Receive+0x53c>)
 80080fc:	4931      	ldr	r1, [pc, #196]	; (80081c4 <CDC_Itf_Receive+0x570>)
 80080fe:	4826      	ldr	r0, [pc, #152]	; (8008198 <CDC_Itf_Receive+0x544>)
 8008100:	f00d f964 	bl	80153cc <siprintf>
 8008104:	4603      	mov	r3, r0
 8008106:	b2da      	uxtb	r2, r3
 8008108:	4b24      	ldr	r3, [pc, #144]	; (800819c <CDC_Itf_Receive+0x548>)
 800810a:	701a      	strb	r2, [r3, #0]
	USBD_CDC_SetTxBuffer(&USBD_Device, UserBuffer,UserBufferSize);
 800810c:	4b23      	ldr	r3, [pc, #140]	; (800819c <CDC_Itf_Receive+0x548>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	b29b      	uxth	r3, r3
 8008112:	461a      	mov	r2, r3
 8008114:	4920      	ldr	r1, [pc, #128]	; (8008198 <CDC_Itf_Receive+0x544>)
 8008116:	4822      	ldr	r0, [pc, #136]	; (80081a0 <CDC_Itf_Receive+0x54c>)
 8008118:	f7ff fc23 	bl	8007962 <USBD_CDC_SetTxBuffer>
	USBD_CDC_TransmitPacket(&USBD_Device);
 800811c:	4820      	ldr	r0, [pc, #128]	; (80081a0 <CDC_Itf_Receive+0x54c>)
 800811e:	f7ff fc4e 	bl	80079be <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 8008122:	4b13      	ldr	r3, [pc, #76]	; (8008170 <CDC_Itf_Receive+0x51c>)
 8008124:	2200      	movs	r2, #0
 8008126:	701a      	strb	r2, [r3, #0]
	EnterReset_Create=1;
 8008128:	4b21      	ldr	r3, [pc, #132]	; (80081b0 <CDC_Itf_Receive+0x55c>)
 800812a:	2201      	movs	r2, #1
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	e06b      	b.n	8008208 <CDC_Itf_Receive+0x5b4>
//	delay_us(3000000);
//	NVIC_SystemReset();               // System reset
}

else if (TempUserBuffer[0] == 'X')     // Enter DFU mode for firmware Update
 8008130:	4b0f      	ldr	r3, [pc, #60]	; (8008170 <CDC_Itf_Receive+0x51c>)
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	2b58      	cmp	r3, #88	; 0x58
 8008136:	d149      	bne.n	80081cc <CDC_Itf_Receive+0x578>
{
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to enter Firmware update Mode..\r\n",software_vr);
 8008138:	4a15      	ldr	r2, [pc, #84]	; (8008190 <CDC_Itf_Receive+0x53c>)
 800813a:	4923      	ldr	r1, [pc, #140]	; (80081c8 <CDC_Itf_Receive+0x574>)
 800813c:	4816      	ldr	r0, [pc, #88]	; (8008198 <CDC_Itf_Receive+0x544>)
 800813e:	f00d f945 	bl	80153cc <siprintf>
 8008142:	4603      	mov	r3, r0
 8008144:	b2da      	uxtb	r2, r3
 8008146:	4b15      	ldr	r3, [pc, #84]	; (800819c <CDC_Itf_Receive+0x548>)
 8008148:	701a      	strb	r2, [r3, #0]
	USBD_CDC_SetTxBuffer(&USBD_Device, UserBuffer,UserBufferSize);
 800814a:	4b14      	ldr	r3, [pc, #80]	; (800819c <CDC_Itf_Receive+0x548>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	b29b      	uxth	r3, r3
 8008150:	461a      	mov	r2, r3
 8008152:	4911      	ldr	r1, [pc, #68]	; (8008198 <CDC_Itf_Receive+0x544>)
 8008154:	4812      	ldr	r0, [pc, #72]	; (80081a0 <CDC_Itf_Receive+0x54c>)
 8008156:	f7ff fc04 	bl	8007962 <USBD_CDC_SetTxBuffer>
	USBD_CDC_TransmitPacket(&USBD_Device);
 800815a:	4811      	ldr	r0, [pc, #68]	; (80081a0 <CDC_Itf_Receive+0x54c>)
 800815c:	f7ff fc2f 	bl	80079be <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 8008160:	4b03      	ldr	r3, [pc, #12]	; (8008170 <CDC_Itf_Receive+0x51c>)
 8008162:	2200      	movs	r2, #0
 8008164:	701a      	strb	r2, [r3, #0]
	EnterDFU_Create=1;
 8008166:	4b13      	ldr	r3, [pc, #76]	; (80081b4 <CDC_Itf_Receive+0x560>)
 8008168:	2201      	movs	r2, #1
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	e04c      	b.n	8008208 <CDC_Itf_Receive+0x5b4>
 800816e:	bf00      	nop
 8008170:	2000ac34 	.word	0x2000ac34
 8008174:	40002800 	.word	0x40002800
 8008178:	20009718 	.word	0x20009718
 800817c:	2000abed 	.word	0x2000abed
 8008180:	2000abec 	.word	0x2000abec
 8008184:	20009710 	.word	0x20009710
 8008188:	2000abf4 	.word	0x2000abf4
 800818c:	200097f8 	.word	0x200097f8
 8008190:	0002c314 	.word	0x0002c314
 8008194:	08017b0c 	.word	0x08017b0c
 8008198:	2000a004 	.word	0x2000a004
 800819c:	2000abee 	.word	0x2000abee
 80081a0:	20008980 	.word	0x20008980
 80081a4:	08017b54 	.word	0x08017b54
 80081a8:	20009240 	.word	0x20009240
 80081ac:	20009714 	.word	0x20009714
 80081b0:	2000a000 	.word	0x2000a000
 80081b4:	2000abf0 	.word	0x2000abf0
 80081b8:	20009790 	.word	0x20009790
 80081bc:	20008d19 	.word	0x20008d19
 80081c0:	20008971 	.word	0x20008971
 80081c4:	08017b9c 	.word	0x08017b9c
 80081c8:	08017bdc 	.word	0x08017bdc
//	*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
//	NVIC_SystemReset();    // System reset
}


else if (TempUserBuffer[0] == 'Y')     // Enter DFU mode for firmware Update
 80081cc:	4b1a      	ldr	r3, [pc, #104]	; (8008238 <CDC_Itf_Receive+0x5e4>)
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b59      	cmp	r3, #89	; 0x59
 80081d2:	d119      	bne.n	8008208 <CDC_Itf_Receive+0x5b4>
{
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n LP_RAM reset..\r\n",software_vr);
 80081d4:	4a19      	ldr	r2, [pc, #100]	; (800823c <CDC_Itf_Receive+0x5e8>)
 80081d6:	491a      	ldr	r1, [pc, #104]	; (8008240 <CDC_Itf_Receive+0x5ec>)
 80081d8:	481a      	ldr	r0, [pc, #104]	; (8008244 <CDC_Itf_Receive+0x5f0>)
 80081da:	f00d f8f7 	bl	80153cc <siprintf>
 80081de:	4603      	mov	r3, r0
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	4b19      	ldr	r3, [pc, #100]	; (8008248 <CDC_Itf_Receive+0x5f4>)
 80081e4:	701a      	strb	r2, [r3, #0]
	USBD_CDC_SetTxBuffer(&USBD_Device, UserBuffer,UserBufferSize);
 80081e6:	4b18      	ldr	r3, [pc, #96]	; (8008248 <CDC_Itf_Receive+0x5f4>)
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	461a      	mov	r2, r3
 80081ee:	4915      	ldr	r1, [pc, #84]	; (8008244 <CDC_Itf_Receive+0x5f0>)
 80081f0:	4816      	ldr	r0, [pc, #88]	; (800824c <CDC_Itf_Receive+0x5f8>)
 80081f2:	f7ff fbb6 	bl	8007962 <USBD_CDC_SetTxBuffer>
	USBD_CDC_TransmitPacket(&USBD_Device);
 80081f6:	4815      	ldr	r0, [pc, #84]	; (800824c <CDC_Itf_Receive+0x5f8>)
 80081f8:	f7ff fbe1 	bl	80079be <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 80081fc:	4b0e      	ldr	r3, [pc, #56]	; (8008238 <CDC_Itf_Receive+0x5e4>)
 80081fe:	2200      	movs	r2, #0
 8008200:	701a      	strb	r2, [r3, #0]
	*LP_Ram_Key_Address = 0;
 8008202:	4b13      	ldr	r3, [pc, #76]	; (8008250 <CDC_Itf_Receive+0x5fc>)
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]
else
{

}

for (i = 0; i < BuffLength; i++) // Buffer Empty
 8008208:	2300      	movs	r3, #0
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	e007      	b.n	800821e <CDC_Itf_Receive+0x5ca>
{
TempUserBuffer[i] = 0;//
 800820e:	4a0a      	ldr	r2, [pc, #40]	; (8008238 <CDC_Itf_Receive+0x5e4>)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	4413      	add	r3, r2
 8008214:	2200      	movs	r2, #0
 8008216:	701a      	strb	r2, [r3, #0]
for (i = 0; i < BuffLength; i++) // Buffer Empty
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	3301      	adds	r3, #1
 800821c:	60fb      	str	r3, [r7, #12]
 800821e:	4b0d      	ldr	r3, [pc, #52]	; (8008254 <CDC_Itf_Receive+0x600>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	429a      	cmp	r2, r3
 8008226:	d3f2      	bcc.n	800820e <CDC_Itf_Receive+0x5ba>
}

// HAL_UART_Transmit_DMA(&UartHandle, Buf, *Len);
USBD_CDC_ReceivePacket(&USBD_Device);   // Ready for Next packet receive
 8008228:	4808      	ldr	r0, [pc, #32]	; (800824c <CDC_Itf_Receive+0x5f8>)
 800822a:	f7ff fbf2 	bl	8007a12 <USBD_CDC_ReceivePacket>
return (USBD_OK);
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bdb0      	pop	{r4, r5, r7, pc}
 8008238:	2000ac34 	.word	0x2000ac34
 800823c:	0002c314 	.word	0x0002c314
 8008240:	08017c24 	.word	0x08017c24
 8008244:	2000a004 	.word	0x2000a004
 8008248:	2000abee 	.word	0x2000abee
 800824c:	20008980 	.word	0x20008980
 8008250:	20017cf0 	.word	0x20017cf0
 8008254:	2000971c 	.word	0x2000971c

08008258 <ComPort_Config>:
  * @param  None.
  * @retval None.
  * @note   When a configuration is not supported, a default value is used.
  */
static void ComPort_Config(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	af00      	add	r7, sp, #0
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 800825c:	4833      	ldr	r0, [pc, #204]	; (800832c <ComPort_Config+0xd4>)
 800825e:	f004 fd8e 	bl	800cd7e <HAL_UART_DeInit>
  {

  }

  /* set the Stop bit */
  switch (LineCoding.format)
 8008262:	4b33      	ldr	r3, [pc, #204]	; (8008330 <ComPort_Config+0xd8>)
 8008264:	791b      	ldrb	r3, [r3, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d002      	beq.n	8008270 <ComPort_Config+0x18>
 800826a:	2b02      	cmp	r3, #2
 800826c:	d004      	beq.n	8008278 <ComPort_Config+0x20>
 800826e:	e008      	b.n	8008282 <ComPort_Config+0x2a>
  {
  case 0:
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 8008270:	4b2e      	ldr	r3, [pc, #184]	; (800832c <ComPort_Config+0xd4>)
 8008272:	2200      	movs	r2, #0
 8008274:	60da      	str	r2, [r3, #12]
    break;
 8008276:	e008      	b.n	800828a <ComPort_Config+0x32>
  case 2:
    UartHandle.Init.StopBits = UART_STOPBITS_2;
 8008278:	4b2c      	ldr	r3, [pc, #176]	; (800832c <ComPort_Config+0xd4>)
 800827a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800827e:	60da      	str	r2, [r3, #12]
    break;
 8008280:	e003      	b.n	800828a <ComPort_Config+0x32>
  default :
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 8008282:	4b2a      	ldr	r3, [pc, #168]	; (800832c <ComPort_Config+0xd4>)
 8008284:	2200      	movs	r2, #0
 8008286:	60da      	str	r2, [r3, #12]
    break;
 8008288:	bf00      	nop
  }

  /* set the parity bit*/
  switch (LineCoding.paritytype)
 800828a:	4b29      	ldr	r3, [pc, #164]	; (8008330 <ComPort_Config+0xd8>)
 800828c:	795b      	ldrb	r3, [r3, #5]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d007      	beq.n	80082a2 <ComPort_Config+0x4a>
 8008292:	2b02      	cmp	r3, #2
 8008294:	d00a      	beq.n	80082ac <ComPort_Config+0x54>
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10d      	bne.n	80082b6 <ComPort_Config+0x5e>
  {
  case 0:
    UartHandle.Init.Parity = UART_PARITY_NONE;
 800829a:	4b24      	ldr	r3, [pc, #144]	; (800832c <ComPort_Config+0xd4>)
 800829c:	2200      	movs	r2, #0
 800829e:	611a      	str	r2, [r3, #16]
    break;
 80082a0:	e00d      	b.n	80082be <ComPort_Config+0x66>
  case 1:
    UartHandle.Init.Parity = UART_PARITY_ODD;
 80082a2:	4b22      	ldr	r3, [pc, #136]	; (800832c <ComPort_Config+0xd4>)
 80082a4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80082a8:	611a      	str	r2, [r3, #16]
    break;
 80082aa:	e008      	b.n	80082be <ComPort_Config+0x66>
  case 2:
    UartHandle.Init.Parity = UART_PARITY_EVEN;
 80082ac:	4b1f      	ldr	r3, [pc, #124]	; (800832c <ComPort_Config+0xd4>)
 80082ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082b2:	611a      	str	r2, [r3, #16]
    break;
 80082b4:	e003      	b.n	80082be <ComPort_Config+0x66>
  default :
    UartHandle.Init.Parity = UART_PARITY_NONE;
 80082b6:	4b1d      	ldr	r3, [pc, #116]	; (800832c <ComPort_Config+0xd4>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	611a      	str	r2, [r3, #16]
    break;
 80082bc:	bf00      	nop
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (LineCoding.datatype)
 80082be:	4b1c      	ldr	r3, [pc, #112]	; (8008330 <ComPort_Config+0xd8>)
 80082c0:	799b      	ldrb	r3, [r3, #6]
 80082c2:	2b07      	cmp	r3, #7
 80082c4:	d002      	beq.n	80082cc <ComPort_Config+0x74>
 80082c6:	2b08      	cmp	r3, #8
 80082c8:	d004      	beq.n	80082d4 <ComPort_Config+0x7c>
 80082ca:	e010      	b.n	80082ee <ComPort_Config+0x96>
  {
  case 0x07:
    /* With this configuration a parity (Even or Odd) must be set */
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80082cc:	4b17      	ldr	r3, [pc, #92]	; (800832c <ComPort_Config+0xd4>)
 80082ce:	2200      	movs	r2, #0
 80082d0:	609a      	str	r2, [r3, #8]
    break;
 80082d2:	e010      	b.n	80082f6 <ComPort_Config+0x9e>
  case 0x08:
    if(UartHandle.Init.Parity == UART_PARITY_NONE)
 80082d4:	4b15      	ldr	r3, [pc, #84]	; (800832c <ComPort_Config+0xd4>)
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d103      	bne.n	80082e4 <ComPort_Config+0x8c>
    {
      UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80082dc:	4b13      	ldr	r3, [pc, #76]	; (800832c <ComPort_Config+0xd4>)
 80082de:	2200      	movs	r2, #0
 80082e0:	609a      	str	r2, [r3, #8]
    else
    {
      UartHandle.Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
 80082e2:	e008      	b.n	80082f6 <ComPort_Config+0x9e>
      UartHandle.Init.WordLength = UART_WORDLENGTH_9B;
 80082e4:	4b11      	ldr	r3, [pc, #68]	; (800832c <ComPort_Config+0xd4>)
 80082e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80082ea:	609a      	str	r2, [r3, #8]
    break;
 80082ec:	e003      	b.n	80082f6 <ComPort_Config+0x9e>
  default :
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80082ee:	4b0f      	ldr	r3, [pc, #60]	; (800832c <ComPort_Config+0xd4>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	609a      	str	r2, [r3, #8]
    break;
 80082f4:	bf00      	nop
  }

  UartHandle.Init.BaudRate     = LineCoding.bitrate;
 80082f6:	4b0e      	ldr	r3, [pc, #56]	; (8008330 <ComPort_Config+0xd8>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a0c      	ldr	r2, [pc, #48]	; (800832c <ComPort_Config+0xd4>)
 80082fc:	6053      	str	r3, [r2, #4]
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80082fe:	4b0b      	ldr	r3, [pc, #44]	; (800832c <ComPort_Config+0xd4>)
 8008300:	2200      	movs	r2, #0
 8008302:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8008304:	4b09      	ldr	r3, [pc, #36]	; (800832c <ComPort_Config+0xd4>)
 8008306:	220c      	movs	r2, #12
 8008308:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800830a:	4b08      	ldr	r3, [pc, #32]	; (800832c <ComPort_Config+0xd4>)
 800830c:	2200      	movs	r2, #0
 800830e:	61da      	str	r2, [r3, #28]

  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8008310:	4806      	ldr	r0, [pc, #24]	; (800832c <ComPort_Config+0xd4>)
 8008312:	f004 fce3 	bl	800ccdc <HAL_UART_Init>
  {

 }

  /* Start reception: provide the buffer pointer with offset and the buffer size */
 HAL_UART_Receive_IT(&UartHandle, (uint8_t *)(UserTxBuffer + UserTxBufPtrIn), 1);
 8008316:	4b07      	ldr	r3, [pc, #28]	; (8008334 <ComPort_Config+0xdc>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a07      	ldr	r2, [pc, #28]	; (8008338 <ComPort_Config+0xe0>)
 800831c:	4413      	add	r3, r2
 800831e:	2201      	movs	r2, #1
 8008320:	4619      	mov	r1, r3
 8008322:	4802      	ldr	r0, [pc, #8]	; (800832c <ComPort_Config+0xd4>)
 8008324:	f004 fd73 	bl	800ce0e <HAL_UART_Receive_IT>
}
 8008328:	bf00      	nop
 800832a:	bd80      	pop	{r7, pc}
 800832c:	20009720 	.word	0x20009720
 8008330:	200001ec 	.word	0x200001ec
 8008334:	2000082c 	.word	0x2000082c
 8008338:	200097fc 	.word	0x200097fc

0800833c <TIM_Config>:


static void TIM_Config(void)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	af00      	add	r7, sp, #0
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 8008340:	4b0a      	ldr	r3, [pc, #40]	; (800836c <TIM_Config+0x30>)
 8008342:	4a0b      	ldr	r2, [pc, #44]	; (8008370 <TIM_Config+0x34>)
 8008344:	601a      	str	r2, [r3, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 8008346:	4b09      	ldr	r3, [pc, #36]	; (800836c <TIM_Config+0x30>)
 8008348:	f241 3287 	movw	r2, #4999	; 0x1387
 800834c:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = 84-1;
 800834e:	4b07      	ldr	r3, [pc, #28]	; (800836c <TIM_Config+0x30>)
 8008350:	2253      	movs	r2, #83	; 0x53
 8008352:	605a      	str	r2, [r3, #4]
  TimHandle.Init.ClockDivision = 0;
 8008354:	4b05      	ldr	r3, [pc, #20]	; (800836c <TIM_Config+0x30>)
 8008356:	2200      	movs	r2, #0
 8008358:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800835a:	4b04      	ldr	r3, [pc, #16]	; (800836c <TIM_Config+0x30>)
 800835c:	2200      	movs	r2, #0
 800835e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8008360:	4802      	ldr	r0, [pc, #8]	; (800836c <TIM_Config+0x30>)
 8008362:	f004 fbd6 	bl	800cb12 <HAL_TIM_Base_Init>
  {

  }
}
 8008366:	bf00      	nop
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	2000abf8 	.word	0x2000abf8
 8008370:	40000400 	.word	0x40000400

08008374 <Reboot_Handler>:
    .section	.text.Reboot_Handler
	//.weak	Reboot_Handler
	.type	Reboot_Handler, %function
Reboot_Handler:

               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 8008374:	4805      	ldr	r0, [pc, #20]	; (800838c <Reboot_Handler+0x18>)
                LDR     R1, =0x00000001 // ENABLE SYSCFG CLOCK
 8008376:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 8008378:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 800837a:	4805      	ldr	r0, [pc, #20]	; (8008390 <Reboot_Handler+0x1c>)
                LDR     R1, =0x00000001 // MAP ROM AT ZERO
 800837c:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 800837e:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 8008380:	4804      	ldr	r0, [pc, #16]	; (8008394 <Reboot_Handler+0x20>)
                LDR     SP,[R0, #0]     // SP @ +0
 8008382:	f8d0 d000 	ldr.w	sp, [r0]
                LDR     R0,[R0, #4]    //  PC @ +4
 8008386:	6840      	ldr	r0, [r0, #4]
                BX      R0
 8008388:	4700      	bx	r0
 800838a:	0000      	.short	0x0000
               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 800838c:	40021060 	.word	0x40021060
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 8008390:	40010000 	.word	0x40010000
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 8008394:	1fff0000 	.word	0x1fff0000

08008398 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 8008398:	4811      	ldr	r0, [pc, #68]	; (80083e0 <LoopForever+0x4>)
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 800839a:	4912      	ldr	r1, [pc, #72]	; (80083e4 <LoopForever+0x8>)
                LDR     R2, [R0, #0]
 800839c:	6802      	ldr	r2, [r0, #0]
                STR     R0, [R0, #0]     // Invalidate Bootloader_Key_Value
 800839e:	6000      	str	r0, [r0, #0]
                // zero data at Bootloader_Ram_Key_Address to avoid looping in DFU Mode

                CMP     R2, R1
 80083a0:	428a      	cmp	r2, r1
                BEQ     Reboot_Handler    // Jump to DfuModeEntry Lable if Bootloader_Key_Value matches
 80083a2:	f43f afe7 	beq.w	8008374 <Reboot_Handler>

                // Conitnue without entering DFU Mode


  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80083a6:	f8df d040 	ldr.w	sp, [pc, #64]	; 80083e8 <LoopForever+0xc>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80083aa:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80083ac:	e003      	b.n	80083b6 <LoopCopyDataInit>

080083ae <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80083ae:	4b0f      	ldr	r3, [pc, #60]	; (80083ec <LoopForever+0x10>)
	ldr	r3, [r3, r1]
 80083b0:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80083b2:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80083b4:	3104      	adds	r1, #4

080083b6 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80083b6:	480e      	ldr	r0, [pc, #56]	; (80083f0 <LoopForever+0x14>)
	ldr	r3, =_edata
 80083b8:	4b0e      	ldr	r3, [pc, #56]	; (80083f4 <LoopForever+0x18>)
	adds	r2, r0, r1
 80083ba:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80083bc:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80083be:	d3f6      	bcc.n	80083ae <CopyDataInit>
	ldr	r2, =_sbss
 80083c0:	4a0d      	ldr	r2, [pc, #52]	; (80083f8 <LoopForever+0x1c>)
	b	LoopFillZerobss
 80083c2:	e002      	b.n	80083ca <LoopFillZerobss>

080083c4 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80083c4:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80083c6:	f842 3b04 	str.w	r3, [r2], #4

080083ca <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80083ca:	4b0c      	ldr	r3, [pc, #48]	; (80083fc <LoopForever+0x20>)
	cmp	r2, r3
 80083cc:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80083ce:	d3f9      	bcc.n	80083c4 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80083d0:	f7fe f846 	bl	8006460 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80083d4:	f00c fef6 	bl	80151c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80083d8:	f7fa f9c6 	bl	8002768 <main>

080083dc <LoopForever>:

LoopForever:
    b LoopForever
 80083dc:	e7fe      	b.n	80083dc <LoopForever>
 80083de:	0000      	.short	0x0000
                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 80083e0:	20017ff0 	.word	0x20017ff0
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 80083e4:	deadbeef 	.word	0xdeadbeef
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80083e8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80083ec:	08017ff0 	.word	0x08017ff0
	ldr	r0, =_sdata
 80083f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80083f4:	2000047c 	.word	0x2000047c
	ldr	r2, =_sbss
 80083f8:	20000480 	.word	0x20000480
	ldr	r3, = _ebss
 80083fc:	2000b024 	.word	0x2000b024

08008400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008400:	e7fe      	b.n	8008400 <ADC1_2_IRQHandler>

08008402 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008406:	2003      	movs	r0, #3
 8008408:	f000 f93e 	bl	8008688 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800840c:	2000      	movs	r0, #0
 800840e:	f000 f805 	bl	800841c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008412:	f7fd ff41 	bl	8006298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	bd80      	pop	{r7, pc}

0800841c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8008424:	4b09      	ldr	r3, [pc, #36]	; (800844c <HAL_InitTick+0x30>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a09      	ldr	r2, [pc, #36]	; (8008450 <HAL_InitTick+0x34>)
 800842a:	fba2 2303 	umull	r2, r3, r2, r3
 800842e:	099b      	lsrs	r3, r3, #6
 8008430:	4618      	mov	r0, r3
 8008432:	f000 f95e 	bl	80086f2 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8008436:	2200      	movs	r2, #0
 8008438:	6879      	ldr	r1, [r7, #4]
 800843a:	f04f 30ff 	mov.w	r0, #4294967295
 800843e:	f000 f92e 	bl	800869e <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	20000014 	.word	0x20000014
 8008450:	10624dd3 	.word	0x10624dd3

08008454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008454:	b480      	push	{r7}
 8008456:	af00      	add	r7, sp, #0
  uwTick++;
 8008458:	4b04      	ldr	r3, [pc, #16]	; (800846c <HAL_IncTick+0x18>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3301      	adds	r3, #1
 800845e:	4a03      	ldr	r2, [pc, #12]	; (800846c <HAL_IncTick+0x18>)
 8008460:	6013      	str	r3, [r2, #0]
}
 8008462:	bf00      	nop
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	2000b01c 	.word	0x2000b01c

08008470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008470:	b480      	push	{r7}
 8008472:	af00      	add	r7, sp, #0
  return uwTick;
 8008474:	4b03      	ldr	r3, [pc, #12]	; (8008484 <HAL_GetTick+0x14>)
 8008476:	681b      	ldr	r3, [r3, #0]
}
 8008478:	4618      	mov	r0, r3
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	2000b01c 	.word	0x2000b01c

08008488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008490:	2300      	movs	r3, #0
 8008492:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8008494:	f7ff ffec 	bl	8008470 <HAL_GetTick>
 8008498:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800849a:	bf00      	nop
 800849c:	f7ff ffe8 	bl	8008470 <HAL_GetTick>
 80084a0:	4602      	mov	r2, r0
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	1ad2      	subs	r2, r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d3f7      	bcc.n	800849c <HAL_Delay+0x14>
  {
  }
}
 80084ac:	bf00      	nop
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80084b4:	b480      	push	{r7}
 80084b6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80084b8:	4a05      	ldr	r2, [pc, #20]	; (80084d0 <HAL_SuspendTick+0x1c>)
 80084ba:	4b05      	ldr	r3, [pc, #20]	; (80084d0 <HAL_SuspendTick+0x1c>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f023 0302 	bic.w	r3, r3, #2
 80084c2:	6013      	str	r3, [r2, #0]
}
 80084c4:	bf00      	nop
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	e000e010 	.word	0xe000e010

080084d4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80084d4:	b480      	push	{r7}
 80084d6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80084d8:	4a05      	ldr	r2, [pc, #20]	; (80084f0 <HAL_ResumeTick+0x1c>)
 80084da:	4b05      	ldr	r3, [pc, #20]	; (80084f0 <HAL_ResumeTick+0x1c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f043 0302 	orr.w	r3, r3, #2
 80084e2:	6013      	str	r3, [r2, #0]
}
 80084e4:	bf00      	nop
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	e000e010 	.word	0xe000e010

080084f4 <NVIC_SetPriorityGrouping>:
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f003 0307 	and.w	r3, r3, #7
 8008502:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008504:	4b0c      	ldr	r3, [pc, #48]	; (8008538 <NVIC_SetPriorityGrouping+0x44>)
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008510:	4013      	ands	r3, r2
 8008512:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800851c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008526:	4a04      	ldr	r2, [pc, #16]	; (8008538 <NVIC_SetPriorityGrouping+0x44>)
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	60d3      	str	r3, [r2, #12]
}
 800852c:	bf00      	nop
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr
 8008538:	e000ed00 	.word	0xe000ed00

0800853c <NVIC_GetPriorityGrouping>:
{
 800853c:	b480      	push	{r7}
 800853e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008540:	4b04      	ldr	r3, [pc, #16]	; (8008554 <NVIC_GetPriorityGrouping+0x18>)
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	0a1b      	lsrs	r3, r3, #8
 8008546:	f003 0307 	and.w	r3, r3, #7
}
 800854a:	4618      	mov	r0, r3
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	e000ed00 	.word	0xe000ed00

08008558 <NVIC_EnableIRQ>:
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	4603      	mov	r3, r0
 8008560:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8008562:	4909      	ldr	r1, [pc, #36]	; (8008588 <NVIC_EnableIRQ+0x30>)
 8008564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008568:	095b      	lsrs	r3, r3, #5
 800856a:	79fa      	ldrb	r2, [r7, #7]
 800856c:	f002 021f 	and.w	r2, r2, #31
 8008570:	2001      	movs	r0, #1
 8008572:	fa00 f202 	lsl.w	r2, r0, r2
 8008576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800857a:	bf00      	nop
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	e000e100 	.word	0xe000e100

0800858c <NVIC_SetPriority>:
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	4603      	mov	r3, r0
 8008594:	6039      	str	r1, [r7, #0]
 8008596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8008598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800859c:	2b00      	cmp	r3, #0
 800859e:	da0b      	bge.n	80085b8 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085a0:	490d      	ldr	r1, [pc, #52]	; (80085d8 <NVIC_SetPriority+0x4c>)
 80085a2:	79fb      	ldrb	r3, [r7, #7]
 80085a4:	f003 030f 	and.w	r3, r3, #15
 80085a8:	3b04      	subs	r3, #4
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	b2d2      	uxtb	r2, r2
 80085ae:	0112      	lsls	r2, r2, #4
 80085b0:	b2d2      	uxtb	r2, r2
 80085b2:	440b      	add	r3, r1
 80085b4:	761a      	strb	r2, [r3, #24]
}
 80085b6:	e009      	b.n	80085cc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085b8:	4908      	ldr	r1, [pc, #32]	; (80085dc <NVIC_SetPriority+0x50>)
 80085ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	b2d2      	uxtb	r2, r2
 80085c2:	0112      	lsls	r2, r2, #4
 80085c4:	b2d2      	uxtb	r2, r2
 80085c6:	440b      	add	r3, r1
 80085c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	e000ed00 	.word	0xe000ed00
 80085dc:	e000e100 	.word	0xe000e100

080085e0 <NVIC_EncodePriority>:
{
 80085e0:	b480      	push	{r7}
 80085e2:	b089      	sub	sp, #36	; 0x24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f003 0307 	and.w	r3, r3, #7
 80085f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	f1c3 0307 	rsb	r3, r3, #7
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	bf28      	it	cs
 80085fe:	2304      	movcs	r3, #4
 8008600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	3304      	adds	r3, #4
 8008606:	2b06      	cmp	r3, #6
 8008608:	d902      	bls.n	8008610 <NVIC_EncodePriority+0x30>
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	3b03      	subs	r3, #3
 800860e:	e000      	b.n	8008612 <NVIC_EncodePriority+0x32>
 8008610:	2300      	movs	r3, #0
 8008612:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008614:	2201      	movs	r2, #1
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	fa02 f303 	lsl.w	r3, r2, r3
 800861c:	1e5a      	subs	r2, r3, #1
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	401a      	ands	r2, r3
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008626:	2101      	movs	r1, #1
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	fa01 f303 	lsl.w	r3, r1, r3
 800862e:	1e59      	subs	r1, r3, #1
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008634:	4313      	orrs	r3, r2
}
 8008636:	4618      	mov	r0, r3
 8008638:	3724      	adds	r7, #36	; 0x24
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
	...

08008644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	3b01      	subs	r3, #1
 8008650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008654:	d301      	bcc.n	800865a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008656:	2301      	movs	r3, #1
 8008658:	e00f      	b.n	800867a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800865a:	4a0a      	ldr	r2, [pc, #40]	; (8008684 <SysTick_Config+0x40>)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	3b01      	subs	r3, #1
 8008660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008662:	210f      	movs	r1, #15
 8008664:	f04f 30ff 	mov.w	r0, #4294967295
 8008668:	f7ff ff90 	bl	800858c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800866c:	4b05      	ldr	r3, [pc, #20]	; (8008684 <SysTick_Config+0x40>)
 800866e:	2200      	movs	r2, #0
 8008670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008672:	4b04      	ldr	r3, [pc, #16]	; (8008684 <SysTick_Config+0x40>)
 8008674:	2207      	movs	r2, #7
 8008676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	e000e010 	.word	0xe000e010

08008688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7ff ff2f 	bl	80084f4 <NVIC_SetPriorityGrouping>
}
 8008696:	bf00      	nop
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b086      	sub	sp, #24
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	4603      	mov	r3, r0
 80086a6:	60b9      	str	r1, [r7, #8]
 80086a8:	607a      	str	r2, [r7, #4]
 80086aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80086ac:	2300      	movs	r3, #0
 80086ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80086b0:	f7ff ff44 	bl	800853c <NVIC_GetPriorityGrouping>
 80086b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	68b9      	ldr	r1, [r7, #8]
 80086ba:	6978      	ldr	r0, [r7, #20]
 80086bc:	f7ff ff90 	bl	80085e0 <NVIC_EncodePriority>
 80086c0:	4602      	mov	r2, r0
 80086c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086c6:	4611      	mov	r1, r2
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7ff ff5f 	bl	800858c <NVIC_SetPriority>
}
 80086ce:	bf00      	nop
 80086d0:	3718      	adds	r7, #24
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b082      	sub	sp, #8
 80086da:	af00      	add	r7, sp, #0
 80086dc:	4603      	mov	r3, r0
 80086de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80086e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7ff ff37 	bl	8008558 <NVIC_EnableIRQ>
}
 80086ea:	bf00      	nop
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b082      	sub	sp, #8
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7ff ffa2 	bl	8008644 <SysTick_Config>
 8008700:	4603      	mov	r3, r0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800870e:	f000 f802 	bl	8008716 <HAL_SYSTICK_Callback>
}
 8008712:	bf00      	nop
 8008714:	bd80      	pop	{r7, pc}

08008716 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8008716:	b480      	push	{r7}
 8008718:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800871a:	bf00      	nop
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e09c      	b.n	8008874 <HAL_DMA_Init+0x150>
  {
    assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
  }
  
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	4b4f      	ldr	r3, [pc, #316]	; (8008880 <HAL_DMA_Init+0x15c>)
 8008742:	429a      	cmp	r2, r3
 8008744:	d80f      	bhi.n	8008766 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	461a      	mov	r2, r3
 800874c:	4b4d      	ldr	r3, [pc, #308]	; (8008884 <HAL_DMA_Init+0x160>)
 800874e:	4413      	add	r3, r2
 8008750:	4a4d      	ldr	r2, [pc, #308]	; (8008888 <HAL_DMA_Init+0x164>)
 8008752:	fba2 2303 	umull	r2, r3, r2, r3
 8008756:	091b      	lsrs	r3, r3, #4
 8008758:	009a      	lsls	r2, r3, #2
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a4a      	ldr	r2, [pc, #296]	; (800888c <HAL_DMA_Init+0x168>)
 8008762:	641a      	str	r2, [r3, #64]	; 0x40
 8008764:	e00e      	b.n	8008784 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	4b48      	ldr	r3, [pc, #288]	; (8008890 <HAL_DMA_Init+0x16c>)
 800876e:	4413      	add	r3, r2
 8008770:	4a45      	ldr	r2, [pc, #276]	; (8008888 <HAL_DMA_Init+0x164>)
 8008772:	fba2 2303 	umull	r2, r3, r2, r3
 8008776:	091b      	lsrs	r3, r3, #4
 8008778:	009a      	lsls	r2, r3, #2
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a44      	ldr	r2, [pc, #272]	; (8008894 <HAL_DMA_Init+0x170>)
 8008782:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2202      	movs	r2, #2
 8008788:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800879a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800879e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80087a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087de:	d031      	beq.n	8008844 <HAL_DMA_Init+0x120>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e4:	4a29      	ldr	r2, [pc, #164]	; (800888c <HAL_DMA_Init+0x168>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d116      	bne.n	8008818 <HAL_DMA_Init+0xf4>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 80087ea:	492b      	ldr	r1, [pc, #172]	; (8008898 <HAL_DMA_Init+0x174>)
 80087ec:	4b2a      	ldr	r3, [pc, #168]	; (8008898 <HAL_DMA_Init+0x174>)
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f4:	200f      	movs	r0, #15
 80087f6:	fa00 f303 	lsl.w	r3, r0, r3
 80087fa:	43db      	mvns	r3, r3
 80087fc:	4013      	ands	r3, r2
 80087fe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 8008800:	4825      	ldr	r0, [pc, #148]	; (8008898 <HAL_DMA_Init+0x174>)
 8008802:	4b25      	ldr	r3, [pc, #148]	; (8008898 <HAL_DMA_Init+0x174>)
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6859      	ldr	r1, [r3, #4]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800880e:	fa01 f303 	lsl.w	r3, r1, r3
 8008812:	4313      	orrs	r3, r2
 8008814:	6003      	str	r3, [r0, #0]
 8008816:	e015      	b.n	8008844 <HAL_DMA_Init+0x120>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 8008818:	4920      	ldr	r1, [pc, #128]	; (800889c <HAL_DMA_Init+0x178>)
 800881a:	4b20      	ldr	r3, [pc, #128]	; (800889c <HAL_DMA_Init+0x178>)
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008822:	200f      	movs	r0, #15
 8008824:	fa00 f303 	lsl.w	r3, r0, r3
 8008828:	43db      	mvns	r3, r3
 800882a:	4013      	ands	r3, r2
 800882c:	600b      	str	r3, [r1, #0]
     
      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 800882e:	481b      	ldr	r0, [pc, #108]	; (800889c <HAL_DMA_Init+0x178>)
 8008830:	4b1a      	ldr	r3, [pc, #104]	; (800889c <HAL_DMA_Init+0x178>)
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6859      	ldr	r1, [r3, #4]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800883c:	fa01 f303 	lsl.w	r3, r1, r3
 8008840:	4313      	orrs	r3, r2
 8008842:	6003      	str	r3, [r0, #0]
    }
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	40020407 	.word	0x40020407
 8008884:	bffdfff8 	.word	0xbffdfff8
 8008888:	cccccccd 	.word	0xcccccccd
 800888c:	40020000 	.word	0x40020000
 8008890:	bffdfbf8 	.word	0xbffdfbf8
 8008894:	40020400 	.word	0x40020400
 8008898:	400200a8 	.word	0x400200a8
 800889c:	400204a8 	.word	0x400204a8

080088a0 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d101      	bne.n	80088b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e060      	b.n	8008974 <HAL_DMA_DeInit+0xd4>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	6812      	ldr	r2, [r2, #0]
 80088ba:	6812      	ldr	r2, [r2, #0]
 80088bc:	f022 0201 	bic.w	r2, r2, #1
 80088c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2200      	movs	r2, #0
 80088c8:	601a      	str	r2, [r3, #0]

  /* Calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	461a      	mov	r2, r3
 80088d0:	4b2b      	ldr	r3, [pc, #172]	; (8008980 <HAL_DMA_DeInit+0xe0>)
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d80f      	bhi.n	80088f6 <HAL_DMA_DeInit+0x56>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	461a      	mov	r2, r3
 80088dc:	4b29      	ldr	r3, [pc, #164]	; (8008984 <HAL_DMA_DeInit+0xe4>)
 80088de:	4413      	add	r3, r2
 80088e0:	4a29      	ldr	r2, [pc, #164]	; (8008988 <HAL_DMA_DeInit+0xe8>)
 80088e2:	fba2 2303 	umull	r2, r3, r2, r3
 80088e6:	091b      	lsrs	r3, r3, #4
 80088e8:	009a      	lsls	r2, r3, #2
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a26      	ldr	r2, [pc, #152]	; (800898c <HAL_DMA_DeInit+0xec>)
 80088f2:	641a      	str	r2, [r3, #64]	; 0x40
 80088f4:	e00e      	b.n	8008914 <HAL_DMA_DeInit+0x74>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	461a      	mov	r2, r3
 80088fc:	4b24      	ldr	r3, [pc, #144]	; (8008990 <HAL_DMA_DeInit+0xf0>)
 80088fe:	4413      	add	r3, r2
 8008900:	4a21      	ldr	r2, [pc, #132]	; (8008988 <HAL_DMA_DeInit+0xe8>)
 8008902:	fba2 2303 	umull	r2, r3, r2, r3
 8008906:	091b      	lsrs	r3, r3, #4
 8008908:	009a      	lsls	r2, r3, #2
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a20      	ldr	r2, [pc, #128]	; (8008994 <HAL_DMA_DeInit+0xf4>)
 8008912:	641a      	str	r2, [r3, #64]	; 0x40
  }
  

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800891c:	2101      	movs	r1, #1
 800891e:	fa01 f202 	lsl.w	r2, r1, r2
 8008922:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008928:	4a18      	ldr	r2, [pc, #96]	; (800898c <HAL_DMA_DeInit+0xec>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d10b      	bne.n	8008946 <HAL_DMA_DeInit+0xa6>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 800892e:	491a      	ldr	r1, [pc, #104]	; (8008998 <HAL_DMA_DeInit+0xf8>)
 8008930:	4b19      	ldr	r3, [pc, #100]	; (8008998 <HAL_DMA_DeInit+0xf8>)
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008938:	200f      	movs	r0, #15
 800893a:	fa00 f303 	lsl.w	r3, r0, r3
 800893e:	43db      	mvns	r3, r3
 8008940:	4013      	ands	r3, r2
 8008942:	600b      	str	r3, [r1, #0]
 8008944:	e00a      	b.n	800895c <HAL_DMA_DeInit+0xbc>
  }
  else  
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 8008946:	4915      	ldr	r1, [pc, #84]	; (800899c <HAL_DMA_DeInit+0xfc>)
 8008948:	4b14      	ldr	r3, [pc, #80]	; (800899c <HAL_DMA_DeInit+0xfc>)
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008950:	200f      	movs	r0, #15
 8008952:	fa00 f303 	lsl.w	r3, r0, r3
 8008956:	43db      	mvns	r3, r3
 8008958:	4013      	ands	r3, r2
 800895a:	600b      	str	r3, [r1, #0]
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	40020407 	.word	0x40020407
 8008984:	bffdfff8 	.word	0xbffdfff8
 8008988:	cccccccd 	.word	0xcccccccd
 800898c:	40020000 	.word	0x40020000
 8008990:	bffdfbf8 	.word	0xbffdfbf8
 8008994:	40020400 	.word	0x40020400
 8008998:	400200a8 	.word	0x400200a8
 800899c:	400204a8 	.word	0x400204a8

080089a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b086      	sub	sp, #24
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	607a      	str	r2, [r7, #4]
 80089ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d101      	bne.n	80089c0 <HAL_DMA_Start_IT+0x20>
 80089bc:	2302      	movs	r3, #2
 80089be:	e04b      	b.n	8008a58 <HAL_DMA_Start_IT+0xb8>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d13a      	bne.n	8008a4a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2202      	movs	r2, #2
 80089d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	6812      	ldr	r2, [r2, #0]
 80089ea:	6812      	ldr	r2, [r2, #0]
 80089ec:	f022 0201 	bic.w	r2, r2, #1
 80089f0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	68b9      	ldr	r1, [r7, #8]
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 f90d 	bl	8008c18 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d008      	beq.n	8008a18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	6812      	ldr	r2, [r2, #0]
 8008a0e:	6812      	ldr	r2, [r2, #0]
 8008a10:	f042 020e 	orr.w	r2, r2, #14
 8008a14:	601a      	str	r2, [r3, #0]
 8008a16:	e00f      	b.n	8008a38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	6812      	ldr	r2, [r2, #0]
 8008a20:	6812      	ldr	r2, [r2, #0]
 8008a22:	f022 0204 	bic.w	r2, r2, #4
 8008a26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	6812      	ldr	r2, [r2, #0]
 8008a30:	6812      	ldr	r2, [r2, #0]
 8008a32:	f042 020a 	orr.w	r2, r2, #10
 8008a36:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	6812      	ldr	r2, [r2, #0]
 8008a40:	6812      	ldr	r2, [r2, #0]
 8008a42:	f042 0201 	orr.w	r2, r2, #1
 8008a46:	601a      	str	r2, [r3, #0]
 8008a48:	e005      	b.n	8008a56 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008a52:	2302      	movs	r3, #2
 8008a54:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8008a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d005      	beq.n	8008a84 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2204      	movs	r2, #4
 8008a7c:	63da      	str	r2, [r3, #60]	; 0x3c
        
    status = HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	73fb      	strb	r3, [r7, #15]
 8008a82:	e01f      	b.n	8008ac4 <HAL_DMA_Abort+0x64>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	6812      	ldr	r2, [r2, #0]
 8008a8c:	6812      	ldr	r2, [r2, #0]
 8008a8e:	f022 020e 	bic.w	r2, r2, #14
 8008a92:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	6812      	ldr	r2, [r2, #0]
 8008a9c:	6812      	ldr	r2, [r2, #0]
 8008a9e:	f022 0201 	bic.w	r2, r2, #1
 8008aa2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008aac:	2101      	movs	r1, #1
 8008aae:	fa01 f202 	lsl.w	r2, r1, r2
 8008ab2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);      
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  return status; 
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aee:	2204      	movs	r2, #4
 8008af0:	409a      	lsls	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	4013      	ands	r3, r2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d024      	beq.n	8008b44 <HAL_DMA_IRQHandler+0x72>
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	f003 0304 	and.w	r3, r3, #4
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d01f      	beq.n	8008b44 <HAL_DMA_IRQHandler+0x72>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 0320 	and.w	r3, r3, #32
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d107      	bne.n	8008b22 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	6812      	ldr	r2, [r2, #0]
 8008b1a:	6812      	ldr	r2, [r2, #0]
 8008b1c:	f022 0204 	bic.w	r2, r2, #4
 8008b20:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008b2a:	2104      	movs	r1, #4
 8008b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8008b30:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d069      	beq.n	8008c0e <HAL_DMA_IRQHandler+0x13c>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8008b42:	e064      	b.n	8008c0e <HAL_DMA_IRQHandler+0x13c>
      }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b48:	2202      	movs	r2, #2
 8008b4a:	409a      	lsls	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	4013      	ands	r3, r2
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d02c      	beq.n	8008bae <HAL_DMA_IRQHandler+0xdc>
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	f003 0302 	and.w	r3, r3, #2
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d027      	beq.n	8008bae <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0320 	and.w	r3, r3, #32
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10b      	bne.n	8008b84 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	6812      	ldr	r2, [r2, #0]
 8008b74:	6812      	ldr	r2, [r2, #0]
 8008b76:	f022 020a 	bic.w	r2, r2, #10
 8008b7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008b8c:	2102      	movs	r1, #2
 8008b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8008b92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d034      	beq.n	8008c0e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008bac:	e02f      	b.n	8008c0e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb2:	2208      	movs	r2, #8
 8008bb4:	409a      	lsls	r2, r3
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	4013      	ands	r3, r2
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d028      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x13e>
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	f003 0308 	and.w	r3, r3, #8
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d023      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	6812      	ldr	r2, [r2, #0]
 8008bd0:	6812      	ldr	r2, [r2, #0]
 8008bd2:	f022 020e 	bic.w	r2, r2, #14
 8008bd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008be0:	2101      	movs	r1, #1
 8008be2:	fa01 f202 	lsl.w	r2, r1, r2
 8008be6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d004      	beq.n	8008c10 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	4798      	blx	r3
    }
  }
  return;
 8008c0e:	bf00      	nop
 8008c10:	bf00      	nop
}
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
 8008c24:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008c2e:	2101      	movs	r1, #1
 8008c30:	fa01 f202 	lsl.w	r2, r1, r2
 8008c34:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	2b10      	cmp	r3, #16
 8008c44:	d108      	bne.n	8008c58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008c56:	e007      	b.n	8008c68 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	60da      	str	r2, [r3, #12]
}
 8008c68:	bf00      	nop
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b087      	sub	sp, #28
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008c82:	2300      	movs	r3, #0
 8008c84:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8008c86:	2300      	movs	r3, #0
 8008c88:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8008c8a:	e17f      	b.n	8008f8c <HAL_GPIO_Init+0x318>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	2101      	movs	r1, #1
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	fa01 f303 	lsl.w	r3, r1, r3
 8008c98:	4013      	ands	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f000 8171 	beq.w	8008f86 <HAL_GPIO_Init+0x312>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d003      	beq.n	8008cb4 <HAL_GPIO_Init+0x40>
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	2b12      	cmp	r3, #18
 8008cb2:	d123      	bne.n	8008cfc <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	08da      	lsrs	r2, r3, #3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	3208      	adds	r2, #8
 8008cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f003 0307 	and.w	r3, r3, #7
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	220f      	movs	r2, #15
 8008ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd0:	43db      	mvns	r3, r3
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	691a      	ldr	r2, [r3, #16]
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	f003 0307 	and.w	r3, r3, #7
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	08da      	lsrs	r2, r3, #3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	3208      	adds	r2, #8
 8008cf6:	6939      	ldr	r1, [r7, #16]
 8008cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	005b      	lsls	r3, r3, #1
 8008d06:	2203      	movs	r2, #3
 8008d08:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0c:	43db      	mvns	r3, r3
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	4013      	ands	r3, r2
 8008d12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	f003 0203 	and.w	r2, r3, #3
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	005b      	lsls	r3, r3, #1
 8008d20:	fa02 f303 	lsl.w	r3, r2, r3
 8008d24:	693a      	ldr	r2, [r7, #16]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d00b      	beq.n	8008d50 <HAL_GPIO_Init+0xdc>
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d007      	beq.n	8008d50 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008d44:	2b11      	cmp	r3, #17
 8008d46:	d003      	beq.n	8008d50 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	2b12      	cmp	r3, #18
 8008d4e:	d130      	bne.n	8008db2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	2203      	movs	r2, #3
 8008d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d60:	43db      	mvns	r3, r3
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	4013      	ands	r3, r2
 8008d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	68da      	ldr	r2, [r3, #12]
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	005b      	lsls	r3, r3, #1
 8008d70:	fa02 f303 	lsl.w	r3, r2, r3
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008d86:	2201      	movs	r2, #1
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8e:	43db      	mvns	r3, r3
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	4013      	ands	r3, r2
 8008d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	091b      	lsrs	r3, r3, #4
 8008d9c:	f003 0201 	and.w	r2, r3, #1
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	fa02 f303 	lsl.w	r3, r2, r3
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	f003 0303 	and.w	r3, r3, #3
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	d118      	bne.n	8008df0 <HAL_GPIO_Init+0x17c>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dcc:	43db      	mvns	r3, r3
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	08db      	lsrs	r3, r3, #3
 8008dda:	f003 0201 	and.w	r2, r3, #1
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	fa02 f303 	lsl.w	r3, r2, r3
 8008de4:	693a      	ldr	r2, [r7, #16]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	005b      	lsls	r3, r3, #1
 8008dfa:	2203      	movs	r2, #3
 8008dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008e00:	43db      	mvns	r3, r3
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	4013      	ands	r3, r2
 8008e06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	689a      	ldr	r2, [r3, #8]
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	005b      	lsls	r3, r3, #1
 8008e10:	fa02 f303 	lsl.w	r3, r2, r3
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 80ac 	beq.w	8008f86 <HAL_GPIO_Init+0x312>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e2e:	4a5e      	ldr	r2, [pc, #376]	; (8008fa8 <HAL_GPIO_Init+0x334>)
 8008e30:	4b5d      	ldr	r3, [pc, #372]	; (8008fa8 <HAL_GPIO_Init+0x334>)
 8008e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e34:	f043 0301 	orr.w	r3, r3, #1
 8008e38:	6613      	str	r3, [r2, #96]	; 0x60
 8008e3a:	4b5b      	ldr	r3, [pc, #364]	; (8008fa8 <HAL_GPIO_Init+0x334>)
 8008e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	60bb      	str	r3, [r7, #8]
 8008e44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8008e46:	4a59      	ldr	r2, [pc, #356]	; (8008fac <HAL_GPIO_Init+0x338>)
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	089b      	lsrs	r3, r3, #2
 8008e4c:	3302      	adds	r3, #2
 8008e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e52:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f003 0303 	and.w	r3, r3, #3
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	220f      	movs	r2, #15
 8008e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e62:	43db      	mvns	r3, r3
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	4013      	ands	r3, r2
 8008e68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008e70:	d025      	beq.n	8008ebe <HAL_GPIO_Init+0x24a>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a4e      	ldr	r2, [pc, #312]	; (8008fb0 <HAL_GPIO_Init+0x33c>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d01f      	beq.n	8008eba <HAL_GPIO_Init+0x246>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a4d      	ldr	r2, [pc, #308]	; (8008fb4 <HAL_GPIO_Init+0x340>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d019      	beq.n	8008eb6 <HAL_GPIO_Init+0x242>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a4c      	ldr	r2, [pc, #304]	; (8008fb8 <HAL_GPIO_Init+0x344>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d013      	beq.n	8008eb2 <HAL_GPIO_Init+0x23e>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a4b      	ldr	r2, [pc, #300]	; (8008fbc <HAL_GPIO_Init+0x348>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d00d      	beq.n	8008eae <HAL_GPIO_Init+0x23a>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a4a      	ldr	r2, [pc, #296]	; (8008fc0 <HAL_GPIO_Init+0x34c>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d007      	beq.n	8008eaa <HAL_GPIO_Init+0x236>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a49      	ldr	r2, [pc, #292]	; (8008fc4 <HAL_GPIO_Init+0x350>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d101      	bne.n	8008ea6 <HAL_GPIO_Init+0x232>
 8008ea2:	2306      	movs	r3, #6
 8008ea4:	e00c      	b.n	8008ec0 <HAL_GPIO_Init+0x24c>
 8008ea6:	2307      	movs	r3, #7
 8008ea8:	e00a      	b.n	8008ec0 <HAL_GPIO_Init+0x24c>
 8008eaa:	2305      	movs	r3, #5
 8008eac:	e008      	b.n	8008ec0 <HAL_GPIO_Init+0x24c>
 8008eae:	2304      	movs	r3, #4
 8008eb0:	e006      	b.n	8008ec0 <HAL_GPIO_Init+0x24c>
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e004      	b.n	8008ec0 <HAL_GPIO_Init+0x24c>
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	e002      	b.n	8008ec0 <HAL_GPIO_Init+0x24c>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e000      	b.n	8008ec0 <HAL_GPIO_Init+0x24c>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	f002 0203 	and.w	r2, r2, #3
 8008ec6:	0092      	lsls	r2, r2, #2
 8008ec8:	4093      	lsls	r3, r2
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008ed0:	4936      	ldr	r1, [pc, #216]	; (8008fac <HAL_GPIO_Init+0x338>)
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	089b      	lsrs	r3, r3, #2
 8008ed6:	3302      	adds	r3, #2
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008ede:	4b3a      	ldr	r3, [pc, #232]	; (8008fc8 <HAL_GPIO_Init+0x354>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	43db      	mvns	r3, r3
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	4013      	ands	r3, r2
 8008eec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008f02:	4a31      	ldr	r2, [pc, #196]	; (8008fc8 <HAL_GPIO_Init+0x354>)
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008f08:	4b2f      	ldr	r3, [pc, #188]	; (8008fc8 <HAL_GPIO_Init+0x354>)
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	43db      	mvns	r3, r3
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	4013      	ands	r3, r2
 8008f16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d003      	beq.n	8008f2c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8008f24:	693a      	ldr	r2, [r7, #16]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008f2c:	4a26      	ldr	r2, [pc, #152]	; (8008fc8 <HAL_GPIO_Init+0x354>)
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008f32:	4b25      	ldr	r3, [pc, #148]	; (8008fc8 <HAL_GPIO_Init+0x354>)
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	43db      	mvns	r3, r3
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	4013      	ands	r3, r2
 8008f40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d003      	beq.n	8008f56 <HAL_GPIO_Init+0x2e2>
        {
          temp |= iocurrent;
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008f56:	4a1c      	ldr	r2, [pc, #112]	; (8008fc8 <HAL_GPIO_Init+0x354>)
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008f5c:	4b1a      	ldr	r3, [pc, #104]	; (8008fc8 <HAL_GPIO_Init+0x354>)
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	43db      	mvns	r3, r3
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	4013      	ands	r3, r2
 8008f6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d003      	beq.n	8008f80 <HAL_GPIO_Init+0x30c>
        {
          temp |= iocurrent;
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008f80:	4a11      	ldr	r2, [pc, #68]	; (8008fc8 <HAL_GPIO_Init+0x354>)
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	fa22 f303 	lsr.w	r3, r2, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f47f ae78 	bne.w	8008c8c <HAL_GPIO_Init+0x18>
  }
}
 8008f9c:	bf00      	nop
 8008f9e:	371c      	adds	r7, #28
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	40021000 	.word	0x40021000
 8008fac:	40010000 	.word	0x40010000
 8008fb0:	48000400 	.word	0x48000400
 8008fb4:	48000800 	.word	0x48000800
 8008fb8:	48000c00 	.word	0x48000c00
 8008fbc:	48001000 	.word	0x48001000
 8008fc0:	48001400 	.word	0x48001400
 8008fc4:	48001800 	.word	0x48001800
 8008fc8:	40010400 	.word	0x40010400

08008fcc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fce:	b08f      	sub	sp, #60	; 0x3c
 8008fd0:	af0a      	add	r7, sp, #40	; 0x28
 8008fd2:	6078      	str	r0, [r7, #4]
  uint32_t index = 0U;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e10d      	b.n	80091fe <HAL_PCD_Init+0x232>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  
  if(hpcd->State == HAL_PCD_STATE_RESET)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 3385 	ldrb.w	r3, [r3, #901]	; 0x385
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d106      	bne.n	8008ffc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7fd fd0c 	bl	8006a14 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2203      	movs	r2, #3
 8009000:	f883 2385 	strb.w	r2, [r3, #901]	; 0x385

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4618      	mov	r0, r3
 800900a:	f005 faf1 	bl	800e5f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	603b      	str	r3, [r7, #0]
 8009014:	687e      	ldr	r6, [r7, #4]
 8009016:	466d      	mov	r5, sp
 8009018:	f106 0410 	add.w	r4, r6, #16
 800901c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800901e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009024:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009028:	e885 0003 	stmia.w	r5, {r0, r1}
 800902c:	1d33      	adds	r3, r6, #4
 800902e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009030:	6838      	ldr	r0, [r7, #0]
 8009032:	f005 faae 	bl	800e592 <USB_CoreInit>

  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2100      	movs	r1, #0
 800903c:	4618      	mov	r0, r3
 800903e:	f005 fae8 	bl	800e612 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8009042:	2300      	movs	r3, #0
 8009044:	60fb      	str	r3, [r7, #12]
 8009046:	e04c      	b.n	80090e2 <HAL_PCD_Init+0x116>
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8009048:	6879      	ldr	r1, [r7, #4]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	4613      	mov	r3, r2
 800904e:	00db      	lsls	r3, r3, #3
 8009050:	1a9b      	subs	r3, r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	440b      	add	r3, r1
 8009056:	333d      	adds	r3, #61	; 0x3d
 8009058:	2201      	movs	r2, #1
 800905a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].num = index;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	b2d8      	uxtb	r0, r3
 8009060:	6879      	ldr	r1, [r7, #4]
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	4613      	mov	r3, r2
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	1a9b      	subs	r3, r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	440b      	add	r3, r1
 800906e:	333c      	adds	r3, #60	; 0x3c
 8009070:	4602      	mov	r2, r0
 8009072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	b298      	uxth	r0, r3
 8009078:	6879      	ldr	r1, [r7, #4]
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	4613      	mov	r3, r2
 800907e:	00db      	lsls	r3, r3, #3
 8009080:	1a9b      	subs	r3, r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	440b      	add	r3, r1
 8009086:	3342      	adds	r3, #66	; 0x42
 8009088:	4602      	mov	r2, r0
 800908a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800908c:	6879      	ldr	r1, [r7, #4]
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	4613      	mov	r3, r2
 8009092:	00db      	lsls	r3, r3, #3
 8009094:	1a9b      	subs	r3, r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	440b      	add	r3, r1
 800909a:	333f      	adds	r3, #63	; 0x3f
 800909c:	2200      	movs	r2, #0
 800909e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].maxpacket =  0;
 80090a0:	6879      	ldr	r1, [r7, #4]
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	4613      	mov	r3, r2
 80090a6:	00db      	lsls	r3, r3, #3
 80090a8:	1a9b      	subs	r3, r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	440b      	add	r3, r1
 80090ae:	3344      	adds	r3, #68	; 0x44
 80090b0:	2200      	movs	r2, #0
 80090b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_buff = 0;
 80090b4:	6879      	ldr	r1, [r7, #4]
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	4613      	mov	r3, r2
 80090ba:	00db      	lsls	r3, r3, #3
 80090bc:	1a9b      	subs	r3, r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	440b      	add	r3, r1
 80090c2:	3348      	adds	r3, #72	; 0x48
 80090c4:	2200      	movs	r2, #0
 80090c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[index].xfer_len = 0;
 80090c8:	6879      	ldr	r1, [r7, #4]
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	4613      	mov	r3, r2
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	1a9b      	subs	r3, r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	440b      	add	r3, r1
 80090d6:	3350      	adds	r3, #80	; 0x50
 80090d8:	2200      	movs	r2, #0
 80090da:	601a      	str	r2, [r3, #0]
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	3301      	adds	r3, #1
 80090e0:	60fb      	str	r3, [r7, #12]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d8ad      	bhi.n	8009048 <HAL_PCD_Init+0x7c>
  }
  
  for (index = 0; index < 15 ; index++)
 80090ec:	2300      	movs	r3, #0
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	e052      	b.n	8009198 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[index].is_in = 0;
 80090f2:	6879      	ldr	r1, [r7, #4]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	4613      	mov	r3, r2
 80090f8:	00db      	lsls	r3, r3, #3
 80090fa:	1a9b      	subs	r3, r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	440b      	add	r3, r1
 8009100:	f203 13e1 	addw	r3, r3, #481	; 0x1e1
 8009104:	2200      	movs	r2, #0
 8009106:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].num = index;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	b2d8      	uxtb	r0, r3
 800910c:	6879      	ldr	r1, [r7, #4]
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	4613      	mov	r3, r2
 8009112:	00db      	lsls	r3, r3, #3
 8009114:	1a9b      	subs	r3, r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	440b      	add	r3, r1
 800911a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800911e:	4602      	mov	r2, r0
 8009120:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	b298      	uxth	r0, r3
 8009126:	6879      	ldr	r1, [r7, #4]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	4613      	mov	r3, r2
 800912c:	00db      	lsls	r3, r3, #3
 800912e:	1a9b      	subs	r3, r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	440b      	add	r3, r1
 8009134:	3342      	adds	r3, #66	; 0x42
 8009136:	4602      	mov	r2, r0
 8009138:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 800913a:	6879      	ldr	r1, [r7, #4]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	4613      	mov	r3, r2
 8009140:	00db      	lsls	r3, r3, #3
 8009142:	1a9b      	subs	r3, r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	440b      	add	r3, r1
 8009148:	f203 13e3 	addw	r3, r3, #483	; 0x1e3
 800914c:	2200      	movs	r2, #0
 800914e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[index].maxpacket = 0;
 8009150:	6879      	ldr	r1, [r7, #4]
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	4613      	mov	r3, r2
 8009156:	00db      	lsls	r3, r3, #3
 8009158:	1a9b      	subs	r3, r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	440b      	add	r3, r1
 800915e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009162:	2200      	movs	r2, #0
 8009164:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_buff = 0;
 8009166:	6879      	ldr	r1, [r7, #4]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	4613      	mov	r3, r2
 800916c:	00db      	lsls	r3, r3, #3
 800916e:	1a9b      	subs	r3, r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	440b      	add	r3, r1
 8009174:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009178:	2200      	movs	r2, #0
 800917a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[index].xfer_len = 0;
 800917c:	6879      	ldr	r1, [r7, #4]
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	4613      	mov	r3, r2
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	1a9b      	subs	r3, r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	440b      	add	r3, r1
 800918a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800918e:	2200      	movs	r2, #0
 8009190:	601a      	str	r2, [r3, #0]
  for (index = 0; index < 15 ; index++)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	3301      	adds	r3, #1
 8009196:	60fb      	str	r3, [r7, #12]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2b0e      	cmp	r3, #14
 800919c:	d9a9      	bls.n	80090f2 <HAL_PCD_Init+0x126>
  }

  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	603b      	str	r3, [r7, #0]
 80091a4:	687e      	ldr	r6, [r7, #4]
 80091a6:	466d      	mov	r5, sp
 80091a8:	f106 0410 	add.w	r4, r6, #16
 80091ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80091ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80091b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80091b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80091b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80091b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80091bc:	1d33      	adds	r3, r6, #4
 80091be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80091c0:	6838      	ldr	r0, [r7, #0]
 80091c2:	f005 fa4d 	bl	800e660 <USB_DevInit>

  hpcd->USB_Address = 0;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  hpcd->State= HAL_PCD_STATE_READY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f883 2385 	strb.w	r2, [r3, #901]	; 0x385
  
   /* Activate LPM */
  if (hpcd->Init.lpm_enable ==1)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d102      	bne.n	80091e4 <HAL_PCD_Init+0x218>
  {
    HAL_PCDEx_ActivateLPM(hpcd);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f001 f8f9 	bl	800a3d6 <HAL_PCDEx_ActivateLPM>
  }  
  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable ==1)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d102      	bne.n	80091f2 <HAL_PCD_Init+0x226>
  {
    HAL_PCDEx_ActivateBCD(hpcd);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f001 f916 	bl	800a41e <HAL_PCDEx_ActivateBCD>
  }
  USB_DevDisconnect (hpcd->Instance);  
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f006 f9e8 	bl	800f5cc <USB_DevDisconnect>
  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009206 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b082      	sub	sp, #8
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d101      	bne.n	8009218 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e00e      	b.n	8009236 <HAL_PCD_DeInit+0x30>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2203      	movs	r2, #3
 800921c:	f883 2385 	strb.w	r2, [r3, #901]	; 0x385
  
  /* Stop Device */
  HAL_PCD_Stop(hpcd);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f82e 	bl	8009282 <HAL_PCD_Stop>
    
  /* DeInit the low level hardware */
  HAL_PCD_MspDeInit(hpcd);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7fd fc40 	bl	8006aac <HAL_PCD_MspDeInit>
  
  hpcd->State = HAL_PCD_STATE_RESET; 
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 2385 	strb.w	r2, [r3, #901]	; 0x385
  
  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 800923e:	b580      	push	{r7, lr}
 8009240:	b082      	sub	sp, #8
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800924c:	2b01      	cmp	r3, #1
 800924e:	d101      	bne.n	8009254 <HAL_PCD_Start+0x16>
 8009250:	2302      	movs	r3, #2
 8009252:	e012      	b.n	800927a <HAL_PCD_Start+0x3c>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  USB_DevConnect (hpcd->Instance);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4618      	mov	r0, r3
 8009262:	f006 f99c 	bl	800f59e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4618      	mov	r0, r3
 800926c:	f005 f9af 	bl	800e5ce <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <HAL_PCD_Stop>:
  * @brief  Stop The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{ 
 8009282:	b580      	push	{r7, lr}
 8009284:	b082      	sub	sp, #8
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8009290:	2b01      	cmp	r3, #1
 8009292:	d101      	bne.n	8009298 <HAL_PCD_Stop+0x16>
 8009294:	2302      	movs	r3, #2
 8009296:	e017      	b.n	80092c8 <HAL_PCD_Stop+0x46>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  __HAL_PCD_DISABLE(hpcd);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f005 f9a3 	bl	800e5f0 <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f006 f90b 	bl	800f4ca <USB_StopDevice>
  USB_DevDisconnect (hpcd->Instance);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4618      	mov	r0, r3
 80092ba:	f006 f987 	bl	800f5cc <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd); 
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  return HAL_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b08c      	sub	sp, #48	; 0x30
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	623b      	str	r3, [r7, #32]
  uint32_t index = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 80092de:	2300      	movs	r3, #0
 80092e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092e2:	2300      	movs	r3, #0
 80092e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80092e6:	2300      	movs	r3, #0
 80092e8:	61fb      	str	r3, [r7, #28]
 80092ea:	2300      	movs	r3, #0
 80092ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0U, temp = 0U;
 80092ee:	2300      	movs	r3, #0
 80092f0:	61bb      	str	r3, [r7, #24]
 80092f2:	2300      	movs	r3, #0
 80092f4:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep = NULL;
 80092f6:	2300      	movs	r3, #0
 80092f8:	613b      	str	r3, [r7, #16]
  uint32_t hclk = 80000000;
 80092fa:	4b6b      	ldr	r3, [pc, #428]	; (80094a8 <HAL_PCD_IRQHandler+0x1d8>)
 80092fc:	60fb      	str	r3, [r7, #12]
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4618      	mov	r0, r3
 8009304:	f006 fa0a 	bl	800f71c <USB_GetMode>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	f040 850c 	bne.w	8009d28 <HAL_PCD_IRQHandler+0xa58>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4618      	mov	r0, r3
 8009316:	f006 f970 	bl	800f5fa <USB_ReadInterrupts>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 8502 	beq.w	8009d26 <HAL_PCD_IRQHandler+0xa56>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4618      	mov	r0, r3
 8009328:	f006 f967 	bl	800f5fa <USB_ReadInterrupts>
 800932c:	4603      	mov	r3, r0
 800932e:	f003 0302 	and.w	r3, r3, #2
 8009332:	2b02      	cmp	r3, #2
 8009334:	d107      	bne.n	8009346 <HAL_PCD_IRQHandler+0x76>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	6812      	ldr	r2, [r2, #0]
 800933e:	6952      	ldr	r2, [r2, #20]
 8009340:	f002 0202 	and.w	r2, r2, #2
 8009344:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4618      	mov	r0, r3
 800934c:	f006 f955 	bl	800f5fa <USB_ReadInterrupts>
 8009350:	4603      	mov	r3, r0
 8009352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009356:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800935a:	f040 8135 	bne.w	80095c8 <HAL_PCD_IRQHandler+0x2f8>
    {
      epnum = 0;
 800935e:	2300      	movs	r3, #0
 8009360:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4618      	mov	r0, r3
 8009368:	f006 f95c 	bl	800f624 <USB_ReadDevAllOutEpInterrupt>
 800936c:	62b8      	str	r0, [r7, #40]	; 0x28
      
      while ( ep_intr )
 800936e:	e127      	b.n	80095c0 <HAL_PCD_IRQHandler+0x2f0>
      {
        if (ep_intr & 0x1)
 8009370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 811c 	beq.w	80095b4 <HAL_PCD_IRQHandler+0x2e4>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009382:	b2d2      	uxtb	r2, r2
 8009384:	4611      	mov	r1, r2
 8009386:	4618      	mov	r0, r3
 8009388:	f006 f97c 	bl	800f684 <USB_ReadDevOutEPInterrupt>
 800938c:	61f8      	str	r0, [r7, #28]
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	2b00      	cmp	r3, #0
 8009396:	f000 80ee 	beq.w	8009576 <HAL_PCD_IRQHandler+0x2a6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800939a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939c:	015a      	lsls	r2, r3, #5
 800939e:	6a3b      	ldr	r3, [r7, #32]
 80093a0:	4413      	add	r3, r2
 80093a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a6:	461a      	mov	r2, r3
 80093a8:	2301      	movs	r3, #1
 80093aa:	6093      	str	r3, [r2, #8]
            
            /* setup/out transaction management for Core ID 310A */
            if (USBx->GSNPSID == USB_OTG_CORE_ID_310A)
 80093ac:	6a3b      	ldr	r3, [r7, #32]
 80093ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b0:	4a3e      	ldr	r2, [pc, #248]	; (80094ac <HAL_PCD_IRQHandler+0x1dc>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d17c      	bne.n	80094b0 <HAL_PCD_IRQHandler+0x1e0>
            {
              if (!(USBx_OUTEP(0)->DOEPINT & (0x1 << 15)))
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d162      	bne.n	800948c <HAL_PCD_IRQHandler+0x1bc>
                {
                  if (hpcd->Init.dma_enable == 1)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d13c      	bne.n	8009448 <HAL_PCD_IRQHandler+0x178>
                  {
                  	hpcd->OUT_ep[epnum].xfer_count =
                                                 hpcd->OUT_ep[epnum].maxpacket -
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093d2:	4613      	mov	r3, r2
 80093d4:	00db      	lsls	r3, r3, #3
 80093d6:	1a9b      	subs	r3, r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	440b      	add	r3, r1
 80093dc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80093e0:	681a      	ldr	r2, [r3, #0]
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80093e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e4:	0159      	lsls	r1, r3, #5
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	440b      	add	r3, r1
 80093ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
                                                 hpcd->OUT_ep[epnum].maxpacket -
 80093f4:	1ad1      	subs	r1, r2, r3
                  	hpcd->OUT_ep[epnum].xfer_count =
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093fa:	4613      	mov	r3, r2
 80093fc:	00db      	lsls	r3, r3, #3
 80093fe:	1a9b      	subs	r3, r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4403      	add	r3, r0
 8009404:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009408:	6019      	str	r1, [r3, #0]

                    hpcd->OUT_ep[epnum].xfer_buff +=
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800940e:	4613      	mov	r3, r2
 8009410:	00db      	lsls	r3, r3, #3
 8009412:	1a9b      	subs	r3, r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	440b      	add	r3, r1
 8009418:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800941c:	6819      	ldr	r1, [r3, #0]
                                                  hpcd->OUT_ep[epnum].maxpacket;
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009422:	4613      	mov	r3, r2
 8009424:	00db      	lsls	r3, r3, #3
 8009426:	1a9b      	subs	r3, r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4403      	add	r3, r0
 800942c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009430:	681b      	ldr	r3, [r3, #0]
                    hpcd->OUT_ep[epnum].xfer_buff +=
 8009432:	4419      	add	r1, r3
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009438:	4613      	mov	r3, r2
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	1a9b      	subs	r3, r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4403      	add	r3, r0
 8009442:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009446:	6019      	str	r1, [r3, #0]
                  }

                HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	b2db      	uxtb	r3, r3
 800944c:	4619      	mov	r1, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7fd fb56 	bl	8006b00 <HAL_PCD_DataOutStageCallback>
              
              if(hpcd->Init.dma_enable == 1)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d117      	bne.n	800948c <HAL_PCD_IRQHandler+0x1bc>
              {
                  if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	2b00      	cmp	r3, #0
 8009460:	d114      	bne.n	800948c <HAL_PCD_IRQHandler+0x1bc>
 8009462:	6879      	ldr	r1, [r7, #4]
 8009464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009466:	4613      	mov	r3, r2
 8009468:	00db      	lsls	r3, r3, #3
 800946a:	1a9b      	subs	r3, r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	440b      	add	r3, r1
 8009470:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d108      	bne.n	800948c <HAL_PCD_IRQHandler+0x1bc>
                  {
                    /* this is ZLP, so prepare EP0 for next setup */
                    USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6818      	ldr	r0, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8009484:	461a      	mov	r2, r3
 8009486:	2101      	movs	r1, #1
 8009488:	f006 f98c 	bl	800f7a4 <USB_EP0_OutStart>
                  }
                }
              }

              /* Clear the SetPktRcvd flag*/
              USBx_OUTEP(0)->DOEPINT |= (0x1 << 15) | (0x1 << 5);
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009492:	461a      	mov	r2, r3
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094a0:	f043 0320 	orr.w	r3, r3, #32
 80094a4:	6093      	str	r3, [r2, #8]
 80094a6:	e066      	b.n	8009576 <HAL_PCD_IRQHandler+0x2a6>
 80094a8:	04c4b400 	.word	0x04c4b400
 80094ac:	4f54310a 	.word	0x4f54310a
            }
            else
            {
              if (hpcd->Init.dma_enable == 1)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d13c      	bne.n	8009532 <HAL_PCD_IRQHandler+0x262>
              {
                hpcd->OUT_ep[epnum].xfer_count =
                                               hpcd->OUT_ep[epnum].maxpacket -
 80094b8:	6879      	ldr	r1, [r7, #4]
 80094ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094bc:	4613      	mov	r3, r2
 80094be:	00db      	lsls	r3, r3, #3
 80094c0:	1a9b      	subs	r3, r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	440b      	add	r3, r1
 80094c6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80094ca:	681a      	ldr	r2, [r3, #0]
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80094cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ce:	0159      	lsls	r1, r3, #5
 80094d0:	6a3b      	ldr	r3, [r7, #32]
 80094d2:	440b      	add	r3, r1
 80094d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	f3c3 0312 	ubfx	r3, r3, #0, #19
                                               hpcd->OUT_ep[epnum].maxpacket -
 80094de:	1ad1      	subs	r1, r2, r3
                hpcd->OUT_ep[epnum].xfer_count =
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094e4:	4613      	mov	r3, r2
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	1a9b      	subs	r3, r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4403      	add	r3, r0
 80094ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80094f2:	6019      	str	r1, [r3, #0]
                hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094f8:	4613      	mov	r3, r2
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	1a9b      	subs	r3, r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	440b      	add	r3, r1
 8009502:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009506:	6819      	ldr	r1, [r3, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800950c:	4613      	mov	r3, r2
 800950e:	00db      	lsls	r3, r3, #3
 8009510:	1a9b      	subs	r3, r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4403      	add	r3, r0
 8009516:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4419      	add	r1, r3
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009522:	4613      	mov	r3, r2
 8009524:	00db      	lsls	r3, r3, #3
 8009526:	1a9b      	subs	r3, r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4403      	add	r3, r0
 800952c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009530:	6019      	str	r1, [r3, #0]
              }
              
              HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	b2db      	uxtb	r3, r3
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7fd fae1 	bl	8006b00 <HAL_PCD_DataOutStageCallback>
              
              if(hpcd->Init.dma_enable == 1)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	2b01      	cmp	r3, #1
 8009544:	d117      	bne.n	8009576 <HAL_PCD_IRQHandler+0x2a6>
              {
                if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 8009546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009548:	2b00      	cmp	r3, #0
 800954a:	d114      	bne.n	8009576 <HAL_PCD_IRQHandler+0x2a6>
 800954c:	6879      	ldr	r1, [r7, #4]
 800954e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009550:	4613      	mov	r3, r2
 8009552:	00db      	lsls	r3, r3, #3
 8009554:	1a9b      	subs	r3, r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	440b      	add	r3, r1
 800955a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d108      	bne.n	8009576 <HAL_PCD_IRQHandler+0x2a6>
                {
                  /* this is ZLP, so prepare EP0 for next setup */
                  USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6818      	ldr	r0, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f503 7362 	add.w	r3, r3, #904	; 0x388
 800956e:	461a      	mov	r2, r3
 8009570:	2101      	movs	r1, #1
 8009572:	f006 f917 	bl	800f7a4 <USB_EP0_OutStart>
                }              
              }
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	f003 0308 	and.w	r3, r3, #8
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00b      	beq.n	8009598 <HAL_PCD_IRQHandler+0x2c8>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7fd faab 	bl	8006adc <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009588:	015a      	lsls	r2, r3, #5
 800958a:	6a3b      	ldr	r3, [r7, #32]
 800958c:	4413      	add	r3, r2
 800958e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009592:	461a      	mov	r2, r3
 8009594:	2308      	movs	r3, #8
 8009596:	6093      	str	r3, [r2, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	f003 0310 	and.w	r3, r3, #16
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d008      	beq.n	80095b4 <HAL_PCD_IRQHandler+0x2e4>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80095a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a4:	015a      	lsls	r2, r3, #5
 80095a6:	6a3b      	ldr	r3, [r7, #32]
 80095a8:	4413      	add	r3, r2
 80095aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ae:	461a      	mov	r2, r3
 80095b0:	2310      	movs	r3, #16
 80095b2:	6093      	str	r3, [r2, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 80095b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b6:	3301      	adds	r3, #1
 80095b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 80095ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095bc:	085b      	lsrs	r3, r3, #1
 80095be:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 80095c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f47f aed4 	bne.w	8009370 <HAL_PCD_IRQHandler+0xa0>
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f006 f814 	bl	800f5fa <USB_ReadInterrupts>
 80095d2:	4603      	mov	r3, r0
 80095d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095dc:	f040 80c3 	bne.w	8009766 <HAL_PCD_IRQHandler+0x496>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4618      	mov	r0, r3
 80095e6:	f006 f835 	bl	800f654 <USB_ReadDevAllInEpInterrupt>
 80095ea:	62b8      	str	r0, [r7, #40]	; 0x28
      
      epnum = 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	627b      	str	r3, [r7, #36]	; 0x24
      
      while ( ep_intr )
 80095f0:	e0b5      	b.n	800975e <HAL_PCD_IRQHandler+0x48e>
      {
        if (ep_intr & 0x1) /* In ITR */
 80095f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f4:	f003 0301 	and.w	r3, r3, #1
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f000 80aa 	beq.w	8009752 <HAL_PCD_IRQHandler+0x482>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009604:	b2d2      	uxtb	r2, r2
 8009606:	4611      	mov	r1, r2
 8009608:	4618      	mov	r0, r3
 800960a:	f006 f857 	bl	800f6bc <USB_ReadDevInEPInterrupt>
 800960e:	61f8      	str	r0, [r7, #28]
          
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	f003 0301 	and.w	r3, r3, #1
 8009616:	2b00      	cmp	r3, #0
 8009618:	d05a      	beq.n	80096d0 <HAL_PCD_IRQHandler+0x400>
          {
            fifoemptymsk = 0x1 << epnum;
 800961a:	2201      	movs	r2, #1
 800961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961e:	fa02 f303 	lsl.w	r3, r2, r3
 8009622:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009624:	6a3b      	ldr	r3, [r7, #32]
 8009626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800962a:	4619      	mov	r1, r3
 800962c:	6a3b      	ldr	r3, [r7, #32]
 800962e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	43db      	mvns	r3, r3
 8009638:	4013      	ands	r3, r2
 800963a:	634b      	str	r3, [r1, #52]	; 0x34
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800963c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963e:	015a      	lsls	r2, r3, #5
 8009640:	6a3b      	ldr	r3, [r7, #32]
 8009642:	4413      	add	r3, r2
 8009644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009648:	461a      	mov	r2, r3
 800964a:	2301      	movs	r3, #1
 800964c:	6093      	str	r3, [r2, #8]
            
            if (hpcd->Init.dma_enable == 1)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d11b      	bne.n	800968e <HAL_PCD_IRQHandler+0x3be>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8009656:	6879      	ldr	r1, [r7, #4]
 8009658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800965a:	4613      	mov	r3, r2
 800965c:	00db      	lsls	r3, r3, #3
 800965e:	1a9b      	subs	r3, r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	440b      	add	r3, r1
 8009664:	3348      	adds	r3, #72	; 0x48
 8009666:	6819      	ldr	r1, [r3, #0]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800966c:	4613      	mov	r3, r2
 800966e:	00db      	lsls	r3, r3, #3
 8009670:	1a9b      	subs	r3, r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4403      	add	r3, r0
 8009676:	3344      	adds	r3, #68	; 0x44
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4419      	add	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009680:	4613      	mov	r3, r2
 8009682:	00db      	lsls	r3, r3, #3
 8009684:	1a9b      	subs	r3, r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4403      	add	r3, r0
 800968a:	3348      	adds	r3, #72	; 0x48
 800968c:	6019      	str	r1, [r3, #0]
            }
            
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 800968e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009690:	b2db      	uxtb	r3, r3
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7fd fa4e 	bl	8006b36 <HAL_PCD_DataInStageCallback>
            
            if (hpcd->Init.dma_enable == 1)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	691b      	ldr	r3, [r3, #16]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d116      	bne.n	80096d0 <HAL_PCD_IRQHandler+0x400>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 80096a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d113      	bne.n	80096d0 <HAL_PCD_IRQHandler+0x400>
 80096a8:	6879      	ldr	r1, [r7, #4]
 80096aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ac:	4613      	mov	r3, r2
 80096ae:	00db      	lsls	r3, r3, #3
 80096b0:	1a9b      	subs	r3, r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	440b      	add	r3, r1
 80096b6:	3350      	adds	r3, #80	; 0x50
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d108      	bne.n	80096d0 <HAL_PCD_IRQHandler+0x400>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6818      	ldr	r0, [r3, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f503 7362 	add.w	r3, r3, #904	; 0x388
 80096c8:	461a      	mov	r2, r3
 80096ca:	2101      	movs	r1, #1
 80096cc:	f006 f86a 	bl	800f7a4 <USB_EP0_OutStart>
              }
            }           
          }
          if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	f003 0308 	and.w	r3, r3, #8
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d008      	beq.n	80096ec <HAL_PCD_IRQHandler+0x41c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80096da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096dc:	015a      	lsls	r2, r3, #5
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	4413      	add	r3, r2
 80096e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e6:	461a      	mov	r2, r3
 80096e8:	2308      	movs	r3, #8
 80096ea:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	f003 0310 	and.w	r3, r3, #16
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d008      	beq.n	8009708 <HAL_PCD_IRQHandler+0x438>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80096f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f8:	015a      	lsls	r2, r3, #5
 80096fa:	6a3b      	ldr	r3, [r7, #32]
 80096fc:	4413      	add	r3, r2
 80096fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009702:	461a      	mov	r2, r3
 8009704:	2310      	movs	r3, #16
 8009706:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800970e:	2b00      	cmp	r3, #0
 8009710:	d008      	beq.n	8009724 <HAL_PCD_IRQHandler+0x454>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009714:	015a      	lsls	r2, r3, #5
 8009716:	6a3b      	ldr	r3, [r7, #32]
 8009718:	4413      	add	r3, r2
 800971a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800971e:	461a      	mov	r2, r3
 8009720:	2340      	movs	r3, #64	; 0x40
 8009722:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	f003 0302 	and.w	r3, r3, #2
 800972a:	2b00      	cmp	r3, #0
 800972c:	d008      	beq.n	8009740 <HAL_PCD_IRQHandler+0x470>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800972e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009730:	015a      	lsls	r2, r3, #5
 8009732:	6a3b      	ldr	r3, [r7, #32]
 8009734:	4413      	add	r3, r2
 8009736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800973a:	461a      	mov	r2, r3
 800973c:	2302      	movs	r3, #2
 800973e:	6093      	str	r3, [r2, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009746:	2b00      	cmp	r3, #0
 8009748:	d003      	beq.n	8009752 <HAL_PCD_IRQHandler+0x482>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 800974a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fd57 	bl	800a200 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009754:	3301      	adds	r3, #1
 8009756:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 8009758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975a:	085b      	lsrs	r3, r3, #1
 800975c:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 800975e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009760:	2b00      	cmp	r3, #0
 8009762:	f47f af46 	bne.w	80095f2 <HAL_PCD_IRQHandler+0x322>
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4618      	mov	r0, r3
 800976c:	f005 ff45 	bl	800f5fa <USB_ReadInterrupts>
 8009770:	4603      	mov	r3, r0
 8009772:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800977a:	d123      	bne.n	80097c4 <HAL_PCD_IRQHandler+0x4f4>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800977c:	6a3b      	ldr	r3, [r7, #32]
 800977e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009782:	461a      	mov	r2, r3
 8009784:	6a3b      	ldr	r3, [r7, #32]
 8009786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	f023 0301 	bic.w	r3, r3, #1
 8009790:	6053      	str	r3, [r2, #4]
      
      if(hpcd->LPM_State == LPM_L1)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8009798:	2b01      	cmp	r3, #1
 800979a:	d108      	bne.n	80097ae <HAL_PCD_IRQHandler+0x4de>
      {
        hpcd->LPM_State = LPM_L0;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80097a4:	2100      	movs	r1, #0
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fe51 	bl	800a44e <HAL_PCDEx_LPM_Callback>
 80097ac:	e002      	b.n	80097b4 <HAL_PCD_IRQHandler+0x4e4>
      }
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7fd fa0c 	bl	8006bcc <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	6812      	ldr	r2, [r2, #0]
 80097bc:	6952      	ldr	r2, [r2, #20]
 80097be:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80097c2:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f005 ff16 	bl	800f5fa <USB_ReadInterrupts>
 80097ce:	4603      	mov	r3, r0
 80097d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097d8:	d112      	bne.n	8009800 <HAL_PCD_IRQHandler+0x530>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80097da:	6a3b      	ldr	r3, [r7, #32]
 80097dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d102      	bne.n	80097f0 <HAL_PCD_IRQHandler+0x520>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7fd f9e0 	bl	8006bb0 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	6812      	ldr	r2, [r2, #0]
 80097f8:	6952      	ldr	r2, [r2, #20]
 80097fa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80097fe:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */ 
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4618      	mov	r0, r3
 8009806:	f005 fef8 	bl	800f5fa <USB_ReadInterrupts>
 800980a:	4603      	mov	r3, r0
 800980c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009814:	d121      	bne.n	800985a <HAL_PCD_IRQHandler+0x58a>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	6812      	ldr	r2, [r2, #0]
 800981e:	6952      	ldr	r2, [r2, #20]
 8009820:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009824:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800982c:	2b00      	cmp	r3, #0
 800982e:	d111      	bne.n	8009854 <HAL_PCD_IRQHandler+0x584>
      {   
        hpcd->LPM_State = LPM_L1;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800983e:	089b      	lsrs	r3, r3, #2
 8009840:	f003 020f 	and.w	r2, r3, #15
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800984a:	2101      	movs	r1, #1
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fdfe 	bl	800a44e <HAL_PCDEx_LPM_Callback>
 8009852:	e002      	b.n	800985a <HAL_PCD_IRQHandler+0x58a>
      }
      else
      {
        HAL_PCD_SuspendCallback(hpcd);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f7fd f9ab 	bl	8006bb0 <HAL_PCD_SuspendCallback>
      }
    }
    
    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4618      	mov	r0, r3
 8009860:	f005 fecb 	bl	800f5fa <USB_ReadInterrupts>
 8009864:	4603      	mov	r3, r0
 8009866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800986a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800986e:	f040 8091 	bne.w	8009994 <HAL_PCD_IRQHandler+0x6c4>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8009872:	6a3b      	ldr	r3, [r7, #32]
 8009874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009878:	461a      	mov	r2, r3
 800987a:	6a3b      	ldr	r3, [r7, #32]
 800987c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f023 0301 	bic.w	r3, r3, #1
 8009886:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2100      	movs	r1, #0
 800988e:	4618      	mov	r0, r3
 8009890:	f005 f814 	bl	800e8bc <USB_FlushTxFifo>
      
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8009894:	2300      	movs	r3, #0
 8009896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009898:	e014      	b.n	80098c4 <HAL_PCD_IRQHandler+0x5f4>
      {
        USBx_INEP(index)->DIEPINT = 0xFF;
 800989a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	6a3b      	ldr	r3, [r7, #32]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a6:	461a      	mov	r2, r3
 80098a8:	23ff      	movs	r3, #255	; 0xff
 80098aa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(index)->DOEPINT = 0xFF;
 80098ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ae:	015a      	lsls	r2, r3, #5
 80098b0:	6a3b      	ldr	r3, [r7, #32]
 80098b2:	4413      	add	r3, r2
 80098b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098b8:	461a      	mov	r2, r3
 80098ba:	23ff      	movs	r3, #255	; 0xff
 80098bc:	6093      	str	r3, [r2, #8]
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80098be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c0:	3301      	adds	r3, #1
 80098c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685a      	ldr	r2, [r3, #4]
 80098c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d8e5      	bhi.n	800989a <HAL_PCD_IRQHandler+0x5ca>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80098ce:	6a3b      	ldr	r3, [r7, #32]
 80098d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d4:	461a      	mov	r2, r3
 80098d6:	f04f 33ff 	mov.w	r3, #4294967295
 80098da:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e2:	461a      	mov	r2, r3
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ea:	69db      	ldr	r3, [r3, #28]
 80098ec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80098f0:	61d3      	str	r3, [r2, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d018      	beq.n	800992c <HAL_PCD_IRQHandler+0x65c>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 80098fa:	6a3b      	ldr	r3, [r7, #32]
 80098fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009900:	461a      	mov	r2, r3
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800990c:	f043 030b 	orr.w	r3, r3, #11
 8009910:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800991a:	461a      	mov	r2, r3
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009924:	f043 030b 	orr.w	r3, r3, #11
 8009928:	6453      	str	r3, [r2, #68]	; 0x44
 800992a:	e015      	b.n	8009958 <HAL_PCD_IRQHandler+0x688>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 800992c:	6a3b      	ldr	r3, [r7, #32]
 800992e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009932:	461a      	mov	r2, r3
 8009934:	6a3b      	ldr	r3, [r7, #32]
 8009936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800993a:	695b      	ldr	r3, [r3, #20]
 800993c:	f043 030b 	orr.w	r3, r3, #11
 8009940:	6153      	str	r3, [r2, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009948:	461a      	mov	r2, r3
 800994a:	6a3b      	ldr	r3, [r7, #32]
 800994c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	f043 030b 	orr.w	r3, r3, #11
 8009956:	6113      	str	r3, [r2, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009958:	6a3b      	ldr	r3, [r7, #32]
 800995a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800995e:	461a      	mov	r2, r3
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800996c:	6013      	str	r3, [r2, #0]
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6818      	ldr	r0, [r3, #0]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	b2d9      	uxtb	r1, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f503 7362 	add.w	r3, r3, #904	; 0x388
 800997e:	461a      	mov	r2, r3
 8009980:	f005 ff10 	bl	800f7a4 <USB_EP0_OutStart>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	6812      	ldr	r2, [r2, #0]
 800998c:	6952      	ldr	r2, [r2, #20]
 800998e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009992:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4618      	mov	r0, r3
 800999a:	f005 fe2e 	bl	800f5fa <USB_ReadInterrupts>
 800999e:	4603      	mov	r3, r0
 80099a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099a8:	f040 80c2 	bne.w	8009b30 <HAL_PCD_IRQHandler+0x860>
    {
      USB_ActivateSetup(hpcd->Instance);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4618      	mov	r0, r3
 80099b2:	f005 fec1 	bl	800f738 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	6812      	ldr	r2, [r2, #0]
 80099be:	68d2      	ldr	r2, [r2, #12]
 80099c0:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 80099c4:	60da      	str	r2, [r3, #12]
      
      hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2203      	movs	r2, #3
 80099ca:	60da      	str	r2, [r3, #12]
      hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ; 
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2240      	movs	r2, #64	; 0x40
 80099d0:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */

      /* Get hclk frequency value */
      hclk = HAL_RCC_GetHCLKFreq();
 80099d2:	f001 f9d7 	bl	800ad84 <HAL_RCC_GetHCLKFreq>
 80099d6:	60f8      	str	r0, [r7, #12]
    
      if((hclk >= 14200000)&&(hclk < 15000000))
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	4a7b      	ldr	r2, [pc, #492]	; (8009bc8 <HAL_PCD_IRQHandler+0x8f8>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d90c      	bls.n	80099fa <HAL_PCD_IRQHandler+0x72a>
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	4a7a      	ldr	r2, [pc, #488]	; (8009bcc <HAL_PCD_IRQHandler+0x8fc>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d808      	bhi.n	80099fa <HAL_PCD_IRQHandler+0x72a>
      {
        /* hclk Clock Range between 14.2-15 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	6812      	ldr	r2, [r2, #0]
 80099f0:	68d2      	ldr	r2, [r2, #12]
 80099f2:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 80099f6:	60da      	str	r2, [r3, #12]
 80099f8:	e08f      	b.n	8009b1a <HAL_PCD_IRQHandler+0x84a>
      }
      
      else if((hclk >= 15000000)&&(hclk < 16000000))
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	4a73      	ldr	r2, [pc, #460]	; (8009bcc <HAL_PCD_IRQHandler+0x8fc>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d90c      	bls.n	8009a1c <HAL_PCD_IRQHandler+0x74c>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	4a72      	ldr	r2, [pc, #456]	; (8009bd0 <HAL_PCD_IRQHandler+0x900>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d808      	bhi.n	8009a1c <HAL_PCD_IRQHandler+0x74c>
      {
        /* hclk Clock Range between 15-16 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	6812      	ldr	r2, [r2, #0]
 8009a12:	68d2      	ldr	r2, [r2, #12]
 8009a14:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8009a18:	60da      	str	r2, [r3, #12]
 8009a1a:	e07e      	b.n	8009b1a <HAL_PCD_IRQHandler+0x84a>
      }
      
      else if((hclk >= 16000000)&&(hclk < 17200000))
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	4a6c      	ldr	r2, [pc, #432]	; (8009bd0 <HAL_PCD_IRQHandler+0x900>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d90c      	bls.n	8009a3e <HAL_PCD_IRQHandler+0x76e>
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	4a6b      	ldr	r2, [pc, #428]	; (8009bd4 <HAL_PCD_IRQHandler+0x904>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d808      	bhi.n	8009a3e <HAL_PCD_IRQHandler+0x76e>
      {
        /* hclk Clock Range between 16-17.2 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	6812      	ldr	r2, [r2, #0]
 8009a34:	68d2      	ldr	r2, [r2, #12]
 8009a36:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8009a3a:	60da      	str	r2, [r3, #12]
 8009a3c:	e06d      	b.n	8009b1a <HAL_PCD_IRQHandler+0x84a>
      }
      
      else if((hclk >= 17200000)&&(hclk < 18500000))
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	4a64      	ldr	r2, [pc, #400]	; (8009bd4 <HAL_PCD_IRQHandler+0x904>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d90c      	bls.n	8009a60 <HAL_PCD_IRQHandler+0x790>
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	4a63      	ldr	r2, [pc, #396]	; (8009bd8 <HAL_PCD_IRQHandler+0x908>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d808      	bhi.n	8009a60 <HAL_PCD_IRQHandler+0x790>
      {
        /* hclk Clock Range between 17.2-18.5 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	6812      	ldr	r2, [r2, #0]
 8009a56:	68d2      	ldr	r2, [r2, #12]
 8009a58:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8009a5c:	60da      	str	r2, [r3, #12]
 8009a5e:	e05c      	b.n	8009b1a <HAL_PCD_IRQHandler+0x84a>
      }
      
      else if((hclk >= 18500000)&&(hclk < 20000000))
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4a5d      	ldr	r2, [pc, #372]	; (8009bd8 <HAL_PCD_IRQHandler+0x908>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d90c      	bls.n	8009a82 <HAL_PCD_IRQHandler+0x7b2>
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	4a5c      	ldr	r2, [pc, #368]	; (8009bdc <HAL_PCD_IRQHandler+0x90c>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d808      	bhi.n	8009a82 <HAL_PCD_IRQHandler+0x7b2>
      {
        /* hclk Clock Range between 18.5-20 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	6812      	ldr	r2, [r2, #0]
 8009a78:	68d2      	ldr	r2, [r2, #12]
 8009a7a:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8009a7e:	60da      	str	r2, [r3, #12]
 8009a80:	e04b      	b.n	8009b1a <HAL_PCD_IRQHandler+0x84a>
      }
      
      else if((hclk >= 20000000)&&(hclk < 21800000))
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	4a55      	ldr	r2, [pc, #340]	; (8009bdc <HAL_PCD_IRQHandler+0x90c>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d90c      	bls.n	8009aa4 <HAL_PCD_IRQHandler+0x7d4>
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	4a54      	ldr	r2, [pc, #336]	; (8009be0 <HAL_PCD_IRQHandler+0x910>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d808      	bhi.n	8009aa4 <HAL_PCD_IRQHandler+0x7d4>
      {
        /* hclk Clock Range between 20-21.8 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	6812      	ldr	r2, [r2, #0]
 8009a9a:	68d2      	ldr	r2, [r2, #12]
 8009a9c:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8009aa0:	60da      	str	r2, [r3, #12]
 8009aa2:	e03a      	b.n	8009b1a <HAL_PCD_IRQHandler+0x84a>
      }
      
      else if((hclk >= 21800000)&&(hclk < 24000000))
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	4a4e      	ldr	r2, [pc, #312]	; (8009be0 <HAL_PCD_IRQHandler+0x910>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d90c      	bls.n	8009ac6 <HAL_PCD_IRQHandler+0x7f6>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	4a4d      	ldr	r2, [pc, #308]	; (8009be4 <HAL_PCD_IRQHandler+0x914>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d808      	bhi.n	8009ac6 <HAL_PCD_IRQHandler+0x7f6>
      {
        /* hclk Clock Range between 21.8-24 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	6812      	ldr	r2, [r2, #0]
 8009abc:	68d2      	ldr	r2, [r2, #12]
 8009abe:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8009ac2:	60da      	str	r2, [r3, #12]
 8009ac4:	e029      	b.n	8009b1a <HAL_PCD_IRQHandler+0x84a>
      }
      
      else if((hclk >= 24000000)&&(hclk < 27700000))
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	4a46      	ldr	r2, [pc, #280]	; (8009be4 <HAL_PCD_IRQHandler+0x914>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d90c      	bls.n	8009ae8 <HAL_PCD_IRQHandler+0x818>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	4a45      	ldr	r2, [pc, #276]	; (8009be8 <HAL_PCD_IRQHandler+0x918>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d808      	bhi.n	8009ae8 <HAL_PCD_IRQHandler+0x818>
      {
        /* hclk Clock Range between 24-27.7 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	6812      	ldr	r2, [r2, #0]
 8009ade:	68d2      	ldr	r2, [r2, #12]
 8009ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ae4:	60da      	str	r2, [r3, #12]
 8009ae6:	e018      	b.n	8009b1a <HAL_PCD_IRQHandler+0x84a>
      }
      
      else if((hclk >= 27700000)&&(hclk < 32000000))
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	4a3f      	ldr	r2, [pc, #252]	; (8009be8 <HAL_PCD_IRQHandler+0x918>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d90c      	bls.n	8009b0a <HAL_PCD_IRQHandler+0x83a>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	4a3e      	ldr	r2, [pc, #248]	; (8009bec <HAL_PCD_IRQHandler+0x91c>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d808      	bhi.n	8009b0a <HAL_PCD_IRQHandler+0x83a>
      {
        /* hclk Clock Range between 27.7-32 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	6812      	ldr	r2, [r2, #0]
 8009b00:	68d2      	ldr	r2, [r2, #12]
 8009b02:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8009b06:	60da      	str	r2, [r3, #12]
 8009b08:	e007      	b.n	8009b1a <HAL_PCD_IRQHandler+0x84a>
      }
      
      else /* if(hclk >= 32000000) */
      {
        /* hclk Clock Range between 32-80 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	6812      	ldr	r2, [r2, #0]
 8009b12:	68d2      	ldr	r2, [r2, #12]
 8009b14:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 8009b18:	60da      	str	r2, [r3, #12]
      }  
      
      HAL_PCD_ResetCallback(hpcd);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7fd f833 	bl	8006b86 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	6812      	ldr	r2, [r2, #0]
 8009b28:	6952      	ldr	r2, [r2, #20]
 8009b2a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009b2e:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f005 fd60 	bl	800f5fa <USB_ReadInterrupts>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	f003 0310 	and.w	r3, r3, #16
 8009b40:	2b10      	cmp	r3, #16
 8009b42:	d174      	bne.n	8009c2e <HAL_PCD_IRQHandler+0x95e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	6812      	ldr	r2, [r2, #0]
 8009b4c:	6992      	ldr	r2, [r2, #24]
 8009b4e:	f022 0210 	bic.w	r2, r2, #16
 8009b52:	619a      	str	r2, [r3, #24]
      
      temp = USBx->GRXSTSP;
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	6a1b      	ldr	r3, [r3, #32]
 8009b58:	617b      	str	r3, [r7, #20]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	f003 020f 	and.w	r2, r3, #15
 8009b60:	4613      	mov	r3, r2
 8009b62:	00db      	lsls	r3, r3, #3
 8009b64:	1a9b      	subs	r3, r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	4413      	add	r3, r2
 8009b70:	613b      	str	r3, [r7, #16]
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	0c5b      	lsrs	r3, r3, #17
 8009b76:	f003 030f 	and.w	r3, r3, #15
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d138      	bne.n	8009bf0 <HAL_PCD_IRQHandler+0x920>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009b84:	4013      	ands	r3, r2
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d049      	beq.n	8009c1e <HAL_PCD_IRQHandler+0x94e>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	68d9      	ldr	r1, [r3, #12]
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	091b      	lsrs	r3, r3, #4
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	6a38      	ldr	r0, [r7, #32]
 8009b9e:	f005 fb8c 	bl	800f2ba <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	68da      	ldr	r2, [r3, #12]
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	091b      	lsrs	r3, r3, #4
 8009baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009bae:	441a      	add	r2, r3
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	699a      	ldr	r2, [r3, #24]
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	091b      	lsrs	r3, r3, #4
 8009bbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009bc0:	441a      	add	r2, r3
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	619a      	str	r2, [r3, #24]
 8009bc6:	e02a      	b.n	8009c1e <HAL_PCD_IRQHandler+0x94e>
 8009bc8:	00d8acbf 	.word	0x00d8acbf
 8009bcc:	00e4e1bf 	.word	0x00e4e1bf
 8009bd0:	00f423ff 	.word	0x00f423ff
 8009bd4:	0106737f 	.word	0x0106737f
 8009bd8:	011a499f 	.word	0x011a499f
 8009bdc:	01312cff 	.word	0x01312cff
 8009be0:	014ca43f 	.word	0x014ca43f
 8009be4:	016e35ff 	.word	0x016e35ff
 8009be8:	01a6ab1f 	.word	0x01a6ab1f
 8009bec:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	0c5b      	lsrs	r3, r3, #17
 8009bf4:	f003 030f 	and.w	r3, r3, #15
 8009bf8:	2b06      	cmp	r3, #6
 8009bfa:	d110      	bne.n	8009c1e <HAL_PCD_IRQHandler+0x94e>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8009c02:	2208      	movs	r2, #8
 8009c04:	4619      	mov	r1, r3
 8009c06:	6a38      	ldr	r0, [r7, #32]
 8009c08:	f005 fb57 	bl	800f2ba <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	699a      	ldr	r2, [r3, #24]
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	091b      	lsrs	r3, r3, #4
 8009c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c18:	441a      	add	r2, r3
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	6812      	ldr	r2, [r2, #0]
 8009c26:	6992      	ldr	r2, [r2, #24]
 8009c28:	f042 0210 	orr.w	r2, r2, #16
 8009c2c:	619a      	str	r2, [r3, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4618      	mov	r0, r3
 8009c34:	f005 fce1 	bl	800f5fa <USB_ReadInterrupts>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	f003 0308 	and.w	r3, r3, #8
 8009c3e:	2b08      	cmp	r3, #8
 8009c40:	d10a      	bne.n	8009c58 <HAL_PCD_IRQHandler+0x988>
    {
      HAL_PCD_SOFCallback(hpcd);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f7fc ff91 	bl	8006b6a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	6812      	ldr	r2, [r2, #0]
 8009c50:	6952      	ldr	r2, [r2, #20]
 8009c52:	f002 0208 	and.w	r2, r2, #8
 8009c56:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f005 fccc 	bl	800f5fa <USB_ReadInterrupts>
 8009c62:	4603      	mov	r3, r0
 8009c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c6c:	d10d      	bne.n	8009c8a <HAL_PCD_IRQHandler+0x9ba>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	4619      	mov	r1, r3
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7fc ffc9 	bl	8006c0c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	6812      	ldr	r2, [r2, #0]
 8009c82:	6952      	ldr	r2, [r2, #20]
 8009c84:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009c88:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f005 fcb3 	bl	800f5fa <USB_ReadInterrupts>
 8009c94:	4603      	mov	r3, r0
 8009c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c9e:	d10d      	bne.n	8009cbc <HAL_PCD_IRQHandler+0x9ec>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7fc ff9e 	bl	8006be8 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	6812      	ldr	r2, [r2, #0]
 8009cb4:	6952      	ldr	r2, [r2, #20]
 8009cb6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009cba:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f005 fc9a 	bl	800f5fa <USB_ReadInterrupts>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cd0:	d10a      	bne.n	8009ce8 <HAL_PCD_IRQHandler+0xa18>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7fc ffac 	bl	8006c30 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	6812      	ldr	r2, [r2, #0]
 8009ce0:	6952      	ldr	r2, [r2, #20]
 8009ce2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009ce6:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4618      	mov	r0, r3
 8009cee:	f005 fc84 	bl	800f5fa <USB_ReadInterrupts>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	f003 0304 	and.w	r3, r3, #4
 8009cf8:	2b04      	cmp	r3, #4
 8009cfa:	d115      	bne.n	8009d28 <HAL_PCD_IRQHandler+0xa58>
    {
      temp = hpcd->Instance->GOTGINT;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	617b      	str	r3, [r7, #20]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	f003 0304 	and.w	r3, r3, #4
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d002      	beq.n	8009d14 <HAL_PCD_IRQHandler+0xa44>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f7fc ff9c 	bl	8006c4c <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	6812      	ldr	r2, [r2, #0]
 8009d1c:	6851      	ldr	r1, [r2, #4]
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	430a      	orrs	r2, r1
 8009d22:	605a      	str	r2, [r3, #4]
 8009d24:	e000      	b.n	8009d28 <HAL_PCD_IRQHandler+0xa58>
      return;
 8009d26:	bf00      	nop
    }
  }
}
 8009d28:	3730      	adds	r7, #48	; 0x30
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop

08009d30 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d101      	bne.n	8009d4a <HAL_PCD_SetAddress+0x1a>
 8009d46:	2302      	movs	r3, #2
 8009d48:	e013      	b.n	8009d72 <HAL_PCD_SetAddress+0x42>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  hpcd->USB_Address = address;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	78fa      	ldrb	r2, [r7, #3]
 8009d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  USB_SetDevAddress(hpcd->Instance, address);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	78fa      	ldrb	r2, [r7, #3]
 8009d60:	4611      	mov	r1, r2
 8009d62:	4618      	mov	r0, r3
 8009d64:	f005 fbf5 	bl	800f552 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  return HAL_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3708      	adds	r7, #8
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b084      	sub	sp, #16
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	4608      	mov	r0, r1
 8009d84:	4611      	mov	r1, r2
 8009d86:	461a      	mov	r2, r3
 8009d88:	4603      	mov	r3, r0
 8009d8a:	70fb      	strb	r3, [r7, #3]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	803b      	strh	r3, [r7, #0]
 8009d90:	4613      	mov	r3, r2
 8009d92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009d94:	2300      	movs	r3, #0
 8009d96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80) == 0x80)
 8009d9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	da0c      	bge.n	8009dbe <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009da4:	78fb      	ldrb	r3, [r7, #3]
 8009da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009daa:	4613      	mov	r3, r2
 8009dac:	00db      	lsls	r3, r3, #3
 8009dae:	1a9b      	subs	r3, r3, r2
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	3338      	adds	r3, #56	; 0x38
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	4413      	add	r3, r2
 8009db8:	3304      	adds	r3, #4
 8009dba:	60fb      	str	r3, [r7, #12]
 8009dbc:	e00b      	b.n	8009dd6 <HAL_PCD_EP_Open+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8009dbe:	78fb      	ldrb	r3, [r7, #3]
 8009dc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	00db      	lsls	r3, r3, #3
 8009dc8:	1a9b      	subs	r3, r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8009dd6:	78fb      	ldrb	r3, [r7, #3]
 8009dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ddc:	b2da      	uxtb	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8009de2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	09db      	lsrs	r3, r3, #7
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	461a      	mov	r2, r3
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8009df2:	883a      	ldrh	r2, [r7, #0]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	78ba      	ldrb	r2, [r7, #2]
 8009dfc:	70da      	strb	r2, [r3, #3]
    
  __HAL_LOCK(hpcd);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d101      	bne.n	8009e0c <HAL_PCD_EP_Open+0x92>
 8009e08:	2302      	movs	r3, #2
 8009e0a:	e00e      	b.n	8009e2a <HAL_PCD_EP_Open+0xb0>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68f9      	ldr	r1, [r7, #12]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f004 fdae 	bl	800e97c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  return ret;
 8009e28:	7afb      	ldrb	r3, [r7, #11]

}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b084      	sub	sp, #16
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	60fb      	str	r3, [r7, #12]
  
  if ((ep_addr & 0x80) == 0x80)
 8009e42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	da0c      	bge.n	8009e64 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009e4a:	78fb      	ldrb	r3, [r7, #3]
 8009e4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e50:	4613      	mov	r3, r2
 8009e52:	00db      	lsls	r3, r3, #3
 8009e54:	1a9b      	subs	r3, r3, r2
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	3338      	adds	r3, #56	; 0x38
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	3304      	adds	r3, #4
 8009e60:	60fb      	str	r3, [r7, #12]
 8009e62:	e00b      	b.n	8009e7c <HAL_PCD_EP_Close+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8009e64:	78fb      	ldrb	r3, [r7, #3]
 8009e66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	00db      	lsls	r3, r3, #3
 8009e6e:	1a9b      	subs	r3, r3, r2
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	4413      	add	r3, r2
 8009e7a:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8009e7c:	78fb      	ldrb	r3, [r7, #3]
 8009e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e82:	b2da      	uxtb	r2, r3
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8009e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	09db      	lsrs	r3, r3, #7
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	461a      	mov	r2, r3
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d101      	bne.n	8009ea6 <HAL_PCD_EP_Close+0x74>
 8009ea2:	2302      	movs	r3, #2
 8009ea4:	e00e      	b.n	8009ec4 <HAL_PCD_EP_Close+0x92>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68f9      	ldr	r1, [r7, #12]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f004 fdea 	bl	800ea8e <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	607a      	str	r2, [r7, #4]
 8009ed6:	603b      	str	r3, [r7, #0]
 8009ed8:	460b      	mov	r3, r1
 8009eda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8009edc:	2300      	movs	r3, #0
 8009ede:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8009ee0:	7afb      	ldrb	r3, [r7, #11]
 8009ee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	00db      	lsls	r3, r3, #3
 8009eea:	1a9b      	subs	r3, r3, r2
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	683a      	ldr	r2, [r7, #0]
 8009f02:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	2200      	movs	r2, #0
 8009f08:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8009f10:	7afb      	ldrb	r3, [r7, #11]
 8009f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	701a      	strb	r2, [r3, #0]
  
  __HAL_LOCK(hpcd);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d101      	bne.n	8009f2a <HAL_PCD_EP_Receive+0x5e>
 8009f26:	2302      	movs	r3, #2
 8009f28:	e020      	b.n	8009f6c <HAL_PCD_EP_Receive+0xa0>
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  
  if ((ep_addr & 0x7F) == 0 )
 8009f32:	7afb      	ldrb	r3, [r7, #11]
 8009f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d109      	bne.n	8009f50 <HAL_PCD_EP_Receive+0x84>
  {
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6818      	ldr	r0, [r3, #0]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	461a      	mov	r2, r3
 8009f48:	6979      	ldr	r1, [r7, #20]
 8009f4a:	f005 f841 	bl	800efd0 <USB_EP0StartXfer>
 8009f4e:	e008      	b.n	8009f62 <HAL_PCD_EP_Receive+0x96>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6818      	ldr	r0, [r3, #0]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	6979      	ldr	r1, [r7, #20]
 8009f5e:	f004 fe11 	bl	800eb84 <USB_EPStartXfer>
  }
  __HAL_UNLOCK(hpcd);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  
  return HAL_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3718      	adds	r7, #24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8009f80:	78fb      	ldrb	r3, [r7, #3]
 8009f82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f86:	6879      	ldr	r1, [r7, #4]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	00db      	lsls	r3, r3, #3
 8009f8c:	1a9b      	subs	r3, r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	440b      	add	r3, r1
 8009f92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	b29b      	uxth	r3, r3
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	370c      	adds	r7, #12
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b086      	sub	sp, #24
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	60f8      	str	r0, [r7, #12]
 8009fae:	607a      	str	r2, [r7, #4]
 8009fb0:	603b      	str	r3, [r7, #0]
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep = NULL;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	617b      	str	r3, [r7, #20]
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009fba:	7afb      	ldrb	r3, [r7, #11]
 8009fbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	00db      	lsls	r3, r3, #3
 8009fc4:	1a9b      	subs	r3, r3, r2
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	3338      	adds	r3, #56	; 0x38
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	4413      	add	r3, r2
 8009fce:	3304      	adds	r3, #4
 8009fd0:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	683a      	ldr	r2, [r7, #0]
 8009fdc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1;
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8009fea:	7afb      	ldrb	r3, [r7, #11]
 8009fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ff0:	b2da      	uxtb	r2, r3
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	701a      	strb	r2, [r3, #0]
  
  __HAL_LOCK(hpcd);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d101      	bne.n	800a004 <HAL_PCD_EP_Transmit+0x5e>
 800a000:	2302      	movs	r3, #2
 800a002:	e020      	b.n	800a046 <HAL_PCD_EP_Transmit+0xa0>
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  
  if ((ep_addr & 0x7F) == 0 )
 800a00c:	7afb      	ldrb	r3, [r7, #11]
 800a00e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a012:	2b00      	cmp	r3, #0
 800a014:	d109      	bne.n	800a02a <HAL_PCD_EP_Transmit+0x84>
  {
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6818      	ldr	r0, [r3, #0]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	461a      	mov	r2, r3
 800a022:	6979      	ldr	r1, [r7, #20]
 800a024:	f004 ffd4 	bl	800efd0 <USB_EP0StartXfer>
 800a028:	e008      	b.n	800a03c <HAL_PCD_EP_Transmit+0x96>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep,  hpcd->Init.dma_enable);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6818      	ldr	r0, [r3, #0]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	b2db      	uxtb	r3, r3
 800a034:	461a      	mov	r2, r3
 800a036:	6979      	ldr	r1, [r7, #20]
 800a038:	f004 fda4 	bl	800eb84 <USB_EPStartXfer>
  }
  
  __HAL_UNLOCK(hpcd);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  
  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3718      	adds	r7, #24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	460b      	mov	r3, r1
 800a058:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 800a05a:	2300      	movs	r3, #0
 800a05c:	60fb      	str	r3, [r7, #12]
  
  if ((0x80 & ep_addr) == 0x80)
 800a05e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a062:	2b00      	cmp	r3, #0
 800a064:	da0c      	bge.n	800a080 <HAL_PCD_EP_SetStall+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a066:	78fb      	ldrb	r3, [r7, #3]
 800a068:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a06c:	4613      	mov	r3, r2
 800a06e:	00db      	lsls	r3, r3, #3
 800a070:	1a9b      	subs	r3, r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	3338      	adds	r3, #56	; 0x38
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	4413      	add	r3, r2
 800a07a:	3304      	adds	r3, #4
 800a07c:	60fb      	str	r3, [r7, #12]
 800a07e:	e009      	b.n	800a094 <HAL_PCD_EP_SetStall+0x46>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a080:	78fa      	ldrb	r2, [r7, #3]
 800a082:	4613      	mov	r3, r2
 800a084:	00db      	lsls	r3, r3, #3
 800a086:	1a9b      	subs	r3, r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	4413      	add	r3, r2
 800a092:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2201      	movs	r2, #1
 800a098:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 800a09a:	78fb      	ldrb	r3, [r7, #3]
 800a09c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0a0:	b2da      	uxtb	r2, r3
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a0a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	09db      	lsrs	r3, r3, #7
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d101      	bne.n	800a0c4 <HAL_PCD_EP_SetStall+0x76>
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	e01e      	b.n	800a102 <HAL_PCD_EP_SetStall+0xb4>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  USB_EPSetStall(hpcd->Instance , ep);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	68f9      	ldr	r1, [r7, #12]
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f005 f91b 	bl	800f30e <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 800a0d8:	78fb      	ldrb	r3, [r7, #3]
 800a0da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10a      	bne.n	800a0f8 <HAL_PCD_EP_SetStall+0xaa>
  {
    USB_EP0_OutStart(hpcd->Instance,  hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6818      	ldr	r0, [r3, #0]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	b2d9      	uxtb	r1, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f503 7362 	add.w	r3, r3, #904	; 0x388
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	f005 fb56 	bl	800f7a4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  
  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b084      	sub	sp, #16
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
 800a112:	460b      	mov	r3, r1
 800a114:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep = NULL;
 800a116:	2300      	movs	r3, #0
 800a118:	60fb      	str	r3, [r7, #12]
  
  if ((0x80 & ep_addr) == 0x80)
 800a11a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	da0c      	bge.n	800a13c <HAL_PCD_EP_ClrStall+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a122:	78fb      	ldrb	r3, [r7, #3]
 800a124:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a128:	4613      	mov	r3, r2
 800a12a:	00db      	lsls	r3, r3, #3
 800a12c:	1a9b      	subs	r3, r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	3338      	adds	r3, #56	; 0x38
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	4413      	add	r3, r2
 800a136:	3304      	adds	r3, #4
 800a138:	60fb      	str	r3, [r7, #12]
 800a13a:	e009      	b.n	800a150 <HAL_PCD_EP_ClrStall+0x46>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a13c:	78fa      	ldrb	r2, [r7, #3]
 800a13e:	4613      	mov	r3, r2
 800a140:	00db      	lsls	r3, r3, #3
 800a142:	1a9b      	subs	r3, r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	4413      	add	r3, r2
 800a14e:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 800a156:	78fb      	ldrb	r3, [r7, #3]
 800a158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a15c:	b2da      	uxtb	r2, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a162:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a166:	b2db      	uxtb	r3, r3
 800a168:	09db      	lsrs	r3, r3, #7
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	461a      	mov	r2, r3
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d101      	bne.n	800a180 <HAL_PCD_EP_ClrStall+0x76>
 800a17c:	2302      	movs	r3, #2
 800a17e:	e00e      	b.n	800a19e <HAL_PCD_EP_ClrStall+0x94>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  USB_EPClearStall(hpcd->Instance , ep);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68f9      	ldr	r1, [r7, #12]
 800a18e:	4618      	mov	r0, r3
 800a190:	f005 f92e 	bl	800f3f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
    
  return HAL_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <HAL_PCD_EP_Flush>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b082      	sub	sp, #8
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d101      	bne.n	800a1c0 <HAL_PCD_EP_Flush+0x1a>
 800a1bc:	2302      	movs	r3, #2
 800a1be:	e01b      	b.n	800a1f8 <HAL_PCD_EP_Flush+0x52>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
  
  if ((ep_addr & 0x80) == 0x80)
 800a1c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	da09      	bge.n	800a1e4 <HAL_PCD_EP_Flush+0x3e>
  {
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	78fb      	ldrb	r3, [r7, #3]
 800a1d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1da:	4619      	mov	r1, r3
 800a1dc:	4610      	mov	r0, r2
 800a1de:	f004 fb6d 	bl	800e8bc <USB_FlushTxFifo>
 800a1e2:	e004      	b.n	800a1ee <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    USB_FlushRxFifo(hpcd->Instance);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f004 fb8d 	bl	800e908 <USB_FlushRxFifo>
  }
  
  __HAL_UNLOCK(hpcd); 
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
    
  return HAL_OK;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3708      	adds	r7, #8
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd: PCD handle
  * @param  epnum: endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b08a      	sub	sp, #40	; 0x28
 800a204:	af02      	add	r7, sp, #8
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep = NULL;
 800a210:	2300      	movs	r3, #0
 800a212:	613b      	str	r3, [r7, #16]
  int32_t len = 0U;
 800a214:	2300      	movs	r3, #0
 800a216:	61fb      	str	r3, [r7, #28]
  uint32_t len32b = 0;
 800a218:	2300      	movs	r3, #0
 800a21a:	61bb      	str	r3, [r7, #24]
  uint32_t fifoemptymsk = 0;
 800a21c:	2300      	movs	r3, #0
 800a21e:	60fb      	str	r3, [r7, #12]

  ep = &hpcd->IN_ep[epnum];
 800a220:	683a      	ldr	r2, [r7, #0]
 800a222:	4613      	mov	r3, r2
 800a224:	00db      	lsls	r3, r3, #3
 800a226:	1a9b      	subs	r3, r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	3338      	adds	r3, #56	; 0x38
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	4413      	add	r3, r2
 800a230:	3304      	adds	r3, #4
 800a232:	613b      	str	r3, [r7, #16]
  len = ep->xfer_len - ep->xfer_count;
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	695a      	ldr	r2, [r3, #20]
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	1ad3      	subs	r3, r2, r3
 800a23e:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	689a      	ldr	r2, [r3, #8]
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	429a      	cmp	r2, r3
 800a248:	d202      	bcs.n	800a250 <PCD_WriteEmptyTxFifo+0x50>
  {
    len = ep->maxpacket;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	61fb      	str	r3, [r7, #28]
  }
  
  
  len32b = (len + 3) / 4;
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	3303      	adds	r3, #3
 800a254:	2b00      	cmp	r3, #0
 800a256:	da00      	bge.n	800a25a <PCD_WriteEmptyTxFifo+0x5a>
 800a258:	3303      	adds	r3, #3
 800a25a:	109b      	asrs	r3, r3, #2
 800a25c:	61bb      	str	r3, [r7, #24]
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800a25e:	e02e      	b.n	800a2be <PCD_WriteEmptyTxFifo+0xbe>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	695a      	ldr	r2, [r3, #20]
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	689a      	ldr	r2, [r3, #8]
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	429a      	cmp	r2, r3
 800a274:	d202      	bcs.n	800a27c <PCD_WriteEmptyTxFifo+0x7c>
    {
      len = ep->maxpacket;
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3) / 4;
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	3303      	adds	r3, #3
 800a280:	2b00      	cmp	r3, #0
 800a282:	da00      	bge.n	800a286 <PCD_WriteEmptyTxFifo+0x86>
 800a284:	3303      	adds	r3, #3
 800a286:	109b      	asrs	r3, r3, #2
 800a288:	61bb      	str	r3, [r7, #24]
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	68d9      	ldr	r1, [r3, #12]
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	b2da      	uxtb	r2, r3
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	b298      	uxth	r0, r3
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	4603      	mov	r3, r0
 800a2a0:	6978      	ldr	r0, [r7, #20]
 800a2a2:	f004 ffd6 	bl	800f252 <USB_WritePacket>
    
    ep->xfer_buff  += len;
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	68da      	ldr	r2, [r3, #12]
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	441a      	add	r2, r3
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	699a      	ldr	r2, [r3, #24]
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	441a      	add	r2, r3
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	619a      	str	r2, [r3, #24]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	015a      	lsls	r2, r3, #5
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	b29a      	uxth	r2, r3
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d909      	bls.n	800a2e8 <PCD_WriteEmptyTxFifo+0xe8>
          ep->xfer_count < ep->xfer_len &&
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	699a      	ldr	r2, [r3, #24]
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	695b      	ldr	r3, [r3, #20]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d203      	bcs.n	800a2e8 <PCD_WriteEmptyTxFifo+0xe8>
            ep->xfer_len != 0)
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	695b      	ldr	r3, [r3, #20]
          ep->xfer_count < ep->xfer_len &&
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1bb      	bne.n	800a260 <PCD_WriteEmptyTxFifo+0x60>
  }
  
  if(len <= 0)
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	dc10      	bgt.n	800a310 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = 0x1 << epnum;
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f6:	60fb      	str	r3, [r7, #12]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2fe:	4619      	mov	r1, r3
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	43db      	mvns	r3, r3
 800a30c:	4013      	ands	r3, r2
 800a30e:	634b      	str	r3, [r1, #52]	; 0x34
    
  }
  
  return HAL_OK;  
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3720      	adds	r7, #32
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo: The number of Tx fifo
  * @param  size: Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a31a:	b480      	push	{r7}
 800a31c:	b085      	sub	sp, #20
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	460b      	mov	r3, r1
 800a324:	70fb      	strb	r3, [r7, #3]
 800a326:	4613      	mov	r3, r2
 800a328:	803b      	strh	r3, [r7, #0]
  uint8_t index = 0;
 800a32a:	2300      	movs	r3, #0
 800a32c:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a338:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d108      	bne.n	800a352 <HAL_PCDEx_SetTxFiFo+0x38>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (size << 16) | Tx_Offset;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	883a      	ldrh	r2, [r7, #0]
 800a346:	0412      	lsls	r2, r2, #16
 800a348:	4611      	mov	r1, r2
 800a34a:	68ba      	ldr	r2, [r7, #8]
 800a34c:	430a      	orrs	r2, r1
 800a34e:	629a      	str	r2, [r3, #40]	; 0x28
 800a350:	e029      	b.n	800a3a6 <HAL_PCDEx_SetTxFiFo+0x8c>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a358:	0c1b      	lsrs	r3, r3, #16
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	4413      	add	r3, r2
 800a35e:	60bb      	str	r3, [r7, #8]
    for (index = 0; index < (fifo - 1); index++)
 800a360:	2300      	movs	r3, #0
 800a362:	73fb      	strb	r3, [r7, #15]
 800a364:	e00d      	b.n	800a382 <HAL_PCDEx_SetTxFiFo+0x68>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[index] >> 16);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	7bfb      	ldrb	r3, [r7, #15]
 800a36c:	3340      	adds	r3, #64	; 0x40
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4413      	add	r3, r2
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	0c1b      	lsrs	r3, r3, #16
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	4413      	add	r3, r2
 800a37a:	60bb      	str	r3, [r7, #8]
    for (index = 0; index < (fifo - 1); index++)
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
 800a37e:	3301      	adds	r3, #1
 800a380:	73fb      	strb	r3, [r7, #15]
 800a382:	7bfa      	ldrb	r2, [r7, #15]
 800a384:	78fb      	ldrb	r3, [r7, #3]
 800a386:	3b01      	subs	r3, #1
 800a388:	429a      	cmp	r2, r3
 800a38a:	dbec      	blt.n	800a366 <HAL_PCDEx_SetTxFiFo+0x4c>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6819      	ldr	r1, [r3, #0]
 800a390:	78fb      	ldrb	r3, [r7, #3]
 800a392:	3b01      	subs	r3, #1
 800a394:	883a      	ldrh	r2, [r7, #0]
 800a396:	0412      	lsls	r2, r2, #16
 800a398:	4610      	mov	r0, r2
 800a39a:	68ba      	ldr	r2, [r7, #8]
 800a39c:	4302      	orrs	r2, r0
 800a39e:	3340      	adds	r3, #64	; 0x40
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	440b      	add	r3, r1
 800a3a4:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a3a6:	2300      	movs	r3, #0
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3714      	adds	r7, #20
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd: PCD handle
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	887a      	ldrh	r2, [r7, #2]
 800a3c6:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	370c      	adds	r7, #12
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr

0800a3d6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a3d6:	b480      	push	{r7}
 800a3d8:	b085      	sub	sp, #20
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	60fb      	str	r3, [r7, #12]
  
  hpcd->lpm_active = ENABLE;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
  hpcd->LPM_State = LPM_L0;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a408:	f043 0303 	orr.w	r3, r3, #3
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;  
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3714      	adds	r7, #20
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr

0800a41e <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 800a41e:	b480      	push	{r7}
 800a420:	b085      	sub	sp, #20
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	60fb      	str	r3, [r7, #12]

  hpcd->battery_charging_active = ENABLE; 
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2201      	movs	r2, #1
 800a430:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a438:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return HAL_OK;  
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3714      	adds	r7, #20
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr

0800a44e <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{ 
 800a44e:	b480      	push	{r7}
 800a450:	b083      	sub	sp, #12
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	460b      	mov	r3, r1
 800a458:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */ 
}
 800a45a:	bf00      	nop
 800a45c:	370c      	adds	r7, #12
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
	...

0800a468 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a468:	b480      	push	{r7}
 800a46a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a46c:	4b04      	ldr	r3, [pc, #16]	; (800a480 <HAL_PWREx_GetVoltageRange+0x18>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800a474:	4618      	mov	r0, r3
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	40007000 	.word	0x40007000

0800a484 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b08c      	sub	sp, #48	; 0x30
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a48c:	2300      	movs	r3, #0
 800a48e:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f003 0310 	and.w	r3, r3, #16
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f000 80db 	beq.w	800a654 <HAL_RCC_OscConfig+0x1d0>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800a49e:	4ba2      	ldr	r3, [pc, #648]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	f003 030c 	and.w	r3, r3, #12
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f040 8084 	bne.w	800a5b4 <HAL_RCC_OscConfig+0x130>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a4ac:	4b9e      	ldr	r3, [pc, #632]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 0302 	and.w	r3, r3, #2
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d005      	beq.n	800a4c4 <HAL_RCC_OscConfig+0x40>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	699b      	ldr	r3, [r3, #24]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d101      	bne.n	800a4c4 <HAL_RCC_OscConfig+0x40>
      {
        return HAL_ERROR;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e35f      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a1a      	ldr	r2, [r3, #32]
 800a4c8:	4b97      	ldr	r3, [pc, #604]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 0308 	and.w	r3, r3, #8
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d004      	beq.n	800a4de <HAL_RCC_OscConfig+0x5a>
 800a4d4:	4b94      	ldr	r3, [pc, #592]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4dc:	e005      	b.n	800a4ea <HAL_RCC_OscConfig+0x66>
 800a4de:	4b92      	ldr	r3, [pc, #584]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a4e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4e4:	091b      	lsrs	r3, r3, #4
 800a4e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d923      	bls.n	800a536 <HAL_RCC_OscConfig+0xb2>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6a1b      	ldr	r3, [r3, #32]
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f000 fc96 	bl	800ae24 <RCC_SetFlashLatencyFromMSIRange>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e340      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a502:	4a89      	ldr	r2, [pc, #548]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a504:	4b88      	ldr	r3, [pc, #544]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f043 0308 	orr.w	r3, r3, #8
 800a50c:	6013      	str	r3, [r2, #0]
 800a50e:	4986      	ldr	r1, [pc, #536]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a510:	4b85      	ldr	r3, [pc, #532]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a1b      	ldr	r3, [r3, #32]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a520:	4981      	ldr	r1, [pc, #516]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a522:	4b81      	ldr	r3, [pc, #516]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	69db      	ldr	r3, [r3, #28]
 800a52e:	021b      	lsls	r3, r3, #8
 800a530:	4313      	orrs	r3, r2
 800a532:	604b      	str	r3, [r1, #4]
 800a534:	e022      	b.n	800a57c <HAL_RCC_OscConfig+0xf8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a536:	4a7c      	ldr	r2, [pc, #496]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a538:	4b7b      	ldr	r3, [pc, #492]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f043 0308 	orr.w	r3, r3, #8
 800a540:	6013      	str	r3, [r2, #0]
 800a542:	4979      	ldr	r1, [pc, #484]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a544:	4b78      	ldr	r3, [pc, #480]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a1b      	ldr	r3, [r3, #32]
 800a550:	4313      	orrs	r3, r2
 800a552:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a554:	4974      	ldr	r1, [pc, #464]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a556:	4b74      	ldr	r3, [pc, #464]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	69db      	ldr	r3, [r3, #28]
 800a562:	021b      	lsls	r3, r3, #8
 800a564:	4313      	orrs	r3, r2
 800a566:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a1b      	ldr	r3, [r3, #32]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 fc59 	bl	800ae24 <RCC_SetFlashLatencyFromMSIRange>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d001      	beq.n	800a57c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	e303      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800a57c:	f000 fb08 	bl	800ab90 <HAL_RCC_GetSysClockFreq>
 800a580:	4601      	mov	r1, r0
 800a582:	4b69      	ldr	r3, [pc, #420]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a58a:	23f0      	movs	r3, #240	; 0xf0
 800a58c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a590:	fa93 f3a3 	rbit	r3, r3
 800a594:	623b      	str	r3, [r7, #32]
  return(result);
 800a596:	6a3b      	ldr	r3, [r7, #32]
 800a598:	fab3 f383 	clz	r3, r3
 800a59c:	fa22 f303 	lsr.w	r3, r2, r3
 800a5a0:	4a62      	ldr	r2, [pc, #392]	; (800a72c <HAL_RCC_OscConfig+0x2a8>)
 800a5a2:	5cd3      	ldrb	r3, [r2, r3]
 800a5a4:	fa21 f303 	lsr.w	r3, r1, r3
 800a5a8:	4a61      	ldr	r2, [pc, #388]	; (800a730 <HAL_RCC_OscConfig+0x2ac>)
 800a5aa:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	f7fd ff35 	bl	800841c <HAL_InitTick>
 800a5b2:	e04f      	b.n	800a654 <HAL_RCC_OscConfig+0x1d0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d032      	beq.n	800a622 <HAL_RCC_OscConfig+0x19e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a5bc:	4a5a      	ldr	r2, [pc, #360]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a5be:	4b5a      	ldr	r3, [pc, #360]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f043 0301 	orr.w	r3, r3, #1
 800a5c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a5c8:	f7fd ff52 	bl	8008470 <HAL_GetTick>
 800a5cc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800a5ce:	e008      	b.n	800a5e2 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a5d0:	f7fd ff4e 	bl	8008470 <HAL_GetTick>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d901      	bls.n	800a5e2 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e2d0      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800a5e2:	4b51      	ldr	r3, [pc, #324]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 0302 	and.w	r3, r3, #2
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d0f0      	beq.n	800a5d0 <HAL_RCC_OscConfig+0x14c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a5ee:	4a4e      	ldr	r2, [pc, #312]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a5f0:	4b4d      	ldr	r3, [pc, #308]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f043 0308 	orr.w	r3, r3, #8
 800a5f8:	6013      	str	r3, [r2, #0]
 800a5fa:	494b      	ldr	r1, [pc, #300]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a5fc:	4b4a      	ldr	r3, [pc, #296]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a1b      	ldr	r3, [r3, #32]
 800a608:	4313      	orrs	r3, r2
 800a60a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a60c:	4946      	ldr	r1, [pc, #280]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a60e:	4b46      	ldr	r3, [pc, #280]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	69db      	ldr	r3, [r3, #28]
 800a61a:	021b      	lsls	r3, r3, #8
 800a61c:	4313      	orrs	r3, r2
 800a61e:	604b      	str	r3, [r1, #4]
 800a620:	e018      	b.n	800a654 <HAL_RCC_OscConfig+0x1d0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a622:	4a41      	ldr	r2, [pc, #260]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a624:	4b40      	ldr	r3, [pc, #256]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f023 0301 	bic.w	r3, r3, #1
 800a62c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a62e:	f7fd ff1f 	bl	8008470 <HAL_GetTick>
 800a632:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 800a634:	e008      	b.n	800a648 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a636:	f7fd ff1b 	bl	8008470 <HAL_GetTick>
 800a63a:	4602      	mov	r2, r0
 800a63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63e:	1ad3      	subs	r3, r2, r3
 800a640:	2b02      	cmp	r3, #2
 800a642:	d901      	bls.n	800a648 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800a644:	2303      	movs	r3, #3
 800a646:	e29d      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 800a648:	4b37      	ldr	r3, [pc, #220]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 0302 	and.w	r3, r3, #2
 800a650:	2b00      	cmp	r3, #0
 800a652:	d1f0      	bne.n	800a636 <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 0301 	and.w	r3, r3, #1
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d07a      	beq.n	800a756 <HAL_RCC_OscConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 800a660:	4b31      	ldr	r3, [pc, #196]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	f003 030c 	and.w	r3, r3, #12
 800a668:	2b08      	cmp	r3, #8
 800a66a:	d00b      	beq.n	800a684 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a66c:	4b2e      	ldr	r3, [pc, #184]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 800a674:	2b0c      	cmp	r3, #12
 800a676:	d111      	bne.n	800a69c <HAL_RCC_OscConfig+0x218>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a678:	4b2b      	ldr	r3, [pc, #172]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	f003 0303 	and.w	r3, r3, #3
 800a680:	2b03      	cmp	r3, #3
 800a682:	d10b      	bne.n	800a69c <HAL_RCC_OscConfig+0x218>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a684:	4b28      	ldr	r3, [pc, #160]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d061      	beq.n	800a754 <HAL_RCC_OscConfig+0x2d0>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d15d      	bne.n	800a754 <HAL_RCC_OscConfig+0x2d0>
      {
        return HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	e273      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6a4:	d106      	bne.n	800a6b4 <HAL_RCC_OscConfig+0x230>
 800a6a6:	4a20      	ldr	r2, [pc, #128]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a6a8:	4b1f      	ldr	r3, [pc, #124]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6b0:	6013      	str	r3, [r2, #0]
 800a6b2:	e01d      	b.n	800a6f0 <HAL_RCC_OscConfig+0x26c>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a6bc:	d10c      	bne.n	800a6d8 <HAL_RCC_OscConfig+0x254>
 800a6be:	4a1a      	ldr	r2, [pc, #104]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a6c0:	4b19      	ldr	r3, [pc, #100]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a6c8:	6013      	str	r3, [r2, #0]
 800a6ca:	4a17      	ldr	r2, [pc, #92]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a6cc:	4b16      	ldr	r3, [pc, #88]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6d4:	6013      	str	r3, [r2, #0]
 800a6d6:	e00b      	b.n	800a6f0 <HAL_RCC_OscConfig+0x26c>
 800a6d8:	4a13      	ldr	r2, [pc, #76]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a6da:	4b13      	ldr	r3, [pc, #76]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6e2:	6013      	str	r3, [r2, #0]
 800a6e4:	4a10      	ldr	r2, [pc, #64]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a6e6:	4b10      	ldr	r3, [pc, #64]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d013      	beq.n	800a720 <HAL_RCC_OscConfig+0x29c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6f8:	f7fd feba 	bl	8008470 <HAL_GetTick>
 800a6fc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800a6fe:	e008      	b.n	800a712 <HAL_RCC_OscConfig+0x28e>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a700:	f7fd feb6 	bl	8008470 <HAL_GetTick>
 800a704:	4602      	mov	r2, r0
 800a706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a708:	1ad3      	subs	r3, r2, r3
 800a70a:	2b64      	cmp	r3, #100	; 0x64
 800a70c:	d901      	bls.n	800a712 <HAL_RCC_OscConfig+0x28e>
          {
            return HAL_TIMEOUT;
 800a70e:	2303      	movs	r3, #3
 800a710:	e238      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800a712:	4b05      	ldr	r3, [pc, #20]	; (800a728 <HAL_RCC_OscConfig+0x2a4>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d0f0      	beq.n	800a700 <HAL_RCC_OscConfig+0x27c>
 800a71e:	e01a      	b.n	800a756 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a720:	f7fd fea6 	bl	8008470 <HAL_GetTick>
 800a724:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800a726:	e00e      	b.n	800a746 <HAL_RCC_OscConfig+0x2c2>
 800a728:	40021000 	.word	0x40021000
 800a72c:	08017c9c 	.word	0x08017c9c
 800a730:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a734:	f7fd fe9c 	bl	8008470 <HAL_GetTick>
 800a738:	4602      	mov	r2, r0
 800a73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	2b64      	cmp	r3, #100	; 0x64
 800a740:	d901      	bls.n	800a746 <HAL_RCC_OscConfig+0x2c2>
          {
            return HAL_TIMEOUT;
 800a742:	2303      	movs	r3, #3
 800a744:	e21e      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800a746:	4bb0      	ldr	r3, [pc, #704]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1f0      	bne.n	800a734 <HAL_RCC_OscConfig+0x2b0>
 800a752:	e000      	b.n	800a756 <HAL_RCC_OscConfig+0x2d2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 0302 	and.w	r3, r3, #2
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d07f      	beq.n	800a862 <HAL_RCC_OscConfig+0x3de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800a762:	4ba9      	ldr	r3, [pc, #676]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	f003 030c 	and.w	r3, r3, #12
 800a76a:	2b04      	cmp	r3, #4
 800a76c:	d00b      	beq.n	800a786 <HAL_RCC_OscConfig+0x302>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800a76e:	4ba6      	ldr	r3, [pc, #664]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800a776:	2b0c      	cmp	r3, #12
 800a778:	d127      	bne.n	800a7ca <HAL_RCC_OscConfig+0x346>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800a77a:	4ba3      	ldr	r3, [pc, #652]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a77c:	68db      	ldr	r3, [r3, #12]
 800a77e:	f003 0303 	and.w	r3, r3, #3
 800a782:	2b02      	cmp	r3, #2
 800a784:	d121      	bne.n	800a7ca <HAL_RCC_OscConfig+0x346>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a786:	4ba0      	ldr	r3, [pc, #640]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d005      	beq.n	800a79e <HAL_RCC_OscConfig+0x31a>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d101      	bne.n	800a79e <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e1f2      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a79e:	489a      	ldr	r0, [pc, #616]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a7a0:	4b99      	ldr	r3, [pc, #612]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6919      	ldr	r1, [r3, #16]
 800a7ac:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 800a7b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7b2:	69fb      	ldr	r3, [r7, #28]
 800a7b4:	fa93 f3a3 	rbit	r3, r3
 800a7b8:	61bb      	str	r3, [r7, #24]
  return(result);
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	fab3 f383 	clz	r3, r3
 800a7c0:	fa01 f303 	lsl.w	r3, r1, r3
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	6043      	str	r3, [r0, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a7c8:	e04b      	b.n	800a862 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d02e      	beq.n	800a830 <HAL_RCC_OscConfig+0x3ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a7d2:	4a8d      	ldr	r2, [pc, #564]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a7d4:	4b8c      	ldr	r3, [pc, #560]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7de:	f7fd fe47 	bl	8008470 <HAL_GetTick>
 800a7e2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800a7e4:	e008      	b.n	800a7f8 <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7e6:	f7fd fe43 	bl	8008470 <HAL_GetTick>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d901      	bls.n	800a7f8 <HAL_RCC_OscConfig+0x374>
          {
            return HAL_TIMEOUT;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	e1c5      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800a7f8:	4b83      	ldr	r3, [pc, #524]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a800:	2b00      	cmp	r3, #0
 800a802:	d0f0      	beq.n	800a7e6 <HAL_RCC_OscConfig+0x362>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a804:	4880      	ldr	r0, [pc, #512]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a806:	4b80      	ldr	r3, [pc, #512]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6919      	ldr	r1, [r3, #16]
 800a812:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 800a816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	fa93 f3a3 	rbit	r3, r3
 800a81e:	613b      	str	r3, [r7, #16]
  return(result);
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	fab3 f383 	clz	r3, r3
 800a826:	fa01 f303 	lsl.w	r3, r1, r3
 800a82a:	4313      	orrs	r3, r2
 800a82c:	6043      	str	r3, [r0, #4]
 800a82e:	e018      	b.n	800a862 <HAL_RCC_OscConfig+0x3de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a830:	4a75      	ldr	r2, [pc, #468]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a832:	4b75      	ldr	r3, [pc, #468]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a83a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a83c:	f7fd fe18 	bl	8008470 <HAL_GetTick>
 800a840:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800a842:	e008      	b.n	800a856 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a844:	f7fd fe14 	bl	8008470 <HAL_GetTick>
 800a848:	4602      	mov	r2, r0
 800a84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84c:	1ad3      	subs	r3, r2, r3
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d901      	bls.n	800a856 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a852:	2303      	movs	r3, #3
 800a854:	e196      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800a856:	4b6c      	ldr	r3, [pc, #432]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1f0      	bne.n	800a844 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f003 0308 	and.w	r3, r3, #8
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d03c      	beq.n	800a8e8 <HAL_RCC_OscConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	695b      	ldr	r3, [r3, #20]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d01c      	beq.n	800a8b0 <HAL_RCC_OscConfig+0x42c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a876:	4a64      	ldr	r2, [pc, #400]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a878:	4b63      	ldr	r3, [pc, #396]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a87a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a87e:	f043 0301 	orr.w	r3, r3, #1
 800a882:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a886:	f7fd fdf3 	bl	8008470 <HAL_GetTick>
 800a88a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 800a88c:	e008      	b.n	800a8a0 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a88e:	f7fd fdef 	bl	8008470 <HAL_GetTick>
 800a892:	4602      	mov	r2, r0
 800a894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a896:	1ad3      	subs	r3, r2, r3
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d901      	bls.n	800a8a0 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 800a89c:	2303      	movs	r3, #3
 800a89e:	e171      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 800a8a0:	4b59      	ldr	r3, [pc, #356]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a8a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8a6:	f003 0302 	and.w	r3, r3, #2
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d0ef      	beq.n	800a88e <HAL_RCC_OscConfig+0x40a>
 800a8ae:	e01b      	b.n	800a8e8 <HAL_RCC_OscConfig+0x464>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a8b0:	4a55      	ldr	r2, [pc, #340]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a8b2:	4b55      	ldr	r3, [pc, #340]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a8b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8b8:	f023 0301 	bic.w	r3, r3, #1
 800a8bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8c0:	f7fd fdd6 	bl	8008470 <HAL_GetTick>
 800a8c4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800a8c6:	e008      	b.n	800a8da <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8c8:	f7fd fdd2 	bl	8008470 <HAL_GetTick>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	2b02      	cmp	r3, #2
 800a8d4:	d901      	bls.n	800a8da <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800a8d6:	2303      	movs	r3, #3
 800a8d8:	e154      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800a8da:	4b4b      	ldr	r3, [pc, #300]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a8dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8e0:	f003 0302 	and.w	r3, r3, #2
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d1ef      	bne.n	800a8c8 <HAL_RCC_OscConfig+0x444>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 0304 	and.w	r3, r3, #4
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f000 80a9 	beq.w	800aa48 <HAL_RCC_OscConfig+0x5c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a8fc:	4b42      	ldr	r3, [pc, #264]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a8fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10e      	bne.n	800a926 <HAL_RCC_OscConfig+0x4a2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a908:	4a3f      	ldr	r2, [pc, #252]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a90a:	4b3f      	ldr	r3, [pc, #252]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a90c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a90e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a912:	6593      	str	r3, [r2, #88]	; 0x58
 800a914:	4b3c      	ldr	r3, [pc, #240]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a91c:	60fb      	str	r3, [r7, #12]
 800a91e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a920:	2301      	movs	r3, #1
 800a922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a926:	4b39      	ldr	r3, [pc, #228]	; (800aa0c <HAL_RCC_OscConfig+0x588>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d118      	bne.n	800a964 <HAL_RCC_OscConfig+0x4e0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a932:	4a36      	ldr	r2, [pc, #216]	; (800aa0c <HAL_RCC_OscConfig+0x588>)
 800a934:	4b35      	ldr	r3, [pc, #212]	; (800aa0c <HAL_RCC_OscConfig+0x588>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a93c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a93e:	f7fd fd97 	bl	8008470 <HAL_GetTick>
 800a942:	62b8      	str	r0, [r7, #40]	; 0x28

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a944:	e008      	b.n	800a958 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a946:	f7fd fd93 	bl	8008470 <HAL_GetTick>
 800a94a:	4602      	mov	r2, r0
 800a94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	2b02      	cmp	r3, #2
 800a952:	d901      	bls.n	800a958 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 800a954:	2303      	movs	r3, #3
 800a956:	e115      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a958:	4b2c      	ldr	r3, [pc, #176]	; (800aa0c <HAL_RCC_OscConfig+0x588>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a960:	2b00      	cmp	r3, #0
 800a962:	d0f0      	beq.n	800a946 <HAL_RCC_OscConfig+0x4c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d108      	bne.n	800a97e <HAL_RCC_OscConfig+0x4fa>
 800a96c:	4a26      	ldr	r2, [pc, #152]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a96e:	4b26      	ldr	r3, [pc, #152]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a974:	f043 0301 	orr.w	r3, r3, #1
 800a978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a97c:	e024      	b.n	800a9c8 <HAL_RCC_OscConfig+0x544>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	2b05      	cmp	r3, #5
 800a984:	d110      	bne.n	800a9a8 <HAL_RCC_OscConfig+0x524>
 800a986:	4a20      	ldr	r2, [pc, #128]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a988:	4b1f      	ldr	r3, [pc, #124]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a98a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a98e:	f043 0304 	orr.w	r3, r3, #4
 800a992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a996:	4a1c      	ldr	r2, [pc, #112]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a998:	4b1b      	ldr	r3, [pc, #108]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a99a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a99e:	f043 0301 	orr.w	r3, r3, #1
 800a9a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a9a6:	e00f      	b.n	800a9c8 <HAL_RCC_OscConfig+0x544>
 800a9a8:	4a17      	ldr	r2, [pc, #92]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a9aa:	4b17      	ldr	r3, [pc, #92]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a9ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9b0:	f023 0301 	bic.w	r3, r3, #1
 800a9b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a9b8:	4a13      	ldr	r2, [pc, #76]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a9ba:	4b13      	ldr	r3, [pc, #76]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a9bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9c0:	f023 0304 	bic.w	r3, r3, #4
 800a9c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d016      	beq.n	800a9fe <HAL_RCC_OscConfig+0x57a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9d0:	f7fd fd4e 	bl	8008470 <HAL_GetTick>
 800a9d4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800a9d6:	e00a      	b.n	800a9ee <HAL_RCC_OscConfig+0x56a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9d8:	f7fd fd4a 	bl	8008470 <HAL_GetTick>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e0:	1ad3      	subs	r3, r2, r3
 800a9e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d901      	bls.n	800a9ee <HAL_RCC_OscConfig+0x56a>
        {
          return HAL_TIMEOUT;
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	e0ca      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800a9ee:	4b06      	ldr	r3, [pc, #24]	; (800aa08 <HAL_RCC_OscConfig+0x584>)
 800a9f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9f4:	f003 0302 	and.w	r3, r3, #2
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d0ed      	beq.n	800a9d8 <HAL_RCC_OscConfig+0x554>
 800a9fc:	e01a      	b.n	800aa34 <HAL_RCC_OscConfig+0x5b0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9fe:	f7fd fd37 	bl	8008470 <HAL_GetTick>
 800aa02:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800aa04:	e00f      	b.n	800aa26 <HAL_RCC_OscConfig+0x5a2>
 800aa06:	bf00      	nop
 800aa08:	40021000 	.word	0x40021000
 800aa0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa10:	f7fd fd2e 	bl	8008470 <HAL_GetTick>
 800aa14:	4602      	mov	r2, r0
 800aa16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d901      	bls.n	800aa26 <HAL_RCC_OscConfig+0x5a2>
        {
          return HAL_TIMEOUT;
 800aa22:	2303      	movs	r3, #3
 800aa24:	e0ae      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800aa26:	4b59      	ldr	r3, [pc, #356]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800aa28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa2c:	f003 0302 	and.w	r3, r3, #2
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d1ed      	bne.n	800aa10 <HAL_RCC_OscConfig+0x58c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aa34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d105      	bne.n	800aa48 <HAL_RCC_OscConfig+0x5c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa3c:	4a53      	ldr	r2, [pc, #332]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800aa3e:	4b53      	ldr	r3, [pc, #332]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800aa40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa46:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f000 8098 	beq.w	800ab82 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aa52:	4b4e      	ldr	r3, [pc, #312]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	f003 030c 	and.w	r3, r3, #12
 800aa5a:	2b0c      	cmp	r3, #12
 800aa5c:	f000 808f 	beq.w	800ab7e <HAL_RCC_OscConfig+0x6fa>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d156      	bne.n	800ab16 <HAL_RCC_OscConfig+0x692>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa68:	4a48      	ldr	r2, [pc, #288]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800aa6a:	4b48      	ldr	r3, [pc, #288]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa74:	f7fd fcfc 	bl	8008470 <HAL_GetTick>
 800aa78:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800aa7a:	e008      	b.n	800aa8e <HAL_RCC_OscConfig+0x60a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa7c:	f7fd fcf8 	bl	8008470 <HAL_GetTick>
 800aa80:	4602      	mov	r2, r0
 800aa82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa84:	1ad3      	subs	r3, r2, r3
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d901      	bls.n	800aa8e <HAL_RCC_OscConfig+0x60a>
          {
            return HAL_TIMEOUT;
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	e07a      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800aa8e:	4b3f      	ldr	r3, [pc, #252]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1f0      	bne.n	800aa7c <HAL_RCC_OscConfig+0x5f8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa9a:	493c      	ldr	r1, [pc, #240]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	011a      	lsls	r2, r3, #4
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaa8:	021b      	lsls	r3, r3, #8
 800aaaa:	431a      	orrs	r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab0:	091b      	lsrs	r3, r3, #4
 800aab2:	045b      	lsls	r3, r3, #17
 800aab4:	431a      	orrs	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaba:	431a      	orrs	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aac0:	085b      	lsrs	r3, r3, #1
 800aac2:	3b01      	subs	r3, #1
 800aac4:	055b      	lsls	r3, r3, #21
 800aac6:	431a      	orrs	r2, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aacc:	085b      	lsrs	r3, r3, #1
 800aace:	3b01      	subs	r3, #1
 800aad0:	065b      	lsls	r3, r3, #25
 800aad2:	4313      	orrs	r3, r2
 800aad4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aad6:	4a2d      	ldr	r2, [pc, #180]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800aad8:	4b2c      	ldr	r3, [pc, #176]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aae0:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800aae2:	4a2a      	ldr	r2, [pc, #168]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800aae4:	4b29      	ldr	r3, [pc, #164]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aaec:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaee:	f7fd fcbf 	bl	8008470 <HAL_GetTick>
 800aaf2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800aaf4:	e008      	b.n	800ab08 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aaf6:	f7fd fcbb 	bl	8008470 <HAL_GetTick>
 800aafa:	4602      	mov	r2, r0
 800aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafe:	1ad3      	subs	r3, r2, r3
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	d901      	bls.n	800ab08 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800ab04:	2303      	movs	r3, #3
 800ab06:	e03d      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800ab08:	4b20      	ldr	r3, [pc, #128]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d0f0      	beq.n	800aaf6 <HAL_RCC_OscConfig+0x672>
 800ab14:	e035      	b.n	800ab82 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab16:	4a1d      	ldr	r2, [pc, #116]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800ab18:	4b1c      	ldr	r3, [pc, #112]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab20:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800ab22:	4b1a      	ldr	r3, [pc, #104]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10b      	bne.n	800ab46 <HAL_RCC_OscConfig+0x6c2>
#if defined(RCC_PLLSAI2_SUPPORT)
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800ab2e:	4b17      	ldr	r3, [pc, #92]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
           && 
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d105      	bne.n	800ab46 <HAL_RCC_OscConfig+0x6c2>
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800ab3a:	4a14      	ldr	r2, [pc, #80]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800ab3c:	4b13      	ldr	r3, [pc, #76]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	f023 0303 	bic.w	r3, r3, #3
 800ab44:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800ab46:	4a11      	ldr	r2, [pc, #68]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800ab48:	4b10      	ldr	r3, [pc, #64]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800ab50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab54:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab56:	f7fd fc8b 	bl	8008470 <HAL_GetTick>
 800ab5a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800ab5c:	e008      	b.n	800ab70 <HAL_RCC_OscConfig+0x6ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab5e:	f7fd fc87 	bl	8008470 <HAL_GetTick>
 800ab62:	4602      	mov	r2, r0
 800ab64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d901      	bls.n	800ab70 <HAL_RCC_OscConfig+0x6ec>
          {
            return HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	e009      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800ab70:	4b06      	ldr	r3, [pc, #24]	; (800ab8c <HAL_RCC_OscConfig+0x708>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d1f0      	bne.n	800ab5e <HAL_RCC_OscConfig+0x6da>
 800ab7c:	e001      	b.n	800ab82 <HAL_RCC_OscConfig+0x6fe>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e000      	b.n	800ab84 <HAL_RCC_OscConfig+0x700>
    }
  }
  return HAL_OK;
 800ab82:	2300      	movs	r3, #0
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3730      	adds	r7, #48	; 0x30
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	40021000 	.word	0x40021000

0800ab90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b095      	sub	sp, #84	; 0x54
 800ab94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800ab96:	2300      	movs	r3, #0
 800ab98:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab9e:	2300      	movs	r3, #0
 800aba0:	643b      	str	r3, [r7, #64]	; 0x40
 800aba2:	2302      	movs	r3, #2
 800aba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aba6:	2302      	movs	r3, #2
 800aba8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t sysclockfreq = 0U;
 800abaa:	2300      	movs	r3, #0
 800abac:	647b      	str	r3, [r7, #68]	; 0x44

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800abae:	4b71      	ldr	r3, [pc, #452]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	f003 030c 	and.w	r3, r3, #12
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00b      	beq.n	800abd2 <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800abba:	4b6e      	ldr	r3, [pc, #440]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800abc2:	2b0c      	cmp	r3, #12
 800abc4:	d13c      	bne.n	800ac40 <HAL_RCC_GetSysClockFreq+0xb0>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800abc6:	4b6b      	ldr	r3, [pc, #428]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	f003 0303 	and.w	r3, r3, #3
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d136      	bne.n	800ac40 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 800abd2:	4b68      	ldr	r3, [pc, #416]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f003 0308 	and.w	r3, r3, #8
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d112      	bne.n	800ac04 <HAL_RCC_GetSysClockFreq+0x74>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 800abde:	4b65      	ldr	r3, [pc, #404]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800abe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abe4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800abe8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800abec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf0:	fa93 f3a3 	rbit	r3, r3
 800abf4:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800abf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf8:	fab3 f383 	clz	r3, r3
 800abfc:	fa22 f303 	lsr.w	r3, r2, r3
 800ac00:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac02:	e00f      	b.n	800ac24 <HAL_RCC_GetSysClockFreq+0x94>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 800ac04:	4b5b      	ldr	r3, [pc, #364]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ac0c:	23f0      	movs	r3, #240	; 0xf0
 800ac0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac12:	fa93 f3a3 	rbit	r3, r3
 800ac16:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800ac18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1a:	fab3 f383 	clz	r3, r3
 800ac1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac22:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ac24:	4a54      	ldr	r2, [pc, #336]	; (800ad78 <HAL_RCC_GetSysClockFreq+0x1e8>)
 800ac26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac2c:	64fb      	str	r3, [r7, #76]	; 0x4c

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800ac2e:	4b51      	ldr	r3, [pc, #324]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	f003 030c 	and.w	r3, r3, #12
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d113      	bne.n	800ac62 <HAL_RCC_GetSysClockFreq+0xd2>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ac3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac3c:	647b      	str	r3, [r7, #68]	; 0x44
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800ac3e:	e010      	b.n	800ac62 <HAL_RCC_GetSysClockFreq+0xd2>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ac40:	4b4c      	ldr	r3, [pc, #304]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	f003 030c 	and.w	r3, r3, #12
 800ac48:	2b04      	cmp	r3, #4
 800ac4a:	d102      	bne.n	800ac52 <HAL_RCC_GetSysClockFreq+0xc2>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ac4c:	4b4b      	ldr	r3, [pc, #300]	; (800ad7c <HAL_RCC_GetSysClockFreq+0x1ec>)
 800ac4e:	647b      	str	r3, [r7, #68]	; 0x44
 800ac50:	e007      	b.n	800ac62 <HAL_RCC_GetSysClockFreq+0xd2>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ac52:	4b48      	ldr	r3, [pc, #288]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	f003 030c 	and.w	r3, r3, #12
 800ac5a:	2b08      	cmp	r3, #8
 800ac5c:	d101      	bne.n	800ac62 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ac5e:	4b48      	ldr	r3, [pc, #288]	; (800ad80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800ac60:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ac62:	4b44      	ldr	r3, [pc, #272]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	f003 030c 	and.w	r3, r3, #12
 800ac6a:	2b0c      	cmp	r3, #12
 800ac6c:	d17b      	bne.n	800ad66 <HAL_RCC_GetSysClockFreq+0x1d6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800ac6e:	4b41      	ldr	r3, [pc, #260]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	f003 0303 	and.w	r3, r3, #3
 800ac76:	643b      	str	r3, [r7, #64]	; 0x40
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 800ac78:	4b3e      	ldr	r3, [pc, #248]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ac80:	2370      	movs	r3, #112	; 0x70
 800ac82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac86:	fa93 f3a3 	rbit	r3, r3
 800ac8a:	623b      	str	r3, [r7, #32]
  return(result);
 800ac8c:	6a3b      	ldr	r3, [r7, #32]
 800ac8e:	fab3 f383 	clz	r3, r3
 800ac92:	fa22 f303 	lsr.w	r3, r2, r3
 800ac96:	3301      	adds	r3, #1
 800ac98:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (pllsource)
 800ac9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac9c:	2b02      	cmp	r3, #2
 800ac9e:	d002      	beq.n	800aca6 <HAL_RCC_GetSysClockFreq+0x116>
 800aca0:	2b03      	cmp	r3, #3
 800aca2:	d018      	beq.n	800acd6 <HAL_RCC_GetSysClockFreq+0x146>
 800aca4:	e02f      	b.n	800ad06 <HAL_RCC_GetSysClockFreq+0x176>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 800aca6:	4a35      	ldr	r2, [pc, #212]	; (800ad7c <HAL_RCC_GetSysClockFreq+0x1ec>)
 800aca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800acae:	4a31      	ldr	r2, [pc, #196]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800acb0:	68d2      	ldr	r2, [r2, #12]
 800acb2:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 800acb6:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800acba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acbc:	69fa      	ldr	r2, [r7, #28]
 800acbe:	fa92 f2a2 	rbit	r2, r2
 800acc2:	61ba      	str	r2, [r7, #24]
  return(result);
 800acc4:	69ba      	ldr	r2, [r7, #24]
 800acc6:	fab2 f282 	clz	r2, r2
 800acca:	fa21 f202 	lsr.w	r2, r1, r2
 800acce:	fb02 f303 	mul.w	r3, r2, r3
 800acd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800acd4:	e02f      	b.n	800ad36 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 800acd6:	4a2a      	ldr	r2, [pc, #168]	; (800ad80 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800acd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acda:	fbb2 f3f3 	udiv	r3, r2, r3
 800acde:	4a25      	ldr	r2, [pc, #148]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800ace0:	68d2      	ldr	r2, [r2, #12]
 800ace2:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 800ace6:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800acea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acec:	697a      	ldr	r2, [r7, #20]
 800acee:	fa92 f2a2 	rbit	r2, r2
 800acf2:	613a      	str	r2, [r7, #16]
  return(result);
 800acf4:	693a      	ldr	r2, [r7, #16]
 800acf6:	fab2 f282 	clz	r2, r2
 800acfa:	fa21 f202 	lsr.w	r2, r1, r2
 800acfe:	fb02 f303 	mul.w	r3, r2, r3
 800ad02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ad04:	e017      	b.n	800ad36 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 800ad06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad0e:	4a19      	ldr	r2, [pc, #100]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800ad10:	68d2      	ldr	r2, [r2, #12]
 800ad12:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 800ad16:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800ad1a:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	fa92 f2a2 	rbit	r2, r2
 800ad22:	60ba      	str	r2, [r7, #8]
  return(result);
 800ad24:	68ba      	ldr	r2, [r7, #8]
 800ad26:	fab2 f282 	clz	r2, r2
 800ad2a:	fa21 f202 	lsr.w	r2, r1, r2
 800ad2e:	fb02 f303 	mul.w	r3, r2, r3
 800ad32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ad34:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 800ad36:	4b0f      	ldr	r3, [pc, #60]	; (800ad74 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ad3e:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800ad42:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	fa93 f3a3 	rbit	r3, r3
 800ad4a:	603b      	str	r3, [r7, #0]
  return(result);
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	fab3 f383 	clz	r3, r3
 800ad52:	fa22 f303 	lsr.w	r3, r2, r3
 800ad56:	3301      	adds	r3, #1
 800ad58:	005b      	lsls	r3, r3, #1
 800ad5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    sysclockfreq = pllvco/pllr;
 800ad5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad60:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad64:	647b      	str	r3, [r7, #68]	; 0x44
  }

  return sysclockfreq;
 800ad66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3754      	adds	r7, #84	; 0x54
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr
 800ad74:	40021000 	.word	0x40021000
 800ad78:	08017cb4 	.word	0x08017cb4
 800ad7c:	00f42400 	.word	0x00f42400
 800ad80:	007a1200 	.word	0x007a1200

0800ad84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad84:	b480      	push	{r7}
 800ad86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ad88:	4b03      	ldr	r3, [pc, #12]	; (800ad98 <HAL_RCC_GetHCLKFreq+0x14>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr
 800ad96:	bf00      	nop
 800ad98:	20000014 	.word	0x20000014

0800ad9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800ada2:	f7ff ffef 	bl	800ad84 <HAL_RCC_GetHCLKFreq>
 800ada6:	4601      	mov	r1, r0
 800ada8:	4b0b      	ldr	r3, [pc, #44]	; (800add8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800adb0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800adb4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	fa93 f3a3 	rbit	r3, r3
 800adbc:	603b      	str	r3, [r7, #0]
  return(result);
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	fab3 f383 	clz	r3, r3
 800adc4:	fa22 f303 	lsr.w	r3, r2, r3
 800adc8:	4a04      	ldr	r2, [pc, #16]	; (800addc <HAL_RCC_GetPCLK1Freq+0x40>)
 800adca:	5cd3      	ldrb	r3, [r2, r3]
 800adcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800add0:	4618      	mov	r0, r3
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	40021000 	.word	0x40021000
 800addc:	08017cac 	.word	0x08017cac

0800ade0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800ade6:	f7ff ffcd 	bl	800ad84 <HAL_RCC_GetHCLKFreq>
 800adea:	4601      	mov	r1, r0
 800adec:	4b0b      	ldr	r3, [pc, #44]	; (800ae1c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800adf4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800adf8:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	fa93 f3a3 	rbit	r3, r3
 800ae00:	603b      	str	r3, [r7, #0]
  return(result);
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	fab3 f383 	clz	r3, r3
 800ae08:	fa22 f303 	lsr.w	r3, r2, r3
 800ae0c:	4a04      	ldr	r2, [pc, #16]	; (800ae20 <HAL_RCC_GetPCLK2Freq+0x40>)
 800ae0e:	5cd3      	ldrb	r3, [r2, r3]
 800ae10:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	40021000 	.word	0x40021000
 800ae20:	08017cac 	.word	0x08017cac

0800ae24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800ae30:	2300      	movs	r3, #0
 800ae32:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ae34:	4b2a      	ldr	r3, [pc, #168]	; (800aee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ae36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d003      	beq.n	800ae48 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ae40:	f7ff fb12 	bl	800a468 <HAL_PWREx_GetVoltageRange>
 800ae44:	6178      	str	r0, [r7, #20]
 800ae46:	e014      	b.n	800ae72 <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ae48:	4a25      	ldr	r2, [pc, #148]	; (800aee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ae4a:	4b25      	ldr	r3, [pc, #148]	; (800aee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ae4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae52:	6593      	str	r3, [r2, #88]	; 0x58
 800ae54:	4b22      	ldr	r3, [pc, #136]	; (800aee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ae56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae5c:	60fb      	str	r3, [r7, #12]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ae60:	f7ff fb02 	bl	800a468 <HAL_PWREx_GetVoltageRange>
 800ae64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ae66:	4a1e      	ldr	r2, [pc, #120]	; (800aee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ae68:	4b1d      	ldr	r3, [pc, #116]	; (800aee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ae6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae78:	d10b      	bne.n	800ae92 <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b80      	cmp	r3, #128	; 0x80
 800ae7e:	d919      	bls.n	800aeb4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2ba0      	cmp	r3, #160	; 0xa0
 800ae84:	d902      	bls.n	800ae8c <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ae86:	2302      	movs	r3, #2
 800ae88:	613b      	str	r3, [r7, #16]
 800ae8a:	e013      	b.n	800aeb4 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	613b      	str	r3, [r7, #16]
 800ae90:	e010      	b.n	800aeb4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2b80      	cmp	r3, #128	; 0x80
 800ae96:	d902      	bls.n	800ae9e <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800ae98:	2303      	movs	r3, #3
 800ae9a:	613b      	str	r3, [r7, #16]
 800ae9c:	e00a      	b.n	800aeb4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2b80      	cmp	r3, #128	; 0x80
 800aea2:	d102      	bne.n	800aeaa <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800aea4:	2302      	movs	r3, #2
 800aea6:	613b      	str	r3, [r7, #16]
 800aea8:	e004      	b.n	800aeb4 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2b70      	cmp	r3, #112	; 0x70
 800aeae:	d101      	bne.n	800aeb4 <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 800aeb4:	490b      	ldr	r1, [pc, #44]	; (800aee4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800aeb6:	4b0b      	ldr	r3, [pc, #44]	; (800aee4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f023 0207 	bic.w	r2, r3, #7
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800aec4:	4b07      	ldr	r3, [pc, #28]	; (800aee4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 0207 	and.w	r2, r3, #7
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d001      	beq.n	800aed6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 800aed2:	2301      	movs	r3, #1
 800aed4:	e000      	b.n	800aed8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 800aed6:	2300      	movs	r3, #0
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3718      	adds	r7, #24
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	40021000 	.word	0x40021000
 800aee4:	40022000 	.word	0x40022000

0800aee8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800aee8:	b480      	push	{r7}
 800aeea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800aeec:	4a05      	ldr	r2, [pc, #20]	; (800af04 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800aeee:	4b05      	ldr	r3, [pc, #20]	; (800af04 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f043 0304 	orr.w	r3, r3, #4
 800aef6:	6013      	str	r3, [r2, #0]
}
 800aef8:	bf00      	nop
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	40021000 	.word	0x40021000

0800af08 <HAL_SD_Init>:
  * @param  hsd: SD handle
  * @param  SDCardInfo: HAL_SD_CardInfoTypedef structure for SD card information   
  * @retval HAL SD error state
  */
HAL_SD_ErrorTypedef HAL_SD_Init(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypedef *SDCardInfo)
{ 
 800af08:	b5b0      	push	{r4, r5, r7, lr}
 800af0a:	b08e      	sub	sp, #56	; 0x38
 800af0c:	af04      	add	r7, sp, #16
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 800af12:	2300      	movs	r3, #0
 800af14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  SD_InitTypeDef tmpinit;
  
  /* Initialize the low level hardware (MSP) */
  HAL_SD_MspInit(hsd);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f7fb fa0b 	bl	8006334 <HAL_SD_MspInit>
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  tmpinit.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800af1e:	2300      	movs	r3, #0
 800af20:	60fb      	str	r3, [r7, #12]
  tmpinit.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800af22:	2300      	movs	r3, #0
 800af24:	613b      	str	r3, [r7, #16]
  tmpinit.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800af26:	2300      	movs	r3, #0
 800af28:	617b      	str	r3, [r7, #20]
  tmpinit.BusWide             = SDMMC_BUS_WIDE_1B;
 800af2a:	2300      	movs	r3, #0
 800af2c:	61bb      	str	r3, [r7, #24]
  tmpinit.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800af2e:	2300      	movs	r3, #0
 800af30:	61fb      	str	r3, [r7, #28]
  tmpinit.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800af32:	2376      	movs	r3, #118	; 0x76
 800af34:	623b      	str	r3, [r7, #32]
  
  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, tmpinit);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681d      	ldr	r5, [r3, #0]
 800af3a:	466c      	mov	r4, sp
 800af3c:	f107 0318 	add.w	r3, r7, #24
 800af40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800af44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800af48:	f107 030c 	add.w	r3, r7, #12
 800af4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800af4e:	4628      	mov	r0, r5
 800af50:	f003 f9f4 	bl	800e33c <SDMMC_Init>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd); 
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f001 f884 	bl	800c062 <SD_PowerON>
 800af5a:	4603      	mov	r3, r0
 800af5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if(errorstate != SD_OK)     
 800af60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af64:	b2db      	uxtb	r3, r3
 800af66:	2b00      	cmp	r3, #0
 800af68:	d003      	beq.n	800af72 <HAL_SD_Init+0x6a>
  {
    return errorstate;
 800af6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	e039      	b.n	800afe6 <HAL_SD_Init+0xde>
  }
  
  /* Initialize the present SDMMC card(s) and put them in idle state */
  errorstate = SD_Initialize_Cards(hsd);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 ff71 	bl	800be5a <SD_Initialize_Cards>
 800af78:	4603      	mov	r3, r0
 800af7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (errorstate != SD_OK)
 800af7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af82:	b2db      	uxtb	r3, r3
 800af84:	2b00      	cmp	r3, #0
 800af86:	d003      	beq.n	800af90 <HAL_SD_Init+0x88>
  {
    return errorstate;
 800af88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	e02a      	b.n	800afe6 <HAL_SD_Init+0xde>
  }
  
  /* Read CSD/CID MSD registers */
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
 800af90:	6839      	ldr	r1, [r7, #0]
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 fb42 	bl	800b61c <HAL_SD_Get_CardInfo>
 800af98:	4603      	mov	r3, r0
 800af9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (errorstate == SD_OK)
 800af9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d10d      	bne.n	800afc4 <HAL_SD_Init+0xbc>
  {
    /* Select the Card */
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800afae:	041b      	lsls	r3, r3, #16
 800afb0:	f04f 0400 	mov.w	r4, #0
 800afb4:	461a      	mov	r2, r3
 800afb6:	4623      	mov	r3, r4
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f001 f829 	bl	800c010 <SD_Select_Deselect>
 800afbe:	4603      	mov	r3, r0
 800afc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  /* Configure SDMMC peripheral interface */
  SDMMC_Init(hsd->Instance, hsd->Init);   
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681d      	ldr	r5, [r3, #0]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	466c      	mov	r4, sp
 800afcc:	f103 0210 	add.w	r2, r3, #16
 800afd0:	ca07      	ldmia	r2, {r0, r1, r2}
 800afd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800afd6:	3304      	adds	r3, #4
 800afd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800afda:	4628      	mov	r0, r5
 800afdc:	f003 f9ae 	bl	800e33c <SDMMC_Init>
  
  return errorstate;
 800afe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afe4:	b2db      	uxtb	r3, r3
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3728      	adds	r7, #40	; 0x28
 800afea:	46bd      	mov	sp, r7
 800afec:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800aff0 <HAL_SD_ReadBlocks_DMA>:
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint32_t *pReadBuffer, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 800aff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aff2:	b091      	sub	sp, #68	; 0x44
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef sdmmc_cmdinitstructure;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800affe:	2300      	movs	r3, #0
 800b000:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  
  /* Initialize data control register */
  hsd->Instance->DCTRL = 0;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2200      	movs	r2, #0
 800b00a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Initialize handle flags */
  hsd->SdTransferCplt  = 0;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	649a      	str	r2, [r3, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2200      	movs	r2, #0
 800b016:	651a      	str	r2, [r3, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK; 
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2200      	movs	r2, #0
 800b01c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize SD Read operation */
  if(NumberOfBlocks > 1)
 800b01e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b020:	2b01      	cmp	r3, #1
 800b022:	d903      	bls.n	800b02c <HAL_SD_ReadBlocks_DMA+0x3c>
  {
    hsd->SdOperation = SD_READ_MULTIPLE_BLOCK;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2201      	movs	r2, #1
 800b028:	655a      	str	r2, [r3, #84]	; 0x54
 800b02a:	e002      	b.n	800b032 <HAL_SD_ReadBlocks_DMA+0x42>
  }
  else
  {
    hsd->SdOperation = SD_READ_SINGLE_BLOCK;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  /* Enable transfer interrupts */
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	6812      	ldr	r2, [r2, #0]
 800b03a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b03c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800b040:	63da      	str	r2, [r3, #60]	; 0x3c
                                 SDMMC_IT_DTIMEOUT |\
                                 SDMMC_IT_DATAEND  |\
                                 SDMMC_IT_RXOVERR));
  
  /* Enable SDMMC DMA transfer */
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	6812      	ldr	r2, [r2, #0]
 800b04a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b04c:	f042 0208 	orr.w	r2, r2, #8
 800b050:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Configure DMA user callbacks */
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b056:	4a4d      	ldr	r2, [pc, #308]	; (800b18c <HAL_SD_ReadBlocks_DMA+0x19c>)
 800b058:	62da      	str	r2, [r3, #44]	; 0x2c
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b05e:	4a4c      	ldr	r2, [pc, #304]	; (800b190 <HAL_SD_ReadBlocks_DMA+0x1a0>)
 800b060:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change DMA direction Periph to Memory */
  hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b066:	2200      	movs	r2, #0
 800b068:	609a      	str	r2, [r3, #8]
  hsd->hdmarx->Instance->CCR &= ~DMA_MEMORY_TO_PERIPH;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	68fa      	ldr	r2, [r7, #12]
 800b072:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b074:	6812      	ldr	r2, [r2, #0]
 800b076:	6812      	ldr	r2, [r2, #0]
 800b078:	f022 0210 	bic.w	r2, r2, #16
 800b07c:	601a      	str	r2, [r3, #0]
  
  /* Enable the DMA Channel */
  HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pReadBuffer, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	3380      	adds	r3, #128	; 0x80
 800b088:	461e      	mov	r6, r3
 800b08a:	68b9      	ldr	r1, [r7, #8]
 800b08c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b08e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b090:	fb02 f303 	mul.w	r3, r2, r3
 800b094:	089b      	lsrs	r3, r3, #2
 800b096:	460a      	mov	r2, r1
 800b098:	4631      	mov	r1, r6
 800b09a:	f7fd fc81 	bl	80089a0 <HAL_DMA_Start_IT>
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d10a      	bne.n	800b0bc <HAL_SD_ReadBlocks_DMA+0xcc>
  {
    BlockSize = 512;
 800b0a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0aa:	65bb      	str	r3, [r7, #88]	; 0x58
    ReadAddr /= 512;
 800b0ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0b0:	0a54      	lsrs	r4, r2, #9
 800b0b2:	ea44 54c3 	orr.w	r4, r4, r3, lsl #23
 800b0b6:	0a5d      	lsrs	r5, r3, #9
 800b0b8:	e9c7 4500 	strd	r4, r5, [r7]
  }
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 800b0bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b0be:	62bb      	str	r3, [r7, #40]	; 0x28
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 800b0c0:	2310      	movs	r3, #16
 800b0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800b0c4:	2340      	movs	r3, #64	; 0x40
 800b0c6:	633b      	str	r3, [r7, #48]	; 0x30
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	637b      	str	r3, [r7, #52]	; 0x34
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800b0cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0d0:	63bb      	str	r3, [r7, #56]	; 0x38
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b0da:	4611      	mov	r1, r2
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f003 f97b 	bl	800e3d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 800b0e2:	2110      	movs	r1, #16
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f001 f97b 	bl	800c3e0 <SD_CmdResp1Error>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  
  if (errorstate != SD_OK)
 800b0f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d002      	beq.n	800b0fe <HAL_SD_ReadBlocks_DMA+0x10e>
  {
    return errorstate;
 800b0f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b0fc:	e041      	b.n	800b182 <HAL_SD_ReadBlocks_DMA+0x192>
  }
  
  /* Configure the SD DPSM (Data Path State Machine) */ 
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 800b0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b102:	613b      	str	r3, [r7, #16]
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 800b104:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b106:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b108:	fb02 f303 	mul.w	r3, r2, r3
 800b10c:	617b      	str	r3, [r7, #20]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b10e:	2390      	movs	r3, #144	; 0x90
 800b110:	61bb      	str	r3, [r7, #24]
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b112:	2302      	movs	r3, #2
 800b114:	61fb      	str	r3, [r7, #28]
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b116:	2300      	movs	r3, #0
 800b118:	623b      	str	r3, [r7, #32]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800b11a:	2301      	movs	r3, #1
 800b11c:	627b      	str	r3, [r7, #36]	; 0x24
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f107 0210 	add.w	r2, r7, #16
 800b126:	4611      	mov	r1, r2
 800b128:	4618      	mov	r0, r3
 800b12a:	f003 f99b 	bl	800e464 <SDMMC_DataConfig>
  
  /* Check number of blocks command */
  if(NumberOfBlocks > 1)
 800b12e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b130:	2b01      	cmp	r3, #1
 800b132:	d902      	bls.n	800b13a <HAL_SD_ReadBlocks_DMA+0x14a>
  {
    /* Send CMD18 READ_MULT_BLOCK with argument data address */
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 800b134:	2312      	movs	r3, #18
 800b136:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b138:	e001      	b.n	800b13e <HAL_SD_ReadBlocks_DMA+0x14e>
  }
  else
  {
    /* Send CMD17 READ_SINGLE_BLOCK */
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 800b13a:	2311      	movs	r3, #17
 800b13c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  sdmmc_cmdinitstructure.Argument         = (uint32_t)ReadAddr;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b14a:	4611      	mov	r1, r2
 800b14c:	4618      	mov	r0, r3
 800b14e:	f003 f943 	bl	800e3d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  if(NumberOfBlocks > 1)
 800b152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b154:	2b01      	cmp	r3, #1
 800b156:	d907      	bls.n	800b168 <HAL_SD_ReadBlocks_DMA+0x178>
  {
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_MULT_BLOCK);
 800b158:	2112      	movs	r1, #18
 800b15a:	68f8      	ldr	r0, [r7, #12]
 800b15c:	f001 f940 	bl	800c3e0 <SD_CmdResp1Error>
 800b160:	4603      	mov	r3, r0
 800b162:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b166:	e006      	b.n	800b176 <HAL_SD_ReadBlocks_DMA+0x186>
  }
  else
  {
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_SINGLE_BLOCK);
 800b168:	2111      	movs	r1, #17
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	f001 f938 	bl	800c3e0 <SD_CmdResp1Error>
 800b170:	4603      	mov	r3, r0
 800b172:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
  
  /* Update the SD transfer error in SD handle */
  hsd->SdTransferErr = errorstate;
 800b176:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  return errorstate;
 800b17e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b182:	4618      	mov	r0, r3
 800b184:	3744      	adds	r7, #68	; 0x44
 800b186:	46bd      	mov	sp, r7
 800b188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b18a:	bf00      	nop
 800b18c:	0800bd79 	.word	0x0800bd79
 800b190:	0800bdaf 	.word	0x0800bdaf

0800b194 <HAL_SD_WriteBlocks_DMA>:
  * @note   BlockSize must be 512 bytes.
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint32_t *pWriteBuffer, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumberOfBlocks)
{
 800b194:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b196:	b091      	sub	sp, #68	; 0x44
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef sdmmc_cmdinitstructure;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  
  /* Initialize data control register */
  hsd->Instance->DCTRL = 0;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Initialize handle flags */
  hsd->SdTransferCplt  = 0;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	649a      	str	r2, [r3, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	651a      	str	r2, [r3, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize SD Write operation */
  if(NumberOfBlocks > 1)
 800b1c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d903      	bls.n	800b1d0 <HAL_SD_WriteBlocks_DMA+0x3c>
  {
    hsd->SdOperation = SD_WRITE_MULTIPLE_BLOCK;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2203      	movs	r2, #3
 800b1cc:	655a      	str	r2, [r3, #84]	; 0x54
 800b1ce:	e002      	b.n	800b1d6 <HAL_SD_WriteBlocks_DMA+0x42>
  }
  else
  {
    hsd->SdOperation = SD_WRITE_SINGLE_BLOCK;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2202      	movs	r2, #2
 800b1d4:	655a      	str	r2, [r3, #84]	; 0x54
  }  
  
  /* Enable transfer interrupts */
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	6812      	ldr	r2, [r2, #0]
 800b1de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b1e0:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800b1e4:	63da      	str	r2, [r3, #60]	; 0x3c
                                 SDMMC_IT_DTIMEOUT |\
                                 SDMMC_IT_DATAEND  |\
                                 SDMMC_IT_TXUNDERR)); 
  
  /* Configure DMA user callbacks */
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1ea:	4a54      	ldr	r2, [pc, #336]	; (800b33c <HAL_SD_WriteBlocks_DMA+0x1a8>)
 800b1ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hsd->hdmatx->XferErrorCallback = SD_DMA_TxError;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1f2:	4a53      	ldr	r2, [pc, #332]	; (800b340 <HAL_SD_WriteBlocks_DMA+0x1ac>)
 800b1f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change DMA direction Memory to Periph */
  hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1fa:	2210      	movs	r2, #16
 800b1fc:	609a      	str	r2, [r3, #8]
  hsd->hdmatx->Instance->CCR |= DMA_MEMORY_TO_PERIPH;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	68fa      	ldr	r2, [r7, #12]
 800b206:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b208:	6812      	ldr	r2, [r2, #0]
 800b20a:	6812      	ldr	r2, [r2, #0]
 800b20c:	f042 0210 	orr.w	r2, r2, #16
 800b210:	601a      	str	r2, [r3, #0]
  
  /* Enable the DMA Channel */
  HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pWriteBuffer, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800b216:	68b9      	ldr	r1, [r7, #8]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	3380      	adds	r3, #128	; 0x80
 800b21e:	461e      	mov	r6, r3
 800b220:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b222:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b224:	fb02 f303 	mul.w	r3, r2, r3
 800b228:	089b      	lsrs	r3, r3, #2
 800b22a:	4632      	mov	r2, r6
 800b22c:	f7fd fbb8 	bl	80089a0 <HAL_DMA_Start_IT>

  /* Enable SDMMC DMA transfer */
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	6812      	ldr	r2, [r2, #0]
 800b238:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b23a:	f042 0208 	orr.w	r2, r2, #8
 800b23e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6a1b      	ldr	r3, [r3, #32]
 800b244:	2b02      	cmp	r3, #2
 800b246:	d10a      	bne.n	800b25e <HAL_SD_WriteBlocks_DMA+0xca>
  {
    BlockSize = 512;
 800b248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b24c:	65bb      	str	r3, [r7, #88]	; 0x58
    WriteAddr /= 512;
 800b24e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b252:	0a54      	lsrs	r4, r2, #9
 800b254:	ea44 54c3 	orr.w	r4, r4, r3, lsl #23
 800b258:	0a5d      	lsrs	r5, r3, #9
 800b25a:	e9c7 4500 	strd	r4, r5, [r7]
  }

  /* Set Block Size for Card */ 
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 800b25e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b260:	62bb      	str	r3, [r7, #40]	; 0x28
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 800b262:	2310      	movs	r3, #16
 800b264:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800b266:	2340      	movs	r3, #64	; 0x40
 800b268:	633b      	str	r3, [r7, #48]	; 0x30
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800b26a:	2300      	movs	r3, #0
 800b26c:	637b      	str	r3, [r7, #52]	; 0x34
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800b26e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b272:	63bb      	str	r3, [r7, #56]	; 0x38
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b27c:	4611      	mov	r1, r2
 800b27e:	4618      	mov	r0, r3
 800b280:	f003 f8aa 	bl	800e3d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 800b284:	2110      	movs	r1, #16
 800b286:	68f8      	ldr	r0, [r7, #12]
 800b288:	f001 f8aa 	bl	800c3e0 <SD_CmdResp1Error>
 800b28c:	4603      	mov	r3, r0
 800b28e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (errorstate != SD_OK)
 800b292:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b296:	2b00      	cmp	r3, #0
 800b298:	d002      	beq.n	800b2a0 <HAL_SD_WriteBlocks_DMA+0x10c>
  {
    return errorstate;
 800b29a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b29e:	e048      	b.n	800b332 <HAL_SD_WriteBlocks_DMA+0x19e>
  }
  
  /* Check number of blocks command */
  if(NumberOfBlocks <= 1)
 800b2a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d802      	bhi.n	800b2ac <HAL_SD_WriteBlocks_DMA+0x118>
  {
    /* Send CMD24 WRITE_SINGLE_BLOCK */
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 800b2a6:	2318      	movs	r3, #24
 800b2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2aa:	e001      	b.n	800b2b0 <HAL_SD_WriteBlocks_DMA+0x11c>
  }
  else
  {
    /* Send CMD25 WRITE_MULT_BLOCK with argument data address */
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 800b2ac:	2319      	movs	r3, #25
 800b2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  sdmmc_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b2bc:	4611      	mov	r1, r2
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f003 f88a 	bl	800e3d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  if(NumberOfBlocks > 1)
 800b2c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d907      	bls.n	800b2da <HAL_SD_WriteBlocks_DMA+0x146>
  {
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_MULT_BLOCK);
 800b2ca:	2119      	movs	r1, #25
 800b2cc:	68f8      	ldr	r0, [r7, #12]
 800b2ce:	f001 f887 	bl	800c3e0 <SD_CmdResp1Error>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b2d8:	e006      	b.n	800b2e8 <HAL_SD_WriteBlocks_DMA+0x154>
  }
  else
  {
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_SINGLE_BLOCK);
 800b2da:	2118      	movs	r1, #24
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f001 f87f 	bl	800c3e0 <SD_CmdResp1Error>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
  
  if (errorstate != SD_OK)
 800b2e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d002      	beq.n	800b2f6 <HAL_SD_WriteBlocks_DMA+0x162>
  {
    return errorstate;
 800b2f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b2f4:	e01d      	b.n	800b332 <HAL_SD_WriteBlocks_DMA+0x19e>
  }
  
  /* Configure the SD DPSM (Data Path State Machine) */ 
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 800b2f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2fa:	613b      	str	r3, [r7, #16]
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 800b2fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b2fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b300:	fb02 f303 	mul.w	r3, r2, r3
 800b304:	617b      	str	r3, [r7, #20]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b306:	2390      	movs	r3, #144	; 0x90
 800b308:	61bb      	str	r3, [r7, #24]
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b30a:	2300      	movs	r3, #0
 800b30c:	61fb      	str	r3, [r7, #28]
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b30e:	2300      	movs	r3, #0
 800b310:	623b      	str	r3, [r7, #32]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800b312:	2301      	movs	r3, #1
 800b314:	627b      	str	r3, [r7, #36]	; 0x24
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f107 0210 	add.w	r2, r7, #16
 800b31e:	4611      	mov	r1, r2
 800b320:	4618      	mov	r0, r3
 800b322:	f003 f89f 	bl	800e464 <SDMMC_DataConfig>
  
  hsd->SdTransferErr = errorstate;
 800b326:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  return errorstate;
 800b32e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b332:	4618      	mov	r0, r3
 800b334:	3744      	adds	r7, #68	; 0x44
 800b336:	46bd      	mov	sp, r7
 800b338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b33a:	bf00      	nop
 800b33c:	0800bdcf 	.word	0x0800bdcf
 800b340:	0800be05 	.word	0x0800be05

0800b344 <HAL_SD_CheckReadOperation>:
  * @param  hsd: SD handle
  * @param  Timeout: Timeout duration  
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_CheckReadOperation(SD_HandleTypeDef *hsd, uint32_t Timeout)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b088      	sub	sp, #32
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800b34e:	2300      	movs	r3, #0
 800b350:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout = Timeout;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1, tmp2;
  HAL_SD_ErrorTypedef tmp3;
  
  /* Wait for DMA/SD transfer end or SD error variables to be in SD handle */
  tmp1 = hsd->DmaTransferCplt; 
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b35a:	617b      	str	r3, [r7, #20]
  tmp2 = hsd->SdTransferCplt;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b360:	613b      	str	r3, [r7, #16]
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b366:	73fb      	strb	r3, [r7, #15]
    
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 800b368:	e00b      	b.n	800b382 <HAL_SD_CheckReadOperation+0x3e>
  {
    tmp1 = hsd->DmaTransferCplt; 
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b36e:	617b      	str	r3, [r7, #20]
    tmp2 = hsd->SdTransferCplt;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b374:	613b      	str	r3, [r7, #16]
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b37a:	73fb      	strb	r3, [r7, #15]
    timeout--;
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	3b01      	subs	r3, #1
 800b380:	61bb      	str	r3, [r7, #24]
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 800b382:	697a      	ldr	r2, [r7, #20]
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	4013      	ands	r3, r2
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d105      	bne.n	800b398 <HAL_SD_CheckReadOperation+0x54>
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d102      	bne.n	800b398 <HAL_SD_CheckReadOperation+0x54>
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1e8      	bne.n	800b36a <HAL_SD_CheckReadOperation+0x26>
  }

  timeout = Timeout;
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	61bb      	str	r3, [r7, #24]
  
  /* Wait until the Rx transfer is no longer active */
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXACT)) && (timeout > 0))
 800b39c:	e002      	b.n	800b3a4 <HAL_SD_CheckReadOperation+0x60>
  {
    timeout--;  
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	3b01      	subs	r3, #1
 800b3a2:	61bb      	str	r3, [r7, #24]
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXACT)) && (timeout > 0))
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d002      	beq.n	800b3b8 <HAL_SD_CheckReadOperation+0x74>
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1f2      	bne.n	800b39e <HAL_SD_CheckReadOperation+0x5a>
  }
  
  /* Send stop command in multiblock read */
  if (hsd->SdOperation == SD_READ_MULTIPLE_BLOCK)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d104      	bne.n	800b3ca <HAL_SD_CheckReadOperation+0x86>
  {
    errorstate = HAL_SD_StopTransfer(hsd);
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 fc9b 	bl	800bcfc <HAL_SD_StopTransfer>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	77fb      	strb	r3, [r7, #31]
  }
  
  if ((timeout == 0) && (errorstate == SD_OK))
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d104      	bne.n	800b3da <HAL_SD_CheckReadOperation+0x96>
 800b3d0:	7ffb      	ldrb	r3, [r7, #31]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d101      	bne.n	800b3da <HAL_SD_CheckReadOperation+0x96>
  {
    errorstate = SD_DATA_TIMEOUT;
 800b3d6:	2304      	movs	r3, #4
 800b3d8:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b3e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Return error state */
  if (hsd->SdTransferErr != SD_OK)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d003      	beq.n	800b3f4 <HAL_SD_CheckReadOperation+0xb0>
  {
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	e000      	b.n	800b3f6 <HAL_SD_CheckReadOperation+0xb2>
  }
  
  return errorstate;
 800b3f4:	7ffb      	ldrb	r3, [r7, #31]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3720      	adds	r7, #32
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <HAL_SD_CheckWriteOperation>:
  * @param  hsd: SD handle
  * @param  Timeout: Timeout duration  
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_CheckWriteOperation(SD_HandleTypeDef *hsd, uint32_t Timeout)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b088      	sub	sp, #32
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
 800b406:	6039      	str	r1, [r7, #0]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800b408:	2300      	movs	r3, #0
 800b40a:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout = Timeout;
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1, tmp2;
  HAL_SD_ErrorTypedef tmp3;

  /* Wait for DMA/SD transfer end or SD error variables to be in SD handle */
  tmp1 = hsd->DmaTransferCplt; 
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b414:	617b      	str	r3, [r7, #20]
  tmp2 = hsd->SdTransferCplt;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b41a:	613b      	str	r3, [r7, #16]
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b420:	73fb      	strb	r3, [r7, #15]
    
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 800b422:	e00b      	b.n	800b43c <HAL_SD_CheckWriteOperation+0x3e>
  {
    tmp1 = hsd->DmaTransferCplt; 
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b428:	617b      	str	r3, [r7, #20]
    tmp2 = hsd->SdTransferCplt;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b42e:	613b      	str	r3, [r7, #16]
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b434:	73fb      	strb	r3, [r7, #15]
    timeout--;
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	3b01      	subs	r3, #1
 800b43a:	61bb      	str	r3, [r7, #24]
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 800b43c:	697a      	ldr	r2, [r7, #20]
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	4013      	ands	r3, r2
 800b442:	2b00      	cmp	r3, #0
 800b444:	d105      	bne.n	800b452 <HAL_SD_CheckWriteOperation+0x54>
 800b446:	7bfb      	ldrb	r3, [r7, #15]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d102      	bne.n	800b452 <HAL_SD_CheckWriteOperation+0x54>
 800b44c:	69bb      	ldr	r3, [r7, #24]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1e8      	bne.n	800b424 <HAL_SD_CheckWriteOperation+0x26>
  }
  
  timeout = Timeout;
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	61bb      	str	r3, [r7, #24]
  
  /* Wait until the Tx transfer is no longer active */
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXACT))  && (timeout > 0))
 800b456:	e002      	b.n	800b45e <HAL_SD_CheckWriteOperation+0x60>
  {
    timeout--;  
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	3b01      	subs	r3, #1
 800b45c:	61bb      	str	r3, [r7, #24]
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXACT))  && (timeout > 0))
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d002      	beq.n	800b472 <HAL_SD_CheckWriteOperation+0x74>
 800b46c:	69bb      	ldr	r3, [r7, #24]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d1f2      	bne.n	800b458 <HAL_SD_CheckWriteOperation+0x5a>
  }

  /* Send stop command in multiblock write */
  if (hsd->SdOperation == SD_WRITE_MULTIPLE_BLOCK)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b476:	2b03      	cmp	r3, #3
 800b478:	d104      	bne.n	800b484 <HAL_SD_CheckWriteOperation+0x86>
  {
    errorstate = HAL_SD_StopTransfer(hsd);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 fc3e 	bl	800bcfc <HAL_SD_StopTransfer>
 800b480:	4603      	mov	r3, r0
 800b482:	77fb      	strb	r3, [r7, #31]
  }
  
  if ((timeout == 0) && (errorstate == SD_OK))
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d104      	bne.n	800b494 <HAL_SD_CheckWriteOperation+0x96>
 800b48a:	7ffb      	ldrb	r3, [r7, #31]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d101      	bne.n	800b494 <HAL_SD_CheckWriteOperation+0x96>
  {
    errorstate = SD_DATA_TIMEOUT;
 800b490:	2304      	movs	r3, #4
 800b492:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b49c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Return error state */
  if (hsd->SdTransferErr != SD_OK)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d003      	beq.n	800b4ae <HAL_SD_CheckWriteOperation+0xb0>
  {
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	e007      	b.n	800b4be <HAL_SD_CheckWriteOperation+0xc0>
  }
  
  /* Wait until write is complete */
  while(HAL_SD_GetStatus(hsd) != SD_TRANSFER_OK)
 800b4ae:	bf00      	nop
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 fc47 	bl	800bd44 <HAL_SD_GetStatus>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1f9      	bne.n	800b4b0 <HAL_SD_CheckWriteOperation+0xb2>
  {    
  }

  return errorstate; 
 800b4bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3720      	adds	r7, #32
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{  
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b082      	sub	sp, #8
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
  /* Check for SDMMC interrupt flags */
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d00e      	beq.n	800b4fa <HAL_SD_IRQHandler+0x34>
  {
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_IT_DATAEND);  
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4e4:	639a      	str	r2, [r3, #56]	; 0x38
      
    /* SD transfer is complete */
    hsd->SdTransferCplt = 1;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	649a      	str	r2, [r3, #72]	; 0x48

    /* No transfer error */ 
    hsd->SdTransferErr  = SD_OK;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	64da      	str	r2, [r3, #76]	; 0x4c

    HAL_SD_XferCpltCallback(hsd);  
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f856 	bl	800b5a4 <HAL_SD_XferCpltCallback>
 800b4f8:	e046      	b.n	800b588 <HAL_SD_IRQHandler+0xc2>
  }  
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL))
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b500:	f003 0302 	and.w	r3, r3, #2
 800b504:	2b00      	cmp	r3, #0
 800b506:	d00a      	beq.n	800b51e <HAL_SD_IRQHandler+0x58>
  {
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2202      	movs	r2, #2
 800b50e:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->SdTransferErr = SD_DATA_CRC_FAIL;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2202      	movs	r2, #2
 800b514:	64da      	str	r2, [r3, #76]	; 0x4c
    
    HAL_SD_XferErrorCallback(hsd);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 f84e 	bl	800b5b8 <HAL_SD_XferErrorCallback>
 800b51c:	e034      	b.n	800b588 <HAL_SD_IRQHandler+0xc2>
    
  }
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b524:	f003 0308 	and.w	r3, r3, #8
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00a      	beq.n	800b542 <HAL_SD_IRQHandler+0x7c>
  {
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2208      	movs	r2, #8
 800b532:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->SdTransferErr = SD_DATA_TIMEOUT;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2204      	movs	r2, #4
 800b538:	64da      	str	r2, [r3, #76]	; 0x4c
    
    HAL_SD_XferErrorCallback(hsd);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 f83c 	bl	800b5b8 <HAL_SD_XferErrorCallback>
 800b540:	e022      	b.n	800b588 <HAL_SD_IRQHandler+0xc2>
  }
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_RXOVERR))
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b548:	f003 0320 	and.w	r3, r3, #32
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00a      	beq.n	800b566 <HAL_SD_IRQHandler+0xa0>
  {
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2220      	movs	r2, #32
 800b556:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->SdTransferErr = SD_RX_OVERRUN;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2206      	movs	r2, #6
 800b55c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    HAL_SD_XferErrorCallback(hsd);
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 f82a 	bl	800b5b8 <HAL_SD_XferErrorCallback>
 800b564:	e010      	b.n	800b588 <HAL_SD_IRQHandler+0xc2>
  }
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_TXUNDERR))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b56c:	f003 0310 	and.w	r3, r3, #16
 800b570:	2b00      	cmp	r3, #0
 800b572:	d009      	beq.n	800b588 <HAL_SD_IRQHandler+0xc2>
  {
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_TXUNDERR);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2210      	movs	r2, #16
 800b57a:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2205      	movs	r2, #5
 800b580:	64da      	str	r2, [r3, #76]	; 0x4c
    
    HAL_SD_XferErrorCallback(hsd);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 f818 	bl	800b5b8 <HAL_SD_XferErrorCallback>
  {
    /* No error flag set */
  }  

  /* Disable all SDMMC peripheral interrupt sources */
  __HAL_SD_SDMMC_DISABLE_IT(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_DATAEND  |\
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b592:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800b596:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800b59a:	63d3      	str	r3, [r2, #60]	; 0x3c
                                 SDMMC_IT_TXFIFOHE | SDMMC_IT_RXFIFOHF | SDMMC_IT_TXUNDERR |\
                                 SDMMC_IT_RXOVERR);                               
}
 800b59c:	bf00      	nop
 800b59e:	3708      	adds	r7, #8
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <HAL_SD_XferCpltCallback>:
  * @brief  SD end of transfer callback.
  * @param  hsd: SD handle 
  * @retval None
  */
__weak void HAL_SD_XferCpltCallback(SD_HandleTypeDef *hsd)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_XferCpltCallback could be implemented in the user file
   */ 
}
 800b5ac:	bf00      	nop
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <HAL_SD_XferErrorCallback>:
  * @brief  SD Transfer Error callback.
  * @param  hsd: SD handle
  * @retval None
  */
__weak void HAL_SD_XferErrorCallback(SD_HandleTypeDef *hsd)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_XferErrorCallback could be implemented in the user file
   */ 
}
 800b5c0:	bf00      	nop
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <HAL_SD_DMA_RxCpltCallback>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
__weak void HAL_SD_DMA_RxCpltCallback(DMA_HandleTypeDef *hdma)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_DMA_RxCpltCallback could be implemented in the user file
   */ 
}  
 800b5d4:	bf00      	nop
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <HAL_SD_DMA_RxErrorCallback>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
__weak void HAL_SD_DMA_RxErrorCallback(DMA_HandleTypeDef *hdma)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_DMA_RxErrorCallback could be implemented in the user file
   */ 
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <HAL_SD_DMA_TxCpltCallback>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
__weak void HAL_SD_DMA_TxCpltCallback(DMA_HandleTypeDef *hdma)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdma);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_DMA_TxCpltCallback could be implemented in the user file
   */ 
}  
 800b5fc:	bf00      	nop
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <HAL_SD_DMA_TxErrorCallback>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
__weak void HAL_SD_DMA_TxErrorCallback(DMA_HandleTypeDef *hdma)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_DMA_TxErrorCallback could be implemented in the user file
   */ 
}
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <HAL_SD_Get_CardInfo>:
  * @param  pCardInfo: Pointer to a HAL_SD_CardInfoTypedef structure that  
  *         contains all SD cardinformation  
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_Get_CardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypedef *pCardInfo)
{
 800b61c:	b4b0      	push	{r4, r5, r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800b626:	2200      	movs	r2, #0
 800b628:	73fa      	strb	r2, [r7, #15]
  uint32_t tmp = 0;
 800b62a:	2200      	movs	r2, #0
 800b62c:	60ba      	str	r2, [r7, #8]
  
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	6a12      	ldr	r2, [r2, #32]
 800b632:	b2d1      	uxtb	r1, r2
 800b634:	683a      	ldr	r2, [r7, #0]
 800b636:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b63e:	b291      	uxth	r1, r2
 800b640:	683a      	ldr	r2, [r7, #0]
 800b642:	f8a2 1054 	strh.w	r1, [r2, #84]	; 0x54
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b64a:	0e12      	lsrs	r2, r2, #24
 800b64c:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	0992      	lsrs	r2, r2, #6
 800b652:	b2d2      	uxtb	r2, r2
 800b654:	f002 0203 	and.w	r2, r2, #3
 800b658:	b2d1      	uxtb	r1, r2
 800b65a:	683a      	ldr	r2, [r7, #0]
 800b65c:	7011      	strb	r1, [r2, #0]
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800b65e:	68ba      	ldr	r2, [r7, #8]
 800b660:	0892      	lsrs	r2, r2, #2
 800b662:	b2d2      	uxtb	r2, r2
 800b664:	f002 020f 	and.w	r2, r2, #15
 800b668:	b2d1      	uxtb	r1, r2
 800b66a:	683a      	ldr	r2, [r7, #0]
 800b66c:	7051      	strb	r1, [r2, #1]
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03;
 800b66e:	68ba      	ldr	r2, [r7, #8]
 800b670:	b2d2      	uxtb	r2, r2
 800b672:	f002 0203 	and.w	r2, r2, #3
 800b676:	b2d1      	uxtb	r1, r2
 800b678:	683a      	ldr	r2, [r7, #0]
 800b67a:	7091      	strb	r1, [r2, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b680:	0c12      	lsrs	r2, r2, #16
 800b682:	b2d2      	uxtb	r2, r2
 800b684:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.TAAC = (uint8_t)tmp;
 800b686:	68ba      	ldr	r2, [r7, #8]
 800b688:	b2d1      	uxtb	r1, r2
 800b68a:	683a      	ldr	r2, [r7, #0]
 800b68c:	70d1      	strb	r1, [r2, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b692:	0a12      	lsrs	r2, r2, #8
 800b694:	b2d2      	uxtb	r2, r2
 800b696:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 800b698:	68ba      	ldr	r2, [r7, #8]
 800b69a:	b2d1      	uxtb	r1, r2
 800b69c:	683a      	ldr	r2, [r7, #0]
 800b69e:	7111      	strb	r1, [r2, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b6a4:	b2d2      	uxtb	r2, r2
 800b6a6:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 800b6a8:	68ba      	ldr	r2, [r7, #8]
 800b6aa:	b2d1      	uxtb	r1, r2
 800b6ac:	683a      	ldr	r2, [r7, #0]
 800b6ae:	7151      	strb	r1, [r2, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b6b4:	0e12      	lsrs	r2, r2, #24
 800b6b6:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
 800b6b8:	68ba      	ldr	r2, [r7, #8]
 800b6ba:	b292      	uxth	r2, r2
 800b6bc:	0112      	lsls	r2, r2, #4
 800b6be:	b291      	uxth	r1, r2
 800b6c0:	683a      	ldr	r2, [r7, #0]
 800b6c2:	80d1      	strh	r1, [r2, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000) >> 16;
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b6c8:	0c12      	lsrs	r2, r2, #16
 800b6ca:	b2d2      	uxtb	r2, r2
 800b6cc:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800b6ce:	683a      	ldr	r2, [r7, #0]
 800b6d0:	88d2      	ldrh	r2, [r2, #6]
 800b6d2:	b291      	uxth	r1, r2
 800b6d4:	68ba      	ldr	r2, [r7, #8]
 800b6d6:	0912      	lsrs	r2, r2, #4
 800b6d8:	b292      	uxth	r2, r2
 800b6da:	f002 020f 	and.w	r2, r2, #15
 800b6de:	b292      	uxth	r2, r2
 800b6e0:	430a      	orrs	r2, r1
 800b6e2:	b291      	uxth	r1, r2
 800b6e4:	683a      	ldr	r2, [r7, #0]
 800b6e6:	80d1      	strh	r1, [r2, #6]
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0F);
 800b6e8:	68ba      	ldr	r2, [r7, #8]
 800b6ea:	b2d2      	uxtb	r2, r2
 800b6ec:	f002 020f 	and.w	r2, r2, #15
 800b6f0:	b2d1      	uxtb	r1, r2
 800b6f2:	683a      	ldr	r2, [r7, #0]
 800b6f4:	7211      	strb	r1, [r2, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00) >> 8;
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b6fa:	0a12      	lsrs	r2, r2, #8
 800b6fc:	b2d2      	uxtb	r2, r2
 800b6fe:	60ba      	str	r2, [r7, #8]
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	09d2      	lsrs	r2, r2, #7
 800b704:	b2d2      	uxtb	r2, r2
 800b706:	f002 0201 	and.w	r2, r2, #1
 800b70a:	b2d1      	uxtb	r1, r2
 800b70c:	683a      	ldr	r2, [r7, #0]
 800b70e:	7251      	strb	r1, [r2, #9]
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800b710:	68ba      	ldr	r2, [r7, #8]
 800b712:	0992      	lsrs	r2, r2, #6
 800b714:	b2d2      	uxtb	r2, r2
 800b716:	f002 0201 	and.w	r2, r2, #1
 800b71a:	b2d1      	uxtb	r1, r2
 800b71c:	683a      	ldr	r2, [r7, #0]
 800b71e:	7291      	strb	r1, [r2, #10]
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	0952      	lsrs	r2, r2, #5
 800b724:	b2d2      	uxtb	r2, r2
 800b726:	f002 0201 	and.w	r2, r2, #1
 800b72a:	b2d1      	uxtb	r1, r2
 800b72c:	683a      	ldr	r2, [r7, #0]
 800b72e:	72d1      	strb	r1, [r2, #11]
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800b730:	68ba      	ldr	r2, [r7, #8]
 800b732:	0912      	lsrs	r2, r2, #4
 800b734:	b2d2      	uxtb	r2, r2
 800b736:	f002 0201 	and.w	r2, r2, #1
 800b73a:	b2d1      	uxtb	r1, r2
 800b73c:	683a      	ldr	r2, [r7, #0]
 800b73e:	7311      	strb	r1, [r2, #12]
  pCardInfo->SD_csd.Reserved2       = 0; /*!< Reserved */
 800b740:	683a      	ldr	r2, [r7, #0]
 800b742:	2100      	movs	r1, #0
 800b744:	7351      	strb	r1, [r2, #13]
  
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	6a12      	ldr	r2, [r2, #32]
 800b74a:	2a00      	cmp	r2, #0
 800b74c:	d004      	beq.n	800b758 <HAL_SD_Get_CardInfo+0x13c>
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	6a12      	ldr	r2, [r2, #32]
 800b752:	2a01      	cmp	r2, #1
 800b754:	f040 809b 	bne.w	800b88e <HAL_SD_Get_CardInfo+0x272>
  {
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	029b      	lsls	r3, r3, #10
 800b75c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FF);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	60bb      	str	r3, [r7, #8]
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	691a      	ldr	r2, [r3, #16]
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	431a      	orrs	r2, r3
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b77e:	0e1b      	lsrs	r3, r3, #24
 800b780:	b2db      	uxtb	r3, r3
 800b782:	60bb      	str	r3, [r7, #8]
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	691a      	ldr	r2, [r3, #16]
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	099b      	lsrs	r3, r3, #6
 800b78c:	f003 0303 	and.w	r3, r3, #3
 800b790:	431a      	orrs	r2, r3
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	611a      	str	r2, [r3, #16]
    
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	08db      	lsrs	r3, r3, #3
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	f003 0307 	and.w	r3, r3, #7
 800b7a0:	b2da      	uxtb	r2, r3
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	751a      	strb	r2, [r3, #20]
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	f003 0307 	and.w	r3, r3, #7
 800b7ae:	b2da      	uxtb	r2, r3
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000) >> 16);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b8:	0c1b      	lsrs	r3, r3, #16
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	60bb      	str	r3, [r7, #8]
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	095b      	lsrs	r3, r3, #5
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	f003 0307 	and.w	r3, r3, #7
 800b7c8:	b2da      	uxtb	r2, r3
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	759a      	strb	r2, [r3, #22]
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	089b      	lsrs	r3, r3, #2
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	f003 0307 	and.w	r3, r3, #7
 800b7d8:	b2da      	uxtb	r2, r3
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	75da      	strb	r2, [r3, #23]
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	005b      	lsls	r3, r3, #1
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	f003 0306 	and.w	r3, r3, #6
 800b7ea:	b2da      	uxtb	r2, r3
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7f4:	0a1b      	lsrs	r3, r3, #8
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	60bb      	str	r3, [r7, #8]
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	7e1b      	ldrb	r3, [r3, #24]
 800b7fe:	b2da      	uxtb	r2, r3
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	09db      	lsrs	r3, r3, #7
 800b804:	b2db      	uxtb	r3, r3
 800b806:	f003 0301 	and.w	r3, r3, #1
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	4313      	orrs	r3, r2
 800b80e:	b2da      	uxtb	r2, r3
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	761a      	strb	r2, [r3, #24]
    
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	3301      	adds	r3, #1
 800b81a:	f04f 0400 	mov.w	r4, #0
 800b81e:	683a      	ldr	r2, [r7, #0]
 800b820:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	7e1b      	ldrb	r3, [r3, #24]
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	3302      	adds	r3, #2
 800b82c:	2201      	movs	r2, #1
 800b82e:	fa02 f303 	lsl.w	r3, r2, r3
 800b832:	683a      	ldr	r2, [r7, #0]
 800b834:	e9d2 1212 	ldrd	r1, r2, [r2, #72]	; 0x48
 800b838:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800b83c:	fb03 f502 	mul.w	r5, r3, r2
 800b840:	fb01 f004 	mul.w	r0, r1, r4
 800b844:	4428      	add	r0, r5
 800b846:	fba1 3403 	umull	r3, r4, r1, r3
 800b84a:	1902      	adds	r2, r0, r4
 800b84c:	4614      	mov	r4, r2
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	7a1b      	ldrb	r3, [r3, #8]
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	461a      	mov	r2, r3
 800b85c:	2301      	movs	r3, #1
 800b85e:	4093      	lsls	r3, r2
 800b860:	461a      	mov	r2, r3
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	651a      	str	r2, [r3, #80]	; 0x50
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	e9d3 1212 	ldrd	r1, r2, [r3, #72]	; 0x48
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b870:	f04f 0400 	mov.w	r4, #0
 800b874:	fb03 f502 	mul.w	r5, r3, r2
 800b878:	fb01 f004 	mul.w	r0, r1, r4
 800b87c:	4428      	add	r0, r5
 800b87e:	fba1 3403 	umull	r3, r4, r1, r3
 800b882:	1902      	adds	r2, r0, r4
 800b884:	4614      	mov	r4, r2
 800b886:	683a      	ldr	r2, [r7, #0]
 800b888:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
 800b88c:	e03f      	b.n	800b90e <HAL_SD_Get_CardInfo+0x2f2>
  }
  else if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	6a12      	ldr	r2, [r2, #32]
 800b892:	2a02      	cmp	r2, #2
 800b894:	d139      	bne.n	800b90a <HAL_SD_Get_CardInfo+0x2ee>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FF);
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b89a:	b2d2      	uxtb	r2, r2
 800b89c:	60ba      	str	r2, [r7, #8]
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 800b89e:	68ba      	ldr	r2, [r7, #8]
 800b8a0:	0412      	lsls	r2, r2, #16
 800b8a2:	f402 117c 	and.w	r1, r2, #4128768	; 0x3f0000
 800b8a6:	683a      	ldr	r2, [r7, #0]
 800b8a8:	6111      	str	r1, [r2, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b8ae:	0e12      	lsrs	r2, r2, #24
 800b8b0:	b2d2      	uxtb	r2, r2
 800b8b2:	60ba      	str	r2, [r7, #8]
    
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 800b8b4:	683a      	ldr	r2, [r7, #0]
 800b8b6:	6911      	ldr	r1, [r2, #16]
 800b8b8:	68ba      	ldr	r2, [r7, #8]
 800b8ba:	0212      	lsls	r2, r2, #8
 800b8bc:	4311      	orrs	r1, r2
 800b8be:	683a      	ldr	r2, [r7, #0]
 800b8c0:	6111      	str	r1, [r2, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000) >> 16);
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b8c6:	0c12      	lsrs	r2, r2, #16
 800b8c8:	b2d2      	uxtb	r2, r2
 800b8ca:	60ba      	str	r2, [r7, #8]
    
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 800b8cc:	683a      	ldr	r2, [r7, #0]
 800b8ce:	6911      	ldr	r1, [r2, #16]
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	4311      	orrs	r1, r2
 800b8d4:	683a      	ldr	r2, [r7, #0]
 800b8d6:	6111      	str	r1, [r2, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00) >> 8);
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b8dc:	0a12      	lsrs	r2, r2, #8
 800b8de:	b2d2      	uxtb	r2, r2
 800b8e0:	60ba      	str	r2, [r7, #8]
    
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 800b8e2:	683a      	ldr	r2, [r7, #0]
 800b8e4:	6912      	ldr	r2, [r2, #16]
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	f04f 0200 	mov.w	r2, #0
 800b8ec:	3101      	adds	r1, #1
 800b8ee:	f142 0200 	adc.w	r2, r2, #0
 800b8f2:	04d4      	lsls	r4, r2, #19
 800b8f4:	ea44 3451 	orr.w	r4, r4, r1, lsr #13
 800b8f8:	04cb      	lsls	r3, r1, #19
 800b8fa:	683a      	ldr	r2, [r7, #0]
 800b8fc:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
    pCardInfo->CardBlockSize = 512;    
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b906:	651a      	str	r2, [r3, #80]	; 0x50
 800b908:	e001      	b.n	800b90e <HAL_SD_Get_CardInfo+0x2f2>
  }
  else
  {
    /* Not supported card type */
    errorstate = SD_ERROR;
 800b90a:	2329      	movs	r3, #41	; 0x29
 800b90c:	73fb      	strb	r3, [r7, #15]
  }
      
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	099b      	lsrs	r3, r3, #6
 800b912:	b2db      	uxtb	r3, r3
 800b914:	f003 0301 	and.w	r3, r3, #1
 800b918:	b2da      	uxtb	r2, r3
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	765a      	strb	r2, [r3, #25]
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	b2db      	uxtb	r3, r3
 800b922:	005b      	lsls	r3, r3, #1
 800b924:	b2db      	uxtb	r3, r3
 800b926:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800b92a:	b2da      	uxtb	r2, r3
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b934:	b2db      	uxtb	r3, r3
 800b936:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	7e9b      	ldrb	r3, [r3, #26]
 800b93c:	b2da      	uxtb	r2, r3
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	09db      	lsrs	r3, r3, #7
 800b942:	b2db      	uxtb	r3, r3
 800b944:	f003 0301 	and.w	r3, r3, #1
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	4313      	orrs	r3, r2
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	769a      	strb	r2, [r3, #26]
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	b2db      	uxtb	r3, r3
 800b956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b95a:	b2da      	uxtb	r2, r3
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000) >> 24);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b964:	0e1b      	lsrs	r3, r3, #24
 800b966:	b2db      	uxtb	r3, r3
 800b968:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	09db      	lsrs	r3, r3, #7
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	f003 0301 	and.w	r3, r3, #1
 800b974:	b2da      	uxtb	r2, r3
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	771a      	strb	r2, [r3, #28]
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60) >> 5;
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	095b      	lsrs	r3, r3, #5
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	f003 0303 	and.w	r3, r3, #3
 800b984:	b2da      	uxtb	r2, r3
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	775a      	strb	r2, [r3, #29]
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1C) >> 2;
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	089b      	lsrs	r3, r3, #2
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	f003 0307 	and.w	r3, r3, #7
 800b994:	b2da      	uxtb	r2, r3
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	779a      	strb	r2, [r3, #30]
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03) << 2;
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	f003 030c 	and.w	r3, r3, #12
 800b9a6:	b2da      	uxtb	r2, r3
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9b0:	0c1b      	lsrs	r3, r3, #16
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	7fdb      	ldrb	r3, [r3, #31]
 800b9ba:	b2da      	uxtb	r2, r3
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	099b      	lsrs	r3, r3, #6
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	f003 0303 	and.w	r3, r3, #3
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	b2da      	uxtb	r2, r3
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	77da      	strb	r2, [r3, #31]
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	095b      	lsrs	r3, r3, #5
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	f003 0301 	and.w	r3, r3, #1
 800b9da:	b2da      	uxtb	r2, r3
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	f883 2020 	strb.w	r2, [r3, #32]
  pCardInfo->SD_csd.Reserved3           = 0;
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	f003 0301 	and.w	r3, r3, #1
 800b9f2:	b2da      	uxtb	r2, r3
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9fe:	0a1b      	lsrs	r3, r3, #8
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	09db      	lsrs	r3, r3, #7
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	f003 0301 	and.w	r3, r3, #1
 800ba0e:	b2da      	uxtb	r2, r3
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40) >> 6;
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	099b      	lsrs	r3, r3, #6
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	f003 0301 	and.w	r3, r3, #1
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20) >> 5;
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	095b      	lsrs	r3, r3, #5
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	f003 0301 	and.w	r3, r3, #1
 800ba32:	b2da      	uxtb	r2, r3
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10) >> 4;
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	091b      	lsrs	r3, r3, #4
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	f003 0301 	and.w	r3, r3, #1
 800ba44:	b2da      	uxtb	r2, r3
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	089b      	lsrs	r3, r3, #2
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	f003 0303 	and.w	r3, r3, #3
 800ba56:	b2da      	uxtb	r2, r3
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	f003 0303 	and.w	r3, r3, #3
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	085b      	lsrs	r3, r3, #1
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba80:	b2da      	uxtb	r2, r3
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCardInfo->SD_csd.Reserved4 = 1;
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* Byte 0 */
  tmp = (uint8_t)((hsd->CID[0] & 0xFF000000) >> 24);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba94:	0e1b      	lsrs	r3, r3, #24
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ManufacturerID = tmp;
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	b2da      	uxtb	r2, r3
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Byte 1 */
  tmp = (uint8_t)((hsd->CID[0] & 0x00FF0000) >> 16);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa8:	0c1b      	lsrs	r3, r3, #16
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	021b      	lsls	r3, r3, #8
 800bab4:	b29a      	uxth	r2, r3
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	85da      	strh	r2, [r3, #46]	; 0x2e
  
  /* Byte 2 */
  tmp = (uint8_t)((hsd->CID[0] & 0x000000FF00) >> 8);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800babe:	0a1b      	lsrs	r3, r3, #8
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bac8:	b29a      	uxth	r2, r3
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	b29b      	uxth	r3, r3
 800bace:	4313      	orrs	r3, r2
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	85da      	strh	r2, [r3, #46]	; 0x2e
  
  /* Byte 3 */
  tmp = (uint8_t)(hsd->CID[0] & 0x000000FF);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bada:	b2db      	uxtb	r3, r3
 800badc:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	061a      	lsls	r2, r3, #24
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Byte 4 */
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baea:	0e1b      	lsrs	r3, r3, #24
 800baec:	b2db      	uxtb	r3, r3
 800baee:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	041b      	lsls	r3, r3, #16
 800baf8:	431a      	orrs	r2, r3
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Byte 5 */
  tmp = (uint8_t)((hsd->CID[1] & 0x00FF0000) >> 16);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb02:	0c1b      	lsrs	r3, r3, #16
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	021b      	lsls	r3, r3, #8
 800bb10:	431a      	orrs	r2, r3
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Byte 6 */
  tmp = (uint8_t)((hsd->CID[1] & 0x0000FF00) >> 8);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb1a:	0a1b      	lsrs	r3, r3, #8
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName1 |= tmp;
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	431a      	orrs	r2, r3
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Byte 7 */
  tmp = (uint8_t)(hsd->CID[1] & 0x000000FF);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdName2 = tmp;
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	b2da      	uxtb	r2, r3
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Byte 8 */
  tmp = (uint8_t)((hsd->CID[2] & 0xFF000000) >> 24);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb42:	0e1b      	lsrs	r3, r3, #24
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdRev = tmp;
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	b2da      	uxtb	r2, r3
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Byte 9 */
  tmp = (uint8_t)((hsd->CID[2] & 0x00FF0000) >> 16);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb56:	0c1b      	lsrs	r3, r3, #16
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdSN = tmp << 24;
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	061a      	lsls	r2, r3, #24
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Byte 10 */
  tmp = (uint8_t)((hsd->CID[2] & 0x0000FF00) >> 8);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb68:	0a1b      	lsrs	r3, r3, #8
 800bb6a:	b2db      	uxtb	r3, r3
 800bb6c:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	041b      	lsls	r3, r3, #16
 800bb76:	431a      	orrs	r2, r3
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CID[2] & 0x000000FF);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	021b      	lsls	r3, r3, #8
 800bb8c:	431a      	orrs	r2, r3
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb96:	0e1b      	lsrs	r3, r3, #24
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ProdSN |= tmp;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	431a      	orrs	r2, r3
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CID[3] & 0x00FF0000) >> 16);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbac:	0c1b      	lsrs	r3, r3, #16
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbb8:	b2da      	uxtb	r2, r3
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	091b      	lsrs	r3, r3, #4
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	f003 030f 	and.w	r3, r3, #15
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	b2da      	uxtb	r2, r3
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	021b      	lsls	r3, r3, #8
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bbdc:	b29a      	uxth	r2, r3
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CID[3] & 0x0000FF00) >> 8);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbe6:	0a1b      	lsrs	r3, r3, #8
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.ManufactDate |= tmp;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	b29a      	uxth	r2, r3
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CID[3] & 0x000000FF);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	60bb      	str	r3, [r7, #8]
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	085b      	lsrs	r3, r3, #1
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc10:	b2da      	uxtb	r2, r3
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pCardInfo->SD_cid.Reserved2 = 1;
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  
  return errorstate;
 800bc20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3714      	adds	r7, #20
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bcb0      	pop	{r4, r5, r7}
 800bc2a:	4770      	bx	lr

0800bc2c <HAL_SD_WideBusOperation_Config>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_WideBusOperation_Config(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800bc2c:	b5b0      	push	{r4, r5, r7, lr}
 800bc2e:	b08e      	sub	sp, #56	; 0x38
 800bc30:	af04      	add	r7, sp, #16
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800bc36:	2300      	movs	r3, #0
 800bc38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  SDMMC_InitTypeDef tmpinit;
  
  /* MMC Card does not support this feature */
  if (hsd->CardType == MULTIMEDIA_CARD)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6a1b      	ldr	r3, [r3, #32]
 800bc40:	2b03      	cmp	r3, #3
 800bc42:	d105      	bne.n	800bc50 <HAL_SD_WideBusOperation_Config+0x24>
  {
    errorstate = SD_UNSUPPORTED_FEATURE;
 800bc44:	2327      	movs	r3, #39	; 0x27
 800bc46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 800bc4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc4e:	e051      	b.n	800bcf4 <HAL_SD_WideBusOperation_Config+0xc8>
  }
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6a1b      	ldr	r3, [r3, #32]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d007      	beq.n	800bc68 <HAL_SD_WideBusOperation_Config+0x3c>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6a1b      	ldr	r3, [r3, #32]
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d003      	beq.n	800bc68 <HAL_SD_WideBusOperation_Config+0x3c>
    (hsd->CardType == HIGH_CAPACITY_SD_CARD))
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6a1b      	ldr	r3, [r3, #32]
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	d143      	bne.n	800bcf0 <HAL_SD_WideBusOperation_Config+0xc4>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc6e:	d103      	bne.n	800bc78 <HAL_SD_WideBusOperation_Config+0x4c>
    {
      errorstate = SD_UNSUPPORTED_FEATURE;
 800bc70:	2327      	movs	r3, #39	; 0x27
 800bc72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bc76:	e017      	b.n	800bca8 <HAL_SD_WideBusOperation_Config+0x7c>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc7e:	d106      	bne.n	800bc8e <HAL_SD_WideBusOperation_Config+0x62>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 fd57 	bl	800c734 <SD_WideBus_Enable>
 800bc86:	4603      	mov	r3, r0
 800bc88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bc8c:	e00c      	b.n	800bca8 <HAL_SD_WideBusOperation_Config+0x7c>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d106      	bne.n	800bca2 <HAL_SD_WideBusOperation_Config+0x76>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 fdc8 	bl	800c82a <SD_WideBus_Disable>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bca0:	e002      	b.n	800bca8 <HAL_SD_WideBusOperation_Config+0x7c>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = SD_INVALID_PARAMETER;
 800bca2:	2326      	movs	r3, #38	; 0x26
 800bca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
      
    if (errorstate == SD_OK)
 800bca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d11f      	bne.n	800bcf0 <HAL_SD_WideBusOperation_Config+0xc4>
    {
      /* Configure the SDMMC peripheral */
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	60fb      	str	r3, [r7, #12]
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	613b      	str	r3, [r7, #16]
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	617b      	str	r3, [r7, #20]
      tmpinit.BusWide             = WideMode;
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	61bb      	str	r3, [r7, #24]
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	695b      	ldr	r3, [r3, #20]
 800bcca:	61fb      	str	r3, [r7, #28]
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	699b      	ldr	r3, [r3, #24]
 800bcd0:	623b      	str	r3, [r7, #32]
      SDMMC_Init(hsd->Instance, tmpinit);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681d      	ldr	r5, [r3, #0]
 800bcd6:	466c      	mov	r4, sp
 800bcd8:	f107 0318 	add.w	r3, r7, #24
 800bcdc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bce0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bce4:	f107 030c 	add.w	r3, r7, #12
 800bce8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bcea:	4628      	mov	r0, r5
 800bcec:	f002 fb26 	bl	800e33c <SDMMC_Init>
    }
  }
  
  return errorstate;
 800bcf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3728      	adds	r7, #40	; 0x28
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bdb0      	pop	{r4, r5, r7, pc}

0800bcfc <HAL_SD_StopTransfer>:
  * @brief  Aborts an ongoing data transfer.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
HAL_SD_ErrorTypedef HAL_SD_StopTransfer(SD_HandleTypeDef *hsd)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b088      	sub	sp, #32
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef sdmmc_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800bd04:	2300      	movs	r3, #0
 800bd06:	77fb      	strb	r3, [r7, #31]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinitstructure.Argument         = 0;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 800bd0c:	230c      	movs	r3, #12
 800bd0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800bd10:	2340      	movs	r3, #64	; 0x40
 800bd12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd14:	2300      	movs	r3, #0
 800bd16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800bd18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd1c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f107 0208 	add.w	r2, r7, #8
 800bd26:	4611      	mov	r1, r2
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f002 fb55 	bl	800e3d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_STOP_TRANSMISSION);
 800bd2e:	210c      	movs	r1, #12
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 fb55 	bl	800c3e0 <SD_CmdResp1Error>
 800bd36:	4603      	mov	r3, r0
 800bd38:	77fb      	strb	r3, [r7, #31]
  
  return errorstate;
 800bd3a:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3720      	adds	r7, #32
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <HAL_SD_GetStatus>:
  * @brief  Gets the current sd card data status.
  * @param  hsd: SD handle
  * @retval Data Transfer state
  */
HAL_SD_TransferStateTypedef HAL_SD_GetStatus(SD_HandleTypeDef *hsd)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypedef cardstate =  SD_CARD_TRANSFER;
 800bd4c:	2304      	movs	r3, #4
 800bd4e:	73fb      	strb	r3, [r7, #15]

  /* Get SD card state */
  cardstate = SD_GetState(hsd);
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 f867 	bl	800be24 <SD_GetState>
 800bd56:	4603      	mov	r3, r0
 800bd58:	73fb      	strb	r3, [r7, #15]
  
  /* Find SD status according to card state*/
  if (cardstate == SD_CARD_TRANSFER)
 800bd5a:	7bfb      	ldrb	r3, [r7, #15]
 800bd5c:	2b04      	cmp	r3, #4
 800bd5e:	d101      	bne.n	800bd64 <HAL_SD_GetStatus+0x20>
  {
    return SD_TRANSFER_OK;
 800bd60:	2300      	movs	r3, #0
 800bd62:	e005      	b.n	800bd70 <HAL_SD_GetStatus+0x2c>
  }
  else if(cardstate == SD_CARD_ERROR)
 800bd64:	7bfb      	ldrb	r3, [r7, #15]
 800bd66:	2bff      	cmp	r3, #255	; 0xff
 800bd68:	d101      	bne.n	800bd6e <HAL_SD_GetStatus+0x2a>
  {
    return SD_TRANSFER_ERROR;
 800bd6a:	2302      	movs	r3, #2
 800bd6c:	e000      	b.n	800bd70 <HAL_SD_GetStatus+0x2c>
  }
  else
  {
    return SD_TRANSFER_BUSY;
 800bd6e:	2301      	movs	r3, #1
  }
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <SD_DMA_RxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SD_DMA_RxCplt(DMA_HandleTypeDef *hdma)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd84:	60fb      	str	r3, [r7, #12]
  
  /* DMA transfer is complete */
  hsd->DmaTransferCplt = 1;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2201      	movs	r2, #1
 800bd8a:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Wait until SD transfer is complete */
  while(hsd->SdTransferCplt == 0)
 800bd8c:	bf00      	nop
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d0fb      	beq.n	800bd8e <SD_DMA_RxCplt+0x16>
  {
  }
  
  /* Disable the DMA channel */
  HAL_DMA_Abort(hdma);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f7fc fe62 	bl	8008a60 <HAL_DMA_Abort>

  /* Transfer complete user callback */
  HAL_SD_DMA_RxCpltCallback(hsd->hdmarx);   
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7ff fc13 	bl	800b5cc <HAL_SD_DMA_RxCpltCallback>
}
 800bda6:	bf00      	nop
 800bda8:	3710      	adds	r7, #16
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}

0800bdae <SD_DMA_RxError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SD_DMA_RxError(DMA_HandleTypeDef *hdma)
{
 800bdae:	b580      	push	{r7, lr}
 800bdb0:	b084      	sub	sp, #16
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdba:	60fb      	str	r3, [r7, #12]
  
  /* Transfer complete user callback */
  HAL_SD_DMA_RxErrorCallback(hsd->hdmarx);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7ff fc0d 	bl	800b5e0 <HAL_SD_DMA_RxErrorCallback>
}
 800bdc6:	bf00      	nop
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <SD_DMA_TxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SD_DMA_TxCplt(DMA_HandleTypeDef *hdma)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b084      	sub	sp, #16
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdda:	60fb      	str	r3, [r7, #12]
  
  /* DMA transfer is complete */
  hsd->DmaTransferCplt = 1;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2201      	movs	r2, #1
 800bde0:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Wait until SD transfer is complete */
  while(hsd->SdTransferCplt == 0)
 800bde2:	bf00      	nop
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d0fb      	beq.n	800bde4 <SD_DMA_TxCplt+0x16>
  {
  }
  
  /* Disable the DMA channel */
  HAL_DMA_Abort(hdma);
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f7fc fe37 	bl	8008a60 <HAL_DMA_Abort>

  /* Transfer complete user callback */
  HAL_SD_DMA_TxCpltCallback(hsd->hdmatx);  
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7ff fbfc 	bl	800b5f4 <HAL_SD_DMA_TxCpltCallback>
}
 800bdfc:	bf00      	nop
 800bdfe:	3710      	adds	r7, #16
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <SD_DMA_TxError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SD_DMA_TxError(DMA_HandleTypeDef *hdma)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef *hsd = ( SD_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be10:	60fb      	str	r3, [r7, #12]
  
  /* Transfer complete user callback */
  HAL_SD_DMA_TxErrorCallback(hsd->hdmatx);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be16:	4618      	mov	r0, r3
 800be18:	f7ff fbf6 	bl	800b608 <HAL_SD_DMA_TxErrorCallback>
}
 800be1c:	bf00      	nop
 800be1e:	3710      	adds	r7, #16
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <SD_GetState>:
  * @brief  Returns the SD current state.
  * @param  hsd: SD handle
  * @retval SD card current state
  */
static HAL_SD_CardStateTypedef SD_GetState(SD_HandleTypeDef *hsd)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  uint32_t resp1 = 0;
 800be2c:	2300      	movs	r3, #0
 800be2e:	60fb      	str	r3, [r7, #12]
  
  if (SD_SendStatus(hsd, &resp1) != SD_OK)
 800be30:	f107 030c 	add.w	r3, r7, #12
 800be34:	4619      	mov	r1, r3
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fa02 	bl	800c240 <SD_SendStatus>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d001      	beq.n	800be46 <SD_GetState+0x22>
  {
    return SD_CARD_ERROR;
 800be42:	23ff      	movs	r3, #255	; 0xff
 800be44:	e005      	b.n	800be52 <SD_GetState+0x2e>
  }
  else
  {
    return (HAL_SD_CardStateTypedef)((resp1 >> 9) & 0x0F);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	0a5b      	lsrs	r3, r3, #9
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	f003 030f 	and.w	r3, r3, #15
 800be50:	b2db      	uxtb	r3, r3
  }
}
 800be52:	4618      	mov	r0, r3
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <SD_Initialize_Cards>:
  *         into standby state.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_Initialize_Cards(SD_HandleTypeDef *hsd)
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b08a      	sub	sp, #40	; 0x28
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef sdmmc_cmdinitstructure; 
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800be62:	2300      	movs	r3, #0
 800be64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t sd_rca = 1;
 800be68:	2301      	movs	r3, #1
 800be6a:	81fb      	strh	r3, [r7, #14]
  
  if(SDMMC_GetPowerState(hsd->Instance) == 0) /* Power off */
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4618      	mov	r0, r3
 800be72:	f002 faa3 	bl	800e3bc <SDMMC_GetPowerState>
 800be76:	4603      	mov	r3, r0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d105      	bne.n	800be88 <SD_Initialize_Cards+0x2e>
  {
    errorstate = SD_REQUEST_NOT_APPLICABLE;
 800be7c:	2325      	movs	r3, #37	; 0x25
 800be7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 800be82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be86:	e0bf      	b.n	800c008 <SD_Initialize_Cards+0x1ae>
  }
  
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6a1b      	ldr	r3, [r3, #32]
 800be8c:	2b04      	cmp	r3, #4
 800be8e:	d043      	beq.n	800bf18 <SD_Initialize_Cards+0xbe>
  {
    /* Send CMD2 ALL_SEND_CID */
    sdmmc_cmdinitstructure.Argument         = 0;
 800be90:	2300      	movs	r3, #0
 800be92:	613b      	str	r3, [r7, #16]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
 800be94:	2302      	movs	r3, #2
 800be96:	617b      	str	r3, [r7, #20]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 800be98:	23c0      	movs	r3, #192	; 0xc0
 800be9a:	61bb      	str	r3, [r7, #24]
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800be9c:	2300      	movs	r3, #0
 800be9e:	61fb      	str	r3, [r7, #28]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800bea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bea4:	623b      	str	r3, [r7, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f107 0210 	add.w	r2, r7, #16
 800beae:	4611      	mov	r1, r2
 800beb0:	4618      	mov	r0, r3
 800beb2:	f002 fa91 	bl	800e3d8 <SDMMC_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp2Error(hsd);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 fb95 	bl	800c5e6 <SD_CmdResp2Error>
 800bebc:	4603      	mov	r3, r0
 800bebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 800bec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d002      	beq.n	800bed0 <SD_Initialize_Cards+0x76>
    {
      return errorstate;
 800beca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bece:	e09b      	b.n	800c008 <SD_Initialize_Cards+0x1ae>
    }
    
    /* Get Card identification number data */
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2100      	movs	r1, #0
 800bed6:	4618      	mov	r0, r3
 800bed8:	f002 faaf 	bl	800e43a <SDMMC_GetResponse>
 800bedc:	4602      	mov	r2, r0
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2104      	movs	r1, #4
 800bee8:	4618      	mov	r0, r3
 800beea:	f002 faa6 	bl	800e43a <SDMMC_GetResponse>
 800beee:	4602      	mov	r2, r0
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2108      	movs	r1, #8
 800befa:	4618      	mov	r0, r3
 800befc:	f002 fa9d 	bl	800e43a <SDMMC_GetResponse>
 800bf00:	4602      	mov	r2, r0
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	641a      	str	r2, [r3, #64]	; 0x40
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	210c      	movs	r1, #12
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f002 fa94 	bl	800e43a <SDMMC_GetResponse>
 800bf12:	4602      	mov	r2, r0
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6a1b      	ldr	r3, [r3, #32]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d00b      	beq.n	800bf38 <SD_Initialize_Cards+0xde>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6a1b      	ldr	r3, [r3, #32]
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d007      	beq.n	800bf38 <SD_Initialize_Cards+0xde>
     (hsd->CardType == SECURE_DIGITAL_IO_COMBO_CARD) || (hsd->CardType == HIGH_CAPACITY_SD_CARD))
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6a1b      	ldr	r3, [r3, #32]
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 800bf2c:	2b06      	cmp	r3, #6
 800bf2e:	d003      	beq.n	800bf38 <SD_Initialize_Cards+0xde>
     (hsd->CardType == SECURE_DIGITAL_IO_COMBO_CARD) || (hsd->CardType == HIGH_CAPACITY_SD_CARD))
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6a1b      	ldr	r3, [r3, #32]
 800bf34:	2b02      	cmp	r3, #2
 800bf36:	d11c      	bne.n	800bf72 <SD_Initialize_Cards+0x118>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
 800bf38:	2303      	movs	r3, #3
 800bf3a:	617b      	str	r3, [r7, #20]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800bf3c:	2340      	movs	r3, #64	; 0x40
 800bf3e:	61bb      	str	r3, [r7, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f107 0210 	add.w	r2, r7, #16
 800bf48:	4611      	mov	r1, r2
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f002 fa44 	bl	800e3d8 <SDMMC_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp6Error(hsd, SD_CMD_SET_REL_ADDR, &sd_rca);
 800bf50:	f107 030e 	add.w	r3, r7, #14
 800bf54:	461a      	mov	r2, r3
 800bf56:	2103      	movs	r1, #3
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fb7c 	bl	800c656 <SD_CmdResp6Error>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 800bf64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d002      	beq.n	800bf72 <SD_Initialize_Cards+0x118>
    {
      return errorstate;
 800bf6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf70:	e04a      	b.n	800c008 <SD_Initialize_Cards+0x1ae>
    }
  }
  
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6a1b      	ldr	r3, [r3, #32]
 800bf76:	2b04      	cmp	r3, #4
 800bf78:	d044      	beq.n	800c004 <SD_Initialize_Cards+0x1aa>
  {
    /* Get the SD card RCA */
    hsd->RCA = sd_rca;
 800bf7a:	89fb      	ldrh	r3, [r7, #14]
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf86:	041b      	lsls	r3, r3, #16
 800bf88:	613b      	str	r3, [r7, #16]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 800bf8a:	2309      	movs	r3, #9
 800bf8c:	617b      	str	r3, [r7, #20]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 800bf8e:	23c0      	movs	r3, #192	; 0xc0
 800bf90:	61bb      	str	r3, [r7, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f107 0210 	add.w	r2, r7, #16
 800bf9a:	4611      	mov	r1, r2
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f002 fa1b 	bl	800e3d8 <SDMMC_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp2Error(hsd);
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 fb1f 	bl	800c5e6 <SD_CmdResp2Error>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 800bfae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d002      	beq.n	800bfbc <SD_Initialize_Cards+0x162>
    {
      return errorstate;
 800bfb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfba:	e025      	b.n	800c008 <SD_Initialize_Cards+0x1ae>
    }
    
    /* Get Card Specific Data */
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f002 fa39 	bl	800e43a <SDMMC_GetResponse>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2104      	movs	r1, #4
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f002 fa30 	bl	800e43a <SDMMC_GetResponse>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2108      	movs	r1, #8
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f002 fa27 	bl	800e43a <SDMMC_GetResponse>
 800bfec:	4602      	mov	r2, r0
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	631a      	str	r2, [r3, #48]	; 0x30
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	210c      	movs	r1, #12
 800bff8:	4618      	mov	r0, r3
 800bffa:	f002 fa1e 	bl	800e43a <SDMMC_GetResponse>
 800bffe:	4602      	mov	r2, r0
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	635a      	str	r2, [r3, #52]	; 0x34
  }
  
  /* All cards are initialized */
  return errorstate;
 800c004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3728      	adds	r7, #40	; 0x28
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <SD_Select_Deselect>:
  * @param  hsd: SD handle
  * @param  addr: Address of the card to be selected  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_Select_Deselect(SD_HandleTypeDef *hsd, uint64_t addr)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b08a      	sub	sp, #40	; 0x28
 800c014:	af00      	add	r7, sp, #0
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef sdmmc_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800c01c:	2300      	movs	r3, #0
 800c01e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)addr;
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 800c026:	2307      	movs	r3, #7
 800c028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800c02a:	2340      	movs	r3, #64	; 0x40
 800c02c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800c02e:	2300      	movs	r3, #0
 800c030:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800c032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c036:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f107 0210 	add.w	r2, r7, #16
 800c040:	4611      	mov	r1, r2
 800c042:	4618      	mov	r0, r3
 800c044:	f002 f9c8 	bl	800e3d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEL_DESEL_CARD);
 800c048:	2107      	movs	r1, #7
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f000 f9c8 	bl	800c3e0 <SD_CmdResp1Error>
 800c050:	4603      	mov	r3, r0
 800c052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  return errorstate;
 800c056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3728      	adds	r7, #40	; 0x28
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b08c      	sub	sp, #48	; 0x30
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef sdmmc_cmdinitstructure; 
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
 800c06a:	2300      	movs	r3, #0
 800c06c:	72fb      	strb	r3, [r7, #11]
  uint32_t response = 0, count = 0, validvoltage = 0;
 800c06e:	2300      	movs	r3, #0
 800c070:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c072:	2300      	movs	r3, #0
 800c074:	62bb      	str	r3, [r7, #40]	; 0x28
 800c076:	2300      	movs	r3, #0
 800c078:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sdtype = SD_STD_CAPACITY;
 800c07a:	2300      	movs	r3, #0
 800c07c:	623b      	str	r3, [r7, #32]
  
  /* Power ON Sequence -------------------------------------------------------*/
  /* Disable SDMMC Clock */
  __HAL_SD_SDMMC_DISABLE(hsd); 
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	6812      	ldr	r2, [r2, #0]
 800c086:	6852      	ldr	r2, [r2, #4]
 800c088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c08c:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4618      	mov	r0, r3
 800c094:	f002 f984 	bl	800e3a0 <SDMMC_PowerState_ON>
  
  /* 1ms: required power up waiting time before starting the SD initialization 
     sequence */
  HAL_Delay(1);
 800c098:	2001      	movs	r0, #1
 800c09a:	f7fc f9f5 	bl	8008488 <HAL_Delay>
  
  /* Enable SDMMC Clock */
  __HAL_SD_SDMMC_ENABLE(hsd);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	6812      	ldr	r2, [r2, #0]
 800c0a6:	6852      	ldr	r2, [r2, #4]
 800c0a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c0ac:	605a      	str	r2, [r3, #4]
  
  /* CMD0: GO_IDLE_STATE -----------------------------------------------------*/
  /* No CMD response required */
  sdmmc_cmdinitstructure.Argument         = 0;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_NO;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800c0be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0c2:	61fb      	str	r3, [r7, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f107 020c 	add.w	r2, r7, #12
 800c0cc:	4611      	mov	r1, r2
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f002 f982 	bl	800e3d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdError(hsd);
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 f8ef 	bl	800c2b8 <SD_CmdError>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	72fb      	strb	r3, [r7, #11]
  
  if(errorstate != SD_OK)
 800c0de:	7afb      	ldrb	r3, [r7, #11]
 800c0e0:	b2db      	uxtb	r3, r3
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d002      	beq.n	800c0ec <SD_PowerON+0x8a>
  {
    /* CMD Response Timeout (wait for CMDSENT flag) */
    return errorstate;
 800c0e6:	7afb      	ldrb	r3, [r7, #11]
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	e0a5      	b.n	800c238 <SD_PowerON+0x1d6>
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
 800c0ec:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c0f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_SDMMC_SEND_IF_COND;
 800c0f2:	2308      	movs	r3, #8
 800c0f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800c0f6:	2340      	movs	r3, #64	; 0x40
 800c0f8:	617b      	str	r3, [r7, #20]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f107 020c 	add.w	r2, r7, #12
 800c102:	4611      	mov	r1, r2
 800c104:	4618      	mov	r0, r3
 800c106:	f002 f967 	bl	800e3d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */ 
  errorstate = SD_CmdResp7Error(hsd);
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 f910 	bl	800c330 <SD_CmdResp7Error>
 800c110:	4603      	mov	r3, r0
 800c112:	72fb      	strb	r3, [r7, #11]
  
  if (errorstate == SD_OK)
 800c114:	7afb      	ldrb	r3, [r7, #11]
 800c116:	b2db      	uxtb	r3, r3
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d105      	bne.n	800c128 <SD_PowerON+0xc6>
  {
    /* SD Card 2.0 */
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2201      	movs	r2, #1
 800c120:	621a      	str	r2, [r3, #32]
    sdtype        = SD_HIGH_CAPACITY;
 800c122:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c126:	623b      	str	r3, [r7, #32]
  }
  
  /* Send CMD55 */
  sdmmc_cmdinitstructure.Argument         = 0;
 800c128:	2300      	movs	r3, #0
 800c12a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800c12c:	2337      	movs	r3, #55	; 0x37
 800c12e:	613b      	str	r3, [r7, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f107 020c 	add.w	r2, r7, #12
 800c138:	4611      	mov	r1, r2
 800c13a:	4618      	mov	r0, r3
 800c13c:	f002 f94c 	bl	800e3d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800c140:	2137      	movs	r1, #55	; 0x37
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 f94c 	bl	800c3e0 <SD_CmdResp1Error>
 800c148:	4603      	mov	r3, r0
 800c14a:	72fb      	strb	r3, [r7, #11]
  
  /* If errorstate is Command Timeout, it is a MMC card */
  /* If errorstate is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  if(errorstate == SD_OK)
 800c14c:	7afb      	ldrb	r3, [r7, #11]
 800c14e:	b2db      	uxtb	r3, r3
 800c150:	2b00      	cmp	r3, #0
 800c152:	d16f      	bne.n	800c234 <SD_PowerON+0x1d2>
  {
    /* SD CARD */
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 800c154:	e054      	b.n	800c200 <SD_PowerON+0x19e>
    {
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      sdmmc_cmdinitstructure.Argument         = 0;
 800c156:	2300      	movs	r3, #0
 800c158:	60fb      	str	r3, [r7, #12]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800c15a:	2337      	movs	r3, #55	; 0x37
 800c15c:	613b      	str	r3, [r7, #16]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800c15e:	2340      	movs	r3, #64	; 0x40
 800c160:	617b      	str	r3, [r7, #20]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800c162:	2300      	movs	r3, #0
 800c164:	61bb      	str	r3, [r7, #24]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800c166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c16a:	61fb      	str	r3, [r7, #28]
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f107 020c 	add.w	r2, r7, #12
 800c174:	4611      	mov	r1, r2
 800c176:	4618      	mov	r0, r3
 800c178:	f002 f92e 	bl	800e3d8 <SDMMC_SendCommand>
      
      /* Check for error conditions */
      errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800c17c:	2137      	movs	r1, #55	; 0x37
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f92e 	bl	800c3e0 <SD_CmdResp1Error>
 800c184:	4603      	mov	r3, r0
 800c186:	72fb      	strb	r3, [r7, #11]
      
      if(errorstate != SD_OK)
 800c188:	7afb      	ldrb	r3, [r7, #11]
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d002      	beq.n	800c196 <SD_PowerON+0x134>
      {
        return errorstate;
 800c190:	7afb      	ldrb	r3, [r7, #11]
 800c192:	b2db      	uxtb	r3, r3
 800c194:	e050      	b.n	800c238 <SD_PowerON+0x1d6>
      }
      
      /* Send CMD41 */
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 800c196:	6a3b      	ldr	r3, [r7, #32]
 800c198:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c19c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1a0:	60fb      	str	r3, [r7, #12]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 800c1a2:	2329      	movs	r3, #41	; 0x29
 800c1a4:	613b      	str	r3, [r7, #16]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800c1a6:	2340      	movs	r3, #64	; 0x40
 800c1a8:	617b      	str	r3, [r7, #20]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	61bb      	str	r3, [r7, #24]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800c1ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1b2:	61fb      	str	r3, [r7, #28]
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f107 020c 	add.w	r2, r7, #12
 800c1bc:	4611      	mov	r1, r2
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f002 f90a 	bl	800e3d8 <SDMMC_SendCommand>
      
      /* Check for error conditions */
      errorstate = SD_CmdResp3Error(hsd);
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 f9e5 	bl	800c594 <SD_CmdResp3Error>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	72fb      	strb	r3, [r7, #11]
      
      if(errorstate != SD_OK)
 800c1ce:	7afb      	ldrb	r3, [r7, #11]
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d002      	beq.n	800c1dc <SD_PowerON+0x17a>
      {
        return errorstate;
 800c1d6:	7afb      	ldrb	r3, [r7, #11]
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	e02d      	b.n	800c238 <SD_PowerON+0x1d6>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2100      	movs	r1, #0
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f002 f929 	bl	800e43a <SDMMC_GetResponse>
 800c1e8:	62f8      	str	r0, [r7, #44]	; 0x2c
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800c1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ec:	0fdb      	lsrs	r3, r3, #31
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	bf0c      	ite	eq
 800c1f2:	2301      	moveq	r3, #1
 800c1f4:	2300      	movne	r3, #0
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	627b      	str	r3, [r7, #36]	; 0x24
      
      count++;
 800c1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	62bb      	str	r3, [r7, #40]	; 0x28
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 800c200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c202:	2b00      	cmp	r3, #0
 800c204:	d104      	bne.n	800c210 <SD_PowerON+0x1ae>
 800c206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c208:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d9a2      	bls.n	800c156 <SD_PowerON+0xf4>
    }
    
    if(count >= SD_MAX_VOLT_TRIAL)
 800c210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c212:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c216:	4293      	cmp	r3, r2
 800c218:	d904      	bls.n	800c224 <SD_PowerON+0x1c2>
    {
      errorstate = SD_INVALID_VOLTRANGE;
 800c21a:	231b      	movs	r3, #27
 800c21c:	72fb      	strb	r3, [r7, #11]
      
      return errorstate;
 800c21e:	7afb      	ldrb	r3, [r7, #11]
 800c220:	b2db      	uxtb	r3, r3
 800c222:	e009      	b.n	800c238 <SD_PowerON+0x1d6>
    }
    
    if((response & SD_HIGH_CAPACITY) == SD_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c226:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d002      	beq.n	800c234 <SD_PowerON+0x1d2>
    {
      hsd->CardType = HIGH_CAPACITY_SD_CARD;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2202      	movs	r2, #2
 800c232:	621a      	str	r2, [r3, #32]
    }
    
  } /* else MMC Card */
  
  return errorstate;
 800c234:	7afb      	ldrb	r3, [r7, #11]
 800c236:	b2db      	uxtb	r3, r3
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3730      	adds	r7, #48	; 0x30
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b088      	sub	sp, #32
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef sdmmc_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800c24a:	2300      	movs	r3, #0
 800c24c:	77fb      	strb	r3, [r7, #31]
  
  if(pCardStatus == NULL)
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d103      	bne.n	800c25c <SD_SendStatus+0x1c>
  {
    errorstate = SD_INVALID_PARAMETER;
 800c254:	2326      	movs	r3, #38	; 0x26
 800c256:	77fb      	strb	r3, [r7, #31]
    
    return errorstate;
 800c258:	7ffb      	ldrb	r3, [r7, #31]
 800c25a:	e029      	b.n	800c2b0 <SD_SendStatus+0x70>
  }
  
  /* Send Status command */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c260:	041b      	lsls	r3, r3, #16
 800c262:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 800c264:	230d      	movs	r3, #13
 800c266:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800c268:	2340      	movs	r3, #64	; 0x40
 800c26a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800c26c:	2300      	movs	r3, #0
 800c26e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800c270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c274:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f107 0208 	add.w	r2, r7, #8
 800c27e:	4611      	mov	r1, r2
 800c280:	4618      	mov	r0, r3
 800c282:	f002 f8a9 	bl	800e3d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEND_STATUS);
 800c286:	210d      	movs	r1, #13
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 f8a9 	bl	800c3e0 <SD_CmdResp1Error>
 800c28e:	4603      	mov	r3, r0
 800c290:	77fb      	strb	r3, [r7, #31]
  
  if(errorstate != SD_OK)
 800c292:	7ffb      	ldrb	r3, [r7, #31]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d001      	beq.n	800c29c <SD_SendStatus+0x5c>
  {
    return errorstate;
 800c298:	7ffb      	ldrb	r3, [r7, #31]
 800c29a:	e009      	b.n	800c2b0 <SD_SendStatus+0x70>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f002 f8c9 	bl	800e43a <SDMMC_GetResponse>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	601a      	str	r2, [r3, #0]
  
  return errorstate;
 800c2ae:	7ffb      	ldrb	r3, [r7, #31]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3720      	adds	r7, #32
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <SD_CmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdError(SD_HandleTypeDef *hsd)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b087      	sub	sp, #28
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout, tmp;
  
  timeout = SDMMC_CMD0TIMEOUT;
 800c2c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c2c8:	617b      	str	r3, [r7, #20]
  
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	bf14      	ite	ne
 800c2d8:	2301      	movne	r3, #1
 800c2da:	2300      	moveq	r3, #0
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	613b      	str	r3, [r7, #16]
    
  while((timeout > 0) && (!tmp))
 800c2e0:	e00d      	b.n	800c2fe <SD_CmdError+0x46>
  {
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	bf14      	ite	ne
 800c2f0:	2301      	movne	r3, #1
 800c2f2:	2300      	moveq	r3, #0
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	613b      	str	r3, [r7, #16]
    timeout--;
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	617b      	str	r3, [r7, #20]
  while((timeout > 0) && (!tmp))
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d002      	beq.n	800c30a <SD_CmdError+0x52>
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d0eb      	beq.n	800c2e2 <SD_CmdError+0x2a>
  }
  
  if(timeout == 0)
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d103      	bne.n	800c318 <SD_CmdError+0x60>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 800c310:	2303      	movs	r3, #3
 800c312:	73fb      	strb	r3, [r7, #15]
    return errorstate;
 800c314:	7bfb      	ldrb	r3, [r7, #15]
 800c316:	e005      	b.n	800c324 <SD_CmdError+0x6c>
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800c320:	639a      	str	r2, [r3, #56]	; 0x38
  
  return errorstate;
 800c322:	7bfb      	ldrb	r3, [r7, #15]
}
 800c324:	4618      	mov	r0, r3
 800c326:	371c      	adds	r7, #28
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <SD_CmdResp7Error>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp7Error(SD_HandleTypeDef *hsd)
{
 800c330:	b480      	push	{r7}
 800c332:	b087      	sub	sp, #28
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  HAL_SD_ErrorTypedef errorstate = SD_ERROR;
 800c338:	2329      	movs	r3, #41	; 0x29
 800c33a:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = SDMMC_CMD0TIMEOUT, tmp;
 800c33c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c340:	617b      	str	r3, [r7, #20]
  
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT); 
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c348:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	bf14      	ite	ne
 800c350:	2301      	movne	r3, #1
 800c352:	2300      	moveq	r3, #0
 800c354:	b2db      	uxtb	r3, r3
 800c356:	613b      	str	r3, [r7, #16]
  
  while((!tmp) && (timeout > 0))
 800c358:	e00d      	b.n	800c376 <SD_CmdResp7Error+0x46>
  {
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c360:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c364:	2b00      	cmp	r3, #0
 800c366:	bf14      	ite	ne
 800c368:	2301      	movne	r3, #1
 800c36a:	2300      	moveq	r3, #0
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	613b      	str	r3, [r7, #16]
    timeout--;
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	3b01      	subs	r3, #1
 800c374:	617b      	str	r3, [r7, #20]
  while((!tmp) && (timeout > 0))
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d102      	bne.n	800c382 <SD_CmdResp7Error+0x52>
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d1eb      	bne.n	800c35a <SD_CmdResp7Error+0x2a>
  }
  
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT); 
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c388:	f003 0304 	and.w	r3, r3, #4
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	bf14      	ite	ne
 800c390:	2301      	movne	r3, #1
 800c392:	2300      	moveq	r3, #0
 800c394:	b2db      	uxtb	r3, r3
 800c396:	613b      	str	r3, [r7, #16]
  
  if((timeout == 0) || tmp)
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d002      	beq.n	800c3a4 <SD_CmdResp7Error+0x74>
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d007      	beq.n	800c3b4 <SD_CmdResp7Error+0x84>
  {
    /* Card is not V2.0 compliant or card does not support the set voltage range */
    errorstate = SD_CMD_RSP_TIMEOUT;
 800c3a4:	2303      	movs	r3, #3
 800c3a6:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	2204      	movs	r2, #4
 800c3ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 800c3b0:	7bfb      	ldrb	r3, [r7, #15]
 800c3b2:	e00f      	b.n	800c3d4 <SD_CmdResp7Error+0xa4>
  }
  
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDREND))
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d007      	beq.n	800c3d2 <SD_CmdResp7Error+0xa2>
  {
    /* Card is SD V2.0 compliant */
    errorstate = SD_OK;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CMDREND);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2240      	movs	r2, #64	; 0x40
 800c3cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 800c3ce:	7bfb      	ldrb	r3, [r7, #15]
 800c3d0:	e000      	b.n	800c3d4 <SD_CmdResp7Error+0xa4>
  }
  
  return errorstate;
 800c3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	371c      	adds	r7, #28
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <SD_CmdResp1Error>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp1Error(SD_HandleTypeDef *hsd, uint8_t SD_CMD)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	70fb      	strb	r3, [r7, #3]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	73fb      	strb	r3, [r7, #15]
  uint32_t response_r1;
  
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 800c3f0:	bf00      	nop
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d0f8      	beq.n	800c3f2 <SD_CmdResp1Error+0x12>
  {
  }
  
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c406:	f003 0304 	and.w	r3, r3, #4
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d007      	beq.n	800c41e <SD_CmdResp1Error+0x3e>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 800c40e:	2303      	movs	r3, #3
 800c410:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2204      	movs	r2, #4
 800c418:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 800c41a:	7bfb      	ldrb	r3, [r7, #15]
 800c41c:	e0b3      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c424:	f003 0301 	and.w	r3, r3, #1
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d007      	beq.n	800c43c <SD_CmdResp1Error+0x5c>
  {
    errorstate = SD_CMD_CRC_FAIL;
 800c42c:	2301      	movs	r3, #1
 800c42e:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2201      	movs	r2, #1
 800c436:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 800c438:	7bfb      	ldrb	r3, [r7, #15]
 800c43a:	e0a4      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4618      	mov	r0, r3
 800c442:	f001 ffed 	bl	800e420 <SDMMC_GetCommandResponse>
 800c446:	4603      	mov	r3, r0
 800c448:	461a      	mov	r2, r3
 800c44a:	78fb      	ldrb	r3, [r7, #3]
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d003      	beq.n	800c458 <SD_CmdResp1Error+0x78>
  {
    errorstate = SD_ILLEGAL_CMD;
 800c450:	2310      	movs	r3, #16
 800c452:	73fb      	strb	r3, [r7, #15]
    
    return errorstate;
 800c454:	7bfb      	ldrb	r3, [r7, #15]
 800c456:	e096      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800c460:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2100      	movs	r1, #0
 800c468:	4618      	mov	r0, r3
 800c46a:	f001 ffe6 	bl	800e43a <SDMMC_GetResponse>
 800c46e:	60b8      	str	r0, [r7, #8]
  
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 800c470:	68ba      	ldr	r2, [r7, #8]
 800c472:	4b47      	ldr	r3, [pc, #284]	; (800c590 <SD_CmdResp1Error+0x1b0>)
 800c474:	4013      	ands	r3, r2
 800c476:	2b00      	cmp	r3, #0
 800c478:	d101      	bne.n	800c47e <SD_CmdResp1Error+0x9e>
  {
    return errorstate;
 800c47a:	7bfb      	ldrb	r3, [r7, #15]
 800c47c:	e083      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	2b00      	cmp	r3, #0
 800c482:	da01      	bge.n	800c488 <SD_CmdResp1Error+0xa8>
  {
    return(SD_ADDR_OUT_OF_RANGE);
 800c484:	231c      	movs	r3, #28
 800c486:	e07e      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d001      	beq.n	800c496 <SD_CmdResp1Error+0xb6>
  {
    return(SD_ADDR_MISALIGNED);
 800c492:	2309      	movs	r3, #9
 800c494:	e077      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d001      	beq.n	800c4a4 <SD_CmdResp1Error+0xc4>
  {
    return(SD_BLOCK_LEN_ERR);
 800c4a0:	230a      	movs	r3, #10
 800c4a2:	e070      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d001      	beq.n	800c4b2 <SD_CmdResp1Error+0xd2>
  {
    return(SD_ERASE_SEQ_ERR);
 800c4ae:	230b      	movs	r3, #11
 800c4b0:	e069      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d001      	beq.n	800c4c0 <SD_CmdResp1Error+0xe0>
  {
    return(SD_BAD_ERASE_PARAM);
 800c4bc:	230c      	movs	r3, #12
 800c4be:	e062      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d001      	beq.n	800c4ce <SD_CmdResp1Error+0xee>
  {
    return(SD_WRITE_PROT_VIOLATION);
 800c4ca:	230d      	movs	r3, #13
 800c4cc:	e05b      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d001      	beq.n	800c4dc <SD_CmdResp1Error+0xfc>
  {
    return(SD_LOCK_UNLOCK_FAILED);
 800c4d8:	230e      	movs	r3, #14
 800c4da:	e054      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d001      	beq.n	800c4ea <SD_CmdResp1Error+0x10a>
  {
    return(SD_COM_CRC_FAILED);
 800c4e6:	230f      	movs	r3, #15
 800c4e8:	e04d      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  if((response_r1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d001      	beq.n	800c4f8 <SD_CmdResp1Error+0x118>
  {
    return(SD_ILLEGAL_CMD);
 800c4f4:	2310      	movs	r3, #16
 800c4f6:	e046      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d001      	beq.n	800c506 <SD_CmdResp1Error+0x126>
  {
    return(SD_CARD_ECC_FAILED);
 800c502:	2311      	movs	r3, #17
 800c504:	e03f      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d001      	beq.n	800c514 <SD_CmdResp1Error+0x134>
  {
    return(SD_CC_ERROR);
 800c510:	2312      	movs	r3, #18
 800c512:	e038      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d001      	beq.n	800c522 <SD_CmdResp1Error+0x142>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 800c51e:	2313      	movs	r3, #19
 800c520:	e031      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d001      	beq.n	800c530 <SD_CmdResp1Error+0x150>
  {
    return(SD_STREAM_READ_UNDERRUN);
 800c52c:	2314      	movs	r3, #20
 800c52e:	e02a      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c536:	2b00      	cmp	r3, #0
 800c538:	d001      	beq.n	800c53e <SD_CmdResp1Error+0x15e>
  {
    return(SD_STREAM_WRITE_OVERRUN);
 800c53a:	2315      	movs	r3, #21
 800c53c:	e023      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c544:	2b00      	cmp	r3, #0
 800c546:	d001      	beq.n	800c54c <SD_CmdResp1Error+0x16c>
  {
    return(SD_CID_CSD_OVERWRITE);
 800c548:	2316      	movs	r3, #22
 800c54a:	e01c      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c552:	2b00      	cmp	r3, #0
 800c554:	d001      	beq.n	800c55a <SD_CmdResp1Error+0x17a>
  {
    return(SD_WP_ERASE_SKIP);
 800c556:	2317      	movs	r3, #23
 800c558:	e015      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c560:	2b00      	cmp	r3, #0
 800c562:	d001      	beq.n	800c568 <SD_CmdResp1Error+0x188>
  {
    return(SD_CARD_ECC_DISABLED);
 800c564:	2318      	movs	r3, #24
 800c566:	e00e      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d001      	beq.n	800c576 <SD_CmdResp1Error+0x196>
  {
    return(SD_ERASE_RESET);
 800c572:	2319      	movs	r3, #25
 800c574:	e007      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  if((response_r1 & SD_OCR_AKE_SEQ_ERROR) == SD_OCR_AKE_SEQ_ERROR)
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	f003 0308 	and.w	r3, r3, #8
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d001      	beq.n	800c584 <SD_CmdResp1Error+0x1a4>
  {
    return(SD_AKE_SEQ_ERROR);
 800c580:	231a      	movs	r3, #26
 800c582:	e000      	b.n	800c586 <SD_CmdResp1Error+0x1a6>
  }
  
  return errorstate;
 800c584:	7bfb      	ldrb	r3, [r7, #15]
}
 800c586:	4618      	mov	r0, r3
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	fdffe008 	.word	0xfdffe008

0800c594 <SD_CmdResp3Error>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp3Error(SD_HandleTypeDef *hsd)
{
 800c594:	b480      	push	{r7}
 800c596:	b085      	sub	sp, #20
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800c59c:	2300      	movs	r3, #0
 800c59e:	73fb      	strb	r3, [r7, #15]
  
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 800c5a0:	bf00      	nop
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5a8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d0f8      	beq.n	800c5a2 <SD_CmdResp3Error+0xe>
  {
  }
  
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5b6:	f003 0304 	and.w	r3, r3, #4
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d007      	beq.n	800c5ce <SD_CmdResp3Error+0x3a>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 800c5be:	2303      	movs	r3, #3
 800c5c0:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2204      	movs	r2, #4
 800c5c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 800c5ca:	7bfb      	ldrb	r3, [r7, #15]
 800c5cc:	e005      	b.n	800c5da <SD_CmdResp3Error+0x46>
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800c5d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return errorstate;
 800c5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3714      	adds	r7, #20
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr

0800c5e6 <SD_CmdResp2Error>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp2Error(SD_HandleTypeDef *hsd)
{
 800c5e6:	b480      	push	{r7}
 800c5e8:	b085      	sub	sp, #20
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	73fb      	strb	r3, [r7, #15]
  
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 800c5f2:	bf00      	nop
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d0f8      	beq.n	800c5f4 <SD_CmdResp2Error+0xe>
  {
  }
    
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c608:	f003 0304 	and.w	r3, r3, #4
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d007      	beq.n	800c620 <SD_CmdResp2Error+0x3a>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 800c610:	2303      	movs	r3, #3
 800c612:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2204      	movs	r2, #4
 800c61a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 800c61c:	7bfb      	ldrb	r3, [r7, #15]
 800c61e:	e014      	b.n	800c64a <SD_CmdResp2Error+0x64>
  }
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c626:	f003 0301 	and.w	r3, r3, #1
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d007      	beq.n	800c63e <SD_CmdResp2Error+0x58>
  {
    errorstate = SD_CMD_CRC_FAIL;
 800c62e:	2301      	movs	r3, #1
 800c630:	73fb      	strb	r3, [r7, #15]
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2201      	movs	r2, #1
 800c638:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 800c63a:	7bfb      	ldrb	r3, [r7, #15]
 800c63c:	e005      	b.n	800c64a <SD_CmdResp2Error+0x64>
  {
    /* No error flag set */
  }  
  
  /* Clear all the static flags */
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800c646:	639a      	str	r2, [r3, #56]	; 0x38
  
  return errorstate;
 800c648:	7bfb      	ldrb	r3, [r7, #15]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3714      	adds	r7, #20
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr

0800c656 <SD_CmdResp6Error>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_CmdResp6Error(SD_HandleTypeDef *hsd, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b086      	sub	sp, #24
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	60f8      	str	r0, [r7, #12]
 800c65e:	460b      	mov	r3, r1
 800c660:	607a      	str	r2, [r7, #4]
 800c662:	72fb      	strb	r3, [r7, #11]
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800c664:	2300      	movs	r3, #0
 800c666:	75fb      	strb	r3, [r7, #23]
  uint32_t response_r1;
  
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 800c668:	bf00      	nop
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c670:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c674:	2b00      	cmp	r3, #0
 800c676:	d0f8      	beq.n	800c66a <SD_CmdResp6Error+0x14>
  {
  }
  
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c67e:	f003 0304 	and.w	r3, r3, #4
 800c682:	2b00      	cmp	r3, #0
 800c684:	d007      	beq.n	800c696 <SD_CmdResp6Error+0x40>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
 800c686:	2303      	movs	r3, #3
 800c688:	75fb      	strb	r3, [r7, #23]
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2204      	movs	r2, #4
 800c690:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 800c692:	7dfb      	ldrb	r3, [r7, #23]
 800c694:	e04a      	b.n	800c72c <SD_CmdResp6Error+0xd6>
  }
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c69c:	f003 0301 	and.w	r3, r3, #1
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d007      	beq.n	800c6b4 <SD_CmdResp6Error+0x5e>
  {
    errorstate = SD_CMD_CRC_FAIL;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	75fb      	strb	r3, [r7, #23]
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 800c6b0:	7dfb      	ldrb	r3, [r7, #23]
 800c6b2:	e03b      	b.n	800c72c <SD_CmdResp6Error+0xd6>
  {
    /* No error flag set */
  }  
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f001 feb1 	bl	800e420 <SDMMC_GetCommandResponse>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	7afb      	ldrb	r3, [r7, #11]
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d003      	beq.n	800c6d0 <SD_CmdResp6Error+0x7a>
  {
    errorstate = SD_ILLEGAL_CMD;
 800c6c8:	2310      	movs	r3, #16
 800c6ca:	75fb      	strb	r3, [r7, #23]
    
    return errorstate;
 800c6cc:	7dfb      	ldrb	r3, [r7, #23]
 800c6ce:	e02d      	b.n	800c72c <SD_CmdResp6Error+0xd6>
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800c6d8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2100      	movs	r1, #0
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f001 feaa 	bl	800e43a <SDMMC_GetResponse>
 800c6e6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)) == SD_ALLZERO)
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d106      	bne.n	800c700 <SD_CmdResp6Error+0xaa>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	0c1b      	lsrs	r3, r3, #16
 800c6f6:	b29a      	uxth	r2, r3
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	801a      	strh	r2, [r3, #0]
    
    return errorstate;
 800c6fc:	7dfb      	ldrb	r3, [r7, #23]
 800c6fe:	e015      	b.n	800c72c <SD_CmdResp6Error+0xd6>
  }
  
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c706:	2b00      	cmp	r3, #0
 800c708:	d001      	beq.n	800c70e <SD_CmdResp6Error+0xb8>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 800c70a:	2313      	movs	r3, #19
 800c70c:	e00e      	b.n	800c72c <SD_CmdResp6Error+0xd6>
  }
  
  if((response_r1 & SD_R6_ILLEGAL_CMD) == SD_R6_ILLEGAL_CMD)
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c714:	2b00      	cmp	r3, #0
 800c716:	d001      	beq.n	800c71c <SD_CmdResp6Error+0xc6>
  {
    return(SD_ILLEGAL_CMD);
 800c718:	2310      	movs	r3, #16
 800c71a:	e007      	b.n	800c72c <SD_CmdResp6Error+0xd6>
  }
  
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c722:	2b00      	cmp	r3, #0
 800c724:	d001      	beq.n	800c72a <SD_CmdResp6Error+0xd4>
  {
    return(SD_COM_CRC_FAILED);
 800c726:	230f      	movs	r3, #15
 800c728:	e000      	b.n	800c72c <SD_CmdResp6Error+0xd6>
  }
  
  return errorstate;
 800c72a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3718      	adds	r7, #24
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b08a      	sub	sp, #40	; 0x28
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef sdmmc_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800c73c:	2300      	movs	r3, #0
 800c73e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  uint32_t scr[2] = {0, 0};
 800c742:	2300      	movs	r3, #0
 800c744:	60bb      	str	r3, [r7, #8]
 800c746:	2300      	movs	r3, #0
 800c748:	60fb      	str	r3, [r7, #12]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2100      	movs	r1, #0
 800c750:	4618      	mov	r0, r3
 800c752:	f001 fe72 	bl	800e43a <SDMMC_GetResponse>
 800c756:	4603      	mov	r3, r0
 800c758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c75c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c760:	d105      	bne.n	800c76e <SD_WideBus_Enable+0x3a>
  {
    errorstate = SD_LOCK_UNLOCK_FAILED;
 800c762:	230e      	movs	r3, #14
 800c764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 800c768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c76c:	e059      	b.n	800c822 <SD_WideBus_Enable+0xee>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c76e:	f107 0308 	add.w	r3, r7, #8
 800c772:	4619      	mov	r1, r3
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f000 f8d3 	bl	800c920 <SD_FindSCR>
 800c77a:	4603      	mov	r3, r0
 800c77c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if(errorstate != SD_OK)
 800c780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c784:	2b00      	cmp	r3, #0
 800c786:	d002      	beq.n	800c78e <SD_WideBus_Enable+0x5a>
  {
    return errorstate;
 800c788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c78c:	e049      	b.n	800c822 <SD_WideBus_Enable+0xee>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c794:	2b00      	cmp	r3, #0
 800c796:	d03f      	beq.n	800c818 <SD_WideBus_Enable+0xe4>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c79c:	041b      	lsls	r3, r3, #16
 800c79e:	613b      	str	r3, [r7, #16]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800c7a0:	2337      	movs	r3, #55	; 0x37
 800c7a2:	617b      	str	r3, [r7, #20]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800c7a4:	2340      	movs	r3, #64	; 0x40
 800c7a6:	61bb      	str	r3, [r7, #24]
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	61fb      	str	r3, [r7, #28]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800c7ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7b0:	623b      	str	r3, [r7, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f107 0210 	add.w	r2, r7, #16
 800c7ba:	4611      	mov	r1, r2
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f001 fe0b 	bl	800e3d8 <SDMMC_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800c7c2:	2137      	movs	r1, #55	; 0x37
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f7ff fe0b 	bl	800c3e0 <SD_CmdResp1Error>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 800c7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d002      	beq.n	800c7de <SD_WideBus_Enable+0xaa>
    {
      return errorstate;
 800c7d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7dc:	e021      	b.n	800c822 <SD_WideBus_Enable+0xee>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    sdmmc_cmdinitstructure.Argument         = 2;
 800c7de:	2302      	movs	r3, #2
 800c7e0:	613b      	str	r3, [r7, #16]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 800c7e2:	2306      	movs	r3, #6
 800c7e4:	617b      	str	r3, [r7, #20]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f107 0210 	add.w	r2, r7, #16
 800c7ee:	4611      	mov	r1, r2
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f001 fdf1 	bl	800e3d8 <SDMMC_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 800c7f6:	2106      	movs	r1, #6
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f7ff fdf1 	bl	800c3e0 <SD_CmdResp1Error>
 800c7fe:	4603      	mov	r3, r0
 800c800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 800c804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d002      	beq.n	800c812 <SD_WideBus_Enable+0xde>
    {
      return errorstate;
 800c80c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c810:	e007      	b.n	800c822 <SD_WideBus_Enable+0xee>
    }
    
    return errorstate;
 800c812:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c816:	e004      	b.n	800c822 <SD_WideBus_Enable+0xee>
  }
  else
  {
    errorstate = SD_REQUEST_NOT_APPLICABLE;
 800c818:	2325      	movs	r3, #37	; 0x25
 800c81a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 800c81e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  }
}   
 800c822:	4618      	mov	r0, r3
 800c824:	3728      	adds	r7, #40	; 0x28
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b08a      	sub	sp, #40	; 0x28
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef sdmmc_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800c832:	2300      	movs	r3, #0
 800c834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  uint32_t scr[2] = {0, 0};
 800c838:	2300      	movs	r3, #0
 800c83a:	60bb      	str	r3, [r7, #8]
 800c83c:	2300      	movs	r3, #0
 800c83e:	60fb      	str	r3, [r7, #12]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2100      	movs	r1, #0
 800c846:	4618      	mov	r0, r3
 800c848:	f001 fdf7 	bl	800e43a <SDMMC_GetResponse>
 800c84c:	4603      	mov	r3, r0
 800c84e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c856:	d105      	bne.n	800c864 <SD_WideBus_Disable+0x3a>
  {
    errorstate = SD_LOCK_UNLOCK_FAILED;
 800c858:	230e      	movs	r3, #14
 800c85a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 800c85e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c862:	e059      	b.n	800c918 <SD_WideBus_Disable+0xee>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c864:	f107 0308 	add.w	r3, r7, #8
 800c868:	4619      	mov	r1, r3
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 f858 	bl	800c920 <SD_FindSCR>
 800c870:	4603      	mov	r3, r0
 800c872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if(errorstate != SD_OK)
 800c876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d002      	beq.n	800c884 <SD_WideBus_Disable+0x5a>
  {
    return errorstate;
 800c87e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c882:	e049      	b.n	800c918 <SD_WideBus_Disable+0xee>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d03f      	beq.n	800c90e <SD_WideBus_Disable+0xe4>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c892:	041b      	lsls	r3, r3, #16
 800c894:	613b      	str	r3, [r7, #16]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800c896:	2337      	movs	r3, #55	; 0x37
 800c898:	617b      	str	r3, [r7, #20]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800c89a:	2340      	movs	r3, #64	; 0x40
 800c89c:	61bb      	str	r3, [r7, #24]
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	61fb      	str	r3, [r7, #28]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800c8a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8a6:	623b      	str	r3, [r7, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f107 0210 	add.w	r2, r7, #16
 800c8b0:	4611      	mov	r1, r2
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f001 fd90 	bl	800e3d8 <SDMMC_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800c8b8:	2137      	movs	r1, #55	; 0x37
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f7ff fd90 	bl	800c3e0 <SD_CmdResp1Error>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 800c8c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d002      	beq.n	800c8d4 <SD_WideBus_Disable+0xaa>
    {
      return errorstate;
 800c8ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8d2:	e021      	b.n	800c918 <SD_WideBus_Disable+0xee>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    sdmmc_cmdinitstructure.Argument         = 0;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	613b      	str	r3, [r7, #16]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 800c8d8:	2306      	movs	r3, #6
 800c8da:	617b      	str	r3, [r7, #20]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f107 0210 	add.w	r2, r7, #16
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f001 fd76 	bl	800e3d8 <SDMMC_SendCommand>
    
    /* Check for error conditions */
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 800c8ec:	2106      	movs	r1, #6
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f7ff fd76 	bl	800c3e0 <SD_CmdResp1Error>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if(errorstate != SD_OK)
 800c8fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d002      	beq.n	800c908 <SD_WideBus_Disable+0xde>
    {
      return errorstate;
 800c902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c906:	e007      	b.n	800c918 <SD_WideBus_Disable+0xee>
    }
    
    return errorstate;
 800c908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c90c:	e004      	b.n	800c918 <SD_WideBus_Disable+0xee>
  }
  else
  {
    errorstate = SD_REQUEST_NOT_APPLICABLE;
 800c90e:	2325      	movs	r3, #37	; 0x25
 800c910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    return errorstate;
 800c914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  }
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3728      	adds	r7, #40	; 0x28
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <SD_FindSCR>:
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c920:	b590      	push	{r4, r7, lr}
 800c922:	b093      	sub	sp, #76	; 0x4c
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinitstructure;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 800c92a:	2300      	movs	r3, #0
 800c92c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  uint32_t index = 0;
 800c930:	2300      	movs	r3, #0
 800c932:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tempscr[2] = {0, 0};
 800c934:	2300      	movs	r3, #0
 800c936:	60fb      	str	r3, [r7, #12]
 800c938:	2300      	movs	r3, #0
 800c93a:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
 800c93c:	2308      	movs	r3, #8
 800c93e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 800c940:	2310      	movs	r3, #16
 800c942:	633b      	str	r3, [r7, #48]	; 0x30
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800c944:	2340      	movs	r3, #64	; 0x40
 800c946:	637b      	str	r3, [r7, #52]	; 0x34
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800c948:	2300      	movs	r3, #0
 800c94a:	63bb      	str	r3, [r7, #56]	; 0x38
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800c94c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c950:	63fb      	str	r3, [r7, #60]	; 0x3c
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c95a:	4611      	mov	r1, r2
 800c95c:	4618      	mov	r0, r3
 800c95e:	f001 fd3b 	bl	800e3d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 800c962:	2110      	movs	r1, #16
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f7ff fd3b 	bl	800c3e0 <SD_CmdResp1Error>
 800c96a:	4603      	mov	r3, r0
 800c96c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  
  if(errorstate != SD_OK)
 800c970:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c974:	2b00      	cmp	r3, #0
 800c976:	d002      	beq.n	800c97e <SD_FindSCR+0x5e>
  {
    return errorstate;
 800c978:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c97c:	e0c5      	b.n	800cb0a <SD_FindSCR+0x1ea>
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c982:	041b      	lsls	r3, r3, #16
 800c984:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800c986:	2337      	movs	r3, #55	; 0x37
 800c988:	633b      	str	r3, [r7, #48]	; 0x30
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c992:	4611      	mov	r1, r2
 800c994:	4618      	mov	r0, r3
 800c996:	f001 fd1f 	bl	800e3d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800c99a:	2137      	movs	r1, #55	; 0x37
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f7ff fd1f 	bl	800c3e0 <SD_CmdResp1Error>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  
  if(errorstate != SD_OK)
 800c9a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d002      	beq.n	800c9b6 <SD_FindSCR+0x96>
  {
    return errorstate;
 800c9b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c9b4:	e0a9      	b.n	800cb0a <SD_FindSCR+0x1ea>
  }
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 800c9b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c9ba:	617b      	str	r3, [r7, #20]
  sdmmc_datainitstructure.DataLength    = 8;
 800c9bc:	2308      	movs	r3, #8
 800c9be:	61bb      	str	r3, [r7, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c9c0:	2330      	movs	r3, #48	; 0x30
 800c9c2:	61fb      	str	r3, [r7, #28]
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c9c4:	2302      	movs	r3, #2
 800c9c6:	623b      	str	r3, [r7, #32]
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	627b      	str	r3, [r7, #36]	; 0x24
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f107 0214 	add.w	r2, r7, #20
 800c9d8:	4611      	mov	r1, r2
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f001 fd42 	bl	800e464 <SDMMC_DataConfig>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  sdmmc_cmdinitstructure.Argument         = 0;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 800c9e4:	2333      	movs	r3, #51	; 0x33
 800c9e6:	633b      	str	r3, [r7, #48]	; 0x30
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c9f0:	4611      	mov	r1, r2
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f001 fcf0 	bl	800e3d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SD_APP_SEND_SCR);
 800c9f8:	2133      	movs	r1, #51	; 0x33
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f7ff fcf0 	bl	800c3e0 <SD_CmdResp1Error>
 800ca00:	4603      	mov	r3, r0
 800ca02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  
  if(errorstate != SD_OK)
 800ca06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d018      	beq.n	800ca40 <SD_FindSCR+0x120>
  {
    return errorstate;
 800ca0e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ca12:	e07a      	b.n	800cb0a <SD_FindSCR+0x1ea>
  }
  
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00e      	beq.n	800ca40 <SD_FindSCR+0x120>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800ca22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca24:	009b      	lsls	r3, r3, #2
 800ca26:	f107 020c 	add.w	r2, r7, #12
 800ca2a:	18d4      	adds	r4, r2, r3
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4618      	mov	r0, r3
 800ca32:	f001 fca8 	bl	800e386 <SDMMC_ReadFIFO>
 800ca36:	4603      	mov	r3, r0
 800ca38:	6023      	str	r3, [r4, #0]
      index++;
 800ca3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	647b      	str	r3, [r7, #68]	; 0x44
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca46:	f240 432a 	movw	r3, #1066	; 0x42a
 800ca4a:	4013      	ands	r3, r2
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d0e1      	beq.n	800ca14 <SD_FindSCR+0xf4>
    }
  }
  
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca56:	f003 0308 	and.w	r3, r3, #8
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d009      	beq.n	800ca72 <SD_FindSCR+0x152>
  {
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2208      	movs	r2, #8
 800ca64:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
 800ca66:	2304      	movs	r3, #4
 800ca68:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    
    return errorstate;
 800ca6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ca70:	e04b      	b.n	800cb0a <SD_FindSCR+0x1ea>
  }
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca78:	f003 0302 	and.w	r3, r3, #2
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d009      	beq.n	800ca94 <SD_FindSCR+0x174>
  {
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2202      	movs	r2, #2
 800ca86:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_DATA_CRC_FAIL;
 800ca88:	2302      	movs	r3, #2
 800ca8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    
    return errorstate;
 800ca8e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ca92:	e03a      	b.n	800cb0a <SD_FindSCR+0x1ea>
  }
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca9a:	f003 0320 	and.w	r3, r3, #32
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d009      	beq.n	800cab6 <SD_FindSCR+0x196>
  {
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2220      	movs	r2, #32
 800caa8:	639a      	str	r2, [r3, #56]	; 0x38
    
    errorstate = SD_RX_OVERRUN;
 800caaa:	2306      	movs	r3, #6
 800caac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    
    return errorstate;
 800cab0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cab4:	e029      	b.n	800cb0a <SD_FindSCR+0x1ea>
  {
    /* No error flag set */
  }
  
  /* Clear all the static flags */
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800cabe:	639a      	str	r2, [r3, #56]	; 0x38
  
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	3304      	adds	r3, #4
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	0611      	lsls	r1, r2, #24
 800cac8:	68fa      	ldr	r2, [r7, #12]
 800caca:	0212      	lsls	r2, r2, #8
 800cacc:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800cad0:	4311      	orrs	r1, r2
    ((tempscr[0] & SD_16TO23BITS) >> 8) | ((tempscr[0] & SD_24TO31BITS) >> 24);
 800cad2:	68fa      	ldr	r2, [r7, #12]
 800cad4:	0a12      	lsrs	r2, r2, #8
 800cad6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 800cada:	4311      	orrs	r1, r2
    ((tempscr[0] & SD_16TO23BITS) >> 8) | ((tempscr[0] & SD_24TO31BITS) >> 24);
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	0e12      	lsrs	r2, r2, #24
 800cae0:	430a      	orrs	r2, r1
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 800cae2:	601a      	str	r2, [r3, #0]
  
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	061a      	lsls	r2, r3, #24
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	021b      	lsls	r3, r3, #8
 800caec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800caf0:	431a      	orrs	r2, r3
    ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	0a1b      	lsrs	r3, r3, #8
 800caf6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 800cafa:	431a      	orrs	r2, r3
    ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	0e1b      	lsrs	r3, r3, #24
 800cb00:	431a      	orrs	r2, r3
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	601a      	str	r2, [r3, #0]
  
  return errorstate;
 800cb06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	374c      	adds	r7, #76	; 0x4c
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd90      	pop	{r4, r7, pc}

0800cb12 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b082      	sub	sp, #8
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d101      	bne.n	800cb24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cb20:	2301      	movs	r3, #1
 800cb22:	e01d      	b.n	800cb60 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d106      	bne.n	800cb3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2200      	movs	r2, #0
 800cb34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 f815 	bl	800cb68 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2202      	movs	r2, #2
 800cb42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	3304      	adds	r3, #4
 800cb4e:	4619      	mov	r1, r3
 800cb50:	4610      	mov	r0, r2
 800cb52:	f000 f82f 	bl	800cbb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2201      	movs	r2, #1
 800cb5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800cb5e:	2300      	movs	r3, #0
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800cb70:	bf00      	nop
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	6812      	ldr	r2, [r2, #0]
 800cb8c:	68d2      	ldr	r2, [r2, #12]
 800cb8e:	f042 0201 	orr.w	r2, r2, #1
 800cb92:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	687a      	ldr	r2, [r7, #4]
 800cb9a:	6812      	ldr	r2, [r2, #0]
 800cb9c:	6812      	ldr	r2, [r2, #0]
 800cb9e:	f042 0201 	orr.w	r2, r2, #1
 800cba2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cba4:	2300      	movs	r3, #0
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	370c      	adds	r7, #12
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr
	...

0800cbb4 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	4a3c      	ldr	r2, [pc, #240]	; (800ccbc <TIM_Base_SetConfig+0x108>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d013      	beq.n	800cbf8 <TIM_Base_SetConfig+0x44>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbd6:	d00f      	beq.n	800cbf8 <TIM_Base_SetConfig+0x44>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	4a39      	ldr	r2, [pc, #228]	; (800ccc0 <TIM_Base_SetConfig+0x10c>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d00b      	beq.n	800cbf8 <TIM_Base_SetConfig+0x44>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	4a38      	ldr	r2, [pc, #224]	; (800ccc4 <TIM_Base_SetConfig+0x110>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d007      	beq.n	800cbf8 <TIM_Base_SetConfig+0x44>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	4a37      	ldr	r2, [pc, #220]	; (800ccc8 <TIM_Base_SetConfig+0x114>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d003      	beq.n	800cbf8 <TIM_Base_SetConfig+0x44>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	4a36      	ldr	r2, [pc, #216]	; (800cccc <TIM_Base_SetConfig+0x118>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d108      	bne.n	800cc0a <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	68fa      	ldr	r2, [r7, #12]
 800cc06:	4313      	orrs	r3, r2
 800cc08:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4a2b      	ldr	r2, [pc, #172]	; (800ccbc <TIM_Base_SetConfig+0x108>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d01f      	beq.n	800cc52 <TIM_Base_SetConfig+0x9e>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc18:	d01b      	beq.n	800cc52 <TIM_Base_SetConfig+0x9e>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4a28      	ldr	r2, [pc, #160]	; (800ccc0 <TIM_Base_SetConfig+0x10c>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d017      	beq.n	800cc52 <TIM_Base_SetConfig+0x9e>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	4a27      	ldr	r2, [pc, #156]	; (800ccc4 <TIM_Base_SetConfig+0x110>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d013      	beq.n	800cc52 <TIM_Base_SetConfig+0x9e>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4a26      	ldr	r2, [pc, #152]	; (800ccc8 <TIM_Base_SetConfig+0x114>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d00f      	beq.n	800cc52 <TIM_Base_SetConfig+0x9e>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	4a25      	ldr	r2, [pc, #148]	; (800cccc <TIM_Base_SetConfig+0x118>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d00b      	beq.n	800cc52 <TIM_Base_SetConfig+0x9e>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4a24      	ldr	r2, [pc, #144]	; (800ccd0 <TIM_Base_SetConfig+0x11c>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d007      	beq.n	800cc52 <TIM_Base_SetConfig+0x9e>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	4a23      	ldr	r2, [pc, #140]	; (800ccd4 <TIM_Base_SetConfig+0x120>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d003      	beq.n	800cc52 <TIM_Base_SetConfig+0x9e>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4a22      	ldr	r2, [pc, #136]	; (800ccd8 <TIM_Base_SetConfig+0x124>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d108      	bne.n	800cc64 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	4313      	orrs	r3, r2
 800cc62:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	68fa      	ldr	r2, [r7, #12]
 800cc68:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	689a      	ldr	r2, [r3, #8]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	4a0f      	ldr	r2, [pc, #60]	; (800ccbc <TIM_Base_SetConfig+0x108>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d00f      	beq.n	800cca2 <TIM_Base_SetConfig+0xee>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	4a11      	ldr	r2, [pc, #68]	; (800cccc <TIM_Base_SetConfig+0x118>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d00b      	beq.n	800cca2 <TIM_Base_SetConfig+0xee>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	4a10      	ldr	r2, [pc, #64]	; (800ccd0 <TIM_Base_SetConfig+0x11c>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d007      	beq.n	800cca2 <TIM_Base_SetConfig+0xee>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	4a0f      	ldr	r2, [pc, #60]	; (800ccd4 <TIM_Base_SetConfig+0x120>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d003      	beq.n	800cca2 <TIM_Base_SetConfig+0xee>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	4a0e      	ldr	r2, [pc, #56]	; (800ccd8 <TIM_Base_SetConfig+0x124>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d103      	bne.n	800ccaa <TIM_Base_SetConfig+0xf6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	691a      	ldr	r2, [r3, #16]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2201      	movs	r2, #1
 800ccae:	615a      	str	r2, [r3, #20]
}
 800ccb0:	bf00      	nop
 800ccb2:	3714      	adds	r7, #20
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr
 800ccbc:	40012c00 	.word	0x40012c00
 800ccc0:	40000400 	.word	0x40000400
 800ccc4:	40000800 	.word	0x40000800
 800ccc8:	40000c00 	.word	0x40000c00
 800cccc:	40013400 	.word	0x40013400
 800ccd0:	40014000 	.word	0x40014000
 800ccd4:	40014400 	.word	0x40014400
 800ccd8:	40014800 	.word	0x40014800

0800ccdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d101      	bne.n	800ccee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ccea:	2301      	movs	r3, #1
 800ccec:	e043      	b.n	800cd76 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->State == HAL_UART_STATE_RESET)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d106      	bne.n	800cd08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 f86f 	bl	800cde6 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2202      	movs	r2, #2
 800cd0c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	6812      	ldr	r2, [r2, #0]
 800cd18:	6812      	ldr	r2, [r2, #0]
 800cd1a:	f022 0201 	bic.w	r2, r2, #1
 800cd1e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 f915 	bl	800cf50 <UART_SetConfig>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d101      	bne.n	800cd30 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	e022      	b.n	800cd76 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d002      	beq.n	800cd3e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f000 fc2d 	bl	800d598 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	6812      	ldr	r2, [r2, #0]
 800cd46:	6852      	ldr	r2, [r2, #4]
 800cd48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cd4c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	6812      	ldr	r2, [r2, #0]
 800cd56:	6892      	ldr	r2, [r2, #8]
 800cd58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cd5c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	6812      	ldr	r2, [r2, #0]
 800cd66:	6812      	ldr	r2, [r2, #0]
 800cd68:	f042 0201 	orr.w	r2, r2, #1
 800cd6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->State to Ready */
  return (UART_CheckIdleState(huart));
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 fcb4 	bl	800d6dc <UART_CheckIdleState>
 800cd74:	4603      	mov	r3, r0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3708      	adds	r7, #8
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b082      	sub	sp, #8
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d101      	bne.n	800cd90 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	e026      	b.n	800cdde <HAL_UART_DeInit+0x60>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->State = HAL_UART_STATE_BUSY;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2202      	movs	r2, #2
 800cd94:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	6812      	ldr	r2, [r2, #0]
 800cda0:	6812      	ldr	r2, [r2, #0]
 800cda2:	f022 0201 	bic.w	r2, r2, #1
 800cda6:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2200      	movs	r2, #0
 800cdae:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	609a      	str	r2, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 f81a 	bl	800cdfa <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 800cddc:	2300      	movs	r3, #0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800cde6:	b480      	push	{r7}
 800cde8:	b083      	sub	sp, #12
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800cdee:	bf00      	nop
 800cdf0:	370c      	adds	r7, #12
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr

0800cdfa <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 800cdfa:	b480      	push	{r7}
 800cdfc:	b083      	sub	sp, #12
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 800ce02:	bf00      	nop
 800ce04:	370c      	adds	r7, #12
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr

0800ce0e <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce0e:	b480      	push	{r7}
 800ce10:	b085      	sub	sp, #20
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	60f8      	str	r0, [r7, #12]
 800ce16:	60b9      	str	r1, [r7, #8]
 800ce18:	4613      	mov	r3, r2
 800ce1a:	80fb      	strh	r3, [r7, #6]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d006      	beq.n	800ce36 <HAL_UART_Receive_IT+0x28>
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800ce2e:	b2db      	uxtb	r3, r3
 800ce30:	2b12      	cmp	r3, #18
 800ce32:	f040 8086 	bne.w	800cf42 <HAL_UART_Receive_IT+0x134>
  {
    if((pData == NULL ) || (Size == 0))
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d002      	beq.n	800ce42 <HAL_UART_Receive_IT+0x34>
 800ce3c:	88fb      	ldrh	r3, [r7, #6]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d101      	bne.n	800ce46 <HAL_UART_Receive_IT+0x38>
    {
      return HAL_ERROR;
 800ce42:	2301      	movs	r3, #1
 800ce44:	e07e      	b.n	800cf44 <HAL_UART_Receive_IT+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d101      	bne.n	800ce54 <HAL_UART_Receive_IT+0x46>
 800ce50:	2302      	movs	r3, #2
 800ce52:	e077      	b.n	800cf44 <HAL_UART_Receive_IT+0x136>
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2201      	movs	r2, #1
 800ce58:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pRxBuffPtr = pData;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	68ba      	ldr	r2, [r7, #8]
 800ce60:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	88fa      	ldrh	r2, [r7, #6]
 800ce66:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	88fa      	ldrh	r2, [r7, #6]
 800ce6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	689b      	ldr	r3, [r3, #8]
 800ce76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce7a:	d10e      	bne.n	800ce9a <HAL_UART_Receive_IT+0x8c>
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	691b      	ldr	r3, [r3, #16]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d105      	bne.n	800ce90 <HAL_UART_Receive_IT+0x82>
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ce8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ce8e:	e028      	b.n	800cee2 <HAL_UART_Receive_IT+0xd4>
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	22ff      	movs	r2, #255	; 0xff
 800ce94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ce98:	e023      	b.n	800cee2 <HAL_UART_Receive_IT+0xd4>
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	689b      	ldr	r3, [r3, #8]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d10d      	bne.n	800cebe <HAL_UART_Receive_IT+0xb0>
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	691b      	ldr	r3, [r3, #16]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d104      	bne.n	800ceb4 <HAL_UART_Receive_IT+0xa6>
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	22ff      	movs	r2, #255	; 0xff
 800ceae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ceb2:	e016      	b.n	800cee2 <HAL_UART_Receive_IT+0xd4>
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	227f      	movs	r2, #127	; 0x7f
 800ceb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cebc:	e011      	b.n	800cee2 <HAL_UART_Receive_IT+0xd4>
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cec6:	d10c      	bne.n	800cee2 <HAL_UART_Receive_IT+0xd4>
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	691b      	ldr	r3, [r3, #16]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d104      	bne.n	800ceda <HAL_UART_Receive_IT+0xcc>
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	227f      	movs	r2, #127	; 0x7f
 800ced4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ced8:	e003      	b.n	800cee2 <HAL_UART_Receive_IT+0xd4>
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	223f      	movs	r2, #63	; 0x3f
 800cede:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2200      	movs	r2, #0
 800cee6:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	2b12      	cmp	r3, #18
 800cef2:	d104      	bne.n	800cefe <HAL_UART_Receive_IT+0xf0>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2232      	movs	r2, #50	; 0x32
 800cef8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800cefc:	e003      	b.n	800cf06 <HAL_UART_Receive_IT+0xf8>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2222      	movs	r2, #34	; 0x22
 800cf02:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	68fa      	ldr	r2, [r7, #12]
 800cf0c:	6812      	ldr	r2, [r2, #0]
 800cf0e:	6812      	ldr	r2, [r2, #0]
 800cf10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf14:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	68fa      	ldr	r2, [r7, #12]
 800cf1c:	6812      	ldr	r2, [r2, #0]
 800cf1e:	6892      	ldr	r2, [r2, #8]
 800cf20:	f042 0201 	orr.w	r2, r2, #1
 800cf24:	609a      	str	r2, [r3, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	6812      	ldr	r2, [r2, #0]
 800cf36:	6812      	ldr	r2, [r2, #0]
 800cf38:	f042 0220 	orr.w	r2, r2, #32
 800cf3c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	e000      	b.n	800cf44 <HAL_UART_Receive_IT+0x136>
  }
  else
  {
    return HAL_BUSY;
 800cf42:	2302      	movs	r3, #2
  }
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3714      	adds	r7, #20
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cf54:	b086      	sub	sp, #24
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	617b      	str	r3, [r7, #20]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800cf5e:	2310      	movs	r3, #16
 800cf60:	74fb      	strb	r3, [r7, #19]
  uint16_t brrtemp                    = 0x0000;
 800cf62:	2300      	movs	r3, #0
 800cf64:	81bb      	strh	r3, [r7, #12]
  uint16_t usartdiv                   = 0x0000;
 800cf66:	2300      	movs	r3, #0
 800cf68:	823b      	strh	r3, [r7, #16]
  HAL_StatusTypeDef ret               = HAL_OK;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	73fb      	strb	r3, [r7, #15]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	689a      	ldr	r2, [r3, #8]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	691b      	ldr	r3, [r3, #16]
 800cf76:	431a      	orrs	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	695b      	ldr	r3, [r3, #20]
 800cf7c:	431a      	orrs	r2, r3
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	69db      	ldr	r3, [r3, #28]
 800cf82:	4313      	orrs	r3, r2
 800cf84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681a      	ldr	r2, [r3, #0]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	6819      	ldr	r1, [r3, #0]
 800cf90:	4bab      	ldr	r3, [pc, #684]	; (800d240 <UART_SetConfig+0x2f0>)
 800cf92:	400b      	ands	r3, r1
 800cf94:	6979      	ldr	r1, [r7, #20]
 800cf96:	430b      	orrs	r3, r1
 800cf98:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	6812      	ldr	r2, [r2, #0]
 800cfa2:	6852      	ldr	r2, [r2, #4]
 800cfa4:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	68d2      	ldr	r2, [r2, #12]
 800cfac:	430a      	orrs	r2, r1
 800cfae:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	699b      	ldr	r3, [r3, #24]
 800cfb4:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4aa2      	ldr	r2, [pc, #648]	; (800d244 <UART_SetConfig+0x2f4>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d004      	beq.n	800cfca <UART_SetConfig+0x7a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6a1b      	ldr	r3, [r3, #32]
 800cfc4:	697a      	ldr	r2, [r7, #20]
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	6812      	ldr	r2, [r2, #0]
 800cfd2:	6892      	ldr	r2, [r2, #8]
 800cfd4:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 800cfd8:	697a      	ldr	r2, [r7, #20]
 800cfda:	430a      	orrs	r2, r1
 800cfdc:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	4a99      	ldr	r2, [pc, #612]	; (800d248 <UART_SetConfig+0x2f8>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d121      	bne.n	800d02c <UART_SetConfig+0xdc>
 800cfe8:	4b98      	ldr	r3, [pc, #608]	; (800d24c <UART_SetConfig+0x2fc>)
 800cfea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfee:	f003 0303 	and.w	r3, r3, #3
 800cff2:	2b03      	cmp	r3, #3
 800cff4:	d816      	bhi.n	800d024 <UART_SetConfig+0xd4>
 800cff6:	a201      	add	r2, pc, #4	; (adr r2, 800cffc <UART_SetConfig+0xac>)
 800cff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cffc:	0800d00d 	.word	0x0800d00d
 800d000:	0800d019 	.word	0x0800d019
 800d004:	0800d013 	.word	0x0800d013
 800d008:	0800d01f 	.word	0x0800d01f
 800d00c:	2301      	movs	r3, #1
 800d00e:	74fb      	strb	r3, [r7, #19]
 800d010:	e0e4      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d012:	2302      	movs	r3, #2
 800d014:	74fb      	strb	r3, [r7, #19]
 800d016:	e0e1      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d018:	2304      	movs	r3, #4
 800d01a:	74fb      	strb	r3, [r7, #19]
 800d01c:	e0de      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d01e:	2308      	movs	r3, #8
 800d020:	74fb      	strb	r3, [r7, #19]
 800d022:	e0db      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d024:	2310      	movs	r3, #16
 800d026:	74fb      	strb	r3, [r7, #19]
 800d028:	bf00      	nop
 800d02a:	e0d7      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4a87      	ldr	r2, [pc, #540]	; (800d250 <UART_SetConfig+0x300>)
 800d032:	4293      	cmp	r3, r2
 800d034:	d134      	bne.n	800d0a0 <UART_SetConfig+0x150>
 800d036:	4b85      	ldr	r3, [pc, #532]	; (800d24c <UART_SetConfig+0x2fc>)
 800d038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d03c:	f003 030c 	and.w	r3, r3, #12
 800d040:	2b0c      	cmp	r3, #12
 800d042:	d829      	bhi.n	800d098 <UART_SetConfig+0x148>
 800d044:	a201      	add	r2, pc, #4	; (adr r2, 800d04c <UART_SetConfig+0xfc>)
 800d046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d04a:	bf00      	nop
 800d04c:	0800d081 	.word	0x0800d081
 800d050:	0800d099 	.word	0x0800d099
 800d054:	0800d099 	.word	0x0800d099
 800d058:	0800d099 	.word	0x0800d099
 800d05c:	0800d08d 	.word	0x0800d08d
 800d060:	0800d099 	.word	0x0800d099
 800d064:	0800d099 	.word	0x0800d099
 800d068:	0800d099 	.word	0x0800d099
 800d06c:	0800d087 	.word	0x0800d087
 800d070:	0800d099 	.word	0x0800d099
 800d074:	0800d099 	.word	0x0800d099
 800d078:	0800d099 	.word	0x0800d099
 800d07c:	0800d093 	.word	0x0800d093
 800d080:	2300      	movs	r3, #0
 800d082:	74fb      	strb	r3, [r7, #19]
 800d084:	e0aa      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d086:	2302      	movs	r3, #2
 800d088:	74fb      	strb	r3, [r7, #19]
 800d08a:	e0a7      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d08c:	2304      	movs	r3, #4
 800d08e:	74fb      	strb	r3, [r7, #19]
 800d090:	e0a4      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d092:	2308      	movs	r3, #8
 800d094:	74fb      	strb	r3, [r7, #19]
 800d096:	e0a1      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d098:	2310      	movs	r3, #16
 800d09a:	74fb      	strb	r3, [r7, #19]
 800d09c:	bf00      	nop
 800d09e:	e09d      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a6b      	ldr	r2, [pc, #428]	; (800d254 <UART_SetConfig+0x304>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d120      	bne.n	800d0ec <UART_SetConfig+0x19c>
 800d0aa:	4b68      	ldr	r3, [pc, #416]	; (800d24c <UART_SetConfig+0x2fc>)
 800d0ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d0b4:	2b10      	cmp	r3, #16
 800d0b6:	d00f      	beq.n	800d0d8 <UART_SetConfig+0x188>
 800d0b8:	2b10      	cmp	r3, #16
 800d0ba:	d802      	bhi.n	800d0c2 <UART_SetConfig+0x172>
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d005      	beq.n	800d0cc <UART_SetConfig+0x17c>
 800d0c0:	e010      	b.n	800d0e4 <UART_SetConfig+0x194>
 800d0c2:	2b20      	cmp	r3, #32
 800d0c4:	d005      	beq.n	800d0d2 <UART_SetConfig+0x182>
 800d0c6:	2b30      	cmp	r3, #48	; 0x30
 800d0c8:	d009      	beq.n	800d0de <UART_SetConfig+0x18e>
 800d0ca:	e00b      	b.n	800d0e4 <UART_SetConfig+0x194>
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	74fb      	strb	r3, [r7, #19]
 800d0d0:	e084      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d0d2:	2302      	movs	r3, #2
 800d0d4:	74fb      	strb	r3, [r7, #19]
 800d0d6:	e081      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d0d8:	2304      	movs	r3, #4
 800d0da:	74fb      	strb	r3, [r7, #19]
 800d0dc:	e07e      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d0de:	2308      	movs	r3, #8
 800d0e0:	74fb      	strb	r3, [r7, #19]
 800d0e2:	e07b      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d0e4:	2310      	movs	r3, #16
 800d0e6:	74fb      	strb	r3, [r7, #19]
 800d0e8:	bf00      	nop
 800d0ea:	e077      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a59      	ldr	r2, [pc, #356]	; (800d258 <UART_SetConfig+0x308>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d120      	bne.n	800d138 <UART_SetConfig+0x1e8>
 800d0f6:	4b55      	ldr	r3, [pc, #340]	; (800d24c <UART_SetConfig+0x2fc>)
 800d0f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d100:	2b40      	cmp	r3, #64	; 0x40
 800d102:	d00f      	beq.n	800d124 <UART_SetConfig+0x1d4>
 800d104:	2b40      	cmp	r3, #64	; 0x40
 800d106:	d802      	bhi.n	800d10e <UART_SetConfig+0x1be>
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d005      	beq.n	800d118 <UART_SetConfig+0x1c8>
 800d10c:	e010      	b.n	800d130 <UART_SetConfig+0x1e0>
 800d10e:	2b80      	cmp	r3, #128	; 0x80
 800d110:	d005      	beq.n	800d11e <UART_SetConfig+0x1ce>
 800d112:	2bc0      	cmp	r3, #192	; 0xc0
 800d114:	d009      	beq.n	800d12a <UART_SetConfig+0x1da>
 800d116:	e00b      	b.n	800d130 <UART_SetConfig+0x1e0>
 800d118:	2300      	movs	r3, #0
 800d11a:	74fb      	strb	r3, [r7, #19]
 800d11c:	e05e      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d11e:	2302      	movs	r3, #2
 800d120:	74fb      	strb	r3, [r7, #19]
 800d122:	e05b      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d124:	2304      	movs	r3, #4
 800d126:	74fb      	strb	r3, [r7, #19]
 800d128:	e058      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d12a:	2308      	movs	r3, #8
 800d12c:	74fb      	strb	r3, [r7, #19]
 800d12e:	e055      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d130:	2310      	movs	r3, #16
 800d132:	74fb      	strb	r3, [r7, #19]
 800d134:	bf00      	nop
 800d136:	e051      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a47      	ldr	r2, [pc, #284]	; (800d25c <UART_SetConfig+0x30c>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d124      	bne.n	800d18c <UART_SetConfig+0x23c>
 800d142:	4b42      	ldr	r3, [pc, #264]	; (800d24c <UART_SetConfig+0x2fc>)
 800d144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d14c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d150:	d012      	beq.n	800d178 <UART_SetConfig+0x228>
 800d152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d156:	d802      	bhi.n	800d15e <UART_SetConfig+0x20e>
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d007      	beq.n	800d16c <UART_SetConfig+0x21c>
 800d15c:	e012      	b.n	800d184 <UART_SetConfig+0x234>
 800d15e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d162:	d006      	beq.n	800d172 <UART_SetConfig+0x222>
 800d164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d168:	d009      	beq.n	800d17e <UART_SetConfig+0x22e>
 800d16a:	e00b      	b.n	800d184 <UART_SetConfig+0x234>
 800d16c:	2300      	movs	r3, #0
 800d16e:	74fb      	strb	r3, [r7, #19]
 800d170:	e034      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d172:	2302      	movs	r3, #2
 800d174:	74fb      	strb	r3, [r7, #19]
 800d176:	e031      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d178:	2304      	movs	r3, #4
 800d17a:	74fb      	strb	r3, [r7, #19]
 800d17c:	e02e      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d17e:	2308      	movs	r3, #8
 800d180:	74fb      	strb	r3, [r7, #19]
 800d182:	e02b      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d184:	2310      	movs	r3, #16
 800d186:	74fb      	strb	r3, [r7, #19]
 800d188:	bf00      	nop
 800d18a:	e027      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a2c      	ldr	r2, [pc, #176]	; (800d244 <UART_SetConfig+0x2f4>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d123      	bne.n	800d1de <UART_SetConfig+0x28e>
 800d196:	4b2d      	ldr	r3, [pc, #180]	; (800d24c <UART_SetConfig+0x2fc>)
 800d198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d19c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d1a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1a4:	d012      	beq.n	800d1cc <UART_SetConfig+0x27c>
 800d1a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1aa:	d802      	bhi.n	800d1b2 <UART_SetConfig+0x262>
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d007      	beq.n	800d1c0 <UART_SetConfig+0x270>
 800d1b0:	e012      	b.n	800d1d8 <UART_SetConfig+0x288>
 800d1b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d1b6:	d006      	beq.n	800d1c6 <UART_SetConfig+0x276>
 800d1b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d1bc:	d009      	beq.n	800d1d2 <UART_SetConfig+0x282>
 800d1be:	e00b      	b.n	800d1d8 <UART_SetConfig+0x288>
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	74fb      	strb	r3, [r7, #19]
 800d1c4:	e00a      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d1c6:	2302      	movs	r3, #2
 800d1c8:	74fb      	strb	r3, [r7, #19]
 800d1ca:	e007      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d1cc:	2304      	movs	r3, #4
 800d1ce:	74fb      	strb	r3, [r7, #19]
 800d1d0:	e004      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d1d2:	2308      	movs	r3, #8
 800d1d4:	74fb      	strb	r3, [r7, #19]
 800d1d6:	e001      	b.n	800d1dc <UART_SetConfig+0x28c>
 800d1d8:	2310      	movs	r3, #16
 800d1da:	74fb      	strb	r3, [r7, #19]
 800d1dc:	bf00      	nop

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a18      	ldr	r2, [pc, #96]	; (800d244 <UART_SetConfig+0x2f4>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	f040 80f0 	bne.w	800d3ca <UART_SetConfig+0x47a>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	617b      	str	r3, [r7, #20]

    switch (clocksource)
 800d1ee:	7cfb      	ldrb	r3, [r7, #19]
 800d1f0:	2b08      	cmp	r3, #8
 800d1f2:	d837      	bhi.n	800d264 <UART_SetConfig+0x314>
 800d1f4:	a201      	add	r2, pc, #4	; (adr r2, 800d1fc <UART_SetConfig+0x2ac>)
 800d1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1fa:	bf00      	nop
 800d1fc:	0800d221 	.word	0x0800d221
 800d200:	0800d265 	.word	0x0800d265
 800d204:	0800d229 	.word	0x0800d229
 800d208:	0800d265 	.word	0x0800d265
 800d20c:	0800d22f 	.word	0x0800d22f
 800d210:	0800d265 	.word	0x0800d265
 800d214:	0800d265 	.word	0x0800d265
 800d218:	0800d265 	.word	0x0800d265
 800d21c:	0800d237 	.word	0x0800d237
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 800d220:	f7fd fdbc 	bl	800ad9c <HAL_RCC_GetPCLK1Freq>
 800d224:	6178      	str	r0, [r7, #20]
      break;
 800d226:	e020      	b.n	800d26a <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
 800d228:	4b0d      	ldr	r3, [pc, #52]	; (800d260 <UART_SetConfig+0x310>)
 800d22a:	617b      	str	r3, [r7, #20]
      break;
 800d22c:	e01d      	b.n	800d26a <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 800d22e:	f7fd fcaf 	bl	800ab90 <HAL_RCC_GetSysClockFreq>
 800d232:	6178      	str	r0, [r7, #20]
      break;
 800d234:	e019      	b.n	800d26a <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 800d236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d23a:	617b      	str	r3, [r7, #20]
      break;
 800d23c:	e015      	b.n	800d26a <UART_SetConfig+0x31a>
 800d23e:	bf00      	nop
 800d240:	efff69f3 	.word	0xefff69f3
 800d244:	40008000 	.word	0x40008000
 800d248:	40013800 	.word	0x40013800
 800d24c:	40021000 	.word	0x40021000
 800d250:	40004400 	.word	0x40004400
 800d254:	40004800 	.word	0x40004800
 800d258:	40004c00 	.word	0x40004c00
 800d25c:	40005000 	.word	0x40005000
 800d260:	00f42400 	.word	0x00f42400
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800d264:	2301      	movs	r3, #1
 800d266:	73fb      	strb	r3, [r7, #15]
      break;
 800d268:	bf00      	nop
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	f000 818a 	beq.w	800d586 <UART_SetConfig+0x636>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	685a      	ldr	r2, [r3, #4]
 800d276:	4613      	mov	r3, r2
 800d278:	005b      	lsls	r3, r3, #1
 800d27a:	441a      	add	r2, r3
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d805      	bhi.n	800d28e <UART_SetConfig+0x33e>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	031a      	lsls	r2, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d202      	bcs.n	800d294 <UART_SetConfig+0x344>
      {
        ret = HAL_ERROR;
 800d28e:	2301      	movs	r3, #1
 800d290:	73fb      	strb	r3, [r7, #15]
 800d292:	e178      	b.n	800d586 <UART_SetConfig+0x636>
      }
      else
      {
        switch (clocksource)
 800d294:	7cfb      	ldrb	r3, [r7, #19]
 800d296:	2b08      	cmp	r3, #8
 800d298:	f200 8084 	bhi.w	800d3a4 <UART_SetConfig+0x454>
 800d29c:	a201      	add	r2, pc, #4	; (adr r2, 800d2a4 <UART_SetConfig+0x354>)
 800d29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a2:	bf00      	nop
 800d2a4:	0800d2c9 	.word	0x0800d2c9
 800d2a8:	0800d3a5 	.word	0x0800d3a5
 800d2ac:	0800d309 	.word	0x0800d309
 800d2b0:	0800d3a5 	.word	0x0800d3a5
 800d2b4:	0800d33d 	.word	0x0800d33d
 800d2b8:	0800d3a5 	.word	0x0800d3a5
 800d2bc:	0800d3a5 	.word	0x0800d3a5
 800d2c0:	0800d3a5 	.word	0x0800d3a5
 800d2c4:	0800d37b 	.word	0x0800d37b
        {
        case UART_CLOCKSOURCE_PCLK1:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800d2c8:	f7fd fd68 	bl	800ad9c <HAL_RCC_GetPCLK1Freq>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	f04f 0400 	mov.w	r4, #0
 800d2d2:	ea4f 2904 	mov.w	r9, r4, lsl #8
 800d2d6:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 800d2da:	ea4f 2803 	mov.w	r8, r3, lsl #8
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	085b      	lsrs	r3, r3, #1
 800d2e4:	f04f 0400 	mov.w	r4, #0
 800d2e8:	eb18 0003 	adds.w	r0, r8, r3
 800d2ec:	eb49 0104 	adc.w	r1, r9, r4
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	f04f 0400 	mov.w	r4, #0
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	4623      	mov	r3, r4
 800d2fc:	f7f3 fca0 	bl	8000c40 <__aeabi_uldivmod>
 800d300:	4603      	mov	r3, r0
 800d302:	460c      	mov	r4, r1
 800d304:	617b      	str	r3, [r7, #20]
          break;
 800d306:	e050      	b.n	800d3aa <UART_SetConfig+0x45a>
        case UART_CLOCKSOURCE_HSI:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	085b      	lsrs	r3, r3, #1
 800d30e:	f04f 0400 	mov.w	r4, #0
 800d312:	49a0      	ldr	r1, [pc, #640]	; (800d594 <UART_SetConfig+0x644>)
 800d314:	f04f 0200 	mov.w	r2, #0
 800d318:	eb13 0801 	adds.w	r8, r3, r1
 800d31c:	eb44 0902 	adc.w	r9, r4, r2
 800d320:	4640      	mov	r0, r8
 800d322:	4649      	mov	r1, r9
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	f04f 0400 	mov.w	r4, #0
 800d32c:	461a      	mov	r2, r3
 800d32e:	4623      	mov	r3, r4
 800d330:	f7f3 fc86 	bl	8000c40 <__aeabi_uldivmod>
 800d334:	4603      	mov	r3, r0
 800d336:	460c      	mov	r4, r1
 800d338:	617b      	str	r3, [r7, #20]
          break;
 800d33a:	e036      	b.n	800d3aa <UART_SetConfig+0x45a>
        case UART_CLOCKSOURCE_SYSCLK:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800d33c:	f7fd fc28 	bl	800ab90 <HAL_RCC_GetSysClockFreq>
 800d340:	4603      	mov	r3, r0
 800d342:	461a      	mov	r2, r3
 800d344:	f04f 0300 	mov.w	r3, #0
 800d348:	021d      	lsls	r5, r3, #8
 800d34a:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 800d34e:	0214      	lsls	r4, r2, #8
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	685b      	ldr	r3, [r3, #4]
 800d354:	085b      	lsrs	r3, r3, #1
 800d356:	461a      	mov	r2, r3
 800d358:	f04f 0300 	mov.w	r3, #0
 800d35c:	18a0      	adds	r0, r4, r2
 800d35e:	eb45 0103 	adc.w	r1, r5, r3
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	f04f 0400 	mov.w	r4, #0
 800d36a:	461a      	mov	r2, r3
 800d36c:	4623      	mov	r3, r4
 800d36e:	f7f3 fc67 	bl	8000c40 <__aeabi_uldivmod>
 800d372:	4603      	mov	r3, r0
 800d374:	460c      	mov	r4, r1
 800d376:	617b      	str	r3, [r7, #20]
          break;
 800d378:	e017      	b.n	800d3aa <UART_SetConfig+0x45a>
        case UART_CLOCKSOURCE_LSE:
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	085b      	lsrs	r3, r3, #1
 800d380:	f04f 0400 	mov.w	r4, #0
 800d384:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800d388:	f144 0100 	adc.w	r1, r4, #0
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	f04f 0400 	mov.w	r4, #0
 800d394:	461a      	mov	r2, r3
 800d396:	4623      	mov	r3, r4
 800d398:	f7f3 fc52 	bl	8000c40 <__aeabi_uldivmod>
 800d39c:	4603      	mov	r3, r0
 800d39e:	460c      	mov	r4, r1
 800d3a0:	617b      	str	r3, [r7, #20]
          break;
 800d3a2:	e002      	b.n	800d3aa <UART_SetConfig+0x45a>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
            ret = HAL_ERROR;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	73fb      	strb	r3, [r7, #15]
          break;
 800d3a8:	bf00      	nop
        }

        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d3b0:	d308      	bcc.n	800d3c4 <UART_SetConfig+0x474>
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d3b8:	d204      	bcs.n	800d3c4 <UART_SetConfig+0x474>
        {
           huart->Instance->BRR = tmpreg;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	697a      	ldr	r2, [r7, #20]
 800d3c0:	60da      	str	r2, [r3, #12]
 800d3c2:	e0e0      	b.n	800d586 <UART_SetConfig+0x636>
        }
        else
        {
          ret = HAL_ERROR;
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	73fb      	strb	r3, [r7, #15]
 800d3c8:	e0dd      	b.n	800d586 <UART_SetConfig+0x636>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	69db      	ldr	r3, [r3, #28]
 800d3ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3d2:	d16e      	bne.n	800d4b2 <UART_SetConfig+0x562>
  {
    switch (clocksource)
 800d3d4:	7cfb      	ldrb	r3, [r7, #19]
 800d3d6:	2b08      	cmp	r3, #8
 800d3d8:	d856      	bhi.n	800d488 <UART_SetConfig+0x538>
 800d3da:	a201      	add	r2, pc, #4	; (adr r2, 800d3e0 <UART_SetConfig+0x490>)
 800d3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3e0:	0800d405 	.word	0x0800d405
 800d3e4:	0800d421 	.word	0x0800d421
 800d3e8:	0800d43d 	.word	0x0800d43d
 800d3ec:	0800d489 	.word	0x0800d489
 800d3f0:	0800d457 	.word	0x0800d457
 800d3f4:	0800d489 	.word	0x0800d489
 800d3f8:	0800d489 	.word	0x0800d489
 800d3fc:	0800d489 	.word	0x0800d489
 800d400:	0800d473 	.word	0x0800d473
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800d404:	f7fd fcca 	bl	800ad9c <HAL_RCC_GetPCLK1Freq>
 800d408:	4603      	mov	r3, r0
 800d40a:	005a      	lsls	r2, r3, #1
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	085b      	lsrs	r3, r3, #1
 800d412:	441a      	add	r2, r3
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	fbb2 f3f3 	udiv	r3, r2, r3
 800d41c:	823b      	strh	r3, [r7, #16]
      break;
 800d41e:	e036      	b.n	800d48e <UART_SetConfig+0x53e>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800d420:	f7fd fcde 	bl	800ade0 <HAL_RCC_GetPCLK2Freq>
 800d424:	4603      	mov	r3, r0
 800d426:	005a      	lsls	r2, r3, #1
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	085b      	lsrs	r3, r3, #1
 800d42e:	441a      	add	r2, r3
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	fbb2 f3f3 	udiv	r3, r2, r3
 800d438:	823b      	strh	r3, [r7, #16]
      break;
 800d43a:	e028      	b.n	800d48e <UART_SetConfig+0x53e>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	085b      	lsrs	r3, r3, #1
 800d442:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800d446:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	6852      	ldr	r2, [r2, #4]
 800d44e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d452:	823b      	strh	r3, [r7, #16]
      break;
 800d454:	e01b      	b.n	800d48e <UART_SetConfig+0x53e>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800d456:	f7fd fb9b 	bl	800ab90 <HAL_RCC_GetSysClockFreq>
 800d45a:	4603      	mov	r3, r0
 800d45c:	005a      	lsls	r2, r3, #1
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	085b      	lsrs	r3, r3, #1
 800d464:	441a      	add	r2, r3
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d46e:	823b      	strh	r3, [r7, #16]
      break;
 800d470:	e00d      	b.n	800d48e <UART_SetConfig+0x53e>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	085b      	lsrs	r3, r3, #1
 800d478:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	685b      	ldr	r3, [r3, #4]
 800d480:	fbb2 f3f3 	udiv	r3, r2, r3
 800d484:	823b      	strh	r3, [r7, #16]
      break;
 800d486:	e002      	b.n	800d48e <UART_SetConfig+0x53e>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800d488:	2301      	movs	r3, #1
 800d48a:	73fb      	strb	r3, [r7, #15]
      break;
 800d48c:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0;
 800d48e:	8a3b      	ldrh	r3, [r7, #16]
 800d490:	f023 030f 	bic.w	r3, r3, #15
 800d494:	81bb      	strh	r3, [r7, #12]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 800d496:	8a3b      	ldrh	r3, [r7, #16]
 800d498:	105b      	asrs	r3, r3, #1
 800d49a:	b29b      	uxth	r3, r3
 800d49c:	f003 0307 	and.w	r3, r3, #7
 800d4a0:	b29a      	uxth	r2, r3
 800d4a2:	89bb      	ldrh	r3, [r7, #12]
 800d4a4:	4313      	orrs	r3, r2
 800d4a6:	81bb      	strh	r3, [r7, #12]
    huart->Instance->BRR = brrtemp;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	89ba      	ldrh	r2, [r7, #12]
 800d4ae:	60da      	str	r2, [r3, #12]
 800d4b0:	e069      	b.n	800d586 <UART_SetConfig+0x636>
  }
  else
  {
    switch (clocksource)
 800d4b2:	7cfb      	ldrb	r3, [r7, #19]
 800d4b4:	2b08      	cmp	r3, #8
 800d4b6:	d863      	bhi.n	800d580 <UART_SetConfig+0x630>
 800d4b8:	a201      	add	r2, pc, #4	; (adr r2, 800d4c0 <UART_SetConfig+0x570>)
 800d4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4be:	bf00      	nop
 800d4c0:	0800d4e5 	.word	0x0800d4e5
 800d4c4:	0800d505 	.word	0x0800d505
 800d4c8:	0800d525 	.word	0x0800d525
 800d4cc:	0800d581 	.word	0x0800d581
 800d4d0:	0800d545 	.word	0x0800d545
 800d4d4:	0800d581 	.word	0x0800d581
 800d4d8:	0800d581 	.word	0x0800d581
 800d4dc:	0800d581 	.word	0x0800d581
 800d4e0:	0800d565 	.word	0x0800d565
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681c      	ldr	r4, [r3, #0]
 800d4e8:	f7fd fc58 	bl	800ad9c <HAL_RCC_GetPCLK1Freq>
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	085b      	lsrs	r3, r3, #1
 800d4f4:	441a      	add	r2, r3
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	685b      	ldr	r3, [r3, #4]
 800d4fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	60e3      	str	r3, [r4, #12]
      break;
 800d502:	e040      	b.n	800d586 <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681c      	ldr	r4, [r3, #0]
 800d508:	f7fd fc6a 	bl	800ade0 <HAL_RCC_GetPCLK2Freq>
 800d50c:	4602      	mov	r2, r0
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	085b      	lsrs	r3, r3, #1
 800d514:	441a      	add	r2, r3
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	685b      	ldr	r3, [r3, #4]
 800d51a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d51e:	b29b      	uxth	r3, r3
 800d520:	60e3      	str	r3, [r4, #12]
      break;
 800d522:	e030      	b.n	800d586 <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	085b      	lsrs	r3, r3, #1
 800d52e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800d532:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800d536:	6879      	ldr	r1, [r7, #4]
 800d538:	6849      	ldr	r1, [r1, #4]
 800d53a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d53e:	b29b      	uxth	r3, r3
 800d540:	60d3      	str	r3, [r2, #12]
      break;
 800d542:	e020      	b.n	800d586 <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681c      	ldr	r4, [r3, #0]
 800d548:	f7fd fb22 	bl	800ab90 <HAL_RCC_GetSysClockFreq>
 800d54c:	4602      	mov	r2, r0
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	685b      	ldr	r3, [r3, #4]
 800d552:	085b      	lsrs	r3, r3, #1
 800d554:	441a      	add	r2, r3
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d55e:	b29b      	uxth	r3, r3
 800d560:	60e3      	str	r3, [r4, #12]
      break;
 800d562:	e010      	b.n	800d586 <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	6852      	ldr	r2, [r2, #4]
 800d56c:	0852      	lsrs	r2, r2, #1
 800d56e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	6852      	ldr	r2, [r2, #4]
 800d576:	fbb1 f2f2 	udiv	r2, r1, r2
 800d57a:	b292      	uxth	r2, r2
 800d57c:	60da      	str	r2, [r3, #12]
      break;
 800d57e:	e002      	b.n	800d586 <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800d580:	2301      	movs	r3, #1
 800d582:	73fb      	strb	r3, [r7, #15]
      break;
 800d584:	bf00      	nop
    }
  }

  return ret;
 800d586:	7bfb      	ldrb	r3, [r7, #15]

}
 800d588:	4618      	mov	r0, r3
 800d58a:	3718      	adds	r7, #24
 800d58c:	46bd      	mov	sp, r7
 800d58e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d592:	bf00      	nop
 800d594:	f4240000 	.word	0xf4240000

0800d598 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d598:	b480      	push	{r7}
 800d59a:	b083      	sub	sp, #12
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a4:	f003 0301 	and.w	r3, r3, #1
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00a      	beq.n	800d5c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	6812      	ldr	r2, [r2, #0]
 800d5b4:	6852      	ldr	r2, [r2, #4]
 800d5b6:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d5be:	430a      	orrs	r2, r1
 800d5c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c6:	f003 0302 	and.w	r3, r3, #2
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d00a      	beq.n	800d5e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	6812      	ldr	r2, [r2, #0]
 800d5d6:	6852      	ldr	r2, [r2, #4]
 800d5d8:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d5e0:	430a      	orrs	r2, r1
 800d5e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e8:	f003 0304 	and.w	r3, r3, #4
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d00a      	beq.n	800d606 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	6812      	ldr	r2, [r2, #0]
 800d5f8:	6852      	ldr	r2, [r2, #4]
 800d5fa:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d602:	430a      	orrs	r2, r1
 800d604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d60a:	f003 0308 	and.w	r3, r3, #8
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d00a      	beq.n	800d628 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	687a      	ldr	r2, [r7, #4]
 800d618:	6812      	ldr	r2, [r2, #0]
 800d61a:	6852      	ldr	r2, [r2, #4]
 800d61c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d624:	430a      	orrs	r2, r1
 800d626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d62c:	f003 0310 	and.w	r3, r3, #16
 800d630:	2b00      	cmp	r3, #0
 800d632:	d00a      	beq.n	800d64a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	687a      	ldr	r2, [r7, #4]
 800d63a:	6812      	ldr	r2, [r2, #0]
 800d63c:	6892      	ldr	r2, [r2, #8]
 800d63e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d646:	430a      	orrs	r2, r1
 800d648:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d64e:	f003 0320 	and.w	r3, r3, #32
 800d652:	2b00      	cmp	r3, #0
 800d654:	d00a      	beq.n	800d66c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	6812      	ldr	r2, [r2, #0]
 800d65e:	6892      	ldr	r2, [r2, #8]
 800d660:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800d664:	687a      	ldr	r2, [r7, #4]
 800d666:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d668:	430a      	orrs	r2, r1
 800d66a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d674:	2b00      	cmp	r3, #0
 800d676:	d01a      	beq.n	800d6ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	687a      	ldr	r2, [r7, #4]
 800d67e:	6812      	ldr	r2, [r2, #0]
 800d680:	6852      	ldr	r2, [r2, #4]
 800d682:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d68a:	430a      	orrs	r2, r1
 800d68c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d696:	d10a      	bne.n	800d6ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	687a      	ldr	r2, [r7, #4]
 800d69e:	6812      	ldr	r2, [r2, #0]
 800d6a0:	6852      	ldr	r2, [r2, #4]
 800d6a2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d6aa:	430a      	orrs	r2, r1
 800d6ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d00a      	beq.n	800d6d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	6812      	ldr	r2, [r2, #0]
 800d6c2:	6852      	ldr	r2, [r2, #4]
 800d6c4:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d6cc:	430a      	orrs	r2, r1
 800d6ce:	605a      	str	r2, [r3, #4]
  }
}
 800d6d0:	bf00      	nop
 800d6d2:	370c      	adds	r7, #12
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f003 0308 	and.w	r3, r3, #8
 800d6f4:	2b08      	cmp	r3, #8
 800d6f6:	d10c      	bne.n	800d712 <UART_CheckIdleState+0x36>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d6f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 f826 	bl	800d754 <UART_WaitOnFlagUntilTimeout>
 800d708:	4603      	mov	r3, r0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d001      	beq.n	800d712 <UART_CheckIdleState+0x36>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d70e:	2303      	movs	r3, #3
 800d710:	e01c      	b.n	800d74c <UART_CheckIdleState+0x70>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f003 0304 	and.w	r3, r3, #4
 800d71c:	2b04      	cmp	r3, #4
 800d71e:	d10c      	bne.n	800d73a <UART_CheckIdleState+0x5e>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d724:	2200      	movs	r2, #0
 800d726:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f000 f812 	bl	800d754 <UART_WaitOnFlagUntilTimeout>
 800d730:	4603      	mov	r3, r0
 800d732:	2b00      	cmp	r3, #0
 800d734:	d001      	beq.n	800d73a <UART_CheckIdleState+0x5e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d736:	2303      	movs	r3, #3
 800d738:	e008      	b.n	800d74c <UART_CheckIdleState+0x70>
    }
  }

  /* Initialize the UART State */
  huart->State= HAL_UART_STATE_READY;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2201      	movs	r2, #1
 800d73e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2200      	movs	r2, #0
 800d746:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 800d74a:	2300      	movs	r3, #0
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3708      	adds	r7, #8
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b086      	sub	sp, #24
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	60b9      	str	r1, [r7, #8]
 800d75e:	603b      	str	r3, [r7, #0]
 800d760:	4613      	mov	r3, r2
 800d762:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = HAL_GetTick();
 800d764:	f7fa fe84 	bl	8008470 <HAL_GetTick>
 800d768:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 800d76a:	79fb      	ldrb	r3, [r7, #7]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d17b      	bne.n	800d868 <UART_WaitOnFlagUntilTimeout+0x114>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 800d770:	e038      	b.n	800d7e4 <UART_WaitOnFlagUntilTimeout+0x90>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d778:	d034      	beq.n	800d7e4 <UART_WaitOnFlagUntilTimeout+0x90>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d007      	beq.n	800d790 <UART_WaitOnFlagUntilTimeout+0x3c>
 800d780:	f7fa fe76 	bl	8008470 <HAL_GetTick>
 800d784:	4602      	mov	r2, r0
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	1ad2      	subs	r2, r2, r3
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d929      	bls.n	800d7e4 <UART_WaitOnFlagUntilTimeout+0x90>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	68fa      	ldr	r2, [r7, #12]
 800d796:	6812      	ldr	r2, [r2, #0]
 800d798:	6812      	ldr	r2, [r2, #0]
 800d79a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d79e:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	68fa      	ldr	r2, [r7, #12]
 800d7a6:	6812      	ldr	r2, [r2, #0]
 800d7a8:	6812      	ldr	r2, [r2, #0]
 800d7aa:	f022 0220 	bic.w	r2, r2, #32
 800d7ae:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	68fa      	ldr	r2, [r7, #12]
 800d7b6:	6812      	ldr	r2, [r2, #0]
 800d7b8:	6812      	ldr	r2, [r2, #0]
 800d7ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d7be:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	68fa      	ldr	r2, [r7, #12]
 800d7c6:	6812      	ldr	r2, [r2, #0]
 800d7c8:	6892      	ldr	r2, [r2, #8]
 800d7ca:	f022 0201 	bic.w	r2, r2, #1
 800d7ce:	609a      	str	r2, [r3, #8]

          huart->State= HAL_UART_STATE_READY;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

          return HAL_TIMEOUT;
 800d7e0:	2303      	movs	r3, #3
 800d7e2:	e04a      	b.n	800d87a <UART_WaitOnFlagUntilTimeout+0x126>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	69da      	ldr	r2, [r3, #28]
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	401a      	ands	r2, r3
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d1be      	bne.n	800d772 <UART_WaitOnFlagUntilTimeout+0x1e>
 800d7f4:	e040      	b.n	800d878 <UART_WaitOnFlagUntilTimeout+0x124>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7fc:	d034      	beq.n	800d868 <UART_WaitOnFlagUntilTimeout+0x114>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d007      	beq.n	800d814 <UART_WaitOnFlagUntilTimeout+0xc0>
 800d804:	f7fa fe34 	bl	8008470 <HAL_GetTick>
 800d808:	4602      	mov	r2, r0
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	1ad2      	subs	r2, r2, r3
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	429a      	cmp	r2, r3
 800d812:	d929      	bls.n	800d868 <UART_WaitOnFlagUntilTimeout+0x114>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	68fa      	ldr	r2, [r7, #12]
 800d81a:	6812      	ldr	r2, [r2, #0]
 800d81c:	6812      	ldr	r2, [r2, #0]
 800d81e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d822:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	68fa      	ldr	r2, [r7, #12]
 800d82a:	6812      	ldr	r2, [r2, #0]
 800d82c:	6812      	ldr	r2, [r2, #0]
 800d82e:	f022 0220 	bic.w	r2, r2, #32
 800d832:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	6812      	ldr	r2, [r2, #0]
 800d83c:	6812      	ldr	r2, [r2, #0]
 800d83e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d842:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	6812      	ldr	r2, [r2, #0]
 800d84c:	6892      	ldr	r2, [r2, #8]
 800d84e:	f022 0201 	bic.w	r2, r2, #1
 800d852:	609a      	str	r2, [r3, #8]

          huart->State= HAL_UART_STATE_READY;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2201      	movs	r2, #1
 800d858:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2200      	movs	r2, #0
 800d860:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

          return HAL_TIMEOUT;
 800d864:	2303      	movs	r3, #3
 800d866:	e008      	b.n	800d87a <UART_WaitOnFlagUntilTimeout+0x126>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	69da      	ldr	r2, [r3, #28]
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	401a      	ands	r2, r3
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	429a      	cmp	r2, r3
 800d876:	d0be      	beq.n	800d7f6 <UART_WaitOnFlagUntilTimeout+0xa2>
        }
      }
    }
  }
  return HAL_OK;
 800d878:	2300      	movs	r3, #0
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3718      	adds	r7, #24
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <LL_GPIO_SetPinMode>:
{
 800d882:	b480      	push	{r7}
 800d884:	b089      	sub	sp, #36	; 0x24
 800d886:	af00      	add	r7, sp, #0
 800d888:	60f8      	str	r0, [r7, #12]
 800d88a:	60b9      	str	r1, [r7, #8]
 800d88c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681a      	ldr	r2, [r3, #0]
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	fa93 f3a3 	rbit	r3, r3
 800d89c:	613b      	str	r3, [r7, #16]
  return(result);
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	fab3 f383 	clz	r3, r3
 800d8a4:	005b      	lsls	r3, r3, #1
 800d8a6:	2103      	movs	r1, #3
 800d8a8:	fa01 f303 	lsl.w	r3, r1, r3
 800d8ac:	43db      	mvns	r3, r3
 800d8ae:	401a      	ands	r2, r3
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	fa93 f3a3 	rbit	r3, r3
 800d8ba:	61bb      	str	r3, [r7, #24]
  return(result);
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	fab3 f383 	clz	r3, r3
 800d8c2:	005b      	lsls	r3, r3, #1
 800d8c4:	6879      	ldr	r1, [r7, #4]
 800d8c6:	fa01 f303 	lsl.w	r3, r1, r3
 800d8ca:	431a      	orrs	r2, r3
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	601a      	str	r2, [r3, #0]
}
 800d8d0:	bf00      	nop
 800d8d2:	3724      	adds	r7, #36	; 0x24
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr

0800d8dc <LL_GPIO_SetPinOutputType>:
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b085      	sub	sp, #20
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	60f8      	str	r0, [r7, #12]
 800d8e4:	60b9      	str	r1, [r7, #8]
 800d8e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	685a      	ldr	r2, [r3, #4]
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	43db      	mvns	r3, r3
 800d8f0:	401a      	ands	r2, r3
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	6879      	ldr	r1, [r7, #4]
 800d8f6:	fb01 f303 	mul.w	r3, r1, r3
 800d8fa:	431a      	orrs	r2, r3
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	605a      	str	r2, [r3, #4]
}
 800d900:	bf00      	nop
 800d902:	3714      	adds	r7, #20
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr

0800d90c <LL_GPIO_SetPinSpeed>:
{
 800d90c:	b480      	push	{r7}
 800d90e:	b089      	sub	sp, #36	; 0x24
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	689a      	ldr	r2, [r3, #8]
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	fa93 f3a3 	rbit	r3, r3
 800d926:	613b      	str	r3, [r7, #16]
  return(result);
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	fab3 f383 	clz	r3, r3
 800d92e:	005b      	lsls	r3, r3, #1
 800d930:	2103      	movs	r1, #3
 800d932:	fa01 f303 	lsl.w	r3, r1, r3
 800d936:	43db      	mvns	r3, r3
 800d938:	401a      	ands	r2, r3
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d93e:	69fb      	ldr	r3, [r7, #28]
 800d940:	fa93 f3a3 	rbit	r3, r3
 800d944:	61bb      	str	r3, [r7, #24]
  return(result);
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	fab3 f383 	clz	r3, r3
 800d94c:	005b      	lsls	r3, r3, #1
 800d94e:	6879      	ldr	r1, [r7, #4]
 800d950:	fa01 f303 	lsl.w	r3, r1, r3
 800d954:	431a      	orrs	r2, r3
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	609a      	str	r2, [r3, #8]
}
 800d95a:	bf00      	nop
 800d95c:	3724      	adds	r7, #36	; 0x24
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr

0800d966 <LL_GPIO_SetPinPull>:
{
 800d966:	b480      	push	{r7}
 800d968:	b089      	sub	sp, #36	; 0x24
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	60f8      	str	r0, [r7, #12]
 800d96e:	60b9      	str	r1, [r7, #8]
 800d970:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	68da      	ldr	r2, [r3, #12]
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	fa93 f3a3 	rbit	r3, r3
 800d980:	613b      	str	r3, [r7, #16]
  return(result);
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	fab3 f383 	clz	r3, r3
 800d988:	005b      	lsls	r3, r3, #1
 800d98a:	2103      	movs	r1, #3
 800d98c:	fa01 f303 	lsl.w	r3, r1, r3
 800d990:	43db      	mvns	r3, r3
 800d992:	401a      	ands	r2, r3
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d998:	69fb      	ldr	r3, [r7, #28]
 800d99a:	fa93 f3a3 	rbit	r3, r3
 800d99e:	61bb      	str	r3, [r7, #24]
  return(result);
 800d9a0:	69bb      	ldr	r3, [r7, #24]
 800d9a2:	fab3 f383 	clz	r3, r3
 800d9a6:	005b      	lsls	r3, r3, #1
 800d9a8:	6879      	ldr	r1, [r7, #4]
 800d9aa:	fa01 f303 	lsl.w	r3, r1, r3
 800d9ae:	431a      	orrs	r2, r3
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	60da      	str	r2, [r3, #12]
}
 800d9b4:	bf00      	nop
 800d9b6:	3724      	adds	r7, #36	; 0x24
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr

0800d9c0 <LL_GPIO_SetAFPin_0_7>:
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b089      	sub	sp, #36	; 0x24
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	60b9      	str	r1, [r7, #8]
 800d9ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6a1a      	ldr	r2, [r3, #32]
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	fa93 f3a3 	rbit	r3, r3
 800d9da:	613b      	str	r3, [r7, #16]
  return(result);
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	fab3 f383 	clz	r3, r3
 800d9e2:	009b      	lsls	r3, r3, #2
 800d9e4:	210f      	movs	r1, #15
 800d9e6:	fa01 f303 	lsl.w	r3, r1, r3
 800d9ea:	43db      	mvns	r3, r3
 800d9ec:	401a      	ands	r2, r3
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	fa93 f3a3 	rbit	r3, r3
 800d9f8:	61bb      	str	r3, [r7, #24]
  return(result);
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	fab3 f383 	clz	r3, r3
 800da00:	009b      	lsls	r3, r3, #2
 800da02:	6879      	ldr	r1, [r7, #4]
 800da04:	fa01 f303 	lsl.w	r3, r1, r3
 800da08:	431a      	orrs	r2, r3
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	621a      	str	r2, [r3, #32]
}
 800da0e:	bf00      	nop
 800da10:	3724      	adds	r7, #36	; 0x24
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr

0800da1a <LL_GPIO_SetAFPin_8_15>:
{
 800da1a:	b480      	push	{r7}
 800da1c:	b089      	sub	sp, #36	; 0x24
 800da1e:	af00      	add	r7, sp, #0
 800da20:	60f8      	str	r0, [r7, #12]
 800da22:	60b9      	str	r1, [r7, #8]
 800da24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	0a1b      	lsrs	r3, r3, #8
 800da2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	fa93 f3a3 	rbit	r3, r3
 800da36:	613b      	str	r3, [r7, #16]
  return(result);
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	fab3 f383 	clz	r3, r3
 800da3e:	009b      	lsls	r3, r3, #2
 800da40:	210f      	movs	r1, #15
 800da42:	fa01 f303 	lsl.w	r3, r1, r3
 800da46:	43db      	mvns	r3, r3
 800da48:	401a      	ands	r2, r3
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	0a1b      	lsrs	r3, r3, #8
 800da4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da50:	69fb      	ldr	r3, [r7, #28]
 800da52:	fa93 f3a3 	rbit	r3, r3
 800da56:	61bb      	str	r3, [r7, #24]
  return(result);
 800da58:	69bb      	ldr	r3, [r7, #24]
 800da5a:	fab3 f383 	clz	r3, r3
 800da5e:	009b      	lsls	r3, r3, #2
 800da60:	6879      	ldr	r1, [r7, #4]
 800da62:	fa01 f303 	lsl.w	r3, r1, r3
 800da66:	431a      	orrs	r2, r3
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800da6c:	bf00      	nop
 800da6e:	3724      	adds	r7, #36	; 0x24
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b088      	sub	sp, #32
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800da82:	2300      	movs	r3, #0
 800da84:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800da86:	2300      	movs	r3, #0
 800da88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	fa93 f3a3 	rbit	r3, r3
 800da96:	613b      	str	r3, [r7, #16]
  return(result);
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	fab3 f383 	clz	r3, r3
 800da9e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800daa0:	e048      	b.n	800db34 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	681a      	ldr	r2, [r3, #0]
 800daa6:	2101      	movs	r1, #1
 800daa8:	69fb      	ldr	r3, [r7, #28]
 800daaa:	fa01 f303 	lsl.w	r3, r1, r3
 800daae:	4013      	ands	r3, r2
 800dab0:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 800dab2:	69bb      	ldr	r3, [r7, #24]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d03a      	beq.n	800db2e <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	461a      	mov	r2, r3
 800dabe:	69b9      	ldr	r1, [r7, #24]
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f7ff fede 	bl	800d882 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d003      	beq.n	800dad6 <LL_GPIO_Init+0x5e>
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	2b02      	cmp	r3, #2
 800dad4:	d106      	bne.n	800dae4 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	461a      	mov	r2, r3
 800dadc:	69b9      	ldr	r1, [r7, #24]
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f7ff ff14 	bl	800d90c <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	691b      	ldr	r3, [r3, #16]
 800dae8:	461a      	mov	r2, r3
 800daea:	69b9      	ldr	r1, [r7, #24]
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f7ff ff3a 	bl	800d966 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	2b02      	cmp	r3, #2
 800daf8:	d119      	bne.n	800db2e <LL_GPIO_Init+0xb6>
 800dafa:	69bb      	ldr	r3, [r7, #24]
 800dafc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	fa93 f3a3 	rbit	r3, r3
 800db04:	60bb      	str	r3, [r7, #8]
  return(result);
 800db06:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800db08:	fab3 f383 	clz	r3, r3
 800db0c:	2b07      	cmp	r3, #7
 800db0e:	d807      	bhi.n	800db20 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	695b      	ldr	r3, [r3, #20]
 800db14:	461a      	mov	r2, r3
 800db16:	69b9      	ldr	r1, [r7, #24]
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f7ff ff51 	bl	800d9c0 <LL_GPIO_SetAFPin_0_7>
 800db1e:	e006      	b.n	800db2e <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	695b      	ldr	r3, [r3, #20]
 800db24:	461a      	mov	r2, r3
 800db26:	69b9      	ldr	r1, [r7, #24]
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f7ff ff76 	bl	800da1a <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800db2e:	69fb      	ldr	r3, [r7, #28]
 800db30:	3301      	adds	r3, #1
 800db32:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	681a      	ldr	r2, [r3, #0]
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	fa22 f303 	lsr.w	r3, r2, r3
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d1af      	bne.n	800daa2 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d003      	beq.n	800db52 <LL_GPIO_Init+0xda>
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	2b02      	cmp	r3, #2
 800db50:	d107      	bne.n	800db62 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	6819      	ldr	r1, [r3, #0]
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	68db      	ldr	r3, [r3, #12]
 800db5a:	461a      	mov	r2, r3
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f7ff febd 	bl	800d8dc <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800db62:	2301      	movs	r3, #1
}
 800db64:	4618      	mov	r0, r3
 800db66:	3720      	adds	r7, #32
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <LL_SYSTICK_IsActiveCounterFlag>:
{
 800db6c:	b480      	push	{r7}
 800db6e:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 800db70:	4b07      	ldr	r3, [pc, #28]	; (800db90 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db7c:	bf0c      	ite	eq
 800db7e:	2301      	moveq	r3, #1
 800db80:	2300      	movne	r3, #0
 800db82:	b2db      	uxtb	r3, r3
}
 800db84:	4618      	mov	r0, r3
 800db86:	46bd      	mov	sp, r7
 800db88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8c:	4770      	bx	lr
 800db8e:	bf00      	nop
 800db90:	e000e010 	.word	0xe000e010

0800db94 <LL_RTC_SetHourFormat>:
{
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	689b      	ldr	r3, [r3, #8]
 800dba2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	431a      	orrs	r2, r3
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	609a      	str	r2, [r3, #8]
}
 800dbae:	bf00      	nop
 800dbb0:	370c      	adds	r7, #12
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb8:	4770      	bx	lr

0800dbba <LL_RTC_GetHourFormat>:
{
 800dbba:	b480      	push	{r7}
 800dbbc:	b083      	sub	sp, #12
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	689b      	ldr	r3, [r3, #8]
 800dbc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	370c      	adds	r7, #12
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd4:	4770      	bx	lr

0800dbd6 <LL_RTC_EnableInitMode>:
{
 800dbd6:	b480      	push	{r7}
 800dbd8:	b083      	sub	sp, #12
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f04f 32ff 	mov.w	r2, #4294967295
 800dbe4:	60da      	str	r2, [r3, #12]
}
 800dbe6:	bf00      	nop
 800dbe8:	370c      	adds	r7, #12
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr

0800dbf2 <LL_RTC_DisableInitMode>:
{
 800dbf2:	b480      	push	{r7}
 800dbf4:	b083      	sub	sp, #12
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dc00:	60da      	str	r2, [r3, #12]
}
 800dc02:	bf00      	nop
 800dc04:	370c      	adds	r7, #12
 800dc06:	46bd      	mov	sp, r7
 800dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0c:	4770      	bx	lr

0800dc0e <LL_RTC_IsShadowRegBypassEnabled>:
{
 800dc0e:	b480      	push	{r7}
 800dc10:	b083      	sub	sp, #12
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	689b      	ldr	r3, [r3, #8]
 800dc1a:	f003 0320 	and.w	r3, r3, #32
 800dc1e:	2b20      	cmp	r3, #32
 800dc20:	bf0c      	ite	eq
 800dc22:	2301      	moveq	r3, #1
 800dc24:	2300      	movne	r3, #0
 800dc26:	b2db      	uxtb	r3, r3
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	370c      	adds	r7, #12
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc32:	4770      	bx	lr

0800dc34 <LL_RTC_SetAsynchPrescaler>:
{
 800dc34:	b480      	push	{r7}
 800dc36:	b085      	sub	sp, #20
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_POSITION_PRER_PREDIV_A);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	691b      	ldr	r3, [r3, #16]
 800dc42:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800dc46:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
 800dc4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	fa93 f3a3 	rbit	r3, r3
 800dc52:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	fab3 f383 	clz	r3, r3
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	408b      	lsls	r3, r1
 800dc60:	431a      	orrs	r2, r3
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	611a      	str	r2, [r3, #16]
}
 800dc66:	bf00      	nop
 800dc68:	3714      	adds	r7, #20
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr

0800dc72 <LL_RTC_SetSynchPrescaler>:
{
 800dc72:	b480      	push	{r7}
 800dc74:	b083      	sub	sp, #12
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
 800dc7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	691b      	ldr	r3, [r3, #16]
 800dc80:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800dc84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dc88:	683a      	ldr	r2, [r7, #0]
 800dc8a:	431a      	orrs	r2, r3
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	611a      	str	r2, [r3, #16]
}
 800dc90:	bf00      	nop
 800dc92:	370c      	adds	r7, #12
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr

0800dc9c <LL_RTC_EnableWriteProtection>:
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	22ff      	movs	r2, #255	; 0xff
 800dca8:	625a      	str	r2, [r3, #36]	; 0x24
}
 800dcaa:	bf00      	nop
 800dcac:	370c      	adds	r7, #12
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr

0800dcb6 <LL_RTC_DisableWriteProtection>:
{
 800dcb6:	b480      	push	{r7}
 800dcb8:	b083      	sub	sp, #12
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	22ca      	movs	r2, #202	; 0xca
 800dcc2:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2253      	movs	r2, #83	; 0x53
 800dcc8:	625a      	str	r2, [r3, #36]	; 0x24
}
 800dcca:	bf00      	nop
 800dccc:	370c      	adds	r7, #12
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr

0800dcd6 <LL_RTC_TIME_Config>:
{
 800dcd6:	b490      	push	{r4, r7}
 800dcd8:	b090      	sub	sp, #64	; 0x40
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	60f8      	str	r0, [r7, #12]
 800dcde:	60b9      	str	r1, [r7, #8]
 800dce0:	607a      	str	r2, [r7, #4]
 800dce2:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;
 800dce4:	2400      	movs	r4, #0
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800dcec:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800dcf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	fa93 f3a3 	rbit	r3, r3
 800dcf8:	613b      	str	r3, [r7, #16]
  return(result);
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	fab3 f383 	clz	r3, r3
 800dd00:	3b04      	subs	r3, #4
 800dd02:	409a      	lsls	r2, r3
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f003 030f 	and.w	r3, r3, #15
 800dd0a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800dd0e:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd10:	69f9      	ldr	r1, [r7, #28]
 800dd12:	fa91 f1a1 	rbit	r1, r1
 800dd16:	61b9      	str	r1, [r7, #24]
  return(result);
 800dd18:	69b9      	ldr	r1, [r7, #24]
 800dd1a:	fab1 f181 	clz	r1, r1
 800dd1e:	408b      	lsls	r3, r1
 800dd20:	431a      	orrs	r2, r3
  temp = Format12_24                                                                                    | \
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 800dd2c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800dd30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd34:	fa93 f3a3 	rbit	r3, r3
 800dd38:	623b      	str	r3, [r7, #32]
  return(result);
 800dd3a:	6a3b      	ldr	r3, [r7, #32]
 800dd3c:	fab3 f383 	clz	r3, r3
 800dd40:	3b04      	subs	r3, #4
 800dd42:	4099      	lsls	r1, r3
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	f003 030f 	and.w	r3, r3, #15
 800dd4a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800dd4e:	62f8      	str	r0, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd52:	fa90 f0a0 	rbit	r0, r0
 800dd56:	62b8      	str	r0, [r7, #40]	; 0x28
  return(result);
 800dd58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd5a:	fab0 f080 	clz	r0, r0
 800dd5e:	4083      	lsls	r3, r0
 800dd60:	430b      	orrs	r3, r1
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 800dd62:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 800dd64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd66:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 800dd6a:	2370      	movs	r3, #112	; 0x70
 800dd6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd70:	fa93 f3a3 	rbit	r3, r3
 800dd74:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800dd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd78:	fab3 f383 	clz	r3, r3
 800dd7c:	3b04      	subs	r3, #4
 800dd7e:	4099      	lsls	r1, r3
 800dd80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd82:	f003 030f 	and.w	r3, r3, #15
 800dd86:	200f      	movs	r0, #15
 800dd88:	63f8      	str	r0, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dd8c:	fa90 f0a0 	rbit	r0, r0
 800dd90:	63b8      	str	r0, [r7, #56]	; 0x38
  return(result);
 800dd92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd94:	fab0 f080 	clz	r0, r0
 800dd98:	4083      	lsls	r3, r0
 800dd9a:	430b      	orrs	r3, r1
  temp = Format12_24                                                                                    | \
 800dd9c:	ea42 0403 	orr.w	r4, r2, r3
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 800dda8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ddac:	ea43 0204 	orr.w	r2, r3, r4
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	601a      	str	r2, [r3, #0]
}
 800ddb4:	bf00      	nop
 800ddb6:	3740      	adds	r7, #64	; 0x40
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bc90      	pop	{r4, r7}
 800ddbc:	4770      	bx	lr
	...

0800ddc0 <LL_RTC_DATE_Config>:
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  * @param  Year Value between Min_Data=0x00 and Max_Data=0x99
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DATE_Config(RTC_TypeDef *RTCx, uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 800ddc0:	b490      	push	{r4, r7}
 800ddc2:	b092      	sub	sp, #72	; 0x48
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	60b9      	str	r1, [r7, #8]
 800ddca:	607a      	str	r2, [r7, #4]
 800ddcc:	603b      	str	r3, [r7, #0]
  register uint32_t temp = 0U;
 800ddce:	2400      	movs	r4, #0
 800ddd0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800ddd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	fa93 f3a3 	rbit	r3, r3
 800dddc:	613b      	str	r3, [r7, #16]
  return(result);
 800ddde:	693b      	ldr	r3, [r7, #16]

  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 800dde0:	fab3 f383 	clz	r3, r3
 800dde4:	461a      	mov	r2, r3
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	fa03 f202 	lsl.w	r2, r3, r2
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 800ddec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddee:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 800ddf2:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 800ddf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	fa93 f3a3 	rbit	r3, r3
 800ddfe:	61bb      	str	r3, [r7, #24]
  return(result);
 800de00:	69bb      	ldr	r3, [r7, #24]
 800de02:	fab3 f383 	clz	r3, r3
 800de06:	3b04      	subs	r3, #4
 800de08:	4099      	lsls	r1, r3
 800de0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de0c:	f003 030f 	and.w	r3, r3, #15
 800de10:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
 800de14:	6278      	str	r0, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de18:	fa90 f0a0 	rbit	r0, r0
 800de1c:	6238      	str	r0, [r7, #32]
  return(result);
 800de1e:	6a38      	ldr	r0, [r7, #32]
 800de20:	fab0 f080 	clz	r0, r0
 800de24:	4083      	lsls	r3, r0
 800de26:	430b      	orrs	r3, r1
  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 800de28:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 800de30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de38:	fa93 f3a3 	rbit	r3, r3
 800de3c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800de3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de40:	fab3 f383 	clz	r3, r3
 800de44:	3b04      	subs	r3, #4
 800de46:	4099      	lsls	r1, r3
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	f003 030f 	and.w	r3, r3, #15
 800de4e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800de52:	6378      	str	r0, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800de56:	fa90 f0a0 	rbit	r0, r0
 800de5a:	6338      	str	r0, [r7, #48]	; 0x30
  return(result);
 800de5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de5e:	fab0 f080 	clz	r0, r0
 800de62:	4083      	lsls	r3, r0
 800de64:	430b      	orrs	r3, r1
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 800de66:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 800de6e:	2330      	movs	r3, #48	; 0x30
 800de70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de74:	fa93 f3a3 	rbit	r3, r3
 800de78:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800de7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7c:	fab3 f383 	clz	r3, r3
 800de80:	3b04      	subs	r3, #4
 800de82:	4099      	lsls	r1, r3
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f003 030f 	and.w	r3, r3, #15
 800de8a:	200f      	movs	r0, #15
 800de8c:	6478      	str	r0, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de8e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800de90:	fa90 f0a0 	rbit	r0, r0
 800de94:	6438      	str	r0, [r7, #64]	; 0x40
  return(result);
 800de96:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800de98:	fab0 f080 	clz	r0, r0
 800de9c:	4083      	lsls	r3, r0
 800de9e:	430b      	orrs	r3, r1
  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 800dea0:	ea42 0403 	orr.w	r4, r2, r3

  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	685a      	ldr	r2, [r3, #4]
 800dea8:	4b05      	ldr	r3, [pc, #20]	; (800dec0 <LL_RTC_DATE_Config+0x100>)
 800deaa:	4013      	ands	r3, r2
 800deac:	ea43 0204 	orr.w	r2, r3, r4
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	605a      	str	r2, [r3, #4]
}
 800deb4:	bf00      	nop
 800deb6:	3748      	adds	r7, #72	; 0x48
 800deb8:	46bd      	mov	sp, r7
 800deba:	bc90      	pop	{r4, r7}
 800debc:	4770      	bx	lr
 800debe:	bf00      	nop
 800dec0:	ff0000c0 	.word	0xff0000c0

0800dec4 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	68db      	ldr	r3, [r3, #12]
 800ded0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ded4:	2b40      	cmp	r3, #64	; 0x40
 800ded6:	bf0c      	ite	eq
 800ded8:	2301      	moveq	r3, #1
 800deda:	2300      	movne	r3, #0
 800dedc:	b2db      	uxtb	r3, r3
}
 800dede:	4618      	mov	r0, r3
 800dee0:	370c      	adds	r7, #12
 800dee2:	46bd      	mov	sp, r7
 800dee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee8:	4770      	bx	lr

0800deea <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 800deea:	b480      	push	{r7}
 800deec:	b083      	sub	sp, #12
 800deee:	af00      	add	r7, sp, #0
 800def0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	68db      	ldr	r3, [r3, #12]
 800def6:	f003 0320 	and.w	r3, r3, #32
 800defa:	2b20      	cmp	r3, #32
 800defc:	bf0c      	ite	eq
 800defe:	2301      	moveq	r3, #1
 800df00:	2300      	movne	r3, #0
 800df02:	b2db      	uxtb	r3, r3
}
 800df04:	4618      	mov	r0, r3
 800df06:	370c      	adds	r7, #12
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 800df10:	b480      	push	{r7}
 800df12:	b083      	sub	sp, #12
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df20:	f063 02a0 	orn	r2, r3, #160	; 0xa0
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	60da      	str	r2, [r3, #12]
}
 800df28:	bf00      	nop
 800df2a:	370c      	adds	r7, #12
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr

0800df34 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800df3e:	2300      	movs	r3, #0
 800df40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f7ff feb7 	bl	800dcb6 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 f971 	bl	800e230 <LL_RTC_EnterInitMode>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d016      	beq.n	800df82 <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4619      	mov	r1, r3
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f7ff fe1a 	bl	800db94 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	689b      	ldr	r3, [r3, #8]
 800df64:	4619      	mov	r1, r3
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f7ff fe83 	bl	800dc72 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	4619      	mov	r1, r3
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f7ff fe5e 	bl	800dc34 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f7ff fe3a 	bl	800dbf2 <LL_RTC_DisableInitMode>

    status = SUCCESS;
 800df7e:	2301      	movs	r3, #1
 800df80:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7ff fe8a 	bl	800dc9c <LL_RTC_EnableWriteProtection>

  return status;
 800df88:	7bfb      	ldrb	r3, [r7, #15]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3710      	adds	r7, #16
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
	...

0800df94 <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 800df94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df96:	b089      	sub	sp, #36	; 0x24
 800df98:	af02      	add	r7, sp, #8
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	60b9      	str	r1, [r7, #8]
 800df9e:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d109      	bne.n	800dfbe <LL_RTC_TIME_Init+0x2a>
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 800dfaa:	68f8      	ldr	r0, [r7, #12]
 800dfac:	f7ff fe05 	bl	800dbba <LL_RTC_GetHourFormat>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d10c      	bne.n	800dfd0 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(RTC_TimeStruct->Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	601a      	str	r2, [r3, #0]
 800dfbc:	e008      	b.n	800dfd0 <LL_RTC_TIME_Init+0x3c>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
  }
  else
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 800dfbe:	68f8      	ldr	r0, [r7, #12]
 800dfc0:	f7ff fdfb 	bl	800dbba <LL_RTC_GetHourFormat>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d102      	bne.n	800dfd0 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	601a      	str	r2, [r3, #0]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 800dfd0:	68f8      	ldr	r0, [r7, #12]
 800dfd2:	f7ff fe70 	bl	800dcb6 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800dfd6:	68f8      	ldr	r0, [r7, #12]
 800dfd8:	f000 f92a 	bl	800e230 <LL_RTC_EnterInitMode>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d073      	beq.n	800e0ca <LL_RTC_TIME_Init+0x136>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d00f      	beq.n	800e008 <LL_RTC_TIME_Init+0x74>
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6819      	ldr	r1, [r3, #0]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	791b      	ldrb	r3, [r3, #4]
 800dff0:	461a      	mov	r2, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	795b      	ldrb	r3, [r3, #5]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 800dff6:	4618      	mov	r0, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	799b      	ldrb	r3, [r3, #6]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 800dffc:	9300      	str	r3, [sp, #0]
 800dffe:	4603      	mov	r3, r0
 800e000:	68f8      	ldr	r0, [r7, #12]
 800e002:	f7ff fe68 	bl	800dcd6 <LL_RTC_TIME_Config>
 800e006:	e04f      	b.n	800e0a8 <LL_RTC_TIME_Init+0x114>
    }
    else
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681c      	ldr	r4, [r3, #0]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	791b      	ldrb	r3, [r3, #4]
 800e010:	4a32      	ldr	r2, [pc, #200]	; (800e0dc <LL_RTC_TIME_Init+0x148>)
 800e012:	fba2 2303 	umull	r2, r3, r2, r3
 800e016:	08db      	lsrs	r3, r3, #3
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	011b      	lsls	r3, r3, #4
 800e01c:	b2d8      	uxtb	r0, r3
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	791a      	ldrb	r2, [r3, #4]
 800e022:	4b2e      	ldr	r3, [pc, #184]	; (800e0dc <LL_RTC_TIME_Init+0x148>)
 800e024:	fba3 1302 	umull	r1, r3, r3, r2
 800e028:	08d9      	lsrs	r1, r3, #3
 800e02a:	460b      	mov	r3, r1
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	440b      	add	r3, r1
 800e030:	005b      	lsls	r3, r3, #1
 800e032:	1ad3      	subs	r3, r2, r3
 800e034:	b2db      	uxtb	r3, r3
 800e036:	4303      	orrs	r3, r0
 800e038:	b2db      	uxtb	r3, r3
 800e03a:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	795b      	ldrb	r3, [r3, #5]
 800e040:	4a26      	ldr	r2, [pc, #152]	; (800e0dc <LL_RTC_TIME_Init+0x148>)
 800e042:	fba2 2303 	umull	r2, r3, r2, r3
 800e046:	08db      	lsrs	r3, r3, #3
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	011b      	lsls	r3, r3, #4
 800e04c:	b2d8      	uxtb	r0, r3
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	795a      	ldrb	r2, [r3, #5]
 800e052:	4b22      	ldr	r3, [pc, #136]	; (800e0dc <LL_RTC_TIME_Init+0x148>)
 800e054:	fba3 1302 	umull	r1, r3, r3, r2
 800e058:	08d9      	lsrs	r1, r3, #3
 800e05a:	460b      	mov	r3, r1
 800e05c:	009b      	lsls	r3, r3, #2
 800e05e:	440b      	add	r3, r1
 800e060:	005b      	lsls	r3, r3, #1
 800e062:	1ad3      	subs	r3, r2, r3
 800e064:	b2db      	uxtb	r3, r3
 800e066:	4303      	orrs	r3, r0
 800e068:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 800e06a:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	799b      	ldrb	r3, [r3, #6]
 800e070:	4a1a      	ldr	r2, [pc, #104]	; (800e0dc <LL_RTC_TIME_Init+0x148>)
 800e072:	fba2 2303 	umull	r2, r3, r2, r3
 800e076:	08db      	lsrs	r3, r3, #3
 800e078:	b2db      	uxtb	r3, r3
 800e07a:	011b      	lsls	r3, r3, #4
 800e07c:	b2d8      	uxtb	r0, r3
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	799a      	ldrb	r2, [r3, #6]
 800e082:	4b16      	ldr	r3, [pc, #88]	; (800e0dc <LL_RTC_TIME_Init+0x148>)
 800e084:	fba3 1302 	umull	r1, r3, r3, r2
 800e088:	08d9      	lsrs	r1, r3, #3
 800e08a:	460b      	mov	r3, r1
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	440b      	add	r3, r1
 800e090:	005b      	lsls	r3, r3, #1
 800e092:	1ad3      	subs	r3, r2, r3
 800e094:	b2db      	uxtb	r3, r3
 800e096:	4303      	orrs	r3, r0
 800e098:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 800e09a:	9300      	str	r3, [sp, #0]
 800e09c:	4633      	mov	r3, r6
 800e09e:	462a      	mov	r2, r5
 800e0a0:	4621      	mov	r1, r4
 800e0a2:	68f8      	ldr	r0, [r7, #12]
 800e0a4:	f7ff fe17 	bl	800dcd6 <LL_RTC_TIME_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTC);
 800e0a8:	480d      	ldr	r0, [pc, #52]	; (800e0e0 <LL_RTC_TIME_Init+0x14c>)
 800e0aa:	f7ff fda2 	bl	800dbf2 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 800e0ae:	68f8      	ldr	r0, [r7, #12]
 800e0b0:	f7ff fdad 	bl	800dc0e <LL_RTC_IsShadowRegBypassEnabled>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d105      	bne.n	800e0c6 <LL_RTC_TIME_Init+0x132>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 800e0ba:	68f8      	ldr	r0, [r7, #12]
 800e0bc:	f000 f8ed 	bl	800e29a <LL_RTC_WaitForSynchro>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	75fb      	strb	r3, [r7, #23]
 800e0c4:	e001      	b.n	800e0ca <LL_RTC_TIME_Init+0x136>
    }
    else
    {
      status = SUCCESS;
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f7ff fde6 	bl	800dc9c <LL_RTC_EnableWriteProtection>

  return status;
 800e0d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	371c      	adds	r7, #28
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	cccccccd 	.word	0xcccccccd
 800e0e0:	40002800 	.word	0x40002800

0800e0e4 <LL_RTC_DATE_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Day register is configured
  *          - ERROR: RTC Day register is not configured
  */
ErrorStatus LL_RTC_DATE_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_DateTypeDef *RTC_DateStruct)
{
 800e0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0e6:	b089      	sub	sp, #36	; 0x24
 800e0e8:	af02      	add	r7, sp, #8
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	60b9      	str	r1, [r7, #8]
 800e0ee:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d10e      	bne.n	800e118 <LL_RTC_DATE_Init+0x34>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	785b      	ldrb	r3, [r3, #1]
 800e0fe:	f003 0310 	and.w	r3, r3, #16
 800e102:	2b00      	cmp	r3, #0
 800e104:	d008      	beq.n	800e118 <LL_RTC_DATE_Init+0x34>
  {
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	785b      	ldrb	r3, [r3, #1]
 800e10a:	f023 0310 	bic.w	r3, r3, #16
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	330a      	adds	r3, #10
 800e112:	b2da      	uxtb	r2, r3
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	705a      	strb	r2, [r3, #1]
    assert_param(IS_LL_RTC_DAY(__LL_RTC_CONVERT_BCD2BIN(RTC_DateStruct->Day)));
  }
  assert_param(IS_LL_RTC_WEEKDAY(RTC_DateStruct->WeekDay));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 800e118:	68f8      	ldr	r0, [r7, #12]
 800e11a:	f7ff fdcc 	bl	800dcb6 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800e11e:	68f8      	ldr	r0, [r7, #12]
 800e120:	f000 f886 	bl	800e230 <LL_RTC_EnterInitMode>
 800e124:	4603      	mov	r3, r0
 800e126:	2b00      	cmp	r3, #0
 800e128:	d075      	beq.n	800e216 <LL_RTC_DATE_Init+0x132>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d010      	beq.n	800e152 <LL_RTC_DATE_Init+0x6e>
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	4619      	mov	r1, r3
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	789b      	ldrb	r3, [r3, #2]
 800e13a:	461a      	mov	r2, r3
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	785b      	ldrb	r3, [r3, #1]
 800e140:	4618      	mov	r0, r3
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	78db      	ldrb	r3, [r3, #3]
 800e146:	9300      	str	r3, [sp, #0]
 800e148:	4603      	mov	r3, r0
 800e14a:	68f8      	ldr	r0, [r7, #12]
 800e14c:	f7ff fe38 	bl	800ddc0 <LL_RTC_DATE_Config>
 800e150:	e050      	b.n	800e1f4 <LL_RTC_DATE_Init+0x110>
    }
    else
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	781b      	ldrb	r3, [r3, #0]
 800e156:	461c      	mov	r4, r3
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	789b      	ldrb	r3, [r3, #2]
 800e15c:	4a32      	ldr	r2, [pc, #200]	; (800e228 <LL_RTC_DATE_Init+0x144>)
 800e15e:	fba2 2303 	umull	r2, r3, r2, r3
 800e162:	08db      	lsrs	r3, r3, #3
 800e164:	b2db      	uxtb	r3, r3
 800e166:	011b      	lsls	r3, r3, #4
 800e168:	b2d8      	uxtb	r0, r3
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	789a      	ldrb	r2, [r3, #2]
 800e16e:	4b2e      	ldr	r3, [pc, #184]	; (800e228 <LL_RTC_DATE_Init+0x144>)
 800e170:	fba3 1302 	umull	r1, r3, r3, r2
 800e174:	08d9      	lsrs	r1, r3, #3
 800e176:	460b      	mov	r3, r1
 800e178:	009b      	lsls	r3, r3, #2
 800e17a:	440b      	add	r3, r1
 800e17c:	005b      	lsls	r3, r3, #1
 800e17e:	1ad3      	subs	r3, r2, r3
 800e180:	b2db      	uxtb	r3, r3
 800e182:	4303      	orrs	r3, r0
 800e184:	b2db      	uxtb	r3, r3
 800e186:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	785b      	ldrb	r3, [r3, #1]
 800e18c:	4a26      	ldr	r2, [pc, #152]	; (800e228 <LL_RTC_DATE_Init+0x144>)
 800e18e:	fba2 2303 	umull	r2, r3, r2, r3
 800e192:	08db      	lsrs	r3, r3, #3
 800e194:	b2db      	uxtb	r3, r3
 800e196:	011b      	lsls	r3, r3, #4
 800e198:	b2d8      	uxtb	r0, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	785a      	ldrb	r2, [r3, #1]
 800e19e:	4b22      	ldr	r3, [pc, #136]	; (800e228 <LL_RTC_DATE_Init+0x144>)
 800e1a0:	fba3 1302 	umull	r1, r3, r3, r2
 800e1a4:	08d9      	lsrs	r1, r3, #3
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	009b      	lsls	r3, r3, #2
 800e1aa:	440b      	add	r3, r1
 800e1ac:	005b      	lsls	r3, r3, #1
 800e1ae:	1ad3      	subs	r3, r2, r3
 800e1b0:	b2db      	uxtb	r3, r3
 800e1b2:	4303      	orrs	r3, r0
 800e1b4:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800e1b6:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	78db      	ldrb	r3, [r3, #3]
 800e1bc:	4a1a      	ldr	r2, [pc, #104]	; (800e228 <LL_RTC_DATE_Init+0x144>)
 800e1be:	fba2 2303 	umull	r2, r3, r2, r3
 800e1c2:	08db      	lsrs	r3, r3, #3
 800e1c4:	b2db      	uxtb	r3, r3
 800e1c6:	011b      	lsls	r3, r3, #4
 800e1c8:	b2d8      	uxtb	r0, r3
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	78da      	ldrb	r2, [r3, #3]
 800e1ce:	4b16      	ldr	r3, [pc, #88]	; (800e228 <LL_RTC_DATE_Init+0x144>)
 800e1d0:	fba3 1302 	umull	r1, r3, r3, r2
 800e1d4:	08d9      	lsrs	r1, r3, #3
 800e1d6:	460b      	mov	r3, r1
 800e1d8:	009b      	lsls	r3, r3, #2
 800e1da:	440b      	add	r3, r1
 800e1dc:	005b      	lsls	r3, r3, #1
 800e1de:	1ad3      	subs	r3, r2, r3
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	4303      	orrs	r3, r0
 800e1e4:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800e1e6:	9300      	str	r3, [sp, #0]
 800e1e8:	4633      	mov	r3, r6
 800e1ea:	462a      	mov	r2, r5
 800e1ec:	4621      	mov	r1, r4
 800e1ee:	68f8      	ldr	r0, [r7, #12]
 800e1f0:	f7ff fde6 	bl	800ddc0 <LL_RTC_DATE_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTC);
 800e1f4:	480d      	ldr	r0, [pc, #52]	; (800e22c <LL_RTC_DATE_Init+0x148>)
 800e1f6:	f7ff fcfc 	bl	800dbf2 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 800e1fa:	68f8      	ldr	r0, [r7, #12]
 800e1fc:	f7ff fd07 	bl	800dc0e <LL_RTC_IsShadowRegBypassEnabled>
 800e200:	4603      	mov	r3, r0
 800e202:	2b00      	cmp	r3, #0
 800e204:	d105      	bne.n	800e212 <LL_RTC_DATE_Init+0x12e>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 800e206:	68f8      	ldr	r0, [r7, #12]
 800e208:	f000 f847 	bl	800e29a <LL_RTC_WaitForSynchro>
 800e20c:	4603      	mov	r3, r0
 800e20e:	75fb      	strb	r3, [r7, #23]
 800e210:	e001      	b.n	800e216 <LL_RTC_DATE_Init+0x132>
    }
    else
    {
      status = SUCCESS;
 800e212:	2301      	movs	r3, #1
 800e214:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 800e216:	68f8      	ldr	r0, [r7, #12]
 800e218:	f7ff fd40 	bl	800dc9c <LL_RTC_EnableWriteProtection>

  return status;
 800e21c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e21e:	4618      	mov	r0, r3
 800e220:	371c      	adds	r7, #28
 800e222:	46bd      	mov	sp, r7
 800e224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e226:	bf00      	nop
 800e228:	cccccccd 	.word	0xcccccccd
 800e22c:	40002800 	.word	0x40002800

0800e230 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b086      	sub	sp, #24
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 800e238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e23c:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 800e23e:	2301      	movs	r3, #1
 800e240:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 800e242:	2300      	movs	r3, #0
 800e244:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f7ff fe3c 	bl	800dec4 <LL_RTC_IsActiveFlag_INIT>
 800e24c:	4603      	mov	r3, r0
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d11e      	bne.n	800e290 <LL_RTC_EnterInitMode+0x60>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f7ff fcbf 	bl	800dbd6 <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f7ff fe33 	bl	800dec4 <LL_RTC_IsActiveFlag_INIT>
 800e25e:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 800e260:	e010      	b.n	800e284 <LL_RTC_EnterInitMode+0x54>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800e262:	f7ff fc83 	bl	800db6c <LL_SYSTICK_IsActiveCounterFlag>
 800e266:	4603      	mov	r3, r0
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d102      	bne.n	800e272 <LL_RTC_EnterInitMode+0x42>
      {
        timeout --;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	3b01      	subs	r3, #1
 800e270:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f7ff fe26 	bl	800dec4 <LL_RTC_IsActiveFlag_INIT>
 800e278:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d101      	bne.n	800e284 <LL_RTC_EnterInitMode+0x54>
      {
        status = ERROR;
 800e280:	2300      	movs	r3, #0
 800e282:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d002      	beq.n	800e290 <LL_RTC_EnterInitMode+0x60>
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d1e8      	bne.n	800e262 <LL_RTC_EnterInitMode+0x32>
      }
    }
  }
  return status;
 800e290:	7dfb      	ldrb	r3, [r7, #23]
}
 800e292:	4618      	mov	r0, r3
 800e294:	3718      	adds	r7, #24
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}

0800e29a <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 800e29a:	b580      	push	{r7, lr}
 800e29c:	b086      	sub	sp, #24
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 800e2a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e2a6:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f7ff fe2d 	bl	800df10 <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f7ff fe17 	bl	800deea <LL_RTC_IsActiveFlag_RS>
 800e2bc:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 0U))
 800e2be:	e010      	b.n	800e2e2 <LL_RTC_WaitForSynchro+0x48>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800e2c0:	f7ff fc54 	bl	800db6c <LL_SYSTICK_IsActiveCounterFlag>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b01      	cmp	r3, #1
 800e2c8:	d102      	bne.n	800e2d0 <LL_RTC_WaitForSynchro+0x36>
    {
      timeout--;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	3b01      	subs	r3, #1
 800e2ce:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f7ff fe0a 	bl	800deea <LL_RTC_IsActiveFlag_RS>
 800e2d6:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d101      	bne.n	800e2e2 <LL_RTC_WaitForSynchro+0x48>
    {
      status = ERROR;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 0U))
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d002      	beq.n	800e2ee <LL_RTC_WaitForSynchro+0x54>
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d1e8      	bne.n	800e2c0 <LL_RTC_WaitForSynchro+0x26>
    }
  }

  if (status != ERROR)
 800e2ee:	7dfb      	ldrb	r3, [r7, #23]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d01e      	beq.n	800e332 <LL_RTC_WaitForSynchro+0x98>
  {
    timeout = RTC_SYNCHRO_TIMEOUT;
 800e2f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e2f8:	60fb      	str	r3, [r7, #12]
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f7ff fdf5 	bl	800deea <LL_RTC_IsActiveFlag_RS>
 800e300:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 800e302:	e010      	b.n	800e326 <LL_RTC_WaitForSynchro+0x8c>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800e304:	f7ff fc32 	bl	800db6c <LL_SYSTICK_IsActiveCounterFlag>
 800e308:	4603      	mov	r3, r0
 800e30a:	2b01      	cmp	r3, #1
 800e30c:	d102      	bne.n	800e314 <LL_RTC_WaitForSynchro+0x7a>
      {
        timeout--;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	3b01      	subs	r3, #1
 800e312:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f7ff fde8 	bl	800deea <LL_RTC_IsActiveFlag_RS>
 800e31a:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d101      	bne.n	800e326 <LL_RTC_WaitForSynchro+0x8c>
      {
        status = ERROR;
 800e322:	2300      	movs	r3, #0
 800e324:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d002      	beq.n	800e332 <LL_RTC_WaitForSynchro+0x98>
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	2b01      	cmp	r3, #1
 800e330:	d1e8      	bne.n	800e304 <LL_RTC_WaitForSynchro+0x6a>
      }
    }
  }

  return (status);
 800e332:	7dfb      	ldrb	r3, [r7, #23]
}
 800e334:	4618      	mov	r0, r3
 800e336:	3718      	adds	r7, #24
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e33c:	b084      	sub	sp, #16
 800e33e:	b480      	push	{r7}
 800e340:	b083      	sub	sp, #12
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
 800e346:	f107 0014 	add.w	r0, r7, #20
 800e34a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e356:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e35a:	6979      	ldr	r1, [r7, #20]
 800e35c:	69ba      	ldr	r2, [r7, #24]
 800e35e:	4311      	orrs	r1, r2
 800e360:	69fa      	ldr	r2, [r7, #28]
 800e362:	4311      	orrs	r1, r2
 800e364:	6a3a      	ldr	r2, [r7, #32]
 800e366:	4311      	orrs	r1, r2
 800e368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e36a:	4311      	orrs	r1, r2
 800e36c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e36e:	430a      	orrs	r2, r1
 800e370:	431a      	orrs	r2, r3
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	605a      	str	r2, [r3, #4]
                                              Init.ClockPowerSave      |\
                                              Init.BusWide             |\
                                              Init.HardwareFlowControl |\
                                              Init.ClockDiv);  

  return HAL_OK;
 800e376:	2300      	movs	r3, #0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	b004      	add	sp, #16
 800e384:	4770      	bx	lr

0800e386 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e386:	b480      	push	{r7}
 800e388:	b083      	sub	sp, #12
 800e38a:	af00      	add	r7, sp, #0
 800e38c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e394:	4618      	mov	r0, r3
 800e396:	370c      	adds	r7, #12
 800e398:	46bd      	mov	sp, r7
 800e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39e:	4770      	bx	lr

0800e3a0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800e3a0:	b480      	push	{r7}
 800e3a2:	b083      	sub	sp, #12
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2203      	movs	r2, #3
 800e3ac:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800e3ae:	2300      	movs	r3, #0
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b083      	sub	sp, #12
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f003 0303 	and.w	r3, r3, #3
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	370c      	adds	r7, #12
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b083      	sub	sp, #12
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	68db      	ldr	r3, [r3, #12]
 800e3ee:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e3f2:	f023 030f 	bic.w	r3, r3, #15
 800e3f6:	683a      	ldr	r2, [r7, #0]
 800e3f8:	6851      	ldr	r1, [r2, #4]
 800e3fa:	683a      	ldr	r2, [r7, #0]
 800e3fc:	6892      	ldr	r2, [r2, #8]
 800e3fe:	4311      	orrs	r1, r2
 800e400:	683a      	ldr	r2, [r7, #0]
 800e402:	68d2      	ldr	r2, [r2, #12]
 800e404:	4311      	orrs	r1, r2
 800e406:	683a      	ldr	r2, [r7, #0]
 800e408:	6912      	ldr	r2, [r2, #16]
 800e40a:	430a      	orrs	r2, r1
 800e40c:	431a      	orrs	r2, r3
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	60da      	str	r2, [r3, #12]
                                          Command->Response         |\
                                          Command->WaitForInterrupt |\
                                          Command->CPSM); 
  
  return HAL_OK;  
 800e412:	2300      	movs	r3, #0
}
 800e414:	4618      	mov	r0, r3
 800e416:	370c      	adds	r7, #12
 800e418:	46bd      	mov	sp, r7
 800e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41e:	4770      	bx	lr

0800e420 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e420:	b480      	push	{r7}
 800e422:	b083      	sub	sp, #12
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	691b      	ldr	r3, [r3, #16]
 800e42c:	b2db      	uxtb	r3, r3
}
 800e42e:	4618      	mov	r0, r3
 800e430:	370c      	adds	r7, #12
 800e432:	46bd      	mov	sp, r7
 800e434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e438:	4770      	bx	lr

0800e43a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e43a:	b480      	push	{r7}
 800e43c:	b085      	sub	sp, #20
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
 800e442:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800e444:	2300      	movs	r3, #0
 800e446:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	3314      	adds	r3, #20
 800e44c:	461a      	mov	r2, r3
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	4413      	add	r3, r2
 800e452:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
}  
 800e458:	4618      	mov	r0, r3
 800e45a:	3714      	adds	r7, #20
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <SDMMC_DataConfig>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_DataConfig(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800e464:	b480      	push	{r7}
 800e466:	b083      	sub	sp, #12
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
 800e46c:	6039      	str	r1, [r7, #0]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	681a      	ldr	r2, [r3, #0]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	685a      	ldr	r2, [r3, #4]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e482:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	6899      	ldr	r1, [r3, #8]
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	68db      	ldr	r3, [r3, #12]
 800e48e:	4319      	orrs	r1, r3
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	691b      	ldr	r3, [r3, #16]
 800e494:	4319      	orrs	r1, r3
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	695b      	ldr	r3, [r3, #20]
 800e49a:	430b      	orrs	r3, r1
 800e49c:	431a      	orrs	r2, r3
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	62da      	str	r2, [r3, #44]	; 0x2c
                                              Data->TransferDir   |\
                                              Data->TransferMode  |\
                                              Data->DPSM);

  return HAL_OK;
 800e4a2:	2300      	movs	r3, #0

}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	370c      	adds	r7, #12
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ae:	4770      	bx	lr

0800e4b0 <LL_SPI_IsEnabled>:
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4c0:	2b40      	cmp	r3, #64	; 0x40
 800e4c2:	bf0c      	ite	eq
 800e4c4:	2301      	moveq	r3, #1
 800e4c6:	2300      	movne	r3, #0
 800e4c8:	b2db      	uxtb	r3, r3
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	370c      	adds	r7, #12
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d4:	4770      	bx	lr

0800e4d6 <LL_SPI_SetCRCPolynomial>:
{
 800e4d6:	b480      	push	{r7}
 800e4d8:	b083      	sub	sp, #12
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
 800e4de:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	461a      	mov	r2, r3
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	611a      	str	r2, [r3, #16]
}
 800e4ea:	bf00      	nop
 800e4ec:	370c      	adds	r7, #12
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr

0800e4f6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800e4f6:	b580      	push	{r7, lr}
 800e4f8:	b084      	sub	sp, #16
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
 800e4fe:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800e500:	2300      	movs	r3, #0
 800e502:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f7ff ffd3 	bl	800e4b0 <LL_SPI_IsEnabled>
 800e50a:	4603      	mov	r3, r0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d13b      	bne.n	800e588 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e518:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800e51c:	683a      	ldr	r2, [r7, #0]
 800e51e:	6811      	ldr	r1, [r2, #0]
 800e520:	683a      	ldr	r2, [r7, #0]
 800e522:	6852      	ldr	r2, [r2, #4]
 800e524:	4311      	orrs	r1, r2
 800e526:	683a      	ldr	r2, [r7, #0]
 800e528:	68d2      	ldr	r2, [r2, #12]
 800e52a:	4311      	orrs	r1, r2
 800e52c:	683a      	ldr	r2, [r7, #0]
 800e52e:	6912      	ldr	r2, [r2, #16]
 800e530:	4311      	orrs	r1, r2
 800e532:	683a      	ldr	r2, [r7, #0]
 800e534:	6952      	ldr	r2, [r2, #20]
 800e536:	4311      	orrs	r1, r2
 800e538:	683a      	ldr	r2, [r7, #0]
 800e53a:	6992      	ldr	r2, [r2, #24]
 800e53c:	4311      	orrs	r1, r2
 800e53e:	683a      	ldr	r2, [r7, #0]
 800e540:	69d2      	ldr	r2, [r2, #28]
 800e542:	4311      	orrs	r1, r2
 800e544:	683a      	ldr	r2, [r7, #0]
 800e546:	6a12      	ldr	r2, [r2, #32]
 800e548:	430a      	orrs	r2, r1
 800e54a:	431a      	orrs	r2, r3
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e558:	f023 0304 	bic.w	r3, r3, #4
 800e55c:	683a      	ldr	r2, [r7, #0]
 800e55e:	6891      	ldr	r1, [r2, #8]
 800e560:	683a      	ldr	r2, [r7, #0]
 800e562:	6952      	ldr	r2, [r2, #20]
 800e564:	0c12      	lsrs	r2, r2, #16
 800e566:	430a      	orrs	r2, r1
 800e568:	431a      	orrs	r2, r3
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	6a1b      	ldr	r3, [r3, #32]
 800e572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e576:	d105      	bne.n	800e584 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e57c:	4619      	mov	r1, r3
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f7ff ffa9 	bl	800e4d6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800e584:	2301      	movs	r3, #1
 800e586:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e588:	7bfb      	ldrb	r3, [r7, #15]
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3710      	adds	r7, #16
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}

0800e592 <USB_CoreInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e592:	b084      	sub	sp, #16
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	f107 0014 	add.w	r0, r7, #20
 800e5a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	68db      	ldr	r3, [r3, #12]
 800e5a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	60da      	str	r2, [r3, #12]
  
  /* Reset after a PHY select and set Host mode */
  USB_CoreReset(USBx);
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f001 f92d 	bl	800f810 <USB_CoreReset>
  
  /* Deactivate the power down*/
  USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e5bc:	639a      	str	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800e5be:	2300      	movs	r3, #0
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3708      	adds	r7, #8
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e5ca:	b004      	add	sp, #16
 800e5cc:	4770      	bx	lr

0800e5ce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e5ce:	b480      	push	{r7}
 800e5d0:	b083      	sub	sp, #12
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	689b      	ldr	r3, [r3, #8]
 800e5da:	f043 0201 	orr.w	r2, r3, #1
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e5e2:	2300      	movs	r3, #0
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	370c      	adds	r7, #12
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ee:	4770      	bx	lr

0800e5f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx: Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b083      	sub	sp, #12
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	689b      	ldr	r3, [r3, #8]
 800e5fc:	f023 0201 	bic.w	r2, r3, #1
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e604:	2300      	movs	r3, #0
}
 800e606:	4618      	mov	r0, r3
 800e608:	370c      	adds	r7, #12
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr

0800e612 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_ModeTypeDef mode)
{
 800e612:	b580      	push	{r7, lr}
 800e614:	b082      	sub	sp, #8
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
 800e61a:	460b      	mov	r3, r1
 800e61c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	68db      	ldr	r3, [r3, #12]
 800e622:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_HOST_MODE)
 800e62a:	78fb      	ldrb	r3, [r7, #3]
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d106      	bne.n	800e63e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	60da      	str	r2, [r3, #12]
 800e63c:	e008      	b.n	800e650 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_DEVICE_MODE)
 800e63e:	78fb      	ldrb	r3, [r7, #3]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d105      	bne.n	800e650 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	68db      	ldr	r3, [r3, #12]
 800e648:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50);
 800e650:	2032      	movs	r0, #50	; 0x32
 800e652:	f7f9 ff19 	bl	8008488 <HAL_Delay>
  
  return HAL_OK;
 800e656:	2300      	movs	r3, #0
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3708      	adds	r7, #8
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <USB_DevInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e660:	b084      	sub	sp, #16
 800e662:	b580      	push	{r7, lr}
 800e664:	b084      	sub	sp, #16
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
 800e66a:	f107 001c 	add.w	r0, r7, #28
 800e66e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t index = 0;
 800e672:	2300      	movs	r3, #0
 800e674:	60fb      	str	r3, [r7, #12]

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e67a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	639a      	str	r2, [r3, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 800e682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e684:	2b00      	cmp	r3, #0
 800e686:	d111      	bne.n	800e6ac <USB_DevInit+0x4c>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e68c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	601a      	str	r2, [r3, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6be:	461a      	mov	r2, r3
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	6013      	str	r3, [r2, #0]
  
  /* Set Full speed phy */
  USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 800e6ca:	2103      	movs	r1, #3
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 f93d 	bl	800e94c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 800e6d2:	2110      	movs	r1, #16
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 f8f1 	bl	800e8bc <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 f914 	bl	800e908 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6fe:	461a      	mov	r2, r3
 800e700:	f04f 33ff 	mov.w	r3, #4294967295
 800e704:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e70c:	461a      	mov	r2, r3
 800e70e:	2300      	movs	r3, #0
 800e710:	61d3      	str	r3, [r2, #28]
  
  for (index = 0; index < cfg.dev_endpoints; index++)
 800e712:	2300      	movs	r3, #0
 800e714:	60fb      	str	r3, [r7, #12]
 800e716:	e034      	b.n	800e782 <USB_DevInit+0x122>
  {
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	015a      	lsls	r2, r3, #5
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	4413      	add	r3, r2
 800e720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e72a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e72e:	d10a      	bne.n	800e746 <USB_DevInit+0xe6>
    {
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	015a      	lsls	r2, r3, #5
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	4413      	add	r3, r2
 800e738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e73c:	461a      	mov	r2, r3
 800e73e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e742:	6013      	str	r3, [r2, #0]
 800e744:	e008      	b.n	800e758 <USB_DevInit+0xf8>
    }
    else
    {
      USBx_INEP(index)->DIEPCTL = 0;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	015a      	lsls	r2, r3, #5
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	4413      	add	r3, r2
 800e74e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e752:	461a      	mov	r2, r3
 800e754:	2300      	movs	r3, #0
 800e756:	6013      	str	r3, [r2, #0]
    }
    
    USBx_INEP(index)->DIEPTSIZ = 0;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	015a      	lsls	r2, r3, #5
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	4413      	add	r3, r2
 800e760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e764:	461a      	mov	r2, r3
 800e766:	2300      	movs	r3, #0
 800e768:	6113      	str	r3, [r2, #16]
    USBx_INEP(index)->DIEPINT  = 0xFF;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	015a      	lsls	r2, r3, #5
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	4413      	add	r3, r2
 800e772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e776:	461a      	mov	r2, r3
 800e778:	23ff      	movs	r3, #255	; 0xff
 800e77a:	6093      	str	r3, [r2, #8]
  for (index = 0; index < cfg.dev_endpoints; index++)
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	3301      	adds	r3, #1
 800e780:	60fb      	str	r3, [r7, #12]
 800e782:	69fa      	ldr	r2, [r7, #28]
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	429a      	cmp	r2, r3
 800e788:	d8c6      	bhi.n	800e718 <USB_DevInit+0xb8>
  }
  
  for (index = 0; index < cfg.dev_endpoints; index++)
 800e78a:	2300      	movs	r3, #0
 800e78c:	60fb      	str	r3, [r7, #12]
 800e78e:	e034      	b.n	800e7fa <USB_DevInit+0x19a>
  {
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	015a      	lsls	r2, r3, #5
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	4413      	add	r3, r2
 800e798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e7a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e7a6:	d10a      	bne.n	800e7be <USB_DevInit+0x15e>
    {
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	015a      	lsls	r2, r3, #5
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7b4:	461a      	mov	r2, r3
 800e7b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e7ba:	6013      	str	r3, [r2, #0]
 800e7bc:	e008      	b.n	800e7d0 <USB_DevInit+0x170>
    }
    else
    {
      USBx_OUTEP(index)->DOEPCTL = 0;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	015a      	lsls	r2, r3, #5
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	4413      	add	r3, r2
 800e7c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	6013      	str	r3, [r2, #0]
    }
    
    USBx_OUTEP(index)->DOEPTSIZ = 0;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	015a      	lsls	r2, r3, #5
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	4413      	add	r3, r2
 800e7d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7dc:	461a      	mov	r2, r3
 800e7de:	2300      	movs	r3, #0
 800e7e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	015a      	lsls	r2, r3, #5
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	4413      	add	r3, r2
 800e7ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7ee:	461a      	mov	r2, r3
 800e7f0:	23ff      	movs	r3, #255	; 0xff
 800e7f2:	6093      	str	r3, [r2, #8]
  for (index = 0; index < cfg.dev_endpoints; index++)
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	60fb      	str	r3, [r7, #12]
 800e7fa:	69fa      	ldr	r2, [r7, #28]
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d8c6      	bhi.n	800e790 <USB_DevInit+0x130>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e808:	461a      	mov	r2, r3
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e810:	691b      	ldr	r3, [r3, #16]
 800e812:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e816:	6113      	str	r3, [r2, #16]
  
  if (cfg.dma_enable == 1)
 800e818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81a:	2b01      	cmp	r3, #1
 800e81c:	d117      	bne.n	800e84e <USB_DevInit+0x1ee>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e824:	461a      	mov	r2, r3
 800e826:	4b23      	ldr	r3, [pc, #140]	; (800e8b4 <USB_DevInit+0x254>)
 800e828:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e830:	461a      	mov	r2, r3
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e83a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e83e:	f043 0303 	orr.w	r3, r3, #3
 800e842:	6313      	str	r3, [r2, #48]	; 0x30
    
    index= USBx_DEVICE->DTHRCTL;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e84a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e84c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2200      	movs	r2, #0
 800e852:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e85a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 800e85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d105      	bne.n	800e86e <USB_DevInit+0x20e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	699b      	ldr	r3, [r3, #24]
 800e866:	f043 0210 	orr.w	r2, r3, #16
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	619a      	str	r2, [r3, #24]
  }

    /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	699a      	ldr	r2, [r3, #24]
 800e872:	4b11      	ldr	r3, [pc, #68]	; (800e8b8 <USB_DevInit+0x258>)
 800e874:	4313      	orrs	r3, r2
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 800e87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d005      	beq.n	800e88c <USB_DevInit+0x22c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	699b      	ldr	r3, [r3, #24]
 800e884:	f043 0208 	orr.w	r2, r3, #8
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 800e88c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d107      	bne.n	800e8a2 <USB_DevInit+0x242>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	699b      	ldr	r3, [r3, #24]
 800e896:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e89a:	f043 0304 	orr.w	r3, r3, #4
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 800e8a2:	2300      	movs	r3, #0
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3710      	adds	r7, #16
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e8ae:	b004      	add	sp, #16
 800e8b0:	4770      	bx	lr
 800e8b2:	bf00      	nop
 800e8b4:	00800100 	.word	0x00800100
 800e8b8:	803c3800 	.word	0x803c3800

0800e8bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b085      	sub	sp, #20
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	60fb      	str	r3, [r7, #12]
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	019b      	lsls	r3, r3, #6
 800e8ce:	f043 0220 	orr.w	r2, r3, #32
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	611a      	str	r2, [r3, #16]
 
  do
  {
    if (++count > 200000)
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	60fb      	str	r3, [r7, #12]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	4a09      	ldr	r2, [pc, #36]	; (800e904 <USB_FlushTxFifo+0x48>)
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d901      	bls.n	800e8e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e8e4:	2303      	movs	r3, #3
 800e8e6:	e006      	b.n	800e8f6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	691b      	ldr	r3, [r3, #16]
 800e8ec:	f003 0320 	and.w	r3, r3, #32
 800e8f0:	2b20      	cmp	r3, #32
 800e8f2:	d0f0      	beq.n	800e8d6 <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 800e8f4:	2300      	movs	r3, #0
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3714      	adds	r7, #20
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	00030d40 	.word	0x00030d40

0800e908 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e908:	b480      	push	{r7}
 800e90a:	b085      	sub	sp, #20
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e910:	2300      	movs	r3, #0
 800e912:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2210      	movs	r2, #16
 800e918:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	3301      	adds	r3, #1
 800e91e:	60fb      	str	r3, [r7, #12]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	4a09      	ldr	r2, [pc, #36]	; (800e948 <USB_FlushRxFifo+0x40>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d901      	bls.n	800e92c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e928:	2303      	movs	r3, #3
 800e92a:	e006      	b.n	800e93a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	691b      	ldr	r3, [r3, #16]
 800e930:	f003 0310 	and.w	r3, r3, #16
 800e934:	2b10      	cmp	r3, #16
 800e936:	d0f0      	beq.n	800e91a <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 800e938:	2300      	movs	r3, #0
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3714      	adds	r7, #20
 800e93e:	46bd      	mov	sp, r7
 800e940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e944:	4770      	bx	lr
 800e946:	bf00      	nop
 800e948:	00030d40 	.word	0x00030d40

0800e94c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b083      	sub	sp, #12
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	460b      	mov	r3, r1
 800e956:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e95e:	4619      	mov	r1, r3
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	78fb      	ldrb	r3, [r7, #3]
 800e96a:	4313      	orrs	r3, r2
 800e96c:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e96e:	2300      	movs	r3, #0
}
 800e970:	4618      	mov	r0, r3
 800e972:	370c      	adds	r7, #12
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr

0800e97c <USB_ActivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e97c:	b480      	push	{r7}
 800e97e:	b083      	sub	sp, #12
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	785b      	ldrb	r3, [r3, #1]
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d13e      	bne.n	800ea0c <USB_ActivateEndpoint+0x90>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e994:	4619      	mov	r1, r3
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e99c:	69da      	ldr	r2, [r3, #28]
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	781b      	ldrb	r3, [r3, #0]
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	4083      	lsls	r3, r0
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	4313      	orrs	r3, r2
 800e9ac:	61cb      	str	r3, [r1, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	015a      	lsls	r2, r3, #5
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	4413      	add	r3, r2
 800e9b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d15c      	bne.n	800ea80 <USB_ActivateEndpoint+0x104>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	015a      	lsls	r2, r3, #5
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	4413      	add	r3, r2
 800e9d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	015a      	lsls	r2, r3, #5
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	4413      	add	r3, r2
 800e9e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9e4:	681a      	ldr	r2, [r3, #0]
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	689b      	ldr	r3, [r3, #8]
 800e9ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e9ee:	6839      	ldr	r1, [r7, #0]
 800e9f0:	78c9      	ldrb	r1, [r1, #3]
 800e9f2:	0489      	lsls	r1, r1, #18
 800e9f4:	430b      	orrs	r3, r1
        ((ep->num) << 22 ) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 800e9f6:	6839      	ldr	r1, [r7, #0]
 800e9f8:	7809      	ldrb	r1, [r1, #0]
 800e9fa:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 800e9fc:	430b      	orrs	r3, r1
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ea08:	6003      	str	r3, [r0, #0]
 800ea0a:	e039      	b.n	800ea80 <USB_ActivateEndpoint+0x104>
    } 

  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea12:	4619      	mov	r1, r3
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea1a:	69db      	ldr	r3, [r3, #28]
 800ea1c:	683a      	ldr	r2, [r7, #0]
 800ea1e:	7812      	ldrb	r2, [r2, #0]
 800ea20:	4610      	mov	r0, r2
 800ea22:	2201      	movs	r2, #1
 800ea24:	4082      	lsls	r2, r0
 800ea26:	0412      	lsls	r2, r2, #16
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	61cb      	str	r3, [r1, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	015a      	lsls	r2, r3, #5
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	4413      	add	r3, r2
 800ea36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d11d      	bne.n	800ea80 <USB_ActivateEndpoint+0x104>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	015a      	lsls	r2, r3, #5
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	4413      	add	r3, r2
 800ea4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea52:	4618      	mov	r0, r3
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	015a      	lsls	r2, r3, #5
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	4413      	add	r3, r2
 800ea5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea62:	681a      	ldr	r2, [r3, #0]
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	689b      	ldr	r3, [r3, #8]
 800ea68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ea6c:	6839      	ldr	r1, [r7, #0]
 800ea6e:	78c9      	ldrb	r1, [r1, #3]
 800ea70:	0489      	lsls	r1, r1, #18
 800ea72:	430b      	orrs	r3, r1
 800ea74:	4313      	orrs	r3, r2
 800ea76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ea7e:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
 800ea80:	2300      	movs	r3, #0
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	370c      	adds	r7, #12
 800ea86:	46bd      	mov	sp, r7
 800ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8c:	4770      	bx	lr

0800ea8e <USB_DeactivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ea8e:	b480      	push	{r7}
 800ea90:	b083      	sub	sp, #12
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	6078      	str	r0, [r7, #4]
 800ea96:	6039      	str	r1, [r7, #0]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	785b      	ldrb	r3, [r3, #1]
 800ea9c:	2b01      	cmp	r3, #1
 800ea9e:	d135      	bne.n	800eb0c <USB_DeactivateEndpoint+0x7e>
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eaae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	4618      	mov	r0, r3
 800eab6:	2301      	movs	r3, #1
 800eab8:	4083      	lsls	r3, r0
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	43db      	mvns	r3, r3
 800eabe:	4013      	ands	r3, r2
 800eac0:	63cb      	str	r3, [r1, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eac8:	4619      	mov	r1, r3
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ead0:	69da      	ldr	r2, [r3, #28]
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	4618      	mov	r0, r3
 800ead8:	2301      	movs	r3, #1
 800eada:	4083      	lsls	r3, r0
 800eadc:	b29b      	uxth	r3, r3
 800eade:	43db      	mvns	r3, r3
 800eae0:	4013      	ands	r3, r2
 800eae2:	61cb      	str	r3, [r1, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	015a      	lsls	r2, r3, #5
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	4413      	add	r3, r2
 800eaee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	015a      	lsls	r2, r3, #5
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	4413      	add	r3, r2
 800eafe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800eb08:	600b      	str	r3, [r1, #0]
 800eb0a:	e034      	b.n	800eb76 <USB_DeactivateEndpoint+0xe8>
  }
  else
  {
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb12:	4619      	mov	r1, r3
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	4618      	mov	r0, r3
 800eb22:	2301      	movs	r3, #1
 800eb24:	4083      	lsls	r3, r0
 800eb26:	041b      	lsls	r3, r3, #16
 800eb28:	43db      	mvns	r3, r3
 800eb2a:	4013      	ands	r3, r2
 800eb2c:	63cb      	str	r3, [r1, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb34:	4619      	mov	r1, r3
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb3c:	69da      	ldr	r2, [r3, #28]
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	4618      	mov	r0, r3
 800eb44:	2301      	movs	r3, #1
 800eb46:	4083      	lsls	r3, r0
 800eb48:	041b      	lsls	r3, r3, #16
 800eb4a:	43db      	mvns	r3, r3
 800eb4c:	4013      	ands	r3, r2
 800eb4e:	61cb      	str	r3, [r1, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	781b      	ldrb	r3, [r3, #0]
 800eb54:	015a      	lsls	r2, r3, #5
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	4413      	add	r3, r2
 800eb5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb5e:	4619      	mov	r1, r3
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	015a      	lsls	r2, r3, #5
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	4413      	add	r3, r2
 800eb6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800eb74:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 800eb76:	2300      	movs	r3, #0
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr

0800eb84 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b088      	sub	sp, #32
 800eb88:	af02      	add	r7, sp, #8
 800eb8a:	60f8      	str	r0, [r7, #12]
 800eb8c:	60b9      	str	r1, [r7, #8]
 800eb8e:	4613      	mov	r3, r2
 800eb90:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0;
 800eb92:	2300      	movs	r3, #0
 800eb94:	82fb      	strh	r3, [r7, #22]
  
  /* IN endpoint */
  if (ep->is_in == 1)
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	785b      	ldrb	r3, [r3, #1]
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	f040 8137 	bne.w	800ee0e <USB_EPStartXfer+0x28a>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	695b      	ldr	r3, [r3, #20]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d13b      	bne.n	800ec20 <USB_EPStartXfer+0x9c>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	015a      	lsls	r2, r3, #5
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	4413      	add	r3, r2
 800ebb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	015a      	lsls	r2, r3, #5
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	4413      	add	r3, r2
 800ebc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebc6:	691b      	ldr	r3, [r3, #16]
 800ebc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ebcc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ebd0:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	015a      	lsls	r2, r3, #5
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	4413      	add	r3, r2
 800ebdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	015a      	lsls	r2, r3, #5
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	4413      	add	r3, r2
 800ebec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebf0:	691b      	ldr	r3, [r3, #16]
 800ebf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ebf6:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	015a      	lsls	r2, r3, #5
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	4413      	add	r3, r2
 800ec02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec06:	4619      	mov	r1, r3
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	015a      	lsls	r2, r3, #5
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	4413      	add	r3, r2
 800ec12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec16:	691b      	ldr	r3, [r3, #16]
 800ec18:	0cdb      	lsrs	r3, r3, #19
 800ec1a:	04db      	lsls	r3, r3, #19
 800ec1c:	610b      	str	r3, [r1, #16]
 800ec1e:	e086      	b.n	800ed2e <USB_EPStartXfer+0x1aa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	015a      	lsls	r2, r3, #5
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	4413      	add	r3, r2
 800ec2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec2e:	4619      	mov	r1, r3
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	015a      	lsls	r2, r3, #5
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	4413      	add	r3, r2
 800ec3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec3e:	691b      	ldr	r3, [r3, #16]
 800ec40:	0cdb      	lsrs	r3, r3, #19
 800ec42:	04db      	lsls	r3, r3, #19
 800ec44:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	015a      	lsls	r2, r3, #5
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	4413      	add	r3, r2
 800ec50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec54:	4619      	mov	r1, r3
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	781b      	ldrb	r3, [r3, #0]
 800ec5a:	015a      	lsls	r2, r3, #5
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	4413      	add	r3, r2
 800ec60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec64:	691b      	ldr	r3, [r3, #16]
 800ec66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ec6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ec6e:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	015a      	lsls	r2, r3, #5
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	4413      	add	r3, r2
 800ec7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec7e:	4618      	mov	r0, r3
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	015a      	lsls	r2, r3, #5
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	4413      	add	r3, r2
 800ec8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec8e:	691a      	ldr	r2, [r3, #16]
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	6959      	ldr	r1, [r3, #20]
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	689b      	ldr	r3, [r3, #8]
 800ec98:	440b      	add	r3, r1
 800ec9a:	1e59      	subs	r1, r3, #1
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	689b      	ldr	r3, [r3, #8]
 800eca0:	fbb1 f3f3 	udiv	r3, r1, r3
 800eca4:	04d9      	lsls	r1, r3, #19
 800eca6:	4b85      	ldr	r3, [pc, #532]	; (800eebc <USB_EPStartXfer+0x338>)
 800eca8:	400b      	ands	r3, r1
 800ecaa:	4313      	orrs	r3, r2
 800ecac:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	015a      	lsls	r2, r3, #5
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	4413      	add	r3, r2
 800ecb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	015a      	lsls	r2, r3, #5
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	4413      	add	r3, r2
 800ecc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eccc:	691a      	ldr	r2, [r3, #16]
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	695b      	ldr	r3, [r3, #20]
 800ecd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	610b      	str	r3, [r1, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	78db      	ldrb	r3, [r3, #3]
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	d125      	bne.n	800ed2e <USB_EPStartXfer+0x1aa>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	015a      	lsls	r2, r3, #5
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	4413      	add	r3, r2
 800ecec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	015a      	lsls	r2, r3, #5
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	4413      	add	r3, r2
 800ecfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed00:	691b      	ldr	r3, [r3, #16]
 800ed02:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ed06:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	015a      	lsls	r2, r3, #5
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	4413      	add	r3, r2
 800ed12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed16:	4619      	mov	r1, r3
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	015a      	lsls	r2, r3, #5
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	4413      	add	r3, r2
 800ed22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed26:	691b      	ldr	r3, [r3, #16]
 800ed28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ed2c:	610b      	str	r3, [r1, #16]
      }       
    }
      if (ep->type != EP_TYPE_ISOC)
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	78db      	ldrb	r3, [r3, #3]
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	d012      	beq.n	800ed5c <USB_EPStartXfer+0x1d8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	695b      	ldr	r3, [r3, #20]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d00e      	beq.n	800ed5c <USB_EPStartXfer+0x1d8>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed44:	4619      	mov	r1, r3
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed4e:	68ba      	ldr	r2, [r7, #8]
 800ed50:	7812      	ldrb	r2, [r2, #0]
 800ed52:	4610      	mov	r0, r2
 800ed54:	2201      	movs	r2, #1
 800ed56:	4082      	lsls	r2, r0
 800ed58:	4313      	orrs	r3, r2
 800ed5a:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }

    if (ep->type == EP_TYPE_ISOC)
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	78db      	ldrb	r3, [r3, #3]
 800ed60:	2b01      	cmp	r3, #1
 800ed62:	d12e      	bne.n	800edc2 <USB_EPStartXfer+0x23e>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed6a:	689b      	ldr	r3, [r3, #8]
 800ed6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d113      	bne.n	800ed9c <USB_EPStartXfer+0x218>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	015a      	lsls	r2, r3, #5
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	4413      	add	r3, r2
 800ed7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed82:	4619      	mov	r1, r3
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	015a      	lsls	r2, r3, #5
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	4413      	add	r3, r2
 800ed8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ed98:	600b      	str	r3, [r1, #0]
 800ed9a:	e012      	b.n	800edc2 <USB_EPStartXfer+0x23e>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ed9c:	68bb      	ldr	r3, [r7, #8]
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	015a      	lsls	r2, r3, #5
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	4413      	add	r3, r2
 800eda6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edaa:	4619      	mov	r1, r3
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	015a      	lsls	r2, r3, #5
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	4413      	add	r3, r2
 800edb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800edc0:	600b      	str	r3, [r1, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	015a      	lsls	r2, r3, #5
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	4413      	add	r3, r2
 800edcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edd0:	4619      	mov	r1, r3
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	015a      	lsls	r2, r3, #5
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	4413      	add	r3, r2
 800eddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ede6:	600b      	str	r3, [r1, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	78db      	ldrb	r3, [r3, #3]
 800edec:	2b01      	cmp	r3, #1
 800edee:	f040 80e8 	bne.w	800efc2 <USB_EPStartXfer+0x43e>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	68d9      	ldr	r1, [r3, #12]
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	781a      	ldrb	r2, [r3, #0]
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	695b      	ldr	r3, [r3, #20]
 800edfe:	b298      	uxth	r0, r3
 800ee00:	79fb      	ldrb	r3, [r7, #7]
 800ee02:	9300      	str	r3, [sp, #0]
 800ee04:	4603      	mov	r3, r0
 800ee06:	68f8      	ldr	r0, [r7, #12]
 800ee08:	f000 fa23 	bl	800f252 <USB_WritePacket>
 800ee0c:	e0d9      	b.n	800efc2 <USB_EPStartXfer+0x43e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	015a      	lsls	r2, r3, #5
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	4413      	add	r3, r2
 800ee18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee1c:	4619      	mov	r1, r3
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	015a      	lsls	r2, r3, #5
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	4413      	add	r3, r2
 800ee28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee2c:	691b      	ldr	r3, [r3, #16]
 800ee2e:	0cdb      	lsrs	r3, r3, #19
 800ee30:	04db      	lsls	r3, r3, #19
 800ee32:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	015a      	lsls	r2, r3, #5
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	4413      	add	r3, r2
 800ee3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee42:	4619      	mov	r1, r3
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	015a      	lsls	r2, r3, #5
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	4413      	add	r3, r2
 800ee4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee52:	691b      	ldr	r3, [r3, #16]
 800ee54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ee58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ee5c:	610b      	str	r3, [r1, #16]
      
    if (ep->xfer_len == 0)
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	695b      	ldr	r3, [r3, #20]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d12c      	bne.n	800eec0 <USB_EPStartXfer+0x33c>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	015a      	lsls	r2, r3, #5
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	4413      	add	r3, r2
 800ee70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee74:	4619      	mov	r1, r3
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	015a      	lsls	r2, r3, #5
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	4413      	add	r3, r2
 800ee80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee84:	691a      	ldr	r2, [r3, #16]
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	689b      	ldr	r3, [r3, #8]
 800ee8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ee8e:	4313      	orrs	r3, r2
 800ee90:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;      
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	015a      	lsls	r2, r3, #5
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	4413      	add	r3, r2
 800ee9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eea0:	4619      	mov	r1, r3
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	015a      	lsls	r2, r3, #5
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	4413      	add	r3, r2
 800eeac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eeb0:	691b      	ldr	r3, [r3, #16]
 800eeb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eeb6:	610b      	str	r3, [r1, #16]
 800eeb8:	e03d      	b.n	800ef36 <USB_EPStartXfer+0x3b2>
 800eeba:	bf00      	nop
 800eebc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket; 
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	695a      	ldr	r2, [r3, #20]
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	689b      	ldr	r3, [r3, #8]
 800eec8:	4413      	add	r3, r2
 800eeca:	1e5a      	subs	r2, r3, #1
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	689b      	ldr	r3, [r3, #8]
 800eed0:	fbb2 f3f3 	udiv	r3, r2, r3
 800eed4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	015a      	lsls	r2, r3, #5
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	4413      	add	r3, r2
 800eee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eee4:	4619      	mov	r1, r3
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	781b      	ldrb	r3, [r3, #0]
 800eeea:	015a      	lsls	r2, r3, #5
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	4413      	add	r3, r2
 800eef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eef4:	691a      	ldr	r2, [r3, #16]
 800eef6:	8afb      	ldrh	r3, [r7, #22]
 800eef8:	04db      	lsls	r3, r3, #19
 800eefa:	4618      	mov	r0, r3
 800eefc:	4b33      	ldr	r3, [pc, #204]	; (800efcc <USB_EPStartXfer+0x448>)
 800eefe:	4003      	ands	r3, r0
 800ef00:	4313      	orrs	r3, r2
 800ef02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt)); 
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	015a      	lsls	r2, r3, #5
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef12:	4618      	mov	r0, r3
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	015a      	lsls	r2, r3, #5
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef22:	691a      	ldr	r2, [r3, #16]
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	689b      	ldr	r3, [r3, #8]
 800ef28:	8af9      	ldrh	r1, [r7, #22]
 800ef2a:	fb01 f303 	mul.w	r3, r1, r3
 800ef2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ef32:	4313      	orrs	r3, r2
 800ef34:	6103      	str	r3, [r0, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	78db      	ldrb	r3, [r3, #3]
 800ef3a:	2b01      	cmp	r3, #1
 800ef3c:	d12e      	bne.n	800ef9c <USB_EPStartXfer+0x418>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef44:	689b      	ldr	r3, [r3, #8]
 800ef46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d113      	bne.n	800ef76 <USB_EPStartXfer+0x3f2>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	015a      	lsls	r2, r3, #5
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	4413      	add	r3, r2
 800ef58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef5c:	4619      	mov	r1, r3
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	015a      	lsls	r2, r3, #5
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	4413      	add	r3, r2
 800ef68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ef72:	600b      	str	r3, [r1, #0]
 800ef74:	e012      	b.n	800ef9c <USB_EPStartXfer+0x418>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	015a      	lsls	r2, r3, #5
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	4413      	add	r3, r2
 800ef80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef84:	4619      	mov	r1, r3
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	781b      	ldrb	r3, [r3, #0]
 800ef8a:	015a      	lsls	r2, r3, #5
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	4413      	add	r3, r2
 800ef90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef9a:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	015a      	lsls	r2, r3, #5
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	4413      	add	r3, r2
 800efa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efaa:	4619      	mov	r1, r3
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	781b      	ldrb	r3, [r3, #0]
 800efb0:	015a      	lsls	r2, r3, #5
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	4413      	add	r3, r2
 800efb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800efc0:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 800efc2:	2300      	movs	r3, #0
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3718      	adds	r7, #24
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	1ff80000 	.word	0x1ff80000

0800efd0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b085      	sub	sp, #20
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	60f8      	str	r0, [r7, #12]
 800efd8:	60b9      	str	r1, [r7, #8]
 800efda:	4613      	mov	r3, r2
 800efdc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  /* IN endpoint */
  if (ep->is_in == 1)
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	785b      	ldrb	r3, [r3, #1]
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	f040 80c2 	bne.w	800f16c <USB_EP0StartXfer+0x19c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	695b      	ldr	r3, [r3, #20]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d13b      	bne.n	800f068 <USB_EP0StartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	015a      	lsls	r2, r3, #5
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	4413      	add	r3, r2
 800effa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800effe:	4619      	mov	r1, r3
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	015a      	lsls	r2, r3, #5
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	4413      	add	r3, r2
 800f00a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f00e:	691b      	ldr	r3, [r3, #16]
 800f010:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f014:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f018:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	015a      	lsls	r2, r3, #5
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	4413      	add	r3, r2
 800f024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f028:	4619      	mov	r1, r3
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	781b      	ldrb	r3, [r3, #0]
 800f02e:	015a      	lsls	r2, r3, #5
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	4413      	add	r3, r2
 800f034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f038:	691b      	ldr	r3, [r3, #16]
 800f03a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f03e:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	781b      	ldrb	r3, [r3, #0]
 800f044:	015a      	lsls	r2, r3, #5
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	4413      	add	r3, r2
 800f04a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f04e:	4619      	mov	r1, r3
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	781b      	ldrb	r3, [r3, #0]
 800f054:	015a      	lsls	r2, r3, #5
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	4413      	add	r3, r2
 800f05a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f05e:	691b      	ldr	r3, [r3, #16]
 800f060:	0cdb      	lsrs	r3, r3, #19
 800f062:	04db      	lsls	r3, r3, #19
 800f064:	610b      	str	r3, [r1, #16]
 800f066:	e05a      	b.n	800f11e <USB_EP0StartXfer+0x14e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	015a      	lsls	r2, r3, #5
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	4413      	add	r3, r2
 800f072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f076:	4619      	mov	r1, r3
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	015a      	lsls	r2, r3, #5
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	4413      	add	r3, r2
 800f082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f086:	691b      	ldr	r3, [r3, #16]
 800f088:	0cdb      	lsrs	r3, r3, #19
 800f08a:	04db      	lsls	r3, r3, #19
 800f08c:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	781b      	ldrb	r3, [r3, #0]
 800f092:	015a      	lsls	r2, r3, #5
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	4413      	add	r3, r2
 800f098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f09c:	4619      	mov	r1, r3
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	015a      	lsls	r2, r3, #5
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	4413      	add	r3, r2
 800f0a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0ac:	691b      	ldr	r3, [r3, #16]
 800f0ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f0b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f0b6:	610b      	str	r3, [r1, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	695a      	ldr	r2, [r3, #20]
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	689b      	ldr	r3, [r3, #8]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d903      	bls.n	800f0cc <USB_EP0StartXfer+0xfc>
      {
        ep->xfer_len = ep->maxpacket;
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	689a      	ldr	r2, [r3, #8]
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	015a      	lsls	r2, r3, #5
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	4413      	add	r3, r2
 800f0d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0da:	4619      	mov	r1, r3
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	015a      	lsls	r2, r3, #5
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	4413      	add	r3, r2
 800f0e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0ea:	691b      	ldr	r3, [r3, #16]
 800f0ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f0f0:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	015a      	lsls	r2, r3, #5
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	4413      	add	r3, r2
 800f0fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f100:	4619      	mov	r1, r3
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	015a      	lsls	r2, r3, #5
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	4413      	add	r3, r2
 800f10c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f110:	691a      	ldr	r2, [r3, #16]
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	695b      	ldr	r3, [r3, #20]
 800f116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f11a:	4313      	orrs	r3, r2
 800f11c:	610b      	str	r3, [r1, #16]
    
    }
    
    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0)
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	695b      	ldr	r3, [r3, #20]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d00e      	beq.n	800f144 <USB_EP0StartXfer+0x174>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1 << (ep->num);
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f12c:	4619      	mov	r1, r3
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f136:	68ba      	ldr	r2, [r7, #8]
 800f138:	7812      	ldrb	r2, [r2, #0]
 800f13a:	4610      	mov	r0, r2
 800f13c:	2201      	movs	r2, #1
 800f13e:	4082      	lsls	r2, r0
 800f140:	4313      	orrs	r3, r2
 800f142:	634b      	str	r3, [r1, #52]	; 0x34
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	015a      	lsls	r2, r3, #5
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	4413      	add	r3, r2
 800f14e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f152:	4619      	mov	r1, r3
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	781b      	ldrb	r3, [r3, #0]
 800f158:	015a      	lsls	r2, r3, #5
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	4413      	add	r3, r2
 800f15e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f168:	600b      	str	r3, [r1, #0]
 800f16a:	e06b      	b.n	800f244 <USB_EP0StartXfer+0x274>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	781b      	ldrb	r3, [r3, #0]
 800f170:	015a      	lsls	r2, r3, #5
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	4413      	add	r3, r2
 800f176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f17a:	4619      	mov	r1, r3
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	015a      	lsls	r2, r3, #5
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	4413      	add	r3, r2
 800f186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f18a:	691b      	ldr	r3, [r3, #16]
 800f18c:	0cdb      	lsrs	r3, r3, #19
 800f18e:	04db      	lsls	r3, r3, #19
 800f190:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	015a      	lsls	r2, r3, #5
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	4413      	add	r3, r2
 800f19c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	015a      	lsls	r2, r3, #5
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	4413      	add	r3, r2
 800f1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1b0:	691b      	ldr	r3, [r3, #16]
 800f1b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f1b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f1ba:	610b      	str	r3, [r1, #16]
      
    if (ep->xfer_len > 0)
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	695b      	ldr	r3, [r3, #20]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d003      	beq.n	800f1cc <USB_EP0StartXfer+0x1fc>
    {
      ep->xfer_len = ep->maxpacket;
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	689a      	ldr	r2, [r3, #8]
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	615a      	str	r2, [r3, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	015a      	lsls	r2, r3, #5
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	4413      	add	r3, r2
 800f1d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1da:	4619      	mov	r1, r3
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	015a      	lsls	r2, r3, #5
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	4413      	add	r3, r2
 800f1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1ea:	691b      	ldr	r3, [r3, #16]
 800f1ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f1f0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	781b      	ldrb	r3, [r3, #0]
 800f1f6:	015a      	lsls	r2, r3, #5
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	4413      	add	r3, r2
 800f1fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f200:	4619      	mov	r1, r3
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	781b      	ldrb	r3, [r3, #0]
 800f206:	015a      	lsls	r2, r3, #5
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	4413      	add	r3, r2
 800f20c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f210:	691a      	ldr	r2, [r3, #16]
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	689b      	ldr	r3, [r3, #8]
 800f216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f21a:	4313      	orrs	r3, r2
 800f21c:	610b      	str	r3, [r1, #16]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	015a      	lsls	r2, r3, #5
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	4413      	add	r3, r2
 800f228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f22c:	4619      	mov	r1, r3
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	015a      	lsls	r2, r3, #5
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	4413      	add	r3, r2
 800f238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f242:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 800f244:	2300      	movs	r3, #0
}
 800f246:	4618      	mov	r0, r3
 800f248:	3714      	adds	r7, #20
 800f24a:	46bd      	mov	sp, r7
 800f24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f250:	4770      	bx	lr

0800f252 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f252:	b480      	push	{r7}
 800f254:	b087      	sub	sp, #28
 800f256:	af00      	add	r7, sp, #0
 800f258:	60f8      	str	r0, [r7, #12]
 800f25a:	60b9      	str	r1, [r7, #8]
 800f25c:	4611      	mov	r1, r2
 800f25e:	461a      	mov	r2, r3
 800f260:	460b      	mov	r3, r1
 800f262:	71fb      	strb	r3, [r7, #7]
 800f264:	4613      	mov	r3, r2
 800f266:	80bb      	strh	r3, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  uint32_t count32b= 0 , index= 0;
 800f268:	2300      	movs	r3, #0
 800f26a:	613b      	str	r3, [r7, #16]
 800f26c:	2300      	movs	r3, #0
 800f26e:	617b      	str	r3, [r7, #20]
  count32b =  (len + 3) / 4;
 800f270:	88bb      	ldrh	r3, [r7, #4]
 800f272:	3303      	adds	r3, #3
 800f274:	2b00      	cmp	r3, #0
 800f276:	da00      	bge.n	800f27a <USB_WritePacket+0x28>
 800f278:	3303      	adds	r3, #3
 800f27a:	109b      	asrs	r3, r3, #2
 800f27c:	613b      	str	r3, [r7, #16]
  for (index = 0; index < count32b; index++, src += 4)
 800f27e:	2300      	movs	r3, #0
 800f280:	617b      	str	r3, [r7, #20]
 800f282:	e00f      	b.n	800f2a4 <USB_WritePacket+0x52>
  {
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 800f284:	79fb      	ldrb	r3, [r7, #7]
 800f286:	031a      	lsls	r2, r3, #12
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	4413      	add	r3, r2
 800f28c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f290:	461a      	mov	r2, r3
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	6013      	str	r3, [r2, #0]
  for (index = 0; index < count32b; index++, src += 4)
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	3301      	adds	r3, #1
 800f29c:	617b      	str	r3, [r7, #20]
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	3304      	adds	r3, #4
 800f2a2:	60bb      	str	r3, [r7, #8]
 800f2a4:	697a      	ldr	r2, [r7, #20]
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	d3eb      	bcc.n	800f284 <USB_WritePacket+0x32>
  }
  return HAL_OK;
 800f2ac:	2300      	movs	r3, #0
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	371c      	adds	r7, #28
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b8:	4770      	bx	lr

0800f2ba <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f2ba:	b480      	push	{r7}
 800f2bc:	b087      	sub	sp, #28
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	60f8      	str	r0, [r7, #12]
 800f2c2:	60b9      	str	r1, [r7, #8]
 800f2c4:	4613      	mov	r3, r2
 800f2c6:	80fb      	strh	r3, [r7, #6]
  uint32_t index=0;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3) / 4;
 800f2cc:	88fb      	ldrh	r3, [r7, #6]
 800f2ce:	3303      	adds	r3, #3
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	da00      	bge.n	800f2d6 <USB_ReadPacket+0x1c>
 800f2d4:	3303      	adds	r3, #3
 800f2d6:	109b      	asrs	r3, r3, #2
 800f2d8:	613b      	str	r3, [r7, #16]
  
  for ( index = 0; index < count32b; index++, dest += 4 )
 800f2da:	2300      	movs	r3, #0
 800f2dc:	617b      	str	r3, [r7, #20]
 800f2de:	e00b      	b.n	800f2f8 <USB_ReadPacket+0x3e>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	601a      	str	r2, [r3, #0]
  for ( index = 0; index < count32b; index++, dest += 4 )
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	617b      	str	r3, [r7, #20]
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	3304      	adds	r3, #4
 800f2f6:	60bb      	str	r3, [r7, #8]
 800f2f8:	697a      	ldr	r2, [r7, #20]
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d3ef      	bcc.n	800f2e0 <USB_ReadPacket+0x26>
    
  }
  return ((void *)dest);
 800f300:	68bb      	ldr	r3, [r7, #8]
}
 800f302:	4618      	mov	r0, r3
 800f304:	371c      	adds	r7, #28
 800f306:	46bd      	mov	sp, r7
 800f308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30c:	4770      	bx	lr

0800f30e <USB_EPSetStall>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 800f30e:	b480      	push	{r7}
 800f310:	b083      	sub	sp, #12
 800f312:	af00      	add	r7, sp, #0
 800f314:	6078      	str	r0, [r7, #4]
 800f316:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	785b      	ldrb	r3, [r3, #1]
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	d130      	bne.n	800f382 <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	015a      	lsls	r2, r3, #5
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4413      	add	r3, r2
 800f32a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	2b00      	cmp	r3, #0
 800f332:	db12      	blt.n	800f35a <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	015a      	lsls	r2, r3, #5
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	4413      	add	r3, r2
 800f33e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f342:	4619      	mov	r1, r3
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	015a      	lsls	r2, r3, #5
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	4413      	add	r3, r2
 800f34e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f358:	600b      	str	r3, [r1, #0]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	015a      	lsls	r2, r3, #5
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	4413      	add	r3, r2
 800f364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f368:	4619      	mov	r1, r3
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	015a      	lsls	r2, r3, #5
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	4413      	add	r3, r2
 800f374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f37e:	600b      	str	r3, [r1, #0]
 800f380:	e02f      	b.n	800f3e2 <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	015a      	lsls	r2, r3, #5
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	4413      	add	r3, r2
 800f38c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	db12      	blt.n	800f3bc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	015a      	lsls	r2, r3, #5
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	4413      	add	r3, r2
 800f3a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	015a      	lsls	r2, r3, #5
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f3ba:	600b      	str	r3, [r1, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	015a      	lsls	r2, r3, #5
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	4413      	add	r3, r2
 800f3c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	015a      	lsls	r2, r3, #5
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	4413      	add	r3, r2
 800f3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f3e0:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 800f3e2:	2300      	movs	r3, #0
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	370c      	adds	r7, #12
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ee:	4770      	bx	lr

0800f3f0 <USB_EPClearStall>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	b083      	sub	sp, #12
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	785b      	ldrb	r3, [r3, #1]
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	d12e      	bne.n	800f460 <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	015a      	lsls	r2, r3, #5
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	4413      	add	r3, r2
 800f40c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f410:	4619      	mov	r1, r3
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	015a      	lsls	r2, r3, #5
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	4413      	add	r3, r2
 800f41c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f426:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	78db      	ldrb	r3, [r3, #3]
 800f42c:	2b03      	cmp	r3, #3
 800f42e:	d003      	beq.n	800f438 <USB_EPClearStall+0x48>
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	78db      	ldrb	r3, [r3, #3]
 800f434:	2b02      	cmp	r3, #2
 800f436:	d141      	bne.n	800f4bc <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	015a      	lsls	r2, r3, #5
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	4413      	add	r3, r2
 800f442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f446:	4619      	mov	r1, r3
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	015a      	lsls	r2, r3, #5
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	4413      	add	r3, r2
 800f452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f45c:	600b      	str	r3, [r1, #0]
 800f45e:	e02d      	b.n	800f4bc <USB_EPClearStall+0xcc>
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	015a      	lsls	r2, r3, #5
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	4413      	add	r3, r2
 800f46a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f46e:	4619      	mov	r1, r3
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	015a      	lsls	r2, r3, #5
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	4413      	add	r3, r2
 800f47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f484:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	78db      	ldrb	r3, [r3, #3]
 800f48a:	2b03      	cmp	r3, #3
 800f48c:	d003      	beq.n	800f496 <USB_EPClearStall+0xa6>
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	78db      	ldrb	r3, [r3, #3]
 800f492:	2b02      	cmp	r3, #2
 800f494:	d112      	bne.n	800f4bc <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	015a      	lsls	r2, r3, #5
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	4413      	add	r3, r2
 800f4a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4a4:	4619      	mov	r1, r3
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	015a      	lsls	r2, r3, #5
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	4413      	add	r3, r2
 800f4b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f4ba:	600b      	str	r3, [r1, #0]
    }    
  }
  return HAL_OK;
 800f4bc:	2300      	movs	r3, #0
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	370c      	adds	r7, #12
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c8:	4770      	bx	lr

0800f4ca <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the USB device mode
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800f4ca:	b580      	push	{r7, lr}
 800f4cc:	b084      	sub	sp, #16
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	6078      	str	r0, [r7, #4]
  uint32_t index;
  
  /* Clear Pending interrupt */
  for (index = 0; index < 15 ; index++)
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	60fb      	str	r3, [r7, #12]
 800f4d6:	e014      	b.n	800f502 <USB_StopDevice+0x38>
  {
    USBx_INEP(index)->DIEPINT  = 0xFF;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	015a      	lsls	r2, r3, #5
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	4413      	add	r3, r2
 800f4e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	23ff      	movs	r3, #255	; 0xff
 800f4e8:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	015a      	lsls	r2, r3, #5
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	4413      	add	r3, r2
 800f4f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	23ff      	movs	r3, #255	; 0xff
 800f4fa:	6093      	str	r3, [r2, #8]
  for (index = 0; index < 15 ; index++)
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	3301      	adds	r3, #1
 800f500:	60fb      	str	r3, [r7, #12]
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	2b0e      	cmp	r3, #14
 800f506:	d9e7      	bls.n	800f4d8 <USB_StopDevice+0xe>
  }
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f50e:	461a      	mov	r2, r3
 800f510:	f04f 33ff 	mov.w	r3, #4294967295
 800f514:	6193      	str	r3, [r2, #24]
  
  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f51c:	461a      	mov	r2, r3
 800f51e:	2300      	movs	r3, #0
 800f520:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f528:	461a      	mov	r2, r3
 800f52a:	2300      	movs	r3, #0
 800f52c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f534:	461a      	mov	r2, r3
 800f536:	2300      	movs	r3, #0
 800f538:	61d3      	str	r3, [r2, #28]
  
  /* Flush the FIFO */
  USB_FlushRxFifo(USBx);
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f7ff f9e4 	bl	800e908 <USB_FlushRxFifo>
  USB_FlushTxFifo(USBx ,  0x10 );  
 800f540:	2110      	movs	r1, #16
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f7ff f9ba 	bl	800e8bc <USB_FlushTxFifo>
  
  return HAL_OK;
 800f548:	2300      	movs	r3, #0
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3710      	adds	r7, #16
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}

0800f552 <USB_SetDevAddress>:
  * @param  address: new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f552:	b480      	push	{r7}
 800f554:	b083      	sub	sp, #12
 800f556:	af00      	add	r7, sp, #0
 800f558:	6078      	str	r0, [r7, #4]
 800f55a:	460b      	mov	r3, r1
 800f55c:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f564:	461a      	mov	r2, r3
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f572:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f57a:	4619      	mov	r1, r3
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	78fb      	ldrb	r3, [r7, #3]
 800f586:	011b      	lsls	r3, r3, #4
 800f588:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f58c:	4313      	orrs	r3, r2
 800f58e:	600b      	str	r3, [r1, #0]
  
  return HAL_OK;  
 800f590:	2300      	movs	r3, #0
}
 800f592:	4618      	mov	r0, r3
 800f594:	370c      	adds	r7, #12
 800f596:	46bd      	mov	sp, r7
 800f598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59c:	4770      	bx	lr

0800f59e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 800f59e:	b580      	push	{r7, lr}
 800f5a0:	b082      	sub	sp, #8
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ; 
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5ac:	461a      	mov	r2, r3
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	f023 0302 	bic.w	r3, r3, #2
 800f5ba:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 800f5bc:	2003      	movs	r0, #3
 800f5be:	f7f8 ff63 	bl	8008488 <HAL_Delay>
  
  return HAL_OK;  
 800f5c2:	2300      	movs	r3, #0
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3708      	adds	r7, #8
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}

0800f5cc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ; 
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5da:	461a      	mov	r2, r3
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	f043 0302 	orr.w	r3, r3, #2
 800f5e8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 800f5ea:	2003      	movs	r0, #3
 800f5ec:	f7f8 ff4c 	bl	8008488 <HAL_Delay>
  
  return HAL_OK;  
 800f5f0:	2300      	movs	r3, #0
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3708      	adds	r7, #8
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}

0800f5fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx: Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 800f5fa:	b480      	push	{r7}
 800f5fc:	b085      	sub	sp, #20
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f602:	2300      	movs	r3, #0
 800f604:	60fb      	str	r3, [r7, #12]
  
  tmpreg = USBx->GINTSTS;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	695b      	ldr	r3, [r3, #20]
 800f60a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	699b      	ldr	r3, [r3, #24]
 800f610:	68fa      	ldr	r2, [r7, #12]
 800f612:	4013      	ands	r3, r2
 800f614:	60fb      	str	r3, [r7, #12]
  return tmpreg;  
 800f616:	68fb      	ldr	r3, [r7, #12]
}
 800f618:	4618      	mov	r0, r3
 800f61a:	3714      	adds	r7, #20
 800f61c:	46bd      	mov	sp, r7
 800f61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f622:	4770      	bx	lr

0800f624 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx: Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 800f624:	b480      	push	{r7}
 800f626:	b085      	sub	sp, #20
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f632:	699b      	ldr	r3, [r3, #24]
 800f634:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f63c:	69db      	ldr	r3, [r3, #28]
 800f63e:	68fa      	ldr	r2, [r7, #12]
 800f640:	4013      	ands	r3, r2
 800f642:	60fb      	str	r3, [r7, #12]
  return ((tmpreg & 0xffff0000) >> 16);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	0c1b      	lsrs	r3, r3, #16
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3714      	adds	r7, #20
 800f64c:	46bd      	mov	sp, r7
 800f64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f652:	4770      	bx	lr

0800f654 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx: Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 800f654:	b480      	push	{r7}
 800f656:	b085      	sub	sp, #20
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f662:	699b      	ldr	r3, [r3, #24]
 800f664:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f66c:	69db      	ldr	r3, [r3, #28]
 800f66e:	68fa      	ldr	r2, [r7, #12]
 800f670:	4013      	ands	r3, r2
 800f672:	60fb      	str	r3, [r7, #12]
  return ((tmpreg & 0xFFFF));
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	b29b      	uxth	r3, r3
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3714      	adds	r7, #20
 800f67c:	46bd      	mov	sp, r7
 800f67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f682:	4770      	bx	lr

0800f684 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum: endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 800f684:	b480      	push	{r7}
 800f686:	b085      	sub	sp, #20
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	460b      	mov	r3, r1
 800f68e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg;
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 800f690:	78fb      	ldrb	r3, [r7, #3]
 800f692:	015a      	lsls	r2, r3, #5
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	4413      	add	r3, r2
 800f698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f69c:	689b      	ldr	r3, [r3, #8]
 800f69e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6a6:	695b      	ldr	r3, [r3, #20]
 800f6a8:	68fa      	ldr	r2, [r7, #12]
 800f6aa:	4013      	ands	r3, r2
 800f6ac:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
}
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3714      	adds	r7, #20
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ba:	4770      	bx	lr

0800f6bc <USB_ReadDevInEPInterrupt>:
  * @param  epnum: endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b087      	sub	sp, #28
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	460b      	mov	r3, r1
 800f6c6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0, msk = 0, emp = 0;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	617b      	str	r3, [r7, #20]
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	613b      	str	r3, [r7, #16]
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	60fb      	str	r3, [r7, #12]
  
  msk = USBx_DEVICE->DIEPMSK;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6da:	691b      	ldr	r3, [r3, #16]
 800f6dc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6e6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> epnum) & 0x1) << 7;
 800f6e8:	78fb      	ldrb	r3, [r7, #3]
 800f6ea:	68fa      	ldr	r2, [r7, #12]
 800f6ec:	fa22 f303 	lsr.w	r3, r2, r3
 800f6f0:	01db      	lsls	r3, r3, #7
 800f6f2:	b2db      	uxtb	r3, r3
 800f6f4:	693a      	ldr	r2, [r7, #16]
 800f6f6:	4313      	orrs	r3, r2
 800f6f8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 800f6fa:	78fb      	ldrb	r3, [r7, #3]
 800f6fc:	015a      	lsls	r2, r3, #5
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	4413      	add	r3, r2
 800f702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f706:	689a      	ldr	r2, [r3, #8]
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	4013      	ands	r3, r2
 800f70c:	617b      	str	r3, [r7, #20]
  return tmpreg;
 800f70e:	697b      	ldr	r3, [r7, #20]
}
 800f710:	4618      	mov	r0, r3
 800f712:	371c      	adds	r7, #28
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b083      	sub	sp, #12
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	695b      	ldr	r3, [r3, #20]
 800f728:	f003 0301 	and.w	r3, r3, #1
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	370c      	adds	r7, #12
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr

0800f738 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 800f738:	b480      	push	{r7}
 800f73a:	b083      	sub	sp, #12
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f746:	461a      	mov	r2, r3
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f754:	f023 0307 	bic.w	r3, r3, #7
 800f758:	6013      	str	r3, [r2, #0]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f760:	689b      	ldr	r3, [r3, #8]
 800f762:	f003 0306 	and.w	r3, r3, #6
 800f766:	2b04      	cmp	r3, #4
 800f768:	d10a      	bne.n	800f780 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f770:	461a      	mov	r2, r3
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f043 0303 	orr.w	r3, r3, #3
 800f77e:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f786:	461a      	mov	r2, r3
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f794:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f796:	2300      	movs	r3, #0
}
 800f798:	4618      	mov	r0, r3
 800f79a:	370c      	adds	r7, #12
 800f79c:	46bd      	mov	sp, r7
 800f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a2:	4770      	bx	lr

0800f7a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup: pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b085      	sub	sp, #20
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	607a      	str	r2, [r7, #4]
 800f7b0:	72fb      	strb	r3, [r7, #11]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(psetup);

  USBx_OUTEP(0)->DOEPTSIZ = 0;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7b8:	461a      	mov	r2, r3
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7c4:	461a      	mov	r2, r3
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7cc:	691b      	ldr	r3, [r3, #16]
 800f7ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f7d2:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7da:	461a      	mov	r2, r3
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7e2:	691b      	ldr	r3, [r3, #16]
 800f7e4:	f043 0318 	orr.w	r3, r3, #24
 800f7e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7f8:	691b      	ldr	r3, [r3, #16]
 800f7fa:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f7fe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800f800:	2300      	movs	r3, #0
}
 800f802:	4618      	mov	r0, r3
 800f804:	3714      	adds	r7, #20
 800f806:	46bd      	mov	sp, r7
 800f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80c:	4770      	bx	lr
	...

0800f810 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f810:	b480      	push	{r7}
 800f812:	b085      	sub	sp, #20
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f818:	2300      	movs	r3, #0
 800f81a:	60fb      	str	r3, [r7, #12]
  
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	3301      	adds	r3, #1
 800f820:	60fb      	str	r3, [r7, #12]
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	4a13      	ldr	r2, [pc, #76]	; (800f874 <USB_CoreReset+0x64>)
 800f826:	4293      	cmp	r3, r2
 800f828:	d901      	bls.n	800f82e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f82a:	2303      	movs	r3, #3
 800f82c:	e01b      	b.n	800f866 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	691b      	ldr	r3, [r3, #16]
 800f832:	2b00      	cmp	r3, #0
 800f834:	daf2      	bge.n	800f81c <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 800f836:	2300      	movs	r3, #0
 800f838:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	691b      	ldr	r3, [r3, #16]
 800f83e:	f043 0201 	orr.w	r2, r3, #1
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	3301      	adds	r3, #1
 800f84a:	60fb      	str	r3, [r7, #12]
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	4a09      	ldr	r2, [pc, #36]	; (800f874 <USB_CoreReset+0x64>)
 800f850:	4293      	cmp	r3, r2
 800f852:	d901      	bls.n	800f858 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f854:	2303      	movs	r3, #3
 800f856:	e006      	b.n	800f866 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	691b      	ldr	r3, [r3, #16]
 800f85c:	f003 0301 	and.w	r3, r3, #1
 800f860:	2b01      	cmp	r3, #1
 800f862:	d0f0      	beq.n	800f846 <USB_CoreReset+0x36>
  
  return HAL_OK;
 800f864:	2300      	movs	r3, #0
}
 800f866:	4618      	mov	r0, r3
 800f868:	3714      	adds	r7, #20
 800f86a:	46bd      	mov	sp, r7
 800f86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f870:	4770      	bx	lr
 800f872:	bf00      	nop
 800f874:	00030d40 	.word	0x00030d40

0800f878 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800f878:	b480      	push	{r7}
 800f87a:	b085      	sub	sp, #20
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800f880:	4b0e      	ldr	r3, [pc, #56]	; (800f8bc <LL_mDelay+0x44>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800f886:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f88e:	d00c      	beq.n	800f8aa <LL_mDelay+0x32>
  {
    Delay++;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	3301      	adds	r3, #1
 800f894:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800f896:	e008      	b.n	800f8aa <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 800f898:	4b08      	ldr	r3, [pc, #32]	; (800f8bc <LL_mDelay+0x44>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d002      	beq.n	800f8aa <LL_mDelay+0x32>
    {
      Delay--;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	3b01      	subs	r3, #1
 800f8a8:	607b      	str	r3, [r7, #4]
  while (Delay)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d1f3      	bne.n	800f898 <LL_mDelay+0x20>
    }
  }
}
 800f8b0:	bf00      	nop
 800f8b2:	3714      	adds	r7, #20
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr
 800f8bc:	e000e010 	.word	0xe000e010

0800f8c0 <USBD_MSC_Init>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_Init (USBD_HandleTypeDef *pdev, 
                            uint8_t cfgidx)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b084      	sub	sp, #16
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	460b      	mov	r3, r1
 800f8ca:	70fb      	strb	r3, [r7, #3]
  int16_t ret = 0;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	81fb      	strh	r3, [r7, #14]
   
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	7c1b      	ldrb	r3, [r3, #16]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d10e      	bne.n	800f8f6 <USBD_MSC_Init+0x36>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800f8d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f8dc:	2202      	movs	r2, #2
 800f8de:	2101      	movs	r1, #1
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f7f7 fa38 	bl	8006d56 <USBD_LL_OpenEP>
                   MSC_EPOUT_ADDR,
                   USBD_EP_TYPE_BULK,
                   MSC_MAX_HS_PACKET);
    
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800f8e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f8ea:	2202      	movs	r2, #2
 800f8ec:	2181      	movs	r1, #129	; 0x81
 800f8ee:	6878      	ldr	r0, [r7, #4]
 800f8f0:	f7f7 fa31 	bl	8006d56 <USBD_LL_OpenEP>
 800f8f4:	e00b      	b.n	800f90e <USBD_MSC_Init+0x4e>
                   MSC_MAX_HS_PACKET);  
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800f8f6:	2340      	movs	r3, #64	; 0x40
 800f8f8:	2202      	movs	r2, #2
 800f8fa:	2101      	movs	r1, #1
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	f7f7 fa2a 	bl	8006d56 <USBD_LL_OpenEP>
                   MSC_EPOUT_ADDR,
                   USBD_EP_TYPE_BULK,
                   MSC_MAX_FS_PACKET);
    
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800f902:	2340      	movs	r3, #64	; 0x40
 800f904:	2202      	movs	r2, #2
 800f906:	2181      	movs	r1, #129	; 0x81
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f7f7 fa24 	bl	8006d56 <USBD_LL_OpenEP>
                   MSC_EPIN_ADDR,
                   USBD_EP_TYPE_BULK,
                   MSC_MAX_FS_PACKET);  
  }
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 800f90e:	f242 006c 	movw	r0, #8300	; 0x206c
 800f912:	f005 fc7b 	bl	801520c <malloc>
 800f916:	4603      	mov	r3, r0
 800f918:	461a      	mov	r2, r3
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f926:	2b00      	cmp	r3, #0
 800f928:	d102      	bne.n	800f930 <USBD_MSC_Init+0x70>
  {
    ret = 1; 
 800f92a:	2301      	movs	r3, #1
 800f92c:	81fb      	strh	r3, [r7, #14]
 800f92e:	e004      	b.n	800f93a <USBD_MSC_Init+0x7a>
  }
  else
  {
    /* Init the BOT  layer */
    MSC_BOT_Init(pdev); 
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f000 f958 	bl	800fbe6 <MSC_BOT_Init>
    ret = 0;
 800f936:	2300      	movs	r3, #0
 800f938:	81fb      	strh	r3, [r7, #14]
  }
  
  return ret;
 800f93a:	89fb      	ldrh	r3, [r7, #14]
 800f93c:	b2db      	uxtb	r3, r3
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3710      	adds	r7, #16
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}

0800f946 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t  USBD_MSC_DeInit (USBD_HandleTypeDef *pdev, 
                              uint8_t cfgidx)
{
 800f946:	b580      	push	{r7, lr}
 800f948:	b082      	sub	sp, #8
 800f94a:	af00      	add	r7, sp, #0
 800f94c:	6078      	str	r0, [r7, #4]
 800f94e:	460b      	mov	r3, r1
 800f950:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev,
 800f952:	2101      	movs	r1, #1
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f7f7 fa18 	bl	8006d8a <USBD_LL_CloseEP>
                  MSC_EPOUT_ADDR);
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800f95a:	2181      	movs	r1, #129	; 0x81
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f7f7 fa14 	bl	8006d8a <USBD_LL_CloseEP>
                  MSC_EPIN_ADDR);
  
  
    /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f000 f98f 	bl	800fc86 <MSC_BOT_DeInit>
  
  /* Free MSC Class Resources */
  if(pdev->pClassData != NULL)
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d009      	beq.n	800f986 <USBD_MSC_DeInit+0x40>
  {
    USBD_free(pdev->pClassData);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f978:	4618      	mov	r0, r3
 800f97a:	f005 fc4f 	bl	801521c <free>
    pdev->pClassData  = NULL; 
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2200      	movs	r2, #0
 800f982:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  return 0;
 800f986:	2300      	movs	r3, #0
}
 800f988:	4618      	mov	r0, r3
 800f98a:	3708      	adds	r7, #8
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}

0800f990 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t  USBD_MSC_Setup (USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b084      	sub	sp, #16
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f9a0:	60fb      	str	r3, [r7, #12]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	781b      	ldrb	r3, [r3, #0]
 800f9a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d04a      	beq.n	800fa44 <USBD_MSC_Setup+0xb4>
 800f9ae:	2b20      	cmp	r3, #32
 800f9b0:	d000      	beq.n	800f9b4 <USBD_MSC_Setup+0x24>
      
    }  
    break;
   
  default:
    break;
 800f9b2:	e0a0      	b.n	800faf6 <USBD_MSC_Setup+0x166>
    switch (req->bRequest)
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	785b      	ldrb	r3, [r3, #1]
 800f9b8:	2bfe      	cmp	r3, #254	; 0xfe
 800f9ba:	d002      	beq.n	800f9c2 <USBD_MSC_Setup+0x32>
 800f9bc:	2bff      	cmp	r3, #255	; 0xff
 800f9be:	d023      	beq.n	800fa08 <USBD_MSC_Setup+0x78>
 800f9c0:	e039      	b.n	800fa36 <USBD_MSC_Setup+0xa6>
      if((req->wValue  == 0) && 
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	885b      	ldrh	r3, [r3, #2]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d118      	bne.n	800f9fc <USBD_MSC_Setup+0x6c>
         (req->wLength == 1) &&
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	88db      	ldrh	r3, [r3, #6]
      if((req->wValue  == 0) && 
 800f9ce:	2b01      	cmp	r3, #1
 800f9d0:	d114      	bne.n	800f9fc <USBD_MSC_Setup+0x6c>
         ((req->bmRequest & 0x80) == 0x80))
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	781b      	ldrb	r3, [r3, #0]
 800f9d6:	b25b      	sxtb	r3, r3
         (req->wLength == 1) &&
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	da0f      	bge.n	800f9fc <USBD_MSC_Setup+0x6c>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800f9e2:	699b      	ldr	r3, [r3, #24]
 800f9e4:	4798      	blx	r3
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	601a      	str	r2, [r3, #0]
                          (uint8_t *)&hmsc->max_lun,
 800f9ee:	68fb      	ldr	r3, [r7, #12]
        USBD_CtlSendData (pdev,
 800f9f0:	2201      	movs	r2, #1
 800f9f2:	4619      	mov	r1, r3
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f002 f8ff 	bl	8011bf8 <USBD_CtlSendData>
      break;
 800f9fa:	e022      	b.n	800fa42 <USBD_MSC_Setup+0xb2>
         USBD_CtlError(pdev , req);
 800f9fc:	6839      	ldr	r1, [r7, #0]
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f002 f88e 	bl	8011b20 <USBD_CtlError>
         return USBD_FAIL; 
 800fa04:	2302      	movs	r3, #2
 800fa06:	e077      	b.n	800faf8 <USBD_MSC_Setup+0x168>
      if((req->wValue  == 0) && 
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	885b      	ldrh	r3, [r3, #2]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d10c      	bne.n	800fa2a <USBD_MSC_Setup+0x9a>
         (req->wLength == 0) &&
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	88db      	ldrh	r3, [r3, #6]
      if((req->wValue  == 0) && 
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d108      	bne.n	800fa2a <USBD_MSC_Setup+0x9a>
        ((req->bmRequest & 0x80) != 0x80))
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	b25b      	sxtb	r3, r3
         (req->wLength == 0) &&
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	db03      	blt.n	800fa2a <USBD_MSC_Setup+0x9a>
         MSC_BOT_Reset(pdev);
 800fa22:	6878      	ldr	r0, [r7, #4]
 800fa24:	f000 f914 	bl	800fc50 <MSC_BOT_Reset>
      break;
 800fa28:	e00b      	b.n	800fa42 <USBD_MSC_Setup+0xb2>
         USBD_CtlError(pdev , req);
 800fa2a:	6839      	ldr	r1, [r7, #0]
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f002 f877 	bl	8011b20 <USBD_CtlError>
         return USBD_FAIL; 
 800fa32:	2302      	movs	r3, #2
 800fa34:	e060      	b.n	800faf8 <USBD_MSC_Setup+0x168>
       USBD_CtlError(pdev , req);
 800fa36:	6839      	ldr	r1, [r7, #0]
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f002 f871 	bl	8011b20 <USBD_CtlError>
       return USBD_FAIL; 
 800fa3e:	2302      	movs	r3, #2
 800fa40:	e05a      	b.n	800faf8 <USBD_MSC_Setup+0x168>
    break;
 800fa42:	e058      	b.n	800faf6 <USBD_MSC_Setup+0x166>
    switch (req->bRequest)
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	785b      	ldrb	r3, [r3, #1]
 800fa48:	2b0a      	cmp	r3, #10
 800fa4a:	d004      	beq.n	800fa56 <USBD_MSC_Setup+0xc6>
 800fa4c:	2b0b      	cmp	r3, #11
 800fa4e:	d00a      	beq.n	800fa66 <USBD_MSC_Setup+0xd6>
 800fa50:	2b01      	cmp	r3, #1
 800fa52:	d00f      	beq.n	800fa74 <USBD_MSC_Setup+0xe4>
    break;
 800fa54:	e04e      	b.n	800faf4 <USBD_MSC_Setup+0x164>
                        (uint8_t *)&hmsc->interface,
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev,
 800fa5a:	2201      	movs	r2, #1
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f002 f8ca 	bl	8011bf8 <USBD_CtlSendData>
      break;
 800fa64:	e046      	b.n	800faf4 <USBD_MSC_Setup+0x164>
      hmsc->interface = (uint8_t)(req->wValue);
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	885b      	ldrh	r3, [r3, #2]
 800fa6a:	b2db      	uxtb	r3, r3
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	605a      	str	r2, [r3, #4]
      break;
 800fa72:	e03f      	b.n	800faf4 <USBD_MSC_Setup+0x164>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	889b      	ldrh	r3, [r3, #4]
 800fa78:	b2db      	uxtb	r3, r3
 800fa7a:	4619      	mov	r1, r3
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f7f7 f997 	bl	8006db0 <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	889b      	ldrh	r3, [r3, #4]
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	4619      	mov	r1, r3
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f7f7 f97d 	bl	8006d8a <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	889b      	ldrh	r3, [r3, #4]
 800fa94:	b25b      	sxtb	r3, r3
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	da12      	bge.n	800fac0 <USBD_MSC_Setup+0x130>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	7c1b      	ldrb	r3, [r3, #16]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d107      	bne.n	800fab2 <USBD_MSC_Setup+0x122>
          USBD_LL_OpenEP(pdev,
 800faa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800faa6:	2202      	movs	r2, #2
 800faa8:	2181      	movs	r1, #129	; 0x81
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f7f7 f953 	bl	8006d56 <USBD_LL_OpenEP>
 800fab0:	e018      	b.n	800fae4 <USBD_MSC_Setup+0x154>
          USBD_LL_OpenEP(pdev,
 800fab2:	2340      	movs	r3, #64	; 0x40
 800fab4:	2202      	movs	r2, #2
 800fab6:	2181      	movs	r1, #129	; 0x81
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f7f7 f94c 	bl	8006d56 <USBD_LL_OpenEP>
 800fabe:	e011      	b.n	800fae4 <USBD_MSC_Setup+0x154>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	7c1b      	ldrb	r3, [r3, #16]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d107      	bne.n	800fad8 <USBD_MSC_Setup+0x148>
          USBD_LL_OpenEP(pdev,
 800fac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800facc:	2202      	movs	r2, #2
 800face:	2101      	movs	r1, #1
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f7f7 f940 	bl	8006d56 <USBD_LL_OpenEP>
 800fad6:	e005      	b.n	800fae4 <USBD_MSC_Setup+0x154>
          USBD_LL_OpenEP(pdev,
 800fad8:	2340      	movs	r3, #64	; 0x40
 800fada:	2202      	movs	r2, #2
 800fadc:	2101      	movs	r1, #1
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f7f7 f939 	bl	8006d56 <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	889b      	ldrh	r3, [r3, #4]
 800fae8:	b2db      	uxtb	r3, r3
 800faea:	4619      	mov	r1, r3
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f000 fa6c 	bl	800ffca <MSC_BOT_CplClrFeature>
      break;
 800faf2:	bf00      	nop
    break;
 800faf4:	bf00      	nop
  }
  return 0;
 800faf6:	2300      	movs	r3, #0
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3710      	adds	r7, #16
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <USBD_MSC_DataIn>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataIn (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	460b      	mov	r3, r1
 800fb0a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev , epnum);
 800fb0c:	78fb      	ldrb	r3, [r7, #3]
 800fb0e:	4619      	mov	r1, r3
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f000 f8c9 	bl	800fca8 <MSC_BOT_DataIn>
  return 0;
 800fb16:	2300      	movs	r3, #0
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3708      	adds	r7, #8
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <USBD_MSC_DataOut>:
* @param  epnum: endpoint index
* @retval status
*/
uint8_t  USBD_MSC_DataOut (USBD_HandleTypeDef *pdev, 
                               uint8_t epnum)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
 800fb28:	460b      	mov	r3, r1
 800fb2a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev , epnum);
 800fb2c:	78fb      	ldrb	r3, [r7, #3]
 800fb2e:	4619      	mov	r1, r3
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f000 f8ed 	bl	800fd10 <MSC_BOT_DataOut>
  return 0;
 800fb36:	2300      	movs	r3, #0
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3708      	adds	r7, #8
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
 800fb40:	b480      	push	{r7}
 800fb42:	b083      	sub	sp, #12
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgHSDesc);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2220      	movs	r2, #32
 800fb4c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgHSDesc;
 800fb4e:	4b03      	ldr	r3, [pc, #12]	; (800fb5c <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800fb50:	4618      	mov	r0, r3
 800fb52:	370c      	adds	r7, #12
 800fb54:	46bd      	mov	sp, r7
 800fb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5a:	4770      	bx	lr
 800fb5c:	2000023c 	.word	0x2000023c

0800fb60 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
 800fb60:	b480      	push	{r7}
 800fb62:	b083      	sub	sp, #12
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_CfgFSDesc);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2220      	movs	r2, #32
 800fb6c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgFSDesc;
 800fb6e:	4b03      	ldr	r3, [pc, #12]	; (800fb7c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	370c      	adds	r7, #12
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr
 800fb7c:	2000025c 	.word	0x2000025c

0800fb80 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b083      	sub	sp, #12
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2220      	movs	r2, #32
 800fb8c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
 800fb8e:	4b03      	ldr	r3, [pc, #12]	; (800fb9c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	370c      	adds	r7, #12
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr
 800fb9c:	2000027c 	.word	0x2000027c

0800fba0 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800fba0:	b480      	push	{r7}
 800fba2:	b083      	sub	sp, #12
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	220a      	movs	r2, #10
 800fbac:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_DeviceQualifierDesc;
 800fbae:	4b03      	ldr	r3, [pc, #12]	; (800fbbc <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	370c      	adds	r7, #12
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbba:	4770      	bx	lr
 800fbbc:	2000029c 	.word	0x2000029c

0800fbc0 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	b083      	sub	sp, #12
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
  if(fops != NULL)
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d003      	beq.n	800fbd8 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData= fops;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	683a      	ldr	r2, [r7, #0]
 800fbd4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }
  return 0;
 800fbd8:	2300      	movs	r3, #0
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	370c      	adds	r7, #12
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe4:	4770      	bx	lr

0800fbe6 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init (USBD_HandleTypeDef  *pdev)
{
 800fbe6:	b580      	push	{r7, lr}
 800fbe8:	b084      	sub	sp, #16
 800fbea:	af00      	add	r7, sp, #0
 800fbec:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fbf4:	60fb      	str	r3, [r7, #12]
    
  hmsc->bot_state  = USBD_BOT_IDLE;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2200      	movs	r2, #0
 800fc00:	725a      	strb	r2, [r3, #9]
  
  hmsc->scsi_sense_tail = 0;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800fc08:	331d      	adds	r3, #29
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800fc14:	331c      	adds	r3, #28
 800fc16:	2200      	movs	r2, #0
 800fc18:	701a      	strb	r2, [r3, #0]
  
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	2000      	movs	r0, #0
 800fc24:	4798      	blx	r3
  
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800fc26:	2101      	movs	r1, #1
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f7f7 f8c1 	bl	8006db0 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800fc2e:	2181      	movs	r1, #129	; 0x81
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f7f7 f8bd 	bl	8006db0 <USBD_LL_FlushEP>
  
  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev,
                          MSC_EPOUT_ADDR,
                          (uint8_t *)&hmsc->cbw,
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 800fc3c:	320c      	adds	r2, #12
  USBD_LL_PrepareReceive (pdev,
 800fc3e:	231f      	movs	r3, #31
 800fc40:	2101      	movs	r1, #1
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f7f7 f943 	bl	8006ece <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);    
}
 800fc48:	bf00      	nop
 800fc4a:	3710      	adds	r7, #16
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}

0800fc50 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset (USBD_HandleTypeDef  *pdev)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b084      	sub	sp, #16
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fc5e:	60fb      	str	r3, [r7, #12]
    
  hmsc->bot_state  = USBD_BOT_IDLE;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2200      	movs	r2, #0
 800fc64:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	2201      	movs	r2, #1
 800fc6a:	725a      	strb	r2, [r3, #9]
  
  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive (pdev,
                          MSC_EPOUT_ADDR,
                          (uint8_t *)&hmsc->cbw,
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 800fc72:	320c      	adds	r2, #12
  USBD_LL_PrepareReceive (pdev,
 800fc74:	231f      	movs	r3, #31
 800fc76:	2101      	movs	r1, #1
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f7f7 f928 	bl	8006ece <USBD_LL_PrepareReceive>
                          USBD_BOT_CBW_LENGTH);   
}
 800fc7e:	bf00      	nop
 800fc80:	3710      	adds	r7, #16
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}

0800fc86 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit (USBD_HandleTypeDef  *pdev)
{
 800fc86:	b480      	push	{r7}
 800fc88:	b085      	sub	sp, #20
 800fc8a:	af00      	add	r7, sp, #0
 800fc8c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fc94:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state  = USBD_BOT_IDLE;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	2200      	movs	r2, #0
 800fc9a:	721a      	strb	r2, [r3, #8]
}
 800fc9c:	bf00      	nop
 800fc9e:	3714      	adds	r7, #20
 800fca0:	46bd      	mov	sp, r7
 800fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca6:	4770      	bx	lr

0800fca8 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn (USBD_HandleTypeDef  *pdev, 
                     uint8_t epnum)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fcba:	60fb      	str	r3, [r7, #12]
  
  switch (hmsc->bot_state)
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	7a1b      	ldrb	r3, [r3, #8]
 800fcc0:	2b02      	cmp	r3, #2
 800fcc2:	d004      	beq.n	800fcce <MSC_BOT_DataIn+0x26>
 800fcc4:	2b02      	cmp	r3, #2
 800fcc6:	db1c      	blt.n	800fd02 <MSC_BOT_DataIn+0x5a>
 800fcc8:	2b04      	cmp	r3, #4
 800fcca:	dc1a      	bgt.n	800fd02 <MSC_BOT_DataIn+0x5a>
 800fccc:	e014      	b.n	800fcf8 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if(SCSI_ProcessCmd(pdev,
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fcd4:	3319      	adds	r3, #25
 800fcd6:	7819      	ldrb	r1, [r3, #0]
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fcde:	331b      	adds	r3, #27
 800fce0:	461a      	mov	r2, r3
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f000 f998 	bl	8010018 <SCSI_ProcessCmd>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	da0b      	bge.n	800fd06 <MSC_BOT_DataIn+0x5e>
                        hmsc->cbw.bLUN,
                        &hmsc->cbw.CB[0]) < 0)
    {
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800fcee:	2101      	movs	r1, #1
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f000 f905 	bl	800ff00 <MSC_BOT_SendCSW>
    }
    break;
 800fcf6:	e006      	b.n	800fd06 <MSC_BOT_DataIn+0x5e>
    
  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 800fcf8:	2100      	movs	r1, #0
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f000 f900 	bl	800ff00 <MSC_BOT_SendCSW>
    
    break;
 800fd00:	e002      	b.n	800fd08 <MSC_BOT_DataIn+0x60>
    
  default:
    break;
 800fd02:	bf00      	nop
 800fd04:	e000      	b.n	800fd08 <MSC_BOT_DataIn+0x60>
    break;
 800fd06:	bf00      	nop
  }
}
 800fd08:	bf00      	nop
 800fd0a:	3710      	adds	r7, #16
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}

0800fd10 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut (USBD_HandleTypeDef  *pdev, 
                      uint8_t epnum)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	460b      	mov	r3, r1
 800fd1a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fd22:	60fb      	str	r3, [r7, #12]
  
  switch (hmsc->bot_state)
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	7a1b      	ldrb	r3, [r3, #8]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d002      	beq.n	800fd32 <MSC_BOT_DataOut+0x22>
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	d004      	beq.n	800fd3a <MSC_BOT_DataOut+0x2a>
    }

    break;
    
  default:
    break;
 800fd30:	e018      	b.n	800fd64 <MSC_BOT_DataOut+0x54>
    MSC_BOT_CBW_Decode(pdev);
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f000 f81a 	bl	800fd6c <MSC_BOT_CBW_Decode>
    break;
 800fd38:	e014      	b.n	800fd64 <MSC_BOT_DataOut+0x54>
    if(SCSI_ProcessCmd(pdev,
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fd40:	3319      	adds	r3, #25
 800fd42:	7819      	ldrb	r1, [r3, #0]
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fd4a:	331b      	adds	r3, #27
 800fd4c:	461a      	mov	r2, r3
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f000 f962 	bl	8010018 <SCSI_ProcessCmd>
 800fd54:	4603      	mov	r3, r0
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	da03      	bge.n	800fd62 <MSC_BOT_DataOut+0x52>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 800fd5a:	2101      	movs	r1, #1
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f000 f8cf 	bl	800ff00 <MSC_BOT_SendCSW>
    break;
 800fd62:	bf00      	nop
  }
}
 800fd64:	bf00      	nop
 800fd66:	3710      	adds	r7, #16
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly  
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode (USBD_HandleTypeDef  *pdev)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b084      	sub	sp, #16
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fd7a:	60fb      	str	r3, [r7, #12]
  
  hmsc->csw.dTag = hmsc->cbw.dTag;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fd82:	3310      	adds	r3, #16
 800fd84:	681a      	ldr	r2, [r3, #0]
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fd8c:	3330      	adds	r3, #48	; 0x30
 800fd8e:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fd96:	3314      	adds	r3, #20
 800fd98:	681a      	ldr	r2, [r3, #0]
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fda0:	3334      	adds	r3, #52	; 0x34
 800fda2:	601a      	str	r2, [r3, #0]
  
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800fda4:	2101      	movs	r1, #1
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f7f7 f8a8 	bl	8006efc <USBD_LL_GetRxDataSize>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b1f      	cmp	r3, #31
 800fdb0:	d11c      	bne.n	800fdec <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fdb8:	330c      	adds	r3, #12
 800fdba:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800fdbc:	4a35      	ldr	r2, [pc, #212]	; (800fe94 <MSC_BOT_CBW_Decode+0x128>)
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	d114      	bne.n	800fdec <MSC_BOT_CBW_Decode+0x80>
        (hmsc->cbw.bLUN > 1) || 
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fdc8:	3319      	adds	r3, #25
 800fdca:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 800fdcc:	2b01      	cmp	r3, #1
 800fdce:	d80d      	bhi.n	800fdec <MSC_BOT_CBW_Decode+0x80>
          (hmsc->cbw.bCBLength < 1) || 
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fdd6:	331a      	adds	r3, #26
 800fdd8:	781b      	ldrb	r3, [r3, #0]
        (hmsc->cbw.bLUN > 1) || 
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d006      	beq.n	800fdec <MSC_BOT_CBW_Decode+0x80>
            (hmsc->cbw.bCBLength > 16))
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fde4:	331a      	adds	r3, #26
 800fde6:	781b      	ldrb	r3, [r3, #0]
          (hmsc->cbw.bCBLength < 1) || 
 800fde8:	2b10      	cmp	r3, #16
 800fdea:	d910      	bls.n	800fe0e <MSC_BOT_CBW_Decode+0xa2>
  {
    
    SCSI_SenseCode(pdev,
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fdf2:	3319      	adds	r3, #25
 800fdf4:	7819      	ldrb	r1, [r3, #0]
 800fdf6:	2320      	movs	r3, #32
 800fdf8:	2205      	movs	r2, #5
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f000 fc7a 	bl	80106f4 <SCSI_SenseCode>
                   hmsc->cbw.bLUN, 
                   ILLEGAL_REQUEST, 
                   INVALID_CDB);
    
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	2202      	movs	r2, #2
 800fe04:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 f8ac 	bl	800ff64 <MSC_BOT_Abort>
        MSC_BOT_SendCSW (pdev,
                         USBD_CSW_CMD_PASSED);
      }
    }
  }
}
 800fe0c:	e03e      	b.n	800fe8c <MSC_BOT_CBW_Decode+0x120>
    if(SCSI_ProcessCmd(pdev,
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fe14:	3319      	adds	r3, #25
 800fe16:	7819      	ldrb	r1, [r3, #0]
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fe1e:	331b      	adds	r3, #27
 800fe20:	461a      	mov	r2, r3
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 f8f8 	bl	8010018 <SCSI_ProcessCmd>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	da0c      	bge.n	800fe48 <MSC_BOT_CBW_Decode+0xdc>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	7a1b      	ldrb	r3, [r3, #8]
 800fe32:	2b05      	cmp	r3, #5
 800fe34:	d104      	bne.n	800fe40 <MSC_BOT_CBW_Decode+0xd4>
       MSC_BOT_SendCSW (pdev,
 800fe36:	2101      	movs	r1, #1
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f000 f861 	bl	800ff00 <MSC_BOT_SendCSW>
}
 800fe3e:	e025      	b.n	800fe8c <MSC_BOT_CBW_Decode+0x120>
        MSC_BOT_Abort(pdev);
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f000 f88f 	bl	800ff64 <MSC_BOT_Abort>
}
 800fe46:	e021      	b.n	800fe8c <MSC_BOT_CBW_Decode+0x120>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	7a1b      	ldrb	r3, [r3, #8]
 800fe4c:	2b02      	cmp	r3, #2
 800fe4e:	d01d      	beq.n	800fe8c <MSC_BOT_CBW_Decode+0x120>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 800fe54:	2b01      	cmp	r3, #1
 800fe56:	d019      	beq.n	800fe8c <MSC_BOT_CBW_Decode+0x120>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN)) 
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800fe5c:	2b03      	cmp	r3, #3
 800fe5e:	d015      	beq.n	800fe8c <MSC_BOT_CBW_Decode+0x120>
      if (hmsc->bot_data_length > 0)
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	895b      	ldrh	r3, [r3, #10]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d009      	beq.n	800fe7c <MSC_BOT_CBW_Decode+0x110>
                         hmsc->bot_data, 
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f103 010c 	add.w	r1, r3, #12
        MSC_BOT_SendData(pdev,
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	895b      	ldrh	r3, [r3, #10]
 800fe72:	461a      	mov	r2, r3
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f000 f80f 	bl	800fe98 <MSC_BOT_SendData>
}
 800fe7a:	e007      	b.n	800fe8c <MSC_BOT_CBW_Decode+0x120>
      else if (hmsc->bot_data_length == 0) 
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	895b      	ldrh	r3, [r3, #10]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d103      	bne.n	800fe8c <MSC_BOT_CBW_Decode+0x120>
        MSC_BOT_SendCSW (pdev,
 800fe84:	2100      	movs	r1, #0
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f000 f83a 	bl	800ff00 <MSC_BOT_SendCSW>
}
 800fe8c:	bf00      	nop
 800fe8e:	3710      	adds	r7, #16
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}
 800fe94:	43425355 	.word	0x43425355

0800fe98 <MSC_BOT_SendData>:
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef  *pdev,
                              uint8_t* buf, 
                              uint16_t len)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b086      	sub	sp, #24
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	60f8      	str	r0, [r7, #12]
 800fea0:	60b9      	str	r1, [r7, #8]
 800fea2:	4613      	mov	r3, r2
 800fea4:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800feac:	617b      	str	r3, [r7, #20]
  
  len = MIN (hmsc->cbw.dDataLength, len);
 800feae:	88fa      	ldrh	r2, [r7, #6]
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800feb6:	3314      	adds	r3, #20
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	4293      	cmp	r3, r2
 800febc:	bf28      	it	cs
 800febe:	4613      	movcs	r3, r2
 800fec0:	80fb      	strh	r3, [r7, #6]
  hmsc->csw.dDataResidue -= len;
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fec8:	3334      	adds	r3, #52	; 0x34
 800feca:	681a      	ldr	r2, [r3, #0]
 800fecc:	88fb      	ldrh	r3, [r7, #6]
 800fece:	1ad2      	subs	r2, r2, r3
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fed6:	3334      	adds	r3, #52	; 0x34
 800fed8:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fee0:	3338      	adds	r3, #56	; 0x38
 800fee2:	2200      	movs	r2, #0
 800fee4:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	2204      	movs	r2, #4
 800feea:	721a      	strb	r2, [r3, #8]
  
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 800feec:	88fb      	ldrh	r3, [r7, #6]
 800feee:	68ba      	ldr	r2, [r7, #8]
 800fef0:	2181      	movs	r1, #129	; 0x81
 800fef2:	68f8      	ldr	r0, [r7, #12]
 800fef4:	f7f6 ffd4 	bl	8006ea0 <USBD_LL_Transmit>
}
 800fef8:	bf00      	nop
 800fefa:	3718      	adds	r7, #24
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}

0800ff00 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW (USBD_HandleTypeDef  *pdev,
                              uint8_t CSW_Status)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b084      	sub	sp, #16
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	460b      	mov	r3, r1
 800ff0a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ff12:	60fb      	str	r3, [r7, #12]
  
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ff1a:	332c      	adds	r3, #44	; 0x2c
 800ff1c:	4a10      	ldr	r2, [pc, #64]	; (800ff60 <MSC_BOT_SendCSW+0x60>)
 800ff1e:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ff26:	3338      	adds	r3, #56	; 0x38
 800ff28:	78fa      	ldrb	r2, [r7, #3]
 800ff2a:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	721a      	strb	r2, [r3, #8]
  
  USBD_LL_Transmit (pdev, 
             MSC_EPIN_ADDR, 
             (uint8_t *)&hmsc->csw, 
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 800ff38:	322c      	adds	r2, #44	; 0x2c
  USBD_LL_Transmit (pdev, 
 800ff3a:	230d      	movs	r3, #13
 800ff3c:	2181      	movs	r1, #129	; 0x81
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f7f6 ffae 	bl	8006ea0 <USBD_LL_Transmit>
             USBD_BOT_CSW_LENGTH);
  
  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive (pdev,
                    MSC_EPOUT_ADDR,
                    (uint8_t *)&hmsc->cbw, 
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 800ff4a:	320c      	adds	r2, #12
  USBD_LL_PrepareReceive (pdev,
 800ff4c:	231f      	movs	r3, #31
 800ff4e:	2101      	movs	r1, #1
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f7f6 ffbc 	bl	8006ece <USBD_LL_PrepareReceive>
                    USBD_BOT_CBW_LENGTH);  
  
}
 800ff56:	bf00      	nop
 800ff58:	3710      	adds	r7, #16
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
 800ff5e:	bf00      	nop
 800ff60:	53425355 	.word	0x53425355

0800ff64 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b084      	sub	sp, #16
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ff72:	60fb      	str	r3, [r7, #12]
  
  if ((hmsc->cbw.bmFlags == 0) && 
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ff7a:	3318      	adds	r3, #24
 800ff7c:	781b      	ldrb	r3, [r3, #0]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d10e      	bne.n	800ffa0 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0) &&
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ff88:	3314      	adds	r3, #20
 800ff8a:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0) && 
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d007      	beq.n	800ffa0 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0) &&
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d103      	bne.n	800ffa0 <MSC_BOT_Abort+0x3c>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 800ff98:	2101      	movs	r1, #1
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f7f6 ff1b 	bl	8006dd6 <USBD_LL_StallEP>
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800ffa0:	2181      	movs	r1, #129	; 0x81
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f7f6 ff17 	bl	8006dd6 <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	7a5b      	ldrb	r3, [r3, #9]
 800ffac:	2b02      	cmp	r3, #2
 800ffae:	d108      	bne.n	800ffc2 <MSC_BOT_Abort+0x5e>
  {
    USBD_LL_PrepareReceive (pdev,
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 800ffb6:	320c      	adds	r2, #12
    USBD_LL_PrepareReceive (pdev,
 800ffb8:	231f      	movs	r3, #31
 800ffba:	2101      	movs	r1, #1
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f7f6 ff86 	bl	8006ece <USBD_LL_PrepareReceive>
                      USBD_BOT_CBW_LENGTH);    
  }
}
 800ffc2:	bf00      	nop
 800ffc4:	3710      	adds	r7, #16
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}

0800ffca <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800ffca:	b580      	push	{r7, lr}
 800ffcc:	b084      	sub	sp, #16
 800ffce:	af00      	add	r7, sp, #0
 800ffd0:	6078      	str	r0, [r7, #4]
 800ffd2:	460b      	mov	r3, r1
 800ffd4:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ffdc:	60fb      	str	r3, [r7, #12]
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	7a5b      	ldrb	r3, [r3, #9]
 800ffe2:	2b02      	cmp	r3, #2
 800ffe4:	d107      	bne.n	800fff6 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800ffe6:	2181      	movs	r1, #129	; 0x81
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f7f6 fef4 	bl	8006dd6 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	2200      	movs	r2, #0
 800fff2:	725a      	strb	r2, [r3, #9]
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
  }
  
}
 800fff4:	e00b      	b.n	801000e <MSC_BOT_CplClrFeature+0x44>
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800fff6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	da07      	bge.n	801000e <MSC_BOT_CplClrFeature+0x44>
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	7a5b      	ldrb	r3, [r3, #9]
 8010002:	2b01      	cmp	r3, #1
 8010004:	d003      	beq.n	801000e <MSC_BOT_CplClrFeature+0x44>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8010006:	2101      	movs	r1, #1
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f7ff ff79 	bl	800ff00 <MSC_BOT_SendCSW>
}
 801000e:	bf00      	nop
 8010010:	3710      	adds	r7, #16
 8010012:	46bd      	mov	sp, r7
 8010014:	bd80      	pop	{r7, pc}
	...

08010018 <SCSI_ProcessCmd>:
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef  *pdev,
                           uint8_t lun, 
                           uint8_t *params)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b084      	sub	sp, #16
 801001c:	af00      	add	r7, sp, #0
 801001e:	60f8      	str	r0, [r7, #12]
 8010020:	460b      	mov	r3, r1
 8010022:	607a      	str	r2, [r7, #4]
 8010024:	72fb      	strb	r3, [r7, #11]
  
  switch (params[0])
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	2b5a      	cmp	r3, #90	; 0x5a
 801002c:	f200 811a 	bhi.w	8010264 <SCSI_ProcessCmd+0x24c>
 8010030:	a201      	add	r2, pc, #4	; (adr r2, 8010038 <SCSI_ProcessCmd+0x20>)
 8010032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010036:	bf00      	nop
 8010038:	080101a5 	.word	0x080101a5
 801003c:	08010265 	.word	0x08010265
 8010040:	08010265 	.word	0x08010265
 8010044:	080101b5 	.word	0x080101b5
 8010048:	08010265 	.word	0x08010265
 801004c:	08010265 	.word	0x08010265
 8010050:	08010265 	.word	0x08010265
 8010054:	08010265 	.word	0x08010265
 8010058:	08010265 	.word	0x08010265
 801005c:	08010265 	.word	0x08010265
 8010060:	08010265 	.word	0x08010265
 8010064:	08010265 	.word	0x08010265
 8010068:	08010265 	.word	0x08010265
 801006c:	08010265 	.word	0x08010265
 8010070:	08010265 	.word	0x08010265
 8010074:	08010265 	.word	0x08010265
 8010078:	08010265 	.word	0x08010265
 801007c:	08010265 	.word	0x08010265
 8010080:	080101c5 	.word	0x080101c5
 8010084:	08010265 	.word	0x08010265
 8010088:	08010265 	.word	0x08010265
 801008c:	08010265 	.word	0x08010265
 8010090:	08010265 	.word	0x08010265
 8010094:	08010265 	.word	0x08010265
 8010098:	08010265 	.word	0x08010265
 801009c:	08010265 	.word	0x08010265
 80100a0:	080101f5 	.word	0x080101f5
 80100a4:	080101d5 	.word	0x080101d5
 80100a8:	08010265 	.word	0x08010265
 80100ac:	08010265 	.word	0x08010265
 80100b0:	080101e5 	.word	0x080101e5
 80100b4:	08010265 	.word	0x08010265
 80100b8:	08010265 	.word	0x08010265
 80100bc:	08010265 	.word	0x08010265
 80100c0:	08010265 	.word	0x08010265
 80100c4:	08010215 	.word	0x08010215
 80100c8:	08010265 	.word	0x08010265
 80100cc:	08010225 	.word	0x08010225
 80100d0:	08010265 	.word	0x08010265
 80100d4:	08010265 	.word	0x08010265
 80100d8:	08010235 	.word	0x08010235
 80100dc:	08010265 	.word	0x08010265
 80100e0:	08010245 	.word	0x08010245
 80100e4:	08010265 	.word	0x08010265
 80100e8:	08010265 	.word	0x08010265
 80100ec:	08010265 	.word	0x08010265
 80100f0:	08010265 	.word	0x08010265
 80100f4:	08010255 	.word	0x08010255
 80100f8:	08010265 	.word	0x08010265
 80100fc:	08010265 	.word	0x08010265
 8010100:	08010265 	.word	0x08010265
 8010104:	08010265 	.word	0x08010265
 8010108:	08010265 	.word	0x08010265
 801010c:	08010265 	.word	0x08010265
 8010110:	08010265 	.word	0x08010265
 8010114:	08010265 	.word	0x08010265
 8010118:	08010265 	.word	0x08010265
 801011c:	08010265 	.word	0x08010265
 8010120:	08010265 	.word	0x08010265
 8010124:	08010265 	.word	0x08010265
 8010128:	08010265 	.word	0x08010265
 801012c:	08010265 	.word	0x08010265
 8010130:	08010265 	.word	0x08010265
 8010134:	08010265 	.word	0x08010265
 8010138:	08010265 	.word	0x08010265
 801013c:	08010265 	.word	0x08010265
 8010140:	08010265 	.word	0x08010265
 8010144:	08010265 	.word	0x08010265
 8010148:	08010265 	.word	0x08010265
 801014c:	08010265 	.word	0x08010265
 8010150:	08010265 	.word	0x08010265
 8010154:	08010265 	.word	0x08010265
 8010158:	08010265 	.word	0x08010265
 801015c:	08010265 	.word	0x08010265
 8010160:	08010265 	.word	0x08010265
 8010164:	08010265 	.word	0x08010265
 8010168:	08010265 	.word	0x08010265
 801016c:	08010265 	.word	0x08010265
 8010170:	08010265 	.word	0x08010265
 8010174:	08010265 	.word	0x08010265
 8010178:	08010265 	.word	0x08010265
 801017c:	08010265 	.word	0x08010265
 8010180:	08010265 	.word	0x08010265
 8010184:	08010265 	.word	0x08010265
 8010188:	08010265 	.word	0x08010265
 801018c:	08010265 	.word	0x08010265
 8010190:	08010265 	.word	0x08010265
 8010194:	08010265 	.word	0x08010265
 8010198:	08010265 	.word	0x08010265
 801019c:	08010265 	.word	0x08010265
 80101a0:	08010205 	.word	0x08010205
  {
  case SCSI_TEST_UNIT_READY:
    return SCSI_TestUnitReady(pdev, lun, params);
 80101a4:	7afb      	ldrb	r3, [r7, #11]
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	4619      	mov	r1, r3
 80101aa:	68f8      	ldr	r0, [r7, #12]
 80101ac:	f000 f866 	bl	801027c <SCSI_TestUnitReady>
 80101b0:	4603      	mov	r3, r0
 80101b2:	e05f      	b.n	8010274 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_REQUEST_SENSE:
    return SCSI_RequestSense (pdev, lun, params);
 80101b4:	7afb      	ldrb	r3, [r7, #11]
 80101b6:	687a      	ldr	r2, [r7, #4]
 80101b8:	4619      	mov	r1, r3
 80101ba:	68f8      	ldr	r0, [r7, #12]
 80101bc:	f000 fa1a 	bl	80105f4 <SCSI_RequestSense>
 80101c0:	4603      	mov	r3, r0
 80101c2:	e057      	b.n	8010274 <SCSI_ProcessCmd+0x25c>
  case SCSI_INQUIRY:
    return SCSI_Inquiry(pdev, lun, params);
 80101c4:	7afb      	ldrb	r3, [r7, #11]
 80101c6:	687a      	ldr	r2, [r7, #4]
 80101c8:	4619      	mov	r1, r3
 80101ca:	68f8      	ldr	r0, [r7, #12]
 80101cc:	f000 f894 	bl	80102f8 <SCSI_Inquiry>
 80101d0:	4603      	mov	r3, r0
 80101d2:	e04f      	b.n	8010274 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_START_STOP_UNIT:
    return SCSI_StartStopUnit(pdev, lun, params);
 80101d4:	7afb      	ldrb	r3, [r7, #11]
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	4619      	mov	r1, r3
 80101da:	68f8      	ldr	r0, [r7, #12]
 80101dc:	f000 fad5 	bl	801078a <SCSI_StartStopUnit>
 80101e0:	4603      	mov	r3, r0
 80101e2:	e047      	b.n	8010274 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_ALLOW_MEDIUM_REMOVAL:
    return SCSI_StartStopUnit(pdev, lun, params);
 80101e4:	7afb      	ldrb	r3, [r7, #11]
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	4619      	mov	r1, r3
 80101ea:	68f8      	ldr	r0, [r7, #12]
 80101ec:	f000 facd 	bl	801078a <SCSI_StartStopUnit>
 80101f0:	4603      	mov	r3, r0
 80101f2:	e03f      	b.n	8010274 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_MODE_SENSE6:
    return SCSI_ModeSense6 (pdev, lun, params);
 80101f4:	7afb      	ldrb	r3, [r7, #11]
 80101f6:	687a      	ldr	r2, [r7, #4]
 80101f8:	4619      	mov	r1, r3
 80101fa:	68f8      	ldr	r0, [r7, #12]
 80101fc:	f000 f9aa 	bl	8010554 <SCSI_ModeSense6>
 8010200:	4603      	mov	r3, r0
 8010202:	e037      	b.n	8010274 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_MODE_SENSE10:
    return SCSI_ModeSense10 (pdev, lun, params);
 8010204:	7afb      	ldrb	r3, [r7, #11]
 8010206:	687a      	ldr	r2, [r7, #4]
 8010208:	4619      	mov	r1, r3
 801020a:	68f8      	ldr	r0, [r7, #12]
 801020c:	f000 f9ca 	bl	80105a4 <SCSI_ModeSense10>
 8010210:	4603      	mov	r3, r0
 8010212:	e02f      	b.n	8010274 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_READ_FORMAT_CAPACITIES:
    return SCSI_ReadFormatCapacity(pdev, lun, params);
 8010214:	7afb      	ldrb	r3, [r7, #11]
 8010216:	687a      	ldr	r2, [r7, #4]
 8010218:	4619      	mov	r1, r3
 801021a:	68f8      	ldr	r0, [r7, #12]
 801021c:	f000 f936 	bl	801048c <SCSI_ReadFormatCapacity>
 8010220:	4603      	mov	r3, r0
 8010222:	e027      	b.n	8010274 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_READ_CAPACITY10:
    return SCSI_ReadCapacity10(pdev, lun, params);
 8010224:	7afb      	ldrb	r3, [r7, #11]
 8010226:	687a      	ldr	r2, [r7, #4]
 8010228:	4619      	mov	r1, r3
 801022a:	68f8      	ldr	r0, [r7, #12]
 801022c:	f000 f8b4 	bl	8010398 <SCSI_ReadCapacity10>
 8010230:	4603      	mov	r3, r0
 8010232:	e01f      	b.n	8010274 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_READ10:
    return SCSI_Read10(pdev, lun, params); 
 8010234:	7afb      	ldrb	r3, [r7, #11]
 8010236:	687a      	ldr	r2, [r7, #4]
 8010238:	4619      	mov	r1, r3
 801023a:	68f8      	ldr	r0, [r7, #12]
 801023c:	f000 faba 	bl	80107b4 <SCSI_Read10>
 8010240:	4603      	mov	r3, r0
 8010242:	e017      	b.n	8010274 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_WRITE10:
    return SCSI_Write10(pdev, lun, params);
 8010244:	7afb      	ldrb	r3, [r7, #11]
 8010246:	687a      	ldr	r2, [r7, #4]
 8010248:	4619      	mov	r1, r3
 801024a:	68f8      	ldr	r0, [r7, #12]
 801024c:	f000 fb71 	bl	8010932 <SCSI_Write10>
 8010250:	4603      	mov	r3, r0
 8010252:	e00f      	b.n	8010274 <SCSI_ProcessCmd+0x25c>
    
  case SCSI_VERIFY10:
    return SCSI_Verify10(pdev, lun, params);
 8010254:	7afb      	ldrb	r3, [r7, #11]
 8010256:	687a      	ldr	r2, [r7, #4]
 8010258:	4619      	mov	r1, r3
 801025a:	68f8      	ldr	r0, [r7, #12]
 801025c:	f000 fc4b 	bl	8010af6 <SCSI_Verify10>
 8010260:	4603      	mov	r3, r0
 8010262:	e007      	b.n	8010274 <SCSI_ProcessCmd+0x25c>
    
  default:
    SCSI_SenseCode(pdev, 
 8010264:	7af9      	ldrb	r1, [r7, #11]
 8010266:	2320      	movs	r3, #32
 8010268:	2205      	movs	r2, #5
 801026a:	68f8      	ldr	r0, [r7, #12]
 801026c:	f000 fa42 	bl	80106f4 <SCSI_SenseCode>
                   lun,
                   ILLEGAL_REQUEST, 
                   INVALID_CDB);    
    return -1;
 8010270:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8010274:	4618      	mov	r0, r3
 8010276:	3710      	adds	r7, #16
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}

0801027c <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b086      	sub	sp, #24
 8010280:	af00      	add	r7, sp, #0
 8010282:	60f8      	str	r0, [r7, #12]
 8010284:	460b      	mov	r3, r1
 8010286:	607a      	str	r2, [r7, #4]
 8010288:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010290:	617b      	str	r3, [r7, #20]
    
  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0)
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010298:	3314      	adds	r3, #20
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d00c      	beq.n	80102ba <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev,
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80102a6:	3319      	adds	r3, #25
 80102a8:	7819      	ldrb	r1, [r3, #0]
 80102aa:	2320      	movs	r3, #32
 80102ac:	2205      	movs	r2, #5
 80102ae:	68f8      	ldr	r0, [r7, #12]
 80102b0:	f000 fa20 	bl	80106f4 <SCSI_SenseCode>
                   hmsc->cbw.bLUN, 
                   ILLEGAL_REQUEST, 
                   INVALID_CDB);
    return -1;
 80102b4:	f04f 33ff 	mov.w	r3, #4294967295
 80102b8:	e019      	b.n	80102ee <SCSI_TestUnitReady+0x72>
  }  
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80102c0:	689b      	ldr	r3, [r3, #8]
 80102c2:	7afa      	ldrb	r2, [r7, #11]
 80102c4:	4610      	mov	r0, r2
 80102c6:	4798      	blx	r3
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d00b      	beq.n	80102e6 <SCSI_TestUnitReady+0x6a>
  {
    SCSI_SenseCode(pdev,
 80102ce:	7af9      	ldrb	r1, [r7, #11]
 80102d0:	233a      	movs	r3, #58	; 0x3a
 80102d2:	2202      	movs	r2, #2
 80102d4:	68f8      	ldr	r0, [r7, #12]
 80102d6:	f000 fa0d 	bl	80106f4 <SCSI_SenseCode>
                   lun,
                   NOT_READY, 
                   MEDIUM_NOT_PRESENT);
    
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	2205      	movs	r2, #5
 80102de:	721a      	strb	r2, [r3, #8]
    return -1;
 80102e0:	f04f 33ff 	mov.w	r3, #4294967295
 80102e4:	e003      	b.n	80102ee <SCSI_TestUnitReady+0x72>
  } 
  hmsc->bot_data_length = 0;
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	2200      	movs	r2, #0
 80102ea:	815a      	strh	r2, [r3, #10]
  return 0;
 80102ec:	2300      	movs	r3, #0
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	3718      	adds	r7, #24
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
	...

080102f8 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80102f8:	b480      	push	{r7}
 80102fa:	b089      	sub	sp, #36	; 0x24
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	60f8      	str	r0, [r7, #12]
 8010300:	460b      	mov	r3, r1
 8010302:	607a      	str	r2, [r7, #4]
 8010304:	72fb      	strb	r3, [r7, #11]
  uint8_t* pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801030c:	617b      	str	r3, [r7, #20]
  
  if (params[1] & 0x01)/*Evpd is set*/
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	3301      	adds	r3, #1
 8010312:	781b      	ldrb	r3, [r3, #0]
 8010314:	f003 0301 	and.w	r3, r3, #1
 8010318:	2b00      	cmp	r3, #0
 801031a:	d004      	beq.n	8010326 <SCSI_Inquiry+0x2e>
  {
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 801031c:	4b1d      	ldr	r3, [pc, #116]	; (8010394 <SCSI_Inquiry+0x9c>)
 801031e:	61fb      	str	r3, [r7, #28]
    len = LENGTH_INQUIRY_PAGE00;
 8010320:	2307      	movs	r3, #7
 8010322:	837b      	strh	r3, [r7, #26]
 8010324:	e01b      	b.n	801035e <SCSI_Inquiry+0x66>
  }
  else
  {
    
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801032c:	69d9      	ldr	r1, [r3, #28]
 801032e:	7afa      	ldrb	r2, [r7, #11]
 8010330:	4613      	mov	r3, r2
 8010332:	00db      	lsls	r3, r3, #3
 8010334:	4413      	add	r3, r2
 8010336:	009b      	lsls	r3, r3, #2
 8010338:	440b      	add	r3, r1
 801033a:	61fb      	str	r3, [r7, #28]
    len = pPage[4] + 5;
 801033c:	69fb      	ldr	r3, [r7, #28]
 801033e:	3304      	adds	r3, #4
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	b29b      	uxth	r3, r3
 8010344:	3305      	adds	r3, #5
 8010346:	837b      	strh	r3, [r7, #26]
    
    if (params[4] <= len)
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	3304      	adds	r3, #4
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	b29b      	uxth	r3, r3
 8010350:	8b7a      	ldrh	r2, [r7, #26]
 8010352:	429a      	cmp	r2, r3
 8010354:	d303      	bcc.n	801035e <SCSI_Inquiry+0x66>
    {
      len = params[4];
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	3304      	adds	r3, #4
 801035a:	781b      	ldrb	r3, [r3, #0]
 801035c:	837b      	strh	r3, [r7, #26]
    }
  }
  hmsc->bot_data_length = len;
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	8b7a      	ldrh	r2, [r7, #26]
 8010362:	815a      	strh	r2, [r3, #10]
  
  while (len) 
 8010364:	e00b      	b.n	801037e <SCSI_Inquiry+0x86>
  {
    len--;
 8010366:	8b7b      	ldrh	r3, [r7, #26]
 8010368:	3b01      	subs	r3, #1
 801036a:	837b      	strh	r3, [r7, #26]
    hmsc->bot_data[len] = pPage[len];
 801036c:	8b7b      	ldrh	r3, [r7, #26]
 801036e:	8b7a      	ldrh	r2, [r7, #26]
 8010370:	69f9      	ldr	r1, [r7, #28]
 8010372:	440a      	add	r2, r1
 8010374:	7811      	ldrb	r1, [r2, #0]
 8010376:	697a      	ldr	r2, [r7, #20]
 8010378:	4413      	add	r3, r2
 801037a:	460a      	mov	r2, r1
 801037c:	731a      	strb	r2, [r3, #12]
  while (len) 
 801037e:	8b7b      	ldrh	r3, [r7, #26]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d1f0      	bne.n	8010366 <SCSI_Inquiry+0x6e>
  }
  return 0;
 8010384:	2300      	movs	r3, #0
}
 8010386:	4618      	mov	r0, r3
 8010388:	3724      	adds	r7, #36	; 0x24
 801038a:	46bd      	mov	sp, r7
 801038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010390:	4770      	bx	lr
 8010392:	bf00      	nop
 8010394:	08017ce4 	.word	0x08017ce4

08010398 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8010398:	b590      	push	{r4, r7, lr}
 801039a:	b087      	sub	sp, #28
 801039c:	af00      	add	r7, sp, #0
 801039e:	60f8      	str	r0, [r7, #12]
 80103a0:	460b      	mov	r3, r1
 80103a2:	607a      	str	r2, [r7, #4]
 80103a4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80103ac:	617b      	str	r3, [r7, #20]
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80103b4:	685c      	ldr	r4, [r3, #4]
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80103bc:	3320      	adds	r3, #32
 80103be:	697a      	ldr	r2, [r7, #20]
 80103c0:	f502 5201 	add.w	r2, r2, #8256	; 0x2040
 80103c4:	321e      	adds	r2, #30
 80103c6:	7af8      	ldrb	r0, [r7, #11]
 80103c8:	4619      	mov	r1, r3
 80103ca:	47a0      	blx	r4
 80103cc:	4603      	mov	r3, r0
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d008      	beq.n	80103e4 <SCSI_ReadCapacity10+0x4c>
  {
    SCSI_SenseCode(pdev,
 80103d2:	7af9      	ldrb	r1, [r7, #11]
 80103d4:	233a      	movs	r3, #58	; 0x3a
 80103d6:	2202      	movs	r2, #2
 80103d8:	68f8      	ldr	r0, [r7, #12]
 80103da:	f000 f98b 	bl	80106f4 <SCSI_SenseCode>
                   lun,
                   NOT_READY, 
                   MEDIUM_NOT_PRESENT);
    return -1;
 80103de:	f04f 33ff 	mov.w	r3, #4294967295
 80103e2:	e04f      	b.n	8010484 <SCSI_ReadCapacity10+0xec>
  } 
  else
  {
    
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80103ea:	3320      	adds	r3, #32
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	3b01      	subs	r3, #1
 80103f0:	0e1b      	lsrs	r3, r3, #24
 80103f2:	b2da      	uxtb	r2, r3
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80103fe:	3320      	adds	r3, #32
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	3b01      	subs	r3, #1
 8010404:	0c1b      	lsrs	r3, r3, #16
 8010406:	b2da      	uxtb	r2, r3
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010412:	3320      	adds	r3, #32
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	3b01      	subs	r3, #1
 8010418:	0a1b      	lsrs	r3, r3, #8
 801041a:	b2da      	uxtb	r2, r3
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 8010420:	697b      	ldr	r3, [r7, #20]
 8010422:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010426:	3320      	adds	r3, #32
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	b2db      	uxtb	r3, r3
 801042c:	3b01      	subs	r3, #1
 801042e:	b2da      	uxtb	r2, r3
 8010430:	697b      	ldr	r3, [r7, #20]
 8010432:	73da      	strb	r2, [r3, #15]
    
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 801043a:	331e      	adds	r3, #30
 801043c:	881b      	ldrh	r3, [r3, #0]
 801043e:	161b      	asrs	r3, r3, #24
 8010440:	b2da      	uxtb	r2, r3
 8010442:	697b      	ldr	r3, [r7, #20]
 8010444:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 801044c:	331e      	adds	r3, #30
 801044e:	881b      	ldrh	r3, [r3, #0]
 8010450:	141b      	asrs	r3, r3, #16
 8010452:	b2da      	uxtb	r2, r3
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8010458:	697b      	ldr	r3, [r7, #20]
 801045a:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 801045e:	331e      	adds	r3, #30
 8010460:	881b      	ldrh	r3, [r3, #0]
 8010462:	0a1b      	lsrs	r3, r3, #8
 8010464:	b29b      	uxth	r3, r3
 8010466:	b2da      	uxtb	r2, r3
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801046c:	697b      	ldr	r3, [r7, #20]
 801046e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010472:	331e      	adds	r3, #30
 8010474:	881b      	ldrh	r3, [r3, #0]
 8010476:	b2da      	uxtb	r2, r3
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	74da      	strb	r2, [r3, #19]
    
    hmsc->bot_data_length = 8;
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	2208      	movs	r2, #8
 8010480:	815a      	strh	r2, [r3, #10]
    return 0;
 8010482:	2300      	movs	r3, #0
  }
}
 8010484:	4618      	mov	r0, r3
 8010486:	371c      	adds	r7, #28
 8010488:	46bd      	mov	sp, r7
 801048a:	bd90      	pop	{r4, r7, pc}

0801048c <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b088      	sub	sp, #32
 8010490:	af00      	add	r7, sp, #0
 8010492:	60f8      	str	r0, [r7, #12]
 8010494:	460b      	mov	r3, r1
 8010496:	607a      	str	r2, [r7, #4]
 8010498:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80104a0:	61bb      	str	r3, [r7, #24]
  
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  
  for(i=0 ; i < 12 ; i++) 
 80104a2:	2300      	movs	r3, #0
 80104a4:	83fb      	strh	r3, [r7, #30]
 80104a6:	e007      	b.n	80104b8 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0;
 80104a8:	8bfb      	ldrh	r3, [r7, #30]
 80104aa:	69ba      	ldr	r2, [r7, #24]
 80104ac:	4413      	add	r3, r2
 80104ae:	2200      	movs	r2, #0
 80104b0:	731a      	strb	r2, [r3, #12]
  for(i=0 ; i < 12 ; i++) 
 80104b2:	8bfb      	ldrh	r3, [r7, #30]
 80104b4:	3301      	adds	r3, #1
 80104b6:	83fb      	strh	r3, [r7, #30]
 80104b8:	8bfb      	ldrh	r3, [r7, #30]
 80104ba:	2b0b      	cmp	r3, #11
 80104bc:	d9f4      	bls.n	80104a8 <SCSI_ReadFormatCapacity+0x1c>
  }
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80104c4:	685b      	ldr	r3, [r3, #4]
 80104c6:	f107 0216 	add.w	r2, r7, #22
 80104ca:	f107 0110 	add.w	r1, r7, #16
 80104ce:	7af8      	ldrb	r0, [r7, #11]
 80104d0:	4798      	blx	r3
 80104d2:	4603      	mov	r3, r0
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d008      	beq.n	80104ea <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev,
 80104d8:	7af9      	ldrb	r1, [r7, #11]
 80104da:	233a      	movs	r3, #58	; 0x3a
 80104dc:	2202      	movs	r2, #2
 80104de:	68f8      	ldr	r0, [r7, #12]
 80104e0:	f000 f908 	bl	80106f4 <SCSI_SenseCode>
                   lun,
                   NOT_READY, 
                   MEDIUM_NOT_PRESENT);
    return -1;
 80104e4:	f04f 33ff 	mov.w	r3, #4294967295
 80104e8:	e030      	b.n	801054c <SCSI_ReadFormatCapacity+0xc0>
  } 
  else
  {
    hmsc->bot_data[3] = 0x08;
 80104ea:	69bb      	ldr	r3, [r7, #24]
 80104ec:	2208      	movs	r2, #8
 80104ee:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	3b01      	subs	r3, #1
 80104f4:	0e1b      	lsrs	r3, r3, #24
 80104f6:	b2da      	uxtb	r2, r3
 80104f8:	69bb      	ldr	r3, [r7, #24]
 80104fa:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	3b01      	subs	r3, #1
 8010500:	0c1b      	lsrs	r3, r3, #16
 8010502:	b2da      	uxtb	r2, r3
 8010504:	69bb      	ldr	r3, [r7, #24]
 8010506:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	3b01      	subs	r3, #1
 801050c:	0a1b      	lsrs	r3, r3, #8
 801050e:	b2da      	uxtb	r2, r3
 8010510:	69bb      	ldr	r3, [r7, #24]
 8010512:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	b2db      	uxtb	r3, r3
 8010518:	3b01      	subs	r3, #1
 801051a:	b2da      	uxtb	r2, r3
 801051c:	69bb      	ldr	r3, [r7, #24]
 801051e:	74da      	strb	r2, [r3, #19]
    
    hmsc->bot_data[8] = 0x02;
 8010520:	69bb      	ldr	r3, [r7, #24]
 8010522:	2202      	movs	r2, #2
 8010524:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8010526:	8afb      	ldrh	r3, [r7, #22]
 8010528:	141b      	asrs	r3, r3, #16
 801052a:	b2da      	uxtb	r2, r3
 801052c:	69bb      	ldr	r3, [r7, #24]
 801052e:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8010530:	8afb      	ldrh	r3, [r7, #22]
 8010532:	0a1b      	lsrs	r3, r3, #8
 8010534:	b29b      	uxth	r3, r3
 8010536:	b2da      	uxtb	r2, r3
 8010538:	69bb      	ldr	r3, [r7, #24]
 801053a:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 801053c:	8afb      	ldrh	r3, [r7, #22]
 801053e:	b2da      	uxtb	r2, r3
 8010540:	69bb      	ldr	r3, [r7, #24]
 8010542:	75da      	strb	r2, [r3, #23]
    
    hmsc->bot_data_length = 12;
 8010544:	69bb      	ldr	r3, [r7, #24]
 8010546:	220c      	movs	r2, #12
 8010548:	815a      	strh	r2, [r3, #10]
    return 0;
 801054a:	2300      	movs	r3, #0
  }
}
 801054c:	4618      	mov	r0, r3
 801054e:	3720      	adds	r7, #32
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8010554:	b480      	push	{r7}
 8010556:	b087      	sub	sp, #28
 8010558:	af00      	add	r7, sp, #0
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	460b      	mov	r3, r1
 801055e:	607a      	str	r2, [r7, #4]
 8010560:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010568:	613b      	str	r3, [r7, #16]
  uint16_t len = 8 ;
 801056a:	2308      	movs	r3, #8
 801056c:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	8afa      	ldrh	r2, [r7, #22]
 8010572:	815a      	strh	r2, [r3, #10]
  
  while (len) 
 8010574:	e00a      	b.n	801058c <SCSI_ModeSense6+0x38>
  {
    len--;
 8010576:	8afb      	ldrh	r3, [r7, #22]
 8010578:	3b01      	subs	r3, #1
 801057a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 801057c:	8afb      	ldrh	r3, [r7, #22]
 801057e:	8afa      	ldrh	r2, [r7, #22]
 8010580:	4907      	ldr	r1, [pc, #28]	; (80105a0 <SCSI_ModeSense6+0x4c>)
 8010582:	5c89      	ldrb	r1, [r1, r2]
 8010584:	693a      	ldr	r2, [r7, #16]
 8010586:	4413      	add	r3, r2
 8010588:	460a      	mov	r2, r1
 801058a:	731a      	strb	r2, [r3, #12]
  while (len) 
 801058c:	8afb      	ldrh	r3, [r7, #22]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d1f1      	bne.n	8010576 <SCSI_ModeSense6+0x22>
  }
  return 0;
 8010592:	2300      	movs	r3, #0
}
 8010594:	4618      	mov	r0, r3
 8010596:	371c      	adds	r7, #28
 8010598:	46bd      	mov	sp, r7
 801059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059e:	4770      	bx	lr
 80105a0:	08017cec 	.word	0x08017cec

080105a4 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10 (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80105a4:	b480      	push	{r7}
 80105a6:	b087      	sub	sp, #28
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	60f8      	str	r0, [r7, #12]
 80105ac:	460b      	mov	r3, r1
 80105ae:	607a      	str	r2, [r7, #4]
 80105b0:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8;
 80105b2:	2308      	movs	r3, #8
 80105b4:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80105bc:	613b      	str	r3, [r7, #16]
  
  hmsc->bot_data_length = len;
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	8afa      	ldrh	r2, [r7, #22]
 80105c2:	815a      	strh	r2, [r3, #10]

  while (len) 
 80105c4:	e00a      	b.n	80105dc <SCSI_ModeSense10+0x38>
  {
    len--;
 80105c6:	8afb      	ldrh	r3, [r7, #22]
 80105c8:	3b01      	subs	r3, #1
 80105ca:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80105cc:	8afb      	ldrh	r3, [r7, #22]
 80105ce:	8afa      	ldrh	r2, [r7, #22]
 80105d0:	4907      	ldr	r1, [pc, #28]	; (80105f0 <SCSI_ModeSense10+0x4c>)
 80105d2:	5c89      	ldrb	r1, [r1, r2]
 80105d4:	693a      	ldr	r2, [r7, #16]
 80105d6:	4413      	add	r3, r2
 80105d8:	460a      	mov	r2, r1
 80105da:	731a      	strb	r2, [r3, #12]
  while (len) 
 80105dc:	8afb      	ldrh	r3, [r7, #22]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d1f1      	bne.n	80105c6 <SCSI_ModeSense10+0x22>
  }
  return 0;
 80105e2:	2300      	movs	r3, #0
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	371c      	adds	r7, #28
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr
 80105f0:	08017cf4 	.word	0x08017cf4

080105f4 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense (USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80105f4:	b480      	push	{r7}
 80105f6:	b087      	sub	sp, #28
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	60f8      	str	r0, [r7, #12]
 80105fc:	460b      	mov	r3, r1
 80105fe:	607a      	str	r2, [r7, #4]
 8010600:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010608:	613b      	str	r3, [r7, #16]
  
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 801060a:	2300      	movs	r3, #0
 801060c:	75fb      	strb	r3, [r7, #23]
 801060e:	e007      	b.n	8010620 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0;
 8010610:	7dfb      	ldrb	r3, [r7, #23]
 8010612:	693a      	ldr	r2, [r7, #16]
 8010614:	4413      	add	r3, r2
 8010616:	2200      	movs	r2, #0
 8010618:	731a      	strb	r2, [r3, #12]
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 801061a:	7dfb      	ldrb	r3, [r7, #23]
 801061c:	3301      	adds	r3, #1
 801061e:	75fb      	strb	r3, [r7, #23]
 8010620:	7dfb      	ldrb	r3, [r7, #23]
 8010622:	2b11      	cmp	r3, #17
 8010624:	d9f4      	bls.n	8010610 <SCSI_RequestSense+0x1c>
  }
  
  hmsc->bot_data[0]	= 0x70;		
 8010626:	693b      	ldr	r3, [r7, #16]
 8010628:	2270      	movs	r2, #112	; 0x70
 801062a:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	220c      	movs	r2, #12
 8010630:	74da      	strb	r2, [r3, #19]
  
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8010632:	693b      	ldr	r3, [r7, #16]
 8010634:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010638:	331c      	adds	r3, #28
 801063a:	781a      	ldrb	r2, [r3, #0]
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010642:	331d      	adds	r3, #29
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	429a      	cmp	r2, r3
 8010648:	d03f      	beq.n	80106ca <SCSI_RequestSense+0xd6>
    
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 801064a:	693b      	ldr	r3, [r7, #16]
 801064c:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010650:	331c      	adds	r3, #28
 8010652:	781b      	ldrb	r3, [r3, #0]
 8010654:	693a      	ldr	r2, [r7, #16]
 8010656:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801065a:	00db      	lsls	r3, r3, #3
 801065c:	4413      	add	r3, r2
 801065e:	791a      	ldrb	r2, [r3, #4]
 8010660:	693b      	ldr	r3, [r7, #16]
 8010662:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 801066a:	331c      	adds	r3, #28
 801066c:	781b      	ldrb	r3, [r3, #0]
 801066e:	693a      	ldr	r2, [r7, #16]
 8010670:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010674:	00db      	lsls	r3, r3, #3
 8010676:	4413      	add	r3, r2
 8010678:	7a5a      	ldrb	r2, [r3, #9]
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 801067e:	693b      	ldr	r3, [r7, #16]
 8010680:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010684:	331c      	adds	r3, #28
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	693a      	ldr	r2, [r7, #16]
 801068a:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801068e:	00db      	lsls	r3, r3, #3
 8010690:	4413      	add	r3, r2
 8010692:	7a1a      	ldrb	r2, [r3, #8]
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 801069e:	331c      	adds	r3, #28
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	3301      	adds	r3, #1
 80106a4:	b2da      	uxtb	r2, r3
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80106ac:	331c      	adds	r3, #28
 80106ae:	701a      	strb	r2, [r3, #0]
    
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80106b6:	331c      	adds	r3, #28
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	2b04      	cmp	r3, #4
 80106bc:	d105      	bne.n	80106ca <SCSI_RequestSense+0xd6>
    {
      hmsc->scsi_sense_head = 0;
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80106c4:	331c      	adds	r3, #28
 80106c6:	2200      	movs	r2, #0
 80106c8:	701a      	strb	r2, [r3, #0]
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	2212      	movs	r2, #18
 80106ce:	815a      	strh	r2, [r3, #10]
  
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	3304      	adds	r3, #4
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	2b12      	cmp	r3, #18
 80106d8:	d805      	bhi.n	80106e6 <SCSI_RequestSense+0xf2>
  {
    hmsc->bot_data_length = params[4];
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	3304      	adds	r3, #4
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	b29a      	uxth	r2, r3
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 80106e6:	2300      	movs	r3, #0
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	371c      	adds	r7, #28
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr

080106f4 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b085      	sub	sp, #20
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
 80106fc:	4608      	mov	r0, r1
 80106fe:	4611      	mov	r1, r2
 8010700:	461a      	mov	r2, r3
 8010702:	4603      	mov	r3, r0
 8010704:	70fb      	strb	r3, [r7, #3]
 8010706:	460b      	mov	r3, r1
 8010708:	70bb      	strb	r3, [r7, #2]
 801070a:	4613      	mov	r3, r2
 801070c:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010714:	60fb      	str	r3, [r7, #12]
  
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 801071c:	331d      	adds	r3, #29
 801071e:	781b      	ldrb	r3, [r3, #0]
 8010720:	68fa      	ldr	r2, [r7, #12]
 8010722:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010726:	00db      	lsls	r3, r3, #3
 8010728:	4413      	add	r3, r2
 801072a:	78ba      	ldrb	r2, [r7, #2]
 801072c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010734:	331d      	adds	r3, #29
 8010736:	781b      	ldrb	r3, [r3, #0]
 8010738:	4618      	mov	r0, r3
 801073a:	787b      	ldrb	r3, [r7, #1]
 801073c:	021b      	lsls	r3, r3, #8
 801073e:	4619      	mov	r1, r3
 8010740:	68fa      	ldr	r2, [r7, #12]
 8010742:	f200 4307 	addw	r3, r0, #1031	; 0x407
 8010746:	00db      	lsls	r3, r3, #3
 8010748:	4413      	add	r3, r2
 801074a:	6099      	str	r1, [r3, #8]
  hmsc->scsi_sense_tail++;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010752:	331d      	adds	r3, #29
 8010754:	781b      	ldrb	r3, [r3, #0]
 8010756:	3301      	adds	r3, #1
 8010758:	b2da      	uxtb	r2, r3
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010760:	331d      	adds	r3, #29
 8010762:	701a      	strb	r2, [r3, #0]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 801076a:	331d      	adds	r3, #29
 801076c:	781b      	ldrb	r3, [r3, #0]
 801076e:	2b04      	cmp	r3, #4
 8010770:	d105      	bne.n	801077e <SCSI_SenseCode+0x8a>
  {
    hmsc->scsi_sense_tail = 0;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010778:	331d      	adds	r3, #29
 801077a:	2200      	movs	r2, #0
 801077c:	701a      	strb	r2, [r3, #0]
  }
}
 801077e:	bf00      	nop
 8010780:	3714      	adds	r7, #20
 8010782:	46bd      	mov	sp, r7
 8010784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010788:	4770      	bx	lr

0801078a <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 801078a:	b480      	push	{r7}
 801078c:	b087      	sub	sp, #28
 801078e:	af00      	add	r7, sp, #0
 8010790:	60f8      	str	r0, [r7, #12]
 8010792:	460b      	mov	r3, r1
 8010794:	607a      	str	r2, [r7, #4]
 8010796:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801079e:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0;
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	2200      	movs	r2, #0
 80107a4:	815a      	strh	r2, [r3, #10]
  return 0;
 80107a6:	2300      	movs	r3, #0
}
 80107a8:	4618      	mov	r0, r3
 80107aa:	371c      	adds	r7, #28
 80107ac:	46bd      	mov	sp, r7
 80107ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b2:	4770      	bx	lr

080107b4 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b086      	sub	sp, #24
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	460b      	mov	r3, r1
 80107be:	607a      	str	r2, [r7, #4]
 80107c0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80107c8:	617b      	str	r3, [r7, #20]
  
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	7a1b      	ldrb	r3, [r3, #8]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	f040 80a1 	bne.w	8010916 <SCSI_Read10+0x162>
  {
    
    /* case 10 : Ho <> Di */
    
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80107da:	3318      	adds	r3, #24
 80107dc:	781b      	ldrb	r3, [r3, #0]
 80107de:	b25b      	sxtb	r3, r3
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	db0c      	blt.n	80107fe <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev,
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80107ea:	3319      	adds	r3, #25
 80107ec:	7819      	ldrb	r1, [r3, #0]
 80107ee:	2320      	movs	r3, #32
 80107f0:	2205      	movs	r2, #5
 80107f2:	68f8      	ldr	r0, [r7, #12]
 80107f4:	f7ff ff7e 	bl	80106f4 <SCSI_SenseCode>
                     hmsc->cbw.bLUN, 
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 80107f8:	f04f 33ff 	mov.w	r3, #4294967295
 80107fc:	e095      	b.n	801092a <SCSI_Read10+0x176>
    }    
    
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8010804:	689b      	ldr	r3, [r3, #8]
 8010806:	7afa      	ldrb	r2, [r7, #11]
 8010808:	4610      	mov	r0, r2
 801080a:	4798      	blx	r3
 801080c:	4603      	mov	r3, r0
 801080e:	2b00      	cmp	r3, #0
 8010810:	d008      	beq.n	8010824 <SCSI_Read10+0x70>
    {
      SCSI_SenseCode(pdev,
 8010812:	7af9      	ldrb	r1, [r7, #11]
 8010814:	233a      	movs	r3, #58	; 0x3a
 8010816:	2202      	movs	r2, #2
 8010818:	68f8      	ldr	r0, [r7, #12]
 801081a:	f7ff ff6b 	bl	80106f4 <SCSI_SenseCode>
                     lun,
                     NOT_READY, 
                     MEDIUM_NOT_PRESENT);
      return -1;
 801081e:	f04f 33ff 	mov.w	r3, #4294967295
 8010822:	e082      	b.n	801092a <SCSI_Read10+0x176>
    } 
    
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	3302      	adds	r3, #2
 8010828:	781b      	ldrb	r3, [r3, #0]
 801082a:	061a      	lsls	r2, r3, #24
      (params[3] << 16) | \
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	3303      	adds	r3, #3
 8010830:	781b      	ldrb	r3, [r3, #0]
 8010832:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8010834:	431a      	orrs	r2, r3
        (params[4] <<  8) | \
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	3304      	adds	r3, #4
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	021b      	lsls	r3, r3, #8
      (params[3] << 16) | \
 801083e:	4313      	orrs	r3, r2
          params[5];
 8010840:	687a      	ldr	r2, [r7, #4]
 8010842:	3205      	adds	r2, #5
 8010844:	7812      	ldrb	r2, [r2, #0]
        (params[4] <<  8) | \
 8010846:	4313      	orrs	r3, r2
 8010848:	461a      	mov	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010850:	3324      	adds	r3, #36	; 0x24
 8010852:	601a      	str	r2, [r3, #0]
    
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	3307      	adds	r3, #7
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	021b      	lsls	r3, r3, #8
      params[8];  
 801085c:	687a      	ldr	r2, [r7, #4]
 801085e:	3208      	adds	r2, #8
 8010860:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8010862:	4313      	orrs	r3, r2
 8010864:	461a      	mov	r2, r3
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 801086c:	3328      	adds	r3, #40	; 0x28
 801086e:	601a      	str	r2, [r3, #0]
    
    
    
    if( SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010876:	3324      	adds	r3, #36	; 0x24
 8010878:	681a      	ldr	r2, [r3, #0]
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010880:	3328      	adds	r3, #40	; 0x28
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	b29b      	uxth	r3, r3
 8010886:	7af9      	ldrb	r1, [r7, #11]
 8010888:	68f8      	ldr	r0, [r7, #12]
 801088a:	f000 f96c 	bl	8010b66 <SCSI_CheckAddressRange>
 801088e:	4603      	mov	r3, r0
 8010890:	2b00      	cmp	r3, #0
 8010892:	da02      	bge.n	801089a <SCSI_Read10+0xe6>
    {
      return -1; /* error */
 8010894:	f04f 33ff 	mov.w	r3, #4294967295
 8010898:	e047      	b.n	801092a <SCSI_Read10+0x176>
    }
    
    hmsc->bot_state = USBD_BOT_DATA_IN;
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	2202      	movs	r2, #2
 801089e:	721a      	strb	r2, [r3, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80108a6:	3324      	adds	r3, #36	; 0x24
 80108a8:	681a      	ldr	r2, [r3, #0]
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80108b0:	331e      	adds	r3, #30
 80108b2:	881b      	ldrh	r3, [r3, #0]
 80108b4:	fb03 f202 	mul.w	r2, r3, r2
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80108be:	3324      	adds	r3, #36	; 0x24
 80108c0:	601a      	str	r2, [r3, #0]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80108c8:	3328      	adds	r3, #40	; 0x28
 80108ca:	681a      	ldr	r2, [r3, #0]
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80108d2:	331e      	adds	r3, #30
 80108d4:	881b      	ldrh	r3, [r3, #0]
 80108d6:	fb03 f202 	mul.w	r2, r3, r2
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80108e0:	3328      	adds	r3, #40	; 0x28
 80108e2:	601a      	str	r2, [r3, #0]
    
    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80108ea:	3314      	adds	r3, #20
 80108ec:	681a      	ldr	r2, [r3, #0]
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80108f4:	3328      	adds	r3, #40	; 0x28
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d00c      	beq.n	8010916 <SCSI_Read10+0x162>
    {
      SCSI_SenseCode(pdev,
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010902:	3319      	adds	r3, #25
 8010904:	7819      	ldrb	r1, [r3, #0]
 8010906:	2320      	movs	r3, #32
 8010908:	2205      	movs	r2, #5
 801090a:	68f8      	ldr	r0, [r7, #12]
 801090c:	f7ff fef2 	bl	80106f4 <SCSI_SenseCode>
                     hmsc->cbw.bLUN, 
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 8010910:	f04f 33ff 	mov.w	r3, #4294967295
 8010914:	e009      	b.n	801092a <SCSI_Read10+0x176>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801091c:	815a      	strh	r2, [r3, #10]
  
  return SCSI_ProcessRead(pdev, lun);
 801091e:	7afb      	ldrb	r3, [r7, #11]
 8010920:	4619      	mov	r1, r3
 8010922:	68f8      	ldr	r0, [r7, #12]
 8010924:	f000 f945 	bl	8010bb2 <SCSI_ProcessRead>
 8010928:	4603      	mov	r3, r0
}
 801092a:	4618      	mov	r0, r3
 801092c:	3718      	adds	r7, #24
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}

08010932 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10 (USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 8010932:	b580      	push	{r7, lr}
 8010934:	b086      	sub	sp, #24
 8010936:	af00      	add	r7, sp, #0
 8010938:	60f8      	str	r0, [r7, #12]
 801093a:	460b      	mov	r3, r1
 801093c:	607a      	str	r2, [r7, #4]
 801093e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010946:	617b      	str	r3, [r7, #20]
  
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	7a1b      	ldrb	r3, [r3, #8]
 801094c:	2b00      	cmp	r3, #0
 801094e:	f040 80c8 	bne.w	8010ae2 <SCSI_Write10+0x1b0>
  {
    
    /* case 8 : Hi <> Do */
    
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010958:	3318      	adds	r3, #24
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	b25b      	sxtb	r3, r3
 801095e:	2b00      	cmp	r3, #0
 8010960:	da0c      	bge.n	801097c <SCSI_Write10+0x4a>
    {
      SCSI_SenseCode(pdev,
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010968:	3319      	adds	r3, #25
 801096a:	7819      	ldrb	r1, [r3, #0]
 801096c:	2320      	movs	r3, #32
 801096e:	2205      	movs	r2, #5
 8010970:	68f8      	ldr	r0, [r7, #12]
 8010972:	f7ff febf 	bl	80106f4 <SCSI_SenseCode>
                     hmsc->cbw.bLUN, 
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 8010976:	f04f 33ff 	mov.w	r3, #4294967295
 801097a:	e0b8      	b.n	8010aee <SCSI_Write10+0x1bc>
    }
    
    /* Check whether Media is ready */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8010982:	689b      	ldr	r3, [r3, #8]
 8010984:	7afa      	ldrb	r2, [r7, #11]
 8010986:	4610      	mov	r0, r2
 8010988:	4798      	blx	r3
 801098a:	4603      	mov	r3, r0
 801098c:	2b00      	cmp	r3, #0
 801098e:	d008      	beq.n	80109a2 <SCSI_Write10+0x70>
    {
      SCSI_SenseCode(pdev,
 8010990:	7af9      	ldrb	r1, [r7, #11]
 8010992:	233a      	movs	r3, #58	; 0x3a
 8010994:	2202      	movs	r2, #2
 8010996:	68f8      	ldr	r0, [r7, #12]
 8010998:	f7ff feac 	bl	80106f4 <SCSI_SenseCode>
                     lun,
                     NOT_READY, 
                     MEDIUM_NOT_PRESENT);
      return -1;
 801099c:	f04f 33ff 	mov.w	r3, #4294967295
 80109a0:	e0a5      	b.n	8010aee <SCSI_Write10+0x1bc>
    } 
    
    /* Check If media is write-protected */
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80109a8:	68db      	ldr	r3, [r3, #12]
 80109aa:	7afa      	ldrb	r2, [r7, #11]
 80109ac:	4610      	mov	r0, r2
 80109ae:	4798      	blx	r3
 80109b0:	4603      	mov	r3, r0
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d008      	beq.n	80109c8 <SCSI_Write10+0x96>
    {
      SCSI_SenseCode(pdev,
 80109b6:	7af9      	ldrb	r1, [r7, #11]
 80109b8:	2327      	movs	r3, #39	; 0x27
 80109ba:	2202      	movs	r2, #2
 80109bc:	68f8      	ldr	r0, [r7, #12]
 80109be:	f7ff fe99 	bl	80106f4 <SCSI_SenseCode>
                     lun,
                     NOT_READY, 
                     WRITE_PROTECTED);
      return -1;
 80109c2:	f04f 33ff 	mov.w	r3, #4294967295
 80109c6:	e092      	b.n	8010aee <SCSI_Write10+0x1bc>
    } 
    
    
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	3302      	adds	r3, #2
 80109cc:	781b      	ldrb	r3, [r3, #0]
 80109ce:	061a      	lsls	r2, r3, #24
      (params[3] << 16) | \
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	3303      	adds	r3, #3
 80109d4:	781b      	ldrb	r3, [r3, #0]
 80109d6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80109d8:	431a      	orrs	r2, r3
        (params[4] <<  8) | \
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	3304      	adds	r3, #4
 80109de:	781b      	ldrb	r3, [r3, #0]
 80109e0:	021b      	lsls	r3, r3, #8
      (params[3] << 16) | \
 80109e2:	4313      	orrs	r3, r2
          params[5];
 80109e4:	687a      	ldr	r2, [r7, #4]
 80109e6:	3205      	adds	r2, #5
 80109e8:	7812      	ldrb	r2, [r2, #0]
        (params[4] <<  8) | \
 80109ea:	4313      	orrs	r3, r2
 80109ec:	461a      	mov	r2, r3
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80109f4:	3324      	adds	r3, #36	; 0x24
 80109f6:	601a      	str	r2, [r3, #0]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	3307      	adds	r3, #7
 80109fc:	781b      	ldrb	r3, [r3, #0]
 80109fe:	021b      	lsls	r3, r3, #8
      params[8];  
 8010a00:	687a      	ldr	r2, [r7, #4]
 8010a02:	3208      	adds	r2, #8
 8010a04:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8010a06:	4313      	orrs	r3, r2
 8010a08:	461a      	mov	r2, r3
 8010a0a:	697b      	ldr	r3, [r7, #20]
 8010a0c:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010a10:	3328      	adds	r3, #40	; 0x28
 8010a12:	601a      	str	r2, [r3, #0]
    
    /* check if LBA address is in the right range */
    if(SCSI_CheckAddressRange(pdev,
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010a1a:	3324      	adds	r3, #36	; 0x24
 8010a1c:	681a      	ldr	r2, [r3, #0]
                              lun,
                              hmsc->scsi_blk_addr,
                              hmsc->scsi_blk_len) < 0)
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010a24:	3328      	adds	r3, #40	; 0x28
 8010a26:	681b      	ldr	r3, [r3, #0]
    if(SCSI_CheckAddressRange(pdev,
 8010a28:	b29b      	uxth	r3, r3
 8010a2a:	7af9      	ldrb	r1, [r7, #11]
 8010a2c:	68f8      	ldr	r0, [r7, #12]
 8010a2e:	f000 f89a 	bl	8010b66 <SCSI_CheckAddressRange>
 8010a32:	4603      	mov	r3, r0
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	da02      	bge.n	8010a3e <SCSI_Write10+0x10c>
    {
      return -1; /* error */      
 8010a38:	f04f 33ff 	mov.w	r3, #4294967295
 8010a3c:	e057      	b.n	8010aee <SCSI_Write10+0x1bc>
    }
    
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010a44:	3324      	adds	r3, #36	; 0x24
 8010a46:	681a      	ldr	r2, [r3, #0]
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010a4e:	331e      	adds	r3, #30
 8010a50:	881b      	ldrh	r3, [r3, #0]
 8010a52:	fb03 f202 	mul.w	r2, r3, r2
 8010a56:	697b      	ldr	r3, [r7, #20]
 8010a58:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010a5c:	3324      	adds	r3, #36	; 0x24
 8010a5e:	601a      	str	r2, [r3, #0]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010a66:	3328      	adds	r3, #40	; 0x28
 8010a68:	681a      	ldr	r2, [r3, #0]
 8010a6a:	697b      	ldr	r3, [r7, #20]
 8010a6c:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010a70:	331e      	adds	r3, #30
 8010a72:	881b      	ldrh	r3, [r3, #0]
 8010a74:	fb03 f202 	mul.w	r2, r3, r2
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010a7e:	3328      	adds	r3, #40	; 0x28
 8010a80:	601a      	str	r2, [r3, #0]
    
    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010a88:	3314      	adds	r3, #20
 8010a8a:	681a      	ldr	r2, [r3, #0]
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010a92:	3328      	adds	r3, #40	; 0x28
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	429a      	cmp	r2, r3
 8010a98:	d00c      	beq.n	8010ab4 <SCSI_Write10+0x182>
    {
      SCSI_SenseCode(pdev,
 8010a9a:	697b      	ldr	r3, [r7, #20]
 8010a9c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010aa0:	3319      	adds	r3, #25
 8010aa2:	7819      	ldrb	r1, [r3, #0]
 8010aa4:	2320      	movs	r3, #32
 8010aa6:	2205      	movs	r2, #5
 8010aa8:	68f8      	ldr	r0, [r7, #12]
 8010aaa:	f7ff fe23 	bl	80106f4 <SCSI_SenseCode>
                     hmsc->cbw.bLUN, 
                     ILLEGAL_REQUEST, 
                     INVALID_CDB);
      return -1;
 8010aae:	f04f 33ff 	mov.w	r3, #4294967295
 8010ab2:	e01c      	b.n	8010aee <SCSI_Write10+0x1bc>
    }
    
    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 8010ab4:	697b      	ldr	r3, [r7, #20]
 8010ab6:	2201      	movs	r2, #1
 8010ab8:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive (pdev,
                      MSC_EPOUT_ADDR,
                      hmsc->bot_data, 
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	f103 020c 	add.w	r2, r3, #12
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010ac6:	3328      	adds	r3, #40	; 0x28
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010ace:	bf28      	it	cs
 8010ad0:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    USBD_LL_PrepareReceive (pdev,
 8010ad4:	b29b      	uxth	r3, r3
 8010ad6:	2101      	movs	r1, #1
 8010ad8:	68f8      	ldr	r0, [r7, #12]
 8010ada:	f7f6 f9f8 	bl	8006ece <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	e005      	b.n	8010aee <SCSI_Write10+0x1bc>
    return SCSI_ProcessWrite(pdev, lun);
 8010ae2:	7afb      	ldrb	r3, [r7, #11]
 8010ae4:	4619      	mov	r1, r3
 8010ae6:	68f8      	ldr	r0, [r7, #12]
 8010ae8:	f000 f8df 	bl	8010caa <SCSI_ProcessWrite>
 8010aec:	4603      	mov	r3, r0
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	3718      	adds	r7, #24
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}

08010af6 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun , uint8_t *params)
{
 8010af6:	b580      	push	{r7, lr}
 8010af8:	b086      	sub	sp, #24
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	60f8      	str	r0, [r7, #12]
 8010afe:	460b      	mov	r3, r1
 8010b00:	607a      	str	r2, [r7, #4]
 8010b02:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010b0a:	617b      	str	r3, [r7, #20]
  
  if ((params[1]& 0x02) == 0x02) 
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	3301      	adds	r3, #1
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	f003 0302 	and.w	r3, r3, #2
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d008      	beq.n	8010b2c <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode (pdev,
 8010b1a:	7af9      	ldrb	r1, [r7, #11]
 8010b1c:	2324      	movs	r3, #36	; 0x24
 8010b1e:	2205      	movs	r2, #5
 8010b20:	68f8      	ldr	r0, [r7, #12]
 8010b22:	f7ff fde7 	bl	80106f4 <SCSI_SenseCode>
                    lun, 
                    ILLEGAL_REQUEST, 
                    INVALID_FIELED_IN_COMMAND);
    return -1; /* Error, Verify Mode Not supported*/
 8010b26:	f04f 33ff 	mov.w	r3, #4294967295
 8010b2a:	e018      	b.n	8010b5e <SCSI_Verify10+0x68>
  }
  
  if(SCSI_CheckAddressRange(pdev,
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010b32:	3324      	adds	r3, #36	; 0x24
 8010b34:	681a      	ldr	r2, [r3, #0]
                            lun, 
                            hmsc->scsi_blk_addr, 
                            hmsc->scsi_blk_len) < 0)
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010b3c:	3328      	adds	r3, #40	; 0x28
 8010b3e:	681b      	ldr	r3, [r3, #0]
  if(SCSI_CheckAddressRange(pdev,
 8010b40:	b29b      	uxth	r3, r3
 8010b42:	7af9      	ldrb	r1, [r7, #11]
 8010b44:	68f8      	ldr	r0, [r7, #12]
 8010b46:	f000 f80e 	bl	8010b66 <SCSI_CheckAddressRange>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	da02      	bge.n	8010b56 <SCSI_Verify10+0x60>
  {
    return -1; /* error */      
 8010b50:	f04f 33ff 	mov.w	r3, #4294967295
 8010b54:	e003      	b.n	8010b5e <SCSI_Verify10+0x68>
  }
  hmsc->bot_data_length = 0;
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	815a      	strh	r2, [r3, #10]
  return 0;
 8010b5c:	2300      	movs	r3, #0
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3718      	adds	r7, #24
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <SCSI_CheckAddressRange>:
* @param  blk_offset: first block address
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange (USBD_HandleTypeDef  *pdev, uint8_t lun , uint32_t blk_offset , uint16_t blk_nbr)
{
 8010b66:	b580      	push	{r7, lr}
 8010b68:	b086      	sub	sp, #24
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	60f8      	str	r0, [r7, #12]
 8010b6e:	607a      	str	r2, [r7, #4]
 8010b70:	461a      	mov	r2, r3
 8010b72:	460b      	mov	r3, r1
 8010b74:	72fb      	strb	r3, [r7, #11]
 8010b76:	4613      	mov	r3, r2
 8010b78:	813b      	strh	r3, [r7, #8]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010b80:	617b      	str	r3, [r7, #20]
  
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8010b82:	893a      	ldrh	r2, [r7, #8]
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	441a      	add	r2, r3
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010b8e:	3320      	adds	r3, #32
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d908      	bls.n	8010ba8 <SCSI_CheckAddressRange+0x42>
  {
    SCSI_SenseCode(pdev,
 8010b96:	7af9      	ldrb	r1, [r7, #11]
 8010b98:	2321      	movs	r3, #33	; 0x21
 8010b9a:	2205      	movs	r2, #5
 8010b9c:	68f8      	ldr	r0, [r7, #12]
 8010b9e:	f7ff fda9 	bl	80106f4 <SCSI_SenseCode>
                   lun, 
                   ILLEGAL_REQUEST, 
                   ADDRESS_OUT_OF_RANGE);
    return -1;
 8010ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ba6:	e000      	b.n	8010baa <SCSI_CheckAddressRange+0x44>
  }
  return 0;
 8010ba8:	2300      	movs	r3, #0
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3718      	adds	r7, #24
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}

08010bb2 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8010bb2:	b590      	push	{r4, r7, lr}
 8010bb4:	b085      	sub	sp, #20
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	6078      	str	r0, [r7, #4]
 8010bba:	460b      	mov	r3, r1
 8010bbc:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010bc4:	60fb      	str	r3, [r7, #12]
  uint32_t len;
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010bcc:	3328      	adds	r3, #40	; 0x28
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010bd4:	bf28      	it	cs
 8010bd6:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
 8010bda:	60bb      	str	r3, [r7, #8]
  
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8010be2:	691c      	ldr	r4, [r3, #16]
                              hmsc->bot_data, 
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	f103 010c 	add.w	r1, r3, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010bf0:	3324      	adds	r3, #36	; 0x24
 8010bf2:	681a      	ldr	r2, [r3, #0]
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010bfa:	331e      	adds	r3, #30
 8010bfc:	881b      	ldrh	r3, [r3, #0]
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8010bfe:	fbb2 f2f3 	udiv	r2, r2, r3
                              len / hmsc->scsi_blk_size) < 0)
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010c08:	331e      	adds	r3, #30
 8010c0a:	881b      	ldrh	r3, [r3, #0]
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	fbb3 f3f0 	udiv	r3, r3, r0
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	78f8      	ldrb	r0, [r7, #3]
 8010c18:	47a0      	blx	r4
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	da08      	bge.n	8010c32 <SCSI_ProcessRead+0x80>
  {
    
    SCSI_SenseCode(pdev,
 8010c20:	78f9      	ldrb	r1, [r7, #3]
 8010c22:	2311      	movs	r3, #17
 8010c24:	2204      	movs	r2, #4
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f7ff fd64 	bl	80106f4 <SCSI_SenseCode>
                   lun, 
                   HARDWARE_ERROR, 
                   UNRECOVERED_READ_ERROR);
    return -1; 
 8010c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8010c30:	e037      	b.n	8010ca2 <SCSI_ProcessRead+0xf0>
  }
  
  
  USBD_LL_Transmit (pdev, 
             MSC_EPIN_ADDR,
             hmsc->bot_data,
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	f103 020c 	add.w	r2, r3, #12
  USBD_LL_Transmit (pdev, 
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	b29b      	uxth	r3, r3
 8010c3c:	2181      	movs	r1, #129	; 0x81
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f7f6 f92e 	bl	8006ea0 <USBD_LL_Transmit>
             len);
  
  
  hmsc->scsi_blk_addr   += len; 
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010c4a:	3324      	adds	r3, #36	; 0x24
 8010c4c:	681a      	ldr	r2, [r3, #0]
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	441a      	add	r2, r3
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010c58:	3324      	adds	r3, #36	; 0x24
 8010c5a:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len    -= len;  
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010c62:	3328      	adds	r3, #40	; 0x28
 8010c64:	681a      	ldr	r2, [r3, #0]
 8010c66:	68bb      	ldr	r3, [r7, #8]
 8010c68:	1ad2      	subs	r2, r2, r3
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010c70:	3328      	adds	r3, #40	; 0x28
 8010c72:	601a      	str	r2, [r3, #0]
  
  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010c7a:	3334      	adds	r3, #52	; 0x34
 8010c7c:	681a      	ldr	r2, [r3, #0]
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	1ad2      	subs	r2, r2, r3
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010c88:	3334      	adds	r3, #52	; 0x34
 8010c8a:	601a      	str	r2, [r3, #0]
  
  if (hmsc->scsi_blk_len == 0)
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010c92:	3328      	adds	r3, #40	; 0x28
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d102      	bne.n	8010ca0 <SCSI_ProcessRead+0xee>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	2203      	movs	r2, #3
 8010c9e:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8010ca0:	2300      	movs	r3, #0
}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	3714      	adds	r7, #20
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd90      	pop	{r4, r7, pc}

08010caa <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite (USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8010caa:	b590      	push	{r4, r7, lr}
 8010cac:	b085      	sub	sp, #20
 8010cae:	af00      	add	r7, sp, #0
 8010cb0:	6078      	str	r0, [r7, #4]
 8010cb2:	460b      	mov	r3, r1
 8010cb4:	70fb      	strb	r3, [r7, #3]
  uint32_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010cbc:	60fb      	str	r3, [r7, #12]
  
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010cc4:	3328      	adds	r3, #40	; 0x28
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010ccc:	bf28      	it	cs
 8010cce:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
 8010cd2:	60bb      	str	r3, [r7, #8]
  
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8010cda:	695c      	ldr	r4, [r3, #20]
                              hmsc->bot_data, 
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	f103 010c 	add.w	r1, r3, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010ce8:	3324      	adds	r3, #36	; 0x24
 8010cea:	681a      	ldr	r2, [r3, #0]
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010cf2:	331e      	adds	r3, #30
 8010cf4:	881b      	ldrh	r3, [r3, #0]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8010cf6:	fbb2 f2f3 	udiv	r2, r2, r3
                              len / hmsc->scsi_blk_size) < 0)
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010d00:	331e      	adds	r3, #30
 8010d02:	881b      	ldrh	r3, [r3, #0]
 8010d04:	4618      	mov	r0, r3
 8010d06:	68bb      	ldr	r3, [r7, #8]
 8010d08:	fbb3 f3f0 	udiv	r3, r3, r0
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8010d0c:	b29b      	uxth	r3, r3
 8010d0e:	78f8      	ldrb	r0, [r7, #3]
 8010d10:	47a0      	blx	r4
 8010d12:	4603      	mov	r3, r0
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	da08      	bge.n	8010d2a <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev,
 8010d18:	78f9      	ldrb	r1, [r7, #3]
 8010d1a:	2303      	movs	r3, #3
 8010d1c:	2204      	movs	r2, #4
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f7ff fce8 	bl	80106f4 <SCSI_SenseCode>
                   lun, 
                   HARDWARE_ERROR, 
                   WRITE_FAULT);     
    return -1; 
 8010d24:	f04f 33ff 	mov.w	r3, #4294967295
 8010d28:	e042      	b.n	8010db0 <SCSI_ProcessWrite+0x106>
  }
  
  
  hmsc->scsi_blk_addr  += len; 
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010d30:	3324      	adds	r3, #36	; 0x24
 8010d32:	681a      	ldr	r2, [r3, #0]
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	441a      	add	r2, r3
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010d3e:	3324      	adds	r3, #36	; 0x24
 8010d40:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len   -= len; 
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010d48:	3328      	adds	r3, #40	; 0x28
 8010d4a:	681a      	ldr	r2, [r3, #0]
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	1ad2      	subs	r2, r2, r3
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010d56:	3328      	adds	r3, #40	; 0x28
 8010d58:	601a      	str	r2, [r3, #0]
  
  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010d60:	3334      	adds	r3, #52	; 0x34
 8010d62:	681a      	ldr	r2, [r3, #0]
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	1ad2      	subs	r2, r2, r3
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010d6e:	3334      	adds	r3, #52	; 0x34
 8010d70:	601a      	str	r2, [r3, #0]
  
  if (hmsc->scsi_blk_len == 0)
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010d78:	3328      	adds	r3, #40	; 0x28
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d104      	bne.n	8010d8a <SCSI_ProcessWrite+0xe0>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8010d80:	2100      	movs	r1, #0
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	f7ff f8bc 	bl	800ff00 <MSC_BOT_SendCSW>
 8010d88:	e011      	b.n	8010dae <SCSI_ProcessWrite+0x104>
  else
  {
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev,
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	f103 020c 	add.w	r2, r3, #12
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8010d96:	3328      	adds	r3, #40	; 0x28
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010d9e:	bf28      	it	cs
 8010da0:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    USBD_LL_PrepareReceive (pdev,
 8010da4:	b29b      	uxth	r3, r3
 8010da6:	2101      	movs	r1, #1
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f7f6 f890 	bl	8006ece <USBD_LL_PrepareReceive>
  }
  
  return 0;
 8010dae:	2300      	movs	r3, #0
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	3714      	adds	r7, #20
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd90      	pop	{r4, r7, pc}

08010db8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b084      	sub	sp, #16
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	60f8      	str	r0, [r7, #12]
 8010dc0:	60b9      	str	r1, [r7, #8]
 8010dc2:	4613      	mov	r3, r2
 8010dc4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d101      	bne.n	8010dd0 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8010dcc:	2302      	movs	r3, #2
 8010dce:	e01a      	b.n	8010e06 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d003      	beq.n	8010de2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	2200      	movs	r2, #0
 8010dde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8010de2:	68bb      	ldr	r3, [r7, #8]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d003      	beq.n	8010df0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	68ba      	ldr	r2, [r7, #8]
 8010dec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	2201      	movs	r2, #1
 8010df4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	79fa      	ldrb	r2, [r7, #7]
 8010dfc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8010dfe:	68f8      	ldr	r0, [r7, #12]
 8010e00:	f7f5 ff32 	bl	8006c68 <USBD_LL_Init>

  return USBD_OK;
 8010e04:	2300      	movs	r3, #0
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	3710      	adds	r7, #16
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}

08010e0e <Battey_Charge_Mode>:

USBD_StatusTypeDef Battey_Charge_Mode(USBD_HandleTypeDef *pdev)
{
 8010e0e:	b480      	push	{r7}
 8010e10:	b083      	sub	sp, #12
 8010e12:	af00      	add	r7, sp, #0
 8010e14:	6078      	str	r0, [r7, #4]
	if ( pdev->dev_state  == USBD_STATE_DEFAULT)
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8010e1c:	2b01      	cmp	r3, #1
 8010e1e:	d101      	bne.n	8010e24 <Battey_Charge_Mode+0x16>
		return USBD_OK;
 8010e20:	2300      	movs	r3, #0
 8010e22:	e000      	b.n	8010e26 <Battey_Charge_Mode+0x18>
	else
		return USBD_FAIL;
 8010e24:	2302      	movs	r3, #2

}
 8010e26:	4618      	mov	r0, r3
 8010e28:	370c      	adds	r7, #12
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e30:	4770      	bx	lr

08010e32 <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8010e32:	b580      	push	{r7, lr}
 8010e34:	b082      	sub	sp, #8
 8010e36:	af00      	add	r7, sp, #0
 8010e38:	6078      	str	r0, [r7, #4]
  /* Set Default State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2201      	movs	r2, #1
 8010e3e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010e48:	685b      	ldr	r3, [r3, #4]
 8010e4a:	687a      	ldr	r2, [r7, #4]
 8010e4c:	6852      	ldr	r2, [r2, #4]
 8010e4e:	b2d2      	uxtb	r2, r2
 8010e50:	4611      	mov	r1, r2
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	4798      	blx	r3
  
    /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 8010e56:	6878      	ldr	r0, [r7, #4]
 8010e58:	f7f5 ff6e 	bl	8006d38 <USBD_LL_Stop>
  
  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f7f5 ff4d 	bl	8006cfc <USBD_LL_DeInit>
  
  return USBD_OK;
 8010e62:	2300      	movs	r3, #0
}
 8010e64:	4618      	mov	r0, r3
 8010e66:	3708      	adds	r7, #8
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}

08010e6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010e6c:	b480      	push	{r7}
 8010e6e:	b085      	sub	sp, #20
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
 8010e74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8010e76:	2300      	movs	r3, #0
 8010e78:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d006      	beq.n	8010e8e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	683a      	ldr	r2, [r7, #0]
 8010e84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	73fb      	strb	r3, [r7, #15]
 8010e8c:	e001      	b.n	8010e92 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8010e8e:	2302      	movs	r3, #2
 8010e90:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8010e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	3714      	adds	r7, #20
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9e:	4770      	bx	lr

08010ea0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b082      	sub	sp, #8
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f7f5 ff36 	bl	8006d1a <USBD_LL_Start>
  
  return USBD_OK;  
 8010eae:	2300      	movs	r3, #0
}
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	3708      	adds	r7, #8
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}

08010eb8 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	687a      	ldr	r2, [r7, #4]
 8010eca:	6852      	ldr	r2, [r2, #4]
 8010ecc:	b2d2      	uxtb	r2, r2
 8010ece:	4611      	mov	r1, r2
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f7f5 ff2f 	bl	8006d38 <USBD_LL_Stop>
  
  return USBD_OK;  
 8010eda:	2300      	movs	r3, #0
}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3708      	adds	r7, #8
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8010ee4:	b480      	push	{r7}
 8010ee6:	b083      	sub	sp, #12
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8010eec:	2300      	movs	r3, #0
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	370c      	adds	r7, #12
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef8:	4770      	bx	lr

08010efa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010efa:	b580      	push	{r7, lr}
 8010efc:	b084      	sub	sp, #16
 8010efe:	af00      	add	r7, sp, #0
 8010f00:	6078      	str	r0, [r7, #4]
 8010f02:	460b      	mov	r3, r1
 8010f04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8010f06:	2302      	movs	r3, #2
 8010f08:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d00c      	beq.n	8010f2e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	78fa      	ldrb	r2, [r7, #3]
 8010f1e:	4611      	mov	r1, r2
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	4798      	blx	r3
 8010f24:	4603      	mov	r3, r0
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d101      	bne.n	8010f2e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8010f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f30:	4618      	mov	r0, r3
 8010f32:	3710      	adds	r7, #16
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b082      	sub	sp, #8
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	460b      	mov	r3, r1
 8010f42:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010f4a:	685b      	ldr	r3, [r3, #4]
 8010f4c:	78fa      	ldrb	r2, [r7, #3]
 8010f4e:	4611      	mov	r1, r2
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	4798      	blx	r3
  return USBD_OK;
 8010f54:	2300      	movs	r3, #0
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3708      	adds	r7, #8
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}

08010f5e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010f5e:	b580      	push	{r7, lr}
 8010f60:	b082      	sub	sp, #8
 8010f62:	af00      	add	r7, sp, #0
 8010f64:	6078      	str	r0, [r7, #4]
 8010f66:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010f6e:	6839      	ldr	r1, [r7, #0]
 8010f70:	4618      	mov	r0, r3
 8010f72:	f000 fd98 	bl	8011aa6 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2201      	movs	r2, #1
 8010f7a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8010f84:	461a      	mov	r2, r3
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8010f92:	f003 031f 	and.w	r3, r3, #31
 8010f96:	2b01      	cmp	r3, #1
 8010f98:	d00b      	beq.n	8010fb2 <USBD_LL_SetupStage+0x54>
 8010f9a:	2b02      	cmp	r3, #2
 8010f9c:	d011      	beq.n	8010fc2 <USBD_LL_SetupStage+0x64>
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d117      	bne.n	8010fd2 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010fa8:	4619      	mov	r1, r3
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	f000 f9c6 	bl	801133c <USBD_StdDevReq>
    break;
 8010fb0:	e01a      	b.n	8010fe8 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010fb8:	4619      	mov	r1, r3
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f000 fa0e 	bl	80113dc <USBD_StdItfReq>
    break;
 8010fc0:	e012      	b.n	8010fe8 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010fc8:	4619      	mov	r1, r3
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f000 fa39 	bl	8011442 <USBD_StdEPReq>
    break;
 8010fd0:	e00a      	b.n	8010fe8 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8010fd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010fdc:	b2db      	uxtb	r3, r3
 8010fde:	4619      	mov	r1, r3
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f7f5 fef8 	bl	8006dd6 <USBD_LL_StallEP>
    break;
 8010fe6:	bf00      	nop
  }  
  return USBD_OK;  
 8010fe8:	2300      	movs	r3, #0
}
 8010fea:	4618      	mov	r0, r3
 8010fec:	3708      	adds	r7, #8
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}

08010ff2 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8010ff2:	b580      	push	{r7, lr}
 8010ff4:	b086      	sub	sp, #24
 8010ff6:	af00      	add	r7, sp, #0
 8010ff8:	60f8      	str	r0, [r7, #12]
 8010ffa:	460b      	mov	r3, r1
 8010ffc:	607a      	str	r2, [r7, #4]
 8010ffe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8011000:	7afb      	ldrb	r3, [r7, #11]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d138      	bne.n	8011078 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801100c:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8011014:	2b03      	cmp	r3, #3
 8011016:	d142      	bne.n	801109e <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8011018:	697b      	ldr	r3, [r7, #20]
 801101a:	689a      	ldr	r2, [r3, #8]
 801101c:	697b      	ldr	r3, [r7, #20]
 801101e:	68db      	ldr	r3, [r3, #12]
 8011020:	429a      	cmp	r2, r3
 8011022:	d914      	bls.n	801104e <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8011024:	697b      	ldr	r3, [r7, #20]
 8011026:	689a      	ldr	r2, [r3, #8]
 8011028:	697b      	ldr	r3, [r7, #20]
 801102a:	68db      	ldr	r3, [r3, #12]
 801102c:	1ad2      	subs	r2, r2, r3
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8011032:	697b      	ldr	r3, [r7, #20]
 8011034:	68da      	ldr	r2, [r3, #12]
 8011036:	697b      	ldr	r3, [r7, #20]
 8011038:	689b      	ldr	r3, [r3, #8]
 801103a:	4293      	cmp	r3, r2
 801103c:	bf28      	it	cs
 801103e:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8011040:	b29b      	uxth	r3, r3
 8011042:	461a      	mov	r2, r3
 8011044:	6879      	ldr	r1, [r7, #4]
 8011046:	68f8      	ldr	r0, [r7, #12]
 8011048:	f000 fe22 	bl	8011c90 <USBD_CtlContinueRx>
 801104c:	e027      	b.n	801109e <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011054:	691b      	ldr	r3, [r3, #16]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d00a      	beq.n	8011070 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8011060:	2b03      	cmp	r3, #3
 8011062:	d105      	bne.n	8011070 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801106a:	691b      	ldr	r3, [r3, #16]
 801106c:	68f8      	ldr	r0, [r7, #12]
 801106e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8011070:	68f8      	ldr	r0, [r7, #12]
 8011072:	f000 fe1f 	bl	8011cb4 <USBD_CtlSendStatus>
 8011076:	e012      	b.n	801109e <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801107e:	699b      	ldr	r3, [r3, #24]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d00c      	beq.n	801109e <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 801108a:	2b03      	cmp	r3, #3
 801108c:	d107      	bne.n	801109e <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011094:	699b      	ldr	r3, [r3, #24]
 8011096:	7afa      	ldrb	r2, [r7, #11]
 8011098:	4611      	mov	r1, r2
 801109a:	68f8      	ldr	r0, [r7, #12]
 801109c:	4798      	blx	r3
  }  
  return USBD_OK;
 801109e:	2300      	movs	r3, #0
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3718      	adds	r7, #24
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}

080110a8 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b086      	sub	sp, #24
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	60f8      	str	r0, [r7, #12]
 80110b0:	460b      	mov	r3, r1
 80110b2:	607a      	str	r2, [r7, #4]
 80110b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80110b6:	7afb      	ldrb	r3, [r7, #11]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d16c      	bne.n	8011196 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	3314      	adds	r3, #20
 80110c0:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80110c8:	2b02      	cmp	r3, #2
 80110ca:	d157      	bne.n	801117c <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	689a      	ldr	r2, [r3, #8]
 80110d0:	697b      	ldr	r3, [r7, #20]
 80110d2:	68db      	ldr	r3, [r3, #12]
 80110d4:	429a      	cmp	r2, r3
 80110d6:	d915      	bls.n	8011104 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	689a      	ldr	r2, [r3, #8]
 80110dc:	697b      	ldr	r3, [r7, #20]
 80110de:	68db      	ldr	r3, [r3, #12]
 80110e0:	1ad2      	subs	r2, r2, r3
 80110e2:	697b      	ldr	r3, [r7, #20]
 80110e4:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 80110ea:	b29b      	uxth	r3, r3
 80110ec:	461a      	mov	r2, r3
 80110ee:	6879      	ldr	r1, [r7, #4]
 80110f0:	68f8      	ldr	r0, [r7, #12]
 80110f2:	f000 fd9d 	bl	8011c30 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80110f6:	2300      	movs	r3, #0
 80110f8:	2200      	movs	r2, #0
 80110fa:	2100      	movs	r1, #0
 80110fc:	68f8      	ldr	r0, [r7, #12]
 80110fe:	f7f5 fee6 	bl	8006ece <USBD_LL_PrepareReceive>
 8011102:	e03b      	b.n	801117c <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8011104:	697b      	ldr	r3, [r7, #20]
 8011106:	685b      	ldr	r3, [r3, #4]
 8011108:	697a      	ldr	r2, [r7, #20]
 801110a:	68d2      	ldr	r2, [r2, #12]
 801110c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011110:	fb02 f201 	mul.w	r2, r2, r1
 8011114:	1a9b      	subs	r3, r3, r2
 8011116:	2b00      	cmp	r3, #0
 8011118:	d11c      	bne.n	8011154 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	685a      	ldr	r2, [r3, #4]
 801111e:	697b      	ldr	r3, [r7, #20]
 8011120:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8011122:	429a      	cmp	r2, r3
 8011124:	d316      	bcc.n	8011154 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	685a      	ldr	r2, [r3, #4]
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8011130:	429a      	cmp	r2, r3
 8011132:	d20f      	bcs.n	8011154 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8011134:	2200      	movs	r2, #0
 8011136:	2100      	movs	r1, #0
 8011138:	68f8      	ldr	r0, [r7, #12]
 801113a:	f000 fd79 	bl	8011c30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	2200      	movs	r2, #0
 8011142:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8011146:	2300      	movs	r3, #0
 8011148:	2200      	movs	r2, #0
 801114a:	2100      	movs	r1, #0
 801114c:	68f8      	ldr	r0, [r7, #12]
 801114e:	f7f5 febe 	bl	8006ece <USBD_LL_PrepareReceive>
 8011152:	e013      	b.n	801117c <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801115a:	68db      	ldr	r3, [r3, #12]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d00a      	beq.n	8011176 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8011166:	2b03      	cmp	r3, #3
 8011168:	d105      	bne.n	8011176 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011170:	68db      	ldr	r3, [r3, #12]
 8011172:	68f8      	ldr	r0, [r7, #12]
 8011174:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8011176:	68f8      	ldr	r0, [r7, #12]
 8011178:	f000 fdaf 	bl	8011cda <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011182:	2b01      	cmp	r3, #1
 8011184:	d11a      	bne.n	80111bc <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8011186:	68f8      	ldr	r0, [r7, #12]
 8011188:	f7ff feac 	bl	8010ee4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	2200      	movs	r2, #0
 8011190:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8011194:	e012      	b.n	80111bc <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801119c:	695b      	ldr	r3, [r3, #20]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d00c      	beq.n	80111bc <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 80111a8:	2b03      	cmp	r3, #3
 80111aa:	d107      	bne.n	80111bc <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80111b2:	695b      	ldr	r3, [r3, #20]
 80111b4:	7afa      	ldrb	r2, [r7, #11]
 80111b6:	4611      	mov	r1, r2
 80111b8:	68f8      	ldr	r0, [r7, #12]
 80111ba:	4798      	blx	r3
  }  
  return USBD_OK;
 80111bc:	2300      	movs	r3, #0
}
 80111be:	4618      	mov	r0, r3
 80111c0:	3718      	adds	r7, #24
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}

080111c6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80111c6:	b580      	push	{r7, lr}
 80111c8:	b082      	sub	sp, #8
 80111ca:	af00      	add	r7, sp, #0
 80111cc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80111ce:	2340      	movs	r3, #64	; 0x40
 80111d0:	2200      	movs	r2, #0
 80111d2:	2100      	movs	r1, #0
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f7f5 fdbe 	bl	8006d56 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2240      	movs	r2, #64	; 0x40
 80111de:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80111e2:	2340      	movs	r3, #64	; 0x40
 80111e4:	2200      	movs	r2, #0
 80111e6:	2180      	movs	r1, #128	; 0x80
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f7f5 fdb4 	bl	8006d56 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2240      	movs	r2, #64	; 0x40
 80111f2:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2201      	movs	r2, #1
 80111f8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011202:	2b00      	cmp	r3, #0
 8011204:	d009      	beq.n	801121a <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801120c:	685b      	ldr	r3, [r3, #4]
 801120e:	687a      	ldr	r2, [r7, #4]
 8011210:	6852      	ldr	r2, [r2, #4]
 8011212:	b2d2      	uxtb	r2, r2
 8011214:	4611      	mov	r1, r2
 8011216:	6878      	ldr	r0, [r7, #4]
 8011218:	4798      	blx	r3
 
  
  return USBD_OK;
 801121a:	2300      	movs	r3, #0
}
 801121c:	4618      	mov	r0, r3
 801121e:	3708      	adds	r7, #8
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8011224:	b480      	push	{r7}
 8011226:	b083      	sub	sp, #12
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	460b      	mov	r3, r1
 801122e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	78fa      	ldrb	r2, [r7, #3]
 8011234:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8011236:	2300      	movs	r3, #0
}
 8011238:	4618      	mov	r0, r3
 801123a:	370c      	adds	r7, #12
 801123c:	46bd      	mov	sp, r7
 801123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011242:	4770      	bx	lr

08011244 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8011244:	b480      	push	{r7}
 8011246:	b083      	sub	sp, #12
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2204      	movs	r2, #4
 801125c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8011260:	2300      	movs	r3, #0
}
 8011262:	4618      	mov	r0, r3
 8011264:	370c      	adds	r7, #12
 8011266:	46bd      	mov	sp, r7
 8011268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126c:	4770      	bx	lr

0801126e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 801126e:	b480      	push	{r7}
 8011270:	b083      	sub	sp, #12
 8011272:	af00      	add	r7, sp, #0
 8011274:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8011282:	2300      	movs	r3, #0
}
 8011284:	4618      	mov	r0, r3
 8011286:	370c      	adds	r7, #12
 8011288:	46bd      	mov	sp, r7
 801128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128e:	4770      	bx	lr

08011290 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 801129e:	2b03      	cmp	r3, #3
 80112a0:	d10b      	bne.n	80112ba <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80112a8:	69db      	ldr	r3, [r3, #28]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d005      	beq.n	80112ba <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80112b4:	69db      	ldr	r3, [r3, #28]
 80112b6:	6878      	ldr	r0, [r7, #4]
 80112b8:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80112ba:	2300      	movs	r3, #0
}
 80112bc:	4618      	mov	r0, r3
 80112be:	3708      	adds	r7, #8
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}

080112c4 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80112c4:	b480      	push	{r7}
 80112c6:	b083      	sub	sp, #12
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
 80112cc:	460b      	mov	r3, r1
 80112ce:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 80112d0:	2300      	movs	r3, #0
}
 80112d2:	4618      	mov	r0, r3
 80112d4:	370c      	adds	r7, #12
 80112d6:	46bd      	mov	sp, r7
 80112d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112dc:	4770      	bx	lr

080112de <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80112de:	b480      	push	{r7}
 80112e0:	b083      	sub	sp, #12
 80112e2:	af00      	add	r7, sp, #0
 80112e4:	6078      	str	r0, [r7, #4]
 80112e6:	460b      	mov	r3, r1
 80112e8:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 80112ea:	2300      	movs	r3, #0
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	370c      	adds	r7, #12
 80112f0:	46bd      	mov	sp, r7
 80112f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f6:	4770      	bx	lr

080112f8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80112f8:	b480      	push	{r7}
 80112fa:	b083      	sub	sp, #12
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8011300:	2300      	movs	r3, #0
}
 8011302:	4618      	mov	r0, r3
 8011304:	370c      	adds	r7, #12
 8011306:	46bd      	mov	sp, r7
 8011308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130c:	4770      	bx	lr

0801130e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 801130e:	b580      	push	{r7, lr}
 8011310:	b082      	sub	sp, #8
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2201      	movs	r2, #1
 801131a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011324:	685b      	ldr	r3, [r3, #4]
 8011326:	687a      	ldr	r2, [r7, #4]
 8011328:	6852      	ldr	r2, [r2, #4]
 801132a:	b2d2      	uxtb	r2, r2
 801132c:	4611      	mov	r1, r2
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	4798      	blx	r3
   
  return USBD_OK;
 8011332:	2300      	movs	r3, #0
}
 8011334:	4618      	mov	r0, r3
 8011336:	3708      	adds	r7, #8
 8011338:	46bd      	mov	sp, r7
 801133a:	bd80      	pop	{r7, pc}

0801133c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b084      	sub	sp, #16
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
 8011344:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8011346:	2300      	movs	r3, #0
 8011348:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	785b      	ldrb	r3, [r3, #1]
 801134e:	2b09      	cmp	r3, #9
 8011350:	d839      	bhi.n	80113c6 <USBD_StdDevReq+0x8a>
 8011352:	a201      	add	r2, pc, #4	; (adr r2, 8011358 <USBD_StdDevReq+0x1c>)
 8011354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011358:	080113a9 	.word	0x080113a9
 801135c:	080113bd 	.word	0x080113bd
 8011360:	080113c7 	.word	0x080113c7
 8011364:	080113b3 	.word	0x080113b3
 8011368:	080113c7 	.word	0x080113c7
 801136c:	0801138b 	.word	0x0801138b
 8011370:	08011381 	.word	0x08011381
 8011374:	080113c7 	.word	0x080113c7
 8011378:	0801139f 	.word	0x0801139f
 801137c:	08011395 	.word	0x08011395
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8011380:	6839      	ldr	r1, [r7, #0]
 8011382:	6878      	ldr	r0, [r7, #4]
 8011384:	f000 f936 	bl	80115f4 <USBD_GetDescriptor>
    break;
 8011388:	e022      	b.n	80113d0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 801138a:	6839      	ldr	r1, [r7, #0]
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f000 fa25 	bl	80117dc <USBD_SetAddress>
    break;
 8011392:	e01d      	b.n	80113d0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8011394:	6839      	ldr	r1, [r7, #0]
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f000 fa5e 	bl	8011858 <USBD_SetConfig>
    break;
 801139c:	e018      	b.n	80113d0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 801139e:	6839      	ldr	r1, [r7, #0]
 80113a0:	6878      	ldr	r0, [r7, #4]
 80113a2:	f000 fae1 	bl	8011968 <USBD_GetConfig>
    break;
 80113a6:	e013      	b.n	80113d0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 80113a8:	6839      	ldr	r1, [r7, #0]
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f000 fb0e 	bl	80119cc <USBD_GetStatus>
    break;
 80113b0:	e00e      	b.n	80113d0 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 80113b2:	6839      	ldr	r1, [r7, #0]
 80113b4:	6878      	ldr	r0, [r7, #4]
 80113b6:	f000 fb33 	bl	8011a20 <USBD_SetFeature>
    break;
 80113ba:	e009      	b.n	80113d0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 80113bc:	6839      	ldr	r1, [r7, #0]
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f000 fb49 	bl	8011a56 <USBD_ClrFeature>
    break;
 80113c4:	e004      	b.n	80113d0 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 80113c6:	6839      	ldr	r1, [r7, #0]
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	f000 fba9 	bl	8011b20 <USBD_CtlError>
    break;
 80113ce:	bf00      	nop
  }
  
  return ret;
 80113d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80113d2:	4618      	mov	r0, r3
 80113d4:	3710      	adds	r7, #16
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd80      	pop	{r7, pc}
 80113da:	bf00      	nop

080113dc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b084      	sub	sp, #16
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 80113e6:	2300      	movs	r3, #0
 80113e8:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80113f0:	2b03      	cmp	r3, #3
 80113f2:	d11b      	bne.n	801142c <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	889b      	ldrh	r3, [r3, #4]
 80113f8:	b2db      	uxtb	r3, r3
 80113fa:	2b01      	cmp	r3, #1
 80113fc:	d811      	bhi.n	8011422 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011404:	689b      	ldr	r3, [r3, #8]
 8011406:	6839      	ldr	r1, [r7, #0]
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	88db      	ldrh	r3, [r3, #6]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d110      	bne.n	8011436 <USBD_StdItfReq+0x5a>
 8011414:	7bfb      	ldrb	r3, [r7, #15]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d10d      	bne.n	8011436 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f000 fc4a 	bl	8011cb4 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8011420:	e009      	b.n	8011436 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8011422:	6839      	ldr	r1, [r7, #0]
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f000 fb7b 	bl	8011b20 <USBD_CtlError>
    break;
 801142a:	e004      	b.n	8011436 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 801142c:	6839      	ldr	r1, [r7, #0]
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	f000 fb76 	bl	8011b20 <USBD_CtlError>
    break;
 8011434:	e000      	b.n	8011438 <USBD_StdItfReq+0x5c>
    break;
 8011436:	bf00      	nop
  }
  return USBD_OK;
 8011438:	2300      	movs	r3, #0
}
 801143a:	4618      	mov	r0, r3
 801143c:	3710      	adds	r7, #16
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}

08011442 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8011442:	b580      	push	{r7, lr}
 8011444:	b084      	sub	sp, #16
 8011446:	af00      	add	r7, sp, #0
 8011448:	6078      	str	r0, [r7, #4]
 801144a:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 801144c:	2300      	movs	r3, #0
 801144e:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	889b      	ldrh	r3, [r3, #4]
 8011454:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	781b      	ldrb	r3, [r3, #0]
 801145a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801145e:	2b20      	cmp	r3, #32
 8011460:	d108      	bne.n	8011474 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011468:	689b      	ldr	r3, [r3, #8]
 801146a:	6839      	ldr	r1, [r7, #0]
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	4798      	blx	r3
    
    return USBD_OK;
 8011470:	2300      	movs	r3, #0
 8011472:	e0ba      	b.n	80115ea <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	785b      	ldrb	r3, [r3, #1]
 8011478:	2b01      	cmp	r3, #1
 801147a:	d039      	beq.n	80114f0 <USBD_StdEPReq+0xae>
 801147c:	2b03      	cmp	r3, #3
 801147e:	d002      	beq.n	8011486 <USBD_StdEPReq+0x44>
 8011480:	2b00      	cmp	r3, #0
 8011482:	d06b      	beq.n	801155c <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8011484:	e0b0      	b.n	80115e8 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 801148c:	2b02      	cmp	r3, #2
 801148e:	d002      	beq.n	8011496 <USBD_StdEPReq+0x54>
 8011490:	2b03      	cmp	r3, #3
 8011492:	d00c      	beq.n	80114ae <USBD_StdEPReq+0x6c>
 8011494:	e025      	b.n	80114e2 <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8011496:	7bbb      	ldrb	r3, [r7, #14]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d027      	beq.n	80114ec <USBD_StdEPReq+0xaa>
 801149c:	7bbb      	ldrb	r3, [r7, #14]
 801149e:	2b80      	cmp	r3, #128	; 0x80
 80114a0:	d024      	beq.n	80114ec <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 80114a2:	7bbb      	ldrb	r3, [r7, #14]
 80114a4:	4619      	mov	r1, r3
 80114a6:	6878      	ldr	r0, [r7, #4]
 80114a8:	f7f5 fc95 	bl	8006dd6 <USBD_LL_StallEP>
      break;	
 80114ac:	e01e      	b.n	80114ec <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80114ae:	683b      	ldr	r3, [r7, #0]
 80114b0:	885b      	ldrh	r3, [r3, #2]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d10a      	bne.n	80114cc <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80114b6:	7bbb      	ldrb	r3, [r7, #14]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d007      	beq.n	80114cc <USBD_StdEPReq+0x8a>
 80114bc:	7bbb      	ldrb	r3, [r7, #14]
 80114be:	2b80      	cmp	r3, #128	; 0x80
 80114c0:	d004      	beq.n	80114cc <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 80114c2:	7bbb      	ldrb	r3, [r7, #14]
 80114c4:	4619      	mov	r1, r3
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f7f5 fc85 	bl	8006dd6 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80114d2:	689b      	ldr	r3, [r3, #8]
 80114d4:	6839      	ldr	r1, [r7, #0]
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f000 fbea 	bl	8011cb4 <USBD_CtlSendStatus>
      break;
 80114e0:	e005      	b.n	80114ee <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 80114e2:	6839      	ldr	r1, [r7, #0]
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f000 fb1b 	bl	8011b20 <USBD_CtlError>
      break;    
 80114ea:	e000      	b.n	80114ee <USBD_StdEPReq+0xac>
      break;	
 80114ec:	bf00      	nop
    break;
 80114ee:	e07b      	b.n	80115e8 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80114f6:	2b02      	cmp	r3, #2
 80114f8:	d002      	beq.n	8011500 <USBD_StdEPReq+0xbe>
 80114fa:	2b03      	cmp	r3, #3
 80114fc:	d00c      	beq.n	8011518 <USBD_StdEPReq+0xd6>
 80114fe:	e024      	b.n	801154a <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8011500:	7bbb      	ldrb	r3, [r7, #14]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d026      	beq.n	8011554 <USBD_StdEPReq+0x112>
 8011506:	7bbb      	ldrb	r3, [r7, #14]
 8011508:	2b80      	cmp	r3, #128	; 0x80
 801150a:	d023      	beq.n	8011554 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 801150c:	7bbb      	ldrb	r3, [r7, #14]
 801150e:	4619      	mov	r1, r3
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f7f5 fc60 	bl	8006dd6 <USBD_LL_StallEP>
      break;	
 8011516:	e01d      	b.n	8011554 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	885b      	ldrh	r3, [r3, #2]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d11b      	bne.n	8011558 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 8011520:	7bbb      	ldrb	r3, [r7, #14]
 8011522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011526:	2b00      	cmp	r3, #0
 8011528:	d00b      	beq.n	8011542 <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 801152a:	7bbb      	ldrb	r3, [r7, #14]
 801152c:	4619      	mov	r1, r3
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f7f5 fc64 	bl	8006dfc <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801153a:	689b      	ldr	r3, [r3, #8]
 801153c:	6839      	ldr	r1, [r7, #0]
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8011542:	6878      	ldr	r0, [r7, #4]
 8011544:	f000 fbb6 	bl	8011cb4 <USBD_CtlSendStatus>
      break;
 8011548:	e006      	b.n	8011558 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 801154a:	6839      	ldr	r1, [r7, #0]
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	f000 fae7 	bl	8011b20 <USBD_CtlError>
      break;    
 8011552:	e002      	b.n	801155a <USBD_StdEPReq+0x118>
      break;	
 8011554:	bf00      	nop
 8011556:	e047      	b.n	80115e8 <USBD_StdEPReq+0x1a6>
      break;
 8011558:	bf00      	nop
    break;
 801155a:	e045      	b.n	80115e8 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8011562:	2b02      	cmp	r3, #2
 8011564:	d002      	beq.n	801156c <USBD_StdEPReq+0x12a>
 8011566:	2b03      	cmp	r3, #3
 8011568:	d00b      	beq.n	8011582 <USBD_StdEPReq+0x140>
 801156a:	e036      	b.n	80115da <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 801156c:	7bbb      	ldrb	r3, [r7, #14]
 801156e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011572:	2b00      	cmp	r3, #0
 8011574:	d036      	beq.n	80115e4 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 8011576:	7bbb      	ldrb	r3, [r7, #14]
 8011578:	4619      	mov	r1, r3
 801157a:	6878      	ldr	r0, [r7, #4]
 801157c:	f7f5 fc2b 	bl	8006dd6 <USBD_LL_StallEP>
      break;	
 8011580:	e030      	b.n	80115e4 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8011582:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011586:	2b00      	cmp	r3, #0
 8011588:	da08      	bge.n	801159c <USBD_StdEPReq+0x15a>
 801158a:	7bbb      	ldrb	r3, [r7, #14]
 801158c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011590:	3301      	adds	r3, #1
 8011592:	011b      	lsls	r3, r3, #4
 8011594:	687a      	ldr	r2, [r7, #4]
 8011596:	4413      	add	r3, r2
 8011598:	3304      	adds	r3, #4
 801159a:	e007      	b.n	80115ac <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 801159c:	7bbb      	ldrb	r3, [r7, #14]
 801159e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80115a2:	3310      	adds	r3, #16
 80115a4:	011b      	lsls	r3, r3, #4
 80115a6:	687a      	ldr	r2, [r7, #4]
 80115a8:	4413      	add	r3, r2
 80115aa:	3304      	adds	r3, #4
 80115ac:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80115ae:	7bbb      	ldrb	r3, [r7, #14]
 80115b0:	4619      	mov	r1, r3
 80115b2:	6878      	ldr	r0, [r7, #4]
 80115b4:	f7f5 fc35 	bl	8006e22 <USBD_LL_IsStallEP>
 80115b8:	4603      	mov	r3, r0
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d003      	beq.n	80115c6 <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	2201      	movs	r2, #1
 80115c2:	601a      	str	r2, [r3, #0]
 80115c4:	e002      	b.n	80115cc <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 80115c6:	68bb      	ldr	r3, [r7, #8]
 80115c8:	2200      	movs	r2, #0
 80115ca:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 80115cc:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 80115ce:	2202      	movs	r2, #2
 80115d0:	4619      	mov	r1, r3
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f000 fb10 	bl	8011bf8 <USBD_CtlSendData>
      break;
 80115d8:	e005      	b.n	80115e6 <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 80115da:	6839      	ldr	r1, [r7, #0]
 80115dc:	6878      	ldr	r0, [r7, #4]
 80115de:	f000 fa9f 	bl	8011b20 <USBD_CtlError>
      break;
 80115e2:	e000      	b.n	80115e6 <USBD_StdEPReq+0x1a4>
      break;	
 80115e4:	bf00      	nop
    break;
 80115e6:	bf00      	nop
  }
  return ret;
 80115e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80115ea:	4618      	mov	r0, r3
 80115ec:	3710      	adds	r7, #16
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}
	...

080115f4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b084      	sub	sp, #16
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80115fe:	683b      	ldr	r3, [r7, #0]
 8011600:	885b      	ldrh	r3, [r3, #2]
 8011602:	0a1b      	lsrs	r3, r3, #8
 8011604:	b29b      	uxth	r3, r3
 8011606:	3b01      	subs	r3, #1
 8011608:	2b06      	cmp	r3, #6
 801160a:	f200 80c9 	bhi.w	80117a0 <USBD_GetDescriptor+0x1ac>
 801160e:	a201      	add	r2, pc, #4	; (adr r2, 8011614 <USBD_GetDescriptor+0x20>)
 8011610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011614:	08011631 	.word	0x08011631
 8011618:	08011649 	.word	0x08011649
 801161c:	08011689 	.word	0x08011689
 8011620:	080117a1 	.word	0x080117a1
 8011624:	080117a1 	.word	0x080117a1
 8011628:	0801174d 	.word	0x0801174d
 801162c:	08011773 	.word	0x08011773
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	687a      	ldr	r2, [r7, #4]
 801163a:	7c12      	ldrb	r2, [r2, #16]
 801163c:	f107 010a 	add.w	r1, r7, #10
 8011640:	4610      	mov	r0, r2
 8011642:	4798      	blx	r3
 8011644:	60f8      	str	r0, [r7, #12]
    break;
 8011646:	e0b0      	b.n	80117aa <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	7c1b      	ldrb	r3, [r3, #16]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d10d      	bne.n	801166c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011658:	f107 020a 	add.w	r2, r7, #10
 801165c:	4610      	mov	r0, r2
 801165e:	4798      	blx	r3
 8011660:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	3301      	adds	r3, #1
 8011666:	2202      	movs	r2, #2
 8011668:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 801166a:	e09e      	b.n	80117aa <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011674:	f107 020a 	add.w	r2, r7, #10
 8011678:	4610      	mov	r0, r2
 801167a:	4798      	blx	r3
 801167c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	3301      	adds	r3, #1
 8011682:	2202      	movs	r2, #2
 8011684:	701a      	strb	r2, [r3, #0]
    break;
 8011686:	e090      	b.n	80117aa <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	885b      	ldrh	r3, [r3, #2]
 801168c:	b2db      	uxtb	r3, r3
 801168e:	2b05      	cmp	r3, #5
 8011690:	d856      	bhi.n	8011740 <USBD_GetDescriptor+0x14c>
 8011692:	a201      	add	r2, pc, #4	; (adr r2, 8011698 <USBD_GetDescriptor+0xa4>)
 8011694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011698:	080116b1 	.word	0x080116b1
 801169c:	080116c9 	.word	0x080116c9
 80116a0:	080116e1 	.word	0x080116e1
 80116a4:	080116f9 	.word	0x080116f9
 80116a8:	08011711 	.word	0x08011711
 80116ac:	08011729 	.word	0x08011729
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80116b6:	685b      	ldr	r3, [r3, #4]
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	7c12      	ldrb	r2, [r2, #16]
 80116bc:	f107 010a 	add.w	r1, r7, #10
 80116c0:	4610      	mov	r0, r2
 80116c2:	4798      	blx	r3
 80116c4:	60f8      	str	r0, [r7, #12]
      break;
 80116c6:	e040      	b.n	801174a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80116ce:	689b      	ldr	r3, [r3, #8]
 80116d0:	687a      	ldr	r2, [r7, #4]
 80116d2:	7c12      	ldrb	r2, [r2, #16]
 80116d4:	f107 010a 	add.w	r1, r7, #10
 80116d8:	4610      	mov	r0, r2
 80116da:	4798      	blx	r3
 80116dc:	60f8      	str	r0, [r7, #12]
      break;
 80116de:	e034      	b.n	801174a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80116e6:	68db      	ldr	r3, [r3, #12]
 80116e8:	687a      	ldr	r2, [r7, #4]
 80116ea:	7c12      	ldrb	r2, [r2, #16]
 80116ec:	f107 010a 	add.w	r1, r7, #10
 80116f0:	4610      	mov	r0, r2
 80116f2:	4798      	blx	r3
 80116f4:	60f8      	str	r0, [r7, #12]
      break;
 80116f6:	e028      	b.n	801174a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80116fe:	691b      	ldr	r3, [r3, #16]
 8011700:	687a      	ldr	r2, [r7, #4]
 8011702:	7c12      	ldrb	r2, [r2, #16]
 8011704:	f107 010a 	add.w	r1, r7, #10
 8011708:	4610      	mov	r0, r2
 801170a:	4798      	blx	r3
 801170c:	60f8      	str	r0, [r7, #12]
      break;
 801170e:	e01c      	b.n	801174a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011716:	695b      	ldr	r3, [r3, #20]
 8011718:	687a      	ldr	r2, [r7, #4]
 801171a:	7c12      	ldrb	r2, [r2, #16]
 801171c:	f107 010a 	add.w	r1, r7, #10
 8011720:	4610      	mov	r0, r2
 8011722:	4798      	blx	r3
 8011724:	60f8      	str	r0, [r7, #12]
      break;
 8011726:	e010      	b.n	801174a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801172e:	699b      	ldr	r3, [r3, #24]
 8011730:	687a      	ldr	r2, [r7, #4]
 8011732:	7c12      	ldrb	r2, [r2, #16]
 8011734:	f107 010a 	add.w	r1, r7, #10
 8011738:	4610      	mov	r0, r2
 801173a:	4798      	blx	r3
 801173c:	60f8      	str	r0, [r7, #12]
      break;
 801173e:	e004      	b.n	801174a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8011740:	6839      	ldr	r1, [r7, #0]
 8011742:	6878      	ldr	r0, [r7, #4]
 8011744:	f000 f9ec 	bl	8011b20 <USBD_CtlError>
      return;
 8011748:	e044      	b.n	80117d4 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 801174a:	e02e      	b.n	80117aa <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	7c1b      	ldrb	r3, [r3, #16]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d109      	bne.n	8011768 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801175a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801175c:	f107 020a 	add.w	r2, r7, #10
 8011760:	4610      	mov	r0, r2
 8011762:	4798      	blx	r3
 8011764:	60f8      	str	r0, [r7, #12]
      break;
 8011766:	e020      	b.n	80117aa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8011768:	6839      	ldr	r1, [r7, #0]
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f000 f9d8 	bl	8011b20 <USBD_CtlError>
      return;
 8011770:	e030      	b.n	80117d4 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	7c1b      	ldrb	r3, [r3, #16]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d10d      	bne.n	8011796 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011782:	f107 020a 	add.w	r2, r7, #10
 8011786:	4610      	mov	r0, r2
 8011788:	4798      	blx	r3
 801178a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	3301      	adds	r3, #1
 8011790:	2207      	movs	r2, #7
 8011792:	701a      	strb	r2, [r3, #0]
      break; 
 8011794:	e009      	b.n	80117aa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8011796:	6839      	ldr	r1, [r7, #0]
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f000 f9c1 	bl	8011b20 <USBD_CtlError>
      return;
 801179e:	e019      	b.n	80117d4 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 80117a0:	6839      	ldr	r1, [r7, #0]
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f000 f9bc 	bl	8011b20 <USBD_CtlError>
    return;
 80117a8:	e014      	b.n	80117d4 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 80117aa:	897b      	ldrh	r3, [r7, #10]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d011      	beq.n	80117d4 <USBD_GetDescriptor+0x1e0>
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	88db      	ldrh	r3, [r3, #6]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d00d      	beq.n	80117d4 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	88da      	ldrh	r2, [r3, #6]
 80117bc:	897b      	ldrh	r3, [r7, #10]
 80117be:	4293      	cmp	r3, r2
 80117c0:	bf28      	it	cs
 80117c2:	4613      	movcs	r3, r2
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 80117c8:	897b      	ldrh	r3, [r7, #10]
 80117ca:	461a      	mov	r2, r3
 80117cc:	68f9      	ldr	r1, [r7, #12]
 80117ce:	6878      	ldr	r0, [r7, #4]
 80117d0:	f000 fa12 	bl	8011bf8 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 80117d4:	3710      	adds	r7, #16
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}
 80117da:	bf00      	nop

080117dc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b084      	sub	sp, #16
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
 80117e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	889b      	ldrh	r3, [r3, #4]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d12c      	bne.n	8011848 <USBD_SetAddress+0x6c>
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	88db      	ldrh	r3, [r3, #6]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d128      	bne.n	8011848 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	885b      	ldrh	r3, [r3, #2]
 80117fa:	b2db      	uxtb	r3, r3
 80117fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011800:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8011808:	2b03      	cmp	r3, #3
 801180a:	d104      	bne.n	8011816 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 801180c:	6839      	ldr	r1, [r7, #0]
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f000 f986 	bl	8011b20 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8011814:	e01c      	b.n	8011850 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	7bfa      	ldrb	r2, [r7, #15]
 801181a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 801181e:	7bfb      	ldrb	r3, [r7, #15]
 8011820:	4619      	mov	r1, r3
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f7f5 fb29 	bl	8006e7a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8011828:	6878      	ldr	r0, [r7, #4]
 801182a:	f000 fa43 	bl	8011cb4 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 801182e:	7bfb      	ldrb	r3, [r7, #15]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d004      	beq.n	801183e <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2202      	movs	r2, #2
 8011838:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 801183c:	e008      	b.n	8011850 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2201      	movs	r2, #1
 8011842:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8011846:	e003      	b.n	8011850 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8011848:	6839      	ldr	r1, [r7, #0]
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f000 f968 	bl	8011b20 <USBD_CtlError>
  } 
}
 8011850:	bf00      	nop
 8011852:	3710      	adds	r7, #16
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}

08011858 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	885b      	ldrh	r3, [r3, #2]
 8011866:	b2da      	uxtb	r2, r3
 8011868:	4b3e      	ldr	r3, [pc, #248]	; (8011964 <USBD_SetConfig+0x10c>)
 801186a:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 801186c:	4b3d      	ldr	r3, [pc, #244]	; (8011964 <USBD_SetConfig+0x10c>)
 801186e:	781b      	ldrb	r3, [r3, #0]
 8011870:	2b01      	cmp	r3, #1
 8011872:	d904      	bls.n	801187e <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8011874:	6839      	ldr	r1, [r7, #0]
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f000 f952 	bl	8011b20 <USBD_CtlError>
 801187c:	e06f      	b.n	801195e <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8011884:	2b02      	cmp	r3, #2
 8011886:	d002      	beq.n	801188e <USBD_SetConfig+0x36>
 8011888:	2b03      	cmp	r3, #3
 801188a:	d023      	beq.n	80118d4 <USBD_SetConfig+0x7c>
 801188c:	e062      	b.n	8011954 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 801188e:	4b35      	ldr	r3, [pc, #212]	; (8011964 <USBD_SetConfig+0x10c>)
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d01a      	beq.n	80118cc <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8011896:	4b33      	ldr	r3, [pc, #204]	; (8011964 <USBD_SetConfig+0x10c>)
 8011898:	781b      	ldrb	r3, [r3, #0]
 801189a:	461a      	mov	r2, r3
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2203      	movs	r2, #3
 80118a4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80118a8:	4b2e      	ldr	r3, [pc, #184]	; (8011964 <USBD_SetConfig+0x10c>)
 80118aa:	781b      	ldrb	r3, [r3, #0]
 80118ac:	4619      	mov	r1, r3
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f7ff fb23 	bl	8010efa <USBD_SetClassConfig>
 80118b4:	4603      	mov	r3, r0
 80118b6:	2b02      	cmp	r3, #2
 80118b8:	d104      	bne.n	80118c4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 80118ba:	6839      	ldr	r1, [r7, #0]
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f000 f92f 	bl	8011b20 <USBD_CtlError>
          return;
 80118c2:	e04c      	b.n	801195e <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 80118c4:	6878      	ldr	r0, [r7, #4]
 80118c6:	f000 f9f5 	bl	8011cb4 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 80118ca:	e048      	b.n	801195e <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	f000 f9f1 	bl	8011cb4 <USBD_CtlSendStatus>
      break;
 80118d2:	e044      	b.n	801195e <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80118d4:	4b23      	ldr	r3, [pc, #140]	; (8011964 <USBD_SetConfig+0x10c>)
 80118d6:	781b      	ldrb	r3, [r3, #0]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d112      	bne.n	8011902 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2202      	movs	r2, #2
 80118e0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80118e4:	4b1f      	ldr	r3, [pc, #124]	; (8011964 <USBD_SetConfig+0x10c>)
 80118e6:	781b      	ldrb	r3, [r3, #0]
 80118e8:	461a      	mov	r2, r3
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80118ee:	4b1d      	ldr	r3, [pc, #116]	; (8011964 <USBD_SetConfig+0x10c>)
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	4619      	mov	r1, r3
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	f7ff fb1f 	bl	8010f38 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80118fa:	6878      	ldr	r0, [r7, #4]
 80118fc:	f000 f9da 	bl	8011cb4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8011900:	e02d      	b.n	801195e <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8011902:	4b18      	ldr	r3, [pc, #96]	; (8011964 <USBD_SetConfig+0x10c>)
 8011904:	781b      	ldrb	r3, [r3, #0]
 8011906:	461a      	mov	r2, r3
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	685b      	ldr	r3, [r3, #4]
 801190c:	429a      	cmp	r2, r3
 801190e:	d01d      	beq.n	801194c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	685b      	ldr	r3, [r3, #4]
 8011914:	b2db      	uxtb	r3, r3
 8011916:	4619      	mov	r1, r3
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f7ff fb0d 	bl	8010f38 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801191e:	4b11      	ldr	r3, [pc, #68]	; (8011964 <USBD_SetConfig+0x10c>)
 8011920:	781b      	ldrb	r3, [r3, #0]
 8011922:	461a      	mov	r2, r3
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8011928:	4b0e      	ldr	r3, [pc, #56]	; (8011964 <USBD_SetConfig+0x10c>)
 801192a:	781b      	ldrb	r3, [r3, #0]
 801192c:	4619      	mov	r1, r3
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f7ff fae3 	bl	8010efa <USBD_SetClassConfig>
 8011934:	4603      	mov	r3, r0
 8011936:	2b02      	cmp	r3, #2
 8011938:	d104      	bne.n	8011944 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 801193a:	6839      	ldr	r1, [r7, #0]
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f000 f8ef 	bl	8011b20 <USBD_CtlError>
          return;
 8011942:	e00c      	b.n	801195e <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f000 f9b5 	bl	8011cb4 <USBD_CtlSendStatus>
      break;
 801194a:	e008      	b.n	801195e <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	f000 f9b1 	bl	8011cb4 <USBD_CtlSendStatus>
      break;
 8011952:	e004      	b.n	801195e <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8011954:	6839      	ldr	r1, [r7, #0]
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f000 f8e2 	bl	8011b20 <USBD_CtlError>
      break;
 801195c:	bf00      	nop
    }
  }
}
 801195e:	3708      	adds	r7, #8
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}
 8011964:	20000832 	.word	0x20000832

08011968 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b082      	sub	sp, #8
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	88db      	ldrh	r3, [r3, #6]
 8011976:	2b01      	cmp	r3, #1
 8011978:	d004      	beq.n	8011984 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 801197a:	6839      	ldr	r1, [r7, #0]
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	f000 f8cf 	bl	8011b20 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8011982:	e01f      	b.n	80119c4 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 801198a:	2b02      	cmp	r3, #2
 801198c:	d002      	beq.n	8011994 <USBD_GetConfig+0x2c>
 801198e:	2b03      	cmp	r3, #3
 8011990:	d00b      	beq.n	80119aa <USBD_GetConfig+0x42>
 8011992:	e012      	b.n	80119ba <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2200      	movs	r2, #0
 8011998:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 801199e:	2201      	movs	r2, #1
 80119a0:	4619      	mov	r1, r3
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f000 f928 	bl	8011bf8 <USBD_CtlSendData>
      break;
 80119a8:	e00c      	b.n	80119c4 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 80119ae:	2201      	movs	r2, #1
 80119b0:	4619      	mov	r1, r3
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f000 f920 	bl	8011bf8 <USBD_CtlSendData>
      break;
 80119b8:	e004      	b.n	80119c4 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 80119ba:	6839      	ldr	r1, [r7, #0]
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f000 f8af 	bl	8011b20 <USBD_CtlError>
      break;
 80119c2:	bf00      	nop
}
 80119c4:	bf00      	nop
 80119c6:	3708      	adds	r7, #8
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}

080119cc <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b082      	sub	sp, #8
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
 80119d4:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80119dc:	3b02      	subs	r3, #2
 80119de:	2b01      	cmp	r3, #1
 80119e0:	d815      	bhi.n	8011a0e <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	2201      	movs	r2, #1
 80119e6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d005      	beq.n	80119fe <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	68db      	ldr	r3, [r3, #12]
 80119f6:	f043 0202 	orr.w	r2, r3, #2
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8011a02:	2202      	movs	r2, #2
 8011a04:	4619      	mov	r1, r3
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f000 f8f6 	bl	8011bf8 <USBD_CtlSendData>
                      2);
    break;
 8011a0c:	e004      	b.n	8011a18 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8011a0e:	6839      	ldr	r1, [r7, #0]
 8011a10:	6878      	ldr	r0, [r7, #4]
 8011a12:	f000 f885 	bl	8011b20 <USBD_CtlError>
    break;
 8011a16:	bf00      	nop
  }
}
 8011a18:	bf00      	nop
 8011a1a:	3708      	adds	r7, #8
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}

08011a20 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b082      	sub	sp, #8
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
 8011a28:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	885b      	ldrh	r3, [r3, #2]
 8011a2e:	2b01      	cmp	r3, #1
 8011a30:	d10d      	bne.n	8011a4e <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2201      	movs	r2, #1
 8011a36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011a40:	689b      	ldr	r3, [r3, #8]
 8011a42:	6839      	ldr	r1, [r7, #0]
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8011a48:	6878      	ldr	r0, [r7, #4]
 8011a4a:	f000 f933 	bl	8011cb4 <USBD_CtlSendStatus>
  }

}
 8011a4e:	bf00      	nop
 8011a50:	3708      	adds	r7, #8
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}

08011a56 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8011a56:	b580      	push	{r7, lr}
 8011a58:	b082      	sub	sp, #8
 8011a5a:	af00      	add	r7, sp, #0
 8011a5c:	6078      	str	r0, [r7, #4]
 8011a5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8011a66:	3b02      	subs	r3, #2
 8011a68:	2b01      	cmp	r3, #1
 8011a6a:	d812      	bhi.n	8011a92 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	885b      	ldrh	r3, [r3, #2]
 8011a70:	2b01      	cmp	r3, #1
 8011a72:	d113      	bne.n	8011a9c <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2200      	movs	r2, #0
 8011a78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011a82:	689b      	ldr	r3, [r3, #8]
 8011a84:	6839      	ldr	r1, [r7, #0]
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f000 f912 	bl	8011cb4 <USBD_CtlSendStatus>
    }
    break;
 8011a90:	e004      	b.n	8011a9c <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8011a92:	6839      	ldr	r1, [r7, #0]
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f000 f843 	bl	8011b20 <USBD_CtlError>
    break;
 8011a9a:	e000      	b.n	8011a9e <USBD_ClrFeature+0x48>
    break;
 8011a9c:	bf00      	nop
  }
}
 8011a9e:	bf00      	nop
 8011aa0:	3708      	adds	r7, #8
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}

08011aa6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011aa6:	b480      	push	{r7}
 8011aa8:	b083      	sub	sp, #12
 8011aaa:	af00      	add	r7, sp, #0
 8011aac:	6078      	str	r0, [r7, #4]
 8011aae:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8011ab0:	683b      	ldr	r3, [r7, #0]
 8011ab2:	781a      	ldrb	r2, [r3, #0]
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	785a      	ldrb	r2, [r3, #1]
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	3302      	adds	r3, #2
 8011ac4:	781b      	ldrb	r3, [r3, #0]
 8011ac6:	b29a      	uxth	r2, r3
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	3303      	adds	r3, #3
 8011acc:	781b      	ldrb	r3, [r3, #0]
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	021b      	lsls	r3, r3, #8
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	4413      	add	r3, r2
 8011ad6:	b29a      	uxth	r2, r3
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	3304      	adds	r3, #4
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	b29a      	uxth	r2, r3
 8011ae4:	683b      	ldr	r3, [r7, #0]
 8011ae6:	3305      	adds	r3, #5
 8011ae8:	781b      	ldrb	r3, [r3, #0]
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	021b      	lsls	r3, r3, #8
 8011aee:	b29b      	uxth	r3, r3
 8011af0:	4413      	add	r3, r2
 8011af2:	b29a      	uxth	r2, r3
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	3306      	adds	r3, #6
 8011afc:	781b      	ldrb	r3, [r3, #0]
 8011afe:	b29a      	uxth	r2, r3
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	3307      	adds	r3, #7
 8011b04:	781b      	ldrb	r3, [r3, #0]
 8011b06:	b29b      	uxth	r3, r3
 8011b08:	021b      	lsls	r3, r3, #8
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	4413      	add	r3, r2
 8011b0e:	b29a      	uxth	r2, r3
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	80da      	strh	r2, [r3, #6]

}
 8011b14:	bf00      	nop
 8011b16:	370c      	adds	r7, #12
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1e:	4770      	bx	lr

08011b20 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b082      	sub	sp, #8
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
 8011b28:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8011b2a:	2180      	movs	r1, #128	; 0x80
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f7f5 f952 	bl	8006dd6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8011b32:	2100      	movs	r1, #0
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f7f5 f94e 	bl	8006dd6 <USBD_LL_StallEP>
}
 8011b3a:	bf00      	nop
 8011b3c:	3708      	adds	r7, #8
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}

08011b42 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011b42:	b580      	push	{r7, lr}
 8011b44:	b086      	sub	sp, #24
 8011b46:	af00      	add	r7, sp, #0
 8011b48:	60f8      	str	r0, [r7, #12]
 8011b4a:	60b9      	str	r1, [r7, #8]
 8011b4c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8011b4e:	2300      	movs	r3, #0
 8011b50:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d033      	beq.n	8011bc0 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8011b58:	68f8      	ldr	r0, [r7, #12]
 8011b5a:	f000 f835 	bl	8011bc8 <USBD_GetLen>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	3301      	adds	r3, #1
 8011b62:	b29b      	uxth	r3, r3
 8011b64:	005b      	lsls	r3, r3, #1
 8011b66:	b29a      	uxth	r2, r3
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8011b6c:	7dfb      	ldrb	r3, [r7, #23]
 8011b6e:	1c5a      	adds	r2, r3, #1
 8011b70:	75fa      	strb	r2, [r7, #23]
 8011b72:	461a      	mov	r2, r3
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	4413      	add	r3, r2
 8011b78:	687a      	ldr	r2, [r7, #4]
 8011b7a:	8812      	ldrh	r2, [r2, #0]
 8011b7c:	b2d2      	uxtb	r2, r2
 8011b7e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8011b80:	7dfb      	ldrb	r3, [r7, #23]
 8011b82:	1c5a      	adds	r2, r3, #1
 8011b84:	75fa      	strb	r2, [r7, #23]
 8011b86:	461a      	mov	r2, r3
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	4413      	add	r3, r2
 8011b8c:	2203      	movs	r2, #3
 8011b8e:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8011b90:	e012      	b.n	8011bb8 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8011b92:	7dfb      	ldrb	r3, [r7, #23]
 8011b94:	1c5a      	adds	r2, r3, #1
 8011b96:	75fa      	strb	r2, [r7, #23]
 8011b98:	461a      	mov	r2, r3
 8011b9a:	68bb      	ldr	r3, [r7, #8]
 8011b9c:	441a      	add	r2, r3
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	1c59      	adds	r1, r3, #1
 8011ba2:	60f9      	str	r1, [r7, #12]
 8011ba4:	781b      	ldrb	r3, [r3, #0]
 8011ba6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8011ba8:	7dfb      	ldrb	r3, [r7, #23]
 8011baa:	1c5a      	adds	r2, r3, #1
 8011bac:	75fa      	strb	r2, [r7, #23]
 8011bae:	461a      	mov	r2, r3
 8011bb0:	68bb      	ldr	r3, [r7, #8]
 8011bb2:	4413      	add	r3, r2
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d1e8      	bne.n	8011b92 <USBD_GetString+0x50>
    }
  } 
}
 8011bc0:	bf00      	nop
 8011bc2:	3718      	adds	r7, #24
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}

08011bc8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011bc8:	b480      	push	{r7}
 8011bca:	b085      	sub	sp, #20
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8011bd4:	e005      	b.n	8011be2 <USBD_GetLen+0x1a>
    {
        len++;
 8011bd6:	7bfb      	ldrb	r3, [r7, #15]
 8011bd8:	3301      	adds	r3, #1
 8011bda:	73fb      	strb	r3, [r7, #15]
        buf++;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	3301      	adds	r3, #1
 8011be0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d1f5      	bne.n	8011bd6 <USBD_GetLen+0xe>
    }

    return len;
 8011bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3714      	adds	r7, #20
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf6:	4770      	bx	lr

08011bf8 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b084      	sub	sp, #16
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	60f8      	str	r0, [r7, #12]
 8011c00:	60b9      	str	r1, [r7, #8]
 8011c02:	4613      	mov	r3, r2
 8011c04:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	2202      	movs	r2, #2
 8011c0a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8011c0e:	88fa      	ldrh	r2, [r7, #6]
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8011c14:	88fa      	ldrh	r2, [r7, #6]
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8011c1a:	88fb      	ldrh	r3, [r7, #6]
 8011c1c:	68ba      	ldr	r2, [r7, #8]
 8011c1e:	2100      	movs	r1, #0
 8011c20:	68f8      	ldr	r0, [r7, #12]
 8011c22:	f7f5 f93d 	bl	8006ea0 <USBD_LL_Transmit>
  
  return USBD_OK;
 8011c26:	2300      	movs	r3, #0
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3710      	adds	r7, #16
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b084      	sub	sp, #16
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	60f8      	str	r0, [r7, #12]
 8011c38:	60b9      	str	r1, [r7, #8]
 8011c3a:	4613      	mov	r3, r2
 8011c3c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8011c3e:	88fb      	ldrh	r3, [r7, #6]
 8011c40:	68ba      	ldr	r2, [r7, #8]
 8011c42:	2100      	movs	r1, #0
 8011c44:	68f8      	ldr	r0, [r7, #12]
 8011c46:	f7f5 f92b 	bl	8006ea0 <USBD_LL_Transmit>
  
  return USBD_OK;
 8011c4a:	2300      	movs	r3, #0
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3710      	adds	r7, #16
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b084      	sub	sp, #16
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	60f8      	str	r0, [r7, #12]
 8011c5c:	60b9      	str	r1, [r7, #8]
 8011c5e:	4613      	mov	r3, r2
 8011c60:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	2203      	movs	r2, #3
 8011c66:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8011c6a:	88fa      	ldrh	r2, [r7, #6]
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8011c72:	88fa      	ldrh	r2, [r7, #6]
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8011c7a:	88fb      	ldrh	r3, [r7, #6]
 8011c7c:	68ba      	ldr	r2, [r7, #8]
 8011c7e:	2100      	movs	r1, #0
 8011c80:	68f8      	ldr	r0, [r7, #12]
 8011c82:	f7f5 f924 	bl	8006ece <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8011c86:	2300      	movs	r3, #0
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	3710      	adds	r7, #16
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}

08011c90 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b084      	sub	sp, #16
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	60f8      	str	r0, [r7, #12]
 8011c98:	60b9      	str	r1, [r7, #8]
 8011c9a:	4613      	mov	r3, r2
 8011c9c:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8011c9e:	88fb      	ldrh	r3, [r7, #6]
 8011ca0:	68ba      	ldr	r2, [r7, #8]
 8011ca2:	2100      	movs	r1, #0
 8011ca4:	68f8      	ldr	r0, [r7, #12]
 8011ca6:	f7f5 f912 	bl	8006ece <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8011caa:	2300      	movs	r3, #0
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	3710      	adds	r7, #16
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b082      	sub	sp, #8
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2204      	movs	r2, #4
 8011cc0:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	2100      	movs	r1, #0
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f7f5 f8e8 	bl	8006ea0 <USBD_LL_Transmit>
  
  return USBD_OK;
 8011cd0:	2300      	movs	r3, #0
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	3708      	adds	r7, #8
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}

08011cda <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8011cda:	b580      	push	{r7, lr}
 8011cdc:	b082      	sub	sp, #8
 8011cde:	af00      	add	r7, sp, #0
 8011ce0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	2205      	movs	r2, #5
 8011ce6:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8011cea:	2300      	movs	r3, #0
 8011cec:	2200      	movs	r2, #0
 8011cee:	2100      	movs	r1, #0
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f7f5 f8ec 	bl	8006ece <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8011cf6:	2300      	movs	r3, #0
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3708      	adds	r7, #8
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b084      	sub	sp, #16
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	4603      	mov	r3, r0
 8011d08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011d0a:	79fb      	ldrb	r3, [r7, #7]
 8011d0c:	4a08      	ldr	r2, [pc, #32]	; (8011d30 <disk_status+0x30>)
 8011d0e:	009b      	lsls	r3, r3, #2
 8011d10:	4413      	add	r3, r2
 8011d12:	685b      	ldr	r3, [r3, #4]
 8011d14:	685b      	ldr	r3, [r3, #4]
 8011d16:	79fa      	ldrb	r2, [r7, #7]
 8011d18:	4905      	ldr	r1, [pc, #20]	; (8011d30 <disk_status+0x30>)
 8011d1a:	440a      	add	r2, r1
 8011d1c:	7a12      	ldrb	r2, [r2, #8]
 8011d1e:	4610      	mov	r0, r2
 8011d20:	4798      	blx	r3
 8011d22:	4603      	mov	r3, r0
 8011d24:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d28:	4618      	mov	r0, r3
 8011d2a:	3710      	adds	r7, #16
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	bd80      	pop	{r7, pc}
 8011d30:	20000854 	.word	0x20000854

08011d34 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b084      	sub	sp, #16
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8011d42:	79fb      	ldrb	r3, [r7, #7]
 8011d44:	4a0d      	ldr	r2, [pc, #52]	; (8011d7c <disk_initialize+0x48>)
 8011d46:	5cd3      	ldrb	r3, [r2, r3]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d111      	bne.n	8011d70 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8011d4c:	79fb      	ldrb	r3, [r7, #7]
 8011d4e:	4a0b      	ldr	r2, [pc, #44]	; (8011d7c <disk_initialize+0x48>)
 8011d50:	2101      	movs	r1, #1
 8011d52:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011d54:	79fb      	ldrb	r3, [r7, #7]
 8011d56:	4a09      	ldr	r2, [pc, #36]	; (8011d7c <disk_initialize+0x48>)
 8011d58:	009b      	lsls	r3, r3, #2
 8011d5a:	4413      	add	r3, r2
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	79fa      	ldrb	r2, [r7, #7]
 8011d62:	4906      	ldr	r1, [pc, #24]	; (8011d7c <disk_initialize+0x48>)
 8011d64:	440a      	add	r2, r1
 8011d66:	7a12      	ldrb	r2, [r2, #8]
 8011d68:	4610      	mov	r0, r2
 8011d6a:	4798      	blx	r3
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	3710      	adds	r7, #16
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}
 8011d7a:	bf00      	nop
 8011d7c:	20000854 	.word	0x20000854

08011d80 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011d80:	b590      	push	{r4, r7, lr}
 8011d82:	b087      	sub	sp, #28
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	60b9      	str	r1, [r7, #8]
 8011d88:	607a      	str	r2, [r7, #4]
 8011d8a:	603b      	str	r3, [r7, #0]
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011d90:	7bfb      	ldrb	r3, [r7, #15]
 8011d92:	4a0a      	ldr	r2, [pc, #40]	; (8011dbc <disk_read+0x3c>)
 8011d94:	009b      	lsls	r3, r3, #2
 8011d96:	4413      	add	r3, r2
 8011d98:	685b      	ldr	r3, [r3, #4]
 8011d9a:	689c      	ldr	r4, [r3, #8]
 8011d9c:	7bfb      	ldrb	r3, [r7, #15]
 8011d9e:	4a07      	ldr	r2, [pc, #28]	; (8011dbc <disk_read+0x3c>)
 8011da0:	4413      	add	r3, r2
 8011da2:	7a18      	ldrb	r0, [r3, #8]
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	687a      	ldr	r2, [r7, #4]
 8011da8:	68b9      	ldr	r1, [r7, #8]
 8011daa:	47a0      	blx	r4
 8011dac:	4603      	mov	r3, r0
 8011dae:	75fb      	strb	r3, [r7, #23]
  return res;
 8011db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	371c      	adds	r7, #28
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd90      	pop	{r4, r7, pc}
 8011dba:	bf00      	nop
 8011dbc:	20000854 	.word	0x20000854

08011dc0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011dc0:	b590      	push	{r4, r7, lr}
 8011dc2:	b087      	sub	sp, #28
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	60b9      	str	r1, [r7, #8]
 8011dc8:	607a      	str	r2, [r7, #4]
 8011dca:	603b      	str	r3, [r7, #0]
 8011dcc:	4603      	mov	r3, r0
 8011dce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011dd0:	7bfb      	ldrb	r3, [r7, #15]
 8011dd2:	4a0a      	ldr	r2, [pc, #40]	; (8011dfc <disk_write+0x3c>)
 8011dd4:	009b      	lsls	r3, r3, #2
 8011dd6:	4413      	add	r3, r2
 8011dd8:	685b      	ldr	r3, [r3, #4]
 8011dda:	68dc      	ldr	r4, [r3, #12]
 8011ddc:	7bfb      	ldrb	r3, [r7, #15]
 8011dde:	4a07      	ldr	r2, [pc, #28]	; (8011dfc <disk_write+0x3c>)
 8011de0:	4413      	add	r3, r2
 8011de2:	7a18      	ldrb	r0, [r3, #8]
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	687a      	ldr	r2, [r7, #4]
 8011de8:	68b9      	ldr	r1, [r7, #8]
 8011dea:	47a0      	blx	r4
 8011dec:	4603      	mov	r3, r0
 8011dee:	75fb      	strb	r3, [r7, #23]
  return res;
 8011df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	371c      	adds	r7, #28
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd90      	pop	{r4, r7, pc}
 8011dfa:	bf00      	nop
 8011dfc:	20000854 	.word	0x20000854

08011e00 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b084      	sub	sp, #16
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	4603      	mov	r3, r0
 8011e08:	603a      	str	r2, [r7, #0]
 8011e0a:	71fb      	strb	r3, [r7, #7]
 8011e0c:	460b      	mov	r3, r1
 8011e0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011e10:	79fb      	ldrb	r3, [r7, #7]
 8011e12:	4a09      	ldr	r2, [pc, #36]	; (8011e38 <disk_ioctl+0x38>)
 8011e14:	009b      	lsls	r3, r3, #2
 8011e16:	4413      	add	r3, r2
 8011e18:	685b      	ldr	r3, [r3, #4]
 8011e1a:	691b      	ldr	r3, [r3, #16]
 8011e1c:	79fa      	ldrb	r2, [r7, #7]
 8011e1e:	4906      	ldr	r1, [pc, #24]	; (8011e38 <disk_ioctl+0x38>)
 8011e20:	440a      	add	r2, r1
 8011e22:	7a10      	ldrb	r0, [r2, #8]
 8011e24:	79b9      	ldrb	r1, [r7, #6]
 8011e26:	683a      	ldr	r2, [r7, #0]
 8011e28:	4798      	blx	r3
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	73fb      	strb	r3, [r7, #15]
  return res;
 8011e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	3710      	adds	r7, #16
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}
 8011e38:	20000854 	.word	0x20000854

08011e3c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b082      	sub	sp, #8
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	4603      	mov	r3, r0
 8011e44:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011e46:	4b0b      	ldr	r3, [pc, #44]	; (8011e74 <SD_initialize+0x38>)
 8011e48:	2201      	movs	r2, #1
 8011e4a:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8011e4c:	f7ef f9c6 	bl	80011dc <BSP_SD_Init>
 8011e50:	4603      	mov	r3, r0
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d107      	bne.n	8011e66 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011e56:	4b07      	ldr	r3, [pc, #28]	; (8011e74 <SD_initialize+0x38>)
 8011e58:	781b      	ldrb	r3, [r3, #0]
 8011e5a:	b2db      	uxtb	r3, r3
 8011e5c:	f023 0301 	bic.w	r3, r3, #1
 8011e60:	b2da      	uxtb	r2, r3
 8011e62:	4b04      	ldr	r3, [pc, #16]	; (8011e74 <SD_initialize+0x38>)
 8011e64:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011e66:	4b03      	ldr	r3, [pc, #12]	; (8011e74 <SD_initialize+0x38>)
 8011e68:	781b      	ldrb	r3, [r3, #0]
 8011e6a:	b2db      	uxtb	r3, r3
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3708      	adds	r7, #8
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}
 8011e74:	200002a6 	.word	0x200002a6

08011e78 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b082      	sub	sp, #8
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	4603      	mov	r3, r0
 8011e80:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011e82:	4b0b      	ldr	r3, [pc, #44]	; (8011eb0 <SD_status+0x38>)
 8011e84:	2201      	movs	r2, #1
 8011e86:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetStatus() == MSD_OK)
 8011e88:	f7ef faa0 	bl	80013cc <BSP_SD_GetStatus>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d107      	bne.n	8011ea2 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011e92:	4b07      	ldr	r3, [pc, #28]	; (8011eb0 <SD_status+0x38>)
 8011e94:	781b      	ldrb	r3, [r3, #0]
 8011e96:	b2db      	uxtb	r3, r3
 8011e98:	f023 0301 	bic.w	r3, r3, #1
 8011e9c:	b2da      	uxtb	r2, r3
 8011e9e:	4b04      	ldr	r3, [pc, #16]	; (8011eb0 <SD_status+0x38>)
 8011ea0:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8011ea2:	4b03      	ldr	r3, [pc, #12]	; (8011eb0 <SD_status+0x38>)
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	b2db      	uxtb	r3, r3
}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	3708      	adds	r7, #8
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}
 8011eb0:	200002a6 	.word	0x200002a6

08011eb4 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011eb4:	b590      	push	{r4, r7, lr}
 8011eb6:	b089      	sub	sp, #36	; 0x24
 8011eb8:	af02      	add	r7, sp, #8
 8011eba:	60b9      	str	r1, [r7, #8]
 8011ebc:	607a      	str	r2, [r7, #4]
 8011ebe:	603b      	str	r3, [r7, #0]
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_OK;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
                       (uint64_t) (sector * BLOCK_SIZE), 
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	025b      	lsls	r3, r3, #9
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8011ecc:	f04f 0400 	mov.w	r4, #0
 8011ed0:	683a      	ldr	r2, [r7, #0]
 8011ed2:	9201      	str	r2, [sp, #4]
 8011ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011ed8:	9200      	str	r2, [sp, #0]
 8011eda:	461a      	mov	r2, r3
 8011edc:	4623      	mov	r3, r4
 8011ede:	68b8      	ldr	r0, [r7, #8]
 8011ee0:	f7ef f9d2 	bl	8001288 <BSP_SD_ReadBlocks_DMA>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d001      	beq.n	8011eee <SD_read+0x3a>
                       BLOCK_SIZE, 
                       count) != MSD_OK)
  {
    res = RES_ERROR;
 8011eea:	2301      	movs	r3, #1
 8011eec:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8011eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	371c      	adds	r7, #28
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd90      	pop	{r4, r7, pc}

08011ef8 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011ef8:	b590      	push	{r4, r7, lr}
 8011efa:	b089      	sub	sp, #36	; 0x24
 8011efc:	af02      	add	r7, sp, #8
 8011efe:	60b9      	str	r1, [r7, #8]
 8011f00:	607a      	str	r2, [r7, #4]
 8011f02:	603b      	str	r3, [r7, #0]
 8011f04:	4603      	mov	r3, r0
 8011f06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_OK;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
                        (uint64_t)(sector * BLOCK_SIZE), 
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	025b      	lsls	r3, r3, #9
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011f10:	f04f 0400 	mov.w	r4, #0
 8011f14:	683a      	ldr	r2, [r7, #0]
 8011f16:	9201      	str	r2, [sp, #4]
 8011f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011f1c:	9200      	str	r2, [sp, #0]
 8011f1e:	461a      	mov	r2, r3
 8011f20:	4623      	mov	r3, r4
 8011f22:	68b8      	ldr	r0, [r7, #8]
 8011f24:	f7ef f9f0 	bl	8001308 <BSP_SD_WriteBlocks_DMA>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d001      	beq.n	8011f32 <SD_write+0x3a>
                        BLOCK_SIZE, count) != MSD_OK)
  {
    res = RES_ERROR;
 8011f2e:	2301      	movs	r3, #1
 8011f30:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8011f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f34:	4618      	mov	r0, r3
 8011f36:	371c      	adds	r7, #28
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd90      	pop	{r4, r7, pc}

08011f3c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011f3c:	b5b0      	push	{r4, r5, r7, lr}
 8011f3e:	b09a      	sub	sp, #104	; 0x68
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	4603      	mov	r3, r0
 8011f44:	603a      	str	r2, [r7, #0]
 8011f46:	71fb      	strb	r3, [r7, #7]
 8011f48:	460b      	mov	r3, r1
 8011f4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011f4c:	2301      	movs	r3, #1
 8011f4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011f52:	4b21      	ldr	r3, [pc, #132]	; (8011fd8 <SD_ioctl+0x9c>)
 8011f54:	781b      	ldrb	r3, [r3, #0]
 8011f56:	b2db      	uxtb	r3, r3
 8011f58:	f003 0301 	and.w	r3, r3, #1
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d001      	beq.n	8011f64 <SD_ioctl+0x28>
 8011f60:	2303      	movs	r3, #3
 8011f62:	e035      	b.n	8011fd0 <SD_ioctl+0x94>
  
  switch (cmd)
 8011f64:	79bb      	ldrb	r3, [r7, #6]
 8011f66:	2b03      	cmp	r3, #3
 8011f68:	d82d      	bhi.n	8011fc6 <SD_ioctl+0x8a>
 8011f6a:	a201      	add	r2, pc, #4	; (adr r2, 8011f70 <SD_ioctl+0x34>)
 8011f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f70:	08011f81 	.word	0x08011f81
 8011f74:	08011f89 	.word	0x08011f89
 8011f78:	08011fad 	.word	0x08011fad
 8011f7c:	08011fbd 	.word	0x08011fbd
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011f80:	2300      	movs	r3, #0
 8011f82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    break;
 8011f86:	e021      	b.n	8011fcc <SD_ioctl+0x90>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011f88:	f107 0308 	add.w	r3, r7, #8
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f7ef fa27 	bl	80013e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.CardCapacity / BLOCK_SIZE;
 8011f92:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8011f96:	0a54      	lsrs	r4, r2, #9
 8011f98:	ea44 54c3 	orr.w	r4, r4, r3, lsl #23
 8011f9c:	0a5d      	lsrs	r5, r3, #9
 8011f9e:	4622      	mov	r2, r4
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    break;
 8011faa:	e00f      	b.n	8011fcc <SD_ioctl+0x90>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    *(WORD*)buff = BLOCK_SIZE;
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011fb2:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    break;
 8011fba:	e007      	b.n	8011fcc <SD_ioctl+0x90>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = BLOCK_SIZE;
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011fc2:	601a      	str	r2, [r3, #0]
    break;
 8011fc4:	e002      	b.n	8011fcc <SD_ioctl+0x90>
  
  default:
    res = RES_PARERR;
 8011fc6:	2304      	movs	r3, #4
 8011fc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  return res;
 8011fcc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3768      	adds	r7, #104	; 0x68
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8011fd8:	200002a6 	.word	0x200002a6

08011fdc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011fdc:	b480      	push	{r7}
 8011fde:	b087      	sub	sp, #28
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	60f8      	str	r0, [r7, #12]
 8011fe4:	60b9      	str	r1, [r7, #8]
 8011fe6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8011ff0:	e007      	b.n	8012002 <mem_cpy+0x26>
		*d++ = *s++;
 8011ff2:	697b      	ldr	r3, [r7, #20]
 8011ff4:	1c5a      	adds	r2, r3, #1
 8011ff6:	617a      	str	r2, [r7, #20]
 8011ff8:	693a      	ldr	r2, [r7, #16]
 8011ffa:	1c51      	adds	r1, r2, #1
 8011ffc:	6139      	str	r1, [r7, #16]
 8011ffe:	7812      	ldrb	r2, [r2, #0]
 8012000:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	1e5a      	subs	r2, r3, #1
 8012006:	607a      	str	r2, [r7, #4]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d1f2      	bne.n	8011ff2 <mem_cpy+0x16>
}
 801200c:	bf00      	nop
 801200e:	371c      	adds	r7, #28
 8012010:	46bd      	mov	sp, r7
 8012012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012016:	4770      	bx	lr

08012018 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012018:	b480      	push	{r7}
 801201a:	b087      	sub	sp, #28
 801201c:	af00      	add	r7, sp, #0
 801201e:	60f8      	str	r0, [r7, #12]
 8012020:	60b9      	str	r1, [r7, #8]
 8012022:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8012028:	e005      	b.n	8012036 <mem_set+0x1e>
		*d++ = (BYTE)val;
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	1c5a      	adds	r2, r3, #1
 801202e:	617a      	str	r2, [r7, #20]
 8012030:	68ba      	ldr	r2, [r7, #8]
 8012032:	b2d2      	uxtb	r2, r2
 8012034:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	1e5a      	subs	r2, r3, #1
 801203a:	607a      	str	r2, [r7, #4]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d1f4      	bne.n	801202a <mem_set+0x12>
}
 8012040:	bf00      	nop
 8012042:	371c      	adds	r7, #28
 8012044:	46bd      	mov	sp, r7
 8012046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204a:	4770      	bx	lr

0801204c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 801204c:	b480      	push	{r7}
 801204e:	b089      	sub	sp, #36	; 0x24
 8012050:	af00      	add	r7, sp, #0
 8012052:	60f8      	str	r0, [r7, #12]
 8012054:	60b9      	str	r1, [r7, #8]
 8012056:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	61fb      	str	r3, [r7, #28]
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012060:	2300      	movs	r3, #0
 8012062:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8012064:	bf00      	nop
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	1e5a      	subs	r2, r3, #1
 801206a:	607a      	str	r2, [r7, #4]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d00d      	beq.n	801208c <mem_cmp+0x40>
 8012070:	69fb      	ldr	r3, [r7, #28]
 8012072:	1c5a      	adds	r2, r3, #1
 8012074:	61fa      	str	r2, [r7, #28]
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	4619      	mov	r1, r3
 801207a:	69bb      	ldr	r3, [r7, #24]
 801207c:	1c5a      	adds	r2, r3, #1
 801207e:	61ba      	str	r2, [r7, #24]
 8012080:	781b      	ldrb	r3, [r3, #0]
 8012082:	1acb      	subs	r3, r1, r3
 8012084:	617b      	str	r3, [r7, #20]
 8012086:	697b      	ldr	r3, [r7, #20]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d0ec      	beq.n	8012066 <mem_cmp+0x1a>
	return r;
 801208c:	697b      	ldr	r3, [r7, #20]
}
 801208e:	4618      	mov	r0, r3
 8012090:	3724      	adds	r7, #36	; 0x24
 8012092:	46bd      	mov	sp, r7
 8012094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012098:	4770      	bx	lr

0801209a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 801209a:	b480      	push	{r7}
 801209c:	b083      	sub	sp, #12
 801209e:	af00      	add	r7, sp, #0
 80120a0:	6078      	str	r0, [r7, #4]
 80120a2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80120a4:	e002      	b.n	80120ac <chk_chr+0x12>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	3301      	adds	r3, #1
 80120aa:	607b      	str	r3, [r7, #4]
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	781b      	ldrb	r3, [r3, #0]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d005      	beq.n	80120c0 <chk_chr+0x26>
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	781b      	ldrb	r3, [r3, #0]
 80120b8:	461a      	mov	r2, r3
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	429a      	cmp	r2, r3
 80120be:	d1f2      	bne.n	80120a6 <chk_chr+0xc>
	return *str;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	781b      	ldrb	r3, [r3, #0]
}
 80120c4:	4618      	mov	r0, r3
 80120c6:	370c      	adds	r7, #12
 80120c8:	46bd      	mov	sp, r7
 80120ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ce:	4770      	bx	lr

080120d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80120d0:	b480      	push	{r7}
 80120d2:	b085      	sub	sp, #20
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
 80120d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80120da:	2300      	movs	r3, #0
 80120dc:	60bb      	str	r3, [r7, #8]
 80120de:	68bb      	ldr	r3, [r7, #8]
 80120e0:	60fb      	str	r3, [r7, #12]
 80120e2:	e038      	b.n	8012156 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80120e4:	4930      	ldr	r1, [pc, #192]	; (80121a8 <chk_lock+0xd8>)
 80120e6:	68fa      	ldr	r2, [r7, #12]
 80120e8:	4613      	mov	r3, r2
 80120ea:	005b      	lsls	r3, r3, #1
 80120ec:	4413      	add	r3, r2
 80120ee:	009b      	lsls	r3, r3, #2
 80120f0:	440b      	add	r3, r1
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d029      	beq.n	801214c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80120f8:	492b      	ldr	r1, [pc, #172]	; (80121a8 <chk_lock+0xd8>)
 80120fa:	68fa      	ldr	r2, [r7, #12]
 80120fc:	4613      	mov	r3, r2
 80120fe:	005b      	lsls	r3, r3, #1
 8012100:	4413      	add	r3, r2
 8012102:	009b      	lsls	r3, r3, #2
 8012104:	440b      	add	r3, r1
 8012106:	681a      	ldr	r2, [r3, #0]
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801210e:	429a      	cmp	r2, r3
 8012110:	d11e      	bne.n	8012150 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8012112:	4925      	ldr	r1, [pc, #148]	; (80121a8 <chk_lock+0xd8>)
 8012114:	68fa      	ldr	r2, [r7, #12]
 8012116:	4613      	mov	r3, r2
 8012118:	005b      	lsls	r3, r3, #1
 801211a:	4413      	add	r3, r2
 801211c:	009b      	lsls	r3, r3, #2
 801211e:	440b      	add	r3, r1
 8012120:	3304      	adds	r3, #4
 8012122:	681a      	ldr	r2, [r3, #0]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 801212a:	429a      	cmp	r2, r3
 801212c:	d110      	bne.n	8012150 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 801212e:	491e      	ldr	r1, [pc, #120]	; (80121a8 <chk_lock+0xd8>)
 8012130:	68fa      	ldr	r2, [r7, #12]
 8012132:	4613      	mov	r3, r2
 8012134:	005b      	lsls	r3, r3, #1
 8012136:	4413      	add	r3, r2
 8012138:	009b      	lsls	r3, r3, #2
 801213a:	440b      	add	r3, r1
 801213c:	3308      	adds	r3, #8
 801213e:	881a      	ldrh	r2, [r3, #0]
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8012146:	429a      	cmp	r2, r3
 8012148:	d102      	bne.n	8012150 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 801214a:	e007      	b.n	801215c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 801214c:	2301      	movs	r3, #1
 801214e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	3301      	adds	r3, #1
 8012154:	60fb      	str	r3, [r7, #12]
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	2b01      	cmp	r3, #1
 801215a:	d9c3      	bls.n	80120e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	2b02      	cmp	r3, #2
 8012160:	d109      	bne.n	8012176 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d102      	bne.n	801216e <chk_lock+0x9e>
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	2b02      	cmp	r3, #2
 801216c:	d101      	bne.n	8012172 <chk_lock+0xa2>
 801216e:	2300      	movs	r3, #0
 8012170:	e013      	b.n	801219a <chk_lock+0xca>
 8012172:	2312      	movs	r3, #18
 8012174:	e011      	b.n	801219a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d10b      	bne.n	8012194 <chk_lock+0xc4>
 801217c:	490a      	ldr	r1, [pc, #40]	; (80121a8 <chk_lock+0xd8>)
 801217e:	68fa      	ldr	r2, [r7, #12]
 8012180:	4613      	mov	r3, r2
 8012182:	005b      	lsls	r3, r3, #1
 8012184:	4413      	add	r3, r2
 8012186:	009b      	lsls	r3, r3, #2
 8012188:	440b      	add	r3, r1
 801218a:	330a      	adds	r3, #10
 801218c:	881b      	ldrh	r3, [r3, #0]
 801218e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012192:	d101      	bne.n	8012198 <chk_lock+0xc8>
 8012194:	2310      	movs	r3, #16
 8012196:	e000      	b.n	801219a <chk_lock+0xca>
 8012198:	2300      	movs	r3, #0
}
 801219a:	4618      	mov	r0, r3
 801219c:	3714      	adds	r7, #20
 801219e:	46bd      	mov	sp, r7
 80121a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a4:	4770      	bx	lr
 80121a6:	bf00      	nop
 80121a8:	2000083c 	.word	0x2000083c

080121ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80121ac:	b480      	push	{r7}
 80121ae:	b083      	sub	sp, #12
 80121b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80121b2:	2300      	movs	r3, #0
 80121b4:	607b      	str	r3, [r7, #4]
 80121b6:	e002      	b.n	80121be <enq_lock+0x12>
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	3301      	adds	r3, #1
 80121bc:	607b      	str	r3, [r7, #4]
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	2b01      	cmp	r3, #1
 80121c2:	d809      	bhi.n	80121d8 <enq_lock+0x2c>
 80121c4:	490a      	ldr	r1, [pc, #40]	; (80121f0 <enq_lock+0x44>)
 80121c6:	687a      	ldr	r2, [r7, #4]
 80121c8:	4613      	mov	r3, r2
 80121ca:	005b      	lsls	r3, r3, #1
 80121cc:	4413      	add	r3, r2
 80121ce:	009b      	lsls	r3, r3, #2
 80121d0:	440b      	add	r3, r1
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d1ef      	bne.n	80121b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2b02      	cmp	r3, #2
 80121dc:	bf14      	ite	ne
 80121de:	2301      	movne	r3, #1
 80121e0:	2300      	moveq	r3, #0
 80121e2:	b2db      	uxtb	r3, r3
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	370c      	adds	r7, #12
 80121e8:	46bd      	mov	sp, r7
 80121ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ee:	4770      	bx	lr
 80121f0:	2000083c 	.word	0x2000083c

080121f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80121f4:	b480      	push	{r7}
 80121f6:	b085      	sub	sp, #20
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
 80121fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80121fe:	2300      	movs	r3, #0
 8012200:	60fb      	str	r3, [r7, #12]
 8012202:	e02b      	b.n	801225c <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8012204:	4956      	ldr	r1, [pc, #344]	; (8012360 <inc_lock+0x16c>)
 8012206:	68fa      	ldr	r2, [r7, #12]
 8012208:	4613      	mov	r3, r2
 801220a:	005b      	lsls	r3, r3, #1
 801220c:	4413      	add	r3, r2
 801220e:	009b      	lsls	r3, r3, #2
 8012210:	440b      	add	r3, r1
 8012212:	681a      	ldr	r2, [r3, #0]
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801221a:	429a      	cmp	r2, r3
 801221c:	d11b      	bne.n	8012256 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 801221e:	4950      	ldr	r1, [pc, #320]	; (8012360 <inc_lock+0x16c>)
 8012220:	68fa      	ldr	r2, [r7, #12]
 8012222:	4613      	mov	r3, r2
 8012224:	005b      	lsls	r3, r3, #1
 8012226:	4413      	add	r3, r2
 8012228:	009b      	lsls	r3, r3, #2
 801222a:	440b      	add	r3, r1
 801222c:	3304      	adds	r3, #4
 801222e:	681a      	ldr	r2, [r3, #0]
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8012236:	429a      	cmp	r2, r3
 8012238:	d10d      	bne.n	8012256 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 801223a:	4949      	ldr	r1, [pc, #292]	; (8012360 <inc_lock+0x16c>)
 801223c:	68fa      	ldr	r2, [r7, #12]
 801223e:	4613      	mov	r3, r2
 8012240:	005b      	lsls	r3, r3, #1
 8012242:	4413      	add	r3, r2
 8012244:	009b      	lsls	r3, r3, #2
 8012246:	440b      	add	r3, r1
 8012248:	3308      	adds	r3, #8
 801224a:	881a      	ldrh	r2, [r3, #0]
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8012252:	429a      	cmp	r2, r3
 8012254:	d006      	beq.n	8012264 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	3301      	adds	r3, #1
 801225a:	60fb      	str	r3, [r7, #12]
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	2b01      	cmp	r3, #1
 8012260:	d9d0      	bls.n	8012204 <inc_lock+0x10>
 8012262:	e000      	b.n	8012266 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8012264:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	2b02      	cmp	r3, #2
 801226a:	d145      	bne.n	80122f8 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801226c:	2300      	movs	r3, #0
 801226e:	60fb      	str	r3, [r7, #12]
 8012270:	e002      	b.n	8012278 <inc_lock+0x84>
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	3301      	adds	r3, #1
 8012276:	60fb      	str	r3, [r7, #12]
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	2b01      	cmp	r3, #1
 801227c:	d809      	bhi.n	8012292 <inc_lock+0x9e>
 801227e:	4938      	ldr	r1, [pc, #224]	; (8012360 <inc_lock+0x16c>)
 8012280:	68fa      	ldr	r2, [r7, #12]
 8012282:	4613      	mov	r3, r2
 8012284:	005b      	lsls	r3, r3, #1
 8012286:	4413      	add	r3, r2
 8012288:	009b      	lsls	r3, r3, #2
 801228a:	440b      	add	r3, r1
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d1ef      	bne.n	8012272 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	2b02      	cmp	r3, #2
 8012296:	d101      	bne.n	801229c <inc_lock+0xa8>
 8012298:	2300      	movs	r3, #0
 801229a:	e05a      	b.n	8012352 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80122a2:	482f      	ldr	r0, [pc, #188]	; (8012360 <inc_lock+0x16c>)
 80122a4:	68fa      	ldr	r2, [r7, #12]
 80122a6:	4613      	mov	r3, r2
 80122a8:	005b      	lsls	r3, r3, #1
 80122aa:	4413      	add	r3, r2
 80122ac:	009b      	lsls	r3, r3, #2
 80122ae:	4403      	add	r3, r0
 80122b0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 80122b8:	4829      	ldr	r0, [pc, #164]	; (8012360 <inc_lock+0x16c>)
 80122ba:	68fa      	ldr	r2, [r7, #12]
 80122bc:	4613      	mov	r3, r2
 80122be:	005b      	lsls	r3, r3, #1
 80122c0:	4413      	add	r3, r2
 80122c2:	009b      	lsls	r3, r3, #2
 80122c4:	4403      	add	r3, r0
 80122c6:	3304      	adds	r3, #4
 80122c8:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 80122d0:	4923      	ldr	r1, [pc, #140]	; (8012360 <inc_lock+0x16c>)
 80122d2:	68fa      	ldr	r2, [r7, #12]
 80122d4:	4613      	mov	r3, r2
 80122d6:	005b      	lsls	r3, r3, #1
 80122d8:	4413      	add	r3, r2
 80122da:	009b      	lsls	r3, r3, #2
 80122dc:	440b      	add	r3, r1
 80122de:	3308      	adds	r3, #8
 80122e0:	4602      	mov	r2, r0
 80122e2:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80122e4:	491e      	ldr	r1, [pc, #120]	; (8012360 <inc_lock+0x16c>)
 80122e6:	68fa      	ldr	r2, [r7, #12]
 80122e8:	4613      	mov	r3, r2
 80122ea:	005b      	lsls	r3, r3, #1
 80122ec:	4413      	add	r3, r2
 80122ee:	009b      	lsls	r3, r3, #2
 80122f0:	440b      	add	r3, r1
 80122f2:	330a      	adds	r3, #10
 80122f4:	2200      	movs	r2, #0
 80122f6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80122f8:	683b      	ldr	r3, [r7, #0]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d00c      	beq.n	8012318 <inc_lock+0x124>
 80122fe:	4918      	ldr	r1, [pc, #96]	; (8012360 <inc_lock+0x16c>)
 8012300:	68fa      	ldr	r2, [r7, #12]
 8012302:	4613      	mov	r3, r2
 8012304:	005b      	lsls	r3, r3, #1
 8012306:	4413      	add	r3, r2
 8012308:	009b      	lsls	r3, r3, #2
 801230a:	440b      	add	r3, r1
 801230c:	330a      	adds	r3, #10
 801230e:	881b      	ldrh	r3, [r3, #0]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d001      	beq.n	8012318 <inc_lock+0x124>
 8012314:	2300      	movs	r3, #0
 8012316:	e01c      	b.n	8012352 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d10b      	bne.n	8012336 <inc_lock+0x142>
 801231e:	4910      	ldr	r1, [pc, #64]	; (8012360 <inc_lock+0x16c>)
 8012320:	68fa      	ldr	r2, [r7, #12]
 8012322:	4613      	mov	r3, r2
 8012324:	005b      	lsls	r3, r3, #1
 8012326:	4413      	add	r3, r2
 8012328:	009b      	lsls	r3, r3, #2
 801232a:	440b      	add	r3, r1
 801232c:	330a      	adds	r3, #10
 801232e:	881b      	ldrh	r3, [r3, #0]
 8012330:	3301      	adds	r3, #1
 8012332:	b299      	uxth	r1, r3
 8012334:	e001      	b.n	801233a <inc_lock+0x146>
 8012336:	f44f 7180 	mov.w	r1, #256	; 0x100
 801233a:	4809      	ldr	r0, [pc, #36]	; (8012360 <inc_lock+0x16c>)
 801233c:	68fa      	ldr	r2, [r7, #12]
 801233e:	4613      	mov	r3, r2
 8012340:	005b      	lsls	r3, r3, #1
 8012342:	4413      	add	r3, r2
 8012344:	009b      	lsls	r3, r3, #2
 8012346:	4403      	add	r3, r0
 8012348:	330a      	adds	r3, #10
 801234a:	460a      	mov	r2, r1
 801234c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	3301      	adds	r3, #1
}
 8012352:	4618      	mov	r0, r3
 8012354:	3714      	adds	r7, #20
 8012356:	46bd      	mov	sp, r7
 8012358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235c:	4770      	bx	lr
 801235e:	bf00      	nop
 8012360:	2000083c 	.word	0x2000083c

08012364 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012364:	b480      	push	{r7}
 8012366:	b085      	sub	sp, #20
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	3b01      	subs	r3, #1
 8012370:	607b      	str	r3, [r7, #4]
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	2b01      	cmp	r3, #1
 8012376:	d82e      	bhi.n	80123d6 <dec_lock+0x72>
		n = Files[i].ctr;
 8012378:	491b      	ldr	r1, [pc, #108]	; (80123e8 <dec_lock+0x84>)
 801237a:	687a      	ldr	r2, [r7, #4]
 801237c:	4613      	mov	r3, r2
 801237e:	005b      	lsls	r3, r3, #1
 8012380:	4413      	add	r3, r2
 8012382:	009b      	lsls	r3, r3, #2
 8012384:	440b      	add	r3, r1
 8012386:	330a      	adds	r3, #10
 8012388:	881b      	ldrh	r3, [r3, #0]
 801238a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801238c:	89fb      	ldrh	r3, [r7, #14]
 801238e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012392:	d101      	bne.n	8012398 <dec_lock+0x34>
 8012394:	2300      	movs	r3, #0
 8012396:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8012398:	89fb      	ldrh	r3, [r7, #14]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d002      	beq.n	80123a4 <dec_lock+0x40>
 801239e:	89fb      	ldrh	r3, [r7, #14]
 80123a0:	3b01      	subs	r3, #1
 80123a2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80123a4:	4910      	ldr	r1, [pc, #64]	; (80123e8 <dec_lock+0x84>)
 80123a6:	687a      	ldr	r2, [r7, #4]
 80123a8:	4613      	mov	r3, r2
 80123aa:	005b      	lsls	r3, r3, #1
 80123ac:	4413      	add	r3, r2
 80123ae:	009b      	lsls	r3, r3, #2
 80123b0:	440b      	add	r3, r1
 80123b2:	330a      	adds	r3, #10
 80123b4:	89fa      	ldrh	r2, [r7, #14]
 80123b6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80123b8:	89fb      	ldrh	r3, [r7, #14]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d108      	bne.n	80123d0 <dec_lock+0x6c>
 80123be:	490a      	ldr	r1, [pc, #40]	; (80123e8 <dec_lock+0x84>)
 80123c0:	687a      	ldr	r2, [r7, #4]
 80123c2:	4613      	mov	r3, r2
 80123c4:	005b      	lsls	r3, r3, #1
 80123c6:	4413      	add	r3, r2
 80123c8:	009b      	lsls	r3, r3, #2
 80123ca:	440b      	add	r3, r1
 80123cc:	2200      	movs	r2, #0
 80123ce:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80123d0:	2300      	movs	r3, #0
 80123d2:	737b      	strb	r3, [r7, #13]
 80123d4:	e001      	b.n	80123da <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80123d6:	2302      	movs	r3, #2
 80123d8:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80123da:	7b7b      	ldrb	r3, [r7, #13]
}
 80123dc:	4618      	mov	r0, r3
 80123de:	3714      	adds	r7, #20
 80123e0:	46bd      	mov	sp, r7
 80123e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e6:	4770      	bx	lr
 80123e8:	2000083c 	.word	0x2000083c

080123ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80123ec:	b480      	push	{r7}
 80123ee:	b085      	sub	sp, #20
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80123f4:	2300      	movs	r3, #0
 80123f6:	60fb      	str	r3, [r7, #12]
 80123f8:	e016      	b.n	8012428 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80123fa:	4910      	ldr	r1, [pc, #64]	; (801243c <clear_lock+0x50>)
 80123fc:	68fa      	ldr	r2, [r7, #12]
 80123fe:	4613      	mov	r3, r2
 8012400:	005b      	lsls	r3, r3, #1
 8012402:	4413      	add	r3, r2
 8012404:	009b      	lsls	r3, r3, #2
 8012406:	440b      	add	r3, r1
 8012408:	681a      	ldr	r2, [r3, #0]
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	429a      	cmp	r2, r3
 801240e:	d108      	bne.n	8012422 <clear_lock+0x36>
 8012410:	490a      	ldr	r1, [pc, #40]	; (801243c <clear_lock+0x50>)
 8012412:	68fa      	ldr	r2, [r7, #12]
 8012414:	4613      	mov	r3, r2
 8012416:	005b      	lsls	r3, r3, #1
 8012418:	4413      	add	r3, r2
 801241a:	009b      	lsls	r3, r3, #2
 801241c:	440b      	add	r3, r1
 801241e:	2200      	movs	r2, #0
 8012420:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	3301      	adds	r3, #1
 8012426:	60fb      	str	r3, [r7, #12]
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	2b01      	cmp	r3, #1
 801242c:	d9e5      	bls.n	80123fa <clear_lock+0xe>
	}
}
 801242e:	bf00      	nop
 8012430:	3714      	adds	r7, #20
 8012432:	46bd      	mov	sp, r7
 8012434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012438:	4770      	bx	lr
 801243a:	bf00      	nop
 801243c:	2000083c 	.word	0x2000083c

08012440 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b086      	sub	sp, #24
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012448:	2300      	movs	r3, #0
 801244a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8012452:	2b00      	cmp	r3, #0
 8012454:	d038      	beq.n	80124c8 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 801245c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8012464:	6879      	ldr	r1, [r7, #4]
 8012466:	2301      	movs	r3, #1
 8012468:	697a      	ldr	r2, [r7, #20]
 801246a:	f7ff fca9 	bl	8011dc0 <disk_write>
 801246e:	4603      	mov	r3, r0
 8012470:	2b00      	cmp	r3, #0
 8012472:	d002      	beq.n	801247a <sync_window+0x3a>
			res = FR_DISK_ERR;
 8012474:	2301      	movs	r3, #1
 8012476:	73fb      	strb	r3, [r7, #15]
 8012478:	e026      	b.n	80124c8 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	2200      	movs	r2, #0
 801247e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8012488:	697a      	ldr	r2, [r7, #20]
 801248a:	1ad2      	subs	r2, r2, r3
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012492:	429a      	cmp	r2, r3
 8012494:	d218      	bcs.n	80124c8 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 801249c:	613b      	str	r3, [r7, #16]
 801249e:	e010      	b.n	80124c2 <sync_window+0x82>
					wsect += fs->fsize;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80124a6:	697a      	ldr	r2, [r7, #20]
 80124a8:	4413      	add	r3, r2
 80124aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80124b2:	6879      	ldr	r1, [r7, #4]
 80124b4:	2301      	movs	r3, #1
 80124b6:	697a      	ldr	r2, [r7, #20]
 80124b8:	f7ff fc82 	bl	8011dc0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80124bc:	693b      	ldr	r3, [r7, #16]
 80124be:	3b01      	subs	r3, #1
 80124c0:	613b      	str	r3, [r7, #16]
 80124c2:	693b      	ldr	r3, [r7, #16]
 80124c4:	2b01      	cmp	r3, #1
 80124c6:	d8eb      	bhi.n	80124a0 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80124c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80124ca:	4618      	mov	r0, r3
 80124cc:	3718      	adds	r7, #24
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}

080124d2 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80124d2:	b580      	push	{r7, lr}
 80124d4:	b084      	sub	sp, #16
 80124d6:	af00      	add	r7, sp, #0
 80124d8:	6078      	str	r0, [r7, #4]
 80124da:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80124dc:	2300      	movs	r3, #0
 80124de:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	429a      	cmp	r2, r3
 80124ea:	d01b      	beq.n	8012524 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f7ff ffa7 	bl	8012440 <sync_window>
 80124f2:	4603      	mov	r3, r0
 80124f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80124f6:	7bfb      	ldrb	r3, [r7, #15]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d113      	bne.n	8012524 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8012502:	6879      	ldr	r1, [r7, #4]
 8012504:	2301      	movs	r3, #1
 8012506:	683a      	ldr	r2, [r7, #0]
 8012508:	f7ff fc3a 	bl	8011d80 <disk_read>
 801250c:	4603      	mov	r3, r0
 801250e:	2b00      	cmp	r3, #0
 8012510:	d004      	beq.n	801251c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012512:	f04f 33ff 	mov.w	r3, #4294967295
 8012516:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012518:	2301      	movs	r3, #1
 801251a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	683a      	ldr	r2, [r7, #0]
 8012520:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8012524:	7bfb      	ldrb	r3, [r7, #15]
}
 8012526:	4618      	mov	r0, r3
 8012528:	3710      	adds	r7, #16
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}

0801252e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 801252e:	b580      	push	{r7, lr}
 8012530:	b084      	sub	sp, #16
 8012532:	af00      	add	r7, sp, #0
 8012534:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012536:	6878      	ldr	r0, [r7, #4]
 8012538:	f7ff ff82 	bl	8012440 <sync_window>
 801253c:	4603      	mov	r3, r0
 801253e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012540:	7bfb      	ldrb	r3, [r7, #15]
 8012542:	2b00      	cmp	r3, #0
 8012544:	f040 809b 	bne.w	801267e <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801254e:	2b03      	cmp	r3, #3
 8012550:	f040 8088 	bne.w	8012664 <sync_fs+0x136>
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 801255a:	2b01      	cmp	r3, #1
 801255c:	f040 8082 	bne.w	8012664 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012566:	2100      	movs	r1, #0
 8012568:	4618      	mov	r0, r3
 801256a:	f7ff fd55 	bl	8012018 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	2255      	movs	r2, #85	; 0x55
 8012572:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	22aa      	movs	r2, #170	; 0xaa
 801257a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	2252      	movs	r2, #82	; 0x52
 8012582:	701a      	strb	r2, [r3, #0]
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	2252      	movs	r2, #82	; 0x52
 8012588:	705a      	strb	r2, [r3, #1]
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	2261      	movs	r2, #97	; 0x61
 801258e:	709a      	strb	r2, [r3, #2]
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2241      	movs	r2, #65	; 0x41
 8012594:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	2272      	movs	r2, #114	; 0x72
 801259a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2272      	movs	r2, #114	; 0x72
 80125a2:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	2241      	movs	r2, #65	; 0x41
 80125aa:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2261      	movs	r2, #97	; 0x61
 80125b2:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80125bc:	b2da      	uxtb	r2, r3
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80125ca:	b29b      	uxth	r3, r3
 80125cc:	0a1b      	lsrs	r3, r3, #8
 80125ce:	b29b      	uxth	r3, r3
 80125d0:	b2da      	uxtb	r2, r3
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80125de:	0c1b      	lsrs	r3, r3, #16
 80125e0:	b2da      	uxtb	r2, r3
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80125ee:	0e1b      	lsrs	r3, r3, #24
 80125f0:	b2da      	uxtb	r2, r3
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80125fe:	b2da      	uxtb	r2, r3
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801260c:	b29b      	uxth	r3, r3
 801260e:	0a1b      	lsrs	r3, r3, #8
 8012610:	b29b      	uxth	r3, r3
 8012612:	b2da      	uxtb	r2, r3
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012620:	0c1b      	lsrs	r3, r3, #16
 8012622:	b2da      	uxtb	r2, r3
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012630:	0e1b      	lsrs	r3, r3, #24
 8012632:	b2da      	uxtb	r2, r3
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8012640:	1c5a      	adds	r2, r3, #1
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 801264e:	6879      	ldr	r1, [r7, #4]
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8012656:	2301      	movs	r3, #1
 8012658:	f7ff fbb2 	bl	8011dc0 <disk_write>
			fs->fsi_flag = 0;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	2200      	movs	r2, #0
 8012660:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801266a:	2200      	movs	r2, #0
 801266c:	2100      	movs	r1, #0
 801266e:	4618      	mov	r0, r3
 8012670:	f7ff fbc6 	bl	8011e00 <disk_ioctl>
 8012674:	4603      	mov	r3, r0
 8012676:	2b00      	cmp	r3, #0
 8012678:	d001      	beq.n	801267e <sync_fs+0x150>
			res = FR_DISK_ERR;
 801267a:	2301      	movs	r3, #1
 801267c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801267e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012680:	4618      	mov	r0, r3
 8012682:	3710      	adds	r7, #16
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}

08012688 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012688:	b480      	push	{r7}
 801268a:	b083      	sub	sp, #12
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
 8012690:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	3b02      	subs	r3, #2
 8012696:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801269e:	1e9a      	subs	r2, r3, #2
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	429a      	cmp	r2, r3
 80126a4:	d801      	bhi.n	80126aa <clust2sect+0x22>
 80126a6:	2300      	movs	r3, #0
 80126a8:	e00a      	b.n	80126c0 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80126b0:	461a      	mov	r2, r3
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	fb03 f202 	mul.w	r2, r3, r2
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80126be:	4413      	add	r3, r2
}
 80126c0:	4618      	mov	r0, r3
 80126c2:	370c      	adds	r7, #12
 80126c4:	46bd      	mov	sp, r7
 80126c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ca:	4770      	bx	lr

080126cc <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b086      	sub	sp, #24
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
 80126d4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	2b01      	cmp	r3, #1
 80126da:	d905      	bls.n	80126e8 <get_fat+0x1c>
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	429a      	cmp	r2, r3
 80126e6:	d802      	bhi.n	80126ee <get_fat+0x22>
		val = 1;	/* Internal error */
 80126e8:	2301      	movs	r3, #1
 80126ea:	617b      	str	r3, [r7, #20]
 80126ec:	e0a0      	b.n	8012830 <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80126ee:	f04f 33ff 	mov.w	r3, #4294967295
 80126f2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80126fa:	2b02      	cmp	r3, #2
 80126fc:	d044      	beq.n	8012788 <get_fat+0xbc>
 80126fe:	2b03      	cmp	r3, #3
 8012700:	d063      	beq.n	80127ca <get_fat+0xfe>
 8012702:	2b01      	cmp	r3, #1
 8012704:	f040 808a 	bne.w	801281c <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	613b      	str	r3, [r7, #16]
 801270c:	693b      	ldr	r3, [r7, #16]
 801270e:	085b      	lsrs	r3, r3, #1
 8012710:	693a      	ldr	r2, [r7, #16]
 8012712:	4413      	add	r3, r2
 8012714:	613b      	str	r3, [r7, #16]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 801271c:	693b      	ldr	r3, [r7, #16]
 801271e:	0a5b      	lsrs	r3, r3, #9
 8012720:	4413      	add	r3, r2
 8012722:	4619      	mov	r1, r3
 8012724:	6878      	ldr	r0, [r7, #4]
 8012726:	f7ff fed4 	bl	80124d2 <move_window>
 801272a:	4603      	mov	r3, r0
 801272c:	2b00      	cmp	r3, #0
 801272e:	d178      	bne.n	8012822 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 8012730:	693b      	ldr	r3, [r7, #16]
 8012732:	1c5a      	adds	r2, r3, #1
 8012734:	613a      	str	r2, [r7, #16]
 8012736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801273a:	687a      	ldr	r2, [r7, #4]
 801273c:	5cd3      	ldrb	r3, [r2, r3]
 801273e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8012746:	693b      	ldr	r3, [r7, #16]
 8012748:	0a5b      	lsrs	r3, r3, #9
 801274a:	4413      	add	r3, r2
 801274c:	4619      	mov	r1, r3
 801274e:	6878      	ldr	r0, [r7, #4]
 8012750:	f7ff febf 	bl	80124d2 <move_window>
 8012754:	4603      	mov	r3, r0
 8012756:	2b00      	cmp	r3, #0
 8012758:	d165      	bne.n	8012826 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 801275a:	693b      	ldr	r3, [r7, #16]
 801275c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012760:	687a      	ldr	r2, [r7, #4]
 8012762:	5cd3      	ldrb	r3, [r2, r3]
 8012764:	021b      	lsls	r3, r3, #8
 8012766:	461a      	mov	r2, r3
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	4313      	orrs	r3, r2
 801276c:	60fb      	str	r3, [r7, #12]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	f003 0301 	and.w	r3, r3, #1
 8012774:	2b00      	cmp	r3, #0
 8012776:	d002      	beq.n	801277e <get_fat+0xb2>
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	091b      	lsrs	r3, r3, #4
 801277c:	e002      	b.n	8012784 <get_fat+0xb8>
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012784:	617b      	str	r3, [r7, #20]
			break;
 8012786:	e053      	b.n	8012830 <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 801278e:	683b      	ldr	r3, [r7, #0]
 8012790:	0a1b      	lsrs	r3, r3, #8
 8012792:	4413      	add	r3, r2
 8012794:	4619      	mov	r1, r3
 8012796:	6878      	ldr	r0, [r7, #4]
 8012798:	f7ff fe9b 	bl	80124d2 <move_window>
 801279c:	4603      	mov	r3, r0
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d143      	bne.n	801282a <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	005b      	lsls	r3, r3, #1
 80127a6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80127aa:	687a      	ldr	r2, [r7, #4]
 80127ac:	4413      	add	r3, r2
 80127ae:	60bb      	str	r3, [r7, #8]
			val = LD_WORD(p);
 80127b0:	68bb      	ldr	r3, [r7, #8]
 80127b2:	3301      	adds	r3, #1
 80127b4:	781b      	ldrb	r3, [r3, #0]
 80127b6:	021b      	lsls	r3, r3, #8
 80127b8:	b21a      	sxth	r2, r3
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	b21b      	sxth	r3, r3
 80127c0:	4313      	orrs	r3, r2
 80127c2:	b21b      	sxth	r3, r3
 80127c4:	b29b      	uxth	r3, r3
 80127c6:	617b      	str	r3, [r7, #20]
			break;
 80127c8:	e032      	b.n	8012830 <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	09db      	lsrs	r3, r3, #7
 80127d4:	4413      	add	r3, r2
 80127d6:	4619      	mov	r1, r3
 80127d8:	6878      	ldr	r0, [r7, #4]
 80127da:	f7ff fe7a 	bl	80124d2 <move_window>
 80127de:	4603      	mov	r3, r0
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d124      	bne.n	801282e <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	009b      	lsls	r3, r3, #2
 80127e8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80127ec:	687a      	ldr	r2, [r7, #4]
 80127ee:	4413      	add	r3, r2
 80127f0:	60bb      	str	r3, [r7, #8]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80127f2:	68bb      	ldr	r3, [r7, #8]
 80127f4:	3303      	adds	r3, #3
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	061a      	lsls	r2, r3, #24
 80127fa:	68bb      	ldr	r3, [r7, #8]
 80127fc:	3302      	adds	r3, #2
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	041b      	lsls	r3, r3, #16
 8012802:	4313      	orrs	r3, r2
 8012804:	68ba      	ldr	r2, [r7, #8]
 8012806:	3201      	adds	r2, #1
 8012808:	7812      	ldrb	r2, [r2, #0]
 801280a:	0212      	lsls	r2, r2, #8
 801280c:	4313      	orrs	r3, r2
 801280e:	68ba      	ldr	r2, [r7, #8]
 8012810:	7812      	ldrb	r2, [r2, #0]
 8012812:	4313      	orrs	r3, r2
 8012814:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012818:	617b      	str	r3, [r7, #20]
			break;
 801281a:	e009      	b.n	8012830 <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 801281c:	2301      	movs	r3, #1
 801281e:	617b      	str	r3, [r7, #20]
 8012820:	e006      	b.n	8012830 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012822:	bf00      	nop
 8012824:	e004      	b.n	8012830 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012826:	bf00      	nop
 8012828:	e002      	b.n	8012830 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801282a:	bf00      	nop
 801282c:	e000      	b.n	8012830 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801282e:	bf00      	nop
		}
	}

	return val;
 8012830:	697b      	ldr	r3, [r7, #20]
}
 8012832:	4618      	mov	r0, r3
 8012834:	3718      	adds	r7, #24
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}

0801283a <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 801283a:	b580      	push	{r7, lr}
 801283c:	b088      	sub	sp, #32
 801283e:	af00      	add	r7, sp, #0
 8012840:	60f8      	str	r0, [r7, #12]
 8012842:	60b9      	str	r1, [r7, #8]
 8012844:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8012846:	68bb      	ldr	r3, [r7, #8]
 8012848:	2b01      	cmp	r3, #1
 801284a:	d905      	bls.n	8012858 <put_fat+0x1e>
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	429a      	cmp	r2, r3
 8012856:	d802      	bhi.n	801285e <put_fat+0x24>
		res = FR_INT_ERR;
 8012858:	2302      	movs	r3, #2
 801285a:	77fb      	strb	r3, [r7, #31]
 801285c:	e0f3      	b.n	8012a46 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8012864:	2b02      	cmp	r3, #2
 8012866:	d074      	beq.n	8012952 <put_fat+0x118>
 8012868:	2b03      	cmp	r3, #3
 801286a:	f000 8099 	beq.w	80129a0 <put_fat+0x166>
 801286e:	2b01      	cmp	r3, #1
 8012870:	f040 80df 	bne.w	8012a32 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	61bb      	str	r3, [r7, #24]
 8012878:	69bb      	ldr	r3, [r7, #24]
 801287a:	085b      	lsrs	r3, r3, #1
 801287c:	69ba      	ldr	r2, [r7, #24]
 801287e:	4413      	add	r3, r2
 8012880:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8012888:	69bb      	ldr	r3, [r7, #24]
 801288a:	0a5b      	lsrs	r3, r3, #9
 801288c:	4413      	add	r3, r2
 801288e:	4619      	mov	r1, r3
 8012890:	68f8      	ldr	r0, [r7, #12]
 8012892:	f7ff fe1e 	bl	80124d2 <move_window>
 8012896:	4603      	mov	r3, r0
 8012898:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801289a:	7ffb      	ldrb	r3, [r7, #31]
 801289c:	2b00      	cmp	r3, #0
 801289e:	f040 80cb 	bne.w	8012a38 <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 80128a2:	69bb      	ldr	r3, [r7, #24]
 80128a4:	1c5a      	adds	r2, r3, #1
 80128a6:	61ba      	str	r2, [r7, #24]
 80128a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128ac:	68fa      	ldr	r2, [r7, #12]
 80128ae:	4413      	add	r3, r2
 80128b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80128b2:	68bb      	ldr	r3, [r7, #8]
 80128b4:	f003 0301 	and.w	r3, r3, #1
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d00d      	beq.n	80128d8 <put_fat+0x9e>
 80128bc:	697b      	ldr	r3, [r7, #20]
 80128be:	781b      	ldrb	r3, [r3, #0]
 80128c0:	b25b      	sxtb	r3, r3
 80128c2:	f003 030f 	and.w	r3, r3, #15
 80128c6:	b25a      	sxtb	r2, r3
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	b2db      	uxtb	r3, r3
 80128cc:	011b      	lsls	r3, r3, #4
 80128ce:	b25b      	sxtb	r3, r3
 80128d0:	4313      	orrs	r3, r2
 80128d2:	b25b      	sxtb	r3, r3
 80128d4:	b2db      	uxtb	r3, r3
 80128d6:	e001      	b.n	80128dc <put_fat+0xa2>
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	b2db      	uxtb	r3, r3
 80128dc:	697a      	ldr	r2, [r7, #20]
 80128de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	2201      	movs	r2, #1
 80128e4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80128ee:	69bb      	ldr	r3, [r7, #24]
 80128f0:	0a5b      	lsrs	r3, r3, #9
 80128f2:	4413      	add	r3, r2
 80128f4:	4619      	mov	r1, r3
 80128f6:	68f8      	ldr	r0, [r7, #12]
 80128f8:	f7ff fdeb 	bl	80124d2 <move_window>
 80128fc:	4603      	mov	r3, r0
 80128fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012900:	7ffb      	ldrb	r3, [r7, #31]
 8012902:	2b00      	cmp	r3, #0
 8012904:	f040 809a 	bne.w	8012a3c <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 8012908:	69bb      	ldr	r3, [r7, #24]
 801290a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801290e:	68fa      	ldr	r2, [r7, #12]
 8012910:	4413      	add	r3, r2
 8012912:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	f003 0301 	and.w	r3, r3, #1
 801291a:	2b00      	cmp	r3, #0
 801291c:	d003      	beq.n	8012926 <put_fat+0xec>
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	091b      	lsrs	r3, r3, #4
 8012922:	b2db      	uxtb	r3, r3
 8012924:	e00e      	b.n	8012944 <put_fat+0x10a>
 8012926:	697b      	ldr	r3, [r7, #20]
 8012928:	781b      	ldrb	r3, [r3, #0]
 801292a:	b25b      	sxtb	r3, r3
 801292c:	f023 030f 	bic.w	r3, r3, #15
 8012930:	b25a      	sxtb	r2, r3
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	0a1b      	lsrs	r3, r3, #8
 8012936:	b25b      	sxtb	r3, r3
 8012938:	f003 030f 	and.w	r3, r3, #15
 801293c:	b25b      	sxtb	r3, r3
 801293e:	4313      	orrs	r3, r2
 8012940:	b25b      	sxtb	r3, r3
 8012942:	b2db      	uxtb	r3, r3
 8012944:	697a      	ldr	r2, [r7, #20]
 8012946:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	2201      	movs	r2, #1
 801294c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8012950:	e079      	b.n	8012a46 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	0a1b      	lsrs	r3, r3, #8
 801295c:	4413      	add	r3, r2
 801295e:	4619      	mov	r1, r3
 8012960:	68f8      	ldr	r0, [r7, #12]
 8012962:	f7ff fdb6 	bl	80124d2 <move_window>
 8012966:	4603      	mov	r3, r0
 8012968:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801296a:	7ffb      	ldrb	r3, [r7, #31]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d167      	bne.n	8012a40 <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8012970:	68bb      	ldr	r3, [r7, #8]
 8012972:	005b      	lsls	r3, r3, #1
 8012974:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012978:	68fa      	ldr	r2, [r7, #12]
 801297a:	4413      	add	r3, r2
 801297c:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	b2da      	uxtb	r2, r3
 8012982:	697b      	ldr	r3, [r7, #20]
 8012984:	701a      	strb	r2, [r3, #0]
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	3301      	adds	r3, #1
 801298a:	687a      	ldr	r2, [r7, #4]
 801298c:	b292      	uxth	r2, r2
 801298e:	0a12      	lsrs	r2, r2, #8
 8012990:	b292      	uxth	r2, r2
 8012992:	b2d2      	uxtb	r2, r2
 8012994:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	2201      	movs	r2, #1
 801299a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 801299e:	e052      	b.n	8012a46 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80129a6:	68bb      	ldr	r3, [r7, #8]
 80129a8:	09db      	lsrs	r3, r3, #7
 80129aa:	4413      	add	r3, r2
 80129ac:	4619      	mov	r1, r3
 80129ae:	68f8      	ldr	r0, [r7, #12]
 80129b0:	f7ff fd8f 	bl	80124d2 <move_window>
 80129b4:	4603      	mov	r3, r0
 80129b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80129b8:	7ffb      	ldrb	r3, [r7, #31]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d142      	bne.n	8012a44 <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	009b      	lsls	r3, r3, #2
 80129c2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80129c6:	68fa      	ldr	r2, [r7, #12]
 80129c8:	4413      	add	r3, r2
 80129ca:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	3303      	adds	r3, #3
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	061a      	lsls	r2, r3, #24
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	3302      	adds	r3, #2
 80129d8:	781b      	ldrb	r3, [r3, #0]
 80129da:	041b      	lsls	r3, r3, #16
 80129dc:	4313      	orrs	r3, r2
 80129de:	697a      	ldr	r2, [r7, #20]
 80129e0:	3201      	adds	r2, #1
 80129e2:	7812      	ldrb	r2, [r2, #0]
 80129e4:	0212      	lsls	r2, r2, #8
 80129e6:	4313      	orrs	r3, r2
 80129e8:	697a      	ldr	r2, [r7, #20]
 80129ea:	7812      	ldrb	r2, [r2, #0]
 80129ec:	4313      	orrs	r3, r2
 80129ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80129f2:	687a      	ldr	r2, [r7, #4]
 80129f4:	4313      	orrs	r3, r2
 80129f6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	b2da      	uxtb	r2, r3
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	701a      	strb	r2, [r3, #0]
 8012a00:	697b      	ldr	r3, [r7, #20]
 8012a02:	3301      	adds	r3, #1
 8012a04:	687a      	ldr	r2, [r7, #4]
 8012a06:	b292      	uxth	r2, r2
 8012a08:	0a12      	lsrs	r2, r2, #8
 8012a0a:	b292      	uxth	r2, r2
 8012a0c:	b2d2      	uxtb	r2, r2
 8012a0e:	701a      	strb	r2, [r3, #0]
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	3302      	adds	r3, #2
 8012a14:	687a      	ldr	r2, [r7, #4]
 8012a16:	0c12      	lsrs	r2, r2, #16
 8012a18:	b2d2      	uxtb	r2, r2
 8012a1a:	701a      	strb	r2, [r3, #0]
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	3303      	adds	r3, #3
 8012a20:	687a      	ldr	r2, [r7, #4]
 8012a22:	0e12      	lsrs	r2, r2, #24
 8012a24:	b2d2      	uxtb	r2, r2
 8012a26:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	2201      	movs	r2, #1
 8012a2c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8012a30:	e009      	b.n	8012a46 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 8012a32:	2302      	movs	r3, #2
 8012a34:	77fb      	strb	r3, [r7, #31]
 8012a36:	e006      	b.n	8012a46 <put_fat+0x20c>
			if (res != FR_OK) break;
 8012a38:	bf00      	nop
 8012a3a:	e004      	b.n	8012a46 <put_fat+0x20c>
			if (res != FR_OK) break;
 8012a3c:	bf00      	nop
 8012a3e:	e002      	b.n	8012a46 <put_fat+0x20c>
			if (res != FR_OK) break;
 8012a40:	bf00      	nop
 8012a42:	e000      	b.n	8012a46 <put_fat+0x20c>
			if (res != FR_OK) break;
 8012a44:	bf00      	nop
		}
	}

	return res;
 8012a46:	7ffb      	ldrb	r3, [r7, #31]
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3720      	adds	r7, #32
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}

08012a50 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b084      	sub	sp, #16
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
 8012a58:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	2b01      	cmp	r3, #1
 8012a5e:	d905      	bls.n	8012a6c <remove_chain+0x1c>
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	429a      	cmp	r2, r3
 8012a6a:	d802      	bhi.n	8012a72 <remove_chain+0x22>
		res = FR_INT_ERR;
 8012a6c:	2302      	movs	r3, #2
 8012a6e:	73fb      	strb	r3, [r7, #15]
 8012a70:	e043      	b.n	8012afa <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8012a72:	2300      	movs	r3, #0
 8012a74:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8012a76:	e036      	b.n	8012ae6 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8012a78:	6839      	ldr	r1, [r7, #0]
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f7ff fe26 	bl	80126cc <get_fat>
 8012a80:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8012a82:	68bb      	ldr	r3, [r7, #8]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d035      	beq.n	8012af4 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	2b01      	cmp	r3, #1
 8012a8c:	d102      	bne.n	8012a94 <remove_chain+0x44>
 8012a8e:	2302      	movs	r3, #2
 8012a90:	73fb      	strb	r3, [r7, #15]
 8012a92:	e032      	b.n	8012afa <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a9a:	d102      	bne.n	8012aa2 <remove_chain+0x52>
 8012a9c:	2301      	movs	r3, #1
 8012a9e:	73fb      	strb	r3, [r7, #15]
 8012aa0:	e02b      	b.n	8012afa <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	6839      	ldr	r1, [r7, #0]
 8012aa6:	6878      	ldr	r0, [r7, #4]
 8012aa8:	f7ff fec7 	bl	801283a <put_fat>
 8012aac:	4603      	mov	r3, r0
 8012aae:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8012ab0:	7bfb      	ldrb	r3, [r7, #15]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d120      	bne.n	8012af8 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ac0:	d00f      	beq.n	8012ae2 <remove_chain+0x92>
				fs->free_clust++;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012ac8:	1c5a      	adds	r2, r3, #1
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8012ad6:	f043 0301 	orr.w	r3, r3, #1
 8012ada:	b2da      	uxtb	r2, r3
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8012ae2:	68bb      	ldr	r3, [r7, #8]
 8012ae4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	429a      	cmp	r2, r3
 8012af0:	d8c2      	bhi.n	8012a78 <remove_chain+0x28>
 8012af2:	e002      	b.n	8012afa <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8012af4:	bf00      	nop
 8012af6:	e000      	b.n	8012afa <remove_chain+0xaa>
			if (res != FR_OK) break;
 8012af8:	bf00      	nop
		}
	}

	return res;
 8012afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3710      	adds	r7, #16
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}

08012b04 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b086      	sub	sp, #24
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
 8012b0c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d10f      	bne.n	8012b34 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012b1a:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d005      	beq.n	8012b2e <create_chain+0x2a>
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	429a      	cmp	r2, r3
 8012b2c:	d81c      	bhi.n	8012b68 <create_chain+0x64>
 8012b2e:	2301      	movs	r3, #1
 8012b30:	613b      	str	r3, [r7, #16]
 8012b32:	e019      	b.n	8012b68 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8012b34:	6839      	ldr	r1, [r7, #0]
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	f7ff fdc8 	bl	80126cc <get_fat>
 8012b3c:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8012b3e:	68bb      	ldr	r3, [r7, #8]
 8012b40:	2b01      	cmp	r3, #1
 8012b42:	d801      	bhi.n	8012b48 <create_chain+0x44>
 8012b44:	2301      	movs	r3, #1
 8012b46:	e076      	b.n	8012c36 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b4e:	d101      	bne.n	8012b54 <create_chain+0x50>
 8012b50:	68bb      	ldr	r3, [r7, #8]
 8012b52:	e070      	b.n	8012c36 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8012b5a:	68bb      	ldr	r3, [r7, #8]
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	d901      	bls.n	8012b64 <create_chain+0x60>
 8012b60:	68bb      	ldr	r3, [r7, #8]
 8012b62:	e068      	b.n	8012c36 <create_chain+0x132>
		scl = clst;
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	3301      	adds	r3, #1
 8012b70:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8012b78:	697b      	ldr	r3, [r7, #20]
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	d807      	bhi.n	8012b8e <create_chain+0x8a>
			ncl = 2;
 8012b7e:	2302      	movs	r3, #2
 8012b80:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8012b82:	697a      	ldr	r2, [r7, #20]
 8012b84:	693b      	ldr	r3, [r7, #16]
 8012b86:	429a      	cmp	r2, r3
 8012b88:	d901      	bls.n	8012b8e <create_chain+0x8a>
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	e053      	b.n	8012c36 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8012b8e:	6979      	ldr	r1, [r7, #20]
 8012b90:	6878      	ldr	r0, [r7, #4]
 8012b92:	f7ff fd9b 	bl	80126cc <get_fat>
 8012b96:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d00e      	beq.n	8012bbc <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8012b9e:	68bb      	ldr	r3, [r7, #8]
 8012ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ba4:	d002      	beq.n	8012bac <create_chain+0xa8>
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	2b01      	cmp	r3, #1
 8012baa:	d101      	bne.n	8012bb0 <create_chain+0xac>
			return cs;
 8012bac:	68bb      	ldr	r3, [r7, #8]
 8012bae:	e042      	b.n	8012c36 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8012bb0:	697a      	ldr	r2, [r7, #20]
 8012bb2:	693b      	ldr	r3, [r7, #16]
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	d1d9      	bne.n	8012b6c <create_chain+0x68>
 8012bb8:	2300      	movs	r3, #0
 8012bba:	e03c      	b.n	8012c36 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8012bbc:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8012bbe:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8012bc2:	6979      	ldr	r1, [r7, #20]
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	f7ff fe38 	bl	801283a <put_fat>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8012bce:	7bfb      	ldrb	r3, [r7, #15]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d109      	bne.n	8012be8 <create_chain+0xe4>
 8012bd4:	683b      	ldr	r3, [r7, #0]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d006      	beq.n	8012be8 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8012bda:	697a      	ldr	r2, [r7, #20]
 8012bdc:	6839      	ldr	r1, [r7, #0]
 8012bde:	6878      	ldr	r0, [r7, #4]
 8012be0:	f7ff fe2b 	bl	801283a <put_fat>
 8012be4:	4603      	mov	r3, r0
 8012be6:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8012be8:	7bfb      	ldrb	r3, [r7, #15]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d11a      	bne.n	8012c24 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	697a      	ldr	r2, [r7, #20]
 8012bf2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c00:	d018      	beq.n	8012c34 <create_chain+0x130>
			fs->free_clust--;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012c08:	1e5a      	subs	r2, r3, #1
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8012c16:	f043 0301 	orr.w	r3, r3, #1
 8012c1a:	b2da      	uxtb	r2, r3
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8012c22:	e007      	b.n	8012c34 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8012c24:	7bfb      	ldrb	r3, [r7, #15]
 8012c26:	2b01      	cmp	r3, #1
 8012c28:	d102      	bne.n	8012c30 <create_chain+0x12c>
 8012c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8012c2e:	e000      	b.n	8012c32 <create_chain+0x12e>
 8012c30:	2301      	movs	r3, #1
 8012c32:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8012c34:	697b      	ldr	r3, [r7, #20]
}
 8012c36:	4618      	mov	r0, r3
 8012c38:	3718      	adds	r7, #24
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd80      	pop	{r7, pc}

08012c3e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8012c3e:	b480      	push	{r7}
 8012c40:	b087      	sub	sp, #28
 8012c42:	af00      	add	r7, sp, #0
 8012c44:	6078      	str	r0, [r7, #4]
 8012c46:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8012c4e:	3304      	adds	r3, #4
 8012c50:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	0a5b      	lsrs	r3, r3, #9
 8012c56:	687a      	ldr	r2, [r7, #4]
 8012c58:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8012c5c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8012c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8012c64:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	1d1a      	adds	r2, r3, #4
 8012c6a:	613a      	str	r2, [r7, #16]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d101      	bne.n	8012c7a <clmt_clust+0x3c>
 8012c76:	2300      	movs	r3, #0
 8012c78:	e010      	b.n	8012c9c <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8012c7a:	697a      	ldr	r2, [r7, #20]
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	d307      	bcc.n	8012c92 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8012c82:	697a      	ldr	r2, [r7, #20]
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	1ad3      	subs	r3, r2, r3
 8012c88:	617b      	str	r3, [r7, #20]
 8012c8a:	693b      	ldr	r3, [r7, #16]
 8012c8c:	3304      	adds	r3, #4
 8012c8e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012c90:	e7e9      	b.n	8012c66 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8012c92:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012c94:	693b      	ldr	r3, [r7, #16]
 8012c96:	681a      	ldr	r2, [r3, #0]
 8012c98:	697b      	ldr	r3, [r7, #20]
 8012c9a:	4413      	add	r3, r2
}
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	371c      	adds	r7, #28
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca6:	4770      	bx	lr

08012ca8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b086      	sub	sp, #24
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
 8012cb0:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8012cb2:	683b      	ldr	r3, [r7, #0]
 8012cb4:	b29a      	uxth	r2, r3
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8012cc2:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8012cc4:	697b      	ldr	r3, [r7, #20]
 8012cc6:	2b01      	cmp	r3, #1
 8012cc8:	d007      	beq.n	8012cda <dir_sdi+0x32>
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012cd0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8012cd4:	697b      	ldr	r3, [r7, #20]
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d801      	bhi.n	8012cde <dir_sdi+0x36>
		return FR_INT_ERR;
 8012cda:	2302      	movs	r3, #2
 8012cdc:	e074      	b.n	8012dc8 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8012cde:	697b      	ldr	r3, [r7, #20]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d10c      	bne.n	8012cfe <dir_sdi+0x56>
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012cea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8012cee:	2b03      	cmp	r3, #3
 8012cf0:	d105      	bne.n	8012cfe <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012cf8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8012cfc:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012cfe:	697b      	ldr	r3, [r7, #20]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d111      	bne.n	8012d28 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012d0a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8012d0e:	461a      	mov	r2, r3
 8012d10:	683b      	ldr	r3, [r7, #0]
 8012d12:	429a      	cmp	r2, r3
 8012d14:	d801      	bhi.n	8012d1a <dir_sdi+0x72>
			return FR_INT_ERR;
 8012d16:	2302      	movs	r3, #2
 8012d18:	e056      	b.n	8012dc8 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012d20:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8012d24:	613b      	str	r3, [r7, #16]
 8012d26:	e032      	b.n	8012d8e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012d2e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8012d32:	011b      	lsls	r3, r3, #4
 8012d34:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8012d36:	e01e      	b.n	8012d76 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012d3e:	6979      	ldr	r1, [r7, #20]
 8012d40:	4618      	mov	r0, r3
 8012d42:	f7ff fcc3 	bl	80126cc <get_fat>
 8012d46:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012d48:	697b      	ldr	r3, [r7, #20]
 8012d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d4e:	d101      	bne.n	8012d54 <dir_sdi+0xac>
 8012d50:	2301      	movs	r3, #1
 8012d52:	e039      	b.n	8012dc8 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8012d54:	697b      	ldr	r3, [r7, #20]
 8012d56:	2b01      	cmp	r3, #1
 8012d58:	d907      	bls.n	8012d6a <dir_sdi+0xc2>
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012d60:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	429a      	cmp	r2, r3
 8012d68:	d801      	bhi.n	8012d6e <dir_sdi+0xc6>
				return FR_INT_ERR;
 8012d6a:	2302      	movs	r3, #2
 8012d6c:	e02c      	b.n	8012dc8 <dir_sdi+0x120>
			idx -= ic;
 8012d6e:	683a      	ldr	r2, [r7, #0]
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	1ad3      	subs	r3, r2, r3
 8012d74:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8012d76:	683a      	ldr	r2, [r7, #0]
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	429a      	cmp	r2, r3
 8012d7c:	d2dc      	bcs.n	8012d38 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012d84:	6979      	ldr	r1, [r7, #20]
 8012d86:	4618      	mov	r0, r3
 8012d88:	f7ff fc7e 	bl	8012688 <clust2sect>
 8012d8c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	697a      	ldr	r2, [r7, #20]
 8012d92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8012d96:	693b      	ldr	r3, [r7, #16]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d101      	bne.n	8012da0 <dir_sdi+0xf8>
 8012d9c:	2302      	movs	r3, #2
 8012d9e:	e013      	b.n	8012dc8 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8012da0:	683b      	ldr	r3, [r7, #0]
 8012da2:	091a      	lsrs	r2, r3, #4
 8012da4:	693b      	ldr	r3, [r7, #16]
 8012da6:	441a      	add	r2, r3
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012db4:	461a      	mov	r2, r3
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	f003 030f 	and.w	r3, r3, #15
 8012dbc:	015b      	lsls	r3, r3, #5
 8012dbe:	441a      	add	r2, r3
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8012dc6:	2300      	movs	r3, #0
}
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3718      	adds	r7, #24
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}

08012dd0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012dd0:	b590      	push	{r4, r7, lr}
 8012dd2:	b087      	sub	sp, #28
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8012de0:	3301      	adds	r3, #1
 8012de2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	b29b      	uxth	r3, r3
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d004      	beq.n	8012df6 <dir_next+0x26>
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d101      	bne.n	8012dfa <dir_next+0x2a>
		return FR_NO_FILE;
 8012df6:	2304      	movs	r3, #4
 8012df8:	e0dd      	b.n	8012fb6 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	f003 030f 	and.w	r3, r3, #15
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	f040 80c6 	bne.w	8012f92 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012e0c:	1c5a      	adds	r2, r3, #1
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d10b      	bne.n	8012e36 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012e24:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8012e28:	461a      	mov	r2, r3
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	f200 80b0 	bhi.w	8012f92 <dir_next+0x1c2>
				return FR_NO_FILE;
 8012e32:	2304      	movs	r3, #4
 8012e34:	e0bf      	b.n	8012fb6 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	091b      	lsrs	r3, r3, #4
 8012e3a:	687a      	ldr	r2, [r7, #4]
 8012e3c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8012e40:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8012e44:	3a01      	subs	r2, #1
 8012e46:	4013      	ands	r3, r2
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	f040 80a2 	bne.w	8012f92 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012e5a:	4619      	mov	r1, r3
 8012e5c:	4610      	mov	r0, r2
 8012e5e:	f7ff fc35 	bl	80126cc <get_fat>
 8012e62:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8012e64:	697b      	ldr	r3, [r7, #20]
 8012e66:	2b01      	cmp	r3, #1
 8012e68:	d801      	bhi.n	8012e6e <dir_next+0x9e>
 8012e6a:	2302      	movs	r3, #2
 8012e6c:	e0a3      	b.n	8012fb6 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e74:	d101      	bne.n	8012e7a <dir_next+0xaa>
 8012e76:	2301      	movs	r3, #1
 8012e78:	e09d      	b.n	8012fb6 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012e80:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8012e84:	697b      	ldr	r3, [r7, #20]
 8012e86:	429a      	cmp	r2, r3
 8012e88:	d874      	bhi.n	8012f74 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8012e8a:	683b      	ldr	r3, [r7, #0]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d101      	bne.n	8012e94 <dir_next+0xc4>
 8012e90:	2304      	movs	r3, #4
 8012e92:	e090      	b.n	8012fb6 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	4610      	mov	r0, r2
 8012ea4:	f7ff fe2e 	bl	8012b04 <create_chain>
 8012ea8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012eaa:	697b      	ldr	r3, [r7, #20]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d101      	bne.n	8012eb4 <dir_next+0xe4>
 8012eb0:	2307      	movs	r3, #7
 8012eb2:	e080      	b.n	8012fb6 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8012eb4:	697b      	ldr	r3, [r7, #20]
 8012eb6:	2b01      	cmp	r3, #1
 8012eb8:	d101      	bne.n	8012ebe <dir_next+0xee>
 8012eba:	2302      	movs	r3, #2
 8012ebc:	e07b      	b.n	8012fb6 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8012ebe:	697b      	ldr	r3, [r7, #20]
 8012ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ec4:	d101      	bne.n	8012eca <dir_next+0xfa>
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	e075      	b.n	8012fb6 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f7ff fab5 	bl	8012440 <sync_window>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d001      	beq.n	8012ee0 <dir_next+0x110>
 8012edc:	2301      	movs	r3, #1
 8012ede:	e06a      	b.n	8012fb6 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012eea:	2100      	movs	r1, #0
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7ff f893 	bl	8012018 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012efe:	6979      	ldr	r1, [r7, #20]
 8012f00:	4618      	mov	r0, r3
 8012f02:	f7ff fbc1 	bl	8012688 <clust2sect>
 8012f06:	4603      	mov	r3, r0
 8012f08:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	613b      	str	r3, [r7, #16]
 8012f10:	e01b      	b.n	8012f4a <dir_next+0x17a>
						dp->fs->wflag = 1;
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012f18:	2201      	movs	r2, #1
 8012f1a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012f24:	4618      	mov	r0, r3
 8012f26:	f7ff fa8b 	bl	8012440 <sync_window>
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d001      	beq.n	8012f34 <dir_next+0x164>
 8012f30:	2301      	movs	r3, #1
 8012f32:	e040      	b.n	8012fb6 <dir_next+0x1e6>
						dp->fs->winsect++;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012f3a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8012f3e:	3201      	adds	r2, #1
 8012f40:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8012f44:	693b      	ldr	r3, [r7, #16]
 8012f46:	3301      	adds	r3, #1
 8012f48:	613b      	str	r3, [r7, #16]
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012f50:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8012f54:	461a      	mov	r2, r3
 8012f56:	693b      	ldr	r3, [r7, #16]
 8012f58:	429a      	cmp	r2, r3
 8012f5a:	d8da      	bhi.n	8012f12 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012f62:	687a      	ldr	r2, [r7, #4]
 8012f64:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8012f68:	f8d2 122c 	ldr.w	r1, [r2, #556]	; 0x22c
 8012f6c:	693a      	ldr	r2, [r7, #16]
 8012f6e:	1a8a      	subs	r2, r1, r2
 8012f70:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	697a      	ldr	r2, [r7, #20]
 8012f78:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012f82:	6979      	ldr	r1, [r7, #20]
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7ff fb7f 	bl	8012688 <clust2sect>
 8012f8a:	4602      	mov	r2, r0
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	b29a      	uxth	r2, r3
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012fa2:	461a      	mov	r2, r3
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	f003 030f 	and.w	r3, r3, #15
 8012faa:	015b      	lsls	r3, r3, #5
 8012fac:	441a      	add	r2, r3
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8012fb4:	2300      	movs	r3, #0
}
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	371c      	adds	r7, #28
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd90      	pop	{r4, r7, pc}

08012fbe <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8012fbe:	b580      	push	{r7, lr}
 8012fc0:	b084      	sub	sp, #16
 8012fc2:	af00      	add	r7, sp, #0
 8012fc4:	6078      	str	r0, [r7, #4]
 8012fc6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8012fc8:	2100      	movs	r1, #0
 8012fca:	6878      	ldr	r0, [r7, #4]
 8012fcc:	f7ff fe6c 	bl	8012ca8 <dir_sdi>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012fd4:	7bfb      	ldrb	r3, [r7, #15]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d131      	bne.n	801303e <dir_alloc+0x80>
		n = 0;
 8012fda:	2300      	movs	r3, #0
 8012fdc:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012fea:	4619      	mov	r1, r3
 8012fec:	4610      	mov	r0, r2
 8012fee:	f7ff fa70 	bl	80124d2 <move_window>
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8012ff6:	7bfb      	ldrb	r3, [r7, #15]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d11f      	bne.n	801303c <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013002:	781b      	ldrb	r3, [r3, #0]
 8013004:	2be5      	cmp	r3, #229	; 0xe5
 8013006:	d005      	beq.n	8013014 <dir_alloc+0x56>
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801300e:	781b      	ldrb	r3, [r3, #0]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d107      	bne.n	8013024 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013014:	68bb      	ldr	r3, [r7, #8]
 8013016:	3301      	adds	r3, #1
 8013018:	60bb      	str	r3, [r7, #8]
 801301a:	68ba      	ldr	r2, [r7, #8]
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	429a      	cmp	r2, r3
 8013020:	d102      	bne.n	8013028 <dir_alloc+0x6a>
 8013022:	e00c      	b.n	801303e <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013024:	2300      	movs	r3, #0
 8013026:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8013028:	2101      	movs	r1, #1
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	f7ff fed0 	bl	8012dd0 <dir_next>
 8013030:	4603      	mov	r3, r0
 8013032:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8013034:	7bfb      	ldrb	r3, [r7, #15]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d0d1      	beq.n	8012fde <dir_alloc+0x20>
 801303a:	e000      	b.n	801303e <dir_alloc+0x80>
			if (res != FR_OK) break;
 801303c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801303e:	7bfb      	ldrb	r3, [r7, #15]
 8013040:	2b04      	cmp	r3, #4
 8013042:	d101      	bne.n	8013048 <dir_alloc+0x8a>
 8013044:	2307      	movs	r3, #7
 8013046:	73fb      	strb	r3, [r7, #15]
	return res;
 8013048:	7bfb      	ldrb	r3, [r7, #15]
}
 801304a:	4618      	mov	r0, r3
 801304c:	3710      	adds	r7, #16
 801304e:	46bd      	mov	sp, r7
 8013050:	bd80      	pop	{r7, pc}

08013052 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8013052:	b480      	push	{r7}
 8013054:	b085      	sub	sp, #20
 8013056:	af00      	add	r7, sp, #0
 8013058:	6078      	str	r0, [r7, #4]
 801305a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 801305c:	683b      	ldr	r3, [r7, #0]
 801305e:	331b      	adds	r3, #27
 8013060:	781b      	ldrb	r3, [r3, #0]
 8013062:	021b      	lsls	r3, r3, #8
 8013064:	b21a      	sxth	r2, r3
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	331a      	adds	r3, #26
 801306a:	781b      	ldrb	r3, [r3, #0]
 801306c:	b21b      	sxth	r3, r3
 801306e:	4313      	orrs	r3, r2
 8013070:	b21b      	sxth	r3, r3
 8013072:	b29b      	uxth	r3, r3
 8013074:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801307c:	2b03      	cmp	r3, #3
 801307e:	d10f      	bne.n	80130a0 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8013080:	683b      	ldr	r3, [r7, #0]
 8013082:	3315      	adds	r3, #21
 8013084:	781b      	ldrb	r3, [r3, #0]
 8013086:	021b      	lsls	r3, r3, #8
 8013088:	b21a      	sxth	r2, r3
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	3314      	adds	r3, #20
 801308e:	781b      	ldrb	r3, [r3, #0]
 8013090:	b21b      	sxth	r3, r3
 8013092:	4313      	orrs	r3, r2
 8013094:	b21b      	sxth	r3, r3
 8013096:	b29b      	uxth	r3, r3
 8013098:	041b      	lsls	r3, r3, #16
 801309a:	68fa      	ldr	r2, [r7, #12]
 801309c:	4313      	orrs	r3, r2
 801309e:	60fb      	str	r3, [r7, #12]

	return cl;
 80130a0:	68fb      	ldr	r3, [r7, #12]
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3714      	adds	r7, #20
 80130a6:	46bd      	mov	sp, r7
 80130a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ac:	4770      	bx	lr

080130ae <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80130ae:	b480      	push	{r7}
 80130b0:	b083      	sub	sp, #12
 80130b2:	af00      	add	r7, sp, #0
 80130b4:	6078      	str	r0, [r7, #4]
 80130b6:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	331a      	adds	r3, #26
 80130bc:	683a      	ldr	r2, [r7, #0]
 80130be:	b2d2      	uxtb	r2, r2
 80130c0:	701a      	strb	r2, [r3, #0]
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	331b      	adds	r3, #27
 80130c6:	683a      	ldr	r2, [r7, #0]
 80130c8:	b292      	uxth	r2, r2
 80130ca:	0a12      	lsrs	r2, r2, #8
 80130cc:	b292      	uxth	r2, r2
 80130ce:	b2d2      	uxtb	r2, r2
 80130d0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	3314      	adds	r3, #20
 80130d6:	683a      	ldr	r2, [r7, #0]
 80130d8:	0c12      	lsrs	r2, r2, #16
 80130da:	b2d2      	uxtb	r2, r2
 80130dc:	701a      	strb	r2, [r3, #0]
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	3315      	adds	r3, #21
 80130e2:	683a      	ldr	r2, [r7, #0]
 80130e4:	0c12      	lsrs	r2, r2, #16
 80130e6:	b292      	uxth	r2, r2
 80130e8:	0a12      	lsrs	r2, r2, #8
 80130ea:	b292      	uxth	r2, r2
 80130ec:	b2d2      	uxtb	r2, r2
 80130ee:	701a      	strb	r2, [r3, #0]
}
 80130f0:	bf00      	nop
 80130f2:	370c      	adds	r7, #12
 80130f4:	46bd      	mov	sp, r7
 80130f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fa:	4770      	bx	lr

080130fc <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b086      	sub	sp, #24
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013104:	2100      	movs	r1, #0
 8013106:	6878      	ldr	r0, [r7, #4]
 8013108:	f7ff fdce 	bl	8012ca8 <dir_sdi>
 801310c:	4603      	mov	r3, r0
 801310e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013110:	7dfb      	ldrb	r3, [r7, #23]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d001      	beq.n	801311a <dir_find+0x1e>
 8013116:	7dfb      	ldrb	r3, [r7, #23]
 8013118:	e03b      	b.n	8013192 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013126:	4619      	mov	r1, r3
 8013128:	4610      	mov	r0, r2
 801312a:	f7ff f9d2 	bl	80124d2 <move_window>
 801312e:	4603      	mov	r3, r0
 8013130:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013132:	7dfb      	ldrb	r3, [r7, #23]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d128      	bne.n	801318a <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801313e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	781b      	ldrb	r3, [r3, #0]
 8013144:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013146:	7bfb      	ldrb	r3, [r7, #15]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d102      	bne.n	8013152 <dir_find+0x56>
 801314c:	2304      	movs	r3, #4
 801314e:	75fb      	strb	r3, [r7, #23]
 8013150:	e01e      	b.n	8013190 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8013152:	693b      	ldr	r3, [r7, #16]
 8013154:	330b      	adds	r3, #11
 8013156:	781b      	ldrb	r3, [r3, #0]
 8013158:	f003 0308 	and.w	r3, r3, #8
 801315c:	2b00      	cmp	r3, #0
 801315e:	d10a      	bne.n	8013176 <dir_find+0x7a>
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013166:	220b      	movs	r2, #11
 8013168:	4619      	mov	r1, r3
 801316a:	6938      	ldr	r0, [r7, #16]
 801316c:	f7fe ff6e 	bl	801204c <mem_cmp>
 8013170:	4603      	mov	r3, r0
 8013172:	2b00      	cmp	r3, #0
 8013174:	d00b      	beq.n	801318e <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8013176:	2100      	movs	r1, #0
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f7ff fe29 	bl	8012dd0 <dir_next>
 801317e:	4603      	mov	r3, r0
 8013180:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013182:	7dfb      	ldrb	r3, [r7, #23]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d0c8      	beq.n	801311a <dir_find+0x1e>
 8013188:	e002      	b.n	8013190 <dir_find+0x94>
		if (res != FR_OK) break;
 801318a:	bf00      	nop
 801318c:	e000      	b.n	8013190 <dir_find+0x94>
			break;
 801318e:	bf00      	nop

	return res;
 8013190:	7dfb      	ldrb	r3, [r7, #23]
}
 8013192:	4618      	mov	r0, r3
 8013194:	3718      	adds	r7, #24
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}

0801319a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801319a:	b580      	push	{r7, lr}
 801319c:	b086      	sub	sp, #24
 801319e:	af00      	add	r7, sp, #0
 80131a0:	6078      	str	r0, [r7, #4]
 80131a2:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 80131a4:	2304      	movs	r3, #4
 80131a6:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 80131a8:	e03f      	b.n	801322a <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80131b6:	4619      	mov	r1, r3
 80131b8:	4610      	mov	r0, r2
 80131ba:	f7ff f98a 	bl	80124d2 <move_window>
 80131be:	4603      	mov	r3, r0
 80131c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80131c2:	7dfb      	ldrb	r3, [r7, #23]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d136      	bne.n	8013236 <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80131ce:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80131d0:	693b      	ldr	r3, [r7, #16]
 80131d2:	781b      	ldrb	r3, [r3, #0]
 80131d4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80131d6:	7bfb      	ldrb	r3, [r7, #15]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d102      	bne.n	80131e2 <dir_read+0x48>
 80131dc:	2304      	movs	r3, #4
 80131de:	75fb      	strb	r3, [r7, #23]
 80131e0:	e02e      	b.n	8013240 <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 80131e2:	693b      	ldr	r3, [r7, #16]
 80131e4:	330b      	adds	r3, #11
 80131e6:	781b      	ldrb	r3, [r3, #0]
 80131e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80131ec:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 80131ee:	7bfb      	ldrb	r3, [r7, #15]
 80131f0:	2be5      	cmp	r3, #229	; 0xe5
 80131f2:	d011      	beq.n	8013218 <dir_read+0x7e>
 80131f4:	7bfb      	ldrb	r3, [r7, #15]
 80131f6:	2b2e      	cmp	r3, #46	; 0x2e
 80131f8:	d00e      	beq.n	8013218 <dir_read+0x7e>
 80131fa:	7bbb      	ldrb	r3, [r7, #14]
 80131fc:	2b0f      	cmp	r3, #15
 80131fe:	d00b      	beq.n	8013218 <dir_read+0x7e>
 8013200:	7bbb      	ldrb	r3, [r7, #14]
 8013202:	f023 0320 	bic.w	r3, r3, #32
 8013206:	2b08      	cmp	r3, #8
 8013208:	bf0c      	ite	eq
 801320a:	2301      	moveq	r3, #1
 801320c:	2300      	movne	r3, #0
 801320e:	b2db      	uxtb	r3, r3
 8013210:	461a      	mov	r2, r3
 8013212:	683b      	ldr	r3, [r7, #0]
 8013214:	429a      	cmp	r2, r3
 8013216:	d010      	beq.n	801323a <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8013218:	2100      	movs	r1, #0
 801321a:	6878      	ldr	r0, [r7, #4]
 801321c:	f7ff fdd8 	bl	8012dd0 <dir_next>
 8013220:	4603      	mov	r3, r0
 8013222:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013224:	7dfb      	ldrb	r3, [r7, #23]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d109      	bne.n	801323e <dir_read+0xa4>
	while (dp->sect) {
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013230:	2b00      	cmp	r3, #0
 8013232:	d1ba      	bne.n	80131aa <dir_read+0x10>
 8013234:	e004      	b.n	8013240 <dir_read+0xa6>
		if (res != FR_OK) break;
 8013236:	bf00      	nop
 8013238:	e002      	b.n	8013240 <dir_read+0xa6>
			break;
 801323a:	bf00      	nop
 801323c:	e000      	b.n	8013240 <dir_read+0xa6>
		if (res != FR_OK) break;
 801323e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8013240:	7dfb      	ldrb	r3, [r7, #23]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d003      	beq.n	801324e <dir_read+0xb4>
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	2200      	movs	r2, #0
 801324a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 801324e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013250:	4618      	mov	r0, r3
 8013252:	3718      	adds	r7, #24
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}

08013258 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b084      	sub	sp, #16
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013260:	2101      	movs	r1, #1
 8013262:	6878      	ldr	r0, [r7, #4]
 8013264:	f7ff feab 	bl	8012fbe <dir_alloc>
 8013268:	4603      	mov	r3, r0
 801326a:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 801326c:	7bfb      	ldrb	r3, [r7, #15]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d126      	bne.n	80132c0 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801327e:	4619      	mov	r1, r3
 8013280:	4610      	mov	r0, r2
 8013282:	f7ff f926 	bl	80124d2 <move_window>
 8013286:	4603      	mov	r3, r0
 8013288:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801328a:	7bfb      	ldrb	r3, [r7, #15]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d117      	bne.n	80132c0 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013296:	2220      	movs	r2, #32
 8013298:	2100      	movs	r1, #0
 801329a:	4618      	mov	r0, r3
 801329c:	f7fe febc 	bl	8012018 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80132ac:	220b      	movs	r2, #11
 80132ae:	4619      	mov	r1, r3
 80132b0:	f7fe fe94 	bl	8011fdc <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80132ba:	2201      	movs	r2, #1
 80132bc:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 80132c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80132c2:	4618      	mov	r0, r3
 80132c4:	3710      	adds	r7, #16
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}

080132ca <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80132ca:	b580      	push	{r7, lr}
 80132cc:	b084      	sub	sp, #16
 80132ce:	af00      	add	r7, sp, #0
 80132d0:	6078      	str	r0, [r7, #4]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dp, dp->index);
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80132d8:	4619      	mov	r1, r3
 80132da:	6878      	ldr	r0, [r7, #4]
 80132dc:	f7ff fce4 	bl	8012ca8 <dir_sdi>
 80132e0:	4603      	mov	r3, r0
 80132e2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80132e4:	7bfb      	ldrb	r3, [r7, #15]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d121      	bne.n	801332e <dir_remove+0x64>
		res = move_window(dp->fs, dp->sect);
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80132f6:	4619      	mov	r1, r3
 80132f8:	4610      	mov	r0, r2
 80132fa:	f7ff f8ea 	bl	80124d2 <move_window>
 80132fe:	4603      	mov	r3, r0
 8013300:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013302:	7bfb      	ldrb	r3, [r7, #15]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d112      	bne.n	801332e <dir_remove+0x64>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801330e:	2220      	movs	r2, #32
 8013310:	2100      	movs	r1, #0
 8013312:	4618      	mov	r0, r3
 8013314:	f7fe fe80 	bl	8012018 <mem_set>
			*dp->dir = DDEM;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801331e:	22e5      	movs	r2, #229	; 0xe5
 8013320:	701a      	strb	r2, [r3, #0]
			dp->fs->wflag = 1;
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013328:	2201      	movs	r2, #1
 801332a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}
#endif

	return res;
 801332e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013330:	4618      	mov	r0, r3
 8013332:	3710      	adds	r7, #16
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}

08013338 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8013338:	b480      	push	{r7}
 801333a:	b087      	sub	sp, #28
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
 8013340:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8013342:	683b      	ldr	r3, [r7, #0]
 8013344:	3309      	adds	r3, #9
 8013346:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801334e:	2b00      	cmp	r3, #0
 8013350:	d05a      	beq.n	8013408 <get_fileinfo+0xd0>
		dir = dp->dir;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013358:	60bb      	str	r3, [r7, #8]
		i = 0;
 801335a:	2300      	movs	r3, #0
 801335c:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 801335e:	e01c      	b.n	801339a <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 8013360:	697b      	ldr	r3, [r7, #20]
 8013362:	1c5a      	adds	r2, r3, #1
 8013364:	617a      	str	r2, [r7, #20]
 8013366:	68ba      	ldr	r2, [r7, #8]
 8013368:	4413      	add	r3, r2
 801336a:	781b      	ldrb	r3, [r3, #0]
 801336c:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 801336e:	7bfb      	ldrb	r3, [r7, #15]
 8013370:	2b20      	cmp	r3, #32
 8013372:	d100      	bne.n	8013376 <get_fileinfo+0x3e>
 8013374:	e011      	b.n	801339a <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8013376:	7bfb      	ldrb	r3, [r7, #15]
 8013378:	2b05      	cmp	r3, #5
 801337a:	d101      	bne.n	8013380 <get_fileinfo+0x48>
 801337c:	23e5      	movs	r3, #229	; 0xe5
 801337e:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	2b09      	cmp	r3, #9
 8013384:	d104      	bne.n	8013390 <get_fileinfo+0x58>
 8013386:	693b      	ldr	r3, [r7, #16]
 8013388:	1c5a      	adds	r2, r3, #1
 801338a:	613a      	str	r2, [r7, #16]
 801338c:	222e      	movs	r2, #46	; 0x2e
 801338e:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8013390:	693b      	ldr	r3, [r7, #16]
 8013392:	1c5a      	adds	r2, r3, #1
 8013394:	613a      	str	r2, [r7, #16]
 8013396:	7bfa      	ldrb	r2, [r7, #15]
 8013398:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 801339a:	697b      	ldr	r3, [r7, #20]
 801339c:	2b0a      	cmp	r3, #10
 801339e:	d9df      	bls.n	8013360 <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 80133a0:	68bb      	ldr	r3, [r7, #8]
 80133a2:	7ada      	ldrb	r2, [r3, #11]
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 80133a8:	68bb      	ldr	r3, [r7, #8]
 80133aa:	331f      	adds	r3, #31
 80133ac:	781b      	ldrb	r3, [r3, #0]
 80133ae:	061a      	lsls	r2, r3, #24
 80133b0:	68bb      	ldr	r3, [r7, #8]
 80133b2:	331e      	adds	r3, #30
 80133b4:	781b      	ldrb	r3, [r3, #0]
 80133b6:	041b      	lsls	r3, r3, #16
 80133b8:	4313      	orrs	r3, r2
 80133ba:	68ba      	ldr	r2, [r7, #8]
 80133bc:	321d      	adds	r2, #29
 80133be:	7812      	ldrb	r2, [r2, #0]
 80133c0:	0212      	lsls	r2, r2, #8
 80133c2:	4313      	orrs	r3, r2
 80133c4:	68ba      	ldr	r2, [r7, #8]
 80133c6:	321c      	adds	r2, #28
 80133c8:	7812      	ldrb	r2, [r2, #0]
 80133ca:	431a      	orrs	r2, r3
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 80133d0:	68bb      	ldr	r3, [r7, #8]
 80133d2:	3319      	adds	r3, #25
 80133d4:	781b      	ldrb	r3, [r3, #0]
 80133d6:	021b      	lsls	r3, r3, #8
 80133d8:	b21a      	sxth	r2, r3
 80133da:	68bb      	ldr	r3, [r7, #8]
 80133dc:	3318      	adds	r3, #24
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	b21b      	sxth	r3, r3
 80133e2:	4313      	orrs	r3, r2
 80133e4:	b21b      	sxth	r3, r3
 80133e6:	b29a      	uxth	r2, r3
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 80133ec:	68bb      	ldr	r3, [r7, #8]
 80133ee:	3317      	adds	r3, #23
 80133f0:	781b      	ldrb	r3, [r3, #0]
 80133f2:	021b      	lsls	r3, r3, #8
 80133f4:	b21a      	sxth	r2, r3
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	3316      	adds	r3, #22
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	b21b      	sxth	r3, r3
 80133fe:	4313      	orrs	r3, r2
 8013400:	b21b      	sxth	r3, r3
 8013402:	b29a      	uxth	r2, r3
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8013408:	693b      	ldr	r3, [r7, #16]
 801340a:	2200      	movs	r2, #0
 801340c:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 801340e:	bf00      	nop
 8013410:	371c      	adds	r7, #28
 8013412:	46bd      	mov	sp, r7
 8013414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013418:	4770      	bx	lr
	...

0801341c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b088      	sub	sp, #32
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
 8013424:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	60fb      	str	r3, [r7, #12]
 801342c:	e002      	b.n	8013434 <create_name+0x18>
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	3301      	adds	r3, #1
 8013432:	60fb      	str	r3, [r7, #12]
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	781b      	ldrb	r3, [r3, #0]
 8013438:	2b2f      	cmp	r3, #47	; 0x2f
 801343a:	d0f8      	beq.n	801342e <create_name+0x12>
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	781b      	ldrb	r3, [r3, #0]
 8013440:	2b5c      	cmp	r3, #92	; 0x5c
 8013442:	d0f4      	beq.n	801342e <create_name+0x12>
	sfn = dp->fn;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801344a:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801344c:	220b      	movs	r2, #11
 801344e:	2120      	movs	r1, #32
 8013450:	68b8      	ldr	r0, [r7, #8]
 8013452:	f7fe fde1 	bl	8012018 <mem_set>
	si = i = b = 0; ni = 8;
 8013456:	2300      	movs	r3, #0
 8013458:	77fb      	strb	r3, [r7, #31]
 801345a:	2300      	movs	r3, #0
 801345c:	613b      	str	r3, [r7, #16]
 801345e:	693b      	ldr	r3, [r7, #16]
 8013460:	617b      	str	r3, [r7, #20]
 8013462:	2308      	movs	r3, #8
 8013464:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013466:	697b      	ldr	r3, [r7, #20]
 8013468:	1c5a      	adds	r2, r3, #1
 801346a:	617a      	str	r2, [r7, #20]
 801346c:	68fa      	ldr	r2, [r7, #12]
 801346e:	4413      	add	r3, r2
 8013470:	781b      	ldrb	r3, [r3, #0]
 8013472:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8013474:	7fbb      	ldrb	r3, [r7, #30]
 8013476:	2b20      	cmp	r3, #32
 8013478:	d953      	bls.n	8013522 <create_name+0x106>
 801347a:	7fbb      	ldrb	r3, [r7, #30]
 801347c:	2b2f      	cmp	r3, #47	; 0x2f
 801347e:	d050      	beq.n	8013522 <create_name+0x106>
 8013480:	7fbb      	ldrb	r3, [r7, #30]
 8013482:	2b5c      	cmp	r3, #92	; 0x5c
 8013484:	d04d      	beq.n	8013522 <create_name+0x106>
		if (c == '.' || i >= ni) {
 8013486:	7fbb      	ldrb	r3, [r7, #30]
 8013488:	2b2e      	cmp	r3, #46	; 0x2e
 801348a:	d003      	beq.n	8013494 <create_name+0x78>
 801348c:	693a      	ldr	r2, [r7, #16]
 801348e:	69bb      	ldr	r3, [r7, #24]
 8013490:	429a      	cmp	r2, r3
 8013492:	d30f      	bcc.n	80134b4 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8013494:	69bb      	ldr	r3, [r7, #24]
 8013496:	2b08      	cmp	r3, #8
 8013498:	d102      	bne.n	80134a0 <create_name+0x84>
 801349a:	7fbb      	ldrb	r3, [r7, #30]
 801349c:	2b2e      	cmp	r3, #46	; 0x2e
 801349e:	d001      	beq.n	80134a4 <create_name+0x88>
 80134a0:	2306      	movs	r3, #6
 80134a2:	e073      	b.n	801358c <create_name+0x170>
			i = 8; ni = 11;
 80134a4:	2308      	movs	r3, #8
 80134a6:	613b      	str	r3, [r7, #16]
 80134a8:	230b      	movs	r3, #11
 80134aa:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80134ac:	7ffb      	ldrb	r3, [r7, #31]
 80134ae:	009b      	lsls	r3, r3, #2
 80134b0:	77fb      	strb	r3, [r7, #31]
 80134b2:	e035      	b.n	8013520 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 80134b4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	da08      	bge.n	80134ce <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 80134bc:	7ffb      	ldrb	r3, [r7, #31]
 80134be:	f043 0303 	orr.w	r3, r3, #3
 80134c2:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80134c4:	7fbb      	ldrb	r3, [r7, #30]
 80134c6:	3b80      	subs	r3, #128	; 0x80
 80134c8:	4a32      	ldr	r2, [pc, #200]	; (8013594 <create_name+0x178>)
 80134ca:	5cd3      	ldrb	r3, [r2, r3]
 80134cc:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 80134ce:	7fbb      	ldrb	r3, [r7, #30]
 80134d0:	4619      	mov	r1, r3
 80134d2:	4831      	ldr	r0, [pc, #196]	; (8013598 <create_name+0x17c>)
 80134d4:	f7fe fde1 	bl	801209a <chk_chr>
 80134d8:	4603      	mov	r3, r0
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d001      	beq.n	80134e2 <create_name+0xc6>
				return FR_INVALID_NAME;
 80134de:	2306      	movs	r3, #6
 80134e0:	e054      	b.n	801358c <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80134e2:	7fbb      	ldrb	r3, [r7, #30]
 80134e4:	2b40      	cmp	r3, #64	; 0x40
 80134e6:	d907      	bls.n	80134f8 <create_name+0xdc>
 80134e8:	7fbb      	ldrb	r3, [r7, #30]
 80134ea:	2b5a      	cmp	r3, #90	; 0x5a
 80134ec:	d804      	bhi.n	80134f8 <create_name+0xdc>
				b |= 2;
 80134ee:	7ffb      	ldrb	r3, [r7, #31]
 80134f0:	f043 0302 	orr.w	r3, r3, #2
 80134f4:	77fb      	strb	r3, [r7, #31]
 80134f6:	e00c      	b.n	8013512 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 80134f8:	7fbb      	ldrb	r3, [r7, #30]
 80134fa:	2b60      	cmp	r3, #96	; 0x60
 80134fc:	d909      	bls.n	8013512 <create_name+0xf6>
 80134fe:	7fbb      	ldrb	r3, [r7, #30]
 8013500:	2b7a      	cmp	r3, #122	; 0x7a
 8013502:	d806      	bhi.n	8013512 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8013504:	7ffb      	ldrb	r3, [r7, #31]
 8013506:	f043 0301 	orr.w	r3, r3, #1
 801350a:	77fb      	strb	r3, [r7, #31]
 801350c:	7fbb      	ldrb	r3, [r7, #30]
 801350e:	3b20      	subs	r3, #32
 8013510:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	1c5a      	adds	r2, r3, #1
 8013516:	613a      	str	r2, [r7, #16]
 8013518:	68ba      	ldr	r2, [r7, #8]
 801351a:	4413      	add	r3, r2
 801351c:	7fba      	ldrb	r2, [r7, #30]
 801351e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013520:	e7a1      	b.n	8013466 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8013522:	68fa      	ldr	r2, [r7, #12]
 8013524:	697b      	ldr	r3, [r7, #20]
 8013526:	441a      	add	r2, r3
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 801352c:	7fbb      	ldrb	r3, [r7, #30]
 801352e:	2b20      	cmp	r3, #32
 8013530:	d801      	bhi.n	8013536 <create_name+0x11a>
 8013532:	2304      	movs	r3, #4
 8013534:	e000      	b.n	8013538 <create_name+0x11c>
 8013536:	2300      	movs	r3, #0
 8013538:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 801353a:	693b      	ldr	r3, [r7, #16]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d101      	bne.n	8013544 <create_name+0x128>
 8013540:	2306      	movs	r3, #6
 8013542:	e023      	b.n	801358c <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	781b      	ldrb	r3, [r3, #0]
 8013548:	2be5      	cmp	r3, #229	; 0xe5
 801354a:	d102      	bne.n	8013552 <create_name+0x136>
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	2205      	movs	r2, #5
 8013550:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8013552:	69bb      	ldr	r3, [r7, #24]
 8013554:	2b08      	cmp	r3, #8
 8013556:	d102      	bne.n	801355e <create_name+0x142>
 8013558:	7ffb      	ldrb	r3, [r7, #31]
 801355a:	009b      	lsls	r3, r3, #2
 801355c:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 801355e:	7ffb      	ldrb	r3, [r7, #31]
 8013560:	f003 0303 	and.w	r3, r3, #3
 8013564:	2b01      	cmp	r3, #1
 8013566:	d103      	bne.n	8013570 <create_name+0x154>
 8013568:	7fbb      	ldrb	r3, [r7, #30]
 801356a:	f043 0310 	orr.w	r3, r3, #16
 801356e:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8013570:	7ffb      	ldrb	r3, [r7, #31]
 8013572:	f003 030c 	and.w	r3, r3, #12
 8013576:	2b04      	cmp	r3, #4
 8013578:	d103      	bne.n	8013582 <create_name+0x166>
 801357a:	7fbb      	ldrb	r3, [r7, #30]
 801357c:	f043 0308 	orr.w	r3, r3, #8
 8013580:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	330b      	adds	r3, #11
 8013586:	7fba      	ldrb	r2, [r7, #30]
 8013588:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801358a:	2300      	movs	r3, #0
#endif
}
 801358c:	4618      	mov	r0, r3
 801358e:	3720      	adds	r7, #32
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}
 8013594:	08017d10 	.word	0x08017d10
 8013598:	08017c4c 	.word	0x08017c4c

0801359c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b084      	sub	sp, #16
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	781b      	ldrb	r3, [r3, #0]
 80135aa:	2b2f      	cmp	r3, #47	; 0x2f
 80135ac:	d003      	beq.n	80135b6 <follow_path+0x1a>
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	781b      	ldrb	r3, [r3, #0]
 80135b2:	2b5c      	cmp	r3, #92	; 0x5c
 80135b4:	d102      	bne.n	80135bc <follow_path+0x20>
		path++;
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	3301      	adds	r3, #1
 80135ba:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	2200      	movs	r2, #0
 80135c0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	781b      	ldrb	r3, [r3, #0]
 80135c8:	2b1f      	cmp	r3, #31
 80135ca:	d80a      	bhi.n	80135e2 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 80135cc:	2100      	movs	r1, #0
 80135ce:	6878      	ldr	r0, [r7, #4]
 80135d0:	f7ff fb6a 	bl	8012ca8 <dir_sdi>
 80135d4:	4603      	mov	r3, r0
 80135d6:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	2200      	movs	r2, #0
 80135dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80135e0:	e045      	b.n	801366e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80135e2:	463b      	mov	r3, r7
 80135e4:	4619      	mov	r1, r3
 80135e6:	6878      	ldr	r0, [r7, #4]
 80135e8:	f7ff ff18 	bl	801341c <create_name>
 80135ec:	4603      	mov	r3, r0
 80135ee:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80135f0:	7bfb      	ldrb	r3, [r7, #15]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d136      	bne.n	8013664 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80135f6:	6878      	ldr	r0, [r7, #4]
 80135f8:	f7ff fd80 	bl	80130fc <dir_find>
 80135fc:	4603      	mov	r3, r0
 80135fe:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013606:	7adb      	ldrb	r3, [r3, #11]
 8013608:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 801360a:	7bfb      	ldrb	r3, [r7, #15]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d00a      	beq.n	8013626 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013610:	7bfb      	ldrb	r3, [r7, #15]
 8013612:	2b04      	cmp	r3, #4
 8013614:	d128      	bne.n	8013668 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013616:	7bbb      	ldrb	r3, [r7, #14]
 8013618:	f003 0304 	and.w	r3, r3, #4
 801361c:	2b00      	cmp	r3, #0
 801361e:	d123      	bne.n	8013668 <follow_path+0xcc>
 8013620:	2305      	movs	r3, #5
 8013622:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8013624:	e020      	b.n	8013668 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013626:	7bbb      	ldrb	r3, [r7, #14]
 8013628:	f003 0304 	and.w	r3, r3, #4
 801362c:	2b00      	cmp	r3, #0
 801362e:	d11d      	bne.n	801366c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013636:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8013638:	68bb      	ldr	r3, [r7, #8]
 801363a:	330b      	adds	r3, #11
 801363c:	781b      	ldrb	r3, [r3, #0]
 801363e:	f003 0310 	and.w	r3, r3, #16
 8013642:	2b00      	cmp	r3, #0
 8013644:	d102      	bne.n	801364c <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8013646:	2305      	movs	r3, #5
 8013648:	73fb      	strb	r3, [r7, #15]
 801364a:	e010      	b.n	801366e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013652:	68b9      	ldr	r1, [r7, #8]
 8013654:	4618      	mov	r0, r3
 8013656:	f7ff fcfc 	bl	8013052 <ld_clust>
 801365a:	4602      	mov	r2, r0
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013662:	e7be      	b.n	80135e2 <follow_path+0x46>
			if (res != FR_OK) break;
 8013664:	bf00      	nop
 8013666:	e002      	b.n	801366e <follow_path+0xd2>
				break;
 8013668:	bf00      	nop
 801366a:	e000      	b.n	801366e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801366c:	bf00      	nop
		}
	}

	return res;
 801366e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013670:	4618      	mov	r0, r3
 8013672:	3710      	adds	r7, #16
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}

08013678 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013678:	b480      	push	{r7}
 801367a:	b087      	sub	sp, #28
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013680:	f04f 33ff 	mov.w	r3, #4294967295
 8013684:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d031      	beq.n	80136f2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	617b      	str	r3, [r7, #20]
 8013694:	e002      	b.n	801369c <get_ldnumber+0x24>
 8013696:	697b      	ldr	r3, [r7, #20]
 8013698:	3301      	adds	r3, #1
 801369a:	617b      	str	r3, [r7, #20]
 801369c:	697b      	ldr	r3, [r7, #20]
 801369e:	781b      	ldrb	r3, [r3, #0]
 80136a0:	2b20      	cmp	r3, #32
 80136a2:	d903      	bls.n	80136ac <get_ldnumber+0x34>
 80136a4:	697b      	ldr	r3, [r7, #20]
 80136a6:	781b      	ldrb	r3, [r3, #0]
 80136a8:	2b3a      	cmp	r3, #58	; 0x3a
 80136aa:	d1f4      	bne.n	8013696 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80136ac:	697b      	ldr	r3, [r7, #20]
 80136ae:	781b      	ldrb	r3, [r3, #0]
 80136b0:	2b3a      	cmp	r3, #58	; 0x3a
 80136b2:	d11c      	bne.n	80136ee <get_ldnumber+0x76>
			tp = *path;
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	1c5a      	adds	r2, r3, #1
 80136be:	60fa      	str	r2, [r7, #12]
 80136c0:	781b      	ldrb	r3, [r3, #0]
 80136c2:	3b30      	subs	r3, #48	; 0x30
 80136c4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80136c6:	68bb      	ldr	r3, [r7, #8]
 80136c8:	2b09      	cmp	r3, #9
 80136ca:	d80e      	bhi.n	80136ea <get_ldnumber+0x72>
 80136cc:	68fa      	ldr	r2, [r7, #12]
 80136ce:	697b      	ldr	r3, [r7, #20]
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d10a      	bne.n	80136ea <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80136d4:	68bb      	ldr	r3, [r7, #8]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d107      	bne.n	80136ea <get_ldnumber+0x72>
					vol = (int)i;
 80136da:	68bb      	ldr	r3, [r7, #8]
 80136dc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	3301      	adds	r3, #1
 80136e2:	617b      	str	r3, [r7, #20]
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	697a      	ldr	r2, [r7, #20]
 80136e8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80136ea:	693b      	ldr	r3, [r7, #16]
 80136ec:	e002      	b.n	80136f4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80136ee:	2300      	movs	r3, #0
 80136f0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80136f2:	693b      	ldr	r3, [r7, #16]
}
 80136f4:	4618      	mov	r0, r3
 80136f6:	371c      	adds	r7, #28
 80136f8:	46bd      	mov	sp, r7
 80136fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fe:	4770      	bx	lr

08013700 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b082      	sub	sp, #8
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
 8013708:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	2200      	movs	r2, #0
 801370e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f04f 32ff 	mov.w	r2, #4294967295
 8013718:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 801371c:	6839      	ldr	r1, [r7, #0]
 801371e:	6878      	ldr	r0, [r7, #4]
 8013720:	f7fe fed7 	bl	80124d2 <move_window>
 8013724:	4603      	mov	r3, r0
 8013726:	2b00      	cmp	r3, #0
 8013728:	d001      	beq.n	801372e <check_fs+0x2e>
		return 3;
 801372a:	2303      	movs	r3, #3
 801372c:	e04a      	b.n	80137c4 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013734:	3301      	adds	r3, #1
 8013736:	781b      	ldrb	r3, [r3, #0]
 8013738:	021b      	lsls	r3, r3, #8
 801373a:	b21a      	sxth	r2, r3
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8013742:	b21b      	sxth	r3, r3
 8013744:	4313      	orrs	r3, r2
 8013746:	b21b      	sxth	r3, r3
 8013748:	4a20      	ldr	r2, [pc, #128]	; (80137cc <check_fs+0xcc>)
 801374a:	4293      	cmp	r3, r2
 801374c:	d001      	beq.n	8013752 <check_fs+0x52>
		return 2;
 801374e:	2302      	movs	r3, #2
 8013750:	e038      	b.n	80137c4 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	3336      	adds	r3, #54	; 0x36
 8013756:	3303      	adds	r3, #3
 8013758:	781b      	ldrb	r3, [r3, #0]
 801375a:	061a      	lsls	r2, r3, #24
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	3336      	adds	r3, #54	; 0x36
 8013760:	3302      	adds	r3, #2
 8013762:	781b      	ldrb	r3, [r3, #0]
 8013764:	041b      	lsls	r3, r3, #16
 8013766:	4313      	orrs	r3, r2
 8013768:	687a      	ldr	r2, [r7, #4]
 801376a:	3236      	adds	r2, #54	; 0x36
 801376c:	3201      	adds	r2, #1
 801376e:	7812      	ldrb	r2, [r2, #0]
 8013770:	0212      	lsls	r2, r2, #8
 8013772:	4313      	orrs	r3, r2
 8013774:	687a      	ldr	r2, [r7, #4]
 8013776:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 801377a:	4313      	orrs	r3, r2
 801377c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013780:	4a13      	ldr	r2, [pc, #76]	; (80137d0 <check_fs+0xd0>)
 8013782:	4293      	cmp	r3, r2
 8013784:	d101      	bne.n	801378a <check_fs+0x8a>
		return 0;
 8013786:	2300      	movs	r3, #0
 8013788:	e01c      	b.n	80137c4 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	3352      	adds	r3, #82	; 0x52
 801378e:	3303      	adds	r3, #3
 8013790:	781b      	ldrb	r3, [r3, #0]
 8013792:	061a      	lsls	r2, r3, #24
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	3352      	adds	r3, #82	; 0x52
 8013798:	3302      	adds	r3, #2
 801379a:	781b      	ldrb	r3, [r3, #0]
 801379c:	041b      	lsls	r3, r3, #16
 801379e:	4313      	orrs	r3, r2
 80137a0:	687a      	ldr	r2, [r7, #4]
 80137a2:	3252      	adds	r2, #82	; 0x52
 80137a4:	3201      	adds	r2, #1
 80137a6:	7812      	ldrb	r2, [r2, #0]
 80137a8:	0212      	lsls	r2, r2, #8
 80137aa:	4313      	orrs	r3, r2
 80137ac:	687a      	ldr	r2, [r7, #4]
 80137ae:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80137b2:	4313      	orrs	r3, r2
 80137b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80137b8:	4a05      	ldr	r2, [pc, #20]	; (80137d0 <check_fs+0xd0>)
 80137ba:	4293      	cmp	r3, r2
 80137bc:	d101      	bne.n	80137c2 <check_fs+0xc2>
		return 0;
 80137be:	2300      	movs	r3, #0
 80137c0:	e000      	b.n	80137c4 <check_fs+0xc4>

	return 1;
 80137c2:	2301      	movs	r3, #1
}
 80137c4:	4618      	mov	r0, r3
 80137c6:	3708      	adds	r7, #8
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bd80      	pop	{r7, pc}
 80137cc:	ffffaa55 	.word	0xffffaa55
 80137d0:	00544146 	.word	0x00544146

080137d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b096      	sub	sp, #88	; 0x58
 80137d8:	af00      	add	r7, sp, #0
 80137da:	60f8      	str	r0, [r7, #12]
 80137dc:	60b9      	str	r1, [r7, #8]
 80137de:	4613      	mov	r3, r2
 80137e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	2200      	movs	r2, #0
 80137e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80137e8:	68b8      	ldr	r0, [r7, #8]
 80137ea:	f7ff ff45 	bl	8013678 <get_ldnumber>
 80137ee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80137f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	da01      	bge.n	80137fa <find_volume+0x26>
 80137f6:	230b      	movs	r3, #11
 80137f8:	e2aa      	b.n	8013d50 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80137fa:	4a9e      	ldr	r2, [pc, #632]	; (8013a74 <find_volume+0x2a0>)
 80137fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013802:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013806:	2b00      	cmp	r3, #0
 8013808:	d101      	bne.n	801380e <find_volume+0x3a>
 801380a:	230c      	movs	r3, #12
 801380c:	e2a0      	b.n	8013d50 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013812:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8013814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013816:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801381a:	2b00      	cmp	r3, #0
 801381c:	d01b      	beq.n	8013856 <find_volume+0x82>
		stat = disk_status(fs->drv);
 801381e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013820:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8013824:	4618      	mov	r0, r3
 8013826:	f7fe fa6b 	bl	8011d00 <disk_status>
 801382a:	4603      	mov	r3, r0
 801382c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013830:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013834:	f003 0301 	and.w	r3, r3, #1
 8013838:	2b00      	cmp	r3, #0
 801383a:	d10c      	bne.n	8013856 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 801383c:	79fb      	ldrb	r3, [r7, #7]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d007      	beq.n	8013852 <find_volume+0x7e>
 8013842:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013846:	f003 0304 	and.w	r3, r3, #4
 801384a:	2b00      	cmp	r3, #0
 801384c:	d001      	beq.n	8013852 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 801384e:	230a      	movs	r3, #10
 8013850:	e27e      	b.n	8013d50 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 8013852:	2300      	movs	r3, #0
 8013854:	e27c      	b.n	8013d50 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013858:	2200      	movs	r2, #0
 801385a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801385e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013860:	b2da      	uxtb	r2, r3
 8013862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013864:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801386a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801386e:	4618      	mov	r0, r3
 8013870:	f7fe fa60 	bl	8011d34 <disk_initialize>
 8013874:	4603      	mov	r3, r0
 8013876:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 801387a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801387e:	f003 0301 	and.w	r3, r3, #1
 8013882:	2b00      	cmp	r3, #0
 8013884:	d001      	beq.n	801388a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013886:	2303      	movs	r3, #3
 8013888:	e262      	b.n	8013d50 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 801388a:	79fb      	ldrb	r3, [r7, #7]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d007      	beq.n	80138a0 <find_volume+0xcc>
 8013890:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013894:	f003 0304 	and.w	r3, r3, #4
 8013898:	2b00      	cmp	r3, #0
 801389a:	d001      	beq.n	80138a0 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 801389c:	230a      	movs	r3, #10
 801389e:	e257      	b.n	8013d50 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80138a0:	2300      	movs	r3, #0
 80138a2:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80138a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80138a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80138a8:	f7ff ff2a 	bl	8013700 <check_fs>
 80138ac:	4603      	mov	r3, r0
 80138ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80138b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138b6:	2b01      	cmp	r3, #1
 80138b8:	d155      	bne.n	8013966 <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80138ba:	2300      	movs	r3, #0
 80138bc:	643b      	str	r3, [r7, #64]	; 0x40
 80138be:	e029      	b.n	8013914 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80138c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138c4:	011b      	lsls	r3, r3, #4
 80138c6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80138ca:	4413      	add	r3, r2
 80138cc:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80138ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d0:	3304      	adds	r3, #4
 80138d2:	781b      	ldrb	r3, [r3, #0]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d012      	beq.n	80138fe <find_volume+0x12a>
 80138d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138da:	330b      	adds	r3, #11
 80138dc:	781b      	ldrb	r3, [r3, #0]
 80138de:	061a      	lsls	r2, r3, #24
 80138e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e2:	330a      	adds	r3, #10
 80138e4:	781b      	ldrb	r3, [r3, #0]
 80138e6:	041b      	lsls	r3, r3, #16
 80138e8:	4313      	orrs	r3, r2
 80138ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138ec:	3209      	adds	r2, #9
 80138ee:	7812      	ldrb	r2, [r2, #0]
 80138f0:	0212      	lsls	r2, r2, #8
 80138f2:	4313      	orrs	r3, r2
 80138f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138f6:	3208      	adds	r2, #8
 80138f8:	7812      	ldrb	r2, [r2, #0]
 80138fa:	431a      	orrs	r2, r3
 80138fc:	e000      	b.n	8013900 <find_volume+0x12c>
 80138fe:	2200      	movs	r2, #0
 8013900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013902:	009b      	lsls	r3, r3, #2
 8013904:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8013908:	440b      	add	r3, r1
 801390a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 801390e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013910:	3301      	adds	r3, #1
 8013912:	643b      	str	r3, [r7, #64]	; 0x40
 8013914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013916:	2b03      	cmp	r3, #3
 8013918:	d9d2      	bls.n	80138c0 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 801391a:	2300      	movs	r3, #0
 801391c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801391e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013920:	2b00      	cmp	r3, #0
 8013922:	d002      	beq.n	801392a <find_volume+0x156>
 8013924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013926:	3b01      	subs	r3, #1
 8013928:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 801392a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801392c:	009b      	lsls	r3, r3, #2
 801392e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013932:	4413      	add	r3, r2
 8013934:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013938:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 801393a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801393c:	2b00      	cmp	r3, #0
 801393e:	d005      	beq.n	801394c <find_volume+0x178>
 8013940:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013942:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013944:	f7ff fedc 	bl	8013700 <check_fs>
 8013948:	4603      	mov	r3, r0
 801394a:	e000      	b.n	801394e <find_volume+0x17a>
 801394c:	2302      	movs	r3, #2
 801394e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8013952:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013956:	2b00      	cmp	r3, #0
 8013958:	d005      	beq.n	8013966 <find_volume+0x192>
 801395a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801395c:	3301      	adds	r3, #1
 801395e:	643b      	str	r3, [r7, #64]	; 0x40
 8013960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013962:	2b03      	cmp	r3, #3
 8013964:	d9e1      	bls.n	801392a <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013966:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801396a:	2b03      	cmp	r3, #3
 801396c:	d101      	bne.n	8013972 <find_volume+0x19e>
 801396e:	2301      	movs	r3, #1
 8013970:	e1ee      	b.n	8013d50 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8013972:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013976:	2b00      	cmp	r3, #0
 8013978:	d001      	beq.n	801397e <find_volume+0x1aa>
 801397a:	230d      	movs	r3, #13
 801397c:	e1e8      	b.n	8013d50 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801397e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013980:	7b1b      	ldrb	r3, [r3, #12]
 8013982:	021b      	lsls	r3, r3, #8
 8013984:	b21a      	sxth	r2, r3
 8013986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013988:	7adb      	ldrb	r3, [r3, #11]
 801398a:	b21b      	sxth	r3, r3
 801398c:	4313      	orrs	r3, r2
 801398e:	b21b      	sxth	r3, r3
 8013990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013994:	d001      	beq.n	801399a <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 8013996:	230d      	movs	r3, #13
 8013998:	e1da      	b.n	8013d50 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 801399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801399c:	7ddb      	ldrb	r3, [r3, #23]
 801399e:	021b      	lsls	r3, r3, #8
 80139a0:	b21a      	sxth	r2, r3
 80139a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139a4:	7d9b      	ldrb	r3, [r3, #22]
 80139a6:	b21b      	sxth	r3, r3
 80139a8:	4313      	orrs	r3, r2
 80139aa:	b21b      	sxth	r3, r3
 80139ac:	b29b      	uxth	r3, r3
 80139ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80139b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d112      	bne.n	80139dc <find_volume+0x208>
 80139b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80139bc:	061a      	lsls	r2, r3, #24
 80139be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139c0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80139c4:	041b      	lsls	r3, r3, #16
 80139c6:	4313      	orrs	r3, r2
 80139c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139ca:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80139ce:	0212      	lsls	r2, r2, #8
 80139d0:	4313      	orrs	r3, r2
 80139d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139d4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80139d8:	4313      	orrs	r3, r2
 80139da:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80139dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80139e0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80139e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139e6:	7c1a      	ldrb	r2, [r3, #16]
 80139e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139ea:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80139ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139f0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80139f4:	2b01      	cmp	r3, #1
 80139f6:	d006      	beq.n	8013a06 <find_volume+0x232>
 80139f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139fa:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80139fe:	2b02      	cmp	r3, #2
 8013a00:	d001      	beq.n	8013a06 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 8013a02:	230d      	movs	r3, #13
 8013a04:	e1a4      	b.n	8013d50 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8013a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a08:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8013a0c:	461a      	mov	r2, r3
 8013a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a10:	fb02 f303 	mul.w	r3, r2, r3
 8013a14:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8013a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a18:	7b5a      	ldrb	r2, [r3, #13]
 8013a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a1c:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8013a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a22:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d00a      	beq.n	8013a40 <find_volume+0x26c>
 8013a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a2c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8013a30:	461a      	mov	r2, r3
 8013a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a34:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8013a38:	3b01      	subs	r3, #1
 8013a3a:	4013      	ands	r3, r2
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d001      	beq.n	8013a44 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 8013a40:	230d      	movs	r3, #13
 8013a42:	e185      	b.n	8013d50 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8013a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a46:	7c9b      	ldrb	r3, [r3, #18]
 8013a48:	021b      	lsls	r3, r3, #8
 8013a4a:	b21a      	sxth	r2, r3
 8013a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a4e:	7c5b      	ldrb	r3, [r3, #17]
 8013a50:	b21b      	sxth	r3, r3
 8013a52:	4313      	orrs	r3, r2
 8013a54:	b21b      	sxth	r3, r3
 8013a56:	b29a      	uxth	r2, r3
 8013a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a5a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8013a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a60:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8013a64:	f003 030f 	and.w	r3, r3, #15
 8013a68:	b29b      	uxth	r3, r3
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d004      	beq.n	8013a78 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 8013a6e:	230d      	movs	r3, #13
 8013a70:	e16e      	b.n	8013d50 <find_volume+0x57c>
 8013a72:	bf00      	nop
 8013a74:	20000834 	.word	0x20000834

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8013a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a7a:	7d1b      	ldrb	r3, [r3, #20]
 8013a7c:	021b      	lsls	r3, r3, #8
 8013a7e:	b21a      	sxth	r2, r3
 8013a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a82:	7cdb      	ldrb	r3, [r3, #19]
 8013a84:	b21b      	sxth	r3, r3
 8013a86:	4313      	orrs	r3, r2
 8013a88:	b21b      	sxth	r3, r3
 8013a8a:	b29b      	uxth	r3, r3
 8013a8c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8013a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d112      	bne.n	8013aba <find_volume+0x2e6>
 8013a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a96:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8013a9a:	061a      	lsls	r2, r3, #24
 8013a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a9e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8013aa2:	041b      	lsls	r3, r3, #16
 8013aa4:	4313      	orrs	r3, r2
 8013aa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013aa8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8013aac:	0212      	lsls	r2, r2, #8
 8013aae:	4313      	orrs	r3, r2
 8013ab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ab2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8013ab6:	4313      	orrs	r3, r2
 8013ab8:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8013aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013abc:	7bdb      	ldrb	r3, [r3, #15]
 8013abe:	021b      	lsls	r3, r3, #8
 8013ac0:	b21a      	sxth	r2, r3
 8013ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ac4:	7b9b      	ldrb	r3, [r3, #14]
 8013ac6:	b21b      	sxth	r3, r3
 8013ac8:	4313      	orrs	r3, r2
 8013aca:	b21b      	sxth	r3, r3
 8013acc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8013ace:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d101      	bne.n	8013ad8 <find_volume+0x304>
 8013ad4:	230d      	movs	r3, #13
 8013ad6:	e13b      	b.n	8013d50 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8013ad8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013adc:	4413      	add	r3, r2
 8013ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ae0:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8013ae4:	0912      	lsrs	r2, r2, #4
 8013ae6:	b292      	uxth	r2, r2
 8013ae8:	4413      	add	r3, r2
 8013aea:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013aec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af0:	429a      	cmp	r2, r3
 8013af2:	d201      	bcs.n	8013af8 <find_volume+0x324>
 8013af4:	230d      	movs	r3, #13
 8013af6:	e12b      	b.n	8013d50 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8013af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013afc:	1ad3      	subs	r3, r2, r3
 8013afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b00:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8013b04:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b08:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8013b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d101      	bne.n	8013b14 <find_volume+0x340>
 8013b10:	230d      	movs	r3, #13
 8013b12:	e11d      	b.n	8013d50 <find_volume+0x57c>
	fmt = FS_FAT12;
 8013b14:	2301      	movs	r3, #1
 8013b16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8013b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b1c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013b20:	4293      	cmp	r3, r2
 8013b22:	d902      	bls.n	8013b2a <find_volume+0x356>
 8013b24:	2302      	movs	r3, #2
 8013b26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8013b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b2c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013b30:	4293      	cmp	r3, r2
 8013b32:	d902      	bls.n	8013b3a <find_volume+0x366>
 8013b34:	2303      	movs	r3, #3
 8013b36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8013b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b3c:	1c9a      	adds	r2, r3, #2
 8013b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8013b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013b48:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8013b4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b50:	441a      	add	r2, r3
 8013b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b54:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8013b58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b5c:	441a      	add	r2, r3
 8013b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b60:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8013b64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b68:	2b03      	cmp	r3, #3
 8013b6a:	d121      	bne.n	8013bb0 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8013b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b6e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d001      	beq.n	8013b7a <find_volume+0x3a6>
 8013b76:	230d      	movs	r3, #13
 8013b78:	e0ea      	b.n	8013d50 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8013b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b7c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013b80:	061a      	lsls	r2, r3, #24
 8013b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b84:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8013b88:	041b      	lsls	r3, r3, #16
 8013b8a:	4313      	orrs	r3, r2
 8013b8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b8e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8013b92:	0212      	lsls	r2, r2, #8
 8013b94:	4313      	orrs	r3, r2
 8013b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b98:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8013b9c:	431a      	orrs	r2, r3
 8013b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ba0:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8013ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ba6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013baa:	009b      	lsls	r3, r3, #2
 8013bac:	647b      	str	r3, [r7, #68]	; 0x44
 8013bae:	e025      	b.n	8013bfc <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8013bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bb2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d101      	bne.n	8013bbe <find_volume+0x3ea>
 8013bba:	230d      	movs	r3, #13
 8013bbc:	e0c8      	b.n	8013d50 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8013bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bc0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8013bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bc6:	441a      	add	r2, r3
 8013bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bca:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013bce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013bd2:	2b02      	cmp	r3, #2
 8013bd4:	d104      	bne.n	8013be0 <find_volume+0x40c>
 8013bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013bdc:	005b      	lsls	r3, r3, #1
 8013bde:	e00c      	b.n	8013bfa <find_volume+0x426>
 8013be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013be2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8013be6:	4613      	mov	r3, r2
 8013be8:	005b      	lsls	r3, r3, #1
 8013bea:	4413      	add	r3, r2
 8013bec:	085a      	lsrs	r2, r3, #1
 8013bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bf0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013bf4:	f003 0301 	and.w	r3, r3, #1
 8013bf8:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8013bfa:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8013bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bfe:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8013c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c04:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013c08:	0a5b      	lsrs	r3, r3, #9
 8013c0a:	429a      	cmp	r2, r3
 8013c0c:	d201      	bcs.n	8013c12 <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 8013c0e:	230d      	movs	r3, #13
 8013c10:	e09e      	b.n	8013d50 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8013c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c14:	f04f 32ff 	mov.w	r2, #4294967295
 8013c18:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8013c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c1e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8013c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c24:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8013c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c2a:	2280      	movs	r2, #128	; 0x80
 8013c2c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8013c30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c34:	2b03      	cmp	r3, #3
 8013c36:	d177      	bne.n	8013d28 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8013c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013c3e:	021b      	lsls	r3, r3, #8
 8013c40:	b21a      	sxth	r2, r3
 8013c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013c48:	b21b      	sxth	r3, r3
 8013c4a:	4313      	orrs	r3, r2
 8013c4c:	b21b      	sxth	r3, r3
 8013c4e:	2b01      	cmp	r3, #1
 8013c50:	d16a      	bne.n	8013d28 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 8013c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c54:	3301      	adds	r3, #1
 8013c56:	4619      	mov	r1, r3
 8013c58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013c5a:	f7fe fc3a 	bl	80124d2 <move_window>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d161      	bne.n	8013d28 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 8013c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c66:	2200      	movs	r2, #0
 8013c68:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c6e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8013c72:	021b      	lsls	r3, r3, #8
 8013c74:	b21a      	sxth	r2, r3
 8013c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c78:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8013c7c:	b21b      	sxth	r3, r3
 8013c7e:	4313      	orrs	r3, r2
 8013c80:	b21b      	sxth	r3, r3
 8013c82:	4a35      	ldr	r2, [pc, #212]	; (8013d58 <find_volume+0x584>)
 8013c84:	4293      	cmp	r3, r2
 8013c86:	d14f      	bne.n	8013d28 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8013c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c8a:	78db      	ldrb	r3, [r3, #3]
 8013c8c:	061a      	lsls	r2, r3, #24
 8013c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c90:	789b      	ldrb	r3, [r3, #2]
 8013c92:	041b      	lsls	r3, r3, #16
 8013c94:	4313      	orrs	r3, r2
 8013c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013c98:	7852      	ldrb	r2, [r2, #1]
 8013c9a:	0212      	lsls	r2, r2, #8
 8013c9c:	4313      	orrs	r3, r2
 8013c9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ca0:	7812      	ldrb	r2, [r2, #0]
 8013ca2:	4313      	orrs	r3, r2
 8013ca4:	4a2d      	ldr	r2, [pc, #180]	; (8013d5c <find_volume+0x588>)
 8013ca6:	4293      	cmp	r3, r2
 8013ca8:	d13e      	bne.n	8013d28 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8013caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cac:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8013cb0:	061a      	lsls	r2, r3, #24
 8013cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cb4:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8013cb8:	041b      	lsls	r3, r3, #16
 8013cba:	4313      	orrs	r3, r2
 8013cbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013cbe:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8013cc2:	0212      	lsls	r2, r2, #8
 8013cc4:	4313      	orrs	r3, r2
 8013cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013cc8:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8013ccc:	4313      	orrs	r3, r2
 8013cce:	4a24      	ldr	r2, [pc, #144]	; (8013d60 <find_volume+0x58c>)
 8013cd0:	4293      	cmp	r3, r2
 8013cd2:	d129      	bne.n	8013d28 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8013cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cd6:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8013cda:	061a      	lsls	r2, r3, #24
 8013cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cde:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8013ce2:	041b      	lsls	r3, r3, #16
 8013ce4:	4313      	orrs	r3, r2
 8013ce6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ce8:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8013cec:	0212      	lsls	r2, r2, #8
 8013cee:	4313      	orrs	r3, r2
 8013cf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013cf2:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8013cf6:	431a      	orrs	r2, r3
 8013cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cfa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8013cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d00:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8013d04:	061a      	lsls	r2, r3, #24
 8013d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d08:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8013d0c:	041b      	lsls	r3, r3, #16
 8013d0e:	4313      	orrs	r3, r2
 8013d10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d12:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8013d16:	0212      	lsls	r2, r2, #8
 8013d18:	4313      	orrs	r3, r2
 8013d1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d1c:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8013d20:	431a      	orrs	r2, r3
 8013d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d24:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8013d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d2a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013d2e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8013d32:	4b0c      	ldr	r3, [pc, #48]	; (8013d64 <find_volume+0x590>)
 8013d34:	881b      	ldrh	r3, [r3, #0]
 8013d36:	3301      	adds	r3, #1
 8013d38:	b29a      	uxth	r2, r3
 8013d3a:	4b0a      	ldr	r3, [pc, #40]	; (8013d64 <find_volume+0x590>)
 8013d3c:	801a      	strh	r2, [r3, #0]
 8013d3e:	4b09      	ldr	r3, [pc, #36]	; (8013d64 <find_volume+0x590>)
 8013d40:	881a      	ldrh	r2, [r3, #0]
 8013d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d44:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8013d48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013d4a:	f7fe fb4f 	bl	80123ec <clear_lock>
#endif

	return FR_OK;
 8013d4e:	2300      	movs	r3, #0
}
 8013d50:	4618      	mov	r0, r3
 8013d52:	3758      	adds	r7, #88	; 0x58
 8013d54:	46bd      	mov	sp, r7
 8013d56:	bd80      	pop	{r7, pc}
 8013d58:	ffffaa55 	.word	0xffffaa55
 8013d5c:	41615252 	.word	0x41615252
 8013d60:	61417272 	.word	0x61417272
 8013d64:	20000838 	.word	0x20000838

08013d68 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b084      	sub	sp, #16
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d022      	beq.n	8013dc0 <validate+0x58>
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d01d      	beq.n	8013dc0 <validate+0x58>
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013d8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d016      	beq.n	8013dc0 <validate+0x58>
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013d98:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8013da2:	429a      	cmp	r2, r3
 8013da4:	d10c      	bne.n	8013dc0 <validate+0x58>
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8013dac:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8013db0:	4618      	mov	r0, r3
 8013db2:	f7fd ffa5 	bl	8011d00 <disk_status>
 8013db6:	4603      	mov	r3, r0
 8013db8:	f003 0301 	and.w	r3, r3, #1
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d001      	beq.n	8013dc4 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8013dc0:	2309      	movs	r3, #9
 8013dc2:	e000      	b.n	8013dc6 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8013dc4:	2300      	movs	r3, #0
}
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	3710      	adds	r7, #16
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bd80      	pop	{r7, pc}
	...

08013dd0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b088      	sub	sp, #32
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	60f8      	str	r0, [r7, #12]
 8013dd8:	60b9      	str	r1, [r7, #8]
 8013dda:	4613      	mov	r3, r2
 8013ddc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8013de2:	f107 0310 	add.w	r3, r7, #16
 8013de6:	4618      	mov	r0, r3
 8013de8:	f7ff fc46 	bl	8013678 <get_ldnumber>
 8013dec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013dee:	69fb      	ldr	r3, [r7, #28]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	da01      	bge.n	8013df8 <f_mount+0x28>
 8013df4:	230b      	movs	r3, #11
 8013df6:	e02d      	b.n	8013e54 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013df8:	4a18      	ldr	r2, [pc, #96]	; (8013e5c <f_mount+0x8c>)
 8013dfa:	69fb      	ldr	r3, [r7, #28]
 8013dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013e02:	69bb      	ldr	r3, [r7, #24]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d006      	beq.n	8013e16 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8013e08:	69b8      	ldr	r0, [r7, #24]
 8013e0a:	f7fe faef 	bl	80123ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013e0e:	69bb      	ldr	r3, [r7, #24]
 8013e10:	2200      	movs	r2, #0
 8013e12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d003      	beq.n	8013e24 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	2200      	movs	r2, #0
 8013e20:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013e24:	68fa      	ldr	r2, [r7, #12]
 8013e26:	490d      	ldr	r1, [pc, #52]	; (8013e5c <f_mount+0x8c>)
 8013e28:	69fb      	ldr	r3, [r7, #28]
 8013e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d002      	beq.n	8013e3a <f_mount+0x6a>
 8013e34:	79fb      	ldrb	r3, [r7, #7]
 8013e36:	2b01      	cmp	r3, #1
 8013e38:	d001      	beq.n	8013e3e <f_mount+0x6e>
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	e00a      	b.n	8013e54 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8013e3e:	f107 0108 	add.w	r1, r7, #8
 8013e42:	f107 030c 	add.w	r3, r7, #12
 8013e46:	2200      	movs	r2, #0
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f7ff fcc3 	bl	80137d4 <find_volume>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	3720      	adds	r7, #32
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}
 8013e5c:	20000834 	.word	0x20000834

08013e60 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8013e66:	af00      	add	r7, sp, #0
 8013e68:	f107 030c 	add.w	r3, r7, #12
 8013e6c:	6018      	str	r0, [r3, #0]
 8013e6e:	f107 0308 	add.w	r3, r7, #8
 8013e72:	6019      	str	r1, [r3, #0]
 8013e74:	1dfb      	adds	r3, r7, #7
 8013e76:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8013e78:	f107 030c 	add.w	r3, r7, #12
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d101      	bne.n	8013e86 <f_open+0x26>
 8013e82:	2309      	movs	r3, #9
 8013e84:	e1f2      	b.n	801426c <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 8013e86:	f107 030c 	add.w	r3, r7, #12
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8013e92:	1dfb      	adds	r3, r7, #7
 8013e94:	1dfa      	adds	r2, r7, #7
 8013e96:	7812      	ldrb	r2, [r2, #0]
 8013e98:	f002 021f 	and.w	r2, r2, #31
 8013e9c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8013e9e:	1dfb      	adds	r3, r7, #7
 8013ea0:	781b      	ldrb	r3, [r3, #0]
 8013ea2:	f023 0301 	bic.w	r3, r3, #1
 8013ea6:	b2da      	uxtb	r2, r3
 8013ea8:	f107 0108 	add.w	r1, r7, #8
 8013eac:	f107 0320 	add.w	r3, r7, #32
 8013eb0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7ff fc8d 	bl	80137d4 <find_volume>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8013ec0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	f040 81cf 	bne.w	8014268 <f_open+0x408>
		INIT_BUF(dj);
 8013eca:	f107 0320 	add.w	r3, r7, #32
 8013ece:	f107 0214 	add.w	r2, r7, #20
 8013ed2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8013ed6:	f107 0308 	add.w	r3, r7, #8
 8013eda:	681a      	ldr	r2, [r3, #0]
 8013edc:	f107 0320 	add.w	r3, r7, #32
 8013ee0:	4611      	mov	r1, r2
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f7ff fb5a 	bl	801359c <follow_path>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8013eee:	f107 0320 	add.w	r3, r7, #32
 8013ef2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013ef6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013efa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d11a      	bne.n	8013f38 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 8013f02:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d103      	bne.n	8013f12 <f_open+0xb2>
				res = FR_INVALID_NAME;
 8013f0a:	2306      	movs	r3, #6
 8013f0c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8013f10:	e012      	b.n	8013f38 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013f12:	1dfb      	adds	r3, r7, #7
 8013f14:	781b      	ldrb	r3, [r3, #0]
 8013f16:	f023 0301 	bic.w	r3, r3, #1
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	bf14      	ite	ne
 8013f1e:	2301      	movne	r3, #1
 8013f20:	2300      	moveq	r3, #0
 8013f22:	b2db      	uxtb	r3, r3
 8013f24:	461a      	mov	r2, r3
 8013f26:	f107 0320 	add.w	r3, r7, #32
 8013f2a:	4611      	mov	r1, r2
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7fe f8cf 	bl	80120d0 <chk_lock>
 8013f32:	4603      	mov	r3, r0
 8013f34:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013f38:	1dfb      	adds	r3, r7, #7
 8013f3a:	781b      	ldrb	r3, [r3, #0]
 8013f3c:	f003 031c 	and.w	r3, r3, #28
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	f000 80cc 	beq.w	80140de <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 8013f46:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d01f      	beq.n	8013f8e <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8013f4e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8013f52:	2b04      	cmp	r3, #4
 8013f54:	d10e      	bne.n	8013f74 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013f56:	f7fe f929 	bl	80121ac <enq_lock>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d006      	beq.n	8013f6e <f_open+0x10e>
 8013f60:	f107 0320 	add.w	r3, r7, #32
 8013f64:	4618      	mov	r0, r3
 8013f66:	f7ff f977 	bl	8013258 <dir_register>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	e000      	b.n	8013f70 <f_open+0x110>
 8013f6e:	2312      	movs	r3, #18
 8013f70:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013f74:	1dfb      	adds	r3, r7, #7
 8013f76:	1dfa      	adds	r2, r7, #7
 8013f78:	7812      	ldrb	r2, [r2, #0]
 8013f7a:	f042 0208 	orr.w	r2, r2, #8
 8013f7e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8013f80:	f107 0320 	add.w	r3, r7, #32
 8013f84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013f88:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8013f8c:	e014      	b.n	8013fb8 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013f8e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8013f92:	330b      	adds	r3, #11
 8013f94:	781b      	ldrb	r3, [r3, #0]
 8013f96:	f003 0311 	and.w	r3, r3, #17
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d003      	beq.n	8013fa6 <f_open+0x146>
					res = FR_DENIED;
 8013f9e:	2307      	movs	r3, #7
 8013fa0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8013fa4:	e008      	b.n	8013fb8 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8013fa6:	1dfb      	adds	r3, r7, #7
 8013fa8:	781b      	ldrb	r3, [r3, #0]
 8013faa:	f003 0304 	and.w	r3, r3, #4
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d002      	beq.n	8013fb8 <f_open+0x158>
						res = FR_EXIST;
 8013fb2:	2308      	movs	r3, #8
 8013fb4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013fb8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	f040 80af 	bne.w	8014120 <f_open+0x2c0>
 8013fc2:	1dfb      	adds	r3, r7, #7
 8013fc4:	781b      	ldrb	r3, [r3, #0]
 8013fc6:	f003 0308 	and.w	r3, r3, #8
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	f000 80a8 	beq.w	8014120 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 8013fd0:	f7ed fc16 	bl	8001800 <get_fattime>
 8013fd4:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8013fd8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8013fdc:	330e      	adds	r3, #14
 8013fde:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8013fe2:	b2d2      	uxtb	r2, r2
 8013fe4:	701a      	strb	r2, [r3, #0]
 8013fe6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8013fea:	330f      	adds	r3, #15
 8013fec:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8013ff0:	b292      	uxth	r2, r2
 8013ff2:	0a12      	lsrs	r2, r2, #8
 8013ff4:	b292      	uxth	r2, r2
 8013ff6:	b2d2      	uxtb	r2, r2
 8013ff8:	701a      	strb	r2, [r3, #0]
 8013ffa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8013ffe:	3310      	adds	r3, #16
 8014000:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8014004:	0c12      	lsrs	r2, r2, #16
 8014006:	b2d2      	uxtb	r2, r2
 8014008:	701a      	strb	r2, [r3, #0]
 801400a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801400e:	3311      	adds	r3, #17
 8014010:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8014014:	0e12      	lsrs	r2, r2, #24
 8014016:	b2d2      	uxtb	r2, r2
 8014018:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 801401a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801401e:	330b      	adds	r3, #11
 8014020:	2200      	movs	r2, #0
 8014022:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8014024:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8014028:	331c      	adds	r3, #28
 801402a:	2200      	movs	r2, #0
 801402c:	701a      	strb	r2, [r3, #0]
 801402e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8014032:	331d      	adds	r3, #29
 8014034:	2200      	movs	r2, #0
 8014036:	701a      	strb	r2, [r3, #0]
 8014038:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801403c:	331e      	adds	r3, #30
 801403e:	2200      	movs	r2, #0
 8014040:	701a      	strb	r2, [r3, #0]
 8014042:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8014046:	331f      	adds	r3, #31
 8014048:	2200      	movs	r2, #0
 801404a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 801404c:	f107 0320 	add.w	r3, r7, #32
 8014050:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014054:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8014058:	4618      	mov	r0, r3
 801405a:	f7fe fffa 	bl	8013052 <ld_clust>
 801405e:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8014062:	2100      	movs	r1, #0
 8014064:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8014068:	f7ff f821 	bl	80130ae <st_clust>
				dj.fs->wflag = 1;
 801406c:	f107 0320 	add.w	r3, r7, #32
 8014070:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014074:	2201      	movs	r2, #1
 8014076:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 801407a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801407e:	2b00      	cmp	r3, #0
 8014080:	d04e      	beq.n	8014120 <f_open+0x2c0>
					dw = dj.fs->winsect;
 8014082:	f107 0320 	add.w	r3, r7, #32
 8014086:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801408a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 801408e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8014092:	f107 0320 	add.w	r3, r7, #32
 8014096:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801409a:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 801409e:	4618      	mov	r0, r3
 80140a0:	f7fe fcd6 	bl	8012a50 <remove_chain>
 80140a4:	4603      	mov	r3, r0
 80140a6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 80140aa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d136      	bne.n	8014120 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80140b2:	f107 0320 	add.w	r3, r7, #32
 80140b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80140ba:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80140be:	3a01      	subs	r2, #1
 80140c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 80140c4:	f107 0320 	add.w	r3, r7, #32
 80140c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80140cc:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80140d0:	4618      	mov	r0, r3
 80140d2:	f7fe f9fe 	bl	80124d2 <move_window>
 80140d6:	4603      	mov	r3, r0
 80140d8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80140dc:	e020      	b.n	8014120 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80140de:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d11c      	bne.n	8014120 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80140e6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80140ea:	330b      	adds	r3, #11
 80140ec:	781b      	ldrb	r3, [r3, #0]
 80140ee:	f003 0310 	and.w	r3, r3, #16
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d003      	beq.n	80140fe <f_open+0x29e>
					res = FR_NO_FILE;
 80140f6:	2304      	movs	r3, #4
 80140f8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80140fc:	e010      	b.n	8014120 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80140fe:	1dfb      	adds	r3, r7, #7
 8014100:	781b      	ldrb	r3, [r3, #0]
 8014102:	f003 0302 	and.w	r3, r3, #2
 8014106:	2b00      	cmp	r3, #0
 8014108:	d00a      	beq.n	8014120 <f_open+0x2c0>
 801410a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801410e:	330b      	adds	r3, #11
 8014110:	781b      	ldrb	r3, [r3, #0]
 8014112:	f003 0301 	and.w	r3, r3, #1
 8014116:	2b00      	cmp	r3, #0
 8014118:	d002      	beq.n	8014120 <f_open+0x2c0>
						res = FR_DENIED;
 801411a:	2307      	movs	r3, #7
 801411c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8014120:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8014124:	2b00      	cmp	r3, #0
 8014126:	d13d      	bne.n	80141a4 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014128:	1dfb      	adds	r3, r7, #7
 801412a:	781b      	ldrb	r3, [r3, #0]
 801412c:	f003 0308 	and.w	r3, r3, #8
 8014130:	2b00      	cmp	r3, #0
 8014132:	d005      	beq.n	8014140 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 8014134:	1dfb      	adds	r3, r7, #7
 8014136:	1dfa      	adds	r2, r7, #7
 8014138:	7812      	ldrb	r2, [r2, #0]
 801413a:	f042 0220 	orr.w	r2, r2, #32
 801413e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8014140:	f107 0320 	add.w	r3, r7, #32
 8014144:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014148:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 801414c:	f107 030c 	add.w	r3, r7, #12
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8014156:	f107 030c 	add.w	r3, r7, #12
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8014160:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014164:	1dfb      	adds	r3, r7, #7
 8014166:	781b      	ldrb	r3, [r3, #0]
 8014168:	f023 0301 	bic.w	r3, r3, #1
 801416c:	2b00      	cmp	r3, #0
 801416e:	bf14      	ite	ne
 8014170:	2301      	movne	r3, #1
 8014172:	2300      	moveq	r3, #0
 8014174:	b2db      	uxtb	r3, r3
 8014176:	461a      	mov	r2, r3
 8014178:	f107 0320 	add.w	r3, r7, #32
 801417c:	4611      	mov	r1, r2
 801417e:	4618      	mov	r0, r3
 8014180:	f7fe f838 	bl	80121f4 <inc_lock>
 8014184:	4602      	mov	r2, r0
 8014186:	f107 030c 	add.w	r3, r7, #12
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8014190:	f107 030c 	add.w	r3, r7, #12
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 801419a:	2b00      	cmp	r3, #0
 801419c:	d102      	bne.n	80141a4 <f_open+0x344>
 801419e:	2302      	movs	r3, #2
 80141a0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80141a4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d15d      	bne.n	8014268 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 80141ac:	f107 030c 	add.w	r3, r7, #12
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	1dfa      	adds	r2, r7, #7
 80141b4:	7812      	ldrb	r2, [r2, #0]
 80141b6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80141ba:	f107 030c 	add.w	r3, r7, #12
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	2200      	movs	r2, #0
 80141c2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80141c6:	f107 0320 	add.w	r3, r7, #32
 80141ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80141ce:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80141d2:	4618      	mov	r0, r3
 80141d4:	f7fe ff3d 	bl	8013052 <ld_clust>
 80141d8:	4602      	mov	r2, r0
 80141da:	f107 030c 	add.w	r3, r7, #12
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80141e4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80141e8:	331f      	adds	r3, #31
 80141ea:	781b      	ldrb	r3, [r3, #0]
 80141ec:	061a      	lsls	r2, r3, #24
 80141ee:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80141f2:	331e      	adds	r3, #30
 80141f4:	781b      	ldrb	r3, [r3, #0]
 80141f6:	041b      	lsls	r3, r3, #16
 80141f8:	4313      	orrs	r3, r2
 80141fa:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80141fe:	321d      	adds	r2, #29
 8014200:	7812      	ldrb	r2, [r2, #0]
 8014202:	0212      	lsls	r2, r2, #8
 8014204:	4313      	orrs	r3, r2
 8014206:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801420a:	321c      	adds	r2, #28
 801420c:	7812      	ldrb	r2, [r2, #0]
 801420e:	431a      	orrs	r2, r3
 8014210:	f107 030c 	add.w	r3, r7, #12
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 801421a:	f107 030c 	add.w	r3, r7, #12
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	2200      	movs	r2, #0
 8014222:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8014226:	f107 030c 	add.w	r3, r7, #12
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	2200      	movs	r2, #0
 801422e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8014232:	f107 030c 	add.w	r3, r7, #12
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	2200      	movs	r2, #0
 801423a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 801423e:	f107 0320 	add.w	r3, r7, #32
 8014242:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8014246:	f107 030c 	add.w	r3, r7, #12
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8014250:	f107 030c 	add.w	r3, r7, #12
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801425a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 801425e:	f107 030c 	add.w	r3, r7, #12
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8014268:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 801426c:	4618      	mov	r0, r3
 801426e:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}

08014276 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014276:	b580      	push	{r7, lr}
 8014278:	b08a      	sub	sp, #40	; 0x28
 801427a:	af00      	add	r7, sp, #0
 801427c:	60f8      	str	r0, [r7, #12]
 801427e:	60b9      	str	r1, [r7, #8]
 8014280:	607a      	str	r2, [r7, #4]
 8014282:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8014284:	68bb      	ldr	r3, [r7, #8]
 8014286:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8014288:	683b      	ldr	r3, [r7, #0]
 801428a:	2200      	movs	r2, #0
 801428c:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 801428e:	68f8      	ldr	r0, [r7, #12]
 8014290:	f7ff fd6a 	bl	8013d68 <validate>
 8014294:	4603      	mov	r3, r0
 8014296:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8014298:	7dfb      	ldrb	r3, [r7, #23]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d001      	beq.n	80142a2 <f_write+0x2c>
 801429e:	7dfb      	ldrb	r3, [r7, #23]
 80142a0:	e192      	b.n	80145c8 <f_write+0x352>
	if (fp->err)							/* Check error */
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d003      	beq.n	80142b4 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80142b2:	e189      	b.n	80145c8 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80142ba:	f003 0302 	and.w	r3, r3, #2
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d101      	bne.n	80142c6 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80142c2:	2307      	movs	r3, #7
 80142c4:	e180      	b.n	80145c8 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	441a      	add	r2, r3
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80142d6:	429a      	cmp	r2, r3
 80142d8:	f080 8158 	bcs.w	801458c <f_write+0x316>
 80142dc:	2300      	movs	r3, #0
 80142de:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80142e0:	e154      	b.n	801458c <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80142e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	f040 8114 	bne.w	801451a <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80142f8:	0a5b      	lsrs	r3, r3, #9
 80142fa:	b2da      	uxtb	r2, r3
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014302:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8014306:	3b01      	subs	r3, #1
 8014308:	b2db      	uxtb	r3, r3
 801430a:	4013      	ands	r3, r2
 801430c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 801430e:	7dbb      	ldrb	r3, [r7, #22]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d151      	bne.n	80143b8 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801431a:	2b00      	cmp	r3, #0
 801431c:	d10f      	bne.n	801433e <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014324:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8014326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014328:	2b00      	cmp	r3, #0
 801432a:	d121      	bne.n	8014370 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014332:	2100      	movs	r1, #0
 8014334:	4618      	mov	r0, r3
 8014336:	f7fe fbe5 	bl	8012b04 <create_chain>
 801433a:	6278      	str	r0, [r7, #36]	; 0x24
 801433c:	e018      	b.n	8014370 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8014344:	2b00      	cmp	r3, #0
 8014346:	d008      	beq.n	801435a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801434e:	4619      	mov	r1, r3
 8014350:	68f8      	ldr	r0, [r7, #12]
 8014352:	f7fe fc74 	bl	8012c3e <clmt_clust>
 8014356:	6278      	str	r0, [r7, #36]	; 0x24
 8014358:	e00a      	b.n	8014370 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014366:	4619      	mov	r1, r3
 8014368:	4610      	mov	r0, r2
 801436a:	f7fe fbcb 	bl	8012b04 <create_chain>
 801436e:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014372:	2b00      	cmp	r3, #0
 8014374:	f000 810f 	beq.w	8014596 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8014378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801437a:	2b01      	cmp	r3, #1
 801437c:	d105      	bne.n	801438a <f_write+0x114>
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	2202      	movs	r2, #2
 8014382:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8014386:	2302      	movs	r3, #2
 8014388:	e11e      	b.n	80145c8 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014390:	d105      	bne.n	801439e <f_write+0x128>
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	2201      	movs	r2, #1
 8014396:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801439a:	2301      	movs	r3, #1
 801439c:	e114      	b.n	80145c8 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d103      	bne.n	80143b8 <f_write+0x142>
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143b4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80143be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d01d      	beq.n	8014402 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80143cc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80143d0:	68f9      	ldr	r1, [r7, #12]
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80143d8:	2301      	movs	r3, #1
 80143da:	f7fd fcf1 	bl	8011dc0 <disk_write>
 80143de:	4603      	mov	r3, r0
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d005      	beq.n	80143f0 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	2201      	movs	r2, #1
 80143e8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80143ec:	2301      	movs	r3, #1
 80143ee:	e0eb      	b.n	80145c8 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80143f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80143fa:	b2da      	uxtb	r2, r3
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801440e:	4619      	mov	r1, r3
 8014410:	4610      	mov	r0, r2
 8014412:	f7fe f939 	bl	8012688 <clust2sect>
 8014416:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8014418:	693b      	ldr	r3, [r7, #16]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d105      	bne.n	801442a <f_write+0x1b4>
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	2202      	movs	r2, #2
 8014422:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8014426:	2302      	movs	r3, #2
 8014428:	e0ce      	b.n	80145c8 <f_write+0x352>
			sect += csect;
 801442a:	7dbb      	ldrb	r3, [r7, #22]
 801442c:	693a      	ldr	r2, [r7, #16]
 801442e:	4413      	add	r3, r2
 8014430:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	0a5b      	lsrs	r3, r3, #9
 8014436:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014438:	69fb      	ldr	r3, [r7, #28]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d048      	beq.n	80144d0 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 801443e:	7dba      	ldrb	r2, [r7, #22]
 8014440:	69fb      	ldr	r3, [r7, #28]
 8014442:	4413      	add	r3, r2
 8014444:	68fa      	ldr	r2, [r7, #12]
 8014446:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 801444a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 801444e:	4293      	cmp	r3, r2
 8014450:	d908      	bls.n	8014464 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014458:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 801445c:	461a      	mov	r2, r3
 801445e:	7dbb      	ldrb	r3, [r7, #22]
 8014460:	1ad3      	subs	r3, r2, r3
 8014462:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801446a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 801446e:	69fb      	ldr	r3, [r7, #28]
 8014470:	693a      	ldr	r2, [r7, #16]
 8014472:	69b9      	ldr	r1, [r7, #24]
 8014474:	f7fd fca4 	bl	8011dc0 <disk_write>
 8014478:	4603      	mov	r3, r0
 801447a:	2b00      	cmp	r3, #0
 801447c:	d005      	beq.n	801448a <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	2201      	movs	r2, #1
 8014482:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8014486:	2301      	movs	r3, #1
 8014488:	e09e      	b.n	80145c8 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8014490:	693b      	ldr	r3, [r7, #16]
 8014492:	1ad2      	subs	r2, r2, r3
 8014494:	69fb      	ldr	r3, [r7, #28]
 8014496:	429a      	cmp	r2, r3
 8014498:	d216      	bcs.n	80144c8 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 801449a:	68f8      	ldr	r0, [r7, #12]
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80144a2:	693b      	ldr	r3, [r7, #16]
 80144a4:	1ad3      	subs	r3, r2, r3
 80144a6:	025b      	lsls	r3, r3, #9
 80144a8:	69ba      	ldr	r2, [r7, #24]
 80144aa:	4413      	add	r3, r2
 80144ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80144b0:	4619      	mov	r1, r3
 80144b2:	f7fd fd93 	bl	8011fdc <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80144bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80144c0:	b2da      	uxtb	r2, r3
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80144c8:	69fb      	ldr	r3, [r7, #28]
 80144ca:	025b      	lsls	r3, r3, #9
 80144cc:	623b      	str	r3, [r7, #32]
				continue;
 80144ce:	e047      	b.n	8014560 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80144d6:	693b      	ldr	r3, [r7, #16]
 80144d8:	429a      	cmp	r2, r3
 80144da:	d01a      	beq.n	8014512 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80144e8:	429a      	cmp	r2, r3
 80144ea:	d212      	bcs.n	8014512 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80144f2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80144f6:	68f9      	ldr	r1, [r7, #12]
 80144f8:	2301      	movs	r3, #1
 80144fa:	693a      	ldr	r2, [r7, #16]
 80144fc:	f7fd fc40 	bl	8011d80 <disk_read>
 8014500:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8014502:	2b00      	cmp	r3, #0
 8014504:	d005      	beq.n	8014512 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	2201      	movs	r2, #1
 801450a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801450e:	2301      	movs	r3, #1
 8014510:	e05a      	b.n	80145c8 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	693a      	ldr	r2, [r7, #16]
 8014516:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8014520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014524:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014528:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 801452a:	6a3a      	ldr	r2, [r7, #32]
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	429a      	cmp	r2, r3
 8014530:	d901      	bls.n	8014536 <f_write+0x2c0>
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801453c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014540:	68fa      	ldr	r2, [r7, #12]
 8014542:	4413      	add	r3, r2
 8014544:	6a3a      	ldr	r2, [r7, #32]
 8014546:	69b9      	ldr	r1, [r7, #24]
 8014548:	4618      	mov	r0, r3
 801454a:	f7fd fd47 	bl	8011fdc <mem_cpy>
		fp->flag |= FA__DIRTY;
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8014554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014558:	b2da      	uxtb	r2, r3
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8014560:	69ba      	ldr	r2, [r7, #24]
 8014562:	6a3b      	ldr	r3, [r7, #32]
 8014564:	4413      	add	r3, r2
 8014566:	61bb      	str	r3, [r7, #24]
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801456e:	6a3b      	ldr	r3, [r7, #32]
 8014570:	441a      	add	r2, r3
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8014578:	683b      	ldr	r3, [r7, #0]
 801457a:	681a      	ldr	r2, [r3, #0]
 801457c:	6a3b      	ldr	r3, [r7, #32]
 801457e:	441a      	add	r2, r3
 8014580:	683b      	ldr	r3, [r7, #0]
 8014582:	601a      	str	r2, [r3, #0]
 8014584:	687a      	ldr	r2, [r7, #4]
 8014586:	6a3b      	ldr	r3, [r7, #32]
 8014588:	1ad3      	subs	r3, r2, r3
 801458a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	2b00      	cmp	r3, #0
 8014590:	f47f aea7 	bne.w	80142e2 <f_write+0x6c>
 8014594:	e000      	b.n	8014598 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014596:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80145a4:	429a      	cmp	r2, r3
 80145a6:	d905      	bls.n	80145b4 <f_write+0x33e>
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80145ba:	f043 0320 	orr.w	r3, r3, #32
 80145be:	b2da      	uxtb	r2, r3
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 80145c6:	2300      	movs	r3, #0
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	3728      	adds	r7, #40	; 0x28
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}

080145d0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b086      	sub	sp, #24
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80145d8:	6878      	ldr	r0, [r7, #4]
 80145da:	f7ff fbc5 	bl	8013d68 <validate>
 80145de:	4603      	mov	r3, r0
 80145e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80145e2:	7dfb      	ldrb	r3, [r7, #23]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	f040 80a8 	bne.w	801473a <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80145f0:	f003 0320 	and.w	r3, r3, #32
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	f000 80a0 	beq.w	801473a <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8014600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014604:	2b00      	cmp	r3, #0
 8014606:	d019      	beq.n	801463c <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801460e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8014612:	6879      	ldr	r1, [r7, #4]
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801461a:	2301      	movs	r3, #1
 801461c:	f7fd fbd0 	bl	8011dc0 <disk_write>
 8014620:	4603      	mov	r3, r0
 8014622:	2b00      	cmp	r3, #0
 8014624:	d001      	beq.n	801462a <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8014626:	2301      	movs	r3, #1
 8014628:	e088      	b.n	801473c <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8014630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014634:	b2da      	uxtb	r2, r3
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8014648:	4619      	mov	r1, r3
 801464a:	4610      	mov	r0, r2
 801464c:	f7fd ff41 	bl	80124d2 <move_window>
 8014650:	4603      	mov	r3, r0
 8014652:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8014654:	7dfb      	ldrb	r3, [r7, #23]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d16f      	bne.n	801473a <f_sync+0x16a>
				dir = fp->dir_ptr;
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8014660:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8014662:	693b      	ldr	r3, [r7, #16]
 8014664:	330b      	adds	r3, #11
 8014666:	693a      	ldr	r2, [r7, #16]
 8014668:	320b      	adds	r2, #11
 801466a:	7812      	ldrb	r2, [r2, #0]
 801466c:	f042 0220 	orr.w	r2, r2, #32
 8014670:	b2d2      	uxtb	r2, r2
 8014672:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8014674:	693b      	ldr	r3, [r7, #16]
 8014676:	331c      	adds	r3, #28
 8014678:	687a      	ldr	r2, [r7, #4]
 801467a:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 801467e:	b2d2      	uxtb	r2, r2
 8014680:	701a      	strb	r2, [r3, #0]
 8014682:	693b      	ldr	r3, [r7, #16]
 8014684:	331d      	adds	r3, #29
 8014686:	687a      	ldr	r2, [r7, #4]
 8014688:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 801468c:	b292      	uxth	r2, r2
 801468e:	0a12      	lsrs	r2, r2, #8
 8014690:	b292      	uxth	r2, r2
 8014692:	b2d2      	uxtb	r2, r2
 8014694:	701a      	strb	r2, [r3, #0]
 8014696:	693b      	ldr	r3, [r7, #16]
 8014698:	331e      	adds	r3, #30
 801469a:	687a      	ldr	r2, [r7, #4]
 801469c:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 80146a0:	0c12      	lsrs	r2, r2, #16
 80146a2:	b2d2      	uxtb	r2, r2
 80146a4:	701a      	strb	r2, [r3, #0]
 80146a6:	693b      	ldr	r3, [r7, #16]
 80146a8:	331f      	adds	r3, #31
 80146aa:	687a      	ldr	r2, [r7, #4]
 80146ac:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 80146b0:	0e12      	lsrs	r2, r2, #24
 80146b2:	b2d2      	uxtb	r2, r2
 80146b4:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80146bc:	4619      	mov	r1, r3
 80146be:	6938      	ldr	r0, [r7, #16]
 80146c0:	f7fe fcf5 	bl	80130ae <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80146c4:	f7ed f89c 	bl	8001800 <get_fattime>
 80146c8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80146ca:	693b      	ldr	r3, [r7, #16]
 80146cc:	3316      	adds	r3, #22
 80146ce:	68fa      	ldr	r2, [r7, #12]
 80146d0:	b2d2      	uxtb	r2, r2
 80146d2:	701a      	strb	r2, [r3, #0]
 80146d4:	693b      	ldr	r3, [r7, #16]
 80146d6:	3317      	adds	r3, #23
 80146d8:	68fa      	ldr	r2, [r7, #12]
 80146da:	b292      	uxth	r2, r2
 80146dc:	0a12      	lsrs	r2, r2, #8
 80146de:	b292      	uxth	r2, r2
 80146e0:	b2d2      	uxtb	r2, r2
 80146e2:	701a      	strb	r2, [r3, #0]
 80146e4:	693b      	ldr	r3, [r7, #16]
 80146e6:	3318      	adds	r3, #24
 80146e8:	68fa      	ldr	r2, [r7, #12]
 80146ea:	0c12      	lsrs	r2, r2, #16
 80146ec:	b2d2      	uxtb	r2, r2
 80146ee:	701a      	strb	r2, [r3, #0]
 80146f0:	693b      	ldr	r3, [r7, #16]
 80146f2:	3319      	adds	r3, #25
 80146f4:	68fa      	ldr	r2, [r7, #12]
 80146f6:	0e12      	lsrs	r2, r2, #24
 80146f8:	b2d2      	uxtb	r2, r2
 80146fa:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80146fc:	693b      	ldr	r3, [r7, #16]
 80146fe:	3312      	adds	r3, #18
 8014700:	2200      	movs	r2, #0
 8014702:	701a      	strb	r2, [r3, #0]
 8014704:	693b      	ldr	r3, [r7, #16]
 8014706:	3313      	adds	r3, #19
 8014708:	2200      	movs	r2, #0
 801470a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8014712:	f023 0320 	bic.w	r3, r3, #32
 8014716:	b2da      	uxtb	r2, r3
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014724:	2201      	movs	r2, #1
 8014726:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014730:	4618      	mov	r0, r3
 8014732:	f7fd fefc 	bl	801252e <sync_fs>
 8014736:	4603      	mov	r3, r0
 8014738:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 801473a:	7dfb      	ldrb	r3, [r7, #23]
}
 801473c:	4618      	mov	r0, r3
 801473e:	3718      	adds	r7, #24
 8014740:	46bd      	mov	sp, r7
 8014742:	bd80      	pop	{r7, pc}

08014744 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b084      	sub	sp, #16
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801474c:	6878      	ldr	r0, [r7, #4]
 801474e:	f7ff ff3f 	bl	80145d0 <f_sync>
 8014752:	4603      	mov	r3, r0
 8014754:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014756:	7bfb      	ldrb	r3, [r7, #15]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d116      	bne.n	801478a <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	f7ff fb03 	bl	8013d68 <validate>
 8014762:	4603      	mov	r3, r0
 8014764:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014766:	7bfb      	ldrb	r3, [r7, #15]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d10e      	bne.n	801478a <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8014772:	4618      	mov	r0, r3
 8014774:	f7fd fdf6 	bl	8012364 <dec_lock>
 8014778:	4603      	mov	r3, r0
 801477a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801477c:	7bfb      	ldrb	r3, [r7, #15]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d103      	bne.n	801478a <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	2200      	movs	r2, #0
 8014786:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801478a:	7bfb      	ldrb	r3, [r7, #15]
}
 801478c:	4618      	mov	r0, r3
 801478e:	3710      	adds	r7, #16
 8014790:	46bd      	mov	sp, r7
 8014792:	bd80      	pop	{r7, pc}

08014794 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b090      	sub	sp, #64	; 0x40
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
 801479c:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	f7ff fae2 	bl	8013d68 <validate>
 80147a4:	4603      	mov	r3, r0
 80147a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80147aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d002      	beq.n	80147b8 <f_lseek+0x24>
 80147b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80147b6:	e247      	b.n	8014c48 <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d003      	beq.n	80147ca <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80147c8:	e23e      	b.n	8014c48 <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	f000 80f2 	beq.w	80149ba <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147dc:	d164      	bne.n	80148a8 <f_lseek+0x114>
			tbl = fp->cltbl;
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80147e4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80147e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147e8:	1d1a      	adds	r2, r3, #4
 80147ea:	627a      	str	r2, [r7, #36]	; 0x24
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	623b      	str	r3, [r7, #32]
 80147f0:	2302      	movs	r3, #2
 80147f2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80147fa:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80147fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d041      	beq.n	8014886 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8014802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014804:	61fb      	str	r3, [r7, #28]
 8014806:	2300      	movs	r3, #0
 8014808:	62fb      	str	r3, [r7, #44]	; 0x2c
 801480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801480c:	3302      	adds	r3, #2
 801480e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8014810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014812:	61bb      	str	r3, [r7, #24]
 8014814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014816:	3301      	adds	r3, #1
 8014818:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014820:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014822:	4618      	mov	r0, r3
 8014824:	f7fd ff52 	bl	80126cc <get_fat>
 8014828:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 801482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801482c:	2b01      	cmp	r3, #1
 801482e:	d805      	bhi.n	801483c <f_lseek+0xa8>
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2202      	movs	r2, #2
 8014834:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8014838:	2302      	movs	r3, #2
 801483a:	e205      	b.n	8014c48 <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801483e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014842:	d105      	bne.n	8014850 <f_lseek+0xbc>
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	2201      	movs	r2, #1
 8014848:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801484c:	2301      	movs	r3, #1
 801484e:	e1fb      	b.n	8014c48 <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 8014850:	69bb      	ldr	r3, [r7, #24]
 8014852:	1c5a      	adds	r2, r3, #1
 8014854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014856:	429a      	cmp	r2, r3
 8014858:	d0da      	beq.n	8014810 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801485a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801485c:	6a3b      	ldr	r3, [r7, #32]
 801485e:	429a      	cmp	r2, r3
 8014860:	d809      	bhi.n	8014876 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 8014862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014864:	1d1a      	adds	r2, r3, #4
 8014866:	627a      	str	r2, [r7, #36]	; 0x24
 8014868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801486a:	601a      	str	r2, [r3, #0]
 801486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801486e:	1d1a      	adds	r2, r3, #4
 8014870:	627a      	str	r2, [r7, #36]	; 0x24
 8014872:	69fa      	ldr	r2, [r7, #28]
 8014874:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801487c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8014880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014882:	429a      	cmp	r2, r3
 8014884:	d8bd      	bhi.n	8014802 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801488c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801488e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8014890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014892:	6a3b      	ldr	r3, [r7, #32]
 8014894:	429a      	cmp	r2, r3
 8014896:	d803      	bhi.n	80148a0 <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 8014898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801489a:	2200      	movs	r2, #0
 801489c:	601a      	str	r2, [r3, #0]
 801489e:	e1d1      	b.n	8014c44 <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80148a0:	2311      	movs	r3, #17
 80148a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80148a6:	e1cd      	b.n	8014c44 <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	429a      	cmp	r2, r3
 80148b2:	d203      	bcs.n	80148bc <f_lseek+0x128>
				ofs = fp->fsize;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80148ba:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	683a      	ldr	r2, [r7, #0]
 80148c0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 80148c4:	683b      	ldr	r3, [r7, #0]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	f000 81bc 	beq.w	8014c44 <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 80148cc:	683b      	ldr	r3, [r7, #0]
 80148ce:	3b01      	subs	r3, #1
 80148d0:	4619      	mov	r1, r3
 80148d2:	6878      	ldr	r0, [r7, #4]
 80148d4:	f7fe f9b3 	bl	8012c3e <clmt_clust>
 80148d8:	4602      	mov	r2, r0
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80148ec:	4619      	mov	r1, r3
 80148ee:	4610      	mov	r0, r2
 80148f0:	f7fd feca 	bl	8012688 <clust2sect>
 80148f4:	6178      	str	r0, [r7, #20]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 80148f6:	697b      	ldr	r3, [r7, #20]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d105      	bne.n	8014908 <f_lseek+0x174>
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	2202      	movs	r2, #2
 8014900:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8014904:	2302      	movs	r3, #2
 8014906:	e19f      	b.n	8014c48 <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8014908:	683b      	ldr	r3, [r7, #0]
 801490a:	3b01      	subs	r3, #1
 801490c:	0a5b      	lsrs	r3, r3, #9
 801490e:	687a      	ldr	r2, [r7, #4]
 8014910:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8014914:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8014918:	3a01      	subs	r2, #1
 801491a:	4013      	ands	r3, r2
 801491c:	697a      	ldr	r2, [r7, #20]
 801491e:	4413      	add	r3, r2
 8014920:	617b      	str	r3, [r7, #20]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8014928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801492c:	2b00      	cmp	r3, #0
 801492e:	f000 8189 	beq.w	8014c44 <f_lseek+0x4b0>
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8014938:	697b      	ldr	r3, [r7, #20]
 801493a:	429a      	cmp	r2, r3
 801493c:	f000 8182 	beq.w	8014c44 <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8014946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801494a:	2b00      	cmp	r3, #0
 801494c:	d01d      	beq.n	801498a <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014954:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8014958:	6879      	ldr	r1, [r7, #4]
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8014960:	2301      	movs	r3, #1
 8014962:	f7fd fa2d 	bl	8011dc0 <disk_write>
 8014966:	4603      	mov	r3, r0
 8014968:	2b00      	cmp	r3, #0
 801496a:	d005      	beq.n	8014978 <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	2201      	movs	r2, #1
 8014970:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8014974:	2301      	movs	r3, #1
 8014976:	e167      	b.n	8014c48 <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 801497e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014982:	b2da      	uxtb	r2, r3
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014990:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8014994:	6879      	ldr	r1, [r7, #4]
 8014996:	2301      	movs	r3, #1
 8014998:	697a      	ldr	r2, [r7, #20]
 801499a:	f7fd f9f1 	bl	8011d80 <disk_read>
 801499e:	4603      	mov	r3, r0
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d005      	beq.n	80149b0 <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	2201      	movs	r2, #1
 80149a8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80149ac:	2301      	movs	r3, #1
 80149ae:	e14b      	b.n	8014c48 <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	697a      	ldr	r2, [r7, #20]
 80149b4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 80149b8:	e144      	b.n	8014c44 <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80149c0:	683b      	ldr	r3, [r7, #0]
 80149c2:	429a      	cmp	r2, r3
 80149c4:	d20a      	bcs.n	80149dc <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80149cc:	f003 0302 	and.w	r3, r3, #2
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d103      	bne.n	80149dc <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80149da:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80149e2:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 80149e4:	2300      	movs	r3, #0
 80149e6:	637b      	str	r3, [r7, #52]	; 0x34
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80149ec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	f000 80c6 	beq.w	8014b84 <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80149fe:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8014a02:	025b      	lsls	r3, r3, #9
 8014a04:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 8014a06:	693b      	ldr	r3, [r7, #16]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d01e      	beq.n	8014a4a <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014a0c:	683b      	ldr	r3, [r7, #0]
 8014a0e:	1e5a      	subs	r2, r3, #1
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	fbb2 f2f3 	udiv	r2, r2, r3
 8014a16:	693b      	ldr	r3, [r7, #16]
 8014a18:	1e59      	subs	r1, r3, #1
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014a20:	429a      	cmp	r2, r3
 8014a22:	d312      	bcc.n	8014a4a <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8014a24:	693b      	ldr	r3, [r7, #16]
 8014a26:	1e5a      	subs	r2, r3, #1
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	425b      	negs	r3, r3
 8014a2c:	401a      	ands	r2, r3
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8014a3a:	683a      	ldr	r2, [r7, #0]
 8014a3c:	1ad3      	subs	r3, r2, r3
 8014a3e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014a46:	63bb      	str	r3, [r7, #56]	; 0x38
 8014a48:	e029      	b.n	8014a9e <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014a50:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d11e      	bne.n	8014a96 <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014a5e:	2100      	movs	r1, #0
 8014a60:	4618      	mov	r0, r3
 8014a62:	f7fe f84f 	bl	8012b04 <create_chain>
 8014a66:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8014a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a6a:	2b01      	cmp	r3, #1
 8014a6c:	d105      	bne.n	8014a7a <f_lseek+0x2e6>
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	2202      	movs	r2, #2
 8014a72:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8014a76:	2302      	movs	r3, #2
 8014a78:	e0e6      	b.n	8014c48 <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8014a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a80:	d105      	bne.n	8014a8e <f_lseek+0x2fa>
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	2201      	movs	r2, #1
 8014a86:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8014a8a:	2301      	movs	r3, #1
 8014a8c:	e0dc      	b.n	8014c48 <f_lseek+0x4b4>
					fp->sclust = clst;
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a92:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 8014a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d06f      	beq.n	8014b84 <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 8014aa4:	e047      	b.n	8014b36 <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8014aac:	f003 0302 	and.w	r3, r3, #2
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d00d      	beq.n	8014ad0 <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014aba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014abc:	4618      	mov	r0, r3
 8014abe:	f7fe f821 	bl	8012b04 <create_chain>
 8014ac2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8014ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d10a      	bne.n	8014ae0 <f_lseek+0x34c>
							ofs = bcs; break;
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	603b      	str	r3, [r7, #0]
 8014ace:	e036      	b.n	8014b3e <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014ad6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f7fd fdf7 	bl	80126cc <get_fat>
 8014ade:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8014ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ae6:	d105      	bne.n	8014af4 <f_lseek+0x360>
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2201      	movs	r2, #1
 8014aec:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8014af0:	2301      	movs	r3, #1
 8014af2:	e0a9      	b.n	8014c48 <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8014af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014af6:	2b01      	cmp	r3, #1
 8014af8:	d907      	bls.n	8014b0a <f_lseek+0x376>
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014b00:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8014b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b06:	429a      	cmp	r2, r3
 8014b08:	d805      	bhi.n	8014b16 <f_lseek+0x382>
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	2202      	movs	r2, #2
 8014b0e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8014b12:	2302      	movs	r3, #2
 8014b14:	e098      	b.n	8014c48 <f_lseek+0x4b4>
					fp->clust = clst;
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	441a      	add	r2, r3
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 8014b2e:	683a      	ldr	r2, [r7, #0]
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	1ad3      	subs	r3, r2, r3
 8014b34:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8014b36:	683a      	ldr	r2, [r7, #0]
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	429a      	cmp	r2, r3
 8014b3c:	d8b3      	bhi.n	8014aa6 <f_lseek+0x312>
				}
				fp->fptr += ofs;
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014b44:	683b      	ldr	r3, [r7, #0]
 8014b46:	441a      	add	r2, r3
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8014b4e:	683b      	ldr	r3, [r7, #0]
 8014b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d015      	beq.n	8014b84 <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014b5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014b60:	4618      	mov	r0, r3
 8014b62:	f7fd fd91 	bl	8012688 <clust2sect>
 8014b66:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8014b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d105      	bne.n	8014b7a <f_lseek+0x3e6>
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	2202      	movs	r2, #2
 8014b72:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8014b76:	2302      	movs	r3, #2
 8014b78:	e066      	b.n	8014c48 <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	0a5b      	lsrs	r3, r3, #9
 8014b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b80:	4413      	add	r3, r2
 8014b82:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8014b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d041      	beq.n	8014c16 <f_lseek+0x482>
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8014b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	d03b      	beq.n	8014c16 <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8014ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d01d      	beq.n	8014be8 <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014bb2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8014bb6:	6879      	ldr	r1, [r7, #4]
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8014bbe:	2301      	movs	r3, #1
 8014bc0:	f7fd f8fe 	bl	8011dc0 <disk_write>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d005      	beq.n	8014bd6 <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	2201      	movs	r2, #1
 8014bce:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8014bd2:	2301      	movs	r3, #1
 8014bd4:	e038      	b.n	8014c48 <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8014bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014be0:	b2da      	uxtb	r2, r3
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014bee:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8014bf2:	6879      	ldr	r1, [r7, #4]
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014bf8:	f7fd f8c2 	bl	8011d80 <disk_read>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d005      	beq.n	8014c0e <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	2201      	movs	r2, #1
 8014c06:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8014c0a:	2301      	movs	r3, #1
 8014c0c:	e01c      	b.n	8014c48 <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c12:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8014c22:	429a      	cmp	r2, r3
 8014c24:	d90e      	bls.n	8014c44 <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8014c38:	f043 0320 	orr.w	r3, r3, #32
 8014c3c:	b2da      	uxtb	r2, r3
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8014c44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014c48:	4618      	mov	r0, r3
 8014c4a:	3740      	adds	r7, #64	; 0x40
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	bd80      	pop	{r7, pc}

08014c50 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b088      	sub	sp, #32
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
 8014c58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d101      	bne.n	8014c64 <f_opendir+0x14>
 8014c60:	2309      	movs	r3, #9
 8014c62:	e073      	b.n	8014d4c <f_opendir+0xfc>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 8014c64:	4639      	mov	r1, r7
 8014c66:	f107 0318 	add.w	r3, r7, #24
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	f7fe fdb1 	bl	80137d4 <find_volume>
 8014c72:	4603      	mov	r3, r0
 8014c74:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 8014c76:	7ffb      	ldrb	r3, [r7, #31]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d15f      	bne.n	8014d3c <f_opendir+0xec>
		dp->fs = fs;
 8014c7c:	69ba      	ldr	r2, [r7, #24]
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		INIT_BUF(*dp);
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	f107 020c 	add.w	r2, r7, #12
 8014c8a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8014c8e:	683b      	ldr	r3, [r7, #0]
 8014c90:	4619      	mov	r1, r3
 8014c92:	6878      	ldr	r0, [r7, #4]
 8014c94:	f7fe fc82 	bl	801359c <follow_path>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8014c9c:	7ffb      	ldrb	r3, [r7, #31]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d147      	bne.n	8014d32 <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d017      	beq.n	8014cdc <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014cb2:	330b      	adds	r3, #11
 8014cb4:	781b      	ldrb	r3, [r3, #0]
 8014cb6:	f003 0310 	and.w	r3, r3, #16
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d00c      	beq.n	8014cd8 <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 8014cbe:	69ba      	ldr	r2, [r7, #24]
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014cc6:	4619      	mov	r1, r3
 8014cc8:	4610      	mov	r0, r2
 8014cca:	f7fe f9c2 	bl	8013052 <ld_clust>
 8014cce:	4602      	mov	r2, r0
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8014cd6:	e001      	b.n	8014cdc <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 8014cd8:	2305      	movs	r3, #5
 8014cda:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 8014cdc:	7ffb      	ldrb	r3, [r7, #31]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d127      	bne.n	8014d32 <f_opendir+0xe2>
				dp->id = fs->id;
 8014ce2:	69bb      	ldr	r3, [r7, #24]
 8014ce4:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8014cee:	2100      	movs	r1, #0
 8014cf0:	6878      	ldr	r0, [r7, #4]
 8014cf2:	f7fd ffd9 	bl	8012ca8 <dir_sdi>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 8014cfa:	7ffb      	ldrb	r3, [r7, #31]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d118      	bne.n	8014d32 <f_opendir+0xe2>
					if (dp->sclust) {
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d00f      	beq.n	8014d2a <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8014d0a:	2100      	movs	r1, #0
 8014d0c:	6878      	ldr	r0, [r7, #4]
 8014d0e:	f7fd fa71 	bl	80121f4 <inc_lock>
 8014d12:	4602      	mov	r2, r0
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
						if (!dp->lockid)
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d106      	bne.n	8014d32 <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 8014d24:	2312      	movs	r3, #18
 8014d26:	77fb      	strb	r3, [r7, #31]
 8014d28:	e003      	b.n	8014d32 <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8014d32:	7ffb      	ldrb	r3, [r7, #31]
 8014d34:	2b04      	cmp	r3, #4
 8014d36:	d101      	bne.n	8014d3c <f_opendir+0xec>
 8014d38:	2305      	movs	r3, #5
 8014d3a:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8014d3c:	7ffb      	ldrb	r3, [r7, #31]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d003      	beq.n	8014d4a <f_opendir+0xfa>
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	2200      	movs	r2, #0
 8014d46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	LEAVE_FF(fs, res);
 8014d4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	3720      	adds	r7, #32
 8014d50:	46bd      	mov	sp, r7
 8014d52:	bd80      	pop	{r7, pc}

08014d54 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b086      	sub	sp, #24
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	6078      	str	r0, [r7, #4]
 8014d5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8014d5e:	6878      	ldr	r0, [r7, #4]
 8014d60:	f7ff f802 	bl	8013d68 <validate>
 8014d64:	4603      	mov	r3, r0
 8014d66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014d68:	7dfb      	ldrb	r3, [r7, #23]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d133      	bne.n	8014dd6 <f_readdir+0x82>
		if (!fno) {
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d106      	bne.n	8014d82 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8014d74:	2100      	movs	r1, #0
 8014d76:	6878      	ldr	r0, [r7, #4]
 8014d78:	f7fd ff96 	bl	8012ca8 <dir_sdi>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	75fb      	strb	r3, [r7, #23]
 8014d80:	e029      	b.n	8014dd6 <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	f107 0208 	add.w	r2, r7, #8
 8014d88:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 8014d8c:	2100      	movs	r1, #0
 8014d8e:	6878      	ldr	r0, [r7, #4]
 8014d90:	f7fe fa03 	bl	801319a <dir_read>
 8014d94:	4603      	mov	r3, r0
 8014d96:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 8014d98:	7dfb      	ldrb	r3, [r7, #23]
 8014d9a:	2b04      	cmp	r3, #4
 8014d9c:	d105      	bne.n	8014daa <f_readdir+0x56>
				dp->sect = 0;
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	2200      	movs	r2, #0
 8014da2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				res = FR_OK;
 8014da6:	2300      	movs	r3, #0
 8014da8:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 8014daa:	7dfb      	ldrb	r3, [r7, #23]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d112      	bne.n	8014dd6 <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 8014db0:	6839      	ldr	r1, [r7, #0]
 8014db2:	6878      	ldr	r0, [r7, #4]
 8014db4:	f7fe fac0 	bl	8013338 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8014db8:	2100      	movs	r1, #0
 8014dba:	6878      	ldr	r0, [r7, #4]
 8014dbc:	f7fe f808 	bl	8012dd0 <dir_next>
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 8014dc4:	7dfb      	ldrb	r3, [r7, #23]
 8014dc6:	2b04      	cmp	r3, #4
 8014dc8:	d105      	bne.n	8014dd6 <f_readdir+0x82>
					dp->sect = 0;
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	2200      	movs	r2, #0
 8014dce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
					res = FR_OK;
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 8014dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014dd8:	4618      	mov	r0, r3
 8014dda:	3718      	adds	r7, #24
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bd80      	pop	{r7, pc}

08014de0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 8014de6:	af00      	add	r7, sp, #0
 8014de8:	1d3b      	adds	r3, r7, #4
 8014dea:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	BYTE *dir;
	DWORD dclst = 0;
 8014dec:	2300      	movs	r3, #0
 8014dee:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 8014df2:	1d39      	adds	r1, r7, #4
 8014df4:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8014df8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8014dfc:	2201      	movs	r2, #1
 8014dfe:	4618      	mov	r0, r3
 8014e00:	f7fe fce8 	bl	80137d4 <find_volume>
 8014e04:	4603      	mov	r3, r0
 8014e06:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	if (res == FR_OK) {
 8014e0a:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	f040 80b8 	bne.w	8014f84 <f_unlink+0x1a4>
		INIT_BUF(dj);
 8014e14:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8014e18:	f107 0208 	add.w	r2, r7, #8
 8014e1c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);		/* Follow the file path */
 8014e20:	1d3b      	adds	r3, r7, #4
 8014e22:	681a      	ldr	r2, [r3, #0]
 8014e24:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8014e28:	4611      	mov	r1, r2
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f7fe fbb6 	bl	801359c <follow_path>
 8014e30:	4603      	mov	r3, r0
 8014e32:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
 8014e36:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d108      	bne.n	8014e50 <f_unlink+0x70>
 8014e3e:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8014e42:	2102      	movs	r1, #2
 8014e44:	4618      	mov	r0, r3
 8014e46:	f7fd f943 	bl	80120d0 <chk_lock>
 8014e4a:	4603      	mov	r3, r0
 8014e4c:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8014e50:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	f040 8095 	bne.w	8014f84 <f_unlink+0x1a4>
			dir = dj.dir;
 8014e5a:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8014e5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014e62:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
			if (!dir) {
 8014e66:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d103      	bne.n	8014e76 <f_unlink+0x96>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8014e6e:	2306      	movs	r3, #6
 8014e70:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 8014e74:	e00a      	b.n	8014e8c <f_unlink+0xac>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 8014e76:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8014e7a:	330b      	adds	r3, #11
 8014e7c:	781b      	ldrb	r3, [r3, #0]
 8014e7e:	f003 0301 	and.w	r3, r3, #1
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d002      	beq.n	8014e8c <f_unlink+0xac>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8014e86:	2307      	movs	r3, #7
 8014e88:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
			}
			if (res == FR_OK) {
 8014e8c:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d149      	bne.n	8014f28 <f_unlink+0x148>
				dclst = ld_clust(dj.fs, dir);
 8014e94:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8014e98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014e9c:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	f7fe f8d6 	bl	8013052 <ld_clust>
 8014ea6:	f8c7 0458 	str.w	r0, [r7, #1112]	; 0x458
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 8014eaa:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d03a      	beq.n	8014f28 <f_unlink+0x148>
 8014eb2:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8014eb6:	330b      	adds	r3, #11
 8014eb8:	781b      	ldrb	r3, [r3, #0]
 8014eba:	f003 0310 	and.w	r3, r3, #16
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d032      	beq.n	8014f28 <f_unlink+0x148>
					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 8014ec2:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8014ec6:	f107 0314 	add.w	r3, r7, #20
 8014eca:	f44f 7208 	mov.w	r2, #544	; 0x220
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f7fd f884 	bl	8011fdc <mem_cpy>
						sdj.sclust = dclst;
 8014ed4:	f107 0314 	add.w	r3, r7, #20
 8014ed8:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 8014edc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
						res = dir_sdi(&sdj, 2);
 8014ee0:	f107 0314 	add.w	r3, r7, #20
 8014ee4:	2102      	movs	r1, #2
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	f7fd fede 	bl	8012ca8 <dir_sdi>
 8014eec:	4603      	mov	r3, r0
 8014eee:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
						if (res == FR_OK) {
 8014ef2:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d116      	bne.n	8014f28 <f_unlink+0x148>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 8014efa:	f107 0314 	add.w	r3, r7, #20
 8014efe:	2100      	movs	r1, #0
 8014f00:	4618      	mov	r0, r3
 8014f02:	f7fe f94a 	bl	801319a <dir_read>
 8014f06:	4603      	mov	r3, r0
 8014f08:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 8014f0c:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d102      	bne.n	8014f1a <f_unlink+0x13a>
 8014f14:	2307      	movs	r3, #7
 8014f16:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 8014f1a:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8014f1e:	2b04      	cmp	r3, #4
 8014f20:	d102      	bne.n	8014f28 <f_unlink+0x148>
 8014f22:	2300      	movs	r3, #0
 8014f24:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
						}
					}
				}
			}
			if (res == FR_OK) {
 8014f28:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d129      	bne.n	8014f84 <f_unlink+0x1a4>
				res = dir_remove(&dj);		/* Remove the directory entry */
 8014f30:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8014f34:	4618      	mov	r0, r3
 8014f36:	f7fe f9c8 	bl	80132ca <dir_remove>
 8014f3a:	4603      	mov	r3, r0
 8014f3c:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 8014f40:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d10f      	bne.n	8014f68 <f_unlink+0x188>
 8014f48:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d00b      	beq.n	8014f68 <f_unlink+0x188>
					res = remove_chain(dj.fs, dclst);
 8014f50:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8014f54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014f58:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	f7fd fd77 	bl	8012a50 <remove_chain>
 8014f62:	4603      	mov	r3, r0
 8014f64:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
				if (res == FR_OK) res = sync_fs(dj.fs);
 8014f68:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d109      	bne.n	8014f84 <f_unlink+0x1a4>
 8014f70:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8014f74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8014f78:	4618      	mov	r0, r3
 8014f7a:	f7fd fad8 	bl	801252e <sync_fs>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 8014f84:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
}
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f507 678c 	add.w	r7, r7, #1120	; 0x460
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	bd80      	pop	{r7, pc}

08014f92 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the time stamp to be set */
)
{
 8014f92:	b580      	push	{r7, lr}
 8014f94:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	1d3b      	adds	r3, r7, #4
 8014f9c:	6018      	str	r0, [r3, #0]
 8014f9e:	463b      	mov	r3, r7
 8014fa0:	6019      	str	r1, [r3, #0]
	BYTE *dir;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 8014fa2:	1d39      	adds	r1, r7, #4
 8014fa4:	f107 0318 	add.w	r3, r7, #24
 8014fa8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8014fac:	2201      	movs	r2, #1
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f7fe fc10 	bl	80137d4 <find_volume>
 8014fb4:	4603      	mov	r3, r0
 8014fb6:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 8014fba:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d157      	bne.n	8015072 <f_utime+0xe0>
		INIT_BUF(dj);
 8014fc2:	f107 0318 	add.w	r3, r7, #24
 8014fc6:	f107 020c 	add.w	r2, r7, #12
 8014fca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8014fce:	1d3b      	adds	r3, r7, #4
 8014fd0:	681a      	ldr	r2, [r3, #0]
 8014fd2:	f107 0318 	add.w	r3, r7, #24
 8014fd6:	4611      	mov	r1, r2
 8014fd8:	4618      	mov	r0, r3
 8014fda:	f7fe fadf 	bl	801359c <follow_path>
 8014fde:	4603      	mov	r3, r0
 8014fe0:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
 8014fe4:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d142      	bne.n	8015072 <f_utime+0xe0>
			dir = dj.dir;
 8014fec:	f107 0318 	add.w	r3, r7, #24
 8014ff0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014ff4:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
			if (!dir) {					/* Root directory */
 8014ff8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d103      	bne.n	8015008 <f_utime+0x76>
				res = FR_INVALID_NAME;
 8015000:	2306      	movs	r3, #6
 8015002:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8015006:	e034      	b.n	8015072 <f_utime+0xe0>
			} else {					/* File or sub-directory */
				ST_WORD(dir + DIR_WrtTime, fno->ftime);
 8015008:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801500c:	3316      	adds	r3, #22
 801500e:	463a      	mov	r2, r7
 8015010:	6812      	ldr	r2, [r2, #0]
 8015012:	88d2      	ldrh	r2, [r2, #6]
 8015014:	b2d2      	uxtb	r2, r2
 8015016:	701a      	strb	r2, [r3, #0]
 8015018:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801501c:	3317      	adds	r3, #23
 801501e:	463a      	mov	r2, r7
 8015020:	6812      	ldr	r2, [r2, #0]
 8015022:	88d2      	ldrh	r2, [r2, #6]
 8015024:	0a12      	lsrs	r2, r2, #8
 8015026:	b292      	uxth	r2, r2
 8015028:	b2d2      	uxtb	r2, r2
 801502a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_WrtDate, fno->fdate);
 801502c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8015030:	3318      	adds	r3, #24
 8015032:	463a      	mov	r2, r7
 8015034:	6812      	ldr	r2, [r2, #0]
 8015036:	8892      	ldrh	r2, [r2, #4]
 8015038:	b2d2      	uxtb	r2, r2
 801503a:	701a      	strb	r2, [r3, #0]
 801503c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8015040:	3319      	adds	r3, #25
 8015042:	463a      	mov	r2, r7
 8015044:	6812      	ldr	r2, [r2, #0]
 8015046:	8892      	ldrh	r2, [r2, #4]
 8015048:	0a12      	lsrs	r2, r2, #8
 801504a:	b292      	uxth	r2, r2
 801504c:	b2d2      	uxtb	r2, r2
 801504e:	701a      	strb	r2, [r3, #0]
				dj.fs->wflag = 1;
 8015050:	f107 0318 	add.w	r3, r7, #24
 8015054:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015058:	2201      	movs	r2, #1
 801505a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(dj.fs);
 801505e:	f107 0318 	add.w	r3, r7, #24
 8015062:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015066:	4618      	mov	r0, r3
 8015068:	f7fd fa61 	bl	801252e <sync_fs>
 801506c:	4603      	mov	r3, r0
 801506e:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
			}
		}
	}

	LEAVE_FF(dj.fs, res);
 8015072:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 8015076:	4618      	mov	r0, r3
 8015078:	f507 7710 	add.w	r7, r7, #576	; 0x240
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}

08015080 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015080:	b480      	push	{r7}
 8015082:	b087      	sub	sp, #28
 8015084:	af00      	add	r7, sp, #0
 8015086:	60f8      	str	r0, [r7, #12]
 8015088:	60b9      	str	r1, [r7, #8]
 801508a:	4613      	mov	r3, r2
 801508c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801508e:	2301      	movs	r3, #1
 8015090:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015092:	2300      	movs	r3, #0
 8015094:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8015096:	4b1f      	ldr	r3, [pc, #124]	; (8015114 <FATFS_LinkDriverEx+0x94>)
 8015098:	7a5b      	ldrb	r3, [r3, #9]
 801509a:	b2db      	uxtb	r3, r3
 801509c:	2b01      	cmp	r3, #1
 801509e:	d831      	bhi.n	8015104 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80150a0:	4b1c      	ldr	r3, [pc, #112]	; (8015114 <FATFS_LinkDriverEx+0x94>)
 80150a2:	7a5b      	ldrb	r3, [r3, #9]
 80150a4:	b2db      	uxtb	r3, r3
 80150a6:	461a      	mov	r2, r3
 80150a8:	4b1a      	ldr	r3, [pc, #104]	; (8015114 <FATFS_LinkDriverEx+0x94>)
 80150aa:	2100      	movs	r1, #0
 80150ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80150ae:	4b19      	ldr	r3, [pc, #100]	; (8015114 <FATFS_LinkDriverEx+0x94>)
 80150b0:	7a5b      	ldrb	r3, [r3, #9]
 80150b2:	b2db      	uxtb	r3, r3
 80150b4:	4a17      	ldr	r2, [pc, #92]	; (8015114 <FATFS_LinkDriverEx+0x94>)
 80150b6:	009b      	lsls	r3, r3, #2
 80150b8:	4413      	add	r3, r2
 80150ba:	68fa      	ldr	r2, [r7, #12]
 80150bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80150be:	4b15      	ldr	r3, [pc, #84]	; (8015114 <FATFS_LinkDriverEx+0x94>)
 80150c0:	7a5b      	ldrb	r3, [r3, #9]
 80150c2:	b2db      	uxtb	r3, r3
 80150c4:	461a      	mov	r2, r3
 80150c6:	4b13      	ldr	r3, [pc, #76]	; (8015114 <FATFS_LinkDriverEx+0x94>)
 80150c8:	4413      	add	r3, r2
 80150ca:	79fa      	ldrb	r2, [r7, #7]
 80150cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80150ce:	4b11      	ldr	r3, [pc, #68]	; (8015114 <FATFS_LinkDriverEx+0x94>)
 80150d0:	7a5b      	ldrb	r3, [r3, #9]
 80150d2:	b2db      	uxtb	r3, r3
 80150d4:	1c5a      	adds	r2, r3, #1
 80150d6:	b2d1      	uxtb	r1, r2
 80150d8:	4a0e      	ldr	r2, [pc, #56]	; (8015114 <FATFS_LinkDriverEx+0x94>)
 80150da:	7251      	strb	r1, [r2, #9]
 80150dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80150de:	7dbb      	ldrb	r3, [r7, #22]
 80150e0:	3330      	adds	r3, #48	; 0x30
 80150e2:	b2da      	uxtb	r2, r3
 80150e4:	68bb      	ldr	r3, [r7, #8]
 80150e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80150e8:	68bb      	ldr	r3, [r7, #8]
 80150ea:	3301      	adds	r3, #1
 80150ec:	223a      	movs	r2, #58	; 0x3a
 80150ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80150f0:	68bb      	ldr	r3, [r7, #8]
 80150f2:	3302      	adds	r3, #2
 80150f4:	222f      	movs	r2, #47	; 0x2f
 80150f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80150f8:	68bb      	ldr	r3, [r7, #8]
 80150fa:	3303      	adds	r3, #3
 80150fc:	2200      	movs	r2, #0
 80150fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015100:	2300      	movs	r3, #0
 8015102:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8015104:	7dfb      	ldrb	r3, [r7, #23]
}
 8015106:	4618      	mov	r0, r3
 8015108:	371c      	adds	r7, #28
 801510a:	46bd      	mov	sp, r7
 801510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015110:	4770      	bx	lr
 8015112:	bf00      	nop
 8015114:	20000854 	.word	0x20000854

08015118 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b082      	sub	sp, #8
 801511c:	af00      	add	r7, sp, #0
 801511e:	6078      	str	r0, [r7, #4]
 8015120:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015122:	2200      	movs	r2, #0
 8015124:	6839      	ldr	r1, [r7, #0]
 8015126:	6878      	ldr	r0, [r7, #4]
 8015128:	f7ff ffaa 	bl	8015080 <FATFS_LinkDriverEx>
 801512c:	4603      	mov	r3, r0
}
 801512e:	4618      	mov	r0, r3
 8015130:	3708      	adds	r7, #8
 8015132:	46bd      	mov	sp, r7
 8015134:	bd80      	pop	{r7, pc}
	...

08015138 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path  
  * @param  lun : not used   
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{ 
 8015138:	b480      	push	{r7}
 801513a:	b085      	sub	sp, #20
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
 8015140:	460b      	mov	r3, r1
 8015142:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8015144:	2300      	movs	r3, #0
 8015146:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8015148:	2301      	movs	r3, #1
 801514a:	73fb      	strb	r3, [r7, #15]
  
  if(disk.nbr >= 1)
 801514c:	4b15      	ldr	r3, [pc, #84]	; (80151a4 <FATFS_UnLinkDriverEx+0x6c>)
 801514e:	7a5b      	ldrb	r3, [r3, #9]
 8015150:	b2db      	uxtb	r3, r3
 8015152:	2b00      	cmp	r3, #0
 8015154:	d01e      	beq.n	8015194 <FATFS_UnLinkDriverEx+0x5c>
  {    
    DiskNum = path[0] - '0';
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	781b      	ldrb	r3, [r3, #0]
 801515a:	3b30      	subs	r3, #48	; 0x30
 801515c:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 801515e:	7bbb      	ldrb	r3, [r7, #14]
 8015160:	4a10      	ldr	r2, [pc, #64]	; (80151a4 <FATFS_UnLinkDriverEx+0x6c>)
 8015162:	009b      	lsls	r3, r3, #2
 8015164:	4413      	add	r3, r2
 8015166:	685b      	ldr	r3, [r3, #4]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d013      	beq.n	8015194 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 801516c:	7bbb      	ldrb	r3, [r7, #14]
 801516e:	4a0d      	ldr	r2, [pc, #52]	; (80151a4 <FATFS_UnLinkDriverEx+0x6c>)
 8015170:	009b      	lsls	r3, r3, #2
 8015172:	4413      	add	r3, r2
 8015174:	2200      	movs	r2, #0
 8015176:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8015178:	7bbb      	ldrb	r3, [r7, #14]
 801517a:	4a0a      	ldr	r2, [pc, #40]	; (80151a4 <FATFS_UnLinkDriverEx+0x6c>)
 801517c:	4413      	add	r3, r2
 801517e:	2200      	movs	r2, #0
 8015180:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8015182:	4b08      	ldr	r3, [pc, #32]	; (80151a4 <FATFS_UnLinkDriverEx+0x6c>)
 8015184:	7a5b      	ldrb	r3, [r3, #9]
 8015186:	b2db      	uxtb	r3, r3
 8015188:	3b01      	subs	r3, #1
 801518a:	b2da      	uxtb	r2, r3
 801518c:	4b05      	ldr	r3, [pc, #20]	; (80151a4 <FATFS_UnLinkDriverEx+0x6c>)
 801518e:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8015190:	2300      	movs	r3, #0
 8015192:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  return ret;
 8015194:	7bfb      	ldrb	r3, [r7, #15]
}
 8015196:	4618      	mov	r0, r3
 8015198:	3714      	adds	r7, #20
 801519a:	46bd      	mov	sp, r7
 801519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a0:	4770      	bx	lr
 80151a2:	bf00      	nop
 80151a4:	20000854 	.word	0x20000854

080151a8 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path  
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{ 
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b082      	sub	sp, #8
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 80151b0:	2100      	movs	r1, #0
 80151b2:	6878      	ldr	r0, [r7, #4]
 80151b4:	f7ff ffc0 	bl	8015138 <FATFS_UnLinkDriverEx>
 80151b8:	4603      	mov	r3, r0
}
 80151ba:	4618      	mov	r0, r3
 80151bc:	3708      	adds	r7, #8
 80151be:	46bd      	mov	sp, r7
 80151c0:	bd80      	pop	{r7, pc}
	...

080151c4 <__libc_init_array>:
 80151c4:	b570      	push	{r4, r5, r6, lr}
 80151c6:	4e0d      	ldr	r6, [pc, #52]	; (80151fc <__libc_init_array+0x38>)
 80151c8:	4c0d      	ldr	r4, [pc, #52]	; (8015200 <__libc_init_array+0x3c>)
 80151ca:	1ba4      	subs	r4, r4, r6
 80151cc:	10a4      	asrs	r4, r4, #2
 80151ce:	2500      	movs	r5, #0
 80151d0:	42a5      	cmp	r5, r4
 80151d2:	d109      	bne.n	80151e8 <__libc_init_array+0x24>
 80151d4:	4e0b      	ldr	r6, [pc, #44]	; (8015204 <__libc_init_array+0x40>)
 80151d6:	4c0c      	ldr	r4, [pc, #48]	; (8015208 <__libc_init_array+0x44>)
 80151d8:	f002 fbd2 	bl	8017980 <_init>
 80151dc:	1ba4      	subs	r4, r4, r6
 80151de:	10a4      	asrs	r4, r4, #2
 80151e0:	2500      	movs	r5, #0
 80151e2:	42a5      	cmp	r5, r4
 80151e4:	d105      	bne.n	80151f2 <__libc_init_array+0x2e>
 80151e6:	bd70      	pop	{r4, r5, r6, pc}
 80151e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80151ec:	4798      	blx	r3
 80151ee:	3501      	adds	r5, #1
 80151f0:	e7ee      	b.n	80151d0 <__libc_init_array+0xc>
 80151f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80151f6:	4798      	blx	r3
 80151f8:	3501      	adds	r5, #1
 80151fa:	e7f2      	b.n	80151e2 <__libc_init_array+0x1e>
 80151fc:	08017fe8 	.word	0x08017fe8
 8015200:	08017fe8 	.word	0x08017fe8
 8015204:	08017fe8 	.word	0x08017fe8
 8015208:	08017fec 	.word	0x08017fec

0801520c <malloc>:
 801520c:	4b02      	ldr	r3, [pc, #8]	; (8015218 <malloc+0xc>)
 801520e:	4601      	mov	r1, r0
 8015210:	6818      	ldr	r0, [r3, #0]
 8015212:	f000 b86d 	b.w	80152f0 <_malloc_r>
 8015216:	bf00      	nop
 8015218:	200002a8 	.word	0x200002a8

0801521c <free>:
 801521c:	4b02      	ldr	r3, [pc, #8]	; (8015228 <free+0xc>)
 801521e:	4601      	mov	r1, r0
 8015220:	6818      	ldr	r0, [r3, #0]
 8015222:	f000 b817 	b.w	8015254 <_free_r>
 8015226:	bf00      	nop
 8015228:	200002a8 	.word	0x200002a8

0801522c <memcpy>:
 801522c:	b510      	push	{r4, lr}
 801522e:	1e43      	subs	r3, r0, #1
 8015230:	440a      	add	r2, r1
 8015232:	4291      	cmp	r1, r2
 8015234:	d100      	bne.n	8015238 <memcpy+0xc>
 8015236:	bd10      	pop	{r4, pc}
 8015238:	f811 4b01 	ldrb.w	r4, [r1], #1
 801523c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015240:	e7f7      	b.n	8015232 <memcpy+0x6>

08015242 <memset>:
 8015242:	4402      	add	r2, r0
 8015244:	4603      	mov	r3, r0
 8015246:	4293      	cmp	r3, r2
 8015248:	d100      	bne.n	801524c <memset+0xa>
 801524a:	4770      	bx	lr
 801524c:	f803 1b01 	strb.w	r1, [r3], #1
 8015250:	e7f9      	b.n	8015246 <memset+0x4>
	...

08015254 <_free_r>:
 8015254:	b538      	push	{r3, r4, r5, lr}
 8015256:	4605      	mov	r5, r0
 8015258:	2900      	cmp	r1, #0
 801525a:	d045      	beq.n	80152e8 <_free_r+0x94>
 801525c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015260:	1f0c      	subs	r4, r1, #4
 8015262:	2b00      	cmp	r3, #0
 8015264:	bfb8      	it	lt
 8015266:	18e4      	addlt	r4, r4, r3
 8015268:	f000 f91b 	bl	80154a2 <__malloc_lock>
 801526c:	4a1f      	ldr	r2, [pc, #124]	; (80152ec <_free_r+0x98>)
 801526e:	6813      	ldr	r3, [r2, #0]
 8015270:	4610      	mov	r0, r2
 8015272:	b933      	cbnz	r3, 8015282 <_free_r+0x2e>
 8015274:	6063      	str	r3, [r4, #4]
 8015276:	6014      	str	r4, [r2, #0]
 8015278:	4628      	mov	r0, r5
 801527a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801527e:	f000 b911 	b.w	80154a4 <__malloc_unlock>
 8015282:	42a3      	cmp	r3, r4
 8015284:	d90c      	bls.n	80152a0 <_free_r+0x4c>
 8015286:	6821      	ldr	r1, [r4, #0]
 8015288:	1862      	adds	r2, r4, r1
 801528a:	4293      	cmp	r3, r2
 801528c:	bf04      	itt	eq
 801528e:	681a      	ldreq	r2, [r3, #0]
 8015290:	685b      	ldreq	r3, [r3, #4]
 8015292:	6063      	str	r3, [r4, #4]
 8015294:	bf04      	itt	eq
 8015296:	1852      	addeq	r2, r2, r1
 8015298:	6022      	streq	r2, [r4, #0]
 801529a:	6004      	str	r4, [r0, #0]
 801529c:	e7ec      	b.n	8015278 <_free_r+0x24>
 801529e:	4613      	mov	r3, r2
 80152a0:	685a      	ldr	r2, [r3, #4]
 80152a2:	b10a      	cbz	r2, 80152a8 <_free_r+0x54>
 80152a4:	42a2      	cmp	r2, r4
 80152a6:	d9fa      	bls.n	801529e <_free_r+0x4a>
 80152a8:	6819      	ldr	r1, [r3, #0]
 80152aa:	1858      	adds	r0, r3, r1
 80152ac:	42a0      	cmp	r0, r4
 80152ae:	d10b      	bne.n	80152c8 <_free_r+0x74>
 80152b0:	6820      	ldr	r0, [r4, #0]
 80152b2:	4401      	add	r1, r0
 80152b4:	1858      	adds	r0, r3, r1
 80152b6:	4282      	cmp	r2, r0
 80152b8:	6019      	str	r1, [r3, #0]
 80152ba:	d1dd      	bne.n	8015278 <_free_r+0x24>
 80152bc:	6810      	ldr	r0, [r2, #0]
 80152be:	6852      	ldr	r2, [r2, #4]
 80152c0:	605a      	str	r2, [r3, #4]
 80152c2:	4401      	add	r1, r0
 80152c4:	6019      	str	r1, [r3, #0]
 80152c6:	e7d7      	b.n	8015278 <_free_r+0x24>
 80152c8:	d902      	bls.n	80152d0 <_free_r+0x7c>
 80152ca:	230c      	movs	r3, #12
 80152cc:	602b      	str	r3, [r5, #0]
 80152ce:	e7d3      	b.n	8015278 <_free_r+0x24>
 80152d0:	6820      	ldr	r0, [r4, #0]
 80152d2:	1821      	adds	r1, r4, r0
 80152d4:	428a      	cmp	r2, r1
 80152d6:	bf04      	itt	eq
 80152d8:	6811      	ldreq	r1, [r2, #0]
 80152da:	6852      	ldreq	r2, [r2, #4]
 80152dc:	6062      	str	r2, [r4, #4]
 80152de:	bf04      	itt	eq
 80152e0:	1809      	addeq	r1, r1, r0
 80152e2:	6021      	streq	r1, [r4, #0]
 80152e4:	605c      	str	r4, [r3, #4]
 80152e6:	e7c7      	b.n	8015278 <_free_r+0x24>
 80152e8:	bd38      	pop	{r3, r4, r5, pc}
 80152ea:	bf00      	nop
 80152ec:	20000860 	.word	0x20000860

080152f0 <_malloc_r>:
 80152f0:	b570      	push	{r4, r5, r6, lr}
 80152f2:	1ccd      	adds	r5, r1, #3
 80152f4:	f025 0503 	bic.w	r5, r5, #3
 80152f8:	3508      	adds	r5, #8
 80152fa:	2d0c      	cmp	r5, #12
 80152fc:	bf38      	it	cc
 80152fe:	250c      	movcc	r5, #12
 8015300:	2d00      	cmp	r5, #0
 8015302:	4606      	mov	r6, r0
 8015304:	db01      	blt.n	801530a <_malloc_r+0x1a>
 8015306:	42a9      	cmp	r1, r5
 8015308:	d903      	bls.n	8015312 <_malloc_r+0x22>
 801530a:	230c      	movs	r3, #12
 801530c:	6033      	str	r3, [r6, #0]
 801530e:	2000      	movs	r0, #0
 8015310:	bd70      	pop	{r4, r5, r6, pc}
 8015312:	f000 f8c6 	bl	80154a2 <__malloc_lock>
 8015316:	4a23      	ldr	r2, [pc, #140]	; (80153a4 <_malloc_r+0xb4>)
 8015318:	6814      	ldr	r4, [r2, #0]
 801531a:	4621      	mov	r1, r4
 801531c:	b991      	cbnz	r1, 8015344 <_malloc_r+0x54>
 801531e:	4c22      	ldr	r4, [pc, #136]	; (80153a8 <_malloc_r+0xb8>)
 8015320:	6823      	ldr	r3, [r4, #0]
 8015322:	b91b      	cbnz	r3, 801532c <_malloc_r+0x3c>
 8015324:	4630      	mov	r0, r6
 8015326:	f000 f841 	bl	80153ac <_sbrk_r>
 801532a:	6020      	str	r0, [r4, #0]
 801532c:	4629      	mov	r1, r5
 801532e:	4630      	mov	r0, r6
 8015330:	f000 f83c 	bl	80153ac <_sbrk_r>
 8015334:	1c43      	adds	r3, r0, #1
 8015336:	d126      	bne.n	8015386 <_malloc_r+0x96>
 8015338:	230c      	movs	r3, #12
 801533a:	6033      	str	r3, [r6, #0]
 801533c:	4630      	mov	r0, r6
 801533e:	f000 f8b1 	bl	80154a4 <__malloc_unlock>
 8015342:	e7e4      	b.n	801530e <_malloc_r+0x1e>
 8015344:	680b      	ldr	r3, [r1, #0]
 8015346:	1b5b      	subs	r3, r3, r5
 8015348:	d41a      	bmi.n	8015380 <_malloc_r+0x90>
 801534a:	2b0b      	cmp	r3, #11
 801534c:	d90f      	bls.n	801536e <_malloc_r+0x7e>
 801534e:	600b      	str	r3, [r1, #0]
 8015350:	50cd      	str	r5, [r1, r3]
 8015352:	18cc      	adds	r4, r1, r3
 8015354:	4630      	mov	r0, r6
 8015356:	f000 f8a5 	bl	80154a4 <__malloc_unlock>
 801535a:	f104 000b 	add.w	r0, r4, #11
 801535e:	1d23      	adds	r3, r4, #4
 8015360:	f020 0007 	bic.w	r0, r0, #7
 8015364:	1ac3      	subs	r3, r0, r3
 8015366:	d01b      	beq.n	80153a0 <_malloc_r+0xb0>
 8015368:	425a      	negs	r2, r3
 801536a:	50e2      	str	r2, [r4, r3]
 801536c:	bd70      	pop	{r4, r5, r6, pc}
 801536e:	428c      	cmp	r4, r1
 8015370:	bf0d      	iteet	eq
 8015372:	6863      	ldreq	r3, [r4, #4]
 8015374:	684b      	ldrne	r3, [r1, #4]
 8015376:	6063      	strne	r3, [r4, #4]
 8015378:	6013      	streq	r3, [r2, #0]
 801537a:	bf18      	it	ne
 801537c:	460c      	movne	r4, r1
 801537e:	e7e9      	b.n	8015354 <_malloc_r+0x64>
 8015380:	460c      	mov	r4, r1
 8015382:	6849      	ldr	r1, [r1, #4]
 8015384:	e7ca      	b.n	801531c <_malloc_r+0x2c>
 8015386:	1cc4      	adds	r4, r0, #3
 8015388:	f024 0403 	bic.w	r4, r4, #3
 801538c:	42a0      	cmp	r0, r4
 801538e:	d005      	beq.n	801539c <_malloc_r+0xac>
 8015390:	1a21      	subs	r1, r4, r0
 8015392:	4630      	mov	r0, r6
 8015394:	f000 f80a 	bl	80153ac <_sbrk_r>
 8015398:	3001      	adds	r0, #1
 801539a:	d0cd      	beq.n	8015338 <_malloc_r+0x48>
 801539c:	6025      	str	r5, [r4, #0]
 801539e:	e7d9      	b.n	8015354 <_malloc_r+0x64>
 80153a0:	bd70      	pop	{r4, r5, r6, pc}
 80153a2:	bf00      	nop
 80153a4:	20000860 	.word	0x20000860
 80153a8:	20000864 	.word	0x20000864

080153ac <_sbrk_r>:
 80153ac:	b538      	push	{r3, r4, r5, lr}
 80153ae:	4c06      	ldr	r4, [pc, #24]	; (80153c8 <_sbrk_r+0x1c>)
 80153b0:	2300      	movs	r3, #0
 80153b2:	4605      	mov	r5, r0
 80153b4:	4608      	mov	r0, r1
 80153b6:	6023      	str	r3, [r4, #0]
 80153b8:	f002 fad4 	bl	8017964 <_sbrk>
 80153bc:	1c43      	adds	r3, r0, #1
 80153be:	d102      	bne.n	80153c6 <_sbrk_r+0x1a>
 80153c0:	6823      	ldr	r3, [r4, #0]
 80153c2:	b103      	cbz	r3, 80153c6 <_sbrk_r+0x1a>
 80153c4:	602b      	str	r3, [r5, #0]
 80153c6:	bd38      	pop	{r3, r4, r5, pc}
 80153c8:	2000b020 	.word	0x2000b020

080153cc <siprintf>:
 80153cc:	b40e      	push	{r1, r2, r3}
 80153ce:	b500      	push	{lr}
 80153d0:	b09c      	sub	sp, #112	; 0x70
 80153d2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80153d6:	ab1d      	add	r3, sp, #116	; 0x74
 80153d8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80153dc:	9002      	str	r0, [sp, #8]
 80153de:	9006      	str	r0, [sp, #24]
 80153e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80153e4:	480a      	ldr	r0, [pc, #40]	; (8015410 <siprintf+0x44>)
 80153e6:	9104      	str	r1, [sp, #16]
 80153e8:	9107      	str	r1, [sp, #28]
 80153ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80153ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80153f2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80153f6:	6800      	ldr	r0, [r0, #0]
 80153f8:	9301      	str	r3, [sp, #4]
 80153fa:	a902      	add	r1, sp, #8
 80153fc:	f000 f8ae 	bl	801555c <_svfiprintf_r>
 8015400:	9b02      	ldr	r3, [sp, #8]
 8015402:	2200      	movs	r2, #0
 8015404:	701a      	strb	r2, [r3, #0]
 8015406:	b01c      	add	sp, #112	; 0x70
 8015408:	f85d eb04 	ldr.w	lr, [sp], #4
 801540c:	b003      	add	sp, #12
 801540e:	4770      	bx	lr
 8015410:	200002a8 	.word	0x200002a8

08015414 <siscanf>:
 8015414:	b40e      	push	{r1, r2, r3}
 8015416:	b530      	push	{r4, r5, lr}
 8015418:	b09c      	sub	sp, #112	; 0x70
 801541a:	ac1f      	add	r4, sp, #124	; 0x7c
 801541c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8015420:	f854 5b04 	ldr.w	r5, [r4], #4
 8015424:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015428:	9002      	str	r0, [sp, #8]
 801542a:	9006      	str	r0, [sp, #24]
 801542c:	f7ea fed0 	bl	80001d0 <strlen>
 8015430:	4b0b      	ldr	r3, [pc, #44]	; (8015460 <siscanf+0x4c>)
 8015432:	9003      	str	r0, [sp, #12]
 8015434:	9007      	str	r0, [sp, #28]
 8015436:	930b      	str	r3, [sp, #44]	; 0x2c
 8015438:	480a      	ldr	r0, [pc, #40]	; (8015464 <siscanf+0x50>)
 801543a:	9401      	str	r4, [sp, #4]
 801543c:	2300      	movs	r3, #0
 801543e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015440:	9314      	str	r3, [sp, #80]	; 0x50
 8015442:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015446:	f8ad 3016 	strh.w	r3, [sp, #22]
 801544a:	462a      	mov	r2, r5
 801544c:	4623      	mov	r3, r4
 801544e:	a902      	add	r1, sp, #8
 8015450:	6800      	ldr	r0, [r0, #0]
 8015452:	f000 f9d1 	bl	80157f8 <__ssvfiscanf_r>
 8015456:	b01c      	add	sp, #112	; 0x70
 8015458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801545c:	b003      	add	sp, #12
 801545e:	4770      	bx	lr
 8015460:	08015469 	.word	0x08015469
 8015464:	200002a8 	.word	0x200002a8

08015468 <__seofread>:
 8015468:	2000      	movs	r0, #0
 801546a:	4770      	bx	lr

0801546c <strstr>:
 801546c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801546e:	7803      	ldrb	r3, [r0, #0]
 8015470:	b133      	cbz	r3, 8015480 <strstr+0x14>
 8015472:	4603      	mov	r3, r0
 8015474:	4618      	mov	r0, r3
 8015476:	1c5e      	adds	r6, r3, #1
 8015478:	781b      	ldrb	r3, [r3, #0]
 801547a:	b933      	cbnz	r3, 801548a <strstr+0x1e>
 801547c:	4618      	mov	r0, r3
 801547e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015480:	780b      	ldrb	r3, [r1, #0]
 8015482:	2b00      	cmp	r3, #0
 8015484:	bf18      	it	ne
 8015486:	2000      	movne	r0, #0
 8015488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801548a:	1e4d      	subs	r5, r1, #1
 801548c:	1e44      	subs	r4, r0, #1
 801548e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8015492:	2a00      	cmp	r2, #0
 8015494:	d0f3      	beq.n	801547e <strstr+0x12>
 8015496:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 801549a:	4297      	cmp	r7, r2
 801549c:	4633      	mov	r3, r6
 801549e:	d0f6      	beq.n	801548e <strstr+0x22>
 80154a0:	e7e8      	b.n	8015474 <strstr+0x8>

080154a2 <__malloc_lock>:
 80154a2:	4770      	bx	lr

080154a4 <__malloc_unlock>:
 80154a4:	4770      	bx	lr

080154a6 <__ssputs_r>:
 80154a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154aa:	688e      	ldr	r6, [r1, #8]
 80154ac:	429e      	cmp	r6, r3
 80154ae:	4682      	mov	sl, r0
 80154b0:	460c      	mov	r4, r1
 80154b2:	4691      	mov	r9, r2
 80154b4:	4698      	mov	r8, r3
 80154b6:	d835      	bhi.n	8015524 <__ssputs_r+0x7e>
 80154b8:	898a      	ldrh	r2, [r1, #12]
 80154ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80154be:	d031      	beq.n	8015524 <__ssputs_r+0x7e>
 80154c0:	6825      	ldr	r5, [r4, #0]
 80154c2:	6909      	ldr	r1, [r1, #16]
 80154c4:	1a6f      	subs	r7, r5, r1
 80154c6:	6965      	ldr	r5, [r4, #20]
 80154c8:	2302      	movs	r3, #2
 80154ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80154ce:	fb95 f5f3 	sdiv	r5, r5, r3
 80154d2:	f108 0301 	add.w	r3, r8, #1
 80154d6:	443b      	add	r3, r7
 80154d8:	429d      	cmp	r5, r3
 80154da:	bf38      	it	cc
 80154dc:	461d      	movcc	r5, r3
 80154de:	0553      	lsls	r3, r2, #21
 80154e0:	d531      	bpl.n	8015546 <__ssputs_r+0xa0>
 80154e2:	4629      	mov	r1, r5
 80154e4:	f7ff ff04 	bl	80152f0 <_malloc_r>
 80154e8:	4606      	mov	r6, r0
 80154ea:	b950      	cbnz	r0, 8015502 <__ssputs_r+0x5c>
 80154ec:	230c      	movs	r3, #12
 80154ee:	f8ca 3000 	str.w	r3, [sl]
 80154f2:	89a3      	ldrh	r3, [r4, #12]
 80154f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154f8:	81a3      	strh	r3, [r4, #12]
 80154fa:	f04f 30ff 	mov.w	r0, #4294967295
 80154fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015502:	463a      	mov	r2, r7
 8015504:	6921      	ldr	r1, [r4, #16]
 8015506:	f7ff fe91 	bl	801522c <memcpy>
 801550a:	89a3      	ldrh	r3, [r4, #12]
 801550c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015514:	81a3      	strh	r3, [r4, #12]
 8015516:	6126      	str	r6, [r4, #16]
 8015518:	6165      	str	r5, [r4, #20]
 801551a:	443e      	add	r6, r7
 801551c:	1bed      	subs	r5, r5, r7
 801551e:	6026      	str	r6, [r4, #0]
 8015520:	60a5      	str	r5, [r4, #8]
 8015522:	4646      	mov	r6, r8
 8015524:	4546      	cmp	r6, r8
 8015526:	bf28      	it	cs
 8015528:	4646      	movcs	r6, r8
 801552a:	4632      	mov	r2, r6
 801552c:	4649      	mov	r1, r9
 801552e:	6820      	ldr	r0, [r4, #0]
 8015530:	f000 ff54 	bl	80163dc <memmove>
 8015534:	68a3      	ldr	r3, [r4, #8]
 8015536:	1b9b      	subs	r3, r3, r6
 8015538:	60a3      	str	r3, [r4, #8]
 801553a:	6823      	ldr	r3, [r4, #0]
 801553c:	441e      	add	r6, r3
 801553e:	6026      	str	r6, [r4, #0]
 8015540:	2000      	movs	r0, #0
 8015542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015546:	462a      	mov	r2, r5
 8015548:	f000 ff62 	bl	8016410 <_realloc_r>
 801554c:	4606      	mov	r6, r0
 801554e:	2800      	cmp	r0, #0
 8015550:	d1e1      	bne.n	8015516 <__ssputs_r+0x70>
 8015552:	6921      	ldr	r1, [r4, #16]
 8015554:	4650      	mov	r0, sl
 8015556:	f7ff fe7d 	bl	8015254 <_free_r>
 801555a:	e7c7      	b.n	80154ec <__ssputs_r+0x46>

0801555c <_svfiprintf_r>:
 801555c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015560:	b09d      	sub	sp, #116	; 0x74
 8015562:	4680      	mov	r8, r0
 8015564:	9303      	str	r3, [sp, #12]
 8015566:	898b      	ldrh	r3, [r1, #12]
 8015568:	061c      	lsls	r4, r3, #24
 801556a:	460d      	mov	r5, r1
 801556c:	4616      	mov	r6, r2
 801556e:	d50f      	bpl.n	8015590 <_svfiprintf_r+0x34>
 8015570:	690b      	ldr	r3, [r1, #16]
 8015572:	b96b      	cbnz	r3, 8015590 <_svfiprintf_r+0x34>
 8015574:	2140      	movs	r1, #64	; 0x40
 8015576:	f7ff febb 	bl	80152f0 <_malloc_r>
 801557a:	6028      	str	r0, [r5, #0]
 801557c:	6128      	str	r0, [r5, #16]
 801557e:	b928      	cbnz	r0, 801558c <_svfiprintf_r+0x30>
 8015580:	230c      	movs	r3, #12
 8015582:	f8c8 3000 	str.w	r3, [r8]
 8015586:	f04f 30ff 	mov.w	r0, #4294967295
 801558a:	e0c5      	b.n	8015718 <_svfiprintf_r+0x1bc>
 801558c:	2340      	movs	r3, #64	; 0x40
 801558e:	616b      	str	r3, [r5, #20]
 8015590:	2300      	movs	r3, #0
 8015592:	9309      	str	r3, [sp, #36]	; 0x24
 8015594:	2320      	movs	r3, #32
 8015596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801559a:	2330      	movs	r3, #48	; 0x30
 801559c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80155a0:	f04f 0b01 	mov.w	fp, #1
 80155a4:	4637      	mov	r7, r6
 80155a6:	463c      	mov	r4, r7
 80155a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d13c      	bne.n	801562a <_svfiprintf_r+0xce>
 80155b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80155b4:	d00b      	beq.n	80155ce <_svfiprintf_r+0x72>
 80155b6:	4653      	mov	r3, sl
 80155b8:	4632      	mov	r2, r6
 80155ba:	4629      	mov	r1, r5
 80155bc:	4640      	mov	r0, r8
 80155be:	f7ff ff72 	bl	80154a6 <__ssputs_r>
 80155c2:	3001      	adds	r0, #1
 80155c4:	f000 80a3 	beq.w	801570e <_svfiprintf_r+0x1b2>
 80155c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155ca:	4453      	add	r3, sl
 80155cc:	9309      	str	r3, [sp, #36]	; 0x24
 80155ce:	783b      	ldrb	r3, [r7, #0]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	f000 809c 	beq.w	801570e <_svfiprintf_r+0x1b2>
 80155d6:	2300      	movs	r3, #0
 80155d8:	f04f 32ff 	mov.w	r2, #4294967295
 80155dc:	9304      	str	r3, [sp, #16]
 80155de:	9307      	str	r3, [sp, #28]
 80155e0:	9205      	str	r2, [sp, #20]
 80155e2:	9306      	str	r3, [sp, #24]
 80155e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80155e8:	931a      	str	r3, [sp, #104]	; 0x68
 80155ea:	2205      	movs	r2, #5
 80155ec:	7821      	ldrb	r1, [r4, #0]
 80155ee:	4850      	ldr	r0, [pc, #320]	; (8015730 <_svfiprintf_r+0x1d4>)
 80155f0:	f7ea fdf6 	bl	80001e0 <memchr>
 80155f4:	1c67      	adds	r7, r4, #1
 80155f6:	9b04      	ldr	r3, [sp, #16]
 80155f8:	b9d8      	cbnz	r0, 8015632 <_svfiprintf_r+0xd6>
 80155fa:	06d9      	lsls	r1, r3, #27
 80155fc:	bf44      	itt	mi
 80155fe:	2220      	movmi	r2, #32
 8015600:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015604:	071a      	lsls	r2, r3, #28
 8015606:	bf44      	itt	mi
 8015608:	222b      	movmi	r2, #43	; 0x2b
 801560a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801560e:	7822      	ldrb	r2, [r4, #0]
 8015610:	2a2a      	cmp	r2, #42	; 0x2a
 8015612:	d016      	beq.n	8015642 <_svfiprintf_r+0xe6>
 8015614:	9a07      	ldr	r2, [sp, #28]
 8015616:	2100      	movs	r1, #0
 8015618:	200a      	movs	r0, #10
 801561a:	4627      	mov	r7, r4
 801561c:	3401      	adds	r4, #1
 801561e:	783b      	ldrb	r3, [r7, #0]
 8015620:	3b30      	subs	r3, #48	; 0x30
 8015622:	2b09      	cmp	r3, #9
 8015624:	d951      	bls.n	80156ca <_svfiprintf_r+0x16e>
 8015626:	b1c9      	cbz	r1, 801565c <_svfiprintf_r+0x100>
 8015628:	e011      	b.n	801564e <_svfiprintf_r+0xf2>
 801562a:	2b25      	cmp	r3, #37	; 0x25
 801562c:	d0c0      	beq.n	80155b0 <_svfiprintf_r+0x54>
 801562e:	4627      	mov	r7, r4
 8015630:	e7b9      	b.n	80155a6 <_svfiprintf_r+0x4a>
 8015632:	4a3f      	ldr	r2, [pc, #252]	; (8015730 <_svfiprintf_r+0x1d4>)
 8015634:	1a80      	subs	r0, r0, r2
 8015636:	fa0b f000 	lsl.w	r0, fp, r0
 801563a:	4318      	orrs	r0, r3
 801563c:	9004      	str	r0, [sp, #16]
 801563e:	463c      	mov	r4, r7
 8015640:	e7d3      	b.n	80155ea <_svfiprintf_r+0x8e>
 8015642:	9a03      	ldr	r2, [sp, #12]
 8015644:	1d11      	adds	r1, r2, #4
 8015646:	6812      	ldr	r2, [r2, #0]
 8015648:	9103      	str	r1, [sp, #12]
 801564a:	2a00      	cmp	r2, #0
 801564c:	db01      	blt.n	8015652 <_svfiprintf_r+0xf6>
 801564e:	9207      	str	r2, [sp, #28]
 8015650:	e004      	b.n	801565c <_svfiprintf_r+0x100>
 8015652:	4252      	negs	r2, r2
 8015654:	f043 0302 	orr.w	r3, r3, #2
 8015658:	9207      	str	r2, [sp, #28]
 801565a:	9304      	str	r3, [sp, #16]
 801565c:	783b      	ldrb	r3, [r7, #0]
 801565e:	2b2e      	cmp	r3, #46	; 0x2e
 8015660:	d10e      	bne.n	8015680 <_svfiprintf_r+0x124>
 8015662:	787b      	ldrb	r3, [r7, #1]
 8015664:	2b2a      	cmp	r3, #42	; 0x2a
 8015666:	f107 0101 	add.w	r1, r7, #1
 801566a:	d132      	bne.n	80156d2 <_svfiprintf_r+0x176>
 801566c:	9b03      	ldr	r3, [sp, #12]
 801566e:	1d1a      	adds	r2, r3, #4
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	9203      	str	r2, [sp, #12]
 8015674:	2b00      	cmp	r3, #0
 8015676:	bfb8      	it	lt
 8015678:	f04f 33ff 	movlt.w	r3, #4294967295
 801567c:	3702      	adds	r7, #2
 801567e:	9305      	str	r3, [sp, #20]
 8015680:	4c2c      	ldr	r4, [pc, #176]	; (8015734 <_svfiprintf_r+0x1d8>)
 8015682:	7839      	ldrb	r1, [r7, #0]
 8015684:	2203      	movs	r2, #3
 8015686:	4620      	mov	r0, r4
 8015688:	f7ea fdaa 	bl	80001e0 <memchr>
 801568c:	b138      	cbz	r0, 801569e <_svfiprintf_r+0x142>
 801568e:	2340      	movs	r3, #64	; 0x40
 8015690:	1b00      	subs	r0, r0, r4
 8015692:	fa03 f000 	lsl.w	r0, r3, r0
 8015696:	9b04      	ldr	r3, [sp, #16]
 8015698:	4303      	orrs	r3, r0
 801569a:	9304      	str	r3, [sp, #16]
 801569c:	3701      	adds	r7, #1
 801569e:	7839      	ldrb	r1, [r7, #0]
 80156a0:	4825      	ldr	r0, [pc, #148]	; (8015738 <_svfiprintf_r+0x1dc>)
 80156a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80156a6:	2206      	movs	r2, #6
 80156a8:	1c7e      	adds	r6, r7, #1
 80156aa:	f7ea fd99 	bl	80001e0 <memchr>
 80156ae:	2800      	cmp	r0, #0
 80156b0:	d035      	beq.n	801571e <_svfiprintf_r+0x1c2>
 80156b2:	4b22      	ldr	r3, [pc, #136]	; (801573c <_svfiprintf_r+0x1e0>)
 80156b4:	b9fb      	cbnz	r3, 80156f6 <_svfiprintf_r+0x19a>
 80156b6:	9b03      	ldr	r3, [sp, #12]
 80156b8:	3307      	adds	r3, #7
 80156ba:	f023 0307 	bic.w	r3, r3, #7
 80156be:	3308      	adds	r3, #8
 80156c0:	9303      	str	r3, [sp, #12]
 80156c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156c4:	444b      	add	r3, r9
 80156c6:	9309      	str	r3, [sp, #36]	; 0x24
 80156c8:	e76c      	b.n	80155a4 <_svfiprintf_r+0x48>
 80156ca:	fb00 3202 	mla	r2, r0, r2, r3
 80156ce:	2101      	movs	r1, #1
 80156d0:	e7a3      	b.n	801561a <_svfiprintf_r+0xbe>
 80156d2:	2300      	movs	r3, #0
 80156d4:	9305      	str	r3, [sp, #20]
 80156d6:	4618      	mov	r0, r3
 80156d8:	240a      	movs	r4, #10
 80156da:	460f      	mov	r7, r1
 80156dc:	3101      	adds	r1, #1
 80156de:	783a      	ldrb	r2, [r7, #0]
 80156e0:	3a30      	subs	r2, #48	; 0x30
 80156e2:	2a09      	cmp	r2, #9
 80156e4:	d903      	bls.n	80156ee <_svfiprintf_r+0x192>
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d0ca      	beq.n	8015680 <_svfiprintf_r+0x124>
 80156ea:	9005      	str	r0, [sp, #20]
 80156ec:	e7c8      	b.n	8015680 <_svfiprintf_r+0x124>
 80156ee:	fb04 2000 	mla	r0, r4, r0, r2
 80156f2:	2301      	movs	r3, #1
 80156f4:	e7f1      	b.n	80156da <_svfiprintf_r+0x17e>
 80156f6:	ab03      	add	r3, sp, #12
 80156f8:	9300      	str	r3, [sp, #0]
 80156fa:	462a      	mov	r2, r5
 80156fc:	4b10      	ldr	r3, [pc, #64]	; (8015740 <_svfiprintf_r+0x1e4>)
 80156fe:	a904      	add	r1, sp, #16
 8015700:	4640      	mov	r0, r8
 8015702:	f3af 8000 	nop.w
 8015706:	f1b0 3fff 	cmp.w	r0, #4294967295
 801570a:	4681      	mov	r9, r0
 801570c:	d1d9      	bne.n	80156c2 <_svfiprintf_r+0x166>
 801570e:	89ab      	ldrh	r3, [r5, #12]
 8015710:	065b      	lsls	r3, r3, #25
 8015712:	f53f af38 	bmi.w	8015586 <_svfiprintf_r+0x2a>
 8015716:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015718:	b01d      	add	sp, #116	; 0x74
 801571a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801571e:	ab03      	add	r3, sp, #12
 8015720:	9300      	str	r3, [sp, #0]
 8015722:	462a      	mov	r2, r5
 8015724:	4b06      	ldr	r3, [pc, #24]	; (8015740 <_svfiprintf_r+0x1e4>)
 8015726:	a904      	add	r1, sp, #16
 8015728:	4640      	mov	r0, r8
 801572a:	f000 fa2f 	bl	8015b8c <_printf_i>
 801572e:	e7ea      	b.n	8015706 <_svfiprintf_r+0x1aa>
 8015730:	08017d90 	.word	0x08017d90
 8015734:	08017d96 	.word	0x08017d96
 8015738:	08017d9a 	.word	0x08017d9a
 801573c:	00000000 	.word	0x00000000
 8015740:	080154a7 	.word	0x080154a7

08015744 <_sungetc_r>:
 8015744:	b538      	push	{r3, r4, r5, lr}
 8015746:	1c4b      	adds	r3, r1, #1
 8015748:	4614      	mov	r4, r2
 801574a:	d103      	bne.n	8015754 <_sungetc_r+0x10>
 801574c:	f04f 35ff 	mov.w	r5, #4294967295
 8015750:	4628      	mov	r0, r5
 8015752:	bd38      	pop	{r3, r4, r5, pc}
 8015754:	8993      	ldrh	r3, [r2, #12]
 8015756:	f023 0320 	bic.w	r3, r3, #32
 801575a:	8193      	strh	r3, [r2, #12]
 801575c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801575e:	6852      	ldr	r2, [r2, #4]
 8015760:	b2cd      	uxtb	r5, r1
 8015762:	b18b      	cbz	r3, 8015788 <_sungetc_r+0x44>
 8015764:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015766:	429a      	cmp	r2, r3
 8015768:	da08      	bge.n	801577c <_sungetc_r+0x38>
 801576a:	6823      	ldr	r3, [r4, #0]
 801576c:	1e5a      	subs	r2, r3, #1
 801576e:	6022      	str	r2, [r4, #0]
 8015770:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015774:	6863      	ldr	r3, [r4, #4]
 8015776:	3301      	adds	r3, #1
 8015778:	6063      	str	r3, [r4, #4]
 801577a:	e7e9      	b.n	8015750 <_sungetc_r+0xc>
 801577c:	4621      	mov	r1, r4
 801577e:	f000 fdcf 	bl	8016320 <__submore>
 8015782:	2800      	cmp	r0, #0
 8015784:	d0f1      	beq.n	801576a <_sungetc_r+0x26>
 8015786:	e7e1      	b.n	801574c <_sungetc_r+0x8>
 8015788:	6921      	ldr	r1, [r4, #16]
 801578a:	6823      	ldr	r3, [r4, #0]
 801578c:	b151      	cbz	r1, 80157a4 <_sungetc_r+0x60>
 801578e:	4299      	cmp	r1, r3
 8015790:	d208      	bcs.n	80157a4 <_sungetc_r+0x60>
 8015792:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015796:	428d      	cmp	r5, r1
 8015798:	d104      	bne.n	80157a4 <_sungetc_r+0x60>
 801579a:	3b01      	subs	r3, #1
 801579c:	3201      	adds	r2, #1
 801579e:	6023      	str	r3, [r4, #0]
 80157a0:	6062      	str	r2, [r4, #4]
 80157a2:	e7d5      	b.n	8015750 <_sungetc_r+0xc>
 80157a4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80157a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80157aa:	6363      	str	r3, [r4, #52]	; 0x34
 80157ac:	2303      	movs	r3, #3
 80157ae:	63a3      	str	r3, [r4, #56]	; 0x38
 80157b0:	4623      	mov	r3, r4
 80157b2:	6422      	str	r2, [r4, #64]	; 0x40
 80157b4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80157b8:	6023      	str	r3, [r4, #0]
 80157ba:	2301      	movs	r3, #1
 80157bc:	e7dc      	b.n	8015778 <_sungetc_r+0x34>

080157be <__ssrefill_r>:
 80157be:	b510      	push	{r4, lr}
 80157c0:	460c      	mov	r4, r1
 80157c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80157c4:	b169      	cbz	r1, 80157e2 <__ssrefill_r+0x24>
 80157c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80157ca:	4299      	cmp	r1, r3
 80157cc:	d001      	beq.n	80157d2 <__ssrefill_r+0x14>
 80157ce:	f7ff fd41 	bl	8015254 <_free_r>
 80157d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80157d4:	6063      	str	r3, [r4, #4]
 80157d6:	2000      	movs	r0, #0
 80157d8:	6360      	str	r0, [r4, #52]	; 0x34
 80157da:	b113      	cbz	r3, 80157e2 <__ssrefill_r+0x24>
 80157dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80157de:	6023      	str	r3, [r4, #0]
 80157e0:	bd10      	pop	{r4, pc}
 80157e2:	6923      	ldr	r3, [r4, #16]
 80157e4:	6023      	str	r3, [r4, #0]
 80157e6:	2300      	movs	r3, #0
 80157e8:	6063      	str	r3, [r4, #4]
 80157ea:	89a3      	ldrh	r3, [r4, #12]
 80157ec:	f043 0320 	orr.w	r3, r3, #32
 80157f0:	81a3      	strh	r3, [r4, #12]
 80157f2:	f04f 30ff 	mov.w	r0, #4294967295
 80157f6:	bd10      	pop	{r4, pc}

080157f8 <__ssvfiscanf_r>:
 80157f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157fc:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8015800:	f10d 080c 	add.w	r8, sp, #12
 8015804:	9301      	str	r3, [sp, #4]
 8015806:	2300      	movs	r3, #0
 8015808:	9346      	str	r3, [sp, #280]	; 0x118
 801580a:	9347      	str	r3, [sp, #284]	; 0x11c
 801580c:	4ba0      	ldr	r3, [pc, #640]	; (8015a90 <__ssvfiscanf_r+0x298>)
 801580e:	93a2      	str	r3, [sp, #648]	; 0x288
 8015810:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8015a98 <__ssvfiscanf_r+0x2a0>
 8015814:	4b9f      	ldr	r3, [pc, #636]	; (8015a94 <__ssvfiscanf_r+0x29c>)
 8015816:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 801581a:	4606      	mov	r6, r0
 801581c:	460c      	mov	r4, r1
 801581e:	93a3      	str	r3, [sp, #652]	; 0x28c
 8015820:	4692      	mov	sl, r2
 8015822:	270a      	movs	r7, #10
 8015824:	f89a 3000 	ldrb.w	r3, [sl]
 8015828:	2b00      	cmp	r3, #0
 801582a:	f000 812f 	beq.w	8015a8c <__ssvfiscanf_r+0x294>
 801582e:	f000 fdb5 	bl	801639c <__locale_ctype_ptr>
 8015832:	f89a b000 	ldrb.w	fp, [sl]
 8015836:	4458      	add	r0, fp
 8015838:	7843      	ldrb	r3, [r0, #1]
 801583a:	f013 0308 	ands.w	r3, r3, #8
 801583e:	d143      	bne.n	80158c8 <__ssvfiscanf_r+0xd0>
 8015840:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8015844:	f10a 0501 	add.w	r5, sl, #1
 8015848:	f040 8099 	bne.w	801597e <__ssvfiscanf_r+0x186>
 801584c:	9345      	str	r3, [sp, #276]	; 0x114
 801584e:	9343      	str	r3, [sp, #268]	; 0x10c
 8015850:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8015854:	2b2a      	cmp	r3, #42	; 0x2a
 8015856:	d103      	bne.n	8015860 <__ssvfiscanf_r+0x68>
 8015858:	2310      	movs	r3, #16
 801585a:	9343      	str	r3, [sp, #268]	; 0x10c
 801585c:	f10a 0502 	add.w	r5, sl, #2
 8015860:	7829      	ldrb	r1, [r5, #0]
 8015862:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8015866:	2a09      	cmp	r2, #9
 8015868:	46aa      	mov	sl, r5
 801586a:	f105 0501 	add.w	r5, r5, #1
 801586e:	d941      	bls.n	80158f4 <__ssvfiscanf_r+0xfc>
 8015870:	2203      	movs	r2, #3
 8015872:	4889      	ldr	r0, [pc, #548]	; (8015a98 <__ssvfiscanf_r+0x2a0>)
 8015874:	f7ea fcb4 	bl	80001e0 <memchr>
 8015878:	b138      	cbz	r0, 801588a <__ssvfiscanf_r+0x92>
 801587a:	eba0 0309 	sub.w	r3, r0, r9
 801587e:	2001      	movs	r0, #1
 8015880:	4098      	lsls	r0, r3
 8015882:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8015884:	4318      	orrs	r0, r3
 8015886:	9043      	str	r0, [sp, #268]	; 0x10c
 8015888:	46aa      	mov	sl, r5
 801588a:	f89a 3000 	ldrb.w	r3, [sl]
 801588e:	2b67      	cmp	r3, #103	; 0x67
 8015890:	f10a 0501 	add.w	r5, sl, #1
 8015894:	d84a      	bhi.n	801592c <__ssvfiscanf_r+0x134>
 8015896:	2b65      	cmp	r3, #101	; 0x65
 8015898:	f080 80b7 	bcs.w	8015a0a <__ssvfiscanf_r+0x212>
 801589c:	2b47      	cmp	r3, #71	; 0x47
 801589e:	d82f      	bhi.n	8015900 <__ssvfiscanf_r+0x108>
 80158a0:	2b45      	cmp	r3, #69	; 0x45
 80158a2:	f080 80b2 	bcs.w	8015a0a <__ssvfiscanf_r+0x212>
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	f000 8082 	beq.w	80159b0 <__ssvfiscanf_r+0x1b8>
 80158ac:	2b25      	cmp	r3, #37	; 0x25
 80158ae:	d066      	beq.n	801597e <__ssvfiscanf_r+0x186>
 80158b0:	2303      	movs	r3, #3
 80158b2:	9349      	str	r3, [sp, #292]	; 0x124
 80158b4:	9744      	str	r7, [sp, #272]	; 0x110
 80158b6:	e045      	b.n	8015944 <__ssvfiscanf_r+0x14c>
 80158b8:	9947      	ldr	r1, [sp, #284]	; 0x11c
 80158ba:	3101      	adds	r1, #1
 80158bc:	9147      	str	r1, [sp, #284]	; 0x11c
 80158be:	6861      	ldr	r1, [r4, #4]
 80158c0:	3301      	adds	r3, #1
 80158c2:	3901      	subs	r1, #1
 80158c4:	6061      	str	r1, [r4, #4]
 80158c6:	6023      	str	r3, [r4, #0]
 80158c8:	6863      	ldr	r3, [r4, #4]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	dd0b      	ble.n	80158e6 <__ssvfiscanf_r+0xee>
 80158ce:	f000 fd65 	bl	801639c <__locale_ctype_ptr>
 80158d2:	6823      	ldr	r3, [r4, #0]
 80158d4:	7819      	ldrb	r1, [r3, #0]
 80158d6:	4408      	add	r0, r1
 80158d8:	7841      	ldrb	r1, [r0, #1]
 80158da:	070d      	lsls	r5, r1, #28
 80158dc:	d4ec      	bmi.n	80158b8 <__ssvfiscanf_r+0xc0>
 80158de:	f10a 0501 	add.w	r5, sl, #1
 80158e2:	46aa      	mov	sl, r5
 80158e4:	e79e      	b.n	8015824 <__ssvfiscanf_r+0x2c>
 80158e6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80158e8:	4621      	mov	r1, r4
 80158ea:	4630      	mov	r0, r6
 80158ec:	4798      	blx	r3
 80158ee:	2800      	cmp	r0, #0
 80158f0:	d0ed      	beq.n	80158ce <__ssvfiscanf_r+0xd6>
 80158f2:	e7f4      	b.n	80158de <__ssvfiscanf_r+0xe6>
 80158f4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80158f6:	fb07 1303 	mla	r3, r7, r3, r1
 80158fa:	3b30      	subs	r3, #48	; 0x30
 80158fc:	9345      	str	r3, [sp, #276]	; 0x114
 80158fe:	e7af      	b.n	8015860 <__ssvfiscanf_r+0x68>
 8015900:	2b5b      	cmp	r3, #91	; 0x5b
 8015902:	d061      	beq.n	80159c8 <__ssvfiscanf_r+0x1d0>
 8015904:	d80c      	bhi.n	8015920 <__ssvfiscanf_r+0x128>
 8015906:	2b58      	cmp	r3, #88	; 0x58
 8015908:	d1d2      	bne.n	80158b0 <__ssvfiscanf_r+0xb8>
 801590a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 801590c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015910:	9243      	str	r2, [sp, #268]	; 0x10c
 8015912:	2210      	movs	r2, #16
 8015914:	9244      	str	r2, [sp, #272]	; 0x110
 8015916:	2b6f      	cmp	r3, #111	; 0x6f
 8015918:	bfb4      	ite	lt
 801591a:	2303      	movlt	r3, #3
 801591c:	2304      	movge	r3, #4
 801591e:	e010      	b.n	8015942 <__ssvfiscanf_r+0x14a>
 8015920:	2b63      	cmp	r3, #99	; 0x63
 8015922:	d05c      	beq.n	80159de <__ssvfiscanf_r+0x1e6>
 8015924:	2b64      	cmp	r3, #100	; 0x64
 8015926:	d1c3      	bne.n	80158b0 <__ssvfiscanf_r+0xb8>
 8015928:	9744      	str	r7, [sp, #272]	; 0x110
 801592a:	e7f4      	b.n	8015916 <__ssvfiscanf_r+0x11e>
 801592c:	2b70      	cmp	r3, #112	; 0x70
 801592e:	d042      	beq.n	80159b6 <__ssvfiscanf_r+0x1be>
 8015930:	d81d      	bhi.n	801596e <__ssvfiscanf_r+0x176>
 8015932:	2b6e      	cmp	r3, #110	; 0x6e
 8015934:	d059      	beq.n	80159ea <__ssvfiscanf_r+0x1f2>
 8015936:	d843      	bhi.n	80159c0 <__ssvfiscanf_r+0x1c8>
 8015938:	2b69      	cmp	r3, #105	; 0x69
 801593a:	d1b9      	bne.n	80158b0 <__ssvfiscanf_r+0xb8>
 801593c:	2300      	movs	r3, #0
 801593e:	9344      	str	r3, [sp, #272]	; 0x110
 8015940:	2303      	movs	r3, #3
 8015942:	9349      	str	r3, [sp, #292]	; 0x124
 8015944:	6863      	ldr	r3, [r4, #4]
 8015946:	2b00      	cmp	r3, #0
 8015948:	dd61      	ble.n	8015a0e <__ssvfiscanf_r+0x216>
 801594a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801594c:	0659      	lsls	r1, r3, #25
 801594e:	d56f      	bpl.n	8015a30 <__ssvfiscanf_r+0x238>
 8015950:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8015952:	2b02      	cmp	r3, #2
 8015954:	dc7c      	bgt.n	8015a50 <__ssvfiscanf_r+0x258>
 8015956:	ab01      	add	r3, sp, #4
 8015958:	4622      	mov	r2, r4
 801595a:	a943      	add	r1, sp, #268	; 0x10c
 801595c:	4630      	mov	r0, r6
 801595e:	f000 fa35 	bl	8015dcc <_scanf_chars>
 8015962:	2801      	cmp	r0, #1
 8015964:	f000 8092 	beq.w	8015a8c <__ssvfiscanf_r+0x294>
 8015968:	2802      	cmp	r0, #2
 801596a:	d1ba      	bne.n	80158e2 <__ssvfiscanf_r+0xea>
 801596c:	e01d      	b.n	80159aa <__ssvfiscanf_r+0x1b2>
 801596e:	2b75      	cmp	r3, #117	; 0x75
 8015970:	d0da      	beq.n	8015928 <__ssvfiscanf_r+0x130>
 8015972:	2b78      	cmp	r3, #120	; 0x78
 8015974:	d0c9      	beq.n	801590a <__ssvfiscanf_r+0x112>
 8015976:	2b73      	cmp	r3, #115	; 0x73
 8015978:	d19a      	bne.n	80158b0 <__ssvfiscanf_r+0xb8>
 801597a:	2302      	movs	r3, #2
 801597c:	e7e1      	b.n	8015942 <__ssvfiscanf_r+0x14a>
 801597e:	6863      	ldr	r3, [r4, #4]
 8015980:	2b00      	cmp	r3, #0
 8015982:	dd0c      	ble.n	801599e <__ssvfiscanf_r+0x1a6>
 8015984:	6823      	ldr	r3, [r4, #0]
 8015986:	781a      	ldrb	r2, [r3, #0]
 8015988:	4593      	cmp	fp, r2
 801598a:	d17f      	bne.n	8015a8c <__ssvfiscanf_r+0x294>
 801598c:	3301      	adds	r3, #1
 801598e:	6862      	ldr	r2, [r4, #4]
 8015990:	6023      	str	r3, [r4, #0]
 8015992:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8015994:	3a01      	subs	r2, #1
 8015996:	3301      	adds	r3, #1
 8015998:	6062      	str	r2, [r4, #4]
 801599a:	9347      	str	r3, [sp, #284]	; 0x11c
 801599c:	e7a1      	b.n	80158e2 <__ssvfiscanf_r+0xea>
 801599e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80159a0:	4621      	mov	r1, r4
 80159a2:	4630      	mov	r0, r6
 80159a4:	4798      	blx	r3
 80159a6:	2800      	cmp	r0, #0
 80159a8:	d0ec      	beq.n	8015984 <__ssvfiscanf_r+0x18c>
 80159aa:	9846      	ldr	r0, [sp, #280]	; 0x118
 80159ac:	2800      	cmp	r0, #0
 80159ae:	d163      	bne.n	8015a78 <__ssvfiscanf_r+0x280>
 80159b0:	f04f 30ff 	mov.w	r0, #4294967295
 80159b4:	e066      	b.n	8015a84 <__ssvfiscanf_r+0x28c>
 80159b6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80159b8:	f042 0220 	orr.w	r2, r2, #32
 80159bc:	9243      	str	r2, [sp, #268]	; 0x10c
 80159be:	e7a4      	b.n	801590a <__ssvfiscanf_r+0x112>
 80159c0:	2308      	movs	r3, #8
 80159c2:	9344      	str	r3, [sp, #272]	; 0x110
 80159c4:	2304      	movs	r3, #4
 80159c6:	e7bc      	b.n	8015942 <__ssvfiscanf_r+0x14a>
 80159c8:	4629      	mov	r1, r5
 80159ca:	4640      	mov	r0, r8
 80159cc:	f000 fb56 	bl	801607c <__sccl>
 80159d0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80159d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159d6:	9343      	str	r3, [sp, #268]	; 0x10c
 80159d8:	4605      	mov	r5, r0
 80159da:	2301      	movs	r3, #1
 80159dc:	e7b1      	b.n	8015942 <__ssvfiscanf_r+0x14a>
 80159de:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80159e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159e4:	9343      	str	r3, [sp, #268]	; 0x10c
 80159e6:	2300      	movs	r3, #0
 80159e8:	e7ab      	b.n	8015942 <__ssvfiscanf_r+0x14a>
 80159ea:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80159ec:	06d0      	lsls	r0, r2, #27
 80159ee:	f53f af78 	bmi.w	80158e2 <__ssvfiscanf_r+0xea>
 80159f2:	f012 0f01 	tst.w	r2, #1
 80159f6:	9a01      	ldr	r2, [sp, #4]
 80159f8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80159fa:	f102 0104 	add.w	r1, r2, #4
 80159fe:	9101      	str	r1, [sp, #4]
 8015a00:	6812      	ldr	r2, [r2, #0]
 8015a02:	bf14      	ite	ne
 8015a04:	8013      	strhne	r3, [r2, #0]
 8015a06:	6013      	streq	r3, [r2, #0]
 8015a08:	e76b      	b.n	80158e2 <__ssvfiscanf_r+0xea>
 8015a0a:	2305      	movs	r3, #5
 8015a0c:	e799      	b.n	8015942 <__ssvfiscanf_r+0x14a>
 8015a0e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8015a10:	4621      	mov	r1, r4
 8015a12:	4630      	mov	r0, r6
 8015a14:	4798      	blx	r3
 8015a16:	2800      	cmp	r0, #0
 8015a18:	d097      	beq.n	801594a <__ssvfiscanf_r+0x152>
 8015a1a:	e7c6      	b.n	80159aa <__ssvfiscanf_r+0x1b2>
 8015a1c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8015a1e:	3201      	adds	r2, #1
 8015a20:	9247      	str	r2, [sp, #284]	; 0x11c
 8015a22:	6862      	ldr	r2, [r4, #4]
 8015a24:	3a01      	subs	r2, #1
 8015a26:	2a00      	cmp	r2, #0
 8015a28:	6062      	str	r2, [r4, #4]
 8015a2a:	dd0a      	ble.n	8015a42 <__ssvfiscanf_r+0x24a>
 8015a2c:	3301      	adds	r3, #1
 8015a2e:	6023      	str	r3, [r4, #0]
 8015a30:	f000 fcb4 	bl	801639c <__locale_ctype_ptr>
 8015a34:	6823      	ldr	r3, [r4, #0]
 8015a36:	781a      	ldrb	r2, [r3, #0]
 8015a38:	4410      	add	r0, r2
 8015a3a:	7842      	ldrb	r2, [r0, #1]
 8015a3c:	0712      	lsls	r2, r2, #28
 8015a3e:	d4ed      	bmi.n	8015a1c <__ssvfiscanf_r+0x224>
 8015a40:	e786      	b.n	8015950 <__ssvfiscanf_r+0x158>
 8015a42:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8015a44:	4621      	mov	r1, r4
 8015a46:	4630      	mov	r0, r6
 8015a48:	4798      	blx	r3
 8015a4a:	2800      	cmp	r0, #0
 8015a4c:	d0f0      	beq.n	8015a30 <__ssvfiscanf_r+0x238>
 8015a4e:	e7ac      	b.n	80159aa <__ssvfiscanf_r+0x1b2>
 8015a50:	2b04      	cmp	r3, #4
 8015a52:	dc06      	bgt.n	8015a62 <__ssvfiscanf_r+0x26a>
 8015a54:	ab01      	add	r3, sp, #4
 8015a56:	4622      	mov	r2, r4
 8015a58:	a943      	add	r1, sp, #268	; 0x10c
 8015a5a:	4630      	mov	r0, r6
 8015a5c:	f000 fa1a 	bl	8015e94 <_scanf_i>
 8015a60:	e77f      	b.n	8015962 <__ssvfiscanf_r+0x16a>
 8015a62:	4b0e      	ldr	r3, [pc, #56]	; (8015a9c <__ssvfiscanf_r+0x2a4>)
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	f43f af3c 	beq.w	80158e2 <__ssvfiscanf_r+0xea>
 8015a6a:	ab01      	add	r3, sp, #4
 8015a6c:	4622      	mov	r2, r4
 8015a6e:	a943      	add	r1, sp, #268	; 0x10c
 8015a70:	4630      	mov	r0, r6
 8015a72:	f3af 8000 	nop.w
 8015a76:	e774      	b.n	8015962 <__ssvfiscanf_r+0x16a>
 8015a78:	89a3      	ldrh	r3, [r4, #12]
 8015a7a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8015a7e:	bf18      	it	ne
 8015a80:	f04f 30ff 	movne.w	r0, #4294967295
 8015a84:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8015a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a8c:	9846      	ldr	r0, [sp, #280]	; 0x118
 8015a8e:	e7f9      	b.n	8015a84 <__ssvfiscanf_r+0x28c>
 8015a90:	08015745 	.word	0x08015745
 8015a94:	080157bf 	.word	0x080157bf
 8015a98:	08017d96 	.word	0x08017d96
 8015a9c:	00000000 	.word	0x00000000

08015aa0 <_printf_common>:
 8015aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015aa4:	4691      	mov	r9, r2
 8015aa6:	461f      	mov	r7, r3
 8015aa8:	688a      	ldr	r2, [r1, #8]
 8015aaa:	690b      	ldr	r3, [r1, #16]
 8015aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015ab0:	4293      	cmp	r3, r2
 8015ab2:	bfb8      	it	lt
 8015ab4:	4613      	movlt	r3, r2
 8015ab6:	f8c9 3000 	str.w	r3, [r9]
 8015aba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015abe:	4606      	mov	r6, r0
 8015ac0:	460c      	mov	r4, r1
 8015ac2:	b112      	cbz	r2, 8015aca <_printf_common+0x2a>
 8015ac4:	3301      	adds	r3, #1
 8015ac6:	f8c9 3000 	str.w	r3, [r9]
 8015aca:	6823      	ldr	r3, [r4, #0]
 8015acc:	0699      	lsls	r1, r3, #26
 8015ace:	bf42      	ittt	mi
 8015ad0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015ad4:	3302      	addmi	r3, #2
 8015ad6:	f8c9 3000 	strmi.w	r3, [r9]
 8015ada:	6825      	ldr	r5, [r4, #0]
 8015adc:	f015 0506 	ands.w	r5, r5, #6
 8015ae0:	d107      	bne.n	8015af2 <_printf_common+0x52>
 8015ae2:	f104 0a19 	add.w	sl, r4, #25
 8015ae6:	68e3      	ldr	r3, [r4, #12]
 8015ae8:	f8d9 2000 	ldr.w	r2, [r9]
 8015aec:	1a9b      	subs	r3, r3, r2
 8015aee:	429d      	cmp	r5, r3
 8015af0:	db29      	blt.n	8015b46 <_printf_common+0xa6>
 8015af2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015af6:	6822      	ldr	r2, [r4, #0]
 8015af8:	3300      	adds	r3, #0
 8015afa:	bf18      	it	ne
 8015afc:	2301      	movne	r3, #1
 8015afe:	0692      	lsls	r2, r2, #26
 8015b00:	d42e      	bmi.n	8015b60 <_printf_common+0xc0>
 8015b02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015b06:	4639      	mov	r1, r7
 8015b08:	4630      	mov	r0, r6
 8015b0a:	47c0      	blx	r8
 8015b0c:	3001      	adds	r0, #1
 8015b0e:	d021      	beq.n	8015b54 <_printf_common+0xb4>
 8015b10:	6823      	ldr	r3, [r4, #0]
 8015b12:	68e5      	ldr	r5, [r4, #12]
 8015b14:	f8d9 2000 	ldr.w	r2, [r9]
 8015b18:	f003 0306 	and.w	r3, r3, #6
 8015b1c:	2b04      	cmp	r3, #4
 8015b1e:	bf08      	it	eq
 8015b20:	1aad      	subeq	r5, r5, r2
 8015b22:	68a3      	ldr	r3, [r4, #8]
 8015b24:	6922      	ldr	r2, [r4, #16]
 8015b26:	bf0c      	ite	eq
 8015b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015b2c:	2500      	movne	r5, #0
 8015b2e:	4293      	cmp	r3, r2
 8015b30:	bfc4      	itt	gt
 8015b32:	1a9b      	subgt	r3, r3, r2
 8015b34:	18ed      	addgt	r5, r5, r3
 8015b36:	f04f 0900 	mov.w	r9, #0
 8015b3a:	341a      	adds	r4, #26
 8015b3c:	454d      	cmp	r5, r9
 8015b3e:	d11b      	bne.n	8015b78 <_printf_common+0xd8>
 8015b40:	2000      	movs	r0, #0
 8015b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b46:	2301      	movs	r3, #1
 8015b48:	4652      	mov	r2, sl
 8015b4a:	4639      	mov	r1, r7
 8015b4c:	4630      	mov	r0, r6
 8015b4e:	47c0      	blx	r8
 8015b50:	3001      	adds	r0, #1
 8015b52:	d103      	bne.n	8015b5c <_printf_common+0xbc>
 8015b54:	f04f 30ff 	mov.w	r0, #4294967295
 8015b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b5c:	3501      	adds	r5, #1
 8015b5e:	e7c2      	b.n	8015ae6 <_printf_common+0x46>
 8015b60:	18e1      	adds	r1, r4, r3
 8015b62:	1c5a      	adds	r2, r3, #1
 8015b64:	2030      	movs	r0, #48	; 0x30
 8015b66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015b6a:	4422      	add	r2, r4
 8015b6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015b70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015b74:	3302      	adds	r3, #2
 8015b76:	e7c4      	b.n	8015b02 <_printf_common+0x62>
 8015b78:	2301      	movs	r3, #1
 8015b7a:	4622      	mov	r2, r4
 8015b7c:	4639      	mov	r1, r7
 8015b7e:	4630      	mov	r0, r6
 8015b80:	47c0      	blx	r8
 8015b82:	3001      	adds	r0, #1
 8015b84:	d0e6      	beq.n	8015b54 <_printf_common+0xb4>
 8015b86:	f109 0901 	add.w	r9, r9, #1
 8015b8a:	e7d7      	b.n	8015b3c <_printf_common+0x9c>

08015b8c <_printf_i>:
 8015b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b90:	4617      	mov	r7, r2
 8015b92:	7e0a      	ldrb	r2, [r1, #24]
 8015b94:	b085      	sub	sp, #20
 8015b96:	2a6e      	cmp	r2, #110	; 0x6e
 8015b98:	4698      	mov	r8, r3
 8015b9a:	4606      	mov	r6, r0
 8015b9c:	460c      	mov	r4, r1
 8015b9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ba0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8015ba4:	f000 80bc 	beq.w	8015d20 <_printf_i+0x194>
 8015ba8:	d81a      	bhi.n	8015be0 <_printf_i+0x54>
 8015baa:	2a63      	cmp	r2, #99	; 0x63
 8015bac:	d02e      	beq.n	8015c0c <_printf_i+0x80>
 8015bae:	d80a      	bhi.n	8015bc6 <_printf_i+0x3a>
 8015bb0:	2a00      	cmp	r2, #0
 8015bb2:	f000 80c8 	beq.w	8015d46 <_printf_i+0x1ba>
 8015bb6:	2a58      	cmp	r2, #88	; 0x58
 8015bb8:	f000 808a 	beq.w	8015cd0 <_printf_i+0x144>
 8015bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015bc0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8015bc4:	e02a      	b.n	8015c1c <_printf_i+0x90>
 8015bc6:	2a64      	cmp	r2, #100	; 0x64
 8015bc8:	d001      	beq.n	8015bce <_printf_i+0x42>
 8015bca:	2a69      	cmp	r2, #105	; 0x69
 8015bcc:	d1f6      	bne.n	8015bbc <_printf_i+0x30>
 8015bce:	6821      	ldr	r1, [r4, #0]
 8015bd0:	681a      	ldr	r2, [r3, #0]
 8015bd2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8015bd6:	d023      	beq.n	8015c20 <_printf_i+0x94>
 8015bd8:	1d11      	adds	r1, r2, #4
 8015bda:	6019      	str	r1, [r3, #0]
 8015bdc:	6813      	ldr	r3, [r2, #0]
 8015bde:	e027      	b.n	8015c30 <_printf_i+0xa4>
 8015be0:	2a73      	cmp	r2, #115	; 0x73
 8015be2:	f000 80b4 	beq.w	8015d4e <_printf_i+0x1c2>
 8015be6:	d808      	bhi.n	8015bfa <_printf_i+0x6e>
 8015be8:	2a6f      	cmp	r2, #111	; 0x6f
 8015bea:	d02a      	beq.n	8015c42 <_printf_i+0xb6>
 8015bec:	2a70      	cmp	r2, #112	; 0x70
 8015bee:	d1e5      	bne.n	8015bbc <_printf_i+0x30>
 8015bf0:	680a      	ldr	r2, [r1, #0]
 8015bf2:	f042 0220 	orr.w	r2, r2, #32
 8015bf6:	600a      	str	r2, [r1, #0]
 8015bf8:	e003      	b.n	8015c02 <_printf_i+0x76>
 8015bfa:	2a75      	cmp	r2, #117	; 0x75
 8015bfc:	d021      	beq.n	8015c42 <_printf_i+0xb6>
 8015bfe:	2a78      	cmp	r2, #120	; 0x78
 8015c00:	d1dc      	bne.n	8015bbc <_printf_i+0x30>
 8015c02:	2278      	movs	r2, #120	; 0x78
 8015c04:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8015c08:	496e      	ldr	r1, [pc, #440]	; (8015dc4 <_printf_i+0x238>)
 8015c0a:	e064      	b.n	8015cd6 <_printf_i+0x14a>
 8015c0c:	681a      	ldr	r2, [r3, #0]
 8015c0e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8015c12:	1d11      	adds	r1, r2, #4
 8015c14:	6019      	str	r1, [r3, #0]
 8015c16:	6813      	ldr	r3, [r2, #0]
 8015c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015c1c:	2301      	movs	r3, #1
 8015c1e:	e0a3      	b.n	8015d68 <_printf_i+0x1dc>
 8015c20:	f011 0f40 	tst.w	r1, #64	; 0x40
 8015c24:	f102 0104 	add.w	r1, r2, #4
 8015c28:	6019      	str	r1, [r3, #0]
 8015c2a:	d0d7      	beq.n	8015bdc <_printf_i+0x50>
 8015c2c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	da03      	bge.n	8015c3c <_printf_i+0xb0>
 8015c34:	222d      	movs	r2, #45	; 0x2d
 8015c36:	425b      	negs	r3, r3
 8015c38:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015c3c:	4962      	ldr	r1, [pc, #392]	; (8015dc8 <_printf_i+0x23c>)
 8015c3e:	220a      	movs	r2, #10
 8015c40:	e017      	b.n	8015c72 <_printf_i+0xe6>
 8015c42:	6820      	ldr	r0, [r4, #0]
 8015c44:	6819      	ldr	r1, [r3, #0]
 8015c46:	f010 0f80 	tst.w	r0, #128	; 0x80
 8015c4a:	d003      	beq.n	8015c54 <_printf_i+0xc8>
 8015c4c:	1d08      	adds	r0, r1, #4
 8015c4e:	6018      	str	r0, [r3, #0]
 8015c50:	680b      	ldr	r3, [r1, #0]
 8015c52:	e006      	b.n	8015c62 <_printf_i+0xd6>
 8015c54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015c58:	f101 0004 	add.w	r0, r1, #4
 8015c5c:	6018      	str	r0, [r3, #0]
 8015c5e:	d0f7      	beq.n	8015c50 <_printf_i+0xc4>
 8015c60:	880b      	ldrh	r3, [r1, #0]
 8015c62:	4959      	ldr	r1, [pc, #356]	; (8015dc8 <_printf_i+0x23c>)
 8015c64:	2a6f      	cmp	r2, #111	; 0x6f
 8015c66:	bf14      	ite	ne
 8015c68:	220a      	movne	r2, #10
 8015c6a:	2208      	moveq	r2, #8
 8015c6c:	2000      	movs	r0, #0
 8015c6e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8015c72:	6865      	ldr	r5, [r4, #4]
 8015c74:	60a5      	str	r5, [r4, #8]
 8015c76:	2d00      	cmp	r5, #0
 8015c78:	f2c0 809c 	blt.w	8015db4 <_printf_i+0x228>
 8015c7c:	6820      	ldr	r0, [r4, #0]
 8015c7e:	f020 0004 	bic.w	r0, r0, #4
 8015c82:	6020      	str	r0, [r4, #0]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d13f      	bne.n	8015d08 <_printf_i+0x17c>
 8015c88:	2d00      	cmp	r5, #0
 8015c8a:	f040 8095 	bne.w	8015db8 <_printf_i+0x22c>
 8015c8e:	4675      	mov	r5, lr
 8015c90:	2a08      	cmp	r2, #8
 8015c92:	d10b      	bne.n	8015cac <_printf_i+0x120>
 8015c94:	6823      	ldr	r3, [r4, #0]
 8015c96:	07da      	lsls	r2, r3, #31
 8015c98:	d508      	bpl.n	8015cac <_printf_i+0x120>
 8015c9a:	6923      	ldr	r3, [r4, #16]
 8015c9c:	6862      	ldr	r2, [r4, #4]
 8015c9e:	429a      	cmp	r2, r3
 8015ca0:	bfde      	ittt	le
 8015ca2:	2330      	movle	r3, #48	; 0x30
 8015ca4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015ca8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015cac:	ebae 0305 	sub.w	r3, lr, r5
 8015cb0:	6123      	str	r3, [r4, #16]
 8015cb2:	f8cd 8000 	str.w	r8, [sp]
 8015cb6:	463b      	mov	r3, r7
 8015cb8:	aa03      	add	r2, sp, #12
 8015cba:	4621      	mov	r1, r4
 8015cbc:	4630      	mov	r0, r6
 8015cbe:	f7ff feef 	bl	8015aa0 <_printf_common>
 8015cc2:	3001      	adds	r0, #1
 8015cc4:	d155      	bne.n	8015d72 <_printf_i+0x1e6>
 8015cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8015cca:	b005      	add	sp, #20
 8015ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015cd0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8015cd4:	493c      	ldr	r1, [pc, #240]	; (8015dc8 <_printf_i+0x23c>)
 8015cd6:	6822      	ldr	r2, [r4, #0]
 8015cd8:	6818      	ldr	r0, [r3, #0]
 8015cda:	f012 0f80 	tst.w	r2, #128	; 0x80
 8015cde:	f100 0504 	add.w	r5, r0, #4
 8015ce2:	601d      	str	r5, [r3, #0]
 8015ce4:	d001      	beq.n	8015cea <_printf_i+0x15e>
 8015ce6:	6803      	ldr	r3, [r0, #0]
 8015ce8:	e002      	b.n	8015cf0 <_printf_i+0x164>
 8015cea:	0655      	lsls	r5, r2, #25
 8015cec:	d5fb      	bpl.n	8015ce6 <_printf_i+0x15a>
 8015cee:	8803      	ldrh	r3, [r0, #0]
 8015cf0:	07d0      	lsls	r0, r2, #31
 8015cf2:	bf44      	itt	mi
 8015cf4:	f042 0220 	orrmi.w	r2, r2, #32
 8015cf8:	6022      	strmi	r2, [r4, #0]
 8015cfa:	b91b      	cbnz	r3, 8015d04 <_printf_i+0x178>
 8015cfc:	6822      	ldr	r2, [r4, #0]
 8015cfe:	f022 0220 	bic.w	r2, r2, #32
 8015d02:	6022      	str	r2, [r4, #0]
 8015d04:	2210      	movs	r2, #16
 8015d06:	e7b1      	b.n	8015c6c <_printf_i+0xe0>
 8015d08:	4675      	mov	r5, lr
 8015d0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8015d0e:	fb02 3310 	mls	r3, r2, r0, r3
 8015d12:	5ccb      	ldrb	r3, [r1, r3]
 8015d14:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015d18:	4603      	mov	r3, r0
 8015d1a:	2800      	cmp	r0, #0
 8015d1c:	d1f5      	bne.n	8015d0a <_printf_i+0x17e>
 8015d1e:	e7b7      	b.n	8015c90 <_printf_i+0x104>
 8015d20:	6808      	ldr	r0, [r1, #0]
 8015d22:	681a      	ldr	r2, [r3, #0]
 8015d24:	6949      	ldr	r1, [r1, #20]
 8015d26:	f010 0f80 	tst.w	r0, #128	; 0x80
 8015d2a:	d004      	beq.n	8015d36 <_printf_i+0x1aa>
 8015d2c:	1d10      	adds	r0, r2, #4
 8015d2e:	6018      	str	r0, [r3, #0]
 8015d30:	6813      	ldr	r3, [r2, #0]
 8015d32:	6019      	str	r1, [r3, #0]
 8015d34:	e007      	b.n	8015d46 <_printf_i+0x1ba>
 8015d36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015d3a:	f102 0004 	add.w	r0, r2, #4
 8015d3e:	6018      	str	r0, [r3, #0]
 8015d40:	6813      	ldr	r3, [r2, #0]
 8015d42:	d0f6      	beq.n	8015d32 <_printf_i+0x1a6>
 8015d44:	8019      	strh	r1, [r3, #0]
 8015d46:	2300      	movs	r3, #0
 8015d48:	6123      	str	r3, [r4, #16]
 8015d4a:	4675      	mov	r5, lr
 8015d4c:	e7b1      	b.n	8015cb2 <_printf_i+0x126>
 8015d4e:	681a      	ldr	r2, [r3, #0]
 8015d50:	1d11      	adds	r1, r2, #4
 8015d52:	6019      	str	r1, [r3, #0]
 8015d54:	6815      	ldr	r5, [r2, #0]
 8015d56:	6862      	ldr	r2, [r4, #4]
 8015d58:	2100      	movs	r1, #0
 8015d5a:	4628      	mov	r0, r5
 8015d5c:	f7ea fa40 	bl	80001e0 <memchr>
 8015d60:	b108      	cbz	r0, 8015d66 <_printf_i+0x1da>
 8015d62:	1b40      	subs	r0, r0, r5
 8015d64:	6060      	str	r0, [r4, #4]
 8015d66:	6863      	ldr	r3, [r4, #4]
 8015d68:	6123      	str	r3, [r4, #16]
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d70:	e79f      	b.n	8015cb2 <_printf_i+0x126>
 8015d72:	6923      	ldr	r3, [r4, #16]
 8015d74:	462a      	mov	r2, r5
 8015d76:	4639      	mov	r1, r7
 8015d78:	4630      	mov	r0, r6
 8015d7a:	47c0      	blx	r8
 8015d7c:	3001      	adds	r0, #1
 8015d7e:	d0a2      	beq.n	8015cc6 <_printf_i+0x13a>
 8015d80:	6823      	ldr	r3, [r4, #0]
 8015d82:	079b      	lsls	r3, r3, #30
 8015d84:	d507      	bpl.n	8015d96 <_printf_i+0x20a>
 8015d86:	2500      	movs	r5, #0
 8015d88:	f104 0919 	add.w	r9, r4, #25
 8015d8c:	68e3      	ldr	r3, [r4, #12]
 8015d8e:	9a03      	ldr	r2, [sp, #12]
 8015d90:	1a9b      	subs	r3, r3, r2
 8015d92:	429d      	cmp	r5, r3
 8015d94:	db05      	blt.n	8015da2 <_printf_i+0x216>
 8015d96:	68e0      	ldr	r0, [r4, #12]
 8015d98:	9b03      	ldr	r3, [sp, #12]
 8015d9a:	4298      	cmp	r0, r3
 8015d9c:	bfb8      	it	lt
 8015d9e:	4618      	movlt	r0, r3
 8015da0:	e793      	b.n	8015cca <_printf_i+0x13e>
 8015da2:	2301      	movs	r3, #1
 8015da4:	464a      	mov	r2, r9
 8015da6:	4639      	mov	r1, r7
 8015da8:	4630      	mov	r0, r6
 8015daa:	47c0      	blx	r8
 8015dac:	3001      	adds	r0, #1
 8015dae:	d08a      	beq.n	8015cc6 <_printf_i+0x13a>
 8015db0:	3501      	adds	r5, #1
 8015db2:	e7eb      	b.n	8015d8c <_printf_i+0x200>
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d1a7      	bne.n	8015d08 <_printf_i+0x17c>
 8015db8:	780b      	ldrb	r3, [r1, #0]
 8015dba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015dbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015dc2:	e765      	b.n	8015c90 <_printf_i+0x104>
 8015dc4:	08017db2 	.word	0x08017db2
 8015dc8:	08017da1 	.word	0x08017da1

08015dcc <_scanf_chars>:
 8015dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dd0:	4615      	mov	r5, r2
 8015dd2:	688a      	ldr	r2, [r1, #8]
 8015dd4:	4680      	mov	r8, r0
 8015dd6:	460c      	mov	r4, r1
 8015dd8:	b932      	cbnz	r2, 8015de8 <_scanf_chars+0x1c>
 8015dda:	698a      	ldr	r2, [r1, #24]
 8015ddc:	2a00      	cmp	r2, #0
 8015dde:	bf0c      	ite	eq
 8015de0:	2201      	moveq	r2, #1
 8015de2:	f04f 32ff 	movne.w	r2, #4294967295
 8015de6:	608a      	str	r2, [r1, #8]
 8015de8:	6822      	ldr	r2, [r4, #0]
 8015dea:	06d1      	lsls	r1, r2, #27
 8015dec:	bf5f      	itttt	pl
 8015dee:	681a      	ldrpl	r2, [r3, #0]
 8015df0:	1d11      	addpl	r1, r2, #4
 8015df2:	6019      	strpl	r1, [r3, #0]
 8015df4:	6817      	ldrpl	r7, [r2, #0]
 8015df6:	2600      	movs	r6, #0
 8015df8:	69a3      	ldr	r3, [r4, #24]
 8015dfa:	b1db      	cbz	r3, 8015e34 <_scanf_chars+0x68>
 8015dfc:	2b01      	cmp	r3, #1
 8015dfe:	d107      	bne.n	8015e10 <_scanf_chars+0x44>
 8015e00:	682b      	ldr	r3, [r5, #0]
 8015e02:	6962      	ldr	r2, [r4, #20]
 8015e04:	781b      	ldrb	r3, [r3, #0]
 8015e06:	5cd3      	ldrb	r3, [r2, r3]
 8015e08:	b9a3      	cbnz	r3, 8015e34 <_scanf_chars+0x68>
 8015e0a:	2e00      	cmp	r6, #0
 8015e0c:	d132      	bne.n	8015e74 <_scanf_chars+0xa8>
 8015e0e:	e006      	b.n	8015e1e <_scanf_chars+0x52>
 8015e10:	2b02      	cmp	r3, #2
 8015e12:	d007      	beq.n	8015e24 <_scanf_chars+0x58>
 8015e14:	2e00      	cmp	r6, #0
 8015e16:	d12d      	bne.n	8015e74 <_scanf_chars+0xa8>
 8015e18:	69a3      	ldr	r3, [r4, #24]
 8015e1a:	2b01      	cmp	r3, #1
 8015e1c:	d12a      	bne.n	8015e74 <_scanf_chars+0xa8>
 8015e1e:	2001      	movs	r0, #1
 8015e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e24:	f000 faba 	bl	801639c <__locale_ctype_ptr>
 8015e28:	682b      	ldr	r3, [r5, #0]
 8015e2a:	781b      	ldrb	r3, [r3, #0]
 8015e2c:	4418      	add	r0, r3
 8015e2e:	7843      	ldrb	r3, [r0, #1]
 8015e30:	071b      	lsls	r3, r3, #28
 8015e32:	d4ef      	bmi.n	8015e14 <_scanf_chars+0x48>
 8015e34:	6823      	ldr	r3, [r4, #0]
 8015e36:	06da      	lsls	r2, r3, #27
 8015e38:	bf5e      	ittt	pl
 8015e3a:	682b      	ldrpl	r3, [r5, #0]
 8015e3c:	781b      	ldrbpl	r3, [r3, #0]
 8015e3e:	703b      	strbpl	r3, [r7, #0]
 8015e40:	682a      	ldr	r2, [r5, #0]
 8015e42:	686b      	ldr	r3, [r5, #4]
 8015e44:	f102 0201 	add.w	r2, r2, #1
 8015e48:	602a      	str	r2, [r5, #0]
 8015e4a:	68a2      	ldr	r2, [r4, #8]
 8015e4c:	f103 33ff 	add.w	r3, r3, #4294967295
 8015e50:	f102 32ff 	add.w	r2, r2, #4294967295
 8015e54:	606b      	str	r3, [r5, #4]
 8015e56:	f106 0601 	add.w	r6, r6, #1
 8015e5a:	bf58      	it	pl
 8015e5c:	3701      	addpl	r7, #1
 8015e5e:	60a2      	str	r2, [r4, #8]
 8015e60:	b142      	cbz	r2, 8015e74 <_scanf_chars+0xa8>
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	dcc8      	bgt.n	8015df8 <_scanf_chars+0x2c>
 8015e66:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015e6a:	4629      	mov	r1, r5
 8015e6c:	4640      	mov	r0, r8
 8015e6e:	4798      	blx	r3
 8015e70:	2800      	cmp	r0, #0
 8015e72:	d0c1      	beq.n	8015df8 <_scanf_chars+0x2c>
 8015e74:	6823      	ldr	r3, [r4, #0]
 8015e76:	f013 0310 	ands.w	r3, r3, #16
 8015e7a:	d105      	bne.n	8015e88 <_scanf_chars+0xbc>
 8015e7c:	68e2      	ldr	r2, [r4, #12]
 8015e7e:	3201      	adds	r2, #1
 8015e80:	60e2      	str	r2, [r4, #12]
 8015e82:	69a2      	ldr	r2, [r4, #24]
 8015e84:	b102      	cbz	r2, 8015e88 <_scanf_chars+0xbc>
 8015e86:	703b      	strb	r3, [r7, #0]
 8015e88:	6923      	ldr	r3, [r4, #16]
 8015e8a:	441e      	add	r6, r3
 8015e8c:	6126      	str	r6, [r4, #16]
 8015e8e:	2000      	movs	r0, #0
 8015e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015e94 <_scanf_i>:
 8015e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e98:	469a      	mov	sl, r3
 8015e9a:	4b74      	ldr	r3, [pc, #464]	; (801606c <_scanf_i+0x1d8>)
 8015e9c:	460c      	mov	r4, r1
 8015e9e:	4683      	mov	fp, r0
 8015ea0:	4616      	mov	r6, r2
 8015ea2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015ea6:	b087      	sub	sp, #28
 8015ea8:	ab03      	add	r3, sp, #12
 8015eaa:	68a7      	ldr	r7, [r4, #8]
 8015eac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015eb0:	4b6f      	ldr	r3, [pc, #444]	; (8016070 <_scanf_i+0x1dc>)
 8015eb2:	69a1      	ldr	r1, [r4, #24]
 8015eb4:	4a6f      	ldr	r2, [pc, #444]	; (8016074 <_scanf_i+0x1e0>)
 8015eb6:	2903      	cmp	r1, #3
 8015eb8:	bf18      	it	ne
 8015eba:	461a      	movne	r2, r3
 8015ebc:	1e7b      	subs	r3, r7, #1
 8015ebe:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8015ec2:	bf84      	itt	hi
 8015ec4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015ec8:	60a3      	strhi	r3, [r4, #8]
 8015eca:	6823      	ldr	r3, [r4, #0]
 8015ecc:	9200      	str	r2, [sp, #0]
 8015ece:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8015ed2:	bf88      	it	hi
 8015ed4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015ed8:	f104 091c 	add.w	r9, r4, #28
 8015edc:	6023      	str	r3, [r4, #0]
 8015ede:	bf8c      	ite	hi
 8015ee0:	197f      	addhi	r7, r7, r5
 8015ee2:	2700      	movls	r7, #0
 8015ee4:	464b      	mov	r3, r9
 8015ee6:	f04f 0800 	mov.w	r8, #0
 8015eea:	9301      	str	r3, [sp, #4]
 8015eec:	6831      	ldr	r1, [r6, #0]
 8015eee:	ab03      	add	r3, sp, #12
 8015ef0:	2202      	movs	r2, #2
 8015ef2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8015ef6:	7809      	ldrb	r1, [r1, #0]
 8015ef8:	f7ea f972 	bl	80001e0 <memchr>
 8015efc:	9b01      	ldr	r3, [sp, #4]
 8015efe:	b328      	cbz	r0, 8015f4c <_scanf_i+0xb8>
 8015f00:	f1b8 0f01 	cmp.w	r8, #1
 8015f04:	d156      	bne.n	8015fb4 <_scanf_i+0x120>
 8015f06:	6862      	ldr	r2, [r4, #4]
 8015f08:	b92a      	cbnz	r2, 8015f16 <_scanf_i+0x82>
 8015f0a:	2208      	movs	r2, #8
 8015f0c:	6062      	str	r2, [r4, #4]
 8015f0e:	6822      	ldr	r2, [r4, #0]
 8015f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015f14:	6022      	str	r2, [r4, #0]
 8015f16:	6822      	ldr	r2, [r4, #0]
 8015f18:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8015f1c:	6022      	str	r2, [r4, #0]
 8015f1e:	68a2      	ldr	r2, [r4, #8]
 8015f20:	1e51      	subs	r1, r2, #1
 8015f22:	60a1      	str	r1, [r4, #8]
 8015f24:	b192      	cbz	r2, 8015f4c <_scanf_i+0xb8>
 8015f26:	6832      	ldr	r2, [r6, #0]
 8015f28:	1c51      	adds	r1, r2, #1
 8015f2a:	6031      	str	r1, [r6, #0]
 8015f2c:	7812      	ldrb	r2, [r2, #0]
 8015f2e:	701a      	strb	r2, [r3, #0]
 8015f30:	1c5d      	adds	r5, r3, #1
 8015f32:	6873      	ldr	r3, [r6, #4]
 8015f34:	3b01      	subs	r3, #1
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	6073      	str	r3, [r6, #4]
 8015f3a:	dc06      	bgt.n	8015f4a <_scanf_i+0xb6>
 8015f3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015f40:	4631      	mov	r1, r6
 8015f42:	4658      	mov	r0, fp
 8015f44:	4798      	blx	r3
 8015f46:	2800      	cmp	r0, #0
 8015f48:	d176      	bne.n	8016038 <_scanf_i+0x1a4>
 8015f4a:	462b      	mov	r3, r5
 8015f4c:	f108 0801 	add.w	r8, r8, #1
 8015f50:	f1b8 0f03 	cmp.w	r8, #3
 8015f54:	d1c9      	bne.n	8015eea <_scanf_i+0x56>
 8015f56:	6862      	ldr	r2, [r4, #4]
 8015f58:	b90a      	cbnz	r2, 8015f5e <_scanf_i+0xca>
 8015f5a:	220a      	movs	r2, #10
 8015f5c:	6062      	str	r2, [r4, #4]
 8015f5e:	6862      	ldr	r2, [r4, #4]
 8015f60:	4945      	ldr	r1, [pc, #276]	; (8016078 <_scanf_i+0x1e4>)
 8015f62:	6960      	ldr	r0, [r4, #20]
 8015f64:	9301      	str	r3, [sp, #4]
 8015f66:	1a89      	subs	r1, r1, r2
 8015f68:	f000 f888 	bl	801607c <__sccl>
 8015f6c:	9b01      	ldr	r3, [sp, #4]
 8015f6e:	f04f 0800 	mov.w	r8, #0
 8015f72:	461d      	mov	r5, r3
 8015f74:	68a3      	ldr	r3, [r4, #8]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d038      	beq.n	8015fec <_scanf_i+0x158>
 8015f7a:	6831      	ldr	r1, [r6, #0]
 8015f7c:	6960      	ldr	r0, [r4, #20]
 8015f7e:	780a      	ldrb	r2, [r1, #0]
 8015f80:	5c80      	ldrb	r0, [r0, r2]
 8015f82:	2800      	cmp	r0, #0
 8015f84:	d032      	beq.n	8015fec <_scanf_i+0x158>
 8015f86:	2a30      	cmp	r2, #48	; 0x30
 8015f88:	6822      	ldr	r2, [r4, #0]
 8015f8a:	d121      	bne.n	8015fd0 <_scanf_i+0x13c>
 8015f8c:	0510      	lsls	r0, r2, #20
 8015f8e:	d51f      	bpl.n	8015fd0 <_scanf_i+0x13c>
 8015f90:	f108 0801 	add.w	r8, r8, #1
 8015f94:	b117      	cbz	r7, 8015f9c <_scanf_i+0x108>
 8015f96:	3301      	adds	r3, #1
 8015f98:	3f01      	subs	r7, #1
 8015f9a:	60a3      	str	r3, [r4, #8]
 8015f9c:	6873      	ldr	r3, [r6, #4]
 8015f9e:	3b01      	subs	r3, #1
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	6073      	str	r3, [r6, #4]
 8015fa4:	dd1b      	ble.n	8015fde <_scanf_i+0x14a>
 8015fa6:	6833      	ldr	r3, [r6, #0]
 8015fa8:	3301      	adds	r3, #1
 8015faa:	6033      	str	r3, [r6, #0]
 8015fac:	68a3      	ldr	r3, [r4, #8]
 8015fae:	3b01      	subs	r3, #1
 8015fb0:	60a3      	str	r3, [r4, #8]
 8015fb2:	e7df      	b.n	8015f74 <_scanf_i+0xe0>
 8015fb4:	f1b8 0f02 	cmp.w	r8, #2
 8015fb8:	d1b1      	bne.n	8015f1e <_scanf_i+0x8a>
 8015fba:	6822      	ldr	r2, [r4, #0]
 8015fbc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8015fc0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8015fc4:	d1c2      	bne.n	8015f4c <_scanf_i+0xb8>
 8015fc6:	2110      	movs	r1, #16
 8015fc8:	6061      	str	r1, [r4, #4]
 8015fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015fce:	e7a5      	b.n	8015f1c <_scanf_i+0x88>
 8015fd0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8015fd4:	6022      	str	r2, [r4, #0]
 8015fd6:	780b      	ldrb	r3, [r1, #0]
 8015fd8:	702b      	strb	r3, [r5, #0]
 8015fda:	3501      	adds	r5, #1
 8015fdc:	e7de      	b.n	8015f9c <_scanf_i+0x108>
 8015fde:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015fe2:	4631      	mov	r1, r6
 8015fe4:	4658      	mov	r0, fp
 8015fe6:	4798      	blx	r3
 8015fe8:	2800      	cmp	r0, #0
 8015fea:	d0df      	beq.n	8015fac <_scanf_i+0x118>
 8015fec:	6823      	ldr	r3, [r4, #0]
 8015fee:	05d9      	lsls	r1, r3, #23
 8015ff0:	d50c      	bpl.n	801600c <_scanf_i+0x178>
 8015ff2:	454d      	cmp	r5, r9
 8015ff4:	d908      	bls.n	8016008 <_scanf_i+0x174>
 8015ff6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015ffa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ffe:	4632      	mov	r2, r6
 8016000:	4658      	mov	r0, fp
 8016002:	4798      	blx	r3
 8016004:	1e6f      	subs	r7, r5, #1
 8016006:	463d      	mov	r5, r7
 8016008:	454d      	cmp	r5, r9
 801600a:	d02c      	beq.n	8016066 <_scanf_i+0x1d2>
 801600c:	6822      	ldr	r2, [r4, #0]
 801600e:	f012 0210 	ands.w	r2, r2, #16
 8016012:	d11e      	bne.n	8016052 <_scanf_i+0x1be>
 8016014:	702a      	strb	r2, [r5, #0]
 8016016:	6863      	ldr	r3, [r4, #4]
 8016018:	9e00      	ldr	r6, [sp, #0]
 801601a:	4649      	mov	r1, r9
 801601c:	4658      	mov	r0, fp
 801601e:	47b0      	blx	r6
 8016020:	6822      	ldr	r2, [r4, #0]
 8016022:	f8da 3000 	ldr.w	r3, [sl]
 8016026:	f012 0f20 	tst.w	r2, #32
 801602a:	d008      	beq.n	801603e <_scanf_i+0x1aa>
 801602c:	1d1a      	adds	r2, r3, #4
 801602e:	f8ca 2000 	str.w	r2, [sl]
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	6018      	str	r0, [r3, #0]
 8016036:	e009      	b.n	801604c <_scanf_i+0x1b8>
 8016038:	f04f 0800 	mov.w	r8, #0
 801603c:	e7d6      	b.n	8015fec <_scanf_i+0x158>
 801603e:	07d2      	lsls	r2, r2, #31
 8016040:	d5f4      	bpl.n	801602c <_scanf_i+0x198>
 8016042:	1d1a      	adds	r2, r3, #4
 8016044:	f8ca 2000 	str.w	r2, [sl]
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	8018      	strh	r0, [r3, #0]
 801604c:	68e3      	ldr	r3, [r4, #12]
 801604e:	3301      	adds	r3, #1
 8016050:	60e3      	str	r3, [r4, #12]
 8016052:	eba5 0509 	sub.w	r5, r5, r9
 8016056:	44a8      	add	r8, r5
 8016058:	6925      	ldr	r5, [r4, #16]
 801605a:	4445      	add	r5, r8
 801605c:	6125      	str	r5, [r4, #16]
 801605e:	2000      	movs	r0, #0
 8016060:	b007      	add	sp, #28
 8016062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016066:	2001      	movs	r0, #1
 8016068:	e7fa      	b.n	8016060 <_scanf_i+0x1cc>
 801606a:	bf00      	nop
 801606c:	08017c90 	.word	0x08017c90
 8016070:	080162fd 	.word	0x080162fd
 8016074:	080161dd 	.word	0x080161dd
 8016078:	08017dd3 	.word	0x08017dd3

0801607c <__sccl>:
 801607c:	b570      	push	{r4, r5, r6, lr}
 801607e:	780b      	ldrb	r3, [r1, #0]
 8016080:	2b5e      	cmp	r3, #94	; 0x5e
 8016082:	bf13      	iteet	ne
 8016084:	1c4a      	addne	r2, r1, #1
 8016086:	1c8a      	addeq	r2, r1, #2
 8016088:	784b      	ldrbeq	r3, [r1, #1]
 801608a:	2100      	movne	r1, #0
 801608c:	bf08      	it	eq
 801608e:	2101      	moveq	r1, #1
 8016090:	1e44      	subs	r4, r0, #1
 8016092:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8016096:	f804 1f01 	strb.w	r1, [r4, #1]!
 801609a:	42a5      	cmp	r5, r4
 801609c:	d1fb      	bne.n	8016096 <__sccl+0x1a>
 801609e:	b913      	cbnz	r3, 80160a6 <__sccl+0x2a>
 80160a0:	3a01      	subs	r2, #1
 80160a2:	4610      	mov	r0, r2
 80160a4:	bd70      	pop	{r4, r5, r6, pc}
 80160a6:	f081 0401 	eor.w	r4, r1, #1
 80160aa:	54c4      	strb	r4, [r0, r3]
 80160ac:	4611      	mov	r1, r2
 80160ae:	780d      	ldrb	r5, [r1, #0]
 80160b0:	2d2d      	cmp	r5, #45	; 0x2d
 80160b2:	f101 0201 	add.w	r2, r1, #1
 80160b6:	d006      	beq.n	80160c6 <__sccl+0x4a>
 80160b8:	2d5d      	cmp	r5, #93	; 0x5d
 80160ba:	d0f2      	beq.n	80160a2 <__sccl+0x26>
 80160bc:	b90d      	cbnz	r5, 80160c2 <__sccl+0x46>
 80160be:	460a      	mov	r2, r1
 80160c0:	e7ef      	b.n	80160a2 <__sccl+0x26>
 80160c2:	462b      	mov	r3, r5
 80160c4:	e7f1      	b.n	80160aa <__sccl+0x2e>
 80160c6:	784e      	ldrb	r6, [r1, #1]
 80160c8:	2e5d      	cmp	r6, #93	; 0x5d
 80160ca:	d0fa      	beq.n	80160c2 <__sccl+0x46>
 80160cc:	42b3      	cmp	r3, r6
 80160ce:	dcf8      	bgt.n	80160c2 <__sccl+0x46>
 80160d0:	3102      	adds	r1, #2
 80160d2:	3301      	adds	r3, #1
 80160d4:	429e      	cmp	r6, r3
 80160d6:	54c4      	strb	r4, [r0, r3]
 80160d8:	dcfb      	bgt.n	80160d2 <__sccl+0x56>
 80160da:	e7e8      	b.n	80160ae <__sccl+0x32>

080160dc <_strtol_l.isra.0>:
 80160dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160e0:	4680      	mov	r8, r0
 80160e2:	4689      	mov	r9, r1
 80160e4:	4692      	mov	sl, r2
 80160e6:	461f      	mov	r7, r3
 80160e8:	468b      	mov	fp, r1
 80160ea:	465d      	mov	r5, fp
 80160ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80160ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80160f2:	f000 f950 	bl	8016396 <__locale_ctype_ptr_l>
 80160f6:	4420      	add	r0, r4
 80160f8:	7846      	ldrb	r6, [r0, #1]
 80160fa:	f016 0608 	ands.w	r6, r6, #8
 80160fe:	d10b      	bne.n	8016118 <_strtol_l.isra.0+0x3c>
 8016100:	2c2d      	cmp	r4, #45	; 0x2d
 8016102:	d10b      	bne.n	801611c <_strtol_l.isra.0+0x40>
 8016104:	782c      	ldrb	r4, [r5, #0]
 8016106:	2601      	movs	r6, #1
 8016108:	f10b 0502 	add.w	r5, fp, #2
 801610c:	b167      	cbz	r7, 8016128 <_strtol_l.isra.0+0x4c>
 801610e:	2f10      	cmp	r7, #16
 8016110:	d114      	bne.n	801613c <_strtol_l.isra.0+0x60>
 8016112:	2c30      	cmp	r4, #48	; 0x30
 8016114:	d00a      	beq.n	801612c <_strtol_l.isra.0+0x50>
 8016116:	e011      	b.n	801613c <_strtol_l.isra.0+0x60>
 8016118:	46ab      	mov	fp, r5
 801611a:	e7e6      	b.n	80160ea <_strtol_l.isra.0+0xe>
 801611c:	2c2b      	cmp	r4, #43	; 0x2b
 801611e:	bf04      	itt	eq
 8016120:	782c      	ldrbeq	r4, [r5, #0]
 8016122:	f10b 0502 	addeq.w	r5, fp, #2
 8016126:	e7f1      	b.n	801610c <_strtol_l.isra.0+0x30>
 8016128:	2c30      	cmp	r4, #48	; 0x30
 801612a:	d127      	bne.n	801617c <_strtol_l.isra.0+0xa0>
 801612c:	782b      	ldrb	r3, [r5, #0]
 801612e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016132:	2b58      	cmp	r3, #88	; 0x58
 8016134:	d14b      	bne.n	80161ce <_strtol_l.isra.0+0xf2>
 8016136:	786c      	ldrb	r4, [r5, #1]
 8016138:	2710      	movs	r7, #16
 801613a:	3502      	adds	r5, #2
 801613c:	2e00      	cmp	r6, #0
 801613e:	bf0c      	ite	eq
 8016140:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016144:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016148:	2200      	movs	r2, #0
 801614a:	fbb1 fef7 	udiv	lr, r1, r7
 801614e:	4610      	mov	r0, r2
 8016150:	fb07 1c1e 	mls	ip, r7, lr, r1
 8016154:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016158:	2b09      	cmp	r3, #9
 801615a:	d811      	bhi.n	8016180 <_strtol_l.isra.0+0xa4>
 801615c:	461c      	mov	r4, r3
 801615e:	42a7      	cmp	r7, r4
 8016160:	dd1d      	ble.n	801619e <_strtol_l.isra.0+0xc2>
 8016162:	1c53      	adds	r3, r2, #1
 8016164:	d007      	beq.n	8016176 <_strtol_l.isra.0+0x9a>
 8016166:	4586      	cmp	lr, r0
 8016168:	d316      	bcc.n	8016198 <_strtol_l.isra.0+0xbc>
 801616a:	d101      	bne.n	8016170 <_strtol_l.isra.0+0x94>
 801616c:	45a4      	cmp	ip, r4
 801616e:	db13      	blt.n	8016198 <_strtol_l.isra.0+0xbc>
 8016170:	fb00 4007 	mla	r0, r0, r7, r4
 8016174:	2201      	movs	r2, #1
 8016176:	f815 4b01 	ldrb.w	r4, [r5], #1
 801617a:	e7eb      	b.n	8016154 <_strtol_l.isra.0+0x78>
 801617c:	270a      	movs	r7, #10
 801617e:	e7dd      	b.n	801613c <_strtol_l.isra.0+0x60>
 8016180:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016184:	2b19      	cmp	r3, #25
 8016186:	d801      	bhi.n	801618c <_strtol_l.isra.0+0xb0>
 8016188:	3c37      	subs	r4, #55	; 0x37
 801618a:	e7e8      	b.n	801615e <_strtol_l.isra.0+0x82>
 801618c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016190:	2b19      	cmp	r3, #25
 8016192:	d804      	bhi.n	801619e <_strtol_l.isra.0+0xc2>
 8016194:	3c57      	subs	r4, #87	; 0x57
 8016196:	e7e2      	b.n	801615e <_strtol_l.isra.0+0x82>
 8016198:	f04f 32ff 	mov.w	r2, #4294967295
 801619c:	e7eb      	b.n	8016176 <_strtol_l.isra.0+0x9a>
 801619e:	1c53      	adds	r3, r2, #1
 80161a0:	d108      	bne.n	80161b4 <_strtol_l.isra.0+0xd8>
 80161a2:	2322      	movs	r3, #34	; 0x22
 80161a4:	f8c8 3000 	str.w	r3, [r8]
 80161a8:	4608      	mov	r0, r1
 80161aa:	f1ba 0f00 	cmp.w	sl, #0
 80161ae:	d107      	bne.n	80161c0 <_strtol_l.isra.0+0xe4>
 80161b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161b4:	b106      	cbz	r6, 80161b8 <_strtol_l.isra.0+0xdc>
 80161b6:	4240      	negs	r0, r0
 80161b8:	f1ba 0f00 	cmp.w	sl, #0
 80161bc:	d00c      	beq.n	80161d8 <_strtol_l.isra.0+0xfc>
 80161be:	b122      	cbz	r2, 80161ca <_strtol_l.isra.0+0xee>
 80161c0:	3d01      	subs	r5, #1
 80161c2:	f8ca 5000 	str.w	r5, [sl]
 80161c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161ca:	464d      	mov	r5, r9
 80161cc:	e7f9      	b.n	80161c2 <_strtol_l.isra.0+0xe6>
 80161ce:	2430      	movs	r4, #48	; 0x30
 80161d0:	2f00      	cmp	r7, #0
 80161d2:	d1b3      	bne.n	801613c <_strtol_l.isra.0+0x60>
 80161d4:	2708      	movs	r7, #8
 80161d6:	e7b1      	b.n	801613c <_strtol_l.isra.0+0x60>
 80161d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080161dc <_strtol_r>:
 80161dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80161de:	4c06      	ldr	r4, [pc, #24]	; (80161f8 <_strtol_r+0x1c>)
 80161e0:	4d06      	ldr	r5, [pc, #24]	; (80161fc <_strtol_r+0x20>)
 80161e2:	6824      	ldr	r4, [r4, #0]
 80161e4:	6a24      	ldr	r4, [r4, #32]
 80161e6:	2c00      	cmp	r4, #0
 80161e8:	bf08      	it	eq
 80161ea:	462c      	moveq	r4, r5
 80161ec:	9400      	str	r4, [sp, #0]
 80161ee:	f7ff ff75 	bl	80160dc <_strtol_l.isra.0>
 80161f2:	b003      	add	sp, #12
 80161f4:	bd30      	pop	{r4, r5, pc}
 80161f6:	bf00      	nop
 80161f8:	200002a8 	.word	0x200002a8
 80161fc:	2000030c 	.word	0x2000030c

08016200 <_strtoul_l.isra.0>:
 8016200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016204:	4680      	mov	r8, r0
 8016206:	4689      	mov	r9, r1
 8016208:	4692      	mov	sl, r2
 801620a:	461e      	mov	r6, r3
 801620c:	460f      	mov	r7, r1
 801620e:	463d      	mov	r5, r7
 8016210:	9808      	ldr	r0, [sp, #32]
 8016212:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016216:	f000 f8be 	bl	8016396 <__locale_ctype_ptr_l>
 801621a:	4420      	add	r0, r4
 801621c:	7843      	ldrb	r3, [r0, #1]
 801621e:	f013 0308 	ands.w	r3, r3, #8
 8016222:	d10a      	bne.n	801623a <_strtoul_l.isra.0+0x3a>
 8016224:	2c2d      	cmp	r4, #45	; 0x2d
 8016226:	d10a      	bne.n	801623e <_strtoul_l.isra.0+0x3e>
 8016228:	782c      	ldrb	r4, [r5, #0]
 801622a:	2301      	movs	r3, #1
 801622c:	1cbd      	adds	r5, r7, #2
 801622e:	b15e      	cbz	r6, 8016248 <_strtoul_l.isra.0+0x48>
 8016230:	2e10      	cmp	r6, #16
 8016232:	d113      	bne.n	801625c <_strtoul_l.isra.0+0x5c>
 8016234:	2c30      	cmp	r4, #48	; 0x30
 8016236:	d009      	beq.n	801624c <_strtoul_l.isra.0+0x4c>
 8016238:	e010      	b.n	801625c <_strtoul_l.isra.0+0x5c>
 801623a:	462f      	mov	r7, r5
 801623c:	e7e7      	b.n	801620e <_strtoul_l.isra.0+0xe>
 801623e:	2c2b      	cmp	r4, #43	; 0x2b
 8016240:	bf04      	itt	eq
 8016242:	782c      	ldrbeq	r4, [r5, #0]
 8016244:	1cbd      	addeq	r5, r7, #2
 8016246:	e7f2      	b.n	801622e <_strtoul_l.isra.0+0x2e>
 8016248:	2c30      	cmp	r4, #48	; 0x30
 801624a:	d125      	bne.n	8016298 <_strtoul_l.isra.0+0x98>
 801624c:	782a      	ldrb	r2, [r5, #0]
 801624e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8016252:	2a58      	cmp	r2, #88	; 0x58
 8016254:	d14a      	bne.n	80162ec <_strtoul_l.isra.0+0xec>
 8016256:	786c      	ldrb	r4, [r5, #1]
 8016258:	2610      	movs	r6, #16
 801625a:	3502      	adds	r5, #2
 801625c:	f04f 31ff 	mov.w	r1, #4294967295
 8016260:	2700      	movs	r7, #0
 8016262:	fbb1 f1f6 	udiv	r1, r1, r6
 8016266:	fb06 fe01 	mul.w	lr, r6, r1
 801626a:	ea6f 0e0e 	mvn.w	lr, lr
 801626e:	4638      	mov	r0, r7
 8016270:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8016274:	2a09      	cmp	r2, #9
 8016276:	d811      	bhi.n	801629c <_strtoul_l.isra.0+0x9c>
 8016278:	4614      	mov	r4, r2
 801627a:	42a6      	cmp	r6, r4
 801627c:	dd1d      	ble.n	80162ba <_strtoul_l.isra.0+0xba>
 801627e:	2f00      	cmp	r7, #0
 8016280:	db18      	blt.n	80162b4 <_strtoul_l.isra.0+0xb4>
 8016282:	4281      	cmp	r1, r0
 8016284:	d316      	bcc.n	80162b4 <_strtoul_l.isra.0+0xb4>
 8016286:	d101      	bne.n	801628c <_strtoul_l.isra.0+0x8c>
 8016288:	45a6      	cmp	lr, r4
 801628a:	db13      	blt.n	80162b4 <_strtoul_l.isra.0+0xb4>
 801628c:	fb00 4006 	mla	r0, r0, r6, r4
 8016290:	2701      	movs	r7, #1
 8016292:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016296:	e7eb      	b.n	8016270 <_strtoul_l.isra.0+0x70>
 8016298:	260a      	movs	r6, #10
 801629a:	e7df      	b.n	801625c <_strtoul_l.isra.0+0x5c>
 801629c:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 80162a0:	2a19      	cmp	r2, #25
 80162a2:	d801      	bhi.n	80162a8 <_strtoul_l.isra.0+0xa8>
 80162a4:	3c37      	subs	r4, #55	; 0x37
 80162a6:	e7e8      	b.n	801627a <_strtoul_l.isra.0+0x7a>
 80162a8:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 80162ac:	2a19      	cmp	r2, #25
 80162ae:	d804      	bhi.n	80162ba <_strtoul_l.isra.0+0xba>
 80162b0:	3c57      	subs	r4, #87	; 0x57
 80162b2:	e7e2      	b.n	801627a <_strtoul_l.isra.0+0x7a>
 80162b4:	f04f 37ff 	mov.w	r7, #4294967295
 80162b8:	e7eb      	b.n	8016292 <_strtoul_l.isra.0+0x92>
 80162ba:	2f00      	cmp	r7, #0
 80162bc:	da09      	bge.n	80162d2 <_strtoul_l.isra.0+0xd2>
 80162be:	2322      	movs	r3, #34	; 0x22
 80162c0:	f8c8 3000 	str.w	r3, [r8]
 80162c4:	f04f 30ff 	mov.w	r0, #4294967295
 80162c8:	f1ba 0f00 	cmp.w	sl, #0
 80162cc:	d107      	bne.n	80162de <_strtoul_l.isra.0+0xde>
 80162ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162d2:	b103      	cbz	r3, 80162d6 <_strtoul_l.isra.0+0xd6>
 80162d4:	4240      	negs	r0, r0
 80162d6:	f1ba 0f00 	cmp.w	sl, #0
 80162da:	d00c      	beq.n	80162f6 <_strtoul_l.isra.0+0xf6>
 80162dc:	b127      	cbz	r7, 80162e8 <_strtoul_l.isra.0+0xe8>
 80162de:	3d01      	subs	r5, #1
 80162e0:	f8ca 5000 	str.w	r5, [sl]
 80162e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162e8:	464d      	mov	r5, r9
 80162ea:	e7f9      	b.n	80162e0 <_strtoul_l.isra.0+0xe0>
 80162ec:	2430      	movs	r4, #48	; 0x30
 80162ee:	2e00      	cmp	r6, #0
 80162f0:	d1b4      	bne.n	801625c <_strtoul_l.isra.0+0x5c>
 80162f2:	2608      	movs	r6, #8
 80162f4:	e7b2      	b.n	801625c <_strtoul_l.isra.0+0x5c>
 80162f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080162fc <_strtoul_r>:
 80162fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80162fe:	4c06      	ldr	r4, [pc, #24]	; (8016318 <_strtoul_r+0x1c>)
 8016300:	4d06      	ldr	r5, [pc, #24]	; (801631c <_strtoul_r+0x20>)
 8016302:	6824      	ldr	r4, [r4, #0]
 8016304:	6a24      	ldr	r4, [r4, #32]
 8016306:	2c00      	cmp	r4, #0
 8016308:	bf08      	it	eq
 801630a:	462c      	moveq	r4, r5
 801630c:	9400      	str	r4, [sp, #0]
 801630e:	f7ff ff77 	bl	8016200 <_strtoul_l.isra.0>
 8016312:	b003      	add	sp, #12
 8016314:	bd30      	pop	{r4, r5, pc}
 8016316:	bf00      	nop
 8016318:	200002a8 	.word	0x200002a8
 801631c:	2000030c 	.word	0x2000030c

08016320 <__submore>:
 8016320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016324:	460c      	mov	r4, r1
 8016326:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016328:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801632c:	4299      	cmp	r1, r3
 801632e:	d11e      	bne.n	801636e <__submore+0x4e>
 8016330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016334:	f7fe ffdc 	bl	80152f0 <_malloc_r>
 8016338:	b918      	cbnz	r0, 8016342 <__submore+0x22>
 801633a:	f04f 30ff 	mov.w	r0, #4294967295
 801633e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016346:	63a3      	str	r3, [r4, #56]	; 0x38
 8016348:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801634c:	6360      	str	r0, [r4, #52]	; 0x34
 801634e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016352:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016356:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801635a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801635e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016362:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016366:	6020      	str	r0, [r4, #0]
 8016368:	2000      	movs	r0, #0
 801636a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801636e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016370:	0077      	lsls	r7, r6, #1
 8016372:	463a      	mov	r2, r7
 8016374:	f000 f84c 	bl	8016410 <_realloc_r>
 8016378:	4605      	mov	r5, r0
 801637a:	2800      	cmp	r0, #0
 801637c:	d0dd      	beq.n	801633a <__submore+0x1a>
 801637e:	eb00 0806 	add.w	r8, r0, r6
 8016382:	4601      	mov	r1, r0
 8016384:	4632      	mov	r2, r6
 8016386:	4640      	mov	r0, r8
 8016388:	f7fe ff50 	bl	801522c <memcpy>
 801638c:	f8c4 8000 	str.w	r8, [r4]
 8016390:	6365      	str	r5, [r4, #52]	; 0x34
 8016392:	63a7      	str	r7, [r4, #56]	; 0x38
 8016394:	e7e8      	b.n	8016368 <__submore+0x48>

08016396 <__locale_ctype_ptr_l>:
 8016396:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801639a:	4770      	bx	lr

0801639c <__locale_ctype_ptr>:
 801639c:	4b04      	ldr	r3, [pc, #16]	; (80163b0 <__locale_ctype_ptr+0x14>)
 801639e:	4a05      	ldr	r2, [pc, #20]	; (80163b4 <__locale_ctype_ptr+0x18>)
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	6a1b      	ldr	r3, [r3, #32]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	bf08      	it	eq
 80163a8:	4613      	moveq	r3, r2
 80163aa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80163ae:	4770      	bx	lr
 80163b0:	200002a8 	.word	0x200002a8
 80163b4:	2000030c 	.word	0x2000030c

080163b8 <__ascii_mbtowc>:
 80163b8:	b082      	sub	sp, #8
 80163ba:	b901      	cbnz	r1, 80163be <__ascii_mbtowc+0x6>
 80163bc:	a901      	add	r1, sp, #4
 80163be:	b142      	cbz	r2, 80163d2 <__ascii_mbtowc+0x1a>
 80163c0:	b14b      	cbz	r3, 80163d6 <__ascii_mbtowc+0x1e>
 80163c2:	7813      	ldrb	r3, [r2, #0]
 80163c4:	600b      	str	r3, [r1, #0]
 80163c6:	7812      	ldrb	r2, [r2, #0]
 80163c8:	1c10      	adds	r0, r2, #0
 80163ca:	bf18      	it	ne
 80163cc:	2001      	movne	r0, #1
 80163ce:	b002      	add	sp, #8
 80163d0:	4770      	bx	lr
 80163d2:	4610      	mov	r0, r2
 80163d4:	e7fb      	b.n	80163ce <__ascii_mbtowc+0x16>
 80163d6:	f06f 0001 	mvn.w	r0, #1
 80163da:	e7f8      	b.n	80163ce <__ascii_mbtowc+0x16>

080163dc <memmove>:
 80163dc:	4288      	cmp	r0, r1
 80163de:	b510      	push	{r4, lr}
 80163e0:	eb01 0302 	add.w	r3, r1, r2
 80163e4:	d803      	bhi.n	80163ee <memmove+0x12>
 80163e6:	1e42      	subs	r2, r0, #1
 80163e8:	4299      	cmp	r1, r3
 80163ea:	d10c      	bne.n	8016406 <memmove+0x2a>
 80163ec:	bd10      	pop	{r4, pc}
 80163ee:	4298      	cmp	r0, r3
 80163f0:	d2f9      	bcs.n	80163e6 <memmove+0xa>
 80163f2:	1881      	adds	r1, r0, r2
 80163f4:	1ad2      	subs	r2, r2, r3
 80163f6:	42d3      	cmn	r3, r2
 80163f8:	d100      	bne.n	80163fc <memmove+0x20>
 80163fa:	bd10      	pop	{r4, pc}
 80163fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016400:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016404:	e7f7      	b.n	80163f6 <memmove+0x1a>
 8016406:	f811 4b01 	ldrb.w	r4, [r1], #1
 801640a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801640e:	e7eb      	b.n	80163e8 <memmove+0xc>

08016410 <_realloc_r>:
 8016410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016412:	4607      	mov	r7, r0
 8016414:	4614      	mov	r4, r2
 8016416:	460e      	mov	r6, r1
 8016418:	b921      	cbnz	r1, 8016424 <_realloc_r+0x14>
 801641a:	4611      	mov	r1, r2
 801641c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016420:	f7fe bf66 	b.w	80152f0 <_malloc_r>
 8016424:	b922      	cbnz	r2, 8016430 <_realloc_r+0x20>
 8016426:	f7fe ff15 	bl	8015254 <_free_r>
 801642a:	4625      	mov	r5, r4
 801642c:	4628      	mov	r0, r5
 801642e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016430:	f000 f821 	bl	8016476 <_malloc_usable_size_r>
 8016434:	4284      	cmp	r4, r0
 8016436:	d90f      	bls.n	8016458 <_realloc_r+0x48>
 8016438:	4621      	mov	r1, r4
 801643a:	4638      	mov	r0, r7
 801643c:	f7fe ff58 	bl	80152f0 <_malloc_r>
 8016440:	4605      	mov	r5, r0
 8016442:	2800      	cmp	r0, #0
 8016444:	d0f2      	beq.n	801642c <_realloc_r+0x1c>
 8016446:	4631      	mov	r1, r6
 8016448:	4622      	mov	r2, r4
 801644a:	f7fe feef 	bl	801522c <memcpy>
 801644e:	4631      	mov	r1, r6
 8016450:	4638      	mov	r0, r7
 8016452:	f7fe feff 	bl	8015254 <_free_r>
 8016456:	e7e9      	b.n	801642c <_realloc_r+0x1c>
 8016458:	4635      	mov	r5, r6
 801645a:	e7e7      	b.n	801642c <_realloc_r+0x1c>

0801645c <__ascii_wctomb>:
 801645c:	b149      	cbz	r1, 8016472 <__ascii_wctomb+0x16>
 801645e:	2aff      	cmp	r2, #255	; 0xff
 8016460:	bf85      	ittet	hi
 8016462:	238a      	movhi	r3, #138	; 0x8a
 8016464:	6003      	strhi	r3, [r0, #0]
 8016466:	700a      	strbls	r2, [r1, #0]
 8016468:	f04f 30ff 	movhi.w	r0, #4294967295
 801646c:	bf98      	it	ls
 801646e:	2001      	movls	r0, #1
 8016470:	4770      	bx	lr
 8016472:	4608      	mov	r0, r1
 8016474:	4770      	bx	lr

08016476 <_malloc_usable_size_r>:
 8016476:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801647a:	2800      	cmp	r0, #0
 801647c:	f1a0 0004 	sub.w	r0, r0, #4
 8016480:	bfbc      	itt	lt
 8016482:	580b      	ldrlt	r3, [r1, r0]
 8016484:	18c0      	addlt	r0, r0, r3
 8016486:	4770      	bx	lr

08016488 <atan>:
 8016488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801648c:	ec55 4b10 	vmov	r4, r5, d0
 8016490:	4bc7      	ldr	r3, [pc, #796]	; (80167b0 <atan+0x328>)
 8016492:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016496:	429e      	cmp	r6, r3
 8016498:	46ab      	mov	fp, r5
 801649a:	dd18      	ble.n	80164ce <atan+0x46>
 801649c:	4ac5      	ldr	r2, [pc, #788]	; (80167b4 <atan+0x32c>)
 801649e:	4296      	cmp	r6, r2
 80164a0:	dc01      	bgt.n	80164a6 <atan+0x1e>
 80164a2:	d109      	bne.n	80164b8 <atan+0x30>
 80164a4:	b144      	cbz	r4, 80164b8 <atan+0x30>
 80164a6:	4622      	mov	r2, r4
 80164a8:	462b      	mov	r3, r5
 80164aa:	4620      	mov	r0, r4
 80164ac:	4629      	mov	r1, r5
 80164ae:	f7e9 feed 	bl	800028c <__adddf3>
 80164b2:	4604      	mov	r4, r0
 80164b4:	460d      	mov	r5, r1
 80164b6:	e006      	b.n	80164c6 <atan+0x3e>
 80164b8:	f1bb 0f00 	cmp.w	fp, #0
 80164bc:	f300 813a 	bgt.w	8016734 <atan+0x2ac>
 80164c0:	a59f      	add	r5, pc, #636	; (adr r5, 8016740 <atan+0x2b8>)
 80164c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80164c6:	ec45 4b10 	vmov	d0, r4, r5
 80164ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164ce:	4bba      	ldr	r3, [pc, #744]	; (80167b8 <atan+0x330>)
 80164d0:	429e      	cmp	r6, r3
 80164d2:	dc14      	bgt.n	80164fe <atan+0x76>
 80164d4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80164d8:	429e      	cmp	r6, r3
 80164da:	dc0d      	bgt.n	80164f8 <atan+0x70>
 80164dc:	a39a      	add	r3, pc, #616	; (adr r3, 8016748 <atan+0x2c0>)
 80164de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164e2:	ee10 0a10 	vmov	r0, s0
 80164e6:	4629      	mov	r1, r5
 80164e8:	f7e9 fed0 	bl	800028c <__adddf3>
 80164ec:	2200      	movs	r2, #0
 80164ee:	4bb3      	ldr	r3, [pc, #716]	; (80167bc <atan+0x334>)
 80164f0:	f7ea fb0e 	bl	8000b10 <__aeabi_dcmpgt>
 80164f4:	2800      	cmp	r0, #0
 80164f6:	d1e6      	bne.n	80164c6 <atan+0x3e>
 80164f8:	f04f 3aff 	mov.w	sl, #4294967295
 80164fc:	e02b      	b.n	8016556 <atan+0xce>
 80164fe:	f000 f96b 	bl	80167d8 <fabs>
 8016502:	4baf      	ldr	r3, [pc, #700]	; (80167c0 <atan+0x338>)
 8016504:	429e      	cmp	r6, r3
 8016506:	ec55 4b10 	vmov	r4, r5, d0
 801650a:	f300 80bf 	bgt.w	801668c <atan+0x204>
 801650e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8016512:	429e      	cmp	r6, r3
 8016514:	f300 80a0 	bgt.w	8016658 <atan+0x1d0>
 8016518:	ee10 2a10 	vmov	r2, s0
 801651c:	ee10 0a10 	vmov	r0, s0
 8016520:	462b      	mov	r3, r5
 8016522:	4629      	mov	r1, r5
 8016524:	f7e9 feb2 	bl	800028c <__adddf3>
 8016528:	2200      	movs	r2, #0
 801652a:	4ba4      	ldr	r3, [pc, #656]	; (80167bc <atan+0x334>)
 801652c:	f7e9 feac 	bl	8000288 <__aeabi_dsub>
 8016530:	2200      	movs	r2, #0
 8016532:	4606      	mov	r6, r0
 8016534:	460f      	mov	r7, r1
 8016536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801653a:	4620      	mov	r0, r4
 801653c:	4629      	mov	r1, r5
 801653e:	f7e9 fea5 	bl	800028c <__adddf3>
 8016542:	4602      	mov	r2, r0
 8016544:	460b      	mov	r3, r1
 8016546:	4630      	mov	r0, r6
 8016548:	4639      	mov	r1, r7
 801654a:	f7ea f97b 	bl	8000844 <__aeabi_ddiv>
 801654e:	f04f 0a00 	mov.w	sl, #0
 8016552:	4604      	mov	r4, r0
 8016554:	460d      	mov	r5, r1
 8016556:	4622      	mov	r2, r4
 8016558:	462b      	mov	r3, r5
 801655a:	4620      	mov	r0, r4
 801655c:	4629      	mov	r1, r5
 801655e:	f7ea f847 	bl	80005f0 <__aeabi_dmul>
 8016562:	4602      	mov	r2, r0
 8016564:	460b      	mov	r3, r1
 8016566:	4680      	mov	r8, r0
 8016568:	4689      	mov	r9, r1
 801656a:	f7ea f841 	bl	80005f0 <__aeabi_dmul>
 801656e:	a378      	add	r3, pc, #480	; (adr r3, 8016750 <atan+0x2c8>)
 8016570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016574:	4606      	mov	r6, r0
 8016576:	460f      	mov	r7, r1
 8016578:	f7ea f83a 	bl	80005f0 <__aeabi_dmul>
 801657c:	a376      	add	r3, pc, #472	; (adr r3, 8016758 <atan+0x2d0>)
 801657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016582:	f7e9 fe83 	bl	800028c <__adddf3>
 8016586:	4632      	mov	r2, r6
 8016588:	463b      	mov	r3, r7
 801658a:	f7ea f831 	bl	80005f0 <__aeabi_dmul>
 801658e:	a374      	add	r3, pc, #464	; (adr r3, 8016760 <atan+0x2d8>)
 8016590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016594:	f7e9 fe7a 	bl	800028c <__adddf3>
 8016598:	4632      	mov	r2, r6
 801659a:	463b      	mov	r3, r7
 801659c:	f7ea f828 	bl	80005f0 <__aeabi_dmul>
 80165a0:	a371      	add	r3, pc, #452	; (adr r3, 8016768 <atan+0x2e0>)
 80165a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165a6:	f7e9 fe71 	bl	800028c <__adddf3>
 80165aa:	4632      	mov	r2, r6
 80165ac:	463b      	mov	r3, r7
 80165ae:	f7ea f81f 	bl	80005f0 <__aeabi_dmul>
 80165b2:	a36f      	add	r3, pc, #444	; (adr r3, 8016770 <atan+0x2e8>)
 80165b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165b8:	f7e9 fe68 	bl	800028c <__adddf3>
 80165bc:	4632      	mov	r2, r6
 80165be:	463b      	mov	r3, r7
 80165c0:	f7ea f816 	bl	80005f0 <__aeabi_dmul>
 80165c4:	a36c      	add	r3, pc, #432	; (adr r3, 8016778 <atan+0x2f0>)
 80165c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165ca:	f7e9 fe5f 	bl	800028c <__adddf3>
 80165ce:	4642      	mov	r2, r8
 80165d0:	464b      	mov	r3, r9
 80165d2:	f7ea f80d 	bl	80005f0 <__aeabi_dmul>
 80165d6:	a36a      	add	r3, pc, #424	; (adr r3, 8016780 <atan+0x2f8>)
 80165d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165dc:	4680      	mov	r8, r0
 80165de:	4689      	mov	r9, r1
 80165e0:	4630      	mov	r0, r6
 80165e2:	4639      	mov	r1, r7
 80165e4:	f7ea f804 	bl	80005f0 <__aeabi_dmul>
 80165e8:	a367      	add	r3, pc, #412	; (adr r3, 8016788 <atan+0x300>)
 80165ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165ee:	f7e9 fe4b 	bl	8000288 <__aeabi_dsub>
 80165f2:	4632      	mov	r2, r6
 80165f4:	463b      	mov	r3, r7
 80165f6:	f7e9 fffb 	bl	80005f0 <__aeabi_dmul>
 80165fa:	a365      	add	r3, pc, #404	; (adr r3, 8016790 <atan+0x308>)
 80165fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016600:	f7e9 fe42 	bl	8000288 <__aeabi_dsub>
 8016604:	4632      	mov	r2, r6
 8016606:	463b      	mov	r3, r7
 8016608:	f7e9 fff2 	bl	80005f0 <__aeabi_dmul>
 801660c:	a362      	add	r3, pc, #392	; (adr r3, 8016798 <atan+0x310>)
 801660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016612:	f7e9 fe39 	bl	8000288 <__aeabi_dsub>
 8016616:	4632      	mov	r2, r6
 8016618:	463b      	mov	r3, r7
 801661a:	f7e9 ffe9 	bl	80005f0 <__aeabi_dmul>
 801661e:	a360      	add	r3, pc, #384	; (adr r3, 80167a0 <atan+0x318>)
 8016620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016624:	f7e9 fe30 	bl	8000288 <__aeabi_dsub>
 8016628:	4632      	mov	r2, r6
 801662a:	463b      	mov	r3, r7
 801662c:	f7e9 ffe0 	bl	80005f0 <__aeabi_dmul>
 8016630:	f1ba 3fff 	cmp.w	sl, #4294967295
 8016634:	4602      	mov	r2, r0
 8016636:	460b      	mov	r3, r1
 8016638:	d155      	bne.n	80166e6 <atan+0x25e>
 801663a:	4640      	mov	r0, r8
 801663c:	4649      	mov	r1, r9
 801663e:	f7e9 fe25 	bl	800028c <__adddf3>
 8016642:	4622      	mov	r2, r4
 8016644:	462b      	mov	r3, r5
 8016646:	f7e9 ffd3 	bl	80005f0 <__aeabi_dmul>
 801664a:	4602      	mov	r2, r0
 801664c:	460b      	mov	r3, r1
 801664e:	4620      	mov	r0, r4
 8016650:	4629      	mov	r1, r5
 8016652:	f7e9 fe19 	bl	8000288 <__aeabi_dsub>
 8016656:	e72c      	b.n	80164b2 <atan+0x2a>
 8016658:	ee10 0a10 	vmov	r0, s0
 801665c:	2200      	movs	r2, #0
 801665e:	4b57      	ldr	r3, [pc, #348]	; (80167bc <atan+0x334>)
 8016660:	4629      	mov	r1, r5
 8016662:	f7e9 fe11 	bl	8000288 <__aeabi_dsub>
 8016666:	2200      	movs	r2, #0
 8016668:	4606      	mov	r6, r0
 801666a:	460f      	mov	r7, r1
 801666c:	4b53      	ldr	r3, [pc, #332]	; (80167bc <atan+0x334>)
 801666e:	4620      	mov	r0, r4
 8016670:	4629      	mov	r1, r5
 8016672:	f7e9 fe0b 	bl	800028c <__adddf3>
 8016676:	4602      	mov	r2, r0
 8016678:	460b      	mov	r3, r1
 801667a:	4630      	mov	r0, r6
 801667c:	4639      	mov	r1, r7
 801667e:	f7ea f8e1 	bl	8000844 <__aeabi_ddiv>
 8016682:	f04f 0a01 	mov.w	sl, #1
 8016686:	4604      	mov	r4, r0
 8016688:	460d      	mov	r5, r1
 801668a:	e764      	b.n	8016556 <atan+0xce>
 801668c:	4b4d      	ldr	r3, [pc, #308]	; (80167c4 <atan+0x33c>)
 801668e:	429e      	cmp	r6, r3
 8016690:	dc1d      	bgt.n	80166ce <atan+0x246>
 8016692:	ee10 0a10 	vmov	r0, s0
 8016696:	2200      	movs	r2, #0
 8016698:	4b4b      	ldr	r3, [pc, #300]	; (80167c8 <atan+0x340>)
 801669a:	4629      	mov	r1, r5
 801669c:	f7e9 fdf4 	bl	8000288 <__aeabi_dsub>
 80166a0:	2200      	movs	r2, #0
 80166a2:	4606      	mov	r6, r0
 80166a4:	460f      	mov	r7, r1
 80166a6:	4b48      	ldr	r3, [pc, #288]	; (80167c8 <atan+0x340>)
 80166a8:	4620      	mov	r0, r4
 80166aa:	4629      	mov	r1, r5
 80166ac:	f7e9 ffa0 	bl	80005f0 <__aeabi_dmul>
 80166b0:	2200      	movs	r2, #0
 80166b2:	4b42      	ldr	r3, [pc, #264]	; (80167bc <atan+0x334>)
 80166b4:	f7e9 fdea 	bl	800028c <__adddf3>
 80166b8:	4602      	mov	r2, r0
 80166ba:	460b      	mov	r3, r1
 80166bc:	4630      	mov	r0, r6
 80166be:	4639      	mov	r1, r7
 80166c0:	f7ea f8c0 	bl	8000844 <__aeabi_ddiv>
 80166c4:	f04f 0a02 	mov.w	sl, #2
 80166c8:	4604      	mov	r4, r0
 80166ca:	460d      	mov	r5, r1
 80166cc:	e743      	b.n	8016556 <atan+0xce>
 80166ce:	462b      	mov	r3, r5
 80166d0:	ee10 2a10 	vmov	r2, s0
 80166d4:	2000      	movs	r0, #0
 80166d6:	493d      	ldr	r1, [pc, #244]	; (80167cc <atan+0x344>)
 80166d8:	f7ea f8b4 	bl	8000844 <__aeabi_ddiv>
 80166dc:	f04f 0a03 	mov.w	sl, #3
 80166e0:	4604      	mov	r4, r0
 80166e2:	460d      	mov	r5, r1
 80166e4:	e737      	b.n	8016556 <atan+0xce>
 80166e6:	4640      	mov	r0, r8
 80166e8:	4649      	mov	r1, r9
 80166ea:	f7e9 fdcf 	bl	800028c <__adddf3>
 80166ee:	4622      	mov	r2, r4
 80166f0:	462b      	mov	r3, r5
 80166f2:	f7e9 ff7d 	bl	80005f0 <__aeabi_dmul>
 80166f6:	4e36      	ldr	r6, [pc, #216]	; (80167d0 <atan+0x348>)
 80166f8:	4b36      	ldr	r3, [pc, #216]	; (80167d4 <atan+0x34c>)
 80166fa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80166fe:	4456      	add	r6, sl
 8016700:	449a      	add	sl, r3
 8016702:	e9da 2300 	ldrd	r2, r3, [sl]
 8016706:	f7e9 fdbf 	bl	8000288 <__aeabi_dsub>
 801670a:	4622      	mov	r2, r4
 801670c:	462b      	mov	r3, r5
 801670e:	f7e9 fdbb 	bl	8000288 <__aeabi_dsub>
 8016712:	4602      	mov	r2, r0
 8016714:	460b      	mov	r3, r1
 8016716:	e9d6 0100 	ldrd	r0, r1, [r6]
 801671a:	f7e9 fdb5 	bl	8000288 <__aeabi_dsub>
 801671e:	f1bb 0f00 	cmp.w	fp, #0
 8016722:	4604      	mov	r4, r0
 8016724:	460d      	mov	r5, r1
 8016726:	f6bf aece 	bge.w	80164c6 <atan+0x3e>
 801672a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801672e:	4604      	mov	r4, r0
 8016730:	461d      	mov	r5, r3
 8016732:	e6c8      	b.n	80164c6 <atan+0x3e>
 8016734:	a51c      	add	r5, pc, #112	; (adr r5, 80167a8 <atan+0x320>)
 8016736:	e9d5 4500 	ldrd	r4, r5, [r5]
 801673a:	e6c4      	b.n	80164c6 <atan+0x3e>
 801673c:	f3af 8000 	nop.w
 8016740:	54442d18 	.word	0x54442d18
 8016744:	bff921fb 	.word	0xbff921fb
 8016748:	8800759c 	.word	0x8800759c
 801674c:	7e37e43c 	.word	0x7e37e43c
 8016750:	e322da11 	.word	0xe322da11
 8016754:	3f90ad3a 	.word	0x3f90ad3a
 8016758:	24760deb 	.word	0x24760deb
 801675c:	3fa97b4b 	.word	0x3fa97b4b
 8016760:	a0d03d51 	.word	0xa0d03d51
 8016764:	3fb10d66 	.word	0x3fb10d66
 8016768:	c54c206e 	.word	0xc54c206e
 801676c:	3fb745cd 	.word	0x3fb745cd
 8016770:	920083ff 	.word	0x920083ff
 8016774:	3fc24924 	.word	0x3fc24924
 8016778:	5555550d 	.word	0x5555550d
 801677c:	3fd55555 	.word	0x3fd55555
 8016780:	2c6a6c2f 	.word	0x2c6a6c2f
 8016784:	bfa2b444 	.word	0xbfa2b444
 8016788:	52defd9a 	.word	0x52defd9a
 801678c:	3fadde2d 	.word	0x3fadde2d
 8016790:	af749a6d 	.word	0xaf749a6d
 8016794:	3fb3b0f2 	.word	0x3fb3b0f2
 8016798:	fe231671 	.word	0xfe231671
 801679c:	3fbc71c6 	.word	0x3fbc71c6
 80167a0:	9998ebc4 	.word	0x9998ebc4
 80167a4:	3fc99999 	.word	0x3fc99999
 80167a8:	54442d18 	.word	0x54442d18
 80167ac:	3ff921fb 	.word	0x3ff921fb
 80167b0:	440fffff 	.word	0x440fffff
 80167b4:	7ff00000 	.word	0x7ff00000
 80167b8:	3fdbffff 	.word	0x3fdbffff
 80167bc:	3ff00000 	.word	0x3ff00000
 80167c0:	3ff2ffff 	.word	0x3ff2ffff
 80167c4:	40037fff 	.word	0x40037fff
 80167c8:	3ff80000 	.word	0x3ff80000
 80167cc:	bff00000 	.word	0xbff00000
 80167d0:	08017f50 	.word	0x08017f50
 80167d4:	08017f70 	.word	0x08017f70

080167d8 <fabs>:
 80167d8:	ec53 2b10 	vmov	r2, r3, d0
 80167dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80167e0:	ec43 2b10 	vmov	d0, r2, r3
 80167e4:	4770      	bx	lr
	...

080167e8 <pow>:
 80167e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167ec:	ed2d 8b04 	vpush	{d8-d9}
 80167f0:	b08d      	sub	sp, #52	; 0x34
 80167f2:	ec57 6b10 	vmov	r6, r7, d0
 80167f6:	ec55 4b11 	vmov	r4, r5, d1
 80167fa:	f000 f9c9 	bl	8016b90 <__ieee754_pow>
 80167fe:	4bae      	ldr	r3, [pc, #696]	; (8016ab8 <pow+0x2d0>)
 8016800:	eeb0 8a40 	vmov.f32	s16, s0
 8016804:	eef0 8a60 	vmov.f32	s17, s1
 8016808:	f993 9000 	ldrsb.w	r9, [r3]
 801680c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8016810:	4698      	mov	r8, r3
 8016812:	d05f      	beq.n	80168d4 <pow+0xec>
 8016814:	4622      	mov	r2, r4
 8016816:	462b      	mov	r3, r5
 8016818:	4620      	mov	r0, r4
 801681a:	4629      	mov	r1, r5
 801681c:	f7ea f982 	bl	8000b24 <__aeabi_dcmpun>
 8016820:	4683      	mov	fp, r0
 8016822:	2800      	cmp	r0, #0
 8016824:	d156      	bne.n	80168d4 <pow+0xec>
 8016826:	4632      	mov	r2, r6
 8016828:	463b      	mov	r3, r7
 801682a:	4630      	mov	r0, r6
 801682c:	4639      	mov	r1, r7
 801682e:	f7ea f979 	bl	8000b24 <__aeabi_dcmpun>
 8016832:	9001      	str	r0, [sp, #4]
 8016834:	b1e8      	cbz	r0, 8016872 <pow+0x8a>
 8016836:	2200      	movs	r2, #0
 8016838:	2300      	movs	r3, #0
 801683a:	4620      	mov	r0, r4
 801683c:	4629      	mov	r1, r5
 801683e:	f7ea f93f 	bl	8000ac0 <__aeabi_dcmpeq>
 8016842:	2800      	cmp	r0, #0
 8016844:	d046      	beq.n	80168d4 <pow+0xec>
 8016846:	2301      	movs	r3, #1
 8016848:	9302      	str	r3, [sp, #8]
 801684a:	4b9c      	ldr	r3, [pc, #624]	; (8016abc <pow+0x2d4>)
 801684c:	9303      	str	r3, [sp, #12]
 801684e:	4b9c      	ldr	r3, [pc, #624]	; (8016ac0 <pow+0x2d8>)
 8016850:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8016854:	2200      	movs	r2, #0
 8016856:	f1b9 0f02 	cmp.w	r9, #2
 801685a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801685e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016862:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016866:	d033      	beq.n	80168d0 <pow+0xe8>
 8016868:	a802      	add	r0, sp, #8
 801686a:	f000 ff5b 	bl	8017724 <matherr>
 801686e:	bb48      	cbnz	r0, 80168c4 <pow+0xdc>
 8016870:	e05e      	b.n	8016930 <pow+0x148>
 8016872:	f04f 0a00 	mov.w	sl, #0
 8016876:	f04f 0b00 	mov.w	fp, #0
 801687a:	4652      	mov	r2, sl
 801687c:	465b      	mov	r3, fp
 801687e:	4630      	mov	r0, r6
 8016880:	4639      	mov	r1, r7
 8016882:	f7ea f91d 	bl	8000ac0 <__aeabi_dcmpeq>
 8016886:	ec4b ab19 	vmov	d9, sl, fp
 801688a:	2800      	cmp	r0, #0
 801688c:	d055      	beq.n	801693a <pow+0x152>
 801688e:	4652      	mov	r2, sl
 8016890:	465b      	mov	r3, fp
 8016892:	4620      	mov	r0, r4
 8016894:	4629      	mov	r1, r5
 8016896:	f7ea f913 	bl	8000ac0 <__aeabi_dcmpeq>
 801689a:	4680      	mov	r8, r0
 801689c:	b318      	cbz	r0, 80168e6 <pow+0xfe>
 801689e:	2301      	movs	r3, #1
 80168a0:	9302      	str	r3, [sp, #8]
 80168a2:	4b86      	ldr	r3, [pc, #536]	; (8016abc <pow+0x2d4>)
 80168a4:	9303      	str	r3, [sp, #12]
 80168a6:	9b01      	ldr	r3, [sp, #4]
 80168a8:	930a      	str	r3, [sp, #40]	; 0x28
 80168aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80168ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80168b2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80168b6:	f1b9 0f00 	cmp.w	r9, #0
 80168ba:	d0d5      	beq.n	8016868 <pow+0x80>
 80168bc:	4b80      	ldr	r3, [pc, #512]	; (8016ac0 <pow+0x2d8>)
 80168be:	2200      	movs	r2, #0
 80168c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80168c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168c6:	b11b      	cbz	r3, 80168d0 <pow+0xe8>
 80168c8:	f001 f846 	bl	8017958 <__errno>
 80168cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168ce:	6003      	str	r3, [r0, #0]
 80168d0:	ed9d 8b08 	vldr	d8, [sp, #32]
 80168d4:	eeb0 0a48 	vmov.f32	s0, s16
 80168d8:	eef0 0a68 	vmov.f32	s1, s17
 80168dc:	b00d      	add	sp, #52	; 0x34
 80168de:	ecbd 8b04 	vpop	{d8-d9}
 80168e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168e6:	ec45 4b10 	vmov	d0, r4, r5
 80168ea:	f000 ff13 	bl	8017714 <finite>
 80168ee:	2800      	cmp	r0, #0
 80168f0:	d0f0      	beq.n	80168d4 <pow+0xec>
 80168f2:	4652      	mov	r2, sl
 80168f4:	465b      	mov	r3, fp
 80168f6:	4620      	mov	r0, r4
 80168f8:	4629      	mov	r1, r5
 80168fa:	f7ea f8eb 	bl	8000ad4 <__aeabi_dcmplt>
 80168fe:	2800      	cmp	r0, #0
 8016900:	d0e8      	beq.n	80168d4 <pow+0xec>
 8016902:	2301      	movs	r3, #1
 8016904:	9302      	str	r3, [sp, #8]
 8016906:	4b6d      	ldr	r3, [pc, #436]	; (8016abc <pow+0x2d4>)
 8016908:	9303      	str	r3, [sp, #12]
 801690a:	4b6b      	ldr	r3, [pc, #428]	; (8016ab8 <pow+0x2d0>)
 801690c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8016910:	f993 3000 	ldrsb.w	r3, [r3]
 8016914:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016918:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801691c:	b913      	cbnz	r3, 8016924 <pow+0x13c>
 801691e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016922:	e7a1      	b.n	8016868 <pow+0x80>
 8016924:	4967      	ldr	r1, [pc, #412]	; (8016ac4 <pow+0x2dc>)
 8016926:	2000      	movs	r0, #0
 8016928:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801692c:	2b02      	cmp	r3, #2
 801692e:	d19b      	bne.n	8016868 <pow+0x80>
 8016930:	f001 f812 	bl	8017958 <__errno>
 8016934:	2321      	movs	r3, #33	; 0x21
 8016936:	6003      	str	r3, [r0, #0]
 8016938:	e7c4      	b.n	80168c4 <pow+0xdc>
 801693a:	eeb0 0a48 	vmov.f32	s0, s16
 801693e:	eef0 0a68 	vmov.f32	s1, s17
 8016942:	f000 fee7 	bl	8017714 <finite>
 8016946:	9001      	str	r0, [sp, #4]
 8016948:	2800      	cmp	r0, #0
 801694a:	f040 808a 	bne.w	8016a62 <pow+0x27a>
 801694e:	ec47 6b10 	vmov	d0, r6, r7
 8016952:	f000 fedf 	bl	8017714 <finite>
 8016956:	2800      	cmp	r0, #0
 8016958:	f000 8083 	beq.w	8016a62 <pow+0x27a>
 801695c:	ec45 4b10 	vmov	d0, r4, r5
 8016960:	f000 fed8 	bl	8017714 <finite>
 8016964:	2800      	cmp	r0, #0
 8016966:	d07c      	beq.n	8016a62 <pow+0x27a>
 8016968:	ec53 2b18 	vmov	r2, r3, d8
 801696c:	ee18 0a10 	vmov	r0, s16
 8016970:	4619      	mov	r1, r3
 8016972:	f7ea f8d7 	bl	8000b24 <__aeabi_dcmpun>
 8016976:	f998 9000 	ldrsb.w	r9, [r8]
 801697a:	4b50      	ldr	r3, [pc, #320]	; (8016abc <pow+0x2d4>)
 801697c:	b1b0      	cbz	r0, 80169ac <pow+0x1c4>
 801697e:	2201      	movs	r2, #1
 8016980:	9303      	str	r3, [sp, #12]
 8016982:	9b01      	ldr	r3, [sp, #4]
 8016984:	9202      	str	r2, [sp, #8]
 8016986:	930a      	str	r3, [sp, #40]	; 0x28
 8016988:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801698c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016990:	f1b9 0f00 	cmp.w	r9, #0
 8016994:	d0c3      	beq.n	801691e <pow+0x136>
 8016996:	4652      	mov	r2, sl
 8016998:	465b      	mov	r3, fp
 801699a:	4650      	mov	r0, sl
 801699c:	4659      	mov	r1, fp
 801699e:	f7e9 ff51 	bl	8000844 <__aeabi_ddiv>
 80169a2:	f1b9 0f02 	cmp.w	r9, #2
 80169a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80169aa:	e7c0      	b.n	801692e <pow+0x146>
 80169ac:	2203      	movs	r2, #3
 80169ae:	9202      	str	r2, [sp, #8]
 80169b0:	9303      	str	r3, [sp, #12]
 80169b2:	900a      	str	r0, [sp, #40]	; 0x28
 80169b4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80169b8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80169bc:	f1b9 0f00 	cmp.w	r9, #0
 80169c0:	d12c      	bne.n	8016a1c <pow+0x234>
 80169c2:	4b41      	ldr	r3, [pc, #260]	; (8016ac8 <pow+0x2e0>)
 80169c4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80169c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80169cc:	4630      	mov	r0, r6
 80169ce:	4652      	mov	r2, sl
 80169d0:	465b      	mov	r3, fp
 80169d2:	4639      	mov	r1, r7
 80169d4:	f7ea f87e 	bl	8000ad4 <__aeabi_dcmplt>
 80169d8:	2800      	cmp	r0, #0
 80169da:	d066      	beq.n	8016aaa <pow+0x2c2>
 80169dc:	2200      	movs	r2, #0
 80169de:	4b3b      	ldr	r3, [pc, #236]	; (8016acc <pow+0x2e4>)
 80169e0:	4620      	mov	r0, r4
 80169e2:	4629      	mov	r1, r5
 80169e4:	f7e9 fe04 	bl	80005f0 <__aeabi_dmul>
 80169e8:	4604      	mov	r4, r0
 80169ea:	460d      	mov	r5, r1
 80169ec:	ec45 4b10 	vmov	d0, r4, r5
 80169f0:	f000 fea2 	bl	8017738 <rint>
 80169f4:	4620      	mov	r0, r4
 80169f6:	ec53 2b10 	vmov	r2, r3, d0
 80169fa:	4629      	mov	r1, r5
 80169fc:	f7ea f860 	bl	8000ac0 <__aeabi_dcmpeq>
 8016a00:	b920      	cbnz	r0, 8016a0c <pow+0x224>
 8016a02:	4b33      	ldr	r3, [pc, #204]	; (8016ad0 <pow+0x2e8>)
 8016a04:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016a08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016a0c:	f998 3000 	ldrsb.w	r3, [r8]
 8016a10:	2b02      	cmp	r3, #2
 8016a12:	d14a      	bne.n	8016aaa <pow+0x2c2>
 8016a14:	f000 ffa0 	bl	8017958 <__errno>
 8016a18:	2322      	movs	r3, #34	; 0x22
 8016a1a:	e78c      	b.n	8016936 <pow+0x14e>
 8016a1c:	4b2d      	ldr	r3, [pc, #180]	; (8016ad4 <pow+0x2ec>)
 8016a1e:	2200      	movs	r2, #0
 8016a20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016a24:	4630      	mov	r0, r6
 8016a26:	4652      	mov	r2, sl
 8016a28:	465b      	mov	r3, fp
 8016a2a:	4639      	mov	r1, r7
 8016a2c:	f7ea f852 	bl	8000ad4 <__aeabi_dcmplt>
 8016a30:	2800      	cmp	r0, #0
 8016a32:	d0eb      	beq.n	8016a0c <pow+0x224>
 8016a34:	2200      	movs	r2, #0
 8016a36:	4b25      	ldr	r3, [pc, #148]	; (8016acc <pow+0x2e4>)
 8016a38:	4620      	mov	r0, r4
 8016a3a:	4629      	mov	r1, r5
 8016a3c:	f7e9 fdd8 	bl	80005f0 <__aeabi_dmul>
 8016a40:	4604      	mov	r4, r0
 8016a42:	460d      	mov	r5, r1
 8016a44:	ec45 4b10 	vmov	d0, r4, r5
 8016a48:	f000 fe76 	bl	8017738 <rint>
 8016a4c:	4620      	mov	r0, r4
 8016a4e:	ec53 2b10 	vmov	r2, r3, d0
 8016a52:	4629      	mov	r1, r5
 8016a54:	f7ea f834 	bl	8000ac0 <__aeabi_dcmpeq>
 8016a58:	2800      	cmp	r0, #0
 8016a5a:	d1d7      	bne.n	8016a0c <pow+0x224>
 8016a5c:	2200      	movs	r2, #0
 8016a5e:	4b19      	ldr	r3, [pc, #100]	; (8016ac4 <pow+0x2dc>)
 8016a60:	e7d2      	b.n	8016a08 <pow+0x220>
 8016a62:	2200      	movs	r2, #0
 8016a64:	2300      	movs	r3, #0
 8016a66:	ec51 0b18 	vmov	r0, r1, d8
 8016a6a:	f7ea f829 	bl	8000ac0 <__aeabi_dcmpeq>
 8016a6e:	2800      	cmp	r0, #0
 8016a70:	f43f af30 	beq.w	80168d4 <pow+0xec>
 8016a74:	ec47 6b10 	vmov	d0, r6, r7
 8016a78:	f000 fe4c 	bl	8017714 <finite>
 8016a7c:	2800      	cmp	r0, #0
 8016a7e:	f43f af29 	beq.w	80168d4 <pow+0xec>
 8016a82:	ec45 4b10 	vmov	d0, r4, r5
 8016a86:	f000 fe45 	bl	8017714 <finite>
 8016a8a:	2800      	cmp	r0, #0
 8016a8c:	f43f af22 	beq.w	80168d4 <pow+0xec>
 8016a90:	2304      	movs	r3, #4
 8016a92:	9302      	str	r3, [sp, #8]
 8016a94:	4b09      	ldr	r3, [pc, #36]	; (8016abc <pow+0x2d4>)
 8016a96:	9303      	str	r3, [sp, #12]
 8016a98:	2300      	movs	r3, #0
 8016a9a:	930a      	str	r3, [sp, #40]	; 0x28
 8016a9c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016aa0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016aa4:	ed8d 9b08 	vstr	d9, [sp, #32]
 8016aa8:	e7b0      	b.n	8016a0c <pow+0x224>
 8016aaa:	a802      	add	r0, sp, #8
 8016aac:	f000 fe3a 	bl	8017724 <matherr>
 8016ab0:	2800      	cmp	r0, #0
 8016ab2:	f47f af07 	bne.w	80168c4 <pow+0xdc>
 8016ab6:	e7ad      	b.n	8016a14 <pow+0x22c>
 8016ab8:	20000478 	.word	0x20000478
 8016abc:	08017f90 	.word	0x08017f90
 8016ac0:	3ff00000 	.word	0x3ff00000
 8016ac4:	fff00000 	.word	0xfff00000
 8016ac8:	47efffff 	.word	0x47efffff
 8016acc:	3fe00000 	.word	0x3fe00000
 8016ad0:	c7efffff 	.word	0xc7efffff
 8016ad4:	7ff00000 	.word	0x7ff00000

08016ad8 <sqrt>:
 8016ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016adc:	ed2d 8b02 	vpush	{d8}
 8016ae0:	b08b      	sub	sp, #44	; 0x2c
 8016ae2:	ec55 4b10 	vmov	r4, r5, d0
 8016ae6:	f000 fd65 	bl	80175b4 <__ieee754_sqrt>
 8016aea:	4b26      	ldr	r3, [pc, #152]	; (8016b84 <sqrt+0xac>)
 8016aec:	eeb0 8a40 	vmov.f32	s16, s0
 8016af0:	eef0 8a60 	vmov.f32	s17, s1
 8016af4:	f993 6000 	ldrsb.w	r6, [r3]
 8016af8:	1c73      	adds	r3, r6, #1
 8016afa:	d02a      	beq.n	8016b52 <sqrt+0x7a>
 8016afc:	4622      	mov	r2, r4
 8016afe:	462b      	mov	r3, r5
 8016b00:	4620      	mov	r0, r4
 8016b02:	4629      	mov	r1, r5
 8016b04:	f7ea f80e 	bl	8000b24 <__aeabi_dcmpun>
 8016b08:	4607      	mov	r7, r0
 8016b0a:	bb10      	cbnz	r0, 8016b52 <sqrt+0x7a>
 8016b0c:	f04f 0800 	mov.w	r8, #0
 8016b10:	f04f 0900 	mov.w	r9, #0
 8016b14:	4642      	mov	r2, r8
 8016b16:	464b      	mov	r3, r9
 8016b18:	4620      	mov	r0, r4
 8016b1a:	4629      	mov	r1, r5
 8016b1c:	f7e9 ffda 	bl	8000ad4 <__aeabi_dcmplt>
 8016b20:	b1b8      	cbz	r0, 8016b52 <sqrt+0x7a>
 8016b22:	2301      	movs	r3, #1
 8016b24:	9300      	str	r3, [sp, #0]
 8016b26:	4b18      	ldr	r3, [pc, #96]	; (8016b88 <sqrt+0xb0>)
 8016b28:	9301      	str	r3, [sp, #4]
 8016b2a:	9708      	str	r7, [sp, #32]
 8016b2c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8016b30:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8016b34:	b9b6      	cbnz	r6, 8016b64 <sqrt+0x8c>
 8016b36:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8016b3a:	4668      	mov	r0, sp
 8016b3c:	f000 fdf2 	bl	8017724 <matherr>
 8016b40:	b1d0      	cbz	r0, 8016b78 <sqrt+0xa0>
 8016b42:	9b08      	ldr	r3, [sp, #32]
 8016b44:	b11b      	cbz	r3, 8016b4e <sqrt+0x76>
 8016b46:	f000 ff07 	bl	8017958 <__errno>
 8016b4a:	9b08      	ldr	r3, [sp, #32]
 8016b4c:	6003      	str	r3, [r0, #0]
 8016b4e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8016b52:	eeb0 0a48 	vmov.f32	s0, s16
 8016b56:	eef0 0a68 	vmov.f32	s1, s17
 8016b5a:	b00b      	add	sp, #44	; 0x2c
 8016b5c:	ecbd 8b02 	vpop	{d8}
 8016b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b64:	4642      	mov	r2, r8
 8016b66:	464b      	mov	r3, r9
 8016b68:	4640      	mov	r0, r8
 8016b6a:	4649      	mov	r1, r9
 8016b6c:	f7e9 fe6a 	bl	8000844 <__aeabi_ddiv>
 8016b70:	2e02      	cmp	r6, #2
 8016b72:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016b76:	d1e0      	bne.n	8016b3a <sqrt+0x62>
 8016b78:	f000 feee 	bl	8017958 <__errno>
 8016b7c:	2321      	movs	r3, #33	; 0x21
 8016b7e:	6003      	str	r3, [r0, #0]
 8016b80:	e7df      	b.n	8016b42 <sqrt+0x6a>
 8016b82:	bf00      	nop
 8016b84:	20000478 	.word	0x20000478
 8016b88:	08017f94 	.word	0x08017f94
 8016b8c:	00000000 	.word	0x00000000

08016b90 <__ieee754_pow>:
 8016b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b94:	b091      	sub	sp, #68	; 0x44
 8016b96:	ed8d 1b00 	vstr	d1, [sp]
 8016b9a:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8016b9e:	ec57 6b10 	vmov	r6, r7, d0
 8016ba2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8016ba6:	ea58 0302 	orrs.w	r3, r8, r2
 8016baa:	ee10 aa10 	vmov	sl, s0
 8016bae:	463d      	mov	r5, r7
 8016bb0:	f000 84bd 	beq.w	801752e <__ieee754_pow+0x99e>
 8016bb4:	4b78      	ldr	r3, [pc, #480]	; (8016d98 <__ieee754_pow+0x208>)
 8016bb6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8016bba:	429c      	cmp	r4, r3
 8016bbc:	dc09      	bgt.n	8016bd2 <__ieee754_pow+0x42>
 8016bbe:	d103      	bne.n	8016bc8 <__ieee754_pow+0x38>
 8016bc0:	b93e      	cbnz	r6, 8016bd2 <__ieee754_pow+0x42>
 8016bc2:	45a0      	cmp	r8, r4
 8016bc4:	dc0d      	bgt.n	8016be2 <__ieee754_pow+0x52>
 8016bc6:	e001      	b.n	8016bcc <__ieee754_pow+0x3c>
 8016bc8:	4598      	cmp	r8, r3
 8016bca:	dc02      	bgt.n	8016bd2 <__ieee754_pow+0x42>
 8016bcc:	4598      	cmp	r8, r3
 8016bce:	d10e      	bne.n	8016bee <__ieee754_pow+0x5e>
 8016bd0:	b16a      	cbz	r2, 8016bee <__ieee754_pow+0x5e>
 8016bd2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016bd6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016bda:	ea54 030a 	orrs.w	r3, r4, sl
 8016bde:	f000 84a6 	beq.w	801752e <__ieee754_pow+0x99e>
 8016be2:	486e      	ldr	r0, [pc, #440]	; (8016d9c <__ieee754_pow+0x20c>)
 8016be4:	b011      	add	sp, #68	; 0x44
 8016be6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bea:	f000 bd9d 	b.w	8017728 <nan>
 8016bee:	2d00      	cmp	r5, #0
 8016bf0:	da53      	bge.n	8016c9a <__ieee754_pow+0x10a>
 8016bf2:	4b6b      	ldr	r3, [pc, #428]	; (8016da0 <__ieee754_pow+0x210>)
 8016bf4:	4598      	cmp	r8, r3
 8016bf6:	dc4d      	bgt.n	8016c94 <__ieee754_pow+0x104>
 8016bf8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8016bfc:	4598      	cmp	r8, r3
 8016bfe:	dd4c      	ble.n	8016c9a <__ieee754_pow+0x10a>
 8016c00:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016c04:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016c08:	2b14      	cmp	r3, #20
 8016c0a:	dd26      	ble.n	8016c5a <__ieee754_pow+0xca>
 8016c0c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016c10:	fa22 f103 	lsr.w	r1, r2, r3
 8016c14:	fa01 f303 	lsl.w	r3, r1, r3
 8016c18:	429a      	cmp	r2, r3
 8016c1a:	d13e      	bne.n	8016c9a <__ieee754_pow+0x10a>
 8016c1c:	f001 0101 	and.w	r1, r1, #1
 8016c20:	f1c1 0b02 	rsb	fp, r1, #2
 8016c24:	2a00      	cmp	r2, #0
 8016c26:	d15b      	bne.n	8016ce0 <__ieee754_pow+0x150>
 8016c28:	4b5b      	ldr	r3, [pc, #364]	; (8016d98 <__ieee754_pow+0x208>)
 8016c2a:	4598      	cmp	r8, r3
 8016c2c:	d124      	bne.n	8016c78 <__ieee754_pow+0xe8>
 8016c2e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016c32:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016c36:	ea53 030a 	orrs.w	r3, r3, sl
 8016c3a:	f000 8478 	beq.w	801752e <__ieee754_pow+0x99e>
 8016c3e:	4b59      	ldr	r3, [pc, #356]	; (8016da4 <__ieee754_pow+0x214>)
 8016c40:	429c      	cmp	r4, r3
 8016c42:	dd2d      	ble.n	8016ca0 <__ieee754_pow+0x110>
 8016c44:	f1b9 0f00 	cmp.w	r9, #0
 8016c48:	f280 8475 	bge.w	8017536 <__ieee754_pow+0x9a6>
 8016c4c:	2000      	movs	r0, #0
 8016c4e:	2100      	movs	r1, #0
 8016c50:	ec41 0b10 	vmov	d0, r0, r1
 8016c54:	b011      	add	sp, #68	; 0x44
 8016c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c5a:	2a00      	cmp	r2, #0
 8016c5c:	d13e      	bne.n	8016cdc <__ieee754_pow+0x14c>
 8016c5e:	f1c3 0314 	rsb	r3, r3, #20
 8016c62:	fa48 f103 	asr.w	r1, r8, r3
 8016c66:	fa01 f303 	lsl.w	r3, r1, r3
 8016c6a:	4598      	cmp	r8, r3
 8016c6c:	f040 846b 	bne.w	8017546 <__ieee754_pow+0x9b6>
 8016c70:	f001 0101 	and.w	r1, r1, #1
 8016c74:	f1c1 0b02 	rsb	fp, r1, #2
 8016c78:	4b4b      	ldr	r3, [pc, #300]	; (8016da8 <__ieee754_pow+0x218>)
 8016c7a:	4598      	cmp	r8, r3
 8016c7c:	d118      	bne.n	8016cb0 <__ieee754_pow+0x120>
 8016c7e:	f1b9 0f00 	cmp.w	r9, #0
 8016c82:	f280 845c 	bge.w	801753e <__ieee754_pow+0x9ae>
 8016c86:	4948      	ldr	r1, [pc, #288]	; (8016da8 <__ieee754_pow+0x218>)
 8016c88:	4632      	mov	r2, r6
 8016c8a:	463b      	mov	r3, r7
 8016c8c:	2000      	movs	r0, #0
 8016c8e:	f7e9 fdd9 	bl	8000844 <__aeabi_ddiv>
 8016c92:	e7dd      	b.n	8016c50 <__ieee754_pow+0xc0>
 8016c94:	f04f 0b02 	mov.w	fp, #2
 8016c98:	e7c4      	b.n	8016c24 <__ieee754_pow+0x94>
 8016c9a:	f04f 0b00 	mov.w	fp, #0
 8016c9e:	e7c1      	b.n	8016c24 <__ieee754_pow+0x94>
 8016ca0:	f1b9 0f00 	cmp.w	r9, #0
 8016ca4:	dad2      	bge.n	8016c4c <__ieee754_pow+0xbc>
 8016ca6:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8016caa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016cae:	e7cf      	b.n	8016c50 <__ieee754_pow+0xc0>
 8016cb0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8016cb4:	d106      	bne.n	8016cc4 <__ieee754_pow+0x134>
 8016cb6:	4632      	mov	r2, r6
 8016cb8:	463b      	mov	r3, r7
 8016cba:	4610      	mov	r0, r2
 8016cbc:	4619      	mov	r1, r3
 8016cbe:	f7e9 fc97 	bl	80005f0 <__aeabi_dmul>
 8016cc2:	e7c5      	b.n	8016c50 <__ieee754_pow+0xc0>
 8016cc4:	4b39      	ldr	r3, [pc, #228]	; (8016dac <__ieee754_pow+0x21c>)
 8016cc6:	4599      	cmp	r9, r3
 8016cc8:	d10a      	bne.n	8016ce0 <__ieee754_pow+0x150>
 8016cca:	2d00      	cmp	r5, #0
 8016ccc:	db08      	blt.n	8016ce0 <__ieee754_pow+0x150>
 8016cce:	ec47 6b10 	vmov	d0, r6, r7
 8016cd2:	b011      	add	sp, #68	; 0x44
 8016cd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cd8:	f000 bc6c 	b.w	80175b4 <__ieee754_sqrt>
 8016cdc:	f04f 0b00 	mov.w	fp, #0
 8016ce0:	ec47 6b10 	vmov	d0, r6, r7
 8016ce4:	f7ff fd78 	bl	80167d8 <fabs>
 8016ce8:	ec51 0b10 	vmov	r0, r1, d0
 8016cec:	f1ba 0f00 	cmp.w	sl, #0
 8016cf0:	d127      	bne.n	8016d42 <__ieee754_pow+0x1b2>
 8016cf2:	b124      	cbz	r4, 8016cfe <__ieee754_pow+0x16e>
 8016cf4:	4b2c      	ldr	r3, [pc, #176]	; (8016da8 <__ieee754_pow+0x218>)
 8016cf6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8016cfa:	429a      	cmp	r2, r3
 8016cfc:	d121      	bne.n	8016d42 <__ieee754_pow+0x1b2>
 8016cfe:	f1b9 0f00 	cmp.w	r9, #0
 8016d02:	da05      	bge.n	8016d10 <__ieee754_pow+0x180>
 8016d04:	4602      	mov	r2, r0
 8016d06:	460b      	mov	r3, r1
 8016d08:	2000      	movs	r0, #0
 8016d0a:	4927      	ldr	r1, [pc, #156]	; (8016da8 <__ieee754_pow+0x218>)
 8016d0c:	f7e9 fd9a 	bl	8000844 <__aeabi_ddiv>
 8016d10:	2d00      	cmp	r5, #0
 8016d12:	da9d      	bge.n	8016c50 <__ieee754_pow+0xc0>
 8016d14:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016d18:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016d1c:	ea54 030b 	orrs.w	r3, r4, fp
 8016d20:	d108      	bne.n	8016d34 <__ieee754_pow+0x1a4>
 8016d22:	4602      	mov	r2, r0
 8016d24:	460b      	mov	r3, r1
 8016d26:	4610      	mov	r0, r2
 8016d28:	4619      	mov	r1, r3
 8016d2a:	f7e9 faad 	bl	8000288 <__aeabi_dsub>
 8016d2e:	4602      	mov	r2, r0
 8016d30:	460b      	mov	r3, r1
 8016d32:	e7ac      	b.n	8016c8e <__ieee754_pow+0xfe>
 8016d34:	f1bb 0f01 	cmp.w	fp, #1
 8016d38:	d18a      	bne.n	8016c50 <__ieee754_pow+0xc0>
 8016d3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016d3e:	4619      	mov	r1, r3
 8016d40:	e786      	b.n	8016c50 <__ieee754_pow+0xc0>
 8016d42:	0fed      	lsrs	r5, r5, #31
 8016d44:	1e6b      	subs	r3, r5, #1
 8016d46:	930d      	str	r3, [sp, #52]	; 0x34
 8016d48:	ea5b 0303 	orrs.w	r3, fp, r3
 8016d4c:	d102      	bne.n	8016d54 <__ieee754_pow+0x1c4>
 8016d4e:	4632      	mov	r2, r6
 8016d50:	463b      	mov	r3, r7
 8016d52:	e7e8      	b.n	8016d26 <__ieee754_pow+0x196>
 8016d54:	4b16      	ldr	r3, [pc, #88]	; (8016db0 <__ieee754_pow+0x220>)
 8016d56:	4598      	cmp	r8, r3
 8016d58:	f340 80fe 	ble.w	8016f58 <__ieee754_pow+0x3c8>
 8016d5c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016d60:	4598      	cmp	r8, r3
 8016d62:	dd0a      	ble.n	8016d7a <__ieee754_pow+0x1ea>
 8016d64:	4b0f      	ldr	r3, [pc, #60]	; (8016da4 <__ieee754_pow+0x214>)
 8016d66:	429c      	cmp	r4, r3
 8016d68:	dc0d      	bgt.n	8016d86 <__ieee754_pow+0x1f6>
 8016d6a:	f1b9 0f00 	cmp.w	r9, #0
 8016d6e:	f6bf af6d 	bge.w	8016c4c <__ieee754_pow+0xbc>
 8016d72:	a307      	add	r3, pc, #28	; (adr r3, 8016d90 <__ieee754_pow+0x200>)
 8016d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d78:	e79f      	b.n	8016cba <__ieee754_pow+0x12a>
 8016d7a:	4b0e      	ldr	r3, [pc, #56]	; (8016db4 <__ieee754_pow+0x224>)
 8016d7c:	429c      	cmp	r4, r3
 8016d7e:	ddf4      	ble.n	8016d6a <__ieee754_pow+0x1da>
 8016d80:	4b09      	ldr	r3, [pc, #36]	; (8016da8 <__ieee754_pow+0x218>)
 8016d82:	429c      	cmp	r4, r3
 8016d84:	dd18      	ble.n	8016db8 <__ieee754_pow+0x228>
 8016d86:	f1b9 0f00 	cmp.w	r9, #0
 8016d8a:	dcf2      	bgt.n	8016d72 <__ieee754_pow+0x1e2>
 8016d8c:	e75e      	b.n	8016c4c <__ieee754_pow+0xbc>
 8016d8e:	bf00      	nop
 8016d90:	8800759c 	.word	0x8800759c
 8016d94:	7e37e43c 	.word	0x7e37e43c
 8016d98:	7ff00000 	.word	0x7ff00000
 8016d9c:	08017d95 	.word	0x08017d95
 8016da0:	433fffff 	.word	0x433fffff
 8016da4:	3fefffff 	.word	0x3fefffff
 8016da8:	3ff00000 	.word	0x3ff00000
 8016dac:	3fe00000 	.word	0x3fe00000
 8016db0:	41e00000 	.word	0x41e00000
 8016db4:	3feffffe 	.word	0x3feffffe
 8016db8:	2200      	movs	r2, #0
 8016dba:	4b63      	ldr	r3, [pc, #396]	; (8016f48 <__ieee754_pow+0x3b8>)
 8016dbc:	f7e9 fa64 	bl	8000288 <__aeabi_dsub>
 8016dc0:	a355      	add	r3, pc, #340	; (adr r3, 8016f18 <__ieee754_pow+0x388>)
 8016dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dc6:	4604      	mov	r4, r0
 8016dc8:	460d      	mov	r5, r1
 8016dca:	f7e9 fc11 	bl	80005f0 <__aeabi_dmul>
 8016dce:	a354      	add	r3, pc, #336	; (adr r3, 8016f20 <__ieee754_pow+0x390>)
 8016dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dd4:	4606      	mov	r6, r0
 8016dd6:	460f      	mov	r7, r1
 8016dd8:	4620      	mov	r0, r4
 8016dda:	4629      	mov	r1, r5
 8016ddc:	f7e9 fc08 	bl	80005f0 <__aeabi_dmul>
 8016de0:	2200      	movs	r2, #0
 8016de2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016de6:	4b59      	ldr	r3, [pc, #356]	; (8016f4c <__ieee754_pow+0x3bc>)
 8016de8:	4620      	mov	r0, r4
 8016dea:	4629      	mov	r1, r5
 8016dec:	f7e9 fc00 	bl	80005f0 <__aeabi_dmul>
 8016df0:	4602      	mov	r2, r0
 8016df2:	460b      	mov	r3, r1
 8016df4:	a14c      	add	r1, pc, #304	; (adr r1, 8016f28 <__ieee754_pow+0x398>)
 8016df6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016dfa:	f7e9 fa45 	bl	8000288 <__aeabi_dsub>
 8016dfe:	4622      	mov	r2, r4
 8016e00:	462b      	mov	r3, r5
 8016e02:	f7e9 fbf5 	bl	80005f0 <__aeabi_dmul>
 8016e06:	4602      	mov	r2, r0
 8016e08:	460b      	mov	r3, r1
 8016e0a:	2000      	movs	r0, #0
 8016e0c:	4950      	ldr	r1, [pc, #320]	; (8016f50 <__ieee754_pow+0x3c0>)
 8016e0e:	f7e9 fa3b 	bl	8000288 <__aeabi_dsub>
 8016e12:	4622      	mov	r2, r4
 8016e14:	462b      	mov	r3, r5
 8016e16:	4680      	mov	r8, r0
 8016e18:	4689      	mov	r9, r1
 8016e1a:	4620      	mov	r0, r4
 8016e1c:	4629      	mov	r1, r5
 8016e1e:	f7e9 fbe7 	bl	80005f0 <__aeabi_dmul>
 8016e22:	4602      	mov	r2, r0
 8016e24:	460b      	mov	r3, r1
 8016e26:	4640      	mov	r0, r8
 8016e28:	4649      	mov	r1, r9
 8016e2a:	f7e9 fbe1 	bl	80005f0 <__aeabi_dmul>
 8016e2e:	a340      	add	r3, pc, #256	; (adr r3, 8016f30 <__ieee754_pow+0x3a0>)
 8016e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e34:	f7e9 fbdc 	bl	80005f0 <__aeabi_dmul>
 8016e38:	4602      	mov	r2, r0
 8016e3a:	460b      	mov	r3, r1
 8016e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016e40:	f7e9 fa22 	bl	8000288 <__aeabi_dsub>
 8016e44:	4602      	mov	r2, r0
 8016e46:	460b      	mov	r3, r1
 8016e48:	4604      	mov	r4, r0
 8016e4a:	460d      	mov	r5, r1
 8016e4c:	4630      	mov	r0, r6
 8016e4e:	4639      	mov	r1, r7
 8016e50:	f7e9 fa1c 	bl	800028c <__adddf3>
 8016e54:	2000      	movs	r0, #0
 8016e56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016e5a:	4632      	mov	r2, r6
 8016e5c:	463b      	mov	r3, r7
 8016e5e:	f7e9 fa13 	bl	8000288 <__aeabi_dsub>
 8016e62:	4602      	mov	r2, r0
 8016e64:	460b      	mov	r3, r1
 8016e66:	4620      	mov	r0, r4
 8016e68:	4629      	mov	r1, r5
 8016e6a:	f7e9 fa0d 	bl	8000288 <__aeabi_dsub>
 8016e6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016e70:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016e74:	4313      	orrs	r3, r2
 8016e76:	4606      	mov	r6, r0
 8016e78:	460f      	mov	r7, r1
 8016e7a:	f040 81eb 	bne.w	8017254 <__ieee754_pow+0x6c4>
 8016e7e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8016f38 <__ieee754_pow+0x3a8>
 8016e82:	e9dd 4500 	ldrd	r4, r5, [sp]
 8016e86:	2400      	movs	r4, #0
 8016e88:	4622      	mov	r2, r4
 8016e8a:	462b      	mov	r3, r5
 8016e8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016e90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016e94:	f7e9 f9f8 	bl	8000288 <__aeabi_dsub>
 8016e98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016e9c:	f7e9 fba8 	bl	80005f0 <__aeabi_dmul>
 8016ea0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ea4:	4680      	mov	r8, r0
 8016ea6:	4689      	mov	r9, r1
 8016ea8:	4630      	mov	r0, r6
 8016eaa:	4639      	mov	r1, r7
 8016eac:	f7e9 fba0 	bl	80005f0 <__aeabi_dmul>
 8016eb0:	4602      	mov	r2, r0
 8016eb2:	460b      	mov	r3, r1
 8016eb4:	4640      	mov	r0, r8
 8016eb6:	4649      	mov	r1, r9
 8016eb8:	f7e9 f9e8 	bl	800028c <__adddf3>
 8016ebc:	4622      	mov	r2, r4
 8016ebe:	462b      	mov	r3, r5
 8016ec0:	4680      	mov	r8, r0
 8016ec2:	4689      	mov	r9, r1
 8016ec4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016ec8:	f7e9 fb92 	bl	80005f0 <__aeabi_dmul>
 8016ecc:	460b      	mov	r3, r1
 8016ece:	4604      	mov	r4, r0
 8016ed0:	460d      	mov	r5, r1
 8016ed2:	4602      	mov	r2, r0
 8016ed4:	4649      	mov	r1, r9
 8016ed6:	4640      	mov	r0, r8
 8016ed8:	e9cd 4500 	strd	r4, r5, [sp]
 8016edc:	f7e9 f9d6 	bl	800028c <__adddf3>
 8016ee0:	4b1c      	ldr	r3, [pc, #112]	; (8016f54 <__ieee754_pow+0x3c4>)
 8016ee2:	4299      	cmp	r1, r3
 8016ee4:	4606      	mov	r6, r0
 8016ee6:	460f      	mov	r7, r1
 8016ee8:	468b      	mov	fp, r1
 8016eea:	f340 82f7 	ble.w	80174dc <__ieee754_pow+0x94c>
 8016eee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016ef2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016ef6:	4303      	orrs	r3, r0
 8016ef8:	f000 81ea 	beq.w	80172d0 <__ieee754_pow+0x740>
 8016efc:	a310      	add	r3, pc, #64	; (adr r3, 8016f40 <__ieee754_pow+0x3b0>)
 8016efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016f06:	f7e9 fb73 	bl	80005f0 <__aeabi_dmul>
 8016f0a:	a30d      	add	r3, pc, #52	; (adr r3, 8016f40 <__ieee754_pow+0x3b0>)
 8016f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f10:	e6d5      	b.n	8016cbe <__ieee754_pow+0x12e>
 8016f12:	bf00      	nop
 8016f14:	f3af 8000 	nop.w
 8016f18:	60000000 	.word	0x60000000
 8016f1c:	3ff71547 	.word	0x3ff71547
 8016f20:	f85ddf44 	.word	0xf85ddf44
 8016f24:	3e54ae0b 	.word	0x3e54ae0b
 8016f28:	55555555 	.word	0x55555555
 8016f2c:	3fd55555 	.word	0x3fd55555
 8016f30:	652b82fe 	.word	0x652b82fe
 8016f34:	3ff71547 	.word	0x3ff71547
 8016f38:	00000000 	.word	0x00000000
 8016f3c:	bff00000 	.word	0xbff00000
 8016f40:	8800759c 	.word	0x8800759c
 8016f44:	7e37e43c 	.word	0x7e37e43c
 8016f48:	3ff00000 	.word	0x3ff00000
 8016f4c:	3fd00000 	.word	0x3fd00000
 8016f50:	3fe00000 	.word	0x3fe00000
 8016f54:	408fffff 	.word	0x408fffff
 8016f58:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8016f5c:	f04f 0200 	mov.w	r2, #0
 8016f60:	da05      	bge.n	8016f6e <__ieee754_pow+0x3de>
 8016f62:	4bd3      	ldr	r3, [pc, #844]	; (80172b0 <__ieee754_pow+0x720>)
 8016f64:	f7e9 fb44 	bl	80005f0 <__aeabi_dmul>
 8016f68:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8016f6c:	460c      	mov	r4, r1
 8016f6e:	1523      	asrs	r3, r4, #20
 8016f70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016f74:	4413      	add	r3, r2
 8016f76:	9307      	str	r3, [sp, #28]
 8016f78:	4bce      	ldr	r3, [pc, #824]	; (80172b4 <__ieee754_pow+0x724>)
 8016f7a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016f7e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016f82:	429c      	cmp	r4, r3
 8016f84:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016f88:	dd08      	ble.n	8016f9c <__ieee754_pow+0x40c>
 8016f8a:	4bcb      	ldr	r3, [pc, #812]	; (80172b8 <__ieee754_pow+0x728>)
 8016f8c:	429c      	cmp	r4, r3
 8016f8e:	f340 815e 	ble.w	801724e <__ieee754_pow+0x6be>
 8016f92:	9b07      	ldr	r3, [sp, #28]
 8016f94:	3301      	adds	r3, #1
 8016f96:	9307      	str	r3, [sp, #28]
 8016f98:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016f9c:	f04f 0a00 	mov.w	sl, #0
 8016fa0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016fa4:	930c      	str	r3, [sp, #48]	; 0x30
 8016fa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016fa8:	4bc4      	ldr	r3, [pc, #784]	; (80172bc <__ieee754_pow+0x72c>)
 8016faa:	4413      	add	r3, r2
 8016fac:	ed93 7b00 	vldr	d7, [r3]
 8016fb0:	4629      	mov	r1, r5
 8016fb2:	ec53 2b17 	vmov	r2, r3, d7
 8016fb6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8016fba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016fbe:	f7e9 f963 	bl	8000288 <__aeabi_dsub>
 8016fc2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016fc6:	4606      	mov	r6, r0
 8016fc8:	460f      	mov	r7, r1
 8016fca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016fce:	f7e9 f95d 	bl	800028c <__adddf3>
 8016fd2:	4602      	mov	r2, r0
 8016fd4:	460b      	mov	r3, r1
 8016fd6:	2000      	movs	r0, #0
 8016fd8:	49b9      	ldr	r1, [pc, #740]	; (80172c0 <__ieee754_pow+0x730>)
 8016fda:	f7e9 fc33 	bl	8000844 <__aeabi_ddiv>
 8016fde:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016fe2:	4602      	mov	r2, r0
 8016fe4:	460b      	mov	r3, r1
 8016fe6:	4630      	mov	r0, r6
 8016fe8:	4639      	mov	r1, r7
 8016fea:	f7e9 fb01 	bl	80005f0 <__aeabi_dmul>
 8016fee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016ff2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8016ff6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8016ffa:	2300      	movs	r3, #0
 8016ffc:	9302      	str	r3, [sp, #8]
 8016ffe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017002:	106d      	asrs	r5, r5, #1
 8017004:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8017008:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801700c:	2200      	movs	r2, #0
 801700e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8017012:	4640      	mov	r0, r8
 8017014:	4649      	mov	r1, r9
 8017016:	4614      	mov	r4, r2
 8017018:	461d      	mov	r5, r3
 801701a:	f7e9 fae9 	bl	80005f0 <__aeabi_dmul>
 801701e:	4602      	mov	r2, r0
 8017020:	460b      	mov	r3, r1
 8017022:	4630      	mov	r0, r6
 8017024:	4639      	mov	r1, r7
 8017026:	f7e9 f92f 	bl	8000288 <__aeabi_dsub>
 801702a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801702e:	4606      	mov	r6, r0
 8017030:	460f      	mov	r7, r1
 8017032:	4620      	mov	r0, r4
 8017034:	4629      	mov	r1, r5
 8017036:	f7e9 f927 	bl	8000288 <__aeabi_dsub>
 801703a:	4602      	mov	r2, r0
 801703c:	460b      	mov	r3, r1
 801703e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017042:	f7e9 f921 	bl	8000288 <__aeabi_dsub>
 8017046:	4642      	mov	r2, r8
 8017048:	464b      	mov	r3, r9
 801704a:	f7e9 fad1 	bl	80005f0 <__aeabi_dmul>
 801704e:	4602      	mov	r2, r0
 8017050:	460b      	mov	r3, r1
 8017052:	4630      	mov	r0, r6
 8017054:	4639      	mov	r1, r7
 8017056:	f7e9 f917 	bl	8000288 <__aeabi_dsub>
 801705a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801705e:	f7e9 fac7 	bl	80005f0 <__aeabi_dmul>
 8017062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017066:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801706a:	4610      	mov	r0, r2
 801706c:	4619      	mov	r1, r3
 801706e:	f7e9 fabf 	bl	80005f0 <__aeabi_dmul>
 8017072:	a37b      	add	r3, pc, #492	; (adr r3, 8017260 <__ieee754_pow+0x6d0>)
 8017074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017078:	4604      	mov	r4, r0
 801707a:	460d      	mov	r5, r1
 801707c:	f7e9 fab8 	bl	80005f0 <__aeabi_dmul>
 8017080:	a379      	add	r3, pc, #484	; (adr r3, 8017268 <__ieee754_pow+0x6d8>)
 8017082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017086:	f7e9 f901 	bl	800028c <__adddf3>
 801708a:	4622      	mov	r2, r4
 801708c:	462b      	mov	r3, r5
 801708e:	f7e9 faaf 	bl	80005f0 <__aeabi_dmul>
 8017092:	a377      	add	r3, pc, #476	; (adr r3, 8017270 <__ieee754_pow+0x6e0>)
 8017094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017098:	f7e9 f8f8 	bl	800028c <__adddf3>
 801709c:	4622      	mov	r2, r4
 801709e:	462b      	mov	r3, r5
 80170a0:	f7e9 faa6 	bl	80005f0 <__aeabi_dmul>
 80170a4:	a374      	add	r3, pc, #464	; (adr r3, 8017278 <__ieee754_pow+0x6e8>)
 80170a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170aa:	f7e9 f8ef 	bl	800028c <__adddf3>
 80170ae:	4622      	mov	r2, r4
 80170b0:	462b      	mov	r3, r5
 80170b2:	f7e9 fa9d 	bl	80005f0 <__aeabi_dmul>
 80170b6:	a372      	add	r3, pc, #456	; (adr r3, 8017280 <__ieee754_pow+0x6f0>)
 80170b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170bc:	f7e9 f8e6 	bl	800028c <__adddf3>
 80170c0:	4622      	mov	r2, r4
 80170c2:	462b      	mov	r3, r5
 80170c4:	f7e9 fa94 	bl	80005f0 <__aeabi_dmul>
 80170c8:	a36f      	add	r3, pc, #444	; (adr r3, 8017288 <__ieee754_pow+0x6f8>)
 80170ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ce:	f7e9 f8dd 	bl	800028c <__adddf3>
 80170d2:	4622      	mov	r2, r4
 80170d4:	4606      	mov	r6, r0
 80170d6:	460f      	mov	r7, r1
 80170d8:	462b      	mov	r3, r5
 80170da:	4620      	mov	r0, r4
 80170dc:	4629      	mov	r1, r5
 80170de:	f7e9 fa87 	bl	80005f0 <__aeabi_dmul>
 80170e2:	4602      	mov	r2, r0
 80170e4:	460b      	mov	r3, r1
 80170e6:	4630      	mov	r0, r6
 80170e8:	4639      	mov	r1, r7
 80170ea:	f7e9 fa81 	bl	80005f0 <__aeabi_dmul>
 80170ee:	4642      	mov	r2, r8
 80170f0:	4604      	mov	r4, r0
 80170f2:	460d      	mov	r5, r1
 80170f4:	464b      	mov	r3, r9
 80170f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80170fa:	f7e9 f8c7 	bl	800028c <__adddf3>
 80170fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017102:	f7e9 fa75 	bl	80005f0 <__aeabi_dmul>
 8017106:	4622      	mov	r2, r4
 8017108:	462b      	mov	r3, r5
 801710a:	f7e9 f8bf 	bl	800028c <__adddf3>
 801710e:	4642      	mov	r2, r8
 8017110:	4606      	mov	r6, r0
 8017112:	460f      	mov	r7, r1
 8017114:	464b      	mov	r3, r9
 8017116:	4640      	mov	r0, r8
 8017118:	4649      	mov	r1, r9
 801711a:	f7e9 fa69 	bl	80005f0 <__aeabi_dmul>
 801711e:	2200      	movs	r2, #0
 8017120:	4b68      	ldr	r3, [pc, #416]	; (80172c4 <__ieee754_pow+0x734>)
 8017122:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017126:	f7e9 f8b1 	bl	800028c <__adddf3>
 801712a:	4632      	mov	r2, r6
 801712c:	463b      	mov	r3, r7
 801712e:	f7e9 f8ad 	bl	800028c <__adddf3>
 8017132:	9802      	ldr	r0, [sp, #8]
 8017134:	460d      	mov	r5, r1
 8017136:	4604      	mov	r4, r0
 8017138:	4602      	mov	r2, r0
 801713a:	460b      	mov	r3, r1
 801713c:	4640      	mov	r0, r8
 801713e:	4649      	mov	r1, r9
 8017140:	f7e9 fa56 	bl	80005f0 <__aeabi_dmul>
 8017144:	2200      	movs	r2, #0
 8017146:	4680      	mov	r8, r0
 8017148:	4689      	mov	r9, r1
 801714a:	4b5e      	ldr	r3, [pc, #376]	; (80172c4 <__ieee754_pow+0x734>)
 801714c:	4620      	mov	r0, r4
 801714e:	4629      	mov	r1, r5
 8017150:	f7e9 f89a 	bl	8000288 <__aeabi_dsub>
 8017154:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017158:	f7e9 f896 	bl	8000288 <__aeabi_dsub>
 801715c:	4602      	mov	r2, r0
 801715e:	460b      	mov	r3, r1
 8017160:	4630      	mov	r0, r6
 8017162:	4639      	mov	r1, r7
 8017164:	f7e9 f890 	bl	8000288 <__aeabi_dsub>
 8017168:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801716c:	f7e9 fa40 	bl	80005f0 <__aeabi_dmul>
 8017170:	4622      	mov	r2, r4
 8017172:	4606      	mov	r6, r0
 8017174:	460f      	mov	r7, r1
 8017176:	462b      	mov	r3, r5
 8017178:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801717c:	f7e9 fa38 	bl	80005f0 <__aeabi_dmul>
 8017180:	4602      	mov	r2, r0
 8017182:	460b      	mov	r3, r1
 8017184:	4630      	mov	r0, r6
 8017186:	4639      	mov	r1, r7
 8017188:	f7e9 f880 	bl	800028c <__adddf3>
 801718c:	4606      	mov	r6, r0
 801718e:	460f      	mov	r7, r1
 8017190:	4602      	mov	r2, r0
 8017192:	460b      	mov	r3, r1
 8017194:	4640      	mov	r0, r8
 8017196:	4649      	mov	r1, r9
 8017198:	f7e9 f878 	bl	800028c <__adddf3>
 801719c:	9802      	ldr	r0, [sp, #8]
 801719e:	a33c      	add	r3, pc, #240	; (adr r3, 8017290 <__ieee754_pow+0x700>)
 80171a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171a4:	4604      	mov	r4, r0
 80171a6:	460d      	mov	r5, r1
 80171a8:	f7e9 fa22 	bl	80005f0 <__aeabi_dmul>
 80171ac:	4642      	mov	r2, r8
 80171ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80171b2:	464b      	mov	r3, r9
 80171b4:	4620      	mov	r0, r4
 80171b6:	4629      	mov	r1, r5
 80171b8:	f7e9 f866 	bl	8000288 <__aeabi_dsub>
 80171bc:	4602      	mov	r2, r0
 80171be:	460b      	mov	r3, r1
 80171c0:	4630      	mov	r0, r6
 80171c2:	4639      	mov	r1, r7
 80171c4:	f7e9 f860 	bl	8000288 <__aeabi_dsub>
 80171c8:	a333      	add	r3, pc, #204	; (adr r3, 8017298 <__ieee754_pow+0x708>)
 80171ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ce:	f7e9 fa0f 	bl	80005f0 <__aeabi_dmul>
 80171d2:	a333      	add	r3, pc, #204	; (adr r3, 80172a0 <__ieee754_pow+0x710>)
 80171d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171d8:	4606      	mov	r6, r0
 80171da:	460f      	mov	r7, r1
 80171dc:	4620      	mov	r0, r4
 80171de:	4629      	mov	r1, r5
 80171e0:	f7e9 fa06 	bl	80005f0 <__aeabi_dmul>
 80171e4:	4602      	mov	r2, r0
 80171e6:	460b      	mov	r3, r1
 80171e8:	4630      	mov	r0, r6
 80171ea:	4639      	mov	r1, r7
 80171ec:	f7e9 f84e 	bl	800028c <__adddf3>
 80171f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80171f2:	4b35      	ldr	r3, [pc, #212]	; (80172c8 <__ieee754_pow+0x738>)
 80171f4:	4413      	add	r3, r2
 80171f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171fa:	f7e9 f847 	bl	800028c <__adddf3>
 80171fe:	4604      	mov	r4, r0
 8017200:	9807      	ldr	r0, [sp, #28]
 8017202:	460d      	mov	r5, r1
 8017204:	f7e9 f98e 	bl	8000524 <__aeabi_i2d>
 8017208:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801720a:	4b30      	ldr	r3, [pc, #192]	; (80172cc <__ieee754_pow+0x73c>)
 801720c:	4413      	add	r3, r2
 801720e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017212:	4606      	mov	r6, r0
 8017214:	460f      	mov	r7, r1
 8017216:	4622      	mov	r2, r4
 8017218:	462b      	mov	r3, r5
 801721a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801721e:	f7e9 f835 	bl	800028c <__adddf3>
 8017222:	4642      	mov	r2, r8
 8017224:	464b      	mov	r3, r9
 8017226:	f7e9 f831 	bl	800028c <__adddf3>
 801722a:	4632      	mov	r2, r6
 801722c:	463b      	mov	r3, r7
 801722e:	f7e9 f82d 	bl	800028c <__adddf3>
 8017232:	9802      	ldr	r0, [sp, #8]
 8017234:	4632      	mov	r2, r6
 8017236:	463b      	mov	r3, r7
 8017238:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801723c:	f7e9 f824 	bl	8000288 <__aeabi_dsub>
 8017240:	4642      	mov	r2, r8
 8017242:	464b      	mov	r3, r9
 8017244:	f7e9 f820 	bl	8000288 <__aeabi_dsub>
 8017248:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801724c:	e607      	b.n	8016e5e <__ieee754_pow+0x2ce>
 801724e:	f04f 0a01 	mov.w	sl, #1
 8017252:	e6a5      	b.n	8016fa0 <__ieee754_pow+0x410>
 8017254:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80172a8 <__ieee754_pow+0x718>
 8017258:	e613      	b.n	8016e82 <__ieee754_pow+0x2f2>
 801725a:	bf00      	nop
 801725c:	f3af 8000 	nop.w
 8017260:	4a454eef 	.word	0x4a454eef
 8017264:	3fca7e28 	.word	0x3fca7e28
 8017268:	93c9db65 	.word	0x93c9db65
 801726c:	3fcd864a 	.word	0x3fcd864a
 8017270:	a91d4101 	.word	0xa91d4101
 8017274:	3fd17460 	.word	0x3fd17460
 8017278:	518f264d 	.word	0x518f264d
 801727c:	3fd55555 	.word	0x3fd55555
 8017280:	db6fabff 	.word	0xdb6fabff
 8017284:	3fdb6db6 	.word	0x3fdb6db6
 8017288:	33333303 	.word	0x33333303
 801728c:	3fe33333 	.word	0x3fe33333
 8017290:	e0000000 	.word	0xe0000000
 8017294:	3feec709 	.word	0x3feec709
 8017298:	dc3a03fd 	.word	0xdc3a03fd
 801729c:	3feec709 	.word	0x3feec709
 80172a0:	145b01f5 	.word	0x145b01f5
 80172a4:	be3e2fe0 	.word	0xbe3e2fe0
 80172a8:	00000000 	.word	0x00000000
 80172ac:	3ff00000 	.word	0x3ff00000
 80172b0:	43400000 	.word	0x43400000
 80172b4:	0003988e 	.word	0x0003988e
 80172b8:	000bb679 	.word	0x000bb679
 80172bc:	08017fa0 	.word	0x08017fa0
 80172c0:	3ff00000 	.word	0x3ff00000
 80172c4:	40080000 	.word	0x40080000
 80172c8:	08017fc0 	.word	0x08017fc0
 80172cc:	08017fb0 	.word	0x08017fb0
 80172d0:	a3b6      	add	r3, pc, #728	; (adr r3, 80175ac <__ieee754_pow+0xa1c>)
 80172d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172d6:	4640      	mov	r0, r8
 80172d8:	4649      	mov	r1, r9
 80172da:	f7e8 ffd7 	bl	800028c <__adddf3>
 80172de:	4622      	mov	r2, r4
 80172e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80172e4:	462b      	mov	r3, r5
 80172e6:	4630      	mov	r0, r6
 80172e8:	4639      	mov	r1, r7
 80172ea:	f7e8 ffcd 	bl	8000288 <__aeabi_dsub>
 80172ee:	4602      	mov	r2, r0
 80172f0:	460b      	mov	r3, r1
 80172f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80172f6:	f7e9 fc0b 	bl	8000b10 <__aeabi_dcmpgt>
 80172fa:	2800      	cmp	r0, #0
 80172fc:	f47f adfe 	bne.w	8016efc <__ieee754_pow+0x36c>
 8017300:	4aa5      	ldr	r2, [pc, #660]	; (8017598 <__ieee754_pow+0xa08>)
 8017302:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017306:	4293      	cmp	r3, r2
 8017308:	f340 810c 	ble.w	8017524 <__ieee754_pow+0x994>
 801730c:	151b      	asrs	r3, r3, #20
 801730e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8017312:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8017316:	fa4a f303 	asr.w	r3, sl, r3
 801731a:	445b      	add	r3, fp
 801731c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8017320:	4e9e      	ldr	r6, [pc, #632]	; (801759c <__ieee754_pow+0xa0c>)
 8017322:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8017326:	4116      	asrs	r6, r2
 8017328:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801732c:	2000      	movs	r0, #0
 801732e:	ea23 0106 	bic.w	r1, r3, r6
 8017332:	f1c2 0214 	rsb	r2, r2, #20
 8017336:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801733a:	fa4a fa02 	asr.w	sl, sl, r2
 801733e:	f1bb 0f00 	cmp.w	fp, #0
 8017342:	4602      	mov	r2, r0
 8017344:	460b      	mov	r3, r1
 8017346:	4620      	mov	r0, r4
 8017348:	4629      	mov	r1, r5
 801734a:	bfb8      	it	lt
 801734c:	f1ca 0a00 	rsblt	sl, sl, #0
 8017350:	f7e8 ff9a 	bl	8000288 <__aeabi_dsub>
 8017354:	e9cd 0100 	strd	r0, r1, [sp]
 8017358:	4642      	mov	r2, r8
 801735a:	464b      	mov	r3, r9
 801735c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017360:	f7e8 ff94 	bl	800028c <__adddf3>
 8017364:	2000      	movs	r0, #0
 8017366:	a37a      	add	r3, pc, #488	; (adr r3, 8017550 <__ieee754_pow+0x9c0>)
 8017368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801736c:	4604      	mov	r4, r0
 801736e:	460d      	mov	r5, r1
 8017370:	f7e9 f93e 	bl	80005f0 <__aeabi_dmul>
 8017374:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017378:	4606      	mov	r6, r0
 801737a:	460f      	mov	r7, r1
 801737c:	4620      	mov	r0, r4
 801737e:	4629      	mov	r1, r5
 8017380:	f7e8 ff82 	bl	8000288 <__aeabi_dsub>
 8017384:	4602      	mov	r2, r0
 8017386:	460b      	mov	r3, r1
 8017388:	4640      	mov	r0, r8
 801738a:	4649      	mov	r1, r9
 801738c:	f7e8 ff7c 	bl	8000288 <__aeabi_dsub>
 8017390:	a371      	add	r3, pc, #452	; (adr r3, 8017558 <__ieee754_pow+0x9c8>)
 8017392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017396:	f7e9 f92b 	bl	80005f0 <__aeabi_dmul>
 801739a:	a371      	add	r3, pc, #452	; (adr r3, 8017560 <__ieee754_pow+0x9d0>)
 801739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173a0:	4680      	mov	r8, r0
 80173a2:	4689      	mov	r9, r1
 80173a4:	4620      	mov	r0, r4
 80173a6:	4629      	mov	r1, r5
 80173a8:	f7e9 f922 	bl	80005f0 <__aeabi_dmul>
 80173ac:	4602      	mov	r2, r0
 80173ae:	460b      	mov	r3, r1
 80173b0:	4640      	mov	r0, r8
 80173b2:	4649      	mov	r1, r9
 80173b4:	f7e8 ff6a 	bl	800028c <__adddf3>
 80173b8:	4604      	mov	r4, r0
 80173ba:	460d      	mov	r5, r1
 80173bc:	4602      	mov	r2, r0
 80173be:	460b      	mov	r3, r1
 80173c0:	4630      	mov	r0, r6
 80173c2:	4639      	mov	r1, r7
 80173c4:	f7e8 ff62 	bl	800028c <__adddf3>
 80173c8:	4632      	mov	r2, r6
 80173ca:	463b      	mov	r3, r7
 80173cc:	4680      	mov	r8, r0
 80173ce:	4689      	mov	r9, r1
 80173d0:	f7e8 ff5a 	bl	8000288 <__aeabi_dsub>
 80173d4:	4602      	mov	r2, r0
 80173d6:	460b      	mov	r3, r1
 80173d8:	4620      	mov	r0, r4
 80173da:	4629      	mov	r1, r5
 80173dc:	f7e8 ff54 	bl	8000288 <__aeabi_dsub>
 80173e0:	4642      	mov	r2, r8
 80173e2:	4606      	mov	r6, r0
 80173e4:	460f      	mov	r7, r1
 80173e6:	464b      	mov	r3, r9
 80173e8:	4640      	mov	r0, r8
 80173ea:	4649      	mov	r1, r9
 80173ec:	f7e9 f900 	bl	80005f0 <__aeabi_dmul>
 80173f0:	a35d      	add	r3, pc, #372	; (adr r3, 8017568 <__ieee754_pow+0x9d8>)
 80173f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173f6:	4604      	mov	r4, r0
 80173f8:	460d      	mov	r5, r1
 80173fa:	f7e9 f8f9 	bl	80005f0 <__aeabi_dmul>
 80173fe:	a35c      	add	r3, pc, #368	; (adr r3, 8017570 <__ieee754_pow+0x9e0>)
 8017400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017404:	f7e8 ff40 	bl	8000288 <__aeabi_dsub>
 8017408:	4622      	mov	r2, r4
 801740a:	462b      	mov	r3, r5
 801740c:	f7e9 f8f0 	bl	80005f0 <__aeabi_dmul>
 8017410:	a359      	add	r3, pc, #356	; (adr r3, 8017578 <__ieee754_pow+0x9e8>)
 8017412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017416:	f7e8 ff39 	bl	800028c <__adddf3>
 801741a:	4622      	mov	r2, r4
 801741c:	462b      	mov	r3, r5
 801741e:	f7e9 f8e7 	bl	80005f0 <__aeabi_dmul>
 8017422:	a357      	add	r3, pc, #348	; (adr r3, 8017580 <__ieee754_pow+0x9f0>)
 8017424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017428:	f7e8 ff2e 	bl	8000288 <__aeabi_dsub>
 801742c:	4622      	mov	r2, r4
 801742e:	462b      	mov	r3, r5
 8017430:	f7e9 f8de 	bl	80005f0 <__aeabi_dmul>
 8017434:	a354      	add	r3, pc, #336	; (adr r3, 8017588 <__ieee754_pow+0x9f8>)
 8017436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801743a:	f7e8 ff27 	bl	800028c <__adddf3>
 801743e:	4622      	mov	r2, r4
 8017440:	462b      	mov	r3, r5
 8017442:	f7e9 f8d5 	bl	80005f0 <__aeabi_dmul>
 8017446:	4602      	mov	r2, r0
 8017448:	460b      	mov	r3, r1
 801744a:	4640      	mov	r0, r8
 801744c:	4649      	mov	r1, r9
 801744e:	f7e8 ff1b 	bl	8000288 <__aeabi_dsub>
 8017452:	4604      	mov	r4, r0
 8017454:	460d      	mov	r5, r1
 8017456:	4602      	mov	r2, r0
 8017458:	460b      	mov	r3, r1
 801745a:	4640      	mov	r0, r8
 801745c:	4649      	mov	r1, r9
 801745e:	f7e9 f8c7 	bl	80005f0 <__aeabi_dmul>
 8017462:	2200      	movs	r2, #0
 8017464:	e9cd 0100 	strd	r0, r1, [sp]
 8017468:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801746c:	4620      	mov	r0, r4
 801746e:	4629      	mov	r1, r5
 8017470:	f7e8 ff0a 	bl	8000288 <__aeabi_dsub>
 8017474:	4602      	mov	r2, r0
 8017476:	460b      	mov	r3, r1
 8017478:	e9dd 0100 	ldrd	r0, r1, [sp]
 801747c:	f7e9 f9e2 	bl	8000844 <__aeabi_ddiv>
 8017480:	4632      	mov	r2, r6
 8017482:	4604      	mov	r4, r0
 8017484:	460d      	mov	r5, r1
 8017486:	463b      	mov	r3, r7
 8017488:	4640      	mov	r0, r8
 801748a:	4649      	mov	r1, r9
 801748c:	f7e9 f8b0 	bl	80005f0 <__aeabi_dmul>
 8017490:	4632      	mov	r2, r6
 8017492:	463b      	mov	r3, r7
 8017494:	f7e8 fefa 	bl	800028c <__adddf3>
 8017498:	4602      	mov	r2, r0
 801749a:	460b      	mov	r3, r1
 801749c:	4620      	mov	r0, r4
 801749e:	4629      	mov	r1, r5
 80174a0:	f7e8 fef2 	bl	8000288 <__aeabi_dsub>
 80174a4:	4642      	mov	r2, r8
 80174a6:	464b      	mov	r3, r9
 80174a8:	f7e8 feee 	bl	8000288 <__aeabi_dsub>
 80174ac:	4602      	mov	r2, r0
 80174ae:	460b      	mov	r3, r1
 80174b0:	2000      	movs	r0, #0
 80174b2:	493b      	ldr	r1, [pc, #236]	; (80175a0 <__ieee754_pow+0xa10>)
 80174b4:	f7e8 fee8 	bl	8000288 <__aeabi_dsub>
 80174b8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80174bc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80174c0:	4602      	mov	r2, r0
 80174c2:	460b      	mov	r3, r1
 80174c4:	da31      	bge.n	801752a <__ieee754_pow+0x99a>
 80174c6:	4650      	mov	r0, sl
 80174c8:	ec43 2b10 	vmov	d0, r2, r3
 80174cc:	f000 f9bc 	bl	8017848 <scalbn>
 80174d0:	ec51 0b10 	vmov	r0, r1, d0
 80174d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80174d8:	f7ff bbf1 	b.w	8016cbe <__ieee754_pow+0x12e>
 80174dc:	4b31      	ldr	r3, [pc, #196]	; (80175a4 <__ieee754_pow+0xa14>)
 80174de:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80174e2:	429e      	cmp	r6, r3
 80174e4:	f77f af0c 	ble.w	8017300 <__ieee754_pow+0x770>
 80174e8:	4b2f      	ldr	r3, [pc, #188]	; (80175a8 <__ieee754_pow+0xa18>)
 80174ea:	440b      	add	r3, r1
 80174ec:	4303      	orrs	r3, r0
 80174ee:	d00b      	beq.n	8017508 <__ieee754_pow+0x978>
 80174f0:	a327      	add	r3, pc, #156	; (adr r3, 8017590 <__ieee754_pow+0xa00>)
 80174f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80174fa:	f7e9 f879 	bl	80005f0 <__aeabi_dmul>
 80174fe:	a324      	add	r3, pc, #144	; (adr r3, 8017590 <__ieee754_pow+0xa00>)
 8017500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017504:	f7ff bbdb 	b.w	8016cbe <__ieee754_pow+0x12e>
 8017508:	4622      	mov	r2, r4
 801750a:	462b      	mov	r3, r5
 801750c:	f7e8 febc 	bl	8000288 <__aeabi_dsub>
 8017510:	4602      	mov	r2, r0
 8017512:	460b      	mov	r3, r1
 8017514:	4640      	mov	r0, r8
 8017516:	4649      	mov	r1, r9
 8017518:	f7e9 fae6 	bl	8000ae8 <__aeabi_dcmple>
 801751c:	2800      	cmp	r0, #0
 801751e:	f43f aeef 	beq.w	8017300 <__ieee754_pow+0x770>
 8017522:	e7e5      	b.n	80174f0 <__ieee754_pow+0x960>
 8017524:	f04f 0a00 	mov.w	sl, #0
 8017528:	e716      	b.n	8017358 <__ieee754_pow+0x7c8>
 801752a:	4621      	mov	r1, r4
 801752c:	e7d2      	b.n	80174d4 <__ieee754_pow+0x944>
 801752e:	2000      	movs	r0, #0
 8017530:	491b      	ldr	r1, [pc, #108]	; (80175a0 <__ieee754_pow+0xa10>)
 8017532:	f7ff bb8d 	b.w	8016c50 <__ieee754_pow+0xc0>
 8017536:	e9dd 0100 	ldrd	r0, r1, [sp]
 801753a:	f7ff bb89 	b.w	8016c50 <__ieee754_pow+0xc0>
 801753e:	4630      	mov	r0, r6
 8017540:	4639      	mov	r1, r7
 8017542:	f7ff bb85 	b.w	8016c50 <__ieee754_pow+0xc0>
 8017546:	4693      	mov	fp, r2
 8017548:	f7ff bb96 	b.w	8016c78 <__ieee754_pow+0xe8>
 801754c:	f3af 8000 	nop.w
 8017550:	00000000 	.word	0x00000000
 8017554:	3fe62e43 	.word	0x3fe62e43
 8017558:	fefa39ef 	.word	0xfefa39ef
 801755c:	3fe62e42 	.word	0x3fe62e42
 8017560:	0ca86c39 	.word	0x0ca86c39
 8017564:	be205c61 	.word	0xbe205c61
 8017568:	72bea4d0 	.word	0x72bea4d0
 801756c:	3e663769 	.word	0x3e663769
 8017570:	c5d26bf1 	.word	0xc5d26bf1
 8017574:	3ebbbd41 	.word	0x3ebbbd41
 8017578:	af25de2c 	.word	0xaf25de2c
 801757c:	3f11566a 	.word	0x3f11566a
 8017580:	16bebd93 	.word	0x16bebd93
 8017584:	3f66c16c 	.word	0x3f66c16c
 8017588:	5555553e 	.word	0x5555553e
 801758c:	3fc55555 	.word	0x3fc55555
 8017590:	c2f8f359 	.word	0xc2f8f359
 8017594:	01a56e1f 	.word	0x01a56e1f
 8017598:	3fe00000 	.word	0x3fe00000
 801759c:	000fffff 	.word	0x000fffff
 80175a0:	3ff00000 	.word	0x3ff00000
 80175a4:	4090cbff 	.word	0x4090cbff
 80175a8:	3f6f3400 	.word	0x3f6f3400
 80175ac:	652b82fe 	.word	0x652b82fe
 80175b0:	3c971547 	.word	0x3c971547

080175b4 <__ieee754_sqrt>:
 80175b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175b8:	ec55 4b10 	vmov	r4, r5, d0
 80175bc:	4e54      	ldr	r6, [pc, #336]	; (8017710 <__ieee754_sqrt+0x15c>)
 80175be:	43ae      	bics	r6, r5
 80175c0:	ee10 0a10 	vmov	r0, s0
 80175c4:	462b      	mov	r3, r5
 80175c6:	462a      	mov	r2, r5
 80175c8:	4621      	mov	r1, r4
 80175ca:	d113      	bne.n	80175f4 <__ieee754_sqrt+0x40>
 80175cc:	ee10 2a10 	vmov	r2, s0
 80175d0:	462b      	mov	r3, r5
 80175d2:	ee10 0a10 	vmov	r0, s0
 80175d6:	4629      	mov	r1, r5
 80175d8:	f7e9 f80a 	bl	80005f0 <__aeabi_dmul>
 80175dc:	4602      	mov	r2, r0
 80175de:	460b      	mov	r3, r1
 80175e0:	4620      	mov	r0, r4
 80175e2:	4629      	mov	r1, r5
 80175e4:	f7e8 fe52 	bl	800028c <__adddf3>
 80175e8:	4604      	mov	r4, r0
 80175ea:	460d      	mov	r5, r1
 80175ec:	ec45 4b10 	vmov	d0, r4, r5
 80175f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175f4:	2d00      	cmp	r5, #0
 80175f6:	dc10      	bgt.n	801761a <__ieee754_sqrt+0x66>
 80175f8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80175fc:	4330      	orrs	r0, r6
 80175fe:	d0f5      	beq.n	80175ec <__ieee754_sqrt+0x38>
 8017600:	b15d      	cbz	r5, 801761a <__ieee754_sqrt+0x66>
 8017602:	ee10 2a10 	vmov	r2, s0
 8017606:	462b      	mov	r3, r5
 8017608:	4620      	mov	r0, r4
 801760a:	4629      	mov	r1, r5
 801760c:	f7e8 fe3c 	bl	8000288 <__aeabi_dsub>
 8017610:	4602      	mov	r2, r0
 8017612:	460b      	mov	r3, r1
 8017614:	f7e9 f916 	bl	8000844 <__aeabi_ddiv>
 8017618:	e7e6      	b.n	80175e8 <__ieee754_sqrt+0x34>
 801761a:	151b      	asrs	r3, r3, #20
 801761c:	d10c      	bne.n	8017638 <__ieee754_sqrt+0x84>
 801761e:	2a00      	cmp	r2, #0
 8017620:	d06d      	beq.n	80176fe <__ieee754_sqrt+0x14a>
 8017622:	2000      	movs	r0, #0
 8017624:	02d6      	lsls	r6, r2, #11
 8017626:	d56e      	bpl.n	8017706 <__ieee754_sqrt+0x152>
 8017628:	1e44      	subs	r4, r0, #1
 801762a:	1b1b      	subs	r3, r3, r4
 801762c:	f1c0 0420 	rsb	r4, r0, #32
 8017630:	fa21 f404 	lsr.w	r4, r1, r4
 8017634:	4322      	orrs	r2, r4
 8017636:	4081      	lsls	r1, r0
 8017638:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801763c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8017640:	07dd      	lsls	r5, r3, #31
 8017642:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8017646:	bf42      	ittt	mi
 8017648:	0052      	lslmi	r2, r2, #1
 801764a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 801764e:	0049      	lslmi	r1, r1, #1
 8017650:	1058      	asrs	r0, r3, #1
 8017652:	2500      	movs	r5, #0
 8017654:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8017658:	441a      	add	r2, r3
 801765a:	0049      	lsls	r1, r1, #1
 801765c:	2316      	movs	r3, #22
 801765e:	462c      	mov	r4, r5
 8017660:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8017664:	19a7      	adds	r7, r4, r6
 8017666:	4297      	cmp	r7, r2
 8017668:	bfde      	ittt	le
 801766a:	1bd2      	suble	r2, r2, r7
 801766c:	19bc      	addle	r4, r7, r6
 801766e:	19ad      	addle	r5, r5, r6
 8017670:	0052      	lsls	r2, r2, #1
 8017672:	3b01      	subs	r3, #1
 8017674:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8017678:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801767c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017680:	d1f0      	bne.n	8017664 <__ieee754_sqrt+0xb0>
 8017682:	f04f 0e20 	mov.w	lr, #32
 8017686:	469c      	mov	ip, r3
 8017688:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801768c:	42a2      	cmp	r2, r4
 801768e:	eb06 070c 	add.w	r7, r6, ip
 8017692:	dc02      	bgt.n	801769a <__ieee754_sqrt+0xe6>
 8017694:	d112      	bne.n	80176bc <__ieee754_sqrt+0x108>
 8017696:	428f      	cmp	r7, r1
 8017698:	d810      	bhi.n	80176bc <__ieee754_sqrt+0x108>
 801769a:	2f00      	cmp	r7, #0
 801769c:	eb07 0c06 	add.w	ip, r7, r6
 80176a0:	da34      	bge.n	801770c <__ieee754_sqrt+0x158>
 80176a2:	f1bc 0f00 	cmp.w	ip, #0
 80176a6:	db31      	blt.n	801770c <__ieee754_sqrt+0x158>
 80176a8:	f104 0801 	add.w	r8, r4, #1
 80176ac:	1b12      	subs	r2, r2, r4
 80176ae:	428f      	cmp	r7, r1
 80176b0:	bf88      	it	hi
 80176b2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80176b6:	1bc9      	subs	r1, r1, r7
 80176b8:	4433      	add	r3, r6
 80176ba:	4644      	mov	r4, r8
 80176bc:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 80176c0:	f1be 0e01 	subs.w	lr, lr, #1
 80176c4:	443a      	add	r2, r7
 80176c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80176ca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80176ce:	d1dd      	bne.n	801768c <__ieee754_sqrt+0xd8>
 80176d0:	430a      	orrs	r2, r1
 80176d2:	d006      	beq.n	80176e2 <__ieee754_sqrt+0x12e>
 80176d4:	1c5c      	adds	r4, r3, #1
 80176d6:	bf13      	iteet	ne
 80176d8:	3301      	addne	r3, #1
 80176da:	3501      	addeq	r5, #1
 80176dc:	4673      	moveq	r3, lr
 80176de:	f023 0301 	bicne.w	r3, r3, #1
 80176e2:	106a      	asrs	r2, r5, #1
 80176e4:	085b      	lsrs	r3, r3, #1
 80176e6:	07e9      	lsls	r1, r5, #31
 80176e8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80176ec:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80176f0:	bf48      	it	mi
 80176f2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80176f6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80176fa:	461c      	mov	r4, r3
 80176fc:	e776      	b.n	80175ec <__ieee754_sqrt+0x38>
 80176fe:	0aca      	lsrs	r2, r1, #11
 8017700:	3b15      	subs	r3, #21
 8017702:	0549      	lsls	r1, r1, #21
 8017704:	e78b      	b.n	801761e <__ieee754_sqrt+0x6a>
 8017706:	0052      	lsls	r2, r2, #1
 8017708:	3001      	adds	r0, #1
 801770a:	e78b      	b.n	8017624 <__ieee754_sqrt+0x70>
 801770c:	46a0      	mov	r8, r4
 801770e:	e7cd      	b.n	80176ac <__ieee754_sqrt+0xf8>
 8017710:	7ff00000 	.word	0x7ff00000

08017714 <finite>:
 8017714:	ee10 3a90 	vmov	r3, s1
 8017718:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801771c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8017720:	0fc0      	lsrs	r0, r0, #31
 8017722:	4770      	bx	lr

08017724 <matherr>:
 8017724:	2000      	movs	r0, #0
 8017726:	4770      	bx	lr

08017728 <nan>:
 8017728:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017730 <nan+0x8>
 801772c:	4770      	bx	lr
 801772e:	bf00      	nop
 8017730:	00000000 	.word	0x00000000
 8017734:	7ff80000 	.word	0x7ff80000

08017738 <rint>:
 8017738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801773a:	ec51 0b10 	vmov	r0, r1, d0
 801773e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8017742:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 8017746:	2e13      	cmp	r6, #19
 8017748:	ee10 7a10 	vmov	r7, s0
 801774c:	460b      	mov	r3, r1
 801774e:	4602      	mov	r2, r0
 8017750:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8017754:	dc58      	bgt.n	8017808 <rint+0xd0>
 8017756:	2e00      	cmp	r6, #0
 8017758:	da2b      	bge.n	80177b2 <rint+0x7a>
 801775a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801775e:	4302      	orrs	r2, r0
 8017760:	d023      	beq.n	80177aa <rint+0x72>
 8017762:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8017766:	4302      	orrs	r2, r0
 8017768:	4251      	negs	r1, r2
 801776a:	4311      	orrs	r1, r2
 801776c:	0b09      	lsrs	r1, r1, #12
 801776e:	0c5b      	lsrs	r3, r3, #17
 8017770:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8017774:	045b      	lsls	r3, r3, #17
 8017776:	ea41 0703 	orr.w	r7, r1, r3
 801777a:	4b31      	ldr	r3, [pc, #196]	; (8017840 <rint+0x108>)
 801777c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017780:	4639      	mov	r1, r7
 8017782:	e9d3 6700 	ldrd	r6, r7, [r3]
 8017786:	ee10 0a10 	vmov	r0, s0
 801778a:	4632      	mov	r2, r6
 801778c:	463b      	mov	r3, r7
 801778e:	f7e8 fd7d 	bl	800028c <__adddf3>
 8017792:	e9cd 0100 	strd	r0, r1, [sp]
 8017796:	463b      	mov	r3, r7
 8017798:	4632      	mov	r2, r6
 801779a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801779e:	f7e8 fd73 	bl	8000288 <__aeabi_dsub>
 80177a2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80177a6:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 80177aa:	ec41 0b10 	vmov	d0, r0, r1
 80177ae:	b003      	add	sp, #12
 80177b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177b2:	4c24      	ldr	r4, [pc, #144]	; (8017844 <rint+0x10c>)
 80177b4:	4134      	asrs	r4, r6
 80177b6:	ea01 0704 	and.w	r7, r1, r4
 80177ba:	4307      	orrs	r7, r0
 80177bc:	d0f5      	beq.n	80177aa <rint+0x72>
 80177be:	0861      	lsrs	r1, r4, #1
 80177c0:	ea03 0001 	and.w	r0, r3, r1
 80177c4:	4302      	orrs	r2, r0
 80177c6:	d00b      	beq.n	80177e0 <rint+0xa8>
 80177c8:	ea23 0101 	bic.w	r1, r3, r1
 80177cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80177d0:	2e13      	cmp	r6, #19
 80177d2:	fa43 f306 	asr.w	r3, r3, r6
 80177d6:	bf0c      	ite	eq
 80177d8:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 80177dc:	2200      	movne	r2, #0
 80177de:	430b      	orrs	r3, r1
 80177e0:	4619      	mov	r1, r3
 80177e2:	4b17      	ldr	r3, [pc, #92]	; (8017840 <rint+0x108>)
 80177e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80177e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80177ec:	4610      	mov	r0, r2
 80177ee:	462b      	mov	r3, r5
 80177f0:	4622      	mov	r2, r4
 80177f2:	f7e8 fd4b 	bl	800028c <__adddf3>
 80177f6:	e9cd 0100 	strd	r0, r1, [sp]
 80177fa:	4622      	mov	r2, r4
 80177fc:	462b      	mov	r3, r5
 80177fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017802:	f7e8 fd41 	bl	8000288 <__aeabi_dsub>
 8017806:	e7d0      	b.n	80177aa <rint+0x72>
 8017808:	2e33      	cmp	r6, #51	; 0x33
 801780a:	dd08      	ble.n	801781e <rint+0xe6>
 801780c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017810:	d1cb      	bne.n	80177aa <rint+0x72>
 8017812:	ee10 2a10 	vmov	r2, s0
 8017816:	460b      	mov	r3, r1
 8017818:	f7e8 fd38 	bl	800028c <__adddf3>
 801781c:	e7c5      	b.n	80177aa <rint+0x72>
 801781e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8017822:	f04f 34ff 	mov.w	r4, #4294967295
 8017826:	40f4      	lsrs	r4, r6
 8017828:	4220      	tst	r0, r4
 801782a:	d0be      	beq.n	80177aa <rint+0x72>
 801782c:	0861      	lsrs	r1, r4, #1
 801782e:	420f      	tst	r7, r1
 8017830:	bf1f      	itttt	ne
 8017832:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8017836:	ea27 0101 	bicne.w	r1, r7, r1
 801783a:	4132      	asrne	r2, r6
 801783c:	430a      	orrne	r2, r1
 801783e:	e7cf      	b.n	80177e0 <rint+0xa8>
 8017840:	08017fd0 	.word	0x08017fd0
 8017844:	000fffff 	.word	0x000fffff

08017848 <scalbn>:
 8017848:	b570      	push	{r4, r5, r6, lr}
 801784a:	ec55 4b10 	vmov	r4, r5, d0
 801784e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8017852:	4606      	mov	r6, r0
 8017854:	462b      	mov	r3, r5
 8017856:	b9b2      	cbnz	r2, 8017886 <scalbn+0x3e>
 8017858:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801785c:	4323      	orrs	r3, r4
 801785e:	d03c      	beq.n	80178da <scalbn+0x92>
 8017860:	2200      	movs	r2, #0
 8017862:	4b33      	ldr	r3, [pc, #204]	; (8017930 <scalbn+0xe8>)
 8017864:	4629      	mov	r1, r5
 8017866:	ee10 0a10 	vmov	r0, s0
 801786a:	f7e8 fec1 	bl	80005f0 <__aeabi_dmul>
 801786e:	4a31      	ldr	r2, [pc, #196]	; (8017934 <scalbn+0xec>)
 8017870:	4296      	cmp	r6, r2
 8017872:	4604      	mov	r4, r0
 8017874:	460d      	mov	r5, r1
 8017876:	460b      	mov	r3, r1
 8017878:	da13      	bge.n	80178a2 <scalbn+0x5a>
 801787a:	a329      	add	r3, pc, #164	; (adr r3, 8017920 <scalbn+0xd8>)
 801787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017880:	f7e8 feb6 	bl	80005f0 <__aeabi_dmul>
 8017884:	e00a      	b.n	801789c <scalbn+0x54>
 8017886:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801788a:	428a      	cmp	r2, r1
 801788c:	d10c      	bne.n	80178a8 <scalbn+0x60>
 801788e:	ee10 2a10 	vmov	r2, s0
 8017892:	462b      	mov	r3, r5
 8017894:	4620      	mov	r0, r4
 8017896:	4629      	mov	r1, r5
 8017898:	f7e8 fcf8 	bl	800028c <__adddf3>
 801789c:	4604      	mov	r4, r0
 801789e:	460d      	mov	r5, r1
 80178a0:	e01b      	b.n	80178da <scalbn+0x92>
 80178a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80178a6:	3a36      	subs	r2, #54	; 0x36
 80178a8:	4432      	add	r2, r6
 80178aa:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80178ae:	428a      	cmp	r2, r1
 80178b0:	dd0b      	ble.n	80178ca <scalbn+0x82>
 80178b2:	ec45 4b11 	vmov	d1, r4, r5
 80178b6:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8017928 <scalbn+0xe0>
 80178ba:	f000 f83f 	bl	801793c <copysign>
 80178be:	a31a      	add	r3, pc, #104	; (adr r3, 8017928 <scalbn+0xe0>)
 80178c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178c4:	ec51 0b10 	vmov	r0, r1, d0
 80178c8:	e7da      	b.n	8017880 <scalbn+0x38>
 80178ca:	2a00      	cmp	r2, #0
 80178cc:	dd08      	ble.n	80178e0 <scalbn+0x98>
 80178ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80178d2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80178d6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80178da:	ec45 4b10 	vmov	d0, r4, r5
 80178de:	bd70      	pop	{r4, r5, r6, pc}
 80178e0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80178e4:	da0d      	bge.n	8017902 <scalbn+0xba>
 80178e6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80178ea:	429e      	cmp	r6, r3
 80178ec:	ec45 4b11 	vmov	d1, r4, r5
 80178f0:	dce1      	bgt.n	80178b6 <scalbn+0x6e>
 80178f2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8017920 <scalbn+0xd8>
 80178f6:	f000 f821 	bl	801793c <copysign>
 80178fa:	a309      	add	r3, pc, #36	; (adr r3, 8017920 <scalbn+0xd8>)
 80178fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017900:	e7e0      	b.n	80178c4 <scalbn+0x7c>
 8017902:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017906:	3236      	adds	r2, #54	; 0x36
 8017908:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801790c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017910:	4620      	mov	r0, r4
 8017912:	4629      	mov	r1, r5
 8017914:	2200      	movs	r2, #0
 8017916:	4b08      	ldr	r3, [pc, #32]	; (8017938 <scalbn+0xf0>)
 8017918:	e7b2      	b.n	8017880 <scalbn+0x38>
 801791a:	bf00      	nop
 801791c:	f3af 8000 	nop.w
 8017920:	c2f8f359 	.word	0xc2f8f359
 8017924:	01a56e1f 	.word	0x01a56e1f
 8017928:	8800759c 	.word	0x8800759c
 801792c:	7e37e43c 	.word	0x7e37e43c
 8017930:	43500000 	.word	0x43500000
 8017934:	ffff3cb0 	.word	0xffff3cb0
 8017938:	3c900000 	.word	0x3c900000

0801793c <copysign>:
 801793c:	ec53 2b10 	vmov	r2, r3, d0
 8017940:	ee11 0a90 	vmov	r0, s3
 8017944:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017948:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801794c:	ea41 0300 	orr.w	r3, r1, r0
 8017950:	ec43 2b10 	vmov	d0, r2, r3
 8017954:	4770      	bx	lr
	...

08017958 <__errno>:
 8017958:	4b01      	ldr	r3, [pc, #4]	; (8017960 <__errno+0x8>)
 801795a:	6818      	ldr	r0, [r3, #0]
 801795c:	4770      	bx	lr
 801795e:	bf00      	nop
 8017960:	200002a8 	.word	0x200002a8

08017964 <_sbrk>:
 8017964:	4b04      	ldr	r3, [pc, #16]	; (8017978 <_sbrk+0x14>)
 8017966:	6819      	ldr	r1, [r3, #0]
 8017968:	4602      	mov	r2, r0
 801796a:	b909      	cbnz	r1, 8017970 <_sbrk+0xc>
 801796c:	4903      	ldr	r1, [pc, #12]	; (801797c <_sbrk+0x18>)
 801796e:	6019      	str	r1, [r3, #0]
 8017970:	6818      	ldr	r0, [r3, #0]
 8017972:	4402      	add	r2, r0
 8017974:	601a      	str	r2, [r3, #0]
 8017976:	4770      	bx	lr
 8017978:	20000868 	.word	0x20000868
 801797c:	2000b024 	.word	0x2000b024

08017980 <_init>:
 8017980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017982:	bf00      	nop
 8017984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017986:	bc08      	pop	{r3}
 8017988:	469e      	mov	lr, r3
 801798a:	4770      	bx	lr

0801798c <_fini>:
 801798c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801798e:	bf00      	nop
 8017990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017992:	bc08      	pop	{r3}
 8017994:	469e      	mov	lr, r3
 8017996:	4770      	bx	lr
