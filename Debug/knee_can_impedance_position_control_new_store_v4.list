
knee_can_impedance_position_control_new_store_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011c0  0800dd70  0800dd70  0001dd70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ef30  0800ef30  0001ef30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ef38  0800ef38  0001ef38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ef3c  0800ef3c  0001ef3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000004bc  20000000  0800ef40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  000204bc  2**0
                  CONTENTS
  8 .bss          0000d048  200004c0  200004c0  000204c0  2**3
                  ALLOC
  9 ._user_heap_stack 00000400  2000d508  2000d508  000204c0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000204bc  2**0
                  CONTENTS, READONLY
 11 .debug_info   00068402  00000000  00000000  000204ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000b564  00000000  00000000  000888ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002430  00000000  00000000  00093e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001d180  00000000  00000000  00096288  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000ce13  00000000  00000000  000b3408  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000c021b  2**0
                  CONTENTS, READONLY
 17 .debug_loc    0002065e  00000000  00000000  000c0297  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000040f8  00000000  00000000  000e08f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame  00007514  00000000  00000000  000e49f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004c0 	.word	0x200004c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd54 	.word	0x0800dd54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004c4 	.word	0x200004c4
 80001cc:	0800dd54 	.word	0x0800dd54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b97a 	b.w	8000f4c <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	460d      	mov	r5, r1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	9e08      	ldr	r6, [sp, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d151      	bne.n	8000d24 <__udivmoddi4+0xb4>
 8000c80:	428a      	cmp	r2, r1
 8000c82:	4617      	mov	r7, r2
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0xf2>
 8000c86:	fab2 fe82 	clz	lr, r2
 8000c8a:	f1be 0f00 	cmp.w	lr, #0
 8000c8e:	d00b      	beq.n	8000ca8 <__udivmoddi4+0x38>
 8000c90:	f1ce 0c20 	rsb	ip, lr, #32
 8000c94:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c98:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c9c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ca0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ca4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ca8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cac:	0c25      	lsrs	r5, r4, #16
 8000cae:	fbbc f8fa 	udiv	r8, ip, sl
 8000cb2:	fa1f f987 	uxth.w	r9, r7
 8000cb6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cbe:	fb08 f309 	mul.w	r3, r8, r9
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x6c>
 8000cc6:	19ed      	adds	r5, r5, r7
 8000cc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ccc:	f080 8123 	bcs.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	f240 8120 	bls.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	443d      	add	r5, r7
 8000cdc:	1aed      	subs	r5, r5, r3
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ce4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ce8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cec:	fb00 f909 	mul.w	r9, r0, r9
 8000cf0:	45a1      	cmp	r9, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x98>
 8000cf4:	19e4      	adds	r4, r4, r7
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 810a 	bcs.w	8000f12 <__udivmoddi4+0x2a2>
 8000cfe:	45a1      	cmp	r9, r4
 8000d00:	f240 8107 	bls.w	8000f12 <__udivmoddi4+0x2a2>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	eba4 0409 	sub.w	r4, r4, r9
 8000d0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d10:	2100      	movs	r1, #0
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d061      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d16:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	6034      	str	r4, [r6, #0]
 8000d1e:	6073      	str	r3, [r6, #4]
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0xc8>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d054      	beq.n	8000dd6 <__udivmoddi4+0x166>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	f040 808e 	bne.w	8000e5e <__udivmoddi4+0x1ee>
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xdc>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2d0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	46ac      	mov	ip, r5
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d03f      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d5a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	b912      	cbnz	r2, 8000d6a <__udivmoddi4+0xfa>
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d6a:	fab7 fe87 	clz	lr, r7
 8000d6e:	f1be 0f00 	cmp.w	lr, #0
 8000d72:	d134      	bne.n	8000dde <__udivmoddi4+0x16e>
 8000d74:	1beb      	subs	r3, r5, r7
 8000d76:	0c3a      	lsrs	r2, r7, #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d82:	0c25      	lsrs	r5, r4, #16
 8000d84:	fb02 3318 	mls	r3, r2, r8, r3
 8000d88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d8c:	fb0c f308 	mul.w	r3, ip, r8
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x134>
 8000d94:	19ed      	adds	r5, r5, r7
 8000d96:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x132>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	f200 80d1 	bhi.w	8000f44 <__udivmoddi4+0x2d4>
 8000da2:	4680      	mov	r8, r0
 8000da4:	1aed      	subs	r5, r5, r3
 8000da6:	b2a3      	uxth	r3, r4
 8000da8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dac:	fb02 5510 	mls	r5, r2, r0, r5
 8000db0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000db4:	fb0c fc00 	mul.w	ip, ip, r0
 8000db8:	45a4      	cmp	ip, r4
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x15c>
 8000dbc:	19e4      	adds	r4, r4, r7
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x15a>
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	f200 80b8 	bhi.w	8000f3a <__udivmoddi4+0x2ca>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	eba4 040c 	sub.w	r4, r4, ip
 8000dd0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd4:	e79d      	b.n	8000d12 <__udivmoddi4+0xa2>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	f1ce 0420 	rsb	r4, lr, #32
 8000de2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000de6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dea:	fa20 f804 	lsr.w	r8, r0, r4
 8000dee:	0c3a      	lsrs	r2, r7, #16
 8000df0:	fa25 f404 	lsr.w	r4, r5, r4
 8000df4:	ea48 0803 	orr.w	r8, r8, r3
 8000df8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dfc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e00:	fb02 4411 	mls	r4, r2, r1, r4
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e0c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e10:	42ab      	cmp	r3, r5
 8000e12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e16:	d909      	bls.n	8000e2c <__udivmoddi4+0x1bc>
 8000e18:	19ed      	adds	r5, r5, r7
 8000e1a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e1e:	f080 808a 	bcs.w	8000f36 <__udivmoddi4+0x2c6>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	f240 8087 	bls.w	8000f36 <__udivmoddi4+0x2c6>
 8000e28:	3902      	subs	r1, #2
 8000e2a:	443d      	add	r5, r7
 8000e2c:	1aeb      	subs	r3, r5, r3
 8000e2e:	fa1f f588 	uxth.w	r5, r8
 8000e32:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e36:	fb02 3310 	mls	r3, r2, r0, r3
 8000e3a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e3e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1e6>
 8000e46:	19ed      	adds	r5, r5, r7
 8000e48:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4c:	d26f      	bcs.n	8000f2e <__udivmoddi4+0x2be>
 8000e4e:	42ab      	cmp	r3, r5
 8000e50:	d96d      	bls.n	8000f2e <__udivmoddi4+0x2be>
 8000e52:	3802      	subs	r0, #2
 8000e54:	443d      	add	r5, r7
 8000e56:	1aeb      	subs	r3, r5, r3
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	e78f      	b.n	8000d7e <__udivmoddi4+0x10e>
 8000e5e:	f1c1 0720 	rsb	r7, r1, #32
 8000e62:	fa22 f807 	lsr.w	r8, r2, r7
 8000e66:	408b      	lsls	r3, r1
 8000e68:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6c:	ea48 0303 	orr.w	r3, r8, r3
 8000e70:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e7e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e82:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e86:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e8a:	fa1f f883 	uxth.w	r8, r3
 8000e8e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e92:	fb09 f408 	mul.w	r4, r9, r8
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x244>
 8000ea2:	18ed      	adds	r5, r5, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	d243      	bcs.n	8000f32 <__udivmoddi4+0x2c2>
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	d941      	bls.n	8000f32 <__udivmoddi4+0x2c2>
 8000eae:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb2:	441d      	add	r5, r3
 8000eb4:	1b2d      	subs	r5, r5, r4
 8000eb6:	fa1f fe8e 	uxth.w	lr, lr
 8000eba:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ebe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ec2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ec6:	fb00 f808 	mul.w	r8, r0, r8
 8000eca:	45a0      	cmp	r8, r4
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x26e>
 8000ece:	18e4      	adds	r4, r4, r3
 8000ed0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ed4:	d229      	bcs.n	8000f2a <__udivmoddi4+0x2ba>
 8000ed6:	45a0      	cmp	r8, r4
 8000ed8:	d927      	bls.n	8000f2a <__udivmoddi4+0x2ba>
 8000eda:	3802      	subs	r0, #2
 8000edc:	441c      	add	r4, r3
 8000ede:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	454c      	cmp	r4, r9
 8000eec:	46c6      	mov	lr, r8
 8000eee:	464d      	mov	r5, r9
 8000ef0:	d315      	bcc.n	8000f1e <__udivmoddi4+0x2ae>
 8000ef2:	d012      	beq.n	8000f1a <__udivmoddi4+0x2aa>
 8000ef4:	b156      	cbz	r6, 8000f0c <__udivmoddi4+0x29c>
 8000ef6:	ebba 030e 	subs.w	r3, sl, lr
 8000efa:	eb64 0405 	sbc.w	r4, r4, r5
 8000efe:	fa04 f707 	lsl.w	r7, r4, r7
 8000f02:	40cb      	lsrs	r3, r1
 8000f04:	431f      	orrs	r7, r3
 8000f06:	40cc      	lsrs	r4, r1
 8000f08:	6037      	str	r7, [r6, #0]
 8000f0a:	6074      	str	r4, [r6, #4]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	4618      	mov	r0, r3
 8000f14:	e6f8      	b.n	8000d08 <__udivmoddi4+0x98>
 8000f16:	4690      	mov	r8, r2
 8000f18:	e6e0      	b.n	8000cdc <__udivmoddi4+0x6c>
 8000f1a:	45c2      	cmp	sl, r8
 8000f1c:	d2ea      	bcs.n	8000ef4 <__udivmoddi4+0x284>
 8000f1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f22:	eb69 0503 	sbc.w	r5, r9, r3
 8000f26:	3801      	subs	r0, #1
 8000f28:	e7e4      	b.n	8000ef4 <__udivmoddi4+0x284>
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	e7d7      	b.n	8000ede <__udivmoddi4+0x26e>
 8000f2e:	4640      	mov	r0, r8
 8000f30:	e791      	b.n	8000e56 <__udivmoddi4+0x1e6>
 8000f32:	4681      	mov	r9, r0
 8000f34:	e7be      	b.n	8000eb4 <__udivmoddi4+0x244>
 8000f36:	4601      	mov	r1, r0
 8000f38:	e778      	b.n	8000e2c <__udivmoddi4+0x1bc>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	443c      	add	r4, r7
 8000f3e:	e745      	b.n	8000dcc <__udivmoddi4+0x15c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xe6>
 8000f44:	f1a8 0802 	sub.w	r8, r8, #2
 8000f48:	443d      	add	r5, r7
 8000f4a:	e72b      	b.n	8000da4 <__udivmoddi4+0x134>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <SD_initialize>:
 8000f50:	b510      	push	{r4, lr}
 8000f52:	4c06      	ldr	r4, [pc, #24]	; (8000f6c <SD_initialize+0x1c>)
 8000f54:	2301      	movs	r3, #1
 8000f56:	7023      	strb	r3, [r4, #0]
 8000f58:	f006 fa5c 	bl	8007414 <BSP_SD_Init>
 8000f5c:	4623      	mov	r3, r4
 8000f5e:	b918      	cbnz	r0, 8000f68 <SD_initialize+0x18>
 8000f60:	7822      	ldrb	r2, [r4, #0]
 8000f62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000f66:	7022      	strb	r2, [r4, #0]
 8000f68:	7818      	ldrb	r0, [r3, #0]
 8000f6a:	bd10      	pop	{r4, pc}
 8000f6c:	20000000 	.word	0x20000000

08000f70 <SD_status>:
 8000f70:	b510      	push	{r4, lr}
 8000f72:	4c06      	ldr	r4, [pc, #24]	; (8000f8c <SD_status+0x1c>)
 8000f74:	2301      	movs	r3, #1
 8000f76:	7023      	strb	r3, [r4, #0]
 8000f78:	f006 f9b6 	bl	80072e8 <BSP_SD_GetStatus>
 8000f7c:	4623      	mov	r3, r4
 8000f7e:	b918      	cbnz	r0, 8000f88 <SD_status+0x18>
 8000f80:	7822      	ldrb	r2, [r4, #0]
 8000f82:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000f86:	7022      	strb	r2, [r4, #0]
 8000f88:	7818      	ldrb	r0, [r3, #0]
 8000f8a:	bd10      	pop	{r4, pc}
 8000f8c:	20000000 	.word	0x20000000

08000f90 <SD_read>:
 8000f90:	b507      	push	{r0, r1, r2, lr}
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	0252      	lsls	r2, r2, #9
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	4608      	mov	r0, r1
 8000fa0:	f006 f9e0 	bl	8007364 <BSP_SD_ReadBlocks_DMA>
 8000fa4:	3000      	adds	r0, #0
 8000fa6:	bf18      	it	ne
 8000fa8:	2001      	movne	r0, #1
 8000faa:	b003      	add	sp, #12
 8000fac:	f85d fb04 	ldr.w	pc, [sp], #4

08000fb0 <SD_write>:
 8000fb0:	b507      	push	{r0, r1, r2, lr}
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	0252      	lsls	r2, r2, #9
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	f006 faaa 	bl	8007518 <BSP_SD_WriteBlocks_DMA>
 8000fc4:	3000      	adds	r0, #0
 8000fc6:	bf18      	it	ne
 8000fc8:	2001      	movne	r0, #1
 8000fca:	b003      	add	sp, #12
 8000fcc:	f85d fb04 	ldr.w	pc, [sp], #4

08000fd0 <SD_ioctl>:
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <SD_ioctl+0x4c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	07db      	lsls	r3, r3, #31
 8000fd8:	b096      	sub	sp, #88	; 0x58
 8000fda:	4614      	mov	r4, r2
 8000fdc:	d41c      	bmi.n	8001018 <SD_ioctl+0x48>
 8000fde:	2903      	cmp	r1, #3
 8000fe0:	d803      	bhi.n	8000fea <SD_ioctl+0x1a>
 8000fe2:	e8df f001 	tbb	[pc, r1]
 8000fe6:	050e      	.short	0x050e
 8000fe8:	1410      	.short	0x1410
 8000fea:	2004      	movs	r0, #4
 8000fec:	b016      	add	sp, #88	; 0x58
 8000fee:	bd10      	pop	{r4, pc}
 8000ff0:	4668      	mov	r0, sp
 8000ff2:	f006 f97f 	bl	80072f4 <BSP_SD_GetCardInfo>
 8000ff6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000ff8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8000ffa:	0a5b      	lsrs	r3, r3, #9
 8000ffc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8001000:	6023      	str	r3, [r4, #0]
 8001002:	2000      	movs	r0, #0
 8001004:	e7f2      	b.n	8000fec <SD_ioctl+0x1c>
 8001006:	f44f 7300 	mov.w	r3, #512	; 0x200
 800100a:	8013      	strh	r3, [r2, #0]
 800100c:	e7f9      	b.n	8001002 <SD_ioctl+0x32>
 800100e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	2001      	movs	r0, #1
 8001016:	e7e9      	b.n	8000fec <SD_ioctl+0x1c>
 8001018:	2003      	movs	r0, #3
 800101a:	e7e7      	b.n	8000fec <SD_ioctl+0x1c>
 800101c:	20000000 	.word	0x20000000

08001020 <disk_status>:
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <disk_status+0x10>)
 8001022:	181a      	adds	r2, r3, r0
 8001024:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001028:	7a10      	ldrb	r0, [r2, #8]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	4718      	bx	r3
 8001030:	200004fc 	.word	0x200004fc

08001034 <disk_initialize>:
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <disk_initialize+0x1c>)
 8001036:	5c1a      	ldrb	r2, [r3, r0]
 8001038:	b942      	cbnz	r2, 800104c <disk_initialize+0x18>
 800103a:	2201      	movs	r2, #1
 800103c:	541a      	strb	r2, [r3, r0]
 800103e:	181a      	adds	r2, r3, r0
 8001040:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001044:	7a10      	ldrb	r0, [r2, #8]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4718      	bx	r3
 800104c:	2000      	movs	r0, #0
 800104e:	4770      	bx	lr
 8001050:	200004fc 	.word	0x200004fc

08001054 <disk_read>:
 8001054:	b430      	push	{r4, r5}
 8001056:	4c05      	ldr	r4, [pc, #20]	; (800106c <disk_read+0x18>)
 8001058:	1825      	adds	r5, r4, r0
 800105a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800105e:	6860      	ldr	r0, [r4, #4]
 8001060:	6884      	ldr	r4, [r0, #8]
 8001062:	7a28      	ldrb	r0, [r5, #8]
 8001064:	46a4      	mov	ip, r4
 8001066:	bc30      	pop	{r4, r5}
 8001068:	4760      	bx	ip
 800106a:	bf00      	nop
 800106c:	200004fc 	.word	0x200004fc

08001070 <disk_write>:
 8001070:	b430      	push	{r4, r5}
 8001072:	4c05      	ldr	r4, [pc, #20]	; (8001088 <disk_write+0x18>)
 8001074:	1825      	adds	r5, r4, r0
 8001076:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800107a:	6860      	ldr	r0, [r4, #4]
 800107c:	68c4      	ldr	r4, [r0, #12]
 800107e:	7a28      	ldrb	r0, [r5, #8]
 8001080:	46a4      	mov	ip, r4
 8001082:	bc30      	pop	{r4, r5}
 8001084:	4760      	bx	ip
 8001086:	bf00      	nop
 8001088:	200004fc 	.word	0x200004fc

0800108c <disk_ioctl>:
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <disk_ioctl+0x18>)
 800108e:	b410      	push	{r4}
 8001090:	181c      	adds	r4, r3, r0
 8001092:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001096:	7a20      	ldrb	r0, [r4, #8]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	4718      	bx	r3
 80010a2:	bf00      	nop
 80010a4:	200004fc 	.word	0x200004fc

080010a8 <mem_cpy>:
 80010a8:	3801      	subs	r0, #1
 80010aa:	440a      	add	r2, r1
 80010ac:	4291      	cmp	r1, r2
 80010ae:	d100      	bne.n	80010b2 <mem_cpy+0xa>
 80010b0:	4770      	bx	lr
 80010b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80010b6:	f800 3f01 	strb.w	r3, [r0, #1]!
 80010ba:	e7f7      	b.n	80010ac <mem_cpy+0x4>

080010bc <mem_set>:
 80010bc:	4402      	add	r2, r0
 80010be:	4290      	cmp	r0, r2
 80010c0:	d100      	bne.n	80010c4 <mem_set+0x8>
 80010c2:	4770      	bx	lr
 80010c4:	f800 1b01 	strb.w	r1, [r0], #1
 80010c8:	e7f9      	b.n	80010be <mem_set+0x2>
	...

080010cc <chk_lock>:
 80010cc:	4a17      	ldr	r2, [pc, #92]	; (800112c <chk_lock+0x60>)
 80010ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d0:	2400      	movs	r4, #0
 80010d2:	4623      	mov	r3, r4
 80010d4:	4616      	mov	r6, r2
 80010d6:	6815      	ldr	r5, [r2, #0]
 80010d8:	b1c5      	cbz	r5, 800110c <chk_lock+0x40>
 80010da:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
 80010de:	42bd      	cmp	r5, r7
 80010e0:	d115      	bne.n	800110e <chk_lock+0x42>
 80010e2:	6857      	ldr	r7, [r2, #4]
 80010e4:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 80010e8:	42af      	cmp	r7, r5
 80010ea:	d110      	bne.n	800110e <chk_lock+0x42>
 80010ec:	8917      	ldrh	r7, [r2, #8]
 80010ee:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 80010f2:	42af      	cmp	r7, r5
 80010f4:	d10b      	bne.n	800110e <chk_lock+0x42>
 80010f6:	b9b9      	cbnz	r1, 8001128 <chk_lock+0x5c>
 80010f8:	220c      	movs	r2, #12
 80010fa:	fb02 6303 	mla	r3, r2, r3, r6
 80010fe:	895b      	ldrh	r3, [r3, #10]
 8001100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001104:	bf14      	ite	ne
 8001106:	2000      	movne	r0, #0
 8001108:	2010      	moveq	r0, #16
 800110a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800110c:	2401      	movs	r4, #1
 800110e:	3301      	adds	r3, #1
 8001110:	2b02      	cmp	r3, #2
 8001112:	f102 020c 	add.w	r2, r2, #12
 8001116:	d1de      	bne.n	80010d6 <chk_lock+0xa>
 8001118:	b10c      	cbz	r4, 800111e <chk_lock+0x52>
 800111a:	2000      	movs	r0, #0
 800111c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800111e:	2902      	cmp	r1, #2
 8001120:	bf0c      	ite	eq
 8001122:	2000      	moveq	r0, #0
 8001124:	2012      	movne	r0, #18
 8001126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001128:	2010      	movs	r0, #16
 800112a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800112c:	200004e0 	.word	0x200004e0

08001130 <inc_lock>:
 8001130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001132:	4c20      	ldr	r4, [pc, #128]	; (80011b4 <inc_lock+0x84>)
 8001134:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
 8001138:	2300      	movs	r3, #0
 800113a:	4622      	mov	r2, r4
 800113c:	6825      	ldr	r5, [r4, #0]
 800113e:	42b5      	cmp	r5, r6
 8001140:	d109      	bne.n	8001156 <inc_lock+0x26>
 8001142:	6867      	ldr	r7, [r4, #4]
 8001144:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8001148:	42af      	cmp	r7, r5
 800114a:	d104      	bne.n	8001156 <inc_lock+0x26>
 800114c:	8927      	ldrh	r7, [r4, #8]
 800114e:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8001152:	42af      	cmp	r7, r5
 8001154:	d022      	beq.n	800119c <inc_lock+0x6c>
 8001156:	3301      	adds	r3, #1
 8001158:	2b02      	cmp	r3, #2
 800115a:	f104 040c 	add.w	r4, r4, #12
 800115e:	d1ed      	bne.n	800113c <inc_lock+0xc>
 8001160:	6813      	ldr	r3, [r2, #0]
 8001162:	b113      	cbz	r3, 800116a <inc_lock+0x3a>
 8001164:	68d3      	ldr	r3, [r2, #12]
 8001166:	bb1b      	cbnz	r3, 80011b0 <inc_lock+0x80>
 8001168:	2301      	movs	r3, #1
 800116a:	240c      	movs	r4, #12
 800116c:	435c      	muls	r4, r3
 800116e:	1915      	adds	r5, r2, r4
 8001170:	5116      	str	r6, [r2, r4]
 8001172:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
 8001176:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
 800117a:	8128      	strh	r0, [r5, #8]
 800117c:	2000      	movs	r0, #0
 800117e:	606c      	str	r4, [r5, #4]
 8001180:	8168      	strh	r0, [r5, #10]
 8001182:	b991      	cbnz	r1, 80011aa <inc_lock+0x7a>
 8001184:	210c      	movs	r1, #12
 8001186:	fb01 2103 	mla	r1, r1, r3, r2
 800118a:	8949      	ldrh	r1, [r1, #10]
 800118c:	3101      	adds	r1, #1
 800118e:	b289      	uxth	r1, r1
 8001190:	200c      	movs	r0, #12
 8001192:	fb00 2203 	mla	r2, r0, r3, r2
 8001196:	1c58      	adds	r0, r3, #1
 8001198:	8151      	strh	r1, [r2, #10]
 800119a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119c:	2900      	cmp	r1, #0
 800119e:	d0f1      	beq.n	8001184 <inc_lock+0x54>
 80011a0:	210c      	movs	r1, #12
 80011a2:	fb01 2103 	mla	r1, r1, r3, r2
 80011a6:	8949      	ldrh	r1, [r1, #10]
 80011a8:	b911      	cbnz	r1, 80011b0 <inc_lock+0x80>
 80011aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ae:	e7ef      	b.n	8001190 <inc_lock+0x60>
 80011b0:	2000      	movs	r0, #0
 80011b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b4:	200004e0 	.word	0x200004e0

080011b8 <dec_lock>:
 80011b8:	b530      	push	{r4, r5, lr}
 80011ba:	1e45      	subs	r5, r0, #1
 80011bc:	2d01      	cmp	r5, #1
 80011be:	d811      	bhi.n	80011e4 <dec_lock+0x2c>
 80011c0:	490a      	ldr	r1, [pc, #40]	; (80011ec <dec_lock+0x34>)
 80011c2:	220c      	movs	r2, #12
 80011c4:	fb02 1305 	mla	r3, r2, r5, r1
 80011c8:	895c      	ldrh	r4, [r3, #10]
 80011ca:	f424 7380 	bic.w	r3, r4, #256	; 0x100
 80011ce:	b298      	uxth	r0, r3
 80011d0:	b108      	cbz	r0, 80011d6 <dec_lock+0x1e>
 80011d2:	3c01      	subs	r4, #1
 80011d4:	b2a0      	uxth	r0, r4
 80011d6:	fb02 f305 	mul.w	r3, r2, r5
 80011da:	18ca      	adds	r2, r1, r3
 80011dc:	8150      	strh	r0, [r2, #10]
 80011de:	b918      	cbnz	r0, 80011e8 <dec_lock+0x30>
 80011e0:	50c8      	str	r0, [r1, r3]
 80011e2:	bd30      	pop	{r4, r5, pc}
 80011e4:	2002      	movs	r0, #2
 80011e6:	bd30      	pop	{r4, r5, pc}
 80011e8:	2000      	movs	r0, #0
 80011ea:	bd30      	pop	{r4, r5, pc}
 80011ec:	200004e0 	.word	0x200004e0

080011f0 <clmt_clust>:
 80011f0:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
 80011f4:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
 80011f8:	3304      	adds	r3, #4
 80011fa:	0a49      	lsrs	r1, r1, #9
 80011fc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8001200:	fbb1 f1f2 	udiv	r1, r1, r2
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	b130      	cbz	r0, 8001216 <clmt_clust+0x26>
 8001208:	4281      	cmp	r1, r0
 800120a:	d302      	bcc.n	8001212 <clmt_clust+0x22>
 800120c:	1a09      	subs	r1, r1, r0
 800120e:	3308      	adds	r3, #8
 8001210:	e7f8      	b.n	8001204 <clmt_clust+0x14>
 8001212:	6858      	ldr	r0, [r3, #4]
 8001214:	4408      	add	r0, r1
 8001216:	4770      	bx	lr

08001218 <get_fileinfo>:
 8001218:	f8d0 2210 	ldr.w	r2, [r0, #528]	; 0x210
 800121c:	b570      	push	{r4, r5, r6, lr}
 800121e:	f101 0309 	add.w	r3, r1, #9
 8001222:	b322      	cbz	r2, 800126e <get_fileinfo+0x56>
 8001224:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8001228:	2400      	movs	r4, #0
 800122a:	1e55      	subs	r5, r2, #1
 800122c:	262e      	movs	r6, #46	; 0x2e
 800122e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001232:	2820      	cmp	r0, #32
 8001234:	f104 0401 	add.w	r4, r4, #1
 8001238:	d009      	beq.n	800124e <get_fileinfo+0x36>
 800123a:	2805      	cmp	r0, #5
 800123c:	bf08      	it	eq
 800123e:	20e5      	moveq	r0, #229	; 0xe5
 8001240:	2c09      	cmp	r4, #9
 8001242:	bf04      	itt	eq
 8001244:	701e      	strbeq	r6, [r3, #0]
 8001246:	3301      	addeq	r3, #1
 8001248:	3301      	adds	r3, #1
 800124a:	f803 0c01 	strb.w	r0, [r3, #-1]
 800124e:	2c0b      	cmp	r4, #11
 8001250:	d1ed      	bne.n	800122e <get_fileinfo+0x16>
 8001252:	7ad0      	ldrb	r0, [r2, #11]
 8001254:	7208      	strb	r0, [r1, #8]
 8001256:	69d0      	ldr	r0, [r2, #28]
 8001258:	6008      	str	r0, [r1, #0]
 800125a:	7e54      	ldrb	r4, [r2, #25]
 800125c:	7e10      	ldrb	r0, [r2, #24]
 800125e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8001262:	8088      	strh	r0, [r1, #4]
 8001264:	7dd0      	ldrb	r0, [r2, #23]
 8001266:	7d92      	ldrb	r2, [r2, #22]
 8001268:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800126c:	80ca      	strh	r2, [r1, #6]
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
 8001272:	bd70      	pop	{r4, r5, r6, pc}

08001274 <get_ldnumber>:
 8001274:	6802      	ldr	r2, [r0, #0]
 8001276:	b510      	push	{r4, lr}
 8001278:	b152      	cbz	r2, 8001290 <get_ldnumber+0x1c>
 800127a:	4611      	mov	r1, r2
 800127c:	460b      	mov	r3, r1
 800127e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001282:	2c20      	cmp	r4, #32
 8001284:	d90c      	bls.n	80012a0 <get_ldnumber+0x2c>
 8001286:	2c3a      	cmp	r4, #58	; 0x3a
 8001288:	d1f8      	bne.n	800127c <get_ldnumber+0x8>
 800128a:	1c51      	adds	r1, r2, #1
 800128c:	428b      	cmp	r3, r1
 800128e:	d002      	beq.n	8001296 <get_ldnumber+0x22>
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	bd10      	pop	{r4, pc}
 8001296:	7812      	ldrb	r2, [r2, #0]
 8001298:	2a30      	cmp	r2, #48	; 0x30
 800129a:	d1f9      	bne.n	8001290 <get_ldnumber+0x1c>
 800129c:	3301      	adds	r3, #1
 800129e:	6003      	str	r3, [r0, #0]
 80012a0:	2000      	movs	r0, #0
 80012a2:	bd10      	pop	{r4, pc}

080012a4 <validate>:
 80012a4:	b508      	push	{r3, lr}
 80012a6:	b190      	cbz	r0, 80012ce <validate+0x2a>
 80012a8:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 80012ac:	b17b      	cbz	r3, 80012ce <validate+0x2a>
 80012ae:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 80012b2:	b162      	cbz	r2, 80012ce <validate+0x2a>
 80012b4:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 80012b8:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 80012bc:	4291      	cmp	r1, r2
 80012be:	d106      	bne.n	80012ce <validate+0x2a>
 80012c0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80012c4:	f7ff feac 	bl	8001020 <disk_status>
 80012c8:	f010 0001 	ands.w	r0, r0, #1
 80012cc:	d000      	beq.n	80012d0 <validate+0x2c>
 80012ce:	2009      	movs	r0, #9
 80012d0:	bd08      	pop	{r3, pc}

080012d2 <ld_clust.isra.0>:
 80012d2:	7eca      	ldrb	r2, [r1, #27]
 80012d4:	7e8b      	ldrb	r3, [r1, #26]
 80012d6:	2803      	cmp	r0, #3
 80012d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80012dc:	bf01      	itttt	eq
 80012de:	7d48      	ldrbeq	r0, [r1, #21]
 80012e0:	7d0a      	ldrbeq	r2, [r1, #20]
 80012e2:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 80012e6:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
 80012ea:	4618      	mov	r0, r3
 80012ec:	4770      	bx	lr

080012ee <sync_window.part.2>:
 80012ee:	b570      	push	{r4, r5, r6, lr}
 80012f0:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
 80012f4:	4604      	mov	r4, r0
 80012f6:	4601      	mov	r1, r0
 80012f8:	2301      	movs	r3, #1
 80012fa:	462a      	mov	r2, r5
 80012fc:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8001300:	f7ff feb6 	bl	8001070 <disk_write>
 8001304:	b9d0      	cbnz	r0, 800133c <sync_window.part.2+0x4e>
 8001306:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800130a:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800130e:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
 8001312:	1aeb      	subs	r3, r5, r3
 8001314:	4293      	cmp	r3, r2
 8001316:	d301      	bcc.n	800131c <sync_window.part.2+0x2e>
 8001318:	2000      	movs	r0, #0
 800131a:	bd70      	pop	{r4, r5, r6, pc}
 800131c:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 8001320:	2e01      	cmp	r6, #1
 8001322:	d9f9      	bls.n	8001318 <sync_window.part.2+0x2a>
 8001324:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8001328:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 800132c:	441d      	add	r5, r3
 800132e:	462a      	mov	r2, r5
 8001330:	2301      	movs	r3, #1
 8001332:	4621      	mov	r1, r4
 8001334:	f7ff fe9c 	bl	8001070 <disk_write>
 8001338:	3e01      	subs	r6, #1
 800133a:	e7f1      	b.n	8001320 <sync_window.part.2+0x32>
 800133c:	2001      	movs	r0, #1
 800133e:	bd70      	pop	{r4, r5, r6, pc}

08001340 <sync_window>:
 8001340:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8001344:	b10b      	cbz	r3, 800134a <sync_window+0xa>
 8001346:	f7ff bfd2 	b.w	80012ee <sync_window.part.2>
 800134a:	4618      	mov	r0, r3
 800134c:	4770      	bx	lr

0800134e <sync_fs>:
 800134e:	b538      	push	{r3, r4, r5, lr}
 8001350:	4604      	mov	r4, r0
 8001352:	f7ff fff5 	bl	8001340 <sync_window>
 8001356:	4605      	mov	r5, r0
 8001358:	2800      	cmp	r0, #0
 800135a:	d154      	bne.n	8001406 <sync_fs+0xb8>
 800135c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8001360:	2b03      	cmp	r3, #3
 8001362:	d147      	bne.n	80013f4 <sync_fs+0xa6>
 8001364:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8001368:	2b01      	cmp	r3, #1
 800136a:	d143      	bne.n	80013f4 <sync_fs+0xa6>
 800136c:	4601      	mov	r1, r0
 800136e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001372:	4620      	mov	r0, r4
 8001374:	f7ff fea2 	bl	80010bc <mem_set>
 8001378:	2255      	movs	r2, #85	; 0x55
 800137a:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
 800137e:	22aa      	movs	r2, #170	; 0xaa
 8001380:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
 8001384:	2252      	movs	r2, #82	; 0x52
 8001386:	7022      	strb	r2, [r4, #0]
 8001388:	7062      	strb	r2, [r4, #1]
 800138a:	2261      	movs	r2, #97	; 0x61
 800138c:	70a2      	strb	r2, [r4, #2]
 800138e:	f884 21e7 	strb.w	r2, [r4, #487]	; 0x1e7
 8001392:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8001396:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
 800139a:	2141      	movs	r1, #65	; 0x41
 800139c:	70e1      	strb	r1, [r4, #3]
 800139e:	f884 11e6 	strb.w	r1, [r4, #486]	; 0x1e6
 80013a2:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80013a6:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 80013aa:	0c11      	lsrs	r1, r2, #16
 80013ac:	0e12      	lsrs	r2, r2, #24
 80013ae:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
 80013b2:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 80013b6:	f884 11ea 	strb.w	r1, [r4, #490]	; 0x1ea
 80013ba:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80013be:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 80013c2:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 80013c6:	0c11      	lsrs	r1, r2, #16
 80013c8:	0e12      	lsrs	r2, r2, #24
 80013ca:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
 80013ce:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 80013d2:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
 80013d6:	2072      	movs	r0, #114	; 0x72
 80013d8:	3201      	adds	r2, #1
 80013da:	f884 01e4 	strb.w	r0, [r4, #484]	; 0x1e4
 80013de:	f884 01e5 	strb.w	r0, [r4, #485]	; 0x1e5
 80013e2:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
 80013e6:	4621      	mov	r1, r4
 80013e8:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80013ec:	f7ff fe40 	bl	8001070 <disk_write>
 80013f0:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
 80013f4:	2200      	movs	r2, #0
 80013f6:	4611      	mov	r1, r2
 80013f8:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80013fc:	f7ff fe46 	bl	800108c <disk_ioctl>
 8001400:	3000      	adds	r0, #0
 8001402:	bf18      	it	ne
 8001404:	2001      	movne	r0, #1
 8001406:	bd38      	pop	{r3, r4, r5, pc}

08001408 <move_window>:
 8001408:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 800140c:	428b      	cmp	r3, r1
 800140e:	b570      	push	{r4, r5, r6, lr}
 8001410:	4606      	mov	r6, r0
 8001412:	460d      	mov	r5, r1
 8001414:	d013      	beq.n	800143e <move_window+0x36>
 8001416:	f7ff ff93 	bl	8001340 <sync_window>
 800141a:	4604      	mov	r4, r0
 800141c:	b968      	cbnz	r0, 800143a <move_window+0x32>
 800141e:	462a      	mov	r2, r5
 8001420:	2301      	movs	r3, #1
 8001422:	4631      	mov	r1, r6
 8001424:	f896 0201 	ldrb.w	r0, [r6, #513]	; 0x201
 8001428:	f7ff fe14 	bl	8001054 <disk_read>
 800142c:	2800      	cmp	r0, #0
 800142e:	bf1c      	itt	ne
 8001430:	f04f 35ff 	movne.w	r5, #4294967295
 8001434:	2401      	movne	r4, #1
 8001436:	f8c6 522c 	str.w	r5, [r6, #556]	; 0x22c
 800143a:	4620      	mov	r0, r4
 800143c:	bd70      	pop	{r4, r5, r6, pc}
 800143e:	2400      	movs	r4, #0
 8001440:	e7fb      	b.n	800143a <move_window+0x32>
	...

08001444 <check_fs>:
 8001444:	2300      	movs	r3, #0
 8001446:	b510      	push	{r4, lr}
 8001448:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
 8001454:	4604      	mov	r4, r0
 8001456:	f7ff ffd7 	bl	8001408 <move_window>
 800145a:	b9c0      	cbnz	r0, 800148e <check_fs+0x4a>
 800145c:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8001460:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8001464:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001468:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800146c:	4293      	cmp	r3, r2
 800146e:	d110      	bne.n	8001492 <check_fs+0x4e>
 8001470:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8001474:	4a08      	ldr	r2, [pc, #32]	; (8001498 <check_fs+0x54>)
 8001476:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800147a:	4293      	cmp	r3, r2
 800147c:	d00a      	beq.n	8001494 <check_fs+0x50>
 800147e:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 8001482:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001486:	1a80      	subs	r0, r0, r2
 8001488:	bf18      	it	ne
 800148a:	2001      	movne	r0, #1
 800148c:	bd10      	pop	{r4, pc}
 800148e:	2003      	movs	r0, #3
 8001490:	bd10      	pop	{r4, pc}
 8001492:	2002      	movs	r0, #2
 8001494:	bd10      	pop	{r4, pc}
 8001496:	bf00      	nop
 8001498:	00544146 	.word	0x00544146

0800149c <find_volume>:
 800149c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149e:	2300      	movs	r3, #0
 80014a0:	6003      	str	r3, [r0, #0]
 80014a2:	b085      	sub	sp, #20
 80014a4:	4607      	mov	r7, r0
 80014a6:	4608      	mov	r0, r1
 80014a8:	4615      	mov	r5, r2
 80014aa:	f7ff fee3 	bl	8001274 <get_ldnumber>
 80014ae:	1e06      	subs	r6, r0, #0
 80014b0:	f2c0 8123 	blt.w	80016fa <find_volume+0x25e>
 80014b4:	4b95      	ldr	r3, [pc, #596]	; (800170c <find_volume+0x270>)
 80014b6:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 80014ba:	2c00      	cmp	r4, #0
 80014bc:	f000 811f 	beq.w	80016fe <find_volume+0x262>
 80014c0:	603c      	str	r4, [r7, #0]
 80014c2:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80014c6:	b173      	cbz	r3, 80014e6 <find_volume+0x4a>
 80014c8:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80014cc:	f7ff fda8 	bl	8001020 <disk_status>
 80014d0:	07c7      	lsls	r7, r0, #31
 80014d2:	d408      	bmi.n	80014e6 <find_volume+0x4a>
 80014d4:	2d00      	cmp	r5, #0
 80014d6:	f000 8114 	beq.w	8001702 <find_volume+0x266>
 80014da:	f010 0004 	ands.w	r0, r0, #4
 80014de:	d000      	beq.n	80014e2 <find_volume+0x46>
 80014e0:	200a      	movs	r0, #10
 80014e2:	b005      	add	sp, #20
 80014e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e6:	2300      	movs	r3, #0
 80014e8:	b2f0      	uxtb	r0, r6
 80014ea:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 80014ee:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
 80014f2:	f7ff fd9f 	bl	8001034 <disk_initialize>
 80014f6:	07c1      	lsls	r1, r0, #31
 80014f8:	f100 8105 	bmi.w	8001706 <find_volume+0x26a>
 80014fc:	b10d      	cbz	r5, 8001502 <find_volume+0x66>
 80014fe:	0742      	lsls	r2, r0, #29
 8001500:	d4ee      	bmi.n	80014e0 <find_volume+0x44>
 8001502:	2100      	movs	r1, #0
 8001504:	4620      	mov	r0, r4
 8001506:	f7ff ff9d 	bl	8001444 <check_fs>
 800150a:	2801      	cmp	r0, #1
 800150c:	f040 80dc 	bne.w	80016c8 <find_volume+0x22c>
 8001510:	f504 71e3 	add.w	r1, r4, #454	; 0x1c6
 8001514:	2200      	movs	r2, #0
 8001516:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 800151a:	b103      	cbz	r3, 800151e <find_volume+0x82>
 800151c:	680b      	ldr	r3, [r1, #0]
 800151e:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
 8001522:	3201      	adds	r2, #1
 8001524:	2a04      	cmp	r2, #4
 8001526:	f101 0110 	add.w	r1, r1, #16
 800152a:	d1f4      	bne.n	8001516 <find_volume+0x7a>
 800152c:	2600      	movs	r6, #0
 800152e:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
 8001532:	2d00      	cmp	r5, #0
 8001534:	f000 80bf 	beq.w	80016b6 <find_volume+0x21a>
 8001538:	4629      	mov	r1, r5
 800153a:	4620      	mov	r0, r4
 800153c:	f7ff ff82 	bl	8001444 <check_fs>
 8001540:	2800      	cmp	r0, #0
 8001542:	f040 80b9 	bne.w	80016b8 <find_volume+0x21c>
 8001546:	7b22      	ldrb	r2, [r4, #12]
 8001548:	7ae3      	ldrb	r3, [r4, #11]
 800154a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800154e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001552:	f040 80bc 	bne.w	80016ce <find_volume+0x232>
 8001556:	7de3      	ldrb	r3, [r4, #23]
 8001558:	7c20      	ldrb	r0, [r4, #16]
 800155a:	7da1      	ldrb	r1, [r4, #22]
 800155c:	f884 0203 	strb.w	r0, [r4, #515]	; 0x203
 8001560:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
 8001564:	f100 33ff 	add.w	r3, r0, #4294967295
 8001568:	bf08      	it	eq
 800156a:	6a61      	ldreq	r1, [r4, #36]	; 0x24
 800156c:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
 8001570:	2b01      	cmp	r3, #1
 8001572:	f200 80ac 	bhi.w	80016ce <find_volume+0x232>
 8001576:	7b66      	ldrb	r6, [r4, #13]
 8001578:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
 800157c:	2e00      	cmp	r6, #0
 800157e:	f000 80a6 	beq.w	80016ce <find_volume+0x232>
 8001582:	1e73      	subs	r3, r6, #1
 8001584:	4233      	tst	r3, r6
 8001586:	f040 80a2 	bne.w	80016ce <find_volume+0x232>
 800158a:	7ca3      	ldrb	r3, [r4, #18]
 800158c:	7c67      	ldrb	r7, [r4, #17]
 800158e:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8001592:	073b      	lsls	r3, r7, #28
 8001594:	f8a4 7208 	strh.w	r7, [r4, #520]	; 0x208
 8001598:	f040 8099 	bne.w	80016ce <find_volume+0x232>
 800159c:	7d22      	ldrb	r2, [r4, #20]
 800159e:	7ce3      	ldrb	r3, [r4, #19]
 80015a0:	f894 e00f 	ldrb.w	lr, [r4, #15]
 80015a4:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80015a8:	7ba2      	ldrb	r2, [r4, #14]
 80015aa:	bf08      	it	eq
 80015ac:	6a23      	ldreq	r3, [r4, #32]
 80015ae:	ea52 220e 	orrs.w	r2, r2, lr, lsl #8
 80015b2:	f000 808c 	beq.w	80016ce <find_volume+0x232>
 80015b6:	fb01 fe00 	mul.w	lr, r1, r0
 80015ba:	eb02 1017 	add.w	r0, r2, r7, lsr #4
 80015be:	4470      	add	r0, lr
 80015c0:	4283      	cmp	r3, r0
 80015c2:	f0c0 8084 	bcc.w	80016ce <find_volume+0x232>
 80015c6:	1a1b      	subs	r3, r3, r0
 80015c8:	fbb3 f3f6 	udiv	r3, r3, r6
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d07e      	beq.n	80016ce <find_volume+0x232>
 80015d0:	f640 76f5 	movw	r6, #4085	; 0xff5
 80015d4:	42b3      	cmp	r3, r6
 80015d6:	d97e      	bls.n	80016d6 <find_volume+0x23a>
 80015d8:	f64f 76f5 	movw	r6, #65525	; 0xfff5
 80015dc:	42b3      	cmp	r3, r6
 80015de:	bf94      	ite	ls
 80015e0:	2602      	movls	r6, #2
 80015e2:	2603      	movhi	r6, #3
 80015e4:	3302      	adds	r3, #2
 80015e6:	442a      	add	r2, r5
 80015e8:	4428      	add	r0, r5
 80015ea:	2e03      	cmp	r6, #3
 80015ec:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
 80015f0:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
 80015f4:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
 80015f8:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
 80015fc:	d16d      	bne.n	80016da <find_volume+0x23e>
 80015fe:	2f00      	cmp	r7, #0
 8001600:	d165      	bne.n	80016ce <find_volume+0x232>
 8001602:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001604:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800160e:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 8001612:	d35c      	bcc.n	80016ce <find_volume+0x232>
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
 8001618:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 800161c:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 8001620:	2e03      	cmp	r6, #3
 8001622:	f04f 0380 	mov.w	r3, #128	; 0x80
 8001626:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
 800162a:	d12d      	bne.n	8001688 <find_volume+0x1ec>
 800162c:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8001630:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001634:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001638:	2b01      	cmp	r3, #1
 800163a:	d125      	bne.n	8001688 <find_volume+0x1ec>
 800163c:	1c69      	adds	r1, r5, #1
 800163e:	4620      	mov	r0, r4
 8001640:	f7ff fee2 	bl	8001408 <move_window>
 8001644:	bb00      	cbnz	r0, 8001688 <find_volume+0x1ec>
 8001646:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 800164a:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 800164e:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
 8001652:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001656:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800165a:	4293      	cmp	r3, r2
 800165c:	d114      	bne.n	8001688 <find_volume+0x1ec>
 800165e:	6822      	ldr	r2, [r4, #0]
 8001660:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <find_volume+0x274>)
 8001662:	429a      	cmp	r2, r3
 8001664:	d110      	bne.n	8001688 <find_volume+0x1ec>
 8001666:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 800166a:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 800166e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001672:	3320      	adds	r3, #32
 8001674:	429a      	cmp	r2, r3
 8001676:	bf01      	itttt	eq
 8001678:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 800167c:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
 8001680:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 8001684:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
 8001688:	4a22      	ldr	r2, [pc, #136]	; (8001714 <find_volume+0x278>)
 800168a:	f884 6200 	strb.w	r6, [r4, #512]	; 0x200
 800168e:	8813      	ldrh	r3, [r2, #0]
 8001690:	3301      	adds	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	8013      	strh	r3, [r2, #0]
 8001696:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
 800169a:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <find_volume+0x27c>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4294      	cmp	r4, r2
 80016a0:	bf04      	itt	eq
 80016a2:	2200      	moveq	r2, #0
 80016a4:	601a      	streq	r2, [r3, #0]
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	4294      	cmp	r4, r2
 80016aa:	f04f 0000 	mov.w	r0, #0
 80016ae:	f47f af18 	bne.w	80014e2 <find_volume+0x46>
 80016b2:	60d8      	str	r0, [r3, #12]
 80016b4:	e715      	b.n	80014e2 <find_volume+0x46>
 80016b6:	2002      	movs	r0, #2
 80016b8:	3601      	adds	r6, #1
 80016ba:	2e04      	cmp	r6, #4
 80016bc:	f47f af37 	bne.w	800152e <find_volume+0x92>
 80016c0:	2803      	cmp	r0, #3
 80016c2:	d104      	bne.n	80016ce <find_volume+0x232>
 80016c4:	2001      	movs	r0, #1
 80016c6:	e70c      	b.n	80014e2 <find_volume+0x46>
 80016c8:	2803      	cmp	r0, #3
 80016ca:	d0fb      	beq.n	80016c4 <find_volume+0x228>
 80016cc:	b108      	cbz	r0, 80016d2 <find_volume+0x236>
 80016ce:	200d      	movs	r0, #13
 80016d0:	e707      	b.n	80014e2 <find_volume+0x46>
 80016d2:	4605      	mov	r5, r0
 80016d4:	e737      	b.n	8001546 <find_volume+0xaa>
 80016d6:	2601      	movs	r6, #1
 80016d8:	e784      	b.n	80015e4 <find_volume+0x148>
 80016da:	2f00      	cmp	r7, #0
 80016dc:	d0f7      	beq.n	80016ce <find_volume+0x232>
 80016de:	4472      	add	r2, lr
 80016e0:	2e02      	cmp	r6, #2
 80016e2:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 80016e6:	ea4f 0243 	mov.w	r2, r3, lsl #1
 80016ea:	bf1b      	ittet	ne
 80016ec:	18d2      	addne	r2, r2, r3
 80016ee:	f003 0301 	andne.w	r3, r3, #1
 80016f2:	4613      	moveq	r3, r2
 80016f4:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 80016f8:	e787      	b.n	800160a <find_volume+0x16e>
 80016fa:	200b      	movs	r0, #11
 80016fc:	e6f1      	b.n	80014e2 <find_volume+0x46>
 80016fe:	200c      	movs	r0, #12
 8001700:	e6ef      	b.n	80014e2 <find_volume+0x46>
 8001702:	4628      	mov	r0, r5
 8001704:	e6ed      	b.n	80014e2 <find_volume+0x46>
 8001706:	2003      	movs	r0, #3
 8001708:	e6eb      	b.n	80014e2 <find_volume+0x46>
 800170a:	bf00      	nop
 800170c:	200004dc 	.word	0x200004dc
 8001710:	41615252 	.word	0x41615252
 8001714:	200004f8 	.word	0x200004f8
 8001718:	200004e0 	.word	0x200004e0

0800171c <clust2sect>:
 800171c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001720:	3902      	subs	r1, #2
 8001722:	3b02      	subs	r3, #2
 8001724:	4299      	cmp	r1, r3
 8001726:	bf3d      	ittte	cc
 8001728:	f890 3202 	ldrbcc.w	r3, [r0, #514]	; 0x202
 800172c:	f8d0 0228 	ldrcc.w	r0, [r0, #552]	; 0x228
 8001730:	fb01 0003 	mlacc	r0, r1, r3, r0
 8001734:	2000      	movcs	r0, #0
 8001736:	4770      	bx	lr

08001738 <get_fat>:
 8001738:	2901      	cmp	r1, #1
 800173a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800173c:	4606      	mov	r6, r0
 800173e:	460d      	mov	r5, r1
 8001740:	d959      	bls.n	80017f6 <get_fat+0xbe>
 8001742:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001746:	4299      	cmp	r1, r3
 8001748:	d255      	bcs.n	80017f6 <get_fat+0xbe>
 800174a:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 800174e:	2b02      	cmp	r3, #2
 8001750:	d027      	beq.n	80017a2 <get_fat+0x6a>
 8001752:	2b03      	cmp	r3, #3
 8001754:	d036      	beq.n	80017c4 <get_fat+0x8c>
 8001756:	2b01      	cmp	r3, #1
 8001758:	d14d      	bne.n	80017f6 <get_fat+0xbe>
 800175a:	eb01 0451 	add.w	r4, r1, r1, lsr #1
 800175e:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8001762:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 8001766:	f7ff fe4f 	bl	8001408 <move_window>
 800176a:	b110      	cbz	r0, 8001772 <get_fat+0x3a>
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001772:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
 8001776:	1c67      	adds	r7, r4, #1
 8001778:	f3c4 0408 	ubfx	r4, r4, #0, #9
 800177c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8001780:	4630      	mov	r0, r6
 8001782:	5d34      	ldrb	r4, [r6, r4]
 8001784:	f7ff fe40 	bl	8001408 <move_window>
 8001788:	2800      	cmp	r0, #0
 800178a:	d1ef      	bne.n	800176c <get_fat+0x34>
 800178c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8001790:	07eb      	lsls	r3, r5, #31
 8001792:	5df0      	ldrb	r0, [r6, r7]
 8001794:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
 8001798:	bf4c      	ite	mi
 800179a:	0900      	lsrmi	r0, r0, #4
 800179c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80017a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017a2:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80017a6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80017aa:	f7ff fe2d 	bl	8001408 <move_window>
 80017ae:	2800      	cmp	r0, #0
 80017b0:	d1dc      	bne.n	800176c <get_fat+0x34>
 80017b2:	006d      	lsls	r5, r5, #1
 80017b4:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 80017b8:	1973      	adds	r3, r6, r5
 80017ba:	5d70      	ldrb	r0, [r6, r5]
 80017bc:	785b      	ldrb	r3, [r3, #1]
 80017be:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80017c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017c4:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80017c8:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 80017cc:	f7ff fe1c 	bl	8001408 <move_window>
 80017d0:	2800      	cmp	r0, #0
 80017d2:	d1cb      	bne.n	800176c <get_fat+0x34>
 80017d4:	00ad      	lsls	r5, r5, #2
 80017d6:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 80017da:	1973      	adds	r3, r6, r5
 80017dc:	7898      	ldrb	r0, [r3, #2]
 80017de:	78da      	ldrb	r2, [r3, #3]
 80017e0:	785b      	ldrb	r3, [r3, #1]
 80017e2:	0400      	lsls	r0, r0, #16
 80017e4:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80017e8:	5d72      	ldrb	r2, [r6, r5]
 80017ea:	4310      	orrs	r0, r2
 80017ec:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80017f0:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 80017f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017f6:	2001      	movs	r0, #1
 80017f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080017fa <dir_sdi>:
 80017fa:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
 80017fe:	b570      	push	{r4, r5, r6, lr}
 8001800:	4604      	mov	r4, r0
 8001802:	2a01      	cmp	r2, #1
 8001804:	460d      	mov	r5, r1
 8001806:	f8a4 1206 	strh.w	r1, [r4, #518]	; 0x206
 800180a:	d101      	bne.n	8001810 <dir_sdi+0x16>
 800180c:	2002      	movs	r0, #2
 800180e:	bd70      	pop	{r4, r5, r6, pc}
 8001810:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8001814:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8001818:	428a      	cmp	r2, r1
 800181a:	d2f7      	bcs.n	800180c <dir_sdi+0x12>
 800181c:	b9f2      	cbnz	r2, 800185c <dir_sdi+0x62>
 800181e:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 8001822:	2903      	cmp	r1, #3
 8001824:	d102      	bne.n	800182c <dir_sdi+0x32>
 8001826:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
 800182a:	b9c1      	cbnz	r1, 800185e <dir_sdi+0x64>
 800182c:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8001830:	428d      	cmp	r5, r1
 8001832:	d2eb      	bcs.n	800180c <dir_sdi+0x12>
 8001834:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
 8001838:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
 800183c:	2800      	cmp	r0, #0
 800183e:	d0e5      	beq.n	800180c <dir_sdi+0x12>
 8001840:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001844:	eb00 1015 	add.w	r0, r0, r5, lsr #4
 8001848:	f005 050f 	and.w	r5, r5, #15
 800184c:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 8001850:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 8001854:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
 8001858:	2000      	movs	r0, #0
 800185a:	bd70      	pop	{r4, r5, r6, pc}
 800185c:	4611      	mov	r1, r2
 800185e:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
 8001862:	460a      	mov	r2, r1
 8001864:	0136      	lsls	r6, r6, #4
 8001866:	42b5      	cmp	r5, r6
 8001868:	4611      	mov	r1, r2
 800186a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800186e:	d202      	bcs.n	8001876 <dir_sdi+0x7c>
 8001870:	f7ff ff54 	bl	800171c <clust2sect>
 8001874:	e7e0      	b.n	8001838 <dir_sdi+0x3e>
 8001876:	f7ff ff5f 	bl	8001738 <get_fat>
 800187a:	1c43      	adds	r3, r0, #1
 800187c:	4602      	mov	r2, r0
 800187e:	d009      	beq.n	8001894 <dir_sdi+0x9a>
 8001880:	2801      	cmp	r0, #1
 8001882:	d9c3      	bls.n	800180c <dir_sdi+0x12>
 8001884:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001888:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800188c:	4298      	cmp	r0, r3
 800188e:	d2bd      	bcs.n	800180c <dir_sdi+0x12>
 8001890:	1bad      	subs	r5, r5, r6
 8001892:	e7e8      	b.n	8001866 <dir_sdi+0x6c>
 8001894:	2001      	movs	r0, #1
 8001896:	bd70      	pop	{r4, r5, r6, pc}

08001898 <dir_remove>:
 8001898:	b510      	push	{r4, lr}
 800189a:	f8b0 1206 	ldrh.w	r1, [r0, #518]	; 0x206
 800189e:	4604      	mov	r4, r0
 80018a0:	f7ff ffab 	bl	80017fa <dir_sdi>
 80018a4:	4603      	mov	r3, r0
 80018a6:	b9b0      	cbnz	r0, 80018d6 <dir_remove+0x3e>
 80018a8:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 80018ac:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80018b0:	f7ff fdaa 	bl	8001408 <move_window>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b970      	cbnz	r0, 80018d6 <dir_remove+0x3e>
 80018b8:	4601      	mov	r1, r0
 80018ba:	2220      	movs	r2, #32
 80018bc:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 80018c0:	f7ff fbfc 	bl	80010bc <mem_set>
 80018c4:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 80018c8:	21e5      	movs	r1, #229	; 0xe5
 80018ca:	7011      	strb	r1, [r2, #0]
 80018cc:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 80018d0:	2101      	movs	r1, #1
 80018d2:	f882 1204 	strb.w	r1, [r2, #516]	; 0x204
 80018d6:	4618      	mov	r0, r3
 80018d8:	bd10      	pop	{r4, pc}

080018da <put_fat>:
 80018da:	2901      	cmp	r1, #1
 80018dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018e0:	4605      	mov	r5, r0
 80018e2:	460c      	mov	r4, r1
 80018e4:	4616      	mov	r6, r2
 80018e6:	d96f      	bls.n	80019c8 <put_fat+0xee>
 80018e8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80018ec:	4299      	cmp	r1, r3
 80018ee:	d26b      	bcs.n	80019c8 <put_fat+0xee>
 80018f0:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d03d      	beq.n	8001974 <put_fat+0x9a>
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d04b      	beq.n	8001994 <put_fat+0xba>
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d163      	bne.n	80019c8 <put_fat+0xee>
 8001900:	eb01 0751 	add.w	r7, r1, r1, lsr #1
 8001904:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8001908:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800190c:	f7ff fd7c 	bl	8001408 <move_window>
 8001910:	2800      	cmp	r0, #0
 8001912:	d15a      	bne.n	80019ca <put_fat+0xf0>
 8001914:	f107 0801 	add.w	r8, r7, #1
 8001918:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800191c:	f014 0401 	ands.w	r4, r4, #1
 8001920:	bf1f      	itttt	ne
 8001922:	5deb      	ldrbne	r3, [r5, r7]
 8001924:	f003 020f 	andne.w	r2, r3, #15
 8001928:	0133      	lslne	r3, r6, #4
 800192a:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 800192e:	bf14      	ite	ne
 8001930:	4313      	orrne	r3, r2
 8001932:	b2f3      	uxtbeq	r3, r6
 8001934:	55eb      	strb	r3, [r5, r7]
 8001936:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
 800193a:	2301      	movs	r3, #1
 800193c:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 8001940:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8001944:	4628      	mov	r0, r5
 8001946:	f7ff fd5f 	bl	8001408 <move_window>
 800194a:	bbf0      	cbnz	r0, 80019ca <put_fat+0xf0>
 800194c:	f3c8 0808 	ubfx	r8, r8, #0, #9
 8001950:	b144      	cbz	r4, 8001964 <put_fat+0x8a>
 8001952:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8001956:	f805 2008 	strb.w	r2, [r5, r8]
 800195a:	2301      	movs	r3, #1
 800195c:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 8001960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001964:	f815 2008 	ldrb.w	r2, [r5, r8]
 8001968:	f3c6 2603 	ubfx	r6, r6, #8, #4
 800196c:	f022 020f 	bic.w	r2, r2, #15
 8001970:	4332      	orrs	r2, r6
 8001972:	e7f0      	b.n	8001956 <put_fat+0x7c>
 8001974:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8001978:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800197c:	f7ff fd44 	bl	8001408 <move_window>
 8001980:	bb18      	cbnz	r0, 80019ca <put_fat+0xf0>
 8001982:	0064      	lsls	r4, r4, #1
 8001984:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8001988:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800198c:	552e      	strb	r6, [r5, r4]
 800198e:	442c      	add	r4, r5
 8001990:	7062      	strb	r2, [r4, #1]
 8001992:	e7e2      	b.n	800195a <put_fat+0x80>
 8001994:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8001998:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800199c:	f7ff fd34 	bl	8001408 <move_window>
 80019a0:	b998      	cbnz	r0, 80019ca <put_fat+0xf0>
 80019a2:	00a4      	lsls	r4, r4, #2
 80019a4:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80019a8:	1929      	adds	r1, r5, r4
 80019aa:	78cb      	ldrb	r3, [r1, #3]
 80019ac:	061b      	lsls	r3, r3, #24
 80019ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80019b2:	ea43 0206 	orr.w	r2, r3, r6
 80019b6:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80019ba:	552a      	strb	r2, [r5, r4]
 80019bc:	704b      	strb	r3, [r1, #1]
 80019be:	0c13      	lsrs	r3, r2, #16
 80019c0:	0e12      	lsrs	r2, r2, #24
 80019c2:	708b      	strb	r3, [r1, #2]
 80019c4:	70ca      	strb	r2, [r1, #3]
 80019c6:	e7c8      	b.n	800195a <put_fat+0x80>
 80019c8:	2002      	movs	r0, #2
 80019ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080019ce <create_chain>:
 80019ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d0:	4605      	mov	r5, r0
 80019d2:	460f      	mov	r7, r1
 80019d4:	b989      	cbnz	r1, 80019fa <create_chain+0x2c>
 80019d6:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
 80019da:	b1fe      	cbz	r6, 8001a1c <create_chain+0x4e>
 80019dc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80019e0:	429e      	cmp	r6, r3
 80019e2:	bf28      	it	cs
 80019e4:	2601      	movcs	r6, #1
 80019e6:	4634      	mov	r4, r6
 80019e8:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80019ec:	3401      	adds	r4, #1
 80019ee:	429c      	cmp	r4, r3
 80019f0:	d317      	bcc.n	8001a22 <create_chain+0x54>
 80019f2:	2e01      	cmp	r6, #1
 80019f4:	d814      	bhi.n	8001a20 <create_chain+0x52>
 80019f6:	2400      	movs	r4, #0
 80019f8:	e008      	b.n	8001a0c <create_chain+0x3e>
 80019fa:	f7ff fe9d 	bl	8001738 <get_fat>
 80019fe:	2801      	cmp	r0, #1
 8001a00:	4604      	mov	r4, r0
 8001a02:	d93b      	bls.n	8001a7c <create_chain+0xae>
 8001a04:	3001      	adds	r0, #1
 8001a06:	d103      	bne.n	8001a10 <create_chain+0x42>
 8001a08:	f04f 34ff 	mov.w	r4, #4294967295
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a10:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8001a14:	429c      	cmp	r4, r3
 8001a16:	d3f9      	bcc.n	8001a0c <create_chain+0x3e>
 8001a18:	463e      	mov	r6, r7
 8001a1a:	e7e4      	b.n	80019e6 <create_chain+0x18>
 8001a1c:	2601      	movs	r6, #1
 8001a1e:	e7e2      	b.n	80019e6 <create_chain+0x18>
 8001a20:	2402      	movs	r4, #2
 8001a22:	4621      	mov	r1, r4
 8001a24:	4628      	mov	r0, r5
 8001a26:	f7ff fe87 	bl	8001738 <get_fat>
 8001a2a:	b130      	cbz	r0, 8001a3a <create_chain+0x6c>
 8001a2c:	1c41      	adds	r1, r0, #1
 8001a2e:	d0eb      	beq.n	8001a08 <create_chain+0x3a>
 8001a30:	2801      	cmp	r0, #1
 8001a32:	d023      	beq.n	8001a7c <create_chain+0xae>
 8001a34:	42b4      	cmp	r4, r6
 8001a36:	d1d7      	bne.n	80019e8 <create_chain+0x1a>
 8001a38:	e7dd      	b.n	80019f6 <create_chain+0x28>
 8001a3a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8001a3e:	4621      	mov	r1, r4
 8001a40:	4628      	mov	r0, r5
 8001a42:	f7ff ff4a 	bl	80018da <put_fat>
 8001a46:	b9b8      	cbnz	r0, 8001a78 <create_chain+0xaa>
 8001a48:	b97f      	cbnz	r7, 8001a6a <create_chain+0x9c>
 8001a4a:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
 8001a4e:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	d0da      	beq.n	8001a0c <create_chain+0x3e>
 8001a56:	3b01      	subs	r3, #1
 8001a58:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
 8001a5c:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 8001a68:	e7d0      	b.n	8001a0c <create_chain+0x3e>
 8001a6a:	4622      	mov	r2, r4
 8001a6c:	4639      	mov	r1, r7
 8001a6e:	4628      	mov	r0, r5
 8001a70:	f7ff ff33 	bl	80018da <put_fat>
 8001a74:	2800      	cmp	r0, #0
 8001a76:	d0e8      	beq.n	8001a4a <create_chain+0x7c>
 8001a78:	2801      	cmp	r0, #1
 8001a7a:	d0c5      	beq.n	8001a08 <create_chain+0x3a>
 8001a7c:	2401      	movs	r4, #1
 8001a7e:	e7c5      	b.n	8001a0c <create_chain+0x3e>

08001a80 <dir_next>:
 8001a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a84:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 8001a88:	3601      	adds	r6, #1
 8001a8a:	b2b3      	uxth	r3, r6
 8001a8c:	4604      	mov	r4, r0
 8001a8e:	4689      	mov	r9, r1
 8001a90:	b913      	cbnz	r3, 8001a98 <dir_next+0x18>
 8001a92:	2004      	movs	r0, #4
 8001a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a98:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f8      	beq.n	8001a92 <dir_next+0x12>
 8001aa0:	f016 080f 	ands.w	r8, r6, #15
 8001aa4:	d10b      	bne.n	8001abe <dir_next+0x3e>
 8001aa6:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
 8001aaa:	3301      	adds	r3, #1
 8001aac:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 8001ab0:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
 8001ab4:	b971      	cbnz	r1, 8001ad4 <dir_next+0x54>
 8001ab6:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 8001aba:	429e      	cmp	r6, r3
 8001abc:	d2e9      	bcs.n	8001a92 <dir_next+0x12>
 8001abe:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001ac2:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
 8001ac6:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8001aca:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
 8001ace:	2000      	movs	r0, #0
 8001ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ad4:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 8001ad8:	3f01      	subs	r7, #1
 8001ada:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 8001ade:	d1ee      	bne.n	8001abe <dir_next+0x3e>
 8001ae0:	f7ff fe2a 	bl	8001738 <get_fat>
 8001ae4:	2801      	cmp	r0, #1
 8001ae6:	4605      	mov	r5, r0
 8001ae8:	d802      	bhi.n	8001af0 <dir_next+0x70>
 8001aea:	2002      	movs	r0, #2
 8001aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001af0:	1c42      	adds	r2, r0, #1
 8001af2:	d102      	bne.n	8001afa <dir_next+0x7a>
 8001af4:	2001      	movs	r0, #1
 8001af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001afa:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8001afe:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001b02:	429d      	cmp	r5, r3
 8001b04:	d32f      	bcc.n	8001b66 <dir_next+0xe6>
 8001b06:	f1b9 0f00 	cmp.w	r9, #0
 8001b0a:	d0c2      	beq.n	8001a92 <dir_next+0x12>
 8001b0c:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 8001b10:	f7ff ff5d 	bl	80019ce <create_chain>
 8001b14:	4605      	mov	r5, r0
 8001b16:	2800      	cmp	r0, #0
 8001b18:	d03e      	beq.n	8001b98 <dir_next+0x118>
 8001b1a:	2801      	cmp	r0, #1
 8001b1c:	d0e5      	beq.n	8001aea <dir_next+0x6a>
 8001b1e:	1c43      	adds	r3, r0, #1
 8001b20:	d0e8      	beq.n	8001af4 <dir_next+0x74>
 8001b22:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8001b26:	f7ff fc0b 	bl	8001340 <sync_window>
 8001b2a:	4601      	mov	r1, r0
 8001b2c:	2800      	cmp	r0, #0
 8001b2e:	d1e1      	bne.n	8001af4 <dir_next+0x74>
 8001b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b34:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8001b38:	f7ff fac0 	bl	80010bc <mem_set>
 8001b3c:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8001b40:	4629      	mov	r1, r5
 8001b42:	4610      	mov	r0, r2
 8001b44:	f7ff fdea 	bl	800171c <clust2sect>
 8001b48:	f04f 0901 	mov.w	r9, #1
 8001b4c:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
 8001b50:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8001b54:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8001b58:	429f      	cmp	r7, r3
 8001b5a:	d30e      	bcc.n	8001b7a <dir_next+0xfa>
 8001b5c:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8001b60:	1bdf      	subs	r7, r3, r7
 8001b62:	f8c0 722c 	str.w	r7, [r0, #556]	; 0x22c
 8001b66:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8001b70:	f7ff fdd4 	bl	800171c <clust2sect>
 8001b74:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 8001b78:	e7a1      	b.n	8001abe <dir_next+0x3e>
 8001b7a:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
 8001b7e:	f7ff fbb6 	bl	80012ee <sync_window.part.2>
 8001b82:	2800      	cmp	r0, #0
 8001b84:	d1b6      	bne.n	8001af4 <dir_next+0x74>
 8001b86:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8001b8a:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 8001b8e:	3301      	adds	r3, #1
 8001b90:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
 8001b94:	3701      	adds	r7, #1
 8001b96:	e7db      	b.n	8001b50 <dir_next+0xd0>
 8001b98:	2007      	movs	r0, #7
 8001b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08001ba0 <follow_path>:
 8001ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ba4:	780b      	ldrb	r3, [r1, #0]
 8001ba6:	2b2f      	cmp	r3, #47	; 0x2f
 8001ba8:	4604      	mov	r4, r0
 8001baa:	460d      	mov	r5, r1
 8001bac:	d001      	beq.n	8001bb2 <follow_path+0x12>
 8001bae:	2b5c      	cmp	r3, #92	; 0x5c
 8001bb0:	d100      	bne.n	8001bb4 <follow_path+0x14>
 8001bb2:	3501      	adds	r5, #1
 8001bb4:	2600      	movs	r6, #0
 8001bb6:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
 8001bba:	782b      	ldrb	r3, [r5, #0]
 8001bbc:	2b1f      	cmp	r3, #31
 8001bbe:	d936      	bls.n	8001c2e <follow_path+0x8e>
 8001bc0:	4e5f      	ldr	r6, [pc, #380]	; (8001d40 <follow_path+0x1a0>)
 8001bc2:	782b      	ldrb	r3, [r5, #0]
 8001bc4:	2b2f      	cmp	r3, #47	; 0x2f
 8001bc6:	46a8      	mov	r8, r5
 8001bc8:	f105 0501 	add.w	r5, r5, #1
 8001bcc:	d0f9      	beq.n	8001bc2 <follow_path+0x22>
 8001bce:	2b5c      	cmp	r3, #92	; 0x5c
 8001bd0:	d0f7      	beq.n	8001bc2 <follow_path+0x22>
 8001bd2:	f8d4 7218 	ldr.w	r7, [r4, #536]	; 0x218
 8001bd6:	220b      	movs	r2, #11
 8001bd8:	2120      	movs	r1, #32
 8001bda:	4638      	mov	r0, r7
 8001bdc:	f7ff fa6e 	bl	80010bc <mem_set>
 8001be0:	f04f 0e00 	mov.w	lr, #0
 8001be4:	f108 39ff 	add.w	r9, r8, #4294967295
 8001be8:	46f4      	mov	ip, lr
 8001bea:	2108      	movs	r1, #8
 8001bec:	4672      	mov	r2, lr
 8001bee:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 8001bf2:	2b20      	cmp	r3, #32
 8001bf4:	f10c 0c01 	add.w	ip, ip, #1
 8001bf8:	d928      	bls.n	8001c4c <follow_path+0xac>
 8001bfa:	2b2f      	cmp	r3, #47	; 0x2f
 8001bfc:	d026      	beq.n	8001c4c <follow_path+0xac>
 8001bfe:	2b5c      	cmp	r3, #92	; 0x5c
 8001c00:	d024      	beq.n	8001c4c <follow_path+0xac>
 8001c02:	2b2e      	cmp	r3, #46	; 0x2e
 8001c04:	f000 8085 	beq.w	8001d12 <follow_path+0x172>
 8001c08:	4571      	cmp	r1, lr
 8001c0a:	d90d      	bls.n	8001c28 <follow_path+0x88>
 8001c0c:	0618      	lsls	r0, r3, #24
 8001c0e:	bf48      	it	mi
 8001c10:	3b80      	submi	r3, #128	; 0x80
 8001c12:	4d4c      	ldr	r5, [pc, #304]	; (8001d44 <follow_path+0x1a4>)
 8001c14:	bf44      	itt	mi
 8001c16:	5cf3      	ldrbmi	r3, [r6, r3]
 8001c18:	f042 0203 	orrmi.w	r2, r2, #3
 8001c1c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001c20:	2800      	cmp	r0, #0
 8001c22:	d07d      	beq.n	8001d20 <follow_path+0x180>
 8001c24:	4283      	cmp	r3, r0
 8001c26:	d1f9      	bne.n	8001c1c <follow_path+0x7c>
 8001c28:	2006      	movs	r0, #6
 8001c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c2e:	4631      	mov	r1, r6
 8001c30:	4620      	mov	r0, r4
 8001c32:	f7ff fde2 	bl	80017fa <dir_sdi>
 8001c36:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
 8001c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c3e:	f042 0202 	orr.w	r2, r2, #2
 8001c42:	f807 300e 	strb.w	r3, [r7, lr]
 8001c46:	f10e 0e01 	add.w	lr, lr, #1
 8001c4a:	e7d0      	b.n	8001bee <follow_path+0x4e>
 8001c4c:	2b21      	cmp	r3, #33	; 0x21
 8001c4e:	eb08 050c 	add.w	r5, r8, ip
 8001c52:	bf34      	ite	cc
 8001c54:	2304      	movcc	r3, #4
 8001c56:	2300      	movcs	r3, #0
 8001c58:	f1be 0f00 	cmp.w	lr, #0
 8001c5c:	d0e4      	beq.n	8001c28 <follow_path+0x88>
 8001c5e:	7838      	ldrb	r0, [r7, #0]
 8001c60:	28e5      	cmp	r0, #229	; 0xe5
 8001c62:	bf04      	itt	eq
 8001c64:	2005      	moveq	r0, #5
 8001c66:	7038      	strbeq	r0, [r7, #0]
 8001c68:	2908      	cmp	r1, #8
 8001c6a:	bf04      	itt	eq
 8001c6c:	0092      	lsleq	r2, r2, #2
 8001c6e:	b2d2      	uxtbeq	r2, r2
 8001c70:	f002 0103 	and.w	r1, r2, #3
 8001c74:	2901      	cmp	r1, #1
 8001c76:	f002 020c 	and.w	r2, r2, #12
 8001c7a:	bf08      	it	eq
 8001c7c:	f043 0310 	orreq.w	r3, r3, #16
 8001c80:	2a04      	cmp	r2, #4
 8001c82:	bf08      	it	eq
 8001c84:	f043 0308 	orreq.w	r3, r3, #8
 8001c88:	72fb      	strb	r3, [r7, #11]
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f7ff fdb4 	bl	80017fa <dir_sdi>
 8001c92:	b9f8      	cbnz	r0, 8001cd4 <follow_path+0x134>
 8001c94:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8001c98:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8001c9c:	f7ff fbb4 	bl	8001408 <move_window>
 8001ca0:	b9c0      	cbnz	r0, 8001cd4 <follow_path+0x134>
 8001ca2:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8001ca6:	7813      	ldrb	r3, [r2, #0]
 8001ca8:	b19b      	cbz	r3, 8001cd2 <follow_path+0x132>
 8001caa:	7ad3      	ldrb	r3, [r2, #11]
 8001cac:	0719      	lsls	r1, r3, #28
 8001cae:	d40b      	bmi.n	8001cc8 <follow_path+0x128>
 8001cb0:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8001cb4:	f103 0e0b 	add.w	lr, r3, #11
 8001cb8:	4573      	cmp	r3, lr
 8001cba:	d00b      	beq.n	8001cd4 <follow_path+0x134>
 8001cbc:	f812 7b01 	ldrb.w	r7, [r2], #1
 8001cc0:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001cc4:	428f      	cmp	r7, r1
 8001cc6:	d0f7      	beq.n	8001cb8 <follow_path+0x118>
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f7ff fed8 	bl	8001a80 <dir_next>
 8001cd0:	e7df      	b.n	8001c92 <follow_path+0xf2>
 8001cd2:	2004      	movs	r0, #4
 8001cd4:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8001cd8:	7adb      	ldrb	r3, [r3, #11]
 8001cda:	b138      	cbz	r0, 8001cec <follow_path+0x14c>
 8001cdc:	2804      	cmp	r0, #4
 8001cde:	d12c      	bne.n	8001d3a <follow_path+0x19a>
 8001ce0:	f013 0f04 	tst.w	r3, #4
 8001ce4:	bf08      	it	eq
 8001ce6:	2005      	moveq	r0, #5
 8001ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	d424      	bmi.n	8001d3a <follow_path+0x19a>
 8001cf0:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8001cf4:	7acb      	ldrb	r3, [r1, #11]
 8001cf6:	06db      	lsls	r3, r3, #27
 8001cf8:	d508      	bpl.n	8001d0c <follow_path+0x16c>
 8001cfa:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8001cfe:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8001d02:	f7ff fae6 	bl	80012d2 <ld_clust.isra.0>
 8001d06:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
 8001d0a:	e75a      	b.n	8001bc2 <follow_path+0x22>
 8001d0c:	2005      	movs	r0, #5
 8001d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d12:	2908      	cmp	r1, #8
 8001d14:	d188      	bne.n	8001c28 <follow_path+0x88>
 8001d16:	0092      	lsls	r2, r2, #2
 8001d18:	468e      	mov	lr, r1
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	210b      	movs	r1, #11
 8001d1e:	e766      	b.n	8001bee <follow_path+0x4e>
 8001d20:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 8001d24:	2819      	cmp	r0, #25
 8001d26:	d98a      	bls.n	8001c3e <follow_path+0x9e>
 8001d28:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 8001d2c:	2819      	cmp	r0, #25
 8001d2e:	bf9e      	ittt	ls
 8001d30:	3b20      	subls	r3, #32
 8001d32:	f042 0201 	orrls.w	r2, r2, #1
 8001d36:	b2db      	uxtbls	r3, r3
 8001d38:	e783      	b.n	8001c42 <follow_path+0xa2>
 8001d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d3e:	bf00      	nop
 8001d40:	0800ddd0 	.word	0x0800ddd0
 8001d44:	0800de4f 	.word	0x0800de4f

08001d48 <dir_read.constprop.13>:
 8001d48:	b510      	push	{r4, lr}
 8001d4a:	4604      	mov	r4, r0
 8001d4c:	2004      	movs	r0, #4
 8001d4e:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8001d52:	b909      	cbnz	r1, 8001d58 <dir_read.constprop.13+0x10>
 8001d54:	b1b0      	cbz	r0, 8001d84 <dir_read.constprop.13+0x3c>
 8001d56:	e01d      	b.n	8001d94 <dir_read.constprop.13+0x4c>
 8001d58:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8001d5c:	f7ff fb54 	bl	8001408 <move_window>
 8001d60:	b9c0      	cbnz	r0, 8001d94 <dir_read.constprop.13+0x4c>
 8001d62:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8001d66:	7813      	ldrb	r3, [r2, #0]
 8001d68:	b1c3      	cbz	r3, 8001d9c <dir_read.constprop.13+0x54>
 8001d6a:	2be5      	cmp	r3, #229	; 0xe5
 8001d6c:	d00c      	beq.n	8001d88 <dir_read.constprop.13+0x40>
 8001d6e:	2b2e      	cmp	r3, #46	; 0x2e
 8001d70:	d00a      	beq.n	8001d88 <dir_read.constprop.13+0x40>
 8001d72:	7ad3      	ldrb	r3, [r2, #11]
 8001d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d78:	2b0f      	cmp	r3, #15
 8001d7a:	d005      	beq.n	8001d88 <dir_read.constprop.13+0x40>
 8001d7c:	f023 0320 	bic.w	r3, r3, #32
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d001      	beq.n	8001d88 <dir_read.constprop.13+0x40>
 8001d84:	2000      	movs	r0, #0
 8001d86:	bd10      	pop	{r4, pc}
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f7ff fe78 	bl	8001a80 <dir_next>
 8001d90:	2800      	cmp	r0, #0
 8001d92:	d0dc      	beq.n	8001d4e <dir_read.constprop.13+0x6>
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 8001d9a:	bd10      	pop	{r4, pc}
 8001d9c:	2004      	movs	r0, #4
 8001d9e:	e7f9      	b.n	8001d94 <dir_read.constprop.13+0x4c>

08001da0 <dir_register>:
 8001da0:	b538      	push	{r3, r4, r5, lr}
 8001da2:	2100      	movs	r1, #0
 8001da4:	4605      	mov	r5, r0
 8001da6:	f7ff fd28 	bl	80017fa <dir_sdi>
 8001daa:	4604      	mov	r4, r0
 8001dac:	bb78      	cbnz	r0, 8001e0e <dir_register+0x6e>
 8001dae:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8001db2:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8001db6:	f7ff fb27 	bl	8001408 <move_window>
 8001dba:	4604      	mov	r4, r0
 8001dbc:	bb38      	cbnz	r0, 8001e0e <dir_register+0x6e>
 8001dbe:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2be5      	cmp	r3, #229	; 0xe5
 8001dc6:	d11b      	bne.n	8001e00 <dir_register+0x60>
 8001dc8:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8001dcc:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8001dd0:	f7ff fb1a 	bl	8001408 <move_window>
 8001dd4:	4604      	mov	r4, r0
 8001dd6:	b988      	cbnz	r0, 8001dfc <dir_register+0x5c>
 8001dd8:	4601      	mov	r1, r0
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 8001de0:	f7ff f96c 	bl	80010bc <mem_set>
 8001de4:	220b      	movs	r2, #11
 8001de6:	f8d5 1218 	ldr.w	r1, [r5, #536]	; 0x218
 8001dea:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 8001dee:	f7ff f95b 	bl	80010a8 <mem_cpy>
 8001df2:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	bd38      	pop	{r3, r4, r5, pc}
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0e1      	beq.n	8001dc8 <dir_register+0x28>
 8001e04:	2101      	movs	r1, #1
 8001e06:	4628      	mov	r0, r5
 8001e08:	f7ff fe3a 	bl	8001a80 <dir_next>
 8001e0c:	e7cd      	b.n	8001daa <dir_register+0xa>
 8001e0e:	2c04      	cmp	r4, #4
 8001e10:	bf08      	it	eq
 8001e12:	2407      	moveq	r4, #7
 8001e14:	e7f2      	b.n	8001dfc <dir_register+0x5c>

08001e16 <remove_chain>:
 8001e16:	2901      	cmp	r1, #1
 8001e18:	b570      	push	{r4, r5, r6, lr}
 8001e1a:	4604      	mov	r4, r0
 8001e1c:	460d      	mov	r5, r1
 8001e1e:	d801      	bhi.n	8001e24 <remove_chain+0xe>
 8001e20:	2002      	movs	r0, #2
 8001e22:	bd70      	pop	{r4, r5, r6, pc}
 8001e24:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001e28:	4299      	cmp	r1, r3
 8001e2a:	d2f9      	bcs.n	8001e20 <remove_chain+0xa>
 8001e2c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8001e30:	429d      	cmp	r5, r3
 8001e32:	d205      	bcs.n	8001e40 <remove_chain+0x2a>
 8001e34:	4629      	mov	r1, r5
 8001e36:	4620      	mov	r0, r4
 8001e38:	f7ff fc7e 	bl	8001738 <get_fat>
 8001e3c:	4606      	mov	r6, r0
 8001e3e:	b908      	cbnz	r0, 8001e44 <remove_chain+0x2e>
 8001e40:	2000      	movs	r0, #0
 8001e42:	bd70      	pop	{r4, r5, r6, pc}
 8001e44:	2801      	cmp	r0, #1
 8001e46:	d0eb      	beq.n	8001e20 <remove_chain+0xa>
 8001e48:	1c41      	adds	r1, r0, #1
 8001e4a:	d014      	beq.n	8001e76 <remove_chain+0x60>
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	4629      	mov	r1, r5
 8001e50:	4620      	mov	r0, r4
 8001e52:	f7ff fd42 	bl	80018da <put_fat>
 8001e56:	b978      	cbnz	r0, 8001e78 <remove_chain+0x62>
 8001e58:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	d008      	beq.n	8001e72 <remove_chain+0x5c>
 8001e60:	3301      	adds	r3, #1
 8001e62:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 8001e66:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
 8001e72:	4635      	mov	r5, r6
 8001e74:	e7da      	b.n	8001e2c <remove_chain+0x16>
 8001e76:	2001      	movs	r0, #1
 8001e78:	bd70      	pop	{r4, r5, r6, pc}
	...

08001e7c <f_mount>:
 8001e7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001e7e:	9001      	str	r0, [sp, #4]
 8001e80:	a804      	add	r0, sp, #16
 8001e82:	9100      	str	r1, [sp, #0]
 8001e84:	f840 1d04 	str.w	r1, [r0, #-4]!
 8001e88:	4616      	mov	r6, r2
 8001e8a:	f7ff f9f3 	bl	8001274 <get_ldnumber>
 8001e8e:	1e05      	subs	r5, r0, #0
 8001e90:	db21      	blt.n	8001ed6 <f_mount+0x5a>
 8001e92:	4913      	ldr	r1, [pc, #76]	; (8001ee0 <f_mount+0x64>)
 8001e94:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]
 8001e98:	b164      	cbz	r4, 8001eb4 <f_mount+0x38>
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <f_mount+0x68>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4294      	cmp	r4, r2
 8001ea0:	bf04      	itt	eq
 8001ea2:	2200      	moveq	r2, #0
 8001ea4:	601a      	streq	r2, [r3, #0]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	4294      	cmp	r4, r2
 8001eac:	bf08      	it	eq
 8001eae:	60d8      	streq	r0, [r3, #12]
 8001eb0:	f884 0200 	strb.w	r0, [r4, #512]	; 0x200
 8001eb4:	9801      	ldr	r0, [sp, #4]
 8001eb6:	b110      	cbz	r0, 8001ebe <f_mount+0x42>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
 8001ebe:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
 8001ec2:	b130      	cbz	r0, 8001ed2 <f_mount+0x56>
 8001ec4:	2e01      	cmp	r6, #1
 8001ec6:	d108      	bne.n	8001eda <f_mount+0x5e>
 8001ec8:	2200      	movs	r2, #0
 8001eca:	4669      	mov	r1, sp
 8001ecc:	a801      	add	r0, sp, #4
 8001ece:	f7ff fae5 	bl	800149c <find_volume>
 8001ed2:	b004      	add	sp, #16
 8001ed4:	bd70      	pop	{r4, r5, r6, pc}
 8001ed6:	200b      	movs	r0, #11
 8001ed8:	e7fb      	b.n	8001ed2 <f_mount+0x56>
 8001eda:	2000      	movs	r0, #0
 8001edc:	e7f9      	b.n	8001ed2 <f_mount+0x56>
 8001ede:	bf00      	nop
 8001ee0:	200004dc 	.word	0x200004dc
 8001ee4:	200004e0 	.word	0x200004e0

08001ee8 <f_open>:
 8001ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001eec:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8001ef0:	4690      	mov	r8, r2
 8001ef2:	9101      	str	r1, [sp, #4]
 8001ef4:	4605      	mov	r5, r0
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	f000 80a6 	beq.w	8002048 <f_open+0x160>
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
 8001f02:	f002 021e 	and.w	r2, r2, #30
 8001f06:	a901      	add	r1, sp, #4
 8001f08:	a886      	add	r0, sp, #536	; 0x218
 8001f0a:	f7ff fac7 	bl	800149c <find_volume>
 8001f0e:	4606      	mov	r6, r0
 8001f10:	2800      	cmp	r0, #0
 8001f12:	f040 8094 	bne.w	800203e <f_open+0x156>
 8001f16:	ab03      	add	r3, sp, #12
 8001f18:	9901      	ldr	r1, [sp, #4]
 8001f1a:	938c      	str	r3, [sp, #560]	; 0x230
 8001f1c:	a806      	add	r0, sp, #24
 8001f1e:	f7ff fe3f 	bl	8001ba0 <follow_path>
 8001f22:	f008 071f 	and.w	r7, r8, #31
 8001f26:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
 8001f28:	b948      	cbnz	r0, 8001f3e <f_open+0x56>
 8001f2a:	2c00      	cmp	r4, #0
 8001f2c:	d05b      	beq.n	8001fe6 <f_open+0xfe>
 8001f2e:	f017 0f1e 	tst.w	r7, #30
 8001f32:	bf14      	ite	ne
 8001f34:	2101      	movne	r1, #1
 8001f36:	2100      	moveq	r1, #0
 8001f38:	a806      	add	r0, sp, #24
 8001f3a:	f7ff f8c7 	bl	80010cc <chk_lock>
 8001f3e:	f018 0f1c 	tst.w	r8, #28
 8001f42:	d05b      	beq.n	8001ffc <f_open+0x114>
 8001f44:	2800      	cmp	r0, #0
 8001f46:	d050      	beq.n	8001fea <f_open+0x102>
 8001f48:	2804      	cmp	r0, #4
 8001f4a:	d14a      	bne.n	8001fe2 <f_open+0xfa>
 8001f4c:	4b51      	ldr	r3, [pc, #324]	; (8002094 <f_open+0x1ac>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	b11a      	cbz	r2, 8001f5a <f_open+0x72>
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f040 809b 	bne.w	8002090 <f_open+0x1a8>
 8001f5a:	a806      	add	r0, sp, #24
 8001f5c:	f7ff ff20 	bl	8001da0 <dir_register>
 8001f60:	2800      	cmp	r0, #0
 8001f62:	d13e      	bne.n	8001fe2 <f_open+0xfa>
 8001f64:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
 8001f66:	f047 0708 	orr.w	r7, r7, #8
 8001f6a:	073b      	lsls	r3, r7, #28
 8001f6c:	d550      	bpl.n	8002010 <f_open+0x128>
 8001f6e:	f005 fb87 	bl	8007680 <get_fattime>
 8001f72:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8001f76:	f04f 0800 	mov.w	r8, #0
 8001f7a:	73a0      	strb	r0, [r4, #14]
 8001f7c:	73e3      	strb	r3, [r4, #15]
 8001f7e:	0c03      	lsrs	r3, r0, #16
 8001f80:	0e00      	lsrs	r0, r0, #24
 8001f82:	f884 800b 	strb.w	r8, [r4, #11]
 8001f86:	f884 801c 	strb.w	r8, [r4, #28]
 8001f8a:	f884 801d 	strb.w	r8, [r4, #29]
 8001f8e:	f884 801e 	strb.w	r8, [r4, #30]
 8001f92:	f884 801f 	strb.w	r8, [r4, #31]
 8001f96:	7423      	strb	r3, [r4, #16]
 8001f98:	7460      	strb	r0, [r4, #17]
 8001f9a:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8001fa2:	f7ff f996 	bl	80012d2 <ld_clust.isra.0>
 8001fa6:	f884 801a 	strb.w	r8, [r4, #26]
 8001faa:	f884 801b 	strb.w	r8, [r4, #27]
 8001fae:	f884 8014 	strb.w	r8, [r4, #20]
 8001fb2:	f884 8015 	strb.w	r8, [r4, #21]
 8001fb6:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8001fbe:	4680      	mov	r8, r0
 8001fc0:	b330      	cbz	r0, 8002010 <f_open+0x128>
 8001fc2:	4601      	mov	r1, r0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f8d3 922c 	ldr.w	r9, [r3, #556]	; 0x22c
 8001fca:	f7ff ff24 	bl	8001e16 <remove_chain>
 8001fce:	b940      	cbnz	r0, 8001fe2 <f_open+0xfa>
 8001fd0:	9886      	ldr	r0, [sp, #536]	; 0x218
 8001fd2:	f108 33ff 	add.w	r3, r8, #4294967295
 8001fd6:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
 8001fda:	4649      	mov	r1, r9
 8001fdc:	f7ff fa14 	bl	8001408 <move_window>
 8001fe0:	b1b0      	cbz	r0, 8002010 <f_open+0x128>
 8001fe2:	4606      	mov	r6, r0
 8001fe4:	e02b      	b.n	800203e <f_open+0x156>
 8001fe6:	2006      	movs	r0, #6
 8001fe8:	e7a9      	b.n	8001f3e <f_open+0x56>
 8001fea:	7ae3      	ldrb	r3, [r4, #11]
 8001fec:	f013 0f11 	tst.w	r3, #17
 8001ff0:	d12e      	bne.n	8002050 <f_open+0x168>
 8001ff2:	f018 0f04 	tst.w	r8, #4
 8001ff6:	d0b8      	beq.n	8001f6a <f_open+0x82>
 8001ff8:	2608      	movs	r6, #8
 8001ffa:	e020      	b.n	800203e <f_open+0x156>
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	d1f0      	bne.n	8001fe2 <f_open+0xfa>
 8002000:	7ae3      	ldrb	r3, [r4, #11]
 8002002:	06d8      	lsls	r0, r3, #27
 8002004:	d422      	bmi.n	800204c <f_open+0x164>
 8002006:	f018 0f02 	tst.w	r8, #2
 800200a:	d001      	beq.n	8002010 <f_open+0x128>
 800200c:	07da      	lsls	r2, r3, #31
 800200e:	d41f      	bmi.n	8002050 <f_open+0x168>
 8002010:	073b      	lsls	r3, r7, #28
 8002012:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8002014:	bf48      	it	mi
 8002016:	f047 0720 	orrmi.w	r7, r7, #32
 800201a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800201e:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
 8002022:	f017 0ffe 	tst.w	r7, #254	; 0xfe
 8002026:	f8c5 4220 	str.w	r4, [r5, #544]	; 0x220
 800202a:	bf14      	ite	ne
 800202c:	2101      	movne	r1, #1
 800202e:	2100      	moveq	r1, #0
 8002030:	a806      	add	r0, sp, #24
 8002032:	f7ff f87d 	bl	8001130 <inc_lock>
 8002036:	f8c5 0228 	str.w	r0, [r5, #552]	; 0x228
 800203a:	b958      	cbnz	r0, 8002054 <f_open+0x16c>
 800203c:	2602      	movs	r6, #2
 800203e:	4630      	mov	r0, r6
 8002040:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8002044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002048:	2609      	movs	r6, #9
 800204a:	e7f8      	b.n	800203e <f_open+0x156>
 800204c:	2604      	movs	r6, #4
 800204e:	e7f6      	b.n	800203e <f_open+0x156>
 8002050:	2607      	movs	r6, #7
 8002052:	e7f4      	b.n	800203e <f_open+0x156>
 8002054:	f885 7206 	strb.w	r7, [r5, #518]	; 0x206
 8002058:	f8dd 8218 	ldr.w	r8, [sp, #536]	; 0x218
 800205c:	2700      	movs	r7, #0
 800205e:	f885 7207 	strb.w	r7, [r5, #519]	; 0x207
 8002062:	f898 0200 	ldrb.w	r0, [r8, #512]	; 0x200
 8002066:	4621      	mov	r1, r4
 8002068:	f7ff f933 	bl	80012d2 <ld_clust.isra.0>
 800206c:	f8c5 0210 	str.w	r0, [r5, #528]	; 0x210
 8002070:	69e3      	ldr	r3, [r4, #28]
 8002072:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
 8002076:	f8b8 3206 	ldrh.w	r3, [r8, #518]	; 0x206
 800207a:	f8c5 7208 	str.w	r7, [r5, #520]	; 0x208
 800207e:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
 8002082:	f8c5 7224 	str.w	r7, [r5, #548]	; 0x224
 8002086:	f8c5 8200 	str.w	r8, [r5, #512]	; 0x200
 800208a:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
 800208e:	e7d6      	b.n	800203e <f_open+0x156>
 8002090:	2012      	movs	r0, #18
 8002092:	e7a6      	b.n	8001fe2 <f_open+0xfa>
 8002094:	200004e0 	.word	0x200004e0

08002098 <f_write>:
 8002098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800209c:	469b      	mov	fp, r3
 800209e:	2300      	movs	r3, #0
 80020a0:	f8cb 3000 	str.w	r3, [fp]
 80020a4:	4604      	mov	r4, r0
 80020a6:	4689      	mov	r9, r1
 80020a8:	4617      	mov	r7, r2
 80020aa:	f7ff f8fb 	bl	80012a4 <validate>
 80020ae:	4606      	mov	r6, r0
 80020b0:	bb50      	cbnz	r0, 8002108 <f_write+0x70>
 80020b2:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f040 80d9 	bne.w	800226e <f_write+0x1d6>
 80020bc:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80020c0:	0799      	lsls	r1, r3, #30
 80020c2:	f140 80d6 	bpl.w	8002272 <f_write+0x1da>
 80020c6:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80020ca:	42df      	cmn	r7, r3
 80020cc:	f0c0 8083 	bcc.w	80021d6 <f_write+0x13e>
 80020d0:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80020d4:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 80020d8:	4293      	cmp	r3, r2
 80020da:	f200 80c5 	bhi.w	8002268 <f_write+0x1d0>
 80020de:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80020e2:	f043 0320 	orr.w	r3, r3, #32
 80020e6:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 80020ea:	e00d      	b.n	8002108 <f_write+0x70>
 80020ec:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 80020f0:	b173      	cbz	r3, 8002110 <f_write+0x78>
 80020f2:	4620      	mov	r0, r4
 80020f4:	f7ff f87c 	bl	80011f0 <clmt_clust>
 80020f8:	4601      	mov	r1, r0
 80020fa:	2800      	cmp	r0, #0
 80020fc:	d0e8      	beq.n	80020d0 <f_write+0x38>
 80020fe:	2901      	cmp	r1, #1
 8002100:	d109      	bne.n	8002116 <f_write+0x7e>
 8002102:	2602      	movs	r6, #2
 8002104:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
 8002108:	4630      	mov	r0, r6
 800210a:	b003      	add	sp, #12
 800210c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002110:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8002114:	e07a      	b.n	800220c <f_write+0x174>
 8002116:	1c4a      	adds	r2, r1, #1
 8002118:	d101      	bne.n	800211e <f_write+0x86>
 800211a:	2601      	movs	r6, #1
 800211c:	e7f2      	b.n	8002104 <f_write+0x6c>
 800211e:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8002122:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
 8002126:	b90b      	cbnz	r3, 800212c <f_write+0x94>
 8002128:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
 800212c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8002130:	065b      	lsls	r3, r3, #25
 8002132:	d511      	bpl.n	8002158 <f_write+0xc0>
 8002134:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8002138:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800213c:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8002140:	2301      	movs	r3, #1
 8002142:	4621      	mov	r1, r4
 8002144:	f7fe ff94 	bl	8001070 <disk_write>
 8002148:	2800      	cmp	r0, #0
 800214a:	d1e6      	bne.n	800211a <f_write+0x82>
 800214c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8002150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002154:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8002158:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 800215c:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8002160:	4650      	mov	r0, sl
 8002162:	f7ff fadb 	bl	800171c <clust2sect>
 8002166:	2800      	cmp	r0, #0
 8002168:	d0cb      	beq.n	8002102 <f_write+0x6a>
 800216a:	9b01      	ldr	r3, [sp, #4]
 800216c:	0a7d      	lsrs	r5, r7, #9
 800216e:	eb00 0803 	add.w	r8, r0, r3
 8002172:	d04e      	beq.n	8002212 <f_write+0x17a>
 8002174:	9a01      	ldr	r2, [sp, #4]
 8002176:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
 800217a:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 800217e:	442a      	add	r2, r5
 8002180:	429a      	cmp	r2, r3
 8002182:	bf84      	itt	hi
 8002184:	9a01      	ldrhi	r2, [sp, #4]
 8002186:	1a9d      	subhi	r5, r3, r2
 8002188:	462b      	mov	r3, r5
 800218a:	4642      	mov	r2, r8
 800218c:	4649      	mov	r1, r9
 800218e:	f7fe ff6f 	bl	8001070 <disk_write>
 8002192:	2800      	cmp	r0, #0
 8002194:	d1c1      	bne.n	800211a <f_write+0x82>
 8002196:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 800219a:	eba1 0108 	sub.w	r1, r1, r8
 800219e:	428d      	cmp	r5, r1
 80021a0:	d90c      	bls.n	80021bc <f_write+0x124>
 80021a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a6:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 80021aa:	4620      	mov	r0, r4
 80021ac:	f7fe ff7c 	bl	80010a8 <mem_cpy>
 80021b0:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80021b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021b8:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 80021bc:	026d      	lsls	r5, r5, #9
 80021be:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80021c2:	442b      	add	r3, r5
 80021c4:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 80021c8:	f8db 3000 	ldr.w	r3, [fp]
 80021cc:	442b      	add	r3, r5
 80021ce:	44a9      	add	r9, r5
 80021d0:	f8cb 3000 	str.w	r3, [fp]
 80021d4:	1b7f      	subs	r7, r7, r5
 80021d6:	2f00      	cmp	r7, #0
 80021d8:	f43f af7a 	beq.w	80020d0 <f_write+0x38>
 80021dc:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 80021e0:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80021e4:	bb5b      	cbnz	r3, 800223e <f_write+0x1a6>
 80021e6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80021ea:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 80021ee:	3b01      	subs	r3, #1
 80021f0:	ea03 2351 	and.w	r3, r3, r1, lsr #9
 80021f4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80021f8:	9301      	str	r3, [sp, #4]
 80021fa:	d197      	bne.n	800212c <f_write+0x94>
 80021fc:	2900      	cmp	r1, #0
 80021fe:	f47f af75 	bne.w	80020ec <f_write+0x54>
 8002202:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8002206:	2900      	cmp	r1, #0
 8002208:	f47f af79 	bne.w	80020fe <f_write+0x66>
 800220c:	f7ff fbdf 	bl	80019ce <create_chain>
 8002210:	e772      	b.n	80020f8 <f_write+0x60>
 8002212:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002216:	4598      	cmp	r8, r3
 8002218:	d00f      	beq.n	800223a <f_write+0x1a2>
 800221a:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 800221e:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8002222:	429a      	cmp	r2, r3
 8002224:	d209      	bcs.n	800223a <f_write+0x1a2>
 8002226:	2301      	movs	r3, #1
 8002228:	4642      	mov	r2, r8
 800222a:	4621      	mov	r1, r4
 800222c:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 8002230:	f7fe ff10 	bl	8001054 <disk_read>
 8002234:	2800      	cmp	r0, #0
 8002236:	f47f af70 	bne.w	800211a <f_write+0x82>
 800223a:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
 800223e:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 8002242:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8002246:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 800224a:	42bd      	cmp	r5, r7
 800224c:	bf28      	it	cs
 800224e:	463d      	movcs	r5, r7
 8002250:	462a      	mov	r2, r5
 8002252:	4649      	mov	r1, r9
 8002254:	4420      	add	r0, r4
 8002256:	f7fe ff27 	bl	80010a8 <mem_cpy>
 800225a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800225e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002262:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8002266:	e7aa      	b.n	80021be <f_write+0x126>
 8002268:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 800226c:	e737      	b.n	80020de <f_write+0x46>
 800226e:	461e      	mov	r6, r3
 8002270:	e74a      	b.n	8002108 <f_write+0x70>
 8002272:	2607      	movs	r6, #7
 8002274:	e748      	b.n	8002108 <f_write+0x70>

08002276 <f_sync>:
 8002276:	b570      	push	{r4, r5, r6, lr}
 8002278:	4604      	mov	r4, r0
 800227a:	f7ff f813 	bl	80012a4 <validate>
 800227e:	2800      	cmp	r0, #0
 8002280:	d158      	bne.n	8002334 <f_sync+0xbe>
 8002282:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8002286:	069a      	lsls	r2, r3, #26
 8002288:	d554      	bpl.n	8002334 <f_sync+0xbe>
 800228a:	065b      	lsls	r3, r3, #25
 800228c:	d511      	bpl.n	80022b2 <f_sync+0x3c>
 800228e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8002292:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8002296:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800229a:	2301      	movs	r3, #1
 800229c:	4621      	mov	r1, r4
 800229e:	f7fe fee7 	bl	8001070 <disk_write>
 80022a2:	2800      	cmp	r0, #0
 80022a4:	d145      	bne.n	8002332 <f_sync+0xbc>
 80022a6:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80022aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022ae:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 80022b2:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 80022b6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80022ba:	f7ff f8a5 	bl	8001408 <move_window>
 80022be:	4606      	mov	r6, r0
 80022c0:	bbc0      	cbnz	r0, 8002334 <f_sync+0xbe>
 80022c2:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
 80022c6:	7aeb      	ldrb	r3, [r5, #11]
 80022c8:	f043 0320 	orr.w	r3, r3, #32
 80022cc:	72eb      	strb	r3, [r5, #11]
 80022ce:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 80022d2:	772b      	strb	r3, [r5, #28]
 80022d4:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	776b      	strb	r3, [r5, #29]
 80022dc:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80022e0:	77ab      	strb	r3, [r5, #30]
 80022e2:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 80022e6:	77eb      	strb	r3, [r5, #31]
 80022e8:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 80022ec:	76ab      	strb	r3, [r5, #26]
 80022ee:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80022f2:	0c1b      	lsrs	r3, r3, #16
 80022f4:	752b      	strb	r3, [r5, #20]
 80022f6:	0a1b      	lsrs	r3, r3, #8
 80022f8:	756b      	strb	r3, [r5, #21]
 80022fa:	76ea      	strb	r2, [r5, #27]
 80022fc:	f005 f9c0 	bl	8007680 <get_fattime>
 8002300:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8002304:	75a8      	strb	r0, [r5, #22]
 8002306:	75eb      	strb	r3, [r5, #23]
 8002308:	0c03      	lsrs	r3, r0, #16
 800230a:	0e00      	lsrs	r0, r0, #24
 800230c:	762b      	strb	r3, [r5, #24]
 800230e:	7668      	strb	r0, [r5, #25]
 8002310:	74ae      	strb	r6, [r5, #18]
 8002312:	74ee      	strb	r6, [r5, #19]
 8002314:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8002318:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800231c:	f023 0320 	bic.w	r3, r3, #32
 8002320:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8002324:	2301      	movs	r3, #1
 8002326:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 800232a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800232e:	f7ff b80e 	b.w	800134e <sync_fs>
 8002332:	2001      	movs	r0, #1
 8002334:	bd70      	pop	{r4, r5, r6, pc}

08002336 <f_close>:
 8002336:	b510      	push	{r4, lr}
 8002338:	4604      	mov	r4, r0
 800233a:	f7ff ff9c 	bl	8002276 <f_sync>
 800233e:	b950      	cbnz	r0, 8002356 <f_close+0x20>
 8002340:	4620      	mov	r0, r4
 8002342:	f7fe ffaf 	bl	80012a4 <validate>
 8002346:	b930      	cbnz	r0, 8002356 <f_close+0x20>
 8002348:	f8d4 0228 	ldr.w	r0, [r4, #552]	; 0x228
 800234c:	f7fe ff34 	bl	80011b8 <dec_lock>
 8002350:	b908      	cbnz	r0, 8002356 <f_close+0x20>
 8002352:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
 8002356:	bd10      	pop	{r4, pc}

08002358 <f_lseek>:
 8002358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800235c:	4604      	mov	r4, r0
 800235e:	460d      	mov	r5, r1
 8002360:	f7fe ffa0 	bl	80012a4 <validate>
 8002364:	4606      	mov	r6, r0
 8002366:	bb10      	cbnz	r0, 80023ae <f_lseek+0x56>
 8002368:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 800236c:	2b00      	cmp	r3, #0
 800236e:	f040 813e 	bne.w	80025ee <f_lseek+0x296>
 8002372:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8087 	beq.w	800248a <f_lseek+0x132>
 800237c:	1c6a      	adds	r2, r5, #1
 800237e:	d13d      	bne.n	80023fc <f_lseek+0xa4>
 8002380:	f8d4 7210 	ldr.w	r7, [r4, #528]	; 0x210
 8002384:	f8d3 b000 	ldr.w	fp, [r3]
 8002388:	f103 0a04 	add.w	sl, r3, #4
 800238c:	2502      	movs	r5, #2
 800238e:	b35f      	cbz	r7, 80023e8 <f_lseek+0x90>
 8002390:	46b8      	mov	r8, r7
 8002392:	f04f 0900 	mov.w	r9, #0
 8002396:	4641      	mov	r1, r8
 8002398:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800239c:	f7ff f9cc 	bl	8001738 <get_fat>
 80023a0:	2801      	cmp	r0, #1
 80023a2:	f109 0901 	add.w	r9, r9, #1
 80023a6:	d807      	bhi.n	80023b8 <f_lseek+0x60>
 80023a8:	2602      	movs	r6, #2
 80023aa:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
 80023ae:	4630      	mov	r0, r6
 80023b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023b4:	4607      	mov	r7, r0
 80023b6:	e7eb      	b.n	8002390 <f_lseek+0x38>
 80023b8:	1c43      	adds	r3, r0, #1
 80023ba:	d101      	bne.n	80023c0 <f_lseek+0x68>
 80023bc:	2601      	movs	r6, #1
 80023be:	e7f4      	b.n	80023aa <f_lseek+0x52>
 80023c0:	f108 0301 	add.w	r3, r8, #1
 80023c4:	4298      	cmp	r0, r3
 80023c6:	4680      	mov	r8, r0
 80023c8:	d0e5      	beq.n	8002396 <f_lseek+0x3e>
 80023ca:	3502      	adds	r5, #2
 80023cc:	45ab      	cmp	fp, r5
 80023ce:	bf21      	itttt	cs
 80023d0:	4653      	movcs	r3, sl
 80023d2:	f843 9b08 	strcs.w	r9, [r3], #8
 80023d6:	f8ca 7004 	strcs.w	r7, [sl, #4]
 80023da:	469a      	movcs	sl, r3
 80023dc:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80023e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80023e4:	4298      	cmp	r0, r3
 80023e6:	d3e5      	bcc.n	80023b4 <f_lseek+0x5c>
 80023e8:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 80023ec:	455d      	cmp	r5, fp
 80023ee:	601d      	str	r5, [r3, #0]
 80023f0:	f200 80ff 	bhi.w	80025f2 <f_lseek+0x29a>
 80023f4:	2300      	movs	r3, #0
 80023f6:	f8ca 3000 	str.w	r3, [sl]
 80023fa:	e7d8      	b.n	80023ae <f_lseek+0x56>
 80023fc:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
 8002400:	4285      	cmp	r5, r0
 8002402:	bf28      	it	cs
 8002404:	4605      	movcs	r5, r0
 8002406:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
 800240a:	2d00      	cmp	r5, #0
 800240c:	d0cf      	beq.n	80023ae <f_lseek+0x56>
 800240e:	f105 38ff 	add.w	r8, r5, #4294967295
 8002412:	4641      	mov	r1, r8
 8002414:	4620      	mov	r0, r4
 8002416:	f7fe feeb 	bl	80011f0 <clmt_clust>
 800241a:	f8d4 7200 	ldr.w	r7, [r4, #512]	; 0x200
 800241e:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
 8002422:	4601      	mov	r1, r0
 8002424:	4638      	mov	r0, r7
 8002426:	f7ff f979 	bl	800171c <clust2sect>
 800242a:	2800      	cmp	r0, #0
 800242c:	d0bc      	beq.n	80023a8 <f_lseek+0x50>
 800242e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8002432:	2d00      	cmp	r5, #0
 8002434:	d0bb      	beq.n	80023ae <f_lseek+0x56>
 8002436:	f897 5202 	ldrb.w	r5, [r7, #514]	; 0x202
 800243a:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800243e:	3d01      	subs	r5, #1
 8002440:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 8002444:	4405      	add	r5, r0
 8002446:	4295      	cmp	r5, r2
 8002448:	d0b1      	beq.n	80023ae <f_lseek+0x56>
 800244a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800244e:	0659      	lsls	r1, r3, #25
 8002450:	d50d      	bpl.n	800246e <f_lseek+0x116>
 8002452:	2301      	movs	r3, #1
 8002454:	4621      	mov	r1, r4
 8002456:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 800245a:	f7fe fe09 	bl	8001070 <disk_write>
 800245e:	2800      	cmp	r0, #0
 8002460:	d1ac      	bne.n	80023bc <f_lseek+0x64>
 8002462:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8002466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800246a:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800246e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8002472:	2301      	movs	r3, #1
 8002474:	462a      	mov	r2, r5
 8002476:	4621      	mov	r1, r4
 8002478:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800247c:	f7fe fdea 	bl	8001054 <disk_read>
 8002480:	2800      	cmp	r0, #0
 8002482:	d19b      	bne.n	80023bc <f_lseek+0x64>
 8002484:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 8002488:	e791      	b.n	80023ae <f_lseek+0x56>
 800248a:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800248e:	429d      	cmp	r5, r3
 8002490:	d905      	bls.n	800249e <f_lseek+0x146>
 8002492:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 8002496:	f012 0f02 	tst.w	r2, #2
 800249a:	bf08      	it	eq
 800249c:	461d      	moveq	r5, r3
 800249e:	2200      	movs	r2, #0
 80024a0:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80024a4:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
 80024a8:	2d00      	cmp	r5, #0
 80024aa:	d13e      	bne.n	800252a <f_lseek+0x1d2>
 80024ac:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80024b0:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 80024b4:	4293      	cmp	r3, r2
 80024b6:	f67f af7a 	bls.w	80023ae <f_lseek+0x56>
 80024ba:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 80024be:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80024c2:	f043 0320 	orr.w	r3, r3, #32
 80024c6:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 80024ca:	e770      	b.n	80023ae <f_lseek+0x56>
 80024cc:	2500      	movs	r5, #0
 80024ce:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80024d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0e8      	beq.n	80024ac <f_lseek+0x154>
 80024da:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 80024de:	4295      	cmp	r5, r2
 80024e0:	d0e4      	beq.n	80024ac <f_lseek+0x154>
 80024e2:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80024e6:	065b      	lsls	r3, r3, #25
 80024e8:	d510      	bpl.n	800250c <f_lseek+0x1b4>
 80024ea:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80024ee:	2301      	movs	r3, #1
 80024f0:	4621      	mov	r1, r4
 80024f2:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80024f6:	f7fe fdbb 	bl	8001070 <disk_write>
 80024fa:	2800      	cmp	r0, #0
 80024fc:	f47f af5e 	bne.w	80023bc <f_lseek+0x64>
 8002500:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8002504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002508:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800250c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8002510:	2301      	movs	r3, #1
 8002512:	462a      	mov	r2, r5
 8002514:	4621      	mov	r1, r4
 8002516:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800251a:	f7fe fd9b 	bl	8001054 <disk_read>
 800251e:	2800      	cmp	r0, #0
 8002520:	f47f af4c 	bne.w	80023bc <f_lseek+0x64>
 8002524:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 8002528:	e7c0      	b.n	80024ac <f_lseek+0x154>
 800252a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800252e:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 8002532:	027f      	lsls	r7, r7, #9
 8002534:	b32b      	cbz	r3, 8002582 <f_lseek+0x22a>
 8002536:	3b01      	subs	r3, #1
 8002538:	1e6a      	subs	r2, r5, #1
 800253a:	fbb3 f1f7 	udiv	r1, r3, r7
 800253e:	fbb2 f2f7 	udiv	r2, r2, r7
 8002542:	428a      	cmp	r2, r1
 8002544:	d31d      	bcc.n	8002582 <f_lseek+0x22a>
 8002546:	427a      	negs	r2, r7
 8002548:	4013      	ands	r3, r2
 800254a:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 800254e:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8002552:	1aed      	subs	r5, r5, r3
 8002554:	2900      	cmp	r1, #0
 8002556:	d0b9      	beq.n	80024cc <f_lseek+0x174>
 8002558:	42bd      	cmp	r5, r7
 800255a:	d823      	bhi.n	80025a4 <f_lseek+0x24c>
 800255c:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8002560:	442b      	add	r3, r5
 8002562:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8002566:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0ae      	beq.n	80024cc <f_lseek+0x174>
 800256e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8002572:	f7ff f8d3 	bl	800171c <clust2sect>
 8002576:	2800      	cmp	r0, #0
 8002578:	f43f af16 	beq.w	80023a8 <f_lseek+0x50>
 800257c:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 8002580:	e7a5      	b.n	80024ce <f_lseek+0x176>
 8002582:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8002586:	b951      	cbnz	r1, 800259e <f_lseek+0x246>
 8002588:	f7ff fa21 	bl	80019ce <create_chain>
 800258c:	2801      	cmp	r0, #1
 800258e:	4601      	mov	r1, r0
 8002590:	f43f af0a 	beq.w	80023a8 <f_lseek+0x50>
 8002594:	1c42      	adds	r2, r0, #1
 8002596:	f43f af11 	beq.w	80023bc <f_lseek+0x64>
 800259a:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 800259e:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
 80025a2:	e7d7      	b.n	8002554 <f_lseek+0x1fc>
 80025a4:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80025a8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80025ac:	079b      	lsls	r3, r3, #30
 80025ae:	d505      	bpl.n	80025bc <f_lseek+0x264>
 80025b0:	f7ff fa0d 	bl	80019ce <create_chain>
 80025b4:	4601      	mov	r1, r0
 80025b6:	b920      	cbnz	r0, 80025c2 <f_lseek+0x26a>
 80025b8:	463d      	mov	r5, r7
 80025ba:	e7cf      	b.n	800255c <f_lseek+0x204>
 80025bc:	f7ff f8bc 	bl	8001738 <get_fat>
 80025c0:	4601      	mov	r1, r0
 80025c2:	1c4a      	adds	r2, r1, #1
 80025c4:	f43f aefa 	beq.w	80023bc <f_lseek+0x64>
 80025c8:	2901      	cmp	r1, #1
 80025ca:	f67f aeed 	bls.w	80023a8 <f_lseek+0x50>
 80025ce:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80025d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80025d6:	4299      	cmp	r1, r3
 80025d8:	f4bf aee6 	bcs.w	80023a8 <f_lseek+0x50>
 80025dc:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80025e0:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
 80025e4:	443b      	add	r3, r7
 80025e6:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 80025ea:	1bed      	subs	r5, r5, r7
 80025ec:	e7b4      	b.n	8002558 <f_lseek+0x200>
 80025ee:	461e      	mov	r6, r3
 80025f0:	e6dd      	b.n	80023ae <f_lseek+0x56>
 80025f2:	2611      	movs	r6, #17
 80025f4:	e6db      	b.n	80023ae <f_lseek+0x56>

080025f6 <f_opendir>:
 80025f6:	b530      	push	{r4, r5, lr}
 80025f8:	b087      	sub	sp, #28
 80025fa:	4605      	mov	r5, r0
 80025fc:	9101      	str	r1, [sp, #4]
 80025fe:	2800      	cmp	r0, #0
 8002600:	d045      	beq.n	800268e <f_opendir+0x98>
 8002602:	2200      	movs	r2, #0
 8002604:	a901      	add	r1, sp, #4
 8002606:	a802      	add	r0, sp, #8
 8002608:	f7fe ff48 	bl	800149c <find_volume>
 800260c:	4604      	mov	r4, r0
 800260e:	bb30      	cbnz	r0, 800265e <f_opendir+0x68>
 8002610:	9b02      	ldr	r3, [sp, #8]
 8002612:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
 8002616:	ab03      	add	r3, sp, #12
 8002618:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
 800261c:	9901      	ldr	r1, [sp, #4]
 800261e:	4628      	mov	r0, r5
 8002620:	f7ff fabe 	bl	8001ba0 <follow_path>
 8002624:	4604      	mov	r4, r0
 8002626:	b9b8      	cbnz	r0, 8002658 <f_opendir+0x62>
 8002628:	f8d5 1214 	ldr.w	r1, [r5, #532]	; 0x214
 800262c:	b149      	cbz	r1, 8002642 <f_opendir+0x4c>
 800262e:	7acb      	ldrb	r3, [r1, #11]
 8002630:	06db      	lsls	r3, r3, #27
 8002632:	d528      	bpl.n	8002686 <f_opendir+0x90>
 8002634:	9b02      	ldr	r3, [sp, #8]
 8002636:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800263a:	f7fe fe4a 	bl	80012d2 <ld_clust.isra.0>
 800263e:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
 8002642:	9b02      	ldr	r3, [sp, #8]
 8002644:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8002648:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
 800264c:	2100      	movs	r1, #0
 800264e:	4628      	mov	r0, r5
 8002650:	f7ff f8d3 	bl	80017fa <dir_sdi>
 8002654:	4604      	mov	r4, r0
 8002656:	b130      	cbz	r0, 8002666 <f_opendir+0x70>
 8002658:	2c04      	cmp	r4, #4
 800265a:	bf08      	it	eq
 800265c:	2405      	moveq	r4, #5
 800265e:	2300      	movs	r3, #0
 8002660:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
 8002664:	e009      	b.n	800267a <f_opendir+0x84>
 8002666:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 800266a:	b14b      	cbz	r3, 8002680 <f_opendir+0x8a>
 800266c:	4621      	mov	r1, r4
 800266e:	4628      	mov	r0, r5
 8002670:	f7fe fd5e 	bl	8001130 <inc_lock>
 8002674:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
 8002678:	b138      	cbz	r0, 800268a <f_opendir+0x94>
 800267a:	4620      	mov	r0, r4
 800267c:	b007      	add	sp, #28
 800267e:	bd30      	pop	{r4, r5, pc}
 8002680:	f8c5 421c 	str.w	r4, [r5, #540]	; 0x21c
 8002684:	e7f9      	b.n	800267a <f_opendir+0x84>
 8002686:	2405      	movs	r4, #5
 8002688:	e7e9      	b.n	800265e <f_opendir+0x68>
 800268a:	2412      	movs	r4, #18
 800268c:	e7e7      	b.n	800265e <f_opendir+0x68>
 800268e:	2409      	movs	r4, #9
 8002690:	e7f3      	b.n	800267a <f_opendir+0x84>

08002692 <f_readdir>:
 8002692:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002694:	4605      	mov	r5, r0
 8002696:	460e      	mov	r6, r1
 8002698:	f7fe fe04 	bl	80012a4 <validate>
 800269c:	4604      	mov	r4, r0
 800269e:	b9e8      	cbnz	r0, 80026dc <f_readdir+0x4a>
 80026a0:	b92e      	cbnz	r6, 80026ae <f_readdir+0x1c>
 80026a2:	4601      	mov	r1, r0
 80026a4:	4628      	mov	r0, r5
 80026a6:	f7ff f8a8 	bl	80017fa <dir_sdi>
 80026aa:	4604      	mov	r4, r0
 80026ac:	e016      	b.n	80026dc <f_readdir+0x4a>
 80026ae:	ab01      	add	r3, sp, #4
 80026b0:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
 80026b4:	4628      	mov	r0, r5
 80026b6:	f7ff fb47 	bl	8001d48 <dir_read.constprop.13>
 80026ba:	2804      	cmp	r0, #4
 80026bc:	d111      	bne.n	80026e2 <f_readdir+0x50>
 80026be:	f8c5 4210 	str.w	r4, [r5, #528]	; 0x210
 80026c2:	4631      	mov	r1, r6
 80026c4:	4628      	mov	r0, r5
 80026c6:	f7fe fda7 	bl	8001218 <get_fileinfo>
 80026ca:	2100      	movs	r1, #0
 80026cc:	4628      	mov	r0, r5
 80026ce:	f7ff f9d7 	bl	8001a80 <dir_next>
 80026d2:	2804      	cmp	r0, #4
 80026d4:	d1e9      	bne.n	80026aa <f_readdir+0x18>
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
 80026dc:	4620      	mov	r0, r4
 80026de:	b004      	add	sp, #16
 80026e0:	bd70      	pop	{r4, r5, r6, pc}
 80026e2:	2800      	cmp	r0, #0
 80026e4:	d1e1      	bne.n	80026aa <f_readdir+0x18>
 80026e6:	e7ec      	b.n	80026c2 <f_readdir+0x30>

080026e8 <f_unlink>:
 80026e8:	b530      	push	{r4, r5, lr}
 80026ea:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
 80026ee:	2201      	movs	r2, #1
 80026f0:	9001      	str	r0, [sp, #4]
 80026f2:	a901      	add	r1, sp, #4
 80026f4:	a886      	add	r0, sp, #536	; 0x218
 80026f6:	f7fe fed1 	bl	800149c <find_volume>
 80026fa:	b988      	cbnz	r0, 8002720 <f_unlink+0x38>
 80026fc:	ab03      	add	r3, sp, #12
 80026fe:	9901      	ldr	r1, [sp, #4]
 8002700:	938c      	str	r3, [sp, #560]	; 0x230
 8002702:	a806      	add	r0, sp, #24
 8002704:	f7ff fa4c 	bl	8001ba0 <follow_path>
 8002708:	b950      	cbnz	r0, 8002720 <f_unlink+0x38>
 800270a:	2102      	movs	r1, #2
 800270c:	a806      	add	r0, sp, #24
 800270e:	f7fe fcdd 	bl	80010cc <chk_lock>
 8002712:	b928      	cbnz	r0, 8002720 <f_unlink+0x38>
 8002714:	998b      	ldr	r1, [sp, #556]	; 0x22c
 8002716:	b169      	cbz	r1, 8002734 <f_unlink+0x4c>
 8002718:	7acd      	ldrb	r5, [r1, #11]
 800271a:	07ea      	lsls	r2, r5, #31
 800271c:	d50c      	bpl.n	8002738 <f_unlink+0x50>
 800271e:	2007      	movs	r0, #7
 8002720:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c
 8002724:	bd30      	pop	{r4, r5, pc}
 8002726:	4621      	mov	r1, r4
 8002728:	9886      	ldr	r0, [sp, #536]	; 0x218
 800272a:	f7ff fb74 	bl	8001e16 <remove_chain>
 800272e:	2800      	cmp	r0, #0
 8002730:	d1f6      	bne.n	8002720 <f_unlink+0x38>
 8002732:	e026      	b.n	8002782 <f_unlink+0x9a>
 8002734:	2006      	movs	r0, #6
 8002736:	e7f3      	b.n	8002720 <f_unlink+0x38>
 8002738:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800273a:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800273e:	f7fe fdc8 	bl	80012d2 <ld_clust.isra.0>
 8002742:	4604      	mov	r4, r0
 8002744:	b1b0      	cbz	r0, 8002774 <f_unlink+0x8c>
 8002746:	06eb      	lsls	r3, r5, #27
 8002748:	d514      	bpl.n	8002774 <f_unlink+0x8c>
 800274a:	a906      	add	r1, sp, #24
 800274c:	a88e      	add	r0, sp, #568	; 0x238
 800274e:	f44f 7208 	mov.w	r2, #544	; 0x220
 8002752:	f7fe fca9 	bl	80010a8 <mem_cpy>
 8002756:	2102      	movs	r1, #2
 8002758:	a88e      	add	r0, sp, #568	; 0x238
 800275a:	f8cd 4440 	str.w	r4, [sp, #1088]	; 0x440
 800275e:	f7ff f84c 	bl	80017fa <dir_sdi>
 8002762:	2800      	cmp	r0, #0
 8002764:	d1dc      	bne.n	8002720 <f_unlink+0x38>
 8002766:	a88e      	add	r0, sp, #568	; 0x238
 8002768:	f7ff faee 	bl	8001d48 <dir_read.constprop.13>
 800276c:	2800      	cmp	r0, #0
 800276e:	d0d6      	beq.n	800271e <f_unlink+0x36>
 8002770:	2804      	cmp	r0, #4
 8002772:	d1d5      	bne.n	8002720 <f_unlink+0x38>
 8002774:	a806      	add	r0, sp, #24
 8002776:	f7ff f88f 	bl	8001898 <dir_remove>
 800277a:	2800      	cmp	r0, #0
 800277c:	d1d0      	bne.n	8002720 <f_unlink+0x38>
 800277e:	2c00      	cmp	r4, #0
 8002780:	d1d1      	bne.n	8002726 <f_unlink+0x3e>
 8002782:	9886      	ldr	r0, [sp, #536]	; 0x218
 8002784:	f7fe fde3 	bl	800134e <sync_fs>
 8002788:	e7ca      	b.n	8002720 <f_unlink+0x38>

0800278a <f_utime>:
 800278a:	b510      	push	{r4, lr}
 800278c:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8002790:	460c      	mov	r4, r1
 8002792:	9001      	str	r0, [sp, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	a901      	add	r1, sp, #4
 8002798:	a886      	add	r0, sp, #536	; 0x218
 800279a:	f7fe fe7f 	bl	800149c <find_volume>
 800279e:	b9c0      	cbnz	r0, 80027d2 <f_utime+0x48>
 80027a0:	ab03      	add	r3, sp, #12
 80027a2:	9901      	ldr	r1, [sp, #4]
 80027a4:	938c      	str	r3, [sp, #560]	; 0x230
 80027a6:	a806      	add	r0, sp, #24
 80027a8:	f7ff f9fa 	bl	8001ba0 <follow_path>
 80027ac:	b988      	cbnz	r0, 80027d2 <f_utime+0x48>
 80027ae:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
 80027b0:	b193      	cbz	r3, 80027d8 <f_utime+0x4e>
 80027b2:	88e2      	ldrh	r2, [r4, #6]
 80027b4:	759a      	strb	r2, [r3, #22]
 80027b6:	88e2      	ldrh	r2, [r4, #6]
 80027b8:	0a12      	lsrs	r2, r2, #8
 80027ba:	75da      	strb	r2, [r3, #23]
 80027bc:	88a2      	ldrh	r2, [r4, #4]
 80027be:	761a      	strb	r2, [r3, #24]
 80027c0:	88a2      	ldrh	r2, [r4, #4]
 80027c2:	0a12      	lsrs	r2, r2, #8
 80027c4:	765a      	strb	r2, [r3, #25]
 80027c6:	9886      	ldr	r0, [sp, #536]	; 0x218
 80027c8:	2301      	movs	r3, #1
 80027ca:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 80027ce:	f7fe fdbe 	bl	800134e <sync_fs>
 80027d2:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 80027d6:	bd10      	pop	{r4, pc}
 80027d8:	2006      	movs	r0, #6
 80027da:	e7fa      	b.n	80027d2 <f_utime+0x48>

080027dc <FATFS_LinkDriverEx>:
 80027dc:	b530      	push	{r4, r5, lr}
 80027de:	4b0f      	ldr	r3, [pc, #60]	; (800281c <FATFS_LinkDriverEx+0x40>)
 80027e0:	7a5c      	ldrb	r4, [r3, #9]
 80027e2:	2c01      	cmp	r4, #1
 80027e4:	d818      	bhi.n	8002818 <FATFS_LinkDriverEx+0x3c>
 80027e6:	7a5d      	ldrb	r5, [r3, #9]
 80027e8:	b2ed      	uxtb	r5, r5
 80027ea:	2400      	movs	r4, #0
 80027ec:	555c      	strb	r4, [r3, r5]
 80027ee:	7a5d      	ldrb	r5, [r3, #9]
 80027f0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80027f4:	6068      	str	r0, [r5, #4]
 80027f6:	7a58      	ldrb	r0, [r3, #9]
 80027f8:	4418      	add	r0, r3
 80027fa:	7202      	strb	r2, [r0, #8]
 80027fc:	7a5a      	ldrb	r2, [r3, #9]
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	1c50      	adds	r0, r2, #1
 8002802:	b2c0      	uxtb	r0, r0
 8002804:	7258      	strb	r0, [r3, #9]
 8002806:	233a      	movs	r3, #58	; 0x3a
 8002808:	3230      	adds	r2, #48	; 0x30
 800280a:	704b      	strb	r3, [r1, #1]
 800280c:	232f      	movs	r3, #47	; 0x2f
 800280e:	700a      	strb	r2, [r1, #0]
 8002810:	708b      	strb	r3, [r1, #2]
 8002812:	70cc      	strb	r4, [r1, #3]
 8002814:	4620      	mov	r0, r4
 8002816:	bd30      	pop	{r4, r5, pc}
 8002818:	2001      	movs	r0, #1
 800281a:	bd30      	pop	{r4, r5, pc}
 800281c:	200004fc 	.word	0x200004fc

08002820 <FATFS_LinkDriver>:
 8002820:	2200      	movs	r2, #0
 8002822:	f7ff bfdb 	b.w	80027dc <FATFS_LinkDriverEx>
	...

08002828 <FATFS_UnLinkDriverEx>:
 8002828:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <FATFS_UnLinkDriverEx+0x2c>)
 800282a:	7a53      	ldrb	r3, [r2, #9]
 800282c:	b17b      	cbz	r3, 800284e <FATFS_UnLinkDriverEx+0x26>
 800282e:	7803      	ldrb	r3, [r0, #0]
 8002830:	3b30      	subs	r3, #48	; 0x30
 8002832:	b2db      	uxtb	r3, r3
 8002834:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8002838:	6848      	ldr	r0, [r1, #4]
 800283a:	b140      	cbz	r0, 800284e <FATFS_UnLinkDriverEx+0x26>
 800283c:	4413      	add	r3, r2
 800283e:	2000      	movs	r0, #0
 8002840:	7218      	strb	r0, [r3, #8]
 8002842:	7a53      	ldrb	r3, [r2, #9]
 8002844:	6048      	str	r0, [r1, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	b2db      	uxtb	r3, r3
 800284a:	7253      	strb	r3, [r2, #9]
 800284c:	4770      	bx	lr
 800284e:	2001      	movs	r0, #1
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	200004fc 	.word	0x200004fc

08002858 <FATFS_UnLinkDriver>:
 8002858:	2100      	movs	r1, #0
 800285a:	f7ff bfe5 	b.w	8002828 <FATFS_UnLinkDriverEx>

0800285e <USBD_Init>:
 800285e:	b508      	push	{r3, lr}
 8002860:	b180      	cbz	r0, 8002884 <USBD_Init+0x26>
 8002862:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002866:	b113      	cbz	r3, 800286e <USBD_Init+0x10>
 8002868:	2300      	movs	r3, #0
 800286a:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
 800286e:	b109      	cbz	r1, 8002874 <USBD_Init+0x16>
 8002870:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
 8002874:	2301      	movs	r3, #1
 8002876:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 800287a:	7002      	strb	r2, [r0, #0]
 800287c:	f009 faf8 	bl	800be70 <USBD_LL_Init>
 8002880:	2000      	movs	r0, #0
 8002882:	bd08      	pop	{r3, pc}
 8002884:	2002      	movs	r0, #2
 8002886:	bd08      	pop	{r3, pc}

08002888 <Battey_Charge_Mode>:
 8002888:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800288c:	2b01      	cmp	r3, #1
 800288e:	bf14      	ite	ne
 8002890:	2002      	movne	r0, #2
 8002892:	2000      	moveq	r0, #0
 8002894:	4770      	bx	lr

08002896 <USBD_DeInit>:
 8002896:	2301      	movs	r3, #1
 8002898:	b510      	push	{r4, lr}
 800289a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 800289e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80028a2:	7901      	ldrb	r1, [r0, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4604      	mov	r4, r0
 80028a8:	4798      	blx	r3
 80028aa:	4620      	mov	r0, r4
 80028ac:	f009 fb1c 	bl	800bee8 <USBD_LL_Stop>
 80028b0:	4620      	mov	r0, r4
 80028b2:	f009 fb0b 	bl	800becc <USBD_LL_DeInit>
 80028b6:	2000      	movs	r0, #0
 80028b8:	bd10      	pop	{r4, pc}

080028ba <USBD_RegisterClass>:
 80028ba:	b119      	cbz	r1, 80028c4 <USBD_RegisterClass+0xa>
 80028bc:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
 80028c0:	2000      	movs	r0, #0
 80028c2:	4770      	bx	lr
 80028c4:	2002      	movs	r0, #2
 80028c6:	4770      	bx	lr

080028c8 <USBD_Start>:
 80028c8:	b508      	push	{r3, lr}
 80028ca:	f009 fb06 	bl	800beda <USBD_LL_Start>
 80028ce:	2000      	movs	r0, #0
 80028d0:	bd08      	pop	{r3, pc}

080028d2 <USBD_Stop>:
 80028d2:	b510      	push	{r4, lr}
 80028d4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80028d8:	7901      	ldrb	r1, [r0, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4604      	mov	r4, r0
 80028de:	4798      	blx	r3
 80028e0:	4620      	mov	r0, r4
 80028e2:	f009 fb01 	bl	800bee8 <USBD_LL_Stop>
 80028e6:	2000      	movs	r0, #0
 80028e8:	bd10      	pop	{r4, pc}

080028ea <USBD_SetClassConfig>:
 80028ea:	b508      	push	{r3, lr}
 80028ec:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80028f0:	b90b      	cbnz	r3, 80028f6 <USBD_SetClassConfig+0xc>
 80028f2:	2002      	movs	r0, #2
 80028f4:	bd08      	pop	{r3, pc}
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4798      	blx	r3
 80028fa:	2800      	cmp	r0, #0
 80028fc:	d1f9      	bne.n	80028f2 <USBD_SetClassConfig+0x8>
 80028fe:	bd08      	pop	{r3, pc}

08002900 <USBD_ClrClassConfig>:
 8002900:	b508      	push	{r3, lr}
 8002902:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4798      	blx	r3
 800290a:	2000      	movs	r0, #0
 800290c:	bd08      	pop	{r3, pc}

0800290e <USBD_LL_SetupStage>:
 800290e:	b538      	push	{r3, r4, r5, lr}
 8002910:	4604      	mov	r4, r0
 8002912:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8002916:	4628      	mov	r0, r5
 8002918:	f000 fa75 	bl	8002e06 <USBD_ParseSetupRequest>
 800291c:	2301      	movs	r3, #1
 800291e:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
 8002922:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
 8002926:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800292a:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
 800292e:	f001 031f 	and.w	r3, r1, #31
 8002932:	2b01      	cmp	r3, #1
 8002934:	d00e      	beq.n	8002954 <USBD_LL_SetupStage+0x46>
 8002936:	d307      	bcc.n	8002948 <USBD_LL_SetupStage+0x3a>
 8002938:	2b02      	cmp	r3, #2
 800293a:	d010      	beq.n	800295e <USBD_LL_SetupStage+0x50>
 800293c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002940:	4620      	mov	r0, r4
 8002942:	f009 faf0 	bl	800bf26 <USBD_LL_StallEP>
 8002946:	e003      	b.n	8002950 <USBD_LL_SetupStage+0x42>
 8002948:	4629      	mov	r1, r5
 800294a:	4620      	mov	r0, r4
 800294c:	f000 f8e6 	bl	8002b1c <USBD_StdDevReq>
 8002950:	2000      	movs	r0, #0
 8002952:	bd38      	pop	{r3, r4, r5, pc}
 8002954:	4629      	mov	r1, r5
 8002956:	4620      	mov	r0, r4
 8002958:	f000 f9da 	bl	8002d10 <USBD_StdItfReq>
 800295c:	e7f8      	b.n	8002950 <USBD_LL_SetupStage+0x42>
 800295e:	4629      	mov	r1, r5
 8002960:	4620      	mov	r0, r4
 8002962:	f000 f9ed 	bl	8002d40 <USBD_StdEPReq>
 8002966:	e7f3      	b.n	8002950 <USBD_LL_SetupStage+0x42>

08002968 <USBD_LL_DataOutStage>:
 8002968:	b538      	push	{r3, r4, r5, lr}
 800296a:	4604      	mov	r4, r0
 800296c:	4615      	mov	r5, r2
 800296e:	bb11      	cbnz	r1, 80029b6 <USBD_LL_DataOutStage+0x4e>
 8002970:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002974:	2b03      	cmp	r3, #3
 8002976:	d10f      	bne.n	8002998 <USBD_LL_DataOutStage+0x30>
 8002978:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800297c:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002980:	4293      	cmp	r3, r2
 8002982:	d90b      	bls.n	800299c <USBD_LL_DataOutStage+0x34>
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	429a      	cmp	r2, r3
 8002988:	bf28      	it	cs
 800298a:	461a      	movcs	r2, r3
 800298c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8002990:	b292      	uxth	r2, r2
 8002992:	4629      	mov	r1, r5
 8002994:	f000 fa96 	bl	8002ec4 <USBD_CtlContinueRx>
 8002998:	2000      	movs	r0, #0
 800299a:	bd38      	pop	{r3, r4, r5, pc}
 800299c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	b123      	cbz	r3, 80029ae <USBD_LL_DataOutStage+0x46>
 80029a4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80029a8:	2a03      	cmp	r2, #3
 80029aa:	d100      	bne.n	80029ae <USBD_LL_DataOutStage+0x46>
 80029ac:	4798      	blx	r3
 80029ae:	4620      	mov	r0, r4
 80029b0:	f000 fa90 	bl	8002ed4 <USBD_CtlSendStatus>
 80029b4:	e7f0      	b.n	8002998 <USBD_LL_DataOutStage+0x30>
 80029b6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0eb      	beq.n	8002998 <USBD_LL_DataOutStage+0x30>
 80029c0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80029c4:	2a03      	cmp	r2, #3
 80029c6:	d1e7      	bne.n	8002998 <USBD_LL_DataOutStage+0x30>
 80029c8:	4798      	blx	r3
 80029ca:	e7e5      	b.n	8002998 <USBD_LL_DataOutStage+0x30>

080029cc <USBD_LL_DataInStage>:
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	4613      	mov	r3, r2
 80029d0:	4604      	mov	r4, r0
 80029d2:	460e      	mov	r6, r1
 80029d4:	2900      	cmp	r1, #0
 80029d6:	d13d      	bne.n	8002a54 <USBD_LL_DataInStage+0x88>
 80029d8:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80029dc:	2a02      	cmp	r2, #2
 80029de:	d10f      	bne.n	8002a00 <USBD_LL_DataInStage+0x34>
 80029e0:	69c5      	ldr	r5, [r0, #28]
 80029e2:	6a02      	ldr	r2, [r0, #32]
 80029e4:	4295      	cmp	r5, r2
 80029e6:	d914      	bls.n	8002a12 <USBD_LL_DataInStage+0x46>
 80029e8:	1aaa      	subs	r2, r5, r2
 80029ea:	61c2      	str	r2, [r0, #28]
 80029ec:	4619      	mov	r1, r3
 80029ee:	b292      	uxth	r2, r2
 80029f0:	f000 fa51 	bl	8002e96 <USBD_CtlContinueSendData>
 80029f4:	4633      	mov	r3, r6
 80029f6:	461a      	mov	r2, r3
 80029f8:	4619      	mov	r1, r3
 80029fa:	4620      	mov	r0, r4
 80029fc:	f009 fac2 	bl	800bf84 <USBD_LL_PrepareReceive>
 8002a00:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d102      	bne.n	8002a0e <USBD_LL_DataInStage+0x42>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8002a0e:	2000      	movs	r0, #0
 8002a10:	bd70      	pop	{r4, r5, r6, pc}
 8002a12:	6983      	ldr	r3, [r0, #24]
 8002a14:	fbb3 f5f2 	udiv	r5, r3, r2
 8002a18:	fb02 3515 	mls	r5, r2, r5, r3
 8002a1c:	b965      	cbnz	r5, 8002a38 <USBD_LL_DataInStage+0x6c>
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d80a      	bhi.n	8002a38 <USBD_LL_DataInStage+0x6c>
 8002a22:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d206      	bcs.n	8002a38 <USBD_LL_DataInStage+0x6c>
 8002a2a:	462a      	mov	r2, r5
 8002a2c:	f000 fa33 	bl	8002e96 <USBD_CtlContinueSendData>
 8002a30:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 8002a34:	462b      	mov	r3, r5
 8002a36:	e7de      	b.n	80029f6 <USBD_LL_DataInStage+0x2a>
 8002a38:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	b12b      	cbz	r3, 8002a4c <USBD_LL_DataInStage+0x80>
 8002a40:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002a44:	2a03      	cmp	r2, #3
 8002a46:	d101      	bne.n	8002a4c <USBD_LL_DataInStage+0x80>
 8002a48:	4620      	mov	r0, r4
 8002a4a:	4798      	blx	r3
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f000 fa4c 	bl	8002eea <USBD_CtlReceiveStatus>
 8002a52:	e7d5      	b.n	8002a00 <USBD_LL_DataInStage+0x34>
 8002a54:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0d7      	beq.n	8002a0e <USBD_LL_DataInStage+0x42>
 8002a5e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002a62:	2a03      	cmp	r2, #3
 8002a64:	d1d3      	bne.n	8002a0e <USBD_LL_DataInStage+0x42>
 8002a66:	4798      	blx	r3
 8002a68:	e7d1      	b.n	8002a0e <USBD_LL_DataInStage+0x42>

08002a6a <USBD_LL_Reset>:
 8002a6a:	b538      	push	{r3, r4, r5, lr}
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	4604      	mov	r4, r0
 8002a70:	4611      	mov	r1, r2
 8002a72:	2540      	movs	r5, #64	; 0x40
 8002a74:	2340      	movs	r3, #64	; 0x40
 8002a76:	f009 fa3e 	bl	800bef6 <USBD_LL_OpenEP>
 8002a7a:	462b      	mov	r3, r5
 8002a7c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 8002a80:	2200      	movs	r2, #0
 8002a82:	2180      	movs	r1, #128	; 0x80
 8002a84:	4620      	mov	r0, r4
 8002a86:	f009 fa36 	bl	800bef6 <USBD_LL_OpenEP>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8002a90:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002a94:	6225      	str	r5, [r4, #32]
 8002a96:	b12b      	cbz	r3, 8002aa4 <USBD_LL_Reset+0x3a>
 8002a98:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002a9c:	7921      	ldrb	r1, [r4, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	4798      	blx	r3
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	bd38      	pop	{r3, r4, r5, pc}

08002aa8 <USBD_LL_SetSpeed>:
 8002aa8:	7401      	strb	r1, [r0, #16]
 8002aaa:	2000      	movs	r0, #0
 8002aac:	4770      	bx	lr

08002aae <USBD_LL_Suspend>:
 8002aae:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002ab2:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 8002abc:	2000      	movs	r0, #0
 8002abe:	4770      	bx	lr

08002ac0 <USBD_LL_Resume>:
 8002ac0:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002ac4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 8002ac8:	2000      	movs	r0, #0
 8002aca:	4770      	bx	lr

08002acc <USBD_LL_SOF>:
 8002acc:	b508      	push	{r3, lr}
 8002ace:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002ad2:	2a03      	cmp	r2, #3
 8002ad4:	d104      	bne.n	8002ae0 <USBD_LL_SOF+0x14>
 8002ad6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	b103      	cbz	r3, 8002ae0 <USBD_LL_SOF+0x14>
 8002ade:	4798      	blx	r3
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	bd08      	pop	{r3, pc}

08002ae4 <USBD_LL_IsoINIncomplete>:
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	4770      	bx	lr

08002ae8 <USBD_LL_IsoOUTIncomplete>:
 8002ae8:	2000      	movs	r0, #0
 8002aea:	4770      	bx	lr

08002aec <USBD_LL_DevConnected>:
 8002aec:	2000      	movs	r0, #0
 8002aee:	4770      	bx	lr

08002af0 <USBD_LL_DevDisconnected>:
 8002af0:	b508      	push	{r3, lr}
 8002af2:	2201      	movs	r2, #1
 8002af4:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
 8002af8:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8002afc:	7901      	ldrb	r1, [r0, #4]
 8002afe:	6852      	ldr	r2, [r2, #4]
 8002b00:	4790      	blx	r2
 8002b02:	2000      	movs	r0, #0
 8002b04:	bd08      	pop	{r3, pc}

08002b06 <USBD_CtlError.constprop.0>:
 8002b06:	b510      	push	{r4, lr}
 8002b08:	2180      	movs	r1, #128	; 0x80
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	f009 fa0b 	bl	800bf26 <USBD_LL_StallEP>
 8002b10:	4620      	mov	r0, r4
 8002b12:	2100      	movs	r1, #0
 8002b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b18:	f009 ba05 	b.w	800bf26 <USBD_LL_StallEP>

08002b1c <USBD_StdDevReq>:
 8002b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b1e:	784b      	ldrb	r3, [r1, #1]
 8002b20:	4604      	mov	r4, r0
 8002b22:	460d      	mov	r5, r1
 8002b24:	2b09      	cmp	r3, #9
 8002b26:	d879      	bhi.n	8002c1c <USBD_StdDevReq+0x100>
 8002b28:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002b2c:	00e500c9 	.word	0x00e500c9
 8002b30:	00d90078 	.word	0x00d90078
 8002b34:	006d0078 	.word	0x006d0078
 8002b38:	0078000a 	.word	0x0078000a
 8002b3c:	008d00b9 	.word	0x008d00b9
 8002b40:	884b      	ldrh	r3, [r1, #2]
 8002b42:	0a1a      	lsrs	r2, r3, #8
 8002b44:	3a01      	subs	r2, #1
 8002b46:	2a06      	cmp	r2, #6
 8002b48:	d868      	bhi.n	8002c1c <USBD_StdDevReq+0x100>
 8002b4a:	e8df f002 	tbb	[pc, r2]
 8002b4e:	1c04      	.short	0x1c04
 8002b50:	49676729 	.word	0x49676729
 8002b54:	52          	.byte	0x52
 8002b55:	00          	.byte	0x00
 8002b56:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	7c20      	ldrb	r0, [r4, #16]
 8002b5e:	f10d 0106 	add.w	r1, sp, #6
 8002b62:	4798      	blx	r3
 8002b64:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002b68:	2a00      	cmp	r2, #0
 8002b6a:	d067      	beq.n	8002c3c <USBD_StdDevReq+0x120>
 8002b6c:	88eb      	ldrh	r3, [r5, #6]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d064      	beq.n	8002c3c <USBD_StdDevReq+0x120>
 8002b72:	429a      	cmp	r2, r3
 8002b74:	bf28      	it	cs
 8002b76:	461a      	movcs	r2, r3
 8002b78:	f8ad 2006 	strh.w	r2, [sp, #6]
 8002b7c:	4601      	mov	r1, r0
 8002b7e:	4620      	mov	r0, r4
 8002b80:	f000 f97c 	bl	8002e7c <USBD_CtlSendData>
 8002b84:	e05a      	b.n	8002c3c <USBD_StdDevReq+0x120>
 8002b86:	7c02      	ldrb	r2, [r0, #16]
 8002b88:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002b8c:	b932      	cbnz	r2, 8002b9c <USBD_StdDevReq+0x80>
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	f10d 0006 	add.w	r0, sp, #6
 8002b94:	4798      	blx	r3
 8002b96:	2302      	movs	r3, #2
 8002b98:	7043      	strb	r3, [r0, #1]
 8002b9a:	e7e3      	b.n	8002b64 <USBD_StdDevReq+0x48>
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	e7f7      	b.n	8002b90 <USBD_StdDevReq+0x74>
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b05      	cmp	r3, #5
 8002ba4:	d83a      	bhi.n	8002c1c <USBD_StdDevReq+0x100>
 8002ba6:	e8df f003 	tbb	[pc, r3]
 8002baa:	0703      	.short	0x0703
 8002bac:	17130f0b 	.word	0x17130f0b
 8002bb0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	e7d1      	b.n	8002b5c <USBD_StdDevReq+0x40>
 8002bb8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	e7cd      	b.n	8002b5c <USBD_StdDevReq+0x40>
 8002bc0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	e7c9      	b.n	8002b5c <USBD_StdDevReq+0x40>
 8002bc8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	e7c5      	b.n	8002b5c <USBD_StdDevReq+0x40>
 8002bd0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	e7c1      	b.n	8002b5c <USBD_StdDevReq+0x40>
 8002bd8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	e7bd      	b.n	8002b5c <USBD_StdDevReq+0x40>
 8002be0:	7c03      	ldrb	r3, [r0, #16]
 8002be2:	b9db      	cbnz	r3, 8002c1c <USBD_StdDevReq+0x100>
 8002be4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002be8:	f10d 0006 	add.w	r0, sp, #6
 8002bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bee:	4798      	blx	r3
 8002bf0:	e7b8      	b.n	8002b64 <USBD_StdDevReq+0x48>
 8002bf2:	7c03      	ldrb	r3, [r0, #16]
 8002bf4:	b993      	cbnz	r3, 8002c1c <USBD_StdDevReq+0x100>
 8002bf6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002bfa:	f10d 0006 	add.w	r0, sp, #6
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	4798      	blx	r3
 8002c02:	2307      	movs	r3, #7
 8002c04:	e7c8      	b.n	8002b98 <USBD_StdDevReq+0x7c>
 8002c06:	888b      	ldrh	r3, [r1, #4]
 8002c08:	b943      	cbnz	r3, 8002c1c <USBD_StdDevReq+0x100>
 8002c0a:	88cb      	ldrh	r3, [r1, #6]
 8002c0c:	b933      	cbnz	r3, 8002c1c <USBD_StdDevReq+0x100>
 8002c0e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002c12:	788d      	ldrb	r5, [r1, #2]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8002c1a:	d103      	bne.n	8002c24 <USBD_StdDevReq+0x108>
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f7ff ff72 	bl	8002b06 <USBD_CtlError.constprop.0>
 8002c22:	e00b      	b.n	8002c3c <USBD_StdDevReq+0x120>
 8002c24:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
 8002c28:	4629      	mov	r1, r5
 8002c2a:	f009 f99d 	bl	800bf68 <USBD_LL_SetUSBAddress>
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f000 f950 	bl	8002ed4 <USBD_CtlSendStatus>
 8002c34:	b12d      	cbz	r5, 8002c42 <USBD_StdDevReq+0x126>
 8002c36:	2302      	movs	r3, #2
 8002c38:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	b003      	add	sp, #12
 8002c40:	bd30      	pop	{r4, r5, pc}
 8002c42:	2301      	movs	r3, #1
 8002c44:	e7f8      	b.n	8002c38 <USBD_StdDevReq+0x11c>
 8002c46:	7889      	ldrb	r1, [r1, #2]
 8002c48:	4d30      	ldr	r5, [pc, #192]	; (8002d0c <USBD_StdDevReq+0x1f0>)
 8002c4a:	2901      	cmp	r1, #1
 8002c4c:	7029      	strb	r1, [r5, #0]
 8002c4e:	d8e5      	bhi.n	8002c1c <USBD_StdDevReq+0x100>
 8002c50:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d00c      	beq.n	8002c72 <USBD_StdDevReq+0x156>
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d1df      	bne.n	8002c1c <USBD_StdDevReq+0x100>
 8002c5c:	b9b1      	cbnz	r1, 8002c8c <USBD_StdDevReq+0x170>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 8002c64:	6041      	str	r1, [r0, #4]
 8002c66:	f7ff fe4b 	bl	8002900 <USBD_ClrClassConfig>
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f000 f932 	bl	8002ed4 <USBD_CtlSendStatus>
 8002c70:	e7e4      	b.n	8002c3c <USBD_StdDevReq+0x120>
 8002c72:	2900      	cmp	r1, #0
 8002c74:	d0f9      	beq.n	8002c6a <USBD_StdDevReq+0x14e>
 8002c76:	2101      	movs	r1, #1
 8002c78:	2303      	movs	r3, #3
 8002c7a:	6041      	str	r1, [r0, #4]
 8002c7c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 8002c80:	4620      	mov	r0, r4
 8002c82:	f7ff fe32 	bl	80028ea <USBD_SetClassConfig>
 8002c86:	2802      	cmp	r0, #2
 8002c88:	d1ef      	bne.n	8002c6a <USBD_StdDevReq+0x14e>
 8002c8a:	e7c7      	b.n	8002c1c <USBD_StdDevReq+0x100>
 8002c8c:	6841      	ldr	r1, [r0, #4]
 8002c8e:	2901      	cmp	r1, #1
 8002c90:	d0eb      	beq.n	8002c6a <USBD_StdDevReq+0x14e>
 8002c92:	b2c9      	uxtb	r1, r1
 8002c94:	f7ff fe34 	bl	8002900 <USBD_ClrClassConfig>
 8002c98:	7829      	ldrb	r1, [r5, #0]
 8002c9a:	6061      	str	r1, [r4, #4]
 8002c9c:	e7f0      	b.n	8002c80 <USBD_StdDevReq+0x164>
 8002c9e:	88ca      	ldrh	r2, [r1, #6]
 8002ca0:	2a01      	cmp	r2, #1
 8002ca2:	d1bb      	bne.n	8002c1c <USBD_StdDevReq+0x100>
 8002ca4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d003      	beq.n	8002cb4 <USBD_StdDevReq+0x198>
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d1b5      	bne.n	8002c1c <USBD_StdDevReq+0x100>
 8002cb0:	1d01      	adds	r1, r0, #4
 8002cb2:	e764      	b.n	8002b7e <USBD_StdDevReq+0x62>
 8002cb4:	4601      	mov	r1, r0
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f841 3f08 	str.w	r3, [r1, #8]!
 8002cbc:	e75f      	b.n	8002b7e <USBD_StdDevReq+0x62>
 8002cbe:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002cc2:	3b02      	subs	r3, #2
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d8a9      	bhi.n	8002c1c <USBD_StdDevReq+0x100>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	60c3      	str	r3, [r0, #12]
 8002ccc:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002cd0:	b10b      	cbz	r3, 8002cd6 <USBD_StdDevReq+0x1ba>
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	60c3      	str	r3, [r0, #12]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f104 010c 	add.w	r1, r4, #12
 8002cdc:	e74f      	b.n	8002b7e <USBD_StdDevReq+0x62>
 8002cde:	884b      	ldrh	r3, [r1, #2]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d1ab      	bne.n	8002c3c <USBD_StdDevReq+0x120>
 8002ce4:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
 8002ce8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002cec:	4629      	mov	r1, r5
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	4798      	blx	r3
 8002cf4:	e7b9      	b.n	8002c6a <USBD_StdDevReq+0x14e>
 8002cf6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002cfa:	3b02      	subs	r3, #2
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d88d      	bhi.n	8002c1c <USBD_StdDevReq+0x100>
 8002d00:	884b      	ldrh	r3, [r1, #2]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d19a      	bne.n	8002c3c <USBD_StdDevReq+0x120>
 8002d06:	2300      	movs	r3, #0
 8002d08:	e7ec      	b.n	8002ce4 <USBD_StdDevReq+0x1c8>
 8002d0a:	bf00      	nop
 8002d0c:	20000508 	.word	0x20000508

08002d10 <USBD_StdItfReq>:
 8002d10:	b538      	push	{r3, r4, r5, lr}
 8002d12:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	4604      	mov	r4, r0
 8002d1a:	460d      	mov	r5, r1
 8002d1c:	d10d      	bne.n	8002d3a <USBD_StdItfReq+0x2a>
 8002d1e:	790b      	ldrb	r3, [r1, #4]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d80a      	bhi.n	8002d3a <USBD_StdItfReq+0x2a>
 8002d24:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	4798      	blx	r3
 8002d2c:	88eb      	ldrh	r3, [r5, #6]
 8002d2e:	b913      	cbnz	r3, 8002d36 <USBD_StdItfReq+0x26>
 8002d30:	4620      	mov	r0, r4
 8002d32:	f000 f8cf 	bl	8002ed4 <USBD_CtlSendStatus>
 8002d36:	2000      	movs	r0, #0
 8002d38:	bd38      	pop	{r3, r4, r5, pc}
 8002d3a:	f7ff fee4 	bl	8002b06 <USBD_CtlError.constprop.0>
 8002d3e:	e7fa      	b.n	8002d36 <USBD_StdItfReq+0x26>

08002d40 <USBD_StdEPReq>:
 8002d40:	b570      	push	{r4, r5, r6, lr}
 8002d42:	780a      	ldrb	r2, [r1, #0]
 8002d44:	888e      	ldrh	r6, [r1, #4]
 8002d46:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002d4a:	2a20      	cmp	r2, #32
 8002d4c:	4604      	mov	r4, r0
 8002d4e:	460d      	mov	r5, r1
 8002d50:	b2f3      	uxtb	r3, r6
 8002d52:	d105      	bne.n	8002d60 <USBD_StdEPReq+0x20>
 8002d54:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	4798      	blx	r3
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	bd70      	pop	{r4, r5, r6, pc}
 8002d60:	784a      	ldrb	r2, [r1, #1]
 8002d62:	2a01      	cmp	r2, #1
 8002d64:	d01c      	beq.n	8002da0 <USBD_StdEPReq+0x60>
 8002d66:	d32a      	bcc.n	8002dbe <USBD_StdEPReq+0x7e>
 8002d68:	2a03      	cmp	r2, #3
 8002d6a:	d1f7      	bne.n	8002d5c <USBD_StdEPReq+0x1c>
 8002d6c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002d70:	2a02      	cmp	r2, #2
 8002d72:	d040      	beq.n	8002df6 <USBD_StdEPReq+0xb6>
 8002d74:	2a03      	cmp	r2, #3
 8002d76:	d002      	beq.n	8002d7e <USBD_StdEPReq+0x3e>
 8002d78:	f7ff fec5 	bl	8002b06 <USBD_CtlError.constprop.0>
 8002d7c:	e7ee      	b.n	8002d5c <USBD_StdEPReq+0x1c>
 8002d7e:	884a      	ldrh	r2, [r1, #2]
 8002d80:	b922      	cbnz	r2, 8002d8c <USBD_StdEPReq+0x4c>
 8002d82:	065e      	lsls	r6, r3, #25
 8002d84:	d002      	beq.n	8002d8c <USBD_StdEPReq+0x4c>
 8002d86:	4619      	mov	r1, r3
 8002d88:	f009 f8cd 	bl	800bf26 <USBD_LL_StallEP>
 8002d8c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002d90:	4629      	mov	r1, r5
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	4620      	mov	r0, r4
 8002d96:	4798      	blx	r3
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f000 f89b 	bl	8002ed4 <USBD_CtlSendStatus>
 8002d9e:	e7dd      	b.n	8002d5c <USBD_StdEPReq+0x1c>
 8002da0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002da4:	2a02      	cmp	r2, #2
 8002da6:	d026      	beq.n	8002df6 <USBD_StdEPReq+0xb6>
 8002da8:	2a03      	cmp	r2, #3
 8002daa:	d1e5      	bne.n	8002d78 <USBD_StdEPReq+0x38>
 8002dac:	884a      	ldrh	r2, [r1, #2]
 8002dae:	2a00      	cmp	r2, #0
 8002db0:	d1d4      	bne.n	8002d5c <USBD_StdEPReq+0x1c>
 8002db2:	0659      	lsls	r1, r3, #25
 8002db4:	d0f0      	beq.n	8002d98 <USBD_StdEPReq+0x58>
 8002db6:	4619      	mov	r1, r3
 8002db8:	f009 f8bc 	bl	800bf34 <USBD_LL_ClearStallEP>
 8002dbc:	e7e6      	b.n	8002d8c <USBD_StdEPReq+0x4c>
 8002dbe:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002dc2:	2a02      	cmp	r2, #2
 8002dc4:	d017      	beq.n	8002df6 <USBD_StdEPReq+0xb6>
 8002dc6:	2a03      	cmp	r2, #3
 8002dc8:	d1d6      	bne.n	8002d78 <USBD_StdEPReq+0x38>
 8002dca:	f003 057f 	and.w	r5, r3, #127	; 0x7f
 8002dce:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002dd2:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	bf14      	ite	ne
 8002dda:	3514      	addne	r5, #20
 8002ddc:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
 8002de0:	f009 f8af 	bl	800bf42 <USBD_LL_IsStallEP>
 8002de4:	b168      	cbz	r0, 8002e02 <USBD_StdEPReq+0xc2>
 8002de6:	2301      	movs	r3, #1
 8002de8:	602b      	str	r3, [r5, #0]
 8002dea:	2202      	movs	r2, #2
 8002dec:	4629      	mov	r1, r5
 8002dee:	4620      	mov	r0, r4
 8002df0:	f000 f844 	bl	8002e7c <USBD_CtlSendData>
 8002df4:	e7b2      	b.n	8002d5c <USBD_StdEPReq+0x1c>
 8002df6:	065a      	lsls	r2, r3, #25
 8002df8:	d0b0      	beq.n	8002d5c <USBD_StdEPReq+0x1c>
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f009 f893 	bl	800bf26 <USBD_LL_StallEP>
 8002e00:	e7ac      	b.n	8002d5c <USBD_StdEPReq+0x1c>
 8002e02:	6028      	str	r0, [r5, #0]
 8002e04:	e7f1      	b.n	8002dea <USBD_StdEPReq+0xaa>

08002e06 <USBD_ParseSetupRequest>:
 8002e06:	780b      	ldrb	r3, [r1, #0]
 8002e08:	7003      	strb	r3, [r0, #0]
 8002e0a:	784b      	ldrb	r3, [r1, #1]
 8002e0c:	7043      	strb	r3, [r0, #1]
 8002e0e:	78ca      	ldrb	r2, [r1, #3]
 8002e10:	788b      	ldrb	r3, [r1, #2]
 8002e12:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e16:	8043      	strh	r3, [r0, #2]
 8002e18:	794a      	ldrb	r2, [r1, #5]
 8002e1a:	790b      	ldrb	r3, [r1, #4]
 8002e1c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e20:	8083      	strh	r3, [r0, #4]
 8002e22:	79ca      	ldrb	r2, [r1, #7]
 8002e24:	798b      	ldrb	r3, [r1, #6]
 8002e26:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e2a:	80c3      	strh	r3, [r0, #6]
 8002e2c:	4770      	bx	lr

08002e2e <USBD_CtlError>:
 8002e2e:	b510      	push	{r4, lr}
 8002e30:	2180      	movs	r1, #128	; 0x80
 8002e32:	4604      	mov	r4, r0
 8002e34:	f009 f877 	bl	800bf26 <USBD_LL_StallEP>
 8002e38:	4620      	mov	r0, r4
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e40:	f009 b871 	b.w	800bf26 <USBD_LL_StallEP>

08002e44 <USBD_GetString>:
 8002e44:	b530      	push	{r4, r5, lr}
 8002e46:	b188      	cbz	r0, 8002e6c <USBD_GetString+0x28>
 8002e48:	4605      	mov	r5, r0
 8002e4a:	1a2b      	subs	r3, r5, r0
 8002e4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2c00      	cmp	r4, #0
 8002e54:	d1f9      	bne.n	8002e4a <USBD_GetString+0x6>
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	3302      	adds	r3, #2
 8002e5a:	8013      	strh	r3, [r2, #0]
 8002e5c:	700b      	strb	r3, [r1, #0]
 8002e5e:	2303      	movs	r3, #3
 8002e60:	704b      	strb	r3, [r1, #1]
 8002e62:	3801      	subs	r0, #1
 8002e64:	2302      	movs	r3, #2
 8002e66:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002e6a:	b905      	cbnz	r5, 8002e6e <USBD_GetString+0x2a>
 8002e6c:	bd30      	pop	{r4, r5, pc}
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	54cd      	strb	r5, [r1, r3]
 8002e74:	3302      	adds	r3, #2
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	548c      	strb	r4, [r1, r2]
 8002e7a:	e7f4      	b.n	8002e66 <USBD_GetString+0x22>

08002e7c <USBD_CtlSendData>:
 8002e7c:	b510      	push	{r4, lr}
 8002e7e:	4613      	mov	r3, r2
 8002e80:	2202      	movs	r2, #2
 8002e82:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
 8002e86:	6183      	str	r3, [r0, #24]
 8002e88:	460a      	mov	r2, r1
 8002e8a:	61c3      	str	r3, [r0, #28]
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	f009 f872 	bl	800bf76 <USBD_LL_Transmit>
 8002e92:	2000      	movs	r0, #0
 8002e94:	bd10      	pop	{r4, pc}

08002e96 <USBD_CtlContinueSendData>:
 8002e96:	b508      	push	{r3, lr}
 8002e98:	4613      	mov	r3, r2
 8002e9a:	460a      	mov	r2, r1
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	f009 f86a 	bl	800bf76 <USBD_LL_Transmit>
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	bd08      	pop	{r3, pc}

08002ea6 <USBD_CtlPrepareRx>:
 8002ea6:	b510      	push	{r4, lr}
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	2203      	movs	r2, #3
 8002eac:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
 8002eb0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8002eb4:	460a      	mov	r2, r1
 8002eb6:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
 8002eba:	2100      	movs	r1, #0
 8002ebc:	f009 f862 	bl	800bf84 <USBD_LL_PrepareReceive>
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	bd10      	pop	{r4, pc}

08002ec4 <USBD_CtlContinueRx>:
 8002ec4:	b508      	push	{r3, lr}
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	460a      	mov	r2, r1
 8002eca:	2100      	movs	r1, #0
 8002ecc:	f009 f85a 	bl	800bf84 <USBD_LL_PrepareReceive>
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	bd08      	pop	{r3, pc}

08002ed4 <USBD_CtlSendStatus>:
 8002ed4:	b508      	push	{r3, lr}
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
 8002edc:	2300      	movs	r3, #0
 8002ede:	461a      	mov	r2, r3
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	f009 f848 	bl	800bf76 <USBD_LL_Transmit>
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	bd08      	pop	{r3, pc}

08002eea <USBD_CtlReceiveStatus>:
 8002eea:	b508      	push	{r3, lr}
 8002eec:	2305      	movs	r3, #5
 8002eee:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	f009 f844 	bl	800bf84 <USBD_LL_PrepareReceive>
 8002efc:	2000      	movs	r0, #0
 8002efe:	bd08      	pop	{r3, pc}

08002f00 <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8002f00:	2320      	movs	r3, #32
 8002f02:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8002f04:	4800      	ldr	r0, [pc, #0]	; (8002f08 <USBD_MSC_GetHSCfgDesc+0x8>)
 8002f06:	4770      	bx	lr
 8002f08:	2000005c 	.word	0x2000005c

08002f0c <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8002f10:	4800      	ldr	r0, [pc, #0]	; (8002f14 <USBD_MSC_GetFSCfgDesc+0x8>)
 8002f12:	4770      	bx	lr
 8002f14:	2000003c 	.word	0x2000003c

08002f18 <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8002f18:	2320      	movs	r3, #32
 8002f1a:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8002f1c:	4800      	ldr	r0, [pc, #0]	; (8002f20 <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 8002f1e:	4770      	bx	lr
 8002f20:	20000088 	.word	0x20000088

08002f24 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8002f24:	230a      	movs	r3, #10
 8002f26:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 8002f28:	4800      	ldr	r0, [pc, #0]	; (8002f2c <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 8002f2a:	4770      	bx	lr
 8002f2c:	2000007c 	.word	0x2000007c

08002f30 <USBD_MSC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002f30:	7c03      	ldrb	r3, [r0, #16]
{
 8002f32:	b510      	push	{r4, lr}
 8002f34:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002f36:	b9c3      	cbnz	r3, 8002f6a <USBD_MSC_Init+0x3a>
    USBD_LL_OpenEP(pdev,
 8002f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	2101      	movs	r1, #1
 8002f40:	f008 ffd9 	bl	800bef6 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002f44:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8002f48:	2202      	movs	r2, #2
 8002f4a:	2181      	movs	r1, #129	; 0x81
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	f008 ffd2 	bl	800bef6 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 8002f52:	f242 006c 	movw	r0, #8300	; 0x206c
 8002f56:	f009 fe07 	bl	800cb68 <malloc>
 8002f5a:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8002f5e:	b158      	cbz	r0, 8002f78 <USBD_MSC_Init+0x48>
    MSC_BOT_Init(pdev); 
 8002f60:	4620      	mov	r0, r4
 8002f62:	f000 f8be 	bl	80030e2 <MSC_BOT_Init>
    ret = 0;
 8002f66:	2000      	movs	r0, #0
 8002f68:	bd10      	pop	{r4, pc}
    USBD_LL_OpenEP(pdev,
 8002f6a:	2340      	movs	r3, #64	; 0x40
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	2101      	movs	r1, #1
 8002f70:	f008 ffc1 	bl	800bef6 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002f74:	2340      	movs	r3, #64	; 0x40
 8002f76:	e7e7      	b.n	8002f48 <USBD_MSC_Init+0x18>
    ret = 1; 
 8002f78:	2001      	movs	r0, #1
}
 8002f7a:	bd10      	pop	{r4, pc}

08002f7c <USBD_MSC_DeInit>:
{
 8002f7c:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8002f7e:	2101      	movs	r1, #1
{
 8002f80:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8002f82:	f008 ffc2 	bl	800bf0a <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002f86:	2181      	movs	r1, #129	; 0x81
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f008 ffbe 	bl	800bf0a <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f000 f8d6 	bl	8003140 <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 8002f94:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002f98:	b120      	cbz	r0, 8002fa4 <USBD_MSC_DeInit+0x28>
    USBD_free(pdev->pClassData);
 8002f9a:	f009 fded 	bl	800cb78 <free>
    pdev->pClassData  = NULL; 
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	bd10      	pop	{r4, pc}

08002fa8 <USBD_MSC_Setup>:
{
 8002fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002fac:	780b      	ldrb	r3, [r1, #0]
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8002fae:	f8d0 8218 	ldr.w	r8, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002fb2:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 8002fb6:	4606      	mov	r6, r0
 8002fb8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002fba:	d02d      	beq.n	8003018 <USBD_MSC_Setup+0x70>
 8002fbc:	2c20      	cmp	r4, #32
 8002fbe:	d14a      	bne.n	8003056 <USBD_MSC_Setup+0xae>
    switch (req->bRequest)
 8002fc0:	784a      	ldrb	r2, [r1, #1]
 8002fc2:	2afe      	cmp	r2, #254	; 0xfe
 8002fc4:	d005      	beq.n	8002fd2 <USBD_MSC_Setup+0x2a>
 8002fc6:	2aff      	cmp	r2, #255	; 0xff
 8002fc8:	d019      	beq.n	8002ffe <USBD_MSC_Setup+0x56>
       USBD_CtlError(pdev , req);
 8002fca:	f7ff ff30 	bl	8002e2e <USBD_CtlError>
       return USBD_FAIL; 
 8002fce:	2402      	movs	r4, #2
 8002fd0:	e01f      	b.n	8003012 <USBD_MSC_Setup+0x6a>
      if((req->wValue  == 0) && 
 8002fd2:	884c      	ldrh	r4, [r1, #2]
 8002fd4:	b984      	cbnz	r4, 8002ff8 <USBD_MSC_Setup+0x50>
 8002fd6:	88cf      	ldrh	r7, [r1, #6]
 8002fd8:	2f01      	cmp	r7, #1
 8002fda:	d10d      	bne.n	8002ff8 <USBD_MSC_Setup+0x50>
         (req->wLength == 1) &&
 8002fdc:	061a      	lsls	r2, r3, #24
 8002fde:	d50b      	bpl.n	8002ff8 <USBD_MSC_Setup+0x50>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8002fe0:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	4798      	blx	r3
        USBD_CtlSendData (pdev,
 8002fe8:	463a      	mov	r2, r7
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8002fea:	f8c8 0000 	str.w	r0, [r8]
        USBD_CtlSendData (pdev,
 8002fee:	4641      	mov	r1, r8
 8002ff0:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8002ff2:	f7ff ff43 	bl	8002e7c <USBD_CtlSendData>
      break;
 8002ff6:	e00c      	b.n	8003012 <USBD_MSC_Setup+0x6a>
         USBD_CtlError(pdev , req);
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	4630      	mov	r0, r6
 8002ffc:	e7e5      	b.n	8002fca <USBD_MSC_Setup+0x22>
      if((req->wValue  == 0) && 
 8002ffe:	884a      	ldrh	r2, [r1, #2]
 8003000:	2a00      	cmp	r2, #0
 8003002:	d1f9      	bne.n	8002ff8 <USBD_MSC_Setup+0x50>
 8003004:	88cc      	ldrh	r4, [r1, #6]
 8003006:	2c00      	cmp	r4, #0
 8003008:	d1f6      	bne.n	8002ff8 <USBD_MSC_Setup+0x50>
         (req->wLength == 0) &&
 800300a:	061b      	lsls	r3, r3, #24
 800300c:	d4f4      	bmi.n	8002ff8 <USBD_MSC_Setup+0x50>
         MSC_BOT_Reset(pdev);
 800300e:	f000 f88b 	bl	8003128 <MSC_BOT_Reset>
}
 8003012:	4620      	mov	r0, r4
 8003014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8003018:	784f      	ldrb	r7, [r1, #1]
 800301a:	2f0a      	cmp	r7, #10
 800301c:	d01d      	beq.n	800305a <USBD_MSC_Setup+0xb2>
 800301e:	2f0b      	cmp	r7, #11
 8003020:	d01f      	beq.n	8003062 <USBD_MSC_Setup+0xba>
 8003022:	2f01      	cmp	r7, #1
 8003024:	d1f5      	bne.n	8003012 <USBD_MSC_Setup+0x6a>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8003026:	7909      	ldrb	r1, [r1, #4]
 8003028:	f008 ff76 	bl	800bf18 <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 800302c:	7929      	ldrb	r1, [r5, #4]
 800302e:	4630      	mov	r0, r6
 8003030:	f008 ff6b 	bl	800bf0a <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 8003034:	f995 3004 	ldrsb.w	r3, [r5, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	7c33      	ldrb	r3, [r6, #16]
 800303c:	da17      	bge.n	800306e <USBD_MSC_Setup+0xc6>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800303e:	b9a3      	cbnz	r3, 800306a <USBD_MSC_Setup+0xc2>
          USBD_LL_OpenEP(pdev,
 8003040:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8003044:	2202      	movs	r2, #2
 8003046:	2181      	movs	r1, #129	; 0x81
          USBD_LL_OpenEP(pdev,
 8003048:	4630      	mov	r0, r6
 800304a:	f008 ff54 	bl	800bef6 <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800304e:	7929      	ldrb	r1, [r5, #4]
 8003050:	4630      	mov	r0, r6
 8003052:	f000 f931 	bl	80032b8 <MSC_BOT_CplClrFeature>
  return 0;
 8003056:	2400      	movs	r4, #0
 8003058:	e7db      	b.n	8003012 <USBD_MSC_Setup+0x6a>
      USBD_CtlSendData (pdev,
 800305a:	2201      	movs	r2, #1
 800305c:	f108 0104 	add.w	r1, r8, #4
 8003060:	e7c7      	b.n	8002ff2 <USBD_MSC_Setup+0x4a>
      hmsc->interface = (uint8_t)(req->wValue);
 8003062:	788b      	ldrb	r3, [r1, #2]
 8003064:	f8c8 3004 	str.w	r3, [r8, #4]
      break;
 8003068:	e7d3      	b.n	8003012 <USBD_MSC_Setup+0x6a>
          USBD_LL_OpenEP(pdev,
 800306a:	2340      	movs	r3, #64	; 0x40
 800306c:	e7ea      	b.n	8003044 <USBD_MSC_Setup+0x9c>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800306e:	b923      	cbnz	r3, 800307a <USBD_MSC_Setup+0xd2>
          USBD_LL_OpenEP(pdev,
 8003070:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8003074:	2202      	movs	r2, #2
 8003076:	4639      	mov	r1, r7
 8003078:	e7e6      	b.n	8003048 <USBD_MSC_Setup+0xa0>
 800307a:	2340      	movs	r3, #64	; 0x40
 800307c:	e7fa      	b.n	8003074 <USBD_MSC_Setup+0xcc>

0800307e <USBD_MSC_DataIn>:
{
 800307e:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8003080:	f000 f882 	bl	8003188 <MSC_BOT_DataIn>
}
 8003084:	2000      	movs	r0, #0
 8003086:	bd08      	pop	{r3, pc}

08003088 <USBD_MSC_DataOut>:
{
 8003088:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 800308a:	f000 f89b 	bl	80031c4 <MSC_BOT_DataOut>
}
 800308e:	2000      	movs	r0, #0
 8003090:	bd08      	pop	{r3, pc}

08003092 <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8003092:	b109      	cbz	r1, 8003098 <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData= fops;
 8003094:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
  }
  return 0;
}
 8003098:	2000      	movs	r0, #0
 800309a:	4770      	bx	lr

0800309c <MSC_BOT_Abort>:
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	f242 0318 	movw	r3, #8216	; 0x2018
 80030a2:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
 80030a6:	5ce3      	ldrb	r3, [r4, r3]
 80030a8:	4605      	mov	r5, r0
 80030aa:	b943      	cbnz	r3, 80030be <MSC_BOT_Abort+0x22>
 80030ac:	f242 0314 	movw	r3, #8212	; 0x2014
 80030b0:	58e3      	ldr	r3, [r4, r3]
 80030b2:	b123      	cbz	r3, 80030be <MSC_BOT_Abort+0x22>
 80030b4:	7a63      	ldrb	r3, [r4, #9]
 80030b6:	b913      	cbnz	r3, 80030be <MSC_BOT_Abort+0x22>
 80030b8:	2101      	movs	r1, #1
 80030ba:	f008 ff34 	bl	800bf26 <USBD_LL_StallEP>
 80030be:	2181      	movs	r1, #129	; 0x81
 80030c0:	4628      	mov	r0, r5
 80030c2:	f008 ff30 	bl	800bf26 <USBD_LL_StallEP>
 80030c6:	7a63      	ldrb	r3, [r4, #9]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d109      	bne.n	80030e0 <MSC_BOT_Abort+0x44>
 80030cc:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 80030d0:	4628      	mov	r0, r5
 80030d2:	231f      	movs	r3, #31
 80030d4:	320c      	adds	r2, #12
 80030d6:	2101      	movs	r1, #1
 80030d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80030dc:	f008 bf52 	b.w	800bf84 <USBD_LL_PrepareReceive>
 80030e0:	bd70      	pop	{r4, r5, r6, pc}

080030e2 <MSC_BOT_Init>:
 80030e2:	b570      	push	{r4, r5, r6, lr}
 80030e4:	f242 035d 	movw	r3, #8285	; 0x205d
 80030e8:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
 80030ec:	4604      	mov	r4, r0
 80030ee:	2000      	movs	r0, #0
 80030f0:	7228      	strb	r0, [r5, #8]
 80030f2:	7268      	strb	r0, [r5, #9]
 80030f4:	54e8      	strb	r0, [r5, r3]
 80030f6:	f242 035c 	movw	r3, #8284	; 0x205c
 80030fa:	54e8      	strb	r0, [r5, r3]
 80030fc:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4798      	blx	r3
 8003104:	2101      	movs	r1, #1
 8003106:	4620      	mov	r0, r4
 8003108:	f008 ff06 	bl	800bf18 <USBD_LL_FlushEP>
 800310c:	2181      	movs	r1, #129	; 0x81
 800310e:	4620      	mov	r0, r4
 8003110:	f008 ff02 	bl	800bf18 <USBD_LL_FlushEP>
 8003114:	f505 5200 	add.w	r2, r5, #8192	; 0x2000
 8003118:	4620      	mov	r0, r4
 800311a:	231f      	movs	r3, #31
 800311c:	320c      	adds	r2, #12
 800311e:	2101      	movs	r1, #1
 8003120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003124:	f008 bf2e 	b.w	800bf84 <USBD_LL_PrepareReceive>

08003128 <MSC_BOT_Reset>:
 8003128:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
 800312c:	2300      	movs	r3, #0
 800312e:	2101      	movs	r1, #1
 8003130:	7213      	strb	r3, [r2, #8]
 8003132:	7251      	strb	r1, [r2, #9]
 8003134:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003138:	231f      	movs	r3, #31
 800313a:	320c      	adds	r2, #12
 800313c:	f008 bf22 	b.w	800bf84 <USBD_LL_PrepareReceive>

08003140 <MSC_BOT_DeInit>:
 8003140:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8003144:	2200      	movs	r2, #0
 8003146:	721a      	strb	r2, [r3, #8]
 8003148:	4770      	bx	lr
	...

0800314c <MSC_BOT_SendCSW>:
 800314c:	b570      	push	{r4, r5, r6, lr}
 800314e:	f242 022c 	movw	r2, #8236	; 0x202c
 8003152:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
 8003156:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <MSC_BOT_SendCSW+0x38>)
 8003158:	50a3      	str	r3, [r4, r2]
 800315a:	f242 0338 	movw	r3, #8248	; 0x2038
 800315e:	4422      	add	r2, r4
 8003160:	54e1      	strb	r1, [r4, r3]
 8003162:	2300      	movs	r3, #0
 8003164:	7223      	strb	r3, [r4, #8]
 8003166:	2181      	movs	r1, #129	; 0x81
 8003168:	230d      	movs	r3, #13
 800316a:	4605      	mov	r5, r0
 800316c:	f008 ff03 	bl	800bf76 <USBD_LL_Transmit>
 8003170:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8003174:	4628      	mov	r0, r5
 8003176:	231f      	movs	r3, #31
 8003178:	320c      	adds	r2, #12
 800317a:	2101      	movs	r1, #1
 800317c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003180:	f008 bf00 	b.w	800bf84 <USBD_LL_PrepareReceive>
 8003184:	53425355 	.word	0x53425355

08003188 <MSC_BOT_DataIn>:
 8003188:	b510      	push	{r4, lr}
 800318a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 800318e:	7a1a      	ldrb	r2, [r3, #8]
 8003190:	2a02      	cmp	r2, #2
 8003192:	4604      	mov	r4, r0
 8003194:	d003      	beq.n	800319e <MSC_BOT_DataIn+0x16>
 8003196:	d314      	bcc.n	80031c2 <MSC_BOT_DataIn+0x3a>
 8003198:	2a04      	cmp	r2, #4
 800319a:	d910      	bls.n	80031be <MSC_BOT_DataIn+0x36>
 800319c:	bd10      	pop	{r4, pc}
 800319e:	f242 0119 	movw	r1, #8217	; 0x2019
 80031a2:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 80031a6:	321b      	adds	r2, #27
 80031a8:	5c59      	ldrb	r1, [r3, r1]
 80031aa:	f000 f8b3 	bl	8003314 <SCSI_ProcessCmd>
 80031ae:	2800      	cmp	r0, #0
 80031b0:	da07      	bge.n	80031c2 <MSC_BOT_DataIn+0x3a>
 80031b2:	2101      	movs	r1, #1
 80031b4:	4620      	mov	r0, r4
 80031b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031ba:	f7ff bfc7 	b.w	800314c <MSC_BOT_SendCSW>
 80031be:	2100      	movs	r1, #0
 80031c0:	e7f9      	b.n	80031b6 <MSC_BOT_DataIn+0x2e>
 80031c2:	bd10      	pop	{r4, pc}

080031c4 <MSC_BOT_DataOut>:
 80031c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031c8:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
 80031cc:	7a26      	ldrb	r6, [r4, #8]
 80031ce:	4605      	mov	r5, r0
 80031d0:	b11e      	cbz	r6, 80031da <MSC_BOT_DataOut+0x16>
 80031d2:	2e01      	cmp	r6, #1
 80031d4:	d062      	beq.n	800329c <MSC_BOT_DataOut+0xd8>
 80031d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031da:	f242 0310 	movw	r3, #8208	; 0x2010
 80031de:	f242 0814 	movw	r8, #8212	; 0x2014
 80031e2:	58e2      	ldr	r2, [r4, r3]
 80031e4:	f242 0330 	movw	r3, #8240	; 0x2030
 80031e8:	f242 0734 	movw	r7, #8244	; 0x2034
 80031ec:	50e2      	str	r2, [r4, r3]
 80031ee:	f854 3008 	ldr.w	r3, [r4, r8]
 80031f2:	51e3      	str	r3, [r4, r7]
 80031f4:	2101      	movs	r1, #1
 80031f6:	f008 fecc 	bl	800bf92 <USBD_LL_GetRxDataSize>
 80031fa:	281f      	cmp	r0, #31
 80031fc:	d110      	bne.n	8003220 <MSC_BOT_DataOut+0x5c>
 80031fe:	f242 030c 	movw	r3, #8204	; 0x200c
 8003202:	58e2      	ldr	r2, [r4, r3]
 8003204:	4b2b      	ldr	r3, [pc, #172]	; (80032b4 <MSC_BOT_DataOut+0xf0>)
 8003206:	429a      	cmp	r2, r3
 8003208:	d10a      	bne.n	8003220 <MSC_BOT_DataOut+0x5c>
 800320a:	f242 0319 	movw	r3, #8217	; 0x2019
 800320e:	5ce1      	ldrb	r1, [r4, r3]
 8003210:	2901      	cmp	r1, #1
 8003212:	d805      	bhi.n	8003220 <MSC_BOT_DataOut+0x5c>
 8003214:	f242 031a 	movw	r3, #8218	; 0x201a
 8003218:	5ce3      	ldrb	r3, [r4, r3]
 800321a:	3b01      	subs	r3, #1
 800321c:	2b0f      	cmp	r3, #15
 800321e:	d90e      	bls.n	800323e <MSC_BOT_DataOut+0x7a>
 8003220:	f242 0119 	movw	r1, #8217	; 0x2019
 8003224:	2320      	movs	r3, #32
 8003226:	2205      	movs	r2, #5
 8003228:	5c61      	ldrb	r1, [r4, r1]
 800322a:	4628      	mov	r0, r5
 800322c:	f000 fac2 	bl	80037b4 <SCSI_SenseCode>
 8003230:	2302      	movs	r3, #2
 8003232:	7263      	strb	r3, [r4, #9]
 8003234:	4628      	mov	r0, r5
 8003236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800323a:	f7ff bf2f 	b.w	800309c <MSC_BOT_Abort>
 800323e:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8003242:	321b      	adds	r2, #27
 8003244:	4628      	mov	r0, r5
 8003246:	f000 f865 	bl	8003314 <SCSI_ProcessCmd>
 800324a:	2800      	cmp	r0, #0
 800324c:	7a23      	ldrb	r3, [r4, #8]
 800324e:	da07      	bge.n	8003260 <MSC_BOT_DataOut+0x9c>
 8003250:	2b05      	cmp	r3, #5
 8003252:	d1ef      	bne.n	8003234 <MSC_BOT_DataOut+0x70>
 8003254:	2101      	movs	r1, #1
 8003256:	4628      	mov	r0, r5
 8003258:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800325c:	f7ff bf76 	b.w	800314c <MSC_BOT_SendCSW>
 8003260:	3b01      	subs	r3, #1
 8003262:	2b02      	cmp	r3, #2
 8003264:	d924      	bls.n	80032b0 <MSC_BOT_DataOut+0xec>
 8003266:	8961      	ldrh	r1, [r4, #10]
 8003268:	2900      	cmp	r1, #0
 800326a:	d0f4      	beq.n	8003256 <MSC_BOT_DataOut+0x92>
 800326c:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 8003270:	f852 3008 	ldr.w	r3, [r2, r8]
 8003274:	4299      	cmp	r1, r3
 8003276:	bf28      	it	cs
 8003278:	4619      	movcs	r1, r3
 800327a:	59d3      	ldr	r3, [r2, r7]
 800327c:	1a5b      	subs	r3, r3, r1
 800327e:	51d3      	str	r3, [r2, r7]
 8003280:	f242 0338 	movw	r3, #8248	; 0x2038
 8003284:	4628      	mov	r0, r5
 8003286:	54d6      	strb	r6, [r2, r3]
 8003288:	2304      	movs	r3, #4
 800328a:	7213      	strb	r3, [r2, #8]
 800328c:	b28b      	uxth	r3, r1
 800328e:	f104 020c 	add.w	r2, r4, #12
 8003292:	2181      	movs	r1, #129	; 0x81
 8003294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003298:	f008 be6d 	b.w	800bf76 <USBD_LL_Transmit>
 800329c:	f242 0319 	movw	r3, #8217	; 0x2019
 80032a0:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 80032a4:	321b      	adds	r2, #27
 80032a6:	5ce1      	ldrb	r1, [r4, r3]
 80032a8:	f000 f834 	bl	8003314 <SCSI_ProcessCmd>
 80032ac:	2800      	cmp	r0, #0
 80032ae:	dbd1      	blt.n	8003254 <MSC_BOT_DataOut+0x90>
 80032b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032b4:	43425355 	.word	0x43425355

080032b8 <MSC_BOT_CplClrFeature>:
 80032b8:	b510      	push	{r4, lr}
 80032ba:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
 80032be:	7a63      	ldrb	r3, [r4, #9]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d105      	bne.n	80032d0 <MSC_BOT_CplClrFeature+0x18>
 80032c4:	2181      	movs	r1, #129	; 0x81
 80032c6:	f008 fe2e 	bl	800bf26 <USBD_LL_StallEP>
 80032ca:	2300      	movs	r3, #0
 80032cc:	7263      	strb	r3, [r4, #9]
 80032ce:	bd10      	pop	{r4, pc}
 80032d0:	060a      	lsls	r2, r1, #24
 80032d2:	d506      	bpl.n	80032e2 <MSC_BOT_CplClrFeature+0x2a>
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d004      	beq.n	80032e2 <MSC_BOT_CplClrFeature+0x2a>
 80032d8:	2101      	movs	r1, #1
 80032da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032de:	f7ff bf35 	b.w	800314c <MSC_BOT_SendCSW>
 80032e2:	bd10      	pop	{r4, pc}

080032e4 <SCSI_SenseCode.constprop.8>:
 80032e4:	b570      	push	{r4, r5, r6, lr}
 80032e6:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
 80032ea:	f242 055d 	movw	r5, #8285	; 0x205d
 80032ee:	f242 063c 	movw	r6, #8252	; 0x203c
 80032f2:	5d43      	ldrb	r3, [r0, r5]
 80032f4:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
 80032f8:	3301      	adds	r3, #1
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	55a1      	strb	r1, [r4, r6]
 80032fe:	2b04      	cmp	r3, #4
 8003300:	f504 5401 	add.w	r4, r4, #8256	; 0x2040
 8003304:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003308:	bf08      	it	eq
 800330a:	2300      	moveq	r3, #0
 800330c:	6022      	str	r2, [r4, #0]
 800330e:	5543      	strb	r3, [r0, r5]
 8003310:	bd70      	pop	{r4, r5, r6, pc}
	...

08003314 <SCSI_ProcessCmd>:
 8003314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003318:	7813      	ldrb	r3, [r2, #0]
 800331a:	2b1e      	cmp	r3, #30
 800331c:	4605      	mov	r5, r0
 800331e:	460c      	mov	r4, r1
 8003320:	4617      	mov	r7, r2
 8003322:	d00f      	beq.n	8003344 <SCSI_ProcessCmd+0x30>
 8003324:	d813      	bhi.n	800334e <SCSI_ProcessCmd+0x3a>
 8003326:	2b12      	cmp	r3, #18
 8003328:	f000 80b4 	beq.w	8003494 <SCSI_ProcessCmd+0x180>
 800332c:	d805      	bhi.n	800333a <SCSI_ProcessCmd+0x26>
 800332e:	2b00      	cmp	r3, #0
 8003330:	d060      	beq.n	80033f4 <SCSI_ProcessCmd+0xe0>
 8003332:	2b03      	cmp	r3, #3
 8003334:	d07b      	beq.n	800342e <SCSI_ProcessCmd+0x11a>
 8003336:	2220      	movs	r2, #32
 8003338:	e14a      	b.n	80035d0 <SCSI_ProcessCmd+0x2bc>
 800333a:	2b1a      	cmp	r3, #26
 800333c:	f000 80c8 	beq.w	80034d0 <SCSI_ProcessCmd+0x1bc>
 8003340:	2b1b      	cmp	r3, #27
 8003342:	d1f8      	bne.n	8003336 <SCSI_ProcessCmd+0x22>
 8003344:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8003348:	2400      	movs	r4, #0
 800334a:	815c      	strh	r4, [r3, #10]
 800334c:	e06b      	b.n	8003426 <SCSI_ProcessCmd+0x112>
 800334e:	2b28      	cmp	r3, #40	; 0x28
 8003350:	f000 810b 	beq.w	800356a <SCSI_ProcessCmd+0x256>
 8003354:	d828      	bhi.n	80033a8 <SCSI_ProcessCmd+0x94>
 8003356:	2b23      	cmp	r3, #35	; 0x23
 8003358:	f000 80d8 	beq.w	800350c <SCSI_ProcessCmd+0x1f8>
 800335c:	2b25      	cmp	r3, #37	; 0x25
 800335e:	d1ea      	bne.n	8003336 <SCSI_ProcessCmd+0x22>
 8003360:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
 8003364:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8003368:	f242 075e 	movw	r7, #8286	; 0x205e
 800336c:	f242 0860 	movw	r8, #8288	; 0x2060
 8003370:	4620      	mov	r0, r4
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	19f2      	adds	r2, r6, r7
 8003376:	eb06 0108 	add.w	r1, r6, r8
 800337a:	4798      	blx	r3
 800337c:	4604      	mov	r4, r0
 800337e:	2800      	cmp	r0, #0
 8003380:	f040 80d9 	bne.w	8003536 <SCSI_ProcessCmd+0x222>
 8003384:	f856 3008 	ldr.w	r3, [r6, r8]
 8003388:	3b01      	subs	r3, #1
 800338a:	0e1a      	lsrs	r2, r3, #24
 800338c:	7332      	strb	r2, [r6, #12]
 800338e:	0c1a      	lsrs	r2, r3, #16
 8003390:	7372      	strb	r2, [r6, #13]
 8003392:	0a1a      	lsrs	r2, r3, #8
 8003394:	73b2      	strb	r2, [r6, #14]
 8003396:	73f3      	strb	r3, [r6, #15]
 8003398:	5bf3      	ldrh	r3, [r6, r7]
 800339a:	74f3      	strb	r3, [r6, #19]
 800339c:	0a1a      	lsrs	r2, r3, #8
 800339e:	7430      	strb	r0, [r6, #16]
 80033a0:	7470      	strb	r0, [r6, #17]
 80033a2:	74b2      	strb	r2, [r6, #18]
 80033a4:	2308      	movs	r3, #8
 80033a6:	e0de      	b.n	8003566 <SCSI_ProcessCmd+0x252>
 80033a8:	2b2f      	cmp	r3, #47	; 0x2f
 80033aa:	f000 81ac 	beq.w	8003706 <SCSI_ProcessCmd+0x3f2>
 80033ae:	2b5a      	cmp	r3, #90	; 0x5a
 80033b0:	f000 809d 	beq.w	80034ee <SCSI_ProcessCmd+0x1da>
 80033b4:	2b2a      	cmp	r3, #42	; 0x2a
 80033b6:	d1be      	bne.n	8003336 <SCSI_ProcessCmd+0x22>
 80033b8:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
 80033bc:	7a33      	ldrb	r3, [r6, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f040 815e 	bne.w	8003680 <SCSI_ProcessCmd+0x36c>
 80033c4:	f242 0318 	movw	r3, #8216	; 0x2018
 80033c8:	56f3      	ldrsb	r3, [r6, r3]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	dbb3      	blt.n	8003336 <SCSI_ProcessCmd+0x22>
 80033ce:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80033d2:	4608      	mov	r0, r1
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	4798      	blx	r3
 80033d8:	2800      	cmp	r0, #0
 80033da:	f040 80ac 	bne.w	8003536 <SCSI_ProcessCmd+0x222>
 80033de:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80033e2:	4620      	mov	r0, r4
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	4798      	blx	r3
 80033e8:	4604      	mov	r4, r0
 80033ea:	2800      	cmp	r0, #0
 80033ec:	f000 810d 	beq.w	800360a <SCSI_ProcessCmd+0x2f6>
 80033f0:	2227      	movs	r2, #39	; 0x27
 80033f2:	e0a1      	b.n	8003538 <SCSI_ProcessCmd+0x224>
 80033f4:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
 80033f8:	f242 0314 	movw	r3, #8212	; 0x2014
 80033fc:	58f3      	ldr	r3, [r6, r3]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d199      	bne.n	8003336 <SCSI_ProcessCmd+0x22>
 8003402:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8003406:	4608      	mov	r0, r1
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	4798      	blx	r3
 800340c:	4604      	mov	r4, r0
 800340e:	b148      	cbz	r0, 8003424 <SCSI_ProcessCmd+0x110>
 8003410:	223a      	movs	r2, #58	; 0x3a
 8003412:	2102      	movs	r1, #2
 8003414:	4628      	mov	r0, r5
 8003416:	f7ff ff65 	bl	80032e4 <SCSI_SenseCode.constprop.8>
 800341a:	2305      	movs	r3, #5
 800341c:	7233      	strb	r3, [r6, #8]
 800341e:	f04f 34ff 	mov.w	r4, #4294967295
 8003422:	e000      	b.n	8003426 <SCSI_ProcessCmd+0x112>
 8003424:	8170      	strh	r0, [r6, #10]
 8003426:	4620      	mov	r0, r4
 8003428:	b003      	add	sp, #12
 800342a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800342e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8003432:	2400      	movs	r4, #0
 8003434:	f103 020c 	add.w	r2, r3, #12
 8003438:	f103 011e 	add.w	r1, r3, #30
 800343c:	f802 4b01 	strb.w	r4, [r2], #1
 8003440:	428a      	cmp	r2, r1
 8003442:	d1fb      	bne.n	800343c <SCSI_ProcessCmd+0x128>
 8003444:	2270      	movs	r2, #112	; 0x70
 8003446:	731a      	strb	r2, [r3, #12]
 8003448:	f242 005c 	movw	r0, #8284	; 0x205c
 800344c:	220c      	movs	r2, #12
 800344e:	f242 015d 	movw	r1, #8285	; 0x205d
 8003452:	74da      	strb	r2, [r3, #19]
 8003454:	5c1a      	ldrb	r2, [r3, r0]
 8003456:	5c59      	ldrb	r1, [r3, r1]
 8003458:	4291      	cmp	r1, r2
 800345a:	d013      	beq.n	8003484 <SCSI_ProcessCmd+0x170>
 800345c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8003460:	f242 053c 	movw	r5, #8252	; 0x203c
 8003464:	3201      	adds	r2, #1
 8003466:	5d4d      	ldrb	r5, [r1, r5]
 8003468:	739d      	strb	r5, [r3, #14]
 800346a:	f242 0541 	movw	r5, #8257	; 0x2041
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	5d4d      	ldrb	r5, [r1, r5]
 8003472:	761d      	strb	r5, [r3, #24]
 8003474:	f501 5101 	add.w	r1, r1, #8256	; 0x2040
 8003478:	2a04      	cmp	r2, #4
 800347a:	7809      	ldrb	r1, [r1, #0]
 800347c:	7659      	strb	r1, [r3, #25]
 800347e:	bf14      	ite	ne
 8003480:	541a      	strbne	r2, [r3, r0]
 8003482:	541c      	strbeq	r4, [r3, r0]
 8003484:	2212      	movs	r2, #18
 8003486:	815a      	strh	r2, [r3, #10]
 8003488:	793a      	ldrb	r2, [r7, #4]
 800348a:	2a12      	cmp	r2, #18
 800348c:	bf98      	it	ls
 800348e:	815a      	strhls	r2, [r3, #10]
 8003490:	2400      	movs	r4, #0
 8003492:	e7c8      	b.n	8003426 <SCSI_ProcessCmd+0x112>
 8003494:	787b      	ldrb	r3, [r7, #1]
 8003496:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
 800349a:	07db      	lsls	r3, r3, #31
 800349c:	d415      	bmi.n	80034ca <SCSI_ProcessCmd+0x1b6>
 800349e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
 80034a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80034ac:	7939      	ldrb	r1, [r7, #4]
 80034ae:	7923      	ldrb	r3, [r4, #4]
 80034b0:	3305      	adds	r3, #5
 80034b2:	428b      	cmp	r3, r1
 80034b4:	bf28      	it	cs
 80034b6:	460b      	movcs	r3, r1
 80034b8:	8153      	strh	r3, [r2, #10]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0e8      	beq.n	8003490 <SCSI_ProcessCmd+0x17c>
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	18d1      	adds	r1, r2, r3
 80034c4:	5ce0      	ldrb	r0, [r4, r3]
 80034c6:	7308      	strb	r0, [r1, #12]
 80034c8:	e7f7      	b.n	80034ba <SCSI_ProcessCmd+0x1a6>
 80034ca:	2307      	movs	r3, #7
 80034cc:	4cb6      	ldr	r4, [pc, #728]	; (80037a8 <SCSI_ProcessCmd+0x494>)
 80034ce:	e7f3      	b.n	80034b8 <SCSI_ProcessCmd+0x1a4>
 80034d0:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 80034d4:	49b5      	ldr	r1, [pc, #724]	; (80037ac <SCSI_ProcessCmd+0x498>)
 80034d6:	2208      	movs	r2, #8
 80034d8:	815a      	strh	r2, [r3, #10]
 80034da:	f103 0213 	add.w	r2, r3, #19
 80034de:	330b      	adds	r3, #11
 80034e0:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 80034e4:	f802 0901 	strb.w	r0, [r2], #-1
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d1f9      	bne.n	80034e0 <SCSI_ProcessCmd+0x1cc>
 80034ec:	e7d0      	b.n	8003490 <SCSI_ProcessCmd+0x17c>
 80034ee:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 80034f2:	49af      	ldr	r1, [pc, #700]	; (80037b0 <SCSI_ProcessCmd+0x49c>)
 80034f4:	2208      	movs	r2, #8
 80034f6:	815a      	strh	r2, [r3, #10]
 80034f8:	f103 0213 	add.w	r2, r3, #19
 80034fc:	330b      	adds	r3, #11
 80034fe:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8003502:	f802 0901 	strb.w	r0, [r2], #-1
 8003506:	429a      	cmp	r2, r3
 8003508:	d1f9      	bne.n	80034fe <SCSI_ProcessCmd+0x1ea>
 800350a:	e7c1      	b.n	8003490 <SCSI_ProcessCmd+0x17c>
 800350c:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
 8003510:	2100      	movs	r1, #0
 8003512:	f106 030c 	add.w	r3, r6, #12
 8003516:	f106 0218 	add.w	r2, r6, #24
 800351a:	f803 1b01 	strb.w	r1, [r3], #1
 800351e:	429a      	cmp	r2, r3
 8003520:	d1fb      	bne.n	800351a <SCSI_ProcessCmd+0x206>
 8003522:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8003526:	4620      	mov	r0, r4
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f10d 0202 	add.w	r2, sp, #2
 800352e:	a901      	add	r1, sp, #4
 8003530:	4798      	blx	r3
 8003532:	4604      	mov	r4, r0
 8003534:	b118      	cbz	r0, 800353e <SCSI_ProcessCmd+0x22a>
 8003536:	223a      	movs	r2, #58	; 0x3a
 8003538:	2102      	movs	r1, #2
 800353a:	4628      	mov	r0, r5
 800353c:	e0eb      	b.n	8003716 <SCSI_ProcessCmd+0x402>
 800353e:	2308      	movs	r3, #8
 8003540:	73f3      	strb	r3, [r6, #15]
 8003542:	9b01      	ldr	r3, [sp, #4]
 8003544:	7570      	strb	r0, [r6, #21]
 8003546:	3b01      	subs	r3, #1
 8003548:	0e1a      	lsrs	r2, r3, #24
 800354a:	7432      	strb	r2, [r6, #16]
 800354c:	0c1a      	lsrs	r2, r3, #16
 800354e:	7472      	strb	r2, [r6, #17]
 8003550:	74f3      	strb	r3, [r6, #19]
 8003552:	0a1a      	lsrs	r2, r3, #8
 8003554:	2302      	movs	r3, #2
 8003556:	7533      	strb	r3, [r6, #20]
 8003558:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800355c:	74b2      	strb	r2, [r6, #18]
 800355e:	0a1a      	lsrs	r2, r3, #8
 8003560:	75f3      	strb	r3, [r6, #23]
 8003562:	75b2      	strb	r2, [r6, #22]
 8003564:	230c      	movs	r3, #12
 8003566:	8173      	strh	r3, [r6, #10]
 8003568:	e75d      	b.n	8003426 <SCSI_ProcessCmd+0x112>
 800356a:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
 800356e:	7a33      	ldrb	r3, [r6, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	f040 80f1 	bne.w	8003758 <SCSI_ProcessCmd+0x444>
 8003576:	f242 0318 	movw	r3, #8216	; 0x2018
 800357a:	56f3      	ldrsb	r3, [r6, r3]
 800357c:	2b00      	cmp	r3, #0
 800357e:	f6bf aeda 	bge.w	8003336 <SCSI_ProcessCmd+0x22>
 8003582:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8003586:	4608      	mov	r0, r1
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	4798      	blx	r3
 800358c:	2800      	cmp	r0, #0
 800358e:	d1d2      	bne.n	8003536 <SCSI_ProcessCmd+0x222>
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	78ba      	ldrb	r2, [r7, #2]
 8003594:	041b      	lsls	r3, r3, #16
 8003596:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800359a:	797a      	ldrb	r2, [r7, #5]
 800359c:	4313      	orrs	r3, r2
 800359e:	793a      	ldrb	r2, [r7, #4]
 80035a0:	f242 0e64 	movw	lr, #8292	; 0x2064
 80035a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80035a8:	f846 300e 	str.w	r3, [r6, lr]
 80035ac:	79fa      	ldrb	r2, [r7, #7]
 80035ae:	7a39      	ldrb	r1, [r7, #8]
 80035b0:	f242 0c60 	movw	ip, #8288	; 0x2060
 80035b4:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80035b8:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 80035bc:	f852 200c 	ldr.w	r2, [r2, ip]
 80035c0:	f242 0068 	movw	r0, #8296	; 0x2068
 80035c4:	185f      	adds	r7, r3, r1
 80035c6:	4297      	cmp	r7, r2
 80035c8:	5031      	str	r1, [r6, r0]
 80035ca:	f240 80b5 	bls.w	8003738 <SCSI_ProcessCmd+0x424>
 80035ce:	2221      	movs	r2, #33	; 0x21
 80035d0:	2105      	movs	r1, #5
 80035d2:	e7b2      	b.n	800353a <SCSI_ProcessCmd+0x226>
 80035d4:	b2bb      	uxth	r3, r7
 80035d6:	4652      	mov	r2, sl
 80035d8:	2181      	movs	r1, #129	; 0x81
 80035da:	4628      	mov	r0, r5
 80035dc:	f008 fccb 	bl	800bf76 <USBD_LL_Transmit>
 80035e0:	f856 3009 	ldr.w	r3, [r6, r9]
 80035e4:	f856 4008 	ldr.w	r4, [r6, r8]
 80035e8:	f242 0234 	movw	r2, #8244	; 0x2034
 80035ec:	443b      	add	r3, r7
 80035ee:	f846 3009 	str.w	r3, [r6, r9]
 80035f2:	58b3      	ldr	r3, [r6, r2]
 80035f4:	1be4      	subs	r4, r4, r7
 80035f6:	1bdf      	subs	r7, r3, r7
 80035f8:	f846 4008 	str.w	r4, [r6, r8]
 80035fc:	50b7      	str	r7, [r6, r2]
 80035fe:	2c00      	cmp	r4, #0
 8003600:	f47f af46 	bne.w	8003490 <SCSI_ProcessCmd+0x17c>
 8003604:	2303      	movs	r3, #3
 8003606:	7233      	strb	r3, [r6, #8]
 8003608:	e70d      	b.n	8003426 <SCSI_ProcessCmd+0x112>
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	78bb      	ldrb	r3, [r7, #2]
 800360e:	0412      	lsls	r2, r2, #16
 8003610:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8003614:	797b      	ldrb	r3, [r7, #5]
 8003616:	431a      	orrs	r2, r3
 8003618:	793b      	ldrb	r3, [r7, #4]
 800361a:	f242 0e64 	movw	lr, #8292	; 0x2064
 800361e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003622:	f846 200e 	str.w	r2, [r6, lr]
 8003626:	7a3b      	ldrb	r3, [r7, #8]
 8003628:	79f9      	ldrb	r1, [r7, #7]
 800362a:	f242 0c60 	movw	ip, #8288	; 0x2060
 800362e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003632:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8003636:	f853 300c 	ldr.w	r3, [r3, ip]
 800363a:	f242 0068 	movw	r0, #8296	; 0x2068
 800363e:	1857      	adds	r7, r2, r1
 8003640:	429f      	cmp	r7, r3
 8003642:	5031      	str	r1, [r6, r0]
 8003644:	d8c3      	bhi.n	80035ce <SCSI_ProcessCmd+0x2ba>
 8003646:	f242 035e 	movw	r3, #8286	; 0x205e
 800364a:	5af3      	ldrh	r3, [r6, r3]
 800364c:	435a      	muls	r2, r3
 800364e:	f846 200e 	str.w	r2, [r6, lr]
 8003652:	f242 0214 	movw	r2, #8212	; 0x2014
 8003656:	434b      	muls	r3, r1
 8003658:	58b2      	ldr	r2, [r6, r2]
 800365a:	5033      	str	r3, [r6, r0]
 800365c:	4293      	cmp	r3, r2
 800365e:	f47f ae6a 	bne.w	8003336 <SCSI_ProcessCmd+0x22>
 8003662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003666:	f04f 0101 	mov.w	r1, #1
 800366a:	bf28      	it	cs
 800366c:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
 8003670:	7231      	strb	r1, [r6, #8]
 8003672:	b29b      	uxth	r3, r3
 8003674:	f106 020c 	add.w	r2, r6, #12
 8003678:	4628      	mov	r0, r5
 800367a:	f008 fc83 	bl	800bf84 <USBD_LL_PrepareReceive>
 800367e:	e6d2      	b.n	8003426 <SCSI_ProcessCmd+0x112>
 8003680:	f242 0968 	movw	r9, #8296	; 0x2068
 8003684:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8003688:	f856 7009 	ldr.w	r7, [r6, r9]
 800368c:	f8d0 b014 	ldr.w	fp, [r0, #20]
 8003690:	f242 035e 	movw	r3, #8286	; 0x205e
 8003694:	f242 0a64 	movw	sl, #8292	; 0x2064
 8003698:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
 800369c:	f106 080c 	add.w	r8, r6, #12
 80036a0:	bf28      	it	cs
 80036a2:	f44f 5700 	movcs.w	r7, #8192	; 0x2000
 80036a6:	5af2      	ldrh	r2, [r6, r3]
 80036a8:	f856 100a 	ldr.w	r1, [r6, sl]
 80036ac:	fbb7 f3f2 	udiv	r3, r7, r2
 80036b0:	4620      	mov	r0, r4
 80036b2:	fbb1 f2f2 	udiv	r2, r1, r2
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	4641      	mov	r1, r8
 80036ba:	47d8      	blx	fp
 80036bc:	2800      	cmp	r0, #0
 80036be:	da01      	bge.n	80036c4 <SCSI_ProcessCmd+0x3b0>
 80036c0:	2203      	movs	r2, #3
 80036c2:	e06e      	b.n	80037a2 <SCSI_ProcessCmd+0x48e>
 80036c4:	f856 300a 	ldr.w	r3, [r6, sl]
 80036c8:	f242 0134 	movw	r1, #8244	; 0x2034
 80036cc:	443b      	add	r3, r7
 80036ce:	f846 300a 	str.w	r3, [r6, sl]
 80036d2:	5872      	ldr	r2, [r6, r1]
 80036d4:	f856 3009 	ldr.w	r3, [r6, r9]
 80036d8:	1bdb      	subs	r3, r3, r7
 80036da:	1bd7      	subs	r7, r2, r7
 80036dc:	f846 3009 	str.w	r3, [r6, r9]
 80036e0:	5077      	str	r7, [r6, r1]
 80036e2:	b923      	cbnz	r3, 80036ee <SCSI_ProcessCmd+0x3da>
 80036e4:	2100      	movs	r1, #0
 80036e6:	4628      	mov	r0, r5
 80036e8:	f7ff fd30 	bl	800314c <MSC_BOT_SendCSW>
 80036ec:	e6d0      	b.n	8003490 <SCSI_ProcessCmd+0x17c>
 80036ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f2:	bf28      	it	cs
 80036f4:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	4642      	mov	r2, r8
 80036fc:	2101      	movs	r1, #1
 80036fe:	4628      	mov	r0, r5
 8003700:	f008 fc40 	bl	800bf84 <USBD_LL_PrepareReceive>
 8003704:	e6c4      	b.n	8003490 <SCSI_ProcessCmd+0x17c>
 8003706:	7854      	ldrb	r4, [r2, #1]
 8003708:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 800370c:	f014 0402 	ands.w	r4, r4, #2
 8003710:	d004      	beq.n	800371c <SCSI_ProcessCmd+0x408>
 8003712:	2224      	movs	r2, #36	; 0x24
 8003714:	2105      	movs	r1, #5
 8003716:	f7ff fde5 	bl	80032e4 <SCSI_SenseCode.constprop.8>
 800371a:	e680      	b.n	800341e <SCSI_ProcessCmd+0x10a>
 800371c:	f242 0268 	movw	r2, #8296	; 0x2068
 8003720:	f242 0164 	movw	r1, #8292	; 0x2064
 8003724:	5a9a      	ldrh	r2, [r3, r2]
 8003726:	5859      	ldr	r1, [r3, r1]
 8003728:	440a      	add	r2, r1
 800372a:	f242 0160 	movw	r1, #8288	; 0x2060
 800372e:	5859      	ldr	r1, [r3, r1]
 8003730:	428a      	cmp	r2, r1
 8003732:	f67f ae0a 	bls.w	800334a <SCSI_ProcessCmd+0x36>
 8003736:	e74a      	b.n	80035ce <SCSI_ProcessCmd+0x2ba>
 8003738:	2202      	movs	r2, #2
 800373a:	7232      	strb	r2, [r6, #8]
 800373c:	f242 025e 	movw	r2, #8286	; 0x205e
 8003740:	5ab2      	ldrh	r2, [r6, r2]
 8003742:	4351      	muls	r1, r2
 8003744:	4353      	muls	r3, r2
 8003746:	f242 0214 	movw	r2, #8212	; 0x2014
 800374a:	f846 300e 	str.w	r3, [r6, lr]
 800374e:	58b2      	ldr	r2, [r6, r2]
 8003750:	5031      	str	r1, [r6, r0]
 8003752:	4291      	cmp	r1, r2
 8003754:	f47f adef 	bne.w	8003336 <SCSI_ProcessCmd+0x22>
 8003758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800375c:	8173      	strh	r3, [r6, #10]
 800375e:	f242 0868 	movw	r8, #8296	; 0x2068
 8003762:	f8d5 6218 	ldr.w	r6, [r5, #536]	; 0x218
 8003766:	f8d5 021c 	ldr.w	r0, [r5, #540]	; 0x21c
 800376a:	f856 7008 	ldr.w	r7, [r6, r8]
 800376e:	f8d0 b010 	ldr.w	fp, [r0, #16]
 8003772:	429f      	cmp	r7, r3
 8003774:	bf28      	it	cs
 8003776:	461f      	movcs	r7, r3
 8003778:	f242 0964 	movw	r9, #8292	; 0x2064
 800377c:	f242 035e 	movw	r3, #8286	; 0x205e
 8003780:	f106 0a0c 	add.w	sl, r6, #12
 8003784:	5af2      	ldrh	r2, [r6, r3]
 8003786:	f856 1009 	ldr.w	r1, [r6, r9]
 800378a:	fbb7 f3f2 	udiv	r3, r7, r2
 800378e:	4620      	mov	r0, r4
 8003790:	fbb1 f2f2 	udiv	r2, r1, r2
 8003794:	b29b      	uxth	r3, r3
 8003796:	4651      	mov	r1, sl
 8003798:	47d8      	blx	fp
 800379a:	2800      	cmp	r0, #0
 800379c:	f6bf af1a 	bge.w	80035d4 <SCSI_ProcessCmd+0x2c0>
 80037a0:	2211      	movs	r2, #17
 80037a2:	2104      	movs	r1, #4
 80037a4:	e6c9      	b.n	800353a <SCSI_ProcessCmd+0x226>
 80037a6:	bf00      	nop
 80037a8:	0800de6f 	.word	0x0800de6f
 80037ac:	0800de6f 	.word	0x0800de6f
 80037b0:	0800de67 	.word	0x0800de67

080037b4 <SCSI_SenseCode>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
 80037ba:	f242 055d 	movw	r5, #8285	; 0x205d
 80037be:	f242 063c 	movw	r6, #8252	; 0x203c
 80037c2:	5d41      	ldrb	r1, [r0, r5]
 80037c4:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80037c8:	3101      	adds	r1, #1
 80037ca:	55a2      	strb	r2, [r4, r6]
 80037cc:	b2c9      	uxtb	r1, r1
 80037ce:	f504 5401 	add.w	r4, r4, #8256	; 0x2040
 80037d2:	021b      	lsls	r3, r3, #8
 80037d4:	2904      	cmp	r1, #4
 80037d6:	6023      	str	r3, [r4, #0]
 80037d8:	bf0a      	itet	eq
 80037da:	2300      	moveq	r3, #0
 80037dc:	5541      	strbne	r1, [r0, r5]
 80037de:	5543      	strbeq	r3, [r0, r5]
 80037e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080037e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037e4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80037e6:	4b08      	ldr	r3, [pc, #32]	; (8003808 <HAL_InitTick+0x24>)
{
 80037e8:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80037f4:	f000 f892 	bl	800391c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80037f8:	2200      	movs	r2, #0
 80037fa:	4621      	mov	r1, r4
 80037fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003800:	f000 f84c 	bl	800389c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8003804:	2000      	movs	r0, #0
 8003806:	bd10      	pop	{r4, pc}
 8003808:	200000f8 	.word	0x200000f8

0800380c <HAL_Init>:
{
 800380c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800380e:	2003      	movs	r0, #3
 8003810:	f000 f832 	bl	8003878 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003814:	2000      	movs	r0, #0
 8003816:	f7ff ffe5 	bl	80037e4 <HAL_InitTick>
  HAL_MspInit();
 800381a:	f007 fff3 	bl	800b804 <HAL_MspInit>
}
 800381e:	2000      	movs	r0, #0
 8003820:	bd08      	pop	{r3, pc}
	...

08003824 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003824:	4a02      	ldr	r2, [pc, #8]	; (8003830 <HAL_IncTick+0xc>)
 8003826:	6813      	ldr	r3, [r2, #0]
 8003828:	3301      	adds	r3, #1
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	2000898c 	.word	0x2000898c

08003834 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003834:	4b01      	ldr	r3, [pc, #4]	; (800383c <HAL_GetTick+0x8>)
 8003836:	6818      	ldr	r0, [r3, #0]
}
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	2000898c 	.word	0x2000898c

08003840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003840:	b538      	push	{r3, r4, r5, lr}
 8003842:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8003844:	f7ff fff6 	bl	8003834 <HAL_GetTick>
 8003848:	4605      	mov	r5, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800384a:	f7ff fff3 	bl	8003834 <HAL_GetTick>
 800384e:	1b40      	subs	r0, r0, r5
 8003850:	42a0      	cmp	r0, r4
 8003852:	d3fa      	bcc.n	800384a <HAL_Delay+0xa>
  {
  }
}
 8003854:	bd38      	pop	{r3, r4, r5, pc}
	...

08003858 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003858:	4a02      	ldr	r2, [pc, #8]	; (8003864 <HAL_SuspendTick+0xc>)
 800385a:	6813      	ldr	r3, [r2, #0]
 800385c:	f023 0302 	bic.w	r3, r3, #2
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	4770      	bx	lr
 8003864:	e000e010 	.word	0xe000e010

08003868 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003868:	4a02      	ldr	r2, [pc, #8]	; (8003874 <HAL_ResumeTick+0xc>)
 800386a:	6813      	ldr	r3, [r2, #0]
 800386c:	f043 0302 	orr.w	r3, r3, #2
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	4770      	bx	lr
 8003874:	e000e010 	.word	0xe000e010

08003878 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003878:	4a07      	ldr	r2, [pc, #28]	; (8003898 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800387a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800387c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003880:	041b      	lsls	r3, r3, #16
 8003882:	0c1b      	lsrs	r3, r3, #16
 8003884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003888:	0200      	lsls	r0, r0, #8
 800388a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8003892:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003894:	60d3      	str	r3, [r2, #12]
 8003896:	4770      	bx	lr
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800389c:	4b17      	ldr	r3, [pc, #92]	; (80038fc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800389e:	b530      	push	{r4, r5, lr}
 80038a0:	68dc      	ldr	r4, [r3, #12]
 80038a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	bf28      	it	cs
 80038b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b4:	f04f 0501 	mov.w	r5, #1
 80038b8:	fa05 f303 	lsl.w	r3, r5, r3
 80038bc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038c0:	bf8c      	ite	hi
 80038c2:	3c03      	subhi	r4, #3
 80038c4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c6:	4019      	ands	r1, r3
 80038c8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038ca:	fa05 f404 	lsl.w	r4, r5, r4
 80038ce:	3c01      	subs	r4, #1
 80038d0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80038d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d4:	ea42 0201 	orr.w	r2, r2, r1
 80038d8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038dc:	bfaf      	iteee	ge
 80038de:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e2:	f000 000f 	andlt.w	r0, r0, #15
 80038e6:	4b06      	ldrlt	r3, [pc, #24]	; (8003900 <HAL_NVIC_SetPriority+0x64>)
 80038e8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ea:	bfa5      	ittet	ge
 80038ec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80038f0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80038f8:	bd30      	pop	{r4, r5, pc}
 80038fa:	bf00      	nop
 80038fc:	e000ed00 	.word	0xe000ed00
 8003900:	e000ed14 	.word	0xe000ed14

08003904 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003904:	0942      	lsrs	r2, r0, #5
 8003906:	2301      	movs	r3, #1
 8003908:	f000 001f 	and.w	r0, r0, #31
 800390c:	fa03 f000 	lsl.w	r0, r3, r0
 8003910:	4b01      	ldr	r3, [pc, #4]	; (8003918 <HAL_NVIC_EnableIRQ+0x14>)
 8003912:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003916:	4770      	bx	lr
 8003918:	e000e100 	.word	0xe000e100

0800391c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800391c:	3801      	subs	r0, #1
 800391e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003922:	d20a      	bcs.n	800393a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003924:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003926:	4a07      	ldr	r2, [pc, #28]	; (8003944 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003928:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392a:	21f0      	movs	r1, #240	; 0xf0
 800392c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003930:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003932:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003934:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800393a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	e000e010 	.word	0xe000e010
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003948:	4770      	bx	lr

0800394a <HAL_SYSTICK_IRQHandler>:
{
 800394a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800394c:	f7ff fffc 	bl	8003948 <HAL_SYSTICK_Callback>
 8003950:	bd08      	pop	{r3, pc}
	...

08003954 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003954:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003956:	2800      	cmp	r0, #0
 8003958:	d05b      	beq.n	8003a12 <HAL_DMA_Init+0xbe>
  {
    assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
  }
  
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800395a:	6801      	ldr	r1, [r0, #0]
 800395c:	4b2e      	ldr	r3, [pc, #184]	; (8003a18 <HAL_DMA_Init+0xc4>)
 800395e:	4299      	cmp	r1, r3
 8003960:	f04f 0414 	mov.w	r4, #20
 8003964:	d841      	bhi.n	80039ea <HAL_DMA_Init+0x96>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003966:	4a2d      	ldr	r2, [pc, #180]	; (8003a1c <HAL_DMA_Init+0xc8>)
 8003968:	440a      	add	r2, r1
 800396a:	fbb2 f2f4 	udiv	r2, r2, r4
 800396e:	0092      	lsls	r2, r2, #2
 8003970:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003972:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8003976:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003978:	2302      	movs	r3, #2
 800397a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800397e:	6884      	ldr	r4, [r0, #8]
 8003980:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003982:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8003984:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8003986:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003988:	432b      	orrs	r3, r5
 800398a:	6945      	ldr	r5, [r0, #20]
 800398c:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800398e:	6985      	ldr	r5, [r0, #24]
 8003990:	432b      	orrs	r3, r5
 8003992:	69c5      	ldr	r5, [r0, #28]
 8003994:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003996:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003998:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800399c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 80039a0:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80039a2:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80039a4:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 80039a8:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80039aa:	d011      	beq.n	80039d0 <HAL_DMA_Init+0x7c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80039ac:	4b1c      	ldr	r3, [pc, #112]	; (8003a20 <HAL_DMA_Init+0xcc>)
 80039ae:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80039b0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80039b2:	429a      	cmp	r2, r3
 80039b4:	f04f 030f 	mov.w	r3, #15
 80039b8:	d11f      	bne.n	80039fa <HAL_DMA_Init+0xa6>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 80039ba:	491a      	ldr	r1, [pc, #104]	; (8003a24 <HAL_DMA_Init+0xd0>)
 80039bc:	680a      	ldr	r2, [r1, #0]
 80039be:	40a3      	lsls	r3, r4
 80039c0:	ea22 0303 	bic.w	r3, r2, r3
 80039c4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 80039c6:	6842      	ldr	r2, [r0, #4]
 80039c8:	680b      	ldr	r3, [r1, #0]
 80039ca:	40a2      	lsls	r2, r4
 80039cc:	431a      	orrs	r2, r3
 80039ce:	600a      	str	r2, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
    }
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80039d0:	2300      	movs	r3, #0

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80039d2:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039d4:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 80039d6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80039d8:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80039da:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80039dc:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State  = HAL_DMA_STATE_READY;
 80039de:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039e2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  return HAL_OK;
 80039e6:	4618      	mov	r0, r3
 80039e8:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80039ea:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <HAL_DMA_Init+0xd4>)
 80039ec:	440b      	add	r3, r1
 80039ee:	fbb3 f3f4 	udiv	r3, r3, r4
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80039f6:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <HAL_DMA_Init+0xd8>)
 80039f8:	e7bd      	b.n	8003976 <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 80039fa:	490d      	ldr	r1, [pc, #52]	; (8003a30 <HAL_DMA_Init+0xdc>)
 80039fc:	680a      	ldr	r2, [r1, #0]
 80039fe:	40a3      	lsls	r3, r4
 8003a00:	ea22 0303 	bic.w	r3, r2, r3
 8003a04:	600b      	str	r3, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 8003a06:	6843      	ldr	r3, [r0, #4]
 8003a08:	680a      	ldr	r2, [r1, #0]
 8003a0a:	40a3      	lsls	r3, r4
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	600b      	str	r3, [r1, #0]
 8003a10:	e7de      	b.n	80039d0 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8003a12:	2001      	movs	r0, #1
}
 8003a14:	bd30      	pop	{r4, r5, pc}
 8003a16:	bf00      	nop
 8003a18:	40020407 	.word	0x40020407
 8003a1c:	bffdfff8 	.word	0xbffdfff8
 8003a20:	40020000 	.word	0x40020000
 8003a24:	400200a8 	.word	0x400200a8
 8003a28:	bffdfbf8 	.word	0xbffdfbf8
 8003a2c:	40020400 	.word	0x40020400
 8003a30:	400204a8 	.word	0x400204a8

08003a34 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003a34:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a36:	2800      	cmp	r0, #0
 8003a38:	d034      	beq.n	8003aa4 <HAL_DMA_DeInit+0x70>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003a3a:	6801      	ldr	r1, [r0, #0]
 8003a3c:	680b      	ldr	r3, [r1, #0]
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	600b      	str	r3, [r1, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	600b      	str	r3, [r1, #0]

  /* Calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a48:	4b17      	ldr	r3, [pc, #92]	; (8003aa8 <HAL_DMA_DeInit+0x74>)
 8003a4a:	4299      	cmp	r1, r3
 8003a4c:	f04f 0414 	mov.w	r4, #20
 8003a50:	d820      	bhi.n	8003a94 <HAL_DMA_DeInit+0x60>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a52:	4a16      	ldr	r2, [pc, #88]	; (8003aac <HAL_DMA_DeInit+0x78>)
 8003a54:	440a      	add	r2, r1
 8003a56:	fbb2 f2f4 	udiv	r2, r2, r4
 8003a5a:	0092      	lsls	r2, r2, #2
 8003a5c:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a5e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8003a62:	6403      	str	r3, [r0, #64]	; 0x40
  }
  

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a64:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003a66:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003a68:	2301      	movs	r3, #1
 8003a6a:	408b      	lsls	r3, r1
 8003a6c:	6053      	str	r3, [r2, #4]

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8003a6e:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <HAL_DMA_DeInit+0x7c>)
 8003a70:	429a      	cmp	r2, r3
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 8003a72:	bf0c      	ite	eq
 8003a74:	4c0f      	ldreq	r4, [pc, #60]	; (8003ab4 <HAL_DMA_DeInit+0x80>)
  }
  else  
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 8003a76:	4c10      	ldrne	r4, [pc, #64]	; (8003ab8 <HAL_DMA_DeInit+0x84>)
 8003a78:	230f      	movs	r3, #15
 8003a7a:	6822      	ldr	r2, [r4, #0]
 8003a7c:	408b      	lsls	r3, r1
 8003a7e:	ea22 0303 	bic.w	r3, r2, r3
 8003a82:	6023      	str	r3, [r4, #0]
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a84:	2300      	movs	r3, #0
 8003a86:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003a88:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_RESET;
 8003a8c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

  return HAL_OK;
 8003a90:	4618      	mov	r0, r3
 8003a92:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a94:	4b09      	ldr	r3, [pc, #36]	; (8003abc <HAL_DMA_DeInit+0x88>)
 8003a96:	440b      	add	r3, r1
 8003a98:	fbb3 f3f4 	udiv	r3, r3, r4
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003aa0:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <HAL_DMA_DeInit+0x8c>)
 8003aa2:	e7de      	b.n	8003a62 <HAL_DMA_DeInit+0x2e>
    return HAL_ERROR;
 8003aa4:	2001      	movs	r0, #1
}
 8003aa6:	bd10      	pop	{r4, pc}
 8003aa8:	40020407 	.word	0x40020407
 8003aac:	bffdfff8 	.word	0xbffdfff8
 8003ab0:	40020000 	.word	0x40020000
 8003ab4:	400200a8 	.word	0x400200a8
 8003ab8:	400204a8 	.word	0x400204a8
 8003abc:	bffdfbf8 	.word	0xbffdfbf8
 8003ac0:	40020400 	.word	0x40020400

08003ac4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ac4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ac6:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8003aca:	2c01      	cmp	r4, #1
 8003acc:	d036      	beq.n	8003b3c <HAL_DMA_Start_IT+0x78>
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ace:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8003ad2:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ad4:	b2ed      	uxtb	r5, r5
 8003ad6:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8003ad8:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8003adc:	f04f 0600 	mov.w	r6, #0
 8003ae0:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ae4:	d128      	bne.n	8003b38 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ae6:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003aea:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aec:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003aee:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003af0:	6c47      	ldr	r7, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8003af2:	f026 0601 	bic.w	r6, r6, #1
 8003af6:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003af8:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8003afa:	40bd      	lsls	r5, r7
 8003afc:	6075      	str	r5, [r6, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003afe:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b00:	6883      	ldr	r3, [r0, #8]
 8003b02:	6805      	ldr	r5, [r0, #0]
 8003b04:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8003b06:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b08:	bf0b      	itete	eq
 8003b0a:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003b0c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003b0e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003b10:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003b12:	b14b      	cbz	r3, 8003b28 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b1a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b24:	2000      	movs	r0, #0
 8003b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	f023 0304 	bic.w	r3, r3, #4
 8003b2e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	f043 030a 	orr.w	r3, r3, #10
 8003b36:	e7f0      	b.n	8003b1a <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 8003b38:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8003b3c:	2002      	movs	r0, #2
}
 8003b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b40 <HAL_DMA_Abort>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b40:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d003      	beq.n	8003b50 <HAL_DMA_Abort+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b48:	2304      	movs	r3, #4
 8003b4a:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b50:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b52:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	f022 020e 	bic.w	r2, r2, #14
 8003b5a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	f022 0201 	bic.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b64:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003b66:	2201      	movs	r2, #1
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);      
 8003b6e:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003b70:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);      
 8003b74:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 8003b78:	4618      	mov	r0, r3
}
 8003b7a:	4770      	bx	lr

08003b7c <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b7c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003b7e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8003b80:	6803      	ldr	r3, [r0, #0]
{
 8003b82:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b84:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003b86:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003b88:	2404      	movs	r4, #4
 8003b8a:	4094      	lsls	r4, r2
 8003b8c:	4226      	tst	r6, r4
 8003b8e:	d00e      	beq.n	8003bae <HAL_DMA_IRQHandler+0x32>
 8003b90:	f015 0f04 	tst.w	r5, #4
 8003b94:	d00b      	beq.n	8003bae <HAL_DMA_IRQHandler+0x32>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b9a:	bf5e      	ittt	pl
 8003b9c:	681a      	ldrpl	r2, [r3, #0]
 8003b9e:	f022 0204 	bicpl.w	r2, r2, #4
 8003ba2:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8003ba4:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8003ba6:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8003ba8:	b373      	cbz	r3, 8003c08 <HAL_DMA_IRQHandler+0x8c>
}
 8003baa:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003bac:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003bae:	2402      	movs	r4, #2
 8003bb0:	4094      	lsls	r4, r2
 8003bb2:	4226      	tst	r6, r4
 8003bb4:	d012      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x60>
 8003bb6:	f015 0f02 	tst.w	r5, #2
 8003bba:	d00f      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	0695      	lsls	r5, r2, #26
 8003bc0:	d406      	bmi.n	8003bd0 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	f022 020a 	bic.w	r2, r2, #10
 8003bc8:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003bd0:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 8003bd2:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003bd4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8003bd8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003bda:	e7e5      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003bdc:	2408      	movs	r4, #8
 8003bde:	4094      	lsls	r4, r2
 8003be0:	4234      	tst	r4, r6
 8003be2:	d011      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x8c>
 8003be4:	072c      	lsls	r4, r5, #28
 8003be6:	d50f      	bpl.n	8003c08 <HAL_DMA_IRQHandler+0x8c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003be8:	681c      	ldr	r4, [r3, #0]
 8003bea:	f024 040e 	bic.w	r4, r4, #14
 8003bee:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	fa03 f202 	lsl.w	r2, r3, r2
 8003bf6:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bf8:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003bfa:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003c04:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003c06:	e7cf      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x2c>
}
 8003c08:	bc70      	pop	{r4, r5, r6}
 8003c0a:	4770      	bx	lr

08003c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c10:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003c12:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c14:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003dc0 <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c18:	4c67      	ldr	r4, [pc, #412]	; (8003db8 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003c1a:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 8003c1c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003c1e:	9a01      	ldr	r2, [sp, #4]
 8003c20:	40da      	lsrs	r2, r3
 8003c22:	d102      	bne.n	8003c2a <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8003c24:	b005      	add	sp, #20
 8003c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003c2a:	2601      	movs	r6, #1
    if(iocurrent)
 8003c2c:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003c2e:	409e      	lsls	r6, r3
    if(iocurrent)
 8003c30:	ea12 0e06 	ands.w	lr, r2, r6
 8003c34:	f000 80b1 	beq.w	8003d9a <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c38:	684a      	ldr	r2, [r1, #4]
 8003c3a:	f022 0710 	bic.w	r7, r2, #16
 8003c3e:	2f02      	cmp	r7, #2
 8003c40:	d116      	bne.n	8003c70 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8003c42:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8003c46:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c4a:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8003c4e:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c52:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8003c56:	f04f 0c0f 	mov.w	ip, #15
 8003c5a:	fa0c fc0a 	lsl.w	ip, ip, sl
 8003c5e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c62:	690d      	ldr	r5, [r1, #16]
 8003c64:	fa05 f50a 	lsl.w	r5, r5, sl
 8003c68:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8003c6c:	f8c9 5020 	str.w	r5, [r9, #32]
 8003c70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8003c74:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8003c76:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8003c7a:	fa05 f50c 	lsl.w	r5, r5, ip
 8003c7e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c80:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8003c84:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c88:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c8c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c8e:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c92:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8003c94:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c98:	d811      	bhi.n	8003cbe <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8003c9a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8003c9c:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ca0:	68cf      	ldr	r7, [r1, #12]
 8003ca2:	fa07 f70c 	lsl.w	r7, r7, ip
 8003ca6:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8003caa:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003cac:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cae:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003cb2:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8003cb6:	409f      	lsls	r7, r3
 8003cb8:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8003cbc:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003cbe:	f1ba 0f03 	cmp.w	sl, #3
 8003cc2:	d107      	bne.n	8003cd4 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8003cc4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003cc6:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003cca:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8003cce:	409f      	lsls	r7, r3
 8003cd0:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8003cd2:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8003cd4:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8003cd6:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003cd8:	688e      	ldr	r6, [r1, #8]
 8003cda:	fa06 f60c 	lsl.w	r6, r6, ip
 8003cde:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8003ce0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ce2:	00d5      	lsls	r5, r2, #3
 8003ce4:	d559      	bpl.n	8003d9a <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ce6:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8003cea:	f045 0501 	orr.w	r5, r5, #1
 8003cee:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8003cf2:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8003cf6:	f023 0603 	bic.w	r6, r3, #3
 8003cfa:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8003cfe:	f005 0501 	and.w	r5, r5, #1
 8003d02:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8003d06:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d08:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d0c:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8003d0e:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d10:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003d14:	270f      	movs	r7, #15
 8003d16:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8003d1a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d1e:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8003d22:	d03c      	beq.n	8003d9e <HAL_GPIO_Init+0x192>
 8003d24:	4d25      	ldr	r5, [pc, #148]	; (8003dbc <HAL_GPIO_Init+0x1b0>)
 8003d26:	42a8      	cmp	r0, r5
 8003d28:	d03b      	beq.n	8003da2 <HAL_GPIO_Init+0x196>
 8003d2a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d2e:	42a8      	cmp	r0, r5
 8003d30:	d039      	beq.n	8003da6 <HAL_GPIO_Init+0x19a>
 8003d32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d36:	42a8      	cmp	r0, r5
 8003d38:	d037      	beq.n	8003daa <HAL_GPIO_Init+0x19e>
 8003d3a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d3e:	42a8      	cmp	r0, r5
 8003d40:	d035      	beq.n	8003dae <HAL_GPIO_Init+0x1a2>
 8003d42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d46:	42a8      	cmp	r0, r5
 8003d48:	d033      	beq.n	8003db2 <HAL_GPIO_Init+0x1a6>
 8003d4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d4e:	42a8      	cmp	r0, r5
 8003d50:	bf14      	ite	ne
 8003d52:	2507      	movne	r5, #7
 8003d54:	2506      	moveq	r5, #6
 8003d56:	fa05 f50c 	lsl.w	r5, r5, ip
 8003d5a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d5c:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8003d5e:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8003d60:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d64:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 8003d66:	bf54      	ite	pl
 8003d68:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8003d6a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8003d6e:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8003d70:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d72:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 8003d74:	bf54      	ite	pl
 8003d76:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8003d78:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8003d7c:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8003d7e:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d80:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 8003d82:	bf54      	ite	pl
 8003d84:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8003d86:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8003d8a:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8003d8c:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d8e:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 8003d90:	bf54      	ite	pl
 8003d92:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8003d94:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8003d98:	60e5      	str	r5, [r4, #12]
    position++;
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	e73f      	b.n	8003c1e <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8003d9e:	2500      	movs	r5, #0
 8003da0:	e7d9      	b.n	8003d56 <HAL_GPIO_Init+0x14a>
 8003da2:	2501      	movs	r5, #1
 8003da4:	e7d7      	b.n	8003d56 <HAL_GPIO_Init+0x14a>
 8003da6:	2502      	movs	r5, #2
 8003da8:	e7d5      	b.n	8003d56 <HAL_GPIO_Init+0x14a>
 8003daa:	2503      	movs	r5, #3
 8003dac:	e7d3      	b.n	8003d56 <HAL_GPIO_Init+0x14a>
 8003dae:	2504      	movs	r5, #4
 8003db0:	e7d1      	b.n	8003d56 <HAL_GPIO_Init+0x14a>
 8003db2:	2505      	movs	r5, #5
 8003db4:	e7cf      	b.n	8003d56 <HAL_GPIO_Init+0x14a>
 8003db6:	bf00      	nop
 8003db8:	40010400 	.word	0x40010400
 8003dbc:	48000400 	.word	0x48000400
 8003dc0:	40021000 	.word	0x40021000

08003dc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8003dc8:	4604      	mov	r4, r0
{
 8003dca:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	d07c      	beq.n	8003eca <HAL_PCD_Init+0x106>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  
  if(hpcd->State == HAL_PCD_STATE_RESET)
 8003dd0:	f890 3385 	ldrb.w	r3, [r0, #901]	; 0x385
 8003dd4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003dd8:	b91b      	cbnz	r3, 8003de2 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003dda:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003dde:	f007 ffbd 	bl	800bd5c <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003de2:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003de4:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8003de6:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003dea:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  __HAL_PCD_DISABLE(hpcd);
 8003dee:	f002 fda6 	bl	800693e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8003df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003df4:	466e      	mov	r6, sp
 8003df6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dfa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003dfc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003e00:	e886 0003 	stmia.w	r6, {r0, r1}
 8003e04:	f104 0804 	add.w	r8, r4, #4
 8003e08:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8003e0c:	6820      	ldr	r0, [r4, #0]
 8003e0e:	f002 fd7c 	bl	800690a <USB_CoreInit>

  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8003e12:	2100      	movs	r1, #0
 8003e14:	6820      	ldr	r0, [r4, #0]
 8003e16:	f002 fd98 	bl	800694a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	6860      	ldr	r0, [r4, #4]
 8003e1e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8003e22:	f104 0510 	add.w	r5, r4, #16
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8003e26:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8003e28:	4611      	mov	r1, r2
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8003e2a:	4282      	cmp	r2, r0
 8003e2c:	f103 031c 	add.w	r3, r3, #28
 8003e30:	d13b      	bne.n	8003eaa <HAL_PCD_Init+0xe6>
 8003e32:	2200      	movs	r2, #0
 8003e34:	4623      	mov	r3, r4
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 8003e36:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8003e38:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
    hpcd->IN_ep[index].tx_fifo_num = index;
 8003e3c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (index = 0; index < 15 ; index++)
 8003e40:	3201      	adds	r2, #1
 8003e42:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0;
 8003e44:	f883 71e1 	strb.w	r7, [r3, #481]	; 0x1e1
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8003e48:	f883 71e3 	strb.w	r7, [r3, #483]	; 0x1e3
    hpcd->OUT_ep[index].maxpacket = 0;
 8003e4c:	f8c3 71e8 	str.w	r7, [r3, #488]	; 0x1e8
    hpcd->OUT_ep[index].xfer_buff = 0;
 8003e50:	f8c3 71ec 	str.w	r7, [r3, #492]	; 0x1ec
    hpcd->OUT_ep[index].xfer_len = 0;
 8003e54:	f8c3 71f4 	str.w	r7, [r3, #500]	; 0x1f4
 8003e58:	f103 031c 	add.w	r3, r3, #28
  for (index = 0; index < 15 ; index++)
 8003e5c:	d1ec      	bne.n	8003e38 <HAL_PCD_Init+0x74>
  }

  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8003e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e60:	466e      	mov	r6, sp
 8003e62:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e66:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003e68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003e6c:	e886 0003 	stmia.w	r6, {r0, r1}
 8003e70:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8003e74:	6820      	ldr	r0, [r4, #0]
 8003e76:	f002 fd7f 	bl	8006978 <USB_DevInit>

  hpcd->USB_Address = 0;
  
  hpcd->State= HAL_PCD_STATE_READY;
 8003e7a:	2301      	movs	r3, #1
  hpcd->USB_Address = 0;
 8003e7c:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State= HAL_PCD_STATE_READY;
 8003e80:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  
   /* Activate LPM */
  if (hpcd->Init.lpm_enable ==1)
 8003e84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d102      	bne.n	8003e90 <HAL_PCD_Init+0xcc>
  {
    HAL_PCDEx_ActivateLPM(hpcd);
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f000 fcb3 	bl	80047f6 <HAL_PCDEx_ActivateLPM>
  }  
  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable ==1)
 8003e90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d102      	bne.n	8003e9c <HAL_PCD_Init+0xd8>
  {
    HAL_PCDEx_ActivateBCD(hpcd);
 8003e96:	4620      	mov	r0, r4
 8003e98:	f000 fcc0 	bl	800481c <HAL_PCDEx_ActivateBCD>
  }
  USB_DevDisconnect (hpcd->Instance);  
 8003e9c:	6820      	ldr	r0, [r4, #0]
 8003e9e:	f003 f84b 	bl	8006f38 <USB_DevDisconnect>
  return HAL_OK;
 8003ea2:	2000      	movs	r0, #0
}
 8003ea4:	b00a      	add	sp, #40	; 0x28
 8003ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hpcd->IN_ep[index].num = index;
 8003eaa:	f803 2c1c 	strb.w	r2, [r3, #-28]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8003eae:	f823 2c16 	strh.w	r2, [r3, #-22]
    hpcd->IN_ep[index].is_in = 1;
 8003eb2:	f803 6c1b 	strb.w	r6, [r3, #-27]
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8003eb6:	f803 1c19 	strb.w	r1, [r3, #-25]
    hpcd->IN_ep[index].maxpacket =  0;
 8003eba:	f843 1c14 	str.w	r1, [r3, #-20]
    hpcd->IN_ep[index].xfer_buff = 0;
 8003ebe:	f843 1c10 	str.w	r1, [r3, #-16]
    hpcd->IN_ep[index].xfer_len = 0;
 8003ec2:	f843 1c08 	str.w	r1, [r3, #-8]
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8003ec6:	3201      	adds	r2, #1
 8003ec8:	e7af      	b.n	8003e2a <HAL_PCD_Init+0x66>
    return HAL_ERROR;
 8003eca:	2001      	movs	r0, #1
 8003ecc:	e7ea      	b.n	8003ea4 <HAL_PCD_Init+0xe0>

08003ece <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8003ece:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8003ed2:	2b01      	cmp	r3, #1
{ 
 8003ed4:	b510      	push	{r4, lr}
 8003ed6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8003ed8:	d00c      	beq.n	8003ef4 <HAL_PCD_Start+0x26>
 8003eda:	2301      	movs	r3, #1
 8003edc:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  USB_DevConnect (hpcd->Instance);
 8003ee0:	6800      	ldr	r0, [r0, #0]
 8003ee2:	f003 f81d 	bl	8006f20 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003ee6:	6820      	ldr	r0, [r4, #0]
 8003ee8:	f002 fd23 	bl	8006932 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8003eec:	2000      	movs	r0, #0
 8003eee:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8003ef2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8003ef4:	2002      	movs	r0, #2
}
 8003ef6:	bd10      	pop	{r4, pc}

08003ef8 <HAL_PCD_Stop>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8003ef8:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8003efc:	2b01      	cmp	r3, #1
{ 
 8003efe:	b510      	push	{r4, lr}
 8003f00:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8003f02:	d00f      	beq.n	8003f24 <HAL_PCD_Stop+0x2c>
 8003f04:	2301      	movs	r3, #1
 8003f06:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  __HAL_PCD_DISABLE(hpcd);
 8003f0a:	6800      	ldr	r0, [r0, #0]
 8003f0c:	f002 fd17 	bl	800693e <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 8003f10:	6820      	ldr	r0, [r4, #0]
 8003f12:	f002 ffd4 	bl	8006ebe <USB_StopDevice>
  USB_DevDisconnect (hpcd->Instance);
 8003f16:	6820      	ldr	r0, [r4, #0]
 8003f18:	f003 f80e 	bl	8006f38 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd); 
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
 8003f22:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8003f24:	2002      	movs	r0, #2
  return HAL_OK;
}
 8003f26:	bd10      	pop	{r4, pc}

08003f28 <HAL_PCD_DeInit>:
{
 8003f28:	b510      	push	{r4, lr}
  if(hpcd == NULL)
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	b158      	cbz	r0, 8003f46 <HAL_PCD_DeInit+0x1e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	f880 3385 	strb.w	r3, [r0, #901]	; 0x385
  HAL_PCD_Stop(hpcd);
 8003f34:	f7ff ffe0 	bl	8003ef8 <HAL_PCD_Stop>
  HAL_PCD_MspDeInit(hpcd);
 8003f38:	4620      	mov	r0, r4
 8003f3a:	f007 ff4d 	bl	800bdd8 <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET; 
 8003f3e:	2000      	movs	r0, #0
 8003f40:	f884 0385 	strb.w	r0, [r4, #901]	; 0x385
  return HAL_OK;
 8003f44:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003f46:	2001      	movs	r0, #1
}
 8003f48:	bd10      	pop	{r4, pc}
	...

08003f4c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f50:	6807      	ldr	r7, [r0, #0]
{
 8003f52:	b087      	sub	sp, #28
 8003f54:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep = NULL;
  uint32_t hclk = 80000000;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f56:	4638      	mov	r0, r7
 8003f58:	f003 f828 	bl	8006fac <USB_GetMode>
 8003f5c:	9002      	str	r0, [sp, #8]
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	f040 8155 	bne.w	800420e <HAL_PCD_IRQHandler+0x2c2>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8003f64:	6820      	ldr	r0, [r4, #0]
 8003f66:	f002 fff3 	bl	8006f50 <USB_ReadInterrupts>
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	f000 814f 	beq.w	800420e <HAL_PCD_IRQHandler+0x2c2>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f70:	6820      	ldr	r0, [r4, #0]
 8003f72:	f002 ffed 	bl	8006f50 <USB_ReadInterrupts>
 8003f76:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f78:	bf48      	it	mi
 8003f7a:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f7c:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f7e:	bf42      	ittt	mi
 8003f80:	6953      	ldrmi	r3, [r2, #20]
 8003f82:	f003 0302 	andmi.w	r3, r3, #2
 8003f86:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f88:	f002 ffe2 	bl	8006f50 <USB_ReadInterrupts>
 8003f8c:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8003f90:	d00c      	beq.n	8003fac <HAL_PCD_IRQHandler+0x60>
    {
      epnum = 0;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f92:	6820      	ldr	r0, [r4, #0]
 8003f94:	f002 ffe0 	bl	8006f58 <USB_ReadDevAllOutEpInterrupt>
 8003f98:	f507 6930 	add.w	r9, r7, #2816	; 0xb00
 8003f9c:	4680      	mov	r8, r0
 8003f9e:	46a3      	mov	fp, r4
      
      while ( ep_intr )
 8003fa0:	464e      	mov	r6, r9
      epnum = 0;
 8003fa2:	2500      	movs	r5, #0
      while ( ep_intr )
 8003fa4:	f1b8 0f00 	cmp.w	r8, #0
 8003fa8:	f040 8134 	bne.w	8004214 <HAL_PCD_IRQHandler+0x2c8>
        epnum++;
        ep_intr >>= 1;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003fac:	6820      	ldr	r0, [r4, #0]
 8003fae:	f002 ffcf 	bl	8006f50 <USB_ReadInterrupts>
 8003fb2:	0342      	lsls	r2, r0, #13
 8003fb4:	d50b      	bpl.n	8003fce <HAL_PCD_IRQHandler+0x82>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003fb6:	6820      	ldr	r0, [r4, #0]
 8003fb8:	f002 ffd6 	bl	8006f68 <USB_ReadDevAllInEpInterrupt>
 8003fbc:	4626      	mov	r6, r4
 8003fbe:	4683      	mov	fp, r0
 8003fc0:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      
      epnum = 0;
 8003fc4:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8003fc6:	f1bb 0f00 	cmp.w	fp, #0
 8003fca:	f040 81a1 	bne.w	8004310 <HAL_PCD_IRQHandler+0x3c4>
        ep_intr >>= 1;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003fce:	6820      	ldr	r0, [r4, #0]
 8003fd0:	f002 ffbe 	bl	8006f50 <USB_ReadInterrupts>
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	da15      	bge.n	8004004 <HAL_PCD_IRQHandler+0xb8>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fd8:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8003fdc:	f023 0301 	bic.w	r3, r3, #1
 8003fe0:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
      
      if(hpcd->LPM_State == LPM_L1)
 8003fe4:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	f040 822c 	bne.w	8004446 <HAL_PCD_IRQHandler+0x4fa>
      {
        hpcd->LPM_State = LPM_L0;
 8003fee:	2100      	movs	r1, #0
 8003ff0:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f000 fc1b 	bl	8004830 <HAL_PCDEx_LPM_Callback>
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ffa:	6822      	ldr	r2, [r4, #0]
 8003ffc:	6953      	ldr	r3, [r2, #20]
 8003ffe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004002:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004004:	6820      	ldr	r0, [r4, #0]
 8004006:	f002 ffa3 	bl	8006f50 <USB_ReadInterrupts>
 800400a:	0503      	lsls	r3, r0, #20
 800400c:	d50b      	bpl.n	8004026 <HAL_PCD_IRQHandler+0xda>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800400e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8004012:	07de      	lsls	r6, r3, #31
 8004014:	d502      	bpl.n	800401c <HAL_PCD_IRQHandler+0xd0>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8004016:	4620      	mov	r0, r4
 8004018:	f007 ff12 	bl	800be40 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800401c:	6822      	ldr	r2, [r4, #0]
 800401e:	6953      	ldr	r3, [r2, #20]
 8004020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004024:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle LPM Interrupt */ 
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004026:	6820      	ldr	r0, [r4, #0]
 8004028:	f002 ff92 	bl	8006f50 <USB_ReadInterrupts>
 800402c:	0100      	lsls	r0, r0, #4
 800402e:	d514      	bpl.n	800405a <HAL_PCD_IRQHandler+0x10e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	695a      	ldr	r2, [r3, #20]
 8004034:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004038:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 800403a:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 800403e:	2a00      	cmp	r2, #0
 8004040:	f040 8205 	bne.w	800444e <HAL_PCD_IRQHandler+0x502>
      {   
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8004044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8004046:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8004048:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 800404c:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8004050:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004054:	4620      	mov	r0, r4
 8004056:	f000 fbeb 	bl	8004830 <HAL_PCDEx_LPM_Callback>
        HAL_PCD_SuspendCallback(hpcd);
      }
    }
    
    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800405a:	6820      	ldr	r0, [r4, #0]
 800405c:	f002 ff78 	bl	8006f50 <USB_ReadInterrupts>
 8004060:	04c1      	lsls	r1, r0, #19
 8004062:	d537      	bpl.n	80040d4 <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8004064:	f507 6600 	add.w	r6, r7, #2048	; 0x800
 8004068:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 800406a:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 800406c:	f023 0301 	bic.w	r3, r3, #1
 8004070:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 8004072:	2100      	movs	r1, #0
 8004074:	f002 fd18 	bl	8006aa8 <USB_FlushTxFifo>
      
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004078:	6861      	ldr	r1, [r4, #4]
 800407a:	f507 6310 	add.w	r3, r7, #2304	; 0x900
      {
        USBx_INEP(index)->DIEPINT = 0xFF;
 800407e:	22ff      	movs	r2, #255	; 0xff
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004080:	9802      	ldr	r0, [sp, #8]
 8004082:	4288      	cmp	r0, r1
 8004084:	f040 81e7 	bne.w	8004456 <HAL_PCD_IRQHandler+0x50a>
        USBx_OUTEP(index)->DOEPINT = 0xFF;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8004088:	f04f 33ff 	mov.w	r3, #4294967295
 800408c:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 800408e:	69f3      	ldr	r3, [r6, #28]
 8004090:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004094:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8004096:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 81e4 	beq.w	8004466 <HAL_PCD_IRQHandler+0x51a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 800409e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 80040a2:	f043 030b 	orr.w	r3, r3, #11
 80040a6:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 80040aa:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80040ac:	f043 030b 	orr.w	r3, r3, #11
 80040b0:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040b2:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040b6:	7c21      	ldrb	r1, [r4, #16]
 80040b8:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80040be:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040c2:	f504 7262 	add.w	r2, r4, #904	; 0x388
 80040c6:	f002 ff90 	bl	8006fea <USB_EP0_OutStart>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040ca:	6822      	ldr	r2, [r4, #0]
 80040cc:	6953      	ldr	r3, [r2, #20]
 80040ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040d2:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80040d4:	6820      	ldr	r0, [r4, #0]
 80040d6:	f002 ff3b 	bl	8006f50 <USB_ReadInterrupts>
 80040da:	0482      	lsls	r2, r0, #18
 80040dc:	d520      	bpl.n	8004120 <HAL_PCD_IRQHandler+0x1d4>
    {
      USB_ActivateSetup(hpcd->Instance);
 80040de:	6820      	ldr	r0, [r4, #0]
 80040e0:	f002 ff68 	bl	8006fb4 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040e4:	6822      	ldr	r2, [r4, #0]
 80040e6:	68d3      	ldr	r3, [r2, #12]
 80040e8:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80040ec:	60d3      	str	r3, [r2, #12]
      
      hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 80040ee:	2303      	movs	r3, #3
 80040f0:	60e3      	str	r3, [r4, #12]
      hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ; 
 80040f2:	2340      	movs	r3, #64	; 0x40
 80040f4:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */

      /* Get hclk frequency value */
      hclk = HAL_RCC_GetHCLKFreq();
 80040f6:	f000 febb 	bl	8004e70 <HAL_RCC_GetHCLKFreq>
    
      if((hclk >= 14200000)&&(hclk < 15000000))
 80040fa:	4b82      	ldr	r3, [pc, #520]	; (8004304 <HAL_PCD_IRQHandler+0x3b8>)
 80040fc:	4a82      	ldr	r2, [pc, #520]	; (8004308 <HAL_PCD_IRQHandler+0x3bc>)
 80040fe:	4403      	add	r3, r0
 8004100:	4293      	cmp	r3, r2
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	f200 81b8 	bhi.w	8004478 <HAL_PCD_IRQHandler+0x52c>
      {
        /* hclk Clock Range between 14.2-15 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
      }
      
      else /* if(hclk >= 32000000) */
      {
        /* hclk Clock Range between 32-80 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 800410e:	60da      	str	r2, [r3, #12]
      }  
      
      HAL_PCD_ResetCallback(hpcd);
 8004110:	4620      	mov	r0, r4
 8004112:	f007 fe88 	bl	800be26 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004116:	6822      	ldr	r2, [r4, #0]
 8004118:	6953      	ldr	r3, [r2, #20]
 800411a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800411e:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004120:	6820      	ldr	r0, [r4, #0]
 8004122:	f002 ff15 	bl	8006f50 <USB_ReadInterrupts>
 8004126:	06c3      	lsls	r3, r0, #27
 8004128:	d52b      	bpl.n	8004182 <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800412a:	6822      	ldr	r2, [r4, #0]
 800412c:	6993      	ldr	r3, [r2, #24]
 800412e:	f023 0310 	bic.w	r3, r3, #16
 8004132:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8004134:	6a3e      	ldr	r6, [r7, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004136:	f3c6 4343 	ubfx	r3, r6, #17, #4
 800413a:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800413c:	f006 090f 	and.w	r9, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004140:	f040 81ea 	bne.w	8004518 <HAL_PCD_IRQHandler+0x5cc>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8004144:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004148:	421e      	tst	r6, r3
 800414a:	d015      	beq.n	8004178 <HAL_PCD_IRQHandler+0x22c>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 800414c:	f04f 081c 	mov.w	r8, #28
 8004150:	fb08 4809 	mla	r8, r8, r9, r4
 8004154:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8004158:	4632      	mov	r2, r6
 800415a:	f8d8 11ec 	ldr.w	r1, [r8, #492]	; 0x1ec
 800415e:	4638      	mov	r0, r7
 8004160:	f002 fe65 	bl	8006e2e <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004164:	f8d8 31ec 	ldr.w	r3, [r8, #492]	; 0x1ec
 8004168:	4433      	add	r3, r6
 800416a:	f8c8 31ec 	str.w	r3, [r8, #492]	; 0x1ec
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800416e:	f8d8 31f8 	ldr.w	r3, [r8, #504]	; 0x1f8
 8004172:	441e      	add	r6, r3
 8004174:	f8c8 61f8 	str.w	r6, [r8, #504]	; 0x1f8
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004178:	6822      	ldr	r2, [r4, #0]
 800417a:	6993      	ldr	r3, [r2, #24]
 800417c:	f043 0310 	orr.w	r3, r3, #16
 8004180:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004182:	6820      	ldr	r0, [r4, #0]
 8004184:	f002 fee4 	bl	8006f50 <USB_ReadInterrupts>
 8004188:	0707      	lsls	r7, r0, #28
 800418a:	d507      	bpl.n	800419c <HAL_PCD_IRQHandler+0x250>
    {
      HAL_PCD_SOFCallback(hpcd);
 800418c:	4620      	mov	r0, r4
 800418e:	f007 fe46 	bl	800be1e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004192:	6822      	ldr	r2, [r4, #0]
 8004194:	6953      	ldr	r3, [r2, #20]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800419c:	6820      	ldr	r0, [r4, #0]
 800419e:	f002 fed7 	bl	8006f50 <USB_ReadInterrupts>
 80041a2:	02c6      	lsls	r6, r0, #11
 80041a4:	d508      	bpl.n	80041b8 <HAL_PCD_IRQHandler+0x26c>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 80041a6:	b2e9      	uxtb	r1, r5
 80041a8:	4620      	mov	r0, r4
 80041aa:	f007 fe55 	bl	800be58 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80041ae:	6822      	ldr	r2, [r4, #0]
 80041b0:	6953      	ldr	r3, [r2, #20]
 80041b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041b6:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041b8:	6820      	ldr	r0, [r4, #0]
 80041ba:	f002 fec9 	bl	8006f50 <USB_ReadInterrupts>
 80041be:	0280      	lsls	r0, r0, #10
 80041c0:	d508      	bpl.n	80041d4 <HAL_PCD_IRQHandler+0x288>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 80041c2:	b2e9      	uxtb	r1, r5
 80041c4:	4620      	mov	r0, r4
 80041c6:	f007 fe43 	bl	800be50 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041ca:	6822      	ldr	r2, [r4, #0]
 80041cc:	6953      	ldr	r3, [r2, #20]
 80041ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041d2:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80041d4:	6820      	ldr	r0, [r4, #0]
 80041d6:	f002 febb 	bl	8006f50 <USB_ReadInterrupts>
 80041da:	0041      	lsls	r1, r0, #1
 80041dc:	d507      	bpl.n	80041ee <HAL_PCD_IRQHandler+0x2a2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 80041de:	4620      	mov	r0, r4
 80041e0:	f007 fe3e 	bl	800be60 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80041e4:	6822      	ldr	r2, [r4, #0]
 80041e6:	6953      	ldr	r3, [r2, #20]
 80041e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041ec:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041ee:	6820      	ldr	r0, [r4, #0]
 80041f0:	f002 feae 	bl	8006f50 <USB_ReadInterrupts>
 80041f4:	0742      	lsls	r2, r0, #29
 80041f6:	d50a      	bpl.n	800420e <HAL_PCD_IRQHandler+0x2c2>
    {
      temp = hpcd->Instance->GOTGINT;
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041fc:	076b      	lsls	r3, r5, #29
 80041fe:	d502      	bpl.n	8004206 <HAL_PCD_IRQHandler+0x2ba>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8004200:	4620      	mov	r0, r4
 8004202:	f007 fe31 	bl	800be68 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	4315      	orrs	r5, r2
 800420c:	605d      	str	r5, [r3, #4]
    }
  }
}
 800420e:	b007      	add	sp, #28
 8004210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1)
 8004214:	f018 0f01 	tst.w	r8, #1
 8004218:	d049      	beq.n	80042ae <HAL_PCD_IRQHandler+0x362>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 800421a:	b2ea      	uxtb	r2, r5
 800421c:	4611      	mov	r1, r2
 800421e:	6820      	ldr	r0, [r4, #0]
 8004220:	9203      	str	r2, [sp, #12]
 8004222:	f002 fea9 	bl	8006f78 <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004226:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 800422a:	4682      	mov	sl, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800422c:	d032      	beq.n	8004294 <HAL_PCD_IRQHandler+0x348>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800422e:	2101      	movs	r1, #1
 8004230:	60b1      	str	r1, [r6, #8]
            if (USBx->GSNPSID == USB_OTG_CORE_ID_310A)
 8004232:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004234:	4b35      	ldr	r3, [pc, #212]	; (800430c <HAL_PCD_IRQHandler+0x3c0>)
 8004236:	9a03      	ldr	r2, [sp, #12]
 8004238:	4299      	cmp	r1, r3
 800423a:	d13f      	bne.n	80042bc <HAL_PCD_IRQHandler+0x370>
              if (!(USBx_OUTEP(0)->DOEPINT & (0x1 << 15)))
 800423c:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8004240:	0409      	lsls	r1, r1, #16
 8004242:	d41f      	bmi.n	8004284 <HAL_PCD_IRQHandler+0x338>
                  if (hpcd->Init.dma_enable == 1)
 8004244:	6921      	ldr	r1, [r4, #16]
 8004246:	2901      	cmp	r1, #1
 8004248:	d10c      	bne.n	8004264 <HAL_PCD_IRQHandler+0x318>
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800424a:	6931      	ldr	r1, [r6, #16]
                                                 hpcd->OUT_ep[epnum].maxpacket -
 800424c:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004250:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                                 hpcd->OUT_ep[epnum].maxpacket -
 8004254:	1a41      	subs	r1, r0, r1
                  	hpcd->OUT_ep[epnum].xfer_count =
 8004256:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                    hpcd->OUT_ep[epnum].xfer_buff +=
 800425a:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 800425e:	4408      	add	r0, r1
 8004260:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
                HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8004264:	4611      	mov	r1, r2
 8004266:	4620      	mov	r0, r4
 8004268:	f007 fdc8 	bl	800bdfc <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 800426c:	6921      	ldr	r1, [r4, #16]
 800426e:	2901      	cmp	r1, #1
 8004270:	d108      	bne.n	8004284 <HAL_PCD_IRQHandler+0x338>
                  if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 8004272:	b93d      	cbnz	r5, 8004284 <HAL_PCD_IRQHandler+0x338>
 8004274:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 8004278:	b922      	cbnz	r2, 8004284 <HAL_PCD_IRQHandler+0x338>
                    USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 800427a:	f504 7262 	add.w	r2, r4, #904	; 0x388
 800427e:	6820      	ldr	r0, [r4, #0]
 8004280:	f002 feb3 	bl	8006fea <USB_EP0_OutStart>
              USBx_OUTEP(0)->DOEPINT |= (0x1 << 15) | (0x1 << 5);
 8004284:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8004288:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800428c:	f042 0220 	orr.w	r2, r2, #32
 8004290:	f8c9 2008 	str.w	r2, [r9, #8]
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004294:	f01a 0f08 	tst.w	sl, #8
 8004298:	d004      	beq.n	80042a4 <HAL_PCD_IRQHandler+0x358>
            HAL_PCD_SetupStageCallback(hpcd);
 800429a:	4620      	mov	r0, r4
 800429c:	f007 fda8 	bl	800bdf0 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80042a0:	2308      	movs	r3, #8
 80042a2:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80042a4:	f01a 0f10 	tst.w	sl, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80042a8:	bf1c      	itt	ne
 80042aa:	2310      	movne	r3, #16
 80042ac:	60b3      	strne	r3, [r6, #8]
        epnum++;
 80042ae:	3501      	adds	r5, #1
        ep_intr >>= 1;
 80042b0:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80042b4:	3620      	adds	r6, #32
 80042b6:	f10b 0b1c 	add.w	fp, fp, #28
 80042ba:	e673      	b.n	8003fa4 <HAL_PCD_IRQHandler+0x58>
              if (hpcd->Init.dma_enable == 1)
 80042bc:	6921      	ldr	r1, [r4, #16]
 80042be:	2901      	cmp	r1, #1
 80042c0:	d10c      	bne.n	80042dc <HAL_PCD_IRQHandler+0x390>
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80042c2:	6931      	ldr	r1, [r6, #16]
                                               hpcd->OUT_ep[epnum].maxpacket -
 80042c4:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80042c8:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                               hpcd->OUT_ep[epnum].maxpacket -
 80042cc:	1a41      	subs	r1, r0, r1
                hpcd->OUT_ep[epnum].xfer_count =
 80042ce:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 80042d2:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 80042d6:	4408      	add	r0, r1
 80042d8:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
              HAL_PCD_DataOutStageCallback(hpcd, epnum);
 80042dc:	4611      	mov	r1, r2
 80042de:	4620      	mov	r0, r4
 80042e0:	f007 fd8c 	bl	800bdfc <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 80042e4:	6921      	ldr	r1, [r4, #16]
 80042e6:	2901      	cmp	r1, #1
 80042e8:	d1d4      	bne.n	8004294 <HAL_PCD_IRQHandler+0x348>
                if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 80042ea:	2d00      	cmp	r5, #0
 80042ec:	d1d2      	bne.n	8004294 <HAL_PCD_IRQHandler+0x348>
 80042ee:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 80042f2:	2a00      	cmp	r2, #0
 80042f4:	d1ce      	bne.n	8004294 <HAL_PCD_IRQHandler+0x348>
                  USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 80042f6:	f504 7262 	add.w	r2, r4, #904	; 0x388
 80042fa:	6820      	ldr	r0, [r4, #0]
 80042fc:	f002 fe75 	bl	8006fea <USB_EP0_OutStart>
 8004300:	e7c8      	b.n	8004294 <HAL_PCD_IRQHandler+0x348>
 8004302:	bf00      	nop
 8004304:	ff275340 	.word	0xff275340
 8004308:	000c34ff 	.word	0x000c34ff
 800430c:	4f54310a 	.word	0x4f54310a
        if (ep_intr & 0x1) /* In ITR */
 8004310:	f01b 0f01 	tst.w	fp, #1
 8004314:	d074      	beq.n	8004400 <HAL_PCD_IRQHandler+0x4b4>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8004316:	fa5f fa85 	uxtb.w	sl, r5
 800431a:	4651      	mov	r1, sl
 800431c:	6820      	ldr	r0, [r4, #0]
 800431e:	f002 fe35 	bl	8006f8c <USB_ReadDevInEPInterrupt>
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004322:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8004326:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004328:	d020      	beq.n	800436c <HAL_PCD_IRQHandler+0x420>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800432a:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
            fifoemptymsk = 0x1 << epnum;
 800432e:	2101      	movs	r1, #1
 8004330:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004332:	ea23 0301 	bic.w	r3, r3, r1
 8004336:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800433a:	2301      	movs	r3, #1
 800433c:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1)
 8004340:	6923      	ldr	r3, [r4, #16]
 8004342:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8004344:	bf01      	itttt	eq
 8004346:	6cb3      	ldreq	r3, [r6, #72]	; 0x48
 8004348:	6c72      	ldreq	r2, [r6, #68]	; 0x44
 800434a:	189b      	addeq	r3, r3, r2
 800434c:	64b3      	streq	r3, [r6, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 800434e:	4651      	mov	r1, sl
 8004350:	4620      	mov	r0, r4
 8004352:	f007 fd5c 	bl	800be0e <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1)
 8004356:	6921      	ldr	r1, [r4, #16]
 8004358:	2901      	cmp	r1, #1
 800435a:	d107      	bne.n	800436c <HAL_PCD_IRQHandler+0x420>
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 800435c:	b935      	cbnz	r5, 800436c <HAL_PCD_IRQHandler+0x420>
 800435e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004360:	b923      	cbnz	r3, 800436c <HAL_PCD_IRQHandler+0x420>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8004362:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8004366:	6820      	ldr	r0, [r4, #0]
 8004368:	f002 fe3f 	bl	8006fea <USB_EP0_OutStart>
          if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800436c:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004370:	bf1c      	itt	ne
 8004372:	2308      	movne	r3, #8
 8004374:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004378:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800437c:	bf1c      	itt	ne
 800437e:	2310      	movne	r3, #16
 8004380:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004384:	f018 0f40 	tst.w	r8, #64	; 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004388:	bf1c      	itt	ne
 800438a:	2340      	movne	r3, #64	; 0x40
 800438c:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004390:	f018 0f02 	tst.w	r8, #2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004394:	bf1c      	itt	ne
 8004396:	2302      	movne	r3, #2
 8004398:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800439c:	f018 0f80 	tst.w	r8, #128	; 0x80
 80043a0:	d02e      	beq.n	8004400 <HAL_PCD_IRQHandler+0x4b4>
  * @param  epnum: endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	9303      	str	r3, [sp, #12]
  int32_t len = 0U;
  uint32_t len32b = 0;
  uint32_t fifoemptymsk = 0;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 80043a6:	6d72      	ldr	r2, [r6, #84]	; 0x54
 80043a8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80043aa:	eba3 0802 	sub.w	r8, r3, r2
 80043ae:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80043b0:	4598      	cmp	r8, r3
 80043b2:	bf28      	it	cs
 80043b4:	4698      	movcs	r8, r3
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3) / 4;
 80043b6:	f108 0303 	add.w	r3, r8, #3
 80043ba:	2204      	movs	r2, #4
 80043bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80043c0:	9304      	str	r3, [sp, #16]
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 80043c2:	9b03      	ldr	r3, [sp, #12]
 80043c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 80043cc:	9305      	str	r3, [sp, #20]
 80043ce:	9b05      	ldr	r3, [sp, #20]
 80043d0:	9a04      	ldr	r2, [sp, #16]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d904      	bls.n	80043e4 <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 80043da:	6d72      	ldr	r2, [r6, #84]	; 0x54
 80043dc:	6d33      	ldr	r3, [r6, #80]	; 0x50
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 80043de:	4293      	cmp	r3, r2
 80043e0:	d900      	bls.n	80043e4 <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 80043e2:	b9a3      	cbnz	r3, 800440e <HAL_PCD_IRQHandler+0x4c2>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0)
 80043e4:	f1b8 0f00 	cmp.w	r8, #0
 80043e8:	dc0a      	bgt.n	8004400 <HAL_PCD_IRQHandler+0x4b4>
  {
    fifoemptymsk = 0x1 << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043ea:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = 0x1 << epnum;
 80043ec:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043ee:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 80043f2:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1 << epnum;
 80043f6:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043f8:	ea23 0302 	bic.w	r3, r3, r2
 80043fc:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        epnum++;
 8004400:	3501      	adds	r5, #1
        ep_intr >>= 1;
 8004402:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8004406:	361c      	adds	r6, #28
 8004408:	f109 0920 	add.w	r9, r9, #32
 800440c:	e5db      	b.n	8003fc6 <HAL_PCD_IRQHandler+0x7a>
    len = ep->xfer_len - ep->xfer_count;
 800440e:	eba3 0802 	sub.w	r8, r3, r2
 8004412:	6c73      	ldr	r3, [r6, #68]	; 0x44
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8004414:	9803      	ldr	r0, [sp, #12]
 8004416:	4598      	cmp	r8, r3
 8004418:	bf28      	it	cs
 800441a:	4698      	movcs	r8, r3
    len32b = (len + 3) / 4;
 800441c:	2204      	movs	r2, #4
 800441e:	f108 0303 	add.w	r3, r8, #3
 8004422:	fb93 f3f2 	sdiv	r3, r3, r2
 8004426:	9304      	str	r3, [sp, #16]
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8004428:	7c23      	ldrb	r3, [r4, #16]
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	4652      	mov	r2, sl
 800442e:	fa1f f388 	uxth.w	r3, r8
 8004432:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8004434:	f002 fcea 	bl	8006e0c <USB_WritePacket>
    ep->xfer_buff  += len;
 8004438:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800443a:	4443      	add	r3, r8
 800443c:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 800443e:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8004440:	4443      	add	r3, r8
 8004442:	6573      	str	r3, [r6, #84]	; 0x54
 8004444:	e7c3      	b.n	80043ce <HAL_PCD_IRQHandler+0x482>
        HAL_PCD_ResumeCallback(hpcd);
 8004446:	4620      	mov	r0, r4
 8004448:	f007 fcfe 	bl	800be48 <HAL_PCD_ResumeCallback>
 800444c:	e5d5      	b.n	8003ffa <HAL_PCD_IRQHandler+0xae>
        HAL_PCD_SuspendCallback(hpcd);
 800444e:	4620      	mov	r0, r4
 8004450:	f007 fcf6 	bl	800be40 <HAL_PCD_SuspendCallback>
 8004454:	e601      	b.n	800405a <HAL_PCD_IRQHandler+0x10e>
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004456:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(index)->DIEPINT = 0xFF;
 8004458:	609a      	str	r2, [r3, #8]
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 800445a:	3001      	adds	r0, #1
        USBx_OUTEP(index)->DOEPINT = 0xFF;
 800445c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8004460:	9002      	str	r0, [sp, #8]
 8004462:	3320      	adds	r3, #32
 8004464:	e60c      	b.n	8004080 <HAL_PCD_IRQHandler+0x134>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8004466:	6973      	ldr	r3, [r6, #20]
 8004468:	f043 030b 	orr.w	r3, r3, #11
 800446c:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 800446e:	6933      	ldr	r3, [r6, #16]
 8004470:	f043 030b 	orr.w	r3, r3, #11
 8004474:	6133      	str	r3, [r6, #16]
 8004476:	e61c      	b.n	80040b2 <HAL_PCD_IRQHandler+0x166>
      else if((hclk >= 15000000)&&(hclk < 16000000))
 8004478:	4a2f      	ldr	r2, [pc, #188]	; (8004538 <HAL_PCD_IRQHandler+0x5ec>)
 800447a:	4930      	ldr	r1, [pc, #192]	; (800453c <HAL_PCD_IRQHandler+0x5f0>)
 800447c:	4402      	add	r2, r0
 800447e:	428a      	cmp	r2, r1
 8004480:	d803      	bhi.n	800448a <HAL_PCD_IRQHandler+0x53e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8004488:	e641      	b.n	800410e <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 16000000)&&(hclk < 17200000))
 800448a:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 800448e:	492c      	ldr	r1, [pc, #176]	; (8004540 <HAL_PCD_IRQHandler+0x5f4>)
 8004490:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8004494:	428a      	cmp	r2, r1
 8004496:	d803      	bhi.n	80044a0 <HAL_PCD_IRQHandler+0x554>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 800449e:	e636      	b.n	800410e <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 17200000)&&(hclk < 18500000))
 80044a0:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 80044a4:	4927      	ldr	r1, [pc, #156]	; (8004544 <HAL_PCD_IRQHandler+0x5f8>)
 80044a6:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 80044aa:	428a      	cmp	r2, r1
 80044ac:	d803      	bhi.n	80044b6 <HAL_PCD_IRQHandler+0x56a>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80044b4:	e62b      	b.n	800410e <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 18500000)&&(hclk < 20000000))
 80044b6:	4a24      	ldr	r2, [pc, #144]	; (8004548 <HAL_PCD_IRQHandler+0x5fc>)
 80044b8:	4924      	ldr	r1, [pc, #144]	; (800454c <HAL_PCD_IRQHandler+0x600>)
 80044ba:	4402      	add	r2, r0
 80044bc:	428a      	cmp	r2, r1
 80044be:	d803      	bhi.n	80044c8 <HAL_PCD_IRQHandler+0x57c>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 80044c6:	e622      	b.n	800410e <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 20000000)&&(hclk < 21800000))
 80044c8:	4a21      	ldr	r2, [pc, #132]	; (8004550 <HAL_PCD_IRQHandler+0x604>)
 80044ca:	4922      	ldr	r1, [pc, #136]	; (8004554 <HAL_PCD_IRQHandler+0x608>)
 80044cc:	4402      	add	r2, r0
 80044ce:	428a      	cmp	r2, r1
 80044d0:	d803      	bhi.n	80044da <HAL_PCD_IRQHandler+0x58e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 80044d8:	e619      	b.n	800410e <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 21800000)&&(hclk < 24000000))
 80044da:	4a1f      	ldr	r2, [pc, #124]	; (8004558 <HAL_PCD_IRQHandler+0x60c>)
 80044dc:	491f      	ldr	r1, [pc, #124]	; (800455c <HAL_PCD_IRQHandler+0x610>)
 80044de:	4402      	add	r2, r0
 80044e0:	428a      	cmp	r2, r1
 80044e2:	d803      	bhi.n	80044ec <HAL_PCD_IRQHandler+0x5a0>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80044ea:	e610      	b.n	800410e <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 24000000)&&(hclk < 27700000))
 80044ec:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 80044f0:	491b      	ldr	r1, [pc, #108]	; (8004560 <HAL_PCD_IRQHandler+0x614>)
 80044f2:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 80044f6:	428a      	cmp	r2, r1
 80044f8:	d803      	bhi.n	8004502 <HAL_PCD_IRQHandler+0x5b6>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004500:	e605      	b.n	800410e <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 27700000)&&(hclk < 32000000))
 8004502:	4a18      	ldr	r2, [pc, #96]	; (8004564 <HAL_PCD_IRQHandler+0x618>)
 8004504:	4918      	ldr	r1, [pc, #96]	; (8004568 <HAL_PCD_IRQHandler+0x61c>)
 8004506:	4402      	add	r2, r0
 8004508:	428a      	cmp	r2, r1
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	bf94      	ite	ls
 800450e:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8004512:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8004516:	e5fa      	b.n	800410e <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004518:	2b06      	cmp	r3, #6
 800451a:	f47f ae2d 	bne.w	8004178 <HAL_PCD_IRQHandler+0x22c>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 800451e:	2208      	movs	r2, #8
 8004520:	f504 7162 	add.w	r1, r4, #904	; 0x388
 8004524:	4638      	mov	r0, r7
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004526:	f04f 081c 	mov.w	r8, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 800452a:	f002 fc80 	bl	8006e2e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800452e:	fb08 4809 	mla	r8, r8, r9, r4
 8004532:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8004536:	e61a      	b.n	800416e <HAL_PCD_IRQHandler+0x222>
 8004538:	ff1b1e40 	.word	0xff1b1e40
 800453c:	000f423f 	.word	0x000f423f
 8004540:	00124f7f 	.word	0x00124f7f
 8004544:	0013d61f 	.word	0x0013d61f
 8004548:	fee5b660 	.word	0xfee5b660
 800454c:	0016e35f 	.word	0x0016e35f
 8004550:	feced300 	.word	0xfeced300
 8004554:	001b773f 	.word	0x001b773f
 8004558:	feb35bc0 	.word	0xfeb35bc0
 800455c:	002191bf 	.word	0x002191bf
 8004560:	0038751f 	.word	0x0038751f
 8004564:	fe5954e0 	.word	0xfe5954e0
 8004568:	00419cdf 	.word	0x00419cdf

0800456c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 800456c:	f890 2384 	ldrb.w	r2, [r0, #900]	; 0x384
 8004570:	2a01      	cmp	r2, #1
{
 8004572:	b510      	push	{r4, lr}
 8004574:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8004576:	d00b      	beq.n	8004590 <HAL_PCD_SetAddress+0x24>
 8004578:	2201      	movs	r2, #1
 800457a:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  hpcd->USB_Address = address;
 800457e:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  USB_SetDevAddress(hpcd->Instance, address);
 8004582:	6800      	ldr	r0, [r0, #0]
 8004584:	f002 fcbc 	bl	8006f00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8004588:	2000      	movs	r0, #0
 800458a:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800458e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8004590:	2002      	movs	r0, #2
}
 8004592:	bd10      	pop	{r4, pc}

08004594 <HAL_PCD_EP_Open>:
{
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	4604      	mov	r4, r0
  if ((ep_addr & 0x80) == 0x80)
 8004598:	b248      	sxtb	r0, r1
 800459a:	2800      	cmp	r0, #0
 800459c:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 80045a0:	f04f 051c 	mov.w	r5, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80045a4:	bfb5      	itete	lt
 80045a6:	fb05 4106 	mlalt	r1, r5, r6, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80045aa:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80045ae:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80045b0:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 80045b4:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7F;
 80045b6:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80045b8:	7048      	strb	r0, [r1, #1]
  ep->type = ep_type;
 80045ba:	70cb      	strb	r3, [r1, #3]
  __HAL_LOCK(hpcd);
 80045bc:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->maxpacket = ep_mps;
 80045c0:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd);
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d009      	beq.n	80045da <HAL_PCD_EP_Open+0x46>
 80045c6:	2301      	movs	r3, #1
 80045c8:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80045cc:	6820      	ldr	r0, [r4, #0]
 80045ce:	f002 fa94 	bl	8006afa <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045d2:	2000      	movs	r0, #0
 80045d4:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return ret;
 80045d8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80045da:	2002      	movs	r0, #2
}
 80045dc:	bd70      	pop	{r4, r5, r6, pc}

080045de <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 80045de:	b24b      	sxtb	r3, r1
 80045e0:	2b00      	cmp	r3, #0
{  
 80045e2:	b510      	push	{r4, lr}
 80045e4:	f04f 021c 	mov.w	r2, #28
 80045e8:	4604      	mov	r4, r0
 80045ea:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80045ee:	bfb5      	itete	lt
 80045f0:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80045f4:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80045f8:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80045fa:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 80045fe:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8004600:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8004602:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8004604:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
 8004608:	2b01      	cmp	r3, #1
 800460a:	d009      	beq.n	8004620 <HAL_PCD_EP_Close+0x42>
 800460c:	2301      	movs	r3, #1
 800460e:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8004612:	6820      	ldr	r0, [r4, #0]
 8004614:	f002 fab0 	bl	8006b78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8004618:	2000      	movs	r0, #0
 800461a:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800461e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8004620:	2002      	movs	r0, #2
}
 8004622:	bd10      	pop	{r4, pc}

08004624 <HAL_PCD_EP_Receive>:
{
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	4604      	mov	r4, r0
 8004628:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 800462c:	201c      	movs	r0, #28
 800462e:	fb00 4506 	mla	r5, r0, r6, r4
  ep->xfer_len = len;
 8004632:	f8c5 31f4 	str.w	r3, [r5, #500]	; 0x1f4
  ep->xfer_count = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	f8c5 31f8 	str.w	r3, [r5, #504]	; 0x1f8
  ep->is_in = 0;
 800463c:	f885 31e1 	strb.w	r3, [r5, #481]	; 0x1e1
  __HAL_LOCK(hpcd);
 8004640:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->xfer_buff = pBuf;  
 8004644:	f8c5 21ec 	str.w	r2, [r5, #492]	; 0x1ec
  __HAL_LOCK(hpcd);
 8004648:	2b01      	cmp	r3, #1
  ep->num = ep_addr & 0x7F;
 800464a:	f885 61e0 	strb.w	r6, [r5, #480]	; 0x1e0
  __HAL_LOCK(hpcd);
 800464e:	d011      	beq.n	8004674 <HAL_PCD_EP_Receive+0x50>
 8004650:	6922      	ldr	r2, [r4, #16]
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004652:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004654:	2301      	movs	r3, #1
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004656:	f505 71f0 	add.w	r1, r5, #480	; 0x1e0
  __HAL_LOCK(hpcd);
 800465a:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 800465e:	b2d2      	uxtb	r2, r2
  if ((ep_addr & 0x7F) == 0 )
 8004660:	b92e      	cbnz	r6, 800466e <HAL_PCD_EP_Receive+0x4a>
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8004662:	f002 fb6f 	bl	8006d44 <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 8004666:	2000      	movs	r0, #0
 8004668:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800466c:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 800466e:	f002 fab1 	bl	8006bd4 <USB_EPStartXfer>
 8004672:	e7f8      	b.n	8004666 <HAL_PCD_EP_Receive+0x42>
  __HAL_LOCK(hpcd);
 8004674:	2002      	movs	r0, #2
}
 8004676:	bd70      	pop	{r4, r5, r6, pc}

08004678 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8004678:	231c      	movs	r3, #28
 800467a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800467e:	fb03 0101 	mla	r1, r3, r1, r0
}
 8004682:	f8b1 01f8 	ldrh.w	r0, [r1, #504]	; 0x1f8
 8004686:	4770      	bx	lr

08004688 <HAL_PCD_EP_Transmit>:
{
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4604      	mov	r4, r0
 800468c:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 8004690:	201c      	movs	r0, #28
 8004692:	fb00 4506 	mla	r5, r0, r6, r4
 8004696:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 8004698:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_LOCK(hpcd);
 800469a:	f894 2384 	ldrb.w	r2, [r4, #900]	; 0x384
  ep->num = ep_addr & 0x7F;
 800469e:	f885 603c 	strb.w	r6, [r5, #60]	; 0x3c
  ep->xfer_count = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1;
 80046a6:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 80046a8:	429a      	cmp	r2, r3
  ep->is_in = 1;
 80046aa:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_LOCK(hpcd);
 80046ae:	d010      	beq.n	80046d2 <HAL_PCD_EP_Transmit+0x4a>
 80046b0:	6922      	ldr	r2, [r4, #16]
 80046b2:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80046b6:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	6820      	ldr	r0, [r4, #0]
  if ((ep_addr & 0x7F) == 0 )
 80046be:	b92e      	cbnz	r6, 80046cc <HAL_PCD_EP_Transmit+0x44>
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 80046c0:	f002 fb40 	bl	8006d44 <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 80046c4:	2000      	movs	r0, #0
 80046c6:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80046ca:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep,  hpcd->Init.dma_enable);
 80046cc:	f002 fa82 	bl	8006bd4 <USB_EPStartXfer>
 80046d0:	e7f8      	b.n	80046c4 <HAL_PCD_EP_Transmit+0x3c>
  __HAL_LOCK(hpcd);
 80046d2:	2002      	movs	r0, #2
}
 80046d4:	bd70      	pop	{r4, r5, r6, pc}

080046d6 <HAL_PCD_EP_SetStall>:
{
 80046d6:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 80046d8:	b24b      	sxtb	r3, r1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80046e0:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80046e4:	bfb5      	itete	lt
 80046e6:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80046ea:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80046ee:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 80046f0:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_stall = 1;
 80046f4:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80046f6:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80046f8:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1;
 80046fa:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80046fc:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80046fe:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8004700:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8004704:	4293      	cmp	r3, r2
{
 8004706:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004708:	d00f      	beq.n	800472a <HAL_PCD_EP_SetStall+0x54>
 800470a:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  USB_EPSetStall(hpcd->Instance , ep);
 800470e:	6800      	ldr	r0, [r0, #0]
 8004710:	f002 fb9d 	bl	8006e4e <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8004714:	b92d      	cbnz	r5, 8004722 <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance,  hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004716:	f504 7262 	add.w	r2, r4, #904	; 0x388
 800471a:	7c21      	ldrb	r1, [r4, #16]
 800471c:	6820      	ldr	r0, [r4, #0]
 800471e:	f002 fc64 	bl	8006fea <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8004722:	2000      	movs	r0, #0
 8004724:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8004728:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800472a:	2002      	movs	r0, #2
}
 800472c:	bd38      	pop	{r3, r4, r5, pc}

0800472e <HAL_PCD_EP_ClrStall>:
{
 800472e:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8004730:	b24b      	sxtb	r3, r1
 8004732:	2b00      	cmp	r3, #0
{
 8004734:	4605      	mov	r5, r0
 8004736:	f04f 021c 	mov.w	r2, #28
 800473a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800473e:	bfb5      	itete	lt
 8004740:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 8004744:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004748:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 800474a:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800474e:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 8004750:	2400      	movs	r4, #0
 8004752:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8004754:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8004756:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8004758:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
 800475c:	2b01      	cmp	r3, #1
 800475e:	d009      	beq.n	8004774 <HAL_PCD_EP_ClrStall+0x46>
 8004760:	2301      	movs	r3, #1
 8004762:	f885 3384 	strb.w	r3, [r5, #900]	; 0x384
  USB_EPClearStall(hpcd->Instance , ep);
 8004766:	6828      	ldr	r0, [r5, #0]
 8004768:	f002 fb90 	bl	8006e8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 800476c:	f885 4384 	strb.w	r4, [r5, #900]	; 0x384
  return HAL_OK;
 8004770:	4620      	mov	r0, r4
 8004772:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8004774:	2002      	movs	r0, #2
}
 8004776:	bd38      	pop	{r3, r4, r5, pc}

08004778 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd); 
 8004778:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 800477c:	2b01      	cmp	r3, #1
{
 800477e:	b510      	push	{r4, lr}
 8004780:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8004782:	d011      	beq.n	80047a8 <HAL_PCD_EP_Flush+0x30>
 8004784:	2301      	movs	r3, #1
 8004786:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  if ((ep_addr & 0x80) == 0x80)
 800478a:	060b      	lsls	r3, r1, #24
 800478c:	d508      	bpl.n	80047a0 <HAL_PCD_EP_Flush+0x28>
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 800478e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004792:	6800      	ldr	r0, [r0, #0]
 8004794:	f002 f988 	bl	8006aa8 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd); 
 8004798:	2000      	movs	r0, #0
 800479a:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800479e:	bd10      	pop	{r4, pc}
    USB_FlushRxFifo(hpcd->Instance);
 80047a0:	6800      	ldr	r0, [r0, #0]
 80047a2:	f002 f993 	bl	8006acc <USB_FlushRxFifo>
 80047a6:	e7f7      	b.n	8004798 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd); 
 80047a8:	2002      	movs	r0, #2
}
 80047aa:	bd10      	pop	{r4, pc}

080047ac <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80047ac:	6800      	ldr	r0, [r0, #0]
{
 80047ae:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80047b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 80047b2:	b921      	cbnz	r1, 80047be <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (size << 16) | Tx_Offset;
 80047b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047b8:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
  }
  
  return HAL_OK;
}
 80047ba:	2000      	movs	r0, #0
 80047bc:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80047be:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (index = 0; index < (fifo - 1); index++)
 80047c0:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80047c2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (index = 0; index < (fifo - 1); index++)
 80047c6:	1e4e      	subs	r6, r1, #1
 80047c8:	b2ec      	uxtb	r4, r5
 80047ca:	42b4      	cmp	r4, r6
 80047cc:	f105 0501 	add.w	r5, r5, #1
 80047d0:	db06      	blt.n	80047e0 <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
 80047d2:	313f      	adds	r1, #63	; 0x3f
 80047d4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80047d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047dc:	6043      	str	r3, [r0, #4]
 80047de:	e7ec      	b.n	80047ba <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[index] >> 16);
 80047e0:	3440      	adds	r4, #64	; 0x40
 80047e2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80047e6:	6864      	ldr	r4, [r4, #4]
 80047e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80047ec:	e7ec      	b.n	80047c8 <HAL_PCDEx_SetTxFiFo+0x1c>

080047ee <HAL_PCDEx_SetRxFiFo>:
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80047ee:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 80047f0:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80047f2:	6259      	str	r1, [r3, #36]	; 0x24
}
 80047f4:	4770      	bx	lr

080047f6 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80047f6:	6802      	ldr	r2, [r0, #0]
{
 80047f8:	4603      	mov	r3, r0
  
  hpcd->lpm_active = ENABLE;
 80047fa:	2101      	movs	r1, #1
 80047fc:	f8c0 13c0 	str.w	r1, [r0, #960]	; 0x3c0
  hpcd->LPM_State = LPM_L0;
 8004800:	2000      	movs	r0, #0
 8004802:	f883 03b8 	strb.w	r0, [r3, #952]	; 0x3b8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004806:	6993      	ldr	r3, [r2, #24]
 8004808:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800480c:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800480e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004814:	f043 0303 	orr.w	r3, r3, #3
 8004818:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;  
}
 800481a:	4770      	bx	lr

0800481c <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800481c:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = ENABLE; 
 800481e:	2301      	movs	r3, #1
 8004820:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8004824:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800482a:	6393      	str	r3, [r2, #56]	; 0x38
  
  return HAL_OK;  
}
 800482c:	2000      	movs	r0, #0
 800482e:	4770      	bx	lr

08004830 <HAL_PCDEx_LPM_Callback>:
 8004830:	4770      	bx	lr
	...

08004834 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004834:	4b02      	ldr	r3, [pc, #8]	; (8004840 <HAL_PWREx_GetVoltageRange+0xc>)
 8004836:	6818      	ldr	r0, [r3, #0]
}
 8004838:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40007000 	.word	0x40007000

08004844 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004844:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004846:	4d1e      	ldr	r5, [pc, #120]	; (80048c0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8004848:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800484a:	00da      	lsls	r2, r3, #3
{
 800484c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800484e:	d518      	bpl.n	8004882 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004850:	f7ff fff0 	bl	8004834 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004854:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004858:	d123      	bne.n	80048a2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800485a:	2c80      	cmp	r4, #128	; 0x80
 800485c:	d929      	bls.n	80048b2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800485e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004860:	bf8c      	ite	hi
 8004862:	2002      	movhi	r0, #2
 8004864:	2001      	movls	r0, #1
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8004866:	4a17      	ldr	r2, [pc, #92]	; (80048c4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8004868:	6813      	ldr	r3, [r2, #0]
 800486a:	f023 0307 	bic.w	r3, r3, #7
 800486e:	4303      	orrs	r3, r0
 8004870:	6013      	str	r3, [r2, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004872:	6813      	ldr	r3, [r2, #0]
 8004874:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8004878:	1a18      	subs	r0, r3, r0
 800487a:	bf18      	it	ne
 800487c:	2001      	movne	r0, #1
 800487e:	b003      	add	sp, #12
 8004880:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004882:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004888:	65ab      	str	r3, [r5, #88]	; 0x58
 800488a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800488c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004890:	9301      	str	r3, [sp, #4]
 8004892:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8004894:	f7ff ffce 	bl	8004834 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8004898:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800489a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800489e:	65ab      	str	r3, [r5, #88]	; 0x58
 80048a0:	e7d8      	b.n	8004854 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80048a2:	2c80      	cmp	r4, #128	; 0x80
 80048a4:	d807      	bhi.n	80048b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80048a6:	d008      	beq.n	80048ba <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7) 
 80048a8:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80048ac:	4258      	negs	r0, r3
 80048ae:	4158      	adcs	r0, r3
 80048b0:	e7d9      	b.n	8004866 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048b2:	2000      	movs	r0, #0
 80048b4:	e7d7      	b.n	8004866 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80048b6:	2003      	movs	r0, #3
 80048b8:	e7d5      	b.n	8004866 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80048ba:	2002      	movs	r0, #2
 80048bc:	e7d3      	b.n	8004866 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80048be:	bf00      	nop
 80048c0:	40021000 	.word	0x40021000
 80048c4:	40022000 	.word	0x40022000

080048c8 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80048c8:	4b46      	ldr	r3, [pc, #280]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x11c>)
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	f012 0f0c 	tst.w	r2, #12
{
 80048d0:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80048d2:	d009      	beq.n	80048e8 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80048da:	2a0c      	cmp	r2, #12
 80048dc:	d148      	bne.n	8004970 <HAL_RCC_GetSysClockFreq+0xa8>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	f002 0203 	and.w	r2, r2, #3
 80048e4:	2a01      	cmp	r2, #1
 80048e6:	d143      	bne.n	8004970 <HAL_RCC_GetSysClockFreq+0xa8>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	0712      	lsls	r2, r2, #28
 80048ec:	d437      	bmi.n	800495e <HAL_RCC_GetSysClockFreq+0x96>
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 80048ee:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f2:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80048f6:	fa91 f1a1 	rbit	r1, r1
 80048fa:	fab1 f181 	clz	r1, r1
 80048fe:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8004902:	40ca      	lsrs	r2, r1
    msirange = MSIRangeTable[msirange];
 8004904:	4938      	ldr	r1, [pc, #224]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x120>)
 8004906:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800490a:	689a      	ldr	r2, [r3, #8]
      sysclockfreq = msirange;
 800490c:	f012 0f0c 	tst.w	r2, #12
 8004910:	bf0c      	ite	eq
 8004912:	4620      	moveq	r0, r4
 8004914:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	f002 020c 	and.w	r2, r2, #12
 800491c:	2a0c      	cmp	r2, #12
 800491e:	d154      	bne.n	80049ca <HAL_RCC_GetSysClockFreq+0x102>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004920:	68da      	ldr	r2, [r3, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8004922:	68d8      	ldr	r0, [r3, #12]
 8004924:	2170      	movs	r1, #112	; 0x70
 8004926:	fa91 f1a1 	rbit	r1, r1
 800492a:	fab1 f181 	clz	r1, r1
 800492e:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8004932:	40c8      	lsrs	r0, r1
 8004934:	1c41      	adds	r1, r0, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004936:	f002 0003 	and.w	r0, r2, #3
    switch (pllsource)
 800493a:	2802      	cmp	r0, #2
 800493c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8004940:	d028      	beq.n	8004994 <HAL_RCC_GetSysClockFreq+0xcc>
 8004942:	2803      	cmp	r0, #3
 8004944:	d042      	beq.n	80049cc <HAL_RCC_GetSysClockFreq+0x104>
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8004946:	68d8      	ldr	r0, [r3, #12]
 8004948:	fa92 f2a2 	rbit	r2, r2
 800494c:	fab2 f282 	clz	r2, r2
 8004950:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 8004954:	40d0      	lsrs	r0, r2
 8004956:	fbb4 f1f1 	udiv	r1, r4, r1
 800495a:	4348      	muls	r0, r1
      break;
 800495c:	e027      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0xe6>
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	21f0      	movs	r1, #240	; 0xf0
 8004962:	fa91 f1a1 	rbit	r1, r1
 8004966:	fab1 f181 	clz	r1, r1
 800496a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800496e:	e7c8      	b.n	8004902 <HAL_RCC_GetSysClockFreq+0x3a>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	f002 020c 	and.w	r2, r2, #12
 8004976:	2a04      	cmp	r2, #4
 8004978:	d007      	beq.n	800498a <HAL_RCC_GetSysClockFreq+0xc2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	f002 020c 	and.w	r2, r2, #12
 8004980:	2a08      	cmp	r2, #8
 8004982:	d104      	bne.n	800498e <HAL_RCC_GetSysClockFreq+0xc6>
    sysclockfreq = HSE_VALUE;
 8004984:	4819      	ldr	r0, [pc, #100]	; (80049ec <HAL_RCC_GetSysClockFreq+0x124>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8004986:	2400      	movs	r4, #0
 8004988:	e7c5      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 800498a:	4819      	ldr	r0, [pc, #100]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x128>)
 800498c:	e7fb      	b.n	8004986 <HAL_RCC_GetSysClockFreq+0xbe>
  uint32_t sysclockfreq = 0U;
 800498e:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8004990:	4604      	mov	r4, r0
 8004992:	e7c0      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8004994:	68d8      	ldr	r0, [r3, #12]
 8004996:	fa92 f2a2 	rbit	r2, r2
 800499a:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 800499e:	fab2 f282 	clz	r2, r2
 80049a2:	fa20 f202 	lsr.w	r2, r0, r2
 80049a6:	4812      	ldr	r0, [pc, #72]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x128>)
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80049a8:	fbb0 f0f1 	udiv	r0, r0, r1
 80049ac:	4350      	muls	r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80049b4:	fa92 f2a2 	rbit	r2, r2
 80049b8:	fab2 f282 	clz	r2, r2
 80049bc:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80049c0:	40d3      	lsrs	r3, r2
 80049c2:	3301      	adds	r3, #1
 80049c4:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80049c6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80049ca:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80049cc:	68d8      	ldr	r0, [r3, #12]
 80049ce:	fa92 f2a2 	rbit	r2, r2
 80049d2:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 80049d6:	fab2 f282 	clz	r2, r2
 80049da:	fa20 f202 	lsr.w	r2, r0, r2
 80049de:	4803      	ldr	r0, [pc, #12]	; (80049ec <HAL_RCC_GetSysClockFreq+0x124>)
 80049e0:	e7e2      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0xe0>
 80049e2:	bf00      	nop
 80049e4:	40021000 	.word	0x40021000
 80049e8:	0800eb38 	.word	0x0800eb38
 80049ec:	007a1200 	.word	0x007a1200
 80049f0:	00f42400 	.word	0x00f42400

080049f4 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049f4:	6803      	ldr	r3, [r0, #0]
{
 80049f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80049fa:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049fc:	06d8      	lsls	r0, r3, #27
 80049fe:	d541      	bpl.n	8004a84 <HAL_RCC_OscConfig+0x90>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8004a00:	4ca5      	ldr	r4, [pc, #660]	; (8004c98 <HAL_RCC_OscConfig+0x2a4>)
 8004a02:	68a3      	ldr	r3, [r4, #8]
 8004a04:	f013 0f0c 	tst.w	r3, #12
 8004a08:	d166      	bne.n	8004ad8 <HAL_RCC_OscConfig+0xe4>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	0799      	lsls	r1, r3, #30
 8004a0e:	d505      	bpl.n	8004a1c <HAL_RCC_OscConfig+0x28>
 8004a10:	69ab      	ldr	r3, [r5, #24]
 8004a12:	b91b      	cbnz	r3, 8004a1c <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 8004a14:	2001      	movs	r0, #1
}
 8004a16:	b002      	add	sp, #8
 8004a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	6a28      	ldr	r0, [r5, #32]
 8004a20:	071a      	lsls	r2, r3, #28
 8004a22:	bf56      	itet	pl
 8004a24:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8004a28:	6823      	ldrmi	r3, [r4, #0]
 8004a2a:	091b      	lsrpl	r3, r3, #4
 8004a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a30:	4283      	cmp	r3, r0
 8004a32:	d23c      	bcs.n	8004aae <HAL_RCC_OscConfig+0xba>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a34:	f7ff ff06 	bl	8004844 <RCC_SetFlashLatencyFromMSIRange>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	d1eb      	bne.n	8004a14 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	f043 0308 	orr.w	r3, r3, #8
 8004a42:	6023      	str	r3, [r4, #0]
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	6a2a      	ldr	r2, [r5, #32]
 8004a48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a50:	6863      	ldr	r3, [r4, #4]
 8004a52:	69ea      	ldr	r2, [r5, #28]
 8004a54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a5c:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8004a5e:	f7ff ff33 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8004a62:	68a3      	ldr	r3, [r4, #8]
 8004a64:	22f0      	movs	r2, #240	; 0xf0
 8004a66:	fa92 f2a2 	rbit	r2, r2
 8004a6a:	fab2 f282 	clz	r2, r2
 8004a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a72:	40d3      	lsrs	r3, r2
 8004a74:	4a89      	ldr	r2, [pc, #548]	; (8004c9c <HAL_RCC_OscConfig+0x2a8>)
 8004a76:	5cd3      	ldrb	r3, [r2, r3]
 8004a78:	40d8      	lsrs	r0, r3
 8004a7a:	4b89      	ldr	r3, [pc, #548]	; (8004ca0 <HAL_RCC_OscConfig+0x2ac>)
 8004a7c:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8004a7e:	2000      	movs	r0, #0
 8004a80:	f7fe feb0 	bl	80037e4 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	07de      	lsls	r6, r3, #31
 8004a88:	d45b      	bmi.n	8004b42 <HAL_RCC_OscConfig+0x14e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a8a:	682b      	ldr	r3, [r5, #0]
 8004a8c:	079c      	lsls	r4, r3, #30
 8004a8e:	f100 80a3 	bmi.w	8004bd8 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a92:	682b      	ldr	r3, [r5, #0]
 8004a94:	0719      	lsls	r1, r3, #28
 8004a96:	f100 80e7 	bmi.w	8004c68 <HAL_RCC_OscConfig+0x274>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a9a:	682b      	ldr	r3, [r5, #0]
 8004a9c:	075a      	lsls	r2, r3, #29
 8004a9e:	f100 8115 	bmi.w	8004ccc <HAL_RCC_OscConfig+0x2d8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004aa2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8004aa4:	2a00      	cmp	r2, #0
 8004aa6:	f040 817c 	bne.w	8004da2 <HAL_RCC_OscConfig+0x3ae>
  return HAL_OK;
 8004aaa:	2000      	movs	r0, #0
 8004aac:	e7b3      	b.n	8004a16 <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	f043 0308 	orr.w	r3, r3, #8
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004abc:	4303      	orrs	r3, r0
 8004abe:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ac0:	6863      	ldr	r3, [r4, #4]
 8004ac2:	69ea      	ldr	r2, [r5, #28]
 8004ac4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ac8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004acc:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ace:	f7ff feb9 	bl	8004844 <RCC_SetFlashLatencyFromMSIRange>
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	d0c3      	beq.n	8004a5e <HAL_RCC_OscConfig+0x6a>
 8004ad6:	e79d      	b.n	8004a14 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ad8:	69ab      	ldr	r3, [r5, #24]
 8004ada:	b313      	cbz	r3, 8004b22 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_ENABLE();
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	f043 0301 	orr.w	r3, r3, #1
 8004ae2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004ae4:	f7fe fea6 	bl	8003834 <HAL_GetTick>
 8004ae8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	079b      	lsls	r3, r3, #30
 8004aee:	d511      	bpl.n	8004b14 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	f043 0308 	orr.w	r3, r3, #8
 8004af6:	6023      	str	r3, [r4, #0]
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	6a2a      	ldr	r2, [r5, #32]
 8004afc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b00:	4313      	orrs	r3, r2
 8004b02:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b04:	6863      	ldr	r3, [r4, #4]
 8004b06:	69ea      	ldr	r2, [r5, #28]
 8004b08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b10:	6063      	str	r3, [r4, #4]
 8004b12:	e7b7      	b.n	8004a84 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b14:	f7fe fe8e 	bl	8003834 <HAL_GetTick>
 8004b18:	1b80      	subs	r0, r0, r6
 8004b1a:	2802      	cmp	r0, #2
 8004b1c:	d9e5      	bls.n	8004aea <HAL_RCC_OscConfig+0xf6>
            return HAL_TIMEOUT;
 8004b1e:	2003      	movs	r0, #3
 8004b20:	e779      	b.n	8004a16 <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	f023 0301 	bic.w	r3, r3, #1
 8004b28:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004b2a:	f7fe fe83 	bl	8003834 <HAL_GetTick>
 8004b2e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	079f      	lsls	r7, r3, #30
 8004b34:	d5a6      	bpl.n	8004a84 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b36:	f7fe fe7d 	bl	8003834 <HAL_GetTick>
 8004b3a:	1b80      	subs	r0, r0, r6
 8004b3c:	2802      	cmp	r0, #2
 8004b3e:	d9f7      	bls.n	8004b30 <HAL_RCC_OscConfig+0x13c>
 8004b40:	e7ed      	b.n	8004b1e <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8004b42:	4c55      	ldr	r4, [pc, #340]	; (8004c98 <HAL_RCC_OscConfig+0x2a4>)
 8004b44:	68a3      	ldr	r3, [r4, #8]
 8004b46:	f003 030c 	and.w	r3, r3, #12
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d009      	beq.n	8004b62 <HAL_RCC_OscConfig+0x16e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b4e:	68a3      	ldr	r3, [r4, #8]
 8004b50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8004b54:	2b0c      	cmp	r3, #12
 8004b56:	d10b      	bne.n	8004b70 <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b58:	68e3      	ldr	r3, [r4, #12]
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	d106      	bne.n	8004b70 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	0398      	lsls	r0, r3, #14
 8004b66:	d590      	bpl.n	8004a8a <HAL_RCC_OscConfig+0x96>
 8004b68:	686b      	ldr	r3, [r5, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d18d      	bne.n	8004a8a <HAL_RCC_OscConfig+0x96>
 8004b6e:	e751      	b.n	8004a14 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b70:	686b      	ldr	r3, [r5, #4]
 8004b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b76:	d110      	bne.n	8004b9a <HAL_RCC_OscConfig+0x1a6>
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004b80:	f7fe fe58 	bl	8003834 <HAL_GetTick>
 8004b84:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	0399      	lsls	r1, r3, #14
 8004b8a:	f53f af7e 	bmi.w	8004a8a <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b8e:	f7fe fe51 	bl	8003834 <HAL_GetTick>
 8004b92:	1b80      	subs	r0, r0, r6
 8004b94:	2864      	cmp	r0, #100	; 0x64
 8004b96:	d9f6      	bls.n	8004b86 <HAL_RCC_OscConfig+0x192>
 8004b98:	e7c1      	b.n	8004b1e <HAL_RCC_OscConfig+0x12a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b9e:	d104      	bne.n	8004baa <HAL_RCC_OscConfig+0x1b6>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ba6:	6023      	str	r3, [r4, #0]
 8004ba8:	e7e6      	b.n	8004b78 <HAL_RCC_OscConfig+0x184>
 8004baa:	6822      	ldr	r2, [r4, #0]
 8004bac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004bb0:	6022      	str	r2, [r4, #0]
 8004bb2:	6822      	ldr	r2, [r4, #0]
 8004bb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bb8:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1e0      	bne.n	8004b80 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8004bbe:	f7fe fe39 	bl	8003834 <HAL_GetTick>
 8004bc2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	039a      	lsls	r2, r3, #14
 8004bc8:	f57f af5f 	bpl.w	8004a8a <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bcc:	f7fe fe32 	bl	8003834 <HAL_GetTick>
 8004bd0:	1b80      	subs	r0, r0, r6
 8004bd2:	2864      	cmp	r0, #100	; 0x64
 8004bd4:	d9f6      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x1d0>
 8004bd6:	e7a2      	b.n	8004b1e <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8004bd8:	4c2f      	ldr	r4, [pc, #188]	; (8004c98 <HAL_RCC_OscConfig+0x2a4>)
 8004bda:	68a3      	ldr	r3, [r4, #8]
 8004bdc:	f003 030c 	and.w	r3, r3, #12
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d009      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x204>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004be4:	68a3      	ldr	r3, [r4, #8]
 8004be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8004bea:	2b0c      	cmp	r3, #12
 8004bec:	d119      	bne.n	8004c22 <HAL_RCC_OscConfig+0x22e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004bee:	68e3      	ldr	r3, [r4, #12]
 8004bf0:	f003 0303 	and.w	r3, r3, #3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d114      	bne.n	8004c22 <HAL_RCC_OscConfig+0x22e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	055b      	lsls	r3, r3, #21
 8004bfc:	d503      	bpl.n	8004c06 <HAL_RCC_OscConfig+0x212>
 8004bfe:	68eb      	ldr	r3, [r5, #12]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f43f af07 	beq.w	8004a14 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c06:	6861      	ldr	r1, [r4, #4]
 8004c08:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8004c0c:	fa93 f3a3 	rbit	r3, r3
 8004c10:	fab3 f283 	clz	r2, r3
 8004c14:	692b      	ldr	r3, [r5, #16]
 8004c16:	4093      	lsls	r3, r2
 8004c18:	f021 52f8 	bic.w	r2, r1, #520093696	; 0x1f000000
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	6063      	str	r3, [r4, #4]
 8004c20:	e737      	b.n	8004a92 <HAL_RCC_OscConfig+0x9e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c22:	68eb      	ldr	r3, [r5, #12]
 8004c24:	b17b      	cbz	r3, 8004c46 <HAL_RCC_OscConfig+0x252>
        __HAL_RCC_HSI_ENABLE();
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c2c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004c2e:	f7fe fe01 	bl	8003834 <HAL_GetTick>
 8004c32:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	055f      	lsls	r7, r3, #21
 8004c38:	d4e5      	bmi.n	8004c06 <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c3a:	f7fe fdfb 	bl	8003834 <HAL_GetTick>
 8004c3e:	1b80      	subs	r0, r0, r6
 8004c40:	2802      	cmp	r0, #2
 8004c42:	d9f7      	bls.n	8004c34 <HAL_RCC_OscConfig+0x240>
 8004c44:	e76b      	b.n	8004b1e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_DISABLE();
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c4c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004c4e:	f7fe fdf1 	bl	8003834 <HAL_GetTick>
 8004c52:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	0558      	lsls	r0, r3, #21
 8004c58:	f57f af1b 	bpl.w	8004a92 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c5c:	f7fe fdea 	bl	8003834 <HAL_GetTick>
 8004c60:	1b80      	subs	r0, r0, r6
 8004c62:	2802      	cmp	r0, #2
 8004c64:	d9f6      	bls.n	8004c54 <HAL_RCC_OscConfig+0x260>
 8004c66:	e75a      	b.n	8004b1e <HAL_RCC_OscConfig+0x12a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c68:	696b      	ldr	r3, [r5, #20]
 8004c6a:	4c0b      	ldr	r4, [pc, #44]	; (8004c98 <HAL_RCC_OscConfig+0x2a4>)
 8004c6c:	b1d3      	cbz	r3, 8004ca4 <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_LSI_ENABLE();
 8004c6e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004c7a:	f7fe fddb 	bl	8003834 <HAL_GetTick>
 8004c7e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8004c80:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004c84:	079b      	lsls	r3, r3, #30
 8004c86:	f53f af08 	bmi.w	8004a9a <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c8a:	f7fe fdd3 	bl	8003834 <HAL_GetTick>
 8004c8e:	1b80      	subs	r0, r0, r6
 8004c90:	2802      	cmp	r0, #2
 8004c92:	d9f5      	bls.n	8004c80 <HAL_RCC_OscConfig+0x28c>
 8004c94:	e743      	b.n	8004b1e <HAL_RCC_OscConfig+0x12a>
 8004c96:	bf00      	nop
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	0800eb1f 	.word	0x0800eb1f
 8004ca0:	200000f8 	.word	0x200000f8
      __HAL_RCC_LSI_DISABLE();
 8004ca4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004cb0:	f7fe fdc0 	bl	8003834 <HAL_GetTick>
 8004cb4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8004cb6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004cba:	079f      	lsls	r7, r3, #30
 8004cbc:	f57f aeed 	bpl.w	8004a9a <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cc0:	f7fe fdb8 	bl	8003834 <HAL_GetTick>
 8004cc4:	1b80      	subs	r0, r0, r6
 8004cc6:	2802      	cmp	r0, #2
 8004cc8:	d9f5      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x2c2>
 8004cca:	e728      	b.n	8004b1e <HAL_RCC_OscConfig+0x12a>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ccc:	4c66      	ldr	r4, [pc, #408]	; (8004e68 <HAL_RCC_OscConfig+0x474>)
 8004cce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cd0:	00de      	lsls	r6, r3, #3
 8004cd2:	d427      	bmi.n	8004d24 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cda:	65a3      	str	r3, [r4, #88]	; 0x58
 8004cdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce2:	9301      	str	r3, [sp, #4]
 8004ce4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004ce6:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ce8:	4e60      	ldr	r6, [pc, #384]	; (8004e6c <HAL_RCC_OscConfig+0x478>)
 8004cea:	6833      	ldr	r3, [r6, #0]
 8004cec:	05d8      	lsls	r0, r3, #23
 8004cee:	d51b      	bpl.n	8004d28 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cf0:	68ab      	ldr	r3, [r5, #8]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d129      	bne.n	8004d4a <HAL_RCC_OscConfig+0x356>
 8004cf6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004d02:	f7fe fd97 	bl	8003834 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d06:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004d0a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8004d0c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004d10:	079a      	lsls	r2, r3, #30
 8004d12:	d540      	bpl.n	8004d96 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8004d14:	2f00      	cmp	r7, #0
 8004d16:	f43f aec4 	beq.w	8004aa2 <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d20:	65a3      	str	r3, [r4, #88]	; 0x58
 8004d22:	e6be      	b.n	8004aa2 <HAL_RCC_OscConfig+0xae>
    FlagStatus       pwrclkchanged = RESET;
 8004d24:	2700      	movs	r7, #0
 8004d26:	e7df      	b.n	8004ce8 <HAL_RCC_OscConfig+0x2f4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d28:	6833      	ldr	r3, [r6, #0]
 8004d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004d30:	f7fe fd80 	bl	8003834 <HAL_GetTick>
 8004d34:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d36:	6833      	ldr	r3, [r6, #0]
 8004d38:	05d9      	lsls	r1, r3, #23
 8004d3a:	d4d9      	bmi.n	8004cf0 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d3c:	f7fe fd7a 	bl	8003834 <HAL_GetTick>
 8004d40:	eba0 0008 	sub.w	r0, r0, r8
 8004d44:	2802      	cmp	r0, #2
 8004d46:	d9f6      	bls.n	8004d36 <HAL_RCC_OscConfig+0x342>
 8004d48:	e6e9      	b.n	8004b1e <HAL_RCC_OscConfig+0x12a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d4a:	2b05      	cmp	r3, #5
 8004d4c:	d106      	bne.n	8004d5c <HAL_RCC_OscConfig+0x368>
 8004d4e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004d52:	f043 0304 	orr.w	r3, r3, #4
 8004d56:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8004d5a:	e7cc      	b.n	8004cf6 <HAL_RCC_OscConfig+0x302>
 8004d5c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004d60:	f022 0201 	bic.w	r2, r2, #1
 8004d64:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8004d68:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004d6c:	f022 0204 	bic.w	r2, r2, #4
 8004d70:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1c4      	bne.n	8004d02 <HAL_RCC_OscConfig+0x30e>
      tickstart = HAL_GetTick();
 8004d78:	f7fe fd5c 	bl	8003834 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004d80:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8004d82:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004d86:	079b      	lsls	r3, r3, #30
 8004d88:	d5c4      	bpl.n	8004d14 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8a:	f7fe fd53 	bl	8003834 <HAL_GetTick>
 8004d8e:	1b80      	subs	r0, r0, r6
 8004d90:	4540      	cmp	r0, r8
 8004d92:	d9f6      	bls.n	8004d82 <HAL_RCC_OscConfig+0x38e>
 8004d94:	e6c3      	b.n	8004b1e <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d96:	f7fe fd4d 	bl	8003834 <HAL_GetTick>
 8004d9a:	1b80      	subs	r0, r0, r6
 8004d9c:	4540      	cmp	r0, r8
 8004d9e:	d9b5      	bls.n	8004d0c <HAL_RCC_OscConfig+0x318>
 8004da0:	e6bd      	b.n	8004b1e <HAL_RCC_OscConfig+0x12a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004da2:	4c31      	ldr	r4, [pc, #196]	; (8004e68 <HAL_RCC_OscConfig+0x474>)
 8004da4:	68a3      	ldr	r3, [r4, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b0c      	cmp	r3, #12
 8004dac:	f43f ae32 	beq.w	8004a14 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8004db0:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004db2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8004db4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004db8:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dba:	d137      	bne.n	8004e2c <HAL_RCC_OscConfig+0x438>
        tickstart = HAL_GetTick();
 8004dbc:	f7fe fd3a 	bl	8003834 <HAL_GetTick>
 8004dc0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	019f      	lsls	r7, r3, #6
 8004dc6:	d42b      	bmi.n	8004e20 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dc8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004dca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004dcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004dd0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004dd2:	3a01      	subs	r2, #1
 8004dd4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004dd8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004dda:	0912      	lsrs	r2, r2, #4
 8004ddc:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8004de0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8004de2:	0852      	lsrs	r2, r2, #1
 8004de4:	3a01      	subs	r2, #1
 8004de6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004dea:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004dec:	0852      	lsrs	r2, r2, #1
 8004dee:	3a01      	subs	r2, #1
 8004df0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004df4:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dfc:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dfe:	68e3      	ldr	r3, [r4, #12]
 8004e00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e04:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8004e06:	f7fe fd15 	bl	8003834 <HAL_GetTick>
 8004e0a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	0198      	lsls	r0, r3, #6
 8004e10:	f53f ae4b 	bmi.w	8004aaa <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e14:	f7fe fd0e 	bl	8003834 <HAL_GetTick>
 8004e18:	1b40      	subs	r0, r0, r5
 8004e1a:	2802      	cmp	r0, #2
 8004e1c:	d9f6      	bls.n	8004e0c <HAL_RCC_OscConfig+0x418>
 8004e1e:	e67e      	b.n	8004b1e <HAL_RCC_OscConfig+0x12a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e20:	f7fe fd08 	bl	8003834 <HAL_GetTick>
 8004e24:	1b80      	subs	r0, r0, r6
 8004e26:	2802      	cmp	r0, #2
 8004e28:	d9cb      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x3ce>
 8004e2a:	e678      	b.n	8004b1e <HAL_RCC_OscConfig+0x12a>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	0119      	lsls	r1, r3, #4
 8004e30:	d406      	bmi.n	8004e40 <HAL_RCC_OscConfig+0x44c>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8004e32:	6823      	ldr	r3, [r4, #0]
           && 
 8004e34:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e36:	bf5e      	ittt	pl
 8004e38:	68e3      	ldrpl	r3, [r4, #12]
 8004e3a:	f023 0303 	bicpl.w	r3, r3, #3
 8004e3e:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e40:	68e3      	ldr	r3, [r4, #12]
 8004e42:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e4a:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8004e4c:	f7fe fcf2 	bl	8003834 <HAL_GetTick>
 8004e50:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	019b      	lsls	r3, r3, #6
 8004e56:	f57f ae28 	bpl.w	8004aaa <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5a:	f7fe fceb 	bl	8003834 <HAL_GetTick>
 8004e5e:	1b40      	subs	r0, r0, r5
 8004e60:	2802      	cmp	r0, #2
 8004e62:	d9f6      	bls.n	8004e52 <HAL_RCC_OscConfig+0x45e>
 8004e64:	e65b      	b.n	8004b1e <HAL_RCC_OscConfig+0x12a>
 8004e66:	bf00      	nop
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	40007000 	.word	0x40007000

08004e70 <HAL_RCC_GetHCLKFreq>:
}
 8004e70:	4b01      	ldr	r3, [pc, #4]	; (8004e78 <HAL_RCC_GetHCLKFreq+0x8>)
 8004e72:	6818      	ldr	r0, [r3, #0]
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	200000f8 	.word	0x200000f8

08004e7c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8004e7c:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e7e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	fa92 f2a2 	rbit	r2, r2
 8004e88:	fab2 f282 	clz	r2, r2
 8004e8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e90:	40d3      	lsrs	r3, r2
 8004e92:	4a04      	ldr	r2, [pc, #16]	; (8004ea4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e94:	5cd3      	ldrb	r3, [r2, r3]
 8004e96:	4a04      	ldr	r2, [pc, #16]	; (8004ea8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8004e98:	6810      	ldr	r0, [r2, #0]
}
 8004e9a:	40d8      	lsrs	r0, r3
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	0800eb2f 	.word	0x0800eb2f
 8004ea8:	200000f8 	.word	0x200000f8

08004eac <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8004eac:	4b08      	ldr	r3, [pc, #32]	; (8004ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	fa92 f2a2 	rbit	r2, r2
 8004eb8:	fab2 f282 	clz	r2, r2
 8004ebc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004ec0:	40d3      	lsrs	r3, r2
 8004ec2:	4a04      	ldr	r2, [pc, #16]	; (8004ed4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ec4:	5cd3      	ldrb	r3, [r2, r3]
 8004ec6:	4a04      	ldr	r2, [pc, #16]	; (8004ed8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8004ec8:	6810      	ldr	r0, [r2, #0]
}
 8004eca:	40d8      	lsrs	r0, r3
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	0800eb2f 	.word	0x0800eb2f
 8004ed8:	200000f8 	.word	0x200000f8

08004edc <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004edc:	4a02      	ldr	r2, [pc, #8]	; (8004ee8 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8004ede:	6813      	ldr	r3, [r2, #0]
 8004ee0:	f043 0304 	orr.w	r3, r3, #4
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	4770      	bx	lr
 8004ee8:	40021000 	.word	0x40021000

08004eec <SD_CmdResp2Error>:
  */
static HAL_SD_ErrorTypedef SD_CmdResp2Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8004eec:	6803      	ldr	r3, [r0, #0]
 8004eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef0:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004ef4:	d0fb      	beq.n	8004eee <SD_CmdResp2Error+0x2>
  {
  }
    
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8004ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef8:	0752      	lsls	r2, r2, #29
 8004efa:	d503      	bpl.n	8004f04 <SD_CmdResp2Error+0x18>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8004efc:	2204      	movs	r2, #4
 8004efe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8004f00:	2003      	movs	r0, #3
 8004f02:	4770      	bx	lr
  }
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 8004f04:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004f06:	f010 0001 	ands.w	r0, r0, #1
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8004f0a:	bf15      	itete	ne
 8004f0c:	2001      	movne	r0, #1
  {
    /* No error flag set */
  }  
  
  /* Clear all the static flags */
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f0e:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8004f12:	6398      	strne	r0, [r3, #56]	; 0x38
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f14:	639a      	streq	r2, [r3, #56]	; 0x38
  
  return errorstate;
}
 8004f16:	4770      	bx	lr

08004f18 <SD_CmdResp1Error>:
{
 8004f18:	b570      	push	{r4, r5, r6, lr}
 8004f1a:	4605      	mov	r5, r0
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8004f1c:	6800      	ldr	r0, [r0, #0]
{
 8004f1e:	460e      	mov	r6, r1
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8004f20:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004f22:	f013 0f45 	tst.w	r3, #69	; 0x45
 8004f26:	d0fb      	beq.n	8004f20 <SD_CmdResp1Error+0x8>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8004f28:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004f2a:	075b      	lsls	r3, r3, #29
 8004f2c:	d503      	bpl.n	8004f36 <SD_CmdResp1Error+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8004f2e:	2304      	movs	r3, #4
 8004f30:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8004f32:	2003      	movs	r0, #3
 8004f34:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 8004f36:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004f38:	f014 0401 	ands.w	r4, r4, #1
 8004f3c:	d003      	beq.n	8004f46 <SD_CmdResp1Error+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8004f3e:	2301      	movs	r3, #1
 8004f40:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 8004f42:	4618      	mov	r0, r3
 8004f44:	bd70      	pop	{r4, r5, r6, pc}
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 8004f46:	f001 fc94 	bl	8006872 <SDMMC_GetCommandResponse>
 8004f4a:	42b0      	cmp	r0, r6
 8004f4c:	d001      	beq.n	8004f52 <SD_CmdResp1Error+0x3a>
    return errorstate;
 8004f4e:	2010      	movs	r0, #16
 8004f50:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f52:	6828      	ldr	r0, [r5, #0]
 8004f54:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8004f58:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	f001 fc8c 	bl	8006878 <SDMMC_GetResponse>
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8004f60:	4b27      	ldr	r3, [pc, #156]	; (8005000 <SD_CmdResp1Error+0xe8>)
 8004f62:	4003      	ands	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0ec      	beq.n	8004f42 <SD_CmdResp1Error+0x2a>
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	db27      	blt.n	8004fbc <SD_CmdResp1Error+0xa4>
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 8004f6c:	0045      	lsls	r5, r0, #1
 8004f6e:	d427      	bmi.n	8004fc0 <SD_CmdResp1Error+0xa8>
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 8004f70:	0084      	lsls	r4, r0, #2
 8004f72:	d427      	bmi.n	8004fc4 <SD_CmdResp1Error+0xac>
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 8004f74:	00c1      	lsls	r1, r0, #3
 8004f76:	d427      	bmi.n	8004fc8 <SD_CmdResp1Error+0xb0>
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 8004f78:	0102      	lsls	r2, r0, #4
 8004f7a:	d427      	bmi.n	8004fcc <SD_CmdResp1Error+0xb4>
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 8004f7c:	0143      	lsls	r3, r0, #5
 8004f7e:	d427      	bmi.n	8004fd0 <SD_CmdResp1Error+0xb8>
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 8004f80:	01c6      	lsls	r6, r0, #7
 8004f82:	d427      	bmi.n	8004fd4 <SD_CmdResp1Error+0xbc>
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 8004f84:	0205      	lsls	r5, r0, #8
 8004f86:	d427      	bmi.n	8004fd8 <SD_CmdResp1Error+0xc0>
  if((response_r1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 8004f88:	0244      	lsls	r4, r0, #9
 8004f8a:	d4e0      	bmi.n	8004f4e <SD_CmdResp1Error+0x36>
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 8004f8c:	0281      	lsls	r1, r0, #10
 8004f8e:	d425      	bmi.n	8004fdc <SD_CmdResp1Error+0xc4>
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 8004f90:	02c2      	lsls	r2, r0, #11
 8004f92:	d425      	bmi.n	8004fe0 <SD_CmdResp1Error+0xc8>
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 8004f94:	0303      	lsls	r3, r0, #12
 8004f96:	d425      	bmi.n	8004fe4 <SD_CmdResp1Error+0xcc>
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 8004f98:	0346      	lsls	r6, r0, #13
 8004f9a:	d425      	bmi.n	8004fe8 <SD_CmdResp1Error+0xd0>
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 8004f9c:	0385      	lsls	r5, r0, #14
 8004f9e:	d425      	bmi.n	8004fec <SD_CmdResp1Error+0xd4>
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 8004fa0:	03c4      	lsls	r4, r0, #15
 8004fa2:	d425      	bmi.n	8004ff0 <SD_CmdResp1Error+0xd8>
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 8004fa4:	0401      	lsls	r1, r0, #16
 8004fa6:	d425      	bmi.n	8004ff4 <SD_CmdResp1Error+0xdc>
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 8004fa8:	0442      	lsls	r2, r0, #17
 8004faa:	d425      	bmi.n	8004ff8 <SD_CmdResp1Error+0xe0>
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 8004fac:	0483      	lsls	r3, r0, #18
 8004fae:	d425      	bmi.n	8004ffc <SD_CmdResp1Error+0xe4>
    return(SD_AKE_SEQ_ERROR);
 8004fb0:	f010 0f08 	tst.w	r0, #8
 8004fb4:	bf0c      	ite	eq
 8004fb6:	2000      	moveq	r0, #0
 8004fb8:	201a      	movne	r0, #26
 8004fba:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ADDR_OUT_OF_RANGE);
 8004fbc:	201c      	movs	r0, #28
 8004fbe:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ADDR_MISALIGNED);
 8004fc0:	2009      	movs	r0, #9
 8004fc2:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_BLOCK_LEN_ERR);
 8004fc4:	200a      	movs	r0, #10
 8004fc6:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ERASE_SEQ_ERR);
 8004fc8:	200b      	movs	r0, #11
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_BAD_ERASE_PARAM);
 8004fcc:	200c      	movs	r0, #12
 8004fce:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_WRITE_PROT_VIOLATION);
 8004fd0:	200d      	movs	r0, #13
 8004fd2:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_LOCK_UNLOCK_FAILED);
 8004fd4:	200e      	movs	r0, #14
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_COM_CRC_FAILED);
 8004fd8:	200f      	movs	r0, #15
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CARD_ECC_FAILED);
 8004fdc:	2011      	movs	r0, #17
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CC_ERROR);
 8004fe0:	2012      	movs	r0, #18
 8004fe2:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_GENERAL_UNKNOWN_ERROR);
 8004fe4:	2013      	movs	r0, #19
 8004fe6:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_STREAM_READ_UNDERRUN);
 8004fe8:	2014      	movs	r0, #20
 8004fea:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_STREAM_WRITE_OVERRUN);
 8004fec:	2015      	movs	r0, #21
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CID_CSD_OVERWRITE);
 8004ff0:	2016      	movs	r0, #22
 8004ff2:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_WP_ERASE_SKIP);
 8004ff4:	2017      	movs	r0, #23
 8004ff6:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CARD_ECC_DISABLED);
 8004ff8:	2018      	movs	r0, #24
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ERASE_RESET);
 8004ffc:	2019      	movs	r0, #25
}
 8004ffe:	bd70      	pop	{r4, r5, r6, pc}
 8005000:	fdffe008 	.word	0xfdffe008

08005004 <SD_FindSCR>:
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005008:	b08e      	sub	sp, #56	; 0x38
  SDMMC_CmdInitTypeDef  sdmmc_cmdinitstructure;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 800500a:	2300      	movs	r3, #0
  
  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 800500c:	2410      	movs	r4, #16
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800500e:	2240      	movs	r2, #64	; 0x40
{
 8005010:	4606      	mov	r6, r0
  uint32_t tempscr[2] = {0, 0};
 8005012:	9301      	str	r3, [sp, #4]
 8005014:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005016:	9306      	str	r3, [sp, #24]
{
 8005018:	460d      	mov	r5, r1
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800501a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800501e:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
 8005020:	2708      	movs	r7, #8
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005022:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005024:	9404      	str	r4, [sp, #16]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005026:	9205      	str	r2, [sp, #20]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005028:	9307      	str	r3, [sp, #28]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
 800502a:	9703      	str	r7, [sp, #12]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800502c:	f001 fc0f 	bl	800684e <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8005030:	4621      	mov	r1, r4
 8005032:	4630      	mov	r0, r6
 8005034:	f7ff ff70 	bl	8004f18 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8005038:	4604      	mov	r4, r0
 800503a:	2800      	cmp	r0, #0
 800503c:	d138      	bne.n	80050b0 <SD_FindSCR+0xac>
  {
    return errorstate;
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 800503e:	6a73      	ldr	r3, [r6, #36]	; 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005040:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8005042:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8005044:	2437      	movs	r4, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005046:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8005048:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800504a:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800504c:	f001 fbff 	bl	800684e <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8005050:	4621      	mov	r1, r4
 8005052:	4630      	mov	r0, r6
 8005054:	f7ff ff60 	bl	8004f18 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8005058:	4604      	mov	r4, r0
 800505a:	bb48      	cbnz	r0, 80050b0 <SD_FindSCR+0xac>
  {
    return errorstate;
  }
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 800505c:	f04f 33ff 	mov.w	r3, #4294967295
 8005060:	9308      	str	r3, [sp, #32]
  sdmmc_datainitstructure.DataLength    = 8;
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005062:	2330      	movs	r3, #48	; 0x30
 8005064:	930a      	str	r3, [sp, #40]	; 0x28
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005066:	2302      	movs	r3, #2
 8005068:	930b      	str	r3, [sp, #44]	; 0x2c
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800506a:	900c      	str	r0, [sp, #48]	; 0x30
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800506c:	2301      	movs	r3, #1
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 800506e:	a908      	add	r1, sp, #32
 8005070:	6830      	ldr	r0, [r6, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005072:	930d      	str	r3, [sp, #52]	; 0x34
  sdmmc_datainitstructure.DataLength    = 8;
 8005074:	9709      	str	r7, [sp, #36]	; 0x24
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8005076:	f001 fc09 	bl	800688c <SDMMC_DataConfig>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  sdmmc_cmdinitstructure.Argument         = 0;
 800507a:	9403      	str	r4, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800507c:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 800507e:	2433      	movs	r4, #51	; 0x33
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005080:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8005082:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005084:	f001 fbe3 	bl	800684e <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SD_APP_SEND_SCR);
 8005088:	4621      	mov	r1, r4
 800508a:	4630      	mov	r0, r6
 800508c:	f7ff ff44 	bl	8004f18 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8005090:	4604      	mov	r4, r0
 8005092:	b968      	cbnz	r0, 80050b0 <SD_FindSCR+0xac>
 8005094:	466f      	mov	r7, sp
  {
    return errorstate;
  }
  
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8005096:	f240 482a 	movw	r8, #1066	; 0x42a
 800509a:	6830      	ldr	r0, [r6, #0]
 800509c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800509e:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80050a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80050a4:	d008      	beq.n	80050b8 <SD_FindSCR+0xb4>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
      index++;
    }
  }
  
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80050a6:	0719      	lsls	r1, r3, #28
 80050a8:	d50d      	bpl.n	80050c6 <SD_FindSCR+0xc2>
  {
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80050aa:	2308      	movs	r3, #8
 80050ac:	6383      	str	r3, [r0, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
    
    return errorstate;
 80050ae:	2404      	movs	r4, #4
  
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
    ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
  
  return errorstate;
}
 80050b0:	4620      	mov	r0, r4
 80050b2:	b00e      	add	sp, #56	; 0x38
 80050b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80050b8:	029b      	lsls	r3, r3, #10
 80050ba:	d5ef      	bpl.n	800509c <SD_FindSCR+0x98>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80050bc:	f001 fbbc 	bl	8006838 <SDMMC_ReadFIFO>
 80050c0:	f847 0f04 	str.w	r0, [r7, #4]!
 80050c4:	e7e9      	b.n	800509a <SD_FindSCR+0x96>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80050c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80050c8:	079a      	lsls	r2, r3, #30
 80050ca:	d502      	bpl.n	80050d2 <SD_FindSCR+0xce>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80050cc:	2402      	movs	r4, #2
 80050ce:	6384      	str	r4, [r0, #56]	; 0x38
    return errorstate;
 80050d0:	e7ee      	b.n	80050b0 <SD_FindSCR+0xac>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80050d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80050d4:	069b      	lsls	r3, r3, #26
 80050d6:	d503      	bpl.n	80050e0 <SD_FindSCR+0xdc>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80050d8:	2320      	movs	r3, #32
 80050da:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 80050dc:	2406      	movs	r4, #6
 80050de:	e7e7      	b.n	80050b0 <SD_FindSCR+0xac>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80050e0:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80050e4:	6383      	str	r3, [r0, #56]	; 0x38
 80050e6:	9b01      	ldr	r3, [sp, #4]
 80050e8:	ba1b      	rev	r3, r3
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 80050ea:	606b      	str	r3, [r5, #4]
 80050ec:	9b02      	ldr	r3, [sp, #8]
 80050ee:	ba1b      	rev	r3, r3
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 80050f0:	602b      	str	r3, [r5, #0]
  return errorstate;
 80050f2:	e7dd      	b.n	80050b0 <SD_FindSCR+0xac>

080050f4 <HAL_SD_ReadBlocks_DMA>:
{
 80050f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050f8:	b08d      	sub	sp, #52	; 0x34
  hsd->Instance->DCTRL = 0;
 80050fa:	6806      	ldr	r6, [r0, #0]
{
 80050fc:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80050fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
  if(NumberOfBlocks > 1)
 8005100:	2f01      	cmp	r7, #1
{
 8005102:	4699      	mov	r9, r3
  hsd->Instance->DCTRL = 0;
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	62f3      	str	r3, [r6, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 800510a:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 800510c:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK; 
 800510e:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdOperation = SD_READ_MULTIPLE_BLOCK;
 8005110:	bf88      	it	hi
 8005112:	2301      	movhi	r3, #1
    hsd->SdOperation = SD_READ_SINGLE_BLOCK;
 8005114:	6543      	str	r3, [r0, #84]	; 0x54
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8005116:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8005118:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 800511c:	63f3      	str	r3, [r6, #60]	; 0x3c
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 800511e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
{
 8005120:	4604      	mov	r4, r0
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8005122:	f043 0308 	orr.w	r3, r3, #8
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 8005126:	6d80      	ldr	r0, [r0, #88]	; 0x58
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8005128:	62f3      	str	r3, [r6, #44]	; 0x2c
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 800512a:	4b2d      	ldr	r3, [pc, #180]	; (80051e0 <HAL_SD_ReadBlocks_DMA+0xec>)
 800512c:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 800512e:	4690      	mov	r8, r2
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 8005130:	4b2c      	ldr	r3, [pc, #176]	; (80051e4 <HAL_SD_ReadBlocks_DMA+0xf0>)
  hsd->hdmarx->Instance->CCR &= ~DMA_MEMORY_TO_PERIPH;
 8005132:	6802      	ldr	r2, [r0, #0]
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 8005134:	6343      	str	r3, [r0, #52]	; 0x34
  hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005136:	2300      	movs	r3, #0
 8005138:	6083      	str	r3, [r0, #8]
  hsd->hdmarx->Instance->CCR &= ~DMA_MEMORY_TO_PERIPH;
 800513a:	6813      	ldr	r3, [r2, #0]
 800513c:	f023 0310 	bic.w	r3, r3, #16
 8005140:	6013      	str	r3, [r2, #0]
  HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pReadBuffer, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 8005142:	fb05 f307 	mul.w	r3, r5, r7
 8005146:	460a      	mov	r2, r1
 8005148:	089b      	lsrs	r3, r3, #2
 800514a:	f106 0180 	add.w	r1, r6, #128	; 0x80
 800514e:	f7fe fcb9 	bl	8003ac4 <HAL_DMA_Start_IT>
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8005152:	6a23      	ldr	r3, [r4, #32]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005154:	6820      	ldr	r0, [r4, #0]
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8005156:	2b02      	cmp	r3, #2
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005158:	f04f 0340 	mov.w	r3, #64	; 0x40
 800515c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800515e:	f04f 0300 	mov.w	r3, #0
    ReadAddr /= 512;
 8005162:	bf04      	itt	eq
 8005164:	ea4f 2858 	moveq.w	r8, r8, lsr #9
    BlockSize = 512;
 8005168:	f44f 7500 	moveq.w	r5, #512	; 0x200
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 800516c:	f04f 0610 	mov.w	r6, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005170:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005172:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005174:	f44f 6380 	mov.w	r3, #1024	; 0x400
    ReadAddr /= 512;
 8005178:	bf08      	it	eq
 800517a:	ea48 58c9 	orreq.w	r8, r8, r9, lsl #23
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 800517e:	9501      	str	r5, [sp, #4]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005180:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005182:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005184:	f001 fb63 	bl	800684e <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8005188:	4631      	mov	r1, r6
 800518a:	4620      	mov	r0, r4
 800518c:	f7ff fec4 	bl	8004f18 <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 8005190:	bb10      	cbnz	r0, 80051d8 <HAL_SD_ReadBlocks_DMA+0xe4>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8005192:	f04f 32ff 	mov.w	r2, #4294967295
 8005196:	9206      	str	r2, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005198:	2290      	movs	r2, #144	; 0x90
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800519a:	2301      	movs	r3, #1
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800519c:	9208      	str	r2, [sp, #32]
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800519e:	900a      	str	r0, [sp, #40]	; 0x28
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80051a0:	2202      	movs	r2, #2
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 80051a2:	a906      	add	r1, sp, #24
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 80051a4:	437d      	muls	r5, r7
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 80051a6:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 80051a8:	930b      	str	r3, [sp, #44]	; 0x2c
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80051aa:	9209      	str	r2, [sp, #36]	; 0x24
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 80051ac:	9507      	str	r5, [sp, #28]
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 80051ae:	f001 fb6d 	bl	800688c <SDMMC_DataConfig>
  if(NumberOfBlocks > 1)
 80051b2:	2f01      	cmp	r7, #1
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 80051b4:	bf8c      	ite	hi
 80051b6:	2312      	movhi	r3, #18
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 80051b8:	2311      	movls	r3, #17
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80051ba:	a901      	add	r1, sp, #4
 80051bc:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 80051be:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)ReadAddr;
 80051c0:	f8cd 8004 	str.w	r8, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80051c4:	f001 fb43 	bl	800684e <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 80051c8:	2f01      	cmp	r7, #1
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_MULT_BLOCK);
 80051ca:	bf8c      	ite	hi
 80051cc:	2112      	movhi	r1, #18
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_SINGLE_BLOCK);
 80051ce:	2111      	movls	r1, #17
 80051d0:	4620      	mov	r0, r4
 80051d2:	f7ff fea1 	bl	8004f18 <SD_CmdResp1Error>
  hsd->SdTransferErr = errorstate;
 80051d6:	64e0      	str	r0, [r4, #76]	; 0x4c
}
 80051d8:	b00d      	add	sp, #52	; 0x34
 80051da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051de:	bf00      	nop
 80051e0:	08005357 	.word	0x08005357
 80051e4:	08005373 	.word	0x08005373

080051e8 <HAL_SD_WriteBlocks_DMA>:
{
 80051e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ec:	b08c      	sub	sp, #48	; 0x30
 80051ee:	4617      	mov	r7, r2
 80051f0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  hsd->Instance->DCTRL = 0;
 80051f2:	6802      	ldr	r2, [r0, #0]
{
 80051f4:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  if(NumberOfBlocks > 1)
 80051f8:	2e01      	cmp	r6, #1
{
 80051fa:	461d      	mov	r5, r3
  hsd->Instance->DCTRL = 0;
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	62d3      	str	r3, [r2, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 8005202:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 8005204:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK;
 8005206:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdOperation = SD_WRITE_MULTIPLE_BLOCK;
 8005208:	bf8c      	ite	hi
 800520a:	2303      	movhi	r3, #3
    hsd->SdOperation = SD_WRITE_SINGLE_BLOCK;
 800520c:	2302      	movls	r3, #2
 800520e:	6543      	str	r3, [r0, #84]	; 0x54
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8005210:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
{
 8005212:	4604      	mov	r4, r0
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8005214:	f443 738d 	orr.w	r3, r3, #282	; 0x11a
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8005218:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 800521a:	63d3      	str	r3, [r2, #60]	; 0x3c
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 800521c:	4b2f      	ldr	r3, [pc, #188]	; (80052dc <HAL_SD_WriteBlocks_DMA+0xf4>)
  hsd->hdmatx->Instance->CCR |= DMA_MEMORY_TO_PERIPH;
 800521e:	f8d0 e000 	ldr.w	lr, [r0]
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8005222:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsd->hdmatx->XferErrorCallback = SD_DMA_TxError;
 8005224:	4b2e      	ldr	r3, [pc, #184]	; (80052e0 <HAL_SD_WriteBlocks_DMA+0xf8>)
 8005226:	6343      	str	r3, [r0, #52]	; 0x34
  hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005228:	2310      	movs	r3, #16
 800522a:	6083      	str	r3, [r0, #8]
  hsd->hdmatx->Instance->CCR |= DMA_MEMORY_TO_PERIPH;
 800522c:	f8de 3000 	ldr.w	r3, [lr]
 8005230:	f043 0310 	orr.w	r3, r3, #16
 8005234:	f8ce 3000 	str.w	r3, [lr]
  HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pWriteBuffer, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 8005238:	fb08 f306 	mul.w	r3, r8, r6
 800523c:	3280      	adds	r2, #128	; 0x80
 800523e:	089b      	lsrs	r3, r3, #2
 8005240:	f7fe fc40 	bl	8003ac4 <HAL_DMA_Start_IT>
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8005244:	6820      	ldr	r0, [r4, #0]
 8005246:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005248:	f043 0308 	orr.w	r3, r3, #8
 800524c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 800524e:	6a23      	ldr	r3, [r4, #32]
 8005250:	2b02      	cmp	r3, #2
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005252:	f04f 0340 	mov.w	r3, #64	; 0x40
    WriteAddr /= 512;
 8005256:	bf08      	it	eq
 8005258:	0a7f      	lsreq	r7, r7, #9
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800525a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800525c:	f04f 0300 	mov.w	r3, #0
    WriteAddr /= 512;
 8005260:	bf04      	itt	eq
 8005262:	ea47 57c5 	orreq.w	r7, r7, r5, lsl #23
    BlockSize = 512;
 8005266:	f44f 7800 	moveq.w	r8, #512	; 0x200
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 800526a:	2510      	movs	r5, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800526c:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800526e:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005270:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8005274:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005276:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8005278:	f8cd 8004 	str.w	r8, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800527c:	f001 fae7 	bl	800684e <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8005280:	4629      	mov	r1, r5
 8005282:	4620      	mov	r0, r4
 8005284:	f7ff fe48 	bl	8004f18 <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 8005288:	4605      	mov	r5, r0
 800528a:	bb18      	cbnz	r0, 80052d4 <HAL_SD_WriteBlocks_DMA+0xec>
  if(NumberOfBlocks <= 1)
 800528c:	2e01      	cmp	r6, #1
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 800528e:	bf94      	ite	ls
 8005290:	2318      	movls	r3, #24
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8005292:	2319      	movhi	r3, #25
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005294:	a901      	add	r1, sp, #4
 8005296:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8005298:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
 800529a:	9701      	str	r7, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800529c:	f001 fad7 	bl	800684e <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 80052a0:	2e01      	cmp	r6, #1
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_MULT_BLOCK);
 80052a2:	bf8c      	ite	hi
 80052a4:	2119      	movhi	r1, #25
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_SINGLE_BLOCK);
 80052a6:	2118      	movls	r1, #24
 80052a8:	4620      	mov	r0, r4
 80052aa:	f7ff fe35 	bl	8004f18 <SD_CmdResp1Error>
 80052ae:	4605      	mov	r5, r0
  if (errorstate != SD_OK)
 80052b0:	b980      	cbnz	r0, 80052d4 <HAL_SD_WriteBlocks_DMA+0xec>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 80052b2:	f04f 33ff 	mov.w	r3, #4294967295
 80052b6:	9306      	str	r3, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80052b8:	2390      	movs	r3, #144	; 0x90
 80052ba:	9308      	str	r3, [sp, #32]
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80052bc:	9009      	str	r0, [sp, #36]	; 0x24
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80052be:	900a      	str	r0, [sp, #40]	; 0x28
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 80052c0:	2301      	movs	r3, #1
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 80052c2:	fb06 f608 	mul.w	r6, r6, r8
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 80052c6:	a906      	add	r1, sp, #24
 80052c8:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 80052ca:	9607      	str	r6, [sp, #28]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 80052cc:	930b      	str	r3, [sp, #44]	; 0x2c
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 80052ce:	f001 fadd 	bl	800688c <SDMMC_DataConfig>
  hsd->SdTransferErr = errorstate;
 80052d2:	64e5      	str	r5, [r4, #76]	; 0x4c
}
 80052d4:	4628      	mov	r0, r5
 80052d6:	b00c      	add	sp, #48	; 0x30
 80052d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052dc:	08005381 	.word	0x08005381
 80052e0:	0800539d 	.word	0x0800539d

080052e4 <HAL_SD_XferCpltCallback>:
 80052e4:	4770      	bx	lr

080052e6 <HAL_SD_XferErrorCallback>:
 80052e6:	4770      	bx	lr

080052e8 <HAL_SD_IRQHandler>:
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 80052e8:	6803      	ldr	r3, [r0, #0]
 80052ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ec:	05d2      	lsls	r2, r2, #23
{  
 80052ee:	b510      	push	{r4, lr}
 80052f0:	4604      	mov	r4, r0
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 80052f2:	d510      	bpl.n	8005316 <HAL_SD_IRQHandler+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_IT_DATAEND);  
 80052f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferCplt = 1;
 80052fa:	2301      	movs	r3, #1
 80052fc:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdTransferErr  = SD_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_SD_XferCpltCallback(hsd);  
 8005302:	f7ff ffef 	bl	80052e4 <HAL_SD_XferCpltCallback>
  __HAL_SD_SDMMC_DISABLE_IT(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_DATAEND  |\
 8005306:	6822      	ldr	r2, [r4, #0]
 8005308:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800530a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800530e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005312:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005314:	bd10      	pop	{r4, pc}
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL))
 8005316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005318:	0791      	lsls	r1, r2, #30
 800531a:	d505      	bpl.n	8005328 <HAL_SD_IRQHandler+0x40>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800531c:	2202      	movs	r2, #2
 800531e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_CRC_FAIL;
 8005320:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 8005322:	f7ff ffe0 	bl	80052e6 <HAL_SD_XferErrorCallback>
 8005326:	e7ee      	b.n	8005306 <HAL_SD_IRQHandler+0x1e>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT))
 8005328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800532a:	0712      	lsls	r2, r2, #28
 800532c:	d504      	bpl.n	8005338 <HAL_SD_IRQHandler+0x50>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800532e:	2208      	movs	r2, #8
 8005330:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_TIMEOUT;
 8005332:	2304      	movs	r3, #4
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 8005334:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005336:	e7f4      	b.n	8005322 <HAL_SD_IRQHandler+0x3a>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_RXOVERR))
 8005338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800533a:	0691      	lsls	r1, r2, #26
 800533c:	d503      	bpl.n	8005346 <HAL_SD_IRQHandler+0x5e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800533e:	2220      	movs	r2, #32
 8005340:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_RX_OVERRUN;
 8005342:	2306      	movs	r3, #6
 8005344:	e7f6      	b.n	8005334 <HAL_SD_IRQHandler+0x4c>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_TXUNDERR))
 8005346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005348:	06d2      	lsls	r2, r2, #27
 800534a:	d5dc      	bpl.n	8005306 <HAL_SD_IRQHandler+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_TXUNDERR);
 800534c:	2210      	movs	r2, #16
 800534e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 8005350:	2305      	movs	r3, #5
 8005352:	e7ef      	b.n	8005334 <HAL_SD_IRQHandler+0x4c>

08005354 <HAL_SD_DMA_RxCpltCallback>:
 8005354:	4770      	bx	lr

08005356 <SD_DMA_RxCplt>:
{
 8005356:	b510      	push	{r4, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8005358:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hsd->DmaTransferCplt = 1;
 800535a:	2301      	movs	r3, #1
 800535c:	6523      	str	r3, [r4, #80]	; 0x50
  while(hsd->SdTransferCplt == 0)
 800535e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0fc      	beq.n	800535e <SD_DMA_RxCplt+0x8>
  HAL_DMA_Abort(hdma);
 8005364:	f7fe fbec 	bl	8003b40 <HAL_DMA_Abort>
  HAL_SD_DMA_RxCpltCallback(hsd->hdmarx);   
 8005368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800536a:	f7ff fff3 	bl	8005354 <HAL_SD_DMA_RxCpltCallback>
 800536e:	bd10      	pop	{r4, pc}

08005370 <HAL_SD_DMA_RxErrorCallback>:
 8005370:	4770      	bx	lr

08005372 <SD_DMA_RxError>:
{
 8005372:	b508      	push	{r3, lr}
  HAL_SD_DMA_RxErrorCallback(hsd->hdmarx);
 8005374:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005376:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005378:	f7ff fffa 	bl	8005370 <HAL_SD_DMA_RxErrorCallback>
 800537c:	bd08      	pop	{r3, pc}

0800537e <HAL_SD_DMA_TxCpltCallback>:
 800537e:	4770      	bx	lr

08005380 <SD_DMA_TxCplt>:
{
 8005380:	b510      	push	{r4, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8005382:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hsd->DmaTransferCplt = 1;
 8005384:	2301      	movs	r3, #1
 8005386:	6523      	str	r3, [r4, #80]	; 0x50
  while(hsd->SdTransferCplt == 0)
 8005388:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0fc      	beq.n	8005388 <SD_DMA_TxCplt+0x8>
  HAL_DMA_Abort(hdma);
 800538e:	f7fe fbd7 	bl	8003b40 <HAL_DMA_Abort>
  HAL_SD_DMA_TxCpltCallback(hsd->hdmatx);  
 8005392:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005394:	f7ff fff3 	bl	800537e <HAL_SD_DMA_TxCpltCallback>
 8005398:	bd10      	pop	{r4, pc}

0800539a <HAL_SD_DMA_TxErrorCallback>:
{
 800539a:	4770      	bx	lr

0800539c <SD_DMA_TxError>:
{
 800539c:	b508      	push	{r3, lr}
  HAL_SD_DMA_TxErrorCallback(hsd->hdmatx);
 800539e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80053a0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80053a2:	f7ff fffa 	bl	800539a <HAL_SD_DMA_TxErrorCallback>
 80053a6:	bd08      	pop	{r3, pc}

080053a8 <HAL_SD_Get_CardInfo>:
{
 80053a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 80053ac:	6a05      	ldr	r5, [r0, #32]
 80053ae:	f881 5056 	strb.w	r5, [r1, #86]	; 0x56
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
 80053b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80053b4:	f8a1 3054 	strh.w	r3, [r1, #84]	; 0x54
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
 80053b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 80053ba:	0f9a      	lsrs	r2, r3, #30
 80053bc:	700a      	strb	r2, [r1, #0]
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 80053be:	f3c3 6283 	ubfx	r2, r3, #26, #4
 80053c2:	704a      	strb	r2, [r1, #1]
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03;
 80053c4:	f3c3 6201 	ubfx	r2, r3, #24, #2
 80053c8:	708a      	strb	r2, [r1, #2]
  pCardInfo->SD_csd.TAAC = (uint8_t)tmp;
 80053ca:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80053ce:	70ca      	strb	r2, [r1, #3]
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 80053d0:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 80053d4:	b2db      	uxtb	r3, r3
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 80053d6:	710a      	strb	r2, [r1, #4]
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 80053d8:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
 80053da:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80053dc:	0e13      	lsrs	r3, r2, #24
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80053e2:	88cb      	ldrh	r3, [r1, #6]
{
 80053e4:	4604      	mov	r4, r0
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f3c2 5003 	ubfx	r0, r2, #20, #4
 80053ec:	4303      	orrs	r3, r0
 80053ee:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80053f0:	f3c2 4303 	ubfx	r3, r2, #16, #4
 80053f4:	720b      	strb	r3, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00) >> 8;
 80053f6:	f3c2 2307 	ubfx	r3, r2, #8, #8
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 80053fa:	09d8      	lsrs	r0, r3, #7
 80053fc:	7248      	strb	r0, [r1, #9]
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 80053fe:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8005402:	7288      	strb	r0, [r1, #10]
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8005404:	f3c3 1040 	ubfx	r0, r3, #5, #1
 8005408:	72c8      	strb	r0, [r1, #11]
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800540a:	f3c3 1000 	ubfx	r0, r3, #4, #1
 800540e:	7308      	strb	r0, [r1, #12]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 8005410:	2d01      	cmp	r5, #1
  pCardInfo->SD_csd.Reserved2       = 0; /*!< Reserved */
 8005412:	f04f 0000 	mov.w	r0, #0
 8005416:	7348      	strb	r0, [r1, #13]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 8005418:	f200 80dc 	bhi.w	80055d4 <HAL_SD_Get_CardInfo+0x22c>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 800541c:	029b      	lsls	r3, r3, #10
 800541e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005422:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 8005424:	690b      	ldr	r3, [r1, #16]
 8005426:	0092      	lsls	r2, r2, #2
 8005428:	f402 727f 	and.w	r2, r2, #1020	; 0x3fc
 800542c:	431a      	orrs	r2, r3
 800542e:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8005430:	690b      	ldr	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 8005432:	6b22      	ldr	r2, [r4, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8005434:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8005438:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800543a:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800543e:	750b      	strb	r3, [r1, #20]
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 8005440:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8005444:	754b      	strb	r3, [r1, #21]
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8005446:	f3c2 5342 	ubfx	r3, r2, #21, #3
 800544a:	758b      	strb	r3, [r1, #22]
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 800544c:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8005450:	75cb      	strb	r3, [r1, #23]
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
 8005452:	0bd3      	lsrs	r3, r2, #15
 8005454:	f003 0306 	and.w	r3, r3, #6
 8005458:	760b      	strb	r3, [r1, #24]
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 800545a:	7e0d      	ldrb	r5, [r1, #24]
 800545c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8005460:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8005464:	432a      	orrs	r2, r5
 8005466:	760a      	strb	r2, [r1, #24]
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 8005468:	690d      	ldr	r5, [r1, #16]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 800546a:	7e0f      	ldrb	r7, [r1, #24]
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 800546c:	7a0a      	ldrb	r2, [r1, #8]
 800546e:	2601      	movs	r6, #1
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 8005470:	3702      	adds	r7, #2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8005472:	fa06 f202 	lsl.w	r2, r6, r2
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 8005476:	40be      	lsls	r6, r7
 8005478:	ea4f 79e6 	mov.w	r9, r6, asr #31
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 800547c:	fba6 6702 	umull	r6, r7, r6, r2
 8005480:	fb02 7709 	mla	r7, r2, r9, r7
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8005484:	650a      	str	r2, [r1, #80]	; 0x50
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 8005486:	1c6a      	adds	r2, r5, #1
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8005488:	fba6 8902 	umull	r8, r9, r6, r2
 800548c:	fb02 9907 	mla	r9, r2, r7, r9
 8005490:	e9c1 8912 	strd	r8, r9, [r1, #72]	; 0x48
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8005494:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 800549e:	764a      	strb	r2, [r1, #25]
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 80054a0:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 80054a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 80054a4:	7e8a      	ldrb	r2, [r1, #26]
 80054a6:	f3c3 15c0 	ubfx	r5, r3, #7, #1
 80054aa:	432a      	orrs	r2, r5
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 80054ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 80054b0:	768a      	strb	r2, [r1, #26]
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 80054b2:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000) >> 24);
 80054b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 80054b6:	0fda      	lsrs	r2, r3, #31
 80054b8:	770a      	strb	r2, [r1, #28]
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60) >> 5;
 80054ba:	f3c3 7241 	ubfx	r2, r3, #29, #2
 80054be:	774a      	strb	r2, [r1, #29]
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1C) >> 2;
 80054c0:	f3c3 6282 	ubfx	r2, r3, #26, #3
 80054c4:	778a      	strb	r2, [r1, #30]
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03) << 2;
 80054c6:	0d9a      	lsrs	r2, r3, #22
 80054c8:	f002 020c 	and.w	r2, r2, #12
 80054cc:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80054ce:	7fca      	ldrb	r2, [r1, #31]
 80054d0:	f3c3 5581 	ubfx	r5, r3, #22, #2
 80054d4:	432a      	orrs	r2, r5
 80054d6:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80054d8:	f3c3 5240 	ubfx	r2, r3, #21, #1
 80054dc:	f881 2020 	strb.w	r2, [r1, #32]
  pCardInfo->SD_csd.Reserved3           = 0;
 80054e0:	2200      	movs	r2, #0
 80054e2:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 80054e6:	f3c3 4200 	ubfx	r2, r3, #16, #1
 80054ea:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 80054ee:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80054f2:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40) >> 6;
 80054f6:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80054fa:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20) >> 5;
 80054fe:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8005502:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10) >> 4;
 8005506:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800550a:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
 800550e:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8005512:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCardInfo->SD_csd.Reserved4 = 1;
 8005516:	2501      	movs	r5, #1
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 8005518:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 800551c:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 8005520:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 8005524:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCardInfo->SD_csd.Reserved4 = 1;
 8005528:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
  tmp = (uint8_t)((hsd->CID[0] & 0xFF000000) >> 24);
 800552c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800552e:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ManufacturerID = tmp;
 8005530:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
 8005534:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005538:	0212      	lsls	r2, r2, #8
 800553a:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 800553c:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 800553e:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8005542:	b292      	uxth	r2, r2
 8005544:	4332      	orrs	r2, r6
 8005546:	061b      	lsls	r3, r3, #24
 8005548:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
 800554a:	630b      	str	r3, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 800554c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 800554e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 8005550:	0e1e      	lsrs	r6, r3, #24
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 8005552:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8005556:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
 8005558:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800555a:	0a1a      	lsrs	r2, r3, #8
 800555c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8005560:	4332      	orrs	r2, r6
 8005562:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp;
 8005564:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8005566:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800556a:	4332      	orrs	r2, r6
  tmp = (uint8_t)(hsd->CID[1] & 0x000000FF);
 800556c:	b2db      	uxtb	r3, r3
  pCardInfo->SD_cid.ProdName1 |= tmp;
 800556e:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName2 = tmp;
 8005570:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
  tmp = (uint8_t)((hsd->CID[2] & 0xFF000000) >> 24);
 8005574:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005576:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ProdRev = tmp;
 8005578:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
  tmp = (uint8_t)((hsd->CID[2] & 0x00FF0000) >> 16);
 800557c:	0c1a      	lsrs	r2, r3, #16
 800557e:	0612      	lsls	r2, r2, #24
  pCardInfo->SD_cid.ProdSN = tmp << 24;
 8005580:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 8005582:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8005584:	021a      	lsls	r2, r3, #8
 8005586:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800558a:	4332      	orrs	r2, r6
 800558c:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 800558e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	b29b      	uxth	r3, r3
 8005594:	4313      	orrs	r3, r2
 8005596:	638b      	str	r3, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp;
 8005598:	6b8a      	ldr	r2, [r1, #56]	; 0x38
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
 800559a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCardInfo->SD_cid.ProdSN |= tmp;
 800559c:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 80055a0:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 80055a2:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 80055a6:	f3c3 5403 	ubfx	r4, r3, #20, #4
 80055aa:	4322      	orrs	r2, r4
 80055ac:	f881 203c 	strb.w	r2, [r1, #60]	; 0x3c
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 80055b0:	0a1a      	lsrs	r2, r3, #8
 80055b2:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80055b6:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.ManufactDate |= tmp;
 80055b8:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 80055ba:	f3c3 2407 	ubfx	r4, r3, #8, #8
 80055be:	b292      	uxth	r2, r2
 80055c0:	4322      	orrs	r2, r4
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 80055c2:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_cid.ManufactDate |= tmp;
 80055c6:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 80055c8:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
  pCardInfo->SD_cid.Reserved2 = 1;
 80055cc:	f881 5041 	strb.w	r5, [r1, #65]	; 0x41
}
 80055d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 80055d4:	2d02      	cmp	r5, #2
 80055d6:	d11f      	bne.n	8005618 <HAL_SD_Get_CardInfo+0x270>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 80055d8:	0412      	lsls	r2, r2, #16
 80055da:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 80055de:	6b23      	ldr	r3, [r4, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 80055e0:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 80055e2:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 80055e4:	0e1d      	lsrs	r5, r3, #24
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 80055e6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80055ea:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 80055ec:	690d      	ldr	r5, [r1, #16]
 80055ee:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80055f2:	432a      	orrs	r2, r5
 80055f4:	610a      	str	r2, [r1, #16]
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 80055f6:	690e      	ldr	r6, [r1, #16]
 80055f8:	2700      	movs	r7, #0
 80055fa:	3601      	adds	r6, #1
 80055fc:	f147 0700 	adc.w	r7, r7, #0
 8005600:	04fa      	lsls	r2, r7, #19
 8005602:	ea42 3256 	orr.w	r2, r2, r6, lsr #13
 8005606:	64ca      	str	r2, [r1, #76]	; 0x4c
 8005608:	04f6      	lsls	r6, r6, #19
    pCardInfo->CardBlockSize = 512;    
 800560a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800560e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 8005612:	648e      	str	r6, [r1, #72]	; 0x48
    pCardInfo->CardBlockSize = 512;    
 8005614:	650a      	str	r2, [r1, #80]	; 0x50
 8005616:	e73d      	b.n	8005494 <HAL_SD_Get_CardInfo+0xec>
    errorstate = SD_ERROR;
 8005618:	2029      	movs	r0, #41	; 0x29
 800561a:	e73b      	b.n	8005494 <HAL_SD_Get_CardInfo+0xec>

0800561c <HAL_SD_Init>:
{ 
 800561c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005620:	b091      	sub	sp, #68	; 0x44
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 8005622:	2500      	movs	r5, #0
{ 
 8005624:	4604      	mov	r4, r0
 8005626:	460e      	mov	r6, r1
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 8005628:	f88d 5012 	strb.w	r5, [sp, #18]
  HAL_SD_MspInit(hsd);
 800562c:	f006 f930 	bl	800b890 <HAL_SD_MspInit>
  tmpinit.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005630:	2376      	movs	r3, #118	; 0x76
 8005632:	930f      	str	r3, [sp, #60]	; 0x3c
  tmpinit.BusWide             = SDMMC_BUS_WIDE_1B;
 8005634:	950d      	str	r5, [sp, #52]	; 0x34
  tmpinit.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005636:	950e      	str	r5, [sp, #56]	; 0x38
  SDMMC_Init(hsd->Instance, tmpinit);
 8005638:	ab10      	add	r3, sp, #64	; 0x40
 800563a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800563e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  tmpinit.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005642:	950a      	str	r5, [sp, #40]	; 0x28
  tmpinit.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005644:	950b      	str	r5, [sp, #44]	; 0x2c
  tmpinit.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005646:	950c      	str	r5, [sp, #48]	; 0x30
  SDMMC_Init(hsd->Instance, tmpinit);
 8005648:	ab0a      	add	r3, sp, #40	; 0x28
 800564a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800564c:	6820      	ldr	r0, [r4, #0]
 800564e:	f001 f8d7 	bl	8006800 <SDMMC_Init>
  __HAL_SD_SDMMC_DISABLE(hsd); 
 8005652:	6820      	ldr	r0, [r4, #0]
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
 8005654:	f88d 5013 	strb.w	r5, [sp, #19]
  __HAL_SD_SDMMC_DISABLE(hsd); 
 8005658:	6843      	ldr	r3, [r0, #4]
 800565a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800565e:	6043      	str	r3, [r0, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8005660:	f001 f8ed 	bl	800683e <SDMMC_PowerState_ON>
  HAL_Delay(1);
 8005664:	2001      	movs	r0, #1
 8005666:	f7fe f8eb 	bl	8003840 <HAL_Delay>
  __HAL_SD_SDMMC_ENABLE(hsd);
 800566a:	6820      	ldr	r0, [r4, #0]
 800566c:	6843      	ldr	r3, [r0, #4]
 800566e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005672:	6043      	str	r3, [r0, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005674:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800567a:	9309      	str	r3, [sp, #36]	; 0x24
  sdmmc_cmdinitstructure.Argument         = 0;
 800567c:	9505      	str	r5, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
 800567e:	9506      	str	r5, [sp, #24]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_NO;
 8005680:	9507      	str	r5, [sp, #28]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005682:	9508      	str	r5, [sp, #32]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005684:	f001 f8e3 	bl	800684e <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8005688:	6820      	ldr	r0, [r4, #0]
 800568a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800568c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005690:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 8005694:	b123      	cbz	r3, 80056a0 <HAL_SD_Init+0x84>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005696:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800569a:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 800569c:	2300      	movs	r3, #0
 800569e:	e005      	b.n	80056ac <HAL_SD_Init+0x90>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 80056a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while((timeout > 0) && (!tmp))
 80056a2:	3a01      	subs	r2, #1
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 80056a4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 80056a8:	d1f4      	bne.n	8005694 <HAL_SD_Init+0x78>
    return errorstate;
 80056aa:	2303      	movs	r3, #3
  errorstate = SD_CmdError(hsd);
 80056ac:	f88d 3013 	strb.w	r3, [sp, #19]
  if(errorstate != SD_OK)
 80056b0:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80056b4:	b18b      	cbz	r3, 80056da <HAL_SD_Init+0xbe>
  return errorstate;
 80056b6:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80056ba:	b2db      	uxtb	r3, r3
  errorstate = SD_PowerON(hsd); 
 80056bc:	f88d 3012 	strb.w	r3, [sp, #18]
  if(errorstate != SD_OK)     
 80056c0:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80056c4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 80b1 	beq.w	8005830 <HAL_SD_Init+0x214>
  return errorstate;
 80056ce:	f89d 0012 	ldrb.w	r0, [sp, #18]
 80056d2:	b2c0      	uxtb	r0, r0
}
 80056d4:	b011      	add	sp, #68	; 0x44
 80056d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sdmmc_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
 80056da:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80056de:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_SDMMC_SEND_IF_COND;
 80056e0:	2308      	movs	r3, #8
 80056e2:	9306      	str	r3, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80056e4:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80056e6:	2340      	movs	r3, #64	; 0x40
 80056e8:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80056ea:	f001 f8b0 	bl	800684e <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT); 
 80056ee:	6820      	ldr	r0, [r4, #0]
 80056f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80056f2:	f013 0f45 	tst.w	r3, #69	; 0x45
 80056f6:	bf14      	ite	ne
 80056f8:	2301      	movne	r3, #1
 80056fa:	2300      	moveq	r3, #0
  uint32_t timeout = SDMMC_CMD0TIMEOUT, tmp;
 80056fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  while((!tmp) && (timeout > 0))
 8005700:	b90b      	cbnz	r3, 8005706 <HAL_SD_Init+0xea>
 8005702:	2a00      	cmp	r2, #0
 8005704:	d17c      	bne.n	8005800 <HAL_SD_Init+0x1e4>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT); 
 8005706:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if((timeout == 0) || tmp)
 8005708:	b112      	cbz	r2, 8005710 <HAL_SD_Init+0xf4>
 800570a:	f013 0304 	ands.w	r3, r3, #4
 800570e:	d07f      	beq.n	8005810 <HAL_SD_Init+0x1f4>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8005710:	2304      	movs	r3, #4
 8005712:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8005714:	2303      	movs	r3, #3
  errorstate = SD_CmdResp7Error(hsd);
 8005716:	f88d 3013 	strb.w	r3, [sp, #19]
  if (errorstate == SD_OK)
 800571a:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800571e:	2300      	movs	r3, #0
 8005720:	2a00      	cmp	r2, #0
 8005722:	d17c      	bne.n	800581e <HAL_SD_Init+0x202>
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 8005724:	2201      	movs	r2, #1
 8005726:	6222      	str	r2, [r4, #32]
    sdtype        = SD_HIGH_CAPACITY;
 8005728:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800572c:	2537      	movs	r5, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800572e:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Argument         = 0;
 8005730:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8005732:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005734:	f001 f88b 	bl	800684e <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8005738:	4629      	mov	r1, r5
 800573a:	4620      	mov	r0, r4
 800573c:	f7ff fbec 	bl	8004f18 <SD_CmdResp1Error>
 8005740:	f88d 0013 	strb.w	r0, [sp, #19]
  if(errorstate == SD_OK)
 8005744:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8005748:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1b2      	bne.n	80056b6 <HAL_SD_Init+0x9a>
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 8005750:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
      sdmmc_cmdinitstructure.Argument         = 0;
 8005754:	46a8      	mov	r8, r5
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 8005756:	f447 1780 	orr.w	r7, r7, #1048576	; 0x100000
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800575a:	f04f 0b37 	mov.w	fp, #55	; 0x37
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800575e:	a905      	add	r1, sp, #20
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005760:	f04f 0a40 	mov.w	sl, #64	; 0x40
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005764:	f44f 6980 	mov.w	r9, #1024	; 0x400
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005768:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = 0;
 800576a:	f8cd 8014 	str.w	r8, [sp, #20]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800576e:	f8cd b018 	str.w	fp, [sp, #24]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005772:	f8cd a01c 	str.w	sl, [sp, #28]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005776:	f8cd 8020 	str.w	r8, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800577a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800577e:	f001 f866 	bl	800684e <SDMMC_SendCommand>
      errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8005782:	4659      	mov	r1, fp
 8005784:	4620      	mov	r0, r4
 8005786:	f7ff fbc7 	bl	8004f18 <SD_CmdResp1Error>
 800578a:	f88d 0013 	strb.w	r0, [sp, #19]
      if(errorstate != SD_OK)
 800578e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8005792:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005796:	2b00      	cmp	r3, #0
 8005798:	d18d      	bne.n	80056b6 <HAL_SD_Init+0x9a>
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 800579a:	2329      	movs	r3, #41	; 0x29
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800579c:	a905      	add	r1, sp, #20
 800579e:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 80057a0:	9705      	str	r7, [sp, #20]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 80057a2:	9306      	str	r3, [sp, #24]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80057a4:	f8cd a01c 	str.w	sl, [sp, #28]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80057a8:	9208      	str	r2, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80057aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80057ae:	f001 f84e 	bl	800684e <SDMMC_SendCommand>
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 80057b2:	6820      	ldr	r0, [r4, #0]
 80057b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80057b6:	f013 0f45 	tst.w	r3, #69	; 0x45
 80057ba:	d0fb      	beq.n	80057b4 <HAL_SD_Init+0x198>
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 80057bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80057be:	f013 0304 	ands.w	r3, r3, #4
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 80057c2:	bf1b      	ittet	ne
 80057c4:	2304      	movne	r3, #4
 80057c6:	6383      	strne	r3, [r0, #56]	; 0x38
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057c8:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    return errorstate;
 80057cc:	2303      	movne	r3, #3
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057ce:	bf08      	it	eq
 80057d0:	6382      	streq	r2, [r0, #56]	; 0x38
      errorstate = SD_CmdResp3Error(hsd);
 80057d2:	f88d 3013 	strb.w	r3, [sp, #19]
      if(errorstate != SD_OK)
 80057d6:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80057da:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f47f af69 	bne.w	80056b6 <HAL_SD_Init+0x9a>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80057e4:	f001 f848 	bl	8006878 <SDMMC_GetResponse>
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 80057e8:	2800      	cmp	r0, #0
      count++;
 80057ea:	f105 0501 	add.w	r5, r5, #1
 80057ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 80057f2:	db16      	blt.n	8005822 <HAL_SD_Init+0x206>
 80057f4:	429d      	cmp	r5, r3
 80057f6:	d1b0      	bne.n	800575a <HAL_SD_Init+0x13e>
      errorstate = SD_INVALID_VOLTRANGE;
 80057f8:	231b      	movs	r3, #27
 80057fa:	f88d 3013 	strb.w	r3, [sp, #19]
 80057fe:	e75a      	b.n	80056b6 <HAL_SD_Init+0x9a>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT);
 8005800:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005802:	f013 0f45 	tst.w	r3, #69	; 0x45
 8005806:	bf14      	ite	ne
 8005808:	2301      	movne	r3, #1
 800580a:	2300      	moveq	r3, #0
    timeout--;
 800580c:	3a01      	subs	r2, #1
 800580e:	e777      	b.n	8005700 <HAL_SD_Init+0xe4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDREND))
 8005810:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005812:	0652      	lsls	r2, r2, #25
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CMDREND);
 8005814:	bf46      	itte	mi
 8005816:	2240      	movmi	r2, #64	; 0x40
 8005818:	6382      	strmi	r2, [r0, #56]	; 0x38
  return errorstate;
 800581a:	2329      	movpl	r3, #41	; 0x29
 800581c:	e77b      	b.n	8005716 <HAL_SD_Init+0xfa>
  uint32_t sdtype = SD_STD_CAPACITY;
 800581e:	461f      	mov	r7, r3
 8005820:	e784      	b.n	800572c <HAL_SD_Init+0x110>
    if(count >= SD_MAX_VOLT_TRIAL)
 8005822:	429d      	cmp	r5, r3
 8005824:	d0e8      	beq.n	80057f8 <HAL_SD_Init+0x1dc>
    if((response & SD_HIGH_CAPACITY) == SD_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005826:	0047      	lsls	r7, r0, #1
      hsd->CardType = HIGH_CAPACITY_SD_CARD;
 8005828:	bf44      	itt	mi
 800582a:	2302      	movmi	r3, #2
 800582c:	6223      	strmi	r3, [r4, #32]
 800582e:	e742      	b.n	80056b6 <HAL_SD_Init+0x9a>
  if(SDMMC_GetPowerState(hsd->Instance) == 0) /* Power off */
 8005830:	6820      	ldr	r0, [r4, #0]
 8005832:	f001 f808 	bl	8006846 <SDMMC_GetPowerState>
 8005836:	2800      	cmp	r0, #0
 8005838:	f000 80c2 	beq.w	80059c0 <HAL_SD_Init+0x3a4>
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 800583c:	6a23      	ldr	r3, [r4, #32]
 800583e:	2b04      	cmp	r3, #4
 8005840:	d026      	beq.n	8005890 <HAL_SD_Init+0x274>
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
 8005842:	2302      	movs	r3, #2
 8005844:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8005846:	23c0      	movs	r3, #192	; 0xc0
 8005848:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800584a:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800584c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005850:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Argument         = 0;
 8005852:	9505      	str	r5, [sp, #20]
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005854:	9508      	str	r5, [sp, #32]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005856:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005858:	f000 fff9 	bl	800684e <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 800585c:	4620      	mov	r0, r4
 800585e:	f7ff fb45 	bl	8004eec <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 8005862:	4605      	mov	r5, r0
 8005864:	2800      	cmp	r0, #0
 8005866:	d155      	bne.n	8005914 <HAL_SD_Init+0x2f8>
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005868:	4601      	mov	r1, r0
 800586a:	6820      	ldr	r0, [r4, #0]
 800586c:	f001 f804 	bl	8006878 <SDMMC_GetResponse>
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005870:	2104      	movs	r1, #4
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005872:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005874:	6820      	ldr	r0, [r4, #0]
 8005876:	f000 ffff 	bl	8006878 <SDMMC_GetResponse>
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800587a:	2108      	movs	r1, #8
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800587c:	63e0      	str	r0, [r4, #60]	; 0x3c
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800587e:	6820      	ldr	r0, [r4, #0]
 8005880:	f000 fffa 	bl	8006878 <SDMMC_GetResponse>
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005884:	210c      	movs	r1, #12
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005886:	6420      	str	r0, [r4, #64]	; 0x40
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005888:	6820      	ldr	r0, [r4, #0]
 800588a:	f000 fff5 	bl	8006878 <SDMMC_GetResponse>
 800588e:	6460      	str	r0, [r4, #68]	; 0x44
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8005890:	6a23      	ldr	r3, [r4, #32]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d92b      	bls.n	80058ee <HAL_SD_Init+0x2d2>
 8005896:	2b06      	cmp	r3, #6
 8005898:	d029      	beq.n	80058ee <HAL_SD_Init+0x2d2>
  uint16_t sd_rca = 1;
 800589a:	2001      	movs	r0, #1
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 800589c:	6a23      	ldr	r3, [r4, #32]
 800589e:	2b04      	cmp	r3, #4
 80058a0:	f000 8092 	beq.w	80059c8 <HAL_SD_Init+0x3ac>
    hsd->RCA = sd_rca;
 80058a4:	6260      	str	r0, [r4, #36]	; 0x24
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 80058a6:	2309      	movs	r3, #9
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80058a8:	0400      	lsls	r0, r0, #16
 80058aa:	9005      	str	r0, [sp, #20]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 80058ac:	9306      	str	r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80058ae:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 80058b0:	23c0      	movs	r3, #192	; 0xc0
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80058b2:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 80058b4:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80058b6:	f000 ffca 	bl	800684e <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 80058ba:	4620      	mov	r0, r4
 80058bc:	f7ff fb16 	bl	8004eec <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 80058c0:	4605      	mov	r5, r0
 80058c2:	bb38      	cbnz	r0, 8005914 <HAL_SD_Init+0x2f8>
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80058c4:	4601      	mov	r1, r0
 80058c6:	6820      	ldr	r0, [r4, #0]
 80058c8:	f000 ffd6 	bl	8006878 <SDMMC_GetResponse>
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80058cc:	2104      	movs	r1, #4
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80058ce:	62a0      	str	r0, [r4, #40]	; 0x28
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80058d0:	6820      	ldr	r0, [r4, #0]
 80058d2:	f000 ffd1 	bl	8006878 <SDMMC_GetResponse>
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80058d6:	2108      	movs	r1, #8
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80058d8:	62e0      	str	r0, [r4, #44]	; 0x2c
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80058da:	6820      	ldr	r0, [r4, #0]
 80058dc:	f000 ffcc 	bl	8006878 <SDMMC_GetResponse>
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80058e0:	210c      	movs	r1, #12
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80058e2:	6320      	str	r0, [r4, #48]	; 0x30
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80058e4:	6820      	ldr	r0, [r4, #0]
 80058e6:	f000 ffc7 	bl	8006878 <SDMMC_GetResponse>
 80058ea:	6360      	str	r0, [r4, #52]	; 0x34
 80058ec:	e012      	b.n	8005914 <HAL_SD_Init+0x2f8>
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
 80058ee:	2303      	movs	r3, #3
 80058f0:	9306      	str	r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80058f2:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80058f4:	2340      	movs	r3, #64	; 0x40
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80058f6:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80058f8:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80058fa:	f000 ffa8 	bl	800684e <SDMMC_SendCommand>
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 80058fe:	6820      	ldr	r0, [r4, #0]
 8005900:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005902:	f013 0f45 	tst.w	r3, #69	; 0x45
 8005906:	d0fb      	beq.n	8005900 <HAL_SD_Init+0x2e4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8005908:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800590a:	075d      	lsls	r5, r3, #29
 800590c:	d536      	bpl.n	800597c <HAL_SD_Init+0x360>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 800590e:	2304      	movs	r3, #4
 8005910:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8005912:	2503      	movs	r5, #3
  errorstate = SD_Initialize_Cards(hsd);
 8005914:	f88d 5012 	strb.w	r5, [sp, #18]
  if (errorstate != SD_OK)
 8005918:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800591c:	2b00      	cmp	r3, #0
 800591e:	f47f aed6 	bne.w	80056ce <HAL_SD_Init+0xb2>
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
 8005922:	4631      	mov	r1, r6
 8005924:	4620      	mov	r0, r4
 8005926:	f7ff fd3f 	bl	80053a8 <HAL_SD_Get_CardInfo>
 800592a:	f88d 0012 	strb.w	r0, [sp, #18]
  if (errorstate == SD_OK)
 800592e:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8005932:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005936:	b9ab      	cbnz	r3, 8005964 <HAL_SD_Init+0x348>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8005938:	f8b6 3054 	ldrh.w	r3, [r6, #84]	; 0x54
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800593c:	6820      	ldr	r0, [r4, #0]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800593e:	9208      	str	r2, [sp, #32]
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8005940:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.Argument         = (uint32_t)addr;
 8005942:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005944:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 8005946:	2507      	movs	r5, #7
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005948:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800594a:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800594c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005950:	9309      	str	r3, [sp, #36]	; 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 8005952:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005954:	f000 ff7b 	bl	800684e <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEL_DESEL_CARD);
 8005958:	4629      	mov	r1, r5
 800595a:	4620      	mov	r0, r4
 800595c:	f7ff fadc 	bl	8004f18 <SD_CmdResp1Error>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8005960:	f88d 0012 	strb.w	r0, [sp, #18]
  SDMMC_Init(hsd->Instance, hsd->Init);   
 8005964:	f104 0310 	add.w	r3, r4, #16
 8005968:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800596c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005970:	1d23      	adds	r3, r4, #4
 8005972:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005974:	6820      	ldr	r0, [r4, #0]
 8005976:	f000 ff43 	bl	8006800 <SDMMC_Init>
 800597a:	e6a8      	b.n	80056ce <HAL_SD_Init+0xb2>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 800597c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800597e:	f015 0501 	ands.w	r5, r5, #1
 8005982:	d002      	beq.n	800598a <HAL_SD_Init+0x36e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8005984:	2501      	movs	r5, #1
 8005986:	6385      	str	r5, [r0, #56]	; 0x38
 8005988:	e7c4      	b.n	8005914 <HAL_SD_Init+0x2f8>
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 800598a:	f000 ff72 	bl	8006872 <SDMMC_GetCommandResponse>
 800598e:	2803      	cmp	r0, #3
 8005990:	d001      	beq.n	8005996 <HAL_SD_Init+0x37a>
    return errorstate;
 8005992:	2510      	movs	r5, #16
 8005994:	e7be      	b.n	8005914 <HAL_SD_Init+0x2f8>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005996:	6820      	ldr	r0, [r4, #0]
 8005998:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800599c:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800599e:	4629      	mov	r1, r5
 80059a0:	f000 ff6a 	bl	8006878 <SDMMC_GetResponse>
  if((response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)) == SD_ALLZERO)
 80059a4:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 80059a8:	d101      	bne.n	80059ae <HAL_SD_Init+0x392>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80059aa:	0c00      	lsrs	r0, r0, #16
 80059ac:	e776      	b.n	800589c <HAL_SD_Init+0x280>
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
 80059ae:	0481      	lsls	r1, r0, #18
 80059b0:	d408      	bmi.n	80059c4 <HAL_SD_Init+0x3a8>
  if((response_r1 & SD_R6_ILLEGAL_CMD) == SD_R6_ILLEGAL_CMD)
 80059b2:	0442      	lsls	r2, r0, #17
 80059b4:	d4ed      	bmi.n	8005992 <HAL_SD_Init+0x376>
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
 80059b6:	0403      	lsls	r3, r0, #16
 80059b8:	f57f af6f 	bpl.w	800589a <HAL_SD_Init+0x27e>
    return(SD_COM_CRC_FAILED);
 80059bc:	250f      	movs	r5, #15
 80059be:	e7a9      	b.n	8005914 <HAL_SD_Init+0x2f8>
    return errorstate;
 80059c0:	2525      	movs	r5, #37	; 0x25
 80059c2:	e7a7      	b.n	8005914 <HAL_SD_Init+0x2f8>
    return(SD_GENERAL_UNKNOWN_ERROR);
 80059c4:	2513      	movs	r5, #19
 80059c6:	e7a5      	b.n	8005914 <HAL_SD_Init+0x2f8>
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 80059c8:	2500      	movs	r5, #0
 80059ca:	e7a3      	b.n	8005914 <HAL_SD_Init+0x2f8>

080059cc <HAL_SD_WideBusOperation_Config>:
{
 80059cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hsd->CardType == MULTIMEDIA_CARD)
 80059ce:	6a03      	ldr	r3, [r0, #32]
 80059d0:	2b03      	cmp	r3, #3
{
 80059d2:	b08d      	sub	sp, #52	; 0x34
 80059d4:	4605      	mov	r5, r0
 80059d6:	460e      	mov	r6, r1
  if (hsd->CardType == MULTIMEDIA_CARD)
 80059d8:	f000 8088 	beq.w	8005aec <HAL_SD_WideBusOperation_Config+0x120>
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 80059dc:	2b02      	cmp	r3, #2
 80059de:	f200 8083 	bhi.w	8005ae8 <HAL_SD_WideBusOperation_Config+0x11c>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80059e2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80059e6:	f000 8081 	beq.w	8005aec <HAL_SD_WideBusOperation_Config+0x120>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80059ea:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80059ee:	d14c      	bne.n	8005a8a <HAL_SD_WideBusOperation_Config+0xbe>
  uint32_t scr[2] = {0, 0};
 80059f0:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 80059f2:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 80059f4:	9104      	str	r1, [sp, #16]
 80059f6:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 80059f8:	f000 ff3e 	bl	8006878 <SDMMC_GetResponse>
 80059fc:	0180      	lsls	r0, r0, #6
 80059fe:	d46d      	bmi.n	8005adc <HAL_SD_WideBusOperation_Config+0x110>
  errorstate = SD_FindSCR(hsd, scr);
 8005a00:	a904      	add	r1, sp, #16
 8005a02:	4628      	mov	r0, r5
 8005a04:	f7ff fafe 	bl	8005004 <SD_FindSCR>
  if(errorstate != SD_OK)
 8005a08:	4604      	mov	r4, r0
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	d167      	bne.n	8005ade <HAL_SD_WideBusOperation_Config+0x112>
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 8005a0e:	9b05      	ldr	r3, [sp, #20]
 8005a10:	0359      	lsls	r1, r3, #13
 8005a12:	d567      	bpl.n	8005ae4 <HAL_SD_WideBusOperation_Config+0x118>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8005a14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a16:	9009      	str	r0, [sp, #36]	; 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8005a18:	041b      	lsls	r3, r3, #16
 8005a1a:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005a1c:	2340      	movs	r3, #64	; 0x40
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8005a1e:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005a20:	9308      	str	r3, [sp, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005a22:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005a28:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005a2a:	930a      	str	r3, [sp, #40]	; 0x28
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8005a2c:	9707      	str	r7, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005a2e:	f000 ff0e 	bl	800684e <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8005a32:	4639      	mov	r1, r7
 8005a34:	4628      	mov	r0, r5
 8005a36:	f7ff fa6f 	bl	8004f18 <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d14e      	bne.n	8005ade <HAL_SD_WideBusOperation_Config+0x112>
    sdmmc_cmdinitstructure.Argument         = 2;
 8005a40:	2302      	movs	r3, #2
 8005a42:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8005a44:	2406      	movs	r4, #6
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005a46:	a906      	add	r1, sp, #24
 8005a48:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8005a4a:	9407      	str	r4, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005a4c:	f000 feff 	bl	800684e <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 8005a50:	4621      	mov	r1, r4
 8005a52:	4628      	mov	r0, r5
 8005a54:	f7ff fa60 	bl	8004f18 <SD_CmdResp1Error>
 8005a58:	4604      	mov	r4, r0
    if (errorstate == SD_OK)
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d13f      	bne.n	8005ade <HAL_SD_WideBusOperation_Config+0x112>
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
 8005a5e:	686b      	ldr	r3, [r5, #4]
 8005a60:	9306      	str	r3, [sp, #24]
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
 8005a62:	68ab      	ldr	r3, [r5, #8]
 8005a64:	9307      	str	r3, [sp, #28]
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005a66:	68eb      	ldr	r3, [r5, #12]
 8005a68:	9308      	str	r3, [sp, #32]
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005a6a:	696b      	ldr	r3, [r5, #20]
 8005a6c:	930a      	str	r3, [sp, #40]	; 0x28
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
 8005a6e:	69ab      	ldr	r3, [r5, #24]
 8005a70:	930b      	str	r3, [sp, #44]	; 0x2c
      tmpinit.BusWide             = WideMode;
 8005a72:	9609      	str	r6, [sp, #36]	; 0x24
      SDMMC_Init(hsd->Instance, tmpinit);
 8005a74:	ab0c      	add	r3, sp, #48	; 0x30
 8005a76:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8005a7a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005a7e:	ab06      	add	r3, sp, #24
 8005a80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a82:	6828      	ldr	r0, [r5, #0]
 8005a84:	f000 febc 	bl	8006800 <SDMMC_Init>
 8005a88:	e029      	b.n	8005ade <HAL_SD_WideBusOperation_Config+0x112>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005a8a:	2900      	cmp	r1, #0
 8005a8c:	d130      	bne.n	8005af0 <HAL_SD_WideBusOperation_Config+0x124>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8005a8e:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8005a90:	9104      	str	r1, [sp, #16]
 8005a92:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8005a94:	f000 fef0 	bl	8006878 <SDMMC_GetResponse>
 8005a98:	0182      	lsls	r2, r0, #6
 8005a9a:	d41f      	bmi.n	8005adc <HAL_SD_WideBusOperation_Config+0x110>
  errorstate = SD_FindSCR(hsd, scr);
 8005a9c:	a904      	add	r1, sp, #16
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f7ff fab0 	bl	8005004 <SD_FindSCR>
  if(errorstate != SD_OK)
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	b9d0      	cbnz	r0, 8005ade <HAL_SD_WideBusOperation_Config+0x112>
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 8005aa8:	9b05      	ldr	r3, [sp, #20]
 8005aaa:	03db      	lsls	r3, r3, #15
 8005aac:	d51a      	bpl.n	8005ae4 <HAL_SD_WideBusOperation_Config+0x118>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8005aae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ab0:	9009      	str	r0, [sp, #36]	; 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8005ab2:	041b      	lsls	r3, r3, #16
 8005ab4:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005ab6:	2340      	movs	r3, #64	; 0x40
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8005ab8:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005aba:	9308      	str	r3, [sp, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005abc:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005ac2:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005ac4:	930a      	str	r3, [sp, #40]	; 0x28
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8005ac6:	9707      	str	r7, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005ac8:	f000 fec1 	bl	800684e <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8005acc:	4639      	mov	r1, r7
 8005ace:	4628      	mov	r0, r5
 8005ad0:	f7ff fa22 	bl	8004f18 <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	b910      	cbnz	r0, 8005ade <HAL_SD_WideBusOperation_Config+0x112>
    sdmmc_cmdinitstructure.Argument         = 0;
 8005ad8:	9006      	str	r0, [sp, #24]
 8005ada:	e7b3      	b.n	8005a44 <HAL_SD_WideBusOperation_Config+0x78>
    return errorstate;
 8005adc:	240e      	movs	r4, #14
}
 8005ade:	4620      	mov	r0, r4
 8005ae0:	b00d      	add	sp, #52	; 0x34
 8005ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return errorstate;
 8005ae4:	2425      	movs	r4, #37	; 0x25
 8005ae6:	e7fa      	b.n	8005ade <HAL_SD_WideBusOperation_Config+0x112>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8005ae8:	2400      	movs	r4, #0
 8005aea:	e7f8      	b.n	8005ade <HAL_SD_WideBusOperation_Config+0x112>
    return errorstate;
 8005aec:	2427      	movs	r4, #39	; 0x27
 8005aee:	e7f6      	b.n	8005ade <HAL_SD_WideBusOperation_Config+0x112>
      errorstate = SD_INVALID_PARAMETER;
 8005af0:	2426      	movs	r4, #38	; 0x26
 8005af2:	e7f4      	b.n	8005ade <HAL_SD_WideBusOperation_Config+0x112>

08005af4 <HAL_SD_StopTransfer>:
{
 8005af4:	b530      	push	{r4, r5, lr}
 8005af6:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Argument         = 0;
 8005af8:	2300      	movs	r3, #0
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005afa:	2240      	movs	r2, #64	; 0x40
{
 8005afc:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.Argument         = 0;
 8005afe:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8005b00:	250c      	movs	r5, #12
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b02:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005b04:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005b0a:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005b0c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005b0e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8005b10:	9502      	str	r5, [sp, #8]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005b12:	f000 fe9c 	bl	800684e <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_STOP_TRANSMISSION);
 8005b16:	4629      	mov	r1, r5
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f7ff f9fd 	bl	8004f18 <SD_CmdResp1Error>
}
 8005b1e:	b007      	add	sp, #28
 8005b20:	bd30      	pop	{r4, r5, pc}

08005b22 <HAL_SD_CheckReadOperation>:
{
 8005b22:	b538      	push	{r3, r4, r5, lr}
 8005b24:	4604      	mov	r4, r0
 8005b26:	460d      	mov	r5, r1
  tmp1 = hsd->DmaTransferCplt; 
 8005b28:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 8005b2a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8005b2c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  uint32_t timeout = Timeout;
 8005b2e:	462a      	mov	r2, r5
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8005b30:	b2db      	uxtb	r3, r3
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8005b32:	4208      	tst	r0, r1
 8005b34:	d100      	bne.n	8005b38 <HAL_SD_CheckReadOperation+0x16>
 8005b36:	b1b3      	cbz	r3, 8005b66 <HAL_SD_CheckReadOperation+0x44>
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXACT)) && (timeout > 0))
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b3c:	0492      	lsls	r2, r2, #18
 8005b3e:	d500      	bpl.n	8005b42 <HAL_SD_CheckReadOperation+0x20>
 8005b40:	b9cd      	cbnz	r5, 8005b76 <HAL_SD_CheckReadOperation+0x54>
  if (hsd->SdOperation == SD_READ_MULTIPLE_BLOCK)
 8005b42:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d118      	bne.n	8005b7a <HAL_SD_CheckReadOperation+0x58>
    errorstate = HAL_SD_StopTransfer(hsd);
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f7ff ffd3 	bl	8005af4 <HAL_SD_StopTransfer>
  if ((timeout == 0) && (errorstate == SD_OK))
 8005b4e:	b90d      	cbnz	r5, 8005b54 <HAL_SD_CheckReadOperation+0x32>
 8005b50:	b900      	cbnz	r0, 8005b54 <HAL_SD_CheckReadOperation+0x32>
    errorstate = SD_DATA_TIMEOUT;
 8005b52:	2004      	movs	r0, #4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005b5a:	639a      	str	r2, [r3, #56]	; 0x38
  if (hsd->SdTransferErr != SD_OK)
 8005b5c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005b5e:	b183      	cbz	r3, 8005b82 <HAL_SD_CheckReadOperation+0x60>
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 8005b60:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005b62:	b2c0      	uxtb	r0, r0
 8005b64:	bd38      	pop	{r3, r4, r5, pc}
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8005b66:	2a00      	cmp	r2, #0
 8005b68:	d0e6      	beq.n	8005b38 <HAL_SD_CheckReadOperation+0x16>
    tmp1 = hsd->DmaTransferCplt; 
 8005b6a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 8005b6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 8005b6e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 8005b70:	3a01      	subs	r2, #1
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	e7dd      	b.n	8005b32 <HAL_SD_CheckReadOperation+0x10>
    timeout--;  
 8005b76:	3d01      	subs	r5, #1
 8005b78:	e7df      	b.n	8005b3a <HAL_SD_CheckReadOperation+0x18>
  if ((timeout == 0) && (errorstate == SD_OK))
 8005b7a:	2d00      	cmp	r5, #0
 8005b7c:	d0e9      	beq.n	8005b52 <HAL_SD_CheckReadOperation+0x30>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8005b7e:	2000      	movs	r0, #0
 8005b80:	e7e8      	b.n	8005b54 <HAL_SD_CheckReadOperation+0x32>
}
 8005b82:	bd38      	pop	{r3, r4, r5, pc}

08005b84 <HAL_SD_GetStatus>:
{
 8005b84:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8005b86:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8005b88:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8005b8a:	041b      	lsls	r3, r3, #16
 8005b8c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8005b8e:	2340      	movs	r3, #64	; 0x40
 8005b90:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b92:	2300      	movs	r3, #0
{
 8005b94:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 8005b96:	250d      	movs	r5, #13
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b98:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005b9a:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005ba0:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8005ba2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 8005ba4:	9502      	str	r5, [sp, #8]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8005ba6:	f000 fe52 	bl	800684e <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEND_STATUS);
 8005baa:	4629      	mov	r1, r5
 8005bac:	4620      	mov	r0, r4
 8005bae:	f7ff f9b3 	bl	8004f18 <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 8005bb2:	4601      	mov	r1, r0
 8005bb4:	b948      	cbnz	r0, 8005bca <HAL_SD_GetStatus+0x46>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005bb6:	6820      	ldr	r0, [r4, #0]
 8005bb8:	f000 fe5e 	bl	8006878 <SDMMC_GetResponse>
  if (cardstate == SD_CARD_TRANSFER)
 8005bbc:	f3c0 2043 	ubfx	r0, r0, #9, #4
    return SD_TRANSFER_OK;
 8005bc0:	3804      	subs	r0, #4
 8005bc2:	bf18      	it	ne
 8005bc4:	2001      	movne	r0, #1
}
 8005bc6:	b007      	add	sp, #28
 8005bc8:	bd30      	pop	{r4, r5, pc}
    return SD_TRANSFER_ERROR;
 8005bca:	2002      	movs	r0, #2
 8005bcc:	e7fb      	b.n	8005bc6 <HAL_SD_GetStatus+0x42>

08005bce <HAL_SD_CheckWriteOperation>:
{
 8005bce:	b570      	push	{r4, r5, r6, lr}
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	460e      	mov	r6, r1
  tmp1 = hsd->DmaTransferCplt; 
 8005bd4:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 8005bd6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8005bd8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  uint32_t timeout = Timeout;
 8005bda:	4632      	mov	r2, r6
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8005bdc:	b2db      	uxtb	r3, r3
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8005bde:	4208      	tst	r0, r1
 8005be0:	d100      	bne.n	8005be4 <HAL_SD_CheckWriteOperation+0x16>
 8005be2:	b1c3      	cbz	r3, 8005c16 <HAL_SD_CheckWriteOperation+0x48>
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXACT))  && (timeout > 0))
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be8:	04d2      	lsls	r2, r2, #19
 8005bea:	d500      	bpl.n	8005bee <HAL_SD_CheckWriteOperation+0x20>
 8005bec:	b9de      	cbnz	r6, 8005c26 <HAL_SD_CheckWriteOperation+0x58>
  if (hsd->SdOperation == SD_WRITE_MULTIPLE_BLOCK)
 8005bee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d120      	bne.n	8005c36 <HAL_SD_CheckWriteOperation+0x68>
    errorstate = HAL_SD_StopTransfer(hsd);
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	f7ff ff7d 	bl	8005af4 <HAL_SD_StopTransfer>
 8005bfa:	4605      	mov	r5, r0
  if ((timeout == 0) && (errorstate == SD_OK))
 8005bfc:	b90e      	cbnz	r6, 8005c02 <HAL_SD_CheckWriteOperation+0x34>
 8005bfe:	b900      	cbnz	r0, 8005c02 <HAL_SD_CheckWriteOperation+0x34>
    errorstate = SD_DATA_TIMEOUT;
 8005c00:	2504      	movs	r5, #4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005c08:	639a      	str	r2, [r3, #56]	; 0x38
  if (hsd->SdTransferErr != SD_OK)
 8005c0a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005c0c:	b16b      	cbz	r3, 8005c2a <HAL_SD_CheckWriteOperation+0x5c>
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 8005c0e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005c10:	b2ed      	uxtb	r5, r5
}
 8005c12:	4628      	mov	r0, r5
 8005c14:	bd70      	pop	{r4, r5, r6, pc}
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8005c16:	2a00      	cmp	r2, #0
 8005c18:	d0e4      	beq.n	8005be4 <HAL_SD_CheckWriteOperation+0x16>
    tmp1 = hsd->DmaTransferCplt; 
 8005c1a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 8005c1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8005c1e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 8005c20:	3a01      	subs	r2, #1
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	e7db      	b.n	8005bde <HAL_SD_CheckWriteOperation+0x10>
    timeout--;  
 8005c26:	3e01      	subs	r6, #1
 8005c28:	e7dd      	b.n	8005be6 <HAL_SD_CheckWriteOperation+0x18>
  while(HAL_SD_GetStatus(hsd) != SD_TRANSFER_OK)
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f7ff ffaa 	bl	8005b84 <HAL_SD_GetStatus>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	d1fa      	bne.n	8005c2a <HAL_SD_CheckWriteOperation+0x5c>
 8005c34:	e7ed      	b.n	8005c12 <HAL_SD_CheckWriteOperation+0x44>
  if ((timeout == 0) && (errorstate == SD_OK))
 8005c36:	2e00      	cmp	r6, #0
 8005c38:	d0e2      	beq.n	8005c00 <HAL_SD_CheckWriteOperation+0x32>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8005c3a:	2500      	movs	r5, #0
 8005c3c:	e7e1      	b.n	8005c02 <HAL_SD_CheckWriteOperation+0x34>

08005c3e <HAL_TIM_Base_MspInit>:
 8005c3e:	4770      	bx	lr

08005c40 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c40:	6803      	ldr	r3, [r0, #0]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	f042 0201 	orr.w	r2, r2, #1
 8005c48:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	f042 0201 	orr.w	r2, r2, #1
 8005c50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8005c52:	2000      	movs	r0, #0
 8005c54:	4770      	bx	lr
	...

08005c58 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c58:	4a2e      	ldr	r2, [pc, #184]	; (8005d14 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8005c5a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c5c:	4290      	cmp	r0, r2
 8005c5e:	d012      	beq.n	8005c86 <TIM_Base_SetConfig+0x2e>
 8005c60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005c64:	d00f      	beq.n	8005c86 <TIM_Base_SetConfig+0x2e>
 8005c66:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005c6a:	4290      	cmp	r0, r2
 8005c6c:	d00b      	beq.n	8005c86 <TIM_Base_SetConfig+0x2e>
 8005c6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c72:	4290      	cmp	r0, r2
 8005c74:	d007      	beq.n	8005c86 <TIM_Base_SetConfig+0x2e>
 8005c76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c7a:	4290      	cmp	r0, r2
 8005c7c:	d003      	beq.n	8005c86 <TIM_Base_SetConfig+0x2e>
 8005c7e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005c82:	4290      	cmp	r0, r2
 8005c84:	d119      	bne.n	8005cba <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8005c86:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c8c:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c8e:	4a21      	ldr	r2, [pc, #132]	; (8005d14 <TIM_Base_SetConfig+0xbc>)
 8005c90:	4290      	cmp	r0, r2
 8005c92:	d01d      	beq.n	8005cd0 <TIM_Base_SetConfig+0x78>
 8005c94:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005c98:	d01a      	beq.n	8005cd0 <TIM_Base_SetConfig+0x78>
 8005c9a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005c9e:	4290      	cmp	r0, r2
 8005ca0:	d016      	beq.n	8005cd0 <TIM_Base_SetConfig+0x78>
 8005ca2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ca6:	4290      	cmp	r0, r2
 8005ca8:	d012      	beq.n	8005cd0 <TIM_Base_SetConfig+0x78>
 8005caa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cae:	4290      	cmp	r0, r2
 8005cb0:	d00e      	beq.n	8005cd0 <TIM_Base_SetConfig+0x78>
 8005cb2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005cb6:	4290      	cmp	r0, r2
 8005cb8:	d00a      	beq.n	8005cd0 <TIM_Base_SetConfig+0x78>
 8005cba:	4a17      	ldr	r2, [pc, #92]	; (8005d18 <TIM_Base_SetConfig+0xc0>)
 8005cbc:	4290      	cmp	r0, r2
 8005cbe:	d007      	beq.n	8005cd0 <TIM_Base_SetConfig+0x78>
 8005cc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cc4:	4290      	cmp	r0, r2
 8005cc6:	d003      	beq.n	8005cd0 <TIM_Base_SetConfig+0x78>
 8005cc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ccc:	4290      	cmp	r0, r2
 8005cce:	d103      	bne.n	8005cd8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cd0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cd6:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8005cd8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cda:	688b      	ldr	r3, [r1, #8]
 8005cdc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005cde:	680b      	ldr	r3, [r1, #0]
 8005ce0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ce2:	4b0c      	ldr	r3, [pc, #48]	; (8005d14 <TIM_Base_SetConfig+0xbc>)
 8005ce4:	4298      	cmp	r0, r3
 8005ce6:	d00f      	beq.n	8005d08 <TIM_Base_SetConfig+0xb0>
 8005ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cec:	4298      	cmp	r0, r3
 8005cee:	d00b      	beq.n	8005d08 <TIM_Base_SetConfig+0xb0>
 8005cf0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005cf4:	4298      	cmp	r0, r3
 8005cf6:	d007      	beq.n	8005d08 <TIM_Base_SetConfig+0xb0>
 8005cf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cfc:	4298      	cmp	r0, r3
 8005cfe:	d003      	beq.n	8005d08 <TIM_Base_SetConfig+0xb0>
 8005d00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d04:	4298      	cmp	r0, r3
 8005d06:	d101      	bne.n	8005d0c <TIM_Base_SetConfig+0xb4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d08:	690b      	ldr	r3, [r1, #16]
 8005d0a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	6143      	str	r3, [r0, #20]
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	40012c00 	.word	0x40012c00
 8005d18:	40014000 	.word	0x40014000

08005d1c <HAL_TIM_Base_Init>:
{
 8005d1c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8005d1e:	4604      	mov	r4, r0
 8005d20:	b1a0      	cbz	r0, 8005d4c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8005d22:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005d26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005d2a:	b91b      	cbnz	r3, 8005d34 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005d2c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8005d30:	f7ff ff85 	bl	8005c3e <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8005d34:	2302      	movs	r3, #2
 8005d36:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d3a:	6820      	ldr	r0, [r4, #0]
 8005d3c:	1d21      	adds	r1, r4, #4
 8005d3e:	f7ff ff8b 	bl	8005c58 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8005d42:	2301      	movs	r3, #1
 8005d44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8005d48:	2000      	movs	r0, #0
 8005d4a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005d4c:	2001      	movs	r0, #1
}
 8005d4e:	bd10      	pop	{r4, pc}

08005d50 <HAL_UART_MspInit>:
 8005d50:	4770      	bx	lr

08005d52 <HAL_UART_MspDeInit>:
 8005d52:	4770      	bx	lr

08005d54 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005d54:	b538      	push	{r3, r4, r5, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005d56:	4605      	mov	r5, r0
 8005d58:	b1a0      	cbz	r0, 8005d84 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->State = HAL_UART_STATE_BUSY;
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005d60:	6803      	ldr	r3, [r0, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]

  huart->Instance->CR1 = 0x0;
 8005d64:	2400      	movs	r4, #0
  __HAL_UART_DISABLE(huart);
 8005d66:	f022 0201 	bic.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0;
 8005d6c:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8005d6e:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8005d70:	609c      	str	r4, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005d72:	f7ff ffee 	bl	8005d52 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d76:	66ec      	str	r4, [r5, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005d78:	f885 4068 	strb.w	r4, [r5, #104]	; 0x68
  huart->State = HAL_UART_STATE_RESET;
 8005d7c:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69

  return HAL_OK;
 8005d80:	4620      	mov	r0, r4
 8005d82:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005d84:	2001      	movs	r0, #1
}
 8005d86:	bd38      	pop	{r3, r4, r5, pc}

08005d88 <HAL_UART_Receive_IT>:
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8005d88:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d003      	beq.n	8005d98 <HAL_UART_Receive_IT+0x10>
 8005d90:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8005d94:	2b12      	cmp	r3, #18
 8005d96:	d147      	bne.n	8005e28 <HAL_UART_Receive_IT+0xa0>
  {
    if((pData == NULL ) || (Size == 0))
 8005d98:	2900      	cmp	r1, #0
 8005d9a:	d043      	beq.n	8005e24 <HAL_UART_Receive_IT+0x9c>
 8005d9c:	2a00      	cmp	r2, #0
 8005d9e:	d041      	beq.n	8005e24 <HAL_UART_Receive_IT+0x9c>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005da0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d03f      	beq.n	8005e28 <HAL_UART_Receive_IT+0xa0>
 8005da8:	2301      	movs	r3, #1
 8005daa:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005dae:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8005db0:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8005db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8005db6:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8005dba:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8005dbe:	d123      	bne.n	8005e08 <HAL_UART_Receive_IT+0x80>
 8005dc0:	6903      	ldr	r3, [r0, #16]
 8005dc2:	b9fb      	cbnz	r3, 8005e04 <HAL_UART_Receive_IT+0x7c>
 8005dc4:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005dc8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8005dd0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005dd4:	6802      	ldr	r2, [r0, #0]
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8005dd6:	2b12      	cmp	r3, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8005dd8:	bf0c      	ite	eq
 8005dda:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8005ddc:	2322      	movne	r3, #34	; 0x22
 8005dde:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005de2:	6813      	ldr	r3, [r2, #0]
 8005de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de8:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005dea:	6893      	ldr	r3, [r2, #8]
 8005dec:	f043 0301 	orr.w	r3, r3, #1
 8005df0:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005df2:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(huart);
 8005df4:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005df6:	f041 0120 	orr.w	r1, r1, #32
    __HAL_UNLOCK(huart);
 8005dfa:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005dfe:	6011      	str	r1, [r2, #0]

    return HAL_OK;
 8005e00:	4618      	mov	r0, r3
 8005e02:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8005e04:	23ff      	movs	r3, #255	; 0xff
 8005e06:	e7df      	b.n	8005dc8 <HAL_UART_Receive_IT+0x40>
 8005e08:	b923      	cbnz	r3, 8005e14 <HAL_UART_Receive_IT+0x8c>
 8005e0a:	6903      	ldr	r3, [r0, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0f9      	beq.n	8005e04 <HAL_UART_Receive_IT+0x7c>
 8005e10:	237f      	movs	r3, #127	; 0x7f
 8005e12:	e7d9      	b.n	8005dc8 <HAL_UART_Receive_IT+0x40>
 8005e14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e18:	d1d8      	bne.n	8005dcc <HAL_UART_Receive_IT+0x44>
 8005e1a:	6903      	ldr	r3, [r0, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0f7      	beq.n	8005e10 <HAL_UART_Receive_IT+0x88>
 8005e20:	233f      	movs	r3, #63	; 0x3f
 8005e22:	e7d1      	b.n	8005dc8 <HAL_UART_Receive_IT+0x40>
      return HAL_ERROR;
 8005e24:	2001      	movs	r0, #1
 8005e26:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005e28:	2002      	movs	r0, #2
  }
}
 8005e2a:	4770      	bx	lr

08005e2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2e:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8005e30:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e32:	6921      	ldr	r1, [r4, #16]
 8005e34:	68a3      	ldr	r3, [r4, #8]
 8005e36:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005e38:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e3a:	430b      	orrs	r3, r1
 8005e3c:	6961      	ldr	r1, [r4, #20]
 8005e3e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005e40:	49b0      	ldr	r1, [pc, #704]	; (8006104 <UART_SetConfig+0x2d8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e42:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005e44:	4001      	ands	r1, r0
 8005e46:	430b      	orrs	r3, r1
 8005e48:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e4a:	686b      	ldr	r3, [r5, #4]
 8005e4c:	68e1      	ldr	r1, [r4, #12]
 8005e4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005e52:	430b      	orrs	r3, r1
 8005e54:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e56:	4bac      	ldr	r3, [pc, #688]	; (8006108 <UART_SetConfig+0x2dc>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e58:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e5a:	429d      	cmp	r5, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e5c:	bf1c      	itt	ne
 8005e5e:	6a23      	ldrne	r3, [r4, #32]
 8005e60:	4319      	orrne	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005e62:	68ab      	ldr	r3, [r5, #8]
 8005e64:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e6c:	4ba7      	ldr	r3, [pc, #668]	; (800610c <UART_SetConfig+0x2e0>)
 8005e6e:	429d      	cmp	r5, r3
 8005e70:	d118      	bne.n	8005ea4 <UART_SetConfig+0x78>
 8005e72:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005e76:	49a6      	ldr	r1, [pc, #664]	; (8006110 <UART_SetConfig+0x2e4>)
 8005e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7c:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e80:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005e84:	5ccb      	ldrb	r3, [r1, r3]
 8005e86:	f040 80c6 	bne.w	8006016 <UART_SetConfig+0x1ea>
  {
    switch (clocksource)
 8005e8a:	2b08      	cmp	r3, #8
 8005e8c:	d828      	bhi.n	8005ee0 <UART_SetConfig+0xb4>
 8005e8e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005e92:	011a      	.short	0x011a
 8005e94:	012f00bf 	.word	0x012f00bf
 8005e98:	01140027 	.word	0x01140027
 8005e9c:	00270027 	.word	0x00270027
 8005ea0:	00330027 	.word	0x00330027
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ea4:	4b9b      	ldr	r3, [pc, #620]	; (8006114 <UART_SetConfig+0x2e8>)
 8005ea6:	429d      	cmp	r5, r3
 8005ea8:	d107      	bne.n	8005eba <UART_SetConfig+0x8e>
 8005eaa:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8005eae:	499a      	ldr	r1, [pc, #616]	; (8006118 <UART_SetConfig+0x2ec>)
 8005eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb4:	f003 030c 	and.w	r3, r3, #12
 8005eb8:	e7e2      	b.n	8005e80 <UART_SetConfig+0x54>
 8005eba:	4b98      	ldr	r3, [pc, #608]	; (800611c <UART_SetConfig+0x2f0>)
 8005ebc:	429d      	cmp	r5, r3
 8005ebe:	d120      	bne.n	8005f02 <UART_SetConfig+0xd6>
 8005ec0:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8005ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ecc:	2b10      	cmp	r3, #16
 8005ece:	f000 80f1 	beq.w	80060b4 <UART_SetConfig+0x288>
 8005ed2:	d808      	bhi.n	8005ee6 <UART_SetConfig+0xba>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 80f3 	beq.w	80060c0 <UART_SetConfig+0x294>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eda:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005ede:	d134      	bne.n	8005f4a <UART_SetConfig+0x11e>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8005ee0:	2201      	movs	r2, #1
  uint16_t usartdiv                   = 0x0000;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e0f9      	b.n	80060da <UART_SetConfig+0x2ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ee6:	2b20      	cmp	r3, #32
 8005ee8:	f000 80ff 	beq.w	80060ea <UART_SetConfig+0x2be>
 8005eec:	2b30      	cmp	r3, #48	; 0x30
 8005eee:	d1f4      	bne.n	8005eda <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ef0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005ef4:	f040 80c1 	bne.w	800607a <UART_SetConfig+0x24e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005ef8:	6860      	ldr	r0, [r4, #4]
 8005efa:	0843      	lsrs	r3, r0, #1
 8005efc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005f00:	e0fc      	b.n	80060fc <UART_SetConfig+0x2d0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f02:	4b87      	ldr	r3, [pc, #540]	; (8006120 <UART_SetConfig+0x2f4>)
 8005f04:	429d      	cmp	r5, r3
 8005f06:	d122      	bne.n	8005f4e <UART_SetConfig+0x122>
 8005f08:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8005f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f14:	2b40      	cmp	r3, #64	; 0x40
 8005f16:	f000 80c0 	beq.w	800609a <UART_SetConfig+0x26e>
 8005f1a:	d806      	bhi.n	8005f2a <UART_SetConfig+0xfe>
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 80b1 	beq.w	8006084 <UART_SetConfig+0x258>
  if(UART_INSTANCE_LOWPOWER(huart))
 8005f22:	4b79      	ldr	r3, [pc, #484]	; (8006108 <UART_SetConfig+0x2dc>)
 8005f24:	429d      	cmp	r5, r3
 8005f26:	d1d8      	bne.n	8005eda <UART_SetConfig+0xae>
 8005f28:	e00f      	b.n	8005f4a <UART_SetConfig+0x11e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f2a:	2b80      	cmp	r3, #128	; 0x80
 8005f2c:	f000 80bc 	beq.w	80060a8 <UART_SetConfig+0x27c>
 8005f30:	2bc0      	cmp	r3, #192	; 0xc0
 8005f32:	d1f6      	bne.n	8005f22 <UART_SetConfig+0xf6>
  if(UART_INSTANCE_LOWPOWER(huart))
 8005f34:	4b74      	ldr	r3, [pc, #464]	; (8006108 <UART_SetConfig+0x2dc>)
 8005f36:	429d      	cmp	r5, r3
 8005f38:	d1da      	bne.n	8005ef0 <UART_SetConfig+0xc4>
 8005f3a:	2308      	movs	r3, #8
      tmpreg = (uint32_t) LSE_VALUE;
 8005f3c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8005f40:	6862      	ldr	r2, [r4, #4]
 8005f42:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8005f46:	4281      	cmp	r1, r0
 8005f48:	d92b      	bls.n	8005fa2 <UART_SetConfig+0x176>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8005f4a:	2201      	movs	r2, #1
      break;
    }
  }

  return ret;
 8005f4c:	e04b      	b.n	8005fe6 <UART_SetConfig+0x1ba>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f4e:	4b75      	ldr	r3, [pc, #468]	; (8006124 <UART_SetConfig+0x2f8>)
 8005f50:	429d      	cmp	r5, r3
 8005f52:	d111      	bne.n	8005f78 <UART_SetConfig+0x14c>
 8005f54:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8005f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f64:	f000 8099 	beq.w	800609a <UART_SetConfig+0x26e>
 8005f68:	d9d8      	bls.n	8005f1c <UART_SetConfig+0xf0>
 8005f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f6e:	f000 809b 	beq.w	80060a8 <UART_SetConfig+0x27c>
 8005f72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f76:	e7dc      	b.n	8005f32 <UART_SetConfig+0x106>
 8005f78:	4b63      	ldr	r3, [pc, #396]	; (8006108 <UART_SetConfig+0x2dc>)
 8005f7a:	429d      	cmp	r5, r3
 8005f7c:	d1ad      	bne.n	8005eda <UART_SetConfig+0xae>
 8005f7e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8005f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f86:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f8e:	f000 8084 	beq.w	800609a <UART_SetConfig+0x26e>
 8005f92:	d9c3      	bls.n	8005f1c <UART_SetConfig+0xf0>
 8005f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f98:	f000 8086 	beq.w	80060a8 <UART_SetConfig+0x27c>
 8005f9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fa0:	e7c7      	b.n	8005f32 <UART_SetConfig+0x106>
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8005fa2:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005fa6:	d8d0      	bhi.n	8005f4a <UART_SetConfig+0x11e>
        switch (clocksource)
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d82f      	bhi.n	800600c <UART_SetConfig+0x1e0>
 8005fac:	e8df f003 	tbb	[pc, r3]
 8005fb0:	2e1d2e05 	.word	0x2e1d2e05
 8005fb4:	2e2e2e25 	.word	0x2e2e2e25
 8005fb8:	28          	.byte	0x28
 8005fb9:	00          	.byte	0x00
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005fba:	f7fe ff5f 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005fbe:	6862      	ldr	r2, [r4, #4]
 8005fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fc4:	0856      	lsrs	r6, r2, #1
 8005fc6:	2700      	movs	r7, #0
 8005fc8:	fbe1 6700 	umlal	r6, r7, r1, r0
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4630      	mov	r0, r6
 8005fd0:	4639      	mov	r1, r7
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005fd2:	f7fa fe35 	bl	8000c40 <__aeabi_uldivmod>
          break;
 8005fd6:	2200      	movs	r2, #0
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8005fd8:	4b53      	ldr	r3, [pc, #332]	; (8006128 <UART_SetConfig+0x2fc>)
 8005fda:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8005fde:	4299      	cmp	r1, r3
 8005fe0:	d8b3      	bhi.n	8005f4a <UART_SetConfig+0x11e>
           huart->Instance->BRR = tmpreg;
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	60d8      	str	r0, [r3, #12]

}
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005fea:	4850      	ldr	r0, [pc, #320]	; (800612c <UART_SetConfig+0x300>)
 8005fec:	0855      	lsrs	r5, r2, #1
 8005fee:	2300      	movs	r3, #0
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	1940      	adds	r0, r0, r5
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005ff4:	f141 0100 	adc.w	r1, r1, #0
 8005ff8:	e7eb      	b.n	8005fd2 <UART_SetConfig+0x1a6>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005ffa:	f7fe fc65 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8005ffe:	e7de      	b.n	8005fbe <UART_SetConfig+0x192>
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006000:	0850      	lsrs	r0, r2, #1
 8006002:	2100      	movs	r1, #0
 8006004:	2300      	movs	r3, #0
 8006006:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800600a:	e7f3      	b.n	8005ff4 <UART_SetConfig+0x1c8>
            ret = HAL_ERROR;
 800600c:	2201      	movs	r2, #1
 800600e:	e7e3      	b.n	8005fd8 <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006010:	f7fe ff4c 	bl	8004eac <HAL_RCC_GetPCLK2Freq>
 8006014:	e059      	b.n	80060ca <UART_SetConfig+0x29e>
    switch (clocksource)
 8006016:	2b08      	cmp	r3, #8
 8006018:	d897      	bhi.n	8005f4a <UART_SetConfig+0x11e>
 800601a:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <UART_SetConfig+0x1f4>)
 800601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006020:	08006045 	.word	0x08006045
 8006024:	08006059 	.word	0x08006059
 8006028:	0800605f 	.word	0x0800605f
 800602c:	08005f4b 	.word	0x08005f4b
 8006030:	08006075 	.word	0x08006075
 8006034:	08005f4b 	.word	0x08005f4b
 8006038:	08005f4b 	.word	0x08005f4b
 800603c:	08005f4b 	.word	0x08005f4b
 8006040:	0800607b 	.word	0x0800607b
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006044:	f7fe ff1a 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006048:	6863      	ldr	r3, [r4, #4]
 800604a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800604e:	fbb0 f0f3 	udiv	r0, r0, r3
 8006052:	b280      	uxth	r0, r0
 8006054:	60e8      	str	r0, [r5, #12]
 8006056:	e01e      	b.n	8006096 <UART_SetConfig+0x26a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006058:	f7fe ff28 	bl	8004eac <HAL_RCC_GetPCLK2Freq>
 800605c:	e7f4      	b.n	8006048 <UART_SetConfig+0x21c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800605e:	6862      	ldr	r2, [r4, #4]
 8006060:	0853      	lsrs	r3, r2, #1
 8006062:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006066:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800606a:	fbb3 f3f2 	udiv	r3, r3, r2
 800606e:	b29b      	uxth	r3, r3
 8006070:	60eb      	str	r3, [r5, #12]
 8006072:	e010      	b.n	8006096 <UART_SetConfig+0x26a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006074:	f7fe fc28 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8006078:	e7e6      	b.n	8006048 <UART_SetConfig+0x21c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800607a:	6862      	ldr	r2, [r4, #4]
 800607c:	0853      	lsrs	r3, r2, #1
 800607e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006082:	e7f2      	b.n	800606a <UART_SetConfig+0x23e>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006084:	4b20      	ldr	r3, [pc, #128]	; (8006108 <UART_SetConfig+0x2dc>)
 8006086:	429d      	cmp	r5, r3
 8006088:	d11a      	bne.n	80060c0 <UART_SetConfig+0x294>
      tmpreg = HAL_RCC_GetPCLK1Freq();
 800608a:	f7fe fef7 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
      break;
 800608e:	2300      	movs	r3, #0
    if (tmpreg != 0)
 8006090:	2800      	cmp	r0, #0
 8006092:	f47f af55 	bne.w	8005f40 <UART_SetConfig+0x114>
  HAL_StatusTypeDef ret               = HAL_OK;
 8006096:	2200      	movs	r2, #0
      break;
 8006098:	e7a5      	b.n	8005fe6 <UART_SetConfig+0x1ba>
  if(UART_INSTANCE_LOWPOWER(huart))
 800609a:	4b1b      	ldr	r3, [pc, #108]	; (8006108 <UART_SetConfig+0x2dc>)
 800609c:	429d      	cmp	r5, r3
 800609e:	d109      	bne.n	80060b4 <UART_SetConfig+0x288>
      tmpreg = HAL_RCC_GetSysClockFreq();
 80060a0:	f7fe fc12 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
      break;
 80060a4:	2304      	movs	r3, #4
 80060a6:	e7f3      	b.n	8006090 <UART_SetConfig+0x264>
  if(UART_INSTANCE_LOWPOWER(huart))
 80060a8:	4b17      	ldr	r3, [pc, #92]	; (8006108 <UART_SetConfig+0x2dc>)
 80060aa:	429d      	cmp	r5, r3
 80060ac:	d11d      	bne.n	80060ea <UART_SetConfig+0x2be>
 80060ae:	2302      	movs	r3, #2
      tmpreg = (uint32_t) HSI_VALUE;
 80060b0:	481f      	ldr	r0, [pc, #124]	; (8006130 <UART_SetConfig+0x304>)
 80060b2:	e745      	b.n	8005f40 <UART_SetConfig+0x114>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060b4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80060b8:	d1dc      	bne.n	8006074 <UART_SetConfig+0x248>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80060ba:	f7fe fc05 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 80060be:	e004      	b.n	80060ca <UART_SetConfig+0x29e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060c0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80060c4:	d1be      	bne.n	8006044 <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80060c6:	f7fe fed9 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80060ca:	6861      	ldr	r1, [r4, #4]
 80060cc:	084a      	lsrs	r2, r1, #1
 80060ce:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80060d2:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80060d6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80060d8:	2200      	movs	r2, #0
    brrtemp = usartdiv & 0xFFF0;
 80060da:	f023 010f 	bic.w	r1, r3, #15
    huart->Instance->BRR = brrtemp;
 80060de:	6820      	ldr	r0, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80060e0:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80060e4:	430b      	orrs	r3, r1
 80060e6:	60c3      	str	r3, [r0, #12]
 80060e8:	e77d      	b.n	8005fe6 <UART_SetConfig+0x1ba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ea:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80060ee:	d1b6      	bne.n	800605e <UART_SetConfig+0x232>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80060f0:	6860      	ldr	r0, [r4, #4]
 80060f2:	0843      	lsrs	r3, r0, #1
 80060f4:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80060f8:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80060fc:	fbb3 f3f0 	udiv	r3, r3, r0
 8006100:	e7e9      	b.n	80060d6 <UART_SetConfig+0x2aa>
 8006102:	bf00      	nop
 8006104:	efff69f3 	.word	0xefff69f3
 8006108:	40008000 	.word	0x40008000
 800610c:	40013800 	.word	0x40013800
 8006110:	0800de76 	.word	0x0800de76
 8006114:	40004400 	.word	0x40004400
 8006118:	0800de7a 	.word	0x0800de7a
 800611c:	40004800 	.word	0x40004800
 8006120:	40004c00 	.word	0x40004c00
 8006124:	40005000 	.word	0x40005000
 8006128:	000ffcff 	.word	0x000ffcff
 800612c:	f4240000 	.word	0xf4240000
 8006130:	00f42400 	.word	0x00f42400

08006134 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006134:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006136:	07da      	lsls	r2, r3, #31
{
 8006138:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800613a:	d506      	bpl.n	800614a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800613c:	6801      	ldr	r1, [r0, #0]
 800613e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8006140:	684a      	ldr	r2, [r1, #4]
 8006142:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006146:	4322      	orrs	r2, r4
 8006148:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800614a:	079c      	lsls	r4, r3, #30
 800614c:	d506      	bpl.n	800615c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800614e:	6801      	ldr	r1, [r0, #0]
 8006150:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006152:	684a      	ldr	r2, [r1, #4]
 8006154:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006158:	4322      	orrs	r2, r4
 800615a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800615c:	0759      	lsls	r1, r3, #29
 800615e:	d506      	bpl.n	800616e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006160:	6801      	ldr	r1, [r0, #0]
 8006162:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006164:	684a      	ldr	r2, [r1, #4]
 8006166:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800616a:	4322      	orrs	r2, r4
 800616c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800616e:	071a      	lsls	r2, r3, #28
 8006170:	d506      	bpl.n	8006180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006172:	6801      	ldr	r1, [r0, #0]
 8006174:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006176:	684a      	ldr	r2, [r1, #4]
 8006178:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800617c:	4322      	orrs	r2, r4
 800617e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006180:	06dc      	lsls	r4, r3, #27
 8006182:	d506      	bpl.n	8006192 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006184:	6801      	ldr	r1, [r0, #0]
 8006186:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006188:	688a      	ldr	r2, [r1, #8]
 800618a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800618e:	4322      	orrs	r2, r4
 8006190:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006192:	0699      	lsls	r1, r3, #26
 8006194:	d506      	bpl.n	80061a4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006196:	6801      	ldr	r1, [r0, #0]
 8006198:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800619a:	688a      	ldr	r2, [r1, #8]
 800619c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061a0:	4322      	orrs	r2, r4
 80061a2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061a4:	065a      	lsls	r2, r3, #25
 80061a6:	d50f      	bpl.n	80061c8 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061a8:	6801      	ldr	r1, [r0, #0]
 80061aa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80061ac:	684a      	ldr	r2, [r1, #4]
 80061ae:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80061b2:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061b4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061b8:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061ba:	d105      	bne.n	80061c8 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061bc:	684a      	ldr	r2, [r1, #4]
 80061be:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80061c0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80061c4:	4322      	orrs	r2, r4
 80061c6:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061c8:	061b      	lsls	r3, r3, #24
 80061ca:	d506      	bpl.n	80061da <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061cc:	6802      	ldr	r2, [r0, #0]
 80061ce:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80061d0:	6853      	ldr	r3, [r2, #4]
 80061d2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80061d6:	430b      	orrs	r3, r1
 80061d8:	6053      	str	r3, [r2, #4]
 80061da:	bd10      	pop	{r4, pc}

080061dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 80061dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e0:	4604      	mov	r4, r0
 80061e2:	460e      	mov	r6, r1
 80061e4:	4690      	mov	r8, r2
 80061e6:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80061e8:	f7fd fb24 	bl	8003834 <HAL_GetTick>
 80061ec:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 80061ee:	f1b8 0f00 	cmp.w	r8, #0
 80061f2:	d02f      	beq.n	8006254 <UART_WaitOnFlagUntilTimeout+0x78>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80061f4:	6822      	ldr	r2, [r4, #0]
 80061f6:	69d3      	ldr	r3, [r2, #28]
 80061f8:	ea36 0303 	bics.w	r3, r6, r3
 80061fc:	d12f      	bne.n	800625e <UART_WaitOnFlagUntilTimeout+0x82>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80061fe:	1c6b      	adds	r3, r5, #1
 8006200:	d0f9      	beq.n	80061f6 <UART_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8006202:	b145      	cbz	r5, 8006216 <UART_WaitOnFlagUntilTimeout+0x3a>
 8006204:	f7fd fb16 	bl	8003834 <HAL_GetTick>
 8006208:	1bc0      	subs	r0, r0, r7
 800620a:	4285      	cmp	r5, r0
 800620c:	d2f2      	bcs.n	80061f4 <UART_WaitOnFlagUntilTimeout+0x18>
 800620e:	e002      	b.n	8006216 <UART_WaitOnFlagUntilTimeout+0x3a>
      if(Timeout != HAL_MAX_DELAY)
 8006210:	1c69      	adds	r1, r5, #1
 8006212:	d020      	beq.n	8006256 <UART_WaitOnFlagUntilTimeout+0x7a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8006214:	b9cd      	cbnz	r5, 800624a <UART_WaitOnFlagUntilTimeout+0x6e>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800621e:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	f022 0220 	bic.w	r2, r2, #32
 8006226:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800622e:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	f022 0201 	bic.w	r2, r2, #1
 8006236:	609a      	str	r2, [r3, #8]

          huart->State= HAL_UART_STATE_READY;
 8006238:	2301      	movs	r3, #1
 800623a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800623e:	2300      	movs	r3, #0
 8006240:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68

          return HAL_TIMEOUT;
 8006244:	2003      	movs	r0, #3
 8006246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800624a:	f7fd faf3 	bl	8003834 <HAL_GetTick>
 800624e:	1bc0      	subs	r0, r0, r7
 8006250:	4285      	cmp	r5, r0
 8006252:	d3e0      	bcc.n	8006216 <UART_WaitOnFlagUntilTimeout+0x3a>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8006254:	6822      	ldr	r2, [r4, #0]
 8006256:	69d3      	ldr	r3, [r2, #28]
 8006258:	ea36 0303 	bics.w	r3, r6, r3
 800625c:	d1d8      	bne.n	8006210 <UART_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 800625e:	2000      	movs	r0, #0
 8006260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006264 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006264:	2200      	movs	r2, #0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006266:	6803      	ldr	r3, [r0, #0]
{
 8006268:	b510      	push	{r4, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800626a:	66c2      	str	r2, [r0, #108]	; 0x6c
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	0719      	lsls	r1, r3, #28
{
 8006270:	4604      	mov	r4, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006272:	d413      	bmi.n	800629c <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	075b      	lsls	r3, r3, #29
 800627a:	d508      	bpl.n	800628e <UART_CheckIdleState+0x2a>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800627c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006280:	2200      	movs	r2, #0
 8006282:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006286:	4620      	mov	r0, r4
 8006288:	f7ff ffa8 	bl	80061dc <UART_WaitOnFlagUntilTimeout>
 800628c:	b970      	cbnz	r0, 80062ac <UART_CheckIdleState+0x48>
  huart->State= HAL_UART_STATE_READY;
 800628e:	2301      	movs	r3, #1
  __HAL_UNLOCK(huart);
 8006290:	2000      	movs	r0, #0
  huart->State= HAL_UART_STATE_READY;
 8006292:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8006296:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  return HAL_OK;
 800629a:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800629c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062a4:	f7ff ff9a 	bl	80061dc <UART_WaitOnFlagUntilTimeout>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d0e3      	beq.n	8006274 <UART_CheckIdleState+0x10>
      return HAL_TIMEOUT;
 80062ac:	2003      	movs	r0, #3
 80062ae:	bd10      	pop	{r4, pc}

080062b0 <HAL_UART_Init>:
{
 80062b0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80062b2:	4604      	mov	r4, r0
 80062b4:	b360      	cbz	r0, 8006310 <HAL_UART_Init+0x60>
  if(huart->State == HAL_UART_STATE_RESET)
 80062b6:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80062ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80062be:	b91b      	cbnz	r3, 80062c8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80062c0:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80062c4:	f7ff fd44 	bl	8005d50 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80062c8:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 80062ca:	2302      	movs	r3, #2
 80062cc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80062d0:	6813      	ldr	r3, [r2, #0]
 80062d2:	f023 0301 	bic.w	r3, r3, #1
 80062d6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062d8:	4620      	mov	r0, r4
 80062da:	f7ff fda7 	bl	8005e2c <UART_SetConfig>
 80062de:	2801      	cmp	r0, #1
 80062e0:	d016      	beq.n	8006310 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062e4:	b113      	cbz	r3, 80062ec <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80062e6:	4620      	mov	r0, r4
 80062e8:	f7ff ff24 	bl	8006134 <UART_AdvFeatureConfig>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062f4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062fc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8006304:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8006306:	601a      	str	r2, [r3, #0]
}
 8006308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800630c:	f7ff bfaa 	b.w	8006264 <UART_CheckIdleState>
}
 8006310:	2001      	movs	r0, #1
 8006312:	bd10      	pop	{r4, pc}

08006314 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006318:	680a      	ldr	r2, [r1, #0]
 800631a:	fa92 f4a2 	rbit	r4, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800631e:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006322:	fab4 f484 	clz	r4, r4
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006326:	2503      	movs	r5, #3
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006328:	270f      	movs	r7, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800632a:	fa32 f304 	lsrs.w	r3, r2, r4
 800632e:	d10d      	bne.n	800634c <LL_GPIO_Init+0x38>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006330:	684b      	ldr	r3, [r1, #4]
 8006332:	3b01      	subs	r3, #1
 8006334:	2b01      	cmp	r3, #1
 8006336:	d806      	bhi.n	8006346 <LL_GPIO_Init+0x32>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006338:	6843      	ldr	r3, [r0, #4]
 800633a:	68c9      	ldr	r1, [r1, #12]
 800633c:	ea23 0302 	bic.w	r3, r3, r2
 8006340:	434a      	muls	r2, r1
 8006342:	431a      	orrs	r2, r3
 8006344:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8006346:	2001      	movs	r0, #1
 8006348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800634c:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 8006350:	4013      	ands	r3, r2
 8006352:	d069      	beq.n	8006428 <LL_GPIO_Init+0x114>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006354:	f8d1 8004 	ldr.w	r8, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006358:	f8d0 9000 	ldr.w	r9, [r0]
 800635c:	fa93 fca3 	rbit	ip, r3
 8006360:	fabc fc8c 	clz	ip, ip
 8006364:	fa93 f6a3 	rbit	r6, r3
 8006368:	fab6 f686 	clz	r6, r6
 800636c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006370:	fa05 fc0c 	lsl.w	ip, r5, ip
 8006374:	0076      	lsls	r6, r6, #1
 8006376:	ea29 0c0c 	bic.w	ip, r9, ip
 800637a:	fa08 f606 	lsl.w	r6, r8, r6
 800637e:	ea4c 0606 	orr.w	r6, ip, r6
 8006382:	6006      	str	r6, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006384:	f108 36ff 	add.w	r6, r8, #4294967295
 8006388:	2e01      	cmp	r6, #1
 800638a:	d816      	bhi.n	80063ba <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800638c:	6886      	ldr	r6, [r0, #8]
 800638e:	fa93 fca3 	rbit	ip, r3
 8006392:	fabc fc8c 	clz	ip, ip
 8006396:	fa93 f9a3 	rbit	r9, r3
 800639a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800639e:	fa05 fc0c 	lsl.w	ip, r5, ip
 80063a2:	ea26 0c0c 	bic.w	ip, r6, ip
 80063a6:	fab9 f989 	clz	r9, r9
 80063aa:	688e      	ldr	r6, [r1, #8]
 80063ac:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80063b0:	fa06 f609 	lsl.w	r6, r6, r9
 80063b4:	ea4c 0606 	orr.w	r6, ip, r6
 80063b8:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80063ba:	68c6      	ldr	r6, [r0, #12]
 80063bc:	fa93 fca3 	rbit	ip, r3
 80063c0:	fabc fc8c 	clz	ip, ip
 80063c4:	fa93 f9a3 	rbit	r9, r3
 80063c8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80063cc:	fa05 fc0c 	lsl.w	ip, r5, ip
 80063d0:	ea26 0c0c 	bic.w	ip, r6, ip
 80063d4:	fab9 f989 	clz	r9, r9
 80063d8:	690e      	ldr	r6, [r1, #16]
 80063da:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80063de:	fa06 f609 	lsl.w	r6, r6, r9
 80063e2:	ea4c 0606 	orr.w	r6, ip, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80063e6:	f1b8 0f02 	cmp.w	r8, #2
 80063ea:	60c6      	str	r6, [r0, #12]
 80063ec:	d11c      	bne.n	8006428 <LL_GPIO_Init+0x114>
 80063ee:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80063f2:	fab6 f686 	clz	r6, r6
 80063f6:	2e07      	cmp	r6, #7
 80063f8:	f8d1 c014 	ldr.w	ip, [r1, #20]
 80063fc:	dc16      	bgt.n	800642c <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80063fe:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8006402:	fa93 f6a3 	rbit	r6, r3
 8006406:	fab6 f686 	clz	r6, r6
 800640a:	fa93 f3a3 	rbit	r3, r3
 800640e:	fab3 f383 	clz	r3, r3
 8006412:	00b6      	lsls	r6, r6, #2
 8006414:	fa07 f606 	lsl.w	r6, r7, r6
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	ea28 0606 	bic.w	r6, r8, r6
 800641e:	fa0c fc03 	lsl.w	ip, ip, r3
 8006422:	ea46 060c 	orr.w	r6, r6, ip
 8006426:	6206      	str	r6, [r0, #32]
    pinpos++;
 8006428:	3401      	adds	r4, #1
 800642a:	e77e      	b.n	800632a <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800642c:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 8006430:	0a1b      	lsrs	r3, r3, #8
 8006432:	fa93 f6a3 	rbit	r6, r3
 8006436:	fab6 f686 	clz	r6, r6
 800643a:	fa93 f3a3 	rbit	r3, r3
 800643e:	fab3 f383 	clz	r3, r3
 8006442:	00b6      	lsls	r6, r6, #2
 8006444:	fa07 f606 	lsl.w	r6, r7, r6
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	ea28 0606 	bic.w	r6, r8, r6
 800644e:	fa0c f303 	lsl.w	r3, ip, r3
 8006452:	4333      	orrs	r3, r6
 8006454:	6243      	str	r3, [r0, #36]	; 0x24
 8006456:	e7e7      	b.n	8006428 <LL_GPIO_Init+0x114>

08006458 <LL_RTC_TIME_Config>:
  * @param  Minutes Value between Min_Data=0x00 and Max_Data=0x59
  * @param  Seconds Value between Min_Data=0x00 and Max_Data=0x59
  * @retval None
  */
__STATIC_INLINE void LL_RTC_TIME_Config(RTC_TypeDef *RTCx, uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds)
{
 8006458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800645c:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006460:	f44f 1740 	mov.w	r7, #3145728	; 0x300000
 8006464:	fa97 f7a7 	rbit	r7, r7
 8006468:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
  register uint32_t temp = 0U;

  temp = Format12_24                                                                                    | \
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 800646c:	fab7 f787 	clz	r7, r7
 8006470:	fa94 f4a4 	rbit	r4, r4
 8006474:	f44f 46e0 	mov.w	r6, #28672	; 0x7000
 8006478:	fab4 fa84 	clz	sl, r4
 800647c:	fa96 f6a6 	rbit	r6, r6
 8006480:	f44f 6970 	mov.w	r9, #3840	; 0xf00
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8006484:	fab6 f686 	clz	r6, r6
 8006488:	fa99 f9a9 	rbit	r9, r9
 800648c:	2570      	movs	r5, #112	; 0x70
 800648e:	fab9 f989 	clz	r9, r9
 8006492:	fa95 f5a5 	rbit	r5, r5
 8006496:	f04f 080f 	mov.w	r8, #15
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 800649a:	fab5 f585 	clz	r5, r5
 800649e:	fa98 f8a8 	rbit	r8, r8
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 80064a2:	f8d0 e000 	ldr.w	lr, [r0]
 80064a6:	f02e 1e7f 	bic.w	lr, lr, #8323199	; 0x7f007f
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 80064aa:	f002 040f 	and.w	r4, r2, #15
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 80064ae:	f42e 4efe 	bic.w	lr, lr, #32512	; 0x7f00
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 80064b2:	fa04 f40a 	lsl.w	r4, r4, sl
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 80064b6:	ea4e 0101 	orr.w	r1, lr, r1
 80064ba:	4321      	orrs	r1, r4
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 80064bc:	f003 040f 	and.w	r4, r3, #15
 80064c0:	fa04 f909 	lsl.w	r9, r4, r9
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 80064c4:	fab8 f888 	clz	r8, r8
 80064c8:	f00c 040f 	and.w	r4, ip, #15
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 80064cc:	ea41 0109 	orr.w	r1, r1, r9
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 80064d0:	fa04 f808 	lsl.w	r8, r4, r8
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 80064d4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80064d8:	3f04      	subs	r7, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 80064da:	ea41 0108 	orr.w	r1, r1, r8
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 80064de:	40ba      	lsls	r2, r7
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 80064e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064e4:	3e04      	subs	r6, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 80064e6:	430a      	orrs	r2, r1
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 80064e8:	40b3      	lsls	r3, r6
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 80064ea:	f00c 0cf0 	and.w	ip, ip, #240	; 0xf0
 80064ee:	3d04      	subs	r5, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 80064f0:	4313      	orrs	r3, r2
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 80064f2:	fa0c f505 	lsl.w	r5, ip, r5
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 80064f6:	432b      	orrs	r3, r5
 80064f8:	6003      	str	r3, [r0, #0]
 80064fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006500 <LL_RTC_DATE_Config>:
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  * @param  Year Value between Min_Data=0x00 and Max_Data=0x99
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DATE_Config(RTC_TypeDef *RTCx, uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 8006500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006504:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8006508:	f44f 4a60 	mov.w	sl, #57344	; 0xe000
 800650c:	fa9a faaa 	rbit	sl, sl
 8006510:	f44f 0770 	mov.w	r7, #15728640	; 0xf00000
  register uint32_t temp = 0U;

  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 8006514:	faba fa8a 	clz	sl, sl
 8006518:	fa97 f7a7 	rbit	r7, r7
 800651c:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8006520:	fab7 f787 	clz	r7, r7
 8006524:	fa94 f4a4 	rbit	r4, r4
 8006528:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800652c:	fab4 fb84 	clz	fp, r4
 8006530:	fa96 f6a6 	rbit	r6, r6
 8006534:	f44f 6870 	mov.w	r8, #3840	; 0xf00
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8006538:	fab6 f686 	clz	r6, r6
 800653c:	fa98 f8a8 	rbit	r8, r8
 8006540:	2530      	movs	r5, #48	; 0x30
 8006542:	fab8 f888 	clz	r8, r8
 8006546:	fa95 f5a5 	rbit	r5, r5
 800654a:	f04f 0c0f 	mov.w	ip, #15
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 800654e:	fab5 f585 	clz	r5, r5
 8006552:	fa9c fcac 	rbit	ip, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8006556:	f00e 040f 	and.w	r4, lr, #15
 800655a:	fa04 f40b 	lsl.w	r4, r4, fp
  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 800655e:	fa01 f10a 	lsl.w	r1, r1, sl

  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8006562:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8006566:	4321      	orrs	r1, r4
 8006568:	4c12      	ldr	r4, [pc, #72]	; (80065b4 <LL_RTC_DATE_Config+0xb4>)
 800656a:	ea09 0404 	and.w	r4, r9, r4
 800656e:	4321      	orrs	r1, r4
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8006570:	f003 040f 	and.w	r4, r3, #15
 8006574:	fa04 f808 	lsl.w	r8, r4, r8
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8006578:	fabc fc8c 	clz	ip, ip
 800657c:	f002 040f 	and.w	r4, r2, #15
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8006580:	ea41 0108 	orr.w	r1, r1, r8
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8006584:	fa04 fc0c 	lsl.w	ip, r4, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8006588:	f00e 0ef0 	and.w	lr, lr, #240	; 0xf0
 800658c:	3f04      	subs	r7, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 800658e:	ea41 010c 	orr.w	r1, r1, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8006592:	fa0e f707 	lsl.w	r7, lr, r7
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8006596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800659a:	3e04      	subs	r6, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 800659c:	4339      	orrs	r1, r7
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 800659e:	40b3      	lsls	r3, r6
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 80065a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80065a4:	3d04      	subs	r5, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 80065a6:	430b      	orrs	r3, r1
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 80065a8:	40aa      	lsls	r2, r5
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 80065aa:	431a      	orrs	r2, r3
 80065ac:	6042      	str	r2, [r0, #4]
 80065ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b2:	bf00      	nop
 80065b4:	ff0000c0 	.word	0xff0000c0

080065b8 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 80065b8:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 80065ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065be:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 80065c0:	68c3      	ldr	r3, [r0, #12]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 80065c2:	065a      	lsls	r2, r3, #25
 80065c4:	d41c      	bmi.n	8006600 <LL_RTC_EnterInitMode+0x48>
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 80065c6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ca:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 80065cc:	68c3      	ldr	r3, [r0, #12]
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 80065ce:	490d      	ldr	r1, [pc, #52]	; (8006604 <LL_RTC_EnterInitMode+0x4c>)
 80065d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
  ErrorStatus status = SUCCESS;
 80065d4:	2201      	movs	r2, #1
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 80065d6:	9c01      	ldr	r4, [sp, #4]
 80065d8:	b104      	cbz	r4, 80065dc <LL_RTC_EnterInitMode+0x24>
 80065da:	b113      	cbz	r3, 80065e2 <LL_RTC_EnterInitMode+0x2a>
        status = ERROR;
      }
    }
  }
  return status;
}
 80065dc:	4610      	mov	r0, r2
 80065de:	b002      	add	sp, #8
 80065e0:	bd10      	pop	{r4, pc}
 80065e2:	680b      	ldr	r3, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80065e4:	03db      	lsls	r3, r3, #15
        timeout --;
 80065e6:	bf42      	ittt	mi
 80065e8:	9b01      	ldrmi	r3, [sp, #4]
 80065ea:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80065ee:	9301      	strmi	r3, [sp, #4]
 80065f0:	68c3      	ldr	r3, [r0, #12]
      if (timeout == 0U)
 80065f2:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 80065f4:	2c00      	cmp	r4, #0
 80065f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80065fa:	bf08      	it	eq
 80065fc:	2200      	moveq	r2, #0
 80065fe:	e7ea      	b.n	80065d6 <LL_RTC_EnterInitMode+0x1e>
  ErrorStatus status = SUCCESS;
 8006600:	2201      	movs	r2, #1
 8006602:	e7eb      	b.n	80065dc <LL_RTC_EnterInitMode+0x24>
 8006604:	e000e010 	.word	0xe000e010

08006608 <LL_RTC_Init>:
{
 8006608:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800660a:	23ca      	movs	r3, #202	; 0xca
 800660c:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800660e:	2353      	movs	r3, #83	; 0x53
 8006610:	6243      	str	r3, [r0, #36]	; 0x24
 8006612:	4604      	mov	r4, r0
 8006614:	460d      	mov	r5, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8006616:	f7ff ffcf 	bl	80065b8 <LL_RTC_EnterInitMode>
 800661a:	b1f0      	cbz	r0, 800665a <LL_RTC_Init+0x52>
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 800661c:	68a3      	ldr	r3, [r4, #8]
 800661e:	682a      	ldr	r2, [r5, #0]
 8006620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006624:	4313      	orrs	r3, r2
 8006626:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8006628:	6923      	ldr	r3, [r4, #16]
 800662a:	68aa      	ldr	r2, [r5, #8]
 800662c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006630:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006634:	4313      	orrs	r3, r2
 8006636:	6123      	str	r3, [r4, #16]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_POSITION_PRER_PREDIV_A);
 8006638:	6921      	ldr	r1, [r4, #16]
 800663a:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
 800663e:	fa93 f3a3 	rbit	r3, r3
 8006642:	fab3 f283 	clz	r2, r3
 8006646:	686b      	ldr	r3, [r5, #4]
 8006648:	4093      	lsls	r3, r2
 800664a:	f421 02fe 	bic.w	r2, r1, #8323072	; 0x7f0000
 800664e:	4313      	orrs	r3, r2
 8006650:	6123      	str	r3, [r4, #16]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8006652:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8006656:	60e3      	str	r3, [r4, #12]
    status = SUCCESS;
 8006658:	2001      	movs	r0, #1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800665a:	23ff      	movs	r3, #255	; 0xff
 800665c:	6263      	str	r3, [r4, #36]	; 0x24
}
 800665e:	bd38      	pop	{r3, r4, r5, pc}

08006660 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8006660:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 8006662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006666:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8006668:	68c3      	ldr	r3, [r0, #12]
 800666a:	491e      	ldr	r1, [pc, #120]	; (80066e4 <LL_RTC_WaitForSynchro+0x84>)
 800666c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006670:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 8006674:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8006676:	68c2      	ldr	r2, [r0, #12]
  ErrorStatus status = SUCCESS;
 8006678:	2301      	movs	r3, #1
 800667a:	f3c2 1240 	ubfx	r2, r2, #5, #1
  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
  while ((timeout != 0U) && (tmp != 0U))
 800667e:	9c01      	ldr	r4, [sp, #4]
 8006680:	b91c      	cbnz	r4, 800668a <LL_RTC_WaitForSynchro+0x2a>
    {
      status = ERROR;
    }
  }

  if (status != ERROR)
 8006682:	b99b      	cbnz	r3, 80066ac <LL_RTC_WaitForSynchro+0x4c>
      }
    }
  }

  return (status);
}
 8006684:	4618      	mov	r0, r3
 8006686:	b002      	add	sp, #8
 8006688:	bd10      	pop	{r4, pc}
  while ((timeout != 0U) && (tmp != 0U))
 800668a:	2a00      	cmp	r2, #0
 800668c:	d0f9      	beq.n	8006682 <LL_RTC_WaitForSynchro+0x22>
 800668e:	680a      	ldr	r2, [r1, #0]
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8006690:	03d4      	lsls	r4, r2, #15
      timeout--;
 8006692:	bf42      	ittt	mi
 8006694:	9a01      	ldrmi	r2, [sp, #4]
 8006696:	f102 32ff 	addmi.w	r2, r2, #4294967295
 800669a:	9201      	strmi	r2, [sp, #4]
 800669c:	68c2      	ldr	r2, [r0, #12]
    if (timeout == 0U)
 800669e:	9c01      	ldr	r4, [sp, #4]
      status = ERROR;
 80066a0:	2c00      	cmp	r4, #0
 80066a2:	f3c2 1240 	ubfx	r2, r2, #5, #1
 80066a6:	bf08      	it	eq
 80066a8:	2300      	moveq	r3, #0
 80066aa:	e7e8      	b.n	800667e <LL_RTC_WaitForSynchro+0x1e>
    timeout = RTC_SYNCHRO_TIMEOUT;
 80066ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066b0:	9201      	str	r2, [sp, #4]
 80066b2:	68c2      	ldr	r2, [r0, #12]
 80066b4:	490b      	ldr	r1, [pc, #44]	; (80066e4 <LL_RTC_WaitForSynchro+0x84>)
 80066b6:	f3c2 1240 	ubfx	r2, r2, #5, #1
    while ((timeout != 0U) && (tmp != 1U))
 80066ba:	9c01      	ldr	r4, [sp, #4]
 80066bc:	2c00      	cmp	r4, #0
 80066be:	d0e1      	beq.n	8006684 <LL_RTC_WaitForSynchro+0x24>
 80066c0:	2a00      	cmp	r2, #0
 80066c2:	d1df      	bne.n	8006684 <LL_RTC_WaitForSynchro+0x24>
 80066c4:	680a      	ldr	r2, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80066c6:	03d2      	lsls	r2, r2, #15
        timeout--;
 80066c8:	bf42      	ittt	mi
 80066ca:	9a01      	ldrmi	r2, [sp, #4]
 80066cc:	f102 32ff 	addmi.w	r2, r2, #4294967295
 80066d0:	9201      	strmi	r2, [sp, #4]
 80066d2:	68c2      	ldr	r2, [r0, #12]
      if (timeout == 0U)
 80066d4:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 80066d6:	2c00      	cmp	r4, #0
 80066d8:	f3c2 1240 	ubfx	r2, r2, #5, #1
 80066dc:	bf08      	it	eq
 80066de:	2300      	moveq	r3, #0
 80066e0:	e7eb      	b.n	80066ba <LL_RTC_WaitForSynchro+0x5a>
 80066e2:	bf00      	nop
 80066e4:	e000e010 	.word	0xe000e010

080066e8 <LL_RTC_TIME_Init>:
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 80066e8:	6883      	ldr	r3, [r0, #8]
{
 80066ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066ec:	4615      	mov	r5, r2
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 80066ee:	065a      	lsls	r2, r3, #25
      RTC_TimeStruct->TimeFormat = 0x00U;
 80066f0:	bf5c      	itt	pl
 80066f2:	2300      	movpl	r3, #0
 80066f4:	602b      	strpl	r3, [r5, #0]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80066f6:	23ca      	movs	r3, #202	; 0xca
 80066f8:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80066fa:	2353      	movs	r3, #83	; 0x53
 80066fc:	6243      	str	r3, [r0, #36]	; 0x24
{
 80066fe:	4604      	mov	r4, r0
  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8006700:	460e      	mov	r6, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8006702:	f7ff ff59 	bl	80065b8 <LL_RTC_EnterInitMode>
 8006706:	b190      	cbz	r0, 800672e <LL_RTC_TIME_Init+0x46>
 8006708:	796b      	ldrb	r3, [r5, #5]
 800670a:	792a      	ldrb	r2, [r5, #4]
 800670c:	79a8      	ldrb	r0, [r5, #6]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 800670e:	b196      	cbz	r6, 8006736 <LL_RTC_TIME_Init+0x4e>
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8006710:	9000      	str	r0, [sp, #0]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8006712:	6829      	ldr	r1, [r5, #0]
 8006714:	4620      	mov	r0, r4
 8006716:	f7ff fe9f 	bl	8006458 <LL_RTC_TIME_Config>
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 800671a:	4b14      	ldr	r3, [pc, #80]	; (800676c <LL_RTC_TIME_Init+0x84>)
 800671c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006720:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8006722:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8006724:	069b      	lsls	r3, r3, #26
 8006726:	d41e      	bmi.n	8006766 <LL_RTC_TIME_Init+0x7e>
      status = LL_RTC_WaitForSynchro(RTCx);
 8006728:	4620      	mov	r0, r4
 800672a:	f7ff ff99 	bl	8006660 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800672e:	23ff      	movs	r3, #255	; 0xff
 8006730:	6263      	str	r3, [r4, #36]	; 0x24
}
 8006732:	b002      	add	sp, #8
 8006734:	bd70      	pop	{r4, r5, r6, pc}
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 8006736:	210a      	movs	r1, #10
 8006738:	fbb3 f6f1 	udiv	r6, r3, r1
 800673c:	fb01 3316 	mls	r3, r1, r6, r3
 8006740:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8006744:	fbb2 f6f1 	udiv	r6, r2, r1
 8006748:	fb01 2216 	mls	r2, r1, r6, r2
 800674c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 8006750:	fbb0 f6f1 	udiv	r6, r0, r1
 8006754:	fb01 0116 	mls	r1, r1, r6, r0
 8006758:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 800675c:	b2c9      	uxtb	r1, r1
 800675e:	9100      	str	r1, [sp, #0]
 8006760:	b2db      	uxtb	r3, r3
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	e7d5      	b.n	8006712 <LL_RTC_TIME_Init+0x2a>
      status = SUCCESS;
 8006766:	2001      	movs	r0, #1
 8006768:	e7e1      	b.n	800672e <LL_RTC_TIME_Init+0x46>
 800676a:	bf00      	nop
 800676c:	40002800 	.word	0x40002800

08006770 <LL_RTC_DATE_Init>:
{
 8006770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006772:	4604      	mov	r4, r0
 8006774:	4616      	mov	r6, r2
  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 8006776:	460f      	mov	r7, r1
 8006778:	b931      	cbnz	r1, 8006788 <LL_RTC_DATE_Init+0x18>
 800677a:	7853      	ldrb	r3, [r2, #1]
 800677c:	06da      	lsls	r2, r3, #27
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 800677e:	bf42      	ittt	mi
 8006780:	f023 0310 	bicmi.w	r3, r3, #16
 8006784:	330a      	addmi	r3, #10
 8006786:	7073      	strbmi	r3, [r6, #1]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8006788:	23ca      	movs	r3, #202	; 0xca
 800678a:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800678c:	2353      	movs	r3, #83	; 0x53
 800678e:	6263      	str	r3, [r4, #36]	; 0x24
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8006790:	4620      	mov	r0, r4
 8006792:	f7ff ff11 	bl	80065b8 <LL_RTC_EnterInitMode>
 8006796:	b198      	cbz	r0, 80067c0 <LL_RTC_DATE_Init+0x50>
 8006798:	7873      	ldrb	r3, [r6, #1]
 800679a:	78b5      	ldrb	r5, [r6, #2]
 800679c:	7831      	ldrb	r1, [r6, #0]
 800679e:	78f6      	ldrb	r6, [r6, #3]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 80067a0:	b197      	cbz	r7, 80067c8 <LL_RTC_DATE_Init+0x58>
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 80067a2:	9600      	str	r6, [sp, #0]
 80067a4:	462a      	mov	r2, r5
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80067a6:	4620      	mov	r0, r4
 80067a8:	f7ff feaa 	bl	8006500 <LL_RTC_DATE_Config>
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 80067ac:	4b13      	ldr	r3, [pc, #76]	; (80067fc <LL_RTC_DATE_Init+0x8c>)
 80067ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067b2:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 80067b4:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 80067b6:	069b      	lsls	r3, r3, #26
 80067b8:	d41e      	bmi.n	80067f8 <LL_RTC_DATE_Init+0x88>
      status = LL_RTC_WaitForSynchro(RTCx);
 80067ba:	4620      	mov	r0, r4
 80067bc:	f7ff ff50 	bl	8006660 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80067c0:	23ff      	movs	r3, #255	; 0xff
 80067c2:	6263      	str	r3, [r4, #36]	; 0x24
}
 80067c4:	b003      	add	sp, #12
 80067c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 80067c8:	200a      	movs	r0, #10
 80067ca:	fbb3 f2f0 	udiv	r2, r3, r0
 80067ce:	fb00 3312 	mls	r3, r0, r2, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80067d2:	fbb5 f7f0 	udiv	r7, r5, r0
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 80067d6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80067da:	fb00 5217 	mls	r2, r0, r7, r5
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 80067de:	fbb6 f5f0 	udiv	r5, r6, r0
 80067e2:	fb00 6015 	mls	r0, r0, r5, r6
 80067e6:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80067ea:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 80067ee:	b2c0      	uxtb	r0, r0
 80067f0:	9000      	str	r0, [sp, #0]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	b2d2      	uxtb	r2, r2
 80067f6:	e7d6      	b.n	80067a6 <LL_RTC_DATE_Init+0x36>
      status = SUCCESS;
 80067f8:	2001      	movs	r0, #1
 80067fa:	e7e1      	b.n	80067c0 <LL_RTC_DATE_Init+0x50>
 80067fc:	40002800 	.word	0x40002800

08006800 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006800:	b084      	sub	sp, #16
 8006802:	b510      	push	{r4, lr}
 8006804:	ac03      	add	r4, sp, #12
 8006806:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 800680a:	9904      	ldr	r1, [sp, #16]
 800680c:	9b03      	ldr	r3, [sp, #12]
 800680e:	6842      	ldr	r2, [r0, #4]
 8006810:	430b      	orrs	r3, r1
 8006812:	9905      	ldr	r1, [sp, #20]
 8006814:	430b      	orrs	r3, r1
 8006816:	9906      	ldr	r1, [sp, #24]
 8006818:	430b      	orrs	r3, r1
 800681a:	9907      	ldr	r1, [sp, #28]
 800681c:	430b      	orrs	r3, r1
 800681e:	9908      	ldr	r1, [sp, #32]
                                              Init.BusWide             |\
                                              Init.HardwareFlowControl |\
                                              Init.ClockDiv);  

  return HAL_OK;
}
 8006820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8006824:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 8006828:	430b      	orrs	r3, r1
 800682a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800682e:	4313      	orrs	r3, r2
 8006830:	6043      	str	r3, [r0, #4]
}
 8006832:	b004      	add	sp, #16
 8006834:	2000      	movs	r0, #0
 8006836:	4770      	bx	lr

08006838 <SDMMC_ReadFIFO>:
 8006838:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800683c:	4770      	bx	lr

0800683e <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800683e:	2303      	movs	r3, #3
 8006840:	6003      	str	r3, [r0, #0]
  
  return HAL_OK; 
}
 8006842:	2000      	movs	r0, #0
 8006844:	4770      	bx	lr

08006846 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006846:	6800      	ldr	r0, [r0, #0]
}
 8006848:	f000 0003 	and.w	r0, r0, #3
 800684c:	4770      	bx	lr

0800684e <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800684e:	680b      	ldr	r3, [r1, #0]
 8006850:	6083      	str	r3, [r0, #8]

  /* Set SDMMC command parameters */
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8006852:	68c3      	ldr	r3, [r0, #12]
 8006854:	684a      	ldr	r2, [r1, #4]
 8006856:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800685a:	f023 030f 	bic.w	r3, r3, #15
 800685e:	4313      	orrs	r3, r2
 8006860:	688a      	ldr	r2, [r1, #8]
 8006862:	4313      	orrs	r3, r2
 8006864:	68ca      	ldr	r2, [r1, #12]
 8006866:	4313      	orrs	r3, r2
 8006868:	690a      	ldr	r2, [r1, #16]
 800686a:	4313      	orrs	r3, r2
 800686c:	60c3      	str	r3, [r0, #12]
                                          Command->Response         |\
                                          Command->WaitForInterrupt |\
                                          Command->CPSM); 
  
  return HAL_OK;  
}
 800686e:	2000      	movs	r0, #0
 8006870:	4770      	bx	lr

08006872 <SDMMC_GetCommandResponse>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
  return (uint8_t)(SDMMCx->RESPCMD);
 8006872:	6900      	ldr	r0, [r0, #16]
}
 8006874:	b2c0      	uxtb	r0, r0
 8006876:	4770      	bx	lr

08006878 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006878:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800687a:	3014      	adds	r0, #20
 800687c:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 800687e:	2300      	movs	r3, #0
 8006880:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8006882:	9101      	str	r1, [sp, #4]
  
  return (*(__IO uint32_t *) tmp);
 8006884:	9b01      	ldr	r3, [sp, #4]
 8006886:	6818      	ldr	r0, [r3, #0]
}  
 8006888:	b002      	add	sp, #8
 800688a:	4770      	bx	lr

0800688c <SDMMC_DataConfig>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800688c:	680b      	ldr	r3, [r1, #0]
 800688e:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006890:	684b      	ldr	r3, [r1, #4]
 8006892:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 8006894:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006896:	688a      	ldr	r2, [r1, #8]
 8006898:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 800689c:	4313      	orrs	r3, r2
 800689e:	68ca      	ldr	r2, [r1, #12]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	690a      	ldr	r2, [r1, #16]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	694a      	ldr	r2, [r1, #20]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	62c3      	str	r3, [r0, #44]	; 0x2c
                                              Data->TransferMode  |\
                                              Data->DPSM);

  return HAL_OK;

}
 80068ac:	2000      	movs	r0, #0
 80068ae:	4770      	bx	lr

080068b0 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 80068b0:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80068b2:	065b      	lsls	r3, r3, #25
{
 80068b4:	b570      	push	{r4, r5, r6, lr}
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80068b6:	d426      	bmi.n	8006906 <LL_SPI_Init+0x56>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80068b8:	e891 0048 	ldmia.w	r1, {r3, r6}
 80068bc:	4333      	orrs	r3, r6
 80068be:	68ce      	ldr	r6, [r1, #12]
 80068c0:	694d      	ldr	r5, [r1, #20]
 80068c2:	6804      	ldr	r4, [r0, #0]
 80068c4:	6a0a      	ldr	r2, [r1, #32]
 80068c6:	4333      	orrs	r3, r6
 80068c8:	690e      	ldr	r6, [r1, #16]
 80068ca:	4333      	orrs	r3, r6
 80068cc:	698e      	ldr	r6, [r1, #24]
 80068ce:	432b      	orrs	r3, r5
 80068d0:	4333      	orrs	r3, r6
 80068d2:	69ce      	ldr	r6, [r1, #28]
 80068d4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80068d8:	4333      	orrs	r3, r6
 80068da:	f024 04bf 	bic.w	r4, r4, #191	; 0xbf
 80068de:	4313      	orrs	r3, r2
 80068e0:	4323      	orrs	r3, r4
 80068e2:	6003      	str	r3, [r0, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80068e4:	6844      	ldr	r4, [r0, #4]
 80068e6:	688b      	ldr	r3, [r1, #8]
 80068e8:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
 80068ec:	ea43 4315 	orr.w	r3, r3, r5, lsr #16
 80068f0:	f024 0404 	bic.w	r4, r4, #4
 80068f4:	4323      	orrs	r3, r4

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80068f6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    MODIFY_REG(SPIx->CR2,
 80068fa:	6043      	str	r3, [r0, #4]
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80068fc:	d101      	bne.n	8006902 <LL_SPI_Init+0x52>
 80068fe:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8006900:	6103      	str	r3, [r0, #16]
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 8006902:	2001      	movs	r0, #1
  }

  return status;
}
 8006904:	bd70      	pop	{r4, r5, r6, pc}
  ErrorStatus status = ERROR;
 8006906:	2000      	movs	r0, #0
 8006908:	bd70      	pop	{r4, r5, r6, pc}

0800690a <USB_CoreInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800690a:	b084      	sub	sp, #16
 800690c:	b538      	push	{r3, r4, r5, lr}
 800690e:	ad05      	add	r5, sp, #20
 8006910:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006914:	68c3      	ldr	r3, [r0, #12]
 8006916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
{
 800691a:	4604      	mov	r4, r0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800691c:	60c3      	str	r3, [r0, #12]
  
  /* Reset after a PHY select and set Host mode */
  USB_CoreReset(USBx);
 800691e:	f000 fb75 	bl	800700c <USB_CoreReset>
  
  /* Deactivate the power down*/
  USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8006922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006926:	63a3      	str	r3, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8006928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800692c:	2000      	movs	r0, #0
 800692e:	b004      	add	sp, #16
 8006930:	4770      	bx	lr

08006932 <USB_EnableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006932:	6883      	ldr	r3, [r0, #8]
 8006934:	f043 0301 	orr.w	r3, r3, #1
 8006938:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 800693a:	2000      	movs	r0, #0
 800693c:	4770      	bx	lr

0800693e <USB_DisableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800693e:	6883      	ldr	r3, [r0, #8]
 8006940:	f023 0301 	bic.w	r3, r3, #1
 8006944:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8006946:	2000      	movs	r0, #0
 8006948:	4770      	bx	lr

0800694a <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_ModeTypeDef mode)
{
 800694a:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800694c:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_HOST_MODE)
 800694e:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8006950:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006954:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_HOST_MODE)
 8006956:	d108      	bne.n	800696a <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8006958:	68c3      	ldr	r3, [r0, #12]
 800695a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800695e:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50);
 8006960:	2032      	movs	r0, #50	; 0x32
 8006962:	f7fc ff6d 	bl	8003840 <HAL_Delay>
  
  return HAL_OK;
}
 8006966:	2000      	movs	r0, #0
 8006968:	bd08      	pop	{r3, pc}
  else if ( mode == USB_DEVICE_MODE)
 800696a:	2900      	cmp	r1, #0
 800696c:	d1f8      	bne.n	8006960 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 800696e:	68c3      	ldr	r3, [r0, #12]
 8006970:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006974:	60c3      	str	r3, [r0, #12]
 8006976:	e7f3      	b.n	8006960 <USB_SetCurrentMode+0x16>

08006978 <USB_DevInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006978:	b084      	sub	sp, #16
 800697a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800697e:	4604      	mov	r4, r0
 8006980:	a809      	add	r0, sp, #36	; 0x24
 8006982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t index = 0;

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006986:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006988:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800698a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800698e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006992:	4689      	mov	r9, r1
 8006994:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 8006996:	b95f      	cbnz	r7, 80069b0 <USB_DevInit+0x38>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8006998:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800699a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800699e:	63a3      	str	r3, [r4, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069a6:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ae:	6023      	str	r3, [r4, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 80069b0:	2500      	movs	r5, #0
 80069b2:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80069b6:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80069ba:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  /* Set Full speed phy */
  USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80069be:	2103      	movs	r1, #3
 80069c0:	4620      	mov	r0, r4
 80069c2:	f000 f893 	bl	8006aec <USB_SetDevSpeed>

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 80069c6:	2110      	movs	r1, #16
 80069c8:	4620      	mov	r0, r4
 80069ca:	f000 f86d 	bl	8006aa8 <USB_FlushTxFifo>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80069ce:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  USB_FlushRxFifo(USBx);
 80069d2:	4620      	mov	r0, r4
 80069d4:	f000 f87a 	bl	8006acc <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
  USBx_DEVICE->DOEPMSK = 0;
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80069d8:	f04f 33ff 	mov.w	r3, #4294967295
  USBx_DEVICE->DIEPMSK = 0;
 80069dc:	6135      	str	r5, [r6, #16]
 80069de:	462a      	mov	r2, r5
  USBx_DEVICE->DOEPMSK = 0;
 80069e0:	6175      	str	r5, [r6, #20]
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80069e2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80069e6:	61b3      	str	r3, [r6, #24]
    {
      USBx_INEP(index)->DIEPCTL = 0;
    }
    
    USBx_INEP(index)->DIEPTSIZ = 0;
    USBx_INEP(index)->DIEPINT  = 0xFF;
 80069e8:	20ff      	movs	r0, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0;
 80069ea:	61f5      	str	r5, [r6, #28]
 80069ec:	f504 6310 	add.w	r3, r4, #2304	; 0x900
  for (index = 0; index < cfg.dev_endpoints; index++)
 80069f0:	454d      	cmp	r5, r9
 80069f2:	d13c      	bne.n	8006a6e <USB_DevInit+0xf6>
 80069f4:	2200      	movs	r2, #0
 80069f6:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 80069fa:	4611      	mov	r1, r2
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80069fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    {
      USBx_OUTEP(index)->DOEPCTL = 0;
    }
    
    USBx_OUTEP(index)->DOEPTSIZ = 0;
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8006a00:	f04f 0eff 	mov.w	lr, #255	; 0xff
  for (index = 0; index < cfg.dev_endpoints; index++)
 8006a04:	4295      	cmp	r5, r2
 8006a06:	d13e      	bne.n	8006a86 <USB_DevInit+0x10e>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a08:	6933      	ldr	r3, [r6, #16]
  
  if (cfg.dma_enable == 1)
 8006a0a:	f1b8 0f01 	cmp.w	r8, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a12:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 8006a14:	d108      	bne.n	8006a28 <USB_DevInit+0xb0>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8006a16:	4b22      	ldr	r3, [pc, #136]	; (8006aa0 <USB_DevInit+0x128>)
 8006a18:	6333      	str	r3, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8006a1a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8006a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a20:	f043 0303 	orr.w	r3, r3, #3
 8006a24:	6333      	str	r3, [r6, #48]	; 0x30
    
    index= USBx_DEVICE->DTHRCTL;
 8006a26:	6b33      	ldr	r3, [r6, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 8006a2c:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8006a30:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8006a32:	f1b8 0f00 	cmp.w	r8, #0
 8006a36:	d103      	bne.n	8006a40 <USB_DevInit+0xc8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8006a38:	69a3      	ldr	r3, [r4, #24]
 8006a3a:	f043 0310 	orr.w	r3, r3, #16
 8006a3e:	61a3      	str	r3, [r4, #24]
  }

    /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8006a40:	69a2      	ldr	r2, [r4, #24]
 8006a42:	4b18      	ldr	r3, [pc, #96]	; (8006aa4 <USB_DevInit+0x12c>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 8006a48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a4a:	b11b      	cbz	r3, 8006a54 <USB_DevInit+0xdc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a4c:	69a3      	ldr	r3, [r4, #24]
 8006a4e:	f043 0308 	orr.w	r3, r3, #8
 8006a52:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8006a54:	2f01      	cmp	r7, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8006a56:	bf01      	itttt	eq
 8006a58:	69a3      	ldreq	r3, [r4, #24]
 8006a5a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8006a5e:	f043 0304 	orreq.w	r3, r3, #4
 8006a62:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 8006a64:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a68:	2000      	movs	r0, #0
 8006a6a:	b004      	add	sp, #16
 8006a6c:	4770      	bx	lr
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a6e:	f8d3 e000 	ldr.w	lr, [r3]
 8006a72:	f1be 0f00 	cmp.w	lr, #0
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8006a76:	bfb4      	ite	lt
 8006a78:	6019      	strlt	r1, [r3, #0]
      USBx_INEP(index)->DIEPCTL = 0;
 8006a7a:	601a      	strge	r2, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8006a7c:	3501      	adds	r5, #1
    USBx_INEP(index)->DIEPTSIZ = 0;
 8006a7e:	611a      	str	r2, [r3, #16]
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8006a80:	6098      	str	r0, [r3, #8]
 8006a82:	3320      	adds	r3, #32
 8006a84:	e7b4      	b.n	80069f0 <USB_DevInit+0x78>
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a86:	f8d3 c000 	ldr.w	ip, [r3]
 8006a8a:	f1bc 0f00 	cmp.w	ip, #0
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8006a8e:	bfb4      	ite	lt
 8006a90:	6018      	strlt	r0, [r3, #0]
      USBx_OUTEP(index)->DOEPCTL = 0;
 8006a92:	6019      	strge	r1, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8006a94:	3201      	adds	r2, #1
    USBx_OUTEP(index)->DOEPTSIZ = 0;
 8006a96:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8006a98:	f8c3 e008 	str.w	lr, [r3, #8]
 8006a9c:	3320      	adds	r3, #32
 8006a9e:	e7b1      	b.n	8006a04 <USB_DevInit+0x8c>
 8006aa0:	00800100 	.word	0x00800100
 8006aa4:	803c3800 	.word	0x803c3800

08006aa8 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8006aa8:	0189      	lsls	r1, r1, #6
 8006aaa:	f041 0120 	orr.w	r1, r1, #32
 8006aae:	4a06      	ldr	r2, [pc, #24]	; (8006ac8 <USB_FlushTxFifo+0x20>)
 8006ab0:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000)
 8006ab2:	3a01      	subs	r2, #1
 8006ab4:	d005      	beq.n	8006ac2 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ab6:	6903      	ldr	r3, [r0, #16]
 8006ab8:	f013 0320 	ands.w	r3, r3, #32
 8006abc:	d1f9      	bne.n	8006ab2 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8006abe:	4618      	mov	r0, r3
 8006ac0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8006ac2:	2003      	movs	r0, #3
}
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	00030d41 	.word	0x00030d41

08006acc <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006acc:	2310      	movs	r3, #16
 8006ace:	4a06      	ldr	r2, [pc, #24]	; (8006ae8 <USB_FlushRxFifo+0x1c>)
 8006ad0:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8006ad2:	3a01      	subs	r2, #1
 8006ad4:	d005      	beq.n	8006ae2 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ad6:	6903      	ldr	r3, [r0, #16]
 8006ad8:	f013 0310 	ands.w	r3, r3, #16
 8006adc:	d1f9      	bne.n	8006ad2 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8006ade:	4618      	mov	r0, r3
 8006ae0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8006ae2:	2003      	movs	r0, #3
}
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	00030d41 	.word	0x00030d41

08006aec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8006aec:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006af0:	4319      	orrs	r1, r3
 8006af2:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8006af6:	2000      	movs	r0, #0
 8006af8:	4770      	bx	lr

08006afa <USB_ActivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006afa:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1)
 8006afc:	784b      	ldrb	r3, [r1, #1]
 8006afe:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8006b00:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8006b04:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d11b      	bne.n	8006b44 <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8006b0c:	40a3      	lsls	r3, r4
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8006b12:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8006b16:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8006b18:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	0412      	lsls	r2, r2, #16
 8006b20:	d40e      	bmi.n	8006b40 <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8006b22:	688a      	ldr	r2, [r1, #8]
 8006b24:	78c8      	ldrb	r0, [r1, #3]
 8006b26:	681d      	ldr	r5, [r3, #0]
 8006b28:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006b2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006b30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b34:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 8006b38:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8006b3c:	4328      	orrs	r0, r5
 8006b3e:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8006b40:	2000      	movs	r0, #0
 8006b42:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8006b44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b48:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8006b4a:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8006b4e:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8006b50:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8006b54:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8006b56:	6803      	ldr	r3, [r0, #0]
 8006b58:	041b      	lsls	r3, r3, #16
 8006b5a:	d4f1      	bmi.n	8006b40 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8006b5c:	688b      	ldr	r3, [r1, #8]
 8006b5e:	78c9      	ldrb	r1, [r1, #3]
 8006b60:	6802      	ldr	r2, [r0, #0]
 8006b62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b6e:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8006b72:	4313      	orrs	r3, r2
 8006b74:	6003      	str	r3, [r0, #0]
 8006b76:	e7e3      	b.n	8006b40 <USB_ActivateEndpoint+0x46>

08006b78 <USB_DeactivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b78:	b510      	push	{r4, lr}
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8006b7a:	784b      	ldrb	r3, [r1, #1]
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8006b7c:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8006b80:	7809      	ldrb	r1, [r1, #0]
 8006b82:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d111      	bne.n	8006bae <USB_DeactivateEndpoint+0x36>
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8006b8a:	408b      	lsls	r3, r1
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	43db      	mvns	r3, r3
 8006b90:	401c      	ands	r4, r3
 8006b92:	63d4      	str	r4, [r2, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8006b94:	69d4      	ldr	r4, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8006b96:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8006b9a:	4023      	ands	r3, r4
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8006b9c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8006ba0:	61d3      	str	r3, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8006ba2:	6803      	ldr	r3, [r0, #0]
 8006ba4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ba8:	6003      	str	r3, [r0, #0]
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
  }
  return HAL_OK;
}
 8006baa:	2000      	movs	r0, #0
 8006bac:	bd10      	pop	{r4, pc}
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8006bae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006bb2:	408b      	lsls	r3, r1
 8006bb4:	43db      	mvns	r3, r3
 8006bb6:	401c      	ands	r4, r3
 8006bb8:	63d4      	str	r4, [r2, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8006bba:	69d4      	ldr	r4, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8006bbc:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8006bc0:	4023      	ands	r3, r4
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8006bc2:	eb00 1041 	add.w	r0, r0, r1, lsl #5
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8006bc6:	61d3      	str	r3, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8006bc8:	6803      	ldr	r3, [r0, #0]
 8006bca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bce:	6003      	str	r3, [r0, #0]
 8006bd0:	e7eb      	b.n	8006baa <USB_DeactivateEndpoint+0x32>
	...

08006bd4 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8006bd6:	784b      	ldrb	r3, [r1, #1]
 8006bd8:	780c      	ldrb	r4, [r1, #0]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	694b      	ldr	r3, [r1, #20]
 8006bde:	d163      	bne.n	8006ca8 <USB_EPStartXfer+0xd4>
 8006be0:	2520      	movs	r5, #32
 8006be2:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8006be6:	fb15 6404 	smlabb	r4, r5, r4, r6
 8006bea:	6925      	ldr	r5, [r4, #16]
    if (ep->xfer_len == 0)
 8006bec:	bb73      	cbnz	r3, 8006c4c <USB_EPStartXfer+0x78>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8006bee:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8006bf2:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8006bf6:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8006bf8:	6925      	ldr	r5, [r4, #16]
 8006bfa:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8006bfe:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8006c00:	6925      	ldr	r5, [r4, #16]
 8006c02:	0ced      	lsrs	r5, r5, #19
 8006c04:	04ed      	lsls	r5, r5, #19
 8006c06:	6125      	str	r5, [r4, #16]
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
      }       
    }
      if (ep->type != EP_TYPE_ISOC)
 8006c08:	78cf      	ldrb	r7, [r1, #3]
 8006c0a:	780d      	ldrb	r5, [r1, #0]
 8006c0c:	2f01      	cmp	r7, #1
 8006c0e:	f000 8089 	beq.w	8006d24 <USB_EPStartXfer+0x150>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8006c12:	b14b      	cbz	r3, 8006c28 <USB_EPStartXfer+0x54>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 8006c14:	f8d0 c834 	ldr.w	ip, [r0, #2100]	; 0x834
 8006c18:	2401      	movs	r4, #1
 8006c1a:	40ac      	lsls	r4, r5
 8006c1c:	ea44 040c 	orr.w	r4, r4, ip
 8006c20:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 8006c24:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c28:	780d      	ldrb	r5, [r1, #0]
 8006c2a:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 8006c2e:	2f01      	cmp	r7, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c30:	6834      	ldr	r4, [r6, #0]
 8006c32:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8006c36:	6034      	str	r4, [r6, #0]
    if (ep->type == EP_TYPE_ISOC)
 8006c38:	d105      	bne.n	8006c46 <USB_EPStartXfer+0x72>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8006c3a:	9200      	str	r2, [sp, #0]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	462a      	mov	r2, r5
 8006c40:	68c9      	ldr	r1, [r1, #12]
 8006c42:	f000 f8e3 	bl	8006e0c <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8006c46:	2000      	movs	r0, #0
 8006c48:	b003      	add	sp, #12
 8006c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c4c:	0ced      	lsrs	r5, r5, #19
 8006c4e:	04ed      	lsls	r5, r5, #19
 8006c50:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8006c52:	6925      	ldr	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8006c54:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8006c56:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8006c5a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8006c5e:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8006c60:	19dd      	adds	r5, r3, r7
 8006c62:	3d01      	subs	r5, #1
 8006c64:	fbb5 f7f7 	udiv	r7, r5, r7
 8006c68:	4d35      	ldr	r5, [pc, #212]	; (8006d40 <USB_EPStartXfer+0x16c>)
 8006c6a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8006c6e:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 8006c72:	ea45 050e 	orr.w	r5, r5, lr
 8006c76:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8006c78:	6927      	ldr	r7, [r4, #16]
 8006c7a:	f3c3 0512 	ubfx	r5, r3, #0, #19
 8006c7e:	433d      	orrs	r5, r7
 8006c80:	6125      	str	r5, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8006c82:	78cd      	ldrb	r5, [r1, #3]
 8006c84:	2d01      	cmp	r5, #1
 8006c86:	d1bf      	bne.n	8006c08 <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8006c88:	6925      	ldr	r5, [r4, #16]
 8006c8a:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8006c8e:	6125      	str	r5, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
 8006c90:	6925      	ldr	r5, [r4, #16]
 8006c92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006c96:	6125      	str	r5, [r4, #16]
 8006c98:	e7b6      	b.n	8006c08 <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c9a:	fb14 6405 	smlabb	r4, r4, r5, r6
 8006c9e:	6825      	ldr	r5, [r4, #0]
 8006ca0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006ca4:	6025      	str	r5, [r4, #0]
 8006ca6:	e7bf      	b.n	8006c28 <USB_EPStartXfer+0x54>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8006ca8:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8006cac:	eb02 1244 	add.w	r2, r2, r4, lsl #5
 8006cb0:	6914      	ldr	r4, [r2, #16]
 8006cb2:	0ce4      	lsrs	r4, r4, #19
 8006cb4:	04e4      	lsls	r4, r4, #19
 8006cb6:	6114      	str	r4, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8006cb8:	6914      	ldr	r4, [r2, #16]
 8006cba:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8006cbe:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8006cc2:	6114      	str	r4, [r2, #16]
 8006cc4:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0)
 8006cc6:	b9db      	cbnz	r3, 8006d00 <USB_EPStartXfer+0x12c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006cc8:	6913      	ldr	r3, [r2, #16]
 8006cca:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8006cce:	431c      	orrs	r4, r3
 8006cd0:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;      
 8006cd2:	6913      	ldr	r3, [r2, #16]
 8006cd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cd8:	6113      	str	r3, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 8006cda:	78cb      	ldrb	r3, [r1, #3]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d10a      	bne.n	8006cf6 <USB_EPStartXfer+0x122>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8006ce0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8006ce4:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ce8:	6813      	ldr	r3, [r2, #0]
 8006cea:	bf0c      	ite	eq
 8006cec:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006cf0:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8006cf4:	6013      	str	r3, [r2, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006cf6:	6813      	ldr	r3, [r2, #0]
 8006cf8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cfc:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8006cfe:	e7a2      	b.n	8006c46 <USB_EPStartXfer+0x72>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 8006d00:	4d0f      	ldr	r5, [pc, #60]	; (8006d40 <USB_EPStartXfer+0x16c>)
 8006d02:	6916      	ldr	r6, [r2, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket; 
 8006d04:	4423      	add	r3, r4
 8006d06:	3b01      	subs	r3, #1
 8006d08:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 8006d0c:	ea05 45c3 	and.w	r5, r5, r3, lsl #19
 8006d10:	4335      	orrs	r5, r6
 8006d12:	6115      	str	r5, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt)); 
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	6915      	ldr	r5, [r2, #16]
 8006d18:	435c      	muls	r4, r3
 8006d1a:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8006d1e:	432c      	orrs	r4, r5
 8006d20:	6114      	str	r4, [r2, #16]
 8006d22:	e7da      	b.n	8006cda <USB_EPStartXfer+0x106>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8006d24:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8006d28:	f414 7f80 	tst.w	r4, #256	; 0x100
 8006d2c:	f04f 0420 	mov.w	r4, #32
 8006d30:	d0b3      	beq.n	8006c9a <USB_EPStartXfer+0xc6>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d32:	fb14 6405 	smlabb	r4, r4, r5, r6
 8006d36:	6825      	ldr	r5, [r4, #0]
 8006d38:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8006d3c:	6025      	str	r5, [r4, #0]
 8006d3e:	e773      	b.n	8006c28 <USB_EPStartXfer+0x54>
 8006d40:	1ff80000 	.word	0x1ff80000

08006d44 <USB_EP0StartXfer>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8006d44:	784b      	ldrb	r3, [r1, #1]
 8006d46:	2b01      	cmp	r3, #1
{
 8006d48:	b530      	push	{r4, r5, lr}
 8006d4a:	780b      	ldrb	r3, [r1, #0]
 8006d4c:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1)
 8006d4e:	d13e      	bne.n	8006dce <USB_EP0StartXfer+0x8a>
 8006d50:	2220      	movs	r2, #32
 8006d52:	f500 6410 	add.w	r4, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8006d56:	fb12 4303 	smlabb	r3, r2, r3, r4
 8006d5a:	691a      	ldr	r2, [r3, #16]
    if (ep->xfer_len == 0)
 8006d5c:	b9fd      	cbnz	r5, 8006d9e <USB_EP0StartXfer+0x5a>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8006d5e:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8006d62:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8006d66:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8006d68:	691a      	ldr	r2, [r3, #16]
 8006d6a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006d6e:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8006d70:	691a      	ldr	r2, [r3, #16]
 8006d72:	0cd2      	lsrs	r2, r2, #19
 8006d74:	04d2      	lsls	r2, r2, #19
 8006d76:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0)
 8006d78:	694b      	ldr	r3, [r1, #20]
 8006d7a:	b13b      	cbz	r3, 8006d8c <USB_EP0StartXfer+0x48>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1 << (ep->num);
 8006d7c:	780d      	ldrb	r5, [r1, #0]
 8006d7e:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8006d82:	2301      	movs	r3, #1
 8006d84:	40ab      	lsls	r3, r5
 8006d86:	4313      	orrs	r3, r2
 8006d88:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 8006d8c:	780b      	ldrb	r3, [r1, #0]
 8006d8e:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8006d98:	601a      	str	r2, [r3, #0]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	bd30      	pop	{r4, r5, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d9e:	0cd2      	lsrs	r2, r2, #19
 8006da0:	04d2      	lsls	r2, r2, #19
 8006da2:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8006da4:	691a      	ldr	r2, [r3, #16]
 8006da6:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8006daa:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8006dae:	611a      	str	r2, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8006db0:	688a      	ldr	r2, [r1, #8]
 8006db2:	4295      	cmp	r5, r2
        ep->xfer_len = ep->maxpacket;
 8006db4:	bf88      	it	hi
 8006db6:	614a      	strhi	r2, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8006db8:	691a      	ldr	r2, [r3, #16]
 8006dba:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006dbe:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8006dc0:	694a      	ldr	r2, [r1, #20]
 8006dc2:	691d      	ldr	r5, [r3, #16]
 8006dc4:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006dc8:	432a      	orrs	r2, r5
 8006dca:	611a      	str	r2, [r3, #16]
 8006dcc:	e7d4      	b.n	8006d78 <USB_EP0StartXfer+0x34>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8006dce:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8006dd2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8006dd6:	6903      	ldr	r3, [r0, #16]
 8006dd8:	0cdb      	lsrs	r3, r3, #19
 8006dda:	04db      	lsls	r3, r3, #19
 8006ddc:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8006dde:	6903      	ldr	r3, [r0, #16]
 8006de0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006de4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006de8:	6103      	str	r3, [r0, #16]
 8006dea:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0)
 8006dec:	b105      	cbz	r5, 8006df0 <USB_EP0StartXfer+0xac>
      ep->xfer_len = ep->maxpacket;
 8006dee:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 8006df0:	6902      	ldr	r2, [r0, #16]
 8006df2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006df6:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8006df8:	6902      	ldr	r2, [r0, #16]
 8006dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8006e02:	6803      	ldr	r3, [r0, #0]
 8006e04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e08:	6003      	str	r3, [r0, #0]
 8006e0a:	e7c6      	b.n	8006d9a <USB_EP0StartXfer+0x56>

08006e0c <USB_WritePacket>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  uint32_t count32b= 0 , index= 0;
  count32b =  (len + 3) / 4;
 8006e0c:	3303      	adds	r3, #3
  for (index = 0; index < count32b; index++, src += 4)
  {
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8006e0e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
{
 8006e12:	b510      	push	{r4, lr}
  count32b =  (len + 3) / 4;
 8006e14:	109b      	asrs	r3, r3, #2
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8006e16:	eb00 3202 	add.w	r2, r0, r2, lsl #12
  for (index = 0; index < count32b; index++, src += 4)
 8006e1a:	2400      	movs	r4, #0
 8006e1c:	429c      	cmp	r4, r3
 8006e1e:	d101      	bne.n	8006e24 <USB_WritePacket+0x18>
  }
  return HAL_OK;
}
 8006e20:	2000      	movs	r0, #0
 8006e22:	bd10      	pop	{r4, pc}
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8006e24:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8006e28:	6010      	str	r0, [r2, #0]
  for (index = 0; index < count32b; index++, src += 4)
 8006e2a:	3401      	adds	r4, #1
 8006e2c:	e7f6      	b.n	8006e1c <USB_WritePacket+0x10>

08006e2e <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e2e:	b510      	push	{r4, lr}
  uint32_t index=0;
  uint32_t count32b = (len + 3) / 4;
 8006e30:	3203      	adds	r2, #3
 8006e32:	1092      	asrs	r2, r2, #2
  
  for ( index = 0; index < count32b; index++, dest += 4 )
 8006e34:	2300      	movs	r3, #0
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8006e36:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( index = 0; index < count32b; index++, dest += 4 )
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d102      	bne.n	8006e44 <USB_ReadPacket+0x16>
    
  }
  return ((void *)dest);
}
 8006e3e:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8006e42:	bd10      	pop	{r4, pc}
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8006e44:	6804      	ldr	r4, [r0, #0]
 8006e46:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  for ( index = 0; index < count32b; index++, dest += 4 )
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	e7f5      	b.n	8006e3a <USB_ReadPacket+0xc>

08006e4e <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8006e4e:	784b      	ldrb	r3, [r1, #1]
 8006e50:	780a      	ldrb	r2, [r1, #0]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	f04f 0320 	mov.w	r3, #32
 8006e58:	d10b      	bne.n	8006e72 <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 8006e5a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8006e5e:	fb13 0002 	smlabb	r0, r3, r2, r0
 8006e62:	6803      	ldr	r3, [r0, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	db0b      	blt.n	8006e80 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8006e68:	6803      	ldr	r3, [r0, #0]
 8006e6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e6e:	6003      	str	r3, [r0, #0]
 8006e70:	e006      	b.n	8006e80 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 8006e72:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8006e76:	fb13 0002 	smlabb	r0, r3, r2, r0
 8006e7a:	6803      	ldr	r3, [r0, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	daf3      	bge.n	8006e68 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006e80:	6803      	ldr	r3, [r0, #0]
 8006e82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e86:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8006e88:	2000      	movs	r0, #0
 8006e8a:	4770      	bx	lr

08006e8c <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8006e8c:	784b      	ldrb	r3, [r1, #1]
 8006e8e:	780a      	ldrb	r2, [r1, #0]
 8006e90:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006e92:	bf0c      	ite	eq
 8006e94:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006e98:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8006e9c:	2320      	movs	r3, #32
 8006e9e:	fb13 0002 	smlabb	r0, r3, r2, r0
 8006ea2:	6803      	ldr	r3, [r0, #0]
 8006ea4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ea8:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8006eaa:	78cb      	ldrb	r3, [r1, #3]
 8006eac:	3b02      	subs	r3, #2
 8006eae:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006eb0:	bf9e      	ittt	ls
 8006eb2:	6803      	ldrls	r3, [r0, #0]
 8006eb4:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8006eb8:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8006eba:	2000      	movs	r0, #0
 8006ebc:	4770      	bx	lr

08006ebe <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the USB device mode
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 8006ebe:	b538      	push	{r3, r4, r5, lr}
 8006ec0:	f500 612e 	add.w	r1, r0, #2784	; 0xae0
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	f500 6310 	add.w	r3, r0, #2304	; 0x900
  uint32_t index;
  
  /* Clear Pending interrupt */
  for (index = 0; index < 15 ; index++)
  {
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8006eca:	22ff      	movs	r2, #255	; 0xff
 8006ecc:	609a      	str	r2, [r3, #8]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8006ece:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8006ed2:	3320      	adds	r3, #32
  for (index = 0; index < 15 ; index++)
 8006ed4:	428b      	cmp	r3, r1
 8006ed6:	d1f9      	bne.n	8006ecc <USB_StopDevice+0xe>
  }
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
  
  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0;
 8006ed8:	2500      	movs	r5, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8006eda:	f04f 32ff 	mov.w	r2, #4294967295
 8006ede:	f8c4 2818 	str.w	r2, [r4, #2072]	; 0x818
  USBx_DEVICE->DOEPMSK  = 0;
  USBx_DEVICE->DAINTMSK = 0;
  
  /* Flush the FIFO */
  USB_FlushRxFifo(USBx);
 8006ee2:	4620      	mov	r0, r4
  USBx_DEVICE->DIEPMSK  = 0;
 8006ee4:	f8c4 5810 	str.w	r5, [r4, #2064]	; 0x810
  USBx_DEVICE->DOEPMSK  = 0;
 8006ee8:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
  USBx_DEVICE->DAINTMSK = 0;
 8006eec:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
  USB_FlushRxFifo(USBx);
 8006ef0:	f7ff fdec 	bl	8006acc <USB_FlushRxFifo>
  USB_FlushTxFifo(USBx ,  0x10 );  
 8006ef4:	2110      	movs	r1, #16
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	f7ff fdd6 	bl	8006aa8 <USB_FlushTxFifo>
  
  return HAL_OK;
}
 8006efc:	4628      	mov	r0, r5
 8006efe:	bd38      	pop	{r3, r4, r5, pc}

08006f00 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8006f00:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006f04:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006f08:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 8006f0c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006f10:	0109      	lsls	r1, r1, #4
 8006f12:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8006f16:	4319      	orrs	r1, r3
 8006f18:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	4770      	bx	lr

08006f20 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8006f20:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ; 
 8006f22:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8006f26:	f023 0302 	bic.w	r3, r3, #2
 8006f2a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8006f2e:	2003      	movs	r0, #3
 8006f30:	f7fc fc86 	bl	8003840 <HAL_Delay>
  
  return HAL_OK;  
}
 8006f34:	2000      	movs	r0, #0
 8006f36:	bd08      	pop	{r3, pc}

08006f38 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8006f38:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ; 
 8006f3a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8006f3e:	f043 0302 	orr.w	r3, r3, #2
 8006f42:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8006f46:	2003      	movs	r0, #3
 8006f48:	f7fc fc7a 	bl	8003840 <HAL_Delay>
  
  return HAL_OK;  
}
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	bd08      	pop	{r3, pc}

08006f50 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->GINTSTS;
 8006f50:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8006f52:	6980      	ldr	r0, [r0, #24]
  return tmpreg;  
}
 8006f54:	4010      	ands	r0, r2
 8006f56:	4770      	bx	lr

08006f58 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 8006f58:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8006f5c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f60:	69c0      	ldr	r0, [r0, #28]
 8006f62:	4018      	ands	r0, r3
  return ((tmpreg & 0xffff0000) >> 16);
}
 8006f64:	0c00      	lsrs	r0, r0, #16
 8006f66:	4770      	bx	lr

08006f68 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 8006f68:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8006f6c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f70:	69c0      	ldr	r0, [r0, #28]
 8006f72:	4018      	ands	r0, r3
  return ((tmpreg & 0xFFFF));
}
 8006f74:	b280      	uxth	r0, r0
 8006f76:	4770      	bx	lr

08006f78 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t tmpreg;
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8006f78:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8006f7c:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006f80:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8006f84:	688a      	ldr	r2, [r1, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006f86:	6940      	ldr	r0, [r0, #20]
  return tmpreg;
}
 8006f88:	4010      	ands	r0, r2
 8006f8a:	4770      	bx	lr

08006f8c <USB_ReadDevInEPInterrupt>:
  * @param  epnum: endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8006f8c:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, msk = 0, emp = 0;
  
  msk = USBx_DEVICE->DIEPMSK;
 8006f8e:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006f92:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1) << 7;
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8006f96:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1) << 7;
 8006f9a:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8006f9c:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1) << 7;
 8006fa0:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8006fa2:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	4323      	orrs	r3, r4
  return tmpreg;
}
 8006fa8:	4018      	ands	r0, r3
 8006faa:	bd10      	pop	{r4, pc}

08006fac <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1);
 8006fac:	6940      	ldr	r0, [r0, #20]
}
 8006fae:	f000 0001 	and.w	r0, r0, #1
 8006fb2:	4770      	bx	lr

08006fb4 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006fb4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006fb8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006fbc:	f023 0307 	bic.w	r3, r3, #7
 8006fc0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8006fc4:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	f002 0206 	and.w	r2, r2, #6
 8006fce:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 8006fd0:	bf02      	ittt	eq
 8006fd2:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8006fd6:	f042 0203 	orreq.w	r2, r2, #3
 8006fda:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fe4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	4770      	bx	lr

08006fea <USB_EP0_OutStart>:
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(psetup);

  USBx_OUTEP(0)->DOEPTSIZ = 0;
 8006fea:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8006fee:	2000      	movs	r0, #0
 8006ff0:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8006ff2:	691a      	ldr	r2, [r3, #16]
 8006ff4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006ff8:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 8006ffa:	691a      	ldr	r2, [r3, #16]
 8006ffc:	f042 0218 	orr.w	r2, r2, #24
 8007000:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8007002:	691a      	ldr	r2, [r3, #16]
 8007004:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8007008:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
}
 800700a:	4770      	bx	lr

0800700c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]
  
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3301      	adds	r3, #1
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	4a13      	ldr	r2, [pc, #76]	; (8007070 <USB_CoreReset+0x64>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d901      	bls.n	800702a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e01b      	b.n	8007062 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	daf2      	bge.n	8007018 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 8007032:	2300      	movs	r3, #0
 8007034:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	f043 0201 	orr.w	r2, r3, #1
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4a09      	ldr	r2, [pc, #36]	; (8007070 <USB_CoreReset+0x64>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d901      	bls.n	8007054 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e006      	b.n	8007062 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	f003 0301 	and.w	r3, r3, #1
 800705c:	2b01      	cmp	r3, #1
 800705e:	d0f0      	beq.n	8007042 <USB_CoreReset+0x36>
  
  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	00030d40 	.word	0x00030d40

08007074 <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8007074:	4b08      	ldr	r3, [pc, #32]	; (8007098 <LL_mDelay+0x24>)
{
 8007076:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800707c:	9b01      	ldr	r3, [sp, #4]
    Delay++;
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 800707e:	4b06      	ldr	r3, [pc, #24]	; (8007098 <LL_mDelay+0x24>)
  if (Delay < LL_MAX_DELAY)
 8007080:	1c41      	adds	r1, r0, #1
    Delay++;
 8007082:	bf18      	it	ne
 8007084:	3001      	addne	r0, #1
  while (Delay)
 8007086:	b908      	cbnz	r0, 800708c <LL_mDelay+0x18>
    {
      Delay--;
    }
  }
}
 8007088:	b002      	add	sp, #8
 800708a:	4770      	bx	lr
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	03d2      	lsls	r2, r2, #15
      Delay--;
 8007090:	bf48      	it	mi
 8007092:	f100 30ff 	addmi.w	r0, r0, #4294967295
 8007096:	e7f6      	b.n	8007086 <LL_mDelay+0x12>
 8007098:	e000e010 	.word	0xe000e010

0800709c <Reboot_Handler>:
    .section	.text.Reboot_Handler
	//.weak	Reboot_Handler
	.type	Reboot_Handler, %function
Reboot_Handler:

               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 800709c:	4805      	ldr	r0, [pc, #20]	; (80070b4 <Reboot_Handler+0x18>)
                LDR     R1, =0x00000001 // ENABLE SYSCFG CLOCK
 800709e:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 80070a0:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 80070a2:	4805      	ldr	r0, [pc, #20]	; (80070b8 <Reboot_Handler+0x1c>)
                LDR     R1, =0x00000001 // MAP ROM AT ZERO
 80070a4:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 80070a6:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 80070a8:	4804      	ldr	r0, [pc, #16]	; (80070bc <Reboot_Handler+0x20>)
                LDR     SP,[R0, #0]     // SP @ +0
 80070aa:	f8d0 d000 	ldr.w	sp, [r0]
                LDR     R0,[R0, #4]    //  PC @ +4
 80070ae:	6840      	ldr	r0, [r0, #4]
                BX      R0
 80070b0:	4700      	bx	r0
 80070b2:	0000      	.short	0x0000
               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 80070b4:	40021060 	.word	0x40021060
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 80070b8:	40010000 	.word	0x40010000
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 80070bc:	1fff0000 	.word	0x1fff0000

080070c0 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 80070c0:	4811      	ldr	r0, [pc, #68]	; (8007108 <LoopForever+0x4>)
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 80070c2:	4912      	ldr	r1, [pc, #72]	; (800710c <LoopForever+0x8>)
                LDR     R2, [R0, #0]
 80070c4:	6802      	ldr	r2, [r0, #0]
                STR     R0, [R0, #0]     // Invalidate Bootloader_Key_Value
 80070c6:	6000      	str	r0, [r0, #0]
                // zero data at Bootloader_Ram_Key_Address to avoid looping in DFU Mode

                CMP     R2, R1
 80070c8:	428a      	cmp	r2, r1
                BEQ     Reboot_Handler    // Jump to DfuModeEntry Lable if Bootloader_Key_Value matches
 80070ca:	f43f afe7 	beq.w	800709c <Reboot_Handler>

                // Conitnue without entering DFU Mode


  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80070ce:	f8df d040 	ldr.w	sp, [pc, #64]	; 8007110 <LoopForever+0xc>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80070d2:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80070d4:	e003      	b.n	80070de <LoopCopyDataInit>

080070d6 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80070d6:	4b0f      	ldr	r3, [pc, #60]	; (8007114 <LoopForever+0x10>)
	ldr	r3, [r3, r1]
 80070d8:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80070da:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80070dc:	3104      	adds	r1, #4

080070de <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80070de:	480e      	ldr	r0, [pc, #56]	; (8007118 <LoopForever+0x14>)
	ldr	r3, =_edata
 80070e0:	4b0e      	ldr	r3, [pc, #56]	; (800711c <LoopForever+0x18>)
	adds	r2, r0, r1
 80070e2:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80070e4:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80070e6:	d3f6      	bcc.n	80070d6 <CopyDataInit>
	ldr	r2, =_sbss
 80070e8:	4a0d      	ldr	r2, [pc, #52]	; (8007120 <LoopForever+0x1c>)
	b	LoopFillZerobss
 80070ea:	e002      	b.n	80070f2 <LoopFillZerobss>

080070ec <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80070ec:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80070ee:	f842 3b04 	str.w	r3, [r2], #4

080070f2 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80070f2:	4b0c      	ldr	r3, [pc, #48]	; (8007124 <LoopForever+0x20>)
	cmp	r2, r3
 80070f4:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80070f6:	d3f9      	bcc.n	80070ec <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80070f8:	f004 fc32 	bl	800b960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80070fc:	f005 fd10 	bl	800cb20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007100:	f002 f920 	bl	8009344 <main>

08007104 <LoopForever>:

LoopForever:
    b LoopForever
 8007104:	e7fe      	b.n	8007104 <LoopForever>
 8007106:	0000      	.short	0x0000
                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 8007108:	20017ff0 	.word	0x20017ff0
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 800710c:	deadbeef 	.word	0xdeadbeef
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007110:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8007114:	0800ef40 	.word	0x0800ef40
	ldr	r0, =_sdata
 8007118:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800711c:	200004bc 	.word	0x200004bc
	ldr	r2, =_sbss
 8007120:	200004c0 	.word	0x200004c0
	ldr	r3, = _ebss
 8007124:	2000d508 	.word	0x2000d508

08007128 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007128:	e7fe      	b.n	8007128 <ADC1_2_IRQHandler>

0800712a <EPOS4_data_framer>:
#include "EPOS4.h"
#include "time_functions.h"


//This is useful for later adding in functionality. Should work for any Client to Server SDO
void EPOS4_data_framer(uint8_t * data, uint16_t object, uint8_t subindex, uint32_t value){
 800712a:	b510      	push	{r4, lr}
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
    data[1] = (0x00 | object); //Index LowByte
    data[2] = (0x00 | (object >> 8)); //Index HighByte
    data[3] = subindex; //subindex
 800712c:	70c2      	strb	r2, [r0, #3]
    data[4] = (0x00 | value); //SDO Byte 0
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 800712e:	0a1a      	lsrs	r2, r3, #8
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 8007130:	2422      	movs	r4, #34	; 0x22
    data[1] = (0x00 | object); //Index LowByte
 8007132:	7041      	strb	r1, [r0, #1]
    data[4] = (0x00 | value); //SDO Byte 0
 8007134:	7103      	strb	r3, [r0, #4]
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8007136:	0a09      	lsrs	r1, r1, #8
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8007138:	7142      	strb	r2, [r0, #5]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 800713a:	0c1a      	lsrs	r2, r3, #16
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 800713c:	0e1b      	lsrs	r3, r3, #24
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 800713e:	7004      	strb	r4, [r0, #0]
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8007140:	7081      	strb	r1, [r0, #2]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8007142:	7182      	strb	r2, [r0, #6]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 8007144:	71c3      	strb	r3, [r0, #7]
 8007146:	bd10      	pop	{r4, pc}

08007148 <EPOS4_set_operation_mode>:
}

void EPOS4_set_operation_mode(uint16_t CAN_ID, uint32_t mode){
 8007148:	b513      	push	{r0, r1, r4, lr}
    uint8_t data[8];
//    uint16_t object = 0x6060;
//    uint8_t subindex = 0x00;

    EPOS4_data_framer(data, 0x6060 , 0, mode);
 800714a:	460b      	mov	r3, r1
void EPOS4_set_operation_mode(uint16_t CAN_ID, uint32_t mode){
 800714c:	4604      	mov	r4, r0
    EPOS4_data_framer(data, 0x6060 , 0, mode);
 800714e:	2200      	movs	r2, #0
 8007150:	4668      	mov	r0, sp
 8007152:	f246 0160 	movw	r1, #24672	; 0x6060
 8007156:	f7ff ffe8 	bl	800712a <EPOS4_data_framer>

    CAN_transmit(CAN_ID, 8, data);
 800715a:	466a      	mov	r2, sp
 800715c:	2108      	movs	r1, #8
 800715e:	4620      	mov	r0, r4
 8007160:	f002 fab5 	bl	80096ce <CAN_transmit>
    delay_us(10000);
 8007164:	f242 7010 	movw	r0, #10000	; 0x2710
 8007168:	f004 fc98 	bl	800ba9c <delay_us>
}
 800716c:	b002      	add	sp, #8
 800716e:	bd10      	pop	{r4, pc}

08007170 <EPOS4_PVM_start>:

    CAN_transmit(CAN_ID, 8, data);
    delay_us(10000);
}

void EPOS4_PVM_start(uint16_t CAN_ID){
 8007170:	b507      	push	{r0, r1, r2, lr}
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 8007172:	2322      	movs	r3, #34	; 0x22
 8007174:	f88d 3000 	strb.w	r3, [sp]
    data[1] = (0x00 | object); //Index LowByte
 8007178:	2340      	movs	r3, #64	; 0x40
 800717a:	f88d 3001 	strb.w	r3, [sp, #1]
    data[4] = (0x00 | value); //SDO Byte 0
 800717e:	220f      	movs	r2, #15
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8007180:	2360      	movs	r3, #96	; 0x60
 8007182:	f88d 3002 	strb.w	r3, [sp, #2]
    data[4] = (0x00 | value); //SDO Byte 0
 8007186:	f88d 2004 	strb.w	r2, [sp, #4]
    data[3] = subindex; //subindex
 800718a:	2300      	movs	r3, #0
//    int subindex = 0x00;
//    int value = 0x000F;

    EPOS4_data_framer(data, 0x6040, 0x00, 0x0F);

    CAN_transmit(CAN_ID, 8, data);
 800718c:	466a      	mov	r2, sp
 800718e:	2108      	movs	r1, #8
    data[3] = subindex; //subindex
 8007190:	f88d 3003 	strb.w	r3, [sp, #3]
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8007194:	f88d 3005 	strb.w	r3, [sp, #5]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8007198:	f88d 3006 	strb.w	r3, [sp, #6]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 800719c:	f88d 3007 	strb.w	r3, [sp, #7]
    CAN_transmit(CAN_ID, 8, data);
 80071a0:	f002 fa95 	bl	80096ce <CAN_transmit>
    delay_us(10000);
 80071a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80071a8:	f004 fc78 	bl	800ba9c <delay_us>
}
 80071ac:	b003      	add	sp, #12
 80071ae:	f85d fb04 	ldr.w	pc, [sp], #4

080071b2 <EPOS4_enable>:
void EPOS4_enable(uint16_t CAN_ID){
 80071b2:	b513      	push	{r0, r1, r4, lr}
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 80071b4:	2322      	movs	r3, #34	; 0x22
 80071b6:	f88d 3000 	strb.w	r3, [sp]
    data[1] = (0x00 | object); //Index LowByte
 80071ba:	2340      	movs	r3, #64	; 0x40
 80071bc:	f88d 3001 	strb.w	r3, [sp, #1]
    data[4] = (0x00 | value); //SDO Byte 0
 80071c0:	2206      	movs	r2, #6
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 80071c2:	2360      	movs	r3, #96	; 0x60
    CAN_transmit(CAN_ID, 8, data);
 80071c4:	2108      	movs	r1, #8
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 80071c6:	f88d 3002 	strb.w	r3, [sp, #2]
    data[4] = (0x00 | value); //SDO Byte 0
 80071ca:	f88d 2004 	strb.w	r2, [sp, #4]
    data[3] = subindex; //subindex
 80071ce:	2300      	movs	r3, #0
    CAN_transmit(CAN_ID, 8, data);
 80071d0:	466a      	mov	r2, sp
void EPOS4_enable(uint16_t CAN_ID){
 80071d2:	4604      	mov	r4, r0
    data[3] = subindex; //subindex
 80071d4:	f88d 3003 	strb.w	r3, [sp, #3]
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 80071d8:	f88d 3005 	strb.w	r3, [sp, #5]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 80071dc:	f88d 3006 	strb.w	r3, [sp, #6]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 80071e0:	f88d 3007 	strb.w	r3, [sp, #7]
    CAN_transmit(CAN_ID, 8, data);
 80071e4:	f002 fa73 	bl	80096ce <CAN_transmit>
    delay_us(10000);
 80071e8:	f242 7010 	movw	r0, #10000	; 0x2710
 80071ec:	f004 fc56 	bl	800ba9c <delay_us>
    EPOS4_enable2(CAN_ID);
 80071f0:	4620      	mov	r0, r4
 80071f2:	f7ff ffbd 	bl	8007170 <EPOS4_PVM_start>
}
 80071f6:	b002      	add	sp, #8
 80071f8:	bd10      	pop	{r4, pc}

080071fa <EPOS4_CST_apply_torque>:
    CAN_transmit(CAN_ID, 8, data);
    delay_us(10000);
}


void EPOS4_CST_apply_torque(uint16_t CAN_ID, uint32_t torque){
 80071fa:	b513      	push	{r0, r1, r4, lr}
//    }
//    else{
//
//    }

    EPOS4_data_framer(data, 0x6071, 0x00, torque);
 80071fc:	460b      	mov	r3, r1
void EPOS4_CST_apply_torque(uint16_t CAN_ID, uint32_t torque){
 80071fe:	4604      	mov	r4, r0
    EPOS4_data_framer(data, 0x6071, 0x00, torque);
 8007200:	2200      	movs	r2, #0
 8007202:	4668      	mov	r0, sp
 8007204:	f246 0171 	movw	r1, #24689	; 0x6071
 8007208:	f7ff ff8f 	bl	800712a <EPOS4_data_framer>

    CAN_transmit(CAN_ID, 8, data);
 800720c:	466a      	mov	r2, sp
 800720e:	2108      	movs	r1, #8
 8007210:	4620      	mov	r0, r4
 8007212:	f002 fa5c 	bl	80096ce <CAN_transmit>
    delay_us(50); //1500
 8007216:	2032      	movs	r0, #50	; 0x32
 8007218:	f004 fc40 	bl	800ba9c <delay_us>
}
 800721c:	b002      	add	sp, #8
 800721e:	bd10      	pop	{r4, pc}

08007220 <EPOS4_clear_errors>:

    CAN_transmit(CAN_ID, 8, data);
    delay_us(1500);
}

void EPOS4_clear_errors(uint16_t CAN_ID){
 8007220:	b507      	push	{r0, r1, r2, lr}
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 8007222:	2322      	movs	r3, #34	; 0x22
 8007224:	f88d 3000 	strb.w	r3, [sp]
    data[1] = (0x00 | object); //Index LowByte
 8007228:	2340      	movs	r3, #64	; 0x40
 800722a:	f88d 3001 	strb.w	r3, [sp, #1]
    data[4] = (0x00 | value); //SDO Byte 0
 800722e:	2280      	movs	r2, #128	; 0x80
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8007230:	2360      	movs	r3, #96	; 0x60
 8007232:	f88d 3002 	strb.w	r3, [sp, #2]
    data[4] = (0x00 | value); //SDO Byte 0
 8007236:	f88d 2004 	strb.w	r2, [sp, #4]
    data[3] = subindex; //subindex
 800723a:	2300      	movs	r3, #0
//    int object = 0x6040;
//    int subindex = 0x00;
//    int value = 0x0080;
    EPOS4_data_framer(data, 0x6040, 0x00, 0x80);

    CAN_transmit(CAN_ID, 8, data);
 800723c:	466a      	mov	r2, sp
 800723e:	2108      	movs	r1, #8
    data[3] = subindex; //subindex
 8007240:	f88d 3003 	strb.w	r3, [sp, #3]
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8007244:	f88d 3005 	strb.w	r3, [sp, #5]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8007248:	f88d 3006 	strb.w	r3, [sp, #6]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 800724c:	f88d 3007 	strb.w	r3, [sp, #7]
    CAN_transmit(CAN_ID, 8, data);
 8007250:	f002 fa3d 	bl	80096ce <CAN_transmit>
//    delay_us(200);
//    delay_us(1500); // testing by commenting it
}
 8007254:	b003      	add	sp, #12
 8007256:	f85d fb04 	ldr.w	pc, [sp], #4

0800725a <Impedance>:
    //3rd polynomial fit
    double poly_coefficient[4] = {2.22320112553112e-08,-9.47330958490815e-06,0.000674466762924094,0.0316020276371335}; //3rd order to 0 order
    return poly_coefficient[0]*pow(KneeAngle,3.0)+poly_coefficient[1]*pow(KneeAngle,2.0)+poly_coefficient[2]*KneeAngle+poly_coefficient[3];
}

double Impedance(double KneeAngle, double Knee_Velocity, double K1, double B, double Theta_E){
 800725a:	b530      	push	{r4, r5, lr}
    
    return -1*(K1*(Theta_E-KneeAngle)-B*Knee_Velocity);
 800725c:	ec53 2b10 	vmov	r2, r3, d0
double Impedance(double KneeAngle, double Knee_Velocity, double K1, double B, double Theta_E){
 8007260:	b087      	sub	sp, #28
    return -1*(K1*(Theta_E-KneeAngle)-B*Knee_Velocity);
 8007262:	ec51 0b14 	vmov	r0, r1, d4
double Impedance(double KneeAngle, double Knee_Velocity, double K1, double B, double Theta_E){
 8007266:	ed8d 1b04 	vstr	d1, [sp, #16]
 800726a:	ed8d 3b00 	vstr	d3, [sp]
 800726e:	ed8d 2b02 	vstr	d2, [sp, #8]
    return -1*(K1*(Theta_E-KneeAngle)-B*Knee_Velocity);
 8007272:	f7f9 f809 	bl	8000288 <__aeabi_dsub>
 8007276:	ed9d 2b02 	vldr	d2, [sp, #8]
 800727a:	ec53 2b12 	vmov	r2, r3, d2
 800727e:	f7f9 f9b7 	bl	80005f0 <__aeabi_dmul>
 8007282:	ed9d 1b04 	vldr	d1, [sp, #16]
 8007286:	ed9d 3b00 	vldr	d3, [sp]
 800728a:	ec53 2b11 	vmov	r2, r3, d1
 800728e:	4604      	mov	r4, r0
 8007290:	460d      	mov	r5, r1
 8007292:	ec51 0b13 	vmov	r0, r1, d3
 8007296:	f7f9 f9ab 	bl	80005f0 <__aeabi_dmul>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	4620      	mov	r0, r4
 80072a0:	4629      	mov	r1, r5
 80072a2:	f7f8 fff1 	bl	8000288 <__aeabi_dsub>
 80072a6:	4602      	mov	r2, r0
 80072a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
}
 80072ac:	ec43 2b10 	vmov	d0, r2, r3
 80072b0:	b007      	add	sp, #28
 80072b2:	bd30      	pop	{r4, r5, pc}

080072b4 <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80072b4:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 80072b6:	2301      	movs	r3, #1
 80072b8:	f88d 3007 	strb.w	r3, [sp, #7]
  
//  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
//  {
//   status = SD_NOT_PRESENT;
//  }
  return status;
 80072bc:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80072c0:	b002      	add	sp, #8
 80072c2:	4770      	bx	lr

080072c4 <BSP_SD_IRQHandler>:
  * @brief  Handles SD card interrupt request.
  * @retval None
  */
void BSP_SD_IRQHandler(void)
{
  HAL_SD_IRQHandler(&uSdHandle);
 80072c4:	4801      	ldr	r0, [pc, #4]	; (80072cc <BSP_SD_IRQHandler+0x8>)
 80072c6:	f7fe b80f 	b.w	80052e8 <HAL_SD_IRQHandler>
 80072ca:	bf00      	nop
 80072cc:	20008990 	.word	0x20008990

080072d0 <BSP_SD_DMA_Tx_IRQHandler>:
  * @brief  Handles SD DMA Tx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Tx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmatx);
 80072d0:	4b01      	ldr	r3, [pc, #4]	; (80072d8 <BSP_SD_DMA_Tx_IRQHandler+0x8>)
 80072d2:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80072d4:	f7fc bc52 	b.w	8003b7c <HAL_DMA_IRQHandler>
 80072d8:	20008990 	.word	0x20008990

080072dc <BSP_SD_DMA_Rx_IRQHandler>:
  * @brief  Handles SD DMA Rx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Rx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 80072dc:	4b01      	ldr	r3, [pc, #4]	; (80072e4 <BSP_SD_DMA_Rx_IRQHandler+0x8>)
 80072de:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80072e0:	f7fc bc4c 	b.w	8003b7c <HAL_DMA_IRQHandler>
 80072e4:	20008990 	.word	0x20008990

080072e8 <BSP_SD_GetStatus>:
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  *            @arg  SD_TRANSFER_ERROR: Data transfer error 
  */
HAL_SD_TransferStateTypedef BSP_SD_GetStatus(void)
{
  return(HAL_SD_GetStatus(&uSdHandle));
 80072e8:	4801      	ldr	r0, [pc, #4]	; (80072f0 <BSP_SD_GetStatus+0x8>)
 80072ea:	f7fe bc4b 	b.w	8005b84 <HAL_SD_GetStatus>
 80072ee:	bf00      	nop
 80072f0:	20008990 	.word	0x20008990

080072f4 <BSP_SD_GetCardInfo>:
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypedef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_Get_CardInfo(&uSdHandle, CardInfo);
 80072f4:	4601      	mov	r1, r0
 80072f6:	4801      	ldr	r0, [pc, #4]	; (80072fc <BSP_SD_GetCardInfo+0x8>)
 80072f8:	f7fe b856 	b.w	80053a8 <HAL_SD_Get_CardInfo>
 80072fc:	20008990 	.word	0x20008990

08007300 <SD_DMAConfigRx>:
  * @brief Configure the DMA to receive data from the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 8007300:	b510      	push	{r4, lr}
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Configure DMA Rx parameters */
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 8007302:	4c15      	ldr	r4, [pc, #84]	; (8007358 <SD_DMAConfigRx+0x58>)
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_rx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 8007304:	6584      	str	r4, [r0, #88]	; 0x58
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 8007306:	2307      	movs	r3, #7
 8007308:	6063      	str	r3, [r4, #4]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800730a:	2300      	movs	r3, #0
 800730c:	60a3      	str	r3, [r4, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800730e:	60e3      	str	r3, [r4, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8007310:	2380      	movs	r3, #128	; 0x80
 8007312:	6123      	str	r3, [r4, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007318:	6163      	str	r3, [r4, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800731a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800731e:	61a3      	str	r3, [r4, #24]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8007320:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007324:	6223      	str	r3, [r4, #32]
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 8007326:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_rx.Instance = DMA2_Channel4;
 8007328:	4b0c      	ldr	r3, [pc, #48]	; (800735c <SD_DMAConfigRx+0x5c>)
 800732a:	6023      	str	r3, [r4, #0]

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_rx);
 800732c:	4620      	mov	r0, r4
 800732e:	f7fc fc07 	bl	8003b40 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_rx);
 8007332:	4620      	mov	r0, r4
 8007334:	f7fc fb7e 	bl	8003a34 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_rx);
 8007338:	4620      	mov	r0, r4
 800733a:	f7fc fb0b 	bl	8003954 <HAL_DMA_Init>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800733e:	4b08      	ldr	r3, [pc, #32]	; (8007360 <SD_DMAConfigRx+0x60>)
 8007340:	2230      	movs	r2, #48	; 0x30
 8007342:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);

  return (status != HAL_OK? SD_ERROR : SD_OK);
 8007346:	2800      	cmp	r0, #0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007348:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800734c:	605a      	str	r2, [r3, #4]
}
 800734e:	bf14      	ite	ne
 8007350:	2029      	movne	r0, #41	; 0x29
 8007352:	2000      	moveq	r0, #0
 8007354:	bd10      	pop	{r4, pc}
 8007356:	bf00      	nop
 8007358:	2000050c 	.word	0x2000050c
 800735c:	40020444 	.word	0x40020444
 8007360:	e000e100 	.word	0xe000e100

08007364 <BSP_SD_ReadBlocks_DMA>:
{
 8007364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uSdHandle.hdmatx = NULL;
 8007366:	4c10      	ldr	r4, [pc, #64]	; (80073a8 <BSP_SD_ReadBlocks_DMA+0x44>)
{
 8007368:	4605      	mov	r5, r0
 800736a:	461f      	mov	r7, r3
  state = ((SD_DMAConfigRx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 800736c:	4620      	mov	r0, r4
  uSdHandle.hdmatx = NULL;
 800736e:	2300      	movs	r3, #0
{
 8007370:	4616      	mov	r6, r2
  uSdHandle.hdmatx = NULL;
 8007372:	65e3      	str	r3, [r4, #92]	; 0x5c
  state = ((SD_DMAConfigRx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8007374:	f7ff ffc4 	bl	8007300 <SD_DMAConfigRx>
  if(state == MSD_OK)
 8007378:	b998      	cbnz	r0, 80073a2 <BSP_SD_ReadBlocks_DMA+0x3e>
    state = ((HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 800737a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800737c:	9301      	str	r3, [sp, #4]
 800737e:	9b08      	ldr	r3, [sp, #32]
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	4632      	mov	r2, r6
 8007384:	463b      	mov	r3, r7
 8007386:	4629      	mov	r1, r5
 8007388:	4620      	mov	r0, r4
 800738a:	f7fd feb3 	bl	80050f4 <HAL_SD_ReadBlocks_DMA>
    if(state == MSD_OK)
 800738e:	b940      	cbnz	r0, 80073a2 <BSP_SD_ReadBlocks_DMA+0x3e>
      state = ((HAL_SD_CheckReadOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 8007390:	4906      	ldr	r1, [pc, #24]	; (80073ac <BSP_SD_ReadBlocks_DMA+0x48>)
 8007392:	4620      	mov	r0, r4
 8007394:	f7fe fbc5 	bl	8005b22 <HAL_SD_CheckReadOperation>
 8007398:	3000      	adds	r0, #0
 800739a:	bf18      	it	ne
 800739c:	2001      	movne	r0, #1
}
 800739e:	b003      	add	sp, #12
 80073a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    state = ((HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 80073a2:	2001      	movs	r0, #1
 80073a4:	e7fb      	b.n	800739e <BSP_SD_ReadBlocks_DMA+0x3a>
 80073a6:	bf00      	nop
 80073a8:	20008990 	.word	0x20008990
 80073ac:	00989680 	.word	0x00989680

080073b0 <SD_DMAConfigTx>:
  * @brief Configure the DMA to transmit data to the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 80073b0:	b510      	push	{r4, lr}
  static DMA_HandleTypeDef hdma_tx;
  HAL_StatusTypeDef status;

  /* Configure DMA Tx parameters */
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 80073b2:	4c15      	ldr	r4, [pc, #84]	; (8007408 <SD_DMAConfigTx+0x58>)
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_tx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 80073b4:	65c4      	str	r4, [r0, #92]	; 0x5c
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 80073b6:	2307      	movs	r3, #7
 80073b8:	6063      	str	r3, [r4, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80073ba:	2310      	movs	r3, #16
 80073bc:	60a3      	str	r3, [r4, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80073be:	2300      	movs	r3, #0
 80073c0:	60e3      	str	r3, [r4, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80073c2:	2380      	movs	r3, #128	; 0x80
 80073c4:	6123      	str	r3, [r4, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80073c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073ca:	6163      	str	r3, [r4, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80073cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073d0:	61a3      	str	r3, [r4, #24]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80073d2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80073d6:	6223      	str	r3, [r4, #32]
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 80073d8:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_tx.Instance = DMA2_Channel4;
 80073da:	4b0c      	ldr	r3, [pc, #48]	; (800740c <SD_DMAConfigTx+0x5c>)
 80073dc:	6023      	str	r3, [r4, #0]

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_tx);
 80073de:	4620      	mov	r0, r4
 80073e0:	f7fc fbae 	bl	8003b40 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_tx);
 80073e4:	4620      	mov	r0, r4
 80073e6:	f7fc fb25 	bl	8003a34 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_tx);
 80073ea:	4620      	mov	r0, r4
 80073ec:	f7fc fab2 	bl	8003954 <HAL_DMA_Init>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073f0:	4b07      	ldr	r3, [pc, #28]	; (8007410 <SD_DMAConfigTx+0x60>)
 80073f2:	2230      	movs	r2, #48	; 0x30
 80073f4:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);

  return (status != HAL_OK? SD_ERROR : SD_OK);
 80073f8:	2800      	cmp	r0, #0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80073fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80073fe:	605a      	str	r2, [r3, #4]
}
 8007400:	bf14      	ite	ne
 8007402:	2029      	movne	r0, #41	; 0x29
 8007404:	2000      	moveq	r0, #0
 8007406:	bd10      	pop	{r4, pc}
 8007408:	20000554 	.word	0x20000554
 800740c:	40020444 	.word	0x40020444
 8007410:	e000e100 	.word	0xe000e100

08007414 <BSP_SD_Init>:
{
 8007414:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef gpioinitstruct = {0};
 8007416:	2214      	movs	r2, #20
{
 8007418:	b08b      	sub	sp, #44	; 0x2c
  uSdHandle.Instance = SDMMC1;
 800741a:	4c38      	ldr	r4, [pc, #224]	; (80074fc <BSP_SD_Init+0xe8>)
 800741c:	4b38      	ldr	r3, [pc, #224]	; (8007500 <BSP_SD_Init+0xec>)
 800741e:	6023      	str	r3, [r4, #0]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007420:	2100      	movs	r1, #0
  uSdHandle.Init.ClockDiv            = 1;    // Checked by Masudul,
 8007422:	2501      	movs	r5, #1
  GPIO_InitTypeDef gpioinitstruct = {0};
 8007424:	eb0d 0002 	add.w	r0, sp, r2
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007428:	6061      	str	r1, [r4, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800742a:	60a1      	str	r1, [r4, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800742c:	60e1      	str	r1, [r4, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800742e:	6121      	str	r1, [r4, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007430:	6161      	str	r1, [r4, #20]
  uSdHandle.Init.ClockDiv            = 1;    // Checked by Masudul,
 8007432:	61a5      	str	r5, [r4, #24]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8007434:	f005 fbc2 	bl	800cbbc <memset>
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8007438:	4b32      	ldr	r3, [pc, #200]	; (8007504 <BSP_SD_Init+0xf0>)
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 800743a:	4833      	ldr	r0, [pc, #204]	; (8007508 <BSP_SD_Init+0xf4>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800743c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800743e:	4e33      	ldr	r6, [pc, #204]	; (800750c <BSP_SD_Init+0xf8>)
 8007440:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007444:	661a      	str	r2, [r3, #96]	; 0x60
 8007446:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007448:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800744c:	9200      	str	r2, [sp, #0]
 800744e:	9a00      	ldr	r2, [sp, #0]
  __DMAx_TxRx_CLK_ENABLE();
 8007450:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007452:	f042 0202 	orr.w	r2, r2, #2
 8007456:	649a      	str	r2, [r3, #72]	; 0x48
 8007458:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800745a:	f002 0202 	and.w	r2, r2, #2
 800745e:	9201      	str	r2, [sp, #4]
 8007460:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007464:	f042 0204 	orr.w	r2, r2, #4
 8007468:	64da      	str	r2, [r3, #76]	; 0x4c
 800746a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800746c:	f002 0204 	and.w	r2, r2, #4
 8007470:	9202      	str	r2, [sp, #8]
 8007472:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007474:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007476:	f042 0208 	orr.w	r2, r2, #8
 800747a:	64da      	str	r2, [r3, #76]	; 0x4c
 800747c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800747e:	f002 0208 	and.w	r2, r2, #8
 8007482:	9203      	str	r2, [sp, #12]
 8007484:	9a03      	ldr	r2, [sp, #12]
  __SD_DETECT_GPIO_CLK_ENABLE();
 8007486:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007488:	432a      	orrs	r2, r5
 800748a:	64da      	str	r2, [r3, #76]	; 0x4c
 800748c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  gpioinitstruct.Pull      = GPIO_PULLUP;
 800748e:	9507      	str	r5, [sp, #28]
  __SD_DETECT_GPIO_CLK_ENABLE();
 8007490:	402b      	ands	r3, r5
 8007492:	9304      	str	r3, [sp, #16]
 8007494:	9b04      	ldr	r3, [sp, #16]
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 8007496:	2302      	movs	r3, #2
 8007498:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800749a:	2303      	movs	r3, #3
 800749c:	9308      	str	r3, [sp, #32]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 800749e:	230c      	movs	r3, #12
 80074a0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80074a2:	a905      	add	r1, sp, #20
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80074a4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80074a8:	9305      	str	r3, [sp, #20]
 80074aa:	f44f 3700 	mov.w	r7, #131072	; 0x20000
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80074ae:	f7fc fbad 	bl	8003c0c <HAL_GPIO_Init>
  gpioinitstruct.Pin = GPIO_PIN_2;
 80074b2:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80074b4:	4816      	ldr	r0, [pc, #88]	; (8007510 <BSP_SD_Init+0xfc>)
  gpioinitstruct.Pin = GPIO_PIN_2;
 80074b6:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80074b8:	a905      	add	r1, sp, #20
 80074ba:	f7fc fba7 	bl	8003c0c <HAL_GPIO_Init>
 80074be:	6077      	str	r7, [r6, #4]
  if((SD_DMAConfigTx(&uSdHandle) == SD_OK) )
 80074c0:	4620      	mov	r0, r4
 80074c2:	f7ff ff75 	bl	80073b0 <SD_DMAConfigTx>
 80074c6:	b900      	cbnz	r0, 80074ca <BSP_SD_Init+0xb6>
 80074c8:	6077      	str	r7, [r6, #4]
  __IO uint8_t status = SD_PRESENT;
 80074ca:	f88d 5014 	strb.w	r5, [sp, #20]
  return status;
 80074ce:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if(BSP_SD_IsDetected() != SD_PRESENT)
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d002      	beq.n	80074dc <BSP_SD_Init+0xc8>
    return MSD_ERROR;
 80074d6:	2001      	movs	r0, #1
}
 80074d8:	b00b      	add	sp, #44	; 0x2c
 80074da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(HAL_SD_Init(&uSdHandle, &uSdCardInfo) != SD_OK)
 80074dc:	490d      	ldr	r1, [pc, #52]	; (8007514 <BSP_SD_Init+0x100>)
 80074de:	4807      	ldr	r0, [pc, #28]	; (80074fc <BSP_SD_Init+0xe8>)
 80074e0:	f7fe f89c 	bl	800561c <HAL_SD_Init>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d1f6      	bne.n	80074d6 <BSP_SD_Init+0xc2>
    if(HAL_SD_WideBusOperation_Config(&uSdHandle, SDMMC_BUS_WIDE_4B) != SD_OK)
 80074e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80074ec:	4803      	ldr	r0, [pc, #12]	; (80074fc <BSP_SD_Init+0xe8>)
 80074ee:	f7fe fa6d 	bl	80059cc <HAL_SD_WideBusOperation_Config>
    return MSD_ERROR;
 80074f2:	3000      	adds	r0, #0
 80074f4:	bf18      	it	ne
 80074f6:	2001      	movne	r0, #1
 80074f8:	e7ee      	b.n	80074d8 <BSP_SD_Init+0xc4>
 80074fa:	bf00      	nop
 80074fc:	20008990 	.word	0x20008990
 8007500:	40012800 	.word	0x40012800
 8007504:	40021000 	.word	0x40021000
 8007508:	48000800 	.word	0x48000800
 800750c:	e000e100 	.word	0xe000e100
 8007510:	48000c00 	.word	0x48000c00
 8007514:	200005a0 	.word	0x200005a0

08007518 <BSP_SD_WriteBlocks_DMA>:
{
 8007518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uSdHandle.hdmarx = NULL;
 800751a:	4c10      	ldr	r4, [pc, #64]	; (800755c <BSP_SD_WriteBlocks_DMA+0x44>)
{
 800751c:	4605      	mov	r5, r0
 800751e:	461f      	mov	r7, r3
  state = ((SD_DMAConfigTx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8007520:	4620      	mov	r0, r4
  uSdHandle.hdmarx = NULL;
 8007522:	2300      	movs	r3, #0
{
 8007524:	4616      	mov	r6, r2
  uSdHandle.hdmarx = NULL;
 8007526:	65a3      	str	r3, [r4, #88]	; 0x58
  state = ((SD_DMAConfigTx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8007528:	f7ff ff42 	bl	80073b0 <SD_DMAConfigTx>
  if(state == MSD_OK)
 800752c:	b998      	cbnz	r0, 8007556 <BSP_SD_WriteBlocks_DMA+0x3e>
    state = ((HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 800752e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007530:	9301      	str	r3, [sp, #4]
 8007532:	9b08      	ldr	r3, [sp, #32]
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	4632      	mov	r2, r6
 8007538:	463b      	mov	r3, r7
 800753a:	4629      	mov	r1, r5
 800753c:	4620      	mov	r0, r4
 800753e:	f7fd fe53 	bl	80051e8 <HAL_SD_WriteBlocks_DMA>
    if(state == MSD_OK)
 8007542:	b940      	cbnz	r0, 8007556 <BSP_SD_WriteBlocks_DMA+0x3e>
      state = ((HAL_SD_CheckWriteOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 8007544:	4906      	ldr	r1, [pc, #24]	; (8007560 <BSP_SD_WriteBlocks_DMA+0x48>)
 8007546:	4620      	mov	r0, r4
 8007548:	f7fe fb41 	bl	8005bce <HAL_SD_CheckWriteOperation>
 800754c:	3000      	adds	r0, #0
 800754e:	bf18      	it	ne
 8007550:	2001      	movne	r0, #1
}
 8007552:	b003      	add	sp, #12
 8007554:	bdf0      	pop	{r4, r5, r6, r7, pc}
    state = ((HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 8007556:	2001      	movs	r0, #1
 8007558:	e7fb      	b.n	8007552 <BSP_SD_WriteBlocks_DMA+0x3a>
 800755a:	bf00      	nop
 800755c:	20008990 	.word	0x20008990
 8007560:	00989680 	.word	0x00989680
 8007564:	00000000 	.word	0x00000000

08007568 <controller_impedance>:
// Greg end

//struct st_impedance controller_impedance(float angle, float knee_velocity,int ac_x, float current)

struct st_impedance controller_impedance(float angle, float knee_velocity,float Heel_pressure, float Toe_pressure,float IMU_acceleration,float hip_joint_angle)
{
 8007568:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    switch (state)
 800756c:	4f3e      	ldr	r7, [pc, #248]	; (8007668 <controller_impedance+0x100>)
 800756e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800767c <controller_impedance+0x114>
 8007572:	783b      	ldrb	r3, [r7, #0]
 8007574:	4c3d      	ldr	r4, [pc, #244]	; (800766c <controller_impedance+0x104>)
{
 8007576:	4606      	mov	r6, r0
 8007578:	ee10 5a10 	vmov	r5, s0
 800757c:	ee10 0a90 	vmov	r0, s1
    switch (state)
 8007580:	b19b      	cbz	r3, 80075aa <controller_impedance+0x42>
 8007582:	2b01      	cmp	r3, #1
 8007584:	d03f      	beq.n	8007606 <controller_impedance+0x9e>
//
//        break;
    // Greg end comment
    }

    my_st_impedance.st = state;
 8007586:	4d3a      	ldr	r5, [pc, #232]	; (8007670 <controller_impedance+0x108>)
 8007588:	783b      	ldrb	r3, [r7, #0]
 800758a:	602b      	str	r3, [r5, #0]
    my_st_impedance.desired_torque = d_torque;
 800758c:	e9d8 0100 	ldrd	r0, r1, [r8]
 8007590:	f7f9 fb06 	bl	8000ba0 <__aeabi_d2f>
    my_st_impedance.CST_CMD_now = CST_CMD_EPOS_contrl;
 8007594:	6823      	ldr	r3, [r4, #0]
    my_st_impedance.desired_torque = d_torque;
 8007596:	6068      	str	r0, [r5, #4]
    my_st_impedance.CST_CMD_now = CST_CMD_EPOS_contrl;
 8007598:	60ab      	str	r3, [r5, #8]
    return my_st_impedance;
 800759a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800759e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
}
 80075a2:	4630      	mov	r0, r6
 80075a4:	b002      	add	sp, #8
 80075a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	d_torque = Impedance(angle, knee_velocity, ST_stiffness, ST_damping, ST_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 80075aa:	f7f8 ffcd 	bl	8000548 <__aeabi_f2d>
 80075ae:	e9cd 0100 	strd	r0, r1, [sp]
 80075b2:	4628      	mov	r0, r5
 80075b4:	f7f8 ffc8 	bl	8000548 <__aeabi_f2d>
 80075b8:	ed9f 4b1d 	vldr	d4, [pc, #116]	; 8007630 <controller_impedance+0xc8>
 80075bc:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 8007638 <controller_impedance+0xd0>
 80075c0:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 8007640 <controller_impedance+0xd8>
        	d_torque = Impedance(angle, knee_velocity, SW_stiffness, SW_damping, SW_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 80075c4:	ed9d 1b00 	vldr	d1, [sp]
 80075c8:	ec41 0b10 	vmov	d0, r0, r1
 80075cc:	f7ff fe45 	bl	800725a <Impedance>
        	CST_CMD_EPOS_contrl=(d_torque/(torque_const_kv100lite*gear_ratio_Chain_knee*peak_current))*1000;
 80075d0:	a31d      	add	r3, pc, #116	; (adr r3, 8007648 <controller_impedance+0xe0>)
 80075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
        	d_torque = Impedance(angle, knee_velocity, SW_stiffness, SW_damping, SW_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 80075d6:	ec51 0b10 	vmov	r0, r1, d0
 80075da:	ed88 0b00 	vstr	d0, [r8]
        	CST_CMD_EPOS_contrl=(d_torque/(torque_const_kv100lite*gear_ratio_Chain_knee*peak_current))*1000;
 80075de:	f7f9 f931 	bl	8000844 <__aeabi_ddiv>
 80075e2:	2200      	movs	r2, #0
 80075e4:	4b23      	ldr	r3, [pc, #140]	; (8007674 <controller_impedance+0x10c>)
 80075e6:	f7f9 f803 	bl	80005f0 <__aeabi_dmul>
 80075ea:	f7f9 fab1 	bl	8000b50 <__aeabi_d2iz>
    		if (CST_CMD_EPOS_contrl>=max_CST_CMD_EPOS)
 80075ee:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
 80075f2:	db16      	blt.n	8007622 <controller_impedance+0xba>
    			CST_CMD_EPOS_contrl=max_CST_CMD_EPOS;
 80075f4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80075f8:	6023      	str	r3, [r4, #0]
    		EPOS4_CST_apply_torque(0x601,CST_CMD_EPOS_contrl); //100 means 10% +ve is extension -ve is flexion
 80075fa:	6821      	ldr	r1, [r4, #0]
 80075fc:	f240 6001 	movw	r0, #1537	; 0x601
 8007600:	f7ff fdfb 	bl	80071fa <EPOS4_CST_apply_torque>
    		break;
 8007604:	e7bf      	b.n	8007586 <controller_impedance+0x1e>
        	d_torque = Impedance(angle, knee_velocity, SW_stiffness, SW_damping, SW_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 8007606:	f7f8 ff9f 	bl	8000548 <__aeabi_f2d>
 800760a:	e9cd 0100 	strd	r0, r1, [sp]
 800760e:	4628      	mov	r0, r5
 8007610:	f7f8 ff9a 	bl	8000548 <__aeabi_f2d>
 8007614:	ed9f 4b0e 	vldr	d4, [pc, #56]	; 8007650 <controller_impedance+0xe8>
 8007618:	ed9f 3b0f 	vldr	d3, [pc, #60]	; 8007658 <controller_impedance+0xf0>
 800761c:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8007660 <controller_impedance+0xf8>
 8007620:	e7d0      	b.n	80075c4 <controller_impedance+0x5c>
        	CST_CMD_EPOS_contrl=(d_torque/(torque_const_kv100lite*gear_ratio_Chain_knee*peak_current))*1000;
 8007622:	4b15      	ldr	r3, [pc, #84]	; (8007678 <controller_impedance+0x110>)
 8007624:	4298      	cmp	r0, r3
 8007626:	bfac      	ite	ge
 8007628:	6020      	strge	r0, [r4, #0]
 800762a:	6023      	strlt	r3, [r4, #0]
 800762c:	e7e5      	b.n	80075fa <controller_impedance+0x92>
 800762e:	bf00      	nop
 8007630:	8f5c28f6 	.word	0x8f5c28f6
 8007634:	c013f5c2 	.word	0xc013f5c2
	...
 8007644:	40040000 	.word	0x40040000
 8007648:	66666666 	.word	0x66666666
 800764c:	403e6666 	.word	0x403e6666
 8007650:	00000000 	.word	0x00000000
 8007654:	c0418000 	.word	0xc0418000
 8007658:	9999999a 	.word	0x9999999a
 800765c:	3fa99999 	.word	0x3fa99999
 8007660:	cccccccd 	.word	0xcccccccd
 8007664:	3fdccccc 	.word	0x3fdccccc
 8007668:	200000a8 	.word	0x200000a8
 800766c:	200005f8 	.word	0x200005f8
 8007670:	200089f0 	.word	0x200089f0
 8007674:	408f4000 	.word	0x408f4000
 8007678:	fffffb50 	.word	0xfffffb50
 800767c:	20000600 	.word	0x20000600

08007680 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8007680:	2000      	movs	r0, #0
 8007682:	4770      	bx	lr

08007684 <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007684:	4b05      	ldr	r3, [pc, #20]	; (800769c <LL_AHB2_GRP1_EnableClock+0x18>)
 8007686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007688:	4302      	orrs	r2, r0
 800768a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800768c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 800768e:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007690:	4018      	ands	r0, r3
 8007692:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8007694:	9b01      	ldr	r3, [sp, #4]
}
 8007696:	b002      	add	sp, #8
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	40021000 	.word	0x40021000

080076a0 <MX_GPIO_Init>:
LL_GPIO_InitTypeDef GPIO_InitStruct;



void MX_GPIO_Init(void)
{
 80076a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80076a4:	2004      	movs	r0, #4
 80076a6:	f7ff ffed 	bl	8007684 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80076aa:	2080      	movs	r0, #128	; 0x80
 80076ac:	f7ff ffea 	bl	8007684 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80076b0:	2001      	movs	r0, #1
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);

  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 80076b2:	4c6a      	ldr	r4, [pc, #424]	; (800785c <MX_GPIO_Init+0x1bc>)
  GPIO_InitStruct.Pin = LED_B_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076b4:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007860 <MX_GPIO_Init+0x1c0>
  GPIO_InitStruct.Pin = ENC2_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 80076b8:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 8007864 <MX_GPIO_Init+0x1c4>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80076bc:	f7ff ffe2 	bl	8007684 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80076c0:	2002      	movs	r0, #2
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80076c2:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
 80076c6:	f7ff ffdd 	bl	8007684 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80076ca:	2008      	movs	r0, #8
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80076cc:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80076ce:	2601      	movs	r6, #1
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80076d0:	f7ff ffd8 	bl	8007684 <LL_AHB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 80076d4:	270c      	movs	r7, #12
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076d6:	4621      	mov	r1, r4
 80076d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 80076dc:	6027      	str	r7, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80076de:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80076e0:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80076e2:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80076e4:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076e6:	f7fe fe15 	bl	8006314 <LL_GPIO_Init>
 80076ea:	f8c9 7028 	str.w	r7, [r9, #40]	; 0x28
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076ee:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = LED_B_PIN;
 80076f0:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076f4:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LED_B_PIN;
 80076f6:	6027      	str	r7, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80076f8:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80076fa:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80076fc:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80076fe:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007700:	f7fe fe08 	bl	8006314 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_CONNECTIVITY;
 8007704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007708:	f8c8 7028 	str.w	r7, [r8, #40]	; 0x28
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 800770c:	4621      	mov	r1, r4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800770e:	e884 0028 	stmia.w	r4, {r3, r5}
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 8007712:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007714:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007716:	2703      	movs	r7, #3
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007718:	6123      	str	r3, [r4, #16]
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 800771a:	f7fe fdfb 	bl	8006314 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = ENC2_CS_PIN;
 800771e:	2240      	movs	r2, #64	; 0x40
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 8007720:	4621      	mov	r1, r4
 8007722:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = ENC2_CS_PIN;
 8007724:	6022      	str	r2, [r4, #0]
 8007726:	9201      	str	r2, [sp, #4]

  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
 8007728:	f04f 0b80 	mov.w	fp, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800772c:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800772e:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007730:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007732:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 8007734:	f7fe fdee 	bl	8006314 <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007738:	2302      	movs	r3, #2
  LL_GPIO_Init(ENC2_DATA_GPIO_PORT, &GPIO_InitStruct);
 800773a:	4621      	mov	r1, r4
 800773c:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800773e:	6123      	str	r3, [r4, #16]
  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
 8007740:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8007744:	6065      	str	r5, [r4, #4]
  LL_GPIO_Init(ENC2_DATA_GPIO_PORT, &GPIO_InitStruct);
 8007746:	f7fe fde5 	bl	8006314 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = ENC2_SCLK_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC2_SCLK_GPIO_PORT, &GPIO_InitStruct);
 800774a:	4621      	mov	r1, r4
 800774c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = ENC2_SCLK_PIN;
 800774e:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007752:	6066      	str	r6, [r4, #4]



  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 8007754:	f44f 7b80 	mov.w	fp, #256	; 0x100
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007758:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800775a:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800775c:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(ENC2_SCLK_GPIO_PORT, &GPIO_InitStruct);
 800775e:	f7fe fdd9 	bl	8006314 <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI1_CS_GPIO_PORT, &GPIO_InitStruct);
 8007762:	4621      	mov	r1, r4
 8007764:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 8007766:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800776a:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800776c:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800776e:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007770:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI1_CS_GPIO_PORT, &GPIO_InitStruct);
 8007772:	f7fe fdcf 	bl	8006314 <LL_GPIO_Init>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007776:	f8c9 b018 	str.w	fp, [r9, #24]
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 800777a:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
 800777c:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 8007780:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
 8007782:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007786:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007788:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800778a:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800778c:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 800778e:	f7fe fdc1 	bl	8006314 <LL_GPIO_Init>
 8007792:	f8c8 b018 	str.w	fp, [r8, #24]
  GPIO_InitStruct.Pin = SPI3_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 8007796:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8007868 <MX_GPIO_Init+0x1c8>
  GPIO_InitStruct.Pin = SPI3_CS_PIN;
 800779a:	6026      	str	r6, [r4, #0]
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 800779c:	4621      	mov	r1, r4
 800779e:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80077a0:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80077a2:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80077a4:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80077a6:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 80077a8:	f7fe fdb4 	bl	8006314 <LL_GPIO_Init>
 80077ac:	f8cb 6018 	str.w	r6, [fp, #24]
  LL_GPIO_SetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN);

  GPIO_InitStruct.Pin = SPI1_IMU2_CS_Pin;
 80077b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI1_IMU2_CS_GPIO_Port, &GPIO_InitStruct);
 80077b4:	4621      	mov	r1, r4
 80077b6:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = SPI1_IMU2_CS_Pin;
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80077bc:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80077be:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80077c0:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80077c2:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI1_IMU2_CS_GPIO_Port, &GPIO_InitStruct);
 80077c4:	f7fe fda6 	bl	8006314 <LL_GPIO_Init>
 80077c8:	9b00      	ldr	r3, [sp, #0]
 80077ca:	f8c9 3018 	str.w	r3, [r9, #24]
  GPIO_InitStruct.Pin = SPI3_IMU5_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 80077ce:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = SPI3_IMU5_CS_Pin;
 80077d0:	2302      	movs	r3, #2
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 80077d2:	4658      	mov	r0, fp
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80077d4:	e884 00c8 	stmia.w	r4, {r3, r6, r7}
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80077d8:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80077da:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 80077dc:	f7fe fd9a 	bl	8006314 <LL_GPIO_Init>
 80077e0:	2302      	movs	r3, #2
 80077e2:	f8cb 3018 	str.w	r3, [fp, #24]

  /**/
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 80077e6:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
 80077e8:	f04f 0b10 	mov.w	fp, #16
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 80077ec:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80077ee:	6123      	str	r3, [r4, #16]
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
 80077f0:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80077f4:	6065      	str	r5, [r4, #4]
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 80077f6:	f7fe fd8d 	bl	8006314 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80077fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077fe:	4621      	mov	r1, r4
 8007800:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8007802:	e884 0028 	stmia.w	r4, {r3, r5}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8007806:	6126      	str	r6, [r4, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007808:	f7fe fd84 	bl	8006314 <LL_GPIO_Init>


  /**/
//
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;   // Portable IMU2 CS Pin
 800780c:	9a01      	ldr	r2, [sp, #4]
 800780e:	6022      	str	r2, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007810:	4621      	mov	r1, r4
 8007812:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;   // Portable IMU2 CS Pin
 8007814:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007816:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007818:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800781a:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800781c:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800781e:	f7fe fd79 	bl	8006314 <LL_GPIO_Init>
 8007822:	9a00      	ldr	r2, [sp, #0]
 8007824:	f8c8 2018 	str.w	r2, [r8, #24]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;   // Portable IMU3 CS Pin
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007828:	4621      	mov	r1, r4
 800782a:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;   // Portable IMU3 CS Pin
 800782c:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007830:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007832:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007834:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007836:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007838:	f7fe fd6c 	bl	8006314 <LL_GPIO_Init>
//  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
//  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
//  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);

  // Measure interrupt speed
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 800783c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007840:	4621      	mov	r1, r4
 8007842:	4640      	mov	r0, r8
 8007844:	f8ca b018 	str.w	fp, [sl, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007848:	e884 00c8 	stmia.w	r4, {r3, r6, r7}
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800784c:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800784e:	6125      	str	r5, [r4, #16]
  // Greg end
}
 8007850:	b003      	add	sp, #12
 8007852:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007856:	f7fe bd5d 	b.w	8006314 <LL_GPIO_Init>
 800785a:	bf00      	nop
 800785c:	200089fc 	.word	0x200089fc
 8007860:	48000400 	.word	0x48000400
 8007864:	48000800 	.word	0x48000800
 8007868:	48001c00 	.word	0x48001c00

0800786c <BLUE_LED_OFF>:
 800786c:	4b02      	ldr	r3, [pc, #8]	; (8007878 <BLUE_LED_OFF+0xc>)
 800786e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007872:	619a      	str	r2, [r3, #24]
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	48000400 	.word	0x48000400

0800787c <ALL_LED_OFF>:
 800787c:	4b05      	ldr	r3, [pc, #20]	; (8007894 <ALL_LED_OFF+0x18>)
 800787e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007882:	619a      	str	r2, [r3, #24]
 8007884:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007888:	2204      	movs	r2, #4
 800788a:	619a      	str	r2, [r3, #24]
 800788c:	2208      	movs	r2, #8
 800788e:	619a      	str	r2, [r3, #24]
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	48000400 	.word	0x48000400

08007898 <GREEN_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8007898:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800789c:	2204      	movs	r2, #4
 800789e:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80078a0:	4a03      	ldr	r2, [pc, #12]	; (80078b0 <GREEN_LED_ONLY+0x18>)
 80078a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80078a6:	6191      	str	r1, [r2, #24]
 80078a8:	2208      	movs	r2, #8
 80078aa:	619a      	str	r2, [r3, #24]
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	48000400 	.word	0x48000400

080078b4 <RED_LED_OFF>:
 80078b4:	4770      	bx	lr

080078b6 <GREEN_LED_OFF>:
 80078b6:	4770      	bx	lr

080078b8 <RED_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80078b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80078bc:	2208      	movs	r2, #8
 80078be:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80078c0:	4a03      	ldr	r2, [pc, #12]	; (80078d0 <RED_LED_ONLY+0x18>)
 80078c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80078c6:	6191      	str	r1, [r2, #24]
 80078c8:	2204      	movs	r2, #4
 80078ca:	619a      	str	r2, [r3, #24]
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	48000400 	.word	0x48000400

080078d4 <BLUE_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80078d4:	4b05      	ldr	r3, [pc, #20]	; (80078ec <BLUE_LED_ONLY+0x18>)
 80078d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80078da:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80078dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80078e0:	2204      	movs	r2, #4
 80078e2:	619a      	str	r2, [r3, #24]
 80078e4:	2208      	movs	r2, #8
 80078e6:	619a      	str	r2, [r3, #24]
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	48000400 	.word	0x48000400

080078f0 <VIOLET_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80078f0:	4b05      	ldr	r3, [pc, #20]	; (8007908 <VIOLET_LED_ONLY+0x18>)
 80078f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80078f6:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80078f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80078fc:	2204      	movs	r2, #4
 80078fe:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007900:	2208      	movs	r2, #8
 8007902:	629a      	str	r2, [r3, #40]	; 0x28
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	48000400 	.word	0x48000400

0800790c <CYAN_LED_ONLY>:
 800790c:	4b05      	ldr	r3, [pc, #20]	; (8007924 <CYAN_LED_ONLY+0x18>)
 800790e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007912:	629a      	str	r2, [r3, #40]	; 0x28
 8007914:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007918:	2204      	movs	r2, #4
 800791a:	629a      	str	r2, [r3, #40]	; 0x28
 800791c:	2208      	movs	r2, #8
 800791e:	629a      	str	r2, [r3, #40]	; 0x28
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	48000400 	.word	0x48000400

08007928 <ALL_LED_ON>:
 8007928:	f7ff bff0 	b.w	800790c <CYAN_LED_ONLY>

0800792c <SD_POWER_ON>:
 800792c:	4770      	bx	lr

0800792e <SD_POWER_OFF>:
void SD_POWER_ON(void)
{

}
void SD_POWER_OFF(void)
{
 800792e:	4770      	bx	lr

08007930 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 8007930:	b513      	push	{r0, r1, r4, lr}
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8007932:	4c13      	ldr	r4, [pc, #76]	; (8007980 <set_int_enable+0x50>)
 8007934:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007938:	b193      	cbz	r3, 8007960 <set_int_enable+0x30>
        if (enable)
 800793a:	b1c0      	cbz	r0, 800796e <set_int_enable+0x3e>
            tmp = BIT_DMP_INT_EN;
 800793c:	2302      	movs	r3, #2
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
 800793e:	f88d 3007 	strb.w	r3, [sp, #7]
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8007942:	6821      	ldr	r1, [r4, #0]
 8007944:	6860      	ldr	r0, [r4, #4]
 8007946:	7c49      	ldrb	r1, [r1, #17]
 8007948:	7800      	ldrb	r0, [r0, #0]
 800794a:	f10d 0307 	add.w	r3, sp, #7
 800794e:	2201      	movs	r2, #1
 8007950:	f001 ff40 	bl	80097d4 <mpu9255_write>
 8007954:	b970      	cbnz	r0, 8007974 <set_int_enable+0x44>
            return -1;
        st.chip_cfg.int_enable = tmp;
 8007956:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800795a:	7463      	strb	r3, [r4, #17]
    }
    return 0;
}
 800795c:	b002      	add	sp, #8
 800795e:	bd10      	pop	{r4, pc}
        if (!st.chip_cfg.sensors)
 8007960:	7aa2      	ldrb	r2, [r4, #10]
 8007962:	b13a      	cbz	r2, 8007974 <set_int_enable+0x44>
        if (enable && st.chip_cfg.int_enable)
 8007964:	b118      	cbz	r0, 800796e <set_int_enable+0x3e>
 8007966:	7c62      	ldrb	r2, [r4, #17]
 8007968:	b93a      	cbnz	r2, 800797a <set_int_enable+0x4a>
            tmp = BIT_DATA_RDY_EN;
 800796a:	2301      	movs	r3, #1
 800796c:	e7e7      	b.n	800793e <set_int_enable+0xe>
            tmp = 0x00;
 800796e:	f88d 0007 	strb.w	r0, [sp, #7]
 8007972:	e7e6      	b.n	8007942 <set_int_enable+0x12>
            return -1;
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	e7f0      	b.n	800795c <set_int_enable+0x2c>
            return 0;
 800797a:	4618      	mov	r0, r3
 800797c:	e7ee      	b.n	800795c <set_int_enable+0x2c>
 800797e:	bf00      	nop
 8007980:	200000ac 	.word	0x200000ac

08007984 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8007984:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8007986:	4c53      	ldr	r4, [pc, #332]	; (8007ad4 <mpu_reset_fifo+0x150>)
 8007988:	7aa3      	ldrb	r3, [r4, #10]
 800798a:	b91b      	cbnz	r3, 8007994 <mpu_reset_fifo+0x10>
        return -1;
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
 8007990:	b003      	add	sp, #12
 8007992:	bd30      	pop	{r4, r5, pc}
    data = 0;
 8007994:	ad02      	add	r5, sp, #8
 8007996:	2300      	movs	r3, #0
 8007998:	f805 3d01 	strb.w	r3, [r5, #-1]!
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800799c:	6821      	ldr	r1, [r4, #0]
 800799e:	6860      	ldr	r0, [r4, #4]
 80079a0:	7c49      	ldrb	r1, [r1, #17]
 80079a2:	7800      	ldrb	r0, [r0, #0]
 80079a4:	462b      	mov	r3, r5
 80079a6:	2201      	movs	r2, #1
 80079a8:	f001 ff14 	bl	80097d4 <mpu9255_write>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	d1ed      	bne.n	800798c <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 80079b0:	6821      	ldr	r1, [r4, #0]
 80079b2:	6860      	ldr	r0, [r4, #4]
 80079b4:	7949      	ldrb	r1, [r1, #5]
 80079b6:	7800      	ldrb	r0, [r0, #0]
 80079b8:	462b      	mov	r3, r5
 80079ba:	2201      	movs	r2, #1
 80079bc:	f001 ff0a 	bl	80097d4 <mpu9255_write>
 80079c0:	2800      	cmp	r0, #0
 80079c2:	d1e3      	bne.n	800798c <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80079c4:	6821      	ldr	r1, [r4, #0]
 80079c6:	6860      	ldr	r0, [r4, #4]
 80079c8:	7909      	ldrb	r1, [r1, #4]
 80079ca:	7800      	ldrb	r0, [r0, #0]
 80079cc:	462b      	mov	r3, r5
 80079ce:	2201      	movs	r2, #1
 80079d0:	f001 ff00 	bl	80097d4 <mpu9255_write>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d1d9      	bne.n	800798c <mpu_reset_fifo+0x8>
    if (st.chip_cfg.dmp_on) {
 80079d8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d040      	beq.n	8007a62 <mpu_reset_fifo+0xde>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 80079e0:	230c      	movs	r3, #12
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80079e2:	6821      	ldr	r1, [r4, #0]
 80079e4:	6860      	ldr	r0, [r4, #4]
        data = BIT_FIFO_RST | BIT_DMP_RST;
 80079e6:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80079ea:	2201      	movs	r2, #1
 80079ec:	462b      	mov	r3, r5
 80079ee:	7909      	ldrb	r1, [r1, #4]
 80079f0:	7800      	ldrb	r0, [r0, #0]
 80079f2:	f001 feef 	bl	80097d4 <mpu9255_write>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d1c8      	bne.n	800798c <mpu_reset_fifo+0x8>
        delay_ms(50);
 80079fa:	2032      	movs	r0, #50	; 0x32
 80079fc:	f001 ff42 	bl	8009884 <mpu9255_delay_ms>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8007a00:	23c0      	movs	r3, #192	; 0xc0
 8007a02:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8007a06:	7aa3      	ldrb	r3, [r4, #10]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8007a08:	6821      	ldr	r1, [r4, #0]
 8007a0a:	6860      	ldr	r0, [r4, #4]
 8007a0c:	7909      	ldrb	r1, [r1, #4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8007a0e:	07da      	lsls	r2, r3, #31
            data |= BIT_AUX_IF_EN;
 8007a10:	bf44      	itt	mi
 8007a12:	23e0      	movmi	r3, #224	; 0xe0
 8007a14:	f88d 3007 	strbmi.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8007a18:	2201      	movs	r2, #1
 8007a1a:	462b      	mov	r3, r5
 8007a1c:	7800      	ldrb	r0, [r0, #0]
 8007a1e:	f001 fed9 	bl	80097d4 <mpu9255_write>
 8007a22:	2800      	cmp	r0, #0
 8007a24:	d1b2      	bne.n	800798c <mpu_reset_fifo+0x8>
        if (st.chip_cfg.int_enable)
 8007a26:	7c63      	ldrb	r3, [r4, #17]
 8007a28:	b103      	cbz	r3, 8007a2c <mpu_reset_fifo+0xa8>
            data = BIT_DMP_INT_EN;
 8007a2a:	2302      	movs	r3, #2
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8007a2c:	6821      	ldr	r1, [r4, #0]
 8007a2e:	6860      	ldr	r0, [r4, #4]
            data = 0;
 8007a30:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8007a34:	2201      	movs	r2, #1
 8007a36:	462b      	mov	r3, r5
 8007a38:	7c49      	ldrb	r1, [r1, #17]
 8007a3a:	7800      	ldrb	r0, [r0, #0]
 8007a3c:	f001 feca 	bl	80097d4 <mpu9255_write>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d1a3      	bne.n	800798c <mpu_reset_fifo+0x8>
        data = 0;
 8007a44:	f88d 0007 	strb.w	r0, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8007a48:	6821      	ldr	r1, [r4, #0]
 8007a4a:	6860      	ldr	r0, [r4, #4]
 8007a4c:	462b      	mov	r3, r5
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8007a4e:	2201      	movs	r2, #1
 8007a50:	7949      	ldrb	r1, [r1, #5]
 8007a52:	7800      	ldrb	r0, [r0, #0]
 8007a54:	f001 febe 	bl	80097d4 <mpu9255_write>
 8007a58:	3000      	adds	r0, #0
 8007a5a:	bf18      	it	ne
 8007a5c:	2001      	movne	r0, #1
 8007a5e:	4240      	negs	r0, r0
 8007a60:	e796      	b.n	8007990 <mpu_reset_fifo+0xc>
        data = BIT_FIFO_RST;
 8007a62:	2304      	movs	r3, #4
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8007a64:	6821      	ldr	r1, [r4, #0]
 8007a66:	6860      	ldr	r0, [r4, #4]
        data = BIT_FIFO_RST;
 8007a68:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	462b      	mov	r3, r5
 8007a70:	7909      	ldrb	r1, [r1, #4]
 8007a72:	7800      	ldrb	r0, [r0, #0]
 8007a74:	f001 feae 	bl	80097d4 <mpu9255_write>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d187      	bne.n	800798c <mpu_reset_fifo+0x8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8007a7c:	7ca3      	ldrb	r3, [r4, #18]
 8007a7e:	b913      	cbnz	r3, 8007a86 <mpu_reset_fifo+0x102>
 8007a80:	7aa3      	ldrb	r3, [r4, #10]
 8007a82:	07db      	lsls	r3, r3, #31
 8007a84:	d424      	bmi.n	8007ad0 <mpu_reset_fifo+0x14c>
            data = BIT_FIFO_EN;
 8007a86:	2340      	movs	r3, #64	; 0x40
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8007a88:	6821      	ldr	r1, [r4, #0]
 8007a8a:	6860      	ldr	r0, [r4, #4]
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8007a8c:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8007a90:	2201      	movs	r2, #1
 8007a92:	462b      	mov	r3, r5
 8007a94:	7909      	ldrb	r1, [r1, #4]
 8007a96:	7800      	ldrb	r0, [r0, #0]
 8007a98:	f001 fe9c 	bl	80097d4 <mpu9255_write>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	f47f af75 	bne.w	800798c <mpu_reset_fifo+0x8>
        delay_ms(50);
 8007aa2:	2032      	movs	r0, #50	; 0x32
 8007aa4:	f001 feee 	bl	8009884 <mpu9255_delay_ms>
        if (st.chip_cfg.int_enable)
 8007aa8:	7c63      	ldrb	r3, [r4, #17]
 8007aaa:	b103      	cbz	r3, 8007aae <mpu_reset_fifo+0x12a>
            data = BIT_DATA_RDY_EN;
 8007aac:	2301      	movs	r3, #1
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8007aae:	6821      	ldr	r1, [r4, #0]
 8007ab0:	6860      	ldr	r0, [r4, #4]
            data = 0;
 8007ab2:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	462b      	mov	r3, r5
 8007aba:	7c49      	ldrb	r1, [r1, #17]
 8007abc:	7800      	ldrb	r0, [r0, #0]
 8007abe:	f001 fe89 	bl	80097d4 <mpu9255_write>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	f47f af62 	bne.w	800798c <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8007ac8:	6821      	ldr	r1, [r4, #0]
 8007aca:	6860      	ldr	r0, [r4, #4]
 8007acc:	4b02      	ldr	r3, [pc, #8]	; (8007ad8 <mpu_reset_fifo+0x154>)
 8007ace:	e7be      	b.n	8007a4e <mpu_reset_fifo+0xca>
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8007ad0:	2360      	movs	r3, #96	; 0x60
 8007ad2:	e7d9      	b.n	8007a88 <mpu_reset_fifo+0x104>
 8007ad4:	200000ac 	.word	0x200000ac
 8007ad8:	200000bc 	.word	0x200000bc

08007adc <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8007adc:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8007ade:	4c1a      	ldr	r4, [pc, #104]	; (8007b48 <mpu_set_gyro_fsr+0x6c>)
 8007ae0:	7aa3      	ldrb	r3, [r4, #10]
 8007ae2:	b913      	cbnz	r3, 8007aea <mpu_set_gyro_fsr+0xe>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
 8007ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae8:	e01d      	b.n	8007b26 <mpu_set_gyro_fsr+0x4a>
    switch (fsr) {
 8007aea:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8007aee:	d024      	beq.n	8007b3a <mpu_set_gyro_fsr+0x5e>
 8007af0:	d81b      	bhi.n	8007b2a <mpu_set_gyro_fsr+0x4e>
 8007af2:	28fa      	cmp	r0, #250	; 0xfa
 8007af4:	d1f6      	bne.n	8007ae4 <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_250DPS << 3;
 8007af6:	2300      	movs	r3, #0
        data = INV_FSR_2000DPS << 3;
 8007af8:	f88d 3007 	strb.w	r3, [sp, #7]
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8007afc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007b00:	7a23      	ldrb	r3, [r4, #8]
 8007b02:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8007b06:	d01c      	beq.n	8007b42 <mpu_set_gyro_fsr+0x66>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8007b08:	6821      	ldr	r1, [r4, #0]
 8007b0a:	6860      	ldr	r0, [r4, #4]
 8007b0c:	7989      	ldrb	r1, [r1, #6]
 8007b0e:	7800      	ldrb	r0, [r0, #0]
 8007b10:	f10d 0307 	add.w	r3, sp, #7
 8007b14:	2201      	movs	r2, #1
 8007b16:	f001 fe5d 	bl	80097d4 <mpu9255_write>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d1e2      	bne.n	8007ae4 <mpu_set_gyro_fsr+0x8>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
 8007b1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007b22:	08db      	lsrs	r3, r3, #3
 8007b24:	7223      	strb	r3, [r4, #8]
    return 0;
}
 8007b26:	b002      	add	sp, #8
 8007b28:	bd10      	pop	{r4, pc}
    switch (fsr) {
 8007b2a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007b2e:	d006      	beq.n	8007b3e <mpu_set_gyro_fsr+0x62>
 8007b30:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8007b34:	d1d6      	bne.n	8007ae4 <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_2000DPS << 3;
 8007b36:	2318      	movs	r3, #24
 8007b38:	e7de      	b.n	8007af8 <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_500DPS << 3;
 8007b3a:	2308      	movs	r3, #8
 8007b3c:	e7dc      	b.n	8007af8 <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_1000DPS << 3;
 8007b3e:	2310      	movs	r3, #16
 8007b40:	e7da      	b.n	8007af8 <mpu_set_gyro_fsr+0x1c>
        return 0;
 8007b42:	2000      	movs	r0, #0
 8007b44:	e7ef      	b.n	8007b26 <mpu_set_gyro_fsr+0x4a>
 8007b46:	bf00      	nop
 8007b48:	200000ac 	.word	0x200000ac

08007b4c <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
 8007b4c:	4b0c      	ldr	r3, [pc, #48]	; (8007b80 <mpu_get_accel_fsr+0x34>)
 8007b4e:	7a5a      	ldrb	r2, [r3, #9]
 8007b50:	2a03      	cmp	r2, #3
 8007b52:	d812      	bhi.n	8007b7a <mpu_get_accel_fsr+0x2e>
 8007b54:	e8df f002 	tbb	[pc, r2]
 8007b58:	0f0d0b02 	.word	0x0f0d0b02
    case INV_FSR_2G:
        fsr[0] = 2;
 8007b5c:	2202      	movs	r2, #2
        break;
    case INV_FSR_8G:
        fsr[0] = 8;
        break;
    case INV_FSR_16G:
        fsr[0] = 16;
 8007b5e:	7002      	strb	r2, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
 8007b60:	7cdb      	ldrb	r3, [r3, #19]
 8007b62:	b113      	cbz	r3, 8007b6a <mpu_get_accel_fsr+0x1e>
        fsr[0] <<= 1;
 8007b64:	7803      	ldrb	r3, [r0, #0]
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	7003      	strb	r3, [r0, #0]
    return 0;
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	4770      	bx	lr
        fsr[0] = 4;
 8007b6e:	2204      	movs	r2, #4
 8007b70:	e7f5      	b.n	8007b5e <mpu_get_accel_fsr+0x12>
        fsr[0] = 8;
 8007b72:	2208      	movs	r2, #8
 8007b74:	e7f3      	b.n	8007b5e <mpu_get_accel_fsr+0x12>
        fsr[0] = 16;
 8007b76:	2210      	movs	r2, #16
 8007b78:	e7f1      	b.n	8007b5e <mpu_get_accel_fsr+0x12>
        return -1;
 8007b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7e:	4770      	bx	lr
 8007b80:	200000ac 	.word	0x200000ac

08007b84 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8007b84:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8007b86:	4c18      	ldr	r4, [pc, #96]	; (8007be8 <mpu_set_accel_fsr+0x64>)
 8007b88:	7aa3      	ldrb	r3, [r4, #10]
 8007b8a:	b913      	cbnz	r3, 8007b92 <mpu_set_accel_fsr+0xe>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
 8007b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b90:	e01c      	b.n	8007bcc <mpu_set_accel_fsr+0x48>
    switch (fsr) {
 8007b92:	2804      	cmp	r0, #4
 8007b94:	d022      	beq.n	8007bdc <mpu_set_accel_fsr+0x58>
 8007b96:	d81b      	bhi.n	8007bd0 <mpu_set_accel_fsr+0x4c>
 8007b98:	2802      	cmp	r0, #2
 8007b9a:	d1f7      	bne.n	8007b8c <mpu_set_accel_fsr+0x8>
        data = INV_FSR_2G << 3;
 8007b9c:	2300      	movs	r3, #0
        data = INV_FSR_16G << 3;
 8007b9e:	f88d 3007 	strb.w	r3, [sp, #7]
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8007ba2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007ba6:	7a63      	ldrb	r3, [r4, #9]
 8007ba8:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8007bac:	d01a      	beq.n	8007be4 <mpu_set_accel_fsr+0x60>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8007bae:	6821      	ldr	r1, [r4, #0]
 8007bb0:	6860      	ldr	r0, [r4, #4]
 8007bb2:	79c9      	ldrb	r1, [r1, #7]
 8007bb4:	7800      	ldrb	r0, [r0, #0]
 8007bb6:	f10d 0307 	add.w	r3, sp, #7
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f001 fe0a 	bl	80097d4 <mpu9255_write>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d1e3      	bne.n	8007b8c <mpu_set_accel_fsr+0x8>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
 8007bc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007bc8:	08db      	lsrs	r3, r3, #3
 8007bca:	7263      	strb	r3, [r4, #9]
    return 0;
}
 8007bcc:	b002      	add	sp, #8
 8007bce:	bd10      	pop	{r4, pc}
    switch (fsr) {
 8007bd0:	2808      	cmp	r0, #8
 8007bd2:	d005      	beq.n	8007be0 <mpu_set_accel_fsr+0x5c>
 8007bd4:	2810      	cmp	r0, #16
 8007bd6:	d1d9      	bne.n	8007b8c <mpu_set_accel_fsr+0x8>
        data = INV_FSR_16G << 3;
 8007bd8:	2318      	movs	r3, #24
 8007bda:	e7e0      	b.n	8007b9e <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_4G << 3;
 8007bdc:	2308      	movs	r3, #8
 8007bde:	e7de      	b.n	8007b9e <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_8G << 3;
 8007be0:	2310      	movs	r3, #16
 8007be2:	e7dc      	b.n	8007b9e <mpu_set_accel_fsr+0x1a>
        return 0;
 8007be4:	2000      	movs	r0, #0
 8007be6:	e7f1      	b.n	8007bcc <mpu_set_accel_fsr+0x48>
 8007be8:	200000ac 	.word	0x200000ac

08007bec <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8007bec:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8007bee:	4c19      	ldr	r4, [pc, #100]	; (8007c54 <mpu_set_lpf+0x68>)
 8007bf0:	7aa3      	ldrb	r3, [r4, #10]
 8007bf2:	b91b      	cbnz	r3, 8007bfc <mpu_set_lpf+0x10>
        return -1;
 8007bf4:	f04f 30ff 	mov.w	r0, #4294967295
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
    st.chip_cfg.lpf = data;
    return 0;
}
 8007bf8:	b002      	add	sp, #8
 8007bfa:	bd10      	pop	{r4, pc}
    if (lpf >= 188)
 8007bfc:	28bb      	cmp	r0, #187	; 0xbb
 8007bfe:	d916      	bls.n	8007c2e <mpu_set_lpf+0x42>
        data = INV_FILTER_188HZ;
 8007c00:	2301      	movs	r3, #1
        data = INV_FILTER_5HZ;
 8007c02:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.lpf == data)
 8007c06:	7ae2      	ldrb	r2, [r4, #11]
 8007c08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d01f      	beq.n	8007c50 <mpu_set_lpf+0x64>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8007c10:	6821      	ldr	r1, [r4, #0]
 8007c12:	6860      	ldr	r0, [r4, #4]
 8007c14:	7889      	ldrb	r1, [r1, #2]
 8007c16:	7800      	ldrb	r0, [r0, #0]
 8007c18:	f10d 0307 	add.w	r3, sp, #7
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f001 fdd9 	bl	80097d4 <mpu9255_write>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d1e6      	bne.n	8007bf4 <mpu_set_lpf+0x8>
    st.chip_cfg.lpf = data;
 8007c26:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007c2a:	72e3      	strb	r3, [r4, #11]
    return 0;
 8007c2c:	e7e4      	b.n	8007bf8 <mpu_set_lpf+0xc>
    else if (lpf >= 98)
 8007c2e:	2861      	cmp	r0, #97	; 0x61
 8007c30:	d901      	bls.n	8007c36 <mpu_set_lpf+0x4a>
        data = INV_FILTER_98HZ;
 8007c32:	2302      	movs	r3, #2
 8007c34:	e7e5      	b.n	8007c02 <mpu_set_lpf+0x16>
    else if (lpf >= 42)
 8007c36:	2829      	cmp	r0, #41	; 0x29
 8007c38:	d901      	bls.n	8007c3e <mpu_set_lpf+0x52>
        data = INV_FILTER_42HZ;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e7e1      	b.n	8007c02 <mpu_set_lpf+0x16>
    else if (lpf >= 20)
 8007c3e:	2813      	cmp	r0, #19
 8007c40:	d901      	bls.n	8007c46 <mpu_set_lpf+0x5a>
        data = INV_FILTER_20HZ;
 8007c42:	2304      	movs	r3, #4
 8007c44:	e7dd      	b.n	8007c02 <mpu_set_lpf+0x16>
    else if (lpf >= 10)
 8007c46:	2809      	cmp	r0, #9
        data = INV_FILTER_10HZ;
 8007c48:	bf8c      	ite	hi
 8007c4a:	2305      	movhi	r3, #5
        data = INV_FILTER_5HZ;
 8007c4c:	2306      	movls	r3, #6
 8007c4e:	e7d8      	b.n	8007c02 <mpu_set_lpf+0x16>
        return 0;
 8007c50:	2000      	movs	r0, #0
 8007c52:	e7d1      	b.n	8007bf8 <mpu_set_lpf+0xc>
 8007c54:	200000ac 	.word	0x200000ac

08007c58 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 8007c58:	b513      	push	{r0, r1, r4, lr}
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8007c5a:	b918      	cbnz	r0, 8007c64 <mpu_set_compass_sample_rate+0xc>
        return -1;
 8007c5c:	f04f 30ff 	mov.w	r0, #4294967295
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
 8007c60:	b002      	add	sp, #8
 8007c62:	bd10      	pop	{r4, pc}
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8007c64:	4c0e      	ldr	r4, [pc, #56]	; (8007ca0 <mpu_set_compass_sample_rate+0x48>)
 8007c66:	89e3      	ldrh	r3, [r4, #14]
 8007c68:	4298      	cmp	r0, r3
 8007c6a:	d8f7      	bhi.n	8007c5c <mpu_set_compass_sample_rate+0x4>
 8007c6c:	2864      	cmp	r0, #100	; 0x64
 8007c6e:	d8f5      	bhi.n	8007c5c <mpu_set_compass_sample_rate+0x4>
    div = st.chip_cfg.sample_rate / rate - 1;
 8007c70:	fbb3 f0f0 	udiv	r0, r3, r0
 8007c74:	ab02      	add	r3, sp, #8
 8007c76:	3801      	subs	r0, #1
 8007c78:	f803 0d01 	strb.w	r0, [r3, #-1]!
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8007c7c:	6821      	ldr	r1, [r4, #0]
 8007c7e:	6860      	ldr	r0, [r4, #4]
 8007c80:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 8007c84:	7800      	ldrb	r0, [r0, #0]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f001 fda4 	bl	80097d4 <mpu9255_write>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d1e5      	bne.n	8007c5c <mpu_set_compass_sample_rate+0x4>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 8007c90:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007c94:	89e3      	ldrh	r3, [r4, #14]
 8007c96:	3201      	adds	r2, #1
 8007c98:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c9c:	8523      	strh	r3, [r4, #40]	; 0x28
    return 0;
 8007c9e:	e7df      	b.n	8007c60 <mpu_set_compass_sample_rate+0x8>
 8007ca0:	200000ac 	.word	0x200000ac

08007ca4 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8007ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
 8007ca6:	4b12      	ldr	r3, [pc, #72]	; (8007cf0 <mpu_configure_fifo+0x4c>)
 8007ca8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8007cac:	461e      	mov	r6, r3
 8007cae:	b9e2      	cbnz	r2, 8007cea <mpu_configure_fifo+0x46>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
 8007cb0:	7a9c      	ldrb	r4, [r3, #10]
 8007cb2:	b19c      	cbz	r4, 8007cdc <mpu_configure_fifo+0x38>
    sensors &= ~INV_XYZ_COMPASS;
 8007cb4:	f000 05fe 	and.w	r5, r0, #254	; 0xfe
            return -1;
        prev = st.chip_cfg.fifo_enable;
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8007cb8:	402c      	ands	r4, r5
        prev = st.chip_cfg.fifo_enable;
 8007cba:	7c1f      	ldrb	r7, [r3, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8007cbc:	741c      	strb	r4, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8007cbe:	1b2c      	subs	r4, r5, r4
 8007cc0:	bf18      	it	ne
 8007cc2:	f04f 34ff 	movne.w	r4, #4294967295
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
 8007cc6:	b90d      	cbnz	r5, 8007ccc <mpu_configure_fifo+0x28>
 8007cc8:	7d18      	ldrb	r0, [r3, #20]
 8007cca:	b150      	cbz	r0, 8007ce2 <mpu_configure_fifo+0x3e>
            set_int_enable(1);
 8007ccc:	2001      	movs	r0, #1
 8007cce:	f7ff fe2f 	bl	8007930 <set_int_enable>
        else
            set_int_enable(0);
        if (sensors) {
 8007cd2:	b145      	cbz	r5, 8007ce6 <mpu_configure_fifo+0x42>
            if (mpu_reset_fifo()) {
 8007cd4:	f7ff fe56 	bl	8007984 <mpu_reset_fifo>
 8007cd8:	b128      	cbz	r0, 8007ce6 <mpu_configure_fifo+0x42>
                st.chip_cfg.fifo_enable = prev;
 8007cda:	7437      	strb	r7, [r6, #16]
            return -1;
 8007cdc:	f04f 34ff 	mov.w	r4, #4294967295
 8007ce0:	e001      	b.n	8007ce6 <mpu_configure_fifo+0x42>
            set_int_enable(0);
 8007ce2:	f7ff fe25 	bl	8007930 <set_int_enable>
            }
        }
    }

    return result;
}
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8007cea:	2400      	movs	r4, #0
 8007cec:	e7fb      	b.n	8007ce6 <mpu_configure_fifo+0x42>
 8007cee:	bf00      	nop
 8007cf0:	200000ac 	.word	0x200000ac

08007cf4 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8007cf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8007cf8:	4d25      	ldr	r5, [pc, #148]	; (8007d90 <mpu_read_fifo_stream+0x9c>)
 8007cfa:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
 8007cfe:	4606      	mov	r6, r0
 8007d00:	4689      	mov	r9, r1
 8007d02:	4617      	mov	r7, r2
 8007d04:	46a8      	mov	r8, r5
    if (!st.chip_cfg.dmp_on)
 8007d06:	b923      	cbnz	r3, 8007d12 <mpu_read_fifo_stream+0x1e>
    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
        return -1;
    fifo_count = (tmp[0] << 8) | tmp[1];
    if (fifo_count < length) {
        more[0] = 0;
        return -1;
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
        return -1;
    more[0] = fifo_count / length - 1;
    return 0;
}
 8007d0c:	b003      	add	sp, #12
 8007d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!st.chip_cfg.sensors)
 8007d12:	7aab      	ldrb	r3, [r5, #10]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d0f7      	beq.n	8007d08 <mpu_read_fifo_stream+0x14>
    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8007d18:	6829      	ldr	r1, [r5, #0]
 8007d1a:	6868      	ldr	r0, [r5, #4]
 8007d1c:	7b09      	ldrb	r1, [r1, #12]
 8007d1e:	7800      	ldrb	r0, [r0, #0]
 8007d20:	ab01      	add	r3, sp, #4
 8007d22:	2202      	movs	r2, #2
 8007d24:	f001 fd82 	bl	800982c <mpu9255_read>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	d1ed      	bne.n	8007d08 <mpu_read_fifo_stream+0x14>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8007d2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007d30:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8007d34:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    if (fifo_count < length) {
 8007d38:	42b4      	cmp	r4, r6
 8007d3a:	d201      	bcs.n	8007d40 <mpu_read_fifo_stream+0x4c>
        more[0] = 0;
 8007d3c:	7038      	strb	r0, [r7, #0]
 8007d3e:	e7e3      	b.n	8007d08 <mpu_read_fifo_stream+0x14>
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8007d40:	6868      	ldr	r0, [r5, #4]
 8007d42:	8843      	ldrh	r3, [r0, #2]
 8007d44:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 8007d48:	d911      	bls.n	8007d6e <mpu_read_fifo_stream+0x7a>
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8007d4a:	6829      	ldr	r1, [r5, #0]
 8007d4c:	7800      	ldrb	r0, [r0, #0]
 8007d4e:	7cc9      	ldrb	r1, [r1, #19]
 8007d50:	ab01      	add	r3, sp, #4
 8007d52:	2201      	movs	r2, #1
 8007d54:	f001 fd6a 	bl	800982c <mpu9255_read>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d1d5      	bne.n	8007d08 <mpu_read_fifo_stream+0x14>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8007d5c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007d60:	06db      	lsls	r3, r3, #27
 8007d62:	d504      	bpl.n	8007d6e <mpu_read_fifo_stream+0x7a>
            mpu_reset_fifo();
 8007d64:	f7ff fe0e 	bl	8007984 <mpu_reset_fifo>
            return -2;
 8007d68:	f06f 0001 	mvn.w	r0, #1
 8007d6c:	e7ce      	b.n	8007d0c <mpu_read_fifo_stream+0x18>
    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8007d6e:	f8d8 1000 	ldr.w	r1, [r8]
 8007d72:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007d76:	7b49      	ldrb	r1, [r1, #13]
 8007d78:	7800      	ldrb	r0, [r0, #0]
 8007d7a:	464b      	mov	r3, r9
 8007d7c:	b2f2      	uxtb	r2, r6
 8007d7e:	f001 fd55 	bl	800982c <mpu9255_read>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d1c0      	bne.n	8007d08 <mpu_read_fifo_stream+0x14>
    more[0] = fifo_count / length - 1;
 8007d86:	fbb4 f4f6 	udiv	r4, r4, r6
 8007d8a:	3c01      	subs	r4, #1
 8007d8c:	703c      	strb	r4, [r7, #0]
    return 0;
 8007d8e:	e7bd      	b.n	8007d0c <mpu_read_fifo_stream+0x18>
 8007d90:	200000ac 	.word	0x200000ac

08007d94 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8007d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 8007d96:	4c36      	ldr	r4, [pc, #216]	; (8007e70 <mpu_set_bypass+0xdc>)
 8007d98:	7ca3      	ldrb	r3, [r4, #18]
 8007d9a:	4283      	cmp	r3, r0
{
 8007d9c:	4605      	mov	r5, r0
    if (st.chip_cfg.bypass_mode == bypass_on)
 8007d9e:	d041      	beq.n	8007e24 <mpu_set_bypass+0x90>
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8007da0:	6821      	ldr	r1, [r4, #0]
 8007da2:	6860      	ldr	r0, [r4, #4]
 8007da4:	7909      	ldrb	r1, [r1, #4]
 8007da6:	7800      	ldrb	r0, [r0, #0]
 8007da8:	f10d 0307 	add.w	r3, sp, #7
 8007dac:	2201      	movs	r2, #1
    if (bypass_on) {
 8007dae:	2d00      	cmp	r5, #0
 8007db0:	d03a      	beq.n	8007e28 <mpu_set_bypass+0x94>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8007db2:	f001 fd3b 	bl	800982c <mpu9255_read>
 8007db6:	b118      	cbz	r0, 8007dc0 <mpu_set_bypass+0x2c>
            return -1;
 8007db8:	f04f 30ff 	mov.w	r0, #4294967295
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
 8007dbc:	b003      	add	sp, #12
 8007dbe:	bd30      	pop	{r4, r5, pc}
        tmp &= ~BIT_AUX_IF_EN;
 8007dc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8007dc4:	6821      	ldr	r1, [r4, #0]
 8007dc6:	6860      	ldr	r0, [r4, #4]
 8007dc8:	7909      	ldrb	r1, [r1, #4]
        tmp &= ~BIT_AUX_IF_EN;
 8007dca:	f023 0320 	bic.w	r3, r3, #32
 8007dce:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f10d 0307 	add.w	r3, sp, #7
 8007dd8:	7800      	ldrb	r0, [r0, #0]
 8007dda:	f001 fcfb 	bl	80097d4 <mpu9255_write>
 8007dde:	2800      	cmp	r0, #0
 8007de0:	d1ea      	bne.n	8007db8 <mpu_set_bypass+0x24>
        delay_ms(3);
 8007de2:	2003      	movs	r0, #3
 8007de4:	f001 fd4e 	bl	8009884 <mpu9255_delay_ms>
        tmp = BIT_BYPASS_EN;
 8007de8:	2302      	movs	r3, #2
 8007dea:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.active_low_int)
 8007dee:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8007df2:	b113      	cbz	r3, 8007dfa <mpu_set_bypass+0x66>
            tmp |= BIT_ACTL;
 8007df4:	2382      	movs	r3, #130	; 0x82
            tmp = 0;
 8007df6:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 8007dfa:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8007dfe:	b12b      	cbz	r3, 8007e0c <mpu_set_bypass+0x78>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8007e00:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007e04:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007e08:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8007e0c:	6821      	ldr	r1, [r4, #0]
 8007e0e:	6860      	ldr	r0, [r4, #4]
 8007e10:	7dc9      	ldrb	r1, [r1, #23]
 8007e12:	7800      	ldrb	r0, [r0, #0]
 8007e14:	f10d 0307 	add.w	r3, sp, #7
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f001 fcdb 	bl	80097d4 <mpu9255_write>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d1ca      	bne.n	8007db8 <mpu_set_bypass+0x24>
    st.chip_cfg.bypass_mode = bypass_on;
 8007e22:	74a5      	strb	r5, [r4, #18]
        return 0;
 8007e24:	2000      	movs	r0, #0
 8007e26:	e7c9      	b.n	8007dbc <mpu_set_bypass+0x28>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8007e28:	f001 fd00 	bl	800982c <mpu9255_read>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d1c3      	bne.n	8007db8 <mpu_set_bypass+0x24>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8007e30:	7aa3      	ldrb	r3, [r4, #10]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8007e32:	6821      	ldr	r1, [r4, #0]
 8007e34:	6860      	ldr	r0, [r4, #4]
 8007e36:	7909      	ldrb	r1, [r1, #4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8007e38:	f013 0f01 	tst.w	r3, #1
 8007e3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
            tmp |= BIT_AUX_IF_EN;
 8007e40:	bf14      	ite	ne
 8007e42:	f043 0320 	orrne.w	r3, r3, #32
            tmp &= ~BIT_AUX_IF_EN;
 8007e46:	f023 0320 	biceq.w	r3, r3, #32
 8007e4a:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f10d 0307 	add.w	r3, sp, #7
 8007e54:	7800      	ldrb	r0, [r0, #0]
 8007e56:	f001 fcbd 	bl	80097d4 <mpu9255_write>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d1ac      	bne.n	8007db8 <mpu_set_bypass+0x24>
        delay_ms(3);
 8007e5e:	2003      	movs	r0, #3
 8007e60:	f001 fd10 	bl	8009884 <mpu9255_delay_ms>
        if (st.chip_cfg.active_low_int)
 8007e64:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d0c4      	beq.n	8007df6 <mpu_set_bypass+0x62>
            tmp = BIT_ACTL;
 8007e6c:	2380      	movs	r3, #128	; 0x80
 8007e6e:	e7c2      	b.n	8007df6 <mpu_set_bypass+0x62>
 8007e70:	200000ac 	.word	0x200000ac

08007e74 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8007e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8007e76:	4c18      	ldr	r4, [pc, #96]	; (8007ed8 <mpu_set_int_latched+0x64>)
 8007e78:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8007e7c:	4283      	cmp	r3, r0
{
 8007e7e:	4605      	mov	r5, r0
    if (st.chip_cfg.latched_int == enable)
 8007e80:	d025      	beq.n	8007ece <mpu_set_int_latched+0x5a>
        return 0;

    if (enable)
 8007e82:	b308      	cbz	r0, 8007ec8 <mpu_set_int_latched+0x54>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8007e84:	2330      	movs	r3, #48	; 0x30
 8007e86:	f88d 3007 	strb.w	r3, [sp, #7]
    else
        tmp = 0;
    if (st.chip_cfg.bypass_mode)
 8007e8a:	7ca3      	ldrb	r3, [r4, #18]
 8007e8c:	b12b      	cbz	r3, 8007e9a <mpu_set_int_latched+0x26>
        tmp |= BIT_BYPASS_EN;
 8007e8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007e92:	f043 0302 	orr.w	r3, r3, #2
 8007e96:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.active_low_int)
 8007e9a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8007e9e:	b12b      	cbz	r3, 8007eac <mpu_set_int_latched+0x38>
        tmp |= BIT_ACTL;
 8007ea0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007ea4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ea8:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8007eac:	6821      	ldr	r1, [r4, #0]
 8007eae:	6860      	ldr	r0, [r4, #4]
 8007eb0:	7dc9      	ldrb	r1, [r1, #23]
 8007eb2:	7800      	ldrb	r0, [r0, #0]
 8007eb4:	f10d 0307 	add.w	r3, sp, #7
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f001 fc8b 	bl	80097d4 <mpu9255_write>
 8007ebe:	b940      	cbnz	r0, 8007ed2 <mpu_set_int_latched+0x5e>
        return -1;
    st.chip_cfg.latched_int = enable;
 8007ec0:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
    return 0;
}
 8007ec4:	b003      	add	sp, #12
 8007ec6:	bd30      	pop	{r4, r5, pc}
        tmp = 0;
 8007ec8:	f88d 0007 	strb.w	r0, [sp, #7]
 8007ecc:	e7dd      	b.n	8007e8a <mpu_set_int_latched+0x16>
        return 0;
 8007ece:	2000      	movs	r0, #0
 8007ed0:	e7f8      	b.n	8007ec4 <mpu_set_int_latched+0x50>
        return -1;
 8007ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed6:	e7f5      	b.n	8007ec4 <mpu_set_int_latched+0x50>
 8007ed8:	200000ac 	.word	0x200000ac

08007edc <mpu_lp_accel_mode>:
    if (rate > 40)
 8007edc:	2828      	cmp	r0, #40	; 0x28
{
 8007ede:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ee0:	4605      	mov	r5, r0
    if (rate > 40)
 8007ee2:	d902      	bls.n	8007eea <mpu_lp_accel_mode+0xe>
        return -1;
 8007ee4:	f04f 35ff 	mov.w	r5, #4294967295
 8007ee8:	e014      	b.n	8007f14 <mpu_lp_accel_mode+0x38>
 8007eea:	4c28      	ldr	r4, [pc, #160]	; (8007f8c <mpu_lp_accel_mode+0xb0>)
    if (!rate) {
 8007eec:	b9a8      	cbnz	r0, 8007f1a <mpu_lp_accel_mode+0x3e>
        mpu_set_int_latched(0);
 8007eee:	f7ff ffc1 	bl	8007e74 <mpu_set_int_latched>
        tmp[1] = BIT_STBY_XYZG;
 8007ef2:	2307      	movs	r3, #7
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8007ef4:	6821      	ldr	r1, [r4, #0]
 8007ef6:	6860      	ldr	r0, [r4, #4]
        tmp[0] = 0;
 8007ef8:	f88d 5004 	strb.w	r5, [sp, #4]
        tmp[1] = BIT_STBY_XYZG;
 8007efc:	f88d 3005 	strb.w	r3, [sp, #5]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8007f00:	2202      	movs	r2, #2
 8007f02:	ab01      	add	r3, sp, #4
 8007f04:	7d49      	ldrb	r1, [r1, #21]
 8007f06:	7800      	ldrb	r0, [r0, #0]
 8007f08:	f001 fc64 	bl	80097d4 <mpu9255_write>
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d1e8      	bne.n	8007ee4 <mpu_lp_accel_mode+0x8>
        st.chip_cfg.lp_accel_mode = 0;
 8007f12:	7520      	strb	r0, [r4, #20]
}
 8007f14:	4628      	mov	r0, r5
 8007f16:	b003      	add	sp, #12
 8007f18:	bd30      	pop	{r4, r5, pc}
    mpu_set_int_latched(1);
 8007f1a:	2001      	movs	r0, #1
 8007f1c:	f7ff ffaa 	bl	8007e74 <mpu_set_int_latched>
    if (rate == 1)
 8007f20:	2d01      	cmp	r5, #1
 8007f22:	d122      	bne.n	8007f6a <mpu_lp_accel_mode+0x8e>
        tmp[0] = INV_LPA_1_25HZ;
 8007f24:	2302      	movs	r3, #2
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8007f26:	6821      	ldr	r1, [r4, #0]
 8007f28:	6860      	ldr	r0, [r4, #4]
        tmp[0] = INV_LPA_40HZ;
 8007f2a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8007f2e:	2201      	movs	r2, #1
 8007f30:	ab01      	add	r3, sp, #4
 8007f32:	7a49      	ldrb	r1, [r1, #9]
 8007f34:	7800      	ldrb	r0, [r0, #0]
 8007f36:	f001 fc4d 	bl	80097d4 <mpu9255_write>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d1d2      	bne.n	8007ee4 <mpu_lp_accel_mode+0x8>
    tmp[0] = BIT_LPA_CYCLE;
 8007f3e:	2320      	movs	r3, #32
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8007f40:	6821      	ldr	r1, [r4, #0]
 8007f42:	6860      	ldr	r0, [r4, #4]
    tmp[0] = BIT_LPA_CYCLE;
 8007f44:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8007f48:	2201      	movs	r2, #1
 8007f4a:	ab01      	add	r3, sp, #4
 8007f4c:	7d49      	ldrb	r1, [r1, #21]
 8007f4e:	7800      	ldrb	r0, [r0, #0]
 8007f50:	f001 fc40 	bl	80097d4 <mpu9255_write>
 8007f54:	4605      	mov	r5, r0
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d1c4      	bne.n	8007ee4 <mpu_lp_accel_mode+0x8>
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8007f5a:	2308      	movs	r3, #8
 8007f5c:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.lp_accel_mode = 1;
 8007f5e:	2301      	movs	r3, #1
    st.chip_cfg.clk_src = 0;
 8007f60:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8007f62:	7523      	strb	r3, [r4, #20]
    mpu_configure_fifo(0);
 8007f64:	f7ff fe9e 	bl	8007ca4 <mpu_configure_fifo>
 8007f68:	e7d4      	b.n	8007f14 <mpu_lp_accel_mode+0x38>
    else if (rate == 2)
 8007f6a:	2d02      	cmp	r5, #2
 8007f6c:	d101      	bne.n	8007f72 <mpu_lp_accel_mode+0x96>
        tmp[0] = INV_LPA_2_5HZ;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e7d9      	b.n	8007f26 <mpu_lp_accel_mode+0x4a>
    else if (rate <= 5)
 8007f72:	2d05      	cmp	r5, #5
 8007f74:	d801      	bhi.n	8007f7a <mpu_lp_accel_mode+0x9e>
        tmp[0] = INV_LPA_5HZ;
 8007f76:	2304      	movs	r3, #4
 8007f78:	e7d5      	b.n	8007f26 <mpu_lp_accel_mode+0x4a>
    else if (rate <= 10)
 8007f7a:	2d0a      	cmp	r5, #10
 8007f7c:	d801      	bhi.n	8007f82 <mpu_lp_accel_mode+0xa6>
        tmp[0] = INV_LPA_10HZ;
 8007f7e:	2305      	movs	r3, #5
 8007f80:	e7d1      	b.n	8007f26 <mpu_lp_accel_mode+0x4a>
    else if (rate <= 20)
 8007f82:	2d14      	cmp	r5, #20
        tmp[0] = INV_LPA_20HZ;
 8007f84:	bf94      	ite	ls
 8007f86:	2306      	movls	r3, #6
        tmp[0] = INV_LPA_40HZ;
 8007f88:	2307      	movhi	r3, #7
 8007f8a:	e7cc      	b.n	8007f26 <mpu_lp_accel_mode+0x4a>
 8007f8c:	200000ac 	.word	0x200000ac

08007f90 <mpu_set_sample_rate>:
{
 8007f90:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!(st.chip_cfg.sensors))
 8007f92:	4b22      	ldr	r3, [pc, #136]	; (800801c <mpu_set_sample_rate+0x8c>)
 8007f94:	7a9a      	ldrb	r2, [r3, #10]
{
 8007f96:	4604      	mov	r4, r0
 8007f98:	461e      	mov	r6, r3
    if (!(st.chip_cfg.sensors))
 8007f9a:	b922      	cbnz	r2, 8007fa6 <mpu_set_sample_rate+0x16>
        return -1;
 8007f9c:	f04f 34ff 	mov.w	r4, #4294967295
}
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	b002      	add	sp, #8
 8007fa4:	bd70      	pop	{r4, r5, r6, pc}
    if (st.chip_cfg.dmp_on)
 8007fa6:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
 8007faa:	2d00      	cmp	r5, #0
 8007fac:	d1f6      	bne.n	8007f9c <mpu_set_sample_rate+0xc>
        if (st.chip_cfg.lp_accel_mode) {
 8007fae:	7d1b      	ldrb	r3, [r3, #20]
 8007fb0:	b14b      	cbz	r3, 8007fc6 <mpu_set_sample_rate+0x36>
            if (rate && (rate <= 40)) {
 8007fb2:	1e43      	subs	r3, r0, #1
 8007fb4:	2b27      	cmp	r3, #39	; 0x27
 8007fb6:	d803      	bhi.n	8007fc0 <mpu_set_sample_rate+0x30>
                mpu_lp_accel_mode(rate);
 8007fb8:	f7ff ff90 	bl	8007edc <mpu_lp_accel_mode>
                return 0;
 8007fbc:	462c      	mov	r4, r5
 8007fbe:	e7ef      	b.n	8007fa0 <mpu_set_sample_rate+0x10>
            mpu_lp_accel_mode(0);
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	f7ff ff8b 	bl	8007edc <mpu_lp_accel_mode>
 8007fc6:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8007fca:	bf28      	it	cs
 8007fcc:	f44f 747a 	movcs.w	r4, #1000	; 0x3e8
        data = 1000 / rate - 1;
 8007fd0:	2c04      	cmp	r4, #4
 8007fd2:	ab02      	add	r3, sp, #8
 8007fd4:	bf38      	it	cc
 8007fd6:	2404      	movcc	r4, #4
 8007fd8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8007fdc:	fb95 f4f4 	sdiv	r4, r5, r4
 8007fe0:	3c01      	subs	r4, #1
 8007fe2:	f803 4d01 	strb.w	r4, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8007fe6:	6831      	ldr	r1, [r6, #0]
 8007fe8:	6870      	ldr	r0, [r6, #4]
 8007fea:	7849      	ldrb	r1, [r1, #1]
 8007fec:	7800      	ldrb	r0, [r0, #0]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f001 fbf0 	bl	80097d4 <mpu9255_write>
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	d1d0      	bne.n	8007f9c <mpu_set_sample_rate+0xc>
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8007ffa:	8d30      	ldrh	r0, [r6, #40]	; 0x28
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8007ffc:	f89d 3007 	ldrb.w	r3, [sp, #7]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8008000:	2864      	cmp	r0, #100	; 0x64
 8008002:	bf28      	it	cs
 8008004:	2064      	movcs	r0, #100	; 0x64
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8008006:	3301      	adds	r3, #1
 8008008:	fb95 f5f3 	sdiv	r5, r5, r3
 800800c:	81f5      	strh	r5, [r6, #14]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 800800e:	f7ff fe23 	bl	8007c58 <mpu_set_compass_sample_rate>
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8008012:	89f0      	ldrh	r0, [r6, #14]
 8008014:	0840      	lsrs	r0, r0, #1
 8008016:	f7ff fde9 	bl	8007bec <mpu_set_lpf>
        return 0;
 800801a:	e7c1      	b.n	8007fa0 <mpu_set_sample_rate+0x10>
 800801c:	200000ac 	.word	0x200000ac

08008020 <mpu_set_sensors>:
    if (sensors & INV_XYZ_GYRO)
 8008020:	f010 0370 	ands.w	r3, r0, #112	; 0x70
{
 8008024:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008026:	4605      	mov	r5, r0
    if (sensors & INV_XYZ_GYRO)
 8008028:	d014      	beq.n	8008054 <mpu_set_sensors+0x34>
        data = INV_CLK_PLL;
 800802a:	2301      	movs	r3, #1
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 800802c:	4c49      	ldr	r4, [pc, #292]	; (8008154 <mpu_set_sensors+0x134>)
        data = BIT_SLEEP;
 800802e:	f88d 3006 	strb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8008032:	6821      	ldr	r1, [r4, #0]
 8008034:	6860      	ldr	r0, [r4, #4]
 8008036:	7d49      	ldrb	r1, [r1, #21]
 8008038:	7800      	ldrb	r0, [r0, #0]
 800803a:	f10d 0306 	add.w	r3, sp, #6
 800803e:	2201      	movs	r2, #1
 8008040:	f001 fbc8 	bl	80097d4 <mpu9255_write>
 8008044:	b150      	cbz	r0, 800805c <mpu_set_sensors+0x3c>
        st.chip_cfg.sensors = 0;
 8008046:	2300      	movs	r3, #0
 8008048:	72a3      	strb	r3, [r4, #10]
        return -1;
 800804a:	f04f 36ff 	mov.w	r6, #4294967295
}
 800804e:	4630      	mov	r0, r6
 8008050:	b002      	add	sp, #8
 8008052:	bd70      	pop	{r4, r5, r6, pc}
    else if (sensors)
 8008054:	2800      	cmp	r0, #0
 8008056:	d1e9      	bne.n	800802c <mpu_set_sensors+0xc>
        data = BIT_SLEEP;
 8008058:	2340      	movs	r3, #64	; 0x40
 800805a:	e7e7      	b.n	800802c <mpu_set_sensors+0xc>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800805c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (!(sensors & INV_X_GYRO))
 8008060:	066e      	lsls	r6, r5, #25
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8008062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008066:	7323      	strb	r3, [r4, #12]
        data |= BIT_STBY_XG;
 8008068:	bf5a      	itte	pl
 800806a:	2304      	movpl	r3, #4
 800806c:	f88d 3006 	strbpl.w	r3, [sp, #6]
    data = 0;
 8008070:	f88d 0006 	strbmi.w	r0, [sp, #6]
    if (!(sensors & INV_Y_GYRO))
 8008074:	06a9      	lsls	r1, r5, #26
        data |= BIT_STBY_YG;
 8008076:	bf58      	it	pl
 8008078:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 800807c:	6821      	ldr	r1, [r4, #0]
 800807e:	6860      	ldr	r0, [r4, #4]
 8008080:	7d89      	ldrb	r1, [r1, #22]
        data |= BIT_STBY_YG;
 8008082:	bf5c      	itt	pl
 8008084:	f043 0302 	orrpl.w	r3, r3, #2
 8008088:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_Z_GYRO))
 800808c:	06ea      	lsls	r2, r5, #27
        data |= BIT_STBY_ZG;
 800808e:	bf5e      	ittt	pl
 8008090:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
 8008094:	f043 0301 	orrpl.w	r3, r3, #1
 8008098:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_XYZ_ACCEL))
 800809c:	072b      	lsls	r3, r5, #28
        data |= BIT_STBY_XYZA;
 800809e:	bf5e      	ittt	pl
 80080a0:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
 80080a4:	f043 0338 	orrpl.w	r3, r3, #56	; 0x38
 80080a8:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80080ac:	2201      	movs	r2, #1
 80080ae:	f10d 0306 	add.w	r3, sp, #6
 80080b2:	7800      	ldrb	r0, [r0, #0]
 80080b4:	f001 fb8e 	bl	80097d4 <mpu9255_write>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d1c4      	bne.n	8008046 <mpu_set_sensors+0x26>
    if (sensors && (sensors != INV_XYZ_ACCEL))
 80080bc:	f015 0ff7 	tst.w	r5, #247	; 0xf7
 80080c0:	d001      	beq.n	80080c6 <mpu_set_sensors+0xa6>
        mpu_set_int_latched(0);
 80080c2:	f7ff fed7 	bl	8007e74 <mpu_set_int_latched>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80080c6:	6821      	ldr	r1, [r4, #0]
 80080c8:	6860      	ldr	r0, [r4, #4]
 80080ca:	7909      	ldrb	r1, [r1, #4]
 80080cc:	7800      	ldrb	r0, [r0, #0]
 80080ce:	f10d 0307 	add.w	r3, sp, #7
 80080d2:	2201      	movs	r2, #1
 80080d4:	f001 fbaa 	bl	800982c <mpu9255_read>
 80080d8:	2800      	cmp	r0, #0
 80080da:	d1b6      	bne.n	800804a <mpu_set_sensors+0x2a>
    if (sensors & INV_XYZ_COMPASS) {
 80080dc:	f015 0f01 	tst.w	r5, #1
 80080e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
        data = AKM_SINGLE_MEASUREMENT;
 80080e4:	bf15      	itete	ne
 80080e6:	2211      	movne	r2, #17
        data = AKM_POWER_DOWN;
 80080e8:	2210      	moveq	r2, #16
        user_ctrl |= BIT_AUX_IF_EN;
 80080ea:	f043 0320 	orrne.w	r3, r3, #32
        user_ctrl &= ~BIT_AUX_IF_EN;
 80080ee:	f023 0320 	biceq.w	r3, r3, #32
        data = AKM_SINGLE_MEASUREMENT;
 80080f2:	bf14      	ite	ne
 80080f4:	f88d 2006 	strbne.w	r2, [sp, #6]
        data = AKM_POWER_DOWN;
 80080f8:	f88d 2006 	strbeq.w	r2, [sp, #6]
    if (st.chip_cfg.dmp_on)
 80080fc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        user_ctrl &= ~BIT_AUX_IF_EN;
 8008100:	f88d 3007 	strb.w	r3, [sp, #7]
 8008104:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (st.chip_cfg.dmp_on)
 8008108:	b30a      	cbz	r2, 800814e <mpu_set_sensors+0x12e>
        user_ctrl |= BIT_DMP_EN;
 800810a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 800810e:	6821      	ldr	r1, [r4, #0]
 8008110:	6860      	ldr	r0, [r4, #4]
        user_ctrl &= ~BIT_DMP_EN;
 8008112:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 8008116:	2201      	movs	r2, #1
 8008118:	f10d 0306 	add.w	r3, sp, #6
 800811c:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 8008120:	7800      	ldrb	r0, [r0, #0]
 8008122:	f001 fb57 	bl	80097d4 <mpu9255_write>
 8008126:	2800      	cmp	r0, #0
 8008128:	d18f      	bne.n	800804a <mpu_set_sensors+0x2a>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 800812a:	6821      	ldr	r1, [r4, #0]
 800812c:	6860      	ldr	r0, [r4, #4]
 800812e:	7909      	ldrb	r1, [r1, #4]
 8008130:	7800      	ldrb	r0, [r0, #0]
 8008132:	f10d 0307 	add.w	r3, sp, #7
 8008136:	2201      	movs	r2, #1
 8008138:	f001 fb4c 	bl	80097d4 <mpu9255_write>
 800813c:	4606      	mov	r6, r0
 800813e:	2800      	cmp	r0, #0
 8008140:	d183      	bne.n	800804a <mpu_set_sensors+0x2a>
    st.chip_cfg.lp_accel_mode = 0;
 8008142:	7520      	strb	r0, [r4, #20]
    delay_ms(50);
 8008144:	2032      	movs	r0, #50	; 0x32
    st.chip_cfg.sensors = sensors;
 8008146:	72a5      	strb	r5, [r4, #10]
    delay_ms(50);
 8008148:	f001 fb9c 	bl	8009884 <mpu9255_delay_ms>
    return 0;
 800814c:	e77f      	b.n	800804e <mpu_set_sensors+0x2e>
        user_ctrl &= ~BIT_DMP_EN;
 800814e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008152:	e7dc      	b.n	800810e <mpu_set_sensors+0xee>
 8008154:	200000ac 	.word	0x200000ac

08008158 <mpu_init>:
{
 8008158:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800815a:	4ca6      	ldr	r4, [pc, #664]	; (80083f4 <mpu_init+0x29c>)
    data[0] = BIT_RESET;
 800815c:	ad04      	add	r5, sp, #16
 800815e:	2380      	movs	r3, #128	; 0x80
 8008160:	f805 3d08 	strb.w	r3, [r5, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8008164:	6821      	ldr	r1, [r4, #0]
 8008166:	6860      	ldr	r0, [r4, #4]
 8008168:	7d49      	ldrb	r1, [r1, #21]
 800816a:	7800      	ldrb	r0, [r0, #0]
 800816c:	462b      	mov	r3, r5
 800816e:	2201      	movs	r2, #1
 8008170:	f001 fb30 	bl	80097d4 <mpu9255_write>
 8008174:	4606      	mov	r6, r0
 8008176:	b120      	cbz	r0, 8008182 <mpu_init+0x2a>
        return -1;
 8008178:	f04f 34ff 	mov.w	r4, #4294967295
}
 800817c:	4620      	mov	r0, r4
 800817e:	b004      	add	sp, #16
 8008180:	bd70      	pop	{r4, r5, r6, pc}
    delay_ms(100);
 8008182:	2064      	movs	r0, #100	; 0x64
 8008184:	f001 fb7e 	bl	8009884 <mpu9255_delay_ms>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8008188:	6821      	ldr	r1, [r4, #0]
 800818a:	6860      	ldr	r0, [r4, #4]
    data[0] = 0x00;
 800818c:	f88d 6008 	strb.w	r6, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8008190:	462b      	mov	r3, r5
 8008192:	2201      	movs	r2, #1
 8008194:	7d49      	ldrb	r1, [r1, #21]
 8008196:	7800      	ldrb	r0, [r0, #0]
 8008198:	f001 fb1c 	bl	80097d4 <mpu9255_write>
 800819c:	2800      	cmp	r0, #0
 800819e:	d1eb      	bne.n	8008178 <mpu_init+0x20>
   st.chip_cfg.accel_half = 0;
 80081a0:	74e0      	strb	r0, [r4, #19]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 80081a2:	2348      	movs	r3, #72	; 0x48
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 80081a4:	6821      	ldr	r1, [r4, #0]
 80081a6:	6860      	ldr	r0, [r4, #4]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 80081a8:	f88d 3008 	strb.w	r3, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 80081ac:	2201      	movs	r2, #1
 80081ae:	462b      	mov	r3, r5
 80081b0:	7a09      	ldrb	r1, [r1, #8]
 80081b2:	7800      	ldrb	r0, [r0, #0]
 80081b4:	f001 fb0e 	bl	80097d4 <mpu9255_write>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d1dd      	bne.n	8008178 <mpu_init+0x20>
    st.chip_cfg.sensors = 0xFF;
 80081bc:	23ff      	movs	r3, #255	; 0xff
    st.chip_cfg.sample_rate = 0xFFFF;
 80081be:	f64f 72ff 	movw	r2, #65535	; 0xffff
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80081c2:	2501      	movs	r5, #1
    st.chip_cfg.latched_int = 0;
 80081c4:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 80081c8:	7560      	strb	r0, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
 80081ca:	7520      	strb	r0, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 80081cc:	f8c4 0016 	str.w	r0, [r4, #22]
 80081d0:	f8c4 001a 	str.w	r0, [r4, #26]
 80081d4:	f8c4 001e 	str.w	r0, [r4, #30]
    st.chip_cfg.dmp_on = 0;
 80081d8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 80081dc:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 80081e0:	84e0      	strh	r0, [r4, #38]	; 0x26
    if (mpu_set_gyro_fsr(2000))
 80081e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    st.chip_cfg.sensors = 0xFF;
 80081e6:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 80081e8:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 80081ea:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
 80081ec:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 80081ee:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 80081f0:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 80081f2:	74a3      	strb	r3, [r4, #18]
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 80081f4:	8522      	strh	r2, [r4, #40]	; 0x28
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80081f6:	7325      	strb	r5, [r4, #12]
    st.chip_cfg.active_low_int = 1;
 80081f8:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    if (mpu_set_gyro_fsr(2000))
 80081fc:	f7ff fc6e 	bl	8007adc <mpu_set_gyro_fsr>
 8008200:	2800      	cmp	r0, #0
 8008202:	d1b9      	bne.n	8008178 <mpu_init+0x20>
    if (mpu_set_accel_fsr(8))
 8008204:	2008      	movs	r0, #8
 8008206:	f7ff fcbd 	bl	8007b84 <mpu_set_accel_fsr>
 800820a:	2800      	cmp	r0, #0
 800820c:	d1b4      	bne.n	8008178 <mpu_init+0x20>
    if (mpu_set_lpf(188))
 800820e:	20bc      	movs	r0, #188	; 0xbc
 8008210:	f7ff fcec 	bl	8007bec <mpu_set_lpf>
 8008214:	2800      	cmp	r0, #0
 8008216:	d1af      	bne.n	8008178 <mpu_init+0x20>
    if (mpu_set_sample_rate(100))
 8008218:	2064      	movs	r0, #100	; 0x64
 800821a:	f7ff feb9 	bl	8007f90 <mpu_set_sample_rate>
 800821e:	2800      	cmp	r0, #0
 8008220:	d1aa      	bne.n	8008178 <mpu_init+0x20>
    if (mpu_configure_fifo(0))
 8008222:	f7ff fd3f 	bl	8007ca4 <mpu_configure_fifo>
 8008226:	2800      	cmp	r0, #0
 8008228:	d1a6      	bne.n	8008178 <mpu_init+0x20>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 800822a:	4628      	mov	r0, r5
 800822c:	f7ff fdb2 	bl	8007d94 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8008230:	250c      	movs	r5, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 8008232:	ab01      	add	r3, sp, #4
 8008234:	2201      	movs	r2, #1
 8008236:	2100      	movs	r1, #0
 8008238:	4628      	mov	r0, r5
 800823a:	f001 faf7 	bl	800982c <mpu9255_read>
        if (!result && (data[0] == AKM_WHOAMI))
 800823e:	b918      	cbnz	r0, 8008248 <mpu_init+0xf0>
 8008240:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008244:	2b48      	cmp	r3, #72	; 0x48
 8008246:	d00c      	beq.n	8008262 <mpu_init+0x10a>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8008248:	3501      	adds	r5, #1
 800824a:	b2ed      	uxtb	r5, r5
 800824c:	2d10      	cmp	r5, #16
 800824e:	d1f0      	bne.n	8008232 <mpu_init+0xda>
    if (mpu_set_compass_sample_rate(10))
 8008250:	200a      	movs	r0, #10
 8008252:	f7ff fd01 	bl	8007c58 <mpu_set_compass_sample_rate>
 8008256:	4604      	mov	r4, r0
 8008258:	2800      	cmp	r0, #0
 800825a:	d18d      	bne.n	8008178 <mpu_init+0x20>
    mpu_set_sensors(0);
 800825c:	f7ff fee0 	bl	8008020 <mpu_set_sensors>
    return 0;
 8008260:	e78c      	b.n	800817c <mpu_init+0x24>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;

    data[0] = AKM_POWER_DOWN;
 8008262:	2610      	movs	r6, #16
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8008264:	ab01      	add	r3, sp, #4
 8008266:	2201      	movs	r2, #1
 8008268:	210a      	movs	r1, #10
 800826a:	4628      	mov	r0, r5
    st.chip_cfg.compass_addr = akm_addr;
 800826c:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
    data[0] = AKM_POWER_DOWN;
 8008270:	f88d 6004 	strb.w	r6, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8008274:	f001 faae 	bl	80097d4 <mpu9255_write>
 8008278:	2800      	cmp	r0, #0
 800827a:	d1e9      	bne.n	8008250 <mpu_init+0xf8>
        return -1;
    delay_ms(1);
 800827c:	2001      	movs	r0, #1
 800827e:	f001 fb01 	bl	8009884 <mpu9255_delay_ms>

    data[0] = AKM_FUSE_ROM_ACCESS;
 8008282:	231f      	movs	r3, #31
 8008284:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8008288:	2201      	movs	r2, #1
 800828a:	ab01      	add	r3, sp, #4
 800828c:	210a      	movs	r1, #10
 800828e:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8008292:	f001 fa9f 	bl	80097d4 <mpu9255_write>
 8008296:	2800      	cmp	r0, #0
 8008298:	d1da      	bne.n	8008250 <mpu_init+0xf8>
        return -1;
    delay_ms(1);
 800829a:	2001      	movs	r0, #1
 800829c:	f001 faf2 	bl	8009884 <mpu9255_delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 80082a0:	ab01      	add	r3, sp, #4
 80082a2:	2203      	movs	r2, #3
 80082a4:	4631      	mov	r1, r6
 80082a6:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 80082aa:	f001 fabf 	bl	800982c <mpu9255_read>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d1ce      	bne.n	8008250 <mpu_init+0xf8>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 80082b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80082b6:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    data[0] = AKM_POWER_DOWN;
 80082ba:	f88d 6004 	strb.w	r6, [sp, #4]
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 80082be:	3380      	adds	r3, #128	; 0x80
 80082c0:	85a3      	strh	r3, [r4, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 80082c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80082c6:	3380      	adds	r3, #128	; 0x80
 80082c8:	85e3      	strh	r3, [r4, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 80082ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80082ce:	3380      	adds	r3, #128	; 0x80
 80082d0:	8623      	strh	r3, [r4, #48]	; 0x30
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80082d2:	2201      	movs	r2, #1
 80082d4:	ab01      	add	r3, sp, #4
 80082d6:	210a      	movs	r1, #10
 80082d8:	f001 fa7c 	bl	80097d4 <mpu9255_write>
 80082dc:	4605      	mov	r5, r0
 80082de:	2800      	cmp	r0, #0
 80082e0:	d1b6      	bne.n	8008250 <mpu_init+0xf8>
        return -1;
    delay_ms(1);
 80082e2:	2001      	movs	r0, #1
 80082e4:	f001 face 	bl	8009884 <mpu9255_delay_ms>

    mpu_set_bypass(0);
 80082e8:	4628      	mov	r0, r5
 80082ea:	f7ff fd53 	bl	8007d94 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
 80082ee:	2340      	movs	r3, #64	; 0x40
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80082f0:	6821      	ldr	r1, [r4, #0]
 80082f2:	6860      	ldr	r0, [r4, #4]
    data[0] = 0x40;
 80082f4:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80082f8:	2201      	movs	r2, #1
 80082fa:	ab01      	add	r3, sp, #4
 80082fc:	7e89      	ldrb	r1, [r1, #26]
 80082fe:	7800      	ldrb	r0, [r0, #0]
 8008300:	f001 fa68 	bl	80097d4 <mpu9255_write>
 8008304:	2800      	cmp	r0, #0
 8008306:	d1a3      	bne.n	8008250 <mpu_init+0xf8>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8008308:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 800830c:	6821      	ldr	r1, [r4, #0]
 800830e:	6860      	ldr	r0, [r4, #4]
 8008310:	7f89      	ldrb	r1, [r1, #30]
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8008312:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008316:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 800831a:	2201      	movs	r2, #1
 800831c:	ab01      	add	r3, sp, #4
 800831e:	7800      	ldrb	r0, [r0, #0]
 8008320:	f001 fa58 	bl	80097d4 <mpu9255_write>
 8008324:	2800      	cmp	r0, #0
 8008326:	d193      	bne.n	8008250 <mpu_init+0xf8>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
 8008328:	2302      	movs	r3, #2
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 800832a:	6821      	ldr	r1, [r4, #0]
 800832c:	6860      	ldr	r0, [r4, #4]
    data[0] = AKM_REG_ST1;
 800832e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8008332:	2201      	movs	r2, #1
 8008334:	ab01      	add	r3, sp, #4
 8008336:	7fc9      	ldrb	r1, [r1, #31]
 8008338:	7800      	ldrb	r0, [r0, #0]
 800833a:	f001 fa4b 	bl	80097d4 <mpu9255_write>
 800833e:	2800      	cmp	r0, #0
 8008340:	d186      	bne.n	8008250 <mpu_init+0xf8>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
 8008342:	2388      	movs	r3, #136	; 0x88
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8008344:	6821      	ldr	r1, [r4, #0]
 8008346:	6860      	ldr	r0, [r4, #4]
    data[0] = BIT_SLAVE_EN | 8;
 8008348:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 800834c:	2201      	movs	r2, #1
 800834e:	ab01      	add	r3, sp, #4
 8008350:	f891 1020 	ldrb.w	r1, [r1, #32]
 8008354:	7800      	ldrb	r0, [r0, #0]
 8008356:	f001 fa3d 	bl	80097d4 <mpu9255_write>
 800835a:	2800      	cmp	r0, #0
 800835c:	f47f af78 	bne.w	8008250 <mpu_init+0xf8>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
 8008360:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8008364:	6821      	ldr	r1, [r4, #0]
 8008366:	6860      	ldr	r0, [r4, #4]
    data[0] = st.chip_cfg.compass_addr;
 8008368:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 800836c:	2201      	movs	r2, #1
 800836e:	ab01      	add	r3, sp, #4
 8008370:	f891 1021 	ldrb.w	r1, [r1, #33]	; 0x21
 8008374:	7800      	ldrb	r0, [r0, #0]
 8008376:	f001 fa2d 	bl	80097d4 <mpu9255_write>
 800837a:	2800      	cmp	r0, #0
 800837c:	f47f af68 	bne.w	8008250 <mpu_init+0xf8>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
 8008380:	230a      	movs	r3, #10
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8008382:	6821      	ldr	r1, [r4, #0]
 8008384:	6860      	ldr	r0, [r4, #4]
    data[0] = AKM_REG_CNTL;
 8008386:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 800838a:	2201      	movs	r2, #1
 800838c:	ab01      	add	r3, sp, #4
 800838e:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8008392:	7800      	ldrb	r0, [r0, #0]
 8008394:	f001 fa1e 	bl	80097d4 <mpu9255_write>
 8008398:	2800      	cmp	r0, #0
 800839a:	f47f af59 	bne.w	8008250 <mpu_init+0xf8>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
 800839e:	2381      	movs	r3, #129	; 0x81
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 80083a0:	6821      	ldr	r1, [r4, #0]
 80083a2:	6860      	ldr	r0, [r4, #4]
    data[0] = BIT_SLAVE_EN | 1;
 80083a4:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 80083a8:	2201      	movs	r2, #1
 80083aa:	ab01      	add	r3, sp, #4
 80083ac:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
 80083b0:	7800      	ldrb	r0, [r0, #0]
 80083b2:	f001 fa0f 	bl	80097d4 <mpu9255_write>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	f47f af4a 	bne.w	8008250 <mpu_init+0xf8>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
 80083bc:	2311      	movs	r3, #17
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 80083be:	6821      	ldr	r1, [r4, #0]
 80083c0:	6860      	ldr	r0, [r4, #4]
    data[0] = AKM_SINGLE_MEASUREMENT;
 80083c2:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 80083c6:	2201      	movs	r2, #1
 80083c8:	ab01      	add	r3, sp, #4
 80083ca:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 80083ce:	7800      	ldrb	r0, [r0, #0]
 80083d0:	f001 fa00 	bl	80097d4 <mpu9255_write>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	f47f af3b 	bne.w	8008250 <mpu_init+0xf8>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
 80083da:	2303      	movs	r3, #3
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 80083dc:	6821      	ldr	r1, [r4, #0]
 80083de:	6860      	ldr	r0, [r4, #4]
    data[0] = 0x03;
 80083e0:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 80083e4:	2201      	movs	r2, #1
 80083e6:	ab01      	add	r3, sp, #4
 80083e8:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 80083ec:	7800      	ldrb	r0, [r0, #0]
 80083ee:	f001 f9f1 	bl	80097d4 <mpu9255_write>
 80083f2:	e72d      	b.n	8008250 <mpu_init+0xf8>
 80083f4:	200000ac 	.word	0x200000ac

080083f8 <mpu_write_mem>:
{
 80083f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083fa:	460d      	mov	r5, r1
    if (!data)
 80083fc:	4616      	mov	r6, r2
 80083fe:	b91a      	cbnz	r2, 8008408 <mpu_write_mem+0x10>
        return -1;
 8008400:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008404:	b003      	add	sp, #12
 8008406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!st.chip_cfg.sensors)
 8008408:	4c12      	ldr	r4, [pc, #72]	; (8008454 <mpu_write_mem+0x5c>)
 800840a:	7aa3      	ldrb	r3, [r4, #10]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0f7      	beq.n	8008400 <mpu_write_mem+0x8>
    if (tmp[1] + length > st.hw->bank_size)
 8008410:	6867      	ldr	r7, [r4, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8008412:	0a03      	lsrs	r3, r0, #8
 8008414:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8008418:	b2c0      	uxtb	r0, r0
    if (tmp[1] + length > st.hw->bank_size)
 800841a:	897b      	ldrh	r3, [r7, #10]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800841c:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 8008420:	4408      	add	r0, r1
 8008422:	4298      	cmp	r0, r3
 8008424:	dcec      	bgt.n	8008400 <mpu_write_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8008426:	6821      	ldr	r1, [r4, #0]
 8008428:	7838      	ldrb	r0, [r7, #0]
 800842a:	7ec9      	ldrb	r1, [r1, #27]
 800842c:	ab01      	add	r3, sp, #4
 800842e:	2202      	movs	r2, #2
 8008430:	f001 f9d0 	bl	80097d4 <mpu9255_write>
 8008434:	2800      	cmp	r0, #0
 8008436:	d1e3      	bne.n	8008400 <mpu_write_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8008438:	6821      	ldr	r1, [r4, #0]
 800843a:	6860      	ldr	r0, [r4, #4]
 800843c:	7e09      	ldrb	r1, [r1, #24]
 800843e:	7800      	ldrb	r0, [r0, #0]
 8008440:	4633      	mov	r3, r6
 8008442:	b2ea      	uxtb	r2, r5
 8008444:	f001 f9c6 	bl	80097d4 <mpu9255_write>
 8008448:	3000      	adds	r0, #0
 800844a:	bf18      	it	ne
 800844c:	2001      	movne	r0, #1
 800844e:	4240      	negs	r0, r0
 8008450:	e7d8      	b.n	8008404 <mpu_write_mem+0xc>
 8008452:	bf00      	nop
 8008454:	200000ac 	.word	0x200000ac

08008458 <mpu_read_mem>:
{
 8008458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800845a:	460d      	mov	r5, r1
    if (!data)
 800845c:	4616      	mov	r6, r2
 800845e:	b91a      	cbnz	r2, 8008468 <mpu_read_mem+0x10>
        return -1;
 8008460:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008464:	b003      	add	sp, #12
 8008466:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!st.chip_cfg.sensors)
 8008468:	4c12      	ldr	r4, [pc, #72]	; (80084b4 <mpu_read_mem+0x5c>)
 800846a:	7aa3      	ldrb	r3, [r4, #10]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d0f7      	beq.n	8008460 <mpu_read_mem+0x8>
    if (tmp[1] + length > st.hw->bank_size)
 8008470:	6867      	ldr	r7, [r4, #4]
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8008472:	0a03      	lsrs	r3, r0, #8
 8008474:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8008478:	b2c0      	uxtb	r0, r0
    if (tmp[1] + length > st.hw->bank_size)
 800847a:	897b      	ldrh	r3, [r7, #10]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800847c:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 8008480:	4408      	add	r0, r1
 8008482:	4298      	cmp	r0, r3
 8008484:	dcec      	bgt.n	8008460 <mpu_read_mem+0x8>
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8008486:	6821      	ldr	r1, [r4, #0]
 8008488:	7838      	ldrb	r0, [r7, #0]
 800848a:	7ec9      	ldrb	r1, [r1, #27]
 800848c:	ab01      	add	r3, sp, #4
 800848e:	2202      	movs	r2, #2
 8008490:	f001 f9a0 	bl	80097d4 <mpu9255_write>
 8008494:	2800      	cmp	r0, #0
 8008496:	d1e3      	bne.n	8008460 <mpu_read_mem+0x8>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8008498:	6821      	ldr	r1, [r4, #0]
 800849a:	6860      	ldr	r0, [r4, #4]
 800849c:	7e09      	ldrb	r1, [r1, #24]
 800849e:	7800      	ldrb	r0, [r0, #0]
 80084a0:	4633      	mov	r3, r6
 80084a2:	b2ea      	uxtb	r2, r5
 80084a4:	f001 f9c2 	bl	800982c <mpu9255_read>
 80084a8:	3000      	adds	r0, #0
 80084aa:	bf18      	it	ne
 80084ac:	2001      	movne	r0, #1
 80084ae:	4240      	negs	r0, r0
 80084b0:	e7d8      	b.n	8008464 <mpu_read_mem+0xc>
 80084b2:	bf00      	nop
 80084b4:	200000ac 	.word	0x200000ac

080084b8 <mpu_load_firmware>:
{
 80084b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (st.chip_cfg.dmp_loaded)
 80084bc:	4d26      	ldr	r5, [pc, #152]	; (8008558 <mpu_load_firmware+0xa0>)
{
 80084be:	b089      	sub	sp, #36	; 0x24
    if (st.chip_cfg.dmp_loaded)
 80084c0:	f895 4025 	ldrb.w	r4, [r5, #37]	; 0x25
{
 80084c4:	9301      	str	r3, [sp, #4]
 80084c6:	4607      	mov	r7, r0
 80084c8:	4689      	mov	r9, r1
 80084ca:	4616      	mov	r6, r2
    if (st.chip_cfg.dmp_loaded)
 80084cc:	b124      	cbz	r4, 80084d8 <mpu_load_firmware+0x20>
        return -1;
 80084ce:	f04f 30ff 	mov.w	r0, #4294967295
}
 80084d2:	b009      	add	sp, #36	; 0x24
 80084d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!firmware)
 80084d8:	2900      	cmp	r1, #0
 80084da:	d0f8      	beq.n	80084ce <mpu_load_firmware+0x16>
    for (ii = 0; ii < length; ii += this_write) {
 80084dc:	42bc      	cmp	r4, r7
 80084de:	d315      	bcc.n	800850c <mpu_load_firmware+0x54>
    tmp[0] = start_addr >> 8;
 80084e0:	0a33      	lsrs	r3, r6, #8
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 80084e2:	6829      	ldr	r1, [r5, #0]
 80084e4:	6868      	ldr	r0, [r5, #4]
    tmp[0] = start_addr >> 8;
 80084e6:	f88d 300c 	strb.w	r3, [sp, #12]
    tmp[1] = start_addr & 0xFF;
 80084ea:	f88d 600d 	strb.w	r6, [sp, #13]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 80084ee:	ab03      	add	r3, sp, #12
 80084f0:	2202      	movs	r2, #2
 80084f2:	7f49      	ldrb	r1, [r1, #29]
 80084f4:	7800      	ldrb	r0, [r0, #0]
 80084f6:	f001 f96d 	bl	80097d4 <mpu9255_write>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	d1e7      	bne.n	80084ce <mpu_load_firmware+0x16>
    st.chip_cfg.dmp_loaded = 1;
 80084fe:	2301      	movs	r3, #1
 8008500:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8008504:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008508:	84eb      	strh	r3, [r5, #38]	; 0x26
    return 0;
 800850a:	e7e2      	b.n	80084d2 <mpu_load_firmware+0x1a>
        this_write = min(LOAD_CHUNK, length - ii);
 800850c:	eba7 0804 	sub.w	r8, r7, r4
 8008510:	f1b8 0f10 	cmp.w	r8, #16
 8008514:	bfa8      	it	ge
 8008516:	f04f 0810 	movge.w	r8, #16
 800851a:	fa1f fa88 	uxth.w	sl, r8
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 800851e:	eb09 0b04 	add.w	fp, r9, r4
 8008522:	465a      	mov	r2, fp
 8008524:	4651      	mov	r1, sl
 8008526:	4620      	mov	r0, r4
 8008528:	f7ff ff66 	bl	80083f8 <mpu_write_mem>
 800852c:	2800      	cmp	r0, #0
 800852e:	d1ce      	bne.n	80084ce <mpu_load_firmware+0x16>
        if (mpu_read_mem(ii, this_write, cur))
 8008530:	aa04      	add	r2, sp, #16
 8008532:	4651      	mov	r1, sl
 8008534:	4620      	mov	r0, r4
 8008536:	f7ff ff8f 	bl	8008458 <mpu_read_mem>
 800853a:	2800      	cmp	r0, #0
 800853c:	d1c7      	bne.n	80084ce <mpu_load_firmware+0x16>
        if (memcmp(firmware+ii, cur, this_write))
 800853e:	4652      	mov	r2, sl
 8008540:	a904      	add	r1, sp, #16
 8008542:	4658      	mov	r0, fp
 8008544:	f004 fb20 	bl	800cb88 <memcmp>
 8008548:	b910      	cbnz	r0, 8008550 <mpu_load_firmware+0x98>
    for (ii = 0; ii < length; ii += this_write) {
 800854a:	4454      	add	r4, sl
 800854c:	b2a4      	uxth	r4, r4
 800854e:	e7c5      	b.n	80084dc <mpu_load_firmware+0x24>
            return -2;
 8008550:	f06f 0001 	mvn.w	r0, #1
 8008554:	e7bd      	b.n	80084d2 <mpu_load_firmware+0x1a>
 8008556:	bf00      	nop
 8008558:	200000ac 	.word	0x200000ac

0800855c <mpu_set_dmp_state>:
{
 800855c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (st.chip_cfg.dmp_on == enable)
 800855e:	4d1c      	ldr	r5, [pc, #112]	; (80085d0 <mpu_set_dmp_state+0x74>)
 8008560:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8008564:	4283      	cmp	r3, r0
{
 8008566:	4604      	mov	r4, r0
    if (st.chip_cfg.dmp_on == enable)
 8008568:	d01d      	beq.n	80085a6 <mpu_set_dmp_state+0x4a>
    if (enable) {
 800856a:	b1f8      	cbz	r0, 80085ac <mpu_set_dmp_state+0x50>
        if (!st.chip_cfg.dmp_loaded)
 800856c:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8008570:	b35b      	cbz	r3, 80085ca <mpu_set_dmp_state+0x6e>
        set_int_enable(0);
 8008572:	2000      	movs	r0, #0
 8008574:	f7ff f9dc 	bl	8007930 <set_int_enable>
        mpu_set_bypass(0);
 8008578:	2000      	movs	r0, #0
 800857a:	f7ff fc0b 	bl	8007d94 <mpu_set_bypass>
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 800857e:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 8008580:	f7ff fd06 	bl	8007f90 <mpu_set_sample_rate>
        tmp = 0;
 8008584:	ab02      	add	r3, sp, #8
 8008586:	2400      	movs	r4, #0
 8008588:	f803 4d01 	strb.w	r4, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800858c:	6868      	ldr	r0, [r5, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	2123      	movs	r1, #35	; 0x23
 8008592:	7800      	ldrb	r0, [r0, #0]
 8008594:	f001 f91e 	bl	80097d4 <mpu9255_write>
        st.chip_cfg.dmp_on = 1;
 8008598:	2001      	movs	r0, #1
 800859a:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        set_int_enable(1);
 800859e:	f7ff f9c7 	bl	8007930 <set_int_enable>
        mpu_reset_fifo();
 80085a2:	f7ff f9ef 	bl	8007984 <mpu_reset_fifo>
        return 0;
 80085a6:	2000      	movs	r0, #0
}
 80085a8:	b003      	add	sp, #12
 80085aa:	bd30      	pop	{r4, r5, pc}
        set_int_enable(0);
 80085ac:	f7ff f9c0 	bl	8007930 <set_int_enable>
        tmp = st.chip_cfg.fifo_enable;
 80085b0:	ab02      	add	r3, sp, #8
 80085b2:	7c2a      	ldrb	r2, [r5, #16]
 80085b4:	f803 2d01 	strb.w	r2, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80085b8:	6868      	ldr	r0, [r5, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	2123      	movs	r1, #35	; 0x23
 80085be:	7800      	ldrb	r0, [r0, #0]
 80085c0:	f001 f908 	bl	80097d4 <mpu9255_write>
        st.chip_cfg.dmp_on = 0;
 80085c4:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 80085c8:	e7eb      	b.n	80085a2 <mpu_set_dmp_state+0x46>
            return -1;
 80085ca:	f04f 30ff 	mov.w	r0, #4294967295
 80085ce:	e7eb      	b.n	80085a8 <mpu_set_dmp_state+0x4c>
 80085d0:	200000ac 	.word	0x200000ac

080085d4 <dmp_enable_gyro_cal.part.0>:
 *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
 80085d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
    if (enable) {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 80085d6:	4a08      	ldr	r2, [pc, #32]	; (80085f8 <dmp_enable_gyro_cal.part.0+0x24>)
 80085d8:	6810      	ldr	r0, [r2, #0]
 80085da:	6851      	ldr	r1, [r2, #4]
 80085dc:	7a12      	ldrb	r2, [r2, #8]
 80085de:	ab01      	add	r3, sp, #4
 80085e0:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80085e2:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 80085e4:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 80085e6:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 80085ea:	aa01      	add	r2, sp, #4
 80085ec:	f7ff ff04 	bl	80083f8 <mpu_write_mem>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
    }
}
 80085f0:	b005      	add	sp, #20
 80085f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80085f6:	bf00      	nop
 80085f8:	0800dd70 	.word	0x0800dd70

080085fc <dmp_load_motion_driver_firmware>:
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 80085fc:	23c8      	movs	r3, #200	; 0xc8
 80085fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008602:	4902      	ldr	r1, [pc, #8]	; (800860c <dmp_load_motion_driver_firmware+0x10>)
 8008604:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8008608:	f7ff bf56 	b.w	80084b8 <mpu_load_firmware>
 800860c:	0800def0 	.word	0x0800def0

08008610 <dmp_set_orientation>:
{
 8008610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8008612:	234c      	movs	r3, #76	; 0x4c
 8008614:	f88d 3008 	strb.w	r3, [sp, #8]
 8008618:	23cd      	movs	r3, #205	; 0xcd
 800861a:	f88d 3009 	strb.w	r3, [sp, #9]
 800861e:	236c      	movs	r3, #108	; 0x6c
 8008620:	f88d 300a 	strb.w	r3, [sp, #10]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8008624:	230c      	movs	r3, #12
 8008626:	f88d 300c 	strb.w	r3, [sp, #12]
 800862a:	23c9      	movs	r3, #201	; 0xc9
 800862c:	f88d 300d 	strb.w	r3, [sp, #13]
 8008630:	232c      	movs	r3, #44	; 0x2c
 8008632:	f88d 300e 	strb.w	r3, [sp, #14]
    gyro_regs[0] = gyro_axes[orient & 3];
 8008636:	f000 0103 	and.w	r1, r0, #3
 800863a:	ab04      	add	r3, sp, #16
 800863c:	4419      	add	r1, r3
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 800863e:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    gyro_regs[0] = gyro_axes[orient & 3];
 8008642:	f811 3c08 	ldrb.w	r3, [r1, #-8]
 8008646:	f88d 3000 	strb.w	r3, [sp]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 800864a:	ab04      	add	r3, sp, #16
 800864c:	441a      	add	r2, r3
{
 800864e:	4604      	mov	r4, r0
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8008650:	f812 3c08 	ldrb.w	r3, [r2, #-8]
 8008654:	f88d 3001 	strb.w	r3, [sp, #1]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8008658:	f3c0 1381 	ubfx	r3, r0, #6, #2
 800865c:	a804      	add	r0, sp, #16
 800865e:	4403      	add	r3, r0
    accel_regs[0] = accel_axes[orient & 3];
 8008660:	f811 1c04 	ldrb.w	r1, [r1, #-4]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8008664:	f813 0c08 	ldrb.w	r0, [r3, #-8]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8008668:	f812 2c04 	ldrb.w	r2, [r2, #-4]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 800866c:	f88d 0002 	strb.w	r0, [sp, #2]
    accel_regs[0] = accel_axes[orient & 3];
 8008670:	f88d 1004 	strb.w	r1, [sp, #4]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8008674:	f88d 2005 	strb.w	r2, [sp, #5]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8008678:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 800867c:	f88d 3006 	strb.w	r3, [sp, #6]
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8008680:	466a      	mov	r2, sp
 8008682:	2103      	movs	r1, #3
 8008684:	f240 4026 	movw	r0, #1062	; 0x426
 8008688:	f7ff feb6 	bl	80083f8 <mpu_write_mem>
 800868c:	b118      	cbz	r0, 8008696 <dmp_set_orientation+0x86>
        return -1;
 800868e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008692:	b004      	add	sp, #16
 8008694:	bd10      	pop	{r4, pc}
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8008696:	aa01      	add	r2, sp, #4
 8008698:	2103      	movs	r1, #3
 800869a:	f240 402a 	movw	r0, #1066	; 0x42a
 800869e:	f7ff feab 	bl	80083f8 <mpu_write_mem>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d1f3      	bne.n	800868e <dmp_set_orientation+0x7e>
    memcpy(gyro_regs, gyro_sign, 3);
 80086a6:	2336      	movs	r3, #54	; 0x36
 80086a8:	f88d 3000 	strb.w	r3, [sp]
 80086ac:	2356      	movs	r3, #86	; 0x56
 80086ae:	f88d 3001 	strb.w	r3, [sp, #1]
 80086b2:	2376      	movs	r3, #118	; 0x76
 80086b4:	f88d 3002 	strb.w	r3, [sp, #2]
    memcpy(accel_regs, accel_sign, 3);
 80086b8:	2326      	movs	r3, #38	; 0x26
 80086ba:	f88d 3004 	strb.w	r3, [sp, #4]
 80086be:	2346      	movs	r3, #70	; 0x46
    if (orient & 4) {
 80086c0:	0761      	lsls	r1, r4, #29
    memcpy(accel_regs, accel_sign, 3);
 80086c2:	f88d 3005 	strb.w	r3, [sp, #5]
 80086c6:	f04f 0366 	mov.w	r3, #102	; 0x66
 80086ca:	f88d 3006 	strb.w	r3, [sp, #6]
        gyro_regs[0] |= 1;
 80086ce:	bf41      	itttt	mi
 80086d0:	2337      	movmi	r3, #55	; 0x37
 80086d2:	f88d 3000 	strbmi.w	r3, [sp]
        accel_regs[0] |= 1;
 80086d6:	2327      	movmi	r3, #39	; 0x27
 80086d8:	f88d 3004 	strbmi.w	r3, [sp, #4]
    if (orient & 0x20) {
 80086dc:	06a2      	lsls	r2, r4, #26
        gyro_regs[1] |= 1;
 80086de:	bf41      	itttt	mi
 80086e0:	2357      	movmi	r3, #87	; 0x57
 80086e2:	f88d 3001 	strbmi.w	r3, [sp, #1]
        accel_regs[1] |= 1;
 80086e6:	2347      	movmi	r3, #71	; 0x47
 80086e8:	f88d 3005 	strbmi.w	r3, [sp, #5]
    if (orient & 0x100) {
 80086ec:	05e3      	lsls	r3, r4, #23
        gyro_regs[2] |= 1;
 80086ee:	bf44      	itt	mi
 80086f0:	2377      	movmi	r3, #119	; 0x77
 80086f2:	f88d 3002 	strbmi.w	r3, [sp, #2]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 80086f6:	466a      	mov	r2, sp
        accel_regs[2] |= 1;
 80086f8:	bf48      	it	mi
 80086fa:	2367      	movmi	r3, #103	; 0x67
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 80086fc:	f04f 0103 	mov.w	r1, #3
 8008700:	f44f 6088 	mov.w	r0, #1088	; 0x440
        accel_regs[2] |= 1;
 8008704:	bf48      	it	mi
 8008706:	f88d 3006 	strbmi.w	r3, [sp, #6]
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 800870a:	f7ff fe75 	bl	80083f8 <mpu_write_mem>
 800870e:	2800      	cmp	r0, #0
 8008710:	d1bd      	bne.n	800868e <dmp_set_orientation+0x7e>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8008712:	aa01      	add	r2, sp, #4
 8008714:	2103      	movs	r1, #3
 8008716:	f240 4031 	movw	r0, #1073	; 0x431
 800871a:	f7ff fe6d 	bl	80083f8 <mpu_write_mem>
 800871e:	2800      	cmp	r0, #0
 8008720:	d1b5      	bne.n	800868e <dmp_set_orientation+0x7e>
    dmp.orient = orient;
 8008722:	4b01      	ldr	r3, [pc, #4]	; (8008728 <dmp_set_orientation+0x118>)
 8008724:	811c      	strh	r4, [r3, #8]
    return 0;
 8008726:	e7b4      	b.n	8008692 <dmp_set_orientation+0x82>
 8008728:	20000608 	.word	0x20000608

0800872c <dmp_set_fifo_rate>:
{
 800872c:	b510      	push	{r4, lr}
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 800872e:	4a15      	ldr	r2, [pc, #84]	; (8008784 <dmp_set_fifo_rate+0x58>)
{
 8008730:	4604      	mov	r4, r0
 8008732:	b086      	sub	sp, #24
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8008734:	6810      	ldr	r0, [r2, #0]
 8008736:	6851      	ldr	r1, [r2, #4]
 8008738:	ab03      	add	r3, sp, #12
 800873a:	c303      	stmia	r3!, {r0, r1}
    if (rate > DMP_SAMPLE_RATE)
 800873c:	2cc8      	cmp	r4, #200	; 0xc8
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 800873e:	6890      	ldr	r0, [r2, #8]
 8008740:	6018      	str	r0, [r3, #0]
    if (rate > DMP_SAMPLE_RATE)
 8008742:	d903      	bls.n	800874c <dmp_set_fifo_rate+0x20>
        return -1;
 8008744:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008748:	b006      	add	sp, #24
 800874a:	bd10      	pop	{r4, pc}
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 800874c:	2300      	movs	r3, #0
 800874e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8008752:	aa01      	add	r2, sp, #4
    div = DMP_SAMPLE_RATE / rate - 1;
 8008754:	23c8      	movs	r3, #200	; 0xc8
    if (mpu_write_mem(D_0_22, 2, tmp))
 8008756:	2102      	movs	r1, #2
    div = DMP_SAMPLE_RATE / rate - 1;
 8008758:	fb93 f3f4 	sdiv	r3, r3, r4
    if (mpu_write_mem(D_0_22, 2, tmp))
 800875c:	f240 2016 	movw	r0, #534	; 0x216
    div = DMP_SAMPLE_RATE / rate - 1;
 8008760:	3b01      	subs	r3, #1
    tmp[1] = (unsigned char)(div & 0xFF);
 8008762:	f88d 3005 	strb.w	r3, [sp, #5]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8008766:	f7ff fe47 	bl	80083f8 <mpu_write_mem>
 800876a:	2800      	cmp	r0, #0
 800876c:	d1ea      	bne.n	8008744 <dmp_set_fifo_rate+0x18>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 800876e:	aa03      	add	r2, sp, #12
 8008770:	210c      	movs	r1, #12
 8008772:	f640 20c1 	movw	r0, #2753	; 0xac1
 8008776:	f7ff fe3f 	bl	80083f8 <mpu_write_mem>
 800877a:	2800      	cmp	r0, #0
 800877c:	d1e2      	bne.n	8008744 <dmp_set_fifo_rate+0x18>
    dmp.fifo_rate = rate;
 800877e:	4b02      	ldr	r3, [pc, #8]	; (8008788 <dmp_set_fifo_rate+0x5c>)
 8008780:	819c      	strh	r4, [r3, #12]
    return 0;
 8008782:	e7e1      	b.n	8008748 <dmp_set_fifo_rate+0x1c>
 8008784:	0800dd79 	.word	0x0800dd79
 8008788:	20000608 	.word	0x20000608

0800878c <dmp_set_tap_thresh>:
{
 800878c:	b510      	push	{r4, lr}
 800878e:	ed2d 8b02 	vpush	{d8}
 8008792:	4604      	mov	r4, r0
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8008794:	0760      	lsls	r0, r4, #29
{
 8008796:	b084      	sub	sp, #16
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8008798:	d102      	bne.n	80087a0 <dmp_set_tap_thresh+0x14>
        return -1;
 800879a:	f04f 30ff 	mov.w	r0, #4294967295
 800879e:	e04b      	b.n	8008838 <dmp_set_tap_thresh+0xac>
    if (!(axis & TAP_XYZ) || thresh > 1600)
 80087a0:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 80087a4:	d8f9      	bhi.n	800879a <dmp_set_tap_thresh+0xe>
    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 80087a6:	ee07 1a90 	vmov	s15, r1
 80087aa:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80088e8 <dmp_set_tap_thresh+0x15c>
 80087ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
    mpu_get_accel_fsr(&accel_fsr);
 80087b2:	f10d 000b 	add.w	r0, sp, #11
    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 80087b6:	ee87 8a87 	vdiv.f32	s16, s15, s14
    mpu_get_accel_fsr(&accel_fsr);
 80087ba:	f7ff f9c7 	bl	8007b4c <mpu_get_accel_fsr>
    switch (accel_fsr) {
 80087be:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80087c2:	2b04      	cmp	r3, #4
 80087c4:	d04d      	beq.n	8008862 <dmp_set_tap_thresh+0xd6>
 80087c6:	d83b      	bhi.n	8008840 <dmp_set_tap_thresh+0xb4>
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d1e6      	bne.n	800879a <dmp_set_tap_thresh+0xe>
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 80087cc:	eddf 7a47 	vldr	s15, [pc, #284]	; 80088ec <dmp_set_tap_thresh+0x160>
 80087d0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80087d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087d8:	edcd 7a01 	vstr	s15, [sp, #4]
 80087dc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 80087e0:	eddf 7a43 	vldr	s15, [pc, #268]	; 80088f0 <dmp_set_tap_thresh+0x164>
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 80087e4:	f88d 200d 	strb.w	r2, [sp, #13]
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 80087e8:	ee28 8a27 	vmul.f32	s16, s16, s15
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 80087ec:	0a11      	lsrs	r1, r2, #8
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 80087ee:	eefc 7ac8 	vcvt.u32.f32	s15, s16
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 80087f2:	f88d 100c 	strb.w	r1, [sp, #12]
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 80087f6:	edcd 7a01 	vstr	s15, [sp, #4]
 80087fa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 80087fe:	f88d 300f 	strb.w	r3, [sp, #15]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8008802:	0a1a      	lsrs	r2, r3, #8
 8008804:	f88d 200e 	strb.w	r2, [sp, #14]
    if (axis & TAP_X) {
 8008808:	07e2      	lsls	r2, r4, #31
 800880a:	d444      	bmi.n	8008896 <dmp_set_tap_thresh+0x10a>
    if (axis & TAP_Y) {
 800880c:	07a3      	lsls	r3, r4, #30
 800880e:	d510      	bpl.n	8008832 <dmp_set_tap_thresh+0xa6>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 8008810:	aa03      	add	r2, sp, #12
 8008812:	2102      	movs	r1, #2
 8008814:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 8008818:	f7ff fdee 	bl	80083f8 <mpu_write_mem>
 800881c:	2800      	cmp	r0, #0
 800881e:	d1bc      	bne.n	800879a <dmp_set_tap_thresh+0xe>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8008820:	f10d 020e 	add.w	r2, sp, #14
 8008824:	2102      	movs	r1, #2
 8008826:	f44f 7094 	mov.w	r0, #296	; 0x128
 800882a:	f7ff fde5 	bl	80083f8 <mpu_write_mem>
 800882e:	2800      	cmp	r0, #0
 8008830:	d1b3      	bne.n	800879a <dmp_set_tap_thresh+0xe>
    if (axis & TAP_Z) {
 8008832:	f014 0004 	ands.w	r0, r4, #4
 8008836:	d141      	bne.n	80088bc <dmp_set_tap_thresh+0x130>
}
 8008838:	b004      	add	sp, #16
 800883a:	ecbd 8b02 	vpop	{d8}
 800883e:	bd10      	pop	{r4, pc}
    switch (accel_fsr) {
 8008840:	2b08      	cmp	r3, #8
 8008842:	d01b      	beq.n	800887c <dmp_set_tap_thresh+0xf0>
 8008844:	2b10      	cmp	r3, #16
 8008846:	d1a8      	bne.n	800879a <dmp_set_tap_thresh+0xe>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8008848:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80088f4 <dmp_set_tap_thresh+0x168>
 800884c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008854:	edcd 7a01 	vstr	s15, [sp, #4]
 8008858:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 800885c:	eddf 7a26 	vldr	s15, [pc, #152]	; 80088f8 <dmp_set_tap_thresh+0x16c>
 8008860:	e7c0      	b.n	80087e4 <dmp_set_tap_thresh+0x58>
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8008862:	eddf 7a26 	vldr	s15, [pc, #152]	; 80088fc <dmp_set_tap_thresh+0x170>
 8008866:	ee68 7a27 	vmul.f32	s15, s16, s15
 800886a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800886e:	edcd 7a01 	vstr	s15, [sp, #4]
 8008872:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8008876:	eddf 7a22 	vldr	s15, [pc, #136]	; 8008900 <dmp_set_tap_thresh+0x174>
 800887a:	e7b3      	b.n	80087e4 <dmp_set_tap_thresh+0x58>
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 800887c:	eddf 7a21 	vldr	s15, [pc, #132]	; 8008904 <dmp_set_tap_thresh+0x178>
 8008880:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008888:	edcd 7a01 	vstr	s15, [sp, #4]
 800888c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8008890:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8008908 <dmp_set_tap_thresh+0x17c>
 8008894:	e7a6      	b.n	80087e4 <dmp_set_tap_thresh+0x58>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8008896:	aa03      	add	r2, sp, #12
 8008898:	2102      	movs	r1, #2
 800889a:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 800889e:	f7ff fdab 	bl	80083f8 <mpu_write_mem>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	f47f af79 	bne.w	800879a <dmp_set_tap_thresh+0xe>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 80088a8:	f10d 020e 	add.w	r2, sp, #14
 80088ac:	2102      	movs	r1, #2
 80088ae:	f44f 7092 	mov.w	r0, #292	; 0x124
 80088b2:	f7ff fda1 	bl	80083f8 <mpu_write_mem>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d0a8      	beq.n	800880c <dmp_set_tap_thresh+0x80>
 80088ba:	e76e      	b.n	800879a <dmp_set_tap_thresh+0xe>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 80088bc:	aa03      	add	r2, sp, #12
 80088be:	2102      	movs	r1, #2
 80088c0:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 80088c4:	f7ff fd98 	bl	80083f8 <mpu_write_mem>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	f47f af66 	bne.w	800879a <dmp_set_tap_thresh+0xe>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 80088ce:	f10d 020e 	add.w	r2, sp, #14
 80088d2:	2102      	movs	r1, #2
 80088d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80088d8:	f7ff fd8e 	bl	80083f8 <mpu_write_mem>
 80088dc:	3000      	adds	r0, #0
 80088de:	bf18      	it	ne
 80088e0:	2001      	movne	r0, #1
 80088e2:	4240      	negs	r0, r0
 80088e4:	e7a8      	b.n	8008838 <dmp_set_tap_thresh+0xac>
 80088e6:	bf00      	nop
 80088e8:	43480000 	.word	0x43480000
 80088ec:	46800000 	.word	0x46800000
 80088f0:	46400000 	.word	0x46400000
 80088f4:	45000000 	.word	0x45000000
 80088f8:	44c00000 	.word	0x44c00000
 80088fc:	46000000 	.word	0x46000000
 8008900:	45c00000 	.word	0x45c00000
 8008904:	45800000 	.word	0x45800000
 8008908:	45400000 	.word	0x45400000

0800890c <dmp_set_tap_axes>:
{
 800890c:	b507      	push	{r0, r1, r2, lr}
    if (axis & TAP_X)
 800890e:	f010 0301 	ands.w	r3, r0, #1
        tmp |= 0x30;
 8008912:	bf18      	it	ne
 8008914:	2330      	movne	r3, #48	; 0x30
 8008916:	f88d 3007 	strb.w	r3, [sp, #7]
    if (axis & TAP_Y)
 800891a:	0782      	lsls	r2, r0, #30
        tmp |= 0x0C;
 800891c:	bf42      	ittt	mi
 800891e:	f89d 3007 	ldrbmi.w	r3, [sp, #7]
 8008922:	f043 030c 	orrmi.w	r3, r3, #12
 8008926:	f88d 3007 	strbmi.w	r3, [sp, #7]
    if (axis & TAP_Z)
 800892a:	0743      	lsls	r3, r0, #29
        tmp |= 0x03;
 800892c:	bf48      	it	mi
 800892e:	f89d 3007 	ldrbmi.w	r3, [sp, #7]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8008932:	f10d 0207 	add.w	r2, sp, #7
        tmp |= 0x03;
 8008936:	bf48      	it	mi
 8008938:	f043 0303 	orrmi.w	r3, r3, #3
    return mpu_write_mem(D_1_72, 1, &tmp);
 800893c:	f04f 0101 	mov.w	r1, #1
 8008940:	f44f 70a4 	mov.w	r0, #328	; 0x148
        tmp |= 0x03;
 8008944:	bf48      	it	mi
 8008946:	f88d 3007 	strbmi.w	r3, [sp, #7]
    return mpu_write_mem(D_1_72, 1, &tmp);
 800894a:	f7ff fd55 	bl	80083f8 <mpu_write_mem>
}
 800894e:	b003      	add	sp, #12
 8008950:	f85d fb04 	ldr.w	pc, [sp], #4

08008954 <dmp_set_tap_count>:
{
 8008954:	b507      	push	{r0, r1, r2, lr}
    if (min_taps < 1)
 8008956:	b170      	cbz	r0, 8008976 <dmp_set_tap_count+0x22>
 8008958:	2804      	cmp	r0, #4
 800895a:	bf28      	it	cs
 800895c:	2004      	movcs	r0, #4
    tmp = min_taps - 1;
 800895e:	aa02      	add	r2, sp, #8
 8008960:	3801      	subs	r0, #1
 8008962:	f802 0d01 	strb.w	r0, [r2, #-1]!
    return mpu_write_mem(D_1_79, 1, &tmp);
 8008966:	2101      	movs	r1, #1
 8008968:	f240 104f 	movw	r0, #335	; 0x14f
 800896c:	f7ff fd44 	bl	80083f8 <mpu_write_mem>
}
 8008970:	b003      	add	sp, #12
 8008972:	f85d fb04 	ldr.w	pc, [sp], #4
        min_taps = 1;
 8008976:	2001      	movs	r0, #1
 8008978:	e7f1      	b.n	800895e <dmp_set_tap_count+0xa>

0800897a <dmp_set_tap_time>:
{
 800897a:	b507      	push	{r0, r1, r2, lr}
    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800897c:	2305      	movs	r3, #5
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 800897e:	aa01      	add	r2, sp, #4
    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8008980:	fbb0 f0f3 	udiv	r0, r0, r3
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8008984:	2102      	movs	r1, #2
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8008986:	0a03      	lsrs	r3, r0, #8
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8008988:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 800898c:	f44f 70ef 	mov.w	r0, #478	; 0x1de
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8008990:	f88d 3004 	strb.w	r3, [sp, #4]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8008994:	f7ff fd30 	bl	80083f8 <mpu_write_mem>
}
 8008998:	b003      	add	sp, #12
 800899a:	f85d fb04 	ldr.w	pc, [sp], #4

0800899e <dmp_set_tap_time_multi>:
{
 800899e:	b507      	push	{r0, r1, r2, lr}
    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 80089a0:	2305      	movs	r3, #5
    return mpu_write_mem(D_1_218, 2, tmp);
 80089a2:	aa01      	add	r2, sp, #4
    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 80089a4:	fbb0 f0f3 	udiv	r0, r0, r3
    return mpu_write_mem(D_1_218, 2, tmp);
 80089a8:	2102      	movs	r1, #2
    tmp[0] = (unsigned char)(dmp_time >> 8);
 80089aa:	0a03      	lsrs	r3, r0, #8
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 80089ac:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(D_1_218, 2, tmp);
 80089b0:	f44f 70ed 	mov.w	r0, #474	; 0x1da
    tmp[0] = (unsigned char)(dmp_time >> 8);
 80089b4:	f88d 3004 	strb.w	r3, [sp, #4]
    return mpu_write_mem(D_1_218, 2, tmp);
 80089b8:	f7ff fd1e 	bl	80083f8 <mpu_write_mem>
}
 80089bc:	b003      	add	sp, #12
 80089be:	f85d fb04 	ldr.w	pc, [sp], #4

080089c2 <dmp_set_shake_reject_thresh>:
{
 80089c2:	b507      	push	{r0, r1, r2, lr}
    long thresh_scaled = sf / 1000 * thresh;
 80089c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80089c8:	fb90 f0f3 	sdiv	r0, r0, r3
 80089cc:	4341      	muls	r1, r0
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 80089ce:	160b      	asrs	r3, r1, #24
 80089d0:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 80089d4:	140b      	asrs	r3, r1, #16
 80089d6:	f88d 3005 	strb.w	r3, [sp, #5]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 80089da:	f88d 1007 	strb.w	r1, [sp, #7]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 80089de:	120b      	asrs	r3, r1, #8
    return mpu_write_mem(D_1_92, 4, tmp);
 80089e0:	aa01      	add	r2, sp, #4
 80089e2:	2104      	movs	r1, #4
 80089e4:	f44f 70ae 	mov.w	r0, #348	; 0x15c
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 80089e8:	f88d 3006 	strb.w	r3, [sp, #6]
    return mpu_write_mem(D_1_92, 4, tmp);
 80089ec:	f7ff fd04 	bl	80083f8 <mpu_write_mem>
}
 80089f0:	b003      	add	sp, #12
 80089f2:	f85d fb04 	ldr.w	pc, [sp], #4

080089f6 <dmp_set_shake_reject_time>:
{
 80089f6:	b507      	push	{r0, r1, r2, lr}
    time /= (1000 / DMP_SAMPLE_RATE);
 80089f8:	2305      	movs	r3, #5
    return mpu_write_mem(D_1_90,2,tmp);
 80089fa:	aa01      	add	r2, sp, #4
    time /= (1000 / DMP_SAMPLE_RATE);
 80089fc:	fbb0 f0f3 	udiv	r0, r0, r3
    return mpu_write_mem(D_1_90,2,tmp);
 8008a00:	2102      	movs	r1, #2
    tmp[0] = time >> 8;
 8008a02:	0a03      	lsrs	r3, r0, #8
    tmp[1] = time & 0xFF;
 8008a04:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(D_1_90,2,tmp);
 8008a08:	f44f 70ad 	mov.w	r0, #346	; 0x15a
    tmp[0] = time >> 8;
 8008a0c:	f88d 3004 	strb.w	r3, [sp, #4]
    return mpu_write_mem(D_1_90,2,tmp);
 8008a10:	f7ff fcf2 	bl	80083f8 <mpu_write_mem>
}
 8008a14:	b003      	add	sp, #12
 8008a16:	f85d fb04 	ldr.w	pc, [sp], #4

08008a1a <dmp_set_shake_reject_timeout>:
{
 8008a1a:	b507      	push	{r0, r1, r2, lr}
    time /= (1000 / DMP_SAMPLE_RATE);
 8008a1c:	2305      	movs	r3, #5
    return mpu_write_mem(D_1_88,2,tmp);
 8008a1e:	aa01      	add	r2, sp, #4
    time /= (1000 / DMP_SAMPLE_RATE);
 8008a20:	fbb0 f0f3 	udiv	r0, r0, r3
    return mpu_write_mem(D_1_88,2,tmp);
 8008a24:	2102      	movs	r1, #2
    tmp[0] = time >> 8;
 8008a26:	0a03      	lsrs	r3, r0, #8
    tmp[1] = time & 0xFF;
 8008a28:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(D_1_88,2,tmp);
 8008a2c:	f44f 70ac 	mov.w	r0, #344	; 0x158
    tmp[0] = time >> 8;
 8008a30:	f88d 3004 	strb.w	r3, [sp, #4]
    return mpu_write_mem(D_1_88,2,tmp);
 8008a34:	f7ff fce0 	bl	80083f8 <mpu_write_mem>
}
 8008a38:	b003      	add	sp, #12
 8008a3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008a40 <dmp_enable_gyro_cal>:
{
 8008a40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (enable) {
 8008a42:	b120      	cbz	r0, 8008a4e <dmp_enable_gyro_cal+0xe>
 8008a44:	f7ff fdc6 	bl	80085d4 <dmp_enable_gyro_cal.part.0>
}
 8008a48:	b005      	add	sp, #20
 8008a4a:	f85d fb04 	ldr.w	pc, [sp], #4
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8008a4e:	4a07      	ldr	r2, [pc, #28]	; (8008a6c <dmp_enable_gyro_cal+0x2c>)
 8008a50:	6810      	ldr	r0, [r2, #0]
 8008a52:	6851      	ldr	r1, [r2, #4]
 8008a54:	7a12      	ldrb	r2, [r2, #8]
 8008a56:	ab01      	add	r3, sp, #4
 8008a58:	c303      	stmia	r3!, {r0, r1}
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8008a5a:	2109      	movs	r1, #9
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8008a5c:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8008a5e:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8008a62:	aa01      	add	r2, sp, #4
 8008a64:	f7ff fcc8 	bl	80083f8 <mpu_write_mem>
 8008a68:	e7ee      	b.n	8008a48 <dmp_enable_gyro_cal+0x8>
 8008a6a:	bf00      	nop
 8008a6c:	0800dd85 	.word	0x0800dd85

08008a70 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8008a70:	b507      	push	{r0, r1, r2, lr}
    unsigned char regs[4];
    if (enable) {
 8008a72:	b1b0      	cbz	r0, 8008aa2 <dmp_enable_lp_quat+0x32>
        regs[0] = DINBC0;
 8008a74:	23c0      	movs	r3, #192	; 0xc0
 8008a76:	f88d 3004 	strb.w	r3, [sp, #4]
        regs[1] = DINBC2;
 8008a7a:	23c2      	movs	r3, #194	; 0xc2
 8008a7c:	f88d 3005 	strb.w	r3, [sp, #5]
        regs[2] = DINBC4;
 8008a80:	23c4      	movs	r3, #196	; 0xc4
 8008a82:	f88d 3006 	strb.w	r3, [sp, #6]
        regs[3] = DINBC6;
 8008a86:	23c6      	movs	r3, #198	; 0xc6
 8008a88:	f88d 3007 	strb.w	r3, [sp, #7]
    }
    else
        memset(regs, 0x8B, 4);

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8008a8c:	aa01      	add	r2, sp, #4
 8008a8e:	2104      	movs	r1, #4
 8008a90:	f640 2098 	movw	r0, #2712	; 0xa98
 8008a94:	f7ff fcb0 	bl	80083f8 <mpu_write_mem>

    return mpu_reset_fifo();
 8008a98:	f7fe ff74 	bl	8007984 <mpu_reset_fifo>
}
 8008a9c:	b003      	add	sp, #12
 8008a9e:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0x8B, 4);
 8008aa2:	f04f 338b 	mov.w	r3, #2341178251	; 0x8b8b8b8b
 8008aa6:	9301      	str	r3, [sp, #4]
 8008aa8:	e7f0      	b.n	8008a8c <dmp_enable_lp_quat+0x1c>

08008aaa <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8008aaa:	b507      	push	{r0, r1, r2, lr}
    unsigned char regs[4];
    if (enable) {
 8008aac:	b1b0      	cbz	r0, 8008adc <dmp_enable_6x_lp_quat+0x32>
        regs[0] = DINA20;
 8008aae:	2320      	movs	r3, #32
 8008ab0:	f88d 3004 	strb.w	r3, [sp, #4]
        regs[1] = DINA28;
 8008ab4:	2328      	movs	r3, #40	; 0x28
 8008ab6:	f88d 3005 	strb.w	r3, [sp, #5]
        regs[2] = DINA30;
 8008aba:	2330      	movs	r3, #48	; 0x30
 8008abc:	f88d 3006 	strb.w	r3, [sp, #6]
        regs[3] = DINA38;
 8008ac0:	2338      	movs	r3, #56	; 0x38
 8008ac2:	f88d 3007 	strb.w	r3, [sp, #7]
    } else
        memset(regs, 0xA3, 4);

    mpu_write_mem(CFG_8, 4, regs);
 8008ac6:	aa01      	add	r2, sp, #4
 8008ac8:	2104      	movs	r1, #4
 8008aca:	f640 209e 	movw	r0, #2718	; 0xa9e
 8008ace:	f7ff fc93 	bl	80083f8 <mpu_write_mem>

    return mpu_reset_fifo();
 8008ad2:	f7fe ff57 	bl	8007984 <mpu_reset_fifo>
}
 8008ad6:	b003      	add	sp, #12
 8008ad8:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0xA3, 4);
 8008adc:	f04f 33a3 	mov.w	r3, #2745410467	; 0xa3a3a3a3
 8008ae0:	9301      	str	r3, [sp, #4]
 8008ae2:	e7f0      	b.n	8008ac6 <dmp_enable_6x_lp_quat+0x1c>

08008ae4 <dmp_enable_feature>:
{
 8008ae4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8008ae8:	2302      	movs	r3, #2
 8008aea:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 8008aee:	23ca      	movs	r3, #202	; 0xca
 8008af0:	f88d 3005 	strb.w	r3, [sp, #5]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8008af4:	23e3      	movs	r3, #227	; 0xe3
{
 8008af6:	4604      	mov	r4, r0
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8008af8:	f88d 3006 	strb.w	r3, [sp, #6]
    mpu_write_mem(D_0_104, 4, tmp);
 8008afc:	aa01      	add	r2, sp, #4
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 8008afe:	2309      	movs	r3, #9
    mpu_write_mem(D_0_104, 4, tmp);
 8008b00:	2104      	movs	r1, #4
 8008b02:	2068      	movs	r0, #104	; 0x68
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 8008b04:	f88d 3007 	strb.w	r3, [sp, #7]
    mpu_write_mem(D_0_104, 4, tmp);
 8008b08:	f7ff fc76 	bl	80083f8 <mpu_write_mem>
    tmp[0] = 0xA3;
 8008b0c:	23a3      	movs	r3, #163	; 0xa3
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8008b0e:	f014 0740 	ands.w	r7, r4, #64	; 0x40
    tmp[0] = 0xA3;
 8008b12:	f88d 3004 	strb.w	r3, [sp, #4]
        tmp[1] = 0xC0;
 8008b16:	bf1f      	itttt	ne
 8008b18:	23c0      	movne	r3, #192	; 0xc0
 8008b1a:	f88d 3005 	strbne.w	r3, [sp, #5]
        tmp[2] = 0xC8;
 8008b1e:	23c8      	movne	r3, #200	; 0xc8
 8008b20:	f88d 3006 	strbne.w	r3, [sp, #6]
        tmp[1] = 0xA3;
 8008b24:	bf0a      	itet	eq
 8008b26:	f88d 3005 	strbeq.w	r3, [sp, #5]
        tmp[3] = 0xC2;
 8008b2a:	23c2      	movne	r3, #194	; 0xc2
        tmp[2] = 0xA3;
 8008b2c:	f88d 3006 	strbeq.w	r3, [sp, #6]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8008b30:	f414 78c0 	ands.w	r8, r4, #384	; 0x180
        tmp[3] = 0xA3;
 8008b34:	f88d 3007 	strb.w	r3, [sp, #7]
        tmp[4] = 0xC4;
 8008b38:	bf1d      	ittte	ne
 8008b3a:	23c4      	movne	r3, #196	; 0xc4
 8008b3c:	f88d 3008 	strbne.w	r3, [sp, #8]
        tmp[5] = 0xCC;
 8008b40:	23cc      	movne	r3, #204	; 0xcc
        tmp[4] = 0xA3;
 8008b42:	23a3      	moveq	r3, #163	; 0xa3
        tmp[5] = 0xCC;
 8008b44:	bf19      	ittee	ne
 8008b46:	f88d 3009 	strbne.w	r3, [sp, #9]
        tmp[6] = 0xC6;
 8008b4a:	23c6      	movne	r3, #198	; 0xc6
        tmp[4] = 0xA3;
 8008b4c:	f88d 3008 	strbeq.w	r3, [sp, #8]
        tmp[5] = 0xA3;
 8008b50:	f88d 3009 	strbeq.w	r3, [sp, #9]
        tmp[6] = 0xA3;
 8008b54:	f88d 300a 	strb.w	r3, [sp, #10]
    mpu_write_mem(CFG_15,10,tmp);
 8008b58:	aa01      	add	r2, sp, #4
    tmp[7] = 0xA3;
 8008b5a:	23a3      	movs	r3, #163	; 0xa3
    mpu_write_mem(CFG_15,10,tmp);
 8008b5c:	210a      	movs	r1, #10
 8008b5e:	f640 20a7 	movw	r0, #2727	; 0xaa7
    tmp[7] = 0xA3;
 8008b62:	f88d 300b 	strb.w	r3, [sp, #11]
    tmp[8] = 0xA3;
 8008b66:	f88d 300c 	strb.w	r3, [sp, #12]
    tmp[9] = 0xA3;
 8008b6a:	f88d 300d 	strb.w	r3, [sp, #13]
    mpu_write_mem(CFG_15,10,tmp);
 8008b6e:	f7ff fc43 	bl	80083f8 <mpu_write_mem>
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8008b72:	f014 0603 	ands.w	r6, r4, #3
        tmp[0] = DINA20;
 8008b76:	bf14      	ite	ne
 8008b78:	2320      	movne	r3, #32
        tmp[0] = 0xD8;
 8008b7a:	23d8      	moveq	r3, #216	; 0xd8
    mpu_write_mem(CFG_27,1,tmp);
 8008b7c:	aa01      	add	r2, sp, #4
 8008b7e:	2101      	movs	r1, #1
 8008b80:	f640 20b6 	movw	r0, #2742	; 0xab6
        tmp[0] = 0xD8;
 8008b84:	f88d 3004 	strb.w	r3, [sp, #4]
    mpu_write_mem(CFG_27,1,tmp);
 8008b88:	f7ff fc36 	bl	80083f8 <mpu_write_mem>
    if (mask & DMP_FEATURE_GYRO_CAL)
 8008b8c:	f014 0020 	ands.w	r0, r4, #32
 8008b90:	d073      	beq.n	8008c7a <dmp_enable_feature+0x196>
 8008b92:	f7ff fd1f 	bl	80085d4 <dmp_enable_gyro_cal.part.0>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8008b96:	f1b8 0f00 	cmp.w	r8, #0
 8008b9a:	d013      	beq.n	8008bc4 <dmp_enable_feature+0xe0>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8008b9c:	05e1      	lsls	r1, r4, #23
 8008b9e:	d56f      	bpl.n	8008c80 <dmp_enable_feature+0x19c>
            tmp[0] = 0xB2;
 8008ba0:	23b2      	movs	r3, #178	; 0xb2
 8008ba2:	f88d 3004 	strb.w	r3, [sp, #4]
            tmp[1] = 0x8B;
 8008ba6:	238b      	movs	r3, #139	; 0x8b
 8008ba8:	f88d 3005 	strb.w	r3, [sp, #5]
            tmp[2] = 0xB6;
 8008bac:	23b6      	movs	r3, #182	; 0xb6
 8008bae:	f88d 3006 	strb.w	r3, [sp, #6]
            tmp[3] = 0x9B;
 8008bb2:	239b      	movs	r3, #155	; 0x9b
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8008bb4:	aa01      	add	r2, sp, #4
 8008bb6:	2104      	movs	r1, #4
 8008bb8:	f640 20a2 	movw	r0, #2722	; 0xaa2
            tmp[3] = DINA90;
 8008bbc:	f88d 3007 	strb.w	r3, [sp, #7]
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8008bc0:	f7ff fc1a 	bl	80083f8 <mpu_write_mem>
    if (mask & DMP_FEATURE_TAP) {
 8008bc4:	07e2      	lsls	r2, r4, #31
 8008bc6:	d566      	bpl.n	8008c96 <dmp_enable_feature+0x1b2>
        tmp[0] = 0xF8;
 8008bc8:	23f8      	movs	r3, #248	; 0xf8
        mpu_write_mem(CFG_20, 1, tmp);
 8008bca:	aa01      	add	r2, sp, #4
 8008bcc:	2101      	movs	r1, #1
 8008bce:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
        tmp[0] = 0xF8;
 8008bd2:	f88d 3004 	strb.w	r3, [sp, #4]
        mpu_write_mem(CFG_20, 1, tmp);
 8008bd6:	f7ff fc0f 	bl	80083f8 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 8008bda:	21fa      	movs	r1, #250	; 0xfa
 8008bdc:	2007      	movs	r0, #7
 8008bde:	f7ff fdd5 	bl	800878c <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 8008be2:	2007      	movs	r0, #7
 8008be4:	f7ff fe92 	bl	800890c <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 8008be8:	2001      	movs	r0, #1
 8008bea:	f7ff feb3 	bl	8008954 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 8008bee:	2064      	movs	r0, #100	; 0x64
 8008bf0:	f7ff fec3 	bl	800897a <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 8008bf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008bf8:	f7ff fed1 	bl	800899e <dmp_set_tap_time_multi>
        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 8008bfc:	21c8      	movs	r1, #200	; 0xc8
 8008bfe:	482c      	ldr	r0, [pc, #176]	; (8008cb0 <dmp_enable_feature+0x1cc>)
 8008c00:	f7ff fedf 	bl	80089c2 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 8008c04:	2028      	movs	r0, #40	; 0x28
 8008c06:	f7ff fef6 	bl	80089f6 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 8008c0a:	200a      	movs	r0, #10
 8008c0c:	f7ff ff05 	bl	8008a1a <dmp_set_shake_reject_timeout>
    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 8008c10:	07a3      	lsls	r3, r4, #30
        tmp[0] = 0xD9;
 8008c12:	bf4c      	ite	mi
 8008c14:	23d9      	movmi	r3, #217	; 0xd9
        tmp[0] = 0xD8;
 8008c16:	23d8      	movpl	r3, #216	; 0xd8
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8008c18:	aa01      	add	r2, sp, #4
 8008c1a:	2101      	movs	r1, #1
 8008c1c:	f240 703d 	movw	r0, #1853	; 0x73d
        tmp[0] = 0xD8;
 8008c20:	f88d 3004 	strb.w	r3, [sp, #4]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8008c24:	f7ff fbe8 	bl	80083f8 <mpu_write_mem>
    if (mask & DMP_FEATURE_LP_QUAT)
 8008c28:	f014 0004 	ands.w	r0, r4, #4
        dmp_enable_lp_quat(1);
 8008c2c:	bf18      	it	ne
 8008c2e:	2001      	movne	r0, #1
        dmp_enable_lp_quat(0);
 8008c30:	f7ff ff1e 	bl	8008a70 <dmp_enable_lp_quat>
    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8008c34:	f014 0010 	ands.w	r0, r4, #16
        dmp_enable_6x_lp_quat(1);
 8008c38:	bf18      	it	ne
 8008c3a:	2001      	movne	r0, #1
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8008c3c:	4d1d      	ldr	r5, [pc, #116]	; (8008cb4 <dmp_enable_feature+0x1d0>)
        dmp_enable_6x_lp_quat(0);
 8008c3e:	f7ff ff34 	bl	8008aaa <dmp_enable_6x_lp_quat>
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8008c42:	f044 0308 	orr.w	r3, r4, #8
 8008c46:	816b      	strh	r3, [r5, #10]
    mpu_reset_fifo();
 8008c48:	f7fe fe9c 	bl	8007984 <mpu_reset_fifo>
 8008c4c:	462b      	mov	r3, r5
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8008c4e:	bb67      	cbnz	r7, 8008caa <dmp_enable_feature+0x1c6>
    dmp.packet_length = 0;
 8008c50:	73af      	strb	r7, [r5, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8008c52:	f1b8 0f00 	cmp.w	r8, #0
 8008c56:	d002      	beq.n	8008c5e <dmp_enable_feature+0x17a>
        dmp.packet_length += 6;
 8008c58:	7b9a      	ldrb	r2, [r3, #14]
 8008c5a:	3206      	adds	r2, #6
 8008c5c:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8008c5e:	f014 0f14 	tst.w	r4, #20
        dmp.packet_length += 16;
 8008c62:	bf1e      	ittt	ne
 8008c64:	7b9a      	ldrbne	r2, [r3, #14]
 8008c66:	3210      	addne	r2, #16
 8008c68:	739a      	strbne	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8008c6a:	b116      	cbz	r6, 8008c72 <dmp_enable_feature+0x18e>
        dmp.packet_length += 4;
 8008c6c:	7b9a      	ldrb	r2, [r3, #14]
 8008c6e:	3204      	adds	r2, #4
 8008c70:	739a      	strb	r2, [r3, #14]
}
 8008c72:	2000      	movs	r0, #0
 8008c74:	b004      	add	sp, #16
 8008c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dmp_enable_gyro_cal(0);
 8008c7a:	f7ff fee1 	bl	8008a40 <dmp_enable_gyro_cal>
 8008c7e:	e78a      	b.n	8008b96 <dmp_enable_feature+0xb2>
            tmp[0] = DINAC0;
 8008c80:	23b0      	movs	r3, #176	; 0xb0
 8008c82:	f88d 3004 	strb.w	r3, [sp, #4]
            tmp[1] = DINA80;
 8008c86:	2380      	movs	r3, #128	; 0x80
 8008c88:	f88d 3005 	strb.w	r3, [sp, #5]
            tmp[2] = DINAC2;
 8008c8c:	23b4      	movs	r3, #180	; 0xb4
 8008c8e:	f88d 3006 	strb.w	r3, [sp, #6]
            tmp[3] = DINA90;
 8008c92:	2390      	movs	r3, #144	; 0x90
 8008c94:	e78e      	b.n	8008bb4 <dmp_enable_feature+0xd0>
        tmp[0] = 0xD8;
 8008c96:	23d8      	movs	r3, #216	; 0xd8
        mpu_write_mem(CFG_20, 1, tmp);
 8008c98:	aa01      	add	r2, sp, #4
 8008c9a:	2101      	movs	r1, #1
 8008c9c:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
        tmp[0] = 0xD8;
 8008ca0:	f88d 3004 	strb.w	r3, [sp, #4]
        mpu_write_mem(CFG_20, 1, tmp);
 8008ca4:	f7ff fba8 	bl	80083f8 <mpu_write_mem>
 8008ca8:	e7b2      	b.n	8008c10 <dmp_enable_feature+0x12c>
        dmp.packet_length += 6;
 8008caa:	2206      	movs	r2, #6
 8008cac:	73aa      	strb	r2, [r5, #14]
 8008cae:	e7d0      	b.n	8008c52 <dmp_enable_feature+0x16e>
 8008cb0:	02cae309 	.word	0x02cae309
 8008cb4:	20000608 	.word	0x20000608

08008cb8 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8008cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cbc:	b089      	sub	sp, #36	; 0x24
     * cache this value and save some cycles.
     */
    sensors[0] = 0;

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8008cbe:	f8df b144 	ldr.w	fp, [pc, #324]	; 8008e04 <dmp_read_fifo+0x14c>
{
 8008cc2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8008cc4:	4698      	mov	r8, r3
    sensors[0] = 0;
 8008cc6:	2300      	movs	r3, #0
{
 8008cc8:	4606      	mov	r6, r0
 8008cca:	460f      	mov	r7, r1
 8008ccc:	4691      	mov	r9, r2
    sensors[0] = 0;
 8008cce:	8023      	strh	r3, [r4, #0]
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8008cd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008cd2:	f89b 000e 	ldrb.w	r0, [fp, #14]
 8008cd6:	4669      	mov	r1, sp
 8008cd8:	f7ff f80c 	bl	8007cf4 <mpu_read_fifo_stream>
 8008cdc:	46da      	mov	sl, fp
 8008cde:	4605      	mov	r5, r0
 8008ce0:	bb30      	cbnz	r0, 8008d30 <dmp_read_fifo+0x78>
        return -1;

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8008ce2:	f8bb 100a 	ldrh.w	r1, [fp, #10]
 8008ce6:	f011 0f14 	tst.w	r1, #20
 8008cea:	f000 8088 	beq.w	8008dfe <dmp_read_fifo+0x146>
 8008cee:	9801      	ldr	r0, [sp, #4]
 8008cf0:	9b00      	ldr	r3, [sp, #0]
 8008cf2:	9a02      	ldr	r2, [sp, #8]
 8008cf4:	ba00      	rev	r0, r0
 8008cf6:	fa93 fe83 	rev.w	lr, r3
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
            ((long)fifo_data[2] << 8) | fifo_data[3];
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8008cfa:	f8c9 0004 	str.w	r0, [r9, #4]
 8008cfe:	9b03      	ldr	r3, [sp, #12]
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8008d00:	f8c9 e000 	str.w	lr, [r9]
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8008d04:	fb10 f030 	smultt	r0, r0, r0
 8008d08:	ba12      	rev	r2, r2
 8008d0a:	fb1e 003e 	smlatt	r0, lr, lr, r0
 8008d0e:	ba1b      	rev	r3, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8008d10:	f8c9 2008 	str.w	r2, [r9, #8]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8008d14:	fb12 0232 	smlatt	r2, r2, r2, r0
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8008d18:	f8c9 300c 	str.w	r3, [r9, #12]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8008d1c:	fb13 2333 	smlatt	r3, r3, r3, r2
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8008d20:	f103 4371 	add.w	r3, r3, #4043309056	; 0xf1000000
 8008d24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d28:	d905      	bls.n	8008d36 <dmp_read_fifo+0x7e>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 8008d2a:	f7fe fe2b 	bl	8007984 <mpu_reset_fifo>
            sensors[0] = 0;
 8008d2e:	8025      	strh	r5, [r4, #0]
        return -1;
 8008d30:	f04f 35ff 	mov.w	r5, #4294967295
 8008d34:	e05f      	b.n	8008df6 <dmp_read_fifo+0x13e>
            return -1;
        }
        sensors[0] |= INV_WXYZ_QUAT;
 8008d36:	8823      	ldrh	r3, [r4, #0]
 8008d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d3c:	8023      	strh	r3, [r4, #0]
        ii += 16;
 8008d3e:	2310      	movs	r3, #16
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8008d40:	0648      	lsls	r0, r1, #25
 8008d42:	d51c      	bpl.n	8008d7e <dmp_read_fifo+0xc6>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8008d44:	aa08      	add	r2, sp, #32
 8008d46:	441a      	add	r2, r3
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
        ii += 6;
 8008d48:	3306      	adds	r3, #6
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8008d4a:	f812 ec20 	ldrb.w	lr, [r2, #-32]
 8008d4e:	f812 0c1f 	ldrb.w	r0, [r2, #-31]
 8008d52:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
 8008d56:	8038      	strh	r0, [r7, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8008d58:	f812 ec1e 	ldrb.w	lr, [r2, #-30]
 8008d5c:	f812 0c1d 	ldrb.w	r0, [r2, #-29]
 8008d60:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
 8008d64:	8078      	strh	r0, [r7, #2]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8008d66:	f812 0c1c 	ldrb.w	r0, [r2, #-28]
 8008d6a:	f812 2c1b 	ldrb.w	r2, [r2, #-27]
 8008d6e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008d72:	80ba      	strh	r2, [r7, #4]
        sensors[0] |= INV_XYZ_ACCEL;
 8008d74:	8822      	ldrh	r2, [r4, #0]
 8008d76:	f042 0208 	orr.w	r2, r2, #8
        ii += 6;
 8008d7a:	b2db      	uxtb	r3, r3
        sensors[0] |= INV_XYZ_ACCEL;
 8008d7c:	8022      	strh	r2, [r4, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8008d7e:	f411 7fc0 	tst.w	r1, #384	; 0x180
 8008d82:	d01c      	beq.n	8008dbe <dmp_read_fifo+0x106>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8008d84:	aa08      	add	r2, sp, #32
 8008d86:	441a      	add	r2, r3
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
        ii += 6;
 8008d88:	3306      	adds	r3, #6
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8008d8a:	f812 7c20 	ldrb.w	r7, [r2, #-32]
 8008d8e:	f812 0c1f 	ldrb.w	r0, [r2, #-31]
 8008d92:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 8008d96:	8030      	strh	r0, [r6, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8008d98:	f812 7c1e 	ldrb.w	r7, [r2, #-30]
 8008d9c:	f812 0c1d 	ldrb.w	r0, [r2, #-29]
 8008da0:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 8008da4:	8070      	strh	r0, [r6, #2]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8008da6:	f812 0c1c 	ldrb.w	r0, [r2, #-28]
 8008daa:	f812 2c1b 	ldrb.w	r2, [r2, #-27]
 8008dae:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008db2:	80b2      	strh	r2, [r6, #4]
        sensors[0] |= INV_XYZ_GYRO;
 8008db4:	8822      	ldrh	r2, [r4, #0]
 8008db6:	f042 0270 	orr.w	r2, r2, #112	; 0x70
        ii += 6;
 8008dba:	b2db      	uxtb	r3, r3
        sensors[0] |= INV_XYZ_GYRO;
 8008dbc:	8022      	strh	r2, [r4, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8008dbe:	0789      	lsls	r1, r1, #30
 8008dc0:	d016      	beq.n	8008df0 <dmp_read_fifo+0x138>
        decode_gesture(fifo_data + ii);
 8008dc2:	eb0d 0403 	add.w	r4, sp, r3
    if (gesture[1] & INT_SRC_TAP) {
 8008dc6:	7863      	ldrb	r3, [r4, #1]
    android_orient = gesture[3] & 0xC0;
 8008dc8:	78e6      	ldrb	r6, [r4, #3]
    if (gesture[1] & INT_SRC_TAP) {
 8008dca:	07da      	lsls	r2, r3, #31
 8008dcc:	d508      	bpl.n	8008de0 <dmp_read_fifo+0x128>
        if (dmp.tap_cb)
 8008dce:	f8da 3000 	ldr.w	r3, [sl]
 8008dd2:	b12b      	cbz	r3, 8008de0 <dmp_read_fifo+0x128>
        count = (tap % 8) + 1;
 8008dd4:	f006 0107 	and.w	r1, r6, #7
            dmp.tap_cb(direction, count);
 8008dd8:	3101      	adds	r1, #1
 8008dda:	f3c6 00c2 	ubfx	r0, r6, #3, #3
 8008dde:	4798      	blx	r3
    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 8008de0:	7863      	ldrb	r3, [r4, #1]
 8008de2:	071b      	lsls	r3, r3, #28
 8008de4:	d504      	bpl.n	8008df0 <dmp_read_fifo+0x138>
        if (dmp.android_orient_cb)
 8008de6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008dea:	b10b      	cbz	r3, 8008df0 <dmp_read_fifo+0x138>
            dmp.android_orient_cb(android_orient >> 6);
 8008dec:	09b0      	lsrs	r0, r6, #6
 8008dee:	4798      	blx	r3

    get_ms(timestamp);
 8008df0:	4640      	mov	r0, r8
 8008df2:	f000 fd4f 	bl	8009894 <mpu9255_get_ms>
    return 0;
}
 8008df6:	4628      	mov	r0, r5
 8008df8:	b009      	add	sp, #36	; 0x24
 8008dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    unsigned char ii = 0;
 8008dfe:	4603      	mov	r3, r0
 8008e00:	e79e      	b.n	8008d40 <dmp_read_fifo+0x88>
 8008e02:	bf00      	nop
 8008e04:	20000608 	.word	0x20000608

08008e08 <dmp_register_tap_cb>:
 *  @param[in]  func    Callback function.
 *  @return     0 if successful.
 */
int dmp_register_tap_cb(void (*func)(unsigned char, unsigned char))
{
    dmp.tap_cb = func;
 8008e08:	4b01      	ldr	r3, [pc, #4]	; (8008e10 <dmp_register_tap_cb+0x8>)
 8008e0a:	6018      	str	r0, [r3, #0]
    return 0;
}
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	4770      	bx	lr
 8008e10:	20000608 	.word	0x20000608

08008e14 <dmp_register_android_orient_cb>:
 *  @param[in]  func    Callback function.
 *  @return     0 if successful.
 */
int dmp_register_android_orient_cb(void (*func)(unsigned char))
{
    dmp.android_orient_cb = func;
 8008e14:	4b01      	ldr	r3, [pc, #4]	; (8008e1c <dmp_register_android_orient_cb+0x8>)
 8008e16:	6058      	str	r0, [r3, #4]
    return 0;
}
 8008e18:	2000      	movs	r0, #0
 8008e1a:	4770      	bx	lr
 8008e1c:	20000608 	.word	0x20000608

08008e20 <processKnee>:
float tau              = 1/(2*3.1416*10);
float Ts               = 1/512.0;
// Greg end


void processKnee() {
 8008e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e24:	ed2d 8b02 	vpush	{d8}
	if (Data_log_Start_Resume == 1) // Sensor Start Flag from VCP command / FATFS SD card file
 8008e28:	4bb3      	ldr	r3, [pc, #716]	; (80090f8 <processKnee+0x2d8>)
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	2b01      	cmp	r3, #1
void processKnee() {
 8008e2e:	b091      	sub	sp, #68	; 0x44
	if (Data_log_Start_Resume == 1) // Sensor Start Flag from VCP command / FATFS SD card file
 8008e30:	f040 813b 	bne.w	80090aa <processKnee+0x28a>
	{
		// Get knee angle in deg
		float angle_now = knee_angle();
 8008e34:	f002 fac0 	bl	800b3b8 <knee_angle>

		// Compute knee velocity with practical differentiator (fc = 10 Hz, bilinear transformation used)
		angular_velocity = (2*(angle_now - angle_old)+(2*tau-Ts)*angular_velocity) / (Ts+2*tau);
 8008e38:	4bb0      	ldr	r3, [pc, #704]	; (80090fc <processKnee+0x2dc>)
 8008e3a:	4ab1      	ldr	r2, [pc, #708]	; (8009100 <processKnee+0x2e0>)
 8008e3c:	edd3 5a00 	vldr	s11, [r3]
 8008e40:	4bb0      	ldr	r3, [pc, #704]	; (8009104 <processKnee+0x2e4>)
 8008e42:	ed92 5a00 	vldr	s10, [r2]
 8008e46:	ed93 7a00 	vldr	s14, [r3]
 8008e4a:	4baf      	ldr	r3, [pc, #700]	; (8009108 <processKnee+0x2e8>)
 8008e4c:	4eaf      	ldr	r6, [pc, #700]	; (800910c <processKnee+0x2ec>)
 8008e4e:	ed93 6a00 	vldr	s12, [r3]
		angle_old        = angle_now;
 8008e52:	ed83 0a00 	vstr	s0, [r3]
		angular_velocity = (2*(angle_now - angle_old)+(2*tau-Ts)*angular_velocity) / (Ts+2*tau);
 8008e56:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008e5a:	eef0 7a47 	vmov.f32	s15, s14
 8008e5e:	eed5 7aa6 	vfnms.f32	s15, s11, s13
 8008e62:	ee30 6a46 	vsub.f32	s12, s0, s12
 8008e66:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008e6a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008e6e:	eee6 7a26 	vfma.f32	s15, s12, s13
		float angle_now = knee_angle();
 8008e72:	eef0 8a40 	vmov.f32	s17, s0
		angular_velocity = (2*(angle_now - angle_old)+(2*tau-Ts)*angular_velocity) / (Ts+2*tau);
 8008e76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e7a:	edc2 6a00 	vstr	s13, [r2]

		// Filter load cell with 2nd order low-pass Butterworth (fc = 20 Hz)
		uint16_t Loadcell_top = Read_Loadcell1();
 8008e7e:	f001 fcf5 	bl	800a86c <Read_Loadcell1>
 8008e82:	9004      	str	r0, [sp, #16]
 8008e84:	f8bd a010 	ldrh.w	sl, [sp, #16]
		uint16_t Loadcell_bot = Read_Loadcell2();
 8008e88:	f001 fd1c 	bl	800a8c4 <Read_Loadcell2>
 8008e8c:	9005      	str	r0, [sp, #20]
 8008e8e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8008e92:	9303      	str	r3, [sp, #12]
		if (count == 1)
 8008e94:	4b9e      	ldr	r3, [pc, #632]	; (8009110 <processKnee+0x2f0>)
 8008e96:	781a      	ldrb	r2, [r3, #0]
 8008e98:	2a01      	cmp	r2, #1
 8008e9a:	f040 810b 	bne.w	80090b4 <processKnee+0x294>
		{
			Loadcell_top_filtered    = Loadcell_top;
			Loadcell_top_m2          = Loadcell_top;
 8008e9e:	4a9d      	ldr	r2, [pc, #628]	; (8009114 <processKnee+0x2f4>)
			Loadcell_top_filtered_m2 = Loadcell_top;

			Loadcell_bot_filtered    = Loadcell_bot;
			Loadcell_bot_m2          = Loadcell_bot;
 8008ea0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
			Loadcell_top_m2          = Loadcell_top;
 8008ea4:	f8a2 a000 	strh.w	sl, [r2]
			Loadcell_top_filtered    = Loadcell_top;
 8008ea8:	ee07 aa90 	vmov	s15, sl
			Loadcell_top_filtered_m2 = Loadcell_top;
 8008eac:	4a9a      	ldr	r2, [pc, #616]	; (8009118 <processKnee+0x2f8>)
			Loadcell_top_filtered    = Loadcell_top;
 8008eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
			Loadcell_top_filtered_m2 = Loadcell_top;
 8008eb2:	edc2 7a00 	vstr	s15, [r2]
			Loadcell_top_filtered    = Loadcell_top;
 8008eb6:	edc6 7a00 	vstr	s15, [r6]
			Loadcell_bot_filtered    = Loadcell_bot;
 8008eba:	eddd 7a03 	vldr	s15, [sp, #12]
 8008ebe:	4a97      	ldr	r2, [pc, #604]	; (800911c <processKnee+0x2fc>)
 8008ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ec4:	edc2 7a00 	vstr	s15, [r2]
			Loadcell_bot_m2          = Loadcell_bot;
 8008ec8:	4a95      	ldr	r2, [pc, #596]	; (8009120 <processKnee+0x300>)
 8008eca:	8011      	strh	r1, [r2, #0]
			Loadcell_bot_filtered_m2 = Loadcell_bot;
 8008ecc:	4a95      	ldr	r2, [pc, #596]	; (8009124 <processKnee+0x304>)
 8008ece:	edc2 7a00 	vstr	s15, [r2]

			count++;
 8008ed2:	2202      	movs	r2, #2

			Loadcell_bot_filtered    = Loadcell_bot;
			Loadcell_bot_m1          = Loadcell_bot;
			Loadcell_bot_filtered_m1 = Loadcell_bot;

			count++;
 8008ed4:	701a      	strb	r2, [r3, #0]
			Loadcell_bot_filtered_m2 = Loadcell_bot_filtered_m1;
			Loadcell_bot_filtered_m1 = Loadcell_bot_filtered;
		}

		// Get raw IMU data
		imu_data_now = IMU1_read();
 8008ed6:	4c94      	ldr	r4, [pc, #592]	; (8009128 <processKnee+0x308>)
		// Compute hip angle using
		// 1) Madgwick filter (assumes X+ forward and Z+ upward)
//		hip_angle = -MadgwickAHRSupdateIMU(imu_data_now.GX/32.8*(3.1416/180), -imu_data_now.GZ/32.8*(3.1416/180), imu_data_now.GY/32.8*(3.1416/180), imu_data_now.AX, -imu_data_now.AZ, imu_data_now.AY);
//		hip_angle = hip_angle*rad2deg - angle_now;
		// 2) Complementary filter
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 8008ed8:	4d94      	ldr	r5, [pc, #592]	; (800912c <processKnee+0x30c>)
		IMU_acc = -imu_data_now.AY;
 8008eda:	f8df b290 	ldr.w	fp, [pc, #656]	; 800916c <processKnee+0x34c>
		imu_angle_past = imu_angle_now;
		hip_angle      = (imu_angle_now * rad2deg) - angle_now;
 8008ede:	f8df 8290 	ldr.w	r8, [pc, #656]	; 8009170 <processKnee+0x350>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008ee2:	f8df a290 	ldr.w	sl, [pc, #656]	; 8009174 <processKnee+0x354>

		// Measure speed with oscope start
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_11);

		// Command motor
		my_st_impedance = controller_impedance(angle_now, angular_velocity, Loadcell_bot_filtered, Loadcell_top_filtered, IMU_acc, hip_angle);
 8008ee6:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800910c <processKnee+0x2ec>
		Mag_Enc2_Store();

		// Store data
		// Data can only be stored as integers, so some scaling is done to help resolution
		Knee_data_storeIMU(imu_data_now.AX, imu_data_now.AY, imu_data_now.AZ, imu_data_now.GX, imu_data_now.GY, imu_data_now.GZ);
		Knee_data_store(angle_now * 100, hip_angle * 100, Loadcell_top, Loadcell_top_filtered);
 8008eea:	ed9f 8a91 	vldr	s16, [pc, #580]	; 8009130 <processKnee+0x310>
		imu_data_now = IMU1_read();
 8008eee:	a80c      	add	r0, sp, #48	; 0x30
 8008ef0:	f002 f8fa 	bl	800b0e8 <IMU1_read>
 8008ef4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ef6:	6023      	str	r3, [r4, #0]
 8008ef8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008efa:	6063      	str	r3, [r4, #4]
 8008efc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008efe:	60a3      	str	r3, [r4, #8]
		imu_data_now.GX -= -60;
 8008f00:	88e3      	ldrh	r3, [r4, #6]
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 8008f02:	eddf 0a8c 	vldr	s1, [pc, #560]	; 8009134 <processKnee+0x314>
 8008f06:	6820      	ldr	r0, [r4, #0]
 8008f08:	ed95 0a00 	vldr	s0, [r5]
		imu_data_now.GX -= -60;
 8008f0c:	333c      	adds	r3, #60	; 0x3c
 8008f0e:	80e3      	strh	r3, [r4, #6]
		imu_data_now.GY -= -29;
 8008f10:	8923      	ldrh	r3, [r4, #8]
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 8008f12:	6861      	ldr	r1, [r4, #4]
		imu_data_now.GY -= -29;
 8008f14:	331d      	adds	r3, #29
 8008f16:	8123      	strh	r3, [r4, #8]
		imu_data_now.GZ -= -16;
 8008f18:	8963      	ldrh	r3, [r4, #10]
 8008f1a:	3310      	adds	r3, #16
 8008f1c:	8163      	strh	r3, [r4, #10]
		IMU_acc = -imu_data_now.AY;
 8008f1e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 8008f22:	68a2      	ldr	r2, [r4, #8]
		IMU_acc = -imu_data_now.AY;
 8008f24:	425b      	negs	r3, r3
 8008f26:	ee07 3a90 	vmov	s15, r3
 8008f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f2e:	edcb 7a00 	vstr	s15, [fp]
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 8008f32:	f002 fa5d 	bl	800b3f0 <IMU_orientation>
		hip_angle      = (imu_angle_now * rad2deg) - angle_now;
 8008f36:	eddf 7a80 	vldr	s15, [pc, #512]	; 8009138 <processKnee+0x318>
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 8008f3a:	4b80      	ldr	r3, [pc, #512]	; (800913c <processKnee+0x31c>)
		imu_angle_past = imu_angle_now;
 8008f3c:	ed85 0a00 	vstr	s0, [r5]
		hip_angle      = (imu_angle_now * rad2deg) - angle_now;
 8008f40:	ee60 7a27 	vmul.f32	s15, s0, s15
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 8008f44:	ed83 0a00 	vstr	s0, [r3]
		hip_angle      = (imu_angle_now * rad2deg) - angle_now;
 8008f48:	ee17 0a90 	vmov	r0, s15
 8008f4c:	f7f7 fafc 	bl	8000548 <__aeabi_f2d>
 8008f50:	a367      	add	r3, pc, #412	; (adr r3, 80090f0 <processKnee+0x2d0>)
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	f7f7 fc75 	bl	8000844 <__aeabi_ddiv>
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	ee18 0a90 	vmov	r0, s17
 8008f60:	460f      	mov	r7, r1
 8008f62:	f7f7 faf1 	bl	8000548 <__aeabi_f2d>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	f7f7 f98b 	bl	8000288 <__aeabi_dsub>
 8008f72:	f7f7 fe15 	bl	8000ba0 <__aeabi_d2f>
		my_st_impedance = controller_impedance(angle_now, angular_velocity, Loadcell_bot_filtered, Loadcell_top_filtered, IMU_acc, hip_angle);
 8008f76:	4e69      	ldr	r6, [pc, #420]	; (800911c <processKnee+0x2fc>)
 8008f78:	4f61      	ldr	r7, [pc, #388]	; (8009100 <processKnee+0x2e0>)
 8008f7a:	ed9b 2a00 	vldr	s4, [fp]
 8008f7e:	edd9 1a00 	vldr	s3, [r9]
 8008f82:	ed96 1a00 	vldr	s2, [r6]
 8008f86:	edd7 0a00 	vldr	s1, [r7]
		hip_angle      = (imu_angle_now * rad2deg) - angle_now;
 8008f8a:	f8c8 0000 	str.w	r0, [r8]
 8008f8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
		my_st_impedance = controller_impedance(angle_now, angular_velocity, Loadcell_bot_filtered, Loadcell_top_filtered, IMU_acc, hip_angle);
 8008f92:	aa08      	add	r2, sp, #32
 8008f94:	ee02 0a90 	vmov	s5, r0
 8008f98:	eeb0 0a68 	vmov.f32	s0, s17
 8008f9c:	f8ca 3018 	str.w	r3, [sl, #24]
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	9306      	str	r3, [sp, #24]
 8008fa4:	9203      	str	r2, [sp, #12]
 8008fa6:	f7fe fadf 	bl	8007568 <controller_impedance>
 8008faa:	9a03      	ldr	r2, [sp, #12]
 8008fac:	4d64      	ldr	r5, [pc, #400]	; (8009140 <processKnee+0x320>)
  WRITE_REG(GPIOx->BRR, PinMask);
 8008fae:	9b06      	ldr	r3, [sp, #24]
 8008fb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8008fb2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8008fb6:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
		F_Sensor_ADC_Store();
 8008fba:	f001 fcaf 	bl	800a91c <F_Sensor_ADC_Store>
		Mag_Enc2_Store();
 8008fbe:	f002 f977 	bl	800b2b0 <Mag_Enc2_Store>
		Knee_data_storeIMU(imu_data_now.AX, imu_data_now.AY, imu_data_now.AZ, imu_data_now.GX, imu_data_now.GY, imu_data_now.GZ);
 8008fc2:	f9b4 e00a 	ldrsh.w	lr, [r4, #10]
 8008fc6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8008fca:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8008fce:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8008fd2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8008fd6:	f8cd e004 	str.w	lr, [sp, #4]
 8008fda:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
 8008fde:	9400      	str	r4, [sp, #0]
 8008fe0:	f002 f8c4 	bl	800b16c <Knee_data_storeIMU>
		Knee_data_store(angle_now * 100, hip_angle * 100, Loadcell_top, Loadcell_top_filtered);
 8008fe4:	edd8 7a00 	vldr	s15, [r8]
 8008fe8:	ed99 7a00 	vldr	s14, [r9]
 8008fec:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8008ff0:	ee67 7a88 	vmul.f32	s15, s15, s16
 8008ff4:	ee28 0a88 	vmul.f32	s0, s17, s16
 8008ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ffc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8009000:	ee17 1a90 	vmov	r1, s15
 8009004:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009008:	ee17 3a10 	vmov	r3, s14
 800900c:	ee17 0a90 	vmov	r0, s15
 8009010:	f002 f8ea 	bl	800b1e8 <Knee_data_store>
		Knee_data_store1(Loadcell_bot, Loadcell_bot_filtered, my_st_impedance.desired_torque * 100, angular_velocity * 100);
 8009014:	ed97 7a00 	vldr	s14, [r7]
 8009018:	edd5 7a01 	vldr	s15, [r5, #4]
 800901c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8009020:	ee27 7a08 	vmul.f32	s14, s14, s16
 8009024:	ee27 8a88 	vmul.f32	s16, s15, s16
 8009028:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800902c:	edd6 7a00 	vldr	s15, [r6]
 8009030:	ee17 3a10 	vmov	r3, s14
 8009034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009038:	eebd 7ac8 	vcvt.s32.f32	s14, s16
 800903c:	ee17 1a90 	vmov	r1, s15
 8009040:	ee17 2a10 	vmov	r2, s14
 8009044:	f002 f900 	bl	800b248 <Knee_data_store1>
//        Knee_data_store2(15,16);    <-- this is commented out in sensor.c

		if (Sub_cnt == 5) {
 8009048:	4b3e      	ldr	r3, [pc, #248]	; (8009144 <processKnee+0x324>)
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	2a05      	cmp	r2, #5
 800904e:	d118      	bne.n	8009082 <processKnee+0x262>
			//BSbuffer[s_flag].Blank1 = (uint8_t) (LL_GPIO_IsInputPinSet(GPIOA,LL_GPIO_PIN_10));
			BSbuffer[s_flag].RTC_Time = (uint32_t) (RTC->TR & 0x007F7F7F);
 8009050:	4d3d      	ldr	r5, [pc, #244]	; (8009148 <processKnee+0x328>)
 8009052:	4c3e      	ldr	r4, [pc, #248]	; (800914c <processKnee+0x32c>)
 8009054:	7828      	ldrb	r0, [r5, #0]
 8009056:	493e      	ldr	r1, [pc, #248]	; (8009150 <processKnee+0x330>)
 8009058:	6822      	ldr	r2, [r4, #0]
 800905a:	eb01 3080 	add.w	r0, r1, r0, lsl #14
 800905e:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 8009062:	f643 76f8 	movw	r6, #16376	; 0x3ff8
 8009066:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 800906a:	5182      	str	r2, [r0, r6]
			BSbuffer[s_flag].RTC_Date = (uint32_t) (RTC->DR & 0x00FFFF3F);
 800906c:	7828      	ldrb	r0, [r5, #0]
 800906e:	6862      	ldr	r2, [r4, #4]
 8009070:	eb01 3180 	add.w	r1, r1, r0, lsl #14
 8009074:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8009078:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 800907c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009080:	500a      	str	r2, [r1, r0]

		}

		// Switching Buffer
		if (Sub_cnt == Highest_sensor_count)    // Total samples to be stored in a 16KB buffer
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 8009088:	f040 8137 	bne.w	80092fa <processKnee+0x4da>
		{
			Sub_cnt = 0;          // Reset Counter of sensor element
 800908c:	2100      	movs	r1, #0
 800908e:	6019      	str	r1, [r3, #0]
			SD_write_Flag = 1;    // Flag set to write filled buffer content
 8009090:	4b30      	ldr	r3, [pc, #192]	; (8009154 <processKnee+0x334>)
 8009092:	4831      	ldr	r0, [pc, #196]	; (8009158 <processKnee+0x338>)
 8009094:	2201      	movs	r2, #1
 8009096:	701a      	strb	r2, [r3, #0]
			// Changing Buffer
			if (s_flag == 0)    // if current storgae_buffer was 0
 8009098:	4b2b      	ldr	r3, [pc, #172]	; (8009148 <processKnee+0x328>)
 800909a:	781c      	ldrb	r4, [r3, #0]
 800909c:	f004 05ff 	and.w	r5, r4, #255	; 0xff
 80090a0:	2c00      	cmp	r4, #0
 80090a2:	f040 8127 	bne.w	80092f4 <processKnee+0x4d4>
			{
				w_flag = 0;    // write_buffer to be saved in SD card = 0
 80090a6:	7005      	strb	r5, [r0, #0]
				s_flag = 1;    // current storgae_buffer is set 1
 80090a8:	701a      	strb	r2, [r3, #0]
		else
		{
			Sub_cnt++;    // Increment Counter of sensor element
		}
	}
}
 80090aa:	b011      	add	sp, #68	; 0x44
 80090ac:	ecbd 8b02 	vpop	{d8}
 80090b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if (count == 2)
 80090b4:	2a02      	cmp	r2, #2
 80090b6:	4d29      	ldr	r5, [pc, #164]	; (800915c <processKnee+0x33c>)
 80090b8:	4c29      	ldr	r4, [pc, #164]	; (8009160 <processKnee+0x340>)
 80090ba:	d15f      	bne.n	800917c <processKnee+0x35c>
			Loadcell_top_filtered    = Loadcell_top;
 80090bc:	ee07 aa90 	vmov	s15, sl
 80090c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
			Loadcell_bot_filtered    = Loadcell_bot;
 80090c4:	4a15      	ldr	r2, [pc, #84]	; (800911c <processKnee+0x2fc>)
			Loadcell_top_filtered    = Loadcell_top;
 80090c6:	edc6 7a00 	vstr	s15, [r6]
			Loadcell_top_filtered_m1 = Loadcell_top;
 80090ca:	edc4 7a00 	vstr	s15, [r4]
			Loadcell_bot_filtered    = Loadcell_bot;
 80090ce:	eddd 7a03 	vldr	s15, [sp, #12]
			Loadcell_bot_m1          = Loadcell_bot;
 80090d2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
			Loadcell_top_m1          = Loadcell_top;
 80090d6:	f8a5 a000 	strh.w	sl, [r5]
			Loadcell_bot_filtered    = Loadcell_bot;
 80090da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090de:	edc2 7a00 	vstr	s15, [r2]
			Loadcell_bot_m1          = Loadcell_bot;
 80090e2:	4a20      	ldr	r2, [pc, #128]	; (8009164 <processKnee+0x344>)
 80090e4:	8011      	strh	r1, [r2, #0]
			Loadcell_bot_filtered_m1 = Loadcell_bot;
 80090e6:	4a20      	ldr	r2, [pc, #128]	; (8009168 <processKnee+0x348>)
 80090e8:	edc2 7a00 	vstr	s15, [r2]
			count++;
 80090ec:	2203      	movs	r2, #3
 80090ee:	e6f1      	b.n	8008ed4 <processKnee+0xb4>
 80090f0:	2e48e8a7 	.word	0x2e48e8a7
 80090f4:	400921ff 	.word	0x400921ff
 80090f8:	20008a45 	.word	0x20008a45
 80090fc:	200000ec 	.word	0x200000ec
 8009100:	20000620 	.word	0x20000620
 8009104:	200000e4 	.word	0x200000e4
 8009108:	2000061c 	.word	0x2000061c
 800910c:	20008a28 	.word	0x20008a28
 8009110:	200000e8 	.word	0x200000e8
 8009114:	20008a14 	.word	0x20008a14
 8009118:	20008a2c 	.word	0x20008a2c
 800911c:	20008a18 	.word	0x20008a18
 8009120:	20008a16 	.word	0x20008a16
 8009124:	20008a34 	.word	0x20008a34
 8009128:	20008a1c 	.word	0x20008a1c
 800912c:	20000628 	.word	0x20000628
 8009130:	42c80000 	.word	0x42c80000
 8009134:	3b000000 	.word	0x3b000000
 8009138:	43340000 	.word	0x43340000
 800913c:	20008a3c 	.word	0x20008a3c
 8009140:	200089f0 	.word	0x200089f0
 8009144:	20000630 	.word	0x20000630
 8009148:	20000636 	.word	0x20000636
 800914c:	40002800 	.word	0x40002800
 8009150:	20000954 	.word	0x20000954
 8009154:	20008a4c 	.word	0x20008a4c
 8009158:	200000f4 	.word	0x200000f4
 800915c:	20008a30 	.word	0x20008a30
 8009160:	20008a38 	.word	0x20008a38
 8009164:	20008a32 	.word	0x20008a32
 8009168:	20008a40 	.word	0x20008a40
 800916c:	20000618 	.word	0x20000618
 8009170:	20000624 	.word	0x20000624
 8009174:	48000400 	.word	0x48000400
 8009178:	3fd3eab3 	.word	0x3fd3eab3
			Loadcell_top_filtered = 1.6556f * Loadcell_top_filtered_m1
 800917c:	ed94 8a00 	vldr	s16, [r4]
 8009180:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 8009178 <processKnee+0x358>
					- 0.7068 * Loadcell_top_filtered_m2 + 0.0128 * Loadcell_top
 8009184:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8009334 <processKnee+0x514>
					+ 0.0256 * Loadcell_top_m1 + 0.0128 * Loadcell_top_m2;
 8009188:	882f      	ldrh	r7, [r5, #0]
			Loadcell_top_filtered = 1.6556f * Loadcell_top_filtered_m1
 800918a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800918e:	ee17 0a90 	vmov	r0, s15
 8009192:	f7f7 f9d9 	bl	8000548 <__aeabi_f2d>
 8009196:	4680      	mov	r8, r0
					- 0.7068 * Loadcell_top_filtered_m2 + 0.0128 * Loadcell_top
 8009198:	f8db 0000 	ldr.w	r0, [fp]
			Loadcell_top_filtered = 1.6556f * Loadcell_top_filtered_m1
 800919c:	4689      	mov	r9, r1
					- 0.7068 * Loadcell_top_filtered_m2 + 0.0128 * Loadcell_top
 800919e:	f7f7 f9d3 	bl	8000548 <__aeabi_f2d>
 80091a2:	a359      	add	r3, pc, #356	; (adr r3, 8009308 <processKnee+0x4e8>)
 80091a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a8:	f7f7 fa22 	bl	80005f0 <__aeabi_dmul>
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	4640      	mov	r0, r8
 80091b2:	4649      	mov	r1, r9
 80091b4:	f7f7 f868 	bl	8000288 <__aeabi_dsub>
 80091b8:	4680      	mov	r8, r0
 80091ba:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80091be:	4689      	mov	r9, r1
 80091c0:	f7f7 f9b0 	bl	8000524 <__aeabi_i2d>
 80091c4:	a352      	add	r3, pc, #328	; (adr r3, 8009310 <processKnee+0x4f0>)
 80091c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ca:	f7f7 fa11 	bl	80005f0 <__aeabi_dmul>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	4640      	mov	r0, r8
 80091d4:	4649      	mov	r1, r9
 80091d6:	f7f7 f859 	bl	800028c <__adddf3>
 80091da:	4680      	mov	r8, r0
					+ 0.0256 * Loadcell_top_m1 + 0.0128 * Loadcell_top_m2;
 80091dc:	4638      	mov	r0, r7
					- 0.7068 * Loadcell_top_filtered_m2 + 0.0128 * Loadcell_top
 80091de:	4689      	mov	r9, r1
					+ 0.0256 * Loadcell_top_m1 + 0.0128 * Loadcell_top_m2;
 80091e0:	f7f7 f9a0 	bl	8000524 <__aeabi_i2d>
 80091e4:	a34c      	add	r3, pc, #304	; (adr r3, 8009318 <processKnee+0x4f8>)
 80091e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ea:	f7f7 fa01 	bl	80005f0 <__aeabi_dmul>
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	4640      	mov	r0, r8
 80091f4:	4649      	mov	r1, r9
 80091f6:	f7f7 f849 	bl	800028c <__adddf3>
 80091fa:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8009338 <processKnee+0x518>
 80091fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009202:	f8b8 0000 	ldrh.w	r0, [r8]
 8009206:	f7f7 f98d 	bl	8000524 <__aeabi_i2d>
 800920a:	a341      	add	r3, pc, #260	; (adr r3, 8009310 <processKnee+0x4f0>)
 800920c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009210:	f7f7 f9ee 	bl	80005f0 <__aeabi_dmul>
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800921c:	f7f7 f836 	bl	800028c <__adddf3>
 8009220:	f7f7 fcbe 	bl	8000ba0 <__aeabi_d2f>
			Loadcell_top_m1          = Loadcell_top;
 8009224:	f8a5 a000 	strh.w	sl, [r5]
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 8009228:	f8df a110 	ldr.w	sl, [pc, #272]	; 800933c <processKnee+0x51c>
			Loadcell_top_filtered_m1 = Loadcell_top_filtered;
 800922c:	6020      	str	r0, [r4, #0]
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 800922e:	f8da 4000 	ldr.w	r4, [sl]
			Loadcell_top_filtered = 1.6556f * Loadcell_top_filtered_m1
 8009232:	6030      	str	r0, [r6, #0]
			Loadcell_top_m2          = Loadcell_top_m1;
 8009234:	f8a8 7000 	strh.w	r7, [r8]
			Loadcell_top_filtered_m2 = Loadcell_top_filtered_m1;
 8009238:	ed8b 8a00 	vstr	s16, [fp]
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 800923c:	4620      	mov	r0, r4
 800923e:	f7f7 f983 	bl	8000548 <__aeabi_f2d>
 8009242:	a33a      	add	r3, pc, #232	; (adr r3, 800932c <processKnee+0x50c>)
 8009244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009248:	f7f7 f9d2 	bl	80005f0 <__aeabi_dmul>
					- 0.7068 * Loadcell_bot_filtered_m2 + 0.0128 * Loadcell_bot
 800924c:	4f34      	ldr	r7, [pc, #208]	; (8009320 <processKnee+0x500>)
					+ 0.0256 * Loadcell_bot_m1 + 0.0128 * Loadcell_bot_m2;
 800924e:	4d35      	ldr	r5, [pc, #212]	; (8009324 <processKnee+0x504>)
 8009250:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8009340 <processKnee+0x520>
 8009254:	882e      	ldrh	r6, [r5, #0]
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 8009256:	4680      	mov	r8, r0
					- 0.7068 * Loadcell_bot_filtered_m2 + 0.0128 * Loadcell_bot
 8009258:	6838      	ldr	r0, [r7, #0]
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 800925a:	4689      	mov	r9, r1
					- 0.7068 * Loadcell_bot_filtered_m2 + 0.0128 * Loadcell_bot
 800925c:	f7f7 f974 	bl	8000548 <__aeabi_f2d>
 8009260:	a329      	add	r3, pc, #164	; (adr r3, 8009308 <processKnee+0x4e8>)
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	f7f7 f9c3 	bl	80005f0 <__aeabi_dmul>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	4640      	mov	r0, r8
 8009270:	4649      	mov	r1, r9
 8009272:	f7f7 f809 	bl	8000288 <__aeabi_dsub>
 8009276:	4680      	mov	r8, r0
 8009278:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800927c:	4689      	mov	r9, r1
 800927e:	f7f7 f951 	bl	8000524 <__aeabi_i2d>
 8009282:	a323      	add	r3, pc, #140	; (adr r3, 8009310 <processKnee+0x4f0>)
 8009284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009288:	f7f7 f9b2 	bl	80005f0 <__aeabi_dmul>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	4640      	mov	r0, r8
 8009292:	4649      	mov	r1, r9
 8009294:	f7f6 fffa 	bl	800028c <__adddf3>
 8009298:	4680      	mov	r8, r0
					+ 0.0256 * Loadcell_bot_m1 + 0.0128 * Loadcell_bot_m2;
 800929a:	4630      	mov	r0, r6
					- 0.7068 * Loadcell_bot_filtered_m2 + 0.0128 * Loadcell_bot
 800929c:	4689      	mov	r9, r1
					+ 0.0256 * Loadcell_bot_m1 + 0.0128 * Loadcell_bot_m2;
 800929e:	f7f7 f941 	bl	8000524 <__aeabi_i2d>
 80092a2:	a31d      	add	r3, pc, #116	; (adr r3, 8009318 <processKnee+0x4f8>)
 80092a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a8:	f7f7 f9a2 	bl	80005f0 <__aeabi_dmul>
 80092ac:	4602      	mov	r2, r0
 80092ae:	460b      	mov	r3, r1
 80092b0:	4640      	mov	r0, r8
 80092b2:	4649      	mov	r1, r9
 80092b4:	f7f6 ffea 	bl	800028c <__adddf3>
 80092b8:	4680      	mov	r8, r0
 80092ba:	f8bb 0000 	ldrh.w	r0, [fp]
 80092be:	4689      	mov	r9, r1
 80092c0:	f7f7 f930 	bl	8000524 <__aeabi_i2d>
 80092c4:	a312      	add	r3, pc, #72	; (adr r3, 8009310 <processKnee+0x4f0>)
 80092c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ca:	f7f7 f991 	bl	80005f0 <__aeabi_dmul>
 80092ce:	460b      	mov	r3, r1
 80092d0:	4602      	mov	r2, r0
 80092d2:	4649      	mov	r1, r9
 80092d4:	4640      	mov	r0, r8
 80092d6:	f7f6 ffd9 	bl	800028c <__adddf3>
 80092da:	f7f7 fc61 	bl	8000ba0 <__aeabi_d2f>
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 80092de:	4b12      	ldr	r3, [pc, #72]	; (8009328 <processKnee+0x508>)
			Loadcell_bot_m2          = Loadcell_bot_m1;
 80092e0:	f8ab 6000 	strh.w	r6, [fp]
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 80092e4:	6018      	str	r0, [r3, #0]
			Loadcell_bot_m1          = Loadcell_bot;
 80092e6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80092ea:	802b      	strh	r3, [r5, #0]
			Loadcell_bot_filtered_m2 = Loadcell_bot_filtered_m1;
 80092ec:	603c      	str	r4, [r7, #0]
			Loadcell_bot_filtered_m1 = Loadcell_bot_filtered;
 80092ee:	f8ca 0000 	str.w	r0, [sl]
 80092f2:	e5f0      	b.n	8008ed6 <processKnee+0xb6>
				w_flag = 1;    // write_buffer to be saved in SD card = 1
 80092f4:	7002      	strb	r2, [r0, #0]
				s_flag = 0;    // current storgae_buffer is set 0
 80092f6:	7019      	strb	r1, [r3, #0]
 80092f8:	e6d7      	b.n	80090aa <processKnee+0x28a>
			Sub_cnt++;    // Increment Counter of sensor element
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	3201      	adds	r2, #1
 80092fe:	601a      	str	r2, [r3, #0]
}
 8009300:	e6d3      	b.n	80090aa <processKnee+0x28a>
 8009302:	bf00      	nop
 8009304:	f3af 8000 	nop.w
 8009308:	089a0275 	.word	0x089a0275
 800930c:	3fe69e1b 	.word	0x3fe69e1b
 8009310:	eb1c432d 	.word	0xeb1c432d
 8009314:	3f8a36e2 	.word	0x3f8a36e2
 8009318:	eb1c432d 	.word	0xeb1c432d
 800931c:	3f9a36e2 	.word	0x3f9a36e2
 8009320:	20008a34 	.word	0x20008a34
 8009324:	20008a32 	.word	0x20008a32
 8009328:	20008a18 	.word	0x20008a18
 800932c:	6cf41f21 	.word	0x6cf41f21
 8009330:	3ffa7d56 	.word	0x3ffa7d56
 8009334:	20008a2c 	.word	0x20008a2c
 8009338:	20008a14 	.word	0x20008a14
 800933c:	20008a40 	.word	0x20008a40
 8009340:	20008a16 	.word	0x20008a16

08009344 <main>:
// Greg start
uint8_t isProcessKneeRequired = 0;
// Greg end


int main(void) {
 8009344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Pros_state = LP_STOP;                  // Default state after power ON reset
 8009348:	4c6a      	ldr	r4, [pc, #424]	; (80094f4 <main+0x1b0>)
 800934a:	2501      	movs	r5, #1
 800934c:	7025      	strb	r5, [r4, #0]
	SystemClock_Config_MSI_80MHz();	// Configure the system clock to 48 MHz from MSI, PLL disabled for power saving
 800934e:	f002 fbe7 	bl	800bb20 <SystemClock_Config_MSI_80MHz>

	// If RTC is previously configured and running via backup battery i.e. BackUp Register Data is available, No need to update RTC time again
	if (RTC_BAK_GetRegister(RTC, 0x01) != RTC_BKP_DATE_TIME_UPDTATED) //    0x01 value was arbitrarily set from previous Configure_RTC_Calendar()
 8009352:	4629      	mov	r1, r5
 8009354:	4868      	ldr	r0, [pc, #416]	; (80094f8 <main+0x1b4>)
 8009356:	f000 ffdf 	bl	800a318 <RTC_BAK_GetRegister>
 800935a:	f243 23f2 	movw	r3, #13042	; 0x32f2
 800935e:	4298      	cmp	r0, r3
 8009360:	d001      	beq.n	8009366 <main+0x22>
	{
		MX_RTC_Init();   // Set RTC clock source and parameters
 8009362:	f000 ff47 	bl	800a1f4 <MX_RTC_Init>
	}

	MX_GPIO_Init();
 8009366:	f7fe f99b 	bl	80076a0 <MX_GPIO_Init>
	HAL_Init(); // Reset of all peripherals, Initializes the Flash interface and the Systick.
 800936a:	f7fa fa4f 	bl	800380c <HAL_Init>

	DFU_Bypass();
 800936e:	f000 fce5 	bl	8009d3c <DFU_Bypass>
	Configure_USART_1();  // Debug with PC
 8009372:	f001 fb37 	bl	800a9e4 <Configure_USART_1>
	sprintf(PrintBuf, "Hello");
 8009376:	4961      	ldr	r1, [pc, #388]	; (80094fc <main+0x1b8>)
 8009378:	4861      	ldr	r0, [pc, #388]	; (8009500 <main+0x1bc>)
	//CAN_mode();

	//Transmits a message over can
//clear state

	EPOS4_enable(CAN_ID);
 800937a:	4d62      	ldr	r5, [pc, #392]	; (8009504 <main+0x1c0>)
	// Data collection will resume after USB disconnect.
	// Only way to stop Data collection is by accessing SD card from PC LabVIEW program

	while (1) {

		if (isProcessKneeRequired) {
 800937c:	4f62      	ldr	r7, [pc, #392]	; (8009508 <main+0x1c4>)
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800937e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009528 <main+0x1e4>
	sprintf(PrintBuf, "Hello");
 8009382:	f003 fd0b 	bl	800cd9c <strcpy>
	USART1_wr_print(PrintBuf, sizeof(PrintBuf));
 8009386:	2132      	movs	r1, #50	; 0x32
 8009388:	485d      	ldr	r0, [pc, #372]	; (8009500 <main+0x1bc>)
 800938a:	f001 fb75 	bl	800aa78 <USART1_wr_print>
	systick_app_timer_module_init();
 800938e:	f002 fb65 	bl	800ba5c <systick_app_timer_module_init>
	mpu9255_init(10);
 8009392:	200a      	movs	r0, #10
 8009394:	f000 fab0 	bl	80098f8 <mpu9255_init>
	readTimer_event_handler();
 8009398:	f000 f9e6 	bl	8009768 <readTimer_event_handler>
	P_ADC_Sensor_GPIO_Init(); //ADC GPIOs //here we initialized the chip select pins as well
 800939c:	f001 f9ea 	bl	800a774 <P_ADC_Sensor_GPIO_Init>
	CAN_configure();
 80093a0:	f000 f9cc 	bl	800973c <CAN_configure>
	EPOS4_enable(CAN_ID);
 80093a4:	8828      	ldrh	r0, [r5, #0]
 80093a6:	f7fd ff04 	bl	80071b2 <EPOS4_enable>
	EPOS4_set_operation_mode(CAN_ID, 0x0A); // torque mode
 80093aa:	210a      	movs	r1, #10
 80093ac:	8828      	ldrh	r0, [r5, #0]
 80093ae:	f7fd fecb 	bl	8007148 <EPOS4_set_operation_mode>
	EPOS4_clear_errors(CAN_ID);
 80093b2:	8828      	ldrh	r0, [r5, #0]
 80093b4:	f7fd ff34 	bl	8007220 <EPOS4_clear_errors>
	delay_us(1500);
 80093b8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80093bc:	f002 fb6e 	bl	800ba9c <delay_us>
	EPOS4_enable(CAN_ID);
 80093c0:	8828      	ldrh	r0, [r5, #0]
		case Dormant_Idle_Stop: // Idle Lowest Power Stop Mode with no Data log (only wait for USB connectivity)

			EnterStop();   // Enter Stop Mode
			// Wake Up after STOP Mode only by USB EXTI Int

			if (USB_Present_ == 1) // After detecting USB attachment via EXTI_5 int
 80093c2:	4d52      	ldr	r5, [pc, #328]	; (800950c <main+0x1c8>)
	EPOS4_enable(CAN_ID);
 80093c4:	f7fd fef5 	bl	80071b2 <EPOS4_enable>
	USB_PA9_EXTI_conf(); // USB connectivity pin detect Interrupt // Data_Pause_Resume_PC0_EXTI_conf();
 80093c8:	f000 ffaa 	bl	800a320 <USB_PA9_EXTI_conf>
	Configure_LPTIM2_Int(); // Configured LPTIM2 but not started. To be started before going to Loop
 80093cc:	f002 fc18 	bl	800bc00 <Configure_LPTIM2_Int>
	Configure_Interrupt();       // Re-arrange NVIC interrupt priority
 80093d0:	f000 fc62 	bl	8009c98 <Configure_Interrupt>
	AIM_DataStart_at_Reset();
 80093d4:	f001 fe5a 	bl	800b08c <AIM_DataStart_at_Reset>
	GREEN_LED_ONLY();
 80093d8:	f7fe fa5e 	bl	8007898 <GREEN_LED_ONLY>
			isProcessKneeRequired = 0;
 80093dc:	2600      	movs	r6, #0
		if (isProcessKneeRequired) {
 80093de:	783b      	ldrb	r3, [r7, #0]
 80093e0:	b113      	cbz	r3, 80093e8 <main+0xa4>
			processKnee();
 80093e2:	f7ff fd1d 	bl	8008e20 <processKnee>
			isProcessKneeRequired = 0;
 80093e6:	703e      	strb	r6, [r7, #0]
		mpu9255_process();
 80093e8:	f000 fa5a 	bl	80098a0 <mpu9255_process>
		switch (Pros_state) {
 80093ec:	7823      	ldrb	r3, [r4, #0]
 80093ee:	3b01      	subs	r3, #1
 80093f0:	2b06      	cmp	r3, #6
 80093f2:	d8f4      	bhi.n	80093de <main+0x9a>
 80093f4:	a201      	add	r2, pc, #4	; (adr r2, 80093fc <main+0xb8>)
 80093f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fa:	bf00      	nop
 80093fc:	08009419 	.word	0x08009419
 8009400:	08009453 	.word	0x08009453
 8009404:	080093df 	.word	0x080093df
 8009408:	080094d9 	.word	0x080094d9
 800940c:	08009471 	.word	0x08009471
 8009410:	080094df 	.word	0x080094df
 8009414:	0800948d 	.word	0x0800948d
			EnterStop();   // Enter Stop Mode
 8009418:	f002 fb6c 	bl	800baf4 <EnterStop>
			if (USB_Present_ == 1) // After detecting USB attachment via EXTI_5 int
 800941c:	782b      	ldrb	r3, [r5, #0]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d104      	bne.n	800942c <main+0xe8>
					Pros_state = USB_MSC_VCP_Mode; // Next State USB_MSC_Mode Mode
 8009422:	2304      	movs	r3, #4
 8009424:	7023      	strb	r3, [r4, #0]
					USB_Present_ = 0;             // Reset Flag to avoid looping
 8009426:	2300      	movs	r3, #0
 8009428:	702b      	strb	r3, [r5, #0]
 800942a:	e7d7      	b.n	80093dc <main+0x98>
			} else if (FATAL_Error == 1)         // Triggered from Error_Handler
 800942c:	4b38      	ldr	r3, [pc, #224]	; (8009510 <main+0x1cc>)
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d105      	bne.n	8009440 <main+0xfc>
				FATAL_Error = 0;                  // Reset Flag to avoid looping
 8009434:	4b36      	ldr	r3, [pc, #216]	; (8009510 <main+0x1cc>)
 8009436:	2200      	movs	r2, #0
 8009438:	701a      	strb	r2, [r3, #0]
				Pros_state = Fatal_Error_State;  // Next State Fatal_Error_State
 800943a:	2307      	movs	r3, #7
				Pros_state = Dormant_Idle_Stop; // Stay Dormant Mode if no external events
 800943c:	7023      	strb	r3, [r4, #0]
 800943e:	e7cd      	b.n	80093dc <main+0x98>
			} else if (SD_write_Flag == 1) // When BUffer full to store in SD card
 8009440:	4b34      	ldr	r3, [pc, #208]	; (8009514 <main+0x1d0>)
 8009442:	781a      	ldrb	r2, [r3, #0]
 8009444:	2a01      	cmp	r2, #1
 8009446:	d111      	bne.n	800946c <main+0x128>
				Pros_state = Sensor_FATFS_Write; // Next State Sensor_FATFS_Write Mode
 8009448:	2202      	movs	r2, #2
 800944a:	7022      	strb	r2, [r4, #0]
				SD_write_Flag = 0;                // Reset Flag to avoid looping
 800944c:	2200      	movs	r2, #0
 800944e:	701a      	strb	r2, [r3, #0]
 8009450:	e7c4      	b.n	80093dc <main+0x98>
			Battery_ADC_Value = 2500;
 8009452:	4b31      	ldr	r3, [pc, #196]	; (8009518 <main+0x1d4>)
 8009454:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009458:	801a      	strh	r2, [r3, #0]
				SD_Sensor_write();             // Write Sensor Buffer to SD card
 800945a:	f001 fdd7 	bl	800b00c <SD_Sensor_write>
				if (USB_Present_ == 1) // If USB attachment detected here via EXTI_5 int
 800945e:	782b      	ldrb	r3, [r5, #0]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d0de      	beq.n	8009422 <main+0xde>
				} else if (FATAL_Error == 1)     // Triggered from Error_Handler
 8009464:	4b2a      	ldr	r3, [pc, #168]	; (8009510 <main+0x1cc>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d0e3      	beq.n	8009434 <main+0xf0>
				Pros_state = LP_STOP; // Return to Low Power Mode Data collection
 800946c:	2301      	movs	r3, #1
 800946e:	e7e5      	b.n	800943c <main+0xf8>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8009470:	4b2a      	ldr	r3, [pc, #168]	; (800951c <main+0x1d8>)
 8009472:	2204      	movs	r2, #4
 8009474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			ALL_LED_OFF();
 8009478:	f7fe fa00 	bl	800787c <ALL_LED_OFF>
			Shut_Down_SD();
 800947c:	f000 fe9e 	bl	800a1bc <Shut_Down_SD>
			Reset_Variables_for_LowBattery();
 8009480:	f000 fc92 	bl	8009da8 <Reset_Variables_for_LowBattery>
			Prepare_Goto_Dormant_Mode();
 8009484:	f000 fc86 	bl	8009d94 <Prepare_Goto_Dormant_Mode>
				Pros_state = Dormant_Idle_Stop; // Stay Dormant Mode if no external events
 8009488:	2306      	movs	r3, #6
 800948a:	e7d7      	b.n	800943c <main+0xf8>
			RED_LED_ONLY();
 800948c:	f7fe fa14 	bl	80078b8 <RED_LED_ONLY>
			FATFS_Logstart_Delete();
 8009490:	f000 fd46 	bl	8009f20 <FATFS_Logstart_Delete>
			Data_log_Start_Resume = 0;
 8009494:	4b22      	ldr	r3, [pc, #136]	; (8009520 <main+0x1dc>)
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_DisableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8009496:	4a23      	ldr	r2, [pc, #140]	; (8009524 <main+0x1e0>)
 8009498:	2600      	movs	r6, #0
 800949a:	701e      	strb	r6, [r3, #0]
			SD_write_Flag = 0;
 800949c:	4b1d      	ldr	r3, [pc, #116]	; (8009514 <main+0x1d0>)
 800949e:	701e      	strb	r6, [r3, #0]
 80094a0:	4b1e      	ldr	r3, [pc, #120]	; (800951c <main+0x1d8>)
 80094a2:	f04f 0904 	mov.w	r9, #4
 80094a6:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
 80094aa:	6893      	ldr	r3, [r2, #8]
 80094ac:	f023 0302 	bic.w	r3, r3, #2
 80094b0:	6093      	str	r3, [r2, #8]
			SD_POWER_OFF();
 80094b2:	f7fe fa3c 	bl	800792e <SD_POWER_OFF>
 80094b6:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80094ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094be:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
			EnterStop();   // Enter Stop Mode
 80094c2:	f002 fb17 	bl	800baf4 <EnterStop>
			if (USB_Present_ == 1) // After detecting USB attachment via EXTI_5 int
 80094c6:	782b      	ldrb	r3, [r5, #0]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d1dd      	bne.n	8009488 <main+0x144>
				Pros_state = USB_MSC_VCP_Mode;   // Next State USB_MSC_Mode Mode
 80094cc:	f884 9000 	strb.w	r9, [r4]
				USB_Present_ = 0;                 // Reset Flag to avoid looping
 80094d0:	702e      	strb	r6, [r5, #0]
					{
				Pros_state = USB_MSC_VCP_Mode;   // Next State USB_MSC_Mode Mode
				USB_Present_ = 0;                 // Reset Flag to avoid looping
				SD_POWER_ON();               				// Power on SD CARD
 80094d2:	f7fe fa2b 	bl	800792c <SD_POWER_ON>
 80094d6:	e781      	b.n	80093dc <main+0x98>
			USB_Init_Start(); // Initialize USB and Stay USB mode as long as USB cable connected
 80094d8:	f001 fd2a 	bl	800af30 <USB_Init_Start>
			break;
 80094dc:	e77e      	b.n	80093dc <main+0x98>
			EnterStop();   // Enter Stop Mode
 80094de:	f002 fb09 	bl	800baf4 <EnterStop>
			if (USB_Present_ == 1) // After detecting USB attachment via EXTI_5 int
 80094e2:	782b      	ldrb	r3, [r5, #0]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d1cf      	bne.n	8009488 <main+0x144>
				Pros_state = USB_MSC_VCP_Mode;   // Next State USB_MSC_Mode Mode
 80094e8:	2304      	movs	r3, #4
 80094ea:	7023      	strb	r3, [r4, #0]
				USB_Present_ = 0;                 // Reset Flag to avoid looping
 80094ec:	2300      	movs	r3, #0
 80094ee:	702b      	strb	r3, [r5, #0]
 80094f0:	e7ef      	b.n	80094d2 <main+0x18e>
 80094f2:	bf00      	nop
 80094f4:	20008988 	.word	0x20008988
 80094f8:	40002800 	.word	0x40002800
 80094fc:	0800eae6 	.word	0x0800eae6
 8009500:	20008cac 	.word	0x20008cac
 8009504:	200000f0 	.word	0x200000f0
 8009508:	20000635 	.word	0x20000635
 800950c:	20000634 	.word	0x20000634
 8009510:	2000b45c 	.word	0x2000b45c
 8009514:	20008a4c 	.word	0x20008a4c
 8009518:	2000b438 	.word	0x2000b438
 800951c:	e000e100 	.word	0xe000e100
 8009520:	20008a45 	.word	0x20008a45
 8009524:	40009400 	.word	0x40009400
 8009528:	40021000 	.word	0x40021000

0800952c <LPTIM2_IRQHandler>:
  return (READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == (LPTIM_ISR_ARRM));
 800952c:	4b05      	ldr	r3, [pc, #20]	; (8009544 <LPTIM2_IRQHandler+0x18>)
 800952e:	681a      	ldr	r2, [r3, #0]
}


void LPTIM2_IRQHandler(void)   // Response of 10ms LPTIM interrupt
{
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)    // auto reload match interrupt has occured
 8009530:	0792      	lsls	r2, r2, #30
 8009532:	d506      	bpl.n	8009542 <LPTIM2_IRQHandler+0x16>
	{
		isProcessKneeRequired = 1;
 8009534:	4a04      	ldr	r2, [pc, #16]	; (8009548 <LPTIM2_IRQHandler+0x1c>)
 8009536:	2101      	movs	r1, #1
 8009538:	7011      	strb	r1, [r2, #0]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 800953a:	685a      	ldr	r2, [r3, #4]
 800953c:	f042 0202 	orr.w	r2, r2, #2
 8009540:	605a      	str	r2, [r3, #4]
 8009542:	4770      	bx	lr
 8009544:	40009400 	.word	0x40009400
 8009548:	20000635 	.word	0x20000635

0800954c <EXTI9_5_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine));
 800954c:	4b05      	ldr	r3, [pc, #20]	; (8009564 <EXTI9_5_IRQHandler+0x18>)
 800954e:	695a      	ldr	r2, [r3, #20]
}


void EXTI9_5_IRQHandler(void)    // Interrupt from USB connectivity PIN PA9
{
	if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8009550:	0592      	lsls	r2, r2, #22
 8009552:	d505      	bpl.n	8009560 <EXTI9_5_IRQHandler+0x14>
	{
		USB_Present_=1;                            // USB present
 8009554:	4a04      	ldr	r2, [pc, #16]	; (8009568 <EXTI9_5_IRQHandler+0x1c>)
 8009556:	2101      	movs	r1, #1
 8009558:	7011      	strb	r1, [r2, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800955a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800955e:	615a      	str	r2, [r3, #20]
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	40010400 	.word	0x40010400
 8009568:	20000634 	.word	0x20000634

0800956c <mcp25625_reset>:
 800956c:	4b0b      	ldr	r3, [pc, #44]	; (800959c <mcp25625_reset+0x30>)
 800956e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009572:	629a      	str	r2, [r3, #40]	; 0x28
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8009574:	4a0a      	ldr	r2, [pc, #40]	; (80095a0 <mcp25625_reset+0x34>)
 8009576:	21c0      	movs	r1, #192	; 0xc0
 8009578:	7311      	strb	r1, [r2, #12]
	setChipSelect();
	LL_SPI_TransmitData8(SPI2, CMD_RESET);
	//while (!(SPI2->SR & SPI_SR_RXNE)) {} ;
	// wait for completion

	while ((SPI2->SR & SPI_SR_BSY)) {	}; 	// no longer busy
 800957a:	6891      	ldr	r1, [r2, #8]
 800957c:	0609      	lsls	r1, r1, #24
 800957e:	d4fc      	bmi.n	800957a <mcp25625_reset+0xe>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009580:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009584:	619a      	str	r2, [r3, #24]
	clearChipSelect();

	// clear receive fifo
	while ((SPI2->SR & SPI_SR_FRLVL)) {
 8009586:	4b06      	ldr	r3, [pc, #24]	; (80095a0 <mcp25625_reset+0x34>)
 8009588:	689a      	ldr	r2, [r3, #8]
 800958a:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 800958e:	d102      	bne.n	8009596 <mcp25625_reset+0x2a>
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
		(void)dummy;						// suppress unused variable warning
	};

	// reset requires a delay of 128 OSC1 clock cycles. That equals 12.8us.
	delay_us(50);
 8009590:	2032      	movs	r0, #50	; 0x32
 8009592:	f002 ba83 	b.w	800ba9c <delay_us>
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 8009596:	68da      	ldr	r2, [r3, #12]
 8009598:	e7f6      	b.n	8009588 <mcp25625_reset+0x1c>
 800959a:	bf00      	nop
 800959c:	48000400 	.word	0x48000400
 80095a0:	40003800 	.word	0x40003800

080095a4 <mcp25625_writeRegister>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80095a4:	4b0d      	ldr	r3, [pc, #52]	; (80095dc <mcp25625_writeRegister+0x38>)
 80095a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80095aa:	629a      	str	r2, [r3, #40]	; 0x28
 80095ac:	4b0c      	ldr	r3, [pc, #48]	; (80095e0 <mcp25625_writeRegister+0x3c>)
 80095ae:	2202      	movs	r2, #2
 80095b0:	731a      	strb	r2, [r3, #12]
 80095b2:	7318      	strb	r0, [r3, #12]
 80095b4:	7319      	strb	r1, [r3, #12]
	LL_SPI_TransmitData8(SPI2, CMD_WRITE);
	LL_SPI_TransmitData8(SPI2, reg);
	LL_SPI_TransmitData8(SPI2, value);

	// wait for completion
	while ((SPI2->SR & SPI_SR_FTLVL)) {	}; 	//transmit fifo empty?
 80095b6:	689a      	ldr	r2, [r3, #8]
 80095b8:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 80095bc:	d1fb      	bne.n	80095b6 <mcp25625_writeRegister+0x12>
	while ((SPI2->SR & SPI_SR_BSY)) {	}; 	// no longer busy
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	0612      	lsls	r2, r2, #24
 80095c2:	d4fc      	bmi.n	80095be <mcp25625_writeRegister+0x1a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80095c4:	4b05      	ldr	r3, [pc, #20]	; (80095dc <mcp25625_writeRegister+0x38>)
 80095c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80095ca:	619a      	str	r2, [r3, #24]
	clearChipSelect();

	// clear receive fifo
	while ((SPI2->SR & SPI_SR_FRLVL)) {
 80095cc:	4b04      	ldr	r3, [pc, #16]	; (80095e0 <mcp25625_writeRegister+0x3c>)
 80095ce:	689a      	ldr	r2, [r3, #8]
 80095d0:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 80095d4:	d100      	bne.n	80095d8 <mcp25625_writeRegister+0x34>
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
		(void)dummy;						// suppress unused variable warning
	};


}
 80095d6:	4770      	bx	lr
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 80095d8:	68da      	ldr	r2, [r3, #12]
 80095da:	e7f8      	b.n	80095ce <mcp25625_writeRegister+0x2a>
 80095dc:	48000400 	.word	0x48000400
 80095e0:	40003800 	.word	0x40003800

080095e4 <mcp25625_readRegister>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80095e4:	4b0c      	ldr	r3, [pc, #48]	; (8009618 <mcp25625_readRegister+0x34>)
 80095e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80095ea:	629a      	str	r2, [r3, #40]	; 0x28
 80095ec:	4b0b      	ldr	r3, [pc, #44]	; (800961c <mcp25625_readRegister+0x38>)
 80095ee:	2203      	movs	r2, #3
 80095f0:	731a      	strb	r2, [r3, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	7318      	strb	r0, [r3, #12]
 80095f6:	731a      	strb	r2, [r3, #12]
	LL_SPI_TransmitData8(SPI2, CMD_READ);
	LL_SPI_TransmitData8(SPI2, reg);
	LL_SPI_TransmitData8(SPI2, 0x00); 		// dummy value to transfer the response

	// wait for completion
	while ((SPI2->SR & SPI_SR_FTLVL)) {	}; 	//transmit fifo empty?
 80095f8:	689a      	ldr	r2, [r3, #8]
 80095fa:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 80095fe:	d1fb      	bne.n	80095f8 <mcp25625_readRegister+0x14>
	while ((SPI2->SR & SPI_SR_BSY)) {	}; 	// no longer busy
 8009600:	689a      	ldr	r2, [r3, #8]
 8009602:	0612      	lsls	r2, r2, #24
 8009604:	d4fc      	bmi.n	8009600 <mcp25625_readRegister+0x1c>
	uint8_t dummy = SPI2->DR; 				// first byte is from cmd transfer
 8009606:	68da      	ldr	r2, [r3, #12]
	dummy = SPI2->DR;						// second byte is from address
 8009608:	68da      	ldr	r2, [r3, #12]
	result = SPI2->DR;						// actual result value
 800960a:	68d8      	ldr	r0, [r3, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800960c:	4b02      	ldr	r3, [pc, #8]	; (8009618 <mcp25625_readRegister+0x34>)
 800960e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009612:	619a      	str	r2, [r3, #24]

	clearChipSelect();

	(void)dummy;						// suppress unused variable warning
	return result;
}
 8009614:	b2c0      	uxtb	r0, r0
 8009616:	4770      	bx	lr
 8009618:	48000400 	.word	0x48000400
 800961c:	40003800 	.word	0x40003800

08009620 <mcp25625_loadTXB>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8009620:	4b12      	ldr	r3, [pc, #72]	; (800966c <mcp25625_loadTXB+0x4c>)

void mcp25625_loadTXB(uint8_t reg, uint8_t length, uint8_t * data) {
 8009622:	b510      	push	{r4, lr}
 8009624:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8009628:	629c      	str	r4, [r3, #40]	; 0x28
 800962a:	4b11      	ldr	r3, [pc, #68]	; (8009670 <mcp25625_loadTXB+0x50>)

	setChipSelect();

	LL_SPI_TransmitData8(SPI2, reg);
	for ( uint8_t i = 0; i < length; i++) {
 800962c:	4614      	mov	r4, r2
 800962e:	7318      	strb	r0, [r3, #12]
 8009630:	1aa0      	subs	r0, r4, r2
 8009632:	b2c0      	uxtb	r0, r0
 8009634:	4281      	cmp	r1, r0
 8009636:	d810      	bhi.n	800965a <mcp25625_loadTXB+0x3a>
		while (!(SPI2->SR & SPI_SR_TXE)) {};
		LL_SPI_TransmitData8(SPI2, data[i]);
	}

	// wait for completion
	while ((SPI2->SR & SPI_SR_FTLVL)) {	}; 	//transmit fifo empty?
 8009638:	689a      	ldr	r2, [r3, #8]
 800963a:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 800963e:	d1fb      	bne.n	8009638 <mcp25625_loadTXB+0x18>
	while ((SPI2->SR & SPI_SR_BSY)) {	}; 	// no longer busy
 8009640:	689a      	ldr	r2, [r3, #8]
 8009642:	0612      	lsls	r2, r2, #24
 8009644:	d4fc      	bmi.n	8009640 <mcp25625_loadTXB+0x20>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009646:	4b09      	ldr	r3, [pc, #36]	; (800966c <mcp25625_loadTXB+0x4c>)
 8009648:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800964c:	619a      	str	r2, [r3, #24]
	clearChipSelect();

	// clear receive fifo
	while ((SPI2->SR & SPI_SR_FRLVL)) {
 800964e:	4b08      	ldr	r3, [pc, #32]	; (8009670 <mcp25625_loadTXB+0x50>)
 8009650:	689a      	ldr	r2, [r3, #8]
 8009652:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 8009656:	d107      	bne.n	8009668 <mcp25625_loadTXB+0x48>
		(void)dummy;						// suppress unused variable warning
	};



}
 8009658:	bd10      	pop	{r4, pc}
		while (!(SPI2->SR & SPI_SR_TXE)) {};
 800965a:	6898      	ldr	r0, [r3, #8]
 800965c:	0780      	lsls	r0, r0, #30
 800965e:	d5fc      	bpl.n	800965a <mcp25625_loadTXB+0x3a>
		LL_SPI_TransmitData8(SPI2, data[i]);
 8009660:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009664:	7318      	strb	r0, [r3, #12]
 8009666:	e7e3      	b.n	8009630 <mcp25625_loadTXB+0x10>
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 8009668:	68da      	ldr	r2, [r3, #12]
 800966a:	e7f1      	b.n	8009650 <mcp25625_loadTXB+0x30>
 800966c:	48000400 	.word	0x48000400
 8009670:	40003800 	.word	0x40003800

08009674 <mcp25625_sendCAN>:

/*
 * This must respect the TXB Control registers. Read it first!
 * By default, higher number buffer registers have higher priority.
 */
void mcp25625_sendCAN(txbuff_t * buffer) {
 8009674:	4601      	mov	r1, r0
 8009676:	b508      	push	{r3, lr}
	return (txb_ctrl_t)mcp25625_readRegister(TXB2CTRL);
 8009678:	2050      	movs	r0, #80	; 0x50
 800967a:	f7ff ffb3 	bl	80095e4 <mcp25625_readRegister>

	txb_ctrl_t txb;

	txb = getTXB2CTRL();
	// check if already sending
	if (!txb.bits.TXREQ) {
 800967e:	06c0      	lsls	r0, r0, #27
 8009680:	d40a      	bmi.n	8009698 <mcp25625_sendCAN+0x24>
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB2_SIDH), 13, data);
 8009682:	460a      	mov	r2, r1
 8009684:	2044      	movs	r0, #68	; 0x44
 8009686:	210d      	movs	r1, #13
 8009688:	f7ff ffca 	bl	8009620 <mcp25625_loadTXB>
	mcp25625_writeRegister(TXB2CTRL, TXBCTRL_TXREQ);
 800968c:	210b      	movs	r1, #11
 800968e:	2050      	movs	r0, #80	; 0x50
		// not sending, can load txb buffer
		loadTXB0(buffer->bytes);
		setTXREQ0();
		return; // once tx buffer is loaded, return
	}
}
 8009690:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mcp25625_writeRegister(TXB0CTRL, TXBCTRL_TXREQ);
 8009694:	f7ff bf86 	b.w	80095a4 <mcp25625_writeRegister>
	return (txb_ctrl_t)mcp25625_readRegister(TXB1CTRL);
 8009698:	2040      	movs	r0, #64	; 0x40
 800969a:	f7ff ffa3 	bl	80095e4 <mcp25625_readRegister>
	if (!txb.bits.TXREQ) {
 800969e:	06c2      	lsls	r2, r0, #27
 80096a0:	d407      	bmi.n	80096b2 <mcp25625_sendCAN+0x3e>
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB1_SIDH), 13, data);
 80096a2:	460a      	mov	r2, r1
 80096a4:	2042      	movs	r0, #66	; 0x42
 80096a6:	210d      	movs	r1, #13
 80096a8:	f7ff ffba 	bl	8009620 <mcp25625_loadTXB>
	mcp25625_writeRegister(TXB1CTRL, TXBCTRL_TXREQ);
 80096ac:	210b      	movs	r1, #11
 80096ae:	2040      	movs	r0, #64	; 0x40
 80096b0:	e7ee      	b.n	8009690 <mcp25625_sendCAN+0x1c>
	return (txb_ctrl_t)mcp25625_readRegister(TXB0CTRL);
 80096b2:	2030      	movs	r0, #48	; 0x30
 80096b4:	f7ff ff96 	bl	80095e4 <mcp25625_readRegister>
	if (!txb.bits.TXREQ) {
 80096b8:	06c3      	lsls	r3, r0, #27
 80096ba:	d407      	bmi.n	80096cc <mcp25625_sendCAN+0x58>
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB0_SIDH), 13, data);
 80096bc:	460a      	mov	r2, r1
 80096be:	2040      	movs	r0, #64	; 0x40
 80096c0:	210d      	movs	r1, #13
 80096c2:	f7ff ffad 	bl	8009620 <mcp25625_loadTXB>
	mcp25625_writeRegister(TXB0CTRL, TXBCTRL_TXREQ);
 80096c6:	210b      	movs	r1, #11
 80096c8:	2030      	movs	r0, #48	; 0x30
 80096ca:	e7e1      	b.n	8009690 <mcp25625_sendCAN+0x1c>
 80096cc:	bd08      	pop	{r3, pc}

080096ce <CAN_transmit>:

/*
 * callable entry function
 * IN: ID, length of message, pointer to message
 */
void CAN_transmit(uint16_t CAN_ID, uint8_t length, uint8_t * message) {
 80096ce:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80096d0:	4604      	mov	r4, r0
 80096d2:	460d      	mov	r5, r1
 80096d4:	4616      	mov	r6, r2
	txbuff_t t;
	memset(&t, 0, sizeof(t));
 80096d6:	2100      	movs	r1, #0
 80096d8:	220d      	movs	r2, #13
 80096da:	4668      	mov	r0, sp
 80096dc:	f003 fa6e 	bl	800cbbc <memset>

	t.txb.SIDH = CAN_ID >> 3;
 80096e0:	08e3      	lsrs	r3, r4, #3
	t.txb.SIDL.value = (CAN_ID & 0x07) << 5;
 80096e2:	0164      	lsls	r4, r4, #5
	t.txb.SIDH = CAN_ID >> 3;
 80096e4:	f88d 3000 	strb.w	r3, [sp]
	t.txb.SIDL.value = (CAN_ID & 0x07) << 5;
 80096e8:	f88d 4001 	strb.w	r4, [sp, #1]
	t.txb.DLC.value = length;
 80096ec:	f88d 5004 	strb.w	r5, [sp, #4]
	for (uint8_t i = 0; i < length; i++) {
 80096f0:	2300      	movs	r3, #0
 80096f2:	b2da      	uxtb	r2, r3
 80096f4:	4295      	cmp	r5, r2
 80096f6:	d804      	bhi.n	8009702 <CAN_transmit+0x34>
		t.txb.data[i] = message[i];
	}

	mcp25625_sendCAN(&t);
 80096f8:	4668      	mov	r0, sp
 80096fa:	f7ff ffbb 	bl	8009674 <mcp25625_sendCAN>
}
 80096fe:	b004      	add	sp, #16
 8009700:	bd70      	pop	{r4, r5, r6, pc}
		t.txb.data[i] = message[i];
 8009702:	eb0d 0203 	add.w	r2, sp, r3
 8009706:	5cf1      	ldrb	r1, [r6, r3]
 8009708:	7151      	strb	r1, [r2, #5]
 800970a:	3301      	adds	r3, #1
 800970c:	e7f1      	b.n	80096f2 <CAN_transmit+0x24>
	...

08009710 <mcp25625_init>:

void mcp25625_init(void) {
 8009710:	b508      	push	{r3, lr}
	memset(&can_tranceiver, 0, sizeof(can_tranceiver));
 8009712:	f240 2276 	movw	r2, #630	; 0x276
 8009716:	2100      	movs	r1, #0
 8009718:	4806      	ldr	r0, [pc, #24]	; (8009734 <mcp25625_init+0x24>)
 800971a:	f003 fa4f 	bl	800cbbc <memset>
	spi2_init();
 800971e:	f001 ffef 	bl	800b700 <spi2_init>
 8009722:	4b05      	ldr	r3, [pc, #20]	; (8009738 <mcp25625_init+0x28>)
 8009724:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009728:	619a      	str	r2, [r3, #24]
	clearChipSelect();
	mcp25625_reset();

}
 800972a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mcp25625_reset();
 800972e:	f7ff bf1d 	b.w	800956c <mcp25625_reset>
 8009732:	bf00      	nop
 8009734:	20000637 	.word	0x20000637
 8009738:	48000400 	.word	0x48000400

0800973c <CAN_configure>:

void CAN_configure() {
 800973c:	b508      	push	{r3, lr}
	c1.value = 0xC0;
	c2.value = 0x89;
	c3.value = 0x04;
	canctrl.value = 0x08;

	mcp25625_init();
 800973e:	f7ff ffe7 	bl	8009710 <mcp25625_init>

	mcp25625_writeRegister(CNF1, c1.value);
 8009742:	21c0      	movs	r1, #192	; 0xc0
 8009744:	202a      	movs	r0, #42	; 0x2a
 8009746:	f7ff ff2d 	bl	80095a4 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF2, c2.value);
 800974a:	2189      	movs	r1, #137	; 0x89
 800974c:	2029      	movs	r0, #41	; 0x29
 800974e:	f7ff ff29 	bl	80095a4 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF3, c3.value);
 8009752:	2104      	movs	r1, #4
 8009754:	2028      	movs	r0, #40	; 0x28
 8009756:	f7ff ff25 	bl	80095a4 <mcp25625_writeRegister>
	mcp25625_writeRegister(CANCTRL, canctrl.value);
 800975a:	2108      	movs	r1, #8
 800975c:	200f      	movs	r0, #15

}
 800975e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mcp25625_writeRegister(CANCTRL, canctrl.value);
 8009762:	f7ff bf1f 	b.w	80095a4 <mcp25625_writeRegister>
	...

08009768 <readTimer_event_handler>:

/*
 * Process reading the fifo from the mpu9255
 */
void readTimer_event_handler() {
	updateRequired = true;
 8009768:	4b01      	ldr	r3, [pc, #4]	; (8009770 <readTimer_event_handler+0x8>)
 800976a:	2201      	movs	r2, #1
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	4770      	bx	lr
 8009770:	200008e0 	.word	0x200008e0

08009774 <android_orient_cb>:
}

void android_orient_cb(unsigned char orientation) {
 8009774:	4770      	bx	lr

08009776 <tap_cb>:
	// do nothing, not used.
}
void tap_cb(unsigned char direction, unsigned char count) {
 8009776:	4770      	bx	lr

08009778 <delaytimer_event_handler>:
	g_ul_ms_ticks++;
 8009778:	4a05      	ldr	r2, [pc, #20]	; (8009790 <delaytimer_event_handler+0x18>)
 800977a:	6813      	ldr	r3, [r2, #0]
 800977c:	3301      	adds	r3, #1
 800977e:	6013      	str	r3, [r2, #0]
	if (ms_delay) {
 8009780:	4b04      	ldr	r3, [pc, #16]	; (8009794 <delaytimer_event_handler+0x1c>)
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	b112      	cbz	r2, 800978c <delaytimer_event_handler+0x14>
		ms_delay--;
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	3a01      	subs	r2, #1
 800978a:	601a      	str	r2, [r3, #0]
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	200008c4 	.word	0x200008c4
 8009794:	200008c8 	.word	0x200008c8

08009798 <inv_row_2_scale>:

static  unsigned short inv_row_2_scale(const signed char *row)
{
    unsigned short b;

    if (row[0] > 0)
 8009798:	f990 3000 	ldrsb.w	r3, [r0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	dc0c      	bgt.n	80097ba <inv_row_2_scale+0x22>
        b = 0;
    else if (row[0] < 0)
 80097a0:	d10d      	bne.n	80097be <inv_row_2_scale+0x26>
        b = 4;
    else if (row[1] > 0)
 80097a2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	dc0b      	bgt.n	80097c2 <inv_row_2_scale+0x2a>
        b = 1;
    else if (row[1] < 0)
 80097aa:	d10c      	bne.n	80097c6 <inv_row_2_scale+0x2e>
        b = 5;
    else if (row[2] > 0)
 80097ac:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	dc0a      	bgt.n	80097ca <inv_row_2_scale+0x32>
        b = 2;
    else if (row[2] < 0)
 80097b4:	d10b      	bne.n	80097ce <inv_row_2_scale+0x36>
        b = 6;
    else
        b = 7;      // error
 80097b6:	2007      	movs	r0, #7
 80097b8:	4770      	bx	lr
        b = 0;
 80097ba:	2000      	movs	r0, #0
 80097bc:	4770      	bx	lr
        b = 4;
 80097be:	2004      	movs	r0, #4
 80097c0:	4770      	bx	lr
        b = 1;
 80097c2:	2001      	movs	r0, #1
 80097c4:	4770      	bx	lr
        b = 5;
 80097c6:	2005      	movs	r0, #5
 80097c8:	4770      	bx	lr
        b = 2;
 80097ca:	2002      	movs	r0, #2
 80097cc:	4770      	bx	lr
        b = 6;
 80097ce:	2006      	movs	r0, #6
    return b;
}
 80097d0:	4770      	bx	lr
	...

080097d4 <mpu9255_write>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80097d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
     unsigned char length, unsigned char const *data) {
 80097d8:	b510      	push	{r4, lr}
 80097da:	f44f 7480 	mov.w	r4, #256	; 0x100
 80097de:	6284      	str	r4, [r0, #40]	; 0x28
 80097e0:	4811      	ldr	r0, [pc, #68]	; (8009828 <mpu9255_write+0x54>)
	for (uint8_t i = 0; i < length; i++) {
 80097e2:	461c      	mov	r4, r3
 80097e4:	7301      	strb	r1, [r0, #12]
 80097e6:	4601      	mov	r1, r0
 80097e8:	1ae0      	subs	r0, r4, r3
 80097ea:	b2c0      	uxtb	r0, r0
 80097ec:	4282      	cmp	r2, r0
 80097ee:	d811      	bhi.n	8009814 <mpu9255_write+0x40>
	while ((SPI1->SR & SPI_SR_FTLVL)) {
 80097f0:	688b      	ldr	r3, [r1, #8]
 80097f2:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 80097f6:	d1fb      	bne.n	80097f0 <mpu9255_write+0x1c>
	while ((SPI1->SR & SPI_SR_BSY)) {
 80097f8:	688b      	ldr	r3, [r1, #8]
 80097fa:	061b      	lsls	r3, r3, #24
 80097fc:	d4fc      	bmi.n	80097f8 <mpu9255_write+0x24>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80097fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009806:	619a      	str	r2, [r3, #24]
	while ((SPI1->SR & SPI_SR_FRLVL)) {
 8009808:	4b07      	ldr	r3, [pc, #28]	; (8009828 <mpu9255_write+0x54>)
 800980a:	6898      	ldr	r0, [r3, #8]
 800980c:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 8009810:	d107      	bne.n	8009822 <mpu9255_write+0x4e>
}
 8009812:	bd10      	pop	{r4, pc}
		while (!(SPI1->SR & SPI_SR_TXE)) {
 8009814:	6888      	ldr	r0, [r1, #8]
 8009816:	0780      	lsls	r0, r0, #30
 8009818:	d5fc      	bpl.n	8009814 <mpu9255_write+0x40>
		LL_SPI_TransmitData8(SPI1, data[i]);
 800981a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800981e:	7308      	strb	r0, [r1, #12]
 8009820:	e7e2      	b.n	80097e8 <mpu9255_write+0x14>
		uint8_t dummy = SPI1->DR; 			// clear rx fifo from the receives.
 8009822:	68da      	ldr	r2, [r3, #12]
 8009824:	e7f1      	b.n	800980a <mpu9255_write+0x36>
 8009826:	bf00      	nop
 8009828:	40013000 	.word	0x40013000

0800982c <mpu9255_read>:
  WRITE_REG(GPIOx->BRR, PinMask);
 800982c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
      unsigned char length, unsigned char *data) {
 8009830:	b530      	push	{r4, r5, lr}
 8009832:	f44f 7480 	mov.w	r4, #256	; 0x100
 8009836:	6284      	str	r4, [r0, #40]	; 0x28
	LL_SPI_TransmitData8(SPI1, (reg_addr | 0x80)); // MSb set signals read.
 8009838:	f041 0080 	orr.w	r0, r1, #128	; 0x80
 800983c:	4910      	ldr	r1, [pc, #64]	; (8009880 <mpu9255_read+0x54>)
 800983e:	7308      	strb	r0, [r1, #12]
	while ((SPI1->SR & SPI_SR_FRLVL) == 0) {}; 	//wait for SR buffer to have data
 8009840:	6888      	ldr	r0, [r1, #8]
 8009842:	f410 6fc0 	tst.w	r0, #1536	; 0x600
 8009846:	d0fb      	beq.n	8009840 <mpu9255_read+0x14>
	uint8_t dummy = SPI1->DR; 				// first byte is from cmd transfer. Ignore
 8009848:	68c9      	ldr	r1, [r1, #12]
 800984a:	490d      	ldr	r1, [pc, #52]	; (8009880 <mpu9255_read+0x54>)
	for (uint8_t i = 0; i < length; i++) {
 800984c:	461c      	mov	r4, r3
 800984e:	25ff      	movs	r5, #255	; 0xff
 8009850:	1ae0      	subs	r0, r4, r3
 8009852:	b2c0      	uxtb	r0, r0
 8009854:	4282      	cmp	r2, r0
 8009856:	d809      	bhi.n	800986c <mpu9255_read+0x40>
	while ((SPI1->SR & SPI_SR_BSY)) {
 8009858:	6888      	ldr	r0, [r1, #8]
 800985a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800985e:	d1fb      	bne.n	8009858 <mpu9255_read+0x2c>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009860:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009868:	619a      	str	r2, [r3, #24]
}
 800986a:	bd30      	pop	{r4, r5, pc}
 800986c:	730d      	strb	r5, [r1, #12]
		while ((SPI1->SR & SPI_SR_FRLVL) == 0) {}; // wait for SR buffer to have data
 800986e:	6888      	ldr	r0, [r1, #8]
 8009870:	f410 6fc0 	tst.w	r0, #1536	; 0x600
 8009874:	d0fb      	beq.n	800986e <mpu9255_read+0x42>
		data[i] = SPI1->DR;
 8009876:	68c8      	ldr	r0, [r1, #12]
 8009878:	f804 0b01 	strb.w	r0, [r4], #1
 800987c:	e7e8      	b.n	8009850 <mpu9255_read+0x24>
 800987e:	bf00      	nop
 8009880:	40013000 	.word	0x40013000

08009884 <mpu9255_delay_ms>:
	ms_delay = num_ms;
 8009884:	4b02      	ldr	r3, [pc, #8]	; (8009890 <mpu9255_delay_ms+0xc>)
 8009886:	6018      	str	r0, [r3, #0]
	while (ms_delay > 0) {
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	2a00      	cmp	r2, #0
 800988c:	d1fc      	bne.n	8009888 <mpu9255_delay_ms+0x4>
}
 800988e:	4770      	bx	lr
 8009890:	200008c8 	.word	0x200008c8

08009894 <mpu9255_get_ms>:
	*count = g_ul_ms_ticks;
 8009894:	4b01      	ldr	r3, [pc, #4]	; (800989c <mpu9255_get_ms+0x8>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6003      	str	r3, [r0, #0]
 800989a:	4770      	bx	lr
 800989c:	200008c4 	.word	0x200008c4

080098a0 <mpu9255_process>:
#else
	return &dmpData;
#endif
}

void mpu9255_process() {
 80098a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (updateRequired) {
 80098a2:	4d12      	ldr	r5, [pc, #72]	; (80098ec <mpu9255_process+0x4c>)
 80098a4:	682b      	ldr	r3, [r5, #0]
void mpu9255_process() {
 80098a6:	b085      	sub	sp, #20
	if (updateRequired) {
 80098a8:	b1f3      	cbz	r3, 80098e8 <mpu9255_process+0x48>

		unsigned char more;


#if DEBUG_DMP
		dmp_read_fifo(dmpData[writeIndex].gyro.array, dmpData[writeIndex].acceleration.array, dmpData[writeIndex].quaternarion.array, &dmpData[writeIndex].timestamp, &dmpData[writeIndex].sensors, &more);
 80098aa:	4c11      	ldr	r4, [pc, #68]	; (80098f0 <mpu9255_process+0x50>)
 80098ac:	4811      	ldr	r0, [pc, #68]	; (80098f4 <mpu9255_process+0x54>)
 80098ae:	7821      	ldrb	r1, [r4, #0]
 80098b0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80098b4:	0089      	lsls	r1, r1, #2
 80098b6:	f10d 060f 	add.w	r6, sp, #15
 80098ba:	9601      	str	r6, [sp, #4]
 80098bc:	f101 0620 	add.w	r6, r1, #32
 80098c0:	f101 031c 	add.w	r3, r1, #28
 80098c4:	f101 020c 	add.w	r2, r1, #12
 80098c8:	1d8f      	adds	r7, r1, #6
 80098ca:	4406      	add	r6, r0
 80098cc:	4403      	add	r3, r0
 80098ce:	4402      	add	r2, r0
 80098d0:	4401      	add	r1, r0
 80098d2:	9600      	str	r6, [sp, #0]
 80098d4:	4438      	add	r0, r7
 80098d6:	f7ff f9ef 	bl	8008cb8 <dmp_read_fifo>

		writeIndex++;
 80098da:	7823      	ldrb	r3, [r4, #0]
 80098dc:	3301      	adds	r3, #1
 80098de:	7023      	strb	r3, [r4, #0]
#else
		dmp_read_fifo(dmpData.gyro.array, dmpData.acceleration.array, dmpData.quaternarion.array, &dmpData.timestamp, &dmpData.sensors, &more);

#endif
		if (!more) {
 80098e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80098e4:	b903      	cbnz	r3, 80098e8 <mpu9255_process+0x48>
			updateRequired = false;
 80098e6:	602b      	str	r3, [r5, #0]
		}


	}
}
 80098e8:	b005      	add	sp, #20
 80098ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ec:	200008e0 	.word	0x200008e0
 80098f0:	200008e4 	.word	0x200008e4
 80098f4:	20008ce0 	.word	0x20008ce0

080098f8 <mpu9255_init>:

void mpu9255_init(uint32_t readPeriod) {
 80098f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098fa:	b087      	sub	sp, #28
 80098fc:	4607      	mov	r7, r0
	spi1_init();
 80098fe:	f001 fe87 	bl	800b610 <spi1_init>
 8009902:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
	clearChipSelect();
	uint8_t whoami;
	mpu9255_read(0, 0x75, 1, &whoami);
	delayTimer.mode = APP_TIMER_MODE_CONTINUOUS;
 8009906:	4c2f      	ldr	r4, [pc, #188]	; (80099c4 <mpu9255_init+0xcc>)
 8009908:	f44f 7280 	mov.w	r2, #256	; 0x100
	mpu9255_read(0, 0x75, 1, &whoami);
 800990c:	2175      	movs	r1, #117	; 0x75
 800990e:	619a      	str	r2, [r3, #24]
 8009910:	2000      	movs	r0, #0
 8009912:	2201      	movs	r2, #1
 8009914:	f10d 0307 	add.w	r3, sp, #7
 8009918:	f7ff ff88 	bl	800982c <mpu9255_read>
	delayTimer.mode = APP_TIMER_MODE_CONTINUOUS;
 800991c:	2500      	movs	r5, #0
	delayTimer.alarm = 1; // 1ms
	delayTimer.timerAlarmCallback = delaytimer_event_handler;
 800991e:	4b2a      	ldr	r3, [pc, #168]	; (80099c8 <mpu9255_init+0xd0>)
 8009920:	6123      	str	r3, [r4, #16]
	delayTimer.alarm = 1; // 1ms
 8009922:	2601      	movs	r6, #1
	systick_app_timer_channel_create(&delayTimer);
 8009924:	4620      	mov	r0, r4
	delayTimer.mode = APP_TIMER_MODE_CONTINUOUS;
 8009926:	7225      	strb	r5, [r4, #8]
	delayTimer.alarm = 1; // 1ms
 8009928:	60e6      	str	r6, [r4, #12]
	systick_app_timer_channel_create(&delayTimer);
 800992a:	f002 f87b 	bl	800ba24 <systick_app_timer_channel_create>
	systick_app_timer_channel_start(delayTimer.channel);
 800992e:	7820      	ldrb	r0, [r4, #0]

	readTimer.mode = APP_TIMER_MODE_CONTINUOUS;
 8009930:	4c26      	ldr	r4, [pc, #152]	; (80099cc <mpu9255_init+0xd4>)
	systick_app_timer_channel_start(delayTimer.channel);
 8009932:	f002 f861 	bl	800b9f8 <systick_app_timer_channel_start>
	readTimer.alarm = readPeriod; // 1ms
	readTimer.timerAlarmCallback = readTimer_event_handler;
 8009936:	4b26      	ldr	r3, [pc, #152]	; (80099d0 <mpu9255_init+0xd8>)
 8009938:	6123      	str	r3, [r4, #16]
	systick_app_timer_channel_create(&readTimer);
 800993a:	4620      	mov	r0, r4
	readTimer.mode = APP_TIMER_MODE_CONTINUOUS;
 800993c:	7225      	strb	r5, [r4, #8]
	readTimer.alarm = readPeriod; // 1ms
 800993e:	60e7      	str	r7, [r4, #12]
	systick_app_timer_channel_create(&readTimer);
 8009940:	f002 f870 	bl	800ba24 <systick_app_timer_channel_create>
	// don't start this one until after the dmp is initialized

	// reset internal data
	memset(&dmpData, 0, sizeof(dmpData));
 8009944:	4629      	mov	r1, r5
 8009946:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 800994a:	4822      	ldr	r0, [pc, #136]	; (80099d4 <mpu9255_init+0xdc>)
 800994c:	f003 f936 	bl	800cbbc <memset>

	// First init the MPU chip
	struct int_param_s int_param;
	mpu_init(&int_param);
 8009950:	a802      	add	r0, sp, #8
 8009952:	f7fe fc01 	bl	8008158 <mpu_init>
	mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 8009956:	2078      	movs	r0, #120	; 0x78
 8009958:	f7fe fb62 	bl	8008020 <mpu_set_sensors>

	// load dmp and turn on
	dmp_load_motion_driver_firmware();
 800995c:	f7fe fe4e 	bl	80085fc <dmp_load_motion_driver_firmware>
	const signed char orientation[9] = {-1, 0, 0,
 8009960:	4a1d      	ldr	r2, [pc, #116]	; (80099d8 <mpu9255_init+0xe0>)
 8009962:	6851      	ldr	r1, [r2, #4]
 8009964:	6810      	ldr	r0, [r2, #0]
 8009966:	7a12      	ldrb	r2, [r2, #8]
 8009968:	ab03      	add	r3, sp, #12
 800996a:	c303      	stmia	r3!, {r0, r1}
    scalar = inv_row_2_scale(mtx);
 800996c:	a803      	add	r0, sp, #12
	const signed char orientation[9] = {-1, 0, 0,
 800996e:	701a      	strb	r2, [r3, #0]
    scalar = inv_row_2_scale(mtx);
 8009970:	f7ff ff12 	bl	8009798 <inv_row_2_scale>
 8009974:	4602      	mov	r2, r0
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 8009976:	f10d 000f 	add.w	r0, sp, #15
 800997a:	f7ff ff0d 	bl	8009798 <inv_row_2_scale>
 800997e:	4601      	mov	r1, r0
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 8009980:	f10d 0012 	add.w	r0, sp, #18
 8009984:	f7ff ff08 	bl	8009798 <inv_row_2_scale>
 8009988:	0180      	lsls	r0, r0, #6
 800998a:	ea40 00c1 	orr.w	r0, r0, r1, lsl #3
 800998e:	4310      	orrs	r0, r2
							0, -1, 0,
							0, 0, 1};

	dmp_set_orientation( inv_orientation_matrix_to_scalar(orientation));
 8009990:	b280      	uxth	r0, r0
 8009992:	f7fe fe3d 	bl	8008610 <dmp_set_orientation>
	dmp_register_tap_cb(tap_cb);
 8009996:	4811      	ldr	r0, [pc, #68]	; (80099dc <mpu9255_init+0xe4>)
 8009998:	f7ff fa36 	bl	8008e08 <dmp_register_tap_cb>
	dmp_register_android_orient_cb(android_orient_cb);
 800999c:	4810      	ldr	r0, [pc, #64]	; (80099e0 <mpu9255_init+0xe8>)
 800999e:	f7ff fa39 	bl	8008e14 <dmp_register_android_orient_cb>
	/*
	 *  * There is a known issue in which if you do not enable DMP_FEATURE_TAP
     * then the interrupts will be at 200Hz even if fifo rate
     * is set at a different rate. To avoid this issue include the DMP_FEATURE_TAP
	 */
	dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_RAW_GYRO);
 80099a2:	20d0      	movs	r0, #208	; 0xd0
 80099a4:	f7ff f89e 	bl	8008ae4 <dmp_enable_feature>

	dmp_set_fifo_rate(100);
 80099a8:	2064      	movs	r0, #100	; 0x64
 80099aa:	f7fe febf 	bl	800872c <dmp_set_fifo_rate>
	mpu_set_dmp_state(1);
 80099ae:	4630      	mov	r0, r6
 80099b0:	f7fe fdd4 	bl	800855c <mpu_set_dmp_state>
	mpu_reset_fifo();
 80099b4:	f7fd ffe6 	bl	8007984 <mpu_reset_fifo>
	systick_app_timer_channel_start(readTimer.channel);
 80099b8:	7820      	ldrb	r0, [r4, #0]
 80099ba:	f002 f81d 	bl	800b9f8 <systick_app_timer_channel_start>
}
 80099be:	b007      	add	sp, #28
 80099c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099c2:	bf00      	nop
 80099c4:	200008b0 	.word	0x200008b0
 80099c8:	08009779 	.word	0x08009779
 80099cc:	200008cc 	.word	0x200008cc
 80099d0:	08009769 	.word	0x08009769
 80099d4:	20008ce0 	.word	0x20008ce0
 80099d8:	0800dda4 	.word	0x0800dda4
 80099dc:	08009777 	.word	0x08009777
 80099e0:	08009775 	.word	0x08009775

080099e4 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80099e4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80099e8:	4905      	ldr	r1, [pc, #20]	; (8009a00 <NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80099ea:	4b06      	ldr	r3, [pc, #24]	; (8009a04 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80099ec:	68ca      	ldr	r2, [r1, #12]
 80099ee:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80099f2:	4313      	orrs	r3, r2
 80099f4:	60cb      	str	r3, [r1, #12]
 80099f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80099fa:	bf00      	nop
 80099fc:	e7fd      	b.n	80099fa <NVIC_SystemReset+0x16>
 80099fe:	bf00      	nop
 8009a00:	e000ed00 	.word	0xe000ed00
 8009a04:	05fa0004 	.word	0x05fa0004

08009a08 <LL_ADC_REG_StartConversion>:
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009a08:	6883      	ldr	r3, [r0, #8]
 8009a0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009a12:	f043 0304 	orr.w	r3, r3, #4
 8009a16:	6083      	str	r3, [r0, #8]
 8009a18:	4770      	bx	lr
	...

08009a1c <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009a1c:	4b05      	ldr	r3, [pc, #20]	; (8009a34 <LL_AHB2_GRP1_EnableClock+0x18>)
 8009a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a20:	4302      	orrs	r2, r0
 8009a22:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8009a26:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009a28:	4018      	ands	r0, r3
 8009a2a:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8009a2c:	9b01      	ldr	r3, [sp, #4]
}
 8009a2e:	b002      	add	sp, #8
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	40021000 	.word	0x40021000

08009a38 <LL_GPIO_SetPinMode>:
{
 8009a38:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009a3a:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a3c:	fa91 f4a1 	rbit	r4, r1
 8009a40:	fab4 f484 	clz	r4, r4
 8009a44:	fa91 f1a1 	rbit	r1, r1
 8009a48:	2503      	movs	r5, #3
 8009a4a:	fab1 f181 	clz	r1, r1
 8009a4e:	0064      	lsls	r4, r4, #1
 8009a50:	fa05 f404 	lsl.w	r4, r5, r4
 8009a54:	0049      	lsls	r1, r1, #1
 8009a56:	ea23 0304 	bic.w	r3, r3, r4
 8009a5a:	fa02 f101 	lsl.w	r1, r2, r1
 8009a5e:	4319      	orrs	r1, r3
 8009a60:	6001      	str	r1, [r0, #0]
 8009a62:	bd30      	pop	{r4, r5, pc}

08009a64 <LL_ADC_REG_SetSequencerRanks>:
{
 8009a64:	b530      	push	{r4, r5, lr}
 8009a66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009a6a:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8009a6e:	fab3 f383 	clz	r3, r3
 8009a72:	f401 7440 	and.w	r4, r1, #768	; 0x300
 8009a76:	40dc      	lsrs	r4, r3
 8009a78:	3030      	adds	r0, #48	; 0x30
  MODIFY_REG(*preg,
 8009a7a:	f001 011f 	and.w	r1, r1, #31
 8009a7e:	231f      	movs	r3, #31
 8009a80:	fa03 f501 	lsl.w	r5, r3, r1
 8009a84:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8009a88:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8009a8c:	f1c1 011a 	rsb	r1, r1, #26
 8009a90:	ea23 0305 	bic.w	r3, r3, r5
 8009a94:	fa22 f101 	lsr.w	r1, r2, r1
 8009a98:	4319      	orrs	r1, r3
 8009a9a:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 8009a9e:	bd30      	pop	{r4, r5, pc}

08009aa0 <LL_ADC_SetChannelSamplingTime>:
{
 8009aa0:	b570      	push	{r4, r5, r6, lr}
 8009aa2:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8009aa6:	fa96 f6a6 	rbit	r6, r6
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8009aaa:	fab6 f386 	clz	r3, r6
 8009aae:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 8009ab2:	40de      	lsrs	r6, r3
 8009ab4:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 8009ab6:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8009aba:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8009abe:	fa93 f5a3 	rbit	r5, r3
 8009ac2:	fab5 f585 	clz	r5, r5
 8009ac6:	fa93 f3a3 	rbit	r3, r3
 8009aca:	2407      	movs	r4, #7
 8009acc:	fa21 f505 	lsr.w	r5, r1, r5
 8009ad0:	fa04 f505 	lsl.w	r5, r4, r5
 8009ad4:	fab3 f383 	clz	r3, r3
 8009ad8:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8009adc:	40d9      	lsrs	r1, r3
 8009ade:	ea24 0405 	bic.w	r4, r4, r5
 8009ae2:	fa02 f101 	lsl.w	r1, r2, r1
 8009ae6:	4321      	orrs	r1, r4
 8009ae8:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 8009aec:	bd70      	pop	{r4, r5, r6, pc}

08009aee <LL_GPIO_SetPinPull>:
{
 8009aee:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009af0:	68c3      	ldr	r3, [r0, #12]
 8009af2:	fa91 f4a1 	rbit	r4, r1
 8009af6:	fab4 f484 	clz	r4, r4
 8009afa:	fa91 f1a1 	rbit	r1, r1
 8009afe:	2503      	movs	r5, #3
 8009b00:	fab1 f181 	clz	r1, r1
 8009b04:	0064      	lsls	r4, r4, #1
 8009b06:	fa05 f404 	lsl.w	r4, r5, r4
 8009b0a:	0049      	lsls	r1, r1, #1
 8009b0c:	ea23 0304 	bic.w	r3, r3, r4
 8009b10:	fa02 f101 	lsl.w	r1, r2, r1
 8009b14:	4319      	orrs	r1, r3
 8009b16:	60c1      	str	r1, [r0, #12]
 8009b18:	bd30      	pop	{r4, r5, pc}

08009b1a <LL_GPIO_SetPinSpeed.constprop.6>:
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 8009b1a:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009b1c:	6882      	ldr	r2, [r0, #8]
 8009b1e:	fa91 f3a1 	rbit	r3, r1
 8009b22:	fab3 f383 	clz	r3, r3
 8009b26:	fa91 f1a1 	rbit	r1, r1
 8009b2a:	2403      	movs	r4, #3
 8009b2c:	fab1 f181 	clz	r1, r1
 8009b30:	005b      	lsls	r3, r3, #1
 8009b32:	fa04 f303 	lsl.w	r3, r4, r3
 8009b36:	0049      	lsls	r1, r1, #1
 8009b38:	ea22 0303 	bic.w	r3, r2, r3
 8009b3c:	fa04 f101 	lsl.w	r1, r4, r1
 8009b40:	4319      	orrs	r1, r3
 8009b42:	6081      	str	r1, [r0, #8]
 8009b44:	bd10      	pop	{r4, pc}
	...

08009b48 <LL_RTC_DATE_GetDay.constprop.7>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 8009b48:	4b0a      	ldr	r3, [pc, #40]	; (8009b74 <LL_RTC_DATE_GetDay.constprop.7+0x2c>)
 8009b4a:	2030      	movs	r0, #48	; 0x30
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	fa90 f0a0 	rbit	r0, r0
 8009b52:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 8009b54:	fab0 f080 	clz	r0, r0
 8009b58:	fa92 f2a2 	rbit	r2, r2
 8009b5c:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8009b60:	fab2 f282 	clz	r2, r2
 8009b64:	f003 030f 	and.w	r3, r3, #15
 8009b68:	fa21 f000 	lsr.w	r0, r1, r0
 8009b6c:	40d3      	lsrs	r3, r2
}
 8009b6e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8009b72:	4770      	bx	lr
 8009b74:	40002800 	.word	0x40002800

08009b78 <LL_RTC_DATE_GetMonth.constprop.8>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 8009b78:	4b0b      	ldr	r3, [pc, #44]	; (8009ba8 <LL_RTC_DATE_GetMonth.constprop.8+0x30>)
 8009b7a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	fa90 f0a0 	rbit	r0, r0
 8009b84:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 8009b88:	fab0 f080 	clz	r0, r0
 8009b8c:	fa92 f2a2 	rbit	r2, r2
 8009b90:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 8009b94:	fab2 f282 	clz	r2, r2
 8009b98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009b9c:	fa21 f000 	lsr.w	r0, r1, r0
 8009ba0:	40d3      	lsrs	r3, r2
}
 8009ba2:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8009ba6:	4770      	bx	lr
 8009ba8:	40002800 	.word	0x40002800

08009bac <LL_RTC_DATE_GetYear.constprop.9>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 8009bac:	4b0b      	ldr	r3, [pc, #44]	; (8009bdc <LL_RTC_DATE_GetYear.constprop.9+0x30>)
 8009bae:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	fa90 f0a0 	rbit	r0, r0
 8009bb8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 8009bbc:	fab0 f080 	clz	r0, r0
 8009bc0:	fa92 f2a2 	rbit	r2, r2
 8009bc4:	f403 0170 	and.w	r1, r3, #15728640	; 0xf00000
 8009bc8:	fab2 f282 	clz	r2, r2
 8009bcc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8009bd0:	fa21 f000 	lsr.w	r0, r1, r0
 8009bd4:	40d3      	lsrs	r3, r2
}
 8009bd6:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8009bda:	4770      	bx	lr
 8009bdc:	40002800 	.word	0x40002800

08009be0 <LL_RTC_TIME_GetSecond.constprop.10>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 8009be0:	4b0a      	ldr	r3, [pc, #40]	; (8009c0c <LL_RTC_TIME_GetSecond.constprop.10+0x2c>)
 8009be2:	2070      	movs	r0, #112	; 0x70
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	fa90 f0a0 	rbit	r0, r0
 8009bea:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 8009bec:	fab0 f080 	clz	r0, r0
 8009bf0:	fa92 f2a2 	rbit	r2, r2
 8009bf4:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8009bf8:	fab2 f282 	clz	r2, r2
 8009bfc:	f003 030f 	and.w	r3, r3, #15
 8009c00:	fa21 f000 	lsr.w	r0, r1, r0
 8009c04:	40d3      	lsrs	r3, r2
}
 8009c06:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8009c0a:	4770      	bx	lr
 8009c0c:	40002800 	.word	0x40002800

08009c10 <LL_RTC_TIME_GetMinute.constprop.11>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 8009c10:	4b0b      	ldr	r3, [pc, #44]	; (8009c40 <LL_RTC_TIME_GetMinute.constprop.11+0x30>)
 8009c12:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	fa90 f0a0 	rbit	r0, r0
 8009c1c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 8009c20:	fab0 f080 	clz	r0, r0
 8009c24:	fa92 f2a2 	rbit	r2, r2
 8009c28:	f403 41e0 	and.w	r1, r3, #28672	; 0x7000
 8009c2c:	fab2 f282 	clz	r2, r2
 8009c30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009c34:	fa21 f000 	lsr.w	r0, r1, r0
 8009c38:	40d3      	lsrs	r3, r2
}
 8009c3a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8009c3e:	4770      	bx	lr
 8009c40:	40002800 	.word	0x40002800

08009c44 <LL_RTC_TIME_GetHour.constprop.12>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 8009c44:	4b0b      	ldr	r3, [pc, #44]	; (8009c74 <LL_RTC_TIME_GetHour.constprop.12+0x30>)
 8009c46:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	fa90 f0a0 	rbit	r0, r0
 8009c50:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 8009c54:	fab0 f080 	clz	r0, r0
 8009c58:	fa92 f2a2 	rbit	r2, r2
 8009c5c:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
 8009c60:	fab2 f282 	clz	r2, r2
 8009c64:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8009c68:	fa21 f000 	lsr.w	r0, r1, r0
 8009c6c:	40d3      	lsrs	r3, r2
}
 8009c6e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8009c72:	4770      	bx	lr
 8009c74:	40002800 	.word	0x40002800

08009c78 <LL_APB2_GRP1_EnableClock.constprop.17>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8009c78:	4b06      	ldr	r3, [pc, #24]	; (8009c94 <LL_APB2_GRP1_EnableClock.constprop.17+0x1c>)
 8009c7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009c7c:	f042 0201 	orr.w	r2, r2, #1
 8009c80:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8009c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
 8009c84:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8009c86:	f003 0301 	and.w	r3, r3, #1
 8009c8a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8009c8c:	9b01      	ldr	r3, [sp, #4]
}
 8009c8e:	b002      	add	sp, #8
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	40021000 	.word	0x40021000

08009c98 <Configure_Interrupt>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009c98:	4a0a      	ldr	r2, [pc, #40]	; (8009cc4 <Configure_Interrupt+0x2c>)
 8009c9a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009c9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009ca0:	041b      	lsls	r3, r3, #16
 8009ca2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
 8009ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8009cac:	60d3      	str	r3, [r2, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cae:	4b06      	ldr	r3, [pc, #24]	; (8009cc8 <Configure_Interrupt+0x30>)
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
 8009cb6:	2220      	movs	r2, #32
 8009cb8:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
 8009cbc:	2210      	movs	r2, #16
 8009cbe:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 8009cc2:	4770      	bx	lr
 8009cc4:	e000ed00 	.word	0xe000ed00
 8009cc8:	e000e100 	.word	0xe000e100

08009ccc <Shut_Down_USB>:
  * @rmtoll CR2          USV           LL_PWR_DisableVddUSB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableVddUSB(void)
{
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 8009ccc:	4a0a      	ldr	r2, [pc, #40]	; (8009cf8 <Shut_Down_USB+0x2c>)
 8009cce:	6853      	ldr	r3, [r2, #4]
	update_FATFS_time(); // Write RTC time-stamp on File header/properties of last FATFS file to visualize in PC
	f_mount(0, "", 0); 	//  unmount FATFS file (of running sensor storage file)
	FATFS_UnLinkDriver(SDPath); //  unlink SD card driver (of running sensor storage file)
}

void Shut_Down_USB(void) {
 8009cd0:	b510      	push	{r4, lr}
 8009cd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

	LL_PWR_DisableVddUSB();                     // Disable VDDUSB supply for USB
	USB_Present_ = 0;  // reset the USB present flag to be set by EXTI interrupt

	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 8009cd6:	4c09      	ldr	r4, [pc, #36]	; (8009cfc <Shut_Down_USB+0x30>)
 8009cd8:	6053      	str	r3, [r2, #4]
	USB_Present_ = 0;  // reset the USB present flag to be set by EXTI interrupt
 8009cda:	4b09      	ldr	r3, [pc, #36]	; (8009d00 <Shut_Down_USB+0x34>)
 8009cdc:	2200      	movs	r2, #0
	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 8009cde:	4620      	mov	r0, r4
	USB_Present_ = 0;  // reset the USB present flag to be set by EXTI interrupt
 8009ce0:	701a      	strb	r2, [r3, #0]
	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 8009ce2:	f7f8 fdf6 	bl	80028d2 <USBD_Stop>
	USBD_DeInit(&USBD_Device);               // De-Initialize the device library
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f7f8 fdd5 	bl	8002896 <USBD_DeInit>
	__HAL_RCC_USB_OTG_FS_CLK_DISABLE()
 8009cec:	4a05      	ldr	r2, [pc, #20]	; (8009d04 <Shut_Down_USB+0x38>)
 8009cee:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009cf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009cf6:	bd10      	pop	{r4, pc}
 8009cf8:	40007000 	.word	0x40007000
 8009cfc:	20008a54 	.word	0x20008a54
 8009d00:	20000634 	.word	0x20000634
 8009d04:	40021000 	.word	0x40021000

08009d08 <USB_Clock_Ready>:
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009d08:	4b0a      	ldr	r3, [pc, #40]	; (8009d34 <USB_Clock_Ready+0x2c>)
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	update_FATFS_time(); // Write RTC time-stamp on File header/properties of last FATFS file to visualize in PC
	f_mount(0, "", 0); 	//  unmount FATFS file (of running sensor storage file)
	FATFS_UnLinkDriver(SDPath); //  unlink SD card driver (of running sensor storage file)
}

void USB_Clock_Ready(void) {
 8009d10:	b082      	sub	sp, #8
 8009d12:	605a      	str	r2, [r3, #4]
  * @rmtoll CR2          USV           LL_PWR_IsEnabledVddUSB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledVddUSB(void)
{
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 8009d14:	685a      	ldr	r2, [r3, #4]
	LL_PWR_EnableVddUSB();                       // Enable VDDUSB supply for USB
	while (!LL_PWR_IsEnabledVddUSB())
 8009d16:	0552      	lsls	r2, r2, #21
 8009d18:	d5fc      	bpl.n	8009d14 <USB_Clock_Ready+0xc>
		;                       // Wait for VDDUSB supply to activate
	__HAL_RCC_USB_OTG_FS_CLK_ENABLE()
 8009d1a:	4b07      	ldr	r3, [pc, #28]	; (8009d38 <USB_Clock_Ready+0x30>)
 8009d1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009d22:	64da      	str	r2, [r3, #76]	; 0x4c
 8009d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d2a:	9301      	str	r3, [sp, #4]
 8009d2c:	9b01      	ldr	r3, [sp, #4]
	;     // Enable USB Clock
}
 8009d2e:	b002      	add	sp, #8
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	40007000 	.word	0x40007000
 8009d38:	40021000 	.word	0x40021000

08009d3c <DFU_Bypass>:
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8009d3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
int check;
void DFU_Bypass(void) {

	uint32_t i = 0;

	check = LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY);
 8009d40:	4810      	ldr	r0, [pc, #64]	; (8009d84 <DFU_Bypass+0x48>)
 8009d42:	691a      	ldr	r2, [r3, #16]
 8009d44:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8009d48:	f3c2 2240 	ubfx	r2, r2, #9, #1
void DFU_Bypass(void) {
 8009d4c:	b570      	push	{r4, r5, r6, lr}
	check = LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY);
 8009d4e:	6002      	str	r2, [r0, #0]
 8009d50:	691a      	ldr	r2, [r3, #16]
	// if(check == 1)
	//	 CYAN_LED_ONLY();
	while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 8009d52:	0592      	lsls	r2, r2, #22
 8009d54:	d4fc      	bmi.n	8009d50 <DFU_Bypass+0x14>
		;  // Wait until USB cable disconnect from Charger
	if (*LP_Ram_Key_Address != Reset_Key_Value) {
 8009d56:	4b0c      	ldr	r3, [pc, #48]	; (8009d88 <DFU_Bypass+0x4c>)
 8009d58:	4c0c      	ldr	r4, [pc, #48]	; (8009d8c <DFU_Bypass+0x50>)
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	42a2      	cmp	r2, r4
 8009d5e:	d010      	beq.n	8009d82 <DFU_Bypass+0x46>
		*LP_Ram_Key_Address = Reset_Key_Value;
 8009d60:	601c      	str	r4, [r3, #0]
		if (check == 1) {
 8009d62:	b171      	cbz	r1, 8009d82 <DFU_Bypass+0x46>
 8009d64:	2505      	movs	r5, #5
 8009d66:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
			/* Toggle IO in during 2s (10*200ms) */
			for (i = 0; i < 5; i++) {
				//   LL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
				LL_mDelay(200);
 8009d6a:	20c8      	movs	r0, #200	; 0xc8
 8009d6c:	f7fd f982 	bl	8007074 <LL_mDelay>
 8009d70:	6933      	ldr	r3, [r6, #16]
				if (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY)) {
 8009d72:	059b      	lsls	r3, r3, #22
 8009d74:	d503      	bpl.n	8009d7e <DFU_Bypass+0x42>
					*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 8009d76:	4b06      	ldr	r3, [pc, #24]	; (8009d90 <DFU_Bypass+0x54>)
 8009d78:	601c      	str	r4, [r3, #0]
					NVIC_SystemReset();        // System reset
 8009d7a:	f7ff fe33 	bl	80099e4 <NVIC_SystemReset>
			for (i = 0; i < 5; i++) {
 8009d7e:	3d01      	subs	r5, #1
 8009d80:	d1f3      	bne.n	8009d6a <DFU_Bypass+0x2e>
 8009d82:	bd70      	pop	{r4, r5, r6, pc}
 8009d84:	2000b1ec 	.word	0x2000b1ec
 8009d88:	20017cf0 	.word	0x20017cf0
 8009d8c:	deadbeef 	.word	0xdeadbeef
 8009d90:	20017ff0 	.word	0x20017ff0

08009d94 <Prepare_Goto_Dormant_Mode>:
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8009d94:	4a03      	ldr	r2, [pc, #12]	; (8009da4 <Prepare_Goto_Dormant_Mode+0x10>)
 8009d96:	6893      	ldr	r3, [r2, #8]
 8009d98:	f023 0302 	bic.w	r3, r3, #2
 8009d9c:	6093      	str	r3, [r2, #8]
	}
}

void Prepare_Goto_Dormant_Mode(void) {
	LL_LPTIM_DisableIT_ARRM(LPTIM2); // Disable auto reload match interrupt of LPTIM2
	SD_POWER_OFF();               // Power off SD CARD
 8009d9e:	f7fd bdc6 	b.w	800792e <SD_POWER_OFF>
 8009da2:	bf00      	nop
 8009da4:	40009400 	.word	0x40009400

08009da8 <Reset_Variables_for_LowBattery>:
}

void Reset_Variables_for_LowBattery(void) // Reset all variables needed to Sensor logging in Double Buffer System
{

	SD_write_Flag = 0;
 8009da8:	4b01      	ldr	r3, [pc, #4]	; (8009db0 <Reset_Variables_for_LowBattery+0x8>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	701a      	strb	r2, [r3, #0]
 8009dae:	4770      	bx	lr
 8009db0:	20008a4c 	.word	0x20008a4c

08009db4 <GetNextIndex>:
	}

}

int GetNextIndex(char *path) // Read SD card content to save next value in auto increment format
{
 8009db4:	b530      	push	{r4, r5, lr}
 8009db6:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
	DIR dir;
	FILINFO fno;
	int i, index = -1;

	if (f_opendir(&dir, path) == FR_OK) {
 8009dba:	4601      	mov	r1, r0
 8009dbc:	a808      	add	r0, sp, #32
 8009dbe:	f7f8 fc1a 	bl	80025f6 <f_opendir>
 8009dc2:	f04f 34ff 	mov.w	r4, #4294967295
 8009dc6:	b9e0      	cbnz	r0, 8009e02 <GetNextIndex+0x4e>

		while (1) {
			if ((f_readdir(&dir, &fno) != FR_OK) || (fno.fname[0] == 0))
				break;

			if ((strstr(fno.fname, ".BIN") != NULL)
 8009dc8:	4d10      	ldr	r5, [pc, #64]	; (8009e0c <GetNextIndex+0x58>)
			if ((f_readdir(&dir, &fno) != FR_OK) || (fno.fname[0] == 0))
 8009dca:	a902      	add	r1, sp, #8
 8009dcc:	a808      	add	r0, sp, #32
 8009dce:	f7f8 fc60 	bl	8002692 <f_readdir>
 8009dd2:	b9b0      	cbnz	r0, 8009e02 <GetNextIndex+0x4e>
 8009dd4:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8009dd8:	b19b      	cbz	r3, 8009e02 <GetNextIndex+0x4e>
			if ((strstr(fno.fname, ".BIN") != NULL)
 8009dda:	4629      	mov	r1, r5
 8009ddc:	f10d 0011 	add.w	r0, sp, #17
 8009de0:	f002 ffe4 	bl	800cdac <strstr>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d0f0      	beq.n	8009dca <GetNextIndex+0x16>
					&& (sscanf(fno.fname, "%d", &i) == 1)) // Searcing for .BIN file and determining highest index
 8009de8:	aa01      	add	r2, sp, #4
 8009dea:	4909      	ldr	r1, [pc, #36]	; (8009e10 <GetNextIndex+0x5c>)
 8009dec:	f10d 0011 	add.w	r0, sp, #17
 8009df0:	f002 ffa8 	bl	800cd44 <siscanf>
 8009df4:	2801      	cmp	r0, #1
 8009df6:	d1e8      	bne.n	8009dca <GetNextIndex+0x16>
 8009df8:	9b01      	ldr	r3, [sp, #4]
 8009dfa:	429c      	cmp	r4, r3
 8009dfc:	bfb8      	it	lt
 8009dfe:	461c      	movlt	r4, r3
 8009e00:	e7e3      	b.n	8009dca <GetNextIndex+0x16>
				if (i > index)
					index = i;
		}
	}
	return (index + 1);
}
 8009e02:	1c60      	adds	r0, r4, #1
 8009e04:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8009e08:	bd30      	pop	{r4, r5, pc}
 8009e0a:	bf00      	nop
 8009e0c:	0800eb1a 	.word	0x0800eb1a
 8009e10:	0800eb13 	.word	0x0800eb13

08009e14 <Try_FATFS_Mount>:
	}
	return 0;
}

void Try_FATFS_Mount(void) {
	if (Fat_mnt_fail == 1) {
 8009e14:	4b10      	ldr	r3, [pc, #64]	; (8009e58 <Try_FATFS_Mount+0x44>)
void Try_FATFS_Mount(void) {
 8009e16:	b510      	push	{r4, lr}
	if (Fat_mnt_fail == 1) {
 8009e18:	681c      	ldr	r4, [r3, #0]
 8009e1a:	2c01      	cmp	r4, #1
 8009e1c:	d11a      	bne.n	8009e54 <Try_FATFS_Mount+0x40>
		Fat_mnt_fail = 0;
 8009e1e:	2200      	movs	r2, #0
 8009e20:	601a      	str	r2, [r3, #0]
		SD_POWER_OFF();
 8009e22:	f7fd fd84 	bl	800792e <SD_POWER_OFF>
		delay_us(10000); // wait 10 msec
 8009e26:	f242 7010 	movw	r0, #10000	; 0x2710
 8009e2a:	f001 fe37 	bl	800ba9c <delay_us>
		SD_POWER_ON();
 8009e2e:	f7fd fd7d 	bl	800792c <SD_POWER_ON>
		delay_us(1000000); // wait 1 sec
 8009e32:	480a      	ldr	r0, [pc, #40]	; (8009e5c <Try_FATFS_Mount+0x48>)
 8009e34:	f001 fe32 	bl	800ba9c <delay_us>
		//Retry FATFS link

		if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8009e38:	4909      	ldr	r1, [pc, #36]	; (8009e60 <Try_FATFS_Mount+0x4c>)
 8009e3a:	480a      	ldr	r0, [pc, #40]	; (8009e64 <Try_FATFS_Mount+0x50>)
 8009e3c:	f7f8 fcf0 	bl	8002820 <FATFS_LinkDriver>
 8009e40:	b928      	cbnz	r0, 8009e4e <Try_FATFS_Mount+0x3a>
				{
			if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 8009e42:	4622      	mov	r2, r4
 8009e44:	4906      	ldr	r1, [pc, #24]	; (8009e60 <Try_FATFS_Mount+0x4c>)
 8009e46:	4808      	ldr	r0, [pc, #32]	; (8009e68 <Try_FATFS_Mount+0x54>)
 8009e48:	f7f8 f818 	bl	8001e7c <f_mount>
 8009e4c:	b110      	cbz	r0, 8009e54 <Try_FATFS_Mount+0x40>
					{
				Skip_FATFS = 1;
 8009e4e:	4b07      	ldr	r3, [pc, #28]	; (8009e6c <Try_FATFS_Mount+0x58>)
 8009e50:	2201      	movs	r2, #1
 8009e52:	701a      	strb	r2, [r3, #0]
 8009e54:	bd10      	pop	{r4, pc}
 8009e56:	bf00      	nop
 8009e58:	2000b104 	.word	0x2000b104
 8009e5c:	000f4240 	.word	0x000f4240
 8009e60:	2000b1f9 	.word	0x2000b1f9
 8009e64:	0800ddbc 	.word	0x0800ddbc
 8009e68:	2000b208 	.word	0x2000b208
 8009e6c:	2000b45d 	.word	0x2000b45d

08009e70 <file_reopen_sync>:
		}
	}

}

void file_reopen_sync(void) {
 8009e70:	b508      	push	{r3, lr}
	f_close(&MyFile);
 8009e72:	4807      	ldr	r0, [pc, #28]	; (8009e90 <file_reopen_sync+0x20>)
 8009e74:	f7f8 fa5f 	bl	8002336 <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8009e78:	2212      	movs	r2, #18
 8009e7a:	4906      	ldr	r1, [pc, #24]	; (8009e94 <file_reopen_sync+0x24>)
 8009e7c:	4804      	ldr	r0, [pc, #16]	; (8009e90 <file_reopen_sync+0x20>)
 8009e7e:	f7f8 f833 	bl	8001ee8 <f_open>
	if (res != FR_OK) {
 8009e82:	4b05      	ldr	r3, [pc, #20]	; (8009e98 <file_reopen_sync+0x28>)
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	b113      	cbz	r3, 8009e8e <file_reopen_sync+0x1e>
		Fat_sync_read_fail = 1;
 8009e88:	4b04      	ldr	r3, [pc, #16]	; (8009e9c <file_reopen_sync+0x2c>)
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	601a      	str	r2, [r3, #0]
 8009e8e:	bd08      	pop	{r3, pc}
 8009e90:	2000b468 	.word	0x2000b468
 8009e94:	2000b14c 	.word	0x2000b14c
 8009e98:	2000b6ea 	.word	0x2000b6ea
 8009e9c:	2000b10c 	.word	0x2000b10c

08009ea0 <file_reopen>:
	}
}

void file_reopen(void) {
 8009ea0:	b508      	push	{r3, lr}
	f_close(&MyFile);
 8009ea2:	4807      	ldr	r0, [pc, #28]	; (8009ec0 <file_reopen+0x20>)
 8009ea4:	f7f8 fa47 	bl	8002336 <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8009ea8:	2212      	movs	r2, #18
 8009eaa:	4906      	ldr	r1, [pc, #24]	; (8009ec4 <file_reopen+0x24>)
 8009eac:	4804      	ldr	r0, [pc, #16]	; (8009ec0 <file_reopen+0x20>)
 8009eae:	f7f8 f81b 	bl	8001ee8 <f_open>
	if (res != FR_OK) {
 8009eb2:	4b05      	ldr	r3, [pc, #20]	; (8009ec8 <file_reopen+0x28>)
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	b113      	cbz	r3, 8009ebe <file_reopen+0x1e>
		Fat_write_read_fail = 1;
 8009eb8:	4b04      	ldr	r3, [pc, #16]	; (8009ecc <file_reopen+0x2c>)
 8009eba:	2201      	movs	r2, #1
 8009ebc:	601a      	str	r2, [r3, #0]
 8009ebe:	bd08      	pop	{r3, pc}
 8009ec0:	2000b468 	.word	0x2000b468
 8009ec4:	2000b14c 	.word	0x2000b14c
 8009ec8:	2000b6ea 	.word	0x2000b6ea
 8009ecc:	2000b108 	.word	0x2000b108

08009ed0 <file_mnt_reopen>:
	}
}

void file_mnt_reopen(void) {
 8009ed0:	b508      	push	{r3, lr}
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8009ed2:	490c      	ldr	r1, [pc, #48]	; (8009f04 <file_mnt_reopen+0x34>)
 8009ed4:	480c      	ldr	r0, [pc, #48]	; (8009f08 <file_mnt_reopen+0x38>)
 8009ed6:	f7f8 fca3 	bl	8002820 <FATFS_LinkDriver>
 8009eda:	b928      	cbnz	r0, 8009ee8 <file_mnt_reopen+0x18>
			{
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 8009edc:	2201      	movs	r2, #1
 8009ede:	4909      	ldr	r1, [pc, #36]	; (8009f04 <file_mnt_reopen+0x34>)
 8009ee0:	480a      	ldr	r0, [pc, #40]	; (8009f0c <file_mnt_reopen+0x3c>)
 8009ee2:	f7f7 ffcb 	bl	8001e7c <f_mount>
 8009ee6:	b118      	cbz	r0, 8009ef0 <file_mnt_reopen+0x20>
				{
			Fat_read_mnt_fail = 1;
 8009ee8:	4b09      	ldr	r3, [pc, #36]	; (8009f10 <file_mnt_reopen+0x40>)
 8009eea:	2201      	movs	r2, #1
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	bd08      	pop	{r3, pc}
		} else  // Good to Go
		{
			res = f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 8009ef0:	2212      	movs	r2, #18
 8009ef2:	4908      	ldr	r1, [pc, #32]	; (8009f14 <file_mnt_reopen+0x44>)
 8009ef4:	4808      	ldr	r0, [pc, #32]	; (8009f18 <file_mnt_reopen+0x48>)
 8009ef6:	f7f7 fff7 	bl	8001ee8 <f_open>
 8009efa:	4b08      	ldr	r3, [pc, #32]	; (8009f1c <file_mnt_reopen+0x4c>)
 8009efc:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) {
 8009efe:	2800      	cmp	r0, #0
 8009f00:	d1f2      	bne.n	8009ee8 <file_mnt_reopen+0x18>
 8009f02:	bd08      	pop	{r3, pc}
 8009f04:	2000b1f9 	.word	0x2000b1f9
 8009f08:	0800ddbc 	.word	0x0800ddbc
 8009f0c:	2000b208 	.word	0x2000b208
 8009f10:	2000b1b0 	.word	0x2000b1b0
 8009f14:	2000b14c 	.word	0x2000b14c
 8009f18:	2000b468 	.word	0x2000b468
 8009f1c:	2000b6ea 	.word	0x2000b6ea

08009f20 <FATFS_Logstart_Delete>:
		}
		delay_us(100);
	}
}

void FATFS_Logstart_Delete(void) {
 8009f20:	b508      	push	{r3, lr}

	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8009f22:	490d      	ldr	r1, [pc, #52]	; (8009f58 <FATFS_Logstart_Delete+0x38>)
 8009f24:	480d      	ldr	r0, [pc, #52]	; (8009f5c <FATFS_Logstart_Delete+0x3c>)
 8009f26:	f7f8 fc7b 	bl	8002820 <FATFS_LinkDriver>
 8009f2a:	b958      	cbnz	r0, 8009f44 <FATFS_Logstart_Delete+0x24>
			{
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	490a      	ldr	r1, [pc, #40]	; (8009f58 <FATFS_Logstart_Delete+0x38>)
 8009f30:	480b      	ldr	r0, [pc, #44]	; (8009f60 <FATFS_Logstart_Delete+0x40>)
 8009f32:	f7f7 ffa3 	bl	8001e7c <f_mount>
 8009f36:	b910      	cbnz	r0, 8009f3e <FATFS_Logstart_Delete+0x1e>
				{     // Initialization Error Debugging
			//		 RED_LED_ON();
		}

		else {
			if (f_unlink("LogStart.txt") == FR_OK) { // If LogStart.txt file present, delete the file
 8009f38:	480a      	ldr	r0, [pc, #40]	; (8009f64 <FATFS_Logstart_Delete+0x44>)
 8009f3a:	f7f8 fbd5 	bl	80026e8 <f_unlink>
			}
		}
		delay_us(100);
 8009f3e:	2064      	movs	r0, #100	; 0x64
 8009f40:	f001 fdac 	bl	800ba9c <delay_us>
	}
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 8009f44:	2200      	movs	r2, #0
 8009f46:	4908      	ldr	r1, [pc, #32]	; (8009f68 <FATFS_Logstart_Delete+0x48>)
 8009f48:	4610      	mov	r0, r2
 8009f4a:	f7f7 ff97 	bl	8001e7c <f_mount>
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 8009f4e:	4802      	ldr	r0, [pc, #8]	; (8009f58 <FATFS_Logstart_Delete+0x38>)
}
 8009f50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 8009f54:	f7f8 bc80 	b.w	8002858 <FATFS_UnLinkDriver>
 8009f58:	2000b1f9 	.word	0x2000b1f9
 8009f5c:	0800ddbc 	.word	0x0800ddbc
 8009f60:	2000b208 	.word	0x2000b208
 8009f64:	0800eb06 	.word	0x0800eb06
 8009f68:	0800ecab 	.word	0x0800ecab

08009f6c <FATFS_Logstart_Ready>:

void FATFS_Logstart_Ready(void) {
 8009f6c:	b508      	push	{r3, lr}

	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8009f6e:	4910      	ldr	r1, [pc, #64]	; (8009fb0 <FATFS_Logstart_Ready+0x44>)
 8009f70:	4810      	ldr	r0, [pc, #64]	; (8009fb4 <FATFS_Logstart_Ready+0x48>)
 8009f72:	f7f8 fc55 	bl	8002820 <FATFS_LinkDriver>
 8009f76:	b988      	cbnz	r0, 8009f9c <FATFS_Logstart_Ready+0x30>
			{
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 8009f78:	2201      	movs	r2, #1
 8009f7a:	490d      	ldr	r1, [pc, #52]	; (8009fb0 <FATFS_Logstart_Ready+0x44>)
 8009f7c:	480e      	ldr	r0, [pc, #56]	; (8009fb8 <FATFS_Logstart_Ready+0x4c>)
 8009f7e:	f7f7 ff7d 	bl	8001e7c <f_mount>
 8009f82:	b940      	cbnz	r0, 8009f96 <FATFS_Logstart_Ready+0x2a>
				{     // Initialization Error Debugging

		}

		else {
			if (f_open(&MyFile, "LogStart.txt", FA_OPEN_ALWAYS | FA_WRITE)
 8009f84:	2212      	movs	r2, #18
 8009f86:	490d      	ldr	r1, [pc, #52]	; (8009fbc <FATFS_Logstart_Ready+0x50>)
 8009f88:	480d      	ldr	r0, [pc, #52]	; (8009fc0 <FATFS_Logstart_Ready+0x54>)
 8009f8a:	f7f7 ffad 	bl	8001ee8 <f_open>
 8009f8e:	b910      	cbnz	r0, 8009f96 <FATFS_Logstart_Ready+0x2a>
					!= FR_OK) // Create and Open a new text file object with write access
					{

			} else {

				f_close(&MyFile);
 8009f90:	480b      	ldr	r0, [pc, #44]	; (8009fc0 <FATFS_Logstart_Ready+0x54>)
 8009f92:	f7f8 f9d0 	bl	8002336 <f_close>
			}
		}
		delay_us(100);
 8009f96:	2064      	movs	r0, #100	; 0x64
 8009f98:	f001 fd80 	bl	800ba9c <delay_us>
	}
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	4909      	ldr	r1, [pc, #36]	; (8009fc4 <FATFS_Logstart_Ready+0x58>)
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	f7f7 ff6b 	bl	8001e7c <f_mount>
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 8009fa6:	4802      	ldr	r0, [pc, #8]	; (8009fb0 <FATFS_Logstart_Ready+0x44>)
}
 8009fa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 8009fac:	f7f8 bc54 	b.w	8002858 <FATFS_UnLinkDriver>
 8009fb0:	2000b1f9 	.word	0x2000b1f9
 8009fb4:	0800ddbc 	.word	0x0800ddbc
 8009fb8:	2000b208 	.word	0x2000b208
 8009fbc:	0800eb06 	.word	0x0800eb06
 8009fc0:	2000b468 	.word	0x2000b468
 8009fc4:	0800ecab 	.word	0x0800ecab

08009fc8 <USB_MSC_Init_Start>:
	}
#endif
}

void USB_MSC_Init_Start(void)                         // Initialize USB MSC mode
{
 8009fc8:	b510      	push	{r4, lr}
	USBD_Init(&USBD_Device, &MSC_Desc, 0);             // USB MSC initialization
 8009fca:	4c0b      	ldr	r4, [pc, #44]	; (8009ff8 <USB_MSC_Init_Start+0x30>)
 8009fcc:	490b      	ldr	r1, [pc, #44]	; (8009ffc <USB_MSC_Init_Start+0x34>)
 8009fce:	2200      	movs	r2, #0
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f7f8 fc44 	bl	800285e <USBD_Init>
	USBD_RegisterClass(&USBD_Device, USBD_MSC_CLASS);  // USB class registration
 8009fd6:	490a      	ldr	r1, [pc, #40]	; (800a000 <USB_MSC_Init_Start+0x38>)
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f7f8 fc6e 	bl	80028ba <USBD_RegisterClass>
	USBD_MSC_RegisterStorage(&USBD_Device, &USBD_DISK_fops); // Storage call backs
 8009fde:	4909      	ldr	r1, [pc, #36]	; (800a004 <USB_MSC_Init_Start+0x3c>)
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f7f9 f856 	bl	8003092 <USBD_MSC_RegisterStorage>
	USBD_Start(&USBD_Device);                                // Start USB MSC
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f7f8 fc6e 	bl	80028c8 <USBD_Start>

	delay_us(1000000);
 8009fec:	4806      	ldr	r0, [pc, #24]	; (800a008 <USB_MSC_Init_Start+0x40>)

}
 8009fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(1000000);
 8009ff2:	f001 bd53 	b.w	800ba9c <delay_us>
 8009ff6:	bf00      	nop
 8009ff8:	20008a54 	.word	0x20008a54
 8009ffc:	200000fc 	.word	0x200000fc
 800a000:	20000004 	.word	0x20000004
 800a004:	200002c8 	.word	0x200002c8
 800a008:	000f4240 	.word	0x000f4240

0800a00c <USB_VCP_Init_Start>:

void USB_VCP_Init_Start(void) {
 800a00c:	b510      	push	{r4, lr}
	USBD_Init(&USBD_Device, &VCP_Desc, 0);             // USB VCP initialization
 800a00e:	4c0b      	ldr	r4, [pc, #44]	; (800a03c <USB_VCP_Init_Start+0x30>)
 800a010:	490b      	ldr	r1, [pc, #44]	; (800a040 <USB_VCP_Init_Start+0x34>)
 800a012:	2200      	movs	r2, #0
 800a014:	4620      	mov	r0, r4
 800a016:	f7f8 fc22 	bl	800285e <USBD_Init>
	USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);  // USB class registration
 800a01a:	490a      	ldr	r1, [pc, #40]	; (800a044 <USB_VCP_Init_Start+0x38>)
 800a01c:	4620      	mov	r0, r4
 800a01e:	f7f8 fc4c 	bl	80028ba <USBD_RegisterClass>
	USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops); // VCP CDC call backs
 800a022:	4909      	ldr	r1, [pc, #36]	; (800a048 <USB_VCP_Init_Start+0x3c>)
 800a024:	4620      	mov	r0, r4
 800a026:	f002 fb2f 	bl	800c688 <USBD_CDC_RegisterInterface>
	USBD_Start(&USBD_Device);                                 // Start USB VCP
 800a02a:	4620      	mov	r0, r4
 800a02c:	f7f8 fc4c 	bl	80028c8 <USBD_Start>
	delay_us(1000000);
 800a030:	4806      	ldr	r0, [pc, #24]	; (800a04c <USB_VCP_Init_Start+0x40>)
}
 800a032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(1000000);
 800a036:	f001 bd31 	b.w	800ba9c <delay_us>
 800a03a:	bf00      	nop
 800a03c:	20008a54 	.word	0x20008a54
 800a040:	20000160 	.word	0x20000160
 800a044:	200001a8 	.word	0x200001a8
 800a048:	200002b8 	.word	0x200002b8
 800a04c:	000f4240 	.word	0x000f4240

0800a050 <Read_RTC_Timestamp>:
			__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC)),
			2000 + __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC)));
}

void Read_RTC_Timestamp(void)       // Read RTC timestamp and store in variables
{
 800a050:	b510      	push	{r4, lr}
// read RTC time in BCD format from registers and save in .BIN/.DEC format

	Hour = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 800a052:	f7ff fdf7 	bl	8009c44 <LL_RTC_TIME_GetHour.constprop.12>
 800a056:	4604      	mov	r4, r0
 800a058:	f7ff fdf4 	bl	8009c44 <LL_RTC_TIME_GetHour.constprop.12>
 800a05c:	f3c4 1303 	ubfx	r3, r4, #4, #4
 800a060:	4a2b      	ldr	r2, [pc, #172]	; (800a110 <Read_RTC_Timestamp+0xc0>)
 800a062:	f000 000f 	and.w	r0, r0, #15
 800a066:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a06a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a06e:	7013      	strb	r3, [r2, #0]
	Min = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 800a070:	f7ff fdce 	bl	8009c10 <LL_RTC_TIME_GetMinute.constprop.11>
 800a074:	4604      	mov	r4, r0
 800a076:	f7ff fdcb 	bl	8009c10 <LL_RTC_TIME_GetMinute.constprop.11>
 800a07a:	f3c4 1303 	ubfx	r3, r4, #4, #4
 800a07e:	4a25      	ldr	r2, [pc, #148]	; (800a114 <Read_RTC_Timestamp+0xc4>)
 800a080:	f000 000f 	and.w	r0, r0, #15
 800a084:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a088:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a08c:	7013      	strb	r3, [r2, #0]
	Sec = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800a08e:	f7ff fda7 	bl	8009be0 <LL_RTC_TIME_GetSecond.constprop.10>
 800a092:	4604      	mov	r4, r0
 800a094:	f7ff fda4 	bl	8009be0 <LL_RTC_TIME_GetSecond.constprop.10>
 800a098:	f3c4 1303 	ubfx	r3, r4, #4, #4
 800a09c:	4a1e      	ldr	r2, [pc, #120]	; (800a118 <Read_RTC_Timestamp+0xc8>)
 800a09e:	f000 000f 	and.w	r0, r0, #15
 800a0a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a0a6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a0aa:	7013      	strb	r3, [r2, #0]

	Mon = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 800a0ac:	f7ff fd64 	bl	8009b78 <LL_RTC_DATE_GetMonth.constprop.8>
 800a0b0:	4604      	mov	r4, r0
 800a0b2:	f7ff fd61 	bl	8009b78 <LL_RTC_DATE_GetMonth.constprop.8>
 800a0b6:	f3c4 1303 	ubfx	r3, r4, #4, #4
 800a0ba:	4a18      	ldr	r2, [pc, #96]	; (800a11c <Read_RTC_Timestamp+0xcc>)
 800a0bc:	f000 000f 	and.w	r0, r0, #15
 800a0c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a0c4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a0c8:	7013      	strb	r3, [r2, #0]
	Day = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 800a0ca:	f7ff fd3d 	bl	8009b48 <LL_RTC_DATE_GetDay.constprop.7>
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	f7ff fd3a 	bl	8009b48 <LL_RTC_DATE_GetDay.constprop.7>
 800a0d4:	f3c4 1303 	ubfx	r3, r4, #4, #4
 800a0d8:	4a11      	ldr	r2, [pc, #68]	; (800a120 <Read_RTC_Timestamp+0xd0>)
 800a0da:	f000 000f 	and.w	r0, r0, #15
 800a0de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a0e2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a0e6:	7013      	strb	r3, [r2, #0]
	Year = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 800a0e8:	f7ff fd60 	bl	8009bac <LL_RTC_DATE_GetYear.constprop.9>
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	f7ff fd5d 	bl	8009bac <LL_RTC_DATE_GetYear.constprop.9>
 800a0f2:	f3c4 1303 	ubfx	r3, r4, #4, #4
 800a0f6:	4a0b      	ldr	r2, [pc, #44]	; (800a124 <Read_RTC_Timestamp+0xd4>)
 800a0f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a0fc:	f000 000f 	and.w	r0, r0, #15
 800a100:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a104:	7013      	strb	r3, [r2, #0]

// Releasing RTC registers (Time and Date registers); necessary for RTC read/write operation
	(void) RTC->DR;
 800a106:	4b08      	ldr	r3, [pc, #32]	; (800a128 <Read_RTC_Timestamp+0xd8>)
 800a108:	685a      	ldr	r2, [r3, #4]
	(void) RTC->TR;
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	bd10      	pop	{r4, pc}
 800a10e:	bf00      	nop
 800a110:	2000b15e 	.word	0x2000b15e
 800a114:	2000b11c 	.word	0x2000b11c
 800a118:	2000b168 	.word	0x2000b168
 800a11c:	2000b44c 	.word	0x2000b44c
 800a120:	2000b43a 	.word	0x2000b43a
 800a124:	2000b465 	.word	0x2000b465
 800a128:	40002800 	.word	0x40002800

0800a12c <update_FATFS_time>:
{
 800a12c:	b508      	push	{r3, lr}
	Read_RTC_Timestamp();         // Read RTC time-stamps and store in variables
 800a12e:	f7ff ff8f 	bl	800a050 <Read_RTC_Timestamp>
	fno.fdate = (WORD) (((Year + 20) << 9) | Mon << 5 | Day); // Update File time with the data log starting time
 800a132:	4b0f      	ldr	r3, [pc, #60]	; (800a170 <update_FATFS_time+0x44>)
 800a134:	490f      	ldr	r1, [pc, #60]	; (800a174 <update_FATFS_time+0x48>)
 800a136:	781a      	ldrb	r2, [r3, #0]
 800a138:	4b0f      	ldr	r3, [pc, #60]	; (800a178 <update_FATFS_time+0x4c>)
	f_utime(FILE_NAME_STRING, &fno);     // Update RTC time on FATFS file header
 800a13a:	4810      	ldr	r0, [pc, #64]	; (800a17c <update_FATFS_time+0x50>)
	fno.fdate = (WORD) (((Year + 20) << 9) | Mon << 5 | Day); // Update File time with the data log starting time
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800a142:	4a0f      	ldr	r2, [pc, #60]	; (800a180 <update_FATFS_time+0x54>)
 800a144:	7812      	ldrb	r2, [r2, #0]
 800a146:	3214      	adds	r2, #20
 800a148:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 800a14c:	808b      	strh	r3, [r1, #4]
	fno.ftime = (WORD) (Hour << 11 | Min << 5 | Sec / 2); // Extracting values from RTC registers
 800a14e:	4b0d      	ldr	r3, [pc, #52]	; (800a184 <update_FATFS_time+0x58>)
 800a150:	781a      	ldrb	r2, [r3, #0]
 800a152:	4b0d      	ldr	r3, [pc, #52]	; (800a188 <update_FATFS_time+0x5c>)
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	015b      	lsls	r3, r3, #5
 800a158:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800a15c:	4a0b      	ldr	r2, [pc, #44]	; (800a18c <update_FATFS_time+0x60>)
 800a15e:	7812      	ldrb	r2, [r2, #0]
 800a160:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 800a164:	80cb      	strh	r3, [r1, #6]
}
 800a166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	f_utime(FILE_NAME_STRING, &fno);     // Update RTC time on FATFS file header
 800a16a:	f7f8 bb0e 	b.w	800278a <f_utime>
 800a16e:	bf00      	nop
 800a170:	2000b44c 	.word	0x2000b44c
 800a174:	2000b130 	.word	0x2000b130
 800a178:	2000b43a 	.word	0x2000b43a
 800a17c:	2000b14c 	.word	0x2000b14c
 800a180:	2000b465 	.word	0x2000b465
 800a184:	2000b15e 	.word	0x2000b15e
 800a188:	2000b11c 	.word	0x2000b11c
 800a18c:	2000b168 	.word	0x2000b168

0800a190 <File_Close_Update_Unlink>:
void File_Close_Update_Unlink(void) {
 800a190:	b508      	push	{r3, lr}
	f_close(&MyFile);                       // Close previous running file
 800a192:	4807      	ldr	r0, [pc, #28]	; (800a1b0 <File_Close_Update_Unlink+0x20>)
 800a194:	f7f8 f8cf 	bl	8002336 <f_close>
	update_FATFS_time(); // Write RTC time-stamp on File header/properties of last FATFS file to visualize in PC
 800a198:	f7ff ffc8 	bl	800a12c <update_FATFS_time>
	f_mount(0, "", 0); 	//  unmount FATFS file (of running sensor storage file)
 800a19c:	2200      	movs	r2, #0
 800a19e:	4905      	ldr	r1, [pc, #20]	; (800a1b4 <File_Close_Update_Unlink+0x24>)
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	f7f7 fe6b 	bl	8001e7c <f_mount>
	FATFS_UnLinkDriver(SDPath); //  unlink SD card driver (of running sensor storage file)
 800a1a6:	4804      	ldr	r0, [pc, #16]	; (800a1b8 <File_Close_Update_Unlink+0x28>)
}
 800a1a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath); //  unlink SD card driver (of running sensor storage file)
 800a1ac:	f7f8 bb54 	b.w	8002858 <FATFS_UnLinkDriver>
 800a1b0:	2000b468 	.word	0x2000b468
 800a1b4:	0800ecab 	.word	0x0800ecab
 800a1b8:	2000b1f9 	.word	0x2000b1f9

0800a1bc <Shut_Down_SD>:
 800a1bc:	f7ff bfe8 	b.w	800a190 <File_Close_Update_Unlink>

0800a1c0 <Enter_RTC_InitMode>:
}

void Enter_RTC_InitMode(void) // Function needed before writing on RTC registers
{
	RTC->ISR = RTC_INIT_MASK;                                // Enter Init Mode
 800a1c0:	4b03      	ldr	r3, [pc, #12]	; (800a1d0 <Enter_RTC_InitMode+0x10>)
 800a1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c6:	60da      	str	r2, [r3, #12]
	while (((RTC->ISR) & RTC_ISR_INITF) != (RTC_ISR_INITF))
 800a1c8:	68da      	ldr	r2, [r3, #12]
 800a1ca:	0652      	lsls	r2, r2, #25
 800a1cc:	d5fc      	bpl.n	800a1c8 <Enter_RTC_InitMode+0x8>
		; // Wait to enter Init mode
}
 800a1ce:	4770      	bx	lr
 800a1d0:	40002800 	.word	0x40002800

0800a1d4 <Exit_RTC_InitMode>:

void Exit_RTC_InitMode(void)   // Function needed after writing on RTC registers
{
	RTC->ISR = (uint32_t) ~RTC_ISR_INIT; // Disable RTC init mode
 800a1d4:	4b06      	ldr	r3, [pc, #24]	; (800a1f0 <Exit_RTC_InitMode+0x1c>)
 800a1d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a1da:	60da      	str	r2, [r3, #12]

	// Wait for synchro. Needed only if Shadow registers is enabled
	WRITE_REG(RTC->ISR,
 800a1dc:	68da      	ldr	r2, [r3, #12]
 800a1de:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800a1e2:	f062 02a0 	orn	r2, r2, #160	; 0xa0
 800a1e6:	60da      	str	r2, [r3, #12]
			(~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTC->ISR & RTC_ISR_INIT))); // Clear RTC sync flag
	while (((RTC->ISR) & RTC_ISR_RSF) != (RTC_ISR_RSF))
 800a1e8:	68da      	ldr	r2, [r3, #12]
 800a1ea:	0692      	lsls	r2, r2, #26
 800a1ec:	d5fc      	bpl.n	800a1e8 <Exit_RTC_InitMode+0x14>
		;  // Wait the registers to be synchronised
}
 800a1ee:	4770      	bx	lr
 800a1f0:	40002800 	.word	0x40002800

0800a1f4 <MX_RTC_Init>:

void MX_RTC_Init(void)                // RTC initialization after Power on reset
{
 800a1f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a1f6:	4b29      	ldr	r3, [pc, #164]	; (800a29c <MX_RTC_Init+0xa8>)
 800a1f8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a1fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a200:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a204:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a208:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a20c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a210:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a214:	f042 0201 	orr.w	r2, r2, #1
 800a218:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 800a21c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	LL_RTC_InitTypeDef RTC_InitStruct;

	LL_RCC_ForceBackupDomainReset();            // Reset Backup domain registers
	LL_RCC_ReleaseBackupDomainReset();
	LL_RCC_LSE_Enable();                    // Configure LSE as RTC source clock
	while (LL_RCC_LSE_IsReady() != 1)
 800a220:	0792      	lsls	r2, r2, #30
 800a222:	d5fb      	bpl.n	800a21c <MX_RTC_Init+0x28>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800a224:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
		;
	LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
	LL_RCC_EnableRTC();                           // RTC clock

	RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
	LL_RTC_Init(RTC, &RTC_InitStruct); // Initialize RTC with default configurations
 800a228:	4c1d      	ldr	r4, [pc, #116]	; (800a2a0 <MX_RTC_Init+0xac>)
 800a22a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a22e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a232:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800a236:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 800a23a:	a904      	add	r1, sp, #16
 800a23c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a240:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800a244:	2300      	movs	r3, #0
 800a246:	f841 3d0c 	str.w	r3, [r1, #-12]!
	LL_RTC_Init(RTC, &RTC_InitStruct); // Initialize RTC with default configurations
 800a24a:	4620      	mov	r0, r4
 800a24c:	f7fc f9dc 	bl	8006608 <LL_RTC_Init>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800a250:	23ca      	movs	r3, #202	; 0xca
 800a252:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800a254:	2353      	movs	r3, #83	; 0x53
 800a256:	6263      	str	r3, [r4, #36]	; 0x24

	LL_RTC_DisableWriteProtection(RTC);
	Enter_RTC_InitMode();     // Enter RTC initialization mode to set parameters
 800a258:	f7ff ffb2 	bl	800a1c0 <Enter_RTC_InitMode>

	// Calender set up
	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_A,
 800a25c:	6923      	ldr	r3, [r4, #16]
 800a25e:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800a262:	fa92 f2a2 	rbit	r2, r2
 800a266:	217f      	movs	r1, #127	; 0x7f
 800a268:	fab2 f282 	clz	r2, r2
 800a26c:	fa01 f202 	lsl.w	r2, r1, r2
 800a270:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800a274:	4313      	orrs	r3, r2
 800a276:	6123      	str	r3, [r4, #16]
			0x7F << RTC_POSITION_PRER_PREDIV_A);  // ASYNC prediv= 0x7F
	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_S, 0xFF);         // SYNC prediv= 0xFF
 800a278:	6923      	ldr	r3, [r4, #16]
 800a27a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a27e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a282:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 800a286:	6123      	str	r3, [r4, #16]

	Exit_RTC_InitMode();
 800a288:	f7ff ffa4 	bl	800a1d4 <Exit_RTC_InitMode>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800a28c:	23ff      	movs	r3, #255	; 0xff
 800a28e:	6263      	str	r3, [r4, #36]	; 0x24

	tmp = (uint32_t) (&(RTCx->BKP0R));
	tmp += (BackupRegister * 4U);

	/* Write the specified register */
	*(__IO uint32_t *) tmp = (uint32_t) Data;
 800a290:	4b04      	ldr	r3, [pc, #16]	; (800a2a4 <MX_RTC_Init+0xb0>)
 800a292:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800a296:	605a      	str	r2, [r3, #4]
}
 800a298:	b004      	add	sp, #16
 800a29a:	bd10      	pop	{r4, pc}
 800a29c:	40021000 	.word	0x40021000
 800a2a0:	40002800 	.word	0x40002800
 800a2a4:	40002850 	.word	0x40002850

0800a2a8 <Set_RTC_Calendar>:
		uint8_t Min, uint8_t Sec) {
 800a2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800a2aa:	4c19      	ldr	r4, [pc, #100]	; (800a310 <Set_RTC_Calendar+0x68>)
 800a2ac:	460f      	mov	r7, r1
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	23ca      	movs	r3, #202	; 0xca
 800a2b2:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800a2b4:	2353      	movs	r3, #83	; 0x53
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	6263      	str	r3, [r4, #36]	; 0x24
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	4615      	mov	r5, r2
	Enter_RTC_InitMode();
 800a2be:	f7ff ff7f 	bl	800a1c0 <Enter_RTC_InitMode>
	RTC_TimeStruct.Minutes = Min;
 800a2c2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
	RTC_TimeStruct.Hours = Hour;
 800a2c6:	f88d 100c 	strb.w	r1, [sp, #12]
	RTC_TimeStruct.Minutes = Min;
 800a2ca:	f88d 300d 	strb.w	r3, [sp, #13]
	LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 800a2ce:	aa02      	add	r2, sp, #8
	RTC_TimeStruct.Seconds = Sec;
 800a2d0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800a2d4:	f88d 300e 	strb.w	r3, [sp, #14]
	LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 800a2d8:	2100      	movs	r1, #0
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f7fc fa04 	bl	80066e8 <LL_RTC_TIME_Init>
	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;          // Default value
 800a2e0:	2301      	movs	r3, #1
	LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 800a2e2:	aa01      	add	r2, sp, #4
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	4620      	mov	r0, r4
	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;          // Default value
 800a2e8:	f88d 3004 	strb.w	r3, [sp, #4]
	RTC_DateStruct.Month = Month;
 800a2ec:	f88d 7005 	strb.w	r7, [sp, #5]
	RTC_DateStruct.Year = Year;
 800a2f0:	f88d 6007 	strb.w	r6, [sp, #7]
	RTC_DateStruct.Day = Day;
 800a2f4:	f88d 5006 	strb.w	r5, [sp, #6]
	LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 800a2f8:	f7fc fa3a 	bl	8006770 <LL_RTC_DATE_Init>
	Exit_RTC_InitMode();
 800a2fc:	f7ff ff6a 	bl	800a1d4 <Exit_RTC_InitMode>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800a300:	23ff      	movs	r3, #255	; 0xff
 800a302:	6263      	str	r3, [r4, #36]	; 0x24
	*(__IO uint32_t *) tmp = (uint32_t) Data;
 800a304:	4b03      	ldr	r3, [pc, #12]	; (800a314 <Set_RTC_Calendar+0x6c>)
 800a306:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800a30a:	605a      	str	r2, [r3, #4]
}
 800a30c:	b005      	add	sp, #20
 800a30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a310:	40002800 	.word	0x40002800
 800a314:	40002850 	.word	0x40002850

0800a318 <RTC_BAK_GetRegister>:

// Valid register value indicates RTC is enabled and running
uint32_t RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister) {
	register uint32_t tmp = 0U;

	tmp = (uint32_t) (&(RTCx->BKP0R));
 800a318:	3050      	adds	r0, #80	; 0x50
	tmp += (BackupRegister * 4U);

	/* Read the specified register */
	return (*(__IO uint32_t *) tmp);
 800a31a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
}
 800a31e:	4770      	bx	lr

0800a320 <USB_PA9_EXTI_conf>:
	LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_10);    // Enable PA10 pin EXTI interrupt
	LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_10); // Interrupt configured for falling edge
}

void USB_PA9_EXTI_conf(void) // PA9 EXTI pin interrupt configuration for USB connectivity Sense
{
 800a320:	b508      	push	{r3, lr}
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800a322:	4b0c      	ldr	r3, [pc, #48]	; (800a354 <USB_PA9_EXTI_conf+0x34>)
 800a324:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a328:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(EXTI9_5_IRQn); // Enabling External GPIO pin interrupt (EXTI9-5) for USB connectivity PA10 Pin
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG); // Enable Sysconfig clock to enable EXTI pin interrupts
 800a32a:	f7ff fca5 	bl	8009c78 <LL_APB2_GRP1_EnableClock.constprop.17>
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800a32e:	4a0a      	ldr	r2, [pc, #40]	; (800a358 <USB_PA9_EXTI_conf+0x38>)
 800a330:	6913      	ldr	r3, [r2, #16]
 800a332:	21f0      	movs	r1, #240	; 0xf0
 800a334:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a338:	fa91 f1a1 	rbit	r1, r1
 800a33c:	6113      	str	r3, [r2, #16]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800a33e:	4b07      	ldr	r3, [pc, #28]	; (800a35c <USB_PA9_EXTI_conf+0x3c>)
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a346:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800a348:	689a      	ldr	r2, [r3, #8]
 800a34a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a34e:	609a      	str	r2, [r3, #8]
 800a350:	bd08      	pop	{r3, pc}
 800a352:	bf00      	nop
 800a354:	e000e100 	.word	0xe000e100
 800a358:	40010000 	.word	0x40010000
 800a35c:	40010400 	.word	0x40010400

0800a360 <Wait_for_ADC_timeout_While_Datalog>:
	}
}

void Wait_for_ADC_timeout_While_Datalog(void) // During Timer_Interrupt for Data logging, Involved Volatile variables
{
	ADC_TimeOut_Count_Buf++;
 800a360:	4b06      	ldr	r3, [pc, #24]	; (800a37c <Wait_for_ADC_timeout_While_Datalog+0x1c>)
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	3201      	adds	r2, #1
 800a366:	601a      	str	r2, [r3, #0]
	if (ADC_TimeOut_Count_Buf > ADC_TimeOut_Limit_Buf) // 100ms= 48000*ADC_TimeOut_MS_value)
 800a368:	6819      	ldr	r1, [r3, #0]
 800a36a:	4a05      	ldr	r2, [pc, #20]	; (800a380 <Wait_for_ADC_timeout_While_Datalog+0x20>)
 800a36c:	4291      	cmp	r1, r2
 800a36e:	d904      	bls.n	800a37a <Wait_for_ADC_timeout_While_Datalog+0x1a>
	{
		ADC_TimeOut_Count_Buf = 0;
 800a370:	2200      	movs	r2, #0
 800a372:	601a      	str	r2, [r3, #0]
		ADC_Error_Buf = 1;
 800a374:	4b03      	ldr	r3, [pc, #12]	; (800a384 <Wait_for_ADC_timeout_While_Datalog+0x24>)
 800a376:	2201      	movs	r2, #1
 800a378:	701a      	strb	r2, [r3, #0]
 800a37a:	4770      	bx	lr
 800a37c:	2000b12c 	.word	0x2000b12c
 800a380:	00493e00 	.word	0x00493e00
 800a384:	2000b6eb 	.word	0x2000b6eb

0800a388 <Wait_for_ADC_TimeOut_>:
		SPI_Error = 1;
	}
}

void Wait_for_ADC_TimeOut_(void) {
	ADC_TimeOut_Count++;
 800a388:	4a06      	ldr	r2, [pc, #24]	; (800a3a4 <Wait_for_ADC_TimeOut_+0x1c>)
	if (ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 800a38a:	4907      	ldr	r1, [pc, #28]	; (800a3a8 <Wait_for_ADC_TimeOut_+0x20>)
	ADC_TimeOut_Count++;
 800a38c:	6813      	ldr	r3, [r2, #0]
 800a38e:	3301      	adds	r3, #1
	if (ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 800a390:	428b      	cmp	r3, r1
	{
		ADC_TimeOut_Count = 0;
 800a392:	bf83      	ittte	hi
 800a394:	2300      	movhi	r3, #0
 800a396:	6013      	strhi	r3, [r2, #0]
		ADC_Error = 1;
 800a398:	4b04      	ldrhi	r3, [pc, #16]	; (800a3ac <Wait_for_ADC_TimeOut_+0x24>)
	ADC_TimeOut_Count++;
 800a39a:	6013      	strls	r3, [r2, #0]
		ADC_Error = 1;
 800a39c:	bf84      	itt	hi
 800a39e:	2201      	movhi	r2, #1
 800a3a0:	701a      	strbhi	r2, [r3, #0]
 800a3a2:	4770      	bx	lr
 800a3a4:	2000b6ec 	.word	0x2000b6ec
 800a3a8:	00493e00 	.word	0x00493e00
 800a3ac:	2000b6e2 	.word	0x2000b6e2

0800a3b0 <P_Activate_ADC3>:
void P_Activate_ADC3(void) {
 800a3b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__IO uint32_t wait_loop_index = 0;
 800a3b2:	2300      	movs	r3, #0
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a3b4:	482c      	ldr	r0, [pc, #176]	; (800a468 <P_Activate_ADC3+0xb8>)
 800a3b6:	9301      	str	r3, [sp, #4]
 800a3b8:	6883      	ldr	r3, [r0, #8]
			* (SystemCoreClock / 100000) / 10);
 800a3ba:	4a2c      	ldr	r2, [pc, #176]	; (800a46c <P_Activate_ADC3+0xbc>)
 800a3bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800a3c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a3c4:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 800a3c6:	6883      	ldr	r3, [r0, #8]
 800a3c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800a3cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a3d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3d4:	6083      	str	r3, [r0, #8]
 800a3d6:	4b26      	ldr	r3, [pc, #152]	; (800a470 <P_Activate_ADC3+0xc0>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3de:	220a      	movs	r2, #10
 800a3e0:	4353      	muls	r3, r2
 800a3e2:	fbb3 f3f2 	udiv	r3, r3, r2
		wait_loop_index--;
 800a3e6:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 800a3e8:	9a01      	ldr	r2, [sp, #4]
 800a3ea:	2a00      	cmp	r2, #0
 800a3ec:	d12f      	bne.n	800a44e <P_Activate_ADC3+0x9e>
  MODIFY_REG(ADCx->CR,
 800a3ee:	6883      	ldr	r3, [r0, #8]
	ADC_TimeOut_Count = 0;
 800a3f0:	4d20      	ldr	r5, [pc, #128]	; (800a474 <P_Activate_ADC3+0xc4>)
	ADC_Error = 0;
 800a3f2:	4c21      	ldr	r4, [pc, #132]	; (800a478 <P_Activate_ADC3+0xc8>)
 800a3f4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a3f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a3fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a400:	6083      	str	r3, [r0, #8]
 800a402:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ADC_TimeOut_Count = 0;
 800a406:	602a      	str	r2, [r5, #0]
	ADC_Error = 0;
 800a408:	7022      	strb	r2, [r4, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800a40a:	6883      	ldr	r3, [r0, #8]
	while ((LL_ADC_IsCalibrationOnGoing(ADC3) == 0) && !Error_preceding
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	db04      	blt.n	800a41a <P_Activate_ADC3+0x6a>
 800a410:	6933      	ldr	r3, [r6, #16]
 800a412:	0599      	lsls	r1, r3, #22
 800a414:	d401      	bmi.n	800a41a <P_Activate_ADC3+0x6a>
			&& (ADC_Error == 0)) {
 800a416:	7823      	ldrb	r3, [r4, #0]
 800a418:	b1e3      	cbz	r3, 800a454 <P_Activate_ADC3+0xa4>
	wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES; // ADC Delay calculations
 800a41a:	2380      	movs	r3, #128	; 0x80
		wait_loop_index--;
 800a41c:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 800a41e:	9a01      	ldr	r2, [sp, #4]
 800a420:	b9da      	cbnz	r2, 800a45a <P_Activate_ADC3+0xaa>
  MODIFY_REG(ADCx->CR,
 800a422:	6883      	ldr	r3, [r0, #8]
 800a424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a428:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a42c:	f043 0301 	orr.w	r3, r3, #1
 800a430:	6083      	str	r3, [r0, #8]
	ADC_TimeOut_Count = 0;
 800a432:	602a      	str	r2, [r5, #0]
	ADC_Error = 0;
 800a434:	7022      	strb	r2, [r4, #0]
 800a436:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800a43a:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_ADRDY(ADC3) == 0) && !Error_preceding
 800a43c:	07da      	lsls	r2, r3, #31
 800a43e:	d404      	bmi.n	800a44a <P_Activate_ADC3+0x9a>
 800a440:	692b      	ldr	r3, [r5, #16]
 800a442:	059b      	lsls	r3, r3, #22
 800a444:	d401      	bmi.n	800a44a <P_Activate_ADC3+0x9a>
			&& (ADC_Error == 0)) {
 800a446:	7823      	ldrb	r3, [r4, #0]
 800a448:	b153      	cbz	r3, 800a460 <P_Activate_ADC3+0xb0>
}
 800a44a:	b002      	add	sp, #8
 800a44c:	bd70      	pop	{r4, r5, r6, pc}
		wait_loop_index--;
 800a44e:	9b01      	ldr	r3, [sp, #4]
 800a450:	3b01      	subs	r3, #1
 800a452:	e7c8      	b.n	800a3e6 <P_Activate_ADC3+0x36>
		Wait_for_ADC_TimeOut_();
 800a454:	f7ff ff98 	bl	800a388 <Wait_for_ADC_TimeOut_>
 800a458:	e7d7      	b.n	800a40a <P_Activate_ADC3+0x5a>
		wait_loop_index--;
 800a45a:	9b01      	ldr	r3, [sp, #4]
 800a45c:	3b01      	subs	r3, #1
 800a45e:	e7dd      	b.n	800a41c <P_Activate_ADC3+0x6c>
		Wait_for_ADC_TimeOut_();
 800a460:	f7ff ff92 	bl	800a388 <Wait_for_ADC_TimeOut_>
 800a464:	e7e9      	b.n	800a43a <P_Activate_ADC3+0x8a>
 800a466:	bf00      	nop
 800a468:	50040200 	.word	0x50040200
 800a46c:	000186a0 	.word	0x000186a0
 800a470:	200000f8 	.word	0x200000f8
 800a474:	2000b6ec 	.word	0x2000b6ec
 800a478:	2000b6e2 	.word	0x2000b6e2

0800a47c <P_Activate_ADC2>:
void P_Activate_ADC2(void) {
 800a47c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__IO uint32_t wait_loop_index = 0;
 800a47e:	2300      	movs	r3, #0
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a480:	482c      	ldr	r0, [pc, #176]	; (800a534 <P_Activate_ADC2+0xb8>)
 800a482:	9301      	str	r3, [sp, #4]
 800a484:	6883      	ldr	r3, [r0, #8]
			* (SystemCoreClock / 100000) / 10);
 800a486:	4a2c      	ldr	r2, [pc, #176]	; (800a538 <P_Activate_ADC2+0xbc>)
 800a488:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800a48c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a490:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 800a492:	6883      	ldr	r3, [r0, #8]
 800a494:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800a498:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a49c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4a0:	6083      	str	r3, [r0, #8]
 800a4a2:	4b26      	ldr	r3, [pc, #152]	; (800a53c <P_Activate_ADC2+0xc0>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4aa:	220a      	movs	r2, #10
 800a4ac:	4353      	muls	r3, r2
 800a4ae:	fbb3 f3f2 	udiv	r3, r3, r2
		wait_loop_index--;
 800a4b2:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 800a4b4:	9a01      	ldr	r2, [sp, #4]
 800a4b6:	2a00      	cmp	r2, #0
 800a4b8:	d12f      	bne.n	800a51a <P_Activate_ADC2+0x9e>
  MODIFY_REG(ADCx->CR,
 800a4ba:	6883      	ldr	r3, [r0, #8]
	ADC_TimeOut_Count = 0;
 800a4bc:	4d20      	ldr	r5, [pc, #128]	; (800a540 <P_Activate_ADC2+0xc4>)
	ADC_Error = 0;
 800a4be:	4c21      	ldr	r4, [pc, #132]	; (800a544 <P_Activate_ADC2+0xc8>)
 800a4c0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a4c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a4c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a4cc:	6083      	str	r3, [r0, #8]
 800a4ce:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ADC_TimeOut_Count = 0;
 800a4d2:	602a      	str	r2, [r5, #0]
	ADC_Error = 0;
 800a4d4:	7022      	strb	r2, [r4, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800a4d6:	6883      	ldr	r3, [r0, #8]
	while ((LL_ADC_IsCalibrationOnGoing(ADC2) == 0) && !Error_preceding
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	db04      	blt.n	800a4e6 <P_Activate_ADC2+0x6a>
 800a4dc:	6933      	ldr	r3, [r6, #16]
 800a4de:	0599      	lsls	r1, r3, #22
 800a4e0:	d401      	bmi.n	800a4e6 <P_Activate_ADC2+0x6a>
			&& (ADC_Error == 0)) {
 800a4e2:	7823      	ldrb	r3, [r4, #0]
 800a4e4:	b1e3      	cbz	r3, 800a520 <P_Activate_ADC2+0xa4>
	wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES; // ADC Delay calculations
 800a4e6:	2380      	movs	r3, #128	; 0x80
		wait_loop_index--;
 800a4e8:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 800a4ea:	9a01      	ldr	r2, [sp, #4]
 800a4ec:	b9da      	cbnz	r2, 800a526 <P_Activate_ADC2+0xaa>
  MODIFY_REG(ADCx->CR,
 800a4ee:	6883      	ldr	r3, [r0, #8]
 800a4f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a4f8:	f043 0301 	orr.w	r3, r3, #1
 800a4fc:	6083      	str	r3, [r0, #8]
	ADC_TimeOut_Count = 0;
 800a4fe:	602a      	str	r2, [r5, #0]
	ADC_Error = 0;
 800a500:	7022      	strb	r2, [r4, #0]
 800a502:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800a506:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_ADRDY(ADC2) == 0) && !Error_preceding
 800a508:	07da      	lsls	r2, r3, #31
 800a50a:	d404      	bmi.n	800a516 <P_Activate_ADC2+0x9a>
 800a50c:	692b      	ldr	r3, [r5, #16]
 800a50e:	059b      	lsls	r3, r3, #22
 800a510:	d401      	bmi.n	800a516 <P_Activate_ADC2+0x9a>
			&& (ADC_Error == 0)) {
 800a512:	7823      	ldrb	r3, [r4, #0]
 800a514:	b153      	cbz	r3, 800a52c <P_Activate_ADC2+0xb0>
}
 800a516:	b002      	add	sp, #8
 800a518:	bd70      	pop	{r4, r5, r6, pc}
		wait_loop_index--;
 800a51a:	9b01      	ldr	r3, [sp, #4]
 800a51c:	3b01      	subs	r3, #1
 800a51e:	e7c8      	b.n	800a4b2 <P_Activate_ADC2+0x36>
		Wait_for_ADC_TimeOut_();
 800a520:	f7ff ff32 	bl	800a388 <Wait_for_ADC_TimeOut_>
 800a524:	e7d7      	b.n	800a4d6 <P_Activate_ADC2+0x5a>
		wait_loop_index--;
 800a526:	9b01      	ldr	r3, [sp, #4]
 800a528:	3b01      	subs	r3, #1
 800a52a:	e7dd      	b.n	800a4e8 <P_Activate_ADC2+0x6c>
		Wait_for_ADC_TimeOut_();
 800a52c:	f7ff ff2c 	bl	800a388 <Wait_for_ADC_TimeOut_>
 800a530:	e7e9      	b.n	800a506 <P_Activate_ADC2+0x8a>
 800a532:	bf00      	nop
 800a534:	50040100 	.word	0x50040100
 800a538:	000186a0 	.word	0x000186a0
 800a53c:	200000f8 	.word	0x200000f8
 800a540:	2000b6ec 	.word	0x2000b6ec
 800a544:	2000b6e2 	.word	0x2000b6e2

0800a548 <P_Activate_ADC1>:
void P_Activate_ADC1(void) {
 800a548:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__IO uint32_t wait_loop_index = 0;
 800a54a:	2300      	movs	r3, #0
 800a54c:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a54e:	4b2d      	ldr	r3, [pc, #180]	; (800a604 <P_Activate_ADC1+0xbc>)
			* (SystemCoreClock / 100000) / 10);
 800a550:	492d      	ldr	r1, [pc, #180]	; (800a608 <P_Activate_ADC1+0xc0>)
 800a552:	689a      	ldr	r2, [r3, #8]
 800a554:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 800a558:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800a55c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 800a55e:	689a      	ldr	r2, [r3, #8]
 800a560:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 800a564:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800a568:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a56c:	609a      	str	r2, [r3, #8]
 800a56e:	4a27      	ldr	r2, [pc, #156]	; (800a60c <P_Activate_ADC1+0xc4>)
 800a570:	6812      	ldr	r2, [r2, #0]
 800a572:	fbb2 f2f1 	udiv	r2, r2, r1
 800a576:	210a      	movs	r1, #10
 800a578:	434a      	muls	r2, r1
 800a57a:	fbb2 f2f1 	udiv	r2, r2, r1
		wait_loop_index--;
 800a57e:	9201      	str	r2, [sp, #4]
	while (wait_loop_index != 0) {
 800a580:	9901      	ldr	r1, [sp, #4]
 800a582:	2900      	cmp	r1, #0
 800a584:	d132      	bne.n	800a5ec <P_Activate_ADC1+0xa4>
  MODIFY_REG(ADCx->CR,
 800a586:	689a      	ldr	r2, [r3, #8]
	ADC_TimeOut_Count = 0;
 800a588:	4c21      	ldr	r4, [pc, #132]	; (800a610 <P_Activate_ADC1+0xc8>)
	ADC_Error = 0;
 800a58a:	4822      	ldr	r0, [pc, #136]	; (800a614 <P_Activate_ADC1+0xcc>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800a58c:	4d1d      	ldr	r5, [pc, #116]	; (800a604 <P_Activate_ADC1+0xbc>)
  MODIFY_REG(ADCx->CR,
 800a58e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800a592:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800a596:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800a59a:	609a      	str	r2, [r3, #8]
 800a59c:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ADC_TimeOut_Count = 0;
 800a5a0:	6021      	str	r1, [r4, #0]
	ADC_Error = 0;
 800a5a2:	7001      	strb	r1, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800a5a4:	68ab      	ldr	r3, [r5, #8]
	while ((LL_ADC_IsCalibrationOnGoing(ADC1) == 0) && !Error_preceding
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	db04      	blt.n	800a5b4 <P_Activate_ADC1+0x6c>
 800a5aa:	6933      	ldr	r3, [r6, #16]
 800a5ac:	0599      	lsls	r1, r3, #22
 800a5ae:	d401      	bmi.n	800a5b4 <P_Activate_ADC1+0x6c>
			&& (ADC_Error == 0)) {
 800a5b0:	7803      	ldrb	r3, [r0, #0]
 800a5b2:	b1f3      	cbz	r3, 800a5f2 <P_Activate_ADC1+0xaa>
	wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES; // ADC Delay calculations
 800a5b4:	2380      	movs	r3, #128	; 0x80
		wait_loop_index--;
 800a5b6:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 800a5b8:	9901      	ldr	r1, [sp, #4]
 800a5ba:	b9e9      	cbnz	r1, 800a5f8 <P_Activate_ADC1+0xb0>
  MODIFY_REG(ADCx->CR,
 800a5bc:	4a11      	ldr	r2, [pc, #68]	; (800a604 <P_Activate_ADC1+0xbc>)
 800a5be:	6893      	ldr	r3, [r2, #8]
 800a5c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a5c8:	f043 0301 	orr.w	r3, r3, #1
 800a5cc:	6093      	str	r3, [r2, #8]
 800a5ce:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
	ADC_TimeOut_Count = 0;
 800a5d2:	6021      	str	r1, [r4, #0]
	ADC_Error = 0;
 800a5d4:	7001      	strb	r1, [r0, #0]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800a5d6:	4614      	mov	r4, r2
 800a5d8:	6823      	ldr	r3, [r4, #0]
	while ((LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0) && !Error_preceding
 800a5da:	07da      	lsls	r2, r3, #31
 800a5dc:	d404      	bmi.n	800a5e8 <P_Activate_ADC1+0xa0>
 800a5de:	692b      	ldr	r3, [r5, #16]
 800a5e0:	059b      	lsls	r3, r3, #22
 800a5e2:	d401      	bmi.n	800a5e8 <P_Activate_ADC1+0xa0>
			&& (ADC_Error == 0)) {
 800a5e4:	7803      	ldrb	r3, [r0, #0]
 800a5e6:	b153      	cbz	r3, 800a5fe <P_Activate_ADC1+0xb6>
}
 800a5e8:	b002      	add	sp, #8
 800a5ea:	bd70      	pop	{r4, r5, r6, pc}
		wait_loop_index--;
 800a5ec:	9a01      	ldr	r2, [sp, #4]
 800a5ee:	3a01      	subs	r2, #1
 800a5f0:	e7c5      	b.n	800a57e <P_Activate_ADC1+0x36>
		Wait_for_ADC_TimeOut_();
 800a5f2:	f7ff fec9 	bl	800a388 <Wait_for_ADC_TimeOut_>
 800a5f6:	e7d5      	b.n	800a5a4 <P_Activate_ADC1+0x5c>
		wait_loop_index--;
 800a5f8:	9b01      	ldr	r3, [sp, #4]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	e7db      	b.n	800a5b6 <P_Activate_ADC1+0x6e>
		Wait_for_ADC_TimeOut_();
 800a5fe:	f7ff fec3 	bl	800a388 <Wait_for_ADC_TimeOut_>
 800a602:	e7e9      	b.n	800a5d8 <P_Activate_ADC1+0x90>
 800a604:	50040000 	.word	0x50040000
 800a608:	000186a0 	.word	0x000186a0
 800a60c:	200000f8 	.word	0x200000f8
 800a610:	2000b6ec 	.word	0x2000b6ec
 800a614:	2000b6e2 	.word	0x2000b6e2

0800a618 <P_ADC1_conf_strain>:
  SET_BIT(RCC->AHB2RSTR, Periphs);
 800a618:	4b4f      	ldr	r3, [pc, #316]	; (800a758 <P_ADC1_conf_strain+0x140>)
 800a61a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a61c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
void P_ADC1_conf_strain(void) {
 800a620:	b570      	push	{r4, r5, r6, lr}
 800a622:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 800a624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a626:	4d4d      	ldr	r5, [pc, #308]	; (800a75c <P_ADC1_conf_strain+0x144>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 800a628:	4c4d      	ldr	r4, [pc, #308]	; (800a760 <P_ADC1_conf_strain+0x148>)
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3); // FSR1=PC2=Ch3=ADC1
 800a62a:	4e4e      	ldr	r6, [pc, #312]	; (800a764 <P_ADC1_conf_strain+0x14c>)
 800a62c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a630:	62da      	str	r2, [r3, #44]	; 0x2c
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 800a632:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a636:	f7ff f9f1 	bl	8009a1c <LL_AHB2_GRP1_EnableClock>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a63a:	68ab      	ldr	r3, [r5, #8]
 800a63c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800a640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a644:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 800a646:	68e3      	ldr	r3, [r4, #12]
 800a648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a64c:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 800a64e:	68e3      	ldr	r3, [r4, #12]
 800a650:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 800a654:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 800a656:	68e3      	ldr	r3, [r4, #12]
 800a658:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a65c:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 800a65e:	68e3      	ldr	r3, [r4, #12]
 800a660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a664:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800a666:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a668:	f023 030f 	bic.w	r3, r3, #15
 800a66c:	6323      	str	r3, [r4, #48]	; 0x30
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3); // FSR1=PC2=Ch3=ADC1
 800a66e:	4620      	mov	r0, r4
 800a670:	4632      	mov	r2, r6
 800a672:	2106      	movs	r1, #6
 800a674:	f7ff f9f6 	bl	8009a64 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3,
 800a678:	4620      	mov	r0, r4
 800a67a:	4631      	mov	r1, r6
 800a67c:	2207      	movs	r2, #7
 800a67e:	f7ff fa0f 	bl	8009aa0 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a682:	68ab      	ldr	r3, [r5, #8]
	LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 800a684:	4e38      	ldr	r6, [pc, #224]	; (800a768 <P_ADC1_conf_strain+0x150>)
 800a686:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 800a68a:	f504 7480 	add.w	r4, r4, #256	; 0x100
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a68e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a692:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 800a694:	68e3      	ldr	r3, [r4, #12]
 800a696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a69a:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 800a69c:	68e3      	ldr	r3, [r4, #12]
 800a69e:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 800a6a2:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 800a6a4:	68e3      	ldr	r3, [r4, #12]
 800a6a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a6aa:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 800a6ac:	68e3      	ldr	r3, [r4, #12]
 800a6ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a6b2:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800a6b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a6b6:	f023 030f 	bic.w	r3, r3, #15
 800a6ba:	6323      	str	r3, [r4, #48]	; 0x30
 800a6bc:	4632      	mov	r2, r6
 800a6be:	4620      	mov	r0, r4
 800a6c0:	2106      	movs	r1, #6
 800a6c2:	f7ff f9cf 	bl	8009a64 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4,
 800a6c6:	4631      	mov	r1, r6
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	2207      	movs	r2, #7
 800a6cc:	f7ff f9e8 	bl	8009aa0 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a6d0:	68ab      	ldr	r3, [r5, #8]
 800a6d2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800a6d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6da:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 800a6dc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 800a6e0:	4d22      	ldr	r5, [pc, #136]	; (800a76c <P_ADC1_conf_strain+0x154>)
 800a6e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a6e6:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 800a6ea:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800a6ee:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 800a6f2:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 800a6f6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800a6fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a6fe:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 800a702:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800a706:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a70a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800a70e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800a712:	f023 030f 	bic.w	r3, r3, #15
 800a716:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 800a71a:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800a71e:	462a      	mov	r2, r5
 800a720:	4620      	mov	r0, r4
 800a722:	2106      	movs	r1, #6
 800a724:	f7ff f99e 	bl	8009a64 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_2,
 800a728:	4629      	mov	r1, r5
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800a72a:	4d11      	ldr	r5, [pc, #68]	; (800a770 <P_ADC1_conf_strain+0x158>)
	LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_2,
 800a72c:	4620      	mov	r0, r4
 800a72e:	2207      	movs	r2, #7
 800a730:	f7ff f9b6 	bl	8009aa0 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800a734:	462a      	mov	r2, r5
 800a736:	4620      	mov	r0, r4
 800a738:	2106      	movs	r1, #6
 800a73a:	f7ff f993 	bl	8009a64 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_1,
 800a73e:	4629      	mov	r1, r5
 800a740:	4620      	mov	r0, r4
 800a742:	2207      	movs	r2, #7
 800a744:	f7ff f9ac 	bl	8009aa0 <LL_ADC_SetChannelSamplingTime>
	P_Activate_ADC3();
 800a748:	f7ff fe32 	bl	800a3b0 <P_Activate_ADC3>
	P_Activate_ADC2();
 800a74c:	f7ff fe96 	bl	800a47c <P_Activate_ADC2>
}
 800a750:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	P_Activate_ADC1();
 800a754:	f7ff bef8 	b.w	800a548 <P_Activate_ADC1>
 800a758:	40021000 	.word	0x40021000
 800a75c:	50040300 	.word	0x50040300
 800a760:	50040000 	.word	0x50040000
 800a764:	0c900008 	.word	0x0c900008
 800a768:	10c00010 	.word	0x10c00010
 800a76c:	08600004 	.word	0x08600004
 800a770:	04300002 	.word	0x04300002

0800a774 <P_ADC_Sensor_GPIO_Init>:
void P_ADC_Sensor_GPIO_Init(void) {
 800a774:	b510      	push	{r4, lr}
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_2, LL_GPIO_MODE_ANALOG);
 800a776:	4c16      	ldr	r4, [pc, #88]	; (800a7d0 <P_ADC_Sensor_GPIO_Init+0x5c>)
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800a778:	2004      	movs	r0, #4
 800a77a:	f7ff f94f 	bl	8009a1c <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_2, LL_GPIO_MODE_ANALOG);
 800a77e:	4620      	mov	r0, r4
 800a780:	2203      	movs	r2, #3
 800a782:	2104      	movs	r1, #4
 800a784:	f7ff f958 	bl	8009a38 <LL_GPIO_SetPinMode>
  SET_BIT(GPIOx->ASCR, PinMask);
 800a788:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a78a:	f043 0304 	orr.w	r3, r3, #4
 800a78e:	62e3      	str	r3, [r4, #44]	; 0x2c
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_3, LL_GPIO_MODE_ANALOG);
 800a790:	4620      	mov	r0, r4
 800a792:	2203      	movs	r2, #3
 800a794:	2108      	movs	r1, #8
 800a796:	f7ff f94f 	bl	8009a38 <LL_GPIO_SetPinMode>
 800a79a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a79c:	f043 0308 	orr.w	r3, r3, #8
 800a7a0:	62e3      	str	r3, [r4, #44]	; 0x2c
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_1, LL_GPIO_MODE_ANALOG);
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	2203      	movs	r2, #3
 800a7a6:	2102      	movs	r1, #2
 800a7a8:	f7ff f946 	bl	8009a38 <LL_GPIO_SetPinMode>
 800a7ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a7ae:	f043 0302 	orr.w	r3, r3, #2
 800a7b2:	62e3      	str	r3, [r4, #44]	; 0x2c
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_0, LL_GPIO_MODE_ANALOG);
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	2203      	movs	r2, #3
 800a7b8:	2101      	movs	r1, #1
 800a7ba:	f7ff f93d 	bl	8009a38 <LL_GPIO_SetPinMode>
 800a7be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a7c0:	f043 0301 	orr.w	r3, r3, #1
 800a7c4:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800a7c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	P_ADC1_conf_strain();
 800a7ca:	f7ff bf25 	b.w	800a618 <P_ADC1_conf_strain>
 800a7ce:	bf00      	nop
 800a7d0:	48000800 	.word	0x48000800

0800a7d4 <WriteReg1>:
  WRITE_REG(GPIOx->BRR, PinMask);
 800a7d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a7d8:	f44f 7280 	mov.w	r2, #256	; 0x100
	delay_us(5);
	LL_GPIO_SetOutputPin(SPI3_IMU5_CS_GPIO_Port, SPI3_IMU5_CS_Pin); // PA4 CS SET Active Low // for IMU5 changed here
	return temp_val;
}

unsigned int WriteReg1(uint8_t adress, uint8_t data) {
 800a7dc:	b510      	push	{r4, lr}
 800a7de:	629a      	str	r2, [r3, #40]	; 0x28
	unsigned int temp_val;
	LL_GPIO_ResetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);

	while (!(SPI1->SR & SPI_SR_TXE))
 800a7e0:	4a0c      	ldr	r2, [pc, #48]	; (800a814 <WriteReg1+0x40>)
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	6894      	ldr	r4, [r2, #8]
 800a7e6:	07a4      	lsls	r4, r4, #30
 800a7e8:	d5fc      	bpl.n	800a7e4 <WriteReg1+0x10>
 800a7ea:	7310      	strb	r0, [r2, #12]
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, adress);
	while (!(SPI1->SR & SPI_SR_RXNE))
 800a7ec:	689a      	ldr	r2, [r3, #8]
 800a7ee:	07d4      	lsls	r4, r2, #31
 800a7f0:	d5fc      	bpl.n	800a7ec <WriteReg1+0x18>
  return (uint8_t)(READ_REG(SPIx->DR));
 800a7f2:	68da      	ldr	r2, [r3, #12]
		; //data received?
	LL_SPI_ReceiveData8(SPI1);

	while (!(SPI1->SR & SPI_SR_TXE))
 800a7f4:	689a      	ldr	r2, [r3, #8]
 800a7f6:	0790      	lsls	r0, r2, #30
 800a7f8:	d5fc      	bpl.n	800a7f4 <WriteReg1+0x20>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 800a7fa:	7319      	strb	r1, [r3, #12]
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, data);
	while (!(SPI1->SR & SPI_SR_RXNE))
 800a7fc:	4b05      	ldr	r3, [pc, #20]	; (800a814 <WriteReg1+0x40>)
 800a7fe:	689a      	ldr	r2, [r3, #8]
 800a800:	07d2      	lsls	r2, r2, #31
 800a802:	d5fc      	bpl.n	800a7fe <WriteReg1+0x2a>
  return (uint8_t)(READ_REG(SPIx->DR));
 800a804:	68d8      	ldr	r0, [r3, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a806:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a80a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a80e:	619a      	str	r2, [r3, #24]
		; //data received?
	temp_val = LL_SPI_ReceiveData8(SPI1);

	LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);
	return temp_val;
}
 800a810:	b2c0      	uxtb	r0, r0
 800a812:	bd10      	pop	{r4, pc}
 800a814:	40013000 	.word	0x40013000

0800a818 <ReadRegs1>:
  WRITE_REG(GPIOx->BRR, PinMask);
 800a818:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
//
//	LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN); // PC4 CS SET Active Low
//
//}

void ReadRegs1(uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes) {
 800a81c:	b530      	push	{r4, r5, lr}
 800a81e:	f44f 7480 	mov.w	r4, #256	; 0x100
 800a822:	629c      	str	r4, [r3, #40]	; 0x28
	unsigned int i = 0;
	LL_GPIO_ResetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN); // PA4 CS RESET Active Low

	while (!(SPI1->SR & SPI_SR_TXE))
 800a824:	4b10      	ldr	r3, [pc, #64]	; (800a868 <ReadRegs1+0x50>)
 800a826:	461c      	mov	r4, r3
 800a828:	689d      	ldr	r5, [r3, #8]
 800a82a:	07ad      	lsls	r5, r5, #30
 800a82c:	d5fc      	bpl.n	800a828 <ReadRegs1+0x10>
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, (ReadAddr | 0x80)); // (Starting Address 0x22 | 0x80); MSB is '1' for 0x80, next 7 bit Address of register to write 0x22
 800a82e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 800a832:	7318      	strb	r0, [r3, #12]
	while (!(SPI1->SR & SPI_SR_RXNE))
 800a834:	68a3      	ldr	r3, [r4, #8]
 800a836:	07db      	lsls	r3, r3, #31
 800a838:	d5fc      	bpl.n	800a834 <ReadRegs1+0x1c>
  return (uint8_t)(READ_REG(SPIx->DR));
 800a83a:	68e3      	ldr	r3, [r4, #12]
		; //data received?
	LL_SPI_ReceiveData8(SPI1);

	for (i = 0; i < Bytes; i++) {
		while (!(SPI1->SR & SPI_SR_TXE))
 800a83c:	4b0a      	ldr	r3, [pc, #40]	; (800a868 <ReadRegs1+0x50>)
 800a83e:	440a      	add	r2, r1
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 800a840:	2000      	movs	r0, #0
	for (i = 0; i < Bytes; i++) {
 800a842:	4291      	cmp	r1, r2
 800a844:	d105      	bne.n	800a852 <ReadRegs1+0x3a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a846:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a84a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a84e:	619a      	str	r2, [r3, #24]
 800a850:	bd30      	pop	{r4, r5, pc}
		while (!(SPI1->SR & SPI_SR_TXE))
 800a852:	689c      	ldr	r4, [r3, #8]
 800a854:	07a5      	lsls	r5, r4, #30
 800a856:	d5fc      	bpl.n	800a852 <ReadRegs1+0x3a>
 800a858:	7318      	strb	r0, [r3, #12]
			; //transmit buffer empty?
		LL_SPI_TransmitData8(SPI1, 0x00);

		while (!(SPI1->SR & SPI_SR_RXNE))
 800a85a:	689c      	ldr	r4, [r3, #8]
 800a85c:	07e4      	lsls	r4, r4, #31
 800a85e:	d5fc      	bpl.n	800a85a <ReadRegs1+0x42>
  return (uint8_t)(READ_REG(SPIx->DR));
 800a860:	68dc      	ldr	r4, [r3, #12]
 800a862:	f801 4b01 	strb.w	r4, [r1], #1
 800a866:	e7ec      	b.n	800a842 <ReadRegs1+0x2a>
 800a868:	40013000 	.word	0x40013000

0800a86c <Read_Loadcell1>:
//
//return Load1;
//	  // ADC3 Ch2 PC1 read
//}

int Read_Loadcell1(void) {
 800a86c:	b508      	push	{r3, lr}
	int Load1;
	// ADC3 Ch1 PC0 read
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800a86e:	4a10      	ldr	r2, [pc, #64]	; (800a8b0 <Read_Loadcell1+0x44>)
 800a870:	4810      	ldr	r0, [pc, #64]	; (800a8b4 <Read_Loadcell1+0x48>)
 800a872:	2106      	movs	r1, #6
 800a874:	f7ff f8f6 	bl	8009a64 <LL_ADC_REG_SetSequencerRanks>

	LL_ADC_REG_StartConversion(ADC2);
 800a878:	480f      	ldr	r0, [pc, #60]	; (800a8b8 <Read_Loadcell1+0x4c>)
 800a87a:	f7ff f8c5 	bl	8009a08 <LL_ADC_REG_StartConversion>
	ADC_TimeOut_Count_Buf = 0;
 800a87e:	4a0f      	ldr	r2, [pc, #60]	; (800a8bc <Read_Loadcell1+0x50>)
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800a880:	480d      	ldr	r0, [pc, #52]	; (800a8b8 <Read_Loadcell1+0x4c>)
 800a882:	2300      	movs	r3, #0
 800a884:	6013      	str	r3, [r2, #0]
	ADC_Error_Buf = 0;
 800a886:	4a0e      	ldr	r2, [pc, #56]	; (800a8c0 <Read_Loadcell1+0x54>)
 800a888:	7013      	strb	r3, [r2, #0]
 800a88a:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_EOC(ADC2) == 0)) {
 800a88c:	075b      	lsls	r3, r3, #29
 800a88e:	d50b      	bpl.n	800a8a8 <Read_Loadcell1+0x3c>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a890:	2304      	movs	r3, #4
 800a892:	6003      	str	r3, [r0, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800a894:	6c00      	ldr	r0, [r0, #64]	; 0x40
		Wait_for_ADC_timeout_While_Datalog();
	}
	LL_ADC_ClearFlag_EOC(ADC2);
	Load1 = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI,
 800a896:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 800a89a:	b280      	uxth	r0, r0
 800a89c:	4343      	muls	r3, r0
			LL_ADC_REG_ReadConversionData12(ADC2), LL_ADC_RESOLUTION_12B); // Toe

	return Load1;
	// ADC3 Ch2 PC1 read
}
 800a89e:	f640 70ff 	movw	r0, #4095	; 0xfff
 800a8a2:	fbb3 f0f0 	udiv	r0, r3, r0
 800a8a6:	bd08      	pop	{r3, pc}
		Wait_for_ADC_timeout_While_Datalog();
 800a8a8:	f7ff fd5a 	bl	800a360 <Wait_for_ADC_timeout_While_Datalog>
 800a8ac:	e7ed      	b.n	800a88a <Read_Loadcell1+0x1e>
 800a8ae:	bf00      	nop
 800a8b0:	04300002 	.word	0x04300002
 800a8b4:	50040200 	.word	0x50040200
 800a8b8:	50040100 	.word	0x50040100
 800a8bc:	2000b12c 	.word	0x2000b12c
 800a8c0:	2000b6eb 	.word	0x2000b6eb

0800a8c4 <Read_Loadcell2>:

int Read_Loadcell2(void) {
 800a8c4:	b508      	push	{r3, lr}
	int Load2;
	// ADC3 Ch1 PC0 read
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800a8c6:	4a10      	ldr	r2, [pc, #64]	; (800a908 <Read_Loadcell2+0x44>)
 800a8c8:	4810      	ldr	r0, [pc, #64]	; (800a90c <Read_Loadcell2+0x48>)
 800a8ca:	2106      	movs	r1, #6
 800a8cc:	f7ff f8ca 	bl	8009a64 <LL_ADC_REG_SetSequencerRanks>

	LL_ADC_REG_StartConversion(ADC1);
 800a8d0:	480f      	ldr	r0, [pc, #60]	; (800a910 <Read_Loadcell2+0x4c>)
 800a8d2:	f7ff f899 	bl	8009a08 <LL_ADC_REG_StartConversion>
	ADC_TimeOut_Count_Buf = 0;
 800a8d6:	4a0f      	ldr	r2, [pc, #60]	; (800a914 <Read_Loadcell2+0x50>)
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800a8d8:	480d      	ldr	r0, [pc, #52]	; (800a910 <Read_Loadcell2+0x4c>)
 800a8da:	2300      	movs	r3, #0
 800a8dc:	6013      	str	r3, [r2, #0]
	ADC_Error_Buf = 0;
 800a8de:	4a0e      	ldr	r2, [pc, #56]	; (800a918 <Read_Loadcell2+0x54>)
 800a8e0:	7013      	strb	r3, [r2, #0]
 800a8e2:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0)) {
 800a8e4:	075b      	lsls	r3, r3, #29
 800a8e6:	d50b      	bpl.n	800a900 <Read_Loadcell2+0x3c>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a8e8:	2304      	movs	r3, #4
 800a8ea:	6003      	str	r3, [r0, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800a8ec:	6c00      	ldr	r0, [r0, #64]	; 0x40
		Wait_for_ADC_timeout_While_Datalog();
	}
	LL_ADC_ClearFlag_EOC(ADC1);
	Load2 = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI,
 800a8ee:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 800a8f2:	b280      	uxth	r0, r0
 800a8f4:	4343      	muls	r3, r0
			LL_ADC_REG_ReadConversionData12(ADC1), LL_ADC_RESOLUTION_12B); //Heel

	return Load2;
	// ADC3 Ch2 PC1 read
}
 800a8f6:	f640 70ff 	movw	r0, #4095	; 0xfff
 800a8fa:	fbb3 f0f0 	udiv	r0, r3, r0
 800a8fe:	bd08      	pop	{r3, pc}
		Wait_for_ADC_timeout_While_Datalog();
 800a900:	f7ff fd2e 	bl	800a360 <Wait_for_ADC_timeout_While_Datalog>
 800a904:	e7ed      	b.n	800a8e2 <Read_Loadcell2+0x1e>
 800a906:	bf00      	nop
 800a908:	04300002 	.word	0x04300002
 800a90c:	50040200 	.word	0x50040200
 800a910:	50040000 	.word	0x50040000
 800a914:	2000b12c 	.word	0x2000b12c
 800a918:	2000b6eb 	.word	0x2000b6eb

0800a91c <F_Sensor_ADC_Store>:

void F_Sensor_ADC_Store(void) {
 800a91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// ADC3 Ch1 PC0 read
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800a91e:	4a28      	ldr	r2, [pc, #160]	; (800a9c0 <F_Sensor_ADC_Store+0xa4>)
 800a920:	4828      	ldr	r0, [pc, #160]	; (800a9c4 <F_Sensor_ADC_Store+0xa8>)

	LL_ADC_REG_StartConversion(ADC2);
	ADC_TimeOut_Count_Buf = 0;
 800a922:	4d29      	ldr	r5, [pc, #164]	; (800a9c8 <F_Sensor_ADC_Store+0xac>)
	ADC_Error_Buf = 0;
 800a924:	4c29      	ldr	r4, [pc, #164]	; (800a9cc <F_Sensor_ADC_Store+0xb0>)
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800a926:	2106      	movs	r1, #6
 800a928:	f7ff f89c 	bl	8009a64 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_REG_StartConversion(ADC2);
 800a92c:	4828      	ldr	r0, [pc, #160]	; (800a9d0 <F_Sensor_ADC_Store+0xb4>)
 800a92e:	f7ff f86b 	bl	8009a08 <LL_ADC_REG_StartConversion>
	ADC_TimeOut_Count_Buf = 0;
 800a932:	2300      	movs	r3, #0
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800a934:	4826      	ldr	r0, [pc, #152]	; (800a9d0 <F_Sensor_ADC_Store+0xb4>)
 800a936:	602b      	str	r3, [r5, #0]
	ADC_Error_Buf = 0;
 800a938:	7023      	strb	r3, [r4, #0]
 800a93a:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_EOC(ADC2) == 0)) {
 800a93c:	075a      	lsls	r2, r3, #29
 800a93e:	d539      	bpl.n	800a9b4 <F_Sensor_ADC_Store+0x98>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a940:	2304      	movs	r3, #4
		Wait_for_ADC_timeout_While_Datalog();
	}
	LL_ADC_ClearFlag_EOC(ADC2);
	BSbuffer[s_flag].Loadcel1[Sub_cnt] = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 800a942:	4f24      	ldr	r7, [pc, #144]	; (800a9d4 <F_Sensor_ADC_Store+0xb8>)
 800a944:	4e24      	ldr	r6, [pc, #144]	; (800a9d8 <F_Sensor_ADC_Store+0xbc>)
 800a946:	6003      	str	r3, [r0, #0]
 800a948:	f897 e000 	ldrb.w	lr, [r7]
 800a94c:	6833      	ldr	r3, [r6, #0]
 800a94e:	4a23      	ldr	r2, [pc, #140]	; (800a9dc <F_Sensor_ADC_Store+0xc0>)
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800a950:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800a952:	eb03 334e 	add.w	r3, r3, lr, lsl #13
 800a956:	f503 53d2 	add.w	r3, r3, #6720	; 0x1a40
 800a95a:	3318      	adds	r3, #24
 800a95c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800a960:	b280      	uxth	r0, r0
 800a962:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800a966:	4341      	muls	r1, r0
 800a968:	f640 70ff 	movw	r0, #4095	; 0xfff
 800a96c:	fbb1 f1f0 	udiv	r1, r1, r0
			VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC2),
			LL_ADC_RESOLUTION_12B);  // Toe

	LL_ADC_REG_StartConversion(ADC1);
 800a970:	481b      	ldr	r0, [pc, #108]	; (800a9e0 <F_Sensor_ADC_Store+0xc4>)
	BSbuffer[s_flag].Loadcel1[Sub_cnt] = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 800a972:	8059      	strh	r1, [r3, #2]
	LL_ADC_REG_StartConversion(ADC1);
 800a974:	f7ff f848 	bl	8009a08 <LL_ADC_REG_StartConversion>
	ADC_TimeOut_Count_Buf = 0;
 800a978:	2300      	movs	r3, #0
 800a97a:	602b      	str	r3, [r5, #0]
	ADC_Error_Buf = 0;
 800a97c:	7023      	strb	r3, [r4, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 800a97e:	4c18      	ldr	r4, [pc, #96]	; (800a9e0 <F_Sensor_ADC_Store+0xc4>)
 800a980:	4610      	mov	r0, r2
 800a982:	6823      	ldr	r3, [r4, #0]
	while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0)) {
 800a984:	075b      	lsls	r3, r3, #29
 800a986:	d518      	bpl.n	800a9ba <F_Sensor_ADC_Store+0x9e>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a988:	2304      	movs	r3, #4
 800a98a:	6023      	str	r3, [r4, #0]
		Wait_for_ADC_timeout_While_Datalog();
	}
	LL_ADC_ClearFlag_EOC(ADC1);
	BSbuffer[s_flag].Loadcel2[Sub_cnt] = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 800a98c:	7839      	ldrb	r1, [r7, #0]
 800a98e:	6833      	ldr	r3, [r6, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800a990:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a992:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 800a996:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800a99a:	3318      	adds	r3, #24
 800a99c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a9a0:	b291      	uxth	r1, r2
 800a9a2:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800a9a6:	434a      	muls	r2, r1
 800a9a8:	f640 71ff 	movw	r1, #4095	; 0xfff
 800a9ac:	fbb2 f2f1 	udiv	r2, r2, r1
 800a9b0:	809a      	strh	r2, [r3, #4]
 800a9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Wait_for_ADC_timeout_While_Datalog();
 800a9b4:	f7ff fcd4 	bl	800a360 <Wait_for_ADC_timeout_While_Datalog>
 800a9b8:	e7bf      	b.n	800a93a <F_Sensor_ADC_Store+0x1e>
		Wait_for_ADC_timeout_While_Datalog();
 800a9ba:	f7ff fcd1 	bl	800a360 <Wait_for_ADC_timeout_While_Datalog>
 800a9be:	e7e0      	b.n	800a982 <F_Sensor_ADC_Store+0x66>
 800a9c0:	04300002 	.word	0x04300002
 800a9c4:	50040200 	.word	0x50040200
 800a9c8:	2000b12c 	.word	0x2000b12c
 800a9cc:	2000b6eb 	.word	0x2000b6eb
 800a9d0:	50040100 	.word	0x50040100
 800a9d4:	20000636 	.word	0x20000636
 800a9d8:	20000630 	.word	0x20000630
 800a9dc:	20000954 	.word	0x20000954
 800a9e0:	50040000 	.word	0x50040000

0800a9e4 <Configure_USART_1>:
	delay_us(10000);

}

void Configure_USART_1(void)   // USART1: PB6-Tx, (PA10-Rx disabled)
{
 800a9e4:	b538      	push	{r3, r4, r5, lr}

// Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 800a9e6:	4c20      	ldr	r4, [pc, #128]	; (800aa68 <Configure_USART_1+0x84>)
 800a9e8:	2202      	movs	r2, #2
 800a9ea:	2140      	movs	r1, #64	; 0x40
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f7ff f823 	bl	8009a38 <LL_GPIO_SetPinMode>
 800a9f2:	2540      	movs	r5, #64	; 0x40
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a9f4:	6a23      	ldr	r3, [r4, #32]
 800a9f6:	fa95 f1a5 	rbit	r1, r5
 800a9fa:	fab1 f181 	clz	r1, r1
 800a9fe:	fa95 f2a5 	rbit	r2, r5
 800aa02:	200f      	movs	r0, #15
 800aa04:	0089      	lsls	r1, r1, #2
 800aa06:	fa00 f101 	lsl.w	r1, r0, r1
 800aa0a:	fab2 f282 	clz	r2, r2
 800aa0e:	ea23 0301 	bic.w	r3, r3, r1
 800aa12:	0092      	lsls	r2, r2, #2
 800aa14:	2107      	movs	r1, #7
 800aa16:	fa01 f202 	lsl.w	r2, r1, r2
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	6223      	str	r3, [r4, #32]
	LL_GPIO_SetAFPin_0_7(GPIOB, LL_GPIO_PIN_6, LL_GPIO_AF_7);
	LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 800aa1e:	4629      	mov	r1, r5
 800aa20:	4620      	mov	r0, r4
 800aa22:	f7ff f87a 	bl	8009b1a <LL_GPIO_SetPinSpeed.constprop.6>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800aa26:	6863      	ldr	r3, [r4, #4]
 800aa28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa2c:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOB, LL_GPIO_PIN_6, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_UP);
 800aa2e:	2201      	movs	r2, #1
 800aa30:	4629      	mov	r1, r5
 800aa32:	4620      	mov	r0, r4
 800aa34:	f7ff f85b 	bl	8009aee <LL_GPIO_SetPinPull>

	RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1 clock enable, Clock source Default peripheral clock PCLK2, APB2
 800aa38:	4a0c      	ldr	r2, [pc, #48]	; (800aa6c <Configure_USART_1+0x88>)
 800aa3a:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800aa3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa40:	6613      	str	r3, [r2, #96]	; 0x60

// Default parameter: 8 data bit, 1 start bit, 1 stop bit, no parity, no hardware flow control

	MODIFY_REG(USART1->CR1, USART_CR1_RE | USART_CR1_TE,
 800aa42:	4b0b      	ldr	r3, [pc, #44]	; (800aa70 <Configure_USART_1+0x8c>)
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	f042 020c 	orr.w	r2, r2, #12
 800aa4a:	601a      	str	r2, [r3, #0]
			(USART_CR1_TE |USART_CR1_RE)); // TX/RX direction BidirecttionalLL_USART_DIRECTION_TX_RX

	USART1->BRR =
			(uint16_t) (__LL_USART_DIV_SAMPLING16(SystemCoreClock, 115200)); // Baud rate 115200
 800aa4c:	4a09      	ldr	r2, [pc, #36]	; (800aa74 <Configure_USART_1+0x90>)
 800aa4e:	6812      	ldr	r2, [r2, #0]
 800aa50:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800aa54:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 800aa58:	fbb2 f2f1 	udiv	r2, r2, r1
	USART1->BRR =
 800aa5c:	60da      	str	r2, [r3, #12]

	USART1->CR1 |= USART_CR1_UE;  // Unable USART1
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	f042 0201 	orr.w	r2, r2, #1
 800aa64:	601a      	str	r2, [r3, #0]
 800aa66:	bd38      	pop	{r3, r4, r5, pc}
 800aa68:	48000400 	.word	0x48000400
 800aa6c:	40021000 	.word	0x40021000
 800aa70:	40013800 	.word	0x40013800
 800aa74:	200000f8 	.word	0x200000f8

0800aa78 <USART1_wr_print>:

}

void USART1_wr_print(uint8_t *buffer, uint32_t nBytes) {
	for (int i = 0; i < nBytes; i++) {
		while (!(USART1->ISR & USART_ISR_TXE))
 800aa78:	4b09      	ldr	r3, [pc, #36]	; (800aaa0 <USART1_wr_print+0x28>)
 800aa7a:	4401      	add	r1, r0
	for (int i = 0; i < nBytes; i++) {
 800aa7c:	4288      	cmp	r0, r1
 800aa7e:	d100      	bne.n	800aa82 <USART1_wr_print+0xa>

		while (!(USART1->ISR & USART_ISR_TC))
			;
		USART1->ISR &= ~USART_ISR_TC;
	}
}
 800aa80:	4770      	bx	lr
		while (!(USART1->ISR & USART_ISR_TXE))
 800aa82:	69da      	ldr	r2, [r3, #28]
 800aa84:	0612      	lsls	r2, r2, #24
 800aa86:	d5fc      	bpl.n	800aa82 <USART1_wr_print+0xa>
		USART1->TDR = buffer[i] & 0xFF;
 800aa88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa8c:	851a      	strh	r2, [r3, #40]	; 0x28
		while (!(USART1->ISR & USART_ISR_TC))
 800aa8e:	69da      	ldr	r2, [r3, #28]
 800aa90:	0652      	lsls	r2, r2, #25
 800aa92:	d5fc      	bpl.n	800aa8e <USART1_wr_print+0x16>
		USART1->ISR &= ~USART_ISR_TC;
 800aa94:	69da      	ldr	r2, [r3, #28]
 800aa96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa9a:	61da      	str	r2, [r3, #28]
 800aa9c:	e7ee      	b.n	800aa7c <USART1_wr_print+0x4>
 800aa9e:	bf00      	nop
 800aaa0:	40013800 	.word	0x40013800

0800aaa4 <Clear_ErrorTimestamp_Buffer>:
}

int FPGA_Loop_Error_cnt;

void Clear_ErrorTimestamp_Buffer(void) {
	ErrorCodeBuf = 0;
 800aaa4:	4a02      	ldr	r2, [pc, #8]	; (800aab0 <Clear_ErrorTimestamp_Buffer+0xc>)
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	7013      	strb	r3, [r2, #0]
	ErrorTimeStampBuf = 0;
 800aaaa:	4a02      	ldr	r2, [pc, #8]	; (800aab4 <Clear_ErrorTimestamp_Buffer+0x10>)
 800aaac:	6013      	str	r3, [r2, #0]
 800aaae:	4770      	bx	lr
 800aab0:	20008a4d 	.word	0x20008a4d
 800aab4:	20008a50 	.word	0x20008a50

0800aab8 <Reset_All>:
{
 800aab8:	b508      	push	{r3, lr}
	last_file = 0;
 800aaba:	4b0d      	ldr	r3, [pc, #52]	; (800aaf0 <Reset_All+0x38>)
 800aabc:	2100      	movs	r1, #0
 800aabe:	6019      	str	r1, [r3, #0]
	Sub_cnt = 0;         // Array Index count in a single buffer to store values
 800aac0:	4b0c      	ldr	r3, [pc, #48]	; (800aaf4 <Reset_All+0x3c>)
 800aac2:	6019      	str	r1, [r3, #0]
	w_flag = 1; // Buffer write flag to be written in FATFS file (1=Buffer1, 0=Buffer0)
 800aac4:	4b0c      	ldr	r3, [pc, #48]	; (800aaf8 <Reset_All+0x40>)
 800aac6:	2201      	movs	r2, #1
 800aac8:	701a      	strb	r2, [r3, #0]
	s_flag = 0; // Buffer Store flag to be stored/filled by sensor values in interrupt (1=Buffer1, 0=Buffer0)
 800aaca:	4b0c      	ldr	r3, [pc, #48]	; (800aafc <Reset_All+0x44>)
 800aacc:	7019      	strb	r1, [r3, #0]
	SD_write_Flag = 0; // Flag to indicates whether a buffer a full and ready to write in SD card
 800aace:	4b0c      	ldr	r3, [pc, #48]	; (800ab00 <Reset_All+0x48>)
 800aad0:	7019      	strb	r1, [r3, #0]
	SD_Write_Count = 0; // Number of SD write. If reach a predefined value, f_sync() operation will update FATFS files.
 800aad2:	4b0c      	ldr	r3, [pc, #48]	; (800ab04 <Reset_All+0x4c>)
 800aad4:	7019      	strb	r1, [r3, #0]
	Clear_ErrorTimestamp_Buffer();
 800aad6:	f7ff ffe5 	bl	800aaa4 <Clear_ErrorTimestamp_Buffer>
 800aada:	4b0b      	ldr	r3, [pc, #44]	; (800ab08 <Reset_All+0x50>)
		Error_reg_log.Error[indxE] = 0;
 800aadc:	460a      	mov	r2, r1
 800aade:	f1a3 0008 	sub.w	r0, r3, #8
 800aae2:	540a      	strb	r2, [r1, r0]
	for (int indxE = 0; indxE < 10; indxE++) {
 800aae4:	3101      	adds	r1, #1
 800aae6:	290a      	cmp	r1, #10
		Error_reg_log.ErrorTime[indxE] = 0;
 800aae8:	f843 2f04 	str.w	r2, [r3, #4]!
	for (int indxE = 0; indxE < 10; indxE++) {
 800aaec:	d1f9      	bne.n	800aae2 <Reset_All+0x2a>
}
 800aaee:	bd08      	pop	{r3, pc}
 800aaf0:	2000b460 	.word	0x2000b460
 800aaf4:	20000630 	.word	0x20000630
 800aaf8:	200000f4 	.word	0x200000f4
 800aafc:	20000636 	.word	0x20000636
 800ab00:	20008a4c 	.word	0x20008a4c
 800ab04:	2000062c 	.word	0x2000062c
 800ab08:	2000895c 	.word	0x2000895c

0800ab0c <Save_ErrorTimestamp_Buffer>:
}

void Save_ErrorTimestamp_Buffer(uint8_t ErrorCode) {
 800ab0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ErrorCodeBuf = ErrorCode;
 800ab0e:	4b21      	ldr	r3, [pc, #132]	; (800ab94 <Save_ErrorTimestamp_Buffer+0x88>)
void Save_ErrorTimestamp_Buffer(uint8_t ErrorCode) {
 800ab10:	4606      	mov	r6, r0
	ErrorCodeBuf = ErrorCode;
 800ab12:	7018      	strb	r0, [r3, #0]
	ErrorTimeStampBuf =
			__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))
 800ab14:	f7ff f896 	bl	8009c44 <LL_RTC_TIME_GetHour.constprop.12>
 800ab18:	4604      	mov	r4, r0
 800ab1a:	f7ff f893 	bl	8009c44 <LL_RTC_TIME_GetHour.constprop.12>
 800ab1e:	4605      	mov	r5, r0
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800ab20:	f7ff f876 	bl	8009c10 <LL_RTC_TIME_GetMinute.constprop.11>
			__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))
 800ab24:	f3c4 1403 	ubfx	r4, r4, #4, #4
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800ab28:	4607      	mov	r7, r0
 800ab2a:	f7ff f871 	bl	8009c10 <LL_RTC_TIME_GetMinute.constprop.11>
			__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))
 800ab2e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800ab32:	f005 040f 	and.w	r4, r5, #15
 800ab36:	eb04 0443 	add.w	r4, r4, r3, lsl #1
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800ab3a:	f3c7 1303 	ubfx	r3, r7, #4, #4
 800ab3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ab42:	f000 000f 	and.w	r0, r0, #15
 800ab46:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800ab4a:	b2c0      	uxtb	r0, r0
 800ab4c:	2364      	movs	r3, #100	; 0x64
 800ab4e:	fb10 f003 	smulbb	r0, r0, r3
			__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))
 800ab52:	b2e4      	uxtb	r4, r4
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800ab54:	f242 7310 	movw	r3, #10000	; 0x2710
 800ab58:	fb03 0404 	mla	r4, r3, r4, r0
 800ab5c:	f7ff f840 	bl	8009be0 <LL_RTC_TIME_GetSecond.constprop.10>
 800ab60:	4605      	mov	r5, r0
 800ab62:	f7ff f83d 	bl	8009be0 <LL_RTC_TIME_GetSecond.constprop.10>
 800ab66:	f3c5 1303 	ubfx	r3, r5, #4, #4
 800ab6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ab6e:	f000 000f 	and.w	r0, r0, #15
 800ab72:	eb00 0043 	add.w	r0, r0, r3, lsl #1

	Error_reg_log.Error[Error_indx] = ErrorCode;
 800ab76:	4908      	ldr	r1, [pc, #32]	; (800ab98 <Save_ErrorTimestamp_Buffer+0x8c>)
	ErrorTimeStampBuf =
 800ab78:	4b08      	ldr	r3, [pc, #32]	; (800ab9c <Save_ErrorTimestamp_Buffer+0x90>)
	Error_reg_log.Error[Error_indx] = ErrorCode;
 800ab7a:	4a09      	ldr	r2, [pc, #36]	; (800aba0 <Save_ErrorTimestamp_Buffer+0x94>)
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800ab7c:	fa54 f480 	uxtab	r4, r4, r0
	ErrorTimeStampBuf =
 800ab80:	601c      	str	r4, [r3, #0]
	Error_reg_log.Error[Error_indx] = ErrorCode;
 800ab82:	780b      	ldrb	r3, [r1, #0]
 800ab84:	54d6      	strb	r6, [r2, r3]
	Error_reg_log.ErrorTime[Error_indx] = ErrorTimeStampBuf;
 800ab86:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Error_indx++;
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	700b      	strb	r3, [r1, #0]
	Error_reg_log.ErrorTime[Error_indx] = ErrorTimeStampBuf;
 800ab8e:	60d4      	str	r4, [r2, #12]
	Error_indx++;
 800ab90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab92:	bf00      	nop
 800ab94:	20008a4d 	.word	0x20008a4d
 800ab98:	2000b162 	.word	0x2000b162
 800ab9c:	20008a50 	.word	0x20008a50
 800aba0:	20008954 	.word	0x20008954

0800aba4 <AIM_Error_Handler>:
}

void AIM_Error_Handler(int AIM_Error_Code) {
	switch (AIM_Error_Code) {
 800aba4:	3801      	subs	r0, #1
void AIM_Error_Handler(int AIM_Error_Code) {
 800aba6:	b510      	push	{r4, lr}
	switch (AIM_Error_Code) {
 800aba8:	280f      	cmp	r0, #15
 800abaa:	d862      	bhi.n	800ac72 <AIM_Error_Handler+0xce>
 800abac:	e8df f000 	tbb	[pc, r0]
 800abb0:	392e611e 	.word	0x392e611e
 800abb4:	4661610f 	.word	0x4661610f
 800abb8:	54616161 	.word	0x54616161
 800abbc:	08616161 	.word	0x08616161

	case FPGA_SPI_R_Error:
		Save_ErrorTimestamp_Buffer(FPGA_SPI_R_Error);
 800abc0:	2010      	movs	r0, #16
 800abc2:	f7ff ffa3 	bl	800ab0c <Save_ErrorTimestamp_Buffer>
		FATAL_Error = 1;
 800abc6:	4b2b      	ldr	r3, [pc, #172]	; (800ac74 <AIM_Error_Handler+0xd0>)
 800abc8:	2201      	movs	r2, #1
 800abca:	701a      	strb	r2, [r3, #0]

		break;
 800abcc:	bd10      	pop	{r4, pc}

	case f_write_E:
		file_reopen();
 800abce:	f7ff f967 	bl	8009ea0 <file_reopen>
		if (Fat_write_read_fail == 1) // Could not solve write issue by reopening file
 800abd2:	4b29      	ldr	r3, [pc, #164]	; (800ac78 <AIM_Error_Handler+0xd4>)
 800abd4:	681c      	ldr	r4, [r3, #0]
 800abd6:	2c01      	cmp	r4, #1
 800abd8:	d14b      	bne.n	800ac72 <AIM_Error_Handler+0xce>
				{
			Fat_read_mnt_fail = 0;
 800abda:	4b28      	ldr	r3, [pc, #160]	; (800ac7c <AIM_Error_Handler+0xd8>)
 800abdc:	2200      	movs	r2, #0
			Save_ErrorTimestamp_Buffer(f_write_E);
 800abde:	2005      	movs	r0, #5
			Fat_read_mnt_fail = 0;
 800abe0:	601a      	str	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(f_write_E);
 800abe2:	f7ff ff93 	bl	800ab0c <Save_ErrorTimestamp_Buffer>
			File_Sensor_write_issue = 1;
 800abe6:	4b26      	ldr	r3, [pc, #152]	; (800ac80 <AIM_Error_Handler+0xdc>)
		file_reopen_sync();
		if (Fat_sync_read_fail == 1) // Could not solve write issue by reopening file
				{
			Fat_sync_read_fail = 0;
			Save_ErrorTimestamp_Buffer(f_sync_E);
			File_Sensor_close_issue = 1;
 800abe8:	701c      	strb	r4, [r3, #0]
 800abea:	e018      	b.n	800ac1e <AIM_Error_Handler+0x7a>
		file_mnt_reopen();
 800abec:	f7ff f970 	bl	8009ed0 <file_mnt_reopen>
		if (Fat_read_mnt_fail == 1) // Could not solve read issue by FATFS mount
 800abf0:	4b22      	ldr	r3, [pc, #136]	; (800ac7c <AIM_Error_Handler+0xd8>)
 800abf2:	681c      	ldr	r4, [r3, #0]
 800abf4:	2c01      	cmp	r4, #1
 800abf6:	d13c      	bne.n	800ac72 <AIM_Error_Handler+0xce>
			Fat_read_mnt_fail = 0;
 800abf8:	2200      	movs	r2, #0
			Save_ErrorTimestamp_Buffer(f_open_E);
 800abfa:	4620      	mov	r0, r4
			Fat_read_mnt_fail = 0;
 800abfc:	601a      	str	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(f_open_E);
 800abfe:	f7ff ff85 	bl	800ab0c <Save_ErrorTimestamp_Buffer>
			FATAL_Error = 1;
 800ac02:	4b1c      	ldr	r3, [pc, #112]	; (800ac74 <AIM_Error_Handler+0xd0>)
 800ac04:	701c      	strb	r4, [r3, #0]
			Skip_FATFS = 1;
 800ac06:	4b1f      	ldr	r3, [pc, #124]	; (800ac84 <AIM_Error_Handler+0xe0>)
			FATAL_Error = 1;
 800ac08:	701c      	strb	r4, [r3, #0]
 800ac0a:	bd10      	pop	{r4, pc}
		Try_FATFS_Mount();
 800ac0c:	f7ff f902 	bl	8009e14 <Try_FATFS_Mount>
		if (Skip_FATFS == 1)  // Could not solve FATFS mount
 800ac10:	4b1c      	ldr	r3, [pc, #112]	; (800ac84 <AIM_Error_Handler+0xe0>)
 800ac12:	781c      	ldrb	r4, [r3, #0]
 800ac14:	2c01      	cmp	r4, #1
 800ac16:	d12c      	bne.n	800ac72 <AIM_Error_Handler+0xce>
			Save_ErrorTimestamp_Buffer(f_mount_E);
 800ac18:	2003      	movs	r0, #3
 800ac1a:	f7ff ff77 	bl	800ab0c <Save_ErrorTimestamp_Buffer>
			FATAL_Error = 1;
 800ac1e:	4b15      	ldr	r3, [pc, #84]	; (800ac74 <AIM_Error_Handler+0xd0>)
 800ac20:	e7f2      	b.n	800ac08 <AIM_Error_Handler+0x64>
		file_reopen_sync();
 800ac22:	f7ff f925 	bl	8009e70 <file_reopen_sync>
		if (Fat_sync_read_fail == 1) // Could not solve write issue by reopening file
 800ac26:	4b18      	ldr	r3, [pc, #96]	; (800ac88 <AIM_Error_Handler+0xe4>)
 800ac28:	681c      	ldr	r4, [r3, #0]
 800ac2a:	2c01      	cmp	r4, #1
 800ac2c:	d121      	bne.n	800ac72 <AIM_Error_Handler+0xce>
			Fat_sync_read_fail = 0;
 800ac2e:	2200      	movs	r2, #0
			Save_ErrorTimestamp_Buffer(f_sync_E);
 800ac30:	2004      	movs	r0, #4
			Fat_sync_read_fail = 0;
 800ac32:	601a      	str	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(f_sync_E);
 800ac34:	f7ff ff6a 	bl	800ab0c <Save_ErrorTimestamp_Buffer>
			File_Sensor_close_issue = 1;
 800ac38:	4b14      	ldr	r3, [pc, #80]	; (800ac8c <AIM_Error_Handler+0xe8>)
 800ac3a:	e7d5      	b.n	800abe8 <AIM_Error_Handler+0x44>

		break;

	case SPI_Acc_Error:

		if (SPI_ErrorCnt > 3) {
 800ac3c:	4a14      	ldr	r2, [pc, #80]	; (800ac90 <AIM_Error_Handler+0xec>)
 800ac3e:	7813      	ldrb	r3, [r2, #0]
 800ac40:	2b03      	cmp	r3, #3
 800ac42:	d914      	bls.n	800ac6e <AIM_Error_Handler+0xca>
			SPI_ErrorCnt = 0;
 800ac44:	2300      	movs	r3, #0
 800ac46:	7013      	strb	r3, [r2, #0]
			FATAL_Error = 1;
 800ac48:	4b0a      	ldr	r3, [pc, #40]	; (800ac74 <AIM_Error_Handler+0xd0>)
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	701a      	strb	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(SPI_Acc_Error);
 800ac4e:	2008      	movs	r0, #8
	default:

		break;

	}
}
 800ac50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			Save_ErrorTimestamp_Buffer(ADC_R_Error);
 800ac54:	f7ff bf5a 	b.w	800ab0c <Save_ErrorTimestamp_Buffer>
		if (ADC_ErrorCnt > 3) {
 800ac58:	4a0e      	ldr	r2, [pc, #56]	; (800ac94 <AIM_Error_Handler+0xf0>)
 800ac5a:	7813      	ldrb	r3, [r2, #0]
 800ac5c:	2b03      	cmp	r3, #3
 800ac5e:	d906      	bls.n	800ac6e <AIM_Error_Handler+0xca>
			ADC_ErrorCnt = 0;
 800ac60:	2300      	movs	r3, #0
 800ac62:	7013      	strb	r3, [r2, #0]
			FATAL_Error = 1;
 800ac64:	4b03      	ldr	r3, [pc, #12]	; (800ac74 <AIM_Error_Handler+0xd0>)
 800ac66:	2201      	movs	r2, #1
 800ac68:	701a      	strb	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(ADC_R_Error);
 800ac6a:	200c      	movs	r0, #12
 800ac6c:	e7f0      	b.n	800ac50 <AIM_Error_Handler+0xac>
			ADC_ErrorCnt++;
 800ac6e:	3301      	adds	r3, #1
 800ac70:	7013      	strb	r3, [r2, #0]
 800ac72:	bd10      	pop	{r4, pc}
 800ac74:	2000b45c 	.word	0x2000b45c
 800ac78:	2000b108 	.word	0x2000b108
 800ac7c:	2000b1b0 	.word	0x2000b1b0
 800ac80:	2000b128 	.word	0x2000b128
 800ac84:	2000b45d 	.word	0x2000b45d
 800ac88:	2000b10c 	.word	0x2000b10c
 800ac8c:	2000b1f2 	.word	0x2000b1f2
 800ac90:	2000b6f0 	.word	0x2000b6f0
 800ac94:	2000b464 	.word	0x2000b464

0800ac98 <FATFS_Init>:
void FATFS_Init(void) {
 800ac98:	b510      	push	{r4, lr}
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 800ac9a:	490b      	ldr	r1, [pc, #44]	; (800acc8 <FATFS_Init+0x30>)
 800ac9c:	480b      	ldr	r0, [pc, #44]	; (800accc <FATFS_Init+0x34>)
 800ac9e:	4c0c      	ldr	r4, [pc, #48]	; (800acd0 <FATFS_Init+0x38>)
 800aca0:	f7f7 fdbe 	bl	8002820 <FATFS_LinkDriver>
 800aca4:	b928      	cbnz	r0, 800acb2 <FATFS_Init+0x1a>
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 800aca6:	2201      	movs	r2, #1
 800aca8:	4907      	ldr	r1, [pc, #28]	; (800acc8 <FATFS_Init+0x30>)
 800acaa:	480a      	ldr	r0, [pc, #40]	; (800acd4 <FATFS_Init+0x3c>)
 800acac:	f7f7 f8e6 	bl	8001e7c <f_mount>
 800acb0:	b108      	cbz	r0, 800acb6 <FATFS_Init+0x1e>
			Fat_mnt_fail = 1;
 800acb2:	2301      	movs	r3, #1
 800acb4:	6023      	str	r3, [r4, #0]
	if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 800acb6:	6823      	ldr	r3, [r4, #0]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d104      	bne.n	800acc6 <FATFS_Init+0x2e>
		AIM_Error_Handler(f_mount_E);
 800acbc:	2003      	movs	r0, #3
}
 800acbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		AIM_Error_Handler(f_mount_E);
 800acc2:	f7ff bf6f 	b.w	800aba4 <AIM_Error_Handler>
 800acc6:	bd10      	pop	{r4, pc}
 800acc8:	2000b1f9 	.word	0x2000b1f9
 800accc:	0800ddbc 	.word	0x0800ddbc
 800acd0:	2000b104 	.word	0x2000b104
 800acd4:	2000b208 	.word	0x2000b208

0800acd8 <Check_SD_Command_File>:
void Check_SD_Command_File(void) {
 800acd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Data_log_Start_Resume = 0;
 800acda:	4c31      	ldr	r4, [pc, #196]	; (800ada0 <Check_SD_Command_File+0xc8>)
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 800acdc:	4931      	ldr	r1, [pc, #196]	; (800ada4 <Check_SD_Command_File+0xcc>)
 800acde:	4832      	ldr	r0, [pc, #200]	; (800ada8 <Check_SD_Command_File+0xd0>)
 800ace0:	4e32      	ldr	r6, [pc, #200]	; (800adac <Check_SD_Command_File+0xd4>)
	Data_log_Start_Resume = 0;
 800ace2:	2300      	movs	r3, #0
 800ace4:	7023      	strb	r3, [r4, #0]
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 800ace6:	f7f7 fd9b 	bl	8002820 <FATFS_LinkDriver>
 800acea:	b930      	cbnz	r0, 800acfa <Check_SD_Command_File+0x22>
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 800acec:	2201      	movs	r2, #1
 800acee:	492d      	ldr	r1, [pc, #180]	; (800ada4 <Check_SD_Command_File+0xcc>)
 800acf0:	482f      	ldr	r0, [pc, #188]	; (800adb0 <Check_SD_Command_File+0xd8>)
 800acf2:	f7f7 f8c3 	bl	8001e7c <f_mount>
 800acf6:	4605      	mov	r5, r0
 800acf8:	b148      	cbz	r0, 800ad0e <Check_SD_Command_File+0x36>
			Fat_mnt_fail = 1;
 800acfa:	2301      	movs	r3, #1
 800acfc:	6033      	str	r3, [r6, #0]
	if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 800acfe:	6833      	ldr	r3, [r6, #0]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d14b      	bne.n	800ad9c <Check_SD_Command_File+0xc4>
		AIM_Error_Handler(f_mount_E);
 800ad04:	2003      	movs	r0, #3
}
 800ad06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		AIM_Error_Handler(f_mount_E);
 800ad0a:	f7ff bf4b 	b.w	800aba4 <AIM_Error_Handler>
			if (f_open(&MyFile, "EnterDFU.txt", FA_READ) != FR_OK) // Check the presence of EnterDFU.txt file
 800ad0e:	2201      	movs	r2, #1
 800ad10:	4928      	ldr	r1, [pc, #160]	; (800adb4 <Check_SD_Command_File+0xdc>)
 800ad12:	4829      	ldr	r0, [pc, #164]	; (800adb8 <Check_SD_Command_File+0xe0>)
 800ad14:	f7f7 f8e8 	bl	8001ee8 <f_open>
 800ad18:	4607      	mov	r7, r0
 800ad1a:	b360      	cbz	r0, 800ad76 <Check_SD_Command_File+0x9e>
				if (f_open(&MyFile, "EnterVCP.txt", FA_READ) != FR_OK) // Check the presence of EnterVCP.txt file
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	4927      	ldr	r1, [pc, #156]	; (800adbc <Check_SD_Command_File+0xe4>)
 800ad20:	4825      	ldr	r0, [pc, #148]	; (800adb8 <Check_SD_Command_File+0xe0>)
 800ad22:	f7f7 f8e1 	bl	8001ee8 <f_open>
 800ad26:	b1f0      	cbz	r0, 800ad66 <Check_SD_Command_File+0x8e>
					if (Logstart_Delete == 1) {
 800ad28:	4b25      	ldr	r3, [pc, #148]	; (800adc0 <Check_SD_Command_File+0xe8>)
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	2a01      	cmp	r2, #1
 800ad2e:	d104      	bne.n	800ad3a <Check_SD_Command_File+0x62>
						if (f_unlink("LogStart.txt") == FR_OK) { // If LogStart.txt file present, delete the file
 800ad30:	4824      	ldr	r0, [pc, #144]	; (800adc4 <Check_SD_Command_File+0xec>)
						Logstart_Delete = 0;
 800ad32:	601d      	str	r5, [r3, #0]
					if (f_unlink("EnterVCP.txt") == FR_OK) { // If EnterVCP.txt file present, delete the file
 800ad34:	f7f7 fcd8 	bl	80026e8 <f_unlink>
 800ad38:	e006      	b.n	800ad48 <Check_SD_Command_File+0x70>
						if (f_open(&MyFile, "LogStart.txt", FA_READ) != FR_OK) // Check the presence of LogStart.txt file
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	4921      	ldr	r1, [pc, #132]	; (800adc4 <Check_SD_Command_File+0xec>)
 800ad3e:	481e      	ldr	r0, [pc, #120]	; (800adb8 <Check_SD_Command_File+0xe0>)
 800ad40:	f7f7 f8d2 	bl	8001ee8 <f_open>
 800ad44:	b148      	cbz	r0, 800ad5a <Check_SD_Command_File+0x82>
							Data_log_Start_Resume = 0;         // Data Log Stops
 800ad46:	7025      	strb	r5, [r4, #0]
			f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 800ad48:	2200      	movs	r2, #0
 800ad4a:	491f      	ldr	r1, [pc, #124]	; (800adc8 <Check_SD_Command_File+0xf0>)
 800ad4c:	4610      	mov	r0, r2
 800ad4e:	f7f7 f895 	bl	8001e7c <f_mount>
			FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 800ad52:	4814      	ldr	r0, [pc, #80]	; (800ada4 <Check_SD_Command_File+0xcc>)
 800ad54:	f7f7 fd80 	bl	8002858 <FATFS_UnLinkDriver>
 800ad58:	e7d1      	b.n	800acfe <Check_SD_Command_File+0x26>
							Data_log_Start_Resume = 1; // Data Log Starts/Resume
 800ad5a:	2301      	movs	r3, #1
							f_close(&MyFile);
 800ad5c:	4816      	ldr	r0, [pc, #88]	; (800adb8 <Check_SD_Command_File+0xe0>)
							Data_log_Start_Resume = 1; // Data Log Starts/Resume
 800ad5e:	7023      	strb	r3, [r4, #0]
							f_close(&MyFile);
 800ad60:	f7f7 fae9 	bl	8002336 <f_close>
 800ad64:	e7f0      	b.n	800ad48 <Check_SD_Command_File+0x70>
					USB_Mode = 0;       // USB VCP mode in Next USB Connectivity
 800ad66:	4b19      	ldr	r3, [pc, #100]	; (800adcc <Check_SD_Command_File+0xf4>)
					Data_log_Start_Resume = 0;          // Data Log Stops
 800ad68:	7020      	strb	r0, [r4, #0]
					USB_Mode = 0;       // USB VCP mode in Next USB Connectivity
 800ad6a:	7018      	strb	r0, [r3, #0]
					f_close(&MyFile);
 800ad6c:	4812      	ldr	r0, [pc, #72]	; (800adb8 <Check_SD_Command_File+0xe0>)
 800ad6e:	f7f7 fae2 	bl	8002336 <f_close>
					if (f_unlink("EnterVCP.txt") == FR_OK) { // If EnterVCP.txt file present, delete the file
 800ad72:	4812      	ldr	r0, [pc, #72]	; (800adbc <Check_SD_Command_File+0xe4>)
 800ad74:	e7de      	b.n	800ad34 <Check_SD_Command_File+0x5c>
				f_close(&MyFile);
 800ad76:	4810      	ldr	r0, [pc, #64]	; (800adb8 <Check_SD_Command_File+0xe0>)
 800ad78:	f7f7 fadd 	bl	8002336 <f_close>
				if (f_unlink("EnterDFU.txt") == FR_OK) { // If EnterDFU.txt file present, delete the file
 800ad7c:	480d      	ldr	r0, [pc, #52]	; (800adb4 <Check_SD_Command_File+0xdc>)
 800ad7e:	f7f7 fcb3 	bl	80026e8 <f_unlink>
				f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 800ad82:	463a      	mov	r2, r7
 800ad84:	4910      	ldr	r1, [pc, #64]	; (800adc8 <Check_SD_Command_File+0xf0>)
 800ad86:	4638      	mov	r0, r7
 800ad88:	f7f7 f878 	bl	8001e7c <f_mount>
				FATFS_UnLinkDriver(SDPath); //  unlink SD card driver if necessary
 800ad8c:	4805      	ldr	r0, [pc, #20]	; (800ada4 <Check_SD_Command_File+0xcc>)
 800ad8e:	f7f7 fd63 	bl	8002858 <FATFS_UnLinkDriver>
				*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 800ad92:	4b0f      	ldr	r3, [pc, #60]	; (800add0 <Check_SD_Command_File+0xf8>)
 800ad94:	4a0f      	ldr	r2, [pc, #60]	; (800add4 <Check_SD_Command_File+0xfc>)
 800ad96:	601a      	str	r2, [r3, #0]
				NVIC_SystemReset();        // System reset
 800ad98:	f7fe fe24 	bl	80099e4 <NVIC_SystemReset>
 800ad9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	20008a45 	.word	0x20008a45
 800ada4:	2000b1f9 	.word	0x2000b1f9
 800ada8:	0800ddbc 	.word	0x0800ddbc
 800adac:	2000b104 	.word	0x2000b104
 800adb0:	2000b208 	.word	0x2000b208
 800adb4:	0800eaec 	.word	0x0800eaec
 800adb8:	2000b468 	.word	0x2000b468
 800adbc:	0800eaf9 	.word	0x0800eaf9
 800adc0:	2000bbfc 	.word	0x2000bbfc
 800adc4:	0800eb06 	.word	0x0800eb06
 800adc8:	0800ecab 	.word	0x0800ecab
 800adcc:	2000b728 	.word	0x2000b728
 800add0:	20017ff0 	.word	0x20017ff0
 800add4:	deadbeef 	.word	0xdeadbeef

0800add8 <Execute_VCP_Command>:
	if (EnterReset_Create == 1) {
 800add8:	4a10      	ldr	r2, [pc, #64]	; (800ae1c <Execute_VCP_Command+0x44>)
 800adda:	6811      	ldr	r1, [r2, #0]
void Execute_VCP_Command(void) {
 800addc:	b538      	push	{r3, r4, r5, lr}
	Data_log_Start_Resume = 0;
 800adde:	4c10      	ldr	r4, [pc, #64]	; (800ae20 <Execute_VCP_Command+0x48>)
 800ade0:	2300      	movs	r3, #0
	if (EnterReset_Create == 1) {
 800ade2:	2901      	cmp	r1, #1
	Data_log_Start_Resume = 0;
 800ade4:	7023      	strb	r3, [r4, #0]
	if (EnterReset_Create == 1) {
 800ade6:	d102      	bne.n	800adee <Execute_VCP_Command+0x16>
		EnterReset_Create = 0;
 800ade8:	6013      	str	r3, [r2, #0]
		NVIC_SystemReset();    // System reset
 800adea:	f7fe fdfb 	bl	80099e4 <NVIC_SystemReset>
	if (EnterDFU_Create == 1) {
 800adee:	4a0d      	ldr	r2, [pc, #52]	; (800ae24 <Execute_VCP_Command+0x4c>)
 800adf0:	6811      	ldr	r1, [r2, #0]
 800adf2:	2901      	cmp	r1, #1
 800adf4:	d104      	bne.n	800ae00 <Execute_VCP_Command+0x28>
		EnterDFU_Create = 0;
 800adf6:	6013      	str	r3, [r2, #0]
		*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 800adf8:	4b0b      	ldr	r3, [pc, #44]	; (800ae28 <Execute_VCP_Command+0x50>)
 800adfa:	4a0c      	ldr	r2, [pc, #48]	; (800ae2c <Execute_VCP_Command+0x54>)
 800adfc:	601a      	str	r2, [r3, #0]
 800adfe:	e7f4      	b.n	800adea <Execute_VCP_Command+0x12>
	if (Logstart_Create == 1) {
 800ae00:	4a0b      	ldr	r2, [pc, #44]	; (800ae30 <Execute_VCP_Command+0x58>)
 800ae02:	6815      	ldr	r5, [r2, #0]
 800ae04:	2d01      	cmp	r5, #1
 800ae06:	d107      	bne.n	800ae18 <Execute_VCP_Command+0x40>
		Logstart_Create = 0;
 800ae08:	6013      	str	r3, [r2, #0]
		FATFS_Logstart_Ready();
 800ae0a:	f7ff f8af 	bl	8009f6c <FATFS_Logstart_Ready>
		Data_log_Start_Resume = 1;
 800ae0e:	7025      	strb	r5, [r4, #0]
}
 800ae10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Check_SD_Command_File();
 800ae14:	f7ff bf60 	b.w	800acd8 <Check_SD_Command_File>
 800ae18:	bd38      	pop	{r3, r4, r5, pc}
 800ae1a:	bf00      	nop
 800ae1c:	2000c4e8 	.word	0x2000c4e8
 800ae20:	20008a45 	.word	0x20008a45
 800ae24:	2000d0d8 	.word	0x2000d0d8
 800ae28:	20017ff0 	.word	0x20017ff0
 800ae2c:	deadbeef 	.word	0xdeadbeef
 800ae30:	2000bc78 	.word	0x2000bc78

0800ae34 <Open_File_For_Sensor_Write>:
void Open_File_For_Sensor_Write(void) {
 800ae34:	b538      	push	{r3, r4, r5, lr}
	if (Skip_FATFS == 0) {
 800ae36:	4b15      	ldr	r3, [pc, #84]	; (800ae8c <Open_File_For_Sensor_Write+0x58>)
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	bb2b      	cbnz	r3, 800ae88 <Open_File_For_Sensor_Write+0x54>
		last_file = GetNextIndex("");
 800ae3c:	4814      	ldr	r0, [pc, #80]	; (800ae90 <Open_File_For_Sensor_Write+0x5c>)
		res = f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 800ae3e:	4c15      	ldr	r4, [pc, #84]	; (800ae94 <Open_File_For_Sensor_Write+0x60>)
 800ae40:	4d15      	ldr	r5, [pc, #84]	; (800ae98 <Open_File_For_Sensor_Write+0x64>)
		last_file = GetNextIndex("");
 800ae42:	f7fe ffb7 	bl	8009db4 <GetNextIndex>
 800ae46:	4b15      	ldr	r3, [pc, #84]	; (800ae9c <Open_File_For_Sensor_Write+0x68>)
		sprintf(FILE_NAME_STRING, "%06d.BIN", last_file);
 800ae48:	4915      	ldr	r1, [pc, #84]	; (800aea0 <Open_File_For_Sensor_Write+0x6c>)
		last_file = GetNextIndex("");
 800ae4a:	6018      	str	r0, [r3, #0]
 800ae4c:	4602      	mov	r2, r0
		sprintf(FILE_NAME_STRING, "%06d.BIN", last_file);
 800ae4e:	4815      	ldr	r0, [pc, #84]	; (800aea4 <Open_File_For_Sensor_Write+0x70>)
 800ae50:	f000 ff77 	bl	800bd42 <siprintf>
		res = f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 800ae54:	2212      	movs	r2, #18
 800ae56:	4913      	ldr	r1, [pc, #76]	; (800aea4 <Open_File_For_Sensor_Write+0x70>)
 800ae58:	4620      	mov	r0, r4
 800ae5a:	f7f7 f845 	bl	8001ee8 <f_open>
 800ae5e:	7028      	strb	r0, [r5, #0]
		if (res != FR_OK) // Create and Open a new text file object with write access
 800ae60:	b140      	cbz	r0, 800ae74 <Open_File_For_Sensor_Write+0x40>
			AIM_Error_Handler(f_open_E);
 800ae62:	2001      	movs	r0, #1
 800ae64:	f7ff fe9e 	bl	800aba4 <AIM_Error_Handler>
		delay_us(1000);  // Arbitrary delay to complete FATFS SD write
 800ae68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 800ae6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		delay_us(1000);  // Arbitrary delay to complete FATFS SD write
 800ae70:	f000 be14 	b.w	800ba9c <delay_us>
			f_lseek(&MyFile, MyFile.fsize); // Increase File Size when big file to write
 800ae74:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 800ae78:	4620      	mov	r0, r4
 800ae7a:	f7f7 fa6d 	bl	8002358 <f_lseek>
			res = f_sync(&MyFile);
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f7f7 f9f9 	bl	8002276 <f_sync>
 800ae84:	7028      	strb	r0, [r5, #0]
 800ae86:	e7ef      	b.n	800ae68 <Open_File_For_Sensor_Write+0x34>
 800ae88:	bd38      	pop	{r3, r4, r5, pc}
 800ae8a:	bf00      	nop
 800ae8c:	2000b45d 	.word	0x2000b45d
 800ae90:	0800ecab 	.word	0x0800ecab
 800ae94:	2000b468 	.word	0x2000b468
 800ae98:	2000b6ea 	.word	0x2000b6ea
 800ae9c:	2000b460 	.word	0x2000b460
 800aea0:	0800eb16 	.word	0x0800eb16
 800aea4:	2000b14c 	.word	0x2000b14c

0800aea8 <Datalog_Sensor_Initialization>:
void Datalog_Sensor_Initialization(void) {
 800aea8:	b508      	push	{r3, lr}
	FATFS_Init();
 800aeaa:	f7ff fef5 	bl	800ac98 <FATFS_Init>
	Open_File_For_Sensor_Write();
 800aeae:	f7ff ffc1 	bl	800ae34 <Open_File_For_Sensor_Write>
	if (Skip_FATFS == 0) {
 800aeb2:	4b04      	ldr	r3, [pc, #16]	; (800aec4 <Datalog_Sensor_Initialization+0x1c>)
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	b91b      	cbnz	r3, 800aec0 <Datalog_Sensor_Initialization+0x18>
}
 800aeb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Reset_All();         // Reset All Buffer parameters for FATFS SDIO write
 800aebc:	f7ff bdfc 	b.w	800aab8 <Reset_All>
 800aec0:	bd08      	pop	{r3, pc}
 800aec2:	bf00      	nop
 800aec4:	2000b45d 	.word	0x2000b45d

0800aec8 <Prepare_Data_Log_State>:
void Prepare_Data_Log_State(void) {
 800aec8:	b510      	push	{r4, lr}
	if (Skip_FATFS == 0)   // If there's no FATFS SD error
 800aeca:	4c12      	ldr	r4, [pc, #72]	; (800af14 <Prepare_Data_Log_State+0x4c>)
 800aecc:	7821      	ldrb	r1, [r4, #0]
 800aece:	b9d9      	cbnz	r1, 800af08 <Prepare_Data_Log_State+0x40>
		Battery_ADC_Value = 2500;
 800aed0:	4b11      	ldr	r3, [pc, #68]	; (800af18 <Prepare_Data_Log_State+0x50>)
 800aed2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800aed6:	801a      	strh	r2, [r3, #0]
			if (Data_log_Start_Resume == 1) // Continue Data Log after USB disconnect
 800aed8:	4b10      	ldr	r3, [pc, #64]	; (800af1c <Prepare_Data_Log_State+0x54>)
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d10c      	bne.n	800aefa <Prepare_Data_Log_State+0x32>
				Datalog_Sensor_Initialization();
 800aee0:	f7ff ffe2 	bl	800aea8 <Datalog_Sensor_Initialization>
				if (Skip_FATFS == 0)   // If there's no FATFS SD error
 800aee4:	7823      	ldrb	r3, [r4, #0]
 800aee6:	b97b      	cbnz	r3, 800af08 <Prepare_Data_Log_State+0x40>
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 800aee8:	4a0d      	ldr	r2, [pc, #52]	; (800af20 <Prepare_Data_Log_State+0x58>)
 800aeea:	6893      	ldr	r3, [r2, #8]
 800aeec:	f043 0302 	orr.w	r3, r3, #2
 800aef0:	6093      	str	r3, [r2, #8]
 800aef2:	4b0c      	ldr	r3, [pc, #48]	; (800af24 <Prepare_Data_Log_State+0x5c>)
 800aef4:	2204      	movs	r2, #4
 800aef6:	609a      	str	r2, [r3, #8]
 800aef8:	bd10      	pop	{r4, pc}
			else if (VCP_Bypass == 1) {
 800aefa:	4a0b      	ldr	r2, [pc, #44]	; (800af28 <Prepare_Data_Log_State+0x60>)
 800aefc:	4c0b      	ldr	r4, [pc, #44]	; (800af2c <Prepare_Data_Log_State+0x64>)
 800aefe:	7813      	ldrb	r3, [r2, #0]
 800af00:	2b01      	cmp	r3, #1
 800af02:	d102      	bne.n	800af0a <Prepare_Data_Log_State+0x42>
				VCP_Bypass = 0;
 800af04:	7011      	strb	r1, [r2, #0]
				Pros_state = Dormant_Idle_Stop;
 800af06:	7023      	strb	r3, [r4, #0]
 800af08:	bd10      	pop	{r4, pc}
				Prepare_Goto_Dormant_Mode();
 800af0a:	f7fe ff43 	bl	8009d94 <Prepare_Goto_Dormant_Mode>
				Pros_state = Dormant_Idle_Stop;
 800af0e:	2306      	movs	r3, #6
 800af10:	e7f9      	b.n	800af06 <Prepare_Data_Log_State+0x3e>
 800af12:	bf00      	nop
 800af14:	2000b45d 	.word	0x2000b45d
 800af18:	2000b438 	.word	0x2000b438
 800af1c:	20008a45 	.word	0x20008a45
 800af20:	40009400 	.word	0x40009400
 800af24:	e000e100 	.word	0xe000e100
 800af28:	2000b205 	.word	0x2000b205
 800af2c:	20008988 	.word	0x20008988

0800af30 <USB_Init_Start>:
void USB_Init_Start(void) {
 800af30:	b570      	push	{r4, r5, r6, lr}
	SD_POWER_ON();
 800af32:	f7fc fcfb 	bl	800792c <SD_POWER_ON>
	Pros_state = LP_STOP;                  // Next state
 800af36:	4b2d      	ldr	r3, [pc, #180]	; (800afec <USB_Init_Start+0xbc>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800af38:	492d      	ldr	r1, [pc, #180]	; (800aff0 <USB_Init_Start+0xc0>)
	if (Data_log_Start_Resume == 1)    // If Data log was in operation
 800af3a:	4d2e      	ldr	r5, [pc, #184]	; (800aff4 <USB_Init_Start+0xc4>)
	Pros_state = LP_STOP;                  // Next state
 800af3c:	2201      	movs	r2, #1
 800af3e:	701a      	strb	r2, [r3, #0]
 800af40:	2304      	movs	r3, #4
 800af42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	USB_Clock_Ready();
 800af46:	f7fe fedf 	bl	8009d08 <USB_Clock_Ready>
 800af4a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800af4e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if (Data_log_Start_Resume == 1)    // If Data log was in operation
 800af52:	782a      	ldrb	r2, [r5, #0]
 800af54:	2a01      	cmp	r2, #1
 800af56:	d101      	bne.n	800af5c <USB_Init_Start+0x2c>
		File_Close_Update_Unlink();
 800af58:	f7ff f91a 	bl	800a190 <File_Close_Update_Unlink>
	if (USB_Mode == 1)    // USB MSC Mode  // Default: USB VCP mode (0), MSC (1)
 800af5c:	4e26      	ldr	r6, [pc, #152]	; (800aff8 <USB_Init_Start+0xc8>)
	Data_log_Start_Resume = 0;
 800af5e:	2400      	movs	r4, #0
 800af60:	702c      	strb	r4, [r5, #0]
	HAL_ResumeTick();      // Before entering USB mode, SYS_tick needs to enable
 800af62:	f7f8 fc81 	bl	8003868 <HAL_ResumeTick>
	if (USB_Mode == 1)    // USB MSC Mode  // Default: USB VCP mode (0), MSC (1)
 800af66:	7833      	ldrb	r3, [r6, #0]
 800af68:	4d24      	ldr	r5, [pc, #144]	; (800affc <USB_Init_Start+0xcc>)
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d118      	bne.n	800afa0 <USB_Init_Start+0x70>
		VIOLET_LED_ONLY();
 800af6e:	f7fc fcbf 	bl	80078f0 <VIOLET_LED_ONLY>
		USB_Mode = 0;               // Next mode default USB VCP
 800af72:	7034      	strb	r4, [r6, #0]
		USB_MSC_Init_Start();
 800af74:	f7ff f828 	bl	8009fc8 <USB_MSC_Init_Start>
		FATAL_Error = 0;
 800af78:	702c      	strb	r4, [r5, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800af7a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800af7e:	6914      	ldr	r4, [r2, #16]
		while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 800af80:	f414 7400 	ands.w	r4, r4, #512	; 0x200
 800af84:	d1fb      	bne.n	800af7e <USB_Init_Start+0x4e>
		ALL_LED_OFF();
 800af86:	f7fc fc79 	bl	800787c <ALL_LED_OFF>
		Shut_Down_USB();
 800af8a:	f7fe fe9f 	bl	8009ccc <Shut_Down_USB>
		Enter_Into_DFU = 0;
 800af8e:	4b1c      	ldr	r3, [pc, #112]	; (800b000 <USB_Init_Start+0xd0>)
 800af90:	701c      	strb	r4, [r3, #0]
				Prepare_Data_Log_State();         // Prepare for Data collection
 800af92:	f7ff ff99 	bl	800aec8 <Prepare_Data_Log_State>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800af96:	4b16      	ldr	r3, [pc, #88]	; (800aff0 <USB_Init_Start+0xc0>)
 800af98:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800af9c:	601a      	str	r2, [r3, #0]
 800af9e:	bd70      	pop	{r4, r5, r6, pc}
		CYAN_LED_ONLY();
 800afa0:	f7fc fcb4 	bl	800790c <CYAN_LED_ONLY>
		USB_VCP_Init_Start();
 800afa4:	f7ff f832 	bl	800a00c <USB_VCP_Init_Start>
		if (Battey_Charge_Mode(&USBD_Device) == USBD_OK) // USB Battery charging mode
 800afa8:	4816      	ldr	r0, [pc, #88]	; (800b004 <USB_Init_Start+0xd4>)
 800afaa:	f7f7 fc6d 	bl	8002888 <Battey_Charge_Mode>
 800afae:	b960      	cbnz	r0, 800afca <USB_Init_Start+0x9a>
			FATAL_Error = 0;
 800afb0:	7028      	strb	r0, [r5, #0]
 800afb2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800afb6:	6913      	ldr	r3, [r2, #16]
			while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 800afb8:	059b      	lsls	r3, r3, #22
 800afba:	d4fc      	bmi.n	800afb6 <USB_Init_Start+0x86>
			Shut_Down_USB();
 800afbc:	f7fe fe86 	bl	8009ccc <Shut_Down_USB>
			ALL_LED_OFF();
 800afc0:	f7fc fc5c 	bl	800787c <ALL_LED_OFF>
			Check_SD_Command_File();
 800afc4:	f7ff fe88 	bl	800acd8 <Check_SD_Command_File>
 800afc8:	e7e3      	b.n	800af92 <USB_Init_Start+0x62>
			FATAL_Error = 0;
 800afca:	702c      	strb	r4, [r5, #0]
 800afcc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800afd0:	6914      	ldr	r4, [r2, #16]
			while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 800afd2:	f414 7400 	ands.w	r4, r4, #512	; 0x200
 800afd6:	d1fb      	bne.n	800afd0 <USB_Init_Start+0xa0>
			Shut_Down_USB();
 800afd8:	f7fe fe78 	bl	8009ccc <Shut_Down_USB>
			ALL_LED_OFF();
 800afdc:	f7fc fc4e 	bl	800787c <ALL_LED_OFF>
				VCP_continue = 0;               // Variable reset, aviod looping
 800afe0:	4b09      	ldr	r3, [pc, #36]	; (800b008 <USB_Init_Start+0xd8>)
 800afe2:	701c      	strb	r4, [r3, #0]
				Execute_VCP_Command();
 800afe4:	f7ff fef8 	bl	800add8 <Execute_VCP_Command>
 800afe8:	e7d3      	b.n	800af92 <USB_Init_Start+0x62>
 800afea:	bf00      	nop
 800afec:	20008988 	.word	0x20008988
 800aff0:	e000e100 	.word	0xe000e100
 800aff4:	20008a45 	.word	0x20008a45
 800aff8:	2000b728 	.word	0x2000b728
 800affc:	2000b45c 	.word	0x2000b45c
 800b000:	2000b206 	.word	0x2000b206
 800b004:	20008a54 	.word	0x20008a54
 800b008:	2000b192 	.word	0x2000b192

0800b00c <SD_Sensor_write>:
{
 800b00c:	b538      	push	{r3, r4, r5, lr}
	res = f_write(&MyFile, &BSbuffer[w_flag], (8192 * 2), &BytesWritten2);
 800b00e:	4b17      	ldr	r3, [pc, #92]	; (800b06c <SD_Sensor_write+0x60>)
 800b010:	4917      	ldr	r1, [pc, #92]	; (800b070 <SD_Sensor_write+0x64>)
 800b012:	7818      	ldrb	r0, [r3, #0]
 800b014:	4b17      	ldr	r3, [pc, #92]	; (800b074 <SD_Sensor_write+0x68>)
 800b016:	4c18      	ldr	r4, [pc, #96]	; (800b078 <SD_Sensor_write+0x6c>)
 800b018:	eb01 3180 	add.w	r1, r1, r0, lsl #14
 800b01c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b020:	4816      	ldr	r0, [pc, #88]	; (800b07c <SD_Sensor_write+0x70>)
 800b022:	f7f7 f839 	bl	8002098 <f_write>
 800b026:	7020      	strb	r0, [r4, #0]
	if (res != FR_OK)   // Write the sensor Buffer content to .BIN file
 800b028:	b1b8      	cbz	r0, 800b05a <SD_Sensor_write+0x4e>
		AIM_Error_Handler(f_write_E);
 800b02a:	2005      	movs	r0, #5
 800b02c:	f7ff fdba 	bl	800aba4 <AIM_Error_Handler>
	if (File_Sensor_write_issue == 0) {
 800b030:	4b13      	ldr	r3, [pc, #76]	; (800b080 <SD_Sensor_write+0x74>)
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	b9c3      	cbnz	r3, 800b068 <SD_Sensor_write+0x5c>
		if (SD_Write_Count == SD_cnt_limit) // After 50 SD card write, File Sync (176 write*20.45 sec = 60 minute
 800b036:	4a13      	ldr	r2, [pc, #76]	; (800b084 <SD_Sensor_write+0x78>)
 800b038:	4b13      	ldr	r3, [pc, #76]	; (800b088 <SD_Sensor_write+0x7c>)
 800b03a:	7811      	ldrb	r1, [r2, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4299      	cmp	r1, r3
 800b040:	4615      	mov	r5, r2
 800b042:	d10d      	bne.n	800b060 <SD_Sensor_write+0x54>
			res = f_sync(&MyFile);
 800b044:	480d      	ldr	r0, [pc, #52]	; (800b07c <SD_Sensor_write+0x70>)
 800b046:	f7f7 f916 	bl	8002276 <f_sync>
 800b04a:	7020      	strb	r0, [r4, #0]
			if (res != FR_OK) {
 800b04c:	b110      	cbz	r0, 800b054 <SD_Sensor_write+0x48>
				AIM_Error_Handler(f_sync_E);
 800b04e:	2004      	movs	r0, #4
 800b050:	f7ff fda8 	bl	800aba4 <AIM_Error_Handler>
			SD_Write_Count = 0;                       // Reset SD write counters
 800b054:	2300      	movs	r3, #0
 800b056:	702b      	strb	r3, [r5, #0]
 800b058:	bd38      	pop	{r3, r4, r5, pc}
		GREEN_LED_OFF();               // Sensor write Completed
 800b05a:	f7fc fc2c 	bl	80078b6 <GREEN_LED_OFF>
 800b05e:	e7e7      	b.n	800b030 <SD_Sensor_write+0x24>
			SD_Write_Count++;                      // Increment SD write counter
 800b060:	7813      	ldrb	r3, [r2, #0]
 800b062:	3301      	adds	r3, #1
 800b064:	b2db      	uxtb	r3, r3
 800b066:	7013      	strb	r3, [r2, #0]
 800b068:	bd38      	pop	{r3, r4, r5, pc}
 800b06a:	bf00      	nop
 800b06c:	200000f4 	.word	0x200000f4
 800b070:	20000954 	.word	0x20000954
 800b074:	2000b164 	.word	0x2000b164
 800b078:	2000b6ea 	.word	0x2000b6ea
 800b07c:	2000b468 	.word	0x2000b468
 800b080:	2000b128 	.word	0x2000b128
 800b084:	2000062c 	.word	0x2000062c
 800b088:	20008cab 	.word	0x20008cab

0800b08c <AIM_DataStart_at_Reset>:

void AIM_DataStart_at_Reset(void) {
 800b08c:	b510      	push	{r4, lr}
	SD_POWER_ON();
 800b08e:	f7fc fc4d 	bl	800792c <SD_POWER_ON>
	SD_cnt_limit = 3;                    // After 50 write, File will Sync
 800b092:	4b0f      	ldr	r3, [pc, #60]	; (800b0d0 <AIM_DataStart_at_Reset+0x44>)
 800b094:	2203      	movs	r2, #3
 800b096:	601a      	str	r2, [r3, #0]
	Data_log_Start_Resume = 1;
 800b098:	4b0e      	ldr	r3, [pc, #56]	; (800b0d4 <AIM_DataStart_at_Reset+0x48>)
 800b09a:	2401      	movs	r4, #1
 800b09c:	701c      	strb	r4, [r3, #0]
	FATFS_Init();
 800b09e:	f7ff fdfb 	bl	800ac98 <FATFS_Init>
	Open_File_For_Sensor_Write();
 800b0a2:	f7ff fec7 	bl	800ae34 <Open_File_For_Sensor_Write>
	Reset_All();
 800b0a6:	f7ff fd07 	bl	800aab8 <Reset_All>
//	  Start_LPTIMCounter2(0x10); //0xFF //0x4032768
	// Greg end comment

	// Greg start
	// Start interrupt (speed = 32,768 Hz / hex_value, i.e. 0x40 = 64 so speed = 32,768/64 = 512 Hz)
	Start_LPTIMCounter2(0x40);
 800b0aa:	2040      	movs	r0, #64	; 0x40
 800b0ac:	f000 fd00 	bl	800bab0 <Start_LPTIMCounter2>
 800b0b0:	4a09      	ldr	r2, [pc, #36]	; (800b0d8 <AIM_DataStart_at_Reset+0x4c>)
 800b0b2:	6893      	ldr	r3, [r2, #8]
 800b0b4:	f043 0302 	orr.w	r3, r3, #2
 800b0b8:	6093      	str	r3, [r2, #8]
 800b0ba:	4b08      	ldr	r3, [pc, #32]	; (800b0dc <AIM_DataStart_at_Reset+0x50>)
 800b0bc:	2204      	movs	r2, #4
 800b0be:	609a      	str	r2, [r3, #8]
	// Greg end

	LL_LPTIM_EnableIT_ARRM(LPTIM2);
	NVIC_EnableIRQ(LPTIM2_IRQn);
	Pros_state = LP_STOP;
 800b0c0:	4a07      	ldr	r2, [pc, #28]	; (800b0e0 <AIM_DataStart_at_Reset+0x54>)
 800b0c2:	7014      	strb	r4, [r2, #0]
	USB_Mode = 1;
 800b0c4:	4a07      	ldr	r2, [pc, #28]	; (800b0e4 <AIM_DataStart_at_Reset+0x58>)
 800b0c6:	7014      	strb	r4, [r2, #0]
 800b0c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	bd10      	pop	{r4, pc}
 800b0d0:	20008cab 	.word	0x20008cab
 800b0d4:	20008a45 	.word	0x20008a45
 800b0d8:	40009400 	.word	0x40009400
 800b0dc:	e000e100 	.word	0xe000e100
 800b0e0:	20008988 	.word	0x20008988
 800b0e4:	2000b728 	.word	0x2000b728

0800b0e8 <IMU1_read>:
//    BSbuffer[s_flag].MZ1[Sub_cnt]=((int16_t)response[19]<<8)|response[18];

	return data_az;
}

struct imu_data IMU1_read(void) {
 800b0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct imu_data IMU1;
	uint8_t response[21];
	WriteReg1(MPUREG_I2C_SLV0_ADDR, AK8963_I2C_ADDR | READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 800b0ea:	218c      	movs	r1, #140	; 0x8c
struct imu_data IMU1_read(void) {
 800b0ec:	b087      	sub	sp, #28
 800b0ee:	4604      	mov	r4, r0
	WriteReg1(MPUREG_I2C_SLV0_ADDR, AK8963_I2C_ADDR | READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 800b0f0:	2025      	movs	r0, #37	; 0x25
 800b0f2:	f7ff fb6f 	bl	800a7d4 <WriteReg1>
	WriteReg1(MPUREG_I2C_SLV0_REG, AK8963_HXL); // I2C slave 0 register address from where to begin data transfer
 800b0f6:	2103      	movs	r1, #3
 800b0f8:	2026      	movs	r0, #38	; 0x26
 800b0fa:	f7ff fb6b 	bl	800a7d4 <WriteReg1>
	WriteReg1(MPUREG_I2C_SLV0_CTRL, 0x87); // Read 7 bytes from the magnetometer
 800b0fe:	2187      	movs	r1, #135	; 0x87
 800b100:	2027      	movs	r0, #39	; 0x27
 800b102:	f7ff fb67 	bl	800a7d4 <WriteReg1>

	ReadRegs1(MPUREG_ACCEL_XOUT_H, response, 21);
 800b106:	4669      	mov	r1, sp
 800b108:	2215      	movs	r2, #21
 800b10a:	203b      	movs	r0, #59	; 0x3b
 800b10c:	f7ff fb84 	bl	800a818 <ReadRegs1>

	IMU1.AX = ((int16_t) response[0] << 8) | response[1];
	IMU1.AY = ((int16_t) response[2] << 8) | response[3];
 800b110:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b114:	f89d 5003 	ldrb.w	r5, [sp, #3]
	IMU1.AZ = ((int16_t) response[4] << 8) | response[5];
 800b118:	f89d 0005 	ldrb.w	r0, [sp, #5]
	IMU1.GX = ((int16_t) response[8] << 8) | response[9];
 800b11c:	f89d 1009 	ldrb.w	r1, [sp, #9]
	IMU1.GY = ((int16_t) response[10] << 8) | response[11];
 800b120:	f89d 200b 	ldrb.w	r2, [sp, #11]
	IMU1.GZ = ((int16_t) response[12] << 8) | response[13];
 800b124:	f89d 600c 	ldrb.w	r6, [sp, #12]
	IMU1.AX = ((int16_t) response[0] << 8) | response[1];
 800b128:	f89d 7000 	ldrb.w	r7, [sp]
	IMU1.AY = ((int16_t) response[2] << 8) | response[3];
 800b12c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	IMU1.AZ = ((int16_t) response[4] << 8) | response[5];
 800b130:	f89d 3004 	ldrb.w	r3, [sp, #4]

	return IMU1;
 800b134:	8065      	strh	r5, [r4, #2]
	IMU1.AZ = ((int16_t) response[4] << 8) | response[5];
 800b136:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	IMU1.GX = ((int16_t) response[8] << 8) | response[9];
 800b13a:	f89d 3008 	ldrb.w	r3, [sp, #8]
	return IMU1;
 800b13e:	80a0      	strh	r0, [r4, #4]
	IMU1.GX = ((int16_t) response[8] << 8) | response[9];
 800b140:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	IMU1.GY = ((int16_t) response[10] << 8) | response[11];
 800b144:	f89d 300a 	ldrb.w	r3, [sp, #10]
	return IMU1;
 800b148:	80e1      	strh	r1, [r4, #6]
	IMU1.GY = ((int16_t) response[10] << 8) | response[11];
 800b14a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	IMU1.GZ = ((int16_t) response[12] << 8) | response[13];
 800b14e:	f89d 300d 	ldrb.w	r3, [sp, #13]
	return IMU1;
 800b152:	8122      	strh	r2, [r4, #8]
	IMU1.GZ = ((int16_t) response[12] << 8) | response[13];
 800b154:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
	IMU1.AX = ((int16_t) response[0] << 8) | response[1];
 800b158:	f89d 6001 	ldrb.w	r6, [sp, #1]
	return IMU1;
 800b15c:	8163      	strh	r3, [r4, #10]
	IMU1.AX = ((int16_t) response[0] << 8) | response[1];
 800b15e:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
}
 800b162:	4620      	mov	r0, r4
	return IMU1;
 800b164:	8026      	strh	r6, [r4, #0]
}
 800b166:	b007      	add	sp, #28
 800b168:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b16c <Knee_data_storeIMU>:

void Knee_data_storeIMU(int value1, int value2, int value3, int value4,
		int value5, int value6) {
 800b16c:	b5f0      	push	{r4, r5, r6, r7, lr}

	BSbuffer[s_flag].AX1[Sub_cnt] = value1;
 800b16e:	4e1b      	ldr	r6, [pc, #108]	; (800b1dc <Knee_data_storeIMU+0x70>)
 800b170:	4d1b      	ldr	r5, [pc, #108]	; (800b1e0 <Knee_data_storeIMU+0x74>)
 800b172:	f896 e000 	ldrb.w	lr, [r6]
 800b176:	682f      	ldr	r7, [r5, #0]
 800b178:	4c1a      	ldr	r4, [pc, #104]	; (800b1e4 <Knee_data_storeIMU+0x78>)
 800b17a:	eb07 374e 	add.w	r7, r7, lr, lsl #13
 800b17e:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 800b182:	82f8      	strh	r0, [r7, #22]
	BSbuffer[s_flag].AY1[Sub_cnt] = value2;
 800b184:	7837      	ldrb	r7, [r6, #0]
 800b186:	6828      	ldr	r0, [r5, #0]
 800b188:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 800b18c:	f500 70f6 	add.w	r0, r0, #492	; 0x1ec
 800b190:	f824 1010 	strh.w	r1, [r4, r0, lsl #1]
	BSbuffer[s_flag].AZ1[Sub_cnt] = value3;
 800b194:	7830      	ldrb	r0, [r6, #0]
 800b196:	6829      	ldr	r1, [r5, #0]
 800b198:	eb01 3140 	add.w	r1, r1, r0, lsl #13
 800b19c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800b1a0:	f8a1 279a 	strh.w	r2, [r1, #1946]	; 0x79a
	BSbuffer[s_flag].GX1[Sub_cnt] = value4;
 800b1a4:	7831      	ldrb	r1, [r6, #0]
 800b1a6:	682a      	ldr	r2, [r5, #0]
 800b1a8:	eb02 3241 	add.w	r2, r2, r1, lsl #13
 800b1ac:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800b1b0:	f8a2 3b5c 	strh.w	r3, [r2, #2908]	; 0xb5c
	BSbuffer[s_flag].GY1[Sub_cnt] = value5;
 800b1b4:	7832      	ldrb	r2, [r6, #0]
 800b1b6:	682b      	ldr	r3, [r5, #0]
 800b1b8:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 800b1bc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800b1c0:	9a05      	ldr	r2, [sp, #20]
 800b1c2:	f8a3 2f1e 	strh.w	r2, [r3, #3870]	; 0xf1e
	BSbuffer[s_flag].GZ1[Sub_cnt] = value6;
 800b1c6:	7832      	ldrb	r2, [r6, #0]
 800b1c8:	682b      	ldr	r3, [r5, #0]
 800b1ca:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 800b1ce:	f503 6317 	add.w	r3, r3, #2416	; 0x970
 800b1d2:	9a06      	ldr	r2, [sp, #24]
 800b1d4:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
 800b1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	20000636 	.word	0x20000636
 800b1e0:	20000630 	.word	0x20000630
 800b1e4:	20000954 	.word	0x20000954

0800b1e8 <Knee_data_store>:
//	BSbuffer[s_flag].data8[Sub_cnt]=val8;
//
//
//}

void Knee_data_store(int val1, int val2, int val3, int val4) {
 800b1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	BSbuffer[s_flag].data1[Sub_cnt] = val1;
 800b1ea:	4e14      	ldr	r6, [pc, #80]	; (800b23c <Knee_data_store+0x54>)
 800b1ec:	4d14      	ldr	r5, [pc, #80]	; (800b240 <Knee_data_store+0x58>)
 800b1ee:	f896 e000 	ldrb.w	lr, [r6]
 800b1f2:	682f      	ldr	r7, [r5, #0]
 800b1f4:	4c13      	ldr	r4, [pc, #76]	; (800b244 <Knee_data_store+0x5c>)
 800b1f6:	eb07 374e 	add.w	r7, r7, lr, lsl #13
 800b1fa:	f507 6735 	add.w	r7, r7, #2896	; 0xb50
 800b1fe:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 800b202:	8078      	strh	r0, [r7, #2]
	BSbuffer[s_flag].data2[Sub_cnt] = val2;
 800b204:	7837      	ldrb	r7, [r6, #0]
 800b206:	6828      	ldr	r0, [r5, #0]
 800b208:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 800b20c:	f500 6053 	add.w	r0, r0, #3376	; 0xd30
 800b210:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 800b214:	8081      	strh	r1, [r0, #4]
	BSbuffer[s_flag].data3[Sub_cnt] = val3;
 800b216:	7830      	ldrb	r0, [r6, #0]
 800b218:	6829      	ldr	r1, [r5, #0]
 800b21a:	eb01 3140 	add.w	r1, r1, r0, lsl #13
 800b21e:	f501 6171 	add.w	r1, r1, #3856	; 0xf10
 800b222:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800b226:	80ca      	strh	r2, [r1, #6]
	BSbuffer[s_flag].data4[Sub_cnt] = val4;
 800b228:	7831      	ldrb	r1, [r6, #0]
 800b22a:	682a      	ldr	r2, [r5, #0]
 800b22c:	eb02 3241 	add.w	r2, r2, r1, lsl #13
 800b230:	f502 5287 	add.w	r2, r2, #4320	; 0x10e0
 800b234:	3214      	adds	r2, #20
 800b236:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 800b23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b23c:	20000636 	.word	0x20000636
 800b240:	20000630 	.word	0x20000630
 800b244:	20000954 	.word	0x20000954

0800b248 <Knee_data_store1>:
//	BSbuffer[s_flag].data6[Sub_cnt]=val6;
//	BSbuffer[s_flag].data7[Sub_cnt]=val7;
//	BSbuffer[s_flag].data8[Sub_cnt]=val8;
}

void Knee_data_store1(int val5, int val6, int val7, int val8) {
 800b248:	b5f0      	push	{r4, r5, r6, r7, lr}
//	BSbuffer[s_flag].data1[Sub_cnt]=val1;
//	BSbuffer[s_flag].data2[Sub_cnt]=val2;
//	BSbuffer[s_flag].data3[Sub_cnt]=val3;
//	BSbuffer[s_flag].data4[Sub_cnt]=val4;
	BSbuffer[s_flag].data5[Sub_cnt] = val5;
 800b24a:	4e16      	ldr	r6, [pc, #88]	; (800b2a4 <Knee_data_store1+0x5c>)
 800b24c:	4d16      	ldr	r5, [pc, #88]	; (800b2a8 <Knee_data_store1+0x60>)
 800b24e:	f896 e000 	ldrb.w	lr, [r6]
 800b252:	682f      	ldr	r7, [r5, #0]
 800b254:	4c15      	ldr	r4, [pc, #84]	; (800b2ac <Knee_data_store1+0x64>)
 800b256:	eb07 374e 	add.w	r7, r7, lr, lsl #13
 800b25a:	f507 5796 	add.w	r7, r7, #4800	; 0x12c0
 800b25e:	3714      	adds	r7, #20
 800b260:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 800b264:	8078      	strh	r0, [r7, #2]
	BSbuffer[s_flag].data6[Sub_cnt] = val6;
 800b266:	7837      	ldrb	r7, [r6, #0]
 800b268:	6828      	ldr	r0, [r5, #0]
 800b26a:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 800b26e:	f500 50a5 	add.w	r0, r0, #5280	; 0x14a0
 800b272:	3014      	adds	r0, #20
 800b274:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 800b278:	8081      	strh	r1, [r0, #4]
	BSbuffer[s_flag].data7[Sub_cnt] = val7;
 800b27a:	7830      	ldrb	r0, [r6, #0]
 800b27c:	6829      	ldr	r1, [r5, #0]
 800b27e:	eb01 3140 	add.w	r1, r1, r0, lsl #13
 800b282:	f501 51b4 	add.w	r1, r1, #5760	; 0x1680
 800b286:	3114      	adds	r1, #20
 800b288:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800b28c:	80ca      	strh	r2, [r1, #6]
	BSbuffer[s_flag].data8[Sub_cnt] = val8;
 800b28e:	7831      	ldrb	r1, [r6, #0]
 800b290:	682a      	ldr	r2, [r5, #0]
 800b292:	eb02 3241 	add.w	r2, r2, r1, lsl #13
 800b296:	f502 52c3 	add.w	r2, r2, #6240	; 0x1860
 800b29a:	3218      	adds	r2, #24
 800b29c:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 800b2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20000636 	.word	0x20000636
 800b2a8:	20000630 	.word	0x20000630
 800b2ac:	20000954 	.word	0x20000954

0800b2b0 <Mag_Enc2_Store>:
  WRITE_REG(GPIOx->BRR, PinMask);
 800b2b0:	4b1f      	ldr	r3, [pc, #124]	; (800b330 <Mag_Enc2_Store+0x80>)
//
////	BSbuffer[s_flag].Enc1[Sub_cnt]=tempPosition;
	// Greg end comment out
}

void Mag_Enc2_Store(void) {
 800b2b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b6:	2240      	movs	r2, #64	; 0x40
 800b2b8:	2780      	movs	r7, #128	; 0x80
 800b2ba:	4e1e      	ldr	r6, [pc, #120]	; (800b334 <Mag_Enc2_Store+0x84>)
 800b2bc:	629a      	str	r2, [r3, #40]	; 0x28
	uint8_t tempRead = 0;
	uint8_t Flags[6];
	LL_GPIO_ResetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	// Sensor feeds out position MSB first
	for (i = 11; i >= 0; i--) {
 800b2be:	240b      	movs	r4, #11
	int tempPosition = 0;
 800b2c0:	2500      	movs	r5, #0
 800b2c2:	46b8      	mov	r8, r7
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 800b2c4:	200a      	movs	r0, #10
 800b2c6:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 800b2ca:	f000 fbe7 	bl	800ba9c <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b2ce:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 800b2d0:	200a      	movs	r0, #10
 800b2d2:	f000 fbe3 	bl	800ba9c <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800b2d6:	4b16      	ldr	r3, [pc, #88]	; (800b330 <Mag_Enc2_Store+0x80>)
 800b2d8:	691b      	ldr	r3, [r3, #16]
 800b2da:	f3c3 13c0 	ubfx	r3, r3, #7, #1

		tempRead = LL_GPIO_IsInputPinSet(ENC2_DATA_GPIO_PORT, ENC2_DATA_PIN)
				& 0x01;
		tempPosition |= (tempRead) << i;
 800b2de:	40a3      	lsls	r3, r4
	for (i = 11; i >= 0; i--) {
 800b2e0:	f114 34ff 	adds.w	r4, r4, #4294967295
		tempPosition |= (tempRead) << i;
 800b2e4:	ea45 0503 	orr.w	r5, r5, r3
	for (i = 11; i >= 0; i--) {
 800b2e8:	d2ec      	bcs.n	800b2c4 <Mag_Enc2_Store+0x14>
  WRITE_REG(GPIOx->BRR, PinMask);
 800b2ea:	2780      	movs	r7, #128	; 0x80
 800b2ec:	4e11      	ldr	r6, [pc, #68]	; (800b334 <Mag_Enc2_Store+0x84>)
 800b2ee:	2406      	movs	r4, #6
 800b2f0:	46b8      	mov	r8, r7
	}

	for (i = 0; i < 6; i++) {
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 800b2f2:	200a      	movs	r0, #10
 800b2f4:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 800b2f8:	f000 fbd0 	bl	800ba9c <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b2fc:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 800b2fe:	200a      	movs	r0, #10
 800b300:	f000 fbcc 	bl	800ba9c <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800b304:	4b0a      	ldr	r3, [pc, #40]	; (800b330 <Mag_Enc2_Store+0x80>)
	for (i = 0; i < 6; i++) {
 800b306:	3c01      	subs	r4, #1
 800b308:	691a      	ldr	r2, [r3, #16]
 800b30a:	d1f2      	bne.n	800b2f2 <Mag_Enc2_Store+0x42>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b30c:	2240      	movs	r2, #64	; 0x40
 800b30e:	619a      	str	r2, [r3, #24]
		Flags[i] |= (tempRead) << i;
	}

	LL_GPIO_SetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	BSbuffer[s_flag].Enc2[Sub_cnt] = tempPosition;
 800b310:	4b09      	ldr	r3, [pc, #36]	; (800b338 <Mag_Enc2_Store+0x88>)
 800b312:	781a      	ldrb	r2, [r3, #0]
 800b314:	4b09      	ldr	r3, [pc, #36]	; (800b33c <Mag_Enc2_Store+0x8c>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 800b31c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800b320:	4a07      	ldr	r2, [pc, #28]	; (800b340 <Mag_Enc2_Store+0x90>)
 800b322:	3318      	adds	r3, #24
 800b324:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800b328:	80dd      	strh	r5, [r3, #6]
 800b32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b32e:	bf00      	nop
 800b330:	48000800 	.word	0x48000800
 800b334:	48000400 	.word	0x48000400
 800b338:	20000636 	.word	0x20000636
 800b33c:	20000630 	.word	0x20000630
 800b340:	20000954 	.word	0x20000954

0800b344 <Enc2_GetPosition>:
  WRITE_REG(GPIOx->BRR, PinMask);
 800b344:	4b1a      	ldr	r3, [pc, #104]	; (800b3b0 <Enc2_GetPosition+0x6c>)
 800b346:	2240      	movs	r2, #64	; 0x40
}

int Enc2_GetPosition(void) {
 800b348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i = 0;
	uint8_t tempRead = 0;
	uint8_t Flags[6];

	LL_GPIO_ResetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);
	delay_us(1);
 800b34c:	2001      	movs	r0, #1
 800b34e:	629a      	str	r2, [r3, #40]	; 0x28
 800b350:	f000 fba4 	bl	800ba9c <delay_us>
 800b354:	2780      	movs	r7, #128	; 0x80
 800b356:	4e17      	ldr	r6, [pc, #92]	; (800b3b4 <Enc2_GetPosition+0x70>)
	// Sensor feeds out position MSB first
	for (i = DataPrecision - 1; i >= 0; i--) {
 800b358:	240b      	movs	r4, #11
	int tempPosition = 0;
 800b35a:	2500      	movs	r5, #0
 800b35c:	46b8      	mov	r8, r7
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(1);
 800b35e:	2001      	movs	r0, #1
 800b360:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 800b364:	f000 fb9a 	bl	800ba9c <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b368:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(1);
 800b36a:	2001      	movs	r0, #1
 800b36c:	f000 fb96 	bl	800ba9c <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800b370:	4b0f      	ldr	r3, [pc, #60]	; (800b3b0 <Enc2_GetPosition+0x6c>)
 800b372:	691b      	ldr	r3, [r3, #16]
 800b374:	f3c3 13c0 	ubfx	r3, r3, #7, #1

		tempRead = LL_GPIO_IsInputPinSet(ENC2_DATA_GPIO_PORT, ENC2_DATA_PIN)
				& 0x01;
		tempPosition |= (tempRead) << i;
 800b378:	40a3      	lsls	r3, r4
	for (i = DataPrecision - 1; i >= 0; i--) {
 800b37a:	f114 34ff 	adds.w	r4, r4, #4294967295
		tempPosition |= (tempRead) << i;
 800b37e:	ea45 0503 	orr.w	r5, r5, r3
	for (i = DataPrecision - 1; i >= 0; i--) {
 800b382:	d2ec      	bcs.n	800b35e <Enc2_GetPosition+0x1a>
  WRITE_REG(GPIOx->BRR, PinMask);
 800b384:	2780      	movs	r7, #128	; 0x80
 800b386:	4e0b      	ldr	r6, [pc, #44]	; (800b3b4 <Enc2_GetPosition+0x70>)
 800b388:	2406      	movs	r4, #6
 800b38a:	46b8      	mov	r8, r7
	}

	for (i = 0; i < 6; i++) {
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(1);
 800b38c:	2001      	movs	r0, #1
 800b38e:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 800b392:	f000 fb83 	bl	800ba9c <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b396:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(1);
 800b398:	2001      	movs	r0, #1
 800b39a:	f000 fb7f 	bl	800ba9c <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800b39e:	4b04      	ldr	r3, [pc, #16]	; (800b3b0 <Enc2_GetPosition+0x6c>)
	for (i = 0; i < 6; i++) {
 800b3a0:	3c01      	subs	r4, #1
 800b3a2:	691a      	ldr	r2, [r3, #16]
 800b3a4:	d1f2      	bne.n	800b38c <Enc2_GetPosition+0x48>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800b3a6:	2240      	movs	r2, #64	; 0x40
 800b3a8:	619a      	str	r2, [r3, #24]
	}

	LL_GPIO_SetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	return tempPosition;
}
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3b0:	48000800 	.word	0x48000800
 800b3b4:	48000400 	.word	0x48000400

0800b3b8 <knee_angle>:

float knee_angle(void) {
 800b3b8:	b508      	push	{r3, lr}
//	float knee_position;
//knee_position= -(Enc2_GetPosition()*0.088)+125; //-(Enc2_GetPosition()*0.088-306); //-((Prosthesis_Data(:,36)*0.088)-306)
// Greg end comment

	// Greg end comment
	float knee_position = (Enc2_GetPosition() - 2263.5) * 0.088;
 800b3ba:	f7ff ffc3 	bl	800b344 <Enc2_GetPosition>
 800b3be:	f7f5 f8b1 	bl	8000524 <__aeabi_i2d>
 800b3c2:	a307      	add	r3, pc, #28	; (adr r3, 800b3e0 <knee_angle+0x28>)
 800b3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c8:	f7f4 ff5e 	bl	8000288 <__aeabi_dsub>
 800b3cc:	a306      	add	r3, pc, #24	; (adr r3, 800b3e8 <knee_angle+0x30>)
 800b3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d2:	f7f5 f90d 	bl	80005f0 <__aeabi_dmul>
 800b3d6:	f7f5 fbe3 	bl	8000ba0 <__aeabi_d2f>
	// Greg start

	return knee_position;
}
 800b3da:	ee00 0a10 	vmov	s0, r0
 800b3de:	bd08      	pop	{r3, pc}
 800b3e0:	00000000 	.word	0x00000000
 800b3e4:	40a1af00 	.word	0x40a1af00
 800b3e8:	020c49ba 	.word	0x020c49ba
 800b3ec:	3fb6872b 	.word	0x3fb6872b

0800b3f0 <IMU_orientation>:

float IMU_orientation(struct imu_data imuMyData, float last_angle, float dt_s)
{
 800b3f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3f4:	ed2d 8b04 	vpush	{d8-d9}
 800b3f8:	b085      	sub	sp, #20
 800b3fa:	ab04      	add	r3, sp, #16
 800b3fc:	e903 0007 	stmdb	r3, {r0, r1, r2}
	accel.x = (float) imuMyData.AX / 4096;
	accel.y = (float) imuMyData.AY / 4096;
	accel.z = (float) imuMyData.AZ / 4096;
	gyro.x  = (float) imuMyData.GX / 32.8 * DEGREES_TO_RADIANS;
	gyro.y  = (float) imuMyData.GY / 32.8 * DEGREES_TO_RADIANS;
	gyro.z  = (float) imuMyData.GZ / 32.8 * DEGREES_TO_RADIANS;
 800b400:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
	accel.x = (float) imuMyData.AX / 4096;
 800b404:	eddf 8a4e 	vldr	s17, [pc, #312]	; 800b540 <IMU_orientation+0x150>
	gyro.z  = (float) imuMyData.GZ / 32.8 * DEGREES_TO_RADIANS;
 800b408:	ee07 0a90 	vmov	s15, r0
 800b40c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 800b410:	eeb0 8a60 	vmov.f32	s16, s1
	gyro.z  = (float) imuMyData.GZ / 32.8 * DEGREES_TO_RADIANS;
 800b414:	ee17 0a90 	vmov	r0, s15
{
 800b418:	eef0 9a40 	vmov.f32	s19, s0
	gyro.z  = (float) imuMyData.GZ / 32.8 * DEGREES_TO_RADIANS;
 800b41c:	f7f5 f894 	bl	8000548 <__aeabi_f2d>
 800b420:	a343      	add	r3, pc, #268	; (adr r3, 800b530 <IMU_orientation+0x140>)
 800b422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b426:	f7f5 fa0d 	bl	8000844 <__aeabi_ddiv>
 800b42a:	a343      	add	r3, pc, #268	; (adr r3, 800b538 <IMU_orientation+0x148>)
 800b42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b430:	f7f5 f8de 	bl	80005f0 <__aeabi_dmul>
 800b434:	f7f5 fbb4 	bl	8000ba0 <__aeabi_d2f>
	accel.x = (float) imuMyData.AX / 4096;
 800b438:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800b43c:	ee07 3a90 	vmov	s15, r3
 800b440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	gyro.z  = (float) imuMyData.GZ / 32.8 * DEGREES_TO_RADIANS;
 800b444:	ee09 0a10 	vmov	s18, r0

	// Compute angle from accel
	accel_angle.z   = atan(accel.x / sqrt(pow(accel.y,2) + pow(accel.z,2)));
 800b448:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800b44c:	ee17 0a90 	vmov	r0, s15
 800b450:	f7f5 f87a 	bl	8000548 <__aeabi_f2d>
	accel.y = (float) imuMyData.AY / 4096;
 800b454:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800b458:	ee07 3a90 	vmov	s15, r3
 800b45c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	accel_angle.z   = atan(accel.x / sqrt(pow(accel.y,2) + pow(accel.z,2)));
 800b460:	4604      	mov	r4, r0
 800b462:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800b466:	460d      	mov	r5, r1
 800b468:	ee17 0a90 	vmov	r0, s15
 800b46c:	f7f5 f86c 	bl	8000548 <__aeabi_f2d>
	accel.z = (float) imuMyData.AZ / 4096;
 800b470:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800b474:	ee07 3a90 	vmov	s15, r3
 800b478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	accel_angle.z   = atan(accel.x / sqrt(pow(accel.y,2) + pow(accel.z,2)));
 800b47c:	4606      	mov	r6, r0
 800b47e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800b482:	460f      	mov	r7, r1
 800b484:	ee17 0a90 	vmov	r0, s15
 800b488:	f7f5 f85e 	bl	8000548 <__aeabi_f2d>
 800b48c:	4632      	mov	r2, r6
 800b48e:	4680      	mov	r8, r0
 800b490:	4689      	mov	r9, r1
 800b492:	463b      	mov	r3, r7
 800b494:	4630      	mov	r0, r6
 800b496:	4639      	mov	r1, r7
 800b498:	f7f5 f8aa 	bl	80005f0 <__aeabi_dmul>
 800b49c:	4642      	mov	r2, r8
 800b49e:	4606      	mov	r6, r0
 800b4a0:	460f      	mov	r7, r1
 800b4a2:	464b      	mov	r3, r9
 800b4a4:	4640      	mov	r0, r8
 800b4a6:	4649      	mov	r1, r9
 800b4a8:	f7f5 f8a2 	bl	80005f0 <__aeabi_dmul>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	4639      	mov	r1, r7
 800b4b4:	f7f4 feea 	bl	800028c <__adddf3>
 800b4b8:	ec41 0b10 	vmov	d0, r0, r1
 800b4bc:	f002 fb38 	bl	800db30 <sqrt>
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	ec53 2b10 	vmov	r2, r3, d0
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	f7f5 f9bc 	bl	8000844 <__aeabi_ddiv>
 800b4cc:	ec41 0b10 	vmov	d0, r0, r1
 800b4d0:	f002 f97e 	bl	800d7d0 <atan>
 800b4d4:	ec51 0b10 	vmov	r0, r1, d0
 800b4d8:	f7f5 fb62 	bl	8000ba0 <__aeabi_d2f>

	// Compute change in angle from gyro (trapezoidal used)
	if (count == 1)
 800b4dc:	4a19      	ldr	r2, [pc, #100]	; (800b544 <IMU_orientation+0x154>)
 800b4de:	7813      	ldrb	r3, [r2, #0]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	4b19      	ldr	r3, [pc, #100]	; (800b548 <IMU_orientation+0x158>)
	{
		gyro_angle.z = 0;
 800b4e4:	bf0c      	ite	eq
 800b4e6:	ed9f 0a19 	vldreq	s0, [pc, #100]	; 800b54c <IMU_orientation+0x15c>
		count++;
	}
	else
	{
		gyro_angle.z = dt_s/2 * (gyro.z + last_gyro);
 800b4ea:	ed93 0a00 	vldrne	s0, [r3]
	}

	// Save gyro for next iteration
	last_gyro = gyro.z;
 800b4ee:	ed83 9a00 	vstr	s18, [r3]
		gyro_angle.z = dt_s/2 * (gyro.z + last_gyro);
 800b4f2:	bf1e      	ittt	ne
 800b4f4:	eef6 7a00 	vmovne.f32	s15, #96	; 0x3f000000  0.5
 800b4f8:	ee39 0a00 	vaddne.f32	s0, s18, s0
 800b4fc:	ee28 8a27 	vmulne.f32	s16, s16, s15

	// Compute angle using complementary filter
	float imu_angle = accel_angle.z*alpha + (1-alpha) * (gyro_angle.z + last_angle);
 800b500:	eddf 7a13 	vldr	s15, [pc, #76]	; 800b550 <IMU_orientation+0x160>
		gyro_angle.z = dt_s/2 * (gyro.z + last_gyro);
 800b504:	bf18      	it	ne
 800b506:	ee20 0a08 	vmulne.f32	s0, s0, s16
	accel_angle.z   = atan(accel.x / sqrt(pow(accel.y,2) + pow(accel.z,2)));
 800b50a:	ee07 0a10 	vmov	s14, r0
	float imu_angle = accel_angle.z*alpha + (1-alpha) * (gyro_angle.z + last_angle);
 800b50e:	ee30 0a29 	vadd.f32	s0, s0, s19
		count++;
 800b512:	bf08      	it	eq
 800b514:	2102      	moveq	r1, #2
	float imu_angle = accel_angle.z*alpha + (1-alpha) * (gyro_angle.z + last_angle);
 800b516:	ee20 0a27 	vmul.f32	s0, s0, s15

	// Return angle
	return (imu_angle);
}
 800b51a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800b554 <IMU_orientation+0x164>
		count++;
 800b51e:	bf08      	it	eq
 800b520:	7011      	strbeq	r1, [r2, #0]
}
 800b522:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b526:	b005      	add	sp, #20
 800b528:	ecbd 8b04 	vpop	{d8-d9}
 800b52c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b530:	66666666 	.word	0x66666666
 800b534:	40406666 	.word	0x40406666
 800b538:	a0000000 	.word	0xa0000000
 800b53c:	3f91df45 	.word	0x3f91df45
 800b540:	39800000 	.word	0x39800000
 800b544:	200000f5 	.word	0x200000f5
 800b548:	200008e8 	.word	0x200008e8
 800b54c:	00000000 	.word	0x00000000
 800b550:	3f7f7cee 	.word	0x3f7f7cee
 800b554:	3b03126f 	.word	0x3b03126f

0800b558 <LL_GPIO_SetAFPin_0_7.constprop.1>:
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b558:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
 800b55c:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b55e:	6a0b      	ldr	r3, [r1, #32]
 800b560:	fa90 f2a0 	rbit	r2, r0
 800b564:	fab2 f282 	clz	r2, r2
 800b568:	fa90 f0a0 	rbit	r0, r0
 800b56c:	240f      	movs	r4, #15
 800b56e:	0092      	lsls	r2, r2, #2
 800b570:	fa04 f202 	lsl.w	r2, r4, r2
 800b574:	fab0 f080 	clz	r0, r0
 800b578:	ea23 0302 	bic.w	r3, r3, r2
 800b57c:	0080      	lsls	r0, r0, #2
 800b57e:	2205      	movs	r2, #5
 800b580:	fa02 f000 	lsl.w	r0, r2, r0
 800b584:	4318      	orrs	r0, r3
 800b586:	6208      	str	r0, [r1, #32]
 800b588:	bd10      	pop	{r4, pc}

0800b58a <LL_GPIO_SetPinPull.constprop.2>:
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
 800b58a:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b58c:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
 800b590:	68e2      	ldr	r2, [r4, #12]
 800b592:	fa90 f3a0 	rbit	r3, r0
 800b596:	fab3 f383 	clz	r3, r3
 800b59a:	2103      	movs	r1, #3
 800b59c:	005b      	lsls	r3, r3, #1
 800b59e:	fa01 f303 	lsl.w	r3, r1, r3
 800b5a2:	ea22 0303 	bic.w	r3, r2, r3
 800b5a6:	fa90 f0a0 	rbit	r0, r0
 800b5aa:	60e3      	str	r3, [r4, #12]
 800b5ac:	bd10      	pop	{r4, pc}

0800b5ae <LL_GPIO_SetPinSpeed.constprop.3>:
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 800b5ae:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800b5b0:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
 800b5b4:	68a2      	ldr	r2, [r4, #8]
 800b5b6:	fa90 f3a0 	rbit	r3, r0
 800b5ba:	fab3 f383 	clz	r3, r3
 800b5be:	fa90 f0a0 	rbit	r0, r0
 800b5c2:	2103      	movs	r1, #3
 800b5c4:	fab0 f080 	clz	r0, r0
 800b5c8:	005b      	lsls	r3, r3, #1
 800b5ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b5ce:	0040      	lsls	r0, r0, #1
 800b5d0:	ea22 0303 	bic.w	r3, r2, r3
 800b5d4:	fa01 f000 	lsl.w	r0, r1, r0
 800b5d8:	4318      	orrs	r0, r3
 800b5da:	60a0      	str	r0, [r4, #8]
 800b5dc:	bd10      	pop	{r4, pc}

0800b5de <LL_GPIO_SetPinMode.constprop.4>:
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b5de:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
 800b5e2:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b5e4:	680b      	ldr	r3, [r1, #0]
 800b5e6:	fa90 f2a0 	rbit	r2, r0
 800b5ea:	fab2 f282 	clz	r2, r2
 800b5ee:	fa90 f0a0 	rbit	r0, r0
 800b5f2:	2403      	movs	r4, #3
 800b5f4:	0052      	lsls	r2, r2, #1
 800b5f6:	fa04 f202 	lsl.w	r2, r4, r2
 800b5fa:	fab0 f080 	clz	r0, r0
 800b5fe:	ea23 0302 	bic.w	r3, r3, r2
 800b602:	0040      	lsls	r0, r0, #1
 800b604:	2202      	movs	r2, #2
 800b606:	fa02 f000 	lsl.w	r0, r2, r0
 800b60a:	4318      	orrs	r0, r3
 800b60c:	6008      	str	r0, [r1, #0]
 800b60e:	bd10      	pop	{r4, pc}

0800b610 <spi1_init>:
  SET_BIT(RCC->APB2ENR, Periphs);
 800b610:	4b39      	ldr	r3, [pc, #228]	; (800b6f8 <spi1_init+0xe8>)
 800b612:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 */


#include "main.h"

void spi1_init() {
 800b614:	b513      	push	{r0, r1, r4, lr}
 800b616:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b61a:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800b61c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b61e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b622:	9301      	str	r3, [sp, #4]
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);

	// Configure SCK Pin connected to PA5, MISO PA6, MOSI PA7
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_5, LL_GPIO_MODE_ALTERNATE);
 800b624:	2020      	movs	r0, #32
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b626:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
  (void)tmpreg;
 800b62a:	9b01      	ldr	r3, [sp, #4]
 800b62c:	f7ff ffd7 	bl	800b5de <LL_GPIO_SetPinMode.constprop.4>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_5, LL_GPIO_AF_5);
 800b630:	2020      	movs	r0, #32
 800b632:	f7ff ff91 	bl	800b558 <LL_GPIO_SetAFPin_0_7.constprop.1>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_5, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 800b636:	2020      	movs	r0, #32
 800b638:	f7ff ffb9 	bl	800b5ae <LL_GPIO_SetPinSpeed.constprop.3>
 800b63c:	6863      	ldr	r3, [r4, #4]
 800b63e:	f023 0320 	bic.w	r3, r3, #32
 800b642:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_5, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_5, LL_GPIO_PULL_NO);
 800b644:	2020      	movs	r0, #32
 800b646:	f7ff ffa0 	bl	800b58a <LL_GPIO_SetPinPull.constprop.2>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 800b64a:	2040      	movs	r0, #64	; 0x40
 800b64c:	f7ff ffc7 	bl	800b5de <LL_GPIO_SetPinMode.constprop.4>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_6, LL_GPIO_AF_5);
 800b650:	2040      	movs	r0, #64	; 0x40
 800b652:	f7ff ff81 	bl	800b558 <LL_GPIO_SetAFPin_0_7.constprop.1>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 800b656:	2040      	movs	r0, #64	; 0x40
 800b658:	f7ff ffa9 	bl	800b5ae <LL_GPIO_SetPinSpeed.constprop.3>
 800b65c:	6863      	ldr	r3, [r4, #4]
 800b65e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b662:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_6, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 800b664:	2040      	movs	r0, #64	; 0x40
 800b666:	f7ff ff90 	bl	800b58a <LL_GPIO_SetPinPull.constprop.2>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_ALTERNATE);
 800b66a:	2080      	movs	r0, #128	; 0x80
 800b66c:	f7ff ffb7 	bl	800b5de <LL_GPIO_SetPinMode.constprop.4>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_7, LL_GPIO_AF_5);
 800b670:	2080      	movs	r0, #128	; 0x80
 800b672:	f7ff ff71 	bl	800b558 <LL_GPIO_SetAFPin_0_7.constprop.1>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_7, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 800b676:	2080      	movs	r0, #128	; 0x80
 800b678:	f7ff ff99 	bl	800b5ae <LL_GPIO_SetPinSpeed.constprop.3>
 800b67c:	6863      	ldr	r3, [r4, #4]
 800b67e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b682:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_7, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_7, LL_GPIO_PULL_NO);
 800b684:	2080      	movs	r0, #128	; 0x80
 800b686:	f7ff ff80 	bl	800b58a <LL_GPIO_SetPinPull.constprop.2>
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 800b68a:	4b1c      	ldr	r3, [pc, #112]	; (800b6fc <spi1_init+0xec>)
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800b692:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800b696:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 800b69e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	f042 0201 	orr.w	r2, r2, #1
 800b6a6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	f042 0202 	orr.w	r2, r2, #2
 800b6ae:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b6b6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 800b6b8:	685a      	ldr	r2, [r3, #4]
 800b6ba:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800b6be:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800b6c2:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6ca:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 800b6cc:	685a      	ldr	r2, [r3, #4]
 800b6ce:	f022 0204 	bic.w	r2, r2, #4
 800b6d2:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800b6d4:	685a      	ldr	r2, [r3, #4]
 800b6d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b6da:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	f442 7282 	orr.w	r2, r2, #260	; 0x104
 800b6e2:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6ea:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800b6ec:	685a      	ldr	r2, [r3, #4]
 800b6ee:	f042 0208 	orr.w	r2, r2, #8
 800b6f2:	605a      	str	r2, [r3, #4]
	LL_SPI_SetNSSMode(SPI1, LL_SPI_NSS_SOFT);
	LL_SPI_SetRxFIFOThreshold(SPI1, LL_SPI_RX_FIFO_TH_QUARTER);
	LL_SPI_SetMode(SPI1, LL_SPI_MODE_MASTER);
	LL_SPI_Enable(SPI1);
	LL_SPI_EnableNSSPulseMgt(SPI1);
}
 800b6f4:	b002      	add	sp, #8
 800b6f6:	bd10      	pop	{r4, pc}
 800b6f8:	40021000 	.word	0x40021000
 800b6fc:	40013000 	.word	0x40013000

0800b700 <spi2_init>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b700:	4b3d      	ldr	r3, [pc, #244]	; (800b7f8 <spi2_init+0xf8>)
 *      Author: brett
 */

#include "main.h"

void spi2_init() {
 800b702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b706:	6cda      	ldr	r2, [r3, #76]	; 0x4c
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
		LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 800b708:	4e3c      	ldr	r6, [pc, #240]	; (800b7fc <spi2_init+0xfc>)
 800b70a:	f042 0204 	orr.w	r2, r2, #4
 800b70e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b710:	6cda      	ldr	r2, [r3, #76]	; 0x4c
void spi2_init() {
 800b712:	b094      	sub	sp, #80	; 0x50
 800b714:	f002 0204 	and.w	r2, r2, #4
 800b718:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 800b71a:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b71c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b71e:	f042 0202 	orr.w	r2, r2, #2
 800b722:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b724:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b726:	f002 0202 	and.w	r2, r2, #2
 800b72a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800b72c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800b72e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b730:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b734:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800b736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b73c:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b73e:	2400      	movs	r4, #0
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b740:	2502      	movs	r5, #2
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b742:	f04f 0803 	mov.w	r8, #3
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800b746:	2705      	movs	r7, #5
  (void)tmpreg;
 800b748:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b74a:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Pin = SPI2_SCK_IMU_PIN;
 800b74c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 800b750:	a904      	add	r1, sp, #16
 800b752:	4630      	mov	r0, r6
		GPIO_InitStruct.Pin = SPI2_SCK_IMU_PIN;
 800b754:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b756:	9408      	str	r4, [sp, #32]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b758:	9505      	str	r5, [sp, #20]
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b75a:	f8cd 8018 	str.w	r8, [sp, #24]
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800b75e:	9709      	str	r7, [sp, #36]	; 0x24
		LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 800b760:	f7fa fdd8 	bl	8006314 <LL_GPIO_Init>

		GPIO_InitStruct.Pin = SPI2_MISO_IMU_PIN;
 800b764:	f44f 4380 	mov.w	r3, #16384	; 0x4000
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
		LL_GPIO_Init(SPI2_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 800b768:	a904      	add	r1, sp, #16
 800b76a:	4630      	mov	r0, r6
		GPIO_InitStruct.Pin = SPI2_MISO_IMU_PIN;
 800b76c:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b76e:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b770:	9408      	str	r4, [sp, #32]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b772:	9505      	str	r5, [sp, #20]
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b774:	f8cd 8018 	str.w	r8, [sp, #24]
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800b778:	9709      	str	r7, [sp, #36]	; 0x24
		LL_GPIO_Init(SPI2_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 800b77a:	f7fa fdcb 	bl	8006314 <LL_GPIO_Init>

		GPIO_InitStruct.Pin = SPI2_MOSI_IMU_PIN;
 800b77e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
		LL_GPIO_Init(SPI2_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 800b782:	a904      	add	r1, sp, #16
 800b784:	4630      	mov	r0, r6
		GPIO_InitStruct.Pin = SPI2_MOSI_IMU_PIN;
 800b786:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b788:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b78a:	9408      	str	r4, [sp, #32]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b78c:	9505      	str	r5, [sp, #20]
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b78e:	f8cd 8018 	str.w	r8, [sp, #24]
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800b792:	9709      	str	r7, [sp, #36]	; 0x24
		LL_GPIO_Init(SPI2_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 800b794:	f7fa fdbe 	bl	8006314 <LL_GPIO_Init>

		SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
		SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800b798:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b79c:	930b      	str	r3, [sp, #44]	; 0x2c
		SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800b79e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800b7a2:	930c      	str	r3, [sp, #48]	; 0x30
		/*Mode 3 (Mode 1,1) */
		SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH; /*Clock 1 when idle and 0 when active */
		SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE; //Second clock transition is the first data capture edge
 800b7a4:	2301      	movs	r3, #1
		SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800b7a6:	940a      	str	r4, [sp, #40]	; 0x28
		SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE; //Second clock transition is the first data capture edge
 800b7a8:	930e      	str	r3, [sp, #56]	; 0x38
		SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;

		SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
		SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800b7aa:	9411      	str	r4, [sp, #68]	; 0x44
		SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800b7ac:	9412      	str	r4, [sp, #72]	; 0x48
		SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800b7ae:	f44f 7300 	mov.w	r3, #512	; 0x200
		SPI_InitStruct.CRCPoly = 7; //?
		LL_SPI_Init(SPI2, &SPI_InitStruct);
 800b7b2:	4c13      	ldr	r4, [pc, #76]	; (800b800 <spi2_init+0x100>)
		SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800b7b4:	930f      	str	r3, [sp, #60]	; 0x3c
		SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 800b7b6:	2308      	movs	r3, #8
 800b7b8:	9310      	str	r3, [sp, #64]	; 0x40
		LL_SPI_Init(SPI2, &SPI_InitStruct);
 800b7ba:	a90a      	add	r1, sp, #40	; 0x28
		SPI_InitStruct.CRCPoly = 7; //?
 800b7bc:	2307      	movs	r3, #7
		LL_SPI_Init(SPI2, &SPI_InitStruct);
 800b7be:	4620      	mov	r0, r4
		SPI_InitStruct.CRCPoly = 7; //?
 800b7c0:	9313      	str	r3, [sp, #76]	; 0x4c
		SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH; /*Clock 1 when idle and 0 when active */
 800b7c2:	950d      	str	r5, [sp, #52]	; 0x34
		LL_SPI_Init(SPI2, &SPI_InitStruct);
 800b7c4:	f7fb f874 	bl	80068b0 <LL_SPI_Init>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800b7c8:	6863      	ldr	r3, [r4, #4]
 800b7ca:	f023 0308 	bic.w	r3, r3, #8
 800b7ce:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800b7d0:	6863      	ldr	r3, [r4, #4]
 800b7d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b7d6:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 800b7d8:	6863      	ldr	r3, [r4, #4]
 800b7da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7de:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800b7e0:	6823      	ldr	r3, [r4, #0]
 800b7e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7e6:	6023      	str	r3, [r4, #0]

		LL_SPI_SetRxFIFOThreshold(SPI2, LL_SPI_RX_FIFO_TH_QUARTER);
		LL_SPI_DisableIT_RXNE(SPI2);
		LL_SPI_Enable(SPI2);

		delay_us(10000);
 800b7e8:	f242 7010 	movw	r0, #10000	; 0x2710
 800b7ec:	f000 f956 	bl	800ba9c <delay_us>
}
 800b7f0:	b014      	add	sp, #80	; 0x50
 800b7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7f6:	bf00      	nop
 800b7f8:	40021000 	.word	0x40021000
 800b7fc:	48000400 	.word	0x48000400
 800b800:	40003800 	.word	0x40003800

0800b804 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b804:	4b21      	ldr	r3, [pc, #132]	; (800b88c <HAL_MspInit+0x88>)
{
 800b806:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b808:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b80a:	f042 0201 	orr.w	r2, r2, #1
 800b80e:	661a      	str	r2, [r3, #96]	; 0x60
 800b810:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b812:	f002 0201 	and.w	r2, r2, #1
 800b816:	9200      	str	r2, [sp, #0]
 800b818:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b81a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b81c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b820:	659a      	str	r2, [r3, #88]	; 0x58
 800b822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b828:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b82a:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800b82c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b82e:	f7f8 f823 	bl	8003878 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800b832:	2200      	movs	r2, #0
 800b834:	4611      	mov	r1, r2
 800b836:	f06f 000b 	mvn.w	r0, #11
 800b83a:	f7f8 f82f 	bl	800389c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800b83e:	2200      	movs	r2, #0
 800b840:	4611      	mov	r1, r2
 800b842:	f06f 000a 	mvn.w	r0, #10
 800b846:	f7f8 f829 	bl	800389c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800b84a:	2200      	movs	r2, #0
 800b84c:	4611      	mov	r1, r2
 800b84e:	f06f 0009 	mvn.w	r0, #9
 800b852:	f7f8 f823 	bl	800389c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800b856:	2200      	movs	r2, #0
 800b858:	4611      	mov	r1, r2
 800b85a:	f06f 0004 	mvn.w	r0, #4
 800b85e:	f7f8 f81d 	bl	800389c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800b862:	2200      	movs	r2, #0
 800b864:	4611      	mov	r1, r2
 800b866:	f06f 0003 	mvn.w	r0, #3
 800b86a:	f7f8 f817 	bl	800389c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800b86e:	2200      	movs	r2, #0
 800b870:	4611      	mov	r1, r2
 800b872:	f06f 0001 	mvn.w	r0, #1
 800b876:	f7f8 f811 	bl	800389c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b87a:	2200      	movs	r2, #0
 800b87c:	4611      	mov	r1, r2
 800b87e:	f04f 30ff 	mov.w	r0, #4294967295
 800b882:	f7f8 f80b 	bl	800389c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b886:	b003      	add	sp, #12
 800b888:	f85d fb04 	ldr.w	pc, [sp], #4
 800b88c:	40021000 	.word	0x40021000

0800b890 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800b890:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 800b892:	6802      	ldr	r2, [r0, #0]
 800b894:	4b15      	ldr	r3, [pc, #84]	; (800b8ec <HAL_SD_MspInit+0x5c>)
 800b896:	429a      	cmp	r2, r3
{
 800b898:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 800b89a:	d124      	bne.n	800b8e6 <HAL_SD_MspInit+0x56>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b89c:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8a0:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b8a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b8a4:	4812      	ldr	r0, [pc, #72]	; (800b8f0 <HAL_SD_MspInit+0x60>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b8a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b8aa:	661a      	str	r2, [r3, #96]	; 0x60
 800b8ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8ae:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800b8b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8b4:	9300      	str	r3, [sp, #0]
 800b8b6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8b8:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800b8ba:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8be:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800b8c0:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b8c2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800b8c4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8c6:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8c8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800b8ca:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b8cc:	f7f8 f99e 	bl	8003c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b8d0:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b8d2:	eb0d 0103 	add.w	r1, sp, r3
 800b8d6:	4807      	ldr	r0, [pc, #28]	; (800b8f4 <HAL_SD_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b8d8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8da:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8dc:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8de:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800b8e0:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b8e2:	f7f8 f993 	bl	8003c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800b8e6:	b007      	add	sp, #28
 800b8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	40012800 	.word	0x40012800
 800b8f0:	48000800 	.word	0x48000800
 800b8f4:	48000c00 	.word	0x48000c00

0800b8f8 <NMI_Handler>:
 800b8f8:	4770      	bx	lr

0800b8fa <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800b8fa:	e7fe      	b.n	800b8fa <HardFault_Handler>

0800b8fc <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800b8fc:	e7fe      	b.n	800b8fc <MemManage_Handler>

0800b8fe <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800b8fe:	e7fe      	b.n	800b8fe <BusFault_Handler>

0800b900 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800b900:	e7fe      	b.n	800b900 <UsageFault_Handler>

0800b902 <SVC_Handler>:
 800b902:	4770      	bx	lr

0800b904 <DebugMon_Handler>:
 800b904:	4770      	bx	lr

0800b906 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800b906:	4770      	bx	lr

0800b908 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800b908:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b90a:	f7f7 ff8b 	bl	8003824 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800b90e:	f7f8 f81c 	bl	800394a <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick_app_timer_tickAndProcess();
  /* USER CODE END SysTick_IRQn 1 */
}
 800b912:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  systick_app_timer_tickAndProcess();
 800b916:	f000 b847 	b.w	800b9a8 <systick_app_timer_tickAndProcess>
	...

0800b91c <OTG_FS_IRQHandler>:
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  // ES HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
	HAL_PCD_IRQHandler(&hpcd);
 800b91c:	4801      	ldr	r0, [pc, #4]	; (800b924 <OTG_FS_IRQHandler+0x8>)
 800b91e:	f7f8 bb15 	b.w	8003f4c <HAL_PCD_IRQHandler>
 800b922:	bf00      	nop
 800b924:	2000b72c 	.word	0x2000b72c

0800b928 <DMA2_Channel4_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Channel4_IRQHandler(void)
{
  if((uSdHandle.SdOperation == SD_READ_MULTIPLE_BLOCK) || (uSdHandle.SdOperation == SD_READ_SINGLE_BLOCK))
 800b928:	4b04      	ldr	r3, [pc, #16]	; (800b93c <DMA2_Channel4_IRQHandler+0x14>)
 800b92a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b92c:	2a01      	cmp	r2, #1
 800b92e:	d001      	beq.n	800b934 <DMA2_Channel4_IRQHandler+0xc>
 800b930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b932:	b90b      	cbnz	r3, 800b938 <DMA2_Channel4_IRQHandler+0x10>
  {
    BSP_SD_DMA_Rx_IRQHandler();
 800b934:	f7fb bcd2 	b.w	80072dc <BSP_SD_DMA_Rx_IRQHandler>
  }
  else
  {
    BSP_SD_DMA_Tx_IRQHandler();
 800b938:	f7fb bcca 	b.w	80072d0 <BSP_SD_DMA_Tx_IRQHandler>
 800b93c:	20008990 	.word	0x20008990

0800b940 <SDMMC1_IRQHandler>:
  * @param  None
  * @retval None
  */
void SDMMC1_IRQHandler(void)
{
  BSP_SD_IRQHandler();
 800b940:	f7fb bcc0 	b.w	80072c4 <BSP_SD_IRQHandler>

0800b944 <_sbrk>:
{
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 800b944:	4b04      	ldr	r3, [pc, #16]	; (800b958 <_sbrk+0x14>)
 800b946:	6819      	ldr	r1, [r3, #0]
{
 800b948:	4602      	mov	r2, r0
	if (heap_end == 0) {
 800b94a:	b909      	cbnz	r1, 800b950 <_sbrk+0xc>
		heap_end = & end;
 800b94c:	4903      	ldr	r1, [pc, #12]	; (800b95c <_sbrk+0x18>)
 800b94e:	6019      	str	r1, [r3, #0]
	}

	prev_heap_end = heap_end;
 800b950:	6818      	ldr	r0, [r3, #0]
	heap_end += incr;
 800b952:	4402      	add	r2, r0
 800b954:	601a      	str	r2, [r3, #0]

	return (void *) prev_heap_end;
}
 800b956:	4770      	bx	lr
 800b958:	200008ec 	.word	0x200008ec
 800b95c:	2000d508 	.word	0x2000d508

0800b960 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b960:	490f      	ldr	r1, [pc, #60]	; (800b9a0 <SystemInit+0x40>)
 800b962:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800b966:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b96a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800b96e:	4b0d      	ldr	r3, [pc, #52]	; (800b9a4 <SystemInit+0x44>)
 800b970:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b972:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800b974:	f042 0201 	orr.w	r2, r2, #1
 800b978:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800b97a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800b982:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800b986:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800b988:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b98c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b994:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b996:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b998:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b99c:	608b      	str	r3, [r1, #8]
 800b99e:	4770      	bx	lr
 800b9a0:	e000ed00 	.word	0xe000ed00
 800b9a4:	40021000 	.word	0x40021000

0800b9a8 <systick_app_timer_tickAndProcess>:
/*
 * Use this if you want the systick to incrment timers and process alarms/callbacks.
 * Do not use with long callback context
 * This is useful if at least one of the timers needs interrupt priority
 */
void systick_app_timer_tickAndProcess() {
 800b9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ac:	4d11      	ldr	r5, [pc, #68]	; (800b9f4 <systick_app_timer_tickAndProcess+0x4c>)
 800b9ae:	2400      	movs	r4, #0
 800b9b0:	462e      	mov	r6, r5
								appTimer.channel[i].timer->timerAlarmCallback();
								appTimer.channel[i].timer->value = 0;
							}
							// if single shot, make not active after expiration
							if (appTimer.channel[i].timer->mode == APP_TIMER_MODE_SINGLE) {
								appTimer.channel[i].active = false;
 800b9b2:	4627      	mov	r7, r4
			if (appTimer.channel[i].timer != 0) {
 800b9b4:	686b      	ldr	r3, [r5, #4]
 800b9b6:	b1b3      	cbz	r3, 800b9e6 <systick_app_timer_tickAndProcess+0x3e>
				if (appTimer.channel[i].active) {
 800b9b8:	f816 2034 	ldrb.w	r2, [r6, r4, lsl #3]
 800b9bc:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800b9c0:	b18a      	cbz	r2, 800b9e6 <systick_app_timer_tickAndProcess+0x3e>
					appTimer.channel[i].timer->value++;
 800b9c2:	685a      	ldr	r2, [r3, #4]
					if (appTimer.channel[i].timer->alarm > 0) {
 800b9c4:	68d9      	ldr	r1, [r3, #12]
					appTimer.channel[i].timer->value++;
 800b9c6:	3201      	adds	r2, #1
 800b9c8:	605a      	str	r2, [r3, #4]
					if (appTimer.channel[i].timer->alarm > 0) {
 800b9ca:	b161      	cbz	r1, 800b9e6 <systick_app_timer_tickAndProcess+0x3e>
						if (appTimer.channel[i].timer->value >= appTimer.channel[i].timer->alarm) {
 800b9cc:	428a      	cmp	r2, r1
 800b9ce:	d30a      	bcc.n	800b9e6 <systick_app_timer_tickAndProcess+0x3e>
							if (appTimer.channel[i].timer->timerAlarmCallback) {
 800b9d0:	691b      	ldr	r3, [r3, #16]
 800b9d2:	b113      	cbz	r3, 800b9da <systick_app_timer_tickAndProcess+0x32>
								appTimer.channel[i].timer->timerAlarmCallback();
 800b9d4:	4798      	blx	r3
								appTimer.channel[i].timer->value = 0;
 800b9d6:	686b      	ldr	r3, [r5, #4]
 800b9d8:	605f      	str	r7, [r3, #4]
							if (appTimer.channel[i].timer->mode == APP_TIMER_MODE_SINGLE) {
 800b9da:	686b      	ldr	r3, [r5, #4]
 800b9dc:	7a1b      	ldrb	r3, [r3, #8]
 800b9de:	2b01      	cmp	r3, #1
								appTimer.channel[i].active = false;
 800b9e0:	bf08      	it	eq
 800b9e2:	f806 7008 	strbeq.w	r7, [r6, r8]
 800b9e6:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 800b9e8:	2c0a      	cmp	r4, #10
 800b9ea:	f105 0508 	add.w	r5, r5, #8
 800b9ee:	d1e1      	bne.n	800b9b4 <systick_app_timer_tickAndProcess+0xc>
						}
					}
				}
			}
		}
}
 800b9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f4:	200008f0 	.word	0x200008f0

0800b9f8 <systick_app_timer_channel_start>:

	return 1; // channel not found
}

uint32_t systick_app_timer_channel_start(uint8_t channel){
	if (channel >= APP_TIMER_MAX_CHANNELS) {
 800b9f8:	2809      	cmp	r0, #9
uint32_t systick_app_timer_channel_start(uint8_t channel){
 800b9fa:	b510      	push	{r4, lr}
	if (channel >= APP_TIMER_MAX_CHANNELS) {
 800b9fc:	d80b      	bhi.n	800ba16 <systick_app_timer_channel_start+0x1e>
		return 2; // channel number out of bounds
	}

	if (appTimer.channel[channel].timer) {
 800b9fe:	4908      	ldr	r1, [pc, #32]	; (800ba20 <systick_app_timer_channel_start+0x28>)
 800ba00:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 800ba04:	685c      	ldr	r4, [r3, #4]
 800ba06:	2301      	movs	r3, #1
 800ba08:	b13c      	cbz	r4, 800ba1a <systick_app_timer_channel_start+0x22>
		appTimer.channel[channel].timer->value = 0; // reset when starting
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	6062      	str	r2, [r4, #4]
		appTimer.channel[channel].active = true;
 800ba0e:	f801 3030 	strb.w	r3, [r1, r0, lsl #3]
		return 0;
 800ba12:	4610      	mov	r0, r2
 800ba14:	bd10      	pop	{r4, pc}
		return 2; // channel number out of bounds
 800ba16:	2002      	movs	r0, #2
 800ba18:	bd10      	pop	{r4, pc}
	}

	return 1; // channel not found
 800ba1a:	4618      	mov	r0, r3
}
 800ba1c:	bd10      	pop	{r4, pc}
 800ba1e:	bf00      	nop
 800ba20:	200008f0 	.word	0x200008f0

0800ba24 <systick_app_timer_channel_create>:
/*
 * Register a channel. The channel pointer should be declared
 * in memory by the requesting module. It is only pointed at by
 * the app timer module.
 */
uint32_t systick_app_timer_channel_create(systick_app_timer_t * timer){
 800ba24:	b570      	push	{r4, r5, r6, lr}
	if (appTimer.count >= APP_TIMER_MAX_CHANNELS) {
 800ba26:	4b0c      	ldr	r3, [pc, #48]	; (800ba58 <systick_app_timer_channel_create+0x34>)
 800ba28:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ba2c:	2909      	cmp	r1, #9
 800ba2e:	d810      	bhi.n	800ba52 <systick_app_timer_channel_create+0x2e>
 800ba30:	2200      	movs	r2, #0
	}

	uint8_t i;
	for (i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
		// take the first available slot
		if (appTimer.channel[i].timer == 0) {
 800ba32:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
 800ba36:	b2d5      	uxtb	r5, r2
 800ba38:	6866      	ldr	r6, [r4, #4]
 800ba3a:	b936      	cbnz	r6, 800ba4a <systick_app_timer_channel_create+0x26>
			appTimer.channel[i].timer = timer;
 800ba3c:	6060      	str	r0, [r4, #4]
			appTimer.channel[i].timer->channel = i;
 800ba3e:	7005      	strb	r5, [r0, #0]
			break;
		}
	}

	appTimer.count++;
 800ba40:	3101      	adds	r1, #1
 800ba42:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50

	return 0;
 800ba46:	2000      	movs	r0, #0
 800ba48:	bd70      	pop	{r4, r5, r6, pc}
 800ba4a:	3201      	adds	r2, #1
	for (i = 0; i < APP_TIMER_MAX_CHANNELS; i++) {
 800ba4c:	2a0a      	cmp	r2, #10
 800ba4e:	d1f0      	bne.n	800ba32 <systick_app_timer_channel_create+0xe>
 800ba50:	e7f6      	b.n	800ba40 <systick_app_timer_channel_create+0x1c>
		return 2; // timer module is full
 800ba52:	2002      	movs	r0, #2
}
 800ba54:	bd70      	pop	{r4, r5, r6, pc}
 800ba56:	bf00      	nop
 800ba58:	200008f0 	.word	0x200008f0

0800ba5c <systick_app_timer_module_init>:

void systick_app_timer_module_init() {

	memset(&appTimer, 0, sizeof(appTimer));
 800ba5c:	2254      	movs	r2, #84	; 0x54
 800ba5e:	2100      	movs	r1, #0
 800ba60:	4801      	ldr	r0, [pc, #4]	; (800ba68 <systick_app_timer_module_init+0xc>)
 800ba62:	f001 b8ab 	b.w	800cbbc <memset>
 800ba66:	bf00      	nop
 800ba68:	200008f0 	.word	0x200008f0

0800ba6c <LL_APB1_GRP1_EnableClock>:
  SET_BIT(RCC->APB1ENR1, Periphs);
 800ba6c:	4b05      	ldr	r3, [pc, #20]	; (800ba84 <LL_APB1_GRP1_EnableClock+0x18>)
 800ba6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ba70:	4302      	orrs	r2, r0
 800ba72:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800ba74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 800ba76:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800ba78:	4018      	ands	r0, r3
 800ba7a:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 800ba7c:	9b01      	ldr	r3, [sp, #4]
}
 800ba7e:	b002      	add	sp, #8
 800ba80:	4770      	bx	lr
 800ba82:	bf00      	nop
 800ba84:	40021000 	.word	0x40021000

0800ba88 <LL_RCC_SetUSBClockSource.constprop.3>:
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, USBxSource);
 800ba88:	4a03      	ldr	r2, [pc, #12]	; (800ba98 <LL_RCC_SetUSBClockSource.constprop.3+0x10>)
 800ba8a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800ba8e:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 800ba92:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800ba96:	4770      	bx	lr
 800ba98:	40021000 	.word	0x40021000

0800ba9c <delay_us>:
extern uint8_t USB_Mode;
extern uint8_t Enter_Into_DFU,MSC_continue,VCP_continue;

void delay_us(uint32_t us){
    uint32_t i,k;
    for(k=0;k<us;k++)
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	4283      	cmp	r3, r0
 800baa0:	d100      	bne.n	800baa4 <delay_us+0x8>
    {
    	for(i=0;i<11;i++)
         __NOP();  // Timed at 48 MHz clock
    }
}
 800baa2:	4770      	bx	lr
 800baa4:	220b      	movs	r2, #11
  __ASM volatile ("nop");
 800baa6:	bf00      	nop
    	for(i=0;i<11;i++)
 800baa8:	3a01      	subs	r2, #1
 800baaa:	d1fc      	bne.n	800baa6 <delay_us+0xa>
    for(k=0;k<us;k++)
 800baac:	3301      	adds	r3, #1
 800baae:	e7f6      	b.n	800ba9e <delay_us+0x2>

0800bab0 <Start_LPTIMCounter2>:
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 800bab0:	4a08      	ldr	r2, [pc, #32]	; (800bad4 <Start_LPTIMCounter2+0x24>)
 800bab2:	6913      	ldr	r3, [r2, #16]
 800bab4:	f043 0301 	orr.w	r3, r3, #1
 800bab8:	6113      	str	r3, [r2, #16]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 800baba:	6993      	ldr	r3, [r2, #24]
 800babc:	0c1b      	lsrs	r3, r3, #16
 800babe:	041b      	lsls	r3, r3, #16
 800bac0:	4318      	orrs	r0, r3
 800bac2:	6190      	str	r0, [r2, #24]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 800bac4:	6913      	ldr	r3, [r2, #16]
 800bac6:	f023 0306 	bic.w	r3, r3, #6
 800baca:	f043 0304 	orr.w	r3, r3, #4
 800bace:	6113      	str	r3, [r2, #16]
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	40009400 	.word	0x40009400

0800bad8 <LSE_ON>:
	/* Following 2lines are necessary before LSE
	RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN; // PWR clock is necessary for LSE
	PWR->CR1 |= PWR_CR1_DBP;  // Enable Backup access
	*/

	RCC->BDCR |= RCC_BDCR_LSEON;  // LSE ON
 800bad8:	4b05      	ldr	r3, [pc, #20]	; (800baf0 <LSE_ON+0x18>)
 800bada:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800bade:	f042 0201 	orr.w	r2, r2, #1
 800bae2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	while(((RCC->BDCR) & RCC_BDCR_LSERDY) != (RCC_BDCR_LSERDY)); // wait for LSE to get ready
 800bae6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800baea:	0792      	lsls	r2, r2, #30
 800baec:	d5fb      	bpl.n	800bae6 <LSE_ON+0xe>

}
 800baee:	4770      	bx	lr
 800baf0:	40021000 	.word	0x40021000

0800baf4 <EnterStop>:
	{
	}
}

void EnterStop(void) // Enter Stop Mode
{
 800baf4:	b508      	push	{r3, lr}
	HAL_SuspendTick();  // Before entering STOP mode, SYS_tick needs to disable
 800baf6:	f7f7 feaf 	bl	8003858 <HAL_SuspendTick>
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 800bafa:	4a07      	ldr	r2, [pc, #28]	; (800bb18 <EnterStop+0x24>)
 800bafc:	6813      	ldr	r3, [r2, #0]
 800bafe:	f023 0307 	bic.w	r3, r3, #7
 800bb02:	f043 0301 	orr.w	r3, r3, #1
 800bb06:	6013      	str	r3, [r2, #0]
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800bb08:	4a04      	ldr	r2, [pc, #16]	; (800bb1c <EnterStop+0x28>)
 800bb0a:	6913      	ldr	r3, [r2, #16]
 800bb0c:	f043 0304 	orr.w	r3, r3, #4
 800bb10:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 800bb12:	bf30      	wfi
 800bb14:	bd08      	pop	{r3, pc}
 800bb16:	bf00      	nop
 800bb18:	40007000 	.word	0x40007000
 800bb1c:	e000ed00 	.word	0xe000ed00

0800bb20 <SystemClock_Config_MSI_80MHz>:
*            PLL_R                          = 4
*            Flash Latency(WS)              = 4
*/

void SystemClock_Config_MSI_80MHz(void)
{
 800bb20:	b510      	push	{r4, lr}
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 800bb22:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
{
 800bb26:	b092      	sub	sp, #72	; 0x48
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 800bb28:	f7ff ffa0 	bl	800ba6c <LL_APB1_GRP1_EnableClock>
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bb2c:	4b31      	ldr	r3, [pc, #196]	; (800bbf4 <SystemClock_Config_MSI_80MHz+0xd4>)
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb34:	601a      	str	r2, [r3, #0]
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800bb36:	685a      	ldr	r2, [r3, #4]
 800bb38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb3c:	605a      	str	r2, [r3, #4]
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 800bb3e:	685a      	ldr	r2, [r3, #4]
	  LL_PWR_EnableBkUpAccess();                              // Enable Backup access (needed for LSE clock)
	  LL_PWR_EnableVddUSB();                                  // Enable VDDUSB supply for USB
	  while(!LL_PWR_IsEnabledVddUSB());                       // Wait for VDDUSB supply to activate
 800bb40:	0552      	lsls	r2, r2, #21
 800bb42:	d5fc      	bpl.n	800bb3e <SystemClock_Config_MSI_80MHz+0x1e>

	  /* Enable MSI Oscillator and activate PLL with MSI as source */
	  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 800bb44:	2310      	movs	r3, #16
 800bb46:	9301      	str	r3, [sp, #4]
	  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	9307      	str	r3, [sp, #28]
	//  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
	  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 800bb4c:	930c      	str	r3, [sp, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLM            = 6;
 800bb4e:	2306      	movs	r3, #6
 800bb50:	930d      	str	r3, [sp, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLN            = 40;
 800bb52:	2328      	movs	r3, #40	; 0x28
 800bb54:	930e      	str	r3, [sp, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 800bb56:	2307      	movs	r3, #7
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
	  RCC_OscInitStruct.PLL.PLLR            = 4;

	  HAL_RCC_OscConfig(&RCC_OscInitStruct);

	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800bb58:	4c27      	ldr	r4, [pc, #156]	; (800bbf8 <SystemClock_Config_MSI_80MHz+0xd8>)
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 800bb5a:	930f      	str	r3, [sp, #60]	; 0x3c
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 800bb5c:	22b0      	movs	r2, #176	; 0xb0
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 800bb5e:	2304      	movs	r3, #4
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 800bb60:	9209      	str	r2, [sp, #36]	; 0x24
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800bb62:	eb0d 0003 	add.w	r0, sp, r3
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800bb66:	2202      	movs	r2, #2
 800bb68:	920b      	str	r2, [sp, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 800bb6a:	9310      	str	r3, [sp, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLR            = 4;
 800bb6c:	9311      	str	r3, [sp, #68]	; 0x44
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800bb6e:	f7f8 ff41 	bl	80049f4 <HAL_RCC_OscConfig>
	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800bb72:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bb76:	f023 0320 	bic.w	r3, r3, #32
 800bb7a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	  CLEAR_BIT(RCC->CIER, (RCC_IT_LSECSS));
 800bb7e:	69a3      	ldr	r3, [r4, #24]
 800bb80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb84:	61a3      	str	r3, [r4, #24]

	  LSE_ON();                                                     //Start LSE for RTC and LPTIM timer
 800bb86:	f7ff ffa7 	bl	800bad8 <LSE_ON>
	  HAL_RCCEx_EnableMSIPLLMode();
 800bb8a:	f7f9 f9a7 	bl	8004edc <HAL_RCCEx_EnableMSIPLLMode>


	  LL_RCC_SetSDMMCClockSource(LL_RCC_SDMMC1_CLKSOURCE_MSI);
 800bb8e:	f7ff ff7b 	bl	800ba88 <LL_RCC_SetUSBClockSource.constprop.3>
	  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_MSI);
 800bb92:	f7ff ff79 	bl	800ba88 <LL_RCC_SetUSBClockSource.constprop.3>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800bb96:	68a3      	ldr	r3, [r4, #8]
 800bb98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb9c:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800bb9e:	68a3      	ldr	r3, [r4, #8]
 800bba0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800bba4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bba8:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800bbaa:	68a3      	ldr	r3, [r4, #8]
 800bbac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800bbb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bbb4:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800bbb6:	68a3      	ldr	r3, [r4, #8]
 800bbb8:	f023 0303 	bic.w	r3, r3, #3
 800bbbc:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_FLASH_LATENCY_4
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800bbbe:	4b0f      	ldr	r3, [pc, #60]	; (800bbfc <SystemClock_Config_MSI_80MHz+0xdc>)
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	f022 0207 	bic.w	r2, r2, #7
 800bbc6:	f042 0204 	orr.w	r2, r2, #4
 800bbca:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_3
  *         @arg @ref LL_FLASH_LATENCY_4
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	f002 0207 	and.w	r2, r2, #7
	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2); //1
	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);

	  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
	  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4);
 800bbd2:	2a04      	cmp	r2, #4
 800bbd4:	d1fa      	bne.n	800bbcc <SystemClock_Config_MSI_80MHz+0xac>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800bbd6:	68a3      	ldr	r3, [r4, #8]
 800bbd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bbdc:	60a3      	str	r3, [r4, #8]

	  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_MSI);  // MSI clock is set as default clock after wake up from Stop
	  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();               // Disable USB clock to save power
 800bbde:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bbe0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bbe4:	64e3      	str	r3, [r4, #76]	; 0x4c
 800bbe6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bbe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	9b00      	ldr	r3, [sp, #0]

		}
 800bbf0:	b012      	add	sp, #72	; 0x48
 800bbf2:	bd10      	pop	{r4, pc}
 800bbf4:	40007000 	.word	0x40007000
 800bbf8:	40021000 	.word	0x40021000
 800bbfc:	40022000 	.word	0x40022000

0800bc00 <Configure_LPTIM2_Int>:
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800bc00:	4b0f      	ldr	r3, [pc, #60]	; (800bc40 <Configure_LPTIM2_Int+0x40>)
 800bc02:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800bc06:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 800bc0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SET_BIT(RCC->APB1ENR2, Periphs);
 800bc0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bc10:	f042 0220 	orr.w	r2, r2, #32
 800bc14:	65da      	str	r2, [r3, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800bc16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c

		}

//Configure LPTIM2 to generate the XX Hz interrupt
void Configure_LPTIM2_Int(void)
{
 800bc18:	b082      	sub	sp, #8
 800bc1a:	f003 0320 	and.w	r3, r3, #32
 800bc1e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800bc20:	9b01      	ldr	r3, [sp, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800bc22:	4b08      	ldr	r3, [pc, #32]	; (800bc44 <Configure_LPTIM2_Int+0x44>)
 800bc24:	2204      	movs	r2, #4
 800bc26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 800bc2a:	4b07      	ldr	r3, [pc, #28]	; (800bc48 <Configure_LPTIM2_Int+0x48>)
 800bc2c:	689a      	ldr	r2, [r3, #8]
 800bc2e:	f022 0202 	bic.w	r2, r2, #2
 800bc32:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 800bc34:	691a      	ldr	r2, [r3, #16]
 800bc36:	f022 0201 	bic.w	r2, r2, #1
 800bc3a:	611a      	str	r2, [r3, #16]
	LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);     // Enable LPTIM2 Clock
	NVIC_DisableIRQ(LPTIM2_IRQn);
	LL_LPTIM_DisableIT_ARRM(LPTIM2);                           // Enable auto reload match interrupt (ARRMIE).
	LL_LPTIM_Disable(LPTIM2);                                // LPTIM2 disable if needed

}
 800bc3c:	b002      	add	sp, #8
 800bc3e:	4770      	bx	lr
 800bc40:	40021000 	.word	0x40021000
 800bc44:	e000e100 	.word	0xe000e100
 800bc48:	40009400 	.word	0x40009400

0800bc4c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800bc4c:	b570      	push	{r4, r5, r6, lr}
	int div = 1;
 800bc4e:	2301      	movs	r3, #1
	while (d/div >= base)
 800bc50:	fbb1 f4f3 	udiv	r4, r1, r3
 800bc54:	4294      	cmp	r4, r2
 800bc56:	d201      	bcs.n	800bc5c <ts_itoa+0x10>
		div *= base;

	while (div != 0)
 800bc58:	b913      	cbnz	r3, 800bc60 <ts_itoa+0x14>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 800bc5a:	bd70      	pop	{r4, r5, r6, pc}
		div *= base;
 800bc5c:	4353      	muls	r3, r2
 800bc5e:	e7f7      	b.n	800bc50 <ts_itoa+0x4>
 800bc60:	6805      	ldr	r5, [r0, #0]
		int num = d/div;
 800bc62:	fbb1 f4f3 	udiv	r4, r1, r3
		if (num > 9)
 800bc66:	2c09      	cmp	r4, #9
		d = d%div;
 800bc68:	fb03 1114 	mls	r1, r3, r4, r1
			*((*buf)++) = (num-10) + 'A';
 800bc6c:	f105 0601 	add.w	r6, r5, #1
 800bc70:	bfcc      	ite	gt
 800bc72:	3437      	addgt	r4, #55	; 0x37
			*((*buf)++) = num + '0';
 800bc74:	3430      	addle	r4, #48	; 0x30
			*((*buf)++) = (num-10) + 'A';
 800bc76:	6006      	str	r6, [r0, #0]
		div /= base;
 800bc78:	fb93 f3f2 	sdiv	r3, r3, r2
			*((*buf)++) = num + '0';
 800bc7c:	702c      	strb	r4, [r5, #0]
 800bc7e:	e7eb      	b.n	800bc58 <ts_itoa+0xc>

0800bc80 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800bc80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bc84:	ad02      	add	r5, sp, #8
 800bc86:	460c      	mov	r4, r1
 800bc88:	f845 0d04 	str.w	r0, [r5, #-4]!
 800bc8c:	4613      	mov	r3, r2
	char *start_buf = buf;
 800bc8e:	4606      	mov	r6, r0
				{
					signed int val = va_arg(va, signed int);
					if (val < 0)
					{
						val *= -1;
						*buf++ = '-';
 800bc90:	272d      	movs	r7, #45	; 0x2d
	while(*fmt)
 800bc92:	7822      	ldrb	r2, [r4, #0]
 800bc94:	b932      	cbnz	r2, 800bca4 <ts_formatstring+0x24>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 800bc96:	9b01      	ldr	r3, [sp, #4]
 800bc98:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
}
 800bc9a:	9801      	ldr	r0, [sp, #4]
 800bc9c:	1b80      	subs	r0, r0, r6
 800bc9e:	b002      	add	sp, #8
 800bca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (*fmt == '%')
 800bca4:	2a25      	cmp	r2, #37	; 0x25
 800bca6:	d146      	bne.n	800bd36 <ts_formatstring+0xb6>
			switch (*(++fmt))
 800bca8:	7862      	ldrb	r2, [r4, #1]
 800bcaa:	2a64      	cmp	r2, #100	; 0x64
 800bcac:	d021      	beq.n	800bcf2 <ts_formatstring+0x72>
 800bcae:	d80a      	bhi.n	800bcc6 <ts_formatstring+0x46>
 800bcb0:	2a58      	cmp	r2, #88	; 0x58
 800bcb2:	d013      	beq.n	800bcdc <ts_formatstring+0x5c>
 800bcb4:	2a63      	cmp	r2, #99	; 0x63
 800bcb6:	d015      	beq.n	800bce4 <ts_formatstring+0x64>
 800bcb8:	2a25      	cmp	r2, #37	; 0x25
 800bcba:	d109      	bne.n	800bcd0 <ts_formatstring+0x50>
				  *buf++ = '%';
 800bcbc:	9901      	ldr	r1, [sp, #4]
 800bcbe:	1c48      	adds	r0, r1, #1
 800bcc0:	9001      	str	r0, [sp, #4]
 800bcc2:	700a      	strb	r2, [r1, #0]
				  break;
 800bcc4:	e004      	b.n	800bcd0 <ts_formatstring+0x50>
			switch (*(++fmt))
 800bcc6:	2a73      	cmp	r2, #115	; 0x73
 800bcc8:	d023      	beq.n	800bd12 <ts_formatstring+0x92>
 800bcca:	d803      	bhi.n	800bcd4 <ts_formatstring+0x54>
 800bccc:	2a69      	cmp	r2, #105	; 0x69
 800bcce:	d010      	beq.n	800bcf2 <ts_formatstring+0x72>
			fmt++;
 800bcd0:	3402      	adds	r4, #2
 800bcd2:	e7de      	b.n	800bc92 <ts_formatstring+0x12>
			switch (*(++fmt))
 800bcd4:	2a75      	cmp	r2, #117	; 0x75
 800bcd6:	d029      	beq.n	800bd2c <ts_formatstring+0xac>
 800bcd8:	2a78      	cmp	r2, #120	; 0x78
 800bcda:	d1f9      	bne.n	800bcd0 <ts_formatstring+0x50>
					ts_itoa(&buf, va_arg(va, int), 16);
 800bcdc:	f103 0804 	add.w	r8, r3, #4
 800bce0:	2210      	movs	r2, #16
 800bce2:	e026      	b.n	800bd32 <ts_formatstring+0xb2>
				*buf++ = va_arg(va, int);
 800bce4:	9a01      	ldr	r2, [sp, #4]
 800bce6:	1c51      	adds	r1, r2, #1
 800bce8:	9101      	str	r1, [sp, #4]
 800bcea:	6819      	ldr	r1, [r3, #0]
 800bcec:	7011      	strb	r1, [r2, #0]
 800bcee:	3304      	adds	r3, #4
				break;
 800bcf0:	e7ee      	b.n	800bcd0 <ts_formatstring+0x50>
					signed int val = va_arg(va, signed int);
 800bcf2:	6819      	ldr	r1, [r3, #0]
					if (val < 0)
 800bcf4:	2900      	cmp	r1, #0
					signed int val = va_arg(va, signed int);
 800bcf6:	f103 0804 	add.w	r8, r3, #4
					if (val < 0)
 800bcfa:	da04      	bge.n	800bd06 <ts_formatstring+0x86>
						*buf++ = '-';
 800bcfc:	9b01      	ldr	r3, [sp, #4]
 800bcfe:	1c5a      	adds	r2, r3, #1
 800bd00:	9201      	str	r2, [sp, #4]
						val *= -1;
 800bd02:	4249      	negs	r1, r1
						*buf++ = '-';
 800bd04:	701f      	strb	r7, [r3, #0]
					ts_itoa(&buf, val, 10);
 800bd06:	220a      	movs	r2, #10
					ts_itoa(&buf, va_arg(va, int), 16);
 800bd08:	4628      	mov	r0, r5
 800bd0a:	f7ff ff9f 	bl	800bc4c <ts_itoa>
 800bd0e:	4643      	mov	r3, r8
				break;
 800bd10:	e7de      	b.n	800bcd0 <ts_formatstring+0x50>
					char * arg = va_arg(va, char *);
 800bd12:	1d19      	adds	r1, r3, #4
 800bd14:	681b      	ldr	r3, [r3, #0]
					while (*arg)
 800bd16:	781a      	ldrb	r2, [r3, #0]
 800bd18:	b90a      	cbnz	r2, 800bd1e <ts_formatstring+0x9e>
					char * arg = va_arg(va, char *);
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	e7d8      	b.n	800bcd0 <ts_formatstring+0x50>
						*buf++ = *arg++;
 800bd1e:	9a01      	ldr	r2, [sp, #4]
 800bd20:	1c50      	adds	r0, r2, #1
 800bd22:	9001      	str	r0, [sp, #4]
 800bd24:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bd28:	7010      	strb	r0, [r2, #0]
 800bd2a:	e7f4      	b.n	800bd16 <ts_formatstring+0x96>
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800bd2c:	f103 0804 	add.w	r8, r3, #4
 800bd30:	220a      	movs	r2, #10
					ts_itoa(&buf, va_arg(va, int), 16);
 800bd32:	6819      	ldr	r1, [r3, #0]
 800bd34:	e7e8      	b.n	800bd08 <ts_formatstring+0x88>
			*buf++ = *fmt++;
 800bd36:	9901      	ldr	r1, [sp, #4]
 800bd38:	1c48      	adds	r0, r1, #1
 800bd3a:	9001      	str	r0, [sp, #4]
 800bd3c:	3401      	adds	r4, #1
 800bd3e:	700a      	strb	r2, [r1, #0]
 800bd40:	e7a7      	b.n	800bc92 <ts_formatstring+0x12>

0800bd42 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 800bd42:	b40e      	push	{r1, r2, r3}
 800bd44:	b503      	push	{r0, r1, lr}
 800bd46:	aa03      	add	r2, sp, #12
 800bd48:	f852 1b04 	ldr.w	r1, [r2], #4
	int length;
	va_list va;
	va_start(va, fmt);
 800bd4c:	9201      	str	r2, [sp, #4]
	length = ts_formatstring(buf, fmt, va);
 800bd4e:	f7ff ff97 	bl	800bc80 <ts_formatstring>
	va_end(va);
	return length;
}
 800bd52:	b002      	add	sp, #8
 800bd54:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd58:	b003      	add	sp, #12
 800bd5a:	4770      	bx	lr

0800bd5c <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800bd5c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd5e:	4c1d      	ldr	r4, [pc, #116]	; (800bdd4 <HAL_PCD_MspInit+0x78>)
 800bd60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bd62:	f043 0301 	orr.w	r3, r3, #1
 800bd66:	64e3      	str	r3, [r4, #76]	; 0x4c
 800bd68:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 800bd6a:	b088      	sub	sp, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd6c:	f003 0301 	and.w	r3, r3, #1
 800bd70:	9301      	str	r3, [sp, #4]
 800bd72:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800bd74:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bd78:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd7a:	2302      	movs	r3, #2
 800bd7c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd7e:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd80:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bd82:	260a      	movs	r6, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800bd84:	a903      	add	r1, sp, #12
 800bd86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd8a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd8c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bd8e:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800bd90:	f7f7 ff3c 	bl	8003c0c <HAL_GPIO_Init>
  
  /* Configure VBUS Pin */

  
  /* Configure ID pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800bd94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd98:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bd9a:	2312      	movs	r3, #18
 800bd9c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd9e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bda0:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bda2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bda6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bda8:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bdaa:	f7f7 ff2f 	bl	8003c0c <HAL_GPIO_Init>
  
  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bdae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bdb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bdb4:	64e3      	str	r3, [r4, #76]	; 0x4c
 800bdb6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bdb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bdbc:	9302      	str	r3, [sp, #8]
  
  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 800bdbe:	462a      	mov	r2, r5
 800bdc0:	2107      	movs	r1, #7
 800bdc2:	2043      	movs	r0, #67	; 0x43
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bdc4:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 800bdc6:	f7f7 fd69 	bl	800389c <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bdca:	2043      	movs	r0, #67	; 0x43
 800bdcc:	f7f7 fd9a 	bl	8003904 <HAL_NVIC_EnableIRQ>
    
}
 800bdd0:	b008      	add	sp, #32
 800bdd2:	bd70      	pop	{r4, r5, r6, pc}
 800bdd4:	40021000 	.word	0x40021000

0800bdd8 <HAL_PCD_MspDeInit>:
  * @retval None
  */
void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)
{  
  /* Disable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 800bdd8:	4b04      	ldr	r3, [pc, #16]	; (800bdec <HAL_PCD_MspDeInit+0x14>)
 800bdda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bddc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bde0:	64da      	str	r2, [r3, #76]	; 0x4c
  __HAL_RCC_SYSCFG_CLK_DISABLE(); 
 800bde2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bde4:	f022 0201 	bic.w	r2, r2, #1
 800bde8:	661a      	str	r2, [r3, #96]	; 0x60
 800bdea:	4770      	bx	lr
 800bdec:	40021000 	.word	0x40021000

0800bdf0 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800bdf0:	f500 7162 	add.w	r1, r0, #904	; 0x388
 800bdf4:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800bdf8:	f7f6 bd89 	b.w	800290e <USBD_LL_SetupStage>

0800bdfc <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bdfc:	231c      	movs	r3, #28
 800bdfe:	fb03 0301 	mla	r3, r3, r1, r0
 800be02:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800be06:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 800be0a:	f7f6 bdad 	b.w	8002968 <USBD_LL_DataOutStage>

0800be0e <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be0e:	231c      	movs	r3, #28
 800be10:	fb03 0301 	mla	r3, r3, r1, r0
 800be14:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800be18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800be1a:	f7f6 bdd7 	b.w	80029cc <USBD_LL_DataInStage>

0800be1e <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 800be1e:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800be22:	f7f6 be53 	b.w	8002acc <USBD_LL_SOF>

0800be26 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 800be26:	b510      	push	{r4, lr}
 800be28:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 800be2a:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800be2e:	f7f6 fe1c 	bl	8002a6a <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800be32:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 800be36:	2101      	movs	r1, #1
}
 800be38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800be3c:	f7f6 be34 	b.w	8002aa8 <USBD_LL_SetSpeed>

0800be40 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
  USBD_LL_Suspend(hpcd->pData);
 800be40:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800be44:	f7f6 be33 	b.w	8002aae <USBD_LL_Suspend>

0800be48 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 800be48:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800be4c:	f7f6 be38 	b.w	8002ac0 <USBD_LL_Resume>

0800be50 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 800be50:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800be54:	f7f6 be48 	b.w	8002ae8 <USBD_LL_IsoOUTIncomplete>

0800be58 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 800be58:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800be5c:	f7f6 be42 	b.w	8002ae4 <USBD_LL_IsoINIncomplete>

0800be60 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 800be60:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800be64:	f7f6 be42 	b.w	8002aec <USBD_LL_DevConnected>

0800be68 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 800be68:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 800be6c:	f7f6 be40 	b.w	8002af0 <USBD_LL_DevDisconnected>

0800be70 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800be70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 800be72:	4c15      	ldr	r4, [pc, #84]	; (800bec8 <USBD_LL_Init+0x58>)
  hpcd.Init.dev_endpoints = 5;
  hpcd.Init.use_dedicated_ep1 = 0;
 800be74:	2500      	movs	r5, #0
  hpcd.Init.dev_endpoints = 5;
 800be76:	2305      	movs	r3, #5
 800be78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hpcd.Init.ep0_mps = 0x40;
  hpcd.Init.dma_enable = 0;
  hpcd.Init.low_power_enable = 0;
  hpcd.Init.lpm_enable = 0;
  hpcd.Init.battery_charging_enable = 0;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800be7c:	2601      	movs	r6, #1
  hpcd.Init.Sof_enable = 0;
  hpcd.Init.speed = PCD_SPEED_FULL;
  hpcd.Init.vbus_sensing_enable = 0;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 800be7e:	f8c4 03c8 	str.w	r0, [r4, #968]	; 0x3c8
  hpcd.Init.ep0_mps = 0x40;
 800be82:	2740      	movs	r7, #64	; 0x40
  pdev->pData = &hpcd;
 800be84:	f8c0 4220 	str.w	r4, [r0, #544]	; 0x220
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 800be88:	4620      	mov	r0, r4
  hpcd.Init.dev_endpoints = 5;
 800be8a:	e884 000c 	stmia.w	r4, {r2, r3}
  hpcd.Init.use_dedicated_ep1 = 0;
 800be8e:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;
 800be90:	6167      	str	r7, [r4, #20]
  hpcd.Init.dma_enable = 0;
 800be92:	6125      	str	r5, [r4, #16]
  hpcd.Init.low_power_enable = 0;
 800be94:	6225      	str	r5, [r4, #32]
  hpcd.Init.lpm_enable = 0;
 800be96:	6265      	str	r5, [r4, #36]	; 0x24
  hpcd.Init.battery_charging_enable = 0;
 800be98:	62a5      	str	r5, [r4, #40]	; 0x28
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800be9a:	61a6      	str	r6, [r4, #24]
  hpcd.Init.Sof_enable = 0;
 800be9c:	61e5      	str	r5, [r4, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800be9e:	60e6      	str	r6, [r4, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 800bea0:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_PCD_Init(&hpcd);
 800bea2:	f7f7 ff8f 	bl	8003dc4 <HAL_PCD_Init>
  
  /* Configure EPs FIFOs */
  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 800bea6:	2180      	movs	r1, #128	; 0x80
 800bea8:	4620      	mov	r0, r4
 800beaa:	f7f8 fca0 	bl	80047ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 800beae:	463a      	mov	r2, r7
 800beb0:	4629      	mov	r1, r5
 800beb2:	4620      	mov	r0, r4
 800beb4:	f7f8 fc7a 	bl	80047ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x80);
 800beb8:	2280      	movs	r2, #128	; 0x80
 800beba:	4631      	mov	r1, r6
 800bebc:	4620      	mov	r0, r4
 800bebe:	f7f8 fc75 	bl	80047ac <HAL_PCDEx_SetTxFiFo>

  return USBD_OK;
}
 800bec2:	4628      	mov	r0, r5
 800bec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bec6:	bf00      	nop
 800bec8:	2000b72c 	.word	0x2000b72c

0800becc <USBD_LL_DeInit>:
  * @brief  De-Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 800becc:	b508      	push	{r3, lr}
  HAL_PCD_DeInit(pdev->pData);
 800bece:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bed2:	f7f8 f829 	bl	8003f28 <HAL_PCD_DeInit>
  return USBD_OK;
}
 800bed6:	2000      	movs	r0, #0
 800bed8:	bd08      	pop	{r3, pc}

0800beda <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800beda:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 800bedc:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bee0:	f7f7 fff5 	bl	8003ece <HAL_PCD_Start>
  return USBD_OK;
}
 800bee4:	2000      	movs	r0, #0
 800bee6:	bd08      	pop	{r3, pc}

0800bee8 <USBD_LL_Stop>:
  * @brief  Stops the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800bee8:	b508      	push	{r3, lr}
  HAL_PCD_Stop(pdev->pData);
 800beea:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800beee:	f7f8 f803 	bl	8003ef8 <HAL_PCD_Stop>
  return USBD_OK;
}
 800bef2:	2000      	movs	r0, #0
 800bef4:	bd08      	pop	{r3, pc}

0800bef6 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 800bef6:	b510      	push	{r4, lr}
 800bef8:	461c      	mov	r4, r3
  HAL_PCD_EP_Open(pdev->pData,
 800befa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800befe:	4613      	mov	r3, r2
 800bf00:	4622      	mov	r2, r4
 800bf02:	f7f8 fb47 	bl	8004594 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 800bf06:	2000      	movs	r0, #0
 800bf08:	bd10      	pop	{r4, pc}

0800bf0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf0a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bf0c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bf10:	f7f8 fb65 	bl	80045de <HAL_PCD_EP_Close>
  return USBD_OK;
}
 800bf14:	2000      	movs	r0, #0
 800bf16:	bd08      	pop	{r3, pc}

0800bf18 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf18:	b508      	push	{r3, lr}
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800bf1a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bf1e:	f7f8 fc2b 	bl	8004778 <HAL_PCD_EP_Flush>
  return USBD_OK;
}
 800bf22:	2000      	movs	r0, #0
 800bf24:	bd08      	pop	{r3, pc}

0800bf26 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf26:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bf28:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bf2c:	f7f8 fbd3 	bl	80046d6 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 800bf30:	2000      	movs	r0, #0
 800bf32:	bd08      	pop	{r3, pc}

0800bf34 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf34:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bf36:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bf3a:	f7f8 fbf8 	bl	800472e <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 800bf3e:	2000      	movs	r0, #0
 800bf40:	bd08      	pop	{r3, pc}

0800bf42 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 800bf42:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bf46:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 800bf4a:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bf4e:	bf1b      	ittet	ne
 800bf50:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800bf54:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bf58:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bf5c:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bf60:	bf08      	it	eq
 800bf62:	f891 01e2 	ldrbeq.w	r0, [r1, #482]	; 0x1e2
  }
}
 800bf66:	4770      	bx	lr

0800bf68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bf68:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bf6a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bf6e:	f7f8 fafd 	bl	800456c <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 800bf72:	2000      	movs	r0, #0
 800bf74:	bd08      	pop	{r3, pc}

0800bf76 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 800bf76:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf78:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bf7c:	f7f8 fb84 	bl	8004688 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 800bf80:	2000      	movs	r0, #0
 800bf82:	bd08      	pop	{r3, pc}

0800bf84 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 800bf84:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf86:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bf8a:	f7f8 fb4b 	bl	8004624 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 800bf8e:	2000      	movs	r0, #0
 800bf90:	bd08      	pop	{r3, pc}

0800bf92 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf92:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800bf94:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bf98:	f7f8 fb6e 	bl	8004678 <HAL_PCD_EP_GetRxCount>
}
 800bf9c:	bd08      	pop	{r3, pc}
	...

0800bfa0 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc_VCP);
 800bfa0:	2312      	movs	r3, #18
 800bfa2:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc_VCP;
}
 800bfa4:	4800      	ldr	r0, [pc, #0]	; (800bfa8 <USBD_VCP_DeviceDescriptor+0x8>)
 800bfa6:	4770      	bx	lr
 800bfa8:	2000012c 	.word	0x2000012c

0800bfac <USBD_MSC_DeviceDescriptor>:

uint8_t *USBD_MSC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 800bfac:	2312      	movs	r3, #18
 800bfae:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc;
}
 800bfb0:	4800      	ldr	r0, [pc, #0]	; (800bfb4 <USBD_MSC_DeviceDescriptor+0x8>)
 800bfb2:	4770      	bx	lr
 800bfb4:	20000118 	.word	0x20000118

0800bfb8 <USBD_MSC_LangIDStrDescriptor>:
  return (uint8_t*)USBD_LangIDDesc;
}

uint8_t *USBD_MSC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 800bfb8:	2304      	movs	r3, #4
 800bfba:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 800bfbc:	4800      	ldr	r0, [pc, #0]	; (800bfc0 <USBD_MSC_LangIDStrDescriptor+0x8>)
 800bfbe:	4770      	bx	lr
 800bfc0:	20000140 	.word	0x20000140

0800bfc4 <IntToUnicode>:
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800bfc4:	2300      	movs	r3, #0
{
 800bfc6:	b530      	push	{r4, r5, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800bfc8:	461d      	mov	r5, r3
  for( idx = 0 ; idx < len ; idx ++)
 800bfca:	b2dc      	uxtb	r4, r3
 800bfcc:	42a2      	cmp	r2, r4
 800bfce:	d800      	bhi.n	800bfd2 <IntToUnicode+0xe>
  }
}
 800bfd0:	bd30      	pop	{r4, r5, pc}
    if( ((value >> 28)) < 0xA )
 800bfd2:	0f04      	lsrs	r4, r0, #28
 800bfd4:	2c09      	cmp	r4, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 800bfd6:	bf94      	ite	ls
 800bfd8:	3430      	addls	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800bfda:	3437      	addhi	r4, #55	; 0x37
 800bfdc:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 800bfe0:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 800bfe4:	0100      	lsls	r0, r0, #4
    pbuf[ 2* idx + 1] = 0;
 800bfe6:	7065      	strb	r5, [r4, #1]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	e7ee      	b.n	800bfca <IntToUnicode+0x6>

0800bfec <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800bfec:	231a      	movs	r3, #26
{
 800bfee:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800bff0:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)VCP_DEVICE_ID1;
 800bff2:	4b09      	ldr	r3, [pc, #36]	; (800c018 <USBD_VCP_SerialStrDescriptor+0x2c>)
 800bff4:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)VCP_DEVICE_ID3;
 800bff6:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 800bff8:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800bffa:	18c0      	adds	r0, r0, r3
 800bffc:	d00a      	beq.n	800c014 <USBD_VCP_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)VCP_DEVICE_ID2;
 800bffe:	4b07      	ldr	r3, [pc, #28]	; (800c01c <USBD_VCP_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800c000:	4907      	ldr	r1, [pc, #28]	; (800c020 <USBD_VCP_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)VCP_DEVICE_ID2;
 800c002:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800c004:	2208      	movs	r2, #8
 800c006:	f7ff ffdd 	bl	800bfc4 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800c00a:	2204      	movs	r2, #4
 800c00c:	4905      	ldr	r1, [pc, #20]	; (800c024 <USBD_VCP_SerialStrDescriptor+0x38>)
 800c00e:	4620      	mov	r0, r4
 800c010:	f7ff ffd8 	bl	800bfc4 <IntToUnicode>
}
 800c014:	4804      	ldr	r0, [pc, #16]	; (800c028 <USBD_VCP_SerialStrDescriptor+0x3c>)
 800c016:	bd10      	pop	{r4, pc}
 800c018:	1fff7a30 	.word	0x1fff7a30
 800c01c:	1fff7a34 	.word	0x1fff7a34
 800c020:	20000146 	.word	0x20000146
 800c024:	20000156 	.word	0x20000156
 800c028:	20000144 	.word	0x20000144

0800c02c <USBD_MSC_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800c02c:	231a      	movs	r3, #26
{
 800c02e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800c030:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 800c032:	4b09      	ldr	r3, [pc, #36]	; (800c058 <USBD_MSC_SerialStrDescriptor+0x2c>)
 800c034:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 800c036:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 800c038:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800c03a:	18c0      	adds	r0, r0, r3
 800c03c:	d00a      	beq.n	800c054 <USBD_MSC_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800c03e:	4b07      	ldr	r3, [pc, #28]	; (800c05c <USBD_MSC_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800c040:	4907      	ldr	r1, [pc, #28]	; (800c060 <USBD_MSC_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800c042:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800c044:	2208      	movs	r2, #8
 800c046:	f7ff ffbd 	bl	800bfc4 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800c04a:	2204      	movs	r2, #4
 800c04c:	4905      	ldr	r1, [pc, #20]	; (800c064 <USBD_MSC_SerialStrDescriptor+0x38>)
 800c04e:	4620      	mov	r0, r4
 800c050:	f7ff ffb8 	bl	800bfc4 <IntToUnicode>
}
 800c054:	4804      	ldr	r0, [pc, #16]	; (800c068 <USBD_MSC_SerialStrDescriptor+0x3c>)
 800c056:	bd10      	pop	{r4, pc}
 800c058:	1fff7a10 	.word	0x1fff7a10
 800c05c:	1fff7a14 	.word	0x1fff7a14
 800c060:	20000146 	.word	0x20000146
 800c064:	20000156 	.word	0x20000156
 800c068:	20000144 	.word	0x20000144

0800c06c <USBD_VCP_ProductStrDescriptor>:
{
 800c06c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING_VCP, USBD_StrDesc, length);
 800c06e:	4c04      	ldr	r4, [pc, #16]	; (800c080 <USBD_VCP_ProductStrDescriptor+0x14>)
 800c070:	4804      	ldr	r0, [pc, #16]	; (800c084 <USBD_VCP_ProductStrDescriptor+0x18>)
 800c072:	460a      	mov	r2, r1
 800c074:	4621      	mov	r1, r4
 800c076:	f7f6 fee5 	bl	8002e44 <USBD_GetString>
}
 800c07a:	4620      	mov	r0, r4
 800c07c:	bd10      	pop	{r4, pc}
 800c07e:	bf00      	nop
 800c080:	2000baf8 	.word	0x2000baf8
 800c084:	0800ebc5 	.word	0x0800ebc5

0800c088 <USBD_MSC_ProductStrDescriptor>:
{
 800c088:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800c08a:	4c04      	ldr	r4, [pc, #16]	; (800c09c <USBD_MSC_ProductStrDescriptor+0x14>)
 800c08c:	4804      	ldr	r0, [pc, #16]	; (800c0a0 <USBD_MSC_ProductStrDescriptor+0x18>)
 800c08e:	460a      	mov	r2, r1
 800c090:	4621      	mov	r1, r4
 800c092:	f7f6 fed7 	bl	8002e44 <USBD_GetString>
}
 800c096:	4620      	mov	r0, r4
 800c098:	bd10      	pop	{r4, pc}
 800c09a:	bf00      	nop
 800c09c:	2000baf8 	.word	0x2000baf8
 800c0a0:	0800eb94 	.word	0x0800eb94

0800c0a4 <USBD_MSC_ManufacturerStrDescriptor>:
{
 800c0a4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c0a6:	4c04      	ldr	r4, [pc, #16]	; (800c0b8 <USBD_MSC_ManufacturerStrDescriptor+0x14>)
 800c0a8:	4804      	ldr	r0, [pc, #16]	; (800c0bc <USBD_MSC_ManufacturerStrDescriptor+0x18>)
 800c0aa:	460a      	mov	r2, r1
 800c0ac:	4621      	mov	r1, r4
 800c0ae:	f7f6 fec9 	bl	8002e44 <USBD_GetString>
}
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	bd10      	pop	{r4, pc}
 800c0b6:	bf00      	nop
 800c0b8:	2000baf8 	.word	0x2000baf8
 800c0bc:	0800eb81 	.word	0x0800eb81

0800c0c0 <USBD_VCP_ConfigStrDescriptor>:
{
 800c0c0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING_VCP, USBD_StrDesc, length);
 800c0c2:	4c04      	ldr	r4, [pc, #16]	; (800c0d4 <USBD_VCP_ConfigStrDescriptor+0x14>)
 800c0c4:	4804      	ldr	r0, [pc, #16]	; (800c0d8 <USBD_VCP_ConfigStrDescriptor+0x18>)
 800c0c6:	460a      	mov	r2, r1
 800c0c8:	4621      	mov	r1, r4
 800c0ca:	f7f6 febb 	bl	8002e44 <USBD_GetString>
}
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	bd10      	pop	{r4, pc}
 800c0d2:	bf00      	nop
 800c0d4:	2000baf8 	.word	0x2000baf8
 800c0d8:	0800ebac 	.word	0x0800ebac

0800c0dc <USBD_MSC_ConfigStrDescriptor>:
{
 800c0dc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800c0de:	4c04      	ldr	r4, [pc, #16]	; (800c0f0 <USBD_MSC_ConfigStrDescriptor+0x14>)
 800c0e0:	4804      	ldr	r0, [pc, #16]	; (800c0f4 <USBD_MSC_ConfigStrDescriptor+0x18>)
 800c0e2:	460a      	mov	r2, r1
 800c0e4:	4621      	mov	r1, r4
 800c0e6:	f7f6 fead 	bl	8002e44 <USBD_GetString>
}
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	bd10      	pop	{r4, pc}
 800c0ee:	bf00      	nop
 800c0f0:	2000baf8 	.word	0x2000baf8
 800c0f4:	0800eb68 	.word	0x0800eb68

0800c0f8 <USBD_VCP_InterfaceStrDescriptor>:
{
 800c0f8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING_VCP, USBD_StrDesc, length);
 800c0fa:	4c04      	ldr	r4, [pc, #16]	; (800c10c <USBD_VCP_InterfaceStrDescriptor+0x14>)
 800c0fc:	4804      	ldr	r0, [pc, #16]	; (800c110 <USBD_VCP_InterfaceStrDescriptor+0x18>)
 800c0fe:	460a      	mov	r2, r1
 800c100:	4621      	mov	r1, r4
 800c102:	f7f6 fe9f 	bl	8002e44 <USBD_GetString>
}
 800c106:	4620      	mov	r0, r4
 800c108:	bd10      	pop	{r4, pc}
 800c10a:	bf00      	nop
 800c10c:	2000baf8 	.word	0x2000baf8
 800c110:	0800ebb7 	.word	0x0800ebb7

0800c114 <USBD_MSC_InterfaceStrDescriptor>:
{
 800c114:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800c116:	4c04      	ldr	r4, [pc, #16]	; (800c128 <USBD_MSC_InterfaceStrDescriptor+0x14>)
 800c118:	4804      	ldr	r0, [pc, #16]	; (800c12c <USBD_MSC_InterfaceStrDescriptor+0x18>)
 800c11a:	460a      	mov	r2, r1
 800c11c:	4621      	mov	r1, r4
 800c11e:	f7f6 fe91 	bl	8002e44 <USBD_GetString>
}
 800c122:	4620      	mov	r0, r4
 800c124:	bd10      	pop	{r4, pc}
 800c126:	bf00      	nop
 800c128:	2000baf8 	.word	0x2000baf8
 800c12c:	0800eb73 	.word	0x0800eb73

0800c130 <USBD_VCP_LangIDStrDescriptor>:
 800c130:	2304      	movs	r3, #4
 800c132:	800b      	strh	r3, [r1, #0]
 800c134:	4800      	ldr	r0, [pc, #0]	; (800c138 <USBD_VCP_LangIDStrDescriptor+0x8>)
 800c136:	4770      	bx	lr
 800c138:	20000140 	.word	0x20000140

0800c13c <USBD_VCP_ManufacturerStrDescriptor>:
 800c13c:	b510      	push	{r4, lr}
 800c13e:	4c04      	ldr	r4, [pc, #16]	; (800c150 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 800c140:	4804      	ldr	r0, [pc, #16]	; (800c154 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
 800c142:	460a      	mov	r2, r1
 800c144:	4621      	mov	r1, r4
 800c146:	f7f6 fe7d 	bl	8002e44 <USBD_GetString>
 800c14a:	4620      	mov	r0, r4
 800c14c:	bd10      	pop	{r4, pc}
 800c14e:	bf00      	nop
 800c150:	2000baf8 	.word	0x2000baf8
 800c154:	0800eb81 	.word	0x0800eb81

0800c158 <STORAGE_IsWriteProtected>:
  * @retval Status (0: write enabled / -1: otherwise)
  */
int8_t STORAGE_IsWriteProtected(uint8_t lun)
{
  return 0;
}
 800c158:	2000      	movs	r0, #0
 800c15a:	4770      	bx	lr

0800c15c <STORAGE_GetMaxLun>:
  * @retval Lun(s) number
  */
int8_t STORAGE_GetMaxLun(void)
{
  return(STORAGE_LUN_NBR - 1);
}
 800c15c:	2000      	movs	r0, #0
 800c15e:	4770      	bx	lr

0800c160 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c160:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

  if(pdev->pClassData != NULL)
 800c164:	b11b      	cbz	r3, 800c16e <USBD_CDC_DataIn+0xe>
  {

    hcdc->TxState = 0;
 800c166:	2000      	movs	r0, #0
 800c168:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 800c16c:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 800c16e:	2002      	movs	r0, #2
  }
}
 800c170:	4770      	bx	lr

0800c172 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800c172:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{
 800c176:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c178:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800c17c:	b15b      	cbz	r3, 800c196 <USBD_CDC_EP0_RxReady+0x24>
 800c17e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800c182:	28ff      	cmp	r0, #255	; 0xff
 800c184:	d007      	beq.n	800c196 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800c18c:	4621      	mov	r1, r4
 800c18e:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF;
 800c190:	23ff      	movs	r3, #255	; 0xff
 800c192:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800c196:	2000      	movs	r0, #0
 800c198:	bd10      	pop	{r4, pc}
	...

0800c19c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800c19c:	2343      	movs	r3, #67	; 0x43
 800c19e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800c1a0:	4800      	ldr	r0, [pc, #0]	; (800c1a4 <USBD_CDC_GetFSCfgDesc+0x8>)
 800c1a2:	4770      	bx	lr
 800c1a4:	200001e0 	.word	0x200001e0

0800c1a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800c1a8:	2343      	movs	r3, #67	; 0x43
 800c1aa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800c1ac:	4800      	ldr	r0, [pc, #0]	; (800c1b0 <USBD_CDC_GetHSCfgDesc+0x8>)
 800c1ae:	4770      	bx	lr
 800c1b0:	20000224 	.word	0x20000224

0800c1b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800c1b4:	2343      	movs	r3, #67	; 0x43
 800c1b6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800c1b8:	4800      	ldr	r0, [pc, #0]	; (800c1bc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800c1ba:	4770      	bx	lr
 800c1bc:	20000274 	.word	0x20000274

0800c1c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800c1c0:	230a      	movs	r3, #10
 800c1c2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800c1c4:	4800      	ldr	r0, [pc, #0]	; (800c1c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800c1c6:	4770      	bx	lr
 800c1c8:	20000268 	.word	0x20000268

0800c1cc <STORAGE_Init>:
{
 800c1cc:	b508      	push	{r3, lr}
  BSP_SD_Init();
 800c1ce:	f7fb f921 	bl	8007414 <BSP_SD_Init>
}
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	bd08      	pop	{r3, pc}

0800c1d6 <STORAGE_GetCapacity>:
{
 800c1d6:	b530      	push	{r4, r5, lr}
 800c1d8:	b097      	sub	sp, #92	; 0x5c
 800c1da:	460d      	mov	r5, r1
 800c1dc:	4614      	mov	r4, r2
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800c1de:	f7fb f869 	bl	80072b4 <BSP_SD_IsDetected>
 800c1e2:	b178      	cbz	r0, 800c204 <STORAGE_GetCapacity+0x2e>
    BSP_SD_GetCardInfo(&info);
 800c1e4:	4668      	mov	r0, sp
 800c1e6:	f7fb f885 	bl	80072f4 <BSP_SD_GetCardInfo>
    *block_num = (info.CardCapacity)/STORAGE_BLK_SIZ  - 1;
 800c1ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c1ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c1ee:	0a5b      	lsrs	r3, r3, #9
 800c1f0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c1f4:	3b01      	subs	r3, #1
 800c1f6:	602b      	str	r3, [r5, #0]
    *block_size = STORAGE_BLK_SIZ;
 800c1f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1fc:	8023      	strh	r3, [r4, #0]
    ret = 0;
 800c1fe:	2000      	movs	r0, #0
}
 800c200:	b017      	add	sp, #92	; 0x5c
 800c202:	bd30      	pop	{r4, r5, pc}
  int8_t ret = -1;  
 800c204:	f04f 30ff 	mov.w	r0, #4294967295
 800c208:	e7fa      	b.n	800c200 <STORAGE_GetCapacity+0x2a>

0800c20a <STORAGE_Read>:
{
 800c20a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c20c:	460c      	mov	r4, r1
 800c20e:	4615      	mov	r5, r2
 800c210:	461e      	mov	r6, r3
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800c212:	f7fb f84f 	bl	80072b4 <BSP_SD_IsDetected>
 800c216:	b158      	cbz	r0, 800c230 <STORAGE_Read+0x26>
    BSP_SD_ReadBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 800c218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c21c:	9300      	str	r3, [sp, #0]
 800c21e:	9601      	str	r6, [sp, #4]
 800c220:	026a      	lsls	r2, r5, #9
 800c222:	2300      	movs	r3, #0
 800c224:	4620      	mov	r0, r4
 800c226:	f7fb f89d 	bl	8007364 <BSP_SD_ReadBlocks_DMA>
    ret = 0;
 800c22a:	2000      	movs	r0, #0
}
 800c22c:	b002      	add	sp, #8
 800c22e:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;  
 800c230:	f04f 30ff 	mov.w	r0, #4294967295
 800c234:	e7fa      	b.n	800c22c <STORAGE_Read+0x22>

0800c236 <STORAGE_Write>:
{
 800c236:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c238:	460c      	mov	r4, r1
 800c23a:	4615      	mov	r5, r2
 800c23c:	461e      	mov	r6, r3
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800c23e:	f7fb f839 	bl	80072b4 <BSP_SD_IsDetected>
 800c242:	b158      	cbz	r0, 800c25c <STORAGE_Write+0x26>
    BSP_SD_WriteBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 800c244:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c248:	9300      	str	r3, [sp, #0]
 800c24a:	9601      	str	r6, [sp, #4]
 800c24c:	026a      	lsls	r2, r5, #9
 800c24e:	2300      	movs	r3, #0
 800c250:	4620      	mov	r0, r4
 800c252:	f7fb f961 	bl	8007518 <BSP_SD_WriteBlocks_DMA>
    ret = 0;
 800c256:	2000      	movs	r0, #0
}
 800c258:	b002      	add	sp, #8
 800c25a:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;  
 800c25c:	f04f 30ff 	mov.w	r0, #4294967295
 800c260:	e7fa      	b.n	800c258 <STORAGE_Write+0x22>

0800c262 <USBD_CDC_DataOut>:
{
 800c262:	b538      	push	{r3, r4, r5, lr}
 800c264:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c266:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800c26a:	f7ff fe92 	bl	800bf92 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800c26e:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800c272:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800c276:	b14b      	cbz	r3, 800c28c <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c278:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800c27c:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800c280:	68db      	ldr	r3, [r3, #12]
 800c282:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800c286:	4798      	blx	r3
    return USBD_OK;
 800c288:	2000      	movs	r0, #0
 800c28a:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800c28c:	2002      	movs	r0, #2
}
 800c28e:	bd38      	pop	{r3, r4, r5, pc}

0800c290 <USBD_CDC_Setup>:
{
 800c290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c292:	780f      	ldrb	r7, [r1, #0]
 800c294:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 800c298:	4606      	mov	r6, r0
 800c29a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c29c:	d023      	beq.n	800c2e6 <USBD_CDC_Setup+0x56>
 800c29e:	2b20      	cmp	r3, #32
 800c2a0:	d119      	bne.n	800c2d6 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 800c2a2:	88ca      	ldrh	r2, [r1, #6]
 800c2a4:	784b      	ldrb	r3, [r1, #1]
 800c2a6:	b1c2      	cbz	r2, 800c2da <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 800c2a8:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c2aa:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 800c2ae:	d50b      	bpl.n	800c2c8 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c2b0:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	688f      	ldr	r7, [r1, #8]
 800c2b8:	4629      	mov	r1, r5
 800c2ba:	47b8      	blx	r7
          USBD_CtlSendData (pdev,
 800c2bc:	88e2      	ldrh	r2, [r4, #6]
 800c2be:	4629      	mov	r1, r5
 800c2c0:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 800c2c2:	f7f6 fddb 	bl	8002e7c <USBD_CtlSendData>
      break;
 800c2c6:	e006      	b.n	800c2d6 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 800c2c8:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800c2cc:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev,
 800c2d0:	4629      	mov	r1, r5
 800c2d2:	f7f6 fde8 	bl	8002ea6 <USBD_CtlPrepareRx>
}
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c2da:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 800c2de:	6884      	ldr	r4, [r0, #8]
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	47a0      	blx	r4
 800c2e4:	e7f7      	b.n	800c2d6 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 800c2e6:	784b      	ldrb	r3, [r1, #1]
 800c2e8:	2b0a      	cmp	r3, #10
 800c2ea:	d1f4      	bne.n	800c2d6 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	4901      	ldr	r1, [pc, #4]	; (800c2f4 <USBD_CDC_Setup+0x64>)
 800c2f0:	e7e7      	b.n	800c2c2 <USBD_CDC_Setup+0x32>
 800c2f2:	bf00      	nop
 800c2f4:	20000948 	.word	0x20000948

0800c2f8 <USBD_CDC_DeInit>:
{
 800c2f8:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 800c2fa:	2183      	movs	r1, #131	; 0x83
{
 800c2fc:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 800c2fe:	f7ff fe04 	bl	800bf0a <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800c302:	2103      	movs	r1, #3
 800c304:	4620      	mov	r0, r4
 800c306:	f7ff fe00 	bl	800bf0a <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800c30a:	2182      	movs	r1, #130	; 0x82
 800c30c:	4620      	mov	r0, r4
 800c30e:	f7ff fdfc 	bl	800bf0a <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800c312:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800c316:	b153      	cbz	r3, 800c32e <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c318:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c320:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800c324:	f000 fc28 	bl	800cb78 <free>
    pdev->pClassData = NULL;
 800c328:	2300      	movs	r3, #0
 800c32a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800c32e:	2000      	movs	r0, #0
 800c330:	bd10      	pop	{r4, pc}

0800c332 <USBD_CDC_Init>:
{
 800c332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c334:	7c03      	ldrb	r3, [r0, #16]
{
 800c336:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c338:	bb7b      	cbnz	r3, 800c39a <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 800c33a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c33e:	2202      	movs	r2, #2
 800c340:	2183      	movs	r1, #131	; 0x83
 800c342:	f7ff fdd8 	bl	800bef6 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800c346:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 800c34a:	2202      	movs	r2, #2
 800c34c:	2103      	movs	r1, #3
 800c34e:	4620      	mov	r0, r4
 800c350:	f7ff fdd1 	bl	800bef6 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800c354:	2308      	movs	r3, #8
 800c356:	2203      	movs	r2, #3
 800c358:	2182      	movs	r1, #130	; 0x82
 800c35a:	4620      	mov	r0, r4
 800c35c:	f7ff fdcb 	bl	800bef6 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800c360:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c364:	f000 fc00 	bl	800cb68 <malloc>
 800c368:	4606      	mov	r6, r0
 800c36a:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800c36e:	b320      	cbz	r0, 800c3ba <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c370:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c378:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 800c37a:	2500      	movs	r5, #0
 800c37c:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 800c380:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c384:	b987      	cbnz	r7, 800c3a8 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 800c386:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c38a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800c38e:	2103      	movs	r1, #3
 800c390:	4620      	mov	r0, r4
 800c392:	f7ff fdf7 	bl	800bf84 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800c396:	4638      	mov	r0, r7
 800c398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 800c39a:	2340      	movs	r3, #64	; 0x40
 800c39c:	2202      	movs	r2, #2
 800c39e:	2183      	movs	r1, #131	; 0x83
 800c3a0:	f7ff fda9 	bl	800bef6 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800c3a4:	2340      	movs	r3, #64	; 0x40
 800c3a6:	e7d0      	b.n	800c34a <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 800c3a8:	2340      	movs	r3, #64	; 0x40
 800c3aa:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800c3ae:	2103      	movs	r1, #3
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	f7ff fde7 	bl	800bf84 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1;
 800c3ba:	2001      	movs	r0, #1
}
 800c3bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c3c0 <CDC_Itf_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
 800c3c0:	b508      	push	{r3, lr}
  /* DeInitialize the UART peripheral */
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 800c3c2:	4802      	ldr	r0, [pc, #8]	; (800c3cc <CDC_Itf_DeInit+0xc>)
 800c3c4:	f7f9 fcc6 	bl	8005d54 <HAL_UART_DeInit>
  {
    /* Initialization Error */
 //   Error_Handler();
 }
  return (USBD_OK);
}
 800c3c8:	2000      	movs	r0, #0
 800c3ca:	bd08      	pop	{r3, pc}
 800c3cc:	2000bc08 	.word	0x2000bc08

0800c3d0 <CDC_Itf_Init>:
{
 800c3d0:	b570      	push	{r4, r5, r6, lr}
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 800c3d2:	4a18      	ldr	r2, [pc, #96]	; (800c434 <CDC_Itf_Init+0x64>)
  UartHandle.Instance          = USARTx;
 800c3d4:	4c18      	ldr	r4, [pc, #96]	; (800c438 <CDC_Itf_Init+0x68>)
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 800c3d6:	4e19      	ldr	r6, [pc, #100]	; (800c43c <CDC_Itf_Init+0x6c>)
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 800c3d8:	2500      	movs	r5, #0
 800c3da:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800c3de:	e884 002c 	stmia.w	r4, {r2, r3, r5}
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 800c3e2:	4620      	mov	r0, r4
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 800c3e4:	230c      	movs	r3, #12
 800c3e6:	6163      	str	r3, [r4, #20]
  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 800c3e8:	60e5      	str	r5, [r4, #12]
  UartHandle.Init.Parity       = UART_PARITY_NONE;
 800c3ea:	6125      	str	r5, [r4, #16]
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 800c3ec:	61a5      	str	r5, [r4, #24]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 800c3ee:	f7f9 ff5f 	bl	80062b0 <HAL_UART_Init>
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	4631      	mov	r1, r6
 800c3f6:	4620      	mov	r0, r4


static void TIM_Config(void)
{
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 800c3f8:	4c11      	ldr	r4, [pc, #68]	; (800c440 <CDC_Itf_Init+0x70>)
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 800c3fa:	f7f9 fcc5 	bl	8005d88 <HAL_UART_Receive_IT>
  TimHandle.Instance = TIMx;
 800c3fe:	4b11      	ldr	r3, [pc, #68]	; (800c444 <CDC_Itf_Init+0x74>)
 800c400:	6023      	str	r3, [r4, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 800c402:	f241 3387 	movw	r3, #4999	; 0x1387
 800c406:	60e3      	str	r3, [r4, #12]
  TimHandle.Init.Prescaler = 84-1;
  TimHandle.Init.ClockDivision = 0;
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 800c408:	4620      	mov	r0, r4
  TimHandle.Init.Prescaler = 84-1;
 800c40a:	2353      	movs	r3, #83	; 0x53
 800c40c:	6063      	str	r3, [r4, #4]
  TimHandle.Init.ClockDivision = 0;
 800c40e:	6125      	str	r5, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c410:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 800c412:	f7f9 fc83 	bl	8005d1c <HAL_TIM_Base_Init>
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 800c416:	4620      	mov	r0, r4
 800c418:	f7f9 fc12 	bl	8005c40 <HAL_TIM_Base_Start_IT>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c41c:	4b0a      	ldr	r3, [pc, #40]	; (800c448 <CDC_Itf_Init+0x78>)
  hcdc->RxBuffer = pbuff;
 800c41e:	4a0b      	ldr	r2, [pc, #44]	; (800c44c <CDC_Itf_Init+0x7c>)
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c420:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
}
 800c424:	4628      	mov	r0, r5
  hcdc->TxBuffer = pbuff;
 800c426:	f8c3 6208 	str.w	r6, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c42a:	f8c3 5210 	str.w	r5, [r3, #528]	; 0x210
  hcdc->RxBuffer = pbuff;
 800c42e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 800c432:	bd70      	pop	{r4, r5, r6, pc}
 800c434:	40013800 	.word	0x40013800
 800c438:	2000bc08 	.word	0x2000bc08
 800c43c:	2000bce1 	.word	0x2000bce1
 800c440:	2000d0e0 	.word	0x2000d0e0
 800c444:	40000400 	.word	0x40000400
 800c448:	20008a54 	.word	0x20008a54
 800c44c:	2000c8d4 	.word	0x2000c8d4

0800c450 <STORAGE_IsReady>:
{
 800c450:	b510      	push	{r4, lr}
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800c452:	f7fa ff2f 	bl	80072b4 <BSP_SD_IsDetected>
 800c456:	4c0b      	ldr	r4, [pc, #44]	; (800c484 <STORAGE_IsReady+0x34>)
    if(prev_status < 0)
 800c458:	f994 3000 	ldrsb.w	r3, [r4]
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800c45c:	b160      	cbz	r0, 800c478 <STORAGE_IsReady+0x28>
    if(prev_status < 0)
 800c45e:	2b00      	cmp	r3, #0
 800c460:	da03      	bge.n	800c46a <STORAGE_IsReady+0x1a>
      BSP_SD_Init();
 800c462:	f7fa ffd7 	bl	8007414 <BSP_SD_Init>
      prev_status = 0;
 800c466:	2300      	movs	r3, #0
 800c468:	7023      	strb	r3, [r4, #0]
    if(BSP_SD_GetStatus() == SD_TRANSFER_OK)
 800c46a:	f7fa ff3d 	bl	80072e8 <BSP_SD_GetStatus>
 800c46e:	3000      	adds	r0, #0
 800c470:	bf18      	it	ne
 800c472:	2001      	movne	r0, #1
 800c474:	4240      	negs	r0, r0
 800c476:	bd10      	pop	{r4, pc}
  else if(prev_status == 0)
 800c478:	b90b      	cbnz	r3, 800c47e <STORAGE_IsReady+0x2e>
    prev_status = -1;
 800c47a:	23ff      	movs	r3, #255	; 0xff
 800c47c:	7023      	strb	r3, [r4, #0]
  int8_t ret = -1;
 800c47e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c482:	bd10      	pop	{r4, pc}
 800c484:	20000949 	.word	0x20000949

0800c488 <CDC_Itf_Control>:
  switch (cmd)
 800c488:	2820      	cmp	r0, #32
{
 800c48a:	b538      	push	{r3, r4, r5, lr}
  switch (cmd)
 800c48c:	d003      	beq.n	800c496 <CDC_Itf_Control+0xe>
 800c48e:	2821      	cmp	r0, #33	; 0x21
 800c490:	d048      	beq.n	800c524 <CDC_Itf_Control+0x9c>
}
 800c492:	2000      	movs	r0, #0
 800c494:	bd38      	pop	{r3, r4, r5, pc}
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800c496:	4c2c      	ldr	r4, [pc, #176]	; (800c548 <CDC_Itf_Control+0xc0>)
 800c498:	680b      	ldr	r3, [r1, #0]
 800c49a:	6023      	str	r3, [r4, #0]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 800c49c:	4d2b      	ldr	r5, [pc, #172]	; (800c54c <CDC_Itf_Control+0xc4>)
    LineCoding.format     = pbuf[4];
 800c49e:	790b      	ldrb	r3, [r1, #4]
 800c4a0:	7123      	strb	r3, [r4, #4]
    LineCoding.paritytype = pbuf[5];
 800c4a2:	794b      	ldrb	r3, [r1, #5]
 800c4a4:	7163      	strb	r3, [r4, #5]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 800c4a6:	4628      	mov	r0, r5
    LineCoding.datatype   = pbuf[6];
 800c4a8:	798b      	ldrb	r3, [r1, #6]
 800c4aa:	71a3      	strb	r3, [r4, #6]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 800c4ac:	f7f9 fc52 	bl	8005d54 <HAL_UART_DeInit>
  switch (LineCoding.format)
 800c4b0:	7923      	ldrb	r3, [r4, #4]
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	b12b      	cbz	r3, 800c4c2 <CDC_Itf_Control+0x3a>
 800c4b6:	2b02      	cmp	r3, #2
 800c4b8:	d001      	beq.n	800c4be <CDC_Itf_Control+0x36>
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	e001      	b.n	800c4c2 <CDC_Itf_Control+0x3a>
    UartHandle.Init.StopBits = UART_STOPBITS_2;
 800c4be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  switch (LineCoding.paritytype)
 800c4c2:	7962      	ldrb	r2, [r4, #5]
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 800c4c4:	60c3      	str	r3, [r0, #12]
  switch (LineCoding.paritytype)
 800c4c6:	2a01      	cmp	r2, #1
 800c4c8:	d020      	beq.n	800c50c <CDC_Itf_Control+0x84>
 800c4ca:	f04f 0300 	mov.w	r3, #0
 800c4ce:	d301      	bcc.n	800c4d4 <CDC_Itf_Control+0x4c>
 800c4d0:	2a02      	cmp	r2, #2
 800c4d2:	d01e      	beq.n	800c512 <CDC_Itf_Control+0x8a>
  switch (LineCoding.datatype)
 800c4d4:	79a2      	ldrb	r2, [r4, #6]
    UartHandle.Init.Parity = UART_PARITY_NONE;
 800c4d6:	6103      	str	r3, [r0, #16]
  switch (LineCoding.datatype)
 800c4d8:	2a07      	cmp	r2, #7
 800c4da:	f04f 0300 	mov.w	r3, #0
 800c4de:	d001      	beq.n	800c4e4 <CDC_Itf_Control+0x5c>
 800c4e0:	2a08      	cmp	r2, #8
 800c4e2:	d019      	beq.n	800c518 <CDC_Itf_Control+0x90>
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800c4e4:	6083      	str	r3, [r0, #8]
  UartHandle.Init.BaudRate     = LineCoding.bitrate;
 800c4e6:	6823      	ldr	r3, [r4, #0]
 800c4e8:	6043      	str	r3, [r0, #4]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 800c4ea:	220c      	movs	r2, #12
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 800c4f0:	6142      	str	r2, [r0, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800c4f2:	61c3      	str	r3, [r0, #28]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 800c4f4:	4815      	ldr	r0, [pc, #84]	; (800c54c <CDC_Itf_Control+0xc4>)
 800c4f6:	f7f9 fedb 	bl	80062b0 <HAL_UART_Init>
 HAL_UART_Receive_IT(&UartHandle, (uint8_t *)(UserTxBuffer + UserTxBufPtrIn), 1);
 800c4fa:	4b15      	ldr	r3, [pc, #84]	; (800c550 <CDC_Itf_Control+0xc8>)
 800c4fc:	4915      	ldr	r1, [pc, #84]	; (800c554 <CDC_Itf_Control+0xcc>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4812      	ldr	r0, [pc, #72]	; (800c54c <CDC_Itf_Control+0xc4>)
 800c502:	2201      	movs	r2, #1
 800c504:	4419      	add	r1, r3
 800c506:	f7f9 fc3f 	bl	8005d88 <HAL_UART_Receive_IT>
 800c50a:	e7c2      	b.n	800c492 <CDC_Itf_Control+0xa>
    UartHandle.Init.Parity = UART_PARITY_ODD;
 800c50c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800c510:	e7e0      	b.n	800c4d4 <CDC_Itf_Control+0x4c>
    UartHandle.Init.Parity = UART_PARITY_EVEN;
 800c512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c516:	e7dd      	b.n	800c4d4 <CDC_Itf_Control+0x4c>
    if(UartHandle.Init.Parity == UART_PARITY_NONE)
 800c518:	6903      	ldr	r3, [r0, #16]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d0e2      	beq.n	800c4e4 <CDC_Itf_Control+0x5c>
      UartHandle.Init.WordLength = UART_WORDLENGTH_9B;
 800c51e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c522:	e7df      	b.n	800c4e4 <CDC_Itf_Control+0x5c>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800c524:	4b08      	ldr	r3, [pc, #32]	; (800c548 <CDC_Itf_Control+0xc0>)
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	0a12      	lsrs	r2, r2, #8
 800c52e:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800c530:	885a      	ldrh	r2, [r3, #2]
 800c532:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800c534:	78da      	ldrb	r2, [r3, #3]
 800c536:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 800c538:	791a      	ldrb	r2, [r3, #4]
 800c53a:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 800c53c:	795a      	ldrb	r2, [r3, #5]
 800c53e:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;
 800c540:	799b      	ldrb	r3, [r3, #6]
 800c542:	718b      	strb	r3, [r1, #6]
    break;
 800c544:	e7a5      	b.n	800c492 <CDC_Itf_Control+0xa>
 800c546:	bf00      	nop
 800c548:	2000017c 	.word	0x2000017c
 800c54c:	2000bc08 	.word	0x2000bc08
 800c550:	20000944 	.word	0x20000944
 800c554:	2000bce1 	.word	0x2000bce1

0800c558 <LL_RTC_DATE_GetDay.constprop.2>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 800c558:	4b0a      	ldr	r3, [pc, #40]	; (800c584 <LL_RTC_DATE_GetDay.constprop.2+0x2c>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c55a:	2030      	movs	r0, #48	; 0x30
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	fa90 f0a0 	rbit	r0, r0
 800c562:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 800c564:	fab0 f080 	clz	r0, r0
 800c568:	fa92 f2a2 	rbit	r2, r2
 800c56c:	f003 0130 	and.w	r1, r3, #48	; 0x30
 800c570:	fab2 f282 	clz	r2, r2
 800c574:	f003 030f 	and.w	r3, r3, #15
 800c578:	fa21 f000 	lsr.w	r0, r1, r0
 800c57c:	40d3      	lsrs	r3, r2
}
 800c57e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800c582:	4770      	bx	lr
 800c584:	40002800 	.word	0x40002800

0800c588 <LL_RTC_DATE_GetMonth.constprop.3>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 800c588:	4b0b      	ldr	r3, [pc, #44]	; (800c5b8 <LL_RTC_DATE_GetMonth.constprop.3+0x30>)
 800c58a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	fa90 f0a0 	rbit	r0, r0
 800c594:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 800c598:	fab0 f080 	clz	r0, r0
 800c59c:	fa92 f2a2 	rbit	r2, r2
 800c5a0:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 800c5a4:	fab2 f282 	clz	r2, r2
 800c5a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c5ac:	fa21 f000 	lsr.w	r0, r1, r0
 800c5b0:	40d3      	lsrs	r3, r2
}
 800c5b2:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800c5b6:	4770      	bx	lr
 800c5b8:	40002800 	.word	0x40002800

0800c5bc <LL_RTC_DATE_GetYear.constprop.4>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 800c5bc:	4b0b      	ldr	r3, [pc, #44]	; (800c5ec <LL_RTC_DATE_GetYear.constprop.4+0x30>)
 800c5be:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	fa90 f0a0 	rbit	r0, r0
 800c5c8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 800c5cc:	fab0 f080 	clz	r0, r0
 800c5d0:	fa92 f2a2 	rbit	r2, r2
 800c5d4:	f403 0170 	and.w	r1, r3, #15728640	; 0xf00000
 800c5d8:	fab2 f282 	clz	r2, r2
 800c5dc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800c5e0:	fa21 f000 	lsr.w	r0, r1, r0
 800c5e4:	40d3      	lsrs	r3, r2
}
 800c5e6:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800c5ea:	4770      	bx	lr
 800c5ec:	40002800 	.word	0x40002800

0800c5f0 <LL_RTC_TIME_GetSecond.constprop.5>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 800c5f0:	4b0a      	ldr	r3, [pc, #40]	; (800c61c <LL_RTC_TIME_GetSecond.constprop.5+0x2c>)
 800c5f2:	2070      	movs	r0, #112	; 0x70
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	fa90 f0a0 	rbit	r0, r0
 800c5fa:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 800c5fc:	fab0 f080 	clz	r0, r0
 800c600:	fa92 f2a2 	rbit	r2, r2
 800c604:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800c608:	fab2 f282 	clz	r2, r2
 800c60c:	f003 030f 	and.w	r3, r3, #15
 800c610:	fa21 f000 	lsr.w	r0, r1, r0
 800c614:	40d3      	lsrs	r3, r2
}
 800c616:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800c61a:	4770      	bx	lr
 800c61c:	40002800 	.word	0x40002800

0800c620 <LL_RTC_TIME_GetMinute.constprop.6>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 800c620:	4b0b      	ldr	r3, [pc, #44]	; (800c650 <LL_RTC_TIME_GetMinute.constprop.6+0x30>)
 800c622:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	fa90 f0a0 	rbit	r0, r0
 800c62c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 800c630:	fab0 f080 	clz	r0, r0
 800c634:	fa92 f2a2 	rbit	r2, r2
 800c638:	f403 41e0 	and.w	r1, r3, #28672	; 0x7000
 800c63c:	fab2 f282 	clz	r2, r2
 800c640:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c644:	fa21 f000 	lsr.w	r0, r1, r0
 800c648:	40d3      	lsrs	r3, r2
}
 800c64a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800c64e:	4770      	bx	lr
 800c650:	40002800 	.word	0x40002800

0800c654 <LL_RTC_TIME_GetHour.constprop.7>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 800c654:	4b0b      	ldr	r3, [pc, #44]	; (800c684 <LL_RTC_TIME_GetHour.constprop.7+0x30>)
 800c656:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	fa90 f0a0 	rbit	r0, r0
 800c660:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 800c664:	fab0 f080 	clz	r0, r0
 800c668:	fa92 f2a2 	rbit	r2, r2
 800c66c:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
 800c670:	fab2 f282 	clz	r2, r2
 800c674:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800c678:	fa21 f000 	lsr.w	r0, r1, r0
 800c67c:	40d3      	lsrs	r3, r2
}
 800c67e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800c682:	4770      	bx	lr
 800c684:	40002800 	.word	0x40002800

0800c688 <USBD_CDC_RegisterInterface>:
  if(fops != NULL)
 800c688:	b119      	cbz	r1, 800c692 <USBD_CDC_RegisterInterface+0xa>
    pdev->pUserData= fops;
 800c68a:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;
 800c68e:	2000      	movs	r0, #0
 800c690:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800c692:	2002      	movs	r0, #2
}
 800c694:	4770      	bx	lr

0800c696 <USBD_CDC_TransmitPacket>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c696:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 800c69a:	b510      	push	{r4, lr}
  if(pdev->pClassData != NULL)
 800c69c:	b172      	cbz	r2, 800c6bc <USBD_CDC_TransmitPacket+0x26>
    if(hcdc->TxState == 0)
 800c69e:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	b964      	cbnz	r4, 800c6c0 <USBD_CDC_TransmitPacket+0x2a>
      hcdc->TxState = 1;
 800c6a6:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      USBD_LL_Transmit(pdev,
 800c6aa:	2183      	movs	r1, #131	; 0x83
 800c6ac:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 800c6b0:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800c6b4:	f7ff fc5f 	bl	800bf76 <USBD_LL_Transmit>
      return USBD_OK;
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800c6bc:	2002      	movs	r0, #2
 800c6be:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 800c6c0:	4618      	mov	r0, r3
}
 800c6c2:	bd10      	pop	{r4, pc}

0800c6c4 <USBD_CDC_ReceivePacket>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c6c4:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 800c6c8:	b510      	push	{r4, lr}
  if(pdev->pClassData != NULL)
 800c6ca:	b162      	cbz	r2, 800c6e6 <USBD_CDC_ReceivePacket+0x22>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c6cc:	7c04      	ldrb	r4, [r0, #16]
 800c6ce:	b944      	cbnz	r4, 800c6e2 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 800c6d0:	f44f 7300 	mov.w	r3, #512	; 0x200
      USBD_LL_PrepareReceive(pdev,
 800c6d4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800c6d8:	2103      	movs	r1, #3
 800c6da:	f7ff fc53 	bl	800bf84 <USBD_LL_PrepareReceive>
    return USBD_OK;
 800c6de:	2000      	movs	r0, #0
 800c6e0:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800c6e2:	2340      	movs	r3, #64	; 0x40
 800c6e4:	e7f6      	b.n	800c6d4 <USBD_CDC_ReceivePacket+0x10>
    return USBD_FAIL;
 800c6e6:	2002      	movs	r0, #2
}
 800c6e8:	bd10      	pop	{r4, pc}
	...

0800c6ec <CDC_Itf_Receive>:
{
 800c6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
BuffLength=0;
 800c6f0:	4dc1      	ldr	r5, [pc, #772]	; (800c9f8 <CDC_Itf_Receive+0x30c>)
 800c6f2:	4cc2      	ldr	r4, [pc, #776]	; (800c9fc <CDC_Itf_Receive+0x310>)
 800c6f4:	2300      	movs	r3, #0
{
 800c6f6:	b087      	sub	sp, #28
BuffLength=0;
 800c6f8:	602b      	str	r3, [r5, #0]
for (i = 0; i < *Len; i++)
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	680e      	ldr	r6, [r1, #0]
 800c6fe:	1a13      	subs	r3, r2, r0
 800c700:	429e      	cmp	r6, r3
 800c702:	f200 8089 	bhi.w	800c818 <CDC_Itf_Receive+0x12c>
if (TempUserBuffer[0] == 'g')
 800c706:	7823      	ldrb	r3, [r4, #0]
 800c708:	2b67      	cmp	r3, #103	; 0x67
 800c70a:	f040 808c 	bne.w	800c826 <CDC_Itf_Receive+0x13a>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 800c70e:	f894 c002 	ldrb.w	ip, [r4, #2]
 800c712:	78e3      	ldrb	r3, [r4, #3]
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 800c714:	f894 e006 	ldrb.w	lr, [r4, #6]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 800c718:	7ae2      	ldrb	r2, [r4, #11]
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 800c71a:	7be1      	ldrb	r1, [r4, #15]
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 800c71c:	7ce0      	ldrb	r0, [r4, #19]
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 800c71e:	f894 a016 	ldrb.w	sl, [r4, #22]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 800c722:	f8df b324 	ldr.w	fp, [pc, #804]	; 800ca48 <CDC_Itf_Receive+0x35c>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 800c726:	4fb6      	ldr	r7, [pc, #728]	; (800ca00 <CDC_Itf_Receive+0x314>)
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 800c728:	4eb6      	ldr	r6, [pc, #728]	; (800ca04 <CDC_Itf_Receive+0x318>)
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 800c72a:	f8df 9320 	ldr.w	r9, [pc, #800]	; 800ca4c <CDC_Itf_Receive+0x360>
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 800c72e:	f8df 8320 	ldr.w	r8, [pc, #800]	; 800ca50 <CDC_Itf_Receive+0x364>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 800c732:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800c736:	3b30      	subs	r3, #48	; 0x30
 800c738:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800c73c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 800c740:	79e3      	ldrb	r3, [r4, #7]
 800c742:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c746:	3b30      	subs	r3, #48	; 0x30
 800c748:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 800c74c:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 800c750:	7aa3      	ldrb	r3, [r4, #10]
 800c752:	3b30      	subs	r3, #48	; 0x30
 800c754:	3a30      	subs	r2, #48	; 0x30
 800c756:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c75a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 800c75e:	7ba2      	ldrb	r2, [r4, #14]
 800c760:	3a30      	subs	r2, #48	; 0x30
 800c762:	3930      	subs	r1, #48	; 0x30
 800c764:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800c768:	eb01 0242 	add.w	r2, r1, r2, lsl #1
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 800c76c:	7ca1      	ldrb	r1, [r4, #18]
 800c76e:	3930      	subs	r1, #48	; 0x30
 800c770:	3830      	subs	r0, #48	; 0x30
 800c772:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c776:	eb00 0141 	add.w	r1, r0, r1, lsl #1
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 800c77a:	7de0      	ldrb	r0, [r4, #23]
 800c77c:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 800c780:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 800c784:	3830      	subs	r0, #48	; 0x30
 800c786:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 800c78a:	f8df a294 	ldr.w	sl, [pc, #660]	; 800ca20 <CDC_Itf_Receive+0x334>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 800c78e:	fa5f fc8c 	uxtb.w	ip, ip
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 800c792:	fa5f fe8e 	uxtb.w	lr, lr
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 800c796:	b2db      	uxtb	r3, r3
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 800c798:	b2d2      	uxtb	r2, r2
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 800c79a:	b2c9      	uxtb	r1, r1
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 800c79c:	b2c0      	uxtb	r0, r0
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 800c79e:	f887 c000 	strb.w	ip, [r7]
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 800c7a2:	f886 e000 	strb.w	lr, [r6]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 800c7a6:	f88b 3000 	strb.w	r3, [fp]
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 800c7aa:	f889 2000 	strb.w	r2, [r9]
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 800c7ae:	f888 1000 	strb.w	r1, [r8]
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 800c7b2:	f88a 0000 	strb.w	r0, [sl]
Set_RTC_Calendar(RTC_Y, RTC_Mo , RTC_D, RTC_H, RTC_Mi, RTC_S);  // Set Device RTC with received Values
 800c7b6:	f8cd c004 	str.w	ip, [sp, #4]
 800c7ba:	f8cd e000 	str.w	lr, [sp]
 800c7be:	f7fd fd73 	bl	800a2a8 <Set_RTC_Calendar>
UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Timestamp Received :%d:%d:%d_%d/%d/%d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);//
 800c7c2:	f89a 2000 	ldrb.w	r2, [sl]
 800c7c6:	f89b 3000 	ldrb.w	r3, [fp]
 800c7ca:	9204      	str	r2, [sp, #16]
 800c7cc:	f899 2000 	ldrb.w	r2, [r9]
 800c7d0:	9203      	str	r2, [sp, #12]
 800c7d2:	f898 2000 	ldrb.w	r2, [r8]
 800c7d6:	9202      	str	r2, [sp, #8]
 800c7d8:	783a      	ldrb	r2, [r7, #0]
 800c7da:	f8df b250 	ldr.w	fp, [pc, #592]	; 800ca2c <CDC_Itf_Receive+0x340>
 800c7de:	9201      	str	r2, [sp, #4]
 800c7e0:	7832      	ldrb	r2, [r6, #0]
 800c7e2:	9200      	str	r2, [sp, #0]
 800c7e4:	4988      	ldr	r1, [pc, #544]	; (800ca08 <CDC_Itf_Receive+0x31c>)
 800c7e6:	4a89      	ldr	r2, [pc, #548]	; (800ca0c <CDC_Itf_Receive+0x320>)
 800c7e8:	4658      	mov	r0, fp
 800c7ea:	f7ff faaa 	bl	800bd42 <siprintf>
 800c7ee:	4a88      	ldr	r2, [pc, #544]	; (800ca10 <CDC_Itf_Receive+0x324>)
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c7f4:	4887      	ldr	r0, [pc, #540]	; (800ca14 <CDC_Itf_Receive+0x328>)
 800c7f6:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 800c800:	f8c2 b208 	str.w	fp, [r2, #520]	; 0x208
USBD_CDC_TransmitPacket(&USBD_Device);//
 800c804:	f7ff ff47 	bl	800c696 <USBD_CDC_TransmitPacket>
TempUserBuffer[0] = 0;        // Clear 1st Character to avoid code conflict
 800c808:	2300      	movs	r3, #0
USB_Mode = 1;                 // USB VCP Mode in next USB connectivity
 800c80a:	4a83      	ldr	r2, [pc, #524]	; (800ca18 <CDC_Itf_Receive+0x32c>)
TempUserBuffer[0] = 0;        // Clear 1st Character to avoid code conflict
 800c80c:	7023      	strb	r3, [r4, #0]
USB_Mode = 1;                 // USB VCP Mode in next USB connectivity
 800c80e:	2301      	movs	r3, #1
 800c810:	7013      	strb	r3, [r2, #0]
Logstart_Create=1;
 800c812:	4a82      	ldr	r2, [pc, #520]	; (800ca1c <CDC_Itf_Receive+0x330>)
	*LP_Ram_Key_Address = 0;
 800c814:	6013      	str	r3, [r2, #0]
 800c816:	e011      	b.n	800c83c <CDC_Itf_Receive+0x150>
TempUserBuffer[BuffLength] = Buf[i];
 800c818:	682b      	ldr	r3, [r5, #0]
 800c81a:	f812 6b01 	ldrb.w	r6, [r2], #1
 800c81e:	54e6      	strb	r6, [r4, r3]
BuffLength++;
 800c820:	3301      	adds	r3, #1
 800c822:	602b      	str	r3, [r5, #0]
 800c824:	e76a      	b.n	800c6fc <CDC_Itf_Receive+0x10>
else if (TempUserBuffer[0] == 'o')   // Turn off All LED
 800c826:	2b6f      	cmp	r3, #111	; 0x6f
 800c828:	f04f 0600 	mov.w	r6, #0
 800c82c:	d114      	bne.n	800c858 <CDC_Itf_Receive+0x16c>
RED_LED_OFF();
 800c82e:	f7fb f841 	bl	80078b4 <RED_LED_OFF>
GREEN_LED_OFF();
 800c832:	f7fb f840 	bl	80078b6 <GREEN_LED_OFF>
BLUE_LED_OFF();
 800c836:	f7fb f819 	bl	800786c <BLUE_LED_OFF>
TempUserBuffer[0] = 0;         // Clear 1st Character to avoid code conflict
 800c83a:	7026      	strb	r6, [r4, #0]
for (i = 0; i < BuffLength; i++) // Buffer Empty
 800c83c:	2300      	movs	r3, #0
 800c83e:	682a      	ldr	r2, [r5, #0]
TempUserBuffer[i] = 0;//
 800c840:	496e      	ldr	r1, [pc, #440]	; (800c9fc <CDC_Itf_Receive+0x310>)
 800c842:	4618      	mov	r0, r3
for (i = 0; i < BuffLength; i++) // Buffer Empty
 800c844:	4293      	cmp	r3, r2
 800c846:	f040 8154 	bne.w	800caf2 <CDC_Itf_Receive+0x406>
USBD_CDC_ReceivePacket(&USBD_Device);   // Ready for Next packet receive
 800c84a:	4872      	ldr	r0, [pc, #456]	; (800ca14 <CDC_Itf_Receive+0x328>)
 800c84c:	f7ff ff3a 	bl	800c6c4 <USBD_CDC_ReceivePacket>
}
 800c850:	2000      	movs	r0, #0
 800c852:	b007      	add	sp, #28
 800c854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
else if (TempUserBuffer[0] == 'B')   // Turn on BLUE LED
 800c858:	2b42      	cmp	r3, #66	; 0x42
 800c85a:	d102      	bne.n	800c862 <CDC_Itf_Receive+0x176>
BLUE_LED_ONLY();
 800c85c:	f7fb f83a 	bl	80078d4 <BLUE_LED_ONLY>
 800c860:	e7eb      	b.n	800c83a <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'b')  // Turn off BLUE LED
 800c862:	2b62      	cmp	r3, #98	; 0x62
 800c864:	d104      	bne.n	800c870 <CDC_Itf_Receive+0x184>
ALL_LED_OFF();
 800c866:	f7fb f809 	bl	800787c <ALL_LED_OFF>
	TempUserBuffer[0] = 0;       // Clear 1st Character to avoid code conflict
 800c86a:	2300      	movs	r3, #0
 800c86c:	7023      	strb	r3, [r4, #0]
 800c86e:	e7e5      	b.n	800c83c <CDC_Itf_Receive+0x150>
else if (TempUserBuffer[0] == 'E')  // Turn on Green LED
 800c870:	2b45      	cmp	r3, #69	; 0x45
 800c872:	d102      	bne.n	800c87a <CDC_Itf_Receive+0x18e>
GREEN_LED_ONLY();
 800c874:	f7fb f810 	bl	8007898 <GREEN_LED_ONLY>
 800c878:	e7df      	b.n	800c83a <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'e')  // Turn off Green LED
 800c87a:	2b65      	cmp	r3, #101	; 0x65
 800c87c:	d0f3      	beq.n	800c866 <CDC_Itf_Receive+0x17a>
else if (TempUserBuffer[0] == 'F')  // Turn on RED LED
 800c87e:	2b46      	cmp	r3, #70	; 0x46
 800c880:	d102      	bne.n	800c888 <CDC_Itf_Receive+0x19c>
RED_LED_ONLY();
 800c882:	f7fb f819 	bl	80078b8 <RED_LED_ONLY>
 800c886:	e7d8      	b.n	800c83a <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'f')  // Turn off RED LED
 800c888:	2b66      	cmp	r3, #102	; 0x66
 800c88a:	d0ec      	beq.n	800c866 <CDC_Itf_Receive+0x17a>
else if (TempUserBuffer[0] == 'l')  // Turn on White LED
 800c88c:	2b6c      	cmp	r3, #108	; 0x6c
 800c88e:	d102      	bne.n	800c896 <CDC_Itf_Receive+0x1aa>
ALL_LED_ON();
 800c890:	f7fb f84a 	bl	8007928 <ALL_LED_ON>
 800c894:	e7e9      	b.n	800c86a <CDC_Itf_Receive+0x17e>
else if (TempUserBuffer[0] == 'r')   // Read Device RTC Timestamp
 800c896:	2b72      	cmp	r3, #114	; 0x72
 800c898:	f040 8086 	bne.w	800c9a8 <CDC_Itf_Receive+0x2bc>
	RTC_H = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 800c89c:	f7ff feda 	bl	800c654 <LL_RTC_TIME_GetHour.constprop.7>
 800c8a0:	4606      	mov	r6, r0
 800c8a2:	f7ff fed7 	bl	800c654 <LL_RTC_TIME_GetHour.constprop.7>
 800c8a6:	f3c6 1303 	ubfx	r3, r6, #4, #4
 800c8aa:	f8df a19c 	ldr.w	sl, [pc, #412]	; 800ca48 <CDC_Itf_Receive+0x35c>
	RTC_Mi = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 800c8ae:	4e55      	ldr	r6, [pc, #340]	; (800ca04 <CDC_Itf_Receive+0x318>)
	RTC_H = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 800c8b0:	f000 000f 	and.w	r0, r0, #15
 800c8b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c8b8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c8bc:	f88a 3000 	strb.w	r3, [sl]
	RTC_Mi = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 800c8c0:	f7ff feae 	bl	800c620 <LL_RTC_TIME_GetMinute.constprop.6>
 800c8c4:	4607      	mov	r7, r0
 800c8c6:	f7ff feab 	bl	800c620 <LL_RTC_TIME_GetMinute.constprop.6>
 800c8ca:	f3c7 1303 	ubfx	r3, r7, #4, #4
 800c8ce:	f000 000f 	and.w	r0, r0, #15
 800c8d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c8d6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c8da:	7033      	strb	r3, [r6, #0]
	RTC_S =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800c8dc:	f7ff fe88 	bl	800c5f0 <LL_RTC_TIME_GetSecond.constprop.5>
 800c8e0:	4680      	mov	r8, r0
 800c8e2:	f7ff fe85 	bl	800c5f0 <LL_RTC_TIME_GetSecond.constprop.5>
 800c8e6:	f3c8 1303 	ubfx	r3, r8, #4, #4
 800c8ea:	4f45      	ldr	r7, [pc, #276]	; (800ca00 <CDC_Itf_Receive+0x314>)
	RTC_Mo =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 800c8ec:	f8df 8160 	ldr.w	r8, [pc, #352]	; 800ca50 <CDC_Itf_Receive+0x364>
	RTC_S =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800c8f0:	f000 000f 	and.w	r0, r0, #15
 800c8f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c8f8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c8fc:	703b      	strb	r3, [r7, #0]
	RTC_Mo =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 800c8fe:	f7ff fe43 	bl	800c588 <LL_RTC_DATE_GetMonth.constprop.3>
 800c902:	4681      	mov	r9, r0
 800c904:	f7ff fe40 	bl	800c588 <LL_RTC_DATE_GetMonth.constprop.3>
 800c908:	f3c9 1303 	ubfx	r3, r9, #4, #4
 800c90c:	f000 000f 	and.w	r0, r0, #15
 800c910:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c914:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c918:	f888 3000 	strb.w	r3, [r8]
	RTC_D = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 800c91c:	f7ff fe1c 	bl	800c558 <LL_RTC_DATE_GetDay.constprop.2>
 800c920:	4683      	mov	fp, r0
 800c922:	f7ff fe19 	bl	800c558 <LL_RTC_DATE_GetDay.constprop.2>
 800c926:	f3cb 1303 	ubfx	r3, fp, #4, #4
 800c92a:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800ca4c <CDC_Itf_Receive+0x360>
 800c92e:	f000 000f 	and.w	r0, r0, #15
 800c932:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c936:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c93a:	f889 3000 	strb.w	r3, [r9]
	RTC_Y =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 800c93e:	f7ff fe3d 	bl	800c5bc <LL_RTC_DATE_GetYear.constprop.4>
 800c942:	4683      	mov	fp, r0
 800c944:	f7ff fe3a 	bl	800c5bc <LL_RTC_DATE_GetYear.constprop.4>
 800c948:	f3cb 1303 	ubfx	r3, fp, #4, #4
 800c94c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c950:	f000 000f 	and.w	r0, r0, #15
 800c954:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800c958:	4b31      	ldr	r3, [pc, #196]	; (800ca20 <CDC_Itf_Receive+0x334>)
		UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\nCurrent Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);
 800c95a:	4932      	ldr	r1, [pc, #200]	; (800ca24 <CDC_Itf_Receive+0x338>)
	RTC_Y =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 800c95c:	b2c0      	uxtb	r0, r0
 800c95e:	7018      	strb	r0, [r3, #0]
	(void)RTC->DR;
 800c960:	4b31      	ldr	r3, [pc, #196]	; (800ca28 <CDC_Itf_Receive+0x33c>)
 800c962:	685a      	ldr	r2, [r3, #4]
	(void)RTC->TR;
 800c964:	681b      	ldr	r3, [r3, #0]
		UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\nCurrent Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);
 800c966:	f89a 3000 	ldrb.w	r3, [sl]
 800c96a:	9004      	str	r0, [sp, #16]
 800c96c:	f899 2000 	ldrb.w	r2, [r9]
 800c970:	9203      	str	r2, [sp, #12]
 800c972:	f898 2000 	ldrb.w	r2, [r8]
 800c976:	9202      	str	r2, [sp, #8]
 800c978:	783a      	ldrb	r2, [r7, #0]
 800c97a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 800ca2c <CDC_Itf_Receive+0x340>
 800c97e:	9201      	str	r2, [sp, #4]
 800c980:	7832      	ldrb	r2, [r6, #0]
 800c982:	9200      	str	r2, [sp, #0]
 800c984:	4650      	mov	r0, sl
 800c986:	4a21      	ldr	r2, [pc, #132]	; (800ca0c <CDC_Itf_Receive+0x320>)
 800c988:	f7ff f9db 	bl	800bd42 <siprintf>
 800c98c:	4a20      	ldr	r2, [pc, #128]	; (800ca10 <CDC_Itf_Receive+0x324>)
 800c98e:	4603      	mov	r3, r0
 800c990:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c992:	4820      	ldr	r0, [pc, #128]	; (800ca14 <CDC_Itf_Receive+0x328>)
 800c994:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800c998:	b2db      	uxtb	r3, r3
  hcdc->TxBuffer = pbuff;
 800c99a:	f8c2 a208 	str.w	sl, [r2, #520]	; 0x208
  hcdc->TxLength = length;
 800c99e:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
	USBD_CDC_TransmitPacket(&USBD_Device);//
 800c9a2:	f7ff fe78 	bl	800c696 <USBD_CDC_TransmitPacket>
 800c9a6:	e760      	b.n	800c86a <CDC_Itf_Receive+0x17e>
else if (TempUserBuffer[0] == 'U')    // USB MSC in next USB connectivity
 800c9a8:	2b55      	cmp	r3, #85	; 0x55
 800c9aa:	d153      	bne.n	800ca54 <CDC_Itf_Receive+0x368>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n Return to USB MSC Mode after USB reconnect..\r\n\r\n",software_vr);
 800c9ac:	4e1f      	ldr	r6, [pc, #124]	; (800ca2c <CDC_Itf_Receive+0x340>)
 800c9ae:	4920      	ldr	r1, [pc, #128]	; (800ca30 <CDC_Itf_Receive+0x344>)
 800c9b0:	4a16      	ldr	r2, [pc, #88]	; (800ca0c <CDC_Itf_Receive+0x320>)
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	f7ff f9c5 	bl	800bd42 <siprintf>
 800c9b8:	4a15      	ldr	r2, [pc, #84]	; (800ca10 <CDC_Itf_Receive+0x324>)
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c9be:	4815      	ldr	r0, [pc, #84]	; (800ca14 <CDC_Itf_Receive+0x328>)
 800c9c0:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 800c9ca:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);//
 800c9ce:	f7ff fe62 	bl	800c696 <USBD_CDC_TransmitPacket>
	USB_Mode = 1;                    // USB MSC Mode
 800c9d2:	4911      	ldr	r1, [pc, #68]	; (800ca18 <CDC_Itf_Receive+0x32c>)
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	700a      	strb	r2, [r1, #0]
	Logstart_Delete=1;
 800c9d8:	4916      	ldr	r1, [pc, #88]	; (800ca34 <CDC_Itf_Receive+0x348>)
 800c9da:	600a      	str	r2, [r1, #0]
	EnterReset_Create=0;
 800c9dc:	4916      	ldr	r1, [pc, #88]	; (800ca38 <CDC_Itf_Receive+0x34c>)
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 800c9de:	2300      	movs	r3, #0
	EnterReset_Create=0;
 800c9e0:	600b      	str	r3, [r1, #0]
	EnterDFU_Create=0;
 800c9e2:	4916      	ldr	r1, [pc, #88]	; (800ca3c <CDC_Itf_Receive+0x350>)
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 800c9e4:	7023      	strb	r3, [r4, #0]
	EnterDFU_Create=0;
 800c9e6:	600b      	str	r3, [r1, #0]
	Logstart_Create=1;
 800c9e8:	490c      	ldr	r1, [pc, #48]	; (800ca1c <CDC_Itf_Receive+0x330>)
 800c9ea:	600a      	str	r2, [r1, #0]
	 VCP_Bypass=1;
 800c9ec:	4914      	ldr	r1, [pc, #80]	; (800ca40 <CDC_Itf_Receive+0x354>)
 800c9ee:	700a      	strb	r2, [r1, #0]
	 Data_log_Start_Resume = 0;
 800c9f0:	4a14      	ldr	r2, [pc, #80]	; (800ca44 <CDC_Itf_Receive+0x358>)
 800c9f2:	7013      	strb	r3, [r2, #0]
 800c9f4:	e722      	b.n	800c83c <CDC_Itf_Receive+0x150>
 800c9f6:	bf00      	nop
 800c9f8:	2000bc04 	.word	0x2000bc04
 800c9fc:	2000d11c 	.word	0x2000d11c
 800ca00:	2000d0d4 	.word	0x2000d0d4
 800ca04:	2000d0d5 	.word	0x2000d0d5
 800ca08:	0800ebe6 	.word	0x0800ebe6
 800ca0c:	0002c314 	.word	0x0002c314
 800ca10:	2000d0d6 	.word	0x2000d0d6
 800ca14:	20008a54 	.word	0x20008a54
 800ca18:	2000b728 	.word	0x2000b728
 800ca1c:	2000bc78 	.word	0x2000bc78
 800ca20:	2000bce0 	.word	0x2000bce0
 800ca24:	0800ec22 	.word	0x0800ec22
 800ca28:	40002800 	.word	0x40002800
 800ca2c:	2000c4ec 	.word	0x2000c4ec
 800ca30:	0800ec67 	.word	0x0800ec67
 800ca34:	2000bbfc 	.word	0x2000bbfc
 800ca38:	2000c4e8 	.word	0x2000c4e8
 800ca3c:	2000d0d8 	.word	0x2000d0d8
 800ca40:	2000b205 	.word	0x2000b205
 800ca44:	20008a45 	.word	0x20008a45
 800ca48:	2000bc00 	.word	0x2000bc00
 800ca4c:	2000d0dc 	.word	0x2000d0dc
 800ca50:	2000bbf8 	.word	0x2000bbf8
else if (TempUserBuffer[0] == 'Z')    // Reset Device
 800ca54:	2b5a      	cmp	r3, #90	; 0x5a
 800ca56:	d118      	bne.n	800ca8a <CDC_Itf_Receive+0x39e>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to reset AIM device..\r\n",software_vr);
 800ca58:	4e27      	ldr	r6, [pc, #156]	; (800caf8 <CDC_Itf_Receive+0x40c>)
 800ca5a:	4a28      	ldr	r2, [pc, #160]	; (800cafc <CDC_Itf_Receive+0x410>)
 800ca5c:	4928      	ldr	r1, [pc, #160]	; (800cb00 <CDC_Itf_Receive+0x414>)
 800ca5e:	4630      	mov	r0, r6
 800ca60:	f7ff f96f 	bl	800bd42 <siprintf>
 800ca64:	4a27      	ldr	r2, [pc, #156]	; (800cb04 <CDC_Itf_Receive+0x418>)
 800ca66:	4603      	mov	r3, r0
 800ca68:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ca6a:	4827      	ldr	r0, [pc, #156]	; (800cb08 <CDC_Itf_Receive+0x41c>)
 800ca6c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 800ca76:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 800ca7a:	f7ff fe0c 	bl	800c696 <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 800ca7e:	2300      	movs	r3, #0
 800ca80:	7023      	strb	r3, [r4, #0]
	EnterReset_Create=1;
 800ca82:	4b22      	ldr	r3, [pc, #136]	; (800cb0c <CDC_Itf_Receive+0x420>)
 800ca84:	2201      	movs	r2, #1
	EnterDFU_Create=1;
 800ca86:	601a      	str	r2, [r3, #0]
 800ca88:	e6d8      	b.n	800c83c <CDC_Itf_Receive+0x150>
else if (TempUserBuffer[0] == 'X')     // Enter DFU mode for firmware Update
 800ca8a:	2b58      	cmp	r3, #88	; 0x58
 800ca8c:	d117      	bne.n	800cabe <CDC_Itf_Receive+0x3d2>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to enter Firmware update Mode..\r\n",software_vr);
 800ca8e:	4e1a      	ldr	r6, [pc, #104]	; (800caf8 <CDC_Itf_Receive+0x40c>)
 800ca90:	4a1a      	ldr	r2, [pc, #104]	; (800cafc <CDC_Itf_Receive+0x410>)
 800ca92:	491f      	ldr	r1, [pc, #124]	; (800cb10 <CDC_Itf_Receive+0x424>)
 800ca94:	4630      	mov	r0, r6
 800ca96:	f7ff f954 	bl	800bd42 <siprintf>
 800ca9a:	4a1a      	ldr	r2, [pc, #104]	; (800cb04 <CDC_Itf_Receive+0x418>)
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800caa0:	4819      	ldr	r0, [pc, #100]	; (800cb08 <CDC_Itf_Receive+0x41c>)
 800caa2:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 800caac:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 800cab0:	f7ff fdf1 	bl	800c696 <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 800cab4:	2300      	movs	r3, #0
 800cab6:	7023      	strb	r3, [r4, #0]
	EnterDFU_Create=1;
 800cab8:	2201      	movs	r2, #1
 800caba:	4b16      	ldr	r3, [pc, #88]	; (800cb14 <CDC_Itf_Receive+0x428>)
 800cabc:	e7e3      	b.n	800ca86 <CDC_Itf_Receive+0x39a>
else if (TempUserBuffer[0] == 'Y')     // Enter DFU mode for firmware Update
 800cabe:	2b59      	cmp	r3, #89	; 0x59
 800cac0:	f47f aebc 	bne.w	800c83c <CDC_Itf_Receive+0x150>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n LP_RAM reset..\r\n",software_vr);
 800cac4:	4e0c      	ldr	r6, [pc, #48]	; (800caf8 <CDC_Itf_Receive+0x40c>)
 800cac6:	4a0d      	ldr	r2, [pc, #52]	; (800cafc <CDC_Itf_Receive+0x410>)
 800cac8:	4913      	ldr	r1, [pc, #76]	; (800cb18 <CDC_Itf_Receive+0x42c>)
 800caca:	4630      	mov	r0, r6
 800cacc:	f7ff f939 	bl	800bd42 <siprintf>
 800cad0:	4a0c      	ldr	r2, [pc, #48]	; (800cb04 <CDC_Itf_Receive+0x418>)
 800cad2:	4603      	mov	r3, r0
 800cad4:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cad6:	480c      	ldr	r0, [pc, #48]	; (800cb08 <CDC_Itf_Receive+0x41c>)
 800cad8:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 800cae2:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 800cae6:	f7ff fdd6 	bl	800c696 <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 800caea:	2300      	movs	r3, #0
 800caec:	7023      	strb	r3, [r4, #0]
	*LP_Ram_Key_Address = 0;
 800caee:	4a0b      	ldr	r2, [pc, #44]	; (800cb1c <CDC_Itf_Receive+0x430>)
 800caf0:	e690      	b.n	800c814 <CDC_Itf_Receive+0x128>
TempUserBuffer[i] = 0;//
 800caf2:	5458      	strb	r0, [r3, r1]
for (i = 0; i < BuffLength; i++) // Buffer Empty
 800caf4:	3301      	adds	r3, #1
 800caf6:	e6a5      	b.n	800c844 <CDC_Itf_Receive+0x158>
 800caf8:	2000c4ec 	.word	0x2000c4ec
 800cafc:	0002c314 	.word	0x0002c314
 800cb00:	0800ecac 	.word	0x0800ecac
 800cb04:	2000d0d6 	.word	0x2000d0d6
 800cb08:	20008a54 	.word	0x20008a54
 800cb0c:	2000c4e8 	.word	0x2000c4e8
 800cb10:	0800ecea 	.word	0x0800ecea
 800cb14:	2000d0d8 	.word	0x2000d0d8
 800cb18:	0800ed32 	.word	0x0800ed32
 800cb1c:	20017cf0 	.word	0x20017cf0

0800cb20 <__libc_init_array>:
 800cb20:	b570      	push	{r4, r5, r6, lr}
 800cb22:	4e0d      	ldr	r6, [pc, #52]	; (800cb58 <__libc_init_array+0x38>)
 800cb24:	4c0d      	ldr	r4, [pc, #52]	; (800cb5c <__libc_init_array+0x3c>)
 800cb26:	1ba4      	subs	r4, r4, r6
 800cb28:	10a4      	asrs	r4, r4, #2
 800cb2a:	2500      	movs	r5, #0
 800cb2c:	42a5      	cmp	r5, r4
 800cb2e:	d109      	bne.n	800cb44 <__libc_init_array+0x24>
 800cb30:	4e0b      	ldr	r6, [pc, #44]	; (800cb60 <__libc_init_array+0x40>)
 800cb32:	4c0c      	ldr	r4, [pc, #48]	; (800cb64 <__libc_init_array+0x44>)
 800cb34:	f001 f90e 	bl	800dd54 <_init>
 800cb38:	1ba4      	subs	r4, r4, r6
 800cb3a:	10a4      	asrs	r4, r4, #2
 800cb3c:	2500      	movs	r5, #0
 800cb3e:	42a5      	cmp	r5, r4
 800cb40:	d105      	bne.n	800cb4e <__libc_init_array+0x2e>
 800cb42:	bd70      	pop	{r4, r5, r6, pc}
 800cb44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cb48:	4798      	blx	r3
 800cb4a:	3501      	adds	r5, #1
 800cb4c:	e7ee      	b.n	800cb2c <__libc_init_array+0xc>
 800cb4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cb52:	4798      	blx	r3
 800cb54:	3501      	adds	r5, #1
 800cb56:	e7f2      	b.n	800cb3e <__libc_init_array+0x1e>
 800cb58:	0800ef38 	.word	0x0800ef38
 800cb5c:	0800ef38 	.word	0x0800ef38
 800cb60:	0800ef38 	.word	0x0800ef38
 800cb64:	0800ef3c 	.word	0x0800ef3c

0800cb68 <malloc>:
 800cb68:	4b02      	ldr	r3, [pc, #8]	; (800cb74 <malloc+0xc>)
 800cb6a:	4601      	mov	r1, r0
 800cb6c:	6818      	ldr	r0, [r3, #0]
 800cb6e:	f000 b87b 	b.w	800cc68 <_malloc_r>
 800cb72:	bf00      	nop
 800cb74:	200002e8 	.word	0x200002e8

0800cb78 <free>:
 800cb78:	4b02      	ldr	r3, [pc, #8]	; (800cb84 <free+0xc>)
 800cb7a:	4601      	mov	r1, r0
 800cb7c:	6818      	ldr	r0, [r3, #0]
 800cb7e:	f000 b825 	b.w	800cbcc <_free_r>
 800cb82:	bf00      	nop
 800cb84:	200002e8 	.word	0x200002e8

0800cb88 <memcmp>:
 800cb88:	b510      	push	{r4, lr}
 800cb8a:	3901      	subs	r1, #1
 800cb8c:	4402      	add	r2, r0
 800cb8e:	4290      	cmp	r0, r2
 800cb90:	d101      	bne.n	800cb96 <memcmp+0xe>
 800cb92:	2000      	movs	r0, #0
 800cb94:	bd10      	pop	{r4, pc}
 800cb96:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cb9a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cb9e:	42a3      	cmp	r3, r4
 800cba0:	d0f5      	beq.n	800cb8e <memcmp+0x6>
 800cba2:	1b18      	subs	r0, r3, r4
 800cba4:	bd10      	pop	{r4, pc}

0800cba6 <memcpy>:
 800cba6:	b510      	push	{r4, lr}
 800cba8:	1e43      	subs	r3, r0, #1
 800cbaa:	440a      	add	r2, r1
 800cbac:	4291      	cmp	r1, r2
 800cbae:	d100      	bne.n	800cbb2 <memcpy+0xc>
 800cbb0:	bd10      	pop	{r4, pc}
 800cbb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbba:	e7f7      	b.n	800cbac <memcpy+0x6>

0800cbbc <memset>:
 800cbbc:	4402      	add	r2, r0
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d100      	bne.n	800cbc6 <memset+0xa>
 800cbc4:	4770      	bx	lr
 800cbc6:	f803 1b01 	strb.w	r1, [r3], #1
 800cbca:	e7f9      	b.n	800cbc0 <memset+0x4>

0800cbcc <_free_r>:
 800cbcc:	b538      	push	{r3, r4, r5, lr}
 800cbce:	4605      	mov	r5, r0
 800cbd0:	2900      	cmp	r1, #0
 800cbd2:	d045      	beq.n	800cc60 <_free_r+0x94>
 800cbd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbd8:	1f0c      	subs	r4, r1, #4
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	bfb8      	it	lt
 800cbde:	18e4      	addlt	r4, r4, r3
 800cbe0:	f000 f8ff 	bl	800cde2 <__malloc_lock>
 800cbe4:	4a1f      	ldr	r2, [pc, #124]	; (800cc64 <_free_r+0x98>)
 800cbe6:	6813      	ldr	r3, [r2, #0]
 800cbe8:	4610      	mov	r0, r2
 800cbea:	b933      	cbnz	r3, 800cbfa <_free_r+0x2e>
 800cbec:	6063      	str	r3, [r4, #4]
 800cbee:	6014      	str	r4, [r2, #0]
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbf6:	f000 b8f5 	b.w	800cde4 <__malloc_unlock>
 800cbfa:	42a3      	cmp	r3, r4
 800cbfc:	d90c      	bls.n	800cc18 <_free_r+0x4c>
 800cbfe:	6821      	ldr	r1, [r4, #0]
 800cc00:	1862      	adds	r2, r4, r1
 800cc02:	4293      	cmp	r3, r2
 800cc04:	bf04      	itt	eq
 800cc06:	681a      	ldreq	r2, [r3, #0]
 800cc08:	685b      	ldreq	r3, [r3, #4]
 800cc0a:	6063      	str	r3, [r4, #4]
 800cc0c:	bf04      	itt	eq
 800cc0e:	1852      	addeq	r2, r2, r1
 800cc10:	6022      	streq	r2, [r4, #0]
 800cc12:	6004      	str	r4, [r0, #0]
 800cc14:	e7ec      	b.n	800cbf0 <_free_r+0x24>
 800cc16:	4613      	mov	r3, r2
 800cc18:	685a      	ldr	r2, [r3, #4]
 800cc1a:	b10a      	cbz	r2, 800cc20 <_free_r+0x54>
 800cc1c:	42a2      	cmp	r2, r4
 800cc1e:	d9fa      	bls.n	800cc16 <_free_r+0x4a>
 800cc20:	6819      	ldr	r1, [r3, #0]
 800cc22:	1858      	adds	r0, r3, r1
 800cc24:	42a0      	cmp	r0, r4
 800cc26:	d10b      	bne.n	800cc40 <_free_r+0x74>
 800cc28:	6820      	ldr	r0, [r4, #0]
 800cc2a:	4401      	add	r1, r0
 800cc2c:	1858      	adds	r0, r3, r1
 800cc2e:	4282      	cmp	r2, r0
 800cc30:	6019      	str	r1, [r3, #0]
 800cc32:	d1dd      	bne.n	800cbf0 <_free_r+0x24>
 800cc34:	6810      	ldr	r0, [r2, #0]
 800cc36:	6852      	ldr	r2, [r2, #4]
 800cc38:	605a      	str	r2, [r3, #4]
 800cc3a:	4401      	add	r1, r0
 800cc3c:	6019      	str	r1, [r3, #0]
 800cc3e:	e7d7      	b.n	800cbf0 <_free_r+0x24>
 800cc40:	d902      	bls.n	800cc48 <_free_r+0x7c>
 800cc42:	230c      	movs	r3, #12
 800cc44:	602b      	str	r3, [r5, #0]
 800cc46:	e7d3      	b.n	800cbf0 <_free_r+0x24>
 800cc48:	6820      	ldr	r0, [r4, #0]
 800cc4a:	1821      	adds	r1, r4, r0
 800cc4c:	428a      	cmp	r2, r1
 800cc4e:	bf04      	itt	eq
 800cc50:	6811      	ldreq	r1, [r2, #0]
 800cc52:	6852      	ldreq	r2, [r2, #4]
 800cc54:	6062      	str	r2, [r4, #4]
 800cc56:	bf04      	itt	eq
 800cc58:	1809      	addeq	r1, r1, r0
 800cc5a:	6021      	streq	r1, [r4, #0]
 800cc5c:	605c      	str	r4, [r3, #4]
 800cc5e:	e7c7      	b.n	800cbf0 <_free_r+0x24>
 800cc60:	bd38      	pop	{r3, r4, r5, pc}
 800cc62:	bf00      	nop
 800cc64:	2000094c 	.word	0x2000094c

0800cc68 <_malloc_r>:
 800cc68:	b570      	push	{r4, r5, r6, lr}
 800cc6a:	1ccd      	adds	r5, r1, #3
 800cc6c:	f025 0503 	bic.w	r5, r5, #3
 800cc70:	3508      	adds	r5, #8
 800cc72:	2d0c      	cmp	r5, #12
 800cc74:	bf38      	it	cc
 800cc76:	250c      	movcc	r5, #12
 800cc78:	2d00      	cmp	r5, #0
 800cc7a:	4606      	mov	r6, r0
 800cc7c:	db01      	blt.n	800cc82 <_malloc_r+0x1a>
 800cc7e:	42a9      	cmp	r1, r5
 800cc80:	d903      	bls.n	800cc8a <_malloc_r+0x22>
 800cc82:	230c      	movs	r3, #12
 800cc84:	6033      	str	r3, [r6, #0]
 800cc86:	2000      	movs	r0, #0
 800cc88:	bd70      	pop	{r4, r5, r6, pc}
 800cc8a:	f000 f8aa 	bl	800cde2 <__malloc_lock>
 800cc8e:	4a23      	ldr	r2, [pc, #140]	; (800cd1c <_malloc_r+0xb4>)
 800cc90:	6814      	ldr	r4, [r2, #0]
 800cc92:	4621      	mov	r1, r4
 800cc94:	b991      	cbnz	r1, 800ccbc <_malloc_r+0x54>
 800cc96:	4c22      	ldr	r4, [pc, #136]	; (800cd20 <_malloc_r+0xb8>)
 800cc98:	6823      	ldr	r3, [r4, #0]
 800cc9a:	b91b      	cbnz	r3, 800cca4 <_malloc_r+0x3c>
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	f000 f841 	bl	800cd24 <_sbrk_r>
 800cca2:	6020      	str	r0, [r4, #0]
 800cca4:	4629      	mov	r1, r5
 800cca6:	4630      	mov	r0, r6
 800cca8:	f000 f83c 	bl	800cd24 <_sbrk_r>
 800ccac:	1c43      	adds	r3, r0, #1
 800ccae:	d126      	bne.n	800ccfe <_malloc_r+0x96>
 800ccb0:	230c      	movs	r3, #12
 800ccb2:	6033      	str	r3, [r6, #0]
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	f000 f895 	bl	800cde4 <__malloc_unlock>
 800ccba:	e7e4      	b.n	800cc86 <_malloc_r+0x1e>
 800ccbc:	680b      	ldr	r3, [r1, #0]
 800ccbe:	1b5b      	subs	r3, r3, r5
 800ccc0:	d41a      	bmi.n	800ccf8 <_malloc_r+0x90>
 800ccc2:	2b0b      	cmp	r3, #11
 800ccc4:	d90f      	bls.n	800cce6 <_malloc_r+0x7e>
 800ccc6:	600b      	str	r3, [r1, #0]
 800ccc8:	50cd      	str	r5, [r1, r3]
 800ccca:	18cc      	adds	r4, r1, r3
 800cccc:	4630      	mov	r0, r6
 800ccce:	f000 f889 	bl	800cde4 <__malloc_unlock>
 800ccd2:	f104 000b 	add.w	r0, r4, #11
 800ccd6:	1d23      	adds	r3, r4, #4
 800ccd8:	f020 0007 	bic.w	r0, r0, #7
 800ccdc:	1ac3      	subs	r3, r0, r3
 800ccde:	d01b      	beq.n	800cd18 <_malloc_r+0xb0>
 800cce0:	425a      	negs	r2, r3
 800cce2:	50e2      	str	r2, [r4, r3]
 800cce4:	bd70      	pop	{r4, r5, r6, pc}
 800cce6:	428c      	cmp	r4, r1
 800cce8:	bf0d      	iteet	eq
 800ccea:	6863      	ldreq	r3, [r4, #4]
 800ccec:	684b      	ldrne	r3, [r1, #4]
 800ccee:	6063      	strne	r3, [r4, #4]
 800ccf0:	6013      	streq	r3, [r2, #0]
 800ccf2:	bf18      	it	ne
 800ccf4:	460c      	movne	r4, r1
 800ccf6:	e7e9      	b.n	800cccc <_malloc_r+0x64>
 800ccf8:	460c      	mov	r4, r1
 800ccfa:	6849      	ldr	r1, [r1, #4]
 800ccfc:	e7ca      	b.n	800cc94 <_malloc_r+0x2c>
 800ccfe:	1cc4      	adds	r4, r0, #3
 800cd00:	f024 0403 	bic.w	r4, r4, #3
 800cd04:	42a0      	cmp	r0, r4
 800cd06:	d005      	beq.n	800cd14 <_malloc_r+0xac>
 800cd08:	1a21      	subs	r1, r4, r0
 800cd0a:	4630      	mov	r0, r6
 800cd0c:	f000 f80a 	bl	800cd24 <_sbrk_r>
 800cd10:	3001      	adds	r0, #1
 800cd12:	d0cd      	beq.n	800ccb0 <_malloc_r+0x48>
 800cd14:	6025      	str	r5, [r4, #0]
 800cd16:	e7d9      	b.n	800cccc <_malloc_r+0x64>
 800cd18:	bd70      	pop	{r4, r5, r6, pc}
 800cd1a:	bf00      	nop
 800cd1c:	2000094c 	.word	0x2000094c
 800cd20:	20000950 	.word	0x20000950

0800cd24 <_sbrk_r>:
 800cd24:	b538      	push	{r3, r4, r5, lr}
 800cd26:	4c06      	ldr	r4, [pc, #24]	; (800cd40 <_sbrk_r+0x1c>)
 800cd28:	2300      	movs	r3, #0
 800cd2a:	4605      	mov	r5, r0
 800cd2c:	4608      	mov	r0, r1
 800cd2e:	6023      	str	r3, [r4, #0]
 800cd30:	f7fe fe08 	bl	800b944 <_sbrk>
 800cd34:	1c43      	adds	r3, r0, #1
 800cd36:	d102      	bne.n	800cd3e <_sbrk_r+0x1a>
 800cd38:	6823      	ldr	r3, [r4, #0]
 800cd3a:	b103      	cbz	r3, 800cd3e <_sbrk_r+0x1a>
 800cd3c:	602b      	str	r3, [r5, #0]
 800cd3e:	bd38      	pop	{r3, r4, r5, pc}
 800cd40:	2000d504 	.word	0x2000d504

0800cd44 <siscanf>:
 800cd44:	b40e      	push	{r1, r2, r3}
 800cd46:	b530      	push	{r4, r5, lr}
 800cd48:	b09c      	sub	sp, #112	; 0x70
 800cd4a:	ac1f      	add	r4, sp, #124	; 0x7c
 800cd4c:	f44f 7201 	mov.w	r2, #516	; 0x204
 800cd50:	f854 5b04 	ldr.w	r5, [r4], #4
 800cd54:	f8ad 2014 	strh.w	r2, [sp, #20]
 800cd58:	9002      	str	r0, [sp, #8]
 800cd5a:	9006      	str	r0, [sp, #24]
 800cd5c:	f7f3 fa38 	bl	80001d0 <strlen>
 800cd60:	4b0b      	ldr	r3, [pc, #44]	; (800cd90 <siscanf+0x4c>)
 800cd62:	9003      	str	r0, [sp, #12]
 800cd64:	9007      	str	r0, [sp, #28]
 800cd66:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd68:	480a      	ldr	r0, [pc, #40]	; (800cd94 <siscanf+0x50>)
 800cd6a:	9401      	str	r4, [sp, #4]
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd70:	9314      	str	r3, [sp, #80]	; 0x50
 800cd72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd76:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cd7a:	462a      	mov	r2, r5
 800cd7c:	4623      	mov	r3, r4
 800cd7e:	a902      	add	r1, sp, #8
 800cd80:	6800      	ldr	r0, [r0, #0]
 800cd82:	f000 f88b 	bl	800ce9c <__ssvfiscanf_r>
 800cd86:	b01c      	add	sp, #112	; 0x70
 800cd88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd8c:	b003      	add	sp, #12
 800cd8e:	4770      	bx	lr
 800cd90:	0800cd99 	.word	0x0800cd99
 800cd94:	200002e8 	.word	0x200002e8

0800cd98 <__seofread>:
 800cd98:	2000      	movs	r0, #0
 800cd9a:	4770      	bx	lr

0800cd9c <strcpy>:
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cda2:	f803 2b01 	strb.w	r2, [r3], #1
 800cda6:	2a00      	cmp	r2, #0
 800cda8:	d1f9      	bne.n	800cd9e <strcpy+0x2>
 800cdaa:	4770      	bx	lr

0800cdac <strstr>:
 800cdac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdae:	7803      	ldrb	r3, [r0, #0]
 800cdb0:	b133      	cbz	r3, 800cdc0 <strstr+0x14>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	1c5e      	adds	r6, r3, #1
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	b933      	cbnz	r3, 800cdca <strstr+0x1e>
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdc0:	780b      	ldrb	r3, [r1, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	bf18      	it	ne
 800cdc6:	2000      	movne	r0, #0
 800cdc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdca:	1e4d      	subs	r5, r1, #1
 800cdcc:	1e44      	subs	r4, r0, #1
 800cdce:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800cdd2:	2a00      	cmp	r2, #0
 800cdd4:	d0f3      	beq.n	800cdbe <strstr+0x12>
 800cdd6:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800cdda:	4297      	cmp	r7, r2
 800cddc:	4633      	mov	r3, r6
 800cdde:	d0f6      	beq.n	800cdce <strstr+0x22>
 800cde0:	e7e8      	b.n	800cdb4 <strstr+0x8>

0800cde2 <__malloc_lock>:
 800cde2:	4770      	bx	lr

0800cde4 <__malloc_unlock>:
 800cde4:	4770      	bx	lr

0800cde6 <_sungetc_r>:
 800cde6:	b538      	push	{r3, r4, r5, lr}
 800cde8:	1c4b      	adds	r3, r1, #1
 800cdea:	4614      	mov	r4, r2
 800cdec:	d103      	bne.n	800cdf6 <_sungetc_r+0x10>
 800cdee:	f04f 35ff 	mov.w	r5, #4294967295
 800cdf2:	4628      	mov	r0, r5
 800cdf4:	bd38      	pop	{r3, r4, r5, pc}
 800cdf6:	8993      	ldrh	r3, [r2, #12]
 800cdf8:	f023 0320 	bic.w	r3, r3, #32
 800cdfc:	8193      	strh	r3, [r2, #12]
 800cdfe:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800ce00:	6852      	ldr	r2, [r2, #4]
 800ce02:	b2cd      	uxtb	r5, r1
 800ce04:	b18b      	cbz	r3, 800ce2a <_sungetc_r+0x44>
 800ce06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	da08      	bge.n	800ce1e <_sungetc_r+0x38>
 800ce0c:	6823      	ldr	r3, [r4, #0]
 800ce0e:	1e5a      	subs	r2, r3, #1
 800ce10:	6022      	str	r2, [r4, #0]
 800ce12:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ce16:	6863      	ldr	r3, [r4, #4]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	6063      	str	r3, [r4, #4]
 800ce1c:	e7e9      	b.n	800cdf2 <_sungetc_r+0xc>
 800ce1e:	4621      	mov	r1, r4
 800ce20:	f000 fc3a 	bl	800d698 <__submore>
 800ce24:	2800      	cmp	r0, #0
 800ce26:	d0f1      	beq.n	800ce0c <_sungetc_r+0x26>
 800ce28:	e7e1      	b.n	800cdee <_sungetc_r+0x8>
 800ce2a:	6921      	ldr	r1, [r4, #16]
 800ce2c:	6823      	ldr	r3, [r4, #0]
 800ce2e:	b151      	cbz	r1, 800ce46 <_sungetc_r+0x60>
 800ce30:	4299      	cmp	r1, r3
 800ce32:	d208      	bcs.n	800ce46 <_sungetc_r+0x60>
 800ce34:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ce38:	428d      	cmp	r5, r1
 800ce3a:	d104      	bne.n	800ce46 <_sungetc_r+0x60>
 800ce3c:	3b01      	subs	r3, #1
 800ce3e:	3201      	adds	r2, #1
 800ce40:	6023      	str	r3, [r4, #0]
 800ce42:	6062      	str	r2, [r4, #4]
 800ce44:	e7d5      	b.n	800cdf2 <_sungetc_r+0xc>
 800ce46:	63e3      	str	r3, [r4, #60]	; 0x3c
 800ce48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce4c:	6363      	str	r3, [r4, #52]	; 0x34
 800ce4e:	2303      	movs	r3, #3
 800ce50:	63a3      	str	r3, [r4, #56]	; 0x38
 800ce52:	4623      	mov	r3, r4
 800ce54:	6422      	str	r2, [r4, #64]	; 0x40
 800ce56:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ce5a:	6023      	str	r3, [r4, #0]
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	e7dc      	b.n	800ce1a <_sungetc_r+0x34>

0800ce60 <__ssrefill_r>:
 800ce60:	b510      	push	{r4, lr}
 800ce62:	460c      	mov	r4, r1
 800ce64:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ce66:	b169      	cbz	r1, 800ce84 <__ssrefill_r+0x24>
 800ce68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce6c:	4299      	cmp	r1, r3
 800ce6e:	d001      	beq.n	800ce74 <__ssrefill_r+0x14>
 800ce70:	f7ff feac 	bl	800cbcc <_free_r>
 800ce74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce76:	6063      	str	r3, [r4, #4]
 800ce78:	2000      	movs	r0, #0
 800ce7a:	6360      	str	r0, [r4, #52]	; 0x34
 800ce7c:	b113      	cbz	r3, 800ce84 <__ssrefill_r+0x24>
 800ce7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ce80:	6023      	str	r3, [r4, #0]
 800ce82:	bd10      	pop	{r4, pc}
 800ce84:	6923      	ldr	r3, [r4, #16]
 800ce86:	6023      	str	r3, [r4, #0]
 800ce88:	2300      	movs	r3, #0
 800ce8a:	6063      	str	r3, [r4, #4]
 800ce8c:	89a3      	ldrh	r3, [r4, #12]
 800ce8e:	f043 0320 	orr.w	r3, r3, #32
 800ce92:	81a3      	strh	r3, [r4, #12]
 800ce94:	f04f 30ff 	mov.w	r0, #4294967295
 800ce98:	bd10      	pop	{r4, pc}
	...

0800ce9c <__ssvfiscanf_r>:
 800ce9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea0:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800cea4:	f10d 080c 	add.w	r8, sp, #12
 800cea8:	9301      	str	r3, [sp, #4]
 800ceaa:	2300      	movs	r3, #0
 800ceac:	9346      	str	r3, [sp, #280]	; 0x118
 800ceae:	9347      	str	r3, [sp, #284]	; 0x11c
 800ceb0:	4ba0      	ldr	r3, [pc, #640]	; (800d134 <__ssvfiscanf_r+0x298>)
 800ceb2:	93a2      	str	r3, [sp, #648]	; 0x288
 800ceb4:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800d13c <__ssvfiscanf_r+0x2a0>
 800ceb8:	4b9f      	ldr	r3, [pc, #636]	; (800d138 <__ssvfiscanf_r+0x29c>)
 800ceba:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800cebe:	4606      	mov	r6, r0
 800cec0:	460c      	mov	r4, r1
 800cec2:	93a3      	str	r3, [sp, #652]	; 0x28c
 800cec4:	4692      	mov	sl, r2
 800cec6:	270a      	movs	r7, #10
 800cec8:	f89a 3000 	ldrb.w	r3, [sl]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f000 812f 	beq.w	800d130 <__ssvfiscanf_r+0x294>
 800ced2:	f000 fc1f 	bl	800d714 <__locale_ctype_ptr>
 800ced6:	f89a b000 	ldrb.w	fp, [sl]
 800ceda:	4458      	add	r0, fp
 800cedc:	7843      	ldrb	r3, [r0, #1]
 800cede:	f013 0308 	ands.w	r3, r3, #8
 800cee2:	d143      	bne.n	800cf6c <__ssvfiscanf_r+0xd0>
 800cee4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800cee8:	f10a 0501 	add.w	r5, sl, #1
 800ceec:	f040 8099 	bne.w	800d022 <__ssvfiscanf_r+0x186>
 800cef0:	9345      	str	r3, [sp, #276]	; 0x114
 800cef2:	9343      	str	r3, [sp, #268]	; 0x10c
 800cef4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800cef8:	2b2a      	cmp	r3, #42	; 0x2a
 800cefa:	d103      	bne.n	800cf04 <__ssvfiscanf_r+0x68>
 800cefc:	2310      	movs	r3, #16
 800cefe:	9343      	str	r3, [sp, #268]	; 0x10c
 800cf00:	f10a 0502 	add.w	r5, sl, #2
 800cf04:	7829      	ldrb	r1, [r5, #0]
 800cf06:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800cf0a:	2a09      	cmp	r2, #9
 800cf0c:	46aa      	mov	sl, r5
 800cf0e:	f105 0501 	add.w	r5, r5, #1
 800cf12:	d941      	bls.n	800cf98 <__ssvfiscanf_r+0xfc>
 800cf14:	2203      	movs	r2, #3
 800cf16:	4889      	ldr	r0, [pc, #548]	; (800d13c <__ssvfiscanf_r+0x2a0>)
 800cf18:	f7f3 f962 	bl	80001e0 <memchr>
 800cf1c:	b138      	cbz	r0, 800cf2e <__ssvfiscanf_r+0x92>
 800cf1e:	eba0 0309 	sub.w	r3, r0, r9
 800cf22:	2001      	movs	r0, #1
 800cf24:	4098      	lsls	r0, r3
 800cf26:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cf28:	4318      	orrs	r0, r3
 800cf2a:	9043      	str	r0, [sp, #268]	; 0x10c
 800cf2c:	46aa      	mov	sl, r5
 800cf2e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf32:	2b67      	cmp	r3, #103	; 0x67
 800cf34:	f10a 0501 	add.w	r5, sl, #1
 800cf38:	d84a      	bhi.n	800cfd0 <__ssvfiscanf_r+0x134>
 800cf3a:	2b65      	cmp	r3, #101	; 0x65
 800cf3c:	f080 80b7 	bcs.w	800d0ae <__ssvfiscanf_r+0x212>
 800cf40:	2b47      	cmp	r3, #71	; 0x47
 800cf42:	d82f      	bhi.n	800cfa4 <__ssvfiscanf_r+0x108>
 800cf44:	2b45      	cmp	r3, #69	; 0x45
 800cf46:	f080 80b2 	bcs.w	800d0ae <__ssvfiscanf_r+0x212>
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	f000 8082 	beq.w	800d054 <__ssvfiscanf_r+0x1b8>
 800cf50:	2b25      	cmp	r3, #37	; 0x25
 800cf52:	d066      	beq.n	800d022 <__ssvfiscanf_r+0x186>
 800cf54:	2303      	movs	r3, #3
 800cf56:	9349      	str	r3, [sp, #292]	; 0x124
 800cf58:	9744      	str	r7, [sp, #272]	; 0x110
 800cf5a:	e045      	b.n	800cfe8 <__ssvfiscanf_r+0x14c>
 800cf5c:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800cf5e:	3101      	adds	r1, #1
 800cf60:	9147      	str	r1, [sp, #284]	; 0x11c
 800cf62:	6861      	ldr	r1, [r4, #4]
 800cf64:	3301      	adds	r3, #1
 800cf66:	3901      	subs	r1, #1
 800cf68:	6061      	str	r1, [r4, #4]
 800cf6a:	6023      	str	r3, [r4, #0]
 800cf6c:	6863      	ldr	r3, [r4, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	dd0b      	ble.n	800cf8a <__ssvfiscanf_r+0xee>
 800cf72:	f000 fbcf 	bl	800d714 <__locale_ctype_ptr>
 800cf76:	6823      	ldr	r3, [r4, #0]
 800cf78:	7819      	ldrb	r1, [r3, #0]
 800cf7a:	4408      	add	r0, r1
 800cf7c:	7841      	ldrb	r1, [r0, #1]
 800cf7e:	070d      	lsls	r5, r1, #28
 800cf80:	d4ec      	bmi.n	800cf5c <__ssvfiscanf_r+0xc0>
 800cf82:	f10a 0501 	add.w	r5, sl, #1
 800cf86:	46aa      	mov	sl, r5
 800cf88:	e79e      	b.n	800cec8 <__ssvfiscanf_r+0x2c>
 800cf8a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800cf8c:	4621      	mov	r1, r4
 800cf8e:	4630      	mov	r0, r6
 800cf90:	4798      	blx	r3
 800cf92:	2800      	cmp	r0, #0
 800cf94:	d0ed      	beq.n	800cf72 <__ssvfiscanf_r+0xd6>
 800cf96:	e7f4      	b.n	800cf82 <__ssvfiscanf_r+0xe6>
 800cf98:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cf9a:	fb07 1303 	mla	r3, r7, r3, r1
 800cf9e:	3b30      	subs	r3, #48	; 0x30
 800cfa0:	9345      	str	r3, [sp, #276]	; 0x114
 800cfa2:	e7af      	b.n	800cf04 <__ssvfiscanf_r+0x68>
 800cfa4:	2b5b      	cmp	r3, #91	; 0x5b
 800cfa6:	d061      	beq.n	800d06c <__ssvfiscanf_r+0x1d0>
 800cfa8:	d80c      	bhi.n	800cfc4 <__ssvfiscanf_r+0x128>
 800cfaa:	2b58      	cmp	r3, #88	; 0x58
 800cfac:	d1d2      	bne.n	800cf54 <__ssvfiscanf_r+0xb8>
 800cfae:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800cfb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cfb4:	9243      	str	r2, [sp, #268]	; 0x10c
 800cfb6:	2210      	movs	r2, #16
 800cfb8:	9244      	str	r2, [sp, #272]	; 0x110
 800cfba:	2b6f      	cmp	r3, #111	; 0x6f
 800cfbc:	bfb4      	ite	lt
 800cfbe:	2303      	movlt	r3, #3
 800cfc0:	2304      	movge	r3, #4
 800cfc2:	e010      	b.n	800cfe6 <__ssvfiscanf_r+0x14a>
 800cfc4:	2b63      	cmp	r3, #99	; 0x63
 800cfc6:	d05c      	beq.n	800d082 <__ssvfiscanf_r+0x1e6>
 800cfc8:	2b64      	cmp	r3, #100	; 0x64
 800cfca:	d1c3      	bne.n	800cf54 <__ssvfiscanf_r+0xb8>
 800cfcc:	9744      	str	r7, [sp, #272]	; 0x110
 800cfce:	e7f4      	b.n	800cfba <__ssvfiscanf_r+0x11e>
 800cfd0:	2b70      	cmp	r3, #112	; 0x70
 800cfd2:	d042      	beq.n	800d05a <__ssvfiscanf_r+0x1be>
 800cfd4:	d81d      	bhi.n	800d012 <__ssvfiscanf_r+0x176>
 800cfd6:	2b6e      	cmp	r3, #110	; 0x6e
 800cfd8:	d059      	beq.n	800d08e <__ssvfiscanf_r+0x1f2>
 800cfda:	d843      	bhi.n	800d064 <__ssvfiscanf_r+0x1c8>
 800cfdc:	2b69      	cmp	r3, #105	; 0x69
 800cfde:	d1b9      	bne.n	800cf54 <__ssvfiscanf_r+0xb8>
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	9344      	str	r3, [sp, #272]	; 0x110
 800cfe4:	2303      	movs	r3, #3
 800cfe6:	9349      	str	r3, [sp, #292]	; 0x124
 800cfe8:	6863      	ldr	r3, [r4, #4]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	dd61      	ble.n	800d0b2 <__ssvfiscanf_r+0x216>
 800cfee:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cff0:	0659      	lsls	r1, r3, #25
 800cff2:	d56f      	bpl.n	800d0d4 <__ssvfiscanf_r+0x238>
 800cff4:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800cff6:	2b02      	cmp	r3, #2
 800cff8:	dc7c      	bgt.n	800d0f4 <__ssvfiscanf_r+0x258>
 800cffa:	ab01      	add	r3, sp, #4
 800cffc:	4622      	mov	r2, r4
 800cffe:	a943      	add	r1, sp, #268	; 0x10c
 800d000:	4630      	mov	r0, r6
 800d002:	f000 f89f 	bl	800d144 <_scanf_chars>
 800d006:	2801      	cmp	r0, #1
 800d008:	f000 8092 	beq.w	800d130 <__ssvfiscanf_r+0x294>
 800d00c:	2802      	cmp	r0, #2
 800d00e:	d1ba      	bne.n	800cf86 <__ssvfiscanf_r+0xea>
 800d010:	e01d      	b.n	800d04e <__ssvfiscanf_r+0x1b2>
 800d012:	2b75      	cmp	r3, #117	; 0x75
 800d014:	d0da      	beq.n	800cfcc <__ssvfiscanf_r+0x130>
 800d016:	2b78      	cmp	r3, #120	; 0x78
 800d018:	d0c9      	beq.n	800cfae <__ssvfiscanf_r+0x112>
 800d01a:	2b73      	cmp	r3, #115	; 0x73
 800d01c:	d19a      	bne.n	800cf54 <__ssvfiscanf_r+0xb8>
 800d01e:	2302      	movs	r3, #2
 800d020:	e7e1      	b.n	800cfe6 <__ssvfiscanf_r+0x14a>
 800d022:	6863      	ldr	r3, [r4, #4]
 800d024:	2b00      	cmp	r3, #0
 800d026:	dd0c      	ble.n	800d042 <__ssvfiscanf_r+0x1a6>
 800d028:	6823      	ldr	r3, [r4, #0]
 800d02a:	781a      	ldrb	r2, [r3, #0]
 800d02c:	4593      	cmp	fp, r2
 800d02e:	d17f      	bne.n	800d130 <__ssvfiscanf_r+0x294>
 800d030:	3301      	adds	r3, #1
 800d032:	6862      	ldr	r2, [r4, #4]
 800d034:	6023      	str	r3, [r4, #0]
 800d036:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d038:	3a01      	subs	r2, #1
 800d03a:	3301      	adds	r3, #1
 800d03c:	6062      	str	r2, [r4, #4]
 800d03e:	9347      	str	r3, [sp, #284]	; 0x11c
 800d040:	e7a1      	b.n	800cf86 <__ssvfiscanf_r+0xea>
 800d042:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d044:	4621      	mov	r1, r4
 800d046:	4630      	mov	r0, r6
 800d048:	4798      	blx	r3
 800d04a:	2800      	cmp	r0, #0
 800d04c:	d0ec      	beq.n	800d028 <__ssvfiscanf_r+0x18c>
 800d04e:	9846      	ldr	r0, [sp, #280]	; 0x118
 800d050:	2800      	cmp	r0, #0
 800d052:	d163      	bne.n	800d11c <__ssvfiscanf_r+0x280>
 800d054:	f04f 30ff 	mov.w	r0, #4294967295
 800d058:	e066      	b.n	800d128 <__ssvfiscanf_r+0x28c>
 800d05a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800d05c:	f042 0220 	orr.w	r2, r2, #32
 800d060:	9243      	str	r2, [sp, #268]	; 0x10c
 800d062:	e7a4      	b.n	800cfae <__ssvfiscanf_r+0x112>
 800d064:	2308      	movs	r3, #8
 800d066:	9344      	str	r3, [sp, #272]	; 0x110
 800d068:	2304      	movs	r3, #4
 800d06a:	e7bc      	b.n	800cfe6 <__ssvfiscanf_r+0x14a>
 800d06c:	4629      	mov	r1, r5
 800d06e:	4640      	mov	r0, r8
 800d070:	f000 f9c0 	bl	800d3f4 <__sccl>
 800d074:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d07a:	9343      	str	r3, [sp, #268]	; 0x10c
 800d07c:	4605      	mov	r5, r0
 800d07e:	2301      	movs	r3, #1
 800d080:	e7b1      	b.n	800cfe6 <__ssvfiscanf_r+0x14a>
 800d082:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d088:	9343      	str	r3, [sp, #268]	; 0x10c
 800d08a:	2300      	movs	r3, #0
 800d08c:	e7ab      	b.n	800cfe6 <__ssvfiscanf_r+0x14a>
 800d08e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800d090:	06d0      	lsls	r0, r2, #27
 800d092:	f53f af78 	bmi.w	800cf86 <__ssvfiscanf_r+0xea>
 800d096:	f012 0f01 	tst.w	r2, #1
 800d09a:	9a01      	ldr	r2, [sp, #4]
 800d09c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d09e:	f102 0104 	add.w	r1, r2, #4
 800d0a2:	9101      	str	r1, [sp, #4]
 800d0a4:	6812      	ldr	r2, [r2, #0]
 800d0a6:	bf14      	ite	ne
 800d0a8:	8013      	strhne	r3, [r2, #0]
 800d0aa:	6013      	streq	r3, [r2, #0]
 800d0ac:	e76b      	b.n	800cf86 <__ssvfiscanf_r+0xea>
 800d0ae:	2305      	movs	r3, #5
 800d0b0:	e799      	b.n	800cfe6 <__ssvfiscanf_r+0x14a>
 800d0b2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d0b4:	4621      	mov	r1, r4
 800d0b6:	4630      	mov	r0, r6
 800d0b8:	4798      	blx	r3
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	d097      	beq.n	800cfee <__ssvfiscanf_r+0x152>
 800d0be:	e7c6      	b.n	800d04e <__ssvfiscanf_r+0x1b2>
 800d0c0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800d0c2:	3201      	adds	r2, #1
 800d0c4:	9247      	str	r2, [sp, #284]	; 0x11c
 800d0c6:	6862      	ldr	r2, [r4, #4]
 800d0c8:	3a01      	subs	r2, #1
 800d0ca:	2a00      	cmp	r2, #0
 800d0cc:	6062      	str	r2, [r4, #4]
 800d0ce:	dd0a      	ble.n	800d0e6 <__ssvfiscanf_r+0x24a>
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	6023      	str	r3, [r4, #0]
 800d0d4:	f000 fb1e 	bl	800d714 <__locale_ctype_ptr>
 800d0d8:	6823      	ldr	r3, [r4, #0]
 800d0da:	781a      	ldrb	r2, [r3, #0]
 800d0dc:	4410      	add	r0, r2
 800d0de:	7842      	ldrb	r2, [r0, #1]
 800d0e0:	0712      	lsls	r2, r2, #28
 800d0e2:	d4ed      	bmi.n	800d0c0 <__ssvfiscanf_r+0x224>
 800d0e4:	e786      	b.n	800cff4 <__ssvfiscanf_r+0x158>
 800d0e6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d0e8:	4621      	mov	r1, r4
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	4798      	blx	r3
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	d0f0      	beq.n	800d0d4 <__ssvfiscanf_r+0x238>
 800d0f2:	e7ac      	b.n	800d04e <__ssvfiscanf_r+0x1b2>
 800d0f4:	2b04      	cmp	r3, #4
 800d0f6:	dc06      	bgt.n	800d106 <__ssvfiscanf_r+0x26a>
 800d0f8:	ab01      	add	r3, sp, #4
 800d0fa:	4622      	mov	r2, r4
 800d0fc:	a943      	add	r1, sp, #268	; 0x10c
 800d0fe:	4630      	mov	r0, r6
 800d100:	f000 f884 	bl	800d20c <_scanf_i>
 800d104:	e77f      	b.n	800d006 <__ssvfiscanf_r+0x16a>
 800d106:	4b0e      	ldr	r3, [pc, #56]	; (800d140 <__ssvfiscanf_r+0x2a4>)
 800d108:	2b00      	cmp	r3, #0
 800d10a:	f43f af3c 	beq.w	800cf86 <__ssvfiscanf_r+0xea>
 800d10e:	ab01      	add	r3, sp, #4
 800d110:	4622      	mov	r2, r4
 800d112:	a943      	add	r1, sp, #268	; 0x10c
 800d114:	4630      	mov	r0, r6
 800d116:	f3af 8000 	nop.w
 800d11a:	e774      	b.n	800d006 <__ssvfiscanf_r+0x16a>
 800d11c:	89a3      	ldrh	r3, [r4, #12]
 800d11e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d122:	bf18      	it	ne
 800d124:	f04f 30ff 	movne.w	r0, #4294967295
 800d128:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 800d12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d130:	9846      	ldr	r0, [sp, #280]	; 0x118
 800d132:	e7f9      	b.n	800d128 <__ssvfiscanf_r+0x28c>
 800d134:	0800cde7 	.word	0x0800cde7
 800d138:	0800ce61 	.word	0x0800ce61
 800d13c:	0800ed57 	.word	0x0800ed57
 800d140:	00000000 	.word	0x00000000

0800d144 <_scanf_chars>:
 800d144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d148:	4615      	mov	r5, r2
 800d14a:	688a      	ldr	r2, [r1, #8]
 800d14c:	4680      	mov	r8, r0
 800d14e:	460c      	mov	r4, r1
 800d150:	b932      	cbnz	r2, 800d160 <_scanf_chars+0x1c>
 800d152:	698a      	ldr	r2, [r1, #24]
 800d154:	2a00      	cmp	r2, #0
 800d156:	bf0c      	ite	eq
 800d158:	2201      	moveq	r2, #1
 800d15a:	f04f 32ff 	movne.w	r2, #4294967295
 800d15e:	608a      	str	r2, [r1, #8]
 800d160:	6822      	ldr	r2, [r4, #0]
 800d162:	06d1      	lsls	r1, r2, #27
 800d164:	bf5f      	itttt	pl
 800d166:	681a      	ldrpl	r2, [r3, #0]
 800d168:	1d11      	addpl	r1, r2, #4
 800d16a:	6019      	strpl	r1, [r3, #0]
 800d16c:	6817      	ldrpl	r7, [r2, #0]
 800d16e:	2600      	movs	r6, #0
 800d170:	69a3      	ldr	r3, [r4, #24]
 800d172:	b1db      	cbz	r3, 800d1ac <_scanf_chars+0x68>
 800d174:	2b01      	cmp	r3, #1
 800d176:	d107      	bne.n	800d188 <_scanf_chars+0x44>
 800d178:	682b      	ldr	r3, [r5, #0]
 800d17a:	6962      	ldr	r2, [r4, #20]
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	5cd3      	ldrb	r3, [r2, r3]
 800d180:	b9a3      	cbnz	r3, 800d1ac <_scanf_chars+0x68>
 800d182:	2e00      	cmp	r6, #0
 800d184:	d132      	bne.n	800d1ec <_scanf_chars+0xa8>
 800d186:	e006      	b.n	800d196 <_scanf_chars+0x52>
 800d188:	2b02      	cmp	r3, #2
 800d18a:	d007      	beq.n	800d19c <_scanf_chars+0x58>
 800d18c:	2e00      	cmp	r6, #0
 800d18e:	d12d      	bne.n	800d1ec <_scanf_chars+0xa8>
 800d190:	69a3      	ldr	r3, [r4, #24]
 800d192:	2b01      	cmp	r3, #1
 800d194:	d12a      	bne.n	800d1ec <_scanf_chars+0xa8>
 800d196:	2001      	movs	r0, #1
 800d198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d19c:	f000 faba 	bl	800d714 <__locale_ctype_ptr>
 800d1a0:	682b      	ldr	r3, [r5, #0]
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	4418      	add	r0, r3
 800d1a6:	7843      	ldrb	r3, [r0, #1]
 800d1a8:	071b      	lsls	r3, r3, #28
 800d1aa:	d4ef      	bmi.n	800d18c <_scanf_chars+0x48>
 800d1ac:	6823      	ldr	r3, [r4, #0]
 800d1ae:	06da      	lsls	r2, r3, #27
 800d1b0:	bf5e      	ittt	pl
 800d1b2:	682b      	ldrpl	r3, [r5, #0]
 800d1b4:	781b      	ldrbpl	r3, [r3, #0]
 800d1b6:	703b      	strbpl	r3, [r7, #0]
 800d1b8:	682a      	ldr	r2, [r5, #0]
 800d1ba:	686b      	ldr	r3, [r5, #4]
 800d1bc:	f102 0201 	add.w	r2, r2, #1
 800d1c0:	602a      	str	r2, [r5, #0]
 800d1c2:	68a2      	ldr	r2, [r4, #8]
 800d1c4:	f103 33ff 	add.w	r3, r3, #4294967295
 800d1c8:	f102 32ff 	add.w	r2, r2, #4294967295
 800d1cc:	606b      	str	r3, [r5, #4]
 800d1ce:	f106 0601 	add.w	r6, r6, #1
 800d1d2:	bf58      	it	pl
 800d1d4:	3701      	addpl	r7, #1
 800d1d6:	60a2      	str	r2, [r4, #8]
 800d1d8:	b142      	cbz	r2, 800d1ec <_scanf_chars+0xa8>
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	dcc8      	bgt.n	800d170 <_scanf_chars+0x2c>
 800d1de:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	4640      	mov	r0, r8
 800d1e6:	4798      	blx	r3
 800d1e8:	2800      	cmp	r0, #0
 800d1ea:	d0c1      	beq.n	800d170 <_scanf_chars+0x2c>
 800d1ec:	6823      	ldr	r3, [r4, #0]
 800d1ee:	f013 0310 	ands.w	r3, r3, #16
 800d1f2:	d105      	bne.n	800d200 <_scanf_chars+0xbc>
 800d1f4:	68e2      	ldr	r2, [r4, #12]
 800d1f6:	3201      	adds	r2, #1
 800d1f8:	60e2      	str	r2, [r4, #12]
 800d1fa:	69a2      	ldr	r2, [r4, #24]
 800d1fc:	b102      	cbz	r2, 800d200 <_scanf_chars+0xbc>
 800d1fe:	703b      	strb	r3, [r7, #0]
 800d200:	6923      	ldr	r3, [r4, #16]
 800d202:	441e      	add	r6, r3
 800d204:	6126      	str	r6, [r4, #16]
 800d206:	2000      	movs	r0, #0
 800d208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d20c <_scanf_i>:
 800d20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d210:	469a      	mov	sl, r3
 800d212:	4b74      	ldr	r3, [pc, #464]	; (800d3e4 <_scanf_i+0x1d8>)
 800d214:	460c      	mov	r4, r1
 800d216:	4683      	mov	fp, r0
 800d218:	4616      	mov	r6, r2
 800d21a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d21e:	b087      	sub	sp, #28
 800d220:	ab03      	add	r3, sp, #12
 800d222:	68a7      	ldr	r7, [r4, #8]
 800d224:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d228:	4b6f      	ldr	r3, [pc, #444]	; (800d3e8 <_scanf_i+0x1dc>)
 800d22a:	69a1      	ldr	r1, [r4, #24]
 800d22c:	4a6f      	ldr	r2, [pc, #444]	; (800d3ec <_scanf_i+0x1e0>)
 800d22e:	2903      	cmp	r1, #3
 800d230:	bf18      	it	ne
 800d232:	461a      	movne	r2, r3
 800d234:	1e7b      	subs	r3, r7, #1
 800d236:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800d23a:	bf84      	itt	hi
 800d23c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d240:	60a3      	strhi	r3, [r4, #8]
 800d242:	6823      	ldr	r3, [r4, #0]
 800d244:	9200      	str	r2, [sp, #0]
 800d246:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d24a:	bf88      	it	hi
 800d24c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d250:	f104 091c 	add.w	r9, r4, #28
 800d254:	6023      	str	r3, [r4, #0]
 800d256:	bf8c      	ite	hi
 800d258:	197f      	addhi	r7, r7, r5
 800d25a:	2700      	movls	r7, #0
 800d25c:	464b      	mov	r3, r9
 800d25e:	f04f 0800 	mov.w	r8, #0
 800d262:	9301      	str	r3, [sp, #4]
 800d264:	6831      	ldr	r1, [r6, #0]
 800d266:	ab03      	add	r3, sp, #12
 800d268:	2202      	movs	r2, #2
 800d26a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d26e:	7809      	ldrb	r1, [r1, #0]
 800d270:	f7f2 ffb6 	bl	80001e0 <memchr>
 800d274:	9b01      	ldr	r3, [sp, #4]
 800d276:	b328      	cbz	r0, 800d2c4 <_scanf_i+0xb8>
 800d278:	f1b8 0f01 	cmp.w	r8, #1
 800d27c:	d156      	bne.n	800d32c <_scanf_i+0x120>
 800d27e:	6862      	ldr	r2, [r4, #4]
 800d280:	b92a      	cbnz	r2, 800d28e <_scanf_i+0x82>
 800d282:	2208      	movs	r2, #8
 800d284:	6062      	str	r2, [r4, #4]
 800d286:	6822      	ldr	r2, [r4, #0]
 800d288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d28c:	6022      	str	r2, [r4, #0]
 800d28e:	6822      	ldr	r2, [r4, #0]
 800d290:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d294:	6022      	str	r2, [r4, #0]
 800d296:	68a2      	ldr	r2, [r4, #8]
 800d298:	1e51      	subs	r1, r2, #1
 800d29a:	60a1      	str	r1, [r4, #8]
 800d29c:	b192      	cbz	r2, 800d2c4 <_scanf_i+0xb8>
 800d29e:	6832      	ldr	r2, [r6, #0]
 800d2a0:	1c51      	adds	r1, r2, #1
 800d2a2:	6031      	str	r1, [r6, #0]
 800d2a4:	7812      	ldrb	r2, [r2, #0]
 800d2a6:	701a      	strb	r2, [r3, #0]
 800d2a8:	1c5d      	adds	r5, r3, #1
 800d2aa:	6873      	ldr	r3, [r6, #4]
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	6073      	str	r3, [r6, #4]
 800d2b2:	dc06      	bgt.n	800d2c2 <_scanf_i+0xb6>
 800d2b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d2b8:	4631      	mov	r1, r6
 800d2ba:	4658      	mov	r0, fp
 800d2bc:	4798      	blx	r3
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	d176      	bne.n	800d3b0 <_scanf_i+0x1a4>
 800d2c2:	462b      	mov	r3, r5
 800d2c4:	f108 0801 	add.w	r8, r8, #1
 800d2c8:	f1b8 0f03 	cmp.w	r8, #3
 800d2cc:	d1c9      	bne.n	800d262 <_scanf_i+0x56>
 800d2ce:	6862      	ldr	r2, [r4, #4]
 800d2d0:	b90a      	cbnz	r2, 800d2d6 <_scanf_i+0xca>
 800d2d2:	220a      	movs	r2, #10
 800d2d4:	6062      	str	r2, [r4, #4]
 800d2d6:	6862      	ldr	r2, [r4, #4]
 800d2d8:	4945      	ldr	r1, [pc, #276]	; (800d3f0 <_scanf_i+0x1e4>)
 800d2da:	6960      	ldr	r0, [r4, #20]
 800d2dc:	9301      	str	r3, [sp, #4]
 800d2de:	1a89      	subs	r1, r1, r2
 800d2e0:	f000 f888 	bl	800d3f4 <__sccl>
 800d2e4:	9b01      	ldr	r3, [sp, #4]
 800d2e6:	f04f 0800 	mov.w	r8, #0
 800d2ea:	461d      	mov	r5, r3
 800d2ec:	68a3      	ldr	r3, [r4, #8]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d038      	beq.n	800d364 <_scanf_i+0x158>
 800d2f2:	6831      	ldr	r1, [r6, #0]
 800d2f4:	6960      	ldr	r0, [r4, #20]
 800d2f6:	780a      	ldrb	r2, [r1, #0]
 800d2f8:	5c80      	ldrb	r0, [r0, r2]
 800d2fa:	2800      	cmp	r0, #0
 800d2fc:	d032      	beq.n	800d364 <_scanf_i+0x158>
 800d2fe:	2a30      	cmp	r2, #48	; 0x30
 800d300:	6822      	ldr	r2, [r4, #0]
 800d302:	d121      	bne.n	800d348 <_scanf_i+0x13c>
 800d304:	0510      	lsls	r0, r2, #20
 800d306:	d51f      	bpl.n	800d348 <_scanf_i+0x13c>
 800d308:	f108 0801 	add.w	r8, r8, #1
 800d30c:	b117      	cbz	r7, 800d314 <_scanf_i+0x108>
 800d30e:	3301      	adds	r3, #1
 800d310:	3f01      	subs	r7, #1
 800d312:	60a3      	str	r3, [r4, #8]
 800d314:	6873      	ldr	r3, [r6, #4]
 800d316:	3b01      	subs	r3, #1
 800d318:	2b00      	cmp	r3, #0
 800d31a:	6073      	str	r3, [r6, #4]
 800d31c:	dd1b      	ble.n	800d356 <_scanf_i+0x14a>
 800d31e:	6833      	ldr	r3, [r6, #0]
 800d320:	3301      	adds	r3, #1
 800d322:	6033      	str	r3, [r6, #0]
 800d324:	68a3      	ldr	r3, [r4, #8]
 800d326:	3b01      	subs	r3, #1
 800d328:	60a3      	str	r3, [r4, #8]
 800d32a:	e7df      	b.n	800d2ec <_scanf_i+0xe0>
 800d32c:	f1b8 0f02 	cmp.w	r8, #2
 800d330:	d1b1      	bne.n	800d296 <_scanf_i+0x8a>
 800d332:	6822      	ldr	r2, [r4, #0]
 800d334:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d338:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d33c:	d1c2      	bne.n	800d2c4 <_scanf_i+0xb8>
 800d33e:	2110      	movs	r1, #16
 800d340:	6061      	str	r1, [r4, #4]
 800d342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d346:	e7a5      	b.n	800d294 <_scanf_i+0x88>
 800d348:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d34c:	6022      	str	r2, [r4, #0]
 800d34e:	780b      	ldrb	r3, [r1, #0]
 800d350:	702b      	strb	r3, [r5, #0]
 800d352:	3501      	adds	r5, #1
 800d354:	e7de      	b.n	800d314 <_scanf_i+0x108>
 800d356:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d35a:	4631      	mov	r1, r6
 800d35c:	4658      	mov	r0, fp
 800d35e:	4798      	blx	r3
 800d360:	2800      	cmp	r0, #0
 800d362:	d0df      	beq.n	800d324 <_scanf_i+0x118>
 800d364:	6823      	ldr	r3, [r4, #0]
 800d366:	05d9      	lsls	r1, r3, #23
 800d368:	d50c      	bpl.n	800d384 <_scanf_i+0x178>
 800d36a:	454d      	cmp	r5, r9
 800d36c:	d908      	bls.n	800d380 <_scanf_i+0x174>
 800d36e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d372:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d376:	4632      	mov	r2, r6
 800d378:	4658      	mov	r0, fp
 800d37a:	4798      	blx	r3
 800d37c:	1e6f      	subs	r7, r5, #1
 800d37e:	463d      	mov	r5, r7
 800d380:	454d      	cmp	r5, r9
 800d382:	d02c      	beq.n	800d3de <_scanf_i+0x1d2>
 800d384:	6822      	ldr	r2, [r4, #0]
 800d386:	f012 0210 	ands.w	r2, r2, #16
 800d38a:	d11e      	bne.n	800d3ca <_scanf_i+0x1be>
 800d38c:	702a      	strb	r2, [r5, #0]
 800d38e:	6863      	ldr	r3, [r4, #4]
 800d390:	9e00      	ldr	r6, [sp, #0]
 800d392:	4649      	mov	r1, r9
 800d394:	4658      	mov	r0, fp
 800d396:	47b0      	blx	r6
 800d398:	6822      	ldr	r2, [r4, #0]
 800d39a:	f8da 3000 	ldr.w	r3, [sl]
 800d39e:	f012 0f20 	tst.w	r2, #32
 800d3a2:	d008      	beq.n	800d3b6 <_scanf_i+0x1aa>
 800d3a4:	1d1a      	adds	r2, r3, #4
 800d3a6:	f8ca 2000 	str.w	r2, [sl]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	6018      	str	r0, [r3, #0]
 800d3ae:	e009      	b.n	800d3c4 <_scanf_i+0x1b8>
 800d3b0:	f04f 0800 	mov.w	r8, #0
 800d3b4:	e7d6      	b.n	800d364 <_scanf_i+0x158>
 800d3b6:	07d2      	lsls	r2, r2, #31
 800d3b8:	d5f4      	bpl.n	800d3a4 <_scanf_i+0x198>
 800d3ba:	1d1a      	adds	r2, r3, #4
 800d3bc:	f8ca 2000 	str.w	r2, [sl]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	8018      	strh	r0, [r3, #0]
 800d3c4:	68e3      	ldr	r3, [r4, #12]
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	60e3      	str	r3, [r4, #12]
 800d3ca:	eba5 0509 	sub.w	r5, r5, r9
 800d3ce:	44a8      	add	r8, r5
 800d3d0:	6925      	ldr	r5, [r4, #16]
 800d3d2:	4445      	add	r5, r8
 800d3d4:	6125      	str	r5, [r4, #16]
 800d3d6:	2000      	movs	r0, #0
 800d3d8:	b007      	add	sp, #28
 800d3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3de:	2001      	movs	r0, #1
 800d3e0:	e7fa      	b.n	800d3d8 <_scanf_i+0x1cc>
 800d3e2:	bf00      	nop
 800d3e4:	0800ddb0 	.word	0x0800ddb0
 800d3e8:	0800d675 	.word	0x0800d675
 800d3ec:	0800d555 	.word	0x0800d555
 800d3f0:	0800ed6b 	.word	0x0800ed6b

0800d3f4 <__sccl>:
 800d3f4:	b570      	push	{r4, r5, r6, lr}
 800d3f6:	780b      	ldrb	r3, [r1, #0]
 800d3f8:	2b5e      	cmp	r3, #94	; 0x5e
 800d3fa:	bf13      	iteet	ne
 800d3fc:	1c4a      	addne	r2, r1, #1
 800d3fe:	1c8a      	addeq	r2, r1, #2
 800d400:	784b      	ldrbeq	r3, [r1, #1]
 800d402:	2100      	movne	r1, #0
 800d404:	bf08      	it	eq
 800d406:	2101      	moveq	r1, #1
 800d408:	1e44      	subs	r4, r0, #1
 800d40a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800d40e:	f804 1f01 	strb.w	r1, [r4, #1]!
 800d412:	42a5      	cmp	r5, r4
 800d414:	d1fb      	bne.n	800d40e <__sccl+0x1a>
 800d416:	b913      	cbnz	r3, 800d41e <__sccl+0x2a>
 800d418:	3a01      	subs	r2, #1
 800d41a:	4610      	mov	r0, r2
 800d41c:	bd70      	pop	{r4, r5, r6, pc}
 800d41e:	f081 0401 	eor.w	r4, r1, #1
 800d422:	54c4      	strb	r4, [r0, r3]
 800d424:	4611      	mov	r1, r2
 800d426:	780d      	ldrb	r5, [r1, #0]
 800d428:	2d2d      	cmp	r5, #45	; 0x2d
 800d42a:	f101 0201 	add.w	r2, r1, #1
 800d42e:	d006      	beq.n	800d43e <__sccl+0x4a>
 800d430:	2d5d      	cmp	r5, #93	; 0x5d
 800d432:	d0f2      	beq.n	800d41a <__sccl+0x26>
 800d434:	b90d      	cbnz	r5, 800d43a <__sccl+0x46>
 800d436:	460a      	mov	r2, r1
 800d438:	e7ef      	b.n	800d41a <__sccl+0x26>
 800d43a:	462b      	mov	r3, r5
 800d43c:	e7f1      	b.n	800d422 <__sccl+0x2e>
 800d43e:	784e      	ldrb	r6, [r1, #1]
 800d440:	2e5d      	cmp	r6, #93	; 0x5d
 800d442:	d0fa      	beq.n	800d43a <__sccl+0x46>
 800d444:	42b3      	cmp	r3, r6
 800d446:	dcf8      	bgt.n	800d43a <__sccl+0x46>
 800d448:	3102      	adds	r1, #2
 800d44a:	3301      	adds	r3, #1
 800d44c:	429e      	cmp	r6, r3
 800d44e:	54c4      	strb	r4, [r0, r3]
 800d450:	dcfb      	bgt.n	800d44a <__sccl+0x56>
 800d452:	e7e8      	b.n	800d426 <__sccl+0x32>

0800d454 <_strtol_l.isra.0>:
 800d454:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d458:	4680      	mov	r8, r0
 800d45a:	4689      	mov	r9, r1
 800d45c:	4692      	mov	sl, r2
 800d45e:	461f      	mov	r7, r3
 800d460:	468b      	mov	fp, r1
 800d462:	465d      	mov	r5, fp
 800d464:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d466:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d46a:	f000 f950 	bl	800d70e <__locale_ctype_ptr_l>
 800d46e:	4420      	add	r0, r4
 800d470:	7846      	ldrb	r6, [r0, #1]
 800d472:	f016 0608 	ands.w	r6, r6, #8
 800d476:	d10b      	bne.n	800d490 <_strtol_l.isra.0+0x3c>
 800d478:	2c2d      	cmp	r4, #45	; 0x2d
 800d47a:	d10b      	bne.n	800d494 <_strtol_l.isra.0+0x40>
 800d47c:	782c      	ldrb	r4, [r5, #0]
 800d47e:	2601      	movs	r6, #1
 800d480:	f10b 0502 	add.w	r5, fp, #2
 800d484:	b167      	cbz	r7, 800d4a0 <_strtol_l.isra.0+0x4c>
 800d486:	2f10      	cmp	r7, #16
 800d488:	d114      	bne.n	800d4b4 <_strtol_l.isra.0+0x60>
 800d48a:	2c30      	cmp	r4, #48	; 0x30
 800d48c:	d00a      	beq.n	800d4a4 <_strtol_l.isra.0+0x50>
 800d48e:	e011      	b.n	800d4b4 <_strtol_l.isra.0+0x60>
 800d490:	46ab      	mov	fp, r5
 800d492:	e7e6      	b.n	800d462 <_strtol_l.isra.0+0xe>
 800d494:	2c2b      	cmp	r4, #43	; 0x2b
 800d496:	bf04      	itt	eq
 800d498:	782c      	ldrbeq	r4, [r5, #0]
 800d49a:	f10b 0502 	addeq.w	r5, fp, #2
 800d49e:	e7f1      	b.n	800d484 <_strtol_l.isra.0+0x30>
 800d4a0:	2c30      	cmp	r4, #48	; 0x30
 800d4a2:	d127      	bne.n	800d4f4 <_strtol_l.isra.0+0xa0>
 800d4a4:	782b      	ldrb	r3, [r5, #0]
 800d4a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d4aa:	2b58      	cmp	r3, #88	; 0x58
 800d4ac:	d14b      	bne.n	800d546 <_strtol_l.isra.0+0xf2>
 800d4ae:	786c      	ldrb	r4, [r5, #1]
 800d4b0:	2710      	movs	r7, #16
 800d4b2:	3502      	adds	r5, #2
 800d4b4:	2e00      	cmp	r6, #0
 800d4b6:	bf0c      	ite	eq
 800d4b8:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800d4bc:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	fbb1 fef7 	udiv	lr, r1, r7
 800d4c6:	4610      	mov	r0, r2
 800d4c8:	fb07 1c1e 	mls	ip, r7, lr, r1
 800d4cc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800d4d0:	2b09      	cmp	r3, #9
 800d4d2:	d811      	bhi.n	800d4f8 <_strtol_l.isra.0+0xa4>
 800d4d4:	461c      	mov	r4, r3
 800d4d6:	42a7      	cmp	r7, r4
 800d4d8:	dd1d      	ble.n	800d516 <_strtol_l.isra.0+0xc2>
 800d4da:	1c53      	adds	r3, r2, #1
 800d4dc:	d007      	beq.n	800d4ee <_strtol_l.isra.0+0x9a>
 800d4de:	4586      	cmp	lr, r0
 800d4e0:	d316      	bcc.n	800d510 <_strtol_l.isra.0+0xbc>
 800d4e2:	d101      	bne.n	800d4e8 <_strtol_l.isra.0+0x94>
 800d4e4:	45a4      	cmp	ip, r4
 800d4e6:	db13      	blt.n	800d510 <_strtol_l.isra.0+0xbc>
 800d4e8:	fb00 4007 	mla	r0, r0, r7, r4
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4f2:	e7eb      	b.n	800d4cc <_strtol_l.isra.0+0x78>
 800d4f4:	270a      	movs	r7, #10
 800d4f6:	e7dd      	b.n	800d4b4 <_strtol_l.isra.0+0x60>
 800d4f8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800d4fc:	2b19      	cmp	r3, #25
 800d4fe:	d801      	bhi.n	800d504 <_strtol_l.isra.0+0xb0>
 800d500:	3c37      	subs	r4, #55	; 0x37
 800d502:	e7e8      	b.n	800d4d6 <_strtol_l.isra.0+0x82>
 800d504:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800d508:	2b19      	cmp	r3, #25
 800d50a:	d804      	bhi.n	800d516 <_strtol_l.isra.0+0xc2>
 800d50c:	3c57      	subs	r4, #87	; 0x57
 800d50e:	e7e2      	b.n	800d4d6 <_strtol_l.isra.0+0x82>
 800d510:	f04f 32ff 	mov.w	r2, #4294967295
 800d514:	e7eb      	b.n	800d4ee <_strtol_l.isra.0+0x9a>
 800d516:	1c53      	adds	r3, r2, #1
 800d518:	d108      	bne.n	800d52c <_strtol_l.isra.0+0xd8>
 800d51a:	2322      	movs	r3, #34	; 0x22
 800d51c:	f8c8 3000 	str.w	r3, [r8]
 800d520:	4608      	mov	r0, r1
 800d522:	f1ba 0f00 	cmp.w	sl, #0
 800d526:	d107      	bne.n	800d538 <_strtol_l.isra.0+0xe4>
 800d528:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d52c:	b106      	cbz	r6, 800d530 <_strtol_l.isra.0+0xdc>
 800d52e:	4240      	negs	r0, r0
 800d530:	f1ba 0f00 	cmp.w	sl, #0
 800d534:	d00c      	beq.n	800d550 <_strtol_l.isra.0+0xfc>
 800d536:	b122      	cbz	r2, 800d542 <_strtol_l.isra.0+0xee>
 800d538:	3d01      	subs	r5, #1
 800d53a:	f8ca 5000 	str.w	r5, [sl]
 800d53e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d542:	464d      	mov	r5, r9
 800d544:	e7f9      	b.n	800d53a <_strtol_l.isra.0+0xe6>
 800d546:	2430      	movs	r4, #48	; 0x30
 800d548:	2f00      	cmp	r7, #0
 800d54a:	d1b3      	bne.n	800d4b4 <_strtol_l.isra.0+0x60>
 800d54c:	2708      	movs	r7, #8
 800d54e:	e7b1      	b.n	800d4b4 <_strtol_l.isra.0+0x60>
 800d550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d554 <_strtol_r>:
 800d554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d556:	4c06      	ldr	r4, [pc, #24]	; (800d570 <_strtol_r+0x1c>)
 800d558:	4d06      	ldr	r5, [pc, #24]	; (800d574 <_strtol_r+0x20>)
 800d55a:	6824      	ldr	r4, [r4, #0]
 800d55c:	6a24      	ldr	r4, [r4, #32]
 800d55e:	2c00      	cmp	r4, #0
 800d560:	bf08      	it	eq
 800d562:	462c      	moveq	r4, r5
 800d564:	9400      	str	r4, [sp, #0]
 800d566:	f7ff ff75 	bl	800d454 <_strtol_l.isra.0>
 800d56a:	b003      	add	sp, #12
 800d56c:	bd30      	pop	{r4, r5, pc}
 800d56e:	bf00      	nop
 800d570:	200002e8 	.word	0x200002e8
 800d574:	2000034c 	.word	0x2000034c

0800d578 <_strtoul_l.isra.0>:
 800d578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d57c:	4680      	mov	r8, r0
 800d57e:	4689      	mov	r9, r1
 800d580:	4692      	mov	sl, r2
 800d582:	461e      	mov	r6, r3
 800d584:	460f      	mov	r7, r1
 800d586:	463d      	mov	r5, r7
 800d588:	9808      	ldr	r0, [sp, #32]
 800d58a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d58e:	f000 f8be 	bl	800d70e <__locale_ctype_ptr_l>
 800d592:	4420      	add	r0, r4
 800d594:	7843      	ldrb	r3, [r0, #1]
 800d596:	f013 0308 	ands.w	r3, r3, #8
 800d59a:	d10a      	bne.n	800d5b2 <_strtoul_l.isra.0+0x3a>
 800d59c:	2c2d      	cmp	r4, #45	; 0x2d
 800d59e:	d10a      	bne.n	800d5b6 <_strtoul_l.isra.0+0x3e>
 800d5a0:	782c      	ldrb	r4, [r5, #0]
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	1cbd      	adds	r5, r7, #2
 800d5a6:	b15e      	cbz	r6, 800d5c0 <_strtoul_l.isra.0+0x48>
 800d5a8:	2e10      	cmp	r6, #16
 800d5aa:	d113      	bne.n	800d5d4 <_strtoul_l.isra.0+0x5c>
 800d5ac:	2c30      	cmp	r4, #48	; 0x30
 800d5ae:	d009      	beq.n	800d5c4 <_strtoul_l.isra.0+0x4c>
 800d5b0:	e010      	b.n	800d5d4 <_strtoul_l.isra.0+0x5c>
 800d5b2:	462f      	mov	r7, r5
 800d5b4:	e7e7      	b.n	800d586 <_strtoul_l.isra.0+0xe>
 800d5b6:	2c2b      	cmp	r4, #43	; 0x2b
 800d5b8:	bf04      	itt	eq
 800d5ba:	782c      	ldrbeq	r4, [r5, #0]
 800d5bc:	1cbd      	addeq	r5, r7, #2
 800d5be:	e7f2      	b.n	800d5a6 <_strtoul_l.isra.0+0x2e>
 800d5c0:	2c30      	cmp	r4, #48	; 0x30
 800d5c2:	d125      	bne.n	800d610 <_strtoul_l.isra.0+0x98>
 800d5c4:	782a      	ldrb	r2, [r5, #0]
 800d5c6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d5ca:	2a58      	cmp	r2, #88	; 0x58
 800d5cc:	d14a      	bne.n	800d664 <_strtoul_l.isra.0+0xec>
 800d5ce:	786c      	ldrb	r4, [r5, #1]
 800d5d0:	2610      	movs	r6, #16
 800d5d2:	3502      	adds	r5, #2
 800d5d4:	f04f 31ff 	mov.w	r1, #4294967295
 800d5d8:	2700      	movs	r7, #0
 800d5da:	fbb1 f1f6 	udiv	r1, r1, r6
 800d5de:	fb06 fe01 	mul.w	lr, r6, r1
 800d5e2:	ea6f 0e0e 	mvn.w	lr, lr
 800d5e6:	4638      	mov	r0, r7
 800d5e8:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800d5ec:	2a09      	cmp	r2, #9
 800d5ee:	d811      	bhi.n	800d614 <_strtoul_l.isra.0+0x9c>
 800d5f0:	4614      	mov	r4, r2
 800d5f2:	42a6      	cmp	r6, r4
 800d5f4:	dd1d      	ble.n	800d632 <_strtoul_l.isra.0+0xba>
 800d5f6:	2f00      	cmp	r7, #0
 800d5f8:	db18      	blt.n	800d62c <_strtoul_l.isra.0+0xb4>
 800d5fa:	4281      	cmp	r1, r0
 800d5fc:	d316      	bcc.n	800d62c <_strtoul_l.isra.0+0xb4>
 800d5fe:	d101      	bne.n	800d604 <_strtoul_l.isra.0+0x8c>
 800d600:	45a6      	cmp	lr, r4
 800d602:	db13      	blt.n	800d62c <_strtoul_l.isra.0+0xb4>
 800d604:	fb00 4006 	mla	r0, r0, r6, r4
 800d608:	2701      	movs	r7, #1
 800d60a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d60e:	e7eb      	b.n	800d5e8 <_strtoul_l.isra.0+0x70>
 800d610:	260a      	movs	r6, #10
 800d612:	e7df      	b.n	800d5d4 <_strtoul_l.isra.0+0x5c>
 800d614:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800d618:	2a19      	cmp	r2, #25
 800d61a:	d801      	bhi.n	800d620 <_strtoul_l.isra.0+0xa8>
 800d61c:	3c37      	subs	r4, #55	; 0x37
 800d61e:	e7e8      	b.n	800d5f2 <_strtoul_l.isra.0+0x7a>
 800d620:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800d624:	2a19      	cmp	r2, #25
 800d626:	d804      	bhi.n	800d632 <_strtoul_l.isra.0+0xba>
 800d628:	3c57      	subs	r4, #87	; 0x57
 800d62a:	e7e2      	b.n	800d5f2 <_strtoul_l.isra.0+0x7a>
 800d62c:	f04f 37ff 	mov.w	r7, #4294967295
 800d630:	e7eb      	b.n	800d60a <_strtoul_l.isra.0+0x92>
 800d632:	2f00      	cmp	r7, #0
 800d634:	da09      	bge.n	800d64a <_strtoul_l.isra.0+0xd2>
 800d636:	2322      	movs	r3, #34	; 0x22
 800d638:	f8c8 3000 	str.w	r3, [r8]
 800d63c:	f04f 30ff 	mov.w	r0, #4294967295
 800d640:	f1ba 0f00 	cmp.w	sl, #0
 800d644:	d107      	bne.n	800d656 <_strtoul_l.isra.0+0xde>
 800d646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d64a:	b103      	cbz	r3, 800d64e <_strtoul_l.isra.0+0xd6>
 800d64c:	4240      	negs	r0, r0
 800d64e:	f1ba 0f00 	cmp.w	sl, #0
 800d652:	d00c      	beq.n	800d66e <_strtoul_l.isra.0+0xf6>
 800d654:	b127      	cbz	r7, 800d660 <_strtoul_l.isra.0+0xe8>
 800d656:	3d01      	subs	r5, #1
 800d658:	f8ca 5000 	str.w	r5, [sl]
 800d65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d660:	464d      	mov	r5, r9
 800d662:	e7f9      	b.n	800d658 <_strtoul_l.isra.0+0xe0>
 800d664:	2430      	movs	r4, #48	; 0x30
 800d666:	2e00      	cmp	r6, #0
 800d668:	d1b4      	bne.n	800d5d4 <_strtoul_l.isra.0+0x5c>
 800d66a:	2608      	movs	r6, #8
 800d66c:	e7b2      	b.n	800d5d4 <_strtoul_l.isra.0+0x5c>
 800d66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800d674 <_strtoul_r>:
 800d674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d676:	4c06      	ldr	r4, [pc, #24]	; (800d690 <_strtoul_r+0x1c>)
 800d678:	4d06      	ldr	r5, [pc, #24]	; (800d694 <_strtoul_r+0x20>)
 800d67a:	6824      	ldr	r4, [r4, #0]
 800d67c:	6a24      	ldr	r4, [r4, #32]
 800d67e:	2c00      	cmp	r4, #0
 800d680:	bf08      	it	eq
 800d682:	462c      	moveq	r4, r5
 800d684:	9400      	str	r4, [sp, #0]
 800d686:	f7ff ff77 	bl	800d578 <_strtoul_l.isra.0>
 800d68a:	b003      	add	sp, #12
 800d68c:	bd30      	pop	{r4, r5, pc}
 800d68e:	bf00      	nop
 800d690:	200002e8 	.word	0x200002e8
 800d694:	2000034c 	.word	0x2000034c

0800d698 <__submore>:
 800d698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d69c:	460c      	mov	r4, r1
 800d69e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d6a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6a4:	4299      	cmp	r1, r3
 800d6a6:	d11e      	bne.n	800d6e6 <__submore+0x4e>
 800d6a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d6ac:	f7ff fadc 	bl	800cc68 <_malloc_r>
 800d6b0:	b918      	cbnz	r0, 800d6ba <__submore+0x22>
 800d6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6be:	63a3      	str	r3, [r4, #56]	; 0x38
 800d6c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d6c4:	6360      	str	r0, [r4, #52]	; 0x34
 800d6c6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d6ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d6ce:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d6d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d6d6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d6da:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d6de:	6020      	str	r0, [r4, #0]
 800d6e0:	2000      	movs	r0, #0
 800d6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6e6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d6e8:	0077      	lsls	r7, r6, #1
 800d6ea:	463a      	mov	r2, r7
 800d6ec:	f000 f832 	bl	800d754 <_realloc_r>
 800d6f0:	4605      	mov	r5, r0
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	d0dd      	beq.n	800d6b2 <__submore+0x1a>
 800d6f6:	eb00 0806 	add.w	r8, r0, r6
 800d6fa:	4601      	mov	r1, r0
 800d6fc:	4632      	mov	r2, r6
 800d6fe:	4640      	mov	r0, r8
 800d700:	f7ff fa51 	bl	800cba6 <memcpy>
 800d704:	f8c4 8000 	str.w	r8, [r4]
 800d708:	6365      	str	r5, [r4, #52]	; 0x34
 800d70a:	63a7      	str	r7, [r4, #56]	; 0x38
 800d70c:	e7e8      	b.n	800d6e0 <__submore+0x48>

0800d70e <__locale_ctype_ptr_l>:
 800d70e:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800d712:	4770      	bx	lr

0800d714 <__locale_ctype_ptr>:
 800d714:	4b04      	ldr	r3, [pc, #16]	; (800d728 <__locale_ctype_ptr+0x14>)
 800d716:	4a05      	ldr	r2, [pc, #20]	; (800d72c <__locale_ctype_ptr+0x18>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	6a1b      	ldr	r3, [r3, #32]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	bf08      	it	eq
 800d720:	4613      	moveq	r3, r2
 800d722:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800d726:	4770      	bx	lr
 800d728:	200002e8 	.word	0x200002e8
 800d72c:	2000034c 	.word	0x2000034c

0800d730 <__ascii_mbtowc>:
 800d730:	b082      	sub	sp, #8
 800d732:	b901      	cbnz	r1, 800d736 <__ascii_mbtowc+0x6>
 800d734:	a901      	add	r1, sp, #4
 800d736:	b142      	cbz	r2, 800d74a <__ascii_mbtowc+0x1a>
 800d738:	b14b      	cbz	r3, 800d74e <__ascii_mbtowc+0x1e>
 800d73a:	7813      	ldrb	r3, [r2, #0]
 800d73c:	600b      	str	r3, [r1, #0]
 800d73e:	7812      	ldrb	r2, [r2, #0]
 800d740:	1c10      	adds	r0, r2, #0
 800d742:	bf18      	it	ne
 800d744:	2001      	movne	r0, #1
 800d746:	b002      	add	sp, #8
 800d748:	4770      	bx	lr
 800d74a:	4610      	mov	r0, r2
 800d74c:	e7fb      	b.n	800d746 <__ascii_mbtowc+0x16>
 800d74e:	f06f 0001 	mvn.w	r0, #1
 800d752:	e7f8      	b.n	800d746 <__ascii_mbtowc+0x16>

0800d754 <_realloc_r>:
 800d754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d756:	4607      	mov	r7, r0
 800d758:	4614      	mov	r4, r2
 800d75a:	460e      	mov	r6, r1
 800d75c:	b921      	cbnz	r1, 800d768 <_realloc_r+0x14>
 800d75e:	4611      	mov	r1, r2
 800d760:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d764:	f7ff ba80 	b.w	800cc68 <_malloc_r>
 800d768:	b922      	cbnz	r2, 800d774 <_realloc_r+0x20>
 800d76a:	f7ff fa2f 	bl	800cbcc <_free_r>
 800d76e:	4625      	mov	r5, r4
 800d770:	4628      	mov	r0, r5
 800d772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d774:	f000 f821 	bl	800d7ba <_malloc_usable_size_r>
 800d778:	4284      	cmp	r4, r0
 800d77a:	d90f      	bls.n	800d79c <_realloc_r+0x48>
 800d77c:	4621      	mov	r1, r4
 800d77e:	4638      	mov	r0, r7
 800d780:	f7ff fa72 	bl	800cc68 <_malloc_r>
 800d784:	4605      	mov	r5, r0
 800d786:	2800      	cmp	r0, #0
 800d788:	d0f2      	beq.n	800d770 <_realloc_r+0x1c>
 800d78a:	4631      	mov	r1, r6
 800d78c:	4622      	mov	r2, r4
 800d78e:	f7ff fa0a 	bl	800cba6 <memcpy>
 800d792:	4631      	mov	r1, r6
 800d794:	4638      	mov	r0, r7
 800d796:	f7ff fa19 	bl	800cbcc <_free_r>
 800d79a:	e7e9      	b.n	800d770 <_realloc_r+0x1c>
 800d79c:	4635      	mov	r5, r6
 800d79e:	e7e7      	b.n	800d770 <_realloc_r+0x1c>

0800d7a0 <__ascii_wctomb>:
 800d7a0:	b149      	cbz	r1, 800d7b6 <__ascii_wctomb+0x16>
 800d7a2:	2aff      	cmp	r2, #255	; 0xff
 800d7a4:	bf85      	ittet	hi
 800d7a6:	238a      	movhi	r3, #138	; 0x8a
 800d7a8:	6003      	strhi	r3, [r0, #0]
 800d7aa:	700a      	strbls	r2, [r1, #0]
 800d7ac:	f04f 30ff 	movhi.w	r0, #4294967295
 800d7b0:	bf98      	it	ls
 800d7b2:	2001      	movls	r0, #1
 800d7b4:	4770      	bx	lr
 800d7b6:	4608      	mov	r0, r1
 800d7b8:	4770      	bx	lr

0800d7ba <_malloc_usable_size_r>:
 800d7ba:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	f1a0 0004 	sub.w	r0, r0, #4
 800d7c4:	bfbc      	itt	lt
 800d7c6:	580b      	ldrlt	r3, [r1, r0]
 800d7c8:	18c0      	addlt	r0, r0, r3
 800d7ca:	4770      	bx	lr
 800d7cc:	0000      	movs	r0, r0
	...

0800d7d0 <atan>:
 800d7d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d4:	ec55 4b10 	vmov	r4, r5, d0
 800d7d8:	4bc7      	ldr	r3, [pc, #796]	; (800daf8 <atan+0x328>)
 800d7da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d7de:	429e      	cmp	r6, r3
 800d7e0:	46ab      	mov	fp, r5
 800d7e2:	dd18      	ble.n	800d816 <atan+0x46>
 800d7e4:	4ac5      	ldr	r2, [pc, #788]	; (800dafc <atan+0x32c>)
 800d7e6:	4296      	cmp	r6, r2
 800d7e8:	dc01      	bgt.n	800d7ee <atan+0x1e>
 800d7ea:	d109      	bne.n	800d800 <atan+0x30>
 800d7ec:	b144      	cbz	r4, 800d800 <atan+0x30>
 800d7ee:	4622      	mov	r2, r4
 800d7f0:	462b      	mov	r3, r5
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	4629      	mov	r1, r5
 800d7f6:	f7f2 fd49 	bl	800028c <__adddf3>
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	460d      	mov	r5, r1
 800d7fe:	e006      	b.n	800d80e <atan+0x3e>
 800d800:	f1bb 0f00 	cmp.w	fp, #0
 800d804:	f300 813a 	bgt.w	800da7c <atan+0x2ac>
 800d808:	a59f      	add	r5, pc, #636	; (adr r5, 800da88 <atan+0x2b8>)
 800d80a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d80e:	ec45 4b10 	vmov	d0, r4, r5
 800d812:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d816:	4bba      	ldr	r3, [pc, #744]	; (800db00 <atan+0x330>)
 800d818:	429e      	cmp	r6, r3
 800d81a:	dc14      	bgt.n	800d846 <atan+0x76>
 800d81c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d820:	429e      	cmp	r6, r3
 800d822:	dc0d      	bgt.n	800d840 <atan+0x70>
 800d824:	a39a      	add	r3, pc, #616	; (adr r3, 800da90 <atan+0x2c0>)
 800d826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d82a:	ee10 0a10 	vmov	r0, s0
 800d82e:	4629      	mov	r1, r5
 800d830:	f7f2 fd2c 	bl	800028c <__adddf3>
 800d834:	2200      	movs	r2, #0
 800d836:	4bb3      	ldr	r3, [pc, #716]	; (800db04 <atan+0x334>)
 800d838:	f7f3 f96a 	bl	8000b10 <__aeabi_dcmpgt>
 800d83c:	2800      	cmp	r0, #0
 800d83e:	d1e6      	bne.n	800d80e <atan+0x3e>
 800d840:	f04f 3aff 	mov.w	sl, #4294967295
 800d844:	e02b      	b.n	800d89e <atan+0xce>
 800d846:	f000 f96b 	bl	800db20 <fabs>
 800d84a:	4baf      	ldr	r3, [pc, #700]	; (800db08 <atan+0x338>)
 800d84c:	429e      	cmp	r6, r3
 800d84e:	ec55 4b10 	vmov	r4, r5, d0
 800d852:	f300 80bf 	bgt.w	800d9d4 <atan+0x204>
 800d856:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d85a:	429e      	cmp	r6, r3
 800d85c:	f300 80a0 	bgt.w	800d9a0 <atan+0x1d0>
 800d860:	ee10 2a10 	vmov	r2, s0
 800d864:	ee10 0a10 	vmov	r0, s0
 800d868:	462b      	mov	r3, r5
 800d86a:	4629      	mov	r1, r5
 800d86c:	f7f2 fd0e 	bl	800028c <__adddf3>
 800d870:	2200      	movs	r2, #0
 800d872:	4ba4      	ldr	r3, [pc, #656]	; (800db04 <atan+0x334>)
 800d874:	f7f2 fd08 	bl	8000288 <__aeabi_dsub>
 800d878:	2200      	movs	r2, #0
 800d87a:	4606      	mov	r6, r0
 800d87c:	460f      	mov	r7, r1
 800d87e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d882:	4620      	mov	r0, r4
 800d884:	4629      	mov	r1, r5
 800d886:	f7f2 fd01 	bl	800028c <__adddf3>
 800d88a:	4602      	mov	r2, r0
 800d88c:	460b      	mov	r3, r1
 800d88e:	4630      	mov	r0, r6
 800d890:	4639      	mov	r1, r7
 800d892:	f7f2 ffd7 	bl	8000844 <__aeabi_ddiv>
 800d896:	f04f 0a00 	mov.w	sl, #0
 800d89a:	4604      	mov	r4, r0
 800d89c:	460d      	mov	r5, r1
 800d89e:	4622      	mov	r2, r4
 800d8a0:	462b      	mov	r3, r5
 800d8a2:	4620      	mov	r0, r4
 800d8a4:	4629      	mov	r1, r5
 800d8a6:	f7f2 fea3 	bl	80005f0 <__aeabi_dmul>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	4680      	mov	r8, r0
 800d8b0:	4689      	mov	r9, r1
 800d8b2:	f7f2 fe9d 	bl	80005f0 <__aeabi_dmul>
 800d8b6:	a378      	add	r3, pc, #480	; (adr r3, 800da98 <atan+0x2c8>)
 800d8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8bc:	4606      	mov	r6, r0
 800d8be:	460f      	mov	r7, r1
 800d8c0:	f7f2 fe96 	bl	80005f0 <__aeabi_dmul>
 800d8c4:	a376      	add	r3, pc, #472	; (adr r3, 800daa0 <atan+0x2d0>)
 800d8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ca:	f7f2 fcdf 	bl	800028c <__adddf3>
 800d8ce:	4632      	mov	r2, r6
 800d8d0:	463b      	mov	r3, r7
 800d8d2:	f7f2 fe8d 	bl	80005f0 <__aeabi_dmul>
 800d8d6:	a374      	add	r3, pc, #464	; (adr r3, 800daa8 <atan+0x2d8>)
 800d8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8dc:	f7f2 fcd6 	bl	800028c <__adddf3>
 800d8e0:	4632      	mov	r2, r6
 800d8e2:	463b      	mov	r3, r7
 800d8e4:	f7f2 fe84 	bl	80005f0 <__aeabi_dmul>
 800d8e8:	a371      	add	r3, pc, #452	; (adr r3, 800dab0 <atan+0x2e0>)
 800d8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ee:	f7f2 fccd 	bl	800028c <__adddf3>
 800d8f2:	4632      	mov	r2, r6
 800d8f4:	463b      	mov	r3, r7
 800d8f6:	f7f2 fe7b 	bl	80005f0 <__aeabi_dmul>
 800d8fa:	a36f      	add	r3, pc, #444	; (adr r3, 800dab8 <atan+0x2e8>)
 800d8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d900:	f7f2 fcc4 	bl	800028c <__adddf3>
 800d904:	4632      	mov	r2, r6
 800d906:	463b      	mov	r3, r7
 800d908:	f7f2 fe72 	bl	80005f0 <__aeabi_dmul>
 800d90c:	a36c      	add	r3, pc, #432	; (adr r3, 800dac0 <atan+0x2f0>)
 800d90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d912:	f7f2 fcbb 	bl	800028c <__adddf3>
 800d916:	4642      	mov	r2, r8
 800d918:	464b      	mov	r3, r9
 800d91a:	f7f2 fe69 	bl	80005f0 <__aeabi_dmul>
 800d91e:	a36a      	add	r3, pc, #424	; (adr r3, 800dac8 <atan+0x2f8>)
 800d920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d924:	4680      	mov	r8, r0
 800d926:	4689      	mov	r9, r1
 800d928:	4630      	mov	r0, r6
 800d92a:	4639      	mov	r1, r7
 800d92c:	f7f2 fe60 	bl	80005f0 <__aeabi_dmul>
 800d930:	a367      	add	r3, pc, #412	; (adr r3, 800dad0 <atan+0x300>)
 800d932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d936:	f7f2 fca7 	bl	8000288 <__aeabi_dsub>
 800d93a:	4632      	mov	r2, r6
 800d93c:	463b      	mov	r3, r7
 800d93e:	f7f2 fe57 	bl	80005f0 <__aeabi_dmul>
 800d942:	a365      	add	r3, pc, #404	; (adr r3, 800dad8 <atan+0x308>)
 800d944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d948:	f7f2 fc9e 	bl	8000288 <__aeabi_dsub>
 800d94c:	4632      	mov	r2, r6
 800d94e:	463b      	mov	r3, r7
 800d950:	f7f2 fe4e 	bl	80005f0 <__aeabi_dmul>
 800d954:	a362      	add	r3, pc, #392	; (adr r3, 800dae0 <atan+0x310>)
 800d956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95a:	f7f2 fc95 	bl	8000288 <__aeabi_dsub>
 800d95e:	4632      	mov	r2, r6
 800d960:	463b      	mov	r3, r7
 800d962:	f7f2 fe45 	bl	80005f0 <__aeabi_dmul>
 800d966:	a360      	add	r3, pc, #384	; (adr r3, 800dae8 <atan+0x318>)
 800d968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96c:	f7f2 fc8c 	bl	8000288 <__aeabi_dsub>
 800d970:	4632      	mov	r2, r6
 800d972:	463b      	mov	r3, r7
 800d974:	f7f2 fe3c 	bl	80005f0 <__aeabi_dmul>
 800d978:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d97c:	4602      	mov	r2, r0
 800d97e:	460b      	mov	r3, r1
 800d980:	d155      	bne.n	800da2e <atan+0x25e>
 800d982:	4640      	mov	r0, r8
 800d984:	4649      	mov	r1, r9
 800d986:	f7f2 fc81 	bl	800028c <__adddf3>
 800d98a:	4622      	mov	r2, r4
 800d98c:	462b      	mov	r3, r5
 800d98e:	f7f2 fe2f 	bl	80005f0 <__aeabi_dmul>
 800d992:	4602      	mov	r2, r0
 800d994:	460b      	mov	r3, r1
 800d996:	4620      	mov	r0, r4
 800d998:	4629      	mov	r1, r5
 800d99a:	f7f2 fc75 	bl	8000288 <__aeabi_dsub>
 800d99e:	e72c      	b.n	800d7fa <atan+0x2a>
 800d9a0:	ee10 0a10 	vmov	r0, s0
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	4b57      	ldr	r3, [pc, #348]	; (800db04 <atan+0x334>)
 800d9a8:	4629      	mov	r1, r5
 800d9aa:	f7f2 fc6d 	bl	8000288 <__aeabi_dsub>
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	4606      	mov	r6, r0
 800d9b2:	460f      	mov	r7, r1
 800d9b4:	4b53      	ldr	r3, [pc, #332]	; (800db04 <atan+0x334>)
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	4629      	mov	r1, r5
 800d9ba:	f7f2 fc67 	bl	800028c <__adddf3>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	4630      	mov	r0, r6
 800d9c4:	4639      	mov	r1, r7
 800d9c6:	f7f2 ff3d 	bl	8000844 <__aeabi_ddiv>
 800d9ca:	f04f 0a01 	mov.w	sl, #1
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	460d      	mov	r5, r1
 800d9d2:	e764      	b.n	800d89e <atan+0xce>
 800d9d4:	4b4d      	ldr	r3, [pc, #308]	; (800db0c <atan+0x33c>)
 800d9d6:	429e      	cmp	r6, r3
 800d9d8:	dc1d      	bgt.n	800da16 <atan+0x246>
 800d9da:	ee10 0a10 	vmov	r0, s0
 800d9de:	2200      	movs	r2, #0
 800d9e0:	4b4b      	ldr	r3, [pc, #300]	; (800db10 <atan+0x340>)
 800d9e2:	4629      	mov	r1, r5
 800d9e4:	f7f2 fc50 	bl	8000288 <__aeabi_dsub>
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	4606      	mov	r6, r0
 800d9ec:	460f      	mov	r7, r1
 800d9ee:	4b48      	ldr	r3, [pc, #288]	; (800db10 <atan+0x340>)
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	4629      	mov	r1, r5
 800d9f4:	f7f2 fdfc 	bl	80005f0 <__aeabi_dmul>
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	4b42      	ldr	r3, [pc, #264]	; (800db04 <atan+0x334>)
 800d9fc:	f7f2 fc46 	bl	800028c <__adddf3>
 800da00:	4602      	mov	r2, r0
 800da02:	460b      	mov	r3, r1
 800da04:	4630      	mov	r0, r6
 800da06:	4639      	mov	r1, r7
 800da08:	f7f2 ff1c 	bl	8000844 <__aeabi_ddiv>
 800da0c:	f04f 0a02 	mov.w	sl, #2
 800da10:	4604      	mov	r4, r0
 800da12:	460d      	mov	r5, r1
 800da14:	e743      	b.n	800d89e <atan+0xce>
 800da16:	462b      	mov	r3, r5
 800da18:	ee10 2a10 	vmov	r2, s0
 800da1c:	2000      	movs	r0, #0
 800da1e:	493d      	ldr	r1, [pc, #244]	; (800db14 <atan+0x344>)
 800da20:	f7f2 ff10 	bl	8000844 <__aeabi_ddiv>
 800da24:	f04f 0a03 	mov.w	sl, #3
 800da28:	4604      	mov	r4, r0
 800da2a:	460d      	mov	r5, r1
 800da2c:	e737      	b.n	800d89e <atan+0xce>
 800da2e:	4640      	mov	r0, r8
 800da30:	4649      	mov	r1, r9
 800da32:	f7f2 fc2b 	bl	800028c <__adddf3>
 800da36:	4622      	mov	r2, r4
 800da38:	462b      	mov	r3, r5
 800da3a:	f7f2 fdd9 	bl	80005f0 <__aeabi_dmul>
 800da3e:	4e36      	ldr	r6, [pc, #216]	; (800db18 <atan+0x348>)
 800da40:	4b36      	ldr	r3, [pc, #216]	; (800db1c <atan+0x34c>)
 800da42:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800da46:	4456      	add	r6, sl
 800da48:	449a      	add	sl, r3
 800da4a:	e9da 2300 	ldrd	r2, r3, [sl]
 800da4e:	f7f2 fc1b 	bl	8000288 <__aeabi_dsub>
 800da52:	4622      	mov	r2, r4
 800da54:	462b      	mov	r3, r5
 800da56:	f7f2 fc17 	bl	8000288 <__aeabi_dsub>
 800da5a:	4602      	mov	r2, r0
 800da5c:	460b      	mov	r3, r1
 800da5e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800da62:	f7f2 fc11 	bl	8000288 <__aeabi_dsub>
 800da66:	f1bb 0f00 	cmp.w	fp, #0
 800da6a:	4604      	mov	r4, r0
 800da6c:	460d      	mov	r5, r1
 800da6e:	f6bf aece 	bge.w	800d80e <atan+0x3e>
 800da72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da76:	4604      	mov	r4, r0
 800da78:	461d      	mov	r5, r3
 800da7a:	e6c8      	b.n	800d80e <atan+0x3e>
 800da7c:	a51c      	add	r5, pc, #112	; (adr r5, 800daf0 <atan+0x320>)
 800da7e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800da82:	e6c4      	b.n	800d80e <atan+0x3e>
 800da84:	f3af 8000 	nop.w
 800da88:	54442d18 	.word	0x54442d18
 800da8c:	bff921fb 	.word	0xbff921fb
 800da90:	8800759c 	.word	0x8800759c
 800da94:	7e37e43c 	.word	0x7e37e43c
 800da98:	e322da11 	.word	0xe322da11
 800da9c:	3f90ad3a 	.word	0x3f90ad3a
 800daa0:	24760deb 	.word	0x24760deb
 800daa4:	3fa97b4b 	.word	0x3fa97b4b
 800daa8:	a0d03d51 	.word	0xa0d03d51
 800daac:	3fb10d66 	.word	0x3fb10d66
 800dab0:	c54c206e 	.word	0xc54c206e
 800dab4:	3fb745cd 	.word	0x3fb745cd
 800dab8:	920083ff 	.word	0x920083ff
 800dabc:	3fc24924 	.word	0x3fc24924
 800dac0:	5555550d 	.word	0x5555550d
 800dac4:	3fd55555 	.word	0x3fd55555
 800dac8:	2c6a6c2f 	.word	0x2c6a6c2f
 800dacc:	bfa2b444 	.word	0xbfa2b444
 800dad0:	52defd9a 	.word	0x52defd9a
 800dad4:	3fadde2d 	.word	0x3fadde2d
 800dad8:	af749a6d 	.word	0xaf749a6d
 800dadc:	3fb3b0f2 	.word	0x3fb3b0f2
 800dae0:	fe231671 	.word	0xfe231671
 800dae4:	3fbc71c6 	.word	0x3fbc71c6
 800dae8:	9998ebc4 	.word	0x9998ebc4
 800daec:	3fc99999 	.word	0x3fc99999
 800daf0:	54442d18 	.word	0x54442d18
 800daf4:	3ff921fb 	.word	0x3ff921fb
 800daf8:	440fffff 	.word	0x440fffff
 800dafc:	7ff00000 	.word	0x7ff00000
 800db00:	3fdbffff 	.word	0x3fdbffff
 800db04:	3ff00000 	.word	0x3ff00000
 800db08:	3ff2ffff 	.word	0x3ff2ffff
 800db0c:	40037fff 	.word	0x40037fff
 800db10:	3ff80000 	.word	0x3ff80000
 800db14:	bff00000 	.word	0xbff00000
 800db18:	0800eee8 	.word	0x0800eee8
 800db1c:	0800ef08 	.word	0x0800ef08

0800db20 <fabs>:
 800db20:	ec53 2b10 	vmov	r2, r3, d0
 800db24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db28:	ec43 2b10 	vmov	d0, r2, r3
 800db2c:	4770      	bx	lr
	...

0800db30 <sqrt>:
 800db30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db34:	ed2d 8b02 	vpush	{d8}
 800db38:	b08b      	sub	sp, #44	; 0x2c
 800db3a:	ec55 4b10 	vmov	r4, r5, d0
 800db3e:	f000 f851 	bl	800dbe4 <__ieee754_sqrt>
 800db42:	4b26      	ldr	r3, [pc, #152]	; (800dbdc <sqrt+0xac>)
 800db44:	eeb0 8a40 	vmov.f32	s16, s0
 800db48:	eef0 8a60 	vmov.f32	s17, s1
 800db4c:	f993 6000 	ldrsb.w	r6, [r3]
 800db50:	1c73      	adds	r3, r6, #1
 800db52:	d02a      	beq.n	800dbaa <sqrt+0x7a>
 800db54:	4622      	mov	r2, r4
 800db56:	462b      	mov	r3, r5
 800db58:	4620      	mov	r0, r4
 800db5a:	4629      	mov	r1, r5
 800db5c:	f7f2 ffe2 	bl	8000b24 <__aeabi_dcmpun>
 800db60:	4607      	mov	r7, r0
 800db62:	bb10      	cbnz	r0, 800dbaa <sqrt+0x7a>
 800db64:	f04f 0800 	mov.w	r8, #0
 800db68:	f04f 0900 	mov.w	r9, #0
 800db6c:	4642      	mov	r2, r8
 800db6e:	464b      	mov	r3, r9
 800db70:	4620      	mov	r0, r4
 800db72:	4629      	mov	r1, r5
 800db74:	f7f2 ffae 	bl	8000ad4 <__aeabi_dcmplt>
 800db78:	b1b8      	cbz	r0, 800dbaa <sqrt+0x7a>
 800db7a:	2301      	movs	r3, #1
 800db7c:	9300      	str	r3, [sp, #0]
 800db7e:	4b18      	ldr	r3, [pc, #96]	; (800dbe0 <sqrt+0xb0>)
 800db80:	9301      	str	r3, [sp, #4]
 800db82:	9708      	str	r7, [sp, #32]
 800db84:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800db88:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800db8c:	b9b6      	cbnz	r6, 800dbbc <sqrt+0x8c>
 800db8e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800db92:	4668      	mov	r0, sp
 800db94:	f000 f8d6 	bl	800dd44 <matherr>
 800db98:	b1d0      	cbz	r0, 800dbd0 <sqrt+0xa0>
 800db9a:	9b08      	ldr	r3, [sp, #32]
 800db9c:	b11b      	cbz	r3, 800dba6 <sqrt+0x76>
 800db9e:	f000 f8d3 	bl	800dd48 <__errno>
 800dba2:	9b08      	ldr	r3, [sp, #32]
 800dba4:	6003      	str	r3, [r0, #0]
 800dba6:	ed9d 8b06 	vldr	d8, [sp, #24]
 800dbaa:	eeb0 0a48 	vmov.f32	s0, s16
 800dbae:	eef0 0a68 	vmov.f32	s1, s17
 800dbb2:	b00b      	add	sp, #44	; 0x2c
 800dbb4:	ecbd 8b02 	vpop	{d8}
 800dbb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbbc:	4642      	mov	r2, r8
 800dbbe:	464b      	mov	r3, r9
 800dbc0:	4640      	mov	r0, r8
 800dbc2:	4649      	mov	r1, r9
 800dbc4:	f7f2 fe3e 	bl	8000844 <__aeabi_ddiv>
 800dbc8:	2e02      	cmp	r6, #2
 800dbca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dbce:	d1e0      	bne.n	800db92 <sqrt+0x62>
 800dbd0:	f000 f8ba 	bl	800dd48 <__errno>
 800dbd4:	2321      	movs	r3, #33	; 0x21
 800dbd6:	6003      	str	r3, [r0, #0]
 800dbd8:	e7df      	b.n	800db9a <sqrt+0x6a>
 800dbda:	bf00      	nop
 800dbdc:	200004b8 	.word	0x200004b8
 800dbe0:	0800ef28 	.word	0x0800ef28

0800dbe4 <__ieee754_sqrt>:
 800dbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe8:	ec55 4b10 	vmov	r4, r5, d0
 800dbec:	4e54      	ldr	r6, [pc, #336]	; (800dd40 <__ieee754_sqrt+0x15c>)
 800dbee:	43ae      	bics	r6, r5
 800dbf0:	ee10 0a10 	vmov	r0, s0
 800dbf4:	462b      	mov	r3, r5
 800dbf6:	462a      	mov	r2, r5
 800dbf8:	4621      	mov	r1, r4
 800dbfa:	d113      	bne.n	800dc24 <__ieee754_sqrt+0x40>
 800dbfc:	ee10 2a10 	vmov	r2, s0
 800dc00:	462b      	mov	r3, r5
 800dc02:	ee10 0a10 	vmov	r0, s0
 800dc06:	4629      	mov	r1, r5
 800dc08:	f7f2 fcf2 	bl	80005f0 <__aeabi_dmul>
 800dc0c:	4602      	mov	r2, r0
 800dc0e:	460b      	mov	r3, r1
 800dc10:	4620      	mov	r0, r4
 800dc12:	4629      	mov	r1, r5
 800dc14:	f7f2 fb3a 	bl	800028c <__adddf3>
 800dc18:	4604      	mov	r4, r0
 800dc1a:	460d      	mov	r5, r1
 800dc1c:	ec45 4b10 	vmov	d0, r4, r5
 800dc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc24:	2d00      	cmp	r5, #0
 800dc26:	dc10      	bgt.n	800dc4a <__ieee754_sqrt+0x66>
 800dc28:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dc2c:	4330      	orrs	r0, r6
 800dc2e:	d0f5      	beq.n	800dc1c <__ieee754_sqrt+0x38>
 800dc30:	b15d      	cbz	r5, 800dc4a <__ieee754_sqrt+0x66>
 800dc32:	ee10 2a10 	vmov	r2, s0
 800dc36:	462b      	mov	r3, r5
 800dc38:	4620      	mov	r0, r4
 800dc3a:	4629      	mov	r1, r5
 800dc3c:	f7f2 fb24 	bl	8000288 <__aeabi_dsub>
 800dc40:	4602      	mov	r2, r0
 800dc42:	460b      	mov	r3, r1
 800dc44:	f7f2 fdfe 	bl	8000844 <__aeabi_ddiv>
 800dc48:	e7e6      	b.n	800dc18 <__ieee754_sqrt+0x34>
 800dc4a:	151b      	asrs	r3, r3, #20
 800dc4c:	d10c      	bne.n	800dc68 <__ieee754_sqrt+0x84>
 800dc4e:	2a00      	cmp	r2, #0
 800dc50:	d06d      	beq.n	800dd2e <__ieee754_sqrt+0x14a>
 800dc52:	2000      	movs	r0, #0
 800dc54:	02d6      	lsls	r6, r2, #11
 800dc56:	d56e      	bpl.n	800dd36 <__ieee754_sqrt+0x152>
 800dc58:	1e44      	subs	r4, r0, #1
 800dc5a:	1b1b      	subs	r3, r3, r4
 800dc5c:	f1c0 0420 	rsb	r4, r0, #32
 800dc60:	fa21 f404 	lsr.w	r4, r1, r4
 800dc64:	4322      	orrs	r2, r4
 800dc66:	4081      	lsls	r1, r0
 800dc68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dc6c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800dc70:	07dd      	lsls	r5, r3, #31
 800dc72:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800dc76:	bf42      	ittt	mi
 800dc78:	0052      	lslmi	r2, r2, #1
 800dc7a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 800dc7e:	0049      	lslmi	r1, r1, #1
 800dc80:	1058      	asrs	r0, r3, #1
 800dc82:	2500      	movs	r5, #0
 800dc84:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 800dc88:	441a      	add	r2, r3
 800dc8a:	0049      	lsls	r1, r1, #1
 800dc8c:	2316      	movs	r3, #22
 800dc8e:	462c      	mov	r4, r5
 800dc90:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800dc94:	19a7      	adds	r7, r4, r6
 800dc96:	4297      	cmp	r7, r2
 800dc98:	bfde      	ittt	le
 800dc9a:	1bd2      	suble	r2, r2, r7
 800dc9c:	19bc      	addle	r4, r7, r6
 800dc9e:	19ad      	addle	r5, r5, r6
 800dca0:	0052      	lsls	r2, r2, #1
 800dca2:	3b01      	subs	r3, #1
 800dca4:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800dca8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dcac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dcb0:	d1f0      	bne.n	800dc94 <__ieee754_sqrt+0xb0>
 800dcb2:	f04f 0e20 	mov.w	lr, #32
 800dcb6:	469c      	mov	ip, r3
 800dcb8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dcbc:	42a2      	cmp	r2, r4
 800dcbe:	eb06 070c 	add.w	r7, r6, ip
 800dcc2:	dc02      	bgt.n	800dcca <__ieee754_sqrt+0xe6>
 800dcc4:	d112      	bne.n	800dcec <__ieee754_sqrt+0x108>
 800dcc6:	428f      	cmp	r7, r1
 800dcc8:	d810      	bhi.n	800dcec <__ieee754_sqrt+0x108>
 800dcca:	2f00      	cmp	r7, #0
 800dccc:	eb07 0c06 	add.w	ip, r7, r6
 800dcd0:	da34      	bge.n	800dd3c <__ieee754_sqrt+0x158>
 800dcd2:	f1bc 0f00 	cmp.w	ip, #0
 800dcd6:	db31      	blt.n	800dd3c <__ieee754_sqrt+0x158>
 800dcd8:	f104 0801 	add.w	r8, r4, #1
 800dcdc:	1b12      	subs	r2, r2, r4
 800dcde:	428f      	cmp	r7, r1
 800dce0:	bf88      	it	hi
 800dce2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800dce6:	1bc9      	subs	r1, r1, r7
 800dce8:	4433      	add	r3, r6
 800dcea:	4644      	mov	r4, r8
 800dcec:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 800dcf0:	f1be 0e01 	subs.w	lr, lr, #1
 800dcf4:	443a      	add	r2, r7
 800dcf6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dcfa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dcfe:	d1dd      	bne.n	800dcbc <__ieee754_sqrt+0xd8>
 800dd00:	430a      	orrs	r2, r1
 800dd02:	d006      	beq.n	800dd12 <__ieee754_sqrt+0x12e>
 800dd04:	1c5c      	adds	r4, r3, #1
 800dd06:	bf13      	iteet	ne
 800dd08:	3301      	addne	r3, #1
 800dd0a:	3501      	addeq	r5, #1
 800dd0c:	4673      	moveq	r3, lr
 800dd0e:	f023 0301 	bicne.w	r3, r3, #1
 800dd12:	106a      	asrs	r2, r5, #1
 800dd14:	085b      	lsrs	r3, r3, #1
 800dd16:	07e9      	lsls	r1, r5, #31
 800dd18:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800dd1c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800dd20:	bf48      	it	mi
 800dd22:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800dd26:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800dd2a:	461c      	mov	r4, r3
 800dd2c:	e776      	b.n	800dc1c <__ieee754_sqrt+0x38>
 800dd2e:	0aca      	lsrs	r2, r1, #11
 800dd30:	3b15      	subs	r3, #21
 800dd32:	0549      	lsls	r1, r1, #21
 800dd34:	e78b      	b.n	800dc4e <__ieee754_sqrt+0x6a>
 800dd36:	0052      	lsls	r2, r2, #1
 800dd38:	3001      	adds	r0, #1
 800dd3a:	e78b      	b.n	800dc54 <__ieee754_sqrt+0x70>
 800dd3c:	46a0      	mov	r8, r4
 800dd3e:	e7cd      	b.n	800dcdc <__ieee754_sqrt+0xf8>
 800dd40:	7ff00000 	.word	0x7ff00000

0800dd44 <matherr>:
 800dd44:	2000      	movs	r0, #0
 800dd46:	4770      	bx	lr

0800dd48 <__errno>:
 800dd48:	4b01      	ldr	r3, [pc, #4]	; (800dd50 <__errno+0x8>)
 800dd4a:	6818      	ldr	r0, [r3, #0]
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop
 800dd50:	200002e8 	.word	0x200002e8

0800dd54 <_init>:
 800dd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd56:	bf00      	nop
 800dd58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd5a:	bc08      	pop	{r3}
 800dd5c:	469e      	mov	lr, r3
 800dd5e:	4770      	bx	lr

0800dd60 <_fini>:
 800dd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd62:	bf00      	nop
 800dd64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd66:	bc08      	pop	{r3}
 800dd68:	469e      	mov	lr, r3
 800dd6a:	4770      	bx	lr
