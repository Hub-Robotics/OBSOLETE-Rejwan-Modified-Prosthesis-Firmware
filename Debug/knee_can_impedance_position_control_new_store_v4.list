
knee_can_impedance_position_control_new_store_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cab8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  0800cc48  0800cc48  0001cc48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d198  0800d198  0001d198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d1a0  0800d1a0  0001d1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d1a4  0800d1a4  0001d1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000478  20000000  0800d1a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  00020478  2**0
                  CONTENTS
  8 .bss          0000aba4  20000478  20000478  00020478  2**3
                  ALLOC
  9 ._user_heap_stack 00000400  2000b01c  2000b01c  00020478  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020478  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005cdac  00000000  00000000  000204a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00009db2  00000000  00000000  0007d254  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001fc8  00000000  00000000  00087008  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00017690  00000000  00000000  00088fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000b879  00000000  00000000  000a0660  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000abed9  2**0
                  CONTENTS, READONLY
 17 .debug_loc    0001c94f  00000000  00000000  000abf55  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000038d0  00000000  00000000  000c88a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame  000068a4  00000000  00000000  000cc178  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000df  00000000  00000000  000d2a1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000478 	.word	0x20000478
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cc30 	.word	0x0800cc30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000047c 	.word	0x2000047c
 80001cc:	0800cc30 	.word	0x0800cc30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b97a 	b.w	8000f4c <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	460d      	mov	r5, r1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	9e08      	ldr	r6, [sp, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d151      	bne.n	8000d24 <__udivmoddi4+0xb4>
 8000c80:	428a      	cmp	r2, r1
 8000c82:	4617      	mov	r7, r2
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0xf2>
 8000c86:	fab2 fe82 	clz	lr, r2
 8000c8a:	f1be 0f00 	cmp.w	lr, #0
 8000c8e:	d00b      	beq.n	8000ca8 <__udivmoddi4+0x38>
 8000c90:	f1ce 0c20 	rsb	ip, lr, #32
 8000c94:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c98:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c9c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ca0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ca4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ca8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cac:	0c25      	lsrs	r5, r4, #16
 8000cae:	fbbc f8fa 	udiv	r8, ip, sl
 8000cb2:	fa1f f987 	uxth.w	r9, r7
 8000cb6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cbe:	fb08 f309 	mul.w	r3, r8, r9
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x6c>
 8000cc6:	19ed      	adds	r5, r5, r7
 8000cc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ccc:	f080 8123 	bcs.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	f240 8120 	bls.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	443d      	add	r5, r7
 8000cdc:	1aed      	subs	r5, r5, r3
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ce4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ce8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cec:	fb00 f909 	mul.w	r9, r0, r9
 8000cf0:	45a1      	cmp	r9, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x98>
 8000cf4:	19e4      	adds	r4, r4, r7
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 810a 	bcs.w	8000f12 <__udivmoddi4+0x2a2>
 8000cfe:	45a1      	cmp	r9, r4
 8000d00:	f240 8107 	bls.w	8000f12 <__udivmoddi4+0x2a2>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	eba4 0409 	sub.w	r4, r4, r9
 8000d0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d10:	2100      	movs	r1, #0
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d061      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d16:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	6034      	str	r4, [r6, #0]
 8000d1e:	6073      	str	r3, [r6, #4]
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0xc8>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d054      	beq.n	8000dd6 <__udivmoddi4+0x166>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	f040 808e 	bne.w	8000e5e <__udivmoddi4+0x1ee>
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xdc>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2d0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	46ac      	mov	ip, r5
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d03f      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d5a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	b912      	cbnz	r2, 8000d6a <__udivmoddi4+0xfa>
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d6a:	fab7 fe87 	clz	lr, r7
 8000d6e:	f1be 0f00 	cmp.w	lr, #0
 8000d72:	d134      	bne.n	8000dde <__udivmoddi4+0x16e>
 8000d74:	1beb      	subs	r3, r5, r7
 8000d76:	0c3a      	lsrs	r2, r7, #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d82:	0c25      	lsrs	r5, r4, #16
 8000d84:	fb02 3318 	mls	r3, r2, r8, r3
 8000d88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d8c:	fb0c f308 	mul.w	r3, ip, r8
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x134>
 8000d94:	19ed      	adds	r5, r5, r7
 8000d96:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x132>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	f200 80d1 	bhi.w	8000f44 <__udivmoddi4+0x2d4>
 8000da2:	4680      	mov	r8, r0
 8000da4:	1aed      	subs	r5, r5, r3
 8000da6:	b2a3      	uxth	r3, r4
 8000da8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dac:	fb02 5510 	mls	r5, r2, r0, r5
 8000db0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000db4:	fb0c fc00 	mul.w	ip, ip, r0
 8000db8:	45a4      	cmp	ip, r4
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x15c>
 8000dbc:	19e4      	adds	r4, r4, r7
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x15a>
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	f200 80b8 	bhi.w	8000f3a <__udivmoddi4+0x2ca>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	eba4 040c 	sub.w	r4, r4, ip
 8000dd0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd4:	e79d      	b.n	8000d12 <__udivmoddi4+0xa2>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	f1ce 0420 	rsb	r4, lr, #32
 8000de2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000de6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dea:	fa20 f804 	lsr.w	r8, r0, r4
 8000dee:	0c3a      	lsrs	r2, r7, #16
 8000df0:	fa25 f404 	lsr.w	r4, r5, r4
 8000df4:	ea48 0803 	orr.w	r8, r8, r3
 8000df8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dfc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e00:	fb02 4411 	mls	r4, r2, r1, r4
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e0c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e10:	42ab      	cmp	r3, r5
 8000e12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e16:	d909      	bls.n	8000e2c <__udivmoddi4+0x1bc>
 8000e18:	19ed      	adds	r5, r5, r7
 8000e1a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e1e:	f080 808a 	bcs.w	8000f36 <__udivmoddi4+0x2c6>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	f240 8087 	bls.w	8000f36 <__udivmoddi4+0x2c6>
 8000e28:	3902      	subs	r1, #2
 8000e2a:	443d      	add	r5, r7
 8000e2c:	1aeb      	subs	r3, r5, r3
 8000e2e:	fa1f f588 	uxth.w	r5, r8
 8000e32:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e36:	fb02 3310 	mls	r3, r2, r0, r3
 8000e3a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e3e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1e6>
 8000e46:	19ed      	adds	r5, r5, r7
 8000e48:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4c:	d26f      	bcs.n	8000f2e <__udivmoddi4+0x2be>
 8000e4e:	42ab      	cmp	r3, r5
 8000e50:	d96d      	bls.n	8000f2e <__udivmoddi4+0x2be>
 8000e52:	3802      	subs	r0, #2
 8000e54:	443d      	add	r5, r7
 8000e56:	1aeb      	subs	r3, r5, r3
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	e78f      	b.n	8000d7e <__udivmoddi4+0x10e>
 8000e5e:	f1c1 0720 	rsb	r7, r1, #32
 8000e62:	fa22 f807 	lsr.w	r8, r2, r7
 8000e66:	408b      	lsls	r3, r1
 8000e68:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6c:	ea48 0303 	orr.w	r3, r8, r3
 8000e70:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e7e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e82:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e86:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e8a:	fa1f f883 	uxth.w	r8, r3
 8000e8e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e92:	fb09 f408 	mul.w	r4, r9, r8
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x244>
 8000ea2:	18ed      	adds	r5, r5, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	d243      	bcs.n	8000f32 <__udivmoddi4+0x2c2>
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	d941      	bls.n	8000f32 <__udivmoddi4+0x2c2>
 8000eae:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb2:	441d      	add	r5, r3
 8000eb4:	1b2d      	subs	r5, r5, r4
 8000eb6:	fa1f fe8e 	uxth.w	lr, lr
 8000eba:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ebe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ec2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ec6:	fb00 f808 	mul.w	r8, r0, r8
 8000eca:	45a0      	cmp	r8, r4
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x26e>
 8000ece:	18e4      	adds	r4, r4, r3
 8000ed0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ed4:	d229      	bcs.n	8000f2a <__udivmoddi4+0x2ba>
 8000ed6:	45a0      	cmp	r8, r4
 8000ed8:	d927      	bls.n	8000f2a <__udivmoddi4+0x2ba>
 8000eda:	3802      	subs	r0, #2
 8000edc:	441c      	add	r4, r3
 8000ede:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	454c      	cmp	r4, r9
 8000eec:	46c6      	mov	lr, r8
 8000eee:	464d      	mov	r5, r9
 8000ef0:	d315      	bcc.n	8000f1e <__udivmoddi4+0x2ae>
 8000ef2:	d012      	beq.n	8000f1a <__udivmoddi4+0x2aa>
 8000ef4:	b156      	cbz	r6, 8000f0c <__udivmoddi4+0x29c>
 8000ef6:	ebba 030e 	subs.w	r3, sl, lr
 8000efa:	eb64 0405 	sbc.w	r4, r4, r5
 8000efe:	fa04 f707 	lsl.w	r7, r4, r7
 8000f02:	40cb      	lsrs	r3, r1
 8000f04:	431f      	orrs	r7, r3
 8000f06:	40cc      	lsrs	r4, r1
 8000f08:	6037      	str	r7, [r6, #0]
 8000f0a:	6074      	str	r4, [r6, #4]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	4618      	mov	r0, r3
 8000f14:	e6f8      	b.n	8000d08 <__udivmoddi4+0x98>
 8000f16:	4690      	mov	r8, r2
 8000f18:	e6e0      	b.n	8000cdc <__udivmoddi4+0x6c>
 8000f1a:	45c2      	cmp	sl, r8
 8000f1c:	d2ea      	bcs.n	8000ef4 <__udivmoddi4+0x284>
 8000f1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f22:	eb69 0503 	sbc.w	r5, r9, r3
 8000f26:	3801      	subs	r0, #1
 8000f28:	e7e4      	b.n	8000ef4 <__udivmoddi4+0x284>
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	e7d7      	b.n	8000ede <__udivmoddi4+0x26e>
 8000f2e:	4640      	mov	r0, r8
 8000f30:	e791      	b.n	8000e56 <__udivmoddi4+0x1e6>
 8000f32:	4681      	mov	r9, r0
 8000f34:	e7be      	b.n	8000eb4 <__udivmoddi4+0x244>
 8000f36:	4601      	mov	r1, r0
 8000f38:	e778      	b.n	8000e2c <__udivmoddi4+0x1bc>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	443c      	add	r4, r7
 8000f3e:	e745      	b.n	8000dcc <__udivmoddi4+0x15c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xe6>
 8000f44:	f1a8 0802 	sub.w	r8, r8, #2
 8000f48:	443d      	add	r5, r7
 8000f4a:	e72b      	b.n	8000da4 <__udivmoddi4+0x134>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <EPOS4_data_framer>:
#include "EPOS4.h"
#include "time_functions.h"


//This is useful for later adding in functionality. Should work for any Client to Server SDO
void EPOS4_data_framer(uint8_t * data, uint16_t object, uint8_t subindex, uint32_t value){
 8000f50:	b510      	push	{r4, lr}
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
    data[1] = (0x00 | object); //Index LowByte
    data[2] = (0x00 | (object >> 8)); //Index HighByte
    data[3] = subindex; //subindex
 8000f52:	70c2      	strb	r2, [r0, #3]
    data[4] = (0x00 | value); //SDO Byte 0
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8000f54:	0a1a      	lsrs	r2, r3, #8
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 8000f56:	2422      	movs	r4, #34	; 0x22
    data[1] = (0x00 | object); //Index LowByte
 8000f58:	7041      	strb	r1, [r0, #1]
    data[4] = (0x00 | value); //SDO Byte 0
 8000f5a:	7103      	strb	r3, [r0, #4]
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8000f5c:	0a09      	lsrs	r1, r1, #8
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8000f5e:	7142      	strb	r2, [r0, #5]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8000f60:	0c1a      	lsrs	r2, r3, #16
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 8000f62:	0e1b      	lsrs	r3, r3, #24
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 8000f64:	7004      	strb	r4, [r0, #0]
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8000f66:	7081      	strb	r1, [r0, #2]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8000f68:	7182      	strb	r2, [r0, #6]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 8000f6a:	71c3      	strb	r3, [r0, #7]
 8000f6c:	bd10      	pop	{r4, pc}

08000f6e <EPOS4_set_operation_mode>:
}

void EPOS4_set_operation_mode(uint16_t CAN_ID, uint32_t mode){
 8000f6e:	b513      	push	{r0, r1, r4, lr}
    uint8_t data[8];
//    uint16_t object = 0x6060;
//    uint8_t subindex = 0x00;

    EPOS4_data_framer(data, 0x6060 , 0, mode);
 8000f70:	460b      	mov	r3, r1
void EPOS4_set_operation_mode(uint16_t CAN_ID, uint32_t mode){
 8000f72:	4604      	mov	r4, r0
    EPOS4_data_framer(data, 0x6060 , 0, mode);
 8000f74:	2200      	movs	r2, #0
 8000f76:	4668      	mov	r0, sp
 8000f78:	f246 0160 	movw	r1, #24672	; 0x6060
 8000f7c:	f7ff ffe8 	bl	8000f50 <EPOS4_data_framer>

    CAN_transmit(CAN_ID, 8, data);
 8000f80:	466a      	mov	r2, sp
 8000f82:	2108      	movs	r1, #8
 8000f84:	4620      	mov	r0, r4
 8000f86:	f001 f854 	bl	8002032 <CAN_transmit>
    delay_us(10000);
 8000f8a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f8e:	f003 f96b 	bl	8004268 <delay_us>
}
 8000f92:	b002      	add	sp, #8
 8000f94:	bd10      	pop	{r4, pc}

08000f96 <EPOS4_PVM_start>:

    CAN_transmit(CAN_ID, 8, data);
    delay_us(10000);
}

void EPOS4_PVM_start(uint16_t CAN_ID){
 8000f96:	b507      	push	{r0, r1, r2, lr}
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 8000f98:	2322      	movs	r3, #34	; 0x22
 8000f9a:	f88d 3000 	strb.w	r3, [sp]
    data[1] = (0x00 | object); //Index LowByte
 8000f9e:	2340      	movs	r3, #64	; 0x40
 8000fa0:	f88d 3001 	strb.w	r3, [sp, #1]
    data[4] = (0x00 | value); //SDO Byte 0
 8000fa4:	220f      	movs	r2, #15
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8000fa6:	2360      	movs	r3, #96	; 0x60
 8000fa8:	f88d 3002 	strb.w	r3, [sp, #2]
    data[4] = (0x00 | value); //SDO Byte 0
 8000fac:	f88d 2004 	strb.w	r2, [sp, #4]
    data[3] = subindex; //subindex
 8000fb0:	2300      	movs	r3, #0
//    int subindex = 0x00;
//    int value = 0x000F;

    EPOS4_data_framer(data, 0x6040, 0x00, 0x0F);

    CAN_transmit(CAN_ID, 8, data);
 8000fb2:	466a      	mov	r2, sp
 8000fb4:	2108      	movs	r1, #8
    data[3] = subindex; //subindex
 8000fb6:	f88d 3003 	strb.w	r3, [sp, #3]
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8000fba:	f88d 3005 	strb.w	r3, [sp, #5]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8000fbe:	f88d 3006 	strb.w	r3, [sp, #6]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 8000fc2:	f88d 3007 	strb.w	r3, [sp, #7]
    CAN_transmit(CAN_ID, 8, data);
 8000fc6:	f001 f834 	bl	8002032 <CAN_transmit>
    delay_us(10000);
 8000fca:	f242 7010 	movw	r0, #10000	; 0x2710
 8000fce:	f003 f94b 	bl	8004268 <delay_us>
}
 8000fd2:	b003      	add	sp, #12
 8000fd4:	f85d fb04 	ldr.w	pc, [sp], #4

08000fd8 <EPOS4_enable>:
void EPOS4_enable(uint16_t CAN_ID){
 8000fd8:	b513      	push	{r0, r1, r4, lr}
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 8000fda:	2322      	movs	r3, #34	; 0x22
 8000fdc:	f88d 3000 	strb.w	r3, [sp]
    data[1] = (0x00 | object); //Index LowByte
 8000fe0:	2340      	movs	r3, #64	; 0x40
 8000fe2:	f88d 3001 	strb.w	r3, [sp, #1]
    data[4] = (0x00 | value); //SDO Byte 0
 8000fe6:	2206      	movs	r2, #6
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8000fe8:	2360      	movs	r3, #96	; 0x60
    CAN_transmit(CAN_ID, 8, data);
 8000fea:	2108      	movs	r1, #8
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8000fec:	f88d 3002 	strb.w	r3, [sp, #2]
    data[4] = (0x00 | value); //SDO Byte 0
 8000ff0:	f88d 2004 	strb.w	r2, [sp, #4]
    data[3] = subindex; //subindex
 8000ff4:	2300      	movs	r3, #0
    CAN_transmit(CAN_ID, 8, data);
 8000ff6:	466a      	mov	r2, sp
void EPOS4_enable(uint16_t CAN_ID){
 8000ff8:	4604      	mov	r4, r0
    data[3] = subindex; //subindex
 8000ffa:	f88d 3003 	strb.w	r3, [sp, #3]
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 8000ffe:	f88d 3005 	strb.w	r3, [sp, #5]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 8001002:	f88d 3006 	strb.w	r3, [sp, #6]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 8001006:	f88d 3007 	strb.w	r3, [sp, #7]
    CAN_transmit(CAN_ID, 8, data);
 800100a:	f001 f812 	bl	8002032 <CAN_transmit>
    delay_us(10000);
 800100e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001012:	f003 f929 	bl	8004268 <delay_us>
    EPOS4_enable2(CAN_ID);
 8001016:	4620      	mov	r0, r4
 8001018:	f7ff ffbd 	bl	8000f96 <EPOS4_PVM_start>
}
 800101c:	b002      	add	sp, #8
 800101e:	bd10      	pop	{r4, pc}

08001020 <EPOS4_CST_apply_torque>:
    CAN_transmit(CAN_ID, 8, data);
    delay_us(10000);
}


void EPOS4_CST_apply_torque(uint16_t CAN_ID, uint32_t torque){
 8001020:	b513      	push	{r0, r1, r4, lr}
//    }
//    else{
//
//    }

    EPOS4_data_framer(data, 0x6071, 0x00, torque);
 8001022:	460b      	mov	r3, r1
void EPOS4_CST_apply_torque(uint16_t CAN_ID, uint32_t torque){
 8001024:	4604      	mov	r4, r0
    EPOS4_data_framer(data, 0x6071, 0x00, torque);
 8001026:	2200      	movs	r2, #0
 8001028:	4668      	mov	r0, sp
 800102a:	f246 0171 	movw	r1, #24689	; 0x6071
 800102e:	f7ff ff8f 	bl	8000f50 <EPOS4_data_framer>

    CAN_transmit(CAN_ID, 8, data);
 8001032:	466a      	mov	r2, sp
 8001034:	2108      	movs	r1, #8
 8001036:	4620      	mov	r0, r4
 8001038:	f000 fffb 	bl	8002032 <CAN_transmit>
    delay_us(50); //1500
 800103c:	2032      	movs	r0, #50	; 0x32
 800103e:	f003 f913 	bl	8004268 <delay_us>
}
 8001042:	b002      	add	sp, #8
 8001044:	bd10      	pop	{r4, pc}

08001046 <EPOS4_clear_errors>:

    CAN_transmit(CAN_ID, 8, data);
    delay_us(1500);
}

void EPOS4_clear_errors(uint16_t CAN_ID){
 8001046:	b507      	push	{r0, r1, r2, lr}
    data[0] = 0x22; //[Byte 0] legend Table 5-43 page 5-55 Application Notes
 8001048:	2322      	movs	r3, #34	; 0x22
 800104a:	f88d 3000 	strb.w	r3, [sp]
    data[1] = (0x00 | object); //Index LowByte
 800104e:	2340      	movs	r3, #64	; 0x40
 8001050:	f88d 3001 	strb.w	r3, [sp, #1]
    data[4] = (0x00 | value); //SDO Byte 0
 8001054:	2280      	movs	r2, #128	; 0x80
    data[2] = (0x00 | (object >> 8)); //Index HighByte
 8001056:	2360      	movs	r3, #96	; 0x60
 8001058:	f88d 3002 	strb.w	r3, [sp, #2]
    data[4] = (0x00 | value); //SDO Byte 0
 800105c:	f88d 2004 	strb.w	r2, [sp, #4]
    data[3] = subindex; //subindex
 8001060:	2300      	movs	r3, #0
//    int object = 0x6040;
//    int subindex = 0x00;
//    int value = 0x0080;
    EPOS4_data_framer(data, 0x6040, 0x00, 0x80);

    CAN_transmit(CAN_ID, 8, data);
 8001062:	466a      	mov	r2, sp
 8001064:	2108      	movs	r1, #8
    data[3] = subindex; //subindex
 8001066:	f88d 3003 	strb.w	r3, [sp, #3]
    data[5] = (0x00 | (value >> 8)); //SDO Byte 1
 800106a:	f88d 3005 	strb.w	r3, [sp, #5]
    data[6] = (0x00 | (value >> 16)); //SDO Byte 2
 800106e:	f88d 3006 	strb.w	r3, [sp, #6]
    data[7] = (0x00 | (value >> 24)); //SDO Byte 3
 8001072:	f88d 3007 	strb.w	r3, [sp, #7]
    CAN_transmit(CAN_ID, 8, data);
 8001076:	f000 ffdc 	bl	8002032 <CAN_transmit>
//    delay_us(200);
//    delay_us(1500); // testing by commenting it
}
 800107a:	b003      	add	sp, #12
 800107c:	f85d fb04 	ldr.w	pc, [sp], #4

08001080 <Impedance>:
    //3rd polynomial fit
    double poly_coefficient[4] = {2.22320112553112e-08,-9.47330958490815e-06,0.000674466762924094,0.0316020276371335}; //3rd order to 0 order
    return poly_coefficient[0]*pow(KneeAngle,3.0)+poly_coefficient[1]*pow(KneeAngle,2.0)+poly_coefficient[2]*KneeAngle+poly_coefficient[3];
}

double Impedance(double KneeAngle, double Knee_Velocity, double K1, double B, double Theta_E){
 8001080:	b530      	push	{r4, r5, lr}
    
    return -1*(K1*(Theta_E-KneeAngle)-B*Knee_Velocity);
 8001082:	ec53 2b10 	vmov	r2, r3, d0
double Impedance(double KneeAngle, double Knee_Velocity, double K1, double B, double Theta_E){
 8001086:	b087      	sub	sp, #28
    return -1*(K1*(Theta_E-KneeAngle)-B*Knee_Velocity);
 8001088:	ec51 0b14 	vmov	r0, r1, d4
double Impedance(double KneeAngle, double Knee_Velocity, double K1, double B, double Theta_E){
 800108c:	ed8d 1b04 	vstr	d1, [sp, #16]
 8001090:	ed8d 3b00 	vstr	d3, [sp]
 8001094:	ed8d 2b02 	vstr	d2, [sp, #8]
    return -1*(K1*(Theta_E-KneeAngle)-B*Knee_Velocity);
 8001098:	f7ff f8f6 	bl	8000288 <__aeabi_dsub>
 800109c:	ed9d 2b02 	vldr	d2, [sp, #8]
 80010a0:	ec53 2b12 	vmov	r2, r3, d2
 80010a4:	f7ff faa4 	bl	80005f0 <__aeabi_dmul>
 80010a8:	ed9d 1b04 	vldr	d1, [sp, #16]
 80010ac:	ed9d 3b00 	vldr	d3, [sp]
 80010b0:	ec53 2b11 	vmov	r2, r3, d1
 80010b4:	4604      	mov	r4, r0
 80010b6:	460d      	mov	r5, r1
 80010b8:	ec51 0b13 	vmov	r0, r1, d3
 80010bc:	f7ff fa98 	bl	80005f0 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4620      	mov	r0, r4
 80010c6:	4629      	mov	r1, r5
 80010c8:	f7ff f8de 	bl	8000288 <__aeabi_dsub>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
}
 80010d2:	ec43 2b10 	vmov	d0, r2, r3
 80010d6:	b007      	add	sp, #28
 80010d8:	bd30      	pop	{r4, r5, pc}

080010da <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80010da:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 80010dc:	2301      	movs	r3, #1
 80010de:	f88d 3007 	strb.w	r3, [sp, #7]
  
//  if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
//  {
//   status = SD_NOT_PRESENT;
//  }
  return status;
 80010e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80010e6:	b002      	add	sp, #8
 80010e8:	4770      	bx	lr
	...

080010ec <BSP_SD_IRQHandler>:
  * @brief  Handles SD card interrupt request.
  * @retval None
  */
void BSP_SD_IRQHandler(void)
{
  HAL_SD_IRQHandler(&uSdHandle);
 80010ec:	4801      	ldr	r0, [pc, #4]	; (80010f4 <BSP_SD_IRQHandler+0x8>)
 80010ee:	f005 be3f 	b.w	8006d70 <HAL_SD_IRQHandler>
 80010f2:	bf00      	nop
 80010f4:	200088c4 	.word	0x200088c4

080010f8 <BSP_SD_DMA_Tx_IRQHandler>:
  * @brief  Handles SD DMA Tx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Tx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmatx);
 80010f8:	4b01      	ldr	r3, [pc, #4]	; (8001100 <BSP_SD_DMA_Tx_IRQHandler+0x8>)
 80010fa:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80010fc:	f004 ba82 	b.w	8005604 <HAL_DMA_IRQHandler>
 8001100:	200088c4 	.word	0x200088c4

08001104 <BSP_SD_DMA_Rx_IRQHandler>:
  * @brief  Handles SD DMA Rx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Rx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 8001104:	4b01      	ldr	r3, [pc, #4]	; (800110c <BSP_SD_DMA_Rx_IRQHandler+0x8>)
 8001106:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001108:	f004 ba7c 	b.w	8005604 <HAL_DMA_IRQHandler>
 800110c:	200088c4 	.word	0x200088c4

08001110 <BSP_SD_GetStatus>:
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  *            @arg  SD_TRANSFER_ERROR: Data transfer error 
  */
HAL_SD_TransferStateTypedef BSP_SD_GetStatus(void)
{
  return(HAL_SD_GetStatus(&uSdHandle));
 8001110:	4801      	ldr	r0, [pc, #4]	; (8001118 <BSP_SD_GetStatus+0x8>)
 8001112:	f006 ba7b 	b.w	800760c <HAL_SD_GetStatus>
 8001116:	bf00      	nop
 8001118:	200088c4 	.word	0x200088c4

0800111c <BSP_SD_GetCardInfo>:
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypedef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_Get_CardInfo(&uSdHandle, CardInfo);
 800111c:	4601      	mov	r1, r0
 800111e:	4801      	ldr	r0, [pc, #4]	; (8001124 <BSP_SD_GetCardInfo+0x8>)
 8001120:	f005 be86 	b.w	8006e30 <HAL_SD_Get_CardInfo>
 8001124:	200088c4 	.word	0x200088c4

08001128 <SD_DMAConfigRx>:
  * @brief Configure the DMA to receive data from the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 8001128:	b510      	push	{r4, lr}
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Configure DMA Rx parameters */
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 800112a:	4c15      	ldr	r4, [pc, #84]	; (8001180 <SD_DMAConfigRx+0x58>)
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_rx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 800112c:	6584      	str	r4, [r0, #88]	; 0x58
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 800112e:	2307      	movs	r3, #7
 8001130:	6063      	str	r3, [r4, #4]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001132:	2300      	movs	r3, #0
 8001134:	60a3      	str	r3, [r4, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001136:	60e3      	str	r3, [r4, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	6123      	str	r3, [r4, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800113c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001140:	6163      	str	r3, [r4, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001142:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001146:	61a3      	str	r3, [r4, #24]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8001148:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800114c:	6223      	str	r3, [r4, #32]
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 800114e:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_rx.Instance = DMA2_Channel4;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <SD_DMAConfigRx+0x5c>)
 8001152:	6023      	str	r3, [r4, #0]

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_rx);
 8001154:	4620      	mov	r0, r4
 8001156:	f004 fa37 	bl	80055c8 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_rx);
 800115a:	4620      	mov	r0, r4
 800115c:	f004 f9ae 	bl	80054bc <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_rx);
 8001160:	4620      	mov	r0, r4
 8001162:	f004 f93b 	bl	80053dc <HAL_DMA_Init>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <SD_DMAConfigRx+0x60>)
 8001168:	2230      	movs	r2, #48	; 0x30
 800116a:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);

  return (status != HAL_OK? SD_ERROR : SD_OK);
 800116e:	2800      	cmp	r0, #0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001170:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001174:	605a      	str	r2, [r3, #4]
}
 8001176:	bf14      	ite	ne
 8001178:	2029      	movne	r0, #41	; 0x29
 800117a:	2000      	moveq	r0, #0
 800117c:	bd10      	pop	{r4, pc}
 800117e:	bf00      	nop
 8001180:	20000494 	.word	0x20000494
 8001184:	40020444 	.word	0x40020444
 8001188:	e000e100 	.word	0xe000e100

0800118c <BSP_SD_ReadBlocks_DMA>:
{
 800118c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uSdHandle.hdmatx = NULL;
 800118e:	4c10      	ldr	r4, [pc, #64]	; (80011d0 <BSP_SD_ReadBlocks_DMA+0x44>)
{
 8001190:	4605      	mov	r5, r0
 8001192:	461f      	mov	r7, r3
  state = ((SD_DMAConfigRx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001194:	4620      	mov	r0, r4
  uSdHandle.hdmatx = NULL;
 8001196:	2300      	movs	r3, #0
{
 8001198:	4616      	mov	r6, r2
  uSdHandle.hdmatx = NULL;
 800119a:	65e3      	str	r3, [r4, #92]	; 0x5c
  state = ((SD_DMAConfigRx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 800119c:	f7ff ffc4 	bl	8001128 <SD_DMAConfigRx>
  if(state == MSD_OK)
 80011a0:	b998      	cbnz	r0, 80011ca <BSP_SD_ReadBlocks_DMA+0x3e>
    state = ((HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 80011a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	9b08      	ldr	r3, [sp, #32]
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	4632      	mov	r2, r6
 80011ac:	463b      	mov	r3, r7
 80011ae:	4629      	mov	r1, r5
 80011b0:	4620      	mov	r0, r4
 80011b2:	f005 fce3 	bl	8006b7c <HAL_SD_ReadBlocks_DMA>
    if(state == MSD_OK)
 80011b6:	b940      	cbnz	r0, 80011ca <BSP_SD_ReadBlocks_DMA+0x3e>
      state = ((HAL_SD_CheckReadOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 80011b8:	4906      	ldr	r1, [pc, #24]	; (80011d4 <BSP_SD_ReadBlocks_DMA+0x48>)
 80011ba:	4620      	mov	r0, r4
 80011bc:	f006 f9f5 	bl	80075aa <HAL_SD_CheckReadOperation>
 80011c0:	3000      	adds	r0, #0
 80011c2:	bf18      	it	ne
 80011c4:	2001      	movne	r0, #1
}
 80011c6:	b003      	add	sp, #12
 80011c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    state = ((HAL_SD_ReadBlocks_DMA(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 80011ca:	2001      	movs	r0, #1
 80011cc:	e7fb      	b.n	80011c6 <BSP_SD_ReadBlocks_DMA+0x3a>
 80011ce:	bf00      	nop
 80011d0:	200088c4 	.word	0x200088c4
 80011d4:	00989680 	.word	0x00989680

080011d8 <SD_DMAConfigTx>:
  * @brief Configure the DMA to transmit data to the SD card
  * @retval
  *  SD_ERROR or SD_OK
  */
HAL_SD_ErrorTypedef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 80011d8:	b510      	push	{r4, lr}
  static DMA_HandleTypeDef hdma_tx;
  HAL_StatusTypeDef status;

  /* Configure DMA Tx parameters */
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 80011da:	4c15      	ldr	r4, [pc, #84]	; (8001230 <SD_DMAConfigTx+0x58>)
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_tx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 80011dc:	65c4      	str	r4, [r0, #92]	; 0x5c
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 80011de:	2307      	movs	r3, #7
 80011e0:	6063      	str	r3, [r4, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80011e2:	2310      	movs	r3, #16
 80011e4:	60a3      	str	r3, [r4, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60e3      	str	r3, [r4, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	6123      	str	r3, [r4, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f2:	6163      	str	r3, [r4, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80011f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011f8:	61a3      	str	r3, [r4, #24]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80011fa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011fe:	6223      	str	r3, [r4, #32]
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 8001200:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_tx.Instance = DMA2_Channel4;
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <SD_DMAConfigTx+0x5c>)
 8001204:	6023      	str	r3, [r4, #0]

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_tx);
 8001206:	4620      	mov	r0, r4
 8001208:	f004 f9de 	bl	80055c8 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_tx);
 800120c:	4620      	mov	r0, r4
 800120e:	f004 f955 	bl	80054bc <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_tx);
 8001212:	4620      	mov	r0, r4
 8001214:	f004 f8e2 	bl	80053dc <HAL_DMA_Init>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <SD_DMAConfigTx+0x60>)
 800121a:	2230      	movs	r2, #48	; 0x30
 800121c:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
//  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);

    NVIC_SetPriority(DMA2_Channel4_IRQn, 3);
    NVIC_EnableIRQ(DMA2_Channel4_IRQn);

  return (status != HAL_OK? SD_ERROR : SD_OK);
 8001220:	2800      	cmp	r0, #0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001222:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001226:	605a      	str	r2, [r3, #4]
}
 8001228:	bf14      	ite	ne
 800122a:	2029      	movne	r0, #41	; 0x29
 800122c:	2000      	moveq	r0, #0
 800122e:	bd10      	pop	{r4, pc}
 8001230:	200004dc 	.word	0x200004dc
 8001234:	40020444 	.word	0x40020444
 8001238:	e000e100 	.word	0xe000e100

0800123c <BSP_SD_Init>:
{
 800123c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef gpioinitstruct = {0};
 800123e:	2214      	movs	r2, #20
{
 8001240:	b08b      	sub	sp, #44	; 0x2c
  uSdHandle.Instance = SDMMC1;
 8001242:	4c38      	ldr	r4, [pc, #224]	; (8001324 <BSP_SD_Init+0xe8>)
 8001244:	4b38      	ldr	r3, [pc, #224]	; (8001328 <BSP_SD_Init+0xec>)
 8001246:	6023      	str	r3, [r4, #0]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8001248:	2100      	movs	r1, #0
  uSdHandle.Init.ClockDiv            = 1;    // Checked by Masudul,
 800124a:	2501      	movs	r5, #1
  GPIO_InitTypeDef gpioinitstruct = {0};
 800124c:	eb0d 0002 	add.w	r0, sp, r2
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8001250:	6061      	str	r1, [r4, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8001252:	60a1      	str	r1, [r4, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001254:	60e1      	str	r1, [r4, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8001256:	6121      	str	r1, [r4, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001258:	6161      	str	r1, [r4, #20]
  uSdHandle.Init.ClockDiv            = 1;    // Checked by Masudul,
 800125a:	61a5      	str	r5, [r4, #24]
  GPIO_InitTypeDef gpioinitstruct = {0};
 800125c:	f00a f8eb 	bl	800b436 <memset>
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001260:	4b32      	ldr	r3, [pc, #200]	; (800132c <BSP_SD_Init+0xf0>)
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8001262:	4833      	ldr	r0, [pc, #204]	; (8001330 <BSP_SD_Init+0xf4>)
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001264:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001266:	4e33      	ldr	r6, [pc, #204]	; (8001334 <BSP_SD_Init+0xf8>)
 8001268:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800126c:	661a      	str	r2, [r3, #96]	; 0x60
 800126e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001270:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001274:	9200      	str	r2, [sp, #0]
 8001276:	9a00      	ldr	r2, [sp, #0]
  __DMAx_TxRx_CLK_ENABLE();
 8001278:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800127a:	f042 0202 	orr.w	r2, r2, #2
 800127e:	649a      	str	r2, [r3, #72]	; 0x48
 8001280:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001282:	f002 0202 	and.w	r2, r2, #2
 8001286:	9201      	str	r2, [sp, #4]
 8001288:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800128c:	f042 0204 	orr.w	r2, r2, #4
 8001290:	64da      	str	r2, [r3, #76]	; 0x4c
 8001292:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001294:	f002 0204 	and.w	r2, r2, #4
 8001298:	9202      	str	r2, [sp, #8]
 800129a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800129e:	f042 0208 	orr.w	r2, r2, #8
 80012a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80012a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012a6:	f002 0208 	and.w	r2, r2, #8
 80012aa:	9203      	str	r2, [sp, #12]
 80012ac:	9a03      	ldr	r2, [sp, #12]
  __SD_DETECT_GPIO_CLK_ENABLE();
 80012ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012b0:	432a      	orrs	r2, r5
 80012b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  gpioinitstruct.Pull      = GPIO_PULLUP;
 80012b6:	9507      	str	r5, [sp, #28]
  __SD_DETECT_GPIO_CLK_ENABLE();
 80012b8:	402b      	ands	r3, r5
 80012ba:	9304      	str	r3, [sp, #16]
 80012bc:	9b04      	ldr	r3, [sp, #16]
  gpioinitstruct.Mode      = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	9306      	str	r3, [sp, #24]
  gpioinitstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	9308      	str	r3, [sp, #32]
  gpioinitstruct.Alternate = GPIO_AF12_SDMMC1;
 80012c6:	230c      	movs	r3, #12
 80012c8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80012ca:	a905      	add	r1, sp, #20
  gpioinitstruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80012cc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80012d0:	9305      	str	r3, [sp, #20]
 80012d2:	f44f 3700 	mov.w	r7, #131072	; 0x20000
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80012d6:	f004 f9dd 	bl	8005694 <HAL_GPIO_Init>
  gpioinitstruct.Pin = GPIO_PIN_2;
 80012da:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80012dc:	4816      	ldr	r0, [pc, #88]	; (8001338 <BSP_SD_Init+0xfc>)
  gpioinitstruct.Pin = GPIO_PIN_2;
 80012de:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80012e0:	a905      	add	r1, sp, #20
 80012e2:	f004 f9d7 	bl	8005694 <HAL_GPIO_Init>
 80012e6:	6077      	str	r7, [r6, #4]
  if((SD_DMAConfigTx(&uSdHandle) == SD_OK) )
 80012e8:	4620      	mov	r0, r4
 80012ea:	f7ff ff75 	bl	80011d8 <SD_DMAConfigTx>
 80012ee:	b900      	cbnz	r0, 80012f2 <BSP_SD_Init+0xb6>
 80012f0:	6077      	str	r7, [r6, #4]
  __IO uint8_t status = SD_PRESENT;
 80012f2:	f88d 5014 	strb.w	r5, [sp, #20]
  return status;
 80012f6:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if(BSP_SD_IsDetected() != SD_PRESENT)
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d002      	beq.n	8001304 <BSP_SD_Init+0xc8>
    return MSD_ERROR;
 80012fe:	2001      	movs	r0, #1
}
 8001300:	b00b      	add	sp, #44	; 0x2c
 8001302:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(HAL_SD_Init(&uSdHandle, &uSdCardInfo) != SD_OK)
 8001304:	490d      	ldr	r1, [pc, #52]	; (800133c <BSP_SD_Init+0x100>)
 8001306:	4807      	ldr	r0, [pc, #28]	; (8001324 <BSP_SD_Init+0xe8>)
 8001308:	f005 fecc 	bl	80070a4 <HAL_SD_Init>
 800130c:	2800      	cmp	r0, #0
 800130e:	d1f6      	bne.n	80012fe <BSP_SD_Init+0xc2>
    if(HAL_SD_WideBusOperation_Config(&uSdHandle, SDMMC_BUS_WIDE_4B) != SD_OK)
 8001310:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <BSP_SD_Init+0xe8>)
 8001316:	f006 f89d 	bl	8007454 <HAL_SD_WideBusOperation_Config>
    return MSD_ERROR;
 800131a:	3000      	adds	r0, #0
 800131c:	bf18      	it	ne
 800131e:	2001      	movne	r0, #1
 8001320:	e7ee      	b.n	8001300 <BSP_SD_Init+0xc4>
 8001322:	bf00      	nop
 8001324:	200088c4 	.word	0x200088c4
 8001328:	40012800 	.word	0x40012800
 800132c:	40021000 	.word	0x40021000
 8001330:	48000800 	.word	0x48000800
 8001334:	e000e100 	.word	0xe000e100
 8001338:	48000c00 	.word	0x48000c00
 800133c:	20000528 	.word	0x20000528

08001340 <BSP_SD_WriteBlocks_DMA>:
{
 8001340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uSdHandle.hdmarx = NULL;
 8001342:	4c10      	ldr	r4, [pc, #64]	; (8001384 <BSP_SD_WriteBlocks_DMA+0x44>)
{
 8001344:	4605      	mov	r5, r0
 8001346:	461f      	mov	r7, r3
  state = ((SD_DMAConfigTx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001348:	4620      	mov	r0, r4
  uSdHandle.hdmarx = NULL;
 800134a:	2300      	movs	r3, #0
{
 800134c:	4616      	mov	r6, r2
  uSdHandle.hdmarx = NULL;
 800134e:	65a3      	str	r3, [r4, #88]	; 0x58
  state = ((SD_DMAConfigTx(&uSdHandle) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001350:	f7ff ff42 	bl	80011d8 <SD_DMAConfigTx>
  if(state == MSD_OK)
 8001354:	b998      	cbnz	r0, 800137e <BSP_SD_WriteBlocks_DMA+0x3e>
    state = ((HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 8001356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	9b08      	ldr	r3, [sp, #32]
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	4632      	mov	r2, r6
 8001360:	463b      	mov	r3, r7
 8001362:	4629      	mov	r1, r5
 8001364:	4620      	mov	r0, r4
 8001366:	f005 fc83 	bl	8006c70 <HAL_SD_WriteBlocks_DMA>
    if(state == MSD_OK)
 800136a:	b940      	cbnz	r0, 800137e <BSP_SD_WriteBlocks_DMA+0x3e>
      state = ((HAL_SD_CheckWriteOperation(&uSdHandle, (uint32_t)SD_DATATIMEOUT) == SD_OK) ? MSD_OK : MSD_ERROR);
 800136c:	4906      	ldr	r1, [pc, #24]	; (8001388 <BSP_SD_WriteBlocks_DMA+0x48>)
 800136e:	4620      	mov	r0, r4
 8001370:	f006 f971 	bl	8007656 <HAL_SD_CheckWriteOperation>
 8001374:	3000      	adds	r0, #0
 8001376:	bf18      	it	ne
 8001378:	2001      	movne	r0, #1
}
 800137a:	b003      	add	sp, #12
 800137c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    state = ((HAL_SD_WriteBlocks_DMA(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) == SD_OK) ? MSD_OK : MSD_ERROR);
 800137e:	2001      	movs	r0, #1
 8001380:	e7fb      	b.n	800137a <BSP_SD_WriteBlocks_DMA+0x3a>
 8001382:	bf00      	nop
 8001384:	200088c4 	.word	0x200088c4
 8001388:	00989680 	.word	0x00989680
 800138c:	00000000 	.word	0x00000000

08001390 <controller_impedance>:
// Greg end

//struct st_impedance controller_impedance(float angle, float knee_velocity,int ac_x, float current)

struct st_impedance controller_impedance(float angle, float knee_velocity,float Heel_pressure, float Toe_pressure,float IMU_acceleration,float hip_joint_angle)
{
 8001390:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    switch (state)
 8001394:	4f3c      	ldr	r7, [pc, #240]	; (8001488 <controller_impedance+0xf8>)
 8001396:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800149c <controller_impedance+0x10c>
 800139a:	783b      	ldrb	r3, [r7, #0]
 800139c:	4c3b      	ldr	r4, [pc, #236]	; (800148c <controller_impedance+0xfc>)
{
 800139e:	4606      	mov	r6, r0
 80013a0:	ee10 5a10 	vmov	r5, s0
 80013a4:	ee10 0a90 	vmov	r0, s1
    switch (state)
 80013a8:	b19b      	cbz	r3, 80013d2 <controller_impedance+0x42>
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d03f      	beq.n	800142e <controller_impedance+0x9e>
//
//        break;
    // Greg end comment
    }

    my_st_impedance.st = state;
 80013ae:	4d38      	ldr	r5, [pc, #224]	; (8001490 <controller_impedance+0x100>)
 80013b0:	783b      	ldrb	r3, [r7, #0]
 80013b2:	602b      	str	r3, [r5, #0]
    my_st_impedance.desired_torque = d_torque;
 80013b4:	e9d8 0100 	ldrd	r0, r1, [r8]
 80013b8:	f7ff fbf2 	bl	8000ba0 <__aeabi_d2f>
    my_st_impedance.CST_CMD_now = CST_CMD_EPOS_contrl;
 80013bc:	6823      	ldr	r3, [r4, #0]
    my_st_impedance.desired_torque = d_torque;
 80013be:	6068      	str	r0, [r5, #4]
    my_st_impedance.CST_CMD_now = CST_CMD_EPOS_contrl;
 80013c0:	60ab      	str	r3, [r5, #8]
    return my_st_impedance;
 80013c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013c6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
}
 80013ca:	4630      	mov	r0, r6
 80013cc:	b002      	add	sp, #8
 80013ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	d_torque = Impedance(angle, knee_velocity, ST_stiffness, ST_damping, ST_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 80013d2:	f7ff f8b9 	bl	8000548 <__aeabi_f2d>
 80013d6:	e9cd 0100 	strd	r0, r1, [sp]
 80013da:	4628      	mov	r0, r5
 80013dc:	f7ff f8b4 	bl	8000548 <__aeabi_f2d>
 80013e0:	ed9f 4b1d 	vldr	d4, [pc, #116]	; 8001458 <controller_impedance+0xc8>
 80013e4:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 8001460 <controller_impedance+0xd0>
 80013e8:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 8001468 <controller_impedance+0xd8>
        	d_torque = Impedance(angle, knee_velocity, SW_stiffness, SW_damping, SW_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 80013ec:	ed9d 1b00 	vldr	d1, [sp]
 80013f0:	ec41 0b10 	vmov	d0, r0, r1
 80013f4:	f7ff fe44 	bl	8001080 <Impedance>
        	CST_CMD_EPOS_contrl=(d_torque/(torque_const_kv100lite*gear_ratio_Chain_knee*peak_current))*1000;
 80013f8:	a31d      	add	r3, pc, #116	; (adr r3, 8001470 <controller_impedance+0xe0>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
        	d_torque = Impedance(angle, knee_velocity, SW_stiffness, SW_damping, SW_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 80013fe:	ec51 0b10 	vmov	r0, r1, d0
 8001402:	ed88 0b00 	vstr	d0, [r8]
        	CST_CMD_EPOS_contrl=(d_torque/(torque_const_kv100lite*gear_ratio_Chain_knee*peak_current))*1000;
 8001406:	f7ff fa1d 	bl	8000844 <__aeabi_ddiv>
 800140a:	2200      	movs	r2, #0
 800140c:	4b21      	ldr	r3, [pc, #132]	; (8001494 <controller_impedance+0x104>)
 800140e:	f7ff f8ef 	bl	80005f0 <__aeabi_dmul>
 8001412:	f7ff fb9d 	bl	8000b50 <__aeabi_d2iz>
    		if (CST_CMD_EPOS_contrl>=max_CST_CMD_EPOS)
 8001416:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
 800141a:	db16      	blt.n	800144a <controller_impedance+0xba>
    			CST_CMD_EPOS_contrl=max_CST_CMD_EPOS;
 800141c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001420:	6023      	str	r3, [r4, #0]
    		EPOS4_CST_apply_torque(0x601,CST_CMD_EPOS_contrl); //100 means 10% +ve is extension -ve is flexion
 8001422:	6821      	ldr	r1, [r4, #0]
 8001424:	f240 6001 	movw	r0, #1537	; 0x601
 8001428:	f7ff fdfa 	bl	8001020 <EPOS4_CST_apply_torque>
    		break;
 800142c:	e7bf      	b.n	80013ae <controller_impedance+0x1e>
        	d_torque = Impedance(angle, knee_velocity, SW_stiffness, SW_damping, SW_equilibrium); // earlier .7 Impedance(Angle,Velocity,K1,B,Theta_E)//1, 0.001 //previous equi angle=-10
 800142e:	f7ff f88b 	bl	8000548 <__aeabi_f2d>
 8001432:	e9cd 0100 	strd	r0, r1, [sp]
 8001436:	4628      	mov	r0, r5
 8001438:	f7ff f886 	bl	8000548 <__aeabi_f2d>
 800143c:	ed9f 4b0e 	vldr	d4, [pc, #56]	; 8001478 <controller_impedance+0xe8>
 8001440:	ed9f 3b07 	vldr	d3, [pc, #28]	; 8001460 <controller_impedance+0xd0>
 8001444:	ed9f 2b0e 	vldr	d2, [pc, #56]	; 8001480 <controller_impedance+0xf0>
 8001448:	e7d0      	b.n	80013ec <controller_impedance+0x5c>
        	CST_CMD_EPOS_contrl=(d_torque/(torque_const_kv100lite*gear_ratio_Chain_knee*peak_current))*1000;
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <controller_impedance+0x108>)
 800144c:	4298      	cmp	r0, r3
 800144e:	bfac      	ite	ge
 8001450:	6020      	strge	r0, [r4, #0]
 8001452:	6023      	strlt	r3, [r4, #0]
 8001454:	e7e5      	b.n	8001422 <controller_impedance+0x92>
 8001456:	bf00      	nop
 8001458:	8f5c28f6 	.word	0x8f5c28f6
 800145c:	c013f5c2 	.word	0xc013f5c2
	...
 800146c:	40040000 	.word	0x40040000
 8001470:	66666666 	.word	0x66666666
 8001474:	403e6666 	.word	0x403e6666
 8001478:	00000000 	.word	0x00000000
 800147c:	c0418000 	.word	0xc0418000
 8001480:	cccccccd 	.word	0xcccccccd
 8001484:	3fe4cccc 	.word	0x3fe4cccc
 8001488:	20000590 	.word	0x20000590
 800148c:	20000580 	.word	0x20000580
 8001490:	20008924 	.word	0x20008924
 8001494:	408f4000 	.word	0x408f4000
 8001498:	fffffb50 	.word	0xfffffb50
 800149c:	20000588 	.word	0x20000588

080014a0 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 80014a0:	2000      	movs	r0, #0
 80014a2:	4770      	bx	lr

080014a4 <LL_AHB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <LL_AHB2_GRP1_EnableClock+0x18>)
 80014a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014a8:	4302      	orrs	r2, r0
 80014aa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 80014ae:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014b0:	4018      	ands	r0, r3
 80014b2:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80014b4:	9b01      	ldr	r3, [sp, #4]
}
 80014b6:	b002      	add	sp, #8
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000

080014c0 <MX_GPIO_Init>:
LL_GPIO_InitTypeDef GPIO_InitStruct;



void MX_GPIO_Init(void)
{
 80014c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80014c4:	2004      	movs	r0, #4
 80014c6:	f7ff ffed 	bl	80014a4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80014ca:	2080      	movs	r0, #128	; 0x80
 80014cc:	f7ff ffea 	bl	80014a4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80014d0:	2001      	movs	r0, #1
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);

  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 80014d2:	4c6a      	ldr	r4, [pc, #424]	; (800167c <MX_GPIO_Init+0x1bc>)
  GPIO_InitStruct.Pin = LED_B_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001680 <MX_GPIO_Init+0x1c0>
  GPIO_InitStruct.Pin = ENC2_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 80014d8:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 8001684 <MX_GPIO_Init+0x1c4>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80014dc:	f7ff ffe2 	bl	80014a4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80014e0:	2002      	movs	r0, #2
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80014e2:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
 80014e6:	f7ff ffdd 	bl	80014a4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80014ea:	2008      	movs	r0, #8
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014ec:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014ee:	2601      	movs	r6, #1
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80014f0:	f7ff ffd8 	bl	80014a4 <LL_AHB2_GRP1_EnableClock>
  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 80014f4:	270c      	movs	r7, #12
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	4621      	mov	r1, r4
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LED_G_PIN|LED_R_PIN;
 80014fc:	6027      	str	r7, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014fe:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001500:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001502:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001504:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f006 fc49 	bl	8007d9c <LL_GPIO_Init>
 800150a:	f8c9 7028 	str.w	r7, [r9, #40]	; 0x28
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150e:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = LED_B_PIN;
 8001510:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LED_B_PIN;
 8001516:	6027      	str	r7, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001518:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800151a:	60a5      	str	r5, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800151c:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800151e:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001520:	f006 fc3c 	bl	8007d9c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_CONNECTIVITY;
 8001524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001528:	f8c8 7028 	str.w	r7, [r8, #40]	; 0x28
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 800152c:	4621      	mov	r1, r4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800152e:	e884 0028 	stmia.w	r4, {r3, r5}
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 8001532:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001534:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2703      	movs	r7, #3
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001538:	6123      	str	r3, [r4, #16]
  LL_GPIO_Init(USB_CONNECTIVITY_GPIO_PORT, &GPIO_InitStruct);
 800153a:	f006 fc2f 	bl	8007d9c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = ENC2_CS_PIN;
 800153e:	2240      	movs	r2, #64	; 0x40
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 8001540:	4621      	mov	r1, r4
 8001542:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = ENC2_CS_PIN;
 8001544:	6022      	str	r2, [r4, #0]
 8001546:	9201      	str	r2, [sp, #4]

  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
 8001548:	f04f 0b80 	mov.w	fp, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800154c:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001550:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001552:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(ENC2_CS_GPIO_PORT, &GPIO_InitStruct);
 8001554:	f006 fc22 	bl	8007d9c <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001558:	2302      	movs	r3, #2
  LL_GPIO_Init(ENC2_DATA_GPIO_PORT, &GPIO_InitStruct);
 800155a:	4621      	mov	r1, r4
 800155c:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800155e:	6123      	str	r3, [r4, #16]
  GPIO_InitStruct.Pin =  ENC2_DATA_PIN;
 8001560:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001564:	6065      	str	r5, [r4, #4]
  LL_GPIO_Init(ENC2_DATA_GPIO_PORT, &GPIO_InitStruct);
 8001566:	f006 fc19 	bl	8007d9c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = ENC2_SCLK_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(ENC2_SCLK_GPIO_PORT, &GPIO_InitStruct);
 800156a:	4621      	mov	r1, r4
 800156c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = ENC2_SCLK_PIN;
 800156e:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001572:	6066      	str	r6, [r4, #4]



  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 8001574:	f44f 7b80 	mov.w	fp, #256	; 0x100
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800157a:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800157c:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(ENC2_SCLK_GPIO_PORT, &GPIO_InitStruct);
 800157e:	f006 fc0d 	bl	8007d9c <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI1_CS_GPIO_PORT, &GPIO_InitStruct);
 8001582:	4621      	mov	r1, r4
 8001584:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = SPI1_CS_PIN;
 8001586:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800158a:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800158e:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001590:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI1_CS_GPIO_PORT, &GPIO_InitStruct);
 8001592:	f006 fc03 	bl	8007d9c <LL_GPIO_Init>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001596:	f8c9 b018 	str.w	fp, [r9, #24]
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 800159a:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
 800159c:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 80015a0:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = SPI2_CS_PIN;
 80015a2:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015a6:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015aa:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015ac:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI2_CS_GPIO_PORT, &GPIO_InitStruct);
 80015ae:	f006 fbf5 	bl	8007d9c <LL_GPIO_Init>
 80015b2:	f8c8 b018 	str.w	fp, [r8, #24]
  GPIO_InitStruct.Pin = SPI3_CS_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 80015b6:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8001688 <MX_GPIO_Init+0x1c8>
  GPIO_InitStruct.Pin = SPI3_CS_PIN;
 80015ba:	6026      	str	r6, [r4, #0]
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 80015bc:	4621      	mov	r1, r4
 80015be:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015c0:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015c4:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015c6:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI3_CS_GPIO_PORT, &GPIO_InitStruct);
 80015c8:	f006 fbe8 	bl	8007d9c <LL_GPIO_Init>
 80015cc:	f8cb 6018 	str.w	r6, [fp, #24]
  LL_GPIO_SetOutputPin(SPI3_CS_GPIO_PORT, SPI3_CS_PIN);

  GPIO_InitStruct.Pin = SPI1_IMU2_CS_Pin;
 80015d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI1_IMU2_CS_GPIO_Port, &GPIO_InitStruct);
 80015d4:	4621      	mov	r1, r4
 80015d6:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = SPI1_IMU2_CS_Pin;
 80015d8:	6023      	str	r3, [r4, #0]
 80015da:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015dc:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015e0:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015e2:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI1_IMU2_CS_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f006 fbda 	bl	8007d9c <LL_GPIO_Init>
 80015e8:	9b00      	ldr	r3, [sp, #0]
 80015ea:	f8c9 3018 	str.w	r3, [r9, #24]
  GPIO_InitStruct.Pin = SPI3_IMU5_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 80015ee:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = SPI3_IMU5_CS_Pin;
 80015f0:	2302      	movs	r3, #2
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 80015f2:	4658      	mov	r0, fp
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	e884 00c8 	stmia.w	r4, {r3, r6, r7}
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015f8:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015fa:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(SPI3_IMU5_CS_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f006 fbce 	bl	8007d9c <LL_GPIO_Init>
 8001600:	2302      	movs	r3, #2
 8001602:	f8cb 3018 	str.w	r3, [fp, #24]

  /**/
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 8001606:	4621      	mov	r1, r4
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
 8001608:	f04f 0b10 	mov.w	fp, #16
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 800160c:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800160e:	6123      	str	r3, [r4, #16]
  GPIO_InitStruct.Pin = SD_DETECT_PIN;
 8001610:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001614:	6065      	str	r5, [r4, #4]
  LL_GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStruct);
 8001616:	f006 fbc1 	bl	8007d9c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800161a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	4621      	mov	r1, r4
 8001620:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001622:	e884 0028 	stmia.w	r4, {r3, r5}
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001626:	6126      	str	r6, [r4, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f006 fbb8 	bl	8007d9c <LL_GPIO_Init>


  /**/
//
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;   // Portable IMU2 CS Pin
 800162c:	9a01      	ldr	r2, [sp, #4]
 800162e:	6022      	str	r2, [r4, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	4621      	mov	r1, r4
 8001632:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;   // Portable IMU2 CS Pin
 8001634:	9200      	str	r2, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001636:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800163a:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800163c:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	f006 fbad 	bl	8007d9c <LL_GPIO_Init>
 8001642:	9a00      	ldr	r2, [sp, #0]
 8001644:	f8c8 2018 	str.w	r2, [r8, #24]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;   // Portable IMU3 CS Pin
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001648:	4621      	mov	r1, r4
 800164a:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;   // Portable IMU3 CS Pin
 800164c:	f8c4 b000 	str.w	fp, [r4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001650:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001654:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001656:	6125      	str	r5, [r4, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001658:	f006 fba0 	bl	8007d9c <LL_GPIO_Init>
//  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
//  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
//  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_10);

  // Measure interrupt speed
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 800165c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	4621      	mov	r1, r4
 8001662:	4640      	mov	r0, r8
 8001664:	f8ca b018 	str.w	fp, [sl, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	e884 00c8 	stmia.w	r4, {r3, r6, r7}
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800166c:	60e5      	str	r5, [r4, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800166e:	6125      	str	r5, [r4, #16]
  // Greg end
}
 8001670:	b003      	add	sp, #12
 8001672:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	f006 bb91 	b.w	8007d9c <LL_GPIO_Init>
 800167a:	bf00      	nop
 800167c:	20008930 	.word	0x20008930
 8001680:	48000400 	.word	0x48000400
 8001684:	48000800 	.word	0x48000800
 8001688:	48001c00 	.word	0x48001c00

0800168c <BLUE_LED_OFF>:
 800168c:	4b02      	ldr	r3, [pc, #8]	; (8001698 <BLUE_LED_OFF+0xc>)
 800168e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001692:	619a      	str	r2, [r3, #24]
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	48000400 	.word	0x48000400

0800169c <ALL_LED_OFF>:
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <ALL_LED_OFF+0x18>)
 800169e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016a2:	619a      	str	r2, [r3, #24]
 80016a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016a8:	2204      	movs	r2, #4
 80016aa:	619a      	str	r2, [r3, #24]
 80016ac:	2208      	movs	r2, #8
 80016ae:	619a      	str	r2, [r3, #24]
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	48000400 	.word	0x48000400

080016b8 <GREEN_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80016b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016bc:	2204      	movs	r2, #4
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80016c0:	4a03      	ldr	r2, [pc, #12]	; (80016d0 <GREEN_LED_ONLY+0x18>)
 80016c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c6:	6191      	str	r1, [r2, #24]
 80016c8:	2208      	movs	r2, #8
 80016ca:	619a      	str	r2, [r3, #24]
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	48000400 	.word	0x48000400

080016d4 <RED_LED_OFF>:
 80016d4:	4770      	bx	lr

080016d6 <GREEN_LED_OFF>:
 80016d6:	4770      	bx	lr

080016d8 <RED_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80016d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016dc:	2208      	movs	r2, #8
 80016de:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80016e0:	4a03      	ldr	r2, [pc, #12]	; (80016f0 <RED_LED_ONLY+0x18>)
 80016e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e6:	6191      	str	r1, [r2, #24]
 80016e8:	2204      	movs	r2, #4
 80016ea:	619a      	str	r2, [r3, #24]
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	48000400 	.word	0x48000400

080016f4 <BLUE_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <BLUE_LED_ONLY+0x18>)
 80016f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80016fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001700:	2204      	movs	r2, #4
 8001702:	619a      	str	r2, [r3, #24]
 8001704:	2208      	movs	r2, #8
 8001706:	619a      	str	r2, [r3, #24]
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	48000400 	.word	0x48000400

08001710 <VIOLET_LED_ONLY>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <VIOLET_LED_ONLY+0x18>)
 8001712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001718:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800171c:	2204      	movs	r2, #4
 800171e:	619a      	str	r2, [r3, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001720:	2208      	movs	r2, #8
 8001722:	629a      	str	r2, [r3, #40]	; 0x28
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	48000400 	.word	0x48000400

0800172c <CYAN_LED_ONLY>:
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <CYAN_LED_ONLY+0x18>)
 800172e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
 8001734:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001738:	2204      	movs	r2, #4
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
 800173c:	2208      	movs	r2, #8
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	48000400 	.word	0x48000400

08001748 <ALL_LED_ON>:
 8001748:	f7ff bff0 	b.w	800172c <CYAN_LED_ONLY>

0800174c <SD_POWER_ON>:
 800174c:	4770      	bx	lr

0800174e <SD_POWER_OFF>:
void SD_POWER_ON(void)
{

}
void SD_POWER_OFF(void)
{
 800174e:	4770      	bx	lr

08001750 <processKnee>:
struct imu_data imu_data_now;
float imu_angle_past = 0.0, imu_angle_now;
// Greg end


void processKnee() {
 8001750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001754:	ed2d 8b04 	vpush	{d8-d9}
	if (Data_log_Start_Resume == 1) // Sensor Start Flag from VCP command / FATFS SD card file
 8001758:	4bc3      	ldr	r3, [pc, #780]	; (8001a68 <processKnee+0x318>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
void processKnee() {
 800175e:	b091      	sub	sp, #68	; 0x44
	if (Data_log_Start_Resume == 1) // Sensor Start Flag from VCP command / FATFS SD card file
 8001760:	f040 8132 	bne.w	80019c8 <processKnee+0x278>
	{
		// Get knee angle in deg
		angle_now = knee_angle();
 8001764:	f002 fb58 	bl	8003e18 <knee_angle>

		// Compute knee speed in deg/sec with low-frequency differentiator (fc = 10 Hz)
		if (count == 1)
 8001768:	4fc0      	ldr	r7, [pc, #768]	; (8001a6c <processKnee+0x31c>)
		angle_now = knee_angle();
 800176a:	4bc1      	ldr	r3, [pc, #772]	; (8001a70 <processKnee+0x320>)
 800176c:	4cc1      	ldr	r4, [pc, #772]	; (8001a74 <processKnee+0x324>)
 800176e:	ed83 0a00 	vstr	s0, [r3]
		if (count == 1)
 8001772:	783b      	ldrb	r3, [r7, #0]
 8001774:	4dc0      	ldr	r5, [pc, #768]	; (8001a78 <processKnee+0x328>)
 8001776:	4ec1      	ldr	r6, [pc, #772]	; (8001a7c <processKnee+0x32c>)
 8001778:	2b01      	cmp	r3, #1
		angle_now = knee_angle();
 800177a:	eeb0 8a40 	vmov.f32	s16, s0
		if (count == 1)
 800177e:	f040 8128 	bne.w	80019d2 <processKnee+0x282>
		{
			angular_velocity = 0.0;
 8001782:	2300      	movs	r3, #0
 8001784:	6023      	str	r3, [r4, #0]
		}
		else
		{
			angular_velocity = (float) 62.83*(angle_now - angle_old) + 0.8819*old_angular_velocity;
		}
		old_angular_velocity = (float) angular_velocity;
 8001786:	6823      	ldr	r3, [r4, #0]
 8001788:	6033      	str	r3, [r6, #0]
		angle_old            = (float) angle_now;
 800178a:	ed85 8a00 	vstr	s16, [r5]

		// Filter load cell with 2nd order low-pass Butterworth (fc = 20 Hz)
		uint16_t Loadcell_top = Read_Loadcell1();
 800178e:	f001 fc25 	bl	8002fdc <Read_Loadcell1>
 8001792:	9004      	str	r0, [sp, #16]
 8001794:	f8bd a010 	ldrh.w	sl, [sp, #16]
 8001798:	4eb9      	ldr	r6, [pc, #740]	; (8001a80 <processKnee+0x330>)
		uint16_t Loadcell_bot = Read_Loadcell2();
 800179a:	f001 fc4b 	bl	8003034 <Read_Loadcell2>
 800179e:	9005      	str	r0, [sp, #20]
 80017a0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80017a4:	9303      	str	r3, [sp, #12]
		if (count == 1)
 80017a6:	783b      	ldrb	r3, [r7, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	f040 8132 	bne.w	8001a12 <processKnee+0x2c2>
		{
			Loadcell_top_filtered    = Loadcell_top;
			Loadcell_top_m2          = Loadcell_top;
 80017ae:	4bb5      	ldr	r3, [pc, #724]	; (8001a84 <processKnee+0x334>)
			Loadcell_top_filtered_m2 = Loadcell_top;

			Loadcell_bot_filtered    = Loadcell_bot;
			Loadcell_bot_m2          = Loadcell_bot;
 80017b0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
			Loadcell_top_m2          = Loadcell_top;
 80017b4:	f8a3 a000 	strh.w	sl, [r3]
			Loadcell_top_filtered    = Loadcell_top;
 80017b8:	ee07 aa90 	vmov	s15, sl
			Loadcell_top_filtered_m2 = Loadcell_top;
 80017bc:	4bb2      	ldr	r3, [pc, #712]	; (8001a88 <processKnee+0x338>)
			Loadcell_top_filtered    = Loadcell_top;
 80017be:	eef8 7a67 	vcvt.f32.u32	s15, s15
			Loadcell_top_filtered_m2 = Loadcell_top;
 80017c2:	edc3 7a00 	vstr	s15, [r3]
			Loadcell_top_filtered    = Loadcell_top;
 80017c6:	edc6 7a00 	vstr	s15, [r6]
			Loadcell_bot_filtered    = Loadcell_bot;
 80017ca:	eddd 7a03 	vldr	s15, [sp, #12]
 80017ce:	4baf      	ldr	r3, [pc, #700]	; (8001a8c <processKnee+0x33c>)
 80017d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017d4:	edc3 7a00 	vstr	s15, [r3]
			Loadcell_bot_m2          = Loadcell_bot;
 80017d8:	4bad      	ldr	r3, [pc, #692]	; (8001a90 <processKnee+0x340>)
 80017da:	801a      	strh	r2, [r3, #0]
			Loadcell_bot_filtered_m2 = Loadcell_bot;
 80017dc:	4bad      	ldr	r3, [pc, #692]	; (8001a94 <processKnee+0x344>)
 80017de:	edc3 7a00 	vstr	s15, [r3]

			count++;
 80017e2:	2302      	movs	r3, #2

			Loadcell_bot_filtered    = Loadcell_bot;
			Loadcell_bot_m1          = Loadcell_bot;
			Loadcell_bot_filtered_m1 = Loadcell_bot;

			count++;
 80017e4:	703b      	strb	r3, [r7, #0]
			Loadcell_bot_filtered_m2 = Loadcell_bot_filtered_m1;
			Loadcell_bot_filtered_m1 = Loadcell_bot_filtered;
		}

		// Get raw IMU data
		imu_data_now = IMU1_read();
 80017e6:	4cac      	ldr	r4, [pc, #688]	; (8001a98 <processKnee+0x348>)
		// Compute hip angle using
		// 1) Madgwick filter (assumes X+ forward and Z+ upward)
//		hip_angle = -MadgwickAHRSupdateIMU(imu_data_now.GX/32.8*(3.1416/180), -imu_data_now.GZ/32.8*(3.1416/180), imu_data_now.GY/32.8*(3.1416/180), imu_data_now.AX, -imu_data_now.AZ, imu_data_now.AY);
//		hip_angle = hip_angle*rad2deg - angle_now;
		// 2) Complementary filter
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 80017e8:	4dac      	ldr	r5, [pc, #688]	; (8001a9c <processKnee+0x34c>)
		IMU_acc = -imu_data_now.AY;
 80017ea:	f8df b2f4 	ldr.w	fp, [pc, #756]	; 8001ae0 <processKnee+0x390>
		imu_angle_past = imu_angle_now;
		hip_angle      = (imu_angle_now * rad2deg) - angle_now;
 80017ee:	4fa0      	ldr	r7, [pc, #640]	; (8001a70 <processKnee+0x320>)
  WRITE_REG(GPIOx->BSRR, PinMask);
 80017f0:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 8001ae4 <processKnee+0x394>

		// Measure speed with oscope start
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_11);

		// Command motor
		my_st_impedance = controller_impedance(angle_now, angular_velocity, Loadcell_bot_filtered, Loadcell_top_filtered, IMU_acc, hip_angle);
 80017f4:	4e9f      	ldr	r6, [pc, #636]	; (8001a74 <processKnee+0x324>)
		Mag_Enc2_Store();

		// Store data
		// Data can only be stored as integers, so some scaling is done to help resolution
		Knee_data_storeIMU(imu_data_now.AX, imu_data_now.AY, imu_data_now.AZ, imu_data_now.GX, imu_data_now.GY, imu_data_now.GZ);
		Knee_data_store(angle_now / 0.088, hip_angle * 100, Loadcell_top, Loadcell_top_filtered);
 80017f6:	ed9f 9aaa 	vldr	s18, [pc, #680]	; 8001aa0 <processKnee+0x350>
		imu_data_now = IMU1_read();
 80017fa:	a80c      	add	r0, sp, #48	; 0x30
 80017fc:	f002 f8aa 	bl	8003954 <IMU1_read>
 8001800:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001802:	6023      	str	r3, [r4, #0]
 8001804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001806:	6063      	str	r3, [r4, #4]
 8001808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800180a:	60a3      	str	r3, [r4, #8]
		imu_data_now.GX -= -60;
 800180c:	88e3      	ldrh	r3, [r4, #6]
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 800180e:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8001aa4 <processKnee+0x354>
 8001812:	6820      	ldr	r0, [r4, #0]
 8001814:	ed95 0a00 	vldr	s0, [r5]
		imu_data_now.GX -= -60;
 8001818:	333c      	adds	r3, #60	; 0x3c
 800181a:	80e3      	strh	r3, [r4, #6]
		imu_data_now.GY -= -29;
 800181c:	8923      	ldrh	r3, [r4, #8]
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 800181e:	6861      	ldr	r1, [r4, #4]
		imu_data_now.GY -= -29;
 8001820:	331d      	adds	r3, #29
 8001822:	8123      	strh	r3, [r4, #8]
		imu_data_now.GZ -= -16;
 8001824:	8963      	ldrh	r3, [r4, #10]
 8001826:	3310      	adds	r3, #16
 8001828:	8163      	strh	r3, [r4, #10]
		IMU_acc = -imu_data_now.AY;
 800182a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 800182e:	68a2      	ldr	r2, [r4, #8]
		IMU_acc = -imu_data_now.AY;
 8001830:	425b      	negs	r3, r3
 8001832:	ee07 3a90 	vmov	s15, r3
 8001836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183a:	edcb 7a00 	vstr	s15, [fp]
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 800183e:	f002 fb03 	bl	8003e48 <IMU_orientation>
		hip_angle      = (imu_angle_now * rad2deg) - angle_now;
 8001842:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8001aa8 <processKnee+0x358>
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 8001846:	4b99      	ldr	r3, [pc, #612]	; (8001aac <processKnee+0x35c>)
		imu_angle_past = imu_angle_now;
 8001848:	ed85 0a00 	vstr	s0, [r5]
		hip_angle      = (imu_angle_now * rad2deg) - angle_now;
 800184c:	ee60 7a07 	vmul.f32	s15, s0, s14
		imu_angle_now  = IMU_orientation(imu_data_now, imu_angle_past, dt_s);
 8001850:	ed83 0a00 	vstr	s0, [r3]
		hip_angle      = (imu_angle_now * rad2deg) - angle_now;
 8001854:	ee17 0a90 	vmov	r0, s15
 8001858:	f7fe fe76 	bl	8000548 <__aeabi_f2d>
 800185c:	a37c      	add	r3, pc, #496	; (adr r3, 8001a50 <processKnee+0x300>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe ffef 	bl	8000844 <__aeabi_ddiv>
 8001866:	ed97 8a00 	vldr	s16, [r7]
		my_st_impedance = controller_impedance(angle_now, angular_velocity, Loadcell_bot_filtered, Loadcell_top_filtered, IMU_acc, hip_angle);
 800186a:	4d91      	ldr	r5, [pc, #580]	; (8001ab0 <processKnee+0x360>)
		hip_angle      = (imu_angle_now * rad2deg) - angle_now;
 800186c:	4680      	mov	r8, r0
 800186e:	ee18 0a10 	vmov	r0, s16
 8001872:	4689      	mov	r9, r1
 8001874:	f7fe fe68 	bl	8000548 <__aeabi_f2d>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4640      	mov	r0, r8
 800187e:	4649      	mov	r1, r9
 8001880:	f7fe fd02 	bl	8000288 <__aeabi_dsub>
 8001884:	f7ff f98c 	bl	8000ba0 <__aeabi_d2f>
 8001888:	f8df 825c 	ldr.w	r8, [pc, #604]	; 8001ae8 <processKnee+0x398>
		my_st_impedance = controller_impedance(angle_now, angular_velocity, Loadcell_bot_filtered, Loadcell_top_filtered, IMU_acc, hip_angle);
 800188c:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 8001a80 <processKnee+0x330>
		hip_angle      = (imu_angle_now * rad2deg) - angle_now;
 8001890:	f8c8 0000 	str.w	r0, [r8]
 8001894:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001898:	f8ca 3018 	str.w	r3, [sl, #24]
 800189c:	9306      	str	r3, [sp, #24]
		my_st_impedance = controller_impedance(angle_now, angular_velocity, Loadcell_bot_filtered, Loadcell_top_filtered, IMU_acc, hip_angle);
 800189e:	4b7b      	ldr	r3, [pc, #492]	; (8001a8c <processKnee+0x33c>)
 80018a0:	ed9b 2a00 	vldr	s4, [fp]
 80018a4:	ed93 1a00 	vldr	s2, [r3]
 80018a8:	edd9 1a00 	vldr	s3, [r9]
 80018ac:	edd6 0a00 	vldr	s1, [r6]
 80018b0:	aa08      	add	r2, sp, #32
 80018b2:	ee02 0a90 	vmov	s5, r0
 80018b6:	eeb0 0a48 	vmov.f32	s0, s16
 80018ba:	4610      	mov	r0, r2
 80018bc:	9203      	str	r2, [sp, #12]
 80018be:	f7ff fd67 	bl	8001390 <controller_impedance>
 80018c2:	9a03      	ldr	r2, [sp, #12]
  WRITE_REG(GPIOx->BRR, PinMask);
 80018c4:	9b06      	ldr	r3, [sp, #24]
 80018c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80018c8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80018cc:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
		F_Sensor_ADC_Store();
 80018d0:	f001 fbdc 	bl	800308c <F_Sensor_ADC_Store>
		Mag_Enc2_Store();
 80018d4:	f002 fa1c 	bl	8003d10 <Mag_Enc2_Store>
		Knee_data_storeIMU(imu_data_now.AX, imu_data_now.AY, imu_data_now.AZ, imu_data_now.GX, imu_data_now.GY, imu_data_now.GZ);
 80018d8:	f9b4 e00a 	ldrsh.w	lr, [r4, #10]
 80018dc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80018e0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80018e4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80018e8:	f9b4 0000 	ldrsh.w	r0, [r4]
 80018ec:	f8cd e004 	str.w	lr, [sp, #4]
 80018f0:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
 80018f4:	9400      	str	r4, [sp, #0]
 80018f6:	f002 f86f 	bl	80039d8 <Knee_data_storeIMU>
		Knee_data_store(angle_now / 0.088, hip_angle * 100, Loadcell_top, Loadcell_top_filtered);
 80018fa:	ed98 8a00 	vldr	s16, [r8]
 80018fe:	edd9 8a00 	vldr	s17, [r9]
 8001902:	6838      	ldr	r0, [r7, #0]
 8001904:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8001908:	ee28 8a09 	vmul.f32	s16, s16, s18
 800190c:	f7fe fe1c 	bl	8000548 <__aeabi_f2d>
 8001910:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 8001914:	a350      	add	r3, pc, #320	; (adr r3, 8001a58 <processKnee+0x308>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800191e:	f7fe ff91 	bl	8000844 <__aeabi_ddiv>
 8001922:	f7ff f915 	bl	8000b50 <__aeabi_d2iz>
 8001926:	ee18 3a90 	vmov	r3, s17
 800192a:	4622      	mov	r2, r4
 800192c:	ee18 1a10 	vmov	r1, s16
 8001930:	f002 f890 	bl	8003a54 <Knee_data_store>
		Knee_data_store1(Loadcell_bot, Loadcell_bot_filtered, my_st_impedance.desired_torque, angular_velocity * 100);
 8001934:	edd6 7a00 	vldr	s15, [r6]
 8001938:	edd5 6a01 	vldr	s13, [r5, #4]
 800193c:	4b53      	ldr	r3, [pc, #332]	; (8001a8c <processKnee+0x33c>)
 800193e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8001942:	ed93 7a00 	vldr	s14, [r3]
 8001946:	ee67 7a89 	vmul.f32	s15, s15, s18
 800194a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800194e:	ee17 3a90 	vmov	r3, s15
 8001952:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8001956:	ee17 2a90 	vmov	r2, s15
 800195a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800195e:	ee17 1a90 	vmov	r1, s15
 8001962:	f002 f8a7 	bl	8003ab4 <Knee_data_store1>
//        Knee_data_store2(15,16);    <-- this is commented out in sensor.c

		if (Sub_cnt == 5) {
 8001966:	4b53      	ldr	r3, [pc, #332]	; (8001ab4 <processKnee+0x364>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	2a05      	cmp	r2, #5
 800196c:	d118      	bne.n	80019a0 <processKnee+0x250>
			//BSbuffer[s_flag].Blank1 = (uint8_t) (LL_GPIO_IsInputPinSet(GPIOA,LL_GPIO_PIN_10));
			BSbuffer[s_flag].RTC_Time = (uint32_t) (RTC->TR & 0x007F7F7F);
 800196e:	4d52      	ldr	r5, [pc, #328]	; (8001ab8 <processKnee+0x368>)
 8001970:	4c52      	ldr	r4, [pc, #328]	; (8001abc <processKnee+0x36c>)
 8001972:	7828      	ldrb	r0, [r5, #0]
 8001974:	4952      	ldr	r1, [pc, #328]	; (8001ac0 <processKnee+0x370>)
 8001976:	6822      	ldr	r2, [r4, #0]
 8001978:	eb01 3080 	add.w	r0, r1, r0, lsl #14
 800197c:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 8001980:	f643 76f8 	movw	r6, #16376	; 0x3ff8
 8001984:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8001988:	5182      	str	r2, [r0, r6]
			BSbuffer[s_flag].RTC_Date = (uint32_t) (RTC->DR & 0x00FFFF3F);
 800198a:	7828      	ldrb	r0, [r5, #0]
 800198c:	6862      	ldr	r2, [r4, #4]
 800198e:	eb01 3180 	add.w	r1, r1, r0, lsl #14
 8001992:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001996:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 800199a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800199e:	500a      	str	r2, [r1, r0]

		}

		// Switching Buffer
		if (Sub_cnt == Highest_sensor_count)    // Total samples to be stored in a 16KB buffer
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 80019a6:	f040 8162 	bne.w	8001c6e <processKnee+0x51e>
		{
			Sub_cnt = 0;          // Reset Counter of sensor element
 80019aa:	2100      	movs	r1, #0
 80019ac:	6019      	str	r1, [r3, #0]
			SD_write_Flag = 1;    // Flag set to write filled buffer content
 80019ae:	4b45      	ldr	r3, [pc, #276]	; (8001ac4 <processKnee+0x374>)
 80019b0:	4845      	ldr	r0, [pc, #276]	; (8001ac8 <processKnee+0x378>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
			// Changing Buffer
			if (s_flag == 0)    // if current storgae_buffer was 0
 80019b6:	4b40      	ldr	r3, [pc, #256]	; (8001ab8 <processKnee+0x368>)
 80019b8:	781c      	ldrb	r4, [r3, #0]
 80019ba:	f004 05ff 	and.w	r5, r4, #255	; 0xff
 80019be:	2c00      	cmp	r4, #0
 80019c0:	f040 8152 	bne.w	8001c68 <processKnee+0x518>
			{
				w_flag = 0;    // write_buffer to be saved in SD card = 0
 80019c4:	7005      	strb	r5, [r0, #0]
				s_flag = 1;    // current storgae_buffer is set 1
 80019c6:	701a      	strb	r2, [r3, #0]
		else
		{
			Sub_cnt++;    // Increment Counter of sensor element
		}
	}
}
 80019c8:	b011      	add	sp, #68	; 0x44
 80019ca:	ecbd 8b04 	vpop	{d8-d9}
 80019ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			angular_velocity = (float) 62.83*(angle_now - angle_old) + 0.8819*old_angular_velocity;
 80019d2:	edd5 7a00 	vldr	s15, [r5]
 80019d6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001acc <processKnee+0x37c>
 80019da:	ee70 7a67 	vsub.f32	s15, s0, s15
 80019de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e2:	ee17 0a90 	vmov	r0, s15
 80019e6:	f7fe fdaf 	bl	8000548 <__aeabi_f2d>
 80019ea:	4680      	mov	r8, r0
 80019ec:	6830      	ldr	r0, [r6, #0]
 80019ee:	4689      	mov	r9, r1
 80019f0:	f7fe fdaa 	bl	8000548 <__aeabi_f2d>
 80019f4:	a31a      	add	r3, pc, #104	; (adr r3, 8001a60 <processKnee+0x310>)
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f7fe fdf9 	bl	80005f0 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4640      	mov	r0, r8
 8001a04:	4649      	mov	r1, r9
 8001a06:	f7fe fc41 	bl	800028c <__adddf3>
 8001a0a:	f7ff f8c9 	bl	8000ba0 <__aeabi_d2f>
 8001a0e:	6020      	str	r0, [r4, #0]
 8001a10:	e6b9      	b.n	8001786 <processKnee+0x36>
		else if (count == 2)
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	4d2e      	ldr	r5, [pc, #184]	; (8001ad0 <processKnee+0x380>)
 8001a16:	4c2f      	ldr	r4, [pc, #188]	; (8001ad4 <processKnee+0x384>)
 8001a18:	d16a      	bne.n	8001af0 <processKnee+0x3a0>
			Loadcell_top_filtered    = Loadcell_top;
 8001a1a:	ee07 aa90 	vmov	s15, sl
 8001a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
			Loadcell_bot_filtered    = Loadcell_bot;
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <processKnee+0x33c>)
			Loadcell_top_filtered    = Loadcell_top;
 8001a24:	edc6 7a00 	vstr	s15, [r6]
			Loadcell_top_filtered_m1 = Loadcell_top;
 8001a28:	edc4 7a00 	vstr	s15, [r4]
			Loadcell_bot_filtered    = Loadcell_bot;
 8001a2c:	eddd 7a03 	vldr	s15, [sp, #12]
			Loadcell_bot_m1          = Loadcell_bot;
 8001a30:	f8bd 200c 	ldrh.w	r2, [sp, #12]
			Loadcell_top_m1          = Loadcell_top;
 8001a34:	f8a5 a000 	strh.w	sl, [r5]
			Loadcell_bot_filtered    = Loadcell_bot;
 8001a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a3c:	edc3 7a00 	vstr	s15, [r3]
			Loadcell_bot_m1          = Loadcell_bot;
 8001a40:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <processKnee+0x388>)
 8001a42:	801a      	strh	r2, [r3, #0]
			Loadcell_bot_filtered_m1 = Loadcell_bot;
 8001a44:	4b25      	ldr	r3, [pc, #148]	; (8001adc <processKnee+0x38c>)
 8001a46:	edc3 7a00 	vstr	s15, [r3]
			count++;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e6ca      	b.n	80017e4 <processKnee+0x94>
 8001a4e:	bf00      	nop
 8001a50:	2e48e8a7 	.word	0x2e48e8a7
 8001a54:	400921ff 	.word	0x400921ff
 8001a58:	020c49ba 	.word	0x020c49ba
 8001a5c:	3fb6872b 	.word	0x3fb6872b
 8001a60:	594af4f1 	.word	0x594af4f1
 8001a64:	3fec3886 	.word	0x3fec3886
 8001a68:	20008979 	.word	0x20008979
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000598 	.word	0x20000598
 8001a74:	200005a0 	.word	0x200005a0
 8001a78:	2000059c 	.word	0x2000059c
 8001a7c:	200005ac 	.word	0x200005ac
 8001a80:	2000895c 	.word	0x2000895c
 8001a84:	20008948 	.word	0x20008948
 8001a88:	20008960 	.word	0x20008960
 8001a8c:	2000894c 	.word	0x2000894c
 8001a90:	2000894a 	.word	0x2000894a
 8001a94:	20008968 	.word	0x20008968
 8001a98:	20008950 	.word	0x20008950
 8001a9c:	200005a8 	.word	0x200005a8
 8001aa0:	42c80000 	.word	0x42c80000
 8001aa4:	3b000000 	.word	0x3b000000
 8001aa8:	43340000 	.word	0x43340000
 8001aac:	20008970 	.word	0x20008970
 8001ab0:	20008924 	.word	0x20008924
 8001ab4:	200005b4 	.word	0x200005b4
 8001ab8:	200005ba 	.word	0x200005ba
 8001abc:	40002800 	.word	0x40002800
 8001ac0:	20000880 	.word	0x20000880
 8001ac4:	20008980 	.word	0x20008980
 8001ac8:	20000008 	.word	0x20000008
 8001acc:	427b51ec 	.word	0x427b51ec
 8001ad0:	20008964 	.word	0x20008964
 8001ad4:	2000896c 	.word	0x2000896c
 8001ad8:	20008966 	.word	0x20008966
 8001adc:	20008974 	.word	0x20008974
 8001ae0:	20000594 	.word	0x20000594
 8001ae4:	48000400 	.word	0x48000400
 8001ae8:	200005a4 	.word	0x200005a4
 8001aec:	3fd3eab3 	.word	0x3fd3eab3
			Loadcell_top_filtered = 1.6556f * Loadcell_top_filtered_m1
 8001af0:	ed94 8a00 	vldr	s16, [r4]
 8001af4:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 8001aec <processKnee+0x39c>
					- 0.7068 * Loadcell_top_filtered_m2 + 0.0128 * Loadcell_top
 8001af8:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 8001ca4 <processKnee+0x554>
					+ 0.0256 * Loadcell_top_m1 + 0.0128 * Loadcell_top_m2;
 8001afc:	882f      	ldrh	r7, [r5, #0]
			Loadcell_top_filtered = 1.6556f * Loadcell_top_filtered_m1
 8001afe:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001b02:	ee17 0a90 	vmov	r0, s15
 8001b06:	f7fe fd1f 	bl	8000548 <__aeabi_f2d>
 8001b0a:	4680      	mov	r8, r0
					- 0.7068 * Loadcell_top_filtered_m2 + 0.0128 * Loadcell_top
 8001b0c:	f8db 0000 	ldr.w	r0, [fp]
			Loadcell_top_filtered = 1.6556f * Loadcell_top_filtered_m1
 8001b10:	4689      	mov	r9, r1
					- 0.7068 * Loadcell_top_filtered_m2 + 0.0128 * Loadcell_top
 8001b12:	f7fe fd19 	bl	8000548 <__aeabi_f2d>
 8001b16:	a358      	add	r3, pc, #352	; (adr r3, 8001c78 <processKnee+0x528>)
 8001b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1c:	f7fe fd68 	bl	80005f0 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4640      	mov	r0, r8
 8001b26:	4649      	mov	r1, r9
 8001b28:	f7fe fbae 	bl	8000288 <__aeabi_dsub>
 8001b2c:	4680      	mov	r8, r0
 8001b2e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8001b32:	4689      	mov	r9, r1
 8001b34:	f7fe fcf6 	bl	8000524 <__aeabi_i2d>
 8001b38:	a351      	add	r3, pc, #324	; (adr r3, 8001c80 <processKnee+0x530>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fd57 	bl	80005f0 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4640      	mov	r0, r8
 8001b48:	4649      	mov	r1, r9
 8001b4a:	f7fe fb9f 	bl	800028c <__adddf3>
 8001b4e:	4680      	mov	r8, r0
					+ 0.0256 * Loadcell_top_m1 + 0.0128 * Loadcell_top_m2;
 8001b50:	4638      	mov	r0, r7
					- 0.7068 * Loadcell_top_filtered_m2 + 0.0128 * Loadcell_top
 8001b52:	4689      	mov	r9, r1
					+ 0.0256 * Loadcell_top_m1 + 0.0128 * Loadcell_top_m2;
 8001b54:	f7fe fce6 	bl	8000524 <__aeabi_i2d>
 8001b58:	a34b      	add	r3, pc, #300	; (adr r3, 8001c88 <processKnee+0x538>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fd47 	bl	80005f0 <__aeabi_dmul>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4640      	mov	r0, r8
 8001b68:	4649      	mov	r1, r9
 8001b6a:	f7fe fb8f 	bl	800028c <__adddf3>
 8001b6e:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8001ca8 <processKnee+0x558>
 8001b72:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001b76:	f8b8 0000 	ldrh.w	r0, [r8]
 8001b7a:	f7fe fcd3 	bl	8000524 <__aeabi_i2d>
 8001b7e:	a340      	add	r3, pc, #256	; (adr r3, 8001c80 <processKnee+0x530>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f7fe fd34 	bl	80005f0 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001b90:	f7fe fb7c 	bl	800028c <__adddf3>
 8001b94:	f7ff f804 	bl	8000ba0 <__aeabi_d2f>
			Loadcell_top_m1          = Loadcell_top;
 8001b98:	f8a5 a000 	strh.w	sl, [r5]
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 8001b9c:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8001cac <processKnee+0x55c>
			Loadcell_top_filtered_m1 = Loadcell_top_filtered;
 8001ba0:	6020      	str	r0, [r4, #0]
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 8001ba2:	f8da 4000 	ldr.w	r4, [sl]
			Loadcell_top_filtered = 1.6556f * Loadcell_top_filtered_m1
 8001ba6:	6030      	str	r0, [r6, #0]
			Loadcell_top_m2          = Loadcell_top_m1;
 8001ba8:	f8a8 7000 	strh.w	r7, [r8]
			Loadcell_top_filtered_m2 = Loadcell_top_filtered_m1;
 8001bac:	ed8b 8a00 	vstr	s16, [fp]
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f7fe fcc9 	bl	8000548 <__aeabi_f2d>
 8001bb6:	a339      	add	r3, pc, #228	; (adr r3, 8001c9c <processKnee+0x54c>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	f7fe fd18 	bl	80005f0 <__aeabi_dmul>
					- 0.7068 * Loadcell_bot_filtered_m2 + 0.0128 * Loadcell_bot
 8001bc0:	4f33      	ldr	r7, [pc, #204]	; (8001c90 <processKnee+0x540>)
					+ 0.0256 * Loadcell_bot_m1 + 0.0128 * Loadcell_bot_m2;
 8001bc2:	4d34      	ldr	r5, [pc, #208]	; (8001c94 <processKnee+0x544>)
 8001bc4:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8001cb0 <processKnee+0x560>
 8001bc8:	882e      	ldrh	r6, [r5, #0]
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 8001bca:	4680      	mov	r8, r0
					- 0.7068 * Loadcell_bot_filtered_m2 + 0.0128 * Loadcell_bot
 8001bcc:	6838      	ldr	r0, [r7, #0]
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 8001bce:	4689      	mov	r9, r1
					- 0.7068 * Loadcell_bot_filtered_m2 + 0.0128 * Loadcell_bot
 8001bd0:	f7fe fcba 	bl	8000548 <__aeabi_f2d>
 8001bd4:	a328      	add	r3, pc, #160	; (adr r3, 8001c78 <processKnee+0x528>)
 8001bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bda:	f7fe fd09 	bl	80005f0 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4640      	mov	r0, r8
 8001be4:	4649      	mov	r1, r9
 8001be6:	f7fe fb4f 	bl	8000288 <__aeabi_dsub>
 8001bea:	4680      	mov	r8, r0
 8001bec:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8001bf0:	4689      	mov	r9, r1
 8001bf2:	f7fe fc97 	bl	8000524 <__aeabi_i2d>
 8001bf6:	a322      	add	r3, pc, #136	; (adr r3, 8001c80 <processKnee+0x530>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	f7fe fcf8 	bl	80005f0 <__aeabi_dmul>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4640      	mov	r0, r8
 8001c06:	4649      	mov	r1, r9
 8001c08:	f7fe fb40 	bl	800028c <__adddf3>
 8001c0c:	4680      	mov	r8, r0
					+ 0.0256 * Loadcell_bot_m1 + 0.0128 * Loadcell_bot_m2;
 8001c0e:	4630      	mov	r0, r6
					- 0.7068 * Loadcell_bot_filtered_m2 + 0.0128 * Loadcell_bot
 8001c10:	4689      	mov	r9, r1
					+ 0.0256 * Loadcell_bot_m1 + 0.0128 * Loadcell_bot_m2;
 8001c12:	f7fe fc87 	bl	8000524 <__aeabi_i2d>
 8001c16:	a31c      	add	r3, pc, #112	; (adr r3, 8001c88 <processKnee+0x538>)
 8001c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1c:	f7fe fce8 	bl	80005f0 <__aeabi_dmul>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4640      	mov	r0, r8
 8001c26:	4649      	mov	r1, r9
 8001c28:	f7fe fb30 	bl	800028c <__adddf3>
 8001c2c:	4680      	mov	r8, r0
 8001c2e:	f8bb 0000 	ldrh.w	r0, [fp]
 8001c32:	4689      	mov	r9, r1
 8001c34:	f7fe fc76 	bl	8000524 <__aeabi_i2d>
 8001c38:	a311      	add	r3, pc, #68	; (adr r3, 8001c80 <processKnee+0x530>)
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	f7fe fcd7 	bl	80005f0 <__aeabi_dmul>
 8001c42:	460b      	mov	r3, r1
 8001c44:	4602      	mov	r2, r0
 8001c46:	4649      	mov	r1, r9
 8001c48:	4640      	mov	r0, r8
 8001c4a:	f7fe fb1f 	bl	800028c <__adddf3>
 8001c4e:	f7fe ffa7 	bl	8000ba0 <__aeabi_d2f>
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <processKnee+0x548>)
			Loadcell_bot_m2          = Loadcell_bot_m1;
 8001c54:	f8ab 6000 	strh.w	r6, [fp]
			Loadcell_bot_filtered = 1.6556 * Loadcell_bot_filtered_m1
 8001c58:	6018      	str	r0, [r3, #0]
			Loadcell_bot_m1          = Loadcell_bot;
 8001c5a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8001c5e:	802b      	strh	r3, [r5, #0]
			Loadcell_bot_filtered_m2 = Loadcell_bot_filtered_m1;
 8001c60:	603c      	str	r4, [r7, #0]
			Loadcell_bot_filtered_m1 = Loadcell_bot_filtered;
 8001c62:	f8ca 0000 	str.w	r0, [sl]
 8001c66:	e5be      	b.n	80017e6 <processKnee+0x96>
				w_flag = 1;    // write_buffer to be saved in SD card = 1
 8001c68:	7002      	strb	r2, [r0, #0]
				s_flag = 0;    // current storgae_buffer is set 0
 8001c6a:	7019      	strb	r1, [r3, #0]
 8001c6c:	e6ac      	b.n	80019c8 <processKnee+0x278>
			Sub_cnt++;    // Increment Counter of sensor element
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	3201      	adds	r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
}
 8001c74:	e6a8      	b.n	80019c8 <processKnee+0x278>
 8001c76:	bf00      	nop
 8001c78:	089a0275 	.word	0x089a0275
 8001c7c:	3fe69e1b 	.word	0x3fe69e1b
 8001c80:	eb1c432d 	.word	0xeb1c432d
 8001c84:	3f8a36e2 	.word	0x3f8a36e2
 8001c88:	eb1c432d 	.word	0xeb1c432d
 8001c8c:	3f9a36e2 	.word	0x3f9a36e2
 8001c90:	20008968 	.word	0x20008968
 8001c94:	20008966 	.word	0x20008966
 8001c98:	2000894c 	.word	0x2000894c
 8001c9c:	6cf41f21 	.word	0x6cf41f21
 8001ca0:	3ffa7d56 	.word	0x3ffa7d56
 8001ca4:	20008960 	.word	0x20008960
 8001ca8:	20008948 	.word	0x20008948
 8001cac:	20008974 	.word	0x20008974
 8001cb0:	2000894a 	.word	0x2000894a

08001cb4 <main>:
// Greg start
uint8_t isProcessKneeRequired = 0;
// Greg end


int main(void) {
 8001cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Pros_state = LP_STOP;                  // Default state after power ON reset
 8001cb8:	4c67      	ldr	r4, [pc, #412]	; (8001e58 <main+0x1a4>)
 8001cba:	2501      	movs	r5, #1
 8001cbc:	7025      	strb	r5, [r4, #0]
	SystemClock_Config_MSI_80MHz();	// Configure the system clock to 48 MHz from MSI, PLL disabled for power saving
 8001cbe:	f002 fb15 	bl	80042ec <SystemClock_Config_MSI_80MHz>

	// If RTC is previously configured and running via backup battery i.e. BackUp Register Data is available, No need to update RTC time again
	if (RTC_BAK_GetRegister(RTC, 0x01) != RTC_BKP_DATE_TIME_UPDTATED) //    0x01 value was arbitrarily set from previous Configure_RTC_Calendar()
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	4865      	ldr	r0, [pc, #404]	; (8001e5c <main+0x1a8>)
 8001cc6:	f000 febd 	bl	8002a44 <RTC_BAK_GetRegister>
 8001cca:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8001cce:	4298      	cmp	r0, r3
 8001cd0:	d001      	beq.n	8001cd6 <main+0x22>
	{
		MX_RTC_Init();   // Set RTC clock source and parameters
 8001cd2:	f000 fe25 	bl	8002920 <MX_RTC_Init>
	//CAN_mode();

	//Transmits a message over can
//clear state

	EPOS4_enable(CAN_ID);
 8001cd6:	4d62      	ldr	r5, [pc, #392]	; (8001e60 <main+0x1ac>)
	// Note: Data collection is stopped in Power on Reset. Send the command from PC LabVIEW software in USB VCP Mode to start data collection.
	// Data collection will resume after USB disconnect.
	// Only way to stop Data collection is by accessing SD card from PC LabVIEW program

	while (1) {
		if (isProcessKneeRequired) {
 8001cd8:	4f62      	ldr	r7, [pc, #392]	; (8001e64 <main+0x1b0>)
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8001cda:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001e8c <main+0x1d8>
	MX_GPIO_Init();
 8001cde:	f7ff fbef 	bl	80014c0 <MX_GPIO_Init>
	HAL_Init(); // Reset of all peripherals, Initializes the Flash interface and the Systick.
 8001ce2:	f003 fad7 	bl	8005294 <HAL_Init>
	DFU_Bypass();
 8001ce6:	f000 fbbf 	bl	8002468 <DFU_Bypass>
	Configure_USART_1();  // Debug with PC
 8001cea:	f001 fac1 	bl	8003270 <Configure_USART_1>
	sprintf(PrintBuf, "Hello");
 8001cee:	495e      	ldr	r1, [pc, #376]	; (8001e68 <main+0x1b4>)
 8001cf0:	485e      	ldr	r0, [pc, #376]	; (8001e6c <main+0x1b8>)
 8001cf2:	f009 fcb5 	bl	800b660 <strcpy>
	USART1_wr_print(PrintBuf, sizeof(PrintBuf));
 8001cf6:	2132      	movs	r1, #50	; 0x32
 8001cf8:	485c      	ldr	r0, [pc, #368]	; (8001e6c <main+0x1b8>)
 8001cfa:	f001 faf3 	bl	80032e4 <USART1_wr_print>
	P_IMU1_SPI1_Initialization_at_reset(); //IMU1-2__SPI1  (only IMU1 configured)
 8001cfe:	f001 fff9 	bl	8003cf4 <P_IMU1_SPI1_Initialization_at_reset>
	P_ADC_Sensor_GPIO_Init(); //ADC GPIOs //here we initialized the chip select pins as well
 8001d02:	f001 f8cd 	bl	8002ea0 <P_ADC_Sensor_GPIO_Init>
	CAN_configure();
 8001d06:	f000 f9cb 	bl	80020a0 <CAN_configure>
	EPOS4_enable(CAN_ID);
 8001d0a:	8828      	ldrh	r0, [r5, #0]
 8001d0c:	f7ff f964 	bl	8000fd8 <EPOS4_enable>
	EPOS4_set_operation_mode(CAN_ID, 0x0A); // torque mode
 8001d10:	210a      	movs	r1, #10
 8001d12:	8828      	ldrh	r0, [r5, #0]
 8001d14:	f7ff f92b 	bl	8000f6e <EPOS4_set_operation_mode>
	EPOS4_clear_errors(CAN_ID);
 8001d18:	8828      	ldrh	r0, [r5, #0]
 8001d1a:	f7ff f994 	bl	8001046 <EPOS4_clear_errors>
	delay_us(1500);
 8001d1e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001d22:	f002 faa1 	bl	8004268 <delay_us>
	EPOS4_enable(CAN_ID);
 8001d26:	8828      	ldrh	r0, [r5, #0]
		case Dormant_Idle_Stop: // Idle Lowest Power Stop Mode with no Data log (only wait for USB connectivity)

			EnterStop();   // Enter Stop Mode
			// Wake Up after STOP Mode only by USB EXTI Int

			if (USB_Present_ == 1) // After detecting USB attachment via EXTI_5 int
 8001d28:	4d51      	ldr	r5, [pc, #324]	; (8001e70 <main+0x1bc>)
	EPOS4_enable(CAN_ID);
 8001d2a:	f7ff f955 	bl	8000fd8 <EPOS4_enable>
	USB_PA9_EXTI_conf(); // USB connectivity pin detect Interrupt // Data_Pause_Resume_PC0_EXTI_conf();
 8001d2e:	f000 fe8d 	bl	8002a4c <USB_PA9_EXTI_conf>
	Configure_LPTIM2_Int(); // Configured LPTIM2 but not started. To be started before going to Loop
 8001d32:	f002 fb4b 	bl	80043cc <Configure_LPTIM2_Int>
	Configure_Interrupt();       // Re-arrange NVIC interrupt priority
 8001d36:	f000 fb45 	bl	80023c4 <Configure_Interrupt>
	Power_on_reset();            // Following reset is found by troubleshooting
 8001d3a:	f000 fb35 	bl	80023a8 <Power_on_reset>
	AIM_DataStart_at_Reset();
 8001d3e:	f001 fddb 	bl	80038f8 <AIM_DataStart_at_Reset>
	GREEN_LED_ONLY();
 8001d42:	f7ff fcb9 	bl	80016b8 <GREEN_LED_ONLY>
			isProcessKneeRequired = 0;
 8001d46:	2600      	movs	r6, #0
		if (isProcessKneeRequired) {
 8001d48:	783b      	ldrb	r3, [r7, #0]
 8001d4a:	b113      	cbz	r3, 8001d52 <main+0x9e>
			processKnee();
 8001d4c:	f7ff fd00 	bl	8001750 <processKnee>
			isProcessKneeRequired = 0;
 8001d50:	703e      	strb	r6, [r7, #0]
		switch (Pros_state) {
 8001d52:	7823      	ldrb	r3, [r4, #0]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d8f6      	bhi.n	8001d48 <main+0x94>
 8001d5a:	a201      	add	r2, pc, #4	; (adr r2, 8001d60 <main+0xac>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001d7d 	.word	0x08001d7d
 8001d64:	08001db7 	.word	0x08001db7
 8001d68:	08001d49 	.word	0x08001d49
 8001d6c:	08001e3d 	.word	0x08001e3d
 8001d70:	08001dd5 	.word	0x08001dd5
 8001d74:	08001e43 	.word	0x08001e43
 8001d78:	08001df1 	.word	0x08001df1
			EnterStop();   // Enter Stop Mode
 8001d7c:	f002 faa0 	bl	80042c0 <EnterStop>
			if (USB_Present_ == 1) // After detecting USB attachment via EXTI_5 int
 8001d80:	782b      	ldrb	r3, [r5, #0]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d104      	bne.n	8001d90 <main+0xdc>
					Pros_state = USB_MSC_VCP_Mode; // Next State USB_MSC_Mode Mode
 8001d86:	2304      	movs	r3, #4
 8001d88:	7023      	strb	r3, [r4, #0]
					USB_Present_ = 0;             // Reset Flag to avoid looping
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	702b      	strb	r3, [r5, #0]
 8001d8e:	e7da      	b.n	8001d46 <main+0x92>
			} else if (FATAL_Error == 1)         // Triggered from Error_Handler
 8001d90:	4b38      	ldr	r3, [pc, #224]	; (8001e74 <main+0x1c0>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d105      	bne.n	8001da4 <main+0xf0>
				FATAL_Error = 0;                  // Reset Flag to avoid looping
 8001d98:	4b36      	ldr	r3, [pc, #216]	; (8001e74 <main+0x1c0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
				Pros_state = Fatal_Error_State;  // Next State Fatal_Error_State
 8001d9e:	2307      	movs	r3, #7
				Pros_state = Dormant_Idle_Stop; // Stay Dormant Mode if no external events
 8001da0:	7023      	strb	r3, [r4, #0]
 8001da2:	e7d0      	b.n	8001d46 <main+0x92>
			} else if (SD_write_Flag == 1) // When BUffer full to store in SD card
 8001da4:	4b34      	ldr	r3, [pc, #208]	; (8001e78 <main+0x1c4>)
 8001da6:	781a      	ldrb	r2, [r3, #0]
 8001da8:	2a01      	cmp	r2, #1
 8001daa:	d111      	bne.n	8001dd0 <main+0x11c>
				Pros_state = Sensor_FATFS_Write; // Next State Sensor_FATFS_Write Mode
 8001dac:	2202      	movs	r2, #2
 8001dae:	7022      	strb	r2, [r4, #0]
				SD_write_Flag = 0;                // Reset Flag to avoid looping
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
 8001db4:	e7c7      	b.n	8001d46 <main+0x92>
			Battery_ADC_Value = 2500;
 8001db6:	4b31      	ldr	r3, [pc, #196]	; (8001e7c <main+0x1c8>)
 8001db8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001dbc:	801a      	strh	r2, [r3, #0]
				SD_Sensor_write();             // Write Sensor Buffer to SD card
 8001dbe:	f001 fd5b 	bl	8003878 <SD_Sensor_write>
				if (USB_Present_ == 1) // If USB attachment detected here via EXTI_5 int
 8001dc2:	782b      	ldrb	r3, [r5, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d0de      	beq.n	8001d86 <main+0xd2>
				} else if (FATAL_Error == 1)     // Triggered from Error_Handler
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <main+0x1c0>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d0e3      	beq.n	8001d98 <main+0xe4>
				Pros_state = LP_STOP; // Return to Low Power Mode Data collection
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e7e5      	b.n	8001da0 <main+0xec>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001dd4:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <main+0x1cc>)
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			ALL_LED_OFF();
 8001ddc:	f7ff fc5e 	bl	800169c <ALL_LED_OFF>
			Shut_Down_SD();
 8001de0:	f000 fd82 	bl	80028e8 <Shut_Down_SD>
			Reset_Variables_for_LowBattery();
 8001de4:	f000 fb76 	bl	80024d4 <Reset_Variables_for_LowBattery>
			Prepare_Goto_Dormant_Mode();
 8001de8:	f000 fb6a 	bl	80024c0 <Prepare_Goto_Dormant_Mode>
				Pros_state = Dormant_Idle_Stop; // Stay Dormant Mode if no external events
 8001dec:	2306      	movs	r3, #6
 8001dee:	e7d7      	b.n	8001da0 <main+0xec>
			RED_LED_ONLY();
 8001df0:	f7ff fc72 	bl	80016d8 <RED_LED_ONLY>
			FATFS_Logstart_Delete();
 8001df4:	f000 fc2a 	bl	800264c <FATFS_Logstart_Delete>
			Data_log_Start_Resume = 0;
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <main+0x1d0>)
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_DisableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8001dfa:	4a23      	ldr	r2, [pc, #140]	; (8001e88 <main+0x1d4>)
 8001dfc:	2600      	movs	r6, #0
 8001dfe:	701e      	strb	r6, [r3, #0]
			SD_write_Flag = 0;
 8001e00:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <main+0x1c4>)
 8001e02:	701e      	strb	r6, [r3, #0]
 8001e04:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <main+0x1cc>)
 8001e06:	f04f 0904 	mov.w	r9, #4
 8001e0a:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
 8001e0e:	6893      	ldr	r3, [r2, #8]
 8001e10:	f023 0302 	bic.w	r3, r3, #2
 8001e14:	6093      	str	r3, [r2, #8]
			SD_POWER_OFF();
 8001e16:	f7ff fc9a 	bl	800174e <SD_POWER_OFF>
 8001e1a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8001e1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e22:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
			EnterStop();   // Enter Stop Mode
 8001e26:	f002 fa4b 	bl	80042c0 <EnterStop>
			if (USB_Present_ == 1) // After detecting USB attachment via EXTI_5 int
 8001e2a:	782b      	ldrb	r3, [r5, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d1dd      	bne.n	8001dec <main+0x138>
				Pros_state = USB_MSC_VCP_Mode;   // Next State USB_MSC_Mode Mode
 8001e30:	f884 9000 	strb.w	r9, [r4]
				USB_Present_ = 0;                 // Reset Flag to avoid looping
 8001e34:	702e      	strb	r6, [r5, #0]
					{
				Pros_state = USB_MSC_VCP_Mode;   // Next State USB_MSC_Mode Mode
				USB_Present_ = 0;                 // Reset Flag to avoid looping
				SD_POWER_ON();               				// Power on SD CARD
 8001e36:	f7ff fc89 	bl	800174c <SD_POWER_ON>
 8001e3a:	e784      	b.n	8001d46 <main+0x92>
			USB_Init_Start(); // Initialize USB and Stay USB mode as long as USB cable connected
 8001e3c:	f001 fcae 	bl	800379c <USB_Init_Start>
			break;
 8001e40:	e781      	b.n	8001d46 <main+0x92>
			EnterStop();   // Enter Stop Mode
 8001e42:	f002 fa3d 	bl	80042c0 <EnterStop>
			if (USB_Present_ == 1) // After detecting USB attachment via EXTI_5 int
 8001e46:	782b      	ldrb	r3, [r5, #0]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d1cf      	bne.n	8001dec <main+0x138>
				Pros_state = USB_MSC_VCP_Mode;   // Next State USB_MSC_Mode Mode
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	7023      	strb	r3, [r4, #0]
				USB_Present_ = 0;                 // Reset Flag to avoid looping
 8001e50:	2300      	movs	r3, #0
 8001e52:	702b      	strb	r3, [r5, #0]
 8001e54:	e7ef      	b.n	8001e36 <main+0x182>
 8001e56:	bf00      	nop
 8001e58:	200088c0 	.word	0x200088c0
 8001e5c:	40002800 	.word	0x40002800
 8001e60:	20000004 	.word	0x20000004
 8001e64:	200005b9 	.word	0x200005b9
 8001e68:	0800cc54 	.word	0x0800cc54
 8001e6c:	20008be0 	.word	0x20008be0
 8001e70:	200005b8 	.word	0x200005b8
 8001e74:	20008f6c 	.word	0x20008f6c
 8001e78:	20008980 	.word	0x20008980
 8001e7c:	20008f48 	.word	0x20008f48
 8001e80:	e000e100 	.word	0xe000e100
 8001e84:	20008979 	.word	0x20008979
 8001e88:	40009400 	.word	0x40009400
 8001e8c:	40021000 	.word	0x40021000

08001e90 <LPTIM2_IRQHandler>:
  return (READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == (LPTIM_ISR_ARRM));
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <LPTIM2_IRQHandler+0x18>)
 8001e92:	681a      	ldr	r2, [r3, #0]
}


void LPTIM2_IRQHandler(void)   // Response of 10ms LPTIM interrupt
{
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)    // auto reload match interrupt has occured
 8001e94:	0792      	lsls	r2, r2, #30
 8001e96:	d506      	bpl.n	8001ea6 <LPTIM2_IRQHandler+0x16>
	{
		isProcessKneeRequired = 1;
 8001e98:	4a04      	ldr	r2, [pc, #16]	; (8001eac <LPTIM2_IRQHandler+0x1c>)
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	7011      	strb	r1, [r2, #0]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	f042 0202 	orr.w	r2, r2, #2
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	4770      	bx	lr
 8001ea8:	40009400 	.word	0x40009400
 8001eac:	200005b9 	.word	0x200005b9

08001eb0 <EXTI9_5_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine));
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <EXTI9_5_IRQHandler+0x18>)
 8001eb2:	695a      	ldr	r2, [r3, #20]
}


void EXTI9_5_IRQHandler(void)    // Interrupt from USB connectivity PIN PA9
{
	if(LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8001eb4:	0592      	lsls	r2, r2, #22
 8001eb6:	d505      	bpl.n	8001ec4 <EXTI9_5_IRQHandler+0x14>
	{
		USB_Present_=1;                            // USB present
 8001eb8:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <EXTI9_5_IRQHandler+0x1c>)
 8001eba:	2101      	movs	r1, #1
 8001ebc:	7011      	strb	r1, [r2, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ec2:	615a      	str	r2, [r3, #20]
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40010400 	.word	0x40010400
 8001ecc:	200005b8 	.word	0x200005b8

08001ed0 <mcp25625_reset>:
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <mcp25625_reset+0x30>)
 8001ed2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8001ed8:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <mcp25625_reset+0x34>)
 8001eda:	21c0      	movs	r1, #192	; 0xc0
 8001edc:	7311      	strb	r1, [r2, #12]
	setChipSelect();
	LL_SPI_TransmitData8(SPI2, CMD_RESET);
	//while (!(SPI2->SR & SPI_SR_RXNE)) {} ;
	// wait for completion

	while ((SPI2->SR & SPI_SR_BSY)) {	}; 	// no longer busy
 8001ede:	6891      	ldr	r1, [r2, #8]
 8001ee0:	0609      	lsls	r1, r1, #24
 8001ee2:	d4fc      	bmi.n	8001ede <mcp25625_reset+0xe>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ee8:	619a      	str	r2, [r3, #24]
	clearChipSelect();

	// clear receive fifo
	while ((SPI2->SR & SPI_SR_FRLVL)) {
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <mcp25625_reset+0x34>)
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 8001ef2:	d102      	bne.n	8001efa <mcp25625_reset+0x2a>
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
		(void)dummy;						// suppress unused variable warning
	};

	// reset requires a delay of 128 OSC1 clock cycles. That equals 12.8us.
	delay_us(50);
 8001ef4:	2032      	movs	r0, #50	; 0x32
 8001ef6:	f002 b9b7 	b.w	8004268 <delay_us>
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	e7f6      	b.n	8001eec <mcp25625_reset+0x1c>
 8001efe:	bf00      	nop
 8001f00:	48000400 	.word	0x48000400
 8001f04:	40003800 	.word	0x40003800

08001f08 <mcp25625_writeRegister>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <mcp25625_writeRegister+0x38>)
 8001f0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <mcp25625_writeRegister+0x3c>)
 8001f12:	2202      	movs	r2, #2
 8001f14:	731a      	strb	r2, [r3, #12]
 8001f16:	7318      	strb	r0, [r3, #12]
 8001f18:	7319      	strb	r1, [r3, #12]
	LL_SPI_TransmitData8(SPI2, CMD_WRITE);
	LL_SPI_TransmitData8(SPI2, reg);
	LL_SPI_TransmitData8(SPI2, value);

	// wait for completion
	while ((SPI2->SR & SPI_SR_FTLVL)) {	}; 	//transmit fifo empty?
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 8001f20:	d1fb      	bne.n	8001f1a <mcp25625_writeRegister+0x12>
	while ((SPI2->SR & SPI_SR_BSY)) {	}; 	// no longer busy
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	0612      	lsls	r2, r2, #24
 8001f26:	d4fc      	bmi.n	8001f22 <mcp25625_writeRegister+0x1a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <mcp25625_writeRegister+0x38>)
 8001f2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f2e:	619a      	str	r2, [r3, #24]
	clearChipSelect();

	// clear receive fifo
	while ((SPI2->SR & SPI_SR_FRLVL)) {
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <mcp25625_writeRegister+0x3c>)
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 8001f38:	d100      	bne.n	8001f3c <mcp25625_writeRegister+0x34>
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
		(void)dummy;						// suppress unused variable warning
	};


}
 8001f3a:	4770      	bx	lr
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	e7f8      	b.n	8001f32 <mcp25625_writeRegister+0x2a>
 8001f40:	48000400 	.word	0x48000400
 8001f44:	40003800 	.word	0x40003800

08001f48 <mcp25625_readRegister>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <mcp25625_readRegister+0x34>)
 8001f4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f4e:	629a      	str	r2, [r3, #40]	; 0x28
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <mcp25625_readRegister+0x38>)
 8001f52:	2203      	movs	r2, #3
 8001f54:	731a      	strb	r2, [r3, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	7318      	strb	r0, [r3, #12]
 8001f5a:	731a      	strb	r2, [r3, #12]
	LL_SPI_TransmitData8(SPI2, CMD_READ);
	LL_SPI_TransmitData8(SPI2, reg);
	LL_SPI_TransmitData8(SPI2, 0x00); 		// dummy value to transfer the response

	// wait for completion
	while ((SPI2->SR & SPI_SR_FTLVL)) {	}; 	//transmit fifo empty?
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 8001f62:	d1fb      	bne.n	8001f5c <mcp25625_readRegister+0x14>
	while ((SPI2->SR & SPI_SR_BSY)) {	}; 	// no longer busy
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	0612      	lsls	r2, r2, #24
 8001f68:	d4fc      	bmi.n	8001f64 <mcp25625_readRegister+0x1c>
	uint8_t dummy = SPI2->DR; 				// first byte is from cmd transfer
 8001f6a:	68da      	ldr	r2, [r3, #12]
	dummy = SPI2->DR;						// second byte is from address
 8001f6c:	68da      	ldr	r2, [r3, #12]
	result = SPI2->DR;						// actual result value
 8001f6e:	68d8      	ldr	r0, [r3, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f70:	4b02      	ldr	r3, [pc, #8]	; (8001f7c <mcp25625_readRegister+0x34>)
 8001f72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f76:	619a      	str	r2, [r3, #24]

	clearChipSelect();

	(void)dummy;						// suppress unused variable warning
	return result;
}
 8001f78:	b2c0      	uxtb	r0, r0
 8001f7a:	4770      	bx	lr
 8001f7c:	48000400 	.word	0x48000400
 8001f80:	40003800 	.word	0x40003800

08001f84 <mcp25625_loadTXB>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <mcp25625_loadTXB+0x4c>)

void mcp25625_loadTXB(uint8_t reg, uint8_t length, uint8_t * data) {
 8001f86:	b510      	push	{r4, lr}
 8001f88:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001f8c:	629c      	str	r4, [r3, #40]	; 0x28
 8001f8e:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <mcp25625_loadTXB+0x50>)

	setChipSelect();

	LL_SPI_TransmitData8(SPI2, reg);
	for ( uint8_t i = 0; i < length; i++) {
 8001f90:	4614      	mov	r4, r2
 8001f92:	7318      	strb	r0, [r3, #12]
 8001f94:	1aa0      	subs	r0, r4, r2
 8001f96:	b2c0      	uxtb	r0, r0
 8001f98:	4281      	cmp	r1, r0
 8001f9a:	d810      	bhi.n	8001fbe <mcp25625_loadTXB+0x3a>
		while (!(SPI2->SR & SPI_SR_TXE)) {};
		LL_SPI_TransmitData8(SPI2, data[i]);
	}

	// wait for completion
	while ((SPI2->SR & SPI_SR_FTLVL)) {	}; 	//transmit fifo empty?
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 8001fa2:	d1fb      	bne.n	8001f9c <mcp25625_loadTXB+0x18>
	while ((SPI2->SR & SPI_SR_BSY)) {	}; 	// no longer busy
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	0612      	lsls	r2, r2, #24
 8001fa8:	d4fc      	bmi.n	8001fa4 <mcp25625_loadTXB+0x20>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <mcp25625_loadTXB+0x4c>)
 8001fac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fb0:	619a      	str	r2, [r3, #24]
	clearChipSelect();

	// clear receive fifo
	while ((SPI2->SR & SPI_SR_FRLVL)) {
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <mcp25625_loadTXB+0x50>)
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 8001fba:	d107      	bne.n	8001fcc <mcp25625_loadTXB+0x48>
		(void)dummy;						// suppress unused variable warning
	};



}
 8001fbc:	bd10      	pop	{r4, pc}
		while (!(SPI2->SR & SPI_SR_TXE)) {};
 8001fbe:	6898      	ldr	r0, [r3, #8]
 8001fc0:	0780      	lsls	r0, r0, #30
 8001fc2:	d5fc      	bpl.n	8001fbe <mcp25625_loadTXB+0x3a>
		LL_SPI_TransmitData8(SPI2, data[i]);
 8001fc4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001fc8:	7318      	strb	r0, [r3, #12]
 8001fca:	e7e3      	b.n	8001f94 <mcp25625_loadTXB+0x10>
		uint8_t dummy = SPI2->DR; 			// clear rx fifo from the receives.
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	e7f1      	b.n	8001fb4 <mcp25625_loadTXB+0x30>
 8001fd0:	48000400 	.word	0x48000400
 8001fd4:	40003800 	.word	0x40003800

08001fd8 <mcp25625_sendCAN>:

/*
 * This must respect the TXB Control registers. Read it first!
 * By default, higher number buffer registers have higher priority.
 */
void mcp25625_sendCAN(txbuff_t * buffer) {
 8001fd8:	4601      	mov	r1, r0
 8001fda:	b508      	push	{r3, lr}
	return (txb_ctrl_t)mcp25625_readRegister(TXB2CTRL);
 8001fdc:	2050      	movs	r0, #80	; 0x50
 8001fde:	f7ff ffb3 	bl	8001f48 <mcp25625_readRegister>

	txb_ctrl_t txb;

	txb = getTXB2CTRL();
	// check if already sending
	if (!txb.bits.TXREQ) {
 8001fe2:	06c0      	lsls	r0, r0, #27
 8001fe4:	d40a      	bmi.n	8001ffc <mcp25625_sendCAN+0x24>
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB2_SIDH), 13, data);
 8001fe6:	460a      	mov	r2, r1
 8001fe8:	2044      	movs	r0, #68	; 0x44
 8001fea:	210d      	movs	r1, #13
 8001fec:	f7ff ffca 	bl	8001f84 <mcp25625_loadTXB>
	mcp25625_writeRegister(TXB2CTRL, TXBCTRL_TXREQ);
 8001ff0:	210b      	movs	r1, #11
 8001ff2:	2050      	movs	r0, #80	; 0x50
		// not sending, can load txb buffer
		loadTXB0(buffer->bytes);
		setTXREQ0();
		return; // once tx buffer is loaded, return
	}
}
 8001ff4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mcp25625_writeRegister(TXB0CTRL, TXBCTRL_TXREQ);
 8001ff8:	f7ff bf86 	b.w	8001f08 <mcp25625_writeRegister>
	return (txb_ctrl_t)mcp25625_readRegister(TXB1CTRL);
 8001ffc:	2040      	movs	r0, #64	; 0x40
 8001ffe:	f7ff ffa3 	bl	8001f48 <mcp25625_readRegister>
	if (!txb.bits.TXREQ) {
 8002002:	06c2      	lsls	r2, r0, #27
 8002004:	d407      	bmi.n	8002016 <mcp25625_sendCAN+0x3e>
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB1_SIDH), 13, data);
 8002006:	460a      	mov	r2, r1
 8002008:	2042      	movs	r0, #66	; 0x42
 800200a:	210d      	movs	r1, #13
 800200c:	f7ff ffba 	bl	8001f84 <mcp25625_loadTXB>
	mcp25625_writeRegister(TXB1CTRL, TXBCTRL_TXREQ);
 8002010:	210b      	movs	r1, #11
 8002012:	2040      	movs	r0, #64	; 0x40
 8002014:	e7ee      	b.n	8001ff4 <mcp25625_sendCAN+0x1c>
	return (txb_ctrl_t)mcp25625_readRegister(TXB0CTRL);
 8002016:	2030      	movs	r0, #48	; 0x30
 8002018:	f7ff ff96 	bl	8001f48 <mcp25625_readRegister>
	if (!txb.bits.TXREQ) {
 800201c:	06c3      	lsls	r3, r0, #27
 800201e:	d407      	bmi.n	8002030 <mcp25625_sendCAN+0x58>
	mcp25625_loadTXB((CMD_LOAD_TX_BUFFER_BASE | TXB0_SIDH), 13, data);
 8002020:	460a      	mov	r2, r1
 8002022:	2040      	movs	r0, #64	; 0x40
 8002024:	210d      	movs	r1, #13
 8002026:	f7ff ffad 	bl	8001f84 <mcp25625_loadTXB>
	mcp25625_writeRegister(TXB0CTRL, TXBCTRL_TXREQ);
 800202a:	210b      	movs	r1, #11
 800202c:	2030      	movs	r0, #48	; 0x30
 800202e:	e7e1      	b.n	8001ff4 <mcp25625_sendCAN+0x1c>
 8002030:	bd08      	pop	{r3, pc}

08002032 <CAN_transmit>:

/*
 * callable entry function
 * IN: ID, length of message, pointer to message
 */
void CAN_transmit(uint16_t CAN_ID, uint8_t length, uint8_t * message) {
 8002032:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002034:	4604      	mov	r4, r0
 8002036:	460d      	mov	r5, r1
 8002038:	4616      	mov	r6, r2
	txbuff_t t;
	memset(&t, 0, sizeof(t));
 800203a:	2100      	movs	r1, #0
 800203c:	220d      	movs	r2, #13
 800203e:	4668      	mov	r0, sp
 8002040:	f009 f9f9 	bl	800b436 <memset>

	t.txb.SIDH = CAN_ID >> 3;
 8002044:	08e3      	lsrs	r3, r4, #3
	t.txb.SIDL.value = (CAN_ID & 0x07) << 5;
 8002046:	0164      	lsls	r4, r4, #5
	t.txb.SIDH = CAN_ID >> 3;
 8002048:	f88d 3000 	strb.w	r3, [sp]
	t.txb.SIDL.value = (CAN_ID & 0x07) << 5;
 800204c:	f88d 4001 	strb.w	r4, [sp, #1]
	t.txb.DLC.value = length;
 8002050:	f88d 5004 	strb.w	r5, [sp, #4]
	for (uint8_t i = 0; i < length; i++) {
 8002054:	2300      	movs	r3, #0
 8002056:	b2da      	uxtb	r2, r3
 8002058:	4295      	cmp	r5, r2
 800205a:	d804      	bhi.n	8002066 <CAN_transmit+0x34>
		t.txb.data[i] = message[i];
	}

	mcp25625_sendCAN(&t);
 800205c:	4668      	mov	r0, sp
 800205e:	f7ff ffbb 	bl	8001fd8 <mcp25625_sendCAN>
}
 8002062:	b004      	add	sp, #16
 8002064:	bd70      	pop	{r4, r5, r6, pc}
		t.txb.data[i] = message[i];
 8002066:	eb0d 0203 	add.w	r2, sp, r3
 800206a:	5cf1      	ldrb	r1, [r6, r3]
 800206c:	7151      	strb	r1, [r2, #5]
 800206e:	3301      	adds	r3, #1
 8002070:	e7f1      	b.n	8002056 <CAN_transmit+0x24>
	...

08002074 <mcp25625_init>:

void mcp25625_init(void) {
 8002074:	b508      	push	{r3, lr}
	memset(&can_tranceiver, 0, sizeof(can_tranceiver));
 8002076:	f240 2276 	movw	r2, #630	; 0x276
 800207a:	2100      	movs	r1, #0
 800207c:	4806      	ldr	r0, [pc, #24]	; (8002098 <mcp25625_init+0x24>)
 800207e:	f009 f9da 	bl	800b436 <memset>
	spi2_init();
 8002082:	f001 ff95 	bl	8003fb0 <spi2_init>
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <mcp25625_init+0x28>)
 8002088:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800208c:	619a      	str	r2, [r3, #24]
	clearChipSelect();
	mcp25625_reset();

}
 800208e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mcp25625_reset();
 8002092:	f7ff bf1d 	b.w	8001ed0 <mcp25625_reset>
 8002096:	bf00      	nop
 8002098:	200005bb 	.word	0x200005bb
 800209c:	48000400 	.word	0x48000400

080020a0 <CAN_configure>:

void CAN_configure() {
 80020a0:	b508      	push	{r3, lr}
	c1.value = 0xC0;
	c2.value = 0x89;
	c3.value = 0x04;
	canctrl.value = 0x08;

	mcp25625_init();
 80020a2:	f7ff ffe7 	bl	8002074 <mcp25625_init>

	mcp25625_writeRegister(CNF1, c1.value);
 80020a6:	21c0      	movs	r1, #192	; 0xc0
 80020a8:	202a      	movs	r0, #42	; 0x2a
 80020aa:	f7ff ff2d 	bl	8001f08 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF2, c2.value);
 80020ae:	2189      	movs	r1, #137	; 0x89
 80020b0:	2029      	movs	r0, #41	; 0x29
 80020b2:	f7ff ff29 	bl	8001f08 <mcp25625_writeRegister>
	mcp25625_writeRegister(CNF3, c3.value);
 80020b6:	2104      	movs	r1, #4
 80020b8:	2028      	movs	r0, #40	; 0x28
 80020ba:	f7ff ff25 	bl	8001f08 <mcp25625_writeRegister>
	mcp25625_writeRegister(CANCTRL, canctrl.value);
 80020be:	2108      	movs	r1, #8
 80020c0:	200f      	movs	r0, #15

}
 80020c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mcp25625_writeRegister(CANCTRL, canctrl.value);
 80020c6:	f7ff bf1f 	b.w	8001f08 <mcp25625_writeRegister>
	...

080020cc <NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020cc:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80020d0:	4905      	ldr	r1, [pc, #20]	; (80020e8 <NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80020d4:	68ca      	ldr	r2, [r1, #12]
 80020d6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80020da:	4313      	orrs	r3, r2
 80020dc:	60cb      	str	r3, [r1, #12]
 80020de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80020e2:	bf00      	nop
 80020e4:	e7fd      	b.n	80020e2 <NVIC_SystemReset+0x16>
 80020e6:	bf00      	nop
 80020e8:	e000ed00 	.word	0xe000ed00
 80020ec:	05fa0004 	.word	0x05fa0004

080020f0 <LL_ADC_REG_StartConversion>:
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020f0:	6883      	ldr	r3, [r0, #8]
 80020f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	6083      	str	r3, [r0, #8]
 8002100:	4770      	bx	lr
	...

08002104 <LL_AHB2_GRP1_EnableClock>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <LL_AHB2_GRP1_EnableClock+0x18>)
 8002106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002108:	4302      	orrs	r2, r0
 800210a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800210c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 800210e:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002110:	4018      	ands	r0, r3
 8002112:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8002114:	9b01      	ldr	r3, [sp, #4]
}
 8002116:	b002      	add	sp, #8
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000

08002120 <LL_APB2_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <LL_APB2_GRP1_EnableClock+0x18>)
 8002122:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002124:	4302      	orrs	r2, r0
 8002126:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
{
 800212a:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800212c:	4018      	ands	r0, r3
 800212e:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8002130:	9b01      	ldr	r3, [sp, #4]
}
 8002132:	b002      	add	sp, #8
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000

0800213c <LL_GPIO_SetPinMode>:
{
 800213c:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800213e:	6803      	ldr	r3, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002140:	fa91 f4a1 	rbit	r4, r1
 8002144:	fab4 f484 	clz	r4, r4
 8002148:	fa91 f1a1 	rbit	r1, r1
 800214c:	2503      	movs	r5, #3
 800214e:	fab1 f181 	clz	r1, r1
 8002152:	0064      	lsls	r4, r4, #1
 8002154:	fa05 f404 	lsl.w	r4, r5, r4
 8002158:	0049      	lsls	r1, r1, #1
 800215a:	ea23 0304 	bic.w	r3, r3, r4
 800215e:	fa02 f101 	lsl.w	r1, r2, r1
 8002162:	4319      	orrs	r1, r3
 8002164:	6001      	str	r1, [r0, #0]
 8002166:	bd30      	pop	{r4, r5, pc}

08002168 <LL_ADC_REG_SetSequencerRanks>:
{
 8002168:	b530      	push	{r4, r5, lr}
 800216a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800216e:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	f401 7440 	and.w	r4, r1, #768	; 0x300
 800217a:	40dc      	lsrs	r4, r3
 800217c:	3030      	adds	r0, #48	; 0x30
  MODIFY_REG(*preg,
 800217e:	f001 011f 	and.w	r1, r1, #31
 8002182:	231f      	movs	r3, #31
 8002184:	fa03 f501 	lsl.w	r5, r3, r1
 8002188:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 800218c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002190:	f1c1 011a 	rsb	r1, r1, #26
 8002194:	ea23 0305 	bic.w	r3, r3, r5
 8002198:	fa22 f101 	lsr.w	r1, r2, r1
 800219c:	4319      	orrs	r1, r3
 800219e:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 80021a2:	bd30      	pop	{r4, r5, pc}

080021a4 <LL_ADC_SetChannelSamplingTime>:
{
 80021a4:	b570      	push	{r4, r5, r6, lr}
 80021a6:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80021aa:	fa96 f6a6 	rbit	r6, r6
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80021ae:	fab6 f386 	clz	r3, r6
 80021b2:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 80021b6:	40de      	lsrs	r6, r3
 80021b8:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 80021ba:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 80021be:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 80021c2:	fa93 f5a3 	rbit	r5, r3
 80021c6:	fab5 f585 	clz	r5, r5
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	2407      	movs	r4, #7
 80021d0:	fa21 f505 	lsr.w	r5, r1, r5
 80021d4:	fa04 f505 	lsl.w	r5, r4, r5
 80021d8:	fab3 f383 	clz	r3, r3
 80021dc:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 80021e0:	40d9      	lsrs	r1, r3
 80021e2:	ea24 0405 	bic.w	r4, r4, r5
 80021e6:	fa02 f101 	lsl.w	r1, r2, r1
 80021ea:	4321      	orrs	r1, r4
 80021ec:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 80021f0:	bd70      	pop	{r4, r5, r6, pc}

080021f2 <LL_GPIO_SetAFPin_0_7>:
{
 80021f2:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80021f4:	6a03      	ldr	r3, [r0, #32]
 80021f6:	fa91 f4a1 	rbit	r4, r1
 80021fa:	fab4 f484 	clz	r4, r4
 80021fe:	fa91 f1a1 	rbit	r1, r1
 8002202:	250f      	movs	r5, #15
 8002204:	fab1 f181 	clz	r1, r1
 8002208:	00a4      	lsls	r4, r4, #2
 800220a:	fa05 f404 	lsl.w	r4, r5, r4
 800220e:	0089      	lsls	r1, r1, #2
 8002210:	ea23 0304 	bic.w	r3, r3, r4
 8002214:	fa02 f101 	lsl.w	r1, r2, r1
 8002218:	4319      	orrs	r1, r3
 800221a:	6201      	str	r1, [r0, #32]
 800221c:	bd30      	pop	{r4, r5, pc}

0800221e <LL_GPIO_SetPinPull>:
{
 800221e:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002220:	68c3      	ldr	r3, [r0, #12]
 8002222:	fa91 f4a1 	rbit	r4, r1
 8002226:	fab4 f484 	clz	r4, r4
 800222a:	fa91 f1a1 	rbit	r1, r1
 800222e:	2503      	movs	r5, #3
 8002230:	fab1 f181 	clz	r1, r1
 8002234:	0064      	lsls	r4, r4, #1
 8002236:	fa05 f404 	lsl.w	r4, r5, r4
 800223a:	0049      	lsls	r1, r1, #1
 800223c:	ea23 0304 	bic.w	r3, r3, r4
 8002240:	fa02 f101 	lsl.w	r1, r2, r1
 8002244:	4319      	orrs	r1, r3
 8002246:	60c1      	str	r1, [r0, #12]
 8002248:	bd30      	pop	{r4, r5, pc}

0800224a <LL_GPIO_SetPinSpeed.constprop.6>:
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 800224a:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800224c:	6882      	ldr	r2, [r0, #8]
 800224e:	fa91 f3a1 	rbit	r3, r1
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	fa91 f1a1 	rbit	r1, r1
 800225a:	2403      	movs	r4, #3
 800225c:	fab1 f181 	clz	r1, r1
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	fa04 f303 	lsl.w	r3, r4, r3
 8002266:	0049      	lsls	r1, r1, #1
 8002268:	ea22 0303 	bic.w	r3, r2, r3
 800226c:	fa04 f101 	lsl.w	r1, r4, r1
 8002270:	4319      	orrs	r1, r3
 8002272:	6081      	str	r1, [r0, #8]
 8002274:	bd10      	pop	{r4, pc}
	...

08002278 <LL_RTC_DATE_GetDay.constprop.8>:
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetDay(RTC_TypeDef *RTCx)
{
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 8002278:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <LL_RTC_DATE_GetDay.constprop.8+0x2c>)
 800227a:	2030      	movs	r0, #48	; 0x30
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	fa90 f0a0 	rbit	r0, r0
 8002282:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 8002284:	fab0 f080 	clz	r0, r0
 8002288:	fa92 f2a2 	rbit	r2, r2
 800228c:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8002290:	fab2 f282 	clz	r2, r2
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	fa21 f000 	lsr.w	r0, r1, r0
 800229c:	40d3      	lsrs	r3, r2
}
 800229e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 80022a2:	4770      	bx	lr
 80022a4:	40002800 	.word	0x40002800

080022a8 <LL_RTC_DATE_GetMonth.constprop.9>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <LL_RTC_DATE_GetMonth.constprop.9+0x30>)
 80022aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	fa90 f0a0 	rbit	r0, r0
 80022b4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 80022b8:	fab0 f080 	clz	r0, r0
 80022bc:	fa92 f2a2 	rbit	r2, r2
 80022c0:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 80022c4:	fab2 f282 	clz	r2, r2
 80022c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80022cc:	fa21 f000 	lsr.w	r0, r1, r0
 80022d0:	40d3      	lsrs	r3, r2
}
 80022d2:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 80022d6:	4770      	bx	lr
 80022d8:	40002800 	.word	0x40002800

080022dc <LL_RTC_DATE_GetYear.constprop.10>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <LL_RTC_DATE_GetYear.constprop.10+0x30>)
 80022de:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	fa90 f0a0 	rbit	r0, r0
 80022e8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 80022ec:	fab0 f080 	clz	r0, r0
 80022f0:	fa92 f2a2 	rbit	r2, r2
 80022f4:	f403 0170 	and.w	r1, r3, #15728640	; 0xf00000
 80022f8:	fab2 f282 	clz	r2, r2
 80022fc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002300:	fa21 f000 	lsr.w	r0, r1, r0
 8002304:	40d3      	lsrs	r3, r2
}
 8002306:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800230a:	4770      	bx	lr
 800230c:	40002800 	.word	0x40002800

08002310 <LL_RTC_TIME_GetSecond.constprop.11>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 8002310:	4b0a      	ldr	r3, [pc, #40]	; (800233c <LL_RTC_TIME_GetSecond.constprop.11+0x2c>)
 8002312:	2070      	movs	r0, #112	; 0x70
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	fa90 f0a0 	rbit	r0, r0
 800231a:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 800231c:	fab0 f080 	clz	r0, r0
 8002320:	fa92 f2a2 	rbit	r2, r2
 8002324:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8002328:	fab2 f282 	clz	r2, r2
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	fa21 f000 	lsr.w	r0, r1, r0
 8002334:	40d3      	lsrs	r3, r2
}
 8002336:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800233a:	4770      	bx	lr
 800233c:	40002800 	.word	0x40002800

08002340 <LL_RTC_TIME_GetMinute.constprop.12>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <LL_RTC_TIME_GetMinute.constprop.12+0x30>)
 8002342:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	fa90 f0a0 	rbit	r0, r0
 800234c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 8002350:	fab0 f080 	clz	r0, r0
 8002354:	fa92 f2a2 	rbit	r2, r2
 8002358:	f403 41e0 	and.w	r1, r3, #28672	; 0x7000
 800235c:	fab2 f282 	clz	r2, r2
 8002360:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002364:	fa21 f000 	lsr.w	r0, r1, r0
 8002368:	40d3      	lsrs	r3, r2
}
 800236a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 800236e:	4770      	bx	lr
 8002370:	40002800 	.word	0x40002800

08002374 <LL_RTC_TIME_GetHour.constprop.13>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <LL_RTC_TIME_GetHour.constprop.13+0x30>)
 8002376:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	fa90 f0a0 	rbit	r0, r0
 8002380:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 8002384:	fab0 f080 	clz	r0, r0
 8002388:	fa92 f2a2 	rbit	r2, r2
 800238c:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
 8002390:	fab2 f282 	clz	r2, r2
 8002394:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002398:	fa21 f000 	lsr.w	r0, r1, r0
 800239c:	40d3      	lsrs	r3, r2
}
 800239e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 80023a2:	4770      	bx	lr
 80023a4:	40002800 	.word	0x40002800

080023a8 <Power_on_reset>:

	}

}

void Power_on_reset(void) {
 80023a8:	b508      	push	{r3, lr}
	if (*Reset_Ram_Key_Address != Reset_Key_Value) {
 80023aa:	4b04      	ldr	r3, [pc, #16]	; (80023bc <Power_on_reset+0x14>)
 80023ac:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <Power_on_reset+0x18>)
 80023ae:	6819      	ldr	r1, [r3, #0]
 80023b0:	4291      	cmp	r1, r2
 80023b2:	d002      	beq.n	80023ba <Power_on_reset+0x12>
		*Reset_Ram_Key_Address = Reset_Key_Value;
 80023b4:	601a      	str	r2, [r3, #0]
		NVIC_SystemReset();
 80023b6:	f7ff fe89 	bl	80020cc <NVIC_SystemReset>
 80023ba:	bd08      	pop	{r3, pc}
 80023bc:	20017ef0 	.word	0x20017ef0
 80023c0:	deadbeef 	.word	0xdeadbeef

080023c4 <Configure_Interrupt>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c4:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <Configure_Interrupt+0x2c>)
 80023c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023cc:	041b      	lsls	r3, r3, #16
 80023ce:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
 80023d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80023d8:	60d3      	str	r3, [r2, #12]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <Configure_Interrupt+0x30>)
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
 80023e8:	2210      	movs	r2, #16
 80023ea:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00
 80023f4:	e000e100 	.word	0xe000e100

080023f8 <Shut_Down_USB>:
  * @rmtoll CR2          USV           LL_PWR_DisableVddUSB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableVddUSB(void)
{
  CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 80023f8:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <Shut_Down_USB+0x2c>)
 80023fa:	6853      	ldr	r3, [r2, #4]
	update_FATFS_time(); // Write RTC time-stamp on File header/properties of last FATFS file to visualize in PC
	f_mount(0, "", 0); 	//  unmount FATFS file (of running sensor storage file)
	FATFS_UnLinkDriver(SDPath); //  unlink SD card driver (of running sensor storage file)
}

void Shut_Down_USB(void) {
 80023fc:	b510      	push	{r4, lr}
 80023fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

	LL_PWR_DisableVddUSB();                     // Disable VDDUSB supply for USB
	USB_Present_ = 0;  // reset the USB present flag to be set by EXTI interrupt

	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 8002402:	4c09      	ldr	r4, [pc, #36]	; (8002428 <Shut_Down_USB+0x30>)
 8002404:	6053      	str	r3, [r2, #4]
	USB_Present_ = 0;  // reset the USB present flag to be set by EXTI interrupt
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <Shut_Down_USB+0x34>)
 8002408:	2200      	movs	r2, #0
	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 800240a:	4620      	mov	r0, r4
	USB_Present_ = 0;  // reset the USB present flag to be set by EXTI interrupt
 800240c:	701a      	strb	r2, [r3, #0]
	USBD_Stop(&USBD_Device);                 // Stop the USB Device Core.
 800240e:	f007 f834 	bl	800947a <USBD_Stop>
	USBD_DeInit(&USBD_Device);               // De-Initialize the device library
 8002412:	4620      	mov	r0, r4
 8002414:	f007 f813 	bl	800943e <USBD_DeInit>
	__HAL_RCC_USB_OTG_FS_CLK_DISABLE()
 8002418:	4a05      	ldr	r2, [pc, #20]	; (8002430 <Shut_Down_USB+0x38>)
 800241a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800241c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002422:	bd10      	pop	{r4, pc}
 8002424:	40007000 	.word	0x40007000
 8002428:	20008988 	.word	0x20008988
 800242c:	200005b8 	.word	0x200005b8
 8002430:	40021000 	.word	0x40021000

08002434 <USB_Clock_Ready>:
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002434:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <USB_Clock_Ready+0x2c>)
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	update_FATFS_time(); // Write RTC time-stamp on File header/properties of last FATFS file to visualize in PC
	f_mount(0, "", 0); 	//  unmount FATFS file (of running sensor storage file)
	FATFS_UnLinkDriver(SDPath); //  unlink SD card driver (of running sensor storage file)
}

void USB_Clock_Ready(void) {
 800243c:	b082      	sub	sp, #8
 800243e:	605a      	str	r2, [r3, #4]
  * @rmtoll CR2          USV           LL_PWR_IsEnabledVddUSB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledVddUSB(void)
{
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 8002440:	685a      	ldr	r2, [r3, #4]
	LL_PWR_EnableVddUSB();                       // Enable VDDUSB supply for USB
	while (!LL_PWR_IsEnabledVddUSB())
 8002442:	0552      	lsls	r2, r2, #21
 8002444:	d5fc      	bpl.n	8002440 <USB_Clock_Ready+0xc>
		;                       // Wait for VDDUSB supply to activate
	__HAL_RCC_USB_OTG_FS_CLK_ENABLE()
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <USB_Clock_Ready+0x30>)
 8002448:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800244a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800244e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	9b01      	ldr	r3, [sp, #4]
	;     // Enable USB Clock
}
 800245a:	b002      	add	sp, #8
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40007000 	.word	0x40007000
 8002464:	40021000 	.word	0x40021000

08002468 <DFU_Bypass>:
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002468:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
int check;
void DFU_Bypass(void) {

	uint32_t i = 0;

	check = LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY);
 800246c:	4810      	ldr	r0, [pc, #64]	; (80024b0 <DFU_Bypass+0x48>)
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8002474:	f3c2 2240 	ubfx	r2, r2, #9, #1
void DFU_Bypass(void) {
 8002478:	b570      	push	{r4, r5, r6, lr}
	check = LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY);
 800247a:	6002      	str	r2, [r0, #0]
 800247c:	691a      	ldr	r2, [r3, #16]
	// if(check == 1)
	//	 CYAN_LED_ONLY();
	while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 800247e:	0592      	lsls	r2, r2, #22
 8002480:	d4fc      	bmi.n	800247c <DFU_Bypass+0x14>
		;  // Wait until USB cable disconnect from Charger
	if (*LP_Ram_Key_Address != Reset_Key_Value) {
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <DFU_Bypass+0x4c>)
 8002484:	4c0c      	ldr	r4, [pc, #48]	; (80024b8 <DFU_Bypass+0x50>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	42a2      	cmp	r2, r4
 800248a:	d010      	beq.n	80024ae <DFU_Bypass+0x46>
		*LP_Ram_Key_Address = Reset_Key_Value;
 800248c:	601c      	str	r4, [r3, #0]
		if (check == 1) {
 800248e:	b171      	cbz	r1, 80024ae <DFU_Bypass+0x46>
 8002490:	2505      	movs	r5, #5
 8002492:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
			/* Toggle IO in during 2s (10*200ms) */
			for (i = 0; i < 5; i++) {
				//   LL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
				LL_mDelay(200);
 8002496:	20c8      	movs	r0, #200	; 0xc8
 8002498:	f006 fb30 	bl	8008afc <LL_mDelay>
 800249c:	6933      	ldr	r3, [r6, #16]
				if (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY)) {
 800249e:	059b      	lsls	r3, r3, #22
 80024a0:	d503      	bpl.n	80024aa <DFU_Bypass+0x42>
					*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <DFU_Bypass+0x54>)
 80024a4:	601c      	str	r4, [r3, #0]
					NVIC_SystemReset();        // System reset
 80024a6:	f7ff fe11 	bl	80020cc <NVIC_SystemReset>
			for (i = 0; i < 5; i++) {
 80024aa:	3d01      	subs	r5, #1
 80024ac:	d1f3      	bne.n	8002496 <DFU_Bypass+0x2e>
 80024ae:	bd70      	pop	{r4, r5, r6, pc}
 80024b0:	20008cfc 	.word	0x20008cfc
 80024b4:	20017cf0 	.word	0x20017cf0
 80024b8:	deadbeef 	.word	0xdeadbeef
 80024bc:	20017ff0 	.word	0x20017ff0

080024c0 <Prepare_Goto_Dormant_Mode>:
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 80024c0:	4a03      	ldr	r2, [pc, #12]	; (80024d0 <Prepare_Goto_Dormant_Mode+0x10>)
 80024c2:	6893      	ldr	r3, [r2, #8]
 80024c4:	f023 0302 	bic.w	r3, r3, #2
 80024c8:	6093      	str	r3, [r2, #8]
	}
}

void Prepare_Goto_Dormant_Mode(void) {
	LL_LPTIM_DisableIT_ARRM(LPTIM2); // Disable auto reload match interrupt of LPTIM2
	SD_POWER_OFF();               // Power off SD CARD
 80024ca:	f7ff b940 	b.w	800174e <SD_POWER_OFF>
 80024ce:	bf00      	nop
 80024d0:	40009400 	.word	0x40009400

080024d4 <Reset_Variables_for_LowBattery>:
}

void Reset_Variables_for_LowBattery(void) // Reset all variables needed to Sensor logging in Double Buffer System
{

	SD_write_Flag = 0;
 80024d4:	4b01      	ldr	r3, [pc, #4]	; (80024dc <Reset_Variables_for_LowBattery+0x8>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
 80024da:	4770      	bx	lr
 80024dc:	20008980 	.word	0x20008980

080024e0 <GetNextIndex>:
	}

}

int GetNextIndex(char *path) // Read SD card content to save next value in auto increment format
{
 80024e0:	b530      	push	{r4, r5, lr}
 80024e2:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
	DIR dir;
	FILINFO fno;
	int i, index = -1;

	if (f_opendir(&dir, path) == FR_OK) {
 80024e6:	4601      	mov	r1, r0
 80024e8:	a808      	add	r0, sp, #32
 80024ea:	f008 fe30 	bl	800b14e <f_opendir>
 80024ee:	f04f 34ff 	mov.w	r4, #4294967295
 80024f2:	b9e0      	cbnz	r0, 800252e <GetNextIndex+0x4e>

		while (1) {
			if ((f_readdir(&dir, &fno) != FR_OK) || (fno.fname[0] == 0))
				break;

			if ((strstr(fno.fname, ".BIN") != NULL)
 80024f4:	4d10      	ldr	r5, [pc, #64]	; (8002538 <GetNextIndex+0x58>)
			if ((f_readdir(&dir, &fno) != FR_OK) || (fno.fname[0] == 0))
 80024f6:	a902      	add	r1, sp, #8
 80024f8:	a808      	add	r0, sp, #32
 80024fa:	f008 fe76 	bl	800b1ea <f_readdir>
 80024fe:	b9b0      	cbnz	r0, 800252e <GetNextIndex+0x4e>
 8002500:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002504:	b19b      	cbz	r3, 800252e <GetNextIndex+0x4e>
			if ((strstr(fno.fname, ".BIN") != NULL)
 8002506:	4629      	mov	r1, r5
 8002508:	f10d 0011 	add.w	r0, sp, #17
 800250c:	f009 f8b0 	bl	800b670 <strstr>
 8002510:	2800      	cmp	r0, #0
 8002512:	d0f0      	beq.n	80024f6 <GetNextIndex+0x16>
					&& (sscanf(fno.fname, "%d", &i) == 1)) // Searcing for .BIN file and determining highest index
 8002514:	aa01      	add	r2, sp, #4
 8002516:	4909      	ldr	r1, [pc, #36]	; (800253c <GetNextIndex+0x5c>)
 8002518:	f10d 0011 	add.w	r0, sp, #17
 800251c:	f009 f874 	bl	800b608 <siscanf>
 8002520:	2801      	cmp	r0, #1
 8002522:	d1e8      	bne.n	80024f6 <GetNextIndex+0x16>
 8002524:	9b01      	ldr	r3, [sp, #4]
 8002526:	429c      	cmp	r4, r3
 8002528:	bfb8      	it	lt
 800252a:	461c      	movlt	r4, r3
 800252c:	e7e3      	b.n	80024f6 <GetNextIndex+0x16>
				if (i > index)
					index = i;
		}
	}
	return (index + 1);
}
 800252e:	1c60      	adds	r0, r4, #1
 8002530:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8002534:	bd30      	pop	{r4, r5, pc}
 8002536:	bf00      	nop
 8002538:	0800cc88 	.word	0x0800cc88
 800253c:	0800cc81 	.word	0x0800cc81

08002540 <Try_FATFS_Mount>:
	}
	return 0;
}

void Try_FATFS_Mount(void) {
	if (Fat_mnt_fail == 1) {
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <Try_FATFS_Mount+0x44>)
void Try_FATFS_Mount(void) {
 8002542:	b510      	push	{r4, lr}
	if (Fat_mnt_fail == 1) {
 8002544:	681c      	ldr	r4, [r3, #0]
 8002546:	2c01      	cmp	r4, #1
 8002548:	d11a      	bne.n	8002580 <Try_FATFS_Mount+0x40>
		Fat_mnt_fail = 0;
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
		SD_POWER_OFF();
 800254e:	f7ff f8fe 	bl	800174e <SD_POWER_OFF>
		delay_us(10000); // wait 10 msec
 8002552:	f242 7010 	movw	r0, #10000	; 0x2710
 8002556:	f001 fe87 	bl	8004268 <delay_us>
		SD_POWER_ON();
 800255a:	f7ff f8f7 	bl	800174c <SD_POWER_ON>
		delay_us(1000000); // wait 1 sec
 800255e:	480a      	ldr	r0, [pc, #40]	; (8002588 <Try_FATFS_Mount+0x48>)
 8002560:	f001 fe82 	bl	8004268 <delay_us>
		//Retry FATFS link

		if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8002564:	4909      	ldr	r1, [pc, #36]	; (800258c <Try_FATFS_Mount+0x4c>)
 8002566:	480a      	ldr	r0, [pc, #40]	; (8002590 <Try_FATFS_Mount+0x50>)
 8002568:	f008 ff06 	bl	800b378 <FATFS_LinkDriver>
 800256c:	b928      	cbnz	r0, 800257a <Try_FATFS_Mount+0x3a>
				{
			if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 800256e:	4622      	mov	r2, r4
 8002570:	4906      	ldr	r1, [pc, #24]	; (800258c <Try_FATFS_Mount+0x4c>)
 8002572:	4808      	ldr	r0, [pc, #32]	; (8002594 <Try_FATFS_Mount+0x54>)
 8002574:	f008 fa2e 	bl	800a9d4 <f_mount>
 8002578:	b110      	cbz	r0, 8002580 <Try_FATFS_Mount+0x40>
					{
				Skip_FATFS = 1;
 800257a:	4b07      	ldr	r3, [pc, #28]	; (8002598 <Try_FATFS_Mount+0x58>)
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
 8002580:	bd10      	pop	{r4, pc}
 8002582:	bf00      	nop
 8002584:	20008c14 	.word	0x20008c14
 8002588:	000f4240 	.word	0x000f4240
 800258c:	20008d09 	.word	0x20008d09
 8002590:	0800cef0 	.word	0x0800cef0
 8002594:	20008d18 	.word	0x20008d18
 8002598:	20008f6d 	.word	0x20008f6d

0800259c <file_reopen_sync>:
		}
	}

}

void file_reopen_sync(void) {
 800259c:	b508      	push	{r3, lr}
	f_close(&MyFile);
 800259e:	4807      	ldr	r0, [pc, #28]	; (80025bc <file_reopen_sync+0x20>)
 80025a0:	f008 fc75 	bl	800ae8e <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 80025a4:	2212      	movs	r2, #18
 80025a6:	4906      	ldr	r1, [pc, #24]	; (80025c0 <file_reopen_sync+0x24>)
 80025a8:	4804      	ldr	r0, [pc, #16]	; (80025bc <file_reopen_sync+0x20>)
 80025aa:	f008 fa49 	bl	800aa40 <f_open>
	if (res != FR_OK) {
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <file_reopen_sync+0x28>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	b113      	cbz	r3, 80025ba <file_reopen_sync+0x1e>
		Fat_sync_read_fail = 1;
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <file_reopen_sync+0x2c>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	bd08      	pop	{r3, pc}
 80025bc:	20008f78 	.word	0x20008f78
 80025c0:	20008c5c 	.word	0x20008c5c
 80025c4:	200091fa 	.word	0x200091fa
 80025c8:	20008c1c 	.word	0x20008c1c

080025cc <file_reopen>:
	}
}

void file_reopen(void) {
 80025cc:	b508      	push	{r3, lr}
	f_close(&MyFile);
 80025ce:	4807      	ldr	r0, [pc, #28]	; (80025ec <file_reopen+0x20>)
 80025d0:	f008 fc5d 	bl	800ae8e <f_close>
	f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 80025d4:	2212      	movs	r2, #18
 80025d6:	4906      	ldr	r1, [pc, #24]	; (80025f0 <file_reopen+0x24>)
 80025d8:	4804      	ldr	r0, [pc, #16]	; (80025ec <file_reopen+0x20>)
 80025da:	f008 fa31 	bl	800aa40 <f_open>
	if (res != FR_OK) {
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <file_reopen+0x28>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	b113      	cbz	r3, 80025ea <file_reopen+0x1e>
		Fat_write_read_fail = 1;
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <file_reopen+0x2c>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	bd08      	pop	{r3, pc}
 80025ec:	20008f78 	.word	0x20008f78
 80025f0:	20008c5c 	.word	0x20008c5c
 80025f4:	200091fa 	.word	0x200091fa
 80025f8:	20008c18 	.word	0x20008c18

080025fc <file_mnt_reopen>:
	}
}

void file_mnt_reopen(void) {
 80025fc:	b508      	push	{r3, lr}
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 80025fe:	490c      	ldr	r1, [pc, #48]	; (8002630 <file_mnt_reopen+0x34>)
 8002600:	480c      	ldr	r0, [pc, #48]	; (8002634 <file_mnt_reopen+0x38>)
 8002602:	f008 feb9 	bl	800b378 <FATFS_LinkDriver>
 8002606:	b928      	cbnz	r0, 8002614 <file_mnt_reopen+0x18>
			{
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 8002608:	2201      	movs	r2, #1
 800260a:	4909      	ldr	r1, [pc, #36]	; (8002630 <file_mnt_reopen+0x34>)
 800260c:	480a      	ldr	r0, [pc, #40]	; (8002638 <file_mnt_reopen+0x3c>)
 800260e:	f008 f9e1 	bl	800a9d4 <f_mount>
 8002612:	b118      	cbz	r0, 800261c <file_mnt_reopen+0x20>
				{
			Fat_read_mnt_fail = 1;
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <file_mnt_reopen+0x40>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	bd08      	pop	{r3, pc}
		} else  // Good to Go
		{
			res = f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 800261c:	2212      	movs	r2, #18
 800261e:	4908      	ldr	r1, [pc, #32]	; (8002640 <file_mnt_reopen+0x44>)
 8002620:	4808      	ldr	r0, [pc, #32]	; (8002644 <file_mnt_reopen+0x48>)
 8002622:	f008 fa0d 	bl	800aa40 <f_open>
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <file_mnt_reopen+0x4c>)
 8002628:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) {
 800262a:	2800      	cmp	r0, #0
 800262c:	d1f2      	bne.n	8002614 <file_mnt_reopen+0x18>
 800262e:	bd08      	pop	{r3, pc}
 8002630:	20008d09 	.word	0x20008d09
 8002634:	0800cef0 	.word	0x0800cef0
 8002638:	20008d18 	.word	0x20008d18
 800263c:	20008cc0 	.word	0x20008cc0
 8002640:	20008c5c 	.word	0x20008c5c
 8002644:	20008f78 	.word	0x20008f78
 8002648:	200091fa 	.word	0x200091fa

0800264c <FATFS_Logstart_Delete>:
		}
		delay_us(100);
	}
}

void FATFS_Logstart_Delete(void) {
 800264c:	b508      	push	{r3, lr}

	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 800264e:	490d      	ldr	r1, [pc, #52]	; (8002684 <FATFS_Logstart_Delete+0x38>)
 8002650:	480d      	ldr	r0, [pc, #52]	; (8002688 <FATFS_Logstart_Delete+0x3c>)
 8002652:	f008 fe91 	bl	800b378 <FATFS_LinkDriver>
 8002656:	b958      	cbnz	r0, 8002670 <FATFS_Logstart_Delete+0x24>
			{
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 8002658:	2201      	movs	r2, #1
 800265a:	490a      	ldr	r1, [pc, #40]	; (8002684 <FATFS_Logstart_Delete+0x38>)
 800265c:	480b      	ldr	r0, [pc, #44]	; (800268c <FATFS_Logstart_Delete+0x40>)
 800265e:	f008 f9b9 	bl	800a9d4 <f_mount>
 8002662:	b910      	cbnz	r0, 800266a <FATFS_Logstart_Delete+0x1e>
				{     // Initialization Error Debugging
			//		 RED_LED_ON();
		}

		else {
			if (f_unlink("LogStart.txt") == FR_OK) { // If LogStart.txt file present, delete the file
 8002664:	480a      	ldr	r0, [pc, #40]	; (8002690 <FATFS_Logstart_Delete+0x44>)
 8002666:	f008 fdeb 	bl	800b240 <f_unlink>
			}
		}
		delay_us(100);
 800266a:	2064      	movs	r0, #100	; 0x64
 800266c:	f001 fdfc 	bl	8004268 <delay_us>
	}
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 8002670:	2200      	movs	r2, #0
 8002672:	4908      	ldr	r1, [pc, #32]	; (8002694 <FATFS_Logstart_Delete+0x48>)
 8002674:	4610      	mov	r0, r2
 8002676:	f008 f9ad 	bl	800a9d4 <f_mount>
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 800267a:	4802      	ldr	r0, [pc, #8]	; (8002684 <FATFS_Logstart_Delete+0x38>)
}
 800267c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 8002680:	f008 be96 	b.w	800b3b0 <FATFS_UnLinkDriver>
 8002684:	20008d09 	.word	0x20008d09
 8002688:	0800cef0 	.word	0x0800cef0
 800268c:	20008d18 	.word	0x20008d18
 8002690:	0800cc74 	.word	0x0800cc74
 8002694:	0800ce1b 	.word	0x0800ce1b

08002698 <FATFS_Logstart_Ready>:

void FATFS_Logstart_Ready(void) {
 8002698:	b508      	push	{r3, lr}

	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 800269a:	4910      	ldr	r1, [pc, #64]	; (80026dc <FATFS_Logstart_Ready+0x44>)
 800269c:	4810      	ldr	r0, [pc, #64]	; (80026e0 <FATFS_Logstart_Ready+0x48>)
 800269e:	f008 fe6b 	bl	800b378 <FATFS_LinkDriver>
 80026a2:	b988      	cbnz	r0, 80026c8 <FATFS_Logstart_Ready+0x30>
			{
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 80026a4:	2201      	movs	r2, #1
 80026a6:	490d      	ldr	r1, [pc, #52]	; (80026dc <FATFS_Logstart_Ready+0x44>)
 80026a8:	480e      	ldr	r0, [pc, #56]	; (80026e4 <FATFS_Logstart_Ready+0x4c>)
 80026aa:	f008 f993 	bl	800a9d4 <f_mount>
 80026ae:	b940      	cbnz	r0, 80026c2 <FATFS_Logstart_Ready+0x2a>
				{     // Initialization Error Debugging

		}

		else {
			if (f_open(&MyFile, "LogStart.txt", FA_OPEN_ALWAYS | FA_WRITE)
 80026b0:	2212      	movs	r2, #18
 80026b2:	490d      	ldr	r1, [pc, #52]	; (80026e8 <FATFS_Logstart_Ready+0x50>)
 80026b4:	480d      	ldr	r0, [pc, #52]	; (80026ec <FATFS_Logstart_Ready+0x54>)
 80026b6:	f008 f9c3 	bl	800aa40 <f_open>
 80026ba:	b910      	cbnz	r0, 80026c2 <FATFS_Logstart_Ready+0x2a>
					!= FR_OK) // Create and Open a new text file object with write access
					{

			} else {

				f_close(&MyFile);
 80026bc:	480b      	ldr	r0, [pc, #44]	; (80026ec <FATFS_Logstart_Ready+0x54>)
 80026be:	f008 fbe6 	bl	800ae8e <f_close>
			}
		}
		delay_us(100);
 80026c2:	2064      	movs	r0, #100	; 0x64
 80026c4:	f001 fdd0 	bl	8004268 <delay_us>
	}
	f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 80026c8:	2200      	movs	r2, #0
 80026ca:	4909      	ldr	r1, [pc, #36]	; (80026f0 <FATFS_Logstart_Ready+0x58>)
 80026cc:	4610      	mov	r0, r2
 80026ce:	f008 f981 	bl	800a9d4 <f_mount>
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 80026d2:	4802      	ldr	r0, [pc, #8]	; (80026dc <FATFS_Logstart_Ready+0x44>)
}
 80026d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 80026d8:	f008 be6a 	b.w	800b3b0 <FATFS_UnLinkDriver>
 80026dc:	20008d09 	.word	0x20008d09
 80026e0:	0800cef0 	.word	0x0800cef0
 80026e4:	20008d18 	.word	0x20008d18
 80026e8:	0800cc74 	.word	0x0800cc74
 80026ec:	20008f78 	.word	0x20008f78
 80026f0:	0800ce1b 	.word	0x0800ce1b

080026f4 <USB_MSC_Init_Start>:
	}
#endif
}

void USB_MSC_Init_Start(void)                         // Initialize USB MSC mode
{
 80026f4:	b510      	push	{r4, lr}
	USBD_Init(&USBD_Device, &MSC_Desc, 0);             // USB MSC initialization
 80026f6:	4c0b      	ldr	r4, [pc, #44]	; (8002724 <USB_MSC_Init_Start+0x30>)
 80026f8:	490b      	ldr	r1, [pc, #44]	; (8002728 <USB_MSC_Init_Start+0x34>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	4620      	mov	r0, r4
 80026fe:	f006 fe82 	bl	8009406 <USBD_Init>
	USBD_RegisterClass(&USBD_Device, USBD_MSC_CLASS);  // USB class registration
 8002702:	490a      	ldr	r1, [pc, #40]	; (800272c <USB_MSC_Init_Start+0x38>)
 8002704:	4620      	mov	r0, r4
 8002706:	f006 feac 	bl	8009462 <USBD_RegisterClass>
	USBD_MSC_RegisterStorage(&USBD_Device, &USBD_DISK_fops); // Storage call backs
 800270a:	4909      	ldr	r1, [pc, #36]	; (8002730 <USB_MSC_Init_Start+0x3c>)
 800270c:	4620      	mov	r0, r4
 800270e:	f006 fad2 	bl	8008cb6 <USBD_MSC_RegisterStorage>
	USBD_Start(&USBD_Device);                                // Start USB MSC
 8002712:	4620      	mov	r0, r4
 8002714:	f006 feac 	bl	8009470 <USBD_Start>

	delay_us(1000000);
 8002718:	4806      	ldr	r0, [pc, #24]	; (8002734 <USB_MSC_Init_Start+0x40>)

}
 800271a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(1000000);
 800271e:	f001 bda3 	b.w	8004268 <delay_us>
 8002722:	bf00      	nop
 8002724:	20008988 	.word	0x20008988
 8002728:	20000010 	.word	0x20000010
 800272c:	200001fc 	.word	0x200001fc
 8002730:	200001dc 	.word	0x200001dc
 8002734:	000f4240 	.word	0x000f4240

08002738 <USB_VCP_Init_Start>:

void USB_VCP_Init_Start(void) {
 8002738:	b510      	push	{r4, lr}
	USBD_Init(&USBD_Device, &VCP_Desc, 0);             // USB VCP initialization
 800273a:	4c0b      	ldr	r4, [pc, #44]	; (8002768 <USB_VCP_Init_Start+0x30>)
 800273c:	490b      	ldr	r1, [pc, #44]	; (800276c <USB_VCP_Init_Start+0x34>)
 800273e:	2200      	movs	r2, #0
 8002740:	4620      	mov	r0, r4
 8002742:	f006 fe60 	bl	8009406 <USBD_Init>
	USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);  // USB class registration
 8002746:	490a      	ldr	r1, [pc, #40]	; (8002770 <USB_VCP_Init_Start+0x38>)
 8002748:	4620      	mov	r0, r4
 800274a:	f006 fe8a 	bl	8009462 <USBD_RegisterClass>
	USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops); // VCP CDC call backs
 800274e:	4909      	ldr	r1, [pc, #36]	; (8002774 <USB_VCP_Init_Start+0x3c>)
 8002750:	4620      	mov	r0, r4
 8002752:	f002 faf7 	bl	8004d44 <USBD_CDC_RegisterInterface>
	USBD_Start(&USBD_Device);                                 // Start USB VCP
 8002756:	4620      	mov	r0, r4
 8002758:	f006 fe8a 	bl	8009470 <USBD_Start>
	delay_us(1000000);
 800275c:	4806      	ldr	r0, [pc, #24]	; (8002778 <USB_VCP_Init_Start+0x40>)
}
 800275e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_us(1000000);
 8002762:	f001 bd81 	b.w	8004268 <delay_us>
 8002766:	bf00      	nop
 8002768:	20008988 	.word	0x20008988
 800276c:	20000074 	.word	0x20000074
 8002770:	200000bc 	.word	0x200000bc
 8002774:	200001cc 	.word	0x200001cc
 8002778:	000f4240 	.word	0x000f4240

0800277c <Read_RTC_Timestamp>:
			__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC)),
			2000 + __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC)));
}

void Read_RTC_Timestamp(void)       // Read RTC timestamp and store in variables
{
 800277c:	b510      	push	{r4, lr}
// read RTC time in BCD format from registers and save in .BIN/.DEC format

	Hour = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 800277e:	f7ff fdf9 	bl	8002374 <LL_RTC_TIME_GetHour.constprop.13>
 8002782:	4604      	mov	r4, r0
 8002784:	f7ff fdf6 	bl	8002374 <LL_RTC_TIME_GetHour.constprop.13>
 8002788:	f3c4 1303 	ubfx	r3, r4, #4, #4
 800278c:	4a2b      	ldr	r2, [pc, #172]	; (800283c <Read_RTC_Timestamp+0xc0>)
 800278e:	f000 000f 	and.w	r0, r0, #15
 8002792:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002796:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800279a:	7013      	strb	r3, [r2, #0]
	Min = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 800279c:	f7ff fdd0 	bl	8002340 <LL_RTC_TIME_GetMinute.constprop.12>
 80027a0:	4604      	mov	r4, r0
 80027a2:	f7ff fdcd 	bl	8002340 <LL_RTC_TIME_GetMinute.constprop.12>
 80027a6:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80027aa:	4a25      	ldr	r2, [pc, #148]	; (8002840 <Read_RTC_Timestamp+0xc4>)
 80027ac:	f000 000f 	and.w	r0, r0, #15
 80027b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027b4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80027b8:	7013      	strb	r3, [r2, #0]
	Sec = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80027ba:	f7ff fda9 	bl	8002310 <LL_RTC_TIME_GetSecond.constprop.11>
 80027be:	4604      	mov	r4, r0
 80027c0:	f7ff fda6 	bl	8002310 <LL_RTC_TIME_GetSecond.constprop.11>
 80027c4:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80027c8:	4a1e      	ldr	r2, [pc, #120]	; (8002844 <Read_RTC_Timestamp+0xc8>)
 80027ca:	f000 000f 	and.w	r0, r0, #15
 80027ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027d2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80027d6:	7013      	strb	r3, [r2, #0]

	Mon = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 80027d8:	f7ff fd66 	bl	80022a8 <LL_RTC_DATE_GetMonth.constprop.9>
 80027dc:	4604      	mov	r4, r0
 80027de:	f7ff fd63 	bl	80022a8 <LL_RTC_DATE_GetMonth.constprop.9>
 80027e2:	f3c4 1303 	ubfx	r3, r4, #4, #4
 80027e6:	4a18      	ldr	r2, [pc, #96]	; (8002848 <Read_RTC_Timestamp+0xcc>)
 80027e8:	f000 000f 	and.w	r0, r0, #15
 80027ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027f0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80027f4:	7013      	strb	r3, [r2, #0]
	Day = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 80027f6:	f7ff fd3f 	bl	8002278 <LL_RTC_DATE_GetDay.constprop.8>
 80027fa:	4604      	mov	r4, r0
 80027fc:	f7ff fd3c 	bl	8002278 <LL_RTC_DATE_GetDay.constprop.8>
 8002800:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8002804:	4a11      	ldr	r2, [pc, #68]	; (800284c <Read_RTC_Timestamp+0xd0>)
 8002806:	f000 000f 	and.w	r0, r0, #15
 800280a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800280e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002812:	7013      	strb	r3, [r2, #0]
	Year = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 8002814:	f7ff fd62 	bl	80022dc <LL_RTC_DATE_GetYear.constprop.10>
 8002818:	4604      	mov	r4, r0
 800281a:	f7ff fd5f 	bl	80022dc <LL_RTC_DATE_GetYear.constprop.10>
 800281e:	f3c4 1303 	ubfx	r3, r4, #4, #4
 8002822:	4a0b      	ldr	r2, [pc, #44]	; (8002850 <Read_RTC_Timestamp+0xd4>)
 8002824:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002828:	f000 000f 	and.w	r0, r0, #15
 800282c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002830:	7013      	strb	r3, [r2, #0]

// Releasing RTC registers (Time and Date registers); necessary for RTC read/write operation
	(void) RTC->DR;
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <Read_RTC_Timestamp+0xd8>)
 8002834:	685a      	ldr	r2, [r3, #4]
	(void) RTC->TR;
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	bd10      	pop	{r4, pc}
 800283a:	bf00      	nop
 800283c:	20008c6e 	.word	0x20008c6e
 8002840:	20008c2c 	.word	0x20008c2c
 8002844:	20008c78 	.word	0x20008c78
 8002848:	20008f5c 	.word	0x20008f5c
 800284c:	20008f4a 	.word	0x20008f4a
 8002850:	20008f75 	.word	0x20008f75
 8002854:	40002800 	.word	0x40002800

08002858 <update_FATFS_time>:
{
 8002858:	b508      	push	{r3, lr}
	Read_RTC_Timestamp();         // Read RTC time-stamps and store in variables
 800285a:	f7ff ff8f 	bl	800277c <Read_RTC_Timestamp>
	fno.fdate = (WORD) (((Year + 20) << 9) | Mon << 5 | Day); // Update File time with the data log starting time
 800285e:	4b0f      	ldr	r3, [pc, #60]	; (800289c <update_FATFS_time+0x44>)
 8002860:	490f      	ldr	r1, [pc, #60]	; (80028a0 <update_FATFS_time+0x48>)
 8002862:	781a      	ldrb	r2, [r3, #0]
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <update_FATFS_time+0x4c>)
	f_utime(FILE_NAME_STRING, &fno);     // Update RTC time on FATFS file header
 8002866:	4810      	ldr	r0, [pc, #64]	; (80028a8 <update_FATFS_time+0x50>)
	fno.fdate = (WORD) (((Year + 20) << 9) | Mon << 5 | Day); // Update File time with the data log starting time
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800286e:	4a0f      	ldr	r2, [pc, #60]	; (80028ac <update_FATFS_time+0x54>)
 8002870:	7812      	ldrb	r2, [r2, #0]
 8002872:	3214      	adds	r2, #20
 8002874:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8002878:	808b      	strh	r3, [r1, #4]
	fno.ftime = (WORD) (Hour << 11 | Min << 5 | Sec / 2); // Extracting values from RTC registers
 800287a:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <update_FATFS_time+0x58>)
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <update_FATFS_time+0x5c>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	015b      	lsls	r3, r3, #5
 8002884:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 8002888:	4a0b      	ldr	r2, [pc, #44]	; (80028b8 <update_FATFS_time+0x60>)
 800288a:	7812      	ldrb	r2, [r2, #0]
 800288c:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8002890:	80cb      	strh	r3, [r1, #6]
}
 8002892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	f_utime(FILE_NAME_STRING, &fno);     // Update RTC time on FATFS file header
 8002896:	f008 bd24 	b.w	800b2e2 <f_utime>
 800289a:	bf00      	nop
 800289c:	20008f5c 	.word	0x20008f5c
 80028a0:	20008c40 	.word	0x20008c40
 80028a4:	20008f4a 	.word	0x20008f4a
 80028a8:	20008c5c 	.word	0x20008c5c
 80028ac:	20008f75 	.word	0x20008f75
 80028b0:	20008c6e 	.word	0x20008c6e
 80028b4:	20008c2c 	.word	0x20008c2c
 80028b8:	20008c78 	.word	0x20008c78

080028bc <File_Close_Update_Unlink>:
void File_Close_Update_Unlink(void) {
 80028bc:	b508      	push	{r3, lr}
	f_close(&MyFile);                       // Close previous running file
 80028be:	4807      	ldr	r0, [pc, #28]	; (80028dc <File_Close_Update_Unlink+0x20>)
 80028c0:	f008 fae5 	bl	800ae8e <f_close>
	update_FATFS_time(); // Write RTC time-stamp on File header/properties of last FATFS file to visualize in PC
 80028c4:	f7ff ffc8 	bl	8002858 <update_FATFS_time>
	f_mount(0, "", 0); 	//  unmount FATFS file (of running sensor storage file)
 80028c8:	2200      	movs	r2, #0
 80028ca:	4905      	ldr	r1, [pc, #20]	; (80028e0 <File_Close_Update_Unlink+0x24>)
 80028cc:	4610      	mov	r0, r2
 80028ce:	f008 f881 	bl	800a9d4 <f_mount>
	FATFS_UnLinkDriver(SDPath); //  unlink SD card driver (of running sensor storage file)
 80028d2:	4804      	ldr	r0, [pc, #16]	; (80028e4 <File_Close_Update_Unlink+0x28>)
}
 80028d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	FATFS_UnLinkDriver(SDPath); //  unlink SD card driver (of running sensor storage file)
 80028d8:	f008 bd6a 	b.w	800b3b0 <FATFS_UnLinkDriver>
 80028dc:	20008f78 	.word	0x20008f78
 80028e0:	0800ce1b 	.word	0x0800ce1b
 80028e4:	20008d09 	.word	0x20008d09

080028e8 <Shut_Down_SD>:
 80028e8:	f7ff bfe8 	b.w	80028bc <File_Close_Update_Unlink>

080028ec <Enter_RTC_InitMode>:
}

void Enter_RTC_InitMode(void) // Function needed before writing on RTC registers
{
	RTC->ISR = RTC_INIT_MASK;                                // Enter Init Mode
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <Enter_RTC_InitMode+0x10>)
 80028ee:	f04f 32ff 	mov.w	r2, #4294967295
 80028f2:	60da      	str	r2, [r3, #12]
	while (((RTC->ISR) & RTC_ISR_INITF) != (RTC_ISR_INITF))
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	0652      	lsls	r2, r2, #25
 80028f8:	d5fc      	bpl.n	80028f4 <Enter_RTC_InitMode+0x8>
		; // Wait to enter Init mode
}
 80028fa:	4770      	bx	lr
 80028fc:	40002800 	.word	0x40002800

08002900 <Exit_RTC_InitMode>:

void Exit_RTC_InitMode(void)   // Function needed after writing on RTC registers
{
	RTC->ISR = (uint32_t) ~RTC_ISR_INIT; // Disable RTC init mode
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <Exit_RTC_InitMode+0x1c>)
 8002902:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002906:	60da      	str	r2, [r3, #12]

	// Wait for synchro. Needed only if Shadow registers is enabled
	WRITE_REG(RTC->ISR,
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800290e:	f062 02a0 	orn	r2, r2, #160	; 0xa0
 8002912:	60da      	str	r2, [r3, #12]
			(~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTC->ISR & RTC_ISR_INIT))); // Clear RTC sync flag
	while (((RTC->ISR) & RTC_ISR_RSF) != (RTC_ISR_RSF))
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	0692      	lsls	r2, r2, #26
 8002918:	d5fc      	bpl.n	8002914 <Exit_RTC_InitMode+0x14>
		;  // Wait the registers to be synchronised
}
 800291a:	4770      	bx	lr
 800291c:	40002800 	.word	0x40002800

08002920 <MX_RTC_Init>:

void MX_RTC_Init(void)                // RTC initialization after Power on reset
{
 8002920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002922:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <MX_RTC_Init+0xa8>)
 8002924:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002928:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800292c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002930:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002934:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002938:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800293c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002940:	f042 0201 	orr.w	r2, r2, #1
 8002944:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002948:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	LL_RTC_InitTypeDef RTC_InitStruct;

	LL_RCC_ForceBackupDomainReset();            // Reset Backup domain registers
	LL_RCC_ReleaseBackupDomainReset();
	LL_RCC_LSE_Enable();                    // Configure LSE as RTC source clock
	while (LL_RCC_LSE_IsReady() != 1)
 800294c:	0792      	lsls	r2, r2, #30
 800294e:	d5fb      	bpl.n	8002948 <MX_RTC_Init+0x28>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002950:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
		;
	LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
	LL_RCC_EnableRTC();                           // RTC clock

	RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
	LL_RTC_Init(RTC, &RTC_InitStruct); // Initialize RTC with default configurations
 8002954:	4c1d      	ldr	r4, [pc, #116]	; (80029cc <MX_RTC_Init+0xac>)
 8002956:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800295a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800295e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002962:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8002966:	a904      	add	r1, sp, #16
 8002968:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800296c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002970:	2300      	movs	r3, #0
 8002972:	f841 3d0c 	str.w	r3, [r1, #-12]!
	LL_RTC_Init(RTC, &RTC_InitStruct); // Initialize RTC with default configurations
 8002976:	4620      	mov	r0, r4
 8002978:	f005 fb8a 	bl	8008090 <LL_RTC_Init>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800297c:	23ca      	movs	r3, #202	; 0xca
 800297e:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002980:	2353      	movs	r3, #83	; 0x53
 8002982:	6263      	str	r3, [r4, #36]	; 0x24

	LL_RTC_DisableWriteProtection(RTC);
	Enter_RTC_InitMode();     // Enter RTC initialization mode to set parameters
 8002984:	f7ff ffb2 	bl	80028ec <Enter_RTC_InitMode>

	// Calender set up
	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_A,
 8002988:	6923      	ldr	r3, [r4, #16]
 800298a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800298e:	fa92 f2a2 	rbit	r2, r2
 8002992:	217f      	movs	r1, #127	; 0x7f
 8002994:	fab2 f282 	clz	r2, r2
 8002998:	fa01 f202 	lsl.w	r2, r1, r2
 800299c:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80029a0:	4313      	orrs	r3, r2
 80029a2:	6123      	str	r3, [r4, #16]
			0x7F << RTC_POSITION_PRER_PREDIV_A);  // ASYNC prediv= 0x7F
	MODIFY_REG(RTC->PRER, RTC_PRER_PREDIV_S, 0xFF);         // SYNC prediv= 0xFF
 80029a4:	6923      	ldr	r3, [r4, #16]
 80029a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80029aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80029ae:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80029b2:	6123      	str	r3, [r4, #16]

	Exit_RTC_InitMode();
 80029b4:	f7ff ffa4 	bl	8002900 <Exit_RTC_InitMode>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80029b8:	23ff      	movs	r3, #255	; 0xff
 80029ba:	6263      	str	r3, [r4, #36]	; 0x24

	tmp = (uint32_t) (&(RTCx->BKP0R));
	tmp += (BackupRegister * 4U);

	/* Write the specified register */
	*(__IO uint32_t *) tmp = (uint32_t) Data;
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <MX_RTC_Init+0xb0>)
 80029be:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80029c2:	605a      	str	r2, [r3, #4]
}
 80029c4:	b004      	add	sp, #16
 80029c6:	bd10      	pop	{r4, pc}
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40002800 	.word	0x40002800
 80029d0:	40002850 	.word	0x40002850

080029d4 <Set_RTC_Calendar>:
		uint8_t Min, uint8_t Sec) {
 80029d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80029d6:	4c19      	ldr	r4, [pc, #100]	; (8002a3c <Set_RTC_Calendar+0x68>)
 80029d8:	460f      	mov	r7, r1
 80029da:	4619      	mov	r1, r3
 80029dc:	23ca      	movs	r3, #202	; 0xca
 80029de:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80029e0:	2353      	movs	r3, #83	; 0x53
 80029e2:	b085      	sub	sp, #20
 80029e4:	6263      	str	r3, [r4, #36]	; 0x24
 80029e6:	4606      	mov	r6, r0
 80029e8:	4615      	mov	r5, r2
	Enter_RTC_InitMode();
 80029ea:	f7ff ff7f 	bl	80028ec <Enter_RTC_InitMode>
	RTC_TimeStruct.Minutes = Min;
 80029ee:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
	RTC_TimeStruct.Hours = Hour;
 80029f2:	f88d 100c 	strb.w	r1, [sp, #12]
	RTC_TimeStruct.Minutes = Min;
 80029f6:	f88d 300d 	strb.w	r3, [sp, #13]
	LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 80029fa:	aa02      	add	r2, sp, #8
	RTC_TimeStruct.Seconds = Sec;
 80029fc:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8002a00:	f88d 300e 	strb.w	r3, [sp, #14]
	LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_TimeStruct);
 8002a04:	2100      	movs	r1, #0
 8002a06:	4620      	mov	r0, r4
 8002a08:	f005 fbb2 	bl	8008170 <LL_RTC_TIME_Init>
	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;          // Default value
 8002a0c:	2301      	movs	r3, #1
	LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8002a0e:	aa01      	add	r2, sp, #4
 8002a10:	2100      	movs	r1, #0
 8002a12:	4620      	mov	r0, r4
	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_MONDAY;          // Default value
 8002a14:	f88d 3004 	strb.w	r3, [sp, #4]
	RTC_DateStruct.Month = Month;
 8002a18:	f88d 7005 	strb.w	r7, [sp, #5]
	RTC_DateStruct.Year = Year;
 8002a1c:	f88d 6007 	strb.w	r6, [sp, #7]
	RTC_DateStruct.Day = Day;
 8002a20:	f88d 5006 	strb.w	r5, [sp, #6]
	LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BIN, &RTC_DateStruct);
 8002a24:	f005 fbe8 	bl	80081f8 <LL_RTC_DATE_Init>
	Exit_RTC_InitMode();
 8002a28:	f7ff ff6a 	bl	8002900 <Exit_RTC_InitMode>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002a2c:	23ff      	movs	r3, #255	; 0xff
 8002a2e:	6263      	str	r3, [r4, #36]	; 0x24
	*(__IO uint32_t *) tmp = (uint32_t) Data;
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <Set_RTC_Calendar+0x6c>)
 8002a32:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002a36:	605a      	str	r2, [r3, #4]
}
 8002a38:	b005      	add	sp, #20
 8002a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a3c:	40002800 	.word	0x40002800
 8002a40:	40002850 	.word	0x40002850

08002a44 <RTC_BAK_GetRegister>:

// Valid register value indicates RTC is enabled and running
uint32_t RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister) {
	register uint32_t tmp = 0U;

	tmp = (uint32_t) (&(RTCx->BKP0R));
 8002a44:	3050      	adds	r0, #80	; 0x50
	tmp += (BackupRegister * 4U);

	/* Read the specified register */
	return (*(__IO uint32_t *) tmp);
 8002a46:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
}
 8002a4a:	4770      	bx	lr

08002a4c <USB_PA9_EXTI_conf>:
	LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_10);    // Enable PA10 pin EXTI interrupt
	LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_10); // Interrupt configured for falling edge
}

void USB_PA9_EXTI_conf(void) // PA9 EXTI pin interrupt configuration for USB connectivity Sense
{
 8002a4c:	b508      	push	{r3, lr}
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <USB_PA9_EXTI_conf+0x34>)
 8002a50:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a54:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(EXTI9_5_IRQn); // Enabling External GPIO pin interrupt (EXTI9-5) for USB connectivity PA10 Pin
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG); // Enable Sysconfig clock to enable EXTI pin interrupts
 8002a56:	2001      	movs	r0, #1
 8002a58:	f7ff fb62 	bl	8002120 <LL_APB2_GRP1_EnableClock>
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8002a5c:	4a09      	ldr	r2, [pc, #36]	; (8002a84 <USB_PA9_EXTI_conf+0x38>)
 8002a5e:	6913      	ldr	r3, [r2, #16]
 8002a60:	21f0      	movs	r1, #240	; 0xf0
 8002a62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a66:	fa91 f1a1 	rbit	r1, r1
 8002a6a:	6113      	str	r3, [r2, #16]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <USB_PA9_EXTI_conf+0x3c>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a74:	601a      	str	r2, [r3, #0]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	bd08      	pop	{r3, pc}
 8002a80:	e000e100 	.word	0xe000e100
 8002a84:	40010000 	.word	0x40010000
 8002a88:	40010400 	.word	0x40010400

08002a8c <Wait_for_ADC_timeout_While_Datalog>:
	}
}

void Wait_for_ADC_timeout_While_Datalog(void) // During Timer_Interrupt for Data logging, Involved Volatile variables
{
	ADC_TimeOut_Count_Buf++;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <Wait_for_ADC_timeout_While_Datalog+0x1c>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	3201      	adds	r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
	if (ADC_TimeOut_Count_Buf > ADC_TimeOut_Limit_Buf) // 100ms= 48000*ADC_TimeOut_MS_value)
 8002a94:	6819      	ldr	r1, [r3, #0]
 8002a96:	4a05      	ldr	r2, [pc, #20]	; (8002aac <Wait_for_ADC_timeout_While_Datalog+0x20>)
 8002a98:	4291      	cmp	r1, r2
 8002a9a:	d904      	bls.n	8002aa6 <Wait_for_ADC_timeout_While_Datalog+0x1a>
	{
		ADC_TimeOut_Count_Buf = 0;
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
		ADC_Error_Buf = 1;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <Wait_for_ADC_timeout_While_Datalog+0x24>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	4770      	bx	lr
 8002aa8:	20008c3c 	.word	0x20008c3c
 8002aac:	00493e00 	.word	0x00493e00
 8002ab0:	200091fb 	.word	0x200091fb

08002ab4 <Wait_for_ADC_TimeOut_>:
		SPI_Error = 1;
	}
}

void Wait_for_ADC_TimeOut_(void) {
	ADC_TimeOut_Count++;
 8002ab4:	4a06      	ldr	r2, [pc, #24]	; (8002ad0 <Wait_for_ADC_TimeOut_+0x1c>)
	if (ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 8002ab6:	4907      	ldr	r1, [pc, #28]	; (8002ad4 <Wait_for_ADC_TimeOut_+0x20>)
	ADC_TimeOut_Count++;
 8002ab8:	6813      	ldr	r3, [r2, #0]
 8002aba:	3301      	adds	r3, #1
	if (ADC_TimeOut_Count > ADC_TimeOut_Limit) // 100ms= 48000*SPI_TimeOut_MS_value)
 8002abc:	428b      	cmp	r3, r1
	{
		ADC_TimeOut_Count = 0;
 8002abe:	bf83      	ittte	hi
 8002ac0:	2300      	movhi	r3, #0
 8002ac2:	6013      	strhi	r3, [r2, #0]
		ADC_Error = 1;
 8002ac4:	4b04      	ldrhi	r3, [pc, #16]	; (8002ad8 <Wait_for_ADC_TimeOut_+0x24>)
	ADC_TimeOut_Count++;
 8002ac6:	6013      	strls	r3, [r2, #0]
		ADC_Error = 1;
 8002ac8:	bf84      	itt	hi
 8002aca:	2201      	movhi	r2, #1
 8002acc:	701a      	strbhi	r2, [r3, #0]
 8002ace:	4770      	bx	lr
 8002ad0:	200091fc 	.word	0x200091fc
 8002ad4:	00493e00 	.word	0x00493e00
 8002ad8:	200091f2 	.word	0x200091f2

08002adc <P_Activate_ADC3>:
void P_Activate_ADC3(void) {
 8002adc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__IO uint32_t wait_loop_index = 0;
 8002ade:	2300      	movs	r3, #0
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ae0:	482c      	ldr	r0, [pc, #176]	; (8002b94 <P_Activate_ADC3+0xb8>)
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	6883      	ldr	r3, [r0, #8]
			* (SystemCoreClock / 100000) / 10);
 8002ae6:	4a2c      	ldr	r2, [pc, #176]	; (8002b98 <P_Activate_ADC3+0xbc>)
 8002ae8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002aec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002af0:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8002af2:	6883      	ldr	r3, [r0, #8]
 8002af4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002af8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b00:	6083      	str	r3, [r0, #8]
 8002b02:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <P_Activate_ADC3+0xc0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b0a:	220a      	movs	r2, #10
 8002b0c:	4353      	muls	r3, r2
 8002b0e:	fbb3 f3f2 	udiv	r3, r3, r2
		wait_loop_index--;
 8002b12:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 8002b14:	9a01      	ldr	r2, [sp, #4]
 8002b16:	2a00      	cmp	r2, #0
 8002b18:	d12f      	bne.n	8002b7a <P_Activate_ADC3+0x9e>
  MODIFY_REG(ADCx->CR,
 8002b1a:	6883      	ldr	r3, [r0, #8]
	ADC_TimeOut_Count = 0;
 8002b1c:	4d20      	ldr	r5, [pc, #128]	; (8002ba0 <P_Activate_ADC3+0xc4>)
	ADC_Error = 0;
 8002b1e:	4c21      	ldr	r4, [pc, #132]	; (8002ba4 <P_Activate_ADC3+0xc8>)
 8002b20:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002b24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b2c:	6083      	str	r3, [r0, #8]
 8002b2e:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ADC_TimeOut_Count = 0;
 8002b32:	602a      	str	r2, [r5, #0]
	ADC_Error = 0;
 8002b34:	7022      	strb	r2, [r4, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002b36:	6883      	ldr	r3, [r0, #8]
	while ((LL_ADC_IsCalibrationOnGoing(ADC3) == 0) && !Error_preceding
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	db04      	blt.n	8002b46 <P_Activate_ADC3+0x6a>
 8002b3c:	6933      	ldr	r3, [r6, #16]
 8002b3e:	0599      	lsls	r1, r3, #22
 8002b40:	d401      	bmi.n	8002b46 <P_Activate_ADC3+0x6a>
			&& (ADC_Error == 0)) {
 8002b42:	7823      	ldrb	r3, [r4, #0]
 8002b44:	b1e3      	cbz	r3, 8002b80 <P_Activate_ADC3+0xa4>
	wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES; // ADC Delay calculations
 8002b46:	2380      	movs	r3, #128	; 0x80
		wait_loop_index--;
 8002b48:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 8002b4a:	9a01      	ldr	r2, [sp, #4]
 8002b4c:	b9da      	cbnz	r2, 8002b86 <P_Activate_ADC3+0xaa>
  MODIFY_REG(ADCx->CR,
 8002b4e:	6883      	ldr	r3, [r0, #8]
 8002b50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6083      	str	r3, [r0, #8]
	ADC_TimeOut_Count = 0;
 8002b5e:	602a      	str	r2, [r5, #0]
	ADC_Error = 0;
 8002b60:	7022      	strb	r2, [r4, #0]
 8002b62:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8002b66:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_ADRDY(ADC3) == 0) && !Error_preceding
 8002b68:	07da      	lsls	r2, r3, #31
 8002b6a:	d404      	bmi.n	8002b76 <P_Activate_ADC3+0x9a>
 8002b6c:	692b      	ldr	r3, [r5, #16]
 8002b6e:	059b      	lsls	r3, r3, #22
 8002b70:	d401      	bmi.n	8002b76 <P_Activate_ADC3+0x9a>
			&& (ADC_Error == 0)) {
 8002b72:	7823      	ldrb	r3, [r4, #0]
 8002b74:	b153      	cbz	r3, 8002b8c <P_Activate_ADC3+0xb0>
}
 8002b76:	b002      	add	sp, #8
 8002b78:	bd70      	pop	{r4, r5, r6, pc}
		wait_loop_index--;
 8002b7a:	9b01      	ldr	r3, [sp, #4]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	e7c8      	b.n	8002b12 <P_Activate_ADC3+0x36>
		Wait_for_ADC_TimeOut_();
 8002b80:	f7ff ff98 	bl	8002ab4 <Wait_for_ADC_TimeOut_>
 8002b84:	e7d7      	b.n	8002b36 <P_Activate_ADC3+0x5a>
		wait_loop_index--;
 8002b86:	9b01      	ldr	r3, [sp, #4]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	e7dd      	b.n	8002b48 <P_Activate_ADC3+0x6c>
		Wait_for_ADC_TimeOut_();
 8002b8c:	f7ff ff92 	bl	8002ab4 <Wait_for_ADC_TimeOut_>
 8002b90:	e7e9      	b.n	8002b66 <P_Activate_ADC3+0x8a>
 8002b92:	bf00      	nop
 8002b94:	50040200 	.word	0x50040200
 8002b98:	000186a0 	.word	0x000186a0
 8002b9c:	2000000c 	.word	0x2000000c
 8002ba0:	200091fc 	.word	0x200091fc
 8002ba4:	200091f2 	.word	0x200091f2

08002ba8 <P_Activate_ADC2>:
void P_Activate_ADC2(void) {
 8002ba8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__IO uint32_t wait_loop_index = 0;
 8002baa:	2300      	movs	r3, #0
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002bac:	482c      	ldr	r0, [pc, #176]	; (8002c60 <P_Activate_ADC2+0xb8>)
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	6883      	ldr	r3, [r0, #8]
			* (SystemCoreClock / 100000) / 10);
 8002bb2:	4a2c      	ldr	r2, [pc, #176]	; (8002c64 <P_Activate_ADC2+0xbc>)
 8002bb4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002bb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bbc:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8002bbe:	6883      	ldr	r3, [r0, #8]
 8002bc0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002bc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	6083      	str	r3, [r0, #8]
 8002bce:	4b26      	ldr	r3, [pc, #152]	; (8002c68 <P_Activate_ADC2+0xc0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bd6:	220a      	movs	r2, #10
 8002bd8:	4353      	muls	r3, r2
 8002bda:	fbb3 f3f2 	udiv	r3, r3, r2
		wait_loop_index--;
 8002bde:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 8002be0:	9a01      	ldr	r2, [sp, #4]
 8002be2:	2a00      	cmp	r2, #0
 8002be4:	d12f      	bne.n	8002c46 <P_Activate_ADC2+0x9e>
  MODIFY_REG(ADCx->CR,
 8002be6:	6883      	ldr	r3, [r0, #8]
	ADC_TimeOut_Count = 0;
 8002be8:	4d20      	ldr	r5, [pc, #128]	; (8002c6c <P_Activate_ADC2+0xc4>)
	ADC_Error = 0;
 8002bea:	4c21      	ldr	r4, [pc, #132]	; (8002c70 <P_Activate_ADC2+0xc8>)
 8002bec:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002bf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bf8:	6083      	str	r3, [r0, #8]
 8002bfa:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ADC_TimeOut_Count = 0;
 8002bfe:	602a      	str	r2, [r5, #0]
	ADC_Error = 0;
 8002c00:	7022      	strb	r2, [r4, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002c02:	6883      	ldr	r3, [r0, #8]
	while ((LL_ADC_IsCalibrationOnGoing(ADC2) == 0) && !Error_preceding
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	db04      	blt.n	8002c12 <P_Activate_ADC2+0x6a>
 8002c08:	6933      	ldr	r3, [r6, #16]
 8002c0a:	0599      	lsls	r1, r3, #22
 8002c0c:	d401      	bmi.n	8002c12 <P_Activate_ADC2+0x6a>
			&& (ADC_Error == 0)) {
 8002c0e:	7823      	ldrb	r3, [r4, #0]
 8002c10:	b1e3      	cbz	r3, 8002c4c <P_Activate_ADC2+0xa4>
	wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES; // ADC Delay calculations
 8002c12:	2380      	movs	r3, #128	; 0x80
		wait_loop_index--;
 8002c14:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 8002c16:	9a01      	ldr	r2, [sp, #4]
 8002c18:	b9da      	cbnz	r2, 8002c52 <P_Activate_ADC2+0xaa>
  MODIFY_REG(ADCx->CR,
 8002c1a:	6883      	ldr	r3, [r0, #8]
 8002c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6083      	str	r3, [r0, #8]
	ADC_TimeOut_Count = 0;
 8002c2a:	602a      	str	r2, [r5, #0]
	ADC_Error = 0;
 8002c2c:	7022      	strb	r2, [r4, #0]
 8002c2e:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8002c32:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_ADRDY(ADC2) == 0) && !Error_preceding
 8002c34:	07da      	lsls	r2, r3, #31
 8002c36:	d404      	bmi.n	8002c42 <P_Activate_ADC2+0x9a>
 8002c38:	692b      	ldr	r3, [r5, #16]
 8002c3a:	059b      	lsls	r3, r3, #22
 8002c3c:	d401      	bmi.n	8002c42 <P_Activate_ADC2+0x9a>
			&& (ADC_Error == 0)) {
 8002c3e:	7823      	ldrb	r3, [r4, #0]
 8002c40:	b153      	cbz	r3, 8002c58 <P_Activate_ADC2+0xb0>
}
 8002c42:	b002      	add	sp, #8
 8002c44:	bd70      	pop	{r4, r5, r6, pc}
		wait_loop_index--;
 8002c46:	9b01      	ldr	r3, [sp, #4]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	e7c8      	b.n	8002bde <P_Activate_ADC2+0x36>
		Wait_for_ADC_TimeOut_();
 8002c4c:	f7ff ff32 	bl	8002ab4 <Wait_for_ADC_TimeOut_>
 8002c50:	e7d7      	b.n	8002c02 <P_Activate_ADC2+0x5a>
		wait_loop_index--;
 8002c52:	9b01      	ldr	r3, [sp, #4]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	e7dd      	b.n	8002c14 <P_Activate_ADC2+0x6c>
		Wait_for_ADC_TimeOut_();
 8002c58:	f7ff ff2c 	bl	8002ab4 <Wait_for_ADC_TimeOut_>
 8002c5c:	e7e9      	b.n	8002c32 <P_Activate_ADC2+0x8a>
 8002c5e:	bf00      	nop
 8002c60:	50040100 	.word	0x50040100
 8002c64:	000186a0 	.word	0x000186a0
 8002c68:	2000000c 	.word	0x2000000c
 8002c6c:	200091fc 	.word	0x200091fc
 8002c70:	200091f2 	.word	0x200091f2

08002c74 <P_Activate_ADC1>:
void P_Activate_ADC1(void) {
 8002c74:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__IO uint32_t wait_loop_index = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c7a:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <P_Activate_ADC1+0xbc>)
			* (SystemCoreClock / 100000) / 10);
 8002c7c:	492d      	ldr	r1, [pc, #180]	; (8002d34 <P_Activate_ADC1+0xc0>)
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8002c84:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002c88:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8002c90:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002c94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	4a27      	ldr	r2, [pc, #156]	; (8002d38 <P_Activate_ADC1+0xc4>)
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	fbb2 f2f1 	udiv	r2, r2, r1
 8002ca2:	210a      	movs	r1, #10
 8002ca4:	434a      	muls	r2, r1
 8002ca6:	fbb2 f2f1 	udiv	r2, r2, r1
		wait_loop_index--;
 8002caa:	9201      	str	r2, [sp, #4]
	while (wait_loop_index != 0) {
 8002cac:	9901      	ldr	r1, [sp, #4]
 8002cae:	2900      	cmp	r1, #0
 8002cb0:	d132      	bne.n	8002d18 <P_Activate_ADC1+0xa4>
  MODIFY_REG(ADCx->CR,
 8002cb2:	689a      	ldr	r2, [r3, #8]
	ADC_TimeOut_Count = 0;
 8002cb4:	4c21      	ldr	r4, [pc, #132]	; (8002d3c <P_Activate_ADC1+0xc8>)
	ADC_Error = 0;
 8002cb6:	4822      	ldr	r0, [pc, #136]	; (8002d40 <P_Activate_ADC1+0xcc>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002cb8:	4d1d      	ldr	r5, [pc, #116]	; (8002d30 <P_Activate_ADC1+0xbc>)
  MODIFY_REG(ADCx->CR,
 8002cba:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002cbe:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002cc2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
	ADC_TimeOut_Count = 0;
 8002ccc:	6021      	str	r1, [r4, #0]
	ADC_Error = 0;
 8002cce:	7001      	strb	r1, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002cd0:	68ab      	ldr	r3, [r5, #8]
	while ((LL_ADC_IsCalibrationOnGoing(ADC1) == 0) && !Error_preceding
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	db04      	blt.n	8002ce0 <P_Activate_ADC1+0x6c>
 8002cd6:	6933      	ldr	r3, [r6, #16]
 8002cd8:	0599      	lsls	r1, r3, #22
 8002cda:	d401      	bmi.n	8002ce0 <P_Activate_ADC1+0x6c>
			&& (ADC_Error == 0)) {
 8002cdc:	7803      	ldrb	r3, [r0, #0]
 8002cde:	b1f3      	cbz	r3, 8002d1e <P_Activate_ADC1+0xaa>
	wait_loop_index = ADC_DELAY_CALIB_ENABLE_CPU_CYCLES; // ADC Delay calculations
 8002ce0:	2380      	movs	r3, #128	; 0x80
		wait_loop_index--;
 8002ce2:	9301      	str	r3, [sp, #4]
	while (wait_loop_index != 0) {
 8002ce4:	9901      	ldr	r1, [sp, #4]
 8002ce6:	b9e9      	cbnz	r1, 8002d24 <P_Activate_ADC1+0xb0>
  MODIFY_REG(ADCx->CR,
 8002ce8:	4a11      	ldr	r2, [pc, #68]	; (8002d30 <P_Activate_ADC1+0xbc>)
 8002cea:	6893      	ldr	r3, [r2, #8]
 8002cec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6093      	str	r3, [r2, #8]
 8002cfa:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
	ADC_TimeOut_Count = 0;
 8002cfe:	6021      	str	r1, [r4, #0]
	ADC_Error = 0;
 8002d00:	7001      	strb	r1, [r0, #0]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8002d02:	4614      	mov	r4, r2
 8002d04:	6823      	ldr	r3, [r4, #0]
	while ((LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0) && !Error_preceding
 8002d06:	07da      	lsls	r2, r3, #31
 8002d08:	d404      	bmi.n	8002d14 <P_Activate_ADC1+0xa0>
 8002d0a:	692b      	ldr	r3, [r5, #16]
 8002d0c:	059b      	lsls	r3, r3, #22
 8002d0e:	d401      	bmi.n	8002d14 <P_Activate_ADC1+0xa0>
			&& (ADC_Error == 0)) {
 8002d10:	7803      	ldrb	r3, [r0, #0]
 8002d12:	b153      	cbz	r3, 8002d2a <P_Activate_ADC1+0xb6>
}
 8002d14:	b002      	add	sp, #8
 8002d16:	bd70      	pop	{r4, r5, r6, pc}
		wait_loop_index--;
 8002d18:	9a01      	ldr	r2, [sp, #4]
 8002d1a:	3a01      	subs	r2, #1
 8002d1c:	e7c5      	b.n	8002caa <P_Activate_ADC1+0x36>
		Wait_for_ADC_TimeOut_();
 8002d1e:	f7ff fec9 	bl	8002ab4 <Wait_for_ADC_TimeOut_>
 8002d22:	e7d5      	b.n	8002cd0 <P_Activate_ADC1+0x5c>
		wait_loop_index--;
 8002d24:	9b01      	ldr	r3, [sp, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	e7db      	b.n	8002ce2 <P_Activate_ADC1+0x6e>
		Wait_for_ADC_TimeOut_();
 8002d2a:	f7ff fec3 	bl	8002ab4 <Wait_for_ADC_TimeOut_>
 8002d2e:	e7e9      	b.n	8002d04 <P_Activate_ADC1+0x90>
 8002d30:	50040000 	.word	0x50040000
 8002d34:	000186a0 	.word	0x000186a0
 8002d38:	2000000c 	.word	0x2000000c
 8002d3c:	200091fc 	.word	0x200091fc
 8002d40:	200091f2 	.word	0x200091f2

08002d44 <P_ADC1_conf_strain>:
  SET_BIT(RCC->AHB2RSTR, Periphs);
 8002d44:	4b4f      	ldr	r3, [pc, #316]	; (8002e84 <P_ADC1_conf_strain+0x140>)
 8002d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
void P_ADC1_conf_strain(void) {
 8002d4c:	b570      	push	{r4, r5, r6, lr}
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 8002d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d52:	4d4d      	ldr	r5, [pc, #308]	; (8002e88 <P_ADC1_conf_strain+0x144>)
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002d54:	4c4d      	ldr	r4, [pc, #308]	; (8002e8c <P_ADC1_conf_strain+0x148>)
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3); // FSR1=PC2=Ch3=ADC1
 8002d56:	4e4e      	ldr	r6, [pc, #312]	; (8002e90 <P_ADC1_conf_strain+0x14c>)
 8002d58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d5c:	62da      	str	r2, [r3, #44]	; 0x2c
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8002d5e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d62:	f7ff f9cf 	bl	8002104 <LL_AHB2_GRP1_EnableClock>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d66:	68ab      	ldr	r3, [r5, #8]
 8002d68:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d70:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002d72:	68e3      	ldr	r3, [r4, #12]
 8002d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d78:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 8002d7a:	68e3      	ldr	r3, [r4, #12]
 8002d7c:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8002d80:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 8002d82:	68e3      	ldr	r3, [r4, #12]
 8002d84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d88:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 8002d8a:	68e3      	ldr	r3, [r4, #12]
 8002d8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d90:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002d92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d94:	f023 030f 	bic.w	r3, r3, #15
 8002d98:	6323      	str	r3, [r4, #48]	; 0x30
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3); // FSR1=PC2=Ch3=ADC1
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	4632      	mov	r2, r6
 8002d9e:	2106      	movs	r1, #6
 8002da0:	f7ff f9e2 	bl	8002168 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3,
 8002da4:	4620      	mov	r0, r4
 8002da6:	4631      	mov	r1, r6
 8002da8:	2207      	movs	r2, #7
 8002daa:	f7ff f9fb 	bl	80021a4 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002dae:	68ab      	ldr	r3, [r5, #8]
	LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_4);
 8002db0:	4e38      	ldr	r6, [pc, #224]	; (8002e94 <P_ADC1_conf_strain+0x150>)
 8002db2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002db6:	f504 7480 	add.w	r4, r4, #256	; 0x100
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dbe:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002dc0:	68e3      	ldr	r3, [r4, #12]
 8002dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc6:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 8002dc8:	68e3      	ldr	r3, [r4, #12]
 8002dca:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8002dce:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 8002dd0:	68e3      	ldr	r3, [r4, #12]
 8002dd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dd6:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 8002dd8:	68e3      	ldr	r3, [r4, #12]
 8002dda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dde:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002de0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002de2:	f023 030f 	bic.w	r3, r3, #15
 8002de6:	6323      	str	r3, [r4, #48]	; 0x30
 8002de8:	4632      	mov	r2, r6
 8002dea:	4620      	mov	r0, r4
 8002dec:	2106      	movs	r1, #6
 8002dee:	f7ff f9bb 	bl	8002168 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_4,
 8002df2:	4631      	mov	r1, r6
 8002df4:	4620      	mov	r0, r4
 8002df6:	2207      	movs	r2, #7
 8002df8:	f7ff f9d4 	bl	80021a4 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002dfc:	68ab      	ldr	r3, [r5, #8]
 8002dfe:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e06:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002e08:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8002e0c:	4d22      	ldr	r5, [pc, #136]	; (8002e98 <P_ADC1_conf_strain+0x154>)
 8002e0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e12:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
 8002e16:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8002e1a:	f423 637c 	bic.w	r3, r3, #4032	; 0xfc0
 8002e1e:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 8002e22:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8002e26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e2a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
 8002e2e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8002e32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e36:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002e3a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8002e3e:	f023 030f 	bic.w	r3, r3, #15
 8002e42:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
 8002e46:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8002e4a:	462a      	mov	r2, r5
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	2106      	movs	r1, #6
 8002e50:	f7ff f98a 	bl	8002168 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_2,
 8002e54:	4629      	mov	r1, r5
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8002e56:	4d11      	ldr	r5, [pc, #68]	; (8002e9c <P_ADC1_conf_strain+0x158>)
	LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_2,
 8002e58:	4620      	mov	r0, r4
 8002e5a:	2207      	movs	r2, #7
 8002e5c:	f7ff f9a2 	bl	80021a4 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8002e60:	462a      	mov	r2, r5
 8002e62:	4620      	mov	r0, r4
 8002e64:	2106      	movs	r1, #6
 8002e66:	f7ff f97f 	bl	8002168 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_1,
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	2207      	movs	r2, #7
 8002e70:	f7ff f998 	bl	80021a4 <LL_ADC_SetChannelSamplingTime>
	P_Activate_ADC3();
 8002e74:	f7ff fe32 	bl	8002adc <P_Activate_ADC3>
	P_Activate_ADC2();
 8002e78:	f7ff fe96 	bl	8002ba8 <P_Activate_ADC2>
}
 8002e7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	P_Activate_ADC1();
 8002e80:	f7ff bef8 	b.w	8002c74 <P_Activate_ADC1>
 8002e84:	40021000 	.word	0x40021000
 8002e88:	50040300 	.word	0x50040300
 8002e8c:	50040000 	.word	0x50040000
 8002e90:	0c900008 	.word	0x0c900008
 8002e94:	10c00010 	.word	0x10c00010
 8002e98:	08600004 	.word	0x08600004
 8002e9c:	04300002 	.word	0x04300002

08002ea0 <P_ADC_Sensor_GPIO_Init>:
void P_ADC_Sensor_GPIO_Init(void) {
 8002ea0:	b510      	push	{r4, lr}
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_2, LL_GPIO_MODE_ANALOG);
 8002ea2:	4c16      	ldr	r4, [pc, #88]	; (8002efc <P_ADC_Sensor_GPIO_Init+0x5c>)
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002ea4:	2004      	movs	r0, #4
 8002ea6:	f7ff f92d 	bl	8002104 <LL_AHB2_GRP1_EnableClock>
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_2, LL_GPIO_MODE_ANALOG);
 8002eaa:	4620      	mov	r0, r4
 8002eac:	2203      	movs	r2, #3
 8002eae:	2104      	movs	r1, #4
 8002eb0:	f7ff f944 	bl	800213c <LL_GPIO_SetPinMode>
  SET_BIT(GPIOx->ASCR, PinMask);
 8002eb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002eb6:	f043 0304 	orr.w	r3, r3, #4
 8002eba:	62e3      	str	r3, [r4, #44]	; 0x2c
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_3, LL_GPIO_MODE_ANALOG);
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	2108      	movs	r1, #8
 8002ec2:	f7ff f93b 	bl	800213c <LL_GPIO_SetPinMode>
 8002ec6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ec8:	f043 0308 	orr.w	r3, r3, #8
 8002ecc:	62e3      	str	r3, [r4, #44]	; 0x2c
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_1, LL_GPIO_MODE_ANALOG);
 8002ece:	4620      	mov	r0, r4
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	f7ff f932 	bl	800213c <LL_GPIO_SetPinMode>
 8002ed8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002eda:	f043 0302 	orr.w	r3, r3, #2
 8002ede:	62e3      	str	r3, [r4, #44]	; 0x2c
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_0, LL_GPIO_MODE_ANALOG);
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	f7ff f929 	bl	800213c <LL_GPIO_SetPinMode>
 8002eea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	P_ADC1_conf_strain();
 8002ef6:	f7ff bf25 	b.w	8002d44 <P_ADC1_conf_strain>
 8002efa:	bf00      	nop
 8002efc:	48000800 	.word	0x48000800

08002f00 <WriteReg1>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8002f00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f04:	f44f 7280 	mov.w	r2, #256	; 0x100
	delay_us(5);
	LL_GPIO_SetOutputPin(SPI3_IMU5_CS_GPIO_Port, SPI3_IMU5_CS_Pin); // PA4 CS SET Active Low // for IMU5 changed here
	return temp_val;
}

unsigned int WriteReg1(uint8_t adress, uint8_t data) {
 8002f08:	b510      	push	{r4, lr}
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28
	unsigned int temp_val;
	LL_GPIO_ResetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);

	while (!(SPI1->SR & SPI_SR_TXE))
 8002f0c:	4a0c      	ldr	r2, [pc, #48]	; (8002f40 <WriteReg1+0x40>)
 8002f0e:	4613      	mov	r3, r2
 8002f10:	6894      	ldr	r4, [r2, #8]
 8002f12:	07a4      	lsls	r4, r4, #30
 8002f14:	d5fc      	bpl.n	8002f10 <WriteReg1+0x10>
 8002f16:	7310      	strb	r0, [r2, #12]
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, adress);
	while (!(SPI1->SR & SPI_SR_RXNE))
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	07d4      	lsls	r4, r2, #31
 8002f1c:	d5fc      	bpl.n	8002f18 <WriteReg1+0x18>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002f1e:	68da      	ldr	r2, [r3, #12]
		; //data received?
	LL_SPI_ReceiveData8(SPI1);

	while (!(SPI1->SR & SPI_SR_TXE))
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	0790      	lsls	r0, r2, #30
 8002f24:	d5fc      	bpl.n	8002f20 <WriteReg1+0x20>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002f26:	7319      	strb	r1, [r3, #12]
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, data);
	while (!(SPI1->SR & SPI_SR_RXNE))
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <WriteReg1+0x40>)
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	07d2      	lsls	r2, r2, #31
 8002f2e:	d5fc      	bpl.n	8002f2a <WriteReg1+0x2a>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002f30:	68d8      	ldr	r0, [r3, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002f32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f3a:	619a      	str	r2, [r3, #24]
		; //data received?
	temp_val = LL_SPI_ReceiveData8(SPI1);

	LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN);
	return temp_val;
}
 8002f3c:	b2c0      	uxtb	r0, r0
 8002f3e:	bd10      	pop	{r4, pc}
 8002f40:	40013000 	.word	0x40013000

08002f44 <WriteReg1_imu2>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8002f44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f48:	f44f 4200 	mov.w	r2, #32768	; 0x8000

unsigned int WriteReg1_imu2(uint8_t adress, uint8_t data) {
 8002f4c:	b510      	push	{r4, lr}
 8002f4e:	629a      	str	r2, [r3, #40]	; 0x28
	unsigned int temp_val;
	LL_GPIO_ResetOutputPin(SPI1_IMU2_CS_GPIO_Port, SPI1_IMU2_CS_Pin);

	while (!(SPI1->SR & SPI_SR_TXE))
 8002f50:	4a0c      	ldr	r2, [pc, #48]	; (8002f84 <WriteReg1_imu2+0x40>)
 8002f52:	4613      	mov	r3, r2
 8002f54:	6894      	ldr	r4, [r2, #8]
 8002f56:	07a4      	lsls	r4, r4, #30
 8002f58:	d5fc      	bpl.n	8002f54 <WriteReg1_imu2+0x10>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002f5a:	7310      	strb	r0, [r2, #12]
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, adress);
	while (!(SPI1->SR & SPI_SR_RXNE))
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	07d4      	lsls	r4, r2, #31
 8002f60:	d5fc      	bpl.n	8002f5c <WriteReg1_imu2+0x18>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002f62:	68da      	ldr	r2, [r3, #12]
		; //data received?
	LL_SPI_ReceiveData8(SPI1);

	while (!(SPI1->SR & SPI_SR_TXE))
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	0790      	lsls	r0, r2, #30
 8002f68:	d5fc      	bpl.n	8002f64 <WriteReg1_imu2+0x20>
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002f6a:	7319      	strb	r1, [r3, #12]
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, data);
	while (!(SPI1->SR & SPI_SR_RXNE))
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <WriteReg1_imu2+0x40>)
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	07d2      	lsls	r2, r2, #31
 8002f72:	d5fc      	bpl.n	8002f6e <WriteReg1_imu2+0x2a>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002f74:	68d8      	ldr	r0, [r3, #12]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002f76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f7a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f7e:	619a      	str	r2, [r3, #24]
		; //data received?
	temp_val = LL_SPI_ReceiveData8(SPI1);

	LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_IMU2_CS_Pin);
	return temp_val;
}
 8002f80:	b2c0      	uxtb	r0, r0
 8002f82:	bd10      	pop	{r4, pc}
 8002f84:	40013000 	.word	0x40013000

08002f88 <ReadRegs1>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8002f88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000

	LL_GPIO_SetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN); // PC4 CS SET Active Low

}

void ReadRegs1(uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes) {
 8002f8c:	b530      	push	{r4, r5, lr}
 8002f8e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8002f92:	629c      	str	r4, [r3, #40]	; 0x28
	unsigned int i = 0;
	LL_GPIO_ResetOutputPin(SPI1_CS_GPIO_PORT, SPI1_CS_PIN); // PA4 CS RESET Active Low

	while (!(SPI1->SR & SPI_SR_TXE))
 8002f94:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <ReadRegs1+0x50>)
 8002f96:	461c      	mov	r4, r3
 8002f98:	689d      	ldr	r5, [r3, #8]
 8002f9a:	07ad      	lsls	r5, r5, #30
 8002f9c:	d5fc      	bpl.n	8002f98 <ReadRegs1+0x10>
		; //transmit buffer empty?
	LL_SPI_TransmitData8(SPI1, (ReadAddr | 0x80)); // (Starting Address 0x22 | 0x80); MSB is '1' for 0x80, next 7 bit Address of register to write 0x22
 8002f9e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002fa2:	7318      	strb	r0, [r3, #12]
	while (!(SPI1->SR & SPI_SR_RXNE))
 8002fa4:	68a3      	ldr	r3, [r4, #8]
 8002fa6:	07db      	lsls	r3, r3, #31
 8002fa8:	d5fc      	bpl.n	8002fa4 <ReadRegs1+0x1c>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002faa:	68e3      	ldr	r3, [r4, #12]
		; //data received?
	LL_SPI_ReceiveData8(SPI1);

	for (i = 0; i < Bytes; i++) {
		while (!(SPI1->SR & SPI_SR_TXE))
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <ReadRegs1+0x50>)
 8002fae:	440a      	add	r2, r1
  *((__IO uint8_t *)&SPIx->DR) = TxData;
 8002fb0:	2000      	movs	r0, #0
	for (i = 0; i < Bytes; i++) {
 8002fb2:	4291      	cmp	r1, r2
 8002fb4:	d105      	bne.n	8002fc2 <ReadRegs1+0x3a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002fb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002fba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fbe:	619a      	str	r2, [r3, #24]
 8002fc0:	bd30      	pop	{r4, r5, pc}
		while (!(SPI1->SR & SPI_SR_TXE))
 8002fc2:	689c      	ldr	r4, [r3, #8]
 8002fc4:	07a5      	lsls	r5, r4, #30
 8002fc6:	d5fc      	bpl.n	8002fc2 <ReadRegs1+0x3a>
 8002fc8:	7318      	strb	r0, [r3, #12]
			; //transmit buffer empty?
		LL_SPI_TransmitData8(SPI1, 0x00);

		while (!(SPI1->SR & SPI_SR_RXNE))
 8002fca:	689c      	ldr	r4, [r3, #8]
 8002fcc:	07e4      	lsls	r4, r4, #31
 8002fce:	d5fc      	bpl.n	8002fca <ReadRegs1+0x42>
  return (uint8_t)(READ_REG(SPIx->DR));
 8002fd0:	68dc      	ldr	r4, [r3, #12]
 8002fd2:	f801 4b01 	strb.w	r4, [r1], #1
 8002fd6:	e7ec      	b.n	8002fb2 <ReadRegs1+0x2a>
 8002fd8:	40013000 	.word	0x40013000

08002fdc <Read_Loadcell1>:
//
//return Load1;
//	  // ADC3 Ch2 PC1 read
//}

int Read_Loadcell1(void) {
 8002fdc:	b508      	push	{r3, lr}
	int Load1;
	// ADC3 Ch1 PC0 read
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8002fde:	4a10      	ldr	r2, [pc, #64]	; (8003020 <Read_Loadcell1+0x44>)
 8002fe0:	4810      	ldr	r0, [pc, #64]	; (8003024 <Read_Loadcell1+0x48>)
 8002fe2:	2106      	movs	r1, #6
 8002fe4:	f7ff f8c0 	bl	8002168 <LL_ADC_REG_SetSequencerRanks>

	LL_ADC_REG_StartConversion(ADC2);
 8002fe8:	480f      	ldr	r0, [pc, #60]	; (8003028 <Read_Loadcell1+0x4c>)
 8002fea:	f7ff f881 	bl	80020f0 <LL_ADC_REG_StartConversion>
	ADC_TimeOut_Count_Buf = 0;
 8002fee:	4a0f      	ldr	r2, [pc, #60]	; (800302c <Read_Loadcell1+0x50>)
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002ff0:	480d      	ldr	r0, [pc, #52]	; (8003028 <Read_Loadcell1+0x4c>)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	6013      	str	r3, [r2, #0]
	ADC_Error_Buf = 0;
 8002ff6:	4a0e      	ldr	r2, [pc, #56]	; (8003030 <Read_Loadcell1+0x54>)
 8002ff8:	7013      	strb	r3, [r2, #0]
 8002ffa:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_EOC(ADC2) == 0)) {
 8002ffc:	075b      	lsls	r3, r3, #29
 8002ffe:	d50b      	bpl.n	8003018 <Read_Loadcell1+0x3c>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003000:	2304      	movs	r3, #4
 8003002:	6003      	str	r3, [r0, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003004:	6c00      	ldr	r0, [r0, #64]	; 0x40
		Wait_for_ADC_timeout_While_Datalog();
	}
	LL_ADC_ClearFlag_EOC(ADC2);
	Load1 = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI,
 8003006:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 800300a:	b280      	uxth	r0, r0
 800300c:	4343      	muls	r3, r0
			LL_ADC_REG_ReadConversionData12(ADC2), LL_ADC_RESOLUTION_12B); // Toe

	return Load1;
	// ADC3 Ch2 PC1 read
}
 800300e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003012:	fbb3 f0f0 	udiv	r0, r3, r0
 8003016:	bd08      	pop	{r3, pc}
		Wait_for_ADC_timeout_While_Datalog();
 8003018:	f7ff fd38 	bl	8002a8c <Wait_for_ADC_timeout_While_Datalog>
 800301c:	e7ed      	b.n	8002ffa <Read_Loadcell1+0x1e>
 800301e:	bf00      	nop
 8003020:	04300002 	.word	0x04300002
 8003024:	50040200 	.word	0x50040200
 8003028:	50040100 	.word	0x50040100
 800302c:	20008c3c 	.word	0x20008c3c
 8003030:	200091fb 	.word	0x200091fb

08003034 <Read_Loadcell2>:

int Read_Loadcell2(void) {
 8003034:	b508      	push	{r3, lr}
	int Load2;
	// ADC3 Ch1 PC0 read
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8003036:	4a10      	ldr	r2, [pc, #64]	; (8003078 <Read_Loadcell2+0x44>)
 8003038:	4810      	ldr	r0, [pc, #64]	; (800307c <Read_Loadcell2+0x48>)
 800303a:	2106      	movs	r1, #6
 800303c:	f7ff f894 	bl	8002168 <LL_ADC_REG_SetSequencerRanks>

	LL_ADC_REG_StartConversion(ADC1);
 8003040:	480f      	ldr	r0, [pc, #60]	; (8003080 <Read_Loadcell2+0x4c>)
 8003042:	f7ff f855 	bl	80020f0 <LL_ADC_REG_StartConversion>
	ADC_TimeOut_Count_Buf = 0;
 8003046:	4a0f      	ldr	r2, [pc, #60]	; (8003084 <Read_Loadcell2+0x50>)
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8003048:	480d      	ldr	r0, [pc, #52]	; (8003080 <Read_Loadcell2+0x4c>)
 800304a:	2300      	movs	r3, #0
 800304c:	6013      	str	r3, [r2, #0]
	ADC_Error_Buf = 0;
 800304e:	4a0e      	ldr	r2, [pc, #56]	; (8003088 <Read_Loadcell2+0x54>)
 8003050:	7013      	strb	r3, [r2, #0]
 8003052:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0)) {
 8003054:	075b      	lsls	r3, r3, #29
 8003056:	d50b      	bpl.n	8003070 <Read_Loadcell2+0x3c>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003058:	2304      	movs	r3, #4
 800305a:	6003      	str	r3, [r0, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800305c:	6c00      	ldr	r0, [r0, #64]	; 0x40
		Wait_for_ADC_timeout_While_Datalog();
	}
	LL_ADC_ClearFlag_EOC(ADC1);
	Load2 = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI,
 800305e:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8003062:	b280      	uxth	r0, r0
 8003064:	4343      	muls	r3, r0
			LL_ADC_REG_ReadConversionData12(ADC1), LL_ADC_RESOLUTION_12B); //Heel

	return Load2;
	// ADC3 Ch2 PC1 read
}
 8003066:	f640 70ff 	movw	r0, #4095	; 0xfff
 800306a:	fbb3 f0f0 	udiv	r0, r3, r0
 800306e:	bd08      	pop	{r3, pc}
		Wait_for_ADC_timeout_While_Datalog();
 8003070:	f7ff fd0c 	bl	8002a8c <Wait_for_ADC_timeout_While_Datalog>
 8003074:	e7ed      	b.n	8003052 <Read_Loadcell2+0x1e>
 8003076:	bf00      	nop
 8003078:	04300002 	.word	0x04300002
 800307c:	50040200 	.word	0x50040200
 8003080:	50040000 	.word	0x50040000
 8003084:	20008c3c 	.word	0x20008c3c
 8003088:	200091fb 	.word	0x200091fb

0800308c <F_Sensor_ADC_Store>:

void F_Sensor_ADC_Store(void) {
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// ADC3 Ch1 PC0 read
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 800308e:	4a28      	ldr	r2, [pc, #160]	; (8003130 <F_Sensor_ADC_Store+0xa4>)
 8003090:	4828      	ldr	r0, [pc, #160]	; (8003134 <F_Sensor_ADC_Store+0xa8>)

	LL_ADC_REG_StartConversion(ADC2);
	ADC_TimeOut_Count_Buf = 0;
 8003092:	4d29      	ldr	r5, [pc, #164]	; (8003138 <F_Sensor_ADC_Store+0xac>)
	ADC_Error_Buf = 0;
 8003094:	4c29      	ldr	r4, [pc, #164]	; (800313c <F_Sensor_ADC_Store+0xb0>)
	LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8003096:	2106      	movs	r1, #6
 8003098:	f7ff f866 	bl	8002168 <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_REG_StartConversion(ADC2);
 800309c:	4828      	ldr	r0, [pc, #160]	; (8003140 <F_Sensor_ADC_Store+0xb4>)
 800309e:	f7ff f827 	bl	80020f0 <LL_ADC_REG_StartConversion>
	ADC_TimeOut_Count_Buf = 0;
 80030a2:	2300      	movs	r3, #0
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 80030a4:	4826      	ldr	r0, [pc, #152]	; (8003140 <F_Sensor_ADC_Store+0xb4>)
 80030a6:	602b      	str	r3, [r5, #0]
	ADC_Error_Buf = 0;
 80030a8:	7023      	strb	r3, [r4, #0]
 80030aa:	6803      	ldr	r3, [r0, #0]
	while ((LL_ADC_IsActiveFlag_EOC(ADC2) == 0)) {
 80030ac:	075a      	lsls	r2, r3, #29
 80030ae:	d539      	bpl.n	8003124 <F_Sensor_ADC_Store+0x98>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80030b0:	2304      	movs	r3, #4
		Wait_for_ADC_timeout_While_Datalog();
	}
	LL_ADC_ClearFlag_EOC(ADC2);
	BSbuffer[s_flag].Loadcel1[Sub_cnt] = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 80030b2:	4f24      	ldr	r7, [pc, #144]	; (8003144 <F_Sensor_ADC_Store+0xb8>)
 80030b4:	4e24      	ldr	r6, [pc, #144]	; (8003148 <F_Sensor_ADC_Store+0xbc>)
 80030b6:	6003      	str	r3, [r0, #0]
 80030b8:	f897 e000 	ldrb.w	lr, [r7]
 80030bc:	6833      	ldr	r3, [r6, #0]
 80030be:	4a23      	ldr	r2, [pc, #140]	; (800314c <F_Sensor_ADC_Store+0xc0>)
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80030c0:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80030c2:	eb03 334e 	add.w	r3, r3, lr, lsl #13
 80030c6:	f503 53d2 	add.w	r3, r3, #6720	; 0x1a40
 80030ca:	3318      	adds	r3, #24
 80030cc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80030d0:	b280      	uxth	r0, r0
 80030d2:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 80030d6:	4341      	muls	r1, r0
 80030d8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80030dc:	fbb1 f1f0 	udiv	r1, r1, r0
			VDDA_APPLI, LL_ADC_REG_ReadConversionData12(ADC2),
			LL_ADC_RESOLUTION_12B);  // Toe

	LL_ADC_REG_StartConversion(ADC1);
 80030e0:	481b      	ldr	r0, [pc, #108]	; (8003150 <F_Sensor_ADC_Store+0xc4>)
	BSbuffer[s_flag].Loadcel1[Sub_cnt] = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 80030e2:	8059      	strh	r1, [r3, #2]
	LL_ADC_REG_StartConversion(ADC1);
 80030e4:	f7ff f804 	bl	80020f0 <LL_ADC_REG_StartConversion>
	ADC_TimeOut_Count_Buf = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	602b      	str	r3, [r5, #0]
	ADC_Error_Buf = 0;
 80030ec:	7023      	strb	r3, [r4, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 80030ee:	4c18      	ldr	r4, [pc, #96]	; (8003150 <F_Sensor_ADC_Store+0xc4>)
 80030f0:	4610      	mov	r0, r2
 80030f2:	6823      	ldr	r3, [r4, #0]
	while ((LL_ADC_IsActiveFlag_EOC(ADC1) == 0)) {
 80030f4:	075b      	lsls	r3, r3, #29
 80030f6:	d518      	bpl.n	800312a <F_Sensor_ADC_Store+0x9e>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80030f8:	2304      	movs	r3, #4
 80030fa:	6023      	str	r3, [r4, #0]
		Wait_for_ADC_timeout_While_Datalog();
	}
	LL_ADC_ClearFlag_EOC(ADC1);
	BSbuffer[s_flag].Loadcel2[Sub_cnt] = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 80030fc:	7839      	ldrb	r1, [r7, #0]
 80030fe:	6833      	ldr	r3, [r6, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003100:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003102:	eb03 3341 	add.w	r3, r3, r1, lsl #13
 8003106:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800310a:	3318      	adds	r3, #24
 800310c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003110:	b291      	uxth	r1, r2
 8003112:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8003116:	434a      	muls	r2, r1
 8003118:	f640 71ff 	movw	r1, #4095	; 0xfff
 800311c:	fbb2 f2f1 	udiv	r2, r2, r1
 8003120:	809a      	strh	r2, [r3, #4]
 8003122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Wait_for_ADC_timeout_While_Datalog();
 8003124:	f7ff fcb2 	bl	8002a8c <Wait_for_ADC_timeout_While_Datalog>
 8003128:	e7bf      	b.n	80030aa <F_Sensor_ADC_Store+0x1e>
		Wait_for_ADC_timeout_While_Datalog();
 800312a:	f7ff fcaf 	bl	8002a8c <Wait_for_ADC_timeout_While_Datalog>
 800312e:	e7e0      	b.n	80030f2 <F_Sensor_ADC_Store+0x66>
 8003130:	04300002 	.word	0x04300002
 8003134:	50040200 	.word	0x50040200
 8003138:	20008c3c 	.word	0x20008c3c
 800313c:	200091fb 	.word	0x200091fb
 8003140:	50040100 	.word	0x50040100
 8003144:	200005ba 	.word	0x200005ba
 8003148:	200005b4 	.word	0x200005b4
 800314c:	20000880 	.word	0x20000880
 8003150:	50040000 	.word	0x50040000

08003154 <ACC_GPIO_INIT>:
	LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE0); // Set PC0 pin EXTI interrupt in EXTI9-5 line
	LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_0);      // Enable PC0 pin EXTI interrupt
	LL_EXTI_EnableFallingTrig_0_31(LL_EXTI_LINE_0); // Interrupt configured for Falling edge
}

void ACC_GPIO_INIT(void) {
 8003154:	b510      	push	{r4, lr}
	// Configure SCK Pin connected to PA5, MISO PA6, MOSI PA7
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_5, LL_GPIO_MODE_ALTERNATE);
 8003156:	2202      	movs	r2, #2
 8003158:	2120      	movs	r1, #32
 800315a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800315e:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
 8003162:	f7fe ffeb 	bl	800213c <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_5, LL_GPIO_AF_5);
 8003166:	2205      	movs	r2, #5
 8003168:	2120      	movs	r1, #32
 800316a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800316e:	f7ff f840 	bl	80021f2 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_5, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8003172:	2120      	movs	r1, #32
 8003174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003178:	f7ff f867 	bl	800224a <LL_GPIO_SetPinSpeed.constprop.6>
 800317c:	6863      	ldr	r3, [r4, #4]
 800317e:	f023 0320 	bic.w	r3, r3, #32
 8003182:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_5, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_5, LL_GPIO_PULL_NO);
 8003184:	4620      	mov	r0, r4
 8003186:	2200      	movs	r2, #0
 8003188:	2120      	movs	r1, #32
 800318a:	f7ff f848 	bl	800221e <LL_GPIO_SetPinPull>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 800318e:	4620      	mov	r0, r4
 8003190:	2202      	movs	r2, #2
 8003192:	2140      	movs	r1, #64	; 0x40
 8003194:	f7fe ffd2 	bl	800213c <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_6, LL_GPIO_AF_5);
 8003198:	2205      	movs	r2, #5
 800319a:	4620      	mov	r0, r4
 800319c:	2140      	movs	r1, #64	; 0x40
 800319e:	f7ff f828 	bl	80021f2 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 80031a2:	4620      	mov	r0, r4
 80031a4:	2140      	movs	r1, #64	; 0x40
 80031a6:	f7ff f850 	bl	800224a <LL_GPIO_SetPinSpeed.constprop.6>
 80031aa:	6863      	ldr	r3, [r4, #4]
 80031ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031b0:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_6, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 80031b2:	4620      	mov	r0, r4
 80031b4:	2200      	movs	r2, #0
 80031b6:	2140      	movs	r1, #64	; 0x40
 80031b8:	f7ff f831 	bl	800221e <LL_GPIO_SetPinPull>

	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_7, LL_GPIO_MODE_ALTERNATE);
 80031bc:	4620      	mov	r0, r4
 80031be:	2202      	movs	r2, #2
 80031c0:	2180      	movs	r1, #128	; 0x80
 80031c2:	f7fe ffbb 	bl	800213c <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_7, LL_GPIO_AF_5);
 80031c6:	2205      	movs	r2, #5
 80031c8:	4620      	mov	r0, r4
 80031ca:	2180      	movs	r1, #128	; 0x80
 80031cc:	f7ff f811 	bl	80021f2 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_7, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 80031d0:	4620      	mov	r0, r4
 80031d2:	2180      	movs	r1, #128	; 0x80
 80031d4:	f7ff f839 	bl	800224a <LL_GPIO_SetPinSpeed.constprop.6>
 80031d8:	6863      	ldr	r3, [r4, #4]
 80031da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031de:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOA, LL_GPIO_PIN_7, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_7, LL_GPIO_PULL_NO);
 80031e0:	4620      	mov	r0, r4
 80031e2:	2200      	movs	r2, #0
 80031e4:	2180      	movs	r1, #128	; 0x80
}
 80031e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_7, LL_GPIO_PULL_NO);
 80031ea:	f7ff b818 	b.w	800221e <LL_GPIO_SetPinPull>
	...

080031f0 <P_IMU1_SPI1_Init>:
	LL_GPIO_SetPinOutputType(GPIOB, LL_GPIO_PIN_15, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_15, LL_GPIO_PULL_NO);
}

void P_IMU1_SPI1_Init(void)  //MPU9250
{
 80031f0:	b508      	push	{r3, lr}

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80031f2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80031f6:	f7fe ff93 	bl	8002120 <LL_APB2_GRP1_EnableClock>

	ACC_GPIO_INIT();
 80031fa:	f7ff ffab 	bl	8003154 <ACC_GPIO_INIT>
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 80031fe:	4b1b      	ldr	r3, [pc, #108]	; (800326c <P_IMU1_SPI1_Init+0x7c>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8003206:	f042 0208 	orr.w	r2, r2, #8
 800320a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8003212:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	f042 0202 	orr.w	r2, r2, #2
 8003222:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800322a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8003232:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003236:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	f022 0204 	bic.w	r2, r2, #4
 8003246:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800324e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	f442 7282 	orr.w	r2, r2, #260	; 0x104
 8003256:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800325e:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	f042 0208 	orr.w	r2, r2, #8
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	bd08      	pop	{r3, pc}
 800326a:	bf00      	nop
 800326c:	40013000 	.word	0x40013000

08003270 <Configure_USART_1>:
	delay_us(10000);

}

void Configure_USART_1(void)   // USART1: PB6-Tx, (PA10-Rx disabled)
{
 8003270:	b510      	push	{r4, lr}

// Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 8003272:	4c18      	ldr	r4, [pc, #96]	; (80032d4 <Configure_USART_1+0x64>)
 8003274:	2202      	movs	r2, #2
 8003276:	2140      	movs	r1, #64	; 0x40
 8003278:	4620      	mov	r0, r4
 800327a:	f7fe ff5f 	bl	800213c <LL_GPIO_SetPinMode>
	LL_GPIO_SetAFPin_0_7(GPIOB, LL_GPIO_PIN_6, LL_GPIO_AF_7);
 800327e:	2207      	movs	r2, #7
 8003280:	2140      	movs	r1, #64	; 0x40
 8003282:	4620      	mov	r0, r4
 8003284:	f7fe ffb5 	bl	80021f2 <LL_GPIO_SetAFPin_0_7>
	LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_VERY_HIGH);
 8003288:	2140      	movs	r1, #64	; 0x40
 800328a:	4620      	mov	r0, r4
 800328c:	f7fe ffdd 	bl	800224a <LL_GPIO_SetPinSpeed.constprop.6>
 8003290:	6863      	ldr	r3, [r4, #4]
 8003292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003296:	6063      	str	r3, [r4, #4]
	LL_GPIO_SetPinOutputType(GPIOB, LL_GPIO_PIN_6, LL_GPIO_OUTPUT_PUSHPULL);
	LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_UP);
 8003298:	2201      	movs	r2, #1
 800329a:	2140      	movs	r1, #64	; 0x40
 800329c:	4620      	mov	r0, r4
 800329e:	f7fe ffbe 	bl	800221e <LL_GPIO_SetPinPull>

	RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1 clock enable, Clock source Default peripheral clock PCLK2, APB2
 80032a2:	4a0d      	ldr	r2, [pc, #52]	; (80032d8 <Configure_USART_1+0x68>)
 80032a4:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80032a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032aa:	6613      	str	r3, [r2, #96]	; 0x60

// Default parameter: 8 data bit, 1 start bit, 1 stop bit, no parity, no hardware flow control

	MODIFY_REG(USART1->CR1, USART_CR1_RE | USART_CR1_TE,
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <Configure_USART_1+0x6c>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	f042 020c 	orr.w	r2, r2, #12
 80032b4:	601a      	str	r2, [r3, #0]
			(USART_CR1_TE |USART_CR1_RE)); // TX/RX direction BidirecttionalLL_USART_DIRECTION_TX_RX

	USART1->BRR =
			(uint16_t) (__LL_USART_DIV_SAMPLING16(SystemCoreClock, 115200)); // Baud rate 115200
 80032b6:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <Configure_USART_1+0x70>)
 80032b8:	6812      	ldr	r2, [r2, #0]
 80032ba:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80032be:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 80032c2:	fbb2 f2f1 	udiv	r2, r2, r1
	USART1->BRR =
 80032c6:	60da      	str	r2, [r3, #12]

	USART1->CR1 |= USART_CR1_UE;  // Unable USART1
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	bd10      	pop	{r4, pc}
 80032d2:	bf00      	nop
 80032d4:	48000400 	.word	0x48000400
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40013800 	.word	0x40013800
 80032e0:	2000000c 	.word	0x2000000c

080032e4 <USART1_wr_print>:

}

void USART1_wr_print(uint8_t *buffer, uint32_t nBytes) {
	for (int i = 0; i < nBytes; i++) {
		while (!(USART1->ISR & USART_ISR_TXE))
 80032e4:	4b09      	ldr	r3, [pc, #36]	; (800330c <USART1_wr_print+0x28>)
 80032e6:	4401      	add	r1, r0
	for (int i = 0; i < nBytes; i++) {
 80032e8:	4288      	cmp	r0, r1
 80032ea:	d100      	bne.n	80032ee <USART1_wr_print+0xa>

		while (!(USART1->ISR & USART_ISR_TC))
			;
		USART1->ISR &= ~USART_ISR_TC;
	}
}
 80032ec:	4770      	bx	lr
		while (!(USART1->ISR & USART_ISR_TXE))
 80032ee:	69da      	ldr	r2, [r3, #28]
 80032f0:	0612      	lsls	r2, r2, #24
 80032f2:	d5fc      	bpl.n	80032ee <USART1_wr_print+0xa>
		USART1->TDR = buffer[i] & 0xFF;
 80032f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032f8:	851a      	strh	r2, [r3, #40]	; 0x28
		while (!(USART1->ISR & USART_ISR_TC))
 80032fa:	69da      	ldr	r2, [r3, #28]
 80032fc:	0652      	lsls	r2, r2, #25
 80032fe:	d5fc      	bpl.n	80032fa <USART1_wr_print+0x16>
		USART1->ISR &= ~USART_ISR_TC;
 8003300:	69da      	ldr	r2, [r3, #28]
 8003302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003306:	61da      	str	r2, [r3, #28]
 8003308:	e7ee      	b.n	80032e8 <USART1_wr_print+0x4>
 800330a:	bf00      	nop
 800330c:	40013800 	.word	0x40013800

08003310 <Clear_ErrorTimestamp_Buffer>:
}

int FPGA_Loop_Error_cnt;

void Clear_ErrorTimestamp_Buffer(void) {
	ErrorCodeBuf = 0;
 8003310:	4a02      	ldr	r2, [pc, #8]	; (800331c <Clear_ErrorTimestamp_Buffer+0xc>)
 8003312:	2300      	movs	r3, #0
 8003314:	7013      	strb	r3, [r2, #0]
	ErrorTimeStampBuf = 0;
 8003316:	4a02      	ldr	r2, [pc, #8]	; (8003320 <Clear_ErrorTimestamp_Buffer+0x10>)
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	4770      	bx	lr
 800331c:	20008981 	.word	0x20008981
 8003320:	20008984 	.word	0x20008984

08003324 <Reset_All>:
{
 8003324:	b508      	push	{r3, lr}
	last_file = 0;
 8003326:	4b0d      	ldr	r3, [pc, #52]	; (800335c <Reset_All+0x38>)
 8003328:	2100      	movs	r1, #0
 800332a:	6019      	str	r1, [r3, #0]
	Sub_cnt = 0;         // Array Index count in a single buffer to store values
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <Reset_All+0x3c>)
 800332e:	6019      	str	r1, [r3, #0]
	w_flag = 1; // Buffer write flag to be written in FATFS file (1=Buffer1, 0=Buffer0)
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <Reset_All+0x40>)
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
	s_flag = 0; // Buffer Store flag to be stored/filled by sensor values in interrupt (1=Buffer1, 0=Buffer0)
 8003336:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <Reset_All+0x44>)
 8003338:	7019      	strb	r1, [r3, #0]
	SD_write_Flag = 0; // Flag to indicates whether a buffer a full and ready to write in SD card
 800333a:	4b0c      	ldr	r3, [pc, #48]	; (800336c <Reset_All+0x48>)
 800333c:	7019      	strb	r1, [r3, #0]
	SD_Write_Count = 0; // Number of SD write. If reach a predefined value, f_sync() operation will update FATFS files.
 800333e:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <Reset_All+0x4c>)
 8003340:	7019      	strb	r1, [r3, #0]
	Clear_ErrorTimestamp_Buffer();
 8003342:	f7ff ffe5 	bl	8003310 <Clear_ErrorTimestamp_Buffer>
 8003346:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <Reset_All+0x50>)
		Error_reg_log.Error[indxE] = 0;
 8003348:	460a      	mov	r2, r1
 800334a:	f1a3 0008 	sub.w	r0, r3, #8
 800334e:	540a      	strb	r2, [r1, r0]
	for (int indxE = 0; indxE < 10; indxE++) {
 8003350:	3101      	adds	r1, #1
 8003352:	290a      	cmp	r1, #10
		Error_reg_log.ErrorTime[indxE] = 0;
 8003354:	f843 2f04 	str.w	r2, [r3, #4]!
	for (int indxE = 0; indxE < 10; indxE++) {
 8003358:	d1f9      	bne.n	800334e <Reset_All+0x2a>
}
 800335a:	bd08      	pop	{r3, pc}
 800335c:	20008f70 	.word	0x20008f70
 8003360:	200005b4 	.word	0x200005b4
 8003364:	20000008 	.word	0x20000008
 8003368:	200005ba 	.word	0x200005ba
 800336c:	20008980 	.word	0x20008980
 8003370:	200005b0 	.word	0x200005b0
 8003374:	2000888c 	.word	0x2000888c

08003378 <Save_ErrorTimestamp_Buffer>:
}

void Save_ErrorTimestamp_Buffer(uint8_t ErrorCode) {
 8003378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ErrorCodeBuf = ErrorCode;
 800337a:	4b21      	ldr	r3, [pc, #132]	; (8003400 <Save_ErrorTimestamp_Buffer+0x88>)
void Save_ErrorTimestamp_Buffer(uint8_t ErrorCode) {
 800337c:	4606      	mov	r6, r0
	ErrorCodeBuf = ErrorCode;
 800337e:	7018      	strb	r0, [r3, #0]
	ErrorTimeStampBuf =
			__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))
 8003380:	f7fe fff8 	bl	8002374 <LL_RTC_TIME_GetHour.constprop.13>
 8003384:	4604      	mov	r4, r0
 8003386:	f7fe fff5 	bl	8002374 <LL_RTC_TIME_GetHour.constprop.13>
 800338a:	4605      	mov	r5, r0
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 800338c:	f7fe ffd8 	bl	8002340 <LL_RTC_TIME_GetMinute.constprop.12>
			__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))
 8003390:	f3c4 1403 	ubfx	r4, r4, #4, #4
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8003394:	4607      	mov	r7, r0
 8003396:	f7fe ffd3 	bl	8002340 <LL_RTC_TIME_GetMinute.constprop.12>
			__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))
 800339a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800339e:	f005 040f 	and.w	r4, r5, #15
 80033a2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80033a6:	f3c7 1303 	ubfx	r3, r7, #4, #4
 80033aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033ae:	f000 000f 	and.w	r0, r0, #15
 80033b2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80033b6:	b2c0      	uxtb	r0, r0
 80033b8:	2364      	movs	r3, #100	; 0x64
 80033ba:	fb10 f003 	smulbb	r0, r0, r3
			__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC))
 80033be:	b2e4      	uxtb	r4, r4
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80033c0:	f242 7310 	movw	r3, #10000	; 0x2710
 80033c4:	fb03 0404 	mla	r4, r3, r4, r0
 80033c8:	f7fe ffa2 	bl	8002310 <LL_RTC_TIME_GetSecond.constprop.11>
 80033cc:	4605      	mov	r5, r0
 80033ce:	f7fe ff9f 	bl	8002310 <LL_RTC_TIME_GetSecond.constprop.11>
 80033d2:	f3c5 1303 	ubfx	r3, r5, #4, #4
 80033d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033da:	f000 000f 	and.w	r0, r0, #15
 80033de:	eb00 0043 	add.w	r0, r0, r3, lsl #1

	Error_reg_log.Error[Error_indx] = ErrorCode;
 80033e2:	4908      	ldr	r1, [pc, #32]	; (8003404 <Save_ErrorTimestamp_Buffer+0x8c>)
	ErrorTimeStampBuf =
 80033e4:	4b08      	ldr	r3, [pc, #32]	; (8003408 <Save_ErrorTimestamp_Buffer+0x90>)
	Error_reg_log.Error[Error_indx] = ErrorCode;
 80033e6:	4a09      	ldr	r2, [pc, #36]	; (800340c <Save_ErrorTimestamp_Buffer+0x94>)
					* 10000+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC))*100+__RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 80033e8:	fa54 f480 	uxtab	r4, r4, r0
	ErrorTimeStampBuf =
 80033ec:	601c      	str	r4, [r3, #0]
	Error_reg_log.Error[Error_indx] = ErrorCode;
 80033ee:	780b      	ldrb	r3, [r1, #0]
 80033f0:	54d6      	strb	r6, [r2, r3]
	Error_reg_log.ErrorTime[Error_indx] = ErrorTimeStampBuf;
 80033f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	Error_indx++;
 80033f6:	3301      	adds	r3, #1
 80033f8:	700b      	strb	r3, [r1, #0]
	Error_reg_log.ErrorTime[Error_indx] = ErrorTimeStampBuf;
 80033fa:	60d4      	str	r4, [r2, #12]
	Error_indx++;
 80033fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033fe:	bf00      	nop
 8003400:	20008981 	.word	0x20008981
 8003404:	20008c72 	.word	0x20008c72
 8003408:	20008984 	.word	0x20008984
 800340c:	20008884 	.word	0x20008884

08003410 <AIM_Error_Handler>:
}

void AIM_Error_Handler(int AIM_Error_Code) {
	switch (AIM_Error_Code) {
 8003410:	3801      	subs	r0, #1
void AIM_Error_Handler(int AIM_Error_Code) {
 8003412:	b510      	push	{r4, lr}
	switch (AIM_Error_Code) {
 8003414:	280f      	cmp	r0, #15
 8003416:	d862      	bhi.n	80034de <AIM_Error_Handler+0xce>
 8003418:	e8df f000 	tbb	[pc, r0]
 800341c:	392e611e 	.word	0x392e611e
 8003420:	4661610f 	.word	0x4661610f
 8003424:	54616161 	.word	0x54616161
 8003428:	08616161 	.word	0x08616161

	case FPGA_SPI_R_Error:
		Save_ErrorTimestamp_Buffer(FPGA_SPI_R_Error);
 800342c:	2010      	movs	r0, #16
 800342e:	f7ff ffa3 	bl	8003378 <Save_ErrorTimestamp_Buffer>
		FATAL_Error = 1;
 8003432:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <AIM_Error_Handler+0xd0>)
 8003434:	2201      	movs	r2, #1
 8003436:	701a      	strb	r2, [r3, #0]

		break;
 8003438:	bd10      	pop	{r4, pc}

	case f_write_E:
		file_reopen();
 800343a:	f7ff f8c7 	bl	80025cc <file_reopen>
		if (Fat_write_read_fail == 1) // Could not solve write issue by reopening file
 800343e:	4b29      	ldr	r3, [pc, #164]	; (80034e4 <AIM_Error_Handler+0xd4>)
 8003440:	681c      	ldr	r4, [r3, #0]
 8003442:	2c01      	cmp	r4, #1
 8003444:	d14b      	bne.n	80034de <AIM_Error_Handler+0xce>
				{
			Fat_read_mnt_fail = 0;
 8003446:	4b28      	ldr	r3, [pc, #160]	; (80034e8 <AIM_Error_Handler+0xd8>)
 8003448:	2200      	movs	r2, #0
			Save_ErrorTimestamp_Buffer(f_write_E);
 800344a:	2005      	movs	r0, #5
			Fat_read_mnt_fail = 0;
 800344c:	601a      	str	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(f_write_E);
 800344e:	f7ff ff93 	bl	8003378 <Save_ErrorTimestamp_Buffer>
			File_Sensor_write_issue = 1;
 8003452:	4b26      	ldr	r3, [pc, #152]	; (80034ec <AIM_Error_Handler+0xdc>)
		file_reopen_sync();
		if (Fat_sync_read_fail == 1) // Could not solve write issue by reopening file
				{
			Fat_sync_read_fail = 0;
			Save_ErrorTimestamp_Buffer(f_sync_E);
			File_Sensor_close_issue = 1;
 8003454:	701c      	strb	r4, [r3, #0]
 8003456:	e018      	b.n	800348a <AIM_Error_Handler+0x7a>
		file_mnt_reopen();
 8003458:	f7ff f8d0 	bl	80025fc <file_mnt_reopen>
		if (Fat_read_mnt_fail == 1) // Could not solve read issue by FATFS mount
 800345c:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <AIM_Error_Handler+0xd8>)
 800345e:	681c      	ldr	r4, [r3, #0]
 8003460:	2c01      	cmp	r4, #1
 8003462:	d13c      	bne.n	80034de <AIM_Error_Handler+0xce>
			Fat_read_mnt_fail = 0;
 8003464:	2200      	movs	r2, #0
			Save_ErrorTimestamp_Buffer(f_open_E);
 8003466:	4620      	mov	r0, r4
			Fat_read_mnt_fail = 0;
 8003468:	601a      	str	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(f_open_E);
 800346a:	f7ff ff85 	bl	8003378 <Save_ErrorTimestamp_Buffer>
			FATAL_Error = 1;
 800346e:	4b1c      	ldr	r3, [pc, #112]	; (80034e0 <AIM_Error_Handler+0xd0>)
 8003470:	701c      	strb	r4, [r3, #0]
			Skip_FATFS = 1;
 8003472:	4b1f      	ldr	r3, [pc, #124]	; (80034f0 <AIM_Error_Handler+0xe0>)
			FATAL_Error = 1;
 8003474:	701c      	strb	r4, [r3, #0]
 8003476:	bd10      	pop	{r4, pc}
		Try_FATFS_Mount();
 8003478:	f7ff f862 	bl	8002540 <Try_FATFS_Mount>
		if (Skip_FATFS == 1)  // Could not solve FATFS mount
 800347c:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <AIM_Error_Handler+0xe0>)
 800347e:	781c      	ldrb	r4, [r3, #0]
 8003480:	2c01      	cmp	r4, #1
 8003482:	d12c      	bne.n	80034de <AIM_Error_Handler+0xce>
			Save_ErrorTimestamp_Buffer(f_mount_E);
 8003484:	2003      	movs	r0, #3
 8003486:	f7ff ff77 	bl	8003378 <Save_ErrorTimestamp_Buffer>
			FATAL_Error = 1;
 800348a:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <AIM_Error_Handler+0xd0>)
 800348c:	e7f2      	b.n	8003474 <AIM_Error_Handler+0x64>
		file_reopen_sync();
 800348e:	f7ff f885 	bl	800259c <file_reopen_sync>
		if (Fat_sync_read_fail == 1) // Could not solve write issue by reopening file
 8003492:	4b18      	ldr	r3, [pc, #96]	; (80034f4 <AIM_Error_Handler+0xe4>)
 8003494:	681c      	ldr	r4, [r3, #0]
 8003496:	2c01      	cmp	r4, #1
 8003498:	d121      	bne.n	80034de <AIM_Error_Handler+0xce>
			Fat_sync_read_fail = 0;
 800349a:	2200      	movs	r2, #0
			Save_ErrorTimestamp_Buffer(f_sync_E);
 800349c:	2004      	movs	r0, #4
			Fat_sync_read_fail = 0;
 800349e:	601a      	str	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(f_sync_E);
 80034a0:	f7ff ff6a 	bl	8003378 <Save_ErrorTimestamp_Buffer>
			File_Sensor_close_issue = 1;
 80034a4:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <AIM_Error_Handler+0xe8>)
 80034a6:	e7d5      	b.n	8003454 <AIM_Error_Handler+0x44>

		break;

	case SPI_Acc_Error:

		if (SPI_ErrorCnt > 3) {
 80034a8:	4a14      	ldr	r2, [pc, #80]	; (80034fc <AIM_Error_Handler+0xec>)
 80034aa:	7813      	ldrb	r3, [r2, #0]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d914      	bls.n	80034da <AIM_Error_Handler+0xca>
			SPI_ErrorCnt = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	7013      	strb	r3, [r2, #0]
			FATAL_Error = 1;
 80034b4:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <AIM_Error_Handler+0xd0>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	701a      	strb	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(SPI_Acc_Error);
 80034ba:	2008      	movs	r0, #8
	default:

		break;

	}
}
 80034bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			Save_ErrorTimestamp_Buffer(ADC_R_Error);
 80034c0:	f7ff bf5a 	b.w	8003378 <Save_ErrorTimestamp_Buffer>
		if (ADC_ErrorCnt > 3) {
 80034c4:	4a0e      	ldr	r2, [pc, #56]	; (8003500 <AIM_Error_Handler+0xf0>)
 80034c6:	7813      	ldrb	r3, [r2, #0]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d906      	bls.n	80034da <AIM_Error_Handler+0xca>
			ADC_ErrorCnt = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	7013      	strb	r3, [r2, #0]
			FATAL_Error = 1;
 80034d0:	4b03      	ldr	r3, [pc, #12]	; (80034e0 <AIM_Error_Handler+0xd0>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	701a      	strb	r2, [r3, #0]
			Save_ErrorTimestamp_Buffer(ADC_R_Error);
 80034d6:	200c      	movs	r0, #12
 80034d8:	e7f0      	b.n	80034bc <AIM_Error_Handler+0xac>
			ADC_ErrorCnt++;
 80034da:	3301      	adds	r3, #1
 80034dc:	7013      	strb	r3, [r2, #0]
 80034de:	bd10      	pop	{r4, pc}
 80034e0:	20008f6c 	.word	0x20008f6c
 80034e4:	20008c18 	.word	0x20008c18
 80034e8:	20008cc0 	.word	0x20008cc0
 80034ec:	20008c38 	.word	0x20008c38
 80034f0:	20008f6d 	.word	0x20008f6d
 80034f4:	20008c1c 	.word	0x20008c1c
 80034f8:	20008d02 	.word	0x20008d02
 80034fc:	20009200 	.word	0x20009200
 8003500:	20008f74 	.word	0x20008f74

08003504 <FATFS_Init>:
void FATFS_Init(void) {
 8003504:	b510      	push	{r4, lr}
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8003506:	490b      	ldr	r1, [pc, #44]	; (8003534 <FATFS_Init+0x30>)
 8003508:	480b      	ldr	r0, [pc, #44]	; (8003538 <FATFS_Init+0x34>)
 800350a:	4c0c      	ldr	r4, [pc, #48]	; (800353c <FATFS_Init+0x38>)
 800350c:	f007 ff34 	bl	800b378 <FATFS_LinkDriver>
 8003510:	b928      	cbnz	r0, 800351e <FATFS_Init+0x1a>
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 8003512:	2201      	movs	r2, #1
 8003514:	4907      	ldr	r1, [pc, #28]	; (8003534 <FATFS_Init+0x30>)
 8003516:	480a      	ldr	r0, [pc, #40]	; (8003540 <FATFS_Init+0x3c>)
 8003518:	f007 fa5c 	bl	800a9d4 <f_mount>
 800351c:	b108      	cbz	r0, 8003522 <FATFS_Init+0x1e>
			Fat_mnt_fail = 1;
 800351e:	2301      	movs	r3, #1
 8003520:	6023      	str	r3, [r4, #0]
	if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d104      	bne.n	8003532 <FATFS_Init+0x2e>
		AIM_Error_Handler(f_mount_E);
 8003528:	2003      	movs	r0, #3
}
 800352a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		AIM_Error_Handler(f_mount_E);
 800352e:	f7ff bf6f 	b.w	8003410 <AIM_Error_Handler>
 8003532:	bd10      	pop	{r4, pc}
 8003534:	20008d09 	.word	0x20008d09
 8003538:	0800cef0 	.word	0x0800cef0
 800353c:	20008c14 	.word	0x20008c14
 8003540:	20008d18 	.word	0x20008d18

08003544 <Check_SD_Command_File>:
void Check_SD_Command_File(void) {
 8003544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Data_log_Start_Resume = 0;
 8003546:	4c31      	ldr	r4, [pc, #196]	; (800360c <Check_SD_Command_File+0xc8>)
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8003548:	4931      	ldr	r1, [pc, #196]	; (8003610 <Check_SD_Command_File+0xcc>)
 800354a:	4832      	ldr	r0, [pc, #200]	; (8003614 <Check_SD_Command_File+0xd0>)
 800354c:	4e32      	ldr	r6, [pc, #200]	; (8003618 <Check_SD_Command_File+0xd4>)
	Data_log_Start_Resume = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	7023      	strb	r3, [r4, #0]
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)    // Link SD Driver
 8003552:	f007 ff11 	bl	800b378 <FATFS_LinkDriver>
 8003556:	b930      	cbnz	r0, 8003566 <Check_SD_Command_File+0x22>
		if (f_mount(&SDFatFs, (TCHAR const*) SDPath, 1) != FR_OK) // Register the file system object to the FatFs module
 8003558:	2201      	movs	r2, #1
 800355a:	492d      	ldr	r1, [pc, #180]	; (8003610 <Check_SD_Command_File+0xcc>)
 800355c:	482f      	ldr	r0, [pc, #188]	; (800361c <Check_SD_Command_File+0xd8>)
 800355e:	f007 fa39 	bl	800a9d4 <f_mount>
 8003562:	4605      	mov	r5, r0
 8003564:	b148      	cbz	r0, 800357a <Check_SD_Command_File+0x36>
			Fat_mnt_fail = 1;
 8003566:	2301      	movs	r3, #1
 8003568:	6033      	str	r3, [r6, #0]
	if (Fat_mnt_fail == 1)    // Could not Link driver in 2nd Attempt
 800356a:	6833      	ldr	r3, [r6, #0]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d14b      	bne.n	8003608 <Check_SD_Command_File+0xc4>
		AIM_Error_Handler(f_mount_E);
 8003570:	2003      	movs	r0, #3
}
 8003572:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		AIM_Error_Handler(f_mount_E);
 8003576:	f7ff bf4b 	b.w	8003410 <AIM_Error_Handler>
			if (f_open(&MyFile, "EnterDFU.txt", FA_READ) != FR_OK) // Check the presence of EnterDFU.txt file
 800357a:	2201      	movs	r2, #1
 800357c:	4928      	ldr	r1, [pc, #160]	; (8003620 <Check_SD_Command_File+0xdc>)
 800357e:	4829      	ldr	r0, [pc, #164]	; (8003624 <Check_SD_Command_File+0xe0>)
 8003580:	f007 fa5e 	bl	800aa40 <f_open>
 8003584:	4607      	mov	r7, r0
 8003586:	b360      	cbz	r0, 80035e2 <Check_SD_Command_File+0x9e>
				if (f_open(&MyFile, "EnterVCP.txt", FA_READ) != FR_OK) // Check the presence of EnterVCP.txt file
 8003588:	2201      	movs	r2, #1
 800358a:	4927      	ldr	r1, [pc, #156]	; (8003628 <Check_SD_Command_File+0xe4>)
 800358c:	4825      	ldr	r0, [pc, #148]	; (8003624 <Check_SD_Command_File+0xe0>)
 800358e:	f007 fa57 	bl	800aa40 <f_open>
 8003592:	b1f0      	cbz	r0, 80035d2 <Check_SD_Command_File+0x8e>
					if (Logstart_Delete == 1) {
 8003594:	4b25      	ldr	r3, [pc, #148]	; (800362c <Check_SD_Command_File+0xe8>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	2a01      	cmp	r2, #1
 800359a:	d104      	bne.n	80035a6 <Check_SD_Command_File+0x62>
						if (f_unlink("LogStart.txt") == FR_OK) { // If LogStart.txt file present, delete the file
 800359c:	4824      	ldr	r0, [pc, #144]	; (8003630 <Check_SD_Command_File+0xec>)
						Logstart_Delete = 0;
 800359e:	601d      	str	r5, [r3, #0]
					if (f_unlink("EnterVCP.txt") == FR_OK) { // If EnterVCP.txt file present, delete the file
 80035a0:	f007 fe4e 	bl	800b240 <f_unlink>
 80035a4:	e006      	b.n	80035b4 <Check_SD_Command_File+0x70>
						if (f_open(&MyFile, "LogStart.txt", FA_READ) != FR_OK) // Check the presence of LogStart.txt file
 80035a6:	2201      	movs	r2, #1
 80035a8:	4921      	ldr	r1, [pc, #132]	; (8003630 <Check_SD_Command_File+0xec>)
 80035aa:	481e      	ldr	r0, [pc, #120]	; (8003624 <Check_SD_Command_File+0xe0>)
 80035ac:	f007 fa48 	bl	800aa40 <f_open>
 80035b0:	b148      	cbz	r0, 80035c6 <Check_SD_Command_File+0x82>
							Data_log_Start_Resume = 0;         // Data Log Stops
 80035b2:	7025      	strb	r5, [r4, #0]
			f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 80035b4:	2200      	movs	r2, #0
 80035b6:	491f      	ldr	r1, [pc, #124]	; (8003634 <Check_SD_Command_File+0xf0>)
 80035b8:	4610      	mov	r0, r2
 80035ba:	f007 fa0b 	bl	800a9d4 <f_mount>
			FATFS_UnLinkDriver(SDPath);  //  unlink SD card driver if necessary
 80035be:	4814      	ldr	r0, [pc, #80]	; (8003610 <Check_SD_Command_File+0xcc>)
 80035c0:	f007 fef6 	bl	800b3b0 <FATFS_UnLinkDriver>
 80035c4:	e7d1      	b.n	800356a <Check_SD_Command_File+0x26>
							Data_log_Start_Resume = 1; // Data Log Starts/Resume
 80035c6:	2301      	movs	r3, #1
							f_close(&MyFile);
 80035c8:	4816      	ldr	r0, [pc, #88]	; (8003624 <Check_SD_Command_File+0xe0>)
							Data_log_Start_Resume = 1; // Data Log Starts/Resume
 80035ca:	7023      	strb	r3, [r4, #0]
							f_close(&MyFile);
 80035cc:	f007 fc5f 	bl	800ae8e <f_close>
 80035d0:	e7f0      	b.n	80035b4 <Check_SD_Command_File+0x70>
					USB_Mode = 0;       // USB VCP mode in Next USB Connectivity
 80035d2:	4b19      	ldr	r3, [pc, #100]	; (8003638 <Check_SD_Command_File+0xf4>)
					Data_log_Start_Resume = 0;          // Data Log Stops
 80035d4:	7020      	strb	r0, [r4, #0]
					USB_Mode = 0;       // USB VCP mode in Next USB Connectivity
 80035d6:	7018      	strb	r0, [r3, #0]
					f_close(&MyFile);
 80035d8:	4812      	ldr	r0, [pc, #72]	; (8003624 <Check_SD_Command_File+0xe0>)
 80035da:	f007 fc58 	bl	800ae8e <f_close>
					if (f_unlink("EnterVCP.txt") == FR_OK) { // If EnterVCP.txt file present, delete the file
 80035de:	4812      	ldr	r0, [pc, #72]	; (8003628 <Check_SD_Command_File+0xe4>)
 80035e0:	e7de      	b.n	80035a0 <Check_SD_Command_File+0x5c>
				f_close(&MyFile);
 80035e2:	4810      	ldr	r0, [pc, #64]	; (8003624 <Check_SD_Command_File+0xe0>)
 80035e4:	f007 fc53 	bl	800ae8e <f_close>
				if (f_unlink("EnterDFU.txt") == FR_OK) { // If EnterDFU.txt file present, delete the file
 80035e8:	480d      	ldr	r0, [pc, #52]	; (8003620 <Check_SD_Command_File+0xdc>)
 80035ea:	f007 fe29 	bl	800b240 <f_unlink>
				f_mount(0, "", 0); 		     //  unmount FATFS file if necessary
 80035ee:	463a      	mov	r2, r7
 80035f0:	4910      	ldr	r1, [pc, #64]	; (8003634 <Check_SD_Command_File+0xf0>)
 80035f2:	4638      	mov	r0, r7
 80035f4:	f007 f9ee 	bl	800a9d4 <f_mount>
				FATFS_UnLinkDriver(SDPath); //  unlink SD card driver if necessary
 80035f8:	4805      	ldr	r0, [pc, #20]	; (8003610 <Check_SD_Command_File+0xcc>)
 80035fa:	f007 fed9 	bl	800b3b0 <FATFS_UnLinkDriver>
				*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 80035fe:	4b0f      	ldr	r3, [pc, #60]	; (800363c <Check_SD_Command_File+0xf8>)
 8003600:	4a0f      	ldr	r2, [pc, #60]	; (8003640 <Check_SD_Command_File+0xfc>)
 8003602:	601a      	str	r2, [r3, #0]
				NVIC_SystemReset();        // System reset
 8003604:	f7fe fd62 	bl	80020cc <NVIC_SystemReset>
 8003608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800360a:	bf00      	nop
 800360c:	20008979 	.word	0x20008979
 8003610:	20008d09 	.word	0x20008d09
 8003614:	0800cef0 	.word	0x0800cef0
 8003618:	20008c14 	.word	0x20008c14
 800361c:	20008d18 	.word	0x20008d18
 8003620:	0800cc5a 	.word	0x0800cc5a
 8003624:	20008f78 	.word	0x20008f78
 8003628:	0800cc67 	.word	0x0800cc67
 800362c:	2000970c 	.word	0x2000970c
 8003630:	0800cc74 	.word	0x0800cc74
 8003634:	0800ce1b 	.word	0x0800ce1b
 8003638:	20009238 	.word	0x20009238
 800363c:	20017ff0 	.word	0x20017ff0
 8003640:	deadbeef 	.word	0xdeadbeef

08003644 <Execute_VCP_Command>:
	if (EnterReset_Create == 1) {
 8003644:	4a10      	ldr	r2, [pc, #64]	; (8003688 <Execute_VCP_Command+0x44>)
 8003646:	6811      	ldr	r1, [r2, #0]
void Execute_VCP_Command(void) {
 8003648:	b538      	push	{r3, r4, r5, lr}
	Data_log_Start_Resume = 0;
 800364a:	4c10      	ldr	r4, [pc, #64]	; (800368c <Execute_VCP_Command+0x48>)
 800364c:	2300      	movs	r3, #0
	if (EnterReset_Create == 1) {
 800364e:	2901      	cmp	r1, #1
	Data_log_Start_Resume = 0;
 8003650:	7023      	strb	r3, [r4, #0]
	if (EnterReset_Create == 1) {
 8003652:	d102      	bne.n	800365a <Execute_VCP_Command+0x16>
		EnterReset_Create = 0;
 8003654:	6013      	str	r3, [r2, #0]
		NVIC_SystemReset();    // System reset
 8003656:	f7fe fd39 	bl	80020cc <NVIC_SystemReset>
	if (EnterDFU_Create == 1) {
 800365a:	4a0d      	ldr	r2, [pc, #52]	; (8003690 <Execute_VCP_Command+0x4c>)
 800365c:	6811      	ldr	r1, [r2, #0]
 800365e:	2901      	cmp	r1, #1
 8003660:	d104      	bne.n	800366c <Execute_VCP_Command+0x28>
		EnterDFU_Create = 0;
 8003662:	6013      	str	r3, [r2, #0]
		*Bootloader_Ram_Key_Address = Bootloader_Key_Value; // Write a key to a RAM location to check at next reset
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <Execute_VCP_Command+0x50>)
 8003666:	4a0c      	ldr	r2, [pc, #48]	; (8003698 <Execute_VCP_Command+0x54>)
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e7f4      	b.n	8003656 <Execute_VCP_Command+0x12>
	if (Logstart_Create == 1) {
 800366c:	4a0b      	ldr	r2, [pc, #44]	; (800369c <Execute_VCP_Command+0x58>)
 800366e:	6815      	ldr	r5, [r2, #0]
 8003670:	2d01      	cmp	r5, #1
 8003672:	d107      	bne.n	8003684 <Execute_VCP_Command+0x40>
		Logstart_Create = 0;
 8003674:	6013      	str	r3, [r2, #0]
		FATFS_Logstart_Ready();
 8003676:	f7ff f80f 	bl	8002698 <FATFS_Logstart_Ready>
		Data_log_Start_Resume = 1;
 800367a:	7025      	strb	r5, [r4, #0]
}
 800367c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Check_SD_Command_File();
 8003680:	f7ff bf60 	b.w	8003544 <Check_SD_Command_File>
 8003684:	bd38      	pop	{r3, r4, r5, pc}
 8003686:	bf00      	nop
 8003688:	20009ff8 	.word	0x20009ff8
 800368c:	20008979 	.word	0x20008979
 8003690:	2000abe8 	.word	0x2000abe8
 8003694:	20017ff0 	.word	0x20017ff0
 8003698:	deadbeef 	.word	0xdeadbeef
 800369c:	20009788 	.word	0x20009788

080036a0 <Open_File_For_Sensor_Write>:
void Open_File_For_Sensor_Write(void) {
 80036a0:	b538      	push	{r3, r4, r5, lr}
	if (Skip_FATFS == 0) {
 80036a2:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <Open_File_For_Sensor_Write+0x58>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	bb2b      	cbnz	r3, 80036f4 <Open_File_For_Sensor_Write+0x54>
		last_file = GetNextIndex("");
 80036a8:	4814      	ldr	r0, [pc, #80]	; (80036fc <Open_File_For_Sensor_Write+0x5c>)
		res = f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 80036aa:	4c15      	ldr	r4, [pc, #84]	; (8003700 <Open_File_For_Sensor_Write+0x60>)
 80036ac:	4d15      	ldr	r5, [pc, #84]	; (8003704 <Open_File_For_Sensor_Write+0x64>)
		last_file = GetNextIndex("");
 80036ae:	f7fe ff17 	bl	80024e0 <GetNextIndex>
 80036b2:	4b15      	ldr	r3, [pc, #84]	; (8003708 <Open_File_For_Sensor_Write+0x68>)
		sprintf(FILE_NAME_STRING, "%06d.BIN", last_file);
 80036b4:	4915      	ldr	r1, [pc, #84]	; (800370c <Open_File_For_Sensor_Write+0x6c>)
		last_file = GetNextIndex("");
 80036b6:	6018      	str	r0, [r3, #0]
 80036b8:	4602      	mov	r2, r0
		sprintf(FILE_NAME_STRING, "%06d.BIN", last_file);
 80036ba:	4815      	ldr	r0, [pc, #84]	; (8003710 <Open_File_For_Sensor_Write+0x70>)
 80036bc:	f007 ff80 	bl	800b5c0 <siprintf>
		res = f_open(&MyFile, FILE_NAME_STRING, FA_OPEN_ALWAYS | FA_WRITE);
 80036c0:	2212      	movs	r2, #18
 80036c2:	4913      	ldr	r1, [pc, #76]	; (8003710 <Open_File_For_Sensor_Write+0x70>)
 80036c4:	4620      	mov	r0, r4
 80036c6:	f007 f9bb 	bl	800aa40 <f_open>
 80036ca:	7028      	strb	r0, [r5, #0]
		if (res != FR_OK) // Create and Open a new text file object with write access
 80036cc:	b140      	cbz	r0, 80036e0 <Open_File_For_Sensor_Write+0x40>
			AIM_Error_Handler(f_open_E);
 80036ce:	2001      	movs	r0, #1
 80036d0:	f7ff fe9e 	bl	8003410 <AIM_Error_Handler>
		delay_us(1000);  // Arbitrary delay to complete FATFS SD write
 80036d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 80036d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		delay_us(1000);  // Arbitrary delay to complete FATFS SD write
 80036dc:	f000 bdc4 	b.w	8004268 <delay_us>
			f_lseek(&MyFile, MyFile.fsize); // Increase File Size when big file to write
 80036e0:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 80036e4:	4620      	mov	r0, r4
 80036e6:	f007 fbe3 	bl	800aeb0 <f_lseek>
			res = f_sync(&MyFile);
 80036ea:	4620      	mov	r0, r4
 80036ec:	f007 fb6f 	bl	800adce <f_sync>
 80036f0:	7028      	strb	r0, [r5, #0]
 80036f2:	e7ef      	b.n	80036d4 <Open_File_For_Sensor_Write+0x34>
 80036f4:	bd38      	pop	{r3, r4, r5, pc}
 80036f6:	bf00      	nop
 80036f8:	20008f6d 	.word	0x20008f6d
 80036fc:	0800ce1b 	.word	0x0800ce1b
 8003700:	20008f78 	.word	0x20008f78
 8003704:	200091fa 	.word	0x200091fa
 8003708:	20008f70 	.word	0x20008f70
 800370c:	0800cc84 	.word	0x0800cc84
 8003710:	20008c5c 	.word	0x20008c5c

08003714 <Datalog_Sensor_Initialization>:
void Datalog_Sensor_Initialization(void) {
 8003714:	b508      	push	{r3, lr}
	FATFS_Init();
 8003716:	f7ff fef5 	bl	8003504 <FATFS_Init>
	Open_File_For_Sensor_Write();
 800371a:	f7ff ffc1 	bl	80036a0 <Open_File_For_Sensor_Write>
	if (Skip_FATFS == 0) {
 800371e:	4b04      	ldr	r3, [pc, #16]	; (8003730 <Datalog_Sensor_Initialization+0x1c>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	b91b      	cbnz	r3, 800372c <Datalog_Sensor_Initialization+0x18>
}
 8003724:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Reset_All();         // Reset All Buffer parameters for FATFS SDIO write
 8003728:	f7ff bdfc 	b.w	8003324 <Reset_All>
 800372c:	bd08      	pop	{r3, pc}
 800372e:	bf00      	nop
 8003730:	20008f6d 	.word	0x20008f6d

08003734 <Prepare_Data_Log_State>:
void Prepare_Data_Log_State(void) {
 8003734:	b510      	push	{r4, lr}
	if (Skip_FATFS == 0)   // If there's no FATFS SD error
 8003736:	4c12      	ldr	r4, [pc, #72]	; (8003780 <Prepare_Data_Log_State+0x4c>)
 8003738:	7821      	ldrb	r1, [r4, #0]
 800373a:	b9d9      	cbnz	r1, 8003774 <Prepare_Data_Log_State+0x40>
		Battery_ADC_Value = 2500;
 800373c:	4b11      	ldr	r3, [pc, #68]	; (8003784 <Prepare_Data_Log_State+0x50>)
 800373e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003742:	801a      	strh	r2, [r3, #0]
			if (Data_log_Start_Resume == 1) // Continue Data Log after USB disconnect
 8003744:	4b10      	ldr	r3, [pc, #64]	; (8003788 <Prepare_Data_Log_State+0x54>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d10c      	bne.n	8003766 <Prepare_Data_Log_State+0x32>
				Datalog_Sensor_Initialization();
 800374c:	f7ff ffe2 	bl	8003714 <Datalog_Sensor_Initialization>
				if (Skip_FATFS == 0)   // If there's no FATFS SD error
 8003750:	7823      	ldrb	r3, [r4, #0]
 8003752:	b97b      	cbnz	r3, 8003774 <Prepare_Data_Log_State+0x40>
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8003754:	4a0d      	ldr	r2, [pc, #52]	; (800378c <Prepare_Data_Log_State+0x58>)
 8003756:	6893      	ldr	r3, [r2, #8]
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	6093      	str	r3, [r2, #8]
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <Prepare_Data_Log_State+0x5c>)
 8003760:	2204      	movs	r2, #4
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	bd10      	pop	{r4, pc}
			else if (VCP_Bypass == 1) {
 8003766:	4a0b      	ldr	r2, [pc, #44]	; (8003794 <Prepare_Data_Log_State+0x60>)
 8003768:	4c0b      	ldr	r4, [pc, #44]	; (8003798 <Prepare_Data_Log_State+0x64>)
 800376a:	7813      	ldrb	r3, [r2, #0]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d102      	bne.n	8003776 <Prepare_Data_Log_State+0x42>
				VCP_Bypass = 0;
 8003770:	7011      	strb	r1, [r2, #0]
				Pros_state = Dormant_Idle_Stop;
 8003772:	7023      	strb	r3, [r4, #0]
 8003774:	bd10      	pop	{r4, pc}
				Prepare_Goto_Dormant_Mode();
 8003776:	f7fe fea3 	bl	80024c0 <Prepare_Goto_Dormant_Mode>
				Pros_state = Dormant_Idle_Stop;
 800377a:	2306      	movs	r3, #6
 800377c:	e7f9      	b.n	8003772 <Prepare_Data_Log_State+0x3e>
 800377e:	bf00      	nop
 8003780:	20008f6d 	.word	0x20008f6d
 8003784:	20008f48 	.word	0x20008f48
 8003788:	20008979 	.word	0x20008979
 800378c:	40009400 	.word	0x40009400
 8003790:	e000e100 	.word	0xe000e100
 8003794:	20008d15 	.word	0x20008d15
 8003798:	200088c0 	.word	0x200088c0

0800379c <USB_Init_Start>:
void USB_Init_Start(void) {
 800379c:	b570      	push	{r4, r5, r6, lr}
	SD_POWER_ON();
 800379e:	f7fd ffd5 	bl	800174c <SD_POWER_ON>
	Pros_state = LP_STOP;                  // Next state
 80037a2:	4b2d      	ldr	r3, [pc, #180]	; (8003858 <USB_Init_Start+0xbc>)
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80037a4:	492d      	ldr	r1, [pc, #180]	; (800385c <USB_Init_Start+0xc0>)
	if (Data_log_Start_Resume == 1)    // If Data log was in operation
 80037a6:	4d2e      	ldr	r5, [pc, #184]	; (8003860 <USB_Init_Start+0xc4>)
	Pros_state = LP_STOP;                  // Next state
 80037a8:	2201      	movs	r2, #1
 80037aa:	701a      	strb	r2, [r3, #0]
 80037ac:	2304      	movs	r3, #4
 80037ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	USB_Clock_Ready();
 80037b2:	f7fe fe3f 	bl	8002434 <USB_Clock_Ready>
 80037b6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80037ba:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if (Data_log_Start_Resume == 1)    // If Data log was in operation
 80037be:	782a      	ldrb	r2, [r5, #0]
 80037c0:	2a01      	cmp	r2, #1
 80037c2:	d101      	bne.n	80037c8 <USB_Init_Start+0x2c>
		File_Close_Update_Unlink();
 80037c4:	f7ff f87a 	bl	80028bc <File_Close_Update_Unlink>
	if (USB_Mode == 1)    // USB MSC Mode  // Default: USB VCP mode (0), MSC (1)
 80037c8:	4e26      	ldr	r6, [pc, #152]	; (8003864 <USB_Init_Start+0xc8>)
	Data_log_Start_Resume = 0;
 80037ca:	2400      	movs	r4, #0
 80037cc:	702c      	strb	r4, [r5, #0]
	HAL_ResumeTick();      // Before entering USB mode, SYS_tick needs to enable
 80037ce:	f001 fd8f 	bl	80052f0 <HAL_ResumeTick>
	if (USB_Mode == 1)    // USB MSC Mode  // Default: USB VCP mode (0), MSC (1)
 80037d2:	7833      	ldrb	r3, [r6, #0]
 80037d4:	4d24      	ldr	r5, [pc, #144]	; (8003868 <USB_Init_Start+0xcc>)
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d118      	bne.n	800380c <USB_Init_Start+0x70>
		VIOLET_LED_ONLY();
 80037da:	f7fd ff99 	bl	8001710 <VIOLET_LED_ONLY>
		USB_Mode = 0;               // Next mode default USB VCP
 80037de:	7034      	strb	r4, [r6, #0]
		USB_MSC_Init_Start();
 80037e0:	f7fe ff88 	bl	80026f4 <USB_MSC_Init_Start>
		FATAL_Error = 0;
 80037e4:	702c      	strb	r4, [r5, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80037e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80037ea:	6914      	ldr	r4, [r2, #16]
		while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 80037ec:	f414 7400 	ands.w	r4, r4, #512	; 0x200
 80037f0:	d1fb      	bne.n	80037ea <USB_Init_Start+0x4e>
		ALL_LED_OFF();
 80037f2:	f7fd ff53 	bl	800169c <ALL_LED_OFF>
		Shut_Down_USB();
 80037f6:	f7fe fdff 	bl	80023f8 <Shut_Down_USB>
		Enter_Into_DFU = 0;
 80037fa:	4b1c      	ldr	r3, [pc, #112]	; (800386c <USB_Init_Start+0xd0>)
 80037fc:	701c      	strb	r4, [r3, #0]
				Prepare_Data_Log_State();         // Prepare for Data collection
 80037fe:	f7ff ff99 	bl	8003734 <Prepare_Data_Log_State>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003802:	4b16      	ldr	r3, [pc, #88]	; (800385c <USB_Init_Start+0xc0>)
 8003804:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	bd70      	pop	{r4, r5, r6, pc}
		CYAN_LED_ONLY();
 800380c:	f7fd ff8e 	bl	800172c <CYAN_LED_ONLY>
		USB_VCP_Init_Start();
 8003810:	f7fe ff92 	bl	8002738 <USB_VCP_Init_Start>
		if (Battey_Charge_Mode(&USBD_Device) == USBD_OK) // USB Battery charging mode
 8003814:	4816      	ldr	r0, [pc, #88]	; (8003870 <USB_Init_Start+0xd4>)
 8003816:	f005 fe0b 	bl	8009430 <Battey_Charge_Mode>
 800381a:	b960      	cbnz	r0, 8003836 <USB_Init_Start+0x9a>
			FATAL_Error = 0;
 800381c:	7028      	strb	r0, [r5, #0]
 800381e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003822:	6913      	ldr	r3, [r2, #16]
			while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 8003824:	059b      	lsls	r3, r3, #22
 8003826:	d4fc      	bmi.n	8003822 <USB_Init_Start+0x86>
			Shut_Down_USB();
 8003828:	f7fe fde6 	bl	80023f8 <Shut_Down_USB>
			ALL_LED_OFF();
 800382c:	f7fd ff36 	bl	800169c <ALL_LED_OFF>
			Check_SD_Command_File();
 8003830:	f7ff fe88 	bl	8003544 <Check_SD_Command_File>
 8003834:	e7e3      	b.n	80037fe <USB_Init_Start+0x62>
			FATAL_Error = 0;
 8003836:	702c      	strb	r4, [r5, #0]
 8003838:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800383c:	6914      	ldr	r4, [r2, #16]
			while (LL_GPIO_IsInputPinSet(GPIOA, USB_CONNECTIVITY))
 800383e:	f414 7400 	ands.w	r4, r4, #512	; 0x200
 8003842:	d1fb      	bne.n	800383c <USB_Init_Start+0xa0>
			Shut_Down_USB();
 8003844:	f7fe fdd8 	bl	80023f8 <Shut_Down_USB>
			ALL_LED_OFF();
 8003848:	f7fd ff28 	bl	800169c <ALL_LED_OFF>
				VCP_continue = 0;               // Variable reset, aviod looping
 800384c:	4b09      	ldr	r3, [pc, #36]	; (8003874 <USB_Init_Start+0xd8>)
 800384e:	701c      	strb	r4, [r3, #0]
				Execute_VCP_Command();
 8003850:	f7ff fef8 	bl	8003644 <Execute_VCP_Command>
 8003854:	e7d3      	b.n	80037fe <USB_Init_Start+0x62>
 8003856:	bf00      	nop
 8003858:	200088c0 	.word	0x200088c0
 800385c:	e000e100 	.word	0xe000e100
 8003860:	20008979 	.word	0x20008979
 8003864:	20009238 	.word	0x20009238
 8003868:	20008f6c 	.word	0x20008f6c
 800386c:	20008d16 	.word	0x20008d16
 8003870:	20008988 	.word	0x20008988
 8003874:	20008ca2 	.word	0x20008ca2

08003878 <SD_Sensor_write>:
{
 8003878:	b538      	push	{r3, r4, r5, lr}
	res = f_write(&MyFile, &BSbuffer[w_flag], (8192 * 2), &BytesWritten2);
 800387a:	4b17      	ldr	r3, [pc, #92]	; (80038d8 <SD_Sensor_write+0x60>)
 800387c:	4917      	ldr	r1, [pc, #92]	; (80038dc <SD_Sensor_write+0x64>)
 800387e:	7818      	ldrb	r0, [r3, #0]
 8003880:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <SD_Sensor_write+0x68>)
 8003882:	4c18      	ldr	r4, [pc, #96]	; (80038e4 <SD_Sensor_write+0x6c>)
 8003884:	eb01 3180 	add.w	r1, r1, r0, lsl #14
 8003888:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800388c:	4816      	ldr	r0, [pc, #88]	; (80038e8 <SD_Sensor_write+0x70>)
 800388e:	f007 f9af 	bl	800abf0 <f_write>
 8003892:	7020      	strb	r0, [r4, #0]
	if (res != FR_OK)   // Write the sensor Buffer content to .BIN file
 8003894:	b1b8      	cbz	r0, 80038c6 <SD_Sensor_write+0x4e>
		AIM_Error_Handler(f_write_E);
 8003896:	2005      	movs	r0, #5
 8003898:	f7ff fdba 	bl	8003410 <AIM_Error_Handler>
	if (File_Sensor_write_issue == 0) {
 800389c:	4b13      	ldr	r3, [pc, #76]	; (80038ec <SD_Sensor_write+0x74>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	b9c3      	cbnz	r3, 80038d4 <SD_Sensor_write+0x5c>
		if (SD_Write_Count == SD_cnt_limit) // After 50 SD card write, File Sync (176 write*20.45 sec = 60 minute
 80038a2:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <SD_Sensor_write+0x78>)
 80038a4:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <SD_Sensor_write+0x7c>)
 80038a6:	7811      	ldrb	r1, [r2, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4299      	cmp	r1, r3
 80038ac:	4615      	mov	r5, r2
 80038ae:	d10d      	bne.n	80038cc <SD_Sensor_write+0x54>
			res = f_sync(&MyFile);
 80038b0:	480d      	ldr	r0, [pc, #52]	; (80038e8 <SD_Sensor_write+0x70>)
 80038b2:	f007 fa8c 	bl	800adce <f_sync>
 80038b6:	7020      	strb	r0, [r4, #0]
			if (res != FR_OK) {
 80038b8:	b110      	cbz	r0, 80038c0 <SD_Sensor_write+0x48>
				AIM_Error_Handler(f_sync_E);
 80038ba:	2004      	movs	r0, #4
 80038bc:	f7ff fda8 	bl	8003410 <AIM_Error_Handler>
			SD_Write_Count = 0;                       // Reset SD write counters
 80038c0:	2300      	movs	r3, #0
 80038c2:	702b      	strb	r3, [r5, #0]
 80038c4:	bd38      	pop	{r3, r4, r5, pc}
		GREEN_LED_OFF();               // Sensor write Completed
 80038c6:	f7fd ff06 	bl	80016d6 <GREEN_LED_OFF>
 80038ca:	e7e7      	b.n	800389c <SD_Sensor_write+0x24>
			SD_Write_Count++;                      // Increment SD write counter
 80038cc:	7813      	ldrb	r3, [r2, #0]
 80038ce:	3301      	adds	r3, #1
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	7013      	strb	r3, [r2, #0]
 80038d4:	bd38      	pop	{r3, r4, r5, pc}
 80038d6:	bf00      	nop
 80038d8:	20000008 	.word	0x20000008
 80038dc:	20000880 	.word	0x20000880
 80038e0:	20008c74 	.word	0x20008c74
 80038e4:	200091fa 	.word	0x200091fa
 80038e8:	20008f78 	.word	0x20008f78
 80038ec:	20008c38 	.word	0x20008c38
 80038f0:	200005b0 	.word	0x200005b0
 80038f4:	20008bdf 	.word	0x20008bdf

080038f8 <AIM_DataStart_at_Reset>:

void AIM_DataStart_at_Reset(void) {
 80038f8:	b510      	push	{r4, lr}
	SD_POWER_ON();
 80038fa:	f7fd ff27 	bl	800174c <SD_POWER_ON>
	SD_cnt_limit = 3;                    // After 50 write, File will Sync
 80038fe:	4b0f      	ldr	r3, [pc, #60]	; (800393c <AIM_DataStart_at_Reset+0x44>)
 8003900:	2203      	movs	r2, #3
 8003902:	601a      	str	r2, [r3, #0]
	Data_log_Start_Resume = 1;
 8003904:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <AIM_DataStart_at_Reset+0x48>)
 8003906:	2401      	movs	r4, #1
 8003908:	701c      	strb	r4, [r3, #0]
	FATFS_Init();
 800390a:	f7ff fdfb 	bl	8003504 <FATFS_Init>
	Open_File_For_Sensor_Write();
 800390e:	f7ff fec7 	bl	80036a0 <Open_File_For_Sensor_Write>
	Reset_All();
 8003912:	f7ff fd07 	bl	8003324 <Reset_All>
//	  Start_LPTIMCounter2(0x10); //0xFF //0x4032768
	// Greg end comment

	// Greg start
	// Start interrupt (speed = 32,768 Hz / hex_value, i.e. 0x40 = 64 so speed = 32,768/64 = 512 Hz)
	Start_LPTIMCounter2(0x40);
 8003916:	2040      	movs	r0, #64	; 0x40
 8003918:	f000 fcb0 	bl	800427c <Start_LPTIMCounter2>
 800391c:	4a09      	ldr	r2, [pc, #36]	; (8003944 <AIM_DataStart_at_Reset+0x4c>)
 800391e:	6893      	ldr	r3, [r2, #8]
 8003920:	f043 0302 	orr.w	r3, r3, #2
 8003924:	6093      	str	r3, [r2, #8]
 8003926:	4b08      	ldr	r3, [pc, #32]	; (8003948 <AIM_DataStart_at_Reset+0x50>)
 8003928:	2204      	movs	r2, #4
 800392a:	609a      	str	r2, [r3, #8]
	// Greg end

	LL_LPTIM_EnableIT_ARRM(LPTIM2);
	NVIC_EnableIRQ(LPTIM2_IRQn);
	Pros_state = LP_STOP;
 800392c:	4a07      	ldr	r2, [pc, #28]	; (800394c <AIM_DataStart_at_Reset+0x54>)
 800392e:	7014      	strb	r4, [r2, #0]
	USB_Mode = 1;
 8003930:	4a07      	ldr	r2, [pc, #28]	; (8003950 <AIM_DataStart_at_Reset+0x58>)
 8003932:	7014      	strb	r4, [r2, #0]
 8003934:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	bd10      	pop	{r4, pc}
 800393c:	20008bdf 	.word	0x20008bdf
 8003940:	20008979 	.word	0x20008979
 8003944:	40009400 	.word	0x40009400
 8003948:	e000e100 	.word	0xe000e100
 800394c:	200088c0 	.word	0x200088c0
 8003950:	20009238 	.word	0x20009238

08003954 <IMU1_read>:
//    BSbuffer[s_flag].MZ1[Sub_cnt]=((int16_t)response[19]<<8)|response[18];

	return data_az;
}

struct imu_data IMU1_read(void) {
 8003954:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct imu_data IMU1;
	uint8_t response[21];
	WriteReg1(MPUREG_I2C_SLV0_ADDR, AK8963_I2C_ADDR | READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 8003956:	218c      	movs	r1, #140	; 0x8c
struct imu_data IMU1_read(void) {
 8003958:	b087      	sub	sp, #28
 800395a:	4604      	mov	r4, r0
	WriteReg1(MPUREG_I2C_SLV0_ADDR, AK8963_I2C_ADDR | READ_FLAG); // Set the I2C slave addres of AK8963 and set for read.
 800395c:	2025      	movs	r0, #37	; 0x25
 800395e:	f7ff facf 	bl	8002f00 <WriteReg1>
	WriteReg1(MPUREG_I2C_SLV0_REG, AK8963_HXL); // I2C slave 0 register address from where to begin data transfer
 8003962:	2103      	movs	r1, #3
 8003964:	2026      	movs	r0, #38	; 0x26
 8003966:	f7ff facb 	bl	8002f00 <WriteReg1>
	WriteReg1(MPUREG_I2C_SLV0_CTRL, 0x87); // Read 7 bytes from the magnetometer
 800396a:	2187      	movs	r1, #135	; 0x87
 800396c:	2027      	movs	r0, #39	; 0x27
 800396e:	f7ff fac7 	bl	8002f00 <WriteReg1>

	ReadRegs1(MPUREG_ACCEL_XOUT_H, response, 21);
 8003972:	4669      	mov	r1, sp
 8003974:	2215      	movs	r2, #21
 8003976:	203b      	movs	r0, #59	; 0x3b
 8003978:	f7ff fb06 	bl	8002f88 <ReadRegs1>

	IMU1.AX = ((int16_t) response[0] << 8) | response[1];
	IMU1.AY = ((int16_t) response[2] << 8) | response[3];
 800397c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003980:	f89d 5003 	ldrb.w	r5, [sp, #3]
	IMU1.AZ = ((int16_t) response[4] << 8) | response[5];
 8003984:	f89d 0005 	ldrb.w	r0, [sp, #5]
	IMU1.GX = ((int16_t) response[8] << 8) | response[9];
 8003988:	f89d 1009 	ldrb.w	r1, [sp, #9]
	IMU1.GY = ((int16_t) response[10] << 8) | response[11];
 800398c:	f89d 200b 	ldrb.w	r2, [sp, #11]
	IMU1.GZ = ((int16_t) response[12] << 8) | response[13];
 8003990:	f89d 600c 	ldrb.w	r6, [sp, #12]
	IMU1.AX = ((int16_t) response[0] << 8) | response[1];
 8003994:	f89d 7000 	ldrb.w	r7, [sp]
	IMU1.AY = ((int16_t) response[2] << 8) | response[3];
 8003998:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	IMU1.AZ = ((int16_t) response[4] << 8) | response[5];
 800399c:	f89d 3004 	ldrb.w	r3, [sp, #4]

	return IMU1;
 80039a0:	8065      	strh	r5, [r4, #2]
	IMU1.AZ = ((int16_t) response[4] << 8) | response[5];
 80039a2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	IMU1.GX = ((int16_t) response[8] << 8) | response[9];
 80039a6:	f89d 3008 	ldrb.w	r3, [sp, #8]
	return IMU1;
 80039aa:	80a0      	strh	r0, [r4, #4]
	IMU1.GX = ((int16_t) response[8] << 8) | response[9];
 80039ac:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	IMU1.GY = ((int16_t) response[10] << 8) | response[11];
 80039b0:	f89d 300a 	ldrb.w	r3, [sp, #10]
	return IMU1;
 80039b4:	80e1      	strh	r1, [r4, #6]
	IMU1.GY = ((int16_t) response[10] << 8) | response[11];
 80039b6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	IMU1.GZ = ((int16_t) response[12] << 8) | response[13];
 80039ba:	f89d 300d 	ldrb.w	r3, [sp, #13]
	return IMU1;
 80039be:	8122      	strh	r2, [r4, #8]
	IMU1.GZ = ((int16_t) response[12] << 8) | response[13];
 80039c0:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
	IMU1.AX = ((int16_t) response[0] << 8) | response[1];
 80039c4:	f89d 6001 	ldrb.w	r6, [sp, #1]
	return IMU1;
 80039c8:	8163      	strh	r3, [r4, #10]
	IMU1.AX = ((int16_t) response[0] << 8) | response[1];
 80039ca:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
}
 80039ce:	4620      	mov	r0, r4
	return IMU1;
 80039d0:	8026      	strh	r6, [r4, #0]
}
 80039d2:	b007      	add	sp, #28
 80039d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080039d8 <Knee_data_storeIMU>:

void Knee_data_storeIMU(int value1, int value2, int value3, int value4,
		int value5, int value6) {
 80039d8:	b5f0      	push	{r4, r5, r6, r7, lr}

	BSbuffer[s_flag].AX1[Sub_cnt] = value1;
 80039da:	4e1b      	ldr	r6, [pc, #108]	; (8003a48 <Knee_data_storeIMU+0x70>)
 80039dc:	4d1b      	ldr	r5, [pc, #108]	; (8003a4c <Knee_data_storeIMU+0x74>)
 80039de:	f896 e000 	ldrb.w	lr, [r6]
 80039e2:	682f      	ldr	r7, [r5, #0]
 80039e4:	4c1a      	ldr	r4, [pc, #104]	; (8003a50 <Knee_data_storeIMU+0x78>)
 80039e6:	eb07 374e 	add.w	r7, r7, lr, lsl #13
 80039ea:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 80039ee:	82f8      	strh	r0, [r7, #22]
	BSbuffer[s_flag].AY1[Sub_cnt] = value2;
 80039f0:	7837      	ldrb	r7, [r6, #0]
 80039f2:	6828      	ldr	r0, [r5, #0]
 80039f4:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 80039f8:	f500 70f6 	add.w	r0, r0, #492	; 0x1ec
 80039fc:	f824 1010 	strh.w	r1, [r4, r0, lsl #1]
	BSbuffer[s_flag].AZ1[Sub_cnt] = value3;
 8003a00:	7830      	ldrb	r0, [r6, #0]
 8003a02:	6829      	ldr	r1, [r5, #0]
 8003a04:	eb01 3140 	add.w	r1, r1, r0, lsl #13
 8003a08:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003a0c:	f8a1 279a 	strh.w	r2, [r1, #1946]	; 0x79a
	BSbuffer[s_flag].GX1[Sub_cnt] = value4;
 8003a10:	7831      	ldrb	r1, [r6, #0]
 8003a12:	682a      	ldr	r2, [r5, #0]
 8003a14:	eb02 3241 	add.w	r2, r2, r1, lsl #13
 8003a18:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003a1c:	f8a2 3b5c 	strh.w	r3, [r2, #2908]	; 0xb5c
	BSbuffer[s_flag].GY1[Sub_cnt] = value5;
 8003a20:	7832      	ldrb	r2, [r6, #0]
 8003a22:	682b      	ldr	r3, [r5, #0]
 8003a24:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8003a28:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003a2c:	9a05      	ldr	r2, [sp, #20]
 8003a2e:	f8a3 2f1e 	strh.w	r2, [r3, #3870]	; 0xf1e
	BSbuffer[s_flag].GZ1[Sub_cnt] = value6;
 8003a32:	7832      	ldrb	r2, [r6, #0]
 8003a34:	682b      	ldr	r3, [r5, #0]
 8003a36:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8003a3a:	f503 6317 	add.w	r3, r3, #2416	; 0x970
 8003a3e:	9a06      	ldr	r2, [sp, #24]
 8003a40:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
 8003a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a46:	bf00      	nop
 8003a48:	200005ba 	.word	0x200005ba
 8003a4c:	200005b4 	.word	0x200005b4
 8003a50:	20000880 	.word	0x20000880

08003a54 <Knee_data_store>:
//	BSbuffer[s_flag].data8[Sub_cnt]=val8;
//
//
//}

void Knee_data_store(int val1, int val2, int val3, int val4) {
 8003a54:	b5f0      	push	{r4, r5, r6, r7, lr}
	BSbuffer[s_flag].data1[Sub_cnt] = val1;
 8003a56:	4e14      	ldr	r6, [pc, #80]	; (8003aa8 <Knee_data_store+0x54>)
 8003a58:	4d14      	ldr	r5, [pc, #80]	; (8003aac <Knee_data_store+0x58>)
 8003a5a:	f896 e000 	ldrb.w	lr, [r6]
 8003a5e:	682f      	ldr	r7, [r5, #0]
 8003a60:	4c13      	ldr	r4, [pc, #76]	; (8003ab0 <Knee_data_store+0x5c>)
 8003a62:	eb07 374e 	add.w	r7, r7, lr, lsl #13
 8003a66:	f507 6735 	add.w	r7, r7, #2896	; 0xb50
 8003a6a:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8003a6e:	8078      	strh	r0, [r7, #2]
	BSbuffer[s_flag].data2[Sub_cnt] = val2;
 8003a70:	7837      	ldrb	r7, [r6, #0]
 8003a72:	6828      	ldr	r0, [r5, #0]
 8003a74:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 8003a78:	f500 6053 	add.w	r0, r0, #3376	; 0xd30
 8003a7c:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 8003a80:	8081      	strh	r1, [r0, #4]
	BSbuffer[s_flag].data3[Sub_cnt] = val3;
 8003a82:	7830      	ldrb	r0, [r6, #0]
 8003a84:	6829      	ldr	r1, [r5, #0]
 8003a86:	eb01 3140 	add.w	r1, r1, r0, lsl #13
 8003a8a:	f501 6171 	add.w	r1, r1, #3856	; 0xf10
 8003a8e:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003a92:	80ca      	strh	r2, [r1, #6]
	BSbuffer[s_flag].data4[Sub_cnt] = val4;
 8003a94:	7831      	ldrb	r1, [r6, #0]
 8003a96:	682a      	ldr	r2, [r5, #0]
 8003a98:	eb02 3241 	add.w	r2, r2, r1, lsl #13
 8003a9c:	f502 5287 	add.w	r2, r2, #4320	; 0x10e0
 8003aa0:	3214      	adds	r2, #20
 8003aa2:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 8003aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aa8:	200005ba 	.word	0x200005ba
 8003aac:	200005b4 	.word	0x200005b4
 8003ab0:	20000880 	.word	0x20000880

08003ab4 <Knee_data_store1>:
//	BSbuffer[s_flag].data6[Sub_cnt]=val6;
//	BSbuffer[s_flag].data7[Sub_cnt]=val7;
//	BSbuffer[s_flag].data8[Sub_cnt]=val8;
}

void Knee_data_store1(int val5, int val6, int val7, int val8) {
 8003ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
//	BSbuffer[s_flag].data1[Sub_cnt]=val1;
//	BSbuffer[s_flag].data2[Sub_cnt]=val2;
//	BSbuffer[s_flag].data3[Sub_cnt]=val3;
//	BSbuffer[s_flag].data4[Sub_cnt]=val4;
	BSbuffer[s_flag].data5[Sub_cnt] = val5;
 8003ab6:	4e16      	ldr	r6, [pc, #88]	; (8003b10 <Knee_data_store1+0x5c>)
 8003ab8:	4d16      	ldr	r5, [pc, #88]	; (8003b14 <Knee_data_store1+0x60>)
 8003aba:	f896 e000 	ldrb.w	lr, [r6]
 8003abe:	682f      	ldr	r7, [r5, #0]
 8003ac0:	4c15      	ldr	r4, [pc, #84]	; (8003b18 <Knee_data_store1+0x64>)
 8003ac2:	eb07 374e 	add.w	r7, r7, lr, lsl #13
 8003ac6:	f507 5796 	add.w	r7, r7, #4800	; 0x12c0
 8003aca:	3714      	adds	r7, #20
 8003acc:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8003ad0:	8078      	strh	r0, [r7, #2]
	BSbuffer[s_flag].data6[Sub_cnt] = val6;
 8003ad2:	7837      	ldrb	r7, [r6, #0]
 8003ad4:	6828      	ldr	r0, [r5, #0]
 8003ad6:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 8003ada:	f500 50a5 	add.w	r0, r0, #5280	; 0x14a0
 8003ade:	3014      	adds	r0, #20
 8003ae0:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 8003ae4:	8081      	strh	r1, [r0, #4]
	BSbuffer[s_flag].data7[Sub_cnt] = val7;
 8003ae6:	7830      	ldrb	r0, [r6, #0]
 8003ae8:	6829      	ldr	r1, [r5, #0]
 8003aea:	eb01 3140 	add.w	r1, r1, r0, lsl #13
 8003aee:	f501 51b4 	add.w	r1, r1, #5760	; 0x1680
 8003af2:	3114      	adds	r1, #20
 8003af4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003af8:	80ca      	strh	r2, [r1, #6]
	BSbuffer[s_flag].data8[Sub_cnt] = val8;
 8003afa:	7831      	ldrb	r1, [r6, #0]
 8003afc:	682a      	ldr	r2, [r5, #0]
 8003afe:	eb02 3241 	add.w	r2, r2, r1, lsl #13
 8003b02:	f502 52c3 	add.w	r2, r2, #6240	; 0x1860
 8003b06:	3218      	adds	r2, #24
 8003b08:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 8003b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	200005ba 	.word	0x200005ba
 8003b14:	200005b4 	.word	0x200005b4
 8003b18:	20000880 	.word	0x20000880

08003b1c <MPU1_SPI1_init>:
		data = (float) mag_data_raw[i - 7];
		mag_data[i - 7] = data * Magnetometer_ASA[i - 7];
	}
}

void MPU1_SPI1_init(void) {
 8003b1c:	b530      	push	{r4, r5, lr}
 8003b1e:	b08b      	sub	sp, #44	; 0x2c
	float temp[3];
	uint8_t i = 0;
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = { { BIT_H_RESET,
 8003b20:	226b      	movs	r2, #107	; 0x6b
 8003b22:	f88d 2005 	strb.w	r2, [sp, #5]
 8003b26:	f88d 2007 	strb.w	r2, [sp, #7]
 8003b2a:	226c      	movs	r2, #108	; 0x6c
 8003b2c:	f88d 2009 	strb.w	r2, [sp, #9]
 8003b30:	4a33      	ldr	r2, [pc, #204]	; (8003c00 <MPU1_SPI1_init+0xe4>)
 8003b32:	7812      	ldrb	r2, [r2, #0]
 8003b34:	f88d 200a 	strb.w	r2, [sp, #10]
 8003b38:	221a      	movs	r2, #26
 8003b3a:	f88d 200b 	strb.w	r2, [sp, #11]
 8003b3e:	2210      	movs	r2, #16
 8003b40:	f88d 200c 	strb.w	r2, [sp, #12]
 8003b44:	f88d 200e 	strb.w	r2, [sp, #14]
 8003b48:	221c      	movs	r2, #28
 8003b4a:	f88d 200f 	strb.w	r2, [sp, #15]
 8003b4e:	4a2d      	ldr	r2, [pc, #180]	; (8003c04 <MPU1_SPI1_init+0xe8>)
 8003b50:	7812      	ldrb	r2, [r2, #0]
 8003b52:	f88d 2010 	strb.w	r2, [sp, #16]
 8003b56:	221d      	movs	r2, #29
 8003b58:	f88d 2011 	strb.w	r2, [sp, #17]
 8003b5c:	2212      	movs	r2, #18
 8003b5e:	f88d 2012 	strb.w	r2, [sp, #18]
 8003b62:	2237      	movs	r2, #55	; 0x37
 8003b64:	f88d 2013 	strb.w	r2, [sp, #19]
 8003b68:	2230      	movs	r2, #48	; 0x30
 8003b6a:	f88d 2014 	strb.w	r2, [sp, #20]
 8003b6e:	226a      	movs	r2, #106	; 0x6a
 8003b70:	f88d 2015 	strb.w	r2, [sp, #21]
 8003b74:	220d      	movs	r2, #13
 8003b76:	f88d 2016 	strb.w	r2, [sp, #22]
 8003b7a:	2224      	movs	r2, #36	; 0x24
 8003b7c:	f88d 2017 	strb.w	r2, [sp, #23]
 8003b80:	220c      	movs	r2, #12
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	f88d 2018 	strb.w	r2, [sp, #24]
 8003b88:	2225      	movs	r2, #37	; 0x25
 8003b8a:	f88d 3004 	strb.w	r3, [sp, #4]
 8003b8e:	211b      	movs	r1, #27
 8003b90:	2301      	movs	r3, #1
 8003b92:	f88d 2019 	strb.w	r2, [sp, #25]
 8003b96:	220b      	movs	r2, #11
 8003b98:	2026      	movs	r0, #38	; 0x26
 8003b9a:	f88d 3006 	strb.w	r3, [sp, #6]
 8003b9e:	f88d 100d 	strb.w	r1, [sp, #13]
 8003ba2:	f88d 201a 	strb.w	r2, [sp, #26]
 8003ba6:	f88d 301c 	strb.w	r3, [sp, #28]
 8003baa:	2163      	movs	r1, #99	; 0x63
 8003bac:	2281      	movs	r2, #129	; 0x81
 8003bae:	2327      	movs	r3, #39	; 0x27
 8003bb0:	250a      	movs	r5, #10
 8003bb2:	2400      	movs	r4, #0
 8003bb4:	f88d 001b 	strb.w	r0, [sp, #27]
 8003bb8:	f88d 5020 	strb.w	r5, [sp, #32]
 8003bbc:	f88d 4008 	strb.w	r4, [sp, #8]
 8003bc0:	f88d 101d 	strb.w	r1, [sp, #29]
 8003bc4:	f88d 201e 	strb.w	r2, [sp, #30]
 8003bc8:	f88d 301f 	strb.w	r3, [sp, #31]
 8003bcc:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8003bd0:	2016      	movs	r0, #22
 8003bd2:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8003bd6:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 8003bda:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8003bde:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
			{ 0x81, MPUREG_I2C_SLV0_CTRL }  //Enable I2C and set 1 byte

	};

	for (i = 0; i < MPU_InitRegNum; i++) {
		WriteReg1(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 8003be2:	ad01      	add	r5, sp, #4
 8003be4:	192b      	adds	r3, r5, r4
 8003be6:	5d29      	ldrb	r1, [r5, r4]
 8003be8:	7858      	ldrb	r0, [r3, #1]
 8003bea:	f7ff f989 	bl	8002f00 <WriteReg1>
 8003bee:	3402      	adds	r4, #2
		delay_us(1000); // I2C must slow down the write speed, otherwise it won't work
 8003bf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bf4:	f000 fb38 	bl	8004268 <delay_us>
	for (i = 0; i < MPU_InitRegNum; i++) {
 8003bf8:	2c22      	cmp	r4, #34	; 0x22
 8003bfa:	d1f3      	bne.n	8003be4 <MPU1_SPI1_init+0xc8>
	//   set_gyro_scale(BITS_FS_250DPS);

	//   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
	//   return 0;

}
 8003bfc:	b00b      	add	sp, #44	; 0x2c
 8003bfe:	bd30      	pop	{r4, r5, pc}
 8003c00:	2000000a 	.word	0x2000000a
 8003c04:	2000000b 	.word	0x2000000b

08003c08 <MPU2_SPI1_init>:

void MPU2_SPI1_init(void) {
 8003c08:	b530      	push	{r4, r5, lr}
 8003c0a:	b08b      	sub	sp, #44	; 0x2c
	float temp[3];
	uint8_t i = 0;
	uint8_t MPU_Init_Data[MPU_InitRegNum][2] = { { BIT_H_RESET,
 8003c0c:	226b      	movs	r2, #107	; 0x6b
 8003c0e:	f88d 2005 	strb.w	r2, [sp, #5]
 8003c12:	f88d 2007 	strb.w	r2, [sp, #7]
 8003c16:	226c      	movs	r2, #108	; 0x6c
 8003c18:	f88d 2009 	strb.w	r2, [sp, #9]
 8003c1c:	4a33      	ldr	r2, [pc, #204]	; (8003cec <MPU2_SPI1_init+0xe4>)
 8003c1e:	7812      	ldrb	r2, [r2, #0]
 8003c20:	f88d 200a 	strb.w	r2, [sp, #10]
 8003c24:	221a      	movs	r2, #26
 8003c26:	f88d 200b 	strb.w	r2, [sp, #11]
 8003c2a:	2210      	movs	r2, #16
 8003c2c:	f88d 200c 	strb.w	r2, [sp, #12]
 8003c30:	f88d 200e 	strb.w	r2, [sp, #14]
 8003c34:	221c      	movs	r2, #28
 8003c36:	f88d 200f 	strb.w	r2, [sp, #15]
 8003c3a:	4a2d      	ldr	r2, [pc, #180]	; (8003cf0 <MPU2_SPI1_init+0xe8>)
 8003c3c:	7812      	ldrb	r2, [r2, #0]
 8003c3e:	f88d 2010 	strb.w	r2, [sp, #16]
 8003c42:	221d      	movs	r2, #29
 8003c44:	f88d 2011 	strb.w	r2, [sp, #17]
 8003c48:	2212      	movs	r2, #18
 8003c4a:	f88d 2012 	strb.w	r2, [sp, #18]
 8003c4e:	2237      	movs	r2, #55	; 0x37
 8003c50:	f88d 2013 	strb.w	r2, [sp, #19]
 8003c54:	2230      	movs	r2, #48	; 0x30
 8003c56:	f88d 2014 	strb.w	r2, [sp, #20]
 8003c5a:	226a      	movs	r2, #106	; 0x6a
 8003c5c:	f88d 2015 	strb.w	r2, [sp, #21]
 8003c60:	220d      	movs	r2, #13
 8003c62:	f88d 2016 	strb.w	r2, [sp, #22]
 8003c66:	2224      	movs	r2, #36	; 0x24
 8003c68:	f88d 2017 	strb.w	r2, [sp, #23]
 8003c6c:	220c      	movs	r2, #12
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	f88d 2018 	strb.w	r2, [sp, #24]
 8003c74:	2225      	movs	r2, #37	; 0x25
 8003c76:	f88d 3004 	strb.w	r3, [sp, #4]
 8003c7a:	211b      	movs	r1, #27
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f88d 2019 	strb.w	r2, [sp, #25]
 8003c82:	220b      	movs	r2, #11
 8003c84:	2026      	movs	r0, #38	; 0x26
 8003c86:	f88d 3006 	strb.w	r3, [sp, #6]
 8003c8a:	f88d 100d 	strb.w	r1, [sp, #13]
 8003c8e:	f88d 201a 	strb.w	r2, [sp, #26]
 8003c92:	f88d 301c 	strb.w	r3, [sp, #28]
 8003c96:	2163      	movs	r1, #99	; 0x63
 8003c98:	2281      	movs	r2, #129	; 0x81
 8003c9a:	2327      	movs	r3, #39	; 0x27
 8003c9c:	250a      	movs	r5, #10
 8003c9e:	2400      	movs	r4, #0
 8003ca0:	f88d 001b 	strb.w	r0, [sp, #27]
 8003ca4:	f88d 5020 	strb.w	r5, [sp, #32]
 8003ca8:	f88d 4008 	strb.w	r4, [sp, #8]
 8003cac:	f88d 101d 	strb.w	r1, [sp, #29]
 8003cb0:	f88d 201e 	strb.w	r2, [sp, #30]
 8003cb4:	f88d 301f 	strb.w	r3, [sp, #31]
 8003cb8:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8003cbc:	2016      	movs	r0, #22
 8003cbe:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8003cc2:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
 8003cc6:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8003cca:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
			{ 0x81, MPUREG_I2C_SLV0_CTRL }  //Enable I2C and set 1 byte

	};

	for (i = 0; i < MPU_InitRegNum; i++) {
		WriteReg1_imu2(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
 8003cce:	ad01      	add	r5, sp, #4
 8003cd0:	192b      	adds	r3, r5, r4
 8003cd2:	5d29      	ldrb	r1, [r5, r4]
 8003cd4:	7858      	ldrb	r0, [r3, #1]
 8003cd6:	f7ff f935 	bl	8002f44 <WriteReg1_imu2>
 8003cda:	3402      	adds	r4, #2
		delay_us(1000); // I2C must slow down the write speed, otherwise it won't work
 8003cdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ce0:	f000 fac2 	bl	8004268 <delay_us>
	for (i = 0; i < MPU_InitRegNum; i++) {
 8003ce4:	2c22      	cmp	r4, #34	; 0x22
 8003ce6:	d1f3      	bne.n	8003cd0 <MPU2_SPI1_init+0xc8>
	//   set_gyro_scale(BITS_FS_250DPS);

	//   calib_mag();  // If experiencing problems here, just comment it out. Should still be somewhat functional.
	//   return 0;

}
 8003ce8:	b00b      	add	sp, #44	; 0x2c
 8003cea:	bd30      	pop	{r4, r5, pc}
 8003cec:	2000000a 	.word	0x2000000a
 8003cf0:	2000000b 	.word	0x2000000b

08003cf4 <P_IMU1_SPI1_Initialization_at_reset>:
{
 8003cf4:	b508      	push	{r3, lr}
	P_IMU1_SPI1_Init();         // Accelerometer Chip Initialization
 8003cf6:	f7ff fa7b 	bl	80031f0 <P_IMU1_SPI1_Init>
	delay_us(7000);         // Arbitrary delay after SPI initialization
 8003cfa:	f641 3058 	movw	r0, #7000	; 0x1b58
 8003cfe:	f000 fab3 	bl	8004268 <delay_us>
	MPU1_SPI1_init();
 8003d02:	f7ff ff0b 	bl	8003b1c <MPU1_SPI1_init>
}
 8003d06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MPU2_SPI1_init();
 8003d0a:	f7ff bf7d 	b.w	8003c08 <MPU2_SPI1_init>
	...

08003d10 <Mag_Enc2_Store>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8003d10:	4b1f      	ldr	r3, [pc, #124]	; (8003d90 <Mag_Enc2_Store+0x80>)
//
////	BSbuffer[s_flag].Enc1[Sub_cnt]=tempPosition;
	// Greg end comment out
}

void Mag_Enc2_Store(void) {
 8003d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d16:	2240      	movs	r2, #64	; 0x40
 8003d18:	2780      	movs	r7, #128	; 0x80
 8003d1a:	4e1e      	ldr	r6, [pc, #120]	; (8003d94 <Mag_Enc2_Store+0x84>)
 8003d1c:	629a      	str	r2, [r3, #40]	; 0x28
	uint8_t tempRead = 0;
	uint8_t Flags[6];
	LL_GPIO_ResetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	// Sensor feeds out position MSB first
	for (i = 11; i >= 0; i--) {
 8003d1e:	240b      	movs	r4, #11
	int tempPosition = 0;
 8003d20:	2500      	movs	r5, #0
 8003d22:	46b8      	mov	r8, r7
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8003d24:	200a      	movs	r0, #10
 8003d26:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 8003d2a:	f000 fa9d 	bl	8004268 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003d2e:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8003d30:	200a      	movs	r0, #10
 8003d32:	f000 fa99 	bl	8004268 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8003d36:	4b16      	ldr	r3, [pc, #88]	; (8003d90 <Mag_Enc2_Store+0x80>)
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f3c3 13c0 	ubfx	r3, r3, #7, #1

		tempRead = LL_GPIO_IsInputPinSet(ENC2_DATA_GPIO_PORT, ENC2_DATA_PIN)
				& 0x01;
		tempPosition |= (tempRead) << i;
 8003d3e:	40a3      	lsls	r3, r4
	for (i = 11; i >= 0; i--) {
 8003d40:	f114 34ff 	adds.w	r4, r4, #4294967295
		tempPosition |= (tempRead) << i;
 8003d44:	ea45 0503 	orr.w	r5, r5, r3
	for (i = 11; i >= 0; i--) {
 8003d48:	d2ec      	bcs.n	8003d24 <Mag_Enc2_Store+0x14>
  WRITE_REG(GPIOx->BRR, PinMask);
 8003d4a:	2780      	movs	r7, #128	; 0x80
 8003d4c:	4e11      	ldr	r6, [pc, #68]	; (8003d94 <Mag_Enc2_Store+0x84>)
 8003d4e:	2406      	movs	r4, #6
 8003d50:	46b8      	mov	r8, r7
	}

	for (i = 0; i < 6; i++) {
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8003d52:	200a      	movs	r0, #10
 8003d54:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 8003d58:	f000 fa86 	bl	8004268 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003d5c:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(10);
 8003d5e:	200a      	movs	r0, #10
 8003d60:	f000 fa82 	bl	8004268 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8003d64:	4b0a      	ldr	r3, [pc, #40]	; (8003d90 <Mag_Enc2_Store+0x80>)
	for (i = 0; i < 6; i++) {
 8003d66:	3c01      	subs	r4, #1
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	d1f2      	bne.n	8003d52 <Mag_Enc2_Store+0x42>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003d6c:	2240      	movs	r2, #64	; 0x40
 8003d6e:	619a      	str	r2, [r3, #24]
		Flags[i] |= (tempRead) << i;
	}

	LL_GPIO_SetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	BSbuffer[s_flag].Enc2[Sub_cnt] = tempPosition;
 8003d70:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <Mag_Enc2_Store+0x88>)
 8003d72:	781a      	ldrb	r2, [r3, #0]
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <Mag_Enc2_Store+0x8c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	eb03 3342 	add.w	r3, r3, r2, lsl #13
 8003d7c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003d80:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <Mag_Enc2_Store+0x90>)
 8003d82:	3318      	adds	r3, #24
 8003d84:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8003d88:	80dd      	strh	r5, [r3, #6]
 8003d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d8e:	bf00      	nop
 8003d90:	48000800 	.word	0x48000800
 8003d94:	48000400 	.word	0x48000400
 8003d98:	200005ba 	.word	0x200005ba
 8003d9c:	200005b4 	.word	0x200005b4
 8003da0:	20000880 	.word	0x20000880

08003da4 <Enc2_GetPosition>:
  WRITE_REG(GPIOx->BRR, PinMask);
 8003da4:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <Enc2_GetPosition+0x6c>)
 8003da6:	2240      	movs	r2, #64	; 0x40
}

int Enc2_GetPosition(void) {
 8003da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i = 0;
	uint8_t tempRead = 0;
	uint8_t Flags[6];

	LL_GPIO_ResetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);
	delay_us(1);
 8003dac:	2001      	movs	r0, #1
 8003dae:	629a      	str	r2, [r3, #40]	; 0x28
 8003db0:	f000 fa5a 	bl	8004268 <delay_us>
 8003db4:	2780      	movs	r7, #128	; 0x80
 8003db6:	4e17      	ldr	r6, [pc, #92]	; (8003e14 <Enc2_GetPosition+0x70>)
	// Sensor feeds out position MSB first
	for (i = DataPrecision - 1; i >= 0; i--) {
 8003db8:	240b      	movs	r4, #11
	int tempPosition = 0;
 8003dba:	2500      	movs	r5, #0
 8003dbc:	46b8      	mov	r8, r7
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(1);
 8003dbe:	2001      	movs	r0, #1
 8003dc0:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 8003dc4:	f000 fa50 	bl	8004268 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003dc8:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(1);
 8003dca:	2001      	movs	r0, #1
 8003dcc:	f000 fa4c 	bl	8004268 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <Enc2_GetPosition+0x6c>)
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	f3c3 13c0 	ubfx	r3, r3, #7, #1

		tempRead = LL_GPIO_IsInputPinSet(ENC2_DATA_GPIO_PORT, ENC2_DATA_PIN)
				& 0x01;
		tempPosition |= (tempRead) << i;
 8003dd8:	40a3      	lsls	r3, r4
	for (i = DataPrecision - 1; i >= 0; i--) {
 8003dda:	f114 34ff 	adds.w	r4, r4, #4294967295
		tempPosition |= (tempRead) << i;
 8003dde:	ea45 0503 	orr.w	r5, r5, r3
	for (i = DataPrecision - 1; i >= 0; i--) {
 8003de2:	d2ec      	bcs.n	8003dbe <Enc2_GetPosition+0x1a>
  WRITE_REG(GPIOx->BRR, PinMask);
 8003de4:	2780      	movs	r7, #128	; 0x80
 8003de6:	4e0b      	ldr	r6, [pc, #44]	; (8003e14 <Enc2_GetPosition+0x70>)
 8003de8:	2406      	movs	r4, #6
 8003dea:	46b8      	mov	r8, r7
	}

	for (i = 0; i < 6; i++) {
		LL_GPIO_ResetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(1);
 8003dec:	2001      	movs	r0, #1
 8003dee:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 8003df2:	f000 fa39 	bl	8004268 <delay_us>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003df6:	61b7      	str	r7, [r6, #24]

		LL_GPIO_SetOutputPin(ENC2_SCLK_GPIO_PORT, ENC2_SCLK_PIN);
		delay_us(1);
 8003df8:	2001      	movs	r0, #1
 8003dfa:	f000 fa35 	bl	8004268 <delay_us>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8003dfe:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <Enc2_GetPosition+0x6c>)
	for (i = 0; i < 6; i++) {
 8003e00:	3c01      	subs	r4, #1
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	d1f2      	bne.n	8003dec <Enc2_GetPosition+0x48>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003e06:	2240      	movs	r2, #64	; 0x40
 8003e08:	619a      	str	r2, [r3, #24]
	}

	LL_GPIO_SetOutputPin(ENC2_CS_GPIO_PORT, ENC2_CS_PIN);

	return tempPosition;
}
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e10:	48000800 	.word	0x48000800
 8003e14:	48000400 	.word	0x48000400

08003e18 <knee_angle>:

float knee_angle(void) {
 8003e18:	b508      	push	{r3, lr}
	float knee_position;
// Greg start comment
//knee_position= -(Enc2_GetPosition()*0.088)+125; //-(Enc2_GetPosition()*0.088-306); //-((Prosthesis_Data(:,36)*0.088)-306)

// Greg end comment
	knee_position = (Enc2_GetPosition() - 2249) * 0.088;
 8003e1a:	f7ff ffc3 	bl	8003da4 <Enc2_GetPosition>
 8003e1e:	f6a0 00c9 	subw	r0, r0, #2249	; 0x8c9
 8003e22:	f7fc fb7f 	bl	8000524 <__aeabi_i2d>
 8003e26:	a306      	add	r3, pc, #24	; (adr r3, 8003e40 <knee_angle+0x28>)
 8003e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2c:	f7fc fbe0 	bl	80005f0 <__aeabi_dmul>
 8003e30:	f7fc feb6 	bl	8000ba0 <__aeabi_d2f>
// Greg start

	return knee_position;
}
 8003e34:	ee00 0a10 	vmov	s0, r0
 8003e38:	bd08      	pop	{r3, pc}
 8003e3a:	bf00      	nop
 8003e3c:	f3af 8000 	nop.w
 8003e40:	020c49ba 	.word	0x020c49ba
 8003e44:	3fb6872b 	.word	0x3fb6872b

08003e48 <IMU_orientation>:

float IMU_orientation(struct imu_data imuMyData, float last_angle, float dt_s)
{
 8003e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e4c:	ed2d 8b04 	vpush	{d8-d9}
 8003e50:	b085      	sub	sp, #20
 8003e52:	ab04      	add	r3, sp, #16
 8003e54:	e903 0007 	stmdb	r3, {r0, r1, r2}
	accel.x = (float) imuMyData.AX / 4096;
	accel.y = (float) imuMyData.AY / 4096;
	accel.z = (float) imuMyData.AZ / 4096;
	gyro.x  = (float) imuMyData.GX / 32.8 * DEGREES_TO_RADIANS;
	gyro.y  = (float) imuMyData.GY / 32.8 * DEGREES_TO_RADIANS;
	gyro.z  = (float) imuMyData.GZ / 32.8 * DEGREES_TO_RADIANS;
 8003e58:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
	accel.x = (float) imuMyData.AX / 4096;
 8003e5c:	eddf 8a4e 	vldr	s17, [pc, #312]	; 8003f98 <IMU_orientation+0x150>
	gyro.z  = (float) imuMyData.GZ / 32.8 * DEGREES_TO_RADIANS;
 8003e60:	ee07 0a90 	vmov	s15, r0
 8003e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8003e68:	eeb0 8a60 	vmov.f32	s16, s1
	gyro.z  = (float) imuMyData.GZ / 32.8 * DEGREES_TO_RADIANS;
 8003e6c:	ee17 0a90 	vmov	r0, s15
{
 8003e70:	eef0 9a40 	vmov.f32	s19, s0
	gyro.z  = (float) imuMyData.GZ / 32.8 * DEGREES_TO_RADIANS;
 8003e74:	f7fc fb68 	bl	8000548 <__aeabi_f2d>
 8003e78:	a343      	add	r3, pc, #268	; (adr r3, 8003f88 <IMU_orientation+0x140>)
 8003e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7e:	f7fc fce1 	bl	8000844 <__aeabi_ddiv>
 8003e82:	a343      	add	r3, pc, #268	; (adr r3, 8003f90 <IMU_orientation+0x148>)
 8003e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e88:	f7fc fbb2 	bl	80005f0 <__aeabi_dmul>
 8003e8c:	f7fc fe88 	bl	8000ba0 <__aeabi_d2f>
	accel.x = (float) imuMyData.AX / 4096;
 8003e90:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8003e94:	ee07 3a90 	vmov	s15, r3
 8003e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	gyro.z  = (float) imuMyData.GZ / 32.8 * DEGREES_TO_RADIANS;
 8003e9c:	ee09 0a10 	vmov	s18, r0

	// Compute angle from accel
	accel_angle.z   = atan(accel.x / sqrt(pow(accel.y,2) + pow(accel.z,2)));
 8003ea0:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8003ea4:	ee17 0a90 	vmov	r0, s15
 8003ea8:	f7fc fb4e 	bl	8000548 <__aeabi_f2d>
	accel.y = (float) imuMyData.AY / 4096;
 8003eac:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8003eb0:	ee07 3a90 	vmov	s15, r3
 8003eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	accel_angle.z   = atan(accel.x / sqrt(pow(accel.y,2) + pow(accel.z,2)));
 8003eb8:	4604      	mov	r4, r0
 8003eba:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8003ebe:	460d      	mov	r5, r1
 8003ec0:	ee17 0a90 	vmov	r0, s15
 8003ec4:	f7fc fb40 	bl	8000548 <__aeabi_f2d>
	accel.z = (float) imuMyData.AZ / 4096;
 8003ec8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8003ecc:	ee07 3a90 	vmov	s15, r3
 8003ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	accel_angle.z   = atan(accel.x / sqrt(pow(accel.y,2) + pow(accel.z,2)));
 8003ed4:	4606      	mov	r6, r0
 8003ed6:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8003eda:	460f      	mov	r7, r1
 8003edc:	ee17 0a90 	vmov	r0, s15
 8003ee0:	f7fc fb32 	bl	8000548 <__aeabi_f2d>
 8003ee4:	4632      	mov	r2, r6
 8003ee6:	4680      	mov	r8, r0
 8003ee8:	4689      	mov	r9, r1
 8003eea:	463b      	mov	r3, r7
 8003eec:	4630      	mov	r0, r6
 8003eee:	4639      	mov	r1, r7
 8003ef0:	f7fc fb7e 	bl	80005f0 <__aeabi_dmul>
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	4606      	mov	r6, r0
 8003ef8:	460f      	mov	r7, r1
 8003efa:	464b      	mov	r3, r9
 8003efc:	4640      	mov	r0, r8
 8003efe:	4649      	mov	r1, r9
 8003f00:	f7fc fb76 	bl	80005f0 <__aeabi_dmul>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4630      	mov	r0, r6
 8003f0a:	4639      	mov	r1, r7
 8003f0c:	f7fc f9be 	bl	800028c <__adddf3>
 8003f10:	ec41 0b10 	vmov	d0, r0, r1
 8003f14:	f008 fd6c 	bl	800c9f0 <sqrt>
 8003f18:	4620      	mov	r0, r4
 8003f1a:	ec53 2b10 	vmov	r2, r3, d0
 8003f1e:	4629      	mov	r1, r5
 8003f20:	f7fc fc90 	bl	8000844 <__aeabi_ddiv>
 8003f24:	ec41 0b10 	vmov	d0, r0, r1
 8003f28:	f008 fbb2 	bl	800c690 <atan>
 8003f2c:	ec51 0b10 	vmov	r0, r1, d0
 8003f30:	f7fc fe36 	bl	8000ba0 <__aeabi_d2f>

	// Compute change in angle from gyro (trapezoidal used)
	if (count == 1)
 8003f34:	4a19      	ldr	r2, [pc, #100]	; (8003f9c <IMU_orientation+0x154>)
 8003f36:	7813      	ldrb	r3, [r2, #0]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <IMU_orientation+0x158>)
	{
		gyro_angle.z = 0;
 8003f3c:	bf0c      	ite	eq
 8003f3e:	ed9f 0a19 	vldreq	s0, [pc, #100]	; 8003fa4 <IMU_orientation+0x15c>
		count++;
	}
	else
	{
		gyro_angle.z = dt_s/2 * (gyro.z + last_gyro);
 8003f42:	ed93 0a00 	vldrne	s0, [r3]
	}

	// Save gyro for next iteration
	last_gyro = gyro.z;
 8003f46:	ed83 9a00 	vstr	s18, [r3]
		gyro_angle.z = dt_s/2 * (gyro.z + last_gyro);
 8003f4a:	bf1e      	ittt	ne
 8003f4c:	eef6 7a00 	vmovne.f32	s15, #96	; 0x3f000000  0.5
 8003f50:	ee39 0a00 	vaddne.f32	s0, s18, s0
 8003f54:	ee28 8a27 	vmulne.f32	s16, s16, s15

	// Compute angle using complementary filter
	float imu_angle = accel_angle.z*alpha + (1-alpha) * (gyro_angle.z + last_angle);
 8003f58:	eddf 7a13 	vldr	s15, [pc, #76]	; 8003fa8 <IMU_orientation+0x160>
		gyro_angle.z = dt_s/2 * (gyro.z + last_gyro);
 8003f5c:	bf18      	it	ne
 8003f5e:	ee20 0a08 	vmulne.f32	s0, s0, s16
	accel_angle.z   = atan(accel.x / sqrt(pow(accel.y,2) + pow(accel.z,2)));
 8003f62:	ee07 0a10 	vmov	s14, r0
	float imu_angle = accel_angle.z*alpha + (1-alpha) * (gyro_angle.z + last_angle);
 8003f66:	ee30 0a29 	vadd.f32	s0, s0, s19
		count++;
 8003f6a:	bf08      	it	eq
 8003f6c:	2102      	moveq	r1, #2
	float imu_angle = accel_angle.z*alpha + (1-alpha) * (gyro_angle.z + last_angle);
 8003f6e:	ee20 0a27 	vmul.f32	s0, s0, s15

	// Return angle
	return (imu_angle);
}
 8003f72:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8003fac <IMU_orientation+0x164>
		count++;
 8003f76:	bf08      	it	eq
 8003f78:	7011      	strbeq	r1, [r2, #0]
}
 8003f7a:	eea7 0a27 	vfma.f32	s0, s14, s15
 8003f7e:	b005      	add	sp, #20
 8003f80:	ecbd 8b04 	vpop	{d8-d9}
 8003f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f88:	66666666 	.word	0x66666666
 8003f8c:	40406666 	.word	0x40406666
 8003f90:	a0000000 	.word	0xa0000000
 8003f94:	3f91df45 	.word	0x3f91df45
 8003f98:	39800000 	.word	0x39800000
 8003f9c:	20000009 	.word	0x20000009
 8003fa0:	20000834 	.word	0x20000834
 8003fa4:	00000000 	.word	0x00000000
 8003fa8:	3f7f7cee 	.word	0x3f7f7cee
 8003fac:	3b03126f 	.word	0x3b03126f

08003fb0 <spi2_init>:
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003fb0:	4b3d      	ldr	r3, [pc, #244]	; (80040a8 <spi2_init+0xf8>)
 *      Author: brett
 */

#include "main.h"

void spi2_init() {
 8003fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
		LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 8003fb8:	4e3c      	ldr	r6, [pc, #240]	; (80040ac <spi2_init+0xfc>)
 8003fba:	f042 0204 	orr.w	r2, r2, #4
 8003fbe:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003fc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
void spi2_init() {
 8003fc2:	b094      	sub	sp, #80	; 0x50
 8003fc4:	f002 0204 	and.w	r2, r2, #4
 8003fc8:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8003fca:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003fcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fce:	f042 0202 	orr.w	r2, r2, #2
 8003fd2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003fd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fd6:	f002 0202 	and.w	r2, r2, #2
 8003fda:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8003fdc:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003fde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fe0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fe4:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fec:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003fee:	2400      	movs	r4, #0
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003ff0:	2502      	movs	r5, #2
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff2:	f04f 0803 	mov.w	r8, #3
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003ff6:	2705      	movs	r7, #5
  (void)tmpreg;
 8003ff8:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003ffa:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Pin = SPI2_SCK_IMU_PIN;
 8003ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 8004000:	a904      	add	r1, sp, #16
 8004002:	4630      	mov	r0, r6
		GPIO_InitStruct.Pin = SPI2_SCK_IMU_PIN;
 8004004:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004006:	9408      	str	r4, [sp, #32]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004008:	9505      	str	r5, [sp, #20]
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800400a:	f8cd 8018 	str.w	r8, [sp, #24]
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800400e:	9709      	str	r7, [sp, #36]	; 0x24
		LL_GPIO_Init(SPI2_SCK_IMU_GPIO_PORT, &GPIO_InitStruct);
 8004010:	f003 fec4 	bl	8007d9c <LL_GPIO_Init>

		GPIO_InitStruct.Pin = SPI2_MISO_IMU_PIN;
 8004014:	f44f 4380 	mov.w	r3, #16384	; 0x4000
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
		LL_GPIO_Init(SPI2_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 8004018:	a904      	add	r1, sp, #16
 800401a:	4630      	mov	r0, r6
		GPIO_InitStruct.Pin = SPI2_MISO_IMU_PIN;
 800401c:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800401e:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004020:	9408      	str	r4, [sp, #32]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004022:	9505      	str	r5, [sp, #20]
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004024:	f8cd 8018 	str.w	r8, [sp, #24]
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004028:	9709      	str	r7, [sp, #36]	; 0x24
		LL_GPIO_Init(SPI2_MISO_IMU_GPIO_PORT, &GPIO_InitStruct);
 800402a:	f003 feb7 	bl	8007d9c <LL_GPIO_Init>

		GPIO_InitStruct.Pin = SPI2_MOSI_IMU_PIN;
 800402e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
		LL_GPIO_Init(SPI2_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 8004032:	a904      	add	r1, sp, #16
 8004034:	4630      	mov	r0, r6
		GPIO_InitStruct.Pin = SPI2_MOSI_IMU_PIN;
 8004036:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004038:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800403a:	9408      	str	r4, [sp, #32]
		GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800403c:	9505      	str	r5, [sp, #20]
		GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800403e:	f8cd 8018 	str.w	r8, [sp, #24]
		GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004042:	9709      	str	r7, [sp, #36]	; 0x24
		LL_GPIO_Init(SPI2_MOSI_IMU_GPIO_PORT, &GPIO_InitStruct);
 8004044:	f003 feaa 	bl	8007d9c <LL_GPIO_Init>

		SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
		SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004048:	f44f 7382 	mov.w	r3, #260	; 0x104
 800404c:	930b      	str	r3, [sp, #44]	; 0x2c
		SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800404e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004052:	930c      	str	r3, [sp, #48]	; 0x30
		/*Mode 3 (Mode 1,1) */
		SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH; /*Clock 1 when idle and 0 when active */
		SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE; //Second clock transition is the first data capture edge
 8004054:	2301      	movs	r3, #1
		SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004056:	940a      	str	r4, [sp, #40]	; 0x28
		SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE; //Second clock transition is the first data capture edge
 8004058:	930e      	str	r3, [sp, #56]	; 0x38
		SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;

		SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
		SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800405a:	9411      	str	r4, [sp, #68]	; 0x44
		SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800405c:	9412      	str	r4, [sp, #72]	; 0x48
		SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800405e:	f44f 7300 	mov.w	r3, #512	; 0x200
		SPI_InitStruct.CRCPoly = 7; //?
		LL_SPI_Init(SPI2, &SPI_InitStruct);
 8004062:	4c13      	ldr	r4, [pc, #76]	; (80040b0 <spi2_init+0x100>)
		SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004064:	930f      	str	r3, [sp, #60]	; 0x3c
		SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8004066:	2308      	movs	r3, #8
 8004068:	9310      	str	r3, [sp, #64]	; 0x40
		LL_SPI_Init(SPI2, &SPI_InitStruct);
 800406a:	a90a      	add	r1, sp, #40	; 0x28
		SPI_InitStruct.CRCPoly = 7; //?
 800406c:	2307      	movs	r3, #7
		LL_SPI_Init(SPI2, &SPI_InitStruct);
 800406e:	4620      	mov	r0, r4
		SPI_InitStruct.CRCPoly = 7; //?
 8004070:	9313      	str	r3, [sp, #76]	; 0x4c
		SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH; /*Clock 1 when idle and 0 when active */
 8004072:	950d      	str	r5, [sp, #52]	; 0x34
		LL_SPI_Init(SPI2, &SPI_InitStruct);
 8004074:	f004 f960 	bl	8008338 <LL_SPI_Init>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8004078:	6863      	ldr	r3, [r4, #4]
 800407a:	f023 0308 	bic.w	r3, r3, #8
 800407e:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8004080:	6863      	ldr	r3, [r4, #4]
 8004082:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004086:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8004088:	6863      	ldr	r3, [r4, #4]
 800408a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800408e:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004096:	6023      	str	r3, [r4, #0]

		LL_SPI_SetRxFIFOThreshold(SPI2, LL_SPI_RX_FIFO_TH_QUARTER);
		LL_SPI_DisableIT_RXNE(SPI2);
		LL_SPI_Enable(SPI2);

		delay_us(10000);
 8004098:	f242 7010 	movw	r0, #10000	; 0x2710
 800409c:	f000 f8e4 	bl	8004268 <delay_us>
}
 80040a0:	b014      	add	sp, #80	; 0x50
 80040a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000
 80040ac:	48000400 	.word	0x48000400
 80040b0:	40003800 	.word	0x40003800

080040b4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b4:	4b21      	ldr	r3, [pc, #132]	; (800413c <HAL_MspInit+0x88>)
{
 80040b6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	661a      	str	r2, [r3, #96]	; 0x60
 80040c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040c2:	f002 0201 	and.w	r2, r2, #1
 80040c6:	9200      	str	r2, [sp, #0]
 80040c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80040d0:	659a      	str	r2, [r3, #88]	; 0x58
 80040d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d8:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040da:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80040dc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040de:	f001 f90f 	bl	8005300 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80040e2:	2200      	movs	r2, #0
 80040e4:	4611      	mov	r1, r2
 80040e6:	f06f 000b 	mvn.w	r0, #11
 80040ea:	f001 f91b 	bl	8005324 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80040ee:	2200      	movs	r2, #0
 80040f0:	4611      	mov	r1, r2
 80040f2:	f06f 000a 	mvn.w	r0, #10
 80040f6:	f001 f915 	bl	8005324 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80040fa:	2200      	movs	r2, #0
 80040fc:	4611      	mov	r1, r2
 80040fe:	f06f 0009 	mvn.w	r0, #9
 8004102:	f001 f90f 	bl	8005324 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004106:	2200      	movs	r2, #0
 8004108:	4611      	mov	r1, r2
 800410a:	f06f 0004 	mvn.w	r0, #4
 800410e:	f001 f909 	bl	8005324 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004112:	2200      	movs	r2, #0
 8004114:	4611      	mov	r1, r2
 8004116:	f06f 0003 	mvn.w	r0, #3
 800411a:	f001 f903 	bl	8005324 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800411e:	2200      	movs	r2, #0
 8004120:	4611      	mov	r1, r2
 8004122:	f06f 0001 	mvn.w	r0, #1
 8004126:	f001 f8fd 	bl	8005324 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800412a:	2200      	movs	r2, #0
 800412c:	4611      	mov	r1, r2
 800412e:	f04f 30ff 	mov.w	r0, #4294967295
 8004132:	f001 f8f7 	bl	8005324 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004136:	b003      	add	sp, #12
 8004138:	f85d fb04 	ldr.w	pc, [sp], #4
 800413c:	40021000 	.word	0x40021000

08004140 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004140:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 8004142:	6802      	ldr	r2, [r0, #0]
 8004144:	4b15      	ldr	r3, [pc, #84]	; (800419c <HAL_SD_MspInit+0x5c>)
 8004146:	429a      	cmp	r2, r3
{
 8004148:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 800414a:	d124      	bne.n	8004196 <HAL_SD_MspInit+0x56>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800414c:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004150:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004152:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004154:	4812      	ldr	r0, [pc, #72]	; (80041a0 <HAL_SD_MspInit+0x60>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004156:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800415a:	661a      	str	r2, [r3, #96]	; 0x60
 800415c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415e:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004168:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800416a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800416e:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004170:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004172:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8004174:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004176:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004178:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800417a:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800417c:	f001 fa8a 	bl	8005694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004180:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004182:	eb0d 0103 	add.w	r1, sp, r3
 8004186:	4807      	ldr	r0, [pc, #28]	; (80041a4 <HAL_SD_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004188:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418a:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418c:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800418e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004190:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004192:	f001 fa7f 	bl	8005694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8004196:	b007      	add	sp, #28
 8004198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800419a:	bf00      	nop
 800419c:	40012800 	.word	0x40012800
 80041a0:	48000800 	.word	0x48000800
 80041a4:	48000c00 	.word	0x48000c00

080041a8 <NMI_Handler>:
 80041a8:	4770      	bx	lr

080041aa <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80041aa:	e7fe      	b.n	80041aa <HardFault_Handler>

080041ac <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80041ac:	e7fe      	b.n	80041ac <MemManage_Handler>

080041ae <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80041ae:	e7fe      	b.n	80041ae <BusFault_Handler>

080041b0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80041b0:	e7fe      	b.n	80041b0 <UsageFault_Handler>

080041b2 <SVC_Handler>:
 80041b2:	4770      	bx	lr

080041b4 <DebugMon_Handler>:
 80041b4:	4770      	bx	lr

080041b6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80041b6:	4770      	bx	lr

080041b8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80041b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041ba:	f001 f877 	bl	80052ac <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80041c2:	f001 b906 	b.w	80053d2 <HAL_SYSTICK_IRQHandler>
	...

080041c8 <OTG_FS_IRQHandler>:
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  // ES HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
	HAL_PCD_IRQHandler(&hpcd);
 80041c8:	4801      	ldr	r0, [pc, #4]	; (80041d0 <OTG_FS_IRQHandler+0x8>)
 80041ca:	f001 bc03 	b.w	80059d4 <HAL_PCD_IRQHandler>
 80041ce:	bf00      	nop
 80041d0:	2000923c 	.word	0x2000923c

080041d4 <DMA2_Channel4_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Channel4_IRQHandler(void)
{
  if((uSdHandle.SdOperation == SD_READ_MULTIPLE_BLOCK) || (uSdHandle.SdOperation == SD_READ_SINGLE_BLOCK))
 80041d4:	4b04      	ldr	r3, [pc, #16]	; (80041e8 <DMA2_Channel4_IRQHandler+0x14>)
 80041d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041d8:	2a01      	cmp	r2, #1
 80041da:	d001      	beq.n	80041e0 <DMA2_Channel4_IRQHandler+0xc>
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	b90b      	cbnz	r3, 80041e4 <DMA2_Channel4_IRQHandler+0x10>
  {
    BSP_SD_DMA_Rx_IRQHandler();
 80041e0:	f7fc bf90 	b.w	8001104 <BSP_SD_DMA_Rx_IRQHandler>
  }
  else
  {
    BSP_SD_DMA_Tx_IRQHandler();
 80041e4:	f7fc bf88 	b.w	80010f8 <BSP_SD_DMA_Tx_IRQHandler>
 80041e8:	200088c4 	.word	0x200088c4

080041ec <SDMMC1_IRQHandler>:
  * @param  None
  * @retval None
  */
void SDMMC1_IRQHandler(void)
{
  BSP_SD_IRQHandler();
 80041ec:	f7fc bf7e 	b.w	80010ec <BSP_SD_IRQHandler>

080041f0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041f0:	490f      	ldr	r1, [pc, #60]	; (8004230 <SystemInit+0x40>)
 80041f2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80041f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80041fe:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <SystemInit+0x44>)
 8004200:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004202:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800420a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8004212:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8004216:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8004218:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800421c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004224:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004226:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004228:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800422c:	608b      	str	r3, [r1, #8]
 800422e:	4770      	bx	lr
 8004230:	e000ed00 	.word	0xe000ed00
 8004234:	40021000 	.word	0x40021000

08004238 <LL_APB1_GRP1_EnableClock>:
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004238:	4b05      	ldr	r3, [pc, #20]	; (8004250 <LL_APB1_GRP1_EnableClock+0x18>)
 800423a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800423c:	4302      	orrs	r2, r0
 800423e:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 8004242:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004244:	4018      	ands	r0, r3
 8004246:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8004248:	9b01      	ldr	r3, [sp, #4]
}
 800424a:	b002      	add	sp, #8
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40021000 	.word	0x40021000

08004254 <LL_RCC_SetUSBClockSource.constprop.3>:
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, USBxSource);
 8004254:	4a03      	ldr	r2, [pc, #12]	; (8004264 <LL_RCC_SetUSBClockSource.constprop.3+0x10>)
 8004256:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800425a:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 800425e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004262:	4770      	bx	lr
 8004264:	40021000 	.word	0x40021000

08004268 <delay_us>:
extern uint8_t USB_Mode;
extern uint8_t Enter_Into_DFU,MSC_continue,VCP_continue;

void delay_us(uint32_t us){
    uint32_t i,k;
    for(k=0;k<us;k++)
 8004268:	2300      	movs	r3, #0
 800426a:	4283      	cmp	r3, r0
 800426c:	d100      	bne.n	8004270 <delay_us+0x8>
    {
    	for(i=0;i<11;i++)
         __NOP();  // Timed at 48 MHz clock
    }
}
 800426e:	4770      	bx	lr
 8004270:	220b      	movs	r2, #11
  __ASM volatile ("nop");
 8004272:	bf00      	nop
    	for(i=0;i<11;i++)
 8004274:	3a01      	subs	r2, #1
 8004276:	d1fc      	bne.n	8004272 <delay_us+0xa>
    for(k=0;k<us;k++)
 8004278:	3301      	adds	r3, #1
 800427a:	e7f6      	b.n	800426a <delay_us+0x2>

0800427c <Start_LPTIMCounter2>:
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 800427c:	4a08      	ldr	r2, [pc, #32]	; (80042a0 <Start_LPTIMCounter2+0x24>)
 800427e:	6913      	ldr	r3, [r2, #16]
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	6113      	str	r3, [r2, #16]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 8004286:	6993      	ldr	r3, [r2, #24]
 8004288:	0c1b      	lsrs	r3, r3, #16
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	4318      	orrs	r0, r3
 800428e:	6190      	str	r0, [r2, #24]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8004290:	6913      	ldr	r3, [r2, #16]
 8004292:	f023 0306 	bic.w	r3, r3, #6
 8004296:	f043 0304 	orr.w	r3, r3, #4
 800429a:	6113      	str	r3, [r2, #16]
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40009400 	.word	0x40009400

080042a4 <LSE_ON>:
	/* Following 2lines are necessary before LSE
	RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN; // PWR clock is necessary for LSE
	PWR->CR1 |= PWR_CR1_DBP;  // Enable Backup access
	*/

	RCC->BDCR |= RCC_BDCR_LSEON;  // LSE ON
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <LSE_ON+0x18>)
 80042a6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	while(((RCC->BDCR) & RCC_BDCR_LSERDY) != (RCC_BDCR_LSERDY)); // wait for LSE to get ready
 80042b2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80042b6:	0792      	lsls	r2, r2, #30
 80042b8:	d5fb      	bpl.n	80042b2 <LSE_ON+0xe>

}
 80042ba:	4770      	bx	lr
 80042bc:	40021000 	.word	0x40021000

080042c0 <EnterStop>:
	{
	}
}

void EnterStop(void) // Enter Stop Mode
{
 80042c0:	b508      	push	{r3, lr}
	HAL_SuspendTick();  // Before entering STOP mode, SYS_tick needs to disable
 80042c2:	f001 f80d 	bl	80052e0 <HAL_SuspendTick>
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 80042c6:	4a07      	ldr	r2, [pc, #28]	; (80042e4 <EnterStop+0x24>)
 80042c8:	6813      	ldr	r3, [r2, #0]
 80042ca:	f023 0307 	bic.w	r3, r3, #7
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	6013      	str	r3, [r2, #0]
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80042d4:	4a04      	ldr	r2, [pc, #16]	; (80042e8 <EnterStop+0x28>)
 80042d6:	6913      	ldr	r3, [r2, #16]
 80042d8:	f043 0304 	orr.w	r3, r3, #4
 80042dc:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 80042de:	bf30      	wfi
 80042e0:	bd08      	pop	{r3, pc}
 80042e2:	bf00      	nop
 80042e4:	40007000 	.word	0x40007000
 80042e8:	e000ed00 	.word	0xe000ed00

080042ec <SystemClock_Config_MSI_80MHz>:
*            PLL_R                          = 4
*            Flash Latency(WS)              = 4
*/

void SystemClock_Config_MSI_80MHz(void)
{
 80042ec:	b510      	push	{r4, lr}
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 80042ee:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
{
 80042f2:	b092      	sub	sp, #72	; 0x48
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   	// Enable Power Clock necessary for LSE, RTC, LPTIM
 80042f4:	f7ff ffa0 	bl	8004238 <LL_APB1_GRP1_EnableClock>
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042f8:	4b31      	ldr	r3, [pc, #196]	; (80043c0 <SystemClock_Config_MSI_80MHz+0xd4>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004300:	601a      	str	r2, [r3, #0]
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004308:	605a      	str	r2, [r3, #4]
  return (READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV));
 800430a:	685a      	ldr	r2, [r3, #4]
	  LL_PWR_EnableBkUpAccess();                              // Enable Backup access (needed for LSE clock)
	  LL_PWR_EnableVddUSB();                                  // Enable VDDUSB supply for USB
	  while(!LL_PWR_IsEnabledVddUSB());                       // Wait for VDDUSB supply to activate
 800430c:	0552      	lsls	r2, r2, #21
 800430e:	d5fc      	bpl.n	800430a <SystemClock_Config_MSI_80MHz+0x1e>

	  /* Enable MSI Oscillator and activate PLL with MSI as source */
	  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8004310:	2310      	movs	r3, #16
 8004312:	9301      	str	r3, [sp, #4]
	  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8004314:	2301      	movs	r3, #1
 8004316:	9307      	str	r3, [sp, #28]
	//  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
	  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 8004318:	930c      	str	r3, [sp, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLM            = 6;
 800431a:	2306      	movs	r3, #6
 800431c:	930d      	str	r3, [sp, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLN            = 40;
 800431e:	2328      	movs	r3, #40	; 0x28
 8004320:	930e      	str	r3, [sp, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 8004322:	2307      	movs	r3, #7
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
	  RCC_OscInitStruct.PLL.PLLR            = 4;

	  HAL_RCC_OscConfig(&RCC_OscInitStruct);

	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8004324:	4c27      	ldr	r4, [pc, #156]	; (80043c4 <SystemClock_Config_MSI_80MHz+0xd8>)
	  RCC_OscInitStruct.PLL.PLLP            = 7;
 8004326:	930f      	str	r3, [sp, #60]	; 0x3c
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8004328:	22b0      	movs	r2, #176	; 0xb0
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 800432a:	2304      	movs	r3, #4
	  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 800432c:	9209      	str	r2, [sp, #36]	; 0x24
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800432e:	eb0d 0003 	add.w	r0, sp, r3
	  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8004332:	2202      	movs	r2, #2
 8004334:	920b      	str	r2, [sp, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8004336:	9310      	str	r3, [sp, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLR            = 4;
 8004338:	9311      	str	r3, [sp, #68]	; 0x44
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800433a:	f002 f89f 	bl	800647c <HAL_RCC_OscConfig>
	  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 800433e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004342:	f023 0320 	bic.w	r3, r3, #32
 8004346:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	  CLEAR_BIT(RCC->CIER, (RCC_IT_LSECSS));
 800434a:	69a3      	ldr	r3, [r4, #24]
 800434c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004350:	61a3      	str	r3, [r4, #24]

	  LSE_ON();                                                     //Start LSE for RTC and LPTIM timer
 8004352:	f7ff ffa7 	bl	80042a4 <LSE_ON>
	  HAL_RCCEx_EnableMSIPLLMode();
 8004356:	f002 fb05 	bl	8006964 <HAL_RCCEx_EnableMSIPLLMode>


	  LL_RCC_SetSDMMCClockSource(LL_RCC_SDMMC1_CLKSOURCE_MSI);
 800435a:	f7ff ff7b 	bl	8004254 <LL_RCC_SetUSBClockSource.constprop.3>
	  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_MSI);
 800435e:	f7ff ff79 	bl	8004254 <LL_RCC_SetUSBClockSource.constprop.3>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004362:	68a3      	ldr	r3, [r4, #8]
 8004364:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004368:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800436a:	68a3      	ldr	r3, [r4, #8]
 800436c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004370:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004374:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004376:	68a3      	ldr	r3, [r4, #8]
 8004378:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800437c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004380:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004382:	68a3      	ldr	r3, [r4, #8]
 8004384:	f023 0303 	bic.w	r3, r3, #3
 8004388:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_FLASH_LATENCY_4
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800438a:	4b0f      	ldr	r3, [pc, #60]	; (80043c8 <SystemClock_Config_MSI_80MHz+0xdc>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	f022 0207 	bic.w	r2, r2, #7
 8004392:	f042 0204 	orr.w	r2, r2, #4
 8004396:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_FLASH_LATENCY_3
  *         @arg @ref LL_FLASH_LATENCY_4
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	f002 0207 	and.w	r2, r2, #7
	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2); //1
	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);

	  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
	  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4);
 800439e:	2a04      	cmp	r2, #4
 80043a0:	d1fa      	bne.n	8004398 <SystemClock_Config_MSI_80MHz+0xac>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80043a2:	68a3      	ldr	r3, [r4, #8]
 80043a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043a8:	60a3      	str	r3, [r4, #8]

	  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_MSI);  // MSI clock is set as default clock after wake up from Stop
	  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();               // Disable USB clock to save power
 80043aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80043ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043b0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80043b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80043b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	9b00      	ldr	r3, [sp, #0]

		}
 80043bc:	b012      	add	sp, #72	; 0x48
 80043be:	bd10      	pop	{r4, pc}
 80043c0:	40007000 	.word	0x40007000
 80043c4:	40021000 	.word	0x40021000
 80043c8:	40022000 	.word	0x40022000

080043cc <Configure_LPTIM2_Int>:
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80043cc:	4b0f      	ldr	r3, [pc, #60]	; (800440c <Configure_LPTIM2_Int+0x40>)
 80043ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80043d2:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 80043d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SET_BIT(RCC->APB1ENR2, Periphs);
 80043da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043dc:	f042 0220 	orr.w	r2, r2, #32
 80043e0:	65da      	str	r2, [r3, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80043e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c

		}

//Configure LPTIM2 to generate the XX Hz interrupt
void Configure_LPTIM2_Int(void)
{
 80043e4:	b082      	sub	sp, #8
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80043ec:	9b01      	ldr	r3, [sp, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80043ee:	4b08      	ldr	r3, [pc, #32]	; (8004410 <Configure_LPTIM2_Int+0x44>)
 80043f0:	2204      	movs	r2, #4
 80043f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  CLEAR_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 80043f6:	4b07      	ldr	r3, [pc, #28]	; (8004414 <Configure_LPTIM2_Int+0x48>)
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	f022 0202 	bic.w	r2, r2, #2
 80043fe:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	f022 0201 	bic.w	r2, r2, #1
 8004406:	611a      	str	r2, [r3, #16]
	LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);     // Enable LPTIM2 Clock
	NVIC_DisableIRQ(LPTIM2_IRQn);
	LL_LPTIM_DisableIT_ARRM(LPTIM2);                           // Enable auto reload match interrupt (ARRMIE).
	LL_LPTIM_Disable(LPTIM2);                                // LPTIM2 disable if needed

}
 8004408:	b002      	add	sp, #8
 800440a:	4770      	bx	lr
 800440c:	40021000 	.word	0x40021000
 8004410:	e000e100 	.word	0xe000e100
 8004414:	40009400 	.word	0x40009400

08004418 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8004418:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800441a:	4c1d      	ldr	r4, [pc, #116]	; (8004490 <HAL_PCD_MspInit+0x78>)
 800441c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004424:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 8004426:	b088      	sub	sp, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	9301      	str	r3, [sp, #4]
 800442e:	9b01      	ldr	r3, [sp, #4]
  
  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8004430:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004434:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004436:	2302      	movs	r3, #2
 8004438:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443a:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800443c:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800443e:	260a      	movs	r6, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004440:	a903      	add	r1, sp, #12
 8004442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004446:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004448:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800444a:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800444c:	f001 f922 	bl	8005694 <HAL_GPIO_Init>
  
  /* Configure VBUS Pin */

  
  /* Configure ID pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004454:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004456:	2312      	movs	r3, #18
 8004458:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800445a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800445c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800445e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004462:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004464:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004466:	f001 f915 	bl	8005694 <HAL_GPIO_Init>
  
  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800446a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800446c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004470:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004472:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004478:	9302      	str	r3, [sp, #8]
  
  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 800447a:	462a      	mov	r2, r5
 800447c:	2107      	movs	r1, #7
 800447e:	2043      	movs	r0, #67	; 0x43
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004480:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 8004482:	f000 ff4f 	bl	8005324 <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004486:	2043      	movs	r0, #67	; 0x43
 8004488:	f000 ff80 	bl	800538c <HAL_NVIC_EnableIRQ>
    
}
 800448c:	b008      	add	sp, #32
 800448e:	bd70      	pop	{r4, r5, r6, pc}
 8004490:	40021000 	.word	0x40021000

08004494 <HAL_PCD_MspDeInit>:
  * @retval None
  */
void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd)
{  
  /* Disable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 8004494:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <HAL_PCD_MspDeInit+0x14>)
 8004496:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004498:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800449c:	64da      	str	r2, [r3, #76]	; 0x4c
  __HAL_RCC_SYSCFG_CLK_DISABLE(); 
 800449e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044a0:	f022 0201 	bic.w	r2, r2, #1
 80044a4:	661a      	str	r2, [r3, #96]	; 0x60
 80044a6:	4770      	bx	lr
 80044a8:	40021000 	.word	0x40021000

080044ac <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80044ac:	f500 7162 	add.w	r1, r0, #904	; 0x388
 80044b0:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80044b4:	f004 bfff 	b.w	80094b6 <USBD_LL_SetupStage>

080044b8 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80044b8:	231c      	movs	r3, #28
 80044ba:	fb03 0301 	mla	r3, r3, r1, r0
 80044be:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80044c2:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 80044c6:	f005 b823 	b.w	8009510 <USBD_LL_DataOutStage>

080044ca <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80044ca:	231c      	movs	r3, #28
 80044cc:	fb03 0301 	mla	r3, r3, r1, r0
 80044d0:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80044d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044d6:	f005 b84d 	b.w	8009574 <USBD_LL_DataInStage>

080044da <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 80044da:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80044de:	f005 b8c9 	b.w	8009674 <USBD_LL_SOF>

080044e2 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 80044e2:	b510      	push	{r4, lr}
 80044e4:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 80044e6:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 80044ea:	f005 f892 	bl	8009612 <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 80044ee:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 80044f2:	2101      	movs	r1, #1
}
 80044f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 80044f8:	f005 b8aa 	b.w	8009650 <USBD_LL_SetSpeed>

080044fc <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
  USBD_LL_Suspend(hpcd->pData);
 80044fc:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8004500:	f005 b8a9 	b.w	8009656 <USBD_LL_Suspend>

08004504 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 8004504:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8004508:	f005 b8ae 	b.w	8009668 <USBD_LL_Resume>

0800450c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 800450c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8004510:	f005 b8be 	b.w	8009690 <USBD_LL_IsoOUTIncomplete>

08004514 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8004514:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8004518:	f005 b8b8 	b.w	800968c <USBD_LL_IsoINIncomplete>

0800451c <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 800451c:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8004520:	f005 b8b8 	b.w	8009694 <USBD_LL_DevConnected>

08004524 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 8004524:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8004528:	f005 b8b6 	b.w	8009698 <USBD_LL_DevDisconnected>

0800452c <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 800452e:	4c15      	ldr	r4, [pc, #84]	; (8004584 <USBD_LL_Init+0x58>)
  hpcd.Init.dev_endpoints = 5;
  hpcd.Init.use_dedicated_ep1 = 0;
 8004530:	2500      	movs	r5, #0
  hpcd.Init.dev_endpoints = 5;
 8004532:	2305      	movs	r3, #5
 8004534:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hpcd.Init.ep0_mps = 0x40;
  hpcd.Init.dma_enable = 0;
  hpcd.Init.low_power_enable = 0;
  hpcd.Init.lpm_enable = 0;
  hpcd.Init.battery_charging_enable = 0;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004538:	2601      	movs	r6, #1
  hpcd.Init.Sof_enable = 0;
  hpcd.Init.speed = PCD_SPEED_FULL;
  hpcd.Init.vbus_sensing_enable = 0;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 800453a:	f8c4 03c8 	str.w	r0, [r4, #968]	; 0x3c8
  hpcd.Init.ep0_mps = 0x40;
 800453e:	2740      	movs	r7, #64	; 0x40
  pdev->pData = &hpcd;
 8004540:	f8c0 4220 	str.w	r4, [r0, #544]	; 0x220
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 8004544:	4620      	mov	r0, r4
  hpcd.Init.dev_endpoints = 5;
 8004546:	e884 000c 	stmia.w	r4, {r2, r3}
  hpcd.Init.use_dedicated_ep1 = 0;
 800454a:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;
 800454c:	6167      	str	r7, [r4, #20]
  hpcd.Init.dma_enable = 0;
 800454e:	6125      	str	r5, [r4, #16]
  hpcd.Init.low_power_enable = 0;
 8004550:	6225      	str	r5, [r4, #32]
  hpcd.Init.lpm_enable = 0;
 8004552:	6265      	str	r5, [r4, #36]	; 0x24
  hpcd.Init.battery_charging_enable = 0;
 8004554:	62a5      	str	r5, [r4, #40]	; 0x28
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004556:	61a6      	str	r6, [r4, #24]
  hpcd.Init.Sof_enable = 0;
 8004558:	61e5      	str	r5, [r4, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800455a:	60e6      	str	r6, [r4, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 800455c:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_PCD_Init(&hpcd);
 800455e:	f001 f975 	bl	800584c <HAL_PCD_Init>
  
  /* Configure EPs FIFOs */
  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 8004562:	2180      	movs	r1, #128	; 0x80
 8004564:	4620      	mov	r0, r4
 8004566:	f001 fe86 	bl	8006276 <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 800456a:	463a      	mov	r2, r7
 800456c:	4629      	mov	r1, r5
 800456e:	4620      	mov	r0, r4
 8004570:	f001 fe60 	bl	8006234 <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x80);
 8004574:	2280      	movs	r2, #128	; 0x80
 8004576:	4631      	mov	r1, r6
 8004578:	4620      	mov	r0, r4
 800457a:	f001 fe5b 	bl	8006234 <HAL_PCDEx_SetTxFiFo>

  return USBD_OK;
}
 800457e:	4628      	mov	r0, r5
 8004580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004582:	bf00      	nop
 8004584:	2000923c 	.word	0x2000923c

08004588 <USBD_LL_DeInit>:
  * @brief  De-Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 8004588:	b508      	push	{r3, lr}
  HAL_PCD_DeInit(pdev->pData);
 800458a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800458e:	f001 fa0f 	bl	80059b0 <HAL_PCD_DeInit>
  return USBD_OK;
}
 8004592:	2000      	movs	r0, #0
 8004594:	bd08      	pop	{r3, pc}

08004596 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004596:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8004598:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800459c:	f001 f9db 	bl	8005956 <HAL_PCD_Start>
  return USBD_OK;
}
 80045a0:	2000      	movs	r0, #0
 80045a2:	bd08      	pop	{r3, pc}

080045a4 <USBD_LL_Stop>:
  * @brief  Stops the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80045a4:	b508      	push	{r3, lr}
  HAL_PCD_Stop(pdev->pData);
 80045a6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80045aa:	f001 f9e9 	bl	8005980 <HAL_PCD_Stop>
  return USBD_OK;
}
 80045ae:	2000      	movs	r0, #0
 80045b0:	bd08      	pop	{r3, pc}

080045b2 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 80045b2:	b510      	push	{r4, lr}
 80045b4:	461c      	mov	r4, r3
  HAL_PCD_EP_Open(pdev->pData,
 80045b6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80045ba:	4613      	mov	r3, r2
 80045bc:	4622      	mov	r2, r4
 80045be:	f001 fd2d 	bl	800601c <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 80045c2:	2000      	movs	r0, #0
 80045c4:	bd10      	pop	{r4, pc}

080045c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80045c6:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80045c8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80045cc:	f001 fd4b 	bl	8006066 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 80045d0:	2000      	movs	r0, #0
 80045d2:	bd08      	pop	{r3, pc}

080045d4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80045d4:	b508      	push	{r3, lr}
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80045d6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80045da:	f001 fe11 	bl	8006200 <HAL_PCD_EP_Flush>
  return USBD_OK;
}
 80045de:	2000      	movs	r0, #0
 80045e0:	bd08      	pop	{r3, pc}

080045e2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80045e2:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80045e4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80045e8:	f001 fdb9 	bl	800615e <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 80045ec:	2000      	movs	r0, #0
 80045ee:	bd08      	pop	{r3, pc}

080045f0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80045f0:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80045f2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80045f6:	f001 fdde 	bl	80061b6 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 80045fa:	2000      	movs	r0, #0
 80045fc:	bd08      	pop	{r3, pc}

080045fe <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 80045fe:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004602:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8004606:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800460a:	bf1b      	ittet	ne
 800460c:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8004610:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004614:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004618:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800461c:	bf08      	it	eq
 800461e:	f891 01e2 	ldrbeq.w	r0, [r1, #482]	; 0x1e2
  }
}
 8004622:	4770      	bx	lr

08004624 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004624:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004626:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800462a:	f001 fce3 	bl	8005ff4 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 800462e:	2000      	movs	r0, #0
 8004630:	bd08      	pop	{r3, pc}

08004632 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8004632:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004634:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004638:	f001 fd6a 	bl	8006110 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 800463c:	2000      	movs	r0, #0
 800463e:	bd08      	pop	{r3, pc}

08004640 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8004640:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004642:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004646:	f001 fd31 	bl	80060ac <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 800464a:	2000      	movs	r0, #0
 800464c:	bd08      	pop	{r3, pc}

0800464e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800464e:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8004650:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004654:	f001 fd54 	bl	8006100 <HAL_PCD_EP_GetRxCount>
}
 8004658:	bd08      	pop	{r3, pc}
	...

0800465c <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc_VCP);
 800465c:	2312      	movs	r3, #18
 800465e:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc_VCP;
}
 8004660:	4800      	ldr	r0, [pc, #0]	; (8004664 <USBD_VCP_DeviceDescriptor+0x8>)
 8004662:	4770      	bx	lr
 8004664:	20000040 	.word	0x20000040

08004668 <USBD_MSC_DeviceDescriptor>:

uint8_t *USBD_MSC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 8004668:	2312      	movs	r3, #18
 800466a:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc;
}
 800466c:	4800      	ldr	r0, [pc, #0]	; (8004670 <USBD_MSC_DeviceDescriptor+0x8>)
 800466e:	4770      	bx	lr
 8004670:	2000002c 	.word	0x2000002c

08004674 <USBD_MSC_LangIDStrDescriptor>:
  return (uint8_t*)USBD_LangIDDesc;
}

uint8_t *USBD_MSC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 8004674:	2304      	movs	r3, #4
 8004676:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 8004678:	4800      	ldr	r0, [pc, #0]	; (800467c <USBD_MSC_LangIDStrDescriptor+0x8>)
 800467a:	4770      	bx	lr
 800467c:	20000054 	.word	0x20000054

08004680 <IntToUnicode>:
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004680:	2300      	movs	r3, #0
{
 8004682:	b530      	push	{r4, r5, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8004684:	461d      	mov	r5, r3
  for( idx = 0 ; idx < len ; idx ++)
 8004686:	b2dc      	uxtb	r4, r3
 8004688:	42a2      	cmp	r2, r4
 800468a:	d800      	bhi.n	800468e <IntToUnicode+0xe>
  }
}
 800468c:	bd30      	pop	{r4, r5, pc}
    if( ((value >> 28)) < 0xA )
 800468e:	0f04      	lsrs	r4, r0, #28
 8004690:	2c09      	cmp	r4, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 8004692:	bf94      	ite	ls
 8004694:	3430      	addls	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8004696:	3437      	addhi	r4, #55	; 0x37
 8004698:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 800469c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 80046a0:	0100      	lsls	r0, r0, #4
    pbuf[ 2* idx + 1] = 0;
 80046a2:	7065      	strb	r5, [r4, #1]
 80046a4:	3301      	adds	r3, #1
 80046a6:	e7ee      	b.n	8004686 <IntToUnicode+0x6>

080046a8 <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80046a8:	231a      	movs	r3, #26
{
 80046aa:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80046ac:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)VCP_DEVICE_ID1;
 80046ae:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <USBD_VCP_SerialStrDescriptor+0x2c>)
 80046b0:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)VCP_DEVICE_ID3;
 80046b2:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80046b4:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80046b6:	18c0      	adds	r0, r0, r3
 80046b8:	d00a      	beq.n	80046d0 <USBD_VCP_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)VCP_DEVICE_ID2;
 80046ba:	4b07      	ldr	r3, [pc, #28]	; (80046d8 <USBD_VCP_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 80046bc:	4907      	ldr	r1, [pc, #28]	; (80046dc <USBD_VCP_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)VCP_DEVICE_ID2;
 80046be:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 80046c0:	2208      	movs	r2, #8
 80046c2:	f7ff ffdd 	bl	8004680 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 80046c6:	2204      	movs	r2, #4
 80046c8:	4905      	ldr	r1, [pc, #20]	; (80046e0 <USBD_VCP_SerialStrDescriptor+0x38>)
 80046ca:	4620      	mov	r0, r4
 80046cc:	f7ff ffd8 	bl	8004680 <IntToUnicode>
}
 80046d0:	4804      	ldr	r0, [pc, #16]	; (80046e4 <USBD_VCP_SerialStrDescriptor+0x3c>)
 80046d2:	bd10      	pop	{r4, pc}
 80046d4:	1fff7a30 	.word	0x1fff7a30
 80046d8:	1fff7a34 	.word	0x1fff7a34
 80046dc:	2000005a 	.word	0x2000005a
 80046e0:	2000006a 	.word	0x2000006a
 80046e4:	20000058 	.word	0x20000058

080046e8 <USBD_MSC_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80046e8:	231a      	movs	r3, #26
{
 80046ea:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80046ec:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 80046ee:	4b09      	ldr	r3, [pc, #36]	; (8004714 <USBD_MSC_SerialStrDescriptor+0x2c>)
 80046f0:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 80046f2:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80046f4:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80046f6:	18c0      	adds	r0, r0, r3
 80046f8:	d00a      	beq.n	8004710 <USBD_MSC_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 80046fa:	4b07      	ldr	r3, [pc, #28]	; (8004718 <USBD_MSC_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 80046fc:	4907      	ldr	r1, [pc, #28]	; (800471c <USBD_MSC_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 80046fe:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8004700:	2208      	movs	r2, #8
 8004702:	f7ff ffbd 	bl	8004680 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 8004706:	2204      	movs	r2, #4
 8004708:	4905      	ldr	r1, [pc, #20]	; (8004720 <USBD_MSC_SerialStrDescriptor+0x38>)
 800470a:	4620      	mov	r0, r4
 800470c:	f7ff ffb8 	bl	8004680 <IntToUnicode>
}
 8004710:	4804      	ldr	r0, [pc, #16]	; (8004724 <USBD_MSC_SerialStrDescriptor+0x3c>)
 8004712:	bd10      	pop	{r4, pc}
 8004714:	1fff7a10 	.word	0x1fff7a10
 8004718:	1fff7a14 	.word	0x1fff7a14
 800471c:	2000005a 	.word	0x2000005a
 8004720:	2000006a 	.word	0x2000006a
 8004724:	20000058 	.word	0x20000058

08004728 <USBD_VCP_ProductStrDescriptor>:
{
 8004728:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING_VCP, USBD_StrDesc, length);
 800472a:	4c04      	ldr	r4, [pc, #16]	; (800473c <USBD_VCP_ProductStrDescriptor+0x14>)
 800472c:	4804      	ldr	r0, [pc, #16]	; (8004740 <USBD_VCP_ProductStrDescriptor+0x18>)
 800472e:	460a      	mov	r2, r1
 8004730:	4621      	mov	r1, r4
 8004732:	f005 f95b 	bl	80099ec <USBD_GetString>
}
 8004736:	4620      	mov	r0, r4
 8004738:	bd10      	pop	{r4, pc}
 800473a:	bf00      	nop
 800473c:	20009608 	.word	0x20009608
 8004740:	0800cd35 	.word	0x0800cd35

08004744 <USBD_MSC_ProductStrDescriptor>:
{
 8004744:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 8004746:	4c04      	ldr	r4, [pc, #16]	; (8004758 <USBD_MSC_ProductStrDescriptor+0x14>)
 8004748:	4804      	ldr	r0, [pc, #16]	; (800475c <USBD_MSC_ProductStrDescriptor+0x18>)
 800474a:	460a      	mov	r2, r1
 800474c:	4621      	mov	r1, r4
 800474e:	f005 f94d 	bl	80099ec <USBD_GetString>
}
 8004752:	4620      	mov	r0, r4
 8004754:	bd10      	pop	{r4, pc}
 8004756:	bf00      	nop
 8004758:	20009608 	.word	0x20009608
 800475c:	0800cd04 	.word	0x0800cd04

08004760 <USBD_MSC_ManufacturerStrDescriptor>:
{
 8004760:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004762:	4c04      	ldr	r4, [pc, #16]	; (8004774 <USBD_MSC_ManufacturerStrDescriptor+0x14>)
 8004764:	4804      	ldr	r0, [pc, #16]	; (8004778 <USBD_MSC_ManufacturerStrDescriptor+0x18>)
 8004766:	460a      	mov	r2, r1
 8004768:	4621      	mov	r1, r4
 800476a:	f005 f93f 	bl	80099ec <USBD_GetString>
}
 800476e:	4620      	mov	r0, r4
 8004770:	bd10      	pop	{r4, pc}
 8004772:	bf00      	nop
 8004774:	20009608 	.word	0x20009608
 8004778:	0800ccf1 	.word	0x0800ccf1

0800477c <USBD_VCP_ConfigStrDescriptor>:
{
 800477c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING_VCP, USBD_StrDesc, length);
 800477e:	4c04      	ldr	r4, [pc, #16]	; (8004790 <USBD_VCP_ConfigStrDescriptor+0x14>)
 8004780:	4804      	ldr	r0, [pc, #16]	; (8004794 <USBD_VCP_ConfigStrDescriptor+0x18>)
 8004782:	460a      	mov	r2, r1
 8004784:	4621      	mov	r1, r4
 8004786:	f005 f931 	bl	80099ec <USBD_GetString>
}
 800478a:	4620      	mov	r0, r4
 800478c:	bd10      	pop	{r4, pc}
 800478e:	bf00      	nop
 8004790:	20009608 	.word	0x20009608
 8004794:	0800cd1c 	.word	0x0800cd1c

08004798 <USBD_MSC_ConfigStrDescriptor>:
{
 8004798:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800479a:	4c04      	ldr	r4, [pc, #16]	; (80047ac <USBD_MSC_ConfigStrDescriptor+0x14>)
 800479c:	4804      	ldr	r0, [pc, #16]	; (80047b0 <USBD_MSC_ConfigStrDescriptor+0x18>)
 800479e:	460a      	mov	r2, r1
 80047a0:	4621      	mov	r1, r4
 80047a2:	f005 f923 	bl	80099ec <USBD_GetString>
}
 80047a6:	4620      	mov	r0, r4
 80047a8:	bd10      	pop	{r4, pc}
 80047aa:	bf00      	nop
 80047ac:	20009608 	.word	0x20009608
 80047b0:	0800ccd8 	.word	0x0800ccd8

080047b4 <USBD_VCP_InterfaceStrDescriptor>:
{
 80047b4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING_VCP, USBD_StrDesc, length);
 80047b6:	4c04      	ldr	r4, [pc, #16]	; (80047c8 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 80047b8:	4804      	ldr	r0, [pc, #16]	; (80047cc <USBD_VCP_InterfaceStrDescriptor+0x18>)
 80047ba:	460a      	mov	r2, r1
 80047bc:	4621      	mov	r1, r4
 80047be:	f005 f915 	bl	80099ec <USBD_GetString>
}
 80047c2:	4620      	mov	r0, r4
 80047c4:	bd10      	pop	{r4, pc}
 80047c6:	bf00      	nop
 80047c8:	20009608 	.word	0x20009608
 80047cc:	0800cd27 	.word	0x0800cd27

080047d0 <USBD_MSC_InterfaceStrDescriptor>:
{
 80047d0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)(uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80047d2:	4c04      	ldr	r4, [pc, #16]	; (80047e4 <USBD_MSC_InterfaceStrDescriptor+0x14>)
 80047d4:	4804      	ldr	r0, [pc, #16]	; (80047e8 <USBD_MSC_InterfaceStrDescriptor+0x18>)
 80047d6:	460a      	mov	r2, r1
 80047d8:	4621      	mov	r1, r4
 80047da:	f005 f907 	bl	80099ec <USBD_GetString>
}
 80047de:	4620      	mov	r0, r4
 80047e0:	bd10      	pop	{r4, pc}
 80047e2:	bf00      	nop
 80047e4:	20009608 	.word	0x20009608
 80047e8:	0800cce3 	.word	0x0800cce3

080047ec <USBD_VCP_LangIDStrDescriptor>:
 80047ec:	2304      	movs	r3, #4
 80047ee:	800b      	strh	r3, [r1, #0]
 80047f0:	4800      	ldr	r0, [pc, #0]	; (80047f4 <USBD_VCP_LangIDStrDescriptor+0x8>)
 80047f2:	4770      	bx	lr
 80047f4:	20000054 	.word	0x20000054

080047f8 <USBD_VCP_ManufacturerStrDescriptor>:
 80047f8:	b510      	push	{r4, lr}
 80047fa:	4c04      	ldr	r4, [pc, #16]	; (800480c <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 80047fc:	4804      	ldr	r0, [pc, #16]	; (8004810 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
 80047fe:	460a      	mov	r2, r1
 8004800:	4621      	mov	r1, r4
 8004802:	f005 f8f3 	bl	80099ec <USBD_GetString>
 8004806:	4620      	mov	r0, r4
 8004808:	bd10      	pop	{r4, pc}
 800480a:	bf00      	nop
 800480c:	20009608 	.word	0x20009608
 8004810:	0800ccf1 	.word	0x0800ccf1

08004814 <STORAGE_IsWriteProtected>:
  * @retval Status (0: write enabled / -1: otherwise)
  */
int8_t STORAGE_IsWriteProtected(uint8_t lun)
{
  return 0;
}
 8004814:	2000      	movs	r0, #0
 8004816:	4770      	bx	lr

08004818 <STORAGE_GetMaxLun>:
  * @retval Lun(s) number
  */
int8_t STORAGE_GetMaxLun(void)
{
  return(STORAGE_LUN_NBR - 1);
}
 8004818:	2000      	movs	r0, #0
 800481a:	4770      	bx	lr

0800481c <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800481c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218

  if(pdev->pClassData != NULL)
 8004820:	b11b      	cbz	r3, 800482a <USBD_CDC_DataIn+0xe>
  {

    hcdc->TxState = 0;
 8004822:	2000      	movs	r0, #0
 8004824:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8004828:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 800482a:	2002      	movs	r0, #2
  }
}
 800482c:	4770      	bx	lr

0800482e <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800482e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{
 8004832:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004834:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8004838:	b15b      	cbz	r3, 8004852 <USBD_CDC_EP0_RxReady+0x24>
 800483a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800483e:	28ff      	cmp	r0, #255	; 0xff
 8004840:	d007      	beq.n	8004852 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004848:	4621      	mov	r1, r4
 800484a:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF;
 800484c:	23ff      	movs	r3, #255	; 0xff
 800484e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8004852:	2000      	movs	r0, #0
 8004854:	bd10      	pop	{r4, pc}
	...

08004858 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004858:	2343      	movs	r3, #67	; 0x43
 800485a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800485c:	4800      	ldr	r0, [pc, #0]	; (8004860 <USBD_CDC_GetFSCfgDesc+0x8>)
 800485e:	4770      	bx	lr
 8004860:	200000f4 	.word	0x200000f4

08004864 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8004864:	2343      	movs	r3, #67	; 0x43
 8004866:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004868:	4800      	ldr	r0, [pc, #0]	; (800486c <USBD_CDC_GetHSCfgDesc+0x8>)
 800486a:	4770      	bx	lr
 800486c:	20000138 	.word	0x20000138

08004870 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004870:	2343      	movs	r3, #67	; 0x43
 8004872:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004874:	4800      	ldr	r0, [pc, #0]	; (8004878 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004876:	4770      	bx	lr
 8004878:	20000188 	.word	0x20000188

0800487c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800487c:	230a      	movs	r3, #10
 800487e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004880:	4800      	ldr	r0, [pc, #0]	; (8004884 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004882:	4770      	bx	lr
 8004884:	2000017c 	.word	0x2000017c

08004888 <STORAGE_Init>:
{
 8004888:	b508      	push	{r3, lr}
  BSP_SD_Init();
 800488a:	f7fc fcd7 	bl	800123c <BSP_SD_Init>
}
 800488e:	2000      	movs	r0, #0
 8004890:	bd08      	pop	{r3, pc}

08004892 <STORAGE_GetCapacity>:
{
 8004892:	b530      	push	{r4, r5, lr}
 8004894:	b097      	sub	sp, #92	; 0x5c
 8004896:	460d      	mov	r5, r1
 8004898:	4614      	mov	r4, r2
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 800489a:	f7fc fc1e 	bl	80010da <BSP_SD_IsDetected>
 800489e:	b178      	cbz	r0, 80048c0 <STORAGE_GetCapacity+0x2e>
    BSP_SD_GetCardInfo(&info);
 80048a0:	4668      	mov	r0, sp
 80048a2:	f7fc fc3b 	bl	800111c <BSP_SD_GetCardInfo>
    *block_num = (info.CardCapacity)/STORAGE_BLK_SIZ  - 1;
 80048a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80048aa:	0a5b      	lsrs	r3, r3, #9
 80048ac:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80048b0:	3b01      	subs	r3, #1
 80048b2:	602b      	str	r3, [r5, #0]
    *block_size = STORAGE_BLK_SIZ;
 80048b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048b8:	8023      	strh	r3, [r4, #0]
    ret = 0;
 80048ba:	2000      	movs	r0, #0
}
 80048bc:	b017      	add	sp, #92	; 0x5c
 80048be:	bd30      	pop	{r4, r5, pc}
  int8_t ret = -1;  
 80048c0:	f04f 30ff 	mov.w	r0, #4294967295
 80048c4:	e7fa      	b.n	80048bc <STORAGE_GetCapacity+0x2a>

080048c6 <STORAGE_Read>:
{
 80048c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80048c8:	460c      	mov	r4, r1
 80048ca:	4615      	mov	r5, r2
 80048cc:	461e      	mov	r6, r3
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 80048ce:	f7fc fc04 	bl	80010da <BSP_SD_IsDetected>
 80048d2:	b158      	cbz	r0, 80048ec <STORAGE_Read+0x26>
    BSP_SD_ReadBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 80048d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	9601      	str	r6, [sp, #4]
 80048dc:	026a      	lsls	r2, r5, #9
 80048de:	2300      	movs	r3, #0
 80048e0:	4620      	mov	r0, r4
 80048e2:	f7fc fc53 	bl	800118c <BSP_SD_ReadBlocks_DMA>
    ret = 0;
 80048e6:	2000      	movs	r0, #0
}
 80048e8:	b002      	add	sp, #8
 80048ea:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;  
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295
 80048f0:	e7fa      	b.n	80048e8 <STORAGE_Read+0x22>

080048f2 <STORAGE_Write>:
{
 80048f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80048f4:	460c      	mov	r4, r1
 80048f6:	4615      	mov	r5, r2
 80048f8:	461e      	mov	r6, r3
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 80048fa:	f7fc fbee 	bl	80010da <BSP_SD_IsDetected>
 80048fe:	b158      	cbz	r0, 8004918 <STORAGE_Write+0x26>
    BSP_SD_WriteBlocks_DMA((uint32_t *)buf, blk_addr * STORAGE_BLK_SIZ, STORAGE_BLK_SIZ, blk_len);
 8004900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	9601      	str	r6, [sp, #4]
 8004908:	026a      	lsls	r2, r5, #9
 800490a:	2300      	movs	r3, #0
 800490c:	4620      	mov	r0, r4
 800490e:	f7fc fd17 	bl	8001340 <BSP_SD_WriteBlocks_DMA>
    ret = 0;
 8004912:	2000      	movs	r0, #0
}
 8004914:	b002      	add	sp, #8
 8004916:	bd70      	pop	{r4, r5, r6, pc}
  int8_t ret = -1;  
 8004918:	f04f 30ff 	mov.w	r0, #4294967295
 800491c:	e7fa      	b.n	8004914 <STORAGE_Write+0x22>

0800491e <USBD_CDC_DataOut>:
{
 800491e:	b538      	push	{r3, r4, r5, lr}
 8004920:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004922:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004926:	f7ff fe92 	bl	800464e <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800492a:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800492e:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8004932:	b14b      	cbz	r3, 8004948 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004934:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8004938:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8004942:	4798      	blx	r3
    return USBD_OK;
 8004944:	2000      	movs	r0, #0
 8004946:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8004948:	2002      	movs	r0, #2
}
 800494a:	bd38      	pop	{r3, r4, r5, pc}

0800494c <USBD_CDC_Setup>:
{
 800494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800494e:	780f      	ldrb	r7, [r1, #0]
 8004950:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8004954:	4606      	mov	r6, r0
 8004956:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004958:	d023      	beq.n	80049a2 <USBD_CDC_Setup+0x56>
 800495a:	2b20      	cmp	r3, #32
 800495c:	d119      	bne.n	8004992 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 800495e:	88ca      	ldrh	r2, [r1, #6]
 8004960:	784b      	ldrb	r3, [r1, #1]
 8004962:	b1c2      	cbz	r2, 8004996 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8004964:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004966:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 800496a:	d50b      	bpl.n	8004984 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800496c:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8004970:	4618      	mov	r0, r3
 8004972:	688f      	ldr	r7, [r1, #8]
 8004974:	4629      	mov	r1, r5
 8004976:	47b8      	blx	r7
          USBD_CtlSendData (pdev,
 8004978:	88e2      	ldrh	r2, [r4, #6]
 800497a:	4629      	mov	r1, r5
 800497c:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 800497e:	f005 f851 	bl	8009a24 <USBD_CtlSendData>
      break;
 8004982:	e006      	b.n	8004992 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8004984:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8004988:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev,
 800498c:	4629      	mov	r1, r5
 800498e:	f005 f85e 	bl	8009a4e <USBD_CtlPrepareRx>
}
 8004992:	2000      	movs	r0, #0
 8004994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004996:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 800499a:	6884      	ldr	r4, [r0, #8]
 800499c:	4618      	mov	r0, r3
 800499e:	47a0      	blx	r4
 80049a0:	e7f7      	b.n	8004992 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 80049a2:	784b      	ldrb	r3, [r1, #1]
 80049a4:	2b0a      	cmp	r3, #10
 80049a6:	d1f4      	bne.n	8004992 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 80049a8:	2201      	movs	r2, #1
 80049aa:	4901      	ldr	r1, [pc, #4]	; (80049b0 <USBD_CDC_Setup+0x64>)
 80049ac:	e7e7      	b.n	800497e <USBD_CDC_Setup+0x32>
 80049ae:	bf00      	nop
 80049b0:	2000083c 	.word	0x2000083c

080049b4 <USBD_CDC_DeInit>:
{
 80049b4:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 80049b6:	2183      	movs	r1, #131	; 0x83
{
 80049b8:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 80049ba:	f7ff fe04 	bl	80045c6 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80049be:	2103      	movs	r1, #3
 80049c0:	4620      	mov	r0, r4
 80049c2:	f7ff fe00 	bl	80045c6 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80049c6:	2182      	movs	r1, #130	; 0x82
 80049c8:	4620      	mov	r0, r4
 80049ca:	f7ff fdfc 	bl	80045c6 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 80049ce:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80049d2:	b153      	cbz	r3, 80049ea <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80049d4:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80049dc:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80049e0:	f006 fd16 	bl	800b410 <free>
    pdev->pClassData = NULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 80049ea:	2000      	movs	r0, #0
 80049ec:	bd10      	pop	{r4, pc}

080049ee <USBD_CDC_Init>:
{
 80049ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80049f0:	7c03      	ldrb	r3, [r0, #16]
{
 80049f2:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80049f4:	bb7b      	cbnz	r3, 8004a56 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 80049f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049fa:	2202      	movs	r2, #2
 80049fc:	2183      	movs	r1, #131	; 0x83
 80049fe:	f7ff fdd8 	bl	80045b2 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8004a02:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8004a06:	2202      	movs	r2, #2
 8004a08:	2103      	movs	r1, #3
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f7ff fdd1 	bl	80045b2 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8004a10:	2308      	movs	r3, #8
 8004a12:	2203      	movs	r2, #3
 8004a14:	2182      	movs	r1, #130	; 0x82
 8004a16:	4620      	mov	r0, r4
 8004a18:	f7ff fdcb 	bl	80045b2 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004a1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004a20:	f006 fcee 	bl	800b400 <malloc>
 8004a24:	4606      	mov	r6, r0
 8004a26:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8004a2a:	b320      	cbz	r0, 8004a76 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004a2c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004a34:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8004a36:	2500      	movs	r5, #0
 8004a38:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8004a3c:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004a40:	b987      	cbnz	r7, 8004a64 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8004a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a46:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8004a4a:	2103      	movs	r1, #3
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	f7ff fdf7 	bl	8004640 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8004a52:	4638      	mov	r0, r7
 8004a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8004a56:	2340      	movs	r3, #64	; 0x40
 8004a58:	2202      	movs	r2, #2
 8004a5a:	2183      	movs	r1, #131	; 0x83
 8004a5c:	f7ff fda9 	bl	80045b2 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8004a60:	2340      	movs	r3, #64	; 0x40
 8004a62:	e7d0      	b.n	8004a06 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8004a64:	2340      	movs	r3, #64	; 0x40
 8004a66:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8004a6a:	2103      	movs	r1, #3
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f7ff fde7 	bl	8004640 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8004a72:	4628      	mov	r0, r5
 8004a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1;
 8004a76:	2001      	movs	r0, #1
}
 8004a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a7c <CDC_Itf_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
 8004a7c:	b508      	push	{r3, lr}
  /* DeInitialize the UART peripheral */
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8004a7e:	4802      	ldr	r0, [pc, #8]	; (8004a88 <CDC_Itf_DeInit+0xc>)
 8004a80:	f002 feac 	bl	80077dc <HAL_UART_DeInit>
  {
    /* Initialization Error */
 //   Error_Handler();
 }
  return (USBD_OK);
}
 8004a84:	2000      	movs	r0, #0
 8004a86:	bd08      	pop	{r3, pc}
 8004a88:	20009718 	.word	0x20009718

08004a8c <CDC_Itf_Init>:
{
 8004a8c:	b570      	push	{r4, r5, r6, lr}
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8004a8e:	4a18      	ldr	r2, [pc, #96]	; (8004af0 <CDC_Itf_Init+0x64>)
  UartHandle.Instance          = USARTx;
 8004a90:	4c18      	ldr	r4, [pc, #96]	; (8004af4 <CDC_Itf_Init+0x68>)
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 8004a92:	4e19      	ldr	r6, [pc, #100]	; (8004af8 <CDC_Itf_Init+0x6c>)
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8004a94:	2500      	movs	r5, #0
 8004a96:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004a9a:	e884 002c 	stmia.w	r4, {r2, r3, r5}
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8004a9e:	4620      	mov	r0, r4
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8004aa0:	230c      	movs	r3, #12
 8004aa2:	6163      	str	r3, [r4, #20]
  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 8004aa4:	60e5      	str	r5, [r4, #12]
  UartHandle.Init.Parity       = UART_PARITY_NONE;
 8004aa6:	6125      	str	r5, [r4, #16]
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8004aa8:	61a5      	str	r5, [r4, #24]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8004aaa:	f003 f945 	bl	8007d38 <HAL_UART_Init>
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	4631      	mov	r1, r6
 8004ab2:	4620      	mov	r0, r4


static void TIM_Config(void)
{
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 8004ab4:	4c11      	ldr	r4, [pc, #68]	; (8004afc <CDC_Itf_Init+0x70>)
 if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBuffer, 1) != HAL_OK)
 8004ab6:	f002 feab 	bl	8007810 <HAL_UART_Receive_IT>
  TimHandle.Instance = TIMx;
 8004aba:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <CDC_Itf_Init+0x74>)
 8004abc:	6023      	str	r3, [r4, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 8004abe:	f241 3387 	movw	r3, #4999	; 0x1387
 8004ac2:	60e3      	str	r3, [r4, #12]
  TimHandle.Init.Prescaler = 84-1;
  TimHandle.Init.ClockDivision = 0;
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8004ac4:	4620      	mov	r0, r4
  TimHandle.Init.Prescaler = 84-1;
 8004ac6:	2353      	movs	r3, #83	; 0x53
 8004ac8:	6063      	str	r3, [r4, #4]
  TimHandle.Init.ClockDivision = 0;
 8004aca:	6125      	str	r5, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004acc:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8004ace:	f002 fe69 	bl	80077a4 <HAL_TIM_Base_Init>
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f002 fdf8 	bl	80076c8 <HAL_TIM_Base_Start_IT>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004ad8:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <CDC_Itf_Init+0x78>)
  hcdc->RxBuffer = pbuff;
 8004ada:	4a0b      	ldr	r2, [pc, #44]	; (8004b08 <CDC_Itf_Init+0x7c>)
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004adc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
}
 8004ae0:	4628      	mov	r0, r5
  hcdc->TxBuffer = pbuff;
 8004ae2:	f8c3 6208 	str.w	r6, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004ae6:	f8c3 5210 	str.w	r5, [r3, #528]	; 0x210
  hcdc->RxBuffer = pbuff;
 8004aea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8004aee:	bd70      	pop	{r4, r5, r6, pc}
 8004af0:	40013800 	.word	0x40013800
 8004af4:	20009718 	.word	0x20009718
 8004af8:	200097f1 	.word	0x200097f1
 8004afc:	2000abf0 	.word	0x2000abf0
 8004b00:	40000400 	.word	0x40000400
 8004b04:	20008988 	.word	0x20008988
 8004b08:	2000a3e4 	.word	0x2000a3e4

08004b0c <STORAGE_IsReady>:
{
 8004b0c:	b510      	push	{r4, lr}
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8004b0e:	f7fc fae4 	bl	80010da <BSP_SD_IsDetected>
 8004b12:	4c0b      	ldr	r4, [pc, #44]	; (8004b40 <STORAGE_IsReady+0x34>)
    if(prev_status < 0)
 8004b14:	f994 3000 	ldrsb.w	r3, [r4]
  if(BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8004b18:	b160      	cbz	r0, 8004b34 <STORAGE_IsReady+0x28>
    if(prev_status < 0)
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	da03      	bge.n	8004b26 <STORAGE_IsReady+0x1a>
      BSP_SD_Init();
 8004b1e:	f7fc fb8d 	bl	800123c <BSP_SD_Init>
      prev_status = 0;
 8004b22:	2300      	movs	r3, #0
 8004b24:	7023      	strb	r3, [r4, #0]
    if(BSP_SD_GetStatus() == SD_TRANSFER_OK)
 8004b26:	f7fc faf3 	bl	8001110 <BSP_SD_GetStatus>
 8004b2a:	3000      	adds	r0, #0
 8004b2c:	bf18      	it	ne
 8004b2e:	2001      	movne	r0, #1
 8004b30:	4240      	negs	r0, r0
 8004b32:	bd10      	pop	{r4, pc}
  else if(prev_status == 0)
 8004b34:	b90b      	cbnz	r3, 8004b3a <STORAGE_IsReady+0x2e>
    prev_status = -1;
 8004b36:	23ff      	movs	r3, #255	; 0xff
 8004b38:	7023      	strb	r3, [r4, #0]
  int8_t ret = -1;
 8004b3a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004b3e:	bd10      	pop	{r4, pc}
 8004b40:	2000083d 	.word	0x2000083d

08004b44 <CDC_Itf_Control>:
  switch (cmd)
 8004b44:	2820      	cmp	r0, #32
{
 8004b46:	b538      	push	{r3, r4, r5, lr}
  switch (cmd)
 8004b48:	d003      	beq.n	8004b52 <CDC_Itf_Control+0xe>
 8004b4a:	2821      	cmp	r0, #33	; 0x21
 8004b4c:	d048      	beq.n	8004be0 <CDC_Itf_Control+0x9c>
}
 8004b4e:	2000      	movs	r0, #0
 8004b50:	bd38      	pop	{r3, r4, r5, pc}
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8004b52:	4c2c      	ldr	r4, [pc, #176]	; (8004c04 <CDC_Itf_Control+0xc0>)
 8004b54:	680b      	ldr	r3, [r1, #0]
 8004b56:	6023      	str	r3, [r4, #0]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8004b58:	4d2b      	ldr	r5, [pc, #172]	; (8004c08 <CDC_Itf_Control+0xc4>)
    LineCoding.format     = pbuf[4];
 8004b5a:	790b      	ldrb	r3, [r1, #4]
 8004b5c:	7123      	strb	r3, [r4, #4]
    LineCoding.paritytype = pbuf[5];
 8004b5e:	794b      	ldrb	r3, [r1, #5]
 8004b60:	7163      	strb	r3, [r4, #5]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8004b62:	4628      	mov	r0, r5
    LineCoding.datatype   = pbuf[6];
 8004b64:	798b      	ldrb	r3, [r1, #6]
 8004b66:	71a3      	strb	r3, [r4, #6]
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8004b68:	f002 fe38 	bl	80077dc <HAL_UART_DeInit>
  switch (LineCoding.format)
 8004b6c:	7923      	ldrb	r3, [r4, #4]
 8004b6e:	4628      	mov	r0, r5
 8004b70:	b12b      	cbz	r3, 8004b7e <CDC_Itf_Control+0x3a>
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d001      	beq.n	8004b7a <CDC_Itf_Control+0x36>
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 8004b76:	2300      	movs	r3, #0
 8004b78:	e001      	b.n	8004b7e <CDC_Itf_Control+0x3a>
    UartHandle.Init.StopBits = UART_STOPBITS_2;
 8004b7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  switch (LineCoding.paritytype)
 8004b7e:	7962      	ldrb	r2, [r4, #5]
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 8004b80:	60c3      	str	r3, [r0, #12]
  switch (LineCoding.paritytype)
 8004b82:	2a01      	cmp	r2, #1
 8004b84:	d020      	beq.n	8004bc8 <CDC_Itf_Control+0x84>
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	d301      	bcc.n	8004b90 <CDC_Itf_Control+0x4c>
 8004b8c:	2a02      	cmp	r2, #2
 8004b8e:	d01e      	beq.n	8004bce <CDC_Itf_Control+0x8a>
  switch (LineCoding.datatype)
 8004b90:	79a2      	ldrb	r2, [r4, #6]
    UartHandle.Init.Parity = UART_PARITY_NONE;
 8004b92:	6103      	str	r3, [r0, #16]
  switch (LineCoding.datatype)
 8004b94:	2a07      	cmp	r2, #7
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <CDC_Itf_Control+0x5c>
 8004b9c:	2a08      	cmp	r2, #8
 8004b9e:	d019      	beq.n	8004bd4 <CDC_Itf_Control+0x90>
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8004ba0:	6083      	str	r3, [r0, #8]
  UartHandle.Init.BaudRate     = LineCoding.bitrate;
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	6043      	str	r3, [r0, #4]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8004ba6:	220c      	movs	r2, #12
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8004bac:	6142      	str	r2, [r0, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bae:	61c3      	str	r3, [r0, #28]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8004bb0:	4815      	ldr	r0, [pc, #84]	; (8004c08 <CDC_Itf_Control+0xc4>)
 8004bb2:	f003 f8c1 	bl	8007d38 <HAL_UART_Init>
 HAL_UART_Receive_IT(&UartHandle, (uint8_t *)(UserTxBuffer + UserTxBufPtrIn), 1);
 8004bb6:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <CDC_Itf_Control+0xc8>)
 8004bb8:	4915      	ldr	r1, [pc, #84]	; (8004c10 <CDC_Itf_Control+0xcc>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4812      	ldr	r0, [pc, #72]	; (8004c08 <CDC_Itf_Control+0xc4>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	4419      	add	r1, r3
 8004bc2:	f002 fe25 	bl	8007810 <HAL_UART_Receive_IT>
 8004bc6:	e7c2      	b.n	8004b4e <CDC_Itf_Control+0xa>
    UartHandle.Init.Parity = UART_PARITY_ODD;
 8004bc8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004bcc:	e7e0      	b.n	8004b90 <CDC_Itf_Control+0x4c>
    UartHandle.Init.Parity = UART_PARITY_EVEN;
 8004bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bd2:	e7dd      	b.n	8004b90 <CDC_Itf_Control+0x4c>
    if(UartHandle.Init.Parity == UART_PARITY_NONE)
 8004bd4:	6903      	ldr	r3, [r0, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0e2      	beq.n	8004ba0 <CDC_Itf_Control+0x5c>
      UartHandle.Init.WordLength = UART_WORDLENGTH_9B;
 8004bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bde:	e7df      	b.n	8004ba0 <CDC_Itf_Control+0x5c>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8004be0:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <CDC_Itf_Control+0xc0>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	0a12      	lsrs	r2, r2, #8
 8004bea:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8004bec:	885a      	ldrh	r2, [r3, #2]
 8004bee:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8004bf0:	78da      	ldrb	r2, [r3, #3]
 8004bf2:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 8004bf4:	791a      	ldrb	r2, [r3, #4]
 8004bf6:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 8004bf8:	795a      	ldrb	r2, [r3, #5]
 8004bfa:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;
 8004bfc:	799b      	ldrb	r3, [r3, #6]
 8004bfe:	718b      	strb	r3, [r1, #6]
    break;
 8004c00:	e7a5      	b.n	8004b4e <CDC_Itf_Control+0xa>
 8004c02:	bf00      	nop
 8004c04:	20000090 	.word	0x20000090
 8004c08:	20009718 	.word	0x20009718
 8004c0c:	20000838 	.word	0x20000838
 8004c10:	200097f1 	.word	0x200097f1

08004c14 <LL_RTC_DATE_GetDay.constprop.2>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 8004c14:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <LL_RTC_DATE_GetDay.constprop.2+0x2c>)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c16:	2030      	movs	r0, #48	; 0x30
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	fa90 f0a0 	rbit	r0, r0
 8004c1e:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_POSITION_DR_DT) << 4U) | ((temp & RTC_DR_DU) >> RTC_POSITION_DR_DU));
 8004c20:	fab0 f080 	clz	r0, r0
 8004c24:	fa92 f2a2 	rbit	r2, r2
 8004c28:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8004c2c:	fab2 f282 	clz	r2, r2
 8004c30:	f003 030f 	and.w	r3, r3, #15
 8004c34:	fa21 f000 	lsr.w	r0, r1, r0
 8004c38:	40d3      	lsrs	r3, r2
}
 8004c3a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004c3e:	4770      	bx	lr
 8004c40:	40002800 	.word	0x40002800

08004c44 <LL_RTC_DATE_GetMonth.constprop.3>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 8004c44:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <LL_RTC_DATE_GetMonth.constprop.3+0x30>)
 8004c46:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	fa90 f0a0 	rbit	r0, r0
 8004c50:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_POSITION_DR_MT) << 4U) | ((temp & RTC_DR_MU) >> RTC_POSITION_DR_MU));
 8004c54:	fab0 f080 	clz	r0, r0
 8004c58:	fa92 f2a2 	rbit	r2, r2
 8004c5c:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 8004c60:	fab2 f282 	clz	r2, r2
 8004c64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c68:	fa21 f000 	lsr.w	r0, r1, r0
 8004c6c:	40d3      	lsrs	r3, r2
}
 8004c6e:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004c72:	4770      	bx	lr
 8004c74:	40002800 	.word	0x40002800

08004c78 <LL_RTC_DATE_GetYear.constprop.4>:
  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <LL_RTC_DATE_GetYear.constprop.4+0x30>)
 8004c7a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	fa90 f0a0 	rbit	r0, r0
 8004c84:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_POSITION_DR_YT) << 4U) | ((temp & RTC_DR_YU) >> RTC_POSITION_DR_YU));
 8004c88:	fab0 f080 	clz	r0, r0
 8004c8c:	fa92 f2a2 	rbit	r2, r2
 8004c90:	f403 0170 	and.w	r1, r3, #15728640	; 0xf00000
 8004c94:	fab2 f282 	clz	r2, r2
 8004c98:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004c9c:	fa21 f000 	lsr.w	r0, r1, r0
 8004ca0:	40d3      	lsrs	r3, r2
}
 8004ca2:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004ca6:	4770      	bx	lr
 8004ca8:	40002800 	.word	0x40002800

08004cac <LL_RTC_TIME_GetSecond.constprop.5>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 8004cac:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <LL_RTC_TIME_GetSecond.constprop.5+0x2c>)
 8004cae:	2070      	movs	r0, #112	; 0x70
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	fa90 f0a0 	rbit	r0, r0
 8004cb6:	220f      	movs	r2, #15
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_POSITION_TR_ST) << 4U) | ((temp & RTC_TR_SU) >> RTC_POSITION_TR_SU));
 8004cb8:	fab0 f080 	clz	r0, r0
 8004cbc:	fa92 f2a2 	rbit	r2, r2
 8004cc0:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8004cc4:	fab2 f282 	clz	r2, r2
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	fa21 f000 	lsr.w	r0, r1, r0
 8004cd0:	40d3      	lsrs	r3, r2
}
 8004cd2:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004cd6:	4770      	bx	lr
 8004cd8:	40002800 	.word	0x40002800

08004cdc <LL_RTC_TIME_GetMinute.constprop.6>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 8004cdc:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <LL_RTC_TIME_GetMinute.constprop.6+0x30>)
 8004cde:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	fa90 f0a0 	rbit	r0, r0
 8004ce8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_POSITION_TR_MT) << 4U) | ((temp & RTC_TR_MNU) >> RTC_POSITION_TR_MU));
 8004cec:	fab0 f080 	clz	r0, r0
 8004cf0:	fa92 f2a2 	rbit	r2, r2
 8004cf4:	f403 41e0 	and.w	r1, r3, #28672	; 0x7000
 8004cf8:	fab2 f282 	clz	r2, r2
 8004cfc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d00:	fa21 f000 	lsr.w	r0, r1, r0
 8004d04:	40d3      	lsrs	r3, r2
}
 8004d06:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004d0a:	4770      	bx	lr
 8004d0c:	40002800 	.word	0x40002800

08004d10 <LL_RTC_TIME_GetHour.constprop.7>:
  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 8004d10:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <LL_RTC_TIME_GetHour.constprop.7+0x30>)
 8004d12:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	fa90 f0a0 	rbit	r0, r0
 8004d1c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_POSITION_TR_HT) << 4U) | ((temp & RTC_TR_HU) >> RTC_POSITION_TR_HU));
 8004d20:	fab0 f080 	clz	r0, r0
 8004d24:	fa92 f2a2 	rbit	r2, r2
 8004d28:	f403 1140 	and.w	r1, r3, #3145728	; 0x300000
 8004d2c:	fab2 f282 	clz	r2, r2
 8004d30:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004d34:	fa21 f000 	lsr.w	r0, r1, r0
 8004d38:	40d3      	lsrs	r3, r2
}
 8004d3a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8004d3e:	4770      	bx	lr
 8004d40:	40002800 	.word	0x40002800

08004d44 <USBD_CDC_RegisterInterface>:
  if(fops != NULL)
 8004d44:	b119      	cbz	r1, 8004d4e <USBD_CDC_RegisterInterface+0xa>
    pdev->pUserData= fops;
 8004d46:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8004d4e:	2002      	movs	r0, #2
}
 8004d50:	4770      	bx	lr

08004d52 <USBD_CDC_TransmitPacket>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004d52:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 8004d56:	b510      	push	{r4, lr}
  if(pdev->pClassData != NULL)
 8004d58:	b172      	cbz	r2, 8004d78 <USBD_CDC_TransmitPacket+0x26>
    if(hcdc->TxState == 0)
 8004d5a:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8004d5e:	2301      	movs	r3, #1
 8004d60:	b964      	cbnz	r4, 8004d7c <USBD_CDC_TransmitPacket+0x2a>
      hcdc->TxState = 1;
 8004d62:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      USBD_LL_Transmit(pdev,
 8004d66:	2183      	movs	r1, #131	; 0x83
 8004d68:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8004d6c:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8004d70:	f7ff fc5f 	bl	8004632 <USBD_LL_Transmit>
      return USBD_OK;
 8004d74:	4620      	mov	r0, r4
 8004d76:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8004d78:	2002      	movs	r0, #2
 8004d7a:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 8004d7c:	4618      	mov	r0, r3
}
 8004d7e:	bd10      	pop	{r4, pc}

08004d80 <USBD_CDC_ReceivePacket>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004d80:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{
 8004d84:	b510      	push	{r4, lr}
  if(pdev->pClassData != NULL)
 8004d86:	b162      	cbz	r2, 8004da2 <USBD_CDC_ReceivePacket+0x22>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8004d88:	7c04      	ldrb	r4, [r0, #16]
 8004d8a:	b944      	cbnz	r4, 8004d9e <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8004d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
      USBD_LL_PrepareReceive(pdev,
 8004d90:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004d94:	2103      	movs	r1, #3
 8004d96:	f7ff fc53 	bl	8004640 <USBD_LL_PrepareReceive>
    return USBD_OK;
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8004d9e:	2340      	movs	r3, #64	; 0x40
 8004da0:	e7f6      	b.n	8004d90 <USBD_CDC_ReceivePacket+0x10>
    return USBD_FAIL;
 8004da2:	2002      	movs	r0, #2
}
 8004da4:	bd10      	pop	{r4, pc}
	...

08004da8 <CDC_Itf_Receive>:
{
 8004da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
BuffLength=0;
 8004dac:	4dc1      	ldr	r5, [pc, #772]	; (80050b4 <CDC_Itf_Receive+0x30c>)
 8004dae:	4cc2      	ldr	r4, [pc, #776]	; (80050b8 <CDC_Itf_Receive+0x310>)
 8004db0:	2300      	movs	r3, #0
{
 8004db2:	b087      	sub	sp, #28
BuffLength=0;
 8004db4:	602b      	str	r3, [r5, #0]
for (i = 0; i < *Len; i++)
 8004db6:	4602      	mov	r2, r0
 8004db8:	680e      	ldr	r6, [r1, #0]
 8004dba:	1a13      	subs	r3, r2, r0
 8004dbc:	429e      	cmp	r6, r3
 8004dbe:	f200 8089 	bhi.w	8004ed4 <CDC_Itf_Receive+0x12c>
if (TempUserBuffer[0] == 'g')
 8004dc2:	7823      	ldrb	r3, [r4, #0]
 8004dc4:	2b67      	cmp	r3, #103	; 0x67
 8004dc6:	f040 808c 	bne.w	8004ee2 <CDC_Itf_Receive+0x13a>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8004dca:	f894 c002 	ldrb.w	ip, [r4, #2]
 8004dce:	78e3      	ldrb	r3, [r4, #3]
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8004dd0:	f894 e006 	ldrb.w	lr, [r4, #6]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8004dd4:	7ae2      	ldrb	r2, [r4, #11]
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8004dd6:	7be1      	ldrb	r1, [r4, #15]
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8004dd8:	7ce0      	ldrb	r0, [r4, #19]
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8004dda:	f894 a016 	ldrb.w	sl, [r4, #22]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8004dde:	f8df b324 	ldr.w	fp, [pc, #804]	; 8005104 <CDC_Itf_Receive+0x35c>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8004de2:	4fb6      	ldr	r7, [pc, #728]	; (80050bc <CDC_Itf_Receive+0x314>)
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8004de4:	4eb6      	ldr	r6, [pc, #728]	; (80050c0 <CDC_Itf_Receive+0x318>)
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8004de6:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8005108 <CDC_Itf_Receive+0x360>
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8004dea:	f8df 8320 	ldr.w	r8, [pc, #800]	; 800510c <CDC_Itf_Receive+0x364>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8004dee:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004df2:	3b30      	subs	r3, #48	; 0x30
 8004df4:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8004df8:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8004dfc:	79e3      	ldrb	r3, [r4, #7]
 8004dfe:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004e02:	3b30      	subs	r3, #48	; 0x30
 8004e04:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8004e08:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8004e0c:	7aa3      	ldrb	r3, [r4, #10]
 8004e0e:	3b30      	subs	r3, #48	; 0x30
 8004e10:	3a30      	subs	r2, #48	; 0x30
 8004e12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004e16:	eb02 0343 	add.w	r3, r2, r3, lsl #1
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8004e1a:	7ba2      	ldrb	r2, [r4, #14]
 8004e1c:	3a30      	subs	r2, #48	; 0x30
 8004e1e:	3930      	subs	r1, #48	; 0x30
 8004e20:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004e24:	eb01 0242 	add.w	r2, r1, r2, lsl #1
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8004e28:	7ca1      	ldrb	r1, [r4, #18]
 8004e2a:	3930      	subs	r1, #48	; 0x30
 8004e2c:	3830      	subs	r0, #48	; 0x30
 8004e2e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004e32:	eb00 0141 	add.w	r1, r0, r1, lsl #1
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8004e36:	7de0      	ldrb	r0, [r4, #23]
 8004e38:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 8004e3c:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8004e40:	3830      	subs	r0, #48	; 0x30
 8004e42:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 8004e46:	f8df a294 	ldr.w	sl, [pc, #660]	; 80050dc <CDC_Itf_Receive+0x334>
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8004e4a:	fa5f fc8c 	uxtb.w	ip, ip
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8004e4e:	fa5f fe8e 	uxtb.w	lr, lr
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8004e52:	b2db      	uxtb	r3, r3
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8004e54:	b2d2      	uxtb	r2, r2
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8004e56:	b2c9      	uxtb	r1, r1
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8004e58:	b2c0      	uxtb	r0, r0
RTC_S =(TempUserBuffer[2]-'0')* 10 + (TempUserBuffer[3]-'0');
 8004e5a:	f887 c000 	strb.w	ip, [r7]
RTC_Mi =(TempUserBuffer[6]-'0')* 10 + (TempUserBuffer[7]-'0');
 8004e5e:	f886 e000 	strb.w	lr, [r6]
RTC_H =(TempUserBuffer[10]-'0')* 10 + (TempUserBuffer[11]-'0');
 8004e62:	f88b 3000 	strb.w	r3, [fp]
RTC_D =(TempUserBuffer[14]-'0')* 10 + (TempUserBuffer[15]-'0');
 8004e66:	f889 2000 	strb.w	r2, [r9]
RTC_Mo =(TempUserBuffer[18]-'0')* 10 + (TempUserBuffer[19]-'0');
 8004e6a:	f888 1000 	strb.w	r1, [r8]
RTC_Y =(TempUserBuffer[22]-'0')* 10 + (TempUserBuffer[23]-'0');
 8004e6e:	f88a 0000 	strb.w	r0, [sl]
Set_RTC_Calendar(RTC_Y, RTC_Mo , RTC_D, RTC_H, RTC_Mi, RTC_S);  // Set Device RTC with received Values
 8004e72:	f8cd c004 	str.w	ip, [sp, #4]
 8004e76:	f8cd e000 	str.w	lr, [sp]
 8004e7a:	f7fd fdab 	bl	80029d4 <Set_RTC_Calendar>
UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Timestamp Received :%d:%d:%d_%d/%d/%d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);//
 8004e7e:	f89a 2000 	ldrb.w	r2, [sl]
 8004e82:	f89b 3000 	ldrb.w	r3, [fp]
 8004e86:	9204      	str	r2, [sp, #16]
 8004e88:	f899 2000 	ldrb.w	r2, [r9]
 8004e8c:	9203      	str	r2, [sp, #12]
 8004e8e:	f898 2000 	ldrb.w	r2, [r8]
 8004e92:	9202      	str	r2, [sp, #8]
 8004e94:	783a      	ldrb	r2, [r7, #0]
 8004e96:	f8df b250 	ldr.w	fp, [pc, #592]	; 80050e8 <CDC_Itf_Receive+0x340>
 8004e9a:	9201      	str	r2, [sp, #4]
 8004e9c:	7832      	ldrb	r2, [r6, #0]
 8004e9e:	9200      	str	r2, [sp, #0]
 8004ea0:	4988      	ldr	r1, [pc, #544]	; (80050c4 <CDC_Itf_Receive+0x31c>)
 8004ea2:	4a89      	ldr	r2, [pc, #548]	; (80050c8 <CDC_Itf_Receive+0x320>)
 8004ea4:	4658      	mov	r0, fp
 8004ea6:	f006 fb8b 	bl	800b5c0 <siprintf>
 8004eaa:	4a88      	ldr	r2, [pc, #544]	; (80050cc <CDC_Itf_Receive+0x324>)
 8004eac:	4603      	mov	r3, r0
 8004eae:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004eb0:	4887      	ldr	r0, [pc, #540]	; (80050d0 <CDC_Itf_Receive+0x328>)
 8004eb2:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8004ebc:	f8c2 b208 	str.w	fp, [r2, #520]	; 0x208
USBD_CDC_TransmitPacket(&USBD_Device);//
 8004ec0:	f7ff ff47 	bl	8004d52 <USBD_CDC_TransmitPacket>
TempUserBuffer[0] = 0;        // Clear 1st Character to avoid code conflict
 8004ec4:	2300      	movs	r3, #0
USB_Mode = 1;                 // USB VCP Mode in next USB connectivity
 8004ec6:	4a83      	ldr	r2, [pc, #524]	; (80050d4 <CDC_Itf_Receive+0x32c>)
TempUserBuffer[0] = 0;        // Clear 1st Character to avoid code conflict
 8004ec8:	7023      	strb	r3, [r4, #0]
USB_Mode = 1;                 // USB VCP Mode in next USB connectivity
 8004eca:	2301      	movs	r3, #1
 8004ecc:	7013      	strb	r3, [r2, #0]
Logstart_Create=1;
 8004ece:	4a82      	ldr	r2, [pc, #520]	; (80050d8 <CDC_Itf_Receive+0x330>)
	*LP_Ram_Key_Address = 0;
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	e011      	b.n	8004ef8 <CDC_Itf_Receive+0x150>
TempUserBuffer[BuffLength] = Buf[i];
 8004ed4:	682b      	ldr	r3, [r5, #0]
 8004ed6:	f812 6b01 	ldrb.w	r6, [r2], #1
 8004eda:	54e6      	strb	r6, [r4, r3]
BuffLength++;
 8004edc:	3301      	adds	r3, #1
 8004ede:	602b      	str	r3, [r5, #0]
 8004ee0:	e76a      	b.n	8004db8 <CDC_Itf_Receive+0x10>
else if (TempUserBuffer[0] == 'o')   // Turn off All LED
 8004ee2:	2b6f      	cmp	r3, #111	; 0x6f
 8004ee4:	f04f 0600 	mov.w	r6, #0
 8004ee8:	d114      	bne.n	8004f14 <CDC_Itf_Receive+0x16c>
RED_LED_OFF();
 8004eea:	f7fc fbf3 	bl	80016d4 <RED_LED_OFF>
GREEN_LED_OFF();
 8004eee:	f7fc fbf2 	bl	80016d6 <GREEN_LED_OFF>
BLUE_LED_OFF();
 8004ef2:	f7fc fbcb 	bl	800168c <BLUE_LED_OFF>
TempUserBuffer[0] = 0;         // Clear 1st Character to avoid code conflict
 8004ef6:	7026      	strb	r6, [r4, #0]
for (i = 0; i < BuffLength; i++) // Buffer Empty
 8004ef8:	2300      	movs	r3, #0
 8004efa:	682a      	ldr	r2, [r5, #0]
TempUserBuffer[i] = 0;//
 8004efc:	496e      	ldr	r1, [pc, #440]	; (80050b8 <CDC_Itf_Receive+0x310>)
 8004efe:	4618      	mov	r0, r3
for (i = 0; i < BuffLength; i++) // Buffer Empty
 8004f00:	4293      	cmp	r3, r2
 8004f02:	f040 8154 	bne.w	80051ae <CDC_Itf_Receive+0x406>
USBD_CDC_ReceivePacket(&USBD_Device);   // Ready for Next packet receive
 8004f06:	4872      	ldr	r0, [pc, #456]	; (80050d0 <CDC_Itf_Receive+0x328>)
 8004f08:	f7ff ff3a 	bl	8004d80 <USBD_CDC_ReceivePacket>
}
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	b007      	add	sp, #28
 8004f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
else if (TempUserBuffer[0] == 'B')   // Turn on BLUE LED
 8004f14:	2b42      	cmp	r3, #66	; 0x42
 8004f16:	d102      	bne.n	8004f1e <CDC_Itf_Receive+0x176>
BLUE_LED_ONLY();
 8004f18:	f7fc fbec 	bl	80016f4 <BLUE_LED_ONLY>
 8004f1c:	e7eb      	b.n	8004ef6 <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'b')  // Turn off BLUE LED
 8004f1e:	2b62      	cmp	r3, #98	; 0x62
 8004f20:	d104      	bne.n	8004f2c <CDC_Itf_Receive+0x184>
ALL_LED_OFF();
 8004f22:	f7fc fbbb 	bl	800169c <ALL_LED_OFF>
	TempUserBuffer[0] = 0;       // Clear 1st Character to avoid code conflict
 8004f26:	2300      	movs	r3, #0
 8004f28:	7023      	strb	r3, [r4, #0]
 8004f2a:	e7e5      	b.n	8004ef8 <CDC_Itf_Receive+0x150>
else if (TempUserBuffer[0] == 'E')  // Turn on Green LED
 8004f2c:	2b45      	cmp	r3, #69	; 0x45
 8004f2e:	d102      	bne.n	8004f36 <CDC_Itf_Receive+0x18e>
GREEN_LED_ONLY();
 8004f30:	f7fc fbc2 	bl	80016b8 <GREEN_LED_ONLY>
 8004f34:	e7df      	b.n	8004ef6 <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'e')  // Turn off Green LED
 8004f36:	2b65      	cmp	r3, #101	; 0x65
 8004f38:	d0f3      	beq.n	8004f22 <CDC_Itf_Receive+0x17a>
else if (TempUserBuffer[0] == 'F')  // Turn on RED LED
 8004f3a:	2b46      	cmp	r3, #70	; 0x46
 8004f3c:	d102      	bne.n	8004f44 <CDC_Itf_Receive+0x19c>
RED_LED_ONLY();
 8004f3e:	f7fc fbcb 	bl	80016d8 <RED_LED_ONLY>
 8004f42:	e7d8      	b.n	8004ef6 <CDC_Itf_Receive+0x14e>
else if (TempUserBuffer[0] == 'f')  // Turn off RED LED
 8004f44:	2b66      	cmp	r3, #102	; 0x66
 8004f46:	d0ec      	beq.n	8004f22 <CDC_Itf_Receive+0x17a>
else if (TempUserBuffer[0] == 'l')  // Turn on White LED
 8004f48:	2b6c      	cmp	r3, #108	; 0x6c
 8004f4a:	d102      	bne.n	8004f52 <CDC_Itf_Receive+0x1aa>
ALL_LED_ON();
 8004f4c:	f7fc fbfc 	bl	8001748 <ALL_LED_ON>
 8004f50:	e7e9      	b.n	8004f26 <CDC_Itf_Receive+0x17e>
else if (TempUserBuffer[0] == 'r')   // Read Device RTC Timestamp
 8004f52:	2b72      	cmp	r3, #114	; 0x72
 8004f54:	f040 8086 	bne.w	8005064 <CDC_Itf_Receive+0x2bc>
	RTC_H = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8004f58:	f7ff feda 	bl	8004d10 <LL_RTC_TIME_GetHour.constprop.7>
 8004f5c:	4606      	mov	r6, r0
 8004f5e:	f7ff fed7 	bl	8004d10 <LL_RTC_TIME_GetHour.constprop.7>
 8004f62:	f3c6 1303 	ubfx	r3, r6, #4, #4
 8004f66:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8005104 <CDC_Itf_Receive+0x35c>
	RTC_Mi = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8004f6a:	4e55      	ldr	r6, [pc, #340]	; (80050c0 <CDC_Itf_Receive+0x318>)
	RTC_H = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC));
 8004f6c:	f000 000f 	and.w	r0, r0, #15
 8004f70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f74:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004f78:	f88a 3000 	strb.w	r3, [sl]
	RTC_Mi = __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC));
 8004f7c:	f7ff feae 	bl	8004cdc <LL_RTC_TIME_GetMinute.constprop.6>
 8004f80:	4607      	mov	r7, r0
 8004f82:	f7ff feab 	bl	8004cdc <LL_RTC_TIME_GetMinute.constprop.6>
 8004f86:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8004f8a:	f000 000f 	and.w	r0, r0, #15
 8004f8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f92:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004f96:	7033      	strb	r3, [r6, #0]
	RTC_S =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8004f98:	f7ff fe88 	bl	8004cac <LL_RTC_TIME_GetSecond.constprop.5>
 8004f9c:	4680      	mov	r8, r0
 8004f9e:	f7ff fe85 	bl	8004cac <LL_RTC_TIME_GetSecond.constprop.5>
 8004fa2:	f3c8 1303 	ubfx	r3, r8, #4, #4
 8004fa6:	4f45      	ldr	r7, [pc, #276]	; (80050bc <CDC_Itf_Receive+0x314>)
	RTC_Mo =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 8004fa8:	f8df 8160 	ldr.w	r8, [pc, #352]	; 800510c <CDC_Itf_Receive+0x364>
	RTC_S =  __RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC));
 8004fac:	f000 000f 	and.w	r0, r0, #15
 8004fb0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004fb4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004fb8:	703b      	strb	r3, [r7, #0]
	RTC_Mo =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC));
 8004fba:	f7ff fe43 	bl	8004c44 <LL_RTC_DATE_GetMonth.constprop.3>
 8004fbe:	4681      	mov	r9, r0
 8004fc0:	f7ff fe40 	bl	8004c44 <LL_RTC_DATE_GetMonth.constprop.3>
 8004fc4:	f3c9 1303 	ubfx	r3, r9, #4, #4
 8004fc8:	f000 000f 	and.w	r0, r0, #15
 8004fcc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004fd0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004fd4:	f888 3000 	strb.w	r3, [r8]
	RTC_D = __RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC));
 8004fd8:	f7ff fe1c 	bl	8004c14 <LL_RTC_DATE_GetDay.constprop.2>
 8004fdc:	4683      	mov	fp, r0
 8004fde:	f7ff fe19 	bl	8004c14 <LL_RTC_DATE_GetDay.constprop.2>
 8004fe2:	f3cb 1303 	ubfx	r3, fp, #4, #4
 8004fe6:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8005108 <CDC_Itf_Receive+0x360>
 8004fea:	f000 000f 	and.w	r0, r0, #15
 8004fee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ff2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004ff6:	f889 3000 	strb.w	r3, [r9]
	RTC_Y =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 8004ffa:	f7ff fe3d 	bl	8004c78 <LL_RTC_DATE_GetYear.constprop.4>
 8004ffe:	4683      	mov	fp, r0
 8005000:	f7ff fe3a 	bl	8004c78 <LL_RTC_DATE_GetYear.constprop.4>
 8005004:	f3cb 1303 	ubfx	r3, fp, #4, #4
 8005008:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800500c:	f000 000f 	and.w	r0, r0, #15
 8005010:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8005014:	4b31      	ldr	r3, [pc, #196]	; (80050dc <CDC_Itf_Receive+0x334>)
		UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\nCurrent Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);
 8005016:	4932      	ldr	r1, [pc, #200]	; (80050e0 <CDC_Itf_Receive+0x338>)
	RTC_Y =__RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC));
 8005018:	b2c0      	uxtb	r0, r0
 800501a:	7018      	strb	r0, [r3, #0]
	(void)RTC->DR;
 800501c:	4b31      	ldr	r3, [pc, #196]	; (80050e4 <CDC_Itf_Receive+0x33c>)
 800501e:	685a      	ldr	r2, [r3, #4]
	(void)RTC->TR;
 8005020:	681b      	ldr	r3, [r3, #0]
		UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\nCurrent Device Time: %2d:%2d:%2d_%2d/%2d/%2d.\r\n\r\n",software_vr,RTC_H,RTC_Mi,RTC_S,RTC_Mo,RTC_D,RTC_Y);
 8005022:	f89a 3000 	ldrb.w	r3, [sl]
 8005026:	9004      	str	r0, [sp, #16]
 8005028:	f899 2000 	ldrb.w	r2, [r9]
 800502c:	9203      	str	r2, [sp, #12]
 800502e:	f898 2000 	ldrb.w	r2, [r8]
 8005032:	9202      	str	r2, [sp, #8]
 8005034:	783a      	ldrb	r2, [r7, #0]
 8005036:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80050e8 <CDC_Itf_Receive+0x340>
 800503a:	9201      	str	r2, [sp, #4]
 800503c:	7832      	ldrb	r2, [r6, #0]
 800503e:	9200      	str	r2, [sp, #0]
 8005040:	4650      	mov	r0, sl
 8005042:	4a21      	ldr	r2, [pc, #132]	; (80050c8 <CDC_Itf_Receive+0x320>)
 8005044:	f006 fabc 	bl	800b5c0 <siprintf>
 8005048:	4a20      	ldr	r2, [pc, #128]	; (80050cc <CDC_Itf_Receive+0x324>)
 800504a:	4603      	mov	r3, r0
 800504c:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800504e:	4820      	ldr	r0, [pc, #128]	; (80050d0 <CDC_Itf_Receive+0x328>)
 8005050:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8005054:	b2db      	uxtb	r3, r3
  hcdc->TxBuffer = pbuff;
 8005056:	f8c2 a208 	str.w	sl, [r2, #520]	; 0x208
  hcdc->TxLength = length;
 800505a:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
	USBD_CDC_TransmitPacket(&USBD_Device);//
 800505e:	f7ff fe78 	bl	8004d52 <USBD_CDC_TransmitPacket>
 8005062:	e760      	b.n	8004f26 <CDC_Itf_Receive+0x17e>
else if (TempUserBuffer[0] == 'U')    // USB MSC in next USB connectivity
 8005064:	2b55      	cmp	r3, #85	; 0x55
 8005066:	d153      	bne.n	8005110 <CDC_Itf_Receive+0x368>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n Return to USB MSC Mode after USB reconnect..\r\n\r\n",software_vr);
 8005068:	4e1f      	ldr	r6, [pc, #124]	; (80050e8 <CDC_Itf_Receive+0x340>)
 800506a:	4920      	ldr	r1, [pc, #128]	; (80050ec <CDC_Itf_Receive+0x344>)
 800506c:	4a16      	ldr	r2, [pc, #88]	; (80050c8 <CDC_Itf_Receive+0x320>)
 800506e:	4630      	mov	r0, r6
 8005070:	f006 faa6 	bl	800b5c0 <siprintf>
 8005074:	4a15      	ldr	r2, [pc, #84]	; (80050cc <CDC_Itf_Receive+0x324>)
 8005076:	4603      	mov	r3, r0
 8005078:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800507a:	4815      	ldr	r0, [pc, #84]	; (80050d0 <CDC_Itf_Receive+0x328>)
 800507c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8005086:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);//
 800508a:	f7ff fe62 	bl	8004d52 <USBD_CDC_TransmitPacket>
	USB_Mode = 1;                    // USB MSC Mode
 800508e:	4911      	ldr	r1, [pc, #68]	; (80050d4 <CDC_Itf_Receive+0x32c>)
 8005090:	2201      	movs	r2, #1
 8005092:	700a      	strb	r2, [r1, #0]
	Logstart_Delete=1;
 8005094:	4916      	ldr	r1, [pc, #88]	; (80050f0 <CDC_Itf_Receive+0x348>)
 8005096:	600a      	str	r2, [r1, #0]
	EnterReset_Create=0;
 8005098:	4916      	ldr	r1, [pc, #88]	; (80050f4 <CDC_Itf_Receive+0x34c>)
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 800509a:	2300      	movs	r3, #0
	EnterReset_Create=0;
 800509c:	600b      	str	r3, [r1, #0]
	EnterDFU_Create=0;
 800509e:	4916      	ldr	r1, [pc, #88]	; (80050f8 <CDC_Itf_Receive+0x350>)
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 80050a0:	7023      	strb	r3, [r4, #0]
	EnterDFU_Create=0;
 80050a2:	600b      	str	r3, [r1, #0]
	Logstart_Create=1;
 80050a4:	490c      	ldr	r1, [pc, #48]	; (80050d8 <CDC_Itf_Receive+0x330>)
 80050a6:	600a      	str	r2, [r1, #0]
	 VCP_Bypass=1;
 80050a8:	4914      	ldr	r1, [pc, #80]	; (80050fc <CDC_Itf_Receive+0x354>)
 80050aa:	700a      	strb	r2, [r1, #0]
	 Data_log_Start_Resume = 0;
 80050ac:	4a14      	ldr	r2, [pc, #80]	; (8005100 <CDC_Itf_Receive+0x358>)
 80050ae:	7013      	strb	r3, [r2, #0]
 80050b0:	e722      	b.n	8004ef8 <CDC_Itf_Receive+0x150>
 80050b2:	bf00      	nop
 80050b4:	20009714 	.word	0x20009714
 80050b8:	2000ac2c 	.word	0x2000ac2c
 80050bc:	2000abe4 	.word	0x2000abe4
 80050c0:	2000abe5 	.word	0x2000abe5
 80050c4:	0800cd56 	.word	0x0800cd56
 80050c8:	0002c314 	.word	0x0002c314
 80050cc:	2000abe6 	.word	0x2000abe6
 80050d0:	20008988 	.word	0x20008988
 80050d4:	20009238 	.word	0x20009238
 80050d8:	20009788 	.word	0x20009788
 80050dc:	200097f0 	.word	0x200097f0
 80050e0:	0800cd92 	.word	0x0800cd92
 80050e4:	40002800 	.word	0x40002800
 80050e8:	20009ffc 	.word	0x20009ffc
 80050ec:	0800cdd7 	.word	0x0800cdd7
 80050f0:	2000970c 	.word	0x2000970c
 80050f4:	20009ff8 	.word	0x20009ff8
 80050f8:	2000abe8 	.word	0x2000abe8
 80050fc:	20008d15 	.word	0x20008d15
 8005100:	20008979 	.word	0x20008979
 8005104:	20009710 	.word	0x20009710
 8005108:	2000abec 	.word	0x2000abec
 800510c:	20009708 	.word	0x20009708
else if (TempUserBuffer[0] == 'Z')    // Reset Device
 8005110:	2b5a      	cmp	r3, #90	; 0x5a
 8005112:	d118      	bne.n	8005146 <CDC_Itf_Receive+0x39e>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to reset AIM device..\r\n",software_vr);
 8005114:	4e27      	ldr	r6, [pc, #156]	; (80051b4 <CDC_Itf_Receive+0x40c>)
 8005116:	4a28      	ldr	r2, [pc, #160]	; (80051b8 <CDC_Itf_Receive+0x410>)
 8005118:	4928      	ldr	r1, [pc, #160]	; (80051bc <CDC_Itf_Receive+0x414>)
 800511a:	4630      	mov	r0, r6
 800511c:	f006 fa50 	bl	800b5c0 <siprintf>
 8005120:	4a27      	ldr	r2, [pc, #156]	; (80051c0 <CDC_Itf_Receive+0x418>)
 8005122:	4603      	mov	r3, r0
 8005124:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005126:	4827      	ldr	r0, [pc, #156]	; (80051c4 <CDC_Itf_Receive+0x41c>)
 8005128:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 800512c:	b2db      	uxtb	r3, r3
 800512e:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8005132:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 8005136:	f7ff fe0c 	bl	8004d52 <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;            // Clear 1st Character to avoid code conflict
 800513a:	2300      	movs	r3, #0
 800513c:	7023      	strb	r3, [r4, #0]
	EnterReset_Create=1;
 800513e:	4b22      	ldr	r3, [pc, #136]	; (80051c8 <CDC_Itf_Receive+0x420>)
 8005140:	2201      	movs	r2, #1
	EnterDFU_Create=1;
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	e6d8      	b.n	8004ef8 <CDC_Itf_Receive+0x150>
else if (TempUserBuffer[0] == 'X')     // Enter DFU mode for firmware Update
 8005146:	2b58      	cmp	r3, #88	; 0x58
 8005148:	d117      	bne.n	800517a <CDC_Itf_Receive+0x3d2>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d Disconnect USB cable to enter Firmware update Mode..\r\n",software_vr);
 800514a:	4e1a      	ldr	r6, [pc, #104]	; (80051b4 <CDC_Itf_Receive+0x40c>)
 800514c:	4a1a      	ldr	r2, [pc, #104]	; (80051b8 <CDC_Itf_Receive+0x410>)
 800514e:	491f      	ldr	r1, [pc, #124]	; (80051cc <CDC_Itf_Receive+0x424>)
 8005150:	4630      	mov	r0, r6
 8005152:	f006 fa35 	bl	800b5c0 <siprintf>
 8005156:	4a1a      	ldr	r2, [pc, #104]	; (80051c0 <CDC_Itf_Receive+0x418>)
 8005158:	4603      	mov	r3, r0
 800515a:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800515c:	4819      	ldr	r0, [pc, #100]	; (80051c4 <CDC_Itf_Receive+0x41c>)
 800515e:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8005162:	b2db      	uxtb	r3, r3
 8005164:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 8005168:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 800516c:	f7ff fdf1 	bl	8004d52 <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 8005170:	2300      	movs	r3, #0
 8005172:	7023      	strb	r3, [r4, #0]
	EnterDFU_Create=1;
 8005174:	2201      	movs	r2, #1
 8005176:	4b16      	ldr	r3, [pc, #88]	; (80051d0 <CDC_Itf_Receive+0x428>)
 8005178:	e7e3      	b.n	8005142 <CDC_Itf_Receive+0x39a>
else if (TempUserBuffer[0] == 'Y')     // Enter DFU mode for firmware Update
 800517a:	2b59      	cmp	r3, #89	; 0x59
 800517c:	f47f aebc 	bne.w	8004ef8 <CDC_Itf_Receive+0x150>
	UserBufferSize=sprintf((char*)UserBuffer,"Pros_code_vr: %d \r\n LP_RAM reset..\r\n",software_vr);
 8005180:	4e0c      	ldr	r6, [pc, #48]	; (80051b4 <CDC_Itf_Receive+0x40c>)
 8005182:	4a0d      	ldr	r2, [pc, #52]	; (80051b8 <CDC_Itf_Receive+0x410>)
 8005184:	4913      	ldr	r1, [pc, #76]	; (80051d4 <CDC_Itf_Receive+0x42c>)
 8005186:	4630      	mov	r0, r6
 8005188:	f006 fa1a 	bl	800b5c0 <siprintf>
 800518c:	4a0c      	ldr	r2, [pc, #48]	; (80051c0 <CDC_Itf_Receive+0x418>)
 800518e:	4603      	mov	r3, r0
 8005190:	7010      	strb	r0, [r2, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005192:	480c      	ldr	r0, [pc, #48]	; (80051c4 <CDC_Itf_Receive+0x41c>)
 8005194:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hcdc->TxLength = length;
 8005198:	b2db      	uxtb	r3, r3
 800519a:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
  hcdc->TxBuffer = pbuff;
 800519e:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
	USBD_CDC_TransmitPacket(&USBD_Device);
 80051a2:	f7ff fdd6 	bl	8004d52 <USBD_CDC_TransmitPacket>
	TempUserBuffer[0] = 0;                     // Clear 1st Character to avoid code conflict
 80051a6:	2300      	movs	r3, #0
 80051a8:	7023      	strb	r3, [r4, #0]
	*LP_Ram_Key_Address = 0;
 80051aa:	4a0b      	ldr	r2, [pc, #44]	; (80051d8 <CDC_Itf_Receive+0x430>)
 80051ac:	e690      	b.n	8004ed0 <CDC_Itf_Receive+0x128>
TempUserBuffer[i] = 0;//
 80051ae:	5458      	strb	r0, [r3, r1]
for (i = 0; i < BuffLength; i++) // Buffer Empty
 80051b0:	3301      	adds	r3, #1
 80051b2:	e6a5      	b.n	8004f00 <CDC_Itf_Receive+0x158>
 80051b4:	20009ffc 	.word	0x20009ffc
 80051b8:	0002c314 	.word	0x0002c314
 80051bc:	0800ce1c 	.word	0x0800ce1c
 80051c0:	2000abe6 	.word	0x2000abe6
 80051c4:	20008988 	.word	0x20008988
 80051c8:	20009ff8 	.word	0x20009ff8
 80051cc:	0800ce5a 	.word	0x0800ce5a
 80051d0:	2000abe8 	.word	0x2000abe8
 80051d4:	0800cea2 	.word	0x0800cea2
 80051d8:	20017cf0 	.word	0x20017cf0

080051dc <Reboot_Handler>:
    .section	.text.Reboot_Handler
	//.weak	Reboot_Handler
	.type	Reboot_Handler, %function
Reboot_Handler:

               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 80051dc:	4805      	ldr	r0, [pc, #20]	; (80051f4 <Reboot_Handler+0x18>)
                LDR     R1, =0x00000001 // ENABLE SYSCFG CLOCK
 80051de:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 80051e0:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 80051e2:	4805      	ldr	r0, [pc, #20]	; (80051f8 <Reboot_Handler+0x1c>)
                LDR     R1, =0x00000001 // MAP ROM AT ZERO
 80051e4:	2101      	movs	r1, #1
                STR     R1, [R0, #0]
 80051e6:	6001      	str	r1, [r0, #0]
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 80051e8:	4804      	ldr	r0, [pc, #16]	; (80051fc <Reboot_Handler+0x20>)
                LDR     SP,[R0, #0]     // SP @ +0
 80051ea:	f8d0 d000 	ldr.w	sp, [r0]
                LDR     R0,[R0, #4]    //  PC @ +4
 80051ee:	6840      	ldr	r0, [r0, #4]
                BX      R0
 80051f0:	4700      	bx	r0
 80051f2:	0000      	.short	0x0000
               	LDR     R0, =0x40021060 // RCC_APB2ENR Address 0x40021000 (Base)+60 (offset)
 80051f4:	40021060 	.word	0x40021060
                LDR     R0, =0x40010000 // SYSCFG_MEMRMP
 80051f8:	40010000 	.word	0x40010000
                LDR     R0, =0x1FFF0000 // ROM BASE of L1
 80051fc:	1fff0000 	.word	0x1fff0000

08005200 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 8005200:	4811      	ldr	r0, [pc, #68]	; (8005248 <LoopForever+0x4>)
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 8005202:	4912      	ldr	r1, [pc, #72]	; (800524c <LoopForever+0x8>)
                LDR     R2, [R0, #0]
 8005204:	6802      	ldr	r2, [r0, #0]
                STR     R0, [R0, #0]     // Invalidate Bootloader_Key_Value
 8005206:	6000      	str	r0, [r0, #0]
                // zero data at Bootloader_Ram_Key_Address to avoid looping in DFU Mode

                CMP     R2, R1
 8005208:	428a      	cmp	r2, r1
                BEQ     Reboot_Handler    // Jump to DfuModeEntry Lable if Bootloader_Key_Value matches
 800520a:	f43f afe7 	beq.w	80051dc <Reboot_Handler>

                // Conitnue without entering DFU Mode


  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800520e:	f8df d040 	ldr.w	sp, [pc, #64]	; 8005250 <LoopForever+0xc>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005212:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005214:	e003      	b.n	800521e <LoopCopyDataInit>

08005216 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005216:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <LoopForever+0x10>)
	ldr	r3, [r3, r1]
 8005218:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800521a:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800521c:	3104      	adds	r1, #4

0800521e <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800521e:	480e      	ldr	r0, [pc, #56]	; (8005258 <LoopForever+0x14>)
	ldr	r3, =_edata
 8005220:	4b0e      	ldr	r3, [pc, #56]	; (800525c <LoopForever+0x18>)
	adds	r2, r0, r1
 8005222:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005224:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005226:	d3f6      	bcc.n	8005216 <CopyDataInit>
	ldr	r2, =_sbss
 8005228:	4a0d      	ldr	r2, [pc, #52]	; (8005260 <LoopForever+0x1c>)
	b	LoopFillZerobss
 800522a:	e002      	b.n	8005232 <LoopFillZerobss>

0800522c <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800522c:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800522e:	f842 3b04 	str.w	r3, [r2], #4

08005232 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005232:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <LoopForever+0x20>)
	cmp	r2, r3
 8005234:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005236:	d3f9      	bcc.n	800522c <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005238:	f7fe ffda 	bl	80041f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800523c:	f006 f8bc 	bl	800b3b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005240:	f7fc fd38 	bl	8001cb4 <main>

08005244 <LoopForever>:

LoopForever:
    b LoopForever
 8005244:	e7fe      	b.n	8005244 <LoopForever>
 8005246:	0000      	.short	0x0000
                LDR     R0, =0x20017FF0  // End Address of SRAM1 (STM32L4) --Bootloader_Ram_Key_Address
 8005248:	20017ff0 	.word	0x20017ff0
                LDR     R1, =0xDEADBEEF  // Bootloader_Key_Value
 800524c:	deadbeef 	.word	0xdeadbeef
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005250:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005254:	0800d1a8 	.word	0x0800d1a8
	ldr	r0, =_sdata
 8005258:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800525c:	20000478 	.word	0x20000478
	ldr	r2, =_sbss
 8005260:	20000478 	.word	0x20000478
	ldr	r3, = _ebss
 8005264:	2000b01c 	.word	0x2000b01c

08005268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005268:	e7fe      	b.n	8005268 <ADC1_2_IRQHandler>
	...

0800526c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800526c:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800526e:	4b08      	ldr	r3, [pc, #32]	; (8005290 <HAL_InitTick+0x24>)
{
 8005270:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8005272:	6818      	ldr	r0, [r3, #0]
 8005274:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005278:	fbb0 f0f3 	udiv	r0, r0, r3
 800527c:	f000 f892 	bl	80053a4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8005280:	2200      	movs	r2, #0
 8005282:	4621      	mov	r1, r4
 8005284:	f04f 30ff 	mov.w	r0, #4294967295
 8005288:	f000 f84c 	bl	8005324 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800528c:	2000      	movs	r0, #0
 800528e:	bd10      	pop	{r4, pc}
 8005290:	2000000c 	.word	0x2000000c

08005294 <HAL_Init>:
{
 8005294:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005296:	2003      	movs	r0, #3
 8005298:	f000 f832 	bl	8005300 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800529c:	2000      	movs	r0, #0
 800529e:	f7ff ffe5 	bl	800526c <HAL_InitTick>
  HAL_MspInit();
 80052a2:	f7fe ff07 	bl	80040b4 <HAL_MspInit>
}
 80052a6:	2000      	movs	r0, #0
 80052a8:	bd08      	pop	{r3, pc}
	...

080052ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80052ac:	4a02      	ldr	r2, [pc, #8]	; (80052b8 <HAL_IncTick+0xc>)
 80052ae:	6813      	ldr	r3, [r2, #0]
 80052b0:	3301      	adds	r3, #1
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	2000b014 	.word	0x2000b014

080052bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80052bc:	4b01      	ldr	r3, [pc, #4]	; (80052c4 <HAL_GetTick+0x8>)
 80052be:	6818      	ldr	r0, [r3, #0]
}
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	2000b014 	.word	0x2000b014

080052c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052c8:	b538      	push	{r3, r4, r5, lr}
 80052ca:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80052cc:	f7ff fff6 	bl	80052bc <HAL_GetTick>
 80052d0:	4605      	mov	r5, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80052d2:	f7ff fff3 	bl	80052bc <HAL_GetTick>
 80052d6:	1b40      	subs	r0, r0, r5
 80052d8:	42a0      	cmp	r0, r4
 80052da:	d3fa      	bcc.n	80052d2 <HAL_Delay+0xa>
  {
  }
}
 80052dc:	bd38      	pop	{r3, r4, r5, pc}
	...

080052e0 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80052e0:	4a02      	ldr	r2, [pc, #8]	; (80052ec <HAL_SuspendTick+0xc>)
 80052e2:	6813      	ldr	r3, [r2, #0]
 80052e4:	f023 0302 	bic.w	r3, r3, #2
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	4770      	bx	lr
 80052ec:	e000e010 	.word	0xe000e010

080052f0 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80052f0:	4a02      	ldr	r2, [pc, #8]	; (80052fc <HAL_ResumeTick+0xc>)
 80052f2:	6813      	ldr	r3, [r2, #0]
 80052f4:	f043 0302 	orr.w	r3, r3, #2
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	4770      	bx	lr
 80052fc:	e000e010 	.word	0xe000e010

08005300 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005300:	4a07      	ldr	r2, [pc, #28]	; (8005320 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005302:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005304:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005308:	041b      	lsls	r3, r3, #16
 800530a:	0c1b      	lsrs	r3, r3, #16
 800530c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8005310:	0200      	lsls	r0, r0, #8
 8005312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005316:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800531a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800531c:	60d3      	str	r3, [r2, #12]
 800531e:	4770      	bx	lr
 8005320:	e000ed00 	.word	0xe000ed00

08005324 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005324:	4b17      	ldr	r3, [pc, #92]	; (8005384 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005326:	b530      	push	{r4, r5, lr}
 8005328:	68dc      	ldr	r4, [r3, #12]
 800532a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800532e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005332:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005334:	2b04      	cmp	r3, #4
 8005336:	bf28      	it	cs
 8005338:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800533a:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800533c:	f04f 0501 	mov.w	r5, #1
 8005340:	fa05 f303 	lsl.w	r3, r5, r3
 8005344:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005348:	bf8c      	ite	hi
 800534a:	3c03      	subhi	r4, #3
 800534c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800534e:	4019      	ands	r1, r3
 8005350:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005352:	fa05 f404 	lsl.w	r4, r5, r4
 8005356:	3c01      	subs	r4, #1
 8005358:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800535a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800535c:	ea42 0201 	orr.w	r2, r2, r1
 8005360:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005364:	bfaf      	iteee	ge
 8005366:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800536a:	f000 000f 	andlt.w	r0, r0, #15
 800536e:	4b06      	ldrlt	r3, [pc, #24]	; (8005388 <HAL_NVIC_SetPriority+0x64>)
 8005370:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005372:	bfa5      	ittet	ge
 8005374:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8005378:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800537a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800537c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8005380:	bd30      	pop	{r4, r5, pc}
 8005382:	bf00      	nop
 8005384:	e000ed00 	.word	0xe000ed00
 8005388:	e000ed14 	.word	0xe000ed14

0800538c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800538c:	0942      	lsrs	r2, r0, #5
 800538e:	2301      	movs	r3, #1
 8005390:	f000 001f 	and.w	r0, r0, #31
 8005394:	fa03 f000 	lsl.w	r0, r3, r0
 8005398:	4b01      	ldr	r3, [pc, #4]	; (80053a0 <HAL_NVIC_EnableIRQ+0x14>)
 800539a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800539e:	4770      	bx	lr
 80053a0:	e000e100 	.word	0xe000e100

080053a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053a4:	3801      	subs	r0, #1
 80053a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80053aa:	d20a      	bcs.n	80053c2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053ac:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ae:	4a07      	ldr	r2, [pc, #28]	; (80053cc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053b0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053b2:	21f0      	movs	r1, #240	; 0xf0
 80053b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053b8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053ba:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053bc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80053c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	e000e010 	.word	0xe000e010
 80053cc:	e000ed00 	.word	0xe000ed00

080053d0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80053d0:	4770      	bx	lr

080053d2 <HAL_SYSTICK_IRQHandler>:
{
 80053d2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80053d4:	f7ff fffc 	bl	80053d0 <HAL_SYSTICK_Callback>
 80053d8:	bd08      	pop	{r3, pc}
	...

080053dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053dc:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80053de:	2800      	cmp	r0, #0
 80053e0:	d05b      	beq.n	800549a <HAL_DMA_Init+0xbe>
  {
    assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
  }
  
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80053e2:	6801      	ldr	r1, [r0, #0]
 80053e4:	4b2e      	ldr	r3, [pc, #184]	; (80054a0 <HAL_DMA_Init+0xc4>)
 80053e6:	4299      	cmp	r1, r3
 80053e8:	f04f 0414 	mov.w	r4, #20
 80053ec:	d841      	bhi.n	8005472 <HAL_DMA_Init+0x96>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80053ee:	4a2d      	ldr	r2, [pc, #180]	; (80054a4 <HAL_DMA_Init+0xc8>)
 80053f0:	440a      	add	r2, r1
 80053f2:	fbb2 f2f4 	udiv	r2, r2, r4
 80053f6:	0092      	lsls	r2, r2, #2
 80053f8:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80053fa:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 80053fe:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005400:	2302      	movs	r3, #2
 8005402:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005406:	6884      	ldr	r4, [r0, #8]
 8005408:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800540a:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 800540c:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 800540e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005410:	432b      	orrs	r3, r5
 8005412:	6945      	ldr	r5, [r0, #20]
 8005414:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005416:	6985      	ldr	r5, [r0, #24]
 8005418:	432b      	orrs	r3, r5
 800541a:	69c5      	ldr	r5, [r0, #28]
 800541c:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800541e:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005420:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8005424:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8005428:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800542a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800542c:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8005430:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005432:	d011      	beq.n	8005458 <HAL_DMA_Init+0x7c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005434:	4b1c      	ldr	r3, [pc, #112]	; (80054a8 <HAL_DMA_Init+0xcc>)
 8005436:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005438:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800543a:	429a      	cmp	r2, r3
 800543c:	f04f 030f 	mov.w	r3, #15
 8005440:	d11f      	bne.n	8005482 <HAL_DMA_Init+0xa6>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 8005442:	491a      	ldr	r1, [pc, #104]	; (80054ac <HAL_DMA_Init+0xd0>)
 8005444:	680a      	ldr	r2, [r1, #0]
 8005446:	40a3      	lsls	r3, r4
 8005448:	ea22 0303 	bic.w	r3, r2, r3
 800544c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 800544e:	6842      	ldr	r2, [r0, #4]
 8005450:	680b      	ldr	r3, [r1, #0]
 8005452:	40a2      	lsls	r2, r4
 8005454:	431a      	orrs	r2, r3
 8005456:	600a      	str	r2, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
    }
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005458:	2300      	movs	r3, #0

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800545a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800545c:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 800545e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005460:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8005462:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8005464:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State  = HAL_DMA_STATE_READY;
 8005466:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800546a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  return HAL_OK;
 800546e:	4618      	mov	r0, r3
 8005470:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005472:	4b0f      	ldr	r3, [pc, #60]	; (80054b0 <HAL_DMA_Init+0xd4>)
 8005474:	440b      	add	r3, r1
 8005476:	fbb3 f3f4 	udiv	r3, r3, r4
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800547e:	4b0d      	ldr	r3, [pc, #52]	; (80054b4 <HAL_DMA_Init+0xd8>)
 8005480:	e7bd      	b.n	80053fe <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 8005482:	490d      	ldr	r1, [pc, #52]	; (80054b8 <HAL_DMA_Init+0xdc>)
 8005484:	680a      	ldr	r2, [r1, #0]
 8005486:	40a3      	lsls	r3, r4
 8005488:	ea22 0303 	bic.w	r3, r2, r3
 800548c:	600b      	str	r3, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 800548e:	6843      	ldr	r3, [r0, #4]
 8005490:	680a      	ldr	r2, [r1, #0]
 8005492:	40a3      	lsls	r3, r4
 8005494:	4313      	orrs	r3, r2
 8005496:	600b      	str	r3, [r1, #0]
 8005498:	e7de      	b.n	8005458 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 800549a:	2001      	movs	r0, #1
}
 800549c:	bd30      	pop	{r4, r5, pc}
 800549e:	bf00      	nop
 80054a0:	40020407 	.word	0x40020407
 80054a4:	bffdfff8 	.word	0xbffdfff8
 80054a8:	40020000 	.word	0x40020000
 80054ac:	400200a8 	.word	0x400200a8
 80054b0:	bffdfbf8 	.word	0xbffdfbf8
 80054b4:	40020400 	.word	0x40020400
 80054b8:	400204a8 	.word	0x400204a8

080054bc <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80054bc:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80054be:	2800      	cmp	r0, #0
 80054c0:	d034      	beq.n	800552c <HAL_DMA_DeInit+0x70>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80054c2:	6801      	ldr	r1, [r0, #0]
 80054c4:	680b      	ldr	r3, [r1, #0]
 80054c6:	f023 0301 	bic.w	r3, r3, #1
 80054ca:	600b      	str	r3, [r1, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 80054cc:	2300      	movs	r3, #0
 80054ce:	600b      	str	r3, [r1, #0]

  /* Calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80054d0:	4b17      	ldr	r3, [pc, #92]	; (8005530 <HAL_DMA_DeInit+0x74>)
 80054d2:	4299      	cmp	r1, r3
 80054d4:	f04f 0414 	mov.w	r4, #20
 80054d8:	d820      	bhi.n	800551c <HAL_DMA_DeInit+0x60>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80054da:	4a16      	ldr	r2, [pc, #88]	; (8005534 <HAL_DMA_DeInit+0x78>)
 80054dc:	440a      	add	r2, r1
 80054de:	fbb2 f2f4 	udiv	r2, r2, r4
 80054e2:	0092      	lsls	r2, r2, #2
 80054e4:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80054e6:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 80054ea:	6403      	str	r3, [r0, #64]	; 0x40
  }
  

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80054ec:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80054ee:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80054f0:	2301      	movs	r3, #1
 80054f2:	408b      	lsls	r3, r1
 80054f4:	6053      	str	r3, [r2, #4]

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 80054f6:	4b10      	ldr	r3, [pc, #64]	; (8005538 <HAL_DMA_DeInit+0x7c>)
 80054f8:	429a      	cmp	r2, r3
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 80054fa:	bf0c      	ite	eq
 80054fc:	4c0f      	ldreq	r4, [pc, #60]	; (800553c <HAL_DMA_DeInit+0x80>)
  }
  else  
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 80054fe:	4c10      	ldrne	r4, [pc, #64]	; (8005540 <HAL_DMA_DeInit+0x84>)
 8005500:	230f      	movs	r3, #15
 8005502:	6822      	ldr	r2, [r4, #0]
 8005504:	408b      	lsls	r3, r1
 8005506:	ea22 0303 	bic.w	r3, r2, r3
 800550a:	6023      	str	r3, [r4, #0]
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800550c:	2300      	movs	r3, #0
 800550e:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005510:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_RESET;
 8005514:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

  return HAL_OK;
 8005518:	4618      	mov	r0, r3
 800551a:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800551c:	4b09      	ldr	r3, [pc, #36]	; (8005544 <HAL_DMA_DeInit+0x88>)
 800551e:	440b      	add	r3, r1
 8005520:	fbb3 f3f4 	udiv	r3, r3, r4
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005528:	4b07      	ldr	r3, [pc, #28]	; (8005548 <HAL_DMA_DeInit+0x8c>)
 800552a:	e7de      	b.n	80054ea <HAL_DMA_DeInit+0x2e>
    return HAL_ERROR;
 800552c:	2001      	movs	r0, #1
}
 800552e:	bd10      	pop	{r4, pc}
 8005530:	40020407 	.word	0x40020407
 8005534:	bffdfff8 	.word	0xbffdfff8
 8005538:	40020000 	.word	0x40020000
 800553c:	400200a8 	.word	0x400200a8
 8005540:	400204a8 	.word	0x400204a8
 8005544:	bffdfbf8 	.word	0xbffdfbf8
 8005548:	40020400 	.word	0x40020400

0800554c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800554c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800554e:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8005552:	2c01      	cmp	r4, #1
 8005554:	d036      	beq.n	80055c4 <HAL_DMA_Start_IT+0x78>
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005556:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 800555a:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800555c:	b2ed      	uxtb	r5, r5
 800555e:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8005560:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8005564:	f04f 0600 	mov.w	r6, #0
 8005568:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 800556c:	d128      	bne.n	80055c0 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800556e:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005572:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005574:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8005576:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005578:	6c47      	ldr	r7, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 800557a:	f026 0601 	bic.w	r6, r6, #1
 800557e:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005580:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8005582:	40bd      	lsls	r5, r7
 8005584:	6075      	str	r5, [r6, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005586:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005588:	6883      	ldr	r3, [r0, #8]
 800558a:	6805      	ldr	r5, [r0, #0]
 800558c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 800558e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005590:	bf0b      	itete	eq
 8005592:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8005594:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005596:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8005598:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800559a:	b14b      	cbz	r3, 80055b0 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80055a2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	f043 0301 	orr.w	r3, r3, #1
 80055aa:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ac:	2000      	movs	r0, #0
 80055ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	f023 0304 	bic.w	r3, r3, #4
 80055b6:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	f043 030a 	orr.w	r3, r3, #10
 80055be:	e7f0      	b.n	80055a2 <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 80055c0:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 80055c4:	2002      	movs	r0, #2
}
 80055c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055c8 <HAL_DMA_Abort>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80055c8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d003      	beq.n	80055d8 <HAL_DMA_Abort+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055d0:	2304      	movs	r3, #4
 80055d2:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80055d4:	2001      	movs	r0, #1
 80055d6:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055d8:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80055da:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	f022 020e 	bic.w	r2, r2, #14
 80055e2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	f022 0201 	bic.w	r2, r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80055ec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80055ee:	2201      	movs	r2, #1
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);      
 80055f6:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 80055f8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);      
 80055fc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
 8005600:	4618      	mov	r0, r3
}
 8005602:	4770      	bx	lr

08005604 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005604:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005606:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8005608:	6803      	ldr	r3, [r0, #0]
{
 800560a:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800560c:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800560e:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005610:	2404      	movs	r4, #4
 8005612:	4094      	lsls	r4, r2
 8005614:	4226      	tst	r6, r4
 8005616:	d00e      	beq.n	8005636 <HAL_DMA_IRQHandler+0x32>
 8005618:	f015 0f04 	tst.w	r5, #4
 800561c:	d00b      	beq.n	8005636 <HAL_DMA_IRQHandler+0x32>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005622:	bf5e      	ittt	pl
 8005624:	681a      	ldrpl	r2, [r3, #0]
 8005626:	f022 0204 	bicpl.w	r2, r2, #4
 800562a:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 800562c:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 800562e:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8005630:	b373      	cbz	r3, 8005690 <HAL_DMA_IRQHandler+0x8c>
}
 8005632:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005634:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005636:	2402      	movs	r4, #2
 8005638:	4094      	lsls	r4, r2
 800563a:	4226      	tst	r6, r4
 800563c:	d012      	beq.n	8005664 <HAL_DMA_IRQHandler+0x60>
 800563e:	f015 0f02 	tst.w	r5, #2
 8005642:	d00f      	beq.n	8005664 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	0695      	lsls	r5, r2, #26
 8005648:	d406      	bmi.n	8005658 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	f022 020a 	bic.w	r2, r2, #10
 8005650:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005652:	2301      	movs	r3, #1
 8005654:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8005658:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 800565a:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 800565c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8005660:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005662:	e7e5      	b.n	8005630 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005664:	2408      	movs	r4, #8
 8005666:	4094      	lsls	r4, r2
 8005668:	4234      	tst	r4, r6
 800566a:	d011      	beq.n	8005690 <HAL_DMA_IRQHandler+0x8c>
 800566c:	072c      	lsls	r4, r5, #28
 800566e:	d50f      	bpl.n	8005690 <HAL_DMA_IRQHandler+0x8c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005670:	681c      	ldr	r4, [r3, #0]
 8005672:	f024 040e 	bic.w	r4, r4, #14
 8005676:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005678:	2301      	movs	r3, #1
 800567a:	fa03 f202 	lsl.w	r2, r3, r2
 800567e:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005680:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8005682:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8005686:	2300      	movs	r3, #0
 8005688:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 800568c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800568e:	e7cf      	b.n	8005630 <HAL_DMA_IRQHandler+0x2c>
}
 8005690:	bc70      	pop	{r4, r5, r6}
 8005692:	4770      	bx	lr

08005694 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005698:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800569a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800569c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005848 <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80056a0:	4c67      	ldr	r4, [pc, #412]	; (8005840 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 80056a2:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 80056a4:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80056a6:	9a01      	ldr	r2, [sp, #4]
 80056a8:	40da      	lsrs	r2, r3
 80056aa:	d102      	bne.n	80056b2 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 80056ac:	b005      	add	sp, #20
 80056ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80056b2:	2601      	movs	r6, #1
    if(iocurrent)
 80056b4:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80056b6:	409e      	lsls	r6, r3
    if(iocurrent)
 80056b8:	ea12 0e06 	ands.w	lr, r2, r6
 80056bc:	f000 80b1 	beq.w	8005822 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056c0:	684a      	ldr	r2, [r1, #4]
 80056c2:	f022 0710 	bic.w	r7, r2, #16
 80056c6:	2f02      	cmp	r7, #2
 80056c8:	d116      	bne.n	80056f8 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 80056ca:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80056ce:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80056d2:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80056d6:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80056da:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80056de:	f04f 0c0f 	mov.w	ip, #15
 80056e2:	fa0c fc0a 	lsl.w	ip, ip, sl
 80056e6:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80056ea:	690d      	ldr	r5, [r1, #16]
 80056ec:	fa05 f50a 	lsl.w	r5, r5, sl
 80056f0:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80056f4:	f8c9 5020 	str.w	r5, [r9, #32]
 80056f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80056fc:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80056fe:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8005702:	fa05 f50c 	lsl.w	r5, r5, ip
 8005706:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005708:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800570c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005710:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005714:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005716:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800571a:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800571c:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005720:	d811      	bhi.n	8005746 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8005722:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8005724:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8005728:	68cf      	ldr	r7, [r1, #12]
 800572a:	fa07 f70c 	lsl.w	r7, r7, ip
 800572e:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8005732:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005734:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005736:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800573a:	f3c2 1700 	ubfx	r7, r2, #4, #1
 800573e:	409f      	lsls	r7, r3
 8005740:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8005744:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005746:	f1ba 0f03 	cmp.w	sl, #3
 800574a:	d107      	bne.n	800575c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 800574c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800574e:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8005752:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8005756:	409f      	lsls	r7, r3
 8005758:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 800575a:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 800575c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 800575e:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005760:	688e      	ldr	r6, [r1, #8]
 8005762:	fa06 f60c 	lsl.w	r6, r6, ip
 8005766:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8005768:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800576a:	00d5      	lsls	r5, r2, #3
 800576c:	d559      	bpl.n	8005822 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800576e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8005772:	f045 0501 	orr.w	r5, r5, #1
 8005776:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 800577a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800577e:	f023 0603 	bic.w	r6, r3, #3
 8005782:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8005786:	f005 0501 	and.w	r5, r5, #1
 800578a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800578e:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005790:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005794:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8005796:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005798:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800579c:	270f      	movs	r7, #15
 800579e:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80057a2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80057a6:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80057aa:	d03c      	beq.n	8005826 <HAL_GPIO_Init+0x192>
 80057ac:	4d25      	ldr	r5, [pc, #148]	; (8005844 <HAL_GPIO_Init+0x1b0>)
 80057ae:	42a8      	cmp	r0, r5
 80057b0:	d03b      	beq.n	800582a <HAL_GPIO_Init+0x196>
 80057b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057b6:	42a8      	cmp	r0, r5
 80057b8:	d039      	beq.n	800582e <HAL_GPIO_Init+0x19a>
 80057ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057be:	42a8      	cmp	r0, r5
 80057c0:	d037      	beq.n	8005832 <HAL_GPIO_Init+0x19e>
 80057c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057c6:	42a8      	cmp	r0, r5
 80057c8:	d035      	beq.n	8005836 <HAL_GPIO_Init+0x1a2>
 80057ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057ce:	42a8      	cmp	r0, r5
 80057d0:	d033      	beq.n	800583a <HAL_GPIO_Init+0x1a6>
 80057d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057d6:	42a8      	cmp	r0, r5
 80057d8:	bf14      	ite	ne
 80057da:	2507      	movne	r5, #7
 80057dc:	2506      	moveq	r5, #6
 80057de:	fa05 f50c 	lsl.w	r5, r5, ip
 80057e2:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80057e4:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 80057e6:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80057e8:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057ec:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 80057ee:	bf54      	ite	pl
 80057f0:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80057f2:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 80057f6:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 80057f8:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80057fa:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 80057fc:	bf54      	ite	pl
 80057fe:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8005800:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8005804:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8005806:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005808:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 800580a:	bf54      	ite	pl
 800580c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800580e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8005812:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8005814:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005816:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 8005818:	bf54      	ite	pl
 800581a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800581c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8005820:	60e5      	str	r5, [r4, #12]
    position++;
 8005822:	3301      	adds	r3, #1
 8005824:	e73f      	b.n	80056a6 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8005826:	2500      	movs	r5, #0
 8005828:	e7d9      	b.n	80057de <HAL_GPIO_Init+0x14a>
 800582a:	2501      	movs	r5, #1
 800582c:	e7d7      	b.n	80057de <HAL_GPIO_Init+0x14a>
 800582e:	2502      	movs	r5, #2
 8005830:	e7d5      	b.n	80057de <HAL_GPIO_Init+0x14a>
 8005832:	2503      	movs	r5, #3
 8005834:	e7d3      	b.n	80057de <HAL_GPIO_Init+0x14a>
 8005836:	2504      	movs	r5, #4
 8005838:	e7d1      	b.n	80057de <HAL_GPIO_Init+0x14a>
 800583a:	2505      	movs	r5, #5
 800583c:	e7cf      	b.n	80057de <HAL_GPIO_Init+0x14a>
 800583e:	bf00      	nop
 8005840:	40010400 	.word	0x40010400
 8005844:	48000400 	.word	0x48000400
 8005848:	40021000 	.word	0x40021000

0800584c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800584c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8005850:	4604      	mov	r4, r0
{
 8005852:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 8005854:	2800      	cmp	r0, #0
 8005856:	d07c      	beq.n	8005952 <HAL_PCD_Init+0x106>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  
  if(hpcd->State == HAL_PCD_STATE_RESET)
 8005858:	f890 3385 	ldrb.w	r3, [r0, #901]	; 0x385
 800585c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005860:	b91b      	cbnz	r3, 800586a <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005862:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005866:	f7fe fdd7 	bl	8004418 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800586a:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800586c:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 800586e:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8005872:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  __HAL_PCD_DISABLE(hpcd);
 8005876:	f002 fda6 	bl	80083c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 800587a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800587c:	466e      	mov	r6, sp
 800587e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005882:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005884:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005888:	e886 0003 	stmia.w	r6, {r0, r1}
 800588c:	f104 0804 	add.w	r8, r4, #4
 8005890:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8005894:	6820      	ldr	r0, [r4, #0]
 8005896:	f002 fd7c 	bl	8008392 <USB_CoreInit>

  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 800589a:	2100      	movs	r1, #0
 800589c:	6820      	ldr	r0, [r4, #0]
 800589e:	f002 fd98 	bl	80083d2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80058a2:	2200      	movs	r2, #0
 80058a4:	6860      	ldr	r0, [r4, #4]
 80058a6:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80058aa:	f104 0510 	add.w	r5, r4, #16
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 80058ae:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80058b0:	4611      	mov	r1, r2
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 80058b2:	4282      	cmp	r2, r0
 80058b4:	f103 031c 	add.w	r3, r3, #28
 80058b8:	d13b      	bne.n	8005932 <HAL_PCD_Init+0xe6>
 80058ba:	2200      	movs	r2, #0
 80058bc:	4623      	mov	r3, r4
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 80058be:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 80058c0:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
    hpcd->IN_ep[index].tx_fifo_num = index;
 80058c4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (index = 0; index < 15 ; index++)
 80058c8:	3201      	adds	r2, #1
 80058ca:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0;
 80058cc:	f883 71e1 	strb.w	r7, [r3, #481]	; 0x1e1
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 80058d0:	f883 71e3 	strb.w	r7, [r3, #483]	; 0x1e3
    hpcd->OUT_ep[index].maxpacket = 0;
 80058d4:	f8c3 71e8 	str.w	r7, [r3, #488]	; 0x1e8
    hpcd->OUT_ep[index].xfer_buff = 0;
 80058d8:	f8c3 71ec 	str.w	r7, [r3, #492]	; 0x1ec
    hpcd->OUT_ep[index].xfer_len = 0;
 80058dc:	f8c3 71f4 	str.w	r7, [r3, #500]	; 0x1f4
 80058e0:	f103 031c 	add.w	r3, r3, #28
  for (index = 0; index < 15 ; index++)
 80058e4:	d1ec      	bne.n	80058c0 <HAL_PCD_Init+0x74>
  }

  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80058e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058e8:	466e      	mov	r6, sp
 80058ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80058ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80058f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80058f4:	e886 0003 	stmia.w	r6, {r0, r1}
 80058f8:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80058fc:	6820      	ldr	r0, [r4, #0]
 80058fe:	f002 fd7f 	bl	8008400 <USB_DevInit>

  hpcd->USB_Address = 0;
  
  hpcd->State= HAL_PCD_STATE_READY;
 8005902:	2301      	movs	r3, #1
  hpcd->USB_Address = 0;
 8005904:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State= HAL_PCD_STATE_READY;
 8005908:	f884 3385 	strb.w	r3, [r4, #901]	; 0x385
  
   /* Activate LPM */
  if (hpcd->Init.lpm_enable ==1)
 800590c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800590e:	2b01      	cmp	r3, #1
 8005910:	d102      	bne.n	8005918 <HAL_PCD_Init+0xcc>
  {
    HAL_PCDEx_ActivateLPM(hpcd);
 8005912:	4620      	mov	r0, r4
 8005914:	f000 fcb3 	bl	800627e <HAL_PCDEx_ActivateLPM>
  }  
  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable ==1)
 8005918:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800591a:	2b01      	cmp	r3, #1
 800591c:	d102      	bne.n	8005924 <HAL_PCD_Init+0xd8>
  {
    HAL_PCDEx_ActivateBCD(hpcd);
 800591e:	4620      	mov	r0, r4
 8005920:	f000 fcc0 	bl	80062a4 <HAL_PCDEx_ActivateBCD>
  }
  USB_DevDisconnect (hpcd->Instance);  
 8005924:	6820      	ldr	r0, [r4, #0]
 8005926:	f003 f84b 	bl	80089c0 <USB_DevDisconnect>
  return HAL_OK;
 800592a:	2000      	movs	r0, #0
}
 800592c:	b00a      	add	sp, #40	; 0x28
 800592e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hpcd->IN_ep[index].num = index;
 8005932:	f803 2c1c 	strb.w	r2, [r3, #-28]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8005936:	f823 2c16 	strh.w	r2, [r3, #-22]
    hpcd->IN_ep[index].is_in = 1;
 800593a:	f803 6c1b 	strb.w	r6, [r3, #-27]
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 800593e:	f803 1c19 	strb.w	r1, [r3, #-25]
    hpcd->IN_ep[index].maxpacket =  0;
 8005942:	f843 1c14 	str.w	r1, [r3, #-20]
    hpcd->IN_ep[index].xfer_buff = 0;
 8005946:	f843 1c10 	str.w	r1, [r3, #-16]
    hpcd->IN_ep[index].xfer_len = 0;
 800594a:	f843 1c08 	str.w	r1, [r3, #-8]
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 800594e:	3201      	adds	r2, #1
 8005950:	e7af      	b.n	80058b2 <HAL_PCD_Init+0x66>
    return HAL_ERROR;
 8005952:	2001      	movs	r0, #1
 8005954:	e7ea      	b.n	800592c <HAL_PCD_Init+0xe0>

08005956 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8005956:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 800595a:	2b01      	cmp	r3, #1
{ 
 800595c:	b510      	push	{r4, lr}
 800595e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8005960:	d00c      	beq.n	800597c <HAL_PCD_Start+0x26>
 8005962:	2301      	movs	r3, #1
 8005964:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  USB_DevConnect (hpcd->Instance);
 8005968:	6800      	ldr	r0, [r0, #0]
 800596a:	f003 f81d 	bl	80089a8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800596e:	6820      	ldr	r0, [r4, #0]
 8005970:	f002 fd23 	bl	80083ba <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8005974:	2000      	movs	r0, #0
 8005976:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 800597a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800597c:	2002      	movs	r0, #2
}
 800597e:	bd10      	pop	{r4, pc}

08005980 <HAL_PCD_Stop>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8005980:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8005984:	2b01      	cmp	r3, #1
{ 
 8005986:	b510      	push	{r4, lr}
 8005988:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 800598a:	d00f      	beq.n	80059ac <HAL_PCD_Stop+0x2c>
 800598c:	2301      	movs	r3, #1
 800598e:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  __HAL_PCD_DISABLE(hpcd);
 8005992:	6800      	ldr	r0, [r0, #0]
 8005994:	f002 fd17 	bl	80083c6 <USB_DisableGlobalInt>
  USB_StopDevice(hpcd->Instance);
 8005998:	6820      	ldr	r0, [r4, #0]
 800599a:	f002 ffd4 	bl	8008946 <USB_StopDevice>
  USB_DevDisconnect (hpcd->Instance);
 800599e:	6820      	ldr	r0, [r4, #0]
 80059a0:	f003 f80e 	bl	80089c0 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd); 
 80059a4:	2000      	movs	r0, #0
 80059a6:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
 80059aa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80059ac:	2002      	movs	r0, #2
  return HAL_OK;
}
 80059ae:	bd10      	pop	{r4, pc}

080059b0 <HAL_PCD_DeInit>:
{
 80059b0:	b510      	push	{r4, lr}
  if(hpcd == NULL)
 80059b2:	4604      	mov	r4, r0
 80059b4:	b158      	cbz	r0, 80059ce <HAL_PCD_DeInit+0x1e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80059b6:	2303      	movs	r3, #3
 80059b8:	f880 3385 	strb.w	r3, [r0, #901]	; 0x385
  HAL_PCD_Stop(hpcd);
 80059bc:	f7ff ffe0 	bl	8005980 <HAL_PCD_Stop>
  HAL_PCD_MspDeInit(hpcd);
 80059c0:	4620      	mov	r0, r4
 80059c2:	f7fe fd67 	bl	8004494 <HAL_PCD_MspDeInit>
  hpcd->State = HAL_PCD_STATE_RESET; 
 80059c6:	2000      	movs	r0, #0
 80059c8:	f884 0385 	strb.w	r0, [r4, #901]	; 0x385
  return HAL_OK;
 80059cc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80059ce:	2001      	movs	r0, #1
}
 80059d0:	bd10      	pop	{r4, pc}
	...

080059d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80059d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059d8:	6807      	ldr	r7, [r0, #0]
{
 80059da:	b087      	sub	sp, #28
 80059dc:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep = NULL;
  uint32_t hclk = 80000000;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80059de:	4638      	mov	r0, r7
 80059e0:	f003 f828 	bl	8008a34 <USB_GetMode>
 80059e4:	9002      	str	r0, [sp, #8]
 80059e6:	2800      	cmp	r0, #0
 80059e8:	f040 8155 	bne.w	8005c96 <HAL_PCD_IRQHandler+0x2c2>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 80059ec:	6820      	ldr	r0, [r4, #0]
 80059ee:	f002 fff3 	bl	80089d8 <USB_ReadInterrupts>
 80059f2:	2800      	cmp	r0, #0
 80059f4:	f000 814f 	beq.w	8005c96 <HAL_PCD_IRQHandler+0x2c2>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80059f8:	6820      	ldr	r0, [r4, #0]
 80059fa:	f002 ffed 	bl	80089d8 <USB_ReadInterrupts>
 80059fe:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005a00:	bf48      	it	mi
 8005a02:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005a04:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005a06:	bf42      	ittt	mi
 8005a08:	6953      	ldrmi	r3, [r2, #20]
 8005a0a:	f003 0302 	andmi.w	r3, r3, #2
 8005a0e:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005a10:	f002 ffe2 	bl	80089d8 <USB_ReadInterrupts>
 8005a14:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8005a18:	d00c      	beq.n	8005a34 <HAL_PCD_IRQHandler+0x60>
    {
      epnum = 0;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005a1a:	6820      	ldr	r0, [r4, #0]
 8005a1c:	f002 ffe0 	bl	80089e0 <USB_ReadDevAllOutEpInterrupt>
 8005a20:	f507 6930 	add.w	r9, r7, #2816	; 0xb00
 8005a24:	4680      	mov	r8, r0
 8005a26:	46a3      	mov	fp, r4
      
      while ( ep_intr )
 8005a28:	464e      	mov	r6, r9
      epnum = 0;
 8005a2a:	2500      	movs	r5, #0
      while ( ep_intr )
 8005a2c:	f1b8 0f00 	cmp.w	r8, #0
 8005a30:	f040 8134 	bne.w	8005c9c <HAL_PCD_IRQHandler+0x2c8>
        epnum++;
        ep_intr >>= 1;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005a34:	6820      	ldr	r0, [r4, #0]
 8005a36:	f002 ffcf 	bl	80089d8 <USB_ReadInterrupts>
 8005a3a:	0342      	lsls	r2, r0, #13
 8005a3c:	d50b      	bpl.n	8005a56 <HAL_PCD_IRQHandler+0x82>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005a3e:	6820      	ldr	r0, [r4, #0]
 8005a40:	f002 ffd6 	bl	80089f0 <USB_ReadDevAllInEpInterrupt>
 8005a44:	4626      	mov	r6, r4
 8005a46:	4683      	mov	fp, r0
 8005a48:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      
      epnum = 0;
 8005a4c:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8005a4e:	f1bb 0f00 	cmp.w	fp, #0
 8005a52:	f040 81a1 	bne.w	8005d98 <HAL_PCD_IRQHandler+0x3c4>
        ep_intr >>= 1;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005a56:	6820      	ldr	r0, [r4, #0]
 8005a58:	f002 ffbe 	bl	80089d8 <USB_ReadInterrupts>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	da15      	bge.n	8005a8c <HAL_PCD_IRQHandler+0xb8>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a60:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8005a64:	f023 0301 	bic.w	r3, r3, #1
 8005a68:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
      
      if(hpcd->LPM_State == LPM_L1)
 8005a6c:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	f040 822c 	bne.w	8005ece <HAL_PCD_IRQHandler+0x4fa>
      {
        hpcd->LPM_State = LPM_L0;
 8005a76:	2100      	movs	r1, #0
 8005a78:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f000 fc1b 	bl	80062b8 <HAL_PCDEx_LPM_Callback>
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005a82:	6822      	ldr	r2, [r4, #0]
 8005a84:	6953      	ldr	r3, [r2, #20]
 8005a86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a8a:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005a8c:	6820      	ldr	r0, [r4, #0]
 8005a8e:	f002 ffa3 	bl	80089d8 <USB_ReadInterrupts>
 8005a92:	0503      	lsls	r3, r0, #20
 8005a94:	d50b      	bpl.n	8005aae <HAL_PCD_IRQHandler+0xda>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005a96:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8005a9a:	07de      	lsls	r6, r3, #31
 8005a9c:	d502      	bpl.n	8005aa4 <HAL_PCD_IRQHandler+0xd0>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f7fe fd2c 	bl	80044fc <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005aa4:	6822      	ldr	r2, [r4, #0]
 8005aa6:	6953      	ldr	r3, [r2, #20]
 8005aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aac:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle LPM Interrupt */ 
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005aae:	6820      	ldr	r0, [r4, #0]
 8005ab0:	f002 ff92 	bl	80089d8 <USB_ReadInterrupts>
 8005ab4:	0100      	lsls	r0, r0, #4
 8005ab6:	d514      	bpl.n	8005ae2 <HAL_PCD_IRQHandler+0x10e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	695a      	ldr	r2, [r3, #20]
 8005abc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005ac0:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8005ac2:	f894 23b8 	ldrb.w	r2, [r4, #952]	; 0x3b8
 8005ac6:	2a00      	cmp	r2, #0
 8005ac8:	f040 8205 	bne.w	8005ed6 <HAL_PCD_IRQHandler+0x502>
      {   
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8005acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8005ace:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8005ad0:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8005ad4:	f884 13b8 	strb.w	r1, [r4, #952]	; 0x3b8
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;  
 8005ad8:	f8c4 33bc 	str.w	r3, [r4, #956]	; 0x3bc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005adc:	4620      	mov	r0, r4
 8005ade:	f000 fbeb 	bl	80062b8 <HAL_PCDEx_LPM_Callback>
        HAL_PCD_SuspendCallback(hpcd);
      }
    }
    
    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005ae2:	6820      	ldr	r0, [r4, #0]
 8005ae4:	f002 ff78 	bl	80089d8 <USB_ReadInterrupts>
 8005ae8:	04c1      	lsls	r1, r0, #19
 8005aea:	d537      	bpl.n	8005b5c <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8005aec:	f507 6600 	add.w	r6, r7, #2048	; 0x800
 8005af0:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 8005af2:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8005af4:	f023 0301 	bic.w	r3, r3, #1
 8005af8:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance ,  0 );
 8005afa:	2100      	movs	r1, #0
 8005afc:	f002 fd18 	bl	8008530 <USB_FlushTxFifo>
      
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005b00:	6861      	ldr	r1, [r4, #4]
 8005b02:	f507 6310 	add.w	r3, r7, #2304	; 0x900
      {
        USBx_INEP(index)->DIEPINT = 0xFF;
 8005b06:	22ff      	movs	r2, #255	; 0xff
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005b08:	9802      	ldr	r0, [sp, #8]
 8005b0a:	4288      	cmp	r0, r1
 8005b0c:	f040 81e7 	bne.w	8005ede <HAL_PCD_IRQHandler+0x50a>
        USBx_OUTEP(index)->DOEPINT = 0xFF;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8005b10:	f04f 33ff 	mov.w	r3, #4294967295
 8005b14:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 8005b16:	69f3      	ldr	r3, [r6, #28]
 8005b18:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005b1c:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8005b1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 81e4 	beq.w	8005eee <HAL_PCD_IRQHandler+0x51a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8005b26:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8005b2a:	f043 030b 	orr.w	r3, r3, #11
 8005b2e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8005b32:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005b34:	f043 030b 	orr.w	r3, r3, #11
 8005b38:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005b3a:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005b3e:	7c21      	ldrb	r1, [r4, #16]
 8005b40:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005b42:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b46:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005b4a:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005b4e:	f002 ff90 	bl	8008a72 <USB_EP0_OutStart>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005b52:	6822      	ldr	r2, [r4, #0]
 8005b54:	6953      	ldr	r3, [r2, #20]
 8005b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b5a:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005b5c:	6820      	ldr	r0, [r4, #0]
 8005b5e:	f002 ff3b 	bl	80089d8 <USB_ReadInterrupts>
 8005b62:	0482      	lsls	r2, r0, #18
 8005b64:	d520      	bpl.n	8005ba8 <HAL_PCD_IRQHandler+0x1d4>
    {
      USB_ActivateSetup(hpcd->Instance);
 8005b66:	6820      	ldr	r0, [r4, #0]
 8005b68:	f002 ff68 	bl	8008a3c <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b6c:	6822      	ldr	r2, [r4, #0]
 8005b6e:	68d3      	ldr	r3, [r2, #12]
 8005b70:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8005b74:	60d3      	str	r3, [r2, #12]
      
      hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8005b76:	2303      	movs	r3, #3
 8005b78:	60e3      	str	r3, [r4, #12]
      hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ; 
 8005b7a:	2340      	movs	r3, #64	; 0x40
 8005b7c:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */

      /* Get hclk frequency value */
      hclk = HAL_RCC_GetHCLKFreq();
 8005b7e:	f000 febb 	bl	80068f8 <HAL_RCC_GetHCLKFreq>
    
      if((hclk >= 14200000)&&(hclk < 15000000))
 8005b82:	4b82      	ldr	r3, [pc, #520]	; (8005d8c <HAL_PCD_IRQHandler+0x3b8>)
 8005b84:	4a82      	ldr	r2, [pc, #520]	; (8005d90 <HAL_PCD_IRQHandler+0x3bc>)
 8005b86:	4403      	add	r3, r0
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	f200 81b8 	bhi.w	8005f00 <HAL_PCD_IRQHandler+0x52c>
      {
        /* hclk Clock Range between 14.2-15 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
      }
      
      else /* if(hclk >= 32000000) */
      {
        /* hclk Clock Range between 32-80 MHz */
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8005b96:	60da      	str	r2, [r3, #12]
      }  
      
      HAL_PCD_ResetCallback(hpcd);
 8005b98:	4620      	mov	r0, r4
 8005b9a:	f7fe fca2 	bl	80044e2 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005b9e:	6822      	ldr	r2, [r4, #0]
 8005ba0:	6953      	ldr	r3, [r2, #20]
 8005ba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ba6:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005ba8:	6820      	ldr	r0, [r4, #0]
 8005baa:	f002 ff15 	bl	80089d8 <USB_ReadInterrupts>
 8005bae:	06c3      	lsls	r3, r0, #27
 8005bb0:	d52b      	bpl.n	8005c0a <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005bb2:	6822      	ldr	r2, [r4, #0]
 8005bb4:	6993      	ldr	r3, [r2, #24]
 8005bb6:	f023 0310 	bic.w	r3, r3, #16
 8005bba:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8005bbc:	6a3e      	ldr	r6, [r7, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005bbe:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8005bc2:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005bc4:	f006 090f 	and.w	r9, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005bc8:	f040 81ea 	bne.w	8005fa0 <HAL_PCD_IRQHandler+0x5cc>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8005bcc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005bd0:	421e      	tst	r6, r3
 8005bd2:	d015      	beq.n	8005c00 <HAL_PCD_IRQHandler+0x22c>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8005bd4:	f04f 081c 	mov.w	r8, #28
 8005bd8:	fb08 4809 	mla	r8, r8, r9, r4
 8005bdc:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8005be0:	4632      	mov	r2, r6
 8005be2:	f8d8 11ec 	ldr.w	r1, [r8, #492]	; 0x1ec
 8005be6:	4638      	mov	r0, r7
 8005be8:	f002 fe65 	bl	80088b6 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bec:	f8d8 31ec 	ldr.w	r3, [r8, #492]	; 0x1ec
 8005bf0:	4433      	add	r3, r6
 8005bf2:	f8c8 31ec 	str.w	r3, [r8, #492]	; 0x1ec
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bf6:	f8d8 31f8 	ldr.w	r3, [r8, #504]	; 0x1f8
 8005bfa:	441e      	add	r6, r3
 8005bfc:	f8c8 61f8 	str.w	r6, [r8, #504]	; 0x1f8
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c00:	6822      	ldr	r2, [r4, #0]
 8005c02:	6993      	ldr	r3, [r2, #24]
 8005c04:	f043 0310 	orr.w	r3, r3, #16
 8005c08:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005c0a:	6820      	ldr	r0, [r4, #0]
 8005c0c:	f002 fee4 	bl	80089d8 <USB_ReadInterrupts>
 8005c10:	0707      	lsls	r7, r0, #28
 8005c12:	d507      	bpl.n	8005c24 <HAL_PCD_IRQHandler+0x250>
    {
      HAL_PCD_SOFCallback(hpcd);
 8005c14:	4620      	mov	r0, r4
 8005c16:	f7fe fc60 	bl	80044da <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005c1a:	6822      	ldr	r2, [r4, #0]
 8005c1c:	6953      	ldr	r3, [r2, #20]
 8005c1e:	f003 0308 	and.w	r3, r3, #8
 8005c22:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005c24:	6820      	ldr	r0, [r4, #0]
 8005c26:	f002 fed7 	bl	80089d8 <USB_ReadInterrupts>
 8005c2a:	02c6      	lsls	r6, r0, #11
 8005c2c:	d508      	bpl.n	8005c40 <HAL_PCD_IRQHandler+0x26c>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8005c2e:	b2e9      	uxtb	r1, r5
 8005c30:	4620      	mov	r0, r4
 8005c32:	f7fe fc6f 	bl	8004514 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005c36:	6822      	ldr	r2, [r4, #0]
 8005c38:	6953      	ldr	r3, [r2, #20]
 8005c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c3e:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005c40:	6820      	ldr	r0, [r4, #0]
 8005c42:	f002 fec9 	bl	80089d8 <USB_ReadInterrupts>
 8005c46:	0280      	lsls	r0, r0, #10
 8005c48:	d508      	bpl.n	8005c5c <HAL_PCD_IRQHandler+0x288>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8005c4a:	b2e9      	uxtb	r1, r5
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f7fe fc5d 	bl	800450c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005c52:	6822      	ldr	r2, [r4, #0]
 8005c54:	6953      	ldr	r3, [r2, #20]
 8005c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c5a:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005c5c:	6820      	ldr	r0, [r4, #0]
 8005c5e:	f002 febb 	bl	80089d8 <USB_ReadInterrupts>
 8005c62:	0041      	lsls	r1, r0, #1
 8005c64:	d507      	bpl.n	8005c76 <HAL_PCD_IRQHandler+0x2a2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8005c66:	4620      	mov	r0, r4
 8005c68:	f7fe fc58 	bl	800451c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005c6c:	6822      	ldr	r2, [r4, #0]
 8005c6e:	6953      	ldr	r3, [r2, #20]
 8005c70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c74:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005c76:	6820      	ldr	r0, [r4, #0]
 8005c78:	f002 feae 	bl	80089d8 <USB_ReadInterrupts>
 8005c7c:	0742      	lsls	r2, r0, #29
 8005c7e:	d50a      	bpl.n	8005c96 <HAL_PCD_IRQHandler+0x2c2>
    {
      temp = hpcd->Instance->GOTGINT;
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005c84:	076b      	lsls	r3, r5, #29
 8005c86:	d502      	bpl.n	8005c8e <HAL_PCD_IRQHandler+0x2ba>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f7fe fc4b 	bl	8004524 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	4315      	orrs	r5, r2
 8005c94:	605d      	str	r5, [r3, #4]
    }
  }
}
 8005c96:	b007      	add	sp, #28
 8005c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1)
 8005c9c:	f018 0f01 	tst.w	r8, #1
 8005ca0:	d049      	beq.n	8005d36 <HAL_PCD_IRQHandler+0x362>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8005ca2:	b2ea      	uxtb	r2, r5
 8005ca4:	4611      	mov	r1, r2
 8005ca6:	6820      	ldr	r0, [r4, #0]
 8005ca8:	9203      	str	r2, [sp, #12]
 8005caa:	f002 fea9 	bl	8008a00 <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005cae:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8005cb2:	4682      	mov	sl, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005cb4:	d032      	beq.n	8005d1c <HAL_PCD_IRQHandler+0x348>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	60b1      	str	r1, [r6, #8]
            if (USBx->GSNPSID == USB_OTG_CORE_ID_310A)
 8005cba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cbc:	4b35      	ldr	r3, [pc, #212]	; (8005d94 <HAL_PCD_IRQHandler+0x3c0>)
 8005cbe:	9a03      	ldr	r2, [sp, #12]
 8005cc0:	4299      	cmp	r1, r3
 8005cc2:	d13f      	bne.n	8005d44 <HAL_PCD_IRQHandler+0x370>
              if (!(USBx_OUTEP(0)->DOEPINT & (0x1 << 15)))
 8005cc4:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8005cc8:	0409      	lsls	r1, r1, #16
 8005cca:	d41f      	bmi.n	8005d0c <HAL_PCD_IRQHandler+0x338>
                  if (hpcd->Init.dma_enable == 1)
 8005ccc:	6921      	ldr	r1, [r4, #16]
 8005cce:	2901      	cmp	r1, #1
 8005cd0:	d10c      	bne.n	8005cec <HAL_PCD_IRQHandler+0x318>
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cd2:	6931      	ldr	r1, [r6, #16]
                                                 hpcd->OUT_ep[epnum].maxpacket -
 8005cd4:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                        (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cd8:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                                 hpcd->OUT_ep[epnum].maxpacket -
 8005cdc:	1a41      	subs	r1, r0, r1
                  	hpcd->OUT_ep[epnum].xfer_count =
 8005cde:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                    hpcd->OUT_ep[epnum].xfer_buff +=
 8005ce2:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 8005ce6:	4408      	add	r0, r1
 8005ce8:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
                HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8005cec:	4611      	mov	r1, r2
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f7fe fbe2 	bl	80044b8 <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 8005cf4:	6921      	ldr	r1, [r4, #16]
 8005cf6:	2901      	cmp	r1, #1
 8005cf8:	d108      	bne.n	8005d0c <HAL_PCD_IRQHandler+0x338>
                  if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 8005cfa:	b93d      	cbnz	r5, 8005d0c <HAL_PCD_IRQHandler+0x338>
 8005cfc:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 8005d00:	b922      	cbnz	r2, 8005d0c <HAL_PCD_IRQHandler+0x338>
                    USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8005d02:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005d06:	6820      	ldr	r0, [r4, #0]
 8005d08:	f002 feb3 	bl	8008a72 <USB_EP0_OutStart>
              USBx_OUTEP(0)->DOEPINT |= (0x1 << 15) | (0x1 << 5);
 8005d0c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8005d10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d14:	f042 0220 	orr.w	r2, r2, #32
 8005d18:	f8c9 2008 	str.w	r2, [r9, #8]
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005d1c:	f01a 0f08 	tst.w	sl, #8
 8005d20:	d004      	beq.n	8005d2c <HAL_PCD_IRQHandler+0x358>
            HAL_PCD_SetupStageCallback(hpcd);
 8005d22:	4620      	mov	r0, r4
 8005d24:	f7fe fbc2 	bl	80044ac <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005d28:	2308      	movs	r3, #8
 8005d2a:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005d2c:	f01a 0f10 	tst.w	sl, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005d30:	bf1c      	itt	ne
 8005d32:	2310      	movne	r3, #16
 8005d34:	60b3      	strne	r3, [r6, #8]
        epnum++;
 8005d36:	3501      	adds	r5, #1
        ep_intr >>= 1;
 8005d38:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8005d3c:	3620      	adds	r6, #32
 8005d3e:	f10b 0b1c 	add.w	fp, fp, #28
 8005d42:	e673      	b.n	8005a2c <HAL_PCD_IRQHandler+0x58>
              if (hpcd->Init.dma_enable == 1)
 8005d44:	6921      	ldr	r1, [r4, #16]
 8005d46:	2901      	cmp	r1, #1
 8005d48:	d10c      	bne.n	8005d64 <HAL_PCD_IRQHandler+0x390>
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d4a:	6931      	ldr	r1, [r6, #16]
                                               hpcd->OUT_ep[epnum].maxpacket -
 8005d4c:	f8db 01e8 	ldr.w	r0, [fp, #488]	; 0x1e8
                      (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d50:	f3c1 0112 	ubfx	r1, r1, #0, #19
                                               hpcd->OUT_ep[epnum].maxpacket -
 8005d54:	1a41      	subs	r1, r0, r1
                hpcd->OUT_ep[epnum].xfer_count =
 8005d56:	f8cb 11f8 	str.w	r1, [fp, #504]	; 0x1f8
                hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8005d5a:	f8db 11ec 	ldr.w	r1, [fp, #492]	; 0x1ec
 8005d5e:	4408      	add	r0, r1
 8005d60:	f8cb 01ec 	str.w	r0, [fp, #492]	; 0x1ec
              HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8005d64:	4611      	mov	r1, r2
 8005d66:	4620      	mov	r0, r4
 8005d68:	f7fe fba6 	bl	80044b8 <HAL_PCD_DataOutStageCallback>
              if(hpcd->Init.dma_enable == 1)
 8005d6c:	6921      	ldr	r1, [r4, #16]
 8005d6e:	2901      	cmp	r1, #1
 8005d70:	d1d4      	bne.n	8005d1c <HAL_PCD_IRQHandler+0x348>
                if (!epnum && !hpcd->OUT_ep[epnum].xfer_len)
 8005d72:	2d00      	cmp	r5, #0
 8005d74:	d1d2      	bne.n	8005d1c <HAL_PCD_IRQHandler+0x348>
 8005d76:	f8d4 21f4 	ldr.w	r2, [r4, #500]	; 0x1f4
 8005d7a:	2a00      	cmp	r2, #0
 8005d7c:	d1ce      	bne.n	8005d1c <HAL_PCD_IRQHandler+0x348>
                  USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8005d7e:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005d82:	6820      	ldr	r0, [r4, #0]
 8005d84:	f002 fe75 	bl	8008a72 <USB_EP0_OutStart>
 8005d88:	e7c8      	b.n	8005d1c <HAL_PCD_IRQHandler+0x348>
 8005d8a:	bf00      	nop
 8005d8c:	ff275340 	.word	0xff275340
 8005d90:	000c34ff 	.word	0x000c34ff
 8005d94:	4f54310a 	.word	0x4f54310a
        if (ep_intr & 0x1) /* In ITR */
 8005d98:	f01b 0f01 	tst.w	fp, #1
 8005d9c:	d074      	beq.n	8005e88 <HAL_PCD_IRQHandler+0x4b4>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8005d9e:	fa5f fa85 	uxtb.w	sl, r5
 8005da2:	4651      	mov	r1, sl
 8005da4:	6820      	ldr	r0, [r4, #0]
 8005da6:	f002 fe35 	bl	8008a14 <USB_ReadDevInEPInterrupt>
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005daa:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8005dae:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005db0:	d020      	beq.n	8005df4 <HAL_PCD_IRQHandler+0x420>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005db2:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
            fifoemptymsk = 0x1 << epnum;
 8005db6:	2101      	movs	r1, #1
 8005db8:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005dba:	ea23 0301 	bic.w	r3, r3, r1
 8005dbe:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1)
 8005dc8:	6923      	ldr	r3, [r4, #16]
 8005dca:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8005dcc:	bf01      	itttt	eq
 8005dce:	6cb3      	ldreq	r3, [r6, #72]	; 0x48
 8005dd0:	6c72      	ldreq	r2, [r6, #68]	; 0x44
 8005dd2:	189b      	addeq	r3, r3, r2
 8005dd4:	64b3      	streq	r3, [r6, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8005dd6:	4651      	mov	r1, sl
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f7fe fb76 	bl	80044ca <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1)
 8005dde:	6921      	ldr	r1, [r4, #16]
 8005de0:	2901      	cmp	r1, #1
 8005de2:	d107      	bne.n	8005df4 <HAL_PCD_IRQHandler+0x420>
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 8005de4:	b935      	cbnz	r5, 8005df4 <HAL_PCD_IRQHandler+0x420>
 8005de6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005de8:	b923      	cbnz	r3, 8005df4 <HAL_PCD_IRQHandler+0x420>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8005dea:	f504 7262 	add.w	r2, r4, #904	; 0x388
 8005dee:	6820      	ldr	r0, [r4, #0]
 8005df0:	f002 fe3f 	bl	8008a72 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005df4:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005df8:	bf1c      	itt	ne
 8005dfa:	2308      	movne	r3, #8
 8005dfc:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005e00:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005e04:	bf1c      	itt	ne
 8005e06:	2310      	movne	r3, #16
 8005e08:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005e0c:	f018 0f40 	tst.w	r8, #64	; 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005e10:	bf1c      	itt	ne
 8005e12:	2340      	movne	r3, #64	; 0x40
 8005e14:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005e18:	f018 0f02 	tst.w	r8, #2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005e1c:	bf1c      	itt	ne
 8005e1e:	2302      	movne	r3, #2
 8005e20:	f8c9 3008 	strne.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005e24:	f018 0f80 	tst.w	r8, #128	; 0x80
 8005e28:	d02e      	beq.n	8005e88 <HAL_PCD_IRQHandler+0x4b4>
  * @param  epnum: endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	9303      	str	r3, [sp, #12]
  int32_t len = 0U;
  uint32_t len32b = 0;
  uint32_t fifoemptymsk = 0;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8005e2e:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8005e30:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8005e32:	eba3 0802 	sub.w	r8, r3, r2
 8005e36:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8005e38:	4598      	cmp	r8, r3
 8005e3a:	bf28      	it	cs
 8005e3c:	4698      	movcs	r8, r3
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3) / 4;
 8005e3e:	f108 0303 	add.w	r3, r8, #3
 8005e42:	2204      	movs	r2, #4
 8005e44:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e48:	9304      	str	r3, [sp, #16]
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8005e4a:	9b03      	ldr	r3, [sp, #12]
 8005e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e50:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8005e54:	9305      	str	r3, [sp, #20]
 8005e56:	9b05      	ldr	r3, [sp, #20]
 8005e58:	9a04      	ldr	r2, [sp, #16]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d904      	bls.n	8005e6c <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 8005e62:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8005e64:	6d33      	ldr	r3, [r6, #80]	; 0x50
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d900      	bls.n	8005e6c <HAL_PCD_IRQHandler+0x498>
          ep->xfer_count < ep->xfer_len &&
 8005e6a:	b9a3      	cbnz	r3, 8005e96 <HAL_PCD_IRQHandler+0x4c2>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0)
 8005e6c:	f1b8 0f00 	cmp.w	r8, #0
 8005e70:	dc0a      	bgt.n	8005e88 <HAL_PCD_IRQHandler+0x4b4>
  {
    fifoemptymsk = 0x1 << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e72:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = 0x1 << epnum;
 8005e74:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e76:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 8005e7a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1 << epnum;
 8005e7e:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e80:	ea23 0302 	bic.w	r3, r3, r2
 8005e84:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        epnum++;
 8005e88:	3501      	adds	r5, #1
        ep_intr >>= 1;
 8005e8a:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8005e8e:	361c      	adds	r6, #28
 8005e90:	f109 0920 	add.w	r9, r9, #32
 8005e94:	e5db      	b.n	8005a4e <HAL_PCD_IRQHandler+0x7a>
    len = ep->xfer_len - ep->xfer_count;
 8005e96:	eba3 0802 	sub.w	r8, r3, r2
 8005e9a:	6c73      	ldr	r3, [r6, #68]	; 0x44
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8005e9c:	9803      	ldr	r0, [sp, #12]
 8005e9e:	4598      	cmp	r8, r3
 8005ea0:	bf28      	it	cs
 8005ea2:	4698      	movcs	r8, r3
    len32b = (len + 3) / 4;
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	f108 0303 	add.w	r3, r8, #3
 8005eaa:	fb93 f3f2 	sdiv	r3, r3, r2
 8005eae:	9304      	str	r3, [sp, #16]
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8005eb0:	7c23      	ldrb	r3, [r4, #16]
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	4652      	mov	r2, sl
 8005eb6:	fa1f f388 	uxth.w	r3, r8
 8005eba:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8005ebc:	f002 fcea 	bl	8008894 <USB_WritePacket>
    ep->xfer_buff  += len;
 8005ec0:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8005ec2:	4443      	add	r3, r8
 8005ec4:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 8005ec6:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8005ec8:	4443      	add	r3, r8
 8005eca:	6573      	str	r3, [r6, #84]	; 0x54
 8005ecc:	e7c3      	b.n	8005e56 <HAL_PCD_IRQHandler+0x482>
        HAL_PCD_ResumeCallback(hpcd);
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f7fe fb18 	bl	8004504 <HAL_PCD_ResumeCallback>
 8005ed4:	e5d5      	b.n	8005a82 <HAL_PCD_IRQHandler+0xae>
        HAL_PCD_SuspendCallback(hpcd);
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f7fe fb10 	bl	80044fc <HAL_PCD_SuspendCallback>
 8005edc:	e601      	b.n	8005ae2 <HAL_PCD_IRQHandler+0x10e>
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005ede:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(index)->DIEPINT = 0xFF;
 8005ee0:	609a      	str	r2, [r3, #8]
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005ee2:	3001      	adds	r0, #1
        USBx_OUTEP(index)->DOEPINT = 0xFF;
 8005ee4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8005ee8:	9002      	str	r0, [sp, #8]
 8005eea:	3320      	adds	r3, #32
 8005eec:	e60c      	b.n	8005b08 <HAL_PCD_IRQHandler+0x134>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8005eee:	6973      	ldr	r3, [r6, #20]
 8005ef0:	f043 030b 	orr.w	r3, r3, #11
 8005ef4:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8005ef6:	6933      	ldr	r3, [r6, #16]
 8005ef8:	f043 030b 	orr.w	r3, r3, #11
 8005efc:	6133      	str	r3, [r6, #16]
 8005efe:	e61c      	b.n	8005b3a <HAL_PCD_IRQHandler+0x166>
      else if((hclk >= 15000000)&&(hclk < 16000000))
 8005f00:	4a2f      	ldr	r2, [pc, #188]	; (8005fc0 <HAL_PCD_IRQHandler+0x5ec>)
 8005f02:	4930      	ldr	r1, [pc, #192]	; (8005fc4 <HAL_PCD_IRQHandler+0x5f0>)
 8005f04:	4402      	add	r2, r0
 8005f06:	428a      	cmp	r2, r1
 8005f08:	d803      	bhi.n	8005f12 <HAL_PCD_IRQHandler+0x53e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8005f10:	e641      	b.n	8005b96 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 16000000)&&(hclk < 17200000))
 8005f12:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8005f16:	492c      	ldr	r1, [pc, #176]	; (8005fc8 <HAL_PCD_IRQHandler+0x5f4>)
 8005f18:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8005f1c:	428a      	cmp	r2, r1
 8005f1e:	d803      	bhi.n	8005f28 <HAL_PCD_IRQHandler+0x554>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8005f26:	e636      	b.n	8005b96 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 17200000)&&(hclk < 18500000))
 8005f28:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8005f2c:	4927      	ldr	r1, [pc, #156]	; (8005fcc <HAL_PCD_IRQHandler+0x5f8>)
 8005f2e:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8005f32:	428a      	cmp	r2, r1
 8005f34:	d803      	bhi.n	8005f3e <HAL_PCD_IRQHandler+0x56a>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8005f3c:	e62b      	b.n	8005b96 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 18500000)&&(hclk < 20000000))
 8005f3e:	4a24      	ldr	r2, [pc, #144]	; (8005fd0 <HAL_PCD_IRQHandler+0x5fc>)
 8005f40:	4924      	ldr	r1, [pc, #144]	; (8005fd4 <HAL_PCD_IRQHandler+0x600>)
 8005f42:	4402      	add	r2, r0
 8005f44:	428a      	cmp	r2, r1
 8005f46:	d803      	bhi.n	8005f50 <HAL_PCD_IRQHandler+0x57c>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8005f4e:	e622      	b.n	8005b96 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 20000000)&&(hclk < 21800000))
 8005f50:	4a21      	ldr	r2, [pc, #132]	; (8005fd8 <HAL_PCD_IRQHandler+0x604>)
 8005f52:	4922      	ldr	r1, [pc, #136]	; (8005fdc <HAL_PCD_IRQHandler+0x608>)
 8005f54:	4402      	add	r2, r0
 8005f56:	428a      	cmp	r2, r1
 8005f58:	d803      	bhi.n	8005f62 <HAL_PCD_IRQHandler+0x58e>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8005f60:	e619      	b.n	8005b96 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 21800000)&&(hclk < 24000000))
 8005f62:	4a1f      	ldr	r2, [pc, #124]	; (8005fe0 <HAL_PCD_IRQHandler+0x60c>)
 8005f64:	491f      	ldr	r1, [pc, #124]	; (8005fe4 <HAL_PCD_IRQHandler+0x610>)
 8005f66:	4402      	add	r2, r0
 8005f68:	428a      	cmp	r2, r1
 8005f6a:	d803      	bhi.n	8005f74 <HAL_PCD_IRQHandler+0x5a0>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8005f72:	e610      	b.n	8005b96 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 24000000)&&(hclk < 27700000))
 8005f74:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8005f78:	491b      	ldr	r1, [pc, #108]	; (8005fe8 <HAL_PCD_IRQHandler+0x614>)
 8005f7a:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8005f7e:	428a      	cmp	r2, r1
 8005f80:	d803      	bhi.n	8005f8a <HAL_PCD_IRQHandler+0x5b6>
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f88:	e605      	b.n	8005b96 <HAL_PCD_IRQHandler+0x1c2>
      else if((hclk >= 27700000)&&(hclk < 32000000))
 8005f8a:	4a18      	ldr	r2, [pc, #96]	; (8005fec <HAL_PCD_IRQHandler+0x618>)
 8005f8c:	4918      	ldr	r1, [pc, #96]	; (8005ff0 <HAL_PCD_IRQHandler+0x61c>)
 8005f8e:	4402      	add	r2, r0
 8005f90:	428a      	cmp	r2, r1
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	bf94      	ite	ls
 8005f96:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
        hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f9a:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8005f9e:	e5fa      	b.n	8005b96 <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005fa0:	2b06      	cmp	r3, #6
 8005fa2:	f47f ae2d 	bne.w	8005c00 <HAL_PCD_IRQHandler+0x22c>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8005fa6:	2208      	movs	r2, #8
 8005fa8:	f504 7162 	add.w	r1, r4, #904	; 0x388
 8005fac:	4638      	mov	r0, r7
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005fae:	f04f 081c 	mov.w	r8, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8005fb2:	f002 fc80 	bl	80088b6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005fb6:	fb08 4809 	mla	r8, r8, r9, r4
 8005fba:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8005fbe:	e61a      	b.n	8005bf6 <HAL_PCD_IRQHandler+0x222>
 8005fc0:	ff1b1e40 	.word	0xff1b1e40
 8005fc4:	000f423f 	.word	0x000f423f
 8005fc8:	00124f7f 	.word	0x00124f7f
 8005fcc:	0013d61f 	.word	0x0013d61f
 8005fd0:	fee5b660 	.word	0xfee5b660
 8005fd4:	0016e35f 	.word	0x0016e35f
 8005fd8:	feced300 	.word	0xfeced300
 8005fdc:	001b773f 	.word	0x001b773f
 8005fe0:	feb35bc0 	.word	0xfeb35bc0
 8005fe4:	002191bf 	.word	0x002191bf
 8005fe8:	0038751f 	.word	0x0038751f
 8005fec:	fe5954e0 	.word	0xfe5954e0
 8005ff0:	00419cdf 	.word	0x00419cdf

08005ff4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8005ff4:	f890 2384 	ldrb.w	r2, [r0, #900]	; 0x384
 8005ff8:	2a01      	cmp	r2, #1
{
 8005ffa:	b510      	push	{r4, lr}
 8005ffc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8005ffe:	d00b      	beq.n	8006018 <HAL_PCD_SetAddress+0x24>
 8006000:	2201      	movs	r2, #1
 8006002:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  hpcd->USB_Address = address;
 8006006:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  USB_SetDevAddress(hpcd->Instance, address);
 800600a:	6800      	ldr	r0, [r0, #0]
 800600c:	f002 fcbc 	bl	8008988 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8006010:	2000      	movs	r0, #0
 8006012:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8006016:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8006018:	2002      	movs	r0, #2
}
 800601a:	bd10      	pop	{r4, pc}

0800601c <HAL_PCD_EP_Open>:
{
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	4604      	mov	r4, r0
  if ((ep_addr & 0x80) == 0x80)
 8006020:	b248      	sxtb	r0, r1
 8006022:	2800      	cmp	r0, #0
 8006024:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8006028:	f04f 051c 	mov.w	r5, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800602c:	bfb5      	itete	lt
 800602e:	fb05 4106 	mlalt	r1, r5, r6, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8006032:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006036:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8006038:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 800603c:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7F;
 800603e:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8006040:	7048      	strb	r0, [r1, #1]
  ep->type = ep_type;
 8006042:	70cb      	strb	r3, [r1, #3]
  __HAL_LOCK(hpcd);
 8006044:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->maxpacket = ep_mps;
 8006048:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd);
 800604a:	2b01      	cmp	r3, #1
 800604c:	d009      	beq.n	8006062 <HAL_PCD_EP_Open+0x46>
 800604e:	2301      	movs	r3, #1
 8006050:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8006054:	6820      	ldr	r0, [r4, #0]
 8006056:	f002 fa94 	bl	8008582 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800605a:	2000      	movs	r0, #0
 800605c:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return ret;
 8006060:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8006062:	2002      	movs	r0, #2
}
 8006064:	bd70      	pop	{r4, r5, r6, pc}

08006066 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 8006066:	b24b      	sxtb	r3, r1
 8006068:	2b00      	cmp	r3, #0
{  
 800606a:	b510      	push	{r4, lr}
 800606c:	f04f 021c 	mov.w	r2, #28
 8006070:	4604      	mov	r4, r0
 8006072:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006076:	bfb5      	itete	lt
 8006078:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800607c:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006080:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8006082:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = (0x80 & ep_addr) != 0;
 8006086:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8006088:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 800608a:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 800608c:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
 8006090:	2b01      	cmp	r3, #1
 8006092:	d009      	beq.n	80060a8 <HAL_PCD_EP_Close+0x42>
 8006094:	2301      	movs	r3, #1
 8006096:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 800609a:	6820      	ldr	r0, [r4, #0]
 800609c:	f002 fab0 	bl	8008600 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80060a0:	2000      	movs	r0, #0
 80060a2:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80060a6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80060a8:	2002      	movs	r0, #2
}
 80060aa:	bd10      	pop	{r4, pc}

080060ac <HAL_PCD_EP_Receive>:
{
 80060ac:	b570      	push	{r4, r5, r6, lr}
 80060ae:	4604      	mov	r4, r0
 80060b0:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 80060b4:	201c      	movs	r0, #28
 80060b6:	fb00 4506 	mla	r5, r0, r6, r4
  ep->xfer_len = len;
 80060ba:	f8c5 31f4 	str.w	r3, [r5, #500]	; 0x1f4
  ep->xfer_count = 0;
 80060be:	2300      	movs	r3, #0
 80060c0:	f8c5 31f8 	str.w	r3, [r5, #504]	; 0x1f8
  ep->is_in = 0;
 80060c4:	f885 31e1 	strb.w	r3, [r5, #481]	; 0x1e1
  __HAL_LOCK(hpcd);
 80060c8:	f894 3384 	ldrb.w	r3, [r4, #900]	; 0x384
  ep->xfer_buff = pBuf;  
 80060cc:	f8c5 21ec 	str.w	r2, [r5, #492]	; 0x1ec
  __HAL_LOCK(hpcd);
 80060d0:	2b01      	cmp	r3, #1
  ep->num = ep_addr & 0x7F;
 80060d2:	f885 61e0 	strb.w	r6, [r5, #480]	; 0x1e0
  __HAL_LOCK(hpcd);
 80060d6:	d011      	beq.n	80060fc <HAL_PCD_EP_Receive+0x50>
 80060d8:	6922      	ldr	r2, [r4, #16]
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80060da:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80060dc:	2301      	movs	r3, #1
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80060de:	f505 71f0 	add.w	r1, r5, #480	; 0x1e0
  __HAL_LOCK(hpcd);
 80060e2:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80060e6:	b2d2      	uxtb	r2, r2
  if ((ep_addr & 0x7F) == 0 )
 80060e8:	b92e      	cbnz	r6, 80060f6 <HAL_PCD_EP_Receive+0x4a>
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80060ea:	f002 fb6f 	bl	80087cc <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 80060ee:	2000      	movs	r0, #0
 80060f0:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80060f4:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 80060f6:	f002 fab1 	bl	800865c <USB_EPStartXfer>
 80060fa:	e7f8      	b.n	80060ee <HAL_PCD_EP_Receive+0x42>
  __HAL_LOCK(hpcd);
 80060fc:	2002      	movs	r0, #2
}
 80060fe:	bd70      	pop	{r4, r5, r6, pc}

08006100 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8006100:	231c      	movs	r3, #28
 8006102:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006106:	fb03 0101 	mla	r1, r3, r1, r0
}
 800610a:	f8b1 01f8 	ldrh.w	r0, [r1, #504]	; 0x1f8
 800610e:	4770      	bx	lr

08006110 <HAL_PCD_EP_Transmit>:
{
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	4604      	mov	r4, r0
 8006114:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  ep->xfer_buff = pBuf;  
 8006118:	201c      	movs	r0, #28
 800611a:	fb00 4506 	mla	r5, r0, r6, r4
 800611e:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 8006120:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_LOCK(hpcd);
 8006122:	f894 2384 	ldrb.w	r2, [r4, #900]	; 0x384
  ep->num = ep_addr & 0x7F;
 8006126:	f885 603c 	strb.w	r6, [r5, #60]	; 0x3c
  ep->xfer_count = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1;
 800612e:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8006130:	429a      	cmp	r2, r3
  ep->is_in = 1;
 8006132:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  __HAL_LOCK(hpcd);
 8006136:	d010      	beq.n	800615a <HAL_PCD_EP_Transmit+0x4a>
 8006138:	6922      	ldr	r2, [r4, #16]
 800613a:	f884 3384 	strb.w	r3, [r4, #900]	; 0x384
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800613e:	f105 013c 	add.w	r1, r5, #60	; 0x3c
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 8006142:	b2d2      	uxtb	r2, r2
 8006144:	6820      	ldr	r0, [r4, #0]
  if ((ep_addr & 0x7F) == 0 )
 8006146:	b92e      	cbnz	r6, 8006154 <HAL_PCD_EP_Transmit+0x44>
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
 8006148:	f002 fb40 	bl	80087cc <USB_EP0StartXfer>
  __HAL_UNLOCK(hpcd);
 800614c:	2000      	movs	r0, #0
 800614e:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8006152:	bd70      	pop	{r4, r5, r6, pc}
    USB_EPStartXfer(hpcd->Instance, ep,  hpcd->Init.dma_enable);
 8006154:	f002 fa82 	bl	800865c <USB_EPStartXfer>
 8006158:	e7f8      	b.n	800614c <HAL_PCD_EP_Transmit+0x3c>
  __HAL_LOCK(hpcd);
 800615a:	2002      	movs	r0, #2
}
 800615c:	bd70      	pop	{r4, r5, r6, pc}

0800615e <HAL_PCD_EP_SetStall>:
{
 800615e:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8006160:	b24b      	sxtb	r3, r1
 8006162:	2b00      	cmp	r3, #0
 8006164:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8006168:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800616c:	bfb5      	itete	lt
 800616e:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8006172:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006176:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 8006178:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_stall = 1;
 800617c:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800617e:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8006180:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1;
 8006182:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8006184:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8006186:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8006188:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 800618c:	4293      	cmp	r3, r2
{
 800618e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8006190:	d00f      	beq.n	80061b2 <HAL_PCD_EP_SetStall+0x54>
 8006192:	f880 2384 	strb.w	r2, [r0, #900]	; 0x384
  USB_EPSetStall(hpcd->Instance , ep);
 8006196:	6800      	ldr	r0, [r0, #0]
 8006198:	f002 fb9d 	bl	80088d6 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 800619c:	b92d      	cbnz	r5, 80061aa <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance,  hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800619e:	f504 7262 	add.w	r2, r4, #904	; 0x388
 80061a2:	7c21      	ldrb	r1, [r4, #16]
 80061a4:	6820      	ldr	r0, [r4, #0]
 80061a6:	f002 fc64 	bl	8008a72 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 80061aa:	2000      	movs	r0, #0
 80061ac:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 80061b0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80061b2:	2002      	movs	r0, #2
}
 80061b4:	bd38      	pop	{r3, r4, r5, pc}

080061b6 <HAL_PCD_EP_ClrStall>:
{
 80061b6:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 80061b8:	b24b      	sxtb	r3, r1
 80061ba:	2b00      	cmp	r3, #0
{
 80061bc:	4605      	mov	r5, r0
 80061be:	f04f 021c 	mov.w	r2, #28
 80061c2:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80061c6:	bfb5      	itete	lt
 80061c8:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 80061cc:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80061d0:	313c      	addlt	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr];
 80061d2:	f501 71f0 	addge.w	r1, r1, #480	; 0x1e0
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80061d6:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 80061d8:	2400      	movs	r4, #0
 80061da:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80061dc:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80061de:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80061e0:	f895 3384 	ldrb.w	r3, [r5, #900]	; 0x384
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d009      	beq.n	80061fc <HAL_PCD_EP_ClrStall+0x46>
 80061e8:	2301      	movs	r3, #1
 80061ea:	f885 3384 	strb.w	r3, [r5, #900]	; 0x384
  USB_EPClearStall(hpcd->Instance , ep);
 80061ee:	6828      	ldr	r0, [r5, #0]
 80061f0:	f002 fb90 	bl	8008914 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80061f4:	f885 4384 	strb.w	r4, [r5, #900]	; 0x384
  return HAL_OK;
 80061f8:	4620      	mov	r0, r4
 80061fa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80061fc:	2002      	movs	r0, #2
}
 80061fe:	bd38      	pop	{r3, r4, r5, pc}

08006200 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd); 
 8006200:	f890 3384 	ldrb.w	r3, [r0, #900]	; 0x384
 8006204:	2b01      	cmp	r3, #1
{
 8006206:	b510      	push	{r4, lr}
 8006208:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 800620a:	d011      	beq.n	8006230 <HAL_PCD_EP_Flush+0x30>
 800620c:	2301      	movs	r3, #1
 800620e:	f880 3384 	strb.w	r3, [r0, #900]	; 0x384
  if ((ep_addr & 0x80) == 0x80)
 8006212:	060b      	lsls	r3, r1, #24
 8006214:	d508      	bpl.n	8006228 <HAL_PCD_EP_Flush+0x28>
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 8006216:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800621a:	6800      	ldr	r0, [r0, #0]
 800621c:	f002 f988 	bl	8008530 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd); 
 8006220:	2000      	movs	r0, #0
 8006222:	f884 0384 	strb.w	r0, [r4, #900]	; 0x384
  return HAL_OK;
 8006226:	bd10      	pop	{r4, pc}
    USB_FlushRxFifo(hpcd->Instance);
 8006228:	6800      	ldr	r0, [r0, #0]
 800622a:	f002 f993 	bl	8008554 <USB_FlushRxFifo>
 800622e:	e7f7      	b.n	8006220 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd); 
 8006230:	2002      	movs	r0, #2
}
 8006232:	bd10      	pop	{r4, pc}

08006234 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006234:	6800      	ldr	r0, [r0, #0]
{
 8006236:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006238:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 800623a:	b921      	cbnz	r1, 8006246 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (size << 16) | Tx_Offset;
 800623c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006240:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
  }
  
  return HAL_OK;
}
 8006242:	2000      	movs	r0, #0
 8006244:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006246:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (index = 0; index < (fifo - 1); index++)
 8006248:	2500      	movs	r5, #0
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800624a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (index = 0; index < (fifo - 1); index++)
 800624e:	1e4e      	subs	r6, r1, #1
 8006250:	b2ec      	uxtb	r4, r5
 8006252:	42b4      	cmp	r4, r6
 8006254:	f105 0501 	add.w	r5, r5, #1
 8006258:	db06      	blt.n	8006268 <HAL_PCDEx_SetTxFiFo+0x34>
    hpcd->Instance->DIEPTXF[fifo - 1] = (size << 16) | Tx_Offset;
 800625a:	313f      	adds	r1, #63	; 0x3f
 800625c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006260:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006264:	6043      	str	r3, [r0, #4]
 8006266:	e7ec      	b.n	8006242 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[index] >> 16);
 8006268:	3440      	adds	r4, #64	; 0x40
 800626a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800626e:	6864      	ldr	r4, [r4, #4]
 8006270:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006274:	e7ec      	b.n	8006250 <HAL_PCDEx_SetTxFiFo+0x1c>

08006276 <HAL_PCDEx_SetRxFiFo>:
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8006276:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8006278:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800627a:	6259      	str	r1, [r3, #36]	; 0x24
}
 800627c:	4770      	bx	lr

0800627e <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800627e:	6802      	ldr	r2, [r0, #0]
{
 8006280:	4603      	mov	r3, r0
  
  hpcd->lpm_active = ENABLE;
 8006282:	2101      	movs	r1, #1
 8006284:	f8c0 13c0 	str.w	r1, [r0, #960]	; 0x3c0
  hpcd->LPM_State = LPM_L0;
 8006288:	2000      	movs	r0, #0
 800628a:	f883 03b8 	strb.w	r0, [r3, #952]	; 0x3b8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800628e:	6993      	ldr	r3, [r2, #24]
 8006290:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006294:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006296:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800629c:	f043 0303 	orr.w	r3, r3, #3
 80062a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;  
}
 80062a2:	4770      	bx	lr

080062a4 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80062a4:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = ENABLE; 
 80062a6:	2301      	movs	r3, #1
 80062a8:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 80062ac:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80062ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062b2:	6393      	str	r3, [r2, #56]	; 0x38
  
  return HAL_OK;  
}
 80062b4:	2000      	movs	r0, #0
 80062b6:	4770      	bx	lr

080062b8 <HAL_PCDEx_LPM_Callback>:
 80062b8:	4770      	bx	lr
	...

080062bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80062bc:	4b02      	ldr	r3, [pc, #8]	; (80062c8 <HAL_PWREx_GetVoltageRange+0xc>)
 80062be:	6818      	ldr	r0, [r3, #0]
}
 80062c0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	40007000 	.word	0x40007000

080062cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80062cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80062ce:	4d1e      	ldr	r5, [pc, #120]	; (8006348 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80062d0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80062d2:	00da      	lsls	r2, r3, #3
{
 80062d4:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80062d6:	d518      	bpl.n	800630a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80062d8:	f7ff fff0 	bl	80062bc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062dc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80062e0:	d123      	bne.n	800632a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80062e2:	2c80      	cmp	r4, #128	; 0x80
 80062e4:	d929      	bls.n	800633a <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80062e6:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80062e8:	bf8c      	ite	hi
 80062ea:	2002      	movhi	r0, #2
 80062ec:	2001      	movls	r0, #1
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 80062ee:	4a17      	ldr	r2, [pc, #92]	; (800634c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80062f0:	6813      	ldr	r3, [r2, #0]
 80062f2:	f023 0307 	bic.w	r3, r3, #7
 80062f6:	4303      	orrs	r3, r0
 80062f8:	6013      	str	r3, [r2, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80062fa:	6813      	ldr	r3, [r2, #0]
 80062fc:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8006300:	1a18      	subs	r0, r3, r0
 8006302:	bf18      	it	ne
 8006304:	2001      	movne	r0, #1
 8006306:	b003      	add	sp, #12
 8006308:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800630a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800630c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006310:	65ab      	str	r3, [r5, #88]	; 0x58
 8006312:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006318:	9301      	str	r3, [sp, #4]
 800631a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800631c:	f7ff ffce 	bl	80062bc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8006320:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006326:	65ab      	str	r3, [r5, #88]	; 0x58
 8006328:	e7d8      	b.n	80062dc <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800632a:	2c80      	cmp	r4, #128	; 0x80
 800632c:	d807      	bhi.n	800633e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800632e:	d008      	beq.n	8006342 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7) 
 8006330:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8006334:	4258      	negs	r0, r3
 8006336:	4158      	adcs	r0, r3
 8006338:	e7d9      	b.n	80062ee <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800633a:	2000      	movs	r0, #0
 800633c:	e7d7      	b.n	80062ee <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800633e:	2003      	movs	r0, #3
 8006340:	e7d5      	b.n	80062ee <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8006342:	2002      	movs	r0, #2
 8006344:	e7d3      	b.n	80062ee <RCC_SetFlashLatencyFromMSIRange+0x22>
 8006346:	bf00      	nop
 8006348:	40021000 	.word	0x40021000
 800634c:	40022000 	.word	0x40022000

08006350 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8006350:	4b46      	ldr	r3, [pc, #280]	; (800646c <HAL_RCC_GetSysClockFreq+0x11c>)
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	f012 0f0c 	tst.w	r2, #12
{
 8006358:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800635a:	d009      	beq.n	8006370 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8006362:	2a0c      	cmp	r2, #12
 8006364:	d148      	bne.n	80063f8 <HAL_RCC_GetSysClockFreq+0xa8>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	f002 0203 	and.w	r2, r2, #3
 800636c:	2a01      	cmp	r2, #1
 800636e:	d143      	bne.n	80063f8 <HAL_RCC_GetSysClockFreq+0xa8>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	0712      	lsls	r2, r2, #28
 8006374:	d437      	bmi.n	80063e6 <HAL_RCC_GetSysClockFreq+0x96>
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 8006376:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800637a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800637e:	fa91 f1a1 	rbit	r1, r1
 8006382:	fab1 f181 	clz	r1, r1
 8006386:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 800638a:	40ca      	lsrs	r2, r1
    msirange = MSIRangeTable[msirange];
 800638c:	4938      	ldr	r1, [pc, #224]	; (8006470 <HAL_RCC_GetSysClockFreq+0x120>)
 800638e:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8006392:	689a      	ldr	r2, [r3, #8]
      sysclockfreq = msirange;
 8006394:	f012 0f0c 	tst.w	r2, #12
 8006398:	bf0c      	ite	eq
 800639a:	4620      	moveq	r0, r4
 800639c:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	f002 020c 	and.w	r2, r2, #12
 80063a4:	2a0c      	cmp	r2, #12
 80063a6:	d154      	bne.n	8006452 <HAL_RCC_GetSysClockFreq+0x102>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80063a8:	68da      	ldr	r2, [r3, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 80063aa:	68d8      	ldr	r0, [r3, #12]
 80063ac:	2170      	movs	r1, #112	; 0x70
 80063ae:	fa91 f1a1 	rbit	r1, r1
 80063b2:	fab1 f181 	clz	r1, r1
 80063b6:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80063ba:	40c8      	lsrs	r0, r1
 80063bc:	1c41      	adds	r1, r0, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80063be:	f002 0003 	and.w	r0, r2, #3
    switch (pllsource)
 80063c2:	2802      	cmp	r0, #2
 80063c4:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80063c8:	d028      	beq.n	800641c <HAL_RCC_GetSysClockFreq+0xcc>
 80063ca:	2803      	cmp	r0, #3
 80063cc:	d042      	beq.n	8006454 <HAL_RCC_GetSysClockFreq+0x104>
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80063ce:	68d8      	ldr	r0, [r3, #12]
 80063d0:	fa92 f2a2 	rbit	r2, r2
 80063d4:	fab2 f282 	clz	r2, r2
 80063d8:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 80063dc:	40d0      	lsrs	r0, r2
 80063de:	fbb4 f1f1 	udiv	r1, r4, r1
 80063e2:	4348      	muls	r0, r1
      break;
 80063e4:	e027      	b.n	8006436 <HAL_RCC_GetSysClockFreq+0xe6>
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	21f0      	movs	r1, #240	; 0xf0
 80063ea:	fa91 f1a1 	rbit	r1, r1
 80063ee:	fab1 f181 	clz	r1, r1
 80063f2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80063f6:	e7c8      	b.n	800638a <HAL_RCC_GetSysClockFreq+0x3a>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	f002 020c 	and.w	r2, r2, #12
 80063fe:	2a04      	cmp	r2, #4
 8006400:	d007      	beq.n	8006412 <HAL_RCC_GetSysClockFreq+0xc2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	f002 020c 	and.w	r2, r2, #12
 8006408:	2a08      	cmp	r2, #8
 800640a:	d104      	bne.n	8006416 <HAL_RCC_GetSysClockFreq+0xc6>
    sysclockfreq = HSE_VALUE;
 800640c:	4819      	ldr	r0, [pc, #100]	; (8006474 <HAL_RCC_GetSysClockFreq+0x124>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800640e:	2400      	movs	r4, #0
 8006410:	e7c5      	b.n	800639e <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8006412:	4819      	ldr	r0, [pc, #100]	; (8006478 <HAL_RCC_GetSysClockFreq+0x128>)
 8006414:	e7fb      	b.n	800640e <HAL_RCC_GetSysClockFreq+0xbe>
  uint32_t sysclockfreq = 0U;
 8006416:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8006418:	4604      	mov	r4, r0
 800641a:	e7c0      	b.n	800639e <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 800641c:	68d8      	ldr	r0, [r3, #12]
 800641e:	fa92 f2a2 	rbit	r2, r2
 8006422:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 8006426:	fab2 f282 	clz	r2, r2
 800642a:	fa20 f202 	lsr.w	r2, r0, r2
 800642e:	4812      	ldr	r0, [pc, #72]	; (8006478 <HAL_RCC_GetSysClockFreq+0x128>)
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8006430:	fbb0 f0f1 	udiv	r0, r0, r1
 8006434:	4350      	muls	r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800643c:	fa92 f2a2 	rbit	r2, r2
 8006440:	fab2 f282 	clz	r2, r2
 8006444:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8006448:	40d3      	lsrs	r3, r2
 800644a:	3301      	adds	r3, #1
 800644c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800644e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8006452:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8006454:	68d8      	ldr	r0, [r3, #12]
 8006456:	fa92 f2a2 	rbit	r2, r2
 800645a:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 800645e:	fab2 f282 	clz	r2, r2
 8006462:	fa20 f202 	lsr.w	r2, r0, r2
 8006466:	4803      	ldr	r0, [pc, #12]	; (8006474 <HAL_RCC_GetSysClockFreq+0x124>)
 8006468:	e7e2      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0xe0>
 800646a:	bf00      	nop
 800646c:	40021000 	.word	0x40021000
 8006470:	0800cca8 	.word	0x0800cca8
 8006474:	007a1200 	.word	0x007a1200
 8006478:	00f42400 	.word	0x00f42400

0800647c <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800647c:	6803      	ldr	r3, [r0, #0]
{
 800647e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006482:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006484:	06d8      	lsls	r0, r3, #27
 8006486:	d541      	bpl.n	800650c <HAL_RCC_OscConfig+0x90>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8006488:	4ca5      	ldr	r4, [pc, #660]	; (8006720 <HAL_RCC_OscConfig+0x2a4>)
 800648a:	68a3      	ldr	r3, [r4, #8]
 800648c:	f013 0f0c 	tst.w	r3, #12
 8006490:	d166      	bne.n	8006560 <HAL_RCC_OscConfig+0xe4>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	0799      	lsls	r1, r3, #30
 8006496:	d505      	bpl.n	80064a4 <HAL_RCC_OscConfig+0x28>
 8006498:	69ab      	ldr	r3, [r5, #24]
 800649a:	b91b      	cbnz	r3, 80064a4 <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 800649c:	2001      	movs	r0, #1
}
 800649e:	b002      	add	sp, #8
 80064a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	6a28      	ldr	r0, [r5, #32]
 80064a8:	071a      	lsls	r2, r3, #28
 80064aa:	bf56      	itet	pl
 80064ac:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80064b0:	6823      	ldrmi	r3, [r4, #0]
 80064b2:	091b      	lsrpl	r3, r3, #4
 80064b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064b8:	4283      	cmp	r3, r0
 80064ba:	d23c      	bcs.n	8006536 <HAL_RCC_OscConfig+0xba>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064bc:	f7ff ff06 	bl	80062cc <RCC_SetFlashLatencyFromMSIRange>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	d1eb      	bne.n	800649c <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	f043 0308 	orr.w	r3, r3, #8
 80064ca:	6023      	str	r3, [r4, #0]
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	6a2a      	ldr	r2, [r5, #32]
 80064d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064d4:	4313      	orrs	r3, r2
 80064d6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064d8:	6863      	ldr	r3, [r4, #4]
 80064da:	69ea      	ldr	r2, [r5, #28]
 80064dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80064e4:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80064e6:	f7ff ff33 	bl	8006350 <HAL_RCC_GetSysClockFreq>
 80064ea:	68a3      	ldr	r3, [r4, #8]
 80064ec:	22f0      	movs	r2, #240	; 0xf0
 80064ee:	fa92 f2a2 	rbit	r2, r2
 80064f2:	fab2 f282 	clz	r2, r2
 80064f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064fa:	40d3      	lsrs	r3, r2
 80064fc:	4a89      	ldr	r2, [pc, #548]	; (8006724 <HAL_RCC_OscConfig+0x2a8>)
 80064fe:	5cd3      	ldrb	r3, [r2, r3]
 8006500:	40d8      	lsrs	r0, r3
 8006502:	4b89      	ldr	r3, [pc, #548]	; (8006728 <HAL_RCC_OscConfig+0x2ac>)
 8006504:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8006506:	2000      	movs	r0, #0
 8006508:	f7fe feb0 	bl	800526c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	07de      	lsls	r6, r3, #31
 8006510:	d45b      	bmi.n	80065ca <HAL_RCC_OscConfig+0x14e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006512:	682b      	ldr	r3, [r5, #0]
 8006514:	079c      	lsls	r4, r3, #30
 8006516:	f100 80a3 	bmi.w	8006660 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800651a:	682b      	ldr	r3, [r5, #0]
 800651c:	0719      	lsls	r1, r3, #28
 800651e:	f100 80e7 	bmi.w	80066f0 <HAL_RCC_OscConfig+0x274>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006522:	682b      	ldr	r3, [r5, #0]
 8006524:	075a      	lsls	r2, r3, #29
 8006526:	f100 8115 	bmi.w	8006754 <HAL_RCC_OscConfig+0x2d8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800652a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800652c:	2a00      	cmp	r2, #0
 800652e:	f040 817c 	bne.w	800682a <HAL_RCC_OscConfig+0x3ae>
  return HAL_OK;
 8006532:	2000      	movs	r0, #0
 8006534:	e7b3      	b.n	800649e <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	f043 0308 	orr.w	r3, r3, #8
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006544:	4303      	orrs	r3, r0
 8006546:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006548:	6863      	ldr	r3, [r4, #4]
 800654a:	69ea      	ldr	r2, [r5, #28]
 800654c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006550:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006554:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006556:	f7ff feb9 	bl	80062cc <RCC_SetFlashLatencyFromMSIRange>
 800655a:	2800      	cmp	r0, #0
 800655c:	d0c3      	beq.n	80064e6 <HAL_RCC_OscConfig+0x6a>
 800655e:	e79d      	b.n	800649c <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006560:	69ab      	ldr	r3, [r5, #24]
 8006562:	b313      	cbz	r3, 80065aa <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_ENABLE();
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	f043 0301 	orr.w	r3, r3, #1
 800656a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800656c:	f7fe fea6 	bl	80052bc <HAL_GetTick>
 8006570:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	079b      	lsls	r3, r3, #30
 8006576:	d511      	bpl.n	800659c <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	f043 0308 	orr.w	r3, r3, #8
 800657e:	6023      	str	r3, [r4, #0]
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	6a2a      	ldr	r2, [r5, #32]
 8006584:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006588:	4313      	orrs	r3, r2
 800658a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800658c:	6863      	ldr	r3, [r4, #4]
 800658e:	69ea      	ldr	r2, [r5, #28]
 8006590:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006594:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006598:	6063      	str	r3, [r4, #4]
 800659a:	e7b7      	b.n	800650c <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800659c:	f7fe fe8e 	bl	80052bc <HAL_GetTick>
 80065a0:	1b80      	subs	r0, r0, r6
 80065a2:	2802      	cmp	r0, #2
 80065a4:	d9e5      	bls.n	8006572 <HAL_RCC_OscConfig+0xf6>
            return HAL_TIMEOUT;
 80065a6:	2003      	movs	r0, #3
 80065a8:	e779      	b.n	800649e <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	f023 0301 	bic.w	r3, r3, #1
 80065b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80065b2:	f7fe fe83 	bl	80052bc <HAL_GetTick>
 80065b6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	079f      	lsls	r7, r3, #30
 80065bc:	d5a6      	bpl.n	800650c <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065be:	f7fe fe7d 	bl	80052bc <HAL_GetTick>
 80065c2:	1b80      	subs	r0, r0, r6
 80065c4:	2802      	cmp	r0, #2
 80065c6:	d9f7      	bls.n	80065b8 <HAL_RCC_OscConfig+0x13c>
 80065c8:	e7ed      	b.n	80065a6 <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80065ca:	4c55      	ldr	r4, [pc, #340]	; (8006720 <HAL_RCC_OscConfig+0x2a4>)
 80065cc:	68a3      	ldr	r3, [r4, #8]
 80065ce:	f003 030c 	and.w	r3, r3, #12
 80065d2:	2b08      	cmp	r3, #8
 80065d4:	d009      	beq.n	80065ea <HAL_RCC_OscConfig+0x16e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80065d6:	68a3      	ldr	r3, [r4, #8]
 80065d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 80065dc:	2b0c      	cmp	r3, #12
 80065de:	d10b      	bne.n	80065f8 <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80065e0:	68e3      	ldr	r3, [r4, #12]
 80065e2:	f003 0303 	and.w	r3, r3, #3
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d106      	bne.n	80065f8 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	0398      	lsls	r0, r3, #14
 80065ee:	d590      	bpl.n	8006512 <HAL_RCC_OscConfig+0x96>
 80065f0:	686b      	ldr	r3, [r5, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d18d      	bne.n	8006512 <HAL_RCC_OscConfig+0x96>
 80065f6:	e751      	b.n	800649c <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065f8:	686b      	ldr	r3, [r5, #4]
 80065fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fe:	d110      	bne.n	8006622 <HAL_RCC_OscConfig+0x1a6>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006606:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006608:	f7fe fe58 	bl	80052bc <HAL_GetTick>
 800660c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	0399      	lsls	r1, r3, #14
 8006612:	f53f af7e 	bmi.w	8006512 <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006616:	f7fe fe51 	bl	80052bc <HAL_GetTick>
 800661a:	1b80      	subs	r0, r0, r6
 800661c:	2864      	cmp	r0, #100	; 0x64
 800661e:	d9f6      	bls.n	800660e <HAL_RCC_OscConfig+0x192>
 8006620:	e7c1      	b.n	80065a6 <HAL_RCC_OscConfig+0x12a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006622:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006626:	d104      	bne.n	8006632 <HAL_RCC_OscConfig+0x1b6>
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800662e:	6023      	str	r3, [r4, #0]
 8006630:	e7e6      	b.n	8006600 <HAL_RCC_OscConfig+0x184>
 8006632:	6822      	ldr	r2, [r4, #0]
 8006634:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006638:	6022      	str	r2, [r4, #0]
 800663a:	6822      	ldr	r2, [r4, #0]
 800663c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006640:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1e0      	bne.n	8006608 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8006646:	f7fe fe39 	bl	80052bc <HAL_GetTick>
 800664a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	039a      	lsls	r2, r3, #14
 8006650:	f57f af5f 	bpl.w	8006512 <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006654:	f7fe fe32 	bl	80052bc <HAL_GetTick>
 8006658:	1b80      	subs	r0, r0, r6
 800665a:	2864      	cmp	r0, #100	; 0x64
 800665c:	d9f6      	bls.n	800664c <HAL_RCC_OscConfig+0x1d0>
 800665e:	e7a2      	b.n	80065a6 <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8006660:	4c2f      	ldr	r4, [pc, #188]	; (8006720 <HAL_RCC_OscConfig+0x2a4>)
 8006662:	68a3      	ldr	r3, [r4, #8]
 8006664:	f003 030c 	and.w	r3, r3, #12
 8006668:	2b04      	cmp	r3, #4
 800666a:	d009      	beq.n	8006680 <HAL_RCC_OscConfig+0x204>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800666c:	68a3      	ldr	r3, [r4, #8]
 800666e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8006672:	2b0c      	cmp	r3, #12
 8006674:	d119      	bne.n	80066aa <HAL_RCC_OscConfig+0x22e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006676:	68e3      	ldr	r3, [r4, #12]
 8006678:	f003 0303 	and.w	r3, r3, #3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d114      	bne.n	80066aa <HAL_RCC_OscConfig+0x22e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	055b      	lsls	r3, r3, #21
 8006684:	d503      	bpl.n	800668e <HAL_RCC_OscConfig+0x212>
 8006686:	68eb      	ldr	r3, [r5, #12]
 8006688:	2b00      	cmp	r3, #0
 800668a:	f43f af07 	beq.w	800649c <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800668e:	6861      	ldr	r1, [r4, #4]
 8006690:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8006694:	fa93 f3a3 	rbit	r3, r3
 8006698:	fab3 f283 	clz	r2, r3
 800669c:	692b      	ldr	r3, [r5, #16]
 800669e:	4093      	lsls	r3, r2
 80066a0:	f021 52f8 	bic.w	r2, r1, #520093696	; 0x1f000000
 80066a4:	4313      	orrs	r3, r2
 80066a6:	6063      	str	r3, [r4, #4]
 80066a8:	e737      	b.n	800651a <HAL_RCC_OscConfig+0x9e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066aa:	68eb      	ldr	r3, [r5, #12]
 80066ac:	b17b      	cbz	r3, 80066ce <HAL_RCC_OscConfig+0x252>
        __HAL_RCC_HSI_ENABLE();
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066b4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80066b6:	f7fe fe01 	bl	80052bc <HAL_GetTick>
 80066ba:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	055f      	lsls	r7, r3, #21
 80066c0:	d4e5      	bmi.n	800668e <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066c2:	f7fe fdfb 	bl	80052bc <HAL_GetTick>
 80066c6:	1b80      	subs	r0, r0, r6
 80066c8:	2802      	cmp	r0, #2
 80066ca:	d9f7      	bls.n	80066bc <HAL_RCC_OscConfig+0x240>
 80066cc:	e76b      	b.n	80065a6 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_DISABLE();
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066d4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80066d6:	f7fe fdf1 	bl	80052bc <HAL_GetTick>
 80066da:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	0558      	lsls	r0, r3, #21
 80066e0:	f57f af1b 	bpl.w	800651a <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066e4:	f7fe fdea 	bl	80052bc <HAL_GetTick>
 80066e8:	1b80      	subs	r0, r0, r6
 80066ea:	2802      	cmp	r0, #2
 80066ec:	d9f6      	bls.n	80066dc <HAL_RCC_OscConfig+0x260>
 80066ee:	e75a      	b.n	80065a6 <HAL_RCC_OscConfig+0x12a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066f0:	696b      	ldr	r3, [r5, #20]
 80066f2:	4c0b      	ldr	r4, [pc, #44]	; (8006720 <HAL_RCC_OscConfig+0x2a4>)
 80066f4:	b1d3      	cbz	r3, 800672c <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_LSI_ENABLE();
 80066f6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80066fa:	f043 0301 	orr.w	r3, r3, #1
 80066fe:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006702:	f7fe fddb 	bl	80052bc <HAL_GetTick>
 8006706:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8006708:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800670c:	079b      	lsls	r3, r3, #30
 800670e:	f53f af08 	bmi.w	8006522 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006712:	f7fe fdd3 	bl	80052bc <HAL_GetTick>
 8006716:	1b80      	subs	r0, r0, r6
 8006718:	2802      	cmp	r0, #2
 800671a:	d9f5      	bls.n	8006708 <HAL_RCC_OscConfig+0x28c>
 800671c:	e743      	b.n	80065a6 <HAL_RCC_OscConfig+0x12a>
 800671e:	bf00      	nop
 8006720:	40021000 	.word	0x40021000
 8006724:	0800cc8d 	.word	0x0800cc8d
 8006728:	2000000c 	.word	0x2000000c
      __HAL_RCC_LSI_DISABLE();
 800672c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006730:	f023 0301 	bic.w	r3, r3, #1
 8006734:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006738:	f7fe fdc0 	bl	80052bc <HAL_GetTick>
 800673c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800673e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8006742:	079f      	lsls	r7, r3, #30
 8006744:	f57f aeed 	bpl.w	8006522 <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006748:	f7fe fdb8 	bl	80052bc <HAL_GetTick>
 800674c:	1b80      	subs	r0, r0, r6
 800674e:	2802      	cmp	r0, #2
 8006750:	d9f5      	bls.n	800673e <HAL_RCC_OscConfig+0x2c2>
 8006752:	e728      	b.n	80065a6 <HAL_RCC_OscConfig+0x12a>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006754:	4c66      	ldr	r4, [pc, #408]	; (80068f0 <HAL_RCC_OscConfig+0x474>)
 8006756:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006758:	00de      	lsls	r6, r3, #3
 800675a:	d427      	bmi.n	80067ac <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_PWR_CLK_ENABLE();
 800675c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800675e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006762:	65a3      	str	r3, [r4, #88]	; 0x58
 8006764:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800676a:	9301      	str	r3, [sp, #4]
 800676c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800676e:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006770:	4e60      	ldr	r6, [pc, #384]	; (80068f4 <HAL_RCC_OscConfig+0x478>)
 8006772:	6833      	ldr	r3, [r6, #0]
 8006774:	05d8      	lsls	r0, r3, #23
 8006776:	d51b      	bpl.n	80067b0 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006778:	68ab      	ldr	r3, [r5, #8]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d129      	bne.n	80067d2 <HAL_RCC_OscConfig+0x356>
 800677e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006782:	f043 0301 	orr.w	r3, r3, #1
 8006786:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800678a:	f7fe fd97 	bl	80052bc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800678e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006792:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8006794:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006798:	079a      	lsls	r2, r3, #30
 800679a:	d540      	bpl.n	800681e <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 800679c:	2f00      	cmp	r7, #0
 800679e:	f43f aec4 	beq.w	800652a <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_PWR_CLK_DISABLE();
 80067a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067a8:	65a3      	str	r3, [r4, #88]	; 0x58
 80067aa:	e6be      	b.n	800652a <HAL_RCC_OscConfig+0xae>
    FlagStatus       pwrclkchanged = RESET;
 80067ac:	2700      	movs	r7, #0
 80067ae:	e7df      	b.n	8006770 <HAL_RCC_OscConfig+0x2f4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067b0:	6833      	ldr	r3, [r6, #0]
 80067b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80067b8:	f7fe fd80 	bl	80052bc <HAL_GetTick>
 80067bc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067be:	6833      	ldr	r3, [r6, #0]
 80067c0:	05d9      	lsls	r1, r3, #23
 80067c2:	d4d9      	bmi.n	8006778 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c4:	f7fe fd7a 	bl	80052bc <HAL_GetTick>
 80067c8:	eba0 0008 	sub.w	r0, r0, r8
 80067cc:	2802      	cmp	r0, #2
 80067ce:	d9f6      	bls.n	80067be <HAL_RCC_OscConfig+0x342>
 80067d0:	e6e9      	b.n	80065a6 <HAL_RCC_OscConfig+0x12a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067d2:	2b05      	cmp	r3, #5
 80067d4:	d106      	bne.n	80067e4 <HAL_RCC_OscConfig+0x368>
 80067d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80067da:	f043 0304 	orr.w	r3, r3, #4
 80067de:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80067e2:	e7cc      	b.n	800677e <HAL_RCC_OscConfig+0x302>
 80067e4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80067e8:	f022 0201 	bic.w	r2, r2, #1
 80067ec:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80067f0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80067f4:	f022 0204 	bic.w	r2, r2, #4
 80067f8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1c4      	bne.n	800678a <HAL_RCC_OscConfig+0x30e>
      tickstart = HAL_GetTick();
 8006800:	f7fe fd5c 	bl	80052bc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006804:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006808:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800680a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800680e:	079b      	lsls	r3, r3, #30
 8006810:	d5c4      	bpl.n	800679c <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006812:	f7fe fd53 	bl	80052bc <HAL_GetTick>
 8006816:	1b80      	subs	r0, r0, r6
 8006818:	4540      	cmp	r0, r8
 800681a:	d9f6      	bls.n	800680a <HAL_RCC_OscConfig+0x38e>
 800681c:	e6c3      	b.n	80065a6 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800681e:	f7fe fd4d 	bl	80052bc <HAL_GetTick>
 8006822:	1b80      	subs	r0, r0, r6
 8006824:	4540      	cmp	r0, r8
 8006826:	d9b5      	bls.n	8006794 <HAL_RCC_OscConfig+0x318>
 8006828:	e6bd      	b.n	80065a6 <HAL_RCC_OscConfig+0x12a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800682a:	4c31      	ldr	r4, [pc, #196]	; (80068f0 <HAL_RCC_OscConfig+0x474>)
 800682c:	68a3      	ldr	r3, [r4, #8]
 800682e:	f003 030c 	and.w	r3, r3, #12
 8006832:	2b0c      	cmp	r3, #12
 8006834:	f43f ae32 	beq.w	800649c <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8006838:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800683a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800683c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006840:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006842:	d137      	bne.n	80068b4 <HAL_RCC_OscConfig+0x438>
        tickstart = HAL_GetTick();
 8006844:	f7fe fd3a 	bl	80052bc <HAL_GetTick>
 8006848:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	019f      	lsls	r7, r3, #6
 800684e:	d42b      	bmi.n	80068a8 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006850:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8006852:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006854:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006858:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800685a:	3a01      	subs	r2, #1
 800685c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006860:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8006862:	0912      	lsrs	r2, r2, #4
 8006864:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8006868:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800686a:	0852      	lsrs	r2, r2, #1
 800686c:	3a01      	subs	r2, #1
 800686e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8006872:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8006874:	0852      	lsrs	r2, r2, #1
 8006876:	3a01      	subs	r2, #1
 8006878:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800687c:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006884:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006886:	68e3      	ldr	r3, [r4, #12]
 8006888:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800688c:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800688e:	f7fe fd15 	bl	80052bc <HAL_GetTick>
 8006892:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	0198      	lsls	r0, r3, #6
 8006898:	f53f ae4b 	bmi.w	8006532 <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800689c:	f7fe fd0e 	bl	80052bc <HAL_GetTick>
 80068a0:	1b40      	subs	r0, r0, r5
 80068a2:	2802      	cmp	r0, #2
 80068a4:	d9f6      	bls.n	8006894 <HAL_RCC_OscConfig+0x418>
 80068a6:	e67e      	b.n	80065a6 <HAL_RCC_OscConfig+0x12a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068a8:	f7fe fd08 	bl	80052bc <HAL_GetTick>
 80068ac:	1b80      	subs	r0, r0, r6
 80068ae:	2802      	cmp	r0, #2
 80068b0:	d9cb      	bls.n	800684a <HAL_RCC_OscConfig+0x3ce>
 80068b2:	e678      	b.n	80065a6 <HAL_RCC_OscConfig+0x12a>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	0119      	lsls	r1, r3, #4
 80068b8:	d406      	bmi.n	80068c8 <HAL_RCC_OscConfig+0x44c>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 80068ba:	6823      	ldr	r3, [r4, #0]
           && 
 80068bc:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80068be:	bf5e      	ittt	pl
 80068c0:	68e3      	ldrpl	r3, [r4, #12]
 80068c2:	f023 0303 	bicpl.w	r3, r3, #3
 80068c6:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80068c8:	68e3      	ldr	r3, [r4, #12]
 80068ca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80068ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068d2:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80068d4:	f7fe fcf2 	bl	80052bc <HAL_GetTick>
 80068d8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	019b      	lsls	r3, r3, #6
 80068de:	f57f ae28 	bpl.w	8006532 <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068e2:	f7fe fceb 	bl	80052bc <HAL_GetTick>
 80068e6:	1b40      	subs	r0, r0, r5
 80068e8:	2802      	cmp	r0, #2
 80068ea:	d9f6      	bls.n	80068da <HAL_RCC_OscConfig+0x45e>
 80068ec:	e65b      	b.n	80065a6 <HAL_RCC_OscConfig+0x12a>
 80068ee:	bf00      	nop
 80068f0:	40021000 	.word	0x40021000
 80068f4:	40007000 	.word	0x40007000

080068f8 <HAL_RCC_GetHCLKFreq>:
}
 80068f8:	4b01      	ldr	r3, [pc, #4]	; (8006900 <HAL_RCC_GetHCLKFreq+0x8>)
 80068fa:	6818      	ldr	r0, [r3, #0]
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	2000000c 	.word	0x2000000c

08006904 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8006904:	4b08      	ldr	r3, [pc, #32]	; (8006928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006906:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	fa92 f2a2 	rbit	r2, r2
 8006910:	fab2 f282 	clz	r2, r2
 8006914:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006918:	40d3      	lsrs	r3, r2
 800691a:	4a04      	ldr	r2, [pc, #16]	; (800692c <HAL_RCC_GetPCLK1Freq+0x28>)
 800691c:	5cd3      	ldrb	r3, [r2, r3]
 800691e:	4a04      	ldr	r2, [pc, #16]	; (8006930 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8006920:	6810      	ldr	r0, [r2, #0]
}
 8006922:	40d8      	lsrs	r0, r3
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40021000 	.word	0x40021000
 800692c:	0800cc9d 	.word	0x0800cc9d
 8006930:	2000000c 	.word	0x2000000c

08006934 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8006934:	4b08      	ldr	r3, [pc, #32]	; (8006958 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006936:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	fa92 f2a2 	rbit	r2, r2
 8006940:	fab2 f282 	clz	r2, r2
 8006944:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006948:	40d3      	lsrs	r3, r2
 800694a:	4a04      	ldr	r2, [pc, #16]	; (800695c <HAL_RCC_GetPCLK2Freq+0x28>)
 800694c:	5cd3      	ldrb	r3, [r2, r3]
 800694e:	4a04      	ldr	r2, [pc, #16]	; (8006960 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8006950:	6810      	ldr	r0, [r2, #0]
}
 8006952:	40d8      	lsrs	r0, r3
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	40021000 	.word	0x40021000
 800695c:	0800cc9d 	.word	0x0800cc9d
 8006960:	2000000c 	.word	0x2000000c

08006964 <HAL_RCCEx_EnableMSIPLLMode>:
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006964:	4a02      	ldr	r2, [pc, #8]	; (8006970 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8006966:	6813      	ldr	r3, [r2, #0]
 8006968:	f043 0304 	orr.w	r3, r3, #4
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	4770      	bx	lr
 8006970:	40021000 	.word	0x40021000

08006974 <SD_CmdResp2Error>:
  */
static HAL_SD_ErrorTypedef SD_CmdResp2Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8006974:	6803      	ldr	r3, [r0, #0]
 8006976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006978:	f012 0f45 	tst.w	r2, #69	; 0x45
 800697c:	d0fb      	beq.n	8006976 <SD_CmdResp2Error+0x2>
  {
  }
    
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 800697e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006980:	0752      	lsls	r2, r2, #29
 8006982:	d503      	bpl.n	800698c <SD_CmdResp2Error+0x18>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8006984:	2204      	movs	r2, #4
 8006986:	639a      	str	r2, [r3, #56]	; 0x38
    
    return errorstate;
 8006988:	2003      	movs	r0, #3
 800698a:	4770      	bx	lr
  }
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 800698c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800698e:	f010 0001 	ands.w	r0, r0, #1
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8006992:	bf15      	itete	ne
 8006994:	2001      	movne	r0, #1
  {
    /* No error flag set */
  }  
  
  /* Clear all the static flags */
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006996:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 800699a:	6398      	strne	r0, [r3, #56]	; 0x38
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800699c:	639a      	streq	r2, [r3, #56]	; 0x38
  
  return errorstate;
}
 800699e:	4770      	bx	lr

080069a0 <SD_CmdResp1Error>:
{
 80069a0:	b570      	push	{r4, r5, r6, lr}
 80069a2:	4605      	mov	r5, r0
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 80069a4:	6800      	ldr	r0, [r0, #0]
{
 80069a6:	460e      	mov	r6, r1
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 80069a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80069aa:	f013 0f45 	tst.w	r3, #69	; 0x45
 80069ae:	d0fb      	beq.n	80069a8 <SD_CmdResp1Error+0x8>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 80069b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80069b2:	075b      	lsls	r3, r3, #29
 80069b4:	d503      	bpl.n	80069be <SD_CmdResp1Error+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 80069b6:	2304      	movs	r3, #4
 80069b8:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 80069ba:	2003      	movs	r0, #3
 80069bc:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 80069be:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80069c0:	f014 0401 	ands.w	r4, r4, #1
 80069c4:	d003      	beq.n	80069ce <SD_CmdResp1Error+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 80069c6:	2301      	movs	r3, #1
 80069c8:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 80069ca:	4618      	mov	r0, r3
 80069cc:	bd70      	pop	{r4, r5, r6, pc}
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 80069ce:	f001 fc94 	bl	80082fa <SDMMC_GetCommandResponse>
 80069d2:	42b0      	cmp	r0, r6
 80069d4:	d001      	beq.n	80069da <SD_CmdResp1Error+0x3a>
    return errorstate;
 80069d6:	2010      	movs	r0, #16
 80069d8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069da:	6828      	ldr	r0, [r5, #0]
 80069dc:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80069e0:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80069e2:	4621      	mov	r1, r4
 80069e4:	f001 fc8c 	bl	8008300 <SDMMC_GetResponse>
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 80069e8:	4b27      	ldr	r3, [pc, #156]	; (8006a88 <SD_CmdResp1Error+0xe8>)
 80069ea:	4003      	ands	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0ec      	beq.n	80069ca <SD_CmdResp1Error+0x2a>
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 80069f0:	2800      	cmp	r0, #0
 80069f2:	db27      	blt.n	8006a44 <SD_CmdResp1Error+0xa4>
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 80069f4:	0045      	lsls	r5, r0, #1
 80069f6:	d427      	bmi.n	8006a48 <SD_CmdResp1Error+0xa8>
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 80069f8:	0084      	lsls	r4, r0, #2
 80069fa:	d427      	bmi.n	8006a4c <SD_CmdResp1Error+0xac>
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 80069fc:	00c1      	lsls	r1, r0, #3
 80069fe:	d427      	bmi.n	8006a50 <SD_CmdResp1Error+0xb0>
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 8006a00:	0102      	lsls	r2, r0, #4
 8006a02:	d427      	bmi.n	8006a54 <SD_CmdResp1Error+0xb4>
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 8006a04:	0143      	lsls	r3, r0, #5
 8006a06:	d427      	bmi.n	8006a58 <SD_CmdResp1Error+0xb8>
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 8006a08:	01c6      	lsls	r6, r0, #7
 8006a0a:	d427      	bmi.n	8006a5c <SD_CmdResp1Error+0xbc>
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 8006a0c:	0205      	lsls	r5, r0, #8
 8006a0e:	d427      	bmi.n	8006a60 <SD_CmdResp1Error+0xc0>
  if((response_r1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 8006a10:	0244      	lsls	r4, r0, #9
 8006a12:	d4e0      	bmi.n	80069d6 <SD_CmdResp1Error+0x36>
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 8006a14:	0281      	lsls	r1, r0, #10
 8006a16:	d425      	bmi.n	8006a64 <SD_CmdResp1Error+0xc4>
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 8006a18:	02c2      	lsls	r2, r0, #11
 8006a1a:	d425      	bmi.n	8006a68 <SD_CmdResp1Error+0xc8>
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 8006a1c:	0303      	lsls	r3, r0, #12
 8006a1e:	d425      	bmi.n	8006a6c <SD_CmdResp1Error+0xcc>
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 8006a20:	0346      	lsls	r6, r0, #13
 8006a22:	d425      	bmi.n	8006a70 <SD_CmdResp1Error+0xd0>
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 8006a24:	0385      	lsls	r5, r0, #14
 8006a26:	d425      	bmi.n	8006a74 <SD_CmdResp1Error+0xd4>
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 8006a28:	03c4      	lsls	r4, r0, #15
 8006a2a:	d425      	bmi.n	8006a78 <SD_CmdResp1Error+0xd8>
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 8006a2c:	0401      	lsls	r1, r0, #16
 8006a2e:	d425      	bmi.n	8006a7c <SD_CmdResp1Error+0xdc>
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 8006a30:	0442      	lsls	r2, r0, #17
 8006a32:	d425      	bmi.n	8006a80 <SD_CmdResp1Error+0xe0>
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 8006a34:	0483      	lsls	r3, r0, #18
 8006a36:	d425      	bmi.n	8006a84 <SD_CmdResp1Error+0xe4>
    return(SD_AKE_SEQ_ERROR);
 8006a38:	f010 0f08 	tst.w	r0, #8
 8006a3c:	bf0c      	ite	eq
 8006a3e:	2000      	moveq	r0, #0
 8006a40:	201a      	movne	r0, #26
 8006a42:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ADDR_OUT_OF_RANGE);
 8006a44:	201c      	movs	r0, #28
 8006a46:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ADDR_MISALIGNED);
 8006a48:	2009      	movs	r0, #9
 8006a4a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_BLOCK_LEN_ERR);
 8006a4c:	200a      	movs	r0, #10
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ERASE_SEQ_ERR);
 8006a50:	200b      	movs	r0, #11
 8006a52:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_BAD_ERASE_PARAM);
 8006a54:	200c      	movs	r0, #12
 8006a56:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_WRITE_PROT_VIOLATION);
 8006a58:	200d      	movs	r0, #13
 8006a5a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_LOCK_UNLOCK_FAILED);
 8006a5c:	200e      	movs	r0, #14
 8006a5e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_COM_CRC_FAILED);
 8006a60:	200f      	movs	r0, #15
 8006a62:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CARD_ECC_FAILED);
 8006a64:	2011      	movs	r0, #17
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CC_ERROR);
 8006a68:	2012      	movs	r0, #18
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_GENERAL_UNKNOWN_ERROR);
 8006a6c:	2013      	movs	r0, #19
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_STREAM_READ_UNDERRUN);
 8006a70:	2014      	movs	r0, #20
 8006a72:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_STREAM_WRITE_OVERRUN);
 8006a74:	2015      	movs	r0, #21
 8006a76:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CID_CSD_OVERWRITE);
 8006a78:	2016      	movs	r0, #22
 8006a7a:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_WP_ERASE_SKIP);
 8006a7c:	2017      	movs	r0, #23
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_CARD_ECC_DISABLED);
 8006a80:	2018      	movs	r0, #24
 8006a82:	bd70      	pop	{r4, r5, r6, pc}
    return(SD_ERASE_RESET);
 8006a84:	2019      	movs	r0, #25
}
 8006a86:	bd70      	pop	{r4, r5, r6, pc}
 8006a88:	fdffe008 	.word	0xfdffe008

08006a8c <SD_FindSCR>:
  * @param  hsd: SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval SD Card error state
  */
static HAL_SD_ErrorTypedef SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a90:	b08e      	sub	sp, #56	; 0x38
  SDMMC_CmdInitTypeDef  sdmmc_cmdinitstructure;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 8006a92:	2300      	movs	r3, #0
  
  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006a94:	2410      	movs	r4, #16
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006a96:	2240      	movs	r2, #64	; 0x40
{
 8006a98:	4606      	mov	r6, r0
  uint32_t tempscr[2] = {0, 0};
 8006a9a:	9301      	str	r3, [sp, #4]
 8006a9c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a9e:	9306      	str	r3, [sp, #24]
{
 8006aa0:	460d      	mov	r5, r1
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006aa6:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
 8006aa8:	2708      	movs	r7, #8
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006aaa:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006aac:	9404      	str	r4, [sp, #16]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006aae:	9205      	str	r2, [sp, #20]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006ab0:	9307      	str	r3, [sp, #28]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)8;
 8006ab2:	9703      	str	r7, [sp, #12]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ab4:	f001 fc0f 	bl	80082d6 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8006ab8:	4621      	mov	r1, r4
 8006aba:	4630      	mov	r0, r6
 8006abc:	f7ff ff70 	bl	80069a0 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	d138      	bne.n	8006b38 <SD_FindSCR+0xac>
  {
    return errorstate;
  }
  
  /* Send CMD55 APP_CMD with argument as card's RCA */
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8006ac6:	6a73      	ldr	r3, [r6, #36]	; 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ac8:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8006aca:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006acc:	2437      	movs	r4, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ace:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8006ad0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006ad2:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ad4:	f001 fbff 	bl	80082d6 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8006ad8:	4621      	mov	r1, r4
 8006ada:	4630      	mov	r0, r6
 8006adc:	f7ff ff60 	bl	80069a0 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	bb48      	cbnz	r0, 8006b38 <SD_FindSCR+0xac>
  {
    return errorstate;
  }
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8006ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae8:	9308      	str	r3, [sp, #32]
  sdmmc_datainitstructure.DataLength    = 8;
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006aea:	2330      	movs	r3, #48	; 0x30
 8006aec:	930a      	str	r3, [sp, #40]	; 0x28
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006aee:	2302      	movs	r3, #2
 8006af0:	930b      	str	r3, [sp, #44]	; 0x2c
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006af2:	900c      	str	r0, [sp, #48]	; 0x30
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006af4:	2301      	movs	r3, #1
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006af6:	a908      	add	r1, sp, #32
 8006af8:	6830      	ldr	r0, [r6, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006afa:	930d      	str	r3, [sp, #52]	; 0x34
  sdmmc_datainitstructure.DataLength    = 8;
 8006afc:	9709      	str	r7, [sp, #36]	; 0x24
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006afe:	f001 fc09 	bl	8008314 <SDMMC_DataConfig>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  sdmmc_cmdinitstructure.Argument         = 0;
 8006b02:	9403      	str	r4, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b04:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8006b06:	2433      	movs	r4, #51	; 0x33
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b08:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8006b0a:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b0c:	f001 fbe3 	bl	80082d6 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SD_APP_SEND_SCR);
 8006b10:	4621      	mov	r1, r4
 8006b12:	4630      	mov	r0, r6
 8006b14:	f7ff ff44 	bl	80069a0 <SD_CmdResp1Error>
  
  if(errorstate != SD_OK)
 8006b18:	4604      	mov	r4, r0
 8006b1a:	b968      	cbnz	r0, 8006b38 <SD_FindSCR+0xac>
 8006b1c:	466f      	mov	r7, sp
  {
    return errorstate;
  }
  
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006b1e:	f240 482a 	movw	r8, #1066	; 0x42a
 8006b22:	6830      	ldr	r0, [r6, #0]
 8006b24:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006b26:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006b2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006b2c:	d008      	beq.n	8006b40 <SD_FindSCR+0xb4>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
      index++;
    }
  }
  
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006b2e:	0719      	lsls	r1, r3, #28
 8006b30:	d50d      	bpl.n	8006b4e <SD_FindSCR+0xc2>
  {
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006b32:	2308      	movs	r3, #8
 8006b34:	6383      	str	r3, [r0, #56]	; 0x38
    
    errorstate = SD_DATA_TIMEOUT;
    
    return errorstate;
 8006b36:	2404      	movs	r4, #4
  
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
    ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
  
  return errorstate;
}
 8006b38:	4620      	mov	r0, r4
 8006b3a:	b00e      	add	sp, #56	; 0x38
 8006b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006b40:	029b      	lsls	r3, r3, #10
 8006b42:	d5ef      	bpl.n	8006b24 <SD_FindSCR+0x98>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006b44:	f001 fbbc 	bl	80082c0 <SDMMC_ReadFIFO>
 8006b48:	f847 0f04 	str.w	r0, [r7, #4]!
 8006b4c:	e7e9      	b.n	8006b22 <SD_FindSCR+0x96>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006b4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006b50:	079a      	lsls	r2, r3, #30
 8006b52:	d502      	bpl.n	8006b5a <SD_FindSCR+0xce>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006b54:	2402      	movs	r4, #2
 8006b56:	6384      	str	r4, [r0, #56]	; 0x38
    return errorstate;
 8006b58:	e7ee      	b.n	8006b38 <SD_FindSCR+0xac>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006b5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006b5c:	069b      	lsls	r3, r3, #26
 8006b5e:	d503      	bpl.n	8006b68 <SD_FindSCR+0xdc>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006b60:	2320      	movs	r3, #32
 8006b62:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8006b64:	2406      	movs	r4, #6
 8006b66:	e7e7      	b.n	8006b38 <SD_FindSCR+0xac>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b68:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006b6c:	6383      	str	r3, [r0, #56]	; 0x38
 8006b6e:	9b01      	ldr	r3, [sp, #4]
 8006b70:	ba1b      	rev	r3, r3
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 8006b72:	606b      	str	r3, [r5, #4]
 8006b74:	9b02      	ldr	r3, [sp, #8]
 8006b76:	ba1b      	rev	r3, r3
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 8006b78:	602b      	str	r3, [r5, #0]
  return errorstate;
 8006b7a:	e7dd      	b.n	8006b38 <SD_FindSCR+0xac>

08006b7c <HAL_SD_ReadBlocks_DMA>:
{
 8006b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b80:	b08d      	sub	sp, #52	; 0x34
  hsd->Instance->DCTRL = 0;
 8006b82:	6806      	ldr	r6, [r0, #0]
{
 8006b84:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8006b86:	9d14      	ldr	r5, [sp, #80]	; 0x50
  if(NumberOfBlocks > 1)
 8006b88:	2f01      	cmp	r7, #1
{
 8006b8a:	4699      	mov	r9, r3
  hsd->Instance->DCTRL = 0;
 8006b8c:	f04f 0300 	mov.w	r3, #0
 8006b90:	62f3      	str	r3, [r6, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 8006b92:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 8006b94:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK; 
 8006b96:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdOperation = SD_READ_MULTIPLE_BLOCK;
 8006b98:	bf88      	it	hi
 8006b9a:	2301      	movhi	r3, #1
    hsd->SdOperation = SD_READ_SINGLE_BLOCK;
 8006b9c:	6543      	str	r3, [r0, #84]	; 0x54
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8006b9e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8006ba0:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 8006ba4:	63f3      	str	r3, [r6, #60]	; 0x3c
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8006ba6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
{
 8006ba8:	4604      	mov	r4, r0
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8006baa:	f043 0308 	orr.w	r3, r3, #8
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 8006bae:	6d80      	ldr	r0, [r0, #88]	; 0x58
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8006bb0:	62f3      	str	r3, [r6, #44]	; 0x2c
  hsd->hdmarx->XferCpltCallback  = SD_DMA_RxCplt;
 8006bb2:	4b2d      	ldr	r3, [pc, #180]	; (8006c68 <HAL_SD_ReadBlocks_DMA+0xec>)
 8006bb4:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 8006bb6:	4690      	mov	r8, r2
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 8006bb8:	4b2c      	ldr	r3, [pc, #176]	; (8006c6c <HAL_SD_ReadBlocks_DMA+0xf0>)
  hsd->hdmarx->Instance->CCR &= ~DMA_MEMORY_TO_PERIPH;
 8006bba:	6802      	ldr	r2, [r0, #0]
  hsd->hdmarx->XferErrorCallback = SD_DMA_RxError;
 8006bbc:	6343      	str	r3, [r0, #52]	; 0x34
  hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	6083      	str	r3, [r0, #8]
  hsd->hdmarx->Instance->CCR &= ~DMA_MEMORY_TO_PERIPH;
 8006bc2:	6813      	ldr	r3, [r2, #0]
 8006bc4:	f023 0310 	bic.w	r3, r3, #16
 8006bc8:	6013      	str	r3, [r2, #0]
  HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pReadBuffer, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 8006bca:	fb05 f307 	mul.w	r3, r5, r7
 8006bce:	460a      	mov	r2, r1
 8006bd0:	089b      	lsrs	r3, r3, #2
 8006bd2:	f106 0180 	add.w	r1, r6, #128	; 0x80
 8006bd6:	f7fe fcb9 	bl	800554c <HAL_DMA_Start_IT>
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006bda:	6a23      	ldr	r3, [r4, #32]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006bdc:	6820      	ldr	r0, [r4, #0]
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006bde:	2b02      	cmp	r3, #2
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006be0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006be4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006be6:	f04f 0300 	mov.w	r3, #0
    ReadAddr /= 512;
 8006bea:	bf04      	itt	eq
 8006bec:	ea4f 2858 	moveq.w	r8, r8, lsr #9
    BlockSize = 512;
 8006bf0:	f44f 7500 	moveq.w	r5, #512	; 0x200
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006bf4:	f04f 0610 	mov.w	r6, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bf8:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006bfa:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    ReadAddr /= 512;
 8006c00:	bf08      	it	eq
 8006c02:	ea48 58c9 	orreq.w	r8, r8, r9, lsl #23
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8006c06:	9501      	str	r5, [sp, #4]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006c08:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006c0a:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c0c:	f001 fb63 	bl	80082d6 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8006c10:	4631      	mov	r1, r6
 8006c12:	4620      	mov	r0, r4
 8006c14:	f7ff fec4 	bl	80069a0 <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 8006c18:	bb10      	cbnz	r0, 8006c60 <HAL_SD_ReadBlocks_DMA+0xe4>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8006c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c1e:	9206      	str	r2, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006c20:	2290      	movs	r2, #144	; 0x90
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006c22:	2301      	movs	r3, #1
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006c24:	9208      	str	r2, [sp, #32]
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006c26:	900a      	str	r0, [sp, #40]	; 0x28
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006c28:	2202      	movs	r2, #2
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006c2a:	a906      	add	r1, sp, #24
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8006c2c:	437d      	muls	r5, r7
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006c2e:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006c30:	930b      	str	r3, [sp, #44]	; 0x2c
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006c32:	9209      	str	r2, [sp, #36]	; 0x24
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8006c34:	9507      	str	r5, [sp, #28]
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006c36:	f001 fb6d 	bl	8008314 <SDMMC_DataConfig>
  if(NumberOfBlocks > 1)
 8006c3a:	2f01      	cmp	r7, #1
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 8006c3c:	bf8c      	ite	hi
 8006c3e:	2312      	movhi	r3, #18
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 8006c40:	2311      	movls	r3, #17
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c42:	a901      	add	r1, sp, #4
 8006c44:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
 8006c46:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)ReadAddr;
 8006c48:	f8cd 8004 	str.w	r8, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c4c:	f001 fb43 	bl	80082d6 <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 8006c50:	2f01      	cmp	r7, #1
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_MULT_BLOCK);
 8006c52:	bf8c      	ite	hi
 8006c54:	2112      	movhi	r1, #18
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_SINGLE_BLOCK);
 8006c56:	2111      	movls	r1, #17
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f7ff fea1 	bl	80069a0 <SD_CmdResp1Error>
  hsd->SdTransferErr = errorstate;
 8006c5e:	64e0      	str	r0, [r4, #76]	; 0x4c
}
 8006c60:	b00d      	add	sp, #52	; 0x34
 8006c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c66:	bf00      	nop
 8006c68:	08006ddf 	.word	0x08006ddf
 8006c6c:	08006dfb 	.word	0x08006dfb

08006c70 <HAL_SD_WriteBlocks_DMA>:
{
 8006c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c74:	b08c      	sub	sp, #48	; 0x30
 8006c76:	4617      	mov	r7, r2
 8006c78:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  hsd->Instance->DCTRL = 0;
 8006c7a:	6802      	ldr	r2, [r0, #0]
{
 8006c7c:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  if(NumberOfBlocks > 1)
 8006c80:	2e01      	cmp	r6, #1
{
 8006c82:	461d      	mov	r5, r3
  hsd->Instance->DCTRL = 0;
 8006c84:	f04f 0300 	mov.w	r3, #0
 8006c88:	62d3      	str	r3, [r2, #44]	; 0x2c
  hsd->SdTransferCplt  = 0;
 8006c8a:	6483      	str	r3, [r0, #72]	; 0x48
  hsd->DmaTransferCplt = 0;
 8006c8c:	6503      	str	r3, [r0, #80]	; 0x50
  hsd->SdTransferErr   = SD_OK;
 8006c8e:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdOperation = SD_WRITE_MULTIPLE_BLOCK;
 8006c90:	bf8c      	ite	hi
 8006c92:	2303      	movhi	r3, #3
    hsd->SdOperation = SD_WRITE_SINGLE_BLOCK;
 8006c94:	2302      	movls	r3, #2
 8006c96:	6543      	str	r3, [r0, #84]	; 0x54
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8006c98:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
{
 8006c9a:	4604      	mov	r4, r0
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8006c9c:	f443 738d 	orr.w	r3, r3, #282	; 0x11a
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8006ca0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  __HAL_SD_SDMMC_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL |\
 8006ca2:	63d3      	str	r3, [r2, #60]	; 0x3c
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8006ca4:	4b2f      	ldr	r3, [pc, #188]	; (8006d64 <HAL_SD_WriteBlocks_DMA+0xf4>)
  hsd->hdmatx->Instance->CCR |= DMA_MEMORY_TO_PERIPH;
 8006ca6:	f8d0 e000 	ldr.w	lr, [r0]
  hsd->hdmatx->XferCpltCallback  = SD_DMA_TxCplt;
 8006caa:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsd->hdmatx->XferErrorCallback = SD_DMA_TxError;
 8006cac:	4b2e      	ldr	r3, [pc, #184]	; (8006d68 <HAL_SD_WriteBlocks_DMA+0xf8>)
 8006cae:	6343      	str	r3, [r0, #52]	; 0x34
  hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006cb0:	2310      	movs	r3, #16
 8006cb2:	6083      	str	r3, [r0, #8]
  hsd->hdmatx->Instance->CCR |= DMA_MEMORY_TO_PERIPH;
 8006cb4:	f8de 3000 	ldr.w	r3, [lr]
 8006cb8:	f043 0310 	orr.w	r3, r3, #16
 8006cbc:	f8ce 3000 	str.w	r3, [lr]
  HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pWriteBuffer, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BlockSize * NumberOfBlocks)/4);
 8006cc0:	fb08 f306 	mul.w	r3, r8, r6
 8006cc4:	3280      	adds	r2, #128	; 0x80
 8006cc6:	089b      	lsrs	r3, r3, #2
 8006cc8:	f7fe fc40 	bl	800554c <HAL_DMA_Start_IT>
  __HAL_SD_SDMMC_DMA_ENABLE(hsd);
 8006ccc:	6820      	ldr	r0, [r4, #0]
 8006cce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006cd0:	f043 0308 	orr.w	r3, r3, #8
 8006cd4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006cd6:	6a23      	ldr	r3, [r4, #32]
 8006cd8:	2b02      	cmp	r3, #2
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006cda:	f04f 0340 	mov.w	r3, #64	; 0x40
    WriteAddr /= 512;
 8006cde:	bf08      	it	eq
 8006ce0:	0a7f      	lsreq	r7, r7, #9
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006ce2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ce4:	f04f 0300 	mov.w	r3, #0
    WriteAddr /= 512;
 8006ce8:	bf04      	itt	eq
 8006cea:	ea47 57c5 	orreq.w	r7, r7, r5, lsl #23
    BlockSize = 512;
 8006cee:	f44f 7800 	moveq.w	r8, #512	; 0x200
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006cf2:	2510      	movs	r5, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006cf4:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006cf6:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006cfc:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006cfe:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8006d00:	f8cd 8004 	str.w	r8, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006d04:	f001 fae7 	bl	80082d6 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8006d08:	4629      	mov	r1, r5
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f7ff fe48 	bl	80069a0 <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 8006d10:	4605      	mov	r5, r0
 8006d12:	bb18      	cbnz	r0, 8006d5c <HAL_SD_WriteBlocks_DMA+0xec>
  if(NumberOfBlocks <= 1)
 8006d14:	2e01      	cmp	r6, #1
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 8006d16:	bf94      	ite	ls
 8006d18:	2318      	movls	r3, #24
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8006d1a:	2319      	movhi	r3, #25
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006d1c:	a901      	add	r1, sp, #4
 8006d1e:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8006d20:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
 8006d22:	9701      	str	r7, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006d24:	f001 fad7 	bl	80082d6 <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 8006d28:	2e01      	cmp	r6, #1
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_MULT_BLOCK);
 8006d2a:	bf8c      	ite	hi
 8006d2c:	2119      	movhi	r1, #25
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_SINGLE_BLOCK);
 8006d2e:	2118      	movls	r1, #24
 8006d30:	4620      	mov	r0, r4
 8006d32:	f7ff fe35 	bl	80069a0 <SD_CmdResp1Error>
 8006d36:	4605      	mov	r5, r0
  if (errorstate != SD_OK)
 8006d38:	b980      	cbnz	r0, 8006d5c <HAL_SD_WriteBlocks_DMA+0xec>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8006d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d3e:	9306      	str	r3, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006d40:	2390      	movs	r3, #144	; 0x90
 8006d42:	9308      	str	r3, [sp, #32]
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006d44:	9009      	str	r0, [sp, #36]	; 0x24
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006d46:	900a      	str	r0, [sp, #40]	; 0x28
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006d48:	2301      	movs	r3, #1
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8006d4a:	fb06 f608 	mul.w	r6, r6, r8
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006d4e:	a906      	add	r1, sp, #24
 8006d50:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DataLength    = BlockSize * NumberOfBlocks;
 8006d52:	9607      	str	r6, [sp, #28]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006d54:	930b      	str	r3, [sp, #44]	; 0x2c
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006d56:	f001 fadd 	bl	8008314 <SDMMC_DataConfig>
  hsd->SdTransferErr = errorstate;
 8006d5a:	64e5      	str	r5, [r4, #76]	; 0x4c
}
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	b00c      	add	sp, #48	; 0x30
 8006d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d64:	08006e09 	.word	0x08006e09
 8006d68:	08006e25 	.word	0x08006e25

08006d6c <HAL_SD_XferCpltCallback>:
 8006d6c:	4770      	bx	lr

08006d6e <HAL_SD_XferErrorCallback>:
 8006d6e:	4770      	bx	lr

08006d70 <HAL_SD_IRQHandler>:
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 8006d70:	6803      	ldr	r3, [r0, #0]
 8006d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d74:	05d2      	lsls	r2, r2, #23
{  
 8006d76:	b510      	push	{r4, lr}
 8006d78:	4604      	mov	r4, r0
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DATAEND))
 8006d7a:	d510      	bpl.n	8006d9e <HAL_SD_IRQHandler+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_IT_DATAEND);  
 8006d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d80:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferCplt = 1;
 8006d82:	2301      	movs	r3, #1
 8006d84:	6483      	str	r3, [r0, #72]	; 0x48
    hsd->SdTransferErr  = SD_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_SD_XferCpltCallback(hsd);  
 8006d8a:	f7ff ffef 	bl	8006d6c <HAL_SD_XferCpltCallback>
  __HAL_SD_SDMMC_DISABLE_IT(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_DATAEND  |\
 8006d8e:	6822      	ldr	r2, [r4, #0]
 8006d90:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006d92:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8006d96:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006d9a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006d9c:	bd10      	pop	{r4, pc}
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL))
 8006d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006da0:	0791      	lsls	r1, r2, #30
 8006da2:	d505      	bpl.n	8006db0 <HAL_SD_IRQHandler+0x40>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006da4:	2202      	movs	r2, #2
 8006da6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_CRC_FAIL;
 8006da8:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_SD_XferErrorCallback(hsd);
 8006daa:	f7ff ffe0 	bl	8006d6e <HAL_SD_XferErrorCallback>
 8006dae:	e7ee      	b.n	8006d8e <HAL_SD_IRQHandler+0x1e>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT))
 8006db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006db2:	0712      	lsls	r2, r2, #28
 8006db4:	d504      	bpl.n	8006dc0 <HAL_SD_IRQHandler+0x50>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006db6:	2208      	movs	r2, #8
 8006db8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_DATA_TIMEOUT;
 8006dba:	2304      	movs	r3, #4
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 8006dbc:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006dbe:	e7f4      	b.n	8006daa <HAL_SD_IRQHandler+0x3a>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_RXOVERR))
 8006dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dc2:	0691      	lsls	r1, r2, #26
 8006dc4:	d503      	bpl.n	8006dce <HAL_SD_IRQHandler+0x5e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_RX_OVERRUN;
 8006dca:	2306      	movs	r3, #6
 8006dcc:	e7f6      	b.n	8006dbc <HAL_SD_IRQHandler+0x4c>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_IT_TXUNDERR))
 8006dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dd0:	06d2      	lsls	r2, r2, #27
 8006dd2:	d5dc      	bpl.n	8006d8e <HAL_SD_IRQHandler+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_TXUNDERR);
 8006dd4:	2210      	movs	r2, #16
 8006dd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->SdTransferErr = SD_TX_UNDERRUN;
 8006dd8:	2305      	movs	r3, #5
 8006dda:	e7ef      	b.n	8006dbc <HAL_SD_IRQHandler+0x4c>

08006ddc <HAL_SD_DMA_RxCpltCallback>:
 8006ddc:	4770      	bx	lr

08006dde <SD_DMA_RxCplt>:
{
 8006dde:	b510      	push	{r4, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8006de0:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hsd->DmaTransferCplt = 1;
 8006de2:	2301      	movs	r3, #1
 8006de4:	6523      	str	r3, [r4, #80]	; 0x50
  while(hsd->SdTransferCplt == 0)
 8006de6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0fc      	beq.n	8006de6 <SD_DMA_RxCplt+0x8>
  HAL_DMA_Abort(hdma);
 8006dec:	f7fe fbec 	bl	80055c8 <HAL_DMA_Abort>
  HAL_SD_DMA_RxCpltCallback(hsd->hdmarx);   
 8006df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006df2:	f7ff fff3 	bl	8006ddc <HAL_SD_DMA_RxCpltCallback>
 8006df6:	bd10      	pop	{r4, pc}

08006df8 <HAL_SD_DMA_RxErrorCallback>:
 8006df8:	4770      	bx	lr

08006dfa <SD_DMA_RxError>:
{
 8006dfa:	b508      	push	{r3, lr}
  HAL_SD_DMA_RxErrorCallback(hsd->hdmarx);
 8006dfc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006dfe:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006e00:	f7ff fffa 	bl	8006df8 <HAL_SD_DMA_RxErrorCallback>
 8006e04:	bd08      	pop	{r3, pc}

08006e06 <HAL_SD_DMA_TxCpltCallback>:
 8006e06:	4770      	bx	lr

08006e08 <SD_DMA_TxCplt>:
{
 8006e08:	b510      	push	{r4, lr}
  SD_HandleTypeDef *hsd = (SD_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8006e0a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hsd->DmaTransferCplt = 1;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	6523      	str	r3, [r4, #80]	; 0x50
  while(hsd->SdTransferCplt == 0)
 8006e10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0fc      	beq.n	8006e10 <SD_DMA_TxCplt+0x8>
  HAL_DMA_Abort(hdma);
 8006e16:	f7fe fbd7 	bl	80055c8 <HAL_DMA_Abort>
  HAL_SD_DMA_TxCpltCallback(hsd->hdmatx);  
 8006e1a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006e1c:	f7ff fff3 	bl	8006e06 <HAL_SD_DMA_TxCpltCallback>
 8006e20:	bd10      	pop	{r4, pc}

08006e22 <HAL_SD_DMA_TxErrorCallback>:
{
 8006e22:	4770      	bx	lr

08006e24 <SD_DMA_TxError>:
{
 8006e24:	b508      	push	{r3, lr}
  HAL_SD_DMA_TxErrorCallback(hsd->hdmatx);
 8006e26:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006e28:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8006e2a:	f7ff fffa 	bl	8006e22 <HAL_SD_DMA_TxErrorCallback>
 8006e2e:	bd08      	pop	{r3, pc}

08006e30 <HAL_SD_Get_CardInfo>:
{
 8006e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 8006e34:	6a05      	ldr	r5, [r0, #32]
 8006e36:	f881 5056 	strb.w	r5, [r1, #86]	; 0x56
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
 8006e3a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006e3c:	f8a1 3054 	strh.w	r3, [r1, #84]	; 0x54
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
 8006e40:	6a83      	ldr	r3, [r0, #40]	; 0x28
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8006e42:	0f9a      	lsrs	r2, r3, #30
 8006e44:	700a      	strb	r2, [r1, #0]
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8006e46:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8006e4a:	704a      	strb	r2, [r1, #1]
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03;
 8006e4c:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8006e50:	708a      	strb	r2, [r1, #2]
  pCardInfo->SD_csd.TAAC = (uint8_t)tmp;
 8006e52:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006e56:	70ca      	strb	r2, [r1, #3]
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 8006e58:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8006e5c:	b2db      	uxtb	r3, r3
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 8006e5e:	710a      	strb	r2, [r1, #4]
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8006e60:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
 8006e62:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006e64:	0e13      	lsrs	r3, r2, #24
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
 8006e66:	011b      	lsls	r3, r3, #4
 8006e68:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8006e6a:	88cb      	ldrh	r3, [r1, #6]
{
 8006e6c:	4604      	mov	r4, r0
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	f3c2 5003 	ubfx	r0, r2, #20, #4
 8006e74:	4303      	orrs	r3, r0
 8006e76:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8006e78:	f3c2 4303 	ubfx	r3, r2, #16, #4
 8006e7c:	720b      	strb	r3, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00) >> 8;
 8006e7e:	f3c2 2307 	ubfx	r3, r2, #8, #8
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8006e82:	09d8      	lsrs	r0, r3, #7
 8006e84:	7248      	strb	r0, [r1, #9]
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8006e86:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8006e8a:	7288      	strb	r0, [r1, #10]
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8006e8c:	f3c3 1040 	ubfx	r0, r3, #5, #1
 8006e90:	72c8      	strb	r0, [r1, #11]
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8006e92:	f3c3 1000 	ubfx	r0, r3, #4, #1
 8006e96:	7308      	strb	r0, [r1, #12]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 8006e98:	2d01      	cmp	r5, #1
  pCardInfo->SD_csd.Reserved2       = 0; /*!< Reserved */
 8006e9a:	f04f 0000 	mov.w	r0, #0
 8006e9e:	7348      	strb	r0, [r1, #13]
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 8006ea0:	f200 80dc 	bhi.w	800705c <HAL_SD_Get_CardInfo+0x22c>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 8006ea4:	029b      	lsls	r3, r3, #10
 8006ea6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006eaa:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 8006eac:	690b      	ldr	r3, [r1, #16]
 8006eae:	0092      	lsls	r2, r2, #2
 8006eb0:	f402 727f 	and.w	r2, r2, #1020	; 0x3fc
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8006eb8:	690b      	ldr	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 8006eba:	6b22      	ldr	r2, [r4, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8006ebc:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8006ec0:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8006ec2:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8006ec6:	750b      	strb	r3, [r1, #20]
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 8006ec8:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8006ecc:	754b      	strb	r3, [r1, #21]
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8006ece:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8006ed2:	758b      	strb	r3, [r1, #22]
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8006ed4:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8006ed8:	75cb      	strb	r3, [r1, #23]
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
 8006eda:	0bd3      	lsrs	r3, r2, #15
 8006edc:	f003 0306 	and.w	r3, r3, #6
 8006ee0:	760b      	strb	r3, [r1, #24]
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 8006ee2:	7e0d      	ldrb	r5, [r1, #24]
 8006ee4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8006ee8:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8006eec:	432a      	orrs	r2, r5
 8006eee:	760a      	strb	r2, [r1, #24]
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 8006ef0:	690d      	ldr	r5, [r1, #16]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 8006ef2:	7e0f      	ldrb	r7, [r1, #24]
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8006ef4:	7a0a      	ldrb	r2, [r1, #8]
 8006ef6:	2601      	movs	r6, #1
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 8006ef8:	3702      	adds	r7, #2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8006efa:	fa06 f202 	lsl.w	r2, r6, r2
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 8006efe:	40be      	lsls	r6, r7
 8006f00:	ea4f 79e6 	mov.w	r9, r6, asr #31
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8006f04:	fba6 6702 	umull	r6, r7, r6, r2
 8006f08:	fb02 7709 	mla	r7, r2, r9, r7
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 8006f0c:	650a      	str	r2, [r1, #80]	; 0x50
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 8006f0e:	1c6a      	adds	r2, r5, #1
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8006f10:	fba6 8902 	umull	r8, r9, r6, r2
 8006f14:	fb02 9907 	mla	r9, r2, r7, r9
 8006f18:	e9c1 8912 	strd	r8, r9, [r1, #72]	; 0x48
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8006f1c:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8006f26:	764a      	strb	r2, [r1, #25]
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 8006f28:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8006f2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 8006f2c:	7e8a      	ldrb	r2, [r1, #26]
 8006f2e:	f3c3 15c0 	ubfx	r5, r3, #7, #1
 8006f32:	432a      	orrs	r2, r5
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8006f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 8006f38:	768a      	strb	r2, [r1, #26]
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8006f3a:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000) >> 24);
 8006f3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 8006f3e:	0fda      	lsrs	r2, r3, #31
 8006f40:	770a      	strb	r2, [r1, #28]
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60) >> 5;
 8006f42:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8006f46:	774a      	strb	r2, [r1, #29]
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1C) >> 2;
 8006f48:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8006f4c:	778a      	strb	r2, [r1, #30]
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03) << 2;
 8006f4e:	0d9a      	lsrs	r2, r3, #22
 8006f50:	f002 020c 	and.w	r2, r2, #12
 8006f54:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8006f56:	7fca      	ldrb	r2, [r1, #31]
 8006f58:	f3c3 5581 	ubfx	r5, r3, #22, #2
 8006f5c:	432a      	orrs	r2, r5
 8006f5e:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8006f60:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8006f64:	f881 2020 	strb.w	r2, [r1, #32]
  pCardInfo->SD_csd.Reserved3           = 0;
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 8006f6e:	f3c3 4200 	ubfx	r2, r3, #16, #1
 8006f72:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 8006f76:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8006f7a:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40) >> 6;
 8006f7e:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8006f82:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20) >> 5;
 8006f86:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8006f8a:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10) >> 4;
 8006f8e:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8006f92:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
 8006f96:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8006f9a:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCardInfo->SD_csd.Reserved4 = 1;
 8006f9e:	2501      	movs	r5, #1
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 8006fa0:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 8006fa4:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 8006fa8:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 8006fac:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCardInfo->SD_csd.Reserved4 = 1;
 8006fb0:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
  tmp = (uint8_t)((hsd->CID[0] & 0xFF000000) >> 24);
 8006fb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006fb6:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ManufacturerID = tmp;
 8006fb8:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
 8006fbc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006fc0:	0212      	lsls	r2, r2, #8
 8006fc2:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 8006fc4:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 8006fc6:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8006fca:	b292      	uxth	r2, r2
 8006fcc:	4332      	orrs	r2, r6
 8006fce:	061b      	lsls	r3, r3, #24
 8006fd0:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
 8006fd2:	630b      	str	r3, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 8006fd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 8006fd6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 8006fd8:	0e1e      	lsrs	r6, r3, #24
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 8006fda:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8006fde:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
 8006fe0:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8006fe2:	0a1a      	lsrs	r2, r3, #8
 8006fe4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8006fe8:	4332      	orrs	r2, r6
 8006fea:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp;
 8006fec:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8006fee:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006ff2:	4332      	orrs	r2, r6
  tmp = (uint8_t)(hsd->CID[1] & 0x000000FF);
 8006ff4:	b2db      	uxtb	r3, r3
  pCardInfo->SD_cid.ProdName1 |= tmp;
 8006ff6:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName2 = tmp;
 8006ff8:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
  tmp = (uint8_t)((hsd->CID[2] & 0xFF000000) >> 24);
 8006ffc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ffe:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ProdRev = tmp;
 8007000:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
  tmp = (uint8_t)((hsd->CID[2] & 0x00FF0000) >> 16);
 8007004:	0c1a      	lsrs	r2, r3, #16
 8007006:	0612      	lsls	r2, r2, #24
  pCardInfo->SD_cid.ProdSN = tmp << 24;
 8007008:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 800700a:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800700c:	021a      	lsls	r2, r3, #8
 800700e:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8007012:	4332      	orrs	r2, r6
 8007014:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 8007016:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8007018:	021b      	lsls	r3, r3, #8
 800701a:	b29b      	uxth	r3, r3
 800701c:	4313      	orrs	r3, r2
 800701e:	638b      	str	r3, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp;
 8007020:	6b8a      	ldr	r2, [r1, #56]	; 0x38
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
 8007022:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCardInfo->SD_cid.ProdSN |= tmp;
 8007024:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8007028:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 800702a:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 800702e:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8007032:	4322      	orrs	r2, r4
 8007034:	f881 203c 	strb.w	r2, [r1, #60]	; 0x3c
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 8007038:	0a1a      	lsrs	r2, r3, #8
 800703a:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800703e:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8007040:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8007042:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8007046:	b292      	uxth	r2, r2
 8007048:	4322      	orrs	r2, r4
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 800704a:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_cid.ManufactDate |= tmp;
 800704e:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 8007050:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
  pCardInfo->SD_cid.Reserved2 = 1;
 8007054:	f881 5041 	strb.w	r5, [r1, #65]	; 0x41
}
 8007058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 800705c:	2d02      	cmp	r5, #2
 800705e:	d11f      	bne.n	80070a0 <HAL_SD_Get_CardInfo+0x270>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 8007060:	0412      	lsls	r2, r2, #16
 8007062:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 8007066:	6b23      	ldr	r3, [r4, #48]	; 0x30
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 8007068:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 800706a:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 800706c:	0e1d      	lsrs	r5, r3, #24
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 800706e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8007072:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 8007074:	690d      	ldr	r5, [r1, #16]
 8007076:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800707a:	432a      	orrs	r2, r5
 800707c:	610a      	str	r2, [r1, #16]
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 800707e:	690e      	ldr	r6, [r1, #16]
 8007080:	2700      	movs	r7, #0
 8007082:	3601      	adds	r6, #1
 8007084:	f147 0700 	adc.w	r7, r7, #0
 8007088:	04fa      	lsls	r2, r7, #19
 800708a:	ea42 3256 	orr.w	r2, r2, r6, lsr #13
 800708e:	64ca      	str	r2, [r1, #76]	; 0x4c
 8007090:	04f6      	lsls	r6, r6, #19
    pCardInfo->CardBlockSize = 512;    
 8007092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007096:	f3c3 2307 	ubfx	r3, r3, #8, #8
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 800709a:	648e      	str	r6, [r1, #72]	; 0x48
    pCardInfo->CardBlockSize = 512;    
 800709c:	650a      	str	r2, [r1, #80]	; 0x50
 800709e:	e73d      	b.n	8006f1c <HAL_SD_Get_CardInfo+0xec>
    errorstate = SD_ERROR;
 80070a0:	2029      	movs	r0, #41	; 0x29
 80070a2:	e73b      	b.n	8006f1c <HAL_SD_Get_CardInfo+0xec>

080070a4 <HAL_SD_Init>:
{ 
 80070a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a8:	b091      	sub	sp, #68	; 0x44
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 80070aa:	2500      	movs	r5, #0
{ 
 80070ac:	4604      	mov	r4, r0
 80070ae:	460e      	mov	r6, r1
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 80070b0:	f88d 5012 	strb.w	r5, [sp, #18]
  HAL_SD_MspInit(hsd);
 80070b4:	f7fd f844 	bl	8004140 <HAL_SD_MspInit>
  tmpinit.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80070b8:	2376      	movs	r3, #118	; 0x76
 80070ba:	930f      	str	r3, [sp, #60]	; 0x3c
  tmpinit.BusWide             = SDMMC_BUS_WIDE_1B;
 80070bc:	950d      	str	r5, [sp, #52]	; 0x34
  tmpinit.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80070be:	950e      	str	r5, [sp, #56]	; 0x38
  SDMMC_Init(hsd->Instance, tmpinit);
 80070c0:	ab10      	add	r3, sp, #64	; 0x40
 80070c2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80070c6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  tmpinit.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80070ca:	950a      	str	r5, [sp, #40]	; 0x28
  tmpinit.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80070cc:	950b      	str	r5, [sp, #44]	; 0x2c
  tmpinit.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80070ce:	950c      	str	r5, [sp, #48]	; 0x30
  SDMMC_Init(hsd->Instance, tmpinit);
 80070d0:	ab0a      	add	r3, sp, #40	; 0x28
 80070d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070d4:	6820      	ldr	r0, [r4, #0]
 80070d6:	f001 f8d7 	bl	8008288 <SDMMC_Init>
  __HAL_SD_SDMMC_DISABLE(hsd); 
 80070da:	6820      	ldr	r0, [r4, #0]
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
 80070dc:	f88d 5013 	strb.w	r5, [sp, #19]
  __HAL_SD_SDMMC_DISABLE(hsd); 
 80070e0:	6843      	ldr	r3, [r0, #4]
 80070e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070e6:	6043      	str	r3, [r0, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 80070e8:	f001 f8ed 	bl	80082c6 <SDMMC_PowerState_ON>
  HAL_Delay(1);
 80070ec:	2001      	movs	r0, #1
 80070ee:	f7fe f8eb 	bl	80052c8 <HAL_Delay>
  __HAL_SD_SDMMC_ENABLE(hsd);
 80070f2:	6820      	ldr	r0, [r4, #0]
 80070f4:	6843      	ldr	r3, [r0, #4]
 80070f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070fa:	6043      	str	r3, [r0, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80070fc:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80070fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007102:	9309      	str	r3, [sp, #36]	; 0x24
  sdmmc_cmdinitstructure.Argument         = 0;
 8007104:	9505      	str	r5, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
 8007106:	9506      	str	r5, [sp, #24]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_NO;
 8007108:	9507      	str	r5, [sp, #28]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800710a:	9508      	str	r5, [sp, #32]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800710c:	f001 f8e3 	bl	80082d6 <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8007110:	6820      	ldr	r0, [r4, #0]
 8007112:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007114:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007118:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 800711c:	b123      	cbz	r3, 8007128 <HAL_SD_Init+0x84>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800711e:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8007122:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 8007124:	2300      	movs	r3, #0
 8007126:	e005      	b.n	8007134 <HAL_SD_Init+0x90>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8007128:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while((timeout > 0) && (!tmp))
 800712a:	3a01      	subs	r2, #1
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 800712c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 8007130:	d1f4      	bne.n	800711c <HAL_SD_Init+0x78>
    return errorstate;
 8007132:	2303      	movs	r3, #3
  errorstate = SD_CmdError(hsd);
 8007134:	f88d 3013 	strb.w	r3, [sp, #19]
  if(errorstate != SD_OK)
 8007138:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800713c:	b18b      	cbz	r3, 8007162 <HAL_SD_Init+0xbe>
  return errorstate;
 800713e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8007142:	b2db      	uxtb	r3, r3
  errorstate = SD_PowerON(hsd); 
 8007144:	f88d 3012 	strb.w	r3, [sp, #18]
  if(errorstate != SD_OK)     
 8007148:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800714c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 80b1 	beq.w	80072b8 <HAL_SD_Init+0x214>
  return errorstate;
 8007156:	f89d 0012 	ldrb.w	r0, [sp, #18]
 800715a:	b2c0      	uxtb	r0, r0
}
 800715c:	b011      	add	sp, #68	; 0x44
 800715e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sdmmc_cmdinitstructure.Argument         = SD_CHECK_PATTERN;
 8007162:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007166:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_SDMMC_SEND_IF_COND;
 8007168:	2308      	movs	r3, #8
 800716a:	9306      	str	r3, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800716c:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800716e:	2340      	movs	r3, #64	; 0x40
 8007170:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007172:	f001 f8b0 	bl	80082d6 <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT); 
 8007176:	6820      	ldr	r0, [r4, #0]
 8007178:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800717a:	f013 0f45 	tst.w	r3, #69	; 0x45
 800717e:	bf14      	ite	ne
 8007180:	2301      	movne	r3, #1
 8007182:	2300      	moveq	r3, #0
  uint32_t timeout = SDMMC_CMD0TIMEOUT, tmp;
 8007184:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  while((!tmp) && (timeout > 0))
 8007188:	b90b      	cbnz	r3, 800718e <HAL_SD_Init+0xea>
 800718a:	2a00      	cmp	r2, #0
 800718c:	d17c      	bne.n	8007288 <HAL_SD_Init+0x1e4>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT); 
 800718e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if((timeout == 0) || tmp)
 8007190:	b112      	cbz	r2, 8007198 <HAL_SD_Init+0xf4>
 8007192:	f013 0304 	ands.w	r3, r3, #4
 8007196:	d07f      	beq.n	8007298 <HAL_SD_Init+0x1f4>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8007198:	2304      	movs	r3, #4
 800719a:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 800719c:	2303      	movs	r3, #3
  errorstate = SD_CmdResp7Error(hsd);
 800719e:	f88d 3013 	strb.w	r3, [sp, #19]
  if (errorstate == SD_OK)
 80071a2:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80071a6:	2300      	movs	r3, #0
 80071a8:	2a00      	cmp	r2, #0
 80071aa:	d17c      	bne.n	80072a6 <HAL_SD_Init+0x202>
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 80071ac:	2201      	movs	r2, #1
 80071ae:	6222      	str	r2, [r4, #32]
    sdtype        = SD_HIGH_CAPACITY;
 80071b0:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80071b4:	2537      	movs	r5, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80071b6:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Argument         = 0;
 80071b8:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80071ba:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80071bc:	f001 f88b 	bl	80082d6 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80071c0:	4629      	mov	r1, r5
 80071c2:	4620      	mov	r0, r4
 80071c4:	f7ff fbec 	bl	80069a0 <SD_CmdResp1Error>
 80071c8:	f88d 0013 	strb.w	r0, [sp, #19]
  if(errorstate == SD_OK)
 80071cc:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80071d0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1b2      	bne.n	800713e <HAL_SD_Init+0x9a>
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 80071d8:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
      sdmmc_cmdinitstructure.Argument         = 0;
 80071dc:	46a8      	mov	r8, r5
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 80071de:	f447 1780 	orr.w	r7, r7, #1048576	; 0x100000
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80071e2:	f04f 0b37 	mov.w	fp, #55	; 0x37
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80071e6:	a905      	add	r1, sp, #20
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80071e8:	f04f 0a40 	mov.w	sl, #64	; 0x40
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80071ec:	f44f 6980 	mov.w	r9, #1024	; 0x400
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80071f0:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = 0;
 80071f2:	f8cd 8014 	str.w	r8, [sp, #20]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80071f6:	f8cd b018 	str.w	fp, [sp, #24]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80071fa:	f8cd a01c 	str.w	sl, [sp, #28]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80071fe:	f8cd 8020 	str.w	r8, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8007202:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007206:	f001 f866 	bl	80082d6 <SDMMC_SendCommand>
      errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800720a:	4659      	mov	r1, fp
 800720c:	4620      	mov	r0, r4
 800720e:	f7ff fbc7 	bl	80069a0 <SD_CmdResp1Error>
 8007212:	f88d 0013 	strb.w	r0, [sp, #19]
      if(errorstate != SD_OK)
 8007216:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800721a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800721e:	2b00      	cmp	r3, #0
 8007220:	d18d      	bne.n	800713e <HAL_SD_Init+0x9a>
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 8007222:	2329      	movs	r3, #41	; 0x29
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007224:	a905      	add	r1, sp, #20
 8007226:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 8007228:	9705      	str	r7, [sp, #20]
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 800722a:	9306      	str	r3, [sp, #24]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800722c:	f8cd a01c 	str.w	sl, [sp, #28]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8007230:	9208      	str	r2, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8007232:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007236:	f001 f84e 	bl	80082d6 <SDMMC_SendCommand>
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 800723a:	6820      	ldr	r0, [r4, #0]
 800723c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800723e:	f013 0f45 	tst.w	r3, #69	; 0x45
 8007242:	d0fb      	beq.n	800723c <HAL_SD_Init+0x198>
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8007244:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007246:	f013 0304 	ands.w	r3, r3, #4
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 800724a:	bf1b      	ittet	ne
 800724c:	2304      	movne	r3, #4
 800724e:	6383      	strne	r3, [r0, #56]	; 0x38
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007250:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    return errorstate;
 8007254:	2303      	movne	r3, #3
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007256:	bf08      	it	eq
 8007258:	6382      	streq	r2, [r0, #56]	; 0x38
      errorstate = SD_CmdResp3Error(hsd);
 800725a:	f88d 3013 	strb.w	r3, [sp, #19]
      if(errorstate != SD_OK)
 800725e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8007262:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8007266:	2b00      	cmp	r3, #0
 8007268:	f47f af69 	bne.w	800713e <HAL_SD_Init+0x9a>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800726c:	f001 f848 	bl	8008300 <SDMMC_GetResponse>
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8007270:	2800      	cmp	r0, #0
      count++;
 8007272:	f105 0501 	add.w	r5, r5, #1
 8007276:	f64f 73ff 	movw	r3, #65535	; 0xffff
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 800727a:	db16      	blt.n	80072aa <HAL_SD_Init+0x206>
 800727c:	429d      	cmp	r5, r3
 800727e:	d1b0      	bne.n	80071e2 <HAL_SD_Init+0x13e>
      errorstate = SD_INVALID_VOLTRANGE;
 8007280:	231b      	movs	r3, #27
 8007282:	f88d 3013 	strb.w	r3, [sp, #19]
 8007286:	e75a      	b.n	800713e <HAL_SD_Init+0x9a>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT);
 8007288:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800728a:	f013 0f45 	tst.w	r3, #69	; 0x45
 800728e:	bf14      	ite	ne
 8007290:	2301      	movne	r3, #1
 8007292:	2300      	moveq	r3, #0
    timeout--;
 8007294:	3a01      	subs	r2, #1
 8007296:	e777      	b.n	8007188 <HAL_SD_Init+0xe4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDREND))
 8007298:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800729a:	0652      	lsls	r2, r2, #25
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CMDREND);
 800729c:	bf46      	itte	mi
 800729e:	2240      	movmi	r2, #64	; 0x40
 80072a0:	6382      	strmi	r2, [r0, #56]	; 0x38
  return errorstate;
 80072a2:	2329      	movpl	r3, #41	; 0x29
 80072a4:	e77b      	b.n	800719e <HAL_SD_Init+0xfa>
  uint32_t sdtype = SD_STD_CAPACITY;
 80072a6:	461f      	mov	r7, r3
 80072a8:	e784      	b.n	80071b4 <HAL_SD_Init+0x110>
    if(count >= SD_MAX_VOLT_TRIAL)
 80072aa:	429d      	cmp	r5, r3
 80072ac:	d0e8      	beq.n	8007280 <HAL_SD_Init+0x1dc>
    if((response & SD_HIGH_CAPACITY) == SD_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80072ae:	0047      	lsls	r7, r0, #1
      hsd->CardType = HIGH_CAPACITY_SD_CARD;
 80072b0:	bf44      	itt	mi
 80072b2:	2302      	movmi	r3, #2
 80072b4:	6223      	strmi	r3, [r4, #32]
 80072b6:	e742      	b.n	800713e <HAL_SD_Init+0x9a>
  if(SDMMC_GetPowerState(hsd->Instance) == 0) /* Power off */
 80072b8:	6820      	ldr	r0, [r4, #0]
 80072ba:	f001 f808 	bl	80082ce <SDMMC_GetPowerState>
 80072be:	2800      	cmp	r0, #0
 80072c0:	f000 80c2 	beq.w	8007448 <HAL_SD_Init+0x3a4>
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 80072c4:	6a23      	ldr	r3, [r4, #32]
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d026      	beq.n	8007318 <HAL_SD_Init+0x274>
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_ALL_SEND_CID;
 80072ca:	2302      	movs	r3, #2
 80072cc:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 80072ce:	23c0      	movs	r3, #192	; 0xc0
 80072d0:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80072d2:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80072d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80072d8:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Argument         = 0;
 80072da:	9505      	str	r5, [sp, #20]
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80072dc:	9508      	str	r5, [sp, #32]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80072de:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80072e0:	f000 fff9 	bl	80082d6 <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 80072e4:	4620      	mov	r0, r4
 80072e6:	f7ff fb45 	bl	8006974 <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 80072ea:	4605      	mov	r5, r0
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d155      	bne.n	800739c <HAL_SD_Init+0x2f8>
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80072f0:	4601      	mov	r1, r0
 80072f2:	6820      	ldr	r0, [r4, #0]
 80072f4:	f001 f804 	bl	8008300 <SDMMC_GetResponse>
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80072f8:	2104      	movs	r1, #4
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80072fa:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80072fc:	6820      	ldr	r0, [r4, #0]
 80072fe:	f000 ffff 	bl	8008300 <SDMMC_GetResponse>
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007302:	2108      	movs	r1, #8
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007304:	63e0      	str	r0, [r4, #60]	; 0x3c
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007306:	6820      	ldr	r0, [r4, #0]
 8007308:	f000 fffa 	bl	8008300 <SDMMC_GetResponse>
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800730c:	210c      	movs	r1, #12
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800730e:	6420      	str	r0, [r4, #64]	; 0x40
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007310:	6820      	ldr	r0, [r4, #0]
 8007312:	f000 fff5 	bl	8008300 <SDMMC_GetResponse>
 8007316:	6460      	str	r0, [r4, #68]	; 0x44
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8007318:	6a23      	ldr	r3, [r4, #32]
 800731a:	2b02      	cmp	r3, #2
 800731c:	d92b      	bls.n	8007376 <HAL_SD_Init+0x2d2>
 800731e:	2b06      	cmp	r3, #6
 8007320:	d029      	beq.n	8007376 <HAL_SD_Init+0x2d2>
  uint16_t sd_rca = 1;
 8007322:	2001      	movs	r0, #1
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8007324:	6a23      	ldr	r3, [r4, #32]
 8007326:	2b04      	cmp	r3, #4
 8007328:	f000 8092 	beq.w	8007450 <HAL_SD_Init+0x3ac>
    hsd->RCA = sd_rca;
 800732c:	6260      	str	r0, [r4, #36]	; 0x24
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 800732e:	2309      	movs	r3, #9
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8007330:	0400      	lsls	r0, r0, #16
 8007332:	9005      	str	r0, [sp, #20]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_CSD;
 8007334:	9306      	str	r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007336:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8007338:	23c0      	movs	r3, #192	; 0xc0
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800733a:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 800733c:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800733e:	f000 ffca 	bl	80082d6 <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 8007342:	4620      	mov	r0, r4
 8007344:	f7ff fb16 	bl	8006974 <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 8007348:	4605      	mov	r5, r0
 800734a:	bb38      	cbnz	r0, 800739c <HAL_SD_Init+0x2f8>
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800734c:	4601      	mov	r1, r0
 800734e:	6820      	ldr	r0, [r4, #0]
 8007350:	f000 ffd6 	bl	8008300 <SDMMC_GetResponse>
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007354:	2104      	movs	r1, #4
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007356:	62a0      	str	r0, [r4, #40]	; 0x28
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007358:	6820      	ldr	r0, [r4, #0]
 800735a:	f000 ffd1 	bl	8008300 <SDMMC_GetResponse>
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800735e:	2108      	movs	r1, #8
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007360:	62e0      	str	r0, [r4, #44]	; 0x2c
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007362:	6820      	ldr	r0, [r4, #0]
 8007364:	f000 ffcc 	bl	8008300 <SDMMC_GetResponse>
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007368:	210c      	movs	r1, #12
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800736a:	6320      	str	r0, [r4, #48]	; 0x30
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800736c:	6820      	ldr	r0, [r4, #0]
 800736e:	f000 ffc7 	bl	8008300 <SDMMC_GetResponse>
 8007372:	6360      	str	r0, [r4, #52]	; 0x34
 8007374:	e012      	b.n	800739c <HAL_SD_Init+0x2f8>
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_REL_ADDR;
 8007376:	2303      	movs	r3, #3
 8007378:	9306      	str	r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800737a:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800737c:	2340      	movs	r3, #64	; 0x40
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800737e:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8007380:	9307      	str	r3, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007382:	f000 ffa8 	bl	80082d6 <SDMMC_SendCommand>
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8007386:	6820      	ldr	r0, [r4, #0]
 8007388:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800738a:	f013 0f45 	tst.w	r3, #69	; 0x45
 800738e:	d0fb      	beq.n	8007388 <HAL_SD_Init+0x2e4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8007390:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007392:	075d      	lsls	r5, r3, #29
 8007394:	d536      	bpl.n	8007404 <HAL_SD_Init+0x360>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8007396:	2304      	movs	r3, #4
 8007398:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 800739a:	2503      	movs	r5, #3
  errorstate = SD_Initialize_Cards(hsd);
 800739c:	f88d 5012 	strb.w	r5, [sp, #18]
  if (errorstate != SD_OK)
 80073a0:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f47f aed6 	bne.w	8007156 <HAL_SD_Init+0xb2>
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
 80073aa:	4631      	mov	r1, r6
 80073ac:	4620      	mov	r0, r4
 80073ae:	f7ff fd3f 	bl	8006e30 <HAL_SD_Get_CardInfo>
 80073b2:	f88d 0012 	strb.w	r0, [sp, #18]
  if (errorstate == SD_OK)
 80073b6:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80073ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80073be:	b9ab      	cbnz	r3, 80073ec <HAL_SD_Init+0x348>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 80073c0:	f8b6 3054 	ldrh.w	r3, [r6, #84]	; 0x54
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80073c4:	6820      	ldr	r0, [r4, #0]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80073c6:	9208      	str	r2, [sp, #32]
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 80073c8:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.Argument         = (uint32_t)addr;
 80073ca:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80073cc:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 80073ce:	2507      	movs	r5, #7
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80073d0:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80073d2:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80073d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073d8:	9309      	str	r3, [sp, #36]	; 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEL_DESEL_CARD;
 80073da:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80073dc:	f000 ff7b 	bl	80082d6 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEL_DESEL_CARD);
 80073e0:	4629      	mov	r1, r5
 80073e2:	4620      	mov	r0, r4
 80073e4:	f7ff fadc 	bl	80069a0 <SD_CmdResp1Error>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 80073e8:	f88d 0012 	strb.w	r0, [sp, #18]
  SDMMC_Init(hsd->Instance, hsd->Init);   
 80073ec:	f104 0310 	add.w	r3, r4, #16
 80073f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80073f4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80073f8:	1d23      	adds	r3, r4, #4
 80073fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80073fc:	6820      	ldr	r0, [r4, #0]
 80073fe:	f000 ff43 	bl	8008288 <SDMMC_Init>
 8007402:	e6a8      	b.n	8007156 <HAL_SD_Init+0xb2>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 8007404:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8007406:	f015 0501 	ands.w	r5, r5, #1
 800740a:	d002      	beq.n	8007412 <HAL_SD_Init+0x36e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 800740c:	2501      	movs	r5, #1
 800740e:	6385      	str	r5, [r0, #56]	; 0x38
 8007410:	e7c4      	b.n	800739c <HAL_SD_Init+0x2f8>
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 8007412:	f000 ff72 	bl	80082fa <SDMMC_GetCommandResponse>
 8007416:	2803      	cmp	r0, #3
 8007418:	d001      	beq.n	800741e <HAL_SD_Init+0x37a>
    return errorstate;
 800741a:	2510      	movs	r5, #16
 800741c:	e7be      	b.n	800739c <HAL_SD_Init+0x2f8>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800741e:	6820      	ldr	r0, [r4, #0]
 8007420:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8007424:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007426:	4629      	mov	r1, r5
 8007428:	f000 ff6a 	bl	8008300 <SDMMC_GetResponse>
  if((response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)) == SD_ALLZERO)
 800742c:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8007430:	d101      	bne.n	8007436 <HAL_SD_Init+0x392>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007432:	0c00      	lsrs	r0, r0, #16
 8007434:	e776      	b.n	8007324 <HAL_SD_Init+0x280>
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
 8007436:	0481      	lsls	r1, r0, #18
 8007438:	d408      	bmi.n	800744c <HAL_SD_Init+0x3a8>
  if((response_r1 & SD_R6_ILLEGAL_CMD) == SD_R6_ILLEGAL_CMD)
 800743a:	0442      	lsls	r2, r0, #17
 800743c:	d4ed      	bmi.n	800741a <HAL_SD_Init+0x376>
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
 800743e:	0403      	lsls	r3, r0, #16
 8007440:	f57f af6f 	bpl.w	8007322 <HAL_SD_Init+0x27e>
    return(SD_COM_CRC_FAILED);
 8007444:	250f      	movs	r5, #15
 8007446:	e7a9      	b.n	800739c <HAL_SD_Init+0x2f8>
    return errorstate;
 8007448:	2525      	movs	r5, #37	; 0x25
 800744a:	e7a7      	b.n	800739c <HAL_SD_Init+0x2f8>
    return(SD_GENERAL_UNKNOWN_ERROR);
 800744c:	2513      	movs	r5, #19
 800744e:	e7a5      	b.n	800739c <HAL_SD_Init+0x2f8>
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8007450:	2500      	movs	r5, #0
 8007452:	e7a3      	b.n	800739c <HAL_SD_Init+0x2f8>

08007454 <HAL_SD_WideBusOperation_Config>:
{
 8007454:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hsd->CardType == MULTIMEDIA_CARD)
 8007456:	6a03      	ldr	r3, [r0, #32]
 8007458:	2b03      	cmp	r3, #3
{
 800745a:	b08d      	sub	sp, #52	; 0x34
 800745c:	4605      	mov	r5, r0
 800745e:	460e      	mov	r6, r1
  if (hsd->CardType == MULTIMEDIA_CARD)
 8007460:	f000 8088 	beq.w	8007574 <HAL_SD_WideBusOperation_Config+0x120>
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8007464:	2b02      	cmp	r3, #2
 8007466:	f200 8083 	bhi.w	8007570 <HAL_SD_WideBusOperation_Config+0x11c>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800746a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800746e:	f000 8081 	beq.w	8007574 <HAL_SD_WideBusOperation_Config+0x120>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8007472:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8007476:	d14c      	bne.n	8007512 <HAL_SD_WideBusOperation_Config+0xbe>
  uint32_t scr[2] = {0, 0};
 8007478:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 800747a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 800747c:	9104      	str	r1, [sp, #16]
 800747e:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8007480:	f000 ff3e 	bl	8008300 <SDMMC_GetResponse>
 8007484:	0180      	lsls	r0, r0, #6
 8007486:	d46d      	bmi.n	8007564 <HAL_SD_WideBusOperation_Config+0x110>
  errorstate = SD_FindSCR(hsd, scr);
 8007488:	a904      	add	r1, sp, #16
 800748a:	4628      	mov	r0, r5
 800748c:	f7ff fafe 	bl	8006a8c <SD_FindSCR>
  if(errorstate != SD_OK)
 8007490:	4604      	mov	r4, r0
 8007492:	2800      	cmp	r0, #0
 8007494:	d167      	bne.n	8007566 <HAL_SD_WideBusOperation_Config+0x112>
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 8007496:	9b05      	ldr	r3, [sp, #20]
 8007498:	0359      	lsls	r1, r3, #13
 800749a:	d567      	bpl.n	800756c <HAL_SD_WideBusOperation_Config+0x118>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800749c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800749e:	9009      	str	r0, [sp, #36]	; 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80074a0:	041b      	lsls	r3, r3, #16
 80074a2:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80074a4:	2340      	movs	r3, #64	; 0x40
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80074a6:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80074a8:	9308      	str	r3, [sp, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80074aa:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80074ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80074b0:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80074b2:	930a      	str	r3, [sp, #40]	; 0x28
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 80074b4:	9707      	str	r7, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80074b6:	f000 ff0e 	bl	80082d6 <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80074ba:	4639      	mov	r1, r7
 80074bc:	4628      	mov	r0, r5
 80074be:	f7ff fa6f 	bl	80069a0 <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 80074c2:	4604      	mov	r4, r0
 80074c4:	2800      	cmp	r0, #0
 80074c6:	d14e      	bne.n	8007566 <HAL_SD_WideBusOperation_Config+0x112>
    sdmmc_cmdinitstructure.Argument         = 2;
 80074c8:	2302      	movs	r3, #2
 80074ca:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 80074cc:	2406      	movs	r4, #6
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80074ce:	a906      	add	r1, sp, #24
 80074d0:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 80074d2:	9407      	str	r4, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80074d4:	f000 feff 	bl	80082d6 <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 80074d8:	4621      	mov	r1, r4
 80074da:	4628      	mov	r0, r5
 80074dc:	f7ff fa60 	bl	80069a0 <SD_CmdResp1Error>
 80074e0:	4604      	mov	r4, r0
    if (errorstate == SD_OK)
 80074e2:	2800      	cmp	r0, #0
 80074e4:	d13f      	bne.n	8007566 <HAL_SD_WideBusOperation_Config+0x112>
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
 80074e6:	686b      	ldr	r3, [r5, #4]
 80074e8:	9306      	str	r3, [sp, #24]
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
 80074ea:	68ab      	ldr	r3, [r5, #8]
 80074ec:	9307      	str	r3, [sp, #28]
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80074ee:	68eb      	ldr	r3, [r5, #12]
 80074f0:	9308      	str	r3, [sp, #32]
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80074f2:	696b      	ldr	r3, [r5, #20]
 80074f4:	930a      	str	r3, [sp, #40]	; 0x28
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
 80074f6:	69ab      	ldr	r3, [r5, #24]
 80074f8:	930b      	str	r3, [sp, #44]	; 0x2c
      tmpinit.BusWide             = WideMode;
 80074fa:	9609      	str	r6, [sp, #36]	; 0x24
      SDMMC_Init(hsd->Instance, tmpinit);
 80074fc:	ab0c      	add	r3, sp, #48	; 0x30
 80074fe:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8007502:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007506:	ab06      	add	r3, sp, #24
 8007508:	cb0e      	ldmia	r3, {r1, r2, r3}
 800750a:	6828      	ldr	r0, [r5, #0]
 800750c:	f000 febc 	bl	8008288 <SDMMC_Init>
 8007510:	e029      	b.n	8007566 <HAL_SD_WideBusOperation_Config+0x112>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007512:	2900      	cmp	r1, #0
 8007514:	d130      	bne.n	8007578 <HAL_SD_WideBusOperation_Config+0x124>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8007516:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8007518:	9104      	str	r1, [sp, #16]
 800751a:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 800751c:	f000 fef0 	bl	8008300 <SDMMC_GetResponse>
 8007520:	0182      	lsls	r2, r0, #6
 8007522:	d41f      	bmi.n	8007564 <HAL_SD_WideBusOperation_Config+0x110>
  errorstate = SD_FindSCR(hsd, scr);
 8007524:	a904      	add	r1, sp, #16
 8007526:	4628      	mov	r0, r5
 8007528:	f7ff fab0 	bl	8006a8c <SD_FindSCR>
  if(errorstate != SD_OK)
 800752c:	4604      	mov	r4, r0
 800752e:	b9d0      	cbnz	r0, 8007566 <HAL_SD_WideBusOperation_Config+0x112>
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 8007530:	9b05      	ldr	r3, [sp, #20]
 8007532:	03db      	lsls	r3, r3, #15
 8007534:	d51a      	bpl.n	800756c <HAL_SD_WideBusOperation_Config+0x118>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8007536:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8007538:	9009      	str	r0, [sp, #36]	; 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800753a:	041b      	lsls	r3, r3, #16
 800753c:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 800753e:	2340      	movs	r3, #64	; 0x40
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8007540:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8007542:	9308      	str	r3, [sp, #32]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007544:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8007546:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800754a:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800754c:	930a      	str	r3, [sp, #40]	; 0x28
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800754e:	9707      	str	r7, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007550:	f000 fec1 	bl	80082d6 <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8007554:	4639      	mov	r1, r7
 8007556:	4628      	mov	r0, r5
 8007558:	f7ff fa22 	bl	80069a0 <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 800755c:	4604      	mov	r4, r0
 800755e:	b910      	cbnz	r0, 8007566 <HAL_SD_WideBusOperation_Config+0x112>
    sdmmc_cmdinitstructure.Argument         = 0;
 8007560:	9006      	str	r0, [sp, #24]
 8007562:	e7b3      	b.n	80074cc <HAL_SD_WideBusOperation_Config+0x78>
    return errorstate;
 8007564:	240e      	movs	r4, #14
}
 8007566:	4620      	mov	r0, r4
 8007568:	b00d      	add	sp, #52	; 0x34
 800756a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return errorstate;
 800756c:	2425      	movs	r4, #37	; 0x25
 800756e:	e7fa      	b.n	8007566 <HAL_SD_WideBusOperation_Config+0x112>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8007570:	2400      	movs	r4, #0
 8007572:	e7f8      	b.n	8007566 <HAL_SD_WideBusOperation_Config+0x112>
    return errorstate;
 8007574:	2427      	movs	r4, #39	; 0x27
 8007576:	e7f6      	b.n	8007566 <HAL_SD_WideBusOperation_Config+0x112>
      errorstate = SD_INVALID_PARAMETER;
 8007578:	2426      	movs	r4, #38	; 0x26
 800757a:	e7f4      	b.n	8007566 <HAL_SD_WideBusOperation_Config+0x112>

0800757c <HAL_SD_StopTransfer>:
{
 800757c:	b530      	push	{r4, r5, lr}
 800757e:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Argument         = 0;
 8007580:	2300      	movs	r3, #0
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8007582:	2240      	movs	r2, #64	; 0x40
{
 8007584:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.Argument         = 0;
 8007586:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8007588:	250c      	movs	r5, #12
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800758a:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800758c:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800758e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007592:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8007594:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8007596:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8007598:	9502      	str	r5, [sp, #8]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800759a:	f000 fe9c 	bl	80082d6 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_STOP_TRANSMISSION);
 800759e:	4629      	mov	r1, r5
 80075a0:	4620      	mov	r0, r4
 80075a2:	f7ff f9fd 	bl	80069a0 <SD_CmdResp1Error>
}
 80075a6:	b007      	add	sp, #28
 80075a8:	bd30      	pop	{r4, r5, pc}

080075aa <HAL_SD_CheckReadOperation>:
{
 80075aa:	b538      	push	{r3, r4, r5, lr}
 80075ac:	4604      	mov	r4, r0
 80075ae:	460d      	mov	r5, r1
  tmp1 = hsd->DmaTransferCplt; 
 80075b0:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 80075b2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 80075b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  uint32_t timeout = Timeout;
 80075b6:	462a      	mov	r2, r5
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 80075b8:	b2db      	uxtb	r3, r3
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 80075ba:	4208      	tst	r0, r1
 80075bc:	d100      	bne.n	80075c0 <HAL_SD_CheckReadOperation+0x16>
 80075be:	b1b3      	cbz	r3, 80075ee <HAL_SD_CheckReadOperation+0x44>
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXACT)) && (timeout > 0))
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075c4:	0492      	lsls	r2, r2, #18
 80075c6:	d500      	bpl.n	80075ca <HAL_SD_CheckReadOperation+0x20>
 80075c8:	b9cd      	cbnz	r5, 80075fe <HAL_SD_CheckReadOperation+0x54>
  if (hsd->SdOperation == SD_READ_MULTIPLE_BLOCK)
 80075ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d118      	bne.n	8007602 <HAL_SD_CheckReadOperation+0x58>
    errorstate = HAL_SD_StopTransfer(hsd);
 80075d0:	4620      	mov	r0, r4
 80075d2:	f7ff ffd3 	bl	800757c <HAL_SD_StopTransfer>
  if ((timeout == 0) && (errorstate == SD_OK))
 80075d6:	b90d      	cbnz	r5, 80075dc <HAL_SD_CheckReadOperation+0x32>
 80075d8:	b900      	cbnz	r0, 80075dc <HAL_SD_CheckReadOperation+0x32>
    errorstate = SD_DATA_TIMEOUT;
 80075da:	2004      	movs	r0, #4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80075e2:	639a      	str	r2, [r3, #56]	; 0x38
  if (hsd->SdTransferErr != SD_OK)
 80075e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80075e6:	b183      	cbz	r3, 800760a <HAL_SD_CheckReadOperation+0x60>
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 80075e8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80075ea:	b2c0      	uxtb	r0, r0
 80075ec:	bd38      	pop	{r3, r4, r5, pc}
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 80075ee:	2a00      	cmp	r2, #0
 80075f0:	d0e6      	beq.n	80075c0 <HAL_SD_CheckReadOperation+0x16>
    tmp1 = hsd->DmaTransferCplt; 
 80075f2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 80075f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 80075f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 80075f8:	3a01      	subs	r2, #1
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;    
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	e7dd      	b.n	80075ba <HAL_SD_CheckReadOperation+0x10>
    timeout--;  
 80075fe:	3d01      	subs	r5, #1
 8007600:	e7df      	b.n	80075c2 <HAL_SD_CheckReadOperation+0x18>
  if ((timeout == 0) && (errorstate == SD_OK))
 8007602:	2d00      	cmp	r5, #0
 8007604:	d0e9      	beq.n	80075da <HAL_SD_CheckReadOperation+0x30>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8007606:	2000      	movs	r0, #0
 8007608:	e7e8      	b.n	80075dc <HAL_SD_CheckReadOperation+0x32>
}
 800760a:	bd38      	pop	{r3, r4, r5, pc}

0800760c <HAL_SD_GetStatus>:
{
 800760c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 800760e:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8007610:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8007612:	041b      	lsls	r3, r3, #16
 8007614:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8007616:	2340      	movs	r3, #64	; 0x40
 8007618:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 800761a:	2300      	movs	r3, #0
{
 800761c:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 800761e:	250d      	movs	r5, #13
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8007620:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007622:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8007624:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8007628:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800762a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
 800762c:	9502      	str	r5, [sp, #8]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800762e:	f000 fe52 	bl	80082d6 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEND_STATUS);
 8007632:	4629      	mov	r1, r5
 8007634:	4620      	mov	r0, r4
 8007636:	f7ff f9b3 	bl	80069a0 <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 800763a:	4601      	mov	r1, r0
 800763c:	b948      	cbnz	r0, 8007652 <HAL_SD_GetStatus+0x46>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800763e:	6820      	ldr	r0, [r4, #0]
 8007640:	f000 fe5e 	bl	8008300 <SDMMC_GetResponse>
  if (cardstate == SD_CARD_TRANSFER)
 8007644:	f3c0 2043 	ubfx	r0, r0, #9, #4
    return SD_TRANSFER_OK;
 8007648:	3804      	subs	r0, #4
 800764a:	bf18      	it	ne
 800764c:	2001      	movne	r0, #1
}
 800764e:	b007      	add	sp, #28
 8007650:	bd30      	pop	{r4, r5, pc}
    return SD_TRANSFER_ERROR;
 8007652:	2002      	movs	r0, #2
 8007654:	e7fb      	b.n	800764e <HAL_SD_GetStatus+0x42>

08007656 <HAL_SD_CheckWriteOperation>:
{
 8007656:	b570      	push	{r4, r5, r6, lr}
 8007658:	4604      	mov	r4, r0
 800765a:	460e      	mov	r6, r1
  tmp1 = hsd->DmaTransferCplt; 
 800765c:	6d00      	ldr	r0, [r0, #80]	; 0x50
  tmp2 = hsd->SdTransferCplt;
 800765e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8007660:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  uint32_t timeout = Timeout;
 8007662:	4632      	mov	r2, r6
  tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 8007664:	b2db      	uxtb	r3, r3
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 8007666:	4208      	tst	r0, r1
 8007668:	d100      	bne.n	800766c <HAL_SD_CheckWriteOperation+0x16>
 800766a:	b1c3      	cbz	r3, 800769e <HAL_SD_CheckWriteOperation+0x48>
  while((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXACT))  && (timeout > 0))
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007670:	04d2      	lsls	r2, r2, #19
 8007672:	d500      	bpl.n	8007676 <HAL_SD_CheckWriteOperation+0x20>
 8007674:	b9de      	cbnz	r6, 80076ae <HAL_SD_CheckWriteOperation+0x58>
  if (hsd->SdOperation == SD_WRITE_MULTIPLE_BLOCK)
 8007676:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007678:	2b03      	cmp	r3, #3
 800767a:	d120      	bne.n	80076be <HAL_SD_CheckWriteOperation+0x68>
    errorstate = HAL_SD_StopTransfer(hsd);
 800767c:	4620      	mov	r0, r4
 800767e:	f7ff ff7d 	bl	800757c <HAL_SD_StopTransfer>
 8007682:	4605      	mov	r5, r0
  if ((timeout == 0) && (errorstate == SD_OK))
 8007684:	b90e      	cbnz	r6, 800768a <HAL_SD_CheckWriteOperation+0x34>
 8007686:	b900      	cbnz	r0, 800768a <HAL_SD_CheckWriteOperation+0x34>
    errorstate = SD_DATA_TIMEOUT;
 8007688:	2504      	movs	r5, #4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007690:	639a      	str	r2, [r3, #56]	; 0x38
  if (hsd->SdTransferErr != SD_OK)
 8007692:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007694:	b16b      	cbz	r3, 80076b2 <HAL_SD_CheckWriteOperation+0x5c>
    return (HAL_SD_ErrorTypedef)(hsd->SdTransferErr);
 8007696:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007698:	b2ed      	uxtb	r5, r5
}
 800769a:	4628      	mov	r0, r5
 800769c:	bd70      	pop	{r4, r5, r6, pc}
  while (((tmp1 & tmp2) == 0) && (tmp3 == SD_OK) && (timeout > 0))
 800769e:	2a00      	cmp	r2, #0
 80076a0:	d0e4      	beq.n	800766c <HAL_SD_CheckWriteOperation+0x16>
    tmp1 = hsd->DmaTransferCplt; 
 80076a2:	6d20      	ldr	r0, [r4, #80]	; 0x50
    tmp2 = hsd->SdTransferCplt;
 80076a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 80076a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    timeout--;
 80076a8:	3a01      	subs	r2, #1
    tmp3 = (HAL_SD_ErrorTypedef)hsd->SdTransferErr;
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	e7db      	b.n	8007666 <HAL_SD_CheckWriteOperation+0x10>
    timeout--;  
 80076ae:	3e01      	subs	r6, #1
 80076b0:	e7dd      	b.n	800766e <HAL_SD_CheckWriteOperation+0x18>
  while(HAL_SD_GetStatus(hsd) != SD_TRANSFER_OK)
 80076b2:	4620      	mov	r0, r4
 80076b4:	f7ff ffaa 	bl	800760c <HAL_SD_GetStatus>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	d1fa      	bne.n	80076b2 <HAL_SD_CheckWriteOperation+0x5c>
 80076bc:	e7ed      	b.n	800769a <HAL_SD_CheckWriteOperation+0x44>
  if ((timeout == 0) && (errorstate == SD_OK))
 80076be:	2e00      	cmp	r6, #0
 80076c0:	d0e2      	beq.n	8007688 <HAL_SD_CheckWriteOperation+0x32>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 80076c2:	2500      	movs	r5, #0
 80076c4:	e7e1      	b.n	800768a <HAL_SD_CheckWriteOperation+0x34>

080076c6 <HAL_TIM_Base_MspInit>:
 80076c6:	4770      	bx	lr

080076c8 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076c8:	6803      	ldr	r3, [r0, #0]
 80076ca:	68da      	ldr	r2, [r3, #12]
 80076cc:	f042 0201 	orr.w	r2, r2, #1
 80076d0:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	f042 0201 	orr.w	r2, r2, #1
 80076d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80076da:	2000      	movs	r0, #0
 80076dc:	4770      	bx	lr
	...

080076e0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076e0:	4a2e      	ldr	r2, [pc, #184]	; (800779c <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80076e2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076e4:	4290      	cmp	r0, r2
 80076e6:	d012      	beq.n	800770e <TIM_Base_SetConfig+0x2e>
 80076e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80076ec:	d00f      	beq.n	800770e <TIM_Base_SetConfig+0x2e>
 80076ee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80076f2:	4290      	cmp	r0, r2
 80076f4:	d00b      	beq.n	800770e <TIM_Base_SetConfig+0x2e>
 80076f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076fa:	4290      	cmp	r0, r2
 80076fc:	d007      	beq.n	800770e <TIM_Base_SetConfig+0x2e>
 80076fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007702:	4290      	cmp	r0, r2
 8007704:	d003      	beq.n	800770e <TIM_Base_SetConfig+0x2e>
 8007706:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800770a:	4290      	cmp	r0, r2
 800770c:	d119      	bne.n	8007742 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800770e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007714:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007716:	4a21      	ldr	r2, [pc, #132]	; (800779c <TIM_Base_SetConfig+0xbc>)
 8007718:	4290      	cmp	r0, r2
 800771a:	d01d      	beq.n	8007758 <TIM_Base_SetConfig+0x78>
 800771c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007720:	d01a      	beq.n	8007758 <TIM_Base_SetConfig+0x78>
 8007722:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007726:	4290      	cmp	r0, r2
 8007728:	d016      	beq.n	8007758 <TIM_Base_SetConfig+0x78>
 800772a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800772e:	4290      	cmp	r0, r2
 8007730:	d012      	beq.n	8007758 <TIM_Base_SetConfig+0x78>
 8007732:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007736:	4290      	cmp	r0, r2
 8007738:	d00e      	beq.n	8007758 <TIM_Base_SetConfig+0x78>
 800773a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800773e:	4290      	cmp	r0, r2
 8007740:	d00a      	beq.n	8007758 <TIM_Base_SetConfig+0x78>
 8007742:	4a17      	ldr	r2, [pc, #92]	; (80077a0 <TIM_Base_SetConfig+0xc0>)
 8007744:	4290      	cmp	r0, r2
 8007746:	d007      	beq.n	8007758 <TIM_Base_SetConfig+0x78>
 8007748:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800774c:	4290      	cmp	r0, r2
 800774e:	d003      	beq.n	8007758 <TIM_Base_SetConfig+0x78>
 8007750:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007754:	4290      	cmp	r0, r2
 8007756:	d103      	bne.n	8007760 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007758:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800775a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800775e:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8007760:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007762:	688b      	ldr	r3, [r1, #8]
 8007764:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007766:	680b      	ldr	r3, [r1, #0]
 8007768:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800776a:	4b0c      	ldr	r3, [pc, #48]	; (800779c <TIM_Base_SetConfig+0xbc>)
 800776c:	4298      	cmp	r0, r3
 800776e:	d00f      	beq.n	8007790 <TIM_Base_SetConfig+0xb0>
 8007770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007774:	4298      	cmp	r0, r3
 8007776:	d00b      	beq.n	8007790 <TIM_Base_SetConfig+0xb0>
 8007778:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800777c:	4298      	cmp	r0, r3
 800777e:	d007      	beq.n	8007790 <TIM_Base_SetConfig+0xb0>
 8007780:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007784:	4298      	cmp	r0, r3
 8007786:	d003      	beq.n	8007790 <TIM_Base_SetConfig+0xb0>
 8007788:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800778c:	4298      	cmp	r0, r3
 800778e:	d101      	bne.n	8007794 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007790:	690b      	ldr	r3, [r1, #16]
 8007792:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007794:	2301      	movs	r3, #1
 8007796:	6143      	str	r3, [r0, #20]
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	40012c00 	.word	0x40012c00
 80077a0:	40014000 	.word	0x40014000

080077a4 <HAL_TIM_Base_Init>:
{
 80077a4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80077a6:	4604      	mov	r4, r0
 80077a8:	b1a0      	cbz	r0, 80077d4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80077aa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80077ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80077b2:	b91b      	cbnz	r3, 80077bc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80077b4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80077b8:	f7ff ff85 	bl	80076c6 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80077bc:	2302      	movs	r3, #2
 80077be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077c2:	6820      	ldr	r0, [r4, #0]
 80077c4:	1d21      	adds	r1, r4, #4
 80077c6:	f7ff ff8b 	bl	80076e0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80077ca:	2301      	movs	r3, #1
 80077cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80077d0:	2000      	movs	r0, #0
 80077d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80077d4:	2001      	movs	r0, #1
}
 80077d6:	bd10      	pop	{r4, pc}

080077d8 <HAL_UART_MspInit>:
 80077d8:	4770      	bx	lr

080077da <HAL_UART_MspDeInit>:
 80077da:	4770      	bx	lr

080077dc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80077dc:	b538      	push	{r3, r4, r5, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 80077de:	4605      	mov	r5, r0
 80077e0:	b1a0      	cbz	r0, 800780c <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->State = HAL_UART_STATE_BUSY;
 80077e2:	2302      	movs	r3, #2
 80077e4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80077e8:	6803      	ldr	r3, [r0, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]

  huart->Instance->CR1 = 0x0;
 80077ec:	2400      	movs	r4, #0
  __HAL_UART_DISABLE(huart);
 80077ee:	f022 0201 	bic.w	r2, r2, #1
 80077f2:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0;
 80077f4:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0;
 80077f6:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0;
 80077f8:	609c      	str	r4, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80077fa:	f7ff ffee 	bl	80077da <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077fe:	66ec      	str	r4, [r5, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8007800:	f885 4068 	strb.w	r4, [r5, #104]	; 0x68
  huart->State = HAL_UART_STATE_RESET;
 8007804:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69

  return HAL_OK;
 8007808:	4620      	mov	r0, r4
 800780a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800780c:	2001      	movs	r0, #1
}
 800780e:	bd38      	pop	{r3, r4, r5, pc}

08007810 <HAL_UART_Receive_IT>:
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8007810:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8007814:	2b01      	cmp	r3, #1
 8007816:	d003      	beq.n	8007820 <HAL_UART_Receive_IT+0x10>
 8007818:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800781c:	2b12      	cmp	r3, #18
 800781e:	d147      	bne.n	80078b0 <HAL_UART_Receive_IT+0xa0>
  {
    if((pData == NULL ) || (Size == 0))
 8007820:	2900      	cmp	r1, #0
 8007822:	d043      	beq.n	80078ac <HAL_UART_Receive_IT+0x9c>
 8007824:	2a00      	cmp	r2, #0
 8007826:	d041      	beq.n	80078ac <HAL_UART_Receive_IT+0x9c>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007828:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800782c:	2b01      	cmp	r3, #1
 800782e:	d03f      	beq.n	80078b0 <HAL_UART_Receive_IT+0xa0>
 8007830:	2301      	movs	r3, #1
 8007832:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007836:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8007838:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 800783a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 800783e:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8007842:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8007846:	d123      	bne.n	8007890 <HAL_UART_Receive_IT+0x80>
 8007848:	6903      	ldr	r3, [r0, #16]
 800784a:	b9fb      	cbnz	r3, 800788c <HAL_UART_Receive_IT+0x7c>
 800784c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8007850:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007854:	2300      	movs	r3, #0
 8007856:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8007858:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800785c:	6802      	ldr	r2, [r0, #0]
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 800785e:	2b12      	cmp	r3, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8007860:	bf0c      	ite	eq
 8007862:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8007864:	2322      	movne	r3, #34	; 0x22
 8007866:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800786a:	6813      	ldr	r3, [r2, #0]
 800786c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007870:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007872:	6893      	ldr	r3, [r2, #8]
 8007874:	f043 0301 	orr.w	r3, r3, #1
 8007878:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800787a:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(huart);
 800787c:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800787e:	f041 0120 	orr.w	r1, r1, #32
    __HAL_UNLOCK(huart);
 8007882:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007886:	6011      	str	r1, [r2, #0]

    return HAL_OK;
 8007888:	4618      	mov	r0, r3
 800788a:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800788c:	23ff      	movs	r3, #255	; 0xff
 800788e:	e7df      	b.n	8007850 <HAL_UART_Receive_IT+0x40>
 8007890:	b923      	cbnz	r3, 800789c <HAL_UART_Receive_IT+0x8c>
 8007892:	6903      	ldr	r3, [r0, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0f9      	beq.n	800788c <HAL_UART_Receive_IT+0x7c>
 8007898:	237f      	movs	r3, #127	; 0x7f
 800789a:	e7d9      	b.n	8007850 <HAL_UART_Receive_IT+0x40>
 800789c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078a0:	d1d8      	bne.n	8007854 <HAL_UART_Receive_IT+0x44>
 80078a2:	6903      	ldr	r3, [r0, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d0f7      	beq.n	8007898 <HAL_UART_Receive_IT+0x88>
 80078a8:	233f      	movs	r3, #63	; 0x3f
 80078aa:	e7d1      	b.n	8007850 <HAL_UART_Receive_IT+0x40>
      return HAL_ERROR;
 80078ac:	2001      	movs	r0, #1
 80078ae:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80078b0:	2002      	movs	r0, #2
  }
}
 80078b2:	4770      	bx	lr

080078b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 80078b8:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078ba:	6921      	ldr	r1, [r4, #16]
 80078bc:	68a3      	ldr	r3, [r4, #8]
 80078be:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80078c0:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078c2:	430b      	orrs	r3, r1
 80078c4:	6961      	ldr	r1, [r4, #20]
 80078c6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80078c8:	49b0      	ldr	r1, [pc, #704]	; (8007b8c <UART_SetConfig+0x2d8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078ca:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80078cc:	4001      	ands	r1, r0
 80078ce:	430b      	orrs	r3, r1
 80078d0:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078d2:	686b      	ldr	r3, [r5, #4]
 80078d4:	68e1      	ldr	r1, [r4, #12]
 80078d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80078da:	430b      	orrs	r3, r1
 80078dc:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078de:	4bac      	ldr	r3, [pc, #688]	; (8007b90 <UART_SetConfig+0x2dc>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078e0:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078e2:	429d      	cmp	r5, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078e4:	bf1c      	itt	ne
 80078e6:	6a23      	ldrne	r3, [r4, #32]
 80078e8:	4319      	orrne	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80078ea:	68ab      	ldr	r3, [r5, #8]
 80078ec:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80078f0:	430b      	orrs	r3, r1
 80078f2:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078f4:	4ba7      	ldr	r3, [pc, #668]	; (8007b94 <UART_SetConfig+0x2e0>)
 80078f6:	429d      	cmp	r5, r3
 80078f8:	d118      	bne.n	800792c <UART_SetConfig+0x78>
 80078fa:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80078fe:	49a6      	ldr	r1, [pc, #664]	; (8007b98 <UART_SetConfig+0x2e4>)
 8007900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007904:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007908:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800790c:	5ccb      	ldrb	r3, [r1, r3]
 800790e:	f040 80c6 	bne.w	8007a9e <UART_SetConfig+0x1ea>
  {
    switch (clocksource)
 8007912:	2b08      	cmp	r3, #8
 8007914:	d828      	bhi.n	8007968 <UART_SetConfig+0xb4>
 8007916:	e8df f013 	tbh	[pc, r3, lsl #1]
 800791a:	011a      	.short	0x011a
 800791c:	012f00bf 	.word	0x012f00bf
 8007920:	01140027 	.word	0x01140027
 8007924:	00270027 	.word	0x00270027
 8007928:	00330027 	.word	0x00330027
  UART_GETCLOCKSOURCE(huart, clocksource);
 800792c:	4b9b      	ldr	r3, [pc, #620]	; (8007b9c <UART_SetConfig+0x2e8>)
 800792e:	429d      	cmp	r5, r3
 8007930:	d107      	bne.n	8007942 <UART_SetConfig+0x8e>
 8007932:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8007936:	499a      	ldr	r1, [pc, #616]	; (8007ba0 <UART_SetConfig+0x2ec>)
 8007938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800793c:	f003 030c 	and.w	r3, r3, #12
 8007940:	e7e2      	b.n	8007908 <UART_SetConfig+0x54>
 8007942:	4b98      	ldr	r3, [pc, #608]	; (8007ba4 <UART_SetConfig+0x2f0>)
 8007944:	429d      	cmp	r5, r3
 8007946:	d120      	bne.n	800798a <UART_SetConfig+0xd6>
 8007948:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800794c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007950:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007954:	2b10      	cmp	r3, #16
 8007956:	f000 80f1 	beq.w	8007b3c <UART_SetConfig+0x288>
 800795a:	d808      	bhi.n	800796e <UART_SetConfig+0xba>
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 80f3 	beq.w	8007b48 <UART_SetConfig+0x294>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007962:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007966:	d134      	bne.n	80079d2 <UART_SetConfig+0x11e>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8007968:	2201      	movs	r2, #1
  uint16_t usartdiv                   = 0x0000;
 800796a:	2300      	movs	r3, #0
 800796c:	e0f9      	b.n	8007b62 <UART_SetConfig+0x2ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800796e:	2b20      	cmp	r3, #32
 8007970:	f000 80ff 	beq.w	8007b72 <UART_SetConfig+0x2be>
 8007974:	2b30      	cmp	r3, #48	; 0x30
 8007976:	d1f4      	bne.n	8007962 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007978:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800797c:	f040 80c1 	bne.w	8007b02 <UART_SetConfig+0x24e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007980:	6860      	ldr	r0, [r4, #4]
 8007982:	0843      	lsrs	r3, r0, #1
 8007984:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007988:	e0fc      	b.n	8007b84 <UART_SetConfig+0x2d0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800798a:	4b87      	ldr	r3, [pc, #540]	; (8007ba8 <UART_SetConfig+0x2f4>)
 800798c:	429d      	cmp	r5, r3
 800798e:	d122      	bne.n	80079d6 <UART_SetConfig+0x122>
 8007990:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8007994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007998:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800799c:	2b40      	cmp	r3, #64	; 0x40
 800799e:	f000 80c0 	beq.w	8007b22 <UART_SetConfig+0x26e>
 80079a2:	d806      	bhi.n	80079b2 <UART_SetConfig+0xfe>
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 80b1 	beq.w	8007b0c <UART_SetConfig+0x258>
  if(UART_INSTANCE_LOWPOWER(huart))
 80079aa:	4b79      	ldr	r3, [pc, #484]	; (8007b90 <UART_SetConfig+0x2dc>)
 80079ac:	429d      	cmp	r5, r3
 80079ae:	d1d8      	bne.n	8007962 <UART_SetConfig+0xae>
 80079b0:	e00f      	b.n	80079d2 <UART_SetConfig+0x11e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079b2:	2b80      	cmp	r3, #128	; 0x80
 80079b4:	f000 80bc 	beq.w	8007b30 <UART_SetConfig+0x27c>
 80079b8:	2bc0      	cmp	r3, #192	; 0xc0
 80079ba:	d1f6      	bne.n	80079aa <UART_SetConfig+0xf6>
  if(UART_INSTANCE_LOWPOWER(huart))
 80079bc:	4b74      	ldr	r3, [pc, #464]	; (8007b90 <UART_SetConfig+0x2dc>)
 80079be:	429d      	cmp	r5, r3
 80079c0:	d1da      	bne.n	8007978 <UART_SetConfig+0xc4>
 80079c2:	2308      	movs	r3, #8
      tmpreg = (uint32_t) LSE_VALUE;
 80079c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80079c8:	6862      	ldr	r2, [r4, #4]
 80079ca:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80079ce:	4281      	cmp	r1, r0
 80079d0:	d92b      	bls.n	8007a2a <UART_SetConfig+0x176>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80079d2:	2201      	movs	r2, #1
      break;
    }
  }

  return ret;
 80079d4:	e04b      	b.n	8007a6e <UART_SetConfig+0x1ba>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079d6:	4b75      	ldr	r3, [pc, #468]	; (8007bac <UART_SetConfig+0x2f8>)
 80079d8:	429d      	cmp	r5, r3
 80079da:	d111      	bne.n	8007a00 <UART_SetConfig+0x14c>
 80079dc:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 80079e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ec:	f000 8099 	beq.w	8007b22 <UART_SetConfig+0x26e>
 80079f0:	d9d8      	bls.n	80079a4 <UART_SetConfig+0xf0>
 80079f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079f6:	f000 809b 	beq.w	8007b30 <UART_SetConfig+0x27c>
 80079fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079fe:	e7dc      	b.n	80079ba <UART_SetConfig+0x106>
 8007a00:	4b63      	ldr	r3, [pc, #396]	; (8007b90 <UART_SetConfig+0x2dc>)
 8007a02:	429d      	cmp	r5, r3
 8007a04:	d1ad      	bne.n	8007962 <UART_SetConfig+0xae>
 8007a06:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8007a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a16:	f000 8084 	beq.w	8007b22 <UART_SetConfig+0x26e>
 8007a1a:	d9c3      	bls.n	80079a4 <UART_SetConfig+0xf0>
 8007a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a20:	f000 8086 	beq.w	8007b30 <UART_SetConfig+0x27c>
 8007a24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a28:	e7c7      	b.n	80079ba <UART_SetConfig+0x106>
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8007a2a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8007a2e:	d8d0      	bhi.n	80079d2 <UART_SetConfig+0x11e>
        switch (clocksource)
 8007a30:	2b08      	cmp	r3, #8
 8007a32:	d82f      	bhi.n	8007a94 <UART_SetConfig+0x1e0>
 8007a34:	e8df f003 	tbb	[pc, r3]
 8007a38:	2e1d2e05 	.word	0x2e1d2e05
 8007a3c:	2e2e2e25 	.word	0x2e2e2e25
 8007a40:	28          	.byte	0x28
 8007a41:	00          	.byte	0x00
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007a42:	f7fe ff5f 	bl	8006904 <HAL_RCC_GetPCLK1Freq>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007a46:	6862      	ldr	r2, [r4, #4]
 8007a48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a4c:	0856      	lsrs	r6, r2, #1
 8007a4e:	2700      	movs	r7, #0
 8007a50:	fbe1 6700 	umlal	r6, r7, r1, r0
 8007a54:	2300      	movs	r3, #0
 8007a56:	4630      	mov	r0, r6
 8007a58:	4639      	mov	r1, r7
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007a5a:	f7f9 f8f1 	bl	8000c40 <__aeabi_uldivmod>
          break;
 8007a5e:	2200      	movs	r2, #0
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8007a60:	4b53      	ldr	r3, [pc, #332]	; (8007bb0 <UART_SetConfig+0x2fc>)
 8007a62:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8007a66:	4299      	cmp	r1, r3
 8007a68:	d8b3      	bhi.n	80079d2 <UART_SetConfig+0x11e>
           huart->Instance->BRR = tmpreg;
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	60d8      	str	r0, [r3, #12]

}
 8007a6e:	4610      	mov	r0, r2
 8007a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8007a72:	4850      	ldr	r0, [pc, #320]	; (8007bb4 <UART_SetConfig+0x300>)
 8007a74:	0855      	lsrs	r5, r2, #1
 8007a76:	2300      	movs	r3, #0
 8007a78:	2100      	movs	r1, #0
 8007a7a:	1940      	adds	r0, r0, r5
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007a7c:	f141 0100 	adc.w	r1, r1, #0
 8007a80:	e7eb      	b.n	8007a5a <UART_SetConfig+0x1a6>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007a82:	f7fe fc65 	bl	8006350 <HAL_RCC_GetSysClockFreq>
 8007a86:	e7de      	b.n	8007a46 <UART_SetConfig+0x192>
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007a88:	0850      	lsrs	r0, r2, #1
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8007a92:	e7f3      	b.n	8007a7c <UART_SetConfig+0x1c8>
            ret = HAL_ERROR;
 8007a94:	2201      	movs	r2, #1
 8007a96:	e7e3      	b.n	8007a60 <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007a98:	f7fe ff4c 	bl	8006934 <HAL_RCC_GetPCLK2Freq>
 8007a9c:	e059      	b.n	8007b52 <UART_SetConfig+0x29e>
    switch (clocksource)
 8007a9e:	2b08      	cmp	r3, #8
 8007aa0:	d897      	bhi.n	80079d2 <UART_SetConfig+0x11e>
 8007aa2:	a201      	add	r2, pc, #4	; (adr r2, 8007aa8 <UART_SetConfig+0x1f4>)
 8007aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa8:	08007acd 	.word	0x08007acd
 8007aac:	08007ae1 	.word	0x08007ae1
 8007ab0:	08007ae7 	.word	0x08007ae7
 8007ab4:	080079d3 	.word	0x080079d3
 8007ab8:	08007afd 	.word	0x08007afd
 8007abc:	080079d3 	.word	0x080079d3
 8007ac0:	080079d3 	.word	0x080079d3
 8007ac4:	080079d3 	.word	0x080079d3
 8007ac8:	08007b03 	.word	0x08007b03
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007acc:	f7fe ff1a 	bl	8006904 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007ad0:	6863      	ldr	r3, [r4, #4]
 8007ad2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007ad6:	fbb0 f0f3 	udiv	r0, r0, r3
 8007ada:	b280      	uxth	r0, r0
 8007adc:	60e8      	str	r0, [r5, #12]
 8007ade:	e01e      	b.n	8007b1e <UART_SetConfig+0x26a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007ae0:	f7fe ff28 	bl	8006934 <HAL_RCC_GetPCLK2Freq>
 8007ae4:	e7f4      	b.n	8007ad0 <UART_SetConfig+0x21c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007ae6:	6862      	ldr	r2, [r4, #4]
 8007ae8:	0853      	lsrs	r3, r2, #1
 8007aea:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8007aee:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007af2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	60eb      	str	r3, [r5, #12]
 8007afa:	e010      	b.n	8007b1e <UART_SetConfig+0x26a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007afc:	f7fe fc28 	bl	8006350 <HAL_RCC_GetSysClockFreq>
 8007b00:	e7e6      	b.n	8007ad0 <UART_SetConfig+0x21c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007b02:	6862      	ldr	r2, [r4, #4]
 8007b04:	0853      	lsrs	r3, r2, #1
 8007b06:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007b0a:	e7f2      	b.n	8007af2 <UART_SetConfig+0x23e>
  if(UART_INSTANCE_LOWPOWER(huart))
 8007b0c:	4b20      	ldr	r3, [pc, #128]	; (8007b90 <UART_SetConfig+0x2dc>)
 8007b0e:	429d      	cmp	r5, r3
 8007b10:	d11a      	bne.n	8007b48 <UART_SetConfig+0x294>
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8007b12:	f7fe fef7 	bl	8006904 <HAL_RCC_GetPCLK1Freq>
      break;
 8007b16:	2300      	movs	r3, #0
    if (tmpreg != 0)
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	f47f af55 	bne.w	80079c8 <UART_SetConfig+0x114>
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b1e:	2200      	movs	r2, #0
      break;
 8007b20:	e7a5      	b.n	8007a6e <UART_SetConfig+0x1ba>
  if(UART_INSTANCE_LOWPOWER(huart))
 8007b22:	4b1b      	ldr	r3, [pc, #108]	; (8007b90 <UART_SetConfig+0x2dc>)
 8007b24:	429d      	cmp	r5, r3
 8007b26:	d109      	bne.n	8007b3c <UART_SetConfig+0x288>
      tmpreg = HAL_RCC_GetSysClockFreq();
 8007b28:	f7fe fc12 	bl	8006350 <HAL_RCC_GetSysClockFreq>
      break;
 8007b2c:	2304      	movs	r3, #4
 8007b2e:	e7f3      	b.n	8007b18 <UART_SetConfig+0x264>
  if(UART_INSTANCE_LOWPOWER(huart))
 8007b30:	4b17      	ldr	r3, [pc, #92]	; (8007b90 <UART_SetConfig+0x2dc>)
 8007b32:	429d      	cmp	r5, r3
 8007b34:	d11d      	bne.n	8007b72 <UART_SetConfig+0x2be>
 8007b36:	2302      	movs	r3, #2
      tmpreg = (uint32_t) HSI_VALUE;
 8007b38:	481f      	ldr	r0, [pc, #124]	; (8007bb8 <UART_SetConfig+0x304>)
 8007b3a:	e745      	b.n	80079c8 <UART_SetConfig+0x114>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b3c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007b40:	d1dc      	bne.n	8007afc <UART_SetConfig+0x248>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007b42:	f7fe fc05 	bl	8006350 <HAL_RCC_GetSysClockFreq>
 8007b46:	e004      	b.n	8007b52 <UART_SetConfig+0x29e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b48:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007b4c:	d1be      	bne.n	8007acc <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007b4e:	f7fe fed9 	bl	8006904 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007b52:	6861      	ldr	r1, [r4, #4]
 8007b54:	084a      	lsrs	r2, r1, #1
 8007b56:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8007b5a:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007b5e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b60:	2200      	movs	r2, #0
    brrtemp = usartdiv & 0xFFF0;
 8007b62:	f023 010f 	bic.w	r1, r3, #15
    huart->Instance->BRR = brrtemp;
 8007b66:	6820      	ldr	r0, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8007b68:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8007b6c:	430b      	orrs	r3, r1
 8007b6e:	60c3      	str	r3, [r0, #12]
 8007b70:	e77d      	b.n	8007a6e <UART_SetConfig+0x1ba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b72:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007b76:	d1b6      	bne.n	8007ae6 <UART_SetConfig+0x232>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007b78:	6860      	ldr	r0, [r4, #4]
 8007b7a:	0843      	lsrs	r3, r0, #1
 8007b7c:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8007b80:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007b84:	fbb3 f3f0 	udiv	r3, r3, r0
 8007b88:	e7e9      	b.n	8007b5e <UART_SetConfig+0x2aa>
 8007b8a:	bf00      	nop
 8007b8c:	efff69f3 	.word	0xefff69f3
 8007b90:	40008000 	.word	0x40008000
 8007b94:	40013800 	.word	0x40013800
 8007b98:	0800cec7 	.word	0x0800cec7
 8007b9c:	40004400 	.word	0x40004400
 8007ba0:	0800cecb 	.word	0x0800cecb
 8007ba4:	40004800 	.word	0x40004800
 8007ba8:	40004c00 	.word	0x40004c00
 8007bac:	40005000 	.word	0x40005000
 8007bb0:	000ffcff 	.word	0x000ffcff
 8007bb4:	f4240000 	.word	0xf4240000
 8007bb8:	00f42400 	.word	0x00f42400

08007bbc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007bbe:	07da      	lsls	r2, r3, #31
{
 8007bc0:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bc2:	d506      	bpl.n	8007bd2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bc4:	6801      	ldr	r1, [r0, #0]
 8007bc6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8007bc8:	684a      	ldr	r2, [r1, #4]
 8007bca:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007bce:	4322      	orrs	r2, r4
 8007bd0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bd2:	079c      	lsls	r4, r3, #30
 8007bd4:	d506      	bpl.n	8007be4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bd6:	6801      	ldr	r1, [r0, #0]
 8007bd8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007bda:	684a      	ldr	r2, [r1, #4]
 8007bdc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007be0:	4322      	orrs	r2, r4
 8007be2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007be4:	0759      	lsls	r1, r3, #29
 8007be6:	d506      	bpl.n	8007bf6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007be8:	6801      	ldr	r1, [r0, #0]
 8007bea:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8007bec:	684a      	ldr	r2, [r1, #4]
 8007bee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007bf2:	4322      	orrs	r2, r4
 8007bf4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bf6:	071a      	lsls	r2, r3, #28
 8007bf8:	d506      	bpl.n	8007c08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bfa:	6801      	ldr	r1, [r0, #0]
 8007bfc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007bfe:	684a      	ldr	r2, [r1, #4]
 8007c00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c04:	4322      	orrs	r2, r4
 8007c06:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c08:	06dc      	lsls	r4, r3, #27
 8007c0a:	d506      	bpl.n	8007c1a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c0c:	6801      	ldr	r1, [r0, #0]
 8007c0e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007c10:	688a      	ldr	r2, [r1, #8]
 8007c12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c16:	4322      	orrs	r2, r4
 8007c18:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c1a:	0699      	lsls	r1, r3, #26
 8007c1c:	d506      	bpl.n	8007c2c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c1e:	6801      	ldr	r1, [r0, #0]
 8007c20:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007c22:	688a      	ldr	r2, [r1, #8]
 8007c24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c28:	4322      	orrs	r2, r4
 8007c2a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c2c:	065a      	lsls	r2, r3, #25
 8007c2e:	d50f      	bpl.n	8007c50 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c30:	6801      	ldr	r1, [r0, #0]
 8007c32:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007c34:	684a      	ldr	r2, [r1, #4]
 8007c36:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8007c3a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c3c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c40:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c42:	d105      	bne.n	8007c50 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c44:	684a      	ldr	r2, [r1, #4]
 8007c46:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007c48:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007c4c:	4322      	orrs	r2, r4
 8007c4e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c50:	061b      	lsls	r3, r3, #24
 8007c52:	d506      	bpl.n	8007c62 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c54:	6802      	ldr	r2, [r0, #0]
 8007c56:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007c58:	6853      	ldr	r3, [r2, #4]
 8007c5a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007c5e:	430b      	orrs	r3, r1
 8007c60:	6053      	str	r3, [r2, #4]
 8007c62:	bd10      	pop	{r4, pc}

08007c64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: the Flag status (SET or RESET).
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8007c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c68:	4604      	mov	r4, r0
 8007c6a:	460e      	mov	r6, r1
 8007c6c:	4690      	mov	r8, r2
 8007c6e:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8007c70:	f7fd fb24 	bl	80052bc <HAL_GetTick>
 8007c74:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 8007c76:	f1b8 0f00 	cmp.w	r8, #0
 8007c7a:	d02f      	beq.n	8007cdc <UART_WaitOnFlagUntilTimeout+0x78>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8007c7c:	6822      	ldr	r2, [r4, #0]
 8007c7e:	69d3      	ldr	r3, [r2, #28]
 8007c80:	ea36 0303 	bics.w	r3, r6, r3
 8007c84:	d12f      	bne.n	8007ce6 <UART_WaitOnFlagUntilTimeout+0x82>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007c86:	1c6b      	adds	r3, r5, #1
 8007c88:	d0f9      	beq.n	8007c7e <UART_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8007c8a:	b145      	cbz	r5, 8007c9e <UART_WaitOnFlagUntilTimeout+0x3a>
 8007c8c:	f7fd fb16 	bl	80052bc <HAL_GetTick>
 8007c90:	1bc0      	subs	r0, r0, r7
 8007c92:	4285      	cmp	r5, r0
 8007c94:	d2f2      	bcs.n	8007c7c <UART_WaitOnFlagUntilTimeout+0x18>
 8007c96:	e002      	b.n	8007c9e <UART_WaitOnFlagUntilTimeout+0x3a>
      if(Timeout != HAL_MAX_DELAY)
 8007c98:	1c69      	adds	r1, r5, #1
 8007c9a:	d020      	beq.n	8007cde <UART_WaitOnFlagUntilTimeout+0x7a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8007c9c:	b9cd      	cbnz	r5, 8007cd2 <UART_WaitOnFlagUntilTimeout+0x6e>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ca6:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	f022 0220 	bic.w	r2, r2, #32
 8007cae:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cb6:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cb8:	689a      	ldr	r2, [r3, #8]
 8007cba:	f022 0201 	bic.w	r2, r2, #1
 8007cbe:	609a      	str	r2, [r3, #8]

          huart->State= HAL_UART_STATE_READY;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68

          return HAL_TIMEOUT;
 8007ccc:	2003      	movs	r0, #3
 8007cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8007cd2:	f7fd faf3 	bl	80052bc <HAL_GetTick>
 8007cd6:	1bc0      	subs	r0, r0, r7
 8007cd8:	4285      	cmp	r5, r0
 8007cda:	d3e0      	bcc.n	8007c9e <UART_WaitOnFlagUntilTimeout+0x3a>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8007cdc:	6822      	ldr	r2, [r4, #0]
 8007cde:	69d3      	ldr	r3, [r2, #28]
 8007ce0:	ea36 0303 	bics.w	r3, r6, r3
 8007ce4:	d1d8      	bne.n	8007c98 <UART_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007cec <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cec:	2200      	movs	r2, #0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cee:	6803      	ldr	r3, [r0, #0]
{
 8007cf0:	b510      	push	{r4, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cf2:	66c2      	str	r2, [r0, #108]	; 0x6c
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	0719      	lsls	r1, r3, #28
{
 8007cf8:	4604      	mov	r4, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cfa:	d413      	bmi.n	8007d24 <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	075b      	lsls	r3, r3, #29
 8007d02:	d508      	bpl.n	8007d16 <UART_CheckIdleState+0x2a>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f7ff ffa8 	bl	8007c64 <UART_WaitOnFlagUntilTimeout>
 8007d14:	b970      	cbnz	r0, 8007d34 <UART_CheckIdleState+0x48>
  huart->State= HAL_UART_STATE_READY;
 8007d16:	2301      	movs	r3, #1
  __HAL_UNLOCK(huart);
 8007d18:	2000      	movs	r0, #0
  huart->State= HAL_UART_STATE_READY;
 8007d1a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8007d1e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  return HAL_OK;
 8007d22:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d28:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d2c:	f7ff ff9a 	bl	8007c64 <UART_WaitOnFlagUntilTimeout>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d0e3      	beq.n	8007cfc <UART_CheckIdleState+0x10>
      return HAL_TIMEOUT;
 8007d34:	2003      	movs	r0, #3
 8007d36:	bd10      	pop	{r4, pc}

08007d38 <HAL_UART_Init>:
{
 8007d38:	b510      	push	{r4, lr}
  if(huart == NULL)
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	b360      	cbz	r0, 8007d98 <HAL_UART_Init+0x60>
  if(huart->State == HAL_UART_STATE_RESET)
 8007d3e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8007d42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007d46:	b91b      	cbnz	r3, 8007d50 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8007d48:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8007d4c:	f7ff fd44 	bl	80077d8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8007d50:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8007d52:	2302      	movs	r3, #2
 8007d54:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8007d58:	6813      	ldr	r3, [r2, #0]
 8007d5a:	f023 0301 	bic.w	r3, r3, #1
 8007d5e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d60:	4620      	mov	r0, r4
 8007d62:	f7ff fda7 	bl	80078b4 <UART_SetConfig>
 8007d66:	2801      	cmp	r0, #1
 8007d68:	d016      	beq.n	8007d98 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d6c:	b113      	cbz	r3, 8007d74 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f7ff ff24 	bl	8007bbc <UART_AdvFeatureConfig>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d7c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8007d7e:	689a      	ldr	r2, [r3, #8]
 8007d80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d84:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8007d8c:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8007d8e:	601a      	str	r2, [r3, #0]
}
 8007d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8007d94:	f7ff bfaa 	b.w	8007cec <UART_CheckIdleState>
}
 8007d98:	2001      	movs	r0, #1
 8007d9a:	bd10      	pop	{r4, pc}

08007d9c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007da0:	680a      	ldr	r2, [r1, #0]
 8007da2:	fa92 f4a2 	rbit	r4, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007da6:	f04f 0e01 	mov.w	lr, #1
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007daa:	fab4 f484 	clz	r4, r4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007dae:	2503      	movs	r5, #3
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007db0:	270f      	movs	r7, #15
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007db2:	fa32 f304 	lsrs.w	r3, r2, r4
 8007db6:	d10d      	bne.n	8007dd4 <LL_GPIO_Init+0x38>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007db8:	684b      	ldr	r3, [r1, #4]
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d806      	bhi.n	8007dce <LL_GPIO_Init+0x32>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007dc0:	6843      	ldr	r3, [r0, #4]
 8007dc2:	68c9      	ldr	r1, [r1, #12]
 8007dc4:	ea23 0302 	bic.w	r3, r3, r2
 8007dc8:	434a      	muls	r2, r1
 8007dca:	431a      	orrs	r2, r3
 8007dcc:	6042      	str	r2, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8007dce:	2001      	movs	r0, #1
 8007dd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007dd4:	fa0e f304 	lsl.w	r3, lr, r4
    if (currentpin)
 8007dd8:	4013      	ands	r3, r2
 8007dda:	d069      	beq.n	8007eb0 <LL_GPIO_Init+0x114>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007ddc:	f8d1 8004 	ldr.w	r8, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007de0:	f8d0 9000 	ldr.w	r9, [r0]
 8007de4:	fa93 fca3 	rbit	ip, r3
 8007de8:	fabc fc8c 	clz	ip, ip
 8007dec:	fa93 f6a3 	rbit	r6, r3
 8007df0:	fab6 f686 	clz	r6, r6
 8007df4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007df8:	fa05 fc0c 	lsl.w	ip, r5, ip
 8007dfc:	0076      	lsls	r6, r6, #1
 8007dfe:	ea29 0c0c 	bic.w	ip, r9, ip
 8007e02:	fa08 f606 	lsl.w	r6, r8, r6
 8007e06:	ea4c 0606 	orr.w	r6, ip, r6
 8007e0a:	6006      	str	r6, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007e0c:	f108 36ff 	add.w	r6, r8, #4294967295
 8007e10:	2e01      	cmp	r6, #1
 8007e12:	d816      	bhi.n	8007e42 <LL_GPIO_Init+0xa6>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8007e14:	6886      	ldr	r6, [r0, #8]
 8007e16:	fa93 fca3 	rbit	ip, r3
 8007e1a:	fabc fc8c 	clz	ip, ip
 8007e1e:	fa93 f9a3 	rbit	r9, r3
 8007e22:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007e26:	fa05 fc0c 	lsl.w	ip, r5, ip
 8007e2a:	ea26 0c0c 	bic.w	ip, r6, ip
 8007e2e:	fab9 f989 	clz	r9, r9
 8007e32:	688e      	ldr	r6, [r1, #8]
 8007e34:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8007e38:	fa06 f609 	lsl.w	r6, r6, r9
 8007e3c:	ea4c 0606 	orr.w	r6, ip, r6
 8007e40:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007e42:	68c6      	ldr	r6, [r0, #12]
 8007e44:	fa93 fca3 	rbit	ip, r3
 8007e48:	fabc fc8c 	clz	ip, ip
 8007e4c:	fa93 f9a3 	rbit	r9, r3
 8007e50:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8007e54:	fa05 fc0c 	lsl.w	ip, r5, ip
 8007e58:	ea26 0c0c 	bic.w	ip, r6, ip
 8007e5c:	fab9 f989 	clz	r9, r9
 8007e60:	690e      	ldr	r6, [r1, #16]
 8007e62:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8007e66:	fa06 f609 	lsl.w	r6, r6, r9
 8007e6a:	ea4c 0606 	orr.w	r6, ip, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007e6e:	f1b8 0f02 	cmp.w	r8, #2
 8007e72:	60c6      	str	r6, [r0, #12]
 8007e74:	d11c      	bne.n	8007eb0 <LL_GPIO_Init+0x114>
 8007e76:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8007e7a:	fab6 f686 	clz	r6, r6
 8007e7e:	2e07      	cmp	r6, #7
 8007e80:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8007e84:	dc16      	bgt.n	8007eb4 <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007e86:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8007e8a:	fa93 f6a3 	rbit	r6, r3
 8007e8e:	fab6 f686 	clz	r6, r6
 8007e92:	fa93 f3a3 	rbit	r3, r3
 8007e96:	fab3 f383 	clz	r3, r3
 8007e9a:	00b6      	lsls	r6, r6, #2
 8007e9c:	fa07 f606 	lsl.w	r6, r7, r6
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	ea28 0606 	bic.w	r6, r8, r6
 8007ea6:	fa0c fc03 	lsl.w	ip, ip, r3
 8007eaa:	ea46 060c 	orr.w	r6, r6, ip
 8007eae:	6206      	str	r6, [r0, #32]
    pinpos++;
 8007eb0:	3401      	adds	r4, #1
 8007eb2:	e77e      	b.n	8007db2 <LL_GPIO_Init+0x16>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007eb4:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 8007eb8:	0a1b      	lsrs	r3, r3, #8
 8007eba:	fa93 f6a3 	rbit	r6, r3
 8007ebe:	fab6 f686 	clz	r6, r6
 8007ec2:	fa93 f3a3 	rbit	r3, r3
 8007ec6:	fab3 f383 	clz	r3, r3
 8007eca:	00b6      	lsls	r6, r6, #2
 8007ecc:	fa07 f606 	lsl.w	r6, r7, r6
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	ea28 0606 	bic.w	r6, r8, r6
 8007ed6:	fa0c f303 	lsl.w	r3, ip, r3
 8007eda:	4333      	orrs	r3, r6
 8007edc:	6243      	str	r3, [r0, #36]	; 0x24
 8007ede:	e7e7      	b.n	8007eb0 <LL_GPIO_Init+0x114>

08007ee0 <LL_RTC_TIME_Config>:
{
 8007ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee4:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007ee8:	f44f 1740 	mov.w	r7, #3145728	; 0x300000
 8007eec:	fa97 f7a7 	rbit	r7, r7
 8007ef0:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8007ef4:	fab7 f787 	clz	r7, r7
 8007ef8:	fa94 f4a4 	rbit	r4, r4
 8007efc:	f44f 46e0 	mov.w	r6, #28672	; 0x7000
 8007f00:	fab4 fa84 	clz	sl, r4
 8007f04:	fa96 f6a6 	rbit	r6, r6
 8007f08:	f44f 6970 	mov.w	r9, #3840	; 0xf00
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8007f0c:	fab6 f686 	clz	r6, r6
 8007f10:	fa99 f9a9 	rbit	r9, r9
 8007f14:	2570      	movs	r5, #112	; 0x70
 8007f16:	fab9 f989 	clz	r9, r9
 8007f1a:	fa95 f5a5 	rbit	r5, r5
 8007f1e:	f04f 080f 	mov.w	r8, #15
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8007f22:	fab5 f585 	clz	r5, r5
 8007f26:	fa98 f8a8 	rbit	r8, r8
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007f2a:	f8d0 e000 	ldr.w	lr, [r0]
 8007f2e:	f02e 1e7f 	bic.w	lr, lr, #8323199	; 0x7f007f
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8007f32:	f002 040f 	and.w	r4, r2, #15
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007f36:	f42e 4efe 	bic.w	lr, lr, #32512	; 0x7f00
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8007f3a:	fa04 f40a 	lsl.w	r4, r4, sl
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007f3e:	ea4e 0101 	orr.w	r1, lr, r1
 8007f42:	4321      	orrs	r1, r4
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8007f44:	f003 040f 	and.w	r4, r3, #15
 8007f48:	fa04 f909 	lsl.w	r9, r4, r9
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8007f4c:	fab8 f888 	clz	r8, r8
 8007f50:	f00c 040f 	and.w	r4, ip, #15
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007f54:	ea41 0109 	orr.w	r1, r1, r9
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8007f58:	fa04 f808 	lsl.w	r8, r4, r8
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8007f5c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007f60:	3f04      	subs	r7, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007f62:	ea41 0108 	orr.w	r1, r1, r8
         (((Hours & 0xF0U) << (RTC_POSITION_TR_HT - 4U)) | ((Hours & 0x0FU) << RTC_POSITION_TR_HU))     | \
 8007f66:	40ba      	lsls	r2, r7
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8007f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f6c:	3e04      	subs	r6, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007f6e:	430a      	orrs	r2, r1
         (((Minutes & 0xF0U) << (RTC_POSITION_TR_MT - 4U)) | ((Minutes & 0x0FU) << RTC_POSITION_TR_MU)) | \
 8007f70:	40b3      	lsls	r3, r6
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8007f72:	f00c 0cf0 	and.w	ip, ip, #240	; 0xf0
 8007f76:	3d04      	subs	r5, #4
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007f78:	4313      	orrs	r3, r2
         (((Seconds & 0xF0U) << (RTC_POSITION_TR_ST - 4U)) | ((Seconds & 0x0FU) << RTC_POSITION_TR_SU));
 8007f7a:	fa0c f505 	lsl.w	r5, ip, r5
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8007f7e:	432b      	orrs	r3, r5
 8007f80:	6003      	str	r3, [r0, #0]
 8007f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08007f88 <LL_RTC_DATE_Config>:
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  * @param  Year Value between Min_Data=0x00 and Max_Data=0x99
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DATE_Config(RTC_TypeDef *RTCx, uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8007f90:	f44f 4a60 	mov.w	sl, #57344	; 0xe000
 8007f94:	fa9a faaa 	rbit	sl, sl
 8007f98:	f44f 0770 	mov.w	r7, #15728640	; 0xf00000
  register uint32_t temp = 0U;

  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 8007f9c:	faba fa8a 	clz	sl, sl
 8007fa0:	fa97 f7a7 	rbit	r7, r7
 8007fa4:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8007fa8:	fab7 f787 	clz	r7, r7
 8007fac:	fa94 f4a4 	rbit	r4, r4
 8007fb0:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8007fb4:	fab4 fb84 	clz	fp, r4
 8007fb8:	fa96 f6a6 	rbit	r6, r6
 8007fbc:	f44f 6870 	mov.w	r8, #3840	; 0xf00
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8007fc0:	fab6 f686 	clz	r6, r6
 8007fc4:	fa98 f8a8 	rbit	r8, r8
 8007fc8:	2530      	movs	r5, #48	; 0x30
 8007fca:	fab8 f888 	clz	r8, r8
 8007fce:	fa95 f5a5 	rbit	r5, r5
 8007fd2:	f04f 0c0f 	mov.w	ip, #15
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8007fd6:	fab5 f585 	clz	r5, r5
 8007fda:	fa9c fcac 	rbit	ip, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8007fde:	f00e 040f 	and.w	r4, lr, #15
 8007fe2:	fa04 f40b 	lsl.w	r4, r4, fp
  temp = (WeekDay << RTC_POSITION_DR_WDU)                                                        | \
 8007fe6:	fa01 f10a 	lsl.w	r1, r1, sl

  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8007fea:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8007fee:	4321      	orrs	r1, r4
 8007ff0:	4c12      	ldr	r4, [pc, #72]	; (800803c <LL_RTC_DATE_Config+0xb4>)
 8007ff2:	ea09 0404 	and.w	r4, r9, r4
 8007ff6:	4321      	orrs	r1, r4
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8007ff8:	f003 040f 	and.w	r4, r3, #15
 8007ffc:	fa04 f808 	lsl.w	r8, r4, r8
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8008000:	fabc fc8c 	clz	ip, ip
 8008004:	f002 040f 	and.w	r4, r2, #15
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8008008:	ea41 0108 	orr.w	r1, r1, r8
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 800800c:	fa04 fc0c 	lsl.w	ip, r4, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 8008010:	f00e 0ef0 	and.w	lr, lr, #240	; 0xf0
 8008014:	3f04      	subs	r7, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8008016:	ea41 010c 	orr.w	r1, r1, ip
         (((Year & 0xF0U) << (RTC_POSITION_DR_YT - 4U)) | ((Year & 0x0FU) << RTC_POSITION_DR_YU))   | \
 800801a:	fa0e f707 	lsl.w	r7, lr, r7
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 800801e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008022:	3e04      	subs	r6, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8008024:	4339      	orrs	r1, r7
         (((Month & 0xF0U) << (RTC_POSITION_DR_MT - 4U)) | ((Month & 0x0FU) << RTC_POSITION_DR_MU)) | \
 8008026:	40b3      	lsls	r3, r6
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8008028:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800802c:	3d04      	subs	r5, #4
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 800802e:	430b      	orrs	r3, r1
         (((Day & 0xF0U) << (RTC_POSITION_DR_DT - 4U)) | ((Day & 0x0FU) << RTC_POSITION_DR_DU));
 8008030:	40aa      	lsls	r2, r5
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8008032:	431a      	orrs	r2, r3
 8008034:	6042      	str	r2, [r0, #4]
 8008036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803a:	bf00      	nop
 800803c:	ff0000c0 	.word	0xff0000c0

08008040 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8008040:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8008042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008046:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8008048:	68c3      	ldr	r3, [r0, #12]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 800804a:	065a      	lsls	r2, r3, #25
 800804c:	d41c      	bmi.n	8008088 <LL_RTC_EnterInitMode+0x48>
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 800804e:	f04f 33ff 	mov.w	r3, #4294967295
 8008052:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8008054:	68c3      	ldr	r3, [r0, #12]
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8008056:	490d      	ldr	r1, [pc, #52]	; (800808c <LL_RTC_EnterInitMode+0x4c>)
 8008058:	f3c3 1380 	ubfx	r3, r3, #6, #1
  ErrorStatus status = SUCCESS;
 800805c:	2201      	movs	r2, #1
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
    while ((timeout != 0U) && (tmp != 1U))
 800805e:	9c01      	ldr	r4, [sp, #4]
 8008060:	b104      	cbz	r4, 8008064 <LL_RTC_EnterInitMode+0x24>
 8008062:	b113      	cbz	r3, 800806a <LL_RTC_EnterInitMode+0x2a>
        status = ERROR;
      }
    }
  }
  return status;
}
 8008064:	4610      	mov	r0, r2
 8008066:	b002      	add	sp, #8
 8008068:	bd10      	pop	{r4, pc}
 800806a:	680b      	ldr	r3, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800806c:	03db      	lsls	r3, r3, #15
        timeout --;
 800806e:	bf42      	ittt	mi
 8008070:	9b01      	ldrmi	r3, [sp, #4]
 8008072:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8008076:	9301      	strmi	r3, [sp, #4]
 8008078:	68c3      	ldr	r3, [r0, #12]
      if (timeout == 0U)
 800807a:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 800807c:	2c00      	cmp	r4, #0
 800807e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008082:	bf08      	it	eq
 8008084:	2200      	moveq	r2, #0
 8008086:	e7ea      	b.n	800805e <LL_RTC_EnterInitMode+0x1e>
  ErrorStatus status = SUCCESS;
 8008088:	2201      	movs	r2, #1
 800808a:	e7eb      	b.n	8008064 <LL_RTC_EnterInitMode+0x24>
 800808c:	e000e010 	.word	0xe000e010

08008090 <LL_RTC_Init>:
{
 8008090:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8008092:	23ca      	movs	r3, #202	; 0xca
 8008094:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8008096:	2353      	movs	r3, #83	; 0x53
 8008098:	6243      	str	r3, [r0, #36]	; 0x24
 800809a:	4604      	mov	r4, r0
 800809c:	460d      	mov	r5, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800809e:	f7ff ffcf 	bl	8008040 <LL_RTC_EnterInitMode>
 80080a2:	b1f0      	cbz	r0, 80080e2 <LL_RTC_Init+0x52>
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 80080a4:	68a3      	ldr	r3, [r4, #8]
 80080a6:	682a      	ldr	r2, [r5, #0]
 80080a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ac:	4313      	orrs	r3, r2
 80080ae:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 80080b0:	6923      	ldr	r3, [r4, #16]
 80080b2:	68aa      	ldr	r2, [r5, #8]
 80080b4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80080b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080bc:	4313      	orrs	r3, r2
 80080be:	6123      	str	r3, [r4, #16]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_POSITION_PRER_PREDIV_A);
 80080c0:	6921      	ldr	r1, [r4, #16]
 80080c2:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
 80080c6:	fa93 f3a3 	rbit	r3, r3
 80080ca:	fab3 f283 	clz	r2, r3
 80080ce:	686b      	ldr	r3, [r5, #4]
 80080d0:	4093      	lsls	r3, r2
 80080d2:	f421 02fe 	bic.w	r2, r1, #8323072	; 0x7f0000
 80080d6:	4313      	orrs	r3, r2
 80080d8:	6123      	str	r3, [r4, #16]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 80080da:	f06f 0380 	mvn.w	r3, #128	; 0x80
 80080de:	60e3      	str	r3, [r4, #12]
    status = SUCCESS;
 80080e0:	2001      	movs	r0, #1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80080e2:	23ff      	movs	r3, #255	; 0xff
 80080e4:	6263      	str	r3, [r4, #36]	; 0x24
}
 80080e6:	bd38      	pop	{r3, r4, r5, pc}

080080e8 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 80080e8:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 80080ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80080ee:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 80080f0:	68c3      	ldr	r3, [r0, #12]
 80080f2:	491e      	ldr	r1, [pc, #120]	; (800816c <LL_RTC_WaitForSynchro+0x84>)
 80080f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080f8:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 80080fc:	60c3      	str	r3, [r0, #12]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 80080fe:	68c2      	ldr	r2, [r0, #12]
  ErrorStatus status = SUCCESS;
 8008100:	2301      	movs	r3, #1
 8008102:	f3c2 1240 	ubfx	r2, r2, #5, #1
  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
  while ((timeout != 0U) && (tmp != 0U))
 8008106:	9c01      	ldr	r4, [sp, #4]
 8008108:	b91c      	cbnz	r4, 8008112 <LL_RTC_WaitForSynchro+0x2a>
    {
      status = ERROR;
    }
  }

  if (status != ERROR)
 800810a:	b99b      	cbnz	r3, 8008134 <LL_RTC_WaitForSynchro+0x4c>
      }
    }
  }

  return (status);
}
 800810c:	4618      	mov	r0, r3
 800810e:	b002      	add	sp, #8
 8008110:	bd10      	pop	{r4, pc}
  while ((timeout != 0U) && (tmp != 0U))
 8008112:	2a00      	cmp	r2, #0
 8008114:	d0f9      	beq.n	800810a <LL_RTC_WaitForSynchro+0x22>
 8008116:	680a      	ldr	r2, [r1, #0]
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8008118:	03d4      	lsls	r4, r2, #15
      timeout--;
 800811a:	bf42      	ittt	mi
 800811c:	9a01      	ldrmi	r2, [sp, #4]
 800811e:	f102 32ff 	addmi.w	r2, r2, #4294967295
 8008122:	9201      	strmi	r2, [sp, #4]
 8008124:	68c2      	ldr	r2, [r0, #12]
    if (timeout == 0U)
 8008126:	9c01      	ldr	r4, [sp, #4]
      status = ERROR;
 8008128:	2c00      	cmp	r4, #0
 800812a:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800812e:	bf08      	it	eq
 8008130:	2300      	moveq	r3, #0
 8008132:	e7e8      	b.n	8008106 <LL_RTC_WaitForSynchro+0x1e>
    timeout = RTC_SYNCHRO_TIMEOUT;
 8008134:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008138:	9201      	str	r2, [sp, #4]
 800813a:	68c2      	ldr	r2, [r0, #12]
 800813c:	490b      	ldr	r1, [pc, #44]	; (800816c <LL_RTC_WaitForSynchro+0x84>)
 800813e:	f3c2 1240 	ubfx	r2, r2, #5, #1
    while ((timeout != 0U) && (tmp != 1U))
 8008142:	9c01      	ldr	r4, [sp, #4]
 8008144:	2c00      	cmp	r4, #0
 8008146:	d0e1      	beq.n	800810c <LL_RTC_WaitForSynchro+0x24>
 8008148:	2a00      	cmp	r2, #0
 800814a:	d1df      	bne.n	800810c <LL_RTC_WaitForSynchro+0x24>
 800814c:	680a      	ldr	r2, [r1, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 800814e:	03d2      	lsls	r2, r2, #15
        timeout--;
 8008150:	bf42      	ittt	mi
 8008152:	9a01      	ldrmi	r2, [sp, #4]
 8008154:	f102 32ff 	addmi.w	r2, r2, #4294967295
 8008158:	9201      	strmi	r2, [sp, #4]
 800815a:	68c2      	ldr	r2, [r0, #12]
      if (timeout == 0U)
 800815c:	9c01      	ldr	r4, [sp, #4]
        status = ERROR;
 800815e:	2c00      	cmp	r4, #0
 8008160:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8008164:	bf08      	it	eq
 8008166:	2300      	moveq	r3, #0
 8008168:	e7eb      	b.n	8008142 <LL_RTC_WaitForSynchro+0x5a>
 800816a:	bf00      	nop
 800816c:	e000e010 	.word	0xe000e010

08008170 <LL_RTC_TIME_Init>:
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8008170:	6883      	ldr	r3, [r0, #8]
{
 8008172:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008174:	4615      	mov	r5, r2
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8008176:	065a      	lsls	r2, r3, #25
      RTC_TimeStruct->TimeFormat = 0x00U;
 8008178:	bf5c      	itt	pl
 800817a:	2300      	movpl	r3, #0
 800817c:	602b      	strpl	r3, [r5, #0]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800817e:	23ca      	movs	r3, #202	; 0xca
 8008180:	6243      	str	r3, [r0, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8008182:	2353      	movs	r3, #83	; 0x53
 8008184:	6243      	str	r3, [r0, #36]	; 0x24
{
 8008186:	4604      	mov	r4, r0
  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8008188:	460e      	mov	r6, r1
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800818a:	f7ff ff59 	bl	8008040 <LL_RTC_EnterInitMode>
 800818e:	b190      	cbz	r0, 80081b6 <LL_RTC_TIME_Init+0x46>
 8008190:	796b      	ldrb	r3, [r5, #5]
 8008192:	792a      	ldrb	r2, [r5, #4]
 8008194:	79a8      	ldrb	r0, [r5, #6]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8008196:	b196      	cbz	r6, 80081be <LL_RTC_TIME_Init+0x4e>
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8008198:	9000      	str	r0, [sp, #0]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 800819a:	6829      	ldr	r1, [r5, #0]
 800819c:	4620      	mov	r0, r4
 800819e:	f7ff fe9f 	bl	8007ee0 <LL_RTC_TIME_Config>
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 80081a2:	4b14      	ldr	r3, [pc, #80]	; (80081f4 <LL_RTC_TIME_Init+0x84>)
 80081a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081a8:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 80081aa:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 80081ac:	069b      	lsls	r3, r3, #26
 80081ae:	d41e      	bmi.n	80081ee <LL_RTC_TIME_Init+0x7e>
      status = LL_RTC_WaitForSynchro(RTCx);
 80081b0:	4620      	mov	r0, r4
 80081b2:	f7ff ff99 	bl	80080e8 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80081b6:	23ff      	movs	r3, #255	; 0xff
 80081b8:	6263      	str	r3, [r4, #36]	; 0x24
}
 80081ba:	b002      	add	sp, #8
 80081bc:	bd70      	pop	{r4, r5, r6, pc}
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 80081be:	210a      	movs	r1, #10
 80081c0:	fbb3 f6f1 	udiv	r6, r3, r1
 80081c4:	fb01 3316 	mls	r3, r1, r6, r3
 80081c8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 80081cc:	fbb2 f6f1 	udiv	r6, r2, r1
 80081d0:	fb01 2216 	mls	r2, r1, r6, r2
 80081d4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 80081d8:	fbb0 f6f1 	udiv	r6, r0, r1
 80081dc:	fb01 0116 	mls	r1, r1, r6, r0
 80081e0:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 80081e4:	b2c9      	uxtb	r1, r1
 80081e6:	9100      	str	r1, [sp, #0]
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	b2d2      	uxtb	r2, r2
 80081ec:	e7d5      	b.n	800819a <LL_RTC_TIME_Init+0x2a>
      status = SUCCESS;
 80081ee:	2001      	movs	r0, #1
 80081f0:	e7e1      	b.n	80081b6 <LL_RTC_TIME_Init+0x46>
 80081f2:	bf00      	nop
 80081f4:	40002800 	.word	0x40002800

080081f8 <LL_RTC_DATE_Init>:
{
 80081f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081fa:	4604      	mov	r4, r0
 80081fc:	4616      	mov	r6, r2
  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 80081fe:	460f      	mov	r7, r1
 8008200:	b931      	cbnz	r1, 8008210 <LL_RTC_DATE_Init+0x18>
 8008202:	7853      	ldrb	r3, [r2, #1]
 8008204:	06da      	lsls	r2, r3, #27
    RTC_DateStruct->Month = (RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU;
 8008206:	bf42      	ittt	mi
 8008208:	f023 0310 	bicmi.w	r3, r3, #16
 800820c:	330a      	addmi	r3, #10
 800820e:	7073      	strbmi	r3, [r6, #1]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8008210:	23ca      	movs	r3, #202	; 0xca
 8008212:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8008214:	2353      	movs	r3, #83	; 0x53
 8008216:	6263      	str	r3, [r4, #36]	; 0x24
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8008218:	4620      	mov	r0, r4
 800821a:	f7ff ff11 	bl	8008040 <LL_RTC_EnterInitMode>
 800821e:	b198      	cbz	r0, 8008248 <LL_RTC_DATE_Init+0x50>
 8008220:	7873      	ldrb	r3, [r6, #1]
 8008222:	78b5      	ldrb	r5, [r6, #2]
 8008224:	7831      	ldrb	r1, [r6, #0]
 8008226:	78f6      	ldrb	r6, [r6, #3]
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8008228:	b197      	cbz	r7, 8008250 <LL_RTC_DATE_Init+0x58>
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 800822a:	9600      	str	r6, [sp, #0]
 800822c:	462a      	mov	r2, r5
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800822e:	4620      	mov	r0, r4
 8008230:	f7ff feaa 	bl	8007f88 <LL_RTC_DATE_Config>
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8008234:	4b13      	ldr	r3, [pc, #76]	; (8008284 <LL_RTC_DATE_Init+0x8c>)
 8008236:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800823a:	60da      	str	r2, [r3, #12]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 800823c:	68a3      	ldr	r3, [r4, #8]
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 800823e:	069b      	lsls	r3, r3, #26
 8008240:	d41e      	bmi.n	8008280 <LL_RTC_DATE_Init+0x88>
      status = LL_RTC_WaitForSynchro(RTCx);
 8008242:	4620      	mov	r0, r4
 8008244:	f7ff ff50 	bl	80080e8 <LL_RTC_WaitForSynchro>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8008248:	23ff      	movs	r3, #255	; 0xff
 800824a:	6263      	str	r3, [r4, #36]	; 0x24
}
 800824c:	b003      	add	sp, #12
 800824e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8008250:	200a      	movs	r0, #10
 8008252:	fbb3 f2f0 	udiv	r2, r3, r0
 8008256:	fb00 3312 	mls	r3, r0, r2, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 800825a:	fbb5 f7f0 	udiv	r7, r5, r0
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 800825e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8008262:	fb00 5217 	mls	r2, r0, r7, r5
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8008266:	fbb6 f5f0 	udiv	r5, r6, r0
 800826a:	fb00 6015 	mls	r0, r0, r5, r6
 800826e:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8008272:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 8008276:	b2c0      	uxtb	r0, r0
 8008278:	9000      	str	r0, [sp, #0]
 800827a:	b2db      	uxtb	r3, r3
 800827c:	b2d2      	uxtb	r2, r2
 800827e:	e7d6      	b.n	800822e <LL_RTC_DATE_Init+0x36>
      status = SUCCESS;
 8008280:	2001      	movs	r0, #1
 8008282:	e7e1      	b.n	8008248 <LL_RTC_DATE_Init+0x50>
 8008284:	40002800 	.word	0x40002800

08008288 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008288:	b084      	sub	sp, #16
 800828a:	b510      	push	{r4, lr}
 800828c:	ac03      	add	r4, sp, #12
 800828e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8008292:	9904      	ldr	r1, [sp, #16]
 8008294:	9b03      	ldr	r3, [sp, #12]
 8008296:	6842      	ldr	r2, [r0, #4]
 8008298:	430b      	orrs	r3, r1
 800829a:	9905      	ldr	r1, [sp, #20]
 800829c:	430b      	orrs	r3, r1
 800829e:	9906      	ldr	r1, [sp, #24]
 80082a0:	430b      	orrs	r3, r1
 80082a2:	9907      	ldr	r1, [sp, #28]
 80082a4:	430b      	orrs	r3, r1
 80082a6:	9908      	ldr	r1, [sp, #32]
                                              Init.BusWide             |\
                                              Init.HardwareFlowControl |\
                                              Init.ClockDiv);  

  return HAL_OK;
}
 80082a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 80082ac:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 80082b0:	430b      	orrs	r3, r1
 80082b2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80082b6:	4313      	orrs	r3, r2
 80082b8:	6043      	str	r3, [r0, #4]
}
 80082ba:	b004      	add	sp, #16
 80082bc:	2000      	movs	r0, #0
 80082be:	4770      	bx	lr

080082c0 <SDMMC_ReadFIFO>:
 80082c0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80082c4:	4770      	bx	lr

080082c6 <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80082c6:	2303      	movs	r3, #3
 80082c8:	6003      	str	r3, [r0, #0]
  
  return HAL_OK; 
}
 80082ca:	2000      	movs	r0, #0
 80082cc:	4770      	bx	lr

080082ce <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80082ce:	6800      	ldr	r0, [r0, #0]
}
 80082d0:	f000 0003 	and.w	r0, r0, #3
 80082d4:	4770      	bx	lr

080082d6 <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80082d6:	680b      	ldr	r3, [r1, #0]
 80082d8:	6083      	str	r3, [r0, #8]

  /* Set SDMMC command parameters */
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 80082da:	68c3      	ldr	r3, [r0, #12]
 80082dc:	684a      	ldr	r2, [r1, #4]
 80082de:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80082e2:	f023 030f 	bic.w	r3, r3, #15
 80082e6:	4313      	orrs	r3, r2
 80082e8:	688a      	ldr	r2, [r1, #8]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	68ca      	ldr	r2, [r1, #12]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	690a      	ldr	r2, [r1, #16]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60c3      	str	r3, [r0, #12]
                                          Command->Response         |\
                                          Command->WaitForInterrupt |\
                                          Command->CPSM); 
  
  return HAL_OK;  
}
 80082f6:	2000      	movs	r0, #0
 80082f8:	4770      	bx	lr

080082fa <SDMMC_GetCommandResponse>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
  return (uint8_t)(SDMMCx->RESPCMD);
 80082fa:	6900      	ldr	r0, [r0, #16]
}
 80082fc:	b2c0      	uxtb	r0, r0
 80082fe:	4770      	bx	lr

08008300 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008300:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8008302:	3014      	adds	r0, #20
 8008304:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 8008306:	2300      	movs	r3, #0
 8008308:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800830a:	9101      	str	r1, [sp, #4]
  
  return (*(__IO uint32_t *) tmp);
 800830c:	9b01      	ldr	r3, [sp, #4]
 800830e:	6818      	ldr	r0, [r3, #0]
}  
 8008310:	b002      	add	sp, #8
 8008312:	4770      	bx	lr

08008314 <SDMMC_DataConfig>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008314:	680b      	ldr	r3, [r1, #0]
 8008316:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008318:	684b      	ldr	r3, [r1, #4]
 800831a:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 800831c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800831e:	688a      	ldr	r2, [r1, #8]
 8008320:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 8008324:	4313      	orrs	r3, r2
 8008326:	68ca      	ldr	r2, [r1, #12]
 8008328:	4313      	orrs	r3, r2
 800832a:	690a      	ldr	r2, [r1, #16]
 800832c:	4313      	orrs	r3, r2
 800832e:	694a      	ldr	r2, [r1, #20]
 8008330:	4313      	orrs	r3, r2
 8008332:	62c3      	str	r3, [r0, #44]	; 0x2c
                                              Data->TransferMode  |\
                                              Data->DPSM);

  return HAL_OK;

}
 8008334:	2000      	movs	r0, #0
 8008336:	4770      	bx	lr

08008338 <LL_SPI_Init>:
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8008338:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800833a:	065b      	lsls	r3, r3, #25
{
 800833c:	b570      	push	{r4, r5, r6, lr}
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800833e:	d426      	bmi.n	800838e <LL_SPI_Init+0x56>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8008340:	e891 0048 	ldmia.w	r1, {r3, r6}
 8008344:	4333      	orrs	r3, r6
 8008346:	68ce      	ldr	r6, [r1, #12]
 8008348:	694d      	ldr	r5, [r1, #20]
 800834a:	6804      	ldr	r4, [r0, #0]
 800834c:	6a0a      	ldr	r2, [r1, #32]
 800834e:	4333      	orrs	r3, r6
 8008350:	690e      	ldr	r6, [r1, #16]
 8008352:	4333      	orrs	r3, r6
 8008354:	698e      	ldr	r6, [r1, #24]
 8008356:	432b      	orrs	r3, r5
 8008358:	4333      	orrs	r3, r6
 800835a:	69ce      	ldr	r6, [r1, #28]
 800835c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8008360:	4333      	orrs	r3, r6
 8008362:	f024 04bf 	bic.w	r4, r4, #191	; 0xbf
 8008366:	4313      	orrs	r3, r2
 8008368:	4323      	orrs	r3, r4
 800836a:	6003      	str	r3, [r0, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 800836c:	6844      	ldr	r4, [r0, #4]
 800836e:	688b      	ldr	r3, [r1, #8]
 8008370:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
 8008374:	ea43 4315 	orr.w	r3, r3, r5, lsr #16
 8008378:	f024 0404 	bic.w	r4, r4, #4
 800837c:	4323      	orrs	r3, r4

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800837e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    MODIFY_REG(SPIx->CR2,
 8008382:	6043      	str	r3, [r0, #4]
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8008384:	d101      	bne.n	800838a <LL_SPI_Init+0x52>
 8008386:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8008388:	6103      	str	r3, [r0, #16]
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 800838a:	2001      	movs	r0, #1
  }

  return status;
}
 800838c:	bd70      	pop	{r4, r5, r6, pc}
  ErrorStatus status = ERROR;
 800838e:	2000      	movs	r0, #0
 8008390:	bd70      	pop	{r4, r5, r6, pc}

08008392 <USB_CoreInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008392:	b084      	sub	sp, #16
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	ad05      	add	r5, sp, #20
 8008398:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800839c:	68c3      	ldr	r3, [r0, #12]
 800839e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
{
 80083a2:	4604      	mov	r4, r0
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80083a4:	60c3      	str	r3, [r0, #12]
  
  /* Reset after a PHY select and set Host mode */
  USB_CoreReset(USBx);
 80083a6:	f000 fb75 	bl	8008a94 <USB_CoreReset>
  
  /* Deactivate the power down*/
  USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80083aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80083ae:	63a3      	str	r3, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 80083b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083b4:	2000      	movs	r0, #0
 80083b6:	b004      	add	sp, #16
 80083b8:	4770      	bx	lr

080083ba <USB_EnableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80083ba:	6883      	ldr	r3, [r0, #8]
 80083bc:	f043 0301 	orr.w	r3, r3, #1
 80083c0:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80083c2:	2000      	movs	r0, #0
 80083c4:	4770      	bx	lr

080083c6 <USB_DisableGlobalInt>:
  * @param  USBx: Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80083c6:	6883      	ldr	r3, [r0, #8]
 80083c8:	f023 0301 	bic.w	r3, r3, #1
 80083cc:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80083ce:	2000      	movs	r0, #0
 80083d0:	4770      	bx	lr

080083d2 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_ModeTypeDef mode)
{
 80083d2:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80083d4:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_HOST_MODE)
 80083d6:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80083d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80083dc:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_HOST_MODE)
 80083de:	d108      	bne.n	80083f2 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80083e0:	68c3      	ldr	r3, [r0, #12]
 80083e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083e6:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50);
 80083e8:	2032      	movs	r0, #50	; 0x32
 80083ea:	f7fc ff6d 	bl	80052c8 <HAL_Delay>
  
  return HAL_OK;
}
 80083ee:	2000      	movs	r0, #0
 80083f0:	bd08      	pop	{r3, pc}
  else if ( mode == USB_DEVICE_MODE)
 80083f2:	2900      	cmp	r1, #0
 80083f4:	d1f8      	bne.n	80083e8 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 80083f6:	68c3      	ldr	r3, [r0, #12]
 80083f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083fc:	60c3      	str	r3, [r0, #12]
 80083fe:	e7f3      	b.n	80083e8 <USB_SetCurrentMode+0x16>

08008400 <USB_DevInit>:
  * @param  cfg: pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008400:	b084      	sub	sp, #16
 8008402:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008406:	4604      	mov	r4, r0
 8008408:	a809      	add	r0, sp, #36	; 0x24
 800840a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t index = 0;

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800840e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008410:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8008412:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8008416:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800841a:	4689      	mov	r9, r1
 800841c:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 800841e:	b95f      	cbnz	r7, 8008438 <USB_DevInit+0x38>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8008420:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008422:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008426:	63a3      	str	r3, [r4, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800842e:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008436:	6023      	str	r3, [r4, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 8008438:	2500      	movs	r5, #0
 800843a:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800843e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8008442:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  /* Set Full speed phy */
  USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8008446:	2103      	movs	r1, #3
 8008448:	4620      	mov	r0, r4
 800844a:	f000 f893 	bl	8008574 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 800844e:	2110      	movs	r1, #16
 8008450:	4620      	mov	r0, r4
 8008452:	f000 f86d 	bl	8008530 <USB_FlushTxFifo>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008456:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  USB_FlushRxFifo(USBx);
 800845a:	4620      	mov	r0, r4
 800845c:	f000 f87a 	bl	8008554 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
  USBx_DEVICE->DOEPMSK = 0;
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8008460:	f04f 33ff 	mov.w	r3, #4294967295
  USBx_DEVICE->DIEPMSK = 0;
 8008464:	6135      	str	r5, [r6, #16]
 8008466:	462a      	mov	r2, r5
  USBx_DEVICE->DOEPMSK = 0;
 8008468:	6175      	str	r5, [r6, #20]
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800846a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800846e:	61b3      	str	r3, [r6, #24]
    {
      USBx_INEP(index)->DIEPCTL = 0;
    }
    
    USBx_INEP(index)->DIEPTSIZ = 0;
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8008470:	20ff      	movs	r0, #255	; 0xff
  USBx_DEVICE->DAINTMSK = 0;
 8008472:	61f5      	str	r5, [r6, #28]
 8008474:	f504 6310 	add.w	r3, r4, #2304	; 0x900
  for (index = 0; index < cfg.dev_endpoints; index++)
 8008478:	454d      	cmp	r5, r9
 800847a:	d13c      	bne.n	80084f6 <USB_DevInit+0xf6>
 800847c:	2200      	movs	r2, #0
 800847e:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8008482:	4611      	mov	r1, r2
  
  for (index = 0; index < cfg.dev_endpoints; index++)
  {
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8008484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    {
      USBx_OUTEP(index)->DOEPCTL = 0;
    }
    
    USBx_OUTEP(index)->DOEPTSIZ = 0;
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8008488:	f04f 0eff 	mov.w	lr, #255	; 0xff
  for (index = 0; index < cfg.dev_endpoints; index++)
 800848c:	4295      	cmp	r5, r2
 800848e:	d13e      	bne.n	800850e <USB_DevInit+0x10e>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008490:	6933      	ldr	r3, [r6, #16]
  
  if (cfg.dma_enable == 1)
 8008492:	f1b8 0f01 	cmp.w	r8, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008496:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800849a:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1)
 800849c:	d108      	bne.n	80084b0 <USB_DevInit+0xb0>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 800849e:	4b22      	ldr	r3, [pc, #136]	; (8008528 <USB_DevInit+0x128>)
 80084a0:	6333      	str	r3, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 80084a2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80084a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084a8:	f043 0303 	orr.w	r3, r3, #3
 80084ac:	6333      	str	r3, [r6, #48]	; 0x30
    
    index= USBx_DEVICE->DTHRCTL;
 80084ae:	6b33      	ldr	r3, [r6, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 80084b0:	2300      	movs	r3, #0
 80084b2:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 80084b4:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80084b8:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80084ba:	f1b8 0f00 	cmp.w	r8, #0
 80084be:	d103      	bne.n	80084c8 <USB_DevInit+0xc8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80084c0:	69a3      	ldr	r3, [r4, #24]
 80084c2:	f043 0310 	orr.w	r3, r3, #16
 80084c6:	61a3      	str	r3, [r4, #24]
  }

    /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80084c8:	69a2      	ldr	r2, [r4, #24]
 80084ca:	4b18      	ldr	r3, [pc, #96]	; (800852c <USB_DevInit+0x12c>)
 80084cc:	4313      	orrs	r3, r2
 80084ce:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 80084d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084d2:	b11b      	cbz	r3, 80084dc <USB_DevInit+0xdc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80084d4:	69a3      	ldr	r3, [r4, #24]
 80084d6:	f043 0308 	orr.w	r3, r3, #8
 80084da:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 80084dc:	2f01      	cmp	r7, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 80084de:	bf01      	itttt	eq
 80084e0:	69a3      	ldreq	r3, [r4, #24]
 80084e2:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80084e6:	f043 0304 	orreq.w	r3, r3, #4
 80084ea:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 80084ec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084f0:	2000      	movs	r0, #0
 80084f2:	b004      	add	sp, #16
 80084f4:	4770      	bx	lr
    if ((USBx_INEP(index)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084f6:	f8d3 e000 	ldr.w	lr, [r3]
 80084fa:	f1be 0f00 	cmp.w	lr, #0
      USBx_INEP(index)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80084fe:	bfb4      	ite	lt
 8008500:	6019      	strlt	r1, [r3, #0]
      USBx_INEP(index)->DIEPCTL = 0;
 8008502:	601a      	strge	r2, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 8008504:	3501      	adds	r5, #1
    USBx_INEP(index)->DIEPTSIZ = 0;
 8008506:	611a      	str	r2, [r3, #16]
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8008508:	6098      	str	r0, [r3, #8]
 800850a:	3320      	adds	r3, #32
 800850c:	e7b4      	b.n	8008478 <USB_DevInit+0x78>
    if ((USBx_OUTEP(index)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800850e:	f8d3 c000 	ldr.w	ip, [r3]
 8008512:	f1bc 0f00 	cmp.w	ip, #0
      USBx_OUTEP(index)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8008516:	bfb4      	ite	lt
 8008518:	6018      	strlt	r0, [r3, #0]
      USBx_OUTEP(index)->DOEPCTL = 0;
 800851a:	6019      	strge	r1, [r3, #0]
  for (index = 0; index < cfg.dev_endpoints; index++)
 800851c:	3201      	adds	r2, #1
    USBx_OUTEP(index)->DOEPTSIZ = 0;
 800851e:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8008520:	f8c3 e008 	str.w	lr, [r3, #8]
 8008524:	3320      	adds	r3, #32
 8008526:	e7b1      	b.n	800848c <USB_DevInit+0x8c>
 8008528:	00800100 	.word	0x00800100
 800852c:	803c3800 	.word	0x803c3800

08008530 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8008530:	0189      	lsls	r1, r1, #6
 8008532:	f041 0120 	orr.w	r1, r1, #32
 8008536:	4a06      	ldr	r2, [pc, #24]	; (8008550 <USB_FlushTxFifo+0x20>)
 8008538:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000)
 800853a:	3a01      	subs	r2, #1
 800853c:	d005      	beq.n	800854a <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800853e:	6903      	ldr	r3, [r0, #16]
 8008540:	f013 0320 	ands.w	r3, r3, #32
 8008544:	d1f9      	bne.n	800853a <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8008546:	4618      	mov	r0, r3
 8008548:	4770      	bx	lr
      return HAL_TIMEOUT;
 800854a:	2003      	movs	r0, #3
}
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	00030d41 	.word	0x00030d41

08008554 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008554:	2310      	movs	r3, #16
 8008556:	4a06      	ldr	r2, [pc, #24]	; (8008570 <USB_FlushRxFifo+0x1c>)
 8008558:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 800855a:	3a01      	subs	r2, #1
 800855c:	d005      	beq.n	800856a <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800855e:	6903      	ldr	r3, [r0, #16]
 8008560:	f013 0310 	ands.w	r3, r3, #16
 8008564:	d1f9      	bne.n	800855a <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8008566:	4618      	mov	r0, r3
 8008568:	4770      	bx	lr
      return HAL_TIMEOUT;
 800856a:	2003      	movs	r0, #3
}
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	00030d41 	.word	0x00030d41

08008574 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8008574:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8008578:	4319      	orrs	r1, r3
 800857a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 800857e:	2000      	movs	r0, #0
 8008580:	4770      	bx	lr

08008582 <USB_ActivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008582:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1)
 8008584:	784b      	ldrb	r3, [r1, #1]
 8008586:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8008588:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 800858c:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 8008590:	2b01      	cmp	r3, #1
 8008592:	d11b      	bne.n	80085cc <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8008594:	40a3      	lsls	r3, r4
 8008596:	b29b      	uxth	r3, r3
 8008598:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 800859a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 800859e:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 80085a0:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	0412      	lsls	r2, r2, #16
 80085a8:	d40e      	bmi.n	80085c8 <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 80085aa:	688a      	ldr	r2, [r1, #8]
 80085ac:	78c8      	ldrb	r0, [r1, #3]
 80085ae:	681d      	ldr	r5, [r3, #0]
 80085b0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80085b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80085b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085bc:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 80085c0:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 80085c4:	4328      	orrs	r0, r5
 80085c6:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 80085c8:	2000      	movs	r0, #0
 80085ca:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 80085cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085d0:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 80085d2:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 80085d6:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 80085d8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 80085dc:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 80085de:	6803      	ldr	r3, [r0, #0]
 80085e0:	041b      	lsls	r3, r3, #16
 80085e2:	d4f1      	bmi.n	80085c8 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 80085e4:	688b      	ldr	r3, [r1, #8]
 80085e6:	78c9      	ldrb	r1, [r1, #3]
 80085e8:	6802      	ldr	r2, [r0, #0]
 80085ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085f6:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80085fa:	4313      	orrs	r3, r2
 80085fc:	6003      	str	r3, [r0, #0]
 80085fe:	e7e3      	b.n	80085c8 <USB_ActivateEndpoint+0x46>

08008600 <USB_DeactivateEndpoint>:
  * @param  USBx: Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008600:	b510      	push	{r4, lr}
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8008602:	784b      	ldrb	r3, [r1, #1]
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8008604:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8008608:	7809      	ldrb	r1, [r1, #0]
 800860a:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1)
 800860e:	2b01      	cmp	r3, #1
 8008610:	d111      	bne.n	8008636 <USB_DeactivateEndpoint+0x36>
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8008612:	408b      	lsls	r3, r1
 8008614:	b29b      	uxth	r3, r3
 8008616:	43db      	mvns	r3, r3
 8008618:	401c      	ands	r4, r3
 800861a:	63d4      	str	r4, [r2, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 800861c:	69d4      	ldr	r4, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 800861e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8008622:	4023      	ands	r3, r4
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8008624:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 8008628:	61d3      	str	r3, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 800862a:	6803      	ldr	r3, [r0, #0]
 800862c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008630:	6003      	str	r3, [r0, #0]
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
  }
  return HAL_OK;
}
 8008632:	2000      	movs	r0, #0
 8008634:	bd10      	pop	{r4, pc}
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8008636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800863a:	408b      	lsls	r3, r1
 800863c:	43db      	mvns	r3, r3
 800863e:	401c      	ands	r4, r3
 8008640:	63d4      	str	r4, [r2, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8008642:	69d4      	ldr	r4, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8008644:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8008648:	4023      	ands	r3, r4
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 800864a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 800864e:	61d3      	str	r3, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8008650:	6803      	ldr	r3, [r0, #0]
 8008652:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008656:	6003      	str	r3, [r0, #0]
 8008658:	e7eb      	b.n	8008632 <USB_DeactivateEndpoint+0x32>
	...

0800865c <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800865c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 800865e:	784b      	ldrb	r3, [r1, #1]
 8008660:	780c      	ldrb	r4, [r1, #0]
 8008662:	2b01      	cmp	r3, #1
 8008664:	694b      	ldr	r3, [r1, #20]
 8008666:	d163      	bne.n	8008730 <USB_EPStartXfer+0xd4>
 8008668:	2520      	movs	r5, #32
 800866a:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800866e:	fb15 6404 	smlabb	r4, r5, r4, r6
 8008672:	6925      	ldr	r5, [r4, #16]
    if (ep->xfer_len == 0)
 8008674:	bb73      	cbnz	r3, 80086d4 <USB_EPStartXfer+0x78>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8008676:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800867a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800867e:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8008680:	6925      	ldr	r5, [r4, #16]
 8008682:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8008686:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8008688:	6925      	ldr	r5, [r4, #16]
 800868a:	0ced      	lsrs	r5, r5, #19
 800868c:	04ed      	lsls	r5, r5, #19
 800868e:	6125      	str	r5, [r4, #16]
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
      }       
    }
      if (ep->type != EP_TYPE_ISOC)
 8008690:	78cf      	ldrb	r7, [r1, #3]
 8008692:	780d      	ldrb	r5, [r1, #0]
 8008694:	2f01      	cmp	r7, #1
 8008696:	f000 8089 	beq.w	80087ac <USB_EPStartXfer+0x150>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 800869a:	b14b      	cbz	r3, 80086b0 <USB_EPStartXfer+0x54>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 800869c:	f8d0 c834 	ldr.w	ip, [r0, #2100]	; 0x834
 80086a0:	2401      	movs	r4, #1
 80086a2:	40ac      	lsls	r4, r5
 80086a4:	ea44 040c 	orr.w	r4, r4, ip
 80086a8:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 80086ac:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086b0:	780d      	ldrb	r5, [r1, #0]
 80086b2:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 80086b6:	2f01      	cmp	r7, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086b8:	6834      	ldr	r4, [r6, #0]
 80086ba:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80086be:	6034      	str	r4, [r6, #0]
    if (ep->type == EP_TYPE_ISOC)
 80086c0:	d105      	bne.n	80086ce <USB_EPStartXfer+0x72>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 80086c2:	9200      	str	r2, [sp, #0]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	462a      	mov	r2, r5
 80086c8:	68c9      	ldr	r1, [r1, #12]
 80086ca:	f000 f8e3 	bl	8008894 <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 80086ce:	2000      	movs	r0, #0
 80086d0:	b003      	add	sp, #12
 80086d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80086d4:	0ced      	lsrs	r5, r5, #19
 80086d6:	04ed      	lsls	r5, r5, #19
 80086d8:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80086da:	6925      	ldr	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 80086dc:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80086de:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80086e2:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80086e6:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 80086e8:	19dd      	adds	r5, r3, r7
 80086ea:	3d01      	subs	r5, #1
 80086ec:	fbb5 f7f7 	udiv	r7, r5, r7
 80086f0:	4d35      	ldr	r5, [pc, #212]	; (80087c8 <USB_EPStartXfer+0x16c>)
 80086f2:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80086f6:	ea05 45c7 	and.w	r5, r5, r7, lsl #19
 80086fa:	ea45 050e 	orr.w	r5, r5, lr
 80086fe:	6125      	str	r5, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8008700:	6927      	ldr	r7, [r4, #16]
 8008702:	f3c3 0512 	ubfx	r5, r3, #0, #19
 8008706:	433d      	orrs	r5, r7
 8008708:	6125      	str	r5, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 800870a:	78cd      	ldrb	r5, [r1, #3]
 800870c:	2d01      	cmp	r5, #1
 800870e:	d1bf      	bne.n	8008690 <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8008710:	6925      	ldr	r5, [r4, #16]
 8008712:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8008716:	6125      	str	r5, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
 8008718:	6925      	ldr	r5, [r4, #16]
 800871a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800871e:	6125      	str	r5, [r4, #16]
 8008720:	e7b6      	b.n	8008690 <USB_EPStartXfer+0x34>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008722:	fb14 6405 	smlabb	r4, r4, r5, r6
 8008726:	6825      	ldr	r5, [r4, #0]
 8008728:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800872c:	6025      	str	r5, [r4, #0]
 800872e:	e7bf      	b.n	80086b0 <USB_EPStartXfer+0x54>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8008730:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
 8008734:	eb02 1244 	add.w	r2, r2, r4, lsl #5
 8008738:	6914      	ldr	r4, [r2, #16]
 800873a:	0ce4      	lsrs	r4, r4, #19
 800873c:	04e4      	lsls	r4, r4, #19
 800873e:	6114      	str	r4, [r2, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8008740:	6914      	ldr	r4, [r2, #16]
 8008742:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8008746:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800874a:	6114      	str	r4, [r2, #16]
 800874c:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0)
 800874e:	b9db      	cbnz	r3, 8008788 <USB_EPStartXfer+0x12c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008750:	6913      	ldr	r3, [r2, #16]
 8008752:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8008756:	431c      	orrs	r4, r3
 8008758:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;      
 800875a:	6913      	ldr	r3, [r2, #16]
 800875c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008760:	6113      	str	r3, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 8008762:	78cb      	ldrb	r3, [r1, #3]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d10a      	bne.n	800877e <USB_EPStartXfer+0x122>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8008768:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800876c:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008770:	6813      	ldr	r3, [r2, #0]
 8008772:	bf0c      	ite	eq
 8008774:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008778:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800877c:	6013      	str	r3, [r2, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800877e:	6813      	ldr	r3, [r2, #0]
 8008780:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008784:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8008786:	e7a2      	b.n	80086ce <USB_EPStartXfer+0x72>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 8008788:	4d0f      	ldr	r5, [pc, #60]	; (80087c8 <USB_EPStartXfer+0x16c>)
 800878a:	6916      	ldr	r6, [r2, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket; 
 800878c:	4423      	add	r3, r4
 800878e:	3b01      	subs	r3, #1
 8008790:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19)); ;
 8008794:	ea05 45c3 	and.w	r5, r5, r3, lsl #19
 8008798:	4335      	orrs	r5, r6
 800879a:	6115      	str	r5, [r2, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt)); 
 800879c:	b29b      	uxth	r3, r3
 800879e:	6915      	ldr	r5, [r2, #16]
 80087a0:	435c      	muls	r4, r3
 80087a2:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80087a6:	432c      	orrs	r4, r5
 80087a8:	6114      	str	r4, [r2, #16]
 80087aa:	e7da      	b.n	8008762 <USB_EPStartXfer+0x106>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 80087ac:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 80087b0:	f414 7f80 	tst.w	r4, #256	; 0x100
 80087b4:	f04f 0420 	mov.w	r4, #32
 80087b8:	d0b3      	beq.n	8008722 <USB_EPStartXfer+0xc6>
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80087ba:	fb14 6405 	smlabb	r4, r4, r5, r6
 80087be:	6825      	ldr	r5, [r4, #0]
 80087c0:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 80087c4:	6025      	str	r5, [r4, #0]
 80087c6:	e773      	b.n	80086b0 <USB_EPStartXfer+0x54>
 80087c8:	1ff80000 	.word	0x1ff80000

080087cc <USB_EP0StartXfer>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  /* IN endpoint */
  if (ep->is_in == 1)
 80087cc:	784b      	ldrb	r3, [r1, #1]
 80087ce:	2b01      	cmp	r3, #1
{
 80087d0:	b530      	push	{r4, r5, lr}
 80087d2:	780b      	ldrb	r3, [r1, #0]
 80087d4:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1)
 80087d6:	d13e      	bne.n	8008856 <USB_EP0StartXfer+0x8a>
 80087d8:	2220      	movs	r2, #32
 80087da:	f500 6410 	add.w	r4, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80087de:	fb12 4303 	smlabb	r3, r2, r3, r4
 80087e2:	691a      	ldr	r2, [r3, #16]
    if (ep->xfer_len == 0)
 80087e4:	b9fd      	cbnz	r5, 8008826 <USB_EP0StartXfer+0x5a>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80087e6:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 80087ea:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 80087ee:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 80087f0:	691a      	ldr	r2, [r3, #16]
 80087f2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80087f6:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80087f8:	691a      	ldr	r2, [r3, #16]
 80087fa:	0cd2      	lsrs	r2, r2, #19
 80087fc:	04d2      	lsls	r2, r2, #19
 80087fe:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0)
 8008800:	694b      	ldr	r3, [r1, #20]
 8008802:	b13b      	cbz	r3, 8008814 <USB_EP0StartXfer+0x48>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1 << (ep->num);
 8008804:	780d      	ldrb	r5, [r1, #0]
 8008806:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800880a:	2301      	movs	r3, #1
 800880c:	40ab      	lsls	r3, r5
 800880e:	4313      	orrs	r3, r2
 8008810:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);   
 8008814:	780b      	ldrb	r3, [r1, #0]
 8008816:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8008820:	601a      	str	r2, [r3, #0]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8008822:	2000      	movs	r0, #0
 8008824:	bd30      	pop	{r4, r5, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008826:	0cd2      	lsrs	r2, r2, #19
 8008828:	04d2      	lsls	r2, r2, #19
 800882a:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800882c:	691a      	ldr	r2, [r3, #16]
 800882e:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8008832:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8008836:	611a      	str	r2, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8008838:	688a      	ldr	r2, [r1, #8]
 800883a:	4295      	cmp	r5, r2
        ep->xfer_len = ep->maxpacket;
 800883c:	bf88      	it	hi
 800883e:	614a      	strhi	r2, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8008840:	691a      	ldr	r2, [r3, #16]
 8008842:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008846:	611a      	str	r2, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8008848:	694a      	ldr	r2, [r1, #20]
 800884a:	691d      	ldr	r5, [r3, #16]
 800884c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8008850:	432a      	orrs	r2, r5
 8008852:	611a      	str	r2, [r3, #16]
 8008854:	e7d4      	b.n	8008800 <USB_EP0StartXfer+0x34>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8008856:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800885a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800885e:	6903      	ldr	r3, [r0, #16]
 8008860:	0cdb      	lsrs	r3, r3, #19
 8008862:	04db      	lsls	r3, r3, #19
 8008864:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8008866:	6903      	ldr	r3, [r0, #16]
 8008868:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800886c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008870:	6103      	str	r3, [r0, #16]
 8008872:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0)
 8008874:	b105      	cbz	r5, 8008878 <USB_EP0StartXfer+0xac>
      ep->xfer_len = ep->maxpacket;
 8008876:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 8008878:	6902      	ldr	r2, [r0, #16]
 800887a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800887e:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8008880:	6902      	ldr	r2, [r0, #16]
 8008882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008886:	4313      	orrs	r3, r2
 8008888:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 800888a:	6803      	ldr	r3, [r0, #0]
 800888c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008890:	6003      	str	r3, [r0, #0]
 8008892:	e7c6      	b.n	8008822 <USB_EP0StartXfer+0x56>

08008894 <USB_WritePacket>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(dma);
  
  uint32_t count32b= 0 , index= 0;
  count32b =  (len + 3) / 4;
 8008894:	3303      	adds	r3, #3
  for (index = 0; index < count32b; index++, src += 4)
  {
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8008896:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
{
 800889a:	b510      	push	{r4, lr}
  count32b =  (len + 3) / 4;
 800889c:	109b      	asrs	r3, r3, #2
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 800889e:	eb00 3202 	add.w	r2, r0, r2, lsl #12
  for (index = 0; index < count32b; index++, src += 4)
 80088a2:	2400      	movs	r4, #0
 80088a4:	429c      	cmp	r4, r3
 80088a6:	d101      	bne.n	80088ac <USB_WritePacket+0x18>
  }
  return HAL_OK;
}
 80088a8:	2000      	movs	r0, #0
 80088aa:	bd10      	pop	{r4, pc}
    USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80088ac:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 80088b0:	6010      	str	r0, [r2, #0]
  for (index = 0; index < count32b; index++, src += 4)
 80088b2:	3401      	adds	r4, #1
 80088b4:	e7f6      	b.n	80088a4 <USB_WritePacket+0x10>

080088b6 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80088b6:	b510      	push	{r4, lr}
  uint32_t index=0;
  uint32_t count32b = (len + 3) / 4;
 80088b8:	3203      	adds	r2, #3
 80088ba:	1092      	asrs	r2, r2, #2
  
  for ( index = 0; index < count32b; index++, dest += 4 )
 80088bc:	2300      	movs	r3, #0
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 80088be:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( index = 0; index < count32b; index++, dest += 4 )
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d102      	bne.n	80088cc <USB_ReadPacket+0x16>
    
  }
  return ((void *)dest);
}
 80088c6:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80088ca:	bd10      	pop	{r4, pc}
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 80088cc:	6804      	ldr	r4, [r0, #0]
 80088ce:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  for ( index = 0; index < count32b; index++, dest += 4 )
 80088d2:	3301      	adds	r3, #1
 80088d4:	e7f5      	b.n	80088c2 <USB_ReadPacket+0xc>

080088d6 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 80088d6:	784b      	ldrb	r3, [r1, #1]
 80088d8:	780a      	ldrb	r2, [r1, #0]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	f04f 0320 	mov.w	r3, #32
 80088e0:	d10b      	bne.n	80088fa <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 80088e2:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 80088e6:	fb13 0002 	smlabb	r0, r3, r2, r0
 80088ea:	6803      	ldr	r3, [r0, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	db0b      	blt.n	8008908 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 80088f0:	6803      	ldr	r3, [r0, #0]
 80088f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088f6:	6003      	str	r3, [r0, #0]
 80088f8:	e006      	b.n	8008908 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 80088fa:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 80088fe:	fb13 0002 	smlabb	r0, r3, r2, r0
 8008902:	6803      	ldr	r3, [r0, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	daf3      	bge.n	80088f0 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008908:	6803      	ldr	r3, [r0, #0]
 800890a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800890e:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8008910:	2000      	movs	r0, #0
 8008912:	4770      	bx	lr

08008914 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8008914:	784b      	ldrb	r3, [r1, #1]
 8008916:	780a      	ldrb	r2, [r1, #0]
 8008918:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800891a:	bf0c      	ite	eq
 800891c:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008920:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8008924:	2320      	movs	r3, #32
 8008926:	fb13 0002 	smlabb	r0, r3, r2, r0
 800892a:	6803      	ldr	r3, [r0, #0]
 800892c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008930:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8008932:	78cb      	ldrb	r3, [r1, #3]
 8008934:	3b02      	subs	r3, #2
 8008936:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008938:	bf9e      	ittt	ls
 800893a:	6803      	ldrls	r3, [r0, #0]
 800893c:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8008940:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8008942:	2000      	movs	r0, #0
 8008944:	4770      	bx	lr

08008946 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the USB device mode
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 8008946:	b538      	push	{r3, r4, r5, lr}
 8008948:	f500 612e 	add.w	r1, r0, #2784	; 0xae0
 800894c:	4604      	mov	r4, r0
 800894e:	f500 6310 	add.w	r3, r0, #2304	; 0x900
  uint32_t index;
  
  /* Clear Pending interrupt */
  for (index = 0; index < 15 ; index++)
  {
    USBx_INEP(index)->DIEPINT  = 0xFF;
 8008952:	22ff      	movs	r2, #255	; 0xff
 8008954:	609a      	str	r2, [r3, #8]
    USBx_OUTEP(index)->DOEPINT  = 0xFF;
 8008956:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800895a:	3320      	adds	r3, #32
  for (index = 0; index < 15 ; index++)
 800895c:	428b      	cmp	r3, r1
 800895e:	d1f9      	bne.n	8008954 <USB_StopDevice+0xe>
  }
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
  
  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0;
 8008960:	2500      	movs	r5, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8008962:	f04f 32ff 	mov.w	r2, #4294967295
 8008966:	f8c4 2818 	str.w	r2, [r4, #2072]	; 0x818
  USBx_DEVICE->DOEPMSK  = 0;
  USBx_DEVICE->DAINTMSK = 0;
  
  /* Flush the FIFO */
  USB_FlushRxFifo(USBx);
 800896a:	4620      	mov	r0, r4
  USBx_DEVICE->DIEPMSK  = 0;
 800896c:	f8c4 5810 	str.w	r5, [r4, #2064]	; 0x810
  USBx_DEVICE->DOEPMSK  = 0;
 8008970:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
  USBx_DEVICE->DAINTMSK = 0;
 8008974:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
  USB_FlushRxFifo(USBx);
 8008978:	f7ff fdec 	bl	8008554 <USB_FlushRxFifo>
  USB_FlushTxFifo(USBx ,  0x10 );  
 800897c:	2110      	movs	r1, #16
 800897e:	4620      	mov	r0, r4
 8008980:	f7ff fdd6 	bl	8008530 <USB_FlushTxFifo>
  
  return HAL_OK;
}
 8008984:	4628      	mov	r0, r5
 8008986:	bd38      	pop	{r3, r4, r5, pc}

08008988 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8008988:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800898c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008990:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 8008994:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8008998:	0109      	lsls	r1, r1, #4
 800899a:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800899e:	4319      	orrs	r1, r3
 80089a0:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 80089a4:	2000      	movs	r0, #0
 80089a6:	4770      	bx	lr

080089a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 80089a8:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ; 
 80089aa:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80089ae:	f023 0302 	bic.w	r3, r3, #2
 80089b2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 80089b6:	2003      	movs	r0, #3
 80089b8:	f7fc fc86 	bl	80052c8 <HAL_Delay>
  
  return HAL_OK;  
}
 80089bc:	2000      	movs	r0, #0
 80089be:	bd08      	pop	{r3, pc}

080089c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx: Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 80089c0:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ; 
 80089c2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80089c6:	f043 0302 	orr.w	r3, r3, #2
 80089ca:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 80089ce:	2003      	movs	r0, #3
 80089d0:	f7fc fc7a 	bl	80052c8 <HAL_Delay>
  
  return HAL_OK;  
}
 80089d4:	2000      	movs	r0, #0
 80089d6:	bd08      	pop	{r3, pc}

080089d8 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->GINTSTS;
 80089d8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80089da:	6980      	ldr	r0, [r0, #24]
  return tmpreg;  
}
 80089dc:	4010      	ands	r0, r2
 80089de:	4770      	bx	lr

080089e0 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 80089e0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80089e4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80089e8:	69c0      	ldr	r0, [r0, #28]
 80089ea:	4018      	ands	r0, r3
  return ((tmpreg & 0xffff0000) >> 16);
}
 80089ec:	0c00      	lsrs	r0, r0, #16
 80089ee:	4770      	bx	lr

080089f0 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;
  tmpreg  = USBx_DEVICE->DAINT;
 80089f0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80089f4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80089f8:	69c0      	ldr	r0, [r0, #28]
 80089fa:	4018      	ands	r0, r3
  return ((tmpreg & 0xFFFF));
}
 80089fc:	b280      	uxth	r0, r0
 80089fe:	4770      	bx	lr

08008a00 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t tmpreg;
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8008a00:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8008a04:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008a08:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP(epnum)->DOEPINT;
 8008a0c:	688a      	ldr	r2, [r1, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008a0e:	6940      	ldr	r0, [r0, #20]
  return tmpreg;
}
 8008a10:	4010      	ands	r0, r2
 8008a12:	4770      	bx	lr

08008a14 <USB_ReadDevInEPInterrupt>:
  * @param  epnum: endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8008a14:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, msk = 0, emp = 0;
  
  msk = USBx_DEVICE->DIEPMSK;
 8008a16:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008a1a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1) << 7;
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8008a1e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1) << 7;
 8008a22:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8008a24:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1) << 7;
 8008a28:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP(epnum)->DIEPINT & msk;
 8008a2a:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	4323      	orrs	r3, r4
  return tmpreg;
}
 8008a30:	4018      	ands	r0, r3
 8008a32:	bd10      	pop	{r4, pc}

08008a34 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1);
 8008a34:	6940      	ldr	r0, [r0, #20]
}
 8008a36:	f000 0001 	and.w	r0, r0, #1
 8008a3a:	4770      	bx	lr

08008a3c <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008a3c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8008a40:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008a44:	f023 0307 	bic.w	r3, r3, #7
 8008a48:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8008a4c:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8008a50:	689a      	ldr	r2, [r3, #8]
 8008a52:	f002 0206 	and.w	r2, r2, #6
 8008a56:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 8008a58:	bf02      	ittt	eq
 8008a5a:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8008a5e:	f042 0203 	orreq.w	r2, r2, #3
 8008a62:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a6c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8008a6e:	2000      	movs	r0, #0
 8008a70:	4770      	bx	lr

08008a72 <USB_EP0_OutStart>:
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(psetup);

  USBx_OUTEP(0)->DOEPTSIZ = 0;
 8008a72:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8008a76:	2000      	movs	r0, #0
 8008a78:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8008a7a:	691a      	ldr	r2, [r3, #16]
 8008a7c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008a80:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 8008a82:	691a      	ldr	r2, [r3, #16]
 8008a84:	f042 0218 	orr.w	r2, r2, #24
 8008a88:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8008a8a:	691a      	ldr	r2, [r3, #16]
 8008a8c:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8008a90:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
}
 8008a92:	4770      	bx	lr

08008a94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	60fb      	str	r3, [r7, #12]
  
  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	60fb      	str	r3, [r7, #12]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	4a13      	ldr	r2, [pc, #76]	; (8008af8 <USB_CoreReset+0x64>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d901      	bls.n	8008ab2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e01b      	b.n	8008aea <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	daf2      	bge.n	8008aa0 <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0;
 8008aba:	2300      	movs	r3, #0
 8008abc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	f043 0201 	orr.w	r2, r3, #1
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3301      	adds	r3, #1
 8008ace:	60fb      	str	r3, [r7, #12]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4a09      	ldr	r2, [pc, #36]	; (8008af8 <USB_CoreReset+0x64>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d901      	bls.n	8008adc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e006      	b.n	8008aea <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d0f0      	beq.n	8008aca <USB_CoreReset+0x36>
  
  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	00030d40 	.word	0x00030d40

08008afc <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8008afc:	4b08      	ldr	r3, [pc, #32]	; (8008b20 <LL_mDelay+0x24>)
{
 8008afe:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8008b04:	9b01      	ldr	r3, [sp, #4]
    Delay++;
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8008b06:	4b06      	ldr	r3, [pc, #24]	; (8008b20 <LL_mDelay+0x24>)
  if (Delay < LL_MAX_DELAY)
 8008b08:	1c41      	adds	r1, r0, #1
    Delay++;
 8008b0a:	bf18      	it	ne
 8008b0c:	3001      	addne	r0, #1
  while (Delay)
 8008b0e:	b908      	cbnz	r0, 8008b14 <LL_mDelay+0x18>
    {
      Delay--;
    }
  }
}
 8008b10:	b002      	add	sp, #8
 8008b12:	4770      	bx	lr
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	03d2      	lsls	r2, r2, #15
      Delay--;
 8008b18:	bf48      	it	mi
 8008b1a:	f100 30ff 	addmi.w	r0, r0, #4294967295
 8008b1e:	e7f6      	b.n	8008b0e <LL_mDelay+0x12>
 8008b20:	e000e010 	.word	0xe000e010

08008b24 <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 8008b24:	2320      	movs	r3, #32
 8008b26:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8008b28:	4800      	ldr	r0, [pc, #0]	; (8008b2c <USBD_MSC_GetHSCfgDesc+0x8>)
 8008b2a:	4770      	bx	lr
 8008b2c:	20000254 	.word	0x20000254

08008b30 <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8008b30:	2320      	movs	r3, #32
 8008b32:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 8008b34:	4800      	ldr	r0, [pc, #0]	; (8008b38 <USBD_MSC_GetFSCfgDesc+0x8>)
 8008b36:	4770      	bx	lr
 8008b38:	20000234 	.word	0x20000234

08008b3c <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8008b3c:	2320      	movs	r3, #32
 8008b3e:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8008b40:	4800      	ldr	r0, [pc, #0]	; (8008b44 <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 8008b42:	4770      	bx	lr
 8008b44:	20000280 	.word	0x20000280

08008b48 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8008b48:	230a      	movs	r3, #10
 8008b4a:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 8008b4c:	4800      	ldr	r0, [pc, #0]	; (8008b50 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 8008b4e:	4770      	bx	lr
 8008b50:	20000274 	.word	0x20000274

08008b54 <USBD_MSC_Init>:
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008b54:	7c03      	ldrb	r3, [r0, #16]
{
 8008b56:	b510      	push	{r4, lr}
 8008b58:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008b5a:	b9c3      	cbnz	r3, 8008b8e <USBD_MSC_Init+0x3a>
    USBD_LL_OpenEP(pdev,
 8008b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b60:	2202      	movs	r2, #2
 8008b62:	2101      	movs	r1, #1
 8008b64:	f7fb fd25 	bl	80045b2 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8008b68:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8008b6c:	2202      	movs	r2, #2
 8008b6e:	2181      	movs	r1, #129	; 0x81
 8008b70:	4620      	mov	r0, r4
 8008b72:	f7fb fd1e 	bl	80045b2 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 8008b76:	f242 006c 	movw	r0, #8300	; 0x206c
 8008b7a:	f002 fc41 	bl	800b400 <malloc>
 8008b7e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8008b82:	b158      	cbz	r0, 8008b9c <USBD_MSC_Init+0x48>
    MSC_BOT_Init(pdev); 
 8008b84:	4620      	mov	r0, r4
 8008b86:	f000 f8be 	bl	8008d06 <MSC_BOT_Init>
    ret = 0;
 8008b8a:	2000      	movs	r0, #0
 8008b8c:	bd10      	pop	{r4, pc}
    USBD_LL_OpenEP(pdev,
 8008b8e:	2340      	movs	r3, #64	; 0x40
 8008b90:	2202      	movs	r2, #2
 8008b92:	2101      	movs	r1, #1
 8008b94:	f7fb fd0d 	bl	80045b2 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8008b98:	2340      	movs	r3, #64	; 0x40
 8008b9a:	e7e7      	b.n	8008b6c <USBD_MSC_Init+0x18>
    ret = 1; 
 8008b9c:	2001      	movs	r0, #1
}
 8008b9e:	bd10      	pop	{r4, pc}

08008ba0 <USBD_MSC_DeInit>:
{
 8008ba0:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8008ba2:	2101      	movs	r1, #1
{
 8008ba4:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8008ba6:	f7fb fd0e 	bl	80045c6 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8008baa:	2181      	movs	r1, #129	; 0x81
 8008bac:	4620      	mov	r0, r4
 8008bae:	f7fb fd0a 	bl	80045c6 <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f000 f8d6 	bl	8008d64 <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 8008bb8:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8008bbc:	b120      	cbz	r0, 8008bc8 <USBD_MSC_DeInit+0x28>
    USBD_free(pdev->pClassData);
 8008bbe:	f002 fc27 	bl	800b410 <free>
    pdev->pClassData  = NULL; 
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8008bc8:	2000      	movs	r0, #0
 8008bca:	bd10      	pop	{r4, pc}

08008bcc <USBD_MSC_Setup>:
{
 8008bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bd0:	780b      	ldrb	r3, [r1, #0]
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 8008bd2:	f8d0 8218 	ldr.w	r8, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bd6:	f013 0460 	ands.w	r4, r3, #96	; 0x60
{
 8008bda:	4606      	mov	r6, r0
 8008bdc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bde:	d02d      	beq.n	8008c3c <USBD_MSC_Setup+0x70>
 8008be0:	2c20      	cmp	r4, #32
 8008be2:	d14a      	bne.n	8008c7a <USBD_MSC_Setup+0xae>
    switch (req->bRequest)
 8008be4:	784a      	ldrb	r2, [r1, #1]
 8008be6:	2afe      	cmp	r2, #254	; 0xfe
 8008be8:	d005      	beq.n	8008bf6 <USBD_MSC_Setup+0x2a>
 8008bea:	2aff      	cmp	r2, #255	; 0xff
 8008bec:	d019      	beq.n	8008c22 <USBD_MSC_Setup+0x56>
       USBD_CtlError(pdev , req);
 8008bee:	f000 fef2 	bl	80099d6 <USBD_CtlError>
       return USBD_FAIL; 
 8008bf2:	2402      	movs	r4, #2
 8008bf4:	e01f      	b.n	8008c36 <USBD_MSC_Setup+0x6a>
      if((req->wValue  == 0) && 
 8008bf6:	884c      	ldrh	r4, [r1, #2]
 8008bf8:	b984      	cbnz	r4, 8008c1c <USBD_MSC_Setup+0x50>
 8008bfa:	88cf      	ldrh	r7, [r1, #6]
 8008bfc:	2f01      	cmp	r7, #1
 8008bfe:	d10d      	bne.n	8008c1c <USBD_MSC_Setup+0x50>
         (req->wLength == 1) &&
 8008c00:	061a      	lsls	r2, r3, #24
 8008c02:	d50b      	bpl.n	8008c1c <USBD_MSC_Setup+0x50>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8008c04:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	4798      	blx	r3
        USBD_CtlSendData (pdev,
 8008c0c:	463a      	mov	r2, r7
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8008c0e:	f8c8 0000 	str.w	r0, [r8]
        USBD_CtlSendData (pdev,
 8008c12:	4641      	mov	r1, r8
 8008c14:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8008c16:	f000 ff05 	bl	8009a24 <USBD_CtlSendData>
      break;
 8008c1a:	e00c      	b.n	8008c36 <USBD_MSC_Setup+0x6a>
         USBD_CtlError(pdev , req);
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	4630      	mov	r0, r6
 8008c20:	e7e5      	b.n	8008bee <USBD_MSC_Setup+0x22>
      if((req->wValue  == 0) && 
 8008c22:	884a      	ldrh	r2, [r1, #2]
 8008c24:	2a00      	cmp	r2, #0
 8008c26:	d1f9      	bne.n	8008c1c <USBD_MSC_Setup+0x50>
 8008c28:	88cc      	ldrh	r4, [r1, #6]
 8008c2a:	2c00      	cmp	r4, #0
 8008c2c:	d1f6      	bne.n	8008c1c <USBD_MSC_Setup+0x50>
         (req->wLength == 0) &&
 8008c2e:	061b      	lsls	r3, r3, #24
 8008c30:	d4f4      	bmi.n	8008c1c <USBD_MSC_Setup+0x50>
         MSC_BOT_Reset(pdev);
 8008c32:	f000 f88b 	bl	8008d4c <MSC_BOT_Reset>
}
 8008c36:	4620      	mov	r0, r4
 8008c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8008c3c:	784f      	ldrb	r7, [r1, #1]
 8008c3e:	2f0a      	cmp	r7, #10
 8008c40:	d01d      	beq.n	8008c7e <USBD_MSC_Setup+0xb2>
 8008c42:	2f0b      	cmp	r7, #11
 8008c44:	d01f      	beq.n	8008c86 <USBD_MSC_Setup+0xba>
 8008c46:	2f01      	cmp	r7, #1
 8008c48:	d1f5      	bne.n	8008c36 <USBD_MSC_Setup+0x6a>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8008c4a:	7909      	ldrb	r1, [r1, #4]
 8008c4c:	f7fb fcc2 	bl	80045d4 <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8008c50:	7929      	ldrb	r1, [r5, #4]
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7fb fcb7 	bl	80045c6 <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 8008c58:	f995 3004 	ldrsb.w	r3, [r5, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	7c33      	ldrb	r3, [r6, #16]
 8008c60:	da17      	bge.n	8008c92 <USBD_MSC_Setup+0xc6>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008c62:	b9a3      	cbnz	r3, 8008c8e <USBD_MSC_Setup+0xc2>
          USBD_LL_OpenEP(pdev,
 8008c64:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8008c68:	2202      	movs	r2, #2
 8008c6a:	2181      	movs	r1, #129	; 0x81
          USBD_LL_OpenEP(pdev,
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f7fb fca0 	bl	80045b2 <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8008c72:	7929      	ldrb	r1, [r5, #4]
 8008c74:	4630      	mov	r0, r6
 8008c76:	f000 f931 	bl	8008edc <MSC_BOT_CplClrFeature>
  return 0;
 8008c7a:	2400      	movs	r4, #0
 8008c7c:	e7db      	b.n	8008c36 <USBD_MSC_Setup+0x6a>
      USBD_CtlSendData (pdev,
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f108 0104 	add.w	r1, r8, #4
 8008c84:	e7c7      	b.n	8008c16 <USBD_MSC_Setup+0x4a>
      hmsc->interface = (uint8_t)(req->wValue);
 8008c86:	788b      	ldrb	r3, [r1, #2]
 8008c88:	f8c8 3004 	str.w	r3, [r8, #4]
      break;
 8008c8c:	e7d3      	b.n	8008c36 <USBD_MSC_Setup+0x6a>
          USBD_LL_OpenEP(pdev,
 8008c8e:	2340      	movs	r3, #64	; 0x40
 8008c90:	e7ea      	b.n	8008c68 <USBD_MSC_Setup+0x9c>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8008c92:	b923      	cbnz	r3, 8008c9e <USBD_MSC_Setup+0xd2>
          USBD_LL_OpenEP(pdev,
 8008c94:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8008c98:	2202      	movs	r2, #2
 8008c9a:	4639      	mov	r1, r7
 8008c9c:	e7e6      	b.n	8008c6c <USBD_MSC_Setup+0xa0>
 8008c9e:	2340      	movs	r3, #64	; 0x40
 8008ca0:	e7fa      	b.n	8008c98 <USBD_MSC_Setup+0xcc>

08008ca2 <USBD_MSC_DataIn>:
{
 8008ca2:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 8008ca4:	f000 f882 	bl	8008dac <MSC_BOT_DataIn>
}
 8008ca8:	2000      	movs	r0, #0
 8008caa:	bd08      	pop	{r3, pc}

08008cac <USBD_MSC_DataOut>:
{
 8008cac:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 8008cae:	f000 f89b 	bl	8008de8 <MSC_BOT_DataOut>
}
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	bd08      	pop	{r3, pc}

08008cb6 <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 8008cb6:	b109      	cbz	r1, 8008cbc <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData= fops;
 8008cb8:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
  }
  return 0;
}
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	4770      	bx	lr

08008cc0 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 8008cc0:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  if ((hmsc->cbw.bmFlags == 0) && 
 8008cc2:	f242 0318 	movw	r3, #8216	; 0x2018
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008cc6:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0) && 
 8008cca:	5ce3      	ldrb	r3, [r4, r3]
{
 8008ccc:	4605      	mov	r5, r0
  if ((hmsc->cbw.bmFlags == 0) && 
 8008cce:	b943      	cbnz	r3, 8008ce2 <MSC_BOT_Abort+0x22>
      (hmsc->cbw.dDataLength != 0) &&
 8008cd0:	f242 0314 	movw	r3, #8212	; 0x2014
  if ((hmsc->cbw.bmFlags == 0) && 
 8008cd4:	58e3      	ldr	r3, [r4, r3]
 8008cd6:	b123      	cbz	r3, 8008ce2 <MSC_BOT_Abort+0x22>
      (hmsc->cbw.dDataLength != 0) &&
 8008cd8:	7a63      	ldrb	r3, [r4, #9]
 8008cda:	b913      	cbnz	r3, 8008ce2 <MSC_BOT_Abort+0x22>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 8008cdc:	2101      	movs	r1, #1
 8008cde:	f7fb fc80 	bl	80045e2 <USBD_LL_StallEP>
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8008ce2:	2181      	movs	r1, #129	; 0x81
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	f7fb fc7c 	bl	80045e2 <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8008cea:	7a63      	ldrb	r3, [r4, #9]
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d109      	bne.n	8008d04 <MSC_BOT_Abort+0x44>
  {
    USBD_LL_PrepareReceive (pdev,
 8008cf0:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	231f      	movs	r3, #31
 8008cf8:	320c      	adds	r2, #12
 8008cfa:	2101      	movs	r1, #1
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
                      USBD_BOT_CBW_LENGTH);    
  }
}
 8008cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    USBD_LL_PrepareReceive (pdev,
 8008d00:	f7fb bc9e 	b.w	8004640 <USBD_LL_PrepareReceive>
 8008d04:	bd70      	pop	{r4, r5, r6, pc}

08008d06 <MSC_BOT_Init>:
{
 8008d06:	b570      	push	{r4, r5, r6, lr}
  hmsc->scsi_sense_tail = 0;
 8008d08:	f242 035d 	movw	r3, #8285	; 0x205d
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8008d0c:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
{
 8008d10:	4604      	mov	r4, r0
  hmsc->bot_state  = USBD_BOT_IDLE;
 8008d12:	2000      	movs	r0, #0
 8008d14:	7228      	strb	r0, [r5, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8008d16:	7268      	strb	r0, [r5, #9]
  hmsc->scsi_sense_tail = 0;
 8008d18:	54e8      	strb	r0, [r5, r3]
  hmsc->scsi_sense_head = 0;
 8008d1a:	f242 035c 	movw	r3, #8284	; 0x205c
 8008d1e:	54e8      	strb	r0, [r5, r3]
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 8008d20:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8008d28:	2101      	movs	r1, #1
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f7fb fc52 	bl	80045d4 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8008d30:	2181      	movs	r1, #129	; 0x81
 8008d32:	4620      	mov	r0, r4
 8008d34:	f7fb fc4e 	bl	80045d4 <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev,
 8008d38:	f505 5200 	add.w	r2, r5, #8192	; 0x2000
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	231f      	movs	r3, #31
 8008d40:	320c      	adds	r2, #12
 8008d42:	2101      	movs	r1, #1
}
 8008d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 8008d48:	f7fb bc7a 	b.w	8004640 <USBD_LL_PrepareReceive>

08008d4c <MSC_BOT_Reset>:
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8008d4c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8008d50:	2300      	movs	r3, #0
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8008d52:	2101      	movs	r1, #1
  hmsc->bot_state  = USBD_BOT_IDLE;
 8008d54:	7213      	strb	r3, [r2, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;  
 8008d56:	7251      	strb	r1, [r2, #9]
  USBD_LL_PrepareReceive (pdev,
 8008d58:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8008d5c:	231f      	movs	r3, #31
 8008d5e:	320c      	adds	r2, #12
 8008d60:	f7fb bc6e 	b.w	8004640 <USBD_LL_PrepareReceive>

08008d64 <MSC_BOT_DeInit>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 8008d64:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8008d68:	2200      	movs	r2, #0
 8008d6a:	721a      	strb	r2, [r3, #8]
 8008d6c:	4770      	bx	lr
	...

08008d70 <MSC_BOT_SendCSW>:
{
 8008d70:	b570      	push	{r4, r5, r6, lr}
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8008d72:	f242 022c 	movw	r2, #8236	; 0x202c
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008d76:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8008d7a:	4b0b      	ldr	r3, [pc, #44]	; (8008da8 <MSC_BOT_SendCSW+0x38>)
 8008d7c:	50a3      	str	r3, [r4, r2]
  hmsc->csw.bStatus = CSW_Status;
 8008d7e:	f242 0338 	movw	r3, #8248	; 0x2038
  USBD_LL_Transmit (pdev, 
 8008d82:	4422      	add	r2, r4
  hmsc->csw.bStatus = CSW_Status;
 8008d84:	54e1      	strb	r1, [r4, r3]
  hmsc->bot_state = USBD_BOT_IDLE;
 8008d86:	2300      	movs	r3, #0
 8008d88:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, 
 8008d8a:	2181      	movs	r1, #129	; 0x81
 8008d8c:	230d      	movs	r3, #13
{
 8008d8e:	4605      	mov	r5, r0
  USBD_LL_Transmit (pdev, 
 8008d90:	f7fb fc4f 	bl	8004632 <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev,
 8008d94:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8008d98:	4628      	mov	r0, r5
 8008d9a:	231f      	movs	r3, #31
 8008d9c:	320c      	adds	r2, #12
 8008d9e:	2101      	movs	r1, #1
}
 8008da0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 8008da4:	f7fb bc4c 	b.w	8004640 <USBD_LL_PrepareReceive>
 8008da8:	53425355 	.word	0x53425355

08008dac <MSC_BOT_DataIn>:
{
 8008dac:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8008dae:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8008db2:	7a1a      	ldrb	r2, [r3, #8]
 8008db4:	2a02      	cmp	r2, #2
{
 8008db6:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 8008db8:	d003      	beq.n	8008dc2 <MSC_BOT_DataIn+0x16>
 8008dba:	d314      	bcc.n	8008de6 <MSC_BOT_DataIn+0x3a>
 8008dbc:	2a04      	cmp	r2, #4
 8008dbe:	d910      	bls.n	8008de2 <MSC_BOT_DataIn+0x36>
 8008dc0:	bd10      	pop	{r4, pc}
    if(SCSI_ProcessCmd(pdev,
 8008dc2:	f242 0119 	movw	r1, #8217	; 0x2019
 8008dc6:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8008dca:	321b      	adds	r2, #27
 8008dcc:	5c59      	ldrb	r1, [r3, r1]
 8008dce:	f000 f8b3 	bl	8008f38 <SCSI_ProcessCmd>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	da07      	bge.n	8008de6 <MSC_BOT_DataIn+0x3a>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8008dd6:	2101      	movs	r1, #1
 8008dd8:	4620      	mov	r0, r4
}
 8008dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8008dde:	f7ff bfc7 	b.w	8008d70 <MSC_BOT_SendCSW>
 8008de2:	2100      	movs	r1, #0
 8008de4:	e7f9      	b.n	8008dda <MSC_BOT_DataIn+0x2e>
 8008de6:	bd10      	pop	{r4, pc}

08008de8 <MSC_BOT_DataOut>:
{
 8008de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8008dec:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  switch (hmsc->bot_state)
 8008df0:	7a26      	ldrb	r6, [r4, #8]
{
 8008df2:	4605      	mov	r5, r0
  switch (hmsc->bot_state)
 8008df4:	b11e      	cbz	r6, 8008dfe <MSC_BOT_DataOut+0x16>
 8008df6:	2e01      	cmp	r6, #1
 8008df8:	d062      	beq.n	8008ec0 <MSC_BOT_DataOut+0xd8>
 8008dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8008dfe:	f242 0310 	movw	r3, #8208	; 0x2010
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8008e02:	f242 0814 	movw	r8, #8212	; 0x2014
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8008e06:	58e2      	ldr	r2, [r4, r3]
 8008e08:	f242 0330 	movw	r3, #8240	; 0x2030
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8008e0c:	f242 0734 	movw	r7, #8244	; 0x2034
  hmsc->csw.dTag = hmsc->cbw.dTag;
 8008e10:	50e2      	str	r2, [r4, r3]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8008e12:	f854 3008 	ldr.w	r3, [r4, r8]
 8008e16:	51e3      	str	r3, [r4, r7]
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8008e18:	2101      	movs	r1, #1
 8008e1a:	f7fb fc18 	bl	800464e <USBD_LL_GetRxDataSize>
 8008e1e:	281f      	cmp	r0, #31
 8008e20:	d110      	bne.n	8008e44 <MSC_BOT_DataOut+0x5c>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8008e22:	f242 030c 	movw	r3, #8204	; 0x200c
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8008e26:	58e2      	ldr	r2, [r4, r3]
 8008e28:	4b2b      	ldr	r3, [pc, #172]	; (8008ed8 <MSC_BOT_DataOut+0xf0>)
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d10a      	bne.n	8008e44 <MSC_BOT_DataOut+0x5c>
        (hmsc->cbw.bLUN > 1) || 
 8008e2e:	f242 0319 	movw	r3, #8217	; 0x2019
 8008e32:	5ce1      	ldrb	r1, [r4, r3]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 8008e34:	2901      	cmp	r1, #1
 8008e36:	d805      	bhi.n	8008e44 <MSC_BOT_DataOut+0x5c>
          (hmsc->cbw.bCBLength < 1) || 
 8008e38:	f242 031a 	movw	r3, #8218	; 0x201a
        (hmsc->cbw.bLUN > 1) || 
 8008e3c:	5ce3      	ldrb	r3, [r4, r3]
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	2b0f      	cmp	r3, #15
 8008e42:	d90e      	bls.n	8008e62 <MSC_BOT_DataOut+0x7a>
    SCSI_SenseCode(pdev,
 8008e44:	f242 0119 	movw	r1, #8217	; 0x2019
 8008e48:	2320      	movs	r3, #32
 8008e4a:	2205      	movs	r2, #5
 8008e4c:	5c61      	ldrb	r1, [r4, r1]
 8008e4e:	4628      	mov	r0, r5
 8008e50:	f000 fac2 	bl	80093d8 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 8008e54:	2302      	movs	r3, #2
 8008e56:	7263      	strb	r3, [r4, #9]
        MSC_BOT_Abort(pdev);
 8008e58:	4628      	mov	r0, r5
}
 8008e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MSC_BOT_Abort(pdev);
 8008e5e:	f7ff bf2f 	b.w	8008cc0 <MSC_BOT_Abort>
    if(SCSI_ProcessCmd(pdev,
 8008e62:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8008e66:	321b      	adds	r2, #27
 8008e68:	4628      	mov	r0, r5
 8008e6a:	f000 f865 	bl	8008f38 <SCSI_ProcessCmd>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	7a23      	ldrb	r3, [r4, #8]
 8008e72:	da07      	bge.n	8008e84 <MSC_BOT_DataOut+0x9c>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8008e74:	2b05      	cmp	r3, #5
 8008e76:	d1ef      	bne.n	8008e58 <MSC_BOT_DataOut+0x70>
       MSC_BOT_SendCSW (pdev,
 8008e78:	2101      	movs	r1, #1
        MSC_BOT_SendCSW (pdev,
 8008e7a:	4628      	mov	r0, r5
}
 8008e7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MSC_BOT_SendCSW (pdev,
 8008e80:	f7ff bf76 	b.w	8008d70 <MSC_BOT_SendCSW>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 8008e84:	3b01      	subs	r3, #1
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d924      	bls.n	8008ed4 <MSC_BOT_DataOut+0xec>
      if (hmsc->bot_data_length > 0)
 8008e8a:	8961      	ldrh	r1, [r4, #10]
 8008e8c:	2900      	cmp	r1, #0
 8008e8e:	d0f4      	beq.n	8008e7a <MSC_BOT_DataOut+0x92>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008e90:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
  len = MIN (hmsc->cbw.dDataLength, len);
 8008e94:	f852 3008 	ldr.w	r3, [r2, r8]
 8008e98:	4299      	cmp	r1, r3
 8008e9a:	bf28      	it	cs
 8008e9c:	4619      	movcs	r1, r3
  hmsc->csw.dDataResidue -= len;
 8008e9e:	59d3      	ldr	r3, [r2, r7]
 8008ea0:	1a5b      	subs	r3, r3, r1
 8008ea2:	51d3      	str	r3, [r2, r7]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8008ea4:	f242 0338 	movw	r3, #8248	; 0x2038
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8008ea8:	4628      	mov	r0, r5
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8008eaa:	54d6      	strb	r6, [r2, r3]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8008eac:	2304      	movs	r3, #4
 8008eae:	7213      	strb	r3, [r2, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8008eb0:	b28b      	uxth	r3, r1
 8008eb2:	f104 020c 	add.w	r2, r4, #12
 8008eb6:	2181      	movs	r1, #129	; 0x81
}
 8008eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8008ebc:	f7fb bbb9 	b.w	8004632 <USBD_LL_Transmit>
    if(SCSI_ProcessCmd(pdev,
 8008ec0:	f242 0319 	movw	r3, #8217	; 0x2019
 8008ec4:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
 8008ec8:	321b      	adds	r2, #27
 8008eca:	5ce1      	ldrb	r1, [r4, r3]
 8008ecc:	f000 f834 	bl	8008f38 <SCSI_ProcessCmd>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	dbd1      	blt.n	8008e78 <MSC_BOT_DataOut+0x90>
 8008ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ed8:	43425355 	.word	0x43425355

08008edc <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008edc:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008ede:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 8008ee2:	7a63      	ldrb	r3, [r4, #9]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d105      	bne.n	8008ef4 <MSC_BOT_CplClrFeature+0x18>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8008ee8:	2181      	movs	r1, #129	; 0x81
 8008eea:	f7fb fb7a 	bl	80045e2 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 8008eee:	2300      	movs	r3, #0
 8008ef0:	7263      	strb	r3, [r4, #9]
 8008ef2:	bd10      	pop	{r4, pc}
  }
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8008ef4:	060a      	lsls	r2, r1, #24
 8008ef6:	d506      	bpl.n	8008f06 <MSC_BOT_CplClrFeature+0x2a>
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d004      	beq.n	8008f06 <MSC_BOT_CplClrFeature+0x2a>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8008efc:	2101      	movs	r1, #1
  }
  
}
 8008efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 8008f02:	f7ff bf35 	b.w	8008d70 <MSC_BOT_SendCSW>
 8008f06:	bd10      	pop	{r4, pc}

08008f08 <SCSI_SenseCode.constprop.8>:
* @param  sKey: Sense Key
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
 8008f08:	b570      	push	{r4, r5, r6, lr}
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008f0a:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8008f0e:	f242 055d 	movw	r5, #8285	; 0x205d
 8008f12:	f242 063c 	movw	r6, #8252	; 0x203c
 8008f16:	5d43      	ldrb	r3, [r0, r5]
 8008f18:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
  hmsc->scsi_sense_tail++;
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8008f20:	55a1      	strb	r1, [r4, r6]
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8008f22:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8008f24:	f504 5401 	add.w	r4, r4, #8256	; 0x2040
 8008f28:	ea4f 2202 	mov.w	r2, r2, lsl #8
  {
    hmsc->scsi_sense_tail = 0;
 8008f2c:	bf08      	it	eq
 8008f2e:	2300      	moveq	r3, #0
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8008f30:	6022      	str	r2, [r4, #0]
    hmsc->scsi_sense_tail = 0;
 8008f32:	5543      	strb	r3, [r0, r5]
 8008f34:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f38 <SCSI_ProcessCmd>:
{
 8008f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (params[0])
 8008f3c:	7813      	ldrb	r3, [r2, #0]
 8008f3e:	2b1e      	cmp	r3, #30
{
 8008f40:	4605      	mov	r5, r0
 8008f42:	460c      	mov	r4, r1
 8008f44:	4617      	mov	r7, r2
  switch (params[0])
 8008f46:	d00f      	beq.n	8008f68 <SCSI_ProcessCmd+0x30>
 8008f48:	d813      	bhi.n	8008f72 <SCSI_ProcessCmd+0x3a>
 8008f4a:	2b12      	cmp	r3, #18
 8008f4c:	f000 80b4 	beq.w	80090b8 <SCSI_ProcessCmd+0x180>
 8008f50:	d805      	bhi.n	8008f5e <SCSI_ProcessCmd+0x26>
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d060      	beq.n	8009018 <SCSI_ProcessCmd+0xe0>
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d07b      	beq.n	8009052 <SCSI_ProcessCmd+0x11a>
    SCSI_SenseCode(pdev, 
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	e14a      	b.n	80091f4 <SCSI_ProcessCmd+0x2bc>
  switch (params[0])
 8008f5e:	2b1a      	cmp	r3, #26
 8008f60:	f000 80c8 	beq.w	80090f4 <SCSI_ProcessCmd+0x1bc>
 8008f64:	2b1b      	cmp	r3, #27
 8008f66:	d1f8      	bne.n	8008f5a <SCSI_ProcessCmd+0x22>
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
  hmsc->bot_data_length = 0;
 8008f68:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8008f6c:	2400      	movs	r4, #0
                            hmsc->scsi_blk_addr, 
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */      
  }
  hmsc->bot_data_length = 0;
 8008f6e:	815c      	strh	r4, [r3, #10]
 8008f70:	e06b      	b.n	800904a <SCSI_ProcessCmd+0x112>
  switch (params[0])
 8008f72:	2b28      	cmp	r3, #40	; 0x28
 8008f74:	f000 810b 	beq.w	800918e <SCSI_ProcessCmd+0x256>
 8008f78:	d828      	bhi.n	8008fcc <SCSI_ProcessCmd+0x94>
 8008f7a:	2b23      	cmp	r3, #35	; 0x23
 8008f7c:	f000 80d8 	beq.w	8009130 <SCSI_ProcessCmd+0x1f8>
 8008f80:	2b25      	cmp	r3, #37	; 0x25
 8008f82:	d1ea      	bne.n	8008f5a <SCSI_ProcessCmd+0x22>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8008f84:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8008f88:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8008f8c:	f242 075e 	movw	r7, #8286	; 0x205e
 8008f90:	f242 0860 	movw	r8, #8288	; 0x2060
 8008f94:	4620      	mov	r0, r4
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	19f2      	adds	r2, r6, r7
 8008f9a:	eb06 0108 	add.w	r1, r6, r8
 8008f9e:	4798      	blx	r3
 8008fa0:	4604      	mov	r4, r0
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	f040 80d9 	bne.w	800915a <SCSI_ProcessCmd+0x222>
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 8008fa8:	f856 3008 	ldr.w	r3, [r6, r8]
 8008fac:	3b01      	subs	r3, #1
 8008fae:	0e1a      	lsrs	r2, r3, #24
 8008fb0:	7332      	strb	r2, [r6, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 8008fb2:	0c1a      	lsrs	r2, r3, #16
 8008fb4:	7372      	strb	r2, [r6, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 8008fb6:	0a1a      	lsrs	r2, r3, #8
 8008fb8:	73b2      	strb	r2, [r6, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 8008fba:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8008fbc:	5bf3      	ldrh	r3, [r6, r7]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8008fbe:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8008fc0:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8008fc2:	7430      	strb	r0, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8008fc4:	7470      	strb	r0, [r6, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8008fc6:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data_length = 8;
 8008fc8:	2308      	movs	r3, #8
 8008fca:	e0de      	b.n	800918a <SCSI_ProcessCmd+0x252>
  switch (params[0])
 8008fcc:	2b2f      	cmp	r3, #47	; 0x2f
 8008fce:	f000 81ac 	beq.w	800932a <SCSI_ProcessCmd+0x3f2>
 8008fd2:	2b5a      	cmp	r3, #90	; 0x5a
 8008fd4:	f000 809d 	beq.w	8009112 <SCSI_ProcessCmd+0x1da>
 8008fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8008fda:	d1be      	bne.n	8008f5a <SCSI_ProcessCmd+0x22>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8008fdc:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008fe0:	7a33      	ldrb	r3, [r6, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f040 815e 	bne.w	80092a4 <SCSI_ProcessCmd+0x36c>
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 8008fe8:	f242 0318 	movw	r3, #8216	; 0x2018
 8008fec:	56f3      	ldrsb	r3, [r6, r3]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	dbb3      	blt.n	8008f5a <SCSI_ProcessCmd+0x22>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8008ff2:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8008ff6:	4608      	mov	r0, r1
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	4798      	blx	r3
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	f040 80ac 	bne.w	800915a <SCSI_ProcessCmd+0x222>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 8009002:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8009006:	4620      	mov	r0, r4
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	4798      	blx	r3
 800900c:	4604      	mov	r4, r0
 800900e:	2800      	cmp	r0, #0
 8009010:	f000 810d 	beq.w	800922e <SCSI_ProcessCmd+0x2f6>
      SCSI_SenseCode(pdev,
 8009014:	2227      	movs	r2, #39	; 0x27
 8009016:	e0a1      	b.n	800915c <SCSI_ProcessCmd+0x224>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8009018:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if (hmsc->cbw.dDataLength != 0)
 800901c:	f242 0314 	movw	r3, #8212	; 0x2014
 8009020:	58f3      	ldr	r3, [r6, r3]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d199      	bne.n	8008f5a <SCSI_ProcessCmd+0x22>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8009026:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800902a:	4608      	mov	r0, r1
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	4798      	blx	r3
 8009030:	4604      	mov	r4, r0
 8009032:	b148      	cbz	r0, 8009048 <SCSI_ProcessCmd+0x110>
    SCSI_SenseCode(pdev,
 8009034:	223a      	movs	r2, #58	; 0x3a
 8009036:	2102      	movs	r1, #2
 8009038:	4628      	mov	r0, r5
 800903a:	f7ff ff65 	bl	8008f08 <SCSI_SenseCode.constprop.8>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800903e:	2305      	movs	r3, #5
 8009040:	7233      	strb	r3, [r6, #8]
    return -1;
 8009042:	f04f 34ff 	mov.w	r4, #4294967295
 8009046:	e000      	b.n	800904a <SCSI_ProcessCmd+0x112>
  hmsc->bot_data_length = 0;
 8009048:	8170      	strh	r0, [r6, #10]
}
 800904a:	4620      	mov	r0, r4
 800904c:	b003      	add	sp, #12
 800904e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009052:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
    hmsc->bot_data[i] = 0;
 8009056:	2400      	movs	r4, #0
 8009058:	f103 020c 	add.w	r2, r3, #12
 800905c:	f103 011e 	add.w	r1, r3, #30
 8009060:	f802 4b01 	strb.w	r4, [r2], #1
  for(i=0 ; i < REQUEST_SENSE_DATA_LEN ; i++) 
 8009064:	428a      	cmp	r2, r1
 8009066:	d1fb      	bne.n	8009060 <SCSI_ProcessCmd+0x128>
  hmsc->bot_data[0]	= 0x70;		
 8009068:	2270      	movs	r2, #112	; 0x70
 800906a:	731a      	strb	r2, [r3, #12]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 800906c:	f242 005c 	movw	r0, #8284	; 0x205c
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8009070:	220c      	movs	r2, #12
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8009072:	f242 015d 	movw	r1, #8285	; 0x205d
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 8009076:	74da      	strb	r2, [r3, #19]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 8009078:	5c1a      	ldrb	r2, [r3, r0]
 800907a:	5c59      	ldrb	r1, [r3, r1]
 800907c:	4291      	cmp	r1, r2
 800907e:	d013      	beq.n	80090a8 <SCSI_ProcessCmd+0x170>
 8009080:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 8009084:	f242 053c 	movw	r5, #8252	; 0x203c
    hmsc->scsi_sense_head++;
 8009088:	3201      	adds	r2, #1
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 800908a:	5d4d      	ldrb	r5, [r1, r5]
 800908c:	739d      	strb	r5, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 800908e:	f242 0541 	movw	r5, #8257	; 0x2041
    hmsc->scsi_sense_head++;
 8009092:	b2d2      	uxtb	r2, r2
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 8009094:	5d4d      	ldrb	r5, [r1, r5]
 8009096:	761d      	strb	r5, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 8009098:	f501 5101 	add.w	r1, r1, #8256	; 0x2040
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800909c:	2a04      	cmp	r2, #4
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 800909e:	7809      	ldrb	r1, [r1, #0]
 80090a0:	7659      	strb	r1, [r3, #25]
    hmsc->scsi_sense_head++;
 80090a2:	bf14      	ite	ne
 80090a4:	541a      	strbne	r2, [r3, r0]
      hmsc->scsi_sense_head = 0;
 80090a6:	541c      	strbeq	r4, [r3, r0]
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 80090a8:	2212      	movs	r2, #18
 80090aa:	815a      	strh	r2, [r3, #10]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80090ac:	793a      	ldrb	r2, [r7, #4]
 80090ae:	2a12      	cmp	r2, #18
    hmsc->bot_data_length = params[4];
 80090b0:	bf98      	it	ls
 80090b2:	815a      	strhls	r2, [r3, #10]
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
  }
  
  return 0;
 80090b4:	2400      	movs	r4, #0
 80090b6:	e7c8      	b.n	800904a <SCSI_ProcessCmd+0x112>
  if (params[1] & 0x01)/*Evpd is set*/
 80090b8:	787b      	ldrb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80090ba:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  if (params[1] & 0x01)/*Evpd is set*/
 80090be:	07db      	lsls	r3, r3, #31
 80090c0:	d415      	bmi.n	80090ee <SCSI_ProcessCmd+0x1b6>
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80090c2:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80090c6:	69db      	ldr	r3, [r3, #28]
 80090c8:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
 80090cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80090d0:	7939      	ldrb	r1, [r7, #4]
    len = pPage[4] + 5;
 80090d2:	7923      	ldrb	r3, [r4, #4]
 80090d4:	3305      	adds	r3, #5
 80090d6:	428b      	cmp	r3, r1
 80090d8:	bf28      	it	cs
 80090da:	460b      	movcs	r3, r1
  hmsc->bot_data_length = len;
 80090dc:	8153      	strh	r3, [r2, #10]
  while (len) 
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0e8      	beq.n	80090b4 <SCSI_ProcessCmd+0x17c>
    len--;
 80090e2:	3b01      	subs	r3, #1
 80090e4:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pPage[len];
 80090e6:	18d1      	adds	r1, r2, r3
 80090e8:	5ce0      	ldrb	r0, [r4, r3]
 80090ea:	7308      	strb	r0, [r1, #12]
 80090ec:	e7f7      	b.n	80090de <SCSI_ProcessCmd+0x1a6>
    len = LENGTH_INQUIRY_PAGE00;
 80090ee:	2307      	movs	r3, #7
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 80090f0:	4cb6      	ldr	r4, [pc, #728]	; (80093cc <SCSI_ProcessCmd+0x494>)
 80090f2:	e7f3      	b.n	80090dc <SCSI_ProcessCmd+0x1a4>
 80090f4:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 80090f8:	49b5      	ldr	r1, [pc, #724]	; (80093d0 <SCSI_ProcessCmd+0x498>)
  hmsc->bot_data_length = len;
 80090fa:	2208      	movs	r2, #8
 80090fc:	815a      	strh	r2, [r3, #10]
 80090fe:	f103 0213 	add.w	r2, r3, #19
 8009102:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8009104:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8009108:	f802 0901 	strb.w	r0, [r2], #-1
  while (len) 
 800910c:	4293      	cmp	r3, r2
 800910e:	d1f9      	bne.n	8009104 <SCSI_ProcessCmd+0x1cc>
 8009110:	e7d0      	b.n	80090b4 <SCSI_ProcessCmd+0x17c>
 8009112:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8009116:	49af      	ldr	r1, [pc, #700]	; (80093d4 <SCSI_ProcessCmd+0x49c>)
  hmsc->bot_data_length = len;
 8009118:	2208      	movs	r2, #8
 800911a:	815a      	strh	r2, [r3, #10]
 800911c:	f103 0213 	add.w	r2, r3, #19
 8009120:	330b      	adds	r3, #11
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8009122:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 8009126:	f802 0901 	strb.w	r0, [r2], #-1
  while (len) 
 800912a:	429a      	cmp	r2, r3
 800912c:	d1f9      	bne.n	8009122 <SCSI_ProcessCmd+0x1ea>
 800912e:	e7c1      	b.n	80090b4 <SCSI_ProcessCmd+0x17c>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8009130:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
    hmsc->bot_data[i] = 0;
 8009134:	2100      	movs	r1, #0
 8009136:	f106 030c 	add.w	r3, r6, #12
 800913a:	f106 0218 	add.w	r2, r6, #24
 800913e:	f803 1b01 	strb.w	r1, [r3], #1
  for(i=0 ; i < 12 ; i++) 
 8009142:	429a      	cmp	r2, r3
 8009144:	d1fb      	bne.n	800913e <SCSI_ProcessCmd+0x206>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 8009146:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800914a:	4620      	mov	r0, r4
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	f10d 0202 	add.w	r2, sp, #2
 8009152:	a901      	add	r1, sp, #4
 8009154:	4798      	blx	r3
 8009156:	4604      	mov	r4, r0
 8009158:	b118      	cbz	r0, 8009162 <SCSI_ProcessCmd+0x22a>
    SCSI_SenseCode(pdev,
 800915a:	223a      	movs	r2, #58	; 0x3a
      SCSI_SenseCode(pdev,
 800915c:	2102      	movs	r1, #2
    SCSI_SenseCode(pdev, 
 800915e:	4628      	mov	r0, r5
 8009160:	e0eb      	b.n	800933a <SCSI_ProcessCmd+0x402>
    hmsc->bot_data[3] = 0x08;
 8009162:	2308      	movs	r3, #8
 8009164:	73f3      	strb	r3, [r6, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8009166:	9b01      	ldr	r3, [sp, #4]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8009168:	7570      	strb	r0, [r6, #21]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 800916a:	3b01      	subs	r3, #1
 800916c:	0e1a      	lsrs	r2, r3, #24
 800916e:	7432      	strb	r2, [r6, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 8009170:	0c1a      	lsrs	r2, r3, #16
 8009172:	7472      	strb	r2, [r6, #17]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 8009174:	74f3      	strb	r3, [r6, #19]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 8009176:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[8] = 0x02;
 8009178:	2302      	movs	r3, #2
 800917a:	7533      	strb	r3, [r6, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800917c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 8009180:	74b2      	strb	r2, [r6, #18]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8009182:	0a1a      	lsrs	r2, r3, #8
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8009184:	75f3      	strb	r3, [r6, #23]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8009186:	75b2      	strb	r2, [r6, #22]
    hmsc->bot_data_length = 12;
 8009188:	230c      	movs	r3, #12
    hmsc->bot_data_length = 8;
 800918a:	8173      	strh	r3, [r6, #10]
 800918c:	e75d      	b.n	800904a <SCSI_ProcessCmd+0x112>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 800918e:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 8009192:	7a33      	ldrb	r3, [r6, #8]
 8009194:	2b00      	cmp	r3, #0
 8009196:	f040 80f1 	bne.w	800937c <SCSI_ProcessCmd+0x444>
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 800919a:	f242 0318 	movw	r3, #8216	; 0x2018
 800919e:	56f3      	ldrsb	r3, [r6, r3]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f6bf aeda 	bge.w	8008f5a <SCSI_ProcessCmd+0x22>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 80091a6:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 80091aa:	4608      	mov	r0, r1
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	4798      	blx	r3
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d1d2      	bne.n	800915a <SCSI_ProcessCmd+0x222>
      (params[3] << 16) | \
 80091b4:	78fb      	ldrb	r3, [r7, #3]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80091b6:	78ba      	ldrb	r2, [r7, #2]
      (params[3] << 16) | \
 80091b8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80091ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
          params[5];
 80091be:	797a      	ldrb	r2, [r7, #5]
        (params[4] <<  8) | \
 80091c0:	4313      	orrs	r3, r2
 80091c2:	793a      	ldrb	r2, [r7, #4]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80091c4:	f242 0e64 	movw	lr, #8292	; 0x2064
        (params[4] <<  8) | \
 80091c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 80091cc:	f846 300e 	str.w	r3, [r6, lr]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80091d0:	79fa      	ldrb	r2, [r7, #7]
      params[8];  
 80091d2:	7a39      	ldrb	r1, [r7, #8]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80091d4:	f242 0c60 	movw	ip, #8288	; 0x2060
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80091d8:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80091dc:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 80091e0:	f852 200c 	ldr.w	r2, [r2, ip]
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80091e4:	f242 0068 	movw	r0, #8296	; 0x2068
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80091e8:	185f      	adds	r7, r3, r1
 80091ea:	4297      	cmp	r7, r2
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 80091ec:	5031      	str	r1, [r6, r0]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 80091ee:	f240 80b5 	bls.w	800935c <SCSI_ProcessCmd+0x424>
    SCSI_SenseCode(pdev,
 80091f2:	2221      	movs	r2, #33	; 0x21
    SCSI_SenseCode(pdev, 
 80091f4:	2105      	movs	r1, #5
 80091f6:	e7b2      	b.n	800915e <SCSI_ProcessCmd+0x226>
  USBD_LL_Transmit (pdev, 
 80091f8:	b2bb      	uxth	r3, r7
 80091fa:	4652      	mov	r2, sl
 80091fc:	2181      	movs	r1, #129	; 0x81
 80091fe:	4628      	mov	r0, r5
 8009200:	f7fb fa17 	bl	8004632 <USBD_LL_Transmit>
  hmsc->scsi_blk_addr   += len; 
 8009204:	f856 3009 	ldr.w	r3, [r6, r9]
  hmsc->scsi_blk_len    -= len;  
 8009208:	f856 4008 	ldr.w	r4, [r6, r8]
  hmsc->csw.dDataResidue -= len;
 800920c:	f242 0234 	movw	r2, #8244	; 0x2034
  hmsc->scsi_blk_addr   += len; 
 8009210:	443b      	add	r3, r7
 8009212:	f846 3009 	str.w	r3, [r6, r9]
  hmsc->csw.dDataResidue -= len;
 8009216:	58b3      	ldr	r3, [r6, r2]
  hmsc->scsi_blk_len    -= len;  
 8009218:	1be4      	subs	r4, r4, r7
  hmsc->csw.dDataResidue -= len;
 800921a:	1bdf      	subs	r7, r3, r7
  hmsc->scsi_blk_len    -= len;  
 800921c:	f846 4008 	str.w	r4, [r6, r8]
  hmsc->csw.dDataResidue -= len;
 8009220:	50b7      	str	r7, [r6, r2]
  if (hmsc->scsi_blk_len == 0)
 8009222:	2c00      	cmp	r4, #0
 8009224:	f47f af46 	bne.w	80090b4 <SCSI_ProcessCmd+0x17c>
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8009228:	2303      	movs	r3, #3
 800922a:	7233      	strb	r3, [r6, #8]
 800922c:	e70d      	b.n	800904a <SCSI_ProcessCmd+0x112>
      (params[3] << 16) | \
 800922e:	78fa      	ldrb	r2, [r7, #3]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8009230:	78bb      	ldrb	r3, [r7, #2]
      (params[3] << 16) | \
 8009232:	0412      	lsls	r2, r2, #16
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8009234:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
          params[5];
 8009238:	797b      	ldrb	r3, [r7, #5]
        (params[4] <<  8) | \
 800923a:	431a      	orrs	r2, r3
 800923c:	793b      	ldrb	r3, [r7, #4]
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 800923e:	f242 0e64 	movw	lr, #8292	; 0x2064
        (params[4] <<  8) | \
 8009242:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8009246:	f846 200e 	str.w	r2, [r6, lr]
      params[8];  
 800924a:	7a3b      	ldrb	r3, [r7, #8]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 800924c:	79f9      	ldrb	r1, [r7, #7]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 800924e:	f242 0c60 	movw	ip, #8288	; 0x2060
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8009252:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8009256:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 800925a:	f853 300c 	ldr.w	r3, [r3, ip]
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 800925e:	f242 0068 	movw	r0, #8296	; 0x2068
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8009262:	1857      	adds	r7, r2, r1
 8009264:	429f      	cmp	r7, r3
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8009266:	5031      	str	r1, [r6, r0]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8009268:	d8c3      	bhi.n	80091f2 <SCSI_ProcessCmd+0x2ba>
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 800926a:	f242 035e 	movw	r3, #8286	; 0x205e
 800926e:	5af3      	ldrh	r3, [r6, r3]
 8009270:	435a      	muls	r2, r3
 8009272:	f846 200e 	str.w	r2, [r6, lr]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8009276:	f242 0214 	movw	r2, #8212	; 0x2014
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 800927a:	434b      	muls	r3, r1
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 800927c:	58b2      	ldr	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 800927e:	5033      	str	r3, [r6, r0]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8009280:	4293      	cmp	r3, r2
 8009282:	f47f ae6a 	bne.w	8008f5a <SCSI_ProcessCmd+0x22>
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 8009286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 800928a:	f04f 0101 	mov.w	r1, #1
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 800928e:	bf28      	it	cs
 8009290:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 8009294:	7231      	strb	r1, [r6, #8]
    USBD_LL_PrepareReceive (pdev,
 8009296:	b29b      	uxth	r3, r3
 8009298:	f106 020c 	add.w	r2, r6, #12
 800929c:	4628      	mov	r0, r5
 800929e:	f7fb f9cf 	bl	8004640 <USBD_LL_PrepareReceive>
 80092a2:	e6d2      	b.n	800904a <SCSI_ProcessCmd+0x112>
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80092a4:	f242 0968 	movw	r9, #8296	; 0x2068
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 80092a8:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80092ac:	f856 7009 	ldr.w	r7, [r6, r9]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 80092b0:	f8d0 b014 	ldr.w	fp, [r0, #20]
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 80092b4:	f242 035e 	movw	r3, #8286	; 0x205e
 80092b8:	f242 0a64 	movw	sl, #8292	; 0x2064
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80092bc:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
                              hmsc->bot_data, 
 80092c0:	f106 080c 	add.w	r8, r6, #12
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 80092c4:	bf28      	it	cs
 80092c6:	f44f 5700 	movcs.w	r7, #8192	; 0x2000
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 80092ca:	5af2      	ldrh	r2, [r6, r3]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 80092cc:	f856 100a 	ldr.w	r1, [r6, sl]
                              len / hmsc->scsi_blk_size) < 0)
 80092d0:	fbb7 f3f2 	udiv	r3, r7, r2
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 80092d4:	4620      	mov	r0, r4
 80092d6:	fbb1 f2f2 	udiv	r2, r1, r2
 80092da:	b29b      	uxth	r3, r3
 80092dc:	4641      	mov	r1, r8
 80092de:	47d8      	blx	fp
 80092e0:	2800      	cmp	r0, #0
 80092e2:	da01      	bge.n	80092e8 <SCSI_ProcessCmd+0x3b0>
    SCSI_SenseCode(pdev,
 80092e4:	2203      	movs	r2, #3
 80092e6:	e06e      	b.n	80093c6 <SCSI_ProcessCmd+0x48e>
  hmsc->scsi_blk_addr  += len; 
 80092e8:	f856 300a 	ldr.w	r3, [r6, sl]
  hmsc->csw.dDataResidue -= len;
 80092ec:	f242 0134 	movw	r1, #8244	; 0x2034
  hmsc->scsi_blk_addr  += len; 
 80092f0:	443b      	add	r3, r7
 80092f2:	f846 300a 	str.w	r3, [r6, sl]
  hmsc->csw.dDataResidue -= len;
 80092f6:	5872      	ldr	r2, [r6, r1]
  hmsc->scsi_blk_len   -= len; 
 80092f8:	f856 3009 	ldr.w	r3, [r6, r9]
 80092fc:	1bdb      	subs	r3, r3, r7
  hmsc->csw.dDataResidue -= len;
 80092fe:	1bd7      	subs	r7, r2, r7
  hmsc->scsi_blk_len   -= len; 
 8009300:	f846 3009 	str.w	r3, [r6, r9]
  hmsc->csw.dDataResidue -= len;
 8009304:	5077      	str	r7, [r6, r1]
  if (hmsc->scsi_blk_len == 0)
 8009306:	b923      	cbnz	r3, 8009312 <SCSI_ProcessCmd+0x3da>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8009308:	2100      	movs	r1, #0
 800930a:	4628      	mov	r0, r5
 800930c:	f7ff fd30 	bl	8008d70 <MSC_BOT_SendCSW>
 8009310:	e6d0      	b.n	80090b4 <SCSI_ProcessCmd+0x17c>
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 8009312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009316:	bf28      	it	cs
 8009318:	f44f 5300 	movcs.w	r3, #8192	; 0x2000
    USBD_LL_PrepareReceive (pdev,
 800931c:	b29b      	uxth	r3, r3
 800931e:	4642      	mov	r2, r8
 8009320:	2101      	movs	r1, #1
 8009322:	4628      	mov	r0, r5
 8009324:	f7fb f98c 	bl	8004640 <USBD_LL_PrepareReceive>
 8009328:	e6c4      	b.n	80090b4 <SCSI_ProcessCmd+0x17c>
  if ((params[1]& 0x02) == 0x02) 
 800932a:	7854      	ldrb	r4, [r2, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 800932c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  if ((params[1]& 0x02) == 0x02) 
 8009330:	f014 0402 	ands.w	r4, r4, #2
 8009334:	d004      	beq.n	8009340 <SCSI_ProcessCmd+0x408>
    SCSI_SenseCode (pdev,
 8009336:	2224      	movs	r2, #36	; 0x24
 8009338:	2105      	movs	r1, #5
    SCSI_SenseCode(pdev, 
 800933a:	f7ff fde5 	bl	8008f08 <SCSI_SenseCode.constprop.8>
 800933e:	e680      	b.n	8009042 <SCSI_ProcessCmd+0x10a>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8009340:	f242 0268 	movw	r2, #8296	; 0x2068
  if(SCSI_CheckAddressRange(pdev,
 8009344:	f242 0164 	movw	r1, #8292	; 0x2064
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8009348:	5a9a      	ldrh	r2, [r3, r2]
 800934a:	5859      	ldr	r1, [r3, r1]
 800934c:	440a      	add	r2, r1
 800934e:	f242 0160 	movw	r1, #8288	; 0x2060
 8009352:	5859      	ldr	r1, [r3, r1]
 8009354:	428a      	cmp	r2, r1
 8009356:	f67f ae0a 	bls.w	8008f6e <SCSI_ProcessCmd+0x36>
 800935a:	e74a      	b.n	80091f2 <SCSI_ProcessCmd+0x2ba>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 800935c:	2202      	movs	r2, #2
 800935e:	7232      	strb	r2, [r6, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8009360:	f242 025e 	movw	r2, #8286	; 0x205e
 8009364:	5ab2      	ldrh	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8009366:	4351      	muls	r1, r2
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8009368:	4353      	muls	r3, r2
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 800936a:	f242 0214 	movw	r2, #8212	; 0x2014
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 800936e:	f846 300e 	str.w	r3, [r6, lr]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8009372:	58b2      	ldr	r2, [r6, r2]
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8009374:	5031      	str	r1, [r6, r0]
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8009376:	4291      	cmp	r1, r2
 8009378:	f47f adef 	bne.w	8008f5a <SCSI_ProcessCmd+0x22>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 800937c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009380:	8173      	strh	r3, [r6, #10]
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8009382:	f242 0868 	movw	r8, #8296	; 0x2068
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 8009386:	f8d5 6218 	ldr.w	r6, [r5, #536]	; 0x218
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 800938a:	f8d5 021c 	ldr.w	r0, [r5, #540]	; 0x21c
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 800938e:	f856 7008 	ldr.w	r7, [r6, r8]
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8009392:	f8d0 b010 	ldr.w	fp, [r0, #16]
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8009396:	429f      	cmp	r7, r3
 8009398:	bf28      	it	cs
 800939a:	461f      	movcs	r7, r3
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 800939c:	f242 0964 	movw	r9, #8292	; 0x2064
 80093a0:	f242 035e 	movw	r3, #8286	; 0x205e
                              hmsc->bot_data, 
 80093a4:	f106 0a0c 	add.w	sl, r6, #12
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 80093a8:	5af2      	ldrh	r2, [r6, r3]
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 80093aa:	f856 1009 	ldr.w	r1, [r6, r9]
                              len / hmsc->scsi_blk_size) < 0)
 80093ae:	fbb7 f3f2 	udiv	r3, r7, r2
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 80093b2:	4620      	mov	r0, r4
 80093b4:	fbb1 f2f2 	udiv	r2, r1, r2
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	4651      	mov	r1, sl
 80093bc:	47d8      	blx	fp
 80093be:	2800      	cmp	r0, #0
 80093c0:	f6bf af1a 	bge.w	80091f8 <SCSI_ProcessCmd+0x2c0>
    SCSI_SenseCode(pdev,
 80093c4:	2211      	movs	r2, #17
    SCSI_SenseCode(pdev,
 80093c6:	2104      	movs	r1, #4
 80093c8:	e6c9      	b.n	800915e <SCSI_ProcessCmd+0x226>
 80093ca:	bf00      	nop
 80093cc:	0800cee8 	.word	0x0800cee8
 80093d0:	0800cee8 	.word	0x0800cee8
 80093d4:	0800cee0 	.word	0x0800cee0

080093d8 <SCSI_SenseCode>:
{
 80093d8:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80093da:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80093de:	f242 055d 	movw	r5, #8285	; 0x205d
 80093e2:	f242 063c 	movw	r6, #8252	; 0x203c
 80093e6:	5d41      	ldrb	r1, [r0, r5]
 80093e8:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
  hmsc->scsi_sense_tail++;
 80093ec:	3101      	adds	r1, #1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80093ee:	55a2      	strb	r2, [r4, r6]
  hmsc->scsi_sense_tail++;
 80093f0:	b2c9      	uxtb	r1, r1
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80093f2:	f504 5401 	add.w	r4, r4, #8256	; 0x2040
 80093f6:	021b      	lsls	r3, r3, #8
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80093f8:	2904      	cmp	r1, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80093fa:	6023      	str	r3, [r4, #0]
    hmsc->scsi_sense_tail = 0;
 80093fc:	bf0a      	itet	eq
 80093fe:	2300      	moveq	r3, #0
  hmsc->scsi_sense_tail++;
 8009400:	5541      	strbne	r1, [r0, r5]
    hmsc->scsi_sense_tail = 0;
 8009402:	5543      	strbeq	r3, [r0, r5]
 8009404:	bd70      	pop	{r4, r5, r6, pc}

08009406 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009406:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8009408:	b180      	cbz	r0, 800942c <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800940a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800940e:	b113      	cbz	r3, 8009416 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8009410:	2300      	movs	r3, #0
 8009412:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8009416:	b109      	cbz	r1, 800941c <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8009418:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800941c:	2301      	movs	r3, #1
 800941e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8009422:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009424:	f7fb f882 	bl	800452c <USBD_LL_Init>

  return USBD_OK;
 8009428:	2000      	movs	r0, #0
 800942a:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800942c:	2002      	movs	r0, #2
}
 800942e:	bd08      	pop	{r3, pc}

08009430 <Battey_Charge_Mode>:

USBD_StatusTypeDef Battey_Charge_Mode(USBD_HandleTypeDef *pdev)
{
	if ( pdev->dev_state  == USBD_STATE_DEFAULT)
 8009430:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8009434:	2b01      	cmp	r3, #1
		return USBD_OK;
	else
		return USBD_FAIL;

}
 8009436:	bf14      	ite	ne
 8009438:	2002      	movne	r0, #2
 800943a:	2000      	moveq	r0, #0
 800943c:	4770      	bx	lr

0800943e <USBD_DeInit>:
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
  /* Set Default State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800943e:	2301      	movs	r3, #1
{
 8009440:	b510      	push	{r4, lr}
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8009442:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8009446:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800944a:	7901      	ldrb	r1, [r0, #4]
 800944c:	685b      	ldr	r3, [r3, #4]
{
 800944e:	4604      	mov	r4, r0
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8009450:	4798      	blx	r3
  
    /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 8009452:	4620      	mov	r0, r4
 8009454:	f7fb f8a6 	bl	80045a4 <USBD_LL_Stop>
  
  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 8009458:	4620      	mov	r0, r4
 800945a:	f7fb f895 	bl	8004588 <USBD_LL_DeInit>
  
  return USBD_OK;
}
 800945e:	2000      	movs	r0, #0
 8009460:	bd10      	pop	{r4, pc}

08009462 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8009462:	b119      	cbz	r1, 800946c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009464:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8009468:	2000      	movs	r0, #0
 800946a:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800946c:	2002      	movs	r0, #2
  }
  
  return status;
}
 800946e:	4770      	bx	lr

08009470 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8009470:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8009472:	f7fb f890 	bl	8004596 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8009476:	2000      	movs	r0, #0
 8009478:	bd08      	pop	{r3, pc}

0800947a <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop   (USBD_HandleTypeDef *pdev)
{
 800947a:	b510      	push	{r4, lr}
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800947c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009480:	7901      	ldrb	r1, [r0, #4]
 8009482:	685b      	ldr	r3, [r3, #4]
{
 8009484:	4604      	mov	r4, r0
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8009486:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
 8009488:	4620      	mov	r0, r4
 800948a:	f7fb f88b 	bl	80045a4 <USBD_LL_Stop>
  
  return USBD_OK;  
}
 800948e:	2000      	movs	r0, #0
 8009490:	bd10      	pop	{r4, pc}

08009492 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009492:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8009494:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009498:	b90b      	cbnz	r3, 800949e <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800949a:	2002      	movs	r0, #2
 800949c:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4798      	blx	r3
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d1f9      	bne.n	800949a <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80094a6:	bd08      	pop	{r3, pc}

080094a8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80094a8:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80094aa:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	4798      	blx	r3
  return USBD_OK;
}
 80094b2:	2000      	movs	r0, #0
 80094b4:	bd08      	pop	{r3, pc}

080094b6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80094b6:	b538      	push	{r3, r4, r5, lr}
 80094b8:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80094ba:	f500 7502 	add.w	r5, r0, #520	; 0x208
 80094be:	4628      	mov	r0, r5
 80094c0:	f000 fa75 	bl	80099ae <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80094c4:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80094c6:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80094ca:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80094ce:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80094d2:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80094d6:	f001 031f 	and.w	r3, r1, #31
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d00e      	beq.n	80094fc <USBD_LL_SetupStage+0x46>
 80094de:	d307      	bcc.n	80094f0 <USBD_LL_SetupStage+0x3a>
 80094e0:	2b02      	cmp	r3, #2
 80094e2:	d010      	beq.n	8009506 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80094e4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80094e8:	4620      	mov	r0, r4
 80094ea:	f7fb f87a 	bl	80045e2 <USBD_LL_StallEP>
    break;
 80094ee:	e003      	b.n	80094f8 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80094f0:	4629      	mov	r1, r5
 80094f2:	4620      	mov	r0, r4
 80094f4:	f000 f8e6 	bl	80096c4 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80094f8:	2000      	movs	r0, #0
 80094fa:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80094fc:	4629      	mov	r1, r5
 80094fe:	4620      	mov	r0, r4
 8009500:	f000 f9da 	bl	80098b8 <USBD_StdItfReq>
    break;
 8009504:	e7f8      	b.n	80094f8 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8009506:	4629      	mov	r1, r5
 8009508:	4620      	mov	r0, r4
 800950a:	f000 f9ed 	bl	80098e8 <USBD_StdEPReq>
    break;
 800950e:	e7f3      	b.n	80094f8 <USBD_LL_SetupStage+0x42>

08009510 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	4604      	mov	r4, r0
 8009514:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8009516:	bb11      	cbnz	r1, 800955e <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009518:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800951c:	2b03      	cmp	r3, #3
 800951e:	d10f      	bne.n	8009540 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8009520:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8009524:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8009528:	4293      	cmp	r3, r2
 800952a:	d90b      	bls.n	8009544 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 800952c:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800952e:	429a      	cmp	r2, r3
 8009530:	bf28      	it	cs
 8009532:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8009534:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8009538:	b292      	uxth	r2, r2
 800953a:	4629      	mov	r1, r5
 800953c:	f000 fa96 	bl	8009a6c <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8009540:	2000      	movs	r0, #0
 8009542:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8009544:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	b123      	cbz	r3, 8009556 <USBD_LL_DataOutStage+0x46>
 800954c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8009550:	2a03      	cmp	r2, #3
 8009552:	d100      	bne.n	8009556 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8009554:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8009556:	4620      	mov	r0, r4
 8009558:	f000 fa90 	bl	8009a7c <USBD_CtlSendStatus>
 800955c:	e7f0      	b.n	8009540 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 800955e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009562:	699b      	ldr	r3, [r3, #24]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d0eb      	beq.n	8009540 <USBD_LL_DataOutStage+0x30>
 8009568:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800956c:	2a03      	cmp	r2, #3
 800956e:	d1e7      	bne.n	8009540 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8009570:	4798      	blx	r3
 8009572:	e7e5      	b.n	8009540 <USBD_LL_DataOutStage+0x30>

08009574 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8009574:	b570      	push	{r4, r5, r6, lr}
 8009576:	4613      	mov	r3, r2
 8009578:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800957a:	460e      	mov	r6, r1
 800957c:	2900      	cmp	r1, #0
 800957e:	d13d      	bne.n	80095fc <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8009580:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8009584:	2a02      	cmp	r2, #2
 8009586:	d10f      	bne.n	80095a8 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8009588:	69c5      	ldr	r5, [r0, #28]
 800958a:	6a02      	ldr	r2, [r0, #32]
 800958c:	4295      	cmp	r5, r2
 800958e:	d914      	bls.n	80095ba <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8009590:	1aaa      	subs	r2, r5, r2
 8009592:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8009594:	4619      	mov	r1, r3
 8009596:	b292      	uxth	r2, r2
 8009598:	f000 fa51 	bl	8009a3e <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800959c:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 800959e:	461a      	mov	r2, r3
 80095a0:	4619      	mov	r1, r3
 80095a2:	4620      	mov	r0, r4
 80095a4:	f7fb f84c 	bl	8004640 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80095a8:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d102      	bne.n	80095b6 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80095b0:	2300      	movs	r3, #0
 80095b2:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80095b6:	2000      	movs	r0, #0
 80095b8:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80095ba:	6983      	ldr	r3, [r0, #24]
 80095bc:	fbb3 f5f2 	udiv	r5, r3, r2
 80095c0:	fb02 3515 	mls	r5, r2, r5, r3
 80095c4:	b965      	cbnz	r5, 80095e0 <USBD_LL_DataInStage+0x6c>
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d80a      	bhi.n	80095e0 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80095ca:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d206      	bcs.n	80095e0 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80095d2:	462a      	mov	r2, r5
 80095d4:	f000 fa33 	bl	8009a3e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80095d8:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80095dc:	462b      	mov	r3, r5
 80095de:	e7de      	b.n	800959e <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80095e0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	b12b      	cbz	r3, 80095f4 <USBD_LL_DataInStage+0x80>
 80095e8:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80095ec:	2a03      	cmp	r2, #3
 80095ee:	d101      	bne.n	80095f4 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80095f0:	4620      	mov	r0, r4
 80095f2:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80095f4:	4620      	mov	r0, r4
 80095f6:	f000 fa4c 	bl	8009a92 <USBD_CtlReceiveStatus>
 80095fa:	e7d5      	b.n	80095a8 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 80095fc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009600:	695b      	ldr	r3, [r3, #20]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d0d7      	beq.n	80095b6 <USBD_LL_DataInStage+0x42>
 8009606:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800960a:	2a03      	cmp	r2, #3
 800960c:	d1d3      	bne.n	80095b6 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 800960e:	4798      	blx	r3
 8009610:	e7d1      	b.n	80095b6 <USBD_LL_DataInStage+0x42>

08009612 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8009612:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8009614:	2200      	movs	r2, #0
{
 8009616:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8009618:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800961a:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 800961c:	2340      	movs	r3, #64	; 0x40
 800961e:	f7fa ffc8 	bl	80045b2 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8009622:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009624:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8009628:	2200      	movs	r2, #0
 800962a:	2180      	movs	r1, #128	; 0x80
 800962c:	4620      	mov	r0, r4
 800962e:	f7fa ffc0 	bl	80045b2 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009632:	2301      	movs	r3, #1
 8009634:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8009638:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800963c:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800963e:	b12b      	cbz	r3, 800964c <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8009640:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8009644:	7921      	ldrb	r1, [r4, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	4620      	mov	r0, r4
 800964a:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800964c:	2000      	movs	r0, #0
 800964e:	bd38      	pop	{r3, r4, r5, pc}

08009650 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8009650:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8009652:	2000      	movs	r0, #0
 8009654:	4770      	bx	lr

08009656 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8009656:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800965a:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800965e:	2304      	movs	r3, #4
 8009660:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8009664:	2000      	movs	r0, #0
 8009666:	4770      	bx	lr

08009668 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8009668:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 800966c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8009670:	2000      	movs	r0, #0
 8009672:	4770      	bx	lr

08009674 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8009674:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8009676:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800967a:	2a03      	cmp	r2, #3
 800967c:	d104      	bne.n	8009688 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800967e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009682:	69db      	ldr	r3, [r3, #28]
 8009684:	b103      	cbz	r3, 8009688 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8009686:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8009688:	2000      	movs	r0, #0
 800968a:	bd08      	pop	{r3, pc}

0800968c <USBD_LL_IsoINIncomplete>:
 800968c:	2000      	movs	r0, #0
 800968e:	4770      	bx	lr

08009690 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8009690:	2000      	movs	r0, #0
 8009692:	4770      	bx	lr

08009694 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8009694:	2000      	movs	r0, #0
 8009696:	4770      	bx	lr

08009698 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8009698:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800969a:	2201      	movs	r2, #1
 800969c:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80096a0:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 80096a4:	7901      	ldrb	r1, [r0, #4]
 80096a6:	6852      	ldr	r2, [r2, #4]
 80096a8:	4790      	blx	r2
   
  return USBD_OK;
}
 80096aa:	2000      	movs	r0, #0
 80096ac:	bd08      	pop	{r3, pc}

080096ae <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80096ae:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 80096b0:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 80096b2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80096b4:	f7fa ff95 	bl	80045e2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80096b8:	4620      	mov	r0, r4
 80096ba:	2100      	movs	r1, #0
}
 80096bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80096c0:	f7fa bf8f 	b.w	80045e2 <USBD_LL_StallEP>

080096c4 <USBD_StdDevReq>:
{
 80096c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80096c6:	784b      	ldrb	r3, [r1, #1]
{
 80096c8:	4604      	mov	r4, r0
 80096ca:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80096cc:	2b09      	cmp	r3, #9
 80096ce:	d879      	bhi.n	80097c4 <USBD_StdDevReq+0x100>
 80096d0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80096d4:	00e500c9 	.word	0x00e500c9
 80096d8:	00d90078 	.word	0x00d90078
 80096dc:	006d0078 	.word	0x006d0078
 80096e0:	0078000a 	.word	0x0078000a
 80096e4:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 80096e8:	884b      	ldrh	r3, [r1, #2]
 80096ea:	0a1a      	lsrs	r2, r3, #8
 80096ec:	3a01      	subs	r2, #1
 80096ee:	2a06      	cmp	r2, #6
 80096f0:	d868      	bhi.n	80097c4 <USBD_StdDevReq+0x100>
 80096f2:	e8df f002 	tbb	[pc, r2]
 80096f6:	1c04      	.short	0x1c04
 80096f8:	49676729 	.word	0x49676729
 80096fc:	52          	.byte	0x52
 80096fd:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80096fe:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8009702:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8009704:	7c20      	ldrb	r0, [r4, #16]
 8009706:	f10d 0106 	add.w	r1, sp, #6
 800970a:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800970c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009710:	2a00      	cmp	r2, #0
 8009712:	d067      	beq.n	80097e4 <USBD_StdDevReq+0x120>
 8009714:	88eb      	ldrh	r3, [r5, #6]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d064      	beq.n	80097e4 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800971a:	429a      	cmp	r2, r3
 800971c:	bf28      	it	cs
 800971e:	461a      	movcs	r2, r3
 8009720:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8009724:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 8009726:	4620      	mov	r0, r4
 8009728:	f000 f97c 	bl	8009a24 <USBD_CtlSendData>
 800972c:	e05a      	b.n	80097e4 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800972e:	7c02      	ldrb	r2, [r0, #16]
 8009730:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009734:	b932      	cbnz	r2, 8009744 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009738:	f10d 0006 	add.w	r0, sp, #6
 800973c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800973e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009740:	7043      	strb	r3, [r0, #1]
 8009742:	e7e3      	b.n	800970c <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009746:	e7f7      	b.n	8009738 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b05      	cmp	r3, #5
 800974c:	d83a      	bhi.n	80097c4 <USBD_StdDevReq+0x100>
 800974e:	e8df f003 	tbb	[pc, r3]
 8009752:	0703      	.short	0x0703
 8009754:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8009758:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	e7d1      	b.n	8009704 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009760:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	e7cd      	b.n	8009704 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009768:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	e7c9      	b.n	8009704 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009770:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	e7c5      	b.n	8009704 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009778:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800977c:	695b      	ldr	r3, [r3, #20]
 800977e:	e7c1      	b.n	8009704 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009780:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	e7bd      	b.n	8009704 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8009788:	7c03      	ldrb	r3, [r0, #16]
 800978a:	b9db      	cbnz	r3, 80097c4 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800978c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009790:	f10d 0006 	add.w	r0, sp, #6
 8009794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009796:	4798      	blx	r3
 8009798:	e7b8      	b.n	800970c <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800979a:	7c03      	ldrb	r3, [r0, #16]
 800979c:	b993      	cbnz	r3, 80097c4 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800979e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80097a2:	f10d 0006 	add.w	r0, sp, #6
 80097a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80097aa:	2307      	movs	r3, #7
 80097ac:	e7c8      	b.n	8009740 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80097ae:	888b      	ldrh	r3, [r1, #4]
 80097b0:	b943      	cbnz	r3, 80097c4 <USBD_StdDevReq+0x100>
 80097b2:	88cb      	ldrh	r3, [r1, #6]
 80097b4:	b933      	cbnz	r3, 80097c4 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80097b6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80097ba:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80097bc:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80097be:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80097c2:	d103      	bne.n	80097cc <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 80097c4:	4620      	mov	r0, r4
 80097c6:	f7ff ff72 	bl	80096ae <USBD_CtlError.constprop.0>
    break;
 80097ca:	e00b      	b.n	80097e4 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 80097cc:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80097d0:	4629      	mov	r1, r5
 80097d2:	f7fa ff27 	bl	8004624 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80097d6:	4620      	mov	r0, r4
 80097d8:	f000 f950 	bl	8009a7c <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80097dc:	b12d      	cbz	r5, 80097ea <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80097de:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80097e0:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80097e4:	2000      	movs	r0, #0
 80097e6:	b003      	add	sp, #12
 80097e8:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80097ea:	2301      	movs	r3, #1
 80097ec:	e7f8      	b.n	80097e0 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 80097ee:	7889      	ldrb	r1, [r1, #2]
 80097f0:	4d30      	ldr	r5, [pc, #192]	; (80098b4 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80097f2:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80097f4:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80097f6:	d8e5      	bhi.n	80097c4 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 80097f8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d00c      	beq.n	800981a <USBD_StdDevReq+0x156>
 8009800:	2b03      	cmp	r3, #3
 8009802:	d1df      	bne.n	80097c4 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8009804:	b9b1      	cbnz	r1, 8009834 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009806:	2302      	movs	r3, #2
 8009808:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800980c:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800980e:	f7ff fe4b 	bl	80094a8 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8009812:	4620      	mov	r0, r4
 8009814:	f000 f932 	bl	8009a7c <USBD_CtlSendStatus>
 8009818:	e7e4      	b.n	80097e4 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800981a:	2900      	cmp	r1, #0
 800981c:	d0f9      	beq.n	8009812 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 800981e:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009820:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8009822:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009824:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8009828:	4620      	mov	r0, r4
 800982a:	f7ff fe32 	bl	8009492 <USBD_SetClassConfig>
 800982e:	2802      	cmp	r0, #2
 8009830:	d1ef      	bne.n	8009812 <USBD_StdDevReq+0x14e>
 8009832:	e7c7      	b.n	80097c4 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8009834:	6841      	ldr	r1, [r0, #4]
 8009836:	2901      	cmp	r1, #1
 8009838:	d0eb      	beq.n	8009812 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800983a:	b2c9      	uxtb	r1, r1
 800983c:	f7ff fe34 	bl	80094a8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009840:	7829      	ldrb	r1, [r5, #0]
 8009842:	6061      	str	r1, [r4, #4]
 8009844:	e7f0      	b.n	8009828 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 8009846:	88ca      	ldrh	r2, [r1, #6]
 8009848:	2a01      	cmp	r2, #1
 800984a:	d1bb      	bne.n	80097c4 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 800984c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8009850:	2b02      	cmp	r3, #2
 8009852:	d003      	beq.n	800985c <USBD_StdDevReq+0x198>
 8009854:	2b03      	cmp	r3, #3
 8009856:	d1b5      	bne.n	80097c4 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8009858:	1d01      	adds	r1, r0, #4
 800985a:	e764      	b.n	8009726 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 800985c:	4601      	mov	r1, r0
 800985e:	2300      	movs	r3, #0
 8009860:	f841 3f08 	str.w	r3, [r1, #8]!
 8009864:	e75f      	b.n	8009726 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8009866:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800986a:	3b02      	subs	r3, #2
 800986c:	2b01      	cmp	r3, #1
 800986e:	d8a9      	bhi.n	80097c4 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8009870:	2301      	movs	r3, #1
 8009872:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8009874:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8009878:	b10b      	cbz	r3, 800987e <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800987a:	2303      	movs	r3, #3
 800987c:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800987e:	2202      	movs	r2, #2
 8009880:	f104 010c 	add.w	r1, r4, #12
 8009884:	e74f      	b.n	8009726 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009886:	884b      	ldrh	r3, [r1, #2]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d1ab      	bne.n	80097e4 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800988c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8009890:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8009894:	4629      	mov	r1, r5
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	4620      	mov	r0, r4
 800989a:	4798      	blx	r3
 800989c:	e7b9      	b.n	8009812 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 800989e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80098a2:	3b02      	subs	r3, #2
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d88d      	bhi.n	80097c4 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80098a8:	884b      	ldrh	r3, [r1, #2]
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d19a      	bne.n	80097e4 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80098ae:	2300      	movs	r3, #0
 80098b0:	e7ec      	b.n	800988c <USBD_StdDevReq+0x1c8>
 80098b2:	bf00      	nop
 80098b4:	2000083e 	.word	0x2000083e

080098b8 <USBD_StdItfReq>:
{
 80098b8:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80098ba:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80098be:	2b03      	cmp	r3, #3
{
 80098c0:	4604      	mov	r4, r0
 80098c2:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80098c4:	d10d      	bne.n	80098e2 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80098c6:	790b      	ldrb	r3, [r1, #4]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d80a      	bhi.n	80098e2 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80098cc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80098d4:	88eb      	ldrh	r3, [r5, #6]
 80098d6:	b913      	cbnz	r3, 80098de <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80098d8:	4620      	mov	r0, r4
 80098da:	f000 f8cf 	bl	8009a7c <USBD_CtlSendStatus>
}
 80098de:	2000      	movs	r0, #0
 80098e0:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80098e2:	f7ff fee4 	bl	80096ae <USBD_CtlError.constprop.0>
    break;
 80098e6:	e7fa      	b.n	80098de <USBD_StdItfReq+0x26>

080098e8 <USBD_StdEPReq>:
{
 80098e8:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80098ea:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 80098ec:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80098ee:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80098f2:	2a20      	cmp	r2, #32
{
 80098f4:	4604      	mov	r4, r0
 80098f6:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80098f8:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 80098fa:	d105      	bne.n	8009908 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 80098fc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	4798      	blx	r3
}
 8009904:	2000      	movs	r0, #0
 8009906:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8009908:	784a      	ldrb	r2, [r1, #1]
 800990a:	2a01      	cmp	r2, #1
 800990c:	d01c      	beq.n	8009948 <USBD_StdEPReq+0x60>
 800990e:	d32a      	bcc.n	8009966 <USBD_StdEPReq+0x7e>
 8009910:	2a03      	cmp	r2, #3
 8009912:	d1f7      	bne.n	8009904 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8009914:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8009918:	2a02      	cmp	r2, #2
 800991a:	d040      	beq.n	800999e <USBD_StdEPReq+0xb6>
 800991c:	2a03      	cmp	r2, #3
 800991e:	d002      	beq.n	8009926 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8009920:	f7ff fec5 	bl	80096ae <USBD_CtlError.constprop.0>
      break;
 8009924:	e7ee      	b.n	8009904 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8009926:	884a      	ldrh	r2, [r1, #2]
 8009928:	b922      	cbnz	r2, 8009934 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800992a:	065e      	lsls	r6, r3, #25
 800992c:	d002      	beq.n	8009934 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800992e:	4619      	mov	r1, r3
 8009930:	f7fa fe57 	bl	80045e2 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8009934:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8009938:	4629      	mov	r1, r5
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	4620      	mov	r0, r4
 800993e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8009940:	4620      	mov	r0, r4
 8009942:	f000 f89b 	bl	8009a7c <USBD_CtlSendStatus>
 8009946:	e7dd      	b.n	8009904 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8009948:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800994c:	2a02      	cmp	r2, #2
 800994e:	d026      	beq.n	800999e <USBD_StdEPReq+0xb6>
 8009950:	2a03      	cmp	r2, #3
 8009952:	d1e5      	bne.n	8009920 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8009954:	884a      	ldrh	r2, [r1, #2]
 8009956:	2a00      	cmp	r2, #0
 8009958:	d1d4      	bne.n	8009904 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 800995a:	0659      	lsls	r1, r3, #25
 800995c:	d0f0      	beq.n	8009940 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800995e:	4619      	mov	r1, r3
 8009960:	f7fa fe46 	bl	80045f0 <USBD_LL_ClearStallEP>
 8009964:	e7e6      	b.n	8009934 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8009966:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800996a:	2a02      	cmp	r2, #2
 800996c:	d017      	beq.n	800999e <USBD_StdEPReq+0xb6>
 800996e:	2a03      	cmp	r2, #3
 8009970:	d1d6      	bne.n	8009920 <USBD_StdEPReq+0x38>
 8009972:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8009976:	f016 0f80 	tst.w	r6, #128	; 0x80
 800997a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800997e:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8009980:	bf14      	ite	ne
 8009982:	3514      	addne	r5, #20
 8009984:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009988:	f7fa fe39 	bl	80045fe <USBD_LL_IsStallEP>
 800998c:	b168      	cbz	r0, 80099aa <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 800998e:	2301      	movs	r3, #1
 8009990:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8009992:	2202      	movs	r2, #2
 8009994:	4629      	mov	r1, r5
 8009996:	4620      	mov	r0, r4
 8009998:	f000 f844 	bl	8009a24 <USBD_CtlSendData>
      break;
 800999c:	e7b2      	b.n	8009904 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 800999e:	065a      	lsls	r2, r3, #25
 80099a0:	d0b0      	beq.n	8009904 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 80099a2:	4619      	mov	r1, r3
 80099a4:	f7fa fe1d 	bl	80045e2 <USBD_LL_StallEP>
 80099a8:	e7ac      	b.n	8009904 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 80099aa:	6028      	str	r0, [r5, #0]
 80099ac:	e7f1      	b.n	8009992 <USBD_StdEPReq+0xaa>

080099ae <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80099ae:	780b      	ldrb	r3, [r1, #0]
 80099b0:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80099b2:	784b      	ldrb	r3, [r1, #1]
 80099b4:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80099b6:	78ca      	ldrb	r2, [r1, #3]
 80099b8:	788b      	ldrb	r3, [r1, #2]
 80099ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80099be:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80099c0:	794a      	ldrb	r2, [r1, #5]
 80099c2:	790b      	ldrb	r3, [r1, #4]
 80099c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80099c8:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80099ca:	79ca      	ldrb	r2, [r1, #7]
 80099cc:	798b      	ldrb	r3, [r1, #6]
 80099ce:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80099d2:	80c3      	strh	r3, [r0, #6]
 80099d4:	4770      	bx	lr

080099d6 <USBD_CtlError>:
{
 80099d6:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 80099d8:	2180      	movs	r1, #128	; 0x80
{
 80099da:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80099dc:	f7fa fe01 	bl	80045e2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80099e0:	4620      	mov	r0, r4
 80099e2:	2100      	movs	r1, #0
}
 80099e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80099e8:	f7fa bdfb 	b.w	80045e2 <USBD_LL_StallEP>

080099ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80099ec:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80099ee:	b188      	cbz	r0, 8009a14 <USBD_GetString+0x28>
 80099f0:	4605      	mov	r5, r0
 80099f2:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80099f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2c00      	cmp	r4, #0
 80099fc:	d1f9      	bne.n	80099f2 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80099fe:	005b      	lsls	r3, r3, #1
 8009a00:	3302      	adds	r3, #2
 8009a02:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8009a04:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8009a06:	2303      	movs	r3, #3
 8009a08:	704b      	strb	r3, [r1, #1]
 8009a0a:	3801      	subs	r0, #1
 8009a0c:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8009a0e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009a12:	b905      	cbnz	r5, 8009a16 <USBD_GetString+0x2a>
 8009a14:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	b2d2      	uxtb	r2, r2
 8009a1a:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8009a1c:	3302      	adds	r3, #2
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	548c      	strb	r4, [r1, r2]
 8009a22:	e7f4      	b.n	8009a0e <USBD_GetString+0x22>

08009a24 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8009a24:	b510      	push	{r4, lr}
 8009a26:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8009a28:	2202      	movs	r2, #2
 8009a2a:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8009a2e:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8009a30:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8009a32:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8009a34:	2100      	movs	r1, #0
 8009a36:	f7fa fdfc 	bl	8004632 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	bd10      	pop	{r4, pc}

08009a3e <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8009a3e:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8009a40:	4613      	mov	r3, r2
 8009a42:	460a      	mov	r2, r1
 8009a44:	2100      	movs	r1, #0
 8009a46:	f7fa fdf4 	bl	8004632 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	bd08      	pop	{r3, pc}

08009a4e <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8009a4e:	b510      	push	{r4, lr}
 8009a50:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8009a52:	2203      	movs	r2, #3
 8009a54:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8009a58:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8009a5c:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8009a5e:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8009a62:	2100      	movs	r1, #0
 8009a64:	f7fa fdec 	bl	8004640 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8009a68:	2000      	movs	r0, #0
 8009a6a:	bd10      	pop	{r4, pc}

08009a6c <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8009a6c:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8009a6e:	4613      	mov	r3, r2
 8009a70:	460a      	mov	r2, r1
 8009a72:	2100      	movs	r1, #0
 8009a74:	f7fa fde4 	bl	8004640 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8009a78:	2000      	movs	r0, #0
 8009a7a:	bd08      	pop	{r3, pc}

08009a7c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8009a7c:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a7e:	2304      	movs	r3, #4
 8009a80:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8009a84:	2300      	movs	r3, #0
 8009a86:	461a      	mov	r2, r3
 8009a88:	4619      	mov	r1, r3
 8009a8a:	f7fa fdd2 	bl	8004632 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8009a8e:	2000      	movs	r0, #0
 8009a90:	bd08      	pop	{r3, pc}

08009a92 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8009a92:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8009a94:	2305      	movs	r3, #5
 8009a96:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	f7fa fdce 	bl	8004640 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	bd08      	pop	{r3, pc}

08009aa8 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009aa8:	4b03      	ldr	r3, [pc, #12]	; (8009ab8 <disk_status+0x10>)
 8009aaa:	181a      	adds	r2, r3, r0
 8009aac:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009ab0:	7a10      	ldrb	r0, [r2, #8]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	4718      	bx	r3
 8009ab8:	20000860 	.word	0x20000860

08009abc <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8009abc:	4b06      	ldr	r3, [pc, #24]	; (8009ad8 <disk_initialize+0x1c>)
 8009abe:	5c1a      	ldrb	r2, [r3, r0]
 8009ac0:	b942      	cbnz	r2, 8009ad4 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009ac6:	181a      	adds	r2, r3, r0
 8009ac8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009acc:	7a10      	ldrb	r0, [r2, #8]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4718      	bx	r3
  }
  return stat;
}
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	4770      	bx	lr
 8009ad8:	20000860 	.word	0x20000860

08009adc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009adc:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009ade:	4c05      	ldr	r4, [pc, #20]	; (8009af4 <disk_read+0x18>)
 8009ae0:	1825      	adds	r5, r4, r0
 8009ae2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8009ae6:	6860      	ldr	r0, [r4, #4]
 8009ae8:	6884      	ldr	r4, [r0, #8]
 8009aea:	7a28      	ldrb	r0, [r5, #8]
 8009aec:	46a4      	mov	ip, r4
  return res;
}
 8009aee:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009af0:	4760      	bx	ip
 8009af2:	bf00      	nop
 8009af4:	20000860 	.word	0x20000860

08009af8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009af8:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009afa:	4c05      	ldr	r4, [pc, #20]	; (8009b10 <disk_write+0x18>)
 8009afc:	1825      	adds	r5, r4, r0
 8009afe:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8009b02:	6860      	ldr	r0, [r4, #4]
 8009b04:	68c4      	ldr	r4, [r0, #12]
 8009b06:	7a28      	ldrb	r0, [r5, #8]
 8009b08:	46a4      	mov	ip, r4
  return res;
}
 8009b0a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009b0c:	4760      	bx	ip
 8009b0e:	bf00      	nop
 8009b10:	20000860 	.word	0x20000860

08009b14 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009b14:	4b05      	ldr	r3, [pc, #20]	; (8009b2c <disk_ioctl+0x18>)
{
 8009b16:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009b18:	181c      	adds	r4, r3, r0
 8009b1a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009b1e:	7a20      	ldrb	r0, [r4, #8]
 8009b20:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8009b22:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	4718      	bx	r3
 8009b2a:	bf00      	nop
 8009b2c:	20000860 	.word	0x20000860

08009b30 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009b30:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8009b32:	4c06      	ldr	r4, [pc, #24]	; (8009b4c <SD_initialize+0x1c>)
 8009b34:	2301      	movs	r3, #1
 8009b36:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8009b38:	f7f7 fb80 	bl	800123c <BSP_SD_Init>
 8009b3c:	4623      	mov	r3, r4
 8009b3e:	b918      	cbnz	r0, 8009b48 <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 8009b40:	7822      	ldrb	r2, [r4, #0]
 8009b42:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009b46:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8009b48:	7818      	ldrb	r0, [r3, #0]
}
 8009b4a:	bd10      	pop	{r4, pc}
 8009b4c:	200002a0 	.word	0x200002a0

08009b50 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009b50:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8009b52:	4c06      	ldr	r4, [pc, #24]	; (8009b6c <SD_status+0x1c>)
 8009b54:	2301      	movs	r3, #1
 8009b56:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetStatus() == MSD_OK)
 8009b58:	f7f7 fada 	bl	8001110 <BSP_SD_GetStatus>
 8009b5c:	4623      	mov	r3, r4
 8009b5e:	b918      	cbnz	r0, 8009b68 <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 8009b60:	7822      	ldrb	r2, [r4, #0]
 8009b62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009b66:	7022      	strb	r2, [r4, #0]
  }
  
  return Stat;
 8009b68:	7818      	ldrb	r0, [r3, #0]
}
 8009b6a:	bd10      	pop	{r4, pc}
 8009b6c:	200002a0 	.word	0x200002a0

08009b70 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009b70:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009b72:	9301      	str	r3, [sp, #4]
 8009b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	0252      	lsls	r2, r2, #9
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	4608      	mov	r0, r1
 8009b80:	f7f7 fb04 	bl	800118c <BSP_SD_ReadBlocks_DMA>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 8009b84:	3000      	adds	r0, #0
 8009b86:	bf18      	it	ne
 8009b88:	2001      	movne	r0, #1
 8009b8a:	b003      	add	sp, #12
 8009b8c:	f85d fb04 	ldr.w	pc, [sp], #4

08009b90 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009b90:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009b92:	9301      	str	r3, [sp, #4]
 8009b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b98:	9300      	str	r3, [sp, #0]
 8009b9a:	0252      	lsls	r2, r2, #9
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	4608      	mov	r0, r1
 8009ba0:	f7f7 fbce 	bl	8001340 <BSP_SD_WriteBlocks_DMA>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 8009ba4:	3000      	adds	r0, #0
 8009ba6:	bf18      	it	ne
 8009ba8:	2001      	movne	r0, #1
 8009baa:	b003      	add	sp, #12
 8009bac:	f85d fb04 	ldr.w	pc, [sp], #4

08009bb0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009bb0:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009bb2:	4b12      	ldr	r3, [pc, #72]	; (8009bfc <SD_ioctl+0x4c>)
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	07db      	lsls	r3, r3, #31
{
 8009bb8:	b096      	sub	sp, #88	; 0x58
 8009bba:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009bbc:	d41c      	bmi.n	8009bf8 <SD_ioctl+0x48>
  
  switch (cmd)
 8009bbe:	2903      	cmp	r1, #3
 8009bc0:	d803      	bhi.n	8009bca <SD_ioctl+0x1a>
 8009bc2:	e8df f001 	tbb	[pc, r1]
 8009bc6:	050e      	.short	0x050e
 8009bc8:	1410      	.short	0x1410
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = BLOCK_SIZE;
    break;
  
  default:
    res = RES_PARERR;
 8009bca:	2004      	movs	r0, #4
  }
  
  return res;
}
 8009bcc:	b016      	add	sp, #88	; 0x58
 8009bce:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8009bd0:	4668      	mov	r0, sp
 8009bd2:	f7f7 faa3 	bl	800111c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.CardCapacity / BLOCK_SIZE;
 8009bd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009bd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009bda:	0a5b      	lsrs	r3, r3, #9
 8009bdc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009be0:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8009be2:	2000      	movs	r0, #0
 8009be4:	e7f2      	b.n	8009bcc <SD_ioctl+0x1c>
    *(WORD*)buff = BLOCK_SIZE;
 8009be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bea:	8013      	strh	r3, [r2, #0]
 8009bec:	e7f9      	b.n	8009be2 <SD_ioctl+0x32>
    *(DWORD*)buff = BLOCK_SIZE;
 8009bee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bf2:	6013      	str	r3, [r2, #0]
  DRESULT res = RES_ERROR;
 8009bf4:	2001      	movs	r0, #1
    break;
 8009bf6:	e7e9      	b.n	8009bcc <SD_ioctl+0x1c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009bf8:	2003      	movs	r0, #3
 8009bfa:	e7e7      	b.n	8009bcc <SD_ioctl+0x1c>
 8009bfc:	200002a0 	.word	0x200002a0

08009c00 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009c00:	3801      	subs	r0, #1
 8009c02:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8009c04:	4291      	cmp	r1, r2
 8009c06:	d100      	bne.n	8009c0a <mem_cpy+0xa>
		*d++ = *s++;
}
 8009c08:	4770      	bx	lr
		*d++ = *s++;
 8009c0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c0e:	f800 3f01 	strb.w	r3, [r0, #1]!
 8009c12:	e7f7      	b.n	8009c04 <mem_cpy+0x4>

08009c14 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009c14:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8009c16:	4290      	cmp	r0, r2
 8009c18:	d100      	bne.n	8009c1c <mem_set+0x8>
		*d++ = (BYTE)val;
}
 8009c1a:	4770      	bx	lr
		*d++ = (BYTE)val;
 8009c1c:	f800 1b01 	strb.w	r1, [r0], #1
 8009c20:	e7f9      	b.n	8009c16 <mem_set+0x2>
	...

08009c24 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c24:	4a17      	ldr	r2, [pc, #92]	; (8009c84 <chk_lock+0x60>)
 8009c26:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c28:	2400      	movs	r4, #0
 8009c2a:	4623      	mov	r3, r4
 8009c2c:	4616      	mov	r6, r2
		if (Files[i].fs) {	/* Existing entry */
 8009c2e:	6815      	ldr	r5, [r2, #0]
 8009c30:	b1c5      	cbz	r5, 8009c64 <chk_lock+0x40>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009c32:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
 8009c36:	42bd      	cmp	r5, r7
 8009c38:	d115      	bne.n	8009c66 <chk_lock+0x42>
 8009c3a:	6857      	ldr	r7, [r2, #4]
 8009c3c:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8009c40:	42af      	cmp	r7, r5
 8009c42:	d110      	bne.n	8009c66 <chk_lock+0x42>
				Files[i].clu == dp->sclust &&
 8009c44:	8917      	ldrh	r7, [r2, #8]
 8009c46:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8009c4a:	42af      	cmp	r7, r5
 8009c4c:	d10b      	bne.n	8009c66 <chk_lock+0x42>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009c4e:	b9b9      	cbnz	r1, 8009c80 <chk_lock+0x5c>
 8009c50:	220c      	movs	r2, #12
 8009c52:	fb02 6303 	mla	r3, r2, r3, r6
 8009c56:	895b      	ldrh	r3, [r3, #10]
 8009c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c5c:	bf14      	ite	ne
 8009c5e:	2000      	movne	r0, #0
 8009c60:	2010      	moveq	r0, #16
 8009c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8009c64:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c66:	3301      	adds	r3, #1
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	f102 020c 	add.w	r2, r2, #12
 8009c6e:	d1de      	bne.n	8009c2e <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009c70:	b10c      	cbz	r4, 8009c76 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009c72:	2000      	movs	r0, #0
 8009c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009c76:	2902      	cmp	r1, #2
 8009c78:	bf0c      	ite	eq
 8009c7a:	2000      	moveq	r0, #0
 8009c7c:	2012      	movne	r0, #18
 8009c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009c80:	2010      	movs	r0, #16
 8009c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c84:	20000844 	.word	0x20000844

08009c88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c8a:	4c20      	ldr	r4, [pc, #128]	; (8009d0c <inc_lock+0x84>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8009c8c:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009c90:	2300      	movs	r3, #0
 8009c92:	4622      	mov	r2, r4
		if (Files[i].fs == dp->fs &&
 8009c94:	6825      	ldr	r5, [r4, #0]
 8009c96:	42b5      	cmp	r5, r6
 8009c98:	d109      	bne.n	8009cae <inc_lock+0x26>
 8009c9a:	6867      	ldr	r7, [r4, #4]
 8009c9c:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8009ca0:	42af      	cmp	r7, r5
 8009ca2:	d104      	bne.n	8009cae <inc_lock+0x26>
			Files[i].clu == dp->sclust &&
 8009ca4:	8927      	ldrh	r7, [r4, #8]
 8009ca6:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8009caa:	42af      	cmp	r7, r5
 8009cac:	d022      	beq.n	8009cf4 <inc_lock+0x6c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009cae:	3301      	adds	r3, #1
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	f104 040c 	add.w	r4, r4, #12
 8009cb6:	d1ed      	bne.n	8009c94 <inc_lock+0xc>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009cb8:	6813      	ldr	r3, [r2, #0]
 8009cba:	b113      	cbz	r3, 8009cc2 <inc_lock+0x3a>
 8009cbc:	68d3      	ldr	r3, [r2, #12]
 8009cbe:	bb1b      	cbnz	r3, 8009d08 <inc_lock+0x80>
 8009cc0:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 8009cc2:	240c      	movs	r4, #12
 8009cc4:	435c      	muls	r4, r3
 8009cc6:	1915      	adds	r5, r2, r4
 8009cc8:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 8009cca:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 8009cce:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
 8009cd2:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 8009cd4:	2000      	movs	r0, #0
		Files[i].clu = dp->sclust;
 8009cd6:	606c      	str	r4, [r5, #4]
		Files[i].ctr = 0;
 8009cd8:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009cda:	b991      	cbnz	r1, 8009d02 <inc_lock+0x7a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009cdc:	210c      	movs	r1, #12
 8009cde:	fb01 2103 	mla	r1, r1, r3, r2
 8009ce2:	8949      	ldrh	r1, [r1, #10]
 8009ce4:	3101      	adds	r1, #1
 8009ce6:	b289      	uxth	r1, r1
 8009ce8:	200c      	movs	r0, #12
 8009cea:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 8009cee:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009cf0:	8151      	strh	r1, [r2, #10]
	return i + 1;
 8009cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009cf4:	2900      	cmp	r1, #0
 8009cf6:	d0f1      	beq.n	8009cdc <inc_lock+0x54>
 8009cf8:	210c      	movs	r1, #12
 8009cfa:	fb01 2103 	mla	r1, r1, r3, r2
 8009cfe:	8949      	ldrh	r1, [r1, #10]
 8009d00:	b911      	cbnz	r1, 8009d08 <inc_lock+0x80>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009d02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009d06:	e7ef      	b.n	8009ce8 <inc_lock+0x60>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009d08:	2000      	movs	r0, #0
 8009d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d0c:	20000844 	.word	0x20000844

08009d10 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009d10:	b530      	push	{r4, r5, lr}
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009d12:	1e45      	subs	r5, r0, #1
 8009d14:	2d01      	cmp	r5, #1
 8009d16:	d811      	bhi.n	8009d3c <dec_lock+0x2c>
		n = Files[i].ctr;
 8009d18:	490a      	ldr	r1, [pc, #40]	; (8009d44 <dec_lock+0x34>)
 8009d1a:	220c      	movs	r2, #12
 8009d1c:	fb02 1305 	mla	r3, r2, r5, r1
 8009d20:	895c      	ldrh	r4, [r3, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n) n--;					/* Decrement read mode open count */
 8009d22:	f424 7380 	bic.w	r3, r4, #256	; 0x100
 8009d26:	b298      	uxth	r0, r3
 8009d28:	b108      	cbz	r0, 8009d2e <dec_lock+0x1e>
 8009d2a:	3c01      	subs	r4, #1
 8009d2c:	b2a0      	uxth	r0, r4
		Files[i].ctr = n;
 8009d2e:	fb02 f305 	mul.w	r3, r2, r5
 8009d32:	18ca      	adds	r2, r1, r3
 8009d34:	8150      	strh	r0, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009d36:	b918      	cbnz	r0, 8009d40 <dec_lock+0x30>
 8009d38:	50c8      	str	r0, [r1, r3]
 8009d3a:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009d3c:	2002      	movs	r0, #2
 8009d3e:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
 8009d40:	2000      	movs	r0, #0
	}
	return res;
}
 8009d42:	bd30      	pop	{r4, r5, pc}
 8009d44:	20000844 	.word	0x20000844

08009d48 <clmt_clust>:
)
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009d48:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8009d4c:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009d50:	3304      	adds	r3, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8009d52:	0a49      	lsrs	r1, r1, #9
 8009d54:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8009d58:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009d5c:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 8009d5e:	b130      	cbz	r0, 8009d6e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009d60:	4281      	cmp	r1, r0
 8009d62:	d302      	bcc.n	8009d6a <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8009d64:	1a09      	subs	r1, r1, r0
 8009d66:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009d68:	e7f8      	b.n	8009d5c <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8009d6a:	6858      	ldr	r0, [r3, #4]
 8009d6c:	4408      	add	r0, r1
}
 8009d6e:	4770      	bx	lr

08009d70 <get_fileinfo>:
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
	if (dp->sect) {		/* Get SFN */
 8009d70:	f8d0 2210 	ldr.w	r2, [r0, #528]	; 0x210
{
 8009d74:	b570      	push	{r4, r5, r6, lr}
	p = fno->fname;
 8009d76:	f101 0309 	add.w	r3, r1, #9
	if (dp->sect) {		/* Get SFN */
 8009d7a:	b322      	cbz	r2, 8009dc6 <get_fileinfo+0x56>
		dir = dp->dir;
 8009d7c:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
		i = 0;
 8009d80:	2400      	movs	r4, #0
 8009d82:	1e55      	subs	r5, r2, #1
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
			if (c == ' ') continue;				/* Skip padding spaces */
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8009d84:	262e      	movs	r6, #46	; 0x2e
			c = (TCHAR)dir[i++];
 8009d86:	f815 0f01 	ldrb.w	r0, [r5, #1]!
			if (c == ' ') continue;				/* Skip padding spaces */
 8009d8a:	2820      	cmp	r0, #32
			c = (TCHAR)dir[i++];
 8009d8c:	f104 0401 	add.w	r4, r4, #1
			if (c == ' ') continue;				/* Skip padding spaces */
 8009d90:	d009      	beq.n	8009da6 <get_fileinfo+0x36>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009d92:	2805      	cmp	r0, #5
 8009d94:	bf08      	it	eq
 8009d96:	20e5      	moveq	r0, #229	; 0xe5
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8009d98:	2c09      	cmp	r4, #9
 8009d9a:	bf04      	itt	eq
 8009d9c:	701e      	strbeq	r6, [r3, #0]
 8009d9e:	3301      	addeq	r3, #1
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8009da0:	3301      	adds	r3, #1
 8009da2:	f803 0c01 	strb.w	r0, [r3, #-1]
		while (i < 11) {		/* Copy name body and extension */
 8009da6:	2c0b      	cmp	r4, #11
 8009da8:	d1ed      	bne.n	8009d86 <get_fileinfo+0x16>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8009daa:	7ad0      	ldrb	r0, [r2, #11]
 8009dac:	7208      	strb	r0, [r1, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8009dae:	69d0      	ldr	r0, [r2, #28]
 8009db0:	6008      	str	r0, [r1, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8009db2:	7e54      	ldrb	r4, [r2, #25]
 8009db4:	7e10      	ldrb	r0, [r2, #24]
 8009db6:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8009dba:	8088      	strh	r0, [r1, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8009dbc:	7dd0      	ldrb	r0, [r2, #23]
 8009dbe:	7d92      	ldrb	r2, [r2, #22]
 8009dc0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8009dc4:	80ca      	strh	r2, [r1, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	701a      	strb	r2, [r3, #0]
 8009dca:	bd70      	pop	{r4, r5, r6, pc}

08009dcc <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009dcc:	6802      	ldr	r2, [r0, #0]
{
 8009dce:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8009dd0:	b152      	cbz	r2, 8009de8 <get_ldnumber+0x1c>
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dda:	2c20      	cmp	r4, #32
 8009ddc:	d90c      	bls.n	8009df8 <get_ldnumber+0x2c>
 8009dde:	2c3a      	cmp	r4, #58	; 0x3a
 8009de0:	d1f8      	bne.n	8009dd4 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8009de2:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009de4:	428b      	cmp	r3, r1
 8009de6:	d002      	beq.n	8009dee <get_ldnumber+0x22>
	int vol = -1;
 8009de8:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8009dec:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009dee:	7812      	ldrb	r2, [r2, #0]
 8009df0:	2a30      	cmp	r2, #48	; 0x30
 8009df2:	d1f9      	bne.n	8009de8 <get_ldnumber+0x1c>
					*path = ++tt;
 8009df4:	3301      	adds	r3, #1
 8009df6:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8009df8:	2000      	movs	r0, #0
 8009dfa:	bd10      	pop	{r4, pc}

08009dfc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8009dfc:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8009dfe:	b190      	cbz	r0, 8009e26 <validate+0x2a>
 8009e00:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8009e04:	b17b      	cbz	r3, 8009e26 <validate+0x2a>
 8009e06:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 8009e0a:	b162      	cbz	r2, 8009e26 <validate+0x2a>
 8009e0c:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 8009e10:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 8009e14:	4291      	cmp	r1, r2
 8009e16:	d106      	bne.n	8009e26 <validate+0x2a>
 8009e18:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009e1c:	f7ff fe44 	bl	8009aa8 <disk_status>
 8009e20:	f010 0001 	ands.w	r0, r0, #1
 8009e24:	d000      	beq.n	8009e28 <validate+0x2c>
		return FR_INVALID_OBJECT;
 8009e26:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 8009e28:	bd08      	pop	{r3, pc}

08009e2a <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 8009e2a:	7eca      	ldrb	r2, [r1, #27]
 8009e2c:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 8009e2e:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8009e30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8009e34:	bf01      	itttt	eq
 8009e36:	7d48      	ldrbeq	r0, [r1, #21]
 8009e38:	7d0a      	ldrbeq	r2, [r1, #20]
 8009e3a:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8009e3e:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	4770      	bx	lr

08009e46 <sync_window.part.2>:
FRESULT sync_window (
 8009e46:	b570      	push	{r4, r5, r6, lr}
		wsect = fs->winsect;	/* Current sector number */
 8009e48:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
FRESULT sync_window (
 8009e4c:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8009e4e:	4601      	mov	r1, r0
 8009e50:	2301      	movs	r3, #1
 8009e52:	462a      	mov	r2, r5
 8009e54:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8009e58:	f7ff fe4e 	bl	8009af8 <disk_write>
 8009e5c:	b9d0      	cbnz	r0, 8009e94 <sync_window.part.2+0x4e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009e5e:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 8009e62:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
			fs->wflag = 0;
 8009e66:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009e6a:	1aeb      	subs	r3, r5, r3
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d301      	bcc.n	8009e74 <sync_window.part.2+0x2e>
	FRESULT res = FR_OK;
 8009e70:	2000      	movs	r0, #0
 8009e72:	bd70      	pop	{r4, r5, r6, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009e74:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 8009e78:	2e01      	cmp	r6, #1
 8009e7a:	d9f9      	bls.n	8009e70 <sync_window.part.2+0x2a>
					wsect += fs->fsize;
 8009e7c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009e80:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 8009e84:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009e86:	462a      	mov	r2, r5
 8009e88:	2301      	movs	r3, #1
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	f7ff fe34 	bl	8009af8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009e90:	3e01      	subs	r6, #1
 8009e92:	e7f1      	b.n	8009e78 <sync_window.part.2+0x32>
			res = FR_DISK_ERR;
 8009e94:	2001      	movs	r0, #1
}
 8009e96:	bd70      	pop	{r4, r5, r6, pc}

08009e98 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009e98:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8009e9c:	b10b      	cbz	r3, 8009ea2 <sync_window+0xa>
 8009e9e:	f7ff bfd2 	b.w	8009e46 <sync_window.part.2>
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	4770      	bx	lr

08009ea6 <sync_fs>:
{
 8009ea6:	b538      	push	{r3, r4, r5, lr}
 8009ea8:	4604      	mov	r4, r0
	res = sync_window(fs);
 8009eaa:	f7ff fff5 	bl	8009e98 <sync_window>
 8009eae:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d154      	bne.n	8009f5e <sync_fs+0xb8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009eb4:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8009eb8:	2b03      	cmp	r3, #3
 8009eba:	d147      	bne.n	8009f4c <sync_fs+0xa6>
 8009ebc:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d143      	bne.n	8009f4c <sync_fs+0xa6>
			mem_set(fs->win.d8, 0, SS(fs));
 8009ec4:	4601      	mov	r1, r0
 8009ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009eca:	4620      	mov	r0, r4
 8009ecc:	f7ff fea2 	bl	8009c14 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8009ed0:	2255      	movs	r2, #85	; 0x55
 8009ed2:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
 8009ed6:	22aa      	movs	r2, #170	; 0xaa
 8009ed8:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8009edc:	2252      	movs	r2, #82	; 0x52
 8009ede:	7022      	strb	r2, [r4, #0]
 8009ee0:	7062      	strb	r2, [r4, #1]
 8009ee2:	2261      	movs	r2, #97	; 0x61
 8009ee4:	70a2      	strb	r2, [r4, #2]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009ee6:	f884 21e7 	strb.w	r2, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009eea:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8009eee:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8009ef2:	2141      	movs	r1, #65	; 0x41
 8009ef4:	70e1      	strb	r1, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009ef6:	f884 11e6 	strb.w	r1, [r4, #486]	; 0x1e6
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009efa:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009efe:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 8009f02:	0c11      	lsrs	r1, r2, #16
 8009f04:	0e12      	lsrs	r2, r2, #24
 8009f06:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009f0a:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009f0e:	f884 11ea 	strb.w	r1, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009f12:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009f16:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 8009f1a:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 8009f1e:	0c11      	lsrs	r1, r2, #16
 8009f20:	0e12      	lsrs	r2, r2, #24
 8009f22:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 8009f26:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009f2a:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009f2e:	2072      	movs	r0, #114	; 0x72
			fs->winsect = fs->volbase + 1;
 8009f30:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009f32:	f884 01e4 	strb.w	r0, [r4, #484]	; 0x1e4
 8009f36:	f884 01e5 	strb.w	r0, [r4, #485]	; 0x1e5
			fs->winsect = fs->volbase + 1;
 8009f3a:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8009f3e:	4621      	mov	r1, r4
 8009f40:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8009f44:	f7ff fdd8 	bl	8009af8 <disk_write>
			fs->fsi_flag = 0;
 8009f48:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	4611      	mov	r1, r2
 8009f50:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8009f54:	f7ff fdde 	bl	8009b14 <disk_ioctl>
 8009f58:	3000      	adds	r0, #0
 8009f5a:	bf18      	it	ne
 8009f5c:	2001      	movne	r0, #1
}
 8009f5e:	bd38      	pop	{r3, r4, r5, pc}

08009f60 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009f60:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8009f64:	428b      	cmp	r3, r1
{
 8009f66:	b570      	push	{r4, r5, r6, lr}
 8009f68:	4606      	mov	r6, r0
 8009f6a:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8009f6c:	d013      	beq.n	8009f96 <move_window+0x36>
		res = sync_window(fs);		/* Write-back changes */
 8009f6e:	f7ff ff93 	bl	8009e98 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009f72:	4604      	mov	r4, r0
 8009f74:	b968      	cbnz	r0, 8009f92 <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009f76:	462a      	mov	r2, r5
 8009f78:	2301      	movs	r3, #1
 8009f7a:	4631      	mov	r1, r6
 8009f7c:	f896 0201 	ldrb.w	r0, [r6, #513]	; 0x201
 8009f80:	f7ff fdac 	bl	8009adc <disk_read>
 8009f84:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8009f86:	bf1c      	itt	ne
 8009f88:	f04f 35ff 	movne.w	r5, #4294967295
 8009f8c:	2401      	movne	r4, #1
			fs->winsect = sector;
 8009f8e:	f8c6 522c 	str.w	r5, [r6, #556]	; 0x22c
}
 8009f92:	4620      	mov	r0, r4
 8009f94:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8009f96:	2400      	movs	r4, #0
 8009f98:	e7fb      	b.n	8009f92 <move_window+0x32>
	...

08009f9c <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8009f9c:	2300      	movs	r3, #0
{
 8009f9e:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8009fa0:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 8009fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa8:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
{
 8009fac:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8009fae:	f7ff ffd7 	bl	8009f60 <move_window>
 8009fb2:	b9c0      	cbnz	r0, 8009fe6 <check_fs+0x4a>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8009fb4:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8009fb8:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8009fbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009fc0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d110      	bne.n	8009fea <check_fs+0x4e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8009fc8:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8009fcc:	4a08      	ldr	r2, [pc, #32]	; (8009ff0 <check_fs+0x54>)
 8009fce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d00a      	beq.n	8009fec <check_fs+0x50>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8009fd6:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 8009fda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 8009fde:	1a80      	subs	r0, r0, r2
 8009fe0:	bf18      	it	ne
 8009fe2:	2001      	movne	r0, #1
 8009fe4:	bd10      	pop	{r4, pc}
 8009fe6:	2003      	movs	r0, #3
 8009fe8:	bd10      	pop	{r4, pc}
		return 2;
 8009fea:	2002      	movs	r0, #2
}
 8009fec:	bd10      	pop	{r4, pc}
 8009fee:	bf00      	nop
 8009ff0:	00544146 	.word	0x00544146

08009ff4 <find_volume>:
{
 8009ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	6003      	str	r3, [r0, #0]
{
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	4607      	mov	r7, r0
	vol = get_ldnumber(path);
 8009ffe:	4608      	mov	r0, r1
{
 800a000:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800a002:	f7ff fee3 	bl	8009dcc <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800a006:	1e06      	subs	r6, r0, #0
 800a008:	f2c0 8123 	blt.w	800a252 <find_volume+0x25e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a00c:	4b95      	ldr	r3, [pc, #596]	; (800a264 <find_volume+0x270>)
 800a00e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a012:	2c00      	cmp	r4, #0
 800a014:	f000 811f 	beq.w	800a256 <find_volume+0x262>
	*rfs = fs;							/* Return pointer to the file system object */
 800a018:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a01a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800a01e:	b173      	cbz	r3, 800a03e <find_volume+0x4a>
		stat = disk_status(fs->drv);
 800a020:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 800a024:	f7ff fd40 	bl	8009aa8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a028:	07c7      	lsls	r7, r0, #31
 800a02a:	d408      	bmi.n	800a03e <find_volume+0x4a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800a02c:	2d00      	cmp	r5, #0
 800a02e:	f000 8114 	beq.w	800a25a <find_volume+0x266>
 800a032:	f010 0004 	ands.w	r0, r0, #4
 800a036:	d000      	beq.n	800a03a <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 800a038:	200a      	movs	r0, #10
}
 800a03a:	b005      	add	sp, #20
 800a03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800a03e:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a040:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800a042:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a046:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a04a:	f7ff fd37 	bl	8009abc <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800a04e:	07c1      	lsls	r1, r0, #31
 800a050:	f100 8105 	bmi.w	800a25e <find_volume+0x26a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800a054:	b10d      	cbz	r5, 800a05a <find_volume+0x66>
 800a056:	0742      	lsls	r2, r0, #29
 800a058:	d4ee      	bmi.n	800a038 <find_volume+0x44>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800a05a:	2100      	movs	r1, #0
 800a05c:	4620      	mov	r0, r4
 800a05e:	f7ff ff9d 	bl	8009f9c <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800a062:	2801      	cmp	r0, #1
 800a064:	f040 80dc 	bne.w	800a220 <find_volume+0x22c>
 800a068:	f504 71e3 	add.w	r1, r4, #454	; 0x1c6
 800a06c:	2200      	movs	r2, #0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800a06e:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 800a072:	b103      	cbz	r3, 800a076 <find_volume+0x82>
 800a074:	680b      	ldr	r3, [r1, #0]
 800a076:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800a07a:	3201      	adds	r2, #1
 800a07c:	2a04      	cmp	r2, #4
 800a07e:	f101 0110 	add.w	r1, r1, #16
 800a082:	d1f4      	bne.n	800a06e <find_volume+0x7a>
 800a084:	2600      	movs	r6, #0
			bsect = br[i];
 800a086:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800a08a:	2d00      	cmp	r5, #0
 800a08c:	f000 80bf 	beq.w	800a20e <find_volume+0x21a>
 800a090:	4629      	mov	r1, r5
 800a092:	4620      	mov	r0, r4
 800a094:	f7ff ff82 	bl	8009f9c <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800a098:	2800      	cmp	r0, #0
 800a09a:	f040 80b9 	bne.w	800a210 <find_volume+0x21c>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a09e:	7b22      	ldrb	r2, [r4, #12]
 800a0a0:	7ae3      	ldrb	r3, [r4, #11]
 800a0a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a0a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0aa:	f040 80bc 	bne.w	800a226 <find_volume+0x232>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800a0ae:	7de3      	ldrb	r3, [r4, #23]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800a0b0:	7c20      	ldrb	r0, [r4, #16]
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800a0b2:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800a0b4:	f884 0203 	strb.w	r0, [r4, #515]	; 0x203
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800a0b8:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800a0bc:	f100 33ff 	add.w	r3, r0, #4294967295
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800a0c0:	bf08      	it	eq
 800a0c2:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 800a0c4:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	f200 80ac 	bhi.w	800a226 <find_volume+0x232>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800a0ce:	7b66      	ldrb	r6, [r4, #13]
 800a0d0:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800a0d4:	2e00      	cmp	r6, #0
 800a0d6:	f000 80a6 	beq.w	800a226 <find_volume+0x232>
 800a0da:	1e73      	subs	r3, r6, #1
 800a0dc:	4233      	tst	r3, r6
 800a0de:	f040 80a2 	bne.w	800a226 <find_volume+0x232>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800a0e2:	7ca3      	ldrb	r3, [r4, #18]
 800a0e4:	7c67      	ldrb	r7, [r4, #17]
 800a0e6:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800a0ea:	073b      	lsls	r3, r7, #28
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800a0ec:	f8a4 7208 	strh.w	r7, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800a0f0:	f040 8099 	bne.w	800a226 <find_volume+0x232>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800a0f4:	7d22      	ldrb	r2, [r4, #20]
 800a0f6:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800a0f8:	f894 e00f 	ldrb.w	lr, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800a0fc:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800a100:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800a102:	bf08      	it	eq
 800a104:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800a106:	ea52 220e 	orrs.w	r2, r2, lr, lsl #8
 800a10a:	f000 808c 	beq.w	800a226 <find_volume+0x232>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800a10e:	fb01 fe00 	mul.w	lr, r1, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800a112:	eb02 1017 	add.w	r0, r2, r7, lsr #4
 800a116:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a118:	4283      	cmp	r3, r0
 800a11a:	f0c0 8084 	bcc.w	800a226 <find_volume+0x232>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800a11e:	1a1b      	subs	r3, r3, r0
 800a120:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800a124:	2b00      	cmp	r3, #0
 800a126:	d07e      	beq.n	800a226 <find_volume+0x232>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800a128:	f640 76f5 	movw	r6, #4085	; 0xff5
 800a12c:	42b3      	cmp	r3, r6
 800a12e:	d97e      	bls.n	800a22e <find_volume+0x23a>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800a130:	f64f 76f5 	movw	r6, #65525	; 0xfff5
 800a134:	42b3      	cmp	r3, r6
 800a136:	bf94      	ite	ls
 800a138:	2602      	movls	r6, #2
 800a13a:	2603      	movhi	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800a13c:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800a13e:	442a      	add	r2, r5
	fs->database = bsect + sysect;						/* Data start sector */
 800a140:	4428      	add	r0, r5
	if (fmt == FS_FAT32) {
 800a142:	2e03      	cmp	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800a144:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800a148:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800a14c:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800a150:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800a154:	d16d      	bne.n	800a232 <find_volume+0x23e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800a156:	2f00      	cmp	r7, #0
 800a158:	d165      	bne.n	800a226 <find_volume+0x232>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800a15a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a15c:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800a160:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800a162:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a166:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 800a16a:	d35c      	bcc.n	800a226 <find_volume+0x232>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800a16c:	f04f 33ff 	mov.w	r3, #4294967295
 800a170:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 800a174:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800a178:	2e03      	cmp	r6, #3
	fs->fsi_flag = 0x80;
 800a17a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a17e:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800a182:	d12d      	bne.n	800a1e0 <find_volume+0x1ec>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800a184:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 800a188:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a18c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a190:	2b01      	cmp	r3, #1
 800a192:	d125      	bne.n	800a1e0 <find_volume+0x1ec>
		&& move_window(fs, bsect + 1) == FR_OK)
 800a194:	1c69      	adds	r1, r5, #1
 800a196:	4620      	mov	r0, r4
 800a198:	f7ff fee2 	bl	8009f60 <move_window>
 800a19c:	bb00      	cbnz	r0, 800a1e0 <find_volume+0x1ec>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a19e:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 800a1a2:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 800a1a6:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a1aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a1ae:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d114      	bne.n	800a1e0 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800a1b6:	6822      	ldr	r2, [r4, #0]
 800a1b8:	4b2b      	ldr	r3, [pc, #172]	; (800a268 <find_volume+0x274>)
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d110      	bne.n	800a1e0 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800a1be:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 800a1c2:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 800a1c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a1ca:	3320      	adds	r3, #32
 800a1cc:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800a1ce:	bf01      	itttt	eq
 800a1d0:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 800a1d4:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800a1d8:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 800a1dc:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 800a1e0:	4a22      	ldr	r2, [pc, #136]	; (800a26c <find_volume+0x278>)
	fs->fs_type = fmt;	/* FAT sub-type */
 800a1e2:	f884 6200 	strb.w	r6, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800a1e6:	8813      	ldrh	r3, [r2, #0]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	8013      	strh	r3, [r2, #0]
 800a1ee:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a1f2:	4b1f      	ldr	r3, [pc, #124]	; (800a270 <find_volume+0x27c>)
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	4294      	cmp	r4, r2
 800a1f8:	bf04      	itt	eq
 800a1fa:	2200      	moveq	r2, #0
 800a1fc:	601a      	streq	r2, [r3, #0]
 800a1fe:	68da      	ldr	r2, [r3, #12]
 800a200:	4294      	cmp	r4, r2
 800a202:	f04f 0000 	mov.w	r0, #0
 800a206:	f47f af18 	bne.w	800a03a <find_volume+0x46>
 800a20a:	60d8      	str	r0, [r3, #12]
 800a20c:	e715      	b.n	800a03a <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800a20e:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800a210:	3601      	adds	r6, #1
 800a212:	2e04      	cmp	r6, #4
 800a214:	f47f af37 	bne.w	800a086 <find_volume+0x92>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a218:	2803      	cmp	r0, #3
 800a21a:	d104      	bne.n	800a226 <find_volume+0x232>
 800a21c:	2001      	movs	r0, #1
 800a21e:	e70c      	b.n	800a03a <find_volume+0x46>
 800a220:	2803      	cmp	r0, #3
 800a222:	d0fb      	beq.n	800a21c <find_volume+0x228>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800a224:	b108      	cbz	r0, 800a22a <find_volume+0x236>
 800a226:	200d      	movs	r0, #13
 800a228:	e707      	b.n	800a03a <find_volume+0x46>
	bsect = 0;
 800a22a:	4605      	mov	r5, r0
 800a22c:	e737      	b.n	800a09e <find_volume+0xaa>
	fmt = FS_FAT12;
 800a22e:	2601      	movs	r6, #1
 800a230:	e784      	b.n	800a13c <find_volume+0x148>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800a232:	2f00      	cmp	r7, #0
 800a234:	d0f7      	beq.n	800a226 <find_volume+0x232>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800a236:	4472      	add	r2, lr
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a238:	2e02      	cmp	r6, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800a23a:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 800a23e:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a242:	bf1b      	ittet	ne
 800a244:	18d2      	addne	r2, r2, r3
 800a246:	f003 0301 	andne.w	r3, r3, #1
 800a24a:	4613      	moveq	r3, r2
 800a24c:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 800a250:	e787      	b.n	800a162 <find_volume+0x16e>
	if (vol < 0) return FR_INVALID_DRIVE;
 800a252:	200b      	movs	r0, #11
 800a254:	e6f1      	b.n	800a03a <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a256:	200c      	movs	r0, #12
 800a258:	e6ef      	b.n	800a03a <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 800a25a:	4628      	mov	r0, r5
 800a25c:	e6ed      	b.n	800a03a <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a25e:	2003      	movs	r0, #3
 800a260:	e6eb      	b.n	800a03a <find_volume+0x46>
 800a262:	bf00      	nop
 800a264:	20000840 	.word	0x20000840
 800a268:	41615252 	.word	0x41615252
 800a26c:	2000085c 	.word	0x2000085c
 800a270:	20000844 	.word	0x20000844

0800a274 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a274:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
	clst -= 2;
 800a278:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a27a:	3b02      	subs	r3, #2
 800a27c:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 800a27e:	bf3d      	ittte	cc
 800a280:	f890 3202 	ldrbcc.w	r3, [r0, #514]	; 0x202
 800a284:	f8d0 0228 	ldrcc.w	r0, [r0, #552]	; 0x228
 800a288:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a28c:	2000      	movcs	r0, #0
}
 800a28e:	4770      	bx	lr

0800a290 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a290:	2901      	cmp	r1, #1
{
 800a292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a294:	4606      	mov	r6, r0
 800a296:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a298:	d959      	bls.n	800a34e <get_fat+0xbe>
 800a29a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a29e:	4299      	cmp	r1, r3
 800a2a0:	d255      	bcs.n	800a34e <get_fat+0xbe>
		switch (fs->fs_type) {
 800a2a2:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d027      	beq.n	800a2fa <get_fat+0x6a>
 800a2aa:	2b03      	cmp	r3, #3
 800a2ac:	d036      	beq.n	800a31c <get_fat+0x8c>
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d14d      	bne.n	800a34e <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 800a2b2:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2b6:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800a2ba:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 800a2be:	f7ff fe4f 	bl	8009f60 <move_window>
 800a2c2:	b110      	cbz	r0, 800a2ca <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2ca:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 800a2ce:	1c67      	adds	r7, r4, #1
 800a2d0:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2d4:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800a2d8:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 800a2da:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2dc:	f7ff fe40 	bl	8009f60 <move_window>
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	d1ef      	bne.n	800a2c4 <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800a2e4:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a2e8:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800a2ea:	5df0      	ldrb	r0, [r6, r7]
 800a2ec:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a2f0:	bf4c      	ite	mi
 800a2f2:	0900      	lsrmi	r0, r0, #4
 800a2f4:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800a2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a2fa:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800a2fe:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800a302:	f7ff fe2d 	bl	8009f60 <move_window>
 800a306:	2800      	cmp	r0, #0
 800a308:	d1dc      	bne.n	800a2c4 <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a30a:	006d      	lsls	r5, r5, #1
 800a30c:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 800a310:	1973      	adds	r3, r6, r5
 800a312:	5d70      	ldrb	r0, [r6, r5]
 800a314:	785b      	ldrb	r3, [r3, #1]
 800a316:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800a31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a31c:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800a320:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800a324:	f7ff fe1c 	bl	8009f60 <move_window>
 800a328:	2800      	cmp	r0, #0
 800a32a:	d1cb      	bne.n	800a2c4 <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a32c:	00ad      	lsls	r5, r5, #2
 800a32e:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 800a332:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800a334:	7898      	ldrb	r0, [r3, #2]
 800a336:	78da      	ldrb	r2, [r3, #3]
 800a338:	785b      	ldrb	r3, [r3, #1]
 800a33a:	0400      	lsls	r0, r0, #16
 800a33c:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800a340:	5d72      	ldrb	r2, [r6, r5]
 800a342:	4310      	orrs	r0, r2
 800a344:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800a348:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800a34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 800a34e:	2001      	movs	r0, #1
}
 800a350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a352 <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a352:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
{
 800a356:	b570      	push	{r4, r5, r6, lr}
 800a358:	4604      	mov	r4, r0
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a35a:	2a01      	cmp	r2, #1
{
 800a35c:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 800a35e:	f8a4 1206 	strh.w	r1, [r4, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a362:	d101      	bne.n	800a368 <dir_sdi+0x16>
		return FR_INT_ERR;
 800a364:	2002      	movs	r0, #2
 800a366:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a368:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 800a36c:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 800a370:	428a      	cmp	r2, r1
 800a372:	d2f7      	bcs.n	800a364 <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a374:	b9f2      	cbnz	r2, 800a3b4 <dir_sdi+0x62>
 800a376:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 800a37a:	2903      	cmp	r1, #3
 800a37c:	d102      	bne.n	800a384 <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 800a37e:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a382:	b9c1      	cbnz	r1, 800a3b6 <dir_sdi+0x64>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a384:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 800a388:	428d      	cmp	r5, r1
 800a38a:	d2eb      	bcs.n	800a364 <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 800a38c:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 800a390:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800a394:	2800      	cmp	r0, #0
 800a396:	d0e5      	beq.n	800a364 <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a398:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a39c:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a3a0:	f005 050f 	and.w	r5, r5, #15
 800a3a4:	eb03 1545 	add.w	r5, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a3a8:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a3ac:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 800a3b0:	2000      	movs	r0, #0
 800a3b2:	bd70      	pop	{r4, r5, r6, pc}
 800a3b4:	4611      	mov	r1, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a3b6:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
		while (idx >= ic) {	/* Follow cluster chain */
 800a3ba:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a3bc:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 800a3be:	42b5      	cmp	r5, r6
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
		while (idx >= ic) {	/* Follow cluster chain */
 800a3c6:	d202      	bcs.n	800a3ce <dir_sdi+0x7c>
		sect = clust2sect(dp->fs, clst);
 800a3c8:	f7ff ff54 	bl	800a274 <clust2sect>
 800a3cc:	e7e0      	b.n	800a390 <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a3ce:	f7ff ff5f 	bl	800a290 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a3d2:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a3d4:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a3d6:	d009      	beq.n	800a3ec <dir_sdi+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a3d8:	2801      	cmp	r0, #1
 800a3da:	d9c3      	bls.n	800a364 <dir_sdi+0x12>
 800a3dc:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800a3e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3e4:	4298      	cmp	r0, r3
 800a3e6:	d2bd      	bcs.n	800a364 <dir_sdi+0x12>
			idx -= ic;
 800a3e8:	1bad      	subs	r5, r5, r6
 800a3ea:	e7e8      	b.n	800a3be <dir_sdi+0x6c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a3ec:	2001      	movs	r0, #1
}
 800a3ee:	bd70      	pop	{r4, r5, r6, pc}

0800a3f0 <dir_remove>:
{
 800a3f0:	b510      	push	{r4, lr}
	res = dir_sdi(dp, dp->index);
 800a3f2:	f8b0 1206 	ldrh.w	r1, [r0, #518]	; 0x206
{
 800a3f6:	4604      	mov	r4, r0
	res = dir_sdi(dp, dp->index);
 800a3f8:	f7ff ffab 	bl	800a352 <dir_sdi>
	if (res == FR_OK) {
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	b9b0      	cbnz	r0, 800a42e <dir_remove+0x3e>
		res = move_window(dp->fs, dp->sect);
 800a400:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 800a404:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a408:	f7ff fdaa 	bl	8009f60 <move_window>
		if (res == FR_OK) {
 800a40c:	4603      	mov	r3, r0
 800a40e:	b970      	cbnz	r0, 800a42e <dir_remove+0x3e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 800a410:	4601      	mov	r1, r0
 800a412:	2220      	movs	r2, #32
 800a414:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 800a418:	f7ff fbfc 	bl	8009c14 <mem_set>
			*dp->dir = DDEM;
 800a41c:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 800a420:	21e5      	movs	r1, #229	; 0xe5
 800a422:	7011      	strb	r1, [r2, #0]
			dp->fs->wflag = 1;
 800a424:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800a428:	2101      	movs	r1, #1
 800a42a:	f882 1204 	strb.w	r1, [r2, #516]	; 0x204
}
 800a42e:	4618      	mov	r0, r3
 800a430:	bd10      	pop	{r4, pc}

0800a432 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a432:	2901      	cmp	r1, #1
{
 800a434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a438:	4605      	mov	r5, r0
 800a43a:	460c      	mov	r4, r1
 800a43c:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a43e:	d96f      	bls.n	800a520 <put_fat+0xee>
 800a440:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a444:	4299      	cmp	r1, r3
 800a446:	d26b      	bcs.n	800a520 <put_fat+0xee>
		switch (fs->fs_type) {
 800a448:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	d03d      	beq.n	800a4cc <put_fat+0x9a>
 800a450:	2b03      	cmp	r3, #3
 800a452:	d04b      	beq.n	800a4ec <put_fat+0xba>
 800a454:	2b01      	cmp	r3, #1
 800a456:	d163      	bne.n	800a520 <put_fat+0xee>
			bc = (UINT)clst; bc += bc / 2;
 800a458:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a45c:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800a460:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800a464:	f7ff fd7c 	bl	8009f60 <move_window>
			if (res != FR_OK) break;
 800a468:	2800      	cmp	r0, #0
 800a46a:	d15a      	bne.n	800a522 <put_fat+0xf0>
			p = &fs->win.d8[bc++ % SS(fs)];
 800a46c:	f107 0801 	add.w	r8, r7, #1
 800a470:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a474:	f014 0401 	ands.w	r4, r4, #1
 800a478:	bf1f      	itttt	ne
 800a47a:	5deb      	ldrbne	r3, [r5, r7]
 800a47c:	f003 020f 	andne.w	r2, r3, #15
 800a480:	0133      	lslne	r3, r6, #4
 800a482:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 800a486:	bf14      	ite	ne
 800a488:	4313      	orrne	r3, r2
 800a48a:	b2f3      	uxtbeq	r3, r6
 800a48c:	55eb      	strb	r3, [r5, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a48e:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
			fs->wflag = 1;
 800a492:	2301      	movs	r3, #1
 800a494:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a498:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800a49c:	4628      	mov	r0, r5
 800a49e:	f7ff fd5f 	bl	8009f60 <move_window>
			if (res != FR_OK) break;
 800a4a2:	bbf0      	cbnz	r0, 800a522 <put_fat+0xf0>
			p = &fs->win.d8[bc % SS(fs)];
 800a4a4:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a4a8:	b144      	cbz	r4, 800a4bc <put_fat+0x8a>
 800a4aa:	f3c6 1207 	ubfx	r2, r6, #4, #8
 800a4ae:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 800a4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a4bc:	f815 2008 	ldrb.w	r2, [r5, r8]
 800a4c0:	f3c6 2603 	ubfx	r6, r6, #8, #4
 800a4c4:	f022 020f 	bic.w	r2, r2, #15
 800a4c8:	4332      	orrs	r2, r6
 800a4ca:	e7f0      	b.n	800a4ae <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a4cc:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800a4d0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800a4d4:	f7ff fd44 	bl	8009f60 <move_window>
			if (res != FR_OK) break;
 800a4d8:	bb18      	cbnz	r0, 800a522 <put_fat+0xf0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a4da:	0064      	lsls	r4, r4, #1
 800a4dc:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 800a4e0:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800a4e4:	552e      	strb	r6, [r5, r4]
 800a4e6:	442c      	add	r4, r5
 800a4e8:	7062      	strb	r2, [r4, #1]
 800a4ea:	e7e2      	b.n	800a4b2 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a4ec:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800a4f0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800a4f4:	f7ff fd34 	bl	8009f60 <move_window>
			if (res != FR_OK) break;
 800a4f8:	b998      	cbnz	r0, 800a522 <put_fat+0xf0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a4fa:	00a4      	lsls	r4, r4, #2
 800a4fc:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800a500:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 800a502:	78cb      	ldrb	r3, [r1, #3]
 800a504:	061b      	lsls	r3, r3, #24
 800a506:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a50a:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 800a50e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800a512:	552a      	strb	r2, [r5, r4]
 800a514:	704b      	strb	r3, [r1, #1]
 800a516:	0c13      	lsrs	r3, r2, #16
 800a518:	0e12      	lsrs	r2, r2, #24
 800a51a:	708b      	strb	r3, [r1, #2]
 800a51c:	70ca      	strb	r2, [r1, #3]
 800a51e:	e7c8      	b.n	800a4b2 <put_fat+0x80>
			res = FR_INT_ERR;
 800a520:	2002      	movs	r0, #2
}
 800a522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a526 <create_chain>:
{
 800a526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a528:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 800a52a:	460f      	mov	r7, r1
 800a52c:	b989      	cbnz	r1, 800a552 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 800a52e:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a532:	b1fe      	cbz	r6, 800a574 <create_chain+0x4e>
 800a534:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a538:	429e      	cmp	r6, r3
 800a53a:	bf28      	it	cs
 800a53c:	2601      	movcs	r6, #1
 800a53e:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a540:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		ncl++;							/* Next cluster */
 800a544:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a546:	429c      	cmp	r4, r3
 800a548:	d317      	bcc.n	800a57a <create_chain+0x54>
			if (ncl > scl) return 0;	/* No free cluster */
 800a54a:	2e01      	cmp	r6, #1
 800a54c:	d814      	bhi.n	800a578 <create_chain+0x52>
 800a54e:	2400      	movs	r4, #0
 800a550:	e008      	b.n	800a564 <create_chain+0x3e>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a552:	f7ff fe9d 	bl	800a290 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 800a556:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a558:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 800a55a:	d93b      	bls.n	800a5d4 <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a55c:	3001      	adds	r0, #1
 800a55e:	d103      	bne.n	800a568 <create_chain+0x42>
			ncl = 2;
 800a560:	f04f 34ff 	mov.w	r4, #4294967295
}
 800a564:	4620      	mov	r0, r4
 800a566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a568:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800a56c:	429c      	cmp	r4, r3
 800a56e:	d3f9      	bcc.n	800a564 <create_chain+0x3e>
 800a570:	463e      	mov	r6, r7
 800a572:	e7e4      	b.n	800a53e <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a574:	2601      	movs	r6, #1
 800a576:	e7e2      	b.n	800a53e <create_chain+0x18>
			ncl = 2;
 800a578:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a57a:	4621      	mov	r1, r4
 800a57c:	4628      	mov	r0, r5
 800a57e:	f7ff fe87 	bl	800a290 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 800a582:	b130      	cbz	r0, 800a592 <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a584:	1c41      	adds	r1, r0, #1
 800a586:	d0eb      	beq.n	800a560 <create_chain+0x3a>
 800a588:	2801      	cmp	r0, #1
 800a58a:	d023      	beq.n	800a5d4 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 800a58c:	42b4      	cmp	r4, r6
 800a58e:	d1d7      	bne.n	800a540 <create_chain+0x1a>
 800a590:	e7dd      	b.n	800a54e <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a592:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a596:	4621      	mov	r1, r4
 800a598:	4628      	mov	r0, r5
 800a59a:	f7ff ff4a 	bl	800a432 <put_fat>
	if (res == FR_OK && clst != 0) {
 800a59e:	b9b8      	cbnz	r0, 800a5d0 <create_chain+0xaa>
 800a5a0:	b97f      	cbnz	r7, 800a5c2 <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 800a5a2:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 800a5a6:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800a5aa:	1c5a      	adds	r2, r3, #1
 800a5ac:	d0da      	beq.n	800a564 <create_chain+0x3e>
			fs->free_clust--;
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 800a5b4:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 800a5b8:	f043 0301 	orr.w	r3, r3, #1
 800a5bc:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 800a5c0:	e7d0      	b.n	800a564 <create_chain+0x3e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a5c2:	4622      	mov	r2, r4
 800a5c4:	4639      	mov	r1, r7
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	f7ff ff33 	bl	800a432 <put_fat>
	if (res == FR_OK) {
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d0e8      	beq.n	800a5a2 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a5d0:	2801      	cmp	r0, #1
 800a5d2:	d0c5      	beq.n	800a560 <create_chain+0x3a>
 800a5d4:	2401      	movs	r4, #1
 800a5d6:	e7c5      	b.n	800a564 <create_chain+0x3e>

0800a5d8 <dir_next>:
{
 800a5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 800a5dc:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 800a5e0:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a5e2:	b2b3      	uxth	r3, r6
{
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a5e8:	b913      	cbnz	r3, 800a5f0 <dir_next+0x18>
		return FR_NO_FILE;
 800a5ea:	2004      	movs	r0, #4
 800a5ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a5f0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d0f8      	beq.n	800a5ea <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800a5f8:	f016 080f 	ands.w	r8, r6, #15
 800a5fc:	d10b      	bne.n	800a616 <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 800a5fe:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 800a602:	3301      	adds	r3, #1
 800a604:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 800a608:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		if (!dp->clust) {		/* Static table */
 800a60c:	b971      	cbnz	r1, 800a62c <dir_next+0x54>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800a60e:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 800a612:	429e      	cmp	r6, r3
 800a614:	d2e9      	bcs.n	800a5ea <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a616:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->index = (WORD)i;	/* Current index */
 800a61a:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a61e:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800a622:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 800a626:	2000      	movs	r0, #0
 800a628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800a62c:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 800a630:	3f01      	subs	r7, #1
 800a632:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 800a636:	d1ee      	bne.n	800a616 <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a638:	f7ff fe2a 	bl	800a290 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 800a63c:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a63e:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 800a640:	d802      	bhi.n	800a648 <dir_next+0x70>
 800a642:	2002      	movs	r0, #2
 800a644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a648:	1c42      	adds	r2, r0, #1
 800a64a:	d102      	bne.n	800a652 <dir_next+0x7a>
 800a64c:	2001      	movs	r0, #1
 800a64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800a652:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a656:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a65a:	429d      	cmp	r5, r3
 800a65c:	d32f      	bcc.n	800a6be <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800a65e:	f1b9 0f00 	cmp.w	r9, #0
 800a662:	d0c2      	beq.n	800a5ea <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800a664:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 800a668:	f7ff ff5d 	bl	800a526 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a66c:	4605      	mov	r5, r0
 800a66e:	2800      	cmp	r0, #0
 800a670:	d03e      	beq.n	800a6f0 <dir_next+0x118>
					if (clst == 1) return FR_INT_ERR;
 800a672:	2801      	cmp	r0, #1
 800a674:	d0e5      	beq.n	800a642 <dir_next+0x6a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a676:	1c43      	adds	r3, r0, #1
 800a678:	d0e8      	beq.n	800a64c <dir_next+0x74>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800a67a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a67e:	f7ff fc0b 	bl	8009e98 <sync_window>
 800a682:	4601      	mov	r1, r0
 800a684:	2800      	cmp	r0, #0
 800a686:	d1e1      	bne.n	800a64c <dir_next+0x74>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800a688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a68c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a690:	f7ff fac0 	bl	8009c14 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a694:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800a698:	4629      	mov	r1, r5
 800a69a:	4610      	mov	r0, r2
 800a69c:	f7ff fdea 	bl	800a274 <clust2sect>
						dp->fs->wflag = 1;
 800a6a0:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a6a4:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a6a8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a6ac:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 800a6b0:	429f      	cmp	r7, r3
 800a6b2:	d30e      	bcc.n	800a6d2 <dir_next+0xfa>
					dp->fs->winsect -= c;						/* Rewind window offset */
 800a6b4:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 800a6b8:	1bdf      	subs	r7, r3, r7
 800a6ba:	f8c0 722c 	str.w	r7, [r0, #556]	; 0x22c
				dp->clust = clst;				/* Initialize data for new cluster */
 800a6be:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800a6c2:	4629      	mov	r1, r5
 800a6c4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a6c8:	f7ff fdd4 	bl	800a274 <clust2sect>
 800a6cc:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 800a6d0:	e7a1      	b.n	800a616 <dir_next+0x3e>
						dp->fs->wflag = 1;
 800a6d2:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
 800a6d6:	f7ff fbb6 	bl	8009e46 <sync_window.part.2>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	d1b6      	bne.n	800a64c <dir_next+0x74>
						dp->fs->winsect++;
 800a6de:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 800a6e2:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a6ec:	3701      	adds	r7, #1
 800a6ee:	e7db      	b.n	800a6a8 <dir_next+0xd0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a6f0:	2007      	movs	r0, #7
}
 800a6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800a6f8 <follow_path>:
{
 800a6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800a6fc:	780b      	ldrb	r3, [r1, #0]
 800a6fe:	2b2f      	cmp	r3, #47	; 0x2f
{
 800a700:	4604      	mov	r4, r0
 800a702:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800a704:	d001      	beq.n	800a70a <follow_path+0x12>
 800a706:	2b5c      	cmp	r3, #92	; 0x5c
 800a708:	d100      	bne.n	800a70c <follow_path+0x14>
		path++;
 800a70a:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 800a70c:	2600      	movs	r6, #0
 800a70e:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a712:	782b      	ldrb	r3, [r5, #0]
 800a714:	2b1f      	cmp	r3, #31
 800a716:	d936      	bls.n	800a786 <follow_path+0x8e>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a718:	4e5f      	ldr	r6, [pc, #380]	; (800a898 <follow_path+0x1a0>)
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800a71a:	782b      	ldrb	r3, [r5, #0]
 800a71c:	2b2f      	cmp	r3, #47	; 0x2f
 800a71e:	46a8      	mov	r8, r5
 800a720:	f105 0501 	add.w	r5, r5, #1
 800a724:	d0f9      	beq.n	800a71a <follow_path+0x22>
 800a726:	2b5c      	cmp	r3, #92	; 0x5c
 800a728:	d0f7      	beq.n	800a71a <follow_path+0x22>
	sfn = dp->fn;
 800a72a:	f8d4 7218 	ldr.w	r7, [r4, #536]	; 0x218
	mem_set(sfn, ' ', 11);
 800a72e:	220b      	movs	r2, #11
 800a730:	2120      	movs	r1, #32
 800a732:	4638      	mov	r0, r7
 800a734:	f7ff fa6e 	bl	8009c14 <mem_set>
	si = i = b = 0; ni = 8;
 800a738:	f04f 0e00 	mov.w	lr, #0
 800a73c:	f108 39ff 	add.w	r9, r8, #4294967295
 800a740:	46f4      	mov	ip, lr
 800a742:	2108      	movs	r1, #8
 800a744:	4672      	mov	r2, lr
		c = (BYTE)p[si++];
 800a746:	f819 3f01 	ldrb.w	r3, [r9, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800a74a:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 800a74c:	f10c 0c01 	add.w	ip, ip, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800a750:	d928      	bls.n	800a7a4 <follow_path+0xac>
 800a752:	2b2f      	cmp	r3, #47	; 0x2f
 800a754:	d026      	beq.n	800a7a4 <follow_path+0xac>
 800a756:	2b5c      	cmp	r3, #92	; 0x5c
 800a758:	d024      	beq.n	800a7a4 <follow_path+0xac>
		if (c == '.' || i >= ni) {
 800a75a:	2b2e      	cmp	r3, #46	; 0x2e
 800a75c:	f000 8085 	beq.w	800a86a <follow_path+0x172>
 800a760:	4571      	cmp	r1, lr
 800a762:	d90d      	bls.n	800a780 <follow_path+0x88>
		if (c >= 0x80) {				/* Extended character? */
 800a764:	0618      	lsls	r0, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a766:	bf48      	it	mi
 800a768:	3b80      	submi	r3, #128	; 0x80
 800a76a:	4d4c      	ldr	r5, [pc, #304]	; (800a89c <follow_path+0x1a4>)
 800a76c:	bf44      	itt	mi
 800a76e:	5cf3      	ldrbmi	r3, [r6, r3]
			b |= 3;						/* Eliminate NT flag */
 800a770:	f042 0203 	orrmi.w	r2, r2, #3
	while (*str && *str != chr) str++;
 800a774:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800a778:	2800      	cmp	r0, #0
 800a77a:	d07d      	beq.n	800a878 <follow_path+0x180>
 800a77c:	4283      	cmp	r3, r0
 800a77e:	d1f9      	bne.n	800a774 <follow_path+0x7c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800a780:	2006      	movs	r0, #6
	return res;
 800a782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, 0);
 800a786:	4631      	mov	r1, r6
 800a788:	4620      	mov	r0, r4
 800a78a:	f7ff fde2 	bl	800a352 <dir_sdi>
		dp->dir = 0;
 800a78e:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
 800a792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				b |= 2;
 800a796:	f042 0202 	orr.w	r2, r2, #2
			sfn[i++] = c;
 800a79a:	f807 300e 	strb.w	r3, [r7, lr]
 800a79e:	f10e 0e01 	add.w	lr, lr, #1
 800a7a2:	e7d0      	b.n	800a746 <follow_path+0x4e>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800a7a4:	2b21      	cmp	r3, #33	; 0x21
	*path = &p[si];						/* Return pointer to the next segment */
 800a7a6:	eb08 050c 	add.w	r5, r8, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800a7aa:	bf34      	ite	cc
 800a7ac:	2304      	movcc	r3, #4
 800a7ae:	2300      	movcs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800a7b0:	f1be 0f00 	cmp.w	lr, #0
 800a7b4:	d0e4      	beq.n	800a780 <follow_path+0x88>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800a7b6:	7838      	ldrb	r0, [r7, #0]
 800a7b8:	28e5      	cmp	r0, #229	; 0xe5
 800a7ba:	bf04      	itt	eq
 800a7bc:	2005      	moveq	r0, #5
 800a7be:	7038      	strbeq	r0, [r7, #0]
	if (ni == 8) b <<= 2;
 800a7c0:	2908      	cmp	r1, #8
 800a7c2:	bf04      	itt	eq
 800a7c4:	0092      	lsleq	r2, r2, #2
 800a7c6:	b2d2      	uxtbeq	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800a7c8:	f002 0103 	and.w	r1, r2, #3
 800a7cc:	2901      	cmp	r1, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800a7ce:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800a7d2:	bf08      	it	eq
 800a7d4:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800a7d8:	2a04      	cmp	r2, #4
 800a7da:	bf08      	it	eq
 800a7dc:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800a7e0:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f7ff fdb4 	bl	800a352 <dir_sdi>
	if (res != FR_OK) return res;
 800a7ea:	b9f8      	cbnz	r0, 800a82c <follow_path+0x134>
		res = move_window(dp->fs, dp->sect);
 800a7ec:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 800a7f0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a7f4:	f7ff fbb4 	bl	8009f60 <move_window>
		if (res != FR_OK) break;
 800a7f8:	b9c0      	cbnz	r0, 800a82c <follow_path+0x134>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800a7fa:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a7fe:	7813      	ldrb	r3, [r2, #0]
 800a800:	b19b      	cbz	r3, 800a82a <follow_path+0x132>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800a802:	7ad3      	ldrb	r3, [r2, #11]
 800a804:	0719      	lsls	r1, r3, #28
 800a806:	d40b      	bmi.n	800a820 <follow_path+0x128>
 800a808:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800a80c:	f103 0e0b 	add.w	lr, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800a810:	4573      	cmp	r3, lr
 800a812:	d00b      	beq.n	800a82c <follow_path+0x134>
 800a814:	f812 7b01 	ldrb.w	r7, [r2], #1
 800a818:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a81c:	428f      	cmp	r7, r1
 800a81e:	d0f7      	beq.n	800a810 <follow_path+0x118>
		res = dir_next(dp, 0);		/* Next entry */
 800a820:	2100      	movs	r1, #0
 800a822:	4620      	mov	r0, r4
 800a824:	f7ff fed8 	bl	800a5d8 <dir_next>
 800a828:	e7df      	b.n	800a7ea <follow_path+0xf2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a82a:	2004      	movs	r0, #4
			ns = dp->fn[NSFLAG];
 800a82c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800a830:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a832:	b138      	cbz	r0, 800a844 <follow_path+0x14c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a834:	2804      	cmp	r0, #4
 800a836:	d12c      	bne.n	800a892 <follow_path+0x19a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a838:	f013 0f04 	tst.w	r3, #4
 800a83c:	bf08      	it	eq
 800a83e:	2005      	moveq	r0, #5
 800a840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a844:	075a      	lsls	r2, r3, #29
 800a846:	d424      	bmi.n	800a892 <follow_path+0x19a>
			dir = dp->dir;						/* Follow the sub-directory */
 800a848:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800a84c:	7acb      	ldrb	r3, [r1, #11]
 800a84e:	06db      	lsls	r3, r3, #27
 800a850:	d508      	bpl.n	800a864 <follow_path+0x16c>
			dp->sclust = ld_clust(dp->fs, dir);
 800a852:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800a856:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800a85a:	f7ff fae6 	bl	8009e2a <ld_clust.isra.0>
 800a85e:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a862:	e75a      	b.n	800a71a <follow_path+0x22>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a864:	2005      	movs	r0, #5
 800a866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800a86a:	2908      	cmp	r1, #8
 800a86c:	d188      	bne.n	800a780 <follow_path+0x88>
			b <<= 2; continue;
 800a86e:	0092      	lsls	r2, r2, #2
			i = 8; ni = 11;
 800a870:	468e      	mov	lr, r1
			b <<= 2; continue;
 800a872:	b2d2      	uxtb	r2, r2
			i = 8; ni = 11;
 800a874:	210b      	movs	r1, #11
 800a876:	e766      	b.n	800a746 <follow_path+0x4e>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800a878:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 800a87c:	2819      	cmp	r0, #25
 800a87e:	d98a      	bls.n	800a796 <follow_path+0x9e>
				if (IsLower(c)) {		/* ASCII small capital? */
 800a880:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 800a884:	2819      	cmp	r0, #25
					b |= 1; c -= 0x20;
 800a886:	bf9e      	ittt	ls
 800a888:	3b20      	subls	r3, #32
 800a88a:	f042 0201 	orrls.w	r2, r2, #1
 800a88e:	b2db      	uxtbls	r3, r3
 800a890:	e783      	b.n	800a79a <follow_path+0xa2>
}
 800a892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a896:	bf00      	nop
 800a898:	0800cf04 	.word	0x0800cf04
 800a89c:	0800cf83 	.word	0x0800cf83

0800a8a0 <dir_read.constprop.13>:
FRESULT dir_read (
 800a8a0:	b510      	push	{r4, lr}
 800a8a2:	4604      	mov	r4, r0
	res = FR_NO_FILE;
 800a8a4:	2004      	movs	r0, #4
	while (dp->sect) {
 800a8a6:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 800a8aa:	b909      	cbnz	r1, 800a8b0 <dir_read.constprop.13+0x10>
	if (res != FR_OK) dp->sect = 0;
 800a8ac:	b1b0      	cbz	r0, 800a8dc <dir_read.constprop.13+0x3c>
 800a8ae:	e01d      	b.n	800a8ec <dir_read.constprop.13+0x4c>
		res = move_window(dp->fs, dp->sect);
 800a8b0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800a8b4:	f7ff fb54 	bl	8009f60 <move_window>
		if (res != FR_OK) break;
 800a8b8:	b9c0      	cbnz	r0, 800a8ec <dir_read.constprop.13+0x4c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800a8ba:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		c = dir[DIR_Name];
 800a8be:	7813      	ldrb	r3, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a8c0:	b1c3      	cbz	r3, 800a8f4 <dir_read.constprop.13+0x54>
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 800a8c2:	2be5      	cmp	r3, #229	; 0xe5
 800a8c4:	d00c      	beq.n	800a8e0 <dir_read.constprop.13+0x40>
 800a8c6:	2b2e      	cmp	r3, #46	; 0x2e
 800a8c8:	d00a      	beq.n	800a8e0 <dir_read.constprop.13+0x40>
		a = dir[DIR_Attr] & AM_MASK;
 800a8ca:	7ad3      	ldrb	r3, [r2, #11]
 800a8cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 800a8d0:	2b0f      	cmp	r3, #15
 800a8d2:	d005      	beq.n	800a8e0 <dir_read.constprop.13+0x40>
 800a8d4:	f023 0320 	bic.w	r3, r3, #32
 800a8d8:	2b08      	cmp	r3, #8
 800a8da:	d001      	beq.n	800a8e0 <dir_read.constprop.13+0x40>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a8dc:	2000      	movs	r0, #0
 800a8de:	bd10      	pop	{r4, pc}
		res = dir_next(dp, 0);				/* Next entry */
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	f7ff fe78 	bl	800a5d8 <dir_next>
		if (res != FR_OK) break;
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d0dc      	beq.n	800a8a6 <dir_read.constprop.13+0x6>
	if (res != FR_OK) dp->sect = 0;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
}
 800a8f2:	bd10      	pop	{r4, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a8f4:	2004      	movs	r0, #4
 800a8f6:	e7f9      	b.n	800a8ec <dir_read.constprop.13+0x4c>

0800a8f8 <dir_register>:
{
 800a8f8:	b538      	push	{r3, r4, r5, lr}
	res = dir_sdi(dp, 0);
 800a8fa:	2100      	movs	r1, #0
{
 800a8fc:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 800a8fe:	f7ff fd28 	bl	800a352 <dir_sdi>
	if (res == FR_OK) {
 800a902:	4604      	mov	r4, r0
 800a904:	bb78      	cbnz	r0, 800a966 <dir_register+0x6e>
			res = move_window(dp->fs, dp->sect);
 800a906:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 800a90a:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 800a90e:	f7ff fb27 	bl	8009f60 <move_window>
			if (res != FR_OK) break;
 800a912:	4604      	mov	r4, r0
 800a914:	bb38      	cbnz	r0, 800a966 <dir_register+0x6e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a916:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	2be5      	cmp	r3, #229	; 0xe5
 800a91e:	d11b      	bne.n	800a958 <dir_register+0x60>
		res = move_window(dp->fs, dp->sect);
 800a920:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 800a924:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 800a928:	f7ff fb1a 	bl	8009f60 <move_window>
		if (res == FR_OK) {
 800a92c:	4604      	mov	r4, r0
 800a92e:	b988      	cbnz	r0, 800a954 <dir_register+0x5c>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800a930:	4601      	mov	r1, r0
 800a932:	2220      	movs	r2, #32
 800a934:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 800a938:	f7ff f96c 	bl	8009c14 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800a93c:	220b      	movs	r2, #11
 800a93e:	f8d5 1218 	ldr.w	r1, [r5, #536]	; 0x218
 800a942:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 800a946:	f7ff f95b 	bl	8009c00 <mem_cpy>
			dp->fs->wflag = 1;
 800a94a:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 800a954:	4620      	mov	r0, r4
 800a956:	bd38      	pop	{r3, r4, r5, pc}
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d0e1      	beq.n	800a920 <dir_register+0x28>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800a95c:	2101      	movs	r1, #1
 800a95e:	4628      	mov	r0, r5
 800a960:	f7ff fe3a 	bl	800a5d8 <dir_next>
 800a964:	e7cd      	b.n	800a902 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a966:	2c04      	cmp	r4, #4
 800a968:	bf08      	it	eq
 800a96a:	2407      	moveq	r4, #7
 800a96c:	e7f2      	b.n	800a954 <dir_register+0x5c>

0800a96e <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a96e:	2901      	cmp	r1, #1
{
 800a970:	b570      	push	{r4, r5, r6, lr}
 800a972:	4604      	mov	r4, r0
 800a974:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a976:	d801      	bhi.n	800a97c <remove_chain+0xe>
		res = FR_INT_ERR;
 800a978:	2002      	movs	r0, #2
 800a97a:	bd70      	pop	{r4, r5, r6, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a97c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a980:	4299      	cmp	r1, r3
 800a982:	d2f9      	bcs.n	800a978 <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a984:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800a988:	429d      	cmp	r5, r3
 800a98a:	d205      	bcs.n	800a998 <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800a98c:	4629      	mov	r1, r5
 800a98e:	4620      	mov	r0, r4
 800a990:	f7ff fc7e 	bl	800a290 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 800a994:	4606      	mov	r6, r0
 800a996:	b908      	cbnz	r0, 800a99c <remove_chain+0x2e>
		res = FR_INT_ERR;
 800a998:	2000      	movs	r0, #0
 800a99a:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800a99c:	2801      	cmp	r0, #1
 800a99e:	d0eb      	beq.n	800a978 <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a9a0:	1c41      	adds	r1, r0, #1
 800a9a2:	d014      	beq.n	800a9ce <remove_chain+0x60>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	4629      	mov	r1, r5
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f7ff fd42 	bl	800a432 <put_fat>
			if (res != FR_OK) break;
 800a9ae:	b978      	cbnz	r0, 800a9d0 <remove_chain+0x62>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800a9b0:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800a9b4:	1c5a      	adds	r2, r3, #1
 800a9b6:	d008      	beq.n	800a9ca <remove_chain+0x5c>
				fs->free_clust++;
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
				fs->fsi_flag |= 1;
 800a9be:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 800a9c2:	f043 0301 	orr.w	r3, r3, #1
 800a9c6:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
{
 800a9ca:	4635      	mov	r5, r6
 800a9cc:	e7da      	b.n	800a984 <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a9ce:	2001      	movs	r0, #1
}
 800a9d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a9d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a9d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a9d6:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a9d8:	a804      	add	r0, sp, #16
{
 800a9da:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 800a9dc:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 800a9e0:	4616      	mov	r6, r2


	vol = get_ldnumber(&rp);
 800a9e2:	f7ff f9f3 	bl	8009dcc <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800a9e6:	1e05      	subs	r5, r0, #0
 800a9e8:	db21      	blt.n	800aa2e <f_mount+0x5a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a9ea:	4913      	ldr	r1, [pc, #76]	; (800aa38 <f_mount+0x64>)
 800a9ec:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 800a9f0:	b164      	cbz	r4, 800aa0c <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a9f2:	4b12      	ldr	r3, [pc, #72]	; (800aa3c <f_mount+0x68>)
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	4294      	cmp	r4, r2
 800a9f8:	bf04      	itt	eq
 800a9fa:	2200      	moveq	r2, #0
 800a9fc:	601a      	streq	r2, [r3, #0]
 800a9fe:	68da      	ldr	r2, [r3, #12]
 800aa00:	2000      	movs	r0, #0
 800aa02:	4294      	cmp	r4, r2
 800aa04:	bf08      	it	eq
 800aa06:	60d8      	streq	r0, [r3, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800aa08:	f884 0200 	strb.w	r0, [r4, #512]	; 0x200
	}

	if (fs) {
 800aa0c:	9801      	ldr	r0, [sp, #4]
 800aa0e:	b110      	cbz	r0, 800aa16 <f_mount+0x42>
		fs->fs_type = 0;				/* Clear new fs object */
 800aa10:	2300      	movs	r3, #0
 800aa12:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800aa16:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aa1a:	b130      	cbz	r0, 800aa2a <f_mount+0x56>
 800aa1c:	2e01      	cmp	r6, #1
 800aa1e:	d108      	bne.n	800aa32 <f_mount+0x5e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800aa20:	2200      	movs	r2, #0
 800aa22:	4669      	mov	r1, sp
 800aa24:	a801      	add	r0, sp, #4
 800aa26:	f7ff fae5 	bl	8009ff4 <find_volume>
	LEAVE_FF(fs, res);
}
 800aa2a:	b004      	add	sp, #16
 800aa2c:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800aa2e:	200b      	movs	r0, #11
 800aa30:	e7fb      	b.n	800aa2a <f_mount+0x56>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aa32:	2000      	movs	r0, #0
 800aa34:	e7f9      	b.n	800aa2a <f_mount+0x56>
 800aa36:	bf00      	nop
 800aa38:	20000840 	.word	0x20000840
 800aa3c:	20000844 	.word	0x20000844

0800aa40 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800aa40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa44:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800aa48:	4690      	mov	r8, r2
 800aa4a:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800aa4c:	4605      	mov	r5, r0
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	f000 80a6 	beq.w	800aba0 <f_open+0x160>
	fp->fs = 0;			/* Clear file object */
 800aa54:	2300      	movs	r3, #0
 800aa56:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800aa5a:	f002 021e 	and.w	r2, r2, #30
 800aa5e:	a901      	add	r1, sp, #4
 800aa60:	a886      	add	r0, sp, #536	; 0x218
 800aa62:	f7ff fac7 	bl	8009ff4 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800aa66:	4606      	mov	r6, r0
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	f040 8094 	bne.w	800ab96 <f_open+0x156>
		INIT_BUF(dj);
 800aa6e:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 800aa70:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800aa72:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 800aa74:	a806      	add	r0, sp, #24
 800aa76:	f7ff fe3f 	bl	800a6f8 <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800aa7a:	f008 071f 	and.w	r7, r8, #31
		dir = dj.dir;
 800aa7e:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800aa80:	b948      	cbnz	r0, 800aa96 <f_open+0x56>
			if (!dir)	/* Default directory itself */
 800aa82:	2c00      	cmp	r4, #0
 800aa84:	d05b      	beq.n	800ab3e <f_open+0xfe>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aa86:	f017 0f1e 	tst.w	r7, #30
 800aa8a:	bf14      	ite	ne
 800aa8c:	2101      	movne	r1, #1
 800aa8e:	2100      	moveq	r1, #0
 800aa90:	a806      	add	r0, sp, #24
 800aa92:	f7ff f8c7 	bl	8009c24 <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800aa96:	f018 0f1c 	tst.w	r8, #28
 800aa9a:	d05b      	beq.n	800ab54 <f_open+0x114>
			if (res != FR_OK) {					/* No file, create new */
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d050      	beq.n	800ab42 <f_open+0x102>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800aaa0:	2804      	cmp	r0, #4
 800aaa2:	d14a      	bne.n	800ab3a <f_open+0xfa>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aaa4:	4b51      	ldr	r3, [pc, #324]	; (800abec <f_open+0x1ac>)
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	b11a      	cbz	r2, 800aab2 <f_open+0x72>
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f040 809b 	bne.w	800abe8 <f_open+0x1a8>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800aab2:	a806      	add	r0, sp, #24
 800aab4:	f7ff ff20 	bl	800a8f8 <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d13e      	bne.n	800ab3a <f_open+0xfa>
				dir = dj.dir;					/* New entry */
 800aabc:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800aabe:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aac2:	073b      	lsls	r3, r7, #28
 800aac4:	d550      	bpl.n	800ab68 <f_open+0x128>
				dw = GET_FATTIME();				/* Created time */
 800aac6:	f7f6 fceb 	bl	80014a0 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 800aaca:	f3c0 2307 	ubfx	r3, r0, #8, #8
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800aace:	f04f 0800 	mov.w	r8, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 800aad2:	73a0      	strb	r0, [r4, #14]
 800aad4:	73e3      	strb	r3, [r4, #15]
 800aad6:	0c03      	lsrs	r3, r0, #16
 800aad8:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800aada:	f884 800b 	strb.w	r8, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800aade:	f884 801c 	strb.w	r8, [r4, #28]
 800aae2:	f884 801d 	strb.w	r8, [r4, #29]
 800aae6:	f884 801e 	strb.w	r8, [r4, #30]
 800aaea:	f884 801f 	strb.w	r8, [r4, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800aaee:	7423      	strb	r3, [r4, #16]
 800aaf0:	7460      	strb	r0, [r4, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800aaf2:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800aaf4:	4621      	mov	r1, r4
 800aaf6:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800aafa:	f7ff f996 	bl	8009e2a <ld_clust.isra.0>
	ST_WORD(dir + DIR_FstClusLO, cl);
 800aafe:	f884 801a 	strb.w	r8, [r4, #26]
 800ab02:	f884 801b 	strb.w	r8, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800ab06:	f884 8014 	strb.w	r8, [r4, #20]
 800ab0a:	f884 8015 	strb.w	r8, [r4, #21]
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 800ab0e:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800ab10:	2201      	movs	r2, #1
 800ab12:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800ab16:	4680      	mov	r8, r0
 800ab18:	b330      	cbz	r0, 800ab68 <f_open+0x128>
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
 800ab1a:	4601      	mov	r1, r0
 800ab1c:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 800ab1e:	f8d3 922c 	ldr.w	r9, [r3, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 800ab22:	f7ff ff24 	bl	800a96e <remove_chain>
					if (res == FR_OK) {
 800ab26:	b940      	cbnz	r0, 800ab3a <f_open+0xfa>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800ab28:	9886      	ldr	r0, [sp, #536]	; 0x218
 800ab2a:	f108 33ff 	add.w	r3, r8, #4294967295
 800ab2e:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800ab32:	4649      	mov	r1, r9
 800ab34:	f7ff fa14 	bl	8009f60 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 800ab38:	b1b0      	cbz	r0, 800ab68 <f_open+0x128>
					res = FR_DENIED;
 800ab3a:	4606      	mov	r6, r0
 800ab3c:	e02b      	b.n	800ab96 <f_open+0x156>
				res = FR_INVALID_NAME;
 800ab3e:	2006      	movs	r0, #6
 800ab40:	e7a9      	b.n	800aa96 <f_open+0x56>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ab42:	7ae3      	ldrb	r3, [r4, #11]
 800ab44:	f013 0f11 	tst.w	r3, #17
 800ab48:	d12e      	bne.n	800aba8 <f_open+0x168>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800ab4a:	f018 0f04 	tst.w	r8, #4
 800ab4e:	d0b8      	beq.n	800aac2 <f_open+0x82>
						res = FR_EXIST;
 800ab50:	2608      	movs	r6, #8
 800ab52:	e020      	b.n	800ab96 <f_open+0x156>
			if (res == FR_OK) {					/* Follow succeeded */
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d1f0      	bne.n	800ab3a <f_open+0xfa>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800ab58:	7ae3      	ldrb	r3, [r4, #11]
 800ab5a:	06d8      	lsls	r0, r3, #27
 800ab5c:	d422      	bmi.n	800aba4 <f_open+0x164>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800ab5e:	f018 0f02 	tst.w	r8, #2
 800ab62:	d001      	beq.n	800ab68 <f_open+0x128>
 800ab64:	07da      	lsls	r2, r3, #31
 800ab66:	d41f      	bmi.n	800aba8 <f_open+0x168>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ab68:	073b      	lsls	r3, r7, #28
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800ab6a:	9b86      	ldr	r3, [sp, #536]	; 0x218
				mode |= FA__WRITTEN;
 800ab6c:	bf48      	it	mi
 800ab6e:	f047 0720 	orrmi.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800ab72:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800ab76:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
			fp->dir_ptr = dir;
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ab7a:	f017 0ffe 	tst.w	r7, #254	; 0xfe
			fp->dir_ptr = dir;
 800ab7e:	f8c5 4220 	str.w	r4, [r5, #544]	; 0x220
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ab82:	bf14      	ite	ne
 800ab84:	2101      	movne	r1, #1
 800ab86:	2100      	moveq	r1, #0
 800ab88:	a806      	add	r0, sp, #24
 800ab8a:	f7ff f87d 	bl	8009c88 <inc_lock>
 800ab8e:	f8c5 0228 	str.w	r0, [r5, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800ab92:	b958      	cbnz	r0, 800abac <f_open+0x16c>
 800ab94:	2602      	movs	r6, #2
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 800ab96:	4630      	mov	r0, r6
 800ab98:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 800ab9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!fp) return FR_INVALID_OBJECT;
 800aba0:	2609      	movs	r6, #9
 800aba2:	e7f8      	b.n	800ab96 <f_open+0x156>
					res = FR_NO_FILE;
 800aba4:	2604      	movs	r6, #4
 800aba6:	e7f6      	b.n	800ab96 <f_open+0x156>
					res = FR_DENIED;
 800aba8:	2607      	movs	r6, #7
 800abaa:	e7f4      	b.n	800ab96 <f_open+0x156>
			fp->flag = mode;					/* File access mode */
 800abac:	f885 7206 	strb.w	r7, [r5, #518]	; 0x206
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800abb0:	f8dd 8218 	ldr.w	r8, [sp, #536]	; 0x218
			fp->err = 0;						/* Clear error flag */
 800abb4:	2700      	movs	r7, #0
 800abb6:	f885 7207 	strb.w	r7, [r5, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800abba:	f898 0200 	ldrb.w	r0, [r8, #512]	; 0x200
 800abbe:	4621      	mov	r1, r4
 800abc0:	f7ff f933 	bl	8009e2a <ld_clust.isra.0>
 800abc4:	f8c5 0210 	str.w	r0, [r5, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800abc8:	69e3      	ldr	r3, [r4, #28]
 800abca:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
			fp->id = fp->fs->id;
 800abce:	f8b8 3206 	ldrh.w	r3, [r8, #518]	; 0x206
			fp->fptr = 0;						/* File pointer */
 800abd2:	f8c5 7208 	str.w	r7, [r5, #520]	; 0x208
			fp->dsect = 0;
 800abd6:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 800abda:	f8c5 7224 	str.w	r7, [r5, #548]	; 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 800abde:	f8c5 8200 	str.w	r8, [r5, #512]	; 0x200
			fp->id = fp->fs->id;
 800abe2:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
 800abe6:	e7d6      	b.n	800ab96 <f_open+0x156>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800abe8:	2012      	movs	r0, #18
 800abea:	e7a6      	b.n	800ab3a <f_open+0xfa>
 800abec:	20000844 	.word	0x20000844

0800abf0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800abf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf4:	469b      	mov	fp, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800abf6:	2300      	movs	r3, #0
 800abf8:	f8cb 3000 	str.w	r3, [fp]
{
 800abfc:	4604      	mov	r4, r0
 800abfe:	4689      	mov	r9, r1
 800ac00:	4617      	mov	r7, r2

	res = validate(fp);						/* Check validity */
 800ac02:	f7ff f8fb 	bl	8009dfc <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800ac06:	4606      	mov	r6, r0
 800ac08:	bb50      	cbnz	r0, 800ac60 <f_write+0x70>
	if (fp->err)							/* Check error */
 800ac0a:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f040 80d9 	bne.w	800adc6 <f_write+0x1d6>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800ac14:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800ac18:	0799      	lsls	r1, r3, #30
 800ac1a:	f140 80d6 	bpl.w	800adca <f_write+0x1da>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800ac1e:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800ac22:	42df      	cmn	r7, r3
 800ac24:	f0c0 8083 	bcc.w	800ad2e <f_write+0x13e>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800ac28:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800ac2c:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 800ac30:	4293      	cmp	r3, r2
 800ac32:	f200 80c5 	bhi.w	800adc0 <f_write+0x1d0>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800ac36:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800ac3a:	f043 0320 	orr.w	r3, r3, #32
 800ac3e:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800ac42:	e00d      	b.n	800ac60 <f_write+0x70>
					if (fp->cltbl)
 800ac44:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800ac48:	b173      	cbz	r3, 800ac68 <f_write+0x78>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f7ff f87c 	bl	8009d48 <clmt_clust>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ac50:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ac52:	2800      	cmp	r0, #0
 800ac54:	d0e8      	beq.n	800ac28 <f_write+0x38>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800ac56:	2901      	cmp	r1, #1
 800ac58:	d109      	bne.n	800ac6e <f_write+0x7e>
 800ac5a:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ac5c:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207

	LEAVE_FF(fp->fs, FR_OK);
}
 800ac60:	4630      	mov	r0, r6
 800ac62:	b003      	add	sp, #12
 800ac64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ac68:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 800ac6c:	e07a      	b.n	800ad64 <f_write+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ac6e:	1c4a      	adds	r2, r1, #1
 800ac70:	d101      	bne.n	800ac76 <f_write+0x86>
 800ac72:	2601      	movs	r6, #1
 800ac74:	e7f2      	b.n	800ac5c <f_write+0x6c>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800ac76:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
				fp->clust = clst;			/* Update current cluster */
 800ac7a:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800ac7e:	b90b      	cbnz	r3, 800ac84 <f_write+0x94>
 800ac80:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800ac84:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800ac88:	065b      	lsls	r3, r3, #25
 800ac8a:	d511      	bpl.n	800acb0 <f_write+0xc0>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ac8c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800ac90:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800ac94:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800ac98:	2301      	movs	r3, #1
 800ac9a:	4621      	mov	r1, r4
 800ac9c:	f7fe ff2c 	bl	8009af8 <disk_write>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	d1e6      	bne.n	800ac72 <f_write+0x82>
				fp->flag &= ~FA__DIRTY;
 800aca4:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800aca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acac:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800acb0:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 800acb4:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 800acb8:	4650      	mov	r0, sl
 800acba:	f7ff fadb 	bl	800a274 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d0cb      	beq.n	800ac5a <f_write+0x6a>
			sect += csect;
 800acc2:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800acc4:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 800acc6:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 800acca:	d04e      	beq.n	800ad6a <f_write+0x17a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800accc:	9a01      	ldr	r2, [sp, #4]
 800acce:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800acd2:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800acd6:	442a      	add	r2, r5
 800acd8:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 800acda:	bf84      	itt	hi
 800acdc:	9a01      	ldrhi	r2, [sp, #4]
 800acde:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800ace0:	462b      	mov	r3, r5
 800ace2:	4642      	mov	r2, r8
 800ace4:	4649      	mov	r1, r9
 800ace6:	f7fe ff07 	bl	8009af8 <disk_write>
 800acea:	2800      	cmp	r0, #0
 800acec:	d1c1      	bne.n	800ac72 <f_write+0x82>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800acee:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 800acf2:	eba1 0108 	sub.w	r1, r1, r8
 800acf6:	428d      	cmp	r5, r1
 800acf8:	d90c      	bls.n	800ad14 <f_write+0x124>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800acfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acfe:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 800ad02:	4620      	mov	r0, r4
 800ad04:	f7fe ff7c 	bl	8009c00 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800ad08:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800ad0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad10:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800ad14:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800ad16:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800ad1a:	442b      	add	r3, r5
 800ad1c:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 800ad20:	f8db 3000 	ldr.w	r3, [fp]
 800ad24:	442b      	add	r3, r5
 800ad26:	44a9      	add	r9, r5
 800ad28:	f8cb 3000 	str.w	r3, [fp]
 800ad2c:	1b7f      	subs	r7, r7, r5
	for ( ;  btw;							/* Repeat until all data written */
 800ad2e:	2f00      	cmp	r7, #0
 800ad30:	f43f af7a 	beq.w	800ac28 <f_write+0x38>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800ad34:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 800ad38:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800ad3c:	bb5b      	cbnz	r3, 800ad96 <f_write+0x1a6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800ad3e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800ad42:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 800ad46:	3b01      	subs	r3, #1
 800ad48:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 800ad4c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800ad50:	9301      	str	r3, [sp, #4]
 800ad52:	d197      	bne.n	800ac84 <f_write+0x94>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ad54:	2900      	cmp	r1, #0
 800ad56:	f47f af75 	bne.w	800ac44 <f_write+0x54>
					clst = fp->sclust;		/* Follow from the origin */
 800ad5a:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 800ad5e:	2900      	cmp	r1, #0
 800ad60:	f47f af79 	bne.w	800ac56 <f_write+0x66>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ad64:	f7ff fbdf 	bl	800a526 <create_chain>
 800ad68:	e772      	b.n	800ac50 <f_write+0x60>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800ad6a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800ad6e:	4598      	cmp	r8, r3
 800ad70:	d00f      	beq.n	800ad92 <f_write+0x1a2>
				if (fp->fptr < fp->fsize &&
 800ad72:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 800ad76:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d209      	bcs.n	800ad92 <f_write+0x1a2>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800ad7e:	2301      	movs	r3, #1
 800ad80:	4642      	mov	r2, r8
 800ad82:	4621      	mov	r1, r4
 800ad84:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 800ad88:	f7fe fea8 	bl	8009adc <disk_read>
				if (fp->fptr < fp->fsize &&
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	f47f af70 	bne.w	800ac72 <f_write+0x82>
			fp->dsect = sect;
 800ad92:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800ad96:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 800ad9a:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800ad9e:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 800ada2:	42bd      	cmp	r5, r7
 800ada4:	bf28      	it	cs
 800ada6:	463d      	movcs	r5, r7
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800ada8:	462a      	mov	r2, r5
 800adaa:	4649      	mov	r1, r9
 800adac:	4420      	add	r0, r4
 800adae:	f7fe ff27 	bl	8009c00 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800adb2:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800adb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adba:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800adbe:	e7aa      	b.n	800ad16 <f_write+0x126>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800adc0:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 800adc4:	e737      	b.n	800ac36 <f_write+0x46>
 800adc6:	461e      	mov	r6, r3
 800adc8:	e74a      	b.n	800ac60 <f_write+0x70>
		LEAVE_FF(fp->fs, FR_DENIED);
 800adca:	2607      	movs	r6, #7
 800adcc:	e748      	b.n	800ac60 <f_write+0x70>

0800adce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800adce:	b570      	push	{r4, r5, r6, lr}
 800add0:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800add2:	f7ff f813 	bl	8009dfc <validate>
	if (res == FR_OK) {
 800add6:	2800      	cmp	r0, #0
 800add8:	d158      	bne.n	800ae8c <f_sync+0xbe>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800adda:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800adde:	069a      	lsls	r2, r3, #26
 800ade0:	d554      	bpl.n	800ae8c <f_sync+0xbe>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800ade2:	065b      	lsls	r3, r3, #25
 800ade4:	d511      	bpl.n	800ae0a <f_sync+0x3c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ade6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800adea:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800adee:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800adf2:	2301      	movs	r3, #1
 800adf4:	4621      	mov	r1, r4
 800adf6:	f7fe fe7f 	bl	8009af8 <disk_write>
 800adfa:	2800      	cmp	r0, #0
 800adfc:	d145      	bne.n	800ae8a <f_sync+0xbc>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 800adfe:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800ae02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae06:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800ae0a:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 800ae0e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800ae12:	f7ff f8a5 	bl	8009f60 <move_window>
 800ae16:	4606      	mov	r6, r0
			if (res == FR_OK) {
 800ae18:	bbc0      	cbnz	r0, 800ae8c <f_sync+0xbe>
				dir = fp->dir_ptr;
 800ae1a:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800ae1e:	7aeb      	ldrb	r3, [r5, #11]
 800ae20:	f043 0320 	orr.w	r3, r3, #32
 800ae24:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800ae26:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800ae2a:	772b      	strb	r3, [r5, #28]
 800ae2c:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 800ae30:	0a1b      	lsrs	r3, r3, #8
 800ae32:	776b      	strb	r3, [r5, #29]
 800ae34:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800ae38:	77ab      	strb	r3, [r5, #30]
 800ae3a:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 800ae3e:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800ae40:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 800ae44:	76ab      	strb	r3, [r5, #26]
 800ae46:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800ae4a:	0c1b      	lsrs	r3, r3, #16
 800ae4c:	752b      	strb	r3, [r5, #20]
 800ae4e:	0a1b      	lsrs	r3, r3, #8
 800ae50:	756b      	strb	r3, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800ae52:	76ea      	strb	r2, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 800ae54:	f7f6 fb24 	bl	80014a0 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 800ae58:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ae5c:	75a8      	strb	r0, [r5, #22]
 800ae5e:	75eb      	strb	r3, [r5, #23]
 800ae60:	0c03      	lsrs	r3, r0, #16
 800ae62:	0e00      	lsrs	r0, r0, #24
 800ae64:	762b      	strb	r3, [r5, #24]
 800ae66:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800ae68:	74ae      	strb	r6, [r5, #18]
 800ae6a:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 800ae6c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 800ae70:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 800ae74:	f023 0320 	bic.w	r3, r3, #32
 800ae78:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 800ae82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 800ae86:	f7ff b80e 	b.w	8009ea6 <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800ae8a:	2001      	movs	r0, #1
}
 800ae8c:	bd70      	pop	{r4, r5, r6, pc}

0800ae8e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800ae8e:	b510      	push	{r4, lr}
 800ae90:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ae92:	f7ff ff9c 	bl	800adce <f_sync>
	if (res == FR_OK)
 800ae96:	b950      	cbnz	r0, 800aeae <f_close+0x20>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f7fe ffaf 	bl	8009dfc <validate>
		if (res == FR_OK) {
 800ae9e:	b930      	cbnz	r0, 800aeae <f_close+0x20>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800aea0:	f8d4 0228 	ldr.w	r0, [r4, #552]	; 0x228
 800aea4:	f7fe ff34 	bl	8009d10 <dec_lock>
			if (res == FR_OK)
 800aea8:	b908      	cbnz	r0, 800aeae <f_close+0x20>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800aeaa:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800aeae:	bd10      	pop	{r4, pc}

0800aeb0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800aeb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	460d      	mov	r5, r1
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800aeb8:	f7fe ffa0 	bl	8009dfc <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800aebc:	4606      	mov	r6, r0
 800aebe:	bb10      	cbnz	r0, 800af06 <f_lseek+0x56>
	if (fp->err)						/* Check error */
 800aec0:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f040 813e 	bne.w	800b146 <f_lseek+0x296>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800aeca:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f000 8087 	beq.w	800afe2 <f_lseek+0x132>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800aed4:	1c6a      	adds	r2, r5, #1
 800aed6:	d13d      	bne.n	800af54 <f_lseek+0xa4>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
			cl = fp->sclust;			/* Top of the chain */
 800aed8:	f8d4 7210 	ldr.w	r7, [r4, #528]	; 0x210
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800aedc:	f8d3 b000 	ldr.w	fp, [r3]
 800aee0:	f103 0a04 	add.w	sl, r3, #4
 800aee4:	2502      	movs	r5, #2
			if (cl) {
 800aee6:	b35f      	cbz	r7, 800af40 <f_lseek+0x90>
 800aee8:	46b8      	mov	r8, r7
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800aeea:	f04f 0900 	mov.w	r9, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(fp->fs, cl);
 800aeee:	4641      	mov	r1, r8
 800aef0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800aef4:	f7ff f9cc 	bl	800a290 <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800aef8:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 800aefa:	f109 0901 	add.w	r9, r9, #1
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800aefe:	d807      	bhi.n	800af10 <f_lseek+0x60>
 800af00:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800af02:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
 800af06:	4630      	mov	r0, r6
 800af08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af0c:	4607      	mov	r7, r0
 800af0e:	e7eb      	b.n	800aee8 <f_lseek+0x38>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800af10:	1c43      	adds	r3, r0, #1
 800af12:	d101      	bne.n	800af18 <f_lseek+0x68>
 800af14:	2601      	movs	r6, #1
 800af16:	e7f4      	b.n	800af02 <f_lseek+0x52>
					} while (cl == pcl + 1);
 800af18:	f108 0301 	add.w	r3, r8, #1
 800af1c:	4298      	cmp	r0, r3
 800af1e:	4680      	mov	r8, r0
 800af20:	d0e5      	beq.n	800aeee <f_lseek+0x3e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800af22:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800af24:	45ab      	cmp	fp, r5
						*tbl++ = ncl; *tbl++ = tcl;
 800af26:	bf21      	itttt	cs
 800af28:	4653      	movcs	r3, sl
 800af2a:	f843 9b08 	strcs.w	r9, [r3], #8
 800af2e:	f8ca 7004 	strcs.w	r7, [sl, #4]
 800af32:	469a      	movcs	sl, r3
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800af34:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800af38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800af3c:	4298      	cmp	r0, r3
 800af3e:	d3e5      	bcc.n	800af0c <f_lseek+0x5c>
			*fp->cltbl = ulen;	/* Number of items used */
 800af40:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
			if (ulen <= tlen)
 800af44:	455d      	cmp	r5, fp
			*fp->cltbl = ulen;	/* Number of items used */
 800af46:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen)
 800af48:	f200 80ff 	bhi.w	800b14a <f_lseek+0x29a>
				*tbl = 0;		/* Terminate table */
 800af4c:	2300      	movs	r3, #0
 800af4e:	f8ca 3000 	str.w	r3, [sl]
 800af52:	e7d8      	b.n	800af06 <f_lseek+0x56>
 800af54:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
 800af58:	4285      	cmp	r5, r0
 800af5a:	bf28      	it	cs
 800af5c:	4605      	movcs	r5, r0
			fp->fptr = ofs;				/* Set file pointer */
 800af5e:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
			if (ofs) {
 800af62:	2d00      	cmp	r5, #0
 800af64:	d0cf      	beq.n	800af06 <f_lseek+0x56>
				fp->clust = clmt_clust(fp, ofs - 1);
 800af66:	f105 38ff 	add.w	r8, r5, #4294967295
 800af6a:	4641      	mov	r1, r8
 800af6c:	4620      	mov	r0, r4
 800af6e:	f7fe feeb 	bl	8009d48 <clmt_clust>
				dsc = clust2sect(fp->fs, fp->clust);
 800af72:	f8d4 7200 	ldr.w	r7, [r4, #512]	; 0x200
				fp->clust = clmt_clust(fp, ofs - 1);
 800af76:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
 800af7a:	4601      	mov	r1, r0
				dsc = clust2sect(fp->fs, fp->clust);
 800af7c:	4638      	mov	r0, r7
 800af7e:	f7ff f979 	bl	800a274 <clust2sect>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800af82:	2800      	cmp	r0, #0
 800af84:	d0bc      	beq.n	800af00 <f_lseek+0x50>
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800af86:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800af8a:	2d00      	cmp	r5, #0
 800af8c:	d0bb      	beq.n	800af06 <f_lseek+0x56>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800af8e:	f897 5202 	ldrb.w	r5, [r7, #514]	; 0x202
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800af92:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800af96:	3d01      	subs	r5, #1
 800af98:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 800af9c:	4405      	add	r5, r0
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800af9e:	4295      	cmp	r5, r2
 800afa0:	d0b1      	beq.n	800af06 <f_lseek+0x56>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800afa2:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800afa6:	0659      	lsls	r1, r3, #25
 800afa8:	d50d      	bpl.n	800afc6 <f_lseek+0x116>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800afaa:	2301      	movs	r3, #1
 800afac:	4621      	mov	r1, r4
 800afae:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 800afb2:	f7fe fda1 	bl	8009af8 <disk_write>
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d1ac      	bne.n	800af14 <f_lseek+0x64>
						fp->flag &= ~FA__DIRTY;
 800afba:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800afbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afc2:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800afc6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800afca:	2301      	movs	r3, #1
 800afcc:	462a      	mov	r2, r5
 800afce:	4621      	mov	r1, r4
 800afd0:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800afd4:	f7fe fd82 	bl	8009adc <disk_read>
 800afd8:	2800      	cmp	r0, #0
 800afda:	d19b      	bne.n	800af14 <f_lseek+0x64>
					fp->dsect = dsc;
 800afdc:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 800afe0:	e791      	b.n	800af06 <f_lseek+0x56>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800afe2:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800afe6:	429d      	cmp	r5, r3
 800afe8:	d905      	bls.n	800aff6 <f_lseek+0x146>
			 && !(fp->flag & FA_WRITE)
 800afea:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 800afee:	f012 0f02 	tst.w	r2, #2
 800aff2:	bf08      	it	eq
 800aff4:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 800aff6:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 800aff8:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
		fp->fptr = nsect = 0;
 800affc:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
		if (ofs) {
 800b000:	2d00      	cmp	r5, #0
 800b002:	d13e      	bne.n	800b082 <f_lseek+0x1d2>
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800b004:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800b008:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 800b00c:	4293      	cmp	r3, r2
 800b00e:	f67f af7a 	bls.w	800af06 <f_lseek+0x56>
			fp->fsize = fp->fptr;
 800b012:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 800b016:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800b01a:	f043 0320 	orr.w	r3, r3, #32
 800b01e:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800b022:	e770      	b.n	800af06 <f_lseek+0x56>
		fp->fptr = nsect = 0;
 800b024:	2500      	movs	r5, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800b026:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800b02a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d0e8      	beq.n	800b004 <f_lseek+0x154>
 800b032:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800b036:	4295      	cmp	r5, r2
 800b038:	d0e4      	beq.n	800b004 <f_lseek+0x154>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800b03a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800b03e:	065b      	lsls	r3, r3, #25
 800b040:	d510      	bpl.n	800b064 <f_lseek+0x1b4>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b042:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800b046:	2301      	movs	r3, #1
 800b048:	4621      	mov	r1, r4
 800b04a:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800b04e:	f7fe fd53 	bl	8009af8 <disk_write>
 800b052:	2800      	cmp	r0, #0
 800b054:	f47f af5e 	bne.w	800af14 <f_lseek+0x64>
				fp->flag &= ~FA__DIRTY;
 800b058:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800b05c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b060:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800b064:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800b068:	2301      	movs	r3, #1
 800b06a:	462a      	mov	r2, r5
 800b06c:	4621      	mov	r1, r4
 800b06e:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800b072:	f7fe fd33 	bl	8009adc <disk_read>
 800b076:	2800      	cmp	r0, #0
 800b078:	f47f af4c 	bne.w	800af14 <f_lseek+0x64>
			fp->dsect = nsect;
 800b07c:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 800b080:	e7c0      	b.n	800b004 <f_lseek+0x154>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800b082:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800b086:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 800b08a:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 800b08c:	b32b      	cbz	r3, 800b0da <f_lseek+0x22a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b08e:	3b01      	subs	r3, #1
 800b090:	1e6a      	subs	r2, r5, #1
 800b092:	fbb3 f1f7 	udiv	r1, r3, r7
 800b096:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 800b09a:	428a      	cmp	r2, r1
 800b09c:	d31d      	bcc.n	800b0da <f_lseek+0x22a>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800b09e:	427a      	negs	r2, r7
 800b0a0:	4013      	ands	r3, r2
				clst = fp->clust;
 800b0a2:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800b0a6:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				ofs -= fp->fptr;
 800b0aa:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 800b0ac:	2900      	cmp	r1, #0
 800b0ae:	d0b9      	beq.n	800b024 <f_lseek+0x174>
				while (ofs > bcs) {						/* Cluster following loop */
 800b0b0:	42bd      	cmp	r5, r7
 800b0b2:	d823      	bhi.n	800b0fc <f_lseek+0x24c>
				fp->fptr += ofs;
 800b0b4:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800b0b8:	442b      	add	r3, r5
 800b0ba:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 800b0be:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d0ae      	beq.n	800b024 <f_lseek+0x174>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800b0c6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800b0ca:	f7ff f8d3 	bl	800a274 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	f43f af16 	beq.w	800af00 <f_lseek+0x50>
					nsect += ofs / SS(fp->fs);
 800b0d4:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 800b0d8:	e7a5      	b.n	800b026 <f_lseek+0x176>
				clst = fp->sclust;						/* start from the first cluster */
 800b0da:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b0de:	b951      	cbnz	r1, 800b0f6 <f_lseek+0x246>
					clst = create_chain(fp->fs, 0);
 800b0e0:	f7ff fa21 	bl	800a526 <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b0e4:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 800b0e6:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b0e8:	f43f af0a 	beq.w	800af00 <f_lseek+0x50>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b0ec:	1c42      	adds	r2, r0, #1
 800b0ee:	f43f af11 	beq.w	800af14 <f_lseek+0x64>
					fp->sclust = clst;
 800b0f2:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
				fp->clust = clst;
 800b0f6:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
 800b0fa:	e7d7      	b.n	800b0ac <f_lseek+0x1fc>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b0fc:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800b100:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b104:	079b      	lsls	r3, r3, #30
 800b106:	d505      	bpl.n	800b114 <f_lseek+0x264>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800b108:	f7ff fa0d 	bl	800a526 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 800b10c:	4601      	mov	r1, r0
 800b10e:	b920      	cbnz	r0, 800b11a <f_lseek+0x26a>
 800b110:	463d      	mov	r5, r7
 800b112:	e7cf      	b.n	800b0b4 <f_lseek+0x204>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800b114:	f7ff f8bc 	bl	800a290 <get_fat>
 800b118:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b11a:	1c4a      	adds	r2, r1, #1
 800b11c:	f43f aefa 	beq.w	800af14 <f_lseek+0x64>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800b120:	2901      	cmp	r1, #1
 800b122:	f67f aeed 	bls.w	800af00 <f_lseek+0x50>
 800b126:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800b12a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b12e:	4299      	cmp	r1, r3
 800b130:	f4bf aee6 	bcs.w	800af00 <f_lseek+0x50>
					fp->fptr += bcs;
 800b134:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
					fp->clust = clst;
 800b138:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
					fp->fptr += bcs;
 800b13c:	443b      	add	r3, r7
 800b13e:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
					ofs -= bcs;
 800b142:	1bed      	subs	r5, r5, r7
 800b144:	e7b4      	b.n	800b0b0 <f_lseek+0x200>
 800b146:	461e      	mov	r6, r3
 800b148:	e6dd      	b.n	800af06 <f_lseek+0x56>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b14a:	2611      	movs	r6, #17
 800b14c:	e6db      	b.n	800af06 <f_lseek+0x56>

0800b14e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b14e:	b530      	push	{r4, r5, lr}
 800b150:	b087      	sub	sp, #28
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 800b152:	4605      	mov	r5, r0
{
 800b154:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 800b156:	2800      	cmp	r0, #0
 800b158:	d045      	beq.n	800b1e6 <f_opendir+0x98>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800b15a:	2200      	movs	r2, #0
 800b15c:	a901      	add	r1, sp, #4
 800b15e:	a802      	add	r0, sp, #8
 800b160:	f7fe ff48 	bl	8009ff4 <find_volume>
	if (res == FR_OK) {
 800b164:	4604      	mov	r4, r0
 800b166:	bb30      	cbnz	r0, 800b1b6 <f_opendir+0x68>
		dp->fs = fs;
 800b168:	9b02      	ldr	r3, [sp, #8]
 800b16a:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
		INIT_BUF(*dp);
 800b16e:	ab03      	add	r3, sp, #12
 800b170:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b174:	9901      	ldr	r1, [sp, #4]
 800b176:	4628      	mov	r0, r5
 800b178:	f7ff fabe 	bl	800a6f8 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 800b17c:	4604      	mov	r4, r0
 800b17e:	b9b8      	cbnz	r0, 800b1b0 <f_opendir+0x62>
			if (dp->dir) {						/* It is not the origin directory itself */
 800b180:	f8d5 1214 	ldr.w	r1, [r5, #532]	; 0x214
 800b184:	b149      	cbz	r1, 800b19a <f_opendir+0x4c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 800b186:	7acb      	ldrb	r3, [r1, #11]
 800b188:	06db      	lsls	r3, r3, #27
 800b18a:	d528      	bpl.n	800b1de <f_opendir+0x90>
					dp->sclust = ld_clust(fs, dp->dir);
 800b18c:	9b02      	ldr	r3, [sp, #8]
 800b18e:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800b192:	f7fe fe4a 	bl	8009e2a <ld_clust.isra.0>
 800b196:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
				else							/* The object is a file */
					res = FR_NO_PATH;
			}
			if (res == FR_OK) {
				dp->id = fs->id;
 800b19a:	9b02      	ldr	r3, [sp, #8]
 800b19c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800b1a0:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	f7ff f8d3 	bl	800a352 <dir_sdi>
#if _FS_LOCK
				if (res == FR_OK) {
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	b130      	cbz	r0, 800b1be <f_opendir+0x70>
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b1b0:	2c04      	cmp	r4, #4
 800b1b2:	bf08      	it	eq
 800b1b4:	2405      	moveq	r4, #5
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
 800b1bc:	e009      	b.n	800b1d2 <f_opendir+0x84>
					if (dp->sclust) {
 800b1be:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 800b1c2:	b14b      	cbz	r3, 800b1d8 <f_opendir+0x8a>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	f7fe fd5e 	bl	8009c88 <inc_lock>
 800b1cc:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
						if (!dp->lockid)
 800b1d0:	b138      	cbz	r0, 800b1e2 <f_opendir+0x94>

	LEAVE_FF(fs, res);
}
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	b007      	add	sp, #28
 800b1d6:	bd30      	pop	{r4, r5, pc}
						dp->lockid = 0;	/* Root directory need not to be locked */
 800b1d8:	f8c5 421c 	str.w	r4, [r5, #540]	; 0x21c
 800b1dc:	e7f9      	b.n	800b1d2 <f_opendir+0x84>
					res = FR_NO_PATH;
 800b1de:	2405      	movs	r4, #5
 800b1e0:	e7e9      	b.n	800b1b6 <f_opendir+0x68>
							res = FR_TOO_MANY_OPEN_FILES;
 800b1e2:	2412      	movs	r4, #18
 800b1e4:	e7e7      	b.n	800b1b6 <f_opendir+0x68>
	if (!dp) return FR_INVALID_OBJECT;
 800b1e6:	2409      	movs	r4, #9
 800b1e8:	e7f3      	b.n	800b1d2 <f_opendir+0x84>

0800b1ea <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b1ea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b1ec:	4605      	mov	r5, r0
 800b1ee:	460e      	mov	r6, r1
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 800b1f0:	f7fe fe04 	bl	8009dfc <validate>
	if (res == FR_OK) {
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	b9e8      	cbnz	r0, 800b234 <f_readdir+0x4a>
		if (!fno) {
 800b1f8:	b92e      	cbnz	r6, 800b206 <f_readdir+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b1fa:	4601      	mov	r1, r0
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	f7ff f8a8 	bl	800a352 <dir_sdi>
 800b202:	4604      	mov	r4, r0
 800b204:	e016      	b.n	800b234 <f_readdir+0x4a>
		} else {
			INIT_BUF(*dp);
 800b206:	ab01      	add	r3, sp, #4
 800b208:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 800b20c:	4628      	mov	r0, r5
 800b20e:	f7ff fb47 	bl	800a8a0 <dir_read.constprop.13>
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800b212:	2804      	cmp	r0, #4
 800b214:	d111      	bne.n	800b23a <f_readdir+0x50>
				dp->sect = 0;
 800b216:	f8c5 4210 	str.w	r4, [r5, #528]	; 0x210
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
 800b21a:	4631      	mov	r1, r6
 800b21c:	4628      	mov	r0, r5
 800b21e:	f7fe fda7 	bl	8009d70 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b222:	2100      	movs	r1, #0
 800b224:	4628      	mov	r0, r5
 800b226:	f7ff f9d7 	bl	800a5d8 <dir_next>
				if (res == FR_NO_FILE) {
 800b22a:	2804      	cmp	r0, #4
 800b22c:	d1e9      	bne.n	800b202 <f_readdir+0x18>
					dp->sect = 0;
 800b22e:	2300      	movs	r3, #0
 800b230:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
}
 800b234:	4620      	mov	r0, r4
 800b236:	b004      	add	sp, #16
 800b238:	bd70      	pop	{r4, r5, r6, pc}
			if (res == FR_OK) {				/* A valid entry is found */
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d1e1      	bne.n	800b202 <f_readdir+0x18>
 800b23e:	e7ec      	b.n	800b21a <f_readdir+0x30>

0800b240 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800b240:	b530      	push	{r4, r5, lr}
 800b242:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
	DWORD dclst = 0;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 800b246:	2201      	movs	r2, #1
{
 800b248:	9001      	str	r0, [sp, #4]
	res = find_volume(&dj.fs, &path, 1);
 800b24a:	a901      	add	r1, sp, #4
 800b24c:	a886      	add	r0, sp, #536	; 0x218
 800b24e:	f7fe fed1 	bl	8009ff4 <find_volume>
	if (res == FR_OK) {
 800b252:	b988      	cbnz	r0, 800b278 <f_unlink+0x38>
		INIT_BUF(dj);
 800b254:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);		/* Follow the file path */
 800b256:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800b258:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);		/* Follow the file path */
 800b25a:	a806      	add	r0, sp, #24
 800b25c:	f7ff fa4c 	bl	800a6f8 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
 800b260:	b950      	cbnz	r0, 800b278 <f_unlink+0x38>
 800b262:	2102      	movs	r1, #2
 800b264:	a806      	add	r0, sp, #24
 800b266:	f7fe fcdd 	bl	8009c24 <chk_lock>
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b26a:	b928      	cbnz	r0, 800b278 <f_unlink+0x38>
			dir = dj.dir;
 800b26c:	998b      	ldr	r1, [sp, #556]	; 0x22c
			if (!dir) {
 800b26e:	b169      	cbz	r1, 800b28c <f_unlink+0x4c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 800b270:	7acd      	ldrb	r5, [r1, #11]
 800b272:	07ea      	lsls	r2, r5, #31
 800b274:	d50c      	bpl.n	800b290 <f_unlink+0x50>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b276:	2007      	movs	r0, #7
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
 800b278:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c
 800b27c:	bd30      	pop	{r4, r5, pc}
					res = remove_chain(dj.fs, dclst);
 800b27e:	4621      	mov	r1, r4
 800b280:	9886      	ldr	r0, [sp, #536]	; 0x218
 800b282:	f7ff fb74 	bl	800a96e <remove_chain>
				if (res == FR_OK) res = sync_fs(dj.fs);
 800b286:	2800      	cmp	r0, #0
 800b288:	d1f6      	bne.n	800b278 <f_unlink+0x38>
 800b28a:	e026      	b.n	800b2da <f_unlink+0x9a>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b28c:	2006      	movs	r0, #6
 800b28e:	e7f3      	b.n	800b278 <f_unlink+0x38>
				dclst = ld_clust(dj.fs, dir);
 800b290:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800b292:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800b296:	f7fe fdc8 	bl	8009e2a <ld_clust.isra.0>
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 800b29a:	4604      	mov	r4, r0
 800b29c:	b1b0      	cbz	r0, 800b2cc <f_unlink+0x8c>
 800b29e:	06eb      	lsls	r3, r5, #27
 800b2a0:	d514      	bpl.n	800b2cc <f_unlink+0x8c>
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 800b2a2:	a906      	add	r1, sp, #24
 800b2a4:	a88e      	add	r0, sp, #568	; 0x238
 800b2a6:	f44f 7208 	mov.w	r2, #544	; 0x220
 800b2aa:	f7fe fca9 	bl	8009c00 <mem_cpy>
						res = dir_sdi(&sdj, 2);
 800b2ae:	2102      	movs	r1, #2
 800b2b0:	a88e      	add	r0, sp, #568	; 0x238
						sdj.sclust = dclst;
 800b2b2:	f8cd 4440 	str.w	r4, [sp, #1088]	; 0x440
						res = dir_sdi(&sdj, 2);
 800b2b6:	f7ff f84c 	bl	800a352 <dir_sdi>
						if (res == FR_OK) {
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	d1dc      	bne.n	800b278 <f_unlink+0x38>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 800b2be:	a88e      	add	r0, sp, #568	; 0x238
 800b2c0:	f7ff faee 	bl	800a8a0 <dir_read.constprop.13>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 800b2c4:	2800      	cmp	r0, #0
 800b2c6:	d0d6      	beq.n	800b276 <f_unlink+0x36>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 800b2c8:	2804      	cmp	r0, #4
 800b2ca:	d1d5      	bne.n	800b278 <f_unlink+0x38>
				res = dir_remove(&dj);		/* Remove the directory entry */
 800b2cc:	a806      	add	r0, sp, #24
 800b2ce:	f7ff f88f 	bl	800a3f0 <dir_remove>
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d1d0      	bne.n	800b278 <f_unlink+0x38>
 800b2d6:	2c00      	cmp	r4, #0
 800b2d8:	d1d1      	bne.n	800b27e <f_unlink+0x3e>
				if (res == FR_OK) res = sync_fs(dj.fs);
 800b2da:	9886      	ldr	r0, [sp, #536]	; 0x218
 800b2dc:	f7fe fde3 	bl	8009ea6 <sync_fs>
 800b2e0:	e7ca      	b.n	800b278 <f_unlink+0x38>

0800b2e2 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the time stamp to be set */
)
{
 800b2e2:	b510      	push	{r4, lr}
 800b2e4:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800b2e8:	460c      	mov	r4, r1
 800b2ea:	9001      	str	r0, [sp, #4]
	BYTE *dir;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	a901      	add	r1, sp, #4
 800b2f0:	a886      	add	r0, sp, #536	; 0x218
 800b2f2:	f7fe fe7f 	bl	8009ff4 <find_volume>
	if (res == FR_OK) {
 800b2f6:	b9c0      	cbnz	r0, 800b32a <f_utime+0x48>
		INIT_BUF(dj);
 800b2f8:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 800b2fa:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800b2fc:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 800b2fe:	a806      	add	r0, sp, #24
 800b300:	f7ff f9fa 	bl	800a6f8 <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
 800b304:	b988      	cbnz	r0, 800b32a <f_utime+0x48>
			dir = dj.dir;
 800b306:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
			if (!dir) {					/* Root directory */
 800b308:	b193      	cbz	r3, 800b330 <f_utime+0x4e>
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir + DIR_WrtTime, fno->ftime);
 800b30a:	88e2      	ldrh	r2, [r4, #6]
 800b30c:	759a      	strb	r2, [r3, #22]
 800b30e:	88e2      	ldrh	r2, [r4, #6]
 800b310:	0a12      	lsrs	r2, r2, #8
 800b312:	75da      	strb	r2, [r3, #23]
				ST_WORD(dir + DIR_WrtDate, fno->fdate);
 800b314:	88a2      	ldrh	r2, [r4, #4]
 800b316:	761a      	strb	r2, [r3, #24]
 800b318:	88a2      	ldrh	r2, [r4, #4]
 800b31a:	0a12      	lsrs	r2, r2, #8
 800b31c:	765a      	strb	r2, [r3, #25]
				dj.fs->wflag = 1;
 800b31e:	9886      	ldr	r0, [sp, #536]	; 0x218
 800b320:	2301      	movs	r3, #1
 800b322:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
				res = sync_fs(dj.fs);
 800b326:	f7fe fdbe 	bl	8009ea6 <sync_fs>
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
 800b32a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800b32e:	bd10      	pop	{r4, pc}
				res = FR_INVALID_NAME;
 800b330:	2006      	movs	r0, #6
 800b332:	e7fa      	b.n	800b32a <f_utime+0x48>

0800b334 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b334:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 800b336:	4b0f      	ldr	r3, [pc, #60]	; (800b374 <FATFS_LinkDriverEx+0x40>)
 800b338:	7a5c      	ldrb	r4, [r3, #9]
 800b33a:	2c01      	cmp	r4, #1
 800b33c:	d818      	bhi.n	800b370 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b33e:	7a5d      	ldrb	r5, [r3, #9]
 800b340:	b2ed      	uxtb	r5, r5
 800b342:	2400      	movs	r4, #0
 800b344:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 800b346:	7a5d      	ldrb	r5, [r3, #9]
 800b348:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b34c:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 800b34e:	7a58      	ldrb	r0, [r3, #9]
 800b350:	4418      	add	r0, r3
 800b352:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800b354:	7a5a      	ldrb	r2, [r3, #9]
 800b356:	b2d2      	uxtb	r2, r2
 800b358:	1c50      	adds	r0, r2, #1
 800b35a:	b2c0      	uxtb	r0, r0
 800b35c:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 800b35e:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 800b360:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 800b362:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800b364:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800b366:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800b368:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800b36a:	70cc      	strb	r4, [r1, #3]
 800b36c:	4620      	mov	r0, r4
 800b36e:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800b370:	2001      	movs	r0, #1
    ret = 0;
  }
  
  return ret;
}
 800b372:	bd30      	pop	{r4, r5, pc}
 800b374:	20000860 	.word	0x20000860

0800b378 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800b378:	2200      	movs	r2, #0
 800b37a:	f7ff bfdb 	b.w	800b334 <FATFS_LinkDriverEx>
	...

0800b380 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{ 
  uint8_t DiskNum = 0;
  uint8_t ret = 1;
  
  if(disk.nbr >= 1)
 800b380:	4a0a      	ldr	r2, [pc, #40]	; (800b3ac <FATFS_UnLinkDriverEx+0x2c>)
 800b382:	7a53      	ldrb	r3, [r2, #9]
 800b384:	b17b      	cbz	r3, 800b3a6 <FATFS_UnLinkDriverEx+0x26>
  {    
    DiskNum = path[0] - '0';
 800b386:	7803      	ldrb	r3, [r0, #0]
 800b388:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800b390:	6848      	ldr	r0, [r1, #4]
 800b392:	b140      	cbz	r0, 800b3a6 <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 800b394:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 800b396:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 800b398:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 800b39a:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 800b39c:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	7253      	strb	r3, [r2, #9]
 800b3a4:	4770      	bx	lr
  uint8_t ret = 1;
 800b3a6:	2001      	movs	r0, #1
      ret = 0;
    }
  }
  
  return ret;
}
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	20000860 	.word	0x20000860

0800b3b0 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path  
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{ 
  return FATFS_UnLinkDriverEx(path, 0);
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	f7ff bfe5 	b.w	800b380 <FATFS_UnLinkDriverEx>
	...

0800b3b8 <__libc_init_array>:
 800b3b8:	b570      	push	{r4, r5, r6, lr}
 800b3ba:	4e0d      	ldr	r6, [pc, #52]	; (800b3f0 <__libc_init_array+0x38>)
 800b3bc:	4c0d      	ldr	r4, [pc, #52]	; (800b3f4 <__libc_init_array+0x3c>)
 800b3be:	1ba4      	subs	r4, r4, r6
 800b3c0:	10a4      	asrs	r4, r4, #2
 800b3c2:	2500      	movs	r5, #0
 800b3c4:	42a5      	cmp	r5, r4
 800b3c6:	d109      	bne.n	800b3dc <__libc_init_array+0x24>
 800b3c8:	4e0b      	ldr	r6, [pc, #44]	; (800b3f8 <__libc_init_array+0x40>)
 800b3ca:	4c0c      	ldr	r4, [pc, #48]	; (800b3fc <__libc_init_array+0x44>)
 800b3cc:	f001 fc30 	bl	800cc30 <_init>
 800b3d0:	1ba4      	subs	r4, r4, r6
 800b3d2:	10a4      	asrs	r4, r4, #2
 800b3d4:	2500      	movs	r5, #0
 800b3d6:	42a5      	cmp	r5, r4
 800b3d8:	d105      	bne.n	800b3e6 <__libc_init_array+0x2e>
 800b3da:	bd70      	pop	{r4, r5, r6, pc}
 800b3dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b3e0:	4798      	blx	r3
 800b3e2:	3501      	adds	r5, #1
 800b3e4:	e7ee      	b.n	800b3c4 <__libc_init_array+0xc>
 800b3e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b3ea:	4798      	blx	r3
 800b3ec:	3501      	adds	r5, #1
 800b3ee:	e7f2      	b.n	800b3d6 <__libc_init_array+0x1e>
 800b3f0:	0800d1a0 	.word	0x0800d1a0
 800b3f4:	0800d1a0 	.word	0x0800d1a0
 800b3f8:	0800d1a0 	.word	0x0800d1a0
 800b3fc:	0800d1a4 	.word	0x0800d1a4

0800b400 <malloc>:
 800b400:	4b02      	ldr	r3, [pc, #8]	; (800b40c <malloc+0xc>)
 800b402:	4601      	mov	r1, r0
 800b404:	6818      	ldr	r0, [r3, #0]
 800b406:	f000 b86d 	b.w	800b4e4 <_malloc_r>
 800b40a:	bf00      	nop
 800b40c:	200002a4 	.word	0x200002a4

0800b410 <free>:
 800b410:	4b02      	ldr	r3, [pc, #8]	; (800b41c <free+0xc>)
 800b412:	4601      	mov	r1, r0
 800b414:	6818      	ldr	r0, [r3, #0]
 800b416:	f000 b817 	b.w	800b448 <_free_r>
 800b41a:	bf00      	nop
 800b41c:	200002a4 	.word	0x200002a4

0800b420 <memcpy>:
 800b420:	b510      	push	{r4, lr}
 800b422:	1e43      	subs	r3, r0, #1
 800b424:	440a      	add	r2, r1
 800b426:	4291      	cmp	r1, r2
 800b428:	d100      	bne.n	800b42c <memcpy+0xc>
 800b42a:	bd10      	pop	{r4, pc}
 800b42c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b430:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b434:	e7f7      	b.n	800b426 <memcpy+0x6>

0800b436 <memset>:
 800b436:	4402      	add	r2, r0
 800b438:	4603      	mov	r3, r0
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d100      	bne.n	800b440 <memset+0xa>
 800b43e:	4770      	bx	lr
 800b440:	f803 1b01 	strb.w	r1, [r3], #1
 800b444:	e7f9      	b.n	800b43a <memset+0x4>
	...

0800b448 <_free_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	4605      	mov	r5, r0
 800b44c:	2900      	cmp	r1, #0
 800b44e:	d045      	beq.n	800b4dc <_free_r+0x94>
 800b450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b454:	1f0c      	subs	r4, r1, #4
 800b456:	2b00      	cmp	r3, #0
 800b458:	bfb8      	it	lt
 800b45a:	18e4      	addlt	r4, r4, r3
 800b45c:	f000 f923 	bl	800b6a6 <__malloc_lock>
 800b460:	4a1f      	ldr	r2, [pc, #124]	; (800b4e0 <_free_r+0x98>)
 800b462:	6813      	ldr	r3, [r2, #0]
 800b464:	4610      	mov	r0, r2
 800b466:	b933      	cbnz	r3, 800b476 <_free_r+0x2e>
 800b468:	6063      	str	r3, [r4, #4]
 800b46a:	6014      	str	r4, [r2, #0]
 800b46c:	4628      	mov	r0, r5
 800b46e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b472:	f000 b919 	b.w	800b6a8 <__malloc_unlock>
 800b476:	42a3      	cmp	r3, r4
 800b478:	d90c      	bls.n	800b494 <_free_r+0x4c>
 800b47a:	6821      	ldr	r1, [r4, #0]
 800b47c:	1862      	adds	r2, r4, r1
 800b47e:	4293      	cmp	r3, r2
 800b480:	bf04      	itt	eq
 800b482:	681a      	ldreq	r2, [r3, #0]
 800b484:	685b      	ldreq	r3, [r3, #4]
 800b486:	6063      	str	r3, [r4, #4]
 800b488:	bf04      	itt	eq
 800b48a:	1852      	addeq	r2, r2, r1
 800b48c:	6022      	streq	r2, [r4, #0]
 800b48e:	6004      	str	r4, [r0, #0]
 800b490:	e7ec      	b.n	800b46c <_free_r+0x24>
 800b492:	4613      	mov	r3, r2
 800b494:	685a      	ldr	r2, [r3, #4]
 800b496:	b10a      	cbz	r2, 800b49c <_free_r+0x54>
 800b498:	42a2      	cmp	r2, r4
 800b49a:	d9fa      	bls.n	800b492 <_free_r+0x4a>
 800b49c:	6819      	ldr	r1, [r3, #0]
 800b49e:	1858      	adds	r0, r3, r1
 800b4a0:	42a0      	cmp	r0, r4
 800b4a2:	d10b      	bne.n	800b4bc <_free_r+0x74>
 800b4a4:	6820      	ldr	r0, [r4, #0]
 800b4a6:	4401      	add	r1, r0
 800b4a8:	1858      	adds	r0, r3, r1
 800b4aa:	4282      	cmp	r2, r0
 800b4ac:	6019      	str	r1, [r3, #0]
 800b4ae:	d1dd      	bne.n	800b46c <_free_r+0x24>
 800b4b0:	6810      	ldr	r0, [r2, #0]
 800b4b2:	6852      	ldr	r2, [r2, #4]
 800b4b4:	605a      	str	r2, [r3, #4]
 800b4b6:	4401      	add	r1, r0
 800b4b8:	6019      	str	r1, [r3, #0]
 800b4ba:	e7d7      	b.n	800b46c <_free_r+0x24>
 800b4bc:	d902      	bls.n	800b4c4 <_free_r+0x7c>
 800b4be:	230c      	movs	r3, #12
 800b4c0:	602b      	str	r3, [r5, #0]
 800b4c2:	e7d3      	b.n	800b46c <_free_r+0x24>
 800b4c4:	6820      	ldr	r0, [r4, #0]
 800b4c6:	1821      	adds	r1, r4, r0
 800b4c8:	428a      	cmp	r2, r1
 800b4ca:	bf04      	itt	eq
 800b4cc:	6811      	ldreq	r1, [r2, #0]
 800b4ce:	6852      	ldreq	r2, [r2, #4]
 800b4d0:	6062      	str	r2, [r4, #4]
 800b4d2:	bf04      	itt	eq
 800b4d4:	1809      	addeq	r1, r1, r0
 800b4d6:	6021      	streq	r1, [r4, #0]
 800b4d8:	605c      	str	r4, [r3, #4]
 800b4da:	e7c7      	b.n	800b46c <_free_r+0x24>
 800b4dc:	bd38      	pop	{r3, r4, r5, pc}
 800b4de:	bf00      	nop
 800b4e0:	2000086c 	.word	0x2000086c

0800b4e4 <_malloc_r>:
 800b4e4:	b570      	push	{r4, r5, r6, lr}
 800b4e6:	1ccd      	adds	r5, r1, #3
 800b4e8:	f025 0503 	bic.w	r5, r5, #3
 800b4ec:	3508      	adds	r5, #8
 800b4ee:	2d0c      	cmp	r5, #12
 800b4f0:	bf38      	it	cc
 800b4f2:	250c      	movcc	r5, #12
 800b4f4:	2d00      	cmp	r5, #0
 800b4f6:	4606      	mov	r6, r0
 800b4f8:	db01      	blt.n	800b4fe <_malloc_r+0x1a>
 800b4fa:	42a9      	cmp	r1, r5
 800b4fc:	d903      	bls.n	800b506 <_malloc_r+0x22>
 800b4fe:	230c      	movs	r3, #12
 800b500:	6033      	str	r3, [r6, #0]
 800b502:	2000      	movs	r0, #0
 800b504:	bd70      	pop	{r4, r5, r6, pc}
 800b506:	f000 f8ce 	bl	800b6a6 <__malloc_lock>
 800b50a:	4a23      	ldr	r2, [pc, #140]	; (800b598 <_malloc_r+0xb4>)
 800b50c:	6814      	ldr	r4, [r2, #0]
 800b50e:	4621      	mov	r1, r4
 800b510:	b991      	cbnz	r1, 800b538 <_malloc_r+0x54>
 800b512:	4c22      	ldr	r4, [pc, #136]	; (800b59c <_malloc_r+0xb8>)
 800b514:	6823      	ldr	r3, [r4, #0]
 800b516:	b91b      	cbnz	r3, 800b520 <_malloc_r+0x3c>
 800b518:	4630      	mov	r0, r6
 800b51a:	f000 f841 	bl	800b5a0 <_sbrk_r>
 800b51e:	6020      	str	r0, [r4, #0]
 800b520:	4629      	mov	r1, r5
 800b522:	4630      	mov	r0, r6
 800b524:	f000 f83c 	bl	800b5a0 <_sbrk_r>
 800b528:	1c43      	adds	r3, r0, #1
 800b52a:	d126      	bne.n	800b57a <_malloc_r+0x96>
 800b52c:	230c      	movs	r3, #12
 800b52e:	6033      	str	r3, [r6, #0]
 800b530:	4630      	mov	r0, r6
 800b532:	f000 f8b9 	bl	800b6a8 <__malloc_unlock>
 800b536:	e7e4      	b.n	800b502 <_malloc_r+0x1e>
 800b538:	680b      	ldr	r3, [r1, #0]
 800b53a:	1b5b      	subs	r3, r3, r5
 800b53c:	d41a      	bmi.n	800b574 <_malloc_r+0x90>
 800b53e:	2b0b      	cmp	r3, #11
 800b540:	d90f      	bls.n	800b562 <_malloc_r+0x7e>
 800b542:	600b      	str	r3, [r1, #0]
 800b544:	50cd      	str	r5, [r1, r3]
 800b546:	18cc      	adds	r4, r1, r3
 800b548:	4630      	mov	r0, r6
 800b54a:	f000 f8ad 	bl	800b6a8 <__malloc_unlock>
 800b54e:	f104 000b 	add.w	r0, r4, #11
 800b552:	1d23      	adds	r3, r4, #4
 800b554:	f020 0007 	bic.w	r0, r0, #7
 800b558:	1ac3      	subs	r3, r0, r3
 800b55a:	d01b      	beq.n	800b594 <_malloc_r+0xb0>
 800b55c:	425a      	negs	r2, r3
 800b55e:	50e2      	str	r2, [r4, r3]
 800b560:	bd70      	pop	{r4, r5, r6, pc}
 800b562:	428c      	cmp	r4, r1
 800b564:	bf0d      	iteet	eq
 800b566:	6863      	ldreq	r3, [r4, #4]
 800b568:	684b      	ldrne	r3, [r1, #4]
 800b56a:	6063      	strne	r3, [r4, #4]
 800b56c:	6013      	streq	r3, [r2, #0]
 800b56e:	bf18      	it	ne
 800b570:	460c      	movne	r4, r1
 800b572:	e7e9      	b.n	800b548 <_malloc_r+0x64>
 800b574:	460c      	mov	r4, r1
 800b576:	6849      	ldr	r1, [r1, #4]
 800b578:	e7ca      	b.n	800b510 <_malloc_r+0x2c>
 800b57a:	1cc4      	adds	r4, r0, #3
 800b57c:	f024 0403 	bic.w	r4, r4, #3
 800b580:	42a0      	cmp	r0, r4
 800b582:	d005      	beq.n	800b590 <_malloc_r+0xac>
 800b584:	1a21      	subs	r1, r4, r0
 800b586:	4630      	mov	r0, r6
 800b588:	f000 f80a 	bl	800b5a0 <_sbrk_r>
 800b58c:	3001      	adds	r0, #1
 800b58e:	d0cd      	beq.n	800b52c <_malloc_r+0x48>
 800b590:	6025      	str	r5, [r4, #0]
 800b592:	e7d9      	b.n	800b548 <_malloc_r+0x64>
 800b594:	bd70      	pop	{r4, r5, r6, pc}
 800b596:	bf00      	nop
 800b598:	2000086c 	.word	0x2000086c
 800b59c:	20000870 	.word	0x20000870

0800b5a0 <_sbrk_r>:
 800b5a0:	b538      	push	{r3, r4, r5, lr}
 800b5a2:	4c06      	ldr	r4, [pc, #24]	; (800b5bc <_sbrk_r+0x1c>)
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	4608      	mov	r0, r1
 800b5aa:	6023      	str	r3, [r4, #0]
 800b5ac:	f001 fb32 	bl	800cc14 <_sbrk>
 800b5b0:	1c43      	adds	r3, r0, #1
 800b5b2:	d102      	bne.n	800b5ba <_sbrk_r+0x1a>
 800b5b4:	6823      	ldr	r3, [r4, #0]
 800b5b6:	b103      	cbz	r3, 800b5ba <_sbrk_r+0x1a>
 800b5b8:	602b      	str	r3, [r5, #0]
 800b5ba:	bd38      	pop	{r3, r4, r5, pc}
 800b5bc:	2000b018 	.word	0x2000b018

0800b5c0 <siprintf>:
 800b5c0:	b40e      	push	{r1, r2, r3}
 800b5c2:	b500      	push	{lr}
 800b5c4:	b09c      	sub	sp, #112	; 0x70
 800b5c6:	f44f 7102 	mov.w	r1, #520	; 0x208
 800b5ca:	ab1d      	add	r3, sp, #116	; 0x74
 800b5cc:	f8ad 1014 	strh.w	r1, [sp, #20]
 800b5d0:	9002      	str	r0, [sp, #8]
 800b5d2:	9006      	str	r0, [sp, #24]
 800b5d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b5d8:	480a      	ldr	r0, [pc, #40]	; (800b604 <siprintf+0x44>)
 800b5da:	9104      	str	r1, [sp, #16]
 800b5dc:	9107      	str	r1, [sp, #28]
 800b5de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b5e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5e6:	f8ad 1016 	strh.w	r1, [sp, #22]
 800b5ea:	6800      	ldr	r0, [r0, #0]
 800b5ec:	9301      	str	r3, [sp, #4]
 800b5ee:	a902      	add	r1, sp, #8
 800b5f0:	f000 f8b6 	bl	800b760 <_svfiprintf_r>
 800b5f4:	9b02      	ldr	r3, [sp, #8]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	701a      	strb	r2, [r3, #0]
 800b5fa:	b01c      	add	sp, #112	; 0x70
 800b5fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b600:	b003      	add	sp, #12
 800b602:	4770      	bx	lr
 800b604:	200002a4 	.word	0x200002a4

0800b608 <siscanf>:
 800b608:	b40e      	push	{r1, r2, r3}
 800b60a:	b530      	push	{r4, r5, lr}
 800b60c:	b09c      	sub	sp, #112	; 0x70
 800b60e:	ac1f      	add	r4, sp, #124	; 0x7c
 800b610:	f44f 7201 	mov.w	r2, #516	; 0x204
 800b614:	f854 5b04 	ldr.w	r5, [r4], #4
 800b618:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b61c:	9002      	str	r0, [sp, #8]
 800b61e:	9006      	str	r0, [sp, #24]
 800b620:	f7f4 fdd6 	bl	80001d0 <strlen>
 800b624:	4b0b      	ldr	r3, [pc, #44]	; (800b654 <siscanf+0x4c>)
 800b626:	9003      	str	r0, [sp, #12]
 800b628:	9007      	str	r0, [sp, #28]
 800b62a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b62c:	480a      	ldr	r0, [pc, #40]	; (800b658 <siscanf+0x50>)
 800b62e:	9401      	str	r4, [sp, #4]
 800b630:	2300      	movs	r3, #0
 800b632:	930f      	str	r3, [sp, #60]	; 0x3c
 800b634:	9314      	str	r3, [sp, #80]	; 0x50
 800b636:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b63a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b63e:	462a      	mov	r2, r5
 800b640:	4623      	mov	r3, r4
 800b642:	a902      	add	r1, sp, #8
 800b644:	6800      	ldr	r0, [r0, #0]
 800b646:	f000 f9d9 	bl	800b9fc <__ssvfiscanf_r>
 800b64a:	b01c      	add	sp, #112	; 0x70
 800b64c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b650:	b003      	add	sp, #12
 800b652:	4770      	bx	lr
 800b654:	0800b65d 	.word	0x0800b65d
 800b658:	200002a4 	.word	0x200002a4

0800b65c <__seofread>:
 800b65c:	2000      	movs	r0, #0
 800b65e:	4770      	bx	lr

0800b660 <strcpy>:
 800b660:	4603      	mov	r3, r0
 800b662:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b666:	f803 2b01 	strb.w	r2, [r3], #1
 800b66a:	2a00      	cmp	r2, #0
 800b66c:	d1f9      	bne.n	800b662 <strcpy+0x2>
 800b66e:	4770      	bx	lr

0800b670 <strstr>:
 800b670:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b672:	7803      	ldrb	r3, [r0, #0]
 800b674:	b133      	cbz	r3, 800b684 <strstr+0x14>
 800b676:	4603      	mov	r3, r0
 800b678:	4618      	mov	r0, r3
 800b67a:	1c5e      	adds	r6, r3, #1
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	b933      	cbnz	r3, 800b68e <strstr+0x1e>
 800b680:	4618      	mov	r0, r3
 800b682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b684:	780b      	ldrb	r3, [r1, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	bf18      	it	ne
 800b68a:	2000      	movne	r0, #0
 800b68c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b68e:	1e4d      	subs	r5, r1, #1
 800b690:	1e44      	subs	r4, r0, #1
 800b692:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800b696:	2a00      	cmp	r2, #0
 800b698:	d0f3      	beq.n	800b682 <strstr+0x12>
 800b69a:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800b69e:	4297      	cmp	r7, r2
 800b6a0:	4633      	mov	r3, r6
 800b6a2:	d0f6      	beq.n	800b692 <strstr+0x22>
 800b6a4:	e7e8      	b.n	800b678 <strstr+0x8>

0800b6a6 <__malloc_lock>:
 800b6a6:	4770      	bx	lr

0800b6a8 <__malloc_unlock>:
 800b6a8:	4770      	bx	lr

0800b6aa <__ssputs_r>:
 800b6aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6ae:	688e      	ldr	r6, [r1, #8]
 800b6b0:	429e      	cmp	r6, r3
 800b6b2:	4682      	mov	sl, r0
 800b6b4:	460c      	mov	r4, r1
 800b6b6:	4691      	mov	r9, r2
 800b6b8:	4698      	mov	r8, r3
 800b6ba:	d835      	bhi.n	800b728 <__ssputs_r+0x7e>
 800b6bc:	898a      	ldrh	r2, [r1, #12]
 800b6be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6c2:	d031      	beq.n	800b728 <__ssputs_r+0x7e>
 800b6c4:	6825      	ldr	r5, [r4, #0]
 800b6c6:	6909      	ldr	r1, [r1, #16]
 800b6c8:	1a6f      	subs	r7, r5, r1
 800b6ca:	6965      	ldr	r5, [r4, #20]
 800b6cc:	2302      	movs	r3, #2
 800b6ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6d2:	fb95 f5f3 	sdiv	r5, r5, r3
 800b6d6:	f108 0301 	add.w	r3, r8, #1
 800b6da:	443b      	add	r3, r7
 800b6dc:	429d      	cmp	r5, r3
 800b6de:	bf38      	it	cc
 800b6e0:	461d      	movcc	r5, r3
 800b6e2:	0553      	lsls	r3, r2, #21
 800b6e4:	d531      	bpl.n	800b74a <__ssputs_r+0xa0>
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	f7ff fefc 	bl	800b4e4 <_malloc_r>
 800b6ec:	4606      	mov	r6, r0
 800b6ee:	b950      	cbnz	r0, 800b706 <__ssputs_r+0x5c>
 800b6f0:	230c      	movs	r3, #12
 800b6f2:	f8ca 3000 	str.w	r3, [sl]
 800b6f6:	89a3      	ldrh	r3, [r4, #12]
 800b6f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6fc:	81a3      	strh	r3, [r4, #12]
 800b6fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b706:	463a      	mov	r2, r7
 800b708:	6921      	ldr	r1, [r4, #16]
 800b70a:	f7ff fe89 	bl	800b420 <memcpy>
 800b70e:	89a3      	ldrh	r3, [r4, #12]
 800b710:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b718:	81a3      	strh	r3, [r4, #12]
 800b71a:	6126      	str	r6, [r4, #16]
 800b71c:	6165      	str	r5, [r4, #20]
 800b71e:	443e      	add	r6, r7
 800b720:	1bed      	subs	r5, r5, r7
 800b722:	6026      	str	r6, [r4, #0]
 800b724:	60a5      	str	r5, [r4, #8]
 800b726:	4646      	mov	r6, r8
 800b728:	4546      	cmp	r6, r8
 800b72a:	bf28      	it	cs
 800b72c:	4646      	movcs	r6, r8
 800b72e:	4632      	mov	r2, r6
 800b730:	4649      	mov	r1, r9
 800b732:	6820      	ldr	r0, [r4, #0]
 800b734:	f000 ff54 	bl	800c5e0 <memmove>
 800b738:	68a3      	ldr	r3, [r4, #8]
 800b73a:	1b9b      	subs	r3, r3, r6
 800b73c:	60a3      	str	r3, [r4, #8]
 800b73e:	6823      	ldr	r3, [r4, #0]
 800b740:	441e      	add	r6, r3
 800b742:	6026      	str	r6, [r4, #0]
 800b744:	2000      	movs	r0, #0
 800b746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b74a:	462a      	mov	r2, r5
 800b74c:	f000 ff62 	bl	800c614 <_realloc_r>
 800b750:	4606      	mov	r6, r0
 800b752:	2800      	cmp	r0, #0
 800b754:	d1e1      	bne.n	800b71a <__ssputs_r+0x70>
 800b756:	6921      	ldr	r1, [r4, #16]
 800b758:	4650      	mov	r0, sl
 800b75a:	f7ff fe75 	bl	800b448 <_free_r>
 800b75e:	e7c7      	b.n	800b6f0 <__ssputs_r+0x46>

0800b760 <_svfiprintf_r>:
 800b760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b764:	b09d      	sub	sp, #116	; 0x74
 800b766:	4680      	mov	r8, r0
 800b768:	9303      	str	r3, [sp, #12]
 800b76a:	898b      	ldrh	r3, [r1, #12]
 800b76c:	061c      	lsls	r4, r3, #24
 800b76e:	460d      	mov	r5, r1
 800b770:	4616      	mov	r6, r2
 800b772:	d50f      	bpl.n	800b794 <_svfiprintf_r+0x34>
 800b774:	690b      	ldr	r3, [r1, #16]
 800b776:	b96b      	cbnz	r3, 800b794 <_svfiprintf_r+0x34>
 800b778:	2140      	movs	r1, #64	; 0x40
 800b77a:	f7ff feb3 	bl	800b4e4 <_malloc_r>
 800b77e:	6028      	str	r0, [r5, #0]
 800b780:	6128      	str	r0, [r5, #16]
 800b782:	b928      	cbnz	r0, 800b790 <_svfiprintf_r+0x30>
 800b784:	230c      	movs	r3, #12
 800b786:	f8c8 3000 	str.w	r3, [r8]
 800b78a:	f04f 30ff 	mov.w	r0, #4294967295
 800b78e:	e0c5      	b.n	800b91c <_svfiprintf_r+0x1bc>
 800b790:	2340      	movs	r3, #64	; 0x40
 800b792:	616b      	str	r3, [r5, #20]
 800b794:	2300      	movs	r3, #0
 800b796:	9309      	str	r3, [sp, #36]	; 0x24
 800b798:	2320      	movs	r3, #32
 800b79a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b79e:	2330      	movs	r3, #48	; 0x30
 800b7a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7a4:	f04f 0b01 	mov.w	fp, #1
 800b7a8:	4637      	mov	r7, r6
 800b7aa:	463c      	mov	r4, r7
 800b7ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d13c      	bne.n	800b82e <_svfiprintf_r+0xce>
 800b7b4:	ebb7 0a06 	subs.w	sl, r7, r6
 800b7b8:	d00b      	beq.n	800b7d2 <_svfiprintf_r+0x72>
 800b7ba:	4653      	mov	r3, sl
 800b7bc:	4632      	mov	r2, r6
 800b7be:	4629      	mov	r1, r5
 800b7c0:	4640      	mov	r0, r8
 800b7c2:	f7ff ff72 	bl	800b6aa <__ssputs_r>
 800b7c6:	3001      	adds	r0, #1
 800b7c8:	f000 80a3 	beq.w	800b912 <_svfiprintf_r+0x1b2>
 800b7cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7ce:	4453      	add	r3, sl
 800b7d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b7d2:	783b      	ldrb	r3, [r7, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f000 809c 	beq.w	800b912 <_svfiprintf_r+0x1b2>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e0:	9304      	str	r3, [sp, #16]
 800b7e2:	9307      	str	r3, [sp, #28]
 800b7e4:	9205      	str	r2, [sp, #20]
 800b7e6:	9306      	str	r3, [sp, #24]
 800b7e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7ec:	931a      	str	r3, [sp, #104]	; 0x68
 800b7ee:	2205      	movs	r2, #5
 800b7f0:	7821      	ldrb	r1, [r4, #0]
 800b7f2:	4850      	ldr	r0, [pc, #320]	; (800b934 <_svfiprintf_r+0x1d4>)
 800b7f4:	f7f4 fcf4 	bl	80001e0 <memchr>
 800b7f8:	1c67      	adds	r7, r4, #1
 800b7fa:	9b04      	ldr	r3, [sp, #16]
 800b7fc:	b9d8      	cbnz	r0, 800b836 <_svfiprintf_r+0xd6>
 800b7fe:	06d9      	lsls	r1, r3, #27
 800b800:	bf44      	itt	mi
 800b802:	2220      	movmi	r2, #32
 800b804:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b808:	071a      	lsls	r2, r3, #28
 800b80a:	bf44      	itt	mi
 800b80c:	222b      	movmi	r2, #43	; 0x2b
 800b80e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b812:	7822      	ldrb	r2, [r4, #0]
 800b814:	2a2a      	cmp	r2, #42	; 0x2a
 800b816:	d016      	beq.n	800b846 <_svfiprintf_r+0xe6>
 800b818:	9a07      	ldr	r2, [sp, #28]
 800b81a:	2100      	movs	r1, #0
 800b81c:	200a      	movs	r0, #10
 800b81e:	4627      	mov	r7, r4
 800b820:	3401      	adds	r4, #1
 800b822:	783b      	ldrb	r3, [r7, #0]
 800b824:	3b30      	subs	r3, #48	; 0x30
 800b826:	2b09      	cmp	r3, #9
 800b828:	d951      	bls.n	800b8ce <_svfiprintf_r+0x16e>
 800b82a:	b1c9      	cbz	r1, 800b860 <_svfiprintf_r+0x100>
 800b82c:	e011      	b.n	800b852 <_svfiprintf_r+0xf2>
 800b82e:	2b25      	cmp	r3, #37	; 0x25
 800b830:	d0c0      	beq.n	800b7b4 <_svfiprintf_r+0x54>
 800b832:	4627      	mov	r7, r4
 800b834:	e7b9      	b.n	800b7aa <_svfiprintf_r+0x4a>
 800b836:	4a3f      	ldr	r2, [pc, #252]	; (800b934 <_svfiprintf_r+0x1d4>)
 800b838:	1a80      	subs	r0, r0, r2
 800b83a:	fa0b f000 	lsl.w	r0, fp, r0
 800b83e:	4318      	orrs	r0, r3
 800b840:	9004      	str	r0, [sp, #16]
 800b842:	463c      	mov	r4, r7
 800b844:	e7d3      	b.n	800b7ee <_svfiprintf_r+0x8e>
 800b846:	9a03      	ldr	r2, [sp, #12]
 800b848:	1d11      	adds	r1, r2, #4
 800b84a:	6812      	ldr	r2, [r2, #0]
 800b84c:	9103      	str	r1, [sp, #12]
 800b84e:	2a00      	cmp	r2, #0
 800b850:	db01      	blt.n	800b856 <_svfiprintf_r+0xf6>
 800b852:	9207      	str	r2, [sp, #28]
 800b854:	e004      	b.n	800b860 <_svfiprintf_r+0x100>
 800b856:	4252      	negs	r2, r2
 800b858:	f043 0302 	orr.w	r3, r3, #2
 800b85c:	9207      	str	r2, [sp, #28]
 800b85e:	9304      	str	r3, [sp, #16]
 800b860:	783b      	ldrb	r3, [r7, #0]
 800b862:	2b2e      	cmp	r3, #46	; 0x2e
 800b864:	d10e      	bne.n	800b884 <_svfiprintf_r+0x124>
 800b866:	787b      	ldrb	r3, [r7, #1]
 800b868:	2b2a      	cmp	r3, #42	; 0x2a
 800b86a:	f107 0101 	add.w	r1, r7, #1
 800b86e:	d132      	bne.n	800b8d6 <_svfiprintf_r+0x176>
 800b870:	9b03      	ldr	r3, [sp, #12]
 800b872:	1d1a      	adds	r2, r3, #4
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	9203      	str	r2, [sp, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	bfb8      	it	lt
 800b87c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b880:	3702      	adds	r7, #2
 800b882:	9305      	str	r3, [sp, #20]
 800b884:	4c2c      	ldr	r4, [pc, #176]	; (800b938 <_svfiprintf_r+0x1d8>)
 800b886:	7839      	ldrb	r1, [r7, #0]
 800b888:	2203      	movs	r2, #3
 800b88a:	4620      	mov	r0, r4
 800b88c:	f7f4 fca8 	bl	80001e0 <memchr>
 800b890:	b138      	cbz	r0, 800b8a2 <_svfiprintf_r+0x142>
 800b892:	2340      	movs	r3, #64	; 0x40
 800b894:	1b00      	subs	r0, r0, r4
 800b896:	fa03 f000 	lsl.w	r0, r3, r0
 800b89a:	9b04      	ldr	r3, [sp, #16]
 800b89c:	4303      	orrs	r3, r0
 800b89e:	9304      	str	r3, [sp, #16]
 800b8a0:	3701      	adds	r7, #1
 800b8a2:	7839      	ldrb	r1, [r7, #0]
 800b8a4:	4825      	ldr	r0, [pc, #148]	; (800b93c <_svfiprintf_r+0x1dc>)
 800b8a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8aa:	2206      	movs	r2, #6
 800b8ac:	1c7e      	adds	r6, r7, #1
 800b8ae:	f7f4 fc97 	bl	80001e0 <memchr>
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	d035      	beq.n	800b922 <_svfiprintf_r+0x1c2>
 800b8b6:	4b22      	ldr	r3, [pc, #136]	; (800b940 <_svfiprintf_r+0x1e0>)
 800b8b8:	b9fb      	cbnz	r3, 800b8fa <_svfiprintf_r+0x19a>
 800b8ba:	9b03      	ldr	r3, [sp, #12]
 800b8bc:	3307      	adds	r3, #7
 800b8be:	f023 0307 	bic.w	r3, r3, #7
 800b8c2:	3308      	adds	r3, #8
 800b8c4:	9303      	str	r3, [sp, #12]
 800b8c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c8:	444b      	add	r3, r9
 800b8ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b8cc:	e76c      	b.n	800b7a8 <_svfiprintf_r+0x48>
 800b8ce:	fb00 3202 	mla	r2, r0, r2, r3
 800b8d2:	2101      	movs	r1, #1
 800b8d4:	e7a3      	b.n	800b81e <_svfiprintf_r+0xbe>
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	9305      	str	r3, [sp, #20]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	240a      	movs	r4, #10
 800b8de:	460f      	mov	r7, r1
 800b8e0:	3101      	adds	r1, #1
 800b8e2:	783a      	ldrb	r2, [r7, #0]
 800b8e4:	3a30      	subs	r2, #48	; 0x30
 800b8e6:	2a09      	cmp	r2, #9
 800b8e8:	d903      	bls.n	800b8f2 <_svfiprintf_r+0x192>
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d0ca      	beq.n	800b884 <_svfiprintf_r+0x124>
 800b8ee:	9005      	str	r0, [sp, #20]
 800b8f0:	e7c8      	b.n	800b884 <_svfiprintf_r+0x124>
 800b8f2:	fb04 2000 	mla	r0, r4, r0, r2
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e7f1      	b.n	800b8de <_svfiprintf_r+0x17e>
 800b8fa:	ab03      	add	r3, sp, #12
 800b8fc:	9300      	str	r3, [sp, #0]
 800b8fe:	462a      	mov	r2, r5
 800b900:	4b10      	ldr	r3, [pc, #64]	; (800b944 <_svfiprintf_r+0x1e4>)
 800b902:	a904      	add	r1, sp, #16
 800b904:	4640      	mov	r0, r8
 800b906:	f3af 8000 	nop.w
 800b90a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b90e:	4681      	mov	r9, r0
 800b910:	d1d9      	bne.n	800b8c6 <_svfiprintf_r+0x166>
 800b912:	89ab      	ldrh	r3, [r5, #12]
 800b914:	065b      	lsls	r3, r3, #25
 800b916:	f53f af38 	bmi.w	800b78a <_svfiprintf_r+0x2a>
 800b91a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b91c:	b01d      	add	sp, #116	; 0x74
 800b91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b922:	ab03      	add	r3, sp, #12
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	462a      	mov	r2, r5
 800b928:	4b06      	ldr	r3, [pc, #24]	; (800b944 <_svfiprintf_r+0x1e4>)
 800b92a:	a904      	add	r1, sp, #16
 800b92c:	4640      	mov	r0, r8
 800b92e:	f000 fa2f 	bl	800bd90 <_printf_i>
 800b932:	e7ea      	b.n	800b90a <_svfiprintf_r+0x1aa>
 800b934:	0800cf93 	.word	0x0800cf93
 800b938:	0800cf99 	.word	0x0800cf99
 800b93c:	0800cf9d 	.word	0x0800cf9d
 800b940:	00000000 	.word	0x00000000
 800b944:	0800b6ab 	.word	0x0800b6ab

0800b948 <_sungetc_r>:
 800b948:	b538      	push	{r3, r4, r5, lr}
 800b94a:	1c4b      	adds	r3, r1, #1
 800b94c:	4614      	mov	r4, r2
 800b94e:	d103      	bne.n	800b958 <_sungetc_r+0x10>
 800b950:	f04f 35ff 	mov.w	r5, #4294967295
 800b954:	4628      	mov	r0, r5
 800b956:	bd38      	pop	{r3, r4, r5, pc}
 800b958:	8993      	ldrh	r3, [r2, #12]
 800b95a:	f023 0320 	bic.w	r3, r3, #32
 800b95e:	8193      	strh	r3, [r2, #12]
 800b960:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800b962:	6852      	ldr	r2, [r2, #4]
 800b964:	b2cd      	uxtb	r5, r1
 800b966:	b18b      	cbz	r3, 800b98c <_sungetc_r+0x44>
 800b968:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b96a:	429a      	cmp	r2, r3
 800b96c:	da08      	bge.n	800b980 <_sungetc_r+0x38>
 800b96e:	6823      	ldr	r3, [r4, #0]
 800b970:	1e5a      	subs	r2, r3, #1
 800b972:	6022      	str	r2, [r4, #0]
 800b974:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b978:	6863      	ldr	r3, [r4, #4]
 800b97a:	3301      	adds	r3, #1
 800b97c:	6063      	str	r3, [r4, #4]
 800b97e:	e7e9      	b.n	800b954 <_sungetc_r+0xc>
 800b980:	4621      	mov	r1, r4
 800b982:	f000 fdcf 	bl	800c524 <__submore>
 800b986:	2800      	cmp	r0, #0
 800b988:	d0f1      	beq.n	800b96e <_sungetc_r+0x26>
 800b98a:	e7e1      	b.n	800b950 <_sungetc_r+0x8>
 800b98c:	6921      	ldr	r1, [r4, #16]
 800b98e:	6823      	ldr	r3, [r4, #0]
 800b990:	b151      	cbz	r1, 800b9a8 <_sungetc_r+0x60>
 800b992:	4299      	cmp	r1, r3
 800b994:	d208      	bcs.n	800b9a8 <_sungetc_r+0x60>
 800b996:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b99a:	428d      	cmp	r5, r1
 800b99c:	d104      	bne.n	800b9a8 <_sungetc_r+0x60>
 800b99e:	3b01      	subs	r3, #1
 800b9a0:	3201      	adds	r2, #1
 800b9a2:	6023      	str	r3, [r4, #0]
 800b9a4:	6062      	str	r2, [r4, #4]
 800b9a6:	e7d5      	b.n	800b954 <_sungetc_r+0xc>
 800b9a8:	63e3      	str	r3, [r4, #60]	; 0x3c
 800b9aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9ae:	6363      	str	r3, [r4, #52]	; 0x34
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	63a3      	str	r3, [r4, #56]	; 0x38
 800b9b4:	4623      	mov	r3, r4
 800b9b6:	6422      	str	r2, [r4, #64]	; 0x40
 800b9b8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b9bc:	6023      	str	r3, [r4, #0]
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e7dc      	b.n	800b97c <_sungetc_r+0x34>

0800b9c2 <__ssrefill_r>:
 800b9c2:	b510      	push	{r4, lr}
 800b9c4:	460c      	mov	r4, r1
 800b9c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b9c8:	b169      	cbz	r1, 800b9e6 <__ssrefill_r+0x24>
 800b9ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9ce:	4299      	cmp	r1, r3
 800b9d0:	d001      	beq.n	800b9d6 <__ssrefill_r+0x14>
 800b9d2:	f7ff fd39 	bl	800b448 <_free_r>
 800b9d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9d8:	6063      	str	r3, [r4, #4]
 800b9da:	2000      	movs	r0, #0
 800b9dc:	6360      	str	r0, [r4, #52]	; 0x34
 800b9de:	b113      	cbz	r3, 800b9e6 <__ssrefill_r+0x24>
 800b9e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b9e2:	6023      	str	r3, [r4, #0]
 800b9e4:	bd10      	pop	{r4, pc}
 800b9e6:	6923      	ldr	r3, [r4, #16]
 800b9e8:	6023      	str	r3, [r4, #0]
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	6063      	str	r3, [r4, #4]
 800b9ee:	89a3      	ldrh	r3, [r4, #12]
 800b9f0:	f043 0320 	orr.w	r3, r3, #32
 800b9f4:	81a3      	strh	r3, [r4, #12]
 800b9f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9fa:	bd10      	pop	{r4, pc}

0800b9fc <__ssvfiscanf_r>:
 800b9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba00:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800ba04:	f10d 080c 	add.w	r8, sp, #12
 800ba08:	9301      	str	r3, [sp, #4]
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	9346      	str	r3, [sp, #280]	; 0x118
 800ba0e:	9347      	str	r3, [sp, #284]	; 0x11c
 800ba10:	4ba0      	ldr	r3, [pc, #640]	; (800bc94 <__ssvfiscanf_r+0x298>)
 800ba12:	93a2      	str	r3, [sp, #648]	; 0x288
 800ba14:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800bc9c <__ssvfiscanf_r+0x2a0>
 800ba18:	4b9f      	ldr	r3, [pc, #636]	; (800bc98 <__ssvfiscanf_r+0x29c>)
 800ba1a:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800ba1e:	4606      	mov	r6, r0
 800ba20:	460c      	mov	r4, r1
 800ba22:	93a3      	str	r3, [sp, #652]	; 0x28c
 800ba24:	4692      	mov	sl, r2
 800ba26:	270a      	movs	r7, #10
 800ba28:	f89a 3000 	ldrb.w	r3, [sl]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f000 812f 	beq.w	800bc90 <__ssvfiscanf_r+0x294>
 800ba32:	f000 fdb5 	bl	800c5a0 <__locale_ctype_ptr>
 800ba36:	f89a b000 	ldrb.w	fp, [sl]
 800ba3a:	4458      	add	r0, fp
 800ba3c:	7843      	ldrb	r3, [r0, #1]
 800ba3e:	f013 0308 	ands.w	r3, r3, #8
 800ba42:	d143      	bne.n	800bacc <__ssvfiscanf_r+0xd0>
 800ba44:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800ba48:	f10a 0501 	add.w	r5, sl, #1
 800ba4c:	f040 8099 	bne.w	800bb82 <__ssvfiscanf_r+0x186>
 800ba50:	9345      	str	r3, [sp, #276]	; 0x114
 800ba52:	9343      	str	r3, [sp, #268]	; 0x10c
 800ba54:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800ba58:	2b2a      	cmp	r3, #42	; 0x2a
 800ba5a:	d103      	bne.n	800ba64 <__ssvfiscanf_r+0x68>
 800ba5c:	2310      	movs	r3, #16
 800ba5e:	9343      	str	r3, [sp, #268]	; 0x10c
 800ba60:	f10a 0502 	add.w	r5, sl, #2
 800ba64:	7829      	ldrb	r1, [r5, #0]
 800ba66:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ba6a:	2a09      	cmp	r2, #9
 800ba6c:	46aa      	mov	sl, r5
 800ba6e:	f105 0501 	add.w	r5, r5, #1
 800ba72:	d941      	bls.n	800baf8 <__ssvfiscanf_r+0xfc>
 800ba74:	2203      	movs	r2, #3
 800ba76:	4889      	ldr	r0, [pc, #548]	; (800bc9c <__ssvfiscanf_r+0x2a0>)
 800ba78:	f7f4 fbb2 	bl	80001e0 <memchr>
 800ba7c:	b138      	cbz	r0, 800ba8e <__ssvfiscanf_r+0x92>
 800ba7e:	eba0 0309 	sub.w	r3, r0, r9
 800ba82:	2001      	movs	r0, #1
 800ba84:	4098      	lsls	r0, r3
 800ba86:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ba88:	4318      	orrs	r0, r3
 800ba8a:	9043      	str	r0, [sp, #268]	; 0x10c
 800ba8c:	46aa      	mov	sl, r5
 800ba8e:	f89a 3000 	ldrb.w	r3, [sl]
 800ba92:	2b67      	cmp	r3, #103	; 0x67
 800ba94:	f10a 0501 	add.w	r5, sl, #1
 800ba98:	d84a      	bhi.n	800bb30 <__ssvfiscanf_r+0x134>
 800ba9a:	2b65      	cmp	r3, #101	; 0x65
 800ba9c:	f080 80b7 	bcs.w	800bc0e <__ssvfiscanf_r+0x212>
 800baa0:	2b47      	cmp	r3, #71	; 0x47
 800baa2:	d82f      	bhi.n	800bb04 <__ssvfiscanf_r+0x108>
 800baa4:	2b45      	cmp	r3, #69	; 0x45
 800baa6:	f080 80b2 	bcs.w	800bc0e <__ssvfiscanf_r+0x212>
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f000 8082 	beq.w	800bbb4 <__ssvfiscanf_r+0x1b8>
 800bab0:	2b25      	cmp	r3, #37	; 0x25
 800bab2:	d066      	beq.n	800bb82 <__ssvfiscanf_r+0x186>
 800bab4:	2303      	movs	r3, #3
 800bab6:	9349      	str	r3, [sp, #292]	; 0x124
 800bab8:	9744      	str	r7, [sp, #272]	; 0x110
 800baba:	e045      	b.n	800bb48 <__ssvfiscanf_r+0x14c>
 800babc:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800babe:	3101      	adds	r1, #1
 800bac0:	9147      	str	r1, [sp, #284]	; 0x11c
 800bac2:	6861      	ldr	r1, [r4, #4]
 800bac4:	3301      	adds	r3, #1
 800bac6:	3901      	subs	r1, #1
 800bac8:	6061      	str	r1, [r4, #4]
 800baca:	6023      	str	r3, [r4, #0]
 800bacc:	6863      	ldr	r3, [r4, #4]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	dd0b      	ble.n	800baea <__ssvfiscanf_r+0xee>
 800bad2:	f000 fd65 	bl	800c5a0 <__locale_ctype_ptr>
 800bad6:	6823      	ldr	r3, [r4, #0]
 800bad8:	7819      	ldrb	r1, [r3, #0]
 800bada:	4408      	add	r0, r1
 800badc:	7841      	ldrb	r1, [r0, #1]
 800bade:	070d      	lsls	r5, r1, #28
 800bae0:	d4ec      	bmi.n	800babc <__ssvfiscanf_r+0xc0>
 800bae2:	f10a 0501 	add.w	r5, sl, #1
 800bae6:	46aa      	mov	sl, r5
 800bae8:	e79e      	b.n	800ba28 <__ssvfiscanf_r+0x2c>
 800baea:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800baec:	4621      	mov	r1, r4
 800baee:	4630      	mov	r0, r6
 800baf0:	4798      	blx	r3
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d0ed      	beq.n	800bad2 <__ssvfiscanf_r+0xd6>
 800baf6:	e7f4      	b.n	800bae2 <__ssvfiscanf_r+0xe6>
 800baf8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bafa:	fb07 1303 	mla	r3, r7, r3, r1
 800bafe:	3b30      	subs	r3, #48	; 0x30
 800bb00:	9345      	str	r3, [sp, #276]	; 0x114
 800bb02:	e7af      	b.n	800ba64 <__ssvfiscanf_r+0x68>
 800bb04:	2b5b      	cmp	r3, #91	; 0x5b
 800bb06:	d061      	beq.n	800bbcc <__ssvfiscanf_r+0x1d0>
 800bb08:	d80c      	bhi.n	800bb24 <__ssvfiscanf_r+0x128>
 800bb0a:	2b58      	cmp	r3, #88	; 0x58
 800bb0c:	d1d2      	bne.n	800bab4 <__ssvfiscanf_r+0xb8>
 800bb0e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800bb10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb14:	9243      	str	r2, [sp, #268]	; 0x10c
 800bb16:	2210      	movs	r2, #16
 800bb18:	9244      	str	r2, [sp, #272]	; 0x110
 800bb1a:	2b6f      	cmp	r3, #111	; 0x6f
 800bb1c:	bfb4      	ite	lt
 800bb1e:	2303      	movlt	r3, #3
 800bb20:	2304      	movge	r3, #4
 800bb22:	e010      	b.n	800bb46 <__ssvfiscanf_r+0x14a>
 800bb24:	2b63      	cmp	r3, #99	; 0x63
 800bb26:	d05c      	beq.n	800bbe2 <__ssvfiscanf_r+0x1e6>
 800bb28:	2b64      	cmp	r3, #100	; 0x64
 800bb2a:	d1c3      	bne.n	800bab4 <__ssvfiscanf_r+0xb8>
 800bb2c:	9744      	str	r7, [sp, #272]	; 0x110
 800bb2e:	e7f4      	b.n	800bb1a <__ssvfiscanf_r+0x11e>
 800bb30:	2b70      	cmp	r3, #112	; 0x70
 800bb32:	d042      	beq.n	800bbba <__ssvfiscanf_r+0x1be>
 800bb34:	d81d      	bhi.n	800bb72 <__ssvfiscanf_r+0x176>
 800bb36:	2b6e      	cmp	r3, #110	; 0x6e
 800bb38:	d059      	beq.n	800bbee <__ssvfiscanf_r+0x1f2>
 800bb3a:	d843      	bhi.n	800bbc4 <__ssvfiscanf_r+0x1c8>
 800bb3c:	2b69      	cmp	r3, #105	; 0x69
 800bb3e:	d1b9      	bne.n	800bab4 <__ssvfiscanf_r+0xb8>
 800bb40:	2300      	movs	r3, #0
 800bb42:	9344      	str	r3, [sp, #272]	; 0x110
 800bb44:	2303      	movs	r3, #3
 800bb46:	9349      	str	r3, [sp, #292]	; 0x124
 800bb48:	6863      	ldr	r3, [r4, #4]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	dd61      	ble.n	800bc12 <__ssvfiscanf_r+0x216>
 800bb4e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bb50:	0659      	lsls	r1, r3, #25
 800bb52:	d56f      	bpl.n	800bc34 <__ssvfiscanf_r+0x238>
 800bb54:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	dc7c      	bgt.n	800bc54 <__ssvfiscanf_r+0x258>
 800bb5a:	ab01      	add	r3, sp, #4
 800bb5c:	4622      	mov	r2, r4
 800bb5e:	a943      	add	r1, sp, #268	; 0x10c
 800bb60:	4630      	mov	r0, r6
 800bb62:	f000 fa35 	bl	800bfd0 <_scanf_chars>
 800bb66:	2801      	cmp	r0, #1
 800bb68:	f000 8092 	beq.w	800bc90 <__ssvfiscanf_r+0x294>
 800bb6c:	2802      	cmp	r0, #2
 800bb6e:	d1ba      	bne.n	800bae6 <__ssvfiscanf_r+0xea>
 800bb70:	e01d      	b.n	800bbae <__ssvfiscanf_r+0x1b2>
 800bb72:	2b75      	cmp	r3, #117	; 0x75
 800bb74:	d0da      	beq.n	800bb2c <__ssvfiscanf_r+0x130>
 800bb76:	2b78      	cmp	r3, #120	; 0x78
 800bb78:	d0c9      	beq.n	800bb0e <__ssvfiscanf_r+0x112>
 800bb7a:	2b73      	cmp	r3, #115	; 0x73
 800bb7c:	d19a      	bne.n	800bab4 <__ssvfiscanf_r+0xb8>
 800bb7e:	2302      	movs	r3, #2
 800bb80:	e7e1      	b.n	800bb46 <__ssvfiscanf_r+0x14a>
 800bb82:	6863      	ldr	r3, [r4, #4]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	dd0c      	ble.n	800bba2 <__ssvfiscanf_r+0x1a6>
 800bb88:	6823      	ldr	r3, [r4, #0]
 800bb8a:	781a      	ldrb	r2, [r3, #0]
 800bb8c:	4593      	cmp	fp, r2
 800bb8e:	d17f      	bne.n	800bc90 <__ssvfiscanf_r+0x294>
 800bb90:	3301      	adds	r3, #1
 800bb92:	6862      	ldr	r2, [r4, #4]
 800bb94:	6023      	str	r3, [r4, #0]
 800bb96:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bb98:	3a01      	subs	r2, #1
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	6062      	str	r2, [r4, #4]
 800bb9e:	9347      	str	r3, [sp, #284]	; 0x11c
 800bba0:	e7a1      	b.n	800bae6 <__ssvfiscanf_r+0xea>
 800bba2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bba4:	4621      	mov	r1, r4
 800bba6:	4630      	mov	r0, r6
 800bba8:	4798      	blx	r3
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	d0ec      	beq.n	800bb88 <__ssvfiscanf_r+0x18c>
 800bbae:	9846      	ldr	r0, [sp, #280]	; 0x118
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d163      	bne.n	800bc7c <__ssvfiscanf_r+0x280>
 800bbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb8:	e066      	b.n	800bc88 <__ssvfiscanf_r+0x28c>
 800bbba:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800bbbc:	f042 0220 	orr.w	r2, r2, #32
 800bbc0:	9243      	str	r2, [sp, #268]	; 0x10c
 800bbc2:	e7a4      	b.n	800bb0e <__ssvfiscanf_r+0x112>
 800bbc4:	2308      	movs	r3, #8
 800bbc6:	9344      	str	r3, [sp, #272]	; 0x110
 800bbc8:	2304      	movs	r3, #4
 800bbca:	e7bc      	b.n	800bb46 <__ssvfiscanf_r+0x14a>
 800bbcc:	4629      	mov	r1, r5
 800bbce:	4640      	mov	r0, r8
 800bbd0:	f000 fb56 	bl	800c280 <__sccl>
 800bbd4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bbd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbda:	9343      	str	r3, [sp, #268]	; 0x10c
 800bbdc:	4605      	mov	r5, r0
 800bbde:	2301      	movs	r3, #1
 800bbe0:	e7b1      	b.n	800bb46 <__ssvfiscanf_r+0x14a>
 800bbe2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bbe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbe8:	9343      	str	r3, [sp, #268]	; 0x10c
 800bbea:	2300      	movs	r3, #0
 800bbec:	e7ab      	b.n	800bb46 <__ssvfiscanf_r+0x14a>
 800bbee:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800bbf0:	06d0      	lsls	r0, r2, #27
 800bbf2:	f53f af78 	bmi.w	800bae6 <__ssvfiscanf_r+0xea>
 800bbf6:	f012 0f01 	tst.w	r2, #1
 800bbfa:	9a01      	ldr	r2, [sp, #4]
 800bbfc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bbfe:	f102 0104 	add.w	r1, r2, #4
 800bc02:	9101      	str	r1, [sp, #4]
 800bc04:	6812      	ldr	r2, [r2, #0]
 800bc06:	bf14      	ite	ne
 800bc08:	8013      	strhne	r3, [r2, #0]
 800bc0a:	6013      	streq	r3, [r2, #0]
 800bc0c:	e76b      	b.n	800bae6 <__ssvfiscanf_r+0xea>
 800bc0e:	2305      	movs	r3, #5
 800bc10:	e799      	b.n	800bb46 <__ssvfiscanf_r+0x14a>
 800bc12:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bc14:	4621      	mov	r1, r4
 800bc16:	4630      	mov	r0, r6
 800bc18:	4798      	blx	r3
 800bc1a:	2800      	cmp	r0, #0
 800bc1c:	d097      	beq.n	800bb4e <__ssvfiscanf_r+0x152>
 800bc1e:	e7c6      	b.n	800bbae <__ssvfiscanf_r+0x1b2>
 800bc20:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800bc22:	3201      	adds	r2, #1
 800bc24:	9247      	str	r2, [sp, #284]	; 0x11c
 800bc26:	6862      	ldr	r2, [r4, #4]
 800bc28:	3a01      	subs	r2, #1
 800bc2a:	2a00      	cmp	r2, #0
 800bc2c:	6062      	str	r2, [r4, #4]
 800bc2e:	dd0a      	ble.n	800bc46 <__ssvfiscanf_r+0x24a>
 800bc30:	3301      	adds	r3, #1
 800bc32:	6023      	str	r3, [r4, #0]
 800bc34:	f000 fcb4 	bl	800c5a0 <__locale_ctype_ptr>
 800bc38:	6823      	ldr	r3, [r4, #0]
 800bc3a:	781a      	ldrb	r2, [r3, #0]
 800bc3c:	4410      	add	r0, r2
 800bc3e:	7842      	ldrb	r2, [r0, #1]
 800bc40:	0712      	lsls	r2, r2, #28
 800bc42:	d4ed      	bmi.n	800bc20 <__ssvfiscanf_r+0x224>
 800bc44:	e786      	b.n	800bb54 <__ssvfiscanf_r+0x158>
 800bc46:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bc48:	4621      	mov	r1, r4
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	4798      	blx	r3
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d0f0      	beq.n	800bc34 <__ssvfiscanf_r+0x238>
 800bc52:	e7ac      	b.n	800bbae <__ssvfiscanf_r+0x1b2>
 800bc54:	2b04      	cmp	r3, #4
 800bc56:	dc06      	bgt.n	800bc66 <__ssvfiscanf_r+0x26a>
 800bc58:	ab01      	add	r3, sp, #4
 800bc5a:	4622      	mov	r2, r4
 800bc5c:	a943      	add	r1, sp, #268	; 0x10c
 800bc5e:	4630      	mov	r0, r6
 800bc60:	f000 fa1a 	bl	800c098 <_scanf_i>
 800bc64:	e77f      	b.n	800bb66 <__ssvfiscanf_r+0x16a>
 800bc66:	4b0e      	ldr	r3, [pc, #56]	; (800bca0 <__ssvfiscanf_r+0x2a4>)
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f43f af3c 	beq.w	800bae6 <__ssvfiscanf_r+0xea>
 800bc6e:	ab01      	add	r3, sp, #4
 800bc70:	4622      	mov	r2, r4
 800bc72:	a943      	add	r1, sp, #268	; 0x10c
 800bc74:	4630      	mov	r0, r6
 800bc76:	f3af 8000 	nop.w
 800bc7a:	e774      	b.n	800bb66 <__ssvfiscanf_r+0x16a>
 800bc7c:	89a3      	ldrh	r3, [r4, #12]
 800bc7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bc82:	bf18      	it	ne
 800bc84:	f04f 30ff 	movne.w	r0, #4294967295
 800bc88:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 800bc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc90:	9846      	ldr	r0, [sp, #280]	; 0x118
 800bc92:	e7f9      	b.n	800bc88 <__ssvfiscanf_r+0x28c>
 800bc94:	0800b949 	.word	0x0800b949
 800bc98:	0800b9c3 	.word	0x0800b9c3
 800bc9c:	0800cf99 	.word	0x0800cf99
 800bca0:	00000000 	.word	0x00000000

0800bca4 <_printf_common>:
 800bca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bca8:	4691      	mov	r9, r2
 800bcaa:	461f      	mov	r7, r3
 800bcac:	688a      	ldr	r2, [r1, #8]
 800bcae:	690b      	ldr	r3, [r1, #16]
 800bcb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	bfb8      	it	lt
 800bcb8:	4613      	movlt	r3, r2
 800bcba:	f8c9 3000 	str.w	r3, [r9]
 800bcbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bcc2:	4606      	mov	r6, r0
 800bcc4:	460c      	mov	r4, r1
 800bcc6:	b112      	cbz	r2, 800bcce <_printf_common+0x2a>
 800bcc8:	3301      	adds	r3, #1
 800bcca:	f8c9 3000 	str.w	r3, [r9]
 800bcce:	6823      	ldr	r3, [r4, #0]
 800bcd0:	0699      	lsls	r1, r3, #26
 800bcd2:	bf42      	ittt	mi
 800bcd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bcd8:	3302      	addmi	r3, #2
 800bcda:	f8c9 3000 	strmi.w	r3, [r9]
 800bcde:	6825      	ldr	r5, [r4, #0]
 800bce0:	f015 0506 	ands.w	r5, r5, #6
 800bce4:	d107      	bne.n	800bcf6 <_printf_common+0x52>
 800bce6:	f104 0a19 	add.w	sl, r4, #25
 800bcea:	68e3      	ldr	r3, [r4, #12]
 800bcec:	f8d9 2000 	ldr.w	r2, [r9]
 800bcf0:	1a9b      	subs	r3, r3, r2
 800bcf2:	429d      	cmp	r5, r3
 800bcf4:	db29      	blt.n	800bd4a <_printf_common+0xa6>
 800bcf6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bcfa:	6822      	ldr	r2, [r4, #0]
 800bcfc:	3300      	adds	r3, #0
 800bcfe:	bf18      	it	ne
 800bd00:	2301      	movne	r3, #1
 800bd02:	0692      	lsls	r2, r2, #26
 800bd04:	d42e      	bmi.n	800bd64 <_printf_common+0xc0>
 800bd06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd0a:	4639      	mov	r1, r7
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	47c0      	blx	r8
 800bd10:	3001      	adds	r0, #1
 800bd12:	d021      	beq.n	800bd58 <_printf_common+0xb4>
 800bd14:	6823      	ldr	r3, [r4, #0]
 800bd16:	68e5      	ldr	r5, [r4, #12]
 800bd18:	f8d9 2000 	ldr.w	r2, [r9]
 800bd1c:	f003 0306 	and.w	r3, r3, #6
 800bd20:	2b04      	cmp	r3, #4
 800bd22:	bf08      	it	eq
 800bd24:	1aad      	subeq	r5, r5, r2
 800bd26:	68a3      	ldr	r3, [r4, #8]
 800bd28:	6922      	ldr	r2, [r4, #16]
 800bd2a:	bf0c      	ite	eq
 800bd2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd30:	2500      	movne	r5, #0
 800bd32:	4293      	cmp	r3, r2
 800bd34:	bfc4      	itt	gt
 800bd36:	1a9b      	subgt	r3, r3, r2
 800bd38:	18ed      	addgt	r5, r5, r3
 800bd3a:	f04f 0900 	mov.w	r9, #0
 800bd3e:	341a      	adds	r4, #26
 800bd40:	454d      	cmp	r5, r9
 800bd42:	d11b      	bne.n	800bd7c <_printf_common+0xd8>
 800bd44:	2000      	movs	r0, #0
 800bd46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	4652      	mov	r2, sl
 800bd4e:	4639      	mov	r1, r7
 800bd50:	4630      	mov	r0, r6
 800bd52:	47c0      	blx	r8
 800bd54:	3001      	adds	r0, #1
 800bd56:	d103      	bne.n	800bd60 <_printf_common+0xbc>
 800bd58:	f04f 30ff 	mov.w	r0, #4294967295
 800bd5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd60:	3501      	adds	r5, #1
 800bd62:	e7c2      	b.n	800bcea <_printf_common+0x46>
 800bd64:	18e1      	adds	r1, r4, r3
 800bd66:	1c5a      	adds	r2, r3, #1
 800bd68:	2030      	movs	r0, #48	; 0x30
 800bd6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd6e:	4422      	add	r2, r4
 800bd70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd78:	3302      	adds	r3, #2
 800bd7a:	e7c4      	b.n	800bd06 <_printf_common+0x62>
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	4622      	mov	r2, r4
 800bd80:	4639      	mov	r1, r7
 800bd82:	4630      	mov	r0, r6
 800bd84:	47c0      	blx	r8
 800bd86:	3001      	adds	r0, #1
 800bd88:	d0e6      	beq.n	800bd58 <_printf_common+0xb4>
 800bd8a:	f109 0901 	add.w	r9, r9, #1
 800bd8e:	e7d7      	b.n	800bd40 <_printf_common+0x9c>

0800bd90 <_printf_i>:
 800bd90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd94:	4617      	mov	r7, r2
 800bd96:	7e0a      	ldrb	r2, [r1, #24]
 800bd98:	b085      	sub	sp, #20
 800bd9a:	2a6e      	cmp	r2, #110	; 0x6e
 800bd9c:	4698      	mov	r8, r3
 800bd9e:	4606      	mov	r6, r0
 800bda0:	460c      	mov	r4, r1
 800bda2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bda4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800bda8:	f000 80bc 	beq.w	800bf24 <_printf_i+0x194>
 800bdac:	d81a      	bhi.n	800bde4 <_printf_i+0x54>
 800bdae:	2a63      	cmp	r2, #99	; 0x63
 800bdb0:	d02e      	beq.n	800be10 <_printf_i+0x80>
 800bdb2:	d80a      	bhi.n	800bdca <_printf_i+0x3a>
 800bdb4:	2a00      	cmp	r2, #0
 800bdb6:	f000 80c8 	beq.w	800bf4a <_printf_i+0x1ba>
 800bdba:	2a58      	cmp	r2, #88	; 0x58
 800bdbc:	f000 808a 	beq.w	800bed4 <_printf_i+0x144>
 800bdc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdc4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800bdc8:	e02a      	b.n	800be20 <_printf_i+0x90>
 800bdca:	2a64      	cmp	r2, #100	; 0x64
 800bdcc:	d001      	beq.n	800bdd2 <_printf_i+0x42>
 800bdce:	2a69      	cmp	r2, #105	; 0x69
 800bdd0:	d1f6      	bne.n	800bdc0 <_printf_i+0x30>
 800bdd2:	6821      	ldr	r1, [r4, #0]
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	f011 0f80 	tst.w	r1, #128	; 0x80
 800bdda:	d023      	beq.n	800be24 <_printf_i+0x94>
 800bddc:	1d11      	adds	r1, r2, #4
 800bdde:	6019      	str	r1, [r3, #0]
 800bde0:	6813      	ldr	r3, [r2, #0]
 800bde2:	e027      	b.n	800be34 <_printf_i+0xa4>
 800bde4:	2a73      	cmp	r2, #115	; 0x73
 800bde6:	f000 80b4 	beq.w	800bf52 <_printf_i+0x1c2>
 800bdea:	d808      	bhi.n	800bdfe <_printf_i+0x6e>
 800bdec:	2a6f      	cmp	r2, #111	; 0x6f
 800bdee:	d02a      	beq.n	800be46 <_printf_i+0xb6>
 800bdf0:	2a70      	cmp	r2, #112	; 0x70
 800bdf2:	d1e5      	bne.n	800bdc0 <_printf_i+0x30>
 800bdf4:	680a      	ldr	r2, [r1, #0]
 800bdf6:	f042 0220 	orr.w	r2, r2, #32
 800bdfa:	600a      	str	r2, [r1, #0]
 800bdfc:	e003      	b.n	800be06 <_printf_i+0x76>
 800bdfe:	2a75      	cmp	r2, #117	; 0x75
 800be00:	d021      	beq.n	800be46 <_printf_i+0xb6>
 800be02:	2a78      	cmp	r2, #120	; 0x78
 800be04:	d1dc      	bne.n	800bdc0 <_printf_i+0x30>
 800be06:	2278      	movs	r2, #120	; 0x78
 800be08:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800be0c:	496e      	ldr	r1, [pc, #440]	; (800bfc8 <_printf_i+0x238>)
 800be0e:	e064      	b.n	800beda <_printf_i+0x14a>
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800be16:	1d11      	adds	r1, r2, #4
 800be18:	6019      	str	r1, [r3, #0]
 800be1a:	6813      	ldr	r3, [r2, #0]
 800be1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be20:	2301      	movs	r3, #1
 800be22:	e0a3      	b.n	800bf6c <_printf_i+0x1dc>
 800be24:	f011 0f40 	tst.w	r1, #64	; 0x40
 800be28:	f102 0104 	add.w	r1, r2, #4
 800be2c:	6019      	str	r1, [r3, #0]
 800be2e:	d0d7      	beq.n	800bde0 <_printf_i+0x50>
 800be30:	f9b2 3000 	ldrsh.w	r3, [r2]
 800be34:	2b00      	cmp	r3, #0
 800be36:	da03      	bge.n	800be40 <_printf_i+0xb0>
 800be38:	222d      	movs	r2, #45	; 0x2d
 800be3a:	425b      	negs	r3, r3
 800be3c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800be40:	4962      	ldr	r1, [pc, #392]	; (800bfcc <_printf_i+0x23c>)
 800be42:	220a      	movs	r2, #10
 800be44:	e017      	b.n	800be76 <_printf_i+0xe6>
 800be46:	6820      	ldr	r0, [r4, #0]
 800be48:	6819      	ldr	r1, [r3, #0]
 800be4a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800be4e:	d003      	beq.n	800be58 <_printf_i+0xc8>
 800be50:	1d08      	adds	r0, r1, #4
 800be52:	6018      	str	r0, [r3, #0]
 800be54:	680b      	ldr	r3, [r1, #0]
 800be56:	e006      	b.n	800be66 <_printf_i+0xd6>
 800be58:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be5c:	f101 0004 	add.w	r0, r1, #4
 800be60:	6018      	str	r0, [r3, #0]
 800be62:	d0f7      	beq.n	800be54 <_printf_i+0xc4>
 800be64:	880b      	ldrh	r3, [r1, #0]
 800be66:	4959      	ldr	r1, [pc, #356]	; (800bfcc <_printf_i+0x23c>)
 800be68:	2a6f      	cmp	r2, #111	; 0x6f
 800be6a:	bf14      	ite	ne
 800be6c:	220a      	movne	r2, #10
 800be6e:	2208      	moveq	r2, #8
 800be70:	2000      	movs	r0, #0
 800be72:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800be76:	6865      	ldr	r5, [r4, #4]
 800be78:	60a5      	str	r5, [r4, #8]
 800be7a:	2d00      	cmp	r5, #0
 800be7c:	f2c0 809c 	blt.w	800bfb8 <_printf_i+0x228>
 800be80:	6820      	ldr	r0, [r4, #0]
 800be82:	f020 0004 	bic.w	r0, r0, #4
 800be86:	6020      	str	r0, [r4, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d13f      	bne.n	800bf0c <_printf_i+0x17c>
 800be8c:	2d00      	cmp	r5, #0
 800be8e:	f040 8095 	bne.w	800bfbc <_printf_i+0x22c>
 800be92:	4675      	mov	r5, lr
 800be94:	2a08      	cmp	r2, #8
 800be96:	d10b      	bne.n	800beb0 <_printf_i+0x120>
 800be98:	6823      	ldr	r3, [r4, #0]
 800be9a:	07da      	lsls	r2, r3, #31
 800be9c:	d508      	bpl.n	800beb0 <_printf_i+0x120>
 800be9e:	6923      	ldr	r3, [r4, #16]
 800bea0:	6862      	ldr	r2, [r4, #4]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	bfde      	ittt	le
 800bea6:	2330      	movle	r3, #48	; 0x30
 800bea8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800beac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800beb0:	ebae 0305 	sub.w	r3, lr, r5
 800beb4:	6123      	str	r3, [r4, #16]
 800beb6:	f8cd 8000 	str.w	r8, [sp]
 800beba:	463b      	mov	r3, r7
 800bebc:	aa03      	add	r2, sp, #12
 800bebe:	4621      	mov	r1, r4
 800bec0:	4630      	mov	r0, r6
 800bec2:	f7ff feef 	bl	800bca4 <_printf_common>
 800bec6:	3001      	adds	r0, #1
 800bec8:	d155      	bne.n	800bf76 <_printf_i+0x1e6>
 800beca:	f04f 30ff 	mov.w	r0, #4294967295
 800bece:	b005      	add	sp, #20
 800bed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bed4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800bed8:	493c      	ldr	r1, [pc, #240]	; (800bfcc <_printf_i+0x23c>)
 800beda:	6822      	ldr	r2, [r4, #0]
 800bedc:	6818      	ldr	r0, [r3, #0]
 800bede:	f012 0f80 	tst.w	r2, #128	; 0x80
 800bee2:	f100 0504 	add.w	r5, r0, #4
 800bee6:	601d      	str	r5, [r3, #0]
 800bee8:	d001      	beq.n	800beee <_printf_i+0x15e>
 800beea:	6803      	ldr	r3, [r0, #0]
 800beec:	e002      	b.n	800bef4 <_printf_i+0x164>
 800beee:	0655      	lsls	r5, r2, #25
 800bef0:	d5fb      	bpl.n	800beea <_printf_i+0x15a>
 800bef2:	8803      	ldrh	r3, [r0, #0]
 800bef4:	07d0      	lsls	r0, r2, #31
 800bef6:	bf44      	itt	mi
 800bef8:	f042 0220 	orrmi.w	r2, r2, #32
 800befc:	6022      	strmi	r2, [r4, #0]
 800befe:	b91b      	cbnz	r3, 800bf08 <_printf_i+0x178>
 800bf00:	6822      	ldr	r2, [r4, #0]
 800bf02:	f022 0220 	bic.w	r2, r2, #32
 800bf06:	6022      	str	r2, [r4, #0]
 800bf08:	2210      	movs	r2, #16
 800bf0a:	e7b1      	b.n	800be70 <_printf_i+0xe0>
 800bf0c:	4675      	mov	r5, lr
 800bf0e:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf12:	fb02 3310 	mls	r3, r2, r0, r3
 800bf16:	5ccb      	ldrb	r3, [r1, r3]
 800bf18:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	d1f5      	bne.n	800bf0e <_printf_i+0x17e>
 800bf22:	e7b7      	b.n	800be94 <_printf_i+0x104>
 800bf24:	6808      	ldr	r0, [r1, #0]
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	6949      	ldr	r1, [r1, #20]
 800bf2a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800bf2e:	d004      	beq.n	800bf3a <_printf_i+0x1aa>
 800bf30:	1d10      	adds	r0, r2, #4
 800bf32:	6018      	str	r0, [r3, #0]
 800bf34:	6813      	ldr	r3, [r2, #0]
 800bf36:	6019      	str	r1, [r3, #0]
 800bf38:	e007      	b.n	800bf4a <_printf_i+0x1ba>
 800bf3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf3e:	f102 0004 	add.w	r0, r2, #4
 800bf42:	6018      	str	r0, [r3, #0]
 800bf44:	6813      	ldr	r3, [r2, #0]
 800bf46:	d0f6      	beq.n	800bf36 <_printf_i+0x1a6>
 800bf48:	8019      	strh	r1, [r3, #0]
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	6123      	str	r3, [r4, #16]
 800bf4e:	4675      	mov	r5, lr
 800bf50:	e7b1      	b.n	800beb6 <_printf_i+0x126>
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	1d11      	adds	r1, r2, #4
 800bf56:	6019      	str	r1, [r3, #0]
 800bf58:	6815      	ldr	r5, [r2, #0]
 800bf5a:	6862      	ldr	r2, [r4, #4]
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	4628      	mov	r0, r5
 800bf60:	f7f4 f93e 	bl	80001e0 <memchr>
 800bf64:	b108      	cbz	r0, 800bf6a <_printf_i+0x1da>
 800bf66:	1b40      	subs	r0, r0, r5
 800bf68:	6060      	str	r0, [r4, #4]
 800bf6a:	6863      	ldr	r3, [r4, #4]
 800bf6c:	6123      	str	r3, [r4, #16]
 800bf6e:	2300      	movs	r3, #0
 800bf70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf74:	e79f      	b.n	800beb6 <_printf_i+0x126>
 800bf76:	6923      	ldr	r3, [r4, #16]
 800bf78:	462a      	mov	r2, r5
 800bf7a:	4639      	mov	r1, r7
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	47c0      	blx	r8
 800bf80:	3001      	adds	r0, #1
 800bf82:	d0a2      	beq.n	800beca <_printf_i+0x13a>
 800bf84:	6823      	ldr	r3, [r4, #0]
 800bf86:	079b      	lsls	r3, r3, #30
 800bf88:	d507      	bpl.n	800bf9a <_printf_i+0x20a>
 800bf8a:	2500      	movs	r5, #0
 800bf8c:	f104 0919 	add.w	r9, r4, #25
 800bf90:	68e3      	ldr	r3, [r4, #12]
 800bf92:	9a03      	ldr	r2, [sp, #12]
 800bf94:	1a9b      	subs	r3, r3, r2
 800bf96:	429d      	cmp	r5, r3
 800bf98:	db05      	blt.n	800bfa6 <_printf_i+0x216>
 800bf9a:	68e0      	ldr	r0, [r4, #12]
 800bf9c:	9b03      	ldr	r3, [sp, #12]
 800bf9e:	4298      	cmp	r0, r3
 800bfa0:	bfb8      	it	lt
 800bfa2:	4618      	movlt	r0, r3
 800bfa4:	e793      	b.n	800bece <_printf_i+0x13e>
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	464a      	mov	r2, r9
 800bfaa:	4639      	mov	r1, r7
 800bfac:	4630      	mov	r0, r6
 800bfae:	47c0      	blx	r8
 800bfb0:	3001      	adds	r0, #1
 800bfb2:	d08a      	beq.n	800beca <_printf_i+0x13a>
 800bfb4:	3501      	adds	r5, #1
 800bfb6:	e7eb      	b.n	800bf90 <_printf_i+0x200>
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1a7      	bne.n	800bf0c <_printf_i+0x17c>
 800bfbc:	780b      	ldrb	r3, [r1, #0]
 800bfbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfc6:	e765      	b.n	800be94 <_printf_i+0x104>
 800bfc8:	0800cfb5 	.word	0x0800cfb5
 800bfcc:	0800cfa4 	.word	0x0800cfa4

0800bfd0 <_scanf_chars>:
 800bfd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd4:	4615      	mov	r5, r2
 800bfd6:	688a      	ldr	r2, [r1, #8]
 800bfd8:	4680      	mov	r8, r0
 800bfda:	460c      	mov	r4, r1
 800bfdc:	b932      	cbnz	r2, 800bfec <_scanf_chars+0x1c>
 800bfde:	698a      	ldr	r2, [r1, #24]
 800bfe0:	2a00      	cmp	r2, #0
 800bfe2:	bf0c      	ite	eq
 800bfe4:	2201      	moveq	r2, #1
 800bfe6:	f04f 32ff 	movne.w	r2, #4294967295
 800bfea:	608a      	str	r2, [r1, #8]
 800bfec:	6822      	ldr	r2, [r4, #0]
 800bfee:	06d1      	lsls	r1, r2, #27
 800bff0:	bf5f      	itttt	pl
 800bff2:	681a      	ldrpl	r2, [r3, #0]
 800bff4:	1d11      	addpl	r1, r2, #4
 800bff6:	6019      	strpl	r1, [r3, #0]
 800bff8:	6817      	ldrpl	r7, [r2, #0]
 800bffa:	2600      	movs	r6, #0
 800bffc:	69a3      	ldr	r3, [r4, #24]
 800bffe:	b1db      	cbz	r3, 800c038 <_scanf_chars+0x68>
 800c000:	2b01      	cmp	r3, #1
 800c002:	d107      	bne.n	800c014 <_scanf_chars+0x44>
 800c004:	682b      	ldr	r3, [r5, #0]
 800c006:	6962      	ldr	r2, [r4, #20]
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	5cd3      	ldrb	r3, [r2, r3]
 800c00c:	b9a3      	cbnz	r3, 800c038 <_scanf_chars+0x68>
 800c00e:	2e00      	cmp	r6, #0
 800c010:	d132      	bne.n	800c078 <_scanf_chars+0xa8>
 800c012:	e006      	b.n	800c022 <_scanf_chars+0x52>
 800c014:	2b02      	cmp	r3, #2
 800c016:	d007      	beq.n	800c028 <_scanf_chars+0x58>
 800c018:	2e00      	cmp	r6, #0
 800c01a:	d12d      	bne.n	800c078 <_scanf_chars+0xa8>
 800c01c:	69a3      	ldr	r3, [r4, #24]
 800c01e:	2b01      	cmp	r3, #1
 800c020:	d12a      	bne.n	800c078 <_scanf_chars+0xa8>
 800c022:	2001      	movs	r0, #1
 800c024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c028:	f000 faba 	bl	800c5a0 <__locale_ctype_ptr>
 800c02c:	682b      	ldr	r3, [r5, #0]
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	4418      	add	r0, r3
 800c032:	7843      	ldrb	r3, [r0, #1]
 800c034:	071b      	lsls	r3, r3, #28
 800c036:	d4ef      	bmi.n	800c018 <_scanf_chars+0x48>
 800c038:	6823      	ldr	r3, [r4, #0]
 800c03a:	06da      	lsls	r2, r3, #27
 800c03c:	bf5e      	ittt	pl
 800c03e:	682b      	ldrpl	r3, [r5, #0]
 800c040:	781b      	ldrbpl	r3, [r3, #0]
 800c042:	703b      	strbpl	r3, [r7, #0]
 800c044:	682a      	ldr	r2, [r5, #0]
 800c046:	686b      	ldr	r3, [r5, #4]
 800c048:	f102 0201 	add.w	r2, r2, #1
 800c04c:	602a      	str	r2, [r5, #0]
 800c04e:	68a2      	ldr	r2, [r4, #8]
 800c050:	f103 33ff 	add.w	r3, r3, #4294967295
 800c054:	f102 32ff 	add.w	r2, r2, #4294967295
 800c058:	606b      	str	r3, [r5, #4]
 800c05a:	f106 0601 	add.w	r6, r6, #1
 800c05e:	bf58      	it	pl
 800c060:	3701      	addpl	r7, #1
 800c062:	60a2      	str	r2, [r4, #8]
 800c064:	b142      	cbz	r2, 800c078 <_scanf_chars+0xa8>
 800c066:	2b00      	cmp	r3, #0
 800c068:	dcc8      	bgt.n	800bffc <_scanf_chars+0x2c>
 800c06a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c06e:	4629      	mov	r1, r5
 800c070:	4640      	mov	r0, r8
 800c072:	4798      	blx	r3
 800c074:	2800      	cmp	r0, #0
 800c076:	d0c1      	beq.n	800bffc <_scanf_chars+0x2c>
 800c078:	6823      	ldr	r3, [r4, #0]
 800c07a:	f013 0310 	ands.w	r3, r3, #16
 800c07e:	d105      	bne.n	800c08c <_scanf_chars+0xbc>
 800c080:	68e2      	ldr	r2, [r4, #12]
 800c082:	3201      	adds	r2, #1
 800c084:	60e2      	str	r2, [r4, #12]
 800c086:	69a2      	ldr	r2, [r4, #24]
 800c088:	b102      	cbz	r2, 800c08c <_scanf_chars+0xbc>
 800c08a:	703b      	strb	r3, [r7, #0]
 800c08c:	6923      	ldr	r3, [r4, #16]
 800c08e:	441e      	add	r6, r3
 800c090:	6126      	str	r6, [r4, #16]
 800c092:	2000      	movs	r0, #0
 800c094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c098 <_scanf_i>:
 800c098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c09c:	469a      	mov	sl, r3
 800c09e:	4b74      	ldr	r3, [pc, #464]	; (800c270 <_scanf_i+0x1d8>)
 800c0a0:	460c      	mov	r4, r1
 800c0a2:	4683      	mov	fp, r0
 800c0a4:	4616      	mov	r6, r2
 800c0a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c0aa:	b087      	sub	sp, #28
 800c0ac:	ab03      	add	r3, sp, #12
 800c0ae:	68a7      	ldr	r7, [r4, #8]
 800c0b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c0b4:	4b6f      	ldr	r3, [pc, #444]	; (800c274 <_scanf_i+0x1dc>)
 800c0b6:	69a1      	ldr	r1, [r4, #24]
 800c0b8:	4a6f      	ldr	r2, [pc, #444]	; (800c278 <_scanf_i+0x1e0>)
 800c0ba:	2903      	cmp	r1, #3
 800c0bc:	bf18      	it	ne
 800c0be:	461a      	movne	r2, r3
 800c0c0:	1e7b      	subs	r3, r7, #1
 800c0c2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800c0c6:	bf84      	itt	hi
 800c0c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c0cc:	60a3      	strhi	r3, [r4, #8]
 800c0ce:	6823      	ldr	r3, [r4, #0]
 800c0d0:	9200      	str	r2, [sp, #0]
 800c0d2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c0d6:	bf88      	it	hi
 800c0d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c0dc:	f104 091c 	add.w	r9, r4, #28
 800c0e0:	6023      	str	r3, [r4, #0]
 800c0e2:	bf8c      	ite	hi
 800c0e4:	197f      	addhi	r7, r7, r5
 800c0e6:	2700      	movls	r7, #0
 800c0e8:	464b      	mov	r3, r9
 800c0ea:	f04f 0800 	mov.w	r8, #0
 800c0ee:	9301      	str	r3, [sp, #4]
 800c0f0:	6831      	ldr	r1, [r6, #0]
 800c0f2:	ab03      	add	r3, sp, #12
 800c0f4:	2202      	movs	r2, #2
 800c0f6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c0fa:	7809      	ldrb	r1, [r1, #0]
 800c0fc:	f7f4 f870 	bl	80001e0 <memchr>
 800c100:	9b01      	ldr	r3, [sp, #4]
 800c102:	b328      	cbz	r0, 800c150 <_scanf_i+0xb8>
 800c104:	f1b8 0f01 	cmp.w	r8, #1
 800c108:	d156      	bne.n	800c1b8 <_scanf_i+0x120>
 800c10a:	6862      	ldr	r2, [r4, #4]
 800c10c:	b92a      	cbnz	r2, 800c11a <_scanf_i+0x82>
 800c10e:	2208      	movs	r2, #8
 800c110:	6062      	str	r2, [r4, #4]
 800c112:	6822      	ldr	r2, [r4, #0]
 800c114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c118:	6022      	str	r2, [r4, #0]
 800c11a:	6822      	ldr	r2, [r4, #0]
 800c11c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c120:	6022      	str	r2, [r4, #0]
 800c122:	68a2      	ldr	r2, [r4, #8]
 800c124:	1e51      	subs	r1, r2, #1
 800c126:	60a1      	str	r1, [r4, #8]
 800c128:	b192      	cbz	r2, 800c150 <_scanf_i+0xb8>
 800c12a:	6832      	ldr	r2, [r6, #0]
 800c12c:	1c51      	adds	r1, r2, #1
 800c12e:	6031      	str	r1, [r6, #0]
 800c130:	7812      	ldrb	r2, [r2, #0]
 800c132:	701a      	strb	r2, [r3, #0]
 800c134:	1c5d      	adds	r5, r3, #1
 800c136:	6873      	ldr	r3, [r6, #4]
 800c138:	3b01      	subs	r3, #1
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	6073      	str	r3, [r6, #4]
 800c13e:	dc06      	bgt.n	800c14e <_scanf_i+0xb6>
 800c140:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c144:	4631      	mov	r1, r6
 800c146:	4658      	mov	r0, fp
 800c148:	4798      	blx	r3
 800c14a:	2800      	cmp	r0, #0
 800c14c:	d176      	bne.n	800c23c <_scanf_i+0x1a4>
 800c14e:	462b      	mov	r3, r5
 800c150:	f108 0801 	add.w	r8, r8, #1
 800c154:	f1b8 0f03 	cmp.w	r8, #3
 800c158:	d1c9      	bne.n	800c0ee <_scanf_i+0x56>
 800c15a:	6862      	ldr	r2, [r4, #4]
 800c15c:	b90a      	cbnz	r2, 800c162 <_scanf_i+0xca>
 800c15e:	220a      	movs	r2, #10
 800c160:	6062      	str	r2, [r4, #4]
 800c162:	6862      	ldr	r2, [r4, #4]
 800c164:	4945      	ldr	r1, [pc, #276]	; (800c27c <_scanf_i+0x1e4>)
 800c166:	6960      	ldr	r0, [r4, #20]
 800c168:	9301      	str	r3, [sp, #4]
 800c16a:	1a89      	subs	r1, r1, r2
 800c16c:	f000 f888 	bl	800c280 <__sccl>
 800c170:	9b01      	ldr	r3, [sp, #4]
 800c172:	f04f 0800 	mov.w	r8, #0
 800c176:	461d      	mov	r5, r3
 800c178:	68a3      	ldr	r3, [r4, #8]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d038      	beq.n	800c1f0 <_scanf_i+0x158>
 800c17e:	6831      	ldr	r1, [r6, #0]
 800c180:	6960      	ldr	r0, [r4, #20]
 800c182:	780a      	ldrb	r2, [r1, #0]
 800c184:	5c80      	ldrb	r0, [r0, r2]
 800c186:	2800      	cmp	r0, #0
 800c188:	d032      	beq.n	800c1f0 <_scanf_i+0x158>
 800c18a:	2a30      	cmp	r2, #48	; 0x30
 800c18c:	6822      	ldr	r2, [r4, #0]
 800c18e:	d121      	bne.n	800c1d4 <_scanf_i+0x13c>
 800c190:	0510      	lsls	r0, r2, #20
 800c192:	d51f      	bpl.n	800c1d4 <_scanf_i+0x13c>
 800c194:	f108 0801 	add.w	r8, r8, #1
 800c198:	b117      	cbz	r7, 800c1a0 <_scanf_i+0x108>
 800c19a:	3301      	adds	r3, #1
 800c19c:	3f01      	subs	r7, #1
 800c19e:	60a3      	str	r3, [r4, #8]
 800c1a0:	6873      	ldr	r3, [r6, #4]
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	6073      	str	r3, [r6, #4]
 800c1a8:	dd1b      	ble.n	800c1e2 <_scanf_i+0x14a>
 800c1aa:	6833      	ldr	r3, [r6, #0]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	6033      	str	r3, [r6, #0]
 800c1b0:	68a3      	ldr	r3, [r4, #8]
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	60a3      	str	r3, [r4, #8]
 800c1b6:	e7df      	b.n	800c178 <_scanf_i+0xe0>
 800c1b8:	f1b8 0f02 	cmp.w	r8, #2
 800c1bc:	d1b1      	bne.n	800c122 <_scanf_i+0x8a>
 800c1be:	6822      	ldr	r2, [r4, #0]
 800c1c0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c1c4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c1c8:	d1c2      	bne.n	800c150 <_scanf_i+0xb8>
 800c1ca:	2110      	movs	r1, #16
 800c1cc:	6061      	str	r1, [r4, #4]
 800c1ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c1d2:	e7a5      	b.n	800c120 <_scanf_i+0x88>
 800c1d4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c1d8:	6022      	str	r2, [r4, #0]
 800c1da:	780b      	ldrb	r3, [r1, #0]
 800c1dc:	702b      	strb	r3, [r5, #0]
 800c1de:	3501      	adds	r5, #1
 800c1e0:	e7de      	b.n	800c1a0 <_scanf_i+0x108>
 800c1e2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c1e6:	4631      	mov	r1, r6
 800c1e8:	4658      	mov	r0, fp
 800c1ea:	4798      	blx	r3
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	d0df      	beq.n	800c1b0 <_scanf_i+0x118>
 800c1f0:	6823      	ldr	r3, [r4, #0]
 800c1f2:	05d9      	lsls	r1, r3, #23
 800c1f4:	d50c      	bpl.n	800c210 <_scanf_i+0x178>
 800c1f6:	454d      	cmp	r5, r9
 800c1f8:	d908      	bls.n	800c20c <_scanf_i+0x174>
 800c1fa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c1fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c202:	4632      	mov	r2, r6
 800c204:	4658      	mov	r0, fp
 800c206:	4798      	blx	r3
 800c208:	1e6f      	subs	r7, r5, #1
 800c20a:	463d      	mov	r5, r7
 800c20c:	454d      	cmp	r5, r9
 800c20e:	d02c      	beq.n	800c26a <_scanf_i+0x1d2>
 800c210:	6822      	ldr	r2, [r4, #0]
 800c212:	f012 0210 	ands.w	r2, r2, #16
 800c216:	d11e      	bne.n	800c256 <_scanf_i+0x1be>
 800c218:	702a      	strb	r2, [r5, #0]
 800c21a:	6863      	ldr	r3, [r4, #4]
 800c21c:	9e00      	ldr	r6, [sp, #0]
 800c21e:	4649      	mov	r1, r9
 800c220:	4658      	mov	r0, fp
 800c222:	47b0      	blx	r6
 800c224:	6822      	ldr	r2, [r4, #0]
 800c226:	f8da 3000 	ldr.w	r3, [sl]
 800c22a:	f012 0f20 	tst.w	r2, #32
 800c22e:	d008      	beq.n	800c242 <_scanf_i+0x1aa>
 800c230:	1d1a      	adds	r2, r3, #4
 800c232:	f8ca 2000 	str.w	r2, [sl]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	6018      	str	r0, [r3, #0]
 800c23a:	e009      	b.n	800c250 <_scanf_i+0x1b8>
 800c23c:	f04f 0800 	mov.w	r8, #0
 800c240:	e7d6      	b.n	800c1f0 <_scanf_i+0x158>
 800c242:	07d2      	lsls	r2, r2, #31
 800c244:	d5f4      	bpl.n	800c230 <_scanf_i+0x198>
 800c246:	1d1a      	adds	r2, r3, #4
 800c248:	f8ca 2000 	str.w	r2, [sl]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	8018      	strh	r0, [r3, #0]
 800c250:	68e3      	ldr	r3, [r4, #12]
 800c252:	3301      	adds	r3, #1
 800c254:	60e3      	str	r3, [r4, #12]
 800c256:	eba5 0509 	sub.w	r5, r5, r9
 800c25a:	44a8      	add	r8, r5
 800c25c:	6925      	ldr	r5, [r4, #16]
 800c25e:	4445      	add	r5, r8
 800c260:	6125      	str	r5, [r4, #16]
 800c262:	2000      	movs	r0, #0
 800c264:	b007      	add	sp, #28
 800c266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c26a:	2001      	movs	r0, #1
 800c26c:	e7fa      	b.n	800c264 <_scanf_i+0x1cc>
 800c26e:	bf00      	nop
 800c270:	0800cc48 	.word	0x0800cc48
 800c274:	0800c501 	.word	0x0800c501
 800c278:	0800c3e1 	.word	0x0800c3e1
 800c27c:	0800cfd6 	.word	0x0800cfd6

0800c280 <__sccl>:
 800c280:	b570      	push	{r4, r5, r6, lr}
 800c282:	780b      	ldrb	r3, [r1, #0]
 800c284:	2b5e      	cmp	r3, #94	; 0x5e
 800c286:	bf13      	iteet	ne
 800c288:	1c4a      	addne	r2, r1, #1
 800c28a:	1c8a      	addeq	r2, r1, #2
 800c28c:	784b      	ldrbeq	r3, [r1, #1]
 800c28e:	2100      	movne	r1, #0
 800c290:	bf08      	it	eq
 800c292:	2101      	moveq	r1, #1
 800c294:	1e44      	subs	r4, r0, #1
 800c296:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800c29a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800c29e:	42a5      	cmp	r5, r4
 800c2a0:	d1fb      	bne.n	800c29a <__sccl+0x1a>
 800c2a2:	b913      	cbnz	r3, 800c2aa <__sccl+0x2a>
 800c2a4:	3a01      	subs	r2, #1
 800c2a6:	4610      	mov	r0, r2
 800c2a8:	bd70      	pop	{r4, r5, r6, pc}
 800c2aa:	f081 0401 	eor.w	r4, r1, #1
 800c2ae:	54c4      	strb	r4, [r0, r3]
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	780d      	ldrb	r5, [r1, #0]
 800c2b4:	2d2d      	cmp	r5, #45	; 0x2d
 800c2b6:	f101 0201 	add.w	r2, r1, #1
 800c2ba:	d006      	beq.n	800c2ca <__sccl+0x4a>
 800c2bc:	2d5d      	cmp	r5, #93	; 0x5d
 800c2be:	d0f2      	beq.n	800c2a6 <__sccl+0x26>
 800c2c0:	b90d      	cbnz	r5, 800c2c6 <__sccl+0x46>
 800c2c2:	460a      	mov	r2, r1
 800c2c4:	e7ef      	b.n	800c2a6 <__sccl+0x26>
 800c2c6:	462b      	mov	r3, r5
 800c2c8:	e7f1      	b.n	800c2ae <__sccl+0x2e>
 800c2ca:	784e      	ldrb	r6, [r1, #1]
 800c2cc:	2e5d      	cmp	r6, #93	; 0x5d
 800c2ce:	d0fa      	beq.n	800c2c6 <__sccl+0x46>
 800c2d0:	42b3      	cmp	r3, r6
 800c2d2:	dcf8      	bgt.n	800c2c6 <__sccl+0x46>
 800c2d4:	3102      	adds	r1, #2
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	429e      	cmp	r6, r3
 800c2da:	54c4      	strb	r4, [r0, r3]
 800c2dc:	dcfb      	bgt.n	800c2d6 <__sccl+0x56>
 800c2de:	e7e8      	b.n	800c2b2 <__sccl+0x32>

0800c2e0 <_strtol_l.isra.0>:
 800c2e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e4:	4680      	mov	r8, r0
 800c2e6:	4689      	mov	r9, r1
 800c2e8:	4692      	mov	sl, r2
 800c2ea:	461f      	mov	r7, r3
 800c2ec:	468b      	mov	fp, r1
 800c2ee:	465d      	mov	r5, fp
 800c2f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c2f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2f6:	f000 f950 	bl	800c59a <__locale_ctype_ptr_l>
 800c2fa:	4420      	add	r0, r4
 800c2fc:	7846      	ldrb	r6, [r0, #1]
 800c2fe:	f016 0608 	ands.w	r6, r6, #8
 800c302:	d10b      	bne.n	800c31c <_strtol_l.isra.0+0x3c>
 800c304:	2c2d      	cmp	r4, #45	; 0x2d
 800c306:	d10b      	bne.n	800c320 <_strtol_l.isra.0+0x40>
 800c308:	782c      	ldrb	r4, [r5, #0]
 800c30a:	2601      	movs	r6, #1
 800c30c:	f10b 0502 	add.w	r5, fp, #2
 800c310:	b167      	cbz	r7, 800c32c <_strtol_l.isra.0+0x4c>
 800c312:	2f10      	cmp	r7, #16
 800c314:	d114      	bne.n	800c340 <_strtol_l.isra.0+0x60>
 800c316:	2c30      	cmp	r4, #48	; 0x30
 800c318:	d00a      	beq.n	800c330 <_strtol_l.isra.0+0x50>
 800c31a:	e011      	b.n	800c340 <_strtol_l.isra.0+0x60>
 800c31c:	46ab      	mov	fp, r5
 800c31e:	e7e6      	b.n	800c2ee <_strtol_l.isra.0+0xe>
 800c320:	2c2b      	cmp	r4, #43	; 0x2b
 800c322:	bf04      	itt	eq
 800c324:	782c      	ldrbeq	r4, [r5, #0]
 800c326:	f10b 0502 	addeq.w	r5, fp, #2
 800c32a:	e7f1      	b.n	800c310 <_strtol_l.isra.0+0x30>
 800c32c:	2c30      	cmp	r4, #48	; 0x30
 800c32e:	d127      	bne.n	800c380 <_strtol_l.isra.0+0xa0>
 800c330:	782b      	ldrb	r3, [r5, #0]
 800c332:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c336:	2b58      	cmp	r3, #88	; 0x58
 800c338:	d14b      	bne.n	800c3d2 <_strtol_l.isra.0+0xf2>
 800c33a:	786c      	ldrb	r4, [r5, #1]
 800c33c:	2710      	movs	r7, #16
 800c33e:	3502      	adds	r5, #2
 800c340:	2e00      	cmp	r6, #0
 800c342:	bf0c      	ite	eq
 800c344:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c348:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c34c:	2200      	movs	r2, #0
 800c34e:	fbb1 fef7 	udiv	lr, r1, r7
 800c352:	4610      	mov	r0, r2
 800c354:	fb07 1c1e 	mls	ip, r7, lr, r1
 800c358:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c35c:	2b09      	cmp	r3, #9
 800c35e:	d811      	bhi.n	800c384 <_strtol_l.isra.0+0xa4>
 800c360:	461c      	mov	r4, r3
 800c362:	42a7      	cmp	r7, r4
 800c364:	dd1d      	ble.n	800c3a2 <_strtol_l.isra.0+0xc2>
 800c366:	1c53      	adds	r3, r2, #1
 800c368:	d007      	beq.n	800c37a <_strtol_l.isra.0+0x9a>
 800c36a:	4586      	cmp	lr, r0
 800c36c:	d316      	bcc.n	800c39c <_strtol_l.isra.0+0xbc>
 800c36e:	d101      	bne.n	800c374 <_strtol_l.isra.0+0x94>
 800c370:	45a4      	cmp	ip, r4
 800c372:	db13      	blt.n	800c39c <_strtol_l.isra.0+0xbc>
 800c374:	fb00 4007 	mla	r0, r0, r7, r4
 800c378:	2201      	movs	r2, #1
 800c37a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c37e:	e7eb      	b.n	800c358 <_strtol_l.isra.0+0x78>
 800c380:	270a      	movs	r7, #10
 800c382:	e7dd      	b.n	800c340 <_strtol_l.isra.0+0x60>
 800c384:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c388:	2b19      	cmp	r3, #25
 800c38a:	d801      	bhi.n	800c390 <_strtol_l.isra.0+0xb0>
 800c38c:	3c37      	subs	r4, #55	; 0x37
 800c38e:	e7e8      	b.n	800c362 <_strtol_l.isra.0+0x82>
 800c390:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c394:	2b19      	cmp	r3, #25
 800c396:	d804      	bhi.n	800c3a2 <_strtol_l.isra.0+0xc2>
 800c398:	3c57      	subs	r4, #87	; 0x57
 800c39a:	e7e2      	b.n	800c362 <_strtol_l.isra.0+0x82>
 800c39c:	f04f 32ff 	mov.w	r2, #4294967295
 800c3a0:	e7eb      	b.n	800c37a <_strtol_l.isra.0+0x9a>
 800c3a2:	1c53      	adds	r3, r2, #1
 800c3a4:	d108      	bne.n	800c3b8 <_strtol_l.isra.0+0xd8>
 800c3a6:	2322      	movs	r3, #34	; 0x22
 800c3a8:	f8c8 3000 	str.w	r3, [r8]
 800c3ac:	4608      	mov	r0, r1
 800c3ae:	f1ba 0f00 	cmp.w	sl, #0
 800c3b2:	d107      	bne.n	800c3c4 <_strtol_l.isra.0+0xe4>
 800c3b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3b8:	b106      	cbz	r6, 800c3bc <_strtol_l.isra.0+0xdc>
 800c3ba:	4240      	negs	r0, r0
 800c3bc:	f1ba 0f00 	cmp.w	sl, #0
 800c3c0:	d00c      	beq.n	800c3dc <_strtol_l.isra.0+0xfc>
 800c3c2:	b122      	cbz	r2, 800c3ce <_strtol_l.isra.0+0xee>
 800c3c4:	3d01      	subs	r5, #1
 800c3c6:	f8ca 5000 	str.w	r5, [sl]
 800c3ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ce:	464d      	mov	r5, r9
 800c3d0:	e7f9      	b.n	800c3c6 <_strtol_l.isra.0+0xe6>
 800c3d2:	2430      	movs	r4, #48	; 0x30
 800c3d4:	2f00      	cmp	r7, #0
 800c3d6:	d1b3      	bne.n	800c340 <_strtol_l.isra.0+0x60>
 800c3d8:	2708      	movs	r7, #8
 800c3da:	e7b1      	b.n	800c340 <_strtol_l.isra.0+0x60>
 800c3dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c3e0 <_strtol_r>:
 800c3e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3e2:	4c06      	ldr	r4, [pc, #24]	; (800c3fc <_strtol_r+0x1c>)
 800c3e4:	4d06      	ldr	r5, [pc, #24]	; (800c400 <_strtol_r+0x20>)
 800c3e6:	6824      	ldr	r4, [r4, #0]
 800c3e8:	6a24      	ldr	r4, [r4, #32]
 800c3ea:	2c00      	cmp	r4, #0
 800c3ec:	bf08      	it	eq
 800c3ee:	462c      	moveq	r4, r5
 800c3f0:	9400      	str	r4, [sp, #0]
 800c3f2:	f7ff ff75 	bl	800c2e0 <_strtol_l.isra.0>
 800c3f6:	b003      	add	sp, #12
 800c3f8:	bd30      	pop	{r4, r5, pc}
 800c3fa:	bf00      	nop
 800c3fc:	200002a4 	.word	0x200002a4
 800c400:	20000308 	.word	0x20000308

0800c404 <_strtoul_l.isra.0>:
 800c404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c408:	4680      	mov	r8, r0
 800c40a:	4689      	mov	r9, r1
 800c40c:	4692      	mov	sl, r2
 800c40e:	461e      	mov	r6, r3
 800c410:	460f      	mov	r7, r1
 800c412:	463d      	mov	r5, r7
 800c414:	9808      	ldr	r0, [sp, #32]
 800c416:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c41a:	f000 f8be 	bl	800c59a <__locale_ctype_ptr_l>
 800c41e:	4420      	add	r0, r4
 800c420:	7843      	ldrb	r3, [r0, #1]
 800c422:	f013 0308 	ands.w	r3, r3, #8
 800c426:	d10a      	bne.n	800c43e <_strtoul_l.isra.0+0x3a>
 800c428:	2c2d      	cmp	r4, #45	; 0x2d
 800c42a:	d10a      	bne.n	800c442 <_strtoul_l.isra.0+0x3e>
 800c42c:	782c      	ldrb	r4, [r5, #0]
 800c42e:	2301      	movs	r3, #1
 800c430:	1cbd      	adds	r5, r7, #2
 800c432:	b15e      	cbz	r6, 800c44c <_strtoul_l.isra.0+0x48>
 800c434:	2e10      	cmp	r6, #16
 800c436:	d113      	bne.n	800c460 <_strtoul_l.isra.0+0x5c>
 800c438:	2c30      	cmp	r4, #48	; 0x30
 800c43a:	d009      	beq.n	800c450 <_strtoul_l.isra.0+0x4c>
 800c43c:	e010      	b.n	800c460 <_strtoul_l.isra.0+0x5c>
 800c43e:	462f      	mov	r7, r5
 800c440:	e7e7      	b.n	800c412 <_strtoul_l.isra.0+0xe>
 800c442:	2c2b      	cmp	r4, #43	; 0x2b
 800c444:	bf04      	itt	eq
 800c446:	782c      	ldrbeq	r4, [r5, #0]
 800c448:	1cbd      	addeq	r5, r7, #2
 800c44a:	e7f2      	b.n	800c432 <_strtoul_l.isra.0+0x2e>
 800c44c:	2c30      	cmp	r4, #48	; 0x30
 800c44e:	d125      	bne.n	800c49c <_strtoul_l.isra.0+0x98>
 800c450:	782a      	ldrb	r2, [r5, #0]
 800c452:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c456:	2a58      	cmp	r2, #88	; 0x58
 800c458:	d14a      	bne.n	800c4f0 <_strtoul_l.isra.0+0xec>
 800c45a:	786c      	ldrb	r4, [r5, #1]
 800c45c:	2610      	movs	r6, #16
 800c45e:	3502      	adds	r5, #2
 800c460:	f04f 31ff 	mov.w	r1, #4294967295
 800c464:	2700      	movs	r7, #0
 800c466:	fbb1 f1f6 	udiv	r1, r1, r6
 800c46a:	fb06 fe01 	mul.w	lr, r6, r1
 800c46e:	ea6f 0e0e 	mvn.w	lr, lr
 800c472:	4638      	mov	r0, r7
 800c474:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800c478:	2a09      	cmp	r2, #9
 800c47a:	d811      	bhi.n	800c4a0 <_strtoul_l.isra.0+0x9c>
 800c47c:	4614      	mov	r4, r2
 800c47e:	42a6      	cmp	r6, r4
 800c480:	dd1d      	ble.n	800c4be <_strtoul_l.isra.0+0xba>
 800c482:	2f00      	cmp	r7, #0
 800c484:	db18      	blt.n	800c4b8 <_strtoul_l.isra.0+0xb4>
 800c486:	4281      	cmp	r1, r0
 800c488:	d316      	bcc.n	800c4b8 <_strtoul_l.isra.0+0xb4>
 800c48a:	d101      	bne.n	800c490 <_strtoul_l.isra.0+0x8c>
 800c48c:	45a6      	cmp	lr, r4
 800c48e:	db13      	blt.n	800c4b8 <_strtoul_l.isra.0+0xb4>
 800c490:	fb00 4006 	mla	r0, r0, r6, r4
 800c494:	2701      	movs	r7, #1
 800c496:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c49a:	e7eb      	b.n	800c474 <_strtoul_l.isra.0+0x70>
 800c49c:	260a      	movs	r6, #10
 800c49e:	e7df      	b.n	800c460 <_strtoul_l.isra.0+0x5c>
 800c4a0:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800c4a4:	2a19      	cmp	r2, #25
 800c4a6:	d801      	bhi.n	800c4ac <_strtoul_l.isra.0+0xa8>
 800c4a8:	3c37      	subs	r4, #55	; 0x37
 800c4aa:	e7e8      	b.n	800c47e <_strtoul_l.isra.0+0x7a>
 800c4ac:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800c4b0:	2a19      	cmp	r2, #25
 800c4b2:	d804      	bhi.n	800c4be <_strtoul_l.isra.0+0xba>
 800c4b4:	3c57      	subs	r4, #87	; 0x57
 800c4b6:	e7e2      	b.n	800c47e <_strtoul_l.isra.0+0x7a>
 800c4b8:	f04f 37ff 	mov.w	r7, #4294967295
 800c4bc:	e7eb      	b.n	800c496 <_strtoul_l.isra.0+0x92>
 800c4be:	2f00      	cmp	r7, #0
 800c4c0:	da09      	bge.n	800c4d6 <_strtoul_l.isra.0+0xd2>
 800c4c2:	2322      	movs	r3, #34	; 0x22
 800c4c4:	f8c8 3000 	str.w	r3, [r8]
 800c4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4cc:	f1ba 0f00 	cmp.w	sl, #0
 800c4d0:	d107      	bne.n	800c4e2 <_strtoul_l.isra.0+0xde>
 800c4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4d6:	b103      	cbz	r3, 800c4da <_strtoul_l.isra.0+0xd6>
 800c4d8:	4240      	negs	r0, r0
 800c4da:	f1ba 0f00 	cmp.w	sl, #0
 800c4de:	d00c      	beq.n	800c4fa <_strtoul_l.isra.0+0xf6>
 800c4e0:	b127      	cbz	r7, 800c4ec <_strtoul_l.isra.0+0xe8>
 800c4e2:	3d01      	subs	r5, #1
 800c4e4:	f8ca 5000 	str.w	r5, [sl]
 800c4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ec:	464d      	mov	r5, r9
 800c4ee:	e7f9      	b.n	800c4e4 <_strtoul_l.isra.0+0xe0>
 800c4f0:	2430      	movs	r4, #48	; 0x30
 800c4f2:	2e00      	cmp	r6, #0
 800c4f4:	d1b4      	bne.n	800c460 <_strtoul_l.isra.0+0x5c>
 800c4f6:	2608      	movs	r6, #8
 800c4f8:	e7b2      	b.n	800c460 <_strtoul_l.isra.0+0x5c>
 800c4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800c500 <_strtoul_r>:
 800c500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c502:	4c06      	ldr	r4, [pc, #24]	; (800c51c <_strtoul_r+0x1c>)
 800c504:	4d06      	ldr	r5, [pc, #24]	; (800c520 <_strtoul_r+0x20>)
 800c506:	6824      	ldr	r4, [r4, #0]
 800c508:	6a24      	ldr	r4, [r4, #32]
 800c50a:	2c00      	cmp	r4, #0
 800c50c:	bf08      	it	eq
 800c50e:	462c      	moveq	r4, r5
 800c510:	9400      	str	r4, [sp, #0]
 800c512:	f7ff ff77 	bl	800c404 <_strtoul_l.isra.0>
 800c516:	b003      	add	sp, #12
 800c518:	bd30      	pop	{r4, r5, pc}
 800c51a:	bf00      	nop
 800c51c:	200002a4 	.word	0x200002a4
 800c520:	20000308 	.word	0x20000308

0800c524 <__submore>:
 800c524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c528:	460c      	mov	r4, r1
 800c52a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c52c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c530:	4299      	cmp	r1, r3
 800c532:	d11e      	bne.n	800c572 <__submore+0x4e>
 800c534:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c538:	f7fe ffd4 	bl	800b4e4 <_malloc_r>
 800c53c:	b918      	cbnz	r0, 800c546 <__submore+0x22>
 800c53e:	f04f 30ff 	mov.w	r0, #4294967295
 800c542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c54a:	63a3      	str	r3, [r4, #56]	; 0x38
 800c54c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c550:	6360      	str	r0, [r4, #52]	; 0x34
 800c552:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c556:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c55a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c55e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c562:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c566:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c56a:	6020      	str	r0, [r4, #0]
 800c56c:	2000      	movs	r0, #0
 800c56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c572:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c574:	0077      	lsls	r7, r6, #1
 800c576:	463a      	mov	r2, r7
 800c578:	f000 f84c 	bl	800c614 <_realloc_r>
 800c57c:	4605      	mov	r5, r0
 800c57e:	2800      	cmp	r0, #0
 800c580:	d0dd      	beq.n	800c53e <__submore+0x1a>
 800c582:	eb00 0806 	add.w	r8, r0, r6
 800c586:	4601      	mov	r1, r0
 800c588:	4632      	mov	r2, r6
 800c58a:	4640      	mov	r0, r8
 800c58c:	f7fe ff48 	bl	800b420 <memcpy>
 800c590:	f8c4 8000 	str.w	r8, [r4]
 800c594:	6365      	str	r5, [r4, #52]	; 0x34
 800c596:	63a7      	str	r7, [r4, #56]	; 0x38
 800c598:	e7e8      	b.n	800c56c <__submore+0x48>

0800c59a <__locale_ctype_ptr_l>:
 800c59a:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c59e:	4770      	bx	lr

0800c5a0 <__locale_ctype_ptr>:
 800c5a0:	4b04      	ldr	r3, [pc, #16]	; (800c5b4 <__locale_ctype_ptr+0x14>)
 800c5a2:	4a05      	ldr	r2, [pc, #20]	; (800c5b8 <__locale_ctype_ptr+0x18>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	6a1b      	ldr	r3, [r3, #32]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	bf08      	it	eq
 800c5ac:	4613      	moveq	r3, r2
 800c5ae:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800c5b2:	4770      	bx	lr
 800c5b4:	200002a4 	.word	0x200002a4
 800c5b8:	20000308 	.word	0x20000308

0800c5bc <__ascii_mbtowc>:
 800c5bc:	b082      	sub	sp, #8
 800c5be:	b901      	cbnz	r1, 800c5c2 <__ascii_mbtowc+0x6>
 800c5c0:	a901      	add	r1, sp, #4
 800c5c2:	b142      	cbz	r2, 800c5d6 <__ascii_mbtowc+0x1a>
 800c5c4:	b14b      	cbz	r3, 800c5da <__ascii_mbtowc+0x1e>
 800c5c6:	7813      	ldrb	r3, [r2, #0]
 800c5c8:	600b      	str	r3, [r1, #0]
 800c5ca:	7812      	ldrb	r2, [r2, #0]
 800c5cc:	1c10      	adds	r0, r2, #0
 800c5ce:	bf18      	it	ne
 800c5d0:	2001      	movne	r0, #1
 800c5d2:	b002      	add	sp, #8
 800c5d4:	4770      	bx	lr
 800c5d6:	4610      	mov	r0, r2
 800c5d8:	e7fb      	b.n	800c5d2 <__ascii_mbtowc+0x16>
 800c5da:	f06f 0001 	mvn.w	r0, #1
 800c5de:	e7f8      	b.n	800c5d2 <__ascii_mbtowc+0x16>

0800c5e0 <memmove>:
 800c5e0:	4288      	cmp	r0, r1
 800c5e2:	b510      	push	{r4, lr}
 800c5e4:	eb01 0302 	add.w	r3, r1, r2
 800c5e8:	d803      	bhi.n	800c5f2 <memmove+0x12>
 800c5ea:	1e42      	subs	r2, r0, #1
 800c5ec:	4299      	cmp	r1, r3
 800c5ee:	d10c      	bne.n	800c60a <memmove+0x2a>
 800c5f0:	bd10      	pop	{r4, pc}
 800c5f2:	4298      	cmp	r0, r3
 800c5f4:	d2f9      	bcs.n	800c5ea <memmove+0xa>
 800c5f6:	1881      	adds	r1, r0, r2
 800c5f8:	1ad2      	subs	r2, r2, r3
 800c5fa:	42d3      	cmn	r3, r2
 800c5fc:	d100      	bne.n	800c600 <memmove+0x20>
 800c5fe:	bd10      	pop	{r4, pc}
 800c600:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c604:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c608:	e7f7      	b.n	800c5fa <memmove+0x1a>
 800c60a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c60e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c612:	e7eb      	b.n	800c5ec <memmove+0xc>

0800c614 <_realloc_r>:
 800c614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c616:	4607      	mov	r7, r0
 800c618:	4614      	mov	r4, r2
 800c61a:	460e      	mov	r6, r1
 800c61c:	b921      	cbnz	r1, 800c628 <_realloc_r+0x14>
 800c61e:	4611      	mov	r1, r2
 800c620:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c624:	f7fe bf5e 	b.w	800b4e4 <_malloc_r>
 800c628:	b922      	cbnz	r2, 800c634 <_realloc_r+0x20>
 800c62a:	f7fe ff0d 	bl	800b448 <_free_r>
 800c62e:	4625      	mov	r5, r4
 800c630:	4628      	mov	r0, r5
 800c632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c634:	f000 f821 	bl	800c67a <_malloc_usable_size_r>
 800c638:	4284      	cmp	r4, r0
 800c63a:	d90f      	bls.n	800c65c <_realloc_r+0x48>
 800c63c:	4621      	mov	r1, r4
 800c63e:	4638      	mov	r0, r7
 800c640:	f7fe ff50 	bl	800b4e4 <_malloc_r>
 800c644:	4605      	mov	r5, r0
 800c646:	2800      	cmp	r0, #0
 800c648:	d0f2      	beq.n	800c630 <_realloc_r+0x1c>
 800c64a:	4631      	mov	r1, r6
 800c64c:	4622      	mov	r2, r4
 800c64e:	f7fe fee7 	bl	800b420 <memcpy>
 800c652:	4631      	mov	r1, r6
 800c654:	4638      	mov	r0, r7
 800c656:	f7fe fef7 	bl	800b448 <_free_r>
 800c65a:	e7e9      	b.n	800c630 <_realloc_r+0x1c>
 800c65c:	4635      	mov	r5, r6
 800c65e:	e7e7      	b.n	800c630 <_realloc_r+0x1c>

0800c660 <__ascii_wctomb>:
 800c660:	b149      	cbz	r1, 800c676 <__ascii_wctomb+0x16>
 800c662:	2aff      	cmp	r2, #255	; 0xff
 800c664:	bf85      	ittet	hi
 800c666:	238a      	movhi	r3, #138	; 0x8a
 800c668:	6003      	strhi	r3, [r0, #0]
 800c66a:	700a      	strbls	r2, [r1, #0]
 800c66c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c670:	bf98      	it	ls
 800c672:	2001      	movls	r0, #1
 800c674:	4770      	bx	lr
 800c676:	4608      	mov	r0, r1
 800c678:	4770      	bx	lr

0800c67a <_malloc_usable_size_r>:
 800c67a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800c67e:	2800      	cmp	r0, #0
 800c680:	f1a0 0004 	sub.w	r0, r0, #4
 800c684:	bfbc      	itt	lt
 800c686:	580b      	ldrlt	r3, [r1, r0]
 800c688:	18c0      	addlt	r0, r0, r3
 800c68a:	4770      	bx	lr
 800c68c:	0000      	movs	r0, r0
	...

0800c690 <atan>:
 800c690:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c694:	ec55 4b10 	vmov	r4, r5, d0
 800c698:	4bc7      	ldr	r3, [pc, #796]	; (800c9b8 <atan+0x328>)
 800c69a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c69e:	429e      	cmp	r6, r3
 800c6a0:	46ab      	mov	fp, r5
 800c6a2:	dd18      	ble.n	800c6d6 <atan+0x46>
 800c6a4:	4ac5      	ldr	r2, [pc, #788]	; (800c9bc <atan+0x32c>)
 800c6a6:	4296      	cmp	r6, r2
 800c6a8:	dc01      	bgt.n	800c6ae <atan+0x1e>
 800c6aa:	d109      	bne.n	800c6c0 <atan+0x30>
 800c6ac:	b144      	cbz	r4, 800c6c0 <atan+0x30>
 800c6ae:	4622      	mov	r2, r4
 800c6b0:	462b      	mov	r3, r5
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	4629      	mov	r1, r5
 800c6b6:	f7f3 fde9 	bl	800028c <__adddf3>
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	460d      	mov	r5, r1
 800c6be:	e006      	b.n	800c6ce <atan+0x3e>
 800c6c0:	f1bb 0f00 	cmp.w	fp, #0
 800c6c4:	f300 813a 	bgt.w	800c93c <atan+0x2ac>
 800c6c8:	a59f      	add	r5, pc, #636	; (adr r5, 800c948 <atan+0x2b8>)
 800c6ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c6ce:	ec45 4b10 	vmov	d0, r4, r5
 800c6d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d6:	4bba      	ldr	r3, [pc, #744]	; (800c9c0 <atan+0x330>)
 800c6d8:	429e      	cmp	r6, r3
 800c6da:	dc14      	bgt.n	800c706 <atan+0x76>
 800c6dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c6e0:	429e      	cmp	r6, r3
 800c6e2:	dc0d      	bgt.n	800c700 <atan+0x70>
 800c6e4:	a39a      	add	r3, pc, #616	; (adr r3, 800c950 <atan+0x2c0>)
 800c6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ea:	ee10 0a10 	vmov	r0, s0
 800c6ee:	4629      	mov	r1, r5
 800c6f0:	f7f3 fdcc 	bl	800028c <__adddf3>
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	4bb3      	ldr	r3, [pc, #716]	; (800c9c4 <atan+0x334>)
 800c6f8:	f7f4 fa0a 	bl	8000b10 <__aeabi_dcmpgt>
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	d1e6      	bne.n	800c6ce <atan+0x3e>
 800c700:	f04f 3aff 	mov.w	sl, #4294967295
 800c704:	e02b      	b.n	800c75e <atan+0xce>
 800c706:	f000 f96b 	bl	800c9e0 <fabs>
 800c70a:	4baf      	ldr	r3, [pc, #700]	; (800c9c8 <atan+0x338>)
 800c70c:	429e      	cmp	r6, r3
 800c70e:	ec55 4b10 	vmov	r4, r5, d0
 800c712:	f300 80bf 	bgt.w	800c894 <atan+0x204>
 800c716:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c71a:	429e      	cmp	r6, r3
 800c71c:	f300 80a0 	bgt.w	800c860 <atan+0x1d0>
 800c720:	ee10 2a10 	vmov	r2, s0
 800c724:	ee10 0a10 	vmov	r0, s0
 800c728:	462b      	mov	r3, r5
 800c72a:	4629      	mov	r1, r5
 800c72c:	f7f3 fdae 	bl	800028c <__adddf3>
 800c730:	2200      	movs	r2, #0
 800c732:	4ba4      	ldr	r3, [pc, #656]	; (800c9c4 <atan+0x334>)
 800c734:	f7f3 fda8 	bl	8000288 <__aeabi_dsub>
 800c738:	2200      	movs	r2, #0
 800c73a:	4606      	mov	r6, r0
 800c73c:	460f      	mov	r7, r1
 800c73e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c742:	4620      	mov	r0, r4
 800c744:	4629      	mov	r1, r5
 800c746:	f7f3 fda1 	bl	800028c <__adddf3>
 800c74a:	4602      	mov	r2, r0
 800c74c:	460b      	mov	r3, r1
 800c74e:	4630      	mov	r0, r6
 800c750:	4639      	mov	r1, r7
 800c752:	f7f4 f877 	bl	8000844 <__aeabi_ddiv>
 800c756:	f04f 0a00 	mov.w	sl, #0
 800c75a:	4604      	mov	r4, r0
 800c75c:	460d      	mov	r5, r1
 800c75e:	4622      	mov	r2, r4
 800c760:	462b      	mov	r3, r5
 800c762:	4620      	mov	r0, r4
 800c764:	4629      	mov	r1, r5
 800c766:	f7f3 ff43 	bl	80005f0 <__aeabi_dmul>
 800c76a:	4602      	mov	r2, r0
 800c76c:	460b      	mov	r3, r1
 800c76e:	4680      	mov	r8, r0
 800c770:	4689      	mov	r9, r1
 800c772:	f7f3 ff3d 	bl	80005f0 <__aeabi_dmul>
 800c776:	a378      	add	r3, pc, #480	; (adr r3, 800c958 <atan+0x2c8>)
 800c778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77c:	4606      	mov	r6, r0
 800c77e:	460f      	mov	r7, r1
 800c780:	f7f3 ff36 	bl	80005f0 <__aeabi_dmul>
 800c784:	a376      	add	r3, pc, #472	; (adr r3, 800c960 <atan+0x2d0>)
 800c786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78a:	f7f3 fd7f 	bl	800028c <__adddf3>
 800c78e:	4632      	mov	r2, r6
 800c790:	463b      	mov	r3, r7
 800c792:	f7f3 ff2d 	bl	80005f0 <__aeabi_dmul>
 800c796:	a374      	add	r3, pc, #464	; (adr r3, 800c968 <atan+0x2d8>)
 800c798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79c:	f7f3 fd76 	bl	800028c <__adddf3>
 800c7a0:	4632      	mov	r2, r6
 800c7a2:	463b      	mov	r3, r7
 800c7a4:	f7f3 ff24 	bl	80005f0 <__aeabi_dmul>
 800c7a8:	a371      	add	r3, pc, #452	; (adr r3, 800c970 <atan+0x2e0>)
 800c7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ae:	f7f3 fd6d 	bl	800028c <__adddf3>
 800c7b2:	4632      	mov	r2, r6
 800c7b4:	463b      	mov	r3, r7
 800c7b6:	f7f3 ff1b 	bl	80005f0 <__aeabi_dmul>
 800c7ba:	a36f      	add	r3, pc, #444	; (adr r3, 800c978 <atan+0x2e8>)
 800c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c0:	f7f3 fd64 	bl	800028c <__adddf3>
 800c7c4:	4632      	mov	r2, r6
 800c7c6:	463b      	mov	r3, r7
 800c7c8:	f7f3 ff12 	bl	80005f0 <__aeabi_dmul>
 800c7cc:	a36c      	add	r3, pc, #432	; (adr r3, 800c980 <atan+0x2f0>)
 800c7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d2:	f7f3 fd5b 	bl	800028c <__adddf3>
 800c7d6:	4642      	mov	r2, r8
 800c7d8:	464b      	mov	r3, r9
 800c7da:	f7f3 ff09 	bl	80005f0 <__aeabi_dmul>
 800c7de:	a36a      	add	r3, pc, #424	; (adr r3, 800c988 <atan+0x2f8>)
 800c7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e4:	4680      	mov	r8, r0
 800c7e6:	4689      	mov	r9, r1
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	4639      	mov	r1, r7
 800c7ec:	f7f3 ff00 	bl	80005f0 <__aeabi_dmul>
 800c7f0:	a367      	add	r3, pc, #412	; (adr r3, 800c990 <atan+0x300>)
 800c7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f6:	f7f3 fd47 	bl	8000288 <__aeabi_dsub>
 800c7fa:	4632      	mov	r2, r6
 800c7fc:	463b      	mov	r3, r7
 800c7fe:	f7f3 fef7 	bl	80005f0 <__aeabi_dmul>
 800c802:	a365      	add	r3, pc, #404	; (adr r3, 800c998 <atan+0x308>)
 800c804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c808:	f7f3 fd3e 	bl	8000288 <__aeabi_dsub>
 800c80c:	4632      	mov	r2, r6
 800c80e:	463b      	mov	r3, r7
 800c810:	f7f3 feee 	bl	80005f0 <__aeabi_dmul>
 800c814:	a362      	add	r3, pc, #392	; (adr r3, 800c9a0 <atan+0x310>)
 800c816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81a:	f7f3 fd35 	bl	8000288 <__aeabi_dsub>
 800c81e:	4632      	mov	r2, r6
 800c820:	463b      	mov	r3, r7
 800c822:	f7f3 fee5 	bl	80005f0 <__aeabi_dmul>
 800c826:	a360      	add	r3, pc, #384	; (adr r3, 800c9a8 <atan+0x318>)
 800c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82c:	f7f3 fd2c 	bl	8000288 <__aeabi_dsub>
 800c830:	4632      	mov	r2, r6
 800c832:	463b      	mov	r3, r7
 800c834:	f7f3 fedc 	bl	80005f0 <__aeabi_dmul>
 800c838:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c83c:	4602      	mov	r2, r0
 800c83e:	460b      	mov	r3, r1
 800c840:	d155      	bne.n	800c8ee <atan+0x25e>
 800c842:	4640      	mov	r0, r8
 800c844:	4649      	mov	r1, r9
 800c846:	f7f3 fd21 	bl	800028c <__adddf3>
 800c84a:	4622      	mov	r2, r4
 800c84c:	462b      	mov	r3, r5
 800c84e:	f7f3 fecf 	bl	80005f0 <__aeabi_dmul>
 800c852:	4602      	mov	r2, r0
 800c854:	460b      	mov	r3, r1
 800c856:	4620      	mov	r0, r4
 800c858:	4629      	mov	r1, r5
 800c85a:	f7f3 fd15 	bl	8000288 <__aeabi_dsub>
 800c85e:	e72c      	b.n	800c6ba <atan+0x2a>
 800c860:	ee10 0a10 	vmov	r0, s0
 800c864:	2200      	movs	r2, #0
 800c866:	4b57      	ldr	r3, [pc, #348]	; (800c9c4 <atan+0x334>)
 800c868:	4629      	mov	r1, r5
 800c86a:	f7f3 fd0d 	bl	8000288 <__aeabi_dsub>
 800c86e:	2200      	movs	r2, #0
 800c870:	4606      	mov	r6, r0
 800c872:	460f      	mov	r7, r1
 800c874:	4b53      	ldr	r3, [pc, #332]	; (800c9c4 <atan+0x334>)
 800c876:	4620      	mov	r0, r4
 800c878:	4629      	mov	r1, r5
 800c87a:	f7f3 fd07 	bl	800028c <__adddf3>
 800c87e:	4602      	mov	r2, r0
 800c880:	460b      	mov	r3, r1
 800c882:	4630      	mov	r0, r6
 800c884:	4639      	mov	r1, r7
 800c886:	f7f3 ffdd 	bl	8000844 <__aeabi_ddiv>
 800c88a:	f04f 0a01 	mov.w	sl, #1
 800c88e:	4604      	mov	r4, r0
 800c890:	460d      	mov	r5, r1
 800c892:	e764      	b.n	800c75e <atan+0xce>
 800c894:	4b4d      	ldr	r3, [pc, #308]	; (800c9cc <atan+0x33c>)
 800c896:	429e      	cmp	r6, r3
 800c898:	dc1d      	bgt.n	800c8d6 <atan+0x246>
 800c89a:	ee10 0a10 	vmov	r0, s0
 800c89e:	2200      	movs	r2, #0
 800c8a0:	4b4b      	ldr	r3, [pc, #300]	; (800c9d0 <atan+0x340>)
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	f7f3 fcf0 	bl	8000288 <__aeabi_dsub>
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	4606      	mov	r6, r0
 800c8ac:	460f      	mov	r7, r1
 800c8ae:	4b48      	ldr	r3, [pc, #288]	; (800c9d0 <atan+0x340>)
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	f7f3 fe9c 	bl	80005f0 <__aeabi_dmul>
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	4b42      	ldr	r3, [pc, #264]	; (800c9c4 <atan+0x334>)
 800c8bc:	f7f3 fce6 	bl	800028c <__adddf3>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	4639      	mov	r1, r7
 800c8c8:	f7f3 ffbc 	bl	8000844 <__aeabi_ddiv>
 800c8cc:	f04f 0a02 	mov.w	sl, #2
 800c8d0:	4604      	mov	r4, r0
 800c8d2:	460d      	mov	r5, r1
 800c8d4:	e743      	b.n	800c75e <atan+0xce>
 800c8d6:	462b      	mov	r3, r5
 800c8d8:	ee10 2a10 	vmov	r2, s0
 800c8dc:	2000      	movs	r0, #0
 800c8de:	493d      	ldr	r1, [pc, #244]	; (800c9d4 <atan+0x344>)
 800c8e0:	f7f3 ffb0 	bl	8000844 <__aeabi_ddiv>
 800c8e4:	f04f 0a03 	mov.w	sl, #3
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	460d      	mov	r5, r1
 800c8ec:	e737      	b.n	800c75e <atan+0xce>
 800c8ee:	4640      	mov	r0, r8
 800c8f0:	4649      	mov	r1, r9
 800c8f2:	f7f3 fccb 	bl	800028c <__adddf3>
 800c8f6:	4622      	mov	r2, r4
 800c8f8:	462b      	mov	r3, r5
 800c8fa:	f7f3 fe79 	bl	80005f0 <__aeabi_dmul>
 800c8fe:	4e36      	ldr	r6, [pc, #216]	; (800c9d8 <atan+0x348>)
 800c900:	4b36      	ldr	r3, [pc, #216]	; (800c9dc <atan+0x34c>)
 800c902:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c906:	4456      	add	r6, sl
 800c908:	449a      	add	sl, r3
 800c90a:	e9da 2300 	ldrd	r2, r3, [sl]
 800c90e:	f7f3 fcbb 	bl	8000288 <__aeabi_dsub>
 800c912:	4622      	mov	r2, r4
 800c914:	462b      	mov	r3, r5
 800c916:	f7f3 fcb7 	bl	8000288 <__aeabi_dsub>
 800c91a:	4602      	mov	r2, r0
 800c91c:	460b      	mov	r3, r1
 800c91e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c922:	f7f3 fcb1 	bl	8000288 <__aeabi_dsub>
 800c926:	f1bb 0f00 	cmp.w	fp, #0
 800c92a:	4604      	mov	r4, r0
 800c92c:	460d      	mov	r5, r1
 800c92e:	f6bf aece 	bge.w	800c6ce <atan+0x3e>
 800c932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c936:	4604      	mov	r4, r0
 800c938:	461d      	mov	r5, r3
 800c93a:	e6c8      	b.n	800c6ce <atan+0x3e>
 800c93c:	a51c      	add	r5, pc, #112	; (adr r5, 800c9b0 <atan+0x320>)
 800c93e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c942:	e6c4      	b.n	800c6ce <atan+0x3e>
 800c944:	f3af 8000 	nop.w
 800c948:	54442d18 	.word	0x54442d18
 800c94c:	bff921fb 	.word	0xbff921fb
 800c950:	8800759c 	.word	0x8800759c
 800c954:	7e37e43c 	.word	0x7e37e43c
 800c958:	e322da11 	.word	0xe322da11
 800c95c:	3f90ad3a 	.word	0x3f90ad3a
 800c960:	24760deb 	.word	0x24760deb
 800c964:	3fa97b4b 	.word	0x3fa97b4b
 800c968:	a0d03d51 	.word	0xa0d03d51
 800c96c:	3fb10d66 	.word	0x3fb10d66
 800c970:	c54c206e 	.word	0xc54c206e
 800c974:	3fb745cd 	.word	0x3fb745cd
 800c978:	920083ff 	.word	0x920083ff
 800c97c:	3fc24924 	.word	0x3fc24924
 800c980:	5555550d 	.word	0x5555550d
 800c984:	3fd55555 	.word	0x3fd55555
 800c988:	2c6a6c2f 	.word	0x2c6a6c2f
 800c98c:	bfa2b444 	.word	0xbfa2b444
 800c990:	52defd9a 	.word	0x52defd9a
 800c994:	3fadde2d 	.word	0x3fadde2d
 800c998:	af749a6d 	.word	0xaf749a6d
 800c99c:	3fb3b0f2 	.word	0x3fb3b0f2
 800c9a0:	fe231671 	.word	0xfe231671
 800c9a4:	3fbc71c6 	.word	0x3fbc71c6
 800c9a8:	9998ebc4 	.word	0x9998ebc4
 800c9ac:	3fc99999 	.word	0x3fc99999
 800c9b0:	54442d18 	.word	0x54442d18
 800c9b4:	3ff921fb 	.word	0x3ff921fb
 800c9b8:	440fffff 	.word	0x440fffff
 800c9bc:	7ff00000 	.word	0x7ff00000
 800c9c0:	3fdbffff 	.word	0x3fdbffff
 800c9c4:	3ff00000 	.word	0x3ff00000
 800c9c8:	3ff2ffff 	.word	0x3ff2ffff
 800c9cc:	40037fff 	.word	0x40037fff
 800c9d0:	3ff80000 	.word	0x3ff80000
 800c9d4:	bff00000 	.word	0xbff00000
 800c9d8:	0800d150 	.word	0x0800d150
 800c9dc:	0800d170 	.word	0x0800d170

0800c9e0 <fabs>:
 800c9e0:	ec53 2b10 	vmov	r2, r3, d0
 800c9e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9e8:	ec43 2b10 	vmov	d0, r2, r3
 800c9ec:	4770      	bx	lr
	...

0800c9f0 <sqrt>:
 800c9f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9f4:	ed2d 8b02 	vpush	{d8}
 800c9f8:	b08b      	sub	sp, #44	; 0x2c
 800c9fa:	ec55 4b10 	vmov	r4, r5, d0
 800c9fe:	f000 f851 	bl	800caa4 <__ieee754_sqrt>
 800ca02:	4b26      	ldr	r3, [pc, #152]	; (800ca9c <sqrt+0xac>)
 800ca04:	eeb0 8a40 	vmov.f32	s16, s0
 800ca08:	eef0 8a60 	vmov.f32	s17, s1
 800ca0c:	f993 6000 	ldrsb.w	r6, [r3]
 800ca10:	1c73      	adds	r3, r6, #1
 800ca12:	d02a      	beq.n	800ca6a <sqrt+0x7a>
 800ca14:	4622      	mov	r2, r4
 800ca16:	462b      	mov	r3, r5
 800ca18:	4620      	mov	r0, r4
 800ca1a:	4629      	mov	r1, r5
 800ca1c:	f7f4 f882 	bl	8000b24 <__aeabi_dcmpun>
 800ca20:	4607      	mov	r7, r0
 800ca22:	bb10      	cbnz	r0, 800ca6a <sqrt+0x7a>
 800ca24:	f04f 0800 	mov.w	r8, #0
 800ca28:	f04f 0900 	mov.w	r9, #0
 800ca2c:	4642      	mov	r2, r8
 800ca2e:	464b      	mov	r3, r9
 800ca30:	4620      	mov	r0, r4
 800ca32:	4629      	mov	r1, r5
 800ca34:	f7f4 f84e 	bl	8000ad4 <__aeabi_dcmplt>
 800ca38:	b1b8      	cbz	r0, 800ca6a <sqrt+0x7a>
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	9300      	str	r3, [sp, #0]
 800ca3e:	4b18      	ldr	r3, [pc, #96]	; (800caa0 <sqrt+0xb0>)
 800ca40:	9301      	str	r3, [sp, #4]
 800ca42:	9708      	str	r7, [sp, #32]
 800ca44:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800ca48:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ca4c:	b9b6      	cbnz	r6, 800ca7c <sqrt+0x8c>
 800ca4e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ca52:	4668      	mov	r0, sp
 800ca54:	f000 f8d6 	bl	800cc04 <matherr>
 800ca58:	b1d0      	cbz	r0, 800ca90 <sqrt+0xa0>
 800ca5a:	9b08      	ldr	r3, [sp, #32]
 800ca5c:	b11b      	cbz	r3, 800ca66 <sqrt+0x76>
 800ca5e:	f000 f8d3 	bl	800cc08 <__errno>
 800ca62:	9b08      	ldr	r3, [sp, #32]
 800ca64:	6003      	str	r3, [r0, #0]
 800ca66:	ed9d 8b06 	vldr	d8, [sp, #24]
 800ca6a:	eeb0 0a48 	vmov.f32	s0, s16
 800ca6e:	eef0 0a68 	vmov.f32	s1, s17
 800ca72:	b00b      	add	sp, #44	; 0x2c
 800ca74:	ecbd 8b02 	vpop	{d8}
 800ca78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca7c:	4642      	mov	r2, r8
 800ca7e:	464b      	mov	r3, r9
 800ca80:	4640      	mov	r0, r8
 800ca82:	4649      	mov	r1, r9
 800ca84:	f7f3 fede 	bl	8000844 <__aeabi_ddiv>
 800ca88:	2e02      	cmp	r6, #2
 800ca8a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ca8e:	d1e0      	bne.n	800ca52 <sqrt+0x62>
 800ca90:	f000 f8ba 	bl	800cc08 <__errno>
 800ca94:	2321      	movs	r3, #33	; 0x21
 800ca96:	6003      	str	r3, [r0, #0]
 800ca98:	e7df      	b.n	800ca5a <sqrt+0x6a>
 800ca9a:	bf00      	nop
 800ca9c:	20000474 	.word	0x20000474
 800caa0:	0800d190 	.word	0x0800d190

0800caa4 <__ieee754_sqrt>:
 800caa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caa8:	ec55 4b10 	vmov	r4, r5, d0
 800caac:	4e54      	ldr	r6, [pc, #336]	; (800cc00 <__ieee754_sqrt+0x15c>)
 800caae:	43ae      	bics	r6, r5
 800cab0:	ee10 0a10 	vmov	r0, s0
 800cab4:	462b      	mov	r3, r5
 800cab6:	462a      	mov	r2, r5
 800cab8:	4621      	mov	r1, r4
 800caba:	d113      	bne.n	800cae4 <__ieee754_sqrt+0x40>
 800cabc:	ee10 2a10 	vmov	r2, s0
 800cac0:	462b      	mov	r3, r5
 800cac2:	ee10 0a10 	vmov	r0, s0
 800cac6:	4629      	mov	r1, r5
 800cac8:	f7f3 fd92 	bl	80005f0 <__aeabi_dmul>
 800cacc:	4602      	mov	r2, r0
 800cace:	460b      	mov	r3, r1
 800cad0:	4620      	mov	r0, r4
 800cad2:	4629      	mov	r1, r5
 800cad4:	f7f3 fbda 	bl	800028c <__adddf3>
 800cad8:	4604      	mov	r4, r0
 800cada:	460d      	mov	r5, r1
 800cadc:	ec45 4b10 	vmov	d0, r4, r5
 800cae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cae4:	2d00      	cmp	r5, #0
 800cae6:	dc10      	bgt.n	800cb0a <__ieee754_sqrt+0x66>
 800cae8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800caec:	4330      	orrs	r0, r6
 800caee:	d0f5      	beq.n	800cadc <__ieee754_sqrt+0x38>
 800caf0:	b15d      	cbz	r5, 800cb0a <__ieee754_sqrt+0x66>
 800caf2:	ee10 2a10 	vmov	r2, s0
 800caf6:	462b      	mov	r3, r5
 800caf8:	4620      	mov	r0, r4
 800cafa:	4629      	mov	r1, r5
 800cafc:	f7f3 fbc4 	bl	8000288 <__aeabi_dsub>
 800cb00:	4602      	mov	r2, r0
 800cb02:	460b      	mov	r3, r1
 800cb04:	f7f3 fe9e 	bl	8000844 <__aeabi_ddiv>
 800cb08:	e7e6      	b.n	800cad8 <__ieee754_sqrt+0x34>
 800cb0a:	151b      	asrs	r3, r3, #20
 800cb0c:	d10c      	bne.n	800cb28 <__ieee754_sqrt+0x84>
 800cb0e:	2a00      	cmp	r2, #0
 800cb10:	d06d      	beq.n	800cbee <__ieee754_sqrt+0x14a>
 800cb12:	2000      	movs	r0, #0
 800cb14:	02d6      	lsls	r6, r2, #11
 800cb16:	d56e      	bpl.n	800cbf6 <__ieee754_sqrt+0x152>
 800cb18:	1e44      	subs	r4, r0, #1
 800cb1a:	1b1b      	subs	r3, r3, r4
 800cb1c:	f1c0 0420 	rsb	r4, r0, #32
 800cb20:	fa21 f404 	lsr.w	r4, r1, r4
 800cb24:	4322      	orrs	r2, r4
 800cb26:	4081      	lsls	r1, r0
 800cb28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cb2c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cb30:	07dd      	lsls	r5, r3, #31
 800cb32:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cb36:	bf42      	ittt	mi
 800cb38:	0052      	lslmi	r2, r2, #1
 800cb3a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 800cb3e:	0049      	lslmi	r1, r1, #1
 800cb40:	1058      	asrs	r0, r3, #1
 800cb42:	2500      	movs	r5, #0
 800cb44:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 800cb48:	441a      	add	r2, r3
 800cb4a:	0049      	lsls	r1, r1, #1
 800cb4c:	2316      	movs	r3, #22
 800cb4e:	462c      	mov	r4, r5
 800cb50:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800cb54:	19a7      	adds	r7, r4, r6
 800cb56:	4297      	cmp	r7, r2
 800cb58:	bfde      	ittt	le
 800cb5a:	1bd2      	suble	r2, r2, r7
 800cb5c:	19bc      	addle	r4, r7, r6
 800cb5e:	19ad      	addle	r5, r5, r6
 800cb60:	0052      	lsls	r2, r2, #1
 800cb62:	3b01      	subs	r3, #1
 800cb64:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800cb68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cb6c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cb70:	d1f0      	bne.n	800cb54 <__ieee754_sqrt+0xb0>
 800cb72:	f04f 0e20 	mov.w	lr, #32
 800cb76:	469c      	mov	ip, r3
 800cb78:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cb7c:	42a2      	cmp	r2, r4
 800cb7e:	eb06 070c 	add.w	r7, r6, ip
 800cb82:	dc02      	bgt.n	800cb8a <__ieee754_sqrt+0xe6>
 800cb84:	d112      	bne.n	800cbac <__ieee754_sqrt+0x108>
 800cb86:	428f      	cmp	r7, r1
 800cb88:	d810      	bhi.n	800cbac <__ieee754_sqrt+0x108>
 800cb8a:	2f00      	cmp	r7, #0
 800cb8c:	eb07 0c06 	add.w	ip, r7, r6
 800cb90:	da34      	bge.n	800cbfc <__ieee754_sqrt+0x158>
 800cb92:	f1bc 0f00 	cmp.w	ip, #0
 800cb96:	db31      	blt.n	800cbfc <__ieee754_sqrt+0x158>
 800cb98:	f104 0801 	add.w	r8, r4, #1
 800cb9c:	1b12      	subs	r2, r2, r4
 800cb9e:	428f      	cmp	r7, r1
 800cba0:	bf88      	it	hi
 800cba2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cba6:	1bc9      	subs	r1, r1, r7
 800cba8:	4433      	add	r3, r6
 800cbaa:	4644      	mov	r4, r8
 800cbac:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 800cbb0:	f1be 0e01 	subs.w	lr, lr, #1
 800cbb4:	443a      	add	r2, r7
 800cbb6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cbba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cbbe:	d1dd      	bne.n	800cb7c <__ieee754_sqrt+0xd8>
 800cbc0:	430a      	orrs	r2, r1
 800cbc2:	d006      	beq.n	800cbd2 <__ieee754_sqrt+0x12e>
 800cbc4:	1c5c      	adds	r4, r3, #1
 800cbc6:	bf13      	iteet	ne
 800cbc8:	3301      	addne	r3, #1
 800cbca:	3501      	addeq	r5, #1
 800cbcc:	4673      	moveq	r3, lr
 800cbce:	f023 0301 	bicne.w	r3, r3, #1
 800cbd2:	106a      	asrs	r2, r5, #1
 800cbd4:	085b      	lsrs	r3, r3, #1
 800cbd6:	07e9      	lsls	r1, r5, #31
 800cbd8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800cbdc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800cbe0:	bf48      	it	mi
 800cbe2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800cbe6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800cbea:	461c      	mov	r4, r3
 800cbec:	e776      	b.n	800cadc <__ieee754_sqrt+0x38>
 800cbee:	0aca      	lsrs	r2, r1, #11
 800cbf0:	3b15      	subs	r3, #21
 800cbf2:	0549      	lsls	r1, r1, #21
 800cbf4:	e78b      	b.n	800cb0e <__ieee754_sqrt+0x6a>
 800cbf6:	0052      	lsls	r2, r2, #1
 800cbf8:	3001      	adds	r0, #1
 800cbfa:	e78b      	b.n	800cb14 <__ieee754_sqrt+0x70>
 800cbfc:	46a0      	mov	r8, r4
 800cbfe:	e7cd      	b.n	800cb9c <__ieee754_sqrt+0xf8>
 800cc00:	7ff00000 	.word	0x7ff00000

0800cc04 <matherr>:
 800cc04:	2000      	movs	r0, #0
 800cc06:	4770      	bx	lr

0800cc08 <__errno>:
 800cc08:	4b01      	ldr	r3, [pc, #4]	; (800cc10 <__errno+0x8>)
 800cc0a:	6818      	ldr	r0, [r3, #0]
 800cc0c:	4770      	bx	lr
 800cc0e:	bf00      	nop
 800cc10:	200002a4 	.word	0x200002a4

0800cc14 <_sbrk>:
 800cc14:	4b04      	ldr	r3, [pc, #16]	; (800cc28 <_sbrk+0x14>)
 800cc16:	6819      	ldr	r1, [r3, #0]
 800cc18:	4602      	mov	r2, r0
 800cc1a:	b909      	cbnz	r1, 800cc20 <_sbrk+0xc>
 800cc1c:	4903      	ldr	r1, [pc, #12]	; (800cc2c <_sbrk+0x18>)
 800cc1e:	6019      	str	r1, [r3, #0]
 800cc20:	6818      	ldr	r0, [r3, #0]
 800cc22:	4402      	add	r2, r0
 800cc24:	601a      	str	r2, [r3, #0]
 800cc26:	4770      	bx	lr
 800cc28:	20000874 	.word	0x20000874
 800cc2c:	2000b01c 	.word	0x2000b01c

0800cc30 <_init>:
 800cc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc32:	bf00      	nop
 800cc34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc36:	bc08      	pop	{r3}
 800cc38:	469e      	mov	lr, r3
 800cc3a:	4770      	bx	lr

0800cc3c <_fini>:
 800cc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3e:	bf00      	nop
 800cc40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc42:	bc08      	pop	{r3}
 800cc44:	469e      	mov	lr, r3
 800cc46:	4770      	bx	lr
